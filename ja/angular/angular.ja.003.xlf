<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="7dd51ac3e89fdd6ac4f8af36c97748d2fc75ca6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt;: An alternative to setting the name attribute on the form control element. See the &lt;a href=&quot;ngmodel#using-ngmodel-on-a-standalone-control&quot;&gt;example&lt;/a&gt; for using &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; as a standalone control.</source>
          <target state="translated">&lt;strong&gt;name&lt;/strong&gt;：formコントロール要素にname属性を設定する代わりの方法。 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; をスタンドアロンコントロールとして使用する&lt;a href=&quot;ngmodel#using-ngmodel-on-a-standalone-control&quot;&gt;例&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9cb0a27ab2f16df5a1ff706cb37064ebce7953b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngFor&lt;/strong&gt; to display an array of items.</source>
          <target state="translated">&lt;strong&gt;ngFor&lt;/strong&gt;は、項目の配列を表示します。</target>
        </trans-unit>
        <trans-unit id="0ed64020b10c2028c643bac6c9fcbe35dc5bbabe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ngIf&lt;/strong&gt; to conditionally display a chunk of HTML based on a boolean expression.</source>
          <target state="translated">&lt;strong&gt;ngIf&lt;/strong&gt;は、ブール式に基づいてHTMLのチャンクを条件付きで表示します。</target>
        </trans-unit>
        <trans-unit id="47382f2af3d2086517884d17290a4ba36eef83d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;npm dependencies:&lt;/strong&gt; We only make npm dependency updates that require changes to your apps in a major release. In minor releases, we update peer dependencies by expanding the supported versions, but we do not require projects to update these dependencies until a future major version. This means that during minor Angular releases, npm dependency updates within Angular applications and libraries are optional.</source>
          <target state="translated">&lt;strong&gt;npm依存関係：&lt;/strong&gt;メジャーリリースでは、アプリの変更が必要なnpm依存関係の更新のみを行います。マイナーリリースでは、サポートされているバージョンを拡張することでピアの依存関係を更新しますが、将来のメジャーバージョンまでこれらの依存関係を更新するプロジェクトは必要ありません。つまり、Angularのマイナーリリースでは、Angularアプリケーションとライブラリ内のnpm依存関係の更新はオプションです。</target>
        </trans-unit>
        <trans-unit id="ff81369876b9ff0fac39c86e3a98661d021aa73d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;protractor&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;protractor&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8cc4a187d86b8d960c2f4e934b7227d8c93b309e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;read&lt;/strong&gt; - True to read a different token from the queried element.</source>
          <target state="translated">&lt;strong&gt;読み&lt;/strong&gt; -真の照会元素とは異なるトークンを読み取ること。</target>
        </trans-unit>
        <trans-unit id="30f9789d7f7887863149267a695a35393566e015" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;read&lt;/strong&gt; - True to read a different token from the queried elements.</source>
          <target state="translated">&lt;strong&gt;読み&lt;/strong&gt; -真の照会要素は異なるトークンを読み取ること。</target>
        </trans-unit>
        <trans-unit id="3be4c5497047480cc31393214ff3fbaf9f97818b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rxjs&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;rxjs&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8cb9d62b286f1e1937e2bbe02bd344681dc505e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;selector&lt;/strong&gt; - The directive type or the name used for querying.</source>
          <target state="translated">&lt;strong&gt;selector-&lt;/strong&gt;照会に使用されるディレクティブのタイプまたは名前。</target>
        </trans-unit>
        <trans-unit id="2d2f1fa325329675cba484c31321fb49a3aa1e9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;standalone&lt;/strong&gt;: When set to true, the &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; will not register itself with its parent form, and acts as if it's not in the form. Defaults to false.</source>
          <target state="translated">&lt;strong&gt;standalone&lt;/strong&gt;：trueに設定されている場合、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; は自身をその親フォームに登録せず、フォームにないかのように動作します。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="4377d50a201b9ca0ce8477872ea95c93e7314fe2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static&lt;/strong&gt; - True to resolve query results before change detection runs</source>
          <target state="translated">&lt;strong&gt;static&lt;/strong&gt; -Trueの場合、変更検出を実行する前にクエリ結果を解決します</target>
        </trans-unit>
        <trans-unit id="ce06789f34cd111eacc6b321891b8144637e910d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;static&lt;/strong&gt; - True to resolve query results before change detection runs, false to resolve after change detection.</source>
          <target state="translated">&lt;strong&gt;static-&lt;/strong&gt;変更検出の実行前にクエリ結果を解決する場合はtrue、変更検出後に解決する場合はfalse。</target>
        </trans-unit>
        <trans-unit id="8cf58d8bc4b5e24796ad859418cc2e60410160e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ts-node&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ts-node&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="252774e7da4ec3009c5f69ee513c9ab756bb91dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tslint&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;tslint&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1fef399d9497a91dc61d25242d9621caf49e787" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;typescript&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;typescript&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6eac670ecd612eee291a7dc157fa6ca7b87c4a1f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;updateOn&lt;/strong&gt;: Defines the event upon which the form control value and validity update. Defaults to 'change'. Possible values: &lt;code&gt;'change'&lt;/code&gt; | &lt;code&gt;'blur'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;updateOn&lt;/strong&gt;：フォームコントロールの値と有効性が更新されるイベントを定義します。デフォルトは「変更」です。可能な値： &lt;code&gt;'change'&lt;/code&gt; | &lt;code&gt;'blur'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f60e9ce82796fa904cd1cb51da24e3c3b5672849" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;updateOn&lt;/strong&gt;: Sets the default &lt;code&gt;updateOn&lt;/code&gt; value for all child &lt;code&gt;NgModels&lt;/code&gt; below it unless explicitly set by a child &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;ngModelOptions&lt;/code&gt;). Defaults to 'change'. Possible values: &lt;code&gt;'change'&lt;/code&gt; | &lt;code&gt;'blur'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;updateOn&lt;/strong&gt;：デフォルト設定 &lt;code&gt;updateOn&lt;/code&gt; のすべての子の値 &lt;code&gt;NgModels&lt;/code&gt; 明示的に子で設定されていない限り、その下を &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;NgModel&lt;/a&gt;&lt;/code&gt; 使用 &lt;code&gt;ngModelOptions&lt;/code&gt; を）。デフォルトは「変更」です。可能な値： &lt;code&gt;'change'&lt;/code&gt; | &lt;code&gt;'blur'&lt;/code&gt; | &lt;code&gt;'submit'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eec75c43bf8e37fc0ef1b526f50f7ad95fab9da4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;zone.js&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;zone.js&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec143633e8d3b8f2a394a46e89f29ce13e3c7418" translate="yes" xml:space="preserve">
          <source>=0 (or any other number)</source>
          <target state="translated">=0 (or any other number)</target>
        </trans-unit>
        <trans-unit id="d0db3c16323ae567a43bd22a4e5c5863dbeba52e" translate="yes" xml:space="preserve">
          <source>@angular/animations</source>
          <target state="translated">@angular/animations</target>
        </trans-unit>
        <trans-unit id="a2394e88013e9804af09d9f4e105d293570226f5" translate="yes" xml:space="preserve">
          <source>@angular/animations/browser</source>
          <target state="translated">@angular/animations/browser</target>
        </trans-unit>
        <trans-unit id="9de55435d30ad98c6faf865f81f9182847e85786" translate="yes" xml:space="preserve">
          <source>@angular/animations/browser/testing</source>
          <target state="translated">@angular/animations/browser/testing</target>
        </trans-unit>
        <trans-unit id="279ff4d8c49a936d48c1a77f46101304c9937d57" translate="yes" xml:space="preserve">
          <source>@angular/common</source>
          <target state="translated">@angular/common</target>
        </trans-unit>
        <trans-unit id="35f25f67f51ac375c4414d902cd89df76b82b645" translate="yes" xml:space="preserve">
          <source>@angular/common/http</source>
          <target state="translated">@angular/common/http</target>
        </trans-unit>
        <trans-unit id="47f28773359d75fd992705276203e7d02f2b769c" translate="yes" xml:space="preserve">
          <source>@angular/common/http/testing</source>
          <target state="translated">@angular/common/http/testing</target>
        </trans-unit>
        <trans-unit id="3b355a74fcf516cb572de7a18d614db5303b78d7" translate="yes" xml:space="preserve">
          <source>@angular/common/testing</source>
          <target state="translated">@angular/common/testing</target>
        </trans-unit>
        <trans-unit id="7bea4c6cce38c2240da9a825337a1a9abcabfd01" translate="yes" xml:space="preserve">
          <source>@angular/common/upgrade</source>
          <target state="translated">@angular/common/upgrade</target>
        </trans-unit>
        <trans-unit id="7010d397973168cac1aaf54fc8228b617d553f9c" translate="yes" xml:space="preserve">
          <source>@angular/core</source>
          <target state="translated">@angular/core</target>
        </trans-unit>
        <trans-unit id="9bd54b448bd160b9bdf56afcc4057d60c863c351" translate="yes" xml:space="preserve">
          <source>@angular/core/testing</source>
          <target state="translated">@angular/core/testing</target>
        </trans-unit>
        <trans-unit id="ed082ffeab17b92963b8e0373f3af558b0f94176" translate="yes" xml:space="preserve">
          <source>@angular/elements</source>
          <target state="translated">@angular/elements</target>
        </trans-unit>
        <trans-unit id="61015e41645b01550c86b2d125f2df9790ce7401" translate="yes" xml:space="preserve">
          <source>@angular/forms</source>
          <target state="translated">@angular/forms</target>
        </trans-unit>
        <trans-unit id="e26f7552c4a1f57a5df62b630b09631ff0e15c6f" translate="yes" xml:space="preserve">
          <source>@angular/http</source>
          <target state="translated">@angular/http</target>
        </trans-unit>
        <trans-unit id="e5d1b49b65dd984864e1410b698461c7d36bda5e" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser</source>
          <target state="translated">@angular/platform-browser</target>
        </trans-unit>
        <trans-unit id="10e672eabc8358c20a1b99d0ae0d31870a79f19b" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser-dynamic</source>
          <target state="translated">@angular/platform-browser-dynamic</target>
        </trans-unit>
        <trans-unit id="6b0aa1ede02b7a3f684f0fe214d166f170c82f71" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser-dynamic/testing</source>
          <target state="translated">@angular/platform-browser-dynamic/testing</target>
        </trans-unit>
        <trans-unit id="2e11f0488a229e528fb4158f7aad4f7a6b2e6b25" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser/animations</source>
          <target state="translated">@angular/platform-browser/animations</target>
        </trans-unit>
        <trans-unit id="9e90112b14f3f9d7405ff5bbf5ac41f6fad23e16" translate="yes" xml:space="preserve">
          <source>@angular/platform-browser/testing</source>
          <target state="translated">@angular/platform-browser/testing</target>
        </trans-unit>
        <trans-unit id="8527c36725a4add493230fab1d1ad63c30bb0603" translate="yes" xml:space="preserve">
          <source>@angular/platform-server</source>
          <target state="translated">@angular/platform-server</target>
        </trans-unit>
        <trans-unit id="410b9a42af4eeb82d92a052802bd26cc2f266e61" translate="yes" xml:space="preserve">
          <source>@angular/platform-server/testing</source>
          <target state="translated">@angular/platform-server/testing</target>
        </trans-unit>
        <trans-unit id="67f37ebc89fe2f40791a45ff79cc707894e40668" translate="yes" xml:space="preserve">
          <source>@angular/platform-webworker</source>
          <target state="translated">@angular/platform-webworker</target>
        </trans-unit>
        <trans-unit id="3643488d6d67c98970cbaf515cefbc9d56955a51" translate="yes" xml:space="preserve">
          <source>@angular/platform-webworker-dynamic</source>
          <target state="translated">@angular/platform-webworker-dynamic</target>
        </trans-unit>
        <trans-unit id="fc052c7d8c63d918f895798a4e19da09a87ad784" translate="yes" xml:space="preserve">
          <source>@angular/router</source>
          <target state="translated">@angular/router</target>
        </trans-unit>
        <trans-unit id="ab028ed01d9416a9fdc050529d3c99ec7d1e802e" translate="yes" xml:space="preserve">
          <source>@angular/router/testing</source>
          <target state="translated">@angular/router/testing</target>
        </trans-unit>
        <trans-unit id="a58e96f1bd36053d73916cb9200cae8facf5140e" translate="yes" xml:space="preserve">
          <source>@angular/router/upgrade</source>
          <target state="translated">@angular/router/upgrade</target>
        </trans-unit>
        <trans-unit id="9228aadf92cf122517fe58f2a91bd6ac28ad425e" translate="yes" xml:space="preserve">
          <source>@angular/service-worker</source>
          <target state="translated">@angular/service-worker</target>
        </trans-unit>
        <trans-unit id="d928864368b17a18265aaba4fdd5747c5ed71c42" translate="yes" xml:space="preserve">
          <source>@angular/upgrade</source>
          <target state="translated">@angular/upgrade</target>
        </trans-unit>
        <trans-unit id="81cf614360a6dce81230ded3f9d85bf8b6d75f48" translate="yes" xml:space="preserve">
          <source>@angular/upgrade/static</source>
          <target state="translated">@angular/upgrade/static</target>
        </trans-unit>
        <trans-unit id="2a3f18aae18753215405f0611d509473191a373f" translate="yes" xml:space="preserve">
          <source>@angular/upgrade/static/testing</source>
          <target state="translated">@angular/upgrade/static/testing</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="8bd005966c8583098ae25649268c453cb17489f3" translate="yes" xml:space="preserve">
          <source>A &quot;form submit&quot; is useless at the moment. To make it useful, bind the form's &lt;code&gt;ngSubmit&lt;/code&gt; event property to the hero form component's &lt;code&gt;onSubmit()&lt;/code&gt; method:</source>
          <target state="translated">「フォーム送信」は現時点では役に立ちません。これを有効にするには、フォームの &lt;code&gt;ngSubmit&lt;/code&gt; イベントプロパティをヒーローフォームコンポーネントの &lt;code&gt;onSubmit()&lt;/code&gt; メソッドにバインドします。</target>
        </trans-unit>
        <trans-unit id="65b987ca9a8742f1c3934c570876582add56deb6" translate="yes" xml:space="preserve">
          <source>A 0-based offset into the duration, in milliseconds.</source>
          <target state="translated">ミリ秒単位の、期間への0ベースのオフセット。</target>
        </trans-unit>
        <trans-unit id="c369980a900e3de5edbe23891b4c94301d43b1bc" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for the router initializer that is called after the app is bootstrapped.</source>
          <target state="translated">A &lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DIトークン&lt;/a&gt;アプリがブートストラップされた後に呼び出される初期化子ルータの。</target>
        </trans-unit>
        <trans-unit id="84633910c748bad002ece66ced0127dfa10f310e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for the router service.</source>
          <target state="translated">A &lt;a href=&quot;../../guide/glossary/index#di-token&quot;&gt;DIトークン&lt;/a&gt;ルーターサービスのため。</target>
        </trans-unit>
        <trans-unit id="05cbce62175736deed161b23149e79909f9ee6aa" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/structural-directives&quot;&gt;structural directive&lt;/a&gt; that renders a template for each item in a collection. The directive is placed on an element, which becomes the parent of the cloned templates.</source>
          <target state="translated">&lt;a href=&quot;../../guide/structural-directives&quot;&gt;構造ディレクティブ&lt;/a&gt;コレクション内の各項目のテンプレートをレンダリングします。ディレクティブは、クローンされたテンプレートの親になる要素に配置されます。</target>
        </trans-unit>
        <trans-unit id="bfa958f8e1093a8bce449e50451aecb42605adbf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../guide/structural-directives#the-asterisk--prefix&quot;&gt;shorthand form&lt;/a&gt; of the directive, &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;condition&quot;&lt;/code&gt;, is generally used, provided as an attribute of the anchor element for the inserted template. Angular expands this into a more explicit version, in which the anchor element is contained in an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;a href=&quot;../../guide/structural-directives#the-asterisk--prefix&quot;&gt;速記形態&lt;/a&gt;指令のは、 &lt;code&gt;*&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;=&quot;condition&quot;&lt;/code&gt; 、一般挿入テンプレートのアンカー要素の属性として設けられ、使用されています。Angularはこれをより明確なバージョンに拡張し、アンカー要素は &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素に含まれています。</target>
        </trans-unit>
        <trans-unit id="7af8b7462c7bffa9c6b00d7e9a922cb942a24b41" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for the router initializer that is called after the app is bootstrapped.</source>
          <target state="translated">A &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DIトークン&lt;/a&gt;アプリがブートストラップされた後に呼び出される初期化子ルータの。</target>
        </trans-unit>
        <trans-unit id="2167e95d783d64dac9a3583e6f8be0cb7693f606" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DI token&lt;/a&gt; for the router service.</source>
          <target state="translated">A &lt;a href=&quot;../guide/glossary/index#di-token&quot;&gt;DIトークン&lt;/a&gt;ルーターサービスのため。</target>
        </trans-unit>
        <trans-unit id="671a4596a4f24339272ddfe627b37cb5ceee98f4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guide/structural-directives&quot;&gt;structural directive&lt;/a&gt; that renders a template for each item in a collection. The directive is placed on an element, which becomes the parent of the cloned templates.</source>
          <target state="translated">&lt;a href=&quot;../guide/structural-directives&quot;&gt;構造ディレクティブ&lt;/a&gt;コレクション内の各項目のテンプレートをレンダリングします。ディレクティブは、クローンされたテンプレートの親になる要素に配置されます。</target>
        </trans-unit>
        <trans-unit id="28d80578ea8ec69937675a545d7c84d8b53020fb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;common/locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; used to configure the &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service to represent its state in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;hash fragment&lt;/a&gt; of the browser's URL.</source>
          <target state="translated">A &lt;a href=&quot;common/locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; を&lt;/a&gt;構成するために使用される&lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;で、その状態を表現するためにサービスを&lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;ハッシュフラグメント&lt;/a&gt;ブラウザのURLの。</target>
        </trans-unit>
        <trans-unit id="e86265c3cf6b32ff2fd9442d3886514cc4425a3f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;common/locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; used to configure the &lt;a href=&quot;common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service to represent its state in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;path&lt;/a&gt; of the browser's URL.</source>
          <target state="translated">A &lt;a href=&quot;common/locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; を&lt;/a&gt;構成するために使用される&lt;a href=&quot;common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;で、その状態を表現するためにサービスを&lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;パス&lt;/a&gt;ブラウザのURLの。</target>
        </trans-unit>
        <trans-unit id="07b53ec1c6e80e65a6a934302fe8fff443c524f5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; statement immediately before a field in a class definition that declares the type of that field. Some examples are &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">そのフィールドの型を宣言するクラス定義のフィールドの直前の&lt;a href=&quot;glossary#decorator&quot;&gt;デコレーター&lt;/a&gt;ステートメント。いくつかの例は、 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; して &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="63d4d003e26971bd02516b5ffbc56282868ab70a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; that appears immediately before a class definition, which declares the class to be of the given type, and provides metadata suitable to the type.</source>
          <target state="translated">&lt;a href=&quot;glossary#decorator&quot;&gt;デコレータ&lt;/a&gt;指定されたタイプのものであるとクラスを宣言し、型にメタデータを、適切な提供するクラス定義、直前に表示されます。</target>
        </trans-unit>
        <trans-unit id="736883308dcb282a137dbd91ee5819bc7558057c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt; that acts as a placeholder in a routing component's template. Angular dynamically renders the template based on the current router state.</source>
          <target state="translated">ルーティングコンポーネントのテンプレートでプレースホルダーとして機能する&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;。Angularは現在のルーターの状態に基づいてテンプレートを動的にレンダリングします。</target>
        </trans-unit>
        <trans-unit id="8cc6a0f6df125fb82286558ab003cc9ed2e64056" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;glossary#module&quot;&gt;JavaScript module&lt;/a&gt; that is intended to be imported by a user of &lt;a href=&quot;npm-packages&quot;&gt;an npm package&lt;/a&gt;. An entry-point module typically re-exports symbols from other internal modules. A package can contain multiple entry points. For example, the &lt;code&gt;@angular/core&lt;/code&gt; package has two entry-point modules, which can be imported using the module names &lt;code&gt;@angular/core&lt;/code&gt; and &lt;code&gt;@angular/core/testing&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;npm-packages&quot;&gt;npmパッケージの&lt;/a&gt;ユーザーがインポートすることを目的とした&lt;a href=&quot;glossary#module&quot;&gt;JavaScriptモジュール&lt;/a&gt;。エントリポイントモジュールは、通常、他の内部モジュールからシンボルを再エクスポートします。パッケージには複数のエントリポイントを含めることができます。たとえば、 &lt;code&gt;@angular/core&lt;/code&gt; パッケージには2つのエントリポイントモジュールがあり、モジュール名 &lt;code&gt;@angular/core&lt;/code&gt; および &lt;code&gt;@angular/core/testing&lt;/code&gt; を使用してインポートできます。</target>
        </trans-unit>
        <trans-unit id="add79b6cad225ba3d033ac5074d0537e68619577" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; used to configure the &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service to represent its state in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;hash fragment&lt;/a&gt; of the browser's URL.</source>
          <target state="translated">A &lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; を&lt;/a&gt;構成するために使用される&lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;で、その状態を表現するためにサービスを&lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;ハッシュフラグメント&lt;/a&gt;ブラウザのURLの。</target>
        </trans-unit>
        <trans-unit id="8cb01da6d278c41e8f500ba57266b78eeda4112f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; used to configure the &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; service to represent its state in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;path&lt;/a&gt; of the browser's URL.</source>
          <target state="translated">A &lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; を&lt;/a&gt;構成するために使用される&lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;で、その状態を表現するためにサービスを&lt;a href=&quot;https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax&quot;&gt;パス&lt;/a&gt;ブラウザのURLの。</target>
        </trans-unit>
        <trans-unit id="2bbb0a47b63bbf8d048b90ba20a0504e312db21c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template reference variable&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;template-syntax#ref-vars&quot;&gt;テンプレートの参照変数&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1bcafa0eb5b956163eeed4a6a75cabbad36df0ec" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;toh-pt5#routerlink&quot;&gt;&lt;code&gt;routerLink&lt;/code&gt; attribute&lt;/a&gt; is set to &lt;code&gt;&quot;/heroes&quot;&lt;/code&gt;, the string that the router matches to the route to &lt;code&gt;HeroesComponent&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; is the selector for the &lt;a href=&quot;../api/router/routerlink&quot;&gt;&lt;code&gt;RouterLink&lt;/code&gt; directive&lt;/a&gt; that turns user clicks into router navigations. It's another of the public directives in the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">A &lt;a href=&quot;toh-pt5#routerlink&quot;&gt; &lt;code&gt;routerLink&lt;/code&gt; の属性が&lt;/a&gt;に設定されている &lt;code&gt;&quot;/heroes&quot;&lt;/code&gt; の文字列にルーティングするルータ一致していることを、 &lt;code&gt;HeroesComponent&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; はセレクタである&lt;a href=&quot;../api/router/routerlink&quot;&gt; &lt;code&gt;RouterLink&lt;/code&gt; の指令&lt;/a&gt;ルータナビゲーション中にユーザがクリックをオン。これは、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; のパブリックディレクティブの1つです。</target>
        </trans-unit>
        <trans-unit id="fc4971774abe3d8584810de15a2245c3c6cae43d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a value and listening to changes on a checkbox input element.</source>
          <target state="translated">値を書き込み、チェックボックス入力要素の変更をリッスンするための &lt;code&gt;&lt;a href=&quot;controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd9cf13f7f418773a9187ad3a6e120365e43541c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;core/type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; which has an &lt;code&gt;InjectableDef&lt;/code&gt; static field.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; あり &lt;code&gt;InjectableDef&lt;/code&gt; の静的フィールドを。</target>
        </trans-unit>
        <trans-unit id="a1866590e2a9d78d0830efe2890f1b2b38203b59" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; aggregates the values of each child &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; into an array. It calculates its status by reducing the status values of its children. For example, if one of the controls in a &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; is invalid, the entire array becomes invalid.</source>
          <target state="translated">A &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; は、それぞれの子の値集計 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; を配列に。子のステータス値を減らすことでステータスを計算します。たとえば、 &lt;code&gt;&lt;a href=&quot;formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; のコントロールの1つが無効な場合、配列全体が無効になります。</target>
        </trans-unit>
        <trans-unit id="7b89f06b9f87139e39972a1053c9bc6bca0c91bd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; aggregates the values of each child &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; into one object, with each control name as the key. It calculates its status by reducing the status values of its children. For example, if one of the controls in a group is invalid, the entire group becomes invalid.</source>
          <target state="translated">A &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; は、それぞれの子の値集計 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; をキーとして各コントロール名と、1つのオブジェクトに。子のステータス値を減らすことでステータスを計算します。たとえば、グループ内のいずれかのコントロールが無効である場合、グループ全体が無効になります。</target>
        </trans-unit>
        <trans-unit id="7ef598a60dce9571b1bf71d84f8e3c71d63ad355" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; for writing a value and listening to changes on a checkbox input element.</source>
          <target state="translated">値を書き込み、チェックボックス入力要素の変更をリッスンするための &lt;code&gt;&lt;a href=&quot;forms/controlvalueaccessor&quot;&gt;ControlValueAccessor&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66c4eaf792aaeb8d31859e17fd96da17357b8f90" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; object specifying lazy-loaded child routes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;loadchildren&quot;&gt;LoadChildren&lt;/a&gt;&lt;/code&gt; のレイジーロードされた子のルートを指定するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="63da7a685bae436a5baefed6056ea8939ddd6817" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; (e.g. query &lt;code&gt;&amp;lt;ng-template&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt; with &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;(&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;) template;&lt;/code&gt;)</source>
          <target state="translated">A &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; （例えばクエリ &lt;code&gt;&amp;lt;ng-template&amp;gt;&amp;lt;/ng-template&amp;gt;&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;(&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;) template;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="a511714d8bf182dc76071d42430897aa3ecbec4c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; which has an &lt;code&gt;InjectableDef&lt;/code&gt; static field.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; あり &lt;code&gt;InjectableDef&lt;/code&gt; の静的フィールドを。</target>
        </trans-unit>
        <trans-unit id="be187422c88f7b9b30fb7c76cc4c7c623d036f19" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;upgrade/urlcodec&quot;&gt;UrlCodec&lt;/a&gt;&lt;/code&gt; that uses logic from AngularJS to serialize and parse URLs and URL parameters.</source>
          <target state="translated">AngularJSのロジックを使用して、URLとURLパラメーターをシリアル化および解析する &lt;code&gt;&lt;a href=&quot;upgrade/urlcodec&quot;&gt;UrlCodec&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8aa0947cbfd3ce658b43f4a986bda6fe30e35bb0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;urlcodec&quot;&gt;UrlCodec&lt;/a&gt;&lt;/code&gt; that uses logic from AngularJS to serialize and parse URLs and URL parameters.</source>
          <target state="translated">AngularJSのロジックを使用して、URLとURLパラメーターをシリアル化および解析する &lt;code&gt;&lt;a href=&quot;urlcodec&quot;&gt;UrlCodec&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f670a48ce55883fb60d1e60146176438b4f9fc8f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Rule&lt;/code&gt; can use external template files, transform them, and return another &lt;code&gt;Rule&lt;/code&gt; object with the transformed template. You can use the templating to generate any custom files required for your schematic.</source>
          <target state="translated">A &lt;code&gt;Rule&lt;/code&gt; 、外部のテンプレートファイルを使用してそれらを変換し、別の返すことができる &lt;code&gt;Rule&lt;/code&gt; 変換テンプレートを使用してオブジェクトを。テンプレートを使用して、回路図に必要なカスタムファイルを生成できます。</target>
        </trans-unit>
        <trans-unit id="6c67da25cb3690615ce138f76204d22676cb05cd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Rule&lt;/code&gt; object defines a function that takes a &lt;code&gt;Tree&lt;/code&gt;, applies transformations, and returns a new &lt;code&gt;Tree&lt;/code&gt;. The main file for a schematic, &lt;code&gt;index.ts&lt;/code&gt;, defines a set of rules that implement the schematic's logic.</source>
          <target state="translated">&lt;code&gt;Rule&lt;/code&gt; オブジェクトが取る関数を定義 &lt;code&gt;Tree&lt;/code&gt; 、変換を適用し、新しい返し &lt;code&gt;Tree&lt;/code&gt; 。回路図のメインファイルである &lt;code&gt;index.ts&lt;/code&gt; は、回路図のロジックを実装する一連のルールを定義します。</target>
        </trans-unit>
        <trans-unit id="638c6d0fa216e5dc64a35311be5238d1c02fe4e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Subject&lt;/code&gt; is both a source of observable values and an &lt;code&gt;Observable&lt;/code&gt; itself. You can subscribe to a &lt;code&gt;Subject&lt;/code&gt; as you would any &lt;code&gt;Observable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; 観察可能な値のソースとの両方で &lt;code&gt;Observable&lt;/code&gt; 自体。 &lt;code&gt;Observable&lt;/code&gt; と同じように、 &lt;code&gt;Subject&lt;/code&gt; をサブスクライブできます。</target>
        </trans-unit>
        <trans-unit id="7f796e4fa4f68f7165ad948a94f7f1758ca29753" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;createComponent&lt;/code&gt; method creates a &lt;code&gt;page&lt;/code&gt; object and fills in the blanks once the &lt;code&gt;hero&lt;/code&gt; arrives.</source>
          <target state="translated">&lt;code&gt;createComponent&lt;/code&gt; の方法は、作成し &lt;code&gt;page&lt;/code&gt; オブジェクトを、一度の空白を埋め &lt;code&gt;hero&lt;/code&gt; 到着しました。</target>
        </trans-unit>
        <trans-unit id="78444a00c7b1487feeeec0402985a438a4edf3a4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;download()&lt;/code&gt; method in the &lt;code&gt;DownloaderComponent&lt;/code&gt; initiates the request by subscribing to the service method.</source>
          <target state="translated">&lt;code&gt;download()&lt;/code&gt; メソッド &lt;code&gt;DownloaderComponent&lt;/code&gt; は、サービスメソッドに加入することによって要求を開始します。</target>
        </trans-unit>
        <trans-unit id="705022181dc8804afad6074ba8ac3e641784ceb5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;name&lt;/code&gt; is mandatory. It identifies this particular group of assets between versions of the configuration.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 必須です。構成のバージョン間でこの特定の資産グループを識別します。</target>
        </trans-unit>
        <trans-unit id="10c6052679f6bf0bc936d7c28d99e11c4be6ccb3" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Crisis Center&lt;/em&gt; for maintaining the list of crises for assignment to heroes.</source>
          <target state="translated">ヒーローへの割り当てのための危機のリストを維持するための&lt;em&gt;危機センター&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3f14306f923e2f4bf4cadb6ead21423f41ee343d" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Heroes&lt;/em&gt; area for maintaining the list of heroes employed by the agency.</source>
          <target state="translated">エージェンシーが雇用しているヒーローのリストを維持するための&lt;em&gt;ヒーロー&lt;/em&gt;エリア。</target>
        </trans-unit>
        <trans-unit id="da081d80f84ace307cde80af3645ff2e9eef9fae" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;cold&lt;/em&gt; observable doesn't produce values until you subscribe to it. Most of your application observables are cold. All &lt;a href=&quot;http&quot;&gt;&lt;em&gt;HttpClient&lt;/em&gt;&lt;/a&gt; methods return cold observables.</source>
          <target state="translated">&lt;em&gt;冷たい&lt;/em&gt;あなたはそれに加入するまで観測可能では値を生成しません。アプリケーションのオブザーバブルのほとんどは寒いです。すべての&lt;a href=&quot;http&quot;&gt;&lt;em&gt;HttpClient&lt;/em&gt;&lt;/a&gt;メソッドは、コールドオブザーバブルを返します。</target>
        </trans-unit>
        <trans-unit id="d7a613682601691a64063c88494e50a72e12af55" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component-under-test&lt;/em&gt; doesn't have to be injected with real services. In fact, it is usually better if they are test doubles (stubs, fakes, spies, or mocks). The purpose of the spec is to test the component, not the service, and real services can be trouble.</source>
          <target state="translated">&lt;em&gt;コンポーネント被試験は、&lt;/em&gt;実際のサービスを注入する必要はありません。実際、通常はテストダブル（スタブ、偽物、スパイ、モック）の方が適しています。仕様の目的は、サービスではなくコンポーネントをテストすることであり、実際のサービスでは問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6780ccccda3402b96f6143330a19b3aeb1ffa0b6" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; controls a patch of screen called a &lt;em&gt;view&lt;/em&gt;. For example, individual components define and control each of the following views from the &lt;a href=&quot;tutorial&quot;&gt;Tutorial&lt;/a&gt;:</source>
          <target state="translated">&lt;em&gt;コンポーネント&lt;/em&gt;コントロールと呼ばれる画面のパッチ&lt;em&gt;図&lt;/em&gt;。たとえば、個々のコンポーネントは、&lt;a href=&quot;tutorial&quot;&gt;チュートリアルの&lt;/a&gt;次の各ビューを定義および制御します。</target>
        </trans-unit>
        <trans-unit id="4e8f8fa8491a780054dbb51957cbec42c3bfabe7" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; manages a region of HTML in the manner of a native HTML element. Technically it's a directive with a template.</source>
          <target state="translated">&lt;em&gt;コンポーネントは、&lt;/em&gt;ネイティブのHTML要素のようにHTMLの領域を管理します。技術的には、テンプレートを使用したディレクティブです。</target>
        </trans-unit>
        <trans-unit id="28cb0670dda43adba7b040a7a2903cac40bc4f8c" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;different&lt;/em&gt; battery of tests can explore whether the application navigates as expected in the presence of conditions that influence guards such as whether the user is authenticated and authorized.</source>
          <target state="translated">&lt;em&gt;異なる&lt;/em&gt;条件の存在下で予想されるように一連の試験は影響は、ユーザが認証され、許可されているかどうかのようにガードするアプリケーションナビゲートするかどうかを探索することができます。</target>
        </trans-unit>
        <trans-unit id="1ecf60bb6e7234367c513185ab06b67468546b87" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;header&lt;/em&gt; node child can be an &lt;em&gt;item&lt;/em&gt; node or another &lt;em&gt;header&lt;/em&gt; node. If your guide page belongs under a sub-header, find that sub-header in the JSON.</source>
          <target state="translated">&lt;em&gt;ヘッダ&lt;/em&gt;ノードの子であることができる&lt;em&gt;アイテムの&lt;/em&gt;ノードまたは別の&lt;em&gt;ヘッダー&lt;/em&gt;ノード。ガイドページがサブヘッダーの下にある場合は、JSONでそのサブヘッダーを見つけます。</target>
        </trans-unit>
        <trans-unit id="a6e78c0c7440d9a1475224eac8e461df1f4d1910" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;hot&lt;/em&gt; observable is already producing values &lt;em&gt;before&lt;/em&gt; you subscribe to it. The &lt;a href=&quot;../api/router/router#events&quot;&gt;&lt;em&gt;Router.events&lt;/em&gt;&lt;/a&gt; observable, which reports router activity, is a &lt;em&gt;hot&lt;/em&gt; observable.</source>
          <target state="translated">&lt;em&gt;ホット&lt;/em&gt;観察できるが、すでに値を生産している&lt;em&gt;前に、&lt;/em&gt;あなたはそれを購読してください。&lt;a href=&quot;../api/router/router#events&quot;&gt;&lt;em&gt;Router.events&lt;/em&gt;&lt;/a&gt;ルータの活動を報告し、観察は、ある&lt;em&gt;ホット&lt;/em&gt;観察できます。</target>
        </trans-unit>
        <trans-unit id="2522563b2cdfe71f09ecb80ce5010241ee842471" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;marble frame&lt;/em&gt; is a virtual unit of testing time. Each symbol (&lt;code&gt;-&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;) marks the passing of one frame.</source>
          <target state="translated">&lt;em&gt;大理石フレームは、&lt;/em&gt;試験時間の仮想単位です。各記号（ &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;|&lt;/code&gt; 、 &lt;code&gt;#&lt;/code&gt; ）は、1つのフレームの通過を示します。</target>
        </trans-unit>
        <trans-unit id="0287d9aa44943985aa24e920490c681de38a6f70" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;provider&lt;/em&gt; is an object that tells an injector how to obtain or create a dependency.</source>
          <target state="translated">&lt;em&gt;プロバイダは、&lt;/em&gt;依存関係を取得または作成する方法インジェクタを伝える目的です。</target>
        </trans-unit>
        <trans-unit id="dd4cdaab79b1c66984ce01f6287162f8aac9fe6e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;routed component&lt;/em&gt; is the destination of a &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; navigation. It can be trickier to test, especially when the route to the component &lt;em&gt;includes parameters&lt;/em&gt;. The &lt;code&gt;HeroDetailComponent&lt;/code&gt; is a &lt;em&gt;routed component&lt;/em&gt; that is the destination of such a route.</source>
          <target state="translated">&lt;em&gt;ルーティングコンポーネントは、&lt;/em&gt;先の &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; ナビゲーション。特にコンポーネントへのルートに&lt;em&gt;パラメータが含まれ&lt;/em&gt;ている場合は、テストが難しい場合&lt;em&gt;があります&lt;/em&gt;。 &lt;code&gt;HeroDetailComponent&lt;/code&gt; は、ある&lt;em&gt;ルーティングコンポーネント&lt;/em&gt;そのような経路の宛先です。</target>
        </trans-unit>
        <trans-unit id="65403259921593d9fe9e203a711cab5ad7a29b69" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;routing component&lt;/em&gt; is a component that tells the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; to navigate to another component. The &lt;code&gt;DashboardComponent&lt;/code&gt; is a &lt;em&gt;routing component&lt;/em&gt; because the user can navigate to the &lt;code&gt;HeroDetailComponent&lt;/code&gt; by clicking on one of the &lt;em&gt;hero buttons&lt;/em&gt; on the dashboard.</source>
          <target state="translated">&lt;em&gt;ルーティングコンポーネントは、&lt;/em&gt;指示成分である &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 別のコンポーネントにナビゲートします。 &lt;code&gt;DashboardComponent&lt;/code&gt; は、ある&lt;em&gt;ルーティングコンポーネント&lt;/em&gt;ユーザがナビゲートすることができるので &lt;code&gt;HeroDetailComponent&lt;/code&gt; のいずれかをクリックすることによって、&lt;em&gt;主人公ボタン&lt;/em&gt;ダッシュボード。</target>
        </trans-unit>
        <trans-unit id="f44fda8c801c30c6245fab7c9fb64928de21c181" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;template input variable&lt;/em&gt; is &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; the same as a &lt;a href=&quot;template-syntax#ref-vars&quot;&gt;template &lt;em&gt;reference&lt;/em&gt; variable&lt;/a&gt;, neither &lt;em&gt;semantically&lt;/em&gt; nor &lt;em&gt;syntactically&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;テンプレート入力変数が&lt;/em&gt;あり&lt;strong&gt;&lt;em&gt;ません&lt;/em&gt;&lt;/strong&gt;と同じ&lt;a href=&quot;template-syntax#ref-vars&quot;&gt;テンプレートの&lt;em&gt;参照&lt;/em&gt;変数&lt;/a&gt;も、&lt;em&gt;意味的に&lt;/em&gt;も&lt;em&gt;構文的&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="3390432957501640594fa03bf4b3db1812ce6212" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;template input variable&lt;/em&gt; is a variable whose value you can reference &lt;em&gt;within&lt;/em&gt; a single instance of the template. There are several such variables in this example: &lt;code&gt;hero&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt;. All are preceded by the keyword &lt;code&gt;let&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;テンプレート入力変数は、&lt;/em&gt;その値は、あなたが参照できる変数である&lt;em&gt;内&lt;/em&gt;テンプレートの単一のインスタンス。この例には、 &lt;code&gt;hero&lt;/code&gt; 、 &lt;code&gt;i&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; のような変数がいくつかあります。すべての前にキーワード &lt;code&gt;let&lt;/code&gt; が付いています。</target>
        </trans-unit>
        <trans-unit id="9ecfc556e297c7f984423ac98bb2b8133f9a4ac9" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;template reference variable&lt;/strong&gt; is often a reference to a DOM element within a template. It can also refer to a directive (which contains a component), an element, &lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;, or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;web component&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;テンプレートの参照変数は&lt;/strong&gt;、多くの場合、テンプレート内のDOM要素への参照です。ディレクティブ（コンポーネントを含む）、要素、&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;、または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;Webコンポーネントを&lt;/a&gt;参照することもできます。</target>
        </trans-unit>
        <trans-unit id="b5ee6341ca20af13f54afad2702ef692ea841fe9" translate="yes" xml:space="preserve">
          <source>A Boolean expression or function that compares the previous and current animation states, and returns true if this transition should occur. Note that &quot;true&quot; and &quot;false&quot; match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the animation trigger element. The animation steps run when the expression evaluates to true.</source>
          <target state="translated">前のアニメーションの状態と現在のアニメーションの状態を比較し、この遷移が発生した場合にtrueを返すブール演算式または関数。true&quot; と &quot;false&quot; はそれぞれ 1 と 0 に一致することに注意してください。式は、アニメーションのトリガー要素で状態変化が起こるたびに評価されます。式が true に評価されると、アニメーションのステップが実行されます。</target>
        </trans-unit>
        <trans-unit id="599809fd82612316228fe38bb0ea1720a7b9dd5a" translate="yes" xml:space="preserve">
          <source>A CSS file for the component styles.</source>
          <target state="translated">コンポーネントスタイル用のCSSファイル。</target>
        </trans-unit>
        <trans-unit id="c0ba6f4f7f04ded94da4b082f8c0437a09402aaf" translate="yes" xml:space="preserve">
          <source>A DI Token representing a unique string id assigned to the application by Angular and used primarily for prefixing application attributes and CSS styles when &lt;a href=&quot;core/viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt; is being used.</source>
          <target state="translated">Angularによってアプリケーションに割り当てられた一意の文字列IDを表すDIトークンで、主にアプリケーション属性とCSSスタイルの接頭辞として&lt;a href=&quot;core/viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;が使用されている場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="b7f7bf6e86152cf166fec0bfcc09711603e31bcb" translate="yes" xml:space="preserve">
          <source>A DI Token representing a unique string id assigned to the application by Angular and used primarily for prefixing application attributes and CSS styles when &lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt; is being used.</source>
          <target state="translated">Angularによってアプリケーションに割り当てられた一意の文字列IDを表すDIトークンで、主にアプリケーション属性とCSSスタイルの接頭辞として&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;が使用されている場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="7f16103dee940de0e134938036f3a37e0da8edf9" translate="yes" xml:space="preserve">
          <source>A DI Token representing the main rendering context. In a browser this is the DOM Document.</source>
          <target state="translated">メインのレンダリングコンテキストを表す DI トークン。ブラウザでは DOM Document となります。</target>
        </trans-unit>
        <trans-unit id="34a19c262ed7d9301354c9b8c7ce2cbc30aa8028" translate="yes" xml:space="preserve">
          <source>A DI token that you can use to create a virtual &lt;a href=&quot;../../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; that will populate the &lt;code&gt;entryComponents&lt;/code&gt; field of components and NgModules based on its &lt;code&gt;&lt;a href=&quot;valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; property value. All components that are referenced in the &lt;code&gt;&lt;a href=&quot;valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; value (either directly or in a nested array or map) are added to the &lt;code&gt;entryComponents&lt;/code&gt; property.</source>
          <target state="translated">DIは、仮想作成するために使用できるトークン&lt;a href=&quot;../../guide/glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;移入します &lt;code&gt;entryComponents&lt;/code&gt; のそのに基づいたコンポーネントとNgModulesのフィールド &lt;code&gt;&lt;a href=&quot;valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; のプロパティ値を。 &lt;code&gt;&lt;a href=&quot;valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 値で（直接またはネストされた配列またはマップで）参照されるすべてのコンポーネントは、 &lt;code&gt;entryComponents&lt;/code&gt; プロパティに追加されます。</target>
        </trans-unit>
        <trans-unit id="f4aaaddad79edba7b85207af000a6cde392c8d30" translate="yes" xml:space="preserve">
          <source>A DI token that you can use to create a virtual &lt;a href=&quot;../guide/glossary#provider&quot;&gt;provider&lt;/a&gt; that will populate the &lt;code&gt;entryComponents&lt;/code&gt; field of components and NgModules based on its &lt;code&gt;&lt;a href=&quot;core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; property value. All components that are referenced in the &lt;code&gt;&lt;a href=&quot;core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; value (either directly or in a nested array or map) are added to the &lt;code&gt;entryComponents&lt;/code&gt; property.</source>
          <target state="translated">DIは、仮想作成するために使用できるトークン&lt;a href=&quot;../guide/glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;移入します &lt;code&gt;entryComponents&lt;/code&gt; のそのに基づいたコンポーネントとNgModulesのフィールド &lt;code&gt;&lt;a href=&quot;core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; のプロパティ値を。 &lt;code&gt;&lt;a href=&quot;core/valuesansprovider#useValue&quot;&gt;useValue&lt;/a&gt;&lt;/code&gt; 値で（直接またはネストされた配列またはマップで）参照されるすべてのコンポーネントは、 &lt;code&gt;entryComponents&lt;/code&gt; プロパティに追加されます。</target>
        </trans-unit>
        <trans-unit id="6c6c6ad6dc434b59f3c338cdee09daa910f4fcb1" translate="yes" xml:space="preserve">
          <source>A Directive that adds the &lt;code&gt;required&lt;/code&gt; validator to checkbox controls marked with the &lt;code&gt;required&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 属性でマークされたチェックボックスコントロールに &lt;code&gt;required&lt;/code&gt; バリデーターを追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="b287f8f1214950d0e2f03c7ed6dc8f29f0a4fa20" translate="yes" xml:space="preserve">
          <source>A Directive that adds the &lt;code&gt;required&lt;/code&gt; validator to checkbox controls marked with the &lt;code&gt;required&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 属性でマークされたチェックボックスコントロールに &lt;code&gt;required&lt;/code&gt; バリデーターを追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="af60e9a597d2c5395c23f65dc9848a9ec136811f" translate="yes" xml:space="preserve">
          <source>A JSON schema associated with a schematic tells the Angular CLI what options are available to commands and subcommands, and determines the defaults. These defaults can be overridden by providing a different value for an option on the command line. See &lt;a href=&quot;workspace-config&quot;&gt;Workspace Configuration&lt;/a&gt; for information about how you can change the generation option defaults for your workspace.</source>
          <target state="translated">回路図に関連付けられたJSONスキーマは、コマンドとサブコマンドで使用可能なオプションをAngular CLIに通知し、デフォルトを決定します。これらのデフォルトは、コマンドラインのオプションに別の値を指定することで上書きできます。&lt;a href=&quot;workspace-config&quot;&gt;ワークスペース&lt;/a&gt;の生成オプションのデフォルトを変更する方法については、ワークスペースの設定を参照してください。</target>
        </trans-unit>
        <trans-unit id="576c3fc6feeabf272864a096aed610727c170f4b" translate="yes" xml:space="preserve">
          <source>A Node Express server is a pipeline of middleware that filters and processes requests one after the other. You configure the Node Express server pipeline with calls to &lt;code&gt;app.get()&lt;/code&gt; like this one for data requests.</source>
          <target state="translated">Node Expressサーバーは、リクエストを次々にフィルタリングして処理するミドルウェアのパイプラインです。Node Expressサーバーパイプラインは、データリクエスト用にこのように &lt;code&gt;app.get()&lt;/code&gt; を呼び出すように構成します。</target>
        </trans-unit>
        <trans-unit id="638b2d1ff2d39b9a31cf3cdf34086dca5e31b768" translate="yes" xml:space="preserve">
          <source>A ReflectiveDependency injection container used for instantiating objects and resolving dependencies.</source>
          <target state="translated">オブジェクトのインスタンス化や依存関係の解決に使用する ReflectiveDependency インジェクションコンテナです。</target>
        </trans-unit>
        <trans-unit id="59dd0c3f0e2ab9dff2d45116e5f275a7bd7fc27d" translate="yes" xml:space="preserve">
          <source>A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property like &lt;code&gt;innerHTML&lt;/code&gt; that could cause Cross Site Scripting (XSS) security bugs when improperly handled.</source>
          <target state="translated">SecurityContextは、危険なセキュリティ上の影響がある場所をマークします。たとえば、 &lt;code&gt;innerHTML&lt;/code&gt; などのDOMプロパティは、不適切に処理されたときにクロスサイトスクリプティング（XSS）セキュリティバグを引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="abf2fe6e840b3478ea12942a2f906e769e970379" translate="yes" xml:space="preserve">
          <source>A TypeScript class to shape the &lt;strong&gt;model data&lt;/strong&gt; for your component and display properties of that model.</source>
          <target state="translated">コンポーネントの&lt;strong&gt;モデルデータ&lt;/strong&gt;を形成し、そのモデルのプロパティを表示するTypeScriptクラス。</target>
        </trans-unit>
        <trans-unit id="2ce514d5a29cc020eab107370f83c5964cc081c9" translate="yes" xml:space="preserve">
          <source>A TypeScript configuration can inherit settings from another file using the &lt;code&gt;extends&lt;/code&gt; property. The configuration options from the base file are loaded first, then overridden by those in the inheriting &lt;code&gt;tsconfig&lt;/code&gt; file.</source>
          <target state="translated">TypeScript構成は、 &lt;code&gt;extends&lt;/code&gt; プロパティを使用して別のファイルから設定を継承できます。基本ファイルの構成オプションが最初にロードされ、次に継承する &lt;code&gt;tsconfig&lt;/code&gt; ファイルのオプションによって上書きされます。</target>
        </trans-unit>
        <trans-unit id="bf52b0587c806c818b0e66032278502b10c27741" translate="yes" xml:space="preserve">
          <source>A TypeScript file with a component class named &lt;code&gt;HeroDetailComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; という名前のコンポーネントクラスを含むTypeScriptファイル。</target>
        </trans-unit>
        <trans-unit id="75ee6a49dc9a24af9ee987b8b0f73148b94a0862" translate="yes" xml:space="preserve">
          <source>A TypeScript-like syntax that Angular evaluates within a &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt;.</source>
          <target state="translated">Angularが&lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディング&lt;/a&gt;内で評価するTypeScriptに似た構文。</target>
        </trans-unit>
        <trans-unit id="d9b532cb4e6dbf28e2ec99b1d5e242df8ee636f8" translate="yes" xml:space="preserve">
          <source>A URL like &lt;code&gt;~/detail/11&lt;/code&gt; would be a good URL for navigating to the &lt;em&gt;Hero Detail&lt;/em&gt; view of the hero whose &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;11&lt;/code&gt;.</source>
          <target state="translated">以下のようなURL &lt;code&gt;~/detail/11&lt;/code&gt; へナビゲートするための良好なURLになり&lt;em&gt;ヒーローの詳細&lt;/em&gt;英雄のビュー &lt;code&gt;id&lt;/code&gt; である &lt;code&gt;11&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5aa19c3e00b09eff21880f8aeb69b67bf3ae32ff" translate="yes" xml:space="preserve">
          <source>A URL string relative to the full URL string.</source>
          <target state="translated">完全なURL文字列からの相対的なURL文字列。</target>
        </trans-unit>
        <trans-unit id="93e7f0f463135d020d0e07a514b4e627a1b7f7fd" translate="yes" xml:space="preserve">
          <source>A URL that defines the ServiceWorker's registration scope; that is, what range of URLs it can control. It will be used when calling &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register&quot;&gt;ServiceWorkerContainer#register()&lt;/a&gt;.</source>
          <target state="translated">ServiceWorkerの登録スコープを定義するURL。つまり、制御できるURLの範囲です。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register&quot;&gt;ServiceWorkerContainer＃register（）を&lt;/a&gt;呼び出すときに使用されます。</target>
        </trans-unit>
        <trans-unit id="23e44cf2c0692f9e95579ce06f4b68b8cc6db506" translate="yes" xml:space="preserve">
          <source>A URL to which to redirect when a the path matches. Absolute if the URL begins with a slash (/), otherwise relative to the path URL. When not present, router does not redirect.</source>
          <target state="translated">パスが一致したときにリダイレクトする URL。URL がスラッシュ ()で始まる場合は絶対値、そうでない場合はパスの URL からの相対値。これがない場合、ルータはリダイレクトしません。</target>
        </trans-unit>
        <trans-unit id="46e53a936bddd1e6667ff7ab0bf8ab8e4d5e07b7" translate="yes" xml:space="preserve">
          <source>A Unicode locale identifier is composed of a Unicode language identifier and (optionally) the character &lt;code&gt;-&lt;/code&gt; followed by a locale extension. (For historical reasons the character &lt;code&gt;&lt;a href=&quot;i18n&quot;&gt;_&lt;/a&gt;&lt;/code&gt; is supported as an alternative to &lt;code&gt;-&lt;/code&gt;.) For example, in the locale id &lt;code&gt;fr-CA&lt;/code&gt; the &lt;code&gt;fr&lt;/code&gt; refers to the French language identifier, and the &lt;code&gt;CA&lt;/code&gt; refers to the locale extension Canada.</source>
          <target state="translated">A Unicodeは、識別子がUnicodeの言語識別子と（任意に）文字で構成されているロケール &lt;code&gt;-&lt;/code&gt; ロケール拡張が続きます。（歴史的な理由により、文字 &lt;code&gt;&lt;a href=&quot;i18n&quot;&gt;_&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;-&lt;/code&gt; の代わりとしてサポートされています。）たとえば、ロケールID &lt;code&gt;fr-CA&lt;/code&gt; では、 &lt;code&gt;fr&lt;/code&gt; はフランス語の識別子を指し、 &lt;code&gt;CA&lt;/code&gt; はロケール拡張カナダを指します。</target>
        </trans-unit>
        <trans-unit id="9619731a7e9d414367b09313d3267edcaa195536" translate="yes" xml:space="preserve">
          <source>A Universal web server responds to application page requests with static HTML rendered by the &lt;a href=&quot;universal#universal-engine&quot;&gt;Universal template engine&lt;/a&gt;. The server receives and responds to HTTP requests from clients (usually browsers), and serves static assets such as scripts, CSS, and images. It may respond to data requests, either directly or as a proxy to a separate data server.</source>
          <target state="translated">Universal Webサーバーは、&lt;a href=&quot;universal#universal-engine&quot;&gt;Universalテンプレートエンジン&lt;/a&gt;によってレンダリングされた静的HTMLでアプリケーションページ要求に応答します。サーバーはクライアント（通常はブラウザー）からのHTTPリクエストを受信して​​応答し、スクリプト、CSS、画像などの静的アセットを提供します。直接または別のデータサーバーへのプロキシとして、データ要求に応答できます。</target>
        </trans-unit>
        <trans-unit id="71378c7a7d2263bf11559901a0f4449137f58c6b" translate="yes" xml:space="preserve">
          <source>A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix parameters associated with the segment.</source>
          <target state="translated">UrlSegment は、2 つのスラッシュの間にある URL の一部です。これにはパスとセグメントに関連付けられた行列のパラメータが含まれます。</target>
        </trans-unit>
        <trans-unit id="9ed46c4fb7b79a723f886be252ac69b01f25f523" translate="yes" xml:space="preserve">
          <source>A base class for code shared between the &lt;code&gt;&lt;a href=&quot;forms/ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;forms/formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">コードの基本クラス間で共有 &lt;code&gt;&lt;a href=&quot;forms/ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;forms/formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="ca117d436dde1d68583371441cb3950ab4847f85" translate="yes" xml:space="preserve">
          <source>A base class for code shared between the &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">コードの基本クラス間で共有 &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="7182c0a975e83c1064ac742ba760051b64c40178" translate="yes" xml:space="preserve">
          <source>A base class for directives that contain multiple registered instances of &lt;code&gt;&lt;a href=&quot;forms/ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt;. Only used by the forms module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; の複数の登録済みインスタンスを含むディレクティブの基本クラス。フォームモジュールでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="1e18bb4f3363c7c460512b62f5743a20a68eb8d9" translate="yes" xml:space="preserve">
          <source>A base class for directives that contain multiple registered instances of &lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt;. Only used by the forms module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ngcontrol&quot;&gt;NgControl&lt;/a&gt;&lt;/code&gt; の複数の登録済みインスタンスを含むディレクティブの基本クラス。フォームモジュールでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="072ce3207529e3a0eed654da379d2b96537447aa" translate="yes" xml:space="preserve">
          <source>A base class that all control &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;-based directives extend. It binds a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; object to a DOM element.</source>
          <target state="translated">すべての &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ベースのディレクティブを拡張する基本クラス。 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; オブジェクトをDOM要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="d570abadc21d73601999397b7c63605397538b69" translate="yes" xml:space="preserve">
          <source>A base class that all control &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;-based directives extend. It binds a &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; object to a DOM element.</source>
          <target state="translated">すべての &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; ベースのディレクティブを拡張する基本クラス。 &lt;code&gt;&lt;a href=&quot;forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; オブジェクトをDOM要素にバインドします。</target>
        </trans-unit>
        <trans-unit id="467148334df27df20e018470d39d8ab381750677" translate="yes" xml:space="preserve">
          <source>A basic understanding of the following concepts:</source>
          <target state="translated">以下の概念を基本的に理解していること。</target>
        </trans-unit>
        <trans-unit id="a5ab0003f292345413eb8a2b94b3fc4996269aea" translate="yes" xml:space="preserve">
          <source>A basic understanding of the following:</source>
          <target state="translated">以下のことを基本的に理解していること。</target>
        </trans-unit>
        <trans-unit id="a565a4e2917d8bbeaa570825dfd8d8cdd077b189" translate="yes" xml:space="preserve">
          <source>A basic understanding of the information in &lt;a href=&quot;service-worker-intro&quot;&gt;Introduction to Angular service workers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;service-worker-intro&quot;&gt;Angular Service Workerの概要&lt;/a&gt;の情報に関する基本的な理解。</target>
        </trans-unit>
        <trans-unit id="a34826f1e38a9b1a10c639f0eb97e5092f011d36" translate="yes" xml:space="preserve">
          <source>A better solution is to create an artificial test component that demonstrates all ways to apply the directive.</source>
          <target state="translated">より良い解決策は、ディレクティブを適用するすべての方法を示す人工的なテストコンポーネントを作ることです。</target>
        </trans-unit>
        <trans-unit id="b3b95dc7d1bbb973732d884b6bf8498d3091aab3" translate="yes" xml:space="preserve">
          <source>A boolean-valued function over a value, possibly including context information regarding that value's position in an array.</source>
          <target state="translated">値に対するブール値関数で、配列内でのその値の位置に関するコンテキスト情報を含む場合もあります。</target>
        </trans-unit>
        <trans-unit id="0f651a3110666c190aff69e1ee84ccbffa0efcba" translate="yes" xml:space="preserve">
          <source>A bootstrap component is automatically added to &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">ブートストラップコンポーネントが &lt;code&gt;entryComponents&lt;/code&gt; に自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="f0400004f9940352eb2ae482000bca5e618a3b6f" translate="yes" xml:space="preserve">
          <source>A bootstrapped component &lt;em&gt;is&lt;/em&gt; an &lt;a href=&quot;ngmodule-faq#q-entry-component-defined&quot;&gt;entry component&lt;/a&gt; that Angular loads into the DOM during the bootstrap process (application launch). Other entry components are loaded dynamically by other means, such as with the router.</source>
          <target state="translated">ブートストラップコンポーネント&lt;em&gt;は&lt;/em&gt;、ブートストラッププロセス（アプリケーションの起動）中にAngularがDOMにロードする&lt;a href=&quot;ngmodule-faq#q-entry-component-defined&quot;&gt;エントリコンポーネント&lt;/a&gt;です。他のエントリコンポーネントは、ルーターなどの他の方法で動的に読み込まれます。</target>
        </trans-unit>
        <trans-unit id="9023b1da9696cafc362036418ba09a6af6a2deb3" translate="yes" xml:space="preserve">
          <source>A bootstrapped component is an entry component that Angular loads into the DOM during the bootstrap process (application launch). Other entry components are loaded dynamically by other means, such as with the router.</source>
          <target state="translated">ブートストラップされたコンポーネントとは、ブートストラップ処理(アプリケーションの起動)の際にAngularがDOMにロードするエントリーコンポーネントのことです。他のエントリコンポーネントはルータなどの他の方法で動的にロードされます。</target>
        </trans-unit>
        <trans-unit id="a8adc65ce5e0b88cc440c6a6e5fc1619a8cd504b" translate="yes" xml:space="preserve">
          <source>A bootstrapped component is necessarily an entry component because bootstrapping is an imperative process, thus it needs to have an entry component.</source>
          <target state="translated">ブートストラップは必須のプロセスなので、ブートストラップされたコンポーネントは必然的にエントリーコンポーネントになります。</target>
        </trans-unit>
        <trans-unit id="2e1e0db9f76bce947aff0501f035cbc1621e10d2" translate="yes" xml:space="preserve">
          <source>A bootstrapped entry component</source>
          <target state="translated">ブートストラップされたエントリコンポーネント</target>
        </trans-unit>
        <trans-unit id="96324ec4fdb9bd57e96f70085ba8ca376c27e961" translate="yes" xml:space="preserve">
          <source>A breakpoint on the pipe's request for data shows the following:</source>
          <target state="translated">パイプのデータ要求のブレークポイントでは、以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="ed822ed7d2157779effe7d59d8a3822bc4ca3033" translate="yes" xml:space="preserve">
          <source>A buildable or runnable subset of a &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt;, configured as an object in the &lt;a href=&quot;workspace-config#project-tool-configuration-options&quot;&gt;workspace configuration file&lt;/a&gt;, and executed by an &lt;a href=&quot;glossary#architect&quot;&gt;Architect&lt;/a&gt;&lt;a href=&quot;glossary#builder&quot;&gt;builder&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;workspace-config#project-tool-configuration-options&quot;&gt;ワークスペース構成ファイル&lt;/a&gt;でオブジェクトとして構成され、&lt;a href=&quot;glossary#architect&quot;&gt;Architect &lt;/a&gt;&lt;a href=&quot;glossary#builder&quot;&gt;ビルダー&lt;/a&gt;によって実行される、&lt;a href=&quot;glossary#project&quot;&gt;プロジェクトの&lt;/a&gt;ビルド可能または実行可能なサブセット。</target>
        </trans-unit>
        <trans-unit id="e4eee78994792230b0c3d32e29860f69abdfad63" translate="yes" xml:space="preserve">
          <source>A builder must have a defined target that associates it with a specific input configuration and &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt;.</source>
          <target state="translated">ビルダーには、特定の入力構成および&lt;a href=&quot;glossary#project&quot;&gt;プロジェクトに&lt;/a&gt;関連付けるターゲットが定義されている必要があります。</target>
        </trans-unit>
        <trans-unit id="252f868c89435de5215834180cc5d8c0801b4fc7" translate="yes" xml:space="preserve">
          <source>A builder resides in a &quot;project&quot; folder that is similar in structure to an Angular workspace, with global configuration files at the top level, and more specific configuration in a source folder with the code files that define the behavior. For example, your &lt;code&gt;myBuilder&lt;/code&gt; folder could contain the following files.</source>
          <target state="translated">ビルダーは、Angularワークスペースと構造が似ている「プロジェクト」フォルダーにあり、トップレベルにグローバル構成ファイルがあり、動作を定義するコードファイルがあるソースフォルダーに特定の構成があります。たとえば、 &lt;code&gt;myBuilder&lt;/code&gt; フォルダーには次のファイルを含めることができます。</target>
        </trans-unit>
        <trans-unit id="bb3f356af777f070b18dd60f447c94b1885caa8e" translate="yes" xml:space="preserve">
          <source>A callback invoked when rendering has begun.</source>
          <target state="translated">レンダリングが開始されたときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="621621c14914731ff9cc461e46f4734dab9a9e3a" translate="yes" xml:space="preserve">
          <source>A callback invoked when rendering has completed.</source>
          <target state="translated">レンダリングが完了したときに呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="e30186c1d00b026b4228eadb9cb84965baed02c2" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after Angular has completed initialization of a component's view. It is invoked only once when the view is instantiated.</source>
          <target state="translated">Angularがコンポーネントのビューの初期化を完了した直後に呼び出されるコールバックメソッドです。ビューがインスタンス化されたときに一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7fe4cd97d1eea7a11fac142b1908b02db4f41095" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after Angular has completed initialization of all of the directive's content. It is invoked only once when the directive is instantiated.</source>
          <target state="translated">Angularがディレクティブのすべてのコンテンツの初期化を完了した直後に呼び出されるコールバックメソッドです。ディレクティブがインスタンス化されたときに一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1b7068e5aab5e739c2621bf44fb181a91e1b6ad2" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after the default change detector has checked data-bound properties if at least one has changed, and before the view and content children are checked.</source>
          <target state="translated">デフォルトの変更検出器が、少なくとも1つの変更があった場合にデータバインドプロパティをチェックした直後に、ビューとコンテンツの子要素をチェックする前に呼び出されるコールバックメソッド。</target>
        </trans-unit>
        <trans-unit id="ef37907408bda8f267bff550c619746d82491838" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after the default change detector has checked the directive's data-bound properties for the first time, and before any of the view or content children have been checked. It is invoked only once when the directive is instantiated.</source>
          <target state="translated">デフォルトの変更検出器が初めてディレクティブのデータバインドプロパティをチェックした直後に、 ビューやコンテンツの子プロセスがチェックされる前に呼び出されるコールバックメソッドです。これは、ディレクティブがインスタンス化されたときに一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="17be15e9e9f2799fb0b7f9e7adb5b4d25c276f51" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after the default change detector has completed checking all of the directive's content.</source>
          <target state="translated">デフォルトの変更検出器がディレクティブのすべての内容のチェックを完了した直後に呼び出されるコールバックメソッド。</target>
        </trans-unit>
        <trans-unit id="b3d49829f059326e4cc0c5d42cce6ef8ba22c75d" translate="yes" xml:space="preserve">
          <source>A callback method that is invoked immediately after the default change detector has completed one change-check cycle for a component's view.</source>
          <target state="translated">デフォルトの変更検出器がコンポーネントのビューの1回の変更チェックサイクルを完了した直後に呼び出されるコールバックメソッドです。</target>
        </trans-unit>
        <trans-unit id="c9272d31a5c8ffd0e82b22a4c70a377c3c3a39ea" translate="yes" xml:space="preserve">
          <source>A callback method that performs change-detection, invoked after the default change-detector runs. See &lt;code&gt;&lt;a href=&quot;keyvaluediffers&quot;&gt;KeyValueDiffers&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;iterablediffers&quot;&gt;IterableDiffers&lt;/a&gt;&lt;/code&gt; for implementing custom change checking for collections.</source>
          <target state="translated">デフォルトの変更検出器の実行後に呼び出される、変更検出を実行するコールバックメソッド。コレクションのカスタム変更チェックの実装については、 &lt;code&gt;&lt;a href=&quot;keyvaluediffers&quot;&gt;KeyValueDiffers&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;iterablediffers&quot;&gt;IterableDiffers&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d104cace8ea584693965d95cc9257a3a34349247" translate="yes" xml:space="preserve">
          <source>A callback method that performs custom clean-up, invoked immediately after a directive, pipe, or service instance is destroyed.</source>
          <target state="translated">ディレクティブやパイプ、サービスのインスタンスが破棄された直後に呼び出される、 カスタムのクリーンアップを行うコールバックメソッド。</target>
        </trans-unit>
        <trans-unit id="56a268cd66316ce2f0d1944547dc2ba1885278a7" translate="yes" xml:space="preserve">
          <source>A category of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt; that can listen to and modify the behavior of other HTML elements, attributes, properties, and components. They are usually represented as HTML attributes, hence the name.</source>
          <target state="translated">他のHTML要素、属性、プロパティ、コンポーネントの動作をリッスンおよび変更できる&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;のカテゴリ。これらは通常、HTML属性として表されるため、名前になります。</target>
        </trans-unit>
        <trans-unit id="8f2bd0d4f0242fd6d93c7106c480965ba0a756a0" translate="yes" xml:space="preserve">
          <source>A category of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt; that is responsible for shaping HTML layout by modifying the DOM&amp;amp;mdashthat is, adding, removing, or manipulating elements and their children.</source>
          <target state="translated">DOMを変更してHTMLレイアウトを形成する、つまり要素とその子を追加、削除、または操作する&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;のカテゴリ。</target>
        </trans-unit>
        <trans-unit id="343aa9337e55f69912d6d719d5e5805b50eca679" translate="yes" xml:space="preserve">
          <source>A check that runs when form values change and reports whether the given values are correct and complete, according to the defined constraints. Reactive forms apply &lt;a href=&quot;form-validation#adding-to-reactive-forms&quot;&gt;validator functions&lt;/a&gt;. Template-driven forms use &lt;a href=&quot;form-validation#adding-to-template-driven-forms&quot;&gt;validator directives&lt;/a&gt;.</source>
          <target state="translated">フォームの値が変更されたときに実行されるチェックで、定義された制約に従って、指定された値が正しく完全であるかどうかを報告します。リアクティブフォームは&lt;a href=&quot;form-validation#adding-to-reactive-forms&quot;&gt;バリデータ関数&lt;/a&gt;を適用します。テンプレート駆動型フォームは&lt;a href=&quot;form-validation#adding-to-template-driven-forms&quot;&gt;バリデータディレクティブ&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="2d1c2e7542eff3bf00dff1a1de49e08d938a227b" translate="yes" xml:space="preserve">
          <source>A checkbox on the &lt;code&gt;PackageSearchComponent&lt;/code&gt; toggles a &lt;code&gt;withRefresh&lt;/code&gt; flag, which is one of the arguments to &lt;code&gt;PackageSearchService.search()&lt;/code&gt;. That &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method creates the custom &lt;code&gt;x-refresh&lt;/code&gt; header and adds it to the request before calling &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PackageSearchComponent&lt;/code&gt; のチェックボックスは、 &lt;code&gt;withRefresh&lt;/code&gt; フラグを切り替えます。これは、 &lt;code&gt;PackageSearchService.search()&lt;/code&gt; の引数の1つです。その &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; メソッドは、カスタム &lt;code&gt;x-refresh&lt;/code&gt; ヘッダーを作成し、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#get&quot;&gt;HttpClient.get()&lt;/a&gt;&lt;/code&gt; を呼び出す前にリクエストに追加します。</target>
        </trans-unit>
        <trans-unit id="1ea2dba458600bddeca5f6a66246af12aba09d49" translate="yes" xml:space="preserve">
          <source>A chrome browser also opens and displays the test output in the &quot;Jasmine HTML Reporter&quot; like this.</source>
          <target state="translated">クロームブラウザもこのように「Jasmine HTML Reporter」を開いてテスト出力を表示しています。</target>
        </trans-unit>
        <trans-unit id="9be78a60e1ff57a5896ceaf2ec2f63d056169af5" translate="yes" xml:space="preserve">
          <source>A class definition preceded by the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;, which declares and serves as a manifest for a block of code dedicated to an application domain, a workflow, or a closely related set of capabilities.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;デコレータ&lt;/a&gt;が前に付くクラス定義。これは、アプリケーションドメイン、ワークフロー、または密接に関連する一連の機能専用のコードブロックの宣言およびマニフェストとして機能します。</target>
        </trans-unit>
        <trans-unit id="a192bac5ac356be2f3c56d06d6b531d551809cd4" translate="yes" xml:space="preserve">
          <source>A class interface should define &lt;em&gt;only&lt;/em&gt; the members that its consumers are allowed to call. Such a narrowing interface helps decouple the concrete class from its consumers.</source>
          <target state="translated">クラスインターフェイスは、そのコンシューマが呼び出すことを許可されているメンバー&lt;em&gt;のみ&lt;/em&gt;を定義する必要があります。このような狭まるインターフェースは、具象クラスをその消費者から切り離すのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c5a1d26cf05b83059365f38e429b8b641ab34688" translate="yes" xml:space="preserve">
          <source>A class that can modify the structure of the DOM or modify attributes in the DOM and component data model. A directive class definition is immediately preceded by a &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; that supplies metadata.</source>
          <target state="translated">DOMの構造を変更したり、DOMおよびコンポーネントデータモデルの属性を変更したりできるクラス。ディレクティブクラスの定義の直前には、メタデータを提供する &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;デコレータ&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="5c93e2c1668e7ec5b3f463c413d9da40e845709b" translate="yes" xml:space="preserve">
          <source>A class that reflects the state of running &lt;a href=&quot;app_initializer&quot;&gt;&lt;code&gt;APP_INITIALIZER&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">実行中の&lt;a href=&quot;app_initializer&quot;&gt; &lt;code&gt;APP_INITIALIZER&lt;/code&gt; &lt;/a&gt;の状態を反映するクラス。</target>
        </trans-unit>
        <trans-unit id="b03253d94c1c737d17ecfa0fa8c0a0fc7e00e3f9" translate="yes" xml:space="preserve">
          <source>A class that reflects the state of running &lt;a href=&quot;core/app_initializer&quot;&gt;&lt;code&gt;APP_INITIALIZER&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">実行中の&lt;a href=&quot;core/app_initializer&quot;&gt; &lt;code&gt;APP_INITIALIZER&lt;/code&gt; &lt;/a&gt;の状態を反映するクラス。</target>
        </trans-unit>
        <trans-unit id="3dce19c2b15b60014a24e007692a61c4cec1cbb0" translate="yes" xml:space="preserve">
          <source>A class that's already declared in another NgModule</source>
          <target state="translated">別の NgModule で既に宣言されているクラス</target>
        </trans-unit>
        <trans-unit id="15e8cb7a8d71df2ff5451890d3605b823ff71848" translate="yes" xml:space="preserve">
          <source>A class that's already declared in another module, whether an app module, @NgModule, or third-party module.</source>
          <target state="translated">アプリモジュール、@NgModule、サードパーティモジュールなど、別のモジュールですでに宣言されているクラス。</target>
        </trans-unit>
        <trans-unit id="52cb7c70c205caf15acdbf3dad279a4fc5ab3692" translate="yes" xml:space="preserve">
          <source>A class type that you can add to the &lt;code&gt;declarations&lt;/code&gt; list of an &lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModule&lt;/a&gt;. You can declare &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt;, &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, and &lt;a href=&quot;glossary#pipe&quot;&gt;pipes&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#ngmodule&quot;&gt;NgModuleの&lt;/a&gt; &lt;code&gt;declarations&lt;/code&gt; リストに追加できるクラスタイプ。&lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;、&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;、&lt;a href=&quot;glossary#pipe&quot;&gt;パイプを&lt;/a&gt;宣言できます。</target>
        </trans-unit>
        <trans-unit id="f05301aad6629d6cf06da9c65f1a123c52b3e017" translate="yes" xml:space="preserve">
          <source>A class which is preceded by the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;{}&lt;/code&gt; decorator and which defines a function that transforms input values to output values for display in a &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt;. Angular defines various pipes, and you can define new pipes.</source>
          <target state="translated">先行するクラス &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;{}&lt;/code&gt; デコレータとの表示のための出力値と入力値を変換関数定義&lt;a href=&quot;glossary#view&quot;&gt;ビューを&lt;/a&gt;。Angularはさまざまなパイプを定義し、新しいパイプを定義できます。</target>
        </trans-unit>
        <trans-unit id="87e85a96b41d60c13372c16732fa1704cdf3acdf" translate="yes" xml:space="preserve">
          <source>A class with the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt; that associates it with a companion &lt;a href=&quot;glossary#template&quot;&gt;template&lt;/a&gt;. Together, the component and template define a &lt;a href=&quot;glossary#view&quot;&gt;view&lt;/a&gt;. A component is a special type of &lt;a href=&quot;glossary#directive&quot;&gt;directive&lt;/a&gt;. The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator extends the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator with template-oriented features.</source>
          <target state="translated">クラス &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;デコレータ&lt;/a&gt;コンパニオンに関連付ける&lt;a href=&quot;glossary#template&quot;&gt;テンプレート&lt;/a&gt;。コンポーネントとテンプレートを組み合わせて、&lt;a href=&quot;glossary#view&quot;&gt;ビューを&lt;/a&gt;定義します。コンポーネントは特別なタイプの&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;です。 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレータは拡張 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; テンプレート指向の機能とのデコレータを。</target>
        </trans-unit>
        <trans-unit id="937214eb5969e76a0181ee0c519da4e56333f19c" translate="yes" xml:space="preserve">
          <source>A codec for encoding and decoding URL parts.</source>
          <target state="translated">URL部分をエンコード、デコードするためのコーデック。</target>
        </trans-unit>
        <trans-unit id="7d302abe77a94aa1032491a8e0f377e95a4f168a" translate="yes" xml:space="preserve">
          <source>A codec for encoding and decoding parameters in URLs.</source>
          <target state="translated">URL のパラメータをエンコード、デコードするためのコーデック。</target>
        </trans-unit>
        <trans-unit id="ecea492f54194b72e7632959fcd3e275ec6d043f" translate="yes" xml:space="preserve">
          <source>A collection of Angular &lt;a href=&quot;glossary#project&quot;&gt;projects&lt;/a&gt; (that is, applications and libraries) powered by the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt; that are typically co-located in a single source-control repository (such as &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;を利用したAngular &lt;a href=&quot;glossary#project&quot;&gt;プロジェクト&lt;/a&gt;（つまり、アプリケーションとライブラリ）のコレクションで、通常は単一のソース管理リポジトリ（&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;など）に同じ場所に配置されます。</target>
        </trans-unit>
        <trans-unit id="e79ba2e8ac6b5b04c6c03c7ee3e2785eb9b7e5a0" translate="yes" xml:space="preserve">
          <source>A collection of child controls. The key for each child is the name under which it is registered.</source>
          <target state="translated">子コントロールのコレクション。各子のキーは、登録されている名前です。</target>
        </trans-unit>
        <trans-unit id="e3c018291c1c8e9ad7721160cc26f0757854e025" translate="yes" xml:space="preserve">
          <source>A collection of matrix and query URL parameters.</source>
          <target state="translated">マトリックスとクエリURLパラメータのコレクション。</target>
        </trans-unit>
        <trans-unit id="02b47ee82f7b322d5994b10809aa0af420e20886" translate="yes" xml:space="preserve">
          <source>A collection of schematics to use in generating the initial app.</source>
          <target state="translated">初期アプリを生成する際に使用する回路図集。</target>
        </trans-unit>
        <trans-unit id="49de467612a944b52b3ee2139bdfbfdf3eb1f6bd" translate="yes" xml:space="preserve">
          <source>A common UI pattern is to show a spinner while the async validation is being performed. The following example presents how to achieve this with template-driven forms:</source>
          <target state="translated">一般的な UI パターンは、非同期検証が実行されている間にスピナーを表示することです。次の例は、テンプレート駆動型のフォームでこれを実現する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="99b05c916350f6878980197b92e815e9e04cfceb" translate="yes" xml:space="preserve">
          <source>A component and its template together define a &lt;em&gt;view&lt;/em&gt;. A component can contain a &lt;em&gt;view hierarchy&lt;/em&gt;, which allows you to define arbitrarily complex areas of the screen that can be created, modified, and destroyed as a unit. A view hierarchy can mix views defined in components that belong to different NgModules. This is often the case, especially for UI libraries.</source>
          <target state="translated">コンポーネントとそのテンプレートによって、&lt;em&gt;ビューが&lt;/em&gt;定義され&lt;em&gt;ます&lt;/em&gt;。コンポーネントには&lt;em&gt;ビュー階層&lt;/em&gt;を含めることができます。これにより、1つの単位として作成、変更、破棄できる画面の任意の複雑な領域を定義できます。ビュー階層は、異なるNgModuleに属するコンポーネントで定義されたビューを混在させることができます。これは、特にUIライブラリの場合によく発生します。</target>
        </trans-unit>
        <trans-unit id="8beed4fbb0126f7f0007052e50e1d5d70b721129" translate="yes" xml:space="preserve">
          <source>A component can also be bootstrapped imperatively in the module's &lt;code&gt;ngDoBootstrap()&lt;/code&gt; method. The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; property tells the compiler that this is an entry component and it should generate code to bootstrap the application with this component.</source>
          <target state="translated">コンポーネントは、モジュールの &lt;code&gt;ngDoBootstrap()&lt;/code&gt; メソッドで強制的にブートストラップすることもできます。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; プロパティには、これはエントリコンポーネントであり、それは、このコンポーネントを使用してアプリケーションをブートストラップするためのコードを生成する必要があることをコンパイラに指示します。</target>
        </trans-unit>
        <trans-unit id="349d889988965929270cf02c44fe4300103b85b1" translate="yes" xml:space="preserve">
          <source>A component can delegate certain tasks to services, such as fetching data from the server, validating user input, or logging directly to the console. By defining such processing tasks in an &lt;em&gt;injectable service class&lt;/em&gt;, you make those tasks available to any component. You can also make your app more adaptable by injecting different providers of the same kind of service, as appropriate in different circumstances.</source>
          <target state="translated">コンポーネントは、サーバーからのデータのフェッチ、ユーザー入力の検証、コンソールへの直接ロギングなどの特定のタスクをサービスに委任できます。このような処理タスクを&lt;em&gt;注入可能なサービスクラス&lt;/em&gt;で定義することにより、それらのタスクを任意のコンポーネントで使用できるようにします。また、状況に応じて、同じ種類のサービスの異なるプロバイダーを注入することで、アプリをより適応性の高いものにすることもできます。</target>
        </trans-unit>
        <trans-unit id="b089964fae5995b808c695e4e6ccb3aa1ad7e195" translate="yes" xml:space="preserve">
          <source>A component class can provide services in two ways:</source>
          <target state="translated">コンポーネント・クラスは2つの方法でサービスを提供することができます。</target>
        </trans-unit>
        <trans-unit id="4e0698d00f7c06c14c5adbf78185465c6c2d62a2" translate="yes" xml:space="preserve">
          <source>A component consists of three things:</source>
          <target state="translated">コンポーネントは3つのもので構成されています。</target>
        </trans-unit>
        <trans-unit id="d3deadf277697045847584c362a7d410307968ce" translate="yes" xml:space="preserve">
          <source>A component could be exported for inclusion in an external component's template as well as dynamically loaded in a pop-up dialog.</source>
          <target state="translated">コンポーネントは、外部コンポーネントのテンプレートに含めるためにエクスポートしたり、ポップアップダイアログに動的にロードしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="4376fb2839e7c64ec0202336bf07980d7bed69f9" translate="yes" xml:space="preserve">
          <source>A component could be imported from another app module (so you can't declare it) and re-exported by this module.</source>
          <target state="translated">コンポーネントを別のアプリモジュールからインポートして(宣言できないように)、このモジュールで再エクスポートすることができます。</target>
        </trans-unit>
        <trans-unit id="3f0018d9ac3de8a0f037aa98debd4be0b91710f9" translate="yes" xml:space="preserve">
          <source>A component factory creates a pure, 100% JavaScript representation of the component that incorporates everything described in its &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata: the HTML, the binding instructions, the attached styles.</source>
          <target state="translated">コンポーネントファクトリは、コンポーネントの純粋な100％JavaScript表現を作成します。これには、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; メタデータに記述されているすべて（HTML、バインディング指示、添付されたスタイル）が組み込まれています。</target>
        </trans-unit>
        <trans-unit id="cb8b1bfad611823c2a3c34eda791bc349a459653" translate="yes" xml:space="preserve">
          <source>A component has a lifecycle managed by Angular.</source>
          <target state="translated">コンポーネントにはAngularで管理されたライフサイクルがあります。</target>
        </trans-unit>
        <trans-unit id="dc5e2a63b05a82806539717c333ee5cad057e231" translate="yes" xml:space="preserve">
          <source>A component is a special type of directive, which means that just as &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; has a &lt;code&gt;providers&lt;/code&gt; property, &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; does too. This means that directives as well as components can configure providers, using the &lt;code&gt;providers&lt;/code&gt; property. When you configure a provider for a component or directive using the &lt;code&gt;providers&lt;/code&gt; property, that provider belongs to the &lt;code&gt;ElementInjector&lt;/code&gt; of that component or directive. Components and directives on the same element share an injector.</source>
          <target state="translated">コンポーネントは特別なタイプのディレクティブです。つまり、 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; に &lt;code&gt;providers&lt;/code&gt; プロパティがあるのと同じように、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; も同じです。つまり、ディレクティブとコンポーネントは、 &lt;code&gt;providers&lt;/code&gt; プロパティを使用してプロバイダーを構成できます。 &lt;code&gt;providers&lt;/code&gt; プロパティを使用してコンポーネントまたはディレクティブのプロバイダーを構成すると、そのプロバイダーはそのコンポーネントまたはディレクティブの &lt;code&gt;ElementInjector&lt;/code&gt; に属します。同じ要素のコンポーネントとディレクティブはインジェクターを共有します。</target>
        </trans-unit>
        <trans-unit id="eb35cf391db16a6090f219d3a04cb176787fe7d9" translate="yes" xml:space="preserve">
          <source>A component is technically a directive. However, components are so distinctive and central to Angular applications that Angular defines the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator, which extends the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator with template-oriented features.</source>
          <target state="translated">コンポーネントは技術的にはディレクティブです。ただし、コンポーネントは非常に独特でAngularアプリケーションの中心であり、Angularは &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; デコレーターを定義します。これにより、テンプレート指向の機能で &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; デコレーターが拡張されます。</target>
        </trans-unit>
        <trans-unit id="add1d0740c9dbeaff24d9a4e670b5061d080dadb" translate="yes" xml:space="preserve">
          <source>A component loaded &lt;em&gt;declaratively&lt;/em&gt; via its selector is &lt;em&gt;not&lt;/em&gt; an entry component.</source>
          <target state="translated">セレクタを介して&lt;em&gt;宣言的に&lt;/em&gt;ロードされたコンポーネント&lt;em&gt;は&lt;/em&gt;、エントリコンポーネントではあり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="39781f405ce3d449d20cd226f0eed9481dbe5f83" translate="yes" xml:space="preserve">
          <source>A component must belong to an NgModule in order for it to be available to another component or application. To make it a member of an NgModule, list it in the &lt;code&gt;declarations&lt;/code&gt; field of the &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="translated">コンポーネントは、別のコンポーネントまたはアプリケーションで使用できるように、NgModuleに属している必要があります。NgModuleのメンバーにするには、 &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータの &lt;code&gt;declarations&lt;/code&gt; フィールドにリストします。</target>
        </trans-unit>
        <trans-unit id="8e42b0c392b91ddd75a931ad25526b427360d793" translate="yes" xml:space="preserve">
          <source>A component template can &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;reference&lt;/a&gt; another component, directive, or pipe when the reference is declared in this module or if the imported module has exported it. For example, a component can use the &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;NgFor&lt;/code&gt; directives only if the module has imported the Angular &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; (perhaps indirectly by importing &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">コンポーネントテンプレートは、参照がこのモジュールで宣言されている場合、またはインポートされたモジュールがエクスポートした場合、別のコンポーネント、ディレクティブ、またはパイプを&lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;参照&lt;/a&gt;できます。たとえば、モジュールがAngular &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; を（おそらく &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; をインポートすることによって間接的に）インポートした場合にのみ、コンポーネントは &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;NgFor&lt;/code&gt; ディレクティブを使用できます。</target>
        </trans-unit>
        <trans-unit id="64cd250b9979025915cabb6d33b78c1f69b9d52e" translate="yes" xml:space="preserve">
          <source>A component that could serve as a parent &lt;em&gt;should&lt;/em&gt; implement the class interface as the &lt;code&gt;AliceComponent&lt;/code&gt; does.</source>
          <target state="translated">親として機能できるコンポーネントは、 &lt;code&gt;AliceComponent&lt;/code&gt; と同じようにクラスインターフェイスを実装する&lt;em&gt;必要&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="499d23697c7f20e6ec22c3119de0c4a05d9a58e5" translate="yes" xml:space="preserve">
          <source>A component with inputs and outputs typically appears inside the view template of a host component. The host uses a property binding to set the input property and an event binding to listen to events raised by the output property.</source>
          <target state="translated">入力と出力を持つコンポーネントは、通常、ホストコンポーネントのビューテンプレート内に表示されます。ホストは、入力プロパティを設定するためにプロパティバインディングを使用し、出力プロパティによって発生するイベントをリッスンするためにイベントバインディングを使用します。</target>
        </trans-unit>
        <trans-unit id="d3e1336ad22fdd6630c5534d49b4b6f33d95e613" translate="yes" xml:space="preserve">
          <source>A component you specify in a route definition.</source>
          <target state="translated">ルート定義で指定するコンポーネント。</target>
        </trans-unit>
        <trans-unit id="1921733ec87213ae324063a594427212b01dfd9e" translate="yes" xml:space="preserve">
          <source>A component, such as &lt;code&gt;ConfigComponent&lt;/code&gt;, injects the &lt;code&gt;ConfigService&lt;/code&gt; and calls the &lt;code&gt;getConfig&lt;/code&gt; service method.</source>
          <target state="translated">&lt;code&gt;ConfigComponent&lt;/code&gt; などのコンポーネントは、 &lt;code&gt;ConfigService&lt;/code&gt; を &lt;code&gt;getConfig&lt;/code&gt; 、getConfigサービスメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="ddc9abdd56dcae660b1b5fdd43e549b91308f6a9" translate="yes" xml:space="preserve">
          <source>A component, unlike all other parts of an Angular application, combines an HTML template and a TypeScript class. The component truly is the template and the class &lt;em&gt;working together&lt;/em&gt;. To adequately test a component, you should test that they work together as intended.</source>
          <target state="translated">Angularアプリケーションの他のすべての部分とは異なり、コンポーネントはHTMLテンプレートとTypeScriptクラスを組み合わせたものです。コンポーネントは本当にテンプレートと&lt;em&gt;一緒に機能&lt;/em&gt;するクラスです。コンポーネントを適切にテストするには、意図したとおりに機能することをテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="98e7a6058cbd18c8d57a0d87274cdac45aaecd6d" translate="yes" xml:space="preserve">
          <source>A configuration object that defines a single route. A set of routes are collected in a &lt;code&gt;&lt;a href=&quot;router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array to define a &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; configuration. The router attempts to match segments of a given URL against each route, using the configuration options defined in this object.</source>
          <target state="translated">単一のルートを定義する構成オブジェクト。 &lt;code&gt;&lt;a href=&quot;router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 構成を定義するために、一連のルートが &lt;code&gt;&lt;a href=&quot;router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 配列に収集されます。ルーターは、このオブジェクトで定義された構成オプションを使用して、特定のURLのセグメントを各ルートと照合しようとします。</target>
        </trans-unit>
        <trans-unit id="e647343b7b8f98c675920da38a07c8f9f188b5ed" translate="yes" xml:space="preserve">
          <source>A configuration object that defines a single route. A set of routes are collected in a &lt;code&gt;&lt;a href=&quot;routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array to define a &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; configuration. The router attempts to match segments of a given URL against each route, using the configuration options defined in this object.</source>
          <target state="translated">単一のルートを定義する構成オブジェクト。 &lt;code&gt;&lt;a href=&quot;router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 構成を定義するために、一連のルートが &lt;code&gt;&lt;a href=&quot;routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 配列に収集されます。ルーターは、このオブジェクトで定義された構成オプションを使用して、特定のURLのセグメントを各ルートと照合しようとします。</target>
        </trans-unit>
        <trans-unit id="4520e60162947e0d4f8bc410870de69a92317566" translate="yes" xml:space="preserve">
          <source>A configuration that initializes an NgElementConstructor with the dependencies and strategy it needs to transform a component into a custom element class.</source>
          <target state="translated">コンポーネントをカスタム要素クラスに変換するために必要な依存関係と戦略で NgElementConstructor を初期化する設定。</target>
        </trans-unit>
        <trans-unit id="5ee57bfc72b82baa4a0dd6579c0dbcb1d2fa549f" translate="yes" xml:space="preserve">
          <source>A configuration that provides initialization information to the created class.</source>
          <target state="translated">作成されたクラスに初期化情報を提供する設定。</target>
        </trans-unit>
        <trans-unit id="4b7a75de7a7dd9fd3c6c2e1cb2bcd7c662897553" translate="yes" xml:space="preserve">
          <source>A context object to attach to the &lt;a href=&quot;../core/embeddedviewref&quot;&gt;&lt;code&gt;EmbeddedViewRef&lt;/code&gt;&lt;/a&gt;. This should be an object, the object's keys will be available for binding by the local template &lt;code&gt;let&lt;/code&gt; declarations. Using the key &lt;code&gt;$implicit&lt;/code&gt; in the context object will set its value as default.</source>
          <target state="translated">&lt;a href=&quot;../core/embeddedviewref&quot;&gt; &lt;code&gt;EmbeddedViewRef&lt;/code&gt; &lt;/a&gt;にアタッチするコンテキストオブジェクト。これはオブジェクトである必要があります。オブジェクトのキーは、ローカルテンプレートの &lt;code&gt;let&lt;/code&gt; 宣言によるバインドに使用できます。コンテキストオブジェクトでキー &lt;code&gt;$implicit&lt;/code&gt; を使用すると、その値がデフォルトとして設定されます。</target>
        </trans-unit>
        <trans-unit id="8d2d4d92f8439cb0040f95f6d3290be29ab4aa19" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;dirty&lt;/code&gt; if the user has changed the value in the UI.</source>
          <target state="translated">ユーザーがUIで値を変更した場合、コントロールは &lt;code&gt;dirty&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9327f6896bdca186045601aa3c45f1660eb789f4" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;disabled&lt;/code&gt; when its &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;DISABLED&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; が &lt;code&gt;DISABLED&lt;/code&gt; の場合、コントロールは &lt;code&gt;disabled&lt;/code&gt; なります。</target>
        </trans-unit>
        <trans-unit id="82fb23ab120d8e1d1e08017df8326c89e3cb2d80" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;enabled&lt;/code&gt; as long as its &lt;code&gt;status&lt;/code&gt; is not &lt;code&gt;DISABLED&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; が &lt;code&gt;DISABLED&lt;/code&gt; でない限り、コントロールは &lt;code&gt;enabled&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f2ffd744d5627ca35c2757537e16fdf5ec3e29d2" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;invalid&lt;/code&gt; when its &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;INVALID&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; が &lt;code&gt;INVALID&lt;/code&gt; の場合、コントロールは &lt;code&gt;invalid&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a47d095af794f1f2d7e0cc865234a5f4331e5e8f" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;pending&lt;/code&gt; when its &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;PENDING&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; が &lt;code&gt;PENDING&lt;/code&gt; の場合、コントロールは &lt;code&gt;pending&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2361448b385344eb49836b469c86903441a98793" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;pristine&lt;/code&gt; if the user has not yet changed the value in the UI.</source>
          <target state="translated">ユーザーがUIで値をまだ変更していない場合、コントロールは &lt;code&gt;pristine&lt;/code&gt; 状態です。</target>
        </trans-unit>
        <trans-unit id="8dedc3e5db6396d4275bcbc93943c800fcb96a11" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;untouched&lt;/code&gt; if the user has not yet triggered a &lt;code&gt;blur&lt;/code&gt; event on it.</source>
          <target state="translated">ユーザーがまだコントロールで &lt;code&gt;blur&lt;/code&gt; イベントをトリガーしていない場合、コントロールは変更 &lt;code&gt;untouched&lt;/code&gt; ません。</target>
        </trans-unit>
        <trans-unit id="662ee3af64fa768ec48be3840af08c1ff766946c" translate="yes" xml:space="preserve">
          <source>A control is &lt;code&gt;valid&lt;/code&gt; when its &lt;code&gt;status&lt;/code&gt; is &lt;code&gt;VALID&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; が &lt;code&gt;VALID&lt;/code&gt; の場合、コントロールは &lt;code&gt;valid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c96dbfe8e7a308aa5f340515594b71ba14d67cb" translate="yes" xml:space="preserve">
          <source>A control is marked &lt;code&gt;touched&lt;/code&gt; once the user has triggered a &lt;code&gt;blur&lt;/code&gt; event on it.</source>
          <target state="translated">ユーザーがコントロールで &lt;code&gt;blur&lt;/code&gt; イベントをトリガーすると、コントロールは &lt;code&gt;touched&lt;/code&gt; としてマークされます。</target>
        </trans-unit>
        <trans-unit id="077b31470ebd608b300ba3d8e68f55768bc26f76" translate="yes" xml:space="preserve">
          <source>A control is pending while the control performs async validation.</source>
          <target state="translated">コントロールが非同期検証を実行している間、コントロールは保留されています。</target>
        </trans-unit>
        <trans-unit id="20010f105963bf11938a19a5e0f2c55c1232a5a2" translate="yes" xml:space="preserve">
          <source>A corresponding function defines a set of parameters for each category, and collects them into a corresponding &lt;code&gt;&lt;a href=&quot;animationmetadata&quot;&gt;AnimationMetadata&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">対応する関数は、各カテゴリのパラメータのセットを定義し、それらを対応する &lt;code&gt;&lt;a href=&quot;animationmetadata&quot;&gt;AnimationMetadata&lt;/a&gt;&lt;/code&gt; オブジェクトに収集します。</target>
        </trans-unit>
        <trans-unit id="c4431d17b6bd0b4e139d23f69b87553db73c04b2" translate="yes" xml:space="preserve">
          <source>A couple of extra providers enable routing with &quot;hash&quot; URLs such as &lt;code&gt;#!/phones&lt;/code&gt; instead of the default &quot;push state&quot; strategy.</source>
          <target state="translated">いくつかの追加プロバイダーにより、デフォルトの「プッシュ状態」戦略の代わりに、 &lt;code&gt;#!/phones&lt;/code&gt; などの「ハッシュ」URLを使用したルーティングが可能になります。</target>
        </trans-unit>
        <trans-unit id="0b3b73324dced072c7c998b9b615730a1cfe9df7" translate="yes" xml:space="preserve">
          <source>A couple of observations:</source>
          <target state="translated">いくつか観察してみました。</target>
        </trans-unit>
        <trans-unit id="cead82c2a3576abd5bbfffd3a278cd74d11896ea" translate="yes" xml:space="preserve">
          <source>A crisis center with child routes</source>
          <target state="translated">子どもルートのある危機管理センター</target>
        </trans-unit>
        <trans-unit id="d696bc9b7e4bc40435fff12b3833af21db44d854" translate="yes" xml:space="preserve">
          <source>A critical alert.</source>
          <target state="translated">危機一髪。</target>
        </trans-unit>
        <trans-unit id="dda359a5b2152b76b3b7c5509f76dff57027bf0a" translate="yes" xml:space="preserve">
          <source>A critical point</source>
          <target state="translated">臨界点</target>
        </trans-unit>
        <trans-unit id="ce6317a4ac2bc019a91d33b9bae2729a5b87ff60" translate="yes" xml:space="preserve">
          <source>A custom URL-matching function. Cannot be used together with &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">カスタムURLマッチング関数。 &lt;code&gt;path&lt;/code&gt; 一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="fdafdc4619b6863a9e092a97e8ef06300d64b092" translate="yes" xml:space="preserve">
          <source>A custom element &lt;em&gt;hosts&lt;/em&gt; an Angular component, providing a bridge between the data and logic defined in the component and standard DOM APIs. Component properties and logic maps directly into HTML attributes and the browser's event system.</source>
          <target state="translated">カスタム要素&lt;em&gt;は&lt;/em&gt;、Angularコンポーネントを&lt;em&gt;ホスト&lt;/em&gt;し、コンポーネントと標準のDOM APIで定義されたデータとロジックの間のブリッジを提供します。コンポーネントのプロパティとロジックは、HTML属性とブラウザのイベントシステムに直接マップされます。</target>
        </trans-unit>
        <trans-unit id="50fbd9a7a05110984303e83f01d313340150d8d9" translate="yes" xml:space="preserve">
          <source>A custom element extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code. The browser maintains a &lt;code&gt;CustomElementRegistry&lt;/code&gt; of defined custom elements (also called Web Components), which maps an instantiable JavaScript class to an HTML tag.</source>
          <target state="translated">カスタム要素は、コンテンツがJavaScriptコードによって作成および制御されるタグを定義できるようにすることで、HTMLを拡張します。ブラウザは、インスタンス化可能なJavaScriptクラスをHTMLタグにマップする、定義済みのカスタム要素（Webコンポーネントとも呼ばれます）の &lt;code&gt;CustomElementRegistry&lt;/code&gt; を維持します。</target>
        </trans-unit>
        <trans-unit id="6c725e2134906977cd73632a4b80c11367108a21" translate="yes" xml:space="preserve">
          <source>A custom error handler for failed navigations.</source>
          <target state="translated">失敗したナビゲーションのためのカスタムエラーハンドラ。</target>
        </trans-unit>
        <trans-unit id="1ffa2867cc36c1d87f7f95eef71a929854ba1538" translate="yes" xml:space="preserve">
          <source>A custom event from an interceptor or a backend.</source>
          <target state="translated">インターセプターやバックエンドからのカスタムイベント。</target>
        </trans-unit>
        <trans-unit id="508d36eb8404c69db7405f018e84a6ca55036f9b" translate="yes" xml:space="preserve">
          <source>A custom handler for malformed URI errors. The handler is invoked when &lt;code&gt;encodedURI&lt;/code&gt; contains invalid character sequences. The default implementation is to redirect to the root URL, dropping any path or parameter information. The function takes three parameters:</source>
          <target state="translated">不正なURIエラーのカスタムハンドラー。ハンドラーは、 &lt;code&gt;encodedURI&lt;/code&gt; に無効な文字シーケンスが含まれている場合に呼び出されます。デフォルトの実装では、ルートURLにリダイレクトし、パスまたはパラメーター情報をすべてドロップします。この関数は3つのパラメーターを取ります。</target>
        </trans-unit>
        <trans-unit id="210dc781bd3eb286264d5aef72455eddddea7bdc" translate="yes" xml:space="preserve">
          <source>A data service encapsulates these details. It's easier to evolve these details inside the service without affecting its consumers. And it's easier to test the consumers with mock service implementations.</source>
          <target state="translated">データサービスは、これらの詳細をカプセル化します。サービスの消費者に影響を与えることなく、サービスの内部でこれらの詳細を進化させることが容易になります。また、モックサービスの実装で消費者をテストするのも簡単です。</target>
        </trans-unit>
        <trans-unit id="5fd0ebebf76062ac0cdbc96c6dac75750fffde56" translate="yes" xml:space="preserve">
          <source>A declarable belongs to one and only one NgModule. A module can list another module among its exports, in which case all of that module's public declaration are exported.</source>
          <target state="translated">宣言可能なものは、1つのNgModuleに属します。モジュールは、そのエクスポートの中に別のモジュールをリストアップすることができ、その場合、そのモジュールの公開宣言はすべてエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="d9d67cd229281a6464e06b9627732572303daf22" translate="yes" xml:space="preserve">
          <source>A declarable can only belong to one module, so only declare it in one &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. When you need it elsewhere, import the module that has the declarable you need in it.</source>
          <target state="translated">申告は、一つだけのモジュールに属し、その一つだけでそれを宣言することができます &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 。他の場所で必要な場合は、必要な宣言型を含むモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="1a3c15ea9c54b23acd006a80632a4370109b2319" translate="yes" xml:space="preserve">
          <source>A decorator on a component class adds the metadata, including a pointer to the associated template.</source>
          <target state="translated">コンポーネント・クラスのデコレータは、関連するテンプレートへのポインタを含むメタデータを追加します。</target>
        </trans-unit>
        <trans-unit id="d9232145f0fa479629bee4a1403931108d3b67c5" translate="yes" xml:space="preserve">
          <source>A default implementation of the &lt;code&gt;&lt;a href=&quot;router/urlserializer&quot;&gt;UrlSerializer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router/urlserializer&quot;&gt;UrlSerializer&lt;/a&gt;&lt;/code&gt; のデフォルト実装。</target>
        </trans-unit>
        <trans-unit id="be7410185cfb22d50bdb3dd5b8d69a91b30d1843" translate="yes" xml:space="preserve">
          <source>A default implementation of the &lt;code&gt;&lt;a href=&quot;urlserializer&quot;&gt;UrlSerializer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;urlserializer&quot;&gt;UrlSerializer&lt;/a&gt;&lt;/code&gt; のデフォルト実装。</target>
        </trans-unit>
        <trans-unit id="d5edf00cab75a5f261a00303a58b3784ef41af25" translate="yes" xml:space="preserve">
          <source>A delay value.</source>
          <target state="translated">遅延値。</target>
        </trans-unit>
        <trans-unit id="30019a94791709ed7ee12c9d2a7e97d0717eab83" translate="yes" xml:space="preserve">
          <source>A dependency &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt; configures an injector with a &lt;a href=&quot;glossary#di-token&quot;&gt;DI token&lt;/a&gt;, which that injector uses to provide the concrete, runtime version of a dependency value. The injector relies on the provider configuration to create instances of the dependencies that it injects into components, directives, pipes, and other services.</source>
          <target state="translated">依存関係&lt;a href=&quot;glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;は、&lt;a href=&quot;glossary#di-token&quot;&gt;DIトークン&lt;/a&gt;を使用してインジェクターを構成します。DIトークンは、依存関係値の具体的なランタイムバージョンを提供するために使用します。インジェクターは、プロバイダー構成に依存して、コンポーネント、ディレクティブ、パイプ、およびその他のサービスに注入する依存関係のインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="51f38719f370be9d130886d8c0bd44a8365fee81" translate="yes" xml:space="preserve">
          <source>A dependency can't always be created by the default method of instantiating a class. You learned about some other methods in &lt;a href=&quot;dependency-injection-providers&quot;&gt;Dependency Providers&lt;/a&gt;. The following &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; example demonstrates many of the alternatives and why you need them. It's visually simple: a few properties and the logs produced by a logger.</source>
          <target state="translated">依存関係は、クラスをインスタンス化するデフォルトの方法で常に作成できるとは限りません。&lt;a href=&quot;dependency-injection-providers&quot;&gt;依存関係プロバイダーで&lt;/a&gt;他のいくつかのメソッドについて学びました。次の &lt;code&gt;HeroOfTheMonthComponent&lt;/code&gt; の例は、多くの選択肢と、それらが必要な理由を示しています。それは視覚的にシンプルです：いくつかのプロパティとロガーによって生成されたログ。</target>
        </trans-unit>
        <trans-unit id="9f695238eb1ba6e7f4b219ba97b438b3b7e53b33" translate="yes" xml:space="preserve">
          <source>A dependency doesn't have to be a service&amp;mdash;it could be a function, for example, or a value.</source>
          <target state="translated">依存関係はサービスである必要はありません。たとえば、関数や値である可能性があります。</target>
        </trans-unit>
        <trans-unit id="15525a2b2d3a0191259341bf53ae12f208e1ea57" translate="yes" xml:space="preserve">
          <source>A design pattern and mechanism for creating and delivering some parts of an application (dependencies) to other parts of an application that require them.</source>
          <target state="translated">アプリケーションの一部(依存関係)を作成し、それを必要とするアプリケーションの他の部分に配信するための設計パターンとメカニズム。</target>
        </trans-unit>
        <trans-unit id="cbba6be02bb4ee14ea720baacb075129dc0348dc" translate="yes" xml:space="preserve">
          <source>A differ that tracks changes made to an object over time.</source>
          <target state="translated">時間の経過とともにオブジェクトに加えられた変更を追跡する差分。</target>
        </trans-unit>
        <trans-unit id="ba0e47b0105f6046e0b89617ee3f13f2bdf94e04" translate="yes" xml:space="preserve">
          <source>A directive &lt;em&gt;class&lt;/em&gt; is spelled in &lt;em&gt;UpperCamelCase&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;). A directive's &lt;em&gt;attribute name&lt;/em&gt; is spelled in &lt;em&gt;lowerCamelCase&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;). The guide refers to the directive &lt;em&gt;class&lt;/em&gt; when talking about its properties and what the directive does. The guide refers to the &lt;em&gt;attribute name&lt;/em&gt; when describing how you apply the directive to an element in the HTML template.</source>
          <target state="translated">ディレクティブ&lt;em&gt;クラスの&lt;/em&gt;スペルは、&lt;em&gt;UpperCamelCase&lt;/em&gt;（ &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; ）です。ディレクティブの&lt;em&gt;属性名&lt;/em&gt;は&lt;em&gt;lowerCamelCase&lt;/em&gt;（ &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; ）で綴られています。このガイドでは、そのプロパティとディレクティブの機能について説明するときに、ディレクティブ&lt;em&gt;クラスを&lt;/em&gt;参照しています。このガイドでは、HTMLテンプレートの要素にディレクティブを適用する方法を説明するときに、&lt;em&gt;属性名を&lt;/em&gt;参照してい&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="94d1828685c2b046ca5fbb00127b0088df822914" translate="yes" xml:space="preserve">
          <source>A directive class is usually associated with an HTML element or attribute, and that element or attribute is often referred to as the directive itself. When Angular finds a directive in an HTML &lt;a href=&quot;glossary#template&quot;&gt;template&lt;/a&gt;, it creates the matching directive class instance and gives the instance control over that portion of the browser DOM.</source>
          <target state="translated">ディレクティブクラスは通常HTML要素または属性に関連付けられており、その要素または属性はしばしばディレクティブ自体と呼ばれます。Angularは、HTML &lt;a href=&quot;glossary#template&quot;&gt;テンプレート&lt;/a&gt;でディレクティブを見つけると、一致するディレクティブクラスインスタンスを作成し、インスタンスにブラウザーDOMのその部分を制御させます。</target>
        </trans-unit>
        <trans-unit id="e2eb8b30123eba9d5dc5274c6b45d8e83667dd30" translate="yes" xml:space="preserve">
          <source>A directive could hide the unwanted paragraph instead by setting its &lt;code&gt;display&lt;/code&gt; style to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">ディレクティブは、 &lt;code&gt;display&lt;/code&gt; スタイルを &lt;code&gt;none&lt;/code&gt; に設定することにより、代わりに不要な段落を非表示にすることができます。</target>
        </trans-unit>
        <trans-unit id="fc3d1ce63988b28444f381ebc398b6bdf06ac41c" translate="yes" xml:space="preserve">
          <source>A directive has the same set of lifecycle hooks.</source>
          <target state="translated">ディレクティブは同じライフサイクルフックのセットを持っています。</target>
        </trans-unit>
        <trans-unit id="eb17837a767841446768a528a4105fa60a1be0ff" translate="yes" xml:space="preserve">
          <source>A directive must belong to exactly one NgModule. Do not re-declare a directive imported from another module. List the directive class in the &lt;code&gt;declarations&lt;/code&gt; field of an NgModule.</source>
          <target state="translated">ディレクティブは1つのNgModuleに属している必要があります。別のモジュールからインポートされたディレクティブを再宣言しないでください。NgModuleの &lt;code&gt;declarations&lt;/code&gt; フィールドにディレクティブクラスをリストします。</target>
        </trans-unit>
        <trans-unit id="06bab5b2f84f1d83b1636af97cad32ec246881f5" translate="yes" xml:space="preserve">
          <source>A directive that adds max length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに最大長の検証を追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="dc755aa288617ce267b9847c3b17e76a21d1135a" translate="yes" xml:space="preserve">
          <source>A directive that adds max length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに最大長の検証を追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="6e258f11d9d85d3806958b19413b937998de3ca2" translate="yes" xml:space="preserve">
          <source>A directive that adds minimum length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; mult-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに最小長の検証を追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="c576fdea0f4345495cbec00241aa643d607047f6" translate="yes" xml:space="preserve">
          <source>A directive that adds minimum length validation to controls marked with the &lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; mult-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに最小長の検証を追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="695db7155424e297167bd554b9d87c8adef8366a" translate="yes" xml:space="preserve">
          <source>A directive that adds regex pattern validation to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; attribute. The regex must match the entire control value. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに正規表現パターン検証を追加するディレクティブ。正規表現は、制御値全体と一致する必要があります。ディレクティブは &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="0e7995cf0d230fbcb234007e53811a6559246b24" translate="yes" xml:space="preserve">
          <source>A directive that adds regex pattern validation to controls marked with the &lt;code&gt;&lt;a href=&quot;patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; attribute. The regex must match the entire control value. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;patternvalidator&quot;&gt;pattern&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに正規表現パターン検証を追加するディレクティブ。正規表現は、制御値全体と一致する必要があります。ディレクティブは &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="fecaa780233e30f2b7c4f880afba7d4f9c081262" translate="yes" xml:space="preserve">
          <source>A directive that adds the &lt;code&gt;&lt;a href=&quot;emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; validator to controls marked with the &lt;code&gt;&lt;a href=&quot;emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに &lt;code&gt;&lt;a href=&quot;emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; バリデーターを追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="66ea7083cabb25ae99d85dbbbd48442747569672" translate="yes" xml:space="preserve">
          <source>A directive that adds the &lt;code&gt;&lt;a href=&quot;forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; validator to controls marked with the &lt;code&gt;&lt;a href=&quot;forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; 属性でマークされたコントロールに &lt;code&gt;&lt;a href=&quot;forms/emailvalidator&quot;&gt;email&lt;/a&gt;&lt;/code&gt; バリデーターを追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="e5b20651be4b4c212b50703b3396740bdd0ebf00" translate="yes" xml:space="preserve">
          <source>A directive that adds the &lt;code&gt;required&lt;/code&gt; validator to any controls marked with the &lt;code&gt;required&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 属性でマークされたコントロールに &lt;code&gt;required&lt;/code&gt; バリデーターを追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="27d5b01c46cf928af7627e24610db90e1b702841" translate="yes" xml:space="preserve">
          <source>A directive that adds the &lt;code&gt;required&lt;/code&gt; validator to any controls marked with the &lt;code&gt;required&lt;/code&gt; attribute. The directive is provided with the &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; multi-provider list.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 属性でマークされたコントロールに &lt;code&gt;required&lt;/code&gt; バリデーターを追加するディレクティブ。ディレクティブは &lt;code&gt;&lt;a href=&quot;ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; マルチプロバイダーリストで提供されます。</target>
        </trans-unit>
        <trans-unit id="0540f8499c507f38f8fb31d44a122a56e3f34181" translate="yes" xml:space="preserve">
          <source>A distinct application feature or workflow may be &lt;em&gt;lazy loaded&lt;/em&gt; or &lt;em&gt;loaded on demand&lt;/em&gt; rather than when the application starts.</source>
          <target state="translated">個別のアプリケーション機能またはワークフローは、アプリケーションの起動時ではなく、&lt;em&gt;遅延ロード&lt;/em&gt;または&lt;em&gt;オンデマンド&lt;/em&gt;で&lt;em&gt;ロードされる&lt;/em&gt;場合があります。</target>
        </trans-unit>
        <trans-unit id="0e65175079f38d7882ce624afc0a013c9135750a" translate="yes" xml:space="preserve">
          <source>A dot-delimited string or array of string/number values that define the path to the control.</source>
          <target state="translated">コントロールへのパスを定義するドット区切りの文字列または文字列番号の配列。</target>
        </trans-unit>
        <trans-unit id="6b086b3a868f0313eed50c2f74d7d107c8d6b457" translate="yes" xml:space="preserve">
          <source>A download progress event was received.</source>
          <target state="translated">ダウンロード進行イベントが届きました。</target>
        </trans-unit>
        <trans-unit id="bf1fd3090342831e8febf29fa6ce244224f91de8" translate="yes" xml:space="preserve">
          <source>A download progress event.</source>
          <target state="translated">ダウンロード進行イベント。</target>
        </trans-unit>
        <trans-unit id="c274fbd2f10d6758f7cee43a610ad84394d5ef5e" translate="yes" xml:space="preserve">
          <source>A factory for creating a Compiler</source>
          <target state="translated">コンパイラを作成するためのファクトリー</target>
        </trans-unit>
        <trans-unit id="dcb9b28f9ee950cd3bc74acd3a0473356aed355b" translate="yes" xml:space="preserve">
          <source>A factory object returned from the &lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt;.&lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt; から返されたファクトリオブジェクト。 &lt;code&gt;&lt;a href=&quot;animationfactory&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="dfbb3a312624d276c0ae06bf2036ff66b531cb9d" translate="yes" xml:space="preserve">
          <source>A factory object returned from the &lt;code&gt;&lt;a href=&quot;animations/animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt;.&lt;code&gt;&lt;a href=&quot;animations&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;animations/animationbuilder&quot;&gt;AnimationBuilder&lt;/a&gt;&lt;/code&gt; から返されたファクトリオブジェクト。 &lt;code&gt;&lt;a href=&quot;animations&quot;&gt;build()&lt;/a&gt;&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="950344dd2008bd842b31f199f0c2f6a76dc90bcc" translate="yes" xml:space="preserve">
          <source>A factory provider needs a factory function.</source>
          <target state="translated">工場の提供者には工場機能が必要です。</target>
        </trans-unit>
        <trans-unit id="9af1374f1b3a2d447374063ec0d712c6b3c1abfe" translate="yes" xml:space="preserve">
          <source>A feature module is an organizational best practice, as opposed to a concept of the core Angular API. A feature module delivers a cohesive set of functionality focused on a specific application need such as a user workflow, routing, or forms. While you can do everything within the root module, feature modules help you partition the app into focused areas. A feature module collaborates with the root module and with other modules through the services it provides and the components, directives, and pipes that it shares.</source>
          <target state="translated">機能モジュールは、コアとなるAngular APIの概念とは対照的な、組織的なベストプラクティスです。機能モジュールは、ユーザーのワークフロー、ルーティング、フォームなど、特定のアプリケーションのニーズに焦点を当てた、まとまりのある機能セットを提供します。ルートモジュール内ですべてを行うことができますが、機能モジュールはアプリをフォーカスした領域に分割するのに役立ちます。フィーチャーモジュールは、提供するサービスや共有するコンポーネント、ディレクティブ、パイプを通じて、ルートモジュールや他のモジュールと連携します。</target>
        </trans-unit>
        <trans-unit id="8a3f10b61215f1ebd7d50bf9977a58ca5d7430ea" translate="yes" xml:space="preserve">
          <source>A few HTML attributes have 1:1 mapping to properties; for example, &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">一部のHTML属性には、プロパティへの1：1マッピングがあります。たとえば、 &lt;code&gt;id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cab7e438a119824aa31b72befbf1582a5325059e" translate="yes" xml:space="preserve">
          <source>A few examples are:</source>
          <target state="translated">いくつか例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="c6ee2c2b25cb84877c6a129970f10826dc9e4acb" translate="yes" xml:space="preserve">
          <source>A few of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; instance methods are not covered by static &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;&lt;em&gt;class&lt;/em&gt; methods. These are rarely needed.</source>
          <target state="translated">一部の &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; インスタンスメソッドは、静的な &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; &lt;em&gt;クラス&lt;/em&gt;メソッドでカバーされていません。これらはほとんど必要ありません。</target>
        </trans-unit>
        <trans-unit id="fe024a04a32763b23cf4aab61238ff280ef8b6c1" translate="yes" xml:space="preserve">
          <source>A few techniques are noteworthy:</source>
          <target state="translated">注目すべきは、いくつかのテクニックです。</target>
        </trans-unit>
        <trans-unit id="a9b6cd4fe72242d6d017b5e2e509342ea11bb39c" translate="yes" xml:space="preserve">
          <source>A few terms are unambiguously services. They typically indicate agency by ending in &quot;-er&quot;. You may prefer to name a service that logs messages &lt;code&gt;Logger&lt;/code&gt; rather than &lt;code&gt;LoggerService&lt;/code&gt;. Decide if this exception is agreeable in your project. As always, strive for consistency.</source>
          <target state="translated">いくつかの用語は明確にサービスです。通常、末尾が「-er」で代理店を示します。 &lt;code&gt;LoggerService&lt;/code&gt; ではなく、メッセージ &lt;code&gt;Logger&lt;/code&gt; を記録するサービスに名前を付けることをお勧めします。この例外がプロジェクトで同意できるかどうかを決定します。いつものように、一貫性のために努力してください。</target>
        </trans-unit>
        <trans-unit id="4b0543f1b2e2dc773052225d03a3ed8562e5819b" translate="yes" xml:space="preserve">
          <source>A file named &lt;code&gt;angular.json&lt;/code&gt; at the root level of an Angular &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt; provides workspace-wide and project-specific configuration defaults for build and development tools provided by the Angular CLI. Path values given in the configuration are relative to the root workspace folder.</source>
          <target state="translated">Angular &lt;a href=&quot;glossary#workspace&quot;&gt;ワークスペースの&lt;/a&gt;ルートレベルにある &lt;code&gt;angular.json&lt;/code&gt; という名前のファイルは、Angular CLIが提供するビルドおよび開発ツールのワークスペース全体およびプロジェクト固有の構成のデフォルトを提供します。構成で指定されたパス値は、ルートワークスペースフォルダーを基準にしています。</target>
        </trans-unit>
        <trans-unit id="cdb64896ccc0908fbd528f490c377372ffb24bd2" translate="yes" xml:space="preserve">
          <source>A file named &lt;code&gt;angular.json&lt;/code&gt; at the root level of an Angular &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt; provides workspace-wide and project-specific configuration defaults for build and development tools that are provided by or integrated with the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;glossary#workspace&quot;&gt;ワークスペースの&lt;/a&gt;ルートレベルにある &lt;code&gt;angular.json&lt;/code&gt; という名前のファイルは、&lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt;によって提供または統合されたビルドおよび開発ツールのワークスペース全体およびプロジェクト固有の構成のデフォルトを提供します。</target>
        </trans-unit>
        <trans-unit id="8c5daab9e4b40930ffc67ad08f9f7e944f2c8b0d" translate="yes" xml:space="preserve">
          <source>A final &lt;code&gt;&lt;a href=&quot;http/httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; which will dispatch the request via browser HTTP APIs to a backend.</source>
          <target state="translated">ブラウザのHTTP APIを介してリクエストをバックエンドにディスパッチする最後の &lt;code&gt;&lt;a href=&quot;http/httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="63f7ebe21023a564f8979eb517f0a75bfaa7e096" translate="yes" xml:space="preserve">
          <source>A final &lt;code&gt;&lt;a href=&quot;httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; which will dispatch the request via browser HTTP APIs to a backend.</source>
          <target state="translated">ブラウザのHTTP APIを介してリクエストをバックエンドにディスパッチする最後の &lt;code&gt;&lt;a href=&quot;httphandler&quot;&gt;HttpHandler&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="081bb28f877d8dfbf9dbdced6031ad6c6eb21354" translate="yes" xml:space="preserve">
          <source>A flat module index &lt;code&gt;.d.ts&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; is created with the given &lt;code&gt;flatModuleOutFile&lt;/code&gt; name in the same location as the library index &lt;code&gt;.d.ts&lt;/code&gt; file.</source>
          <target state="translated">フラットモジュールインデックス &lt;code&gt;.d.ts&lt;/code&gt; および &lt;code&gt;.js&lt;/code&gt; は、ライブラリインデックス &lt;code&gt;.d.ts&lt;/code&gt; ファイルと同じ場所に、指定された &lt;code&gt;flatModuleOutFile&lt;/code&gt; 名で作成されます。</target>
        </trans-unit>
        <trans-unit id="0b4ecb2d416525e8a678b698930a9d483c457446" translate="yes" xml:space="preserve">
          <source>A flip of the switch turns the &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; into a &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt;. The complete implementation is as follows:</source>
          <target state="translated">スイッチを切り替えると、 &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; がFlyingHeroesImpurePipeに &lt;code&gt;FlyingHeroesImpurePipe&lt;/code&gt; ます。完全な実装は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="dce635877c967caa411bed07baa04183db074439" translate="yes" xml:space="preserve">
          <source>A form component class with a &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータを備えたフォームコンポーネントクラス。</target>
        </trans-unit>
        <trans-unit id="6f4dabb93ae061e849700a419e18e9419cfd943a" translate="yes" xml:space="preserve">
          <source>A form group tracks the status and changes for each of its controls, so if one of the controls changes, the parent control also emits a new status or value change. The model for the group is maintained from its members. After you define the model, you must update the template to reflect the model in the view.</source>
          <target state="translated">フォームグループはそれぞれのコントロールのステータスと変更を追跡するので、コントロールの1つが変更された場合、親コントロールも新しいステータスまたは値の変更を発します。グループのモデルは、そのメンバーから維持されます。モデルを定義した後、テンプレートを更新して、ビューにモデルを反映させる必要があります。</target>
        </trans-unit>
        <trans-unit id="7a2957cdc2fc7fde81eadc1298d620e085f6a3ce" translate="yes" xml:space="preserve">
          <source>A form of property &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt; in which a &lt;a href=&quot;glossary#template-expression&quot;&gt;template expression&lt;/a&gt; between double-curly braces renders as text. That text can be concatenated with neighboring text before it is assigned to an element property or displayed between element tags, as in this example.</source>
          <target state="translated">プロパティのフォーム&lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディング&lt;/a&gt;する&lt;a href=&quot;glossary#template-expression&quot;&gt;テンプレート発現&lt;/a&gt;ダブル中括弧の間には、テキストとしてレンダリング。この例のように、そのテキストは、要素のプロパティに割り当てられる前、または要素タグの間に表示される前に、隣接するテキストと連結できます。</target>
        </trans-unit>
        <trans-unit id="c440d6cf03478cfaa3881a3d89f9573911b226a4" translate="yes" xml:space="preserve">
          <source>A format for building Angular forms using HTML forms and input elements in the view. The alternative format uses the &lt;a href=&quot;glossary#reactive-forms&quot;&gt;reactive forms&lt;/a&gt; framework.</source>
          <target state="translated">ビューのHTMLフォームと入力要素を使用してAngularフォームを構築するためのフォーマット。代替フォーマットは、&lt;a href=&quot;glossary#reactive-forms&quot;&gt;反応型&lt;/a&gt;フレームワークを使用します。</target>
        </trans-unit>
        <trans-unit id="e5ef4a349b19270bd3bc9ebcc3f18e626f75c0cf" translate="yes" xml:space="preserve">
          <source>A framework for building Angular forms through code in a component. The alternative is a &lt;a href=&quot;glossary#template-driven-forms&quot;&gt;template-driven form&lt;/a&gt;.</source>
          <target state="translated">コンポーネントのコードを通じてAngularフォームを構築するためのフレームワーク。代替は、&lt;a href=&quot;glossary#template-driven-forms&quot;&gt;テンプレート駆動型のフォーム&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="0d14d0f7ea94f405fdbafc210a264d270af949aa" translate="yes" xml:space="preserve">
          <source>A full HTTP response, including a typed response body (which may be &lt;code&gt;null&lt;/code&gt; if one was not returned).</source>
          <target state="translated">型指定された応答本文を含む完全なHTTP応答（返されなかった場合は &lt;code&gt;null&lt;/code&gt; になる場合があります）。</target>
        </trans-unit>
        <trans-unit id="53e7772e1ee60e5a076a93eae9c41bb3210c50d4" translate="yes" xml:space="preserve">
          <source>A function for matching a route against URLs. Implement a custom URL matcher for &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; when a combination of &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; is not expressive enough. Cannot be used together with &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ルートをURLと照合するための関数。 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; の組み合わせが十分に表現力がない場合は、 &lt;code&gt;&lt;a href=&quot;route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; のカスタムURLマッチャーを実装します。 &lt;code&gt;path&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; と一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="09f1f8e31b5105534c849f46cebce0d49634b1a5" translate="yes" xml:space="preserve">
          <source>A function for matching a route against URLs. Implement a custom URL matcher for &lt;code&gt;&lt;a href=&quot;router/route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; when a combination of &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; is not expressive enough. Cannot be used together with &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ルートをURLと照合するための関数。 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; の組み合わせが十分に表現力がない場合は、 &lt;code&gt;&lt;a href=&quot;router/route#matcher&quot;&gt;Route.matcher&lt;/a&gt;&lt;/code&gt; のカスタムURLマッチャーを実装します。 &lt;code&gt;path&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; と一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="684e23c9356d6fb252eeb1d67716948d73324136" translate="yes" xml:space="preserve">
          <source>A function is executed each time a state change occurs in the animation trigger element. The animation steps run when the function returns true.</source>
          <target state="translated">アニメーションのトリガー要素で状態変化が起こるたびに関数が実行されます。この関数がtrueを返すと、アニメーションのステップが実行されます。</target>
        </trans-unit>
        <trans-unit id="574a3a8774d337c58b7e6859c4c8542cb2f2b41f" translate="yes" xml:space="preserve">
          <source>A function that defines how to obtain or generate values or messages to be published. This function is executed when a consumer calls the &lt;code&gt;subscribe()&lt;/code&gt; method of an &lt;a href=&quot;glossary#observable&quot;&gt;observable&lt;/a&gt;.</source>
          <target state="translated">公開する値またはメッセージを取得または生成する方法を定義する関数。この関数は、コンシューマが&lt;a href=&quot;glossary#observable&quot;&gt;オブザーバブルの&lt;/a&gt; &lt;code&gt;subscribe()&lt;/code&gt; メソッドを呼び出すと実行されます。</target>
        </trans-unit>
        <trans-unit id="6275d4c0492c7115ec24bb20ae9c3d8f63aab167" translate="yes" xml:space="preserve">
          <source>A function that defines how to track changes for items in the iterable.</source>
          <target state="translated">イテレート可能な項目の変更を追跡する方法を定義する関数です。</target>
        </trans-unit>
        <trans-unit id="4fc9c1cc331c59974bdc21b79a630dbc89ff6bf9" translate="yes" xml:space="preserve">
          <source>A function that is called to resolve a collection of lazy-loaded routes.</source>
          <target state="translated">遅延ロードされたルートのコレクションを解決するために呼び出される関数。</target>
        </trans-unit>
        <trans-unit id="ca9b1f1fd5952d3c22b4ec5faed5f044aba54c78" translate="yes" xml:space="preserve">
          <source>A function that modifies a class or property definition. Decorators (also called &lt;em&gt;annotations&lt;/em&gt;) are an experimental (stage 2) &lt;a href=&quot;https://github.com/wycats/javascript-decorators&quot;&gt;JavaScript language feature&lt;/a&gt;. TypeScript adds support for decorators.</source>
          <target state="translated">クラスまたはプロパティの定義を変更する関数。デコレーター（&lt;em&gt;アノテーション&lt;/em&gt;とも呼ばれます）は、実験的な（ステージ2）&lt;a href=&quot;https://github.com/wycats/javascript-decorators&quot;&gt;JavaScript言語機能です&lt;/a&gt;。TypeScriptはデコレーターのサポートを追加します。</target>
        </trans-unit>
        <trans-unit id="c02f83e963294e99ed2772ac7ec52453259e650b" translate="yes" xml:space="preserve">
          <source>A function that receives a control and returns a Promise or observable that emits validation errors if present, otherwise null.</source>
          <target state="translated">コントロールを受け取り、Promiseまたはobservableを返す関数で、存在する場合は検証エラーを返します。</target>
        </trans-unit>
        <trans-unit id="c63c521dd24d8ae841280ee8807d80862d7fa73b" translate="yes" xml:space="preserve">
          <source>A function that receives a control and synchronously returns a map of validation errors if present, otherwise null.</source>
          <target state="translated">コントロールを受け取り、検証エラーが存在する場合は同期的に検証エラーのマップを返します。</target>
        </trans-unit>
        <trans-unit id="498df6d36954e0cdff82d1b0509284d0281596a6" translate="yes" xml:space="preserve">
          <source>A function that uses the &lt;a href=&quot;glossary#architect&quot;&gt;Architect&lt;/a&gt; API to perform a complex process such as &quot;build&quot; or &quot;test&quot;. The builder code is defined in an &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;glossary#architect&quot;&gt;Architect&lt;/a&gt; APIを使用して、「ビルド」や「テスト」などの複雑なプロセスを実行する関数。ビルダーコードは&lt;a href=&quot;glossary#npm-package&quot;&gt;npmパッケージで&lt;/a&gt;定義されています。</target>
        </trans-unit>
        <trans-unit id="cb7987e75f0c7e65838a518979f2220d3c5dca44" translate="yes" xml:space="preserve">
          <source>A function that will be executed when a platform is initialized.</source>
          <target state="translated">プラットフォームが初期化されたときに実行される関数。</target>
        </trans-unit>
        <trans-unit id="09d03f78f1c88deaa516cb82e14a686bff6bdbe1" translate="yes" xml:space="preserve">
          <source>A function that will be executed when an application is initialized.</source>
          <target state="translated">アプリケーションの初期化時に実行される関数です。</target>
        </trans-unit>
        <trans-unit id="06f5cc23cf462eb4020857f44f94a183b857febb" translate="yes" xml:space="preserve">
          <source>A function that will be executed when calling &lt;code&gt;&lt;a href=&quot;platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;&lt;/code&gt; just before current platform state is rendered to string.</source>
          <target state="translated">現在のプラットフォームの状態が文字列にレンダリングされる直前に &lt;code&gt;&lt;a href=&quot;platform-server/rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;platform-server/rendermodule&quot;&gt;renderModule&lt;/a&gt;&lt;/code&gt; を呼び出すときに実行される関数。</target>
        </trans-unit>
        <trans-unit id="407a564f4ca570f6b9e0addb423af8b5d1261191" translate="yes" xml:space="preserve">
          <source>A function that will be executed when calling &lt;code&gt;&lt;a href=&quot;rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;rendermodule&quot;&gt;renderModule&lt;/a&gt;&lt;/code&gt; just before current platform state is rendered to string.</source>
          <target state="translated">現在のプラットフォームの状態が文字列にレンダリングされる直前に &lt;code&gt;&lt;a href=&quot;rendermodulefactory&quot;&gt;renderModuleFactory&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;rendermodule&quot;&gt;renderModule&lt;/a&gt;&lt;/code&gt; を呼び出すときに実行される関数。</target>
        </trans-unit>
        <trans-unit id="4d85a1e7e2608a6d01946ea8f34b3d4c9507f423" translate="yes" xml:space="preserve">
          <source>A function to call when the notification occurs. Receives the event object as an argument.</source>
          <target state="translated">通知が発生したときに呼び出す関数です。イベントオブジェクトを引数として受け取ります。</target>
        </trans-unit>
        <trans-unit id="0a7b93f0502276f70b84f75c408d27157e6276eb" translate="yes" xml:space="preserve">
          <source>A function to invoke to create a value for this &lt;code&gt;token&lt;/code&gt;. The function is invoked with resolved values of &lt;code&gt;token&lt;/code&gt;s in the &lt;code&gt;deps&lt;/code&gt; field.</source>
          <target state="translated">この &lt;code&gt;token&lt;/code&gt; 値を作成するために呼び出す関数。関数は、 &lt;code&gt;deps&lt;/code&gt; フィールドの &lt;code&gt;token&lt;/code&gt; sの解決された値で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2be97f407436eaa098a90855dde1a2d9662d7e64" translate="yes" xml:space="preserve">
          <source>A future guide update will explain how to write such tests with the &lt;code&gt;&lt;a href=&quot;../api/router/testing/routertestingmodule&quot;&gt;RouterTestingModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">今後のガイドの更新では、 &lt;code&gt;&lt;a href=&quot;../api/router/testing/routertestingmodule&quot;&gt;RouterTestingModule&lt;/a&gt;&lt;/code&gt; を使用してこのようなテストを作成する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="dbf0f48bf91ee4d285d9f2dff879c99f8aa11e6b" translate="yes" xml:space="preserve">
          <source>A getter provides easy access to the aliases in the form array instance compared to repeating the &lt;code&gt;profileForm.get()&lt;/code&gt; method to get each instance. The form array instance represents an undefined number of controls in an array. It's convenient to access a control through a getter, and this approach is easy to repeat for additional controls.</source>
          <target state="translated">ゲッターを使用すると、 &lt;code&gt;profileForm.get()&lt;/code&gt; メソッドを繰り返して各インスタンスを取得するのに比べて、フォーム配列インスタンスのエイリアスに簡単にアクセスできます。フォーム配列インスタンスは、配列内の未定義の数のコントロールを表します。ゲッターを介してコントロールにアクセスすると便利です。このアプローチは、追加のコントロールに対して繰り返すのが簡単です。</target>
        </trans-unit>
        <trans-unit id="56f28945da320dfacc6dd33fe0eed3c442d99b91" translate="yes" xml:space="preserve">
          <source>A global registry of &lt;a href=&quot;core/testability&quot;&gt;&lt;code&gt;Testability&lt;/code&gt;&lt;/a&gt; instances for specific elements.</source>
          <target state="translated">特定の要素の&lt;a href=&quot;core/testability&quot;&gt; &lt;code&gt;Testability&lt;/code&gt; &lt;/a&gt;インスタンスのグローバルレジストリ。</target>
        </trans-unit>
        <trans-unit id="5618156b292e64c15c0bffbcc031189cd9a6e28a" translate="yes" xml:space="preserve">
          <source>A global registry of &lt;a href=&quot;testability&quot;&gt;&lt;code&gt;Testability&lt;/code&gt;&lt;/a&gt; instances for specific elements.</source>
          <target state="translated">特定の要素の&lt;a href=&quot;testability&quot;&gt; &lt;code&gt;Testability&lt;/code&gt; &lt;/a&gt;インスタンスのグローバルレジストリ。</target>
        </trans-unit>
        <trans-unit id="9d98e2b1ee296918f8bf1519af8e2ae4db7c097d" translate="yes" xml:space="preserve">
          <source>A good example is a service that holds state for its companion component instance. You need a separate instance of the service for each component. Each service has its own work-state, isolated from the service-and-state of a different component. This is called &lt;em&gt;sandboxing&lt;/em&gt; because each service and component instance has its own sandbox to play in.</source>
          <target state="translated">良い例は、コンパニオンコンポーネントインスタンスの状態を保持するサービスです。コンポーネントごとにサービスの個別のインスタンスが必要です。各サービスには、異なるコンポーネントのサービスおよび状態から分離された独自の作業状態があります。これは&lt;em&gt;サンドボックス&lt;/em&gt;と呼ばれます。これは、各サービスとコンポーネントのインスタンスが独自のサンドボックスを再生するためです。</target>
        </trans-unit>
        <trans-unit id="36b9a1d5726b573b8f66a1dbf1ebd460484186d9" translate="yes" xml:space="preserve">
          <source>A good example of usage can be found in the &lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt; documentation. Here is the example component that listens for open and close events:</source>
          <target state="translated">使い方の良い例は、&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitterの&lt;/a&gt;ドキュメントにあります。openイベントとcloseイベントをリッスンするコンポーネントの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="153735462281f1d5fbb0b16f23b1e00c53898bed" translate="yes" xml:space="preserve">
          <source>A good use case for &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; is to inject a service but only if it is available on the current host element. To avoid errors in this situation, combine &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; の適切な使用例は、サービスを注入することですが、現在のホスト要素で利用できる場合に限られます。このような状況でエラーを回避するには、コンバイン &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a02a9374055e70b55c163943bf2dfb0d3025e311" translate="yes" xml:space="preserve">
          <source>A guard's return value controls the router's behavior:</source>
          <target state="translated">ガードの戻り値は、ルータの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="52d231725e5228c1fa44d9a29ca224825dcad7cf" translate="yes" xml:space="preserve">
          <source>A guide page might not have its own sample code. It might refer instead to a sample belonging to another page.</source>
          <target state="translated">ガイドページには、独自のサンプルコードがない場合があります。その代わりに、他のページのサンプルを参照している場合があります。</target>
        </trans-unit>
        <trans-unit id="373d8baae200062d8f1aba679aa04671175e5913" translate="yes" xml:space="preserve">
          <source>A handler for errors thrown by &lt;code&gt;Router.parseUrl(url)&lt;/code&gt; when &lt;code&gt;url&lt;/code&gt; contains an invalid character. The most common case is a &lt;code&gt;%&lt;/code&gt; sign that's not encoded and is not part of a percent encoded sequence.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; に無効な文字が含まれている場合に &lt;code&gt;Router.parseUrl(url)&lt;/code&gt; によってスローされるエラーのハンドラー。最も一般的なケースは、エンコードされておらず、パーセントエンコードされたシーケンスの一部ではない &lt;code&gt;%&lt;/code&gt; 記号です。</target>
        </trans-unit>
        <trans-unit id="3af5186a3f75b3f8ed4e7d06d1b2de4ace891926" translate="yes" xml:space="preserve">
          <source>A handler for navigation errors in this NgModule.</source>
          <target state="translated">この NgModule のナビゲーション・エラーのハンドラ。</target>
        </trans-unit>
        <trans-unit id="d6f5b29fab006347fbe778565dcba19bfc15a39b" translate="yes" xml:space="preserve">
          <source>A handler for receiving observable notifications implements the &lt;code&gt;Observer&lt;/code&gt; interface. It is an object that defines callback methods to handle the three types of notifications that an observable can send:</source>
          <target state="translated">&lt;code&gt;Observer&lt;/code&gt; 可能な通知を受信するためのハンドラーは、Observerインターフェースを実装します。これは、オブザーバブルが送信できる3種類の通知を処理するためのコールバックメソッドを定義するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="bbd1ea818b8b8cc66b97d6133471859a6b2bcbfe" translate="yes" xml:space="preserve">
          <source>A handler function that cleans up developer-defined data associated with a view. Called when the &lt;code&gt;destroy()&lt;/code&gt; method is invoked.</source>
          <target state="translated">ビューに関連付けられた開発者定義のデータをクリーンアップするハンドラー関数。 &lt;code&gt;destroy()&lt;/code&gt; メソッドが呼び出されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="73b133b2f9b5688dd4cf73515a44784b01f0232f" translate="yes" xml:space="preserve">
          <source>A handler function that cleans up developer-defined data associated with this component. Called when the &lt;code&gt;destroy()&lt;/code&gt; method is invoked.</source>
          <target state="translated">このコンポーネントに関連付けられた開発者定義のデータをクリーンアップするハンドラー関数。 &lt;code&gt;destroy()&lt;/code&gt; メソッドが呼び出されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4d0a754b9f1caec214fcfa4dc250cb8e06612308" translate="yes" xml:space="preserve">
          <source>A handler function to invoke when the event occurs.</source>
          <target state="translated">イベント発生時に呼び出すハンドラ関数。</target>
        </trans-unit>
        <trans-unit id="b778327d90fee7ae60c6ad90775c93d550967f48" translate="yes" xml:space="preserve">
          <source>A hashtable of changes represented by &lt;a href=&quot;core/simplechange&quot;&gt;&lt;code&gt;SimpleChange&lt;/code&gt;&lt;/a&gt; objects stored at the declared property name they belong to on a Directive or Component. This is the type passed to the &lt;code&gt;ngOnChanges&lt;/code&gt; hook.</source>
          <target state="translated">ディレクティブまたはコンポーネントで属している宣言されたプロパティ名に格納されている&lt;a href=&quot;core/simplechange&quot;&gt; &lt;code&gt;SimpleChange&lt;/code&gt; &lt;/a&gt;オブジェクトによって表される変更のハッシュテーブル。これは、 &lt;code&gt;ngOnChanges&lt;/code&gt; フックに渡されるタイプです。</target>
        </trans-unit>
        <trans-unit id="d4e8d3892e372c0fecf2681b537eb943a811ea11" translate="yes" xml:space="preserve">
          <source>A hashtable of changes represented by &lt;a href=&quot;simplechange&quot;&gt;&lt;code&gt;SimpleChange&lt;/code&gt;&lt;/a&gt; objects stored at the declared property name they belong to on a Directive or Component. This is the type passed to the &lt;code&gt;ngOnChanges&lt;/code&gt; hook.</source>
          <target state="translated">ディレクティブまたはコンポーネントで属している宣言されたプロパティ名に格納されている&lt;a href=&quot;simplechange&quot;&gt; &lt;code&gt;SimpleChange&lt;/code&gt; &lt;/a&gt;オブジェクトによって表される変更のハッシュテーブル。これは、 &lt;code&gt;ngOnChanges&lt;/code&gt; フックに渡されるタイプです。</target>
        </trans-unit>
        <trans-unit id="23cdcac8cec89bf89402c32764eb9b3e9b275427" translate="yes" xml:space="preserve">
          <source>A helper class that allows an AngularJS component to be used from Angular.</source>
          <target state="translated">AngularJSのコンポーネントをAngularから使えるようにするヘルパークラスです。</target>
        </trans-unit>
        <trans-unit id="6c66371275420dbc702a42de7ed21e787a1dc715" translate="yes" xml:space="preserve">
          <source>A helper function for creating an AngularJS module that can bootstrap an Angular module &quot;on-demand&quot; (possibly lazily) when a &lt;a href=&quot;downgradecomponent&quot;&gt;downgraded component&lt;/a&gt; needs to be instantiated.</source>
          <target state="translated">&lt;a href=&quot;downgradecomponent&quot;&gt;ダウングレードされたコンポーネント&lt;/a&gt;をインスタンス化する必要がある場合に、Angularモジュールを「オンデマンド」で（おそらく遅延して）ブートストラップできるAngularJSモジュールを作成するためのヘルパー関数。</target>
        </trans-unit>
        <trans-unit id="abc286a32a528d1cb231b557b350c31b9029cca3" translate="yes" xml:space="preserve">
          <source>A helper function for creating an AngularJS module that can bootstrap an Angular module &quot;on-demand&quot; (possibly lazily) when a &lt;a href=&quot;static/downgradecomponent&quot;&gt;downgraded component&lt;/a&gt; needs to be instantiated.</source>
          <target state="translated">&lt;a href=&quot;static/downgradecomponent&quot;&gt;ダウングレードされたコンポーネント&lt;/a&gt;をインスタンス化する必要がある場合に、Angularモジュールを「オンデマンド」で（おそらく遅延して）ブートストラップできるAngularJSモジュールを作成するためのヘルパー関数。</target>
        </trans-unit>
        <trans-unit id="6aa3cc78fa143b79bb810e7a95525bcaa700a185" translate="yes" xml:space="preserve">
          <source>A helper function that allows an Angular component to be used from AngularJS.</source>
          <target state="translated">AngularJSからAngularコンポーネントを利用できるようにするヘルパー機能です。</target>
        </trans-unit>
        <trans-unit id="0a3a953b7fe469f6cf7067a78cbb755f0880b3a3" translate="yes" xml:space="preserve">
          <source>A helper function to allow an Angular service to be accessible from AngularJS.</source>
          <target state="translated">AngularJSからAngularサービスにアクセスできるようにするヘルパー関数です。</target>
        </trans-unit>
        <trans-unit id="218c171a7af680e691b28ee2d67549dc7cc57f0a" translate="yes" xml:space="preserve">
          <source>A helper function to use when unit testing Angular services that depend upon upgraded AngularJS services.</source>
          <target state="translated">アップグレードされたAngularJSサービスに依存するAngularサービスをユニットテストする際に使用するヘルパー機能です。</target>
        </trans-unit>
        <trans-unit id="1c438535304fc370a33b0d75b83c50e099239580" translate="yes" xml:space="preserve">
          <source>A helper function to use when unit testing AngularJS services that depend upon downgraded Angular services.</source>
          <target state="translated">ダウングレードされたAngularサービスに依存するAngularJSサービスをユニットテストする際に使用するヘルパー機能です。</target>
        </trans-unit>
        <trans-unit id="4c0681f8b1ca2bf4c01c170aebc0476aee9eab99" translate="yes" xml:space="preserve">
          <source>A helpful or informational point</source>
          <target state="translated">役に立つ、または情報を提供してくれるポイント</target>
        </trans-unit>
        <trans-unit id="5769fbb6a2ba3dee049c9e2a7d142735dad4475e" translate="yes" xml:space="preserve">
          <source>A helpful, informational alert.</source>
          <target state="translated">役に立つ、情報満載のアラート。</target>
        </trans-unit>
        <trans-unit id="dcdb81e86768a1e46d29c2a150ac61709a280f33" translate="yes" xml:space="preserve">
          <source>A hierarchy of injectors at the NgModule and component level can provide different instances of a dependency to their own components and child components.</source>
          <target state="translated">NgModule とコンポーネントレベルでのインジェクタの階層は、依存関係の異なるインスタンスを自身のコンポーネントや子コンポーネントに提供することができます。</target>
        </trans-unit>
        <trans-unit id="4366034841ba9f2bd29774d71abf28ba67bd01db" translate="yes" xml:space="preserve">
          <source>A instance of &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt;, which is a fundamental building block for Angular forms. Together with &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt;, tracks the value, validation, and status of a form input element.</source>
          <target state="translated">Angularフォームの基本的なビルディングブロックである &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; のインスタンス。 &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; とともに、フォーム入力要素の値、検証、およびステータスを追跡します。</target>
        </trans-unit>
        <trans-unit id="ad9d81adf54afeac2ac2db2a4dc5e5612946defc" translate="yes" xml:space="preserve">
          <source>A key advantage of a synchronous &lt;code&gt;Observable&lt;/code&gt; is that you can often turn asynchronous processes into synchronous tests.</source>
          <target state="translated">同期 &lt;code&gt;Observable&lt;/code&gt; の主な利点は、非同期プロセスを同期テストに変換できることが多いことです。</target>
        </trans-unit>
        <trans-unit id="7ffd5c26435651b0e4c6aae79446e9bccf62a4ab" translate="yes" xml:space="preserve">
          <source>A key value pair. Usually used to represent the key value pairs from a Map or Object.</source>
          <target state="translated">キー値のペア。通常、マップまたはオブジェクトのキー値ペアを表現するために使用されます。</target>
        </trans-unit>
        <trans-unit id="35ebaa116f55fb19c13653c5a4874ae1a1f85ab4" translate="yes" xml:space="preserve">
          <source>A key value store that is transferred from the application on the server side to the application on the client side.</source>
          <target state="translated">サーバ側のアプリケーションからクライアント側のアプリケーションに転送されるキー値ストア。</target>
        </trans-unit>
        <trans-unit id="9cf4739e4864a807e655ff6fc1193445efde9673" translate="yes" xml:space="preserve">
          <source>A key, usually a &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">キー、通常は &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&amp;lt;any&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e7e7a6a0768ab93586cd67dd4bff584b1428ac83" translate="yes" xml:space="preserve">
          <source>A key-value style pair associating a CSS property with a value.</source>
          <target state="translated">CSSプロパティと値を関連付けたキー-値のスタイル・ペア。</target>
        </trans-unit>
        <trans-unit id="07649eafadeb3470a7ca6d2df2dcba49d7307f17" translate="yes" xml:space="preserve">
          <source>A keyframes sequence inserted in the middle that causes the button to appear to pulsate irregularly over the course of that same 1-second timeframe</source>
          <target state="translated">中央に挿入されたキーフレームのシーケンスで、同じ1秒の時間枠の中でボタンが不規則に脈動しているように見えるようにします。</target>
        </trans-unit>
        <trans-unit id="ed5250db05f438b41da2ac7f301688eb307df34e" translate="yes" xml:space="preserve">
          <source>A lazy-loaded module has its own injector which is typically a child of the application root injector.</source>
          <target state="translated">レイジーロードされたモジュールは、通常はアプリケーションのルートインジェクタの子である独自のインジェクタを持っています。</target>
        </trans-unit>
        <trans-unit id="7ef9f557aece216b8057965c804209b49b3fdec0" translate="yes" xml:space="preserve">
          <source>A lazy-loaded module has its own injector, typically a child of the app root injector. Lazy-loaded services are scoped to the lazy-loaded module's injector. If a lazy-loaded module also provides the &lt;code&gt;UserService&lt;/code&gt;, any component created within that module's context (such as by router navigation) gets the local instance of the service, not the instance in the root injector. Components in external modules continue to receive the instance provided by their injectors.</source>
          <target state="translated">遅延ロードされたモジュールには独自のインジェクターがあり、通常はアプリルートインジェクターの子です。遅延ロードされたサービスは、遅延ロードされたモジュールのインジェクターにスコープされます。遅延ロードされたモジュールも &lt;code&gt;UserService&lt;/code&gt; を提供する場合、そのモジュールのコンテキスト内で（ルーターのナビゲーションなどによって）作成されたコンポーネントは、ルートインジェクター内のインスタンスではなく、サービスのローカルインスタンスを取得します。外部モジュールのコンポーネントは、インジェクターによって提供されるインスタンスを引き続き受け取ります。</target>
        </trans-unit>
        <trans-unit id="a7e8a8cb53a9e84a9b672a56f58c0fd34b652f66" translate="yes" xml:space="preserve">
          <source>A lazy-loaded routed feature module should not be imported by any module. Doing so would trigger an eager load, defeating the purpose of lazy loading.That means you won&amp;rsquo;t see them mentioned among the &lt;code&gt;AppModule&lt;/code&gt; imports. An eager loaded routed feature module must be imported by another module so that the compiler learns about its components.</source>
          <target state="translated">遅延ロードされたルーティング機能モジュールは、どのモジュールでもインポートしないでください。そうすることで、熱心なロードがトリガーされ、遅延ロードの目的が無効になります。 &lt;code&gt;AppModule&lt;/code&gt; 、AppModuleインポートの中でそれらが言及されることはありません。熱心に読み込まれたルーティング機能モジュールは、コンパイラがそのコンポーネントについて学習できるように、別のモジュールによってインポートされる必要があります。</target>
        </trans-unit>
        <trans-unit id="cf38daa709aad4b9820122674b7d4ef886b08249" translate="yes" xml:space="preserve">
          <source>A library can include &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; that allow it to integrate with the Angular CLI.</source>
          <target state="translated">ライブラリには、Angular CLIとの統合を可能にする&lt;a href=&quot;glossary#schematic&quot;&gt;回路図&lt;/a&gt;を含めることができます。</target>
        </trans-unit>
        <trans-unit id="7d4f03b11868674f6d12d1dbd9a318807b2f605a" translate="yes" xml:space="preserve">
          <source>A library typically includes &lt;em&gt;reusable code&lt;/em&gt; that defines components, services, and other Angular artifacts (pipes, directives, and so on) that you simply import into a project. A library is packaged into an npm package for publishing and sharing, and this package can also include &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; that provide instructions for generating or transforming code directly in your project, in the same way that the CLI creates a generic skeleton app with &lt;code&gt;ng generate component&lt;/code&gt;. A schematic that is combined with a library can, for example, provide the Angular CLI with the information it needs to generate a particular component defined in that library.</source>
          <target state="translated">ライブラリには通常、コンポーネント、サービス、およびプロジェクトにインポートするだけのその他のAngularアーティファクト（パイプ、ディレクティブなど）を定義する&lt;em&gt;再利用可能なコード&lt;/em&gt;が含まれています。ライブラリは、パブリッシュと共有のためにnpmパッケージにパッケージ化されています。このパッケージには、CLIが &lt;code&gt;ng generate component&lt;/code&gt; を使用して汎用スケルトンアプリを作成するのと同じ方法で、プロジェクトでコードを直接生成または変換する手順を提供する&lt;a href=&quot;glossary#schematic&quot;&gt;回路図&lt;/a&gt;を含めることもできます。ライブラリと組み合わせた回路図は、たとえば、そのライブラリで定義された特定のコンポーネントを生成するために必要な情報をAngular CLIに提供できます。</target>
        </trans-unit>
        <trans-unit id="596a67fab33e6776bbb8c47b9b4b1a154dc3ae59" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that invokes a custom change-detection function for a directive, in addition to the check performed by the default change-detector.</source>
          <target state="translated">デフォルトの変更検出器で実行されるチェックに加えて、 ディレクティブのカスタム変更検出機能を呼び出すライフサイクルフック。</target>
        </trans-unit>
        <trans-unit id="f5600987ba08ad888ffa7d2d0414b589157e3ce2" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized a component's view. Define an &lt;code&gt;&lt;a href=&quot;../forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angularがコンポーネントのビューを完全に初期化した後に呼び出されるライフサイクルフック。追加の初期化タスクを処理する &lt;code&gt;&lt;a href=&quot;../forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="74bf55437402dbc91baac4770d54f43c351112cd" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized a component's view. Define an &lt;code&gt;&lt;a href=&quot;forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angularがコンポーネントのビューを完全に初期化した後に呼び出されるライフサイクルフック。追加の初期化タスクを処理する &lt;code&gt;&lt;a href=&quot;forms/ngform#ngAfterViewInit&quot;&gt;ngAfterViewInit()&lt;/a&gt;&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="02037844ae11c0ddc626fc9788d0fec5a64d460c" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized all content of a directive. Define an &lt;code&gt;&lt;a href=&quot;../router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angularがディレクティブのすべてのコンテンツを完全に初期化した後に呼び出されるライフサイクルフック。追加の初期化タスクを処理する &lt;code&gt;&lt;a href=&quot;../router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="c9cbef27669e26b8935599a3d2233bbbf3336e8b" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has fully initialized all content of a directive. Define an &lt;code&gt;&lt;a href=&quot;router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angularがディレクティブのすべてのコンテンツを完全に初期化した後に呼び出されるライフサイクルフック。追加の初期化タスクを処理する &lt;code&gt;&lt;a href=&quot;router/routerlinkactive#ngAfterContentInit&quot;&gt;ngAfterContentInit()&lt;/a&gt;&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="a447eef2fad87a38f1f484e3675661d2c2de2258" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after Angular has initialized all data-bound properties of a directive. Define an &lt;code&gt;ngOnInit()&lt;/code&gt; method to handle any additional initialization tasks.</source>
          <target state="translated">Angularがディレクティブのすべてのデータバインドプロパティを初期化した後に呼び出されるライフサイクルフック。追加の初期化タスクを処理する &lt;code&gt;ngOnInit()&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="b8e1d5b9cc3d1757bb5eacdaa14e03c4921fb9c9" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after the default change detector has completed checking a component's view for changes.</source>
          <target state="translated">デフォルトの変更検出器がコンポーネントのビューの変更のチェックを完了した後に呼び出されるライフサイクルフック。</target>
        </trans-unit>
        <trans-unit id="d73ca980a113b1ee2561c99c3783810826f94701" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called after the default change detector has completed checking all content of a directive.</source>
          <target state="translated">デフォルトの変更検出器がディレクティブのすべての内容のチェックを完了した後に呼ばれるライフサイクルフック。</target>
        </trans-unit>
        <trans-unit id="ce797f9362a30ca61eb81eee1f97135dbd0c504f" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called when a directive, pipe, or service is destroyed. Use for any custom cleanup that needs to occur when the instance is destroyed.</source>
          <target state="translated">ディレクティブ、パイプ、サービスが破棄されたときに呼び出されるライフサイクルフック。インスタンスが破棄されたときに必要なカスタムクリーンアップに使用します。</target>
        </trans-unit>
        <trans-unit id="0261386256f4b1b6dc2c7184bd9e29445ffda542" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that is called when any data-bound property of a directive changes. Define an &lt;code&gt;ngOnChanges()&lt;/code&gt; method to handle the changes.</source>
          <target state="translated">ディレクティブのデータバインドプロパティが変更されたときに呼び出されるライフサイクルフック。変更を処理する &lt;code&gt;ngOnChanges()&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="96881da70e829f0f5ebaad0e2ee7ba44657e85de" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that provides additional developer-defined cleanup functionality for the component.</source>
          <target state="translated">コンポーネントに開発者定義の追加クリーンアップ機能を提供するライフサイクルフック。</target>
        </trans-unit>
        <trans-unit id="36b167505f89a514144de5bba64e918ad3c3801a" translate="yes" xml:space="preserve">
          <source>A lifecycle hook that provides additional developer-defined cleanup functionality for views.</source>
          <target state="translated">開発者が定義したビューのクリーンアップ機能を追加で提供するライフサイクルフックです。</target>
        </trans-unit>
        <trans-unit id="b379a7fb75af4991c5a53bf872be9257ffe74642" translate="yes" xml:space="preserve">
          <source>A lifecycle method called before the directive's instance is destroyed. For internal use only.</source>
          <target state="translated">ディレクティブのインスタンスが破棄される前に呼ばれるライフサイクルメソッド。内部でのみ使用します。</target>
        </trans-unit>
        <trans-unit id="ab00640507fd1fc5d13ec5591a77548bad5848e6" translate="yes" xml:space="preserve">
          <source>A lifecycle method called when the directive is initialized. For internal use only.</source>
          <target state="translated">ディレクティブが初期化されたときに呼び出されるライフサイクルメソッド。内部でのみ使用します。</target>
        </trans-unit>
        <trans-unit id="e6a4a685929d3df5e89c8ac2c6f5c345f6d37471" translate="yes" xml:space="preserve">
          <source>A lifecycle method called when the directive's inputs are initialized. For internal use only.</source>
          <target state="translated">ディレクティブの入力が初期化されたときに呼び出されるライフサイクルメソッド。内部でのみ使用します。</target>
        </trans-unit>
        <trans-unit id="f07bd6459b72dc9a3fa7e047a318fc584cf2c0eb" translate="yes" xml:space="preserve">
          <source>A lifecycle method called when the directive's inputs change. For internal use only.</source>
          <target state="translated">ディレクティブの入力が変更されたときに呼び出されるライフサイクルメソッド。内部でのみ使用します。</target>
        </trans-unit>
        <trans-unit id="d441fd8385d512e636f45c60eeda7ddc27d1cf23" translate="yes" xml:space="preserve">
          <source>A link parameters array holds the following ingredients for router navigation:</source>
          <target state="translated">リンクパラメータ配列は、ルータのナビゲーションのための以下の要素を保持しています。</target>
        </trans-unit>
        <trans-unit id="58c6440df7d73cd9db81817568cadd31dfc44944" translate="yes" xml:space="preserve">
          <source>A linter for Angular apps whose rules conform to the Angular &lt;a href=&quot;styleguide&quot;&gt;style guide&lt;/a&gt;.</source>
          <target state="translated">ルールがAngular &lt;a href=&quot;styleguide&quot;&gt;スタイルガイドに&lt;/a&gt;準拠しているAngularアプリのリンター。</target>
        </trans-unit>
        <trans-unit id="25576a240a63ef9260f06f43a3a241146b219362" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;../core/provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt;s. To use the router in a Worker enabled application you must include these providers when setting up the render thread.</source>
          <target state="translated">&lt;a href=&quot;../core/provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; &lt;/a&gt;のリスト。ワーカー対応アプリケーションでルーターを使用するには、レンダリングスレッドを設定するときにこれらのプロバイダーを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="dbd88ed75debb2734738dacd6286918848aec59b" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;core/provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt;s. To use the router in a Worker enabled application you must include these providers when setting up the render thread.</source>
          <target state="translated">&lt;a href=&quot;core/provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; &lt;/a&gt;のリスト。ワーカー対応アプリケーションでルーターを使用するには、レンダリングスレッドを設定するときにこれらのプロバイダーを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="461fc971b126f7f03af8576b0fa4ea318da95075" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;declarable&lt;/a&gt; classes, (&lt;em&gt;components&lt;/em&gt;, &lt;em&gt;directives&lt;/em&gt;, and &lt;em&gt;pipes&lt;/em&gt;) that &lt;em&gt;belong to this module&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;このモジュールに属する&lt;/em&gt;&lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;宣言可能な&lt;/a&gt;クラス（&lt;em&gt;コンポーネント&lt;/em&gt;、&lt;em&gt;ディレクティブ&lt;/em&gt;、&lt;em&gt;パイプ&lt;/em&gt;）のリスト。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="437997829946a8147d613a76d425e66a9f9f384d" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;token&lt;/code&gt;s to be resolved by the injector.</source>
          <target state="translated">インジェクターによって解決される &lt;code&gt;token&lt;/code&gt; のリスト。</target>
        </trans-unit>
        <trans-unit id="6126755f8fa0690fa2b6af2c29ffba01f3417269" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;token&lt;/code&gt;s to be resolved by the injector. The list of values is then used as arguments to the &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">インジェクターによって解決される &lt;code&gt;token&lt;/code&gt; のリスト。値のリストは、 &lt;code&gt;&lt;a href=&quot;factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; 関数の引数として使用されます。</target>
        </trans-unit>
        <trans-unit id="9d38f61745044a029727c6551e2df969c26ca209" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;token&lt;/code&gt;s to be resolved by the injector. The list of values is then used as arguments to the &lt;code&gt;useClass&lt;/code&gt; constructor.</source>
          <target state="translated">インジェクターによって解決される &lt;code&gt;token&lt;/code&gt; のリスト。値のリストは、 &lt;code&gt;useClass&lt;/code&gt; コンストラクターの引数として使用されます。</target>
        </trans-unit>
        <trans-unit id="daa742971c3327dc4f09d733597037dc4c47dd74" translate="yes" xml:space="preserve">
          <source>A list of URL patterns. URLs that match these patterns are cached according to this data group's policy. Only non-mutating requests (GET and HEAD) are cached.</source>
          <target state="translated">URL パターンのリスト。これらのパターンに一致する URL は、このデータグループのポリシーに従ってキャッシュされます。変形しないリクエスト (GET と HEAD)だけがキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="04d917307865bab1f1de2116c773bcb26a629379" translate="yes" xml:space="preserve">
          <source>A list of common rules for frontend development is documented in the README at &lt;a href=&quot;https://github.com/bazelbuild/rules_nodejs/&quot;&gt;https://github.com/bazelbuild/rules_nodejs/&lt;/a&gt;.</source>
          <target state="translated">フロントエンド開発の一般的なルールのリストは、&lt;a href=&quot;https://github.com/bazelbuild/rules_nodejs/&quot;&gt;https：//github.com/bazelbuild/rules_nodejs/&lt;/a&gt;のREADMEに記載されています。</target>
        </trans-unit>
        <trans-unit id="19ddc56400717fc21df5b63436fc1e8e5b32cd4d" translate="yes" xml:space="preserve">
          <source>A list of components that are automatically bootstrapped.</source>
          <target state="translated">自動的にブートストラップされるコンポーネントのリスト。</target>
        </trans-unit>
        <trans-unit id="171d42258c74d022d702af37e54b0e6f7307feba" translate="yes" xml:space="preserve">
          <source>A list of components that can be dynamically loaded into the view.</source>
          <target state="translated">ビューに動的にロードできるコンポーネントのリスト。</target>
        </trans-unit>
        <trans-unit id="7675d0663f37d145a8dac0c39cde405a75fbfa15" translate="yes" xml:space="preserve">
          <source>A list of control names that designates how to move from the current control to the control that should be queried for errors.</source>
          <target state="translated">現在のコントロールからエラーのために照会すべきコントロールへの移動方法を指定するコントロール名のリスト。</target>
        </trans-unit>
        <trans-unit id="037b00399bc82d29e1eb7b74fa9c1904a97de8a9" translate="yes" xml:space="preserve">
          <source>A list of declarations&amp;mdash;&lt;em&gt;component&lt;/em&gt;, &lt;em&gt;directive&lt;/em&gt;, and &lt;em&gt;pipe&lt;/em&gt; classes&amp;mdash;that an importing module can use.</source>
          <target state="translated">インポートモジュールが使用できる宣言（&lt;em&gt;コンポーネント&lt;/em&gt;、&lt;em&gt;ディレクティブ&lt;/em&gt;、および&lt;em&gt;パイプ&lt;/em&gt;クラス）のリスト。</target>
        </trans-unit>
        <trans-unit id="040d4431be42e331375255c125a4498782b8e650" translate="yes" xml:space="preserve">
          <source>A list of dependency-injection providers.</source>
          <target state="translated">依存性注入プロバイダのリスト。</target>
        </trans-unit>
        <trans-unit id="dba7bfe8eac022733a1026f8be32e943c473cfa2" translate="yes" xml:space="preserve">
          <source>A list of modules which should be folded into this module. Folded means it is as if all the imported NgModule's exported properties were declared here.</source>
          <target state="translated">このモジュールに折りたたまれるべきモジュールのリスト。Folded は、インポートされた NgModule のエクスポートされたプロパティがすべてここで宣言されているかのようにすることを意味します。</target>
        </trans-unit>
        <trans-unit id="75001e195c1445f429399b1de5c1f73f540ae88c" translate="yes" xml:space="preserve">
          <source>A little more setup triggers the initial data binding and gets references to the navigation links:</source>
          <target state="translated">もう少し設定すると、最初のデータバインディングがトリガーされ、ナビゲーションリンクへの参照が得られます。</target>
        </trans-unit>
        <trans-unit id="a1b8ef8f70baee99448943fc05106db9e9b9dd37" translate="yes" xml:space="preserve">
          <source>A loader function that can load the routed module asynchronously.</source>
          <target state="translated">ルーテッドモジュールを非同期にロードできるローダー関数。</target>
        </trans-unit>
        <trans-unit id="955b1d9d2579edfd071f8ec5104d74a47b0f744b" translate="yes" xml:space="preserve">
          <source>A locale code for the locale format rules to use.</source>
          <target state="translated">使用するロケール形式の規則のロケールコード。</target>
        </trans-unit>
        <trans-unit id="6a302a7e5064c906a79afc49ad5e1e7cc1a4799f" translate="yes" xml:space="preserve">
          <source>A locale code for the locale format rules to use. When not supplied, uses the value of &lt;code&gt;&lt;a href=&quot;../core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt;, which is &lt;code&gt;en-US&lt;/code&gt; by default. See &lt;a href=&quot;../../guide/i18n#setting-up-the-locale-of-your-app&quot;&gt;Setting your app locale&lt;/a&gt;.</source>
          <target state="translated">使用するロケール形式ルールのロケールコード。指定しない場合は、デフォルトで &lt;code&gt;en-US&lt;/code&gt; である &lt;code&gt;&lt;a href=&quot;../core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; の値が使用されます。&lt;a href=&quot;../../guide/i18n#setting-up-the-locale-of-your-app&quot;&gt;アプリのロケールの設定を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="d6b80afc948d39c1beaa5b663a213d0d655e25c0" translate="yes" xml:space="preserve">
          <source>A locale code, such as &lt;code&gt;fr-FR&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fr-FR&lt;/code&gt; などのロケールコード。</target>
        </trans-unit>
        <trans-unit id="55f13cbcad722a8c24df8b8cb4a9cf2ae466e5a8" translate="yes" xml:space="preserve">
          <source>A locale is an identifier (id) that refers to a set of user preferences that tend to be shared within a region of the world, such as country. This document refers to a locale identifier as a &quot;locale&quot; or &quot;locale id&quot;.</source>
          <target state="translated">ロケールとは、国などの世界のある地域で共有される傾向のあるユーザの嗜好を表す識別子(id)のことである。この文書では、ロケール識別子を「ロケール」または「ロケールID」と呼ぶ。</target>
        </trans-unit>
        <trans-unit id="8ead34f42f629cf596c56bee9a9dd423fd7244a6" translate="yes" xml:space="preserve">
          <source>A lookup token associated with a dependency &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;, for use with the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; system.</source>
          <target state="translated">&lt;a href=&quot;glossary#di&quot;&gt;依存関係注入&lt;/a&gt;システムで使用するための、依存関係&lt;a href=&quot;glossary#provider&quot;&gt;プロバイダーに&lt;/a&gt;関連付けられたルックアップトークン。</target>
        </trans-unit>
        <trans-unit id="cae2a9afdd89956ff08fa75198655ba1a46444dc" translate="yes" xml:space="preserve">
          <source>A major release every 6 months</source>
          <target state="translated">6ヶ月ごとにメジャーリリース</target>
        </trans-unit>
        <trans-unit id="06d3323afdb781bed9079cfcfdee73be399d2d9a" translate="yes" xml:space="preserve">
          <source>A map of DI tokens used to look up data resolvers. See &lt;code&gt;&lt;a href=&quot;resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">データリゾルバーの検索に使用されるDIトークンのマップ。 &lt;code&gt;&lt;a href=&quot;resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="c31bf3081c3f1b6360722ce5cdf2ba3f5dd1a977" translate="yes" xml:space="preserve">
          <source>A map that provides access to the required and optional parameters specific to a route. The map supports retrieving a single value with &lt;code&gt;get()&lt;/code&gt; or multiple values with &lt;code&gt;getAll()&lt;/code&gt;.</source>
          <target state="translated">ルートに固有の必須およびオプションのパラメーターへのアクセスを提供するマップ。マップは、 &lt;code&gt;get()&lt;/code&gt; を使用して単一の値を取得するか、 &lt;code&gt;getAll()&lt;/code&gt; を使用して複数の値を取得することをサポートします。</target>
        </trans-unit>
        <trans-unit id="e95f51729664a5488e099047c9717e5b096d40fe" translate="yes" xml:space="preserve">
          <source>A maximum total number of results to return from the query. If negative, results are limited from the end of the query list towards the beginning. By default, results are not limited.</source>
          <target state="translated">クエリから返す結果の最大合計数。負の値を指定した場合、結果はクエリリストの末尾から先頭に向かって制限されます。デフォルトでは、結果は制限されません。</target>
        </trans-unit>
        <trans-unit id="f0c63958f79d54f2fc16dbcbfe14c83a9f071add" translate="yes" xml:space="preserve">
          <source>A metadata override object can either add-and-remove elements in metadata properties or completely reset those properties. This example resets the component's &lt;code&gt;providers&lt;/code&gt; metadata.</source>
          <target state="translated">メタデータオーバーライドオブジェクトは、メタデータプロパティの要素を追加および削除するか、それらのプロパティを完全にリセットできます。この例では、コンポーネントの &lt;code&gt;providers&lt;/code&gt; メタデータをリセットします。</target>
        </trans-unit>
        <trans-unit id="69f0f2d5a2aa3accf83abdff396c8bd191b0d509" translate="yes" xml:space="preserve">
          <source>A microsyntax is translated to the normal binding syntax as follows:</source>
          <target state="translated">マイクロシンタックスは、以下のように通常のバインディング構文に変換されます。</target>
        </trans-unit>
        <trans-unit id="7130a4e571cb15db8a5b2e26dc8e7e32f1ac10b6" translate="yes" xml:space="preserve">
          <source>A mock implementation of &lt;a href=&quot;../locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; that allows tests to fire simulated location events.</source>
          <target state="translated">テストがシミュレートされた位置イベントを起動できるようにする&lt;a href=&quot;../locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; の&lt;/a&gt;モック実装。</target>
        </trans-unit>
        <trans-unit id="95d1322a42a6673477094ecc0b65d1e99ae45df8" translate="yes" xml:space="preserve">
          <source>A mock implementation of &lt;a href=&quot;locationstrategy&quot;&gt;&lt;code&gt;LocationStrategy&lt;/code&gt;&lt;/a&gt; that allows tests to fire simulated location events.</source>
          <target state="translated">テストがシミュレートされた位置イベントを起動できるようにする&lt;a href=&quot;locationstrategy&quot;&gt; &lt;code&gt;LocationStrategy&lt;/code&gt; の&lt;/a&gt;モック実装。</target>
        </trans-unit>
        <trans-unit id="7d0a0962e5c5198a576fa37cb7c736b87d6d1d71" translate="yes" xml:space="preserve">
          <source>A mock requests that was received and is ready to be answered.</source>
          <target state="translated">依頼を受けてすぐに答えられるようになった模擬依頼。</target>
        </trans-unit>
        <trans-unit id="f337bc6018903ffa46e9a382b840059a040e5962" translate="yes" xml:space="preserve">
          <source>A model can be as simple as a &quot;property bag&quot; that holds facts about a thing of application importance. That describes well the &lt;code&gt;Hero&lt;/code&gt; class with its three required fields (&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;power&lt;/code&gt;) and one optional field (&lt;code&gt;alterEgo&lt;/code&gt;).</source>
          <target state="translated">モデルは、アプリケーションの重要事項に関する事実を保持する「プロパティバッグ」のように単純なものにすることができます。これは、3つの必須フィールド（ &lt;code&gt;id&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;power&lt;/code&gt; ）と1つのオプションフィールド（ &lt;code&gt;alterEgo&lt;/code&gt; ）を持つ &lt;code&gt;Hero&lt;/code&gt; クラスをよく表しています。</target>
        </trans-unit>
        <trans-unit id="ad0764647ed46ed5061fb6310ba8f8b5049da7f6" translate="yes" xml:space="preserve">
          <source>A module can list another module among its &lt;code&gt;exports&lt;/code&gt;, in which case all of that module's public components, directives, and pipes are exported.</source>
          <target state="translated">モジュールは、その &lt;code&gt;exports&lt;/code&gt; 中に別のモジュールをリストできます。その場合、そのモジュールのすべてのパブリックコンポーネント、ディレクティブ、およびパイプがエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="5f1c5c1da122f4fa01eb3c1494bcf50d1de1c0fe" translate="yes" xml:space="preserve">
          <source>A module that contains the deprecated i18n pipes.</source>
          <target state="translated">非推奨の i18n パイプを含むモジュール。</target>
        </trans-unit>
        <trans-unit id="32c9bd50d59c8005b8e4f899c9f2be6b8662aebc" translate="yes" xml:space="preserve">
          <source>A more complete example with additional options:</source>
          <target state="translated">オプションを追加した、より完全な例です。</target>
        </trans-unit>
        <trans-unit id="8d6dc22c64e24056f4ca8f4235696f04db5187ce" translate="yes" xml:space="preserve">
          <source>A multi-project workspace is suitable for an enterprise that uses a single repository and global configuration for all Angular projects (the &quot;monorepo&quot; model). A multi-project workspace also supports library development.</source>
          <target state="translated">マルチプロジェクトワークスペースは、すべてのAngularプロジェクトに対して単一のリポジトリとグローバルな設定を使用している企業に適しています(「モノレポ」モデル)。マルチプロジェクトワークスペースはライブラリ開発もサポートします。</target>
        </trans-unit>
        <trans-unit id="578c0bb115fcfcf57aae92bdf19077e287b885a7" translate="yes" xml:space="preserve">
          <source>A multi-provider token that represents the array of registered &lt;code&gt;&lt;a href=&quot;http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">登録された &lt;code&gt;&lt;a href=&quot;http/httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; オブジェクトの配列を表すマルチプロバイダートークン。</target>
        </trans-unit>
        <trans-unit id="3429f86b90f9abf229de77143f5159ec794aea18" translate="yes" xml:space="preserve">
          <source>A multi-provider token that represents the array of registered &lt;code&gt;&lt;a href=&quot;httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">登録された &lt;code&gt;&lt;a href=&quot;httpinterceptor&quot;&gt;HttpInterceptor&lt;/a&gt;&lt;/code&gt; オブジェクトの配列を表すマルチプロバイダートークン。</target>
        </trans-unit>
        <trans-unit id="7906e423263f41a5db0c9d24e8bd036737a8d5a4" translate="yes" xml:space="preserve">
          <source>A multicasting observable that emits an event every time the validation &lt;code&gt;status&lt;/code&gt; of the control recalculates.</source>
          <target state="translated">コントロールの検証 &lt;code&gt;status&lt;/code&gt; が再計算されるたびにイベントを発行するマルチキャストオブザーバブル。</target>
        </trans-unit>
        <trans-unit id="b781b78f56add6ca4e7aa83cd854c5af96b640a9" translate="yes" xml:space="preserve">
          <source>A multicasting observable that emits an event every time the value of the control changes, in the UI or programmatically.</source>
          <target state="translated">コントロールの値が変更されるたびにイベントを発生させるマルチキャスト観測可能なオブザーバです。</target>
        </trans-unit>
        <trans-unit id="c5be72e441e1cbf5309a798f7996e0e22dfeca5c" translate="yes" xml:space="preserve">
          <source>A name or path that uniquely identifies this NgModule in &lt;code&gt;&lt;a href=&quot;getmodulefactory&quot;&gt;getModuleFactory&lt;/a&gt;&lt;/code&gt;. If left &lt;code&gt;undefined&lt;/code&gt;, the NgModule is not registered with &lt;code&gt;&lt;a href=&quot;getmodulefactory&quot;&gt;getModuleFactory&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一意このNgModuleを識別する名前またはパス &lt;code&gt;&lt;a href=&quot;getmodulefactory&quot;&gt;getModuleFactory&lt;/a&gt;&lt;/code&gt; 。左の場合は &lt;code&gt;undefined&lt;/code&gt; 、NgModuleはに登録されていません &lt;code&gt;&lt;a href=&quot;getmodulefactory&quot;&gt;getModuleFactory&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b0c4e5ba7f7e92e47ab468585168733f19b2c1d2" translate="yes" xml:space="preserve">
          <source>A named build target, as specified in the &quot;configurations&quot; section of angular.json. Each named target is accompanied by a configuration of option defaults for that target. Setting this explicitly overrides the &quot;--prod&quot; flag</source>
          <target state="translated">angular.jsonの &quot;configurations &quot;セクションで指定された名前付きビルドターゲット。それぞれの指定されたターゲットには、そのターゲットのデフォルトオプションの設定が付随しています。これを明示的に設定することで、&quot;--prod&quot; フラグを上書きします。</target>
        </trans-unit>
        <trans-unit id="35e09e8f6a0282a4b54c82b2def01ca54b74004d" translate="yes" xml:space="preserve">
          <source>A named builder configuration, defined in the &quot;configurations&quot; section of angular.json. The builder uses the named configuration to run the given target.</source>
          <target state="translated">angular.jsonの &quot;configurations &quot;セクションで定義された、名前付きビルダーの設定。ビルダーは指定されたターゲットを実行するために名前付きコンフィギュレーションを使います。</target>
        </trans-unit>
        <trans-unit id="b239fcc9e5b91abd9680f6c47f5d1819707bebf3" translate="yes" xml:space="preserve">
          <source>A navigation node has the following properties:</source>
          <target state="translated">ナビゲーション・ノードは以下のプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="52a38a1d63f6d03db1e08268e77081ddcedf5a17" translate="yes" xml:space="preserve">
          <source>A nested expression is similar to the previous examples. As in the previous example, there are two translation units. The first one contains the text outside of the nested expression:</source>
          <target state="translated">入れ子式は前の例と同様です。前の例と同様に、2つの翻訳単位があります。最初のものは、入れ子になった式の外側のテキストを含みます。</target>
        </trans-unit>
        <trans-unit id="4f9bd18390c8ea037a93c12b58381b661d326629" translate="yes" xml:space="preserve">
          <source>A new injector has no providers. Angular initializes the injectors it creates with a set of preferred providers. You have to configure providers for your own app-specific dependencies.</source>
          <target state="translated">新しいインジェクターにはプロバイダがありません。Angularは作成したインジェクターを優先的なプロバイダのセットで初期化します。独自のアプリ固有の依存関係のためにプロバイダを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="9920b70991fc5f7bbd0d91bb6a57f0531af7194a" translate="yes" xml:space="preserve">
          <source>A new workspace, with a root folder named &lt;code&gt;angular-tour-of-heroes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;angular-tour-of-heroes&lt;/code&gt; という名前のルートフォルダーを持つ新しいワークスペース。</target>
        </trans-unit>
        <trans-unit id="b7367aaef7bddc8b8c8dc6e00b934abdd2f64d3b" translate="yes" xml:space="preserve">
          <source>A newly generated app contains the source files for a root module, with a root component and template. Each app has a &lt;code&gt;src&lt;/code&gt; folder that contains the logic, data, and assets.</source>
          <target state="translated">新しく生成されたアプリには、ルートコンポーネントとテンプレートを含む、ルートモジュールのソースファイルが含まれています。各アプリには、ロジック、データ、アセットを含む &lt;code&gt;src&lt;/code&gt; フォルダーがあります。</target>
        </trans-unit>
        <trans-unit id="d846c1f199b2800f149643f1562a8855aa905f45" translate="yes" xml:space="preserve">
          <source>A nice aspect of this approach is that the component gets clean data values from the view. It no longer requires knowledge of the &lt;code&gt;$event&lt;/code&gt; and its structure.</source>
          <target state="translated">このアプローチの優れた点は、コンポーネントがビューからクリーンなデータ値を取得することです。 &lt;code&gt;$event&lt;/code&gt; とその構造の知識は必要ありません。</target>
        </trans-unit>
        <trans-unit id="f7bea64455863cb7a47256fbe5d769606742d500" translate="yes" xml:space="preserve">
          <source>A non-atomic deployment could result in the Angular service worker having visibility of partially updated content.</source>
          <target state="translated">アトミックではないデプロイでは、Angularサービスワーカーに部分的に更新されたコンテンツが表示される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5038f56560ea874f8af8e1f15e2b79f948a7daf0" translate="yes" xml:space="preserve">
          <source>A normal Angular application executes in the &lt;em&gt;browser&lt;/em&gt;, rendering pages in the DOM in response to user actions. Angular Universal executes on the &lt;em&gt;server&lt;/em&gt;, generating &lt;em&gt;static&lt;/em&gt; application pages that later get bootstrapped on the client. This means that the application generally renders more quickly, giving users a chance to view the application layout before it becomes fully interactive.</source>
          <target state="translated">通常のAngularアプリケーションは&lt;em&gt;ブラウザ&lt;/em&gt;で実行され、ユーザーの操作に応じてDOMにページをレンダリングします。Angular Universalは&lt;em&gt;サーバー&lt;/em&gt;上で実行され、後でクライアント上でブートストラップされる&lt;em&gt;静的&lt;/em&gt;アプリケーションページを生成します。つまり、アプリケーションは通常より速くレンダリングされ、ユーザーが完全にインタラクティブになる前にアプリケーションのレイアウトを表示する機会が与えられます。</target>
        </trans-unit>
        <trans-unit id="6f4fb46f2d63806c4ee58223f3276c1ec49fc7f1" translate="yes" xml:space="preserve">
          <source>A null player that must be imported to allow disabling of animations.</source>
          <target state="translated">アニメーションを無効にするためにインポートしなければならないNullプレーヤー。</target>
        </trans-unit>
        <trans-unit id="89554a3efabf9fb390af7746887f03e36dff835a" translate="yes" xml:space="preserve">
          <source>A number of Angular CLI commands run a complex process on your code, such as linting, building, or testing. The commands use an internal tool called Architect to run &lt;em&gt;CLI builders&lt;/em&gt;, which apply another tool to accomplish the desired task.</source>
          <target state="translated">いくつかのAngular CLIコマンドは、コードの複雑なプロセス（リント、ビルド、テストなど）を実行します。コマンドはArchitectと呼ばれる内部ツールを使用して&lt;em&gt;CLIビルダー&lt;/em&gt;を実行し、&lt;em&gt;CLIビルダー&lt;/em&gt;は別のツールを適用して目的のタスクを実行します。</target>
        </trans-unit>
        <trans-unit id="49d58886ff799d00cb5c13d4a1bb03aa1f2d809d" translate="yes" xml:space="preserve">
          <source>A object of key/value pairs for the set of changed inputs.</source>
          <target state="translated">変更された入力のセットのキー値ペアのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4750c9e78af3bfad341001fe2ba5681170c6a43c" translate="yes" xml:space="preserve">
          <source>A page's platform is initialized implicitly when a platform is created via a platform factory (e.g. &lt;a href=&quot;../platform-browser/platformbrowser&quot;&gt;&lt;code&gt;platformBrowser&lt;/code&gt;&lt;/a&gt;), or explicitly by calling the &lt;a href=&quot;createplatform&quot;&gt;&lt;code&gt;createPlatform&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">ページのプラットフォームは、プラットフォームファクトリ（例：&lt;a href=&quot;../platform-browser/platformbrowser&quot;&gt; &lt;code&gt;platformBrowser&lt;/code&gt; &lt;/a&gt;）を介してプラットフォームが作成されるときに暗黙的に、または&lt;a href=&quot;createplatform&quot;&gt; &lt;code&gt;createPlatform&lt;/code&gt; &lt;/a&gt;関数を呼び出して明示的に初期化されます。</target>
        </trans-unit>
        <trans-unit id="651ec72899d5c2c6d5d6ec570ddbc877591ea92b" translate="yes" xml:space="preserve">
          <source>A parent animation can use the &lt;a href=&quot;../api/animations/query&quot;&gt;&lt;code&gt;query()&lt;/code&gt;&lt;/a&gt; function to collect inner elements located in disabled areas of the HTML template. Those elements can still animate.</source>
          <target state="translated">親アニメーションは&lt;a href=&quot;../api/animations/query&quot;&gt; &lt;code&gt;query()&lt;/code&gt; &lt;/a&gt;関数を使用して、HTMLテンプレートの無効な領域にある内部要素を収集できます。これらの要素は引き続きアニメーション化できます。</target>
        </trans-unit>
        <trans-unit id="1bf56c14e3173595a144a7896d73be753549c9f6" translate="yes" xml:space="preserve">
          <source>A parent component and its children share a service whose interface enables bi-directional communication &lt;em&gt;within the family&lt;/em&gt;.</source>
          <target state="translated">親コンポーネントとその子&lt;em&gt;は、家族内で&lt;/em&gt;双方向通信を可能にするインターフェースを持つサービスを共有します。</target>
        </trans-unit>
        <trans-unit id="e39a968c28d7edf3e3a84ccc968736ab545b1b85" translate="yes" xml:space="preserve">
          <source>A parent component cannot use data binding to read child properties or invoke child methods. You can do both by creating a template reference variable for the child element and then reference that variable &lt;em&gt;within the parent template&lt;/em&gt; as seen in the following example.</source>
          <target state="translated">親コンポーネントは、データバインディングを使用して子プロパティを読み取ったり、子メソッドを呼び出したりすることはできません。次の例に示すように、子要素のテンプレート参照変数を作成&lt;em&gt;し、親テンプレート内で&lt;/em&gt;その変数を参照することで、両方を実行できます。</target>
        </trans-unit>
        <trans-unit id="466ac96618e709a5938e7d500890ad9390c558cc" translate="yes" xml:space="preserve">
          <source>A partial HTTP response which only includes the status and header data, but no response body.</source>
          <target state="translated">ステータスとヘッダデータのみを含み、レスポンスボディを含まない部分的な HTTP レスポンス。</target>
        </trans-unit>
        <trans-unit id="8d17248c21e747b7c3ba8050b3294178aab908f1" translate="yes" xml:space="preserve">
          <source>A patch release almost every week</source>
          <target state="translated">ほぼ毎週パッチリリース</target>
        </trans-unit>
        <trans-unit id="58efc28f87e76a25d4064ff09cf311712d722706" translate="yes" xml:space="preserve">
          <source>A percentage of the total animate time at which the style is to be applied.</source>
          <target state="translated">スタイルが適用されるアニメーションの総時間のパーセンテージ。</target>
        </trans-unit>
        <trans-unit id="b708ec4a390f4e8a4776d5b2040d86b353d2a768" translate="yes" xml:space="preserve">
          <source>A period-delimited list of control names in one string, e.g. &lt;code&gt;'address.street'&lt;/code&gt;</source>
          <target state="translated">1つの文字列内のコントロール名のピリオド区切りリスト（例： &lt;code&gt;'address.street'&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="18518b3ff9da4f8e4217369e6b3f79391cbd0b85" translate="yes" xml:space="preserve">
          <source>A pipe can accept any number of optional parameters to fine-tune its output. To add parameters to a pipe, follow the pipe name with a colon ( : ) and then the parameter value (such as &lt;code&gt;currency:'EUR'&lt;/code&gt;). If the pipe accepts multiple parameters, separate the values with colons (such as &lt;code&gt;slice:1:5&lt;/code&gt;)</source>
          <target state="translated">パイプは、その出力を微調整するために、任意の数のオプションパラメータを受け入れることができます。パイプにパラメーターを追加するには、パイプ名の後にコロン（：）を付け、その後にパラメーター値（ &lt;code&gt;currency:'EUR'&lt;/code&gt; など）を付けます。パイプが複数のパラメーターを受け入れる場合は、値をコロンで区切ります（ &lt;code&gt;slice:1:5&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="bedbc779498bd591c9a3dec452e89700422b56ad" translate="yes" xml:space="preserve">
          <source>A pipe class has one method, &lt;code&gt;transform&lt;/code&gt;, that manipulates the input value into a transformed output value. The &lt;code&gt;transform&lt;/code&gt; implementation rarely interacts with the DOM. Most pipes have no dependence on Angular other than the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; metadata and an interface.</source>
          <target state="translated">パイプクラスは一つの方法有する &lt;code&gt;transform&lt;/code&gt; 変換された出力値に入力値を操作します。 &lt;code&gt;transform&lt;/code&gt; の実装はめったにDOMと相互作用しません。 &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; メタデータとインターフェイス以外のほとんどのパイプは、Angularに依存していません。</target>
        </trans-unit>
        <trans-unit id="e4ea89ce13888d2b06e69e1b0a34b1371b619c98" translate="yes" xml:space="preserve">
          <source>A pipe class must implement the &lt;code&gt;&lt;a href=&quot;pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; interface. For example, if the name is &quot;myPipe&quot;, use a template binding expression such as the following:</source>
          <target state="translated">パイプクラスは、 &lt;code&gt;&lt;a href=&quot;pipetransform&quot;&gt;PipeTransform&lt;/a&gt;&lt;/code&gt; インターフェイスを実装する必要があります。たとえば、名前が「myPipe」の場合、次のようなテンプレートバインディング式を使用します。</target>
        </trans-unit>
        <trans-unit id="3904967e02839e6509820f8ec95a0def7d2d6acd" translate="yes" xml:space="preserve">
          <source>A pipe is a class decorated with pipe metadata.</source>
          <target state="translated">パイプは、パイプのメタデータで装飾されたクラスです。</target>
        </trans-unit>
        <trans-unit id="40549d115c085009897e81004613ce5f7153eebd" translate="yes" xml:space="preserve">
          <source>A pipe must belong to an NgModule in order for it to be available to a template. To make it a member of an NgModule, list it in the &lt;code&gt;declarations&lt;/code&gt; field of the &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="translated">パイプは、テンプレートで使用できるように、NgModuleに属している必要があります。NgModuleのメンバーにするには、 &lt;code&gt;&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; メタデータの &lt;code&gt;declarations&lt;/code&gt; フィールドにリストします。</target>
        </trans-unit>
        <trans-unit id="0f6b8b153194c20c0187ec690e01210761a65ec6" translate="yes" xml:space="preserve">
          <source>A pipe takes in data as input and transforms it to a desired output. In this page, you'll use pipes to transform a component's birthday property into a human-friendly date.</source>
          <target state="translated">パイプは、データを入力として取り込み、目的の出力に変換します。このページでは、パイプを使用してコンポーネントの誕生日プロパティを人間に優しい日付に変換します。</target>
        </trans-unit>
        <trans-unit id="e35f19f9638c9d81846078d6ba2a979a2c496046" translate="yes" xml:space="preserve">
          <source>A policy for when to run guards and resolvers on a route.</source>
          <target state="translated">ルート上でガードとリゾルバをいつ実行するかのポリシー。</target>
        </trans-unit>
        <trans-unit id="6322e77ad4a4989fe85f21f6c16add46ed1d428c" translate="yes" xml:space="preserve">
          <source>A position in screen coordinates (a tuple with x and y values) or a function that returns the top offset position.</source>
          <target state="translated">画面座標上の位置(xとyの値を持つタプル)、または最上位のオフセット位置を返す関数。</target>
        </trans-unit>
        <trans-unit id="83b235867fe2026bbac0ac32946c8dbf281bfb3f" translate="yes" xml:space="preserve">
          <source>A position in screen coordinates (a tuple with x and y values).</source>
          <target state="translated">画面座標の位置(xとyの値を持つタプル)。</target>
        </trans-unit>
        <trans-unit id="41d8149577449727c17e0704c95f074c91db70d0" translate="yes" xml:space="preserve">
          <source>A potential use for animation callbacks could be to cover for a slow API call, such as a database lookup. For example, you could set up the &lt;strong&gt;InProgress&lt;/strong&gt; button to have its own looping animation where it pulsates or does some other visual motion while the backend system operation finishes.</source>
          <target state="translated">アニメーションコールバックの潜在的な用途は、データベースルックアップなどの遅いAPI呼び出しをカバーすることです。たとえば、&lt;strong&gt;InProgress&lt;/strong&gt;ボタンを設定して独自のループアニメーションを設定し、バックエンドシステムの操作が完了するまで脈動したり、他の視覚的なモーションを実行したりできます。</target>
        </trans-unit>
        <trans-unit id="6bfb9afe8113d548fbbb315af6723ac817365c83" translate="yes" xml:space="preserve">
          <source>A predefined &lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; for the base href to be used with the &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;. The base href is the URL prefix that should be preserved when generating and recognizing URLs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; で使用されるベースhrefの定義済み&lt;a href=&quot;../../guide/glossary#di-token&quot;&gt;DIトークン&lt;/a&gt;。ベースhrefは、URLを生成して認識するときに保持する必要があるURLプレフィックスです。</target>
        </trans-unit>
        <trans-unit id="9b55764d3eb54191c263b0e27dc2c991eb21fbc9" translate="yes" xml:space="preserve">
          <source>A predefined &lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DI token&lt;/a&gt; for the base href to be used with the &lt;code&gt;&lt;a href=&quot;common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;. The base href is the URL prefix that should be preserved when generating and recognizing URLs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;common/pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; で使用されるベースhrefの定義済み&lt;a href=&quot;../guide/glossary#di-token&quot;&gt;DIトークン&lt;/a&gt;。ベースhrefは、URLを生成して認識するときに保持する必要があるURLプレフィックスです。</target>
        </trans-unit>
        <trans-unit id="557fd2b59c5e0790707cb4c256a2988eead2fed1" translate="yes" xml:space="preserve">
          <source>A predefined set of allowed values.</source>
          <target state="translated">事前に定義された許容値のセット。</target>
        </trans-unit>
        <trans-unit id="ddc74c636d6ca337e8c1942b0e65b5175ae71201" translate="yes" xml:space="preserve">
          <source>A prefix to apply to generated selectors.</source>
          <target state="translated">生成されたセレクタに適用する接頭辞。</target>
        </trans-unit>
        <trans-unit id="f85bc3007675f205f13a65c0814c7779fddfde0e" translate="yes" xml:space="preserve">
          <source>A process that allows apps to display data values to a user and respond to user actions (such as clicks, touches, and keystrokes).</source>
          <target state="translated">アプリがユーザーにデータの値を表示し、ユーザーのアクション(クリック、タッチ、キー操作など)に反応するためのプロセス。</target>
        </trans-unit>
        <trans-unit id="826b728e8dd71b33ef6978c05ec91c2dd062dc41" translate="yes" xml:space="preserve">
          <source>A process that speeds up application load time by splitting the application into multiple bundles and loading them on demand. For example, dependencies can be lazy loaded as needed&amp;mdash;as opposed to &lt;a href=&quot;glossary#eager-loading&quot;&gt;eager-loaded&lt;/a&gt; modules that are required by the root module and are thus loaded on launch.</source>
          <target state="translated">アプリケーションを複数のバンドルに分割してオンデマンドでロードすることにより、アプリケーションのロード時間を短縮するプロセス。たとえば、依存関係は必要に応じてレイジーロードできます。ルートモジュールが必要とし、起動時に&lt;a href=&quot;glossary#eager-loading&quot;&gt;ロードさ&lt;/a&gt;れるeager-loadedモジュールとは対照的です。</target>
        </trans-unit>
        <trans-unit id="cf702bb551fcbd63146fa58c0443c0e81f431dfb" translate="yes" xml:space="preserve">
          <source>A producer of multiple values, which it pushes to &lt;a href=&quot;glossary#subscriber&quot;&gt;subscribers&lt;/a&gt;. Used for asynchronous event handling throughout Angular. You execute an observable by subscribing to it with its &lt;code&gt;subscribe()&lt;/code&gt; method, passing callbacks for notifications of new values, errors, or completion.</source>
          <target state="translated">&lt;a href=&quot;glossary#subscriber&quot;&gt;サブスクライバー&lt;/a&gt;にプッシュする複数の値のプロデューサー。Angular全体の非同期イベント処理に使用されます。 &lt;code&gt;subscribe()&lt;/code&gt; メソッドでオブザーバブルをサブスクライブし、新しい値、エラー、または完了の通知用のコールバックを渡すことにより、オブザーバブルを実行します。</target>
        </trans-unit>
        <trans-unit id="389a0d3db57aebec32082a719d81b168d371de7f" translate="yes" xml:space="preserve">
          <source>A programming language based on JavaScript that is notable for its optional typing system. TypeScript provides compile-time type checking and strong tooling support (such as code completion, refactoring, inline documentation, and intelligent search). Many code editors and IDEs support TypeScript either natively or with plug-ins.</source>
          <target state="translated">JavaScript をベースにしたプログラミング言語で、オプションの型付けシステムで注目されています。TypeScript はコンパイル時の型チェックと強力なツールサポート (コード補完、リファクタリング、インラインドキュメント、インテリジェント検索など)を提供します。多くのコードエディタや IDE がネイティブまたはプラグインで TypeScript をサポートしている。</target>
        </trans-unit>
        <trans-unit id="b1c6caa6538c99e13bd629cbb98b70f6d54abb0c" translate="yes" xml:space="preserve">
          <source>A project's &lt;code&gt;src/environments/&lt;/code&gt; folder contains the base configuration file, &lt;code&gt;environment.ts&lt;/code&gt;, which provides a default environment. You can add override defaults for additional environments, such as production and staging, in target-specific configuration files.</source>
          <target state="translated">プロジェクトの &lt;code&gt;src/environments/&lt;/code&gt; フォルダーには、デフォルトの環境を提供する基本構成ファイル &lt;code&gt;environment.ts&lt;/code&gt; が含まれています。ターゲット固有の構成ファイルで、本番環境やステージングなどの追加の環境のオーバーライドのデフォルトを追加できます。</target>
        </trans-unit>
        <trans-unit id="7d819f9cac8ab3585eb715c80934a771ae6e032e" translate="yes" xml:space="preserve">
          <source>A project, as generated by the &lt;a href=&quot;cli/new&quot;&gt;&lt;code&gt;ng new&lt;/code&gt;&lt;/a&gt;, contains the set of source files, resources, and configuration files that you need to develop and test the application using the CLI. Projects can also be created with the &lt;code&gt;ng generate application&lt;/code&gt; and &lt;code&gt;ng generate library&lt;/code&gt; commands.</source>
          <target state="translated">&lt;a href=&quot;cli/new&quot;&gt; &lt;code&gt;ng new&lt;/code&gt; &lt;/a&gt;によって生成されたプロジェクトには、CLIを使用してアプリケーションを開発およびテストするために必要なソースファイル、リソース、および構成ファイルのセットが含まれています。 &lt;code&gt;ng generate application&lt;/code&gt; コマンドと &lt;code&gt;ng generate library&lt;/code&gt; コマンドを使用してプロジェクトを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="3fcab1b27f2adf988a0e5f9ae8aa96c046251ada" translate="yes" xml:space="preserve">
          <source>A property name or method call should be the norm, but an occasional Boolean negation, &lt;code&gt;!&lt;/code&gt;, is OK. Otherwise, confine application and business logic to the component, where it is easier to develop and test.</source>
          <target state="translated">プロパティ名またはメソッド呼び出しは標準である必要がありますが、ときどきブール否定 &lt;code&gt;!&lt;/code&gt; 、大丈夫です。それ以外の場合は、アプリケーションとビジネスロジックをコンポーネントに限定し、コンポーネントの開発とテストが容易になります。</target>
        </trans-unit>
        <trans-unit id="303bcae98ffe1ea88fdce30e7edca4a926a46c15" translate="yes" xml:space="preserve">
          <source>A provider can be the service class itself, so that the injector can use &lt;code&gt;new&lt;/code&gt; to create an instance. You might also define more than one class to provide the same service in different ways, and configure different injectors with different providers.</source>
          <target state="translated">プロバイダーはサービスクラス自体にすることができるため、インジェクターは &lt;code&gt;new&lt;/code&gt; を使用してインスタンスを作成できます。また、同じサービスを異なる方法で提供するために複数のクラスを定義し、異なるプロバイダーで異なるインジェクターを構成することもできます。</target>
        </trans-unit>
        <trans-unit id="9060af48d7b3ea4565ffc43d0325a160797c72c4" translate="yes" xml:space="preserve">
          <source>A provider is an instruction to the &lt;a href=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/a&gt; system on how to obtain a value for a dependency. Most of the time, these dependencies are services that you create and provide.</source>
          <target state="translated">プロバイダーは、&lt;a href=&quot;dependency-injection&quot;&gt;依存関係&lt;/a&gt;の値を取得する方法に関する依存関係注入システムへの指示です。ほとんどの場合、これらの依存関係は、ユーザーが作成して提供するサービスです。</target>
        </trans-unit>
        <trans-unit id="94914bafc3d875ce4fd31120e0f5c1d6b0f53e09" translate="yes" xml:space="preserve">
          <source>A provider tells an injector &lt;em&gt;how to create the service&lt;/em&gt;. You must configure an injector with a provider before that injector can create a service (or provide any other kind of dependency).</source>
          <target state="translated">プロバイダーは、インジェクター&lt;em&gt;にサービスの作成方法を&lt;/em&gt;指示&lt;em&gt;します&lt;/em&gt;。インジェクターがサービスを作成（またはその他の種類の依存関係を提供）する前に、プロバイダーでインジェクターを構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="7091a1c3bd9d92d76003ced6042cacb1636cf3ca" translate="yes" xml:space="preserve">
          <source>A provider token for a service that turns on &lt;a href=&quot;testing#automatic-change-detection&quot;&gt;automatic change detection&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;testing#automatic-change-detection&quot;&gt;自動変更検出を&lt;/a&gt;オンにするサービスのプロバイダートークン。</target>
        </trans-unit>
        <trans-unit id="5e34ff74155cf2ee267810e5a88a88aaecf8f72b" translate="yes" xml:space="preserve">
          <source>A provider token used to configure the location upgrade module.</source>
          <target state="translated">ロケーション・アップグレード・モジュールを構成するために使用されるプロバイダ・トークン。</target>
        </trans-unit>
        <trans-unit id="35b952b56e93bc63b0bed6c15cf689e5aab13eab" translate="yes" xml:space="preserve">
          <source>A published library typically provides a README or other documentation on how to add that lib to your app. For an example, see &lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt; docs.</source>
          <target state="translated">公開されたライブラリは通常、そのlibをアプリに追加する方法に関するREADMEまたはその他のドキュメントを提供します。例については、&lt;a href=&quot;https://material.angular.io/&quot;&gt;Angular Material&lt;/a&gt; docsを参照してください。</target>
        </trans-unit>
        <trans-unit id="0781fc1f661b3bd269d0c78ccd7683277722e5fa" translate="yes" xml:space="preserve">
          <source>A pure pipe uses pure functions. Pure functions process inputs and return values without detectable side effects. Given the same input, they should always return the same output.</source>
          <target state="translated">ピュアパイプはピュア関数を使用します。ピュア関数は入力を処理し、検出可能な副作用なしに値を返します。同じ入力があっても、常に同じ出力を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="ea642d50993a11f50b36f50c416de1e3afc29587" translate="yes" xml:space="preserve">
          <source>A query options object.</source>
          <target state="translated">クエリオプションオブジェクト。</target>
        </trans-unit>
        <trans-unit id="875f4a87e92836850f7d0d164c10b38034b2b733" translate="yes" xml:space="preserve">
          <source>A quick look at the &lt;code&gt;DashboardComponent&lt;/code&gt; constructor discourages the first approach:</source>
          <target state="translated">&lt;code&gt;DashboardComponent&lt;/code&gt; コンストラクターをざっと見てみると、最初のアプローチは推奨されません。</target>
        </trans-unit>
        <trans-unit id="eac44c88992039f4fb91e0feae3853c7a87290d8" translate="yes" xml:space="preserve">
          <source>A re-usable component might be a child of multiple components. Imagine a component for rendering breaking news about a financial instrument. For business reasons, this news component makes frequent calls directly into its parent instrument as changing market data streams by.</source>
          <target state="translated">再利用可能なコンポーネントは、複数のコンポーネントの子になるかもしれません。金融商品に関するニュース速報を表示するコンポーネントを想像してみてください。ビジネス上の理由から、このニュース・コンポーネントは、市場のデータ・ストリームが変化すると、その親である金融商品に直接頻繁に呼び出しを行います。</target>
        </trans-unit>
        <trans-unit id="29188c6ddf29a94eeba4295076c9a342a62de5e6" translate="yes" xml:space="preserve">
          <source>A real hero is more than a name.</source>
          <target state="translated">本当のヒーローは名前だけじゃない</target>
        </trans-unit>
        <trans-unit id="14947a138fd23361ed204ab70416c15a2a54e6c1" translate="yes" xml:space="preserve">
          <source>A redirect route requires a &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; property to tell the router how to match a URL to the path of a route. The router throws an error if you don't. In this app, the router should select the route to the &lt;code&gt;HeroListComponent&lt;/code&gt; only when the &lt;em&gt;entire URL&lt;/em&gt; matches &lt;code&gt;''&lt;/code&gt;, so set the &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; value to &lt;code&gt;'&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt;.</source>
          <target state="translated">リダイレクトルートには、URLをルートのパスに一致させる方法をルーターに指示するための &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; プロパティが必要です。そうしないと、ルーターはエラーをスローします。このアプリでは、ルーターは&lt;em&gt;、URL全体が&lt;/em&gt; &lt;code&gt;''&lt;/code&gt; に一致する場合にのみ、 &lt;code&gt;HeroListComponent&lt;/code&gt; へのルートを選択する必要があるため、 &lt;code&gt;&lt;a href=&quot;../api/router/route#pathMatch&quot;&gt;pathMatch&lt;/a&gt;&lt;/code&gt; 値を &lt;code&gt;'&lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt;'&lt;/code&gt; &lt;a href=&quot;../api/core/version#full&quot;&gt;full&lt;/a&gt; 'に設定します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="36f7f7b1b6c1f43c049a2ebdb10a9f819ec461db" translate="yes" xml:space="preserve">
          <source>A reference to an Angular application running on a page.</source>
          <target state="translated">ページ上で動作するAngularアプリケーションのリファレンスです。</target>
        </trans-unit>
        <trans-unit id="401eb455bc6f4c776b2dccfc14710b298a225039" translate="yes" xml:space="preserve">
          <source>A reference to the template that is stamped out for each item in the iterable.</source>
          <target state="translated">イテレート可能な項目ごとにスタンプアウトされるテンプレートへの参照。</target>
        </trans-unit>
        <trans-unit id="5a24dc890372e521028f35c106ed2f1cb927ba31" translate="yes" xml:space="preserve">
          <source>A reference to the underlying control.</source>
          <target state="translated">基礎となるコントロールへの参照。</target>
        </trans-unit>
        <trans-unit id="7996d7994050db578a326532c3dbd2894c0adf11" translate="yes" xml:space="preserve">
          <source>A regular expression to be used as is to test the values, or a string. If a string is passed, the &lt;code&gt;^&lt;/code&gt; character is prepended and the &lt;code&gt;$&lt;/code&gt; character is appended to the provided string (if not already present), and the resulting regular expression is used to test the values.</source>
          <target state="translated">値をテストするためにそのまま使用される正規表現、または文字列。文字列が渡されると、 &lt;code&gt;^&lt;/code&gt; 文字が先頭に追加され、提供された文字列に &lt;code&gt;$&lt;/code&gt; 文字が追加され（まだ存在しない場合）、結果の正規表現を使用して値がテストされます。</target>
        </trans-unit>
        <trans-unit id="a73fdf09e331223ac46a9c078644a2fd7fcd9c66" translate="yes" xml:space="preserve">
          <source>A repository of different Map diffing strategies used by NgClass, NgStyle, and others.</source>
          <target state="translated">NgClass、NgStyle などで使用されている異なるマップ差分ストラテジーのリポジトリ。</target>
        </trans-unit>
        <trans-unit id="cb8eb73672378bd21acb306ae11973b78a2d8b3b" translate="yes" xml:space="preserve">
          <source>A repository of different iterable diffing strategies used by NgFor, NgClass, and others.</source>
          <target state="translated">NgFor、NgClassなどで使用されている異なる反復可能な差分ストラテジーのリポジトリ。</target>
        </trans-unit>
        <trans-unit id="27483211b06ffa402c47221f575c346e77ca8f97" translate="yes" xml:space="preserve">
          <source>A request is rejected if the user denies permission, or if the browser blocks or does not support the Push API or ServiceWorkers. Check &lt;code&gt;&lt;a href=&quot;swpush#isEnabled&quot;&gt;SwPush.isEnabled&lt;/a&gt;&lt;/code&gt; to confirm status.</source>
          <target state="translated">ユーザーが権限を拒否した場合、またはブラウザーがPush APIまたはServiceWorkersをブロックまたはサポートしていない場合、要求は拒否されます。 &lt;code&gt;&lt;a href=&quot;swpush#isEnabled&quot;&gt;SwPush.isEnabled&lt;/a&gt;&lt;/code&gt; をチェックして、ステータスを確認します。</target>
        </trans-unit>
        <trans-unit id="19b207feff8dd38f63473783387846e4b8f4694c" translate="yes" xml:space="preserve">
          <source>A resolution is a process of flattening multiple nested arrays and converting individual providers into an array of &lt;code&gt;&lt;a href=&quot;resolvedreflectiveprovider&quot;&gt;ResolvedReflectiveProvider&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">解決は、ネストされた複数の配列をフラット化し、個々のプロバイダーを &lt;code&gt;&lt;a href=&quot;resolvedreflectiveprovider&quot;&gt;ResolvedReflectiveProvider&lt;/a&gt;&lt;/code&gt; の配列に変換するプロセスです。</target>
        </trans-unit>
        <trans-unit id="a1c3c3d085e282c76f310bb036a7eac8d0f84e78" translate="yes" xml:space="preserve">
          <source>A response that represents an error or failure, either from a non-successful HTTP status, an error while executing the request, or some other failure which occurred during the parsing of the response.</source>
          <target state="translated">HTTP ステータスが成功していない、リクエストの実行中にエラーが発生した、あるいはレスポンスの解析中に発生したその他の障害のいずれかによるエラーや障害を表すレスポンス。</target>
        </trans-unit>
        <trans-unit id="f70c3da48414bf75c125dc101e455797d04f0001" translate="yes" xml:space="preserve">
          <source>A reusable animation definition.</source>
          <target state="translated">再利用可能なアニメーションの定義。</target>
        </trans-unit>
        <trans-unit id="cdabf3135a889573b4d620fff18335445de9cd9e" translate="yes" xml:space="preserve">
          <source>A revised version of the &lt;code&gt;CachingInterceptor&lt;/code&gt; optionally returns an &lt;em&gt;observable&lt;/em&gt; that immediately emits the cached response, sends the request to the NPM web API anyway, and emits again later with the updated search results.</source>
          <target state="translated">&lt;code&gt;CachingInterceptor&lt;/code&gt; の改訂バージョンは、オプションで、キャッシュされた応答を即座に発行し、NPM Web APIに要求を送信し、更新された検索結果で後で再び発行する&lt;em&gt;オブザーバブル&lt;/em&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="6a4bbf0b3ca5dd008081ab260dca5b95fc3853e3" translate="yes" xml:space="preserve">
          <source>A route associates one or more URL paths with a component.</source>
          <target state="translated">ルートは、1 つ以上の URL パスをコンポーネントに関連付けます。</target>
        </trans-unit>
        <trans-unit id="74a035a1a0df73830bf78e88fdca0c0d30db6779" translate="yes" xml:space="preserve">
          <source>A route change activates the animation trigger, and a transition matching the state change is applied.</source>
          <target state="translated">ルート変更はアニメーショントリガーをアクティブにし、状態変更にマッチしたトランジションが適用されます。</target>
        </trans-unit>
        <trans-unit id="6c64bf97011375151692d4c68dff9ae5d5309663" translate="yes" xml:space="preserve">
          <source>A route definition refers to a component by its type with &lt;code&gt;component: CustomerListComponent&lt;/code&gt;.</source>
          <target state="translated">ルート定義は、コンポーネントを &lt;code&gt;component: CustomerListComponent&lt;/code&gt; タイプCustomerListComponentで参照します。</target>
        </trans-unit>
        <trans-unit id="7e86358e50f0c60115516b0afea462258244b6af" translate="yes" xml:space="preserve">
          <source>A routed Angular application has one singleton instance of the &lt;em&gt;&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;/em&gt; service. When the browser's URL changes, that router looks for a corresponding &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; from which it can determine the component to display.</source>
          <target state="translated">ルーティングされたAngularアプリケーションには、&lt;em&gt; &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;/em&gt;サービスのシングルトンインスタンスが1つあります。ブラウザーのURLが変更されると、そのルーターは、表示するコンポーネントを決定できる対応する &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; 検索します。</target>
        </trans-unit>
        <trans-unit id="02ec1f1924ffef864dec5f034d699d0e2085b2db" translate="yes" xml:space="preserve">
          <source>A routed application should support &quot;deep links&quot;. A &lt;em&gt;deep link&lt;/em&gt; is a URL that specifies a path to a component inside the app. For example, &lt;code&gt;http://www.mysite.com/heroes/42&lt;/code&gt; is a &lt;em&gt;deep link&lt;/em&gt; to the hero detail page that displays the hero with &lt;code&gt;id: 42&lt;/code&gt;.</source>
          <target state="translated">ルーティングされたアプリケーションは「ディープリンク」をサポートする必要があります。&lt;em&gt;ディープリンクは&lt;/em&gt;アプリ内のコンポーネントへのパスを指定するURLです。たとえば、 &lt;code&gt;http://www.mysite.com/heroes/42&lt;/code&gt; は、 &lt;code&gt;id: 42&lt;/code&gt; ヒーローを表示するヒーロー詳細ページへの&lt;em&gt;ディープリンク&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="4d567e1e3b972dc05d228702a7e27b4c14034add" translate="yes" xml:space="preserve">
          <source>A routed entry component</source>
          <target state="translated">ルート化されたエントリコンポーネント</target>
        </trans-unit>
        <trans-unit id="9a4649536ab16482113647620adfcb1f64a30922" translate="yes" xml:space="preserve">
          <source>A router has no routes until you configure it. The following example creates five route definitions, configures the router via the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method, and adds the result to the &lt;code&gt;AppModule&lt;/code&gt;'s &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">ルーターは、ユーザーが構成するまでルートを持ちません。次の例では、5つのルート定義を作成し、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; メソッドを介してルーターを構成し、その結果を &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;imports&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="8d43f0ef0ca2078e73bd486696685c5d5ef229cf" translate="yes" xml:space="preserve">
          <source>A router must be configured with a list of route definitions.</source>
          <target state="translated">ルータには、ルート定義のリストを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6ee77f9045090764d9e6cd31e18052dea0804472" translate="yes" xml:space="preserve">
          <source>A router needs configuration whether it's the AngularJS or Angular or any other router.</source>
          <target state="translated">ルーターはAngularJSだろうがAngularだろうが設定が必要です。</target>
        </trans-unit>
        <trans-unit id="742ba5028666dfbd7b24f76943ebc6c0e1233cfe" translate="yes" xml:space="preserve">
          <source>A router outlet emits an activate event when a new component is instantiated, and a deactivate event when a component is destroyed.</source>
          <target state="translated">ルータアウトレットは、新しいコンポーネントがインスタンス化されると activate イベントを発し、コンポーネントが破壊されると deactivate イベントを発します。</target>
        </trans-unit>
        <trans-unit id="4d893f2f2f77e09f89f1c1ee2b15d6d25775c766" translate="yes" xml:space="preserve">
          <source>A routing module does not have its own declarations. Components, directives, and pipes are the responsibility of the feature module, not the routing module.</source>
          <target state="translated">ルーティングモジュールは独自の宣言を持ちません。コンポーネント、ディレクティブ、パイプはルーティングモジュールではなくフィーチャーモジュールの責任です。</target>
        </trans-unit>
        <trans-unit id="2a705a3baf3eb0fb5440338939869bf36ca0d6e2" translate="yes" xml:space="preserve">
          <source>A routing module provides routing configuration for another module and separates routing concerns from its companion module.</source>
          <target state="translated">ルーティングモジュールは、別のモジュールにルーティング設定を提供し、そのコンパニオンモジュールからルーティングに関する問題を分離します。</target>
        </trans-unit>
        <trans-unit id="9e0ec53544bcd207c27bdd63342d736233f25672" translate="yes" xml:space="preserve">
          <source>A routing module re-exports the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; as a convenience so that components of the companion module have access to router directives such as &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ルーティングモジュールは便利な &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; としてRouterModuleを再エクスポートするため、コンパニオンモジュールのコンポーネントは &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; などのルーターディレクティブにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="1f1ba848458b2e10deffe2484e76ce0090f12dc2" translate="yes" xml:space="preserve">
          <source>A routing module should only be imported by its companion module.</source>
          <target state="translated">ルーティングモジュールは、そのコンパニオンモジュールからのみインポートされるべきです。</target>
        </trans-unit>
        <trans-unit id="6e4a38ab376f65d6f384d839be45273996d732c6" translate="yes" xml:space="preserve">
          <source>A routing module typically does the following:</source>
          <target state="translated">ルーティングモジュールは一般的に以下のことを行います。</target>
        </trans-unit>
        <trans-unit id="85a2bfb58cc0e40066d8cc4ec92ade33012df2f1" translate="yes" xml:space="preserve">
          <source>A rule can specify a period as time range, or as a single time value.</source>
          <target state="translated">ルールは、期間を時間範囲として、または単一の時間値として指定することができます。</target>
        </trans-unit>
        <trans-unit id="1dbf2cce68e5549ab5fc8b6799a2ca90688f851e" translate="yes" xml:space="preserve">
          <source>A running application continues to run with the same version of all files. It does not suddenly start receiving cached files from a newer version, which are likely incompatible.</source>
          <target state="translated">実行中のアプリケーションは、すべてのファイルの同じバージョンで実行し続けます。それは突然、互換性がない可能性が高い新しいバージョンからキャッシュされたファイルの受信を開始することはありません。</target>
        </trans-unit>
        <trans-unit id="499a4b6365d83f0f45eef66065c407c6f63a53b0" translate="yes" xml:space="preserve">
          <source>A scaffolding library that defines how to generate or transform a programming project by creating, modifying, refactoring, or moving files and code. A schematic defines &lt;a href=&quot;glossary#rule&quot;&gt;rules&lt;/a&gt; that operate on a virtual file system called a &lt;a href=&quot;glossary#file-tree&quot;&gt;tree&lt;/a&gt;.</source>
          <target state="translated">ファイルとコードを作成、変更、リファクタリング、または移動してプログラミングプロジェクトを生成または変換する方法を定義する足場ライブラリ。回路図は、&lt;a href=&quot;glossary#file-tree&quot;&gt;ツリー&lt;/a&gt;と呼ばれる仮想ファイルシステムで動作する&lt;a href=&quot;glossary#rule&quot;&gt;ルール&lt;/a&gt;を定義します。</target>
        </trans-unit>
        <trans-unit id="fa44d1fe648c4b623410d8e081b47f8c6bc1115b" translate="yes" xml:space="preserve">
          <source>A schema definition associated with an NgModule.</source>
          <target state="translated">NgModule に関連付けられたスキーマ定義。</target>
        </trans-unit>
        <trans-unit id="28324b5ab9a75918825701e83102b3643e84e681" translate="yes" xml:space="preserve">
          <source>A schematic for the &lt;code&gt;ng add&lt;/code&gt; command can enhance the initial installation process for your users. The following steps will define this type of schematic.</source>
          <target state="translated">&lt;code&gt;ng add&lt;/code&gt; コマンドの回路図により、ユーザーの初期インストールプロセスを強化できます。次の手順では、このタイプの回路図を定義します。</target>
        </trans-unit>
        <trans-unit id="00274013a103be16cdc79882529e8b292f53bb4e" translate="yes" xml:space="preserve">
          <source>A schematic is a template-based code generator that supports complex logic. It is a set of instructions for transforming a software project by generating or modifying code. Schematics are packaged into &lt;a href=&quot;glossary#collection&quot;&gt;collections&lt;/a&gt; and installed with npm.</source>
          <target state="translated">回路図は、複雑なロジックをサポートするテンプレートベースのコードジェネレーターです。これは、コードを生成または変更してソフトウェアプロジェクトを変換するための一連の命令です。回路図は&lt;a href=&quot;glossary#collection&quot;&gt;コレクションに&lt;/a&gt;パッケージ化され、npmでインストールされます。</target>
        </trans-unit>
        <trans-unit id="7927b3f04761399102a081776a50fb3eb8e1643e" translate="yes" xml:space="preserve">
          <source>A scope function for the Web Tracing Framework (WTF).</source>
          <target state="translated">Web Tracing Framework (WTF)のスコープ機能。</target>
        </trans-unit>
        <trans-unit id="20497a1af5a153905fddec72f2f68e3bea176254" translate="yes" xml:space="preserve">
          <source>A search value reaches the service only if it's a new value and the user has stopped typing.</source>
          <target state="translated">検索値がサービスに到達するのは、それが新しい値であり、ユーザーが入力を停止した場合に限られます。</target>
        </trans-unit>
        <trans-unit id="8928b57af9034cfc3113833a8cc9214728c19f78" translate="yes" xml:space="preserve">
          <source>A second &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; function decorates the &lt;code&gt;loggerService&lt;/code&gt; constructor property. The only &lt;code&gt;LoggerService&lt;/code&gt; instance in the app is provided at the &lt;code&gt;AppComponent&lt;/code&gt; level. The host &lt;code&gt;HeroBioComponent&lt;/code&gt; doesn't have its own &lt;code&gt;LoggerService&lt;/code&gt; provider.</source>
          <target state="translated">2番目の &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 関数は、 &lt;code&gt;loggerService&lt;/code&gt; コンストラクタープロパティを装飾します。アプリ内の唯一の &lt;code&gt;LoggerService&lt;/code&gt; インスタンスは、 &lt;code&gt;AppComponent&lt;/code&gt; レベルで提供されます。ホスト &lt;code&gt;HeroBioComponent&lt;/code&gt; には、独自の &lt;code&gt;LoggerService&lt;/code&gt; プロバイダーはありません。</target>
        </trans-unit>
        <trans-unit id="b2209c9173e3f8d50fb398db9c74e9279308b293" translate="yes" xml:space="preserve">
          <source>A second function called &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; lets you run those same animations one after the other. Within &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt;, the animation steps consist of either &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; function calls.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; と呼ばれる2番目の関数では、同じアニメーションを次々に実行できます。 &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 内のアニメーションステップは、 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 関数呼び出しで構成されます。</target>
        </trans-unit>
        <trans-unit id="db03cff65aff6394642f3e77b7441a26efb12e0d" translate="yes" xml:space="preserve">
          <source>A secondary section heading is related to a main heading and &lt;em&gt;falls textually within&lt;/em&gt; the bounds of that main heading.</source>
          <target state="translated">2番目のセクションの見出しは、メインの見出しに関連付けられており、&lt;em&gt;テキスト&lt;/em&gt;でそのメインの見出しの境界&lt;em&gt;内に&lt;/em&gt;あります。</target>
        </trans-unit>
        <trans-unit id="897556bbdf26acf6542faa243ff0f6beeec0c43b" translate="yes" xml:space="preserve">
          <source>A separate NgModule that provides the necessary service providers and directives for navigating through application views.</source>
          <target state="translated">アプリケーションビューをナビゲートするために必要なサービスプロバイダとディレクティブを提供する独立したNgModule。</target>
        </trans-unit>
        <trans-unit id="4f7e1f9d4cced71dda1ebf170c0e8e0b521f3d4a" translate="yes" xml:space="preserve">
          <source>A serializable version of the event from &lt;code&gt;onPopState&lt;/code&gt; or &lt;code&gt;onHashChange&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;onPopState&lt;/code&gt; または &lt;code&gt;onHashChange&lt;/code&gt; からのイベントのシリアライズ可能なバージョン</target>
        </trans-unit>
        <trans-unit id="186e30ff0aea0409a1060146d23210d1933e91c6" translate="yes" xml:space="preserve">
          <source>A service spy, such as the &lt;code&gt;qetQuote()&lt;/code&gt; spy of the fake &lt;code&gt;TwainService&lt;/code&gt;, can give you that information and make assertions about the state of the view.</source>
          <target state="translated">偽の &lt;code&gt;TwainService&lt;/code&gt; の &lt;code&gt;qetQuote()&lt;/code&gt; スパイなどのサービススパイは、その情報を提供し、ビューの状態についてアサーションを行うことができます。</target>
        </trans-unit>
        <trans-unit id="70670cbdf35759376fdc687d58086435d3c7a0a3" translate="yes" xml:space="preserve">
          <source>A service that applications can use to interact with a browser's URL.</source>
          <target state="translated">アプリケーションがブラウザの URL と対話するために使用できるサービス。</target>
        </trans-unit>
        <trans-unit id="b658296c6fe9cdddfcd4f6dfb972ad4690b4f6cc" translate="yes" xml:space="preserve">
          <source>A service that can be used to get and add meta tags.</source>
          <target state="translated">メタタグを取得したり、追加したりできるサービスです。</target>
        </trans-unit>
        <trans-unit id="b2f6ff3d8a0d1fc326174778c442afc0d5fc6655" translate="yes" xml:space="preserve">
          <source>A service that can be used to get and set the title of a current HTML document.</source>
          <target state="translated">現在のHTMLドキュメントのタイトルを取得・設定できるサービスです。</target>
        </trans-unit>
        <trans-unit id="3a48ad5f23dc32cb9b39e0864173605539fa750b" translate="yes" xml:space="preserve">
          <source>A service that is provided to each route component that contains route specific information such as route parameters, static data, resolve data, global query params, and the global fragment.</source>
          <target state="translated">ルートパラメータ、静的データ、解決データ、グローバルクエリパラメータ、グローバルフラグメントなどのルート固有の情報を含む、各ルートコンポーネントに提供されるサービス。</target>
        </trans-unit>
        <trans-unit id="a65ba35ee354bb8dcdf3d93a99e7ba722d67bb4b" translate="yes" xml:space="preserve">
          <source>A service that provides navigation and URL manipulation capabilities.</source>
          <target state="translated">ナビゲーションやURL操作機能を提供するサービスです。</target>
        </trans-unit>
        <trans-unit id="165b76769ff8ffcdbb0dac7d8565023cf996eb79" translate="yes" xml:space="preserve">
          <source>A set of CSS style properties.</source>
          <target state="translated">CSSスタイルプロパティのセット。</target>
        </trans-unit>
        <trans-unit id="b41c5694278624138f799e74044ab8ef5c4a41ec" translate="yes" xml:space="preserve">
          <source>A set of CSS styles associated with this state, created using the &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function. This set of styles persists on the element once the state has been reached.</source>
          <target state="translated">使用して作成し、この状態に関連付けられているCSSスタイルのセット、 &lt;code&gt;&lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 関数。このスタイルのセットは、状態に達すると要素に保持されます。</target>
        </trans-unit>
        <trans-unit id="7299f56aeec68cc3f32c42d11d47f588e1b76737" translate="yes" xml:space="preserve">
          <source>A set of CSS styles or HTML styles associated with an animation state. The value can be any of the following:</source>
          <target state="translated">アニメーションの状態に関連付けられたCSSスタイルまたはHTMLスタイルのセット。値は以下のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="aed6bba5fddfaceede4e9e47b8f848a5df28edb9" translate="yes" xml:space="preserve">
          <source>A set of animation styles with optional offset data. The optional &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; value for a style specifies a percentage of the total animation time at which that style is applied.</source>
          <target state="translated">オプションのオフセットデータを含むアニメーションスタイルのセット。スタイルのオプションの &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; 値は、そのスタイルが適用される総アニメーション時間のパーセンテージを指定します。</target>
        </trans-unit>
        <trans-unit id="3a39ac6a5cf5e3a0526385dd947e6b5b4b10ab86" translate="yes" xml:space="preserve">
          <source>A set of arguments to pass to the handler method when the event occurs.</source>
          <target state="translated">イベントが発生したときにハンドラメソッドに渡す引数のセット。</target>
        </trans-unit>
        <trans-unit id="b69416e2e979402db61b9a90c7c686f250c2936a" translate="yes" xml:space="preserve">
          <source>A set of components that should be compiled along with this component. For each component listed here, Angular creates a &lt;a href=&quot;componentfactory&quot;&gt;&lt;code&gt;ComponentFactory&lt;/code&gt;&lt;/a&gt; and stores it in the &lt;a href=&quot;componentfactoryresolver&quot;&gt;&lt;code&gt;ComponentFactoryResolver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このコンポーネントとともにコンパイルする必要があるコンポーネントのセット。ここにリストされているコンポーネントごとに、Angularは&lt;a href=&quot;componentfactory&quot;&gt; &lt;code&gt;ComponentFactory&lt;/code&gt; &lt;/a&gt;を作成し、それをComponentFactoryResolverに格納し&lt;a href=&quot;componentfactoryresolver&quot;&gt; &lt;code&gt;ComponentFactoryResolver&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d541ee3bb7bdc858fdbe640242004d6c3574b73f" translate="yes" xml:space="preserve">
          <source>A set of configuration options for a router module, provided in the &lt;code&gt;&lt;a href=&quot;router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドで提供されるルーターモジュールの設定オプションのセット。</target>
        </trans-unit>
        <trans-unit id="db0c7a52799241ff11d3cbf03e465aa12662b595" translate="yes" xml:space="preserve">
          <source>A set of configuration options for a router module, provided in the &lt;code&gt;&lt;a href=&quot;routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドで提供されるルーターモジュールの設定オプションのセット。</target>
        </trans-unit>
        <trans-unit id="2f9f31dbf4c58ee11c9c7cafc16fbd9e630c335a" translate="yes" xml:space="preserve">
          <source>A set of developer-defined parameters that modify styling and timing when an animation action starts. An array of key-value pairs, where the provided value is used as a default.</source>
          <target state="translated">アニメーションアクションの開始時にスタイリングとタイミングを変更する開発者定義のパラメータのセット。キーと値のペアの配列で、指定された値がデフォルトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="cda6f3a81bf6fa1d317017a56a36707356b07794" translate="yes" xml:space="preserve">
          <source>A set of operators applied to an observable is a recipe&amp;mdash;that is, a set of instructions for producing the values you&amp;rsquo;re interested in. By itself, the recipe doesn&amp;rsquo;t do anything. You need to call &lt;code&gt;subscribe()&lt;/code&gt; to produce a result through the recipe.</source>
          <target state="translated">オブザーバブルに適用される演算子のセットはレシピです。つまり、必要な値を生成するための一連の命令です。レシピ自体は何もしません。レシピを通じて結果を生成するには、 &lt;code&gt;subscribe()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="a4ef0905149ca734533ddf7caa55241124189d7b" translate="yes" xml:space="preserve">
          <source>A set of options that can include a time delay and additional developer-defined parameters.</source>
          <target state="translated">時間遅延と開発者定義の追加パラメータを含むことができるオプションのセット。</target>
        </trans-unit>
        <trans-unit id="7985d70b6da47d4fec6acf039e047d5b6d1572b8" translate="yes" xml:space="preserve">
          <source>A set of schematics that customize the &lt;code&gt;ng generate&lt;/code&gt; sub-command option defaults for this project. See &lt;a href=&quot;workspace-config#schematics&quot;&gt;Generation schematics&lt;/a&gt; below.</source>
          <target state="translated">このプロジェクトの &lt;code&gt;ng generate&lt;/code&gt; サブコマンドオプションのデフォルトをカスタマイズする一連の回路図。以下の&lt;a href=&quot;workspace-config#schematics&quot;&gt;生成回路図を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1c6f62509b38d65e25be8d89556b5a09dfbb7fbc" translate="yes" xml:space="preserve">
          <source>A set of styles used in the step.</source>
          <target state="translated">ステップで使用されるスタイルのセット。</target>
        </trans-unit>
        <trans-unit id="d32224487a00478c027aca367dcd59df918d5161" translate="yes" xml:space="preserve">
          <source>A set of supported event names for gestures to be used in Angular. Angular supports all built-in recognizers, as listed in &lt;a href=&quot;http://hammerjs.github.io/&quot;&gt;HammerJS documentation&lt;/a&gt;.</source>
          <target state="translated">Angularで使用されるジェスチャーでサポートされるイベント名のセット。Angularは、&lt;a href=&quot;http://hammerjs.github.io/&quot;&gt;HammerJSのドキュメントに&lt;/a&gt;記載されているすべての組み込み認識機能をサポートしています。</target>
        </trans-unit>
        <trans-unit id="40cf8919ea34c404a49fa4a02115691af647ed4f" translate="yes" xml:space="preserve">
          <source>A simple example</source>
          <target state="translated">簡単な例</target>
        </trans-unit>
        <trans-unit id="bb4c77f231253ed725d7018a0a81f0fc0e2d83c1" translate="yes" xml:space="preserve">
          <source>A simple example might be a button that sends users to your company website, that would be included in all apps that your company builds.</source>
          <target state="translated">シンプルな例としては、ユーザーを会社のウェブサイトに送るボタンがありますが、これは会社が構築するすべてのアプリに含まれます。</target>
        </trans-unit>
        <trans-unit id="ab3504c2abf7afad713f07541dc7d00888949cea" translate="yes" xml:space="preserve">
          <source>A simple example of an upgradable component is one that just has a template and a controller:</source>
          <target state="translated">アップグレード可能なコンポーネントの簡単な例としては、テンプレートとコントローラだけのものがあります。</target>
        </trans-unit>
        <trans-unit id="831871173da9a3d98859cf2d8c0391fd2eb59db2" translate="yes" xml:space="preserve">
          <source>A simple registry that maps &lt;code&gt;Components&lt;/code&gt; to generated &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; classes that can be used to create instances of components. Use to obtain the factory for a given component type, then use the factory's &lt;code&gt;create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">&lt;code&gt;Components&lt;/code&gt; をインスタンスの作成に使用できる生成された &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; クラスにマップする単純なレジストリ。を使用して、特定のコンポーネントタイプのファクトリを取得し、ファクトリの &lt;code&gt;create()&lt;/code&gt; メソッドを使用して、そのタイプのコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="038f8b4a10895ec9960fbff4945296bdba224d59" translate="yes" xml:space="preserve">
          <source>A simple registry that maps &lt;code&gt;Components&lt;/code&gt; to generated &lt;code&gt;&lt;a href=&quot;core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; classes that can be used to create instances of components. Use to obtain the factory for a given component type, then use the factory's &lt;code&gt;create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">&lt;code&gt;Components&lt;/code&gt; をインスタンスの作成に使用できる生成された &lt;code&gt;&lt;a href=&quot;core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; クラスにマップする単純なレジストリ。を使用して、特定のコンポーネントタイプのファクトリを取得し、ファクトリの &lt;code&gt;create()&lt;/code&gt; メソッドを使用して、そのタイプのコンポーネントを作成します。</target>
        </trans-unit>
        <trans-unit id="10044643dfe192b31c7905ba4ef722a290bd6c2d" translate="yes" xml:space="preserve">
          <source>A simple structural directive like this one creates an &lt;a href=&quot;../api/core/embeddedviewref&quot;&gt;&lt;em&gt;embedded view&lt;/em&gt;&lt;/a&gt; from the Angular-generated &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; and inserts that view in a &lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;&lt;em&gt;view container&lt;/em&gt;&lt;/a&gt; adjacent to the directive's original &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; host element.</source>
          <target state="translated">このような単純な構造ディレクティブは、Angularが生成した &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; から&lt;a href=&quot;../api/core/embeddedviewref&quot;&gt;&lt;em&gt;埋め込みビュー&lt;/em&gt;&lt;/a&gt;を作成し、そのビューをディレクティブの元の &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; ホスト要素に隣接する&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;&lt;em&gt;ビューコンテナーに&lt;/em&gt;&lt;/a&gt;挿入します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c50ef7c9d0ce699d0fb2c42cd53b333d4175593e" translate="yes" xml:space="preserve">
          <source>A single &lt;code&gt;app.use()&lt;/code&gt; treats all other URLs as requests for static assets such as JavaScript, image, and style files.</source>
          <target state="translated">単一の &lt;code&gt;app.use()&lt;/code&gt; は、他のすべてのURLをJavaScript、画像、スタイルファイルなどの静的アセットのリクエストとして扱います。</target>
        </trans-unit>
        <trans-unit id="f477973774e5df37770d2d52b18d6a9388386d89" translate="yes" xml:space="preserve">
          <source>A single async validator or array of async validator functions</source>
          <target state="translated">単一の非同期バリデータまたは非同期バリデータ関数の配列</target>
        </trans-unit>
        <trans-unit id="268541f7ed03574fdff1f3db74a50de2b9970447" translate="yes" xml:space="preserve">
          <source>A single async validator or array of async validator functions.</source>
          <target state="translated">単一の非同期バリデータまたは非同期バリデータ関数の配列。</target>
        </trans-unit>
        <trans-unit id="657bff2669641b3b4dbecfeb9504dbb0338142a2" translate="yes" xml:space="preserve">
          <source>A single workspace configuration file, &lt;code&gt;angular.json&lt;/code&gt;, is created at the top level of the workspace. This is where you can set per-project defaults for CLI command options, and specify configurations to use when the CLI builds a project for different targets.</source>
          <target state="translated">単一のワークスペース構成ファイル &lt;code&gt;angular.json&lt;/code&gt; は、ワークスペースの最上位に作成されます。ここで、CLIコマンドオプションのプロジェクトごとのデフォルトを設定し、CLIがさまざまなターゲットのプロジェクトをビルドするときに使用する構成を指定できます。</target>
        </trans-unit>
        <trans-unit id="5d6ef6cd0b6fc6f9f557a972f0f18f5be6fca3db" translate="yes" xml:space="preserve">
          <source>A singleton service is a service for which only one instance exists in an app.</source>
          <target state="translated">シングルトンサービスとは、アプリ内に1つのインスタンスしか存在しないサービスのことです。</target>
        </trans-unit>
        <trans-unit id="ac41fd92f261eb788e4ee3ddf422ff33e2eeca72" translate="yes" xml:space="preserve">
          <source>A special animation control binding called &lt;code&gt;@.disabled&lt;/code&gt; can be placed on an HTML element to disable animations on that element, as well as any nested elements. When true, the &lt;code&gt;@.disabled&lt;/code&gt; binding prevents all animations from rendering.</source>
          <target state="translated">&lt;code&gt;@.disabled&lt;/code&gt; と呼ばれる特別なアニメーションコントロールバインディングをHTML要素に配置して、その要素およびネストされた要素のアニメーションを無効にすることができます。trueの場合、 &lt;code&gt;@.disabled&lt;/code&gt; バインディングにより、すべてのアニメーションがレンダリングされなくなります。</target>
        </trans-unit>
        <trans-unit id="28a932b87bea89ca4c6d50864f98e96e807d3475" translate="yes" xml:space="preserve">
          <source>A special-purpose library or API; see &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;Domain-specific language&lt;/a&gt;. Angular extends TypeScript with domain-specific languages for a number of domains relevant to Angular apps, defined in NgModules such as &lt;a href=&quot;animations&quot;&gt;animations&lt;/a&gt;, &lt;a href=&quot;forms&quot;&gt;forms&lt;/a&gt;, and &lt;a href=&quot;router&quot;&gt;routing and navigation&lt;/a&gt;.</source>
          <target state="translated">専用ライブラリまたはAPI; &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;ドメイン固有の言語を&lt;/a&gt;参照してください。AngularはTypeScriptを拡張し、&lt;a href=&quot;animations&quot;&gt;アニメーション&lt;/a&gt;、&lt;a href=&quot;forms&quot;&gt;フォーム&lt;/a&gt;、&lt;a href=&quot;router&quot;&gt;ルーティング、ナビゲーション&lt;/a&gt;などのNgModulesで定義された、Angularアプリに関連するいくつかのドメインのドメイン固有言語を使用します。</target>
        </trans-unit>
        <trans-unit id="8d1c91cfd2fa14b6be729ec66d8172ea27c64e6a" translate="yes" xml:space="preserve">
          <source>A spy directive can provide insight into a DOM object that you cannot change directly. Obviously you can't touch the implementation of a native &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. You can't modify a third party component either. But you can watch both with a directive.</source>
          <target state="translated">スパイディレクティブは、直接変更できないDOMオブジェクトへの洞察を提供できます。もちろん、ネイティブの &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; の実装には触れられません。サードパーティのコンポーネントも変更できません。ただし、ディレクティブを使用して両方を監視できます。</target>
        </trans-unit>
        <trans-unit id="7a34ef45b9243824ac8ad104edcd27a0ba07fb88" translate="yes" xml:space="preserve">
          <source>A spy for &lt;a href=&quot;../location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; that allows tests to fire simulated location events.</source>
          <target state="translated">テストがシミュレートされた位置イベントを起動できるようにする&lt;a href=&quot;../location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;のスパイ。</target>
        </trans-unit>
        <trans-unit id="069d78528aa32feecf64a53f5cad5729aab0a2e3" translate="yes" xml:space="preserve">
          <source>A spy for &lt;a href=&quot;location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; that allows tests to fire simulated location events.</source>
          <target state="translated">テストがシミュレートされた位置イベントを起動できるようにする&lt;a href=&quot;location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;のスパイ。</target>
        </trans-unit>
        <trans-unit id="70bf824cd7347a77618ce7faa1c6b086d7a03e3f" translate="yes" xml:space="preserve">
          <source>A state-change string takes the form &quot;state1 =&amp;gt; state2&quot;, where each side is a defined animation state, or an asterix (*) to refer to a dynamic start or end state.</source>
          <target state="translated">状態変更文字列は、「state1 =&amp;gt; state2」の形式をとります。各サイドは、定義されたアニメーション状態、または動的な開始または終了状態を示すアスタリスク（*）です。</target>
        </trans-unit>
        <trans-unit id="33d604ab8f39d07d37d2c30931848cefcdeac188" translate="yes" xml:space="preserve">
          <source>A static analysis tool that checks TypeScript code for readability, maintainability, and functionality errors.</source>
          <target state="translated">TypeScript コードの可読性、保守性、機能性のエラーをチェックする静的解析ツール。</target>
        </trans-unit>
        <trans-unit id="df0b2f1e108e2b0b27eaa546a2ef0116df1fff42" translate="yes" xml:space="preserve">
          <source>A static server routinely returns &lt;code&gt;index.html&lt;/code&gt; when it receives a request for &lt;code&gt;http://www.mysite.com/&lt;/code&gt;. But it rejects &lt;code&gt;http://www.mysite.com/heroes/42&lt;/code&gt; and returns a &lt;code&gt;404 - Not Found&lt;/code&gt; error &lt;em&gt;unless&lt;/em&gt; it is configured to return &lt;code&gt;index.html&lt;/code&gt; instead.</source>
          <target state="translated">静的サーバーは、 &lt;code&gt;http://www.mysite.com/&lt;/code&gt; に対するリクエストを受け取ると、日常的に &lt;code&gt;index.html&lt;/code&gt; を返します。しかし、代わりに &lt;code&gt;index.html&lt;/code&gt; を返すように構成されてい&lt;em&gt;ない限り&lt;/em&gt;、 &lt;code&gt;http://www.mysite.com/heroes/42&lt;/code&gt; を拒否し、 &lt;code&gt;404 - Not Found&lt;/code&gt; エラーを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb8aebeb140e3e794e8e71e965ce9b6a1d9b29a4" translate="yes" xml:space="preserve">
          <source>A strategy for extracting and merging URLs. Used for AngularJS to Angular migrations.</source>
          <target state="translated">URLを抽出してマージするための戦略。AngularJSからAngularへの移行に使用します。</target>
        </trans-unit>
        <trans-unit id="2e0742331cebdd301468cdb2b697b7e4360d857a" translate="yes" xml:space="preserve">
          <source>A strategy for re-using routes.</source>
          <target state="translated">ルートを再利用するための戦略。</target>
        </trans-unit>
        <trans-unit id="aff9c7c5b6b50fb73398838cd6862bb27d6daa66" translate="yes" xml:space="preserve">
          <source>A strategy for tracking changes over time to an iterable. Used by &lt;a href=&quot;../common/ngforof&quot;&gt;&lt;code&gt;NgForOf&lt;/code&gt;&lt;/a&gt; to respond to changes in an iterable by effecting equivalent changes in the DOM.</source>
          <target state="translated">時間の経過に伴う変化をイテラブルに追跡するための戦略。DOMで同等の変更を行うことにより、&lt;a href=&quot;../common/ngforof&quot;&gt; &lt;code&gt;NgForOf&lt;/code&gt; &lt;/a&gt;変更に応答するためにNgForOfによって使用されます。</target>
        </trans-unit>
        <trans-unit id="9abae0d3fd0569dcd3f80cc31ed35dfda23db8af" translate="yes" xml:space="preserve">
          <source>A strategy for tracking changes over time to an iterable. Used by &lt;a href=&quot;common/ngforof&quot;&gt;&lt;code&gt;NgForOf&lt;/code&gt;&lt;/a&gt; to respond to changes in an iterable by effecting equivalent changes in the DOM.</source>
          <target state="translated">時間の経過に伴う変化をイテラブルに追跡するための戦略。DOMで同等の変更を行うことにより、&lt;a href=&quot;common/ngforof&quot;&gt; &lt;code&gt;NgForOf&lt;/code&gt; &lt;/a&gt;変更に応答するためにNgForOfによって使用されます。</target>
        </trans-unit>
        <trans-unit id="0d666977cdc5d148eaadf69ff83a95bc8b0bbf90" translate="yes" xml:space="preserve">
          <source>A string containing the currency symbol or its name, such as &quot;$&quot; or &quot;Canadian Dollar&quot;. Used in output string, but does not affect the operation of the function.</source>
          <target state="translated">通貨記号またはその名前を含む文字列、例えば&quot;$&quot;や &quot;Canadian Dollar &quot;など。出力文字列で使用されますが、関数の動作には影響しません。</target>
        </trans-unit>
        <trans-unit id="d4f53e9917e374bd5c7a6e00fdeaf07cbebd1ecf" translate="yes" xml:space="preserve">
          <source>A string defining the template reference and optionally the context object for the template.</source>
          <target state="translated">テンプレート参照を定義する文字列。</target>
        </trans-unit>
        <trans-unit id="4218b63c689582c9116fc1d347ea4cff053ba011" translate="yes" xml:space="preserve">
          <source>A string of the form &lt;code&gt;path/to/file#exportName&lt;/code&gt; that acts as a URL for a set of routes to load, or a function that returns such a set.</source>
          <target state="translated">ロードする一連のルートのURLとして機能する &lt;code&gt;path/to/file#exportName&lt;/code&gt; 形式の文字列、またはそのようなセットを返す関数。</target>
        </trans-unit>
        <trans-unit id="5bb334481e943a7ec420d73477b9b7576ee9a9e4" translate="yes" xml:space="preserve">
          <source>A string of the form &lt;code&gt;path/to/file#exportName&lt;/code&gt; that acts as a URL for a set of routes to load.</source>
          <target state="translated">ロードする一連のルートのURLとして機能する、 &lt;code&gt;path/to/file#exportName&lt;/code&gt; 形式の文字列。</target>
        </trans-unit>
        <trans-unit id="18b1ff791f4ab843946300c849836dd8ec44680e" translate="yes" xml:space="preserve">
          <source>A string that Angular prepends to generated selectors. Can be customized to identify an app or feature area.</source>
          <target state="translated">Angularが生成されたセレクタに前置する文字列。アプリや機能領域を識別するためにカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="1d99e39af1598920c88efd736f47a905616a5462" translate="yes" xml:space="preserve">
          <source>A structural directive puts a &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; to work as you'll see when you &lt;a href=&quot;structural-directives#unless&quot;&gt;write your own structural directive&lt;/a&gt;.</source>
          <target state="translated">構造ディレクティブは、&lt;a href=&quot;structural-directives#unless&quot;&gt;独自の構造ディレクティブ&lt;/a&gt;を記述したときにわかるように &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; を機能させます。</target>
        </trans-unit>
        <trans-unit id="a7c157be16fc3a14b41213b09c95f55bf3708632" translate="yes" xml:space="preserve">
          <source>A structural directive that adds or removes templates (displaying or hiding views) when the next match expression matches the switch expression.</source>
          <target state="translated">次のマッチ式がスイッチ式にマッチしたときに、テンプレートを追加したり削除したりする(ビューを表示したり非表示にしたりする)構造ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="f748235af1be7e44e4598bbe98b3686222a813aa" translate="yes" xml:space="preserve">
          <source>A structural directive that conditionally includes a template based on the value of an expression coerced to Boolean. When the expression evaluates to true, Angular renders the template provided in a &lt;code&gt;then&lt;/code&gt; clause, and when false or null, Angular renders the template provided in an optional &lt;code&gt;else&lt;/code&gt; clause. The default template for the &lt;code&gt;else&lt;/code&gt; clause is blank.</source>
          <target state="translated">ブールに強制変換された式の値に基づくテンプレートを条件付きで含む構造ディレクティブ。式の評価がtrueの場合、Angularは &lt;code&gt;then&lt;/code&gt; 句で提供されるテンプレートをレンダリングし、falseまたはnullの場合、Angularはオプションの &lt;code&gt;else&lt;/code&gt; 句で提供されるテンプレートをレンダリングします。 &lt;code&gt;else&lt;/code&gt; 句のデフォルトテンプレートは空白です。</target>
        </trans-unit>
        <trans-unit id="dd4680b4f9240c47bd096bcd0bf902e137cd81a4" translate="yes" xml:space="preserve">
          <source>A structure that provides metadata for a class. See &lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;.</source>
          <target state="translated">クラスのメタデータを提供する構造。&lt;a href=&quot;glossary#decorator&quot;&gt;デコレータを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7e009ff3bda9c17a3c21c70b9219d153da51904f" translate="yes" xml:space="preserve">
          <source>A subanimation can be queried by a parent and then later animated with the &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; function.</source>
          <target state="translated">サブアニメーションは、親から照会され、後で &lt;code&gt;&lt;a href=&quot;../api/animations/animatechild&quot;&gt;animateChild&lt;/a&gt;()&lt;/code&gt; 関数でアニメーション化できます。</target>
        </trans-unit>
        <trans-unit id="41fa62814924dac89aa9ada1e279e24e67392f1e" translate="yes" xml:space="preserve">
          <source>A subscription to change, connect, and disconnect events in the custom element.</source>
          <target state="translated">カスタム要素のイベントを変更、接続、切断するためのサブスクリプション。</target>
        </trans-unit>
        <trans-unit id="6fc60237d9049bfebb9bf3c583da975aa13fe821" translate="yes" xml:space="preserve">
          <source>A subsection with &lt;strong&gt;markdown&lt;/strong&gt; formatted text.</source>
          <target state="translated">&lt;strong&gt;マークダウン&lt;/strong&gt;形式のテキストを含むサブセクション。</target>
        </trans-unit>
        <trans-unit id="75df14fc8d3c539ffce328700d6c2714508f544d" translate="yes" xml:space="preserve">
          <source>A synchronous &lt;code&gt;beforeEach()&lt;/code&gt; that performs the remaining setup.</source>
          <target state="translated">残りのセットアップを実行する同期 &lt;code&gt;beforeEach()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5a1951e4b3a7997f917a0a8771a1c00faa7de411" translate="yes" xml:space="preserve">
          <source>A synchronous validator function, or an array of such functions, or an &lt;code&gt;&lt;a href=&quot;abstractcontroloptions&quot;&gt;AbstractControlOptions&lt;/a&gt;&lt;/code&gt; object that contains validation functions and a validation trigger.</source>
          <target state="translated">同期検証関数、そのような関数の配列、または検証関数と検証トリガーを含む &lt;code&gt;&lt;a href=&quot;abstractcontroloptions&quot;&gt;AbstractControlOptions&lt;/a&gt;&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="8e602fb0822cd1e41b2e8635d1b7e2ee92f0fc30" translate="yes" xml:space="preserve">
          <source>A target for global event notifications. One of &quot;window&quot;, &quot;document&quot;, or &quot;body&quot;.</source>
          <target state="translated">グローバルイベント通知の対象。window&quot;、&quot;document&quot;、&quot;body &quot;のいずれか。</target>
        </trans-unit>
        <trans-unit id="c49e4e510fb773309907c7090d51199cb5646ab2" translate="yes" xml:space="preserve">
          <source>A technique for adding a component to the DOM at run time. Requires that you exclude the component from compilation and then connect it to Angular's change-detection and event-handling framework when you add it to the DOM.</source>
          <target state="translated">実行時にコンポーネントを DOM に追加するテクニックです。コンポーネントをコンパイルから除外し、DOMに追加する際にAngularの変更検出とイベント処理フレームワークに接続する必要があります。</target>
        </trans-unit>
        <trans-unit id="8e91a35d0e33492ee4275f0669de02e4f926b6fa" translate="yes" xml:space="preserve">
          <source>A technique that generates static application pages on the server, and can generate and serve those pages in response to requests from browsers. It can also pre-generate pages as HTML files that you serve later.</source>
          <target state="translated">サーバー上に静的なアプリケーションページを生成し、ブラウザからのリクエストに応じてそれらのページを生成して提供することができる技術です。また、ページを HTML ファイルとして事前に生成し、後で提供することもできます。</target>
        </trans-unit>
        <trans-unit id="638899fd7ea8912375736917813c496e0c94cec3" translate="yes" xml:space="preserve">
          <source>A template &lt;em&gt;reference&lt;/em&gt; variable (&lt;code&gt;#phone&lt;/code&gt;) is not the same as a template &lt;em&gt;input&lt;/em&gt; variable (&lt;code&gt;let phone&lt;/code&gt;) such as in an &lt;a href=&quot;template-syntax#template-input-variable&quot;&gt;&lt;code&gt;*ngFor&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;Structural Directives&lt;/em&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">テンプレート&lt;em&gt;参照&lt;/em&gt;変数（ &lt;code&gt;#phone&lt;/code&gt; ）は、&lt;a href=&quot;template-syntax#template-input-variable&quot;&gt; &lt;code&gt;*ngFor&lt;/code&gt; &lt;/a&gt;などのテンプレート&lt;em&gt;入力&lt;/em&gt;変数（ &lt;code&gt;let phone&lt;/code&gt; ）とは異なります。詳細については、&lt;a href=&quot;structural-directives#template-input-variable&quot;&gt;&lt;em&gt;構造指令&lt;/em&gt;&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1dfbac8c9633ea6918e4e33ebf0a38f1b1944721" translate="yes" xml:space="preserve">
          <source>A template &lt;strong&gt;expression&lt;/strong&gt; produces a value and appears within the double curly braces, &lt;code&gt;{{ }}&lt;/code&gt;. Angular executes the expression and assigns it to a property of a binding target; the target could be an HTML element, a component, or a directive.</source>
          <target state="translated">テンプレート&lt;strong&gt;式&lt;/strong&gt;は値を生成し、二重中括弧 &lt;code&gt;{{ }}&lt;/code&gt; 内に表示されます。Angularは式を実行し、それをバインディングターゲットのプロパティに割り当てます。ターゲットは、HTML要素、コンポーネント、またはディレクティブです。</target>
        </trans-unit>
        <trans-unit id="3399fe86e1c043a76a747559ebc2584954d3d035" translate="yes" xml:space="preserve">
          <source>A template &lt;strong&gt;statement&lt;/strong&gt; responds to an &lt;strong&gt;event&lt;/strong&gt; raised by a binding target such as an element, component, or directive. You'll see template statements in the &lt;a href=&quot;template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt; section, appearing in quotes to the right of the &lt;code&gt;=&lt;/code&gt; symbol as in &lt;code&gt;(event)=&quot;statement&quot;&lt;/code&gt;.</source>
          <target state="translated">テンプレート&lt;strong&gt;ステートメント&lt;/strong&gt;は、要素、コンポーネント、ディレクティブなどのバインディングターゲットによって発生した&lt;strong&gt;イベントに&lt;/strong&gt;応答します。&lt;a href=&quot;template-syntax#event-binding&quot;&gt;イベントバインディング&lt;/a&gt;セクションのテンプレートステートメントが、 &lt;code&gt;(event)=&quot;statement&quot;&lt;/code&gt; のように &lt;code&gt;=&lt;/code&gt; 記号の右側に引用符で囲まれて表示されます。</target>
        </trans-unit>
        <trans-unit id="3ba264b05103cceb73a697cb4002c6fe302d7682" translate="yes" xml:space="preserve">
          <source>A template can also have any number of &lt;em&gt;named&lt;/em&gt; outlets. Each named outlet has its own set of routes with their own components. Multiple outlets can be displaying different content, determined by different routes, all at the same time.</source>
          <target state="translated">テンプレートには、&lt;em&gt;名前付き&lt;/em&gt;アウトレットをいくつでも含めることができます。それぞれの名前付きアウトレットには、独自のコンポーネントを持つ独自のルートのセットがあります。複数のアウトレットが、さまざまなルートによって決定されるさまざまなコンテンツをすべて同時に表示できます。</target>
        </trans-unit>
        <trans-unit id="e53e96f015d564a357a09d35601208b867f150ce" translate="yes" xml:space="preserve">
          <source>A template can use exported declarables from any imported module, including those from modules that are imported indirectly and re-exported. For example, &lt;code&gt;ModuleA&lt;/code&gt; imports &lt;code&gt;ModuleB&lt;/code&gt;, and also exports it, which makes the declarables from &lt;code&gt;ModuleB&lt;/code&gt; available wherever &lt;code&gt;ModuleA&lt;/code&gt; is imported.</source>
          <target state="translated">テンプレートは、間接的にインポートされて再エクスポートされたモジュールからの宣言を含む、インポートされたモジュールからエクスポートされた宣言を使用できます。例えば、 &lt;code&gt;ModuleA&lt;/code&gt; の輸入 &lt;code&gt;ModuleB&lt;/code&gt; からdeclarablesになりた、ともそれをエクスポート &lt;code&gt;ModuleB&lt;/code&gt; がどこに利用できる &lt;code&gt;ModuleA&lt;/code&gt; がインポートされます。</target>
        </trans-unit>
        <trans-unit id="390c41bd3a5d88b462a0eb30f1966d9bfe67ea64" translate="yes" xml:space="preserve">
          <source>A template combines HTML with Angular markup that can modify HTML elements before they are displayed. Template &lt;em&gt;directives&lt;/em&gt; provide program logic, and &lt;em&gt;binding markup&lt;/em&gt; connects your application data and the DOM. There are two types of data binding:</source>
          <target state="translated">テンプレートは、HTMLとAngularマークアップを組み合わせて、HTML要素を表示する前に変更できるようにします。テンプレート&lt;em&gt;ディレクティブ&lt;/em&gt;はプログラムロジックを提供し、&lt;em&gt;バインディングマークアップ&lt;/em&gt;はアプリケーションデータとDOMを接続します。データバインディングには次の2つのタイプがあります。</target>
        </trans-unit>
        <trans-unit id="26d7d91bd3438a33922e9f989bb798c48de79ba5" translate="yes" xml:space="preserve">
          <source>A template combines straight HTML with Angular &lt;a href=&quot;glossary#data-binding&quot;&gt;data-binding&lt;/a&gt; syntax, &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt;, and &lt;a href=&quot;glossary#template-expression&quot;&gt;template expressions&lt;/a&gt; (logical constructs). The Angular elements insert or calculate values that modify the HTML elements before the page is displayed.</source>
          <target state="translated">テンプレートは、ストレートHTMLとAngular &lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディング&lt;/a&gt;構文、&lt;a href=&quot;glossary#directive&quot;&gt;ディレクティブ&lt;/a&gt;、および&lt;a href=&quot;glossary#template-expression&quot;&gt;テンプレート式&lt;/a&gt;（論理構造）を組み合わせたものです。Angular要素は、ページが表示される前にHTML要素を変更する値を挿入または計算します。</target>
        </trans-unit>
        <trans-unit id="8d2e74a99424e6bcbe0ee669cd69bc0cd5375754" translate="yes" xml:space="preserve">
          <source>A template expression should not change any application state other than the value of the target property.</source>
          <target state="translated">テンプレート式は、ターゲット・プロパティの値以外のアプリケーションの状態を変更してはなりません。</target>
        </trans-unit>
        <trans-unit id="f48dc3bdb1500520689adb8438d8eb72cfeab345" translate="yes" xml:space="preserve">
          <source>A template is associated with a &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; class through the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;. The HTML can be provided inline, as the value of the &lt;code&gt;template&lt;/code&gt; property, or in a separate HTML file linked through the &lt;code&gt;templateUrl&lt;/code&gt; property.</source>
          <target state="translated">テンプレートが関連付けられている&lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;を介してクラス &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;デコレータ&lt;/a&gt;。HTMLは、 &lt;code&gt;template&lt;/code&gt; プロパティの値としてインラインで、または &lt;code&gt;templateUrl&lt;/code&gt; プロパティを介してリンクされた別のHTMLファイルで提供できます。</target>
        </trans-unit>
        <trans-unit id="79091c1a52a2c3efbb6119802157bc2315a22661" translate="yes" xml:space="preserve">
          <source>A template looks like regular HTML, except that it also contains Angular &lt;a href=&quot;template-syntax&quot;&gt;template syntax&lt;/a&gt;, which alters the HTML based on your app's logic and the state of app and DOM data. Your template can use &lt;em&gt;data binding&lt;/em&gt; to coordinate the app and DOM data, &lt;em&gt;pipes&lt;/em&gt; to transform data before it is displayed, and &lt;em&gt;directives&lt;/em&gt; to apply app logic to what gets displayed.</source>
          <target state="translated">テンプレートは通常のHTMLのように見えますが、アプリのロジックとアプリの状態とDOMデータに基づいてHTMLを変更するAngular &lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt;も含まれています。テンプレートでは、&lt;em&gt;データバインディング&lt;/em&gt;を使用してアプリとDOMデータを調整し、&lt;em&gt;パイプ&lt;/em&gt;を使用して&lt;em&gt;データを&lt;/em&gt;表示する前にデータを変換し、&lt;em&gt;ディレクティブ&lt;/em&gt;を使用して、表示されるものにアプリロジックを適用できます。</target>
        </trans-unit>
        <trans-unit id="7c5bb4b558793d400799ee501153dd43050c0f50" translate="yes" xml:space="preserve">
          <source>A template reference variable as a string (e.g. query &lt;code&gt;&amp;lt;my-component #cmp&amp;gt;&amp;lt;/my-component&amp;gt;&lt;/code&gt; with &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;('cmp')&lt;/code&gt;)</source>
          <target state="translated">文字列としてテンプレート参照変数（例えばクエリ &lt;code&gt;&amp;lt;my-component #cmp&amp;gt;&amp;lt;/my-component&amp;gt;&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;('cmp')&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="a64371e181e13f663c10dd5156afe9284379b619" translate="yes" xml:space="preserve">
          <source>A template statement &lt;em&gt;has a side effect&lt;/em&gt;. That's the whole point of an event. It's how you update application state from user action.</source>
          <target state="translated">テンプレートステートメント&lt;em&gt;には副作用があります&lt;/em&gt;。それがイベントの要点です。ユーザーのアクションからアプリケーションの状態を更新する方法です。</target>
        </trans-unit>
        <trans-unit id="057331b0bba82c6918603985ae29364ad82f9aad" translate="yes" xml:space="preserve">
          <source>A template string</source>
          <target state="translated">テンプレート文字列</target>
        </trans-unit>
        <trans-unit id="44907ef29b35716829be6e0df33741d8a03a2331" translate="yes" xml:space="preserve">
          <source>A template to show if the condition expression evaluates to false.</source>
          <target state="translated">条件式がFalseとして評価されるかどうかを示すテンプレート。</target>
        </trans-unit>
        <trans-unit id="e5e7d10908e311e46e226f49b73a51107d39d05e" translate="yes" xml:space="preserve">
          <source>A template to show if the condition expression evaluates to true.</source>
          <target state="translated">条件式が真と評価されるかどうかを示すテンプレート。</target>
        </trans-unit>
        <trans-unit id="082f2b84e3cf46271310c2eefe1584ca33c55ef0" translate="yes" xml:space="preserve">
          <source>A template with no substitutions</source>
          <target state="translated">置換のないテンプレート</target>
        </trans-unit>
        <trans-unit id="11a65ba35becc62fa80f1bb7d7ca46f919cd6a55" translate="yes" xml:space="preserve">
          <source>A template with substitutions</source>
          <target state="translated">置換が可能なテンプレート</target>
        </trans-unit>
        <trans-unit id="d55dc070f82d41692707274fa414fd9f75b4f218" translate="yes" xml:space="preserve">
          <source>A test cannot get to child injector services from the fixture injector. And &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; can't configure them either.</source>
          <target state="translated">テストは、フィクスチャインジェクタから子インジェクタサービスに到達できません。また、 &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; もそれらを構成できません。</target>
        </trans-unit>
        <trans-unit id="3396b2f93458c83e5c6436663b0c4629c04034fb" translate="yes" xml:space="preserve">
          <source>A test file for the &lt;code&gt;HeroDetailComponent&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; クラスのテストファイル。</target>
        </trans-unit>
        <trans-unit id="5b2009af28e4f188315adb0666f75bfca6c5c409" translate="yes" xml:space="preserve">
          <source>A timezone offset (such as &lt;code&gt;'+0430'&lt;/code&gt;), or a standard UTC/GMT or continental US timezone abbreviation. When not supplied, uses the end-user's local system timezone.</source>
          <target state="translated">タイムゾーンオフセット（ &lt;code&gt;'+0430'&lt;/code&gt; など）、または標準のUTC / GMTまたは米国大陸のタイムゾーンの省略形。指定しない場合、エンドユーザーのローカルシステムのタイムゾーンを使用します。</target>
        </trans-unit>
        <trans-unit id="3431cf9e8ee99a6d7d9fd3952d9c908a92bcfaba" translate="yes" xml:space="preserve">
          <source>A token for third-party components that can register themselves with NgProbe.</source>
          <target state="translated">NgProbeに自分自身を登録できるサードパーティコンポーネント用のトークン。</target>
        </trans-unit>
        <trans-unit id="0a3fbe53af4b12fee9f2a0eafc013a35704bbb6c" translate="yes" xml:space="preserve">
          <source>A token that indicates an opaque platform id.</source>
          <target state="translated">不透明なプラットフォームIDを示すトークン。</target>
        </trans-unit>
        <trans-unit id="dc797053d7adf8d5699b3d3c81f1fe17f0afb422" translate="yes" xml:space="preserve">
          <source>A token which indicates the root directory of the application</source>
          <target state="translated">アプリケーションのルートディレクトリを示すトークン</target>
        </trans-unit>
        <trans-unit id="750533e8c4c0470f8b0ed496f42ee55152feb250" translate="yes" xml:space="preserve">
          <source>A tool for implementing &lt;a href=&quot;glossary#server-side-rendering&quot;&gt;server-side rendering&lt;/a&gt; of an Angular application. When integrated with an app, Universal generates and serves static pages on the server in response to requests from browsers. The initial static page serves as a fast-loading placeholder while the full application is being prepared for normal execution in the browser.</source>
          <target state="translated">Angularアプリケーションの&lt;a href=&quot;glossary#server-side-rendering&quot;&gt;サーバー側レンダリング&lt;/a&gt;を実装するためのツール。Universalは、アプリと統合されると、ブラウザーからのリクエストに応じてサーバー上に静的ページを生成して提供します。最初の静的ページは、ブラウザーでの通常の実行のためにアプリケーション全体が準備されている間、高速にロードされるプレースホルダーとして機能します。</target>
        </trans-unit>
        <trans-unit id="86777609ab9ebd69c3463a9cbae4498b9a7f9dba" translate="yes" xml:space="preserve">
          <source>A tool that configures and implements navigation among states and &lt;a href=&quot;glossary#view&quot;&gt;views&lt;/a&gt; within an Angular app.</source>
          <target state="translated">Angularアプリ内の状態と&lt;a href=&quot;glossary#view&quot;&gt;ビュー&lt;/a&gt;間のナビゲーションを構成および実装するツール。</target>
        </trans-unit>
        <trans-unit id="c54f42d3f2be1b7a7ae5c194f6735dcf1a14ce7e" translate="yes" xml:space="preserve">
          <source>A transformation is represented by an &lt;code&gt;Action&lt;/code&gt;. There are four action types: &lt;code&gt;&lt;a href=&quot;schematics-authoring&quot;&gt;Create&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;Rename&lt;/code&gt;, &lt;code&gt;Overwrite&lt;/code&gt;, and &lt;code&gt;Delete&lt;/code&gt;.</source>
          <target state="translated">変換は &lt;code&gt;Action&lt;/code&gt; によって表されます。アクションタイプには、 &lt;code&gt;&lt;a href=&quot;schematics-authoring&quot;&gt;Create&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;Rename&lt;/code&gt; 、 &lt;code&gt;Overwrite&lt;/code&gt; 、および &lt;code&gt;Delete&lt;/code&gt; の 4つがあります。</target>
        </trans-unit>
        <trans-unit id="d1cb3643786137426ab03452ee4b52f1154d1746" translate="yes" xml:space="preserve">
          <source>A transition of &lt;code&gt;* =&amp;gt; void&lt;/code&gt; applies when the element leaves a view, regardless of what state it was in before it left.</source>
          <target state="translated">&lt;code&gt;* =&amp;gt; void&lt;/code&gt; 遷移は、要素がビューを離れるときに適用され、要素が去る前の状態に関係ありません。</target>
        </trans-unit>
        <trans-unit id="05cb012e28ee419aa65bdc4e6520a11fc4ae45fa" translate="yes" xml:space="preserve">
          <source>A transition of &lt;code&gt;void =&amp;gt; *&lt;/code&gt; applies when the element enters a view, regardless of what state it assumes when entering.</source>
          <target state="translated">要素がビューに入るとき、入るときにどのような状態になるかに関係なく、 &lt;code&gt;void =&amp;gt; *&lt;/code&gt; 遷移が適用されます。</target>
        </trans-unit>
        <trans-unit id="6e59e7be860571130a89e00f1b9b8b7f8d38f516" translate="yes" xml:space="preserve">
          <source>A tree of related views that can be acted on as a unit. The root view is a component's &lt;em&gt;host view&lt;/em&gt;. A host view can be the root of a tree of &lt;em&gt;embedded views&lt;/em&gt;, collected in a &lt;em&gt;view container&lt;/em&gt; (&lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt;) attached to an anchor element in the hosting component. The view hierarchy is a key part of Angular change detection.</source>
          <target state="translated">ユニットとして操作できる関連ビューのツリー。ルートビューは、コンポーネントの&lt;em&gt;ホストビュー&lt;/em&gt;です。ホストビューは、ホストコンポーネントのアンカー要素にアタッチされた&lt;em&gt;ビューコンテナー&lt;/em&gt;（ &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; ）に収集された、&lt;em&gt;埋め込みビューの&lt;/em&gt;ツリーのルートになることができます。ビュー階層は、角度変化検出の重要な部分です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a02ea2a87c37f17abc59ef229c4fd425acb9c7da" translate="yes" xml:space="preserve">
          <source>A type describing supported iterable types.</source>
          <target state="translated">サポートされている反復可能な型を記述した型。</target>
        </trans-unit>
        <trans-unit id="33e690ef836ea3f977ab4c03c92edfc886056a6d" translate="yes" xml:space="preserve">
          <source>A type which has an &lt;code&gt;InjectorDef&lt;/code&gt; static field.</source>
          <target state="translated">&lt;code&gt;InjectorDef&lt;/code&gt; 静的フィールドを持つタイプ。</target>
        </trans-unit>
        <trans-unit id="ae35e25b3a17753868983fbc14ff9da764e93c33" translate="yes" xml:space="preserve">
          <source>A type-safe key to use with &lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;platform-browser/transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; で使用するタイプセーフなキー。</target>
        </trans-unit>
        <trans-unit id="a94b413e4eb2a589981d65abc4b675155b3b29ec" translate="yes" xml:space="preserve">
          <source>A type-safe key to use with &lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;transferstate&quot;&gt;TransferState&lt;/a&gt;&lt;/code&gt; で使用するタイプセーフなキー。</target>
        </trans-unit>
        <trans-unit id="0d98ac55299036bd42506b5415a7d31cbe5c1907" translate="yes" xml:space="preserve">
          <source>A typical Angular &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; has two properties:</source>
          <target state="translated">典型的なAngular &lt;code&gt;&lt;a href=&quot;../api/router/route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; には2つのプロパティがあります：</target>
        </trans-unit>
        <trans-unit id="24a4ca795d901e7c49a75e02fe55ebd39322b087" translate="yes" xml:space="preserve">
          <source>A typical application has multiple &lt;em&gt;feature areas&lt;/em&gt;, each dedicated to a particular business purpose.</source>
          <target state="translated">一般的なアプリケーションには複数の&lt;em&gt;機能領域があり&lt;/em&gt;、それぞれが特定のビジネス目的専用です。</target>
        </trans-unit>
        <trans-unit id="26787fe4fae606ede8cac23bac2c0cb951bed0bf" translate="yes" xml:space="preserve">
          <source>A typical approach is to divide the setup logic into two separate &lt;code&gt;beforeEach()&lt;/code&gt; functions:</source>
          <target state="translated">典型的なアプローチは、セットアップロジックを2つの個別の &lt;code&gt;beforeEach()&lt;/code&gt; 関数に分割することです。</target>
        </trans-unit>
        <trans-unit id="7c474d7be28289c26fb2cb0462ed89fae7757973" translate="yes" xml:space="preserve">
          <source>A typical document is divided into sections.</source>
          <target state="translated">一般的な文書は、セクションに分かれています。</target>
        </trans-unit>
        <trans-unit id="b5b9f703ac80e450aa4a443b41089755919ef872" translate="yes" xml:space="preserve">
          <source>A typical observable creates a new, independent execution for each subscribed observer. When an observer subscribes, the observable wires up an event handler and delivers values to that observer. When a second observer subscribes, the observable then wires up a new event handler and delivers values to that second observer in a separate execution.</source>
          <target state="translated">典型的なオブザーバブルは、サブスクライブされたオブザーバごとに新しい独立した実行を作成します。オブザーバがサブスクライブすると、オブザーバはイベントハンドラを配線し、そのオブザーバに値を配信します。2 番目のオブザーバがサブスクライブすると、オブザーバブルは新しいイベントハンドラを配線し、別の実行でその 2 番目のオブザーバに値を配信します。</target>
        </trans-unit>
        <trans-unit id="7eabee7b22161b44ff415f2896826a49c8a000d0" translate="yes" xml:space="preserve">
          <source>A unique ID that the router assigns to every router navigation.</source>
          <target state="translated">ルータがすべてのルータのナビゲーションに割り当てる一意のID。</target>
        </trans-unit>
        <trans-unit id="29e9cf47b6056f1b3b0cda3416faf873adbe8c8e" translate="yes" xml:space="preserve">
          <source>A unique identifying string for the new renderer, used when creating unique styles for encapsulation.</source>
          <target state="translated">新しいレンダラーの一意の識別文字列で、カプセル化のために一意のスタイルを作成する際に使用します。</target>
        </trans-unit>
        <trans-unit id="f3182da4f20c4f27c308548ad05030cad96917d2" translate="yes" xml:space="preserve">
          <source>A unique object used for retrieving items from the &lt;a href=&quot;core/reflectiveinjector&quot;&gt;&lt;code&gt;ReflectiveInjector&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;core/reflectiveinjector&quot;&gt; &lt;code&gt;ReflectiveInjector&lt;/code&gt; &lt;/a&gt;から項目を取得するために使用される一意のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4a0d2765e60989cc727ab39d030ef625be61f3b9" translate="yes" xml:space="preserve">
          <source>A unique object used for retrieving items from the &lt;a href=&quot;reflectiveinjector&quot;&gt;&lt;code&gt;ReflectiveInjector&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;reflectiveinjector&quot;&gt; &lt;code&gt;ReflectiveInjector&lt;/code&gt; &lt;/a&gt;から項目を取得するために使用される一意のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="fcec1b9a7310dc3bbc9f1127516c0c07560407ac" translate="yes" xml:space="preserve">
          <source>A user-defined event.</source>
          <target state="translated">ユーザー定義のイベント。</target>
        </trans-unit>
        <trans-unit id="47141a912c3b81d6dba9a3002b028c3101fe15d6" translate="yes" xml:space="preserve">
          <source>A validator is a function that processes a &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; or collection of controls and returns an error map or null. A null map means that validation has passed.</source>
          <target state="translated">バリデーターは、 &lt;code&gt;&lt;a href=&quot;formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; またはコントロールのコレクションを処理し、エラーマップまたはnullを返す関数です。nullマップは、検証が成功したことを意味します。</target>
        </trans-unit>
        <trans-unit id="92f5a26322860fd17d5f20b77b21fc93ff771bd2" translate="yes" xml:space="preserve">
          <source>A value of any type to convert into a JSON-format string.</source>
          <target state="translated">JSON形式の文字列に変換する任意の型の値。</target>
        </trans-unit>
        <trans-unit id="42ec4d1e4e503f137f8b089944e907a8be6250c1" translate="yes" xml:space="preserve">
          <source>A view container instance can contain other view containers, creating a &lt;a href=&quot;../../guide/glossary#view-tree&quot;&gt;view hierarchy&lt;/a&gt;.</source>
          <target state="translated">ビューコンテナインスタンスには他のビューコンテナを含めることができ、&lt;a href=&quot;../../guide/glossary#view-tree&quot;&gt;ビュー階層を&lt;/a&gt;作成します。</target>
        </trans-unit>
        <trans-unit id="c584c12a9194e47599b4dcef87afa7f889356068" translate="yes" xml:space="preserve">
          <source>A view hierarchy can include views from components in the same NgModule, but it also can (and often does) include views from components that are defined in different NgModules.</source>
          <target state="translated">ビュー階層には、同じNgModule内のコンポーネントからのビューを含めることができますが、異なるNgModuleで定義されているコンポーネントからのビューを含めることもできます(そして、多くの場合そうなります)。</target>
        </trans-unit>
        <trans-unit id="8985a30015f187d6df9a40f361288d108a8e8f30" translate="yes" xml:space="preserve">
          <source>A view is specifically represented by a &lt;code&gt;&lt;a href=&quot;../api/core/viewref&quot;&gt;ViewRef&lt;/a&gt;&lt;/code&gt; instance associated with the component. A view that belongs to a component is called a &lt;em&gt;host view&lt;/em&gt;. Views are typically collected into &lt;a href=&quot;glossary#view-tree&quot;&gt;view hierarchies&lt;/a&gt;.</source>
          <target state="translated">ビューは、コンポーネントに関連付けられた &lt;code&gt;&lt;a href=&quot;../api/core/viewref&quot;&gt;ViewRef&lt;/a&gt;&lt;/code&gt; インスタンスによって具体的に表されます。コンポーネントに属するビューは、&lt;em&gt;ホストビュー&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。ビューは通常、&lt;a href=&quot;glossary#view-tree&quot;&gt;ビュー階層&lt;/a&gt;に収集されます。</target>
        </trans-unit>
        <trans-unit id="e744a48c4fc96b96af3c0831c0429217d4b218d0" translate="yes" xml:space="preserve">
          <source>A way to group related &lt;a href=&quot;npm-packages&quot;&gt;npm packages&lt;/a&gt;. NgModules are delivered within scoped packages whose names begin with the Angular &lt;em&gt;scope name&lt;/em&gt;&lt;code&gt;@angular&lt;/code&gt;. For example, &lt;code&gt;@angular/core&lt;/code&gt;, &lt;code&gt;@angular/common&lt;/code&gt;, &lt;code&gt;@angular/forms&lt;/code&gt;, and &lt;code&gt;@angular/router&lt;/code&gt;.</source>
          <target state="translated">関連する&lt;a href=&quot;npm-packages&quot;&gt;npmパッケージ&lt;/a&gt;をグループ化する方法。NgModuleは、名前がAngular &lt;em&gt;スコープ名&lt;/em&gt; &lt;code&gt;@angular&lt;/code&gt; で始まるスコープ付きパッケージ内で提供されます。たとえば、 &lt;code&gt;@angular/core&lt;/code&gt; 、 &lt;code&gt;@angular/common&lt;/code&gt; 、 &lt;code&gt;@angular/forms&lt;/code&gt; 、および &lt;code&gt;@angular/router&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="aea6c080165c9b1cf1ca290f294a0e1e15d1219a" translate="yes" xml:space="preserve">
          <source>A way to initialize and launch an app or system.</source>
          <target state="translated">アプリやシステムを初期化して起動する方法。</target>
        </trans-unit>
        <trans-unit id="7de84fa517d0600bd34fbe77f23fae98b2c2394a" translate="yes" xml:space="preserve">
          <source>A web platform feature, currently supported by most browsers and available in other browsers through polyfills (see &lt;a href=&quot;browser-support&quot;&gt;Browser support&lt;/a&gt;).</source>
          <target state="translated">現在ほとんどのブラウザーでサポートされており、ポリフィルを介して他のブラウザーで使用できるWebプラットフォーム機能（&lt;a href=&quot;browser-support&quot;&gt;ブラウザーサポートを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="0491ffa865b132d34096600025fe291f6f649744" translate="yes" xml:space="preserve">
          <source>A widget module makes components, directives, and pipes available to external modules. Many third-party UI component libraries are widget modules.</source>
          <target state="translated">ウィジェットモジュールは、コンポーネント、ディレクティブ、パイプを外部モジュールで利用できるようにします。多くのサードパーティ製UIコンポーネントライブラリはウィジェットモジュールです。</target>
        </trans-unit>
        <trans-unit id="c123c286126cb911939d4328d7538af26bafd125" translate="yes" xml:space="preserve">
          <source>A widget module should consist entirely of declarations, most of them exported.</source>
          <target state="translated">ウィジェットモジュールは宣言のみで構成され、そのほとんどはエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="d1363cd47892a9e54fc21353cc398b80d7bfd896" translate="yes" xml:space="preserve">
          <source>A widget module should rarely have providers.</source>
          <target state="translated">ウィジェットモジュールはプロバイダを持つことはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="0082cc99be7ad2573dfa020b500df472d84044de" translate="yes" xml:space="preserve">
          <source>A wrapper around a native element inside of a View.</source>
          <target state="translated">ビュー内のネイティブ要素のラッパー。</target>
        </trans-unit>
        <trans-unit id="569a153621b06d91c3e611e12a0d1a67f46c9acd" translate="yes" xml:space="preserve">
          <source>A wrapper around an NgModule that associates it with the providers.</source>
          <target state="translated">NgModule をプロバイダに関連付けるラッパー。</target>
        </trans-unit>
        <trans-unit id="a0a181daba184ac420bae95b36b395b6c75dbb20" translate="yes" xml:space="preserve">
          <source>A wrapper around the &lt;code&gt;XMLHttpRequest&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;XMLHttpRequest&lt;/code&gt; コンストラクターのラッパー。</target>
        </trans-unit>
        <trans-unit id="75bb7803f168acde23c0c49a75c88932db96fef8" translate="yes" xml:space="preserve">
          <source>A yes or no question; ideal for Boolean options.</source>
          <target state="translated">イエスかノーかの質問で、ブール値のオプションに最適です。</target>
        </trans-unit>
        <trans-unit id="9380472e5eeed9e1a820e4f9a691e60741cf67bc" translate="yes" xml:space="preserve">
          <source>A zone client can take action before and after an async operation completes.</source>
          <target state="translated">ゾーンクライアントは、非同期操作が完了する前後にアクションを取ることができます。</target>
        </trans-unit>
        <trans-unit id="6d95c1847219c633950f8f1ceca9761315abfc19" translate="yes" xml:space="preserve">
          <source>AD</source>
          <target state="translated">AD</target>
        </trans-unit>
        <trans-unit id="1457b381fbb905cddb3d309bf2f4371efb24967b" translate="yes" xml:space="preserve">
          <source>ANALYZE_FOR_ENTRY_COMPONENTS</source>
          <target state="translated">ANALYZE_FOR_ENTRY_COMPONENTS</target>
        </trans-unit>
        <trans-unit id="2b8ac4ee175e506d03dd47a6d47d857b5404a60d" translate="yes" xml:space="preserve">
          <source>ANIMATION_MODULE_TYPE</source>
          <target state="translated">ANIMATION_MODULE_TYPE</target>
        </trans-unit>
        <trans-unit id="9e0fc4041d028fe347fad5a2d9a2729531ddfbdf" translate="yes" xml:space="preserve">
          <source>AOT Diagnostic messages</source>
          <target state="translated">AOT診断メッセージ</target>
        </trans-unit>
        <trans-unit id="a6ce97b9cd64e5df34ac5b291f41f70ac7fbb820" translate="yes" xml:space="preserve">
          <source>AOT compilation with Ivy is faster and should be used by default. In the &lt;code&gt;angular.json&lt;/code&gt; workspace configuration file, set the default build options for your project to always use AOT compilation.</source>
          <target state="translated">Ivyを使用したAOTコンパイルはより高速であり、デフォルトで使用する必要があります。で &lt;code&gt;angular.json&lt;/code&gt; ワークスペースの設定ファイル、常にAOTコンパイルを使用するには、プロジェクトのデフォルトのビルドオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="fb9ad954685895e815ce7f2a24207d6e334321af" translate="yes" xml:space="preserve">
          <source>AOT compile the hybrid app</source>
          <target state="translated">AOTがハイブリッドアプリをコンパイル</target>
        </trans-unit>
        <trans-unit id="7defd4c0d43ba96bdc1455de9f1d62e39a502a4f" translate="yes" xml:space="preserve">
          <source>AOT needs to load any AngularJS files that are in the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags in the AngularJS &lt;code&gt;index.html&lt;/code&gt;. An easy way to copy them is to add each to the &lt;code&gt;copy-dist-files.js&lt;/code&gt; file.</source>
          <target state="translated">AOT は、AngularJS &lt;code&gt;index.html&lt;/code&gt; の &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグにあるAngularJS ファイルをロードする必要があります。それらをコピーする簡単な方法は、それぞれを &lt;code&gt;copy-dist-files.js&lt;/code&gt; ファイルに追加することです。</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="9e0c33812161cfe4887e0c04f78c15bd5e61ff42" translate="yes" xml:space="preserve">
          <source>API or Feature</source>
          <target state="translated">APIまたは機能</target>
        </trans-unit>
        <trans-unit id="24be048b8aaf0aecd39a25ebabd04a1dfbbff1a4" translate="yes" xml:space="preserve">
          <source>APP SUPPORT FILES</source>
          <target state="translated">アプリサポートファイル</target>
        </trans-unit>
        <trans-unit id="b8dd61424a1e8acf7ab12bf422537b7caa2d8a51" translate="yes" xml:space="preserve">
          <source>APPLICATION-SPECIFIC CONFIG FILES</source>
          <target state="translated">APPLICATION-SPECIFIC CONFIG FILES</target>
        </trans-unit>
        <trans-unit id="7838fa4fc1d83550cc50eefcb69cbd49986dec3b" translate="yes" xml:space="preserve">
          <source>APP_BASE_HREF</source>
          <target state="translated">APP_BASE_HREF</target>
        </trans-unit>
        <trans-unit id="e3f9a5cb4b1bf9f7b5e4a1785e57db0e2f3d3875" translate="yes" xml:space="preserve">
          <source>APP_BOOTSTRAP_LISTENER</source>
          <target state="translated">APP_BOOTSTRAP_LISTENER</target>
        </trans-unit>
        <trans-unit id="4f6efcda7c9b006c9c3205c1c2a919389bca11e9" translate="yes" xml:space="preserve">
          <source>APP_ID</source>
          <target state="translated">APP_ID</target>
        </trans-unit>
        <trans-unit id="367132b55d2d5e5d02cd3daf8fe2432e965920f5" translate="yes" xml:space="preserve">
          <source>APP_INITIALIZER</source>
          <target state="translated">APP_INITIALIZER</target>
        </trans-unit>
        <trans-unit id="eb73501aa2a666ce6cdb48a50e68af7107aae3af" translate="yes" xml:space="preserve">
          <source>ARIA specification and authoring practices</source>
          <target state="translated">ARIA仕様とオーサリングの実践</target>
        </trans-unit>
        <trans-unit id="9cfd34f083e5ba936648207be86e862772727935" translate="yes" xml:space="preserve">
          <source>ASP.NET 4.x Project</source>
          <target state="translated">ASP.NET 4.xプロジェクト</target>
        </trans-unit>
        <trans-unit id="c34da2b2d91c5e754231cd2ed1aab8be5964f186" translate="yes" xml:space="preserve">
          <source>AUTO_STYLE</source>
          <target state="translated">AUTO_STYLE</target>
        </trans-unit>
        <trans-unit id="f929923568568a4da2be1535144326032933ceb7" translate="yes" xml:space="preserve">
          <source>Abbreviated</source>
          <target state="translated">Abbreviated</target>
        </trans-unit>
        <trans-unit id="feaebecb323d018f6b3268b9f60b3217020dd1c5" translate="yes" xml:space="preserve">
          <source>Abide by the unidirectional data flow rule</source>
          <target state="translated">一方向データフローのルールに従う</target>
        </trans-unit>
        <trans-unit id="eb504ba616a4717b3ecb24820c6b3de4e3cc9b0d" translate="yes" xml:space="preserve">
          <source>About this guide</source>
          <target state="translated">このガイドについて</target>
        </trans-unit>
        <trans-unit id="0a9143d47fb8f5c8ce72c187dbb4f2c8bedf3de9" translate="yes" xml:space="preserve">
          <source>Absolutely.</source>
          <target state="translated">Absolutely.</target>
        </trans-unit>
        <trans-unit id="0f7874c26836804debef6beaae8a9b411cc84311" translate="yes" xml:space="preserve">
          <source>AbstractControl</source>
          <target state="translated">AbstractControl</target>
        </trans-unit>
        <trans-unit id="95b5294224d9b3b7ee74690ec2ba8150fa28a063" translate="yes" xml:space="preserve">
          <source>AbstractControlDirective</source>
          <target state="translated">AbstractControlDirective</target>
        </trans-unit>
        <trans-unit id="a85cd1fc05d53f5f528e32f0696603068e07725e" translate="yes" xml:space="preserve">
          <source>AbstractControlOptions</source>
          <target state="translated">AbstractControlOptions</target>
        </trans-unit>
        <trans-unit id="d9c4da7c847756ecf47d6e7661a78796ecc6932b" translate="yes" xml:space="preserve">
          <source>AbstractFormGroupDirective</source>
          <target state="translated">AbstractFormGroupDirective</target>
        </trans-unit>
        <trans-unit id="8da95c3112e20bafa962dd96d67921e23da58f48" translate="yes" xml:space="preserve">
          <source>AbstractType</source>
          <target state="translated">AbstractType</target>
        </trans-unit>
        <trans-unit id="59a3413d743eddad76795b85c491b59c6c8853f4" translate="yes" xml:space="preserve">
          <source>Abstraction on top of APIs</source>
          <target state="translated">APIの上での抽象化</target>
        </trans-unit>
        <trans-unit id="a817b1091a9c22ad081e2de21e641873685f98ae" translate="yes" xml:space="preserve">
          <source>Accepts an optional argument that moves the virtual clock forward by the specified number of milliseconds, clearing asynchronous activities scheduled within that timeframe. See &lt;a href=&quot;testing#tick&quot;&gt;discussion above&lt;/a&gt;.</source>
          <target state="translated">仮想クロックを指定されたミリ秒単位で進めるオプションの引数を受け入れ、その時間枠内でスケジュールされた非同期アクティビティをクリアします。&lt;a href=&quot;testing#tick&quot;&gt;上記の説明を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2d4ddc28b3740e2c984f99503c7979b4c9792440" translate="yes" xml:space="preserve">
          <source>Access a &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; instance by placing a directive on an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element (or directive prefixed with &lt;code&gt;*&lt;/code&gt;). The &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; for the embedded view is injected into the constructor of the directive, using the &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; token.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 要素（または &lt;code&gt;*&lt;/code&gt; で始まるディレクティブ）にディレクティブを配置して、 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; インスタンスにアクセスします。 &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 埋め込みビューのために用い、指令のコンストラクタに注入さ &lt;code&gt;&lt;a href=&quot;templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; のトークン。</target>
        </trans-unit>
        <trans-unit id="4fe9f9569ccd9b850020bd4b68cd44cf94f2bea4" translate="yes" xml:space="preserve">
          <source>Access individual controls in the group</source>
          <target state="translated">グループ内の個々のコントロールにアクセスする</target>
        </trans-unit>
        <trans-unit id="e8452e7ba1da7691017f4ee4304fc673e6f0bb4a" translate="yes" xml:space="preserve">
          <source>Access the &lt;code&gt;&lt;a href=&quot;viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; of an element by placing a &lt;code&gt;&lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; injected with &lt;code&gt;&lt;a href=&quot;viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; on the element, or use a &lt;code&gt;&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; query.</source>
          <target state="translated">アクセス &lt;code&gt;&lt;a href=&quot;viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; 配置することにより、要素の &lt;code&gt;&lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; を注入 &lt;code&gt;&lt;a href=&quot;viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; 要素上、または使用 &lt;code&gt;&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;&lt;/code&gt; のクエリを。</target>
        </trans-unit>
        <trans-unit id="ce12460889befb2c6aeea85d232ba50839031e52" translate="yes" xml:space="preserve">
          <source>Access the component instance through the fixture and confirm it exists with a Jasmine expectation:</source>
          <target state="translated">フィクスチャを通してコンポーネントのインスタンスにアクセスし、Jasmineの期待値で存在を確認します。</target>
        </trans-unit>
        <trans-unit id="65af474c2ce5a9f03ce39c585f67f4a85352d27c" translate="yes" xml:space="preserve">
          <source>Access the event object with the &lt;code&gt;$event&lt;/code&gt; argument passed to the output event handler:</source>
          <target state="translated">&lt;code&gt;$event&lt;/code&gt; 引数を出力イベントハンドラーに渡して、イベントオブジェクトにアクセスします。</target>
        </trans-unit>
        <trans-unit id="377065746e81f30b11ac698cada8b989e39c4a25" translate="yes" xml:space="preserve">
          <source>Access the group by name</source>
          <target state="translated">名前でグループにアクセスする</target>
        </trans-unit>
        <trans-unit id="cd53bbcc3ef555cef8aef4cd3865d30e34e01e3b" translate="yes" xml:space="preserve">
          <source>Accessibility - Google Web Fundamentals</source>
          <target state="translated">アクセシビリティ-Google ウェブの基礎</target>
        </trans-unit>
        <trans-unit id="69aa472d0ca05d859e2569266226a800dc96ebee" translate="yes" xml:space="preserve">
          <source>Accessibility Resources and Code Examples</source>
          <target state="translated">アクセシビリティに関するリソースとコード例</target>
        </trans-unit>
        <trans-unit id="c76a505ae270ff75148ad28548783d5d27bdc1f8" translate="yes" xml:space="preserve">
          <source>Accessibility attributes</source>
          <target state="translated">アクセシビリティの属性</target>
        </trans-unit>
        <trans-unit id="109b3888496c6d4d396c3784a78f2ef96407235a" translate="yes" xml:space="preserve">
          <source>Accessibility in Angular</source>
          <target state="translated">Angularでのアクセシビリティ</target>
        </trans-unit>
        <trans-unit id="50c48bd5b8278d51c8a1d76f35a5de300302f98d" translate="yes" xml:space="preserve">
          <source>Accordingly, a routing guard can return an &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; or a &lt;code&gt;Promise&amp;lt;boolean&amp;gt;&lt;/code&gt; and the router will wait for the observable to resolve to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">したがって、ルーティングガードは &lt;code&gt;Observable&amp;lt;boolean&amp;gt;&lt;/code&gt; または &lt;code&gt;Promise&amp;lt;boolean&amp;gt;&lt;/code&gt; を返すことができ、ルーターはオブザーバブルが &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; に解決されるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="fe7ef692ecf6fbf5ffd81dba5751890fa9bec6e7" translate="yes" xml:space="preserve">
          <source>Accordingly, the &lt;em&gt;link parameters array&lt;/em&gt; has &lt;em&gt;two&lt;/em&gt; items: the routing &lt;em&gt;path&lt;/em&gt; and a &lt;em&gt;route parameter&lt;/em&gt; that specifies the &lt;code&gt;id&lt;/code&gt; of the selected hero.</source>
          <target state="translated">したがって、&lt;em&gt;リンクパラメーター配列に&lt;/em&gt;は、ルーティング&lt;em&gt;パス&lt;/em&gt;と、選択したヒーローの &lt;code&gt;id&lt;/code&gt; を指定する&lt;em&gt;ルートパラメーターの&lt;/em&gt;&lt;em&gt;2つの&lt;/em&gt;項目があります。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="307094c1dc908f6f3886b8acb63db299f5b02050" translate="yes" xml:space="preserve">
          <source>Acquire the hero with that &lt;code&gt;id&lt;/code&gt; from the server via the &lt;code&gt;HeroService&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; 経由でサーバーからその &lt;code&gt;id&lt;/code&gt; を持つヒーローを取得します</target>
        </trans-unit>
        <trans-unit id="82870c0cce5897721a9489d5d73fb0c52839cf70" translate="yes" xml:space="preserve">
          <source>Activated route</source>
          <target state="translated">活性化されたルート</target>
        </trans-unit>
        <trans-unit id="794c493d158037b9698e41b416ae5ef5793dac99" translate="yes" xml:space="preserve">
          <source>ActivatedRoute</source>
          <target state="translated">ActivatedRoute</target>
        </trans-unit>
        <trans-unit id="6add898d4d5413d812feee7c890c5421a4b7149b" translate="yes" xml:space="preserve">
          <source>ActivatedRoute params and queryParams properties</source>
          <target state="translated">ActivatedRoute パラメータと queryParams プロパティ</target>
        </trans-unit>
        <trans-unit id="2bd22a4d53b9c97bd663bdbc8791d94b18d02f28" translate="yes" xml:space="preserve">
          <source>ActivatedRouteSnapshot</source>
          <target state="translated">ActivatedRouteSnapshot</target>
        </trans-unit>
        <trans-unit id="204b72e97c4752ded21a3362fdcde4b2639b4293" translate="yes" xml:space="preserve">
          <source>Activates a reusable animation. Used with &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">再利用可能なアニメーションをアクティブにします。 &lt;code&gt;&lt;a href=&quot;../api/animations/animation&quot;&gt;animation&lt;/a&gt;()&lt;/code&gt; 使用されます。</target>
        </trans-unit>
        <trans-unit id="8e40bc92630ef5d50c6c2dfcdf9254fff9180d01" translate="yes" xml:space="preserve">
          <source>ActivationEnd</source>
          <target state="translated">ActivationEnd</target>
        </trans-unit>
        <trans-unit id="32dd68023e3907e5c24fd1583232c83b2c6e46d0" translate="yes" xml:space="preserve">
          <source>ActivationEnd`</source>
          <target state="translated">ActivationEnd`</target>
        </trans-unit>
        <trans-unit id="5c0a175ec8a530bff0295cd8daab5114e6e95235" translate="yes" xml:space="preserve">
          <source>ActivationStart</source>
          <target state="translated">ActivationStart</target>
        </trans-unit>
        <trans-unit id="a733b809d2f1233496ab516eed0f3ef75cf3791a" translate="yes" xml:space="preserve">
          <source>Active</source>
          <target state="translated">Active</target>
        </trans-unit>
        <trans-unit id="6e159832dbdf12e00bf06037be4688396deea347" translate="yes" xml:space="preserve">
          <source>Active Ends</source>
          <target state="translated">アクティブエンド</target>
        </trans-unit>
        <trans-unit id="a5325119b52bb8168182fe50c18511f8d177a326" translate="yes" xml:space="preserve">
          <source>Active attempts to interact with the service worker, such as calling &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#checkForUpdate&quot;&gt;SwUpdate.checkForUpdate()&lt;/a&gt;&lt;/code&gt;, return rejected promises.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#checkForUpdate&quot;&gt;SwUpdate.checkForUpdate()&lt;/a&gt;&lt;/code&gt; の呼び出しなど、Service Workerとの対話をアクティブに試みると、拒否されたPromiseが返されます。</target>
        </trans-unit>
        <trans-unit id="a1917d94679e620038f3ead27125a83248fc69a2" translate="yes" xml:space="preserve">
          <source>Active route links cascade down through each level of the route tree, so parent and child router links can be active at the same time. To override this behavior, you can bind to the &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]&lt;/code&gt; input binding with the &lt;code&gt;{ exact: true }&lt;/code&gt; expression. By using &lt;code&gt;{ exact: true }&lt;/code&gt;, a given &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; will only be active if its URL is an exact match to the current URL.</source>
          <target state="translated">アクティブなルートリンクはルートツリーの各レベルを介してカスケード接続されるため、親と子のルーターリンクを同時にアクティブにすることができます。この動作をオーバーライドするには、 &lt;code&gt;{ exact: true }&lt;/code&gt; 式を使用して &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]&lt;/code&gt; 入力バインディングにバインドできます。 &lt;code&gt;{ exact: true }&lt;/code&gt; を使用すると、特定の &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; は、そのURLが現在のURLと完全に一致する場合にのみアクティブになります。</target>
        </trans-unit>
        <trans-unit id="35861d2d31d89b47d85b528c09cc715631b815d9" translate="yes" xml:space="preserve">
          <source>Active router links</source>
          <target state="translated">アクティブルータのリンク</target>
        </trans-unit>
        <trans-unit id="37b1c561bca580bb994b0e5d093be6ab592df8a4" translate="yes" xml:space="preserve">
          <source>Acts as a placeholder that Angular dynamically fills based on the current router state.</source>
          <target state="translated">現在のルーターの状態に基づいてAngularが動的に埋めるプレースホルダとして機能します。</target>
        </trans-unit>
        <trans-unit id="362d51e485a5ede5ae2646cf9e070ec1747d7f2c" translate="yes" xml:space="preserve">
          <source>Acts as the identity function when given a non-forward-ref value.</source>
          <target state="translated">非フォワード参照値が与えられたときに、同一性関数として動作します。</target>
        </trans-unit>
        <trans-unit id="396a77f5610e3812bebfa8b8db9a7c77a059e0fe" translate="yes" xml:space="preserve">
          <source>Adapter interface for retrieving the &lt;code&gt;&lt;a href=&quot;core/testability&quot;&gt;Testability&lt;/a&gt;&lt;/code&gt; service associated for a particular context.</source>
          <target state="translated">特定のコンテキストに関連付けられている &lt;code&gt;&lt;a href=&quot;core/testability&quot;&gt;Testability&lt;/a&gt;&lt;/code&gt; サービスを取得するためのアダプターインターフェイス。</target>
        </trans-unit>
        <trans-unit id="57d55220bc209fce13be971cfa46f83d93fc4bca" translate="yes" xml:space="preserve">
          <source>Adapter interface for retrieving the &lt;code&gt;&lt;a href=&quot;testability&quot;&gt;Testability&lt;/a&gt;&lt;/code&gt; service associated for a particular context.</source>
          <target state="translated">特定のコンテキストに関連付けられている &lt;code&gt;&lt;a href=&quot;testability&quot;&gt;Testability&lt;/a&gt;&lt;/code&gt; サービスを取得するためのアダプターインターフェイス。</target>
        </trans-unit>
        <trans-unit id="3f4a639136be5c62f45bacf8afdbec98e1d5129e" translate="yes" xml:space="preserve">
          <source>Add &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;declarable&lt;/a&gt; classes&amp;mdash;components, directives, and pipes&amp;mdash;to a &lt;code&gt;declarations&lt;/code&gt; list.</source>
          <target state="translated">追加&lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;申告&lt;/a&gt;クラスコンポーネント、ディレクティブ、およびパイプ-に &lt;code&gt;declarations&lt;/code&gt; リストを。</target>
        </trans-unit>
        <trans-unit id="0048cdde3ea2a8ccae7c94a3c7465652b7d6785b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;imports&lt;/code&gt; array of the app module (&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">アプリモジュールの &lt;code&gt;imports&lt;/code&gt; 配列（ &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;）に &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="8f99cfb58142d03bb6f653ac95acc4f30459e350" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; を追加</target>
        </trans-unit>
        <trans-unit id="6d4608c0294735118be24cb2d456a578029e2f1c" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;HeroService.getHero()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService.getHero()&lt;/code&gt; を追加します</target>
        </trans-unit>
        <trans-unit id="182b5d83f0a65e9a325c4c2db7a7c77175219e27" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;HeroService.updateHero()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;HeroService.updateHero()&lt;/code&gt; を追加します</target>
        </trans-unit>
        <trans-unit id="7e46f0329680a6f0e82967b1bf73efd1343668f0" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;PhoneDetailComponent&lt;/code&gt; component to the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;em&gt;declarations&lt;/em&gt; and &lt;em&gt;entryComponents&lt;/em&gt;:</source>
          <target state="translated">&lt;code&gt;PhoneDetailComponent&lt;/code&gt; コンポーネントを &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;em&gt;宣言&lt;/em&gt;と&lt;em&gt;entryComponentsに&lt;/em&gt;追加します。</target>
        </trans-unit>
        <trans-unit id="43ddfc069f86e4fd77627aa8a21d9d1ff6fa458e" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;getHeroes()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;getHeroes()&lt;/code&gt; を追加します</target>
        </trans-unit>
        <trans-unit id="8aded543b54bcc2d04b10175a1390c9cd687831f" translate="yes" xml:space="preserve">
          <source>Add Angular and the other new dependencies to &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">Angularとその他の新しい依存関係を &lt;code&gt;package.json&lt;/code&gt; に追加します</target>
        </trans-unit>
        <trans-unit id="deb2eb3ba8a87a88474cb922247dab94efb0148d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element and, within that, an anchor element that, when clicked, triggers navigation to the &lt;code&gt;HeroesComponent&lt;/code&gt;. The revised &lt;code&gt;AppComponent&lt;/code&gt; template looks like this:</source>
          <target state="translated">&lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; 要素を追加し、その中にアンカー要素を &lt;code&gt;HeroesComponent&lt;/code&gt; ます。この要素をクリックすると、HeroesComponentへのナビゲーションがトリガーされます。改訂された &lt;code&gt;AppComponent&lt;/code&gt; テンプレートは次のようになります。</target>
        </trans-unit>
        <trans-unit id="84449015e98d2c7fe2ee538001f75df10dcd526d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array and inject the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; class, too, but give &lt;code&gt;emoji&lt;/code&gt; a different value. Here, it has a value of 🐶 (puppy).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列を追加し、 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; クラスに &lt;code&gt;AnimalService&lt;/code&gt; も挿入しますが、 &lt;code&gt;emoji&lt;/code&gt; は別の値を指定します。ここでは、値は🐶（子犬）です。</target>
        </trans-unit>
        <trans-unit id="19eab91cf54346d4591c110eddb2a9e3fe610d00" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array with a third animal, 🦔 (hedgehog), to the &lt;code&gt;app.component.ts&lt;/code&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; metadata:</source>
          <target state="translated">3番目の動物🦔（hedgehog）を含む &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列を &lt;code&gt;app.component.ts&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; メタデータに追加します。</target>
        </trans-unit>
        <trans-unit id="21c3d8f9d4e4a561165b7fb36b05d17fcaaa6aee" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; provider with that factory function.</source>
          <target state="translated">そのファクトリー関数で &lt;code&gt;&lt;a href=&quot;../api/core/factorysansprovider#useFactory&quot;&gt;useFactory&lt;/a&gt;&lt;/code&gt; プロバイダーを追加します。</target>
        </trans-unit>
        <trans-unit id="898b1572932b2c74532c4d3ff9e91aaf920c8e7a" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; to the shell template where views will be displayed.</source>
          <target state="translated">ビューが表示されるシェルテンプレートに &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="4e9ef507bc9bbcaa25673401bd1c8c3768c7b26f" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;DashboardComponent&lt;/code&gt; using the CLI:</source>
          <target state="translated">CLIを使用して &lt;code&gt;DashboardComponent&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="bde6cb9ecfe126921ce28e9ac1927149053f7c35" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; to the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; repeater that filters the list of heroes to just those heroes who can fly.</source>
          <target state="translated">&lt;code&gt;FlyingHeroesPipe&lt;/code&gt; を &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; リピーターに追加します。このリピーターは、ヒーローのリストをフィルタリングして、飛行できるヒーローだけをフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="ebea1b8c68f8b57d6ea7ed08f19b491fdea8c3ba" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;color&lt;/code&gt; property to the &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppComponent&lt;/code&gt; に &lt;code&gt;color&lt;/code&gt; プロパティを追加します。</target>
        </trans-unit>
        <trans-unit id="9d2845f19e415459d2b685418f253bf866faaae0" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;confirm()&lt;/code&gt; method to the &lt;code&gt;DialogService&lt;/code&gt; to prompt the user to confirm their intent. The &lt;code&gt;window.confirm&lt;/code&gt; is a &lt;em&gt;blocking&lt;/em&gt; action that displays a modal dialog and waits for user interaction.</source>
          <target state="translated">&lt;code&gt;DialogService&lt;/code&gt; に &lt;code&gt;confirm()&lt;/code&gt; メソッドを追加して、ユーザーに意図を確認するように求めます。 &lt;code&gt;window.confirm&lt;/code&gt; である&lt;em&gt;ブロッキング&lt;/em&gt;作用ディスプレイそのモーダルダイアログとのユーザ対話を待ちます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7b557d38d8fd3a5d1bbdd3ec8cdee76d8578c406" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;crisis-center&lt;/code&gt; route to the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; に &lt;code&gt;crisis-center&lt;/code&gt; ルートを追加します。</target>
        </trans-unit>
        <trans-unit id="f5094eea4018e25225f0949e73b6925ca16ebd3f" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;getHeroes&lt;/code&gt; method to return the &lt;em&gt;mock heroes&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;getHeroes&lt;/code&gt; メソッドを追加して、&lt;em&gt;模擬ヒーロー&lt;/em&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="d89939689ff55adc6378e0312ee22d86c2aa3cc4" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;goBack()&lt;/code&gt;&lt;em&gt;method&lt;/em&gt; to the component class that navigates backward one step in the browser's history stack using the &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; service that you &lt;a href=&quot;toh-pt5#hero-detail-ctor&quot;&gt;injected previously&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;toh-pt5#hero-detail-ctor&quot;&gt;以前に注入&lt;/a&gt;した &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; サービスを使用して、ブラウザーの履歴スタック内の1ステップ前にナビゲートする &lt;code&gt;goBack()&lt;/code&gt; &lt;em&gt;メソッド&lt;/em&gt;をコンポーネントクラスに追加します。</target>
        </trans-unit>
        <trans-unit id="c70e30c1bf0e3c3f35945c6bb0fc4e9abc4165e2" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;hero detail&lt;/code&gt; route</source>
          <target state="translated">&lt;code&gt;hero detail&lt;/code&gt; ルートを追加する</target>
        </trans-unit>
        <trans-unit id="0223569a1885b0f40d10946d1a27ca7bebab7a92" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;hero&lt;/code&gt; property</source>
          <target state="translated">&lt;code&gt;hero&lt;/code&gt; プロパティを追加する</target>
        </trans-unit>
        <trans-unit id="3273615e0d9f1a028c3a5cef8cc50901a513ea6d" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;hero&lt;/code&gt; property to the &lt;code&gt;HeroesComponent&lt;/code&gt; for a hero named &quot;Windstorm.&quot;</source>
          <target state="translated">「 &lt;code&gt;HeroesComponent&lt;/code&gt; 」という名前の &lt;code&gt;hero&lt;/code&gt; プロパティをHeroesComponentに追加します。</target>
        </trans-unit>
        <trans-unit id="fb815b37da4170c9251a154ccd7f101a8dd58cc3" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;hero&lt;/code&gt; property, preceded by the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;（）デコレータが前に付く &lt;code&gt;hero&lt;/code&gt; プロパティを追加します。</target>
        </trans-unit>
        <trans-unit id="69dd6f97661bf507742e04c4dec2321055ba1ead" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;highlightColor&lt;/code&gt; property to the directive class like this:</source>
          <target state="translated">次のように、 &lt;code&gt;highlightColor&lt;/code&gt; プロパティをディレクティブクラスに追加します。</target>
        </trans-unit>
        <trans-unit id="effefff8a43380c9868d530aa7177bf7e683d5be" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;name&lt;/code&gt; attribute to each form-input control.</source>
          <target state="translated">各フォーム入力コントロールに &lt;code&gt;name&lt;/code&gt; 属性を追加します。</target>
        </trans-unit>
        <trans-unit id="0809d1c91317af80188c3279f6943dddacff5baf" translate="yes" xml:space="preserve">
          <source>Add a &lt;em&gt;Dashboard&lt;/em&gt; view.</source>
          <target state="translated">&lt;em&gt;ダッシュボード&lt;/em&gt;ビューを追加し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4ff1fb620609d244c46e936c77a53c5496ded93f" translate="yes" xml:space="preserve">
          <source>Add a &lt;em&gt;go back&lt;/em&gt; button to the bottom of the component template and bind it to the component's &lt;code&gt;goBack()&lt;/code&gt; method.</source>
          <target state="translated">コンポーネントテンプレートの下部に&lt;em&gt;戻る&lt;/em&gt;ボタンを追加し、コンポーネントの &lt;code&gt;goBack()&lt;/code&gt; メソッドにバインドします。</target>
        </trans-unit>
        <trans-unit id="1322afa34cceab2fcb9586335d92cdcade328a40" translate="yes" xml:space="preserve">
          <source>Add a &lt;strong&gt;&lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt; guard that only loads the &lt;code&gt;AdminModule&lt;/code&gt; once the user is logged in &lt;em&gt;and&lt;/em&gt; attempts to access the admin feature area.</source>
          <target state="translated">追加&lt;strong&gt; &lt;code&gt;&lt;a href=&quot;../api/router/canload&quot;&gt;CanLoad&lt;/a&gt;&lt;/code&gt; の&lt;/strong&gt;唯一の負荷があること、ガードを &lt;code&gt;AdminModule&lt;/code&gt; ユーザー一度はログインしている&lt;em&gt;と&lt;/em&gt;、管理機能領域にアクセスしようとする試み。</target>
        </trans-unit>
        <trans-unit id="36f9e17f822a223539dae26ca1231dffbb479235" translate="yes" xml:space="preserve">
          <source>Add a &lt;strong&gt;wildcard&lt;/strong&gt; route to intercept invalid URLs and handle them gracefully. A &lt;em&gt;wildcard&lt;/em&gt; route has a path consisting of two asterisks. It matches &lt;em&gt;every&lt;/em&gt; URL. The router will select &lt;em&gt;this&lt;/em&gt; route if it can't match a route earlier in the configuration. A wildcard route can navigate to a custom &quot;404 Not Found&quot; component or &lt;a href=&quot;router#redirect&quot;&gt;redirect&lt;/a&gt; to an existing route.</source>
          <target state="translated">&lt;strong&gt;ワイルドカード&lt;/strong&gt;ルートを追加して、無効なURLをインターセプトし、適切に処理します。&lt;em&gt;ワイルドカード&lt;/em&gt;経路は2つのアスタリスクからなる経路を有します。&lt;em&gt;すべての&lt;/em&gt; URL に一致します。ルーターは、構成の初期のルートと一致しない場合、&lt;em&gt;この&lt;/em&gt;ルートを選択します。ワイルドカードルートは、カスタムの「404 Not Found」コンポーネントに移動したり、既存のルートに&lt;a href=&quot;router#redirect&quot;&gt;リダイレクト&lt;/a&gt;したりできます。</target>
        </trans-unit>
        <trans-unit id="eb9ad994a306d5e3f0dac069d6b525c6144c6e51" translate="yes" xml:space="preserve">
          <source>Add a binding to the &lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; template to visualize the result:</source>
          <target state="translated">&lt;code&gt;&amp;lt;app-root&amp;gt;&lt;/code&gt; テンプレートにバインディングを追加して、結果を視覚化します。</target>
        </trans-unit>
        <trans-unit id="185c4f471b2e40e64ba5f97bb89a83cc6b2e41f8" translate="yes" xml:space="preserve">
          <source>Add a button so users can share a product with friends. Bind the button's &lt;code&gt;click&lt;/code&gt; event to the &lt;code&gt;share()&lt;/code&gt; method (in &lt;code&gt;product-list.component.ts&lt;/code&gt;). Event binding uses a set of parentheses, &lt;code&gt;( )&lt;/code&gt;, around the event, as in the following &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">ボタンを追加して、ユーザーが製品を友達と共有できるようにします。ボタンの &lt;code&gt;click&lt;/code&gt; イベントを（ &lt;code&gt;product-list.component.ts&lt;/code&gt; 内の &lt;code&gt;share()&lt;/code&gt; メソッドにバインドします。イベントバインディングでは、次の &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 要素のように、イベントの前後に一連の括弧 &lt;code&gt;( )&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bdc953992c09d61b11a1e734a2904d5cc5a5c716" translate="yes" xml:space="preserve">
          <source>Add a button with the label &quot;Buy&quot;, and bind the &lt;code&gt;click()&lt;/code&gt; event to the &lt;code&gt;addToCart()&lt;/code&gt; method:</source>
          <target state="translated">「購入」というラベルの付いたボタンを追加し、 &lt;code&gt;click()&lt;/code&gt; イベントを &lt;code&gt;addToCart()&lt;/code&gt; メソッドにバインドします。</target>
        </trans-unit>
        <trans-unit id="5aa434bbd8551556eff7a3a10609f92a7b4c69c1" translate="yes" xml:space="preserve">
          <source>Add a cart component, which displays the items you added to your cart.</source>
          <target state="translated">カートに追加したアイテムを表示するカートコンポーネントを追加します。</target>
        </trans-unit>
        <trans-unit id="d7c6983360c85102afcd7cd7c6c276e29242b247" translate="yes" xml:space="preserve">
          <source>Add a click event binding</source>
          <target state="translated">クリックイベントバインディングの追加</target>
        </trans-unit>
        <trans-unit id="cef39296159e8e7b5c240bc8238ac9d8c6ae5109" translate="yes" xml:space="preserve">
          <source>Add a click event binding to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; like this:</source>
          <target state="translated">次のように、 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; にクリックイベントバインディングを追加します。</target>
        </trans-unit>
        <trans-unit id="a822817b55404ecf7fe71067c767e4fcf31ccac2" translate="yes" xml:space="preserve">
          <source>Add a control to this form.</source>
          <target state="translated">このフォームにコントロールを追加します。</target>
        </trans-unit>
        <trans-unit id="cab59b94246c9a18905faa353a28be60f5eab5a2" translate="yes" xml:space="preserve">
          <source>Add a control to this group.</source>
          <target state="translated">このグループにコントロールを追加します。</target>
        </trans-unit>
        <trans-unit id="2d89a7d5583b52b6d6525b3b34eeef56c38af48a" translate="yes" xml:space="preserve">
          <source>Add a dashboard navigation link to the &lt;code&gt;AppComponent&lt;/code&gt; shell template, just above the &lt;em&gt;Heroes&lt;/em&gt; link.</source>
          <target state="translated">&lt;em&gt;ヒーロー&lt;/em&gt;リンクのすぐ上にあるダッシュボードナビゲーションリンクを &lt;code&gt;AppComponent&lt;/code&gt; シェルテンプレートに追加します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ee94227c33c07e1c24e4e5adb5f118a15e9e65a0" translate="yes" xml:space="preserve">
          <source>Add a dashboard view</source>
          <target state="translated">ダッシュボードビューの追加</target>
        </trans-unit>
        <trans-unit id="4e39c4f6ceec4b4b2e4e3361f85b74f7b3b28895" translate="yes" xml:space="preserve">
          <source>Add a default route</source>
          <target state="translated">デフォルトのルートを追加する</target>
        </trans-unit>
        <trans-unit id="9719bf1b8a8fa35bc215db281ad48dfa08278aab" translate="yes" xml:space="preserve">
          <source>Add a details section</source>
          <target state="translated">詳細セクションの追加</target>
        </trans-unit>
        <trans-unit id="e612a293c0724c3508c59b5b89399bdae8f9a904" translate="yes" xml:space="preserve">
          <source>Add a group of controls to this form.</source>
          <target state="translated">このフォームにコントロールのグループを追加します。</target>
        </trans-unit>
        <trans-unit id="020929122421e2ed06e78a6cb3615837244cecd8" translate="yes" xml:space="preserve">
          <source>Add a link from the cart page to the shipping page:</source>
          <target state="translated">カートページから配送ページへのリンクを追加します。</target>
        </trans-unit>
        <trans-unit id="1b09296091f649517aef9c1ef93b3afd99d35b64" translate="yes" xml:space="preserve">
          <source>Add a nav bar to the shell template with anchor tags, &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">アンカータグ、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkactive&quot;&gt;routerLinkActive&lt;/a&gt;&lt;/code&gt; ディレクティブを使用して、シェルテンプレートにナビゲーションバーを追加します。</target>
        </trans-unit>
        <trans-unit id="2bbee8538ab17d504f4be598d200c8c3b2e7a0ae" translate="yes" xml:space="preserve">
          <source>Add a navigation link (&lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">ナビゲーションリンク（ &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; ）を追加する</target>
        </trans-unit>
        <trans-unit id="b367e5a23e3448e784824d7af249cabb9ee76d03" translate="yes" xml:space="preserve">
          <source>Add a new hero</source>
          <target state="translated">新しいヒーローを追加</target>
        </trans-unit>
        <trans-unit id="40835f4ea8b193fb5050ee0b06e0a4cdd3c9dfdf" translate="yes" xml:space="preserve">
          <source>Add a private &lt;code&gt;heroService&lt;/code&gt; parameter of type &lt;code&gt;HeroService&lt;/code&gt; to the constructor.</source>
          <target state="translated">タイプが &lt;code&gt;HeroService&lt;/code&gt; のプライベート &lt;code&gt;heroService&lt;/code&gt; パラメーターをコンストラクターに追加します。</target>
        </trans-unit>
        <trans-unit id="4b762a4f2ebf8ababf82b0c9189c42e653747928" translate="yes" xml:space="preserve">
          <source>Add a route to the &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; array that matches a path to the &lt;code&gt;DashboardComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DashboardComponent&lt;/code&gt; へのパスに一致するルートを &lt;code&gt;AppRoutingModule.routes&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="ab28df382c483b738a050fc59f245b4da3452fff" translate="yes" xml:space="preserve">
          <source>Add a router outlet to tell the Angular router where to place the activated components in the DOM.</source>
          <target state="translated">アクティベートされたコンポーネントを DOM 内のどこに配置するかを Angular ルーターに伝えるためのルーターアウトレットを追加します。</target>
        </trans-unit>
        <trans-unit id="f6ab96d92bcf27538444f441c451dab0fe97ae2b" translate="yes" xml:space="preserve">
          <source>Add a second &lt;strong&gt;input&lt;/strong&gt; property to &lt;code&gt;HighlightDirective&lt;/code&gt; called &lt;code&gt;defaultColor&lt;/code&gt;:</source>
          <target state="translated">第二の追加&lt;strong&gt;の入力&lt;/strong&gt;にプロパティを &lt;code&gt;HighlightDirective&lt;/code&gt; と呼ばれる &lt;code&gt;defaultColor&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="0360118b87d7c084a3d4de92fd385ba9d82b44a8" translate="yes" xml:space="preserve">
          <source>Add a secondary route</source>
          <target state="translated">セカンダリールートの追加</target>
        </trans-unit>
        <trans-unit id="67f2d5ad7d4c0f53d3994b3037346c2b3a7dabae" translate="yes" xml:space="preserve">
          <source>Add a shipping component, which retrieves shipping prices for the items in the cart by using Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; to retrieve shipping data from a &lt;code&gt;.json&lt;/code&gt; file.</source>
          <target state="translated">Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;.json&lt;/code&gt; ファイルから配送データを取得することにより、カート内の商品の配送価格を取得する配送コンポーネントを追加します。</target>
        </trans-unit>
        <trans-unit id="6670b3ecbb4947a0775a0511be5562a2546551aa" translate="yes" xml:space="preserve">
          <source>Add a worker creation snippet in a sibling file of the same name.</source>
          <target state="translated">同名の兄弟ファイルにワーカー作成スニペットを追加します。</target>
        </trans-unit>
        <trans-unit id="8a72840865c6d30c75b7583a9277122b64be3c06" translate="yes" xml:space="preserve">
          <source>Add an &quot;Admin&quot; link to the &lt;code&gt;AppComponent&lt;/code&gt; shell so that users can get to this feature.</source>
          <target state="translated">ユーザーがこの機能にアクセスできるように、 &lt;code&gt;AppComponent&lt;/code&gt; シェルに「管理」リンクを追加します。</target>
        </trans-unit>
        <trans-unit id="a91ab35b602db9385b1ae8779a44b0cd6b1984e1" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; at the top,</source>
          <target state="translated">上部に &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; を追加し、</target>
        </trans-unit>
        <trans-unit id="24c4502c2264205bcee1737bc30aa0ee46ca9d07" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;&lt;a href=&quot;../api/router/scroll#anchor&quot;&gt;anchor&lt;/a&gt;&lt;/code&gt; element so you can jump to a certain point on the page.</source>
          <target state="translated">ページの特定のポイントにジャンプできるように &lt;code&gt;&lt;a href=&quot;../api/router/scroll#anchor&quot;&gt;anchor&lt;/a&gt;&lt;/code&gt; 要素を追加します。</target>
        </trans-unit>
        <trans-unit id="b6710fdef5071c7587eb69e5c4821c27c6547053" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;animations&lt;/code&gt; array to the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata's that contains the &lt;code&gt;slideInAnimation&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;slideInAnimation&lt;/code&gt; を含む &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;メタデータに &lt;code&gt;animations&lt;/code&gt; 配列を追加します。</target>
        </trans-unit>
        <trans-unit id="c0511deb3d9404e119de6815d1e1fb84dc05c2ca" translate="yes" xml:space="preserve">
          <source>Add an &lt;code&gt;ngSubmit&lt;/code&gt; event listener to the &lt;code&gt;form&lt;/code&gt; tag with the &lt;code&gt;onSubmit()&lt;/code&gt; callback method.</source>
          <target state="translated">&lt;code&gt;onSubmit()&lt;/code&gt; コールバックメソッドを使用して、 &lt;code&gt;ngSubmit&lt;/code&gt; イベントリスナーを &lt;code&gt;form&lt;/code&gt; タグに追加します。</target>
        </trans-unit>
        <trans-unit id="a3ec368ee4d735782b2fa273a86fd1b22faf2bdd" translate="yes" xml:space="preserve">
          <source>Add an &lt;em&gt;item&lt;/em&gt; node for your guide page as a child of the appropriate &lt;em&gt;header&lt;/em&gt; node. It probably looks something like this one.</source>
          <target state="translated">ガイドページの&lt;em&gt;項目&lt;/em&gt;ノードを適切な&lt;em&gt;ヘッダー&lt;/em&gt;ノードの子として追加します。おそらくこのようなものです。</target>
        </trans-unit>
        <trans-unit id="72b3e470d4f46dc5b655b73f7cb688598b57a288" translate="yes" xml:space="preserve">
          <source>Add an admin feature module</source>
          <target state="translated">管理機能モジュールの追加</target>
        </trans-unit>
        <trans-unit id="065d79ddcd8ef4cbfce2bde87eff9b4a21deb35b" translate="yes" xml:space="preserve">
          <source>Add an outlet named &quot;popup&quot; in the &lt;code&gt;AppComponent&lt;/code&gt;, directly below the unnamed outlet.</source>
          <target state="translated">名前のないアウトレットのすぐ下の &lt;code&gt;AppComponent&lt;/code&gt; に「popup」というアウトレットを追加します。</target>
        </trans-unit>
        <trans-unit id="c3ad9fae4902afb2d22aab11c7c7122afe3cb1b3" translate="yes" xml:space="preserve">
          <source>Add and remove CSS class names from an element's &lt;code&gt;class&lt;/code&gt; attribute with a &lt;strong&gt;class binding&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;クラスバインディングを使用&lt;/strong&gt;して、要素の &lt;code&gt;class&lt;/code&gt; 属性にCSSクラス名を追加および削除します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ebc7d586988be901bf1dcd135e15130d4271ae30" translate="yes" xml:space="preserve">
          <source>Add another feature module</source>
          <target state="translated">別の機能モジュールを追加</target>
        </trans-unit>
        <trans-unit id="83553ff42a9fe1b0b7cd5ccc05916aaaf1b48824" translate="yes" xml:space="preserve">
          <source>Add application styles</source>
          <target state="translated">アプリケーションスタイルの追加</target>
        </trans-unit>
        <trans-unit id="6874ce7f78e90d16a31435155e6fa0b2b97fdd6c" translate="yes" xml:space="preserve">
          <source>Add bindings to the &lt;code&gt;ChildComponent&lt;/code&gt; and the &lt;code&gt;AppComponent&lt;/code&gt; templates. In the &lt;code&gt;ChildComponent&lt;/code&gt; template, add the following binding:</source>
          <target state="translated">バインディングを追加 &lt;code&gt;ChildComponent&lt;/code&gt; と &lt;code&gt;AppComponent&lt;/code&gt; のテンプレート。で &lt;code&gt;ChildComponent&lt;/code&gt; のテンプレートは、以下のバインディングを追加します。</target>
        </trans-unit>
        <trans-unit id="6e92e364ebed8c2a5a1a8e64de16ee2cc836b8bd" translate="yes" xml:space="preserve">
          <source>Add custom CSS for visual feedback</source>
          <target state="translated">ビジュアルフィードバック用のカスタムCSSを追加</target>
        </trans-unit>
        <trans-unit id="8fd1501a03328a721bc2b3c83701735e84f6e4de" translate="yes" xml:space="preserve">
          <source>Add custom CSS to provide visual feedback.</source>
          <target state="translated">カスタムCSSを追加して視覚的なフィードバックを提供します。</target>
        </trans-unit>
        <trans-unit id="b11bcc0560cc0fedef2d7534656122746af6fdc3" translate="yes" xml:space="preserve">
          <source>Add dashboard link to the shell</source>
          <target state="translated">シェルにダッシュボードリンクを追加する</target>
        </trans-unit>
        <trans-unit id="4baa429880b9ffc3372db13f7438523250984f35" translate="yes" xml:space="preserve">
          <source>Add editable fields to update a model with two-way data binding.</source>
          <target state="translated">双方向データバインディングでモデルを更新するための編集可能なフィールドを追加します。</target>
        </trans-unit>
        <trans-unit id="2eaeed60de365bb5468814ae23f30eb82eac1d08" translate="yes" xml:space="preserve">
          <source>Add heroes functionality</source>
          <target state="translated">ヒーロー機能を追加</target>
        </trans-unit>
        <trans-unit id="913bb1292105665155e69ec153ed609204adeb60" translate="yes" xml:space="preserve">
          <source>Add input fields for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt;. Use the &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; attribute binding to bind the &lt;code&gt;checkoutForm&lt;/code&gt; form controls for &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; to their input fields. The final complete component is shown below:</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;address&lt;/code&gt; 入力フィールドを追加します。 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrolname&quot;&gt;formControlName&lt;/a&gt;&lt;/code&gt; 属性バインディングを使用して、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;address&lt;/code&gt; &lt;code&gt;checkoutForm&lt;/code&gt; フォームコントロールを入力フィールドにバインドします。最終的な完全なコンポーネントを以下に示します。</target>
        </trans-unit>
        <trans-unit id="ab141913508f673f30373ec22d2f90af03bb1c3c" translate="yes" xml:space="preserve">
          <source>Add only &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;declarable&lt;/a&gt; classes to an NgModule's &lt;code&gt;declarations&lt;/code&gt; list.</source>
          <target state="translated">&lt;code&gt;declarations&lt;/code&gt; &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;可能な&lt;/a&gt;クラスのみをNgModuleの宣言リストに追加します。</target>
        </trans-unit>
        <trans-unit id="ccae50a19752da301fe31954fbb8425f6cac0c8e" translate="yes" xml:space="preserve">
          <source>Add or remove several CSS classes simultaneously with &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; と同時に複数のCSSクラスを追加または削除します。</target>
        </trans-unit>
        <trans-unit id="04098c5df332b887b1b69ea6a9b2bb0ae8f0620c" translate="yes" xml:space="preserve">
          <source>Add powers with &lt;code&gt;*ngFor&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;*ngFor&lt;/code&gt; で累乗を追加</target>
        </trans-unit>
        <trans-unit id="110d8765a212752a0d788afe8d11d67a8aeca05a" translate="yes" xml:space="preserve">
          <source>Add private CSS styles to &lt;code&gt;hero-search.component.css&lt;/code&gt; as listed in the &lt;a href=&quot;toh-pt6#herosearchcomponent&quot;&gt;final code review&lt;/a&gt; below.</source>
          <target state="translated">下記の&lt;a href=&quot;toh-pt6#herosearchcomponent&quot;&gt;最終的なコードレビューに&lt;/a&gt;リストされているように、プライベートCSSスタイルを &lt;code&gt;hero-search.component.css&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="83258ee6700fe22a4bb3a97f03d2dfde8f15d1db" translate="yes" xml:space="preserve">
          <source>Add routing (a URL pattern) for the cart component.</source>
          <target state="translated">カートコンポーネントのルーティング(URLパターン)を追加します。</target>
        </trans-unit>
        <trans-unit id="315a11c2127d0033673c94374becd4aaec9a355d" translate="yes" xml:space="preserve">
          <source>Add schematics</source>
          <target state="translated">回路図の追加</target>
        </trans-unit>
        <trans-unit id="47b444c3155edf48537081c48320158b81013f10" translate="yes" xml:space="preserve">
          <source>Add search to the Dashboard</source>
          <target state="translated">ダッシュボードに検索を追加</target>
        </trans-unit>
        <trans-unit id="407c4e4ebc265f1152ba29994434476ffa6b1e82" translate="yes" xml:space="preserve">
          <source>Add similar &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; bindings and &lt;code&gt;name&lt;/code&gt; attributes to &lt;em&gt;Alter Ego&lt;/em&gt; and &lt;em&gt;Hero Power&lt;/em&gt;. You'll ditch the input box binding message and add a new binding (at the top) to the component's &lt;code&gt;diagnostic&lt;/code&gt; property. Then you can confirm that two-way data binding works &lt;em&gt;for the entire hero model&lt;/em&gt;.</source>
          <target state="translated">同様の &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; バインディングと &lt;code&gt;name&lt;/code&gt; 属性を&lt;em&gt;Alter Ego&lt;/em&gt;と&lt;em&gt;Hero Powerに&lt;/em&gt;追加します。入力ボックスバインディングメッセージを破棄し、新しいバインディング（上部）をコンポーネントの &lt;code&gt;diagnostic&lt;/code&gt; プロパティに追加します。次に、双方向データバインディング&lt;em&gt;がヒーローモデル全体で&lt;/em&gt;機能することを確認できます。</target>
        </trans-unit>
        <trans-unit id="d2b3f86b38cb2dde1ef5065d8b22c6e0110a2bcf" translate="yes" xml:space="preserve">
          <source>Add slashes to the end of the name.</source>
          <target state="translated">名前の最後にスラッシュを追加します。</target>
        </trans-unit>
        <trans-unit id="0550c5a07a1c0dcc7a56e45baf44916075288a7a" translate="yes" xml:space="preserve">
          <source>Add some styles to apply when the list item is selected.</source>
          <target state="translated">リスト項目が選択されたときに適用するスタイルを追加します。</target>
        </trans-unit>
        <trans-unit id="4e25fad2d2863d50af41e193a0affb5fba19770a" translate="yes" xml:space="preserve">
          <source>Add template files</source>
          <target state="translated">テンプレートファイルの追加</target>
        </trans-unit>
        <trans-unit id="7f9455fdcd2db20256999a9379ce57b8a990d6ed" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element just after the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag. If the &lt;code&gt;app&lt;/code&gt; folder is the application root, as it is for this application, set the &lt;code&gt;href&lt;/code&gt; value in &lt;strong&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt;&lt;em&gt;exactly&lt;/em&gt; as shown here.</source>
          <target state="translated">&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; タグの直後に &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 要素を追加します。場合は &lt;code&gt;app&lt;/code&gt; フォルダはアプリケーションのルートであることは、このアプリケーションのためにあるように、設定 &lt;code&gt;href&lt;/code&gt; の値を&lt;strong&gt; &lt;code&gt;index.html&lt;/code&gt; を&lt;/strong&gt;&lt;em&gt;正確に&lt;/em&gt;ここに示されているよう。&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a95c1b1b2b94b9931f706ade782f0c64278d07c6" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; object to the &lt;code&gt;router.navigate()&lt;/code&gt; method that navigates you to the &lt;code&gt;/login&lt;/code&gt; route.</source>
          <target state="translated">&lt;code&gt;/login&lt;/code&gt; ルートに移動する &lt;code&gt;router.navigate()&lt;/code&gt; メソッドに &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; オブジェクトを追加します。</target>
        </trans-unit>
        <trans-unit id="e83a0d78e320049911e3936af97267e19e1e5a5d" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; hero property</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; ヒーロープロパティを追加する</target>
        </trans-unit>
        <trans-unit id="5dce54b9215c3ca22af64b7a5b4aa23a1c6a8ec3" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;AppRoutingModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; を追加する</target>
        </trans-unit>
        <trans-unit id="524c94c18049eabcf94b120aa354fd0d2d3c943c" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;Guard&lt;/code&gt; to the crisis detail route in &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; using the &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;&lt;/code&gt; array property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;&lt;/code&gt; 配列プロパティを使用して、guard &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; の危機詳細ルートに &lt;code&gt;Guard&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="ccc1be62085ec733e656d1b1b5ebeed7389554e8" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; strategy to the &lt;code&gt;AppRoutingModule&lt;/code&gt; providers array so it can be injected elsewhere in the app.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; プロバイダー配列に &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; 戦略を追加して、アプリの他の場所に注入できるようにします。</target>
        </trans-unit>
        <trans-unit id="480a9d9da11c13fa2186a0678c4789bf9795fb33" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;address&lt;/code&gt; form group containing the &lt;code&gt;street&lt;/code&gt;, &lt;code&gt;city&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;zip&lt;/code&gt; fields to the &lt;code&gt;ProfileEditor&lt;/code&gt; template.</source>
          <target state="translated">&lt;code&gt;street&lt;/code&gt; 、 &lt;code&gt;city&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/animations/state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;zip&lt;/code&gt; フィールドを含む &lt;code&gt;address&lt;/code&gt; フォームグループを &lt;code&gt;ProfileEditor&lt;/code&gt; テンプレートに追加します。</target>
        </trans-unit>
        <trans-unit id="9c7c31da3e750a8e32a8e1508ea2c5877158d643" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;delete()&lt;/code&gt; handler to the component class.</source>
          <target state="translated">&lt;code&gt;delete()&lt;/code&gt; ハンドラーをコンポーネントクラスに追加します。</target>
        </trans-unit>
        <trans-unit id="537fee4674204d15546023152c655ac018628fc3" translate="yes" xml:space="preserve">
          <source>Add the &lt;em&gt;CheckmarkPipe&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;CheckmarkPipeを&lt;/em&gt;追加する&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c4a17c685f9166b6dd73f21ad74478ecc3dfb360" translate="yes" xml:space="preserve">
          <source>Add the &lt;em&gt;LoginComponent&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;LoginComponentを&lt;/em&gt;追加する&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e595eb4e5629fba187523d4d67334582bb922a69" translate="yes" xml:space="preserve">
          <source>Add the Angular router</source>
          <target state="translated">Angularルーターを追加する</target>
        </trans-unit>
        <trans-unit id="a7067487bde72912bc32222bb63da44e0cbe00b4" translate="yes" xml:space="preserve">
          <source>Add the Bootstrap CSS file to the &quot;styles&quot; array:</source>
          <target state="translated">style」配列にBootstrapのCSSファイルを追加します。</target>
        </trans-unit>
        <trans-unit id="788a7f1435d8e605cc5c4f56a0f055007ae60c45" translate="yes" xml:space="preserve">
          <source>Add the Router Outlet</source>
          <target state="translated">ルータアウトレットの追加</target>
        </trans-unit>
        <trans-unit id="6ecf7d301e120b4a58d039786905132e5b7b17ca" translate="yes" xml:space="preserve">
          <source>Add the ability to navigate between the &lt;em&gt;Heroes&lt;/em&gt; and &lt;em&gt;Dashboard&lt;/em&gt; views.</source>
          <target state="translated">&lt;em&gt;ヒーロー&lt;/em&gt;ビューと&lt;em&gt;ダッシュボード&lt;/em&gt;ビューの間を移動する機能を追加します。</target>
        </trans-unit>
        <trans-unit id="f7e2426390337e60becf33182abe694cadb9fe52" translate="yes" xml:space="preserve">
          <source>Add the click event handler</source>
          <target state="translated">クリックイベントハンドラの追加</target>
        </trans-unit>
        <trans-unit id="ad72b9c6abfbbbe3312d99a3bff6e2256f92606e" translate="yes" xml:space="preserve">
          <source>Add the component class name to the &lt;code&gt;declarations&lt;/code&gt; array.</source>
          <target state="translated">コンポーネントクラス名を &lt;code&gt;declarations&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="7151a548f087adf025cecc68ba3a8f52d7eca575" translate="yes" xml:space="preserve">
          <source>Add the dashboard route</source>
          <target state="translated">ダッシュボードのルートを追加する</target>
        </trans-unit>
        <trans-unit id="203ca6f461ddbefc62dfa3039a19792cf63cca55" translate="yes" xml:space="preserve">
          <source>Add the default route somewhere &lt;em&gt;above&lt;/em&gt; the wildcard route. It's just above the wildcard route in the following excerpt showing the complete &lt;code&gt;appRoutes&lt;/code&gt; for this milestone.</source>
          <target state="translated">ワイルドカードルートの&lt;em&gt;上&lt;/em&gt;のどこかにデフォルトルートを追加します。このマイルストーンの完全な &lt;code&gt;appRoutes&lt;/code&gt; を示す次の抜粋では、ワイルドカードルートのすぐ上にあります。</target>
        </trans-unit>
        <trans-unit id="1963c978d5e21dc9c5425538a9a4b6bab6b449a0" translate="yes" xml:space="preserve">
          <source>Add the factory function</source>
          <target state="translated">工場出荷時の機能を追加</target>
        </trans-unit>
        <trans-unit id="de4bb5213e63549ca334089fd56344bb1e599059" translate="yes" xml:space="preserve">
          <source>Add the following &lt;code&gt;[class.selected]&lt;/code&gt; binding to the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; in the &lt;code&gt;HeroesComponent&lt;/code&gt; template:</source>
          <target state="translated">次の &lt;code&gt;[class.selected]&lt;/code&gt; バインディングを &lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートの &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="55dd3db3ee551d474ca23cf2dbe6f03b7eb5e979" translate="yes" xml:space="preserve">
          <source>Add the following &lt;code&gt;addHero()&lt;/code&gt; method to the &lt;code&gt;HeroService&lt;/code&gt; class.</source>
          <target state="translated">次の &lt;code&gt;addHero()&lt;/code&gt; メソッドを &lt;code&gt;HeroService&lt;/code&gt; クラスに追加します。</target>
        </trans-unit>
        <trans-unit id="4a15eb2536beea1005cec68501c5559c0ee70f4b" translate="yes" xml:space="preserve">
          <source>Add the following &lt;code&gt;onSelect()&lt;/code&gt; method, which assigns the clicked hero from the template to the component's &lt;code&gt;selectedHero&lt;/code&gt;.</source>
          <target state="translated">クリックされたヒーローをテンプレートからコンポーネントの &lt;code&gt;selectedHero&lt;/code&gt; に割り当てる次の &lt;code&gt;onSelect()&lt;/code&gt; メソッドを追加します。</target>
        </trans-unit>
        <trans-unit id="f0f064872909e5f0fc82d9a7616bf06812ac7126" translate="yes" xml:space="preserve">
          <source>Add the following HTML &lt;em&gt;immediately below&lt;/em&gt; the &lt;em&gt;Alter Ego&lt;/em&gt; group:</source>
          <target state="translated">以下のHTMLを追加&lt;em&gt;直下&lt;/em&gt;&lt;em&gt;アルターエゴの&lt;/em&gt;グループ：</target>
        </trans-unit>
        <trans-unit id="fc2589b5414b85cb1ff857bc45f360f5639642cf" translate="yes" xml:space="preserve">
          <source>Add the following button element to the &lt;code&gt;HeroesComponent&lt;/code&gt; template, after the hero name in the repeated &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">繰り返される &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素のヒーロー名の後に、次のボタン要素を &lt;code&gt;HeroesComponent&lt;/code&gt; テンプレートに追加します。</target>
        </trans-unit>
        <trans-unit id="5a6f4e757eee5977b078ed8e00ea18bb9638517d" translate="yes" xml:space="preserve">
          <source>Add the following code in &lt;code&gt;src/typings.d.ts&lt;/code&gt;.</source>
          <target state="translated">次のコードを &lt;code&gt;src/typings.d.ts&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="f21cce86ef93d7473d26a8919f3461df9e29a091" translate="yes" xml:space="preserve">
          <source>Add the following code to your &lt;code&gt;svg.component.svg&lt;/code&gt; file:</source>
          <target state="translated">次のコードを &lt;code&gt;svg.component.svg&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="ddce7ccd00ce11e7e21a51a655f19868eb056b89" translate="yes" xml:space="preserve">
          <source>Add the following code to your factory function.</source>
          <target state="translated">ファクトリー関数に以下のコードを追加します。</target>
        </trans-unit>
        <trans-unit id="4a57f8275852a186fdbefe442695b8d49e11f67f" translate="yes" xml:space="preserve">
          <source>Add the following content to the new proxy file:</source>
          <target state="translated">新しいプロキシファイルに以下の内容を追加します。</target>
        </trans-unit>
        <trans-unit id="c9605c6de77435b086651273344bcc1d56aa9255" translate="yes" xml:space="preserve">
          <source>Add the following imports:</source>
          <target state="translated">以下の輸入品を追加します。</target>
        </trans-unit>
        <trans-unit id="24d2ab2e1d0674bcd525ac4301acb8cfc9897f1d" translate="yes" xml:space="preserve">
          <source>Add the following to your &lt;code&gt;devDependencies&lt;/code&gt; in your project's &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="translated">プロジェクトの &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;devDependencies&lt;/code&gt; に以下を追加します</target>
        </trans-unit>
        <trans-unit id="1051e7b41c871379ce9f035916034c6c6d41c45c" translate="yes" xml:space="preserve">
          <source>Add the product descriptions. On the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element, use an &lt;code&gt;*&lt;a href=&quot;api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; directive so that Angular only creates the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element if the current product has a description.</source>
          <target state="translated">製品の説明を追加します。オン &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素、使用 &lt;code&gt;*&lt;a href=&quot;api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 角度だけ作成するよう指示を &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 現在の製品が記述されている場合、要素を。</target>
        </trans-unit>
        <trans-unit id="68d5651877a44ba3f24e7ccef506aa087346b4af" translate="yes" xml:space="preserve">
          <source>Add the same &lt;code&gt;AuthGuard&lt;/code&gt; to the &lt;code&gt;component-less&lt;/code&gt; admin route to protect all other child routes at one time instead of adding the &lt;code&gt;AuthGuard&lt;/code&gt; to each route individually.</source>
          <target state="translated">各ルートに個別に &lt;code&gt;AuthGuard&lt;/code&gt; を追加する代わりに、 &lt;code&gt;component-less&lt;/code&gt; 管理者ルートに同じ &lt;code&gt;AuthGuard&lt;/code&gt; を追加して、他のすべての子ルートを一度に保護します。</target>
        </trans-unit>
        <trans-unit id="5ccc80ef1b883c021ac46ae3dea76bdc9c94b772" translate="yes" xml:space="preserve">
          <source>Add the template HTML below after the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; closing the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; element.</source>
          <target state="translated">以下のテンプレートHTMLを、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/forms/formgroupname&quot;&gt;formGroupName&lt;/a&gt;&lt;/code&gt; &amp;gt;がformGroupName要素を閉じた後に追加します。</target>
        </trans-unit>
        <trans-unit id="08992a4a5c9ccd87853e5a2dd74a7b308e8abe90" translate="yes" xml:space="preserve">
          <source>Add this &lt;code&gt;&amp;lt;phonecat-app&amp;gt;&lt;/code&gt; element to the &lt;code&gt;index.html&lt;/code&gt;. It replaces the old AngularJS &lt;code&gt;ng-view&lt;/code&gt; directive:</source>
          <target state="translated">この &lt;code&gt;&amp;lt;phonecat-app&amp;gt;&lt;/code&gt; 要素を &lt;code&gt;index.html&lt;/code&gt; に追加します。古いAngularJS &lt;code&gt;ng-view&lt;/code&gt; ディレクティブを置き換えます：</target>
        </trans-unit>
        <trans-unit id="5e6c651992023e2db1bf098d75f8e5904243eb40" translate="yes" xml:space="preserve">
          <source>Add this directive to the &lt;code&gt;declarations&lt;/code&gt; array of the AppModule.</source>
          <target state="translated">このディレクティブをAppModuleの &lt;code&gt;declarations&lt;/code&gt; 配列に追加します。</target>
        </trans-unit>
        <trans-unit id="922675049b014ebfcdc115bb25996b2e9a66d549" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;&amp;lt;live-example&amp;gt;&amp;lt;/live-example&amp;gt;&lt;/code&gt; to the page generates the two default links.</source>
          <target state="translated">追加する &lt;code&gt;&amp;lt;live-example&amp;gt;&amp;lt;/live-example&amp;gt;&lt;/code&gt; ページは、2つのデフォルトのリンクを生成します。</target>
        </trans-unit>
        <trans-unit id="e2243e38c9b9d2d491ac653861f42e3b0679135a" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;export&lt;/code&gt; doesn't work when the compiler needs the &lt;em&gt;actual value&lt;/em&gt; in order to generate code. For example, it doesn't work for the &lt;code&gt;template&lt;/code&gt; property.</source>
          <target state="translated">コンパイラがコードを生成するために&lt;em&gt;実際の値&lt;/em&gt;を必要とする場合、 &lt;code&gt;export&lt;/code&gt; 追加は機能しません。たとえば、 &lt;code&gt;template&lt;/code&gt; プロパティでは機能しません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="51ebe15885e1d23542dd2ea65ca996d65c2d207b" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;export&lt;/code&gt; often works for variables referenced in metadata such as &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;animations&lt;/code&gt; because the compiler can generate &lt;em&gt;references&lt;/em&gt; to the exported variables in these expressions. It doesn't need the &lt;em&gt;values&lt;/em&gt; of those variables.</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt; 追加は、 &lt;code&gt;providers&lt;/code&gt; や &lt;code&gt;animations&lt;/code&gt; などのメタデータで参照されている変数に対してよく機能します。これは、コンパイラがこれらの式でエクスポートされた変数への&lt;em&gt;参照&lt;/em&gt;を生成できるためです。これらの変数の&lt;em&gt;値&lt;/em&gt;は必要ありません。</target>
        </trans-unit>
        <trans-unit id="73c05dea2f6045a6ab0b0141f2228bfae1da4a5e" translate="yes" xml:space="preserve">
          <source>Adding The Angular Router And Bootstrap</source>
          <target state="translated">Angular RouterとBootstrapを追加する</target>
        </trans-unit>
        <trans-unit id="8b07e292ec36cfffa9bf6db5c80ac3f1e704fabc" translate="yes" xml:space="preserve">
          <source>Adding a Web Worker</source>
          <target state="translated">ウェブワーカーの追加</target>
        </trans-unit>
        <trans-unit id="3797d75eea052400c99af56aab9acb4efe36e4d2" translate="yes" xml:space="preserve">
          <source>Adding a hero results in a new hero &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. The spy's &lt;code&gt;ngOnInit()&lt;/code&gt; logs that event.</source>
          <target state="translated">ヒーローを追加すると、新しいヒーロー &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; が作成されます。スパイの &lt;code&gt;ngOnInit()&lt;/code&gt; はそのイベントを記録します。</target>
        </trans-unit>
        <trans-unit id="28d2a7e95c52e8a42120833923f4cf54d6029d23" translate="yes" xml:space="preserve">
          <source>Adding a library to the runtime global scope</source>
          <target state="translated">ランタイムグローバルスコープにライブラリを追加する</target>
        </trans-unit>
        <trans-unit id="d3ccff775835290c3a128ace87621dd407763a67" translate="yes" xml:space="preserve">
          <source>Adding a maximum length validator</source>
          <target state="translated">最大長バリデータの追加</target>
        </trans-unit>
        <trans-unit id="494a8737b67971dffa71048bb3c7fb3bea9dd8a9" translate="yes" xml:space="preserve">
          <source>Adding a minimum length validator</source>
          <target state="translated">最小長バリデータの追加</target>
        </trans-unit>
        <trans-unit id="f16c1a5e99ec210cafaff11287b5840cc4a99091" translate="yes" xml:space="preserve">
          <source>Adding a pattern validator</source>
          <target state="translated">パターンバリデータの追加</target>
        </trans-unit>
        <trans-unit id="9e46d1f4ff66b89003f86bb0e3b35dbd3f8f9747" translate="yes" xml:space="preserve">
          <source>Adding a required checkbox validator using template-driven forms</source>
          <target state="translated">テンプレート駆動型フォームを使用した必須チェックボックスバリデータの追加</target>
        </trans-unit>
        <trans-unit id="fb58a5f686b6ace9b126e4f8cb5d3bc1407c9241" translate="yes" xml:space="preserve">
          <source>Adding a required validator using template-driven forms</source>
          <target state="translated">テンプレート駆動型のフォームを使って必須のバリデータを追加する</target>
        </trans-unit>
        <trans-unit id="ff1dd5c0e9955484dceb4a5b434bb9221bf949cf" translate="yes" xml:space="preserve">
          <source>Adding a schematic to a collection</source>
          <target state="translated">コレクションへの回路図の追加</target>
        </trans-unit>
        <trans-unit id="91d669aa4d61f96fec2573e664601ea346ab6c18" translate="yes" xml:space="preserve">
          <source>Adding a service worker to your project</source>
          <target state="translated">プロジェクトにサービスワーカーを追加する</target>
        </trans-unit>
        <trans-unit id="658030002117a761f4fc3965eb3cb02b87cd7749" translate="yes" xml:space="preserve">
          <source>Adding a target</source>
          <target state="translated">ターゲットの追加</target>
        </trans-unit>
        <trans-unit id="6525e7fcbcff7c4689063f7e684e4f978b5680bf" translate="yes" xml:space="preserve">
          <source>Adding an &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; property binding to &lt;code&gt;currentClasses&lt;/code&gt; sets the element's classes accordingly:</source>
          <target state="translated">追加 &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; のへの結合性 &lt;code&gt;currentClasses&lt;/code&gt; をそれに応じて、要素のクラスを設定します。</target>
        </trans-unit>
        <trans-unit id="9b6d9feaeaa572aa7a12cbeeb46228faa046d0bc" translate="yes" xml:space="preserve">
          <source>Adding an &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; property binding to &lt;code&gt;currentStyles&lt;/code&gt; sets the element's styles accordingly:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; プロパティバインディングを &lt;code&gt;currentStyles&lt;/code&gt; に追加すると、それに応じて要素のスタイルが設定されます。</target>
        </trans-unit>
        <trans-unit id="b3fcd62ed94aad6b449fe5d37db647399301bd22" translate="yes" xml:space="preserve">
          <source>Adding an alias</source>
          <target state="translated">エイリアスの追加</target>
        </trans-unit>
        <trans-unit id="be0779a18da1ecedddf53b5dd41b56034940339f" translate="yes" xml:space="preserve">
          <source>Adding an email validator</source>
          <target state="translated">メールバリデータの追加</target>
        </trans-unit>
        <trans-unit id="5873fb7b91415ba593dcaeb0713567140d858f49" translate="yes" xml:space="preserve">
          <source>Adding and removing the &lt;code&gt;disabled&lt;/code&gt;&lt;em&gt;attribute&lt;/em&gt; disables and enables the button. However, the value of the &lt;em&gt;attribute&lt;/em&gt; is irrelevant, which is why you cannot enable a button by writing &lt;code&gt;&amp;lt;button disabled=&quot;false&quot;&amp;gt;Still Disabled&amp;lt;/button&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; &lt;em&gt;属性&lt;/em&gt;を追加および削除すると、ボタンが無効になり、有効になります。ただし、&lt;em&gt;属性&lt;/em&gt;の値は関係ないため、 &lt;code&gt;&amp;lt;button disabled=&quot;false&quot;&amp;gt;Still Disabled&amp;lt;/button&amp;gt;&lt;/code&gt; 記述してボタンを有効にすることはできません。</target>
        </trans-unit>
        <trans-unit id="414790a41b5fe4974982ea7d7a722b357bb14c4e" translate="yes" xml:space="preserve">
          <source>Adding animations to the routed component</source>
          <target state="translated">ルーテッドコンポーネントにアニメーションを追加する</target>
        </trans-unit>
        <trans-unit id="d91d275ac43cb2fc356c392e516cde5427ae957f" translate="yes" xml:space="preserve">
          <source>Adding headers</source>
          <target state="translated">ヘッダの追加</target>
        </trans-unit>
        <trans-unit id="0c2ebad7a136b54e97bbbca2a675a16b3e11a5cd" translate="yes" xml:space="preserve">
          <source>Adding or removing controls from a form array</source>
          <target state="translated">フォーム配列からコントロールを追加または削除する</target>
        </trans-unit>
        <trans-unit id="a492d6ac1e58e89d4043aee23965954b03767c9f" translate="yes" xml:space="preserve">
          <source>Adding routable animations</source>
          <target state="translated">ルーティングアニメーションの追加</target>
        </trans-unit>
        <trans-unit id="7afaaaaff6b0338bff5cfe09fad06c92c7b68221" translate="yes" xml:space="preserve">
          <source>Adding the configured &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to the &lt;code&gt;AppModule&lt;/code&gt; is sufficient for simple route configurations. As the application grows, you'll want to &lt;a href=&quot;router#refactor-the-routing-configuration-into-a-routing-module&quot;&gt;refactor the routing configuration&lt;/a&gt; into a separate file and create a &lt;strong&gt;&lt;a href=&quot;router#routing-module&quot;&gt;Routing Module&lt;/a&gt;&lt;/strong&gt;, a special type of &lt;code&gt;Service Module&lt;/code&gt; dedicated to the purpose of routing in feature modules.</source>
          <target state="translated">構成追加 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;AppModule&lt;/code&gt; する単純な経路設定のために十分です。アプリケーションが大きくなるにつれて、&lt;a href=&quot;router#refactor-the-routing-configuration-into-a-routing-module&quot;&gt;ルーティング構成&lt;/a&gt;を別のファイルにリファクタリングして、機能モジュールでのルーティングの目的に特化した特別なタイプの &lt;code&gt;Service Module&lt;/code&gt; ある&lt;strong&gt;&lt;a href=&quot;router#routing-module&quot;&gt;Routing Module&lt;/a&gt;&lt;/strong&gt;を作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="d37533032f719d87e66cb4d921f78f0010ff74bd" translate="yes" xml:space="preserve">
          <source>Adding to reactive forms</source>
          <target state="translated">反応性のあるフォームへの追加</target>
        </trans-unit>
        <trans-unit id="b1f50c4eeaf9acc84dcece41369d505b6c8bd4aa" translate="yes" xml:space="preserve">
          <source>Adding to template driven forms</source>
          <target state="translated">テンプレート駆動型フォームへの追加</target>
        </trans-unit>
        <trans-unit id="f741528e94d7a9119da6fdc2d64562b32a16957c" translate="yes" xml:space="preserve">
          <source>Adding to template-driven forms</source>
          <target state="translated">テンプレート駆動型フォームへの追加</target>
        </trans-unit>
        <trans-unit id="6db8ab49fda1d426dada84500bdbaf2cf643416a" translate="yes" xml:space="preserve">
          <source>Additional animation functionality is provided in other Angular modules for animation testing, for route-based animations, and for programmatic animation controls that allow an end user to fast forward and reverse an animation sequence.</source>
          <target state="translated">他のAngularモジュールにはアニメーションテスト用のアニメーション機能や、ルートベースのアニメーション、エンドユーザーがアニメーションのシーケンスを早送りしたり戻したりできるようにするプログラマティックなアニメーションコントロール用のアニメーション機能が用意されています。</target>
        </trans-unit>
        <trans-unit id="9eacfc7680c8185a25a0e3cdfcd8ab3a2e2abf6f" translate="yes" xml:space="preserve">
          <source>Additional applications and libraries go into a &lt;code&gt;projects&lt;/code&gt; folder in the workspace.</source>
          <target state="translated">追加のアプリケーションとライブラリは、ワークスペースの &lt;code&gt;projects&lt;/code&gt; フォルダーに配置されます。</target>
        </trans-unit>
        <trans-unit id="bedd0f993181b4d07bc3bc6af81ff195b60d9f72" translate="yes" xml:space="preserve">
          <source>Additional build and test options</source>
          <target state="translated">追加のビルドおよびテストオプション</target>
        </trans-unit>
        <trans-unit id="260fab856b8044e628c955f8e2996502a9cd44c2" translate="yes" xml:space="preserve">
          <source>Additional developer-defined data provided to the component via &lt;code&gt;&lt;a href=&quot;activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. By default, no additional data is passed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; を介してコンポーネントに提供される開発者定義の追加データ。デフォルトでは、追加のデータは渡されません。</target>
        </trans-unit>
        <trans-unit id="93ceccadb707587960fc3d2012d50d5f7a465692" translate="yes" xml:space="preserve">
          <source>Additional project-specific configuration files are used by tools, such as &lt;code&gt;package.json&lt;/code&gt; for the &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package manager&lt;/a&gt;, &lt;code&gt;tsconfig.json&lt;/code&gt; for &lt;a href=&quot;glossary#transpile&quot;&gt;TypeScript transpilation&lt;/a&gt;, and &lt;code&gt;tslint.json&lt;/code&gt; for &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;.</source>
          <target state="translated">追加のプロジェクト固有の設定ファイルは、次のようなツールによって使用されている &lt;code&gt;package.json&lt;/code&gt; のための&lt;a href=&quot;glossary#npm-package&quot;&gt;NPMパッケージマネージャ&lt;/a&gt;、 &lt;code&gt;tsconfig.json&lt;/code&gt; のための&lt;a href=&quot;glossary#transpile&quot;&gt;活字体のtranspilation&lt;/a&gt;、および &lt;code&gt;tslint.json&lt;/code&gt; ため&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a15fa56393dfeea6e8ddbb0e0c2a6f3cc24b93de" translate="yes" xml:space="preserve">
          <source>Additional resources</source>
          <target state="translated">その他のリソース</target>
        </trans-unit>
        <trans-unit id="1ff0faf5f35505f92cf1420c27a17de350a98cce" translate="yes" xml:space="preserve">
          <source>Additional section headings</source>
          <target state="translated">追加セクションの見出し</target>
        </trans-unit>
        <trans-unit id="bc4d8802d50adf700ee7745602435ef1dca90b25" translate="yes" xml:space="preserve">
          <source>Additional templates, represented by &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; objects, can define alternative or &lt;em&gt;embedded&lt;/em&gt; views, which can be referenced from multiple components.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; オブジェクトで表される追加のテンプレートは、複数のコンポーネントから参照できる代替ビューまたは&lt;em&gt;埋め込み&lt;/em&gt;ビューを定義できます。</target>
        </trans-unit>
        <trans-unit id="088c64e0c38f1273482efc76508d604e23f1b814" translate="yes" xml:space="preserve">
          <source>Additional type information that can be added to the NgElement class, for properties that are added based on the inputs and methods of the underlying component.</source>
          <target state="translated">基礎となるコンポーネントの入力とメソッドに基づいて追加されるプロパティのために、NgElementクラスに追加することができる追加の型情報。</target>
        </trans-unit>
        <trans-unit id="82315284cec71ac2461e7ad6e31ada0cc3b6903b" translate="yes" xml:space="preserve">
          <source>Additionally, Angular can bundle &lt;em&gt;component styles&lt;/em&gt; with components, enabling a more modular design than regular stylesheets.</source>
          <target state="translated">さらに、Angularは&lt;em&gt;コンポーネントスタイル&lt;/em&gt;をコンポーネントにバンドルできるため、通常のスタイルシートよりもモジュール化された設計が可能になります。</target>
        </trans-unit>
        <trans-unit id="c3b6cb992315a8d1d32c6b4d1ab51dfbb9d56994" translate="yes" xml:space="preserve">
          <source>Additionally, add the same to the &lt;code&gt;AppComponent&lt;/code&gt; template:</source>
          <target state="translated">さらに、同じものを &lt;code&gt;AppComponent&lt;/code&gt; テンプレートに追加します。</target>
        </trans-unit>
        <trans-unit id="f7661d2796641b2435dba5fb54171a642e99cdd2" translate="yes" xml:space="preserve">
          <source>Additionally, if a &lt;code&gt;factory&lt;/code&gt; is specified you can also specify the &lt;code&gt;&lt;a href=&quot;injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; option, which overrides the above behavior and marks the token as belonging to a particular &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;. As mentioned above, &lt;code&gt;'root'&lt;/code&gt; is the default value for &lt;code&gt;&lt;a href=&quot;injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">さらに、 &lt;code&gt;factory&lt;/code&gt; が指定されている場合は、上記の動作をオーバーライドし、トークンを特定の &lt;code&gt;@&lt;a href=&quot;ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;ngmodule&quot;&gt;NgModuleに&lt;/a&gt;属するものとしてマークする、 &lt;code&gt;&lt;a href=&quot;injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; オプションも指定できます。上記のように、 &lt;code&gt;'root'&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; のデフォルト値です。</target>
        </trans-unit>
        <trans-unit id="dcbe742fd9c09dceae25ade7dd875522a02fe0b7" translate="yes" xml:space="preserve">
          <source>Additionally, you can combine all of the modifiers except &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; and of course &lt;code&gt;@Skipself()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">さらに、 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; 、そしてもちろん &lt;code&gt;@Skipself()&lt;/code&gt; と &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; を除くすべての修飾子を組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="451e70bdf0857a9eb4b8c2da5e6655131127aab1" translate="yes" xml:space="preserve">
          <source>Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.</source>
          <target state="translated">数値に基づいて DOM サブツリーを追加・削除します。複数化に対応しています。</target>
        </trans-unit>
        <trans-unit id="f61a37a92c2c3bd50a6b27f14df53a5edffb0311" translate="yes" xml:space="preserve">
          <source>Adds a developer-defined type to the filename, in the format &quot;name.type.ts&quot;.</source>
          <target state="translated">name.type.ts &quot;という形式で、開発者定義の型をファイル名に追加します。</target>
        </trans-unit>
        <trans-unit id="6f5e15f33e44ddcdc5cfe51d4943af58290c22aa" translate="yes" xml:space="preserve">
          <source>Adds a new &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; directive instance to the form.</source>
          <target state="translated">フォームに新しい &lt;code&gt;&lt;a href=&quot;formarrayname&quot;&gt;FormArrayName&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンスを追加します。</target>
        </trans-unit>
        <trans-unit id="d24328bc2deef9fdef91cbbfdd2400a31dd071a7" translate="yes" xml:space="preserve">
          <source>Adds a new &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; directive instance to the form.</source>
          <target state="translated">フォームに新しい &lt;code&gt;&lt;a href=&quot;formgroupname&quot;&gt;FormGroupName&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンスを追加します。</target>
        </trans-unit>
        <trans-unit id="2204ef6786c6b08dbd91058a06e9d433c1331369" translate="yes" xml:space="preserve">
          <source>Adds a new &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; directive instance to the form.</source>
          <target state="translated">新しい &lt;code&gt;&lt;a href=&quot;ngmodelgroup&quot;&gt;NgModelGroup&lt;/a&gt;&lt;/code&gt; ディレクティブインスタンスをフォームに追加します。</target>
        </trans-unit>
        <trans-unit id="26134db49e40fbb9d7a014790a01d0a514b896a3" translate="yes" xml:space="preserve">
          <source>Adds and removes CSS classes on an HTML element.</source>
          <target state="translated">HTML要素にCSSクラスを追加・削除します。</target>
        </trans-unit>
        <trans-unit id="cd7e636e1f1b30f6355bd2d646250762388c223f" translate="yes" xml:space="preserve">
          <source>Adds duration options to control animation styling and timing for a child animation.</source>
          <target state="translated">子アニメーションのアニメーションのスタイリングとタイミングを制御するためのデュレーションオプションを追加しました。</target>
        </trans-unit>
        <trans-unit id="2b895b67b8ce76b68d05dcf6666168717ad32953" translate="yes" xml:space="preserve">
          <source>Adds guard and resolver service providers to the module's providers.</source>
          <target state="translated">ガードとリゾルバのサービスプロバイダをモジュールのプロバイダに追加します。</target>
        </trans-unit>
        <trans-unit id="755299c48d7bf746122237e386cb6af5c4ba8328" translate="yes" xml:space="preserve">
          <source>Adds meta tags for &lt;code&gt;theme-color&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;theme-color&lt;/code&gt; のメタタグを追加します。</target>
        </trans-unit>
        <trans-unit id="968fdcd37c8a10fb41a3f93fc08b5a74ea4db1e5" translate="yes" xml:space="preserve">
          <source>Adds more details to output logging.</source>
          <target state="translated">出力ロギングの詳細を追加します。</target>
        </trans-unit>
        <trans-unit id="eb181f1de9d0b9f6a3f1c71fa1932a623e310dc3" translate="yes" xml:space="preserve">
          <source>Adds router configuration to the module's imports.</source>
          <target state="translated">モジュールのインポートにルータの設定を追加します。</target>
        </trans-unit>
        <trans-unit id="4df31ffcefb2b65518aaabe80fe3bd9d9f1ff84b" translate="yes" xml:space="preserve">
          <source>Adds router directives and providers.</source>
          <target state="translated">ルータのディレクティブとプロバイダを追加します。</target>
        </trans-unit>
        <trans-unit id="e937eef586f33048065a6d83817b03c7f5e23029" translate="yes" xml:space="preserve">
          <source>Adds support for an external library to your project.</source>
          <target state="translated">プロジェクトに外部ライブラリのサポートを追加します。</target>
        </trans-unit>
        <trans-unit id="613165752772588a92addd968d55b1f2bd4c8504" translate="yes" xml:space="preserve">
          <source>Adds the &lt;code&gt;@angular/service-worker&lt;/code&gt; package to your project.</source>
          <target state="translated">&lt;code&gt;@angular/service-worker&lt;/code&gt; パッケージをプロジェクトに追加します。</target>
        </trans-unit>
        <trans-unit id="a95ad245bbc008d7cc09cc996f5e65cb58f25cf6" translate="yes" xml:space="preserve">
          <source>Adds the npm package for a published library to your workspace, and configures the project in the current working directory (or the default project if you are not in a project directory) to use that library, as specified by the library's schematic. For example, adding &lt;code&gt;@angular/pwa&lt;/code&gt; configures your project for PWA support:</source>
          <target state="translated">ライブラリの回路図で指定されているように、公開ライブラリのnpmパッケージをワークスペースに追加し、現在の作業ディレクトリ（プロジェクトディレクトリにない場合はデフォルトプロジェクト）のプロジェクトを構成して、そのライブラリを使用します。たとえば、 &lt;code&gt;@angular/pwa&lt;/code&gt; 追加すると、プロジェクトがPWAサポート用に構成されます。</target>
        </trans-unit>
        <trans-unit id="62b1dbd814dc4f358ea1d7dde27e66fb54fc5e5d" translate="yes" xml:space="preserve">
          <source>Adjusts the styles of the host and child views to control their relative positions during the transition.</source>
          <target state="translated">ホストビューと子ビューのスタイルを調整して、遷移時の相対位置を制御します。</target>
        </trans-unit>
        <trans-unit id="a9597d9ee11a8d07aedf74f517b6b888ccd31d0e" translate="yes" xml:space="preserve">
          <source>Adopt these two conventions in your own projects for &lt;em&gt;every kind&lt;/em&gt; of test file.</source>
          <target state="translated">&lt;em&gt;あらゆる種類&lt;/em&gt;のテストファイルについて、独自のプロジェクトでこれらの2つの規則を採用してください。</target>
        </trans-unit>
        <trans-unit id="f7d73e5d6f0b5c68b5528964b60905cb1e539834" translate="yes" xml:space="preserve">
          <source>Advanced configuration</source>
          <target state="translated">高度な設定</target>
        </trans-unit>
        <trans-unit id="5126940d744a6dff391a643edf858b06f00785ed" translate="yes" xml:space="preserve">
          <source>Advanced usage</source>
          <target state="translated">高度な使い方</target>
        </trans-unit>
        <trans-unit id="58096d3b580b40d1f884a9b46c91dffe0e68c327" translate="yes" xml:space="preserve">
          <source>After (choice 1 - use reactive forms):</source>
          <target state="translated">後(選択肢1-反応形を使う)。</target>
        </trans-unit>
        <trans-unit id="f9921cfd687f0c9e226be2f78a3b062eb0f6a704" translate="yes" xml:space="preserve">
          <source>After (choice 2 - use template-driven forms):</source>
          <target state="translated">後(選択肢2-テンプレート駆動型のフォームを使用)。</target>
        </trans-unit>
        <trans-unit id="3ab47cdfc89bec9fac8c0dee5b75416d76b80716" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;loadComponent()&lt;/code&gt; selects an ad, it uses &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; to resolve a &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; for each specific component. The &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; then creates an instance of each component.</source>
          <target state="translated">後 &lt;code&gt;loadComponent()&lt;/code&gt; が広告を選択し、それが使用 &lt;code&gt;&lt;a href=&quot;../api/core/componentfactoryresolver&quot;&gt;ComponentFactoryResolver&lt;/a&gt;&lt;/code&gt; を解決するため &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; 各特定コンポーネントのを。次に、 &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; は各コンポーネントのインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="9fb00e37b227919be0aad314249b616191ba52b3" translate="yes" xml:space="preserve">
          <source>After a few changes, the &lt;code&gt;BannerComponent&lt;/code&gt; presents a dynamic title by binding to the component's &lt;code&gt;title&lt;/code&gt; property like this.</source>
          <target state="translated">いくつかの変更後、 &lt;code&gt;BannerComponent&lt;/code&gt; は、このようにコンポーネントの &lt;code&gt;title&lt;/code&gt; プロパティにバインドすることにより、動的なタイトルを表示します。</target>
        </trans-unit>
        <trans-unit id="d73f75b5fbde281c2a56c1e7a51d961f6ce8031e" translate="yes" xml:space="preserve">
          <source>After a navigation completes, the router writes an object containing this value together with a &lt;code&gt;navigationId&lt;/code&gt; to &lt;code&gt;history.state&lt;/code&gt;. The value is written when &lt;code&gt;location.go()&lt;/code&gt; or &lt;code&gt;location.replaceState()&lt;/code&gt; is called before activating this route.</source>
          <target state="translated">ナビゲーションが完了すると、ルーターはこの値を含むオブジェクトを、 &lt;code&gt;navigationId&lt;/code&gt; とともに &lt;code&gt;history.state&lt;/code&gt; に書き込みます。このルートがアクティブになる前に &lt;code&gt;location.go()&lt;/code&gt; または &lt;code&gt;location.replaceState()&lt;/code&gt; が呼び出されると、値が書き込まれます。</target>
        </trans-unit>
        <trans-unit id="b79df42799ec10695c520a6481dd82d8fc694c4e" translate="yes" xml:space="preserve">
          <source>After asynchronous validation begins, the form control enters a &lt;code&gt;pending&lt;/code&gt; state. You can inspect the control's &lt;code&gt;pending&lt;/code&gt; property and use it to give visual feedback about the ongoing validation.</source>
          <target state="translated">非同期検証の開始後、フォームコントロールは &lt;code&gt;pending&lt;/code&gt; 状態になります。コントロールの &lt;code&gt;pending&lt;/code&gt; プロパティを検査し、それを使用して、進行中の検証に関する視覚的なフィードバックを提供できます。</target>
        </trans-unit>
        <trans-unit id="1949057a22110c4f9e7c99ac7d9df533785aff6c" translate="yes" xml:space="preserve">
          <source>After calling &lt;code&gt;compileComponents&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration is frozen for the duration of the current spec.</source>
          <target state="translated">&lt;code&gt;compileComponents&lt;/code&gt; を呼び出した後、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成は現在の仕様の期間中フリーズされます。</target>
        </trans-unit>
        <trans-unit id="a643cff95be73e7ada55a9e30505cef7897bfafd" translate="yes" xml:space="preserve">
          <source>After calling &lt;code&gt;get&lt;/code&gt;, the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; configuration is frozen for the duration of the current spec.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; を呼び出した後、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 構成は現在の仕様の期間中フリーズされます。</target>
        </trans-unit>
        <trans-unit id="1fed1c4462312ad23f49ad51074811e7c8bbd213" translate="yes" xml:space="preserve">
          <source>After completing all tutorial steps, the final app will look like this: .</source>
          <target state="translated">すべてのチュートリアルが完了すると、最終的なアプリは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="696e6cddb6abbbb7365bc7effa9b0e9e22c936f4" translate="yes" xml:space="preserve">
          <source>After configuring &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;, you call its &lt;code&gt;createComponent()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; を構成した後、その &lt;code&gt;createComponent()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9e0b80f068a3dc7233fd3da3591afc15239e870f" translate="yes" xml:space="preserve">
          <source>After configuring the routes, tell the Angular router where to render the views when matched with a route. You can set a router outlet by inserting a &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; container inside the root &lt;code&gt;AppComponent&lt;/code&gt; template.</source>
          <target state="translated">ルートを設定した後、ルートと一致したときにビューをレンダリングする場所をAngularルーターに伝えます。ルート &lt;code&gt;AppComponent&lt;/code&gt; テンプレート内に &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; コンテナーを挿入することで、ルーターアウトレットを設定できます。</target>
        </trans-unit>
        <trans-unit id="b2a28e2451f609ec3b8c9cfc853ca69f5800dc42" translate="yes" xml:space="preserve">
          <source>After each &lt;em&gt;successful&lt;/em&gt; navigation, the router looks in its configuration for an unloaded module that it can preload. Whether it preloads a module, and which modules it preloads, depends upon the &lt;em&gt;preload strategy&lt;/em&gt;.</source>
          <target state="translated">ナビゲーションが&lt;em&gt;成功&lt;/em&gt;するたびに、ルーターはその構成を調べて、プリロードできるアンロードされたモジュールを探します。モジュールを&lt;em&gt;プリロード&lt;/em&gt;するかどうか、およびどのモジュールを&lt;em&gt;プリロード&lt;/em&gt;するかは、&lt;em&gt;プリロード戦略&lt;/em&gt;によって異なります。</target>
        </trans-unit>
        <trans-unit id="419172c8f41df56ca4ec63737a151d4364c46122" translate="yes" xml:space="preserve">
          <source>After each call, the &lt;code&gt;onKey()&lt;/code&gt; method appends the contents of the input box value to the list in the component's &lt;code&gt;values&lt;/code&gt; property, followed by a separator character (|). The &lt;a href=&quot;template-syntax#interpolation&quot;&gt;interpolation&lt;/a&gt; displays the accumulating input box changes from the &lt;code&gt;values&lt;/code&gt; property.</source>
          <target state="translated">各呼び出しの後、 &lt;code&gt;onKey()&lt;/code&gt; メソッドは、コンポーネントの &lt;code&gt;values&lt;/code&gt; プロパティのリストに入力ボックスの値の内容を追加し、その後に区切り文字（|）を追加します。&lt;a href=&quot;template-syntax#interpolation&quot;&gt;補間&lt;/a&gt;表示蓄積入力ボックスから変化 &lt;code&gt;values&lt;/code&gt; プロパティ。</target>
        </trans-unit>
        <trans-unit id="008e39459cd91bca6dfdd98e174699d09c6fccd2" translate="yes" xml:space="preserve">
          <source>After importing the &lt;code&gt;&lt;a href=&quot;../api/common/http/http_interceptors&quot;&gt;HTTP_INTERCEPTORS&lt;/a&gt;&lt;/code&gt; injection token from &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt;, write the &lt;code&gt;NoopInterceptor&lt;/code&gt; provider like this:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/http_interceptors&quot;&gt;HTTP_INTERCEPTORS&lt;/a&gt;&lt;/code&gt; インジェクショントークンを &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; からインポートした後、次のように &lt;code&gt;NoopInterceptor&lt;/code&gt; プロバイダーを記述します。</target>
        </trans-unit>
        <trans-unit id="83c406a785dd29fda73c73fc2726e47d708215b9" translate="yes" xml:space="preserve">
          <source>After importing the &lt;code&gt;Hero&lt;/code&gt; class, the &lt;code&gt;AppComponent.heroes&lt;/code&gt; property can return a &lt;em&gt;typed&lt;/em&gt; array of &lt;code&gt;Hero&lt;/code&gt; objects:</source>
          <target state="translated">&lt;code&gt;Hero&lt;/code&gt; クラスをインポートした後、 &lt;code&gt;AppComponent.heroes&lt;/code&gt; プロパティは、 &lt;code&gt;Hero&lt;/code&gt; オブジェクトの&lt;em&gt;型指定された&lt;/em&gt;配列を返すことができます。</target>
        </trans-unit>
        <trans-unit id="908459e9f22ef8c117d2224aed3f0083328f5571" translate="yes" xml:space="preserve">
          <source>After installing the module, the app will make requests to and receive responses from the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; without knowing that the &lt;em&gt;In-memory Web API&lt;/em&gt; is intercepting those requests, applying them to an in-memory data store, and returning simulated responses.</source>
          <target state="translated">モジュールをインストールした後、アプリは、&lt;em&gt;インメモリWeb API&lt;/em&gt;がそれらのリクエストをインターセプトし、それらをインメモリデータストアに適用し、シミュレートされたレスポンスを返すことを知らなくても、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; にリクエストを送信し、HttpClientからレスポンスを受信し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="4f0baed191f44ae58456adfc0362749f9effe3c0" translate="yes" xml:space="preserve">
          <source>After navigating to the &lt;code&gt;HeroDetailComponent&lt;/code&gt;, you expect to see the details of the selected hero. You need &lt;em&gt;two&lt;/em&gt; pieces of information: the routing path to the component and the hero's &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; に移動すると、選択したヒーローの詳細が表示されるはずです。コンポーネントへのルーティングパスとヒーローの &lt;code&gt;id&lt;/code&gt; &lt;em&gt;2つ&lt;/em&gt;の情報が必要です。</target>
        </trans-unit>
        <trans-unit id="e5cc19cafc387e05e410e89f41afd0efcd0c1414" translate="yes" xml:space="preserve">
          <source>After putting a few items in the cart, users can now review their items, enter name and address, and submit their purchase:</source>
          <target state="translated">カートにいくつかの商品を入れた後、ユーザーは商品を確認し、名前と住所を入力し、購入を送信することができるようになりました。</target>
        </trans-unit>
        <trans-unit id="e03e757be9acc140f73ee6244153323fd294fc41" translate="yes" xml:space="preserve">
          <source>After reading the contents into a string, parse the configuration into a JSON object, typed to the &lt;code&gt;WorkspaceSchema&lt;/code&gt;.</source>
          <target state="translated">コンテンツを文字列に読み込んだ後、構成を解析してJSONオブジェクトに変換し、 &lt;code&gt;WorkspaceSchema&lt;/code&gt; に入力します。</target>
        </trans-unit>
        <trans-unit id="34315c2a12a11033b196feb54799145cf720a985" translate="yes" xml:space="preserve">
          <source>After reporting the error to the console, the handler constructs a user friendly message and returns a safe value to the app so the app can keep working.</source>
          <target state="translated">コンソールにエラーを報告した後、ハンドラはユーザーフレンドリーなメッセージを構築し、アプリが作業を継続できるように安全な値をアプリに返します。</target>
        </trans-unit>
        <trans-unit id="83d2da68a0ee9c48b717bc70206a4279e94449f1" translate="yes" xml:space="preserve">
          <source>After revision, the core of the form should look like this:</source>
          <target state="translated">修正後、フォームの核心部分はこのようになるはずです。</target>
        </trans-unit>
        <trans-unit id="8e0baa03c5ec2030c3efd05bc4b8e0cca8e1205f" translate="yes" xml:space="preserve">
          <source>After running this command you will notice that the &lt;code&gt;angular.json&lt;/code&gt; configuration file has been updated to add two new targets, with a few other changes.</source>
          <target state="translated">このコマンドを実行すると、 &lt;code&gt;angular.json&lt;/code&gt; 構成ファイルが更新され、他のいくつかの変更が加えられた2つの新しいターゲットが追加されます。</target>
        </trans-unit>
        <trans-unit id="eac16cd44b7936bb92ae25b6779b27d5c6b96c42" translate="yes" xml:space="preserve">
          <source>After some time passes, the observable chain completes and the async validation is done. The &lt;code&gt;pending&lt;/code&gt; flag is set to &lt;code&gt;false&lt;/code&gt;, and the form validity is updated.</source>
          <target state="translated">しばらくすると、監視可能なチェーンが完了し、非同期検証が行われます。 &lt;code&gt;pending&lt;/code&gt; フラグがに設定されている &lt;code&gt;false&lt;/code&gt; 、およびフォームの妥当性が更新されます。</target>
        </trans-unit>
        <trans-unit id="5fd5602bf74389e7adc143f2ca100a6303afe748" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, add the &lt;code&gt;HttpClientInMemoryWebApiModule&lt;/code&gt; to the &lt;code&gt;AppModule&lt;/code&gt;&lt;code&gt;imports&lt;/code&gt; array and configure it with the &lt;code&gt;InMemoryDataService&lt;/code&gt;.</source>
          <target state="translated">後 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 、追加 &lt;code&gt;HttpClientInMemoryWebApiModule&lt;/code&gt; をする &lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;imports&lt;/code&gt; アレイとを使用して設定 &lt;code&gt;InMemoryDataService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db93e549ab6aee486147223c94fcf8b921e25c93" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; metadata comes the directive's controller class, called &lt;code&gt;HighlightDirective&lt;/code&gt;, which contains the (currently empty) logic for the directive. Exporting &lt;code&gt;HighlightDirective&lt;/code&gt; makes the directive accessible.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; メタデータの後に、ディレクティブの（現在は空の）ロジックを含む、 &lt;code&gt;HighlightDirective&lt;/code&gt; と呼ばれるディレクティブのコントローラークラスが続きます。 &lt;code&gt;HighlightDirective&lt;/code&gt; をエクスポートすると、ディレクティブにアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="54bbcb802a76f1768ba4c84338e5804ce691385a" translate="yes" xml:space="preserve">
          <source>After the &lt;em&gt;link parameters array&lt;/em&gt;, add an object with a &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; property set to the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The router then calculates the target URL based on the active route's location.</source>
          <target state="translated">&lt;em&gt;リンクパラメータ配列の&lt;/em&gt;後に、 &lt;code&gt;&lt;a href=&quot;../api/router/navigationextras#relativeTo&quot;&gt;relativeTo&lt;/a&gt;&lt;/code&gt; プロパティが &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; に設定されたオブジェクトを追加します。次に、ルーターはアクティブなルートの場所に基づいてターゲットURLを計算します。</target>
        </trans-unit>
        <trans-unit id="7bf50ab32f282dd4ec21fd3291f4baa2c752ec72" translate="yes" xml:space="preserve">
          <source>After the browser refreshes you can navigate freely between the two views by clicking the links.</source>
          <target state="translated">ブラウザが更新された後、リンクをクリックすることで、2つのビュー間を自由に移動することができます。</target>
        </trans-unit>
        <trans-unit id="3b526911261e54097bd46512826f0d84fb5a514b" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the app should run as before, showing a list of heroes and a hero detail view when you click on a hero name.</source>
          <target state="translated">ブラウザをリフレッシュした後、アプリは以前と同じように実行され、ヒーロー名をクリックするとヒーローのリストとヒーローの詳細表示が表示されます。</target>
        </trans-unit>
        <trans-unit id="42fa6cf8b20d6dc5f57b8f4a17f18ee0d574f97d" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the application is broken.</source>
          <target state="translated">ブラウザを更新したら、アプリが壊れてしまいました。</target>
        </trans-unit>
        <trans-unit id="46d6f82df55a653f3faad167f152f46db5094bdc" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the list of heroes appears.</source>
          <target state="translated">ブラウザが更新されると、ヒーローの一覧が表示されます。</target>
        </trans-unit>
        <trans-unit id="bc6532651982e9b93beffa6bd020bc11046b1209" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the list of names reappears. The details area is blank. Click a hero in the list of heroes and its details appear. The app seems to be working again. The heroes appear in a list and details about the clicked hero appear at the bottom of the page.</source>
          <target state="translated">ブラウザを更新すると、名前の一覧が再び表示されます。詳細エリアは空白になっています。ヒーロー一覧でヒーローをクリックすると詳細が表示されます。アプリは再び動作しているようです。ヒーローが一覧で表示され、クリックしたヒーローの詳細がページ下部に表示されます。</target>
        </trans-unit>
        <trans-unit id="7659d9da0a61e0aae6492e6646b8c9535def19f1" translate="yes" xml:space="preserve">
          <source>After the browser refreshes, the router loads the &lt;code&gt;DashboardComponent&lt;/code&gt; and the browser address bar shows the &lt;code&gt;/dashboard&lt;/code&gt; URL.</source>
          <target state="translated">ブラウザが更新されると、ルーターが &lt;code&gt;DashboardComponent&lt;/code&gt; をロードし、ブラウザのアドレスバーに &lt;code&gt;/dashboard&lt;/code&gt; URLが表示されます。</target>
        </trans-unit>
        <trans-unit id="0640fb3fc7fb52ddfb8e650b89dff61362d5f7a6" translate="yes" xml:space="preserve">
          <source>After the command produces an optimal build of your application (equivalent to &lt;code&gt;ng deploy --prod&lt;/code&gt;), it'll upload the production assets to Firebase.</source>
          <target state="translated">コマンドがアプリケーションの最適なビルドを生成した後（ &lt;code&gt;ng deploy --prod&lt;/code&gt; と同等）は、本番アセットをFirebaseにアップロードします。</target>
        </trans-unit>
        <trans-unit id="483b9518a2e29ad9c684bb70f280dcc5ada210de" translate="yes" xml:space="preserve">
          <source>After the end of each successful navigation lifecycle, the router builds a tree of &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; objects that make up the current state of the router. You can access the current &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; from anywhere in the application using the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service and the &lt;code&gt;&lt;a href=&quot;../api/router/router#routerState&quot;&gt;routerState&lt;/a&gt;&lt;/code&gt; property.</source>
          <target state="translated">成功した各ナビゲーションライフサイクルの終了後、ルーターは、ルーターの現在の状態を構成する &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; オブジェクトのツリーを構築します。 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; サービスと &lt;code&gt;&lt;a href=&quot;../api/router/router#routerState&quot;&gt;routerState&lt;/a&gt;&lt;/code&gt; プロパティを使用して、アプリケーションのどこからでも現在の &lt;code&gt;&lt;a href=&quot;../api/router/routerstate&quot;&gt;RouterState&lt;/a&gt;&lt;/code&gt; にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="0f5243cfeda101fda77f99ad21d8e0070af98e8a" translate="yes" xml:space="preserve">
          <source>After the import statements is a class with the &lt;strong&gt;&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;.</source>
          <target state="translated">importステートメントの後には、&lt;strong&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;デコレータを&lt;/a&gt;含むクラスがあります。</target>
        </trans-unit>
        <trans-unit id="9971305116ca9c868d98b3be89949b39ec63ad5d" translate="yes" xml:space="preserve">
          <source>After the initial scaffolding, you will need to refactor your code to use the Web Worker by sending messages to and from.</source>
          <target state="translated">最初のスキャフォールディングの後、Web Worker との間でメッセージを送受信することで、Web Worker を使用するためにコードをリファクタリングする必要があります。</target>
        </trans-unit>
        <trans-unit id="0f5ecb7050161de366e5e91b7e62fd6949d0e0bf" translate="yes" xml:space="preserve">
          <source>After the pluralization category, put the default English text in braces (&lt;code&gt;{}&lt;/code&gt;).</source>
          <target state="translated">複数形のカテゴリーの後に、デフォルトの英語のテキストを中括弧（ &lt;code&gt;{}&lt;/code&gt; ）で囲みます。</target>
        </trans-unit>
        <trans-unit id="7aaa7f92f66008daa88b0514882f49868900fff5" translate="yes" xml:space="preserve">
          <source>After the refactoring in this tutorial, &lt;code&gt;HeroesComponent&lt;/code&gt; will be lean and focused on supporting the view. It will also be easier to unit-test with a mock service.</source>
          <target state="translated">このチュートリアルのリファクタリング後、 &lt;code&gt;HeroesComponent&lt;/code&gt; は無駄のない状態になり、ビューのサポートに重点が置かれます。また、模擬サービスを使用した単体テストも簡単になります。</target>
        </trans-unit>
        <trans-unit id="9d71b7bc24e4e4f91a441c9bafe797e0957e6170" translate="yes" xml:space="preserve">
          <source>After these changes, &lt;code&gt;npm start&lt;/code&gt; no longer works. You must choose to configure &lt;em&gt;either&lt;/em&gt; for F5 with IIS &lt;em&gt;or&lt;/em&gt; for &lt;code&gt;npm start&lt;/code&gt; with the lite-server.</source>
          <target state="translated">これらの変更後、 &lt;code&gt;npm start&lt;/code&gt; は機能しなくなります。あなたは、設定することを選択しなければならない&lt;em&gt;のいずれか&lt;/em&gt; F5のためにIISで&lt;em&gt;または&lt;/em&gt;のために &lt;code&gt;npm start&lt;/code&gt; LITE-サーバと。</target>
        </trans-unit>
        <trans-unit id="4a81e5af1ec083b54117df3e04dc53564d570b55" translate="yes" xml:space="preserve">
          <source>After these changes, the folder structure looks like this:</source>
          <target state="translated">これらの変更を行うと、フォルダ構造は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="70bfcc0137b88df51dbf757d780aa43b22057bf9" translate="yes" xml:space="preserve">
          <source>After these steps, the &lt;code&gt;AppModule&lt;/code&gt; should look like this:</source>
          <target state="translated">これらの手順の後、 &lt;code&gt;AppModule&lt;/code&gt; は次のようになります。</target>
        </trans-unit>
        <trans-unit id="271311210f9d7845ddfa1653eb8a3eedc0ea57b8" translate="yes" xml:space="preserve">
          <source>After these steps, the file should look like this.</source>
          <target state="translated">これらの手順の後、ファイルは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6d8f89045f7e2acb9275de066e103479b5097428" translate="yes" xml:space="preserve">
          <source>After this, the service is injectable anywhere in AngularJS code:</source>
          <target state="translated">この後、サービスはAngularJSのコード内のどこにでもインジェクション可能です。</target>
        </trans-unit>
        <trans-unit id="fcde218b3f76c0d5a06408da878317fa4d98e74a" translate="yes" xml:space="preserve">
          <source>After you build your library and schematics, you can install the schematics collection to run against your project. The steps below show you how to generate a service using the schematic you created above.</source>
          <target state="translated">ライブラリと回路図を構築したら、プロジェクトに対して実行するための回路図コレクションをインストールします。以下の手順では、上記で作成した回路図を使用してサービスを生成する方法を示します。</target>
        </trans-unit>
        <trans-unit id="39eb8f3e1e50fb4d2205dbbe04a4d31291e11491" translate="yes" xml:space="preserve">
          <source>After you create the control in the component class, you must associate it with a form control element in the template. Update the template with the form control using the &lt;code&gt;formControl&lt;/code&gt; binding provided by &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; included in &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コンポーネントクラスでコントロールを作成したら、それをテンプレートのフォームコントロール要素に関連付ける必要があります。更新使用して、フォームコントロールとテンプレート &lt;code&gt;formControl&lt;/code&gt; によって提供される結合 &lt;code&gt;&lt;a href=&quot;../api/forms/formcontroldirective&quot;&gt;FormControlDirective&lt;/a&gt;&lt;/code&gt; はに含ま &lt;code&gt;&lt;a href=&quot;../api/forms/reactiveformsmodule&quot;&gt;ReactiveFormsModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fbf361f75395728462ca66efab4faaa84acc5f29" translate="yes" xml:space="preserve">
          <source>After you understand the basic Angular building blocks, you can begin to learn more about the features and tools that are available to help you develop and deliver Angular applications. Here are some key features.</source>
          <target state="translated">Angularの基本的なビルディングブロックを理解したら、Angularアプリケーションの開発と配信に役立つ機能やツールについて学び始めましょう。主な機能をいくつかご紹介します。</target>
        </trans-unit>
        <trans-unit id="ed53a81c228abae3e127057c4f013ec9f3b3b916" translate="yes" xml:space="preserve">
          <source>After you update the model in the component class, update the template to connect the form group instance and its input elements.</source>
          <target state="translated">コンポーネントクラスのモデルを更新したら、フォームグループのインスタンスとその入力要素を接続するテンプレートを更新します。</target>
        </trans-unit>
        <trans-unit id="13f2d652f70945cb85fc5562fc3600a535ffb359" translate="yes" xml:space="preserve">
          <source>After:</source>
          <target state="translated">After:</target>
        </trans-unit>
        <trans-unit id="bf736dd76163b3c028eaca0186965ed06ab740d9" translate="yes" xml:space="preserve">
          <source>AfterContent</source>
          <target state="translated">AfterContent</target>
        </trans-unit>
        <trans-unit id="22e7a3bedea783cbdeab7bd8a1c5c1a6933d48cc" translate="yes" xml:space="preserve">
          <source>AfterContent hooks</source>
          <target state="translated">AfterContentフック</target>
        </trans-unit>
        <trans-unit id="396ee41ee88aacc341467dae99af0924912509a1" translate="yes" xml:space="preserve">
          <source>AfterContentChecked</source>
          <target state="translated">AfterContentChecked</target>
        </trans-unit>
        <trans-unit id="b2505c44737fd6fda2403d1f31157a2aa14b58ec" translate="yes" xml:space="preserve">
          <source>AfterContentInit</source>
          <target state="translated">AfterContentInit</target>
        </trans-unit>
        <trans-unit id="366ba05d3fa1b33c450e5743e4c241f267857737" translate="yes" xml:space="preserve">
          <source>AfterView</source>
          <target state="translated">AfterView</target>
        </trans-unit>
        <trans-unit id="0e548cdea94b6d14670caf854978f7ac93fb98bb" translate="yes" xml:space="preserve">
          <source>AfterViewChecked</source>
          <target state="translated">AfterViewChecked</target>
        </trans-unit>
        <trans-unit id="f4ad582e07b30bc57425e6b367e57a5676f5f7b1" translate="yes" xml:space="preserve">
          <source>AfterViewInit</source>
          <target state="translated">AfterViewInit</target>
        </trans-unit>
        <trans-unit id="2b9c1b59aec1e136bb7f39d1dffbf0f3269f6892" translate="yes" xml:space="preserve">
          <source>Again, as with Angular components, register the provider with the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; by adding it to the module's &lt;code&gt;providers&lt;/code&gt; list.</source>
          <target state="translated">ここでも、Angularコンポーネントと同様に、モジュールの &lt;code&gt;providers&lt;/code&gt; リストにプロバイダーを追加して、プロバイダーを &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; に登録します。</target>
        </trans-unit>
        <trans-unit id="a1f06ddfc491ba69f7991b805ea8e721d693d361" translate="yes" xml:space="preserve">
          <source>Against the &lt;code&gt;ElementInjector&lt;/code&gt; hierarchy (its parents)</source>
          <target state="translated">&lt;code&gt;ElementInjector&lt;/code&gt; の階層（その親）</target>
        </trans-unit>
        <trans-unit id="0e761a2c37c7ad2715a5ceccd5ba263aacc9de9a" translate="yes" xml:space="preserve">
          <source>Against the &lt;code&gt;ModuleInjector&lt;/code&gt; hierarchy (its parents)</source>
          <target state="translated">&lt;code&gt;ModuleInjector&lt;/code&gt; の階層（その親）</target>
        </trans-unit>
        <trans-unit id="d0efe0b2c75c1c670b3146f5f276e23a667f15ec" translate="yes" xml:space="preserve">
          <source>Alerts</source>
          <target state="translated">Alerts</target>
        </trans-unit>
        <trans-unit id="0bf7a49c8ea017edc7f2032bbb4b0c95e81f0ea3" translate="yes" xml:space="preserve">
          <source>Alerts and Calllouts</source>
          <target state="translated">アラートと吹き出し</target>
        </trans-unit>
        <trans-unit id="9089f32a47f1474eff56fa0a9c798f852209325c" translate="yes" xml:space="preserve">
          <source>Alerts and callouts present warnings, extra detail or references to other pages. They can also be used to provide commentary that &lt;em&gt;enriches&lt;/em&gt; the reader's understanding of the content being presented.</source>
          <target state="translated">アラートとコールアウトは、警告、追加の詳細、または他のページへの参照を示します。彼らはまた、解説を提供するために使用することができます&lt;em&gt;豊かに&lt;/em&gt;提示されているコンテンツの読者の理解を。</target>
        </trans-unit>
        <trans-unit id="7804d4cc875a2b345b93ae440e9d3d6a2f4d4cb0" translate="yes" xml:space="preserve">
          <source>Alerts draw attention to short important points. Alerts should not be used for multi-line content (use &lt;a href=&quot;docs-style-guide#callouts&quot;&gt;callouts&lt;/a&gt; instead).</source>
          <target state="translated">アラートは、短い重要なポイントに注意を引きます。アラートは複数行のコンテンツには使用しないでください（代わりに&lt;a href=&quot;docs-style-guide#callouts&quot;&gt;コールアウトを&lt;/a&gt;使用してください）。</target>
        </trans-unit>
        <trans-unit id="04259816ace1ebe56c853a8763558570c008514a" translate="yes" xml:space="preserve">
          <source>Alias</source>
          <target state="translated">Alias</target>
        </trans-unit>
        <trans-unit id="ac120c6d632c0aafed10d7ef62acaa6d28479bb6" translate="yes" xml:space="preserve">
          <source>Alias inputs and outputs in the metadata using a colon-delimited (&lt;code&gt;:&lt;/code&gt;) string with the directive property name on the left and the public alias on the right:</source>
          <target state="translated">コロン区切りを使用してメタデータにおけるエイリアスの入力と出力（ &lt;code&gt;:&lt;/code&gt; ）右に左にディレクティブプロパティ名を文字列や公共別名：</target>
        </trans-unit>
        <trans-unit id="faa3adcf19e6bd4a892728c2e0aceda3aee71007" translate="yes" xml:space="preserve">
          <source>Alias providers: &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">エイリアスプロバイダー： &lt;code&gt;&lt;a href=&quot;../api/core/existingsansprovider#useExisting&quot;&gt;useExisting&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="262c295e8156615b23a9b9a21875280876ff6fe3" translate="yes" xml:space="preserve">
          <source>Aliased class providers</source>
          <target state="translated">エイリアス化されたクラス・プロバイダ</target>
        </trans-unit>
        <trans-unit id="12e8d87619a5b14f34a496b823d54d6c51209a45" translate="yes" xml:space="preserve">
          <source>Aliases: -D</source>
          <target state="translated">エイリアス:-D</target>
        </trans-unit>
        <trans-unit id="bca726a706e0cb987a708ca99e96eb229c4ee2e7" translate="yes" xml:space="preserve">
          <source>Aliases: -S</source>
          <target state="translated">エイリアス:-S</target>
        </trans-unit>
        <trans-unit id="2b618ef645988dbdfa96c6d0dd9b31d701ea7892" translate="yes" xml:space="preserve">
          <source>Aliases: -c</source>
          <target state="translated">エイリアス:-c</target>
        </trans-unit>
        <trans-unit id="21c330a0e2a2e6fdb8fdc16b0cfc8dfca9621ef7" translate="yes" xml:space="preserve">
          <source>Aliases: -d</source>
          <target state="translated">エイリアス:-d</target>
        </trans-unit>
        <trans-unit id="53241387fa776157e1ac709db2bc0b9ff4269351" translate="yes" xml:space="preserve">
          <source>Aliases: -f</source>
          <target state="translated">エイリアス:-f</target>
        </trans-unit>
        <trans-unit id="f888e82379026d00996152912a3ff9af72da352f" translate="yes" xml:space="preserve">
          <source>Aliases: -g</source>
          <target state="translated">エイリアス:-g</target>
        </trans-unit>
        <trans-unit id="bb9dd7df504aed89801306b3b923af073484cd3d" translate="yes" xml:space="preserve">
          <source>Aliases: -m</source>
          <target state="translated">エイリアス:-m</target>
        </trans-unit>
        <trans-unit id="952d01c1396bf00dc43b948288f5644768618c70" translate="yes" xml:space="preserve">
          <source>Aliases: -o</source>
          <target state="translated">エイリアス:-o</target>
        </trans-unit>
        <trans-unit id="33465e48b30d9b87760e03b4bb2dcf9485e72b0c" translate="yes" xml:space="preserve">
          <source>Aliases: -p</source>
          <target state="translated">エイリアス:-p</target>
        </trans-unit>
        <trans-unit id="febb997df0041b129449bb01c60c3ab7719f4b0c" translate="yes" xml:space="preserve">
          <source>Aliases: -s</source>
          <target state="translated">エイリアス:-s</target>
        </trans-unit>
        <trans-unit id="881d4fb37b8ea4b85e378da2acccae617df1bc81" translate="yes" xml:space="preserve">
          <source>Aliases: -t</source>
          <target state="translated">エイリアス:-t</target>
        </trans-unit>
        <trans-unit id="2b36dfa50916141297a3b84dc3d7b4f0ef1e1849" translate="yes" xml:space="preserve">
          <source>Aliases: -v</source>
          <target state="translated">エイリアス:-v</target>
        </trans-unit>
        <trans-unit id="773b2f76a828881e99082e584a105ac17854ae4c" translate="yes" xml:space="preserve">
          <source>Aliasing in the metadata</source>
          <target state="translated">メタデータのエイリアス</target>
        </trans-unit>
        <trans-unit id="12aeae68aab8c241da4ec948e46d9fc4b87c3bee" translate="yes" xml:space="preserve">
          <source>Aliasing inputs and outputs</source>
          <target state="translated">入力と出力のエイリアス化</target>
        </trans-unit>
        <trans-unit id="cbf22d2da5af310a1d6c29300763bcccdf5470a5" translate="yes" xml:space="preserve">
          <source>Aliasing with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;/&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; decorator</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; / &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; デコレーターのエイリアス</target>
        </trans-unit>
        <trans-unit id="9b2b0d9f150b1cf5ad45ddd02b66c50057628f62" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event&quot;&gt;standard DOM event objects&lt;/a&gt; have a &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; property, a reference to the element that raised the event. In this case, &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; refers to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element&lt;/a&gt; and &lt;code&gt;event.target.value&lt;/code&gt; returns the current contents of that element.</source>
          <target state="translated">すべての&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event&quot;&gt;標準DOMイベントオブジェクトに&lt;/a&gt;は、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; プロパティ、つまりイベントを発生させた要素への参照があります。この場合、 &lt;code&gt;&lt;a href=&quot;../api/router/routerlinkwithhref#target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement&quot;&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素&lt;/a&gt;を &lt;code&gt;event.target.value&lt;/code&gt; 、event.target.valueはその要素の現在のコンテンツを返します。</target>
        </trans-unit>
        <trans-unit id="ef6c45b243cc8c7684094d620c0717caf5d06ab2" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods return an RxJS &lt;code&gt;Observable&lt;/code&gt; of something.</source>
          <target state="translated">すべての &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッドは、何かのRxJS &lt;code&gt;Observable&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="eb5599b660b0c79a86b5a28beaddb416d3aedf11" translate="yes" xml:space="preserve">
          <source>All Angular components, directives and pipes must be declared in an NgModule.</source>
          <target state="translated">Angularのコンポーネント、ディレクティブ、パイプはすべてNgModuleで宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="47f1a89f57ee46d779c84c05d4e22158f2e9d3d7" translate="yes" xml:space="preserve">
          <source>All behavior is based on the expected behavior of the JavaScript API &lt;code&gt;Array.prototype.slice()&lt;/code&gt; and &lt;code&gt;String.prototype.slice()&lt;/code&gt;.</source>
          <target state="translated">すべての動作は、JavaScript API &lt;code&gt;Array.prototype.slice()&lt;/code&gt; および &lt;code&gt;String.prototype.slice()&lt;/code&gt; の予想される動作に基づいています。</target>
        </trans-unit>
        <trans-unit id="83f4574e35f933628564acc9e9670adf27bc7144" translate="yes" xml:space="preserve">
          <source>All but Chrome, Firefox, Edge, IE 11 and Safari 10</source>
          <target state="translated">Chrome、Firefox、Edge、IE 11、Safari 10以外はすべて</target>
        </trans-unit>
        <trans-unit id="78cf0dfc4ff02c126ec8a635233f5056f63a2233" translate="yes" xml:space="preserve">
          <source>All but a few guide pages are &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;markdown&lt;/a&gt; files with an &lt;code&gt;.md&lt;/code&gt; extension.</source>
          <target state="translated">すべてが、いくつかの案内ページがある&lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;マークダウン&lt;/a&gt;を持つファイル &lt;code&gt;.md&lt;/code&gt; 拡張子。</target>
        </trans-unit>
        <trans-unit id="f6163b0506b3d6cee19ae1ba67afebd88a78b3f5" translate="yes" xml:space="preserve">
          <source>All callbacks provided via this token will be called for every component that is bootstrapped. Signature of the callback:</source>
          <target state="translated">このトークンを介して提供されるすべてのコールバックは、ブートストラップされるすべてのコンポーネントに対して呼び出されます。コールバックのシグネチャ。</target>
        </trans-unit>
        <trans-unit id="f6d4518e763e3cfc934ceb005f87993289fc3d75" translate="yes" xml:space="preserve">
          <source>All content is one asset per file. Each component, service, and pipe is in its own file. All third party vendor scripts are stored in another folder and not in the &lt;code&gt;src&lt;/code&gt; folder. You didn't write them and you don't want them cluttering &lt;code&gt;src&lt;/code&gt;. Use the naming conventions for files in this guide. &lt;a href=&quot;styleguide#toc&quot;&gt;Back to top&lt;/a&gt;</source>
          <target state="translated">すべてのコンテンツは、ファイルごとに1つのアセットです。各コンポーネント、サービス、およびパイプは、独自のファイルにあります。サードパーティベンダーのスクリプトはすべて、 &lt;code&gt;src&lt;/code&gt; フォルダーではなく別のフォルダーに保存されます。あなたはそれらを書かなかったし、彼らが &lt;code&gt;src&lt;/code&gt; を乱雑にしたくないのです。このガイドでは、ファイルの命名規則を使用します。&lt;a href=&quot;styleguide#toc&quot;&gt;トップに戻る&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c4ed2d8bd132c629609779d7b7c0ee7dd1066456" translate="yes" xml:space="preserve">
          <source>All entry points</source>
          <target state="translated">すべてのエントリーポイント</target>
        </trans-unit>
        <trans-unit id="2d9456ba0cf30f1f1f1d87dee95529f33f56b70b" translate="yes" xml:space="preserve">
          <source>All exports</source>
          <target state="translated">すべての輸出</target>
        </trans-unit>
        <trans-unit id="555a5a2314312f0604886df5753dde617de5c81b" translate="yes" xml:space="preserve">
          <source>All guides and cookbooks have &lt;em&gt;at least these core files&lt;/em&gt;. Each file has a distinct purpose and evolves independently as the application grows.</source>
          <target state="translated">すべてのガイドとクックブックには&lt;em&gt;、少なくともこれらのコアファイルがあります&lt;/em&gt;。各ファイルには異なる目的があり、アプリケーションの成長に応じて独立して進化します。</target>
        </trans-unit>
        <trans-unit id="1d20c95590619af50ebe88a44377237c9334e6cc" translate="yes" xml:space="preserve">
          <source>All lazy-loaded modules are routed feature modules by definition.</source>
          <target state="translated">すべてのレイジーロードされたモジュールは、定義上、ルーティングされたフィーチャモジュールです。</target>
        </trans-unit>
        <trans-unit id="ba497163aacd2f415fc3983fbe5ba57cdc70e6dc" translate="yes" xml:space="preserve">
          <source>All locale data used by Angular are extracted from the Unicode Consortium's &lt;a href=&quot;http://cldr.unicode.org/&quot;&gt;Common Locale Data Repository (CLDR)&lt;/a&gt;.</source>
          <target state="translated">Angularが使用するすべてのロケールデータは、Unicodeコンソーシアムの&lt;a href=&quot;http://cldr.unicode.org/&quot;&gt;Common Locale Data Repository（CLDR）&lt;/a&gt;から抽出されます。</target>
        </trans-unit>
        <trans-unit id="fa94ed73b28264b28c71949c216d5b8431fb586e" translate="yes" xml:space="preserve">
          <source>All observables returned from &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods are &lt;em&gt;cold&lt;/em&gt; by design. Execution of the HTTP request is &lt;em&gt;deferred&lt;/em&gt;, allowing you to extend the observable with additional operations such as &lt;code&gt;tap&lt;/code&gt; and &lt;code&gt;catchError&lt;/code&gt; before anything actually happens.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッドから返されるすべてのオブザーバブルは、設計上&lt;em&gt;コールド&lt;/em&gt;です。HTTPリクエストの実行は&lt;em&gt;遅延されるため&lt;/em&gt;、実際に何かが発生する前に、 &lt;code&gt;tap&lt;/code&gt; や &lt;code&gt;catchError&lt;/code&gt; などの追加操作でオブザーバブルを拡張できます。</target>
        </trans-unit>
        <trans-unit id="9bcf03575f88913e03cd13ed033b90e1cf77192a" translate="yes" xml:space="preserve">
          <source>All occurrences of a text message that have the same meaning will have the same translation. A text message that is associated with different meanings can have different translations.</source>
          <target state="translated">同じ意味を持つテキストメッセージのすべての出現は、同じ翻訳を持つことになります。異なる意味に関連付けられたテキストメッセージは、異なる翻訳を持つことができます。</target>
        </trans-unit>
        <trans-unit id="4d561a31794ae7f01849587f849895e07f7350e8" translate="yes" xml:space="preserve">
          <source>All of our major releases are supported for 18 months.</source>
          <target state="translated">当社の主要リリースはすべて18ヶ月間サポートされています。</target>
        </trans-unit>
        <trans-unit id="54bd78bf36660977460696089ef9b9012bc21577" translate="yes" xml:space="preserve">
          <source>All of the &lt;code&gt;wtf*&lt;/code&gt; APIs are deprecated and will be removed in a future version.</source>
          <target state="translated">すべての &lt;code&gt;wtf*&lt;/code&gt; APIは推奨されておらず、将来のバージョンでは削除されます。</target>
        </trans-unit>
        <trans-unit id="f299f3554bce53f9ba35ead474380491f94ae4a3" translate="yes" xml:space="preserve">
          <source>All of the app's code goes in a folder named &lt;code&gt;src&lt;/code&gt;. All feature areas are in their own folder, with their own NgModule.</source>
          <target state="translated">アプリのコードはすべて &lt;code&gt;src&lt;/code&gt; という名前のフォルダーに格納されます。すべての機能領域は、独自のNgModuleを持つ独自のフォルダーにあります。</target>
        </trans-unit>
        <trans-unit id="d488a3cf97211143ed0272eeccebfa97e0734fe1" translate="yes" xml:space="preserve">
          <source>All projects within a workspace share a &lt;a href=&quot;workspace-config&quot;&gt;CLI configuration context&lt;/a&gt;. The top level of the workspace contains workspace-wide configuration files, configuration files for the root-level application, and subfolders for the root-level application source and test files.</source>
          <target state="translated">ワークスペース内のすべてのプロジェクトは、&lt;a href=&quot;workspace-config&quot;&gt;CLI構成コンテキストを&lt;/a&gt;共有します。ワークスペースの最上位には、ワークスペース全体の構成ファイル、ルートレベルアプリケーションの構成ファイル、およびルートレベルアプリケーションのソースファイルとテストファイルのサブフォルダーが含まれています。</target>
        </trans-unit>
        <trans-unit id="a86a11f9cc83cd667f2d3d836dd4b6097c3be72e" translate="yes" xml:space="preserve">
          <source>All requests forward up to the root injector, whether you configured it with the &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModule&quot;&gt;bootstrapModule()&lt;/a&gt;&lt;/code&gt; method, or registered all providers with &lt;code&gt;root&lt;/code&gt; in their own services.</source>
          <target state="translated">すべての要求は、 &lt;code&gt;&lt;a href=&quot;../api/core/platformref#bootstrapModule&quot;&gt;bootstrapModule()&lt;/a&gt;&lt;/code&gt; メソッドで構成したか、独自のサービスですべてのプロバイダーを &lt;code&gt;root&lt;/code&gt; に登録したかに関係なく、ルートインジェクターに転送されます。</target>
        </trans-unit>
        <trans-unit id="b677df98f9a1a137700099cd172a9afc9ac44548" translate="yes" xml:space="preserve">
          <source>All response headers.</source>
          <target state="translated">すべての応答ヘッダー。</target>
        </trans-unit>
        <trans-unit id="266c93cc98a1c67666c9fe3051964b12a0907d45" translate="yes" xml:space="preserve">
          <source>All router components must be entry components. Because this would require you to add the component in two places (router and &lt;code&gt;entryComponents&lt;/code&gt;) the Compiler is smart enough to recognize that this is a router definition and automatically add the router component into &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">すべてのルーターコンポーネントはエントリコンポーネントである必要があります。コンポーネントを2か所（ルーターと &lt;code&gt;entryComponents&lt;/code&gt; ）に追加する必要があるため、コンパイラーはこれがルーター定義であることを認識し、ルーターコンポーネントを &lt;code&gt;entryComponents&lt;/code&gt; に自動的に追加するのに十分スマートです。</target>
        </trans-unit>
        <trans-unit id="a9765742971c0ed0a559afb35d2f98bc069ab358" translate="yes" xml:space="preserve">
          <source>All section heading text should be in &quot;Sentence case&quot;, which means the first word is capitalized and all other words are lower case.</source>
          <target state="translated">すべてのセクションの見出しテキストは、最初の単語は大文字で、他のすべての単語は小文字であることを意味する &quot;Sentence case &quot;でなければなりません。</target>
        </trans-unit>
        <trans-unit id="2010b5aa68dd1960b60a188558d3a3c6eeae422a" translate="yes" xml:space="preserve">
          <source>All selectors of directives exported from imported NgModules.</source>
          <target state="translated">インポートされたNgModulesからエクスポートされたディレクティブのすべてのセレクタ。</target>
        </trans-unit>
        <trans-unit id="45c6daa1221c6438e83b827fcf4272388107dbac" translate="yes" xml:space="preserve">
          <source>All selectors of directives listed in `declarations`.</source>
          <target state="translated">declarations`でリストされているディレクティブのすべてのセレクタ。</target>
        </trans-unit>
        <trans-unit id="98ef1fe3f08289d9ae2ac5ecaabbe70f1ac0a3e8" translate="yes" xml:space="preserve">
          <source>All three types of schematics can be part of a collection that you package with your library.</source>
          <target state="translated">この3種類の回路図はすべて、ライブラリと一緒にパッケージ化したコレクションの一部とすることができます。</target>
        </trans-unit>
        <trans-unit id="58563d44c99aee179d2102d631ab6d3346ac6f2a" translate="yes" xml:space="preserve">
          <source>All transitions are defined within an animation trigger, along with named states that the transitions change to and from.</source>
          <target state="translated">すべてのトランジションは、アニメーションのトリガー内で定義され、トランジションが変化する名前付きの状態と一緒に定義されています。</target>
        </trans-unit>
        <trans-unit id="9de972c3116895d08cfcc214fa1b19703f026642" translate="yes" xml:space="preserve">
          <source>Allowed value are &lt;code&gt;&lt;a href=&quot;no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;custom_elements_schema&quot;&gt;CUSTOM_ELEMENTS_SCHEMA&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">許可される値は &lt;code&gt;&lt;a href=&quot;no_errors_schema&quot;&gt;NO_ERRORS_SCHEMA&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;custom_elements_schema&quot;&gt;CUSTOM_ELEMENTS_SCHEMA&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="85ebcd6cf8feaeb9992b2b6b1a1a230f5cedb4e3" translate="yes" xml:space="preserve">
          <source>Allowed values are given with each enumerated option description, with the default value in &lt;strong&gt;bold&lt;/strong&gt;.</source>
          <target state="translated">許可された値は、列挙された各オプションの説明とともに示され、デフォルト値は&lt;strong&gt;太字で&lt;/strong&gt;示されてい&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4e34237b214ab32caacdba55ef91ee24b78df885" translate="yes" xml:space="preserve">
          <source>Allowed values in an &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; object that configure when the router performs the initial navigation operation.</source>
          <target state="translated">ルーターが初期ナビゲーション操作を実行する &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; を構成するExtraOptionsオブジェクトの許可された値。</target>
        </trans-unit>
        <trans-unit id="f4ca59384f608db4264a261808beb5325f2b8151" translate="yes" xml:space="preserve">
          <source>Allowed values in an &lt;code&gt;&lt;a href=&quot;router/extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; object that configure when the router performs the initial navigation operation.</source>
          <target state="translated">ルーターが初期ナビゲーション操作を実行する &lt;code&gt;&lt;a href=&quot;router/extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; を構成するExtraOptionsオブジェクトの許可された値。</target>
        </trans-unit>
        <trans-unit id="085f06d4e071e6f66eb3b9679caf4d86014b1610" translate="yes" xml:space="preserve">
          <source>Allows Angular Component to be used from AngularJS.</source>
          <target state="translated">AngularJSからAngular Componentを使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="ecc1a07f7db604b095e8b41e2cae741aacdd37b3" translate="yes" xml:space="preserve">
          <source>Allows Angular service to be accessible from AngularJS.</source>
          <target state="translated">AngularJSからAngularサービスにアクセスできるようにします。</target>
        </trans-unit>
        <trans-unit id="59ef65ca89ef98a0952a53d7803e4341b9f60c56" translate="yes" xml:space="preserve">
          <source>Allows AngularJS Component to be used from Angular.</source>
          <target state="translated">AngularJSコンポーネントをAngularから利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="7649d729717525a48003b77dd85cd213286b2180" translate="yes" xml:space="preserve">
          <source>Allows AngularJS service to be accessible from Angular.</source>
          <target state="translated">AngularJSサービスがAngularからアクセスできるようにします。</target>
        </trans-unit>
        <trans-unit id="e1d91523ef6bb6743c7eb228ff012768c84d644c" translate="yes" xml:space="preserve">
          <source>Allows a sequential change between styles within a specified time interval. Use within &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt;. Can include multiple &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; calls within each &lt;code&gt;keyframe()&lt;/code&gt;. Uses array syntax.</source>
          <target state="translated">指定された時間間隔内でスタイル間の順次変更を許可します。 &lt;code&gt;&lt;a href=&quot;../api/animations/animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 内で使用します。各 &lt;code&gt;keyframe()&lt;/code&gt; 内に複数の &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 呼び出しを含めることができます。配列構文を使用します。</target>
        </trans-unit>
        <trans-unit id="896073ffe89ca14af5b6f2040d67893e62df843b" translate="yes" xml:space="preserve">
          <source>Allows animations on child components to be run within the same timeframe as the parent.</source>
          <target state="translated">子コンポーネントのアニメーションを親と同じ時間枠内で実行できるようにします。</target>
        </trans-unit>
        <trans-unit id="750378a75cfd1eaf3050ded6f436f0e7bb6f1a79" translate="yes" xml:space="preserve">
          <source>Allows injecting dependencies in &lt;code&gt;beforeEach()&lt;/code&gt; and &lt;code&gt;it()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beforeEach()&lt;/code&gt; と &lt;code&gt;it()&lt;/code&gt; に依存関係を注入できるようにします。</target>
        </trans-unit>
        <trans-unit id="08a3edd872030b372214771d089e67457cc59fb7" translate="yes" xml:space="preserve">
          <source>Allows overriding default compiler providers and settings which are defined in test_injector.js</source>
          <target state="translated">test_injector.js で定義されているデフォルトのコンパイラプロバイダと設定をオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="fa49e14d9829d89b458a57fab56ecfd9673e4927" translate="yes" xml:space="preserve">
          <source>Allows overriding default providers, directives, pipes, modules of the test injector, which are defined in test_injector.js</source>
          <target state="translated">test_injector.js で定義されているテストインジェクタのデフォルトのプロバイダ、ディレクティブ、パイプ、モジュールをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="a7f2d8c5d430d7ae3ff698eb19d82a712bf21944" translate="yes" xml:space="preserve">
          <source>Allows to refer to references which are not yet defined.</source>
          <target state="translated">まだ定義されていない参照を参照できるようにします。</target>
        </trans-unit>
        <trans-unit id="066113a73a472127f1591d76a5f3fc93d93b6b02" translate="yes" xml:space="preserve">
          <source>Allows to register a callback that will be called when the module is destroyed.</source>
          <target state="translated">モジュールが破壊されたときに呼び出されるコールバックを登録します。</target>
        </trans-unit>
        <trans-unit id="9c93cb9606768ab8734f0311d8db95d0ea5cabf8" translate="yes" xml:space="preserve">
          <source>Allows to simulate the loading of ng modules in tests.</source>
          <target state="translated">テストでの ng モジュールのロードをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="a50d82a97b9831022bdfe098f21ced7b0b9170de" translate="yes" xml:space="preserve">
          <source>Allows you to assign styles to an HTML element using CSS. You can use CSS directly, as in the first example, or you can call a method from the component.</source>
          <target state="translated">CSSを使ってHTML要素にスタイルを割り当てることができます。最初の例のようにCSSを直接使用することもできますし、コンポーネントからメソッドを呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="7fe4a6401091a9411a2acc365ceb4c77d0b91d13" translate="yes" xml:space="preserve">
          <source>Almost all Angular projects should use the default HTML5 style. It produces URLs that are easier for users to understand. And it preserves the option to do &lt;em&gt;server-side rendering&lt;/em&gt; later.</source>
          <target state="translated">ほとんどすべてのAngularプロジェクトは、デフォルトのHTML5スタイルを使用する必要があります。ユーザーが理解しやすいURLを生成します。また、後で&lt;em&gt;サーバー側レンダリング&lt;/em&gt;を行うオプションも保持されます。</target>
        </trans-unit>
        <trans-unit id="09bc2f90624b9bf3ca83b868a4cb571e445219e2" translate="yes" xml:space="preserve">
          <source>Also in &lt;code&gt;index.html&lt;/code&gt;, change the scripts to use &lt;code&gt;/node_modules&lt;/code&gt; with a slash instead of &lt;code&gt;node_modules&lt;/code&gt; without the slash.</source>
          <target state="translated">また、 &lt;code&gt;index.html&lt;/code&gt; で、スラッシュなしの &lt;code&gt;node_modules&lt;/code&gt; ではなく、スラッシュ付きの &lt;code&gt;/node_modules&lt;/code&gt; を使用するようにスクリプトを変更します。</target>
        </trans-unit>
        <trans-unit id="c34ca58802e9ae1bf05a9e1e9808cfff54b066f4" translate="yes" xml:space="preserve">
          <source>Also included in the &lt;code&gt;@angular/service-worker&lt;/code&gt; NPM package is a small script &lt;code&gt;safety-worker.js&lt;/code&gt;, which when loaded will unregister itself from the browser. This script can be used as a last resort to get rid of unwanted service workers already installed on client pages.</source>
          <target state="translated">また、 &lt;code&gt;@angular/service-worker&lt;/code&gt; NPMパッケージには、読み込まれたときにブラウザーから登録を解除する小さなスクリプト &lt;code&gt;safety-worker.js&lt;/code&gt; が含まれています。このスクリプトは、クライアントページに既にインストールされている不要なService Workerを取り除く最後の手段として使用できます。</target>
        </trans-unit>
        <trans-unit id="3e77b90384ba1376f2a7fc2a2fdb84d02d1ce375" translate="yes" xml:space="preserve">
          <source>Also remove any &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;()&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; you find, together with the associated AngularJS factory or directive declarations. Since you no longer have downgraded components, you no longer list them in &lt;code&gt;entryComponents&lt;/code&gt;.</source>
          <target state="translated">また、見つかったすべての &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradeinjectable&quot;&gt;downgradeInjectable&lt;/a&gt;()&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; を、関連するAngularJSファクトリーまたはディレクティブ宣言とともに削除します。ダウングレードされたコンポーネントがなくなったので、それらを &lt;code&gt;entryComponents&lt;/code&gt; にリストしなくなりました。</target>
        </trans-unit>
        <trans-unit id="3eed6879744930f3ade3d793b4f2c2ad9e696f16" translate="yes" xml:space="preserve">
          <source>Also runs detectChanges once so that any existing change is detected.</source>
          <target state="translated">また、既存の変更を検出するために detectChanges を一度実行します。</target>
        </trans-unit>
        <trans-unit id="80c4a57c8598fa805c421acf31759c6f916a295a" translate="yes" xml:space="preserve">
          <source>Also, there are a couple of Protractor API calls in the PhoneCat test code that are using the AngularJS &lt;code&gt;$location&lt;/code&gt; service under the hood. As that service is no longer present after the upgrade, replace those calls with ones that use WebDriver's generic URL APIs instead. The first of these is the redirection spec:</source>
          <target state="translated">また、内部でAngularJS &lt;code&gt;$location&lt;/code&gt; サービスを使用しているPhoneCatテストコードには、いくつかのProtractor API呼び出しがあります。アップグレード後にそのサービスは存在しないため、これらの呼び出しを、代わりにWebDriverの汎用URL APIを使用する呼び出しに置き換えます。これらの最初はリダイレクト仕様です：</target>
        </trans-unit>
        <trans-unit id="e9ec4ab463e95d961d6a661f97b761b3ce157450" translate="yes" xml:space="preserve">
          <source>Alter the name of a crisis. Notice that the corresponding name in the crisis list does &lt;em&gt;not&lt;/em&gt; change.</source>
          <target state="translated">危機の名前を変える。危機リストの対応する名前&lt;em&gt;は&lt;/em&gt;変更され&lt;em&gt;ない&lt;/em&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ef2efebfb6fde29b1d7a5cd7f44ec2ef3ac1afb6" translate="yes" xml:space="preserve">
          <source>Alter the name. Click the &quot;Back&quot; button and the app returns to the heroes list which displays the changed hero name. Notice that the name change took effect immediately.</source>
          <target state="translated">名前を変更します。戻る」ボタンをクリックすると、変更されたヒーロー名が表示されるヒーローリストに戻ります。名前の変更はすぐに有効になります。</target>
        </trans-unit>
        <trans-unit id="5c537167fc57c766db36bca741f44f76ff80afb8" translate="yes" xml:space="preserve">
          <source>Alternate build configurations</source>
          <target state="translated">代替のビルド構成</target>
        </trans-unit>
        <trans-unit id="538b10e3e67e9b4ea5cac16016344363816eb454" translate="yes" xml:space="preserve">
          <source>Alternative class providers</source>
          <target state="translated">代替クラスの提供者</target>
        </trans-unit>
        <trans-unit id="317529f453f868f828b3061a5492c704c5ebd726" translate="yes" xml:space="preserve">
          <source>Alternative syntax</source>
          <target state="translated">代替構文</target>
        </trans-unit>
        <trans-unit id="7fffe38e0d7a10037e8a311175b76b5eba5d4a82" translate="yes" xml:space="preserve">
          <source>Alternatively you can pass an HTTP method as the first parameter, a URL string as the second, and an options hash containing the request body as the third. See &lt;code&gt;addBody()&lt;/code&gt;. In this case, the specified &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;observe&lt;/code&gt; options determine the type of returned observable.</source>
          <target state="translated">または、最初のパラメーターとしてHTTPメソッドを渡し、2番目のパラメーターとしてURL文字列を渡し、3番目のパラメーターとして要求本文を含むオプションハッシュを渡すこともできます。 &lt;code&gt;addBody()&lt;/code&gt; を参照してください。この場合、指定された &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;observe&lt;/code&gt; オプションは、返される監視対象のタイプを決定します。</target>
        </trans-unit>
        <trans-unit id="04a6b5805d15fcdd219083f0cbf17fc9bb490bc5" translate="yes" xml:space="preserve">
          <source>Alternatively, the &lt;code&gt;subscribe()&lt;/code&gt; method can accept callback function definitions in line, for &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, and &lt;code&gt;complete&lt;/code&gt; handlers. For example, the following &lt;code&gt;subscribe()&lt;/code&gt; call is the same as the one that specifies the predefined observer:</source>
          <target state="translated">あるいは、 &lt;code&gt;subscribe()&lt;/code&gt; メソッドは、 &lt;code&gt;next&lt;/code&gt; 、 &lt;code&gt;error&lt;/code&gt; 、および &lt;code&gt;complete&lt;/code&gt; ハンドラーのコールバック関数定義をインラインで受け入れることができます。たとえば、次の &lt;code&gt;subscribe()&lt;/code&gt; 呼び出しは、事前定義されたオブザーバーを指定するものと同じです。</target>
        </trans-unit>
        <trans-unit id="e64d9fb1e1f706bc80662aea5f2fb80fb60883b5" translate="yes" xml:space="preserve">
          <source>Alternatively, use the &lt;code&gt;on-&lt;/code&gt; prefix, known as the canonical form:</source>
          <target state="translated">または、正規形と呼ばれる &lt;code&gt;on-&lt;/code&gt; 接頭辞を使用します。</target>
        </trans-unit>
        <trans-unit id="7ed2dd30905d320449fc9e53a46cc64ce34b13be" translate="yes" xml:space="preserve">
          <source>Alternatively, you can add a new file, &lt;code&gt;.browserslistrc&lt;/code&gt;, to the project directory, that specifies browsers you want to support:</source>
          <target state="translated">または、サポートするブラウザを指定する新しいファイル &lt;code&gt;.browserslistrc&lt;/code&gt; をプロジェクトディレクトリに追加できます。</target>
        </trans-unit>
        <trans-unit id="d3a282109fd2c8a8f7ad5940bdac4b9f189f1e55" translate="yes" xml:space="preserve">
          <source>Alternatively, you can call &lt;code&gt;request.error()&lt;/code&gt; with an &lt;code&gt;ErrorEvent&lt;/code&gt;.</source>
          <target state="translated">または、 &lt;code&gt;ErrorEvent&lt;/code&gt; を使用して &lt;code&gt;request.error()&lt;/code&gt; を呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="98bf87f428bccd5b0338c78eadf52aaa7a6089b5" translate="yes" xml:space="preserve">
          <source>Alternatively, you can choose to surface a separate warning for each instance of this pattern with a config value of &lt;code&gt;&quot;always&quot;&lt;/code&gt;. This may help to track down where in the code the pattern is being used as the code is being updated.</source>
          <target state="translated">または、このパターンのインスタンスごとに構成値 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 個別の警告を表示するように選択できます。これは、コードが更新されているときに、コードがパターンのどこで使用されているかを追跡するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5d6c050b861181c863e8cb7973a125de6756b8a9" translate="yes" xml:space="preserve">
          <source>Alternatively, you can fix it by exporting &lt;code&gt;foo&lt;/code&gt; with the expectation that &lt;code&gt;foo&lt;/code&gt; will be assigned at runtime when you actually know its value.</source>
          <target state="translated">また、あなたはエクスポートして、それを修正することができ &lt;code&gt;foo&lt;/code&gt; 期待して &lt;code&gt;foo&lt;/code&gt; はあなたが実際にその価値を知っているとき、実行時に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="19c181f0dfa7e4b222a989a1cf6835c473ecb0d0" translate="yes" xml:space="preserve">
          <source>Alternatively, you can pass a plain function, which is expected to return a promise resolving to an &lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt; (i.e. an instance of your Angular module). The function is called with an array of extra &lt;a href=&quot;../api/core/staticprovider&quot;&gt;Providers&lt;/a&gt; that are expected to be available on the returned &lt;code&gt;&lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt;&lt;/code&gt;'s &lt;a href=&quot;../api/core/injector&quot;&gt;Injector&lt;/a&gt;. For example, if you are using &lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt; or &lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;, you can pass the &lt;code&gt;extraProviders&lt;/code&gt; array to them:</source>
          <target state="translated">あるいは、&lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt;（つまり、Angularモジュールのインスタンス）に解決するpromiseを返すことが期待されるプレーンな関数を渡すことができます。この関数は、返された &lt;code&gt;&lt;a href=&quot;../api/core/ngmoduleref&quot;&gt;NgModuleRef&lt;/a&gt;&lt;/code&gt; の&lt;a href=&quot;../api/core/injector&quot;&gt;インジェクター&lt;/a&gt;で利用できると予想される追加の&lt;a href=&quot;../api/core/staticprovider&quot;&gt;プロバイダーの&lt;/a&gt;配列で呼び出されます。たとえば、&lt;a href=&quot;../api/platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;または&lt;a href=&quot;../api/platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;を使用している場合は、 &lt;code&gt;extraProviders&lt;/code&gt; 配列を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="46f8c220ab71228f6530683c11b7ac9ef6c94316" translate="yes" xml:space="preserve">
          <source>Alternatively, you can specify a custom id in the &lt;code&gt;i18n&lt;/code&gt; attribute by using the prefix &lt;code&gt;@@&lt;/code&gt;. The example below defines the custom id &lt;code&gt;introductionHeader&lt;/code&gt;:</source>
          <target state="translated">または、プレフィックス &lt;code&gt;@@&lt;/code&gt; を使用して、 &lt;code&gt;i18n&lt;/code&gt; 属性でカスタムIDを指定できます。定義カスタムID以下の例 &lt;code&gt;introductionHeader&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb7c49667809bfe94e1dbbd87a5ce803ffe6ceb8" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;yarn client&lt;/a&gt; for downloading and installing npm packages.</source>
          <target state="translated">または、ypm &lt;a href=&quot;https://yarnpkg.com/&quot;&gt;クライアント&lt;/a&gt;を使用してnpmパッケージをダウンロードおよびインストールすることもできます。</target>
        </trans-unit>
        <trans-unit id="e9fbf3395b93f5da053cf8f1ade99d229665c121" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the HTML &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">また、あなたはHTMLを使用することができます &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt; タグを。</target>
        </trans-unit>
        <trans-unit id="5ad999c866c8bd0df67936adc07a5029b68e2cc3" translate="yes" xml:space="preserve">
          <source>Alternatively, you could accumulate the individual keys themselves by substituting &lt;code&gt;event.key&lt;/code&gt; for &lt;code&gt;event.target.value&lt;/code&gt; in which case the same user input would produce:</source>
          <target state="translated">あるいは、 &lt;code&gt;event.target.value&lt;/code&gt; の代わりに &lt;code&gt;event.key&lt;/code&gt; を使用して個々のキー自体を蓄積することもできます。その場合、同じユーザー入力で次のように生成されます。</target>
        </trans-unit>
        <trans-unit id="4dc002b021fdf91ff604ee57f3cc129ef280a957" translate="yes" xml:space="preserve">
          <source>Alternatively, you could make a component-specific &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard for the &lt;code&gt;CrisisDetailComponent&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; method provides you with the current instance of the &lt;code&gt;component&lt;/code&gt;, the current &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; in case you needed to access some external information. This would be useful if you only wanted to use this guard for this component and needed to get the component's properties or confirm whether the router should allow navigation away from it.</source>
          <target state="translated">また、あなたは、コンポーネント固有の作ることができる &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; のためのガード &lt;code&gt;CrisisDetailComponent&lt;/code&gt; を。 &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; メソッドは、現在のインスタンスを提供します &lt;code&gt;component&lt;/code&gt; 、現在 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 、及び &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot&quot;&gt;RouterStateSnapshot&lt;/a&gt;&lt;/code&gt; あなたには、いくつかの外部情報にアクセスするために必要な場合です。これは、このガードをこのコンポーネントにのみ使用したい場合や、コンポーネントのプロパティを取得したり、ルーターがコンポーネントからのナビゲーションを許可するかどうかを確認したりする必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="2246c16c08b61d99b022d0d6c7301776becfb045" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; is a valid Angular directive, it isn't available by default.</source>
          <target state="translated">が &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; が有効な角度指令である、それはデフォルトでは使用できません。</target>
        </trans-unit>
        <trans-unit id="99c7fb8e8fe2caa5683ecf66a4f0b8dc02a8734c" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;HeroService&lt;/code&gt; has no access to &lt;code&gt;UserService&lt;/code&gt;, the factory function does. You inject both &lt;code&gt;Logger&lt;/code&gt; and &lt;code&gt;UserService&lt;/code&gt; into the factory provider and let the injector pass them along to the factory function.</source>
          <target state="translated">が &lt;code&gt;HeroService&lt;/code&gt; がへのアクセスがありません &lt;code&gt;UserService&lt;/code&gt; のを、工場出荷時の機能はありません。 &lt;code&gt;Logger&lt;/code&gt; と &lt;code&gt;UserService&lt;/code&gt; の両方をファクトリプロバイダーに注入し、インジェクターにそれらをファクトリー関数に渡します。</target>
        </trans-unit>
        <trans-unit id="a71de44f8d521e498fa4c517279e05613ba8baef" translate="yes" xml:space="preserve">
          <source>Although developers strive to avoid it, many visual effects and third-party tools, such as jQuery, require DOM access. As a result, you might need to access a component's DOM element.</source>
          <target state="translated">開発者はそれを避けるように努力していますが、多くの視覚効果や jQuery などのサードパーティ製ツールは DOM アクセスを必要とします。その結果、コンポーネントの DOM 要素にアクセスする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="c63a4c9db8fae775d2c9b2460c0753c92e1ed4e5" translate="yes" xml:space="preserve">
          <source>Although in this example you're modelling a job application for heroes, there are no references to any specific hero question outside the objects returned by &lt;code&gt;QuestionService&lt;/code&gt;.</source>
          <target state="translated">この例では、ヒーローの求人アプリケーションをモデル化していますが、 &lt;code&gt;QuestionService&lt;/code&gt; によって返されるオブジェクトの外にある特定のヒーローの質問への参照はありません。</target>
        </trans-unit>
        <trans-unit id="eda7b93e32221f3afb3cbb94c32a8763a782190c" translate="yes" xml:space="preserve">
          <source>Although interceptors are capable of mutating requests and responses, the &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; instance properties are &lt;code&gt;readonly&lt;/code&gt;, rendering them largely immutable.</source>
          <target state="translated">インターセプターは要求と応答を変更することができますが、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httprequest&quot;&gt;HttpRequest&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/common/http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; インスタンスプロパティは &lt;code&gt;readonly&lt;/code&gt; 、ほとんど不変です。</target>
        </trans-unit>
        <trans-unit id="140a2bef2ba1a6526c1ddea73a80aa5c89e23cae" translate="yes" xml:space="preserve">
          <source>Although invisible, the component&amp;mdash;and all of its descendant components&amp;mdash;tie up resources. The performance and memory burden can be substantial, responsiveness can degrade, and the user sees nothing.</source>
          <target state="translated">コンポーネント（およびそのすべての子孫コンポーネント）は目に見えませんが、リソースを占有します。パフォーマンスとメモリの負荷が大きくなり、応答性が低下し、ユーザーには何も見えなくなります。</target>
        </trans-unit>
        <trans-unit id="8a59cd2708af00e8af91086a976046b0bcef21a1" translate="yes" xml:space="preserve">
          <source>Although it doesn't actually log in, it has what you need for this discussion. It has an &lt;code&gt;isLoggedIn&lt;/code&gt; flag to tell you whether the user is authenticated. Its &lt;code&gt;login&lt;/code&gt; method simulates an API call to an external service by returning an observable that resolves successfully after a short pause. The &lt;code&gt;redirectUrl&lt;/code&gt; property will store the attempted URL so you can navigate to it after authenticating.</source>
          <target state="translated">実際にはログインしませんが、このディスカッションに必要なものが含まれています。 &lt;code&gt;isLoggedIn&lt;/code&gt; フラグがあり、ユーザーが認証されているかどうかがわかります。その &lt;code&gt;login&lt;/code&gt; メソッドは、短い一時停止後に正常に解決されるオブザーバブルを返すことにより、外部サービスへのAPI呼び出しをシミュレートします。 &lt;code&gt;redirectUrl&lt;/code&gt; のあなたが認証した後、それにナビゲートすることができるようにプロパティが試みられURLを格納します。</target>
        </trans-unit>
        <trans-unit id="b709afe389b87b25545ae196d4d825808c5ef733" translate="yes" xml:space="preserve">
          <source>Although it's harmless to add components to this list, it's best to add only the components that are truly &lt;em&gt;entry components&lt;/em&gt;. Don't include components that &lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;are referenced&lt;/a&gt; in the templates of other components.</source>
          <target state="translated">このリストにコンポーネントを追加しても無害ですが、本当に&lt;em&gt;エントリコンポーネントで&lt;/em&gt;あるコンポーネントのみを追加するのが最善&lt;em&gt;です&lt;/em&gt;。他のコンポーネントのテンプレートで&lt;a href=&quot;ngmodule-faq#q-template-reference&quot;&gt;参照さ&lt;/a&gt;れているコンポーネントを含めないでください。</target>
        </trans-unit>
        <trans-unit id="e6f1c72ed2810faf50b8f3333c1f8b5b5403cdef" translate="yes" xml:space="preserve">
          <source>Although it's possible to write complex template expressions, it's a better practice to avoid them.</source>
          <target state="translated">複雑なテンプレート表現を書くことは可能ですが、それは避けた方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="b526ddc47425d94439f76e0b41ef7dc4ee102f58" translate="yes" xml:space="preserve">
          <source>Although matrix notation never made it into the HTML standard, it is legal and it became popular among browser routing systems as a way to isolate parameters belonging to parent and child routes. The Router is such a system and provides support for the matrix notation across browsers.</source>
          <target state="translated">マトリックス記法が HTML 標準になることはありませんでしたが、これは合法であり、親ルートと子ルートに属するパラメータを分離する方法として、ブラウザのルーティングシステムの間で普及しました。Router はそのようなシステムであり、ブラウザ全体でマトリックス記法をサポートしています。</target>
        </trans-unit>
        <trans-unit id="8d8e9edc4365018503a0aa8ba523d7e123f26f73" translate="yes" xml:space="preserve">
          <source>Although not discussed here, there's an example of &lt;code&gt;&lt;a href=&quot;../api/core/querylist#map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;getHeroNo404()&lt;/code&gt; method included in the sample source code.</source>
          <target state="translated">ここで説明されていないが、一例があります &lt;code&gt;&lt;a href=&quot;../api/core/querylist#map&quot;&gt;map()&lt;/a&gt;&lt;/code&gt; 内 &lt;code&gt;getHeroNo404()&lt;/code&gt; サンプルソースコードに含まれる方法。</target>
        </trans-unit>
        <trans-unit id="1791d4dc1123e82f2994b8a2caf82568ea2a7c6d" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;AppConfig&lt;/code&gt; interface plays no role in dependency injection, it supports typing of the configuration object within the class.</source>
          <target state="translated">けれども &lt;code&gt;AppConfig&lt;/code&gt; インタフェースは、依存性注入で何の役割を果たしていない、それはクラス内の構成オブジェクトのタイピングをサポートしています。</target>
        </trans-unit>
        <trans-unit id="db12662de437927b080487074c85c43b5bbd2b73" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;compose&lt;/code&gt; route is pinned to the &quot;popup&quot; outlet, that's not sufficient for wiring the route to a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; directive. You have to specify the named outlet in a &lt;em&gt;link parameters array&lt;/em&gt; and bind it to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; with a property binding.</source>
          <target state="translated">が &lt;code&gt;compose&lt;/code&gt; ルートが「ポップアップ」コンセントに固定され、それはへのルートを配線するために十分ではありません &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; のディレクティブ。&lt;em&gt;リンクパラメータ配列&lt;/em&gt;で名前付きアウトレットを指定し、プロパティバインディングで &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; にバインドする必要があります。</target>
        </trans-unit>
        <trans-unit id="1d7c4334ace67bdbb9ee7db7773185ffcfb0f003" translate="yes" xml:space="preserve">
          <source>Although the admin dashboard &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; only contains a relative slash without an additional URL segment, it is considered a match to any route within the admin feature area. You only want the &lt;code&gt;Dashboard&lt;/code&gt; link to be active when the user visits that route. Adding an additional binding to the &lt;code&gt;Dashboard&lt;/code&gt; routerLink,&lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]=&quot;{ exact: true }&quot;&lt;/code&gt;, marks the &lt;code&gt;./&lt;/code&gt; link as active when the user navigates to the &lt;code&gt;/admin&lt;/code&gt; URL and not when navigating to any of the child routes.</source>
          <target state="translated">管理ダッシュボードの &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; には、追加のURLセグメントのない相対スラッシュのみが含まれていますが、管理機能領域内のどのルートとも一致すると見なされます。ユーザーがそのルートにアクセスしたときにのみ &lt;code&gt;Dashboard&lt;/code&gt; リンクをアクティブにする必要があります。 &lt;code&gt;Dashboard&lt;/code&gt; routerLink、 &lt;code&gt;[&lt;a href=&quot;../api/router/routerlinkactive#routerLinkActiveOptions&quot;&gt;routerLinkActiveOptions&lt;/a&gt;]=&quot;{ exact: true }&quot;&lt;/code&gt; に追加のバインディングを追加すると、ユーザーが &lt;code&gt;/admin&lt;/code&gt; URLに移動したときに &lt;code&gt;./&lt;/code&gt; リンクがアクティブであり、子ルートのいずれかに移動していない場合にマークが付けられます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
