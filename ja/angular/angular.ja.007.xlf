<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="8952f7b930f6e954e3b60a48a8cbcaedd9b31542" translate="yes">
          <source>For more information on the acceptable range for each of these numbers and other details see your native internationalization library.</source>
          <target state="translated">これらの各数値の許容範囲の詳細およびその他の詳細については、ネイティブの国際化ライブラリを参照してください。</target>
        </trans-unit>
        <trans-unit id="dd88bdbd389d58114d341cf8d34f28359dc62a54" translate="yes">
          <source>For more information on two-way binding with &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;, see the &lt;a href=&quot;template-syntax#ngModel&quot;&gt;NgModel&amp;mdash;Two-way binding to form elements with &lt;code&gt;[(ngModel)]&lt;/code&gt;&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; を使用した双方向バインディングの詳細については、「 &lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt; 」ページの&lt;a href=&quot;template-syntax#ngModel&quot;&gt; &lt;code&gt;[(ngModel)]&lt;/code&gt; &lt;/a&gt;セクションでフォーム要素へのNgModel&amp;mdash;双方向バインディングを参照してください。</target>
        </trans-unit>
        <trans-unit id="99d287becb11b19affa20313753722427b8a4c4b" translate="yes">
          <source>For more information see &lt;a href=&quot;workspace-config&quot;&gt;Workspace Configuration&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;workspace-config&quot;&gt;ワークスペースの構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="10968353b5aa385ae26af5f3b92c0f4f65a140ed" translate="yes">
          <source>For more information see the &lt;a href=&quot;router#activated-route&quot;&gt;Router guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;router#activated-route&quot;&gt;ルーターガイドを&lt;/a&gt;参照してください 。</target>
        </trans-unit>
        <trans-unit id="f8a289a1d967f8d205c8f5814a3cc02a8c2ffaf8" translate="yes">
          <source>For more information see the &lt;a href=&quot;template-syntax#other-bindings&quot;&gt;Attribute, class, and style bindings&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;template-syntax&quot;&gt;テンプレートの構文&lt;/a&gt; 」ページの「 &lt;a href=&quot;template-syntax#other-bindings&quot;&gt;属性、クラス、およびスタイルのバインド」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="769195363ef40e5cc39446645a5fac8af82ad174" translate="yes">
          <source>For more information see the &lt;a href=&quot;template-syntax#property-binding&quot;&gt;Property binding&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;template-syntax&quot;&gt;テンプレートの構文&lt;/a&gt; 」ページの「 &lt;a href=&quot;template-syntax#property-binding&quot;&gt;プロパティのバインド」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1ad6b4e720e85666693541a6437ca7c180df2ef6" translate="yes">
          <source>For more information, refer to &lt;a href=&quot;styleguide#file-tree&quot;&gt;this folder and file structure example.&lt;/a&gt;</source>
          <target state="translated">詳細については、 &lt;a href=&quot;styleguide#file-tree&quot;&gt;このフォルダーとファイル構造の例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1d2a41c7e3c796f9e2c894a9039e362a5b0903ca" translate="yes">
          <source>For more information, see &lt;a href=&quot;../guide/browser-support&quot;&gt;Browser Support&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;../guide/browser-support&quot;&gt;ブラウザのサポートを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9f3dc28bd501a5350cf9ed9793b9c5dd2dcfef70" translate="yes">
          <source>For more information, see &lt;a href=&quot;../guide/elements&quot;&gt;Angular Elements Overview&lt;/a&gt;.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;../guide/elements&quot;&gt;Angular要素の概要」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3da5dc400360468fb0e1202b31268e48759f8137" translate="yes">
          <source>For more information, see &lt;a href=&quot;../guide/universal&quot;&gt;Server-side Rendering: An intro to Angular Universal&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;../guide/universal&quot;&gt;サーバーサイドレンダリング：Angular Universalの紹介を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="42ffd5f9d2a4e70c577c23245862d32768a8e840" translate="yes">
          <source>For more information, see &lt;a href=&quot;ajs-quick-reference#filters-pipes&quot;&gt;Filters/pipes&lt;/a&gt; below.</source>
          <target state="translated">詳細については、以下の&lt;a href=&quot;ajs-quick-reference#filters-pipes&quot;&gt;フィルター/パイプを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="74bb82b6fb25ae18e173857402063be64c8b3ff1" translate="yes">
          <source>For more information, see &lt;a href=&quot;architecture#components&quot;&gt;Architecture Overview&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;architecture#components&quot;&gt;アーキテクチャの概要を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f3f7da9f4b2ed38024f3075baf394b62bfebf75c" translate="yes">
          <source>For more information, see &lt;a href=&quot;component-styles#deprecated-deep--and-ng-deep&quot;&gt;/deep/, &amp;gt;&amp;gt;&amp;gt;, and ::ng-deep&lt;/a&gt; in the Component Styles guide.</source>
          <target state="translated">詳細については、コンポーネントスタイルガイドの&lt;a href=&quot;component-styles#deprecated-deep--and-ng-deep&quot;&gt;/ deep /、&amp;gt;&amp;gt;&amp;gt;、および:: ng-deepを参照&lt;/a&gt;してください。</target>
        </trans-unit>
        <trans-unit id="910e6c9f9471fae61f362d6475c1608582103bfa" translate="yes">
          <source>For more information, see &lt;a href=&quot;entry-components&quot;&gt;Entry Components&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;entry-components&quot;&gt;エントリコンポーネントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="647d992d00106f995eb13d466d01fe417cfe65cf" translate="yes">
          <source>For more information, see &lt;a href=&quot;feature-modules&quot;&gt;Feature Modules&lt;/a&gt; and &lt;a href=&quot;module-types&quot;&gt;Module Types&lt;/a&gt;</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;feature-modules&quot;&gt;機能モジュール&lt;/a&gt;と&lt;a href=&quot;module-types&quot;&gt;モジュールタイプ」を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="e65514d22eada34ea7b89a6ac9d12c8e55cfaada" translate="yes">
          <source>For more information, see &lt;a href=&quot;file-structure&quot;&gt;Project File Structure&lt;/a&gt;.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;file-structure&quot;&gt;プロジェクトファイルの構造&lt;/a&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="1f9218549d8779c7011a94db6914ce5a34a35b02" translate="yes">
          <source>For more information, see &lt;a href=&quot;file-structure&quot;&gt;Workspace and Project File Structure&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;file-structure&quot;&gt;ワークスペースとプロジェクトのファイル構造を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="88a7c699d9f401cabad96d14c386c540d56f272c" translate="yes">
          <source>For more information, see &lt;a href=&quot;file-structure&quot;&gt;Workspace and project file structure&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;file-structure&quot;&gt;ワークスペースとプロジェクトのファイル構造を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="61925bb6327cd5e1406c0ce1f5c086e01c47cf5a" translate="yes">
          <source>For more information, see &lt;a href=&quot;form-validation&quot;&gt;Form Validation&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;form-validation&quot;&gt;フォーム検証を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3759746ed1e1fa5e80f65859aa178d1f09e1ad1e" translate="yes">
          <source>For more information, see &lt;a href=&quot;https://autoprefixer.github.io/&quot;&gt;Autoprefixer documentation&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;https://autoprefixer.github.io/&quot;&gt;Autoprefixerのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bd8ac232ee0667f9ad348999ea89abd8c513a96f" translate="yes">
          <source>For more information, see &lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScript Modules vs. NgModules&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;ngmodule-vs-jsmodule&quot;&gt;JavaScriptモジュールとNgModulesを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ffc85b5be8ec62000eb01feeeeb30858b38867de" translate="yes">
          <source>For more information, see &lt;a href=&quot;ngmodules&quot;&gt;NgModules&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;ngmodules&quot;&gt;NgModulesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b3bacaa09ba02cc1ce65095dcd8b2994f774ff5a" translate="yes">
          <source>For more information, see &lt;a href=&quot;router&quot;&gt;Routing and Navigation&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;router&quot;&gt;ルーティングとナビゲーションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="28d7da8c96ca8c10b7825011250effd25ef6ac50" translate="yes">
          <source>For more information, see &lt;a href=&quot;schematics&quot;&gt;Schematics&lt;/a&gt; and &lt;a href=&quot;creating-libraries#integrating-with-the-cli&quot;&gt;Integrating Libraries with the CLI&lt;/a&gt;.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;schematics&quot;&gt;回路図&lt;/a&gt;および&lt;a href=&quot;creating-libraries#integrating-with-the-cli&quot;&gt;ライブラリとCLIの統合」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="faf78994c8191e68393eb8590f1621ac1a34d996" translate="yes">
          <source>For more information, see &lt;a href=&quot;service-worker-config#assetgroups&quot;&gt;Service Worker Configuration&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;service-worker-config#assetgroups&quot;&gt;Service Workerの構成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a3cb457dd4fe6b961a9c5d6d0ef8b39b976b5d6f" translate="yes">
          <source>For more information, see &lt;a href=&quot;structural-directives&quot;&gt;Structural Directives&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;structural-directives&quot;&gt;構造ディレクティブを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e72ee8c0272a1b8689787af6c58eaa81e5346b14" translate="yes">
          <source>For more information, see &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;The NgSwitch directives&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;template-syntax&quot;&gt;テンプレートの構文&lt;/a&gt; 」ページの&lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;「NgSwitchディレクティブ」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="d8f1d4de7f1fc3885fd915873481df8c0921c29a" translate="yes">
          <source>For more information, see &lt;a href=&quot;workspace-config&quot;&gt;Workspace Configuration&lt;/a&gt;.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;workspace-config&quot;&gt;ワークスペースの構成&lt;/a&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="feacd759d802327f6bf7203cee38b5e8d2c13c24" translate="yes">
          <source>For more information, see Web Component documentation for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events#Creating_custom_events&quot;&gt;Creating custom events&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events#Creating_custom_events&quot;&gt;カスタムイベントの作成&lt;/a&gt;に関するWebコンポーネントのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c8d5851cb623be46e85825bee69058823d2cf024" translate="yes">
          <source>For more information, see the &lt;a href=&quot;architecture#components&quot;&gt;Components&lt;/a&gt; section of the &lt;a href=&quot;architecture&quot;&gt;Architecture Overview&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;architecture&quot;&gt;アーキテクチャの概要&lt;/a&gt; 」ページの「 &lt;a href=&quot;architecture#components&quot;&gt;コンポーネント」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9562f2baea93ad760f4f07698ee700193ef683f3" translate="yes">
          <source>For more information, see the &lt;a href=&quot;architecture#dependency-injection&quot;&gt;Dependency injection&lt;/a&gt; section of the &lt;a href=&quot;architecture&quot;&gt;Architecture Overview&lt;/a&gt;.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;architecture&quot;&gt;アーキテクチャの概要」の&lt;/a&gt; 「 &lt;a href=&quot;architecture#dependency-injection&quot;&gt;依存性注入」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4e897a0d9749db6b4e9a381af9d22e7733f38b78" translate="yes">
          <source>For more information, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API#Interfaces&quot;&gt;MDN Interfaces documentation&lt;/a&gt; which has API docs for all the standard DOM elements and their properties. Comparing the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td&quot;&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; attributes&lt;/a&gt; attributes to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement&quot;&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; properties&lt;/a&gt; provides a helpful example for differentiation. In particular, you can navigate from the attributes page to the properties via &quot;DOM interface&quot; link, and navigate the inheritance hierarchy up to &lt;code&gt;HTMLTableCellElement&lt;/code&gt;.</source>
          <target state="translated">詳細については、すべての標準DOM要素とそれらのプロパティに関するAPIドキュメントを含む&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API#Interfaces&quot;&gt;MDNインターフェイスドキュメント&lt;/a&gt;を参照してください。 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td&quot;&gt; &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 属性の&lt;/a&gt;属性を&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement&quot;&gt; &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; プロパティ&lt;/a&gt;と比較すると、差別化に役立つ例が提供されます。 特に、「DOMインターフェイス」リンクを介して属性ページからプロパティに移動し、 &lt;code&gt;HTMLTableCellElement&lt;/code&gt; まで継承階層を移動できます。</target>
        </trans-unit>
        <trans-unit id="3cc2dd3553dd60cfafd23d0f7c3bcbdbcd65cd08" translate="yes">
          <source>For more information, see the &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScript Handbook&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/tsconfig-json.html&quot;&gt;TypeScriptハンドブックを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e41e0a5e60e15529ca5490506b25bc9d5d510d6f" translate="yes">
          <source>For more information, see the &lt;a href=&quot;template-syntax#event-binding&quot;&gt;Event binding&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;template-syntax&quot;&gt;テンプレート構文&lt;/a&gt; 」ページの「 &lt;a href=&quot;template-syntax#event-binding&quot;&gt;イベントバインディング」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="d74a1bd0b2c736fe8616be8256dd3c4c3aff5eb0" translate="yes">
          <source>For more information, see the &lt;a href=&quot;template-syntax#interpolation&quot;&gt;Interpolation&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;template-syntax&quot;&gt;テンプレートの構文&lt;/a&gt; 」ページの「 &lt;a href=&quot;template-syntax#interpolation&quot;&gt;補間」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f81eb224215358882f713669daaa0a505a0494b1" translate="yes">
          <source>For more information, see the &lt;a href=&quot;template-syntax#microsyntax&quot;&gt;ngFor micro-syntax&lt;/a&gt; section of the &lt;a href=&quot;template-syntax&quot;&gt;Template Syntax&lt;/a&gt; page.</source>
          <target state="translated">詳細については、「 &lt;a href=&quot;template-syntax&quot;&gt;テンプレートの構文&lt;/a&gt; 」ページの「 &lt;a href=&quot;template-syntax#microsyntax&quot;&gt;ngFor micro-syntax」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f41491a9bc619bc06a138dc6be2c2f60b631649c" translate="yes">
          <source>For more information, see the XSSI section of this &lt;a href=&quot;https://security.googleblog.com/2011/05/website-security-for-webmasters.html&quot;&gt;Google web security blog post&lt;/a&gt;.</source>
          <target state="translated">詳細については、この&lt;a href=&quot;https://security.googleblog.com/2011/05/website-security-for-webmasters.html&quot;&gt;Google Webセキュリティブログ投稿&lt;/a&gt;のXSSIセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0b3a041e7e67d85d817c91582c81d8e8a9f22482" translate="yes">
          <source>For more information, see the usage notes for &lt;a href=&quot;../api/forms/formcontroldirective#use-with-ngmodel&quot;&gt;&lt;code&gt;FormControlDirective&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/forms/formcontrolname#use-with-ngmodel&quot;&gt;&lt;code&gt;FormControlName&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;../api/forms/formcontroldirective#use-with-ngmodel&quot;&gt; &lt;code&gt;FormControlDirective&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../api/forms/formcontrolname#use-with-ngmodel&quot;&gt; &lt;code&gt;FormControlName&lt;/code&gt; の&lt;/a&gt;使用上の注意を参照してください。</target>
        </trans-unit>
        <trans-unit id="fb1b9eb393e6ee99baf5d52bbb3bbc1d37842c77" translate="yes">
          <source>For more on NgModules you're likely to see frequently in apps, see &lt;a href=&quot;frequent-ngmodules&quot;&gt;Frequently Used Modules&lt;/a&gt;.</source>
          <target state="translated">アプリで頻繁に表示されるNgModuleの詳細については、「 &lt;a href=&quot;frequent-ngmodules&quot;&gt;よく使用されるモジュール&lt;/a&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="c7e4611ebab16c5cdd03b3e589a81a8f80eb9350" translate="yes">
          <source>For more on form validation, visit the &lt;a href=&quot;form-validation&quot;&gt;Form Validation&lt;/a&gt; guide.</source>
          <target state="translated">フォーム検証の詳細については、 &lt;a href=&quot;form-validation&quot;&gt;フォーム検証&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="666e64d5996e9b26f42c2196557076d536186936" translate="yes">
          <source>For more on how to use two-way binding in forms, see Angular &lt;a href=&quot;template-syntax#ngModel&quot;&gt;NgModel&lt;/a&gt;.</source>
          <target state="translated">フォームで双方向バインディングを使用する方法の詳細については、Angular &lt;a href=&quot;template-syntax#ngModel&quot;&gt;NgModelを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="809ad89220646ba891d89d96783aa3e684e961d1" translate="yes">
          <source>For more on the design considerations and intentions, see &lt;a href=&quot;https://github.com/angular/vscode-ng-language-service/wiki/Design&quot;&gt;design documentation here&lt;/a&gt;.</source>
          <target state="translated">設計上の考慮事項と意図の詳細については、こちらの&lt;a href=&quot;https://github.com/angular/vscode-ng-language-service/wiki/Design&quot;&gt;設計ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f278974e8aa6767eefc9593cf1e0b5499272b44b" translate="yes">
          <source>For more usage information, see the &lt;a href=&quot;../guide/service-worker-intro&quot;&gt;Service Workers&lt;/a&gt; guide.</source>
          <target state="translated">使用方法の詳細については、 &lt;a href=&quot;../guide/service-worker-intro&quot;&gt;Service Worker&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="ab92685c5e50a5b9a7e3884b2e99d733f6442437" translate="yes">
          <source>For now, focus on &lt;em&gt;Barry&lt;/em&gt;'s constructor.</source>
          <target state="translated">今のところ、 &lt;em&gt;Barry&lt;/em&gt;のコンストラクターに注目してください。</target>
        </trans-unit>
        <trans-unit id="59100ae08d659db33b88f25209e8830fe8afa97e" translate="yes">
          <source>For one thing, TypeScript is a superset of ES2015. Any app that has previously been written in ES5 - like the PhoneCat example has - can with TypeScript start incorporating all of the JavaScript features that are new to ES2015. These include things like &lt;code&gt;let&lt;/code&gt;s and &lt;code&gt;const&lt;/code&gt;s, arrow functions, default function parameters, and destructuring assignments.</source>
          <target state="translated">一つには、TypeScriptはES2015のスーパーセットです。 PhoneCatの例のように、以前にES5で作成されたアプリはすべて、TypeScriptを使用してES2015の新しいJavaScript機能をすべて組み込むことができます。 これらには、 &lt;code&gt;let&lt;/code&gt; 、 &lt;code&gt;const&lt;/code&gt; 、矢印関数、デフォルトの関数パラメーター、および破壊の割り当てなどが含まれます。</target>
        </trans-unit>
        <trans-unit id="f03c29e27c6c18bf79682cff783ba6a44d092067" translate="yes">
          <source>For our example builder, we expect the &lt;code&gt;options&lt;/code&gt; value to be a &lt;code&gt;JsonObject&lt;/code&gt; with two keys: a &lt;code&gt;command&lt;/code&gt; that is a string, and an &lt;code&gt;args&lt;/code&gt; array of string values.</source>
          <target state="translated">サンプルビルダーでは、 &lt;code&gt;options&lt;/code&gt; 値は、2つのキーを持つ文字列である &lt;code&gt;JsonObject&lt;/code&gt; であると想定しています：文字列である &lt;code&gt;command&lt;/code&gt; と、文字列値の &lt;code&gt;args&lt;/code&gt; 配列。</target>
        </trans-unit>
        <trans-unit id="56f7c93c7f59e5f9168a4708eb3d38dde1a88f3d" translate="yes">
          <source>For performance reasons, no comparable pipe exists in Angular. Do all your filtering in the component. If you need the same filtering code in several templates, consider building a custom pipe.</source>
          <target state="translated">パフォーマンス上の理由から、Angularには同等のパイプは存在しません。 コンポーネントですべてのフィルタリングを実行します。 複数のテンプレートで同じフィルタリングコードが必要な場合は、カスタムパイプの構築を検討してください。</target>
        </trans-unit>
        <trans-unit id="b53efe89cb24b2f51ff65079bc39c73f64f531fe" translate="yes">
          <source>For performance reasons, no comparable pipe exists in Angular. Instead, use component code to order or sort results. If you need the same ordering or sorting code in several templates, consider building a custom pipe.</source>
          <target state="translated">パフォーマンス上の理由から、Angularには同等のパイプは存在しません。 代わりに、コンポーネントコードを使用して結果を並べ替えるか、並べ替えます。 複数のテンプレートで同じ順序付けコードまたは並べ替えコードが必要な場合は、カスタムパイプの構築を検討してください。</target>
        </trans-unit>
        <trans-unit id="5068e7ff50c8b38b8c331c0d5f43808c17db59a9" translate="yes">
          <source>For performance reasons, the Stackblitz does not start right away. The reader sees an image instead. Clicking the image starts the sometimes-slow process of launching the embedded Stackblitz within an iframe on the page.</source>
          <target state="translated">パフォーマンス上の理由から、Stackblitzはすぐには起動しません。 代わりに、読者には画像が表示されます。 画像をクリックすると、ページ上のiframe内に埋め込まれたStackblitzを起動する、時々遅いプロセスが開始されます。</target>
        </trans-unit>
        <trans-unit id="4960e870d39261ecd536d1eac263c0f8fe1003c5" translate="yes">
          <source>For positional properties with a numeric value, define a unit by providing the value as a string, in quotes, with the appropriate suffix:</source>
          <target state="translated">数値を持つ位置プロパティの場合、適切な接尾辞を付けて、引用符で囲んだ文字列として値を提供することにより、単位を定義します。</target>
        </trans-unit>
        <trans-unit id="4bcb0ca83da156d6555dbcdf2d6aae37ce332bed" translate="yes">
          <source>For production apps you want to load the smallest code possible. The code should contain only the classes that you actually need and exclude components that are never used. For this reason, the Angular compiler only generates code for components which are reachable from the &lt;code&gt;entryComponents&lt;/code&gt;; This means that adding more references to &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#declarations&quot;&gt;NgModule.declarations&lt;/a&gt;&lt;/code&gt; does not imply that they will necessarily be included in the final bundle.</source>
          <target state="translated">本番アプリの場合、可能な限り最小のコードをロードする必要があります。 コードには、実際に必要なクラスのみを含め、決して使用しないコンポーネントを除外する必要があります。 このため、Angularコンパイラーは &lt;code&gt;entryComponents&lt;/code&gt; から到達可能なコンポーネントのコードのみを生成します。 これは、 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#declarations&quot;&gt;NgModule.declarations&lt;/a&gt;&lt;/code&gt; への参照を追加しても、必ずしも最終バンドルに含まれることを意味しないことを意味します。</target>
        </trans-unit>
        <trans-unit id="e270ff1b337da62176ea2fcde372a35480e5c1ae" translate="yes">
          <source>For production builds, you define a separate &lt;code&gt;production-fr&lt;/code&gt; build configuration in the CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;.</source>
          <target state="translated">実動ビルドの場合は、CLI構成ファイル、 &lt;code&gt;angular.json&lt;/code&gt; 個別の &lt;code&gt;production-fr&lt;/code&gt; ビルド構成を定義します。</target>
        </trans-unit>
        <trans-unit id="8c9d8157e0abf506f44806175c23d88246ace003" translate="yes">
          <source>For resources already in the cache, the &lt;code&gt;updateMode&lt;/code&gt; determines the caching behavior when a new version of the app is discovered. Any resources in the group that have changed since the previous version are updated in accordance with &lt;code&gt;updateMode&lt;/code&gt;.</source>
          <target state="translated">すでにキャッシュにあるリソースの場合、 &lt;code&gt;updateMode&lt;/code&gt; は、アプリの新しいバージョンが検出されたときのキャッシュ動作を決定します。 前のバージョン以降に変更されたグループ内のリソースは、 &lt;code&gt;updateMode&lt;/code&gt; に従って更新されます。</target>
        </trans-unit>
        <trans-unit id="d3769e9ead05944db64dff6a941316a57ddc27ca" translate="yes">
          <source>For simple updates, the CLI command &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; is all you need. Without additional arguments, &lt;a href=&quot;cli/update&quot;&gt;&lt;code&gt;ng update&lt;/code&gt;&lt;/a&gt; lists the updates that are available to you and provides recommended steps to update your application to the most current version.</source>
          <target state="translated">単純な更新の場合、必要なのはCLIコマンド&lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt;だけです。 追加の引数なしで、 &lt;a href=&quot;cli/update&quot;&gt; &lt;code&gt;ng update&lt;/code&gt; &lt;/a&gt;は利用可能な更新をリストし、アプリケーションを最新バージョンに更新するための推奨手順を提供します。</target>
        </trans-unit>
        <trans-unit id="898c1b8e7d6b6eb8479ce9ce66a1cae8125ad696" translate="yes">
          <source>For step-by-step instructions on how to update to the latest Angular release, use the interactive update guide at &lt;a href=&quot;https://update.angular.io&quot;&gt;update.angular.io&lt;/a&gt;.</source>
          <target state="translated">最新のAngularリリースに更新する方法の詳細な手順については、 &lt;a href=&quot;https://update.angular.io&quot;&gt;update.angular.ioの&lt;/a&gt;インタラクティブな更新ガイドを使用してください 。</target>
        </trans-unit>
        <trans-unit id="e7e0f32120f476265451193f4e74a60c10bf9309" translate="yes">
          <source>For step-by-step instructions, continue with this section. If you can set it up on your own, skip ahead to &lt;a href=&quot;hierarchical-dependency-injection#modify-visibility&quot;&gt;Modifying service availability&lt;/a&gt;.</source>
          <target state="translated">段階的な手順については、このセクションに進んでください。 自分で設定できる場合は、 &lt;a href=&quot;hierarchical-dependency-injection#modify-visibility&quot;&gt;サービスの可用性の変更に&lt;/a&gt;進んでください。</target>
        </trans-unit>
        <trans-unit id="85bc8ff1d58fc1fdd8cbbba3a9815fc69137efd2" translate="yes">
          <source>For submodules and lazy loaded submodules the module should be used as follows:</source>
          <target state="translated">サブモジュールおよび遅延ロードされたサブモジュールの場合、モジュールは次のように使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="90f37f88122e994465e881ad8b0b5425c391046f" translate="yes">
          <source>For terminal input and output, put the content between &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; tags, set the CSS class to &lt;code&gt;code-shell&lt;/code&gt;, and set the language attribute to &lt;code&gt;sh&lt;/code&gt; as in this example.</source>
          <target state="translated">端末の入出力では、この &lt;code&gt;&amp;lt;code-example&amp;gt;&lt;/code&gt; に、コンテンツを&amp;lt;code-example&amp;gt;タグの間に置き、CSSクラスを &lt;code&gt;code-shell&lt;/code&gt; に設定し、言語属性を &lt;code&gt;sh&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="67f3b4a3f79c70fd90d2e8b510bd8b8154ea4632" translate="yes">
          <source>For the &lt;code&gt;@routeAnimation&lt;/code&gt; transitions to key off states, you'll need to provide it with the &lt;code&gt;data&lt;/code&gt; from the &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; is exposed as an &lt;code&gt;outlet&lt;/code&gt; template variable, so you bind a reference to the router outlet. A variable of &lt;code&gt;routerOutlet&lt;/code&gt; is an ideal choice.</source>
          <target state="translated">&lt;code&gt;@routeAnimation&lt;/code&gt; 状態への@routeAnimation遷移の &lt;code&gt;data&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; からのデータを提供する必要があります。 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;outlet&lt;/code&gt; テンプレート変数として公開されているため、参照をルーターアウトレットにバインドします。 &lt;code&gt;routerOutlet&lt;/code&gt; の変数は理想的な選択です。</target>
        </trans-unit>
        <trans-unit id="d28868014417fb01c0acf4d2adc0344d6a4f70c1" translate="yes">
          <source>For the DOM this means using modern &lt;a href=&quot;https://w3c.github.io/webcomponents/spec/shadow/&quot;&gt;Shadow DOM&lt;/a&gt; and creating a ShadowRoot for Component's Host Element.</source>
          <target state="translated">DOMの場合、これは最新の&lt;a href=&quot;https://w3c.github.io/webcomponents/spec/shadow/&quot;&gt;Shadow DOM&lt;/a&gt;を使用し、コンポーネントのホスト要素のShadowRootを作成することを意味します。</target>
        </trans-unit>
        <trans-unit id="e5ae481bd22e6b320de4e085ee12b07ea1dc6599" translate="yes">
          <source>For the HTML to be interpreted, bind it to an HTML property such as &lt;code&gt;innerHTML&lt;/code&gt;. But binding a value that an attacker might control into &lt;code&gt;innerHTML&lt;/code&gt; normally causes an XSS vulnerability. For example, code contained in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is executed:</source>
          <target state="translated">HTMLを解釈するには、 &lt;code&gt;innerHTML&lt;/code&gt; などのHTMLプロパティにバインドします。 ただし、攻撃者が制御する可能性のある値を &lt;code&gt;innerHTML&lt;/code&gt; にバインドすると、通常、XSSの脆弱性が発生します。 たとえば、 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; タグに含まれるコードが実行されます。</target>
        </trans-unit>
        <trans-unit id="1a7d83dc6496a6d0ac88a4d647d71e5177d3d4c8" translate="yes">
          <source>For the checkout process, users need to be able to submit the form data (their name and address). When the order is submitted, the form should reset and the cart should clear.</source>
          <target state="translated">チェックアウトプロセスでは、ユーザーはフォームデータ（名前と住所）を送信できる必要があります。 注文が送信されると、フォームがリセットされ、カートがクリアされます。</target>
        </trans-unit>
        <trans-unit id="783cec887aa0f06499c3a51fe1160be6c320bcee" translate="yes">
          <source>For the component specs, you can mock out the &lt;code&gt;Phone&lt;/code&gt; service itself, and have it provide canned phone data. You use Angular's component unit testing APIs for both components.</source>
          <target state="translated">コンポーネントの仕様については、 &lt;code&gt;Phone&lt;/code&gt; サービス自体をモックアウトし、缶詰の電話データを提供することができます。 両方のコンポーネントにAngularのコンポーネントユニットテストAPIを使用します。</target>
        </trans-unit>
        <trans-unit id="d78c5c7228da73d53e133d40ca1802d017f6597e" translate="yes">
          <source>For the final sample app using the provider that this page describes, see the live example.</source>
          <target state="translated">このページで説明しているプロバイダーを使用した最終的なサンプルアプリについては、実際の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="27b235dc45afd6facbd3b5c02a18555412a410e6" translate="yes">
          <source>For the final sample app with a feature module that this page describes, see the live example.</source>
          <target state="translated">このページで説明する機能モジュールを備えた最終的なサンプルアプリについては、ライブサンプルをご覧ください。</target>
        </trans-unit>
        <trans-unit id="4246d4ee6a09e032ca56da78e4f5689248f80123" translate="yes">
          <source>For the final sample app with two lazy-loaded modules that this page describes, see the live example.</source>
          <target state="translated">このページで説明する2つの遅延ロードモジュールを備えた最終的なサンプルアプリについては、実際の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="011abc43c1e79dde8618a68e913802e5d5ea7e13" translate="yes">
          <source>For the following template HTML, a directive with an &lt;code&gt;input[type=text]&lt;/code&gt; selector, would be instantiated only on the &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">次のテンプレートHTMLの場合、 &lt;code&gt;input[type=text]&lt;/code&gt; セレクターを持つディレクティブは、 &lt;code&gt;&amp;lt;input type=&quot;text&quot;&amp;gt;&lt;/code&gt; 要素でのみインスタンス化されます 。</target>
        </trans-unit>
        <trans-unit id="a49847962d6b00ebefae493d9c5a99b8fc8a1214" translate="yes">
          <source>For the most part, you specify the modules in the same way you would for a regular app. Then, you use the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; helpers to let the two frameworks know about assets they can use from each other. This is known as &quot;upgrading&quot; and &quot;downgrading&quot;.</source>
          <target state="translated">ほとんどの場合、通常のアプリの場合と同じ方法でモジュールを指定します。 次に、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; ヘルパーを使用して、2つのフレームワークが互いに使用できるアセットについて通知します。 これは「アップグレード」および「ダウングレード」として知られています。</target>
        </trans-unit>
        <trans-unit id="3621652a4036fadd7c8b6400eb8f40d09aabefb8" translate="yes">
          <source>For the profile form, add two form control instances with the names &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt;.</source>
          <target state="translated">プロファイルフォームの場合、名前が &lt;code&gt;firstName&lt;/code&gt; と &lt;code&gt;lastName&lt;/code&gt; の 2つのフォームコントロールインスタンスを追加します。</target>
        </trans-unit>
        <trans-unit id="dc5e36aeebbe0344b14712c1ecb8297b3ef39916" translate="yes">
          <source>For the purpose of this Getting Started guide, we have provided shipping data in &lt;code&gt;assets/shipping.json&lt;/code&gt;. You'll use this data to add shipping prices for items in the cart.</source>
          <target state="translated">この入門ガイドの目的のために、納入データを &lt;code&gt;assets/shipping.json&lt;/code&gt; で提供しています。 このデータを使用して、カート内の商品の送料を追加します。</target>
        </trans-unit>
        <trans-unit id="8c9229b8fa26bd78232a9371294d26967a24811f" translate="yes">
          <source>For the reasons &lt;a href=&quot;http#always-subscribe&quot;&gt;explained above&lt;/a&gt;, the caller (&lt;code&gt;HeroesComponent.update()&lt;/code&gt; in this case) must &lt;code&gt;subscribe()&lt;/code&gt; to the observable returned from the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; in order to initiate the request.</source>
          <target state="translated">&lt;a href=&quot;http#always-subscribe&quot;&gt;上記&lt;/a&gt;で説明した理由により、呼び出し元（この場合は &lt;code&gt;HeroesComponent.update()&lt;/code&gt; は、リクエストを開始するために、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient#put&quot;&gt;HttpClient.put()&lt;/a&gt;&lt;/code&gt; から返されるオブザーバブルに &lt;code&gt;subscribe()&lt;/code&gt; する必要があります 。</target>
        </trans-unit>
        <trans-unit id="68d620c3a6443b6cece35aadad712c05dcf3abe3" translate="yes">
          <source>For the simplest deployment, create a production build and copy the output directory to a web server.</source>
          <target state="translated">最も単純な展開の場合は、運用ビルドを作成し、出力ディレクトリをWebサーバーにコピーします。</target>
        </trans-unit>
        <trans-unit id="6178140b72e1eb2891987094c1ff5dc3ae74a205" translate="yes">
          <source>For these reasons, it is often wise to add a custom anchor explicitly, just above the heading or text to which it applies, using the special  syntax like this.</source>
          <target state="translated">これらの理由から、このような特別な構文を使用して、適用する見出しまたはテキストのすぐ上に、明示的にカスタムアンカーを追加することが賢明です。</target>
        </trans-unit>
        <trans-unit id="995de1a292785f871b9317fc5c47cd53dd4acfc9" translate="yes">
          <source>For this example:</source>
          <target state="translated">この例では：</target>
        </trans-unit>
        <trans-unit id="a770b911a46d350f3eb2b359435ba2cfd4ac37a5" translate="yes">
          <source>For this reason, a pure pipe is preferable when you can live with the change detection strategy. When you can't, you &lt;em&gt;can&lt;/em&gt; use the impure pipe.</source>
          <target state="translated">このため、変更検出戦略を使用できる場合は、純粋なパイプが望ましいです。 できない場合&lt;em&gt;は&lt;/em&gt; 、不純なパイプを使用&lt;em&gt;でき&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ac37798a4a70e1f85210fd15db9c6dfee94ab938" translate="yes">
          <source>For this reason, an app that depends on a library should only use TypeScript path mappings that point to the &lt;em&gt;built library&lt;/em&gt;. TypeScript path mappings should &lt;em&gt;not&lt;/em&gt; point to the library source &lt;code&gt;.ts&lt;/code&gt; files.</source>
          <target state="translated">このため、ライブラリに依存するアプリは、 &lt;em&gt;ビルドされたライブラリ&lt;/em&gt;を指すTypeScriptパスマッピングのみを使用する必要があり&lt;em&gt;ます&lt;/em&gt; 。 TypeScriptパスマッピングは、ライブラリソースの &lt;code&gt;.ts&lt;/code&gt; ファイルを指すべきではあり&lt;em&gt;ません&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd652a08d07c569d08ac9b4f50521d84f4d549cb" translate="yes">
          <source>For this to work, the next step is to add a component with a selector that matches &lt;code&gt;&amp;lt;app-hero-search&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これが機能するための次のステップは、 &lt;code&gt;&amp;lt;app-hero-search&amp;gt;&lt;/code&gt; に一致するセレクターを持つコンポーネントを追加することです 。</target>
        </trans-unit>
        <trans-unit id="73fd3829ac0294e631bc961c07b7af3f5fd156f7" translate="yes">
          <source>For unit tests, on the other hand, more conversion work is needed. Effectively they need to be &lt;em&gt;upgraded&lt;/em&gt; along with the production code.</source>
          <target state="translated">一方、単体テストでは、より多くの変換作業が必要です。 事実上、製品コードと共に&lt;em&gt;アップグレード&lt;/em&gt;する必要があります。</target>
        </trans-unit>
        <trans-unit id="4db7aafcf80332b7971a6009a17f922fd8d2bbbc" translate="yes">
          <source>For usage information, see the &lt;a href=&quot;../../guide/http&quot;&gt;HTTP Client&lt;/a&gt; guide.</source>
          <target state="translated">使用方法については、 &lt;a href=&quot;../../guide/http&quot;&gt;HTTPクライアント&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="1462977c8cabafbedbb937df9ad22fe6ed4e2d10" translate="yes">
          <source>For usage of the &lt;code&gt;$location&lt;/code&gt; service as a provider in AngularJS, you need to downgrade the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; using a factory provider.</source>
          <target state="translated">AngularJSでプロバイダーとして &lt;code&gt;$location&lt;/code&gt; サービスを使用するには、ファクトリプロバイダーを使用して &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim&quot;&gt;$locationShim&lt;/a&gt;&lt;/code&gt; をダウングレードする必要があります。</target>
        </trans-unit>
        <trans-unit id="b3f008aa69c94844a642116e9f1207516b29be1f" translate="yes">
          <source>For you, it was as simple as this:</source>
          <target state="translated">あなたにとって、これは次のように簡単でした：</target>
        </trans-unit>
        <trans-unit id="48369007d3f7f59614d092b1c684d61ba5812bc3" translate="yes">
          <source>For your first test you'd like to see that the screen displays the default &lt;code&gt;title&lt;/code&gt;. Your instinct is to write a test that immediately inspects the &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; like this:</source>
          <target state="translated">最初のテストでは、画面にデフォルトの &lt;code&gt;title&lt;/code&gt; 表示されることを確認します。 あなたの本能は、次のように &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; をすぐに検査するテストを書くことです：</target>
        </trans-unit>
        <trans-unit id="1458e99654a53b5bd6ae889d0452297902af0238" translate="yes">
          <source>Forcing update activation</source>
          <target state="translated">更新アクティベーションの強制</target>
        </trans-unit>
        <trans-unit id="80446347ede53cf9ce56b3d59fda4b5c96dc25c4" translate="yes">
          <source>Form</source>
          <target state="translated">Form</target>
        </trans-unit>
        <trans-unit id="6382cef0237d5c54061c2f361e9006517f0b7f44" translate="yes">
          <source>Form Validation</source>
          <target state="translated">フォーム検証</target>
        </trans-unit>
        <trans-unit id="146769b547ad6cb95714f43800543ead7973c7bf" translate="yes">
          <source>Form control to be inserted</source>
          <target state="translated">挿入されるフォームコントロール</target>
        </trans-unit>
        <trans-unit id="9a99df86d8ac9ffe88f4613f651eda5610568463" translate="yes">
          <source>Form model setup</source>
          <target state="translated">フォームモデルのセットアップ</target>
        </trans-unit>
        <trans-unit id="82e5fa982def989184c51505fd97bf9a2e6ad3cb" translate="yes">
          <source>Form validation</source>
          <target state="translated">フォーム検証</target>
        </trans-unit>
        <trans-unit id="e32408b710c40920e781a08aaca9b69a260d6587" translate="yes">
          <source>Form with an &quot;else&quot; block:</source>
          <target state="translated">「else」ブロックを含むフォーム：</target>
        </trans-unit>
        <trans-unit id="b12e8bb8e45b01539bfe059fad4e261d8f0c71b1" translate="yes">
          <source>Form with storing the value locally:</source>
          <target state="translated">値をローカルに保存するフォーム：</target>
        </trans-unit>
        <trans-unit id="d6d15ac567565a89023fa6dff1a7109f5e61d59f" translate="yes">
          <source>FormArray</source>
          <target state="translated">FormArray</target>
        </trans-unit>
        <trans-unit id="5c7489c2f9f6c861666dccb71f6ef5a318df7f09" translate="yes">
          <source>FormArrayName</source>
          <target state="translated">FormArrayName</target>
        </trans-unit>
        <trans-unit id="a42baa6a9386bdd8611f928ea9a5d31b72dc2b2b" translate="yes">
          <source>FormBuilder</source>
          <target state="translated">FormBuilder</target>
        </trans-unit>
        <trans-unit id="c48570d473365cf20f35118d51c691a2a973524c" translate="yes">
          <source>FormControl</source>
          <target state="translated">FormControl</target>
        </trans-unit>
        <trans-unit id="21f077472e97a2700808ebcc8cd132c6e46e9ae1" translate="yes">
          <source>FormControlDirective</source>
          <target state="translated">FormControlDirective</target>
        </trans-unit>
        <trans-unit id="9f00fa931846ce0c0ca95b4c76b9bfb2d80e4468" translate="yes">
          <source>FormControlName</source>
          <target state="translated">FormControlName</target>
        </trans-unit>
        <trans-unit id="b92b85002a3fb316a5c6e08beb73b6cb9ed9d64d" translate="yes">
          <source>FormData</source>
          <target state="translated">FormData</target>
        </trans-unit>
        <trans-unit id="d8bcf98cf60814a8c981a2d4ffd031f8ba591b71" translate="yes">
          <source>FormGroup</source>
          <target state="translated">FormGroup</target>
        </trans-unit>
        <trans-unit id="b9deca656b02855f2962b8f66879520ace29f55e" translate="yes">
          <source>FormGroupDirective</source>
          <target state="translated">FormGroupDirective</target>
        </trans-unit>
        <trans-unit id="f828b0b5692e832a37851b5392baa6dd53876003" translate="yes">
          <source>FormGroupName</source>
          <target state="translated">FormGroupName</target>
        </trans-unit>
        <trans-unit id="a6a71b4c40027f93241e30982b9b8c21ccd9aee4" translate="yes">
          <source>FormStyle</source>
          <target state="translated">FormStyle</target>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="5410c6e6876a80679571d0dd431c2d3614c4e1fe" translate="yes">
          <source>Format data with pipes.</source>
          <target state="translated">パイプを使用してデータをフォーマットします。</target>
        </trans-unit>
        <trans-unit id="a82c3163ea3ab9e53fb2cea07cd209bfb937d3de" translate="yes">
          <source>Format examples</source>
          <target state="translated">フォーマットの例</target>
        </trans-unit>
        <trans-unit id="0a417e8151c3f975cb0633ce28f1737ddf6bacd5" translate="yes">
          <source>Format of the localization file specified with --i18n-file.</source>
          <target state="translated">--i18n-fileで指定されたローカライズファイルの形式。</target>
        </trans-unit>
        <trans-unit id="236ee28d7ad63387347cf6c2b65fd59bcf5b58cf" translate="yes">
          <source>Format styles that can be used to represent numbers.</source>
          <target state="translated">数値を表すために使用できる書式スタイル。</target>
        </trans-unit>
        <trans-unit id="f172b365ccf025116d82b4f7a504e627b2edb8e6" translate="yes">
          <source>Format with the &lt;code&gt;UppercasePipe&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UppercasePipe&lt;/code&gt; でフォーマットする</target>
        </trans-unit>
        <trans-unit id="01600078364b64c83d05a5a6206c3c8f79391107" translate="yes">
          <source>FormatWidth</source>
          <target state="translated">FormatWidth</target>
        </trans-unit>
        <trans-unit id="bcfc7802aa17a6c06eab5b1aa2c8a01766456ca9" translate="yes">
          <source>Formats a date according to locale rules.</source>
          <target state="translated">ロケール規則に従って日付をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="4acd0cf15f92f92f95df3f7945cd8f3113d16855" translate="yes">
          <source>Formats a date to a string based on the requested format.</source>
          <target state="translated">要求された形式に基づいて、日付を文字列にフォーマットします。</target>
        </trans-unit>
        <trans-unit id="75b510aa38e971da727972aaa290425fde30cbce" translate="yes">
          <source>Formats a date value according to locale rules.</source>
          <target state="translated">ロケール規則に従って日付値をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="dcc0bea5632acd34ea7e37c42c9e4c997c0b72fb" translate="yes">
          <source>Formats a number as a percentage according to locale rules.</source>
          <target state="translated">ロケール規則に従って、数値をパーセントとしてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="d11a0509a30735bc923587e47e0a4df22da695b3" translate="yes">
          <source>Formats a number as currency using locale rules.</source>
          <target state="translated">ロケールルールを使用して、数値を通貨としてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="edf61a61be57f17f5a7dc1ff5a46129550b4144a" translate="yes">
          <source>Formats a number as currency.</source>
          <target state="translated">数値を通貨としてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="17787cb5c737a01e87cd71d36456d99d98545c45" translate="yes">
          <source>Formats a number as percentage according to locale rules.</source>
          <target state="translated">ロケール規則に従って、数値をパーセントとしてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="f3736d14cc407b274fccb3b7c52e94f74937e007" translate="yes">
          <source>Formats a number as text, with group sizing, separator, and other parameters based on the locale.</source>
          <target state="translated">ロケールに基づいて、グループのサイズ変更、区切り記号、およびその他のパラメーターを使用して、数値をテキストとして書式設定します。</target>
        </trans-unit>
        <trans-unit id="69675ca3093ae5e95c7f23454bbb0ec2a3e3a132" translate="yes">
          <source>Formats a number as text.</source>
          <target state="translated">数値をテキストとしてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="02f654c32c11b40155212923435510ae86ebdc1e" translate="yes">
          <source>Formats a number as text. Group sizing and separator and other locale-specific configurations are based on the active locale.</source>
          <target state="translated">数値をテキストとしてフォーマットします。 グループのサイズ変更と区切り記号、およびその他のロケール固有の構成は、アクティブなロケールに基づいています。</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="5beb527fad1e82e9004c53827f16339c6c9f5b43" translate="yes">
          <source>Forms Guide</source>
          <target state="translated">フォームガイド</target>
        </trans-unit>
        <trans-unit id="a9c444f62165660b6e9a88acef821c93bb49bf48" translate="yes">
          <source>Forms are the mainstay of business applications. You use forms to log in, submit a help request, place an order, book a flight, schedule a meeting, and perform countless other data-entry tasks.</source>
          <target state="translated">フォームはビジネスアプリケーションの主力です。 フォームを使用して、ログイン、ヘルプリクエストの送信、注文、フライトの予約、会議のスケジュール、その他の無数のデータ入力タスクを実行します。</target>
        </trans-unit>
        <trans-unit id="f1c46cc3e74d7aea7e123bce2866a9a8bc8b0774" translate="yes">
          <source>Forms in Angular</source>
          <target state="translated">Angularのフォーム</target>
        </trans-unit>
        <trans-unit id="c2ae9db40f0327172734bd7302b687b3e865b6d2" translate="yes">
          <source>Forms in Angular take the standard capabilities of the HTML based forms and add an orchestration layer to help with creating custom form controls, and to supply great validation experiences. There are two parts to an Angular Reactive form, the objects that live in the component to store and manage the form, and the visualization of the form that lives in the template.</source>
          <target state="translated">Angularのフォームは、HTMLベースのフォームの標準機能を利用し、オーケストレーションレイヤーを追加して、カスタムフォームコントロールの作成を支援し、優れた検証エクスペリエンスを提供します。 Angular Reactiveフォームには、フォームを保存および管理するためにコンポーネントに存在するオブジェクトと、テンプレートに存在するフォームの視覚化の2つの部分があります。</target>
        </trans-unit>
        <trans-unit id="cfc59f1b557be47a18693a789be4114527797625" translate="yes">
          <source>FormsModule</source>
          <target state="translated">FormsModule</target>
        </trans-unit>
        <trans-unit id="c89b7d3941fc3c83eb78832d5c2130a06d3c2869" translate="yes">
          <source>Fortunately you can name the directive property whatever you want &lt;em&gt;and&lt;/em&gt;&lt;strong&gt;&lt;em&gt;alias it&lt;/em&gt;&lt;/strong&gt; for binding purposes.</source>
          <target state="translated">幸いなことに、ディレクティブプロパティに任意の名前を付け&lt;strong&gt;&lt;em&gt;て&lt;/em&gt;&lt;/strong&gt; 、バインドのために&lt;strong&gt;&lt;em&gt;エイリアスする&lt;/em&gt;&lt;/strong&gt;ことができます。</target>
        </trans-unit>
        <trans-unit id="fc50fc246cebf313b856e5560aea2e5c76c81e97" translate="yes">
          <source>Fortunately, Angular data binding is on alert for dangerous HTML. In the above case, the HTML displays as is, and the Javascript does not execute. Angular &lt;strong&gt;does not&lt;/strong&gt; allow HTML with script tags to leak into the browser, neither with interpolation nor property binding.</source>
          <target state="translated">幸いなことに、Angularデータバインディングは危険なHTMLに対して警戒しています。 上記の場合、HTMLはそのまま表示され、Javascriptは実行されません。 Angularでは、スクリプトタグを使用したHTMLをブラウザーにリークすること&lt;strong&gt;は&lt;/strong&gt;でき&lt;strong&gt;ません&lt;/strong&gt; 。補間もプロパティバインディングも使用でき&lt;strong&gt;ません&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="5edd1f49279278a50cf582fe92a1aef0b8150884" translate="yes">
          <source>Fortunately, application routes have something in common: their URLs lack file extensions. (Data requests also lack extensions but they're easy to recognize because they always begin with &lt;code&gt;/api&lt;/code&gt;.) All static asset requests have a file extension (such as &lt;code&gt;main.js&lt;/code&gt; or &lt;code&gt;/node_modules/zone.js/dist/zone.js&lt;/code&gt;).</source>
          <target state="translated">幸いなことに、アプリケーションルートには共通点があります。URLにはファイル拡張子がありません。 （データリクエストにも拡張子はありませんが、常に &lt;code&gt;/api&lt;/code&gt; 始まるため、簡単に認識できます。）すべての静的アセットリクエストにはファイル拡張子があります（ &lt;code&gt;main.js&lt;/code&gt; や &lt;code&gt;/node_modules/zone.js/dist/zone.js&lt;/code&gt; など ） 。</target>
        </trans-unit>
        <trans-unit id="5f5660b64b3fe113ff7adc95059a5693c9cc2a5c" translate="yes">
          <source>Fortunately, not in this case because the &lt;code&gt;DashboardComponent&lt;/code&gt; isn't doing much with the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">幸いなことに、この場合ではありません &lt;code&gt;DashboardComponent&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; あまり機能していないからです。</target>
        </trans-unit>
        <trans-unit id="5038837ff39c868388f0e163672ddf3b75700082" translate="yes">
          <source>Fortunately, the &lt;code&gt;HeroDetailService&lt;/code&gt; delegates responsibility for remote data access to an injected &lt;code&gt;HeroService&lt;/code&gt;.</source>
          <target state="translated">幸いなことに、 &lt;code&gt;HeroDetailService&lt;/code&gt; は 、注入された &lt;code&gt;HeroService&lt;/code&gt; へのリモートデータアクセスの責任を委任します。</target>
        </trans-unit>
        <trans-unit id="2b969def5bb6104ef4a194be02d84f98a36368da" translate="yes">
          <source>Fortunately, the &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; parameter parallels the metadata passed to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator which means you can also specify &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;imports&lt;/code&gt;.</source>
          <target state="translated">幸いなことに、 &lt;code&gt;TestBed.configureTestingModule&lt;/code&gt; パラメーターは &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; デコレーターに渡されるメタデータに対応しています。つまり、 &lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;imports&lt;/code&gt; 指定することもできます。</target>
        </trans-unit>
        <trans-unit id="c62305f0c948ffda49ef66afb9b325e802f97530" translate="yes">
          <source>Fortunately, they aren't necessary. You don't have to add the lifecycle hook interfaces to directives and components to benefit from the hooks themselves.</source>
          <target state="translated">幸いなことに、それらは必要ありません。 フック自体の恩恵を受けるために、ライフサイクルフックインターフェイスをディレクティブやコンポーネントに追加する必要はありません。</target>
        </trans-unit>
        <trans-unit id="28be72c0280bcb5dc5b4d0778e06341a7abea5c2" translate="yes">
          <source>ForwardRefFn</source>
          <target state="translated">ForwardRefFn</target>
        </trans-unit>
        <trans-unit id="6c9307be2052fd5a8a74b5213f3df047b9d426a0" translate="yes">
          <source>Fractional seconds</source>
          <target state="translated">秒の小数部</target>
        </trans-unit>
        <trans-unit id="fb001b2c292ad2f619c8caf6e0ac8afd191aaa76" translate="yes">
          <source>Framework</source>
          <target state="translated">Framework</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes">
          <source>Frequently Asked Questions</source>
          <target state="translated">よくある質問</target>
        </trans-unit>
        <trans-unit id="bc0a142e1e515867de810b2442244936f418403f" translate="yes">
          <source>Frequently Used Modules</source>
          <target state="translated">よく使用されるモジュール</target>
        </trans-unit>
        <trans-unit id="6006b6792fc35ff7614e5fa895078e4f0a6dfd7c" translate="yes">
          <source>Fri Apr 15 1988 00:00:00 GMT-0700 (Pacific Daylight Time)</source>
          <target state="translated">1988年4月15日金曜日00:00:00 GMT-0700（太平洋夏時間）</target>
        </trans-unit>
        <trans-unit id="4b3774c5d182edc52477fb17e7804e9b9c9ee37e" translate="yes">
          <source>From &lt;em&gt;view-to-source&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ビュー&lt;/em&gt;から&lt;em&gt;ソースへ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="db63bccaf8113fab5205af56d973f3b49919eb47" translate="yes">
          <source>From the &lt;code&gt;ContainerComponent&lt;/code&gt;, this will not work:</source>
          <target state="translated">&lt;code&gt;ContainerComponent&lt;/code&gt; から、これは機能しません：</target>
        </trans-unit>
        <trans-unit id="a16913cd9f3c0db7df4d7d9f3bf7fd21aa09266a" translate="yes">
          <source>From the &lt;em&gt;source-to-view&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;ソース&lt;/em&gt;から&lt;em&gt;ビューへ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6bb6a53b96740b32297c3c9e26cbdae1ffc3e003" translate="yes">
          <source>From the perspective of the router, the router never &quot;goes back&quot;. When the user clicks on the back button in the browser, a new navigation ID is created.</source>
          <target state="translated">ルーターから見ると、ルーターは「戻る」ことはありません。 ユーザーがブラウザの戻るボタンをクリックすると、新しいナビゲーションIDが作成されます。</target>
        </trans-unit>
        <trans-unit id="b8fd592e76623b1bd29c81a0d0021b540794543a" translate="yes">
          <source>From the root of your workspace, run the &lt;code&gt;ng build&lt;/code&gt; command for your library.</source>
          <target state="translated">ワークスペースのルートから、ライブラリに対して &lt;code&gt;ng build&lt;/code&gt; コマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="dff6fc31c15b70198c596f7b87cdb4ab4c3aa842" translate="yes">
          <source>From the terminal, install the Angular CLI globally with:</source>
          <target state="translated">端末から、Angular CLIをグローバルにインストールします：</target>
        </trans-unit>
        <trans-unit id="09b23d52d687ddf5ec82eb8d6ceac90f4cfce115" translate="yes">
          <source>From the test root component's &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; returned by &lt;code&gt;fixture.debugElement&lt;/code&gt;, you can walk (and query) the fixture's entire element and component subtrees.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; によって返されるテストルートコンポーネントのDebugElementから、フィクスチャの要素全体とコンポーネントサブツリーをウォーク（およびクエリ）できます。</target>
        </trans-unit>
        <trans-unit id="f4fc4957021d79edfdc1944068e27562a5e7500f" translate="yes">
          <source>From there you replace the &lt;code&gt;/src&lt;/code&gt; folder with the one from your &lt;code&gt;StackBlitz&lt;/code&gt; download, and then perform a build.</source>
          <target state="translated">そこから、 &lt;code&gt;/src&lt;/code&gt; フォルダーを &lt;code&gt;StackBlitz&lt;/code&gt; ダウンロードのフォルダーに置き換えてから、ビルドを実行します。</target>
        </trans-unit>
        <trans-unit id="c1b29708a9ee747e9a9d3071434b524b09310f1a" translate="yes">
          <source>From this base you can derive two new classes in &lt;code&gt;TextboxQuestion&lt;/code&gt; and &lt;code&gt;DropdownQuestion&lt;/code&gt; that represent textbox and dropdown questions. The idea is that the form will be bound to specific question types and render the appropriate controls dynamically.</source>
          <target state="translated">このベースから、 &lt;code&gt;TextboxQuestion&lt;/code&gt; と &lt;code&gt;DropdownQuestion&lt;/code&gt; で 、テキストボックスとドロップダウンの質問を表す2つの新しいクラスを派生できます。 フォームは特定の質問タイプにバインドされ、適切なコントロールを動的にレンダリングするという考え方です。</target>
        </trans-unit>
        <trans-unit id="50e0c37a7210e277623484289b971d913b2730f5" translate="yes">
          <source>From time to time you'll have to step away from markdown and write a portion of the document in HTML. Markdown allows you to mix HTML and markdown in the same document.</source>
          <target state="translated">マークダウンから離れて、ドキュメントの一部をHTMLで記述する必要がある場合があります。 マークダウンを使用すると、同じドキュメントでHTMLとマークダウンを混在させることができます。</target>
        </trans-unit>
        <trans-unit id="9f8099366c879f236d5bd3d85697f3c2e6387914" translate="yes">
          <source>Full documentation for the Bazel CLI is at &lt;a href=&quot;https://docs.bazel.build/versions/master/command-line-reference.html&quot;&gt;https://docs.bazel.build/versions/master/command-line-reference.html&lt;/a&gt;.</source>
          <target state="translated">Bazel CLIの完全なドキュメントは&lt;a href=&quot;https://docs.bazel.build/versions/master/command-line-reference.html&quot;&gt;https://docs.bazel.build/versions/master/command-line-reference.htmlにあります&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="f2182c243ca64f8f4320ef356143bb890538d790" translate="yes">
          <source>Full length for &lt;code&gt;en-US&lt;/code&gt;. For example: &quot;Sunday&quot;</source>
          <target state="translated">&lt;code&gt;en-US&lt;/code&gt; の完全な長さ。 例：「日曜日」</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="307d58da1cb5c708acf50f78b41a528827c81cf8" translate="yes">
          <source>Function calls</source>
          <target state="translated">関数呼び出し</target>
        </trans-unit>
        <trans-unit id="f0182dfcd6d20b80a09f2cb0997dc7e70a92ccba" translate="yes">
          <source>Function calls are not supported</source>
          <target state="translated">関数呼び出しはサポートされていません</target>
        </trans-unit>
        <trans-unit id="d1b389a67b88dc11d3ca8a7606a8511ef745c99b" translate="yes">
          <source>Function name</source>
          <target state="translated">機能名</target>
        </trans-unit>
        <trans-unit id="6de035f278c24f6b9cbb33875bc923585ab1c8d2" translate="yes">
          <source>Function that is called by the forms API when the control status changes to or from 'DISABLED'. Depending on the status, it enables or disables the appropriate DOM element.</source>
          <target state="translated">コントロールステータスが「DISABLED」に、または「DISABLED」から変更されたときにフォームAPIによって呼び出される関数。 ステータスに応じて、適切なDOM要素を有効または無効にします。</target>
        </trans-unit>
        <trans-unit id="accace0a2c1dc76b9b0e688d8f7b2f83d65616ca" translate="yes">
          <source>Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.</source>
          <target state="translated">HammerJSをロードし、HammerJsがロードされると解決されるプロミスを返す関数。</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="cbb7a8ad94a0350d71d5dbacb482d18f9ec80fed" translate="yes">
          <source>Functions and static method calls</source>
          <target state="translated">関数と静的メソッド呼び出し</target>
        </trans-unit>
        <trans-unit id="c5d47fe56e6eb1f3de07dc9b7e2e27df31984f6f" translate="yes">
          <source>Functions that control complex animation sequences are as follows:</source>
          <target state="translated">複雑なアニメーションシーケンスを制御する関数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="a398fa06f1c0d02f5674b15f6a6bd03d1fae4ae7" translate="yes">
          <source>G (A)</source>
          <target state="translated">G（A）</target>
        </trans-unit>
        <trans-unit id="eb8daa8e2d6659fa5c2723cc8e6125af24dfa1c0" translate="yes">
          <source>G, GG &amp;amp; GGG</source>
          <target state="translated">G、GG、GGG</target>
        </trans-unit>
        <trans-unit id="6b290c8942cbc1d1d719ea8d88fc447035058289" translate="yes">
          <source>GGG (AD)</source>
          <target state="translated">GGG（AD）</target>
        </trans-unit>
        <trans-unit id="00375065763ad15e0a040210fcc6a75e14be67dc" translate="yes">
          <source>GGGG</source>
          <target state="translated">GGGG</target>
        </trans-unit>
        <trans-unit id="76b1ada62fafb3b6a1d86653f4602df6c517c120" translate="yes">
          <source>GGGG (Anno Domini)</source>
          <target state="translated">GGGG（アンノドミニ）</target>
        </trans-unit>
        <trans-unit id="8999a576f1492a90a0fe026bc4748334d685b1c7" translate="yes">
          <source>GGGGG</source>
          <target state="translated">GGGGG</target>
        </trans-unit>
        <trans-unit id="ac601f81f1c830bbc42a98a61bc4a806380671e2" translate="yes">
          <source>GMT-08:00</source>
          <target state="translated">GMT-08:00</target>
        </trans-unit>
        <trans-unit id="e063740277299254fba81114eab6ab1778e43431" translate="yes">
          <source>GMT-8</source>
          <target state="translated">GMT-8</target>
        </trans-unit>
        <trans-unit id="060ee72e55c0d15ccc4085e23e54c48f8dedf4bd" translate="yes">
          <source>GMT-8:00</source>
          <target state="translated">GMT-8:00</target>
        </trans-unit>
        <trans-unit id="c6c6e52ab77299cfa656a1111cd062dc5500ef4e" translate="yes">
          <source>Gathering and Viewing Usage Analytics</source>
          <target state="translated">利用状況分析の収集と表示</target>
        </trans-unit>
        <trans-unit id="90d988a4b5f5b91abe38d0cd410f91e09b49a39c" translate="yes">
          <source>General Naming Guidelines</source>
          <target state="translated">一般的な命名ガイドライン</target>
        </trans-unit>
        <trans-unit id="cba1a6e46e4708c3c4d2980a9394604ab2a693b2" translate="yes">
          <source>Generally, provide services the whole app needs in the root module and scope services by providing them in lazy loaded modules.</source>
          <target state="translated">一般に、アプリ全体が必要とするサービスをルートモジュールで提供し、スコープサービスを遅延ロードモジュールで提供することでサービスを提供します。</target>
        </trans-unit>
        <trans-unit id="50b5959329e24939984178366e66dba05ca7ff3a" translate="yes">
          <source>Generally, the Angular compiler generates a &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; for any component referenced in a template. However, there are no selector references in the templates for dynamically loaded components since they load at runtime.</source>
          <target state="translated">通常、Angularコンパイラーは、テンプレートで参照される &lt;code&gt;&lt;a href=&quot;../api/core/componentfactory&quot;&gt;ComponentFactory&lt;/a&gt;&lt;/code&gt; を生成します 。 ただし、実行時にロードされるため、動的にロードされるコンポーネントのテンプレートにはセレクター参照はありません。</target>
        </trans-unit>
        <trans-unit id="57e078d15b6b83870a971d124ae29a7bbe383a50" translate="yes">
          <source>Generally, the practice of setting a variable or property to a data value. Within Angular, typically refers to &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt;, which coordinates DOM object properties with data object properties.</source>
          <target state="translated">一般的に、変数またはプロパティをデータ値に設定する方法。 Angular内では、通常、DOMオブジェクトプロパティとデータオブジェクトプロパティを調整する&lt;a href=&quot;glossary#data-binding&quot;&gt;データバインディングを&lt;/a&gt;指します。</target>
        </trans-unit>
        <trans-unit id="ba75bd19ec2c4ce6bebb850f18a34d24d2d66d57" translate="yes">
          <source>Generally, use property binding over attribute binding as it is more intuitive (being a boolean value), has a shorter syntax, and is more performant.</source>
          <target state="translated">一般に、より直感的（ブール値）であり、構文が短く、パフォーマンスが高いため、属性バインディングよりもプロパティバインディングを使用します。</target>
        </trans-unit>
        <trans-unit id="0c6d01d451368b768446afecc65324c907fd398a" translate="yes">
          <source>Generally, you'll only need &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; for providing services and &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; for routing. However, understanding how &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; works to make sure a service is a singleton will inform your development at a deeper level.</source>
          <target state="translated">一般的に、サービスを提供するために提供 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; れ、ルーティングのために &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forChild&quot;&gt;forChild()&lt;/a&gt;&lt;/code&gt; のみが必要です。 ただし、サービスがシングルトンであることを確認するために &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; どのように機能するかを理解することで、より深いレベルで開発を知ることができます。</target>
        </trans-unit>
        <trans-unit id="90047ef8527630e7936402eb0e7f57f3c99c3982" translate="yes">
          <source>Generate a &lt;code&gt;CrisisCenter&lt;/code&gt; component in the &lt;code&gt;crisis-center&lt;/code&gt; folder:</source>
          <target state="translated">&lt;code&gt;crisis-center&lt;/code&gt; フォルダーに &lt;code&gt;CrisisCenter&lt;/code&gt; コンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="084b51a7bff1022599f0c899ade452493ff127d6" translate="yes">
          <source>Generate a &lt;code&gt;CrisisDetailResolver&lt;/code&gt; service file within the &lt;code&gt;Crisis Center&lt;/code&gt; feature area.</source>
          <target state="translated">&lt;code&gt;Crisis Center&lt;/code&gt; 機能エリア内で &lt;code&gt;CrisisDetailResolver&lt;/code&gt; サービスファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="4875f6ee183dd8ab4d4a463d44f7d6bdd971a900" translate="yes">
          <source>Generate a &lt;code&gt;Dialog&lt;/code&gt; service to handle user confirmation.</source>
          <target state="translated">ユーザーの確認を処理する &lt;code&gt;Dialog&lt;/code&gt; サービスを生成します。</target>
        </trans-unit>
        <trans-unit id="5d7b10e4e6677ba9f77dc539ea07fd7d32f66bea" translate="yes">
          <source>Generate a &lt;code&gt;ProfileEditor&lt;/code&gt; component and import the &lt;code&gt;&lt;a href=&quot;../api/forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; classes from the &lt;code&gt;@angular/forms&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;ProfileEditor&lt;/code&gt; コンポーネントを生成し、 &lt;code&gt;@angular/forms&lt;/code&gt; パッケージから &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; クラスとFormControlクラスをインポートします。</target>
        </trans-unit>
        <trans-unit id="19a139134434badc3bfeaf46524ef6fd9d5a0b63" translate="yes">
          <source>Generate a &lt;em&gt;guard&lt;/em&gt; that checks for the presence of a &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; method in a component&amp;mdash;any component.</source>
          <target state="translated">コンポーネント（任意のコンポーネント &lt;code&gt;&lt;a href=&quot;../api/router/route#canDeactivate&quot;&gt;canDeactivate&lt;/a&gt;()&lt;/code&gt; メソッドが存在するかどうかをチェックする&lt;em&gt;ガード&lt;/em&gt;を生成します。</target>
        </trans-unit>
        <trans-unit id="48b27f5909440f72ac1abd21e856f98ec91f80dc" translate="yes">
          <source>Generate a cart component, named &lt;code&gt;cart&lt;/code&gt;.</source>
          <target state="translated">cartという名前のカートコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="badfdfac2001a819696c03a850d29cef9aa6422c" translate="yes">
          <source>Generate a cart service.</source>
          <target state="translated">カートサービスを生成します。</target>
        </trans-unit>
        <trans-unit id="c99348b58236f56c88a04caf7f5cfe478c6053d9" translate="yes">
          <source>Generate a component for the control.</source>
          <target state="translated">コントロールのコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="8a8880c7a24fd864a1f83c3bbba3a7fab142006e" translate="yes">
          <source>Generate a new &lt;code&gt;SelectivePreloadingStrategy&lt;/code&gt; service.</source>
          <target state="translated">新しい &lt;code&gt;SelectivePreloadingStrategy&lt;/code&gt; サービスを生成します。</target>
        </trans-unit>
        <trans-unit id="10929705c56473f7c00eec3a96223277b08f04e8" translate="yes">
          <source>Generate a new component for product details. Give the component the name &lt;code&gt;product-details&lt;/code&gt;.</source>
          <target state="translated">製品詳細の新しいコンポーネントを生成します。 コンポーネントに &lt;code&gt;product-details&lt;/code&gt; という名前を付けます 。</target>
        </trans-unit>
        <trans-unit id="4ca63d5f33e5423d7c86025408ad0a44ef417e22" translate="yes">
          <source>Generate a new component named &lt;code&gt;shipping&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;shipping&lt;/code&gt; という名前の新しいコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="6cf6a25679c333cc1e9c81a8f44d1a7e50841d1d" translate="yes">
          <source>Generate a new component to compose the message.</source>
          <target state="translated">メッセージを作成する新しいコンポーネントを生成します。</target>
        </trans-unit>
        <trans-unit id="51451a8e0a189a0e3626c7ca708b659e18662a1f" translate="yes">
          <source>Generate a sample application to follow the walkthrough.</source>
          <target state="translated">ウォークスルーに従うサンプルアプリケーションを生成します。</target>
        </trans-unit>
        <trans-unit id="e568c5d158a4dd0a7bf902bc271eaba5725baedb" translate="yes">
          <source>Generate an &lt;code&gt;admin&lt;/code&gt; folder with a feature module file and a routing configuration file.</source>
          <target state="translated">機能モジュールファイルとルーティング構成ファイルを含む &lt;code&gt;admin&lt;/code&gt; フォルダーを生成します。</target>
        </trans-unit>
        <trans-unit id="0331cbf7ccde4c03c2309a29076033363b99e2de" translate="yes">
          <source>Generate links for each phone</source>
          <target state="translated">各電話のリンクを生成する</target>
        </trans-unit>
        <trans-unit id="38e92ff7133dfc97972b0278b9c37d5608b4290b" translate="yes">
          <source>Generate the class &lt;code&gt;src/app/in-memory-data.service.ts&lt;/code&gt; with the following command:</source>
          <target state="translated">次のコマンドを使用して、クラス &lt;code&gt;src/app/in-memory-data.service.ts&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="cd63ede340ee7d3bb4fe765dd65657bf31fab426" translate="yes">
          <source>Generates a 'stats.json' file which can be analyzed using tools such as 'webpack-bundle-analyzer'.</source>
          <target state="translated">「webpack-bundle-analyzer」などのツールを使用して分析できる「stats.json」ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="c68d6290e060eea666b076a5aa5a84ecbf27fe7c" translate="yes">
          <source>Generates a new basic app definition in the &quot;projects&quot; subfolder of the workspace.</source>
          <target state="translated">ワークスペースの「プロジェクト」サブフォルダーに新しい基本的なアプリ定義を生成します。</target>
        </trans-unit>
        <trans-unit id="fa8d7f6f4eed1090704feca3332459e426dd6e10" translate="yes">
          <source>Generates a new, generic enum definition for the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトの新しい汎用列挙定義を生成します。</target>
        </trans-unit>
        <trans-unit id="ab848267d716e8a4bebfc6fc3df07a5bddaf3f06" translate="yes">
          <source>Generates a new, generic route guard definition in the given or default project.</source>
          <target state="translated">指定されたプロジェクトまたはデフォルトのプロジェクトで、新しい汎用ルートガード定義を生成します。</target>
        </trans-unit>
        <trans-unit id="ebc4b67cc162d00ec204096d82e460473d1c79ea" translate="yes">
          <source>Generates a service worker config for production builds.</source>
          <target state="translated">実動ビルド用のService Worker構成を生成します。</target>
        </trans-unit>
        <trans-unit id="86aaceaf2adaab13af57352592c0b404b5df3b21" translate="yes">
          <source>Generates an app shell for running a server-side version of an app.</source>
          <target state="translated">サーバーサイドバージョンのアプリを実行するためのアプリシェルを生成します。</target>
        </trans-unit>
        <trans-unit id="56a5676209bef860c9fa9fc0c49f512bd152fcac" translate="yes">
          <source>Generates and/or modifies files based on a schematic.</source>
          <target state="translated">回路図に基づいてファイルを生成および/または変更します。</target>
        </trans-unit>
        <trans-unit id="b062b8f1ffe2b49d3ab2ace012273f0104d17418" translate="yes">
          <source>Generating a library with the Angular CLI automatically adds its path to the &lt;code&gt;tsconfig&lt;/code&gt; file. The Angular CLI uses the &lt;code&gt;tsconfig&lt;/code&gt; paths to tell the build system where to find the library.</source>
          <target state="translated">Angular CLIを使用してライブラリを生成すると、そのパスが &lt;code&gt;tsconfig&lt;/code&gt; ファイルに自動的に追加されます。 Angular CLIは &lt;code&gt;tsconfig&lt;/code&gt; パスを使用して、ビルドシステムにライブラリの場所を伝えます。</target>
        </trans-unit>
        <trans-unit id="9435f311ca9bf5c895db9c0e1c87157165c85f6a" translate="yes">
          <source>Generating form controls with FormBuilder</source>
          <target state="translated">FormBuilderでフォームコントロールを生成する</target>
        </trans-unit>
        <trans-unit id="cea5d53723bbebadfc8d0290ebf665734c7c2abe" translate="yes">
          <source>Generation schematics</source>
          <target state="translated">生成回路図</target>
        </trans-unit>
        <trans-unit id="380e0d97ca6db455288de6ea75e1bcf1d6d656e1" translate="yes">
          <source>Generation schematics are instructions for the &lt;code&gt;ng generate&lt;/code&gt; command. The documented sub-commands use the default Angular generation schematics, but you can specify a different schematic (in place of a sub-command) to generate an artifact defined in your library.</source>
          <target state="translated">生成回路図は、 &lt;code&gt;ng generate&lt;/code&gt; コマンドの指示です。 文書化されたサブコマンドはデフォルトのAngular生成回路図を使用しますが、ライブラリで定義されたアーティファクトを生成するために（サブコマンドの代わりに）異なる回路図を指定できます。</target>
        </trans-unit>
        <trans-unit id="68af3db5ab5d29c452ca8f7fe938836faf14b003" translate="yes">
          <source>Generic DOM APIs, such as &lt;code&gt;document.createElement()&lt;/code&gt; or &lt;code&gt;document.querySelector()&lt;/code&gt;, return an element type that is appropriate for the specified arguments. For example, calling &lt;code&gt;document.createElement('&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;')&lt;/code&gt; will return an &lt;code&gt;HTMLAnchorElement&lt;/code&gt;, which TypeScript knows has an &lt;code&gt;href&lt;/code&gt; property. Similarly, &lt;code&gt;document.createElement('div')&lt;/code&gt; will return an &lt;code&gt;HTMLDivElement&lt;/code&gt;, which TypeScript knows has no &lt;code&gt;href&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;document.createElement()&lt;/code&gt; や &lt;code&gt;document.querySelector()&lt;/code&gt; などの汎用DOM APIは、指定された引数に適切な要素タイプを返します。 たとえば、 &lt;code&gt;document.createElement('&lt;a href=&quot;../api/router/routerlinkwithhref&quot;&gt;a&lt;/a&gt;')&lt;/code&gt; を &lt;code&gt;HTMLAnchorElement&lt;/code&gt; 、TypeScriptが &lt;code&gt;href&lt;/code&gt; プロパティを持っていることがわかっているHTMLAnchorElementが返されます。 同様に、 &lt;code&gt;document.createElement('div')&lt;/code&gt; は &lt;code&gt;HTMLDivElement&lt;/code&gt; を返しますが、TypeScriptは &lt;code&gt;href&lt;/code&gt; プロパティがないことを認識しています。</target>
        </trans-unit>
        <trans-unit id="2d7dc0e436d9539f483e9a75feff826163b8b3c4" translate="yes">
          <source>Generic selector that displays the string that matches the current value.</source>
          <target state="translated">現在の値に一致する文字列を表示する汎用セレクター。</target>
        </trans-unit>
        <trans-unit id="8c7a9565584738b6d0e52ee69981c1788da06bc1" translate="yes">
          <source>Get a list of component types registered to this application. This list is populated even before the component is created.</source>
          <target state="translated">このアプリケーションに登録されているコンポーネントタイプのリストを取得します。 このリストは、コンポーネントが作成される前でも取り込まれます。</target>
        </trans-unit>
        <trans-unit id="ba71eb4fd90a686961b741cb833ffd4a54e02338" translate="yes">
          <source>Get a list of components registered to this application.</source>
          <target state="translated">このアプリケーションに登録されているコンポーネントのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="b8ae68bbf676af7d75792ca7c88e455618f73678" translate="yes">
          <source>Get a promise that resolves when the fixture is stable.</source>
          <target state="translated">フィクスチャが安定したときに解決する約束を取得します。</target>
        </trans-unit>
        <trans-unit id="48f71941fbc082e5baabc9d6a22ffacc94a5e225" translate="yes">
          <source>Get a promise that resolves when the ui state is stable following animations.</source>
          <target state="translated">アニメーションに続いてUI状態が安定したときに解決する約束を取得します。</target>
        </trans-unit>
        <trans-unit id="3ef6faa34773e978c631aa1e80c4c1df032de2f4" translate="yes">
          <source>Get a testability hook associated with the application</source>
          <target state="translated">アプリケーションに関連付けられたテスト容易性フックを取得する</target>
        </trans-unit>
        <trans-unit id="11b5a80e416cf90b3962bd51ff1f7224173e22c7" translate="yes">
          <source>Get all registered applications(root elements)</source>
          <target state="translated">すべての登録済みアプリケーション（ルート要素）を取得します</target>
        </trans-unit>
        <trans-unit id="85c4a7809e2e093fc80138814b72ed55768463ff" translate="yes">
          <source>Get all registered testabilities</source>
          <target state="translated">登録済みのすべてのテスタビリティを取得する</target>
        </trans-unit>
        <trans-unit id="1ec968837a76ff8234b189b68d3ee3766251e92a" translate="yes">
          <source>Get hero by id</source>
          <target state="translated">IDでヒーローを取得する</target>
        </trans-unit>
        <trans-unit id="c1355577bacd5acd927b269d302c2831ae4e0915" translate="yes">
          <source>Get hero data</source>
          <target state="translated">ヒーローデータを取得する</target>
        </trans-unit>
        <trans-unit id="5d5dde643594b9932dc428da3a787b7acb7f3a04" translate="yes">
          <source>Get heroes with &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; でヒーローを取得する</target>
        </trans-unit>
        <trans-unit id="09a7bb30075eafdbd90429b490369ebe14a764e4" translate="yes">
          <source>Get injected services</source>
          <target state="translated">注入されたサービスを取得する</target>
        </trans-unit>
        <trans-unit id="131266c3e0d171880d06a0a24a19f06f7aa83966" translate="yes">
          <source>Get the &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; at the given &lt;code&gt;index&lt;/code&gt; in the array.</source>
          <target state="translated">配列内の指定された &lt;code&gt;index&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="dd6bc06b4de90fcac5fde67fdc56d3e38702afe3" translate="yes">
          <source>Get the XSRF token to use with an outgoing request.</source>
          <target state="translated">発信要求で使用するXSRFトークンを取得します。</target>
        </trans-unit>
        <trans-unit id="e3da1c5459c7f2bceef1e65095d844c3b2bc904b" translate="yes">
          <source>Get the number of pending requests</source>
          <target state="translated">保留中のリクエストの数を取得する</target>
        </trans-unit>
        <trans-unit id="24c85ef5faa8219f5fd24863a828f95a77b88997" translate="yes">
          <source>Get the project configuration</source>
          <target state="translated">プロジェクト構成を取得する</target>
        </trans-unit>
        <trans-unit id="e9d01545a58adde7a54d98c34d7e7ab8358d1c1b" translate="yes">
          <source>Get the route that created it</source>
          <target state="translated">作成したルートを取得する</target>
        </trans-unit>
        <trans-unit id="9fd63aabfc07cc505e1b32d93e73e02ae71e179f" translate="yes">
          <source>Get the title of the current HTML document.</source>
          <target state="translated">現在のHTMLドキュメントのタイトルを取得します。</target>
        </trans-unit>
        <trans-unit id="853d5cf0ddb8b0b63460f74da94f03814abcef8b" translate="yes">
          <source>Get the value corresponding to a key. Return &lt;code&gt;defaultValue&lt;/code&gt; if key is not found.</source>
          <target state="translated">キーに対応する値を取得します。 キーが見つからない場合は &lt;code&gt;defaultValue&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e633a889d343373bc7733d29c137bc6d6d19bbfe" translate="yes">
          <source>Get user input from a template reference variable</source>
          <target state="translated">テンプレート参照変数からユーザー入力を取得する</target>
        </trans-unit>
        <trans-unit id="0eb96ff9664f97bce4773ae26b4ff46b6eeca582" translate="yes">
          <source>Get user input from the $event object</source>
          <target state="translated">$ eventオブジェクトからユーザー入力を取得します</target>
        </trans-unit>
        <trans-unit id="b52d196c4acb500b8a1fce9427fea4967818a0d3" translate="yes">
          <source>GetTestability</source>
          <target state="translated">GetTestability</target>
        </trans-unit>
        <trans-unit id="f3caee9190ed9adb6e55cf7ac6826119198008b4" translate="yes">
          <source>Gets the current instance of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;. Usually unnecessary because the static class methods of the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; class are typically sufficient. The &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; instance exposes a few rarely used members that are not available as static methods.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; の現在のインスタンスを取得します。 通常、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; クラスの静的クラスメソッドで十分なので、通常は不要です。 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; インスタンスは、静的メソッドとして使用できない、まれにしか使用されないメンバーをいくつか公開します。</target>
        </trans-unit>
        <trans-unit id="0c7990050a50ffe200ff6702af0ec26fd388eaa9" translate="yes">
          <source>Getting Started Tutorial</source>
          <target state="translated">入門チュートリアル</target>
        </trans-unit>
        <trans-unit id="8763b134008e61a206a3cc2b040b464b4e2cf711" translate="yes">
          <source>Getting Started assumes the &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; online development environment. To learn how to export an app from StackBlitz to your local environment, skip ahead to the &lt;a href=&quot;start/deployment&quot;&gt;Deployment&lt;/a&gt; section.</source>
          <target state="translated">はじめに&lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt;オンライン開発環境を想定しています。 StackBlitzからローカル環境にアプリをエクスポートする方法については、「 &lt;a href=&quot;start/deployment&quot;&gt;展開」&lt;/a&gt;セクションに進んでください。</target>
        </trans-unit>
        <trans-unit id="42f15af89ce6b5fe82800a2db148f3aa4efa31ef" translate="yes">
          <source>Getting Started with Angular: Your First App</source>
          <target state="translated">Angular入門：初めてのアプリ</target>
        </trans-unit>
        <trans-unit id="0ac5f60676cb5cfe60d16c31b4d7a48edc719d03" translate="yes">
          <source>Getting error details</source>
          <target state="translated">エラーの詳細を取得する</target>
        </trans-unit>
        <trans-unit id="1c8b693c2abb7caf69dbccffcf1bf34248f8757f" translate="yes">
          <source>Getting notified of &lt;em&gt;available&lt;/em&gt; updates. These are new versions of the app to be loaded if the page is refreshed.</source>
          <target state="translated">&lt;em&gt;利用可能な&lt;/em&gt;更新の通知を取得します。 これらは、ページが更新された場合にロードされるアプリの新しいバージョンです。</target>
        </trans-unit>
        <trans-unit id="eff07e16ec59ae1e3afd8560950554feb087b28f" translate="yes">
          <source>Getting notified of new releases</source>
          <target state="translated">新しいリリースの通知を受け取る</target>
        </trans-unit>
        <trans-unit id="1156bdd0a2f15d9cd4bf28ddf6329c03307719ae" translate="yes">
          <source>Getting notified of update &lt;em&gt;activation&lt;/em&gt;. This is when the service worker starts serving a new version of the app immediately.</source>
          <target state="translated">更新の&lt;em&gt;アクティブ化の&lt;/em&gt;通知を取得します。 これは、サービスワーカーが新しいバージョンのアプリの提供をすぐに開始するときです。</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes">
          <source>Getting started</source>
          <target state="translated">入門</target>
        </trans-unit>
        <trans-unit id="58e950b388f2b51607668bd15dd44d766f8c8ea1" translate="yes">
          <source>Getting started with service workers</source>
          <target state="translated">サービスワーカーの開始</target>
        </trans-unit>
        <trans-unit id="5c1fd8bd19e93f683c985727a839dbc24e11a6e9" translate="yes">
          <source>GitHub pages</source>
          <target state="translated">GitHubページ</target>
        </trans-unit>
        <trans-unit id="879351c6d9b4176969123a28d55e3bc051885425" translate="yes">
          <source>Give it a &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property instead of a &lt;code&gt;children&lt;/code&gt; property. The &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; property takes a function that returns a promise using the browser's built-in syntax for lazy loading code using dynamic imports &lt;code&gt;import('...')&lt;/code&gt;. The path is the location of the &lt;code&gt;AdminModule&lt;/code&gt; (relative to the app root). After the code is requested and loaded, the &lt;code&gt;Promise&lt;/code&gt; resolves an object that contains the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, in this case the &lt;code&gt;AdminModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; プロパティの代わりにloadChildrenプロパティを指定します。 &lt;code&gt;&lt;a href=&quot;../api/router/route#loadChildren&quot;&gt;loadChildren&lt;/a&gt;&lt;/code&gt; プロパティは、ダイナミックインポート &lt;code&gt;import('...')&lt;/code&gt; を使用してコードを遅延ロードするためのブラウザーの組み込み構文を使用してプロミスを返す関数を取ります。 パスは &lt;code&gt;AdminModule&lt;/code&gt; の場所です（アプリのルートに対して）。 コードが要求およびロードされた後、 &lt;code&gt;Promise&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; を含むオブジェクト（この場合は &lt;code&gt;AdminModule&lt;/code&gt; ）を解決します。</target>
        </trans-unit>
        <trans-unit id="00800e550f2e87414dda167ff182d9d9eabf5ca1" translate="yes">
          <source>Give the live example anchor a custom label and tooltip by setting the &lt;code&gt;title&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; 属性を設定して、ライブサンプルアンカーにカスタムラベルとツールチップを与えます。</target>
        </trans-unit>
        <trans-unit id="6839d82e03f5268d9a7cc97802db76c48c8cce6e" translate="yes">
          <source>Given</source>
          <target state="translated">Given</target>
        </trans-unit>
        <trans-unit id="d407a28bf26b4dade30f163a570d19e4c3992b48" translate="yes">
          <source>Given the configuration above, when the browser URL for this application becomes &lt;code&gt;/heroes&lt;/code&gt;, the router matches that URL to the route path &lt;code&gt;/heroes&lt;/code&gt; and displays the &lt;code&gt;HeroListComponent&lt;/code&gt; as a sibling element to the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; that you've placed in the host component's template.</source>
          <target state="translated">上記の構成の場合、このアプリケーションのブラウザーURLが &lt;code&gt;/heroes&lt;/code&gt; になると、ルーターはそのURLをルートパス &lt;code&gt;/heroes&lt;/code&gt; と &lt;code&gt;HeroListComponent&lt;/code&gt; させ、ホストコンポーネントのテンプレートに配置した &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; への兄弟要素としてHeroListComponentを表示します。</target>
        </trans-unit>
        <trans-unit id="8868a65f6b530e81d17de3561e83d4a3f7803b25" translate="yes">
          <source>Given the following example route, the router will lazy load the associated module on demand using the browser native import system.</source>
          <target state="translated">次のルートの例では、ルーターはブラウザーのネイティブインポートシステムを使用して、必要に応じて関連モジュールを遅延ロードします。</target>
        </trans-unit>
        <trans-unit id="cd9ae9112239a7cf0db3bc111e0f8b2934f009e6" translate="yes">
          <source>Globs of files to include, relative to workspace or project root. There are 2 special cases:</source>
          <target state="translated">ワークスペースまたはプロジェクトルートに関連する、含めるファイルのグロブ。 2つの特別なケースがあります。</target>
        </trans-unit>
        <trans-unit id="d916a5822a35d3011d7f0297a340fb2299250c03" translate="yes">
          <source>Globs to exclude from code coverage.</source>
          <target state="translated">コードカバレッジから除外するグローブ。</target>
        </trans-unit>
        <trans-unit id="7427cf697be16a4ec1d916910128a59d920125e7" translate="yes">
          <source>Glossary</source>
          <target state="translated">Glossary</target>
        </trans-unit>
        <trans-unit id="e3915ceb49c4c471e23a11783840fc00452afb0b" translate="yes">
          <source>Go to definition</source>
          <target state="translated">定義に移動</target>
        </trans-unit>
        <trans-unit id="044a0ddb42ed2445e5c494c3fac7abbfd02ce690" translate="yes">
          <source>Go to the</source>
          <target state="translated">に行く</target>
        </trans-unit>
        <trans-unit id="b516f5d1cfcbe9ea408daa0114d4bf66a92c130b" translate="yes">
          <source>Go to the &lt;code&gt;&amp;lt;lib-root&amp;gt;/schematics/my-service/&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;&amp;lt;lib-root&amp;gt;/schematics/my-service/&lt;/code&gt; フォルダーに移動します。</target>
        </trans-unit>
        <trans-unit id="e899859d236a817b6de8def24c888bb63a6c57f6" translate="yes">
          <source>Go to the &lt;strong&gt;Network tab&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;[ネットワーク]タブに&lt;/strong&gt;移動し&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="32954252eb2c7179519aa1ba797bdaa709312ce5" translate="yes">
          <source>Go to the collection folder, install your npm dependencies, and open your new collection in your favorite editor to see the generated files. For example, if you are using VSCode:</source>
          <target state="translated">コレクションフォルダーに移動し、npm依存関係をインストールし、お気に入りのエディターで新しいコレクションを開いて、生成されたファイルを確認します。 たとえば、VSCodeを使用している場合：</target>
        </trans-unit>
        <trans-unit id="3b81592b501bfa044e9f6a43275001ed154c5f39" translate="yes">
          <source>Go to the workspace directory and launch the application.</source>
          <target state="translated">ワークスペースディレクトリに移動し、アプリケーションを起動します。</target>
        </trans-unit>
        <trans-unit id="664d0bc25c3d434ffaffbb6c6e437f0e9b1594b0" translate="yes">
          <source>Go to the workspace folder (&lt;code&gt;my-app&lt;/code&gt;).</source>
          <target state="translated">ワークスペースフォルダー（ &lt;code&gt;my-app&lt;/code&gt; ）に移動します。</target>
        </trans-unit>
        <trans-unit id="6db6e2bfc84d579abc739b3d030ca7f64fb44ae9" translate="yes">
          <source>Go undercover with these two spy hooks to discover when an element is initialized or destroyed.</source>
          <target state="translated">これらの2つのスパイフックを使用して、要素が初期化または破棄されたタイミングを発見します。</target>
        </trans-unit>
        <trans-unit id="22e5dcc47a0ac764dc09b2d910699120c526df7a" translate="yes">
          <source>Going forward, we will focus our efforts related to web workers around their primary use case of offloading CPU-intensive, non-critical work needed for initial rendering (such as in-memory search and image processing). Learn more in the &lt;a href=&quot;web-worker&quot;&gt;guide to Using Web Workers with the Angular CLI&lt;/a&gt;.</source>
          <target state="translated">今後は、Webワーカーに関連する取り組みを、初期レンダリングに必要なCPU集中型の重要ではない作業（メモリ内検索や画像処理など）をオフロードするという主なユースケースに集中します。 詳細については、 &lt;a href=&quot;web-worker&quot;&gt;Angular CLIでのWebワーカーの使用に関するガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="11a15ba018ceec88b818afcf38c41b171d4ab615" translate="yes">
          <source>Good animations intuitively call the user's attention to where it is needed.</source>
          <target state="translated">優れたアニメーションは、必要な場所にユーザーの注意を直感的に呼び込みます。</target>
        </trans-unit>
        <trans-unit id="c8d03faec6d275f412f7e3b57f8c17879e0da4b5" translate="yes">
          <source>Google, Bing, Facebook, Twitter, and other social media sites rely on web crawlers to index your application content and make that content searchable on the web. These web crawlers may be unable to navigate and index your highly interactive Angular application as a human user could do.</source>
          <target state="translated">Google、Bing、Facebook、Twitter、およびその他のソーシャルメディアサイトは、Webクローラーに依存してアプリケーションコンテンツのインデックスを作成し、そのコンテンツをWeb上で検索可能にします。 これらのWebクローラーは、人間のユーザーのように、高度にインタラクティブなAngularアプリケーションをナビゲートおよびインデックス化できない場合があります。</target>
        </trans-unit>
        <trans-unit id="dd17342cb47b948d64f169d73cfeec3f8b3e3f31" translate="yes">
          <source>Grammar</source>
          <target state="translated">Grammar</target>
        </trans-unit>
        <trans-unit id="c12060bafa9ab7b15b6ca3832d6af3230ce42f70" translate="yes">
          <source>Group separator for currency values (fallback to &lt;code&gt;Group&lt;/code&gt;). Example: $2,345.67</source>
          <target state="translated">通貨値のグループ区切り文字（ &lt;code&gt;Group&lt;/code&gt; へのフォールバック）。 例：$ 2,345.67</target>
        </trans-unit>
        <trans-unit id="2770f72df0af3038ef1a0343ee52b5941837423e" translate="yes">
          <source>Group sibling elements with &amp;lt;ng-container&amp;gt;</source>
          <target state="translated">&amp;lt;ng-container&amp;gt;で兄弟要素をグループ化します</target>
        </trans-unit>
        <trans-unit id="74434544ea4ad6607f75706c9a1d9d5850e5f00b" translate="yes">
          <source>Grouped animations are useful when a series of styles must be animated at different starting times and closed off at different ending times.</source>
          <target state="translated">グループ化されたアニメーションは、一連のスタイルを異なる開始時間でアニメーション化し、異なる終了時間で閉じる必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="5a4358aa8c9827657281c95ebc1a61485d3b94c0" translate="yes">
          <source>Grouping all custom events under this type ensures they will be handled and forwarded by all implementations of interceptors.</source>
          <target state="translated">このタイプの下にすべてのカスタムイベントをグループ化すると、インターセプターのすべての実装によって処理および転送されます。</target>
        </trans-unit>
        <trans-unit id="022f8ed1b5baa1c6c383d3cd42ee431d41e6c665" translate="yes">
          <source>Grouping form controls</source>
          <target state="translated">フォームコントロールのグループ化</target>
        </trans-unit>
        <trans-unit id="9ae241754a154ca19caabd604845bbd97a55ee45" translate="yes">
          <source>Grouping separator, typically for thousands. For &lt;code&gt;en-US&lt;/code&gt;, the comma character. Example: 2&lt;code&gt;,&lt;/code&gt;345.67</source>
          <target state="translated">通常は数千のグループ化区切り。 &lt;code&gt;en-US&lt;/code&gt; の場合、コンマ文字。 例：2、345.67</target>
        </trans-unit>
        <trans-unit id="6326b449098dfdd85370d4e7f92d36b7b17a3cdc" translate="yes">
          <source>Guard against null</source>
          <target state="translated">ヌルから守る</target>
        </trans-unit>
        <trans-unit id="ab5327438e6b149abb6275cce81dbe7458e8eca1" translate="yes">
          <source>Guard the admin feature</source>
          <target state="translated">管理機能を守る</target>
        </trans-unit>
        <trans-unit id="67de3c63a9bd94b74bfc86944368ab7bcdf6d849" translate="yes">
          <source>Guards</source>
          <target state="translated">Guards</target>
        </trans-unit>
        <trans-unit id="d37b7da1c8eb7bd5978035fc4081065ea96046b6" translate="yes">
          <source>GuardsCheckEnd</source>
          <target state="translated">GuardsCheckEnd</target>
        </trans-unit>
        <trans-unit id="965b3bfde4f2655376c67aa3734795d0e8a8cc08" translate="yes">
          <source>GuardsCheckStart</source>
          <target state="translated">GuardsCheckStart</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="4ac7a3e3bac944a26bbaf448ea2cfcf2565e9e00" translate="yes">
          <source>Guide pages</source>
          <target state="translated">ガイドページ</target>
        </trans-unit>
        <trans-unit id="141d1d74d8a6b3e7a7f1418ef539a53ce746ef34" translate="yes">
          <source>Guidelines</source>
          <target state="translated">Guidelines</target>
        </trans-unit>
        <trans-unit id="6f2413a65c9297cdd43260f7f29f49c1d190ee16" translate="yes">
          <source>Guides are rich in examples of working Angular code. Example code can be commands entered in a terminal window, a fragment of TypeScript or HTML, or an entire code file.</source>
          <target state="translated">ガイドには、動作するAngularコードの例が豊富にあります。 サンプルコードは、ターミナルウィンドウに入力されたコマンド、TypeScriptまたはHTMLのフラグメント、またはコードファイル全体です。</target>
        </trans-unit>
        <trans-unit id="7cf184f4c67ad58283ecb19349720b0cae756829" translate="yes">
          <source>H</source>
          <target state="translated">H</target>
        </trans-unit>
        <trans-unit id="36ba7465769b4ff0ab60fcd125dcc264416fb8e1" translate="yes">
          <source>H (13)</source>
          <target state="translated">H（13）</target>
        </trans-unit>
        <trans-unit id="f411883d06b3723fb25fc201defabd4ea8ec9ca9" translate="yes">
          <source>HAMMER_GESTURE_CONFIG</source>
          <target state="translated">HAMMER_GESTURE_CONFIG</target>
        </trans-unit>
        <trans-unit id="8a892694247fc243c4878ab48986c7e386dc9bbf" translate="yes">
          <source>HAMMER_LOADER</source>
          <target state="translated">HAMMER_LOADER</target>
        </trans-unit>
        <trans-unit id="fc5d4b9117ba9e87388174aee4f4970bdfe8d066" translate="yes">
          <source>HH</source>
          <target state="translated">HH</target>
        </trans-unit>
        <trans-unit id="f2a5ccfc6d4dc3ce20c15a7f6d6508a6af92aee9" translate="yes">
          <source>HH (13)</source>
          <target state="translated">HH（13）</target>
        </trans-unit>
        <trans-unit id="1bb1809c1d200915be81fd60b4b960599011f45e" translate="yes">
          <source>HTML attribute key</source>
          <target state="translated">HTML属性キー</target>
        </trans-unit>
        <trans-unit id="07e975607a7803b33cacfc4d5f82151d2712eef5" translate="yes">
          <source>HTML attribute vs. DOM property</source>
          <target state="translated">HTML属性とDOMプロパティ</target>
        </trans-unit>
        <trans-unit id="492f8eb8a6d365059df263e1a0ea62251a5d2784" translate="yes">
          <source>HTML between component element tags.</source>
          <target state="translated">コンポーネント要素タグ間のHTML。</target>
        </trans-unit>
        <trans-unit id="a28f9683020cbd43849f3983827dd44d9e423a2f" translate="yes">
          <source>HTML constructed on the server is vulnerable to injection attacks. Injecting template code into an Angular application is the same as injecting executable code into the application: it gives the attacker full control over the application. To prevent this, use a templating language that automatically escapes values to prevent XSS vulnerabilities on the server. Don't generate Angular templates on the server side using a templating language; doing this carries a high risk of introducing template-injection vulnerabilities.</source>
          <target state="translated">サーバー上に構築されたHTMLは、インジェクション攻撃に対して脆弱です。 テンプレートコードをAngularアプリケーションに挿入することは、実行可能コードをアプリケーションに挿入することと同じです。これにより、攻撃者はアプリケーションを完全に制御できます。 これを防ぐには、値を自動的にエスケープするテンプレート言語を使用して、サーバーのXSS脆弱性を防ぎます。 テンプレート言語を使用してサーバー側でAngularテンプレートを生成しないでください。 これを行うと、テンプレートインジェクションの脆弱性が導入されるリスクが高くなります。</target>
        </trans-unit>
        <trans-unit id="f3604a53d257e638a4136c7cb9f81c3eac396475" translate="yes">
          <source>HTML in templates</source>
          <target state="translated">テンプレート内のHTML</target>
        </trans-unit>
        <trans-unit id="e4e38933cb42317719499012ef3485fb636d8592" translate="yes">
          <source>HTML is the language of the Angular template. Almost all HTML syntax is valid template syntax. The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element is a notable exception; it is forbidden, eliminating the risk of script injection attacks. In practice, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; is ignored and a warning appears in the browser console. See the &lt;a href=&quot;security&quot;&gt;Security&lt;/a&gt; page for details.</source>
          <target state="translated">HTMLは、Angularテンプレートの言語です。 ほとんどすべてのHTML構文は、有効なテンプレート構文です。 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素は注目に値する例外です。 スクリプトインジェクション攻撃のリスクを排除することは禁止されています。 実際には、 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; は無視され、ブラウザーコンソールに警告が表示されます。 詳細については、 &lt;a href=&quot;security&quot;&gt;セキュリティの&lt;/a&gt;ページをご覧ください。</target>
        </trans-unit>
        <trans-unit id="340a173a8095d43878d65264cab1c80c8a688b97" translate="yes">
          <source>HTML5 URLs and the &lt;em&gt;&amp;lt;base href&amp;gt;&lt;/em&gt;</source>
          <target state="translated">HTML5 URLおよび&lt;em&gt;&amp;lt;base href&amp;gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b12cfc00134093ccb48a5b7872f416c834e69064" translate="yes">
          <source>HTML5 has a set of built-in attributes that you can use for native validation, including &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/forms/maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt;. You can take advantage of these optional attributes on your form input elements. Add the &lt;code&gt;required&lt;/code&gt; attribute to the &lt;code&gt;firstName&lt;/code&gt; input element.</source>
          <target state="translated">HTML5には、 &lt;code&gt;required&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/minlengthvalidator&quot;&gt;minlength&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/forms/maxlengthvalidator&quot;&gt;maxlength&lt;/a&gt;&lt;/code&gt; など、ネイティブ検証に使用できる一連の組み込み属性があります。 フォームの入力要素でこれらのオプションの属性を利用できます。 &lt;code&gt;firstName&lt;/code&gt; 入力要素に &lt;code&gt;required&lt;/code&gt; 属性を追加します。</target>
        </trans-unit>
        <trans-unit id="4b064c74e2d95ac6bbf994c38b1978dcda8c19b8" translate="yes">
          <source>HTML5 style navigation is the router default. In the &lt;a href=&quot;router#browser-url-styles&quot;&gt;LocationStrategy and browser URL styles&lt;/a&gt; Appendix, learn why HTML5 style is preferred, how to adjust its behavior, and how to switch to the older hash (#) style, if necessary.</source>
          <target state="translated">HTML5スタイルのナビゲーションがルーターのデフォルトです。 &lt;a href=&quot;router#browser-url-styles&quot;&gt;LocationStrategyおよびブラウザのURLスタイルの&lt;/a&gt;付録で、HTML5スタイルが推奨される理由、その動作を調整する方法、および必要に応じて古いハッシュ（＃）スタイルに切り替える方法を学習します。</target>
        </trans-unit>
        <trans-unit id="f40b27d6b8b9a4fc3827264c1da16a04ecf4d094" translate="yes">
          <source>HTTP</source>
          <target state="translated">HTTP</target>
        </trans-unit>
        <trans-unit id="26c5442778a84663ac39f3f58df571733d2d4e4e" translate="yes">
          <source>HTTP Guide</source>
          <target state="translated">HTTPガイド</target>
        </trans-unit>
        <trans-unit id="fd91615c44820cfc2fae82595a3bc14b2eb0eaeb" translate="yes">
          <source>HTTP Request Example</source>
          <target state="translated">HTTPリクエストの例</target>
        </trans-unit>
        <trans-unit id="2ee53c95b1d46b2119a03c49e611077033b4d0b3" translate="yes">
          <source>HTTP headers</source>
          <target state="translated">HTTPヘッダー</target>
        </trans-unit>
        <trans-unit id="99a12a06813b55128f34a3ffcf4599fc8b574d15" translate="yes">
          <source>HTTP interceptors</source>
          <target state="translated">HTTPインターセプター</target>
        </trans-unit>
        <trans-unit id="377c79e5335f24017fbabcfef2f280c264cb9026" translate="yes">
          <source>HTTP is a request/response protocol. You make a request, it returns a single response.</source>
          <target state="translated">HTTPは要求/応答プロトコルです。 リクエストを行うと、単一のレスポンスが返されます。</target>
        </trans-unit>
        <trans-unit id="23c536246155df78480fbf53c197cd35d8be71a6" translate="yes">
          <source>HTTP options</source>
          <target state="translated">HTTPオプション</target>
        </trans-unit>
        <trans-unit id="23854c0ee148c64157750f67dff9661df6ecf531" translate="yes">
          <source>HTTP options.</source>
          <target state="translated">HTTPオプション。</target>
        </trans-unit>
        <trans-unit id="22c6da5fbbe1f2761b83f89519aa28322b6e37b1" translate="yes">
          <source>HTTP requests are cancellable through the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">HTTPリクエストは、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swpush#unsubscribe&quot;&gt;unsubscribe()&lt;/a&gt;&lt;/code&gt; メソッドを介してキャンセルできます。</target>
        </trans-unit>
        <trans-unit id="8c21340afccc68e99a03b607490230cf7a0a69b9" translate="yes">
          <source>HTTP-level vulnerabilities</source>
          <target state="translated">HTTPレベルの脆弱性</target>
        </trans-unit>
        <trans-unit id="491d5ca30c6cdaec0c9db018ec25d915b8026c94" translate="yes">
          <source>HTTP_INTERCEPTORS</source>
          <target state="translated">HTTP_INTERCEPTORS</target>
        </trans-unit>
        <trans-unit id="23a1a53228fc2ea6cc40c7cd90fef4dabbd8264b" translate="yes">
          <source>Had the navigation path been more dynamic, you could have bound to a template expression that returned an array of route link parameters (the &lt;em&gt;link parameters array&lt;/em&gt;). The router resolves that array into a complete URL.</source>
          <target state="translated">ナビゲーションパスがより動的であれば、ルート&lt;em&gt;リンクパラメーターの配列&lt;/em&gt; （ &lt;em&gt;リンクパラメーター配列&lt;/em&gt; ）を返すテンプレート式にバインドでき&lt;em&gt;ます&lt;/em&gt; 。 ルーターはその配列を完全なURLに解決します。</target>
        </trans-unit>
        <trans-unit id="e1776f9791d5bf9ef9c8da34a7ea4a43d8c3e3d6" translate="yes">
          <source>Had the user clicked the &lt;em&gt;Update Hero&lt;/em&gt; button, the log would show another &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; and two more triplets of &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt;. Clearly these three hooks fire &lt;em&gt;often&lt;/em&gt;. Keep the logic in these hooks as lean as possible!</source>
          <target state="translated">ユーザーが[ &lt;em&gt;ヒーロー&lt;/em&gt;の&lt;em&gt;更新&lt;/em&gt; ]ボタンをクリックした場合、ログには別の &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/docheck&quot;&gt;DoCheck&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/aftercontentchecked&quot;&gt;AfterContentChecked&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../api/core/afterviewchecked&quot;&gt;AfterViewChecked&lt;/a&gt;&lt;/code&gt; の 3つのトリプレットが表示されます。 これらの3つのフックは明らかに&lt;em&gt;頻繁に&lt;/em&gt;発射されます。 これらのフックのロジックをできるだけ無駄にしないでください！</target>
        </trans-unit>
        <trans-unit id="2606db96e8f2465348fb29fccf7dd69fadcf053a" translate="yes">
          <source>Had you clicked the browser's back button instead of the &quot;Back&quot; button, the app would have returned you to the heroes list as well. Angular app navigation updates the browser history as normal web navigation does.</source>
          <target state="translated">「戻る」ボタンの代わりにブラウザの「戻る」ボタンをクリックすると、アプリはあなたをヒーローのリストに戻します。 Angularアプリナビゲーションは、通常のWebナビゲーションと同様にブラウザーの履歴を更新します。</target>
        </trans-unit>
        <trans-unit id="348fc37258d545bf3a421d6de72e333a89447b6c" translate="yes">
          <source>HammerGestureConfig</source>
          <target state="translated">HammerGestureConfig</target>
        </trans-unit>
        <trans-unit id="278772c1f5196a39c58fdaf97264e3b06704d03e" translate="yes">
          <source>HammerLoader</source>
          <target state="translated">HammerLoader</target>
        </trans-unit>
        <trans-unit id="2bf0de63fe2ec09c6656158b9fbf37134a390043" translate="yes">
          <source>Handle form submission with &lt;em&gt;ngSubmit&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;ngSubmitで&lt;/em&gt;フォーム&lt;em&gt;送信を&lt;/em&gt;処理し&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3dc0c0c8644d4d571f10481d8b5c586e03e90d6" translate="yes">
          <source>Handling alternative text.</source>
          <target state="translated">代替テキストの処理。</target>
        </trans-unit>
        <trans-unit id="3b15f51080af6b0c1e1c13c38041ed942ea71ff5" translate="yes">
          <source>Handling form submission by binding to the &lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngSubmit&quot;&gt;NgForm.ngSubmit&lt;/a&gt;&lt;/code&gt; event property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/ngform#ngSubmit&quot;&gt;NgForm.ngSubmit&lt;/a&gt;&lt;/code&gt; イベントプロパティにバインドしてフォーム送信を処理します。</target>
        </trans-unit>
        <trans-unit id="831407a4d211313e01d26114b4d98077aa2e5a6b" translate="yes">
          <source>Handling more than one request</source>
          <target state="translated">複数のリクエストを処理する</target>
        </trans-unit>
        <trans-unit id="a86c39000e691d43e8402a56e57f52add8830778" translate="yes">
          <source>Handling navigation requests</source>
          <target state="translated">ナビゲーションリクエストの処理</target>
        </trans-unit>
        <trans-unit id="4e04a3a7c66471317dae04093656e3ff5fdc3eb2" translate="yes">
          <source>Handling output</source>
          <target state="translated">出力の処理</target>
        </trans-unit>
        <trans-unit id="f95f34fa70b69b36e45d9632d6643c7bdb17e313" translate="yes">
          <source>Handling plural forms of words.</source>
          <target state="translated">複数形の単語を処理します。</target>
        </trans-unit>
        <trans-unit id="e3a6579f666e7f37fbbafc8bc27eea0a4b297937" translate="yes">
          <source>Handling user input with forms is the cornerstone of many common applications. Applications use forms to enable users to log in, to update a profile, to enter sensitive information, and to perform many other data-entry tasks.</source>
          <target state="translated">フォームを使用したユーザー入力の処理は、多くの一般的なアプリケーションの基礎です。 アプリケーションはフォームを使用して、ユーザーがログインし、プロファイルを更新し、機密情報を入力し、他の多くのデータ入力タスクを実行できるようにします。</target>
        </trans-unit>
        <trans-unit id="0b4dd43911d5b1213a8c24413fee5583e9c69543" translate="yes">
          <source>Has the ability to save the changes to its tax return or cancel them.</source>
          <target state="translated">納税申告書の変更を保存またはキャンセルする機能があります。</target>
        </trans-unit>
        <trans-unit id="e929e6ea9e6a11c1a8dd7547fc802c6500c5c38b" translate="yes">
          <source>Hash mismatches can occur for a variety of reasons:</source>
          <target state="translated">ハッシュの不一致は、さまざまな理由で発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="446f6822c34424ae30675660ab1fef1603785ee9" translate="yes">
          <source>HashLocationStrategy</source>
          <target state="translated">HashLocationStrategy</target>
        </trans-unit>
        <trans-unit id="f0155931738ae14ba71a27c7bbf7845159b64ae6" translate="yes">
          <source>Have a near-term view of implementation and a long-term vision. Start small but keep in mind where the app is heading down the road.</source>
          <target state="translated">実装の短期的な視点と長期的なビジョンを持つ。 小さいものから始めますが、アプリがどこに向かっているのかに注意してください。</target>
        </trans-unit>
        <trans-unit id="c08d23a9cf638cea321f4d84c68bd9d2002ab064" translate="yes">
          <source>Having completed the preparation work, get going with the Angular upgrade of PhoneCat. You'll do this incrementally with the help of &lt;a href=&quot;upgrade#upgrading-with-ngupgrade&quot;&gt;ngUpgrade&lt;/a&gt; that comes with Angular. By the time you're done, you'll be able to remove AngularJS from the project completely, but the key is to do this piece by piece without breaking the application.</source>
          <target state="translated">準備作業が完了したら、PhoneCatのAngularアップグレードを開始します。 これは、Angularに付属の&lt;a href=&quot;upgrade#upgrading-with-ngupgrade&quot;&gt;ngUpgrade&lt;/a&gt;を使用して段階的に行います。 完了するまでに、プロジェクトからAngularJSを完全に削除することができますが、重要なのは、アプリケーションを中断せずにこのピースを1つずつ実行することです。</target>
        </trans-unit>
        <trans-unit id="e44a18c3a57a64b5f43da0c3c418a093078ff2b3" translate="yes">
          <source>Having imported &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; into the &lt;code&gt;AppModule&lt;/code&gt;, you can inject the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; into an application class as shown in the following &lt;code&gt;ConfigService&lt;/code&gt; example.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;AppModule&lt;/code&gt; にインポートしたら、次の &lt;code&gt;ConfigService&lt;/code&gt; の例に示すように、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; をアプリケーションクラスに挿入できます。</target>
        </trans-unit>
        <trans-unit id="63c6f00e7126a7006e9f3913b9db289b6ecefa3a" translate="yes">
          <source>Having multiple classes in the same file can be confusing. We generally recommend that you define components and services in separate files.</source>
          <target state="translated">同じファイルに複数のクラスがあると混乱する可能性があります。 通常、コンポーネントとサービスを別々のファイルで定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="43b7decb237c08167fd7e5e024b70ed1cde16483" translate="yes">
          <source>Header name default is &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt;.</source>
          <target state="translated">ヘッダー名のデフォルトは &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fd17ac56d40e61932509fd748034fd6e03beedce" translate="yes">
          <source>Headings and code-examples automatically clear a floating image. If you need to force a piece of text to clear a floating image, add &lt;code&gt;&amp;lt;br class=&quot;clear&quot;&amp;gt;&lt;/code&gt; where the text should break.</source>
          <target state="translated">見出しとコード例は、フローティング画像を自動的にクリアします。 テキストを強制的にフローティング画像をクリアする必要がある場合は、テキストを &lt;code&gt;&amp;lt;br class=&quot;clear&quot;&amp;gt;&lt;/code&gt; 場所に&amp;lt;br class=&quot;clear&quot;&amp;gt;を追加します。</target>
        </trans-unit>
        <trans-unit id="348d00693e12bc983bd092677b90434b5a4d869e" translate="yes">
          <source>Hebrew</source>
          <target state="translated">Hebrew</target>
        </trans-unit>
        <trans-unit id="e209d6314e51dd5ccf1a29898d725458ace1ea29" translate="yes">
          <source>Help the translator with a description and meaning</source>
          <target state="translated">説明と意味を翻訳者に伝える</target>
        </trans-unit>
        <trans-unit id="23b10c4e3e30b50de4cf9d8713db9896609dac18" translate="yes">
          <source>Helper class for UIComponents that allows components to register methods. If a registered method message is received from the broker on the worker, the UIMessageBroker deserializes its arguments and calls the registered method. If that method returns a promise, the UIMessageBroker returns the result to the worker.</source>
          <target state="translated">コンポーネントがメソッドを登録できるようにするUIComponentsのヘルパークラス。 ワーカーのブローカーから登録済みメソッドメッセージを受信した場合、UIMessageBrokerは引数を逆シリアル化し、登録済みメソッドを呼び出します。 そのメソッドがプロミスを返す場合、UIMessageBrokerは結果をワーカーに返します。</target>
        </trans-unit>
        <trans-unit id="4b749245153a679bfe782c9f0d64160b91308e72" translate="yes">
          <source>Here are a few essential commands for guide page authors.</source>
          <target state="translated">ガイドページの作成者に不可欠なコマンドを次に示します。</target>
        </trans-unit>
        <trans-unit id="73545db4944e39660ef5a87396a0b7aba69af71b" translate="yes">
          <source>Here are a few more &lt;code&gt;HeroDetailComponent&lt;/code&gt; tests to reinforce the point.</source>
          <target state="translated">ポイントを強化するために、 &lt;code&gt;HeroDetailComponent&lt;/code&gt; のテストをさらにいくつか示します。</target>
        </trans-unit>
        <trans-unit id="5bfee4d35a4ddf4a150031955212105951b628cd" translate="yes">
          <source>Here are all variations in action, including the uppercase version:</source>
          <target state="translated">大文字バージョンを含む、アクションのすべてのバリエーションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4fb3542fad3fab2d215a2d5fc7e79d985d7d6068" translate="yes">
          <source>Here are several ways to test it.</source>
          <target state="translated">以下にいくつかのテスト方法を示します。</target>
        </trans-unit>
        <trans-unit id="abc262ee616cd6d61de48d067488e18aa5ef326a" translate="yes">
          <source>Here are some code samples that illustrate how the same kind of operation is defined using observables and the events API.</source>
          <target state="translated">以下に、ObservableとイベントAPIを使用して同じ種類の操作を定義する方法を示すコードサンプルを示します。</target>
        </trans-unit>
        <trans-unit id="203fd9e1b4e1afa2c6feeebed47510738cfabc5c" translate="yes">
          <source>Here are some examples of domains in which observables are particularly useful.</source>
          <target state="translated">オブザーバブルが特に役立つドメインの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="131d0134570ecdcb02d33fba4f7d38b95dc40e6f" translate="yes">
          <source>Here are some reasons you might want to use AOT.</source>
          <target state="translated">AOTを使用する理由は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="26011f288b9004d25201027171dcc3188b4c814f" translate="yes">
          <source>Here are some tests of this component:</source>
          <target state="translated">このコンポーネントのテストは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1da109a79f1e8c33f73c9f071459627e6862b1f1" translate="yes">
          <source>Here are some tests that confirm those links are wired to the &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; directives as expected:</source>
          <target state="translated">これらのリンクが期待どおり &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; ディレクティブに配線されていることを確認するいくつかのテストはここにあります：</target>
        </trans-unit>
        <trans-unit id="036a997255f75ed81e294ddfe5be22eefa087ade" translate="yes">
          <source>Here are the code files discussed in the transition example.</source>
          <target state="translated">移行の例で説明したコードファイルを次に示します。</target>
        </trans-unit>
        <trans-unit id="f4fad47e3b7e72ffe6f641a7a34317759a3aecb3" translate="yes">
          <source>Here are the code files discussed on this page (all in the &lt;code&gt;src/app/&lt;/code&gt; folder).</source>
          <target state="translated">このページで説明したコードファイルを以下に示します（すべて &lt;code&gt;src/app/&lt;/code&gt; フォルダーにあります）。</target>
        </trans-unit>
        <trans-unit id="74657a80cc45b0684fb1fecc8e212b1ed029cf06" translate="yes">
          <source>Here are the code files discussed on this page and your app should look like this live example.</source>
          <target state="translated">このページで説明されているコードファイルを以下に示します。アプリはこの実際の例のようになります。</target>
        </trans-unit>
        <trans-unit id="66c3e84d041afa18e7991e820a67cb0cf06a9f66" translate="yes">
          <source>Here are the code files discussed on this page, including the &lt;code&gt;HeroesComponent&lt;/code&gt; styles.</source>
          <target state="translated">&lt;code&gt;HeroesComponent&lt;/code&gt; スタイルを含む、このページで説明したコードファイルを以下に示します。</target>
        </trans-unit>
        <trans-unit id="6d57ee3abb38cd8a9899ae29d2550ce3d653bb31" translate="yes">
          <source>Here are the code files discussed on this page.</source>
          <target state="translated">このページで説明したコードファイルを次に示します。</target>
        </trans-unit>
        <trans-unit id="203d61b3820a79aebb69d382a71e07a169924fb4" translate="yes">
          <source>Here are the files discussed in this milestone.</source>
          <target state="translated">このマイルストーンで説明したファイルは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="86abfa66f0b60872f95de83204f6eda0cb85e98b" translate="yes">
          <source>Here are the harness and directive in action.</source>
          <target state="translated">以下に、動作中のハーネスとディレクティブを示します。</target>
        </trans-unit>
        <trans-unit id="adb765c3e2e6d081287a43313fe06b6366a0d292" translate="yes">
          <source>Here are the key &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; terms and their meanings:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; の主要な用語とその意味は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="39f688160764967f49497f345da36e4e3e168300" translate="yes">
          <source>Here are the most important properties for testers, in order of likely utility.</source>
          <target state="translated">テスターに​​とって最も重要なプロパティを、実用性の高い順に示します。</target>
        </trans-unit>
        <trans-unit id="df6a324455059eb2e9437c79b60728c721d55c96" translate="yes">
          <source>Here are the most important static methods, in order of likely utility.</source>
          <target state="translated">最も重要な静的メソッドを実用性の高い順に示します。</target>
        </trans-unit>
        <trans-unit id="b0fcf40781dd81faf1b7b2c864bfff4e045dab29" translate="yes">
          <source>Here are the most useful &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; members for testers, in approximate order of utility:</source>
          <target state="translated">テスターに​​とって最も有用な &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; メンバーを、おおよそのユーティリティ順に示します。</target>
        </trans-unit>
        <trans-unit id="32ce460bbc4e3a59815d17ba202313950f72d9f6" translate="yes">
          <source>Here are the most useful methods for testers.</source>
          <target state="translated">テスターに​​とって最も便利な方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6a60e979959576c6f47a130ae26f2fc0cb5317a3" translate="yes">
          <source>Here are the pertinent excerpts from that &lt;code&gt;ItemDetailComponent&lt;/code&gt;:</source>
          <target state="translated">その &lt;code&gt;ItemDetailComponent&lt;/code&gt; からの適切な抜粋は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1a520668d060926a9146d4f12a9958d113becba8" translate="yes">
          <source>Here are the relevant files for this version of the sample application.</source>
          <target state="translated">サンプルアプリケーションのこのバージョンに関連するファイルは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="971ae2e0b756cc6f10ae1a53bdb804772e791d81" translate="yes">
          <source>Here are the special characters used in number patterns:</source>
          <target state="translated">番号パターンで使用される特殊文字は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9dc7abb813d891b43406656a067ebe5efbb41d40" translate="yes">
          <source>Here are the steps performed in the model to view test.</source>
          <target state="translated">以下は、テストを表示するためにモデルで実行される手順です。</target>
        </trans-unit>
        <trans-unit id="f907cd5c3b0f7e717c2f855029aafe9b0514260f" translate="yes">
          <source>Here are the steps performed in the view to model test.</source>
          <target state="translated">ここでは、テストをモデル化するためにビューで実行される手順を示します。</target>
        </trans-unit>
        <trans-unit id="8d85ddc8011bbc63fdd9aec9179cf474504e39e7" translate="yes">
          <source>Here are the two files in their entirety for reference:</source>
          <target state="translated">参照用の2つのファイル全体を以下に示します。</target>
        </trans-unit>
        <trans-unit id="f835472a7ce81800f581a799c5de83f42771a680" translate="yes">
          <source>Here are the updated modules &lt;em&gt;before enabling preload&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;プリロードを有効にする前&lt;/em&gt;の更新されたモジュールは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="63dad6d461822e6aad5b70847aaca52f44875f2f" translate="yes">
          <source>Here are three tests that illustrate how automatic change detection works.</source>
          <target state="translated">自動変更検出の仕組みを示す3つのテストを次に示します。</target>
        </trans-unit>
        <trans-unit id="37f9819724bc0daa70265500abced7a21ff78a8d" translate="yes">
          <source>Here are two more versions of the previous test, written with &lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt;. The first one subscribes to the &lt;code&gt;Observable&lt;/code&gt; exposed to the template by the component's &lt;code&gt;quote&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/applicationinitstatus#done&quot;&gt;done&lt;/a&gt;()&lt;/code&gt; で記述された前のテストのさらに2つのバージョンがあります。 最初のものは、コンポーネントの &lt;code&gt;quote&lt;/code&gt; プロパティによってテンプレートに公開された &lt;code&gt;Observable&lt;/code&gt; にサブスクライブします。</target>
        </trans-unit>
        <trans-unit id="d47821c3b31c5392bebc3b1326890d7c2f695edc" translate="yes">
          <source>Here are two sample components and the &lt;code&gt;AdComponent&lt;/code&gt; interface for reference:</source>
          <target state="translated">以下に、参照用の2つのサンプルコンポーネントと &lt;code&gt;AdComponent&lt;/code&gt; インターフェースを示します。</target>
        </trans-unit>
        <trans-unit id="e0b787c218a0fd5b377e6264e620f571eb531aac" translate="yes">
          <source>Here is &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; displaying the hero's name if &lt;code&gt;hero&lt;/code&gt; exists.</source>
          <target state="translated">&lt;code&gt;hero&lt;/code&gt; が存在する場合、英雄の名前を表示する場合は &lt;code&gt;*&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a3fe3b425db56855651f417606038f5fe5ce6604" translate="yes">
          <source>Here is a compliant folder and file structure:</source>
          <target state="translated">準拠したフォルダーとファイル構造は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="62e6d461e292af41877b8fc098a18bf5f12699ce" translate="yes">
          <source>Here is a do-nothing &lt;em&gt;noop&lt;/em&gt; interceptor that simply passes the request through without touching it:</source>
          <target state="translated">以下は、リクエストに触れることなく単に通過させる、何もしない&lt;em&gt;noop&lt;/em&gt;インターセプターです。</target>
        </trans-unit>
        <trans-unit id="b553906d1b80b4ed0946ba38a8092bc3576b764e" translate="yes">
          <source>Here is a simple demonstration of how the &lt;code&gt;&lt;a href=&quot;contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; decorator can be used.</source>
          <target state="translated">以下に、 &lt;code&gt;&lt;a href=&quot;contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; デコレータの使用方法の簡単なデモを示します。</target>
        </trans-unit>
        <trans-unit id="8bd50bf2cb0cef064313fd64747ca38c8871ec23" translate="yes">
          <source>Here is a slightly more realistic example that shows how &lt;code&gt;&lt;a href=&quot;contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; decorators can be used to implement a tab pane component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;contentchildren&quot;&gt;ContentChildren&lt;/a&gt;&lt;/code&gt; デコレータを使用してタブペインコンポーネントを実装する方法を示す、もう少し現実的な例を示します。</target>
        </trans-unit>
        <trans-unit id="2d30b7cdd1bf5a3b2b24f4673563c67ae4a7d16a" translate="yes">
          <source>Here is an example of a &lt;code&gt;&lt;a href=&quot;animationevent#fromState&quot;&gt;fromState&lt;/a&gt;&lt;/code&gt; specified as a state-change function that invokes an animation when true:</source>
          <target state="translated">以下は、trueのときにアニメーションを呼び出す状態変更関数として指定された &lt;code&gt;&lt;a href=&quot;animationevent#fromState&quot;&gt;fromState&lt;/a&gt;&lt;/code&gt; の例です。</target>
        </trans-unit>
        <trans-unit id="3a7a73e5c81430a86007b3a7779f14a9661e2342" translate="yes">
          <source>Here is an example of the case where the component router configuration includes a non-default &lt;a href=&quot;router#location-strategy&quot;&gt;location strategy&lt;/a&gt; by listing its provider in the &lt;code&gt;providers&lt;/code&gt; list of the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppModule&lt;/code&gt; の &lt;code&gt;providers&lt;/code&gt; リストにそのプロバイダーをリストすることにより、コンポーネントルーター構成にデフォルト以外の&lt;a href=&quot;router#location-strategy&quot;&gt;ロケーション戦略が&lt;/a&gt;含まれる場合の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="88d4ddf3e1fd42c49a911a9c5f50961b303bafab" translate="yes">
          <source>Here is an illustration of the &lt;code&gt;trackBy&lt;/code&gt; effect. &quot;Reset items&quot; creates new items with the same &lt;code&gt;item.id&lt;/code&gt;s. &quot;Change ids&quot; creates new items with new &lt;code&gt;item.id&lt;/code&gt;s.</source>
          <target state="translated">以下に、 &lt;code&gt;trackBy&lt;/code&gt; エフェクトの図を示します。 「アイテムのリセット」は、同じ &lt;code&gt;item.id&lt;/code&gt; で新しいアイテムを作成します。 「IDの変更」は、新しい &lt;code&gt;item.id&lt;/code&gt; で新しいアイテムを作成します。</target>
        </trans-unit>
        <trans-unit id="69d071f83219cc67343782da4cd85435abb0fdcf" translate="yes">
          <source>Here is such a &lt;code&gt;Page&lt;/code&gt; class for the &lt;code&gt;hero-detail.component.spec.ts&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;hero-detail.component.spec.ts&lt;/code&gt; の &lt;code&gt;Page&lt;/code&gt; クラスは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d980344b844e420fad53b6c16d75017541abc570" translate="yes">
          <source>Here is the &lt;code&gt;DashboardHeroComponent&lt;/code&gt; from the &lt;em&gt;Tour of Heroes&lt;/em&gt; tutorial.</source>
          <target state="translated">&lt;em&gt;Tour of Heroes&lt;/em&gt;チュートリアルの &lt;code&gt;DashboardHeroComponent&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e86488b1cb32b49feef4f4470dedca4a5fcf1967" translate="yes">
          <source>Here is the &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; that makes use of &lt;code&gt;HeroTaxReturnService&lt;/code&gt;.</source>
          <target state="translated">これが &lt;code&gt;HeroTaxReturnComponent&lt;/code&gt; を利用する &lt;code&gt;HeroTaxReturnService&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4ccb3bee45c3f5e8a10c7949fcd716f5fbd128cd" translate="yes">
          <source>Here is the animation trigger code:</source>
          <target state="translated">アニメーショントリガーコードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ae4efcc82a067c04926b13069d143263eacc0318" translate="yes">
          <source>Here is the component code:</source>
          <target state="translated">コンポーネントコードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1f67d21ef057f2279432085d35aecdb714a0fb88" translate="yes">
          <source>Here is the component definition:</source>
          <target state="translated">コンポーネントの定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="29f639c1a4ee278d0bd27ad171d2b15e9b89431d" translate="yes">
          <source>Here is the example application and its unit tests that use &lt;code&gt;&lt;a href=&quot;createangulartestingmodule&quot;&gt;createAngularTestingModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;createangularjstestingmodule&quot;&gt;createAngularJSTestingModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;createangulartestingmodule&quot;&gt;createAngularTestingModule&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;createangularjstestingmodule&quot;&gt;createAngularJSTestingModule&lt;/a&gt;&lt;/code&gt; を使用するサンプルアプリケーションとその単体テストを次に示します。</target>
        </trans-unit>
        <trans-unit id="7289c34d08b5da9d83fd489bac339bb78646999e" translate="yes">
          <source>Here is the expanded version of the short-form example.</source>
          <target state="translated">これは、短い形式の例の拡張バージョンです。</target>
        </trans-unit>
        <trans-unit id="0070a1aed2d25a8700de4fcbefa0dce4ca73945f" translate="yes">
          <source>Here is the final version of &lt;code&gt;getHeroes()&lt;/code&gt; with the &lt;code&gt;tap()&lt;/code&gt; that logs the operation.</source>
          <target state="translated">次に、操作をログに記録する &lt;code&gt;tap()&lt;/code&gt; を使用した &lt;code&gt;getHeroes()&lt;/code&gt; 最終バージョンを示します。</target>
        </trans-unit>
        <trans-unit id="507213e3087048a335abbd087b122b29d7274391" translate="yes">
          <source>Here is the markup for the first of these callouts.</source>
          <target state="translated">これらの最初のコールアウトのマークアップは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9b90d7defb29486440935655cf61803f05d03963" translate="yes">
          <source>Here is the markup for these alerts.</source>
          <target state="translated">これらのアラートのマークアップは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7ae5b951b35f869a8a6b02613f7eda4975f89343" translate="yes">
          <source>Here is the markup for this file tree.</source>
          <target state="translated">このファイルツリーのマークアップを次に示します。</target>
        </trans-unit>
        <trans-unit id="a2fe150369bad5a348a282aa3a05ad8386dd51fe" translate="yes">
          <source>Here is the markup for this table.</source>
          <target state="translated">この表のマークアップは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ffbf137688538ebb74fc8824377d23da85c0e7ed" translate="yes">
          <source>Here is the parent, &lt;code&gt;CountdownViewChildParentComponent&lt;/code&gt;:</source>
          <target state="translated">親である &lt;code&gt;CountdownViewChildParentComponent&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="305818b1af808bc21c8b481f7c4cdc0dcded567c" translate="yes">
          <source>Here is the revised &lt;code&gt;HeroService&lt;/code&gt; that injects &lt;code&gt;Logger&lt;/code&gt;, side by side with the previous service for comparison.</source>
          <target state="translated">&lt;code&gt;Logger&lt;/code&gt; を注入する変更された &lt;code&gt;HeroService&lt;/code&gt; は、比較のために以前のサービスと並んでいます。</target>
        </trans-unit>
        <trans-unit id="1b66536e9ef97cef4faab2e6486b3e3341657864" translate="yes">
          <source>Here is the source from the &lt;code&gt;src/app/&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;src/app/&lt;/code&gt; フォルダーのソースは次のとおりです 。</target>
        </trans-unit>
        <trans-unit id="defdb414b6ad2449a9c07d869f058f5e58f4b417" translate="yes">
          <source>Here it binds the &lt;code&gt;hero.name&lt;/code&gt; property to the HTML textbox so that data can flow &lt;em&gt;in both directions:&lt;/em&gt; from the &lt;code&gt;hero.name&lt;/code&gt; property to the textbox, and from the textbox back to the &lt;code&gt;hero.name&lt;/code&gt;.</source>
          <target state="translated">ここでは、 &lt;code&gt;hero.name&lt;/code&gt; プロパティをHTMLテキストボックスにバインドして、データが &lt;code&gt;hero.name&lt;/code&gt; プロパティからtextboxへ、そしてtextboxから &lt;code&gt;hero.name&lt;/code&gt; へと双方向に流れるようにします。</target>
        </trans-unit>
        <trans-unit id="08272db39313455a9af93a6df856a1e60bf114b3" translate="yes">
          <source>Here they are together, after translation:</source>
          <target state="translated">ここで、翻訳後、それらは一緒になっています。</target>
        </trans-unit>
        <trans-unit id="cdcad7df3e4cfd3543f37881241493108acfc809" translate="yes">
          <source>Here we decided that &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; error is treated as a successful validation, because failure to make a validation request does not necessarily mean that the alter ego is invalid. You could handle the error differently and return the &lt;code&gt;ValidationError&lt;/code&gt; object instead.</source>
          <target state="translated">ここでは、検証リクエストの失敗が必ずしも分身が無効であることを意味しないため、 &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; エラーは成功した検証として扱われることにしました。 エラーを異なる方法で処理し、代わりに &lt;code&gt;ValidationError&lt;/code&gt; オブジェクトを返すこともできます。</target>
        </trans-unit>
        <trans-unit id="79f90147ab759834dc4640b93285fd5ae43cb71a" translate="yes">
          <source>Here we see the parent and child working together.</source>
          <target state="translated">ここでは、親と子が一緒に機能しているのがわかります。</target>
        </trans-unit>
        <trans-unit id="8771b8deaa3683dcf7a75cf6959eaf7df50ecaa9" translate="yes">
          <source>Here you can see the use of a &lt;code&gt;click()&lt;/code&gt; event binding and the property binding syntax (&lt;code&gt;[attr.fill]=&quot;fillColor&quot;&lt;/code&gt;).</source>
          <target state="translated">ここでは、 &lt;code&gt;click()&lt;/code&gt; イベントバインディングの使用とプロパティバインディング構文（ &lt;code&gt;[attr.fill]=&quot;fillColor&quot;&lt;/code&gt; ）を確認できます。</target>
        </trans-unit>
        <trans-unit id="511a4f717c3a359e7f572279ad68d540c4bb458e" translate="yes">
          <source>Here&amp;rsquo;s an example of a test that runs the command builder. The test uses the builder to run the &lt;code&gt;ls&lt;/code&gt; command, then validates that it ran successfully and listed the proper files.</source>
          <target state="translated">コマンドビルダーを実行するテストの例を次に示します。 テストでは、ビルダーを使用して &lt;code&gt;ls&lt;/code&gt; コマンドを実行し、正常に実行され、適切なファイルがリストされていることを検証します。</target>
        </trans-unit>
        <trans-unit id="79a379c34c53ce83d07e71356345ea69136a74d1" translate="yes">
          <source>Here&amp;rsquo;s an example:</source>
          <target state="translated">次に例を示します。</target>
        </trans-unit>
        <trans-unit id="d2ea21d3443d959148c1cadad9c432d2da8241bc" translate="yes">
          <source>Here&amp;rsquo;s the code for the final version of the application:</source>
          <target state="translated">アプリケーションの最終バージョンのコードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="29d75374abffd4bb69efcb9d1c150b3130b488ef" translate="yes">
          <source>Here's &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; that takes a &lt;code&gt;UserServiceConfig&lt;/code&gt; object:</source>
          <target state="translated">&lt;code&gt;UserServiceConfig&lt;/code&gt; オブジェクトを &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8ce266b9f7140d8aadcec223f123a37e1acef56f" translate="yes">
          <source>Here's &lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; in action.</source>
          <target state="translated">&lt;code&gt;HeroBiosAndContactsComponent&lt;/code&gt; が実際のHeroBiosAndContactsComponentです。</target>
        </trans-unit>
        <trans-unit id="210602b8fc8ab2d5642913c9982cbff1a4f4b065" translate="yes">
          <source>Here's &lt;code&gt;HeroContactComponent&lt;/code&gt;, which demonstrates the qualifying decorators.</source>
          <target state="translated">修飾デコレーターを示す &lt;code&gt;HeroContactComponent&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="267c0db0ea651fe8d15656fadfdbd9b520beca00" translate="yes">
          <source>Here's &lt;em&gt;AfterView&lt;/em&gt; in action:</source>
          <target state="translated">動作中の&lt;em&gt;AfterView&lt;/em&gt;は次の&lt;em&gt;とおり&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="a1651a820337a1810f83cfeaae7fc899365266c2" translate="yes">
          <source>Here's &lt;em&gt;Alex&lt;/em&gt; and family in action.</source>
          <target state="translated">これが&lt;em&gt;アレックス&lt;/em&gt;と家族の行動です。</target>
        </trans-unit>
        <trans-unit id="abf25e2fea0f9e2ba609a88d3e7f6d6c72dae972" translate="yes">
          <source>Here's &lt;em&gt;Alice&lt;/em&gt;, &lt;em&gt;Barry&lt;/em&gt;, and family in action.</source>
          <target state="translated">これが&lt;em&gt;アリス&lt;/em&gt; 、 &lt;em&gt;バリー&lt;/em&gt; 、そして家族の行動です。</target>
        </trans-unit>
        <trans-unit id="2373344a9550daa83bd9efe5a057e0eb47e2963c" translate="yes">
          <source>Here's &lt;em&gt;Barry&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;バリー&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="58dfcfb5bd2344e21c4f9234e1a0a787c9ad52c8" translate="yes">
          <source>Here's a &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test that demonstrates the data flow you'd expect in the real world.</source>
          <target state="translated">これは、現実の世界で期待されるデータフローを示す &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; テストです。</target>
        </trans-unit>
        <trans-unit id="3b04099851b53646b03c500d744979f7ed478b27" translate="yes">
          <source>Here's a &lt;code&gt;provider&lt;/code&gt; example of the problem.</source>
          <target state="translated">問題の &lt;code&gt;provider&lt;/code&gt; 例を次に示します。</target>
        </trans-unit>
        <trans-unit id="332ad9d1d1c0ec3216151d16383d075136fa7637" translate="yes">
          <source>Here's a brief description of each exercise:</source>
          <target state="translated">各演習の簡単な説明を次に示します。</target>
        </trans-unit>
        <trans-unit id="342d9dca61b9e4422f88fa45aa82e665fc20fb7d" translate="yes">
          <source>Here's a child view that displays a hero's name in an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; にヒーローの名前を表示する子ビューは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2dc49e2bfd96abcc48b54d3c3672ed317de547d8" translate="yes">
          <source>Here's a closer look at the code.</source>
          <target state="translated">コードを詳しく見てみましょう。</target>
        </trans-unit>
        <trans-unit id="c8cfdd2d432c327dabf4c942f49ee2de0e323ab4" translate="yes">
          <source>Here's a component with an input field for a single control implemented using reactive forms.</source>
          <target state="translated">これは、リアクティブフォームを使用して実装された単一のコントロールの入力フィールドを持つコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="771c4365239b6adac9b51419ce8e2170cdf8bc02" translate="yes">
          <source>Here's a conforming example</source>
          <target state="translated">これは適合例です</target>
        </trans-unit>
        <trans-unit id="67c50f15b5597454aa71b847527a69b00db4940f" translate="yes">
          <source>Here's a full-featured application of &lt;code&gt;NgFor&lt;/code&gt;, written both ways:</source>
          <target state="translated">&lt;code&gt;NgFor&lt;/code&gt; の完全な機能を備えたアプリケーションを次に示します。</target>
        </trans-unit>
        <trans-unit id="9d07ea3700c1b14d35ec087c49afa25711851988" translate="yes">
          <source>Here's a pertinent excerpt from the template:</source>
          <target state="translated">以下は、テンプレートからの適切な抜粋です。</target>
        </trans-unit>
        <trans-unit id="2d7220461d3f8c562324ad099c90d86389d03dea" translate="yes">
          <source>Here's a revised version that defaults to &lt;code&gt;parent&lt;/code&gt; but also accepts an optional second parameter for a different parent class interface.</source>
          <target state="translated">デフォルトは &lt;code&gt;parent&lt;/code&gt; が、別の親クラスインターフェイスのオプションの2番目のパラメータも受け入れる修正バージョンです。</target>
        </trans-unit>
        <trans-unit id="e1e1e0ffc9b6aee2fef781d2718e2fd868a214ee" translate="yes">
          <source>Here's a simple root NgModule definition.</source>
          <target state="translated">これは、単純なルートNgModule定義です。</target>
        </trans-unit>
        <trans-unit id="13b657074051b1dd3d3aaa6052c01e4cd48c1ba0" translate="yes">
          <source>Here's a summary of the stand-alone functions, in order of likely utility:</source>
          <target state="translated">スタンドアロン機能の概要を、実用性の高い順に示します。</target>
        </trans-unit>
        <trans-unit id="d52092227c7976ce49b8aa2a6d6cca685babff11" translate="yes">
          <source>Here's a test demonstrating the component's behavior when the observed &lt;code&gt;id&lt;/code&gt; refers to an existing hero:</source>
          <target state="translated">観測された &lt;code&gt;id&lt;/code&gt; 既存のヒーローを参照する場合のコンポーネントの動作を示すテストは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ffd0ce6376a8b892a0a4dd44632d7f49de3e0e31" translate="yes">
          <source>Here's a visual idea of where this tutorial leads, beginning with the &quot;Dashboard&quot; view and the most heroic heroes:</source>
          <target state="translated">「ダッシュボード」ビューと最も英雄的なヒーローから始めて、このチュートリアルが導く場所の視覚的なアイデアを次に示します。</target>
        </trans-unit>
        <trans-unit id="a58b171fff7fdf9107296da5f6e8439cb68ac2fa" translate="yes">
          <source>Here's an embedded live example for this guide.</source>
          <target state="translated">以下に、このガイドの埋め込みライブ例を示します。</target>
        </trans-unit>
        <trans-unit id="f8987e6cd96e95c2cfb4f4fd4c1bed76aaee7fc7" translate="yes">
          <source>Here's an example in which the &lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; is two-way bound to the &lt;code&gt;SizerComponent&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;AppComponent.fontSizePx&lt;/code&gt; がSizerComponentに双方向でバインドされている &lt;code&gt;SizerComponent&lt;/code&gt; を次に示します。</target>
        </trans-unit>
        <trans-unit id="2bdfacca7ab5d0824f43836325291190197ca019" translate="yes">
          <source>Here's an example of a service class that logs to the browser console.</source>
          <target state="translated">ブラウザコンソールにログを記録するサービスクラスの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="99e679bc16af7a1f9d179d8466452325faeeffb8" translate="yes">
          <source>Here's an example of an error message added to the &lt;em&gt;name&lt;/em&gt; input box:</source>
          <target state="translated">&lt;em&gt;名前&lt;/em&gt;入力ボックスに追加されたエラーメッセージの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="a801f1de6030e88253033ddfef1b99db9927d97d" translate="yes">
          <source>Here's an example of basic metadata for &lt;code&gt;HeroListComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroListComponent&lt;/code&gt; の基本的なメタデータの例を次に示します。</target>
        </trans-unit>
        <trans-unit id="45774d5d345882a71ea0fc59337a3b86d4253823" translate="yes">
          <source>Here's an example of binding to the &lt;code&gt;colSpan&lt;/code&gt; property. Notice that it's not &lt;code&gt;colspan&lt;/code&gt;, which is the attribute, spelled with a lowercase &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;colSpan&lt;/code&gt; プロパティにバインドする例を次に示します。 属性である &lt;code&gt;colspan&lt;/code&gt; ではなく、小文字 &lt;code&gt;s&lt;/code&gt; で綴られていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4dbc92e76d1afd27809635974b4f4a7190dd2709" translate="yes">
          <source>Here's an example of creating and subscribing to a simple observable, with an observer that logs the received message to the console:</source>
          <target state="translated">次に、受信したメッセージをコンソールに記録するオブザーバーを使用して、単純なオブザーバブルを作成してサブスクライブする例を示します。</target>
        </trans-unit>
        <trans-unit id="044030613cb78d7ccdd179ec6255d8b66b6c4172" translate="yes">
          <source>Here's an example of using keyframes to create a pulse effect:</source>
          <target state="translated">キーフレームを使用してパルス効果を作成する例を次に示します。</target>
        </trans-unit>
        <trans-unit id="fff667011fdbcb48393c9cb30c030e165456b690" translate="yes">
          <source>Here's an example of using the &lt;code&gt;catchError&lt;/code&gt; operator to do this:</source>
          <target state="translated">以下に、 &lt;code&gt;catchError&lt;/code&gt; 演算子を使用してこれを行う例を示します。</target>
        </trans-unit>
        <trans-unit id="541970f9030afc36a95c731be207ea924fb5f0f4" translate="yes">
          <source>Here's an example that demonstrates the basic usage model by showing how an observable could be used to provide geolocation updates.</source>
          <target state="translated">以下は、Observableを使用して位置情報の更新を提供する方法を示すことにより、基本的な使用モデルを示す例です。</target>
        </trans-unit>
        <trans-unit id="2639f3ab4611df11a6c31d7f75243294cbb8cbd4" translate="yes">
          <source>Here's an example that excerpts certain scripts from &lt;code&gt;package.json&lt;/code&gt; into a partial file named &lt;code&gt;package.1.json&lt;/code&gt;.</source>
          <target state="translated">特定のスクリプトを &lt;code&gt;package.json&lt;/code&gt; からpackage.1.jsonという名前の部分ファイルに抜粋する例を次に示します。</target>
        </trans-unit>
        <trans-unit id="61f04271f847d0c8988094c50219a148be404036" translate="yes">
          <source>Here's an example.</source>
          <target state="translated">以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="51e85e4e8113fb3e1f07e1727e78d73f5f0043e6" translate="yes">
          <source>Here's an example:</source>
          <target state="translated">次に例を示します。</target>
        </trans-unit>
        <trans-unit id="9e0c943ae02f8fdb73167474d07a54374b16f800" translate="yes">
          <source>Here's an illustrative example.</source>
          <target state="translated">以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="e88db74062a516f02d9d37bb5e8b39b0a74ea59d" translate="yes">
          <source>Here's another code sample using the wildcard state together with our previous example using the &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; states. Instead of defining each state-to-state transition pair, we're now saying that any transition to &lt;code&gt;closed&lt;/code&gt; takes 1 second, and any transition to &lt;code&gt;open&lt;/code&gt; takes 0.5 seconds.</source>
          <target state="translated">ワイルドカード状態を使用した別のコードサンプルと、 &lt;code&gt;open&lt;/code&gt; た状態と &lt;code&gt;closed&lt;/code&gt; 状態を使用した前の例を示します 。 状態から状態への各遷移ペアを定義する代わりに、 &lt;code&gt;closed&lt;/code&gt; への遷移には1秒かかり、 &lt;code&gt;open&lt;/code&gt; への遷移には0.5秒かかると言っています。</target>
        </trans-unit>
        <trans-unit id="70eda6d168054a0865515e0443b33d2b23af65a0" translate="yes">
          <source>Here's another test that calls &lt;code&gt;HTMLElement.querySelector&lt;/code&gt; to get the paragraph element and look for the banner text:</source>
          <target state="translated">次に、 &lt;code&gt;HTMLElement.querySelector&lt;/code&gt; を呼び出して段落要素を取得し、バナーテキストを探す別のテストを示します。</target>
        </trans-unit>
        <trans-unit id="3dc08816743a52195484363d2e3c24a2b3c9d87d" translate="yes">
          <source>Here's another test that changes the component's &lt;code&gt;title&lt;/code&gt; property &lt;em&gt;before&lt;/em&gt; calling &lt;code&gt;fixture.detectChanges()&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;fixture.detectChanges()&lt;/code&gt; 呼び出す&lt;em&gt;前に&lt;/em&gt;コンポーネントの &lt;code&gt;title&lt;/code&gt; プロパティを変更する別のテストを示します。</target>
        </trans-unit>
        <trans-unit id="3627df60550e33b9632085fa920812ce9f528a36" translate="yes">
          <source>Here's are the two corresponding code snippets displayed side-by-side.</source>
          <target state="translated">次に、対応する2つのコードスニペットを並べて表示します。</target>
        </trans-unit>
        <trans-unit id="3f7ca5ab98fbaecc24dee9341e08f0fa1f44c1a9" translate="yes">
          <source>Here's how it works.</source>
          <target state="translated">仕組みは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c9765338cf911741bd6fdd71fe0e9d288e68f815" translate="yes">
          <source>Here's how the harness should work when you're done coding.</source>
          <target state="translated">コーディングが完了したら、ハーネスがどのように機能するかを示します。</target>
        </trans-unit>
        <trans-unit id="f8b16882caea78c4ae20585288bb3408690cd2a3" translate="yes">
          <source>Here's how the user will experience this version of the app:</source>
          <target state="translated">このバージョンのアプリをユーザーが体験する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4288a1aa86a0ff0cdf195279ed93bc028ad830c8" translate="yes">
          <source>Here's how to set the attribute without binding in plain HTML:</source>
          <target state="translated">プレーンHTMLでバインドせずに属性を設定する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ad7f50209fddbb04ba01574e4233f2906ad1ab57" translate="yes">
          <source>Here's how you might begin:</source>
          <target state="translated">開始方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7e296845164394524708679f8487b23c5b3b8bb1" translate="yes">
          <source>Here's how you might rewrite one of the &lt;code&gt;MasterService&lt;/code&gt; tests in that style.</source>
          <target state="translated">そのスタイルで &lt;code&gt;MasterService&lt;/code&gt; テストの1つを書き換える方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="3016acc8c67f96365b961ff1184679e2556919c4" translate="yes">
          <source>Here's how you might update the authorization header (after the old token expired) before making the next request.</source>
          <target state="translated">次のリクエストを行う前に、（古いトークンの有効期限が切れた後に）認証ヘッダーを更新する方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="9117f64adc27738efa3e0c09ed2e0b5bf8192560" translate="yes">
          <source>Here's the &quot;flying hero&quot; at a more reasonable scale.</source>
          <target state="translated">ここに、より合理的なスケールの「空飛ぶヒーロー」があります。</target>
        </trans-unit>
        <trans-unit id="2022823e06097841ddac1cf7e8178ca2d42a4a76" translate="yes">
          <source>Here's the &lt;code&gt;FlyingHeroesPipe&lt;/code&gt; implementation, which follows the pattern for custom pipes described earlier.</source>
          <target state="translated">&lt;code&gt;FlyingHeroesPipe&lt;/code&gt; の実装は、前述のカスタムパイプのパターンに従います。</target>
        </trans-unit>
        <trans-unit id="6a3af23f4d1dd133edc136f6262b5e7bda291ff3" translate="yes">
          <source>Here's the &lt;code&gt;HeroDetailComponent&lt;/code&gt; constructor:</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; コンストラクターは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="db5c622d4af61973b5a850f38a6b8490ea24df97" translate="yes">
          <source>Here's the &lt;code&gt;NameParentComponent&lt;/code&gt; demonstrating name variations including a name with all spaces:</source>
          <target state="translated">すべてのスペースを含む名前を含む名前のバリエーションを示す &lt;code&gt;NameParentComponent&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1356893ffa40f8e92ce29acc0e9093499ed4e4f0" translate="yes">
          <source>Here's the &lt;code&gt;src&lt;/code&gt; attribute for the &quot;flying hero&quot; image belonging to this page.</source>
          <target state="translated">以下は、このページに属する「空飛ぶヒーロー」画像の &lt;code&gt;src&lt;/code&gt; 属性です。</target>
        </trans-unit>
        <trans-unit id="1934e4bbd6b06ebbe4498a926009f4a666e04fd4" translate="yes">
          <source>Here's the &lt;em&gt;Crisis Center&lt;/em&gt; URL in this &quot;HTML5 pushState&quot; style:</source>
          <target state="translated">この「HTML5 pushState」スタイルの&lt;em&gt;Crisis Center&lt;/em&gt; URLは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d6f4728904a893243df57b9fc8571044a55d17d1" translate="yes">
          <source>Here's the app in action:</source>
          <target state="translated">動作中のアプリは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9cf2ae56853b24b74c07fa91778a1f965ca1c2a0" translate="yes">
          <source>Here's the brief markup that produced that lengthy snippet:</source>
          <target state="translated">この長いスニペットを生成した短いマークアップは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="36ec26250a6311e0f6a9d15c00b167cc53c0abd4" translate="yes">
          <source>Here's the complete &lt;code&gt;beforeEach()&lt;/code&gt;, using &lt;code&gt;TestBed.get()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;beforeEach()&lt;/code&gt; を使用した完全なbeforeEach（）は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="caecf0d5e0ff532d9b371ee05fe69b6c8e3e14b9" translate="yes">
          <source>Here's the complete &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; file with its imports.</source>
          <target state="translated">インポートされた完全な &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; ファイルを次に示します。</target>
        </trans-unit>
        <trans-unit id="2f2a29a3cb9bc753449f5909dcff9ed14073cee1" translate="yes">
          <source>Here's the complete test for getting a quote:</source>
          <target state="translated">見積もりを取得するための完全なテストを次に示します。</target>
        </trans-unit>
        <trans-unit id="6bdcaeaf4077794f77927b6985a2ac0d9be095d9" translate="yes">
          <source>Here's the component's full definition:</source>
          <target state="translated">コンポーネントの完全な定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="62549f1989670813f8a7b7667c8ee151d97fb907" translate="yes">
          <source>Here's the component, its template and styles:</source>
          <target state="translated">コンポーネント、そのテンプレート、およびスタイルは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="df996b8eb08a97d6354f014409427c8d6fcd7be4" translate="yes">
          <source>Here's the conditional paragraph again, this time using &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">再び条件付き段落があり、今回は &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="730aeb3d5f96c7f97f79d7090b9eeccf0261bbcb" translate="yes">
          <source>Here's the final code:</source>
          <target state="translated">最終的なコードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7743a871c540a8d90d5f0b6b681eb8c8d191f7eb" translate="yes">
          <source>Here's the full, final code for the service:</source>
          <target state="translated">サービスの完全な最終コードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e3f4b1fdcb29f542c15eed5d6f2f98b35f3afc23" translate="yes">
          <source>Here's the latest version of the directive class.</source>
          <target state="translated">これがディレクティブクラスの最新バージョンです。</target>
        </trans-unit>
        <trans-unit id="b5b53ab66de81e52c96d692e7bcaea312637cb34" translate="yes">
          <source>Here's the marble testing version of the &lt;code&gt;getQuote()&lt;/code&gt; error test.</source>
          <target state="translated">&lt;code&gt;getQuote()&lt;/code&gt; エラーテストの大理石のテストバージョンを次に示します。</target>
        </trans-unit>
        <trans-unit id="656487aec53e8c241399400466ff6b0fbb361893" translate="yes">
          <source>Here's the markup for an &quot;avoid&quot; example in the &lt;a href=&quot;styleguide#style-05-03&quot;&gt;&lt;em&gt;Angular Style Guide&lt;/em&gt;&lt;/a&gt;.</source>
          <target state="translated">以下は、 &lt;a href=&quot;styleguide#style-05-03&quot;&gt;&lt;em&gt;Angular Style Guideの&lt;/em&gt;&lt;/a&gt; 「避ける」例のマークアップです。</target>
        </trans-unit>
        <trans-unit id="f1ce66c2b3fdb31cf1b0adc605c91b0e16e6d5e3" translate="yes">
          <source>Here's the markup for that example.</source>
          <target state="translated">これがその例のマークアップです。</target>
        </trans-unit>
        <trans-unit id="da8d856731f03ffe7562995f38730f23d3dcb96a" translate="yes">
          <source>Here's the meat of the spec file setup.</source>
          <target state="translated">スペックファイルのセットアップの要点は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="99883629747b9a103f8b3ab3da4d0b4cb0439481" translate="yes">
          <source>Here's the output for the &lt;em&gt;main&lt;/em&gt; bundle of an example app called &lt;code&gt;cli-quickstart&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cli-quickstart&lt;/code&gt; と呼ばれるサンプルアプリの&lt;em&gt;メイン&lt;/em&gt;バンドルの出力を次に示します。</target>
        </trans-unit>
        <trans-unit id="c32dfe48fc6e040a3debbf88b61e369677d91a75" translate="yes">
          <source>Here's the output of a button-pushing sequence:</source>
          <target state="translated">ボタンを押すシーケンスの出力は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="22bc28d071c5b0a1f933b3662d1adf54f39987a7" translate="yes">
          <source>Here's the previous &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; test, re-written with the &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; utility.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; ユーティリティで &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()&lt;/code&gt; た以前のfakeAsync （）テストです。</target>
        </trans-unit>
        <trans-unit id="65a50a9d22ad026dc17457d2ea667e0410123692" translate="yes">
          <source>Here's the previous test, re-implemented with &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;fixture.debugElement.nativeElement&lt;/code&gt; で再実装された以前のテストを示します。</target>
        </trans-unit>
        <trans-unit id="f50475caf51709451a53cec5e964746fb2405109" translate="yes">
          <source>Here's the previous test, rewritten using the click helper.</source>
          <target state="translated">これは、クリックヘルパーを使用して書き換えられた以前のテストです。</target>
        </trans-unit>
        <trans-unit id="050ad561b8eadf86d74804f473be2ddd0edda3a5" translate="yes">
          <source>Here's the same component with an input field for a single control implemented using template-driven forms.</source>
          <target state="translated">テンプレート駆動型フォームを使用して実装された単一コントロールの入力フィールドを持つ同じコンポーネントを次に示します。</target>
        </trans-unit>
        <trans-unit id="d438fa0e2d2375bfdd5eb47ca1ad28ae5f460ffb" translate="yes">
          <source>Here's the sample in action as the user makes changes.</source>
          <target state="translated">以下は、ユーザーが変更を加えたときに動作するサンプルです。</target>
        </trans-unit>
        <trans-unit id="53f0e5e27eee1572f4b2943467931546bb2cebe6" translate="yes">
          <source>Here's the updated directive in full:</source>
          <target state="translated">完全に更新されたディレクティブは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8292c62a5b64fea28e8eeec99f093a51f5489800" translate="yes">
          <source>Here's what the new class for the phone list component controller looks like:</source>
          <target state="translated">電話リストコンポーネントコントローラーの新しいクラスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="07b8c34ac5381e60250f5c47082ce1167ad4448b" translate="yes">
          <source>Here, &lt;code&gt;movie&lt;/code&gt; is a user-defined local variable.</source>
          <target state="translated">ここで、 &lt;code&gt;movie&lt;/code&gt; はユーザー定義のローカル変数です。</target>
        </trans-unit>
        <trans-unit id="0324e49eae3f4d465824bf23cdd72a64935bdeb9" translate="yes">
          <source>Here, the &lt;code&gt;&amp;lt;child-component&amp;gt;&lt;/code&gt; selector, or child directive, is embedded within a &lt;code&gt;&amp;lt;parent-component&amp;gt;&lt;/code&gt;, which serves as the child's context.</source>
          <target state="translated">ここで、 &lt;code&gt;&amp;lt;child-component&amp;gt;&lt;/code&gt; セレクターまたは子ディレクティブは、子のコンテキストとして機能する &lt;code&gt;&amp;lt;parent-component&amp;gt;&lt;/code&gt; 内に埋め込まれています。</target>
        </trans-unit>
        <trans-unit id="4444abe3b6c8e06daabc19a62213ba0a77348697" translate="yes">
          <source>Here, the &lt;code&gt;prepareRoute()&lt;/code&gt; method takes the value of the output directive (established through &lt;code&gt;#outlet=&quot;outlet&quot;&lt;/code&gt;) and returns a string value representing the state of the animation based on the custom data of the current active route. You can use this data to control which transition to execute for each route.</source>
          <target state="translated">ここで、 &lt;code&gt;prepareRoute()&lt;/code&gt; メソッドは出力ディレクティブの値（＃outlet &lt;code&gt;#outlet=&quot;outlet&quot;&lt;/code&gt; 確立）を取得し、現在アクティブなルートのカスタムデータに基づいてアニメーションの状態を表す文字列値を返します。 このデータを使用して、各ルートで実行する遷移を制御できます。</target>
        </trans-unit>
        <trans-unit id="db4f248c7a227dfd8248ff1d0b824a2832aa56db" translate="yes">
          <source>Here, the &lt;em&gt;base URL&lt;/em&gt; is the &lt;code&gt;heroesURL&lt;/code&gt; defined in the &lt;a href=&quot;toh-pt6#heroes-and-http&quot;&gt;Heroes and HTTP&lt;/a&gt; section (&lt;code&gt;api/heroes&lt;/code&gt;) and &lt;em&gt;id&lt;/em&gt; is the number of the hero that you want to retrieve. For example, &lt;code&gt;api/heroes/11&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;em&gt;ベースURL&lt;/em&gt;は&lt;a href=&quot;toh-pt6#heroes-and-http&quot;&gt;HeroesおよびHTTP&lt;/a&gt;セクション（ &lt;code&gt;api/heroes&lt;/code&gt; ）で定義された &lt;code&gt;heroesURL&lt;/code&gt; であり、 &lt;em&gt;id&lt;/em&gt;は取得するヒーローの番号です。 たとえば、 &lt;code&gt;api/heroes/11&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66b196af8dfb1088f63537fb83ba051a0f53c06f" translate="yes">
          <source>Here, the services and their values are the same, but &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; stops the injector from looking any further than the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; for &lt;code&gt;FlowerService&lt;/code&gt;, so it doesn't find it and returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">ここでは、サービスとその値は同じですが、 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; はインジェクターが &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; の&amp;lt;#VIEW&amp;gt;よりも先を探すのを停止するため、見つからず &lt;code&gt;null&lt;/code&gt; を返します 。</target>
        </trans-unit>
        <trans-unit id="aca1b7a82a6d95098cb364094dad936a099e0db9" translate="yes">
          <source>Hero &lt;em&gt;Power&lt;/em&gt; selection is required. You can add the same kind of error handling to the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; if you want, but it's not imperative because the selection box already constrains the power to valid values.</source>
          <target state="translated">Hero &lt;em&gt;Powerの&lt;/em&gt;選択が必要です。 必要に応じて、同じ種類のエラー処理を &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; に追加できますが、選択ボックスは既に有効な値に電力を制限しているため、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="8d272839c4c67f0a7feb7b568fa8e3446ba7617c" translate="yes">
          <source>Hero data access services (also stubbed).</source>
          <target state="translated">ヒーローデータアクセスサービス（同じくスタブ化）。</target>
        </trans-unit>
        <trans-unit id="b4fc9a6cb0d706d6d18b352e7c32ae4c311e5f0c" translate="yes">
          <source>Heroes and HTTP</source>
          <target state="translated">ヒーローとHTTP</target>
        </trans-unit>
        <trans-unit id="49b093aef09840217c66c59f78c8bd0a260179f8" translate="yes">
          <source>Heroes list: optionally selecting a hero</source>
          <target state="translated">ヒーローリスト：オプションでヒーローを選択する</target>
        </trans-unit>
        <trans-unit id="526386faf0ef30d00c69495be0b464de4aa1decd" translate="yes">
          <source>Hides the element by making it completely transparent and infinitely narrow, by setting its opacity and width to 0.</source>
          <target state="translated">不透明度と幅を0に設定して、要素を完全に透明にし、無限に狭くすることにより、要素を非表示にします。</target>
        </trans-unit>
        <trans-unit id="89da5a8471af66d6f336800d1e48f784de69b323" translate="yes">
          <source>Hiding an element is different from removing it with &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt;. For comparison, the following example shows how to control the visibility of an element with a &lt;a href=&quot;template-syntax#class-binding&quot;&gt;class&lt;/a&gt; or &lt;a href=&quot;template-syntax#style-binding&quot;&gt;style&lt;/a&gt; binding.</source>
          <target state="translated">要素を非表示にすることは、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; で要素を削除することとは異なります。 比較のために、次の例は、 &lt;a href=&quot;template-syntax#class-binding&quot;&gt;クラス&lt;/a&gt;または&lt;a href=&quot;template-syntax#style-binding&quot;&gt;スタイル&lt;/a&gt;バインディングを使用して要素の可視性を制御する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="8a3b1b147046025a15fb8a7690182f292845ab57" translate="yes">
          <source>Hierarchical injectors</source>
          <target state="translated">階層型インジェクター</target>
        </trans-unit>
        <trans-unit id="b544fd8897e805cb5efd919039294bee77b58063" translate="yes">
          <source>High level view</source>
          <target state="translated">高レベルのビュー</target>
        </trans-unit>
        <trans-unit id="b3e0a103daa9ae3f375b2654f0a482c7c0d36297" translate="yes">
          <source>Hook</source>
          <target state="translated">Hook</target>
        </trans-unit>
        <trans-unit id="1f938b440e9146fcac04f1ceca1a771e15ff6a3b" translate="yes">
          <source>Hook for manual bootstrapping of the application instead of using bootstrap array in @NgModule annotation.</source>
          <target state="translated">@NgModuleアノテーションでブートストラップ配列を使用する代わりに、アプリケーションの手動ブートストラップをフックします。</target>
        </trans-unit>
        <trans-unit id="3960ec4ca5fb5e5d8cdb2cc1c5121c003e426517" translate="yes">
          <source>Host</source>
          <target state="translated">Host</target>
        </trans-unit>
        <trans-unit id="900e91ae8e4d410ba8ad214c662d46c413ba8c8a" translate="yes">
          <source>Host to listen on.</source>
          <target state="translated">リッスンするホスト。</target>
        </trans-unit>
        <trans-unit id="854842ca941102874ac3fd35d9a644fe6a4e58d2" translate="yes">
          <source>HostBinding</source>
          <target state="translated">HostBinding</target>
        </trans-unit>
        <trans-unit id="04423f0c0fb006f39c47ae77e76519ec61dae9e9" translate="yes">
          <source>HostListener</source>
          <target state="translated">HostListener</target>
        </trans-unit>
        <trans-unit id="16d6f89a6d102237e8b5809f2f6a83253c134541" translate="yes">
          <source>Hosting an Angular app anywhere else</source>
          <target state="translated">他の場所でAngularアプリをホストする</target>
        </trans-unit>
        <trans-unit id="b2661e7c9fe866cee0abd12edc765c9ea4167169" translate="yes">
          <source>Hosting an Angular app on Firebase</source>
          <target state="translated">FirebaseでAngularアプリをホストする</target>
        </trans-unit>
        <trans-unit id="c9e203bd41e585a498a9ea3bfa7c58968ec8d5be" translate="yes">
          <source>Hosting the built project</source>
          <target state="translated">ビルドされたプロジェクトをホストする</target>
        </trans-unit>
        <trans-unit id="b2e4d2264a6740b74155a1ebd270d51ac74c7499" translate="yes">
          <source>Hour 0-23</source>
          <target state="translated">時間0-23</target>
        </trans-unit>
        <trans-unit id="e2e437b5f33c50fbf282a8b8ce3d5a4d0deeb077" translate="yes">
          <source>Hour 1-12</source>
          <target state="translated">時間1-12</target>
        </trans-unit>
        <trans-unit id="cd7d764988e4f76f3f7fbbaaa971d2513fb11bb0" translate="yes">
          <source>How &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; works</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; 仕組み</target>
        </trans-unit>
        <trans-unit id="983fbf13b55a5e7fb496619c191e81853401c3d8" translate="yes">
          <source>How &lt;code&gt;ngUpgrade&lt;/code&gt; Works</source>
          <target state="translated">&lt;code&gt;ngUpgrade&lt;/code&gt; の仕組み</target>
        </trans-unit>
        <trans-unit id="d6d941bd9de7fb7dc2069cff40c89a86c6b8c2dd" translate="yes">
          <source>How AOT works</source>
          <target state="translated">AOTの仕組み</target>
        </trans-unit>
        <trans-unit id="ff5ca3d4267bdd4688ef2f3810892f694a4f2ec9" translate="yes">
          <source>How a reference variable gets its value</source>
          <target state="translated">参照変数が値を取得する方法</target>
        </trans-unit>
        <trans-unit id="979c9d03c7fcc312615e96357da09f8be513691a" translate="yes">
          <source>How can I tell if an NgModule or service was previously loaded?</source>
          <target state="translated">NgModuleまたはサービスが以前にロードされたかどうかを確認するにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="9048d32b5da3d51d17fa1ee3d4c03154ff798961" translate="yes">
          <source>How do I restrict service scope to a module?</source>
          <target state="translated">サービススコープをモジュールに制限するにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="42da5511b4616e973fcfac7075b36f7d501b52f9" translate="yes">
          <source>How do you bind to a second property when you're already binding to the &lt;code&gt;appHighlight&lt;/code&gt; attribute name?</source>
          <target state="translated">&lt;code&gt;appHighlight&lt;/code&gt; 属性名に既にバインドしている場合、どのように2番目のプロパティにバインドしますか？</target>
        </trans-unit>
        <trans-unit id="511988e08b2a40201c02270364cefca596e7c32b" translate="yes">
          <source>How do you combat this problem? With asynchronous routing, which loads feature modules &lt;em&gt;lazily&lt;/em&gt;, on request. Lazy loading has multiple benefits.</source>
          <target state="translated">この問題にどのように対処しますか？ 要求に応じ&lt;em&gt;て&lt;/em&gt;フィーチャモジュールを&lt;em&gt;遅延的&lt;/em&gt;にロードする非同期ルーティング。 遅延読み込みには複数の利点があります。</target>
        </trans-unit>
        <trans-unit id="a416099edf7824be4ef297d434f0d54367f5e352" translate="yes">
          <source>How does Angular find components, directives, and pipes in a template?What is a</source>
          <target state="translated">Angularは、テンプレート内のコンポーネント、ディレクティブ、およびパイプをどのように検出しますか？</target>
        </trans-unit>
        <trans-unit id="3191620388b1773dd5d13b4c654d9f88a6f22136" translate="yes">
          <source>How does the target &lt;code&gt;HeroDetailComponent&lt;/code&gt; learn about that &lt;code&gt;id&lt;/code&gt;? Don't analyze the URL. Let the router do it.</source>
          <target state="translated">ターゲットの &lt;code&gt;HeroDetailComponent&lt;/code&gt; は、どのようにしてその &lt;code&gt;id&lt;/code&gt; 学習しますか？ URLを分析しないでください。 ルーターに実行させます。</target>
        </trans-unit>
        <trans-unit id="1dd6a17cb4033f4f74df1bb6912b8a28a8074084" translate="yes">
          <source>How it works</source>
          <target state="translated">使い方</target>
        </trans-unit>
        <trans-unit id="a1269b34a684f55e0b793348bbcd441f6ac9f34a" translate="yes">
          <source>How ngUpgrade Works</source>
          <target state="translated">ngUpgradeの仕組み</target>
        </trans-unit>
        <trans-unit id="b9f4e37b7f4ec8a20702b18e475d1c919dc443c6" translate="yes">
          <source>How preloading works</source>
          <target state="translated">プリロードの仕組み</target>
        </trans-unit>
        <trans-unit id="223c761d3efb8aa4fcdd8c630361b5e28186b485" translate="yes">
          <source>How the Language Service works</source>
          <target state="translated">言語サービスの仕組み</target>
        </trans-unit>
        <trans-unit id="1b8475727e660463a6a5ca3ce7a6ab63829de5ff" translate="yes">
          <source>How to handle a navigation request to the current URL. One of:</source>
          <target state="translated">現在のURLへのナビゲーション要求を処理する方法。 の一つ：</target>
        </trans-unit>
        <trans-unit id="3acd7184a15f7cd60ff8b0cb2f254e98af8fe7db" translate="yes">
          <source>How to handle missing translations for i18n.</source>
          <target state="translated">i18nで欠落している翻訳を処理する方法。</target>
        </trans-unit>
        <trans-unit id="a4312d2c2305c9665e2aa88c16af0276c80bbfb1" translate="yes">
          <source>How to handle query parameters in a router link. One of:</source>
          <target state="translated">ルーターリンクでクエリパラメーターを処理する方法。 の一つ：</target>
        </trans-unit>
        <trans-unit id="133736070cd8def498e352ae2671acf3d2603a1b" translate="yes">
          <source>How to handle query parameters in the router link for the next navigation. One of:</source>
          <target state="translated">次のナビゲーションのために、ルーターリンクでクエリパラメーターを処理する方法。 の一つ：</target>
        </trans-unit>
        <trans-unit id="a516bf86adc981bbb12eae05bdf591c9d762031d" translate="yes">
          <source>How to make a feature module</source>
          <target state="translated">機能モジュールの作成方法</target>
        </trans-unit>
        <trans-unit id="42d423686e07004d3ccb86759ad8206a78194665" translate="yes">
          <source>How to merge parameters, data, and resolved data from parent to child routes. One of:</source>
          <target state="translated">パラメーター、データ、および解決されたデータを親ルートから子ルートにマージする方法。 の一つ：</target>
        </trans-unit>
        <trans-unit id="ab680df21ca4ccde1eb27c6ee6427aabbfd91cc4" translate="yes">
          <source>How to use &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 使用方法</target>
        </trans-unit>
        <trans-unit id="271d720e4f07fc899b89ada24293400628fb4402" translate="yes">
          <source>How to use &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 使用方法</target>
        </trans-unit>
        <trans-unit id="2452bce6c068e1419f34d2c7498e5898f5e3f4a3" translate="yes">
          <source>How to write your own structural directive.</source>
          <target state="translated">独自の構造ディレクティブの作成方法。</target>
        </trans-unit>
        <trans-unit id="abfc475c30ad52628f2cdc20da996ccdb18abcc8" translate="yes">
          <source>How you provide services via an &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; (or &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt;) decorator determines their visibility. The following sections demonstrate &lt;code&gt;providers&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; along with ways to modify service visibility with &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; （または &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; ）デコレーターを介してサービスを提供する方法により、それらの可視性が決まります。 以下のセクションでは、 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; および@Host （）を使用してサービスの可視性を変更する方法とともに、 &lt;code&gt;providers&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; を示します 。</target>
        </trans-unit>
        <trans-unit id="3c06ea1a10cb3f7599812cd4dd0520ada6ed15d2" translate="yes">
          <source>How you provide this information depends upon whether you compile with the JIT compiler or the AOT compiler.</source>
          <target state="translated">この情報を提供する方法は、JITコンパイラでコンパイルするかAOTコンパイラでコンパイルするかによって異なります。</target>
        </trans-unit>
        <trans-unit id="42af694ff0648a4162e6e3bb0c6873e411523ff3" translate="yes">
          <source>However the template binding syntax will always use the Angular style, e.g. square brackets (&lt;code&gt;[...]&lt;/code&gt;) for property binding.</source>
          <target state="translated">ただし、テンプレートバインディング構文では、プロパティバインディングに角括弧（ &lt;code&gt;[...]&lt;/code&gt; ）などのAngularスタイルが常に使用されます。</target>
        </trans-unit>
        <trans-unit id="78384c3742fdf68b1246d1ffbeeb9846d7e95bf3" translate="yes">
          <source>However, a token doesn't have to be a class and even when it is a class, it doesn't have to be the same type as the returned object. That's the subject of the next section.</source>
          <target state="translated">ただし、トークンはクラスである必要はなく、クラスであっても、返されたオブジェクトと同じタイプである必要はありません。 それが次のセクションの主題です。</target>
        </trans-unit>
        <trans-unit id="b3116f3e696e3745d93dc36e6d542835460c30c1" translate="yes">
          <source>However, behind the scenes, Angular uses a logical view representation as follows when resolving injection requests:</source>
          <target state="translated">ただし、バックグラウンドで、Angularはインジェクションリクエストを解決するときに次のように論理ビュー表現を使用します。</target>
        </trans-unit>
        <trans-unit id="693f46cb5ca176639aee0593be73408376b61903" translate="yes">
          <source>However, certain JavaScript syntax is not allowed:</source>
          <target state="translated">ただし、特定のJavaScript構文は許可されていません。</target>
        </trans-unit>
        <trans-unit id="98c48d0fa6289215af7e49a79607c8e0ccd6333d" translate="yes">
          <source>However, if you run the tests in a &lt;strong&gt;non-CLI environment&lt;/strong&gt;, tests of this component may fail. For example, if you run the &lt;code&gt;BannerComponent&lt;/code&gt; tests in a web coding environment such as &lt;a href=&quot;https://plnkr.co/&quot;&gt;plunker&lt;/a&gt;, you'll see a message like this one:</source>
          <target state="translated">ただし、 &lt;strong&gt;非CLI環境&lt;/strong&gt;でテストを実行すると、このコンポーネントのテストが失敗する場合があります。 たとえば、 &lt;code&gt;BannerComponent&lt;/code&gt; などのWebコーディング環境でBannerComponentテストを実行すると、 次のようなメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="34e226b688a864f31651d20b9d5626cdbd2a322e" translate="yes">
          <source>However, in practice, Angular simply ignores two-way bindings to template variables. Starting in version 8, attempting to write to template variables is deprecated. In a future version, we will throw to indicate that the write is not supported.</source>
          <target state="translated">ただし、実際には、Angularはテンプレート変数への双方向バインディングを単に無視します。 バージョン8以降、テンプレート変数への書き込み試行は非推奨になりました。 将来のバージョンでは、書き込みがサポートされていないことを示すためにスローします。</target>
        </trans-unit>
        <trans-unit id="5f46d3bcb10089005d7612c3f9cc519539d288fe" translate="yes">
          <source>However, injecting the real service rarely works well as most dependent services are difficult to create and control.</source>
          <target state="translated">ただし、ほとんどの依存サービスの作成と制御は困難であるため、実際のサービスの注入はめったに機能しません。</target>
        </trans-unit>
        <trans-unit id="9233cd0b325f45f872324e3cd65f528e0634c2ca" translate="yes">
          <source>However, selective child animations can still be run on a disabled parent in one of the following ways:</source>
          <target state="translated">ただし、次のいずれかの方法で、選択した子アニメーションを無効な親で実行できます。</target>
        </trans-unit>
        <trans-unit id="29af858dd493651d68cc842edbeb89ea3c49cdf1" translate="yes">
          <source>However, testing a single use case is unlikely to explore the full range of a directive's capabilities. Finding and testing all components that use the directive is tedious, brittle, and almost as unlikely to afford full coverage.</source>
          <target state="translated">ただし、単一のユースケースをテストすることで、ディレクティブの機能をすべて検討することはほとんどありません。 ディレクティブを使用するすべてのコンポーネントを見つけてテストするのは退屈で脆く、完全にカバーする余裕はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="63c4f7ceb30a9aea5c8f145005bfe8df2bd99995" translate="yes">
          <source>However, the &lt;code&gt;AnimalService&lt;/code&gt;, which is provided in the &lt;code&gt;AppComponent&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array, is visible.</source>
          <target state="translated">ただし、 &lt;code&gt;AppComponent&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列で提供されるAnimalServiceは表示されます。</target>
        </trans-unit>
        <trans-unit id="409b0b30eacfefc2c2ac82f07ea268d1b0b9bb37" translate="yes">
          <source>However, this might feel like an unwelcome surprise if you expect the module's services to be visible only to the components declared by that feature module. If the &lt;code&gt;HeroModule&lt;/code&gt; provides the &lt;code&gt;HeroService&lt;/code&gt; and the root &lt;code&gt;AppModule&lt;/code&gt; imports &lt;code&gt;HeroModule&lt;/code&gt;, any class that knows the &lt;code&gt;HeroService&lt;/code&gt;&lt;em&gt;type&lt;/em&gt; can inject that service, not just the classes declared in the &lt;code&gt;HeroModule&lt;/code&gt;.</source>
          <target state="translated">ただし、モジュールのサービスがその機能モジュールによって宣言されたコンポーネントのみに表示されることを期待する場合、これは好ましくない驚きのように感じるかもしれません。 &lt;code&gt;HeroModule&lt;/code&gt; がHeroServiceを提供し、ルート &lt;code&gt;AppModule&lt;/code&gt; がHeroModuleをインポートする場合、 HeroModuleで宣言されたクラスだけでなく、 &lt;code&gt;HeroService&lt;/code&gt; &lt;em&gt;タイプ&lt;/em&gt;を知っている任意のクラスがそのサービスを注入できます。</target>
        </trans-unit>
        <trans-unit id="30edf6e204f52b61f2571aecc7c209f88b84ea1f" translate="yes">
          <source>However, this will work:</source>
          <target state="translated">ただし、これは機能します。</target>
        </trans-unit>
        <trans-unit id="d6af0af1a9e9d11d2d6ee59278094f54f71c5e1d" translate="yes">
          <source>However, to set &lt;em&gt;many&lt;/em&gt; inline styles at the same time, use the &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; directive.</source>
          <target state="translated">ただし、 &lt;em&gt;多くの&lt;/em&gt;インラインスタイルを同時に設定するには、 &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;NgStyle&lt;/a&gt;&lt;/code&gt; ディレクティブを使用します。</target>
        </trans-unit>
        <trans-unit id="d76129a2020266d4c676249304bb9a0e0d5fd584" translate="yes">
          <source>However, when Angular expands the shorthand syntax, it creates another &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; tag, with &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ngif#ngIfElse&quot;&gt;ngIfElse&lt;/a&gt;&lt;/code&gt; directives. The anchor element containing the template for the &quot;then&quot; clause becomes the content of this unlabeled &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">ただし、Angularが短縮構文を展開すると、 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ngif#ngIfElse&quot;&gt;ngIfElse&lt;/a&gt;&lt;/code&gt; ディレクティブを使用して別の &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; タグが作成されます。 「then」句のテンプレートを含むアンカー要素は、このラベルなしの &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; タグのコンテンツになります。</target>
        </trans-unit>
        <trans-unit id="88d996735fae87b45148458d37047b283d694373" translate="yes">
          <source>However, with &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;itemForm&lt;/code&gt; is a reference to the &lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt; directive with the ability to track the value and validity of every control in the form.</source>
          <target state="translated">ただし、 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; では、 &lt;code&gt;itemForm&lt;/code&gt; は、フォーム内のすべてのコントロールの値と有効性を追跡する機能を持つ&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;ディレクティブへの参照です。</target>
        </trans-unit>
        <trans-unit id="4f61b26fdb00998634e95b429fc277a6dcf31568" translate="yes">
          <source>However, you almost always inject services into application classes using Angular dependency injection and you should have tests that reflect that usage pattern. Angular testing utilities make it easy to investigate how injected services behave.</source>
          <target state="translated">ただし、ほとんどの場合、Angular依存性注入を使用してアプリケーションクラスにサービスを注入するため、その使用パターンを反映したテストが必要です。 Angularテストユーティリティを使用すると、注入されたサービスの動作を簡単に調査できます。</target>
        </trans-unit>
        <trans-unit id="8e1a2e9c4edb38cc5f33c8a92e731a540c8a4e2e" translate="yes">
          <source>However, you might be troubled by the fact that the real service doesn't quite behave this way. The real service sends requests to a remote server. A server takes time to respond and the response certainly won't be available immediately as in the previous two tests.</source>
          <target state="translated">ただし、実際のサービスがこのように動作しないという事実に悩まされるかもしれません。 実際のサービスは、要求をリモートサーバーに送信します。 サーバーは応答に時間がかかり、前の2つのテストのように応答がすぐに利用可能になることは確かにありません。</target>
        </trans-unit>
        <trans-unit id="07028f666590e3943a2a7158467fb00b0a46d178" translate="yes">
          <source>HttpBackend</source>
          <target state="translated">HttpBackend</target>
        </trans-unit>
        <trans-unit id="74f0d45346780c9a2f7d9ba9c77d099f9ae02d4f" translate="yes">
          <source>HttpClient</source>
          <target state="translated">HttpClient</target>
        </trans-unit>
        <trans-unit id="3dfdf9e078469afa983319e9dbcfec4b07dc38ed" translate="yes">
          <source>HttpClientJsonpModule</source>
          <target state="translated">HttpClientJsonpModule</target>
        </trans-unit>
        <trans-unit id="601f075dcbf43fc07aee8d1626b1bb0090dc3e86" translate="yes">
          <source>HttpClientModule</source>
          <target state="translated">HttpClientModule</target>
        </trans-unit>
        <trans-unit id="ca61ddc922f1c4bb126860b1fcceb0121f1e72b7" translate="yes">
          <source>HttpClientTestingModule</source>
          <target state="translated">HttpClientTestingModule</target>
        </trans-unit>
        <trans-unit id="b0e4475f7bcbcf9e3bfc2d2b8cb35a87cd9da63f" translate="yes">
          <source>HttpClientXsrfModule</source>
          <target state="translated">HttpClientXsrfModule</target>
        </trans-unit>
        <trans-unit id="31b51a48c6488640e3d7d12f81484cc7692bc954" translate="yes">
          <source>HttpDownloadProgressEvent</source>
          <target state="translated">HttpDownloadProgressEvent</target>
        </trans-unit>
        <trans-unit id="631eed221a0a5e1227ee747dedc56a6e5cd04856" translate="yes">
          <source>HttpErrorResponse</source>
          <target state="translated">HttpErrorResponse</target>
        </trans-unit>
        <trans-unit id="b601dad14c6ceb3e36baf63c5302eab72656db35" translate="yes">
          <source>HttpEvent</source>
          <target state="translated">HttpEvent</target>
        </trans-unit>
        <trans-unit id="a25e2886e345f200e99c43296e545f2ec17e87d9" translate="yes">
          <source>HttpEventType</source>
          <target state="translated">HttpEventType</target>
        </trans-unit>
        <trans-unit id="34a6f13d629874a5d2af931439592d54346c6458" translate="yes">
          <source>HttpHandler</source>
          <target state="translated">HttpHandler</target>
        </trans-unit>
        <trans-unit id="13819588a41868e3eb12c563e1b5ce196d242ce8" translate="yes">
          <source>HttpHeaderResponse</source>
          <target state="translated">HttpHeaderResponse</target>
        </trans-unit>
        <trans-unit id="47652085284b8b02e10d108308cf4fafe0936706" translate="yes">
          <source>HttpHeaders</source>
          <target state="translated">HttpHeaders</target>
        </trans-unit>
        <trans-unit id="8184f8a7796e7947f825158c72ba880534cdf906" translate="yes">
          <source>HttpInterceptor</source>
          <target state="translated">HttpInterceptor</target>
        </trans-unit>
        <trans-unit id="306e8873cd28a3d318c8259a4ca9675c917ea59c" translate="yes">
          <source>HttpParameterCodec</source>
          <target state="translated">HttpParameterCodec</target>
        </trans-unit>
        <trans-unit id="f0370ec95bcf0338af85d0d9ee233cbf9b147f0e" translate="yes">
          <source>HttpParams</source>
          <target state="translated">HttpParams</target>
        </trans-unit>
        <trans-unit id="49286b34daf58a4360367b78695303f96afd888f" translate="yes">
          <source>HttpProgressEvent</source>
          <target state="translated">HttpProgressEvent</target>
        </trans-unit>
        <trans-unit id="876884817603f1994832b258f47c862ce8f79db8" translate="yes">
          <source>HttpRequest</source>
          <target state="translated">HttpRequest</target>
        </trans-unit>
        <trans-unit id="98a81a35f1584d5f5070065dbea832e61fb0bf0f" translate="yes">
          <source>HttpResponse</source>
          <target state="translated">HttpResponse</target>
        </trans-unit>
        <trans-unit id="41598c5b775fa5c84b8eee569b34c38dcacdd477" translate="yes">
          <source>HttpResponseBase</source>
          <target state="translated">HttpResponseBase</target>
        </trans-unit>
        <trans-unit id="91259ca5dbf5ee0c7be0ec1ecec66070797276f8" translate="yes">
          <source>HttpSentEvent</source>
          <target state="translated">HttpSentEvent</target>
        </trans-unit>
        <trans-unit id="0ec2efbe19ba7e3ef035c35046c8d7e07d7af284" translate="yes">
          <source>HttpTestingController</source>
          <target state="translated">HttpTestingController</target>
        </trans-unit>
        <trans-unit id="2594ee986b764be8ea778008c933b096d5b6bf37" translate="yes">
          <source>HttpUploadProgressEvent</source>
          <target state="translated">HttpUploadProgressEvent</target>
        </trans-unit>
        <trans-unit id="97816692d8c249075784ff4511d32cb3200d0fae" translate="yes">
          <source>HttpUrlEncodingCodec</source>
          <target state="translated">HttpUrlEncodingCodec</target>
        </trans-unit>
        <trans-unit id="0aa97445f8cf4a27064f48a9964e2e2e5accb9b5" translate="yes">
          <source>HttpUserEvent</source>
          <target state="translated">HttpUserEvent</target>
        </trans-unit>
        <trans-unit id="d81289e5fca4f39bab401bd23f2b00141a74346a" translate="yes">
          <source>HttpXhrBackend</source>
          <target state="translated">HttpXhrBackend</target>
        </trans-unit>
        <trans-unit id="7869711a68093e11cb599a1fe14c17baa6ba3dd6" translate="yes">
          <source>HttpXsrfTokenExtractor</source>
          <target state="translated">HttpXsrfTokenExtractor</target>
        </trans-unit>
        <trans-unit id="801f2493757c72ca45a5c235d90ad1ca581f7755" translate="yes">
          <source>Human-readable format of exponential. Example: 1.2x103</source>
          <target state="translated">人間が読める形式の指数。 例：1.2x103</target>
        </trans-unit>
        <trans-unit id="6ed0186e952f0fc2ad82383289a170a0c73f97bd" translate="yes">
          <source>I18nPluralPipe</source>
          <target state="translated">I18nPluralPipe</target>
        </trans-unit>
        <trans-unit id="abc1f616112daf4b387de1e6658364fdc11d58ba" translate="yes">
          <source>I18nSelectPipe</source>
          <target state="translated">I18nSelectPipe</target>
        </trans-unit>
        <trans-unit id="843165076cf3bd0349681e4beeed1c6874126cc4" translate="yes">
          <source>ID of the option element</source>
          <target state="translated">オプション要素のID</target>
        </trans-unit>
        <trans-unit id="9ff31bb53dfc2bff233e882d367714fba682d7dc" translate="yes">
          <source>IE</source>
          <target state="translated">IE</target>
        </trans-unit>
        <trans-unit id="e99eab8a5ebe9abaa8723fd9f1ddbf2c7d1a25dc" translate="yes">
          <source>IE 10, IE 11</source>
          <target state="translated">IE 10、IE 11</target>
        </trans-unit>
        <trans-unit id="09500d66bc1c080dec280867c70d89f272b9554c" translate="yes">
          <source>IE 11</source>
          <target state="translated">IE 11</target>
        </trans-unit>
        <trans-unit id="8e9963ae494f00fdfda1290439172d2aa12514d1" translate="yes">
          <source>IE 9</source>
          <target state="translated">IE 9</target>
        </trans-unit>
        <trans-unit id="8c7d126d16997b97355174dcda4c6bb9cf8e2b48" translate="yes">
          <source>IE Mobile</source>
          <target state="translated">IEモバイル</target>
        </trans-unit>
        <trans-unit id="60b82a5cb94fb01631398c058b59f037ae77f375" translate="yes">
          <source>IIFE</source>
          <target state="translated">IIFE</target>
        </trans-unit>
        <trans-unit id="3449c1aa01ef7a63b3d78a29f229155083bed4a6" translate="yes">
          <source>INITIAL_CONFIG</source>
          <target state="translated">INITIAL_CONFIG</target>
        </trans-unit>
        <trans-unit id="5157ac1ff7f65b428bec7bef08cc132329b63c6d" translate="yes">
          <source>ISO8601 basic format</source>
          <target state="translated">ISO8601基本フォーマット</target>
        </trans-unit>
        <trans-unit id="39097fa6a5275ab54197cd03bbe174e778b7eb1c" translate="yes">
          <source>ISO8601 extended format + Z indicator for offset 0 (= XXXXX)</source>
          <target state="translated">ISO8601拡張フォーマット+オフセット0のZインジケータ（= XXXXX）</target>
        </trans-unit>
        <trans-unit id="63c464b08623002f37661266e75b01e33a159ea0" translate="yes">
          <source>Ideally, a component's job is to enable the user experience and nothing more. A component should present properties and methods for data binding, in order to mediate between the view (rendered by the template) and the application logic (which often includes some notion of a &lt;em&gt;model&lt;/em&gt;).</source>
          <target state="translated">理想的には、コンポーネントの仕事はユーザーエクスペリエンスを実現することであり、それ以上のことはできません。 コンポーネントは、ビュー（テンプレートによってレンダリングされる）とアプリケーションロジック（多くの場合、 &lt;em&gt;モデルの&lt;/em&gt;概念を含む）を仲介するために、データバインディングのプロパティとメソッドを提示する必要があります。</target>
        </trans-unit>
        <trans-unit id="273acb31b215d9e49019afd7c3e7cf8d4a83de16" translate="yes">
          <source>Ideally, if an application isn't injecting a service, Angular shouldn't include it in the final output. However, Angular has to be able to identify at build time whether the app will require the service or not. Because it's always possible to inject a service directly using &lt;code&gt;injector.get(Service)&lt;/code&gt;, Angular can't identify all of the places in your code where this injection could happen, so it has no choice but to include the service in the injector. Thus, services in the NgModule &lt;code&gt;providers&lt;/code&gt; array or at component level are not tree-shakable.</source>
          <target state="translated">理想的には、アプリケーションがサービスを注入しない場合、Angularはそれを最終出力に含めるべきではありません。 ただし、Angularはビルド時にアプリがサービスを必要とするかどうかを識別できる必要があります。 &lt;code&gt;injector.get(Service)&lt;/code&gt; を使用してサービスを直接インジェクトすることは常に可能であるため、Angularはコード内でこのインジェクションが発生する可能性のあるすべての場所を特定できないため、インジェクターにサービスを含める以外に選択肢はありません。 したがって、NgModule &lt;code&gt;providers&lt;/code&gt; 配列またはコンポーネントレベルのサービスはツリーシェーク可能ではありません。</target>
        </trans-unit>
        <trans-unit id="c0c74f9c69e219a901e496db780fa7e03049a871" translate="yes">
          <source>Ideally, users should be able to click a link to navigate rather than pasting a route URL into the address bar.</source>
          <target state="translated">理想的には、ユーザーはルートURLをアドレスバーに貼り付けるのではなく、リンクをクリックしてナビゲートできる必要があります。</target>
        </trans-unit>
        <trans-unit id="06b6ace8ca3f18249e8ba4ea9090c0f34564ce1c" translate="yes">
          <source>Identifier</source>
          <target state="translated">Identifier</target>
        </trans-unit>
        <trans-unit id="f58ce3d35d93d2140b71abc0fa1b54986940d04d" translate="yes">
          <source>Identifies and handles a given HTTP request.</source>
          <target state="translated">特定のHTTP要求を識別して処理します。</target>
        </trans-unit>
        <trans-unit id="faa69bd85cc69080cb6a8a871ae2448b19bdf3da" translate="yes">
          <source>Identifies and handles a given JSONP request.</source>
          <target state="translated">特定のJSONP要求を識別して処理します。</target>
        </trans-unit>
        <trans-unit id="dee8349d1c84482e40f15df8442baac4ca99ef95" translate="yes">
          <source>Identifies requests with the method JSONP and shifts them to the &lt;code&gt;&lt;a href=&quot;http/jsonpclientbackend&quot;&gt;JsonpClientBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メソッドJSONPでリクエストを識別し、それらを &lt;code&gt;&lt;a href=&quot;http/jsonpclientbackend&quot;&gt;JsonpClientBackend&lt;/a&gt;&lt;/code&gt; にシフトします。</target>
        </trans-unit>
        <trans-unit id="f8df9c229b309d13b4e14007cc922a7bc063af20" translate="yes">
          <source>Identifies requests with the method JSONP and shifts them to the &lt;code&gt;&lt;a href=&quot;jsonpclientbackend&quot;&gt;JsonpClientBackend&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メソッドJSONPでリクエストを識別し、それらを &lt;code&gt;&lt;a href=&quot;jsonpclientbackend&quot;&gt;JsonpClientBackend&lt;/a&gt;&lt;/code&gt; にシフトします。</target>
        </trans-unit>
        <trans-unit id="839e3114e3b9d3a3fa48867a14c4e9afe0357710" translate="yes">
          <source>Identifies the call or event that triggered the navigation. An &lt;code&gt;imperative&lt;/code&gt; trigger is a call to &lt;code&gt;router.navigateByUrl()&lt;/code&gt; or &lt;code&gt;router.navigate()&lt;/code&gt;.</source>
          <target state="translated">ナビゲーションをトリガーした呼び出しまたはイベントを識別します。 &lt;code&gt;imperative&lt;/code&gt; トリガーは、 &lt;code&gt;router.navigateByUrl()&lt;/code&gt; または &lt;code&gt;router.navigate()&lt;/code&gt; 呼び出しです。</target>
        </trans-unit>
        <trans-unit id="38af51b71aa8062ad05f52bc1d4222fe545ab1aa" translate="yes">
          <source>Identify</source>
          <target state="translated">Identify</target>
        </trans-unit>
        <trans-unit id="e4f148f2d6935d4ae76200aaec633ed31b1033b2" translate="yes">
          <source>Identity reference</source>
          <target state="translated">アイデンティティ参照</target>
        </trans-unit>
        <trans-unit id="f24e9c9588c68667b970bc698f5d8988ec03b9be" translate="yes">
          <source>Idle task queue</source>
          <target state="translated">アイドルタスクキュー</target>
        </trans-unit>
        <trans-unit id="6bb4d315363a95a4fbf146f2054fbe340f1c9487" translate="yes">
          <source>If &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the view still renders but the displayed value is blank; you see only &quot;The item name is:&quot; with nothing after it.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; の場合、ビューは引き続きレンダリングされますが、表示される値は空白です。 「アイテム名は：」のみが表示され、その後には何も表示されません。</target>
        </trans-unit>
        <trans-unit id="6da6a54b219d1bf81b2cc66cad7dd0e7ddd6117a" translate="yes">
          <source>If &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; is the default &lt;code&gt;&lt;a href=&quot;../jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt;, you can pass a type interface for the resulting object as a type parameter to the call.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; がデフォルトの &lt;code&gt;&lt;a href=&quot;../jsonpipe&quot;&gt;json&lt;/a&gt;&lt;/code&gt; である場合、結果のオブジェクトの型インターフェースを型パラメーターとして呼び出しに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="20046da8dd9cbe89cc7285da01207f6baa79e09b" translate="yes">
          <source>If &lt;code&gt;enabled&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; in the given options, the module will behave as if service workers are not supported by the browser, and the service worker will not be registered.</source>
          <target state="translated">指定されたオプションで &lt;code&gt;enabled&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されている場合、モジュールはブラウザーでService Workerがサポートされていないかのように動作し、Service Workerは登録されません。</target>
        </trans-unit>
        <trans-unit id="e98a50040a0048fe1d6d721d215eaf87a57c6337" translate="yes">
          <source>If &lt;code&gt;ignoreCancelled&lt;/code&gt; is not set (the default), &lt;code&gt;verify()&lt;/code&gt; will also fail if cancelled requests were not explicitly matched.</source>
          <target state="translated">&lt;code&gt;ignoreCancelled&lt;/code&gt; が設定されていない場合（デフォルト）、キャンセルされたリクエストが明示的に一致しなかった場合、 &lt;code&gt;verify()&lt;/code&gt; も失敗します。</target>
        </trans-unit>
        <trans-unit id="88c7c960113eaa483cbd792b988036fe861c77b1" translate="yes">
          <source>If &lt;code&gt;resourcesOutputPath&lt;/code&gt; or &lt;code&gt;assets&lt;/code&gt; paths are modified after the generation of configuration file, you need to change the paths manually in &lt;code&gt;ngsw-config.json&lt;/code&gt;.</source>
          <target state="translated">構成ファイルの生成後に &lt;code&gt;resourcesOutputPath&lt;/code&gt; または &lt;code&gt;assets&lt;/code&gt; パスが変更された場合、 &lt;code&gt;ngsw-config.json&lt;/code&gt; でパスを手動で変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="2c26dcf1ae594af2316d44c7bd3b0f361e602408" translate="yes">
          <source>If Angular doesn't find the provider in any &lt;code&gt;ElementInjector&lt;/code&gt;s, it goes back to the element where the request originated and looks in the &lt;code&gt;ModuleInjector&lt;/code&gt; hierarchy. If Angular still doesn't find the provider, it throws an error.</source>
          <target state="translated">Angularが &lt;code&gt;ElementInjector&lt;/code&gt; でプロバイダーを見つけられない場合、リクエストが発生した要素に戻り、 &lt;code&gt;ModuleInjector&lt;/code&gt; 階層を調べます。 それでもAngularがプロバイダーを見つけられない場合、エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="7e29b3f5e2dff7dd76052d8ccd8eddda8abe0ae1" translate="yes">
          <source>If AnimationBuilder is used, enables scrubbing support for IE/Edge and Safari. (Chrome and Firefox support this natively).</source>
          <target state="translated">AnimationBuilderを使用する場合、IE / EdgeおよびSafariのスクラブサポートを有効にします。 （ChromeとFirefoxはこれをネイティブにサポートしています）。</target>
        </trans-unit>
        <trans-unit id="41891637b47b87d8458f07c4a6cafe2c7fdb3d2b" translate="yes">
          <source>If NgModule A provides a service for token 'X' and imports an NgModule B that also provides a service for token 'X', then NgModule A's service definition &quot;wins&quot;.</source>
          <target state="translated">NgModule Aがトークン 'X'のサービスを提供し、トークン 'X'のサービスも提供するNgModule Bをインポートすると、NgModule Aのサービス定義が「勝ち」ます。</target>
        </trans-unit>
        <trans-unit id="c1eecfae70b492bc24007ffa2294728a9dfa495c" translate="yes">
          <source>If a cachable request is found in the cache, the interceptor returns an &lt;code&gt;of()&lt;/code&gt;&lt;em&gt;observable&lt;/em&gt; with the cached response, by-passing the &lt;code&gt;next&lt;/code&gt; handler (and all other interceptors downstream).</source>
          <target state="translated">キャッシュ内にキャッシュ可能なリクエストが見つかると、インターセプターは &lt;code&gt;next&lt;/code&gt; ハンドラー（および他のすべてのインターセプターダウンストリーム）をバイパスして、キャッシュされた応答とともに&lt;em&gt;オブザーバブル&lt;/em&gt; &lt;code&gt;of()&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="a557a16e0123df7fbc078703591e93ef301867af" translate="yes">
          <source>If a cachable request is not in cache, the code calls &lt;code&gt;sendRequest&lt;/code&gt;.</source>
          <target state="translated">キャッシュ可能なリクエストがキャッシュにない場合、コードは &lt;code&gt;sendRequest&lt;/code&gt; を呼び出します 。</target>
        </trans-unit>
        <trans-unit id="25a21150a7b49171680b296303c8c3068307fd81" translate="yes">
          <source>If a component isn't an &lt;em&gt;entry component&lt;/em&gt; and isn't found in a template, the tree shaker will throw it away. So, it's best to add only the components that are truly entry components to help keep your app as trim as possible.</source>
          <target state="translated">コンポーネントが&lt;em&gt;エントリコンポーネント&lt;/em&gt;ではなく、テンプレートで見つからない場合、ツリーシェーカーはそれを破棄します。 そのため、アプリをできるだけトリムに保つために、真のエントリコンポーネントであるコンポーネントのみを追加するのが最善です。</target>
        </trans-unit>
        <trans-unit id="82977af04a1be023e2632c7ce2dc1d6a584c85e0" translate="yes">
          <source>If a component isn't an &lt;em&gt;entry component&lt;/em&gt; or wasn't found in a template, the compiler omits it.</source>
          <target state="translated">コンポーネントが&lt;em&gt;エントリ&lt;/em&gt;コンポーネントではない場合、またはテンプレートで見つからなかった場合、コンパイラはそれを省略します。</target>
        </trans-unit>
        <trans-unit id="928fd4fa526ed6eda7f59b8933282d6e07b0b85b" translate="yes">
          <source>If a component, directive, or pipe belongs to a module in the &lt;code&gt;imports&lt;/code&gt; array, ​&lt;em&gt;don't&lt;/em&gt;​ re-declare it in the &lt;code&gt;declarations&lt;/code&gt; array. If you wrote it and it should belong to this module, ​&lt;em&gt;do&lt;/em&gt;​ declare it in the &lt;code&gt;declarations&lt;/code&gt; array.</source>
          <target state="translated">コンポーネント、ディレクティブ、またはパイプが &lt;code&gt;imports&lt;/code&gt; 配列のモジュールに属している場合は、 &lt;code&gt;declarations&lt;/code&gt; 配列で再宣言し&lt;em&gt;ない&lt;/em&gt;でください。 あなたがそれを書いて、それがこのモジュールに属するべきなら、 &lt;code&gt;declarations&lt;/code&gt; 配列で宣言してください。</target>
        </trans-unit>
        <trans-unit id="5412001a6342f943d1164b11e4f80c199052baef" translate="yes">
          <source>If a library doesn't have typings available at &lt;code&gt;@types/&lt;/code&gt;, you can still use it by manually adding typings for it. To do this:</source>
          <target state="translated">ライブラリに &lt;code&gt;@types/&lt;/code&gt; で使用できるタイピングがない場合でも、手動でタイピングを追加して使用できます。 これをする：</target>
        </trans-unit>
        <trans-unit id="5b23cd84551a7f7a976d6aeb6c17b5809a2ed511" translate="yes">
          <source>If a matching request has been made, fail with an error message including the given request description, if any.</source>
          <target state="translated">一致する要求が行われた場合、指定された要求の説明（ある場合）を含むエラーメッセージで失敗します。</target>
        </trans-unit>
        <trans-unit id="37dfd42ae1c031038225c47cb260140e0566ea26" translate="yes">
          <source>If a module defines both providers and declarations (components, directives, pipes), then loading the module in multiple feature modules would duplicate the registration of the service. This could result in multiple service instances and the service would no longer behave as a singleton.</source>
          <target state="translated">モジュールがプロバイダーと宣言（コンポーネント、ディレクティブ、パイプ）の両方を定義する場合、モジュールを複数の機能モジュールにロードすると、サービスの登録が複製されます。 これにより、複数のサービスインスタンスが発生し、サービスがシングルトンとして動作しなくなります。</target>
        </trans-unit>
        <trans-unit id="153c1d112fedc7715f021056fb6893af4681c150" translate="yes">
          <source>If a particular file fails validation, the Angular service worker attempts to re-fetch the content using a &quot;cache-busting&quot; URL parameter to eliminate the effects of browser or intermediate caching. If that content also fails validation, the service worker considers the entire version of the app to be invalid and it stops serving the app. If necessary, the service worker enters a safe mode where requests fall back on the network, opting not to use its cache if the risk of serving invalid, broken, or outdated content is high.</source>
          <target state="translated">特定のファイルの検証に失敗すると、Angular Service Workerは「キャッシュ無効化」URLパラメーターを使用してコンテンツの再取得を試み、ブラウザーまたは中間キャッシュの影響を排除します。 そのコンテンツも検証に失敗した場合、サービスワーカーはアプリのバージョン全体が無効であると見なし、アプリの提供を停止します。 必要に応じて、サービスワーカーはセーフモードに入り、リクエストはネットワーク上でフォールバックし、無効なコンテンツ、破損したコンテンツ、または古いコンテンツを提供するリスクが高い場合、キャッシュを使用しないことを選択します。</target>
        </trans-unit>
        <trans-unit id="772ddfa5b7d68e2c32169f0370cc73c59e176504" translate="yes">
          <source>If a previous search request is still &lt;em&gt;in-flight&lt;/em&gt; (as when the network connection is poor), it cancels that request and sends a new one.</source>
          <target state="translated">以前の検索要求がまだ実行&lt;em&gt;中の&lt;/em&gt;場合（ネットワーク接続が不十分な場合など）、その要求はキャンセルされ、新しい要求が送信されます。</target>
        </trans-unit>
        <trans-unit id="b53118bae5db34ffb1b4cf25da459ef342963d97" translate="yes">
          <source>If a provider cannot be configured in this way (perhaps because it has no sensible default value), then register application-wide providers in the root &lt;code&gt;AppModule&lt;/code&gt;, not in the &lt;code&gt;AppComponent&lt;/code&gt;.</source>
          <target state="translated">プロバイダーをこの方法で構成できない場合（おそらく賢明なデフォルト値がないため）、アプリケーション全体のプロバイダーを &lt;code&gt;AppModule&lt;/code&gt; ではなくルートAppModuleに登録します。</target>
        </trans-unit>
        <trans-unit id="7eb25f225ddf9c958a4a310cf508da2c8b8d3cae" translate="yes">
          <source>If a region of the DOM (or the entire application) has its animations disabled, the animation trigger callbacks still fire, but for zero seconds. When the callback fires, it provides an instance of an &lt;code&gt;&lt;a href=&quot;animationevent&quot;&gt;AnimationEvent&lt;/a&gt;&lt;/code&gt;. If animations are disabled, the &lt;code&gt;.disabled&lt;/code&gt; flag on the event is true.</source>
          <target state="translated">DOMの領域（またはアプリケーション全体）でアニメーションが無効になっている場合、アニメーショントリガーコールバックはゼロ秒だけ起動します。 コールバックが発生すると、 &lt;code&gt;&lt;a href=&quot;animationevent&quot;&gt;AnimationEvent&lt;/a&gt;&lt;/code&gt; のインスタンスを提供します。 アニメーションが無効になっている場合、イベントの &lt;code&gt;.disabled&lt;/code&gt; フラグはtrueです。</target>
        </trans-unit>
        <trans-unit id="ed6f22701aa659882520ee8999e4722594b619bd" translate="yes">
          <source>If a route is protected by &lt;code&gt;&lt;a href=&quot;route#canLoad&quot;&gt;canLoad&lt;/a&gt;&lt;/code&gt; guards, the preloaded will not load it.</source>
          <target state="translated">ルートが &lt;code&gt;&lt;a href=&quot;route#canLoad&quot;&gt;canLoad&lt;/a&gt;&lt;/code&gt; ガードによって保護されている場合、プリロードされたルートはロードしません。</target>
        </trans-unit>
        <trans-unit id="a9439dbdfd08109c95a98837df7b16acd71a7577" translate="yes">
          <source>If a synchronous error happens it will be rethrown and not reported via &lt;code&gt;onError&lt;/code&gt;.</source>
          <target state="translated">同期エラーが発生した場合、それは再スローされ、 &lt;code&gt;onError&lt;/code&gt; を介して報告されません。</target>
        </trans-unit>
        <trans-unit id="00daec30c96e47a317ac6daa4260ebf84859c21c" translate="yes">
          <source>If a trigger binding value is a Boolean, it can be matched using a transition expression that compares true and false or 1 and 0. For example:</source>
          <target state="translated">トリガーバインディング値がブール値の場合、trueとfalseまたは1と0を比較する遷移式を使用して一致させることができます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="126cac6a6045858048bd7e923d7b34e4f134314c" translate="yes">
          <source>If a trigger contains a boolean value as a binding value, then this value can be matched using a &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; expression that compares &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">トリガーにブール値としてブール値が含まれる場合、 &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;false&lt;/code&gt; 、または &lt;code&gt;1&lt;/code&gt; と &lt;code&gt;0&lt;/code&gt; を比較する &lt;code&gt;&lt;a href=&quot;../api/animations/transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 式を使用してこの値を照合できます。</target>
        </trans-unit>
        <trans-unit id="e50e34462749ac65c8cf4317ed5676213f6e2090" translate="yes">
          <source>If a user enters that URL into the browser address bar, the router should recognize the pattern and go to the same &quot;Magneta&quot; detail view.</source>
          <target state="translated">ユーザーがそのURLをブラウザのアドレスバーに入力すると、ルーターはパターンを認識し、同じ「マグネタ」詳細ビューに移動する必要があります。</target>
        </trans-unit>
        <trans-unit id="f6919a849126284f296a0ff57039a9cf7b8e4a82" translate="yes">
          <source>If an expression is not foldable, the collector writes it to &lt;code&gt;.metadata.json&lt;/code&gt; as an &lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt; for the compiler to resolve.</source>
          <target state="translated">式が折りたたみ可能でない場合、コレクターはコンパイラが解決する&lt;a href=&quot;https://en.wikipedia.org/wiki/Abstract_syntax_tree&quot;&gt;AST&lt;/a&gt;として &lt;code&gt;.metadata.json&lt;/code&gt; にそれを書き込みます。</target>
        </trans-unit>
        <trans-unit id="3776c3775f99b8ca1455c46376b27adc6b1e4aab" translate="yes">
          <source>If an expression uses unsupported syntax, the collector writes an error node to the &lt;code&gt;.metadata.json&lt;/code&gt; file. The compiler later reports the error if it needs that piece of metadata to generate the application code.</source>
          <target state="translated">式がサポートされていない構文を使用する場合、コレクターは &lt;code&gt;.metadata.json&lt;/code&gt; ファイルにエラーノードを書き込みます。 コンパイラは、アプリケーションコードを生成するためにそのメタデータが必要な場合、エラーを後で報告します。</target>
        </trans-unit>
        <trans-unit id="2c1ea63fe3e751750d668900003cfb0b2fc2138e" translate="yes">
          <source>If any of the passed-in parameter values are missing from this call, the default values are used. If one or more parameter values are missing before a step is animated, &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; throws an error.</source>
          <target state="translated">渡されたパラメーター値のいずれかがこの呼び出しから欠落している場合、デフォルト値が使用されます。 ステップがアニメーション化される前に1つ以上のパラメーター値が欠落している場合、 &lt;code&gt;&lt;a href=&quot;useanimation&quot;&gt;useAnimation&lt;/a&gt;()&lt;/code&gt; はエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="8297839eeda1d6ac628fdcf349ff15b398e9f7ec" translate="yes">
          <source>If any requests are outstanding, fail with an error message indicating which requests were not handled.</source>
          <target state="translated">未処理の要求がある場合、処理されなかった要求を示すエラーメッセージで失敗します。</target>
        </trans-unit>
        <trans-unit id="1fe08f5539ac4bc33409018c8e77a3cf182d48db" translate="yes">
          <source>If desired, open the Output window (&lt;code&gt;View&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt;) to watch the npm commands execute.</source>
          <target state="translated">必要に応じて、出力ウィンドウ（ &lt;code&gt;View&lt;/code&gt; | [ &lt;code&gt;&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; ）を開いて、npmコマンドの実行を監視します。</target>
        </trans-unit>
        <trans-unit id="a7351ddc6a7cd3e167d6abe4319ab53c493d68c8" translate="yes">
          <source>If don't add the interface for the script-defined extension, your IDE shows an error:</source>
          <target state="translated">スクリプト定義の拡張機能のインターフェイスを追加しないと、IDEにエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="ac260a05c0b8dad2568206edbc95161f250ef807" translate="yes">
          <source>If false, will error out if installed packages are incompatible with the update.</source>
          <target state="translated">falseの場合、インストールされたパッケージが更新と互換性がない場合はエラーになります。</target>
        </trans-unit>
        <trans-unit id="f032cf6d2b03e78a246739a8908cb417e0108e0e" translate="yes">
          <source>If forms are a central part of your application, scalability is very important. Being able to reuse form models across components is critical.</source>
          <target state="translated">フォームがアプリケーションの中心部分である場合、スケーラビリティは非常に重要です。 コンポーネント間でフォームモデルを再利用できることが重要です。</target>
        </trans-unit>
        <trans-unit id="534d625f4fac3eff1e93003d98e3e44e789a243b" translate="yes">
          <source>If it doesn't return a valid &lt;code&gt;Crisis&lt;/code&gt;, return an empty &lt;code&gt;Observable&lt;/code&gt;, canceling the previous in-flight navigation to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; and navigate the user back to the &lt;code&gt;CrisisListComponent&lt;/code&gt;. The update resolver service looks like this:</source>
          <target state="translated">有効な &lt;code&gt;Crisis&lt;/code&gt; を返さない場合は、空の &lt;code&gt;Observable&lt;/code&gt; を返し、以前の &lt;code&gt;CrisisDetailComponent&lt;/code&gt; への進行中のナビゲーションをキャンセルし、ユーザーを &lt;code&gt;CrisisListComponent&lt;/code&gt; に戻します。 更新リゾルバーサービスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="94cc9640df1c6d475f62695048e0d376c2bec854" translate="yes">
          <source>If it returns &lt;code&gt;false&lt;/code&gt;, the navigation process stops and the user stays put.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; を返した場合、ナビゲーションプロセスは停止し、ユーザーはプットされたままになります。</target>
        </trans-unit>
        <trans-unit id="934263a7e8d3127facc33238735344f25d2875f1" translate="yes">
          <source>If it returns &lt;code&gt;true&lt;/code&gt;, the navigation process continues.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; を返した場合 、ナビゲーションプロセスは続行します。</target>
        </trans-unit>
        <trans-unit id="c061c62da9990fa021cd80362e45d9d595bd3cad" translate="yes">
          <source>If it returns a &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;, the current navigation cancels and a new navigation is initiated to the &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; returned.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; を返す場合、現在のナビゲーションはキャンセルされ、返された &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; に対して新しいナビゲーションが開始されます。</target>
        </trans-unit>
        <trans-unit id="ccea769affa3066668cea7a19a1c6abd478fefbc" translate="yes">
          <source>If it's the consumer's decision whether a provider is available application-wide or not, then register providers in modules (&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt;) instead of registering in components (&lt;code&gt;@Component.providers&lt;/code&gt;).</source>
          <target state="translated">プロバイダーがアプリケーション全体で利用可能かどうかが消費者の決定である場合、コンポーネント（ &lt;code&gt;@Component.providers&lt;/code&gt; ）に登録する代わりに、プロバイダーをモジュール（ &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; ）に登録します。</target>
        </trans-unit>
        <trans-unit id="3de1670255b8a935f81404283d68b60a57924133" translate="yes">
          <source>If matching by URL isn't sufficient, it's possible to implement your own matching function. For example, you could look for an outgoing request that has an authorization header:</source>
          <target state="translated">URLによる照合では不十分な場合は、独自の照合関数を実装できます。 たとえば、承認ヘッダーを持つ発信リクエストを検索できます。</target>
        </trans-unit>
        <trans-unit id="056b912650db2b88322b88ec9db23fdbd1b15e9c" translate="yes">
          <source>If necessary, listen to the directive's &lt;code&gt;ngSubmit&lt;/code&gt; event to be notified when the user has triggered a form submission. The &lt;code&gt;ngSubmit&lt;/code&gt; event emits the original form submission event.</source>
          <target state="translated">必要に応じて、ディレクティブの &lt;code&gt;ngSubmit&lt;/code&gt; イベントを聞いて、ユーザーがフォームの送信をトリガーしたときに通知されます。 &lt;code&gt;ngSubmit&lt;/code&gt; イベントは、元のフォーム送信イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="1d1b279b18b25539f878e1f938bbd94f7b8453bd" translate="yes">
          <source>If no names are supplied, the default cookie name is &lt;code&gt;XSRF-TOKEN&lt;/code&gt; and the default header name is &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt;.</source>
          <target state="translated">名前が指定されていない場合、デフォルトのCookie名は &lt;code&gt;XSRF-TOKEN&lt;/code&gt; であり、デフォルトのヘッダー名は &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d46fc13fcfb33c04d67d471d163a937c0bfbc809" translate="yes">
          <source>If no parameters are specified, the function rounds off to the nearest value using this &lt;a href=&quot;https://en.wikibooks.org/wiki/Arithmetic/Rounding&quot;&gt;rounding method&lt;/a&gt;. The behavior differs from that of the JavaScript &lt;code&gt;Math.round()&lt;/code&gt; function. In the following case for example, the pipe rounds down where &lt;code&gt;Math.round()&lt;/code&gt; rounds up:</source>
          <target state="translated">パラメーターが指定されていない場合、関数はこの&lt;a href=&quot;https://en.wikibooks.org/wiki/Arithmetic/Rounding&quot;&gt;丸め方法&lt;/a&gt;を使用して最も近い値に丸めます。 この動作は、JavaScript &lt;code&gt;Math.round()&lt;/code&gt; 関数の動作とは異なります。 たとえば、次の場合、 &lt;code&gt;Math.round()&lt;/code&gt; が切り上げられる場所でパイプが切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="4697ce1b28fc4ca20feccfb80e7cc0346431c557" translate="yes">
          <source>If no path is given, this method checks for the error on the current control.</source>
          <target state="translated">パスが指定されていない場合、このメソッドは現在のコントロールのエラーをチェックします。</target>
        </trans-unit>
        <trans-unit id="18e3524ed61782df3f426fecd17d77f48f0bf410" translate="yes">
          <source>If no provider is found in the root injector, the DI framework throws an error.</source>
          <target state="translated">ルートインジェクターにプロバイダーが見つからない場合、DIフレームワークはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="df3e28bc99646e24bb4e26e24b47cf0ecf85e067" translate="yes">
          <source>If no such request has been made, or more than one such request has been made, fail with an error message including the given request description, if any.</source>
          <target state="translated">そのような要求が行われなかった場合、またはそのような要求が複数行われた場合は、指定された要求の説明（ある場合）を含むエラーメッセージで失敗します。</target>
        </trans-unit>
        <trans-unit id="30d7bba1ab11ca5cea6604c658835a3fa2b9e7f3" translate="yes">
          <source>If no such type can be inferred, this method will return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">そのような型を推測できない場合、このメソッドは &lt;code&gt;null&lt;/code&gt; を返します 。</target>
        </trans-unit>
        <trans-unit id="9f484cd2e0ac3fa9d4d2037af3783405320d1ccb" translate="yes">
          <source>If none of the keys of the &lt;code&gt;mapping&lt;/code&gt; match the &lt;code&gt;value&lt;/code&gt;, then the content of the &lt;code&gt;other&lt;/code&gt; key is returned when present, otherwise an empty string is returned.</source>
          <target state="translated">&lt;code&gt;mapping&lt;/code&gt; のキーのいずれも &lt;code&gt;value&lt;/code&gt; に一致しない場合 、 &lt;code&gt;other&lt;/code&gt; キーのコンテンツが存在するときに返され、そうでない場合は空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="5289261bc01c41048f4a824110cc30dce1f1853c" translate="yes">
          <source>If not supplied, the value is taken from &lt;code&gt;&lt;a href=&quot;compileroptions&quot;&gt;CompilerOptions&lt;/a&gt;&lt;/code&gt;. The default compiler option is &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定しない場合、値は &lt;code&gt;&lt;a href=&quot;compileroptions&quot;&gt;CompilerOptions&lt;/a&gt;&lt;/code&gt; から取得されます。 デフォルトのコンパイラオプションは &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a785f84f703473ade0c0ff1fe9607c482a6c9fd7" translate="yes">
          <source>If null or undefined, the view engine won't call it. This is used as a performance optimization for production mode.</source>
          <target state="translated">nullまたは未定義の場合、ビューエンジンはそれを呼び出しません。 これは、プロダクションモードのパフォーマンスの最適化として使用されます。</target>
        </trans-unit>
        <trans-unit id="b27c861d54587f90dcd31f70995af48c38707d2e" translate="yes">
          <source>If part of the Angular upgrade plan is to also take TypeScript into use, it makes sense to bring in the TypeScript compiler even before the upgrade itself begins. This means there's one less thing to learn and think about during the actual upgrade. It also means you can start using TypeScript features in your AngularJS code.</source>
          <target state="translated">Angularアップグレードプランの一部でTypeScriptを使用する場合は、アップグレード自体が開始される前でもTypeScriptコンパイラーを使用することをお勧めします。 これは、実際のアップグレード中に学ぶことや考えることの数が1つ減ることを意味します。 また、AngularJSコードでTypeScript機能の使用を開始できることも意味します。</target>
        </trans-unit>
        <trans-unit id="e616c57ff16a9892f31e3e14cf215a3a317fefba" translate="yes">
          <source>If provided, a new value for the given configuration key.</source>
          <target state="translated">指定された場合、指定された構成キーの新しい値。</target>
        </trans-unit>
        <trans-unit id="a11ccb963889053d0a672c70d6f2544753338193" translate="yes">
          <source>If set, the &lt;code&gt;templateUrl&lt;/code&gt; and &lt;code&gt;styleUrl&lt;/code&gt; are resolved relative to the component.</source>
          <target state="translated">設定されている場合、 &lt;code&gt;templateUrl&lt;/code&gt; と &lt;code&gt;styleUrl&lt;/code&gt; はコンポーネントに関連して解決されます。</target>
        </trans-unit>
        <trans-unit id="368133d05f6469fb1d0a68d64ec9d0ec08d47a2d" translate="yes">
          <source>If the &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angular compiler&lt;/a&gt; generated code for every declared component, it would defeat the purpose of the tree shaker.</source>
          <target state="translated">&lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angularコンパイラーが&lt;/a&gt;宣言されたすべてのコンポーネントのコードを生成すると、ツリーシェーカーの目的が損なわれます。</target>
        </trans-unit>
        <trans-unit id="65f23ab622908a00b35e36a91d40431ece26a111" translate="yes">
          <source>If the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; were allowed to continue, the tests would run and fail mysteriously before the compiler could finished.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; の続行が許可された場合、コンパイラが終了する前にテストが実行され、不可解に失敗します。</target>
        </trans-unit>
        <trans-unit id="560f12bb9fc58e2ddbb891d578b749239f1e6db9" translate="yes">
          <source>If the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; didn&amp;rsquo;t have &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; then each feature module would instantiate a new &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; instance, which would break the application as there can only be one &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;. By using the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; method, the root application module imports &lt;code&gt;RouterModule.forRoot(...)&lt;/code&gt; and gets a &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, and all feature modules import &lt;code&gt;RouterModule.forChild(...)&lt;/code&gt; which does not instantiate another &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; がない場合、各機能モジュールは新しい &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; インスタンスをインスタンス化します。これにより、1つの &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; しか存在できないため、アプリケーションが破損します。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;forRoot()&lt;/a&gt;&lt;/code&gt; メソッドを使用することにより、ルートアプリケーションモジュールは &lt;code&gt;RouterModule.forRoot(...)&lt;/code&gt; をインポートして &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; を取得し、すべての機能モジュールは別の &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; をインスタンス化しない &lt;code&gt;RouterModule.forChild(...)&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="479d4c87591e468174bfa0a3f8dc2135cb777c4e" translate="yes">
          <source>If the &lt;code&gt;app&lt;/code&gt; folder is the application root, as it is for the sample application, set the &lt;code&gt;href&lt;/code&gt; value &lt;em&gt;exactly&lt;/em&gt; as shown here.</source>
          <target state="translated">サンプルフォルダーのように、 &lt;code&gt;app&lt;/code&gt; フォルダーがアプリケーションルートである場合は、ここに示すように &lt;code&gt;href&lt;/code&gt; 値を&lt;em&gt;正確に&lt;/em&gt;設定します。</target>
        </trans-unit>
        <trans-unit id="302f79ea1b195ceb97811e3dba2bfd0daa9bce81" translate="yes">
          <source>If the &lt;code&gt;example-bank.com&lt;/code&gt; server lacks XSRF protection, it can't tell the difference between a legitimate request from the application and the forged request from &lt;code&gt;evil.com&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;example-bank.com&lt;/code&gt; サーバーにXSRF保護がない場合、アプリケーションからの正当なリクエストと &lt;code&gt;evil.com&lt;/code&gt; からの偽造リクエストとの違いを判別できません。</target>
        </trans-unit>
        <trans-unit id="94b7a597e02911683f0b073db5c9c1edeec80b49" translate="yes">
          <source>If the Angular service worker does not have a hash to validate a given resource, it still caches its contents but it honors the HTTP caching headers by using a policy of &quot;stale while revalidate.&quot; That is, when HTTP caching headers for a cached resource indicate that the resource has expired, the Angular service worker continues to serve the content and it attempts to refresh the resource in the background. This way, broken unhashed resources do not remain in the cache beyond their configured lifetimes.</source>
          <target state="translated">Angular Service Workerに特定のリソースを検証するためのハッシュがない場合、そのコンテンツはキャッシュされますが、「stale while revalidate」のポリシーを使用してHTTPキャッシングヘッダーを受け入れます。 つまり、キャッシュされたリソースのHTTPキャッシュヘッダーがリソースの有効期限が切れたことを示す場合、Angular Service Workerは引き続きコンテンツを提供し、バックグラウンドでリソースを更新しようとします。 このように、破損したハッシュされていないリソースは、構成された有効期間を超えてキャッシュに残りません。</target>
        </trans-unit>
        <trans-unit id="c75c80c65f60ead7cd10749d4edad5c9af502525" translate="yes">
          <source>If the JSON file is too big, you could copy the nodes-of-interest into markdown backticks.</source>
          <target state="translated">JSONファイルが大きすぎる場合、対象のノードをマークダウンバックティックにコピーできます。</target>
        </trans-unit>
        <trans-unit id="be0a39c89a60cb3ed7e054bd374ca82555b74b91" translate="yes">
          <source>If the StackBlitz preview pane isn't showing what you expect, save and then click the refresh button.</source>
          <target state="translated">StackBlitzのプレビューペインに期待したものが表示されない場合は、保存してから更新ボタンをクリックします。</target>
        </trans-unit>
        <trans-unit id="a2bff59b5e87ba98607bcbcc161c9e072991847d" translate="yes">
          <source>If the above &lt;code&gt;ng build&lt;/code&gt; command throws an error about missing packages, append the missing dependencies in your local project's &lt;code&gt;package.json&lt;/code&gt; file to match the one in the downloaded StackBlitz project.</source>
          <target state="translated">上記の &lt;code&gt;ng build&lt;/code&gt; コマンドがパッケージの欠落に関するエラーをスローする場合、ローカルプロジェクトの &lt;code&gt;package.json&lt;/code&gt; ファイルに欠落している依存関係を追加して、ダウンロードしたStackBlitzプロジェクトの依存関係と一致させます。</target>
        </trans-unit>
        <trans-unit id="8e4c8672ca49b8f0e25eeaa8741e82bde770f9e1" translate="yes">
          <source>If the app uses the Angular router, you must configure the server to return the application's host page (&lt;code&gt;index.html&lt;/code&gt;) when asked for a file that it does not have.</source>
          <target state="translated">アプリがAngularルーターを使用している場合、持っていないファイルを要求されたときにアプリケーションのホストページ（ &lt;code&gt;index.html&lt;/code&gt; ）を返すようにサーバーを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d1da36d7cd60fadceb7bc9ecf82d1339e902cc81" translate="yes">
          <source>If the client of a library intends to use a symbol in an annotation, the template compiler does not normally report this until the client uses the symbol. This option allows detection of these errors during the build phase of the library and is used, for example, in producing Angular libraries themselves.</source>
          <target state="translated">ライブラリのクライアントが注釈でシンボルを使用する場合、テンプレートコンパイラは通常、クライアントがシンボルを使用するまでこれを報告しません。 このオプションを使用すると、ライブラリのビルドフェーズでこれらのエラーを検出できます。たとえば、Angularライブラリ自体の作成に使用されます。</target>
        </trans-unit>
        <trans-unit id="1d578310a8295a0eae72f65936eb8dd58a18fbd2" translate="yes">
          <source>If the component behaves as expected, clicking the hero's element should tell the component's &lt;code&gt;selected&lt;/code&gt; property to emit the &lt;code&gt;hero&lt;/code&gt; object.</source>
          <target state="translated">コンポーネントが期待どおりに動作する場合、ヒーローの要素をクリックすると、コンポーネントの &lt;code&gt;selected&lt;/code&gt; プロパティに &lt;code&gt;hero&lt;/code&gt; オブジェクトを放出するよう指示されます。</target>
        </trans-unit>
        <trans-unit id="8788c70542a02c168cea8e8d4e5e044281bdef0f" translate="yes">
          <source>If the condition is falsy and the view hasn't been created previously, tell the &lt;em&gt;view container&lt;/em&gt; to create the &lt;em&gt;embedded view&lt;/em&gt; from the template.</source>
          <target state="translated">条件が偽であり、ビューが以前に作成されていない場合は、テンプレートから&lt;em&gt;埋め込みビュー&lt;/em&gt;を作成するよう&lt;em&gt;ビューコンテナー&lt;/em&gt;に指示し&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="0a064b2a59ee6bd35d516ff89dac85e3c0a88034" translate="yes">
          <source>If the condition is truthy and the view is currently displayed, clear the container which also destroys the view.</source>
          <target state="translated">条件が真であり、ビューが現在表示されている場合は、ビューも破壊するコンテナをクリアします。</target>
        </trans-unit>
        <trans-unit id="5c3cec2a13320fb2f220fb170d31aec1e1a03ce0" translate="yes">
          <source>If the control has any children, also marks all children as &lt;code&gt;untouched&lt;/code&gt; and recalculates the &lt;code&gt;touched&lt;/code&gt; status of all parent controls.</source>
          <target state="translated">コントロールに子がある場合、すべての子を &lt;code&gt;untouched&lt;/code&gt; &lt;code&gt;touched&lt;/code&gt; としてマークし、すべての親コントロールのタッチ状態を再計算します。</target>
        </trans-unit>
        <trans-unit id="d1a83898ee5cd6fc850d88e2ec839126c806da54" translate="yes">
          <source>If the control has any children, marks all children as &lt;code&gt;pristine&lt;/code&gt;, and recalculates the &lt;code&gt;pristine&lt;/code&gt; status of all parent controls.</source>
          <target state="translated">コントロールに子がある場合、すべての子を &lt;code&gt;pristine&lt;/code&gt; としてマークし、すべての親コントロールの &lt;code&gt;pristine&lt;/code&gt; 状態を再計算します。</target>
        </trans-unit>
        <trans-unit id="8453b196ce8fbdb1fe41ff331de4cbcbc668e2ae" translate="yes">
          <source>If the control has children, all children are also disabled.</source>
          <target state="translated">コントロールに子がある場合、すべての子も無効になります。</target>
        </trans-unit>
        <trans-unit id="6da51976abd22faef9516a71a664e1ede6e2d1c6" translate="yes">
          <source>If the control is not present, false is returned.</source>
          <target state="translated">コントロールが存在しない場合、falseが返されます。</target>
        </trans-unit>
        <trans-unit id="20413c6d38ae984baf834f94a3ed5662a7f00e9c" translate="yes">
          <source>If the current tab needs to be updated to the latest app version immediately, it can ask to do so with the &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activateUpdate&quot;&gt;activateUpdate()&lt;/a&gt;&lt;/code&gt; method:</source>
          <target state="translated">現在のタブを最新のアプリバージョンにすぐに更新する必要がある場合は、 &lt;code&gt;&lt;a href=&quot;../api/service-worker/swupdate#activateUpdate&quot;&gt;activateUpdate()&lt;/a&gt;&lt;/code&gt; メソッドを使用して更新を要求できます。</target>
        </trans-unit>
        <trans-unit id="9104853be208753a61ab17ecc634fd45d2546fb7" translate="yes">
          <source>If the current working directory is not the right place for your project, you can change to a more appropriate directory by running &lt;code&gt;cd &amp;lt;path-to-other-directory&amp;gt;&lt;/code&gt; first.</source>
          <target state="translated">現在の作業ディレクトリがプロジェクトに適切な場所ではない場合は、最初に &lt;code&gt;cd &amp;lt;path-to-other-directory&amp;gt;&lt;/code&gt; を実行して、より適切なディレクトリに変更できます。</target>
        </trans-unit>
        <trans-unit id="f6f468153c2449365e7f2867ef5d5f456b77cbd7" translate="yes">
          <source>If the event belongs to a directive&amp;mdash;recall that components are directives&amp;mdash;&lt;code&gt;$event&lt;/code&gt; has whatever shape the directive produces.</source>
          <target state="translated">イベントがディレクティブに属している場合（コンポーネントはディレクティブであることを思い出してください）、 &lt;code&gt;$event&lt;/code&gt; はディレクティブが生成する形状を持ちます。</target>
        </trans-unit>
        <trans-unit id="73152167c48aecc5313121b22afebd7bc3185f3b" translate="yes">
          <source>If the event lacks a listener or there's some other problem, consider calling &lt;code&gt;nativeElement.dispatchEvent(eventObject)&lt;/code&gt;.</source>
          <target state="translated">イベントにリスナーがない場合、または他の問題がある場合は、 &lt;code&gt;nativeElement.dispatchEvent(eventObject)&lt;/code&gt; 呼び出しを検討してください 。</target>
        </trans-unit>
        <trans-unit id="13a1756e7082ebba2ca9b175bf1d707be6dc83b3" translate="yes">
          <source>If the field is omitted, it defaults to:</source>
          <target state="translated">フィールドを省略すると、デフォルトで次のようになります。</target>
        </trans-unit>
        <trans-unit id="4d62e6f61d2836ab8838dd3181e91ea4e13db082" translate="yes">
          <source>If the final step in a transition is a call to &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; that uses a timing value with no style data, that step is automatically considered the final animation arc, for the element to reach the final state. Angular automatically adds or removes CSS styles to ensure that the element is in the correct final state.</source>
          <target state="translated">遷移の最後のステップが、スタイルデータのないタイミング値を使用する &lt;code&gt;&lt;a href=&quot;animate&quot;&gt;animate&lt;/a&gt;()&lt;/code&gt; 呼び出しである場合、そのステップは、要素が最終状態に到達するために自動的に最終アニメーションアークと見なされます。 Angularは自動的にCSSスタイルを追加または削除して、要素が正しい最終状態であることを確認します。</target>
        </trans-unit>
        <trans-unit id="e4a660dbc7897b28c034041b6f65be22015a8b7e" translate="yes">
          <source>If the first segment begins with &lt;code&gt;./&lt;/code&gt;, or doesn't begin with a slash, the router will instead look in the children of the current activated route.</source>
          <target state="translated">最初のセグメントが &lt;code&gt;./&lt;/code&gt; で始まるか、スラッシュで始まらない場合、ルーターは現在アクティブ化されているルートの子を探します。</target>
        </trans-unit>
        <trans-unit id="cea0080cb58c9233caaaea94f5f228089d34ea6f" translate="yes">
          <source>If the first segment begins with &lt;code&gt;/&lt;/code&gt;, the router will look up the route from the root of the app.</source>
          <target state="translated">最初のセグメントが &lt;code&gt;/&lt;/code&gt; で始まる場合、ルーターはアプリのルートからルートを検索します。</target>
        </trans-unit>
        <trans-unit id="0078130fe6400ab8b49e0bc6c85e056609de7e16" translate="yes">
          <source>If the fixture is currently &lt;em&gt;stable&lt;/em&gt;, returns &lt;code&gt;true&lt;/code&gt;. If there are async tasks that have not completed, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">フィクスチャが現在&lt;em&gt;安定して&lt;/em&gt;いる場合、 &lt;code&gt;true&lt;/code&gt; を返します 。 完了していない非同期タスクがある場合、 &lt;code&gt;false&lt;/code&gt; を返します 。</target>
        </trans-unit>
        <trans-unit id="0b70a09df109c3ad19c3522771be006c2c3948dd" translate="yes">
          <source>If the generated &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator does not include the &lt;code&gt;{ &lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root' }&lt;/code&gt; statement, then insert it as shown above.</source>
          <target state="translated">生成された &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータに &lt;code&gt;{ &lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;: 'root' }&lt;/code&gt; ステートメントが含まれていない場合は、上記のように挿入します。</target>
        </trans-unit>
        <trans-unit id="15068daa68072149e6fa5ce056eb1f52cac90044" translate="yes">
          <source>If the global library you need to use does not have global typings, you can declare them manually as &lt;code&gt;any&lt;/code&gt; in &lt;code&gt;src/typings.d.ts&lt;/code&gt;. For example:</source>
          <target state="translated">使用する必要のあるグローバルライブラリにグローバルタイピングがない場合は、 &lt;code&gt;src/typings.d.ts&lt;/code&gt; で手動で宣言できます。 例えば：</target>
        </trans-unit>
        <trans-unit id="6cb1ed9802e9478d929162c54da4c8d6fd30657e" translate="yes">
          <source>If the injector doesn't have a provider for a requested token, it delegates the request to its parent injector, where the process repeats until there are no more injectors. If the search fails, the injector throws an error&amp;mdash;unless the request was &lt;a href=&quot;dependency-injection-in-action#optional&quot;&gt;optional&lt;/a&gt;.</source>
          <target state="translated">インジェクターに要求されたトークンのプロバイダーがない場合、そのインジェクターは親インジェクターに委任され、インジェクターがなくなるまでプロセスが繰り返されます。 検索が失敗すると、リクエストが&lt;a href=&quot;dependency-injection-in-action#optional&quot;&gt;オプションで&lt;/a&gt;なかった場合を除き、インジェクターはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="4a0b3bfb715b52caecc873a2889e0c4f7e9a1de0" translate="yes">
          <source>If the injector has already cached an instance of the service associated with the token, it provides that instance. If it doesn't, it needs to make one using the provider associated with the token.</source>
          <target state="translated">インジェクターがトークンに関連付けられたサービスのインスタンスを既にキャッシュしている場合、そのインスタンスを提供します。 そうでない場合は、トークンに関連付けられたプロバイダーを使用して作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="3b4f4ffe72bd420b5f6a4c66dbf5e65cc68e96f5" translate="yes">
          <source>If the link is static, you can use the directive as follows: &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;=&quot;/user/bob&quot;&amp;gt;link to user component&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">リンクが静的な場合、次のようにディレクティブを使用できます。 &lt;code&gt;&amp;lt;&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;routerlink&quot;&gt;routerLink&lt;/a&gt;=&quot;/user/bob&quot;&amp;gt;link to user component&amp;lt;/&lt;a href=&quot;routerlinkwithhref&quot;&gt;a&lt;/a&gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c85a5f245c5fa8e89c1c6d997ca02517847957ee" translate="yes">
          <source>If the name fails to match a property of a known directive or element, Angular reports an &amp;ldquo;unknown directive&amp;rdquo; error.</source>
          <target state="translated">名前が既知のディレクティブまたは要素のプロパティと一致しない場合、Angularは「不明なディレクティブ」エラーを報告します。</target>
        </trans-unit>
        <trans-unit id="4f09d2765c657029543ee7a53587171de5cd4ed6" translate="yes">
          <source>If the name fails to match an element event or an output property of a known directive, Angular reports an &amp;ldquo;unknown directive&amp;rdquo; error.</source>
          <target state="translated">名前が要素イベントまたは既知のディレクティブの出力プロパティと一致しない場合、Angularは「不明なディレクティブ」エラーを報告します。</target>
        </trans-unit>
        <trans-unit id="1b3d0f7fd76ea32112a2485de9c0071e3eac7cd6" translate="yes">
          <source>If the pipe has internal state (that is, the result depends on state other than its arguments), set &lt;code&gt;pure&lt;/code&gt; to false. In this case, the pipe is invoked on each change-detection cycle, even if the arguments have not changed.</source>
          <target state="translated">パイプに内部状態がある場合（つまり、結果が引数以外の状態に依存する場合）、 &lt;code&gt;pure&lt;/code&gt; をfalseに設定します。 この場合、引数が変更されていなくても、変更検出サイクルごとにパイプが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4763dcf43d2d8abf4591a273eb238b96e963dfb9" translate="yes">
          <source>If the policy is set to &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt; and the component has no &lt;code&gt;styles&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; specified, the policy is automatically switched to &lt;code&gt;&lt;a href=&quot;viewencapsulation#None&quot;&gt;ViewEncapsulation.None&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ポリシーが &lt;code&gt;&lt;a href=&quot;viewencapsulation#Emulated&quot;&gt;ViewEncapsulation.Emulated&lt;/a&gt;&lt;/code&gt; に設定され、コンポーネントに &lt;code&gt;styles&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; が指定されていない場合、ポリシーは自動的に &lt;code&gt;&lt;a href=&quot;viewencapsulation#None&quot;&gt;ViewEncapsulation.None&lt;/a&gt;&lt;/code&gt; に切り替えられます 。</target>
        </trans-unit>
        <trans-unit id="2d810ad667c3b20ef3b51707d2be9b432b64b1cf" translate="yes">
          <source>If the polyfill you want is not already in &lt;code&gt;polyfills.ts&lt;/code&gt; file, add the &lt;code&gt;import&lt;/code&gt; statement by hand.</source>
          <target state="translated">必要なポリフィルが &lt;code&gt;polyfills.ts&lt;/code&gt; ファイルにない場合は、手動で &lt;code&gt;import&lt;/code&gt; ステートメントを追加します。</target>
        </trans-unit>
        <trans-unit id="59935f40339f370a775c93f8ebfe64fdb8501b4a" translate="yes">
          <source>If the request is not cachable, the interceptor simply forwards the request to the next handler in the chain.</source>
          <target state="translated">要求がキャッシュ可能でない場合、インターセプターは単純に要求をチェーン内の次のハンドラーに転送します。</target>
        </trans-unit>
        <trans-unit id="7ac51969f4d26381b937d7506df3c5ca028390e8" translate="yes">
          <source>If the router determines that the current application state requires particular functionality, and the module that defines it hasn't been loaded, the router can &lt;em&gt;lazy-load&lt;/em&gt; the module on demand.</source>
          <target state="translated">現在のアプリケーションの状態に特定の機能が必要であり、それを定義するモジュールがロードされていないとルーターが判断した場合、ルーターはオンデマンドでモジュールを&lt;em&gt;遅延ロード&lt;/em&gt;できます。</target>
        </trans-unit>
        <trans-unit id="8394b2e767bb12ed5ce19f8e2789f404b7484f75" translate="yes">
          <source>If the token is not found, the injector looks for the closest parent &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; to delegate the request to.</source>
          <target state="translated">トークンが見つからない場合、インジェクターはリクエストを委任する最も近い親 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; を探します。</target>
        </trans-unit>
        <trans-unit id="ecf78ef653c4d34586962407b03b480fcd055de0" translate="yes">
          <source>If the user clicks &quot;Magneta&quot;, that hero should render with a distinctive but subtle background color like this:</source>
          <target state="translated">ユーザーが「マグネタ」をクリックすると、そのヒーローは次のような独特で微妙な背景色でレンダリングする必要があります。</target>
        </trans-unit>
        <trans-unit id="c189f0f17a7b1f805b9f00a96ea0807e51814fa1" translate="yes">
          <source>If the user is accessing your app via a browser that does not support service workers, the service worker is not registered and related behavior such as offline cache management and push notifications does not happen. More specifically:</source>
          <target state="translated">ユーザーがService Workerをサポートしていないブラウザー経由でアプリにアクセスしている場合、Service Workerは登録されず、オフラインキャッシュ管理やプッシュ通知などの関連する動作は発生しません。 すなわち：</target>
        </trans-unit>
        <trans-unit id="c7bb75e93c7ef1a5eb66e798e8f358b5eede9fc4" translate="yes">
          <source>If the user is not logged in, you store the attempted URL the user came from using the &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot#url&quot;&gt;RouterStateSnapshot.url&lt;/a&gt;&lt;/code&gt; and tell the router to navigate to a login page&amp;mdash;a page you haven't created yet. This secondary navigation automatically cancels the current navigation; &lt;code&gt;checkLogin()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; just to be clear about that.</source>
          <target state="translated">ユーザーがログインしていない場合、 &lt;code&gt;&lt;a href=&quot;../api/router/routerstatesnapshot#url&quot;&gt;RouterStateSnapshot.url&lt;/a&gt;&lt;/code&gt; を使用してユーザーがアクセスしようとしたURLを保存し、ルーターにログインページ（まだ作成していないページ）に移動するように指示します。 このセカンダリナビゲーションは、現在のナビゲーションを自動的にキャンセルします。 &lt;code&gt;checkLogin()&lt;/code&gt; は、それについて明確にするために &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="de7fbb24093105b8d981322fd4ad3921dd415377" translate="yes">
          <source>If the values do not match, the hero's identity remains secret, and we can safely return null. Otherwise, the hero's identity is revealed and we must mark the form as invalid by returning an error object.</source>
          <target state="translated">値が一致しない場合、ヒーローの身元は秘密のままであり、nullを安全に返すことができます。 それ以外の場合、ヒーローの身元が明らかになり、エラーオブジェクトを返すことでフォームを無効としてマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="96ad008e2ef13ed8ed5f5c2ec956a424d99e7a41" translate="yes">
          <source>If there are any pending timers at the end of the function, an exception will be thrown.</source>
          <target state="translated">関数の最後に保留中のタイマーがある場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="f9a670037bd4af4276da780403250f1a42128b74" translate="yes">
          <source>If there are inconsistencies (for example, if peer dependencies cannot be matched by a simple &lt;a href=&quot;https://semver.io/&quot;&gt;semver&lt;/a&gt; range), the command generates an error and does not change anything in the workspace.</source>
          <target state="translated">矛盾がある場合（たとえば、単純な&lt;a href=&quot;https://semver.io/&quot;&gt;semver&lt;/a&gt;範囲でピアの依存関係を一致させることができない場合）、コマンドはエラーを生成し、ワークスペース内の何も変更しません。</target>
        </trans-unit>
        <trans-unit id="6bce86d8e3129408ac34398b75eca72346010c23" translate="yes">
          <source>If there are multiple matching elements, staggers in each element starting at the top of the page, with a 50-millisecond delay between each element.</source>
          <target state="translated">一致する要素が複数ある場合は、ページの先頭から各要素がずれ、各要素間に50ミリ秒の遅延が生じます。</target>
        </trans-unit>
        <trans-unit id="5d0e50c9ab16f52d7179be4c30d0ae22030f6696" translate="yes">
          <source>If there are no &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; values specified in the style entries, the offsets are calculated automatically.</source>
          <target state="translated">スタイルエントリで &lt;code&gt;&lt;a href=&quot;animationstylemetadata#offset&quot;&gt;offset&lt;/a&gt;&lt;/code&gt; 値が指定されていない場合、オフセットは自動的に計算されます。</target>
        </trans-unit>
        <trans-unit id="bdfacb45406d5e8b6f34dd5b25ce44a85e6145b1" translate="yes">
          <source>If there are no matches, a view with the &lt;code&gt;&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; directive is rendered.</source>
          <target state="translated">一致するものがない場合、 &lt;code&gt;&lt;a href=&quot;ngswitchdefault&quot;&gt;ngSwitchDefault&lt;/a&gt;&lt;/code&gt; ディレクティブを持つビューがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="469567e644a4eb10f45ac06d4145cbb3283b05ab" translate="yes">
          <source>If there is a cached value, the code &lt;em&gt;pipes&lt;/em&gt; the cached response onto &lt;code&gt;results$&lt;/code&gt;, producing a recomposed observable that emits twice, the cached response first (and immediately), followed later by the response from the server. Subscribers see a sequence of &lt;em&gt;two&lt;/em&gt; responses.</source>
          <target state="translated">キャッシュされた値がある場合、コードはキャッシュされた応答を &lt;code&gt;results$&lt;/code&gt; に&lt;em&gt;パイプし&lt;/em&gt; 、キャッシュされた応答を最初に（すぐに）、後にサーバーからの応答が続く2回発行する再構成されたオブザーバブルを生成します。 サブスクライバーには、 &lt;em&gt;2つの&lt;/em&gt;応答のシーケンスが表示されます。</target>
        </trans-unit>
        <trans-unit id="99c30904c74feea9735c68b368b80ff51127fb2d" translate="yes">
          <source>If there is a search term, the code constructs an options object with an HTML URL-encoded search parameter. If the term were &quot;foo&quot;, the GET request URL would be &lt;code&gt;api/heroes?name=foo&lt;/code&gt;.</source>
          <target state="translated">検索語がある場合、コードはHTML URLエンコード検索パラメーターを使用してオプションオブジェクトを構築します。 用語が「foo」の場合、GETリクエストURLは &lt;code&gt;api/heroes?name=foo&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d8a482ba206dfd36e3f36762fb13f8b6559b18b8" translate="yes">
          <source>If there is a section of text that you would like to translate, you can wrap it in a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tag. However, if you don't want to create a new DOM element merely to facilitate translation, you can wrap the text in an &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; element. The &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; is transformed into an html comment:</source>
          <target state="translated">翻訳したいテキストのセクションがある場合は、 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; タグで囲むことができます。 ただし、単に翻訳を容易にするためだけに新しいDOM要素を作成したくない場合は、テキストを &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; 要素でラップできます。 &lt;code&gt;&amp;lt;ng-container&amp;gt;&lt;/code&gt; はhtmlコメントに変換されます。</target>
        </trans-unit>
        <trans-unit id="789a03391ec493accfaf2648ace4780e8da1f3e8" translate="yes">
          <source>If there is no structural directive and you merely wrap some elements in a &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;, those elements disappear. That's the fate of the middle &quot;Hip!&quot; in the phrase &quot;Hip! Hip! Hooray!&quot;.</source>
          <target state="translated">構造的なディレクティブがなく、一部の要素を &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; でラップするだけの場合、それらの要素は消えます。 それが中間の「ヒップ！」の運命です 「Hip！Hip！Hooray！」というフレーズで。</target>
        </trans-unit>
        <trans-unit id="c0a56b8fffce47376883198a8d9baa521d322597" translate="yes">
          <source>If there's no cached value, the interceptor returns &lt;code&gt;results$&lt;/code&gt;.</source>
          <target state="translated">キャッシュされた値がない場合、インターセプターは &lt;code&gt;results$&lt;/code&gt; 返します 。</target>
        </trans-unit>
        <trans-unit id="2c9573a993697b7205978825080a3f70b90ace3b" translate="yes">
          <source>If these performance and minification considerations don't apply to you, you can always create your own such pipes (similar to the &lt;a href=&quot;pipes#impure-flying-heroes&quot;&gt;FlyingHeroesPipe&lt;/a&gt;) or find them in the community.</source>
          <target state="translated">これらのパフォーマンスと最小化の考慮事項が当てはまらない場合は、独自のパイプ（ &lt;a href=&quot;pipes#impure-flying-heroes&quot;&gt;FlyingHeroesPipeに&lt;/a&gt;似ています ）をいつでも作成するか、コミュニティで見つけることができます。</target>
        </trans-unit>
        <trans-unit id="128c120be1c661795cc994725f81beabd4448f98" translate="yes">
          <source>If this NgModule were the root &lt;code&gt;AppModule&lt;/code&gt;, the &lt;code&gt;UserService&lt;/code&gt; would be a singleton and available throughout the app. Though you may see it coded this way, using the &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator on the service itself is preferable as of Angular 6.0 as it makes your services tree-shakable.</source>
          <target state="translated">このNgModuleがルート &lt;code&gt;AppModule&lt;/code&gt; である場合、 &lt;code&gt;UserService&lt;/code&gt; はシングルトンになり、アプリ全体で利用可能になります。 このようにコーディングされていることがわかりますが、Angular 6.0以降では、サービス自体を &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; デコレータの &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; プロパティを使用すると、サービスがツリーシェーク可能になります。</target>
        </trans-unit>
        <trans-unit id="a961d773c3ebb64dd1d2a5bb5b8857c41c94da34" translate="yes">
          <source>If this is something you wanted to do, it would be a good idea to enable the &lt;code&gt;noImplicitAny&lt;/code&gt; configuration option in &lt;code&gt;tsconfig.json&lt;/code&gt;. This would cause the TypeScript compiler to display a warning when there's any code that does not yet have type annotations. You could use it as a guide to inform us about how close you are to having a fully annotated project.</source>
          <target state="translated">これがやりたいことである場合、 &lt;code&gt;noImplicitAny&lt;/code&gt; 構成オプションを有効にすることをお勧めします。 これにより、タイプ注釈がまだないコードがある場合、TypeScriptコンパイラは警告を表示します。 これをガイドとして使用して、完全に注釈が付けられたプロジェクトを作成するのにどれだけ近いかをお知らせください。</target>
        </trans-unit>
        <trans-unit id="d8b697c68c21ca2b9972cd7df3c8b2c2521e942f" translate="yes">
          <source>If this pattern does not satisfy your business needs, you can use &lt;code&gt;&lt;a href=&quot;validators#pattern&quot;&gt;Validators.pattern()&lt;/a&gt;&lt;/code&gt; to validate the value against a different pattern.</source>
          <target state="translated">このパターンがビジネスニーズを満たさない場合は、 &lt;code&gt;&lt;a href=&quot;validators#pattern&quot;&gt;Validators.pattern()&lt;/a&gt;&lt;/code&gt; を使用して、異なるパターンに対して値を検証できます。</target>
        </trans-unit>
        <trans-unit id="12a97be36f3f8b698fee41e85a55b88f80921851" translate="yes">
          <source>If true, this directive/component will be skipped by the AOT compiler and so will always be compiled using JIT.</source>
          <target state="translated">trueの場合、このディレクティブ/コンポーネントはAOTコンパイラーによってスキップされるため、常にJITを使用してコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="dee5d11f125e7906a2306bcec4c66b607231b73c" translate="yes">
          <source>If true, this module will be skipped by the AOT compiler and so will always be compiled using JIT.</source>
          <target state="translated">trueの場合、このモジュールはAOTコンパイラによってスキップされるため、常にJITを使用してコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="ba78200d25bae586b98c7c392474b61cabfe4a71" translate="yes">
          <source>If value is trusted for the context, this method will unwrap the contained safe value and use it directly. Otherwise, value will be sanitized to be safe in the given context, for example by replacing URLs that have an unsafe protocol part (such as &lt;code&gt;javascript:&lt;/code&gt;). The implementation is responsible to make sure that the value can definitely be safely used in the given context.</source>
          <target state="translated">コンテキストの値が信頼されている場合、このメソッドは含まれている安全な値をアンラップして直接使用します。 そうでない場合、値は、たとえば安全でないプロトコル部分（ &lt;code&gt;javascript:&lt;/code&gt; など）を持つURLを置き換えることにより、指定されたコンテキストで安全になるようにサニタイズされます。 実装は、指定されたコンテキストで値を確実に安全に使用できるようにする責任があります。</target>
        </trans-unit>
        <trans-unit id="3bb452304863c61a02b99678f43105cff45695b0" translate="yes">
          <source>If we create a new project with &lt;code&gt;ng new builder-test&lt;/code&gt;, the generated &lt;code&gt;angular.json&lt;/code&gt; file looks something like this, with only default builder configurations.</source>
          <target state="translated">&lt;code&gt;ng new builder-test&lt;/code&gt; を使用して新しいプロジェクトを作成すると、生成された &lt;code&gt;angular.json&lt;/code&gt; ファイルはこのようになり、デフォルトのビルダー構成のみになります。</target>
        </trans-unit>
        <trans-unit id="410d7d19eeff8be9f91595a2a6c28a3630cc8b2e" translate="yes">
          <source>If we neglected to add, &lt;code&gt;#docplaster&lt;/code&gt;, the processor would insert the &lt;em&gt;default&lt;/em&gt; plaster - an ellipsis comment - between the fragments. Try removing the &lt;code&gt;#docplaster&lt;/code&gt; comment yourself to see the effect.</source>
          <target state="translated">&lt;code&gt;#docplaster&lt;/code&gt; を追加しなかった場合、プロセッサはフラグメント間に&lt;em&gt;デフォルトの&lt;/em&gt;石膏（省略記号）を挿入し&lt;em&gt;ます&lt;/em&gt; 。 &lt;code&gt;#docplaster&lt;/code&gt; コメントを自分で削除して、効果を確認してください。</target>
        </trans-unit>
        <trans-unit id="539d94c8fe072123800e0f9db24c1874e3e30bba" translate="yes">
          <source>If you &lt;em&gt;mutate&lt;/em&gt; the array, no pipe is invoked and the display isn't updated; if you &lt;em&gt;replace&lt;/em&gt; the array, the pipe executes and the display is updated. The Flying Heroes application extends the code with checkbox switches and additional displays to help you experience these effects.</source>
          <target state="translated">配列を&lt;em&gt;変更し&lt;/em&gt;た場合、パイプは呼び出されず、表示は更新されません。 配列を&lt;em&gt;置き換える&lt;/em&gt;と、パイプが実行され、表示が更新されます。 Flying Heroesアプリケーションは、チェックボックススイッチと追加のディスプレイを使用してコードを拡張し、これらの効果を体験できるようにします。</target>
        </trans-unit>
        <trans-unit id="0fabf2886d8095e393384ce3f692c1d6440c63c9" translate="yes">
          <source>If you add &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; to the constructor for &lt;code&gt;AnimalService&lt;/code&gt;, the result is 🐶 (puppy) because the injector finds the &lt;code&gt;AnimalService&lt;/code&gt; in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;. Here is the &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; array in the &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; class and &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; in the constructor:</source>
          <target state="translated">&lt;code&gt;AnimalService&lt;/code&gt; &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; をAnimalServiceのコンストラクターに追加すると、インジェクターは &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; で &lt;code&gt;AnimalService&lt;/code&gt; を見つけるため、結果は🐶（子犬）になります 。 &lt;code&gt;&amp;lt;app-child&amp;gt;&lt;/code&gt; クラスの &lt;code&gt;&lt;a href=&quot;../api/core/component#viewProviders&quot;&gt;viewProviders&lt;/a&gt;&lt;/code&gt; 配列とコンストラクターの &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="057296fa1750840f11cd0280d602d1818f95536d" translate="yes">
          <source>If you already have an app that was created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, you can create a service using the &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate&lt;/code&gt;&lt;/a&gt; CLI command in the root project directory. Replace &lt;em&gt;User&lt;/em&gt; with the name of your service.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;で作成されたアプリがある場合は、ルートプロジェクトディレクトリで&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate&lt;/code&gt; &lt;/a&gt; CLIコマンドを使用してサービスを作成できます。 &lt;em&gt;User&lt;/em&gt;をサービスの名前に置き換え&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ff6e048cc33df5338739033fa8346eb0d4a951f" translate="yes">
          <source>If you already have projects running on your machine that use other versions of Node.js and npm, consider using &lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm&lt;/a&gt; to manage the multiple versions of Node.js and npm.</source>
          <target state="translated">Node.jsとnpmの他のバージョンを使用するマシン上で既に実行中のプロジェクトがある場合は、 &lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm&lt;/a&gt;を使用してNode.jsとnpmの複数のバージョンを管理することを検討してください 。</target>
        </trans-unit>
        <trans-unit id="20b03c67a88235e36acc0fc42c3d9208b7a04ffe" translate="yes">
          <source>If you are currently using AngularJS, see &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt;. &lt;em&gt;AngularJS&lt;/em&gt; is the name for all v1.x versions of Angular.</source>
          <target state="translated">現在AngularJSを使用している場合は&lt;a href=&quot;upgrade&quot;&gt;、AngularJSからのアップグレードを&lt;/a&gt;参照してください。 &lt;em&gt;AngularJS&lt;/em&gt;は、Angularのすべてのv1.xバージョンの名前です。</target>
        </trans-unit>
        <trans-unit id="2a8730eb4263adf9633421f884873db3bc272d64" translate="yes">
          <source>If you are hiding large component trees, consider &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; as a more efficient alternative to showing/hiding.</source>
          <target state="translated">大きなコンポーネントツリーを非表示にしている場合は、表示/非表示のより効率的な代替手段として &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;NgIf&lt;/a&gt;&lt;/code&gt; を検討してください 。</target>
        </trans-unit>
        <trans-unit id="dd74353d5cb9e62ae95981a79ed374fcaa9e6433" translate="yes">
          <source>If you are implementing a custom renderer, you must implement this interface.</source>
          <target state="translated">カスタムレンダラーを実装する場合は、このインターフェイスを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="abfbbb4531d989e45009d6d362b78e141a014fd3" translate="yes">
          <source>If you are new to Angular, see &lt;a href=&quot;start&quot;&gt;Getting Started&lt;/a&gt;. Getting Started helps you quickly learn the essentials of Angular, in the context of building a basic online store app. It leverages the &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt; online development environment, so you don't need to set up your local environment until you're ready.</source>
          <target state="translated">Angularを初めて使用する場合は、「 &lt;a href=&quot;start&quot;&gt;はじめに」を&lt;/a&gt;参照してください。 入門ガイドでは、基本的なオンラインストアアプリを構築する際に、Angularの基本をすばやく学習できます。 &lt;a href=&quot;https://stackblitz.com/&quot;&gt;StackBlitz&lt;/a&gt;オンライン開発環境を活用しているため、準備が整うまでローカル環境をセットアップする必要はありません。</target>
        </trans-unit>
        <trans-unit id="3a2afbd5d04b514e212ac51be4531329265f23e7" translate="yes">
          <source>If you are new to Angular, see the &lt;a href=&quot;start&quot;&gt;Getting Started&lt;/a&gt; tutorial. Getting Started helps you quickly learn the essentials of Angular, in the context of building a basic online store app.</source>
          <target state="translated">Angularを初めて使用する場合は、 &lt;a href=&quot;start&quot;&gt;入門&lt;/a&gt;チュートリアルをご覧ください。 入門ガイドでは、基本的なオンラインストアアプリを構築する際に、Angularの基本をすばやく学習できます。</target>
        </trans-unit>
        <trans-unit id="429a085eabc08ae949cb917701bc53d58671e9e8" translate="yes">
          <source>If you are not using the CLI, add your polyfill scripts directly to the host web page (&lt;code&gt;index.html&lt;/code&gt;).</source>
          <target state="translated">CLIを使用していない場合は、ポリフィルスクリプトをホストWebページ（ &lt;code&gt;index.html&lt;/code&gt; ）に直接追加します。</target>
        </trans-unit>
        <trans-unit id="c294d47814c324598c601f2919036c6333fbcffe" translate="yes">
          <source>If you are updating from &lt;strong&gt;one major version to another,&lt;/strong&gt; then we recommend that you &lt;strong&gt;don't skip major versions.&lt;/strong&gt; Follow the instructions to incrementally update to the next major version, testing and validating at each step. For example, if you want to update from version 6.x.x to version 8.x.x, we recommend that you update to the latest 7.x.x release first. After successfully updating to 7.x.x, you can then update to 8.x.x.</source>
          <target state="translated">&lt;strong&gt;あるメジャーバージョンから別のメジャーバージョンに&lt;/strong&gt;更新する場合は、 &lt;strong&gt;メジャーバージョンを&lt;/strong&gt; &lt;strong&gt;スキップしない&lt;/strong&gt;ことをお勧めします&lt;strong&gt;。&lt;/strong&gt; 手順に従って、次のメジャーバージョンに段階的に更新し、各ステップでテストと検証を行います。 たとえば、バージョン6.xxからバージョン8.xxに更新する場合は、最初に最新の7.xxリリースに更新することをお勧めします。 7.xxに正常に更新した後、8.xxに更新できます</target>
        </trans-unit>
        <trans-unit id="5f232055071ca555fe05e8263d44377d3060b3a6" translate="yes">
          <source>If you are updating within the &lt;strong&gt;same major version,&lt;/strong&gt; then you can skip any intermediate versions and update directly to the targeted version. For example, you can update directly from 7.0.0 to 7.2.11.</source>
          <target state="translated">&lt;strong&gt;同じメジャーバージョン&lt;/strong&gt;内で更新する場合は、中間バージョンをスキップして、ターゲットバージョンに直接更新できます。 たとえば、7.0.0から7.2.11に直接更新できます。</target>
        </trans-unit>
        <trans-unit id="aa30f67180396da593aeadb4e26b8ee85e38af3d" translate="yes">
          <source>If you choose to inject your pipe into a class, you must provide it in the &lt;code&gt;providers&lt;/code&gt; array of your &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">クラスにパイプを挿入することを選択した場合は、 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;providers&lt;/code&gt; 配列でパイプを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="f9a5cf2285ce2f7f1005a024b906069e5899271e" translate="yes">
          <source>If you click the dashboard hero &quot;Magneta,&quot; the router opens a &quot;Hero Details&quot; view where you can change the hero's name.</source>
          <target state="translated">ダッシュボードのヒーロー「マグネタ」をクリックすると、ルーターはヒーローの名前を変更できる「ヒーローの詳細」ビューを開きます。</target>
        </trans-unit>
        <trans-unit id="8f68cc79c216b6b956bc04df5f4512033049017d" translate="yes">
          <source>If you comment out the &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; decorator, Angular walks up the injector ancestor tree until it finds the logger at the &lt;code&gt;AppComponent&lt;/code&gt; level. The logger logic kicks in and the hero display updates with the &quot;!!!&quot; marker to indicate that the logger was found.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; デコレータをコメントアウトすると、Angularは &lt;code&gt;AppComponent&lt;/code&gt; レベルでロガーを見つけるまでインジェクタの祖先ツリーをたどります。 ロガーロジックが起動し、ヒーローが「!!!」で更新を表示します ロガーが見つかったことを示すマーカー。</target>
        </trans-unit>
        <trans-unit id="655f88a25378a8e0bba92c48a89431e31a18d04a" translate="yes">
          <source>If you configure an app-wide provider in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; of &lt;code&gt;AppModule&lt;/code&gt;, it overrides one configured for &lt;code&gt;root&lt;/code&gt; in the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; metadata. You can do this to configure a non-default provider of a service that is shared with multiple apps.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; の@ NgModule （）でアプリ全体のプロバイダーを構成する場合、 @ Injectable &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; メタデータで &lt;code&gt;root&lt;/code&gt; 用に構成されたプロバイダーをオーバーライドします。 これを行うと、複数のアプリで共有されるサービスのデフォルト以外のプロバイダーを構成できます。</target>
        </trans-unit>
        <trans-unit id="53b5c56d5542295c8b28d30b021bb969efead9f2" translate="yes">
          <source>If you create a new version of your library that introduces potential breaking changes, you can provide an &lt;em&gt;update schematic&lt;/em&gt; to enable the &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; command to automatically resolve any such changes in the project being updated.</source>
          <target state="translated">潜在的な重大な変更を導入するライブラリの新しいバージョンを作成する場合、 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; コマンドを有効にして、 更新中のプロジェクトのそのような変更を自動的に解決できる&lt;em&gt;更新回路図&lt;/em&gt;を提供できます。</target>
        </trans-unit>
        <trans-unit id="d6a642206c4a5d0b4ac72237fc880c34a1dcc940" translate="yes">
          <source>If you create project with `Angular/CLI`, it is already imported in `src/test.ts`.</source>
          <target state="translated">`Angular / CLI`でプロジェクトを作成する場合、プロジェクトはすでに` src / test.ts`にインポートされています。</target>
        </trans-unit>
        <trans-unit id="00d9ca9f25be57d4c4bdc4c5699c96a4ab982c59" translate="yes">
          <source>If you declare the real components, you'll also have to declare &lt;em&gt;their&lt;/em&gt; nested components and provide for &lt;em&gt;all&lt;/em&gt; services injected in &lt;em&gt;any&lt;/em&gt; component in the tree.</source>
          <target state="translated">実際のコンポーネントを宣言する場合&lt;em&gt;、&lt;/em&gt;ネストされたコンポーネントを宣言し、ツリー内のコンポーネントに注入される&lt;em&gt;すべての&lt;/em&gt;サービスを提供する必要が&lt;em&gt;あり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="27f3473cbc8bd4910ed874d931585deebed2a0eb" translate="yes">
          <source>If you delete the hero name, the form displays a validation error in an attention-grabbing style:</source>
          <target state="translated">ヒーロー名を削除すると、フォームは注意を引くスタイルで検証エラーを表示します。</target>
        </trans-unit>
        <trans-unit id="be89fadd89408e928a800bd50abe498bb92298a3" translate="yes">
          <source>If you develop angular locally with &lt;code&gt;ng serve&lt;/code&gt;, a &lt;code&gt;websocket&lt;/code&gt; connection is set up automatically between browser and local dev server, so when your code changes, the browser can automatically refresh.</source>
          <target state="translated">&lt;code&gt;ng serve&lt;/code&gt; を使用してローカルに &lt;code&gt;websocket&lt;/code&gt; を開発すると、ブラウザーとローカルdevサーバーの間にwebsocket接続が自動的にセットアップされるため、コードが変更されるとブラウザーが自動的に更新されます。</target>
        </trans-unit>
        <trans-unit id="1b7663d2e6e6cb92add7a2eeb86377cd1a6f1568" translate="yes">
          <source>If you do combine a component and service in the same file, it is important to define the service first, and then the component. If you define the component before the service, you get a run-time null reference error.</source>
          <target state="translated">同じファイルでコンポーネントとサービスを組み合わせる場合は、最初にサービスを定義し、次にコンポーネントを定義することが重要です。 サービスの前にコンポーネントを定義すると、ランタイムnull参照エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="70b72ee7901f1dbf6fe44eed029ec0919535d96c" translate="yes">
          <source>If you do import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; into a lazy loaded feature module, Angular returns an error telling you to use &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; を遅延ロードされた機能モジュールにインポートすると、Angularは代わりに &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; を使用するように指示するエラーを返します。</target>
        </trans-unit>
        <trans-unit id="d0a50f188d24b28b62b5d94fe7caa482234cb014" translate="yes">
          <source>If you do need to populate initial values into your form, using a one-way binding for &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; tends to be sufficient as long as you use the exported form's value rather than the domain model's value on submit.</source>
          <target state="translated">フォームに初期値を入力する必要がある場合は、送信時にドメインモデルの値ではなくエクスポートされたフォームの値を使用する限り、 &lt;code&gt;&lt;a href=&quot;ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; に対して一方向のバインディングを使用するだけで十分です。</target>
        </trans-unit>
        <trans-unit id="8172efb07c1070141d767274a73b38bf7814dfc1" translate="yes">
          <source>If you do, be sure to set the &lt;code&gt;id&lt;/code&gt; attribute - not the &lt;code&gt;name&lt;/code&gt; attribute! The docs generator will not convert the &lt;code&gt;name&lt;/code&gt; to the proper link URL.</source>
          <target state="translated">その場合は、 &lt;code&gt;name&lt;/code&gt; 属性ではなく &lt;code&gt;id&lt;/code&gt; 属性を設定してください！ ドキュメントジェネレーターは、 &lt;code&gt;name&lt;/code&gt; を適切なリンクURLに変換しません。</target>
        </trans-unit>
        <trans-unit id="0690d6c4fb6fbd319b60dd809c871d4c4ae2c535" translate="yes">
          <source>If you don&amp;rsquo;t already have an app, you can follow the steps below to create one with the CLI. If you do already have an app, skip to &lt;a href=&quot;lazy-loading-ngmodules#config-routes&quot;&gt;Configure the routes&lt;/a&gt;. Enter the following command where &lt;code&gt;customer-app&lt;/code&gt; is the name of your app:</source>
          <target state="translated">アプリがまだない場合は、以下の手順に従ってCLIでアプリを作成できます。 既にアプリをお持ちの場合は、 &lt;a href=&quot;lazy-loading-ngmodules#config-routes&quot;&gt;「ルート&lt;/a&gt;を構成する」に進んでください。 &lt;code&gt;customer-app&lt;/code&gt; がアプリの名前である次のコマンドを入力します。</target>
        </trans-unit>
        <trans-unit id="459d0b6f0027ff890051041d8277b8b47d8f99dc" translate="yes">
          <source>If you don't have it, install &lt;strong&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2015-update3-vs&quot;&gt;Visual Studio 2015 Update 3&lt;/a&gt;&lt;/strong&gt;. Or use &lt;code&gt;Tools | Extensions and Updates&lt;/code&gt; to update to Update 3 directly from Visual Studio 2015.</source>
          <target state="translated">お持ちでない場合は、 &lt;strong&gt;&lt;a href=&quot;https://www.visualstudio.com/en-us/news/releasenotes/vs2015-update3-vs&quot;&gt;Visual Studio 2015 Update 3を&lt;/a&gt;&lt;/strong&gt;インストールしてください。 または、 &lt;code&gt;Tools | Extensions and Updates&lt;/code&gt; 使用します| Visual Studio 2015から直接Update 3に更新するための拡張機能と更新 。</target>
        </trans-unit>
        <trans-unit id="48ed7036b0a82e03171cab5edf597919553bb1d3" translate="yes">
          <source>If you don't provide a unit when specifying dimension, Angular assumes a default unit of pixels, or px. Expressing 50 pixels as &lt;code&gt;50&lt;/code&gt; is the same as saying &lt;code&gt;'50px'&lt;/code&gt;.</source>
          <target state="translated">寸法を指定するときに単位を指定しない場合、Angularはピクセルまたはピクセルのデフォルト単位を想定します。 50ピクセルを &lt;code&gt;50&lt;/code&gt; として表現することは、 &lt;code&gt;'50px'&lt;/code&gt; と言うことと同じです。</target>
        </trans-unit>
        <trans-unit id="d1b561dc3312390e8ea84f90f931f5ed36b0f473" translate="yes">
          <source>If you don't use the CLI, you have two options:</source>
          <target state="translated">CLIを使用しない場合、2つのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="5bc2f915897fc1447035a5647974d463c55c174d" translate="yes">
          <source>If you find that changes to your library are not reflected in your app, your app is probably using an old build of the library.</source>
          <target state="translated">ライブラリへの変更がアプリに反映されていない場合、アプリはおそらくライブラリの古いビルドを使用しています。</target>
        </trans-unit>
        <trans-unit id="3a8aa489382d8d4aec77f8acd02f621cf2ccce35" translate="yes">
          <source>If you find your application becomes unresponsive while processing data, using Web Workers can help.</source>
          <target state="translated">データの処理中にアプリケーションが応答しなくなった場合は、Web Workersを使用すると役立ちます。</target>
        </trans-unit>
        <trans-unit id="0433bd29313c70f90dc0cba136f09aa567988ee1" translate="yes">
          <source>If you get a template parse error when trying to use inputs or outputs, but you know that the properties do indeed exist, double check that your properties are annotated with &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; / &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; or that you've declared them in an &lt;code&gt;inputs&lt;/code&gt;/&lt;code&gt;outputs&lt;/code&gt; array:</source>
          <target state="translated">入力または出力を使用しようとしたときにテンプレート解析エラーが発生するが、プロパティが実際に存在することがわかっている場合は、プロパティに &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; / &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 注釈が付けられているか、または &lt;code&gt;inputs&lt;/code&gt; / &lt;code&gt;outputs&lt;/code&gt; 配列：</target>
        </trans-unit>
        <trans-unit id="574c59f8b77bf5e82b23eb72c796ed67b3d2fb05" translate="yes">
          <source>If you had any AngularJS services in the project, those would also be a good candidate for converting to classes, since like controllers, they're also constructor functions. But you only have the &lt;code&gt;Phone&lt;/code&gt; factory in this project, and that's a bit special since it's an &lt;code&gt;ngResource&lt;/code&gt; factory. So you won't be doing anything to it in the preparation stage. You'll instead turn it directly into an Angular service.</source>
          <target state="translated">プロジェクトにAngularJSサービスがあれば、それらはクラスの変換にも適しています。コントローラのように、それらはコンストラクタ関数でもあるからです。 ただし、このプロジェクトには &lt;code&gt;Phone&lt;/code&gt; ファクトリーしかありません。これは、 &lt;code&gt;ngResource&lt;/code&gt; ファクトリーなので少し特別です。 そのため、準備段階では何​​もしません。 代わりに、Angularサービスに直接変換します。</target>
        </trans-unit>
        <trans-unit id="1fed1253af78f190067c1aae4775c40631199cc8" translate="yes">
          <source>If you have a content-rich app, such as the Angular app that presents this documentation, custom elements let you give your content providers sophisticated Angular functionality without requiring knowledge of Angular. For example, an Angular guide like this one is added directly to the DOM by the Angular navigation tools, but can include special elements like &lt;code&gt;&amp;lt;code-snippet&amp;gt;&lt;/code&gt; that perform complex operations. All you need to tell your content provider is the syntax of your custom element. They don't need to know anything about Angular, or anything about your component's data structures or implementation.</source>
          <target state="translated">このドキュメントを提供するAngularアプリなどのコンテンツが豊富なアプリがある場合、カスタム要素を使用すると、Angularの知識を必要とせずに、コンテンツプロバイダーに高度なAngular機能を提供できます。 たとえば、このようなAngularガイドはAngularナビゲーションツールによってDOMに直接追加されますが、複雑な操作を実行する &lt;code&gt;&amp;lt;code-snippet&amp;gt;&lt;/code&gt; などの特別な要素を含めることができます。 コンテンツプロバイダーに伝える必要があるのは、カスタム要素の構文だけです。 彼らはAngularについて、またはコンポーネントのデータ構造や実装について何も知る必要はありません。</target>
        </trans-unit>
        <trans-unit id="f19944a29f8b906f6f0c8e4343ee837260ae1269" translate="yes">
          <source>If you have a floating image inside an alert, callout, or a subsection, it is a good idea to apply the &lt;code&gt;clear-fix&lt;/code&gt; class to the &lt;code&gt;div&lt;/code&gt; to ensure that the image doesn't overflow its container. For example:</source>
          <target state="translated">アラート、コールアウト、またはサブセクション内にフローティング画像がある場合は、 &lt;code&gt;clear-fix&lt;/code&gt; クラスを &lt;code&gt;div&lt;/code&gt; に適用して、画像がコンテナからあふれないようにすることをお勧めします。 例えば：</target>
        </trans-unit>
        <trans-unit id="6397857065b35ce89a9f398af1b26fb9b1516f71" translate="yes">
          <source>If you have developed functionality that is suitable for reuse, you can create your own libraries. These libraries can be used locally in your workspace, or you can publish them as &lt;a href=&quot;npm-packages&quot;&gt;npm packages&lt;/a&gt; to share with other projects or other Angular developers. These packages can be published to the npm registry, a private npm Enterprise registry, or a private package management system that supports npm packages. See &lt;a href=&quot;creating-libraries&quot;&gt;Creating Libraries&lt;/a&gt;.</source>
          <target state="translated">再利用に適した機能を開発している場合は、独自のライブラリを作成できます。 これらのライブラリは、ワークスペースでローカルに使用できます。または、 &lt;a href=&quot;npm-packages&quot;&gt;npmパッケージ&lt;/a&gt;として公開して、他のプロジェクトまたは他のAngular開発者と共有できます 。 これらのパッケージは、npmレジストリ、プライベートnpmエンタープライズレジストリ、またはnpmパッケージをサポートするプライベートパッケージ管理システムに公開できます。 &lt;a href=&quot;creating-libraries&quot;&gt;ライブラリの作成を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b1d5fced1eafeb19e09e69c636133d8617598ad9" translate="yes">
          <source>If you have more than two paragraphs, consider creating a new page or making it part of the main content.</source>
          <target state="translated">3つ以上の段落がある場合は、新しいページを作成するか、メインページの一部にすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="ce43e9168848245cd1d0950e4a6be2522d8f2b68" translate="yes">
          <source>If you have registered a provider for the same DI token at different levels, the first one Angular encounters is the one it uses to resolve the dependency. If, for example, a provider is registered locally in the component that needs a service, Angular doesn't look for another provider of the same service.</source>
          <target state="translated">異なるレベルで同じDIトークンのプロバイダーを登録した場合、Angularが最初に遭遇するのは、依存関係を解決するために使用するプロバイダーです。 たとえば、サービスを必要とするコンポーネントにプロバイダーがローカルに登録されている場合、Angularは同じサービスの別のプロバイダーを探しません。</target>
        </trans-unit>
        <trans-unit id="244fbbf115dfe5706448ffdb4e279457395f14e1" translate="yes">
          <source>If you haven't already, remove all references to the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;app.module.ts&lt;/code&gt;, as well as any &lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;factory provider&lt;/a&gt; for AngularJS services, and the &lt;code&gt;app/ajs-upgraded-providers.ts&lt;/code&gt; file.</source>
          <target state="translated">まだ行っていない場合は、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;app.module.ts&lt;/code&gt; へのすべての参照、AngularJSサービスの&lt;a href=&quot;upgrade#making-angularjs-dependencies-injectable-to-angular&quot;&gt;ファクトリプロバイダー&lt;/a&gt; 、および &lt;code&gt;app/ajs-upgraded-providers.ts&lt;/code&gt; ファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="4963feaec493218114281088952fb43b33cce3a9" translate="yes">
          <source>If you haven't created custom validators before, start by reviewing the &lt;a href=&quot;form-validation#custom-validators&quot;&gt;custom validators section&lt;/a&gt;.</source>
          <target state="translated">カスタムバリデーターを作成したことがない場合は、 &lt;a href=&quot;form-validation#custom-validators&quot;&gt;カスタムバリデーターセクションを確認してください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="7c789fcd7125f7745fca41c10481fb3d352702dd" translate="yes">
          <source>If you intend to have multiple projects in a workspace, you can skip the initial application generation when you create the workspace, and give the workspace a unique name. The following command creates a workspace with all of the workspace-wide configuration files, but no root-level application.</source>
          <target state="translated">ワークスペースに複数のプロジェクトがある場合は、ワークスペースを作成するときに最初のアプリケーション生成をスキップし、ワークスペースに一意の名前を付けることができます。 次のコマンドは、ワークスペース全体の構成ファイルをすべて含むワークスペースを作成しますが、ルートレベルのアプリケーションは作成しません。</target>
        </trans-unit>
        <trans-unit id="6ed99352b2d6234cc28fecffcc038922fe7627c2" translate="yes">
          <source>If you look at the &lt;code&gt;http-server&lt;/code&gt; logs, you can see the service worker requesting &lt;code&gt;/ngsw.json&lt;/code&gt;. This is how the service worker checks for updates.</source>
          <target state="translated">&lt;code&gt;http-server&lt;/code&gt; ログを見ると、サービスワーカーが &lt;code&gt;/ngsw.json&lt;/code&gt; をリクエストしていることがわかります。 これは、サービスワーカーが更新を確認する方法です。</target>
        </trans-unit>
        <trans-unit id="09c234e78616a8f1ab6267a5b6637fade99d397d" translate="yes">
          <source>If you look at the Network tab, you can verify that the service worker is active.</source>
          <target state="translated">[ネットワーク]タブを見ると、Service Workerがアクティブになっていることを確認できます。</target>
        </trans-unit>
        <trans-unit id="73a79269220380ef80051827e018d68abab94031" translate="yes">
          <source>If you look at the template for the name input again, it is fairly similar to the template-driven example.</source>
          <target state="translated">名前入力のテンプレートをもう一度見ると、テンプレート駆動型の例とかなり似ています。</target>
        </trans-unit>
        <trans-unit id="be1adaa34051feae1f602d2f495e70b203a2addd" translate="yes">
          <source>If you look in the Cache Storage viewer, the cache is frequently out of date. Right click the Cache Storage title and refresh the caches.</source>
          <target state="translated">キャッシュストレージビューアーを見ると、キャッシュが古くなっていることがよくあります。 [キャッシュストレージ]タイトルを右クリックして、キャッシュを更新します。</target>
        </trans-unit>
        <trans-unit id="e240ddeb830d887bc58d8e84732b2ed378e0c98b" translate="yes">
          <source>If you mean to lazy-load a module, be careful not import it in a file that's eagerly loaded when the app starts (such as the root &lt;code&gt;AppModule&lt;/code&gt;). If you do that, the module will be loaded immediately.</source>
          <target state="translated">モジュールを遅延ロードする場合は、アプリの起動時に熱心にロードされるファイル（ルート &lt;code&gt;AppModule&lt;/code&gt; など ）にモジュールをインポートしないように注意してください 。 それを行うと、モジュールはすぐにロードされます。</target>
        </trans-unit>
        <trans-unit id="dd2ad358ff3a296ca464afc454eed23c1c38e476" translate="yes">
          <source>If you must guard against this kind of &quot;provider corruption&quot;, &lt;em&gt;don't rely on a launch-time module's &lt;code&gt;providers&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">この種の「プロバイダーの破損」を防ぐ必要がある場合&lt;em&gt;は、起動時モジュールの &lt;code&gt;providers&lt;/code&gt; 依存しない&lt;/em&gt;で&lt;em&gt;ください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3304f68a08d3080d984d8dc5da4dcc423149911b" translate="yes">
          <source>If you must inject an instance of an ambient type, you can finesse the problem in four steps:</source>
          <target state="translated">アンビエントタイプのインスタンスを注入する必要がある場合、次の4つの手順で問題を解決できます。</target>
        </trans-unit>
        <trans-unit id="d7e18b086d212d4c106b0c8fad4ba48df8021509" translate="yes">
          <source>If you must load the module eagerly, when the application starts, &lt;em&gt;provide the service in a component instead.&lt;/em&gt;</source>
          <target state="translated">モジュールを熱心にロードする必要がある場合は、アプリケーションの起動時に、 &lt;em&gt;代わりにコンポーネントでサービスを提供してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e8ac82fe8517410b1d40420bd85029d758cdda8a" translate="yes">
          <source>If you must mutate the request body, copy it first, change the copy, &lt;code&gt;clone()&lt;/code&gt; the request, and set the clone's body with the new body, as in the following example.</source>
          <target state="translated">次の例のように、リクエスト本文を変更する必要がある場合は、まずコピーして、コピーを変更し、リクエストを &lt;code&gt;clone()&lt;/code&gt; て、クローンの本文を新しい本文に設定します。</target>
        </trans-unit>
        <trans-unit id="5deab0538bd8714b4af9c382cd8cc938823e841f" translate="yes">
          <source>If you must read a target element property or call one of its methods, see the API reference for &lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt; and &lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChild&lt;/a&gt;.</source>
          <target state="translated">ターゲット要素のプロパティを読み取るか、そのメソッドの1つを呼び出す必要がある場合は、 &lt;a href=&quot;../api/core/viewchild&quot;&gt;ViewChild&lt;/a&gt;および&lt;a href=&quot;../api/core/contentchild&quot;&gt;ContentChildの&lt;/a&gt; APIリファレンスを参照してください。</target>
        </trans-unit>
        <trans-unit id="4c8d2326e60e33ffa20c7c4182475e5223e4a351" translate="yes">
          <source>If you need an &lt;em&gt;optional&lt;/em&gt; polyfill, you must install its npm package, then uncomment or create the corresponding import statement in the &lt;code&gt;src/polyfills.ts&lt;/code&gt; configuration file.</source>
          <target state="translated">&lt;em&gt;オプションの&lt;/em&gt;ポリフィルが必要な場合は、npmパッケージをインストールしてから、 &lt;code&gt;src/polyfills.ts&lt;/code&gt; 構成ファイルで対応するインポートステートメントのコメントを解除するか作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="2e3109a970d92c304a276ac634765200cb2660a8" translate="yes">
          <source>If you need to access a backend that is not on &lt;code&gt;localhost&lt;/code&gt;, set the &lt;code&gt;changeOrigin&lt;/code&gt; option as well. For example:</source>
          <target state="translated">&lt;code&gt;localhost&lt;/code&gt; 上にないバックエンドにアクセスする必要がある場合は、 &lt;code&gt;changeOrigin&lt;/code&gt; オプションも設定します。 例えば：</target>
        </trans-unit>
        <trans-unit id="7385333e0134701bca8a7465de13704c98317745" translate="yes">
          <source>If you need to avoid randomly generated value to be used as an application id, you can provide a custom value via a DI provider  configuring the root &lt;a href=&quot;injector&quot;&gt;&lt;code&gt;Injector&lt;/code&gt;&lt;/a&gt; using this token.</source>
          <target state="translated">ランダムに生成された値がアプリケーションIDとして使用されるのを避ける必要がある場合、このトークンを使用してルート&lt;a href=&quot;injector&quot;&gt; &lt;code&gt;Injector&lt;/code&gt; &lt;/a&gt;を構成するDIプロバイダーを介してカスタム値を提供できます。</target>
        </trans-unit>
        <trans-unit id="9f78d5b2a7cf462a861acdc7e39dc21266ddf374" translate="yes">
          <source>If you need to convert user input into a trusted value, use a controller method. The following template allows users to enter a YouTube video ID and load the corresponding video in an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt; attribute is a resource URL security context, because an untrusted source can, for example, smuggle in file downloads that unsuspecting users could execute. So call a method on the controller to construct a trusted video URL, which causes Angular to allow binding into &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">ユーザー入力を信頼できる値に変換する必要がある場合は、コントローラーメソッドを使用します。 次のテンプレートを使用すると、ユーザーはYouTube動画IDを入力し、対応する動画を &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; に読み込むことができます。 &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt; 属性はリソースURLセキュリティコンテキストです。これは、信頼できないソースが、たとえば、疑いを持たないユーザーが実行できるファイルダウンロードを密輸できるためです。 コントローラのメソッドを呼び出して、信頼できるビデオURLを作成します。これにより、Angularは &lt;code&gt;&amp;lt;iframe src&amp;gt;&lt;/code&gt; へのバインドを許可します 。</target>
        </trans-unit>
        <trans-unit id="a3250f2b9a593c69bfc2b1d2c08f0d20870d9f6a" translate="yes">
          <source>If you need to opt-out from using Bazel, you can restore the backup files:</source>
          <target state="translated">Bazelの使用をオプトアウトする必要がある場合、バックアップファイルを復元できます。</target>
        </trans-unit>
        <trans-unit id="6bb9cbf31fbab37e1847d62faf286db820a17f95" translate="yes">
          <source>If you need to optionally bypass the proxy, or dynamically change the request before it's sent, add the bypass option, as shown in this JavaScript example.</source>
          <target state="translated">オプションでプロキシをバイパスする必要がある場合、またはリクエストを送信前に動的に変更する必要がある場合は、このJavaScriptの例に示すようにバイパスオプションを追加します。</target>
        </trans-unit>
        <trans-unit id="9ebc63e4b9f1212654ea17d217d2e04a30598b57" translate="yes">
          <source>If you need to respond to duplicate requests in your test, use the &lt;code&gt;match()&lt;/code&gt; API instead of &lt;code&gt;expectOne()&lt;/code&gt;. It takes the same arguments but returns an array of matching requests. Once returned, these requests are removed from future matching and you are responsible for flushing and verifying them.</source>
          <target state="translated">テストで重複したリクエストに応答する必要がある場合は、 &lt;code&gt;expectOne()&lt;/code&gt; ではなく &lt;code&gt;match()&lt;/code&gt; APIを使用します。 同じ引数を取りますが、一致するリクエストの配列を返します。 返されると、これらのリクエストは将来のマッチングから削除され、それらをフラッシュして検証する責任があります。</target>
        </trans-unit>
        <trans-unit id="04c73ded6e0a3395b3dfd9ed41d7828a67bbbf93" translate="yes">
          <source>If you need to see what events are happening during the navigation lifecycle, there is the &lt;strong&gt;enableTracing&lt;/strong&gt; option as part of the router's default configuration. This outputs each router event that took place during each navigation lifecycle to the browser console. This should only be used for &lt;em&gt;debugging&lt;/em&gt; purposes. You set the &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;: true&lt;/code&gt; option in the object passed as the second argument to the &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">ナビゲーションライフサイクル中に発生しているイベントを確認する必要がある場合は、ルーターのデフォルト構成の一部として&lt;strong&gt;enableTracing&lt;/strong&gt;オプションがあります。 これにより、各ナビゲーションライフサイクル中に発生した各ルーターイベントがブラウザーコンソールに出力されます。 これは&lt;em&gt;デバッグ&lt;/em&gt;目的でのみ使用してください。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; メソッドに2番目の引数として渡されるオブジェクトに &lt;code&gt;&lt;a href=&quot;../api/router/extraoptions#enableTracing&quot;&gt;enableTracing&lt;/a&gt;: true&lt;/code&gt; オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="05239027809e9357cdeac1b33f2e9f9ad3528fa3" translate="yes">
          <source>If you neglect to &lt;code&gt;subscribe()&lt;/code&gt;, the service will not send the delete request to the server. As a rule, an &lt;code&gt;Observable&lt;/code&gt;&lt;em&gt;does nothing&lt;/em&gt; until something subscribes.</source>
          <target state="translated">&lt;code&gt;subscribe()&lt;/code&gt; を怠ると、サービスは削除要求をサーバーに送信しません。 原則として、 &lt;code&gt;Observable&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;何かがサブスクライブするまで何&lt;em&gt;もしません&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="2bb56c6624ae91a5bea7e0fafc4658c9a36bf145" translate="yes">
          <source>If you neglect to declare them, the Angular compiler won't recognize the &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; tags in the &lt;code&gt;AppComponent&lt;/code&gt; template and will throw an error.</source>
          <target state="translated">宣言を怠ると、Angularコンパイラーは &lt;code&gt;AppComponent&lt;/code&gt; テンプレートの &lt;code&gt;&amp;lt;app-banner&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;app-welcome&amp;gt;&lt;/code&gt; 、および &lt;code&gt;&amp;lt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;router-outlet&lt;/a&gt;&amp;gt;&lt;/code&gt; タグを認識せず、エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="71dab46c6a678dfa01d392650ea86b654326f74b" translate="yes">
          <source>If you neglect to make the test function async (e.g., forget to use &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; as described below), you'll see this error message</source>
          <target state="translated">テスト関数を非同期にすることを怠ると（たとえば、以下で説明するように &lt;code&gt;&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 使用を忘れるなど）、このエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="a16062c9a5d0f73bb6c757b4c2accd4e8ddb5ef7" translate="yes">
          <source>If you now add &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; (in addition to the &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;) to the &lt;code&gt;@&lt;a href=&quot;../api/core/inject&quot;&gt;Inject&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;FlowerService&lt;/code&gt;, the result will be &lt;code&gt;null&lt;/code&gt;. This is because &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; limits the upper bound of the search to the &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt;. Here's the idea in the logical tree:</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; に加えて &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; を追加すると、結果は &lt;code&gt;null&lt;/code&gt; になります 。 これは、 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; が検索の上限を &lt;code&gt;&amp;lt;#VIEW&amp;gt;&lt;/code&gt; に制限するためです。 論理ツリーの考え方は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="81d30c47f20d917822d2488c8b61db4df77908bc" translate="yes">
          <source>If you pass the command a set of libraries to update (or the &lt;code&gt;--all&lt;/code&gt; flag), it updates those libraries, their peer dependencies, and the peer dependencies that depend on them.</source>
          <target state="translated">コマンドに更新するライブラリのセット（または &lt;code&gt;--all&lt;/code&gt; フラグ）を渡すと、それらのライブラリ、それらのピア依存関係、およびそれらに依存するピア依存関係が更新されます。</target>
        </trans-unit>
        <trans-unit id="1bea4d710733901849b05721b28d48be60b80605" translate="yes">
          <source>If you paste &lt;code&gt;localhost:4200/detail/11&lt;/code&gt; in the browser address bar, the router navigates to the detail view for the hero with &lt;code&gt;id: 11&lt;/code&gt;, &quot;Dr Nice&quot;.</source>
          <target state="translated">&lt;code&gt;localhost:4200/detail/11&lt;/code&gt; をブラウザーのアドレスバーに貼り付けると、ルーターは &lt;code&gt;id: 11&lt;/code&gt; 「Dr Nice」のヒーローの詳細ビューに移動します。</target>
        </trans-unit>
        <trans-unit id="a7f498a38745493c47fdb50885cc56ca61f9d272" translate="yes">
          <source>If you plan to have multiple apps in the workspace, you can create an empty workspace by setting the &lt;code&gt;--createApplication&lt;/code&gt; option to false. You can then use &lt;code&gt;ng generate application&lt;/code&gt; to create an initial app. This allows a workspace name different from the initial app name, and ensures that all apps reside in the &lt;code&gt;/projects&lt;/code&gt; subfolder, matching the structure of the configuration file.</source>
          <target state="translated">ワークスペースに複数のアプリを配置する予定の場合は、 &lt;code&gt;--createApplication&lt;/code&gt; オプションをfalseに設定して空のワークスペースを作成できます。 その後、 &lt;code&gt;ng generate application&lt;/code&gt; を使用して初期アプリを作成できます。 これにより、最初のアプリ名とは異なるワークスペース名が許可され、すべてのアプリが &lt;code&gt;/projects&lt;/code&gt; サブフォルダーに存在し、構成ファイルの構造と一致することが保証されます。</target>
        </trans-unit>
        <trans-unit id="2c9da46a1c1c85d39407dcd30d927647ba079020" translate="yes">
          <source>If you plan to use specific animation functions in component files, import those functions from &lt;code&gt;@angular/animations&lt;/code&gt;.</source>
          <target state="translated">コンポーネントファイルで特定のアニメーション関数を使用する場合は、それらの関数を &lt;code&gt;@angular/animations&lt;/code&gt; からインポートします。</target>
        </trans-unit>
        <trans-unit id="058a384d58caba78f973912e1c7261709321db73" translate="yes">
          <source>If you prefer a &lt;code&gt;File | New Project&lt;/code&gt; experience and are using &lt;strong&gt;ASP.NET Core&lt;/strong&gt;, then consider the &lt;em&gt;experimental&lt;/em&gt;&lt;a href=&quot;http://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/&quot;&gt;ASP.NET Core + Angular template for Visual Studio 2015&lt;/a&gt;. Note that the resulting code does not map to the docs. Adjust accordingly.</source>
          <target state="translated">&lt;code&gt;File | New Project&lt;/code&gt; を希望する場合| 新しいプロジェクトエクスペリエンスで&lt;strong&gt;ASP.NET Core&lt;/strong&gt;を使用している場合は&lt;a href=&quot;http://blog.stevensanderson.com/2016/10/04/angular2-template-for-visual-studio/&quot;&gt;、Visual Studio 2015用の&lt;/a&gt; &lt;em&gt;実験的な&lt;/em&gt; ASP.NET Core + Angularテンプレートを検討してください 。 結果のコードはドキュメントにマッピングされないことに注意してください。 それに応じて調整します。</target>
        </trans-unit>
        <trans-unit id="40537ceb386711b8d7aebae59078f6588b332d47" translate="yes">
          <source>If you provided &lt;code&gt;VillainsService&lt;/code&gt; in the root &lt;code&gt;AppModule&lt;/code&gt; (where you registered the &lt;code&gt;HeroesService&lt;/code&gt;), that would make the &lt;code&gt;VillainsService&lt;/code&gt; visible everywhere in the application, including the &lt;em&gt;Hero&lt;/em&gt; workflows. If you later modified the &lt;code&gt;VillainsService&lt;/code&gt;, you could break something in a hero component somewhere.</source>
          <target state="translated">ルート &lt;code&gt;AppModule&lt;/code&gt; （ HeroesServiceを登録した &lt;code&gt;HeroesService&lt;/code&gt; ）で &lt;code&gt;VillainsService&lt;/code&gt; を提供した場合、 &lt;em&gt;Hero&lt;/em&gt;ワークフローを含むアプリケーション内のどこにでも &lt;code&gt;VillainsService&lt;/code&gt; が表示されます。 後で &lt;code&gt;VillainsService&lt;/code&gt; を変更した場合、ヒーローコンポーネントのどこかで何かを壊す可能性があります。</target>
        </trans-unit>
        <trans-unit id="34e894d4b2433bfdb374e1411f1d2796623ea1fa" translate="yes">
          <source>If you ran the app now and started typing in the &lt;em&gt;Name&lt;/em&gt; input box, adding and deleting characters, you'd see them appear and disappear from the interpolated text. At some point it might look like this:</source>
          <target state="translated">ここでアプリを実行して、[ &lt;em&gt;名前]&lt;/em&gt;入力ボックスに入力し、文字を追加および削除すると、補間されたテキストに文字が表示されたり消えたりするのがわかります。 ある時点で、次のようになります。</target>
        </trans-unit>
        <trans-unit id="eef190ef5d0b1e7b6837c2e3d11da6d23edc990e" translate="yes">
          <source>If you register global service providers or share providers across multiple NgModules, use the &lt;a href=&quot;singleton-services&quot;&gt;&lt;code&gt;forRoot()&lt;/code&gt; and &lt;code&gt;forChild()&lt;/code&gt; patterns&lt;/a&gt; provided by the &lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;.</source>
          <target state="translated">グローバルサービスプロバイダーを登録するか、複数のNgModuleでプロバイダーを共有する場合、 &lt;a href=&quot;singleton-services&quot;&gt; &lt;code&gt;forRoot()&lt;/code&gt; &lt;/a&gt;提供するforRoot（）および &lt;code&gt;forChild()&lt;/code&gt; パターンを &lt;a href=&quot;../api/router/routermodule&quot;&gt;使用し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ddd4700cea7271c0c90205b90dda623d6197e16f" translate="yes">
          <source>If you restore the &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; decorator and comment out &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt;, the app throws an exception when it cannot find the required logger at the host component level.</source>
          <target state="translated">&lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; デコレータを復元し、 @ &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;&lt;/code&gt; をコメントアウトすると、ホストコンポーネントレベルで必要なロガーが見つからない場合、アプリは例外をスローします。</target>
        </trans-unit>
        <trans-unit id="33bb5c55ad4aa9d09fe4482cd02e6d0fd59b9479" translate="yes">
          <source>If you run other &lt;code&gt;macroTask&lt;/code&gt; such as &lt;code&gt;HTMLCanvasElement.toBlob()&lt;/code&gt;, &lt;code&gt;Unknown macroTask scheduled in fake &lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt; test&lt;/code&gt; error will be thrown.</source>
          <target state="translated">&lt;code&gt;HTMLCanvasElement.toBlob()&lt;/code&gt; などの他の &lt;code&gt;macroTask&lt;/code&gt; を実行すると &lt;code&gt;Unknown macroTask scheduled in fake &lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt; test&lt;/code&gt; エラーでスケジュールされたUnknown macroTaskがスローされます。</target>
        </trans-unit>
        <trans-unit id="3f9f75108fc42c095c35521bcb513aee44b2b9d0" translate="yes">
          <source>If you run tests in a &lt;strong&gt;non-CLI environment&lt;/strong&gt;, the tests may fail with a message like this one:</source>
          <target state="translated">&lt;strong&gt;非CLI環境&lt;/strong&gt;でテストを実行すると、次のようなメッセージでテストが失敗する場合があります。</target>
        </trans-unit>
        <trans-unit id="d43bbf23fa3e23d5c174913c8419dd08b9a38280" translate="yes">
          <source>If you run the app now and change every hero model property, the form might display like this:</source>
          <target state="translated">今すぐアプリを実行して、すべてのヒーローモデルプロパティを変更すると、フォームは次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="65b31d00b7e322159d3096cefef0ef38c3b1e7fc" translate="yes">
          <source>If you run the application now, you find that the button is enabled&amp;mdash;although it doesn't do anything useful yet.</source>
          <target state="translated">ここでアプリケーションを実行すると、ボタンは有効になっていますが、まだ何の役にも立ちません。</target>
        </trans-unit>
        <trans-unit id="1afbfd71a7b0f3746a5b9d786267c74b5e8c9f70" translate="yes">
          <source>If you tell the router to navigate to the detail component and display &quot;Magneta&quot;, you expect a hero id to appear in the browser URL like this:</source>
          <target state="translated">ルーターに詳細コンポーネントに移動して「Magneta」を表示するように指示すると、ブラウザのURLに次のようなヒーローIDが表示されるはずです。</target>
        </trans-unit>
        <trans-unit id="8dddbeadfd16ceb49ed31d2988e2ee1b9782e74c" translate="yes">
          <source>If you think you'll reuse this debouncing logic, consider moving it to a utility function or into the &lt;code&gt;PackageSearchService&lt;/code&gt; itself.</source>
          <target state="translated">このデバウンスロジックを再利用すると思われる場合は、ユーティリティ関数または &lt;code&gt;PackageSearchService&lt;/code&gt; 自体に移動することを検討してください。</target>
        </trans-unit>
        <trans-unit id="d7a151abe2fd8d0a7aaa7a6bd6a8df4082f73f7c" translate="yes">
          <source>If you throttle your network speed so that the client-side scripts take longer to download (instructions below), you'll notice:</source>
          <target state="translated">クライアント側のスクリプトのダウンロードに時間がかかるようにネットワーク速度を調整すると（以下の手順）、気づくでしょう：</target>
        </trans-unit>
        <trans-unit id="92b0949b67e72c8422501e07cc4ce8c75521a33c" translate="yes">
          <source>If you try to alias &lt;code&gt;OldLogger&lt;/code&gt; to &lt;code&gt;NewLogger&lt;/code&gt; with &lt;code&gt;useClass&lt;/code&gt;, you end up with two different &lt;code&gt;NewLogger&lt;/code&gt; instances in your app.</source>
          <target state="translated">&lt;code&gt;OldLogger&lt;/code&gt; を &lt;code&gt;NewLogger&lt;/code&gt; してOldLoggerをNewLoggerにエイリアスしようとすると、アプリに2つの異なる &lt;code&gt;NewLogger&lt;/code&gt; インスタンスが作成されます。</target>
        </trans-unit>
        <trans-unit id="b1333d31e83b576427ff734b7c88ade3261f5d51" translate="yes">
          <source>If you upgrade this component and use it from Angular, you can populate the component tag with contents that will then get transcluded:</source>
          <target state="translated">このコンポーネントをアップグレードし、Angularから使用する場合、コンポーネントタグにコンテンツを入力して、トランスクルードすることができます。</target>
        </trans-unit>
        <trans-unit id="5229aaba988a521b48efab8fecc2aefe3f2fe23e" translate="yes">
          <source>If you use &lt;code&gt;NgFor&lt;/code&gt; with large lists, a small change to one item, such as removing or adding an item, can trigger a cascade of DOM manipulations. For example, re-querying the server could reset a list with all new item objects, even when those items were previously displayed. In this case, Angular sees only a fresh list of new object references and has no choice but to replace the old DOM elements with all new DOM elements.</source>
          <target state="translated">&lt;code&gt;NgFor&lt;/code&gt; を大きなリストで使用する場合、アイテムの削除や追加など、1つのアイテムに小さな変更を加えると、DOM操作のカスケードがトリガーされる可能性があります。 たとえば、サーバーに再クエリを実行すると、それらのアイテムが以前に表示されていた場合でも、すべての新しいアイテムオブジェクトでリストをリセットできます。 この場合、Angularは新しいオブジェクト参照の新しいリストのみを参照し、古いDOM要素をすべての新しいDOM要素で置き換える以外に選択肢はありません。</target>
        </trans-unit>
        <trans-unit id="a75130a39257f6837aa70edb1e7ee3064bb9921f" translate="yes">
          <source>If you use dynamic values to generate the link, you can pass an array of path segments, followed by the params for each segment.</source>
          <target state="translated">動的な値を使用してリンクを生成する場合、パスセグメントの配列を渡し、その後に各セグメントのパラメーターを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="95db25e1e7afc248a2cd0fe9b287c943fda5d02b" translate="yes">
          <source>If you use the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt; to generate an app, the default &lt;code&gt;AppModule&lt;/code&gt; is as follows:</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;を使用してアプリを生成する場合、デフォルトの &lt;code&gt;AppModule&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a6967c4ab3b314fa46aff194dc20ed6a9dd2b60b" translate="yes">
          <source>If you use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; helper function to run unit tests (for details, read the &lt;a href=&quot;testing#async-test-with-fakeasync&quot;&gt;Testing guide&lt;/a&gt;), you need to import &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; in your test setup file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; ヘルパー関数を使用してユニットテストを実行する場合（詳細については、 &lt;a href=&quot;testing#async-test-with-fakeasync&quot;&gt;テストガイド&lt;/a&gt;を参照してください ）、テストセットアップファイルに &lt;code&gt;zone.js/dist/zone-testing&lt;/code&gt; をインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="b72f1ab9aecc24257c6414e938470c94360b2550" translate="yes">
          <source>If you use the Angular CLI, configure this flag in &lt;code&gt;src/test.ts&lt;/code&gt;.</source>
          <target state="translated">Angular CLIを使用する場合は、 &lt;code&gt;src/test.ts&lt;/code&gt; でこのフラグを構成します。</target>
        </trans-unit>
        <trans-unit id="6d271b502194e43198b4eb10238cbab362121ae6" translate="yes">
          <source>If you use the JIT compiler, specify the warning level in the compiler config at bootstrap by adding the 'MissingTranslationStrategy' property. The example below shows how to set the warning level to error.</source>
          <target state="translated">JITコンパイラーを使用する場合、「MissingTranslationStrategy」プロパティーを追加して、ブートストラップのコンパイラー構成で警告レベルを指定します。 次の例は、警告レベルをエラーに設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ce978a5f13cee676ff853adc3785a5db0dc00166" translate="yes">
          <source>If you use the following deprecated i18n pipes: &lt;a href=&quot;../api/common/deprecateddatepipe&quot;&gt;date&lt;/a&gt;, &lt;a href=&quot;../api/common/deprecatedcurrencypipe&quot;&gt;currency&lt;/a&gt;, &lt;a href=&quot;../api/common/deprecateddecimalpipe&quot;&gt;decimal&lt;/a&gt;, &lt;a href=&quot;../api/common/deprecatedpercentpipe&quot;&gt;percent&lt;/a&gt;</source>
          <target state="translated">次の非推奨のi18nパイプを使用する場合： &lt;a href=&quot;../api/common/deprecateddatepipe&quot;&gt;date&lt;/a&gt; 、 &lt;a href=&quot;../api/common/deprecatedcurrencypipe&quot;&gt;currency&lt;/a&gt; 、 &lt;a href=&quot;../api/common/deprecateddecimalpipe&quot;&gt;decimal&lt;/a&gt; 、 &lt;a href=&quot;../api/common/deprecatedpercentpipe&quot;&gt;percent&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c4bd37b0cb03c780077913bd95b8118fa17a9f1d" translate="yes">
          <source>If you want &lt;code&gt;ngc&lt;/code&gt; to report syntax errors immediately rather than produce a &lt;code&gt;.metadata.json&lt;/code&gt; file with errors, set the &lt;code&gt;strictMetadataEmit&lt;/code&gt; option in the TypeScript configuration file, &lt;code&gt;tsconfig.json&lt;/code&gt;.</source>
          <target state="translated">エラーのある &lt;code&gt;.metadata.json&lt;/code&gt; ファイルを生成するのではなく、 ngcがすぐに構文エラーを報告するようにするには、TypeScript構成ファイル &lt;code&gt;strictMetadataEmit&lt;/code&gt; オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="9181cff9d2f0ac3faceb9204a24748172c73f1ab" translate="yes">
          <source>If you want a particular piece of code to trigger change detection in the AngularJS part of the app, you need to wrap it in &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24apply&quot;&gt;scope.$apply()&lt;/a&gt;. Similarly, for triggering change detection in Angular you would use &lt;a href=&quot;../api/core/ngzone#run&quot;&gt;ngZone.run()&lt;/a&gt;.</source>
          <target state="translated">特定のコードでアプリのAngularJS部分の変更検出をトリガーする場合は、 &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/%24rootScope.Scope#%24apply&quot;&gt;scope。$ apply（）で&lt;/a&gt;ラップする必要があります 。 同様に、Angularで変更検出をトリガーするには、 &lt;a href=&quot;../api/core/ngzone#run&quot;&gt;ngZone.run（）&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="2c3fae0cd6000e2662a9b617f542c44356a243f5" translate="yes">
          <source>If you want changes to persist, you must write them back to the server.</source>
          <target state="translated">変更を保持したい場合は、サーバーに書き戻す必要があります。</target>
        </trans-unit>
        <trans-unit id="52bcde3eec9eaea3236dc449439b8e942dbe703e" translate="yes">
          <source>If you want some injectables to be shared among all downgraded modules, you can provide them as &lt;code&gt;&lt;a href=&quot;../../core/staticprovider&quot;&gt;StaticProvider&lt;/a&gt;&lt;/code&gt;s, when creating the &lt;code&gt;&lt;a href=&quot;../../core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; (e.g. via &lt;code&gt;&lt;a href=&quot;../../platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">ダウングレードされたすべてのモジュール間で一部の &lt;code&gt;&lt;a href=&quot;../../core/staticprovider&quot;&gt;StaticProvider&lt;/a&gt;&lt;/code&gt; 共有する場合、 &lt;code&gt;&lt;a href=&quot;../../core/platformref&quot;&gt;PlatformRef&lt;/a&gt;&lt;/code&gt; を作成するときに（たとえば、 &lt;code&gt;&lt;a href=&quot;../../platform-browser/platformbrowser&quot;&gt;platformBrowser&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../../platform-browser-dynamic/platformbrowserdynamic&quot;&gt;platformBrowserDynamic&lt;/a&gt;&lt;/code&gt; を介して） StaticProviderとしてそれらを提供できます。</target>
        </trans-unit>
        <trans-unit id="05f65a50533a43590941f359728f24c16a80ebbd" translate="yes">
          <source>If you want to create code-coverage reports every time you test, you can set the following option in the CLI configuration file, &lt;code&gt;angular.json&lt;/code&gt;:</source>
          <target state="translated">テストのたびにコードカバレッジレポートを作成する場合は、CLI構成ファイル &lt;code&gt;angular.json&lt;/code&gt; で次のオプションを設定できます。</target>
        </trans-unit>
        <trans-unit id="7751b871f96409ec0fd06919c70ee1e168709cf2" translate="yes">
          <source>If you want to execute something when the app is stable, you have to wait for the application to be stable before starting your polling process.</source>
          <target state="translated">アプリが安定しているときに何かを実行したい場合は、ポーリングプロセスを開始する前に、アプリケーションが安定するまで待つ必要があります。</target>
        </trans-unit>
        <trans-unit id="72f364ed3fa3f7c00f99fac9b35717046eda7479" translate="yes">
          <source>If you want to import locale data for other languages, you can do it manually:</source>
          <target state="translated">他の言語のロケールデータをインポートする場合は、手動でインポートできます。</target>
        </trans-unit>
        <trans-unit id="b1c4888fd74929044c99840ccfb42fc5c433838a" translate="yes">
          <source>If you want to preload a module &lt;em&gt;and&lt;/em&gt; guard against unauthorized access, drop the &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; guard method and rely on the &lt;a href=&quot;router#can-activate-guard&quot;&gt;canActivate()&lt;/a&gt; guard alone.</source>
          <target state="translated">モジュールをプリロードして不正アクセスを &lt;code&gt;&lt;a href=&quot;../api/router/route#canLoad&quot;&gt;canLoad&lt;/a&gt;()&lt;/code&gt; する場合は、 canLoad （）ガードメソッドを&lt;a href=&quot;router#can-activate-guard&quot;&gt;削除&lt;/a&gt;し、 canActivate（）ガードのみに依存してください 。</target>
        </trans-unit>
        <trans-unit id="e574770511b728920629db82475c655722befaa3" translate="yes">
          <source>If you want to produce a progressive web app and are using &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Lighthouse&lt;/a&gt; to grade the project, add the following &lt;code&gt;browserslist&lt;/code&gt; entry to your &lt;code&gt;package.json&lt;/code&gt; file, in order to eliminate the &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/old-flexbox&quot;&gt;old flexbox&lt;/a&gt; prefixes:</source>
          <target state="translated">プログレッシブWebアプリを作成し、 &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/&quot;&gt;Lighthouse&lt;/a&gt;を使用してプロジェクトを評価する場合は、次の &lt;code&gt;browserslist&lt;/code&gt; エントリを &lt;code&gt;package.json&lt;/code&gt; ファイルに追加して、 &lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/audits/old-flexbox&quot;&gt;古いフレックスボックス&lt;/a&gt;プレフィックスを削除します。</target>
        </trans-unit>
        <trans-unit id="9654c2a4c45b0218af8cbaae154038e0b00ad445" translate="yes">
          <source>If you want to run ES5 code during development, you could disable differential loading completely. To maintain the benefits of differential loading, however, a better option is to define multiple configurations for &lt;code&gt;ng serve&lt;/code&gt;, &lt;code&gt;ng e2e&lt;/code&gt;, and &lt;code&gt;ng test&lt;/code&gt;.</source>
          <target state="translated">開発中にES5コードを実行する場合は、差分ロードを完全に無効にすることができます。 ただし、差動負荷の利点を維持するには、 &lt;code&gt;ng serve&lt;/code&gt; 、 &lt;code&gt;ng e2e&lt;/code&gt; 、および &lt;code&gt;ng test&lt;/code&gt; の複数の構成を定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5d7009f42e7627d060101333c56524a2c640bb2d" translate="yes">
          <source>If you want to support such a case, you need to define the &lt;code&gt;macroTask&lt;/code&gt; you want to support in &lt;code&gt;beforeEach()&lt;/code&gt;. For example:</source>
          <target state="translated">そのような場合をサポートする場合は、 &lt;code&gt;beforeEach()&lt;/code&gt; サポートするmacroTaskを定義する必要があります。 例えば：</target>
        </trans-unit>
        <trans-unit id="6c98ab8bb06c1699ee5d9fd496aa7660ad732c8b" translate="yes">
          <source>If you want to use this component from AngularJS, you need to &lt;em&gt;downgrade&lt;/em&gt; it using the &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; method. The result is an AngularJS &lt;em&gt;directive&lt;/em&gt;, which you can then register in the AngularJS module:</source>
          <target state="translated">AngularJSのこのコンポーネントを使用する場合は、 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;()&lt;/code&gt; メソッドを使用してダウン &lt;em&gt;グレード&lt;/em&gt;する必要があります。 結果はAngularJS &lt;em&gt;ディレクティブ&lt;/em&gt;になり、AngularJSモジュールに登録できます：</target>
        </trans-unit>
        <trans-unit id="4fb183e6a6ca4b3daf2ebb1dcb39b4bdc36e09a2" translate="yes">
          <source>If you wanted to, you could redefine the &lt;code&gt;AppComponent&lt;/code&gt; template with &lt;em&gt;Crisis Center&lt;/em&gt; routes exclusively:</source>
          <target state="translated">必要に &lt;code&gt;AppComponent&lt;/code&gt; て、 &lt;em&gt;Crisis Center&lt;/em&gt;ルートのみでAppComponentテンプレートを再定義できます。</target>
        </trans-unit>
        <trans-unit id="1a47d1cb386ad250a0bc5d99819cbf7f3ff10e68" translate="yes">
          <source>If you were translating to other languages, you would repeat these steps for each target language.</source>
          <target state="translated">他の言語に翻訳している場合は、ターゲット言語ごとにこれらの手順を繰り返します。</target>
        </trans-unit>
        <trans-unit id="9374a8c08fe1c474c361e4aaa7e0f9b479d03bd7" translate="yes">
          <source>If you work behind a corporate proxy, the backend cannot directly proxy calls to any URL outside your local network. In this case, you can configure the backend proxy to redirect calls through your corporate proxy using an agent:</source>
          <target state="translated">企業プロキシの背後で作業している場合、バックエンドはローカルネットワーク外のURLへの呼び出しを直接プロキシできません。 この場合、エージェントを使用して企業プロキシを介してコールをリダイレクトするようにバックエンドプロキシを設定できます。</target>
        </trans-unit>
        <trans-unit id="12d0a113abd4c3fccdbb49cb154c353de7ca8ffc" translate="yes">
          <source>If you wrote something like this:</source>
          <target state="translated">このようなものを書いた場合：</target>
        </trans-unit>
        <trans-unit id="21014f48c5ba788700f412d0e8fe50ad6d65a568" translate="yes">
          <source>If you'd like to use something other than &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;, you can configure the interpolation delimiter via the &lt;a href=&quot;../api/core/component#interpolation&quot;&gt;interpolation&lt;/a&gt; option in the &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata.</source>
          <target state="translated">&lt;code&gt;{{&lt;/code&gt; および &lt;code&gt;}}&lt;/code&gt; 以外のものを使用&lt;a href=&quot;../api/core/component#interpolation&quot;&gt;する&lt;/a&gt;場合は、 &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; メタデータの内挿オプションを使用して内挿区切り文字を構成できます。</target>
        </trans-unit>
        <trans-unit id="bf74ecdbbfc67de6df0331823b22e879c6590cb2" translate="yes">
          <source>If you're building with the CLI, you can write style files in &lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt;, or &lt;a href=&quot;http://stylus-lang.com/&quot;&gt;stylus&lt;/a&gt; and specify those files in the &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; metadata with the appropriate extensions (&lt;code&gt;.scss&lt;/code&gt;, &lt;code&gt;.less&lt;/code&gt;, &lt;code&gt;.styl&lt;/code&gt;) as in the following example:</source>
          <target state="translated">CLIを使用してビルドする場合、スタイルファイルを&lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass&lt;/a&gt; 、 &lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt; 、または&lt;a href=&quot;http://stylus-lang.com/&quot;&gt;stylus&lt;/a&gt;で記述し、次のように &lt;code&gt;@&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;Component.styleUrls&lt;/a&gt;&lt;/code&gt; メタデータで適切な拡張子（ &lt;code&gt;.scss&lt;/code&gt; 、 &lt;code&gt;.less&lt;/code&gt; 、 &lt;code&gt;.styl&lt;/code&gt; ）でそれらのファイルを指定できます例：</target>
        </trans-unit>
        <trans-unit id="c72a02ff92e827a8fbee6caf4e7a5b90fac5a766" translate="yes">
          <source>If you're deploying to a self-managed server or there's no builder for your favorite cloud platform, you can either create a builder that allows you to use the &lt;code&gt;ng deploy&lt;/code&gt; command, or read through this guide to learn how to manually deploy your app.</source>
          <target state="translated">自己管理サーバーにデプロイする場合、またはお気に入りのクラウドプラットフォーム用のビルダーがない場合は、 &lt;code&gt;ng deploy&lt;/code&gt; コマンドを使用できるビルダーを作成するか、このガイドを読んでアプリを手動でデプロイする方法を学習できます。</target>
        </trans-unit>
        <trans-unit id="6ef5fa39f7f818bc7d60070f619114bc8c792d6e" translate="yes">
          <source>If you're following along with these code snippets, note that you must import the RxJS observable and operator symbols that appear in those snippets. These &lt;code&gt;ConfigService&lt;/code&gt; imports are typical.</source>
          <target state="translated">これらのコードスニペットを使用している場合は、これらのスニペットに表示されるRxJSオブザーバブルシンボルと演算子シンボルをインポートする必要があることに注意してください。 これらの &lt;code&gt;ConfigService&lt;/code&gt; インポートは典型的なものです。</target>
        </trans-unit>
        <trans-unit id="5621695378eed2b9f2b258f1815ee171408f7b7e" translate="yes">
          <source>If you're just reading this tutorial to learn about &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, you can &lt;a href=&quot;toh-pt6#import-heroes&quot;&gt;skip over&lt;/a&gt; this step. If you're coding along with this tutorial, stay here and add the In-memory Web API now.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; について学習するためにこのチュートリアルを読んでいる場合は&lt;a href=&quot;toh-pt6#import-heroes&quot;&gt;、&lt;/a&gt;この手順をスキップできます。 このチュートリアルと一緒にコーディングしている場合は、ここにとどまり、インメモリWeb APIを今すぐ追加してください。</target>
        </trans-unit>
        <trans-unit id="8c2b83a475d5fdd415759000ce764903884f7b3b" translate="yes">
          <source>If you're new to Angular, see the &lt;a href=&quot;https://angular.io/start&quot;&gt;&lt;strong&gt;Getting Started tutorial.&lt;/strong&gt;&lt;/a&gt; The Getting Started tutorial covers the same major topics as this Tour of Heroes&amp;mdash;components, template syntax, routing, services, and accessing data via HTTP&amp;mdash;in a condensed format, following the most current best practices.</source>
          <target state="translated">Angularを初めて使用する場合は、 &lt;a href=&quot;https://angular.io/start&quot;&gt;&lt;strong&gt;入門チュートリアルを&lt;/strong&gt;&lt;/a&gt;ご覧&lt;strong&gt;ください。&lt;/strong&gt; 入門チュートリアルでは、このツアーオブヒーローと同じ主要トピック（コンポーネント、テンプレート構文、ルーティング、サービス、HTTP経由のデータアクセス）を最新のベストプラクティスに従って簡潔な形式で扱います。</target>
        </trans-unit>
        <trans-unit id="67ea25a303d22f5bebe608e745f2d7c92d9c27bb" translate="yes">
          <source>If you're new to forms, start by reviewing the &lt;a href=&quot;forms&quot;&gt;Forms&lt;/a&gt; and &lt;a href=&quot;reactive-forms&quot;&gt;Reactive Forms&lt;/a&gt; guides.</source>
          <target state="translated">フォームを初めて使用する場合は、 &lt;a href=&quot;reactive-forms&quot;&gt;フォーム&lt;/a&gt;ガイドとリアクティブフォームガイドを確認してください。</target>
        </trans-unit>
        <trans-unit id="0fc7d26ca33d3f9ccba91fcbfc3ae3f0632834a5" translate="yes">
          <source>If you're testing in an incognito window, open a second blank tab. This will keep the incognito and the cache state alive during your test.</source>
          <target state="translated">シークレットウィンドウでテストしている場合は、2番目の空白のタブを開きます。 これにより、テスト中にシークレットモードとキャッシュ状態が維持されます。</target>
        </trans-unit>
        <trans-unit id="e626c7acd05b782e31724065bc7d5d37adec57da" translate="yes">
          <source>If you're using &lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt;, you must provide a &lt;a href=&quot;app_base_href&quot;&gt;&lt;code&gt;APP_BASE_HREF&lt;/code&gt;&lt;/a&gt; or add a base element to the document. This URL prefix that will be preserved when generating and recognizing URLs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;pathlocationstrategy&quot;&gt;PathLocationStrategy&lt;/a&gt;&lt;/code&gt; を使用している場合は、 &lt;a href=&quot;app_base_href&quot;&gt; &lt;code&gt;APP_BASE_HREF&lt;/code&gt; を&lt;/a&gt;提供するか、ドキュメントにベース要素を追加する必要があります。 URLを生成および認識するときに保持されるこのURLプレフィックス。</target>
        </trans-unit>
        <trans-unit id="fa080613189cdefb468866b8c597532b9871a918" translate="yes">
          <source>If you've never published a package in npm before, you must create a user account. Read more in &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;Publishing npm Packages&lt;/a&gt;.</source>
          <target state="translated">npmでパッケージを公開したことがない場合は、ユーザーアカウントを作成する必要があります。 詳細については、 &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;npmパッケージの公開&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7b10a12a2f9c3567ac4e099dd03881046723129f" translate="yes">
          <source>If your app had many feature areas, the app component trees might look like this:</source>
          <target state="translated">アプリに多くの機能領域がある場合、アプリコンポーネントツリーは次のようになります。</target>
        </trans-unit>
        <trans-unit id="c4813331be931a7f2a2b0d56270ac5204b124311" translate="yes">
          <source>If your app happens to bootstrap or dynamically load a component &lt;em&gt;by type&lt;/em&gt; in some other manner, you must add it to &lt;code&gt;entryComponents&lt;/code&gt; explicitly.</source>
          <target state="translated">アプリが他の方法でブートストラップしたり&lt;em&gt;、タイプ&lt;/em&gt; &lt;code&gt;entryComponents&lt;/code&gt; にコンポーネントを動的にロードしたりする場合、 entryComponentsに明示的に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="9aae5606fbeadd60c35706fd07fdcf7e6df68610" translate="yes">
          <source>If your app uses routing, you need to teach the server to always return &lt;code&gt;index.html&lt;/code&gt; when the user asks for an HTML page for reasons explained in the &lt;a href=&quot;deployment#fallback&quot;&gt;Deployment&lt;/a&gt; guide.</source>
          <target state="translated">アプリでルーティングを使用する場合、ユーザーが&lt;a href=&quot;deployment#fallback&quot;&gt;展開&lt;/a&gt;ガイドで説明されている理由でHTMLページを要求したときに常に &lt;code&gt;index.html&lt;/code&gt; を返すようにサーバーに教える必要があります。</target>
        </trans-unit>
        <trans-unit id="5042fa1f08d3dcd4e1ea2367cfbbc1aaa6404362" translate="yes">
          <source>If your backend service uses different names for the XSRF token cookie or header, use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientxsrfmodule#withOptions&quot;&gt;HttpClientXsrfModule.withOptions()&lt;/a&gt;&lt;/code&gt; to override the defaults.</source>
          <target state="translated">バックエンドサービスがXSRFトークンCookieまたはヘッダーに異なる名前を使用している場合、 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientxsrfmodule#withOptions&quot;&gt;HttpClientXsrfModule.withOptions()&lt;/a&gt;&lt;/code&gt; を使用してデフォルトをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="95cc76e94f96c5568597c8ef92eb23b8f2b51d0e" translate="yes">
          <source>If your builder calls another builder, it may need to read a passed target string. You can parse this string into an object by using the &lt;code&gt;targetFromTargetString()&lt;/code&gt; utility function from &lt;code&gt;@angular-devkit/architect&lt;/code&gt;.</source>
          <target state="translated">ビルダーが別のビルダーを呼び出す場合、渡されたターゲット文字列を読み取る必要がある場合があります。 &lt;code&gt;@angular-devkit/architect&lt;/code&gt; の &lt;code&gt;targetFromTargetString()&lt;/code&gt; ユーティリティ関数を使用して、この文字列を解析してオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="875f3a37dffcb0d70c53bfe9801cfac977a1c2c0" translate="yes">
          <source>If your builder returns an Observable, it should clean up in the teardown logic of that Observable.</source>
          <target state="translated">ビルダーがObservableを返す場合、そのObservableのティアダウンロジックでクリーンアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="333ae1afb3d296c7877eaffccff73532b882ea8a" translate="yes">
          <source>If your library code or its templates depend on other libraries (such a Angular Material, for instance), you must configure your library with those dependencies.</source>
          <target state="translated">ライブラリコードまたはそのテンプレートが他のライブラリ（Angular Materialなど）に依存している場合、それらの依存関係を使用してライブラリを構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="bc86b4b32c1ba7ddb5fb732813d619704067dcce" translate="yes">
          <source>If your template needs to display different text messages depending on the value of a variable, you need to translate all of those alternative text messages.</source>
          <target state="translated">テンプレートで変数の値に応じて異なるテキストメッセージを表示する必要がある場合は、これらの代替テキストメッセージをすべて翻訳する必要があります。</target>
        </trans-unit>
        <trans-unit id="64ff3add03a839c971e70ed84614968956996987" translate="yes">
          <source>Ignore the warnings.</source>
          <target state="translated">警告を無視します。</target>
        </trans-unit>
        <trans-unit id="b2a8f807164b329c0df9d6e96e08d4ec7fe93e8e" translate="yes">
          <source>Ignore: do nothing.</source>
          <target state="translated">無視：何もしません。</target>
        </trans-unit>
        <trans-unit id="852440e173c82baa5ce49593ea14c314bd9d03ea" translate="yes">
          <source>Ignores any animations that are performed when the user first opens or navigates to this page. The filter narrows what is already there, so it assumes that any HTML elements to be animated already exist in the DOM.</source>
          <target state="translated">ユーザーがこのページを最初に開いたとき、またはこのページに移動したときに実行されるアニメーションを無視します。 フィルターは既に存在するものを絞り込みますので、アニメーション化されるHTML要素はすべてDOMに既に存在すると仮定します。</target>
        </trans-unit>
        <trans-unit id="e535f7686926290a845fe4d42be0c97df203fcb9" translate="yes">
          <source>Image compression</source>
          <target state="translated">画像圧縮</target>
        </trans-unit>
        <trans-unit id="cd2057f0131f9a4e6f1956e4114499c55873edf5" translate="yes">
          <source>Image dimensions</source>
          <target state="translated">画像寸法</target>
        </trans-unit>
        <trans-unit id="132d44a4489514731c7a32cfff5792dd08c9e636" translate="yes">
          <source>Image location</source>
          <target state="translated">画像の場所</target>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes">
          <source>Images</source>
          <target state="translated">Images</target>
        </trans-unit>
        <trans-unit id="9ae8f90b310c8e0aba39397a83acf0bf54cb8fae" translate="yes">
          <source>Images and fonts directly under the configured &lt;code&gt;outputPath&lt;/code&gt; (by default &lt;code&gt;./dist/&amp;lt;project-name&amp;gt;/&lt;/code&gt;) or &lt;code&gt;resourcesOutputPath&lt;/code&gt;. See &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; for more information about these options.</source>
          <target state="translated">構成された &lt;code&gt;outputPath&lt;/code&gt; （デフォルトでは &lt;code&gt;./dist/&amp;lt;project-name&amp;gt;/&lt;/code&gt; ）または &lt;code&gt;resourcesOutputPath&lt;/code&gt; のすぐ下にある画像とフォント。 これらのオプションの詳細については、 &lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b68d291250edab27a9181298df02309fd2e3984d" translate="yes">
          <source>Images should be specified in an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">画像は &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; タグで指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f197407a881860639854b84140d3e15ce892c317" translate="yes">
          <source>Imagine an application that helps the &lt;em&gt;Hero Employment Agency&lt;/em&gt; run its business. Heroes need work and the agency finds crises for them to solve.</source>
          <target state="translated">&lt;em&gt;Hero Employment Agencyの事業&lt;/em&gt;運営を支援するアプリケーションを想像してください。 ヒーローには仕事が必要であり、代理店は彼らが解決すべき危機を見つけます。</target>
        </trans-unit>
        <trans-unit id="480c3b6df4de5ea5f608379d1979bb198fa722ac" translate="yes">
          <source>Imagine one branch of a component hierarchy: &lt;em&gt;Alice&lt;/em&gt; -&amp;gt; &lt;em&gt;Barry&lt;/em&gt; -&amp;gt; &lt;em&gt;Carol&lt;/em&gt;. Both &lt;em&gt;Alice&lt;/em&gt; and &lt;em&gt;Barry&lt;/em&gt; implement the `Parent' class interface.</source>
          <target state="translated">コンポーネント階層の1つのブランチ、Alice-&amp;gt; &lt;em&gt;Barry-&lt;/em&gt; &amp;gt; &lt;em&gt;Carolを&lt;/em&gt;想像してください。 &lt;em&gt;アリス&lt;/em&gt;と&lt;em&gt;バリーの&lt;/em&gt;両方が「親」クラスのインターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="926d786c1286080b30759a09b32fbae972285d95" translate="yes">
          <source>Imagine that &lt;code&gt;LoggerService&lt;/code&gt; had a large API, much larger than the actual three methods and a property. You might want to shrink that API surface to just the members you actually need. In this example, the &lt;code&gt;MinimalLogger&lt;/code&gt;&lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;class-interface&lt;/a&gt; reduces the API to two members:</source>
          <target state="translated">&lt;code&gt;LoggerService&lt;/code&gt; には、実際の3つのメソッドとプロパティよりもはるかに大きい大きなAPIがあったと想像してください 。 そのAPIサーフェスを実際に必要なメンバーだけに縮小することができます。 この例では、 &lt;code&gt;MinimalLogger&lt;/code&gt; &lt;a href=&quot;dependency-injection-in-action#class-interface&quot;&gt;クラスインターフェイス&lt;/a&gt;はAPIを2つのメンバーに減らします。</target>
        </trans-unit>
        <trans-unit id="4a368b18b59eaf096cd5d55aaf4c6822025e3a9d" translate="yes">
          <source>Imagine that in the child component, you had a different value, &lt;code&gt;🍁&lt;/code&gt; (maple leaf) but you wanted to use the parent's value instead. This is when you'd use &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt;:</source>
          <target state="translated">子コンポーネントでは、異なる値 &lt;code&gt;🍁&lt;/code&gt; （カエデの葉）がありましたが、代わりに親の値を使用したいことを想像してください。 これは、 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 使用する場合です。</target>
        </trans-unit>
        <trans-unit id="d9912f3cc2a458038df837cf86a4c8e01af50ffb" translate="yes">
          <source>Imagine the effort to disable these distractions, just to prove a point that can be made satisfactorily with a &lt;em&gt;test host&lt;/em&gt; like this one:</source>
          <target state="translated">これらの気晴らしを無効にする努力を想像してください。このような&lt;em&gt;テストホストで&lt;/em&gt;満足に作成できるポイントを証明するだけです。</target>
        </trans-unit>
        <trans-unit id="0dcb05aedf3662e3047235d20c9b3a53209ea247" translate="yes">
          <source>Imagine the following malicious content.</source>
          <target state="translated">次の悪意のあるコンテンツを想像してください。</target>
        </trans-unit>
        <trans-unit id="70af22099196223b8485c95684bbf8824a9afa2b" translate="yes">
          <source>Immutability</source>
          <target state="translated">Immutability</target>
        </trans-unit>
        <trans-unit id="6e5a32a1bd41d5b21404f176ae361427aff05142" translate="yes">
          <source>Immutable</source>
          <target state="translated">Immutable</target>
        </trans-unit>
        <trans-unit id="569ee13fa32b96c143a875b5c890f64353650f46" translate="yes">
          <source>Implement lifecycle hook interfaces</source>
          <target state="translated">ライフサイクルフックインターフェイスを実装する</target>
        </trans-unit>
        <trans-unit id="e3166f82b7179b9d5e343a6c1eee18f1c699887d" translate="yes">
          <source>Implement this callback to add a class to an element in the DOM.</source>
          <target state="translated">このコールバックを実装して、DOMの要素にクラスを追加します。</target>
        </trans-unit>
        <trans-unit id="577c7009c5183eabdac20b5ae98cf2ede05d4833" translate="yes">
          <source>Implement this callback to add a comment to the DOM of the host element.</source>
          <target state="translated">ホスト要素のDOMにコメントを追加するには、このコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="03cf7ca65ecc8c31118b1e6114f8595bc1760a21" translate="yes">
          <source>Implement this callback to add text to the DOM of the host element.</source>
          <target state="translated">このコールバックを実装して、ホスト要素のDOMにテキストを追加します。</target>
        </trans-unit>
        <trans-unit id="f5bc42dfa7008f7e03d763d440ce48675c0a4f5b" translate="yes">
          <source>Implement this callback to create an instance of the host element.</source>
          <target state="translated">このコールバックを実装して、ホスト要素のインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="a0d9d7c045b4660c412fe767ad1945d44a190961" translate="yes">
          <source>Implement this callback to destroy the renderer or the host element.</source>
          <target state="translated">このコールバックを実装して、レンダラーまたはホスト要素を破棄します。</target>
        </trans-unit>
        <trans-unit id="1c9baa60b18459f8baab069c307bd286cedb293c" translate="yes">
          <source>Implement this callback to get the next sibling node of a given node in the host element's DOM.</source>
          <target state="translated">このコールバックを実装して、ホスト要素のDOM内の特定のノードの次の兄弟ノードを取得します。</target>
        </trans-unit>
        <trans-unit id="fdeb7236f29bdbcca4a28a7f60641e8db151e4d5" translate="yes">
          <source>Implement this callback to get the parent of a given node in the host element's DOM.</source>
          <target state="translated">このコールバックを実装して、ホスト要素のDOM内の特定のノードの親を取得します。</target>
        </trans-unit>
        <trans-unit id="134030fd845fadd1044c12a523dec32ffc73a9fc" translate="yes">
          <source>Implement this callback to insert a child node at a given position in a parent node in the host element DOM.</source>
          <target state="translated">このコールバックを実装して、ホスト要素DOMの親ノードの特定の位置に子ノードを挿入します。</target>
        </trans-unit>
        <trans-unit id="bba6d890df9d055ea2386440926e0760d35d6b14" translate="yes">
          <source>Implement this callback to prepare an element to be bootstrapped as a root element, and return the element instance.</source>
          <target state="translated">このコールバックを実装して、ルートエレメントとしてブートストラップされるエレメントを準備し、エレメントインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="ca1ed2bafa9cae106f863767732584ec8416ebed" translate="yes">
          <source>Implement this callback to remove a child node from the host element's DOM.</source>
          <target state="translated">ホスト要素のDOMから子ノードを削除するには、このコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="d323d4a580fdb4dc8916989b8e38d19f0831ebb4" translate="yes">
          <source>Implement this callback to remove a class from an element in the DOM.</source>
          <target state="translated">このコールバックを実装して、DOMの要素からクラスを削除します。</target>
        </trans-unit>
        <trans-unit id="50a573388aabcf7019870235d46465e72add8981" translate="yes">
          <source>Implement this callback to remove an attribute from an element in the DOM.</source>
          <target state="translated">このコールバックを実装して、DOMの要素から属性を削除します。</target>
        </trans-unit>
        <trans-unit id="36eb90bfa5ed19d7a1a9ae6ff464b8e1d00e7822" translate="yes">
          <source>Implement this callback to remove the value from a CSS style for an element in the DOM.</source>
          <target state="translated">このコールバックを実装して、DOMの要素のCSSスタイルから値を削除します。</target>
        </trans-unit>
        <trans-unit id="555fb860b7a59c008619fb082a93ee194e1886c7" translate="yes">
          <source>Implement this callback to set a CSS style for an element in the DOM.</source>
          <target state="translated">このコールバックを実装して、DOMの要素のCSSスタイルを設定します。</target>
        </trans-unit>
        <trans-unit id="7b1aa6bced0b52983533c898e87d4ea15fb2264a" translate="yes">
          <source>Implement this callback to set an attribute value for an element in the DOM.</source>
          <target state="translated">このコールバックを実装して、DOMの要素に属性値を設定します。</target>
        </trans-unit>
        <trans-unit id="e0fc11b0c038ee4ed0794e274a3324cb43d219c5" translate="yes">
          <source>Implement this callback to set the value of a node in the host element.</source>
          <target state="translated">ホスト要素のノードの値を設定するには、このコールバックを実装します。</target>
        </trans-unit>
        <trans-unit id="bb15ad08125f75b3cf386d55995af65d420d6eee" translate="yes">
          <source>Implement this callback to set the value of a property of an element in the DOM.</source>
          <target state="translated">このコールバックを実装して、DOMの要素のプロパティの値を設定します。</target>
        </trans-unit>
        <trans-unit id="59c3759a3daa56cba4ea89b70baf1e4097d64636" translate="yes">
          <source>Implement this callback to start an event listener.</source>
          <target state="translated">このコールバックを実装して、イベントリスナーを開始します。</target>
        </trans-unit>
        <trans-unit id="4a6751f61ff0fba38731f86b6104c29d3704780e" translate="yes">
          <source>Implement this interface to create a custom form control directive that integrates with Angular forms.</source>
          <target state="translated">このインターフェイスを実装して、Angularフォームと統合するカスタムフォーム制御ディレクティブを作成します。</target>
        </trans-unit>
        <trans-unit id="21c4d35ad75af1e5854d9c5288b3b50d18350a45" translate="yes">
          <source>Implementing Custom Async Validator</source>
          <target state="translated">カスタム非同期検証の実装</target>
        </trans-unit>
        <trans-unit id="28243ccf2d1e04cdb0f4eea07160bd6fba54a67c" translate="yes">
          <source>Implements Angular's core functionality, low-level services, and utilities.</source>
          <target state="translated">Angularのコア機能、低レベルのサービス、およびユーティリティを実装します。</target>
        </trans-unit>
        <trans-unit id="1740cef38e5186da8de62ac9e31ab0bf9006ec4e" translate="yes">
          <source>Implements Angular's custom-element API, which enables you to package components as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt;.</source>
          <target state="translated">Angularのカスタム要素APIを実装します。これにより、コンポーネントを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot;&gt;カスタム要素&lt;/a&gt;としてパッケージ化できます。</target>
        </trans-unit>
        <trans-unit id="18cc1a97ca823e213e9814192dbdd3119bf93a10" translate="yes">
          <source>Implements a domain-specific language (DSL) for defining web animation sequences for HTML elements as multiple transformations over time.</source>
          <target state="translated">ドメイン固有言語（DSL）を実装して、HTML要素のWebアニメーションシーケンスを時間の経過とともに複数の変換として定義します。</target>
        </trans-unit>
        <trans-unit id="975968eede10c072691f7af0d54dd2799c41ab94" translate="yes">
          <source>Implements a service worker for Angular apps. Adding a service worker to an Angular app is one of the steps for turning it into a Progressive Web App (also known as a PWA).</source>
          <target state="translated">Angularアプリのサービスワーカーを実装します。 Angularアプリにサービスワーカーを追加することは、それをプログレッシブWebアプリ（PWAとも呼ばれる）に変えるための手順の1つです。</target>
        </trans-unit>
        <trans-unit id="f7bebe0232fe9f34fb464a7863f9d6804c6723a6" translate="yes">
          <source>Implements a set of directives and providers to communicate with native DOM elements when building forms to capture user input.</source>
          <target state="translated">ユーザー入力をキャプチャするフォームを構築するときに、ネイティブDOM要素と通信するための一連のディレクティブとプロバイダーを実装します。</target>
        </trans-unit>
        <trans-unit id="4b32fab568e6f74138e5d102955133034be90ff5" translate="yes">
          <source>Implements an &lt;code&gt;ngDoCheck()&lt;/code&gt; method with custom change detection. See how often Angular calls this hook and watch it post changes to a log.</source>
          <target state="translated">カスタム変更検出で &lt;code&gt;ngDoCheck()&lt;/code&gt; メソッドを実装します。 Angularがこのフックを呼び出す頻度を確認し、変更がログに投稿されるのを確認します。</target>
        </trans-unit>
        <trans-unit id="5bd7689d46e5b12bf1f904331f09df5b9e867cb3" translate="yes">
          <source>Implements an HTTP client API for Angular apps that relies on the &lt;code&gt;XMLHttpRequest&lt;/code&gt; interface exposed by browsers.</source>
          <target state="translated">ブラウザによって公開される &lt;code&gt;XMLHttpRequest&lt;/code&gt; インターフェイスに依存する、Angularアプリ用のHTTPクライアントAPIを実装します。</target>
        </trans-unit>
        <trans-unit id="0f6cbc91e3625eeea332217fda3f6cdf01f146c8" translate="yes">
          <source>Implements an iterable interface, therefore it can be used in both ES6 javascript &lt;code&gt;for (var i of items)&lt;/code&gt; loops as well as in Angular templates with &lt;code&gt;*&lt;a href=&quot;../common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let i of myList&quot;&lt;/code&gt;.</source>
          <target state="translated">反復可能なインターフェイスを実装するため、ES6 javascript &lt;code&gt;for (var i of items)&lt;/code&gt; ループと &lt;code&gt;*&lt;a href=&quot;../common/ngforof&quot;&gt;ngFor&lt;/a&gt;=&quot;let i of myList&quot;&lt;/code&gt; Angularテンプレートの両方で使用できます。</target>
        </trans-unit>
        <trans-unit id="ce097c59bce28c3d2b175a67db71e336843e0494" translate="yes">
          <source>Implements basic Angular directives and pipes, such as NgIf, NgForOf, DecimalPipe, and so on.</source>
          <target state="translated">NgIf、NgForOf、DecimalPipeなどの基本的なAngularディレクティブとパイプを実装します。</target>
        </trans-unit>
        <trans-unit id="d9bdfd53eb804076b673eff6ed90636bddf4f862" translate="yes">
          <source>Implements the Angular Router service , which enables navigation from one view to the next as users perform application tasks.</source>
          <target state="translated">ユーザーがアプリケーションタスクを実行するときに、1つのビューから次のビューへのナビゲーションを可能にするAngular Routerサービスを実装します。</target>
        </trans-unit>
        <trans-unit id="a92aec084fd1d304417af86c26c892bf2549ddb2" translate="yes">
          <source>Implements the functionality needed for a custom element.</source>
          <target state="translated">カスタム要素に必要な機能を実装します。</target>
        </trans-unit>
        <trans-unit id="26fb786f09465d1d0559a46e5842f496183733aa" translate="yes">
          <source>Implied by promise resolution.</source>
          <target state="translated">約束の解決に暗示されています。</target>
        </trans-unit>
        <trans-unit id="568d13bdb851bce85938a6391267ed336fc53a69" translate="yes">
          <source>Import &lt;a href=&quot;ngmodule-faq#q-browser-vs-common-module&quot;&gt;BrowserModule&lt;/a&gt; only in the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">ルート &lt;code&gt;AppModule&lt;/code&gt; にのみ&lt;a href=&quot;ngmodule-faq#q-browser-vs-common-module&quot;&gt;BrowserModuleを&lt;/a&gt;インポートします。</target>
        </trans-unit>
        <trans-unit id="0f742f1b5efa266c3528e372a7535ae4f8d7abfb" translate="yes">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; パッケージから &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="b4a640252aff8611ffd100e6d553596024dc2232" translate="yes">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;&lt;/code&gt; パッケージから &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="15c4f41e277258769c0a0df5aa685cd02c57d1f7" translate="yes">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/forms&lt;/code&gt; if your components have &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; two-way binding expressions.</source>
          <target state="translated">コンポーネントに &lt;code&gt;[(&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;)]&lt;/code&gt; 双方向バインディング式がある場合、 &lt;code&gt;@angular/forms&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="8d73845fe8377c59bacd2d1ab426a96ffca230bf" translate="yes">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to use &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; をインポートしてngModelを使用する</target>
        </trans-unit>
        <trans-unit id="78a45ea4a26ee0f0dd7af27e0a27299f67d70efd" translate="yes">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt;, which introduces the animation capabilities into your Angular root application module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; をインポートします。これにより、Angularルートアプリケーションモジュールにアニメーション機能が導入されます。</target>
        </trans-unit>
        <trans-unit id="9bbd5188871ef20fa807f263a6fcc71ea078f98d" translate="yes">
          <source>Import &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;@angular/router&lt;/code&gt; package, and the &lt;code&gt;products&lt;/code&gt; array from &lt;code&gt;../products&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;@angular/router&lt;/code&gt; パッケージからインポートし、 &lt;code&gt;products&lt;/code&gt; 配列を &lt;code&gt;../products&lt;/code&gt; からインポートします。</target>
        </trans-unit>
        <trans-unit id="438e3ddee4912def34ac11f57a93ce076783f46e" translate="yes">
          <source>Import &lt;code&gt;&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/core&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@angular/core&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="ba4323afb2767c261fa10794db535d2c4b34bb19" translate="yes">
          <source>Import &lt;code&gt;&lt;a href=&quot;api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;@angular/core&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;@angular/core&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;api/core/output&quot;&gt;Output&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; をインポートします 。</target>
        </trans-unit>
        <trans-unit id="29ea81b3ca52ff6ccaed6e2c7a98e218c8668bbe" translate="yes">
          <source>Import &lt;code&gt;&lt;a href=&quot;router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; to use the Router service in your app. For more usage information, see the &lt;a href=&quot;../guide/router&quot;&gt;Routing and Navigation&lt;/a&gt; guide.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; をインポートして、アプリでルーターサービスを使用します。 使用方法の詳細については、 &lt;a href=&quot;../guide/router&quot;&gt;ルーティングとナビゲーション&lt;/a&gt;ガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="fea0622df7e35e3d25926c1db11132831d661da2" translate="yes">
          <source>Import &lt;code&gt;FormsModule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;FormsModule&lt;/code&gt; のインポート</target>
        </trans-unit>
        <trans-unit id="b2f696d4d9afce8de6cbc91e4145a3e2c8ec8ee4" translate="yes">
          <source>Import &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; into &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; を &lt;code&gt;AppRoutingModule&lt;/code&gt; にインポートします 。</target>
        </trans-unit>
        <trans-unit id="ffeed5ccfb791ceee55f7360554286bcadd6091b" translate="yes">
          <source>Import &lt;em&gt;shared&lt;/em&gt; and &lt;em&gt;feature&lt;/em&gt; modules when this module's components incorporate their components, directives, and pipes.</source>
          <target state="translated">このモジュールのコンポーネントにコンポーネント、ディレクティブ、およびパイプが組み込まれている場合、 &lt;em&gt;共有&lt;/em&gt;および&lt;em&gt;機能&lt;/em&gt;モジュールをインポート&lt;em&gt;し&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="fcb63212ad3831fc17aec3ffcf8d331ecd00b985" translate="yes">
          <source>Import NgModules whose public (exported) &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;declarable classes&lt;/a&gt; you need to reference in this module's component templates.</source>
          <target state="translated">このモジュールのコンポーネントテンプレートで参照する必要があるパブリック（エクスポート済み） &lt;a href=&quot;bootstrapping#the-declarations-array&quot;&gt;宣言可能クラス&lt;/a&gt;を持つNgModuleをインポートします。</target>
        </trans-unit>
        <trans-unit id="f1f2839eab72da958afeb3a4698c2ccac390a557" translate="yes">
          <source>Import a feature module</source>
          <target state="translated">機能モジュールをインポートする</target>
        </trans-unit>
        <trans-unit id="2547f241c308c031518bf3f1c55b103af9729c3c" translate="yes">
          <source>Import a scoped package in the same way that you import a normal package.</source>
          <target state="translated">通常のパッケージをインポートするのと同じ方法で、スコープパッケージをインポートします。</target>
        </trans-unit>
        <trans-unit id="98c0c896fabb3fc1a98419d0cde75db05d6430f1" translate="yes">
          <source>Import a shared module</source>
          <target state="translated">共有モジュールをインポートする</target>
        </trans-unit>
        <trans-unit id="301c1658c4350b2d60d09948ca85c6196aed28d1" translate="yes">
          <source>Import and add the &lt;code&gt;HeroDetailComponent&lt;/code&gt; and &lt;code&gt;HeroListComponent&lt;/code&gt; to the &lt;code&gt;declarations&lt;/code&gt; array in the &lt;code&gt;HeroesModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroDetailComponent&lt;/code&gt; と &lt;code&gt;HeroListComponent&lt;/code&gt; をインポートして、 HeroesModuleの &lt;code&gt;declarations&lt;/code&gt; 配列に &lt;code&gt;HeroesModule&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d8ca796a8e658eeeab1bd1e834d4a664c92619c7" translate="yes">
          <source>Import crisis center module into the &lt;code&gt;AppModule&lt;/code&gt; routes</source>
          <target state="translated">危機センターモジュールを &lt;code&gt;AppModule&lt;/code&gt; ルートにインポートする</target>
        </trans-unit>
        <trans-unit id="a526dbed5b0f6c824f5d7a0643b8d713cf803b67" translate="yes">
          <source>Import it from</source>
          <target state="translated">インポートする</target>
        </trans-unit>
        <trans-unit id="d8154fd791df3beb7ab66f72f5ba6f3d510c808c" translate="yes">
          <source>Import it into the appropriate module.</source>
          <target state="translated">適切なモジュールにインポートします。</target>
        </trans-unit>
        <trans-unit id="a6810958c8daa7a96c72da65b232b80dd64c7181" translate="yes">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator (instead of the &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator).</source>
          <target state="translated">（ &lt;code&gt;&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; デコレータの代わりに） &lt;code&gt;&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; デコレータをインポートします。</target>
        </trans-unit>
        <trans-unit id="050ba3274203d622f3595bab0a8e5dd2c4cc5deb" translate="yes">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; symbols; you'll need them for &lt;em&gt;any&lt;/em&gt; structural directive.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../api/core/templateref&quot;&gt;TemplateRef&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; シンボルをインポートします。 構造的なディレクティブに必要になります。</target>
        </trans-unit>
        <trans-unit id="e9c23b8c549ecba1a1c10a72bc128051038d670e" translate="yes">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; class from &lt;code&gt;@angular/forms&lt;/code&gt; to use for type information. The &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service is ready to create a &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; instance.</source>
          <target state="translated">型情報に使用する &lt;code&gt;@angular/forms&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; クラスをインポートします。 &lt;code&gt;&lt;a href=&quot;../api/forms/formarray&quot;&gt;FormArray&lt;/a&gt;&lt;/code&gt; サービスは、 FormArrayインスタンスを作成する準備ができています。</target>
        </trans-unit>
        <trans-unit id="e331c6fc4a9ff134af60b891774820b42da2edbc" translate="yes">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; class from the &lt;code&gt;@angular/forms&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/forms&lt;/code&gt; パッケージから &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; クラスをインポートします。</target>
        </trans-unit>
        <trans-unit id="6cc9c61e025989b9b55d14be9d8b9c70af1b9fc4" translate="yes">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service from the &lt;code&gt;@angular/forms&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/forms&lt;/code&gt; パッケージから &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; サービスをインポートします。</target>
        </trans-unit>
        <trans-unit id="cdcf4dcbdeddf625623188d87e4fefc41dd00403" translate="yes">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; class from the &lt;code&gt;@angular/forms&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;@angular/forms&lt;/code&gt; パッケージから &lt;code&gt;&lt;a href=&quot;../api/forms/validators&quot;&gt;Validators&lt;/a&gt;&lt;/code&gt; クラスをインポートします。</target>
        </trans-unit>
        <trans-unit id="9ee21c30a536f294238a29e1d4bea732f6f4ae02" translate="yes">
          <source>Import the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; tokens from the router package.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; パッケージからRouter 、 &lt;code&gt;&lt;a href=&quot;../api/router/activatedroute&quot;&gt;ActivatedRoute&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;../api/router/parammap&quot;&gt;ParamMap&lt;/a&gt;&lt;/code&gt; トークンをインポートします。</target>
        </trans-unit>
        <trans-unit id="686b0adef0de155a88d75b0bde6fbed3829d7341" translate="yes">
          <source>Import the &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; into your top level &lt;a href=&quot;../../core/ngmodule&quot;&gt;Angular `NgModule`&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; をトップレベルの&lt;a href=&quot;../../core/ngmodule&quot;&gt;Angular `NgModule`に&lt;/a&gt;インポートします。</target>
        </trans-unit>
        <trans-unit id="0e1cedd5069238c18718cd52f3d74737564819a6" translate="yes">
          <source>Import the &lt;code&gt;CartService&lt;/code&gt; from the &lt;code&gt;cart.service.ts&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;cart.service.ts&lt;/code&gt; ファイルから &lt;code&gt;CartService&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="9d8c5fb1b2237d87ff7cd78a6f3f8b61baca81de" translate="yes">
          <source>Import the &lt;code&gt;CrisisListComponent&lt;/code&gt;, &lt;code&gt;HeroListComponent&lt;/code&gt;, and &lt;code&gt;PageNotFoundComponent&lt;/code&gt; symbols just like you did in the &lt;code&gt;app.module.ts&lt;/code&gt;. Then move the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; imports and routing configuration, including &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt;, into this routing module.</source>
          <target state="translated">&lt;code&gt;CrisisListComponent&lt;/code&gt; で &lt;code&gt;HeroListComponent&lt;/code&gt; 、 CrisisListComponent 、 HeroListComponent 、および &lt;code&gt;PageNotFoundComponent&lt;/code&gt; シンボルをインポートします。 次に、 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; を含む &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; インポートおよびルーティング構成をこのルーティングモジュールに移動します。</target>
        </trans-unit>
        <trans-unit id="817cc00c391e59b9be4fb99905645f2cf9d9b070" translate="yes">
          <source>Import the &lt;code&gt;DashboardComponent&lt;/code&gt; in the &lt;code&gt;AppRoutingModule&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppRoutingModule&lt;/code&gt; に &lt;code&gt;DashboardComponent&lt;/code&gt; をインポートします 。</target>
        </trans-unit>
        <trans-unit id="d891b2d94c07cfdb42e46213e234080c12a97992" translate="yes">
          <source>Import the &lt;code&gt;Hero&lt;/code&gt; and &lt;code&gt;HEROES&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Hero&lt;/code&gt; とヒーローをインポートします。</target>
        </trans-unit>
        <trans-unit id="df33ccfbc6cae37532f2258ca69433e9f6f71ae9" translate="yes">
          <source>Import the &lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SelectivePreloadingStrategyService&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="dfb4992a4374e8dc70168e213e70e9f20129c7fe" translate="yes">
          <source>Import the &lt;code&gt;SharedModule&lt;/code&gt; in your &lt;em&gt;feature&lt;/em&gt; modules, both those loaded when the app starts and those you lazy load later.</source>
          <target state="translated">アプリの起動時にロードされるものと、 &lt;code&gt;SharedModule&lt;/code&gt; ロードするものの両方の&lt;em&gt;機能&lt;/em&gt;モジュールにSharedModuleをインポートします。</target>
        </trans-unit>
        <trans-unit id="e3f7d1044aa8460beba08aa7ce9ae927fdb4849c" translate="yes">
          <source>Import the &lt;code&gt;catchError&lt;/code&gt; symbol from &lt;code&gt;rxjs/operators&lt;/code&gt;, along with some other operators you'll need later.</source>
          <target state="translated">&lt;code&gt;rxjs/operators&lt;/code&gt; から &lt;code&gt;catchError&lt;/code&gt; シンボルをインポートし、後で必要になる他のいくつかの演算子もインポートします。</target>
        </trans-unit>
        <trans-unit id="d41e2af4e0f9d40ee19656d61d24f3e6c1da5575" translate="yes">
          <source>Import the &lt;code&gt;switchMap&lt;/code&gt; operator because you need it later to process the &lt;code&gt;Observable&lt;/code&gt; route parameters.</source>
          <target state="translated">後で &lt;code&gt;Observable&lt;/code&gt; ルートパラメーターを処理するために必要になるため、 &lt;code&gt;switchMap&lt;/code&gt; オペレーターをインポートします。</target>
        </trans-unit>
        <trans-unit id="3a18d1695f508fdb02f8c454df1c248c094d7b2f" translate="yes">
          <source>Import the &lt;code&gt;switchMap&lt;/code&gt; operator to perform an operation on the &lt;code&gt;Observable&lt;/code&gt; of route parameter map.</source>
          <target state="translated">&lt;code&gt;switchMap&lt;/code&gt; オペレーターをインポートして、 &lt;code&gt;Observable&lt;/code&gt; of routeパラメーターマップで操作を実行します。</target>
        </trans-unit>
        <trans-unit id="d43444878db13fcb283c40d8be13224eada6b8e0" translate="yes">
          <source>Import the appropriate language translation file as a string constant.</source>
          <target state="translated">適切な言語翻訳ファイルを文字列定数としてインポートします。</target>
        </trans-unit>
        <trans-unit id="89a6ca85268363383daef55ec399cdadb37634d3" translate="yes">
          <source>Import the cart service.</source>
          <target state="translated">カートサービスをインポートします。</target>
        </trans-unit>
        <trans-unit id="070bfc8700bcdc05ea975d46b92b9598f201fffa" translate="yes">
          <source>Import the defined schema interface that provides the type information for your schematic's options.</source>
          <target state="translated">回路図のオプションのタイプ情報を提供する定義済みのスキーマインターフェイスをインポートします。</target>
        </trans-unit>
        <trans-unit id="c4871a12d8b10b0a07d1e0cdc5dfb8d463cfc5f3" translate="yes">
          <source>Import the feature area NgModule into the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">機能領域NgModuleをAppModuleにインポートします。</target>
        </trans-unit>
        <trans-unit id="33f2a24119b9f7ce0e76c5987bc26dfad28027be" translate="yes">
          <source>Import the hero components from their new locations in the &lt;code&gt;src/app/heroes/&lt;/code&gt; folder, define the two hero routes.</source>
          <target state="translated">&lt;code&gt;src/app/heroes/&lt;/code&gt; フォルダーの新しい場所からヒーローコンポーネントをインポートし、2つのヒーロールートを定義します。</target>
        </trans-unit>
        <trans-unit id="5bc40a5fef2a78698029cd1054594de418f9b5e0" translate="yes">
          <source>Import the routing module into the application and create a routing configuration that defines the possible routes.</source>
          <target state="translated">ルーティングモジュールをアプリケーションにインポートし、可能なルートを定義するルーティング構成を作成します。</target>
        </trans-unit>
        <trans-unit id="f9d1848dcd28345f99c78b328167a595cb31adbb" translate="yes">
          <source>Import this resolver in the &lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; and add a &lt;code&gt;&lt;a href=&quot;../api/router/route#resolve&quot;&gt;resolve&lt;/a&gt;&lt;/code&gt; object to the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; route configuration.</source>
          <target state="translated">&lt;code&gt;crisis-center-routing.module.ts&lt;/code&gt; このリゾルバーをインポートし、 &lt;code&gt;CrisisDetailComponent&lt;/code&gt; ルート構成に &lt;code&gt;&lt;a href=&quot;../api/router/route#resolve&quot;&gt;resolve&lt;/a&gt;&lt;/code&gt; オブジェクトを追加します。</target>
        </trans-unit>
        <trans-unit id="f1ec2e5b75cafd71f4d2cf17bbe28874aadd8762" translate="yes">
          <source>Import widget modules in any module whose component templates need the widgets.</source>
          <target state="translated">コンポーネントテンプレートがウィジェットを必要とするモジュールにウィジェットモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="4ebe828e74096e229b55fc62674259b224c8b59f" translate="yes">
          <source>Imported by</source>
          <target state="translated">輸入者</target>
        </trans-unit>
        <trans-unit id="ca029c525e020e030b5763e634cdfa9684f0ec75" translate="yes">
          <source>Imported providers are easily replaced by providers from another imported NgModule. Such replacement might be by design. It could be unintentional and have adverse consequences.</source>
          <target state="translated">インポートされたプロバイダーは、インポートされた別のNgModuleのプロバイダーに簡単に置き換えられます。 このような置換は、設計による場合があります。 それは意図的ではなく、悪影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="4c410a4e7ce454cc0a669f85789fcc7292be2656" translate="yes">
          <source>Importing &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; also frees feature modules for use on &lt;em&gt;any&lt;/em&gt; target platform, not just browsers.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; をインポート&lt;em&gt;する&lt;/em&gt;と、ブラウザだけでなく、ターゲットプラットフォームで使用するための機能モジュールも解放されます。</target>
        </trans-unit>
        <trans-unit id="0926c5352a1ed8fd6d4008f3a9505f53d26d0c72" translate="yes">
          <source>Importing &lt;code&gt;&lt;a href=&quot;../api/service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; into your &lt;code&gt;AppModule&lt;/code&gt; doesn't just register the service worker, it also provides a few services you can use to interact with the service worker and control the caching of your app.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/service-worker/serviceworkermodule&quot;&gt;ServiceWorkerModule&lt;/a&gt;&lt;/code&gt; をAppModuleにインポートすると、サービスワーカーが登録されるだけでなく、サービスワーカーとやり取りしてアプリのキャッシュを制御するために使用できるいくつかのサービスも提供されます。</target>
        </trans-unit>
        <trans-unit id="bf8398dc7932850ef3407d2abc867f5242eaa718" translate="yes">
          <source>Importing a feature module</source>
          <target state="translated">機能モジュールのインポート</target>
        </trans-unit>
        <trans-unit id="b15db4d28a6b8ab83dd5b14c0f07467630615c89" translate="yes">
          <source>Importing a module does &lt;em&gt;not&lt;/em&gt; automatically re-export the imported module's imports. Module 'B' can't use &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; just because it imported module 'A' which imported &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt;. Module 'B' must import &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; itself.</source>
          <target state="translated">モジュールをインポートしても、インポートされたモジュールのインポート&lt;em&gt;は&lt;/em&gt;自動的に再エクスポートされませ&lt;em&gt;ん&lt;/em&gt; 。 モジュール 'B'は、 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; インポートしたモジュール 'A'をインポートしたという理由だけでngIfを使用できません。 モジュール「B」は、 &lt;code&gt;&lt;a href=&quot;../api/common/commonmodule&quot;&gt;CommonModule&lt;/a&gt;&lt;/code&gt; 自体をインポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="50f4da678c72bbf5ccb3812d54bcbc40fe9377ba" translate="yes">
          <source>Importing modules</source>
          <target state="translated">モジュールのインポート</target>
        </trans-unit>
        <trans-unit id="6c6759a5009501ce940b68c3c6c4d0a88982af01" translate="yes">
          <source>Importing the component's feature module can be the easiest way to configure tests when there are many mutual dependencies within the module and the module is small, as feature modules tend to be.</source>
          <target state="translated">コンポーネントの機能モジュールをインポートすることは、モジュール内で相互依存関係が多く、モジュールが小さい場合に機能モジュールを使用する傾向があるため、テストを構成する最も簡単な方法です。</target>
        </trans-unit>
        <trans-unit id="2dc45a2a577a313a667ab95b3f67c568aecf86f0" translate="yes">
          <source>Imports and registers the service worker in the app module.</source>
          <target state="translated">サービスワーカーをアプリモジュールにインポートして登録します。</target>
        </trans-unit>
        <trans-unit id="a83a0fc0cd6287cabf3642ac5ae77c9a4a861c22" translate="yes">
          <source>Imports and route configuration</source>
          <target state="translated">インポートおよびルート構成</target>
        </trans-unit>
        <trans-unit id="3814cab387da7b9062d6ab2735ba73f5e9829045" translate="yes">
          <source>Imports other modules with the components, directives, and pipes that components in the current module need.</source>
          <target state="translated">現在のモジュールのコンポーネントに必要なコンポーネント、ディレクティブ、およびパイプを使用して他のモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="d61c28aebf6d9a308688684bd0963349f916d660" translate="yes">
          <source>Imports the animation symbols that build the animation triggers, control state, and manage transitions between states.</source>
          <target state="translated">アニメーショントリガーを構築し、状態を制御し、状態間の遷移を管理するアニメーションシンボルをインポートします。</target>
        </trans-unit>
        <trans-unit id="fea98dc51784321beb1402d5791647e70f12893b" translate="yes">
          <source>Improve overall data quality by validating user input for accuracy and completeness.</source>
          <target state="translated">正確さと完全性のためにユーザー入力を検証することにより、全体的なデータ品質を改善します。</target>
        </trans-unit>
        <trans-unit id="d44c2ca2637e46280e6e09bd5b6ff5f7c525f378" translate="yes">
          <source>Improve performance on mobile and low-powered devices</source>
          <target state="translated">モバイルおよび低電力デバイスのパフォーマンスを改善する</target>
        </trans-unit>
        <trans-unit id="c0414193d62ac6c0f1bf1c02847690c0c2c4c6f1" translate="yes">
          <source>Impure pipes</source>
          <target state="translated">不純なパイプ</target>
        </trans-unit>
        <trans-unit id="88c8cdf511a1c885e6f77a48066eec8b1854da94" translate="yes">
          <source>In &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt;, a function that operates on a &lt;a href=&quot;glossary#file-tree&quot;&gt;file tree&lt;/a&gt; to create, delete, or modify files in a specific manner.</source>
          <target state="translated">&lt;a href=&quot;glossary#schematic&quot;&gt;回路図&lt;/a&gt;で、 &lt;a href=&quot;glossary#file-tree&quot;&gt;ファイルツリー&lt;/a&gt;を操作して特定の方法でファイルを作成、削除、または変更する機能。</target>
        </trans-unit>
        <trans-unit id="b691bd4b8205b08475f3b410f51f0a0d3db24979" translate="yes">
          <source>In &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt;, a virtual file system represented by the &lt;code&gt;Tree&lt;/code&gt; class. Schematic &lt;a href=&quot;glossary#rule&quot;&gt;rules&lt;/a&gt; take a tree object as input, operate on them, and return a new tree object.</source>
          <target state="translated">&lt;a href=&quot;glossary#schematic&quot;&gt;スケマティック&lt;/a&gt;では、 &lt;code&gt;Tree&lt;/code&gt; クラスで表される仮想ファイルシステム。 スケマティック&lt;a href=&quot;glossary#rule&quot;&gt;ルール&lt;/a&gt;は、入力としてツリーオブジェクトを受け取り、それらを操作して、新しいツリーオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="24e713671eb935b94463bbfce75319fb7e81b738" translate="yes">
          <source>In &lt;a href=&quot;http#adding-headers&quot;&gt;Adding headers&lt;/a&gt;, the &lt;code&gt;HeroesService&lt;/code&gt; set the default headers by passing an options object (&lt;code&gt;httpOptions&lt;/code&gt;) to its save methods. You can do more.</source>
          <target state="translated">&lt;a href=&quot;http#adding-headers&quot;&gt;ヘッダーの追加&lt;/a&gt;で、 &lt;code&gt;HeroesService&lt;/code&gt; はオプションオブジェクト（ &lt;code&gt;httpOptions&lt;/code&gt; ）をそのsaveメソッドに渡すことでデフォルトヘッダーを設定します。 あなたはもっとできます。</target>
        </trans-unit>
        <trans-unit id="419fc7b32aa230897c77ab6ce882d85080a20dfc" translate="yes">
          <source>In &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;, install the extension from the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&quot;&gt;Extensions: Marketplace&lt;/a&gt;. You can open the marketplace from the editor using the Extensions icon on the left menu pane, or use VS Quick Open (⌘+P on Mac, CTRL+P on Windows) and type &quot;? ext&quot;.</source>
          <target state="translated">&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;で、 &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Angular.ng-template&quot;&gt;Extensions：Marketplace&lt;/a&gt;から拡張機能をインストールします 。 左側のメニューペインの[拡張機能]アイコンを使用してエディターからマーケットプレイスを開くか、VSクイックオープン（Macでは⌘+ P、WindowsではCTRL + P）を使用して「？ext」と入力します。</target>
        </trans-unit>
        <trans-unit id="0de07a30f188c92d5f5c9abf71459a306a224cdb" translate="yes">
          <source>In &lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;, you must install the language service package as a project dependency.</source>
          <target state="translated">&lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;では、言語サービスパッケージをプロジェクトの依存関係としてインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="189f9093d7a12a56913779caf0448dafddac81fa" translate="yes">
          <source>In &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;, the Language Service supports only in-line templates when installed as a plug-in. You need a custom Sublime plug-in (or modifications to the current plug-in) for completions in HTML files.</source>
          <target state="translated">&lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;では、プラグインとしてインストールされた場合、言語サービスはインラインテンプレートのみをサポートします。 HTMLファイルの補完には、カスタムSublimeプラグイン（または現在のプラグインへの変更）が必要です。</target>
        </trans-unit>
        <trans-unit id="6adea1758de937c6940c286e654edf1f70a7341d" translate="yes">
          <source>In &lt;code&gt;HeroService&lt;/code&gt;, import the &lt;code&gt;MessageService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HeroService&lt;/code&gt; で、 &lt;code&gt;MessageService&lt;/code&gt; をインポートします。</target>
        </trans-unit>
        <trans-unit id="941837469f8f7292381b4b5d7fb8f52141c4b5b9" translate="yes">
          <source>In &lt;code&gt;ProfileEditorComponent&lt;/code&gt;, use the &lt;code&gt;updateProfile&lt;/code&gt; method with the example below to update the first name and street address for the user.</source>
          <target state="translated">&lt;code&gt;ProfileEditorComponent&lt;/code&gt; で 、下の例の &lt;code&gt;updateProfile&lt;/code&gt; メソッドを使用して、ユーザーの名と番地を更新します。</target>
        </trans-unit>
        <trans-unit id="c4552c52e0555afb5d7c5f59701433a331470a05" translate="yes">
          <source>In &lt;code&gt;angular.json&lt;/code&gt; add two new configuration sections under the &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;serve&lt;/code&gt; targets to point to the new TypeScript configuration.</source>
          <target state="translated">&lt;code&gt;angular.json&lt;/code&gt; で、 &lt;code&gt;build&lt;/code&gt; 下に2つの新しい構成セクションを追加し、新しいTypeScript構成を指すターゲットを &lt;code&gt;serve&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="88a62840642f50411d045256c59444f30c7be873" translate="yes">
          <source>In &lt;code&gt;app.module.ts&lt;/code&gt;, add a route for product details, with a &lt;code&gt;path&lt;/code&gt; of &lt;code&gt;products/:productId&lt;/code&gt; and &lt;code&gt;ProductDetailsComponent&lt;/code&gt; for the &lt;code&gt;component&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app.module.ts&lt;/code&gt; で、 &lt;code&gt;component&lt;/code&gt; の &lt;code&gt;products/:productId&lt;/code&gt; および &lt;code&gt;ProductDetailsComponent&lt;/code&gt; の &lt;code&gt;path&lt;/code&gt; を使用して、製品の詳細のルートを追加します 。</target>
        </trans-unit>
        <trans-unit id="c81e966129850cf415f6248bea69d0b9ed06ad7c" translate="yes">
          <source>In &lt;code&gt;app.module.ts&lt;/code&gt;, add a route for shipping. Specify a &lt;code&gt;path&lt;/code&gt; of &lt;code&gt;shipping&lt;/code&gt; and a component of &lt;code&gt;ShippingComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app.module.ts&lt;/code&gt; で 、配送のルートを追加します。 &lt;code&gt;shipping&lt;/code&gt; &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;ShippingComponent&lt;/code&gt; のコンポーネントを指定します 。</target>
        </trans-unit>
        <trans-unit id="6d895fdb94f9534c8a2f82b3d299e8227073cbd3" translate="yes">
          <source>In &lt;code&gt;app.module.ts&lt;/code&gt;, remove the &lt;code&gt;AdminModule&lt;/code&gt; import statement from the top of the file and remove the &lt;code&gt;AdminModule&lt;/code&gt; from the NgModule's &lt;code&gt;imports&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;app.module.ts&lt;/code&gt; で、ファイルの先頭から &lt;code&gt;AdminModule&lt;/code&gt; importステートメントを削除し、NgModuleの &lt;code&gt;imports&lt;/code&gt; 配列から &lt;code&gt;AdminModule&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="66c95ce78c49c2b818a248ba1ca84d28c18823cf" translate="yes">
          <source>In &lt;code&gt;cart.component.ts&lt;/code&gt;, define an &lt;code&gt;onSubmit()&lt;/code&gt; method to process the form. Use the &lt;code&gt;CartService#clearCart()&lt;/code&gt; method to empty the cart items and reset the form after it is submitted. (In a real-world app, this method also would submit the data to an external server.)</source>
          <target state="translated">&lt;code&gt;cart.component.ts&lt;/code&gt; で、フォームを処理する &lt;code&gt;onSubmit()&lt;/code&gt; メソッドを定義します。 &lt;code&gt;CartService#clearCart()&lt;/code&gt; メソッドを使用して、カートのアイテムを空にし、送信後にフォームをリセットします。 （実際のアプリでは、このメソッドはデータを外部サーバーに送信します。）</target>
        </trans-unit>
        <trans-unit id="0b5334d2075d36a21eeb7a9fdb6756d0e3353959" translate="yes">
          <source>In &lt;code&gt;index.html&lt;/code&gt;, change base href from &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;base href=&quot;/src/&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; で 、ベースhrefを &lt;code&gt;&amp;lt;base href=&quot;/&quot;&amp;gt;&lt;/code&gt; から &lt;code&gt;&amp;lt;base href=&quot;/src/&quot;&amp;gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="5d4c2508f6f46eaa4133ffeeaac2bf21600b45b7" translate="yes">
          <source>In &lt;code&gt;product-list.component.html&lt;/code&gt;, bind the &lt;code&gt;app-product-alerts&lt;/code&gt; component (which is what displays the &quot;Notify Me&quot; button) to the &lt;code&gt;onNotify()&lt;/code&gt; method of the product list component.</source>
          <target state="translated">&lt;code&gt;product-list.component.html&lt;/code&gt; で、 &lt;code&gt;app-product-alerts&lt;/code&gt; コンポーネント（「Notify Me」ボタンを表示するもの）を製品リストコンポーネントの &lt;code&gt;onNotify()&lt;/code&gt; メソッドにバインドします。</target>
        </trans-unit>
        <trans-unit id="c03f59b331ed7156718b1228952832ea7836769c" translate="yes">
          <source>In &lt;code&gt;src/systemjs.config.js&lt;/code&gt;, near the top of the file, change the npm &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;/node_modules/&lt;/code&gt; with a slash.</source>
          <target state="translated">&lt;code&gt;src/systemjs.config.js&lt;/code&gt; のファイルの上部近くで、npm &lt;code&gt;path&lt;/code&gt; をスラッシュで &lt;code&gt;/node_modules/&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="3bc1fafefe77f9932ae7d735645c4d33c9cc2eeb" translate="yes">
          <source>In Angular CLI version 8 and higher, applications are built using &lt;em&gt;differential loading&lt;/em&gt;, a strategy where the CLI builds two separate bundles as part of your deployed application.</source>
          <target state="translated">Angular CLIバージョン8以降では、デプロイされたアプリケーションの一部としてCLIが2つの別個のバンドルを構築する戦略である&lt;em&gt;差分ロード&lt;/em&gt;を使用して、アプリケーションが構築されます。</target>
        </trans-unit>
        <trans-unit id="e1431faabdc821757fa86b84a541dce584ba7634" translate="yes">
          <source>In Angular CLI version 8 and higher, differential loading is enabled by default for the &lt;code&gt;ng build&lt;/code&gt; command. The &lt;code&gt;ng serve&lt;/code&gt;, &lt;code&gt;ng test&lt;/code&gt;, and &lt;code&gt;ng e2e&lt;/code&gt; commands, however, generate a single ES2015 build which cannot run in older browsers that don't support the modules, such as IE 11.</source>
          <target state="translated">Angular CLIバージョン8以降では、 &lt;code&gt;ng build&lt;/code&gt; コマンドのデフォルトで差分ロードが有効になっています。 ただし、 &lt;code&gt;ng serve&lt;/code&gt; 、 &lt;code&gt;ng test&lt;/code&gt; 、および &lt;code&gt;ng e2e&lt;/code&gt; コマンドは、IE 11などのモジュールをサポートしない古いブラウザーでは実行できない単一のES2015ビルドを生成します。</target>
        </trans-unit>
        <trans-unit id="7b1d3994bf24bcb2d7b3fdd86f51dccd601e9753" translate="yes">
          <source>In Angular terminology, a platform is the context in which an Angular application runs. The most common platform for Angular applications is a web browser, but it can also be an operating system for a mobile device, or a web server.</source>
          <target state="translated">Angularの用語では、プラットフォームは、Angularアプリケーションが実行されるコンテキストです。 Angularアプリケーションの最も一般的なプラットフォームはWebブラウザーですが、モバイルデバイスのオペレーティングシステム、またはWebサーバーにすることもできます。</target>
        </trans-unit>
        <trans-unit id="46dd64bbc88ed581429aca94fdd9f3452d9971db" translate="yes">
          <source>In Angular things are different. While change detection still occurs after every event, no one needs to call &lt;code&gt;scope.$apply()&lt;/code&gt; for that to happen. This is because all Angular code runs inside something called the &lt;a href=&quot;../api/core/ngzone&quot;&gt;Angular zone&lt;/a&gt;. Angular always knows when the code finishes, so it also knows when it should kick off change detection. The code itself doesn't have to call &lt;code&gt;scope.$apply()&lt;/code&gt; or anything like it.</source>
          <target state="translated">Angularでは物事が異なります。 変更の検出はすべてのイベントの後に行われますが、そのために &lt;code&gt;scope.$apply()&lt;/code&gt; を呼び出す必要はありません。 これは、すべてのAngularコードが&lt;a href=&quot;../api/core/ngzone&quot;&gt;Angularゾーン&lt;/a&gt;と呼ばれるものの内部で実行されるためです。 Angularはいつコードが終了するかを常に把握しているため、変更検出を開始するタイミングも把握しています。 コード自体は &lt;code&gt;scope.$apply()&lt;/code&gt; またはそれに類するものを呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="4c74df3bafb8f0880b2718e644a5bb702ff44a77" translate="yes">
          <source>In Angular you use similar syntax with the pipe (|) character to filter output, but now you call them &lt;strong&gt;pipes&lt;/strong&gt;. Many (but not all) of the built-in filters from AngularJS are built-in pipes in Angular.</source>
          <target state="translated">Angularでは、パイプ（|）文字で同様の構文を使用して出力をフィルター処理しますが、今ではそれらを&lt;strong&gt;pipes&lt;/strong&gt;と呼びます。 AngularJSの組み込みフィルターの多く（すべてではありません）は、Angularの組み込みパイプです。</target>
        </trans-unit>
        <trans-unit id="95111c94dbd226bf1c1dbcb0a6c5aa4131254f48" translate="yes">
          <source>In Angular, &lt;code&gt;href&lt;/code&gt; is no longer used for routing. Routing uses &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt;, as shown in the following example.</source>
          <target state="translated">Angularでは、ルーティングに &lt;code&gt;href&lt;/code&gt; は使用されなくなりました。 次の例に示すように、ルーティングは &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;routerLink&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5776268b8d76370b45f02f052a40cf650053642c" translate="yes">
          <source>In Angular, &lt;strong&gt;two-way binding&lt;/strong&gt; is denoted by &lt;code&gt;[()]&lt;/code&gt;, descriptively referred to as a &quot;banana in a box&quot;. This syntax is a shortcut for defining both property binding (from the component to the view) and event binding (from the view to the component), thereby providing two-way binding.</source>
          <target state="translated">Angularでは、 &lt;strong&gt;双方向バインディング&lt;/strong&gt;は &lt;code&gt;[()]&lt;/code&gt; で示され、「ボックス内のバナナ」と記述的に呼ばれます。 この構文は、プロパティバインディング（コンポーネントからビューへ）とイベントバインディング（ビューからコンポーネントへ）の両方を定義するショートカットであり、双方向バインディングを提供します。</target>
        </trans-unit>
        <trans-unit id="f933bc6fc4b7b3378ae37914c32604c21b7bac57" translate="yes">
          <source>In Angular, a &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt; that provides functionality that can be included in other Angular apps. A library isn't a complete Angular app and can't run independently. (To add re-usable Angular functionality to non-Angular web apps, you can use Angular &lt;a href=&quot;glossary#angular-element&quot;&gt;custom elements&lt;/a&gt;.)</source>
          <target state="translated">Angularで、他のAngularアプリに含めることができる機能を提供する&lt;a href=&quot;glossary#project&quot;&gt;プロジェクト&lt;/a&gt; 。 ライブラリは完全なAngularアプリではなく、独立して実行することはできません。 （再利用可能なAngular機能をAngular以外のWebアプリに追加するには、Angular &lt;a href=&quot;glossary#angular-element&quot;&gt;カスタム要素を&lt;/a&gt;使用できます。）</target>
        </trans-unit>
        <trans-unit id="4d102678eee21e14e16ac6c77664ce7f07fe617f" translate="yes">
          <source>In Angular, a class with the &lt;a href=&quot;glossary#injectable&quot;&gt;@Injectable()&lt;/a&gt; decorator that encapsulates non-UI logic and code that can be reused across an application. Angular distinguishes components from services to increase modularity and reusability.</source>
          <target state="translated">Angularで、アプリケーション全体で再利用できる非UIロジックとコードをカプセル化する&lt;a href=&quot;glossary#injectable&quot;&gt;@Injectable（）&lt;/a&gt;デコレータを持つクラス。 Angularは、コンポーネントとサービスを区別して、モジュール性と再利用性を高めます。</target>
        </trans-unit>
        <trans-unit id="42472280db2836f2049c258a790c8995069f17d9" translate="yes">
          <source>In Angular, a set of related &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; collected in an &lt;a href=&quot;glossary#npm-package&quot;&gt;npm package&lt;/a&gt;.</source>
          <target state="translated">Angularでは、 &lt;a href=&quot;glossary#npm-package&quot;&gt;npmパッケージで&lt;/a&gt;収集された関連する&lt;a href=&quot;glossary#schematic&quot;&gt;スケマティックの&lt;/a&gt;セット。</target>
        </trans-unit>
        <trans-unit id="e67a287fde6cc9945eb3f6d9f0c4d95950a65f6b" translate="yes">
          <source>In Angular, a template expression in curly braces still denotes one-way binding. This binds the value of the element to a property of the component. The context of the binding is implied and is always the associated component, so it needs no reference variable.</source>
          <target state="translated">Angularでは、中括弧で囲まれたテンプレート式は、まだ一方向のバインディングを示しています。 これにより、要素の値がコンポーネントのプロパティにバインドされます。 バインディングのコンテキストは暗黙的に示され、常に関連付けられたコンポーネントであるため、参照変数は必要ありません。</target>
        </trans-unit>
        <trans-unit id="43af6c84f806d548cba3d9e875a82ca2c2ac11d1" translate="yes">
          <source>In Angular, an app's root NgModule (&lt;code&gt;AppModule&lt;/code&gt;) has a &lt;code&gt;bootstrap&lt;/code&gt; property that identifies the app's top-level &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt;. During the bootstrap process, Angular creates and inserts these components into the &lt;code&gt;index.html&lt;/code&gt; host web page. You can bootstrap multiple apps in the same &lt;code&gt;index.html&lt;/code&gt;. Each app contains its own components.</source>
          <target state="translated">Angularでは、アプリのルートNgModule（ &lt;code&gt;AppModule&lt;/code&gt; ）には、アプリのトップレベル&lt;a href=&quot;glossary#component&quot;&gt;コンポーネント&lt;/a&gt;を識別する &lt;code&gt;bootstrap&lt;/code&gt; プロパティがあります 。 ブートストラッププロセス中に、Angularはこれらのコンポーネントを作成し、 &lt;code&gt;index.html&lt;/code&gt; ホストWebページに挿入します。 同じ &lt;code&gt;index.html&lt;/code&gt; で複数のアプリをブートストラップできます。 各アプリには独自のコンポーネントが含まれています。</target>
        </trans-unit>
        <trans-unit id="bbb7472c46802d488a515304f6fc524e7754d847" translate="yes">
          <source>In Angular, components are the main primitive from which user interfaces are built. You define the different portions of the UI as components and compose them into a full user experience.</source>
          <target state="translated">Angularでは、コンポーネントはユーザーインターフェイスを構築する主要なプリミティブです。 UIのさまざまな部分をコンポーネントとして定義し、それらを完全なユーザーエクスペリエンスに構成します。</target>
        </trans-unit>
        <trans-unit id="d57111c7e00014610f562bb31fefc30b6f3895c6" translate="yes">
          <source>In Angular, dependencies are typically services, but they also can be values, such as strings or functions. An &lt;a href=&quot;glossary#injector&quot;&gt;injector&lt;/a&gt; for an app (created automatically during bootstrap) instantiates dependencies when needed, using a configured &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt; of the service or value.</source>
          <target state="translated">Angularでは、依存関係は通常はサービスですが、文字列や関数などの値にすることもできます。 アプリの&lt;a href=&quot;glossary#injector&quot;&gt;インジェクター&lt;/a&gt; （ブートストラップ中に自動的に作成される）は、サービスまたは値の構成済み&lt;a href=&quot;glossary#provider&quot;&gt;プロバイダー&lt;/a&gt;を使用して、必要に応じて依存関係をインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="49a00199a43ff42e00e1d7703a54a94326ede49c" translate="yes">
          <source>In Angular, the &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; directive works similarly. It includes/excludes CSS classes based on an expression.</source>
          <target state="translated">Angularでは、 &lt;code&gt;&lt;a href=&quot;../api/common/ngclass&quot;&gt;ngClass&lt;/a&gt;&lt;/code&gt; ディレクティブも同様に機能します。 式に基づいてCSSクラスを含める/除外します。</target>
        </trans-unit>
        <trans-unit id="3bf0e4f69a8ebfd62b6c1ef86d6048033054f53f" translate="yes">
          <source>In Angular, the &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; directive works similarly. It sets a CSS style on an HTML element based on an expression.</source>
          <target state="translated">Angularでは、 &lt;code&gt;&lt;a href=&quot;../api/common/ngstyle&quot;&gt;ngStyle&lt;/a&gt;&lt;/code&gt; ディレクティブも同様に機能します。 式に基づいてHTML要素にCSSスタイルを設定します。</target>
        </trans-unit>
        <trans-unit id="d14c88becd3c4b7ad223e1c52839e5fb106a2219" translate="yes">
          <source>In Angular, the &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; directive works similarly. It displays an element whose &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; matches the current &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; expression value.</source>
          <target state="translated">Angularでは、 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; ディレクティブは同様に機能します。 &lt;code&gt;*&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;ngSwitchCase&lt;/a&gt;&lt;/code&gt; が現在の &lt;code&gt;&lt;a href=&quot;../api/common/ngswitch&quot;&gt;ngSwitch&lt;/a&gt;&lt;/code&gt; 式の値と一致する要素を表示します。</target>
        </trans-unit>
        <trans-unit id="7fa35db99b5e7128d37e25c36e032619af14914f" translate="yes">
          <source>In Angular, the DI framework provides declared dependencies to a class when that class is instantiated. This guide explains how DI works in Angular, and how you use it to make your apps flexible, efficient, and robust, as well as testable and maintainable.</source>
          <target state="translated">Angularでは、DIフレームワークは、クラスがインスタンス化されるときに、クラスに宣言された依存関係を提供します。 このガイドでは、AngularでDIがどのように機能するのか、DIを使用してアプリを柔軟、効率的、堅牢、テスト可能、保守可能にする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="56cf5a3785dda1a9e94cccd5c7f98706c65752e1" translate="yes">
          <source>In Angular, the best practice is to load and configure the router in a separate, top-level module that is dedicated to routing and imported by the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">Angularのベストプラクティスは、ルーティング専用でルート &lt;code&gt;AppModule&lt;/code&gt; によってインポートされる別個の最上位モジュールにルーターをロードして構成することです。</target>
        </trans-unit>
        <trans-unit id="59cb913403e7197319cc31442b4a8397dc93031f" translate="yes">
          <source>In Angular, the template no longer specifies its associated controller. Rather, the component specifies its associated template as part of the component class decorator.</source>
          <target state="translated">Angularでは、テンプレートは関連するコントローラーを指定しなくなりました。 むしろ、コンポーネントは、コンポーネントクラスデコレータの一部として、関連するテンプレートを指定します。</target>
        </trans-unit>
        <trans-unit id="25736a6eef4ea1a73caec95ccf80b14819cbeacf" translate="yes">
          <source>In Angular, transition states can be defined explicitly through the &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; function, or using the predefined &lt;code&gt;*&lt;/code&gt; (wildcard) and &lt;code&gt;void&lt;/code&gt; states.</source>
          <target state="translated">Angularでは、 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 関数を使用して、または事前定義された &lt;code&gt;*&lt;/code&gt; （ワイルドカード）状態と &lt;code&gt;void&lt;/code&gt; 状態を使用して、遷移状態を明示的に定義できます。</target>
        </trans-unit>
        <trans-unit id="4e131d233620271698d30ea65871deadb93e35a0" translate="yes">
          <source>In Angular, use JSONP by including &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientjsonpmodule&quot;&gt;HttpClientJsonpModule&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; imports. In the following example, the &lt;code&gt;searchHeroes()&lt;/code&gt; method uses a JSONP request to query for heroes whose names contain the search term.</source>
          <target state="translated">Angularでは、 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; インポートに &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientjsonpmodule&quot;&gt;HttpClientJsonpModule&lt;/a&gt;&lt;/code&gt; を含めることでJSONPを使用します。 次の例では、 &lt;code&gt;searchHeroes()&lt;/code&gt; メソッドはJSONPリクエストを使用して、名前に検索語が含まれるヒーローを照会します。</target>
        </trans-unit>
        <trans-unit id="95bc62450c4a6ad00b962b6c8b2526a974d4070b" translate="yes">
          <source>In Angular, you can set multiple styles without any animation. However, without further refinement, the button instantly transforms with no fade, no shrinkage, or other visible indicator that a change is occurring.</source>
          <target state="translated">Angularでは、アニメーションなしで複数のスタイルを設定できます。 ただし、さらに改良することなく、ボタンは、フェード、収縮、または変更が発生していることを示す他の目に見えるインジケータなしで即座に変形します。</target>
        </trans-unit>
        <trans-unit id="db7fc84f2aa2ba81061de8add0ab492452e7b00b" translate="yes">
          <source>In Angular, you can use the &lt;code&gt;styles&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; property of the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata to define a style sheet for a particular component.</source>
          <target state="translated">Angularでは、 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; メタデータの &lt;code&gt;styles&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../api/core/component#styleUrls&quot;&gt;styleUrls&lt;/a&gt;&lt;/code&gt; プロパティを使用して、特定のコンポーネントのスタイルシートを定義できます。</target>
        </trans-unit>
        <trans-unit id="917fd81c1d70d9d7fbe4bfbac7c25842ecbe5775" translate="yes">
          <source>In Angular, you create a component class to contain the data model and control methods. Use the TypeScript &lt;code&gt;export&lt;/code&gt; keyword to export the class so that the functionality can be imported into NgModules.</source>
          <target state="translated">Angularでは、データモデルとコントロールメソッドを含むコンポーネントクラスを作成します。 TypeScript &lt;code&gt;export&lt;/code&gt; キーワードを使用して、機能をNgModulesにインポートできるようにクラスをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="9d13198215c21edc80169cd08c0e85464770e5e5" translate="yes">
          <source>In Angular, you pass in dependencies as arguments to the component class constructor. This example injects a &lt;code&gt;MovieService&lt;/code&gt;. The first parameter's TypeScript type tells Angular what to inject, even after minification.</source>
          <target state="translated">Angularでは、コンポーネントクラスコンストラクターに引数として依存関係を渡します。 この例では、 &lt;code&gt;MovieService&lt;/code&gt; を注入します 。 最初のパラメーターのTypeScriptタイプは、縮小後でも、Angularに何を注入するかを指示します。</target>
        </trans-unit>
        <trans-unit id="2befa90df23e1fd4a51bf9026307335169223d9a" translate="yes">
          <source>In Angular, you use property binding; there is no built-in &lt;em&gt;hide&lt;/em&gt; directive. For more information, see &lt;a href=&quot;ajs-quick-reference#ng-show&quot;&gt;ng-show&lt;/a&gt;.</source>
          <target state="translated">Angularでは、プロパティバインディングを使用します。 組み込みの&lt;em&gt;hide&lt;/em&gt;ディレクティブはありません。 詳細については、 &lt;a href=&quot;ajs-quick-reference#ng-show&quot;&gt;ng-showを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7cabd7a1d2e9dfa73456a5cfdfed14d83c3ff687" translate="yes">
          <source>In AngularJS, an Angular module keeps track of controllers, services, and other code. The second argument defines the list of other modules that this module depends upon.</source>
          <target state="translated">AngularJSでは、Angularモジュールがコントローラー、サービス、その他のコードを追跡します。 2番目の引数は、このモジュールが依存する他のモジュールのリストを定義します。</target>
        </trans-unit>
        <trans-unit id="59f6e03fe28a109551d993bba2ab50942b6034e7" translate="yes">
          <source>In AngularJS, an expression in curly braces denotes one-way binding. This binds the value of the element to a property in the controller associated with this template.</source>
          <target state="translated">AngularJSでは、中括弧内の式は一方向のバインディングを示します。 これにより、要素の値がこのテンプレートに関連付けられたコントローラのプロパティにバインドされます。</target>
        </trans-unit>
        <trans-unit id="c6449941b0d5bd79435ee303f5b25fb1a3a1c3df" translate="yes">
          <source>In AngularJS, an immediately invoked function expression (or IIFE) around controller code keeps it out of the global namespace.</source>
          <target state="translated">AngularJSでは、コントローラーコードを中心にすぐに呼び出される関数式（またはIIFE）により、グローバル名前空間から除外されます。</target>
        </trans-unit>
        <trans-unit id="3402c056b50a9d166afa19ff142bd9f2d0f52a15" translate="yes">
          <source>In AngularJS, the &lt;a href=&quot;https://docs.angularjs.org/api/ng/service/%24location&quot;&gt;$location service&lt;/a&gt; handles all routing configuration and navigation, encoding and decoding of URLS, redirects, and interactions with browser APIs. Angular uses its own underlying &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; service for all of these tasks.</source>
          <target state="translated">AngularJSでは、 &lt;a href=&quot;https://docs.angularjs.org/api/ng/service/%24location&quot;&gt;$ locationサービス&lt;/a&gt;がすべてのルーティング構成とナビゲーション、URLSのエンコードとデコード、リダイレクト、ブラウザーAPIとの対話を処理します。 Angularは、これらすべてのタスクに独自の基盤となる &lt;code&gt;&lt;a href=&quot;../api/common/location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; サービスを使用します。</target>
        </trans-unit>
        <trans-unit id="eb398e0b3db43606304c259cfff7981355eca61f" translate="yes">
          <source>In AngularJS, the &lt;code&gt;ng-class&lt;/code&gt; directive includes/excludes CSS classes based on an expression. That expression is often a key-value control object with each key of the object defined as a CSS class name, and each value defined as a template expression that evaluates to a Boolean value.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-class&lt;/code&gt; ディレクティブは式に基づいてCSSクラスを包含/除外します。 その式は、多くの場合、CSSクラス名として定義されたオブジェクトの各キーと、ブール値に評価されるテンプレート式として定義された各値を持つキー値制御オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="818af6bd07f74440493d9b442a5bd574408dafb9" translate="yes">
          <source>In AngularJS, the &lt;code&gt;ng-click&lt;/code&gt; directive allows you to specify custom behavior when an element is clicked.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-click&lt;/code&gt; ディレクティブを使用して、要素がクリックされたときのカスタム動作を指定できます。</target>
        </trans-unit>
        <trans-unit id="2fbad8407ae81e7c90d5bd49b9e78709b7734b35" translate="yes">
          <source>In AngularJS, the &lt;code&gt;ng-controller&lt;/code&gt; directive attaches a controller to the view. Using the &lt;code&gt;ng-controller&lt;/code&gt; (or defining the controller as part of the routing) ties the view to the controller code associated with that view.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-controller&lt;/code&gt; ディレクティブはビューにコントローラーをアタッチします。 &lt;code&gt;ng-controller&lt;/code&gt; を使用（またはルーティングの一部としてコントローラーを定義）すると、ビューがそのビューに関連付けられたコントローラーコードに結び付けられます。</target>
        </trans-unit>
        <trans-unit id="014cadcee952b130a89b2cacda8d8fb19ba39ecf" translate="yes">
          <source>In AngularJS, the &lt;code&gt;ng-hide&lt;/code&gt; directive shows or hides the associated HTML element based on an expression. For more information, see &lt;a href=&quot;ajs-quick-reference#ng-show&quot;&gt;ng-show&lt;/a&gt;.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-hide&lt;/code&gt; ディレクティブは式に基づいて関連するHTML要素を表示または非表示にします。 詳細については、 &lt;a href=&quot;ajs-quick-reference#ng-show&quot;&gt;ng-showを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="55692422426a5f190e228d159889d4e818c0c281" translate="yes">
          <source>In AngularJS, the &lt;code&gt;ng-href&lt;/code&gt; is often used to activate a route as part of navigation.</source>
          <target state="translated">AngularJSでは、ナビゲーションの一部としてルートをアクティブ化するために &lt;code&gt;ng-href&lt;/code&gt; がよく使用されます。</target>
        </trans-unit>
        <trans-unit id="98ac54bfebe79300df81d93eb3d99942dfa78df6" translate="yes">
          <source>In AngularJS, the &lt;code&gt;ng-if&lt;/code&gt; directive removes or recreates a portion of the DOM, based on an expression. If the expression is false, the element is removed from the DOM.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-if&lt;/code&gt; ディレクティブは式に基づいてDOMの一部を削除または再作成します。 式が偽の場合、要素はDOMから削除されます。</target>
        </trans-unit>
        <trans-unit id="bae5a3f3040e93734d778be2fb6b9823f2178635" translate="yes">
          <source>In AngularJS, the &lt;code&gt;ng-model&lt;/code&gt; directive binds a form control to a property in the controller associated with the template. This provides &lt;strong&gt;two-way binding&lt;/strong&gt;, whereby any change made to the value in the view is synchronized with the model, and any change to the model is synchronized with the value in the view.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-model&lt;/code&gt; ディレクティブは、フォームコントロールをテンプレートに関連付けられたコントローラーのプロパティにバインドします。 これにより、 &lt;strong&gt;双方向バインディングが&lt;/strong&gt;提供されます。これにより、ビューの値に加えられた変更はモデルと同期され、モデルへの変更はビューの値と同期されます。</target>
        </trans-unit>
        <trans-unit id="903b10b4d3b7257fdd75c38b26fddc8e2292ab92" translate="yes">
          <source>In AngularJS, the &lt;code&gt;ng-repeat&lt;/code&gt; directive repeats the associated DOM element for each item in the specified collection.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-repeat&lt;/code&gt; ディレクティブは、指定されたコレクションの各アイテムに関連付けられたDOM要素を繰り返します。</target>
        </trans-unit>
        <trans-unit id="2ed583230e835e013e2faaccadd4c5987e0b6dcf" translate="yes">
          <source>In AngularJS, the &lt;code&gt;ng-show&lt;/code&gt; directive shows or hides the associated DOM element, based on an expression.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-show&lt;/code&gt; ディレクティブは、式に基づいて、関連付けられたDOM要素を表示または非表示にします。</target>
        </trans-unit>
        <trans-unit id="71b37da7b6fe1a95ea082ca481f794b3337c391f" translate="yes">
          <source>In AngularJS, the &lt;code&gt;ng-style&lt;/code&gt; directive sets a CSS style on an HTML element based on an expression. That expression is often a key-value control object with each key of the object defined as a CSS property, and each value defined as an expression that evaluates to a value appropriate for the style.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-style&lt;/code&gt; ディレクティブは式に基づいてHTML要素にCSSスタイルを設定します。 その式は、多くの場合、CSSプロパティとして定義されたオブジェクトの各キーと、スタイルに適した値に評価される式として定義された各値を持つキー値制御オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="e0656ba1ea23edbe16f8089baec62aca2d5b8917" translate="yes">
          <source>In AngularJS, the &lt;code&gt;ng-switch&lt;/code&gt; directive swaps the contents of an element by selecting one of the templates based on the current value of an expression.</source>
          <target state="translated">AngularJSでは、 &lt;code&gt;ng-switch&lt;/code&gt; ディレクティブは、式の現在の値に基づいてテンプレートの1つを選択することにより、要素の内容を交換します。</target>
        </trans-unit>
        <trans-unit id="1d52894dd4f10a8182acd7f3bd00849e805e2e2e" translate="yes">
          <source>In AngularJS, you pass in any dependencies as controller function arguments. This example injects a &lt;code&gt;MovieService&lt;/code&gt;.</source>
          <target state="translated">AngularJSでは、依存関係をコントローラー関数の引数として渡します。 この例では、 &lt;code&gt;MovieService&lt;/code&gt; を注入します 。</target>
        </trans-unit>
        <trans-unit id="9ac4f51e9351e87b9cfd8dd2361b98292c81adc4" translate="yes">
          <source>In AngularJS, you write the code for the model and methods in a controller function.</source>
          <target state="translated">AngularJSでは、コントローラー関数でモデルとメソッドのコードを記述します。</target>
        </trans-unit>
        <trans-unit id="4f4f7dccd62d663335cfb71ca12781b89ca1acf4" translate="yes">
          <source>In AngularJS, you write the code that provides the model and the methods for the view in a &lt;strong&gt;controller&lt;/strong&gt;. In Angular, you build a &lt;strong&gt;component&lt;/strong&gt;.</source>
          <target state="translated">AngularJSでは、 &lt;strong&gt;コントローラの&lt;/strong&gt;ビューにモデルとメソッドを提供するコードを記述します。 Angularでは、 &lt;strong&gt;コンポーネント&lt;/strong&gt;を構築し&lt;strong&gt;ます&lt;/strong&gt; 。</target>
        </trans-unit>
        <trans-unit id="17aa02fbd3f7b1d58bafeb9efaf4a3d0381fa09f" translate="yes">
          <source>In HTML, these attributes are set using ordinary CSS styles such as color and opacity. In Angular, use the &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; function to specify a set of CSS styles for use with animations. You can collect a set of styles in an animation state, and give the state a name, such as &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt;.</source>
          <target state="translated">HTMLでは、これらの属性は色や不透明度などの通常のCSSスタイルを使用して設定されます。 Angularでは、 &lt;code&gt;&lt;a href=&quot;../api/animations/style&quot;&gt;style&lt;/a&gt;()&lt;/code&gt; 関数を使用して、アニメーションで使用するCSSスタイルのセットを指定します。 アニメーション状態の一連のスタイルを収集し、状態に &lt;code&gt;open&lt;/code&gt; や &lt;code&gt;closed&lt;/code&gt; などの名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="2e23c70ae53e4e39b6efe1c2cca3a6e135570227" translate="yes">
          <source>In JavaScript (ECMAScript), each file is a module and all objects defined in the file belong to that module. Objects can exported, making them public, and public objects can be imported for use by other modules.</source>
          <target state="translated">JavaScript（ECMAScript）では、各ファイルはモジュールであり、ファイルで定義されたすべてのオブジェクトはそのモジュールに属します。 オブジェクトをエクスポートしてパブリックにすることができ、パブリックオブジェクトをインポートして他のモジュールで使用できます。</target>
        </trans-unit>
        <trans-unit id="00113ac64c73beea3e7d378ff1f842ddd2316ba2" translate="yes">
          <source>In JavaScript each &lt;em&gt;file&lt;/em&gt; is a module and all objects defined in the file belong to that module. The module declares some objects to be public by marking them with the &lt;code&gt;export&lt;/code&gt; key word. Other JavaScript modules use &lt;em&gt;import statements&lt;/em&gt; to access public objects from other modules.</source>
          <target state="translated">JavaScriptでは、各&lt;em&gt;ファイル&lt;/em&gt;はモジュールであり、ファイルで定義されたすべてのオブジェクトはそのモジュールに属します。 モジュールは、一部のオブジェクトを &lt;code&gt;export&lt;/code&gt; キーワードでマークすることにより、パブリックであると宣言します。 他のJavaScriptモジュールは&lt;em&gt;importステートメント&lt;/em&gt;を使用して、他のモジュールからパブリックオブジェクトにアクセスします。</target>
        </trans-unit>
        <trans-unit id="fb85040b15049e982959bb2339113e3e8a73a679" translate="yes">
          <source>In JavaScript, modules are individual files with JavaScript code in them. To make what&amp;rsquo;s in them available, you write an export statement, usually after the relevant code, like this:</source>
          <target state="translated">JavaScriptでは、モジュールはJavaScriptコードを含む個々のファイルです。 それらの内容を利用可能にするには、通常、関連するコードの後に​​、次のようにexportステートメントを記述します。</target>
        </trans-unit>
        <trans-unit id="9bdc952c572e3628d4fe93bd50574b4a309ba81b" translate="yes">
          <source>In Sass and Stylus you can make use of the &lt;code&gt;includePaths&lt;/code&gt; functionality for both component and global styles, which allows you to add extra base paths that will be checked for imports.</source>
          <target state="translated">SassおよびStylusでは、コンポーネントスタイルとグローバルスタイルの両方で &lt;code&gt;includePaths&lt;/code&gt; 機能を使用できます。これにより、インポートのためにチェックされる追加のベースパスを追加できます。</target>
        </trans-unit>
        <trans-unit id="92a7b3a74d45330ef286338b8bdb3743222ebf0d" translate="yes">
          <source>In Visual Studio, select &lt;code&gt;File&lt;/code&gt; | &lt;code&gt;New&lt;/code&gt; | &lt;code&gt;Project&lt;/code&gt; from the menu.</source>
          <target state="translated">Visual Studioで、[ &lt;code&gt;File&lt;/code&gt; | [ &lt;code&gt;New&lt;/code&gt; | メニューから &lt;code&gt;Project&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a46a63cb5e6dd220a5995dd3ad65a3d4cfd3913" translate="yes">
          <source>In Windows, by default, one application can only have 6 websocket connections, &lt;a href=&quot;https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&amp;amp;MSPPError=-2147217396#websocket_maxconn&quot;&gt;MSDN WebSocket Settings&lt;/a&gt;. So when IE is refreshed (manually or automatically by &lt;code&gt;ng serve&lt;/code&gt;), sometimes the websocket does not close properly. When websocket connections exceed the limitations, a &lt;code&gt;SecurityError&lt;/code&gt; will be thrown. This error will not affect the angular application, you can just restart IE to clear this error, or modify the windows registry to update the limitations.</source>
          <target state="translated">Windowsでは、デフォルトで、1つのアプリケーションは6つのwebsocket接続（ &lt;a href=&quot;https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&amp;amp;MSPPError=-2147217396#websocket_maxconn&quot;&gt;MSDN WebSocket設定）&lt;/a&gt;のみを持つことができます。 そのため、IEが（手動または &lt;code&gt;ng serve&lt;/code&gt; によって自動的に）更新されると、Websocketが適切に閉じられないことがあります。 WebSocket接続が制限を超えると、 &lt;code&gt;SecurityError&lt;/code&gt; がスローされます。 このエラーはAngularのあるアプリケーションには影響しません。IEを再起動してこのエラーをクリアするか、Windowsレジストリを変更して制限を更新できます。</target>
        </trans-unit>
        <trans-unit id="0e58c3e6bb3aef781aa7181c15464f286c38606f" translate="yes">
          <source>In a &lt;a href=&quot;toh-pt6&quot;&gt;later tutorial on HTTP&lt;/a&gt;, you'll learn that Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; methods return RxJS &lt;code&gt;Observable&lt;/code&gt;s. In this tutorial, you'll simulate getting data from the server with the RxJS &lt;code&gt;of()&lt;/code&gt; function.</source>
          <target state="translated">&lt;a href=&quot;toh-pt6&quot;&gt;HTTPに関する後のチュートリアルで&lt;/a&gt;は、Angularの &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; メソッドがRxJS &lt;code&gt;Observable&lt;/code&gt; を返すことを学びます。 このチュートリアルでは、RxJS &lt;code&gt;of()&lt;/code&gt; 関数を使用してサーバーからデータを取得することをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="3cf5e053e84e39697369f0ce6c53d2386e757b8d" translate="yes">
          <source>In a common anti-XSRF technique, the application server sends a randomly generated authentication token in a cookie. The client code reads the cookie and adds a custom request header with the token in all subsequent requests. The server compares the received cookie value to the request header value and rejects the request if the values are missing or don't match.</source>
          <target state="translated">一般的な反XSRF手法では、アプリケーションサーバーは、ランダムに生成された認証トークンをCookieで送信します。 クライアントコードはCookieを読み取り、それ以降のすべてのリクエストでカスタムリクエストヘッダーとトークンを追加します。 サーバーは、受信したCookie値を要求ヘッダー値と比較し、値が欠落しているか一致しない場合、要求を拒否します。</target>
        </trans-unit>
        <trans-unit id="1d8d7cbdfb73e6a03899934d4c9da16af41b336d" translate="yes">
          <source>In a cross-site request forgery (CSRF or XSRF), an attacker tricks the user into visiting a different web page (such as &lt;code&gt;evil.com&lt;/code&gt;) with malignant code that secretly sends a malicious request to the application's web server (such as &lt;code&gt;example-bank.com&lt;/code&gt;).</source>
          <target state="translated">クロスサイトリクエストフォージェリ（CSRFまたはXSRF）では、攻撃者がユーザーをだまして、悪意のあるリクエストをアプリケーションのWebサーバー（たとえば、 &lt;code&gt;example-bank.com&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c294d986a3a0791f76abb2659d73016c21090bb6" translate="yes">
          <source>In a hybrid app you run both frameworks at the same time. This means that you need at least one module each from both AngularJS and Angular.</source>
          <target state="translated">ハイブリッドアプリでは、両方のフレームワークを同時に実行します。 つまり、AngularJSとAngularの両方から少なくとも1つのモジュールが必要です。</target>
        </trans-unit>
        <trans-unit id="dd49097c4af31e8ff37d4dffaf61ab60999b9c63" translate="yes">
          <source>In a hybrid application you run both versions of Angular at the same time. That means that you need at least one module each from both AngularJS and Angular. You will import &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; inside the NgModule, and then use it for bootstrapping the AngularJS module.</source>
          <target state="translated">ハイブリッドアプリケーションでは、Angularの両方のバージョンを同時に実行します。 つまり、AngularJSとAngularの両方から少なくとも1つのモジュールが必要です。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; をNgModule内にインポートしてから、AngularJSモジュールのブートストラップに使用します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
