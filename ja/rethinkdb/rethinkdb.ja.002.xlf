<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rethinkdb">
    <body>
      <group id="rethinkdb">
        <trans-unit id="f51818dcdf4f368c223908d0227b7c99aaef6933" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Test if a player has scored 10 points or more.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;プレーヤーが10ポイント以上獲得したかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="20d338ca147db8bc301f37b24d2b68a9d9481f92" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Test if a player has scored less than 10 points.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;プレーヤーのスコアが10ポイント未満かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="b47cfc587ce4b73495c663a968322a38db3673ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Test if a player has scored more than 10 points.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;プレーヤーが10ポイント以上獲得したかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="b6faab4facd667a0ca45362d5e9ed50ab4292557" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Test if a specific player has won any games.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;特定のプレーヤーがゲームに勝ったかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="25b295996b2a8bc49c2f435a8ce610f6f0561fd7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Test if variables are ordered from highest to lowest, with no values being equal to one another.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;変数が最高から最低の順に並べられており、互いに等しい値がないかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="1715ee19387211b4fa08b8d07d4a02c36b8887c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Test if variables are ordered from highest to lowest.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;変数が最高から最低の順に並べられているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="efe14ffa71b768c70b24bdcb9aa8b4ded96468df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Test if variables are ordered from lowest to highest, with no values being equal to one another.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;変数が最低から最高の順に並べられており、互いに等しい値がないかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="b012b6a6b5ab60ec6b3e9d9ae7f3df676e8bf306" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Test if variables are ordered from lowest to highest.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;変数が最低から最高の順に並べられているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="44e2309d2ba18f5f27f8230ef54ff6e8ae9398e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Test the value of x.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; xの値をテストします。</target>
        </trans-unit>
        <trans-unit id="0d47acaf83e71e8ab41fb3d6cf49405e0abfdf7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; The &lt;code&gt;default&lt;/code&gt; command can also be used to filter documents. Retrieve all our users who are not grown-ups or whose age is unknown (i.e., the field &lt;code&gt;age&lt;/code&gt; is missing or equals &lt;code&gt;null&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; &lt;code&gt;default&lt;/code&gt; コマンドは、フィルタの文書に使用することができます。大人でないか、年齢が不明なすべてのユーザーを取得します（つまり、フィールドの &lt;code&gt;age&lt;/code&gt; が見つからないか &lt;code&gt;null&lt;/code&gt; に等しい）。</target>
        </trans-unit>
        <trans-unit id="8e71d3b3935a410521806f24ebae64994cfaccaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; The function form of &lt;code&gt;default&lt;/code&gt; receives the error message as its argument.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; &lt;code&gt;default&lt;/code&gt; の関数形式は、エラーメッセージを引数として受け取ります。</target>
        </trans-unit>
        <trans-unit id="dbcdf7dc6851e1a4dcde29d55ec6f3dd67355daa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; The nested syntax can quickly become overly verbose so there&amp;rsquo;s a shorthand for it.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ネストされた構文はすぐに過度に冗長になる可能性があるため、省略形があります。</target>
        </trans-unit>
        <trans-unit id="718b9bdef9de93be8ee54b6b95f92d0f454a3031" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; The same as above, but using a secondary index on the &lt;code&gt;points&lt;/code&gt; field.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;上記と同じですが、 &lt;code&gt;points&lt;/code&gt; フィールドにセカンダリインデックスを使用します。</target>
        </trans-unit>
        <trans-unit id="0a284e232a3a81c033f9cd8e1fc4eeaf8a59b018" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; To replace a nested object with another object you can use the literal keyword.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ネストされたオブジェクトを別のオブジェクトで置き換えるには、literalキーワードを使用できます。</target>
        </trans-unit>
        <trans-unit id="bf6d4d7aba398752103b9197ce9633155c3c891a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Topics in a table of messages have a secondary index on them, and more than one message can have the same topic. What are the unique topics in the table?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;メッセージの表のトピックにはセカンダリインデックスがあり、複数のメッセージが同じトピックを持つことができます。表内の固有のトピックは何ですか？</target>
        </trans-unit>
        <trans-unit id="37691ba2084cf7ed5121d3154fd01c19317d2912" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Types!</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;タイプ！</target>
        </trans-unit>
        <trans-unit id="6b8199a256d48977d4d0fd99a40b3c0039fb0ebf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Ungrouping grouped data.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;グループ化されたデータのグループ化を解除します。</target>
        </trans-unit>
        <trans-unit id="a6ade042bf43a1ef4df87257f4fb875e29eb14ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Update Bob Smith&amp;rsquo;s cell phone number.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ボブ・スミスの携帯電話番号を更新します。</target>
        </trans-unit>
        <trans-unit id="64524c007da5b7bbceec0f0137ae8d713d530acb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Update the birthdate of the user &amp;ldquo;John&amp;rdquo; to November 3rd, 1986 UTC.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ユーザー「John」の誕生日を1986年11月3日UTCに更新します。</target>
        </trans-unit>
        <trans-unit id="b2d167cdc02b7b2a6a194b4c5d303c3d2ca094fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Update the birthdate of the user &amp;ldquo;John&amp;rdquo; to November 3rd, 1986.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ユーザー「John」の誕生日を1986年11月3日に更新します。</target>
        </trans-unit>
        <trans-unit id="a4da5d2e7bf018e82b0db58e01d0b954535a0f46" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Update the field &lt;code&gt;numComments&lt;/code&gt; with a random value between 0 and 100. This update cannot be proven deterministic because of &lt;code&gt;r.js&lt;/code&gt; (and in fact is not), so you must pass the &lt;code&gt;nonAtomic&lt;/code&gt; flag.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;フィールド &lt;code&gt;numComments&lt;/code&gt; を0から100の間のランダムな値で更新します。この更新は、 &lt;code&gt;r.js&lt;/code&gt; （実際にはそうではない）のために確定的であると証明できないため、 &lt;code&gt;nonAtomic&lt;/code&gt; フラグを渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="3370023be2e9476cffd22b7ed74a8c011d40ad4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Update the field &lt;code&gt;numComments&lt;/code&gt; with the result of a sub-query. Because this update is not atomic, you must pass the &lt;code&gt;nonAtomic&lt;/code&gt; flag.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; &lt;code&gt;numComments&lt;/code&gt; の結果でフィールドnumCommentsを更新します。この更新はアトミックではないため、 &lt;code&gt;nonAtomic&lt;/code&gt; フラグを渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="67192cf5d68cb9d07ae913cb02de1c9cb942678a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Update the status of all posts to &lt;code&gt;published&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;すべての投稿のステータスを &lt;code&gt;published&lt;/code&gt; 更新します。</target>
        </trans-unit>
        <trans-unit id="d99ffac823713982f6f2112232fc204039d89040" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Update the status of all the posts written by William.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ウィリアムによって書かれたすべての投稿のステータスを更新します。</target>
        </trans-unit>
        <trans-unit id="9c293ef26eb3ab3d6e8f05a08771ebec1db3858c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Update the status of the post with &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;published&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; &lt;code&gt;id&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; の投稿のステータスを &lt;code&gt;published&lt;/code&gt; に更新します。</target>
        </trans-unit>
        <trans-unit id="ead1e4ebff7ef086d570d1e86cb6fb4d3410fe61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Update the status of the post with &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;1&lt;/code&gt; using soft durability.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ソフト持続性を使用して、 &lt;code&gt;id&lt;/code&gt; が &lt;code&gt;1&lt;/code&gt; の投稿のステータスを更新します。</target>
        </trans-unit>
        <trans-unit id="63c7f4363d8a9b9bea7da2ede31fbd10df33782e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Update the time of John&amp;rsquo;s birth.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ジョンの誕生時刻を更新します。</target>
        </trans-unit>
        <trans-unit id="8aae47a949f7985ec4286761724480241a0980f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Use &lt;a href=&quot;../../../docs/cookbook/javascript/index#filtering-based-on-nested-fields&quot;&gt;nested field&lt;/a&gt; syntax to sort on fields from subdocuments. (You can also create indexes on nested fields using this syntax with &lt;code&gt;indexCreate&lt;/code&gt;.)</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;&lt;a href=&quot;../../../docs/cookbook/javascript/index#filtering-based-on-nested-fields&quot;&gt;ネストされたフィールド&lt;/a&gt;構文を使用して、サブドキュメントのフィールドでソートします。（この構文を &lt;code&gt;indexCreate&lt;/code&gt; で使用して、ネストされたフィールドにインデックスを作成することもできます。）</target>
        </trans-unit>
        <trans-unit id="4e0004ada7525e6b6f1bfa0f075093f3a989ad36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Use &lt;a href=&quot;../args/index&quot;&gt;args&lt;/a&gt; with &lt;code&gt;add&lt;/code&gt; to sum multiple values.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; &lt;code&gt;add&lt;/code&gt; で&lt;a href=&quot;../args/index&quot;&gt;args&lt;/a&gt;を使用して、複数の値を合計します。</target>
        </trans-unit>
        <trans-unit id="02680aee31b508322ae162a6928259e49d858402" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Use &lt;a href=&quot;../map/index&quot;&gt;map&lt;/a&gt; and &lt;a href=&quot;../sum/index&quot;&gt;sum&lt;/a&gt; to get the total points scored for each match.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;&lt;a href=&quot;../map/index&quot;&gt;マップ&lt;/a&gt;と&lt;a href=&quot;../sum/index&quot;&gt;合計&lt;/a&gt;を使用して、各試合の合計得点を取得します。</target>
        </trans-unit>
        <trans-unit id="cee14ccacbc24f8cf2336500d50b39815820e14a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Use &lt;code&gt;contains&lt;/code&gt; with a predicate function to simulate an &lt;code&gt;or&lt;/code&gt;. Return the Marvel superheroes who live in Detroit, Chicago or Hoboken.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; &lt;code&gt;or&lt;/code&gt; をシミュレートする &lt;code&gt;contains&lt;/code&gt; は、述語関数でcontainsを使用します。デトロイト、シカゴ、ホーボーケンに住んでいるマーベルのスーパーヒーローを返します。</target>
        </trans-unit>
        <trans-unit id="9f9c067a82f6756796155bf68284f694457df7c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Use &lt;code&gt;literal&lt;/code&gt; to remove a field from a document.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; &lt;code&gt;literal&lt;/code&gt; を使用して、ドキュメントからフィールドを削除します。</target>
        </trans-unit>
        <trans-unit id="faa11442c7ff04bd4adf15402fb6cc3943811894" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Use &lt;code&gt;merge&lt;/code&gt; to join each blog post with its comments.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; &lt;code&gt;merge&lt;/code&gt; を使用して、各ブログ投稿とコメントを結合します。</target>
        </trans-unit>
        <trans-unit id="c523efa749a8ec36defddfc3f0a11b48132a401c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Use a function instead of a field to join on a more complicated expression. Suppose the players have lists of favorite games ranked in order in a field such as &lt;code&gt;favorites: [3, 2, 1]&lt;/code&gt;. Get a list of players and their top favorite:</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;フィールドの代わりに関数を使用して、より複雑な式で結合します。プレイヤーが、お気に入りなどのフィールドで順番にランク付けされたお気に入りのゲームのリストを持っているとします &lt;code&gt;favorites: [3, 2, 1]&lt;/code&gt; 。プレーヤーとそのお気に入りのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="5284ff693016d6aaf2fc5a38372ff675711c76ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Use a nested key as the join field. Suppose the documents in the players table were structured like this:</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ネストされたキーを結合フィールドとして使用します。プレーヤーテーブルのドキュメントが次のように構成されているとします。</target>
        </trans-unit>
        <trans-unit id="0b3958e422754d7fdf0c13928ca3f3bfd44e9743" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Use a secondary index on the right table rather than the primary key. If players have a secondary index on their cities, we can get a list of arenas with players in the same area.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;主キーではなく、右側のテーブルでセカンダリインデックスを使用します。プレイヤーが自分の都市にセカンダリインデックスを持っている場合、同じ地域のプレイヤーがいるアリーナのリストを取得できます。</target>
        </trans-unit>
        <trans-unit id="c65ae19787c7981313601d512d6599a9685462bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Use the &lt;a href=&quot;../../../docs/nested-fields/javascript/index&quot;&gt;nested field syntax&lt;/a&gt; to get a list of users with cell phone numbers in their contacts.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;&lt;a href=&quot;../../../docs/nested-fields/javascript/index&quot;&gt;ネストされたフィールド構文&lt;/a&gt;を使用して、連絡先に携帯電話番号を持つユーザーのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="63c2cc8fb2a49b7168572eb51fee24aea55a7a94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Using a cursor</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;カーソルの使用</target>
        </trans-unit>
        <trans-unit id="f08cb20308a0500b23256ad2b7c63b29d2b4f7a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Wait for all indexes on the table &lt;code&gt;test&lt;/code&gt; to be ready:</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;テーブル &lt;code&gt;test&lt;/code&gt; すべてのインデックスの準備ができるまで待ちます。</target>
        </trans-unit>
        <trans-unit id="4bc3a39d9eb13fd43624cd1e19dfbd25437d7196" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Wait for the index &lt;code&gt;timestamp&lt;/code&gt; to be ready:</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;インデックスの &lt;code&gt;timestamp&lt;/code&gt; が準備できるまで待ちます。</target>
        </trans-unit>
        <trans-unit id="3e070aedb3426156fc84d324d356ee2f27d21ffd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Wait on a table to be ready.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;テーブルの準備ができるまで待ちます。</target>
        </trans-unit>
        <trans-unit id="ff9f926b0b901d0626582954a0e3f6190cf04529" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; We have previously run queries with the &lt;code&gt;noreply&lt;/code&gt; argument set to &lt;code&gt;true&lt;/code&gt;. Now wait until the server has processed them.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;以前に &lt;code&gt;noreply&lt;/code&gt; 引数を &lt;code&gt;true&lt;/code&gt; に設定してクエリを実行しました。サーバーがそれらを処理するまで待ちます。</target>
        </trans-unit>
        <trans-unit id="b23ab4a2e75afedbe50e2feca3d56193afaea16a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; We just need information about IronMan&amp;rsquo;s reactor and not the rest of the document.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;必要なのは、IronManの原子炉に関する情報だけで、ドキュメントの残りの部分は必要ありません。</target>
        </trans-unit>
        <trans-unit id="14693ac3681a4db7639771fbb88c68159cf63b59" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What is each player&amp;rsquo;s best game?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;各プレイヤーの最高のゲームは何ですか？</target>
        </trans-unit>
        <trans-unit id="b3b5572fec19628b767a7fc66b7065ecc2018a30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What is each player&amp;rsquo;s highest even and odd score?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;各プレーヤーの最高の偶数と奇数のスコアはいくつですか？</target>
        </trans-unit>
        <trans-unit id="e9d8c7bf62886cbc609c79144dfd30cbc128ccb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What is the maximum number of points scored by each player for each game type?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;各ゲームタイプで各プレーヤーが獲得したポイントの最大数はいくつですか？</target>
        </trans-unit>
        <trans-unit id="bba67aaaf70b6b7c70041648927cb7a75984da16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What is the maximum number of points scored by each player in free games?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;無料ゲームで各プレーヤーが獲得するポイントの最大数はいくつですか？</target>
        </trans-unit>
        <trans-unit id="2ad5e9aa9e1a60f26bb74526650715ec4ccc2fd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What is the maximum number of points scored by each player, with the highest scorers first?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;最高得点を最初にして、各プレーヤーが得点の最大数はいくつですか？</target>
        </trans-unit>
        <trans-unit id="f76e7c8748287621b899297111fffa532fcee254" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What is the maximum number of points scored by each player?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;各プレイヤーが獲得したポイントの最大数はいくつですか？</target>
        </trans-unit>
        <trans-unit id="da9d7ad491267fe991c3a0f49929545c0a221806" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What is the maximum number of points scored by game type?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ゲームの種類ごとに得点の最大数はいくつですか？</target>
        </trans-unit>
        <trans-unit id="4cf30cefa069e8bcbfccc3c653ce93fd6fdc0023" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What was Iron Man&amp;rsquo;s first appearance in a comic?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;アイアンマンが漫画に最初に登場したのは何ですか？</target>
        </trans-unit>
        <trans-unit id="da5698d921800a6a43d46d276df76dcd4b9af2bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What&amp;rsquo;s 3 + 5 + 7?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; 3 + 5 + 7とは何ですか？</target>
        </trans-unit>
        <trans-unit id="a9113891512f385f058c701ca24aa5b167e2d456" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What&amp;rsquo;s the average number of points scored in a game, counting bonus points?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ボーナスポイントをカウントして、ゲームで獲得したポイントの平均数はいくつですか？</target>
        </trans-unit>
        <trans-unit id="4342caa4df0c67c6cbbc105dd20437f6fa527ebd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What&amp;rsquo;s the average number of points scored in a game?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ゲームで獲得したポイントの平均数はいくつですか？</target>
        </trans-unit>
        <trans-unit id="4ab1381e62c47111891102c67c66e3eed5dde2f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What&amp;rsquo;s the average number of points scored in a game? (But return &lt;code&gt;null&lt;/code&gt; instead of raising an error if there are no games where points have been scored.)</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;ゲームで獲得したポイントの平均数はいくつですか？（ただし、ポイントが獲得されたゲームがない場合は、エラーを発生させる代わりに &lt;code&gt;null&lt;/code&gt; を返します。）</target>
        </trans-unit>
        <trans-unit id="47105b54e3678d2403a237aa448a9d9e17ce94e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; What&amp;rsquo;s the average of 3, 5, and 7?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; 3、5、7の平均はいくつですか？</target>
        </trans-unit>
        <trans-unit id="0e1cf68609089dfd0da5af1bb38bbd4117b0b2bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Which of the locations in a list of parks include &lt;code&gt;circle1&lt;/code&gt;?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;公園のリストのどの場所に &lt;code&gt;circle1&lt;/code&gt; が含まれていますか？</target>
        </trans-unit>
        <trans-unit id="3155e7f7fcdfc84b19cdd98c07e69e0eaae69930" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Which of the locations in a list of parks intersect &lt;code&gt;circle1&lt;/code&gt;?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;公園のリストのどの場所が &lt;code&gt;circle1&lt;/code&gt; と交差していますか？</target>
        </trans-unit>
        <trans-unit id="319224d9721f40c33bb5ca04cdf537f9f765ebdc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Which unique villains have been vanquished by Marvel heroes?</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;マーベルのヒーローによって打ち負かされたユニークな悪人はどれですか？</target>
        </trans-unit>
        <trans-unit id="6dda779780e18c4c58f4feb486d08ac44290a3c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; With &lt;code&gt;next&lt;/code&gt;, not all results have to be retrieved from a cursor &amp;ndash; to stop retrieving results, break out of the recursive function. For example, this recursive function will stop retrieving results when the &lt;code&gt;checkRow&lt;/code&gt; function returns true:</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;では &lt;code&gt;next&lt;/code&gt; - 、結果を取得停止再帰関数から抜け出すために、すべての結果は、カーソルから取得する必要があります。たとえば、次の再帰関数は、 &lt;code&gt;checkRow&lt;/code&gt; 関数がtrueを返すと結果の取得を停止します。</target>
        </trans-unit>
        <trans-unit id="37ec041edb9e5e31e3f5708d6c8ba625a531cf3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Without an index argument, we default to the primary index. While &lt;code&gt;get&lt;/code&gt; will either return the document or &lt;code&gt;null&lt;/code&gt; when no document with such a primary key value exists, this will return either a one or zero length stream.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;インデックス引数がない場合、デフォルトでプライマリインデックスが使用されます。一方で &lt;code&gt;get&lt;/code&gt; いずれかの文書または返します &lt;code&gt;null&lt;/code&gt; 、このような主キーの値とは、文書が存在しない場合、これは1または0の長さのストリームのいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="37bd07f7b464d50fae88fd871f06c53f271d7a2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; Without their prized weapons, our enemies will quickly be vanquished.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;貴重な武器がなければ、敵はすぐに倒されます。</target>
        </trans-unit>
        <trans-unit id="8b07b6214e906fb92f5e3efd4077bd1bcb4b95ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; You can efficiently order data on arbitrary expressions using indexes.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;インデックスを使用して、任意の式のデータを効率的に順序付けることができます。</target>
        </trans-unit>
        <trans-unit id="86fda1cd202d3a4ab248129dbe004c214d7ab4a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; You can efficiently order using multiple fields by using a &lt;a href=&quot;http://www.rethinkdb.com/docs/secondary-indexes/javascript/&quot;&gt;compound index&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;&lt;a href=&quot;http://www.rethinkdb.com/docs/secondary-indexes/javascript/&quot;&gt;複合インデックス&lt;/a&gt;を使用すると、複数のフィールドを使用して効率的に注文できます。</target>
        </trans-unit>
        <trans-unit id="4731728c17b61246f1703408173bfd3f3d342b6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; You can get multiple documents in a single call to &lt;code&gt;get_all&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; &lt;code&gt;get_all&lt;/code&gt; の 1回の呼び出しで複数のドキュメントを取得できます。</target>
        </trans-unit>
        <trans-unit id="6141919a5508731f58f54550166f1a2cc61cd096" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; You can retrieve all the elements of a cursor with the &lt;code&gt;next&lt;/code&gt; command using recursion and promises.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;再帰とプロミスを使用して、 &lt;code&gt;next&lt;/code&gt; コマンドでカーソルのすべての要素を取得できます。</target>
        </trans-unit>
        <trans-unit id="1ae4c0feadf1db97584879e001c84d91a9b2ca93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; You can retrieve all the elements of a cursor with the &lt;code&gt;next&lt;/code&gt; command using recursion.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;再帰を使用して、 &lt;code&gt;next&lt;/code&gt; コマンドでカーソルのすべての要素を取得できます。</target>
        </trans-unit>
        <trans-unit id="69371b9d42ac69205db482caf0a43438b0f4eac6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; You can use &lt;a href=&quot;../args/index&quot;&gt;args&lt;/a&gt; with &lt;code&gt;getAll&lt;/code&gt; to retrieve multiple documents whose keys are in a list. This uses &lt;code&gt;getAll&lt;/code&gt; to get a list of female superheroes, coerces that to an array, and then gets a list of villains who have those superheroes as enemies.</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt; &lt;code&gt;getAll&lt;/code&gt; で&lt;a href=&quot;../args/index&quot;&gt;args&lt;/a&gt;を使用して、キーがリストにある複数のドキュメントを取得できます。これは &lt;code&gt;getAll&lt;/code&gt; を使用して女性のスーパーヒーローのリストを取得し、それを配列に強制し、次にそれらのスーパーヒーローを敵として持つ悪役のリストを取得します。</target>
        </trans-unit>
        <trans-unit id="4812a471ab0beaaba739a269a6594a79ac9c69e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt; You may also specify a timeout in seconds (defaults to 5).</source>
          <target state="translated">&lt;strong&gt;例：&lt;/strong&gt;タイムアウトを秒単位で指定することもできます（デフォルトは5）。</target>
        </trans-unit>
        <trans-unit id="582e89736b5a0d3d31ffabd436d58516b5b9c086" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Follow&lt;/strong&gt;&lt;a href=&quot;http://twitter.com/rethinkdb&quot;&gt;@rethinkdb&lt;/a&gt; on Twitter</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;Twitterで&lt;a href=&quot;http://twitter.com/rethinkdb&quot;&gt;@rethinkdb&lt;/a&gt;を&lt;strong&gt;フォロー&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9277acb0da1a5aed7b906359011231d8f29464ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Functions&lt;/strong&gt; can be passed as parameters to certain ReQL commands.</source>
          <target state="translated">&lt;strong&gt;関数&lt;/strong&gt;は、特定のReQLコマンドにパラメーターとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="1882eaaaca15e8001a5ceb52a50715af2421db98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Geometry data types&lt;/strong&gt; for geospatial support, including points, lines, and polygons. (See below for more detail.)</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ポイント、ライン、ポリゴンを含む地理空間サポート用の&lt;strong&gt;ジオメトリデータタイプ&lt;/strong&gt;。（詳細については、以下を参照してください。）</target>
        </trans-unit>
        <trans-unit id="75a68daa64bf5ae6912fd5581a48b366f4a15916" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Grouped data&lt;/strong&gt; is created by the &lt;code&gt;group&lt;/code&gt; command, which partitions a stream into multiple groups based on specified fields or functions. ReQL commands called on &lt;code&gt;GROUPED_DATA&lt;/code&gt; operate on each group individually. For more details, read the &lt;a href=&quot;../../api/javascript/group/index&quot;&gt;group&lt;/a&gt; documentation. Depending on the input to &lt;code&gt;group&lt;/code&gt;, grouped data may have the type of &lt;code&gt;GROUPED_STREAM&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;グループ化&lt;/strong&gt;された&lt;strong&gt;データ&lt;/strong&gt;は &lt;code&gt;group&lt;/code&gt; コマンドによって作成されます。これは、指定されたフィールドまたは関数に基づいてストリームを複数のグループに分割します。で呼び出さReQLコマンド &lt;code&gt;GROUPED_DATA&lt;/code&gt; は、個別に、各グループで動作します。詳細については、&lt;a href=&quot;../../api/javascript/group/index&quot;&gt;グループの&lt;/a&gt;ドキュメントをご覧ください。 &lt;code&gt;group&lt;/code&gt; への入力に応じて、グループ化されたデータのタイプは &lt;code&gt;GROUPED_STREAM&lt;/code&gt; になる場合があります。</target>
        </trans-unit>
        <trans-unit id="76e85e408bd4fc987cfab204a895eabde5cf87a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Haven&amp;rsquo;t installed the server yet?&lt;/strong&gt;&lt;a href=&quot;https://rethinkdb.com/install&quot;&gt;Go do that&lt;/a&gt; first!</source>
          <target state="translated">&lt;strong&gt;サーバーをまだインストールしていませんか？&lt;/strong&gt;最初に&lt;a href=&quot;https://rethinkdb.com/install&quot;&gt;それを行ってください&lt;/a&gt;！</target>
        </trans-unit>
        <trans-unit id="89b1eb2283554043dd4b75edce9059b23708f204" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Having trouble accessing the web interface?&lt;/strong&gt; Try restarting both of your RethinkDB instances with an additional &lt;code&gt;--bind all&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;strong&gt;Webインターフェイスへのアクセスに問題がありますか？&lt;/strong&gt; &lt;code&gt;--bind all&lt;/code&gt; パラメータを追加して、両方のRethinkDBインスタンスを再起動してみてください。</target>
        </trans-unit>
        <trans-unit id="850231f73eda7760f21e97809f4c63101493a0e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Healthy:&lt;/strong&gt; more than half of the shard&amp;rsquo;s voting replicas are still available.</source>
          <target state="translated">&lt;strong&gt;正常：&lt;/strong&gt;シャードの投票レプリカの半分以上がまだ使用可能です。</target>
        </trans-unit>
        <trans-unit id="eaab2b71046d35912ecd620e5145070608473a4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Help us&lt;/strong&gt; improve the docs &lt;a href=&quot;https://github.com/rethinkdb/docs/blob/master/api/javascript/index.md&quot;&gt;by editing&lt;/a&gt; this document</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;このドキュメントを&lt;a href=&quot;https://github.com/rethinkdb/docs/blob/master/api/javascript/index.md&quot;&gt;編集して&lt;/a&gt;、ドキュメントの改善にご&lt;strong&gt;協力ください&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c998ba2aac43caa50189333a1e52b627ac4afa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How many dimensions are supported?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;いくつの次元がサポートされていますか？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="313138c1d19dde722c53d37f637f59dcd26ea678" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you are using Firefox&lt;/strong&gt;, go to &lt;em&gt;Edit &amp;gt; Preferences&lt;/em&gt;. Then click on &lt;em&gt;Advanced &amp;gt; Network &amp;gt; Settings&lt;/em&gt; and create a manual proxy configuration with these settings:</source>
          <target state="translated">&lt;strong&gt;Firefoxを使用している場合は&lt;/strong&gt;、&lt;em&gt;[編集]&amp;gt; [設定]に&lt;/em&gt;移動します。次に、[ &lt;em&gt;詳細&lt;/em&gt; ] &lt;em&gt;&amp;gt; [ネットワーク]&amp;gt; [設定]&lt;/em&gt;をクリックし、次の設定を使用して手動プロキシ構成を作成します。</target>
        </trans-unit>
        <trans-unit id="e98297d6e50d39647518b9b0a3af6009fb0bd70e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you&amp;rsquo;re using Chrome&lt;/strong&gt;, go to &lt;em&gt;Settings &amp;gt; Advanced settings &amp;gt; Network &amp;gt; Change proxy settings&lt;/em&gt;, and set the &lt;em&gt;Network proxy&lt;/em&gt; option to manual mode with the following settings:</source>
          <target state="translated">&lt;strong&gt;あなたがChromeを使用している場合は&lt;/strong&gt;、に行く&lt;em&gt;設定&amp;gt;詳細設定&amp;gt;ネットワーク&amp;gt;変更プロキシの設定&lt;/em&gt;、および設定&lt;em&gt;ネットワークプロキシ&lt;/em&gt;次の設定で手動モードのオプションを：</target>
        </trans-unit>
        <trans-unit id="755e003c47b0e8d2815aca2f4d2c129a7e6ba79d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Increase concurrency.&lt;/strong&gt; Instead of having a single thread inserting data in a loop, create multiple threads with multiple connections. This will allow parallelization of insert queries without spending most of the time waiting on disk acknowledgement.</source>
          <target state="translated">&lt;strong&gt;並行性を高めます。&lt;/strong&gt;単一のスレッドがループにデータを挿入する代わりに、複数の接続を持つ複数のスレッドを作成します。これにより、ほとんどの時間をディスクの確認を待つことなく挿入クエリの並列化が可能になります。</target>
        </trans-unit>
        <trans-unit id="4335550f0d70230d87e2323f639beb09179787c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Keep in mind&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;覚えておいてください&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="f03670d209f2229a3e62fa246f117916dd8bc789" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Lines:&lt;/strong&gt; A sequence of two or more coordinate pairs</source>
          <target state="translated">&lt;strong&gt;線：&lt;/strong&gt; 2つ以上の座標ペアのシーケンス</target>
        </trans-unit>
        <trans-unit id="ac908ab106c200de13e52442805331feafe41a54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Lines&lt;/strong&gt; are a sequence of two or more points, denoted by either point objects or coordinate pairs.</source>
          <target state="translated">&lt;strong&gt;線&lt;/strong&gt;は2つ以上の点のシーケンスであり、点オブジェクトまたは座標ペアで示されます。</target>
        </trans-unit>
        <trans-unit id="dd0d0643572ce6720c6f6e50ce31fe60c1f9abc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Looking for another stack?&lt;/strong&gt; We will try to add as many examples as we can. If you have written a cool app and want us to showcase it, &lt;a href=&quot;https://rethinkdb.com/community&quot;&gt;let us know&lt;/a&gt;!</source>
          <target state="translated">&lt;strong&gt;別のスタックをお探しですか？&lt;/strong&gt;できるだけ多くの例を追加するように努めます。クールなアプリを作成し、それを紹介してほしい場合は、&lt;a href=&quot;https://rethinkdb.com/community&quot;&gt;お知らせください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3667905c4375aca6d7dbdd5cbb39c26f4056d32b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Looking for documentation for a community driver?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コミュニティドライバーのドキュメントをお探しですか？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bffedcc0434ccf563854ab85205c9e18c5f9e859" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Minval&lt;/strong&gt; and &lt;strong&gt;maxval&lt;/strong&gt; are used with some commands such as &lt;code&gt;between&lt;/code&gt; to specify absolute lower and upper bounds (e.g., &lt;code&gt;between(r.minval, 1000)&lt;/code&gt; would return all documents in a table whose primary key is less than 1000).</source>
          <target state="translated">&lt;strong&gt;MINVAL&lt;/strong&gt;と&lt;strong&gt;MAXVALの&lt;/strong&gt;ようないくつかのコマンドで使用され &lt;code&gt;between&lt;/code&gt; 絶対下指定し、上限（例えば、 &lt;code&gt;between(r.minval, 1000)&lt;/code&gt; 、主キー1000未満であり、テーブル内のすべてのドキュメントを返すことになります）。</target>
        </trans-unit>
        <trans-unit id="0e1e5e583afb688dfd6d1b1d8e5a47ef29a61e7d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Multi indexes&lt;/strong&gt; based on arrays of values.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;値の配列に基づく&lt;strong&gt;マルチインデックス&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1583305dd110c8c2317b13eb038b04de8e77866b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Nested Fields&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ネストされたフィールド&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="244bade3400aff85996f44135b1ccfe2d228b1d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; As of version 2.3, only the &lt;code&gt;admin&lt;/code&gt; user can access system tables. Read &lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;Permissions and user accounts&lt;/a&gt; for more details on user accounts and permissions.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;バージョン2.3以降では、 &lt;code&gt;admin&lt;/code&gt; ユーザーのみがシステムテーブルにアクセスできます。読み取り&lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;権限とユーザーがアカウント&lt;/a&gt;のユーザーアカウントと権限の詳細については。</target>
        </trans-unit>
        <trans-unit id="569b17e36ed719f7abbfbea4745a1968a78ad29c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Avoid using keys matching the regular expression &lt;code&gt;^\$reql_.+\$$&lt;/code&gt; in your objects. RethinkDB considers those to be reserved keywords.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;オブジェクトで正規表現 &lt;code&gt;^\$reql_.+\$$&lt;/code&gt; に一致するキーを使用しないでください。RethinkDBはそれらを予約済みキーワードと見なします。</target>
        </trans-unit>
        <trans-unit id="4f6754a401d9f9264dd03e6f8ba153854c485219" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Changefeeds ignore the &lt;code&gt;read_mode&lt;/code&gt; flag to &lt;code&gt;run&lt;/code&gt;, and always behave as if it is set to &lt;code&gt;single&lt;/code&gt; (i.e., the values they return are in memory on the primary replica, but have not necessarily been written to disk yet). For more details read &lt;a href=&quot;../../../docs/consistency/index&quot;&gt;Consistency guarantees&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;変更フィードは、 &lt;code&gt;read_mode&lt;/code&gt; フラグを無視してrunを &lt;code&gt;run&lt;/code&gt; 、常に &lt;code&gt;single&lt;/code&gt; に設定されているかのように動作します（つまり、返される値はプライマリレプリカのメモリにありますが、必ずしもディスクに書き込まれているわけではありません）。詳細については、&lt;a href=&quot;../../../docs/consistency/index&quot;&gt;一貫性の保証を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="a1320d8ab058485166cf05adf65c5eeb13dd6e96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Changefeeds ignore the &lt;code&gt;read_mode&lt;/code&gt; flag to &lt;code&gt;run&lt;/code&gt;, and always behave as if it is set to &lt;code&gt;single&lt;/code&gt; (i.e., the values they return are in memory on the primary replica, but have not necessarily been written to disk yet). For more details read &lt;a href=&quot;../../consistency/index&quot;&gt;Consistency guarantees&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;変更フィードは、 &lt;code&gt;read_mode&lt;/code&gt; フラグを無視してrunを &lt;code&gt;run&lt;/code&gt; 、常に &lt;code&gt;single&lt;/code&gt; に設定されているかのように動作します（つまり、返される値はプライマリレプリカのメモリにありますが、必ずしもディスクに書き込まれているわけではありません）。詳細については、&lt;a href=&quot;../../consistency/index&quot;&gt;一貫性の保証を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="3b88fe8dfc2a278cebcaa8eacf3be37012f58756" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For all accounts other than the special, system-defined &lt;code&gt;admin&lt;/code&gt; account, permissions that are not explicitly set in any scope will effectively be &lt;code&gt;false&lt;/code&gt;. When you create a new user account by inserting a record into the &lt;a href=&quot;../../../docs/system-tables/index#users&quot;&gt;system table&lt;/a&gt;, that account will have &lt;em&gt;no&lt;/em&gt; permissions until they are explicitly granted.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;特別なシステム定義の &lt;code&gt;admin&lt;/code&gt; アカウント以外のすべてのアカウントでは、どのスコープにも明示的に設定されていない権限は事実上 &lt;code&gt;false&lt;/code&gt; になります。&lt;a href=&quot;../../../docs/system-tables/index#users&quot;&gt;システムテーブルに&lt;/a&gt;レコードを挿入して新しいユーザーアカウントを作成すると、明示的に許可されるまで、そのアカウントには権限があり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="29e4d961e6a25ff9dbe4a9ffcf925dd16829dbe9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is possible to optimize the handshake by sending message #3 immediately after #1 without waiting for the server response, and read messages #2 and #4 afterward, handling them as appropriate.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;サーバーの応答を待たずに＃1の直後にメッセージ＃3を送信し、後でメッセージ＃2と＃4を読み取って適切に処理することで、ハンドシェイクを最適化できます。</target>
        </trans-unit>
        <trans-unit id="8f1fb502ea561a6db94ecf4369bfad33e255f0bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Only alphanumeric characters and underscores are valid for the table name.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;テーブル名に使用できるのは、英数字とアンダースコアのみです。</target>
        </trans-unit>
        <trans-unit id="1899eaea8de5492bea668ebfb53635d9a61a5286" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; RethinkDB uses byte-wise ordering for &lt;code&gt;orderBy&lt;/code&gt; and does not support Unicode collations; non-ASCII characters will be sorted by UTF-8 codepoint. For more information on RethinkDB&amp;rsquo;s sorting order, read the section in &lt;a href=&quot;../../../docs/data-types/index#sorting-order&quot;&gt;ReQL data types&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; RethinkDBは、orderByにバイト単位の順序を &lt;code&gt;orderBy&lt;/code&gt; 、Unicode照合をサポートしていません。非ASCII文字はUTF-8コードポイントでソートされます。RethinkDBの並べ替え順序の詳細については、&lt;a href=&quot;../../../docs/data-types/index#sorting-order&quot;&gt;ReQLデータ型の&lt;/a&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="99248b40602a8453ef40be4b7c16d57eea666649" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;dump&lt;/code&gt; and &lt;code&gt;restore&lt;/code&gt; commands require the &lt;a href=&quot;https://rethinkdb.com/docs/install-drivers/python/&quot;&gt;Python driver&lt;/a&gt; to be installed. Don&amp;rsquo;t upgrade the Python driver until &lt;em&gt;after&lt;/em&gt; you&amp;rsquo;ve dumped the data!</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;dump&lt;/code&gt; および &lt;code&gt;restore&lt;/code&gt; コマンドが必要と&lt;a href=&quot;https://rethinkdb.com/docs/install-drivers/python/&quot;&gt;Pythonのドライバが&lt;/a&gt;インストールされています。まで、Pythonのドライバをアップグレードしないでください&lt;em&gt;後&lt;/em&gt;は、データをダンプしました！</target>
        </trans-unit>
        <trans-unit id="f3418c9912d71cc04e979ee036a23d1e24b9c64d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;dump&lt;/code&gt; command saves database and table contents and metadata, but does &lt;strong&gt;not&lt;/strong&gt; save cluster configuration data.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;dump&lt;/code&gt; コマンドは、データベースとテーブルの内容とメタデータを保存しますが、い&lt;strong&gt;ない&lt;/strong&gt;クラスタ構成データを保存します。</target>
        </trans-unit>
        <trans-unit id="5f57398017c203dceb6642f54fec0d0233b50066" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;table&lt;/code&gt; and &lt;code&gt;database&lt;/code&gt; fields will be automatically filled in when inserting into &lt;code&gt;permissions&lt;/code&gt;, based on how many items are in the &lt;code&gt;id&lt;/code&gt; list.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;table&lt;/code&gt; と &lt;code&gt;database&lt;/code&gt; フィールドが自動的に挿入する際に入力されます &lt;code&gt;permissions&lt;/code&gt; であるどのように多くの項目に基づいて、 &lt;code&gt;id&lt;/code&gt; リスト。</target>
        </trans-unit>
        <trans-unit id="8d749834123aff747f5e70979ac14a076f6ced68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The binary object type is meant for data that cannot be reliably stored as UTF-8 strings, such as uploaded files. If you&amp;rsquo;re working with data that &lt;em&gt;can&lt;/em&gt; be stored as strings, it&amp;rsquo;s usually easier to stick to the string data type.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;バイナリオブジェクトタイプは、アップロードされたファイルなど、UTF-8文字列として確実に保存できないデータ用です。文字列として格納&lt;em&gt;できる&lt;/em&gt;データを使用している場合は、通常、文字列データ型を使用する方が簡単です。</target>
        </trans-unit>
        <trans-unit id="3825e4818391770a89530ac09cbf8da7e85117c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The canonical way to retrieve all the results is to use &lt;a href=&quot;../each/index&quot;&gt;each&lt;/a&gt; or &lt;a href=&quot;../to_array/index&quot;&gt;toArray&lt;/a&gt;. The &lt;code&gt;next&lt;/code&gt; command should be used only when you may not retrieve all the elements of a cursor or want to delay some operations.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;すべての結果を取得する正規の方法は、&lt;a href=&quot;../each/index&quot;&gt;それぞれ&lt;/a&gt;または&lt;a href=&quot;../to_array/index&quot;&gt;toArray&lt;/a&gt;を使用することです。 &lt;code&gt;next&lt;/code&gt; コマンドを使用すると、カーソルのすべての要素を取得したり、いくつかの操作を遅らせたくないかもしれないときにのみ使用されるべきです。</target>
        </trans-unit>
        <trans-unit id="62d7860d237948063d6a6adacb3dee7d2e2a84ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; To coerce a list of key-value pairs like &lt;code&gt;['name', 'Ironman', 'victories', 2000]&lt;/code&gt; to an object, use the &lt;a href=&quot;../object/index&quot;&gt;object&lt;/a&gt; command.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;['name', 'Ironman', 'victories', 2000]&lt;/code&gt; ようなキーと値のペアのリストをオブジェクトに強制するには、&lt;a href=&quot;../object/index&quot;&gt;object&lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="a8949966a7c66e20490587a32f2e554a8dbd9cc5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When &lt;code&gt;between&lt;/code&gt; is chained after &lt;a href=&quot;../order_by/index&quot;&gt;orderBy&lt;/a&gt;, both commands must use the same index; &lt;code&gt;between&lt;/code&gt; will default to the index &lt;code&gt;orderBy&lt;/code&gt; is using, so in this example &lt;code&gt;&quot;rank&quot;&lt;/code&gt; is automatically being used by &lt;code&gt;between&lt;/code&gt;. Trying to specify another index will result in a &lt;code&gt;ReqlRuntimeError&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;とき &lt;code&gt;between&lt;/code&gt; の後に連鎖され&lt;a href=&quot;../order_by/index&quot;&gt;ORDERBY&lt;/a&gt;、両方のコマンドは、同じインデックスを使用する必要があります。 &lt;code&gt;between&lt;/code&gt; はデフォルトで &lt;code&gt;orderBy&lt;/code&gt; が使用しているインデックスになるため、この例では &lt;code&gt;&quot;rank&quot;&lt;/code&gt; が &lt;code&gt;between&lt;/code&gt; によって自動的に使用されています。別のインデックスを指定しようとすると、 &lt;code&gt;ReqlRuntimeError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="f19687b68255cefde98992549bb0512f83e051f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When using &lt;code&gt;or&lt;/code&gt; inside a &lt;code&gt;filter&lt;/code&gt; predicate to test the values of fields that may not exist on the documents being tested, you should use the &lt;code&gt;default&lt;/code&gt; command with those fields so they explicitly return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;使用している場合 &lt;code&gt;or&lt;/code&gt; 内部の &lt;code&gt;filter&lt;/code&gt; 述語テストされている文書上に存在しないかもしれないフィールドの値をテストするために、あなたが使用する必要があり &lt;code&gt;default&lt;/code&gt; 彼らは、明示的に返すように、これらのフィールドを指定して、コマンドを &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd39e666a62c22d687fb2730309f756fb32d3b95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When using &lt;code&gt;r.args&lt;/code&gt; with a command that takes optional arguments, you must not include the optional arguments inside the &lt;code&gt;args&lt;/code&gt; array.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;オプションの引数を取るコマンドで &lt;code&gt;r.args&lt;/code&gt; を使用する場合は、 &lt;code&gt;args&lt;/code&gt; 配列内にオプションの引数を含めないでください。</target>
        </trans-unit>
        <trans-unit id="0c6c81ba7902c5b53acc1ebcc25f0c95ed4ade0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Whenever you call &lt;code&gt;reconfigure&lt;/code&gt;, the write durability will be set to &lt;code&gt;hard&lt;/code&gt; and the write acknowledgments will be set to &lt;code&gt;majority&lt;/code&gt;; these can be changed by using the &lt;code&gt;config&lt;/code&gt; command on the table.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;reconfigure&lt;/code&gt; を呼び出すと、書き込み耐久性は &lt;code&gt;hard&lt;/code&gt; に設定され、書き込み確認は &lt;code&gt;majority&lt;/code&gt; に設定されます。これらは、テーブルで &lt;code&gt;config&lt;/code&gt; コマンドを使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="91084a4179cba9e5470c814792719c6f7624656e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You need to manually close the cursor if you prematurely stop the iteration.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;反復を途中で停止した場合は、カーソルを手動で閉じる必要があります。</target>
        </trans-unit>
        <trans-unit id="c47922a35471606741687b2e80fd1987806a6692" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; all three &lt;code&gt;--cluster-tls-*&lt;/code&gt; options must be used together.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; 3つの &lt;code&gt;--cluster-tls-*&lt;/code&gt; オプションはすべて一緒に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="36c003c8b5e4480c4a1bd139949a9bf0751b5da9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; as with other system tables, the current_issues table can only be accessed by the &lt;code&gt;admin&lt;/code&gt; user account.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;他のシステムテーブルと同様に、current_issuesテーブルには、 &lt;code&gt;admin&lt;/code&gt; ユーザーアカウントのみがアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e3d641261315030ed211f1807c1f77cd3a308f6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; as with other system tables, the jobs table can only be accessed by the &lt;code&gt;admin&lt;/code&gt; user account.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;他のシステムテーブルと同様に、ジョブテーブルには &lt;code&gt;admin&lt;/code&gt; ユーザーアカウントのみがアクセスできます。</target>
        </trans-unit>
        <trans-unit id="bb0098abc5f32d11c61540c08317a87af39be442" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the following examples use the JavaScript driver. See the &lt;a href=&quot;../../api/javascript/http/index&quot;&gt;r.http&lt;/a&gt; command reference for documentation for other languages.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;以下の例ではJavaScriptドライバーを使用しています。他の言語のドキュメントについては、&lt;a href=&quot;../../api/javascript/http/index&quot;&gt;r.http&lt;/a&gt;コマンドリファレンスをご覧ください。</target>
        </trans-unit>
        <trans-unit id="d9558d9557a4637128baa441c7dd14475dab7680" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; the following examples use the Python driver, but most of them also apply to RethinkDB drivers for other languages.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;次の例ではPythonドライバーを使用していますが、それらのほとんどは他の言語のRethinkDBドライバーにも適用されます。</target>
        </trans-unit>
        <trans-unit id="8d9e22872ceb650b3a0ee7ae97f58294a5c63099" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; while some data may be lost in case of power failure in soft durability mode, the RethinkDB database will not get corrupted.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ソフト耐久性モードで電源障害が発生した場合、一部のデータが失われる可能性がありますが、RethinkDBデータベースは破損しません。</target>
        </trans-unit>
        <trans-unit id="f9de9f0a860baf02f2dc11b29bcb0e5c191852c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;--driver-tls-key&lt;/code&gt; and &lt;code&gt;--driver-tls-cert&lt;/code&gt; must be used together; &lt;code&gt;--driver-tls-ca&lt;/code&gt; is optional.</source>
          <target state="translated">&lt;strong&gt;注：-- &lt;/strong&gt; &lt;code&gt;--driver-tls-key&lt;/code&gt; と &lt;code&gt;--driver-tls-cert&lt;/code&gt; は一緒に使用する必要があります。 &lt;code&gt;--driver-tls-ca&lt;/code&gt; はオプションです。</target>
        </trans-unit>
        <trans-unit id="c0b23e7324d267ebfe0c74a6a0cc531c9fe917b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;--http-tls-key&lt;/code&gt; and &lt;code&gt;--http-tls-cert&lt;/code&gt; must be used together.</source>
          <target state="translated">&lt;strong&gt;注：-- &lt;/strong&gt; &lt;code&gt;--http-tls-key&lt;/code&gt; と &lt;code&gt;--http-tls-cert&lt;/code&gt; を一緒に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4409b56c133546b45d3ac4f9a2db1edab23fb58f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;emergencyRepair&lt;/code&gt; may only be used on individual tables, not on databases. It cannot be used after the &lt;code&gt;db&lt;/code&gt; command.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;emergencyRepair&lt;/code&gt; は、データベースではなく、個々のテーブルでのみ使用できます。 &lt;code&gt;db&lt;/code&gt; コマンドの後には使用できません。</target>
        </trans-unit>
        <trans-unit id="11f0c6d558fec02ec1c3475caefeeaf2478c3f96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;filter&lt;/code&gt; does not use secondary indexes. For retrieving documents via secondary indexes, consider &lt;a href=&quot;../get_all/index&quot;&gt;getAll&lt;/a&gt;, &lt;a href=&quot;../between/index&quot;&gt;between&lt;/a&gt; and &lt;a href=&quot;../eq_join/index&quot;&gt;eqJoin&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;filter&lt;/code&gt; はセカンダリインデックスを使用しません。セカンダリインデックスを介してドキュメントを取得するに&lt;a href=&quot;../between/index&quot;&gt;は&lt;/a&gt;、と&lt;a href=&quot;../eq_join/index&quot;&gt;eqJoinの&lt;/a&gt;間の&lt;a href=&quot;../get_all/index&quot;&gt;getAllを&lt;/a&gt;検討してください。</target>
        </trans-unit>
        <trans-unit id="82292f1b2fd2332e85304570980eb55cb239d539" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;getAll&lt;/code&gt; does not perform any de-duplication. If you pass the same key more than once, the same document will be returned multiple times.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;getAll&lt;/code&gt; は重複除外を実行しません。同じキーを複数回渡すと、同じドキュメントが複数回返されます。</target>
        </trans-unit>
        <trans-unit id="f09577e4be3e49739c51708b109b91b85412fa61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;rethinkdb restore&lt;/code&gt; may not work for restoring backups made with later versions of RethinkDB to servers running &lt;em&gt;earlier&lt;/em&gt; versions. For example, you cannot restore a backup made on RethinkDB 2.2 to a server running RethinkDB 2.1.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;rethinkdb restore&lt;/code&gt; は、新しいバージョンのRethinkDBで作成されたバックアップを、&lt;em&gt;以前の&lt;/em&gt;バージョンを実行しているサーバーに復元する場合に機能しない場合があります。たとえば、RethinkDB 2.2で作成したバックアップを、RethinkDB 2.1を実行しているサーバーに復元することはできません。</target>
        </trans-unit>
        <trans-unit id="3e673af6ab7169b990a08aa4e9ea475bf687c997" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;upcase&lt;/code&gt; and &lt;code&gt;downcase&lt;/code&gt; only affect ASCII characters.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;upcase&lt;/code&gt; と &lt;code&gt;downcase&lt;/code&gt; ASCII文字のみに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="de7dedf278d97ac92af0e06649a956fbefae7de5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Currently, RethinkDB implements range shards, but will eventually be switching to hash shards. Follow &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/364&quot;&gt;Github issue #364&lt;/a&gt; to track progress.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：現在、RethinkDBは範囲シャードを実装していますが、最終的にはハッシュシャードに切り替える予定です。&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/364&quot;&gt;Github issue＃364&lt;/a&gt;に従って進行状況を追跡します。</target>
        </trans-unit>
        <trans-unit id="055dd8626d3edc621d17f38564d066147c8ecdb9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: RethinkDB uses a self-signed certificate to encrypt your password. You&amp;rsquo;ll have to accept the self-signed certificate in your browser to access the instance.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：RethinkDBは、自己署名証明書を使用してパスワードを暗号化します。インスタンスにアクセスするには、ブラウザーで自己署名証明書を受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="7ae447cd91701030266e2698f9a1d0b3b1a19772" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: The authentication system affects &lt;em&gt;client drivers,&lt;/em&gt; not the web interface. Follow the directions above to secure the web UI.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：認証システムは、Webインターフェイス&lt;em&gt;で&lt;/em&gt;はなく、&lt;em&gt;クライアントドライバーに&lt;/em&gt;影響します。上記の指示に従ってWeb UIを保護します。</target>
        </trans-unit>
        <trans-unit id="391d678659ff2edfa66d27978dbae06c2c03a722" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This performance report is based on RethinkDB version 2.1.5. It takes a large amount of effort to create a quality performance report that covers multiple use cases. In the future, we plan to update this report for subsequent releases of RethinkDB.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このパフォーマンスレポートは、RethinkDBバージョン2.1.5に基づいています。複数の使用例をカバーする高品質のパフォーマンスレポートを作成するには、多大な労力が必要です。将来的には、RethinkDBの今後のリリースでこのレポートを更新する予定です。</target>
        </trans-unit>
        <trans-unit id="ac91f80cdb019a96079f01389dfc4f8715fba35e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: it is possible to attach more specialized EBS volumes and have RethinkDB store your data on them, but this option is not yet available out of the box. If you manually attach an EBS volume, you can SSH into the instance and edit the configuration file to point RethinkDB to the custom volume. See the &lt;a href=&quot;../cluster-on-startup/index&quot;&gt;cluster setup instructions&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：より特化したEBSボリュームを接続して、RethinkDBにデータを保存させることは可能ですが、このオプションはまだ箱から出しては利用できません。EBSボリュームを手動で接続する場合、インスタンスにSSHで接続し、RethinkDBがカスタムボリュームを指すように構成ファイルを編集できます。詳細については、&lt;a href=&quot;../cluster-on-startup/index&quot;&gt;クラスターのセットアップ手順&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e7eed048c3a4266440dc28bf30498616c19764e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: you can also join tables on arbitrary fields without creating an index using the &lt;a href=&quot;https://rethinkdb.com/api/python/inner_join/&quot;&gt;inner_join&lt;/a&gt; command. However, arbitrary inner joins are less efficient then equijoins.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：&lt;a href=&quot;https://rethinkdb.com/api/python/inner_join/&quot;&gt;inner_join&lt;/a&gt;コマンドを使用してインデックスを作成せずに、任意のフィールドのテーブルを結合することもできます。ただし、任意の内部結合は、等価結合よりも効率が低くなります。</target>
        </trans-unit>
        <trans-unit id="75f9b901b8b0ba4768fbe2d292f47e726d332f22" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Null&lt;/strong&gt; is a value distinct from the number zero, an empty set, or a zero-length string. Natively this might be &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;, depending on the language. it is often used to explicitly denote the absence of any other value. The root node of a tree structure might have a parent of &lt;code&gt;null&lt;/code&gt;, or a required but as yet non-initialized key might be given a value of &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Null&lt;/strong&gt;は、ゼロ、空のセット、または長さゼロの文字列とは異なる値です。ネイティブでは、これは言語に応じて &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;nil&lt;/code&gt; 、または &lt;code&gt;None&lt;/code&gt; になります。他の値がないことを明示的に示すためによく使用されます。ツリー構造のルートノードには &lt;code&gt;null&lt;/code&gt; の親があるか、必須ですがまだ初期化されていないキーに &lt;code&gt;null&lt;/code&gt; の値が与えられる場合があります。</target>
        </trans-unit>
        <trans-unit id="954d3521277cb7751626aaf0bf4996052c047cf2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Numbers&lt;/strong&gt; are any real number: &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;3.14159&lt;/code&gt;, &lt;code&gt;-42&lt;/code&gt;. RethinkDB uses double precision (64-bit) floating point numbers internally. (Neither infinity nor &lt;a href=&quot;http://en.wikipedia.org/wiki/NaN&quot;&gt;NaN&lt;/a&gt; are allowed.)</source>
          <target state="translated">&lt;strong&gt;数値は&lt;/strong&gt;：任意の実数です &lt;code&gt;5&lt;/code&gt; 、 &lt;code&gt;3.14159&lt;/code&gt; 、 &lt;code&gt;-42&lt;/code&gt; 。RethinkDBは内部で倍精度（64ビット）浮動小数点数を使用します。（無限大も&lt;a href=&quot;http://en.wikipedia.org/wiki/NaN&quot;&gt;NaN&lt;/a&gt;も許可されていません。）</target>
        </trans-unit>
        <trans-unit id="42272f2482546642d71be65a4bf0e2d7e4f7b821" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Objects&lt;/strong&gt; are JSON data objects, standard key-value pairs.</source>
          <target state="translated">&lt;strong&gt;オブジェクト&lt;/strong&gt;はJSONデータオブジェクト、標準のキーと値のペアです。</target>
        </trans-unit>
        <trans-unit id="8175493929f817ebdc71a294b10029326aa5db7f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ping&lt;/strong&gt;&lt;a href=&quot;https://twitter.com/rethinkdb&quot;&gt;@rethinkdb&lt;/a&gt; on Twitter</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;Twitterで&lt;a href=&quot;https://twitter.com/rethinkdb&quot;&gt;@rethinkdb&lt;/a&gt;に&lt;strong&gt;pingを&lt;/strong&gt;送信します</target>
        </trans-unit>
        <trans-unit id="e3e48df73ec12a9bd712247c600f0a4ab09c38e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Points:&lt;/strong&gt; a single coordinate pair</source>
          <target state="translated">&lt;strong&gt;ポイント：&lt;/strong&gt;単一の座標ペア</target>
        </trans-unit>
        <trans-unit id="f1b9ddb4546b95158915692401b6845ada91a69e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Points&lt;/strong&gt; are denoted by a single coordinate pair, two floating point numbers indicating longitude (&amp;minus;180 through 180) and latitude (&amp;minus;90 through 90).</source>
          <target state="translated">&lt;strong&gt;ポイント&lt;/strong&gt;は、1つの座標ペア、経度（-180〜180）および緯度（-90〜90）を示す2つの浮動小数点数で表されます。</target>
        </trans-unit>
        <trans-unit id="9597c8150e0f780930e4309fec2a772a0ed671c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Polygons:&lt;/strong&gt; A multipoint line (at least three coordinate pairs) which does not intersect with itself and whose first and last coordinate pairs are equal. The interior of the polygon is considered filled, that is, part of the polygon. Polygons with &amp;ldquo;holes&amp;rdquo; in them, where a hole is another polygon contained by the first, can be created with the [polygonSub][] command.</source>
          <target state="translated">&lt;strong&gt;ポリゴン：&lt;/strong&gt;それ自体と交差せず、最初と最後の座標ペアが等しいマルチポイントライン（少なくとも3つの座標ペア）。ポリゴンの内部は塗りつぶされている、つまりポリゴンの一部と見なされます。「穴」を持つポリゴンは、最初の穴に含まれる別のポリゴンであり、[polygonSub] []コマンドを使用して作成できます。</target>
        </trans-unit>
        <trans-unit id="43e4d5d2c45c509aaee61213043ffa37cc518dec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Polygons&lt;/strong&gt; are multipoint lines denoted by a sequence of three or more points, denoted by either point objects or coordinate pairs, which do not intersect with themselves. The first and last coordinate pairs of a polygon are equal.</source>
          <target state="translated">&lt;strong&gt;ポリゴン&lt;/strong&gt;は、一連の3つ以上のポイントで表されるマルチポイントラインで、ポイントオブジェクトまたは座標ペアのいずれかで表され、それ自体とは交差しません。ポリゴンの最初と最後の座標ペアは同じです。</target>
        </trans-unit>
        <trans-unit id="2e07e9a05546e4319882669bc9712dc4ccf31063" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Post an issue&lt;/strong&gt; on our &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues&quot;&gt;issue tracker&lt;/a&gt; on GitHub</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;GitHubの&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues&quot;&gt;課題トラッカー&lt;/a&gt;に&lt;strong&gt;課題&lt;/strong&gt;を&lt;strong&gt;投稿する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="33a77013c569a15e7e2bf3a1992ac56e56b3b016" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Post an issue&lt;/strong&gt; on the &lt;a href=&quot;https://github.com/rethinkdb/docs/issues&quot;&gt;documentation issue tracker&lt;/a&gt; on GitHub</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;GitHubの&lt;a href=&quot;https://github.com/rethinkdb/docs/issues&quot;&gt;ドキュメントの問題トラッカー&lt;/a&gt;に&lt;strong&gt;問題&lt;/strong&gt;を&lt;strong&gt;投稿する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="42335a2c1df7ed71b48071a2503896505db6d209" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Post an issue&lt;/strong&gt; on the docs &lt;a href=&quot;https://github.com/rethinkdb/docs/issues&quot;&gt;issue tracker&lt;/a&gt; on GitHub</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;GitHubのドキュメントの&lt;a href=&quot;https://github.com/rethinkdb/docs/issues&quot;&gt;問題トラッカー&lt;/a&gt;に&lt;strong&gt;問題&lt;/strong&gt;を&lt;strong&gt;投稿する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12882ba83567cb07834b7c929caf91c2a37d62f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Processing happens where the data is until an operation needs to combine it.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;処理は、操作がデータを結合する必要があるまで、データがある場所で行われます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d902b373120e946f67ccafe33ceb570b4948b884" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pseudotypes&lt;/strong&gt; cover several kinds of other ReQL-specific data types which are generally composites or special cases of other types:</source>
          <target state="translated">&lt;strong&gt;疑似&lt;/strong&gt;タイプは、他のタイプのReQL固有のデータタイプのいくつかをカバーしています。</target>
        </trans-unit>
        <trans-unit id="37ece2fb3fb304a0baf20a172d9e8628d37a462a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Q&lt;/strong&gt;: What&amp;rsquo;s the best way to perform &lt;a href=&quot;http://en.wikipedia.org/wiki/Full_text_search&quot;&gt;full-text searches&lt;/a&gt; with RethinkDB?</source>
          <target state="translated">&lt;strong&gt;Q&lt;/strong&gt;：RethinkDBで&lt;a href=&quot;http://en.wikipedia.org/wiki/Full_text_search&quot;&gt;全文検索&lt;/a&gt;を実行する最良の方法は何ですか？</target>
        </trans-unit>
        <trans-unit id="f5b263e6535a839063246d6ed1d667d9e5e05e99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Queries are timezone-aware&lt;/strong&gt;, so you can ask questions like &amp;ldquo;Did this event happen on a Monday in the time zone where it was recorded?&amp;rdquo;</source>
          <target state="translated">&lt;strong&gt;クエリはタイムゾーンに対応&lt;/strong&gt;しているため、「このイベントは月曜日に記録されたタイムゾーンで発生しましたか？」などの質問をすることができます。</target>
        </trans-unit>
        <trans-unit id="0e35d1efa548c6d1dddc1e1fcc7fe7239f2793a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ReQL embeds into your programming language.&lt;/strong&gt; Queries are constructed by making function calls in the programming language you already know. You don&amp;rsquo;t have to concatenate strings or construct specialized JSON objects to query the database.</source>
          <target state="translated">&lt;strong&gt;ReQLはプログラミング言語に埋め込まれます。&lt;/strong&gt;クエリは、すでに知っているプログラミング言語で関数呼び出しを行うことによって構築されます。データベースをクエリするために、文字列を連結したり、特殊なJSONオブジェクトを作成したりする必要はありません。</target>
        </trans-unit>
        <trans-unit id="67197f7ba403334566c79cd3161603e0af6d6c85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Read mode&lt;/strong&gt; is set per query via an optional argument, &lt;code&gt;read_mode&lt;/code&gt; (or &lt;code&gt;readMode&lt;/code&gt;), to &lt;a href=&quot;../../api/javascript/table/index&quot;&gt;table&lt;/a&gt;. It has three possible values:</source>
          <target state="translated">&lt;strong&gt;読み取りモード&lt;/strong&gt;は、オプションの引数 &lt;code&gt;read_mode&lt;/code&gt; （または &lt;code&gt;readMode&lt;/code&gt; ）を介してクエリごとに&lt;a href=&quot;../../api/javascript/table/index&quot;&gt;table&lt;/a&gt;に設定されます。次の3つの値があります。</target>
        </trans-unit>
        <trans-unit id="0deb70322adc3d51ae3a4a03b83d595e706f63cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ready to install the client drivers?&lt;/strong&gt; Take a look at &lt;a href=&quot;../install-drivers/index&quot;&gt;the drivers install page&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;クライアントドライバーをインストールする準備はできましたか？&lt;/strong&gt;見てみましょう&lt;a href=&quot;../install-drivers/index&quot;&gt;ドライバがページをインストールします&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c529a5a36bed80b1170b82d0a7683aaaeec97cae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Repairable:&lt;/strong&gt; the shard is not healthy, but has at least one replica, whether voting or non-voting, available.</source>
          <target state="translated">&lt;strong&gt;修復可能：&lt;/strong&gt;シャードは&lt;strong&gt;正常で&lt;/strong&gt;はありませんが、投票か非投票かにかかわらず、少なくとも1つのレプリカが使用可能です。</target>
        </trans-unit>
        <trans-unit id="a4c27efd49bd4b54d53658d59a45b127a4c6e135" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Restrict access to port 28015&lt;/strong&gt; to allow only IP addresses or security groups that should have driver access.</source>
          <target state="translated">&lt;strong&gt;ポート28015&lt;/strong&gt;への&lt;strong&gt;アクセスを制限し&lt;/strong&gt;て、ドライバーアクセスが必要なIPアドレスまたはセキュリティグループのみを許可します。</target>
        </trans-unit>
        <trans-unit id="5f4ee4c0c472d3efbe4bc88398ffef5449ee7b75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Running Ubuntu?&lt;/strong&gt; Use the &lt;a href=&quot;#startup-with-initd&quot;&gt;Startup with init.d&lt;/a&gt; instructions above, not the &lt;code&gt;systemd&lt;/code&gt; instructions.</source>
          <target state="translated">&lt;strong&gt;Ubuntuを実行していますか？&lt;/strong&gt; &lt;code&gt;systemd&lt;/code&gt; の手順ではなく、上記の&lt;a href=&quot;#startup-with-initd&quot;&gt;init.dの&lt;/a&gt;手順でスタートアップを使用してください。</target>
        </trans-unit>
        <trans-unit id="486e8782236cac6194ec587ceab134734a3b24a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Seeing a &amp;lsquo;received invalid clustering header&amp;rsquo; message?&lt;/strong&gt; RethinkDB uses three ports to operate&amp;mdash;the HTTP web UI port, the client drivers port, and the intracluster traffic port. You can connect the browser to the web UI port to administer the cluster right from your browser, and connect the client drivers to the client driver port to run queries from your application. If you&amp;rsquo;re running a cluster, different RethinkDB nodes communicate with each other via the intracluster traffic port.</source>
          <target state="translated">&lt;strong&gt;「無効なクラスタリングヘッダーを受信しました」というメッセージが表示されましたか？&lt;/strong&gt; RethinkDBは、HTTP Web UIポート、クライアントドライバーポート、クラスター内トラフィックポートの3つのポートを使用して動作します。ブラウザーをWeb UIポートに接続して、ブラウザーから直接クラスターを管理し、クライアントドライバーをクライアントドライバーポートに接続して、アプリケーションからクエリを実行できます。クラスターを実行している場合、異なるRethinkDBノードはクラスター内トラフィックポートを介して相互に通信します。</target>
        </trans-unit>
        <trans-unit id="799d0e4ffa6d58434454e97c7477149cd53ca7c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Selections&lt;/strong&gt; represent subsets of tables, for example, the return values of &lt;code&gt;filter&lt;/code&gt; or &lt;code&gt;get&lt;/code&gt;. There are three kinds of selections: &lt;strong&gt;Selection&amp;lt;Object&amp;gt;&lt;/strong&gt;, &lt;strong&gt;Selection&amp;lt;Array&amp;gt;&lt;/strong&gt; and &lt;strong&gt;Selection&amp;lt;Stream&amp;gt;&lt;/strong&gt;. The difference between selections and their non-selection counterparts is that selections are writable&amp;mdash;their return values can be passed as inputs to ReQL commands that modify the database. For instance, the &lt;code&gt;get&lt;/code&gt; command will return a Selection&amp;lt;Object&amp;gt; that could then be passed to an &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; command. (&lt;em&gt;Note:&lt;/em&gt;&lt;strong&gt;singleSelection&lt;/strong&gt; is an older term for Selection&amp;lt;Object&amp;gt;; they mean the same thing.)</source>
          <target state="translated">&lt;strong&gt;選択&lt;/strong&gt;は、たとえば &lt;code&gt;filter&lt;/code&gt; または &lt;code&gt;get&lt;/code&gt; の戻り値など、テーブルのサブセットを表します。選択には3つの種類があります&lt;strong&gt;。Selection &amp;lt;Object&amp;gt;&lt;/strong&gt;、&lt;strong&gt;Selection &amp;lt;Array&amp;gt;&lt;/strong&gt;、および&lt;strong&gt;Selection &amp;lt;Stream&amp;gt;&lt;/strong&gt;です。選択と対応する非選択の違いは、選択は書き込み可能であることです。その戻り値は、データベースを変更するReQLコマンドへの入力として渡すことができます。たとえば、 &lt;code&gt;get&lt;/code&gt; コマンドはSelection &amp;lt;Object&amp;gt;を返し、それを &lt;code&gt;update&lt;/code&gt; または &lt;code&gt;delete&lt;/code&gt; コマンドに渡すことができます。 （&lt;em&gt;注：&lt;/em&gt;&lt;strong&gt;singleSelection&lt;/strong&gt;は、Selection &amp;lt;Object&amp;gt;の古い用語です。同じ意味です。）</target>
        </trans-unit>
        <trans-unit id="49a626508c2bf8d315da7f470980e146b8ca66c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Simple indexes&lt;/strong&gt; based on the value of a single field.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;単一のフィールドの値に基づく&lt;strong&gt;単純なインデックス&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f570ac1b88af679df89ba77571bd4bc066ff6676" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Streams&lt;/strong&gt; are lists like arrays, but they&amp;rsquo;re loaded in a lazy fashion. Operations that return streams return a &lt;em&gt;cursor.&lt;/em&gt; A cursor is a pointer into the result set. Instead of reading the results all at once like an array, you loop over the results, retrieving the next member of the set with each iteration. This makes it possible to efficiently work with large result sets. (See &amp;ldquo;Working with Streams,&amp;rdquo; below, for some tips.) Streams are read-only; you can&amp;rsquo;t pass one as an input to an ReQL command meant to modify its input like &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ストリーム&lt;/strong&gt;は配列のようなリストですが、遅延してロードされます。ストリームを返す操作は&lt;em&gt;カーソルを&lt;/em&gt;返し&lt;em&gt;ます。&lt;/em&gt;カーソルは結果セットへのポインタです。結果を配列のように一度に読み取る代わりに、結果をループして、反復ごとにセットの次のメンバーを取得します。これにより、大きな結果セットを効率的に処理できます。（いくつかのヒントについては、以下の「ストリームの操作」を参照してください。）ストリームは読み取り専用です。 &lt;code&gt;update&lt;/code&gt; や &lt;code&gt;delete&lt;/code&gt; などの入力を変更するためのReQLコマンドへの入力として1つを渡すことはできません。</target>
        </trans-unit>
        <trans-unit id="5bf60a0b812a19d56ba91ad443eefb5b23c23aff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Strings&lt;/strong&gt; are any valid UTF-8 string: &lt;code&gt;&quot;superhero&quot;&lt;/code&gt;, &lt;code&gt;&quot;&amp;uuml;nn&amp;euml;c&amp;euml;ss&amp;auml;r&amp;yuml; &amp;uuml;ml&amp;auml;&amp;uuml;ts&quot;&lt;/code&gt;. Strings may include the null code point (U+0000).</source>
          <target state="translated">&lt;strong&gt;文字列は&lt;/strong&gt;：任意の有効なUTF-8文字列です &lt;code&gt;&quot;superhero&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;&amp;uuml;nn&amp;euml;c&amp;euml;ss&amp;auml;r&amp;yuml; &amp;uuml;ml&amp;auml;&amp;uuml;ts&quot;&lt;/code&gt; 。文字列には、ヌルコードポイント（U + 0000）を含めることができます。</target>
        </trans-unit>
        <trans-unit id="b8db6c184c5ac01f5ce4005e909d106f1dbf45cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tables&lt;/strong&gt; are RethinkDB database tables. They behave like selections&amp;mdash;they&amp;rsquo;re writable, as you can insert and delete documents in them. ReQL methods that use an &lt;a href=&quot;../secondary-indexes/javascript/index&quot;&gt;index&lt;/a&gt;, like &lt;code&gt;getAll&lt;/code&gt;, are only available on tables.</source>
          <target state="translated">&lt;strong&gt;テーブル&lt;/strong&gt;はRethinkDBデータベーステーブルです。それらは選択範囲のように動作し、ドキュメントを挿入および削除できるため、書き込み可能です。使用ReQL方法&lt;a href=&quot;../secondary-indexes/javascript/index&quot;&gt;インデックスは&lt;/a&gt;、のような &lt;code&gt;getAll&lt;/code&gt; 、テーブルの上にのみ使用可能です。</target>
        </trans-unit>
        <trans-unit id="6f77ceba2cd260e3b44909c763584535803d185e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Talk to the team on IRC&lt;/strong&gt; on &lt;a href=&quot;irc://freenode.net/#rethinkdb&quot;&gt;#rethinkdb@freenode.net&lt;/a&gt; &amp;mdash; via &lt;a href=&quot;http://webchat.freenode.net/?channels=#rethinkdb&quot;&gt;Webchat&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;IRC上のチームと話&lt;/strong&gt;に&lt;a href=&quot;irc://freenode.net/#rethinkdb&quot;&gt;#rethinkdb@freenode.net&lt;/a&gt; -を経由して&lt;a href=&quot;http://webchat.freenode.net/?channels=#rethinkdb&quot;&gt;ウェブチャット&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="241f675f29e298739c20e6fe842d8b714d268ef6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Talk to the team&lt;/strong&gt; on &lt;a href=&quot;irc://freenode.net/#rethinkdb&quot;&gt;#rethinkdb@freenode.net&lt;/a&gt; &amp;mdash; via &lt;a href=&quot;http://webchat.freenode.net/?channels=#rethinkdb&quot;&gt;Webchat&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;&lt;a href=&quot;irc://freenode.net/#rethinkdb&quot;&gt;#rethinkdb@freenode.netで&lt;/a&gt;&lt;strong&gt;チーム&lt;/strong&gt;と話し合う &amp;mdash; &lt;a href=&quot;http://webchat.freenode.net/?channels=#rethinkdb&quot;&gt;Webchat&lt;/a&gt;経由</target>
        </trans-unit>
        <trans-unit id="cba252a8a7dad1f3f788cee82e2bd0fb37f9debf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Technologies:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Technologies:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a0e0f35150cd2ebc8b4e22bc881db2d8c834afd6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Thanks to all our amazing driver contributors!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;素晴らしいドライバーの貢献に感謝します！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b3a0a050d6074e901f878100598ba959ebc05bda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The Elasticsearch River plugin is not compatible with RethinkDB 2.2 and higher.&lt;/strong&gt; We&amp;rsquo;ll be revisiting this article to update it with the new official Java driver and the &lt;a href=&quot;https://github.com/rethinkdb/logstash-input-rethinkdb&quot;&gt;RethinkDB Logstash input plugin&lt;/a&gt; soon.</source>
          <target state="translated">&lt;strong&gt;Elasticsearch Riverプラグインは、RethinkDB 2.2以降と互換性がありません。&lt;/strong&gt;新しい公式Javaドライバーと&lt;a href=&quot;https://github.com/rethinkdb/logstash-input-rethinkdb&quot;&gt;RethinkDB Logstash入力プラグインで&lt;/a&gt;更新するために、この記事を再検討します。</target>
        </trans-unit>
        <trans-unit id="d00680d3cf701111ba5a9f173ac5c81948f23f4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The emergency repair mode is extremely dangerous.&lt;/strong&gt; It bypasses normal safeguards that prevent data loss and invalidates the &lt;a href=&quot;../../../docs/consistency/index&quot;&gt;consistency guarantees&lt;/a&gt; that RethinkDB normally provides, and can easily lose data in either mode&amp;mdash;in &lt;code&gt;unsafe_rollback_or_erase&lt;/code&gt; mode it could lose &lt;em&gt;all&lt;/em&gt; of a shard&amp;rsquo;s data.</source>
          <target state="translated">&lt;strong&gt;緊急修理モードは非常に危険です。&lt;/strong&gt;データの損失を防ぐ通常の保護手段をバイパスし、RethinkDBが通常提供する&lt;a href=&quot;../../../docs/consistency/index&quot;&gt;一貫性の保証&lt;/a&gt;を無効にします。どちらのモードでも簡単にデータを失う可能性があります &lt;code&gt;unsafe_rollback_or_erase&lt;/code&gt; モードでは、シャードの&lt;em&gt;すべて&lt;/em&gt;のデータが失われる可能性があります。</target>
        </trans-unit>
        <trans-unit id="9094d3699eb84b00dd908ef62838c379f7ea395f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This design has the following advantages:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;この設計には次の利点があります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="763cfe3f57a5e4d13fb261d3996143710a604c20" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This technology has the following limitation:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;このテクノロジーには次の制限があります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5abdd8608cfa5be9088b13101b71ba66e9e70735" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Time operations are pure ReQL&lt;/strong&gt;, which means that even complicated date-time queries can be distributed efficiently across the cluster.</source>
          <target state="translated">&lt;strong&gt;時間操作は純粋なReQL&lt;/strong&gt;です。つまり、複雑な日時クエリでも、クラスター全体に効率的に分散できます。</target>
        </trans-unit>
        <trans-unit id="1ca5cd814baa9c15ef35d906f6a49bc834967333" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Times are integrated with the official drivers&lt;/strong&gt;, which will automatically convert to and from your language&amp;rsquo;s native time type.</source>
          <target state="translated">&lt;strong&gt;時刻は公式ドライバーと統合されており&lt;/strong&gt;、言語のネイティブな時刻タイプとの間で自動的に変換されます。</target>
        </trans-unit>
        <trans-unit id="e8f826206bebda797813cec26b6ff6fb7d038c71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Times work as indexes&lt;/strong&gt;, so you can efficiently retrieve events based on when they occurred.</source>
          <target state="translated">&lt;strong&gt;時間はインデックス&lt;/strong&gt;として機能するため、イベントが発生したタイミングに基づいて効率的にイベントを取得できます。</target>
        </trans-unit>
        <trans-unit id="5b8b8497151001614bd4e0670bb0951bee3ba261" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Times&lt;/strong&gt; are RethinkDB&amp;rsquo;s native date/time type, stored with millisecond precision. You can use native date/time types in supported languages, as the conversion will be done by the driver. See &lt;a href=&quot;../dates-and-times/javascript/index&quot;&gt;Dates and times in RethinkDB&lt;/a&gt; for details.</source>
          <target state="translated">&lt;strong&gt;時刻&lt;/strong&gt;は、RethinkDBのネイティブの日付/時刻型であり、ミリ秒の精度で格納されます。変換はドライバーによって行われるため、サポートされている言語でネイティブの日付/時刻型を使用できます。詳細については&lt;a href=&quot;../dates-and-times/javascript/index&quot;&gt;、RethinkDBの日付と時刻&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8417b4a9d458266c49da852e5ac822c015a96236" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Voting and non-voting?&lt;/strong&gt; All replicas are &amp;ldquo;voting&amp;rdquo; replicas by default, which simply means that they&amp;rsquo;re counted in any operation that requires a majority of replicas to be available. However, the speed at which replicas &amp;ldquo;vote&amp;rdquo; is affected by network latency; if you have a faraway data center with higher latency, you might want to set its replicas to be non-voting to improve performance, at the cost of guaranteed availability in that data center. You can set a replica to be &amp;ldquo;non-voting&amp;rdquo; by changing its table configuration with &lt;code&gt;reconfigure&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;投票と非投票？&lt;/strong&gt;すべてのレプリカはデフォルトで「投票」レプリカです。これは、レプリカの大部分が使用可能であることを必要とする操作でカウントされることを意味します。ただし、レプリカが「投票」する速度は、ネットワーク遅延の影響を受けます。レイテンシの高い遠方のデータセンターがある場合は、そのデータセンターの可用性を保証する代わりに、レプリカを投票しないように設定してパフォーマンスを向上させることができます。 &lt;code&gt;reconfigure&lt;/code&gt; を使用してテーブル構成を変更することにより、レプリカを「非投票」に設定できます。</target>
        </trans-unit>
        <trans-unit id="ddbdba909e5392a43bd771ddb1314f3bb974167d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Want to connect a third node?&lt;/strong&gt; You can join it with either of the two existing nodes in the cluster.</source>
          <target state="translated">&lt;strong&gt;3番目のノードを接続したいですか？&lt;/strong&gt;クラスター内の2つの既存のノードのいずれかと結合できます。</target>
        </trans-unit>
        <trans-unit id="e53d1a7998151852edb64409057578fbebba1d94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Want to keep learning?&lt;/strong&gt; Dive into the documentation:</source>
          <target state="translated">&lt;strong&gt;学び続けたいですか？&lt;/strong&gt;ドキュメントに飛び込みます：</target>
        </trans-unit>
        <trans-unit id="5a35015d5412f28e13ee4e0223d1c9a03d410d45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Want to learn more about indexes?&lt;/strong&gt;: Read about &lt;a href=&quot;../secondary-indexes/javascript/index&quot;&gt;using secondary indexes in RethinkDB&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;インデックスについて詳しく知りたいですか？&lt;/strong&gt;：&lt;a href=&quot;../secondary-indexes/javascript/index&quot;&gt;RethinkDBでのセカンダリインデックスの使用&lt;/a&gt;について読んでください。</target>
        </trans-unit>
        <trans-unit id="01c549c9750191d008af2a73cb2ad83d40898ec2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Want to learn more about joins in RethinkDB?&lt;/strong&gt; See &lt;a href=&quot;../../table-joins/index&quot;&gt;how to use joins&lt;/a&gt; to query &lt;em&gt;one to many&lt;/em&gt; and &lt;em&gt;many to many&lt;/em&gt; relations.</source>
          <target state="translated">&lt;strong&gt;RethinkDBの結合についてもっと知りたいですか？&lt;/strong&gt;参照してください&lt;a href=&quot;../../table-joins/index&quot;&gt;使用に参加する方法を&lt;/a&gt;照会する&lt;em&gt;多くの1&lt;/em&gt;と&lt;em&gt;、多くの多くの&lt;/em&gt;関係。</target>
        </trans-unit>
        <trans-unit id="6229ffa4cf49896ea3123e2f40d6c3923b220d2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Want to learn more about the basics?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;基本についてもっと知りたいですか？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="414dbfcda6ccf03073222e7922b5b9bfc80cd803" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Want to start instances of RethinkDB on system startup?&lt;/strong&gt; See &lt;a href=&quot;../start-on-startup/index&quot;&gt;Start RethinkDB at system startup&lt;/a&gt; to learn how to set up RethinkDB with &lt;code&gt;init.d&lt;/code&gt; or &lt;code&gt;systemd&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;システムの起動時にRethinkDBのインスタンスを起動したいですか？&lt;/strong&gt; &lt;code&gt;init.d&lt;/code&gt; または &lt;code&gt;systemd&lt;/code&gt; で RethinkDBを設定する方法については&lt;a href=&quot;../start-on-startup/index&quot;&gt;、システムの起動時&lt;/a&gt;にRethinkDBを開始するを参照してください。</target>
        </trans-unit>
        <trans-unit id="31c9b4476e404baf1ee134c0a5877b383a2e0dcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Want to write useful queries right away?&lt;/strong&gt; Check out the &lt;a href=&quot;../guide/javascript/index&quot;&gt;ten-minute guide&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;すぐに役立つクエリを書きたいですか？&lt;/strong&gt;チェックアウト&lt;a href=&quot;../guide/javascript/index&quot;&gt;10分のガイドを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5d556cbc94357222a0d84c564d0db94534587aa7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning!&lt;/strong&gt; If the RethinkDB river plugin loses connection with the RethinkDB server it&amp;rsquo;s pulling data from, there&amp;rsquo;s no way to guarantee no documents will be lost. This should change in the future with improvements to changefeeds, but currently the only way to be sure is to backfill every time, which will still miss deleted documents.</source>
          <target state="translated">&lt;strong&gt;警告！&lt;/strong&gt;RethinkDB riverプラグインがデータを取得しているRethinkDBサーバーとの接続を失った場合、ドキュメントが失われないことを保証する方法はありません。これは、changefeedの改善により将来的に変更される予定ですが、現在確実に行う唯一の方法は、毎回バックフィルすることです。これにより、削除されたドキュメントが失われます。</target>
        </trans-unit>
        <trans-unit id="82bee43aaf2bf881fa72aeb9566728d0e938de71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What projections are supported?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;どの投影法がサポートされていますか？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4578283ff402020750ff54fb973b598a40988ab5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Wondering how to model your data?&lt;/strong&gt; Read about &lt;a href=&quot;../data-modeling/index&quot;&gt;data modeling in RethinkDB&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;データをモデル化する方法を知りたいですか？&lt;/strong&gt;&lt;a href=&quot;../data-modeling/index&quot;&gt;RethinkDBでのデータモデリング&lt;/a&gt;について読んでください。</target>
        </trans-unit>
        <trans-unit id="689268146d99e247378fbf455f261a7c1dd6863f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Write acknowledgements&lt;/strong&gt; are set per table with the &lt;code&gt;write_acks&lt;/code&gt; setting, either using the &lt;a href=&quot;../../api/javascript/config/index&quot;&gt;config&lt;/a&gt; command or by writing to the &lt;code&gt;table_config&lt;/code&gt;&lt;a href=&quot;../system-tables/index&quot;&gt;system table&lt;/a&gt;. The default is &lt;code&gt;majority&lt;/code&gt;, meaning writes will be acknowledged when a majority of (voting) replicas have confirmed their writes. The other possible option is &lt;code&gt;single&lt;/code&gt;, meaning writes will be acknowledged when a single replica acknowledges it.</source>
          <target state="translated">&lt;strong&gt;書き込み確認&lt;/strong&gt;は、&lt;a href=&quot;../../api/javascript/config/index&quot;&gt;config&lt;/a&gt;コマンドを使用するか、 &lt;code&gt;table_config&lt;/code&gt; &lt;a href=&quot;../system-tables/index&quot;&gt;システムテーブルに&lt;/a&gt;書き込むことにより、 &lt;code&gt;write_acks&lt;/code&gt; 設定を使用してテーブルごとに設定されます。デフォルトは &lt;code&gt;majority&lt;/code&gt; 。つまり、大多数の（投票）レプリカが書き込みを確認すると、書き込みが確認されます。もう1つの可能なオプションは &lt;code&gt;single&lt;/code&gt; です。つまり、単一のレプリカが承認すると、書き込みが承認されます。</target>
        </trans-unit>
        <trans-unit id="bffa3ead50f5e7fef625c1cc9053496624c82f75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You now have a RethinkDB cluster!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;これでRethinkDBクラスターができました！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="deb6f5515c303cc9a48f0866adbbd0be0306988a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You now have a RethinkDB cluster!&lt;/strong&gt; Try pointing your browser to &lt;code&gt;localhost:8080&lt;/code&gt; or &lt;code&gt;localhost:8081&lt;/code&gt; to access the web interface. If you click on the &amp;ldquo;Servers&amp;rdquo; tab at the top, you should see both servers in the cluster.</source>
          <target state="translated">&lt;strong&gt;これでRethinkDBクラスターができました！&lt;/strong&gt;ブラウザで &lt;code&gt;localhost:8080&lt;/code&gt; または &lt;code&gt;localhost:8081&lt;/code&gt; を指定して、ウェブインターフェースにアクセスしてみてください。上部の「サーバー」タブをクリックすると、クラスター内の両方のサーバーが表示されます。</target>
        </trans-unit>
        <trans-unit id="dda34b0819c48a91d483548266ee6a92d0f5d330" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You&amp;rsquo;ve now got a working server!&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;これで稼働中のサーバーができました！&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6c11735169a26215864c45335105e4a17b6bbc4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;_Example:&lt;/strong&gt; Subscribe to a document&amp;rsquo;s &lt;a href=&quot;../../../docs/changefeeds/javascript/index&quot;&gt;changefeed&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;_Example:&lt;/strong&gt; Subscribe to a document&amp;rsquo;s &lt;a href=&quot;../../../docs/changefeeds/javascript/index&quot;&gt;changefeed&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="3442b063282f657ef82b0da809b51a7209d6422d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;database&lt;/strong&gt; scope allows the ability to create and drop tables, in addition to the above.</source>
          <target state="translated">&lt;strong&gt;データベース&lt;/strong&gt;スコープでは、上記に加えて、テーブルを作成および削除できます。</target>
        </trans-unit>
        <trans-unit id="9153a25e06ec61fa8b4769148563ca81d9a755c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;global&lt;/strong&gt; scope allows the ability to create and drop databases, in addition to the above. (However, a user must have &lt;code&gt;config&lt;/code&gt; permissions for the tables within a database to drop them, which might not be the case if their &lt;code&gt;config&lt;/code&gt; permissions are overridden at a table level; see &lt;a href=&quot;#scopes&quot;&gt;Scopes&lt;/a&gt; below.)</source>
          <target state="translated">&lt;strong&gt;グローバル&lt;/strong&gt;スコープを使用すると、上記に加えて、データベースを作成および削除できます。（ただし、ユーザが有していなければならない &lt;code&gt;config&lt;/code&gt; それらの場合に当てはまらない可能性がある、それらを削除するデータベース内のテーブルのアクセス許可を &lt;code&gt;config&lt;/code&gt; 権限がテーブル・レベルで上書きされ、参照&lt;a href=&quot;#scopes&quot;&gt;スコープを&lt;/a&gt;以下）。</target>
        </trans-unit>
        <trans-unit id="8ba7c89c2ea6ac861cab74ba9bd9fd2a58d18206" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;table&lt;/strong&gt; scope allows creating and dropping &lt;a href=&quot;../secondary-indexes/javascript/index&quot;&gt;secondary indexes&lt;/a&gt; on a table, as well as changing the table&amp;rsquo;s cluster configuration (commands such as &lt;code&gt;reconfigure&lt;/code&gt; and &lt;code&gt;rebalance&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;テーブル&lt;/strong&gt;スコープを使用すると、テーブルの&lt;a href=&quot;../secondary-indexes/javascript/index&quot;&gt;セカンダリインデックス&lt;/a&gt;を作成および削除したり、テーブルのクラスター構成を変更したりできます（ &lt;code&gt;reconfigure&lt;/code&gt; や &lt;code&gt;rebalance&lt;/code&gt; などのコマンド）。</target>
        </trans-unit>
        <trans-unit id="f745e72e8c0d361a38a4045c079cc2ddfafe0cc4" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;point&amp;rdquo; changefeed returns changes to a single document within a table rather than the table as a whole.</source>
          <target state="translated">「ポイント」チェンジフィードは、テーブル全体ではなく、テーブル内の単一のドキュメントへの変更を返します。</target>
        </trans-unit>
        <trans-unit id="b67b65c9338df852c22eacc241db703cc42cab37" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;http://www.rethinkdb.com/blog/lambda-functions/&quot;&gt;good article&lt;/a&gt; by &lt;a href=&quot;https://github.com/wmrowan&quot;&gt;Bill Rowan&lt;/a&gt; explains anonymous functions (or lambda functions) in the drivers. The article covers why anonymous functions are useful and how they work. Here, we&amp;rsquo;ll just focus on how to serialize anonymous functions.</source>
          <target state="translated">&lt;a href=&quot;http://www.rethinkdb.com/blog/lambda-functions/&quot;&gt;良い記事&lt;/a&gt;による&lt;a href=&quot;https://github.com/wmrowan&quot;&gt;ビル・ローワンは、&lt;/a&gt;ドライバーに無名関数（またはラムダ関数を）説明しています。この記事では、匿名関数が役立つ理由とその機能について説明します。ここでは、無名関数をシリアル化する方法に焦点を当てます。</target>
        </trans-unit>
        <trans-unit id="6b1e33de5288da2a7312d7d7516ba04c03818c54" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample&quot;&gt;sample &lt;code&gt;.conf&lt;/code&gt; file&lt;/a&gt; is available with full comments. (It may already be installed on your distribution as &lt;code&gt;default.conf.sample&lt;/code&gt;.)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample&quot;&gt;サンプル &lt;code&gt;.conf&lt;/code&gt; ファイルが&lt;/a&gt;いっぱいのコメントで使用可能です。（これは &lt;code&gt;default.conf.sample&lt;/code&gt; としてディストリビューションにすでにインストールされている場合があります。）</target>
        </trans-unit>
        <trans-unit id="2959c9e1be85087a56cec94ff8fd43258e0d5e1e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Queue&lt;/code&gt; is used by consumers. It has two purposes:</source>
          <target state="translated">A &lt;code&gt;Queue&lt;/code&gt; 消費者によって使用されています。これには2つの目的があります。</target>
        </trans-unit>
        <trans-unit id="000f4ff9b35e747a30f095413ac32de4f1b39873" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReqlAuthError&lt;/code&gt; should be thrown if the error code is between 10 and 20 (inclusive).</source>
          <target state="translated">A &lt;code&gt;ReqlAuthError&lt;/code&gt; は、エラーコードが10及び20（両端を含む）の間である場合にスローされるべきです。</target>
        </trans-unit>
        <trans-unit id="3ad9e1e80bcf4c7c0611aa36e1447643ca95a72b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Topic&lt;/code&gt; is used by publishers. It contains some key that contains meta-data about the messages.</source>
          <target state="translated">A &lt;code&gt;Topic&lt;/code&gt; 、出版社によって使用されます。メッセージに関するメタデータを含むいくつかのキーが含まれています。</target>
        </trans-unit>
        <trans-unit id="36c4466bba71a83f521cde659de60e580f36611c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;finalEmit&lt;/code&gt; function may also be provided, which will be called at the end of the sequence. It takes a single parameter: the result of the last reduction through the iteration (the accumulator), or the original base value if the input sequence was empty. This function must return a list, which will be appended to &lt;code&gt;fold&lt;/code&gt;&amp;rsquo;s output stream.</source>
          <target state="translated">&lt;code&gt;finalEmit&lt;/code&gt; の関数は、配列の最後に呼び出さされる、提供されてもよいです。単一のパラメーター、つまり、反復による最後の削減の結果（アキュムレーター）、または入力シーケンスが空の場合は元のベース値を取ります。この関数は、 &lt;code&gt;fold&lt;/code&gt; の出力ストリームに追加されるリストを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="01bf381896ef5c09c0aa8dfa1843c2d7cd5eb428" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;datum&lt;/em&gt; (the singular of data) is any value that can be represented in JSON: booleans, numbers, strings, objects, arrays and &lt;code&gt;null&lt;/code&gt;. They are sent to the server in JSON form.</source>
          <target state="translated">&lt;em&gt;データム&lt;/em&gt;ブール値、数値、文字列、オブジェクト、配列および：（データの単数形）はJSONで表現することができる任意の値である &lt;code&gt;null&lt;/code&gt; 。それらはJSON形式でサーバーに送信されます。</target>
        </trans-unit>
        <trans-unit id="f9641c26b7d295935a36da0e1654720d5abd8c52" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;user&lt;/em&gt; in RethinkDB is similar to users in most other database systems; a database administrator may have a user account, and client applications may be given user accounts. These are unrelated to user accounts that may be implemented within the application.</source>
          <target state="translated">&lt;em&gt;ユーザー&lt;/em&gt; RethinkDBでは、他のほとんどのデータベース・システムのユーザーに似ています。データベース管理者はユーザーアカウントを持ち、クライアントアプリケーションにはユーザーアカウントが与えられます。これらは、アプリケーション内で実装できるユーザーアカウントとは関係ありません。</target>
        </trans-unit>
        <trans-unit id="83760ed22ea9acee4a1cacb46e00feb25126fb6a" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;Sequence&lt;/strong&gt; is any list data type: arrays, streams, selections, and tables.</source>
          <target state="translated">A &lt;strong&gt;配列は、&lt;/strong&gt;配列、ストリーム、選択、及びテーブル：任意のリスト・データ・タイプです。</target>
        </trans-unit>
        <trans-unit id="8fab7559009575b91fd187e572f7e7b54a62ce28" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;datum&lt;/strong&gt; is a catch-all term for most non-stream data types, including all basic data types, pseudotypes, objects, and non-stream selections. Datum types do &lt;em&gt;not&lt;/em&gt; include streams (including Selection&amp;lt;Stream&amp;gt;), databases, tables and table slices, and functions.</source>
          <target state="translated">&lt;strong&gt;データは&lt;/strong&gt;すべての基本データ型、偽、オブジェクト、および非ストリームの選択を含め、ほとんどの非ストリームデータタイプ、のためのキャッチオール用語です。データムタイプには、ストリーム（Selection &amp;lt;Stream&amp;gt;を含む）、データベース、テーブルとテーブルスライス、および関数&lt;em&gt;は&lt;/em&gt;含まれませ&lt;em&gt;ん&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="21f36e926581f5a8e14c0871c43d866f0e20ccf3" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;group&lt;/strong&gt; step that groups the posts based on their category.</source>
          <target state="translated">カテゴリに基づいて投稿をグループ化する&lt;strong&gt;グループ&lt;/strong&gt;ステップ。</target>
        </trans-unit>
        <trans-unit id="37fed783150ea6e2e78487a8a6cb5ffb3ccaa046" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;map&lt;/strong&gt; operation which filters and/or transforms the elements in the sequence (or each group) into a new sequence (or grouped sequences).</source>
          <target state="translated">シーケンス（または各グループ）の要素をフィルタリングまたは変換、あるいはその両方を行って新しいシーケンス（またはグループ化されたシーケンス）に変換する&lt;strong&gt;マップ&lt;/strong&gt;操作。</target>
        </trans-unit>
        <trans-unit id="3e301139ebfc8b10f8fbee3198b338c0be3b74d1" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;map&lt;/strong&gt; step that transforms each post into the number &lt;code&gt;1&lt;/code&gt; (since we&amp;rsquo;re counting each post once).</source>
          <target state="translated">各投稿を &lt;code&gt;1&lt;/code&gt; に変換する&lt;strong&gt;マップ&lt;/strong&gt;ステップ（各投稿を1回カウントしているため）。</target>
        </trans-unit>
        <trans-unit id="1be7331b0bbfa48f5bd27f537083ad57261877b6" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;reduce&lt;/strong&gt; operation which aggregates the values produced by &lt;strong&gt;map&lt;/strong&gt; into a single value (or a single value for each group).</source>
          <target state="translated">&lt;strong&gt;map&lt;/strong&gt;によって生成された値を単一の値（または各グループの単一の値）に集約する&lt;strong&gt;還元&lt;/strong&gt;操作。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="41815661adc55f1d9970a5053bde6809314f47ea" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;reduce&lt;/strong&gt; step that sums the number of posts for each group.</source>
          <target state="translated">各グループの投稿数を合計する&lt;strong&gt;削減&lt;/strong&gt;ステップ。</target>
        </trans-unit>
        <trans-unit id="73bf5c35c762156461bace398f27e62e88c1489e" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;reduce&lt;/strong&gt; step that sums the number of posts.</source>
          <target state="translated">投稿の数を合計する&lt;strong&gt;削減&lt;/strong&gt;ステップ。</target>
        </trans-unit>
        <trans-unit id="c9673ac9a354e3fa5da8acf8e51dfd5e22610c69" translate="yes" xml:space="preserve">
          <source>A Flask extension that adds RethinkDB support (also see the &lt;a href=&quot;https://pypi.python.org/pypi/Flask-RethinkDB/&quot;&gt;pip package&lt;/a&gt;).</source>
          <target state="translated">RethinkDBサポートを追加するFlask拡張機能（&lt;a href=&quot;https://pypi.python.org/pypi/Flask-RethinkDB/&quot;&gt;pipパッケージ&lt;/a&gt;も参照）。</target>
        </trans-unit>
        <trans-unit id="fd2cb79f36065ba626eadbcee5f46305e13f4ba0" translate="yes" xml:space="preserve">
          <source>A MySQL to RethinkDB migration script.</source>
          <target state="translated">MySQL から RethinkDB への移行スクリプト。</target>
        </trans-unit>
        <trans-unit id="39d7d5600c04b78f133c0bbe7833df579f2b84df" translate="yes" xml:space="preserve">
          <source>A Node.js REPL for RethinkDB.</source>
          <target state="translated">RethinkDB用のNode.js REPLです。</target>
        </trans-unit>
        <trans-unit id="ff5c54cbb2a5d9c9d840d252c6ee7e6a3af734ab" translate="yes" xml:space="preserve">
          <source>A Node.js module that will execute a nightly backup and push it to S3.</source>
          <target state="translated">毎晩バックアップを実行してS3にプッシュするNode.jsモジュール。</target>
        </trans-unit>
        <trans-unit id="f169d3946fa70e2c77062ea57087f03d807e2080" translate="yes" xml:space="preserve">
          <source>A Puppet module for RethinkDB.</source>
          <target state="translated">RethinkDB用のPuppetモジュール。</target>
        </trans-unit>
        <trans-unit id="5707ab080e2932c76243aaca326b2ffd594bc92c" translate="yes" xml:space="preserve">
          <source>A Python ORM for RethinkDB.</source>
          <target state="translated">RethinkDB用のPython ORM。</target>
        </trans-unit>
        <trans-unit id="3b00fb35a0e66f3f3c5f2910f8e1b3716bb6b432" translate="yes" xml:space="preserve">
          <source>A Python object mapper in the style of &lt;a href=&quot;https://cloud.google.com/appengine/docs/python/ndb/&quot;&gt;App Engine NDB&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://cloud.google.com/appengine/docs/python/ndb/&quot;&gt;App Engine NDBの&lt;/a&gt;スタイルのPythonオブジェクトマッパー。</target>
        </trans-unit>
        <trans-unit id="481da918ab2b3b2ea60b5b0fe3a1884028dc9ecf" translate="yes" xml:space="preserve">
          <source>A ReQL document is a JSON object: a set of key-value pairs, in which each value might be a single value, a list of values, or &lt;em&gt;another&lt;/em&gt; set of key-value pairs. When the value of a field contains more fields, we describe these as &lt;em&gt;nested fields.&lt;/em&gt;</source>
          <target state="translated">ReQLドキュメントはJSONオブジェクトです。つまり、キーと値のペアのセットです。各値は、単一の値、値のリスト、またはキーと値のペアの&lt;em&gt;別の&lt;/em&gt;セットです。フィールドの値にさらに多くのフィールドが含まれている場合、これらを&lt;em&gt;ネストされたフィールド&lt;/em&gt;として説明し&lt;em&gt;ます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dc545da09ef5cc39b89d289701b7bb6dbd9781dd" translate="yes" xml:space="preserve">
          <source>A RethinkDB adapter for &lt;a href=&quot;https://github.com/1602/jugglingdb&quot;&gt;JugglingDB&lt;/a&gt;, a multi-database ORM for Node.js.</source>
          <target state="translated">Node.js用のマルチデータベースORMである&lt;a href=&quot;https://github.com/1602/jugglingdb&quot;&gt;JugglingDB&lt;/a&gt;用のRethinkDBアダプター。</target>
        </trans-unit>
        <trans-unit id="6ff030262b5fdf35d8dca1c2e35ba5200e071245" translate="yes" xml:space="preserve">
          <source>A RethinkDB adapter for &lt;a href=&quot;https://github.com/js-data/js-data&quot;&gt;js-data&lt;/a&gt;, a database-agnostic ORM for Node.js and the browser.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/js-data/js-data&quot;&gt;js-data&lt;/a&gt;用のRethinkDBアダプター、Node.js用のデータベースに依存しないORM、およびブラウザー。</target>
        </trans-unit>
        <trans-unit id="7db74b2e7fd5d6a2c384fed93b03b660fe9170e3" translate="yes" xml:space="preserve">
          <source>A RethinkDB adapter for &lt;a href=&quot;https://github.com/lotus/model&quot;&gt;Lotus::Model&lt;/a&gt;, a persistence framework for Ruby.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/lotus/model&quot;&gt;Lotusの&lt;/a&gt; RethinkDBアダプター:: Model、Rubyの永続化フレームワーク。</target>
        </trans-unit>
        <trans-unit id="ab791ca4787f9652adfa567ee368d43651a9639a" translate="yes" xml:space="preserve">
          <source>A RethinkDB cluster using multiple machines</source>
          <target state="translated">複数のマシンを使用したRethinkDBクラスタ</target>
        </trans-unit>
        <trans-unit id="cc2df0f5e4d2f4f57a02e9695dd2170a529f9be4" translate="yes" xml:space="preserve">
          <source>A RethinkDB cookbook for Chef deployment.</source>
          <target state="translated">ChefデプロイのためのRethinkDBクックブック。</target>
        </trans-unit>
        <trans-unit id="3a5e6301e7c0dfca1b6114ef0e226d3670948483" translate="yes" xml:space="preserve">
          <source>A RethinkDB session store for Connect, similar to connect-redis.</source>
          <target state="translated">Connect用のRethinkDBセッションストアで、connect-redisに似ています。</target>
        </trans-unit>
        <trans-unit id="7269f6b4ee80d5e5e14e4d7040722fcaeb2bdded" translate="yes" xml:space="preserve">
          <source>A Ruby ORM designed for RethinkDB. (Read our &lt;a href=&quot;../rails/index&quot;&gt;quickstart tutorial&lt;/a&gt;.)</source>
          <target state="translated">RethinkDB用に設計されたRuby ORM。（&lt;a href=&quot;../rails/index&quot;&gt;クイックスタートチュートリアルをご覧ください&lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="e97ac3aacc40bf362db1386a09db5e6d08d643c8" translate="yes" xml:space="preserve">
          <source>A WebGL molecule viewer (by &lt;a href=&quot;https://github.com/psb&quot;&gt;@psb&lt;/a&gt;).</source>
          <target state="translated">WebGL分子ビューア（&lt;a href=&quot;https://github.com/psb&quot;&gt;@psbによる&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="3c3cc7ba733f3913cfec1642d6d7bbed00a28609" translate="yes" xml:space="preserve">
          <source>A changefeed is handled like any other stream; when you pass a block to &lt;code&gt;em_run&lt;/code&gt;, the block is called with each document received on the feed. If you pass a &lt;code&gt;Handler&lt;/code&gt; that defines &lt;code&gt;on_stream_val&lt;/code&gt; (or &lt;code&gt;on_val&lt;/code&gt;), those methods will be called with each document.</source>
          <target state="translated">changefeedは他のストリームと同様に処理されます。ブロックを &lt;code&gt;em_run&lt;/code&gt; に渡すと、フィードで受信される各ドキュメントでブロックが呼び出されます。 &lt;code&gt;on_stream_val&lt;/code&gt; （または &lt;code&gt;on_val&lt;/code&gt; ）を定義する &lt;code&gt;Handler&lt;/code&gt; を渡すと、それらのメソッドは各ドキュメントで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4b2edcbc9e5fe042e98c84bd42c18c93f9404dcf" translate="yes" xml:space="preserve">
          <source>A collection of Dockerfiles and configurations to build images for RethinkDB.</source>
          <target state="translated">RethinkDB用のイメージを構築するためのDockerfilesと設定のまとめ。</target>
        </trans-unit>
        <trans-unit id="b52a026f38087af13243d6dad62e0a456a03f403" translate="yes" xml:space="preserve">
          <source>A common data access task is retrieving one document with associated &amp;ldquo;child&amp;rdquo; documents. (This would often be in a one-to-many relationship as shown here, but could be a many-to-many or one-to-one relationship.) In our example data set, we might want to retrieve information about a company and all its employees. We can do this in one ReQL command using &lt;code&gt;merge&lt;/code&gt; and a subquery in its lambda function.</source>
          <target state="translated">一般的なデータアクセスタスクは、関連する「子」ドキュメントを持つ1つのドキュメントを取得することです。（これは多くの場合、ここに示すように1対多の関係になりますが、多対多または1対1の関係になる可能性があります。）このサンプルデータセットでは、会社に関する情報を取得することができます。とそのすべての従業員。ラムダ関数で &lt;code&gt;merge&lt;/code&gt; とサブクエリを使用して、1つのReQLコマンドでこれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="62cab2fec4306d3caa696473d6835476add0efd0" translate="yes" xml:space="preserve">
          <source>A dump of the &lt;a href=&quot;../system-tables/index&quot;&gt;system tables&lt;/a&gt; (see below)</source>
          <target state="translated">&lt;a href=&quot;../system-tables/index&quot;&gt;システムテーブルの&lt;/a&gt;ダンプ（以下を参照）</target>
        </trans-unit>
        <trans-unit id="219839ffd078f193ddaa48103c123e1488b902a7" translate="yes" xml:space="preserve">
          <source>A dump of the &lt;code&gt;rethinkdb._debug_table_status&lt;/code&gt; table (a &amp;ldquo;hidden&amp;rdquo; table in the &lt;code&gt;rethinkdb&lt;/code&gt; system database)</source>
          <target state="translated">&lt;code&gt;rethinkdb._debug_table_status&lt;/code&gt; テーブルのダンプ（ &lt;code&gt;rethinkdb&lt;/code&gt; システムデータベースの「非表示」テーブル）</target>
        </trans-unit>
        <trans-unit id="a793fff24ff78b05d4b3abc967d7d91a4497fd32" translate="yes" xml:space="preserve">
          <source>A few restrictions exist on the arguments:</source>
          <target state="translated">引数にはいくつかの制限が存在します。</target>
        </trans-unit>
        <trans-unit id="11eea1ce2b203ac661abdcce8d3bd0b4b4bfdf3a" translate="yes" xml:space="preserve">
          <source>A fork of &lt;a href=&quot;https://github.com/neumino/thinky&quot;&gt;Thinky&lt;/a&gt; with first-class support for &lt;a href=&quot;http://json-schema.org&quot;&gt;JSON Schema&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://json-schema.org&quot;&gt;JSONスキーマ&lt;/a&gt;をファーストクラスでサポートする&lt;a href=&quot;https://github.com/neumino/thinky&quot;&gt;Thinky&lt;/a&gt;のフォーク。</target>
        </trans-unit>
        <trans-unit id="c21ee3df26f594e64acf65348b4fae18d1cbde20" translate="yes" xml:space="preserve">
          <source>A general-purpose model loader for the &lt;a href=&quot;https://github.com/neumino/thinky&quot;&gt;Thinky&lt;/a&gt; ORM. (Supersedes sails-hook-thinky.)</source>
          <target state="translated">&lt;a href=&quot;https://github.com/neumino/thinky&quot;&gt;Thinky&lt;/a&gt; ORMの汎用モデルローダー。（帆のフックが薄いのに取って代わります。）</target>
        </trans-unit>
        <trans-unit id="aadbfb87038c81fce3c26d9a6007eb0bfad32432" translate="yes" xml:space="preserve">
          <source>A geospatial index field should contain only geometry objects. It will work with geometry ReQL terms (&lt;a href=&quot;../get_intersecting/index&quot;&gt;getIntersecting&lt;/a&gt; and &lt;a href=&quot;../get_nearest/index&quot;&gt;getNearest&lt;/a&gt;) as well as index-specific terms (&lt;a href=&quot;../index_status/index&quot;&gt;indexStatus&lt;/a&gt;, &lt;a href=&quot;../index_wait/index&quot;&gt;indexWait&lt;/a&gt;, &lt;a href=&quot;../index_drop/index&quot;&gt;indexDrop&lt;/a&gt; and &lt;a href=&quot;../index_list/index&quot;&gt;indexList&lt;/a&gt;). Using terms that rely on non-geometric ordering such as &lt;a href=&quot;../get_all/index&quot;&gt;getAll&lt;/a&gt;, &lt;a href=&quot;../order_by/index&quot;&gt;orderBy&lt;/a&gt; and &lt;a href=&quot;../between/index&quot;&gt;between&lt;/a&gt; will result in an error.</source>
          <target state="translated">地理空間インデックスフィールドには、ジオメトリオブジェクトのみを含める必要があります。これは、ジオメトリReQL用語（&lt;a href=&quot;../get_intersecting/index&quot;&gt;getIntersecting&lt;/a&gt;および&lt;a href=&quot;../get_nearest/index&quot;&gt;getNearest&lt;/a&gt;）およびインデックス固有の用語（&lt;a href=&quot;../index_status/index&quot;&gt;indexStatus&lt;/a&gt;、&lt;a href=&quot;../index_wait/index&quot;&gt;indexWait&lt;/a&gt;、&lt;a href=&quot;../index_drop/index&quot;&gt;indexDrop&lt;/a&gt;および&lt;a href=&quot;../index_list/index&quot;&gt;indexList&lt;/a&gt;）で機能します。以下のような非幾何学的な順序に依存している用語使用&lt;a href=&quot;../get_all/index&quot;&gt;のgetAll&lt;/a&gt;、&lt;a href=&quot;../order_by/index&quot;&gt;[並べ替え&lt;/a&gt;と&lt;a href=&quot;../between/index&quot;&gt;の間には、&lt;/a&gt;エラーになります。</target>
        </trans-unit>
        <trans-unit id="8048a90dd5efc9f2d16380ccfdc5ae8a0c59d518" translate="yes" xml:space="preserve">
          <source>A key point to notice is that we don&amp;rsquo;t actually care about the document being stored in the table. We only create and update documents because that forces RethinkDB to create a change notification. These change notifications are the messages we want to send to subscribers. Ultimately, the table ends up with lots of documents that have whatever the last message happened to be inside them. But at no point do we read those documents directly as a subscriber. This is also why we update the &lt;code&gt;updated_on&lt;/code&gt; field, so that even if the document&amp;rsquo;s payload hasn&amp;rsquo;t changed, the document as a whole will change and a notification will be generated.</source>
          <target state="translated">注意すべき重要な点は、テーブルに格納されているドキュメントについては実際には気にしないということです。RethinkDBに変更通知を作成させるため、ドキュメントの作成と更新のみを行います。これらの変更通知は、サブスクライバーに送信するメッセージです。結局のところ、テーブルには、たまたま最後のメッセージが入っている大量のドキュメントが含まれています。しかし、購読者としてこれらのドキュメントを直接読むことは決してありません。これが、 &lt;code&gt;updated_on&lt;/code&gt; フィールドを更新する理由でもあります。これにより、ドキュメントのペイロードが変更されていなくても、ドキュメント全体が変更され、通知が生成されます。</target>
        </trans-unit>
        <trans-unit id="cd005c5fa838f674cba1488867221cf3dc7e49f2" translate="yes" xml:space="preserve">
          <source>A light abstraction layer over RethinkDB adding methods you &amp;ldquo;wished you had.&amp;rdquo;</source>
          <target state="translated">RethinkDB上の軽い抽象化レイヤーにより、「望んでいた」メソッドが追加されます。</target>
        </trans-unit>
        <trans-unit id="cf199661827ddb2c1d48018782ba0280f240a043" translate="yes" xml:space="preserve">
          <source>A light persistence framework for RethinkDB.</source>
          <target state="translated">RethinkDBのための軽快なパーシステンスフレームワーク。</target>
        </trans-unit>
        <trans-unit id="e5c458838167072d1411ee0107bf79b9afc5c0b7" translate="yes" xml:space="preserve">
          <source>A majority (greater than half) of replicas for the table must be available</source>
          <target state="translated">テーブルのレプリカの過半数(半分以上)が利用可能でなければならない</target>
        </trans-unit>
        <trans-unit id="8c534ebb5db5df1cac602a6e41637d1d1a18249a" translate="yes" xml:space="preserve">
          <source>A more complex example</source>
          <target state="translated">より複雑な例</target>
        </trans-unit>
        <trans-unit id="919c4ccf1b6e0902b903294a07f260c83dedb90a" translate="yes" xml:space="preserve">
          <source>A new RethinkDB cluster always has one user named &lt;code&gt;admin&lt;/code&gt;; this user always has all permissions at a global scope, and the user cannot be deleted. By default, the &lt;code&gt;admin&lt;/code&gt; user has no password. You can change this by updating the &lt;code&gt;admin&lt;/code&gt; user document, or by specifying the &lt;code&gt;--initial-password&lt;/code&gt;&lt;a href=&quot;../cli-options/index&quot;&gt;command line option&lt;/a&gt; on startup.</source>
          <target state="translated">新しいRethinkDBクラスターには、常に &lt;code&gt;admin&lt;/code&gt; という名前のユーザーが1人います。このユーザーは常にグローバルスコープですべての権限を持ち、ユーザーを削除することはできません。デフォルトでは、 &lt;code&gt;admin&lt;/code&gt; ユーザーにはパスワードがありません。これを変更するには、 &lt;code&gt;admin&lt;/code&gt; ユーザードキュメントを更新するか、起動時に &lt;code&gt;--initial-password&lt;/code&gt; &lt;a href=&quot;../cli-options/index&quot;&gt;コマンドラインオプション&lt;/a&gt;を指定します。</target>
        </trans-unit>
        <trans-unit id="dc8bd6d5f49c401c405ffc7ba82519b2d080d2c8" translate="yes" xml:space="preserve">
          <source>A noreply query is executed by passing the &lt;code&gt;noreply&lt;/code&gt; option to the &lt;a href=&quot;../run/index&quot;&gt;run&lt;/a&gt; command, indicating that &lt;code&gt;run()&lt;/code&gt; should not wait for the query to complete before returning. You may also explicitly wait for a noreply query to complete by using the &lt;a href=&quot;../noreply_wait/index&quot;&gt;noreplyWait&lt;/a&gt; command.</source>
          <target state="translated">noreplyクエリは、 &lt;code&gt;noreply&lt;/code&gt; オプションを&lt;a href=&quot;../run/index&quot;&gt;run&lt;/a&gt;コマンドに渡すことによって実行されます。run &lt;code&gt;run()&lt;/code&gt; は、クエリが完了するのを待ってから戻りません。&lt;a href=&quot;../noreply_wait/index&quot;&gt;noreplyWait&lt;/a&gt;コマンドを使用して、noreplyクエリが完了するのを明示的に待つこともできます。</target>
        </trans-unit>
        <trans-unit id="8ae22814e11fd8f1e6e99873f2b0e64ec9792251" translate="yes" xml:space="preserve">
          <source>A primary key other than &lt;code&gt;id&lt;/code&gt; can be specified with &lt;code&gt;--pkey&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;--pkey&lt;/code&gt; を使用すると、 &lt;code&gt;id&lt;/code&gt; 以外の主キーを指定できます。</target>
        </trans-unit>
        <trans-unit id="71e60156b75dfc034bc24e840fcec336b3298eca" translate="yes" xml:space="preserve">
          <source>A proxy node doesn&amp;rsquo;t store any data; instead it acts as a query router. This offers some performance advantages:</source>
          <target state="translated">プロキシノードはデータを格納しません。代わりに、クエリルーターとして機能します。これにより、パフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="bed635cf34a1d0e7299ed072f8cd1ed54746a231" translate="yes" xml:space="preserve">
          <source>A quick example</source>
          <target state="translated">簡単な例</target>
        </trans-unit>
        <trans-unit id="6b57b5bb56ed01fed3a26f0dc9816a82a6ad1755" translate="yes" xml:space="preserve">
          <source>A quick overview of the results</source>
          <target state="translated">簡単な結果の概要</target>
        </trans-unit>
        <trans-unit id="d254a0f71d1d47c55c65d73ab435f2d3a69c306b" translate="yes" xml:space="preserve">
          <source>A server can be given tags with the &lt;code&gt;--server-tag&lt;/code&gt; option on startup:</source>
          <target state="translated">起動時に &lt;code&gt;--server-tag&lt;/code&gt; オプションを使用してサーバーにタグを付けることができます。</target>
        </trans-unit>
        <trans-unit id="ef9a0fd067a069f8a981525ac99700b421453ab1" translate="yes" xml:space="preserve">
          <source>A shorter way to execute this query is to use &lt;a href=&quot;../count/index&quot;&gt;count&lt;/a&gt;.</source>
          <target state="translated">このクエリを実行する短い方法は、&lt;a href=&quot;../count/index&quot;&gt;count&lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="25825cb5a0c2d79aac7708fe474071bc681ff2f4" translate="yes" xml:space="preserve">
          <source>A shorter way to execute this query is to use &lt;a href=&quot;../max/index&quot;&gt;max&lt;/a&gt;.</source>
          <target state="translated">このクエリを実行する短い方法は、&lt;a href=&quot;../max/index&quot;&gt;max&lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="640037bbc9451505457405eded56d8b133c22082" translate="yes" xml:space="preserve">
          <source>A shorter way to execute this query is to use &lt;a href=&quot;count/index&quot;&gt;count&lt;/a&gt;.</source>
          <target state="translated">このクエリを実行する短い方法は、&lt;a href=&quot;count/index&quot;&gt;count&lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="4839f2fd3dd94a2ce4821a5c1a177070b572695c" translate="yes" xml:space="preserve">
          <source>A simple Docker image for RethinkDB.</source>
          <target state="translated">RethinkDB用のシンプルなDockerイメージです。</target>
        </trans-unit>
        <trans-unit id="70621a0f48951eebc4ae5652938bda7d1dff4f7b" translate="yes" xml:space="preserve">
          <source>A simple Pastie app.</source>
          <target state="translated">シンプルなPastieアプリ。</target>
        </trans-unit>
        <trans-unit id="ac67d735bb65921339e0e601e694eac628d913d0" translate="yes" xml:space="preserve">
          <source>A simple but powerful and extensible Object Document Mapper for RethinkDB. (Also see the &lt;a href=&quot;https://pypi.python.org/pypi/Remodel&quot;&gt;pip package&lt;/a&gt;.)</source>
          <target state="translated">RethinkDB用のシンプルだが強力で拡張可能なオブジェクトドキュメントマッパー。（&lt;a href=&quot;https://pypi.python.org/pypi/Remodel&quot;&gt;pipパッケージ&lt;/a&gt;も参照してください。）</target>
        </trans-unit>
        <trans-unit id="40cf8919ea34c404a49fa4a02115691af647ed4f" translate="yes" xml:space="preserve">
          <source>A simple example</source>
          <target state="translated">簡単な例</target>
        </trans-unit>
        <trans-unit id="937288f0e816329a979c9a266fb1923c2536d457" translate="yes" xml:space="preserve">
          <source>A simple example in Python:</source>
          <target state="translated">Pythonでの簡単な例です。</target>
        </trans-unit>
        <trans-unit id="bc152dfc80604b5e6478523e986591a6f3951c56" translate="yes" xml:space="preserve">
          <source>A store-agnostic object data mapper for Node.js with support for RethinkDB.</source>
          <target state="translated">RethinkDBをサポートしたNode.js用のストア非依存型オブジェクトデータマッパーです。</target>
        </trans-unit>
        <trans-unit id="0a510e62bdd6df6bac6db01f36adc46498e210a2" translate="yes" xml:space="preserve">
          <source>A table may have up to 64 shards.</source>
          <target state="translated">テーブルには最大64枚のシャードがあるかもしれません。</target>
        </trans-unit>
        <trans-unit id="f48895a8543044fc22fa3f47676b3693884b39a3" translate="yes" xml:space="preserve">
          <source>A table on the cluster is missing at least one replica. The &lt;code&gt;description&lt;/code&gt; string will depend on the roles the missing server(s) played in the table. If the table is not available for reads and/or writes, &lt;code&gt;critical&lt;/code&gt; will be &lt;code&gt;true&lt;/code&gt;; if the table can be both read from and written to, it will be &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">クラスターのテーブルに少なくとも1つのレプリカがありません。 &lt;code&gt;description&lt;/code&gt; 文字列は、テーブルに果たす役割欠落しているサーバー（複数可）に依存します。テーブルが読み取りや書き込みに使用できない場合、 &lt;code&gt;critical&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; になります。テーブルの読み取りと書き込みの両方が可能な場合は、 &lt;code&gt;false&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="849803a4d7a410bc181c945dd4cb827375b42768" translate="yes" xml:space="preserve">
          <source>A table will lose availability temporarily after &lt;code&gt;rebalance&lt;/code&gt; is called; use the &lt;a href=&quot;../wait/index&quot;&gt;wait&lt;/a&gt; command to wait for the table to become available again, or &lt;a href=&quot;../status/index&quot;&gt;status&lt;/a&gt; to check if the table is available for writing.</source>
          <target state="translated">&lt;code&gt;rebalance&lt;/code&gt; が呼び出された後、テーブルは一時的に可用性を失います。テーブルが再び使用可能になるのを待つには&lt;a href=&quot;../wait/index&quot;&gt;wait&lt;/a&gt;コマンドを使用し、テーブルが書き込み可能かどうかを確認するには&lt;a href=&quot;../status/index&quot;&gt;status&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="ab89d35a983a1cf9755d204a27b5332d28fc9286" translate="yes" xml:space="preserve">
          <source>A table will lose availability temporarily after &lt;code&gt;reconfigure&lt;/code&gt; is called; use the &lt;a href=&quot;../wait/index&quot;&gt;wait&lt;/a&gt; command to wait for the table to become available again, or &lt;a href=&quot;../status/index&quot;&gt;status&lt;/a&gt; to check if the table is available for writing.</source>
          <target state="translated">&lt;code&gt;reconfigure&lt;/code&gt; が呼び出された後、テーブルは一時的に可用性を失います。テーブルが再び使用可能になるのを待つには&lt;a href=&quot;../wait/index&quot;&gt;wait&lt;/a&gt;コマンドを使用し、テーブルが書き込み可能かどうかを確認するには&lt;a href=&quot;../status/index&quot;&gt;status&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="387273326f74c4c543073f73a99f41bd9c3e066d" translate="yes" xml:space="preserve">
          <source>A third option is to specify how many seconds to wait between squashes. Passing &lt;code&gt;squash: 5&lt;/code&gt; to the &lt;code&gt;changes&lt;/code&gt; command tells RethinkDB to squash changes together every five seconds. Depending on your application&amp;rsquo;s use case, this might reduce the load on the server. A number passed to &lt;code&gt;squash&lt;/code&gt; may be a float. Note that the requested interval is not guaranteed, but is rather a best effort.</source>
          <target state="translated">3番目のオプションは、スカッシュの間に待機する秒数を指定することです。渡す &lt;code&gt;squash: 5&lt;/code&gt; に &lt;code&gt;changes&lt;/code&gt; コマンドは、一緒にスカッシュの変更、5秒ごとにRethinkDBを伝えます。アプリケーションの使用例によっては、サーバーの負荷が軽減される場合があります。 &lt;code&gt;squash&lt;/code&gt; 渡される数値は、浮動小数点数である可能性があります。リクエストされた間隔は保証されていませんが、ベストエフォートです。</target>
        </trans-unit>
        <trans-unit id="df8abcb0fdb97dd60ce85d3221c8a8a46f00b11d" translate="yes" xml:space="preserve">
          <source>A typical document in the &lt;code&gt;posts&lt;/code&gt; table would look like this:</source>
          <target state="translated">&lt;code&gt;posts&lt;/code&gt; テーブルの一般的なドキュメントは次のようになります。</target>
        </trans-unit>
        <trans-unit id="ea11b582e396938b2a9993f2d047d8e549136a08" translate="yes" xml:space="preserve">
          <source>A web.py blog application.</source>
          <target state="translated">web.pyのブログアプリ。</target>
        </trans-unit>
        <trans-unit id="6ffe2fd5b73977736945ee09cd1dff287892c2d9" translate="yes" xml:space="preserve">
          <source>AGGREGATIONS</source>
          <target state="translated">AGGREGATIONS</target>
        </trans-unit>
        <trans-unit id="f2ad758ac7c17209f48acde3f5e4f71a90cfea21" translate="yes" xml:space="preserve">
          <source>AMI configuration</source>
          <target state="translated">AMI構成</target>
        </trans-unit>
        <trans-unit id="b276f94cd8d0e74a21de6e5939b8c10ca9a975d6" translate="yes" xml:space="preserve">
          <source>API Reference</source>
          <target state="translated">API リファレンス</target>
        </trans-unit>
        <trans-unit id="d6236f068d543e713c7020d809575c0443a95d2f" translate="yes" xml:space="preserve">
          <source>API documentation for &lt;code&gt;grant&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;grant&lt;/code&gt; APIドキュメント：</target>
        </trans-unit>
        <trans-unit id="89c25a6e98b7d12432623429744aea6cf501424a" translate="yes" xml:space="preserve">
          <source>API reference</source>
          <target state="translated">エーピーアイさんしょう</target>
        </trans-unit>
        <trans-unit id="5e9721fc8e371de49ea6e0eaf26f96866618f352" translate="yes" xml:space="preserve">
          <source>Abstract data types</source>
          <target state="translated">抽象的なデータ型</target>
        </trans-unit>
        <trans-unit id="d1c027cbc40dd6184144940a65ae09fa8b5fe8c6" translate="yes" xml:space="preserve">
          <source>Accept the self-signed SSL certificate. (How to do this is browser-dependent.)</source>
          <target state="translated">自己署名付きSSL証明書を受け入れます。(この方法はブラウザに依存します)。</target>
        </trans-unit>
        <trans-unit id="3a9f8039f037bd16e10d637f8263f7299e86df11" translate="yes" xml:space="preserve">
          <source>Accepts &lt;a href=&quot;https://github.com/google/re2/wiki/Syntax&quot;&gt;RE2 syntax&lt;/a&gt;. You can enable case-insensitive matching by prefixing the regular expression with &lt;code&gt;(?i)&lt;/code&gt;. See the linked RE2 documentation for more flags.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/google/re2/wiki/Syntax&quot;&gt;RE2構文を&lt;/a&gt;受け入れます。正規表現の前に &lt;code&gt;(?i)&lt;/code&gt; を付けることで、大文字と小文字を区別しないマッチングを有効にできます。その他のフラグについては、リンクされたRE2のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="633956adef4571a0b46746baee765485a33151a0" translate="yes" xml:space="preserve">
          <source>Access the system tables through the &lt;code&gt;rethinkdb&lt;/code&gt; database. These tables aren&amp;rsquo;t real RethinkDB document stores the way user-created tables are, but rather &amp;ldquo;table-like&amp;rdquo; interfaces to the system allowing most ReQL commands to be used for control. System tables cannot be created, dropped, reconfigured, or renamed.</source>
          <target state="translated">&lt;code&gt;rethinkdb&lt;/code&gt; データベースを介してシステムテーブルにアクセスします。これらのテーブルは、ユーザーが作成したテーブルのように実際のRethinkDBドキュメントストアではなく、ほとんどのReQLコマンドを制御に使用できるシステムへの「テーブルのような」インターフェイスです。システムテーブルを作成、削除、再構成、または名前変更することはできません。</target>
        </trans-unit>
        <trans-unit id="48f7ed988db55729ffd994b303676286b2d69dc6" translate="yes" xml:space="preserve">
          <source>Accessing HTTP APIs</source>
          <target state="translated">HTTP API へのアクセス</target>
        </trans-unit>
        <trans-unit id="b67bc8c167efc1fcf5e717140dd60d3a665c74e4" translate="yes" xml:space="preserve">
          <source>Accessing JSON APIs</source>
          <target state="translated">JSON APIへのアクセス</target>
        </trans-unit>
        <trans-unit id="b61d35fdc1e88b15df7e740307ca5cffb53cca0d" translate="yes" xml:space="preserve">
          <source>Accessing ReQL</source>
          <target state="translated">ReQLへのアクセス</target>
        </trans-unit>
        <trans-unit id="807659a6b78e7f6d6958d0799efa81e598489d25" translate="yes" xml:space="preserve">
          <source>Accessing nested fields</source>
          <target state="translated">入れ子になったフィールドへのアクセス</target>
        </trans-unit>
        <trans-unit id="f5b1d235c682e6d1c27aa20f2c97ea4c74e2e4fc" translate="yes" xml:space="preserve">
          <source>Add a couple points:</source>
          <target state="translated">2、3点追加します。</target>
        </trans-unit>
        <trans-unit id="4e0c0548918f535c4b61054cda98105ede8054ca" translate="yes" xml:space="preserve">
          <source>Add a geospatial index on the table (required for certain operations like &lt;code&gt;getNearest&lt;/code&gt;):</source>
          <target state="translated">テーブルに空間インデックスを追加します（ &lt;code&gt;getNearest&lt;/code&gt; などの特定の操作に必要）。</target>
        </trans-unit>
        <trans-unit id="acc14fcd0e24d8767d3bfaf409eef3a79f14e2fe" translate="yes" xml:space="preserve">
          <source>Add a several values to an array and return it as a set (an array with distinct values).</source>
          <target state="translated">配列に複数の値を追加して、それをセット(値が異なる配列)として返します。</target>
        </trans-unit>
        <trans-unit id="2cf56f40352635b7a4d1144a814c41a7edcee0f2" translate="yes" xml:space="preserve">
          <source>Add a value to an array and return it as a set (an array with distinct values).</source>
          <target state="translated">配列に値を追加して、それをセット(値が異なる配列)として返します。</target>
        </trans-unit>
        <trans-unit id="23234ec229a2c87a0d72f26fed60bb81479461a3" translate="yes" xml:space="preserve">
          <source>Adding a node to a RethinkDB cluster is as easy as starting a new RethinkDB process and pointing it to an existing node in the cluster. Everything else is handled by the system without any additional effort required from the user.</source>
          <target state="translated">RethinkDBクラスタへのノードの追加は、新しいRethinkDBプロセスを起動し、クラスタ内の既存のノードを指すのと同じくらい簡単です。それ以外のすべての処理は、ユーザーが追加の作業をすることなく、システムによって行われます。</target>
        </trans-unit>
        <trans-unit id="0e702c722b85fd500d1639455bf36d02cc7936bc" translate="yes" xml:space="preserve">
          <source>Adding/overwriting a field in a document</source>
          <target state="translated">ドキュメント内のフィールドの追加/上書き</target>
        </trans-unit>
        <trans-unit id="7910456908243df1424fd048180312b577679903" translate="yes" xml:space="preserve">
          <source>Additional blocks are allocated to store index trees for secondary indexes as well as for the primary index of each table. Roughly one block is used per 30 documents for each index; the exact number depends on the sizes of the index keys.</source>
          <target state="translated">追加のブロックは、セカンダリインデックスと各テーブルのプライマリインデックスのためのインデックスツリーを格納するために割り当てられています。各インデックスに対して大体30文書につき1つのブロックが使用されます;正確な数はインデックスキーのサイズに依存します。</target>
        </trans-unit>
        <trans-unit id="b8be3d1264310c3b8c848d4b90d5206179a40cc4" translate="yes" xml:space="preserve">
          <source>Administration</source>
          <target state="translated">Administration</target>
        </trans-unit>
        <trans-unit id="41c9c93ed7b1b40d1c03451865a4eab4fc6721fe" translate="yes" xml:space="preserve">
          <source>Administration tools</source>
          <target state="translated">管理ツール</target>
        </trans-unit>
        <trans-unit id="1fe17e82169153d3e2e96a63046f50d17af41411" translate="yes" xml:space="preserve">
          <source>Administrative operations</source>
          <target state="translated">管理業務</target>
        </trans-unit>
        <trans-unit id="f7d73e5d6f0b5c68b5528964b60905cb1e539834" translate="yes" xml:space="preserve">
          <source>Advanced configuration</source>
          <target state="translated">高度な設定</target>
        </trans-unit>
        <trans-unit id="2d84ce061ed301bbfc4fb2ccdba36c8cd1b8024a" translate="yes" xml:space="preserve">
          <source>After executing &lt;code&gt;set_loop_type&lt;/code&gt;, &lt;code&gt;r.connect&lt;/code&gt; will return a Tornado &lt;code&gt;Future&lt;/code&gt;, as will &lt;code&gt;r.run&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r.connect&lt;/code&gt; を実行する &lt;code&gt;set_loop_type&lt;/code&gt; 、r.runと同様に、r.connectはTornado &lt;code&gt;Future&lt;/code&gt; を &lt;code&gt;r.run&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f3589af61e6742c3e1276fd3c33f0d1bc5345bc0" translate="yes" xml:space="preserve">
          <source>After executing &lt;code&gt;set_loop_type&lt;/code&gt;, &lt;code&gt;r.connect&lt;/code&gt; will return a Twisted &lt;code&gt;Deferred&lt;/code&gt;, as will &lt;code&gt;r.run&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r.connect&lt;/code&gt; を実行した後、r.runと &lt;code&gt;set_loop_type&lt;/code&gt; 、r.connectはTwisted &lt;code&gt;Deferred&lt;/code&gt; を &lt;code&gt;r.run&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="2393857d3afee8355b8c269c19b08fb257cc4213" translate="yes" xml:space="preserve">
          <source>After importing your data, you&amp;rsquo;ll need to rebuild your secondary indexes.</source>
          <target state="translated">データをインポートした後、セカンダリインデックスを再構築する必要があります。</target>
        </trans-unit>
        <trans-unit id="9173bb141d8b86f28dff851a43e2639eb1348818" translate="yes" xml:space="preserve">
          <source>After processing this query, RethinkDB will add an additional post to Jean-Luc Picard&amp;rsquo;s document.</source>
          <target state="translated">このクエリを処理した後、RethinkDBはJean-Luc Picardのドキュメントに投稿を追加します。</target>
        </trans-unit>
        <trans-unit id="64ad2d6ea8349aeff55634efee1b6c15335bb761" translate="yes" xml:space="preserve">
          <source>After the rule has been applied, connect to your instances over SSH and change the RethinkDB configuration file (&lt;code&gt;/etc/rethinkdb/interfaces.d/default.conf&lt;/code&gt;) to join them.</source>
          <target state="translated">ルールが適用されたら、SSH経由でインスタンスに接続し、RethinkDB構成ファイル（ &lt;code&gt;/etc/rethinkdb/interfaces.d/default.conf&lt;/code&gt; ）を変更してそれらに参加させます。</target>
        </trans-unit>
        <trans-unit id="67e9dfc3345ed5049c9c9a58ab5a8cdac6049665" translate="yes" xml:space="preserve">
          <source>Again, anything valid in a JSON array is valid in RethinkDB: the elements may be any of the basic values, objects, or other arrays. Arrays in RethinkDB are loaded fully into memory before they&amp;rsquo;re returned to the user, so they&amp;rsquo;re inefficient at large sizes. RethinkDB defaults to supporting arrays of up to 100,000 elements; this may be set to a different value at runtime for reading by using the &lt;code&gt;array_limit&lt;/code&gt; option to &lt;a href=&quot;../../api/javascript/run/index&quot;&gt;run&lt;/a&gt;.</source>
          <target state="translated">ここでも、JSON配列で有効なものはすべてRethinkDBで有効です。要素は、基本的な値、オブジェクト、またはその他の配列のいずれかです。RethinkDBの配列は、ユーザーに返される前にメモリに完全に読み込まれるため、大きなサイズでは効率がよくありません。RethinkDBはデフォルトで最大100,000要素の配列をサポートします。これは、使用して読み取るため、実行時に異なる値に設定することができる &lt;code&gt;array_limit&lt;/code&gt; のためのオプション&lt;a href=&quot;../../api/javascript/run/index&quot;&gt;を実行します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b9ba037c0e4c06d192c83e08070b15787f07daaa" translate="yes" xml:space="preserve">
          <source>Aggregation</source>
          <target state="translated">Aggregation</target>
        </trans-unit>
        <trans-unit id="4a8b1808633c6dd8082fd60b1ddbc836f642461f" translate="yes" xml:space="preserve">
          <source>Akshay Chougule, a biologist working with large data sets, wrote a blog post about &lt;a href=&quot;http://datavu.blogspot.com/2014/08/useful-unix-commands-for-exploring-data.html&quot;&gt;Useful Unix commands for exploring data&lt;/a&gt;, showing ways to &amp;ldquo;query&amp;rdquo; comma-delimited plain text data sets with common shell commands. We thought it&amp;rsquo;d be interesting to do a similar article using ReQL in the Data Explorer, showing how it can be used for ad hoc queries.</source>
          <target state="translated">大きなデータセットを扱う生物学者であるAkshay Chouguleが、データ&lt;a href=&quot;http://datavu.blogspot.com/2014/08/useful-unix-commands-for-exploring-data.html&quot;&gt;を探索するための便利なUnixコマンド&lt;/a&gt;に関するブログ投稿を投稿し、一般的なシェルコマンドでカンマ区切りのプレーンテキストデータセットを「クエリ」する方法を示しました。データエクスプローラーでReQLを使用して同様の記事を作成し、アドホッククエリにどのように使用できるかを示すのは興味深いと思いました。</target>
        </trans-unit>
        <trans-unit id="613d7e2b25e4ca38ce134bdeb3d6c80d4fad7428" translate="yes" xml:space="preserve">
          <source>Akshay created a fictitious data set of movies; we&amp;rsquo;ll use &lt;a href=&quot;http://www.imdb.com/interfaces&quot;&gt;data&lt;/a&gt; from the &lt;a href=&quot;http://www.imdb.com/chart/top&quot;&gt;IMDb Top 250&lt;/a&gt;. (Note that we captured this on August 26, 2014, so the data will likely be different if you check it now.) The plain-text data from IMDb isn&amp;rsquo;t in &lt;em&gt;any&lt;/em&gt; format, but we&amp;rsquo;ve turned it into a JSON file available at &lt;a href=&quot;http://rethinkdb.com/sample/top-250-ratings.json&quot;&gt;http://rethinkdb.com/sample/top-250-ratings.json&lt;/a&gt;. (For the record, we converted it to a tab-delimited file first, used &lt;code&gt;rethinkdb import&lt;/code&gt; to get it into a database, fixed the column types and re-exported it. See &lt;a href=&quot;http://rethinkdb.com/docs/importing/&quot;&gt;Importing your data&lt;/a&gt; for details.)</source>
          <target state="translated">Akshayは、映画の架空のデータセットを作成しました。&lt;a href=&quot;http://www.imdb.com/chart/top&quot;&gt;IMDb Top 250&lt;/a&gt;からの&lt;a href=&quot;http://www.imdb.com/interfaces&quot;&gt;データ&lt;/a&gt;を使用します。（2014年8月26日にこれをキャプチャしたため、今すぐ確認するとデータが異なる可能性があります。）IMDbからのプレーンテキストデータは&lt;em&gt;どの&lt;/em&gt;形式で&lt;em&gt;も&lt;/em&gt;ありませんが、JSONファイルに変換しました&lt;a href=&quot;http://rethinkdb.com/sample/top-250-ratings.json&quot;&gt;http://rethinkdb.com/sample/top-250-ratings.jsonで&lt;/a&gt;入手できます。（レコードについては、最初にタブ区切りファイルに変換し、 &lt;code&gt;rethinkdb import&lt;/code&gt; を使用してデータベースに取り込み、列タイプを修正して再エクスポートしました。詳細については&lt;a href=&quot;http://rethinkdb.com/docs/importing/&quot;&gt;、データのインポート&lt;/a&gt;を参照してください。）&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6114ec7e6a620bfa471e4f330cc2ba47f4f9518e" translate="yes" xml:space="preserve">
          <source>All ReQL queries are automatically parallelized on the RethinkDB server as much as possible. Whenever possible, query execution is split across CPU cores, servers in the cluster, and even multiple datacenters. If you have large, complicated queries that require multiple stages of processing, RethinkDB will automatically break them up into stages, execute each stage in parallel, and combine data to return a complete result.</source>
          <target state="translated">すべてのReQLクエリは、可能な限りRethinkDBサーバ上で自動的に並列化されます。可能な限り、クエリの実行はCPUコア、クラスタ内のサーバー、さらには複数のデータセンターに分割されます。複数のステージの処理を必要とする大規模で複雑なクエリがある場合、RethinkDBは自動的にステージに分割し、各ステージを並列に実行し、データを組み合わせて完全な結果を返します。</target>
        </trans-unit>
        <trans-unit id="3303f74030734031b05f40df6edd8a2564c1efa7" translate="yes" xml:space="preserve">
          <source>All ReQL queries are chainable</source>
          <target state="translated">すべての ReQL クエリはチェーン可能</target>
        </trans-unit>
        <trans-unit id="ac506d7d6f3bcdf4afd8d72f6e480f29fa52f202" translate="yes" xml:space="preserve">
          <source>All ReQL queries follow this general structure. Now that we&amp;rsquo;ve created a table, let&amp;rsquo;s insert some data!</source>
          <target state="translated">すべてのReQLクエリは、この一般的な構造に従います。テーブルを作成したので、データを挿入しましょう！</target>
        </trans-unit>
        <trans-unit id="c06ac6b50803435531636814a0ce63642dc9fe6e" translate="yes" xml:space="preserve">
          <source>All RethinkDB servers have an &lt;code&gt;admin&lt;/code&gt; account with full access to the cluster, and by default this account has no password. (For full details on this topic, read &lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;Permissions and user accounts&lt;/a&gt;.) One of the first things you should do to secure a cluster is to assign a password to &lt;code&gt;admin&lt;/code&gt;. You can do this when the first server starts up by using the &lt;code&gt;--initial-password&lt;/code&gt;&lt;a href=&quot;../cli-options/index&quot;&gt;command line option&lt;/a&gt;, or by updating the &lt;code&gt;admin&lt;/code&gt; record with a new password in the user &lt;a href=&quot;../system-tables/index#users&quot;&gt;system table&lt;/a&gt;.</source>
          <target state="translated">すべてのRethinkDBサーバーには、クラスターへのフルアクセス権を持つ &lt;code&gt;admin&lt;/code&gt; アカウントがあり、デフォルトではこのアカウントにはパスワードがありません。（このトピックの詳細については、「&lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;権限とユーザーアカウント」を&lt;/a&gt;参照してください。）クラスターを保護するために最初に行うべきことの1つは、 &lt;code&gt;admin&lt;/code&gt; にパスワードを割り当てることです。これは、最初のサーバーの起動時に &lt;code&gt;--initial-password&lt;/code&gt; &lt;a href=&quot;../cli-options/index&quot;&gt;コマンドラインオプション&lt;/a&gt;を使用するか、ユーザー&lt;a href=&quot;../system-tables/index#users&quot;&gt;システムテーブルの&lt;/a&gt;新しいパスワードで &lt;code&gt;admin&lt;/code&gt; レコードを更新することで実行できます。</target>
        </trans-unit>
        <trans-unit id="4e1b92dc3695815b8f1d9c5eaa5ebb44219e5539" translate="yes" xml:space="preserve">
          <source>All documents in a table</source>
          <target state="translated">表の中のすべての文書</target>
        </trans-unit>
        <trans-unit id="b00102b9715479699488acea6b36a16d535853d9" translate="yes" xml:space="preserve">
          <source>All errors are subclassed from the &lt;code&gt;ReqlError&lt;/code&gt; class.</source>
          <target state="translated">すべてのエラーは &lt;code&gt;ReqlError&lt;/code&gt; クラスからサブクラス化されます。</target>
        </trans-unit>
        <trans-unit id="ced1c1be6c6bf08b6ae9d9d15fba1f1c7f24a33d" translate="yes" xml:space="preserve">
          <source>All modifications made via the &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt; commands are always atomic with respect to a single document. For example, let&amp;rsquo;s say we&amp;rsquo;d like to atomically update a view count for a page if the field &lt;code&gt;countable&lt;/code&gt; is set to true, and get back the old and new results in a single query. We can perform this operation as follows:</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; コマンドと &lt;code&gt;replace&lt;/code&gt; コマンドを使用して行われたすべての変更は、単一のドキュメントに対して常にアトミックです。たとえば、フィールド &lt;code&gt;countable&lt;/code&gt; がtrueに設定されている場合、ページのビューカウントをアトミックに更新し、1つのクエリで古い結果と新しい結果を取得するとします。この操作は次のように実行できます。</target>
        </trans-unit>
        <trans-unit id="82b113abbbfa83c5d71511bdc69e144c867d369c" translate="yes" xml:space="preserve">
          <source>All of the normal comparison operators are defined on times:</source>
          <target state="translated">通常の比較演算子はすべて時間に定義されています。</target>
        </trans-unit>
        <trans-unit id="236972bdf96d2c41e0a830e3a1b9ffbfd74365da" translate="yes" xml:space="preserve">
          <source>All of the response notes involve changefeeds; read &lt;a href=&quot;../changefeeds/javascript/index&quot;&gt;Changefeeds in RethinkDB&lt;/a&gt; for more detailed information.</source>
          <target state="translated">すべての応答メモには変更フィードが含まれます。読み&lt;a href=&quot;../changefeeds/javascript/index&quot;&gt;RethinkDBでChangefeedsの&lt;/a&gt;詳細については。</target>
        </trans-unit>
        <trans-unit id="1a84df50466eae7be9c4eacc891053eafa5dc4f1" translate="yes" xml:space="preserve">
          <source>All of the servers in a RethinkDB cluster may be given zero or more &lt;em&gt;tags&lt;/em&gt; that can be used in table configurations to map replicas to servers specified by tag.</source>
          <target state="translated">RethinkDBクラスター内のすべてのサーバーには、レプリカをタグで指定されたサーバーにマップするためにテーブル構成で使用できる0個以上の&lt;em&gt;タグ&lt;/em&gt;を付与できます。</target>
        </trans-unit>
        <trans-unit id="93ec90d5c9376f582d353b4f68afca705ec1d311" translate="yes" xml:space="preserve">
          <source>All the status tables are read-only. Some of the information in status tables is also returned in config tables (such as object names and UUIDs).</source>
          <target state="translated">ステータステーブルはすべて読み取り専用です。ステータステーブルの情報の一部は、コンフィグテーブルにも返されます(オブジェクト名やUUIDなど)。</target>
        </trans-unit>
        <trans-unit id="eef86b948e6e5ac6d867ce0f3186825517686c83" translate="yes" xml:space="preserve">
          <source>Allows using ECMAScript 6 generators with RethinkDB callbacks.</source>
          <target state="translated">ECMAScript 6 ジェネレータを RethinkDB コールバックで使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="35d79e2a383aa9deb4a9db48ea01d2fef0d59218" translate="yes" xml:space="preserve">
          <source>Almost all ReQL operations are chainable. You can think of the &lt;code&gt;.&lt;/code&gt; operator similarly to how you&amp;rsquo;d think of a Unix pipe. You select the data from the table and pipe it into a command that transforms it. You can continue chaining transformers until your query is done. In ReQL, data flows from left to right.</source>
          <target state="translated">ほとんどすべてのReQL操作は連鎖可能です。あなたは考えることができます &lt;code&gt;.&lt;/code&gt; 演算子は、Unixパイプの考え方と似ています。テーブルからデータを選択し、それを変換するコマンドにパイプします。クエリが完了するまで、トランスフォーマーをチェーンし続けることができます。ReQLでは、データは左から右に流れます。</target>
        </trans-unit>
        <trans-unit id="7b38be2572c821b34c15e177333a20c29d2bec37" translate="yes" xml:space="preserve">
          <source>Almost done. All we have to do now is create a file &lt;code&gt;group.file&lt;/code&gt; with this the following content:</source>
          <target state="translated">ほぼ完了しました。これから行う必要があるのは、次の内容の &lt;code&gt;group.file&lt;/code&gt; ファイルを作成することだけです。</target>
        </trans-unit>
        <trans-unit id="c130f58939020d82520c528a5032d22eac52c506" translate="yes" xml:space="preserve">
          <source>Also, another caveat: the nested field syntax doesn&amp;rsquo;t guarantee identical schemas between documents that it returns. It&amp;rsquo;s possible to describe a path that matches objects that have different schema, as seen in this simple example.</source>
          <target state="translated">また、別の警告：ネストされたフィールド構文は、それが返すドキュメント間で同一のスキーマを保証しません。この簡単な例にあるように、スキーマが異なるオブジェクトに一致するパスを記述することができます。</target>
        </trans-unit>
        <trans-unit id="42f80ea4911ab3976038a6acc8617cd9ac8f2a6d" translate="yes" xml:space="preserve">
          <source>Also, predicates must evaluate document fields. They cannot evaluate &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;secondary indexes&lt;/a&gt;.</source>
          <target state="translated">また、述語はドキュメントフィールドを評価する必要があります。&lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;セカンダリインデックスを&lt;/a&gt;評価することはできません。</target>
        </trans-unit>
        <trans-unit id="fd754a1db1ea7867f35f03db29d1ca78cd96bcb6" translate="yes" xml:space="preserve">
          <source>Also, read about:</source>
          <target state="translated">についても読んでみてください。</target>
        </trans-unit>
        <trans-unit id="d94949dfadb50efef9aa2d6eb7a4ede95be9c815" translate="yes" xml:space="preserve">
          <source>Also, you can use &lt;code&gt;changes&lt;/code&gt; with each query rather than after the whole.</source>
          <target state="translated">また、全体ではなく、各クエリで &lt;code&gt;changes&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="7863aa00847de790dbc3a48ed8da77557bce86d3" translate="yes" xml:space="preserve">
          <source>Alternatively, you can build a predicate with the &lt;code&gt;and&lt;/code&gt; command, and pass it to &lt;code&gt;filter&lt;/code&gt;:</source>
          <target state="translated">または、 &lt;code&gt;and&lt;/code&gt; コマンドを使用して述語を作成し、それを &lt;code&gt;filter&lt;/code&gt; に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="60ea456d4bf78cf96ff34279e0b39250b2e59c49" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use promises.</source>
          <target state="translated">あるいは、プロミスを利用することもできます。</target>
        </trans-unit>
        <trans-unit id="f03c8410144732f9d9b8ccd9f1dd43aef9acdd9c" translate="yes" xml:space="preserve">
          <source>Alternatively, you may use RethinkDB&amp;rsquo;s built-in &lt;a href=&quot;../../../docs/security/index&quot;&gt;TLS support&lt;/a&gt;.</source>
          <target state="translated">または、RethinkDBの組み込み&lt;a href=&quot;../../../docs/security/index&quot;&gt;TLSサポートを&lt;/a&gt;使用することもできます。</target>
        </trans-unit>
        <trans-unit id="878e75024b2679b43fe2a1793c04c566fb67bc5c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Exchange&lt;/code&gt; is created by both publishers and subscribers. Publishers put messages into the exchange, and subscribers listen to messages on the exchange.</source>
          <target state="translated">アン &lt;code&gt;Exchange&lt;/code&gt; パブリッシャとサブスクライバの両方で作成されています。パブリッシャーはメッセージをエクスチェンジに入れ、サブスクライバーはエクスチェンジでメッセージを聞きます。</target>
        </trans-unit>
        <trans-unit id="687a20ac3798878f7cc75ef20a474f5258b70902" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;orderBy&lt;/code&gt; command that uses a secondary index cannot be chained after &lt;code&gt;getAll&lt;/code&gt;. You can only chain it after a &lt;code&gt;table&lt;/code&gt; command. However, you can chain &lt;code&gt;orderBy&lt;/code&gt; after a &lt;code&gt;between&lt;/code&gt; command provided it uses the same index.</source>
          <target state="translated">セカンダリインデックスを使用する &lt;code&gt;orderBy&lt;/code&gt; コマンドは、 &lt;code&gt;getAll&lt;/code&gt; の後にチェーンすることはできません。 &lt;code&gt;table&lt;/code&gt; コマンドの後にのみチェーンできます。ただし、同じインデックスを使用する場合は、 &lt;code&gt;between&lt;/code&gt; コマンドの後に &lt;code&gt;orderBy&lt;/code&gt; をチェーンできます。</target>
        </trans-unit>
        <trans-unit id="089a23c2fa3df18b9282cbff60af4550ecc3a8a5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;orderBy&lt;/code&gt; operation (without an index) can&amp;rsquo;t be distributed across the shards for parallel execution&amp;mdash;it needs all the data in the table to perform a sort.</source>
          <target state="translated">AN &lt;code&gt;orderBy&lt;/code&gt; （インデックスなし）の動作は、並列実行、それはテーブル内のすべてのデータが並べ替えを実行する必要があるためシャードに分散することができません。</target>
        </trans-unit>
        <trans-unit id="96ce4d1796cf45024f180134db21f4f69e0a38bc" translate="yes" xml:space="preserve">
          <source>An ORM designed to emulate the most common usages of Django&amp;rsquo;s database abstraction.</source>
          <target state="translated">Djangoのデータベース抽象化の最も一般的な使用法をエミュレートするように設計されたORM。</target>
        </trans-unit>
        <trans-unit id="ccdfc9d43d7aeef827539feeecd2be90fb3c0be2" translate="yes" xml:space="preserve">
          <source>An administrative interface for your data (like phpMyAdmin for RethinkDB).</source>
          <target state="translated">データの管理インターフェイス (RethinkDB の phpMyAdmin のようなもの)。</target>
        </trans-unit>
        <trans-unit id="5af7ff2c917a6871370b7806f695c9da3ed44665" translate="yes" xml:space="preserve">
          <source>An alternative Node.js driver with native promises and a connection pool.</source>
          <target state="translated">ネイティブプロミスと接続プールを持つ代替的な Node.js ドライバです。</target>
        </trans-unit>
        <trans-unit id="548e0b21c5c86f4ac6b486712fe486dacf22afcb" translate="yes" xml:space="preserve">
          <source>An array of JSON documents.</source>
          <target state="translated">JSON文書の配列。</target>
        </trans-unit>
        <trans-unit id="da8ef814ce8bb1f9f869566ec60c715a870e13f8" translate="yes" xml:space="preserve">
          <source>An equivalent query using promises.</source>
          <target state="translated">プロミスを使用した同等のクエリ。</target>
        </trans-unit>
        <trans-unit id="d8d2f79a0e2838e82b7a953c350518317e098f3b" translate="yes" xml:space="preserve">
          <source>An error will be raised if the old index name does not exist, if the new index name is already in use and &lt;code&gt;overwrite&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, or if either the old or new index name are the same as the primary key field name.</source>
          <target state="translated">古いインデックス名が存在しない場合、新しいインデックス名がすでに使用されており、 &lt;code&gt;overwrite&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; である場合、または古いインデックス名または新しいインデックス名が主キーフィールド名と同じである場合は、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="1e35c96ab9e359b10c3fe12321188504c5386af0" translate="yes" xml:space="preserve">
          <source>An example with group</source>
          <target state="translated">グループを使用した例</target>
        </trans-unit>
        <trans-unit id="9ddd5f8367304f323865108502252ff58433bf58" translate="yes" xml:space="preserve">
          <source>An optional &lt;strong&gt;group&lt;/strong&gt; operation which partitions the elements of the sequence into multiple groups.</source>
          <target state="translated">シーケンスの要素を複数のグループに分割するオプションの&lt;strong&gt;グループ&lt;/strong&gt;操作。</target>
        </trans-unit>
        <trans-unit id="2ccfaa4dff351d07369bdecdbd3e84e0f1e7d23c" translate="yes" xml:space="preserve">
          <source>Analysis of the 2012 US presidential elections.</source>
          <target state="translated">2012年のアメリカ大統領選挙の分析。</target>
        </trans-unit>
        <trans-unit id="0a823cad44209a53553a86aa90f704e3f99a280a" translate="yes" xml:space="preserve">
          <source>Analytic queries</source>
          <target state="translated">分析クエリ</target>
        </trans-unit>
        <trans-unit id="a9251ae19e0900a00bc07560cfc6a327067ae00b" translate="yes" xml:space="preserve">
          <source>And again, we sum the posts with &lt;code&gt;reduce&lt;/code&gt;, which produces totals for each group this time:</source>
          <target state="translated">そして再び、投稿を &lt;code&gt;reduce&lt;/code&gt; で合計します。これにより、今回は各グループの合計が生成されます。</target>
        </trans-unit>
        <trans-unit id="27daf8e5270ff986917e2e236adfeff9fc67c3f7" translate="yes" xml:space="preserve">
          <source>And an equivalent example in JavaScript:</source>
          <target state="translated">そして、JavaScriptでの同等の例。</target>
        </trans-unit>
        <trans-unit id="41a1ead72298228ca3a3a3b3638d6a586805849f" translate="yes" xml:space="preserve">
          <source>And create the service file, &lt;code&gt;/usr/lib/systemd/system/rethinkdb@.service&lt;/code&gt;:</source>
          <target state="translated">そして、サービスファイル &lt;code&gt;/usr/lib/systemd/system/rethinkdb@.service&lt;/code&gt; を作成します：</target>
        </trans-unit>
        <trans-unit id="e81e837476066da20baeefef0507a8a3cccda6fe" translate="yes" xml:space="preserve">
          <source>And here is example data for the &lt;code&gt;authors_posts&lt;/code&gt; table:</source>
          <target state="translated">そして、 &lt;code&gt;authors_posts&lt;/code&gt; テーブルのサンプルデータを次に示します。</target>
        </trans-unit>
        <trans-unit id="1c59a1c380337d66c6721d5614b635adc3651250" translate="yes" xml:space="preserve">
          <source>And here&amp;rsquo;s an example document in the &lt;code&gt;companies&lt;/code&gt; table:</source>
          <target state="translated">そして、これが &lt;code&gt;companies&lt;/code&gt; テーブルのサンプルドキュメントです：</target>
        </trans-unit>
        <trans-unit id="4b57305f4e5d34c77dd63e6ca79a8c4b50284565" translate="yes" xml:space="preserve">
          <source>And just for kicks, ReQL can do math!</source>
          <target state="translated">そして、ちょっとしたことですが、ReQLは数学ができます。</target>
        </trans-unit>
        <trans-unit id="f3035079b78f1cb4565f32ede6f8b8bc6d93f41b" translate="yes" xml:space="preserve">
          <source>And reconfiguring a table can be done the &lt;a href=&quot;https://rethinkdb.com/api/python/reconfigure&quot;&gt;reconfigure&lt;/a&gt; command.</source>
          <target state="translated">そして、テーブルを再構成するには、&lt;a href=&quot;https://rethinkdb.com/api/python/reconfigure&quot;&gt;reconfigure&lt;/a&gt;コマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="8a9f680669497d4401b019edf4c565085e91a1b3" translate="yes" xml:space="preserve">
          <source>And sum the posts with &lt;code&gt;reduce&lt;/code&gt;:</source>
          <target state="translated">そして、 &lt;code&gt;reduce&lt;/code&gt; で投稿を合計します：</target>
        </trans-unit>
        <trans-unit id="5cbd765369f5cc942fa92205f9750698ef893c99" translate="yes" xml:space="preserve">
          <source>And that&amp;rsquo;s it!</source>
          <target state="translated">以上です！</target>
        </trans-unit>
        <trans-unit id="bf3d18b8dbcb32a3e46b514b44f58b86077ce12c" translate="yes" xml:space="preserve">
          <source>And there&amp;rsquo;s more! You can filter on fields of objects inside a list. Suppose you wanted just the dates and senders of notes to Bob:</source>
          <target state="translated">そして、もっとあります！リスト内のオブジェクトのフィールドでフィルタリングできます。ボブへのメモの日付と送信者だけが必要だとします。</target>
        </trans-unit>
        <trans-unit id="81ccd56b51d9e85cbece1c5ee4babc1e7f0416f4" translate="yes" xml:space="preserve">
          <source>And you will get back:</source>
          <target state="translated">そして、必ず戻ってきます。</target>
        </trans-unit>
        <trans-unit id="6f0d1ee33dbf214d046dfc783742f183623eae1f" translate="yes" xml:space="preserve">
          <source>And, of course, we can use &lt;code&gt;count&lt;/code&gt; to shorten that. We can actually shorten it even more: ReQL will let you provide &lt;code&gt;group&lt;/code&gt; with the name of the field rather than a lambda function. So the simplified function is:</source>
          <target state="translated">もちろん、 &lt;code&gt;count&lt;/code&gt; を使用して短縮することもできます。実際にはさらに短くすることができます。ReQLを使用すると、ラムダ関数ではなくフィールドの名前を &lt;code&gt;group&lt;/code&gt; 提供できます。したがって、簡略化された関数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7be54da4aeef061feb2dd88f21e1e293d3e62c45" translate="yes" xml:space="preserve">
          <source>Angular.js</source>
          <target state="translated">Angular.js</target>
        </trans-unit>
        <trans-unit id="462519e135281467088215ccc649f512ae9b84ce" translate="yes" xml:space="preserve">
          <source>Anonymous functions</source>
          <target state="translated">匿名機能</target>
        </trans-unit>
        <trans-unit id="82147d0e81cec9fe7f99273cbe85b60105b27f26" translate="yes" xml:space="preserve">
          <source>Another way to create a database is through the web UI. You can reach the web UI at &lt;code&gt;http://HOST:8080&lt;/code&gt;. Click on the &lt;em&gt;Tables&lt;/em&gt; tab at the top and then use the &lt;em&gt;Add Database&lt;/em&gt; button.</source>
          <target state="translated">データベースを作成するもう1つの方法は、Web UIを使用することです。 &lt;code&gt;http://HOST:8080&lt;/code&gt; でWeb UIにアクセスできます。上部の[ &lt;em&gt;テーブル&lt;/em&gt; ]タブをクリックし、[ &lt;em&gt;データベース&lt;/em&gt;の&lt;em&gt;追加&lt;/em&gt; ]ボタンを使用します。</target>
        </trans-unit>
        <trans-unit id="4558c4835bf7d9cfced76738fef68a662acf93c3" translate="yes" xml:space="preserve">
          <source>Another way to create a new table is to use the web UI. You can reach the web UI at &lt;code&gt;http://HOST:8080&lt;/code&gt;. Click on the &lt;em&gt;Tables&lt;/em&gt; tab at the top of the page and then use the &lt;em&gt;Add Table&lt;/em&gt; button.</source>
          <target state="translated">新しいテーブルを作成する別の方法は、Web UIを使用することです。 &lt;code&gt;http://HOST:8080&lt;/code&gt; でWeb UIにアクセスできます。ページ上部の[ &lt;em&gt;テーブル&lt;/em&gt; ]タブをクリックし、[ &lt;em&gt;テーブル&lt;/em&gt;の&lt;em&gt;追加&lt;/em&gt; ]ボタンを使用します。</target>
        </trans-unit>
        <trans-unit id="5ae413eb61ef3cbb095919a994b128a8cad4546d" translate="yes" xml:space="preserve">
          <source>Any command that requires the results from the shards to be combined on the server executing the query will finish executing on that server rather than being distributed. Optimize your queries by putting commands that can execute in parallel &lt;em&gt;before&lt;/em&gt; commands that combine the result set whenever possible.</source>
          <target state="translated">クエリを実行するサーバーでシャードの結果を組み合わせる必要があるコマンドは、分散されるのではなく、そのサーバーでの実行が終了します。可能な限り結果セットを組み合わせるコマンドの&lt;em&gt;前に&lt;/em&gt;、並行して実行できるコマンドを配置して、クエリを最適化します。</target>
        </trans-unit>
        <trans-unit id="6c46b476ed368e50a936c21b028299e3455a947c" translate="yes" xml:space="preserve">
          <source>Any query, nested or otherwise, can be written with an anonymous function instead of &lt;code&gt;row&lt;/code&gt;. (The official Ruby and Java drivers don&amp;rsquo;t include &lt;code&gt;row&lt;/code&gt; at all.)</source>
          <target state="translated">クエリは、ネストされているかどうかにかかわらず、 &lt;code&gt;row&lt;/code&gt; の代わりに無名関数で記述できます。（公式のRubyおよびJavaドライバーには &lt;code&gt;row&lt;/code&gt; がまったく含まれていません。）</target>
        </trans-unit>
        <trans-unit id="bba299eace8d53c539e4aeba1813ec5e451f2436" translate="yes" xml:space="preserve">
          <source>Any specified arguments must be integers, or a &lt;code&gt;ReqlRuntimeError&lt;/code&gt; will be thrown. If the start value is equal or to higher than the end value, no error will be thrown but a zero-element stream will be returned.</source>
          <target state="translated">指定する引数は整数である必要があります。整数でない場合、 &lt;code&gt;ReqlRuntimeError&lt;/code&gt; がスローされます。開始値が終了値以上の場合、エラーはスローされませんが、ゼロ要素のストリームが返されます。</target>
        </trans-unit>
        <trans-unit id="32339d592a273a95a82e728b6667f2b078b3afdf" translate="yes" xml:space="preserve">
          <source>Any update to the authors document atomically updates both the author data and the posts data.</source>
          <target state="translated">著者ドキュメントの更新は、著者データと投稿データの両方をアトミックに更新します。</target>
        </trans-unit>
        <trans-unit id="91b3d268b855ee1e8768093595d82ef7320e495d" translate="yes" xml:space="preserve">
          <source>Any valid JSON object is a valid RethinkDB object, so values can be any of the basic values, arrays, or other objects. Documents in a RethinkDB database are objects. Like JSON, key names must be strings, not integers.</source>
          <target state="translated">有効なJSONオブジェクトはすべて有効なRethinkDBオブジェクトなので、値は基本的な値、配列、その他のオブジェクトのいずれかになります。RethinkDBデータベース内のドキュメントはオブジェクトです。JSONと同様に、キー名は整数ではなく文字列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="2d1d17d8fc951d972f691336747457d4d1aff96b" translate="yes" xml:space="preserve">
          <source>Append a value to an array.</source>
          <target state="translated">配列に値を追加します。</target>
        </trans-unit>
        <trans-unit id="f42e09360e8b6714364cd59a7c5899d2dcb4c16a" translate="yes" xml:space="preserve">
          <source>Apply a function to a sequence in order, maintaining state via an accumulator. The &lt;code&gt;fold&lt;/code&gt; command returns either a single value or a new sequence.</source>
          <target state="translated">シーケンスに関数を順番に適用し、アキュムレータを介して状態を維持します。 &lt;code&gt;fold&lt;/code&gt; コマンドが返す単一の値または新しい配列のいずれか。</target>
        </trans-unit>
        <trans-unit id="0a89342e9fcb31a038f4068e38847b411ea691af" translate="yes" xml:space="preserve">
          <source>Arch Linux</source>
          <target state="translated">アーチリナックス</target>
        </trans-unit>
        <trans-unit id="5cb3007b9e532397f031625a39530433bb4bc818" translate="yes" xml:space="preserve">
          <source>Architecture FAQ</source>
          <target state="translated">建築FAQ</target>
        </trans-unit>
        <trans-unit id="bd17e18cb5c6173bb8e6f5df6b2de0b0cac00d3a" translate="yes" xml:space="preserve">
          <source>Architecture details</source>
          <target state="translated">建築の詳細</target>
        </trans-unit>
        <trans-unit id="07a722f4e9e6599e31b9313cc6fbeccbe1da9f82" translate="yes" xml:space="preserve">
          <source>Are you running RethinkDB in a VM?</source>
          <target state="translated">VMでRethinkDBを実行していますか?</target>
        </trans-unit>
        <trans-unit id="a082966ed5ac44f21ff5e1a6b9712060f760fa15" translate="yes" xml:space="preserve">
          <source>Arguments passed to the &lt;code&gt;do&lt;/code&gt; function must be basic data types, and cannot be streams or selections. (Read about &lt;a href=&quot;../../../docs/data-types/index&quot;&gt;ReQL data types&lt;/a&gt;.) While the arguments will all be evaluated before the function is executed, they may be evaluated in any order, so their values should not be dependent on one another. The type of &lt;code&gt;do&lt;/code&gt;&amp;rsquo;s result is the type of the value returned from the function or last expression.</source>
          <target state="translated">&lt;code&gt;do&lt;/code&gt; 関数に渡される引数は、基本的なデータ型である必要があり、ストリームや選択であってはなりません。（&lt;a href=&quot;../../../docs/data-types/index&quot;&gt;ReQLデータ型&lt;/a&gt;についてお読みください。）引数はすべて関数が実行される前に評価されますが、それらは任意の順序で評価される可能性があるため、それらの値は互いに依存してはなりません。タイプ &lt;code&gt;do&lt;/code&gt; の結果は、関数または最後の式から返された値の型です。</target>
        </trans-unit>
        <trans-unit id="56e6c9587d60cd4331f09b7c485593aa93ed1af3" translate="yes" xml:space="preserve">
          <source>Arrays (and strings) sort lexicographically. Objects are coerced to arrays before sorting. Strings are sorted by UTF-8 codepoint and do not support Unicode collations.</source>
          <target state="translated">配列(および文字列)は辞書的にソートされます。オブジェクトは、並べ替えの前に配列に強制的に並べ替えられます。文字列はUTF-8のコードポイントでソートされ、Unicodeの照合はサポートしていません。</target>
        </trans-unit>
        <trans-unit id="5c1288bb8e44092d20dadd301618b133eaff59c4" translate="yes" xml:space="preserve">
          <source>Arrays, however, are a special case: since ReQL commands (as described above) are sent as arrays, you must send data arrays as arguments to the &lt;code&gt;MAKE_ARRAY&lt;/code&gt; command. So the array</source>
          <target state="translated">ただし、配列は特殊なケースです。ReQLコマンド（前述のとおり）は配列として送信されるため、 &lt;code&gt;MAKE_ARRAY&lt;/code&gt; コマンドの引数としてデータ配列を送信する必要があります。だから配列</target>
        </trans-unit>
        <trans-unit id="67485eed7b4382a0f7a03046053240c0672e09d2" translate="yes" xml:space="preserve">
          <source>As a final example, we&amp;rsquo;ll use an object as the topic. Using an object as the topic allows us a richer hierarchical structure, rather than keeping them in a flat structure like an array. This provides us with maximum flexibility in message routing.</source>
          <target state="translated">最後の例として、トピックとしてオブジェクトを使用します。オブジェクトをトピックとして使用すると、配列のようにフラットな構造に保つのではなく、より豊かな階層構造が可能になります。これにより、メッセージルーティングの柔軟性が最大限に高まります。</target>
        </trans-unit>
        <trans-unit id="8d70b89c953907792ea9149b4948ea90d22179c1" translate="yes" xml:space="preserve">
          <source>As a function, &lt;code&gt;page&lt;/code&gt; takes one parameter, an object of the format:</source>
          <target state="translated">関数として、 &lt;code&gt;page&lt;/code&gt; は1つのパラメーター、形式のオブジェクトを受け取ります。</target>
        </trans-unit>
        <trans-unit id="f37a969afa06e6673f7a489559988379137182d8" translate="yes" xml:space="preserve">
          <source>As a result, we of course get the best science fiction show in existence.</source>
          <target state="translated">その結果、もちろん現存する最高のSF番組を手に入れることができました。</target>
        </trans-unit>
        <trans-unit id="905be4a3f15d2da012f4655ffcc91a0f8b0334ee" translate="yes" xml:space="preserve">
          <source>As a variation of this workload, we also tested scalability in the outdated read mode. In this mode, we make the compromise of a higher chance of slightly outdated read results for additional performance, as read operations can be handled directly by secondary replicas. A typical application that exemplifies this kind of access pattern would be an asynchronous cache.</source>
          <target state="translated">このワークロードのバリエーションとして、古い読み取りモードでのスケーラビリティもテストしました。このモードでは、読み取り操作がセカンダリレプリカによって直接処理されるため、パフォーマンスを向上させるために、わずかに古い読み取り結果が発生する可能性が高くなるという妥協をしています。この種のアクセスパターンを例示する典型的なアプリケーションは、非同期キャッシュです。</target>
        </trans-unit>
        <trans-unit id="f4fea1bdb0d3a79476e8492fcca2ec82cb28234f" translate="yes" xml:space="preserve">
          <source>As before, we need to create a RabbitMQ connection and channel, and we&amp;rsquo;ll need to assert that the exchange exists:</source>
          <target state="translated">前と同様に、RabbitMQ接続とチャネルを作成する必要があり、交換が存在することをアサートする必要があります。</target>
        </trans-unit>
        <trans-unit id="cae8a09407711552e9aabe90ccbfdbaa90e10731" translate="yes" xml:space="preserve">
          <source>As mentioned above, the repubsub library is built using RethinkDB changefeeds. Briefly, here&amp;rsquo;s how it works:</source>
          <target state="translated">上記のように、repubsubライブラリはRethinkDB changefeedsを使用して構築されています。簡単に説明すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="bbd18cda89737e16e06561e56a5efd5132b27c40" translate="yes" xml:space="preserve">
          <source>As systemd supports multiple instances on the same server, you simply need to create multiple &lt;code&gt;.conf&lt;/code&gt; files in &lt;code&gt;/etc/rethinkdb/instances.d&lt;/code&gt;. This may be desirable for isolating databases for separate applications running on the same server, or for testing purposes. (There is no performance gain from running multiple nodes of the same cluster on the same physical machine.)</source>
          <target state="translated">同じサーバー上にsystemdサポート複数のインスタンスとして、あなたは、単に複数作成する必要がある &lt;code&gt;.conf&lt;/code&gt; 内のファイルを &lt;code&gt;/etc/rethinkdb/instances.d&lt;/code&gt; 。これは、同じサーバーで実行されている個別のアプリケーションのデータベースを分離する場合や、テストの目的で望ましい場合があります。（同じ物理マシンで同じクラスターの複数のノードを実行してもパフォーマンスは向上しません。）</target>
        </trans-unit>
        <trans-unit id="79f40bb2b8fd158e6951c9b085aa2537141a8754" translate="yes" xml:space="preserve">
          <source>As the &lt;strong&gt;Source&lt;/strong&gt;, enter the id of the security group (see step 3).</source>
          <target state="translated">&lt;strong&gt;Source&lt;/strong&gt;として、セキュリティグループのIDを入力します（ステップ3を参照）。</target>
        </trans-unit>
        <trans-unit id="cb54fe608cc71f0b89dbbc16bec961965d11f646" translate="yes" xml:space="preserve">
          <source>As the client attempts to stream data from the server, these stacks are transported to every relevant server in the cluster, and each server begins evaluating the topmost node in the stack, in parallel with other servers. On each server, the topmost node in the stack grabs the first chunk of the data from the node below it, and applies its share of transformations to it. This process proceeds recursively until enough data is collected to send the first chunk to the client. The data from each server is combined into a single resultset, and forwarded to the client. This process continues as the client requests more data from the server.</source>
          <target state="translated">クライアントがサーバからデータをストリーミングしようとすると、これらのスタックはクラスタ内の関連するすべてのサーバに転送され、各サーバは他のサーバと並行してスタックの最上位ノードの評価を開始します。各サーバでは、スタックの最上位ノードが、その下のノードからデータの最初のチャンクを取得し、それに自分の分の変換を適用します。このプロセスは、クライアントに最初のチャンクを送信するのに十分なデータが収集されるまで再帰的に進みます。各サーバからのデータは1つの結果セットにまとめられ、クライアントに転送されます。この処理は、クライアントがサーバからさらにデータを要求すると、継続して行われます。</target>
        </trans-unit>
        <trans-unit id="8375959cbc6aae5cdc4d44db82c3ced5c88b3388" translate="yes" xml:space="preserve">
          <source>As these queries are performed in a second client, the first client would receive and print the following objects:</source>
          <target state="translated">これらのクエリが第2のクライアントで実行されると、第1のクライアントは以下のオブジェクトを受信して印刷します。</target>
        </trans-unit>
        <trans-unit id="134d6b41e63f8d58f043111b94e89dcdbcc5edb8" translate="yes" xml:space="preserve">
          <source>Associations</source>
          <target state="translated">Associations</target>
        </trans-unit>
        <trans-unit id="efa658746570de82945ef92629fd6a654065fe9a" translate="yes" xml:space="preserve">
          <source>Assume your users table has this structure:</source>
          <target state="translated">ユーザーテーブルがこのような構造になっていると仮定します。</target>
        </trans-unit>
        <trans-unit id="66f2025d043bc07bbb9c9a80833978ac638b8c20" translate="yes" xml:space="preserve">
          <source>Asynchronous chat</source>
          <target state="translated">非同期チャット</target>
        </trans-unit>
        <trans-unit id="83173f0e9771155512d0a30d870f207080f8597e" translate="yes" xml:space="preserve">
          <source>Asynchronous connections</source>
          <target state="translated">非同期接続</target>
        </trans-unit>
        <trans-unit id="2d41dafc5ecfd8ed4ffbf4e55ae5dec6eb2433b6" translate="yes" xml:space="preserve">
          <source>At the moment, the only built-in strategy is &lt;code&gt;'link-next'&lt;/code&gt;, which is equivalent to &lt;code&gt;function(info) { return info('header')('link')('rel=&quot;next&quot;').default(null); }&lt;/code&gt;.</source>
          <target state="translated">現時点では、組み込みの戦略は &lt;code&gt;'link-next'&lt;/code&gt; のみです。これは &lt;code&gt;function(info) { return info('header')('link')('rel=&quot;next&quot;').default(null); }&lt;/code&gt; と同等です。ヌル）; }。</target>
        </trans-unit>
        <trans-unit id="4bd52431fd18952855b2631c34fd210e778b78dc" translate="yes" xml:space="preserve">
          <source>At the time of the test, we used RethinkDB 2.1.5 which was compiled from source on Ubuntu 14.04 LTS. During the performance test we used the RethinkDB Java driver with Oracle Java 1.8.0. A full list of configuration settings follows below:</source>
          <target state="translated">テスト時には、Ubuntu 14.04 LTS上でソースからコンパイルしたRethinkDB 2.1.5を使用しました。性能テストでは、Oracle Java 1.8.0のRethinkDB Javaドライバを使用しました。構成設定の完全なリストは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b1a5cc8a968b19b739e00db262add145412fdb42" translate="yes" xml:space="preserve">
          <source>Atomically updating a document based on a condition</source>
          <target state="translated">条件に基づいてドキュメントをアトミックに更新する</target>
        </trans-unit>
        <trans-unit id="ee1acfa55eb1476c86c5c4a68f256a67b25289ab" translate="yes" xml:space="preserve">
          <source>Authentication</source>
          <target state="translated">Authentication</target>
        </trans-unit>
        <trans-unit id="bf1c120c3d66f07e614453065d0e29e1ef6c4d79" translate="yes" xml:space="preserve">
          <source>Authoritative systems such as RethinkDB and MongoDB choose to maintain data consistency. Building applications on top of authoritative primary systems is much simpler because all of the issues associated with data inconsistency do not arise. In exchange, these applications will occasionally experience availability issues.</source>
          <target state="translated">RethinkDBやMongoDBなどの権威あるシステムは、データの一貫性を維持することを選択します。権威あるプライマリシステムの上にアプリケーションを構築すると、データの不整合に関連するすべての問題が発生しないため、はるかにシンプルになります。その代わり、これらのアプリケーションでは可用性の問題が発生することがあります。</target>
        </trans-unit>
        <trans-unit id="c49bab85e042fd9da10e63698f1ff275408ef3a9" translate="yes" xml:space="preserve">
          <source>Availability and failover</source>
          <target state="translated">可用性とフェイルオーバー</target>
        </trans-unit>
        <trans-unit id="f5f9a7d2d6b738a4c53e633f7f8e9031c3e74132" translate="yes" xml:space="preserve">
          <source>Availability guarantees</source>
          <target state="translated">可用性の保証</target>
        </trans-unit>
        <trans-unit id="e51e208b743ed89cfa52a9f1320040272eea2387" translate="yes" xml:space="preserve">
          <source>Averages all the elements of a sequence. If called with a field name, averages all the values of that field in the sequence, skipping elements of the sequence that lack that field. If called with a function, calls that function on every element of the sequence and averages the results, skipping elements of the sequence where that function returns &lt;code&gt;null&lt;/code&gt; or a non-existence error.</source>
          <target state="translated">シーケンスのすべての要素を平均化します。フィールド名を指定して呼び出された場合、シーケンス内のそのフィールドのすべての値を平均化し、そのフィールドがないシーケンスの要素をスキップします。関数を指定して呼び出された場合、シーケンスのすべての要素でその関数を呼び出し、結果を平均化して、その関数が &lt;code&gt;null&lt;/code&gt; または存在しないエラーを返すシーケンスの要素をスキップします。</target>
        </trans-unit>
        <trans-unit id="1f1dd59bc5fd618ecdeed2b80d65f30febc08b2c" translate="yes" xml:space="preserve">
          <source>Back up your data</source>
          <target state="translated">データのバックアップ</target>
        </trans-unit>
        <trans-unit id="a9fefc1708b009551dfe5243e39f9eaa73a80f29" translate="yes" xml:space="preserve">
          <source>Backbone.js</source>
          <target state="translated">Backbone.js</target>
        </trans-unit>
        <trans-unit id="766ccc69e7342f121250a3f6c176a77082715aff" translate="yes" xml:space="preserve">
          <source>Backbone.js Todo List based on &lt;a href=&quot;http://todomvc.com/&quot;&gt;TodoMVC&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://todomvc.com/&quot;&gt;TodoMVCに&lt;/a&gt;基づくBackbone.js Todoリスト。</target>
        </trans-unit>
        <trans-unit id="7b839bcf3e0e54d2163cfed412c8acb1043d6305" translate="yes" xml:space="preserve">
          <source>Backfill tasks bring out of date shards up to date by transferring data between servers. As above, the &lt;code&gt;progress&lt;/code&gt; field is a number between 0 and 1 indicating how far along the backfill task is.</source>
          <target state="translated">バックフィルタスクは、サーバー間でデータを転送することにより、古いシャードを最新のものにします。上記のように、 &lt;code&gt;progress&lt;/code&gt; フィールドは0と1の間の数値で、バックフィルタスクに沿った距離を示します。</target>
        </trans-unit>
        <trans-unit id="95104c2a2bc8f58ce726778b69eb26446e5df2d4" translate="yes" xml:space="preserve">
          <source>Backing up your data</source>
          <target state="translated">データのバックアップ</target>
        </trans-unit>
        <trans-unit id="dd96994d01e723dd6f9b0bdb6119722dbeb9faf0" translate="yes" xml:space="preserve">
          <source>Backup</source>
          <target state="translated">Backup</target>
        </trans-unit>
        <trans-unit id="7bf880b869af7aa60c45e307a2c84eb91d64affc" translate="yes" xml:space="preserve">
          <source>Balancing safety and performance</source>
          <target state="translated">安全性と性能の両立</target>
        </trans-unit>
        <trans-unit id="9a8b97c61b4280a70b1df3508a113cbd5bb941c8" translate="yes" xml:space="preserve">
          <source>Basic CRUD mapping between &lt;a href=&quot;http://hapijs.com&quot;&gt;hapi&lt;/a&gt; and RethinkDB.</source>
          <target state="translated">&lt;a href=&quot;http://hapijs.com&quot;&gt;hapi&lt;/a&gt;とRethinkDBの間の基本的なCRUDマッピング。</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="34c0b14ba7e8cc0db81053dac89049007e918a20" translate="yes" xml:space="preserve">
          <source>Basic commands</source>
          <target state="translated">基本コマンド</target>
        </trans-unit>
        <trans-unit id="a7e69e7791ed667a403de47b04497c349887deca" translate="yes" xml:space="preserve">
          <source>Basic data types</source>
          <target state="translated">基本データ型</target>
        </trans-unit>
        <trans-unit id="1b85c1671a31184c1c917d7603e08e14eeb40765" translate="yes" xml:space="preserve">
          <source>Basic predicates</source>
          <target state="translated">基本的な述語</target>
        </trans-unit>
        <trans-unit id="9e39c1bf6d19a6e317c669d8bc9466868e62fad8" translate="yes" xml:space="preserve">
          <source>Basic setup</source>
          <target state="translated">基本的な設定</target>
        </trans-unit>
        <trans-unit id="2bb51f39857d33551d1c5809b0f809afddc222ff" translate="yes" xml:space="preserve">
          <source>Basic updates and filtering</source>
          <target state="translated">基本的な更新とフィルタリング</target>
        </trans-unit>
        <trans-unit id="cb3a8802da5b3164771a468d78ff7995a249f08a" translate="yes" xml:space="preserve">
          <source>Basic usage</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="fc36a14dfa722feb3d24f81f51c103200d4039f7" translate="yes" xml:space="preserve">
          <source>Be aware this behavior holds true when retrieving data from lists, too. If you extracted &lt;code&gt;subject&lt;/code&gt; from &lt;code&gt;notes&lt;/code&gt; above and Bob had 10 notes, 7 of which contained no &lt;code&gt;subject&lt;/code&gt; field, you would still get a list of 10 objects: 7 of them would be &lt;code&gt;{subject:&amp;lt;text&amp;gt;}&lt;/code&gt; and 3 of them would be empty, i.e., &lt;code&gt;{}&lt;/code&gt;.</source>
          <target state="translated">リストからデータを取得する場合にも、この動作が当てはまることに注意してください。あなたが抽出された場合は &lt;code&gt;subject&lt;/code&gt; から &lt;code&gt;notes&lt;/code&gt; 上記とボブは一切含まれていない7そのうち10冊のノート、持っていた &lt;code&gt;subject&lt;/code&gt; フィールドを、あなたはまだ10個のオブジェクトのリストを得るでしょう：それらの7は次のようになり &lt;code&gt;{subject:&amp;lt;text&amp;gt;}&lt;/code&gt; とそれらの3が空になります、つまり &lt;code&gt;{}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f1be2fc6c8c377e2229fddff776fd7afd543fc9" translate="yes" xml:space="preserve">
          <source>Because ReQL is composable you can combine the &lt;code&gt;r.js&lt;/code&gt; command with any other query. For example, let&amp;rsquo;s use it as an alternative to get all users older than 30:</source>
          <target state="translated">ReQLは構成可能であるため、 &lt;code&gt;r.js&lt;/code&gt; コマンドを他のクエリと組み合わせることができます。たとえば、30歳以上のすべてのユーザーを取得するための代替手段として使用します。</target>
        </trans-unit>
        <trans-unit id="dd795ddf4fc56f4799629398c1ff8a470d0eca00" translate="yes" xml:space="preserve">
          <source>Because of the previous limitation, it&amp;rsquo;s best to keep the size of the &lt;code&gt;posts&lt;/code&gt; array to no more than a few hundred documents.</source>
          <target state="translated">以前の制限のため、 &lt;code&gt;posts&lt;/code&gt; 配列のサイズは、数百のドキュメントを超えないようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8819ba9a92b421c91deca2acda530d627b2e5037" translate="yes" xml:space="preserve">
          <source>Because of this decoupled interaction, publishers are free to disconnect whenever they want. There may even be more than one publisher. Likewise, if no subscribers are currently listening for messages with a certain topic, the exchange is free to simply delete them.</source>
          <target state="translated">このように切り離された相互作用のため、出版社はいつでも自由に切り離すことができます。複数のパブリッシャーが存在する場合もあります。同様に、あるトピックのメッセージを現在聞いている購読者がいない場合、交換は自由に削除することができます。</target>
        </trans-unit>
        <trans-unit id="5db49c7409f67a659c8846ca03f9eb0dc319e7b8" translate="yes" xml:space="preserve">
          <source>Because you can keep chaining commands (or calling them in prefix notation), you need a command to signify the end of the chain and send the query to the server. This command is &lt;code&gt;run&lt;/code&gt; in the official drivers.</source>
          <target state="translated">コマンドをチェーンし続ける（またはそれらをプレフィックス表記で呼び出す）ことができるため、チェーンの終わりを示し、クエリをサーバーに送信するコマンドが必要です。このコマンドは公式ドライバーで &lt;code&gt;run&lt;/code&gt; れます。</target>
        </trans-unit>
        <trans-unit id="8d1ab2b0b130f977fcff4caada6279739b1f0474" translate="yes" xml:space="preserve">
          <source>Before &lt;code&gt;connect&lt;/code&gt;, use the &lt;code&gt;set_loop_type(&quot;tornado&quot;)&lt;/code&gt; command to set RethinkDB to use asynchronous event loops compatible with Tornado.</source>
          <target state="translated">&lt;code&gt;connect&lt;/code&gt; 前に、 &lt;code&gt;set_loop_type(&quot;tornado&quot;)&lt;/code&gt; コマンドを使用して、RethinkDBがTornadoと互換性のある非同期イベントループを使用するように設定します。</target>
        </trans-unit>
        <trans-unit id="7a9afbe06b4bebf1dc839c50f86b39dbc9432434" translate="yes" xml:space="preserve">
          <source>Before &lt;code&gt;connect&lt;/code&gt;, use the &lt;code&gt;set_loop_type(&quot;twisted&quot;)&lt;/code&gt; command to set RethinkDB to use asynchronous event loops compatible with the Twisted reactor.</source>
          <target state="translated">&lt;code&gt;connect&lt;/code&gt; 前に、 &lt;code&gt;set_loop_type(&quot;twisted&quot;)&lt;/code&gt; コマンドを使用して、RethinkDBがTwistedリアクターと互換性のある非同期イベントループを使用するように設定します。</target>
        </trans-unit>
        <trans-unit id="8bceeab99ffaf928dc95774463c455944442d343" translate="yes" xml:space="preserve">
          <source>Binaries for previous versions of RethinkDB are available in the &lt;a href=&quot;https://download.rethinkdb.com&quot;&gt;download archive&lt;/a&gt;.</source>
          <target state="translated">RethinkDBの以前のバージョンのバイナリは、&lt;a href=&quot;https://download.rethinkdb.com&quot;&gt;ダウンロードアーカイブから&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="1826aba6b2579cdea38a7aacc93c5dcd98625788" translate="yes" xml:space="preserve">
          <source>Binary objects</source>
          <target state="translated">バイナリオブジェクト</target>
        </trans-unit>
        <trans-unit id="41e98502bbe985a1e03f759e6eeeb6edf60db089" translate="yes" xml:space="preserve">
          <source>Binary objects created with &lt;code&gt;r.binary&lt;/code&gt; can be serialized in two different ways.</source>
          <target state="translated">&lt;code&gt;r.binary&lt;/code&gt; で作成されたバイナリオブジェクトは、2つの異なる方法でシリアル化できます。</target>
        </trans-unit>
        <trans-unit id="6c611df9e68f6d83bdebc449a3768663dc3ae158" translate="yes" xml:space="preserve">
          <source>Binary objects returned to the client in JavaScript will also be Node.js &lt;code&gt;Buffer&lt;/code&gt; objects. This can be changed with the &lt;code&gt;binaryFormat&lt;/code&gt; option provided to &lt;a href=&quot;../run/index&quot;&gt;run&lt;/a&gt; to return &amp;ldquo;raw&amp;rdquo; objects.</source>
          <target state="translated">JavaScriptでクライアントに返されるバイナリオブジェクトもNode.js &lt;code&gt;Buffer&lt;/code&gt; オブジェクトになります。これは、「生の」オブジェクトを返すために&lt;a href=&quot;../run/index&quot;&gt;実行する&lt;/a&gt;ために提供される &lt;code&gt;binaryFormat&lt;/code&gt; オプションで変更できます。</target>
        </trans-unit>
        <trans-unit id="44caa5766e2652de63f72f1ff60fc8d670c119de" translate="yes" xml:space="preserve">
          <source>Binding the intracluster port</source>
          <target state="translated">クラスター内ポートのバインディング</target>
        </trans-unit>
        <trans-unit id="cbadf36748bb8d13893031ddd4810db0de6054c6" translate="yes" xml:space="preserve">
          <source>Binding the web interface port</source>
          <target state="translated">ウェブインタフェースポートのバインド</target>
        </trans-unit>
        <trans-unit id="cbc02f4dce5274189921972a9a722d0e8126a075" translate="yes" xml:space="preserve">
          <source>Binding the web interface port can prevent it from being accessed directly from a remote machine. You can bind it to a specific IP address using the &lt;code&gt;--bind-http&lt;/code&gt;&lt;a href=&quot;../cli-options/index&quot;&gt;command line option&lt;/a&gt;; the most secure method is to bind it to the local machine (&lt;code&gt;localhost&lt;/code&gt;) and then connect via a proxy.</source>
          <target state="translated">Webインターフェイスポートをバインドすると、リモートマシンから直接アクセスできない場合があります。 &lt;code&gt;--bind-http&lt;/code&gt; &lt;a href=&quot;../cli-options/index&quot;&gt;コマンドラインオプション&lt;/a&gt;を使用して、特定のIPアドレスにバインドできます。最も安全な方法は、ローカルマシン（ &lt;code&gt;localhost&lt;/code&gt; ）にバインドして、プロキシ経由で接続することです。</target>
        </trans-unit>
        <trans-unit id="76cbf022f997b44575465d8104ed40ca7aed9623" translate="yes" xml:space="preserve">
          <source>Blog example app</source>
          <target state="translated">ブログ事例アプリ</target>
        </trans-unit>
        <trans-unit id="1ef46452d6c2124d0a11fbb28f184e2473580a80" translate="yes" xml:space="preserve">
          <source>Both of those define the same square. If &lt;code&gt;polygon&lt;/code&gt; had been specified instead of &lt;code&gt;line&lt;/code&gt; they would define a filled square.</source>
          <target state="translated">それらの両方が同じ正方形を定義します。 &lt;code&gt;line&lt;/code&gt; 代わりに &lt;code&gt;polygon&lt;/code&gt; が指定されている場合、塗りつぶされた正方形を定義します。</target>
        </trans-unit>
        <trans-unit id="a166bba04717131296047407a3dc3da1dde1e5b0" translate="yes" xml:space="preserve">
          <source>Both options are required. In the configuration file, you would specify the key and certificate like so:</source>
          <target state="translated">両方のオプションが必要です。設定ファイルでは、以下のように鍵と証明書を指定します。</target>
        </trans-unit>
        <trans-unit id="3b8ac6c75a9274bd6c7b12be1395b5c22b3a06be" translate="yes" xml:space="preserve">
          <source>Bottle</source>
          <target state="translated">Bottle</target>
        </trans-unit>
        <trans-unit id="d6e09178bd16cfd18d84e3855ebc0416e92f34f3" translate="yes" xml:space="preserve">
          <source>Bring enough of the missing servers back online to allow automatic failover</source>
          <target state="translated">不足しているサーバーを十分にオンラインに戻し、自動フェイルオーバーを可能にします。</target>
        </trans-unit>
        <trans-unit id="657ed8cbf67990f3057d93fe46479659c2ee67b2" translate="yes" xml:space="preserve">
          <source>Browse the &lt;a href=&quot;../../../api/javascript/index&quot;&gt;API reference&lt;/a&gt; for many more array operations available in RethinkDB.</source>
          <target state="translated">RethinkDBで利用可能なさらに多くの配列操作については、&lt;a href=&quot;../../../api/javascript/index&quot;&gt;APIリファレンス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="48177cef0838afa926f1348e32e28ece5613b72d" translate="yes" xml:space="preserve">
          <source>Browse the &lt;a href=&quot;https://rethinkdb.com/api&quot;&gt;API reference&lt;/a&gt; for more commands.</source>
          <target state="translated">その他のコマンド&lt;a href=&quot;https://rethinkdb.com/api&quot;&gt;について&lt;/a&gt;は、APIリファレンスを参照してください。</target>
        </trans-unit>
        <trans-unit id="ac22af4c83f91b13f1824d666afaf5f459e7a321" translate="yes" xml:space="preserve">
          <source>Browse the API reference to learn more about secondary index commands:</source>
          <target state="translated">API リファレンスを参照して、セカンダリ インデックス コマンドの詳細を確認してください。</target>
        </trans-unit>
        <trans-unit id="d516a298eabdbd2e727e54083cecadb863f1dac7" translate="yes" xml:space="preserve">
          <source>Browse the following resources to learn more about ReQL and &lt;code&gt;r.http&lt;/code&gt;:</source>
          <target state="translated">ReQLと &lt;code&gt;r.http&lt;/code&gt; の詳細については、次のリソースを参照してください。</target>
        </trans-unit>
        <trans-unit id="669311ba783ef7ba53692006d1c9a89ccd031fa2" translate="yes" xml:space="preserve">
          <source>Browse the following resources to learn more about ReQL:</source>
          <target state="translated">ReQLについては、以下のリソースを参照してください。</target>
        </trans-unit>
        <trans-unit id="0f3cfb4d346653cac59dcb7ea0fe5d7077ec9db4" translate="yes" xml:space="preserve">
          <source>Building ReQL queries on multiple lines</source>
          <target state="translated">複数行でのReQLクエリの構築</target>
        </trans-unit>
        <trans-unit id="8cd56ee99256f6026c82a35e18d75551094d8936" translate="yes" xml:space="preserve">
          <source>Building from source</source>
          <target state="translated">ソースからの構築</target>
        </trans-unit>
        <trans-unit id="b4947f6019d0b7281804735090dfda20647f0fdc" translate="yes" xml:space="preserve">
          <source>But this is where the similarity ends. Instead of constructing strings and passing them to the database server, you access ReQL by using methods from the &lt;code&gt;rethinkdb&lt;/code&gt; package:</source>
          <target state="translated">しかし、これは類似性が終了するところです。文字列を作成してデータベースサーバーに渡す代わりに、 &lt;code&gt;rethinkdb&lt;/code&gt; パッケージのメソッドを使用してReQLにアクセスします。</target>
        </trans-unit>
        <trans-unit id="84d0730e896a161bf1371a6a4e38fe9f429f980b" translate="yes" xml:space="preserve">
          <source>But you&amp;rsquo;d like to get a document more like a &amp;ldquo;report card&amp;rdquo;:</source>
          <target state="translated">しかし、「レポートカード」のようなドキュメントを取得したいとします。</target>
        </trans-unit>
        <trans-unit id="4d4a8ec91fe8ec37a4658b5381536170ca09ec41" translate="yes" xml:space="preserve">
          <source>By combining these operations, you can write surprisingly useful queries in pure ReQL. For example, let&amp;rsquo;s say you have a table of sales your company has made, and you want to figure out how much of the gross comes from people who were working overtime:</source>
          <target state="translated">これらの操作を組み合わせると、純粋にReQLで驚くほど便利なクエリを記述できます。たとえば、会社が行った売上高の表があり、残業のうちどれだけが残業していたかを把握したいとします。</target>
        </trans-unit>
        <trans-unit id="b3a3852ff7da9835c90fb6a26046e9f187e1f55b" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;filter&lt;/code&gt; will silently skip documents with missing fields: if the predicate tries to access a field that doesn&amp;rsquo;t exist (for instance, the predicate &lt;code&gt;{age:30}&lt;/code&gt; applied to a document with no &lt;code&gt;age&lt;/code&gt; field), that document will not be returned in the result set, and no error will be generated. This behavior can be changed with the &lt;code&gt;default&lt;/code&gt; optional argument.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;filter&lt;/code&gt; はフィールドが欠落しているドキュメントを黙ってスキップします。述語が存在しないフィールドにアクセスしようとした場合（たとえば、 &lt;code&gt;age&lt;/code&gt; フィールドのないドキュメントに適用された述語 &lt;code&gt;{age:30}&lt;/code&gt; ）、そのドキュメントは結果セットで返され、エラーは生成されません。この動作は、 &lt;code&gt;default&lt;/code&gt; オプション引数で変更できます。</target>
        </trans-unit>
        <trans-unit id="1344ef8aca42ad3c1757ece48e1e19bd62fba9e3" translate="yes" xml:space="preserve">
          <source>By default, RethinkDB binds the web interface to &lt;code&gt;localhost&lt;/code&gt; for security reasons. If you need to be able to access it from another server, use the &lt;code&gt;--bind all&lt;/code&gt; parameter when starting RethinkDB. Read how to &lt;a href=&quot;../start-a-server/index&quot;&gt;Start a RethinkDB server&lt;/a&gt; and &lt;a href=&quot;../start-on-startup/index&quot;&gt;Start RethinkDB at system startup&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、RethinkDBはセキュリティ上の理由からWebインターフェースを &lt;code&gt;localhost&lt;/code&gt; にバインドします。別のサーバーからアクセスできるようにする必要がある場合は、RethinkDBを起動するときに &lt;code&gt;--bind all&lt;/code&gt; パラメーターを使用します。&lt;a href=&quot;../start-a-server/index&quot;&gt;RethinkDBサーバー&lt;/a&gt;を&lt;a href=&quot;../start-on-startup/index&quot;&gt;起動する方法とシステム起動時にRethinkDB&lt;/a&gt;を起動する方法を読んでください。</target>
        </trans-unit>
        <trans-unit id="44bfff8b590002af7fac25a5a3e6fd68f342de94" translate="yes" xml:space="preserve">
          <source>By default, RethinkDB creates a database &lt;code&gt;test&lt;/code&gt;. Let&amp;rsquo;s create a table &lt;code&gt;authors&lt;/code&gt; within this database:</source>
          <target state="translated">デフォルトでは、RethinkDBはデータベース &lt;code&gt;test&lt;/code&gt; 作成します。のは、テーブル作成してみましょう &lt;code&gt;authors&lt;/code&gt; このデータベース内：</target>
        </trans-unit>
        <trans-unit id="4fc3614b3247f4342b43f7396eea9d49d658e914" translate="yes" xml:space="preserve">
          <source>By default, RethinkDB will use 4096 iterations for hashing passwords during the connection handshake between client drivers and the server. There is an option to set iterations on a per-account basis by setting passwords to an object of the form &lt;code&gt;{password:&quot;password&quot;,iterations:4096}&lt;/code&gt;. If you wished to use only 1024 iterations, you could set a password like so:</source>
          <target state="translated">デフォルトでは、RethinkDBは、クライアントドライバーとサーバー間の接続ハンドシェイク中に、パスワードのハッシュに4096回の反復を使用します。 &lt;code&gt;{password:&quot;password&quot;,iterations:4096}&lt;/code&gt; の形式のオブジェクトにパスワードを設定することにより、アカウントごとに反復を設定するオプションがあります。1024反復のみを使用したい場合は、次のようにパスワードを設定できます。</target>
        </trans-unit>
        <trans-unit id="4a0415e1af67de0c24b38ab39f791c72bb31933f" translate="yes" xml:space="preserve">
          <source>By default, documents missing fields tested by the &lt;code&gt;filter&lt;/code&gt; predicate are skipped. In the previous examples, users without an &lt;code&gt;age&lt;/code&gt; field are not returned. By passing the optional &lt;code&gt;default&lt;/code&gt; argument to &lt;code&gt;filter&lt;/code&gt;, you can change this behavior.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;filter&lt;/code&gt; 述部によってテストされたフィールドのない文書はスキップされます。前の例では、 &lt;code&gt;age&lt;/code&gt; フィールドのないユーザーは返されません。オプションの &lt;code&gt;default&lt;/code&gt; 引数を &lt;code&gt;filter&lt;/code&gt; に渡すことにより、この動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="25206ceb929fd95956131698bdfaf0a77c7ecf0d" translate="yes" xml:space="preserve">
          <source>By default, if more than one change occurs between invocations of &lt;code&gt;changes&lt;/code&gt;, your application will receive a single change object whose &lt;code&gt;new_val&lt;/code&gt; will incorporate &lt;em&gt;all&lt;/em&gt; the changes to the data. Suppose three updates occurred to a monitored document between &lt;code&gt;change&lt;/code&gt; reads:</source>
          <target state="translated">複数の変更が呼び出しの間で発生した場合、デフォルトでは、 &lt;code&gt;changes&lt;/code&gt; 、あなたのアプリケーションは、その単一の変更オブジェクト届きます &lt;code&gt;new_val&lt;/code&gt; 組み込む予定&lt;em&gt;のすべて&lt;/em&gt;のデータへの変更を。 &lt;code&gt;change&lt;/code&gt; 読み取りの間に監視対象ドキュメントに対して3つの更新が発生したとします。</target>
        </trans-unit>
        <trans-unit id="2e2210c1bbcff9d7543a9786455afa1b40e879d4" translate="yes" xml:space="preserve">
          <source>By default, neither Homebrew nor the example configuration file above will read options from a &lt;a href=&quot;../config-file/index&quot;&gt;configuration file&lt;/a&gt;. If you wish to use one, you&amp;rsquo;ll need to do the following:</source>
          <target state="translated">デフォルトでは、自作や設定ファイルの例のいずれも、上記のオプションを読み込みます&lt;a href=&quot;../config-file/index&quot;&gt;設定ファイルを&lt;/a&gt;。使用する場合は、次のことを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="91673feeb82a0cac46ab5ec3cd58c839bd274934" translate="yes" xml:space="preserve">
          <source>By default, the import command will connect to &lt;code&gt;localhost&lt;/code&gt; port &lt;code&gt;28015&lt;/code&gt;. You can use the &lt;code&gt;-c&lt;/code&gt; option to specify a server and client port to connect to. (Note this is the driver port clients connect to, not the cluster port.)</source>
          <target state="translated">デフォルトでは、インポートコマンドは &lt;code&gt;localhost&lt;/code&gt; ポート &lt;code&gt;28015&lt;/code&gt; に接続します。 &lt;code&gt;-c&lt;/code&gt; オプションを使用して、接続するサーバーとクライアントのポートを指定できます。（これは、クライアントが接続するドライバーポートであり、クラスターポートではないことに注意してください。）</target>
        </trans-unit>
        <trans-unit id="a555ba74cc0e0d42cbbdf6be76239cab792c5fd9" translate="yes" xml:space="preserve">
          <source>By default, this is inclusive of the start time and exclusive of the end time. Set &lt;code&gt;leftBound&lt;/code&gt; and &lt;code&gt;rightBound&lt;/code&gt; to explicitly include (&lt;code&gt;closed&lt;/code&gt;) or exclude (&lt;code&gt;open&lt;/code&gt;) that endpoint of the range.</source>
          <target state="translated">デフォルトでは、これには開始時刻が含まれ、終了時刻は含まれません。範囲のその端点を明示的に含める（ &lt;code&gt;closed&lt;/code&gt; ）または除外する（ &lt;code&gt;open&lt;/code&gt; ）には、 &lt;code&gt;leftBound&lt;/code&gt; および &lt;code&gt;rightBound&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="96068a611a40418f0835d40a3d5a76ec572d2a38" translate="yes" xml:space="preserve">
          <source>By default, times are converted into native time objects when they are retrieved from the server. This may be overridden by passing the optarg &lt;code&gt;timeFormat&lt;/code&gt; to &lt;code&gt;run&lt;/code&gt;. The only options right now are &lt;code&gt;native&lt;/code&gt;, the default, and &lt;code&gt;raw&lt;/code&gt;. See the &lt;a href=&quot;https://rethinkdb.com/api&quot;&gt;API reference&lt;/a&gt; if you are uncertain how to pass an optional argument in JavaScript.</source>
          <target state="translated">デフォルトでは、時刻はサーバーから取得されるときにネイティブの時刻オブジェクトに変換されます。これは、optarg &lt;code&gt;timeFormat&lt;/code&gt; を &lt;code&gt;run&lt;/code&gt; に渡すことでオーバーライドできます。現在のオプションは、 &lt;code&gt;native&lt;/code&gt; 、デフォルト、および &lt;code&gt;raw&lt;/code&gt; のみです。JavaScriptでオプションの引数を渡す方法がわからない場合は、&lt;a href=&quot;https://rethinkdb.com/api&quot;&gt;APIリファレンスを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="4722c50e51b8d5e97e0c0d930bb81b920ccc94ac" translate="yes" xml:space="preserve">
          <source>By linking documents stored in &lt;strong&gt;multiple tables&lt;/strong&gt; (similar to traditional relational database systems).</source>
          <target state="translated">&lt;strong&gt;複数のテーブルに&lt;/strong&gt;格納されているドキュメントをリンクする（従来のリレーショナルデータベースシステムと同様）。</target>
        </trans-unit>
        <trans-unit id="6fb9186d2d9cbcfe93210eb48a2fb2a21232019c" translate="yes" xml:space="preserve">
          <source>By specifying &lt;code&gt;null&lt;/code&gt;, the table scope &lt;code&gt;write&lt;/code&gt; permission is removed, and will again inherit from the next highest scope (database or global).</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; を指定すると、テーブルスコープの &lt;code&gt;write&lt;/code&gt; 権限が削除され、次に高いスコープ（データベースまたはグローバル）から継承されます。</target>
        </trans-unit>
        <trans-unit id="8e65b7098833d1102386eee212f4ad27cda75aaa" translate="yes" xml:space="preserve">
          <source>By specifying &lt;code&gt;true&lt;/code&gt; to the &lt;code&gt;includeInitial&lt;/code&gt; optional argument, the changefeed stream will start with the current contents of the table or selection being monitored. The initial results will have &lt;code&gt;new_val&lt;/code&gt; fields, but no &lt;code&gt;old_val&lt;/code&gt; fields, so it&amp;rsquo;s easy to distinguish them from change events.</source>
          <target state="translated">&lt;code&gt;includeInitial&lt;/code&gt; オプション引数に &lt;code&gt;true&lt;/code&gt; を指定すると、changefeedストリームは、監視されているテーブルまたは選択の現在の内容で開始されます。最初の結果には &lt;code&gt;new_val&lt;/code&gt; フィールドがありますが、 &lt;code&gt;old_val&lt;/code&gt; フィールドがないので、それらを変更イベントと簡単に区別できます。</target>
        </trans-unit>
        <trans-unit id="cf27a1ec841476e3904d4d6e74fd318d34e20009" translate="yes" xml:space="preserve">
          <source>By using &lt;strong&gt;embedded arrays&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;埋め込み配列&lt;/strong&gt;を使用&lt;strong&gt;する&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="0dce97da25b4264e1073d3bdb60cb75591d8a8cd" translate="yes" xml:space="preserve">
          <source>By using ReQL with a language like Python, it becomes easy to script administrative and configuration tasks with RethinkDB. If you have complex table configurations that might need to be repeated for new tables or tweaked for the whole database, you can store them in a script.</source>
          <target state="translated">ReQLをPythonのような言語で利用することで、RethinkDBを使った管理・設定タスクのスクリプト化が容易になります。複雑なテーブル設定があって、新しいテーブルに対して繰り返し実行したり、データベース全体に対して微調整が必要な場合は、スクリプトに格納することができます。</target>
        </trans-unit>
        <trans-unit id="9e0799c133e428f555d77438ba4a1556387e8f3a" translate="yes" xml:space="preserve">
          <source>By using a negative &lt;code&gt;offset&lt;/code&gt; you can delete from the end of the array. &lt;code&gt;-1&lt;/code&gt; is the last element in the array, &lt;code&gt;-2&lt;/code&gt; is the second-to-last element, and so on. You may specify a negative &lt;code&gt;endOffset&lt;/code&gt;, although just as with a positive value, this will not be inclusive. The range &lt;code&gt;(2,-1)&lt;/code&gt; specifies the third element through the next-to-last element.</source>
          <target state="translated">負の &lt;code&gt;offset&lt;/code&gt; を使用すると、配列の最後から削除できます。 &lt;code&gt;-1&lt;/code&gt; は配列の最後の要素、 &lt;code&gt;-2&lt;/code&gt; は最後から2番目の要素などです。負の &lt;code&gt;endOffset&lt;/code&gt; を指定することもできますが、正の値と同様に、これは包括的ではありません。範囲 &lt;code&gt;(2,-1)&lt;/code&gt; は、3番目の要素から最後から2番目の要素までを指定します。</target>
        </trans-unit>
        <trans-unit id="8e5fdab92dece79d7629d6d901687613ddc6ab5a" translate="yes" xml:space="preserve">
          <source>Bytes</source>
          <target state="translated">Bytes</target>
        </trans-unit>
        <trans-unit id="feef1c2cd6dd83347001a228e97b748c2a10570f" translate="yes" xml:space="preserve">
          <source>Bytes on wire</source>
          <target state="translated">ワイヤ上のバイト数</target>
        </trans-unit>
        <trans-unit id="387ce5685c4f6cadeb19f077c809c397e1cd1990" translate="yes" xml:space="preserve">
          <source>C# bchavez</source>
          <target state="translated">C#のbchavez</target>
        </trans-unit>
        <trans-unit id="8c0cf5e371cd7e1b86598707bf61ff3cb94a2dcf" translate="yes" xml:space="preserve">
          <source>C# mfenniak</source>
          <target state="translated">C#のmfenniak</target>
        </trans-unit>
        <trans-unit id="fc2b4216164cfb01ac45112054b3fedda8b56c86" translate="yes" xml:space="preserve">
          <source>C++</source>
          <target state="translated">C++</target>
        </trans-unit>
        <trans-unit id="422f183f8cda22e30062df39dacc2bce59af9cd3" translate="yes" xml:space="preserve">
          <source>CAP theorem</source>
          <target state="translated">CAPの定理</target>
        </trans-unit>
        <trans-unit id="5d8d66ea407316bbd1b3369335137a98f8f6a4a0" translate="yes" xml:space="preserve">
          <source>CLI to run ReQL queries in JavaScript.</source>
          <target state="translated">JavaScriptでReQLクエリを実行するCLI</target>
        </trans-unit>
        <trans-unit id="098c8a89adf6614a20e450a16709e2c86a38e815" translate="yes" xml:space="preserve">
          <source>CLI to run ReQL queries in Ruby.</source>
          <target state="translated">RubyでReQLクエリを実行するCLI</target>
        </trans-unit>
        <trans-unit id="ba1b370e026909cc98a10ff3c5b0c239c13c74ac" translate="yes" xml:space="preserve">
          <source>CPU options</source>
          <target state="translated">CPUオプション</target>
        </trans-unit>
        <trans-unit id="24a8f7b1bf8b2f150319572c55ec5f6a4bc99510" translate="yes" xml:space="preserve">
          <source>Cache size</source>
          <target state="translated">キャッシュサイズ</target>
        </trans-unit>
        <trans-unit id="365a37def929897716872484ac8bf7f0fc6ceb2a" translate="yes" xml:space="preserve">
          <source>Call an anonymous function using return values from other ReQL commands or queries as arguments.</source>
          <target state="translated">他のReQLコマンドやクエリの戻り値を引数として使用して、匿名関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a8e6bbd49b002cfe98d87402c10df0fd8d823cde" translate="yes" xml:space="preserve">
          <source>Call the function with those terms</source>
          <target state="translated">これらの条件を持つ関数を呼び出します</target>
        </trans-unit>
        <trans-unit id="16b4e8832fa0c6526ffa8efb14f8f0b718e9c61a" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;and&lt;/code&gt; with zero arguments will return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">呼び出し &lt;code&gt;and&lt;/code&gt; 引数を0にすると、 &lt;code&gt;true&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="803b84ea84c786de09c3354336db740dc963d127" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;getAll&lt;/code&gt; with zero arguments&amp;mdash;which could happen in this example if the &lt;code&gt;heroines&lt;/code&gt; list had no elements&amp;mdash;will return nothing, i.e., a zero length stream.</source>
          <target state="translated">引数を0にして &lt;code&gt;getAll&lt;/code&gt; を呼び出すと（ &lt;code&gt;heroines&lt;/code&gt; リストに要素がない場合にこの例で発生する可能性があります）、何も返されません（つまり、長さ0のストリーム）。</target>
        </trans-unit>
        <trans-unit id="8155b1df4d5cc12fc7c2c7fa91b359b53d72c728" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;max&lt;/code&gt; on an empty sequence will throw a non-existence error; this can be handled using the &lt;a href=&quot;../default/index&quot;&gt;default&lt;/a&gt; command.</source>
          <target state="translated">空のシーケンスで &lt;code&gt;max&lt;/code&gt; を呼び出すと、存在しないエラーがスローされます。これは、&lt;a href=&quot;../default/index&quot;&gt;デフォルトの&lt;/a&gt;コマンドを使用して処理できます。</target>
        </trans-unit>
        <trans-unit id="b4f4e3809e70523157258aa0104a068ac60d6aa8" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;min&lt;/code&gt; on an empty sequence will throw a non-existence error; this can be handled using the &lt;a href=&quot;../default/index&quot;&gt;default&lt;/a&gt; command.</source>
          <target state="translated">空のシーケンスで &lt;code&gt;min&lt;/code&gt; を呼び出すと、存在しないエラーがスローされます。これは、&lt;a href=&quot;../default/index&quot;&gt;デフォルトの&lt;/a&gt;コマンドを使用して処理できます。</target>
        </trans-unit>
        <trans-unit id="4b1787e0c53a29d985f0fb4128bc38f30679abe5" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;next&lt;/code&gt; the first time on a cursor provides the first element of the cursor. If the data set is exhausted (e.g., you have retrieved all the documents in a table), a &lt;code&gt;ReqlDriverError&lt;/code&gt; error will be passed to the callback when &lt;code&gt;next&lt;/code&gt; is called.</source>
          <target state="translated">呼び出し &lt;code&gt;next&lt;/code&gt; カーソルの最初の時間は、カーソルの最初の要素を提供します。データセットを使い果たした場合（たとえば、テーブル内のすべてのドキュメントを取得した場合）、 &lt;code&gt;next&lt;/code&gt; が呼び出されたときに &lt;code&gt;ReqlDriverError&lt;/code&gt; エラーがコールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="9327e8ee2404f2492c382e671d17ef91ec040f9b" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;or&lt;/code&gt; with zero arguments will return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">呼び出し、 &lt;code&gt;or&lt;/code&gt; 引数なしで &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="335fa9da2bbd4c247cc30817ce42cb87bcf4565d" translate="yes" xml:space="preserve">
          <source>Can I trade consistency for performance?</source>
          <target state="translated">パフォーマンスのために一貫性をトレードすることはできますか?</target>
        </trans-unit>
        <trans-unit id="6e5840c83e1efcd71687af3c532fe5fbab34d198" translate="yes" xml:space="preserve">
          <source>Can be rewritten with this function instead:</source>
          <target state="translated">代わりにこの関数で書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="0163f235110949da9e601e31cefa74790dd6b2a6" translate="yes" xml:space="preserve">
          <source>Case insensitive filter</source>
          <target state="translated">大文字小文字を区別しないフィルタ</target>
        </trans-unit>
        <trans-unit id="bb6b8e691a68ba0b2bae6924467f11ad22a02c5c" translate="yes" xml:space="preserve">
          <source>CatThink</source>
          <target state="translated">CatThink</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="51ad199d6352d3bb64db022bd0fbb0fcdea024f8" translate="yes" xml:space="preserve">
          <source>CentOS</source>
          <target state="translated">CentOS</target>
        </trans-unit>
        <trans-unit id="53fdbfe93cc93230bf3c3d4f728de4f799e768c5" translate="yes" xml:space="preserve">
          <source>Certain RethinkDB drivers support asynchronous connections by integrating with popular async libraries. This is particularly useful with &lt;a href=&quot;../changefeeds/javascript/index&quot;&gt;changefeeds&lt;/a&gt; and other real-time applications.</source>
          <target state="translated">特定のRethinkDBドライバーは、一般的な非同期ライブラリと統合することで非同期接続をサポートします。これは、&lt;a href=&quot;../changefeeds/javascript/index&quot;&gt;変更フィード&lt;/a&gt;やその他のリアルタイムアプリケーションで特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="83b3de7b443af60d30b4c86f7310d9f81cb41440" translate="yes" xml:space="preserve">
          <source>Certain document transformation commands can be chained before changefeeds. For more information, read the &lt;a href=&quot;../../../docs/changefeeds/javascript/index&quot;&gt;discussion of changefeeds&lt;/a&gt; in the &amp;ldquo;Query language&amp;rdquo; documentation.</source>
          <target state="translated">変更フィードの前に特定のドキュメント変換コマンドをチェーンできます。詳細については、「クエリ言語」ドキュメント&lt;a href=&quot;../../../docs/changefeeds/javascript/index&quot;&gt;の変更フィード&lt;/a&gt;の説明をご覧ください。</target>
        </trans-unit>
        <trans-unit id="b6800db5938c446a73c51460875152477518277a" translate="yes" xml:space="preserve">
          <source>Certificates and keys may be specified with either &lt;a href=&quot;../cli-options/index&quot;&gt;command line options&lt;/a&gt; or as keys in a &lt;a href=&quot;../config-file/index&quot;&gt;configuration file&lt;/a&gt;. To start RethinkDB and tell it to secure the web administration UI, you can start the server with the following options:</source>
          <target state="translated">証明書とキーは、&lt;a href=&quot;../cli-options/index&quot;&gt;コマンドラインオプションで、&lt;/a&gt;または&lt;a href=&quot;../config-file/index&quot;&gt;構成ファイルの&lt;/a&gt;キーとして指定できます。RethinkDBを起動してWeb管理UIを保護するように指示するには、次のオプションを使用してサーバーを起動できます。</target>
        </trans-unit>
        <trans-unit id="64fbd995d3b6b156ee26ae3c03e6516434c34c12" translate="yes" xml:space="preserve">
          <source>Change</source>
          <target state="translated">Change</target>
        </trans-unit>
        <trans-unit id="8c5f763a334b50e54f44e54efef21947da085709" translate="yes" xml:space="preserve">
          <source>Change a value in an array at a given index. Returns the modified array.</source>
          <target state="translated">指定したインデックスの配列の値を変更します。変更した配列を返します。</target>
        </trans-unit>
        <trans-unit id="51332a45f02c777545b37ca7f2a2188cb92d500f" translate="yes" xml:space="preserve">
          <source>Change the default database on this connection.</source>
          <target state="translated">この接続のデフォルトのデータベースを変更します。</target>
        </trans-unit>
        <trans-unit id="e107154c99e8c610e45c6e29e9e7058cf41ac06e" translate="yes" xml:space="preserve">
          <source>Changefeed notifications take the form of a two-field object:</source>
          <target state="translated">チェンジフィードの通知は、2つのフィールドオブジェクトの形をしています。</target>
        </trans-unit>
        <trans-unit id="f16b9561940cdffe16531705a4d95a3d577a5ff3" translate="yes" xml:space="preserve">
          <source>Changefeeds</source>
          <target state="translated">Changefeeds</target>
        </trans-unit>
        <trans-unit id="ce556a491ced95908a7a6c39b48d9b09e471112a" translate="yes" xml:space="preserve">
          <source>Changefeeds in RethinkDB</source>
          <target state="translated">RethinkDBのChangefeeds</target>
        </trans-unit>
        <trans-unit id="83047e5cfdb0dcb2f77af45422edd14b6869a792" translate="yes" xml:space="preserve">
          <source>Changefeeds perform well as they scale, although they create extra intracluster messages in proportion to the number of servers with open feed connections on each write. This can be mitigated by running a RethinkDB proxy server (the &lt;code&gt;rethinkdb proxy&lt;/code&gt; startup option); read &lt;a href=&quot;../../sharding-and-replication/index#running-a-proxy-node&quot;&gt;Running a proxy node&lt;/a&gt; for details.</source>
          <target state="translated">変更フィードはスケーリングに応じて適切に機能しますが、書き込みごとにオープンフィード接続を持つサーバーの数に比例して追加のクラスター内メッセージが作成されます。これは、RethinkDBプロキシサーバー（ &lt;code&gt;rethinkdb proxy&lt;/code&gt; 起動オプション）を実行することで軽減できます。読み&lt;a href=&quot;../../sharding-and-replication/index#running-a-proxy-node&quot;&gt;代理ノード実行&lt;/a&gt;詳細については、を。</target>
        </trans-unit>
        <trans-unit id="8aa6bce79098087f28ac4e20f72cc2f1a6d8f0b6" translate="yes" xml:space="preserve">
          <source>Changefeeds with filtering and aggregation queries</source>
          <target state="translated">フィルタリングとアグリゲーションクエリによる変更フィード</target>
        </trans-unit>
        <trans-unit id="1109c426cb18409bd531e862e44fb833bc26bcfe" translate="yes" xml:space="preserve">
          <source>Changing a table&amp;rsquo;s primary key type</source>
          <target state="translated">テーブルの主キータイプの変更</target>
        </trans-unit>
        <trans-unit id="4bb3102ea489ad152248787bbc4c0b2d6dabd6c4" translate="yes" xml:space="preserve">
          <source>Changing the web UI password</source>
          <target state="translated">Web UIのパスワードを変更する</target>
        </trans-unit>
        <trans-unit id="23a80ca01bcc3d4adc8acf64cfeb1295a9085727" translate="yes" xml:space="preserve">
          <source>Channels multiplex a single TCP connection. All RabbitMQ operations are performed on the channel, rather than directly on a connection. Next, we&amp;rsquo;ll declare the topic exchange so we have somewhere to send our change notifications:</source>
          <target state="translated">チャネルは単一のTCP接続を多重化します。すべてのRabbitMQ操作は、直接接続ではなく、チャネルで実行されます。次に、トピック交換を宣言して、変更通知をどこかに送信できるようにします。</target>
        </trans-unit>
        <trans-unit id="8d76b841450292d7454c5067a8aed356d29fb4d6" translate="yes" xml:space="preserve">
          <source>Check if you ran out of memory</source>
          <target state="translated">メモリを使い果たしたかどうかをチェック</target>
        </trans-unit>
        <trans-unit id="ff6e9eabb67a59731c2a16e9ce5fc2c636e3d4b5" translate="yes" xml:space="preserve">
          <source>Check socks v5</source>
          <target state="translated">チェックソックス5</target>
        </trans-unit>
        <trans-unit id="06605619ef52291f92f58c83edf0267a57055e85" translate="yes" xml:space="preserve">
          <source>Check the log</source>
          <target state="translated">ログの確認</target>
        </trans-unit>
        <trans-unit id="b983a8257297706e0953fa3b4171875e05600dd4" translate="yes" xml:space="preserve">
          <source>Choose an AMI password.</source>
          <target state="translated">AMIパスワードを選択します。</target>
        </trans-unit>
        <trans-unit id="1be80b707dabbe0a135e904409b854db24612ac5" translate="yes" xml:space="preserve">
          <source>Chrome 9 or higher</source>
          <target state="translated">クローム9以上</target>
        </trans-unit>
        <trans-unit id="a89141a1040181c06bdbd4349e235d3d3a992ae7" translate="yes" xml:space="preserve">
          <source>Click on &lt;strong&gt;Add Rule&lt;/strong&gt;, and &lt;strong&gt;Apply rule changes&lt;/strong&gt;.</source>
          <target state="translated">[ &lt;strong&gt;ルールの追加]を&lt;/strong&gt;クリックし、[ &lt;strong&gt;ルールの変更&lt;/strong&gt;を&lt;strong&gt;適用] &lt;/strong&gt;&lt;strong&gt;を&lt;/strong&gt;クリックし&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="615106c3285269c51d26e439c7c7b80cf6e2c432" translate="yes" xml:space="preserve">
          <source>Click on the &lt;em&gt;Apply Configuration&lt;/em&gt; button.</source>
          <target state="translated">「&lt;em&gt;構成&lt;/em&gt;の&lt;em&gt;適用」&lt;/em&gt;ボタンをクリックします。</target>
        </trans-unit>
        <trans-unit id="ec90cdce6f708fcfeb949d4f604d6332096c1bb7" translate="yes" xml:space="preserve">
          <source>Click on the &lt;em&gt;Data Explorer&lt;/em&gt; tab in the browser. You can manipulate data using JavaScript straight from your browser. By default, RethinkDB creates a database named &lt;code&gt;test&lt;/code&gt;. Let&amp;rsquo;s create a table:</source>
          <target state="translated">ブラウザの[ &lt;em&gt;データエクスプローラ&lt;/em&gt; ]タブをクリックします。ブラウザから直接JavaScriptを使用してデータを操作できます。デフォルトでは、RethinkDBは &lt;code&gt;test&lt;/code&gt; という名前のデータベースを作成します。テーブルを作成しましょう：</target>
        </trans-unit>
        <trans-unit id="be5437b02a5d8fa47cab50d539b46f320d9d569e" translate="yes" xml:space="preserve">
          <source>Click on the &lt;em&gt;Reconfigure&lt;/em&gt; button.</source>
          <target state="translated">[ &lt;em&gt;再構成&lt;/em&gt; ]ボタンをクリックします。</target>
        </trans-unit>
        <trans-unit id="8ed4898c442ebe6b95d3356b5c77c6750f73810b" translate="yes" xml:space="preserve">
          <source>Click on the link &lt;strong&gt;&lt;a href=&quot;https://aws.amazon.com/marketplace/library&quot;&gt;Your Software&lt;/a&gt;&lt;/strong&gt; in the upper right. RethinkDB should appear as one of your software subscriptions.</source>
          <target state="translated">右上の&lt;strong&gt;&lt;a href=&quot;https://aws.amazon.com/marketplace/library&quot;&gt;「ソフトウェア」&lt;/a&gt;&lt;/strong&gt;リンクをクリックします。RethinkDBは、ソフトウェアサブスクリプションの1つとして表示されます。</target>
        </trans-unit>
        <trans-unit id="60f86b3c1e117ba4de2f7b4ea24bcb157a1e493b" translate="yes" xml:space="preserve">
          <source>Click the &amp;ldquo;Add Deployment&amp;rdquo; button in the Compose administration panel.</source>
          <target state="translated">作成管理パネルの「デプロイメントを追加」ボタンをクリックします。</target>
        </trans-unit>
        <trans-unit id="532a6530c3c1863698a255ddab78fd5d478fa911" translate="yes" xml:space="preserve">
          <source>Clients may specify &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; values in the &lt;a href=&quot;../../api/javascript/connect/index&quot;&gt;connect&lt;/a&gt; command. For more information about creating and managing user accounts and permissions, read &lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;Permissions and user accounts&lt;/a&gt;.</source>
          <target state="translated">クライアントは、&lt;a href=&quot;../../api/javascript/connect/index&quot;&gt;connect&lt;/a&gt;コマンドで &lt;code&gt;user&lt;/code&gt; と &lt;code&gt;password&lt;/code&gt; 値を指定できます。ユーザーアカウントと権限の作成と管理の詳細については、&lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;権限とユーザーアカウントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="e1d4034c95591a611c30849b57d9ad91baa6f6b8" translate="yes" xml:space="preserve">
          <source>Clojure</source>
          <target state="translated">Clojure</target>
        </trans-unit>
        <trans-unit id="cd5d28232a2a9d0e1e775d321001a08386a88905" translate="yes" xml:space="preserve">
          <source>Close a cursor. Closing a cursor cancels the corresponding query and frees the memory associated with the open request.</source>
          <target state="translated">カーソルを閉じる。カーソルを閉じると、対応するクエリがキャンセルされ、開いているリクエストに関連付けられたメモリが解放されます。</target>
        </trans-unit>
        <trans-unit id="425b7f5e5b79bae31dedd70be414d8b15176cbde" translate="yes" xml:space="preserve">
          <source>Close an open connection. If no callback is provided, a promise will be returned.</source>
          <target state="translated">開いている接続を閉じます。コールバックが提供されない場合は、プロミスが返されます。</target>
        </trans-unit>
        <trans-unit id="6665e849372cf8ab89263fcba8969d9f80ad1e26" translate="yes" xml:space="preserve">
          <source>Close and reopen a connection. If no callback is provided, a promise will be returned.</source>
          <target state="translated">接続を閉じて再開します。コールバックが提供されない場合は、プロミスが返されます。</target>
        </trans-unit>
        <trans-unit id="a0df904475eb4c2d01e6e8d48fee5a425571d011" translate="yes" xml:space="preserve">
          <source>Closing a connection normally waits until all outstanding requests have finished and then frees any open resources associated with the connection. By passing &lt;code&gt;false&lt;/code&gt; to the &lt;code&gt;noreply_wait&lt;/code&gt; optional argument, the connection will be closed immediately, possibly aborting any outstanding noreply writes.</source>
          <target state="translated">通常、接続を閉じると、すべての未処理の要求が完了するまで待機し、接続に関連付けられている開いているリソースをすべて解放します。 &lt;code&gt;noreply_wait&lt;/code&gt; オプション引数に &lt;code&gt;false&lt;/code&gt; を渡すと、接続がすぐに閉じられ、未処理のnoreply書き込みが中止される可能性があります。</target>
        </trans-unit>
        <trans-unit id="02260940ccbe5e799268b13799fb479d59d46db3" translate="yes" xml:space="preserve">
          <source>Combine them into a single query:</source>
          <target state="translated">それらを一つのクエリに結合します。</target>
        </trans-unit>
        <trans-unit id="f2300ab17d00aa275b53062bd5370e24c1fe840f" translate="yes" xml:space="preserve">
          <source>Command and output:</source>
          <target state="translated">コマンドと出力。</target>
        </trans-unit>
        <trans-unit id="6e3d3bf1961b8057b125fc05310e2099de8793b0" translate="yes" xml:space="preserve">
          <source>Command line options</source>
          <target state="translated">コマンドラインオプション</target>
        </trans-unit>
        <trans-unit id="daad2afc533cd0e550046cb11f14733b1b39dc43" translate="yes" xml:space="preserve">
          <source>Command syntax</source>
          <target state="translated">コマンド構文</target>
        </trans-unit>
        <trans-unit id="be26df5cdd5fdd3aeb21e737a36aec43aa9993d6" translate="yes" xml:space="preserve">
          <source>Commands chained after &lt;code&gt;group&lt;/code&gt; operate on each group separately. If you want to operate on all the groups at once (e.g. to order them), you need to call &lt;a href=&quot;https://rethinkdb.com/api/python/ungroup/&quot;&gt;&lt;strong&gt;ungroup&lt;/strong&gt;&lt;/a&gt; before doing so.</source>
          <target state="translated">&lt;code&gt;group&lt;/code&gt; 後にチェーンされたコマンドは、各グループで個別に動作します。すべてのグループを一度に操作したい場合（たとえば、それらを注文する場合）、それを行う前に&lt;a href=&quot;https://rethinkdb.com/api/python/ungroup/&quot;&gt;&lt;strong&gt;ungroup&lt;/strong&gt;&lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="b1c0f43db47d343152582ce98dd9b9c36f78684b" translate="yes" xml:space="preserve">
          <source>Commands chained after &lt;code&gt;group&lt;/code&gt; will be called on each of these grouped sub-streams, producing grouped data.</source>
          <target state="translated">&lt;code&gt;group&lt;/code&gt; の後にチェーンされたコマンドは、これらのグループ化されたサブストリームのそれぞれで呼び出され、グループ化されたデータを生成します。</target>
        </trans-unit>
        <trans-unit id="97dd52ee8df84cc2460b7bb17c1f06e4df4b684f" translate="yes" xml:space="preserve">
          <source>Commands chained onto grouped data will operate on each grouped datum, producing more grouped data.</source>
          <target state="translated">グループ化されたデータに連結されたコマンドは、グループ化された各データに対して動作し、より多くのグループ化されたデータを生成します。</target>
        </trans-unit>
        <trans-unit id="b06b66dfcdb2aa6fd46fbb67d549b62f59b7ddac" translate="yes" xml:space="preserve">
          <source>Commands that operate on streams (such as &lt;a href=&quot;../filter/index&quot;&gt;filter&lt;/a&gt; or &lt;a href=&quot;../map/index&quot;&gt;map&lt;/a&gt;) can usually be chained after &lt;code&gt;changes&lt;/code&gt;. However, since the stream produced by &lt;code&gt;changes&lt;/code&gt; has no ending, commands that need to consume the entire stream before returning (such as &lt;a href=&quot;../reduce/index&quot;&gt;reduce&lt;/a&gt; or &lt;a href=&quot;../count/index&quot;&gt;count&lt;/a&gt;) cannot.</source>
          <target state="translated">ストリームを操作するコマンド（&lt;a href=&quot;../filter/index&quot;&gt;フィルター&lt;/a&gt;や&lt;a href=&quot;../map/index&quot;&gt;マップなど&lt;/a&gt;）は通常、 &lt;code&gt;changes&lt;/code&gt; 後にチェーンできます。ただし、 &lt;code&gt;changes&lt;/code&gt; によって生成されたストリームには終了がないため、戻る前にストリーム全体を消費する必要があるコマンド（&lt;a href=&quot;../reduce/index&quot;&gt;reduce&lt;/a&gt;または&lt;a href=&quot;../count/index&quot;&gt;countなど&lt;/a&gt;）は終了できません。</target>
        </trans-unit>
        <trans-unit id="9420c5b6b64cb46409b5ff675ca0bd0aef82e7cd" translate="yes" xml:space="preserve">
          <source>Commands that stop subsequent commands from being parallelized include:</source>
          <target state="translated">後続のコマンドが並列化されないようにするコマンドには、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="92c16762b88f8df8579abe15c36515ac11209886" translate="yes" xml:space="preserve">
          <source>Common Lisp</source>
          <target state="translated">コモンリスプ</target>
        </trans-unit>
        <trans-unit id="6716b5e80c5a7a4a1a9ac6b7780bbba5290a6d87" translate="yes" xml:space="preserve">
          <source>Common operations such as scaling up and down, rebalancing shards, and increasing/decreasing replication count should easily be performed in a click of a button.</source>
          <target state="translated">スケールアップやスケールダウン、シャードのリバランス、レプリケーション数の増減などの一般的な操作は、ボタンをクリックするだけで簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="0ff484b1571088890a609e5075a56ceac4c71bf4" translate="yes" xml:space="preserve">
          <source>Community support</source>
          <target state="translated">コミュニティ支援</target>
        </trans-unit>
        <trans-unit id="adf62d677ff08c0773b6bf8016d1c5d62fe7e3e6" translate="yes" xml:space="preserve">
          <source>Community supported packages</source>
          <target state="translated">コミュニティがサポートするパッケージ</target>
        </trans-unit>
        <trans-unit id="13d6089cf6c38e5531d093155b82745c67c6422c" translate="yes" xml:space="preserve">
          <source>Compare values, testing if the left-hand value is greater than or equal to the right-hand.</source>
          <target state="translated">値を比較し、左側の値が右側の値より大きいかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="59084f9f33c9372c82cdc88825f185f2940f36d1" translate="yes" xml:space="preserve">
          <source>Compare values, testing if the left-hand value is greater than the right-hand.</source>
          <target state="translated">値を比較し、左手の値が右手より大きいかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="d649a4b84fbed163da58e43f7af9bac406e226f9" translate="yes" xml:space="preserve">
          <source>Compare values, testing if the left-hand value is less than or equal to the right-hand.</source>
          <target state="translated">値を比較し、左側の値が右側の値以下かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="a8e61dc0d3cb83f724942759ac08090ca4383150" translate="yes" xml:space="preserve">
          <source>Compare values, testing if the left-hand value is less than the right-hand.</source>
          <target state="translated">値を比較し、左手の値が右手より小さいかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="72158d6e3482e00cedae532226bd81727e66a164" translate="yes" xml:space="preserve">
          <source>Comparing times</source>
          <target state="translated">時間の比較</target>
        </trans-unit>
        <trans-unit id="2be6c60dc28a5a4b4af7a4cfdb4d5bb4e105a111" translate="yes" xml:space="preserve">
          <source>Composing queries isn&amp;rsquo;t limited to simple commands and inner queries. You can also use expressions to perform complex operations. For example, suppose we&amp;rsquo;d like to find all users whose salary and bonus don&amp;rsquo;t exceed $90,000, and increase their salary by 10%:</source>
          <target state="translated">クエリの作成は、単純なコマンドと内部クエリに限定されません。式を使用して複雑な操作を実行することもできます。たとえば、給与とボーナスが90,000ドルを超えないすべてのユーザーを検索し、給与を10％増やしたいとします。</target>
        </trans-unit>
        <trans-unit id="0729e81470dc1e98cbd409361551ecdeba848d28" translate="yes" xml:space="preserve">
          <source>Composing simple commands</source>
          <target state="translated">簡単なコマンドを構成する</target>
        </trans-unit>
        <trans-unit id="d5b0b39be8f5ddf352e10f034572a1fb4a9d796f" translate="yes" xml:space="preserve">
          <source>Compound indexes</source>
          <target state="translated">複合インデックス</target>
        </trans-unit>
        <trans-unit id="cb06d0216db3cc19e02489c7c95e8fd8bc56f4d2" translate="yes" xml:space="preserve">
          <source>Compound indexes use arrays to efficiently retrieve documents by multiple fields.</source>
          <target state="translated">複合インデックスは配列を使用して、複数のフィールドで効率的に文書を検索します。</target>
        </trans-unit>
        <trans-unit id="f4e0921a6941e50e149069eb9f0f60a8e9be0969" translate="yes" xml:space="preserve">
          <source>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</source>
          <target state="translated">点と別のジオメトリオブジェクトの間の距離を計算します。指定されたジオメトリオブジェクトのうち、少なくとも 1 つは点でなければなりません。</target>
        </trans-unit>
        <trans-unit id="fb1bff4039e68d2f120d05eb07897fb16add4133" translate="yes" xml:space="preserve">
          <source>Compute the logical &amp;ldquo;and&amp;rdquo; of one or more values.</source>
          <target state="translated">1つ以上の値の論理「and」を計算します。</target>
        </trans-unit>
        <trans-unit id="16d08899d02d77d5636cfe66a843fc990bf04888" translate="yes" xml:space="preserve">
          <source>Compute the logical &amp;ldquo;or&amp;rdquo; of one or more values.</source>
          <target state="translated">1つ以上の値の論理「or」を計算します。</target>
        </trans-unit>
        <trans-unit id="72ba2515171440cbad57c6a578705b7dcd3bf051" translate="yes" xml:space="preserve">
          <source>Compute the logical inverse (not) of an expression.</source>
          <target state="translated">式の論理逆数を計算します。</target>
        </trans-unit>
        <trans-unit id="9645d9cf5653c1eb09aaa709f2f90fc517896bd5" translate="yes" xml:space="preserve">
          <source>Computing the average value of a field</source>
          <target state="translated">フィールドの平均値を計算する</target>
        </trans-unit>
        <trans-unit id="4a091e6878de4be6867eb509e2ca123c396f2d38" translate="yes" xml:space="preserve">
          <source>Concatenate one or more elements into a single sequence using a mapping function.</source>
          <target state="translated">マッピング関数を使用して、1つ以上の要素を1つのシーケンスに連結します。</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="7972d786701ebfffae096c85c80b27b9730a2c01" translate="yes" xml:space="preserve">
          <source>Configuration file options</source>
          <target state="translated">設定ファイルのオプション</target>
        </trans-unit>
        <trans-unit id="23780f67b9c5d802e162f80cd175fc9ca05fb6c0" translate="yes" xml:space="preserve">
          <source>Configuration file settings</source>
          <target state="translated">設定ファイルの設定</target>
        </trans-unit>
        <trans-unit id="a97f56eb2d8f1800ef216d96472eee2c20278153" translate="yes" xml:space="preserve">
          <source>Configuration tables</source>
          <target state="translated">設定テーブル</target>
        </trans-unit>
        <trans-unit id="3ec3060e02f6f681bf499f63fb144de277a8c8c2" translate="yes" xml:space="preserve">
          <source>Congrats, you&amp;rsquo;re on your way to database bliss! Now move on to the &lt;a href=&quot;../guide/javascript/index&quot;&gt;ten-minute guide&lt;/a&gt; and learn how to use the client drivers, get more in-depth information on basic commands, and start writing real applications with RethinkDB.</source>
          <target state="translated">おめでとうございます、これでデータベースの至福に向かっています！今すぐに移動&lt;a href=&quot;../guide/javascript/index&quot;&gt;10分のガイド&lt;/a&gt;とクライアントドライバを使用する方法を学び、基本的なコマンドに関するより詳細な情報を取得し、RethinkDBと実際のアプリケーションを書き始めます。</target>
        </trans-unit>
        <trans-unit id="be147818fb7dcedfad35b84f7650997eaa4ece3c" translate="yes" xml:space="preserve">
          <source>Connect to the cluster at host &lt;code&gt;fortress&lt;/code&gt; with a client port at &lt;code&gt;39500&lt;/code&gt;, saving to the default archive name.</source>
          <target state="translated">クライアントポートが &lt;code&gt;39500&lt;/code&gt; のホスト &lt;code&gt;fortress&lt;/code&gt; にあるクラスターに接続し、デフォルトのアーカイブ名に保存します。</target>
        </trans-unit>
        <trans-unit id="4ac344592a1f24be4a08d0dab407474e8de8c32e" translate="yes" xml:space="preserve">
          <source>Connect to the default cluster (&lt;code&gt;localhost:28015&lt;/code&gt;) and archive the &lt;code&gt;users&lt;/code&gt; table from the &lt;code&gt;league&lt;/code&gt; database in &lt;code&gt;backup.tar.gz&lt;/code&gt;. Read the &lt;code&gt;admin&lt;/code&gt; user password from the file &lt;code&gt;pw.txt&lt;/code&gt;.</source>
          <target state="translated">デフォルトのクラスター（ &lt;code&gt;localhost:28015&lt;/code&gt; ）に接続し、 &lt;code&gt;league&lt;/code&gt; テーブルの &lt;code&gt;users&lt;/code&gt; テーブルを &lt;code&gt;backup.tar.gz&lt;/code&gt; にアーカイブします。ファイル &lt;code&gt;pw.txt&lt;/code&gt; から &lt;code&gt;admin&lt;/code&gt; ユーザーのパスワードを読み取ります。</target>
        </trans-unit>
        <trans-unit id="81c159c760c656688b2c30205693dc90ccf3e5b2" translate="yes" xml:space="preserve">
          <source>Connection pool for RethinkDB connections.</source>
          <target state="translated">RethinkDB接続用の接続プール。</target>
        </trans-unit>
        <trans-unit id="b22d7f9889593d87977fab58a4efd0cd2be437a1" translate="yes" xml:space="preserve">
          <source>Connections implement the same interface as Node&amp;rsquo;s &lt;a href=&quot;http://nodejs.org/api/events.html#events_class_events_eventemitter&quot;&gt;EventEmitter&lt;/a&gt;. This allows you to listen for changes in connection state.</source>
          <target state="translated">接続は、ノードの&lt;a href=&quot;http://nodejs.org/api/events.html#events_class_events_eventemitter&quot;&gt;EventEmitter&lt;/a&gt;と同じインターフェースを実装します。これにより、接続状態の変化をリッスンできます。</target>
        </trans-unit>
        <trans-unit id="324822c2e356211721e9205cd22171564a475de6" translate="yes" xml:space="preserve">
          <source>Connections implement the same interface as Node&amp;rsquo;s [EventEmitter][ee]. This allows you to listen for changes in connection state.</source>
          <target state="translated">接続は、ノードの[EventEmitter] [ee]と同じインターフェースを実装します。これにより、接続状態の変化をリッスンできます。</target>
        </trans-unit>
        <trans-unit id="434e89a6f01cf4fadcd2961b05fe337dcbc0e6d0" translate="yes" xml:space="preserve">
          <source>Connectivity issues</source>
          <target state="translated">接続性の問題</target>
        </trans-unit>
        <trans-unit id="bcb25364dacde36011fe92d609c796f90b4f7cc0" translate="yes" xml:space="preserve">
          <source>Consider a user table with contact information and a list of notes for each user in this format:</source>
          <target state="translated">このような形式で、連絡先情報と各ユーザーのメモのリストを持つユーザーテーブルを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="1e6f64ab75678829dd084a6595e2b0ae29ecddec" translate="yes" xml:space="preserve">
          <source>Consider the following query:</source>
          <target state="translated">次のクエリを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="df6db8b51cf93b005324de4cfaea48119c51962e" translate="yes" xml:space="preserve">
          <source>Consistency guarantees</source>
          <target state="translated">一貫性の保証</target>
        </trans-unit>
        <trans-unit id="6d7b91115433e94222d24884624760ab0c0a085b" translate="yes" xml:space="preserve">
          <source>Construct a ReQL JSON object from a native object.</source>
          <target state="translated">ネイティブオブジェクトからReQL JSONオブジェクトを構築します。</target>
        </trans-unit>
        <trans-unit id="44c0cefdc4712a425f6ac14e08cf734075ab4cdf" translate="yes" xml:space="preserve">
          <source>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line &lt;em&gt;approximating&lt;/em&gt; a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</source>
          <target state="translated">円形の線または多角形を作成します。RethinkDBの円は、特定の中心を中心とした特定の半径の円を&lt;em&gt;近似&lt;/em&gt;するポリゴンまたはラインであり、指定された数の頂点で構成されます（デフォルトは32）。</target>
        </trans-unit>
        <trans-unit id="a1fa5fe5d2f9482eae4f882a43397a8b53f582b0" translate="yes" xml:space="preserve">
          <source>Construct a geometry object of type Line. The line can be specified in one of two ways:</source>
          <target state="translated">Line 型のジオメトリオブジェクトを構築します。線は2つの方法のいずれかで指定することができます。</target>
        </trans-unit>
        <trans-unit id="02f055ba8551742fcaf10b6808303ca03909f646" translate="yes" xml:space="preserve">
          <source>Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (&amp;minus;180 to 180) and latitude (&amp;minus;90 to 90) of the point on a perfect sphere. See &lt;a href=&quot;../../../docs/geo-support/javascript/index&quot;&gt;Geospatial support&lt;/a&gt; for more information on ReQL&amp;rsquo;s coordinate system.</source>
          <target state="translated">タイプPointのジオメトリオブジェクトを作成します。点は、完全な球上の点の経度（-180〜180）と緯度（-90〜90）の2つの浮動小数点数で指定されます。ReQLの座標系の詳細については、&lt;a href=&quot;../../../docs/geo-support/javascript/index&quot;&gt;地理空間サポート&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7f3265740e5336bfac9bf045cceb4d6265f0f9be" translate="yes" xml:space="preserve">
          <source>Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (&amp;minus;180 to 180) and latitude (&amp;minus;90 to 90) of the point on a perfect sphere. See &lt;a href=&quot;../../docs/geo-support/javascript/index&quot;&gt;Geospatial support&lt;/a&gt; for more information on ReQL&amp;rsquo;s coordinate system.</source>
          <target state="translated">タイプPointのジオメトリオブジェクトを作成します。点は、完全な球上の点の経度（-180〜180）と緯度（-90〜90）の2つの浮動小数点数で指定されます。ReQLの座標系の詳細については、&lt;a href=&quot;../../docs/geo-support/javascript/index&quot;&gt;地理空間サポート&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="02ca61e3fe454b1b333ec828802d038ea0ab154a" translate="yes" xml:space="preserve">
          <source>Construct a geometry object of type Polygon. The Polygon can be specified in one of two ways:</source>
          <target state="translated">Polygon 型のジオメトリオブジェクトを作成します。ポリゴンを指定するには、以下の2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="2f74ad5006a6b5413b68634f7db50fc09504232d" translate="yes" xml:space="preserve">
          <source>Contribute a driver</source>
          <target state="translated">ドライバーを投稿する</target>
        </trans-unit>
        <trans-unit id="49551177d73377982310b6a218929215d8146939" translate="yes" xml:space="preserve">
          <source>Control Structures</source>
          <target state="translated">制御構造</target>
        </trans-unit>
        <trans-unit id="e9a6cd2c027cdd8e9cffcd80a142066e34cb43d1" translate="yes" xml:space="preserve">
          <source>Control structures</source>
          <target state="translated">制御構造</target>
        </trans-unit>
        <trans-unit id="e9fd657a44842d39578b1631d445afc29a19895b" translate="yes" xml:space="preserve">
          <source>Convert a &lt;a href=&quot;http://geojson.org&quot;&gt;GeoJSON&lt;/a&gt; object to a ReQL geometry object.</source>
          <target state="translated">&lt;a href=&quot;http://geojson.org&quot;&gt;GeoJSON&lt;/a&gt;オブジェクトをReQLジオメトリオブジェクトに変換します。</target>
        </trans-unit>
        <trans-unit id="7a5bc8515669837fb41d2a7d5a86376e75bc72fd" translate="yes" xml:space="preserve">
          <source>Convert a Line object into a Polygon object. If the last point does not specify the same coordinates as the first point, &lt;code&gt;polygon&lt;/code&gt; will close the polygon by connecting them.</source>
          <target state="translated">LineオブジェクトをPolygonオブジェクトに変換します。最後の点が最初の点と同じ座標を指定しない場合、 &lt;code&gt;polygon&lt;/code&gt; はそれらを接続することによって多角形を閉じます。</target>
        </trans-unit>
        <trans-unit id="a5d2274b1a7341d67fceb07fa84a094d6935c52a" translate="yes" xml:space="preserve">
          <source>Convert a ReQL geometry object to a &lt;a href=&quot;http://geojson.org&quot;&gt;GeoJSON&lt;/a&gt; object.</source>
          <target state="translated">ReQLジオメトリオブジェクトを&lt;a href=&quot;http://geojson.org&quot;&gt;GeoJSON&lt;/a&gt;オブジェクトに変換します。</target>
        </trans-unit>
        <trans-unit id="f77d484459537765d11d104c255735be81e4f21f" translate="yes" xml:space="preserve">
          <source>Convert a ReQL value or object to a JSON string. You may use either &lt;code&gt;toJsonString&lt;/code&gt; or &lt;code&gt;toJSON&lt;/code&gt;.</source>
          <target state="translated">ReQL値またはオブジェクトをJSON文字列に変換します。 &lt;code&gt;toJsonString&lt;/code&gt; または &lt;code&gt;toJSON&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="f422be1d3135214f13f66aa59f8289d86b845bb5" translate="yes" xml:space="preserve">
          <source>Convert a time object to a string in ISO 8601 format.</source>
          <target state="translated">時刻オブジェクトをISO 8601形式の文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="611794a8b0346b081c0bde7f2d9e76b191ec250c" translate="yes" xml:space="preserve">
          <source>Convert a time object to its epoch time.</source>
          <target state="translated">時間オブジェクトをそのエポック時間に変換します。</target>
        </trans-unit>
        <trans-unit id="2f92780f9a3cd70e7b66d5965dc8d4e66b6c4add" translate="yes" xml:space="preserve">
          <source>Convert a value of one type into another.</source>
          <target state="translated">ある型の値を別の型に変換します。</target>
        </trans-unit>
        <trans-unit id="ae28e153fd42b3087fa9d3d89c76a5aaf5e4b04c" translate="yes" xml:space="preserve">
          <source>Cookbook</source>
          <target state="translated">Cookbook</target>
        </trans-unit>
        <trans-unit id="0ae70d9d2c2989bbcbf4991bb2de539613db27dd" translate="yes" xml:space="preserve">
          <source>Cookbook for JavaScript</source>
          <target state="translated">JavaScriptのためのクックブック</target>
        </trans-unit>
        <trans-unit id="8330b94c9770af7c9d2bcc391d6d8c51c2abb9e2" translate="yes" xml:space="preserve">
          <source>Coordinate system</source>
          <target state="translated">座標系</target>
        </trans-unit>
        <trans-unit id="7dcedaf8a37599ae4419f16070143fa71cdc50f9" translate="yes" xml:space="preserve">
          <source>Coordinates of points on the sphere&amp;rsquo;s surface are addressed by a pair of floating point numbers that denote longitude and latitude. The range of longitude is &amp;minus;180 through 180, which wraps around the whole of the sphere: &amp;minus;180 and 180 denote the same line. The range of latitude is &amp;minus;90 (the south pole) through 90 (the north pole).</source>
          <target state="translated">球の表面上の点の座標は、経度と緯度を示す浮動小数点数のペアによってアドレス指定されます。経度の範囲は&amp;minus;180から180で、球全体を包みます。&amp;minus;180と180は同じ線を示します。緯度の範囲は-90（南極）から90（北極）です。</target>
        </trans-unit>
        <trans-unit id="98a2c0bedbf391bc1c5026f0b8dee7952e7dcaa7" translate="yes" xml:space="preserve">
          <source>Copy the sample configuration file and use the &lt;a href=&quot;../config-file/index&quot;&gt;configuration file&lt;/a&gt; documentation as a guide to customize it. (If you don&amp;rsquo;t have the sample &lt;code&gt;.conf&lt;/code&gt; file, you can download it &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample&quot;&gt;here&lt;/a&gt;.)</source>
          <target state="translated">サンプル構成ファイルをコピーし、&lt;a href=&quot;../config-file/index&quot;&gt;構成ファイルの&lt;/a&gt;ドキュメントをガイドとして使用してカスタマイズします。（サンプルの &lt;code&gt;.conf&lt;/code&gt; ファイルがない場合は、&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample&quot;&gt;ここから&lt;/a&gt;ダウンロードできます。）</target>
        </trans-unit>
        <trans-unit id="7c53e46cfafd02d02e2a1ed4e38c3b84c04ce8e1" translate="yes" xml:space="preserve">
          <source>Couldn't find what you were looking for?</source>
          <target state="translated">探していたものは見つかりませんでしたか?</target>
        </trans-unit>
        <trans-unit id="1f7dc5fdf24764ccb629dac7815dd074e76aa8dd" translate="yes" xml:space="preserve">
          <source>Counting the number of documents in a table</source>
          <target state="translated">表の文書数をカウントする</target>
        </trans-unit>
        <trans-unit id="d09ddb95cb87ac429fd23b39f1b5db85729319f5" translate="yes" xml:space="preserve">
          <source>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</source>
          <target state="translated">シーケンス内の要素数、またはオブジェクト内のキーと値のペアの数を数え、文字列またはバイナリオブジェクトのサイズを返します。</target>
        </trans-unit>
        <trans-unit id="9e299fd9eb3f8e602590dd8b398e04ff6f970993" translate="yes" xml:space="preserve">
          <source>Crash recovery</source>
          <target state="translated">クラッシュ回復</target>
        </trans-unit>
        <trans-unit id="9538577265ea3ebeb795945713801b501bc50683" translate="yes" xml:space="preserve">
          <source>Create &lt;code&gt;/Library/LaunchDaemons/com.rethinkdb.server.plist&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;/Library/LaunchDaemons/com.rethinkdb.server.plist&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="d19724d0befdfd70ba3a4bc2f5a4f05c0bce9fcb" translate="yes" xml:space="preserve">
          <source>Create a RethinkDB configuration file for each RethinkDB instance running on this physical server.</source>
          <target state="translated">この物理サーバ上で実行されている各RethinkDBインスタンス用のRethinkDB設定ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="502b801b4c28b6e3be56551a89c95ec2da8e977a" translate="yes" xml:space="preserve">
          <source>Create a database. A RethinkDB database is a collection of tables, similar to relational databases.</source>
          <target state="translated">データベースを作成します。RethinkDBデータベースは、リレーショナルデータベースに似たテーブルの集合体です。</target>
        </trans-unit>
        <trans-unit id="08eba5855df793eb38016add3ba1fa8a98e3fbed" translate="yes" xml:space="preserve">
          <source>Create a javascript expression.</source>
          <target state="translated">javascriptの式を作成します。</target>
        </trans-unit>
        <trans-unit id="9420257ab72fa800a703dbf86c68ac974126a10e" translate="yes" xml:space="preserve">
          <source>Create a new connection to the database server. Accepts the following options:</source>
          <target state="translated">データベース サーバーへの新しい接続を作成します。次のオプションを受け入れます。</target>
        </trans-unit>
        <trans-unit id="71ec632c2d1407f17212a3f8d0d0e7d0f84ce29a" translate="yes" xml:space="preserve">
          <source>Create a new index using &lt;a href=&quot;https://rethinkdb.com/api/python/index_create/&quot;&gt;index_create&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://rethinkdb.com/api/python/index_create/&quot;&gt;index_create&lt;/a&gt;を使用して新しいインデックスを作成する</target>
        </trans-unit>
        <trans-unit id="e0e6156cc67ad310b7e1a83b6305258ba221d2aa" translate="yes" xml:space="preserve">
          <source>Create a new rule to allow instances to connect to one another:</source>
          <target state="translated">インスタンス同士を接続できるようにするための新しいルールを作成します。</target>
        </trans-unit>
        <trans-unit id="da36962abedbf9b093586e0aeed655bde4c0b153" translate="yes" xml:space="preserve">
          <source>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article &amp;ldquo;&lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;Using secondary indexes in RethinkDB&lt;/a&gt;.&amp;rdquo;</source>
          <target state="translated">テーブルに新しいセカンダリインデックスを作成します。セカンダリインデックスは、多くの読み取りクエリの速度を向上させますが、ストレージスペースが増加し、書き込みパフォーマンスが低下します。セカンダリインデックスの詳細については、「&lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;RethinkDBでのセカンダリインデックスの使用&lt;/a&gt;」の記事を参照してください。</target>
        </trans-unit>
        <trans-unit id="b5f18404147e2a5de5fad40209bdc7fa82f2dbe3" translate="yes" xml:space="preserve">
          <source>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article &amp;ldquo;&lt;a href=&quot;../../docs/secondary-indexes/javascript/index&quot;&gt;Using secondary indexes in RethinkDB&lt;/a&gt;.&amp;rdquo;</source>
          <target state="translated">テーブルに新しいセカンダリインデックスを作成します。セカンダリインデックスは、多くの読み取りクエリの速度を向上させますが、ストレージスペースが増加し、書き込みパフォーマンスが低下します。セカンダリインデックスの詳細については、「&lt;a href=&quot;../../docs/secondary-indexes/javascript/index&quot;&gt;RethinkDBでのセカンダリインデックスの使用&lt;/a&gt;」の記事を参照してください。</target>
        </trans-unit>
        <trans-unit id="d38bef034ce9520dce9daf3eb1fe55c4fc2c0b75" translate="yes" xml:space="preserve">
          <source>Create a new table</source>
          <target state="translated">新しいテーブルを作成する</target>
        </trans-unit>
        <trans-unit id="562447536f04e553c015de275f15ba8c88b83a79" translate="yes" xml:space="preserve">
          <source>Create a new table:</source>
          <target state="translated">新しいテーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="bf2ead1ee0213398e79eb2b65b4b64df9a27c2c7" translate="yes" xml:space="preserve">
          <source>Create a new virtual host:</source>
          <target state="translated">新しいバーチャルホストを作成します。</target>
        </trans-unit>
        <trans-unit id="c38573933d5307f0ab54377a5b135414e24d9970" translate="yes" xml:space="preserve">
          <source>Create a table. A RethinkDB table is a collection of JSON documents.</source>
          <target state="translated">テーブルを作成します。RethinkDBテーブルはJSONドキュメントの集合体です。</target>
        </trans-unit>
        <trans-unit id="4b7fa9a576c238c272d025c1fd6ab885719f714e" translate="yes" xml:space="preserve">
          <source>Create a time object based on an ISO 8601 date-time string (e.g. &amp;lsquo;2013-01-01T01:01:01+00:00&amp;rsquo;). RethinkDB supports all valid ISO 8601 formats except for week dates. Read more about the ISO 8601 format at &lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;Wikipedia&lt;/a&gt;.</source>
          <target state="translated">ISO 8601日時文字列に基づいて時間オブジェクトを作成します（例： '2013-01-01T01：01：01 + 00：00'）。RethinkDBは、曜日を除くすべての有効なISO 8601形式をサポートしています。&lt;a href=&quot;http://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ウィキペディアで&lt;/a&gt; ISO 8601形式の詳細を読んでください。</target>
        </trans-unit>
        <trans-unit id="0bcefcdc9ca2075884357aab377b3bc2daf5b65b" translate="yes" xml:space="preserve">
          <source>Create a time object based on seconds since epoch. The first argument is a double and will be rounded to three decimal places (millisecond-precision).</source>
          <target state="translated">エポックからの秒数に基づいて時間オブジェクトを作成します。第1引数はdoubleで、小数点以下3桁(ミリ秒精度)に丸められます。</target>
        </trans-unit>
        <trans-unit id="2fa75ba70bd63e7df1c494846e3fc2c1f29b4dd3" translate="yes" xml:space="preserve">
          <source>Create a time object for a specific time.</source>
          <target state="translated">特定の時間のための時間オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="8b9def7954fd6f3d1222e9061614fc0235a03c15" translate="yes" xml:space="preserve">
          <source>Create that many &lt;code&gt;VAR&lt;/code&gt; terms</source>
          <target state="translated">その数の &lt;code&gt;VAR&lt;/code&gt; 用語を作成する</target>
        </trans-unit>
        <trans-unit id="ece78eb6c3ee0c25b0c4b9866a64977a72405a9f" translate="yes" xml:space="preserve">
          <source>Create the file &lt;code&gt;/usr/lib/tmpfiles.d/rethinkdb.conf&lt;/code&gt; with the content:</source>
          <target state="translated">&lt;code&gt;/usr/lib/tmpfiles.d/rethinkdb.conf&lt;/code&gt; の内容のファイル/usr/lib/tmpfiles.d/rethinkdb.confを作成します。</target>
        </trans-unit>
        <trans-unit id="737d6c404b4709c6d7c610d33546b535713d42c4" translate="yes" xml:space="preserve">
          <source>Create the password file in &lt;code&gt;/etc/apache2/&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;/etc/apache2/&lt;/code&gt; パスワードファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="6266dd56b076cb8365ea9fb492d800ab32dac4e5" translate="yes" xml:space="preserve">
          <source>Creates an object from a list of key-value pairs, where the keys must be strings. &lt;code&gt;r.object(A, B, C, D)&lt;/code&gt; is equivalent to &lt;code&gt;r.expr([[A, B], [C, D]]).coerceTo('OBJECT')&lt;/code&gt;.</source>
          <target state="translated">キーと値のペアのリストからオブジェクトを作成します。キーは文字列でなければなりません。 &lt;code&gt;r.object(A, B, C, D)&lt;/code&gt; は、 &lt;code&gt;r.expr([[A, B], [C, D]]).coerceTo('OBJECT')&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4d81e9a0585aef20976adb68f4cb8df4643d8f7c" translate="yes" xml:space="preserve">
          <source>Creating a database</source>
          <target state="translated">データベースの作成</target>
        </trans-unit>
        <trans-unit id="caa32e4e8e79e2c3c02dca0de8e30c735ffb9e02" translate="yes" xml:space="preserve">
          <source>Creating a table</source>
          <target state="translated">テーブルの作成</target>
        </trans-unit>
        <trans-unit id="e13e0554f557ba882751e261b5a60777b337bea6" translate="yes" xml:space="preserve">
          <source>Creation</source>
          <target state="translated">Creation</target>
        </trans-unit>
        <trans-unit id="d870f1655c65fb4062abe0817dd94f6c9deebd30" translate="yes" xml:space="preserve">
          <source>Current community-supported drivers</source>
          <target state="translated">現在のコミュニティでサポートされているドライバ</target>
        </trans-unit>
        <trans-unit id="c25df3d9d3acc816673351236097c818e193ee3c" translate="yes" xml:space="preserve">
          <source>Current issues</source>
          <target state="translated">現在の課題</target>
        </trans-unit>
        <trans-unit id="87f9a4795729c7b599efecbb2d79e41c1ba3f896" translate="yes" xml:space="preserve">
          <source>Currently the RethinkDB server only supports x86 and x86_64 architectures on Unix-based platforms, and has experimental ARM support (thanks to the effort of &lt;a href=&quot;http://github.com/davidthomas426&quot;&gt;@davidthomas426&lt;/a&gt;).</source>
          <target state="translated">現在、RethinkDBサーバーはUnixベースのプラットフォームでx86およびx86_64アーキテクチャのみをサポートしており、実験的なARMサポートがあります（&lt;a href=&quot;http://github.com/davidthomas426&quot;&gt;@ davidthomas426の&lt;/a&gt;努力のおかげ）。</target>
        </trans-unit>
        <trans-unit id="eb6df1909b1d7498dff50326b6fb756d935e64da" translate="yes" xml:space="preserve">
          <source>Currently, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;get_all&lt;/code&gt; and similar operations execute as separate operations from &lt;code&gt;update&lt;/code&gt; and other mutation operations. Therefore, the following is &lt;em&gt;not&lt;/em&gt; a correct implementation of a check-and-set register, since &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; will not execute in one atomic operation:</source>
          <target state="translated">現在、 &lt;code&gt;filter&lt;/code&gt; 、 &lt;code&gt;get_all&lt;/code&gt; などの操作は、 &lt;code&gt;update&lt;/code&gt; やその他の変更操作とは別の操作として実行されます。したがって、次のようになり&lt;em&gt;ません&lt;/em&gt;ので、チェック・アンド・セット・レジスタの正しい実装 &lt;code&gt;filter&lt;/code&gt; と &lt;code&gt;update&lt;/code&gt; 1回のアトミック操作で実行されません。</target>
        </trans-unit>
        <trans-unit id="d2477a50f7e655cb613fc15b137f3f43b6b7da75" translate="yes" xml:space="preserve">
          <source>Currently, ReQL has a default limit of 100,000 elements in an array, and the implementation of &lt;code&gt;group&lt;/code&gt; requires the total number of documents grouped to fit within that boundary, so you are limited to 100,000 invoices. This can be changed, however, by passing the &lt;code&gt;arrayLimit&lt;/code&gt; option to &lt;a href=&quot;../../../api/javascript/run/index&quot;&gt;run&lt;/a&gt;. (Also note that &lt;code&gt;ungroup&lt;/code&gt; always returns an array, although this may change in a future version. Follow issue &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/2719&quot;&gt;#2719&lt;/a&gt; for progress on this.)</source>
          <target state="translated">現在、ReQLは、アレイ10万個の要素のデフォルトの制限があり、実装の &lt;code&gt;group&lt;/code&gt; あなた100,000の請求書に限られているので、その境界内に収まるようにグループ化されたドキュメントの合計数を必要とします。ただし、 &lt;code&gt;arrayLimit&lt;/code&gt; オプションを&lt;a href=&quot;../../../api/javascript/run/index&quot;&gt;runに&lt;/a&gt;渡すことで変更できます。（また、 &lt;code&gt;ungroup&lt;/code&gt; は常に配列を返すことに注意してください。これは将来のバージョンで変更される可能性があります。これについては、問題&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/2719&quot;&gt;＃2719に&lt;/a&gt;従ってください。）</target>
        </trans-unit>
        <trans-unit id="f4d2f91040c93130ddcca14955ef2593c9e0caed" translate="yes" xml:space="preserve">
          <source>Cursors</source>
          <target state="translated">Cursors</target>
        </trans-unit>
        <trans-unit id="7731209d29ac0a4599f13b5c157df9f80320a12e" translate="yes" xml:space="preserve">
          <source>Cursors and feeds implement the same interface as Node&amp;rsquo;s &lt;a href=&quot;http://nodejs.org/api/events.html#events_class_events_eventemitter&quot;&gt;EventEmitter&lt;/a&gt;.</source>
          <target state="translated">カーソルとフィードは、Nodeの&lt;a href=&quot;http://nodejs.org/api/events.html#events_class_events_eventemitter&quot;&gt;EventEmitter&lt;/a&gt;と同じインターフェースを実装します。</target>
        </trans-unit>
        <trans-unit id="d6f5636098cd458ce9d22939f8e3e8deab0e9bd0" translate="yes" xml:space="preserve">
          <source>DELETE</source>
          <target state="translated">DELETE</target>
        </trans-unit>
        <trans-unit id="854d235e232e068ef083bf90af82bc89c9fe562d" translate="yes" xml:space="preserve">
          <source>Dart</source>
          <target state="translated">Dart</target>
        </trans-unit>
        <trans-unit id="e5e429bcc9c2e4a41a3c7a4d96203be6cb273b11" translate="yes" xml:space="preserve">
          <source>Data</source>
          <target state="translated">Data</target>
        </trans-unit>
        <trans-unit id="8b9caf893c3cf91b7f2aa71e4497cbf2f851b68d" translate="yes" xml:space="preserve">
          <source>Data Explorer</source>
          <target state="translated">データエクスプローラ</target>
        </trans-unit>
        <trans-unit id="d365007e9285e56a82a0d4a50d4ce02c38ea2bd6" translate="yes" xml:space="preserve">
          <source>Data exploration</source>
          <target state="translated">データ探査</target>
        </trans-unit>
        <trans-unit id="e647ab0384d969c13ba46e00acc1dbeab81ebb18" translate="yes" xml:space="preserve">
          <source>Data is replicated and sharded across all available servers</source>
          <target state="translated">データは、利用可能なすべてのサーバーにレプリケートされ、シャーディングされています。</target>
        </trans-unit>
        <trans-unit id="db6540bb03f22b23247d342c2b1b2966867d2200" translate="yes" xml:space="preserve">
          <source>Data is replicated to two servers, and sharded across all available servers</source>
          <target state="translated">データは2つのサーバーにレプリケートされ、利用可能なすべてのサーバーでシャードされます。</target>
        </trans-unit>
        <trans-unit id="d618d6d58df4367a11cfef92a4e0459977e3b2cd" translate="yes" xml:space="preserve">
          <source>Data is sent from the shards to the query server and combined.</source>
          <target state="translated">データはシャードからクエリサーバに送られ、結合されます。</target>
        </trans-unit>
        <trans-unit id="e130f9403cd7619355e4457ebdab02dfaa509a98" translate="yes" xml:space="preserve">
          <source>Data modeling in RethinkDB</source>
          <target state="translated">RethinkDBでのデータモデリング</target>
        </trans-unit>
        <trans-unit id="943c775b39fa28fba2a9c7b8631fbd9577ac838d" translate="yes" xml:space="preserve">
          <source>Data storage</source>
          <target state="translated">データストレージ</target>
        </trans-unit>
        <trans-unit id="b6be514c02654c4ded06230fc9559da237b0aa77" translate="yes" xml:space="preserve">
          <source>Data types</source>
          <target state="translated">データ型</target>
        </trans-unit>
        <trans-unit id="0bec5093fae4de651755330a0d2e85f3ba21c4d2" translate="yes" xml:space="preserve">
          <source>Dates and Times</source>
          <target state="translated">開催日と時間</target>
        </trans-unit>
        <trans-unit id="4fae1a3c22c69a38da3102b05f957492235e0b3a" translate="yes" xml:space="preserve">
          <source>Dates and times</source>
          <target state="translated">日付と時間</target>
        </trans-unit>
        <trans-unit id="f19a185740f7c93f91d8d499c02a3d9189637966" translate="yes" xml:space="preserve">
          <source>Dates and times in RethinkDB</source>
          <target state="translated">RethinkDBの日付と時間</target>
        </trans-unit>
        <trans-unit id="f775329a5b94da0d8b124d7e0ac6a8c3f9336607" translate="yes" xml:space="preserve">
          <source>Debian</source>
          <target state="translated">Debian</target>
        </trans-unit>
        <trans-unit id="9528e2e3ab6af8459d12161c313a88e31b5823fe" translate="yes" xml:space="preserve">
          <source>Delete a previously created secondary index of this table.</source>
          <target state="translated">このテーブルの以前に作成されたセカンダリ インデックスを削除します。</target>
        </trans-unit>
        <trans-unit id="e05abdc50588bf68eb6bc6f44e4be48a418f7b0a" translate="yes" xml:space="preserve">
          <source>Delete documents</source>
          <target state="translated">ドキュメントの削除</target>
        </trans-unit>
        <trans-unit id="07ce472a068f0cc18a9be86eb69bceae3b91bfec" translate="yes" xml:space="preserve">
          <source>Delete one or more documents from a table.</source>
          <target state="translated">テーブルから1つ以上のドキュメントを削除します。</target>
        </trans-unit>
        <trans-unit id="a833a498a36f4aff3d78936eddd16d106320aa52" translate="yes" xml:space="preserve">
          <source>Delete returns an object that contains the following attributes:</source>
          <target state="translated">Delete は、以下の属性を含むオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="1745161c87e406772ee2df2d87684d5a4e2089ce" translate="yes" xml:space="preserve">
          <source>Deleting documents</source>
          <target state="translated">ドキュメントの削除</target>
        </trans-unit>
        <trans-unit id="d6a07e3c5f985b6ebd26237332a8a3e26ca113a0" translate="yes" xml:space="preserve">
          <source>Deleting, adding or updating a post requires loading the entire &lt;code&gt;posts&lt;/code&gt; array, modifying it, and writing the entire document back to disk.</source>
          <target state="translated">投稿を削除、追加、または更新するには、 &lt;code&gt;posts&lt;/code&gt; 配列全体をロードして変更し、ドキュメント全体をディスクに書き戻す必要があります。</target>
        </trans-unit>
        <trans-unit id="3ff625daa7b77b086fdbd69b0b1b1f1c4ce32b4b" translate="yes" xml:space="preserve">
          <source>Delphi</source>
          <target state="translated">Delphi</target>
        </trans-unit>
        <trans-unit id="effcb2931e5e0d725f1a5daa33a0739f5138aaae" translate="yes" xml:space="preserve">
          <source>Depending on how fast your application makes changes to monitored data and how fast it processes change notifications, it&amp;rsquo;s possible that more than one change will happen between calls to the &lt;code&gt;changes&lt;/code&gt; command. You can control what happens in that case with the &lt;code&gt;squash&lt;/code&gt; optional argument.</source>
          <target state="translated">アプリケーションが監視データに変更を加える速度と、変更通知の処理速度に &lt;code&gt;changes&lt;/code&gt; て、changesコマンドの呼び出しの間に複数の変更が発生する可能性があります。その場合に何が起こるかは、オプションの &lt;code&gt;squash&lt;/code&gt; 引数で制御できます。</target>
        </trans-unit>
        <trans-unit id="df8c99c35f803d94036fc0049e6d061050f1d1cd" translate="yes" xml:space="preserve">
          <source>Depending on how you start the RethinkDB server process, there are two ways to set the cache size.</source>
          <target state="translated">RethinkDBサーバプロセスの起動方法にもよりますが、キャッシュサイズを設定するには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="d12578d950ce7df9635024755adbe3e89422ecb6" translate="yes" xml:space="preserve">
          <source>Depending on how you&amp;rsquo;ve installed Elasticsearch, you may need to become the elasticsearch user or root to run this command.</source>
          <target state="translated">Elasticsearchのインストール方法によっては、このコマンドを実行するためにelasticsearchユーザーまたはrootになる必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="33e1f1d5a5b77e669798e1400d615354aa90151c" translate="yes" xml:space="preserve">
          <source>Depending on the driver, this error may also appear as &amp;ldquo;Maximum expression depth exceeded.&amp;rdquo;</source>
          <target state="translated">ドライバーによっては、このエラーは「最大式深度を超えました」として表示される場合もあります。</target>
        </trans-unit>
        <trans-unit id="ab80f58b2bc900fd52cc75f390dbeea13a146ffd" translate="yes" xml:space="preserve">
          <source>Depending on your OS, you may need to install a library such as &lt;code&gt;libapache2-mod-proxy-html&lt;/code&gt;.</source>
          <target state="translated">OSによっては、 &lt;code&gt;libapache2-mod-proxy-html&lt;/code&gt; などのライブラリをインストールする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="e1c93da7d096d628d4f1e05e5d4cb5a7601d76fe" translate="yes" xml:space="preserve">
          <source>Deploying on AWS</source>
          <target state="translated">AWSでのデプロイ</target>
        </trans-unit>
        <trans-unit id="6f934d359e2161c5c447a97c847b049c2453f1ed" translate="yes" xml:space="preserve">
          <source>Deploying on Compose</source>
          <target state="translated">Compose でのデプロイ</target>
        </trans-unit>
        <trans-unit id="5b23f1c4cf72fb9ca2d541b5fef18fcce6ab95d4" translate="yes" xml:space="preserve">
          <source>Deploying with PaaS</source>
          <target state="translated">PaaSでのデプロイ</target>
        </trans-unit>
        <trans-unit id="ec9f02b05ec165ff64ba7bdb5303a4e9b3e3bdb2" translate="yes" xml:space="preserve">
          <source>Deploying with a PaaS</source>
          <target state="translated">PaaSでのデプロイ</target>
        </trans-unit>
        <trans-unit id="1c79a01c2ceb5ed61a5c531918e7a81ec32c0890" translate="yes" xml:space="preserve">
          <source>Deployment Tools</source>
          <target state="translated">展開ツール</target>
        </trans-unit>
        <trans-unit id="ed0f20dd3148c1143a36b70a1313bce02cb80424" translate="yes" xml:space="preserve">
          <source>Deployment tools</source>
          <target state="translated">展開ツール</target>
        </trans-unit>
        <trans-unit id="89cc06c86751edabc6c90df0509d55c9e99a9317" translate="yes" xml:space="preserve">
          <source>Deprecated versions</source>
          <target state="translated">非推奨バージョン</target>
        </trans-unit>
        <trans-unit id="6f66b82cc3959400c54a999fcda03979f8f0607e" translate="yes" xml:space="preserve">
          <source>Derived terms: &lt;code&gt;pluck&lt;/code&gt;, &lt;code&gt;with_field&lt;/code&gt;, &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;eq_join&lt;/code&gt;</source>
          <target state="translated">派生用語： &lt;code&gt;pluck&lt;/code&gt; 、 &lt;code&gt;with_field&lt;/code&gt; 、 &lt;code&gt;count&lt;/code&gt; 、 &lt;code&gt;eq_join&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="f66cba6f2178921ae061ace5374666db48758a3a" translate="yes" xml:space="preserve">
          <source>Detailed results</source>
          <target state="translated">詳細結果</target>
        </trans-unit>
        <trans-unit id="650e4825d787dfc5aa53b95e0be31c8aaea57499" translate="yes" xml:space="preserve">
          <source>Different languages support iterators in different ways, but the fundamental concept is always the same: the result set is traversed in a loop that returns one result set at a time. In Python, you might loop through a stream this way:</source>
          <target state="translated">言語によって異なる方法でイテレータをサポートしていますが、基本的なコンセプトは常に同じです:結果セットは一度に1つの結果セットを返すループの中で巡回されます。Pythonでは、ストリームをこのようにループさせることができます。</target>
        </trans-unit>
        <trans-unit id="fd8e45bac7d354790ec0a82d8a61341bf8acd055" translate="yes" xml:space="preserve">
          <source>Direction</source>
          <target state="translated">Direction</target>
        </trans-unit>
        <trans-unit id="cc93d53b6beace191a6f445c5a57258d17c49b9d" translate="yes" xml:space="preserve">
          <source>Display the top 10 movies&amp;hellip;</source>
          <target state="translated">トップ10の映画を表示&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="45d493a8c9d0ea055cc322309346130d4e45729e" translate="yes" xml:space="preserve">
          <source>Distances in ReQL are (by default) calculated assuming not a perfect sphere but an ellipsoid, using a precise and relatively fast algorithm developed by &lt;a href=&quot;http://link.springer.com/article/10.1007%2Fs00190-012-0578-z&quot;&gt;Charles Karney&lt;/a&gt;. The reference ellipsoid used is &lt;a href=&quot;http://en.wikipedia.org/wiki/World_Geodetic_System&quot;&gt;WGS84&lt;/a&gt;, the standard used for GPS. By default distances are specified in meters, but you can pass an optional argument to distance functions to specify kilometers, miles, nautical miles, and feet.</source>
          <target state="translated">ReQLの距離は、&lt;a href=&quot;http://link.springer.com/article/10.1007%2Fs00190-012-0578-z&quot;&gt;Charles Karney&lt;/a&gt;によって開発された正確で比較的高速なアルゴリズムを使用して、完全な球ではなく楕円体を想定して（デフォルトで）計算されます。使用される参照楕円体は、GPSに使用される標準である&lt;a href=&quot;http://en.wikipedia.org/wiki/World_Geodetic_System&quot;&gt;WGS84&lt;/a&gt;です。デフォルトでは、距離はメートルで指定されますが、オプションの引数を距離関数に渡して、キロメートル、マイル、海里、フィートを指定できます。</target>
        </trans-unit>
        <trans-unit id="de1f8cd3e607f28818c75125e0d7ded683d13fc1" translate="yes" xml:space="preserve">
          <source>Distinguishing between data types</source>
          <target state="translated">データ型の区別</target>
        </trans-unit>
        <trans-unit id="e62465ada9d89a46cc8c5c2dc70da727fcad33e2" translate="yes" xml:space="preserve">
          <source>Divide two numbers.</source>
          <target state="translated">2つの数字を割ります。</target>
        </trans-unit>
        <trans-unit id="9f1141549f7c054b71516937d3febc77d991d59b" translate="yes" xml:space="preserve">
          <source>Docker</source>
          <target state="translated">Docker</target>
        </trans-unit>
        <trans-unit id="6b39f4df8e4dc03149e4ba286d380689a8fb7970" translate="yes" xml:space="preserve">
          <source>Docker images</source>
          <target state="translated">Dockerイメージ</target>
        </trans-unit>
        <trans-unit id="fa5b6b6b8330688c9b91298710f39ce32d51f016" translate="yes" xml:space="preserve">
          <source>Docker provides an &lt;a href=&quot;https://registry.hub.docker.com/_/rethinkdb/&quot;&gt;official RethinkDB repository&lt;/a&gt; on the Docker Hub. (Read &lt;a href=&quot;../install/index&quot;&gt;Installing RethinkDB&lt;/a&gt; for more details.) This list highlights community-provided Docker images and tools.</source>
          <target state="translated">Dockerは、Docker Hubに&lt;a href=&quot;https://registry.hub.docker.com/_/rethinkdb/&quot;&gt;公式のRethinkDBリポジトリ&lt;/a&gt;を提供します。（詳細については、&lt;a href=&quot;../install/index&quot;&gt;RethinkDBのインストール&lt;/a&gt;をお読みください。）このリストは、コミュニティーが提供するDockerイメージとツールに焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="32aa99a0683d07f754b24707cd866a8fe7496c82" translate="yes" xml:space="preserve">
          <source>Docker provides an &lt;a href=&quot;https://registry.hub.docker.com/_/rethinkdb/&quot;&gt;official RethinkDB repository&lt;/a&gt; on the Docker Hub. To deploy RethinkDB on Docker, run the following command:</source>
          <target state="translated">Dockerは、Docker Hubに&lt;a href=&quot;https://registry.hub.docker.com/_/rethinkdb/&quot;&gt;公式のRethinkDBリポジトリ&lt;/a&gt;を提供します。RethinkDBをDockerにデプロイするには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="75b31b4fef30460e3db1b62f8dc07903324331ba" translate="yes" xml:space="preserve">
          <source>Document Manipulation</source>
          <target state="translated">文書処理</target>
        </trans-unit>
        <trans-unit id="a938da5f7f37d695c28d5a234aa22482b071efe1" translate="yes" xml:space="preserve">
          <source>Document manipulation</source>
          <target state="translated">文書の取り扱い</target>
        </trans-unit>
        <trans-unit id="1c63157e8f0d28f7ff577f7e1ab7d1c3a00f8dab" translate="yes" xml:space="preserve">
          <source>Document schema</source>
          <target state="translated">回路図ドキュメント</target>
        </trans-unit>
        <trans-unit id="7dbc40801b3a48b66d3662d20e3a304cebd58104" translate="yes" xml:space="preserve">
          <source>Documents can be inserted into &lt;code&gt;users&lt;/code&gt; to create new users and deleted to remove them. You cannot change the &lt;code&gt;id&lt;/code&gt; value of an existing document, only change or remove passwords via &lt;code&gt;update&lt;/code&gt;.</source>
          <target state="translated">ドキュメントを &lt;code&gt;users&lt;/code&gt; に挿入して新しいユーザーを作成したり、削除して削除したりできます。あなたは変更できない &lt;code&gt;id&lt;/code&gt; のみ変更または経由でパスワードを削除し、既存の文書の値を &lt;code&gt;update&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77b108aa347d7d6da2641ef2bbeaff49dd15b4a4" translate="yes" xml:space="preserve">
          <source>Documents can be inserted to create new databases, deleted to remove databases, and modified to rename databases. (Renaming databases is the only task that requires querying the &lt;code&gt;db_config&lt;/code&gt; table; the other two tasks have native ReQL commands, &lt;a href=&quot;../../api/javascript/db_create/index&quot;&gt;dbCreate&lt;/a&gt; and &lt;a href=&quot;../../api/javascript/db_drop/index&quot;&gt;dbDrop&lt;/a&gt;.) As with tables, if you &lt;code&gt;insert&lt;/code&gt; a database, don&amp;rsquo;t include the &lt;code&gt;id&lt;/code&gt; field: the system will auto-generate the UUID.</source>
          <target state="translated">ドキュメントを挿入して新しいデータベースを作成したり、削除してデータベースを削除したり、変更してデータベースの名前を変更したりできます。（データベースの名前変更は、 &lt;code&gt;db_config&lt;/code&gt; テーブルのクエリが必要な唯一のタスクです。他の2つのタスクには、ネイティブのReQLコマンド、&lt;a href=&quot;../../api/javascript/db_create/index&quot;&gt;dbCreate&lt;/a&gt;および&lt;a href=&quot;../../api/javascript/db_drop/index&quot;&gt;dbDropがあり&lt;/a&gt;ます。）テーブルと同様に、データベースを &lt;code&gt;insert&lt;/code&gt; する場合は、 &lt;code&gt;id&lt;/code&gt; フィールドを含めないでください。システムは自動-UUIDを生成します。</target>
        </trans-unit>
        <trans-unit id="cd76c8f791c0cc396c4e3c262fafe0981d82c181" translate="yes" xml:space="preserve">
          <source>Documents cannot be deleted from this table. When a server loses its connection to the cluster, its corresponding document will be automatically deleted.</source>
          <target state="translated">このテーブルからドキュメントを削除することはできません。サーバがクラスタへの接続を失うと、対応するドキュメントは自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="2fbb62833064347b1e86da4eb252aac882b424fb" translate="yes" xml:space="preserve">
          <source>Documents in the permissions table have two to four key/value pairs.</source>
          <target state="translated">パーミッション テーブルのドキュメントには、2 つから 4 つのキー/値のペアがあります。</target>
        </trans-unit>
        <trans-unit id="58cc920fdd6b780706a49274986194fa8e63b6c8" translate="yes" xml:space="preserve">
          <source>Does RethinkDB automatically reshard the database without the user&amp;rsquo;s request?</source>
          <target state="translated">RethinkDBはユーザーの要求なしにデータベースを自動的にリシャードしますか？</target>
        </trans-unit>
        <trans-unit id="2cb3d80fdfcc25abece5b9ea35b0a58a6d8d6483" translate="yes" xml:space="preserve">
          <source>Does RethinkDB support secondary and compound indexes?</source>
          <target state="translated">RethinkDBはセカンダリインデックスと複合インデックスをサポートしていますか?</target>
        </trans-unit>
        <trans-unit id="c54abbee94084a1da90689b4bc1bd9997a3f20c8" translate="yes" xml:space="preserve">
          <source>Does the web UI support my browser?</source>
          <target state="translated">Web UIはブラウザをサポートしていますか?</target>
        </trans-unit>
        <trans-unit id="a11f6f795d0b0ad6a6b5164abe13eee98c4a6a17" translate="yes" xml:space="preserve">
          <source>Doing an unpivot operation to &amp;ldquo;cancel&amp;rdquo; a pivot one can be done with the &lt;code&gt;concatMap&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;keys&lt;/code&gt; commands:</source>
          <target state="translated">アンピボット操作を実行してピボット操作を「キャンセル」するには、 &lt;code&gt;concatMap&lt;/code&gt; 、 &lt;code&gt;map&lt;/code&gt; および &lt;code&gt;keys&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="5b62a365d458d7fc495e82bb5feffe6da3aadcf0" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t upgrade the Python driver until &lt;em&gt;after&lt;/em&gt; you&amp;rsquo;ve dumped the data.</source>
          <target state="translated">まで、Pythonのドライバをアップグレードしないでください&lt;em&gt;後&lt;/em&gt;は、データをダンプしてきました。</target>
        </trans-unit>
        <trans-unit id="b9b20397c8b4511d2977f6637e72fed5b6036fed" translate="yes" xml:space="preserve">
          <source>Download the &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample&quot;&gt;sample configuration file&lt;/a&gt; and copy it to a new location.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample&quot;&gt;サンプル構成ファイル&lt;/a&gt;をダウンロードして、新しい場所にコピーします。</target>
        </trans-unit>
        <trans-unit id="b0beb6e9b2782c89528b908ead973a20cfdfe161" translate="yes" xml:space="preserve">
          <source>Drivers and extensions</source>
          <target state="translated">ドライバと拡張機能</target>
        </trans-unit>
        <trans-unit id="fbc709596abc5be072df806dc4e1dbe8b5533299" translate="yes" xml:space="preserve">
          <source>Drivers with limited features</source>
          <target state="translated">機能が制限されているドライバー</target>
        </trans-unit>
        <trans-unit id="18a8b5347ecd64b14b11492736aa49444fac1b10" translate="yes" xml:space="preserve">
          <source>Drop a database. The database, all its tables, and corresponding data will be deleted.</source>
          <target state="translated">データベースを削除します。データベース、すべてのテーブル、および対応するデータが削除されます。</target>
        </trans-unit>
        <trans-unit id="cb4a2f30c3c295a227032a99e5a4efc8550b4ecb" translate="yes" xml:space="preserve">
          <source>Drop a table from a database. The table and all its data will be deleted.</source>
          <target state="translated">データベースからテーブルを削除します。テーブルとそのすべてのデータが削除されます。</target>
        </trans-unit>
        <trans-unit id="77234eb34260471a6c14dc884c48b8e9d2d71451" translate="yes" xml:space="preserve">
          <source>Due to its event-driven nature, JavaScript can easily execute RethinkDB queries in an asynchronous fashion. The official RethinkDB drivers currently support integration with EventMachine for Ruby, and Tornado and Twisted for Python.</source>
          <target state="translated">イベント駆動型の性質上、JavaScriptは非同期でRethinkDBクエリを簡単に実行することができます。公式のRethinkDBドライバは現在、RubyではEventMachine、PythonではTornadoとTwistedとの統合をサポートしています。</target>
        </trans-unit>
        <trans-unit id="d055e33954e62aeccb66d357adf149b3205d3a2b" translate="yes" xml:space="preserve">
          <source>Dumping the system tables</source>
          <target state="translated">システムテーブルのダンプ</target>
        </trans-unit>
        <trans-unit id="0a7e6c99bf8926a19096e8badb44937bd7a22e17" translate="yes" xml:space="preserve">
          <source>Dynamo-based systems such as Cassandra and Riak choose to maintain stronger availability. In these systems if there is a network partition, the clients can write to the same row on both sides of the netsplit. In exchange for the write availability, applications built on top of these systems must deal with various complexities such as clock skew, conflict resolution code, conflict repair operations, performance issues for highly contested keys, and latency issues associated with quorums.</source>
          <target state="translated">CassandraやRiakなどのダイナモベースのシステムは、より強力な可用性を維持することを選択します。これらのシステムでは、ネットワーク・パーティションがある場合、クライアントはネットスプリットの両側の同じ行に書き込むことができます。書き込みの可用性と引き換えに、これらのシステムの上に構築されたアプリケーションは、クロックスキュー、競合解決コード、競合修復操作、高度に競合した鍵のパフォーマンス問題、クォーラムに関連するレイテンシの問題など、様々な複雑さに対処しなければなりません。</target>
        </trans-unit>
        <trans-unit id="bc4c2235b8ffe6c816e63179a9847830daefd446" translate="yes" xml:space="preserve">
          <source>Each connection sets a default database to use during its lifetime (if you don&amp;rsquo;t specify one in &lt;code&gt;connect&lt;/code&gt;, the default database is set to &lt;code&gt;test&lt;/code&gt;). This way we can omit the &lt;code&gt;db('test')&lt;/code&gt; command in our query. We won&amp;rsquo;t specify the database explicitly from now on, but if you want to prepend your queries with the &lt;code&gt;db&lt;/code&gt; command, it won&amp;rsquo;t hurt.</source>
          <target state="translated">各接続は、その存続期間中に使用するデフォルトのデータベースを設定します（ &lt;code&gt;connect&lt;/code&gt; で指定しない場合、デフォルトのデータベースは &lt;code&gt;test&lt;/code&gt; に設定されます）。このようにして、クエリで &lt;code&gt;db('test')&lt;/code&gt; コマンドを省略できます。今後はデータベースを明示的に指定しませんが、クエリの先頭に &lt;code&gt;db&lt;/code&gt; コマンドを追加したい場合は問題ありません。</target>
        </trans-unit>
        <trans-unit id="2bda4691fb673fc7859d20932c178454925c23a8" translate="yes" xml:space="preserve">
          <source>Each deployment provided by Compose is configured as a high-availability cluster with full redundancy. To create a hosted RethinkDB instance:</source>
          <target state="translated">Composeが提供する各デプロイメントは、完全な冗長性を備えた高可用性クラスタとして構成されています。ホストされたRethinkDBインスタンスを作成するには</target>
        </trans-unit>
        <trans-unit id="6991553b0f0a174312a302b3d91e2b42ac9a80f8" translate="yes" xml:space="preserve">
          <source>Each document in the table has 4 keys: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;topic&lt;/code&gt;, &lt;code&gt;payload&lt;/code&gt;, and &lt;code&gt;updated_on&lt;/code&gt;.</source>
          <target state="translated">テーブル内の各ドキュメントには、 &lt;code&gt;id&lt;/code&gt; 、 &lt;code&gt;topic&lt;/code&gt; 、 &lt;code&gt;payload&lt;/code&gt; 、および &lt;code&gt;updated_on&lt;/code&gt; の 4つのキーがあります。</target>
        </trans-unit>
        <trans-unit id="d16736b0f41b927b0e80d0c1604e84dbfb6dfc9f" translate="yes" xml:space="preserve">
          <source>Each exchange is a single RethinkDB table</source>
          <target state="translated">各交換は1つのRethinkDBテーブルです。</target>
        </trans-unit>
        <trans-unit id="7272eff9575d2e5dcd51b8fa56f4684e60ec40d8" translate="yes" xml:space="preserve">
          <source>Each node in the stack has a number of methods defined on it. The three most important methods define how to execute a subset of the query on each server in the cluster, how to combine the data from multiple servers into a unified resultset, and how to stream data to the nodes further up in small chunks.</source>
          <target state="translated">スタック内の各ノードは、そのノードで定義されたいくつかのメソッドを持っています。最も重要な3つのメソッドは、クラスタ内の各サーバ上でクエリのサブセットを実行する方法、複数のサーバからのデータを統一された結果セットに結合する方法、そしてデータを小さな塊にしてさらに上のノードにストリーミングする方法を定義します。</target>
        </trans-unit>
        <trans-unit id="bfbf4483e1bde08c75691f32887e599012a54f2a" translate="yes" xml:space="preserve">
          <source>Each object has its own document schema. The field names are, for the most part, self-explanatory. The fields &lt;code&gt;server&lt;/code&gt;, &lt;code&gt;db&lt;/code&gt; and &lt;code&gt;table&lt;/code&gt; will be either UUIDs or strings depending on the value of the &lt;code&gt;identifier_format&lt;/code&gt; optional argument to &lt;code&gt;table&lt;/code&gt;.</source>
          <target state="translated">各オブジェクトには独自のドキュメントスキーマがあります。フィールド名は、ほとんどの場合自明です。 &lt;code&gt;server&lt;/code&gt; 、 &lt;code&gt;db&lt;/code&gt; 、および &lt;code&gt;table&lt;/code&gt; フィールドは、tableへの &lt;code&gt;identifier_format&lt;/code&gt; オプション引数の値に応じて、UUIDまたは文字列になり &lt;code&gt;table&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ad9d8589f53751a8b3126b0096d187054fd7d071" translate="yes" xml:space="preserve">
          <source>Easily load fixtures into RethinkDB for testing purposes.</source>
          <target state="translated">テスト目的でRethinkDBにフィクスチャを簡単にロードできます。</target>
        </trans-unit>
        <trans-unit id="e32a6018f677d153baed9e23a9d00eea2b1a226e" translate="yes" xml:space="preserve">
          <source>Edit &lt;code&gt;/Library/LaunchDaemons/com.rethinkdb.server.plist&lt;/code&gt; to change the &lt;code&gt;ProgramArguments&lt;/code&gt; key so RethinkDB will use your configuration file.</source>
          <target state="translated">編集 &lt;code&gt;/Library/LaunchDaemons/com.rethinkdb.server.plist&lt;/code&gt; は変更する &lt;code&gt;ProgramArguments&lt;/code&gt; の RethinkDBは、コンフィギュレーションファイルを使用しますので、キーを。</target>
        </trans-unit>
        <trans-unit id="d3e5fe656bcf9ca1d416f76153e551f5a62b139f" translate="yes" xml:space="preserve">
          <source>Edit the configuration file in your favorite editor. While you may be able to leave many options at their defaults, you&amp;rsquo;ll definitely need to change the &lt;code&gt;directory=&lt;/code&gt; line in the file to point to your data directory.</source>
          <target state="translated">お好みのエディターで構成ファイルを編集します。多くのオプションをデフォルトのままにしておくこともできますが、データディレクトリを指すようにファイルの &lt;code&gt;directory=&lt;/code&gt; 行を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="4507364d9ff843e33e9dfd959072b53a9b706627" translate="yes" xml:space="preserve">
          <source>Efficiently generating monotonically increasing IDs in a distributed system is a surprisingly difficult problem. If an inserted document is missing a primary key, RethinkDB currently generates a random UUID. We will be supporting additional autogeneration schemes in the future (see &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/117&quot;&gt;https://github.com/rethinkdb/rethinkdb/issues/117&lt;/a&gt;), but in the meantime, you can use one of the available open-source libraries for distributed id generation (e.g. &lt;a href=&quot;https://github.com/twitter/snowflake&quot;&gt;twitter snowflake&lt;/a&gt;).</source>
          <target state="translated">分散システムで単調に増加するIDを効率的に生成することは、驚くほど難しい問題です。挿入されたドキュメントに主キーがない場合、RethinkDBは現在ランダムなUUIDを生成します。今後、追加の自動生成スキームがサポートされる予定です（&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/117&quot;&gt;https://github.com/rethinkdb/rethinkdb/issues/117を&lt;/a&gt;参照）。当面は、分散ID生成に利用可能なオープンソースライブラリの1つを使用できます（たとえば、&lt;a href=&quot;https://github.com/twitter/snowflake&quot;&gt;twitterスノーフレーク&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="55c3ec54949c74e47fc42b6a97ebe9eaac04e579" translate="yes" xml:space="preserve">
          <source>Efficiently retrieving multiple documents by primary key</source>
          <target state="translated">主キーによる複数文書の効率的な検索</target>
        </trans-unit>
        <trans-unit id="31c7109c183332e4271eaa092839ec690cb7473c" translate="yes" xml:space="preserve">
          <source>Efficiently retrieving multiple documents by secondary index</source>
          <target state="translated">二次索引による複数文書の効率的な検索</target>
        </trans-unit>
        <trans-unit id="49fa9fd831096c82ab950bc7aa0a0a7ef8a10998" translate="yes" xml:space="preserve">
          <source>Element</source>
          <target state="translated">Element</target>
        </trans-unit>
        <trans-unit id="c0c7bf14304705b88f3bf9ecdfcf919293c76e53" translate="yes" xml:space="preserve">
          <source>Elixir</source>
          <target state="translated">Elixir</target>
        </trans-unit>
        <trans-unit id="16ecb5f9431de8b0cec5717985eb281e13fa564f" translate="yes" xml:space="preserve">
          <source>Ember.js</source>
          <target state="translated">Ember.js</target>
        </trans-unit>
        <trans-unit id="458e24469151660fde7d84afba0b01bacced24d3" translate="yes" xml:space="preserve">
          <source>Ember.js Todo List in the spirit of &lt;a href=&quot;http://todomvc.com/&quot;&gt;TodoMVC&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://todomvc.com/&quot;&gt;TodoMVC&lt;/a&gt;の精神によるEmber.js Todoリスト。</target>
        </trans-unit>
        <trans-unit id="a4326def9b0d2a88275d51ab55b6090e5dcc267f" translate="yes" xml:space="preserve">
          <source>Emergency Repair mode</source>
          <target state="translated">緊急修理モード</target>
        </trans-unit>
        <trans-unit id="6a3bf7c36dac32c9fd690a01446afb3c63dce903" translate="yes" xml:space="preserve">
          <source>Encapsulate binary data within a query.</source>
          <target state="translated">クエリ内のバイナリデータをカプセル化します。</target>
        </trans-unit>
        <trans-unit id="221c7ec5b48be1b9c45eee5c3086aa9f31aaeabf" translate="yes" xml:space="preserve">
          <source>End the sequence after the given number of elements.</source>
          <target state="translated">指定された要素数の後にシーケンスを終了します。</target>
        </trans-unit>
        <trans-unit id="0df15f0bc25e5c3cc56af8f7cd91284eacfd6f56" translate="yes" xml:space="preserve">
          <source>Ensure you have &lt;a href=&quot;../../install/index&quot;&gt;RethinkDB installed&lt;/a&gt; for your platform</source>
          <target state="translated">プラットフォームに&lt;a href=&quot;../../install/index&quot;&gt;RethinkDBがインストールさ&lt;/a&gt;れていることを確認します</target>
        </trans-unit>
        <trans-unit id="e65cbb827f74ca21dd794dac16142d8c51d82030" translate="yes" xml:space="preserve">
          <source>Ensure you have &lt;a href=&quot;../install/index&quot;&gt;RethinkDB installed&lt;/a&gt; for your platform.</source>
          <target state="translated">プラットフォームに&lt;a href=&quot;../install/index&quot;&gt;RethinkDBがインストールさ&lt;/a&gt;れていることを確認します。</target>
        </trans-unit>
        <trans-unit id="684d0de7cbf294a85fcbfcf11a5690384bb77c18" translate="yes" xml:space="preserve">
          <source>Enter &amp;ldquo;29015&amp;rdquo; as the port range.</source>
          <target state="translated">ポート範囲として「29015」を入力します。</target>
        </trans-unit>
        <trans-unit id="64c494d3e04ef93491bd5c9b7b9476e163d4ea57" translate="yes" xml:space="preserve">
          <source>Enter a name for the deployment.</source>
          <target state="translated">配置の名前を入力します。</target>
        </trans-unit>
        <trans-unit id="73005778a4f4d967ddcff2ebbccae0f463990331" translate="yes" xml:space="preserve">
          <source>Erlang</source>
          <target state="translated">Erlang</target>
        </trans-unit>
        <trans-unit id="73631d7f0356fdbdeaa36f8e5dbad89c6aa15dc4" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="791a69f19a69a95d78745770545e8504ba8e369a" translate="yes" xml:space="preserve">
          <source>Error types</source>
          <target state="translated">エラーの種類</target>
        </trans-unit>
        <trans-unit id="9893c883c41be4565bdda5358a42e0fd8977e8d3" translate="yes" xml:space="preserve">
          <source>Even if the primary keys contain unevenly distributed data (such as human last names, where some keys are likely to occur much more frequently than others), the system will still pick a correct split point to ensure that each shard has a roughly similar number of documents (there are many more Smiths in the phone book than Akhmechets).</source>
          <target state="translated">主キーに不均等に分散されたデータが含まれていたとしても(人間の苗字のように、いくつかのキーが他のキーよりもはるかに頻繁に出現する可能性が高い)、システムは各シャードがほぼ同じ数の文書を持つことを保証するために正しい分割ポイントを選択します(電話帳にはAkhmechetsよりも多くのSmithsがあります)。</target>
        </trans-unit>
        <trans-unit id="ee7229cc0c11c76bb5a58938403dcb7679db6155" translate="yes" xml:space="preserve">
          <source>Even if you have a cluster of RethinkDB nodes, you can send your queries to any node and the cluster will create and execute distributed programs that get the data from relevant nodes, perform the necessary computations, and present you with final results without you ever worrying about it.</source>
          <target state="translated">RethinkDBノードのクラスタを持っていても、どのノードにもクエリを送ることができ、クラスタは関連するノードからデータを取得し、必要な計算を行い、最終的な結果を提示する分散プログラムを作成して実行してくれるので、一度も気にすることなく利用できます。</target>
        </trans-unit>
        <trans-unit id="e8186b7a747164ffe7fc470fc9dfd07e508dd436" translate="yes" xml:space="preserve">
          <source>EventEmitter (connection)</source>
          <target state="translated">イベントエミッタ</target>
        </trans-unit>
        <trans-unit id="bcf0bce813d172f15366d452a13113661b93a921" translate="yes" xml:space="preserve">
          <source>EventEmitter (cursor)</source>
          <target state="translated">イベントエミッタ(カーソル)</target>
        </trans-unit>
        <trans-unit id="e997035a957390f625a59a7348af8b534ca9f9a7" translate="yes" xml:space="preserve">
          <source>Every ReQL query, from filters, to updates, to table joins is done by calling appropriate methods.</source>
          <target state="translated">フィルタから更新、テーブルの結合まで、すべてのReQLクエリは適切なメソッドを呼び出すことで実行されます。</target>
        </trans-unit>
        <trans-unit id="4934e9c40e5cc4251d0ee5a19046b039698ba0c7" translate="yes" xml:space="preserve">
          <source>Every post contains an &lt;code&gt;author_id&lt;/code&gt; field that links each post to its author. We can retrieve all posts for a given author as follows:</source>
          <target state="translated">すべての投稿には、各投稿をその投稿者にリンクする &lt;code&gt;author_id&lt;/code&gt; フィールドが含まれています。次のようにして、特定の作成者のすべての投稿を取得できます。</target>
        </trans-unit>
        <trans-unit id="df5fcccb14f2a7dcbaa752d5c45e28a725a1a5ca" translate="yes" xml:space="preserve">
          <source>Every server that has ever been part of the cluster and has not been permanently removed will have a row in this table in the following format.</source>
          <target state="translated">これまでにクラスタの一部であり、恒久的に削除されていないすべてのサーバは、このテーブルに以下の形式の行を持つことになります。</target>
        </trans-unit>
        <trans-unit id="bfc2c0d73225f81a276d37dd019c55d163987b1d" translate="yes" xml:space="preserve">
          <source>Every shard in RethinkDB is assigned to a single authoritative primary replica. All reads and writes to any key in a given shard always get routed to its respective primary, where they&amp;rsquo;re ordered and evaluated. Data always remains immediately consistent and conflict-free, and a read that follows an acknowledged write is always guaranteed to see the write. However, neither reads nor writes are guaranteed to succeed if the primary replica is unavailable.</source>
          <target state="translated">RethinkDBのすべてのシャードは、1つの信頼できるプライマリレプリカに割り当てられます。特定のシャード内の任意のキーに対するすべての読み取りと書き込みは、常にそれぞれのプライマリにルーティングされ、そこでそれらが順序付けられて評価されます。データは常に即座に一貫性があり、競合が発生しないままであり、確認済みの書き込みに続く読み取りは常に書き込みを確認することが保証されています。ただし、プライマリレプリカが利用できない場合、読み取りも書き込みも成功するとは限りません。</target>
        </trans-unit>
        <trans-unit id="e35c5d4273e10ed0a55b2c445fe2e46bf98c9665" translate="yes" xml:space="preserve">
          <source>Every time a change occurs, &lt;code&gt;changeCursor.each&lt;/code&gt; will push the message into the exchange. The &lt;code&gt;routingKey&lt;/code&gt; is the topic we&amp;rsquo;ll be sending it on. For this example, we have three different topics: &lt;code&gt;mytable.create&lt;/code&gt;, &lt;code&gt;mytable.update&lt;/code&gt;, and &lt;code&gt;mytable.delete&lt;/code&gt;. Each topic contains only changes of the corresponding type. The function &lt;code&gt;typeOfChange&lt;/code&gt; does this mapping using the protocol described above.</source>
          <target state="translated">変更が発生するたびに、 &lt;code&gt;changeCursor.each&lt;/code&gt; はメッセージをエクスチェンジにプッシュします。 &lt;code&gt;routingKey&lt;/code&gt; は、我々はそれを送信することがありますトピックです。この例では、 &lt;code&gt;mytable.update&lt;/code&gt; 、 &lt;code&gt;mytable.create&lt;/code&gt; 、mytable.deleteの 3つの異なるトピックがあり &lt;code&gt;mytable.delete&lt;/code&gt; 。各トピックには、対応するタイプの変更のみが含まれています。関数 &lt;code&gt;typeOfChange&lt;/code&gt; は、上記のプロトコルを使用してこのマッピングを行います。</target>
        </trans-unit>
        <trans-unit id="a811992abb7ef148772f3b9c5c56152d161a926f" translate="yes" xml:space="preserve">
          <source>Example 1: No auth key</source>
          <target state="translated">例1:認証キーがない</target>
        </trans-unit>
        <trans-unit id="a5d292470fae05aa6d7048619686195ac62f92f4" translate="yes" xml:space="preserve">
          <source>Example 2: Auth key</source>
          <target state="translated">例2:認証キー</target>
        </trans-unit>
        <trans-unit id="cc604bfa71e82620908be6522acdac0ccf013433" translate="yes" xml:space="preserve">
          <source>Example projects</source>
          <target state="translated">プロジェクト例</target>
        </trans-unit>
        <trans-unit id="3794ebad772830eca733e9966ea24955a9ddc9f3" translate="yes" xml:space="preserve">
          <source>Example return:</source>
          <target state="translated">戻り値の例。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="48de4726cf54009b460401c3363adcbb0eb3dba2" translate="yes" xml:space="preserve">
          <source>Except for brief periods, a table will remain fully available as long as more than half of the voting replicas for each shard and for the table overall are available. If half or more of the voting replicas for a shard are lost, then read or write operations on that shard will fail.</source>
          <target state="translated">短期間を除き、各シャードとテーブル全体の投票用レプリカの半分以上が利用可能である限り、テーブルは完全に利用可能な状態を維持します。あるシャードの投票用レプリカの半分以上が失われた場合、そのシャードの読み取りまたは書き込み操作は失敗します。</target>
        </trans-unit>
        <trans-unit id="b768387bbe4cb9d8e7a343a0759a79ea61b10e24" translate="yes" xml:space="preserve">
          <source>Existing table structure:</source>
          <target state="translated">既存のテーブル構造。</target>
        </trans-unit>
        <trans-unit id="af29b2b47889fc78a1ab192fe0dff01cc3ab0eb4" translate="yes" xml:space="preserve">
          <source>Explicitly closing a query</source>
          <target state="translated">クエリを明示的に閉じる</target>
        </trans-unit>
        <trans-unit id="40ec07205cb64084dce637e132963989fbff84cb" translate="yes" xml:space="preserve">
          <source>Export your data from the existing version of RethinkDB</source>
          <target state="translated">既存バージョンのRethinkDBからデータをエクスポートする</target>
        </trans-unit>
        <trans-unit id="9169942c048ce97de46464ad1b4d520fe7600219" translate="yes" xml:space="preserve">
          <source>Exporting your data</source>
          <target state="translated">データのエクスポート</target>
        </trans-unit>
        <trans-unit id="8b652040961793dd0ebfc35016e694eff7d88f91" translate="yes" xml:space="preserve">
          <source>Express</source>
          <target state="translated">Express</target>
        </trans-unit>
        <trans-unit id="094d3530231e5ca3d987c037cbb823e63804c875" translate="yes" xml:space="preserve">
          <source>Express 4.0</source>
          <target state="translated">エクスプレス4.0</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="53f6dcd6161f513e923433a491e5f54eaf4dd51c" translate="yes" xml:space="preserve">
          <source>External API access</source>
          <target state="translated">外部APIアクセス</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="6d272f803d08e8669caa084ab669e54ff905af2c" translate="yes" xml:space="preserve">
          <source>Failover</source>
          <target state="translated">Failover</target>
        </trans-unit>
        <trans-unit id="1e094a40fa4f339157a419a03f2d26c83e268e5e" translate="yes" xml:space="preserve">
          <source>Featured articles</source>
          <target state="translated">注目の記事</target>
        </trans-unit>
        <trans-unit id="bc5fc74a0c921be17dde1b381a9a43609da45dab" translate="yes" xml:space="preserve">
          <source>Fedora</source>
          <target state="translated">Fedora</target>
        </trans-unit>
        <trans-unit id="91374dd61d5fb52c72288440c99c7a71e6e1c396" translate="yes" xml:space="preserve">
          <source>Feel free to skip this section if you don&amp;rsquo;t want to learn about realtime feeds yet. You can always go back and start a feed later.</source>
          <target state="translated">リアルタイムフィードについてまだ学習したくない場合は、このセクションをスキップしてください。いつでも戻ってフィードを開始できます。</target>
        </trans-unit>
        <trans-unit id="f5fb46d22a2eee9eb377c00b943444683f1c8d72" translate="yes" xml:space="preserve">
          <source>File path options</source>
          <target state="translated">ファイルパスオプション</target>
        </trans-unit>
        <trans-unit id="4c6ac57b7b2f95e8e3cc573dcd9555b79add3e53" translate="yes" xml:space="preserve">
          <source>Filter documents based on a condition</source>
          <target state="translated">条件に基づいてドキュメントをフィルタリング</target>
        </trans-unit>
        <trans-unit id="9075edca21736af901d2add18e4d9491f2452b4d" translate="yes" xml:space="preserve">
          <source>Filtering</source>
          <target state="translated">Filtering</target>
        </trans-unit>
        <trans-unit id="dabdc190e7d6d2a2992b2debc16e730a618235dc" translate="yes" xml:space="preserve">
          <source>Filtering based on a date range</source>
          <target state="translated">日付範囲に基づくフィルタリング</target>
        </trans-unit>
        <trans-unit id="af40e126c53eb88044d3587384e4011154e5a4fd" translate="yes" xml:space="preserve">
          <source>Filtering based on arrays</source>
          <target state="translated">配列に基づくフィルタリング</target>
        </trans-unit>
        <trans-unit id="0b2f0d7e22b6f03b5f567605417abec343bcc4b8" translate="yes" xml:space="preserve">
          <source>Filtering based on multiple fields</source>
          <target state="translated">複数のフィールドに基づくフィルタリング</target>
        </trans-unit>
        <trans-unit id="8e2d44be20b1b0d731e62015e059016b0e47760e" translate="yes" xml:space="preserve">
          <source>Filtering based on nested fields</source>
          <target state="translated">入れ子になったフィールドに基づくフィルタリング</target>
        </trans-unit>
        <trans-unit id="2a953fd3faedac0d8e2ec397ba08d4bffbdc0082" translate="yes" xml:space="preserve">
          <source>Filtering based on the presence of a value in an array</source>
          <target state="translated">配列内の値の存在に基づくフィルタリング</target>
        </trans-unit>
        <trans-unit id="3266bec2d0caf5614ceb47d6ff723ac894da5e82" translate="yes" xml:space="preserve">
          <source>Filtering with Regex</source>
          <target state="translated">リージェックスによるフィルタリング</target>
        </trans-unit>
        <trans-unit id="b78e29b73a553d55622345da3b7fc0348685e859" translate="yes" xml:space="preserve">
          <source>Filters with &lt;code&gt;or&lt;/code&gt; return incorrect/unexpected results</source>
          <target state="translated">フィルターをかける &lt;code&gt;or&lt;/code&gt; 正しくない/予期しない結果を返す</target>
        </trans-unit>
        <trans-unit id="40b520f169ce16f80a18ab7b0483957867958583" translate="yes" xml:space="preserve">
          <source>Finally, let&amp;rsquo;s do a slightly more sophisticated query. Let&amp;rsquo;s find all shows with more than 100 episodes.</source>
          <target state="translated">最後に、もう少し洗練されたクエリを実行してみましょう。100以上のエピソードを含むすべての番組を検索してみましょう。</target>
        </trans-unit>
        <trans-unit id="b40254fe7c26f58da4f30564ad791e6bb3c30e88" translate="yes" xml:space="preserve">
          <source>Finally, to listen to the queue, we use the &lt;code&gt;channel.consume&lt;/code&gt; generator. Similar to the changefeed cursor from RethinkDB, &lt;code&gt;consume&lt;/code&gt; will will invoke its callback whenever a message arrives in the queue.</source>
          <target state="translated">最後に、キューをリッスンするために、 &lt;code&gt;channel.consume&lt;/code&gt; ジェネレーターを使用します。RethinkDBからのchangefeedカーソルと同様に、 &lt;code&gt;consume&lt;/code&gt; は、メッセージがキューに到着するたびにコールバックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="8e5e989f2533ec8d732d8c8a750c53fbcb1d2055" translate="yes" xml:space="preserve">
          <source>Finally, we demonstrate RethinkDB&amp;rsquo;s automatic query parallelization. Analytic queries are transparently distributed over servers in the cluster in a MapReduce-style pattern.</source>
          <target state="translated">最後に、RethinkDBの自動クエリ並列化を示します。分析クエリは、MapReduceスタイルのパターンでクラスター内のサーバーに透過的に分散されます。</target>
        </trans-unit>
        <trans-unit id="36054e295d2fb95b73d4ac60acfca3347f2a7e1c" translate="yes" xml:space="preserve">
          <source>Finally, we used a MapReduce query to compute word counts across the whole data set. This test evaluates RethinkDB&amp;rsquo;s scalability for analytic workloads in a simplistic but very common fashion. These types of workloads involve doing information processing on the server itself versus typical single or ranged reads and writes of information processed at the application level.</source>
          <target state="translated">最後に、MapReduceクエリを使用して、データセット全体の単語数を計算しました。このテストは、分析ワークロードに対するRethinkDBのスケーラビリティを単純化された非常に一般的な方法で評価します。これらのタイプのワークロードには、アプリケーションレベルで処理される情報の一般的な単一または範囲内の読み取りと書き込みではなく、サーバー自体で情報処理を行うことが含まれます。</target>
        </trans-unit>
        <trans-unit id="daec87f5c6f6d393e03930bf137cc37a2652d62b" translate="yes" xml:space="preserve">
          <source>Finally, we&amp;rsquo;ll use &lt;a href=&quot;https://rethinkdb.com/api/python/ungroup/&quot;&gt;ungroup&lt;/a&gt; to turn this grouped data into an array of objects with &lt;code&gt;group&lt;/code&gt; and &lt;code&gt;reduction&lt;/code&gt; keys. The &lt;code&gt;group&lt;/code&gt; field will be the item ID for each group; the &lt;code&gt;reduction&lt;/code&gt; field will have all the items from the &lt;code&gt;concat_map&lt;/code&gt; function that belong to each group. Then we&amp;rsquo;ll use &lt;code&gt;map&lt;/code&gt; once more to iterate through that array, computing the average on this pass.</source>
          <target state="translated">最後に、&lt;a href=&quot;https://rethinkdb.com/api/python/ungroup/&quot;&gt;ungroup&lt;/a&gt;を使用して、このグループ化されたデータを、 &lt;code&gt;group&lt;/code&gt; キーと &lt;code&gt;reduction&lt;/code&gt; キーを持つオブジェクトの配列に変換します。 &lt;code&gt;group&lt;/code&gt; フィールドは、各グループのアイテムIDであろう。 &lt;code&gt;reduction&lt;/code&gt; フィールドはからすべての項目があります &lt;code&gt;concat_map&lt;/code&gt; の各グループに属する機能を。次に、 &lt;code&gt;map&lt;/code&gt; をもう一度使用してその配列を反復処理し、このパスの平均を計算します。</target>
        </trans-unit>
        <trans-unit id="007312c4c09f1856bfc29458a5dc202fddf4f4b4" translate="yes" xml:space="preserve">
          <source>Find and solve the problem preventing the server from writing to the logs (for example, freeing up disk space if the disk is full). There will only be one issue per unique error message received&amp;mdash;if multiple servers encounter the same error, only one issue will appear in the table.</source>
          <target state="translated">サーバーがログへの書き込みを妨げている問題を見つけて解決します（たとえば、ディスクがいっぱいの場合、ディスク領域を解放します）。受信した一意のエラーメッセージごとに1つの問題のみが存在します。複数のサーバーで同じエラーが発生した場合、表には1つの問題のみが表示されます。</target>
        </trans-unit>
        <trans-unit id="c9d5cb44d3b0f58cedb8f48c955a7dce17a34fe8" translate="yes" xml:space="preserve">
          <source>Find the average number of votes for the top 25 movies</source>
          <target state="translated">上位25作品の平均得票数を探す</target>
        </trans-unit>
        <trans-unit id="648ec5e5588b356c52dc1a03e0a0592b3c775435" translate="yes" xml:space="preserve">
          <source>Find the highest-ranked movie with under 100,000 votes</source>
          <target state="translated">10万票以下の映画の最高位を探す</target>
        </trans-unit>
        <trans-unit id="4cc4adc30c496397d001156fd354133396026b1e" translate="yes" xml:space="preserve">
          <source>Find the most recent movie in the top 25</source>
          <target state="translated">トップ25の最新映画を探す</target>
        </trans-unit>
        <trans-unit id="a8dfcf18b0e3f6e1d60d7f31fa83be360af31827" translate="yes" xml:space="preserve">
          <source>Find the remainder when dividing two numbers.</source>
          <target state="translated">2つの数字を割るときの余りを求めます。</target>
        </trans-unit>
        <trans-unit id="42590d3f1df61cac741a6c77260a881922b2d5a1" translate="yes" xml:space="preserve">
          <source>Finds the maximum element of a sequence.</source>
          <target state="translated">シーケンスの最大要素を求めます。</target>
        </trans-unit>
        <trans-unit id="0fec55efc128d98cc292fb88883ac25b1680be38" translate="yes" xml:space="preserve">
          <source>Finds the minimum element of a sequence.</source>
          <target state="translated">シーケンスの最小要素を求めます.</target>
        </trans-unit>
        <trans-unit id="3d517c10e7012f46547c69bad63936489c2ddf91" translate="yes" xml:space="preserve">
          <source>Firefox 15 or higher</source>
          <target state="translated">Firefox 15以上</target>
        </trans-unit>
        <trans-unit id="0102c3d8669578171735575a4840181f111c0d2f" translate="yes" xml:space="preserve">
          <source>First we&amp;rsquo;ll need to set up the connection to the RethinkDB server:</source>
          <target state="translated">最初に、RethinkDBサーバーへの接続を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f0ce73e1bd3c4e021122e8bb1b9d7f61f413146e" translate="yes" xml:space="preserve">
          <source>First, create the RethinkDB data directory with the following command and set the ownership to the &lt;code&gt;rethinkdb&lt;/code&gt; user:</source>
          <target state="translated">まず、次のコマンドでRethinkDBデータディレクトリを作成し、所有権を &lt;code&gt;rethinkdb&lt;/code&gt; ユーザーに設定します。</target>
        </trans-unit>
        <trans-unit id="8ea168b0f18b8eecb6f4610da8a8522f1ac5fc87" translate="yes" xml:space="preserve">
          <source>First, generate a 2048-bit key and save it to &lt;code&gt;key.pem&lt;/code&gt;:</source>
          <target state="translated">まず、2048ビットの鍵を生成し、それを &lt;code&gt;key.pem&lt;/code&gt; に保存します。</target>
        </trans-unit>
        <trans-unit id="d46927480ce458a42bf3ede52b3713f2840db878" translate="yes" xml:space="preserve">
          <source>First, generate a new Rails application using NoBrainer:</source>
          <target state="translated">まず、NoBrainerを使って新しいRailsアプリケーションを生成します。</target>
        </trans-unit>
        <trans-unit id="482649db685fddf30031d286f6adb954f913056f" translate="yes" xml:space="preserve">
          <source>First, let&amp;rsquo;s create a table and insert some events. We&amp;rsquo;ll insert the first event using a native Date object, and the second with the &lt;code&gt;epochTime&lt;/code&gt; constructor:</source>
          <target state="translated">まず、テーブルを作成し、いくつかのイベントを挿入しましょう。最初のイベントをネイティブのDateオブジェクトを使用して挿入し、2番目のイベントを &lt;code&gt;epochTime&lt;/code&gt; コンストラクターを使用して挿入します。</target>
        </trans-unit>
        <trans-unit id="bed137906e7b113d766de24c1dbdae554b8ba4e8" translate="yes" xml:space="preserve">
          <source>First, let&amp;rsquo;s return the total price per customer. Since this is pre-computed per order in the &lt;code&gt;total&lt;/code&gt; field, this is easily done with one of RethinkDB&amp;rsquo;s aggregation functions.</source>
          <target state="translated">まず、顧客ごとの合計金額を返します。これは、 &lt;code&gt;total&lt;/code&gt; フィールドの注文ごとに事前に計算されるため、RethinkDBの集計関数の1つを使用して簡単に実行できます。</target>
        </trans-unit>
        <trans-unit id="ebfeb613e439d6875b54587467e3236afcdfd2c0" translate="yes" xml:space="preserve">
          <source>First, protect the driver port so that it cannot be accessed from the outside world. Use the &lt;code&gt;--bind-driver&lt;/code&gt;&lt;a href=&quot;../cli-options/index&quot;&gt;command line option&lt;/a&gt; or the corresponding &lt;a href=&quot;../config-file/index&quot;&gt;configuration file option&lt;/a&gt; to bind it to &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="translated">まず、外部からアクセスできないようにドライバーポートを保護します。使用 &lt;code&gt;--bind-driver&lt;/code&gt; &lt;a href=&quot;../cli-options/index&quot;&gt;のコマンドラインオプション&lt;/a&gt;または対応する&lt;a href=&quot;../config-file/index&quot;&gt;コンフィギュレーションファイルオプション&lt;/a&gt;にそれをバインドする &lt;code&gt;localhost&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd220063fd740a74a07bc036d4fc353b1e57cd3d" translate="yes" xml:space="preserve">
          <source>First, start Node.js:</source>
          <target state="translated">まず、Node.jsを起動します。</target>
        </trans-unit>
        <trans-unit id="6c63e5e20a614355612c28b38cdaeee9fe035604" translate="yes" xml:space="preserve">
          <source>First, start RethinkDB on the first machine:</source>
          <target state="translated">まず、最初のマシンでRethinkDBを起動します。</target>
        </trans-unit>
        <trans-unit id="dd182139ee0d88544678198a152a032ef7a33e44" translate="yes" xml:space="preserve">
          <source>First, start the RethinkDB server. Under OS X or Linux, do this from a terminal window.</source>
          <target state="translated">まず、RethinkDBサーバを起動します。OS XまたはLinuxの場合は、ターミナルウィンドウからこれを実行します。</target>
        </trans-unit>
        <trans-unit id="d795fc8fda273af7dc2b5e8c1b6ccc59628dd2ed" translate="yes" xml:space="preserve">
          <source>First, the query is transformed into an execution plan that consists of a stack of internal logical operations. The operation stack fully describes the query in a data structure useful for efficient execution. The bottom-most node of the stack usually deals with data access&amp;mdash; it can be a lookup of a single document, a short range scan bounded by an index, or even a full table scan. Nodes closer to the top usually perform transformations on the data &amp;ndash; mapping the values, running reductions, grouping, etc. Nodes can be as simple as projections (i.e. returning a subset of the document), or as complex as entire stacks of stacks in case of subqueries.</source>
          <target state="translated">最初に、クエリは、内部論理演算のスタックで構成される実行プランに変換されます。操作スタックは、効率的な実行に役立つデータ構造でクエリを完全に記述します。スタックの一番下のノードは通常、データアクセスを処理します。これは、単一のドキュメントのルックアップ、インデックスで区切られた短距離スキャン、または全テーブルスキャンです。上部に近いノードは通常、データの変換を実行します-値のマッピング、削減の実行、グループ化など。ノードは、射影のように単純（つまり、ドキュメントのサブセットを返す）か、場合によってはスタックのスタック全体のように複雑にすることができます。サブクエリの。</target>
        </trans-unit>
        <trans-unit id="a013f15e6511fbb3b9f8788e0de1810c77e398a2" translate="yes" xml:space="preserve">
          <source>First, upgrade the RethinkDB server and drivers to the latest version:</source>
          <target state="translated">まず、RethinkDBサーバとドライバを最新版にアップグレードします。</target>
        </trans-unit>
        <trans-unit id="df3da99ea86affd32c6ce2c8179a2ef7ef0b2c1c" translate="yes" xml:space="preserve">
          <source>First, we select the database &lt;code&gt;test&lt;/code&gt; with the &lt;code&gt;db&lt;/code&gt; command.</source>
          <target state="translated">まず、データベースの選択 &lt;code&gt;test&lt;/code&gt; で &lt;code&gt;db&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="b539bd7631b9214a2867d39673c171bdf4566658" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll &lt;code&gt;group&lt;/code&gt; the posts:</source>
          <target state="translated">まず、投稿を &lt;code&gt;group&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="389d476d55e324c891c424c087bb86dfe6a7c88d" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll map each post to the number &lt;code&gt;1&lt;/code&gt;:</source>
          <target state="translated">まず、各投稿を数値 &lt;code&gt;1&lt;/code&gt; にマッピングします。</target>
        </trans-unit>
        <trans-unit id="f749d85face6d985a84c2dd0bb2da0a1fcb65288" translate="yes" xml:space="preserve">
          <source>Flask</source>
          <target state="translated">Flask</target>
        </trans-unit>
        <trans-unit id="586977a72bd4010962bceb8eaa932a66c269cc9c" translate="yes" xml:space="preserve">
          <source>Follow the directions in the README file to perform the migration.</source>
          <target state="translated">READMEファイルの指示に従って移行を実行してください。</target>
        </trans-unit>
        <trans-unit id="86d9a678e2151df849e8217ca7b153ff09f26843" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;config_changes&lt;/code&gt; and &lt;code&gt;status_changes&lt;/code&gt;, see the &lt;a href=&quot;../config/index&quot;&gt;config&lt;/a&gt; and &lt;a href=&quot;../status/index&quot;&gt;status&lt;/a&gt; commands for an explanation of the objects returned in the &lt;code&gt;old_val&lt;/code&gt; and &lt;code&gt;new_val&lt;/code&gt; fields.</source>
          <target state="translated">&lt;code&gt;config_changes&lt;/code&gt; と &lt;code&gt;status_changes&lt;/code&gt; 、参照&lt;a href=&quot;../config/index&quot;&gt;設定&lt;/a&gt;や&lt;a href=&quot;../status/index&quot;&gt;状態&lt;/a&gt;に戻されたオブジェクトの説明については、コマンドを &lt;code&gt;old_val&lt;/code&gt; と &lt;code&gt;new_val&lt;/code&gt; フィールド。</target>
        </trans-unit>
        <trans-unit id="db4922f3b8921fb32ec6caa0a025b585a5d4ec46" translate="yes" xml:space="preserve">
          <source>For a JavaScript version of the file, run &lt;code&gt;make js-driver&lt;/code&gt; in the &lt;code&gt;rethinkdb&lt;/code&gt; repo, and retrieve the JSON version of the file in &lt;code&gt;build/packages/js/proto-def.js&lt;/code&gt;. Alternatively you may grab the equivalent file from &lt;a href=&quot;https://github.com/neumino/rethinkdbdash/blob/master/lib/protodef.js&quot;&gt;rethinkdbdash&lt;/a&gt;.</source>
          <target state="translated">ファイルのJavaScriptバージョンについては、 &lt;code&gt;rethinkdb&lt;/code&gt; リポジトリで &lt;code&gt;make js-driver&lt;/code&gt; を実行し、 &lt;code&gt;build/packages/js/proto-def.js&lt;/code&gt; でファイルのJSONバージョンを取得します。または、&lt;a href=&quot;https://github.com/neumino/rethinkdbdash/blob/master/lib/protodef.js&quot;&gt;rethinkdbdash&lt;/a&gt;から同等のファイルを取得することもできます。</target>
        </trans-unit>
        <trans-unit id="e74a820722b2e12680e4c0867b16e2efc6451ca1" translate="yes" xml:space="preserve">
          <source>For a complete list of options that can be passed to RethinkDB on the command line, read &lt;a href=&quot;../cli-options/index&quot;&gt;RethinkDB command line options&lt;/a&gt; or type &lt;code&gt;rethinkdb --help&lt;/code&gt; at the terminal prompt.</source>
          <target state="translated">コマンドラインでRethinkDBに渡すことができるオプションの完全なリストについては、&lt;a href=&quot;../cli-options/index&quot;&gt;RethinkDBコマンドラインオプションを参照する&lt;/a&gt;か、ターミナルプロンプトで &lt;code&gt;rethinkdb --help&lt;/code&gt; と入力してください。</target>
        </trans-unit>
        <trans-unit id="cb003cc59a68ab738ca5cfafe87aa97c3e5f97de" translate="yes" xml:space="preserve">
          <source>For a complete list of options that can be passed to RethinkDB on the command line, read &lt;a href=&quot;../cli-options/index&quot;&gt;RethinkDB command line options&lt;/a&gt;, or type &lt;code&gt;rethinkdb --help&lt;/code&gt; at the terminal prompt.</source>
          <target state="translated">コマンドラインでRethinkDBに渡すことができるオプションの完全なリストについては、&lt;a href=&quot;../cli-options/index&quot;&gt;RethinkDBコマンドラインオプション&lt;/a&gt;を参照するか、ターミナルプロンプトで &lt;code&gt;rethinkdb --help&lt;/code&gt; と入力してください。</target>
        </trans-unit>
        <trans-unit id="c895ece154822393de182e84f5f3e401d9dcc9aa" translate="yes" xml:space="preserve">
          <source>For a full description of permissions, read &lt;a href=&quot;../../../docs/permissions-and-accounts/index&quot;&gt;Permissions and user accounts&lt;/a&gt;.</source>
          <target state="translated">権限の詳細については、&lt;a href=&quot;../../../docs/permissions-and-accounts/index&quot;&gt;権限とユーザーアカウントをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f41fd0af4d69c01a0aa33730cdd58d9234eb2c04" translate="yes" xml:space="preserve">
          <source>For a more detailed explanation of this, consult the Wikipedia article on the &lt;a href=&quot;http://en.wikipedia.org/wiki/Geographic_coordinate_system&quot;&gt;geographic coordinate system&lt;/a&gt;.</source>
          <target state="translated">この詳細については、&lt;a href=&quot;http://en.wikipedia.org/wiki/Geographic_coordinate_system&quot;&gt;地理座標系&lt;/a&gt;に関するウィキペディアの記事をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7a8292eb683367bd99a42007eb2cba576499d906" translate="yes" xml:space="preserve">
          <source>For a more detailed look, make sure to read the &lt;a href=&quot;../../quickstart/index&quot;&gt;quickstart&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../quickstart/index&quot;&gt;クイックスタート&lt;/a&gt;を必ずお読みください。</target>
        </trans-unit>
        <trans-unit id="145ae9f70b2b61b630eb41c0bfb84657bd6cfbc7" translate="yes" xml:space="preserve">
          <source>For a more fine-grained mechanism, replicas can be associated with servers using &lt;em&gt;server tags.&lt;/em&gt; Every server may be assigned one or more tags, and every table may have a specified number of replicas assigned to a server tag. For instance, if you have six servers, you might assign two the tag &lt;code&gt;us_west&lt;/code&gt;, two the tag &lt;code&gt;us_east&lt;/code&gt;, and two the tag &lt;code&gt;london&lt;/code&gt;, and further assign all four servers in the United States the tag &lt;code&gt;us&lt;/code&gt;. Then tables might have their configuration set with &lt;code&gt;reconfigure&lt;/code&gt; to group replicas in specific ways:</source>
          <target state="translated">よりきめの細かいメカニズムでは、&lt;em&gt;サーバータグ&lt;/em&gt;を使用してレプリカをサーバーに関連付けることが&lt;em&gt;できます。&lt;/em&gt;すべてのサーバーに1つまたは複数のタグを割り当てることができ、すべてのテーブルにサーバータグに割り当てられたレプリカの指定数を含めることができます。たとえば、サーバーが6台ある場合、2つのタグ &lt;code&gt;us_west&lt;/code&gt; 、2つのタグ &lt;code&gt;us_east&lt;/code&gt; 、2つのタグ &lt;code&gt;london&lt;/code&gt; を割り当て、さらに米国内の4つすべてのサーバーにタグ &lt;code&gt;us&lt;/code&gt; を割り当てることができます。次に、特定の方法でレプリカをグループ化するための &lt;code&gt;reconfigure&lt;/code&gt; を使用して、テーブルの構成を設定します。</target>
        </trans-unit>
        <trans-unit id="757efff80df760ee332b0870744cd52386fa33d5" translate="yes" xml:space="preserve">
          <source>For a practical example, imagine a data set like the one from the &lt;a href=&quot;http://www.rethinkdb.com/docs/cookbook/javascript/#performing-a-pivot-operation&quot;&gt;pivot example&lt;/a&gt;, where each document represents a student&amp;rsquo;s course record.</source>
          <target state="translated">実際の例として、&lt;a href=&quot;http://www.rethinkdb.com/docs/cookbook/javascript/#performing-a-pivot-operation&quot;&gt;ピボットの例の&lt;/a&gt;ようなデータセットを想像してください。各ドキュメントは学生のコースレコードを表しています。</target>
        </trans-unit>
        <trans-unit id="6a37e16516ded8b1574568dc1bd66f3233a12d6a" translate="yes" xml:space="preserve">
          <source>For added security, you can isolate a multi-node RethinkDB cluster on AWS using a Virtual Private Cloud security group. The default security group settings for RethinkDB allow anyone to connect to the database&amp;rsquo;s driver port, but exclude the intracluster port. Follow the steps below to set up your security groups.</source>
          <target state="translated">セキュリティを強化するために、仮想プライベートクラウドセキュリティグループを使用して、AWS上のマルチノードRethinkDBクラスターを分離できます。RethinkDBのデフォルトのセキュリティグループ設定では、誰でもデータベースのドライバーポートに接続できますが、クラスター内ポートは除外されます。以下の手順に従って、セキュリティグループを設定します。</target>
        </trans-unit>
        <trans-unit id="128f9950186e5f44193af03d5eb6402c706c83f3" translate="yes" xml:space="preserve">
          <source>For details about these options, read &lt;a href=&quot;../security/index&quot;&gt;Securing your cluster&lt;/a&gt;.</source>
          <target state="translated">これらのオプションの詳細については&lt;a href=&quot;../security/index&quot;&gt;、クラスターの保護を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ae1bd064cc3090066c912dc96eee04a7203c7486" translate="yes" xml:space="preserve">
          <source>For details about this, read &lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;Permissions and user accounts&lt;/a&gt;.</source>
          <target state="translated">詳しくは、&lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;権限とユーザーアカウントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="906aef5ae34b8978ecfda0e18d0dd601f637e54b" translate="yes" xml:space="preserve">
          <source>For details on these two tables, read &lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;Permissions and user accounts&lt;/a&gt;.</source>
          <target state="translated">これら2つのテーブルの詳細については、&lt;a href=&quot;../permissions-and-accounts/index&quot;&gt;権限とユーザーアカウントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="b3f05778721c0a64e546685066275b80001f00af" translate="yes" xml:space="preserve">
          <source>For each repairable shard, &lt;code&gt;emergencyRepair&lt;/code&gt; will convert all unavailable voting replicas into non-voting replicas. If all the voting replicas were removed, an arbitrarily-chosen available non-voting replica will be converted into a voting replica. After this operation, all of the shard&amp;rsquo;s available replicas will be voting replicas.</source>
          <target state="translated">修復可能なシャードごとに、 &lt;code&gt;emergencyRepair&lt;/code&gt; は、使用できないすべての投票レプリカを非投票レプリカに変換します。すべての投票レプリカが削除された場合、任意に選択された使用可能な非投票レプリカが投票レプリカに変換されます。この操作の後、シャードで使用可能なすべてのレプリカが投票レプリカになります。</target>
        </trans-unit>
        <trans-unit id="636abf48decb6d1ef8774dd055cb231e4a760dff" translate="yes" xml:space="preserve">
          <source>For each successive page, start with the last name in the previous page.</source>
          <target state="translated">連続するページについては、前のページの最後の名前から始めます。</target>
        </trans-unit>
        <trans-unit id="111db113ae6102f4071b40d3343eaffef0fdd713" translate="yes" xml:space="preserve">
          <source>For every message sent, repubsub sets the &lt;code&gt;updated_on&lt;/code&gt; key with &lt;code&gt;r.now&lt;/code&gt; to get the current time</source>
          <target state="translated">送信されるすべてのメッセージについて、repubsubは、r_nowを使用して &lt;code&gt;updated_on&lt;/code&gt; キーを &lt;code&gt;r.now&lt;/code&gt; し、現在の時刻を取得します</target>
        </trans-unit>
        <trans-unit id="72bcc28374128d88583c30eb27fc0c731563706d" translate="yes" xml:space="preserve">
          <source>For example you can retrieve all the results and put them in an array with &lt;code&gt;toArray&lt;/code&gt;:</source>
          <target state="translated">たとえば、すべての結果を取得して、 &lt;code&gt;toArray&lt;/code&gt; を使用して配列に入れることができます。</target>
        </trans-unit>
        <trans-unit id="db9a51c2075a6ee318c4bf1fb37b1f85ae712139" translate="yes" xml:space="preserve">
          <source>For example, if a given table contains a thousand JSON documents whose primary keys are uniformly distributed, alphabetical, upper-case strings and the user states they want two shards, RethinkDB will likely pick split point &amp;lsquo;M&amp;rsquo; to partition the table. Every document with a primary key less than or equal to &amp;lsquo;M&amp;rsquo; will go into the first shard, and every document with a primary key greater than &amp;lsquo;M&amp;rsquo; will go into the second shard. The split point will be picked such that each shard contains close to five hundred keys, and the shards will automatically be distributed across the cluster.</source>
          <target state="translated">たとえば、指定されたテーブルに、主キーが均一に分散されたアルファベットの大文字の文字列とユーザーが2つのシャードが必要であるとユーザーが示す1000のJSONドキュメントが含まれている場合、RethinkDBは分割ポイント「M」を選択してテーブルを分割します。「M」以下の主キーを持つすべてのドキュメントは最初のシャードに入り、「M」より大きい主キーを持つすべてのドキュメントは2番目のシャードに入ります。分割ポイントは、各シャードに500近くのキーが含まれるように選択され、シャードはクラスター全体に自動的に分散されます。</target>
        </trans-unit>
        <trans-unit id="4a923e642f82305f7adc526fde23641ea1a171df" translate="yes" xml:space="preserve">
          <source>For example, if you attempt to delete a batch of documents, and another concurrent query deletes some of those documents first, they will be counted as skipped.</source>
          <target state="translated">たとえば、ドキュメントのバッチを削除しようとしたときに、別の同時実行クエリがそれらのドキュメントの一部を先に削除した場合、それらはスキップされたものとしてカウントされます。</target>
        </trans-unit>
        <trans-unit id="d8491fad66155bf0a709fc2e5190368aa775d482" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s count the number of results returned by the API:</source>
          <target state="translated">たとえば、APIから返された結果の数を数えます。</target>
        </trans-unit>
        <trans-unit id="6c5b8346754e8ebb53d69689f9aa0b3d2497d576" translate="yes" xml:space="preserve">
          <source>For example, values of 1.0 up to but not including 1.5 will return 1.0, similar to &lt;a href=&quot;../floor/index&quot;&gt;floor&lt;/a&gt;; values of 1.5 up to 2.0 will return 2.0, similar to &lt;a href=&quot;../ceil/index&quot;&gt;ceil&lt;/a&gt;.</source>
          <target state="translated">たとえば、1.0までの値（1.5を含まない）は、&lt;a href=&quot;../floor/index&quot;&gt;floor&lt;/a&gt;と同様に1.0を返します。1.5から2.0までの値は、&lt;a href=&quot;../ceil/index&quot;&gt;ceil&lt;/a&gt;と同様に2.0を返します。</target>
        </trans-unit>
        <trans-unit id="babbcf567857bd9afd274b0da48a4f64ca1e1bc5" translate="yes" xml:space="preserve">
          <source>For information about running RethinkDB as a proxy server, read &lt;a href=&quot;../sharding-and-replication/index#running-a-proxy-node&quot;&gt;Running a proxy node&lt;/a&gt; in &amp;ldquo;Scaling, sharding and replication.&amp;rdquo;</source>
          <target state="translated">RethinkDBをプロキシサーバーとして実行する方法については、「スケーリング、シャーディング、レプリケーション」の&lt;a href=&quot;../sharding-and-replication/index#running-a-proxy-node&quot;&gt;プロキシノードの&lt;/a&gt;実行をご覧ください。</target>
        </trans-unit>
        <trans-unit id="17b2979df453ed333e90d0702dbc0a408986c657" translate="yes" xml:space="preserve">
          <source>For many ReQL commands, you can also use a JSON-style nested syntax that allows considerably more flexibility. Read &amp;ldquo;&lt;a href=&quot;../../nested-fields/javascript/index&quot;&gt;Accessing nested fields&lt;/a&gt;&amp;rdquo; for more information.</source>
          <target state="translated">多くのReQLコマンドでは、JSONスタイルのネストされた構文を使用して、柔軟性を大幅に高めることもできます。詳細については、「&lt;a href=&quot;../../nested-fields/javascript/index&quot;&gt;ネストされたフィールドへのアクセス&lt;/a&gt;」をお読みください。</target>
        </trans-unit>
        <trans-unit id="5a6095ad6762a5a53adfced30859b3cba54d15f5" translate="yes" xml:space="preserve">
          <source>For many cases where a GMR query might be used, ReQL provides even simpler aggregation functions. This example is really more easily written using &lt;a href=&quot;https://rethinkdb.com/api/python/count&quot;&gt;count&lt;/a&gt;:</source>
          <target state="translated">GMRクエリが使用される可能性のある多くの場合、ReQLはさらに単純な集計関数を提供します。この例は、&lt;a href=&quot;https://rethinkdb.com/api/python/count&quot;&gt;count&lt;/a&gt;を使用して本当に簡単に記述できます。</target>
        </trans-unit>
        <trans-unit id="67ffe58b1137fa1176b805e4f89dac57006679f3" translate="yes" xml:space="preserve">
          <source>For more details, read about &lt;a href=&quot;../failover/index&quot;&gt;Failover&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../failover/index&quot;&gt;フェイルオーバーを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="82e0be443f5b0509dea3fc312466c2ca45414cc1" translate="yes" xml:space="preserve">
          <source>For more information</source>
          <target state="translated">詳細はこちら</target>
        </trans-unit>
        <trans-unit id="1ab2fc0444947da4e0cf046b9f13d639f4e34e9c" translate="yes" xml:space="preserve">
          <source>For more information about administration via ReQL, consult the API documentation for the individual commands as well as the &lt;a href=&quot;../administration-tools/index&quot;&gt;Administration tools&lt;/a&gt; documentation.</source>
          <target state="translated">ReQLによる管理の詳細については、個々のコマンドのAPIドキュメントと&lt;a href=&quot;../administration-tools/index&quot;&gt;管理ツールの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3363b65c290578fe0e7fbc6c255fdb15b651d44f" translate="yes" xml:space="preserve">
          <source>For more information about map-reduce in general, read the &lt;a href=&quot;http://en.wikipedia.org/wiki/MapReduce&quot;&gt;Wikipedia article&lt;/a&gt;. For more information about RethinkDB&amp;rsquo;s implementation, browse our API documentation.</source>
          <target state="translated">一般的なmap-reduceの詳細については、&lt;a href=&quot;http://en.wikipedia.org/wiki/MapReduce&quot;&gt;ウィキペディアの記事を&lt;/a&gt;ご覧ください。RethinkDBの実装の詳細については、APIドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="913d7090273fa6a7e3ca2c42e186d05752295e1d" translate="yes" xml:space="preserve">
          <source>For more information about proxy nodes, read &amp;ldquo;Running a proxy node&amp;rdquo; under &lt;a href=&quot;../sharding-and-replication/index#running-a-proxy-node&quot;&gt;Scaling, sharding and replication&lt;/a&gt;.</source>
          <target state="translated">プロキシノードの詳細については、&lt;a href=&quot;../sharding-and-replication/index#running-a-proxy-node&quot;&gt;スケーリング、シャーディング、レプリケーションの&lt;/a&gt;「プロキシノードの実行」をご覧ください。</target>
        </trans-unit>
        <trans-unit id="e81d59b0196632caf451c3fe56968f18cc7bf03c" translate="yes" xml:space="preserve">
          <source>For more information about subcommands, type &lt;code&gt;rethinkdb help [subcommand]&lt;/code&gt; at the command line.</source>
          <target state="translated">サブコマンドの詳細については、コマンドラインで &lt;code&gt;rethinkdb help [subcommand]&lt;/code&gt; と入力してください。</target>
        </trans-unit>
        <trans-unit id="3e61b79923defbe5d9aa5576d4fda8cd1497a169" translate="yes" xml:space="preserve">
          <source>For more information on RethinkDB&amp;rsquo;s sorting order, read the section in &lt;a href=&quot;../../../docs/data-types/index#sorting-order&quot;&gt;ReQL data types&lt;/a&gt;.</source>
          <target state="translated">RethinkDBの並べ替え順序の詳細については、&lt;a href=&quot;../../../docs/data-types/index#sorting-order&quot;&gt;ReQLデータ型の&lt;/a&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="95fb36df58d9bf04bd49dcfc5f46353bfe68d941" translate="yes" xml:space="preserve">
          <source>For more information on these data types, read about RethinkDB&amp;rsquo;s &lt;a href=&quot;../geo-support/javascript/index&quot;&gt;geospatial support&lt;/a&gt;.</source>
          <target state="translated">これらのデータ型の詳細については、RethinkDBの&lt;a href=&quot;../geo-support/javascript/index&quot;&gt;地理空間サポート&lt;/a&gt;についてお読みください。</target>
        </trans-unit>
        <trans-unit id="5c630ec0a8718355b7e66ad48ab229b7eb835658" translate="yes" xml:space="preserve">
          <source>For more information read the &lt;a href=&quot;../../../docs/nested-fields/javascript/index&quot;&gt;nested field documentation&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../docs/nested-fields/javascript/index&quot;&gt;ネストされたフィールドのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="4825a63757592afbe14794197cb9e895429042af" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;../../../docs/table-joins/index&quot;&gt;Table joins in RethinkDB&lt;/a&gt;.</source>
          <target state="translated">詳細については、「&lt;a href=&quot;../../../docs/table-joins/index&quot;&gt;RethinkDBでのテーブル結合&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="3d6d1c976feeab37307a38791a3d6672c1144d68" translate="yes" xml:space="preserve">
          <source>For most queries, you can write familiar, easy to learn code without learning special commands.</source>
          <target state="translated">ほとんどのクエリについては、特別なコマンドを学習しなくても、身近で学習しやすいコードを書くことができます。</target>
        </trans-unit>
        <trans-unit id="d81b71396183b0b5ebe1e6c9ea87ab607958b55b" translate="yes" xml:space="preserve">
          <source>For now, the plugin works best when backfilling or replicating into Elasticsearch is an option, and when it&amp;rsquo;s all right to risk having some outdated data in the index.</source>
          <target state="translated">現在のところ、プラグインは、Elasticsearchへのバックフィルまたは複製がオプションであり、インデックスに古いデータが含まれる危険性がある場合に最適に機能します。</target>
        </trans-unit>
        <trans-unit id="ff724558c1ec1d60fe1ba600d7c0dc76ee9653d5" translate="yes" xml:space="preserve">
          <source>For our blog, we have a table &lt;code&gt;posts&lt;/code&gt; that contains blog posts. Here&amp;rsquo;s an example document from the table. (We&amp;rsquo;ll use Python for this example, but other ReQL drivers are very similar.)</source>
          <target state="translated">私たちのブログには、ブログ &lt;code&gt;posts&lt;/code&gt; を含むテーブル投稿があります。以下は、表のドキュメントの例です。（この例ではPythonを使用しますが、他のReQLドライバーも非常に似ています。）</target>
        </trans-unit>
        <trans-unit id="7f356686484e654b0caaf0f62dfeec910f189b3a" translate="yes" xml:space="preserve">
          <source>For some options below, the default value depends on &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;, the name of the config file without the &lt;code&gt;.conf&lt;/code&gt; extension.</source>
          <target state="translated">以下の一部のオプションでは、デフォルト値は &lt;code&gt;.conf&lt;/code&gt; 拡張子のない構成ファイルの名前である &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; に依存します。</target>
        </trans-unit>
        <trans-unit id="f7a5e49b95cccfe244020720ab25136a8d80ee0c" translate="yes" xml:space="preserve">
          <source>For testing or logging purposes, you might want to capture a created ReQL query as a string. (You can see an example of this in ReQL error messages.) While there is no ReQL command to do this, you can simply use the &lt;code&gt;toString()&lt;/code&gt; method at the end of a query chain, rather than &lt;code&gt;run()&lt;/code&gt;:</source>
          <target state="translated">テストまたはロギングの目的で、作成されたReQLクエリを文字列としてキャプチャすることができます。（この例はReQLエラーメッセージで確認できます。）これを行うReQLコマンドはありませんが、クエリチェーンの最後で &lt;code&gt;run()&lt;/code&gt; ではなく &lt;code&gt;toString()&lt;/code&gt; メソッドを使用するだけです。</target>
        </trans-unit>
        <trans-unit id="3fbc1e78f3a7953ea2885ea05b23ea063ea8ce85" translate="yes" xml:space="preserve">
          <source>For the full details on querying, you&amp;rsquo;ll want to read up on &lt;a href=&quot;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-search.html&quot;&gt;how to query Elasticsearch&lt;/a&gt;.</source>
          <target state="translated">クエリの詳細については、&lt;a href=&quot;http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-search.html&quot;&gt;Elasticsearchのクエリ方法を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ca94911f14ae2b2a0b0c562af4e9f93c2fbe8db3" translate="yes" xml:space="preserve">
          <source>For these examples, we&amp;rsquo;ll assume that the RethinkDB connection is available as &lt;code&gt;conn&lt;/code&gt;.</source>
          <target state="translated">これらの例では、RethinkDB接続が &lt;code&gt;conn&lt;/code&gt; として使用できると想定します。</target>
        </trans-unit>
        <trans-unit id="6c29bb8b0b0e89fcfad83c842d5274ea07663f3a" translate="yes" xml:space="preserve">
          <source>For this query RethinkDB will perform enough work to get the five documents, and stop when the query is satisfied. Even if you don&amp;rsquo;t have a limit on the number of queries but use a cursor, RethinkDB will do just enough work to allow you to read the data you request. This allows queries to execute quickly without wasting CPU cycles, network bandwidth, and disk IO.</source>
          <target state="translated">このクエリでは、RethinkDBは5つのドキュメントを取得するのに十分な処理を実行し、クエリが満たされたときに停止します。クエリの数に制限はなく、カーソルを使用する場合でも、RethinkDBは、要求したデータを読み取れるだけの十分な処理を行います。これにより、CPUサイクル、ネットワーク帯域幅、ディスクIOを無駄にすることなく、クエリをすばやく実行できます。</target>
        </trans-unit>
        <trans-unit id="ce94201a1a822d650ca6441f4fe424f778b40373" translate="yes" xml:space="preserve">
          <source>For this tutorial, we&amp;rsquo;ll assume the RethinkDB server has a database named &amp;ldquo;change_example&amp;rdquo; and a table named &amp;ldquo;mytable.&amp;rdquo; Here&amp;rsquo;s the query that watches for changes:</source>
          <target state="translated">このチュートリアルでは、RethinkDBサーバーに「change_example」という名前のデータベースと「mytable」という名前のテーブルがあると仮定します。変更を監視するクエリは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b92785b441a8f092a8ab315821f69be49499f0f5" translate="yes" xml:space="preserve">
          <source>For those applications that need full-text search, we&amp;rsquo;ve written a &lt;a href=&quot;https://github.com/rethinkdb/elasticsearch-river-rethinkdb&quot;&gt;plugin for Elasticsearch&lt;/a&gt; (called a river) that keeps RethinkDB synced up with Elasticsearch&amp;rsquo;s indexes. It uses &lt;a href=&quot;../changefeeds/javascript/index&quot;&gt;changefeeds&lt;/a&gt; to push new, updated and deleted documents to Elasticsearch in real-time. In addition, it loads existing documents from your RethinkDB tables, so you can get going right away.</source>
          <target state="translated">全文検索を必要とするアプリケーションのために、RethinkDBをElasticsearchのインデックスと同期させる&lt;a href=&quot;https://github.com/rethinkdb/elasticsearch-river-rethinkdb&quot;&gt;ためのElasticsearch&lt;/a&gt;（リバーと呼ばれる）のプラグインを作成しました。&lt;a href=&quot;../changefeeds/javascript/index&quot;&gt;changefeeds&lt;/a&gt;を使用して、新規、更新、削除されたドキュメントをElasticsearchにリアルタイムでプッシュします。さらに、RethinkDBテーブルから既存のドキュメントをロードするので、すぐに始めることができます。</target>
        </trans-unit>
        <trans-unit id="daf28cf370e2bb3e4f6540fd76c8980d9e982b51" translate="yes" xml:space="preserve">
          <source>For updates on protocol and behavior changes in new versions of RethinkDB and general assistance with writing drivers, join the &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!forum/rethinkdb-dev&quot;&gt;RethinkDB-Dev Google Group&lt;/a&gt;.</source>
          <target state="translated">RethinkDBの新しいバージョンでのプロトコルと動作の変更に関するアップデート、およびドライバーの作成に関する一般的な支援については、&lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!forum/rethinkdb-dev&quot;&gt;RethinkDB-Dev Googleグループに&lt;/a&gt;参加してください。</target>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="4a50006894600468131ccf67060b9390acf52e6d" translate="yes" xml:space="preserve">
          <source>Four events are emitted: &lt;code&gt;connect&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt;, &lt;code&gt;timeout&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;connect&lt;/code&gt; 、 &lt;code&gt;close&lt;/code&gt; 、 &lt;code&gt;timeout&lt;/code&gt; 、 &lt;code&gt;error&lt;/code&gt; 4つのイベントが発行されます。</target>
        </trans-unit>
        <trans-unit id="cf18287b27acdbd9228dccf840743c611fd61dcb" translate="yes" xml:space="preserve">
          <source>From Windows, do this from a command prompt window. Use the &lt;code&gt;cd&lt;/code&gt; command to go to the directory that you unpacked &lt;code&gt;rethinkdb.exe&lt;/code&gt; in.</source>
          <target state="translated">Windowsの場合、これはコマンドプロンプトウィンドウから行います。 &lt;code&gt;cd&lt;/code&gt; コマンドを使用して、 &lt;code&gt;rethinkdb.exe&lt;/code&gt; を解凍したディレクトリに移動します。</target>
        </trans-unit>
        <trans-unit id="fd9b4901b4a339413df04141599df4f30cc3d1db" translate="yes" xml:space="preserve">
          <source>Full source code for this tutorial</source>
          <target state="translated">このチュートリアルの完全なソースコード</target>
        </trans-unit>
        <trans-unit id="ac47c41031ca6ea538a6bad07d585b26e5c04d09" translate="yes" xml:space="preserve">
          <source>Full support for systemd is planned&amp;mdash;you can track progress on &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/2014&quot;&gt;issue 2014&lt;/a&gt;. For now, you&amp;rsquo;ll have to create a couple configuration files manually.</source>
          <target state="translated">systemdの完全なサポートが計画されています。&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/2014&quot;&gt;2014年問題の&lt;/a&gt;進捗状況を追跡できます。現時点では、いくつかの構成ファイルを手動で作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="56610704a5d0885138ce85548873319247c751f1" translate="yes" xml:space="preserve">
          <source>Full-text search with Elasticsearch</source>
          <target state="translated">Elasticsearchによる全文検索</target>
        </trans-unit>
        <trans-unit id="0e44c8b638baa470dbb5f127964c092cc77ea465" translate="yes" xml:space="preserve">
          <source>Further reading</source>
          <target state="translated">続きを読む</target>
        </trans-unit>
        <trans-unit id="1a03d4d661b1bb1e757eb01e8f1ba0020af72411" translate="yes" xml:space="preserve">
          <source>Further, because it&amp;rsquo;s ReQL, the query&amp;rsquo;s individual pieces are easily composable. If you decide you want those numbers on a per-month basis, you can just throw a &lt;code&gt;group&lt;/code&gt; in there:</source>
          <target state="translated">さらに、ReQLであるため、クエリの個々の部分を簡単に構成できます。これらの数値を月単位で取得する場合は、 &lt;code&gt;group&lt;/code&gt; をそこに投入するだけです。</target>
        </trans-unit>
        <trans-unit id="ba5b2231ebb51b96ad83f42c8232a3a30504b098" translate="yes" xml:space="preserve">
          <source>General Options</source>
          <target state="translated">一般的なオプション</target>
        </trans-unit>
        <trans-unit id="11e83edf877cd5f0fdc4c3ee3bab8b9824de2894" translate="yes" xml:space="preserve">
          <source>Generate a key and matching certificate</source>
          <target state="translated">鍵と一致する証明書を生成する</target>
        </trans-unit>
        <trans-unit id="2febf04cd0c394cf310d6a665094d1c56bf9ec9c" translate="yes" xml:space="preserve">
          <source>Generate a random number between given (or implied) bounds. &lt;code&gt;random&lt;/code&gt; takes zero, one or two arguments.</source>
          <target state="translated">指定された（または暗黙の）境界の間で乱数を生成します。 &lt;code&gt;random&lt;/code&gt; は、0、1、または2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="13dce5180e446b48b05830d6be0f1b3a23a98354" translate="yes" xml:space="preserve">
          <source>Generate a stream of sequential integers in a specified range.</source>
          <target state="translated">指定した範囲の連続した整数のストリームを生成します。</target>
        </trans-unit>
        <trans-unit id="9617b6a68f7766e69c8838059f52cb1c0c1c2149" translate="yes" xml:space="preserve">
          <source>Generating monotonically increasing primary key values</source>
          <target state="translated">単調に増加する主なキー値の生成</target>
        </trans-unit>
        <trans-unit id="3a124f292c1ce8300aafc72cc3dfa4e1a24be018" translate="yes" xml:space="preserve">
          <source>Geometry data types</source>
          <target state="translated">ジオメトリデータ型</target>
        </trans-unit>
        <trans-unit id="2ca60ffc89b1e3c2df47848341e9eb9a70e247b5" translate="yes" xml:space="preserve">
          <source>Geometry objects are implemented through a geographic coordinate system, with points and shapes plotted on the surface of a sphere in three-dimensional space. In addition, ReQL geometry objects can be converted to and from GeoJSON, with some limitations.</source>
          <target state="translated">ジオメトリオブジェクトは地理座標系で実装されており、3次元空間の球体の表面に点や形状がプロットされています。また、ReQLのジオメトリオブジェクトは、いくつかの制限はありますが、GeoJSONに変換したり、GeoJSONから変換したりすることができます。</target>
        </trans-unit>
        <trans-unit id="c93777485a28faf469750ff3c5485cc5f3da24a6" translate="yes" xml:space="preserve">
          <source>Geospatial</source>
          <target state="translated">Geospatial</target>
        </trans-unit>
        <trans-unit id="af69676aa273c682cc3abbe0810a037decd6a660" translate="yes" xml:space="preserve">
          <source>Geospatial commands</source>
          <target state="translated">地理空間コマンド</target>
        </trans-unit>
        <trans-unit id="777f8dbeaeb6679675f275bda3359539ce574d27" translate="yes" xml:space="preserve">
          <source>Geospatial indexes</source>
          <target state="translated">地理空間インデックス</target>
        </trans-unit>
        <trans-unit id="b8bc53cea5284d3e82018ae67ef678eefbb2d3ea" translate="yes" xml:space="preserve">
          <source>Geospatial queries</source>
          <target state="translated">地理空間クエリ</target>
        </trans-unit>
        <trans-unit id="a469d1dc3817e092e0628853d5fbb08d1088a44b" translate="yes" xml:space="preserve">
          <source>Get a document by primary key.</source>
          <target state="translated">主キーでドキュメントを取得します。</target>
        </trans-unit>
        <trans-unit id="8046295e3a41b0b62c302c6f12580dabc88b588c" translate="yes" xml:space="preserve">
          <source>Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.</source>
          <target state="translated">オブジェクトから単一のフィールドを取得します。シーケンス上で呼び出された場合、そのフィールドを持たないオブジェクトをスキップして、 シーケンス内のすべてのオブジェクトからそのフィールドを取得します。</target>
        </trans-unit>
        <trans-unit id="1b8b0a98b85373c4a40b7d034bdb73d026ebba2b" translate="yes" xml:space="preserve">
          <source>Get all documents between two keys. Accepts three optional arguments: &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;leftBound&lt;/code&gt;, and &lt;code&gt;rightBound&lt;/code&gt;. If &lt;code&gt;index&lt;/code&gt; is set to the name of a secondary index, &lt;code&gt;between&lt;/code&gt; will return all documents where that index&amp;rsquo;s value is in the specified range (it uses the primary key by default). &lt;code&gt;leftBound&lt;/code&gt; or &lt;code&gt;rightBound&lt;/code&gt; may be set to &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;closed&lt;/code&gt; to indicate whether or not to include that endpoint of the range (by default, &lt;code&gt;leftBound&lt;/code&gt; is closed and &lt;code&gt;rightBound&lt;/code&gt; is open).</source>
          <target state="translated">2つのキー間のすべてのドキュメントを取得します。 3つのオプションの引数、 &lt;code&gt;index&lt;/code&gt; 、 &lt;code&gt;leftBound&lt;/code&gt; 、および &lt;code&gt;rightBound&lt;/code&gt; を受け入れます。 &lt;code&gt;index&lt;/code&gt; がセカンダリインデックスの名前に設定されている場合、 &lt;code&gt;between&lt;/code&gt; はそのインデックスの値が指定された範囲にあるすべてのドキュメントを返します（デフォルトではプライマリキーを使用します）。範囲のその端点を含めるかどうかを示すために、 &lt;code&gt;leftBound&lt;/code&gt; または &lt;code&gt;rightBound&lt;/code&gt; を &lt;code&gt;open&lt;/code&gt; または &lt;code&gt;closed&lt;/code&gt; に設定できます（デフォルトでは、 &lt;code&gt;leftBound&lt;/code&gt; は閉じており、 &lt;code&gt;rightBound&lt;/code&gt; は開いています）。</target>
        </trans-unit>
        <trans-unit id="a0bf967877c232647d6db850640a15fca5c24218" translate="yes" xml:space="preserve">
          <source>Get all documents where the given geometry object intersects the geometry object of the requested geospatial index.</source>
          <target state="translated">指定されたジオメトリオブジェクトが、要求された地理空間インデックスのジオメトリオブジェクトと交差するすべてのドキュメントを取得します。</target>
        </trans-unit>
        <trans-unit id="7479d6cc186a49ad4ce6e91495a9e6970136d844" translate="yes" xml:space="preserve">
          <source>Get all documents where the given value matches the value of the requested index.</source>
          <target state="translated">与えられた値が要求されたインデックスの値と一致するすべてのドキュメントを取得します。</target>
        </trans-unit>
        <trans-unit id="d7b6631e788bca1e1744de121e75e5cf1fcd38d7" translate="yes" xml:space="preserve">
          <source>Get help</source>
          <target state="translated">助けを求める</target>
        </trans-unit>
        <trans-unit id="a7cc83cb9af9883ac7521e7a66e2705b5cca0c4b" translate="yes" xml:space="preserve">
          <source>Get information about a ReQL value.</source>
          <target state="translated">ReQL値に関する情報を取得します。</target>
        </trans-unit>
        <trans-unit id="26fe09a893cba6ed06a35a42c25f4995d402196d" translate="yes" xml:space="preserve">
          <source>Get more help</source>
          <target state="translated">より多くの助けを得る</target>
        </trans-unit>
        <trans-unit id="0ce4a4bb65ba8d454be8ba1ee6c95caa54691501" translate="yes" xml:space="preserve">
          <source>Get the 1st, 2nd ,6th and last records</source>
          <target state="translated">第1、第2、第6、最後のレコードを取得します。</target>
        </trans-unit>
        <trans-unit id="6c457d7d73b4b36ce06dbc6742031fc0bddfad8d" translate="yes" xml:space="preserve">
          <source>Get the &lt;em&gt;nth&lt;/em&gt; element of a sequence, counting from zero. If the argument is negative, count from the last element.</source>
          <target state="translated">ゼロから数えて、シーケンスの&lt;em&gt;n番目の&lt;/em&gt;要素を取得します。引数が負の場合、最後の要素から数えます。</target>
        </trans-unit>
        <trans-unit id="6d1b2fe3d2f939a4e9b1e0a146aeb731afdfc60b" translate="yes" xml:space="preserve">
          <source>Get the distance between the two points in San Francisco and San Diego:</source>
          <target state="translated">サンフランシスコとサンディエゴの2点間の距離を取得します。</target>
        </trans-unit>
        <trans-unit id="cf99e82596f190363cb420cdc30c2eb71f623838" translate="yes" xml:space="preserve">
          <source>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</source>
          <target state="translated">シーケンス内の要素のインデックスを取得します。引数が述語の場合、それにマッチするすべての要素のインデックスを取得します。</target>
        </trans-unit>
        <trans-unit id="8afbe85bd6c7d5a794b6657818c034464828eef1" translate="yes" xml:space="preserve">
          <source>Get the nearest point in the table to a specified one based on the index:</source>
          <target state="translated">インデックスに基づいて、テーブル内の指定された点に最も近い点を取得します。</target>
        </trans-unit>
        <trans-unit id="71000a23c5dc68e4588731c2c666c0f68b89288b" translate="yes" xml:space="preserve">
          <source>Get the next element in the cursor.</source>
          <target state="translated">カーソル内の次の要素を取得します。</target>
        </trans-unit>
        <trans-unit id="c3ad9978650d4d0d5d8aba0901c0c824ccf5841d" translate="yes" xml:space="preserve">
          <source>Get the status of the specified indexes on this table, or the status of all indexes on this table if no indexes are specified.</source>
          <target state="translated">このテーブル上の指定されたインデックスのステータスを取得します。</target>
        </trans-unit>
        <trans-unit id="0a83966d5ecabf6055969063a2777e7f5e6da246" translate="yes" xml:space="preserve">
          <source>Get the top movie</source>
          <target state="translated">トップの映画を手に入れる</target>
        </trans-unit>
        <trans-unit id="f285429d75df0c2fa84c179119a7d61724ccc3ec" translate="yes" xml:space="preserve">
          <source>Gets the type of a ReQL query&amp;rsquo;s return value.</source>
          <target state="translated">ReQLクエリの戻り値のタイプを取得します。</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">始めるには</target>
        </trans-unit>
        <trans-unit id="b9f7773042bd33f28708a372b51f0c3eef5689e6" translate="yes" xml:space="preserve">
          <source>Given a post document such as:</source>
          <target state="translated">のようなポストドキュメントが与えられます。</target>
        </trans-unit>
        <trans-unit id="fdb3b8fb4e7a4390243f5048c5a48c64b714762c" translate="yes" xml:space="preserve">
          <source>Given the ease of scaling RethinkDB clusters across multiple instances, we deemed it necessary to observe performance when moving from a single RethinkDB instance to a larger cluster. We tested all of our workloads on a single instance of RethinkDB up to a 16-node cluster in varying increments of cluster size.</source>
          <target state="translated">複数のインスタンス間でRethinkDBクラスタを簡単に拡張できることを考えると、単一のRethinkDBインスタンスからより大きなクラスタに移行する際のパフォーマンスを観察する必要があると考えました。私たちは、クラスタサイズを変化させながら、16ノードのクラスタまでのRethinkDBの単一インスタンス上ですべてのワークロードをテストしました。</target>
        </trans-unit>
        <trans-unit id="923ec6a7a758f5bdb1cfd42a0cf8dffd444bd4e3" translate="yes" xml:space="preserve">
          <source>Given this schema for the &lt;code&gt;users&lt;/code&gt; table:</source>
          <target state="translated">&lt;code&gt;users&lt;/code&gt; テーブルのこのスキーマを考えると：</target>
        </trans-unit>
        <trans-unit id="38e7ffe2b1a89d869ba9347bc27c6b83402b3850" translate="yes" xml:space="preserve">
          <source>Given two endpoints, a line in ReQL is the shortest path between those endpoints on the surface of the sphere, known as a &lt;a href=&quot;http://en.wikipedia.org/wiki/Geodesic&quot;&gt;geodesic&lt;/a&gt;. Lines can be defined with multiple points, in which case each segment of the line will be a geodesic; likewise, sides of a polygon will be geodesics. Geodesics are calculated assuming a perfect sphere.</source>
          <target state="translated">2つの端点が与えられた場合、ReQLの線は、球の表面上のそれらの端点間の最短経路であり、&lt;a href=&quot;http://en.wikipedia.org/wiki/Geodesic&quot;&gt;測地線&lt;/a&gt;と呼ばれます。線は複数のポイントで定義できます。その場合、線の各セグメントは測地線になります。同様に、ポリゴンの側面は測地線になります。測地線は、完全な球を想定して計算されます。</target>
        </trans-unit>
        <trans-unit id="2e0b45f2a456e8db55f08d7b65e87593a3e9a140" translate="yes" xml:space="preserve">
          <source>Go</source>
          <target state="translated">Go</target>
        </trans-unit>
        <trans-unit id="4366de1d1c5ac1a5c18d332152d25ab659a085b9" translate="yes" xml:space="preserve">
          <source>Go to the &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb-example-nodejs/tree/master/todo-angular-express&quot;&gt;callbacks&lt;/a&gt; or &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb-example-nodejs/tree/master/todo-angular-express-promise&quot;&gt;promises&lt;/a&gt; tutorial &amp;raquo;</source>
          <target state="translated">行く&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb-example-nodejs/tree/master/todo-angular-express&quot;&gt;のコールバック&lt;/a&gt;または&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb-example-nodejs/tree/master/todo-angular-express-promise&quot;&gt;約束&lt;/a&gt;チュートリアル&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="cc81cc29963c98e940770d7d42882b9c1189f39b" translate="yes" xml:space="preserve">
          <source>Go to the table view (&lt;em&gt;Tables&lt;/em&gt; &amp;rarr; &lt;em&gt;table name&lt;/em&gt;).</source>
          <target state="translated">テーブルビューに移動します（&lt;em&gt;テーブル&lt;/em&gt; &amp;rarr; &lt;em&gt;テーブル名&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="dfe7d6ef881045fd7fcd737ef34355f66829510a" translate="yes" xml:space="preserve">
          <source>Go to the tutorial &amp;raquo;</source>
          <target state="translated">チュートリアルに行く&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="97108d7575a01e5fd3b1ded981344199e9dd1c7f" translate="yes" xml:space="preserve">
          <source>Grant or deny access permissions for a user account, globally or on a per-database or per-table basis.</source>
          <target state="translated">ユーザーアカウントのアクセス許可を、グローバルに、またはデータベース単位またはテーブル単位で付与または拒否します。</target>
        </trans-unit>
        <trans-unit id="b5d7e1824ea0632eeba0efd5c783e7e688f7c9de" translate="yes" xml:space="preserve">
          <source>Grouping query results by date/time periods</source>
          <target state="translated">クエリ結果を日付/時間帯別にグループ化</target>
        </trans-unit>
        <trans-unit id="c13b0b8c060bee8bcc06484d032e252f70bc055d" translate="yes" xml:space="preserve">
          <source>Guides: Administration</source>
          <target state="translated">ガイド 管理</target>
        </trans-unit>
        <trans-unit id="3109a56edc20f62714d6950a84c358b731d9b634" translate="yes" xml:space="preserve">
          <source>Guides: Deployment</source>
          <target state="translated">ガイド 展開</target>
        </trans-unit>
        <trans-unit id="2be88847381adaa6133c7e8549630bc7ddd3850e" translate="yes" xml:space="preserve">
          <source>Guides: Getting started</source>
          <target state="translated">ガイド 始めるには</target>
        </trans-unit>
        <trans-unit id="06c9af880fc09e5fefcf6235ae9c6baddffc3fd0" translate="yes" xml:space="preserve">
          <source>Guides: Integration</source>
          <target state="translated">ガイド 統合</target>
        </trans-unit>
        <trans-unit id="cf2c448fed2b1a6ff9d934258e3b8a7f9b66839a" translate="yes" xml:space="preserve">
          <source>Guides: ReQL in practice</source>
          <target state="translated">ガイド。実践でのReQL</target>
        </trans-unit>
        <trans-unit id="c6214bbbfcc0f794a5f662306a9af18ba5e587bd" translate="yes" xml:space="preserve">
          <source>Guides: RethinkDB architecture</source>
          <target state="translated">ガイド。RethinkDB アーキテクチャ</target>
        </trans-unit>
        <trans-unit id="81f356ddf8e901e1eb7afd6cd2ee0b5ad2850ab3" translate="yes" xml:space="preserve">
          <source>Guides: The ReQL query language</source>
          <target state="translated">ガイド。ReQL クエリ言語</target>
        </trans-unit>
        <trans-unit id="ea1eb6cdfcd7ea55bee473a2fd30c7ba8dc06e16" translate="yes" xml:space="preserve">
          <source>Guides: The RethinkDB data model</source>
          <target state="translated">ガイド。RethinkDBのデータモデル</target>
        </trans-unit>
        <trans-unit id="080a094530cb8dd7331d2cf5a69b1af948202cd5" translate="yes" xml:space="preserve">
          <source>Guides: Troubleshooting</source>
          <target state="translated">ガイド トラブルシューティング</target>
        </trans-unit>
        <trans-unit id="0ff95a68349ac5719cbe822be8e2a9ba9e81d9c0" translate="yes" xml:space="preserve">
          <source>Handling errors</source>
          <target state="translated">エラーの処理</target>
        </trans-unit>
        <trans-unit id="337f87637f1b663181af9818a8cb298a4bc97c42" translate="yes" xml:space="preserve">
          <source>Handling latency</source>
          <target state="translated">遅延の処理</target>
        </trans-unit>
        <trans-unit id="3b2e40ef007fb3a160eb954bd84907b9489d24b5" translate="yes" xml:space="preserve">
          <source>Handling missing fields</source>
          <target state="translated">欠落したフィールドの処理</target>
        </trans-unit>
        <trans-unit id="b76ab65957a69ff57e8c72352794d437fd34c788" translate="yes" xml:space="preserve">
          <source>Hardware</source>
          <target state="translated">Hardware</target>
        </trans-unit>
        <trans-unit id="c0c271c8f62efa33d3ac8edbe0fea6e52fc84150" translate="yes" xml:space="preserve">
          <source>Haskell</source>
          <target state="translated">Haskell</target>
        </trans-unit>
        <trans-unit id="13259b7866e907af9ee5f32cebb48c1da0a4e7be" translate="yes" xml:space="preserve">
          <source>Have &lt;a href=&quot;http://www.elasticsearch.org/overview/elkdownloads/&quot;&gt;Elasticsearch 1.3&lt;/a&gt; installed, running on &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;Java 8&lt;/a&gt;.</source>
          <target state="translated">持って&lt;a href=&quot;http://www.elasticsearch.org/overview/elkdownloads/&quot;&gt;Elasticsearch 1.3&lt;/a&gt;上で実行して、インストールし&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;たJava 8&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="374a3bad4e315a2bd8ca794f90a4366ee04ff2c9" translate="yes" xml:space="preserve">
          <source>Help make RethinkDB available on more platforms&amp;mdash;contribute a driver for another language, or join one of the existing projects. To get started with driver development:</source>
          <target state="translated">RethinkDBをより多くのプラットフォームで利用できるようにする&amp;mdash;別の言語のドライバーを提供するか、既存のプロジェクトの1つに参加してください。ドライバー開発を始めるには：</target>
        </trans-unit>
        <trans-unit id="85b35d8415f09c9b4993d68a5ecf587912bc7e9d" translate="yes" xml:space="preserve">
          <source>Help options</source>
          <target state="translated">ヘルプオプション</target>
        </trans-unit>
        <trans-unit id="280a7ae25fe9d1b878397aaa285e6f8fe9cf5eee" translate="yes" xml:space="preserve">
          <source>Help us improve this document.</source>
          <target state="translated">この文書の改善にご協力ください。</target>
        </trans-unit>
        <trans-unit id="b11bbfd10920a648679b62cc16974873d3f9f2cf" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;old_val&lt;/code&gt; is the old version of the document, and &lt;code&gt;new_val&lt;/code&gt; is a new version of the document. On an &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;old_val&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;; on a &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;new_val&lt;/code&gt; will be &lt;code&gt;null&lt;/code&gt;. On an &lt;code&gt;update&lt;/code&gt;, both &lt;code&gt;old_val&lt;/code&gt; and &lt;code&gt;new_val&lt;/code&gt; are present.</source>
          <target state="translated">ここで &lt;code&gt;old_val&lt;/code&gt; はドキュメントの古いバージョンであり、 &lt;code&gt;new_val&lt;/code&gt; はドキュメントの新しいバージョンです。で &lt;code&gt;insert&lt;/code&gt; 、 &lt;code&gt;old_val&lt;/code&gt; はなり &lt;code&gt;null&lt;/code&gt; 。上で &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;new_val&lt;/code&gt; はなり &lt;code&gt;null&lt;/code&gt; 。 &lt;code&gt;update&lt;/code&gt; 、両方 &lt;code&gt;old_val&lt;/code&gt; と &lt;code&gt;new_val&lt;/code&gt; が存在しています。</target>
        </trans-unit>
        <trans-unit id="8ecc96119e8edd47805a0e89190189cd02ecf1f1" translate="yes" xml:space="preserve">
          <source>Here is an example of an &lt;strong&gt;incorrect&lt;/strong&gt; way to write the previous grouped map-reduce query, simply incrementing the first value passed to the reduction function:</source>
          <target state="translated">以下は、前のグループ化されたmap-reduceクエリを書き込む&lt;strong&gt;誤った&lt;/strong&gt;方法の例です。単純に、reduction関数に渡される最初の値をインクリメントします。</target>
        </trans-unit>
        <trans-unit id="30cc23fe9eebe4e35d1386f15397f430ca395f5f" translate="yes" xml:space="preserve">
          <source>Here is example data for the &lt;code&gt;posts&lt;/code&gt; table:</source>
          <target state="translated">以下は、 &lt;code&gt;posts&lt;/code&gt; テーブルのサンプルデータです。</target>
        </trans-unit>
        <trans-unit id="0db125f41ac677370c65d1ff336c8967617e8c56" translate="yes" xml:space="preserve">
          <source>Here is how we&amp;rsquo;d delete all documents in a table:</source>
          <target state="translated">以下は、テーブル内のすべてのドキュメントを削除する方法です。</target>
        </trans-unit>
        <trans-unit id="8c181cff70c9b30163c281e99e0c3fbff9ddc3eb" translate="yes" xml:space="preserve">
          <source>Here we we show how RethinkDB scales up to 16-nodes with these various workloads:</source>
          <target state="translated">ここでは、これらの様々なワークロードでRethinkDBが16ノードまでスケールアップする様子を紹介します。</target>
        </trans-unit>
        <trans-unit id="99390579ff3daa48faeab2ac93996d68119e186c" translate="yes" xml:space="preserve">
          <source>Here we&amp;rsquo;ve told the river to watch two tables in the &lt;code&gt;blog&lt;/code&gt; database: &lt;code&gt;posts&lt;/code&gt; and &lt;code&gt;comments&lt;/code&gt;. The river should also pull in all existing documents from those tables before it starts watching for updates to the tables. By default, the river inserts documents into a type named after its table, and into an index named after its database. So, in the example above, we&amp;rsquo;d get a new index named &amp;ldquo;blog&amp;rdquo; with two types: &amp;ldquo;posts&amp;rdquo; and &amp;ldquo;comments.&amp;rdquo;</source>
          <target state="translated">ここでは、 &lt;code&gt;blog&lt;/code&gt; データベースの2つのテーブル（ &lt;code&gt;posts&lt;/code&gt; と &lt;code&gt;comments&lt;/code&gt; を監視するように川に指示しました。リバーは、テーブルの更新の監視を開始する前に、これらのテーブルからすべての既存のドキュメントをプルする必要もあります。デフォルトでは、リバーはドキュメントをそのテーブルにちなんで名付けられた型と、データベースにちなんで名付けられたインデックスに挿入します。したがって、上記の例では、「blogs」という名前の新しいインデックスが2つのタイプ「posts」と「comments」で取得されます。</target>
        </trans-unit>
        <trans-unit id="3e7bca2668150cf7af8f28ff5d8fe33087f8aa11" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s another, more fun example: adding &lt;a href=&quot;https://en.gravatar.com/site/implement/images/&quot;&gt;Gravatar&lt;/a&gt; avatars to user accounts. We can use &lt;a href=&quot;../../../api/javascript/http/index&quot;&gt;http&lt;/a&gt; to retrieve them.</source>
          <target state="translated">次に、もう1つのより楽しい例を示します&lt;a href=&quot;https://en.gravatar.com/site/implement/images/&quot;&gt;。Gravatar&lt;/a&gt;アバターをユーザーアカウントに追加します。我々は使用することができ&lt;a href=&quot;../../../api/javascript/http/index&quot;&gt;ます。httpが&lt;/a&gt;それらを取得するために。</target>
        </trans-unit>
        <trans-unit id="aabb856537a5cb29782d8f22decbbabaf04fe163" translate="yes" xml:space="preserve">
          <source>Here, we listen for changes on multiple tables at once. We simultaneously write into the tables, and observe our writes appear in the changefeeds. We then cancel the changefeeds after we&amp;rsquo;ve written 10 items into each of the tables.</source>
          <target state="translated">ここでは、複数のテーブルの変更を一度にリッスンします。同時にテーブルに書き込み、書き込みがchangefeedsに表示されることを確認します。次に、各テーブルに10項目を書き込んだ後、変更フィードをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="4f01b808b9218e45dc7c69f3aef704c9a0d36876" translate="yes" xml:space="preserve">
          <source>Here, we use the &lt;code&gt;r.table('users').pluck('last_name')&lt;/code&gt; query as the inner query in &lt;code&gt;filter&lt;/code&gt;, combining the two queries to build a more sophisticated one. Even if you have a cluster of servers and both the &lt;code&gt;authors&lt;/code&gt; table and the &lt;code&gt;users&lt;/code&gt; table are sharded, RethinkDB will do the right thing and evaluate relevant parts of the query above on the appropriate shards, combine bits of data as necessary, and return the complete result.</source>
          <target state="translated">ここでは、 &lt;code&gt;r.table('users').pluck('last_name')&lt;/code&gt; クエリを &lt;code&gt;filter&lt;/code&gt; の内部クエリとして使用し、2つのクエリを組み合わせてより高度なクエリを作成します。サーバーのクラスターがあり、 &lt;code&gt;authors&lt;/code&gt; テーブルと &lt;code&gt;users&lt;/code&gt; テーブルの両方がシャーディングされている場合でも、RethinkDBは適切な処理を行い、適切なシャードで上記のクエリの関連部分を評価し、必要に応じてデータのビットを組み合わせ、完全な結果。</target>
        </trans-unit>
        <trans-unit id="bda1b9ddd2a172cd6fc2bdd66737451d25b6f867" translate="yes" xml:space="preserve">
          <source>Hierarchy</source>
          <target state="translated">Hierarchy</target>
        </trans-unit>
        <trans-unit id="d432b424148d95b2cce165cd6d0f0d72d5ced443" translate="yes" xml:space="preserve">
          <source>Host: &lt;code&gt;localhost&lt;/code&gt;</source>
          <target state="translated">ホスト： &lt;code&gt;localhost&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c68edbcf7ed862ae84ad731d2c9e92a481b3221d" translate="yes" xml:space="preserve">
          <source>How GMR queries are executed</source>
          <target state="translated">GMRクエリの実行方法</target>
        </trans-unit>
        <trans-unit id="d0436939cd770cb85fe38b78e1ea8d601df6d4a1" translate="yes" xml:space="preserve">
          <source>How are concurrent queries handled?</source>
          <target state="translated">コンカレントクエリはどのように処理されますか?</target>
        </trans-unit>
        <trans-unit id="05958a9e0373acd35417171d14b2cb37c3c7ad19" translate="yes" xml:space="preserve">
          <source>How can I get a dump of the RethinkDB system tables?</source>
          <target state="translated">RethinkDBのシステムテーブルのダンプを取得するには?</target>
        </trans-unit>
        <trans-unit id="4f38e71eadb2253b980e162dfd32f94db825a64c" translate="yes" xml:space="preserve">
          <source>How can I order the output of &lt;code&gt;group&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;group&lt;/code&gt; の出力をどのように注文できますか？</target>
        </trans-unit>
        <trans-unit id="ff95c867208c070d7e0b98dd60887a84ad884d3d" translate="yes" xml:space="preserve">
          <source>How can I perform a backup of my cluster?</source>
          <target state="translated">クラスタのバックアップを実行するにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="6f4c44d7a176db22669cfb91c2ecc685d03533ba" translate="yes" xml:space="preserve">
          <source>How do I specify an external canonical IP address of a RethinkDB node?</source>
          <target state="translated">RethinkDBノードの外部カノニカルIPアドレスを指定するには?</target>
        </trans-unit>
        <trans-unit id="7584a8c902d164f0d9b0ee384de49f4974a71781" translate="yes" xml:space="preserve">
          <source>How do I store a Ruby DateTime object in RethinkDB?</source>
          <target state="translated">RubyのDateTimeオブジェクトをRethinkDBに格納するには?</target>
        </trans-unit>
        <trans-unit id="84f27fb4447eb1718681a879231d9bf58780f9cf" translate="yes" xml:space="preserve">
          <source>How does RethinkDB execute queries?</source>
          <target state="translated">RethinkDBはどのようにしてクエリを実行するのですか?</target>
        </trans-unit>
        <trans-unit id="554f5b2f1b62f14b6b314e954a24c929e5a7ecb2" translate="yes" xml:space="preserve">
          <source>How does RethinkDB index data?</source>
          <target state="translated">RethinkDBはどのようにしてデータをインデックス化するのですか?</target>
        </trans-unit>
        <trans-unit id="f9960fac43b439c45d353e943db31612a90a46d8" translate="yes" xml:space="preserve">
          <source>How does RethinkDB partition data into shards?</source>
          <target state="translated">RethinkDBはどのようにしてデータをシャードに分割するのですか?</target>
        </trans-unit>
        <trans-unit id="988f89c80cee59aa20b3943aea8c7d5a89cae618" translate="yes" xml:space="preserve">
          <source>How does multi-datacenter support work?</source>
          <target state="translated">多重債務者支援はどのように機能するのか?</target>
        </trans-unit>
        <trans-unit id="a46bc328f467283ecd22518500c2976a70cc4b79" translate="yes" xml:space="preserve">
          <source>How does the atomicity model work?</source>
          <target state="translated">原子性モデルの仕組みは?</target>
        </trans-unit>
        <trans-unit id="af951d8e3819cb840390880fdb37b87df5a0958e" translate="yes" xml:space="preserve">
          <source>How is cluster configuration propagated?</source>
          <target state="translated">クラスタ構成はどのように伝搬するのですか?</target>
        </trans-unit>
        <trans-unit id="4c81c881ea45d72abebac10fe2d8328a713ebfad" translate="yes" xml:space="preserve">
          <source>How is data stored on disk?</source>
          <target state="translated">データはどのようにディスクに保存されているのですか?</target>
        </trans-unit>
        <trans-unit id="3f5542bbcb5f2574afad2e3107d6f83ea128ae54" translate="yes" xml:space="preserve">
          <source>How much memory it has</source>
          <target state="translated">どのくらいのメモリを持っているか</target>
        </trans-unit>
        <trans-unit id="a5666083879cda19541342c834b60e45280910b9" translate="yes" xml:space="preserve">
          <source>How the library is implemented</source>
          <target state="translated">ライブラリの実装方法</target>
        </trans-unit>
        <trans-unit id="cb65cc4955150500049d751964b89925511c01ba" translate="yes" xml:space="preserve">
          <source>How to submit a bug report</source>
          <target state="translated">バグレポートの提出方法</target>
        </trans-unit>
        <trans-unit id="bdb93ab2ccf5f87fe1eb8544b5133c4fc441ae7f" translate="yes" xml:space="preserve">
          <source>How well does RethinkDB scale?</source>
          <target state="translated">RethinkDBのスケーリングはどの程度のものでしょうか?</target>
        </trans-unit>
        <trans-unit id="80369d7456c92b2363b49ca4f9bd24c13fd34679" translate="yes" xml:space="preserve">
          <source>However, RethinkDB does come with some restrictions regarding which operations can be performed atomically. Operations that cannot be proven deterministic cannot update the document in an atomic way. Currently, values obtained by executing JavaScript code, random values, and values obtained as a result of a subquery (e.g. incrementing the value of an attribute by the value of an attribute in a different document) cannot be performed atomically. If an update or replace query cannot be executed atomically, by default RethinkDB will throw an error. The user can choose to set the flag on the update operation in the client driver to execute the query in a non-atomic way. Note that non-atomic operations can only be detected when they involve functions (including &lt;code&gt;row()&lt;/code&gt;) being passed to &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;replace&lt;/code&gt;; a non-atomic &lt;code&gt;insert&lt;/code&gt; operation will not throw an error.</source>
          <target state="translated">ただし、RethinkDBには、アトミックに実行できる操作に関する制限がいくつかあります。確定的であると証明できない操作は、アトミックな方法でドキュメントを更新できません。現在、JavaScriptコードの実行によって取得された値、ランダムな値、およびサブクエリの結果として取得された値（たとえば、別のドキュメントの属性の値によって属性の値をインクリメントする）は、アトミックに実行できません。更新または置換クエリをアトミックに実行できない場合、デフォルトではRethinkDBはエラーをスローします。ユーザーは、クライアントドライバーの更新操作にフラグを設定して、非アトミックな方法でクエリを実行することを選択できます。非アトミック操作は、 &lt;code&gt;update&lt;/code&gt; に渡される関数（ &lt;code&gt;row()&lt;/code&gt; を含む）が関係する場合にのみ検出できることに注意してください。または &lt;code&gt;replace&lt;/code&gt; ; 非アトミックな &lt;code&gt;insert&lt;/code&gt; 操作はエラーをスローしません。</target>
        </trans-unit>
        <trans-unit id="3faa40890508b3aedb1fa775f4e3c1c7b7c50083" translate="yes" xml:space="preserve">
          <source>However, an &lt;a href=&quot;../../api/javascript/order_by/index&quot;&gt;orderBy&lt;/a&gt; query will be executed differently.</source>
          <target state="translated">ただし、&lt;a href=&quot;../../api/javascript/order_by/index&quot;&gt;orderBy&lt;/a&gt;クエリの実行方法は異なります。</target>
        </trans-unit>
        <trans-unit id="40db98da898bb7295f138bdfd36eef49c309e873" translate="yes" xml:space="preserve">
          <source>However, if any document in the &lt;code&gt;posts&lt;/code&gt; table above lacks a &lt;code&gt;category&lt;/code&gt; field, it won&amp;rsquo;t be included in the result set even if it has a &lt;code&gt;genre&lt;/code&gt; field whose value is &lt;code&gt;'mystery'&lt;/code&gt;. The problem isn&amp;rsquo;t the &lt;code&gt;or&lt;/code&gt; command; it&amp;rsquo;s that the invocation of &lt;code&gt;r.row('category')&lt;/code&gt; on a document without that field returns an error, and the rest of the filter predicate isn&amp;rsquo;t evaluated.</source>
          <target state="translated">ただし、上記の &lt;code&gt;posts&lt;/code&gt; テーブルのドキュメントに &lt;code&gt;category&lt;/code&gt; フィールドがない場合、値が &lt;code&gt;'mystery'&lt;/code&gt; である &lt;code&gt;genre&lt;/code&gt; フィールドが含まれていても、結果セットには含まれません。問題は &lt;code&gt;or&lt;/code&gt; コマンドではありません。そのフィールドのないドキュメントで &lt;code&gt;r.row('category')&lt;/code&gt; を呼び出すとエラーが返され、残りのフィルター述部は評価されません。</target>
        </trans-unit>
        <trans-unit id="7ab68a405a573ec72447284d7730942d09144c5b" translate="yes" xml:space="preserve">
          <source>However, that won&amp;rsquo;t work! The reason is that the query object doesn&amp;rsquo;t store state. Each of the commands after the first one is simply running on the &lt;em&gt;original&lt;/em&gt; value of &lt;code&gt;query&lt;/code&gt; (in this case, the &lt;code&gt;posts&lt;/code&gt; table). You can solve this by explicitly assigning the output of each new command to the &lt;code&gt;query&lt;/code&gt; variable:</source>
          <target state="translated">しかし、それはうまくいきません！その理由は、クエリオブジェクトが状態を格納しないためです。最初のコマンドの後の各コマンドは、単に &lt;code&gt;query&lt;/code&gt; の&lt;em&gt;元の&lt;/em&gt;値（この場合は、 &lt;code&gt;posts&lt;/code&gt; テーブル）で実行されて&lt;em&gt;い&lt;/em&gt;ます。これを解決するには、新しい各コマンドの出力を &lt;code&gt;query&lt;/code&gt; 変数に明示的に割り当てます。</target>
        </trans-unit>
        <trans-unit id="9e05c0bf3bf2f972577d556b1734e3c65fb13e2a" translate="yes" xml:space="preserve">
          <source>However, the first form (passing the index as an argument to &lt;code&gt;distinct&lt;/code&gt;) is faster, and won&amp;rsquo;t run into array limit issues since it&amp;rsquo;s returning a stream.</source>
          <target state="translated">しかし、最初のフォーム（引数としてインデックスを渡す &lt;code&gt;distinct&lt;/code&gt; ）高速であり、それはストリームを返すだからアレイ限界の問題に遭遇しないであろう。</target>
        </trans-unit>
        <trans-unit id="af69c31fd2ccb351c32df056cd24759e925cdadb" translate="yes" xml:space="preserve">
          <source>I get a &amp;ldquo;ReqlResourceLimitError: Array over size limit 100000&amp;rdquo; when trying to order a table</source>
          <target state="translated">テーブルを注文しようとすると、「ReqlResourceLimitError：Array over size limit 100000」が表示されます</target>
        </trans-unit>
        <trans-unit id="9433ac50f85f3397600f69393461f23a57de0a9b" translate="yes" xml:space="preserve">
          <source>I get back a connection in my callback with the Node driver</source>
          <target state="translated">コールバックでノードドライバとの接続を取得します。</target>
        </trans-unit>
        <trans-unit id="8a7ade210bab251eef67b6b310337a7a911f67f2" translate="yes" xml:space="preserve">
          <source>I get incorrect results when I pass functions with if/for statements to ReQL</source>
          <target state="translated">if/for文を持つ関数をReQLに渡すと、正しくない結果が得られます。</target>
        </trans-unit>
        <trans-unit id="c20ea07e32d25c072a65368c234d6f5a88f4521a" translate="yes" xml:space="preserve">
          <source>INSERT</source>
          <target state="translated">INSERT</target>
        </trans-unit>
        <trans-unit id="58ee37c4c15383ecc1c4a02446d911520642fcf8" translate="yes" xml:space="preserve">
          <source>ISO8601</source>
          <target state="translated">ISO8601</target>
        </trans-unit>
        <trans-unit id="a38f684f0bd8e40a0a38584d5636df0f1ce3d901" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;default&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; (the default), documents with missing fields will be skipped.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; （デフォルト）に設定されている場合、フィールドが欠落しているドキュメントはスキップされます。</target>
        </trans-unit>
        <trans-unit id="2000e8612ae4736ab4bd4478f0043d6b2d5b2a47" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;default&lt;/code&gt; is set to &lt;code&gt;r.error()&lt;/code&gt;, an &lt;code&gt;ReqlRuntimeError&lt;/code&gt; will be thrown when a document with a missing field is tested.</source>
          <target state="translated">場合は &lt;code&gt;default&lt;/code&gt; に設定されている &lt;code&gt;r.error()&lt;/code&gt; 、 &lt;code&gt;ReqlRuntimeError&lt;/code&gt; が不足している分野での文書がテストされたときにスローされます。</target>
        </trans-unit>
        <trans-unit id="3289e209f880af4ffc396ac28a2cb56909bbe4d1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;default&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, documents with missing fields will be returned rather than skipped.</source>
          <target state="translated">場合は &lt;code&gt;default&lt;/code&gt; に設定されている &lt;code&gt;true&lt;/code&gt; 、不足しているフィールドを持つ文書ではなく、スキップされたよりも返されます。</target>
        </trans-unit>
        <trans-unit id="cbad5bbddabc4696c7b0fe7ac59bbdd74a689d0f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;endOffset&lt;/code&gt; is past the end of the sequence, all elements from &lt;code&gt;startOffset&lt;/code&gt; to the end of the sequence will be returned. If &lt;code&gt;startOffset&lt;/code&gt; is past the end of the sequence or &lt;code&gt;endOffset&lt;/code&gt; is less than &lt;code&gt;startOffset&lt;/code&gt;, a zero-element sequence will be returned.</source>
          <target state="translated">場合 &lt;code&gt;endOffset&lt;/code&gt; のは、シーケンスの終わりを過ぎているから、すべての要素 &lt;code&gt;startOffset&lt;/code&gt; シーケンスの最後までが返されます。場合 &lt;code&gt;startOffset&lt;/code&gt; は、シーケンスの終わりを過ぎているか &lt;code&gt;endOffset&lt;/code&gt; のが以下である &lt;code&gt;startOffset&lt;/code&gt; 、ゼロ要素のシーケンスが返されます。</target>
        </trans-unit>
        <trans-unit id="541d7adb5503b9e9cc1678d403ded0fcc502208e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;endOffset&lt;/code&gt; is specified, it must not be less than &lt;code&gt;offset&lt;/code&gt;. Both &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;endOffset&lt;/code&gt; must be within the array&amp;rsquo;s bounds (i.e., if the array has 10 elements, an &lt;code&gt;offset&lt;/code&gt; or &lt;code&gt;endOffset&lt;/code&gt; of 10 or higher is invalid).</source>
          <target state="translated">&lt;code&gt;endOffset&lt;/code&gt; を指定する場合は、 &lt;code&gt;offset&lt;/code&gt; より小さくすることはできません。 &lt;code&gt;offset&lt;/code&gt; と &lt;code&gt;endOffset&lt;/code&gt; の両方が配列の境界内にある必要があります（つまり、配列に10個の要素がある場合、10以上の &lt;code&gt;offset&lt;/code&gt; または &lt;code&gt;endOffset&lt;/code&gt; は無効です）。</target>
        </trans-unit>
        <trans-unit id="70e3400a53d9912811460dc3089f66e4bd36e1eb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;new_val&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then &lt;code&gt;old_val&lt;/code&gt; contains the document that was deleted.</source>
          <target state="translated">場合 &lt;code&gt;new_val&lt;/code&gt; がある &lt;code&gt;null&lt;/code&gt; の場合、 &lt;code&gt;old_val&lt;/code&gt; 削除された文書が含まれています。</target>
        </trans-unit>
        <trans-unit id="de0f3c985cff6f8f6df3f791728158af7a1d7010" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;old_val&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then &lt;code&gt;new_val&lt;/code&gt; contains the newly created document.</source>
          <target state="translated">場合 &lt;code&gt;old_val&lt;/code&gt; がある &lt;code&gt;null&lt;/code&gt; の場合、 &lt;code&gt;new_val&lt;/code&gt; は、新しく作成された文書が含まれています。</target>
        </trans-unit>
        <trans-unit id="6e0dfba5c9ea511ec048c70efd9aa834fdfe8263" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;reconfigure&lt;/code&gt; is called on a database, all the tables in the database will have their configurations affected. The return value will be an array of the objects described above, one per table.</source>
          <target state="translated">場合は &lt;code&gt;reconfigure&lt;/code&gt; データベースで呼び出され、データベース内のすべてのテーブルには、その構成が影響を受けています。戻り値は、上記のオブジェクトの配列で、テーブルごとに1つです。</target>
        </trans-unit>
        <trans-unit id="04dafed2e68464eb0c2df7065604fff9f98185a6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;replicas&lt;/code&gt; is an integer, it specifies the number of replicas per shard. Specifying more replicas than there are servers will return an error.</source>
          <target state="translated">場合は &lt;code&gt;replicas&lt;/code&gt; 整数である、それはシャードごとのレプリカの数を指定します。サーバーよりも多くのレプリカを指定すると、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="3c635da42642bd2920f3672ac40f4da5ab950fc0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;replicas&lt;/code&gt; is an object, it specifies key-value pairs of server tags and the number of replicas to assign to those servers: &lt;code&gt;{tag1:2,tag2:4,tag3:2,...}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;replicas&lt;/code&gt; がオブジェクトの場合、サーバータグのキーと値のペアと、それらのサーバーに割り当てるレプリカの数を指定します： &lt;code&gt;{tag1:2,tag2:4,tag3:2,...}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14f31dd824a6c11f58e8cb24afb979b65f78e9ea" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;replicas&lt;/code&gt; is an object, it specifies key-value pairs of server tags and the number of replicas to assign to those servers: &lt;code&gt;{tag1:2,tag2:4,tag3:2,...}&lt;/code&gt;. For more information about server tags, read &lt;a href=&quot;../../../docs/administration-tools/index&quot;&gt;Administration tools&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;replicas&lt;/code&gt; がオブジェクトの場合、サーバータグのキーと値のペアと、それらのサーバーに割り当てるレプリカの数を指定します： &lt;code&gt;{tag1:2,tag2:4,tag3:2,...}&lt;/code&gt; 。サーバータグの詳細については、&lt;a href=&quot;../../../docs/administration-tools/index&quot;&gt;管理ツールを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a60664966184e4fe4a694c068740f17f6a53ba57" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;returnChanges&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;&quot;always&quot;&lt;/code&gt;, the &lt;code&gt;changes&lt;/code&gt; array will follow the same order as the inserted documents. Documents in &lt;code&gt;changes&lt;/code&gt; for which an error occurs (such as a key conflict) will have a third field, &lt;code&gt;error&lt;/code&gt;, with an explanation of the error.</source>
          <target state="translated">場合 &lt;code&gt;returnChanges&lt;/code&gt; がに設定されている &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;&quot;always&quot;&lt;/code&gt; 、 &lt;code&gt;changes&lt;/code&gt; 配列が挿入された文書と同じ順序に従います。エラーが発生した &lt;code&gt;changes&lt;/code&gt; （キーの競合など）のドキュメントには、エラーの説明を含む3番目のフィールド &lt;code&gt;error&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="7dadb3aacb6423eb027f3fe197b6216164febbc7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;slice&lt;/code&gt; is used with a &lt;a href=&quot;../binary/index&quot;&gt;binary&lt;/a&gt; object, the indexes refer to byte positions within the object. That is, the range &lt;code&gt;(10,20)&lt;/code&gt; will refer to the 10th byte through the 19th byte.</source>
          <target state="translated">&lt;a href=&quot;../binary/index&quot;&gt;バイナリ&lt;/a&gt;オブジェクトで &lt;code&gt;slice&lt;/code&gt; が使用される場合、インデックスはオブジェクト内のバイト位置を参照します。つまり、範囲 &lt;code&gt;(10,20)&lt;/code&gt; は、10番目のバイトから19番目のバイトを指します。</target>
        </trans-unit>
        <trans-unit id="2cd3ead652ee8e80ce01547b661f7b2f2a06b0d6" translate="yes" xml:space="preserve">
          <source>If a database with the same name already exists, the command throws &lt;code&gt;ReqlRuntimeError&lt;/code&gt;.</source>
          <target state="translated">同じ名前のデータベースがすでに存在する場合、コマンドは &lt;code&gt;ReqlRuntimeError&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="f512423d2484874d4ef81262f263f73e18785542" translate="yes" xml:space="preserve">
          <source>If a server has timed out, the returned document will contain no statistics, but &lt;em&gt;will&lt;/em&gt; contain an error field.</source>
          <target state="translated">サーバーがタイムアウトした場合、返されるドキュメントには統計は含まれませんが、エラーフィールド&lt;em&gt;が&lt;/em&gt;含まれます。</target>
        </trans-unit>
        <trans-unit id="d67164fdd5b2432d26eb520edd2ceaec9fff9d09" translate="yes" xml:space="preserve">
          <source>If a table is unavailable for reads and/or writes but all its servers are still available, no issue will be shown.</source>
          <target state="translated">テーブルが読み取りおよび/または書き込みのために利用できなくても、すべてのサーバが利用可能な場合、問題は表示されません。</target>
        </trans-unit>
        <trans-unit id="ec828d6df90fe81b82d20f519d2c700677a81bbc" translate="yes" xml:space="preserve">
          <source>If a table with the same name already exists, the command throws &lt;code&gt;ReqlOpFailedError&lt;/code&gt;.</source>
          <target state="translated">同じ名前のテーブルがすでに存在する場合、コマンドは &lt;code&gt;ReqlOpFailedError&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="762cbf1b1c5f6e0a0ced0867b8bfd90d270b76fb" translate="yes" xml:space="preserve">
          <source>If an error occurs during an asynchronous operation, the &lt;code&gt;yield&lt;/code&gt; statement will throw an exception as normal. This may happen immediately (for example, you might reference a table that doesn&amp;rsquo;t exist), but your application might receive large amounts of data before the error (for example, your network might be disrupted after the connection is established).</source>
          <target state="translated">非同期操作中にエラーが発生した場合、 &lt;code&gt;yield&lt;/code&gt; ステートメントは通常どおり例外をスローします。これはすぐに発生する可能性があります（たとえば、存在しないテーブルを参照する可能性があります）が、アプリケーションはエラーの前に大量のデータを受信する可能性があります（たとえば、接続の確立後にネットワークが中断される可能性があります）。</target>
        </trans-unit>
        <trans-unit id="bd199cccfdd4faed1362982f6070c2db7adb71fd" translate="yes" xml:space="preserve">
          <source>If an initial result for a document has been sent and a change is made to that document that would move it to the unsent part of the result set (for instance, a changefeed monitors the top 100 posters, the first 50 have been sent, and poster 48 has become poster 52), an &amp;ldquo;uninitial&amp;rdquo; notification will be sent, with an &lt;code&gt;old_val&lt;/code&gt; field but no &lt;code&gt;new_val&lt;/code&gt; field. This is distinct from a delete change event, which would have a &lt;code&gt;new_val&lt;/code&gt; of &lt;code&gt;null&lt;/code&gt;. (In the top 100 posters example, that could indicate the poster has been deleted, or has dropped out of the top 100.)</source>
          <target state="translated">ドキュメントの最初の結果が送信され、そのドキュメントが変更されて結果セットの未送信部分に移動する場合（たとえば、changefeedが上位100のポスターを監視している場合、最初の50が送信され、ポスター48がポスター52になった場合）、「 &lt;code&gt;old_val&lt;/code&gt; 」通知が送信され、old_valフィールドは含まれますが、 &lt;code&gt;new_val&lt;/code&gt; フィールドは含まれません。これは、 &lt;code&gt;new_val&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; になる削除変更イベントとは異なります。 （トップ100のポスターの例では、ポスターが削除されたか、トップ100から削除されたことを示している可能性があります。）</target>
        </trans-unit>
        <trans-unit id="26d654a2235b72cf5ee8cfc9300d6051e8b4403b" translate="yes" xml:space="preserve">
          <source>If half or more of the voting replicas for a shard are lost (including the case of a two-server cluster losing one server), the cluster will need to be repaired manually using the &lt;a href=&quot;../../api/javascript/reconfigure/index#emergency-repair-mode&quot;&gt;emergency repair&lt;/a&gt; option of &lt;code&gt;reconfigure&lt;/code&gt;.</source>
          <target state="translated">シャードの投票レプリカの半分以上が失われた場合（2サーバーのクラスターが1つのサーバーを失った場合を含む）、クラスターは、 &lt;code&gt;reconfigure&lt;/code&gt; の&lt;a href=&quot;../../api/javascript/reconfigure/index#emergency-repair-mode&quot;&gt;緊急修復&lt;/a&gt;オプションを使用して手動で修復する必要があります。</target>
        </trans-unit>
        <trans-unit id="77bbf8bb3d1284cc20e43e13466c1d3fbf32cb64" translate="yes" xml:space="preserve">
          <source>If half or more of the voting replicas of a shard are lost and cannot be reconnected, an &lt;em&gt;emergency repair&lt;/em&gt; will need to be performed. For more information on the emergency repair option, read the documentation for &lt;a href=&quot;../../api/javascript/reconfigure/index&quot;&gt;reconfigure&lt;/a&gt;.</source>
          <target state="translated">シャードの投票レプリカの半分以上が失われ、再接続できない場合は、&lt;em&gt;緊急修復&lt;/em&gt;を実行する必要があります。緊急修復オプションの詳細については、&lt;a href=&quot;../../api/javascript/reconfigure/index&quot;&gt;再構成&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="061df7e7c49aee434f1204c027cba934cda6af25" translate="yes" xml:space="preserve">
          <source>If half or more of the voting replicas of a shard are lost, the only way to recover availability is to run &lt;a href=&quot;../../api/javascript/reconfigure/index&quot;&gt;reconfigure&lt;/a&gt; with the &lt;code&gt;emergency_repair&lt;/code&gt; option. Consult the documentation for &lt;code&gt;reconfigure&lt;/code&gt; for more details.</source>
          <target state="translated">シャードの投票レプリカの半分以上が失われた場合、可用性を回復する唯一の方法は、 &lt;code&gt;emergency_repair&lt;/code&gt; オプションを使用して&lt;a href=&quot;../../api/javascript/reconfigure/index&quot;&gt;再構成&lt;/a&gt;を実行することです。詳細については、 &lt;code&gt;reconfigure&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="efde73ef7877a20ecc7739f334f47a742fb86558" translate="yes" xml:space="preserve">
          <source>If it doesn&amp;rsquo;t appear to be a memory issue and the log provides no clue, you can try asking for support on our official IRC channel, &lt;a href=&quot;http://webchat.freenode.net/?channels=#rethinkdb&quot;&gt;#rethinkdb on freenode&lt;/a&gt; or our &lt;a href=&quot;http://groups.google.com/group/rethinkdb&quot;&gt;Google Group&lt;/a&gt;. If your problem is a crash that we&amp;rsquo;ve seen before&amp;mdash;or our users have&amp;mdash;this may get you a quick answer.</source>
          <target state="translated">それがメモリの問題ではないようで、ログに手掛かりがない場合は、公式のIRCチャネル、&lt;a href=&quot;http://webchat.freenode.net/?channels=#rethinkdb&quot;&gt;freenodeの#rethinkdb&lt;/a&gt;または&lt;a href=&quot;http://groups.google.com/group/rethinkdb&quot;&gt;Googleグループ&lt;/a&gt;でサポートを依頼してみてください。問題が以前に発生したクラッシュまたはユーザーが発生したクラッシュである場合は、これにより迅速な回答が得られる場合があります。</target>
        </trans-unit>
        <trans-unit id="5d31a410767f1b496fa91c893eba00137addcbe4" translate="yes" xml:space="preserve">
          <source>If it were a CSV file, you would use:</source>
          <target state="translated">CSVファイルだったら使いますよね。</target>
        </trans-unit>
        <trans-unit id="273525957d7122e79508032144daf98b9a7bfb02" translate="yes" xml:space="preserve">
          <source>If no callback is provided, a promise will be returned.</source>
          <target state="translated">コールバックが提供されていない場合は、プロミスが返されます。</target>
        </trans-unit>
        <trans-unit id="3f18c7407787ae4cadbbed6cf6901d014fa5ee70" translate="yes" xml:space="preserve">
          <source>If no document exists with that primary key, &lt;code&gt;get&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">その主キーを持つドキュメントが存在しない場合、 &lt;code&gt;get&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2c34094ff9acb919418ed68f9a89587ff4b66f77" translate="yes" xml:space="preserve">
          <source>If no match is found, returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">一致が見つからない場合は、 &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d365045e1c5dd0e5c7738c8f718e4c906a519cf2" translate="yes" xml:space="preserve">
          <source>If no tags are specified on startup, the server will be started with one tag, &lt;code&gt;default&lt;/code&gt;. Changing the sharding/replica information from the web UI or from ReQL commands that do not specify server tags will affect all servers with the &lt;code&gt;default&lt;/code&gt; tag.</source>
          <target state="translated">起動時にタグが指定されていない場合、サーバーは1つのタグ &lt;code&gt;default&lt;/code&gt; で起動されます。ウェブUIまたはサーバータグを指定しないReQLコマンドからシャーディング/レプリカ情報を変更すると、 &lt;code&gt;default&lt;/code&gt; タグを持つすべてのサーバーに影響します。</target>
        </trans-unit>
        <trans-unit id="0aee98830b826882bbc15a192271ab7048ad30ff" translate="yes" xml:space="preserve">
          <source>If one of the objects is a polygon or a line, the point will be projected onto the line or polygon assuming a perfect sphere model before the distance is computed (using the model specified with &lt;code&gt;geoSystem&lt;/code&gt;). As a consequence, if the polygon or line is extremely large compared to Earth&amp;rsquo;s radius and the distance is being computed with the default WGS84 model, the results of &lt;code&gt;distance&lt;/code&gt; should be considered approximate due to the deviation between the ellipsoid and spherical models.</source>
          <target state="translated">オブジェクトの1つがポリゴンまたはラインの場合、距離が計算される前に完全な球モデルを想定して、ポイントがラインまたはポリゴンに投影されます（ &lt;code&gt;geoSystem&lt;/code&gt; で指定されたモデルを使用）。その結果、ポリゴンまたはラインが地球の半径に比べて非常に大きく、距離がデフォルトのWGS84モデルで計算されている場合、楕円体モデルと球体モデルの偏差により、 &lt;code&gt;distance&lt;/code&gt; の結果は概算と見なされます。</target>
        </trans-unit>
        <trans-unit id="547988c7baa3a8e7481b284ce93792e14a5f411c" translate="yes" xml:space="preserve">
          <source>If only &lt;code&gt;offset&lt;/code&gt; is specified, &lt;code&gt;deleteAt&lt;/code&gt; removes the element at that index. If both &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;endOffset&lt;/code&gt; are specified, &lt;code&gt;deleteAt&lt;/code&gt; removes the range of elements between &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;endOffset&lt;/code&gt;, inclusive of &lt;code&gt;offset&lt;/code&gt; but not inclusive of &lt;code&gt;endOffset&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; のみが指定されている場合、 &lt;code&gt;deleteAt&lt;/code&gt; はそのインデックスの要素を削除します。両方があれば &lt;code&gt;offset&lt;/code&gt; と &lt;code&gt;endOffset&lt;/code&gt; のが指定され、 &lt;code&gt;deleteAt&lt;/code&gt; は間の要素の範囲を削除 &lt;code&gt;offset&lt;/code&gt; と &lt;code&gt;endOffset&lt;/code&gt; の、を含む &lt;code&gt;offset&lt;/code&gt; のではなく、包括 &lt;code&gt;endOffset&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="93cdeb256a2ad46f4019d2d854dd0948d1443b40" translate="yes" xml:space="preserve">
          <source>If provided, the emitting function must return a list.</source>
          <target state="translated">指定された場合、エミッタ関数はリストを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="08bbef08552a1acfb0ef92a1b563805617586812" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;createIndex&lt;/code&gt; will return an object of the form &lt;code&gt;{&quot;created&quot;:1}&lt;/code&gt;. If an index by that name already exists on the table, a &lt;code&gt;ReqlRuntimeError&lt;/code&gt; will be thrown.</source>
          <target state="translated">成功した場合、 &lt;code&gt;createIndex&lt;/code&gt; は &lt;code&gt;{&quot;created&quot;:1}&lt;/code&gt; という形式のオブジェクトを返します。その名前のインデックスがテーブルに既に存在する場合、 &lt;code&gt;ReqlRuntimeError&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="e4e76ff0946a766ef5a743092083b843ce45d352" translate="yes" xml:space="preserve">
          <source>If successful, the command returns an object with two fields:</source>
          <target state="translated">成功した場合、コマンドは2つのフィールドを持つオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="3f099ce09be84c0c1d227ab9e128e80491015c35" translate="yes" xml:space="preserve">
          <source>If successful, the operation returns an object: &lt;code&gt;{synced:1}&lt;/code&gt;.</source>
          <target state="translated">成功した場合、操作はオブジェクトを返します： &lt;code&gt;{synced:1}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2923d4d1e36d8e9e18eb7c10ec7984419a44d118" translate="yes" xml:space="preserve">
          <source>If tags aren&amp;rsquo;t specified when a server starts, the server is automatically assigned the &lt;code&gt;default&lt;/code&gt; tag. Documents cannot be inserted into &lt;code&gt;server_config&lt;/code&gt;. A new document gets created when a server connects to the cluster.</source>
          <target state="translated">サーバーの起動時にタグが指定されていない場合、サーバーには &lt;code&gt;default&lt;/code&gt; タグが自動的に割り当てられます。ドキュメントは &lt;code&gt;server_config&lt;/code&gt; に挿入できません。サーバーがクラスターに接続すると、新しいドキュメントが作成されます。</target>
        </trans-unit>
        <trans-unit id="13169b77be457524ff32a677bc03d95492a45d9e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;db&lt;/code&gt; option is passed to the &lt;code&gt;run&lt;/code&gt; command, its value must be a &lt;code&gt;DB&lt;/code&gt; term. The query:</source>
          <target state="translated">&lt;code&gt;db&lt;/code&gt; オプションが &lt;code&gt;run&lt;/code&gt; コマンドに渡される場合、その値は &lt;code&gt;DB&lt;/code&gt; 用語でなければなりません。クエリ：</target>
        </trans-unit>
        <trans-unit id="8edba50ace18abb1314bf60cd6f3d0fcda04c32c" translate="yes" xml:space="preserve">
          <source>If the argument is a ReQL term (not including a datum), serialize it using the standard term:</source>
          <target state="translated">引数が ReQL 項 (データムを含まない)の場合は、標準項を使用してシリアライズします。</target>
        </trans-unit>
        <trans-unit id="de24125bbc0cf5f33af7e2d8106c74639325e769" translate="yes" xml:space="preserve">
          <source>If the cluster requires authorization, you can prompt for the &lt;code&gt;admin&lt;/code&gt; user account password with &lt;code&gt;-p&lt;/code&gt;, or supply a &lt;code&gt;--password-file&lt;/code&gt; to read the password from. (The password file is just a plain text file, with the password on the first and only line.)</source>
          <target state="translated">クラスターに認証が必要な場合は、 &lt;code&gt;-p&lt;/code&gt; を使用して &lt;code&gt;admin&lt;/code&gt; ユーザーアカウントのパスワードを要求するか、パスワードを読み取る &lt;code&gt;--password-file&lt;/code&gt; を指定できます。（パスワードファイルはプレーンテキストファイルで、最初の1行だけがパスワードになっています。）</target>
        </trans-unit>
        <trans-unit id="0acb66e1a94ce282af96b933ae7b825c35ee4474" translate="yes" xml:space="preserve">
          <source>If the connection cannot be established, a &lt;code&gt;ReqlDriverError&lt;/code&gt; will be passed to the callback instead of a connection.</source>
          <target state="translated">接続を確立できない場合は、接続ではなく &lt;code&gt;ReqlDriverError&lt;/code&gt; がコールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="07a6f801dd9460154f182a8f8dd0817d6309de72" translate="yes" xml:space="preserve">
          <source>If the documents in the table &lt;code&gt;marvel&lt;/code&gt; are:</source>
          <target state="translated">表のドキュメントが &lt;code&gt;marvel&lt;/code&gt; 場合：</target>
        </trans-unit>
        <trans-unit id="f30a5dfdb2b1fdb4d94c80ce16b870e4ca1e325d" translate="yes" xml:space="preserve">
          <source>If the function passed to &lt;code&gt;indexCreate&lt;/code&gt; returns an error for a given document, that document will not be indexed. No error will be returned for those documents.</source>
          <target state="translated">&lt;code&gt;indexCreate&lt;/code&gt; に渡された関数が特定のドキュメントに対してエラーを返した場合、そのドキュメントにはインデックスが作成されません。これらのドキュメントのエラーは返されません。</target>
        </trans-unit>
        <trans-unit id="3ebcff7ab038fb5d86072a62ba35507e5a212753" translate="yes" xml:space="preserve">
          <source>If the given database does not exist, the command throws &lt;code&gt;ReqlRuntimeError&lt;/code&gt;.</source>
          <target state="translated">指定されたデータベースが存在しない場合、コマンドは &lt;code&gt;ReqlRuntimeError&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="83f8c355202cee0cf037193fa6419e0d1579befc" translate="yes" xml:space="preserve">
          <source>If the given table does not exist in the database, the command throws &lt;code&gt;ReqlRuntimeError&lt;/code&gt;.</source>
          <target state="translated">指定されたテーブルがデータベースに存在しない場合、コマンドは &lt;code&gt;ReqlRuntimeError&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="d33e35064ceaac7c92d0b921dbc25bb696a28689" translate="yes" xml:space="preserve">
          <source>If the language&amp;rsquo;s native binary format is used, use the pseudotype serialization described above.</source>
          <target state="translated">言語のネイティブバイナリ形式を使用する場合は、上記の疑似タイプのシリアル化を使用します。</target>
        </trans-unit>
        <trans-unit id="794172004aead88e65b683a952a6720840320737" translate="yes" xml:space="preserve">
          <source>If the last point does not specify the same coordinates as the first point, &lt;code&gt;polygon&lt;/code&gt; will close the polygon by connecting them. You cannot directly construct a polygon with holes in it using &lt;code&gt;polygon&lt;/code&gt;, but you can use &lt;a href=&quot;../polygon_sub/index&quot;&gt;polygonSub&lt;/a&gt; to use a second polygon within the interior of the first to define a hole.</source>
          <target state="translated">最後の点が最初の点と同じ座標を指定しない場合、 &lt;code&gt;polygon&lt;/code&gt; はそれらを接続することによって多角形を閉じます。あなたは直接使用して、その中に穴のあるポリゴン構築することができない &lt;code&gt;polygon&lt;/code&gt; していますが、使用することができます&lt;a href=&quot;../polygon_sub/index&quot;&gt;polygonSubを&lt;/a&gt;穴を定義する最初の内部に第二のポリゴンを使用します。</target>
        </trans-unit>
        <trans-unit id="279227353c7ecc61dd5168899f51f27994a2cf67" translate="yes" xml:space="preserve">
          <source>If the native object is a Node.js &lt;code&gt;Buffer&lt;/code&gt;, then &lt;code&gt;expr&lt;/code&gt; will return a binary object. See &lt;a href=&quot;../binary/index&quot;&gt;binary&lt;/a&gt; for more information.</source>
          <target state="translated">ネイティブオブジェクトがNode.js &lt;code&gt;Buffer&lt;/code&gt; 場合、 &lt;code&gt;expr&lt;/code&gt; はバイナリオブジェクトを返します。詳細については、&lt;a href=&quot;../binary/index&quot;&gt;バイナリ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6cd91c4ca8d0c94417414eca59c8a4a0745ad9b0" translate="yes" xml:space="preserve">
          <source>If the post has more than 100 views, set the &lt;code&gt;type&lt;/code&gt; of a post to &lt;code&gt;hot&lt;/code&gt;, else set it to &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">投稿のビューが100を超える場合は、投稿の &lt;code&gt;type&lt;/code&gt; を &lt;code&gt;hot&lt;/code&gt; に設定し &lt;code&gt;normal&lt;/code&gt; 。それ以外の場合は、normalに設定します。</target>
        </trans-unit>
        <trans-unit id="1a8b3ab6af7c7c7f01aa89ce524e930adc4773f6" translate="yes" xml:space="preserve">
          <source>If the primary replica for a table fails, as long as more than half of the table&amp;rsquo;s voting replicas and more than half of the voting replicas for each shard remain available, one of the voting replicas will become the new primary replica.</source>
          <target state="translated">テーブルのプライマリレプリカに障害が発生した場合、テーブルの投票レプリカの半分以上、および各シャードの投票レプリカの半分以上が使用可能なままである限り、投票レプリカの1つが新しいプライマリレプリカになります。</target>
        </trans-unit>
        <trans-unit id="5992fd4ae70294816f6f1035fd88f48be1057692" translate="yes" xml:space="preserve">
          <source>If the primary replica for a table fails, as long as more than half of the table&amp;rsquo;s voting replicas and more than half of the voting replicas for each shard remain available, one of those voting replicas will be arbitrarily selected as the new primary. There will be a brief period of unavailability, but no data will be lost. If the primary replica specified in a table&amp;rsquo;s configuration comes back online after a failure, it will return to being the primary.</source>
          <target state="translated">テーブルのプライマリレプリカに障害が発生した場合、テーブルの投票レプリカの半分以上と各シャードの投票レプリカの半分以上が利用可能なままである限り、それらの投票レプリカの1つが新しいプライマリとして任意に選択されます。利用できなくなる期間が短くなりますが、データは失われません。テーブルの構成で指定されたプライマリレプリカが障害の後でオンラインに戻ると、プライマリレプリカに戻ります。</target>
        </trans-unit>
        <trans-unit id="18ddd2727a3246ed2f57a5fc71e675c7a4286058" translate="yes" xml:space="preserve">
          <source>If the primary replica is lost but more than half of the voting replicas are still available, an arbitrary voting replica will be elected as primary. The new primary will appear in &lt;code&gt;table_status&lt;/code&gt;, but the &lt;code&gt;primary_replica&lt;/code&gt; field of &lt;code&gt;table_config&lt;/code&gt; will not change. If the old primary ever becomes available again, the system will switch back. When the primary changes there will be a brief period of unavailability.</source>
          <target state="translated">プライマリレプリカが失われたが、投票レプリカの半分以上がまだ利用可能な場合、任意の投票レプリカがプライマリとして選択されます。新しいプライマリはで表示されます &lt;code&gt;table_status&lt;/code&gt; が、 &lt;code&gt;primary_replica&lt;/code&gt; の分野 &lt;code&gt;table_config&lt;/code&gt; は変更されません。古いプライマリが再び使用可能になると、システムは元に戻ります。主要な変更が行われると、ご利用いただけなくなります。</target>
        </trans-unit>
        <trans-unit id="6eb19c9d9de161ce9deb372c1a852deaaa59b9d1" translate="yes" xml:space="preserve">
          <source>If the programmer marks a read query to be ok with out-of-date data, RethinkDB will route the query to the closest available replica instead of routing it to the primary. In this case the client will see the data as long as there are replicas of the data on its side of the netsplit. However, in this case the data has the risk of being out of date. This is usually ok for reports, analytics, cached data, or any scenario in general where having the absolute latest information isn&amp;rsquo;t imperative.</source>
          <target state="translated">プログラマが読み取りクエリに古いデータで問題がないとマークした場合、RethinkDBはクエリをプライマリにルーティングするのではなく、最も近い利用可能なレプリカにルーティングします。この場合、ネットスプリットの側にデータのレプリカがある限り、クライアントはデータを見ることができます。ただし、この場合、データは古くなる可能性があります。これは通常、レポート、分析、キャッシュされたデータ、または絶対的な最新情報を持っていることが必須ではない一般的なシナリオでは問題ありません。</target>
        </trans-unit>
        <trans-unit id="e03767ac627ef652aaabb8ba7ea00ea8e5ff0c57" translate="yes" xml:space="preserve">
          <source>If the sequence has less than the requested number of elements (i.e., calling &lt;code&gt;sample(10)&lt;/code&gt; on a sequence with only five elements), &lt;code&gt;sample&lt;/code&gt; will return the entire sequence in a random order.</source>
          <target state="translated">シーケンスの要素数が要求された数より少ない場合（つまり、5つの要素のみを含むシーケンスで &lt;code&gt;sample(10)&lt;/code&gt; を呼び出す）、 &lt;code&gt;sample&lt;/code&gt; はシーケンス全体をランダムな順序で返します。</target>
        </trans-unit>
        <trans-unit id="e80daa38162b2a8e635d7344846e528706031e35" translate="yes" xml:space="preserve">
          <source>If the sequence has only one element, the first element will be returned.</source>
          <target state="translated">シーケンスが1つの要素しかない場合は、最初の要素が返されます。</target>
        </trans-unit>
        <trans-unit id="e31c2b8b5674abdc6e8ae2e43f28019783df7d9f" translate="yes" xml:space="preserve">
          <source>If the sequence is empty, the server will produce a &lt;code&gt;ReqlRuntimeError&lt;/code&gt; that can be caught with &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">シーケンスが空の場合、サーバーは &lt;code&gt;default&lt;/code&gt; でキャッチできる &lt;code&gt;ReqlRuntimeError&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="297486ecfa823e3925af80b1b2a0da86d1f441bb" translate="yes" xml:space="preserve">
          <source>If the table becomes unavailable, the changefeed will be disconnected, and a runtime exception will be thrown by the driver.</source>
          <target state="translated">テーブルが利用できなくなると、チェンジフィードが切断され、ドライバによって実行時例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="b38d841f1274380a6fad3c11a39dc0bd3d4f5892" translate="yes" xml:space="preserve">
          <source>If this is the case, you may be able to avoid crashes by changing RethinkDB&amp;rsquo;s cache size. For information on in-memory caches, how to check their current size, and how to change them, read &lt;a href=&quot;../memory-usage/index&quot;&gt;Understanding RethinkDB memory requirements&lt;/a&gt;.</source>
          <target state="translated">この場合、RethinkDBのキャッシュサイズを変更することで、クラッシュを回避できる場合があります。インメモリキャッシュ、現在のサイズを確認する方法、およびキャッシュを変更する方法については、&lt;a href=&quot;../memory-usage/index&quot;&gt;「RethinkDBのメモリ要件について」を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e26451b295f2c64f69e48115cef996c58d0e87bf" translate="yes" xml:space="preserve">
          <source>If we go back into the &lt;code&gt;Article&lt;/code&gt; model and add the &lt;code&gt;has_many&lt;/code&gt; side of the association, it&amp;rsquo;s important to note that &lt;code&gt;has_many&lt;/code&gt; associations in NoBrainer are read-only. The server doesn&amp;rsquo;t support transactions, so saving the members of the association is up to the developer.</source>
          <target state="translated">&lt;code&gt;Article&lt;/code&gt; モデルに戻り、関連付けの &lt;code&gt;has_many&lt;/code&gt; 側を追加する場合、NoBrainerの &lt;code&gt;has_many&lt;/code&gt; 関連付けは読み取り専用であることに注意することが重要です。サーバーはトランザクションをサポートしていないため、関連付けのメンバーを保存するかどうかは開発者次第です。</target>
        </trans-unit>
        <trans-unit id="562a74a46cba2abb9d672c91f3be189ffbff89c6" translate="yes" xml:space="preserve">
          <source>If we want to retrieve all users on the Galactica and Pegasus, we can write:</source>
          <target state="translated">ギャラクティカとペガサスの全ユーザーを取得したい場合は、以下のように書けばいいのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="3091eed1fda89cc9704666214f1d9fddcd96cc63" translate="yes" xml:space="preserve">
          <source>If we want to retrieve all users that have the email address &lt;code&gt;user@email.com&lt;/code&gt;, we can write:</source>
          <target state="translated">電子メールアドレス &lt;code&gt;user@email.com&lt;/code&gt; を持つすべてのユーザーを取得する場合は、次のように記述できます。</target>
        </trans-unit>
        <trans-unit id="7540c0f9849aa5c72866ece490cc2ace24df9655" translate="yes" xml:space="preserve">
          <source>If you &lt;code&gt;delete&lt;/code&gt; a row from &lt;code&gt;table_config&lt;/code&gt; the table will be deleted. If you &lt;code&gt;insert&lt;/code&gt; a row, the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;db&lt;/code&gt; fields are required; the other fields are optional, and will be automatically generated or set to their default if they are not specified. Do not include the &lt;code&gt;id&lt;/code&gt; field. The system will auto-generate a UUID.</source>
          <target state="translated">&lt;code&gt;table_config&lt;/code&gt; から行を &lt;code&gt;delete&lt;/code&gt; すると、テーブルが削除されます。行を &lt;code&gt;insert&lt;/code&gt; する場合、 &lt;code&gt;name&lt;/code&gt; および &lt;code&gt;db&lt;/code&gt; フィールドは必須です。他のフィールドはオプションであり、指定されていない場合は自動的に生成されるか、デフォルトに設定されます。 &lt;code&gt;id&lt;/code&gt; フィールドは含めないでください。システムはUUIDを自動生成します。</target>
        </trans-unit>
        <trans-unit id="22ef0a100b781bbe86d9c3b56b60862049f3cd72" translate="yes" xml:space="preserve">
          <source>If you &lt;code&gt;replace&lt;/code&gt; a row in &lt;code&gt;table_config&lt;/code&gt;, you must include all the fields. It&amp;rsquo;s usually easier to &lt;code&gt;update&lt;/code&gt; specific fields.</source>
          <target state="translated">&lt;code&gt;table_config&lt;/code&gt; の行を &lt;code&gt;replace&lt;/code&gt; 場合は、すべてのフィールドを含める必要があります。通常、特定のフィールドを &lt;code&gt;update&lt;/code&gt; 方が簡単です。</target>
        </trans-unit>
        <trans-unit id="bc00aecc5294d2dc3548435f91ed3d2f89d0baeb" translate="yes" xml:space="preserve">
          <source>If you accept the &lt;code&gt;rowFinished&lt;/code&gt; callback, it &lt;em&gt;must&lt;/em&gt; be called at the end of each row. If you call &lt;code&gt;rowFinished&lt;/code&gt; with any value, iteration will stop, and the value will be wrapped in &lt;code&gt;error.message&lt;/code&gt; for the error handler.</source>
          <target state="translated">&lt;code&gt;rowFinished&lt;/code&gt; コールバックを受け入れる場合は、各行の最後に呼び出す&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。値を &lt;code&gt;rowFinished&lt;/code&gt; してrowFinishedを呼び出すと、反復が停止し、値はエラーハンドラーの &lt;code&gt;error.message&lt;/code&gt; にラップされます。</target>
        </trans-unit>
        <trans-unit id="2f9276b4d2b3fcbd52dda6edde3718ac5d70084a" translate="yes" xml:space="preserve">
          <source>If you are using configuration files to configure RethinkDB (e.g. &lt;code&gt;/etc/rethinkdb/instances.d/...&lt;/code&gt;), add &lt;code&gt;cache-size=&amp;lt;limit in MB&amp;gt;&lt;/code&gt; to the configuration file to set the size limit manually.</source>
          <target state="translated">設定ファイルを使用してRethinkDBを設定している場合（例： &lt;code&gt;/etc/rethinkdb/instances.d/...&lt;/code&gt; ）、設定ファイルに &lt;code&gt;cache-size=&amp;lt;limit in MB&amp;gt;&lt;/code&gt; を追加して、サイズ制限を手動で設定します。</target>
        </trans-unit>
        <trans-unit id="cdcc580c70eb68dd90fba166fa8fe3d003208dd8" translate="yes" xml:space="preserve">
          <source>If you ask for a nested field that doesn&amp;rsquo;t exist, you will get an empty object or array (this is &lt;em&gt;not&lt;/em&gt; the same as a &lt;code&gt;null&lt;/code&gt; value):</source>
          <target state="translated">存在しないネストされたフィールドを要求すると、空のオブジェクトまたは配列が取得されます（これは &lt;code&gt;null&lt;/code&gt; 値と同じではあり&lt;em&gt;ません&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="771d3ba57f317fd5733896e2943507e103014c06" translate="yes" xml:space="preserve">
          <source>If you call the &lt;code&gt;stop&lt;/code&gt; method on a &lt;code&gt;Handler&lt;/code&gt;, it will stop processing changes and open streams using that handler will be closed. Queries registered with that handler instance will not be interrupted if they are currently processing (e.g., a batch write), but will close rather than executing after the handler has been stopped.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; で &lt;code&gt;stop&lt;/code&gt; メソッドを呼び出すと、変更の処理が停止し、そのハンドラーを使用して開いているストリームが閉じられます。そのハンドラインスタンスに登録されたクエリは、現在処理中（たとえば、バッチ書き込み）の場合は中断されませんが、ハンドラが停止した後に実行されるのではなく閉じられます。</target>
        </trans-unit>
        <trans-unit id="2816abb70037d2cb8f468a1edfbf5eabe5da4f44" translate="yes" xml:space="preserve">
          <source>If you compiled from source, get the &lt;code&gt;init.d&lt;/code&gt; script from &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/init/rethinkdb&quot;&gt;here&lt;/a&gt;. Get the sample &lt;code&gt;.conf&lt;/code&gt; file &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">ソースからコンパイルした場合は、&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/init/rethinkdb&quot;&gt;ここ&lt;/a&gt;から &lt;code&gt;init.d&lt;/code&gt; スクリプトを取得します。&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample&quot;&gt;ここで&lt;/a&gt;サンプルの &lt;code&gt;.conf&lt;/code&gt; ファイルを取得します。</target>
        </trans-unit>
        <trans-unit id="83708fec6ffb6df17569d9d454fa458ff10ae070" translate="yes" xml:space="preserve">
          <source>If you didn&amp;rsquo;t install using Homebrew, you&amp;rsquo;ll need to create a launchd configuration file, and decide where you want to store your data files. These instructions assume the following locations:</source>
          <target state="translated">Homebrewを使用してインストールしなかった場合は、launchd構成ファイルを作成し、データファイルを保存する場所を決定する必要があります。これらの手順では、次の場所を想定しています。</target>
        </trans-unit>
        <trans-unit id="eadc4d652313b1fe2d6ed6344fdf54172fc82742" translate="yes" xml:space="preserve">
          <source>If you do &lt;em&gt;not&lt;/em&gt; use &lt;code&gt;rowFinished&lt;/code&gt;, the &lt;code&gt;rowProcess&lt;/code&gt; callback can end iteration early by returning any value &lt;em&gt;other&lt;/em&gt; than a Promise. If it returns a non-Promise value (other than &lt;code&gt;undefined&lt;/code&gt;), then &lt;code&gt;final&lt;/code&gt; will receive an error object. If it returns a Promise, the Promise will be resolved before iteration continues; if the resolved Promise returns a value, iteration will be stopped and an error object will be passed to &lt;code&gt;final&lt;/code&gt;.</source>
          <target state="translated">あなたがない場合&lt;em&gt;ではない&lt;/em&gt;使用 &lt;code&gt;rowFinished&lt;/code&gt; を、 &lt;code&gt;rowProcess&lt;/code&gt; のコールバックは、任意の値を返すことにより、早期の反復を終了することができ&lt;em&gt;、他の&lt;/em&gt;約束よりを。Promise以外の値（ &lt;code&gt;undefined&lt;/code&gt; 以外）を返す場合、 &lt;code&gt;final&lt;/code&gt; はエラーオブジェクトを受け取ります。Promiseが返された場合、Promiseは反復が続行される前に解決されます。解決されたPromiseが値を返す場合、反復は停止され、エラーオブジェクトが &lt;code&gt;final&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="dfd2e5e2bd99765946497d8434bb3926deedd62f" translate="yes" xml:space="preserve">
          <source>If you do not find one, treat the argument normally.</source>
          <target state="translated">見つからない場合は、その議論を普通に扱いましょう。</target>
        </trans-unit>
        <trans-unit id="e45384aab5ceacddb4ba809043d5294d1d019636" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t have the Python driver installed, you can install a previous version using &lt;code&gt;pip install rethinkdb==&amp;lt;version&amp;gt;&lt;/code&gt;. (You can use the &lt;a href=&quot;https://pypi.python.org/pypi/rethinkdb&quot;&gt;Python Package Index&lt;/a&gt; to check on current and older versions.)</source>
          <target state="translated">Pythonドライバーをインストールしていない場合は、 &lt;code&gt;pip install rethinkdb==&amp;lt;version&amp;gt;&lt;/code&gt; を使用して以前のバージョンをインストールできます。（&lt;a href=&quot;https://pypi.python.org/pypi/rethinkdb&quot;&gt;Pythonパッケージインデックス&lt;/a&gt;を使用して、現在のバージョンと古いバージョンを確認できます。）</target>
        </trans-unit>
        <trans-unit id="b9550f01fd6cb5bf84e8788a9564ba6ce7305a18" translate="yes" xml:space="preserve">
          <source>If you forget the admin password, it can be changed from the Data Explorer using &lt;code&gt;update&lt;/code&gt; as described above.</source>
          <target state="translated">管理者パスワードを忘れた場合は、データエクスプローラーから、上記の &lt;code&gt;update&lt;/code&gt; を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="5ef723651e3c827e99014952458339056d2c209e" translate="yes" xml:space="preserve">
          <source>If you forget to specify the &lt;code&gt;nonAtomic&lt;/code&gt; flag, you will get a &lt;code&gt;ReqlRuntimeError&lt;/code&gt;:</source>
          <target state="translated">あなたが指定するのを忘れた場合は &lt;code&gt;nonAtomic&lt;/code&gt; フラグを、あなたが取得します &lt;code&gt;ReqlRuntimeError&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="5646d27eb019a3807161da40de3568dc2f4e4197" translate="yes" xml:space="preserve">
          <source>If you have a secondary index built on the field &lt;code&gt;age&lt;/code&gt;, you can run a more efficient query:</source>
          <target state="translated">フィールド &lt;code&gt;age&lt;/code&gt; に構築されたセカンダリインデックスがある場合、より効率的なクエリを実行できます。</target>
        </trans-unit>
        <trans-unit id="4c572ebf586ce8e501c48a35b2c6aaa65c043299" translate="yes" xml:space="preserve">
          <source>If you have a secondary index built on the field &lt;code&gt;name&lt;/code&gt;, you can run a more efficient query:</source>
          <target state="translated">フィールド &lt;code&gt;name&lt;/code&gt; に基づいて作成されたセカンダリインデックスがある場合は、より効率的なクエリを実行できます。</target>
        </trans-unit>
        <trans-unit id="1235d59d708558b9571a719afc8da5ddd845970f" translate="yes" xml:space="preserve">
          <source>If you have a secondary index, you can use the &lt;a href=&quot;../../../api/javascript/between/index&quot;&gt;between&lt;/a&gt; command in conjunction with &lt;a href=&quot;../../../api/javascript/order_by/index&quot;&gt;orderBy&lt;/a&gt; and &lt;code&gt;limit&lt;/code&gt;. This is the most efficient way to paginate, but requires looking up values in the secondary index field to find the first record of each page.</source>
          <target state="translated">セカンダリインデックスがある場合は、&lt;a href=&quot;../../../api/javascript/between/index&quot;&gt;between&lt;/a&gt;コマンドを&lt;a href=&quot;../../../api/javascript/order_by/index&quot;&gt;orderBy&lt;/a&gt;および &lt;code&gt;limit&lt;/code&gt; と組み合わせて使用できます。これはページ付けを行う最も効率的な方法ですが、各ページの最初のレコードを見つけるには、セカンダリインデックスフィールドの値を検索する必要があります。</target>
        </trans-unit>
        <trans-unit id="76ce08c2e0f3f14f3e931d8e20da63959f60afbe" translate="yes" xml:space="preserve">
          <source>If you have a time, you can retrieve a particular portion (like the month, or the hours) relative to the current time zone. (See the full list at the &lt;a href=&quot;https://rethinkdb.com/api&quot;&gt;API reference&lt;/a&gt;.)</source>
          <target state="translated">時間がある場合は、現在のタイムゾーンに関連する特定の部分（月や時間など）を取得できます。（&lt;a href=&quot;https://rethinkdb.com/api&quot;&gt;APIリファレンスの&lt;/a&gt;完全なリストを参照してください。）</target>
        </trans-unit>
        <trans-unit id="bfe387ee6476daedd31f1f133dde57638c19abdf" translate="yes" xml:space="preserve">
          <source>If you have an index (primary key or secondary index) built on the field of the right table, you can perform a more efficient join with &lt;a href=&quot;../../../api/javascript/eq_join/index&quot;&gt;eqJoin&lt;/a&gt;.</source>
          <target state="translated">正しいテーブルのフィールドに構築されたインデックス（主キーまたはセカンダリインデックス）がある場合、&lt;a href=&quot;../../../api/javascript/eq_join/index&quot;&gt;eqJoinを&lt;/a&gt;使用してより効率的な結合を実行できます。</target>
        </trans-unit>
        <trans-unit id="82e4fe23b378dc14cd8cfd0877cfbc4782c6460c" translate="yes" xml:space="preserve">
          <source>If you have changed the intracluster port from 29015, use the new number. For more guidance, see RethinkDB&amp;rsquo;s &lt;a href=&quot;../cluster-on-startup/index&quot;&gt;cluster setup instructions&lt;/a&gt; and Amazon&amp;rsquo;s documentation on &lt;a href=&quot;http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html&quot;&gt;Security Groups for your VPC&lt;/a&gt;.</source>
          <target state="translated">クラスター内ポートを29015から変更した場合は、新しい番号を使用します。詳細なガイダンスについては、RethinkDBの&lt;a href=&quot;../cluster-on-startup/index&quot;&gt;クラスター設定手順&lt;/a&gt;と&lt;a href=&quot;http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html&quot;&gt;VPCのセキュリティグループ&lt;/a&gt;に関するAmazonのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="05a4aedf88c6ef11885acadb36c80628a3555466" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t already added billing information to your Compose account, you&amp;rsquo;ll be prompted to do so before deployment.</source>
          <target state="translated">Composeアカウントに請求情報をまだ追加していない場合は、デプロイ前に追加するように求められます。</target>
        </trans-unit>
        <trans-unit id="3e16ddb9cd8af200dcaf09b797a43f7f78d9b2f8" translate="yes" xml:space="preserve">
          <source>If you haven&amp;rsquo;t read the &lt;a href=&quot;../../changefeeds/javascript/index&quot;&gt;article on changefeeds&lt;/a&gt; yet, start there! You can subscribe to notifications on tables and queries with changefeeds alone, without using publish-subscribe. If you&amp;rsquo;d like to see how to implement a message queue with topics using changefeeds, read on!</source>
          <target state="translated">&lt;a href=&quot;../../changefeeds/javascript/index&quot;&gt;変更フィードに関する記事を&lt;/a&gt;まだ読んでいない場合は、そこから始めてください。パブリッシュサブスクライブを使用せずに、変更フィードのみを使用して、テーブルとクエリの通知をサブスクライブできます。changefeedsを使用してトピックでメッセージキューを実装する方法を確認したい場合は、以下を読んでください。</target>
        </trans-unit>
        <trans-unit id="288b2d3310d3674f40603201b027dd0c6eb8f2a2" translate="yes" xml:space="preserve">
          <source>If you install RethinkDB using &lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt;, a &lt;code&gt;launchd&lt;/code&gt; configuration file will be installed for you in &lt;code&gt;~/Library/LaunchAgents/&lt;/code&gt;, although that file may need to be modified.</source>
          <target state="translated">&lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt;を使用してRethinkDBをインストールすると、 &lt;code&gt;launchd&lt;/code&gt; 構成ファイルが &lt;code&gt;~/Library/LaunchAgents/&lt;/code&gt; にインストールされますが、ファイルの変更が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="a5552500ec8d4feb23c54bc6392958bb200d8875" translate="yes" xml:space="preserve">
          <source>If you installed RethinkDB through a package manager on a system that does &lt;em&gt;not&lt;/em&gt; use &lt;code&gt;systemd&lt;/code&gt;, then you may have to check where it&amp;rsquo;s configured to log. It&amp;rsquo;s very likely this will be in the &lt;code&gt;/var/log/&lt;/code&gt; directory (i.e., &lt;code&gt;/var/log/rethinkdb&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;systemd&lt;/code&gt; を使用し&lt;em&gt;ない&lt;/em&gt;システムにパッケージマネージャーを介してRethinkDBをインストールした場合は、ログを記録するように構成されている場所を確認する必要がある場合があります。これは &lt;code&gt;/var/log/&lt;/code&gt; ディレクトリ（つまり、 &lt;code&gt;/var/log/rethinkdb&lt;/code&gt; ）にある可能性が非常に高いです。</target>
        </trans-unit>
        <trans-unit id="647301df2f1301b87e8dd79c6025e36d6587ac71" translate="yes" xml:space="preserve">
          <source>If you need to do this, you can try passing the &lt;code&gt;--no-secondary-indexes&lt;/code&gt; flag to &lt;code&gt;restore&lt;/code&gt; as a workaround. This will usually allow restores to work on older versions, although this is not guaranteed.</source>
          <target state="translated">これを行う必要がある場合は、回避策として &lt;code&gt;--no-secondary-indexes&lt;/code&gt; フラグを渡して &lt;code&gt;restore&lt;/code&gt; を試みることができます。これにより、保証はありませんが、通常、古いバージョンでの復元が可能になります。</target>
        </trans-unit>
        <trans-unit id="ddf5f2f153ce1b030eca220c0f0c9358b895c3a9" translate="yes" xml:space="preserve">
          <source>If you need to keep both fields, you can rename them with &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;without&lt;/code&gt; before using the &lt;code&gt;zip&lt;/code&gt; command.</source>
          <target state="translated">あなたは両方のフィールドを維持する必要がある場合は、あなたがそれらの名前を変更することができ &lt;code&gt;map&lt;/code&gt; と &lt;code&gt;without&lt;/code&gt; 使用する前に、 &lt;code&gt;zip&lt;/code&gt; コマンドを。</target>
        </trans-unit>
        <trans-unit id="0c512f640834e077c4381c35c4c5f5238c4d755c" translate="yes" xml:space="preserve">
          <source>If you need to retrieve only a few specific fields from your documents, you can use the &lt;code&gt;pluck&lt;/code&gt; command. For example, here is how you&amp;rsquo;d return only the fields &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; from each row in table &lt;code&gt;users&lt;/code&gt;:</source>
          <target state="translated">文書からいくつかの特定のフィールドのみを取得する必要がある場合は、 &lt;code&gt;pluck&lt;/code&gt; コマンドを使用できます。たとえば、 &lt;code&gt;users&lt;/code&gt; テーブルの各行からフィールド &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;age&lt;/code&gt; のみを返す方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b75a375a87a4428fc1234e32ea18a55d70c1347d" translate="yes" xml:space="preserve">
          <source>If you pass an ISO 8601 string without a time zone, you must specify the time zone with the &lt;code&gt;defaultTimezone&lt;/code&gt; argument.</source>
          <target state="translated">タイムゾーンなしでISO 8601文字列を渡す場合は、 &lt;code&gt;defaultTimezone&lt;/code&gt; 引数でタイムゾーンを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f596ed1d102ee48cfe38f90920a8a73907a2fff7" translate="yes" xml:space="preserve">
          <source>If you provide a &lt;code&gt;final&lt;/code&gt; callback, it will always be executed when row processing is completed (the end of the sequence is hit, iteration is stopped prematurely, or an error occurs). The &lt;code&gt;final&lt;/code&gt; callback will receive an &lt;code&gt;error&lt;/code&gt; object if an error is thrown or &lt;code&gt;rowProcess&lt;/code&gt; returns any value (other than a Promise). If &lt;code&gt;final&lt;/code&gt; returns any value it will be ignored.</source>
          <target state="translated">&lt;code&gt;final&lt;/code&gt; コールバックを提供すると、行の処理が完了したときに常に実行されます（シーケンスの最後に到達した、反復が途中で停止した、またはエラーが発生した）。 &lt;code&gt;final&lt;/code&gt; コールバックが受信する &lt;code&gt;error&lt;/code&gt; エラーがスローされている場合、またはオブジェクトを &lt;code&gt;rowProcess&lt;/code&gt; が（プロミス以外）の任意の値を返します。 &lt;code&gt;final&lt;/code&gt; が値を返す場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="e6396deb74891150f578d1c5de136d0b47288655" translate="yes" xml:space="preserve">
          <source>If you read this document back, you&amp;rsquo;ll get this:</source>
          <target state="translated">このドキュメントを読み返すと、次のようになります。</target>
        </trans-unit>
        <trans-unit id="3f68dcdc1d24865c3b47fc643cd2e0f50d3fbb0a" translate="yes" xml:space="preserve">
          <source>If you remove &lt;em&gt;all&lt;/em&gt; of a server&amp;rsquo;s tags and then reconfigure all the cluster&amp;rsquo;s tables, that server will be taken out of service.</source>
          <target state="translated">サーバーの&lt;em&gt;すべて&lt;/em&gt;のタグを削除&lt;em&gt;して&lt;/em&gt;から、すべてのクラスターのテーブルを再構成すると、そのサーバーはサービスを停止します。</target>
        </trans-unit>
        <trans-unit id="c6a74de84425f66a0b769b6d4648c4cc1b05afde" translate="yes" xml:space="preserve">
          <source>If you run a query that returns a grouped stream, it will be automatically converted to grouped data before being sent back to you (there is currently no efficient way to stream groups from RethinkDB). This grouped data is subject to the array size limit, by default 100,000 elements (see &lt;a href=&quot;../run/index&quot;&gt;run&lt;/a&gt; for details on how to use the &lt;code&gt;arrayLimit&lt;/code&gt; option to change this).</source>
          <target state="translated">グループ化されたストリームを返すクエリを実行すると、返送される前に自動的にグループ化されたデータに変換されます（現在、RethinkDBからグループをストリーミングする効率的な方法はありません）。このグループ化されたデータは、配列サイズの制限、デフォルトでは100,000要素の影響を受けます（ &lt;code&gt;arrayLimit&lt;/code&gt; オプションを使用してこれを変更する方法の詳細については、&lt;a href=&quot;../run/index&quot;&gt;run&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="e70f8245f1c68cb85f247cf67565bb8eec8be33c" translate="yes" xml:space="preserve">
          <source>If you specify &lt;code&gt;true&lt;/code&gt; for both &lt;code&gt;includeStates&lt;/code&gt; and &lt;code&gt;includeInitial&lt;/code&gt;, the changefeed stream will start with a &lt;code&gt;{state:'initializing'}&lt;/code&gt; status document, followed by initial values. A &lt;code&gt;{state:'ready'}&lt;/code&gt; status document will be sent when all the initial values have been sent.</source>
          <target state="translated">&lt;code&gt;includeStates&lt;/code&gt; と &lt;code&gt;includeInitial&lt;/code&gt; の両方に &lt;code&gt;true&lt;/code&gt; を指定すると、changefeedストリームは &lt;code&gt;{state:'initializing'}&lt;/code&gt; ステータスドキュメントで始まり、その後に初期値が続きます。A &lt;code&gt;{state:'ready'}&lt;/code&gt; すべての初期値が送られてきたときのステータス文書が送信されます。</target>
        </trans-unit>
        <trans-unit id="2cbddffcc9f00819db397afa4df1b08e38d12bf2" translate="yes" xml:space="preserve">
          <source>If you started &lt;code&gt;rethinkdb&lt;/code&gt; on a terminal rather than from a startup script, it will log to the &lt;code&gt;rethinkdb_data&lt;/code&gt; directory. By default it will write to &lt;code&gt;log_file&lt;/code&gt; but this may be overridden with the &lt;code&gt;--log-file&lt;/code&gt; startup option.</source>
          <target state="translated">あなたが起動した場合 &lt;code&gt;rethinkdb&lt;/code&gt; を端末上ではなく、起動スクリプトから、それはにログインします &lt;code&gt;rethinkdb_data&lt;/code&gt; ディレクトリ。デフォルトでは、 &lt;code&gt;log_file&lt;/code&gt; に書き込まれますが、これは &lt;code&gt;--log-file&lt;/code&gt; 起動オプションでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="82ace7a41170ad2855ed92f890913f90ce2fe88d" translate="yes" xml:space="preserve">
          <source>If you subtract two times, you get a duration:</source>
          <target state="translated">2回引くとデュレーションが出てきます。</target>
        </trans-unit>
        <trans-unit id="4ed2b0735a26aa75e5a52e94d19026c65a460278" translate="yes" xml:space="preserve">
          <source>If you support &lt;code&gt;IMPLICIT_VAR&lt;/code&gt; in your driver, then every time you parse the argument of a function you should check if the method can take a function. If it can, you should look for an &lt;code&gt;IMPLICIT_VAR&lt;/code&gt; term (i.e., &lt;code&gt;row&lt;/code&gt;). If you find one, wrap the argument in a function that takes one parameter:</source>
          <target state="translated">ドライバーで &lt;code&gt;IMPLICIT_VAR&lt;/code&gt; をサポートしている場合、関数の引数を解析するたびに、メソッドが関数を取得できるかどうかを確認する必要があります。可能であれば、 &lt;code&gt;IMPLICIT_VAR&lt;/code&gt; 用語（つまり、 &lt;code&gt;row&lt;/code&gt; ）を探す必要があります。見つかった場合は、1つのパラメーターを取る関数で引数をラップします。</target>
        </trans-unit>
        <trans-unit id="7e555f9a01208c3228041f9a60ea0708846725a6" translate="yes" xml:space="preserve">
          <source>If you try to serialize a document containing a ReQL time zone object using Python&amp;rsquo;s &lt;code&gt;json&lt;/code&gt; library, you may receive this error. Solve this by passing the &lt;code&gt;time_format=&quot;raw&quot;&lt;/code&gt; option to &lt;code&gt;run&lt;/code&gt;:</source>
          <target state="translated">Pythonの &lt;code&gt;json&lt;/code&gt; ライブラリを使用してReQLタイムゾーンオブジェクトを含むドキュメントをシリアル化しようとすると、このエラーが発生する場合があります。これを解決するには、 &lt;code&gt;time_format=&quot;raw&quot;&lt;/code&gt; オプションを渡して &lt;code&gt;run&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="a69fd118d720c0b3ef04383826f0c9000327522b" translate="yes" xml:space="preserve">
          <source>If you use arrays as indexes (compound indexes), they will be sorted using &lt;a href=&quot;https://en.wikipedia.org/wiki/Lexicographical_order&quot;&gt;lexicographical order&lt;/a&gt;. Take the following range as an example:</source>
          <target state="translated">配列をインデックス（複合インデックス）として使用する場合、それらは&lt;a href=&quot;https://en.wikipedia.org/wiki/Lexicographical_order&quot;&gt;辞書式順序&lt;/a&gt;を使用してソートされます。例として次の範囲を取り上げます。</target>
        </trans-unit>
        <trans-unit id="137368e26abb11bd3729cf72ed538f86d0b76bb7" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;zip&lt;/code&gt; command after &lt;code&gt;join&lt;/code&gt;, the document from the right table will be merged into the left one.</source>
          <target state="translated">&lt;code&gt;join&lt;/code&gt; の後に &lt;code&gt;zip&lt;/code&gt; コマンドを使用すると、右側のテーブルのドキュメントが左側のドキュメントにマージされます。</target>
        </trans-unit>
        <trans-unit id="faa0c1937c2c1e18853e93e9c38fa77f7753e71f" translate="yes" xml:space="preserve">
          <source>If you use this option on the server, the client must use a secure connection as well. Pass the certificate information in the &lt;code&gt;ssl&lt;/code&gt; option to the &lt;code&gt;connect&lt;/code&gt; ReQL command; read the API documentation for &lt;a href=&quot;../../api/javascript/connect/index&quot;&gt;connect&lt;/a&gt; for details on your language&amp;rsquo;s specific syntax.</source>
          <target state="translated">サーバーでこのオプションを使用する場合、クライアントも安全な接続を使用する必要があります。証明書情報を &lt;code&gt;ssl&lt;/code&gt; オプションで &lt;code&gt;connect&lt;/code&gt; ReQLコマンドに渡します。言語固有の構文の詳細については、&lt;a href=&quot;../../api/javascript/connect/index&quot;&gt;接続&lt;/a&gt;用のAPIドキュメントをお読みください。</target>
        </trans-unit>
        <trans-unit id="8933a5a5bc42ce744657eae9a0d136b21cd536e8" translate="yes" xml:space="preserve">
          <source>If you want an exact match for a field that is an object, you will have to use &lt;code&gt;r.literal&lt;/code&gt;.</source>
          <target state="translated">オブジェクトであるフィールドの完全一致が必要な場合は、 &lt;code&gt;r.literal&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="42f06f6a06529fafebf5726831ab492c1731013d" translate="yes" xml:space="preserve">
          <source>If you want to operate on all the groups rather than operating on each group (e.g. if you want to order the groups by their reduction), you can use &lt;a href=&quot;../ungroup/index&quot;&gt;ungroup&lt;/a&gt; to turn a grouped stream or grouped data into an array of objects representing the groups.</source>
          <target state="translated">各グループを操作するのではなく、すべてのグループを操作したい場合（たとえば、グループを縮小順に並べたい場合）、&lt;a href=&quot;../ungroup/index&quot;&gt;ungroup&lt;/a&gt;を使用して、グループ化されたストリームまたはグループ化されたデータを、グループを表すオブジェクトの配列に変換できます。</target>
        </trans-unit>
        <trans-unit id="8e46c1955c2c8d4036f94c039e2a8a144057b763" translate="yes" xml:space="preserve">
          <source>If you want to perform a query that returns aggregations on different fields together, this is a canonical use case for &lt;a href=&quot;../../map-reduce/index&quot;&gt;map-reduce&lt;/a&gt;.</source>
          <target state="translated">異なるフィールドの集計を一緒に返すクエリを実行する場合、これは&lt;a href=&quot;../../map-reduce/index&quot;&gt;map-reduceの&lt;/a&gt;標準的な使用例です。</target>
        </trans-unit>
        <trans-unit id="ffc292f977df5974c81cb7f1681982162644cd6e" translate="yes" xml:space="preserve">
          <source>If you want to retrieve all the posts with the primary keys &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, or &lt;code&gt;3&lt;/code&gt; you can use the &lt;code&gt;getAll&lt;/code&gt; command:</source>
          <target state="translated">あなたは主キーを持つすべての投稿を検索したい場合は &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;2&lt;/code&gt; 、または &lt;code&gt;3&lt;/code&gt; を、あなたは使用することができる &lt;code&gt;getAll&lt;/code&gt; コマンドを：</target>
        </trans-unit>
        <trans-unit id="dbbd54db4f2738a27bb5bf620810ae9c295fee97" translate="yes" xml:space="preserve">
          <source>If you want to retrieve all users whose last name contains &amp;ldquo;ll&amp;rdquo;, you can use &lt;code&gt;r.match&lt;/code&gt; this way:</source>
          <target state="translated">姓に「ll」が含まれるすべてのユーザーを取得する場合は、次のように &lt;code&gt;r.match&lt;/code&gt; を使用できます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
