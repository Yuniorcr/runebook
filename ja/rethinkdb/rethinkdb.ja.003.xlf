<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rethinkdb">
    <body>
      <group id="rethinkdb">
        <trans-unit id="57d32ed6842f8937bfbfb6135067bdf013914ba5" translate="yes" xml:space="preserve">
          <source>If you want to retrieve all users whose last name ends with an &amp;ldquo;s&amp;rdquo;, you can use &lt;code&gt;r.match&lt;/code&gt; this way:</source>
          <target state="translated">姓が「s」で終わるすべてのユーザーを取得する場合は、次のように &lt;code&gt;r.match&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="5955d5b29355702e414b30489a1bf41c4ff4157d" translate="yes" xml:space="preserve">
          <source>If you want to retrieve all users whose last name starts with &amp;ldquo;Ma&amp;rdquo;, you can use &lt;code&gt;r.match&lt;/code&gt; this way:</source>
          <target state="translated">姓が「Ma」で始まるすべてのユーザーを取得する場合は、次のように &lt;code&gt;r.match&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="c0bc2c2dcf06bfff997e2c4a74f6f884030f7aba" translate="yes" xml:space="preserve">
          <source>If you want to use a prefix notation, you just need to implement all the commands on a module. If you want to use an infix notation, you should implement all the functions on a class &amp;ldquo;term&amp;rdquo; and some prefix commands on the module.</source>
          <target state="translated">プレフィックス表記を使用する場合は、モジュールにすべてのコマンドを実装するだけです。中置表記法を使用する場合は、クラス「term」にすべての関数を実装し、モジュールにいくつかの前置コマンドを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="9be25802011254b9d2a1331968b140867a7a3dff" translate="yes" xml:space="preserve">
          <source>If you wanted to receive &lt;em&gt;all&lt;/em&gt; the changes, including the interim states, you could do so by passing &lt;code&gt;squash: false&lt;/code&gt;. The server will buffer up to 100,000 changes. (This number can be changed with the &lt;code&gt;changefeedQueueSize&lt;/code&gt; optional argument.)</source>
          <target state="translated">暫定状態を含む&lt;em&gt;すべて&lt;/em&gt;の変更を受け取りたい場合は、 &lt;code&gt;squash: false&lt;/code&gt; を渡すことで行うことができます。サーバーは最大100,000の変更をバッファします。（この数は &lt;code&gt;changefeedQueueSize&lt;/code&gt; オプション引数で変更できます。）</target>
        </trans-unit>
        <trans-unit id="0bfcf6ae6bbb104a8f2d9363a057e7ab252bf34a" translate="yes" xml:space="preserve">
          <source>If you wish other locations, change the text in the file appropriately.</source>
          <target state="translated">他の場所を希望する場合は、ファイル内のテキストを適宜変更してください。</target>
        </trans-unit>
        <trans-unit id="683e445d7ef31ffd6276aee46241b7bc6d8c2d1d" translate="yes" xml:space="preserve">
          <source>If you wish to find all points within a certain radius of another point, it&amp;rsquo;s often faster to use &lt;a href=&quot;../get_intersecting/index&quot;&gt;getIntersecting&lt;/a&gt; with &lt;a href=&quot;../circle/index&quot;&gt;circle&lt;/a&gt;, as long as the approximation of a circle that &lt;code&gt;circle&lt;/code&gt; generates is sufficient.</source>
          <target state="translated">あなたが他のポイントの一定の半径内のすべてのポイントを見つけたい場合は、それを使用する方が速いことが多いのです&lt;a href=&quot;../get_intersecting/index&quot;&gt;getIntersectingを&lt;/a&gt;して&lt;a href=&quot;../circle/index&quot;&gt;円&lt;/a&gt;という円の近似限り、 &lt;code&gt;circle&lt;/code&gt; 十分であるが生成されます。</target>
        </trans-unit>
        <trans-unit id="7524784d2e4a2810021fbd5dcbfcfdac73a9720d" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re doing ad-hoc analysis and know your table won&amp;rsquo;t have more then 100,000 elements (or you&amp;rsquo;ve changed the setting of the &lt;code&gt;array_limit&lt;/code&gt; option for &lt;a href=&quot;../run/index&quot;&gt;run&lt;/a&gt;) you can run &lt;code&gt;orderBy&lt;/code&gt; without an index:</source>
          <target state="translated">アドホック分析を実行していて、テーブルに100,000を超える要素がないことがわかっている場合（または&lt;a href=&quot;../run/index&quot;&gt;run&lt;/a&gt;の &lt;code&gt;array_limit&lt;/code&gt; オプションの設定を変更した場合）、インデックスなしで &lt;code&gt;orderBy&lt;/code&gt; を実行できます。</target>
        </trans-unit>
        <trans-unit id="6ff79c17332249a5d857f8a257aa944f0b925e14" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re setting up a cluster in a secure environment (for instance, the whole cluster is on a local network behind a firewall), you can simply start the servers in the cluster without an admin password, then update the &lt;code&gt;admin&lt;/code&gt; record in the &lt;code&gt;users&lt;/code&gt; table with a new password. However, if you&amp;rsquo;re joining a new server to a cluster that&amp;rsquo;s already password-protected, the best way to do it is to specify the &lt;code&gt;--initial-password auto&lt;/code&gt; option.</source>
          <target state="translated">安全な環境でクラスターを設定している場合（たとえば、クラスター全体がファイアウォールの背後にあるローカルネットワーク上にある場合）、管理者パスワードなしでクラスター内のサーバーを起動するだけで、 &lt;code&gt;admin&lt;/code&gt; レコードを更新できます。新しいテーブルの &lt;code&gt;users&lt;/code&gt; テーブル。ただし、すでにパスワード保護されているクラスターに新しいサーバーを参加させる場合は、 &lt;code&gt;--initial-password auto&lt;/code&gt; オプションを指定するのが最善の方法です。</target>
        </trans-unit>
        <trans-unit id="456807bd4deabd7fb0d4e595a0e89ba5793a3a63" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re trying to run the RethinkDB JavaScript driver on an older version of Node.js, you might get an error similar to this one:</source>
          <target state="translated">古いバージョンのNode.jsでRethinkDB JavaScriptドライバーを実行しようとすると、次のようなエラーが表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="3b39a010075ff223dcb6231c15f5807cd083e75c" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using &lt;a href=&quot;../changefeeds/javascript/index&quot;&gt;changefeeds&lt;/a&gt;, the proxy will de-duplicate changefeed messages sent from other cluster nodes, further reducing traffic.</source>
          <target state="translated">&lt;a href=&quot;../changefeeds/javascript/index&quot;&gt;changefeeds&lt;/a&gt;を使用している場合、プロキシは他のクラスターノードから送信されたchangefeedメッセージを重複排除し、トラフィックをさらに削減します。</target>
        </trans-unit>
        <trans-unit id="f62e60bf0cc80777903c60849396bf97f6d61d7f" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re using a command that returns a stream and want to retrieve all of its results at once in an array rather than iterating through them with the cursor object, you can coerce it to an array using the &lt;a href=&quot;../../../api/javascript/to_array/index&quot;&gt;toArray&lt;/a&gt; command.</source>
          <target state="translated">ストリームを返すコマンドを使用していて、カーソルオブジェクトで反復するのではなく、配列内のすべての結果を一度に取得したい場合は、&lt;a href=&quot;../../../api/javascript/to_array/index&quot;&gt;toArray&lt;/a&gt;コマンドを使用して配列に強制変換できます。</target>
        </trans-unit>
        <trans-unit id="bacb25a3674084c03c251e600233179fe60bd947" translate="yes" xml:space="preserve">
          <source>If your Linux system uses &lt;code&gt;systemd&lt;/code&gt;, use &lt;code&gt;journalctl&lt;/code&gt; to view the log:</source>
          <target state="translated">Linuxシステムで &lt;code&gt;systemd&lt;/code&gt; を使用している場合は、 &lt;code&gt;journalctl&lt;/code&gt; を使用してログを表示します。</target>
        </trans-unit>
        <trans-unit id="da2db0981a7397bff51112a1fc945fe4ca7b2b8f" translate="yes" xml:space="preserve">
          <source>If your cluster has at least three servers, then in most cases RethinkDB will be able to perform automatic failover and maintain table availability.</source>
          <target state="translated">クラスタに少なくとも3台のサーバがある場合、ほとんどの場合、RethinkDBは自動フェイルオーバーを実行し、テーブルの可用性を維持することができます。</target>
        </trans-unit>
        <trans-unit id="b49541bdff3c285637a61fef077a63e1f69a37fc" translate="yes" xml:space="preserve">
          <source>If your driver uses infix notation, you must make sure that the &lt;code&gt;VAR&lt;/code&gt; term implements all the ReQL methods.</source>
          <target state="translated">ドライバーがインフィックス表記法を使用する場合、 &lt;code&gt;VAR&lt;/code&gt; 用語がすべてのReQLメソッドを実装することを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="350e9574e2ae89a26fa9dc3cc454a0ede0acc59d" translate="yes" xml:space="preserve">
          <source>If your network is open to the internet, you should take additional precautions. See the &lt;a href=&quot;../security/index&quot;&gt;security page&lt;/a&gt; for more details.</source>
          <target state="translated">ネットワークがインターネットに開放されている場合は、追加の予防策を講じる必要があります。詳細については、&lt;a href=&quot;../security/index&quot;&gt;セキュリティページ&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="366849b7e0bac319320d290f73d9827bd3539c9b" translate="yes" xml:space="preserve">
          <source>If your platform isn&amp;rsquo;t listed here, you may still be able to build from source. You should be able to build RethinkDB on most Linux-based systems&amp;mdash;check out the generic &lt;a href=&quot;https://rethinkdb.com/docs/build&quot;&gt;build instructions&lt;/a&gt;. If you get RethinkDB running on your platform, please &lt;a href=&quot;https://rethinkdb.com/community&quot;&gt;contribute&lt;/a&gt; a package!</source>
          <target state="translated">ここにプラットフォームがリストされていない場合でも、ソースからビルドできる可能性があります。ほとんどのLinuxベースのシステムでRethinkDBをビルドできるはずです。一般的な&lt;a href=&quot;https://rethinkdb.com/docs/build&quot;&gt;ビルド手順を&lt;/a&gt;確認してください。プラットフォームでRethinkDBを実行している場合は、パッケージを&lt;a href=&quot;https://rethinkdb.com/community&quot;&gt;寄稿し&lt;/a&gt;てください！</target>
        </trans-unit>
        <trans-unit id="23b1ba702365541b74287007a736458d67c4eaea" translate="yes" xml:space="preserve">
          <source>If your program frequently executes a &lt;a href=&quot;../../../api/javascript/get_all/index&quot;&gt;getAll&lt;/a&gt; followed by a &lt;a href=&quot;../../../api/javascript/contains/index&quot;&gt;contains&lt;/a&gt;, that operation can be made more efficient by creating a compound multi index using a mapping function on the field that contains the list.</source>
          <target state="translated">プログラムが頻繁に&lt;a href=&quot;../../../api/javascript/get_all/index&quot;&gt;getAllの&lt;/a&gt;後に&lt;a href=&quot;../../../api/javascript/contains/index&quot;&gt;containsを&lt;/a&gt;実行する場合、リストを含むフィールドのマッピング関数を使用して複合マルチインデックスを作成することにより、その操作をより効率的に行うことができます。</target>
        </trans-unit>
        <trans-unit id="d0f7491313b584ad1d089f9d22913b45b26e6b14" translate="yes" xml:space="preserve">
          <source>If your timestamps are stored with time zones, this query will work even if you have sales from different offices in different countries (assuming they all work 9-5 local time).</source>
          <target state="translated">タイムスタンプがタイムゾーンと一緒に保存されている場合、このクエリは、異なる国の異なるオフィスからの売上があっても動作します(すべて現地時間の9-5で動作すると仮定しています)。</target>
        </trans-unit>
        <trans-unit id="6768eab9c379c5663aede0e10ef2910ddbacc359" translate="yes" xml:space="preserve">
          <source>Ignored host: (remove everything)</source>
          <target state="translated">無視されたホスト:(すべてを削除)</target>
        </trans-unit>
        <trans-unit id="00b783520a8a2fbc5645a580ba36a3a286254053" translate="yes" xml:space="preserve">
          <source>Implementation Details</source>
          <target state="translated">実施内容</target>
        </trans-unit>
        <trans-unit id="7830d9e83bdb571cca1e50f542e8516184aeb2bf" translate="yes" xml:space="preserve">
          <source>Implementation considerations</source>
          <target state="translated">実装上の考慮事項</target>
        </trans-unit>
        <trans-unit id="81ebe12aa11cc123fdb7f8c88133ffaff6347b23" translate="yes" xml:space="preserve">
          <source>Implementation details</source>
          <target state="translated">実施内容</target>
        </trans-unit>
        <trans-unit id="48c76de824c667c812b20e68b2adc022b6cc3927" translate="yes" xml:space="preserve">
          <source>Implementing pagination</source>
          <target state="translated">ページネーションの実装</target>
        </trans-unit>
        <trans-unit id="4b9473d2b75bfa42436746f65c8c33b98460fd54" translate="yes" xml:space="preserve">
          <source>Import the data into the new version of RethinkDB</source>
          <target state="translated">新しいバージョンのRethinkDBにデータをインポートする</target>
        </trans-unit>
        <trans-unit id="238711b7dea1818e5597c84c0a73743721ecdeb7" translate="yes" xml:space="preserve">
          <source>Import the driver</source>
          <target state="translated">ドライバーのインポート</target>
        </trans-unit>
        <trans-unit id="017c247df6b2b83d4d9a69a49f09f95bae03a6a1" translate="yes" xml:space="preserve">
          <source>Importing data</source>
          <target state="translated">データのインポート</target>
        </trans-unit>
        <trans-unit id="e2edf793f8ceb332bdd4099e91b0d561315566da" translate="yes" xml:space="preserve">
          <source>Importing from a directory is only supported for directories created by the &lt;code&gt;rethinkdb export&lt;/code&gt; command.</source>
          <target state="translated">ディレクトリからのインポートは、 &lt;code&gt;rethinkdb export&lt;/code&gt; コマンドで作成されたディレクトリでのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="9f1cdd2fcf75bc422b05e6de9e62859e98a52259" translate="yes" xml:space="preserve">
          <source>Importing your data</source>
          <target state="translated">データのインポート</target>
        </trans-unit>
        <trans-unit id="b2365d482c0ea18f41ce8c42a7403d51a41e4cae" translate="yes" xml:space="preserve">
          <source>Improve this doc</source>
          <target state="translated">このドキュメントを改善する</target>
        </trans-unit>
        <trans-unit id="a2b4972775d63230221d59d42b6e919bd9b4dc33" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;saveFile&lt;/code&gt;, we pass a path to the uploaded file (which may be in a temporary storage directory, even with a temporary name depending on the uploading library we&amp;rsquo;ve used), the name to save the file with, and the id of the user who&amp;rsquo;s uploaded the file. The &lt;a href=&quot;../../../api/javascript/binary/index&quot;&gt;binary&lt;/a&gt; ReQL command is used to store the file&amp;rsquo;s contents as a binary object in the &lt;code&gt;file&lt;/code&gt; field.</source>
          <target state="translated">で &lt;code&gt;saveFile&lt;/code&gt; 、我々は（たとえ一時的な名前は、私たちが使用したアップロードライブラリに依存して、一時保管ディレクトリにあってもよい）アップロードされたファイルへのパスを渡し、名前を持つファイルを保存し、そしてのIDにファイルをアップロードしたユーザー。&lt;a href=&quot;../../../api/javascript/binary/index&quot;&gt;バイナリ&lt;/a&gt; ReQLコマンドは、内のバイナリオブジェクトとしてファイルの内容を格納するために使用された &lt;code&gt;file&lt;/code&gt; フィールド。</target>
        </trans-unit>
        <trans-unit id="ab75b66b21721ea02b5f1190366112cfa1b49ce9" translate="yes" xml:space="preserve">
          <source>In JavaScript you can use the operator &lt;code&gt;()&lt;/code&gt; to get the value of a field. This operator can be chained to retrieve values from nested fields.</source>
          <target state="translated">JavaScriptでは、演算子 &lt;code&gt;()&lt;/code&gt; を使用してフィールドの値を取得できます。この演算子をチェーンして、ネストされたフィールドから値を取得できます。</target>
        </trans-unit>
        <trans-unit id="4b8d71b1ae4e957e1c701dd6a29e28ae62e6fa5a" translate="yes" xml:space="preserve">
          <source>In ReQL, you can chain commands at the end of other commands using the &lt;code&gt;.&lt;/code&gt; operator:</source>
          <target state="translated">ReQLでは、を使用して他のコマンドの最後にコマンドをチェーンできます &lt;code&gt;.&lt;/code&gt; オペレーター：</target>
        </trans-unit>
        <trans-unit id="d7e11373b98a35ae62612e925d7efc50e57e385c" translate="yes" xml:space="preserve">
          <source>In RethinkDB, if there is a network partition, the behavior of the system from any given client&amp;rsquo;s perspective depends on which side of the netsplit that client is on. If the client is on the same side of the netsplit as the majority of voting replicas for the shard the client is trying to reach, it will continue operating without any problems. If the client is on the side of the netsplit with half or fewer of the voting replicas for the shard the client is trying to reach, the client&amp;rsquo;s up-to-date queries and write queries will encounter a failure of availability. For example, if the client is running an up-to-date range query that spans multiple shards, the primaries for all shards must be on the same side of the netsplit as the client, or the client will encounter a failure of availability.</source>
          <target state="translated">RethinkDBでは、ネットワークパーティションがある場合、特定のクライアントの観点から見たシステムの動作は、そのクライアントがnetsplitのどちら側にあるかによって異なります。クライアントが、クライアントが到達しようとしているシャードの投票レプリカの大部分と同じ側にある場合、問題なく動作し続けます。クライアントがnetsplitの側にあり、クライアントが到達しようとしているシャードの投票レプリカの半分以下の場合、クライアントの最新のクエリと書き込みクエリは可用性の障害に遭遇します。たとえば、クライアントが複数のシャードにまたがる最新の範囲クエリを実行している場合、すべてのシャードのプライマリは、クライアントと同じネットスプリットの同じ側になければなりません。そうしないと、クライアントで可用性の障害が発生します。</target>
        </trans-unit>
        <trans-unit id="53975b0e82ce0d86ca8d9057bdbb663e9bcafe56" translate="yes" xml:space="preserve">
          <source>In RethinkDB, map-reduce queries operate on sequences and are composed of two or three parts:</source>
          <target state="translated">RethinkDBでは、Map-reduceクエリはシーケンスを操作し、2つまたは3つの部分から構成されています。</target>
        </trans-unit>
        <trans-unit id="e547e43d492374793f980136c4cf014cfc49388d" translate="yes" xml:space="preserve">
          <source>In Ruby, you would use a block:</source>
          <target state="translated">Rubyではブロックを使うことになります。</target>
        </trans-unit>
        <trans-unit id="1f616f120c6b02696c4b0366e3aece768d2e56d2" translate="yes" xml:space="preserve">
          <source>In a many to many relation, we can use multiple &lt;code&gt;eq_join&lt;/code&gt; commands to join the data from all three tables:</source>
          <target state="translated">多対多の関係では、複数の &lt;code&gt;eq_join&lt;/code&gt; コマンドを使用して、3つすべてのテーブルのデータを結合できます。</target>
        </trans-unit>
        <trans-unit id="b8a1f7a4ae7bafa4f994ca4dcbba5e5033b936cc" translate="yes" xml:space="preserve">
          <source>In a relational database, we&amp;rsquo;d use a &lt;code&gt;JOIN&lt;/code&gt; here; in RethinkDB, we use the &lt;code&gt;eq_join&lt;/code&gt; command. To get all posts along with the author information for William Adama:</source>
          <target state="translated">リレーショナルデータベースでは、ここでは &lt;code&gt;JOIN&lt;/code&gt; を使用します。RethinkDBでは、 &lt;code&gt;eq_join&lt;/code&gt; コマンドを使用します。ウィリアムアダマの著者情報とともにすべての投稿を取得するには：</target>
        </trans-unit>
        <trans-unit id="0017c83cf17c2e2c74f552cbefb9d78035ec322b" translate="yes" xml:space="preserve">
          <source>In addition to commands described here, ReQL supports a number of sophisticated commands that are composable similarly to the commands described here. See the following documentation for more details:</source>
          <target state="translated">ここで説明したコマンドに加えて、ReQL は、ここで説明したコマンドと同様に合成可能な高度なコマンドを多数サポートしています。詳細は以下のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="69b56eab4e915ecae6acc17c1b920e1f95e8dda6" translate="yes" xml:space="preserve">
          <source>In addition to the simple &lt;code&gt;on_val&lt;/code&gt; method, you can provide methods that specifically apply to arrays, streams and atoms.</source>
          <target state="translated">単純な &lt;code&gt;on_val&lt;/code&gt; メソッドに加えて、配列、ストリーム、アトムに特に適用されるメソッドを提供できます。</target>
        </trans-unit>
        <trans-unit id="e832c720b5396283b4982d091435fc8a17a57bae" translate="yes" xml:space="preserve">
          <source>In addition, RethinkDB&amp;rsquo;s cursors and feeds implement an &lt;a href=&quot;../../api/javascript/ee-cursor/index&quot;&gt;EventEmitter interface&lt;/a&gt; compatible with Node&amp;rsquo;s. This allows your application to set up listeners to receive data from queries as the data becomes available.</source>
          <target state="translated">さらに、RethinkDBのカーソルとフィードは、Nodeと互換性のある&lt;a href=&quot;../../api/javascript/ee-cursor/index&quot;&gt;EventEmitterインターフェース&lt;/a&gt;を実装しています。これにより、アプリケーションは、データが利用可能になったときにクエリからデータを受信するようにリスナーを設定できます。</target>
        </trans-unit>
        <trans-unit id="ac43c6179eddd9e0aa83a1d0f3a033887a74a4d9" translate="yes" xml:space="preserve">
          <source>In addition, like most NoSQL systems, RethinkDB does not support updating multiple documents atomically.</source>
          <target state="translated">また、他の多くのNoSQLシステムと同様に、RethinkDBは複数のドキュメントをアトミックに更新することをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="482ca37f4f75fe52405c7f2363070d3ac96941cf" translate="yes" xml:space="preserve">
          <source>In addition, the following two fields are set as circumstances dictate:</source>
          <target state="translated">また、状況に応じて以下の2つのフィールドを設定します。</target>
        </trans-unit>
        <trans-unit id="dfeb6cb29bcc9b1be788874544634d9e422e0566" translate="yes" xml:space="preserve">
          <source>In addition, there are changefeed-specific methods that may be defined.</source>
          <target state="translated">さらに、定義されている可能性のある changefeed 固有のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="7e9c26359d4eb826c3e725e35c3b93e27549d853" translate="yes" xml:space="preserve">
          <source>In addition, there&amp;rsquo;s a &amp;ldquo;pseudotype&amp;rdquo; called &lt;strong&gt;geometry&lt;/strong&gt; which appears in documentation, to indicate that any of the geometric objects can be used with those commands.</source>
          <target state="translated">さらに、&lt;strong&gt;ジオメトリ&lt;/strong&gt;と呼ばれる「疑似タイプ」がドキュメントに表示され、これらのコマンドで任意の幾何オブジェクトを使用できることを示しています。</target>
        </trans-unit>
        <trans-unit id="98129ae214b9438711e0e318ef2278075825e480" translate="yes" xml:space="preserve">
          <source>In both cases, each documents is a JSON object, bracketed with &lt;code&gt;{}&lt;/code&gt; characters. Only the first format is itself a valid JSON document, but RethinkDB will import documents properly either way.</source>
          <target state="translated">どちらの場合も、各ドキュメントはJSONオブジェクトであり、 &lt;code&gt;{}&lt;/code&gt; 文字で囲まれています。最初の形式のみが有効なJSONドキュメントですが、RethinkDBはどちらの方法でもドキュメントを適切にインポートします。</target>
        </trans-unit>
        <trans-unit id="b0a086d5882f5f0f06698c6203f1af04758586d8" translate="yes" xml:space="preserve">
          <source>In cases where it matters, the system should give administrators fine-tuned control, such as pinning specific primary and secondary replicas to specific servers in the cluster.</source>
          <target state="translated">重要な場合には、クラスタ内の特定のサーバーに特定のプライマリおよびセカンダリのレプリカを固定するなど、システムは管理者に微調整された制御を与えなければなりません。</target>
        </trans-unit>
        <trans-unit id="5b00ccdfaea40371a01b81bb7dc1bad4ad740441" translate="yes" xml:space="preserve">
          <source>In each configuration file, set a different data directory, and include the &lt;code&gt;join&lt;/code&gt; configuration option for each node with the IP address and port of another node in the cluster. If the instances are not running on the same machine, specify &lt;code&gt;bind=all&lt;/code&gt; in the configuration file (or &lt;code&gt;--bind all&lt;/code&gt; on the command line). Take care that each instance on the same machine specifies different values for &lt;code&gt;driver-port&lt;/code&gt;, &lt;code&gt;cluster-port&lt;/code&gt; and &lt;code&gt;http-port&lt;/code&gt;.</source>
          <target state="translated">各構成ファイルで、異なるデータディレクトリを設定し、クラスター内の別のノードのIPアドレスとポートを使用して、各ノードの &lt;code&gt;join&lt;/code&gt; 構成オプションを含めます。インスタンスが同じマシンで実行されていない場合は、構成ファイルで &lt;code&gt;bind=all&lt;/code&gt; （またはコマンドラインで &lt;code&gt;--bind all&lt;/code&gt; ）を指定します。同じマシン上の各インスタンスが &lt;code&gt;driver-port&lt;/code&gt; 、 &lt;code&gt;cluster-port&lt;/code&gt; 、および &lt;code&gt;http-port&lt;/code&gt; に異なる値を指定していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ab3aa8875b25a2ffc4aedb33806133ea9bef7d9c" translate="yes" xml:space="preserve">
          <source>In general, operations on grouped streams will be efficiently distributed, and operations on grouped data won&amp;rsquo;t be. You can figure out what you&amp;rsquo;re working with by putting &lt;code&gt;typeOf&lt;/code&gt; on the end of your query. Below are efficient and inefficient examples.</source>
          <target state="translated">一般に、グループ化されたストリームに対する操作は効率的に分散され、グループ化されたデータに対する操作は分散されません。クエリの最後に &lt;code&gt;typeOf&lt;/code&gt; を置くことで、何を処理しているかを理解できます。以下は効率的で非効率的な例です。</target>
        </trans-unit>
        <trans-unit id="f054beb39982d96498daad23e2a815f6da2c843d" translate="yes" xml:space="preserve">
          <source>In general, you&amp;rsquo;ll have to follow these steps:</source>
          <target state="translated">一般に、次の手順に従う必要があります。</target>
        </trans-unit>
        <trans-unit id="de3c73ba8ae404d459a86a8fedcb02be56388736" translate="yes" xml:space="preserve">
          <source>In its first form, &lt;code&gt;fold&lt;/code&gt; operates like &lt;a href=&quot;../reduce/index&quot;&gt;reduce&lt;/a&gt;, returning a value by applying a combining function to each element in a sequence. The combining function takes two parameters: the previous reduction result (the accumulator) and the current element. However, &lt;code&gt;fold&lt;/code&gt; has the following differences from &lt;code&gt;reduce&lt;/code&gt;:</source>
          <target state="translated">最初の形式では、 &lt;code&gt;fold&lt;/code&gt; は&lt;a href=&quot;../reduce/index&quot;&gt;reduceの&lt;/a&gt;ように動作し、シーケンス内の各要素に結合関数を適用して値を返します。結合関数は2つのパラメータを取ります。前の削減結果（アキュムレータ）と現在の要素です。ただし、 &lt;code&gt;fold&lt;/code&gt; には &lt;code&gt;reduce&lt;/code&gt; と次のような違いがあります。</target>
        </trans-unit>
        <trans-unit id="3984a5dbbfd384237df25b964a2fe7964065b882" translate="yes" xml:space="preserve">
          <source>In its second form, &lt;code&gt;fold&lt;/code&gt; operates like &lt;a href=&quot;../concat_map/index&quot;&gt;concatMap&lt;/a&gt;, returning a new sequence rather than a single value. When an &lt;code&gt;emit&lt;/code&gt; function is provided, &lt;code&gt;fold&lt;/code&gt; will:</source>
          <target state="translated">2番目の形式では、 &lt;code&gt;fold&lt;/code&gt; は&lt;a href=&quot;../concat_map/index&quot;&gt;concatMapの&lt;/a&gt;ように動作し、単一の値ではなく新しいシーケンスを返します。とき &lt;code&gt;emit&lt;/code&gt; 機能が提供され、 &lt;code&gt;fold&lt;/code&gt; の意志を：</target>
        </trans-unit>
        <trans-unit id="f1803506720787d5029fd735e7823ff69080cca3" translate="yes" xml:space="preserve">
          <source>In most circumstances, automatic failover can be performed as long as a majority of voting replicas are available. However, one circumstance in which it may not be performed is a non-transitive connectivity failure. Imagine a cluster with three servers: A, B, and C. Under normal network operations, all of the servers can connect to one another. If a network failure occurs such that A can connect to B and B can connect to C, but A cannot connect to C, the network failure is non-transitive. For a more in-depth description, as well as progress on a long-term solution, read &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/4357&quot;&gt;Github issue #4357&lt;/a&gt;.</source>
          <target state="translated">ほとんどの状況では、投票レプリカの大部分が使用可能である限り、自動フェイルオーバーを実行できます。ただし、それが実行されない可能性がある1つの状況は、非推移的な接続障害です。 A、B、Cの3つのサーバーを持つクラスターを想像してください。通常のネットワーク操作では、すべてのサーバーが相互に接続できます。 AはBに接続でき、BはCに接続できるようなネットワーク障害が発生しても、AはCに接続できない場合、ネットワーク障害は非推移的です。より詳細な説明と長期的なソリューションの進捗状況については、&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/issues/4357&quot;&gt;Github issue＃4357をご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fd2d7923eb0bc8efca1cb651f85d4797323b30ae" translate="yes" xml:space="preserve">
          <source>In normal operation, &lt;code&gt;single&lt;/code&gt; read mode produces the same results as &lt;code&gt;majority&lt;/code&gt; read mode, but it might return outdated results in the event of a network failure or crash. It&amp;rsquo;s also possible that a read run in &lt;code&gt;single&lt;/code&gt; mode could return results from an incomplete write that is later rolled back.</source>
          <target state="translated">通常の操作では、 &lt;code&gt;single&lt;/code&gt; 読み取りモードは &lt;code&gt;majority&lt;/code&gt; 読み取りモードと同じ結果を生成しますが、ネットワーク障害またはクラッシュが発生すると、古い結果を返す可能性があります。 &lt;code&gt;single&lt;/code&gt; モードでの読み取り実行で、後でロールバックされる不完全な書き込みの結果が返される可能性もあります。</target>
        </trans-unit>
        <trans-unit id="ae45c6d0609936a00a819d3d51967b8a8050e205" translate="yes" xml:space="preserve">
          <source>In order to model this data we&amp;rsquo;d create three tables&amp;mdash;&lt;code&gt;authors&lt;/code&gt;, &lt;code&gt;posts&lt;/code&gt; and &lt;code&gt;authors_posts&lt;/code&gt;, similarly to how we&amp;rsquo;d do it in a relational system. Here is example data for the &lt;code&gt;authors&lt;/code&gt; table:</source>
          <target state="translated">このデータをモデル化するために、リレーショナルシステムでのデータの作成方法と同様に、 &lt;code&gt;authors&lt;/code&gt; 、 &lt;code&gt;posts&lt;/code&gt; 、 &lt;code&gt;authors_posts&lt;/code&gt; の 3つのテーブルを作成します。これは、 &lt;code&gt;authors&lt;/code&gt; テーブルのサンプルデータです。</target>
        </trans-unit>
        <trans-unit id="97a88b12b94723a393b40b35de02068c1acae898" translate="yes" xml:space="preserve">
          <source>In other words, ReQL queries that involve multiple shards will be processed on those shards whenever possible.</source>
          <target state="translated">つまり、複数のシャードを含むReQLクエリは、可能な限りそれらのシャードで処理されます。</target>
        </trans-unit>
        <trans-unit id="afd135582e47c109847489d0def7f5b6eefbf292" translate="yes" xml:space="preserve">
          <source>In production, you&amp;rsquo;d likely want to specify options via configuration files rather than command line options; read the &lt;a href=&quot;../config-file/index&quot;&gt;configuration file&lt;/a&gt; documentation for details on the format and available options. Also, you&amp;rsquo;d want your RethinkDB instances to come online at system startup. See &lt;a href=&quot;../start-on-startup/index&quot;&gt;Start RethinkDB at system startup&lt;/a&gt; to learn how to set up RethinkDB with &lt;code&gt;init.d&lt;/code&gt; or &lt;code&gt;systemd&lt;/code&gt;.</source>
          <target state="translated">本番環境では、コマンドラインオプションではなく、構成ファイルを介してオプションを指定する必要があります。形式と使用可能なオプションの詳細については、&lt;a href=&quot;../config-file/index&quot;&gt;構成ファイルの&lt;/a&gt;ドキュメントを参照してください。また、システムの起動時にRethinkDBインスタンスをオンラインにする必要があります。 &lt;code&gt;init.d&lt;/code&gt; または &lt;code&gt;systemd&lt;/code&gt; を使用してRethinkDBを設定する方法については&lt;a href=&quot;../start-on-startup/index&quot;&gt;、システム起動時&lt;/a&gt;にRethinkDBを開始するを参照してください。</target>
        </trans-unit>
        <trans-unit id="e0dc7c6b334bc6af46a97821423466554f645dd8" translate="yes" xml:space="preserve">
          <source>In soft durability mode RethinkDB will acknowledge the write immediately after receiving it, but before the write has been committed to disk.</source>
          <target state="translated">ソフト耐久性モードでは、RethinkDBは書き込みを受信した直後に、書き込みがディスクにコミットされる前に書き込みを確認します。</target>
        </trans-unit>
        <trans-unit id="5e7d59ad6bb744097a2528372b93cd92bdc3e075" translate="yes" xml:space="preserve">
          <source>In terms of hardware, we used the &lt;a href=&quot;https://www.rackspace.com/en-us/cloud/servers/onmetal&quot;&gt;OnMetal offerings from Rackspace&lt;/a&gt; to run both RethinkDB server and RethinkDB client nodes. We used different hardware configurations for the server and client nodes as shown below:</source>
          <target state="translated">ハードウェアに関しては&lt;a href=&quot;https://www.rackspace.com/en-us/cloud/servers/onmetal&quot;&gt;、Rackspace&lt;/a&gt;のOnMetalオファリングを使用して、RethinkDBサーバーとRethinkDBクライアントノードの両方を実行しました。以下に示すように、サーバーノードとクライアントノードに異なるハードウェア構成を使用しました。</target>
        </trans-unit>
        <trans-unit id="cb384544524d3d59795f35c682141659070ffc05" translate="yes" xml:space="preserve">
          <source>In terms of latency, we found that in a 16-node cluster and forbidding stale reads, the 95th percentile for latency is 3ms. When doing a heavy read workload, a large majority of reads fell between 0ms and 1ms which can be seen in the graph below.</source>
          <target state="translated">レイテンシに関しては、16ノードのクラスターでスタールリードを禁止した場合、レイテンシの95パーセンタイルは3msであることがわかりました。多量の読み取り作業を行った場合、大多数の読み取りは0msから1msの間に落ちており、以下のグラフで見ることができます。</target>
        </trans-unit>
        <trans-unit id="c2a92dff43ec5bf76e7d231b5b621039bca24c72" translate="yes" xml:space="preserve">
          <source>In that example, when you&amp;rsquo;re trying to get at just one value, the JSON style doesn&amp;rsquo;t offer much advantage. But you can use it to retrieve &lt;em&gt;multiple&lt;/em&gt; values at the same nesting level. For instance, you can get just Bob&amp;rsquo;s work and cell numbers, but not home:</source>
          <target state="translated">この例では、1つの値だけを取得しようとしている場合、JSONスタイルはあまりメリットがありません。ただし、これを使用して、同じネストレベルで&lt;em&gt;複数の&lt;/em&gt;値を取得&lt;em&gt;でき&lt;/em&gt;ます。たとえば、ボブの仕事と細胞番号だけを取得できますが、自宅は取得できません。</target>
        </trans-unit>
        <trans-unit id="bf0b85b37e8a9ef902d18f0effb8b8b0a5e0b487" translate="yes" xml:space="preserve">
          <source>In the &amp;ldquo;asynchronous&amp;rdquo; test, reads use the &lt;code&gt;{readMode:&amp;rdquo;outdated&amp;rdquo;}&lt;/code&gt; setting</source>
          <target state="translated">「非同期」テストでは、読み取りは &lt;code&gt;{readMode:&amp;rdquo;outdated&amp;rdquo;}&lt;/code&gt; 設定を使用します</target>
        </trans-unit>
        <trans-unit id="224e33b3ae99c46077d788fc2cbcfc0ec642f4c2" translate="yes" xml:space="preserve">
          <source>In the &amp;ldquo;synchronous&amp;rdquo; test, we use the default &lt;code&gt;{readMode:&amp;rdquo;single&amp;rdquo;}&lt;/code&gt; setting</source>
          <target state="translated">「同期」テストでは、デフォルトの &lt;code&gt;{readMode:&amp;rdquo;single&amp;rdquo;}&lt;/code&gt; 設定を使用します</target>
        </trans-unit>
        <trans-unit id="d0c0068240942eeaad5904125996b7f2b3d6ea1f" translate="yes" xml:space="preserve">
          <source>In the Data Explorer, the following command will output the contents of all the configuration/status tables and the most recent 50 lines of the &lt;code&gt;logs&lt;/code&gt; table:</source>
          <target state="translated">データエクスプローラーで次のコマンドを実行すると、すべての構成/ステータステーブルの内容と、 &lt;code&gt;logs&lt;/code&gt; テーブルの最新の50行が出力されます。</target>
        </trans-unit>
        <trans-unit id="0f2e3061797f8ffc035d338c6ee005215f806609" translate="yes" xml:space="preserve">
          <source>In the ReQL API documentation and some error messages, you&amp;rsquo;ll come across terms for &amp;ldquo;data types&amp;rdquo; that are actually &lt;em&gt;classes&lt;/em&gt; of other data types.</source>
          <target state="translated">ReQL APIドキュメントといくつかのエラーメッセージでは、実際には他のデータ型の&lt;em&gt;クラス&lt;/em&gt;である「データ型」の用語に出くわします。</target>
        </trans-unit>
        <trans-unit id="8918357e3571d7f57170387ccdf371596278a850" translate="yes" xml:space="preserve">
          <source>In the ReQL API documentation you&amp;rsquo;ll also see a &amp;ldquo;pseudotype&amp;rdquo; called &lt;strong&gt;Geometry,&lt;/strong&gt; which is a collective for all of the geometry data types. Those commands will work with points, lines and polygons.</source>
          <target state="translated">ReQL APIドキュメントには、&lt;strong&gt;Geometry&lt;/strong&gt;と呼ばれる「疑似タイプ」も表示されます。これは、すべてのジオメトリデータタイプの集合体です。これらのコマンドは、ポイント、ライン、ポリゴンで機能します。</target>
        </trans-unit>
        <trans-unit id="50f6c67f7c1dbf2748240f51a04ec169aff9a6b9" translate="yes" xml:space="preserve">
          <source>In the case of nested functions, the &lt;code&gt;IMPLICIT_VAR&lt;/code&gt; term is ambiguous, and should not be used. Your driver should either throw an error or let the server return an error.</source>
          <target state="translated">ネストされた関数の場合、 &lt;code&gt;IMPLICIT_VAR&lt;/code&gt; 用語はあいまいであるため、使用しないでください。ドライバーはエラーをスローするか、サーバーにエラーを返させる必要があります。</target>
        </trans-unit>
        <trans-unit id="84e483a5ecf212378a48f1669d098b93f94aaf23" translate="yes" xml:space="preserve">
          <source>In the case of the first source, every database process uses memory to store intermediate results and to maintain internal state. The memory used varies significantly depending on the type of queries run and the size of documents stored in the database. As a rough estimate, expect each query and background process to use 1&amp;ndash;20 MB of memory.</source>
          <target state="translated">最初のソースの場合、すべてのデータベースプロセスはメモリを使用して中間結果を保存し、内部状態を維持します。使用されるメモリは、実行されるクエリのタイプとデータベースに保存されているドキュメントのサイズによって大きく異なります。大まかな見積もりとして、各クエリとバックグラウンドプロセスで1〜20 MBのメモリを使用することを想定しています。</target>
        </trans-unit>
        <trans-unit id="7bcb70dff2e48b1f52037256b865f5a9417b2b37" translate="yes" xml:space="preserve">
          <source>In the form above&amp;mdash;with a block that accepts a single argument&amp;mdash;RethinkDB&amp;rsquo;s EventMachine adapter will throw errors back up to your application for you to handle in the same fashion as you would using RethinkDB without EventMachine. If the table &lt;code&gt;test&lt;/code&gt; did not exist in the database above, you would receive the standard &lt;code&gt;ReqlRunTimeError&lt;/code&gt;:</source>
          <target state="translated">上記のフォームで、単一の引数を受け入れるブロックを使用すると、RethinkDBのEventMachineアダプターは、EventMachineなしでRethinkDBを使用する場合と同じ方法で処理できるように、アプリケーションにエラーをスローします。上記のデータベースにテーブル &lt;code&gt;test&lt;/code&gt; が存在しない場合、標準の &lt;code&gt;ReqlRunTimeError&lt;/code&gt; を受け取ります。</target>
        </trans-unit>
        <trans-unit id="9ec0b06d735bfc391094860e46de01fa59f75cec" translate="yes" xml:space="preserve">
          <source>In the results, we&amp;rsquo;ll see how RethinkDB scales to perform 1.3 million individual reads per second. We will also demonstrate how RethinkDB performs well above 100 thousand operations per second in a mixed 50:50 read/write workload - while at the full level of durability and data integrity guarantees. We performed all benchmarks across a range of cluster sizes, scaling up from one to 16 nodes.</source>
          <target state="translated">結果では、RethinkDBが1秒あたり130万回の個別読み取りを実行するようにスケーリングする方法がわかります。また、RethinkDBが50:50の読み取り/書き込み混合ワークロードで毎秒100,000をはるかに超える操作を実行する方法を示します。耐久性とデータの整合性は完全に保証されています。1つのノードから16ノードにスケールアップして、クラスターサイズの範囲全体ですべてのベンチマークを実行しました。</target>
        </trans-unit>
        <trans-unit id="effef7fb5159ccc0efbb8a008e85c758abcdaa0d" translate="yes" xml:space="preserve">
          <source>In the second example, the two replicas in the &lt;code&gt;us&lt;/code&gt; group may be on any of the four servers in the United States.</source>
          <target state="translated">2番目の例では、 &lt;code&gt;us&lt;/code&gt; グループの2つのレプリカは、米国の4つのサーバーのいずれかに配置できます。</target>
        </trans-unit>
        <trans-unit id="bd1292a9ca18510e97840764bd37257fdac0d158" translate="yes" xml:space="preserve">
          <source>In the subscribing application we need to create a queue to receive and buffer messages. The queue takes a ReQL filtering function as an argument. This is similar to what you would pass to &lt;a href=&quot;../../../api/javascript/filter/index&quot;&gt;filter&lt;/a&gt;. Here we&amp;rsquo;ll subscribe to all messages about superhero fights:</source>
          <target state="translated">サブスクライブするアプリケーションでは、メッセージを受信して​​バッファリングするキューを作成する必要があります。キューは、引数としてReQLフィルタリング関数を取ります。これは、&lt;a href=&quot;../../../api/javascript/filter/index&quot;&gt;filterに&lt;/a&gt;渡すものと似ています。ここでは、スーパーヒーローの戦いに関するすべてのメッセージを購読します。</target>
        </trans-unit>
        <trans-unit id="79b11bb5d26c6627628246b9b4da08bc855ecd84" translate="yes" xml:space="preserve">
          <source>In this case, the predicate &lt;code&gt;r.row(&quot;age&quot;).eq(30)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the field &lt;code&gt;age&lt;/code&gt; is equal to 30. You can write this predicate as an anonymous function instead:</source>
          <target state="translated">この場合、フィールド &lt;code&gt;age&lt;/code&gt; が30と等しい場合、述語 &lt;code&gt;r.row(&quot;age&quot;).eq(30)&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返します。代わりに、この述語を無名関数として記述できます。</target>
        </trans-unit>
        <trans-unit id="25d73c774a9ee763c700413c07c0009819356017" translate="yes" xml:space="preserve">
          <source>In this case, we would only receive notifications of fights involving a superhero. Fights between supervillains would be ignored.</source>
          <target state="translated">この場合、スーパーヒーローが絡んだ戦いの通知のみを受け取ることになります。超悪党同士の戦いは無視されます。</target>
        </trans-unit>
        <trans-unit id="895f4bd40e5222929c7fb08157cbd280981cabbc" translate="yes" xml:space="preserve">
          <source>In this case, we&amp;rsquo;re using a predicate that returns &lt;code&gt;true&lt;/code&gt; only if the length of the array in the field &lt;code&gt;posts&lt;/code&gt; is greater than two. This predicate contains two commands we haven&amp;rsquo;t seen before:</source>
          <target state="translated">この場合、フィールド &lt;code&gt;posts&lt;/code&gt; 配列の長さが2より大きい場合にのみ &lt;code&gt;true&lt;/code&gt; を返す述語を使用しています。この述語には、これまでに見たことのない2つのコマンドが含まれています。</target>
        </trans-unit>
        <trans-unit id="b372f7d94072c06cbc703d33f6f2f5eb322d59ab" translate="yes" xml:space="preserve">
          <source>In this case, you can do a pivot operation with the &lt;code&gt;group&lt;/code&gt; and &lt;code&gt;coerceTo&lt;/code&gt; commands.</source>
          <target state="translated">この場合は、あなたがピボット操作を行うことができます &lt;code&gt;group&lt;/code&gt; と &lt;code&gt;coerceTo&lt;/code&gt; コマンド。</target>
        </trans-unit>
        <trans-unit id="932455af624242d4d4e2291c9afaaa19c3951b01" translate="yes" xml:space="preserve">
          <source>In this example, we count the number of sentences over the whole data set of 25 million documents based on one of the fields. We use the following exact query which utilizes the map and sum (reduce) functions of ReQL:</source>
          <target state="translated">この例では、あるフィールドに基づいて、2500万文書のデータセット全体の文章数をカウントします。ReQLのmapとsum(reduce)関数を利用した以下の正確なクエリを使用しています。</target>
        </trans-unit>
        <trans-unit id="5a837ef70a876172728ac7037ebd677f98962f1e" translate="yes" xml:space="preserve">
          <source>In this form, the block will receive &lt;code&gt;nil&lt;/code&gt; as the first argument if there is no error. In the case of an error, the second argument will be &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">この形式では、エラーがない場合、ブロックは最初の引数として &lt;code&gt;nil&lt;/code&gt; を受け取ります。エラーの場合、2番目の引数は &lt;code&gt;nil&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="558ef6c0550627ce8d41470ac5b93bdfb82caa5b" translate="yes" xml:space="preserve">
          <source>In this guide we look at what RethinkDB uses memory for, how we can estimate the amount needed, and how to configure the size of RethinkDB&amp;rsquo;s page cache.</source>
          <target state="translated">このガイドでは、RethinkDBがメモリを使用する目的、必要な量を推定する方法、およびRethinkDBのページキャッシュのサイズを構成する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="26ea7c60ff32fa4b3e8fefeb9a9dc71af8af950d" translate="yes" xml:space="preserve">
          <source>In-depth description of the RabbitMQ model</source>
          <target state="translated">RabbitMQモデルの詳細な説明</target>
        </trans-unit>
        <trans-unit id="6c1c63beb34300ba0d002edb636ab37ff5010363" translate="yes" xml:space="preserve">
          <source>Includes scripts for building an image for Docker with RethinkDB (and other things).</source>
          <target state="translated">RethinkDBを使ってDocker用のイメージを構築するためのスクリプトが含まれています(他にもあります)。</target>
        </trans-unit>
        <trans-unit id="5714de2ace97726c8558fc98cd998b375aeaa197" translate="yes" xml:space="preserve">
          <source>Including initial values</source>
          <target state="translated">初期値を含む</target>
        </trans-unit>
        <trans-unit id="0e1b750635a22beeae4a57fea2a9554b63dc760b" translate="yes" xml:space="preserve">
          <source>Including result types</source>
          <target state="translated">結果タイプを含む</target>
        </trans-unit>
        <trans-unit id="a4dfbecd4fe9a9b9f9a34ada5173cbb0a60fca4a" translate="yes" xml:space="preserve">
          <source>Including state changes</source>
          <target state="translated">状態変化を含む</target>
        </trans-unit>
        <trans-unit id="0777c09113ddc3b67cd50cd499a4890c5b231cf0" translate="yes" xml:space="preserve">
          <source>Including the &lt;code&gt;type&lt;/code&gt; field can simplify code that handles different cases for changefeed results.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; フィールドを含めると、変更フィード結果のさまざまなケースを処理するコードを簡略化できます。</target>
        </trans-unit>
        <trans-unit id="4527e9704b753e001f3be370d293684ea1fc9ebc" translate="yes" xml:space="preserve">
          <source>Increasing the number of shards on an empty table, then using non-UUID primary keys in that table</source>
          <target state="translated">空のテーブルでシャードの数を増やし、そのテーブルでUUID以外の主キーを使用する</target>
        </trans-unit>
        <trans-unit id="ea06f91098e8943020ff7f86773b8606b3f3f7a0" translate="yes" xml:space="preserve">
          <source>Incrementing a field value</source>
          <target state="translated">フィールド値のインクリメント</target>
        </trans-unit>
        <trans-unit id="c95a80f91577f1b4f75e07f8b821d9e8943fe898" translate="yes" xml:space="preserve">
          <source>Indexes (both secondary and primary) are guaranteed to be updated by successful write operations. If an &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; operation is successful, the change will be correctly reflected in the index. (Read about RethinkDB &lt;a href=&quot;../../consistency/index&quot;&gt;Consistency guarantees&lt;/a&gt; for write operations.)</source>
          <target state="translated">インデックス（セカンダリとプライマリの両方）は、正常な書き込み操作によって更新されることが保証されています。場合は &lt;code&gt;insert&lt;/code&gt; 、 &lt;code&gt;update&lt;/code&gt; または &lt;code&gt;delete&lt;/code&gt; 操作が正常に終了し、変更が正しくインデックスに反映されます。（書き込み操作のRethinkDB &lt;a href=&quot;../../consistency/index&quot;&gt;整合性保証&lt;/a&gt;についてお読みください。）</target>
        </trans-unit>
        <trans-unit id="0391e1ecda549a694d60dcf43663ae1c4ada2850" translate="yes" xml:space="preserve">
          <source>Indexes based on &lt;em&gt;arbitrary expressions&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;任意の式に&lt;/em&gt;基づくインデックス。</target>
        </trans-unit>
        <trans-unit id="5758991da81d866c69900c0ad779d0d61274c0f9" translate="yes" xml:space="preserve">
          <source>Indexes based on &lt;strong&gt;arbitrary expressions&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;任意の式に&lt;/strong&gt;基づくインデックス。</target>
        </trans-unit>
        <trans-unit id="cfa5fc5368d198722219726949e2bbad91dda010" translate="yes" xml:space="preserve">
          <source>Indexes built with an older version of RethinkDB need to be rebuilt due to changes in the way ReQL handles indexing. See &amp;ldquo;&lt;a href=&quot;../troubleshooting/index#my-secondary-index-is-outdated&quot;&gt;My secondary index is outdated&lt;/a&gt;&amp;rdquo; for details on how to rebuild indexes.</source>
          <target state="translated">古いバージョンのRethinkDBで作成されたインデックスは、ReQLがインデックスを処理する方法が変更されたため、再構築する必要があります。「を参照してください。&lt;a href=&quot;../troubleshooting/index#my-secondary-index-is-outdated&quot;&gt;私のセカンダリインデックスが古くなっている&lt;/a&gt;インデックスを再構築する方法の詳細については、」。</target>
        </trans-unit>
        <trans-unit id="a1609b5c345fc2347a59a738ac67f1b56e06b94a" translate="yes" xml:space="preserve">
          <source>Indexes on arbitrary ReQL expressions</source>
          <target state="translated">任意のReQL式のインデックス</target>
        </trans-unit>
        <trans-unit id="9951861c21df18489a5872209655d6f9039b5e2a" translate="yes" xml:space="preserve">
          <source>Indexing</source>
          <target state="translated">Indexing</target>
        </trans-unit>
        <trans-unit id="043018f3a2dce17d498788f43e79b4e219d2416a" translate="yes" xml:space="preserve">
          <source>Information about the cluster and all operations on the cluster should be programmatically accessible.</source>
          <target state="translated">クラスタに関する情報とクラスタ上のすべての操作がプログラム上でアクセス可能である必要があります。</target>
        </trans-unit>
        <trans-unit id="5abeab7792567877161cdefc7357d62712b8d656" translate="yes" xml:space="preserve">
          <source>Information about the server:</source>
          <target state="translated">サーバーに関する情報です。</target>
        </trans-unit>
        <trans-unit id="f9ec4176c4501a5a0d6dc615f46d39b3af2491e2" translate="yes" xml:space="preserve">
          <source>Initial state (&lt;code&gt;old_val&lt;/code&gt;)</source>
          <target state="translated">初期状態（ &lt;code&gt;old_val&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="2eea430756a8711c4e7806f52c9877e92ac65847" translate="yes" xml:space="preserve">
          <source>Initial steps</source>
          <target state="translated">初期ステップ</target>
        </trans-unit>
        <trans-unit id="80505361d6e27b7e0ae3d35e93853b22f2675393" translate="yes" xml:space="preserve">
          <source>Insert a value in to an array at a given index. Returns the modified array.</source>
          <target state="translated">指定したインデックスの配列に値を挿入します。変更された配列を返します。</target>
        </trans-unit>
        <trans-unit id="d8eba2c9cbef2976d5ebdfcd90efdd1990cc6029" translate="yes" xml:space="preserve">
          <source>Insert data</source>
          <target state="translated">データの挿入</target>
        </trans-unit>
        <trans-unit id="8a47f8d72661f904ca4e211f6a9e1f8c9c152b3a" translate="yes" xml:space="preserve">
          <source>Insert documents into a table. Accepts a single document or an array of documents.</source>
          <target state="translated">テーブルに文書を挿入します。単一の文書または文書の配列を受け取ります。</target>
        </trans-unit>
        <trans-unit id="ac0b22d784ef13cc442529b0995c912c4dcd2b31" translate="yes" xml:space="preserve">
          <source>Insert returns an object that contains the following attributes:</source>
          <target state="translated">Insert は、以下の属性を含むオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="65a6ea576f847d46029b82648e01c9ba3de063ca" translate="yes" xml:space="preserve">
          <source>Insert several values in to an array at a given index. Returns the modified array.</source>
          <target state="translated">指定したインデックスの配列に複数の値を挿入します。修正された配列を返します。</target>
        </trans-unit>
        <trans-unit id="e2d0c213ca368674692f81a4b603c53678e69fc3" translate="yes" xml:space="preserve">
          <source>Inserting documents</source>
          <target state="translated">ドキュメントの挿入</target>
        </trans-unit>
        <trans-unit id="29b8d93e8ca73ad1184f047cbc37d36c670720a4" translate="yes" xml:space="preserve">
          <source>Inserting times</source>
          <target state="translated">挿入時間</target>
        </trans-unit>
        <trans-unit id="ec5593e73134544c0d12300a4f2f2bdea2b1ab11" translate="yes" xml:space="preserve">
          <source>Instagram PubSubHubbub</source>
          <target state="translated">インスタグラムPubSubHubbub</target>
        </trans-unit>
        <trans-unit id="3cc343c3aa41172c7a302bc5bb30b454ee61655b" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;http://rubyonrails.org/download/&quot;&gt;Ruby on Rails&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://rubyonrails.org/download/&quot;&gt;Ruby on Rails&lt;/a&gt;をインストールする</target>
        </trans-unit>
        <trans-unit id="eea9f12452b1397d31321dc6aae0063da202053c" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;http://www.squaremobius.net/amqp.node/&quot;&gt;amqplib&lt;/a&gt;, a RabbitMQ library for NodeJS</source>
          <target state="translated">&lt;a href=&quot;http://www.squaremobius.net/amqp.node/&quot;&gt;NodeJS&lt;/a&gt;用のRabbitMQライブラリーであるamqplib をインストールします。</target>
        </trans-unit>
        <trans-unit id="0e26578d0a3c30b7cc1f3e97e04029b42bb08700" translate="yes" xml:space="preserve">
          <source>Install RethinkDB</source>
          <target state="translated">RethinkDBのインストール</target>
        </trans-unit>
        <trans-unit id="32dacb2f0cddc3948aa2de26d4c1fa81e213e4a7" translate="yes" xml:space="preserve">
          <source>Install RethinkDB as a service for your operating system. (This document describes how to do that for both &lt;code&gt;init.d&lt;/code&gt; and &lt;code&gt;systemd&lt;/code&gt;-based Linux distributions, as well as OS X using &lt;code&gt;launchd&lt;/code&gt;. Depending on how you&amp;rsquo;ve installed RethinkDB, this may already be done for you.)</source>
          <target state="translated">オペレーティングシステムのサービスとしてRethinkDBをインストールします。（このドキュメントでは、 &lt;code&gt;init.d&lt;/code&gt; と &lt;code&gt;systemd&lt;/code&gt; ベースのLinuxディストリビューション、および &lt;code&gt;launchd&lt;/code&gt; を使用したOS Xの両方でこれを行う方法について説明します。RethinkDBのインストール方法によっては、これがすでに行われている場合があります。）</target>
        </trans-unit>
        <trans-unit id="2df8530df735797a29fd92fab10ddfe7b16aedf6" translate="yes" xml:space="preserve">
          <source>Install client drivers</source>
          <target state="translated">クライアントドライバのインストール</target>
        </trans-unit>
        <trans-unit id="01fd635cf310ad64f3e1b1f64648e6ae28c17133" translate="yes" xml:space="preserve">
          <source>Install the server</source>
          <target state="translated">サーバーのインストール</target>
        </trans-unit>
        <trans-unit id="828b11b9132aed05b6b796b08db5481e6d19dd3e" translate="yes" xml:space="preserve">
          <source>Installing RethinkDB</source>
          <target state="translated">RethinkDBのインストール</target>
        </trans-unit>
        <trans-unit id="f0813a11b71d8a038d4b80014edfc9b3a6adf95c" translate="yes" xml:space="preserve">
          <source>Installing RethinkDB client drivers</source>
          <target state="translated">RethinkDBクライアントドライバのインストール</target>
        </trans-unit>
        <trans-unit id="25698238529e36c36bbff9a1cf8864afeb7e862b" translate="yes" xml:space="preserve">
          <source>Installing from source</source>
          <target state="translated">ソースからのインストール</target>
        </trans-unit>
        <trans-unit id="66166bdf5a5269039901f352cb2db046575a54fa" translate="yes" xml:space="preserve">
          <source>Installing on other platforms</source>
          <target state="translated">他のプラットフォームへのインストール</target>
        </trans-unit>
        <trans-unit id="333df51781cc357460f2c635fe316602326864a3" translate="yes" xml:space="preserve">
          <source>Instance administration</source>
          <target state="translated">インスタンス管理</target>
        </trans-unit>
        <trans-unit id="4319f262417314ad390a0bffe2a7838f08952aea" translate="yes" xml:space="preserve">
          <source>Instead of using the &lt;code&gt;default&lt;/code&gt; optional argument to &lt;code&gt;filter&lt;/code&gt;, we have to use default values on the fields within the &lt;code&gt;or&lt;/code&gt; clause. Why? If the field on the left side of the &lt;code&gt;or&lt;/code&gt; clause is missing from a document&amp;mdash;in this case, if the user doesn&amp;rsquo;t have a &lt;code&gt;role&lt;/code&gt; field&amp;mdash;the predicate will generate an error, and will return &lt;code&gt;false&lt;/code&gt; (or the value the &lt;code&gt;default&lt;/code&gt; argument is set to) without evaluating the right side of the &lt;code&gt;or&lt;/code&gt;. By using &lt;code&gt;.default(false)&lt;/code&gt; on the fields, each side of the &lt;code&gt;or&lt;/code&gt; will evaluate to either the field&amp;rsquo;s value or &lt;code&gt;false&lt;/code&gt; if the field doesn&amp;rsquo;t exist.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; に &lt;code&gt;default&lt;/code&gt; オプション引数を使用する代わりに、 &lt;code&gt;or&lt;/code&gt; 句内のフィールドにデフォルト値を使用する必要があります。どうして？ &lt;code&gt;or&lt;/code&gt; 句の左側のフィールドがドキュメントにない場合（この場合、ユーザーに &lt;code&gt;role&lt;/code&gt; フィールドがない場合）、述語はエラーを生成し、 &lt;code&gt;false&lt;/code&gt; （または &lt;code&gt;default&lt;/code&gt; 引数の値）を返しますに設定されます） &lt;code&gt;or&lt;/code&gt; 右側を評価しません。フィールドで &lt;code&gt;.default(false)&lt;/code&gt; を使用することにより、 &lt;code&gt;or&lt;/code&gt; 各サイドは、フィールドの値か、フィールドが存在しない場合は &lt;code&gt;false&lt;/code&gt; のいずれかに評価されます。</target>
        </trans-unit>
        <trans-unit id="edcb8acb99853d0a5ef2bb5e68e942595143f90e" translate="yes" xml:space="preserve">
          <source>Integrating Elasticsearch</source>
          <target state="translated">Elasticsearchの統合</target>
        </trans-unit>
        <trans-unit id="8dbfed65b5b9df99b02a2d3fc9690365cea617b8" translate="yes" xml:space="preserve">
          <source>Integrating RabbitMQ</source>
          <target state="translated">RabbitMQの統合</target>
        </trans-unit>
        <trans-unit id="081430b73c2092922b1df2dd3a411dc9f24c47e1" translate="yes" xml:space="preserve">
          <source>Integrating RethinkDB with RabbitMQ</source>
          <target state="translated">RethinkDBとRabbitMQの統合</target>
        </trans-unit>
        <trans-unit id="a7881cac6e64abca5eafd172df6eb31fe0b84c88" translate="yes" xml:space="preserve">
          <source>Integrations</source>
          <target state="translated">Integrations</target>
        </trans-unit>
        <trans-unit id="796755669082ff5596709d22781a79a1f59e5527" translate="yes" xml:space="preserve">
          <source>Intel Xeon E5-2680 v2 CPU 2.8 GHz (10 cores)</source>
          <target state="translated">インテル Xeon E5-2680 v2 CPU 2.8 GHz (10 コア)</target>
        </trans-unit>
        <trans-unit id="873fde3ef086eae1a20c3748b3a65e16d5a254b8" translate="yes" xml:space="preserve">
          <source>Internal metadata</source>
          <target state="translated">内部メタデータ</target>
        </trans-unit>
        <trans-unit id="cc2de5d3fe42b60664127c2656b7a7a0b43b73c3" translate="yes" xml:space="preserve">
          <source>Internally this approach is more difficult to implement than the more commonly used consistent hashing, but it has significant advantages because it allows for an efficient implementation of range queries.</source>
          <target state="translated">内部的には、このアプローチは一般的に使用されている一貫性のあるハッシュよりも実装が難しいですが、範囲問い合わせの効率的な実装が可能になるため、大きな利点があります。</target>
        </trans-unit>
        <trans-unit id="110fc7f6ed7d04de80c4765c8e43e4f598bb28eb" translate="yes" xml:space="preserve">
          <source>Internally, compound indexes and simple indexes are the same type of index in RethinkDB; compound indexes are simply a special case of regular index that returns an array rather than a single value.</source>
          <target state="translated">内部的には、複合インデックスと単純インデックスはRethinkDBでは同じタイプのインデックスであり、複合インデックスは単一の値ではなく配列を返す通常のインデックスの特殊なケースに過ぎません。</target>
        </trans-unit>
        <trans-unit id="016355aa2cdbc678752876dfc6bd8a8f0e33fcf6" translate="yes" xml:space="preserve">
          <source>Internally, queries are represented as trees. A query of:</source>
          <target state="translated">内部的には、クエリはツリーとして表現されます。のクエリ。</target>
        </trans-unit>
        <trans-unit id="3c0f8a211170bbe9fd74bfe3fb9d32dca2499482" translate="yes" xml:space="preserve">
          <source>Intersect two arrays returning values that occur in both of them as a set (an array with distinct values).</source>
          <target state="translated">2 つの配列を交差させ、その両方に含まれる値をセットとして返します(異なる値を持つ配列)。</target>
        </trans-unit>
        <trans-unit id="1df374766527b0942d46def76ff145106af94c20" translate="yes" xml:space="preserve">
          <source>Introduction to Joins</source>
          <target state="translated">ジョインズの紹介</target>
        </trans-unit>
        <trans-unit id="886e399859534e91e45eb866e28bb27d1c8ebef9" translate="yes" xml:space="preserve">
          <source>Introduction to ReQL</source>
          <target state="translated">ReQLの紹介</target>
        </trans-unit>
        <trans-unit id="c861239c228b921387ace53d3216eff7ae8989a1" translate="yes" xml:space="preserve">
          <source>Introduction to map-reduce</source>
          <target state="translated">マップリダクションの紹介</target>
        </trans-unit>
        <trans-unit id="abbf10e2c10be16cbb5de69a08a9647bc4b8886f" translate="yes" xml:space="preserve">
          <source>Invoking &lt;code&gt;tableCreate&lt;/code&gt; without specifying a database using &lt;a href=&quot;../db/index&quot;&gt;db&lt;/a&gt; creates a table in the database specified in &lt;a href=&quot;../connect/index&quot;&gt;connect&lt;/a&gt;, or &lt;code&gt;test&lt;/code&gt; if no database was specified.</source>
          <target state="translated">&lt;a href=&quot;../db/index&quot;&gt;db&lt;/a&gt;を使用してデータベースを指定せずに &lt;code&gt;tableCreate&lt;/code&gt; を呼び出すと、&lt;a href=&quot;../connect/index&quot;&gt;connect&lt;/a&gt;で指定されたデータベースにテーブルが作成されるか、データベースが指定されていないかどうかが &lt;code&gt;test&lt;/code&gt; されます。</target>
        </trans-unit>
        <trans-unit id="2e984013c5e5d72e6ebe438bef7ce2e2e4fb1ca3" translate="yes" xml:space="preserve">
          <source>Invoking this functionality automatically without the user&amp;rsquo;s request is the next layer in this hierarchy. Currently the user can control the system via the web UI, manually via the command line, or by writing scripts to call the command line tools to perform server automation.</source>
          <target state="translated">ユーザーの要求なしにこの機能を自動的に呼び出すことが、この階層の次のレイヤーです。現在、ユーザーはWeb UIを介して、コマンドラインを介して手動で、またはコマンドラインツールを呼び出してサーバーの自動化を実行するスクリプトを作成することにより、システムを制御できます。</target>
        </trans-unit>
        <trans-unit id="3648c9e586da9da329d881f9456ad5f94947161e" translate="yes" xml:space="preserve">
          <source>Is RethinkDB immediately or eventually consistent?</source>
          <target state="translated">RethinkDBはすぐに、あるいは最終的には一貫性があるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="4345620dde11a944cdd9bd27934184533e094c4e" translate="yes" xml:space="preserve">
          <source>Is preferable to this query:</source>
          <target state="translated">このクエリが好ましいです。</target>
        </trans-unit>
        <trans-unit id="2425127c8709646f155c07fc3ff2d5c6988816eb" translate="yes" xml:space="preserve">
          <source>Is the crash reproducible, and if so, under what conditions?</source>
          <target state="translated">墜落は再現可能か、再現可能であれば、どのような条件で?</target>
        </trans-unit>
        <trans-unit id="6e1cb81d9e26a4f9b860dc2a2fd2ba2b29daee20" translate="yes" xml:space="preserve">
          <source>Issue types</source>
          <target state="translated">課題の種類</target>
        </trans-unit>
        <trans-unit id="f03aac29f543ef0de44fcdf77a29c785765deb8a" translate="yes" xml:space="preserve">
          <source>Issues added to the table follow the same structure.</source>
          <target state="translated">テーブルに追加された問題は、同じ構造に従います。</target>
        </trans-unit>
        <trans-unit id="b48c8924e7f87f4c696bb70c6d06139c134e96ed" translate="yes" xml:space="preserve">
          <source>It also returns results ordered from most relevant to least, not worrying about small differences. Say you want to ask the question: &amp;ldquo;What documents best match the phrase &amp;lsquo;Holy guacamole, Batman&amp;rsquo;?&amp;rdquo; If the hoped-for guacamole reference isn&amp;rsquo;t found, a full-text search should reply with documents containing good matches like &amp;ldquo;Holy smokes, Batman!&amp;rdquo; and &amp;ldquo;Holy armadillo, Batman!&amp;rdquo; In short, you should be using a full-text search database like Elasticsearch if you find yourself writing convoluted regular expressions to grep through big text fields.</source>
          <target state="translated">また、小さな違いを気にせずに、最も関連性の高いものから最も関連性の低いものの順に結果を返します。次の質問をしたいとします。「フレーズ「聖ワカモレ、バットマン」に最も一致するのはどのドキュメントですか？」期待するワカモレの参照が見つからない場合は、全文検索で「Holy smokes、Batman！」のような適切な一致を含むドキュメントを返信する必要があります。そして「聖なるアルマジロ、バットマン！」要するに、大きなテキストフィールドをgrepする複雑な正規表現を作成している場合は、Elasticsearchなどの全文検索データベースを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0308bae19734e53e8eeb8fc72417975f82b4d057" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a common pattern in some query interfaces to &amp;ldquo;build&amp;rdquo; queries programmatically by instantiating a query object, calling it several times in succession to add query commands, then calling the execution command. This lets you dynamically change the query based on conditions at runtime. You might expect to do this in ReQL like so:</source>
          <target state="translated">一部のクエリインターフェイスでは、クエリオブジェクトをインスタンス化し、連続して数回呼び出してクエリコマンドを追加し、次に実行コマンドを呼び出すことにより、クエリを &quot;ビルド&quot;するのが一般的なパターンです。これにより、実行時の条件に基づいてクエリを動的に変更できます。あなたは次のようにReQLでこれを行うと期待するかもしれません：</target>
        </trans-unit>
        <trans-unit id="43d263475c984dca5d502747655b9f006256096e" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a common task for web applications to accept file uploads from users; with RethinkDB you can store these files directly in the database.</source>
          <target state="translated">Webアプリケーションがユーザーからのファイルのアップロードを受け入れることは一般的なタスクです。RethinkDBを使用すると、これらのファイルをデータベースに直接保存できます。</target>
        </trans-unit>
        <trans-unit id="4df14c095e2e2a042484762e7fae65618dd20e3e" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s a natural and convenient way to express queries.</source>
          <target state="translated">これは、クエリを表現するための自然で便利な方法です。</target>
        </trans-unit>
        <trans-unit id="cd366d6aeb93bc8ec97f59c94513521c61f160c9" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s also possible for this error to be caused by a circular reference, where a document inadvertently contains itself:</source>
          <target state="translated">このエラーは循環参照が原因で発生する可能性もあります。この場合、ドキュメントに誤って自身が含まれています。</target>
        </trans-unit>
        <trans-unit id="7e119ec402d3bfe01c9d4e90058826653b70f9ef" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s easy to use RethinkDB with Ruby on Rails. This guide assumes some familiarity with Rails and ActiveRecord. We&amp;rsquo;ll be using &lt;a href=&quot;http://nobrainer.io&quot;&gt;NoBrainer&lt;/a&gt;&amp;mdash;a RethinkDB ORM, which is an almost drop-in replacement for ActiveRecord.</source>
          <target state="translated">Ruby on RailsでRethinkDBを使用するのは簡単です。このガイドは、RailsおよびActiveRecordにある程度精通していることを前提としています。ここでは、NoBrainer を使用します&lt;a href=&quot;http://nobrainer.io&quot;&gt;。RethinkDBORM&lt;/a&gt;は、ActiveRecordのほぼ完全な代替品です。</target>
        </trans-unit>
        <trans-unit id="30747a6d28762ec1343765ae06483c010e675643" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s possible to increment a field value in a document&amp;mdash;for example, a counter&amp;mdash;in one step on the server.</source>
          <target state="translated">サーバー上の1つのステップで、ドキュメント（カウンターなど）のフィールド値をインクリメントすることができます。</target>
        </trans-unit>
        <trans-unit id="b1c38f29865ef6022444784351ea37ca314feb8c" translate="yes" xml:space="preserve">
          <source>JOINS</source>
          <target state="translated">JOINS</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="be4521311d0f547ae040a777490a7694a57f7b10" translate="yes" xml:space="preserve">
          <source>JSON files are preferred to CSV files, as JSON can represent RethinkDB documents fully. If you&amp;rsquo;re importing from a CSV file, you should include a header row with the field names, or use the &lt;code&gt;--no-header&lt;/code&gt; option with the &lt;code&gt;--custom-header&lt;/code&gt; option to specify the names.</source>
          <target state="translated">JSONはRethinkDBドキュメントを完全に表すことができるため、JSONファイルはCSVファイルよりも優先されます。CSVファイルからインポートする場合は、フィールド名をヘッダー行を含める、または使用する必要があります &lt;code&gt;--no-header&lt;/code&gt; とオプションを &lt;code&gt;--custom-header&lt;/code&gt; 名を指定するオプション。</target>
        </trans-unit>
        <trans-unit id="e027e57610f85225767aafbbf23fed7457e55828" translate="yes" xml:space="preserve">
          <source>Java</source>
          <target state="translated">Java</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="2150136b161bb7f3850c20f55af98f5e50de8133" translate="yes" xml:space="preserve">
          <source>JavaScript ORM for RethinkDB.</source>
          <target state="translated">RethinkDB用のJavaScript ORMです。</target>
        </trans-unit>
        <trans-unit id="2a15a5b5017d006df320fa6b8ac5c83f39e3e070" translate="yes" xml:space="preserve">
          <source>JavaScript ReQL command reference</source>
          <target state="translated">JavaScript ReQLコマンド参照</target>
        </trans-unit>
        <trans-unit id="12bfad731fd2da7fcf4e3ba16201bc4b30c542f9" translate="yes" xml:space="preserve">
          <source>JavaScript driver with Node.js</source>
          <target state="translated">Node.jsを使ったJavaScriptドライバ</target>
        </trans-unit>
        <trans-unit id="c5b67826a8b2b2a28d0ea2896c58630359061683" translate="yes" xml:space="preserve">
          <source>JavaScript has no native iterator, but ReQL implements an &lt;a href=&quot;../../api/javascript/each/index&quot;&gt;each&lt;/a&gt; command similar to &lt;a href=&quot;http://api.jquery.com/each/&quot;&gt;jQuery&lt;/a&gt;&amp;rsquo;s.</source>
          <target state="translated">JavaScriptにはネイティブイテレータはありませんが、ReQL は&lt;a href=&quot;http://api.jquery.com/each/&quot;&gt;jQuery&lt;/a&gt;と同様の&lt;a href=&quot;../../api/javascript/each/index&quot;&gt;各&lt;/a&gt;コマンドを実装します。</target>
        </trans-unit>
        <trans-unit id="437736fdb5bb707abdc048483193c86b9a99983e" translate="yes" xml:space="preserve">
          <source>Jobs</source>
          <target state="translated">Jobs</target>
        </trans-unit>
        <trans-unit id="7bb6a0357b0f1772fd50b7f8539ec577ed6f6748" translate="yes" xml:space="preserve">
          <source>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. &lt;code&gt;eqJoin&lt;/code&gt; is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field&amp;rsquo;s value exists in the specified index on the right-hand side.</source>
          <target state="translated">左側のシーケンスのフィールドまたは関数を使用してテーブルを結合し、右側のテーブルの主キーまたはセカンダリインデックスに一致させます。 &lt;code&gt;eqJoin&lt;/code&gt; は、他のReQL結合タイプよりも効率的で、はるかに高速に動作します。結果セット内のドキュメントは、左側と右側のドキュメントのペアで構成され、左側のフィールドが存在し、nullでなく、そのフィールドの値を持つエントリが右側の指定されたインデックスに存在する場合に一致します。ハンドサイド。</target>
        </trans-unit>
        <trans-unit id="442e9473c8c4abf9dfcae036af694232b5434ef9" translate="yes" xml:space="preserve">
          <source>Join these tables using &lt;code&gt;gameId&lt;/code&gt; on the player table and &lt;code&gt;id&lt;/code&gt; on the games table:</source>
          <target state="translated">playerテーブルで &lt;code&gt;gameId&lt;/code&gt; を、gamesテーブルで &lt;code&gt;id&lt;/code&gt; を使用して、これらのテーブルを結合します。</target>
        </trans-unit>
        <trans-unit id="3b2597a987d6f7990bcc2736d74772e6aaab9771" translate="yes" xml:space="preserve">
          <source>Joining multiple changefeeds into one</source>
          <target state="translated">複数のチェンジフィードを1つに結合</target>
        </trans-unit>
        <trans-unit id="36cb6826dbbbacc9f0915d9e44ccb82925b04c72" translate="yes" xml:space="preserve">
          <source>Joins</source>
          <target state="translated">Joins</target>
        </trans-unit>
        <trans-unit id="614248f657c4cd869544f362220155e71e70a6d3" translate="yes" xml:space="preserve">
          <source>Jump into the &lt;a href=&quot;../../cookbook/javascript/index&quot;&gt;cookbook&lt;/a&gt; and browse through dozens of examples of common RethinkDB queries.</source>
          <target state="translated">飛び込む&lt;a href=&quot;../../cookbook/javascript/index&quot;&gt;料理&lt;/a&gt;と共通RethinkDBクエリの例の数十を閲覧。</target>
        </trans-unit>
        <trans-unit id="cadea68a130fb4da345a2bd00c5bc5ec1fdab118" translate="yes" xml:space="preserve">
          <source>Jump into the &lt;a href=&quot;../cookbook/javascript/index&quot;&gt;cookbook&lt;/a&gt; and see dozens of examples of common RethinkDB queries.</source>
          <target state="translated">飛び込む&lt;a href=&quot;../cookbook/javascript/index&quot;&gt;料理&lt;/a&gt;と共通RethinkDBクエリの例の数十を参照してください。</target>
        </trans-unit>
        <trans-unit id="815740848353ae01fefc9bf1699f34710f065f60" translate="yes" xml:space="preserve">
          <source>Just in case you needed another calculator, ReQL can do that too!</source>
          <target state="translated">念のため、別の電卓が必要な場合は、ReQLでも可能です。</target>
        </trans-unit>
        <trans-unit id="df1556914f9d65ff6bb135e1e34b460926c8b594" translate="yes" xml:space="preserve">
          <source>Just like other ReQL indexes, you can create an index using an anonymous function rather than a simple field name, as well as create multi indexes by using the &lt;code&gt;multi&lt;/code&gt; flag with &lt;code&gt;geo&lt;/code&gt;. Read the &lt;a href=&quot;../../../api/javascript/index_create/index&quot;&gt;indexCreate&lt;/a&gt; API documentation for more details.</source>
          <target state="translated">他のReQLインデックスと同様に、単純なフィールド名ではなく無名関数を使用してインデックスを作成したり、 &lt;code&gt;geo&lt;/code&gt; で &lt;code&gt;multi&lt;/code&gt; フラグを使用してマルチインデックスを作成したりできます。詳細については、&lt;a href=&quot;../../../api/javascript/index_create/index&quot;&gt;indexCreate&lt;/a&gt; APIのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="2d5bfabcb6bca6d271e3af0b81998719a3d8e256" translate="yes" xml:space="preserve">
          <source>Koa</source>
          <target state="translated">Koa</target>
        </trans-unit>
        <trans-unit id="0cd80e0b1a0d9ca537de8880c046d1db4c5bba77" translate="yes" xml:space="preserve">
          <source>Koa middleware that automatically manages connections via a connection pool.</source>
          <target state="translated">コネクションプールを介して接続を自動的に管理するKoaミドルウェア。</target>
        </trans-unit>
        <trans-unit id="26fad106569fcec275e401a5f8f426bcdc4c1a5d" translate="yes" xml:space="preserve">
          <source>Lambda functions in RethinkDB</source>
          <target state="translated">RethinkDBのLambda関数</target>
        </trans-unit>
        <trans-unit id="b3efedc3036d62c6e9695305d32c2033a97f6fed" translate="yes" xml:space="preserve">
          <source>Larger documents of more than 250 bytes are stored in blocks of their own. Documents up to 4 KB use a single block; larger documents are split across multiple blocks as needed.</source>
          <target state="translated">250バイト以上の大きな文書は、それぞれのブロックに格納されます。4 KB までの文書は 1 つのブロックを使用しますが、それ以上の文書は必要に応じて複数のブロックに分割されます。</target>
        </trans-unit>
        <trans-unit id="5d9c8282669843d174d46b5ef2c7b930b7ff91c0" translate="yes" xml:space="preserve">
          <source>Lastly, we call &lt;code&gt;run(connection, callback)&lt;/code&gt; in order to send the query to the server.</source>
          <target state="translated">最後に、クエリをサーバーに送信するために &lt;code&gt;run(connection, callback)&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="b593864b68f106789807303bd0cf74356e8e4ff9" translate="yes" xml:space="preserve">
          <source>Latency is also an important metric to measure when testing performance. We found that in a 16-node cluster, the 95th percentile for Workload A query latencies is 26ms.</source>
          <target state="translated">レイテンシは、パフォーマンスをテストする際に測定する重要な指標でもあります。16ノードのクラスタでは、ワークロードAのクエリのレイテンシの95パーセンタイルは26msであることがわかりました。</target>
        </trans-unit>
        <trans-unit id="ec18da38841bcc22e0215d72fe5f8195fe0cb024" translate="yes" xml:space="preserve">
          <source>Launching an instance</source>
          <target state="translated">インスタンスの起動</target>
        </trans-unit>
        <trans-unit id="cde4c57577148cb7290eeb61254becb94294e003" translate="yes" xml:space="preserve">
          <source>Lazily iterate over a cursor, array, or feed one element at a time. &lt;code&gt;eachAsync&lt;/code&gt; always returns a promise that will be resolved once all rows are returned.</source>
          <target state="translated">カーソル、配列を遅延して反復するか、一度に1つの要素をフィードします。 &lt;code&gt;eachAsync&lt;/code&gt; は常に、すべての行が返されると解決されるpromiseを返します。</target>
        </trans-unit>
        <trans-unit id="7580d3d26925e442143c501474aa5ee2f4ba2239" translate="yes" xml:space="preserve">
          <source>Lazily iterate over the result set one element at a time. The second callback is optional and is called when the iteration stops (when there are no more rows or when the callback returns &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">結果セットを一度に1つの要素で遅延反復します。2番目のコールバックはオプションであり、反復が停止したとき（行がなくなったとき、またはコールバックが &lt;code&gt;false&lt;/code&gt; を返したとき）に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="882d7824546e260d7aecb582ca23a9e9525d35d8" translate="yes" xml:space="preserve">
          <source>Laziness</source>
          <target state="translated">Laziness</target>
        </trans-unit>
        <trans-unit id="119a27138fe3d276ec8a407746eb7af54a9639ef" translate="yes" xml:space="preserve">
          <source>Leap-seconds aren&amp;rsquo;t well-supported right now: &lt;code&gt;2012-06-30T23:59:60&lt;/code&gt; and &lt;code&gt;2012-07-01T00:00:00&lt;/code&gt; parse to the same time.</source>
          <target state="translated">現在、うるう秒は十分にサポートされていません &lt;code&gt;2012-06-30T23:59:60&lt;/code&gt; と &lt;code&gt;2012-07-01T00:00:00&lt;/code&gt; は、同時に解析されます。</target>
        </trans-unit>
        <trans-unit id="7352c39338b0f7491547ec046eb62e590d5666fa" translate="yes" xml:space="preserve">
          <source>Learn about changefeeds, RethinkDB's realtime push technology, and how it can be used to build and scale realtime apps.</source>
          <target state="translated">Changefeeds、RethinkDBのリアルタイムプッシュ技術、リアルタイムアプリの構築とスケーリングにどのように活用できるかをご紹介します。</target>
        </trans-unit>
        <trans-unit id="053b8690ab05d3886d2e0a4df01379bf8f5f5878" translate="yes" xml:space="preserve">
          <source>Learn how to deploy RethinkDB on cloud services like Compose.io, AWS, and others.</source>
          <target state="translated">Compose.ioやAWSなどのクラウドサービスにRethinkDBを導入する方法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="4008d50d045acf61774875510316c96f31310945" translate="yes" xml:space="preserve">
          <source>Learn how to use &lt;a href=&quot;../../map-reduce/index&quot;&gt;map-reduce&lt;/a&gt; in RethinkDB.</source>
          <target state="translated">RethinkDBで&lt;a href=&quot;../../map-reduce/index&quot;&gt;map-reduce&lt;/a&gt;を使用する方法を学びます。</target>
        </trans-unit>
        <trans-unit id="e7a12b247f8e4dd853fb7027039428b2379a21df" translate="yes" xml:space="preserve">
          <source>Learn how to use &lt;a href=&quot;../../table-joins/index&quot;&gt;table joins&lt;/a&gt; in RethinkDB.</source>
          <target state="translated">RethinkDBで&lt;a href=&quot;../../table-joins/index&quot;&gt;テーブル結合&lt;/a&gt;を使用する方法を学びます。</target>
        </trans-unit>
        <trans-unit id="38439358cead9a9ddb8011466b2b2f821423863f" translate="yes" xml:space="preserve">
          <source>Learn how to use &lt;a href=&quot;../map-reduce/index&quot;&gt;map-reduce&lt;/a&gt; in RethinkDB.</source>
          <target state="translated">RethinkDBで&lt;a href=&quot;../map-reduce/index&quot;&gt;map-reduce&lt;/a&gt;を使用する方法を学びます。</target>
        </trans-unit>
        <trans-unit id="9211e3e0cf73e7b17435ad61921079b0ccf56943" translate="yes" xml:space="preserve">
          <source>Learn how to use &lt;a href=&quot;../secondary-indexes/javascript/index&quot;&gt;primary and secondary indexes&lt;/a&gt; in RethinkDB.</source>
          <target state="translated">RethinkDBで&lt;a href=&quot;../secondary-indexes/javascript/index&quot;&gt;プライマリインデックスとセカンダリインデックス&lt;/a&gt;を使用する方法を学びます。</target>
        </trans-unit>
        <trans-unit id="46618e390b1b640a19b5fe7e820ff17c339e0144" translate="yes" xml:space="preserve">
          <source>Learn how to use &lt;a href=&quot;../table-joins/index&quot;&gt;table joins&lt;/a&gt; in RethinkDB.</source>
          <target state="translated">RethinkDBで&lt;a href=&quot;../table-joins/index&quot;&gt;テーブル結合&lt;/a&gt;を使用する方法を学びます。</target>
        </trans-unit>
        <trans-unit id="f065a72b19aac97d11c858d3ee474f834c0ea4e9" translate="yes" xml:space="preserve">
          <source>Learn how to use GeoJSON features to build location-aware apps in RethinkDB.</source>
          <target state="translated">GeoJSON機能を使ってRethinkDBで位置情報アプリを構築する方法をご紹介します。</target>
        </trans-unit>
        <trans-unit id="824d76b124e6289f372e2ff6bcba91e8939343bd" translate="yes" xml:space="preserve">
          <source>Learn more</source>
          <target state="translated">詳細はこちら</target>
        </trans-unit>
        <trans-unit id="7a058f790976caa297b4022af937873c407c3337" translate="yes" xml:space="preserve">
          <source>Learn more about how RethinkDB can efficiently retrieve documents with &lt;a href=&quot;../../secondary-indexes/javascript/index&quot;&gt;secondary indexes&lt;/a&gt;.</source>
          <target state="translated">RethinkDBが&lt;a href=&quot;../../secondary-indexes/javascript/index&quot;&gt;セカンダリインデックスを&lt;/a&gt;持つドキュメントを効率的に取得する方法の詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="89b463fdfab8c2b3e899da5b283265547e388a16" translate="yes" xml:space="preserve">
          <source>Learning the language is no different from learning any other library.</source>
          <target state="translated">言語を学ぶことは、他の図書館で学ぶことと何ら変わりません。</target>
        </trans-unit>
        <trans-unit id="3b20a7997c63ce3054fd7d30d35de4678173fe84" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s explore the advantages and disadvantages of each approach. We&amp;rsquo;ll use a simple blog database that stores information about authors and their posts to demonstrate them.</source>
          <target state="translated">それぞれのアプローチの長所と短所を調べてみましょう。著者とその投稿に関する情報を格納する簡単なブログデータベースを使用して、それらを実証します。</target>
        </trans-unit>
        <trans-unit id="0a3374d1d23dd959122583511673592b311245c8" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s filter based on the nested field &lt;code&gt;email&lt;/code&gt;:</source>
          <target state="translated">ネストされたフィールド &lt;code&gt;email&lt;/code&gt; に基づいてフィルターしましょう：</target>
        </trans-unit>
        <trans-unit id="cb7b4f56da03ec0ec2ef157f49777af0230bdeb9" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s find the most influential GitHub users who showed interest in RethinkDB. First, let&amp;rsquo;s grab the list of RethinkDB stargazers:</source>
          <target state="translated">RethinkDBに関心を示した、最も影響力のあるGitHubユーザーを見つけましょう。最初に、RethinkDBスターゲイザーのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="7c2b1f805ab05c4e6512aa8198d873b9d8e69683" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s follow the processing of a simple query. (This example uses JavaScript, but the commands are virtually identical in other languages.)</source>
          <target state="translated">簡単なクエリの処理を見てみましょう。（この例ではJavaScriptを使用していますが、コマンドは他の言語でも実質的に同じです。）</target>
        </trans-unit>
        <trans-unit id="e6b2a5e6f45fc67a9ecc8d1de778247a2bb0f236" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s insert three new documents into the &lt;code&gt;authors&lt;/code&gt; table:</source>
          <target state="translated">3つの新しいドキュメントを &lt;code&gt;authors&lt;/code&gt; テーブルに挿入しましょう。</target>
        </trans-unit>
        <trans-unit id="b741c7ad37ec13a7b2f8b15575a0343bd5b1de26" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at these concepts in more detail.</source>
          <target state="translated">これらの概念をさらに詳しく見てみましょう。</target>
        </trans-unit>
        <trans-unit id="ef26fdd5241f22380a2542ba5b766049445eb40d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we have another table &lt;code&gt;authors&lt;/code&gt;, and we&amp;rsquo;d like to get a list of authors whose last names are also in the &lt;code&gt;users&lt;/code&gt; table we&amp;rsquo;ve seen before. We can do it by combining two queries:</source>
          <target state="translated">別のテーブル &lt;code&gt;authors&lt;/code&gt; &lt;code&gt;users&lt;/code&gt; ます。前に見たusersテーブルにも姓が含まれている作成者のリストを取得するとします。次の2つのクエリを組み合わせて実行できます。</target>
        </trans-unit>
        <trans-unit id="b7ff567a62fcc49849955f0084cafdf6e60d5359" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say we want to publish the teaming up between Batman, Superman and the Joker:</source>
          <target state="translated">バットマン、スーパーマン、ジョーカーのチームを公開したいとしましょう：</target>
        </trans-unit>
        <trans-unit id="4c97142a03d1740d9845e909927ca5b45579f24c" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s see how we can use joins in RethinkDB to query data based on &lt;strong&gt;one to many&lt;/strong&gt;, and &lt;strong&gt;many to many&lt;/strong&gt; relations.</source>
          <target state="translated">RethinkDBで結合を使用&lt;strong&gt;して&lt;/strong&gt;、&lt;strong&gt;1対多&lt;/strong&gt;、および&lt;strong&gt;多対多の&lt;/strong&gt;関係に基づいてデータをクエリする方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="b9a6c351ade4cff6a3547f0d48de14100d80140b" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s start with a simple example. RethinkDB supports server-side JavaScript evaluation using the embedded V8 engine (sandboxed within outside processes, of course):</source>
          <target state="translated">簡単な例から始めましょう。RethinkDBは、組み込みのV8エンジン（もちろん、外部プロセス内でサンドボックス化されています）を使用したサーバー側のJavaScript評価をサポートしています。</target>
        </trans-unit>
        <trans-unit id="49a17718af97d847a464ec714b54c94d0f64ebbe" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s suppose we&amp;rsquo;ve created two tables: &lt;code&gt;employees&lt;/code&gt; and &lt;code&gt;companies&lt;/code&gt;. We&amp;rsquo;ll use these tables to model the notion of people working for organizations (each organization has multiple people working for it, but any given person works at a single organization). Here&amp;rsquo;s an example document in the &lt;code&gt;employees&lt;/code&gt; table:</source>
          <target state="translated">&lt;code&gt;employees&lt;/code&gt; と &lt;code&gt;companies&lt;/code&gt; 2つのテーブルを作成したとしましょう。これらのテーブルを使用して、組織で働く人々の概念をモデル化します（各組織には複数の人々が働いていますが、特定の人物は1つの組織で働いています）。以下は、 &lt;code&gt;employees&lt;/code&gt; テーブルのドキュメントの例です。</target>
        </trans-unit>
        <trans-unit id="b79e2ec29148ce71c9f97e43dc0f1bb9de49bd76" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try something very simple &amp;mdash; accessing a website. Type the following command in the Data Explorer and hit &amp;lsquo;Run&amp;rsquo; (alternatively, you can run it from a RethinkDB driver):</source>
          <target state="translated">非常にシンプルなものを試してみましょう。Webサイトにアクセスすることです。データエクスプローラーで次のコマンドを入力し、[実行]をクリックします（または、RethinkDBドライバーから実行できます）。</target>
        </trans-unit>
        <trans-unit id="d523c71f4437b42b411bb4d2f3290905dc21ba48" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s try to retrieve the document where the &lt;code&gt;name&lt;/code&gt; attribute is set to &lt;code&gt;William Adama&lt;/code&gt;. We can use a condition to filter the documents by chaining a &lt;code&gt;filter&lt;/code&gt; command to the end of the query:</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 属性が &lt;code&gt;William Adama&lt;/code&gt; に設定されているドキュメントを取得してみましょう。条件を使用して、 &lt;code&gt;filter&lt;/code&gt; コマンドをクエリの最後にチェーンすることにより、ドキュメントをフィルター処理できます。</target>
        </trans-unit>
        <trans-unit id="74167a956b2c180d4d5a4db633dfab9b54f1b3ee" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s update all documents in the &lt;code&gt;authors&lt;/code&gt; table and add a &lt;code&gt;type&lt;/code&gt; field to note that every author so far is fictional:</source>
          <target state="translated">&lt;code&gt;authors&lt;/code&gt; テーブルのすべてのドキュメントを更新し、 &lt;code&gt;type&lt;/code&gt; フィールドを追加して、これまでのすべての作成者が架空のものであることを確認しましょう。</target>
        </trans-unit>
        <trans-unit id="e46cc597dcd23c00f763aa1f360f40229ca58a86" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s update our stargazer data with this additional information:</source>
          <target state="translated">この追加情報でstargazerデータを更新しましょう：</target>
        </trans-unit>
        <trans-unit id="5cc9d86c4961df923fc41b3ea88b4072aa84010d" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s use &lt;code&gt;filter&lt;/code&gt; again to retrieve all authors who have more than two posts:</source>
          <target state="translated">もう一度 &lt;code&gt;filter&lt;/code&gt; 使用して、3つ以上の投稿を持つすべての著者を取得します。</target>
        </trans-unit>
        <trans-unit id="0bbb0ddb2e3183cfe93ee6ec919cd561d521a487" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s write a script that listens for changes in the RethinkDB server and pushes them to RabbitMQ.</source>
          <target state="translated">RethinkDBサーバーでの変更をリッスンし、RabbitMQにプッシュするスクリプトを作成してみましょう。</target>
        </trans-unit>
        <trans-unit id="332e9d887845f15f8edb7f47a27c9feaa5e64473" translate="yes" xml:space="preserve">
          <source>Lets you install RethinkDB using Vagrant.</source>
          <target state="translated">Vagrantを使ってRethinkDBをインストールします。</target>
        </trans-unit>
        <trans-unit id="faa75a36abc1bfd1fe97a7d7bec24659e766b29c" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.</source>
          <target state="translated">クリエイティブ・コモンズ 表示-継承 3.0 非移植ライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="e3891b7e1579150dc791a1037b6ef7ffc603c47a" translate="yes" xml:space="preserve">
          <source>Like any ReQL command, &lt;code&gt;changes&lt;/code&gt; integrates with the rest of the query language. You can call &lt;code&gt;changes&lt;/code&gt; after most commands that transform or select data:</source>
          <target state="translated">他のReQLコマンドと同様に、 &lt;code&gt;changes&lt;/code&gt; は残りのクエリ言語と統合されます。データを変換または選択するほとんどのコマンドの後で、 &lt;code&gt;changes&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="50c623d37beca2feae774d169fbe6b85ee0be7e7" translate="yes" xml:space="preserve">
          <source>Like many traditional database systems, RethinkDB supports &lt;code&gt;JOIN&lt;/code&gt; commands to combine data from multiple tables. In RethinkDB joins are automatically distributed&amp;mdash;a join command is automatically sent to the appropriate nodes across the cluster, the relevant data is combined, and the final result is presented to the user.</source>
          <target state="translated">多くの従来のデータベースシステムと同様に、RethinkDBは &lt;code&gt;JOIN&lt;/code&gt; コマンドをサポートして、複数のテーブルのデータを結合します。RethinkDBでは、結合が自動的に分散されます。結合コマンドがクラスター全体の適切なノードに自動的に送信され、関連するデータが結合されて、最終的な結果がユーザーに表示されます。</target>
        </trans-unit>
        <trans-unit id="b81e349422612226eccc114d5f889ba875ee59c6" translate="yes" xml:space="preserve">
          <source>Like most database systems, ReQL supports primary and secondary indexes to allow efficient data access. You can also create compound indexes and indexes based on arbitrary ReQL expressions to speed up complex queries.</source>
          <target state="translated">ほとんどのデータベースシステムと同様に、ReQLはプライマリインデックスとセカンダリインデックスをサポートしており、効率的なデータアクセスを可能にします。また、複合インデックスや任意のReQL式に基づいたインデックスを作成して、複雑なクエリを高速化することもできます。</target>
        </trans-unit>
        <trans-unit id="cbcbaaf781c0838f0b358c0dddcca12bc10e4339" translate="yes" xml:space="preserve">
          <source>Limitations of automatic failover</source>
          <target state="translated">自動フェイルオーバーの限界</target>
        </trans-unit>
        <trans-unit id="8f13609bf219f6ca237069b790c4c9a2ad381552" translate="yes" xml:space="preserve">
          <source>Limiting the number of returned documents</source>
          <target state="translated">返却書類の数を制限する</target>
        </trans-unit>
        <trans-unit id="46453bf012aa531ac54613a0f5623dcf3c269fca" translate="yes" xml:space="preserve">
          <source>Linearizability and atomicity guarantees</source>
          <target state="translated">直線化可能性と原子性の保証</target>
        </trans-unit>
        <trans-unit id="8079cd01630a2b6f154b2abd4aca58bf065d2bf7" translate="yes" xml:space="preserve">
          <source>Lines and distances</source>
          <target state="translated">ラインと距離</target>
        </trans-unit>
        <trans-unit id="f8a8b40332141131251cba0338928c84cbc899bd" translate="yes" xml:space="preserve">
          <source>Lines and polygons can be specified using either point objects or sequences of two-number arrays:</source>
          <target state="translated">線や多角形は、点オブジェクトや2値配列のシーケンスを使って指定することができます。</target>
        </trans-unit>
        <trans-unit id="e2e17174307bd30c9651cd5cd7f2b98cd08f8a35" translate="yes" xml:space="preserve">
          <source>Linking documents in multiple tables</source>
          <target state="translated">複数のテーブルでドキュメントをリンクする</target>
        </trans-unit>
        <trans-unit id="6ed36fa1183214845ee195f26eeda3f8866b655a" translate="yes" xml:space="preserve">
          <source>Linux Mint</source>
          <target state="translated">リナックスミント</target>
        </trans-unit>
        <trans-unit id="d51bed5d4234a9759d6a8aab8a001767fd630b60" translate="yes" xml:space="preserve">
          <source>Linux and OS X</source>
          <target state="translated">リナックスとオーエスエックス</target>
        </trans-unit>
        <trans-unit id="a6b55add3271bf52f9229b1f55c71bf39192ee0c" translate="yes" xml:space="preserve">
          <source>List all database names in the system. The result is a list of strings.</source>
          <target state="translated">システム内のすべてのデータベース名をリストアップします。結果は文字列のリストになります。</target>
        </trans-unit>
        <trans-unit id="993b1d68164e0a0c046c84b9ca43c4e5830eec98" translate="yes" xml:space="preserve">
          <source>List all table names in a database. The result is a list of strings.</source>
          <target state="translated">データベース内のすべてのテーブル名をリストアップします。結果は文字列のリストです。</target>
        </trans-unit>
        <trans-unit id="3bb65a3a68d5a8ad114346be2ad7ccd0b325bc12" translate="yes" xml:space="preserve">
          <source>List all the secondary indexes of this table.</source>
          <target state="translated">このテーブルのすべてのセカンダリインデックスをリストアップします。</target>
        </trans-unit>
        <trans-unit id="cca8cd4e2bc2f275251b8f0b5ed8434b92cf0173" translate="yes" xml:space="preserve">
          <source>Listen for changes in a RethinkDB table over RabbitMQ.</source>
          <target state="translated">RabbitMQを介してRethinkDBテーブルの変更をリッスンします。</target>
        </trans-unit>
        <trans-unit id="eb6fc719e4222cb0e021bed23a373eb005d0e88d" translate="yes" xml:space="preserve">
          <source>Listening to RabbitMQ messages</source>
          <target state="translated">RabbitMQのメッセージを聞く</target>
        </trans-unit>
        <trans-unit id="5ec7392e4c45dc057d7ab6c781c38d95f4d3346a" translate="yes" xml:space="preserve">
          <source>Load &lt;code&gt;python&lt;/code&gt; (or &lt;a href=&quot;http://ipython.org&quot;&gt;ipython&lt;/a&gt;) and set up a connection to your database:</source>
          <target state="translated">&lt;code&gt;python&lt;/code&gt; （または&lt;a href=&quot;http://ipython.org&quot;&gt;ipython&lt;/a&gt;）をロードし、データベースへの接続を設定します。</target>
        </trans-unit>
        <trans-unit id="37819416fc67fd2f5cd366c850cf56b4ff2d213c" translate="yes" xml:space="preserve">
          <source>Log in using the username &lt;code&gt;rethinkdb&lt;/code&gt; and the password you chose in step 7.</source>
          <target state="translated">ユーザー名 &lt;code&gt;rethinkdb&lt;/code&gt; とステップ7で選択したパスワードを使用してログインします。</target>
        </trans-unit>
        <trans-unit id="d2e3210b91ade80c488bbcfd4ac6f12798b16237" translate="yes" xml:space="preserve">
          <source>Log options</source>
          <target state="translated">ログオプション</target>
        </trans-unit>
        <trans-unit id="aa42cc5f49c6d291cfc5d71f7d47803ff3f9de31" translate="yes" xml:space="preserve">
          <source>Log write issues</source>
          <target state="translated">ログ書き込み問題</target>
        </trans-unit>
        <trans-unit id="00d45cf43ab6900d309ef4eaaa39f6e115347863" translate="yes" xml:space="preserve">
          <source>Logging tools</source>
          <target state="translated">ロギングツール</target>
        </trans-unit>
        <trans-unit id="77579f2f6e9a0b7bf5302dfdb7b5e31eec34bd09" translate="yes" xml:space="preserve">
          <source>Longitude (&amp;minus;180 to 180) and latitude (&amp;minus;90 to 90) of vertices are plotted on a perfect sphere. See &lt;a href=&quot;../../../docs/geo-support/javascript/index&quot;&gt;Geospatial support&lt;/a&gt; for more information on ReQL&amp;rsquo;s coordinate system.</source>
          <target state="translated">頂点の経度（-180〜180）と緯度（-90〜90）は、完全な球にプロットされます。ReQLの座標系の詳細については、&lt;a href=&quot;../../../docs/geo-support/javascript/index&quot;&gt;地理空間サポート&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="b7f41960132584f9d7bd0c067c3f4dfa28d057b2" translate="yes" xml:space="preserve">
          <source>Look at how many arguments the function takes (&lt;code&gt;num_args&lt;/code&gt;)</source>
          <target state="translated">関数が取る引数の数を &lt;code&gt;num_args&lt;/code&gt; ます（num_args）</target>
        </trans-unit>
        <trans-unit id="c92246116a0060ce1970018249864b4c7a3348ef" translate="yes" xml:space="preserve">
          <source>Loop over a sequence, evaluating the given write query for each element.</source>
          <target state="translated">シーケンスをループし、各要素に対して与えられた書き込みクエリを評価します。</target>
        </trans-unit>
        <trans-unit id="c6ceab055f64bcd972209f1ed242740ed0fe108b" translate="yes" xml:space="preserve">
          <source>Lowercases a string.</source>
          <target state="translated">文字列を小文字にします。</target>
        </trans-unit>
        <trans-unit id="b0832074630eb731d7fbe8074de48a90cd9bb220" translate="yes" xml:space="preserve">
          <source>Lua</source>
          <target state="translated">Lua</target>
        </trans-unit>
        <trans-unit id="853db5db5e9449857a125fdaf64c49523fbe605b" translate="yes" xml:space="preserve">
          <source>Make also sure you&amp;rsquo;ve &lt;a href=&quot;https://rethinkdb.com/docs/install-drivers/javascript/&quot;&gt;installed the JavaScript driver&lt;/a&gt;.</source>
          <target state="translated">また&lt;a href=&quot;https://rethinkdb.com/docs/install-drivers/javascript/&quot;&gt;、JavaScriptドライバー&lt;/a&gt;がインストールされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="ae4a8e3bb1c5ba5084979d58dccde30ec4b6619e" translate="yes" xml:space="preserve">
          <source>Make sure you&amp;rsquo;ve &lt;a href=&quot;https://rethinkdb.com/install&quot;&gt;installed RethinkDB&lt;/a&gt;&amp;mdash;it should only take a minute!</source>
          <target state="translated">&lt;a href=&quot;https://rethinkdb.com/install&quot;&gt;RethinkDB&lt;/a&gt;がインストールされていることを確認してください&amp;mdash;ほんの1分で終わります！</target>
        </trans-unit>
        <trans-unit id="ec8db219e768dbf927afc537cce0ed0ac5d426cf" translate="yes" xml:space="preserve">
          <source>Manipulating Databases</source>
          <target state="translated">データベースの操作</target>
        </trans-unit>
        <trans-unit id="cd5274de84779cf7e26c8aeb43ee293a6d239ace" translate="yes" xml:space="preserve">
          <source>Manipulating Tables</source>
          <target state="translated">テーブルの操作</target>
        </trans-unit>
        <trans-unit id="0315f3bc6857038096e10b57a0d97ca1a21082ee" translate="yes" xml:space="preserve">
          <source>Manipulating databases</source>
          <target state="translated">データベースの操作</target>
        </trans-unit>
        <trans-unit id="85cd44aae68cc1b84cb48c7c2fe761b7d6e991c5" translate="yes" xml:space="preserve">
          <source>Manipulating documents</source>
          <target state="translated">ドキュメントの操作</target>
        </trans-unit>
        <trans-unit id="379776eeb89cc816e18680ac4dff7a7359381323" translate="yes" xml:space="preserve">
          <source>Manipulating indexes with the web UI</source>
          <target state="translated">Web UI でインデックスを操作する</target>
        </trans-unit>
        <trans-unit id="ae4c8c8c4f2c5ea1dc21a8c397caa583dd053f78" translate="yes" xml:space="preserve">
          <source>Manipulating indexes: &lt;a href=&quot;../../../api/javascript/index_create/index&quot;&gt;indexCreate&lt;/a&gt;, &lt;a href=&quot;../../../api/javascript/index_drop/index&quot;&gt;indexDrop&lt;/a&gt; and &lt;a href=&quot;../../../api/javascript/index_list/index&quot;&gt;indexList&lt;/a&gt;</source>
          <target state="translated">インデックスの操作：&lt;a href=&quot;../../../api/javascript/index_create/index&quot;&gt;indexCreate&lt;/a&gt;、&lt;a href=&quot;../../../api/javascript/index_drop/index&quot;&gt;indexDrop&lt;/a&gt;、&lt;a href=&quot;../../../api/javascript/index_list/index&quot;&gt;indexList&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e391b105e9585f961562e7064cb0aa9414e73a72" translate="yes" xml:space="preserve">
          <source>Manipulating tables</source>
          <target state="translated">テーブルの操作</target>
        </trans-unit>
        <trans-unit id="f17e3cdc08f968d3b1b8c2ec9eb1ceefef64f7ee" translate="yes" xml:space="preserve">
          <source>Manually merge the left and right fields</source>
          <target state="translated">左右のフィールドを手動でマージ</target>
        </trans-unit>
        <trans-unit id="b9a082aaaec9d03b12fca89934928f413350caae" translate="yes" xml:space="preserve">
          <source>Many people have been reporting that they get back a connection object when they run a query, the object being:</source>
          <target state="translated">多くの人が、クエリを実行すると接続オブジェクトが返ってくるという報告をしています。</target>
        </trans-unit>
        <trans-unit id="bf4d9a2e9aca1ebab3357daa2f4482b382a28a79" translate="yes" xml:space="preserve">
          <source>Many to many relations</source>
          <target state="translated">多からず多からずの関係</target>
        </trans-unit>
        <trans-unit id="d103bd0ce354a22ec2d971d2a818261309039c72" translate="yes" xml:space="preserve">
          <source>Map-reduce in RethinkDB</source>
          <target state="translated">RethinkDBのMap-reduce</target>
        </trans-unit>
        <trans-unit id="ec8bb2749b0912c81ba2d5e51014afb3a3980c0f" translate="yes" xml:space="preserve">
          <source>Matches against a regular expression. If there is a match, returns an object with the fields:</source>
          <target state="translated">正規表現にマッチします。一致した場合、フィールドを持つオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="aded3de93027fd725e41f6ca4105d385535009bf" translate="yes" xml:space="preserve">
          <source>Math and Logic</source>
          <target state="translated">数学と論理</target>
        </trans-unit>
        <trans-unit id="e76587c25d66762a167abd2d402654b3cc867d80" translate="yes" xml:space="preserve">
          <source>Math and logic</source>
          <target state="translated">数学と論理</target>
        </trans-unit>
        <trans-unit id="6888270cc5b2dfaf0916f2237e02a11e56088cf7" translate="yes" xml:space="preserve">
          <source>Memory availability issues</source>
          <target state="translated">メモリの可用性の問題</target>
        </trans-unit>
        <trans-unit id="110c6707f36ae400d4ca884b4a45ac2166550586" translate="yes" xml:space="preserve">
          <source>Memory requirements</source>
          <target state="translated">メモリ要件</target>
        </trans-unit>
        <trans-unit id="5dd7c30db3f640d34b64d0e2719a800c2ccfb0d5" translate="yes" xml:space="preserve">
          <source>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. &lt;code&gt;merge&lt;/code&gt; also accepts a subquery function that returns an object, which will be used similarly to a &lt;a href=&quot;../map/index&quot;&gt;map&lt;/a&gt; function.</source>
          <target state="translated">2つ以上のオブジェクトをマージして、すべてのプロパティを持つ新しいオブジェクトを構築します。フィールド名に矛盾がある場合、引数リストの右端のオブジェクトのフィールドが優先されます。 &lt;code&gt;merge&lt;/code&gt; は、オブジェクトを返すサブクエリ関数も受け入れます。これは、&lt;a href=&quot;../map/index&quot;&gt;マップ&lt;/a&gt;関数と同様に使用されます。</target>
        </trans-unit>
        <trans-unit id="04d73701de8502ed6708d400a96b65af03f13dbb" translate="yes" xml:space="preserve">
          <source>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. &lt;code&gt;merge&lt;/code&gt; also accepts a subquery function that returns an object, which will be used similarly to a &lt;a href=&quot;map/index&quot;&gt;map&lt;/a&gt; function.</source>
          <target state="translated">2つ以上のオブジェクトをマージして、すべてのプロパティを持つ新しいオブジェクトを構築します。フィールド名に矛盾がある場合、引数リストの右端のオブジェクトのフィールドが優先されます。 &lt;code&gt;merge&lt;/code&gt; は、オブジェクトを返すサブクエリ関数も受け入れます。これは、&lt;a href=&quot;map/index&quot;&gt;マップ&lt;/a&gt;関数と同様に使用されます。</target>
        </trans-unit>
        <trans-unit id="98f6cf8510e0439f12bcf7a86ba1ceba63386fc2" translate="yes" xml:space="preserve">
          <source>Merge two or more sequences.</source>
          <target state="translated">2 つ以上のシーケンスをマージします。</target>
        </trans-unit>
        <trans-unit id="1f0a513d0abdd16d2f84502191d76b98a52fb8f7" translate="yes" xml:space="preserve">
          <source>Migrating data from previous versions of RethinkDB</source>
          <target state="translated">RethinkDBの旧バージョンからのデータ移行</target>
        </trans-unit>
        <trans-unit id="aa6d9b542df934b1fb7cababc57d99f0c762b82c" translate="yes" xml:space="preserve">
          <source>Migrating old data</source>
          <target state="translated">古いデータの移行</target>
        </trans-unit>
        <trans-unit id="ce5743bd4325e12d91947a3f4a1b808fb776fbbb" translate="yes" xml:space="preserve">
          <source>Migration consists of three simple steps:</source>
          <target state="translated">移行は3つのシンプルなステップで構成されています。</target>
        </trans-unit>
        <trans-unit id="7fe0b02845ac7e31f8355515cfa9358814ea98d9" translate="yes" xml:space="preserve">
          <source>Mimics the behavior of Python&amp;rsquo;s &lt;code&gt;string.split&lt;/code&gt; in edge cases, except for splitting on the empty string, which instead produces an array of single-character strings.</source>
          <target state="translated">空の文字列で分割することを除いて、エッジケースでのPythonの &lt;code&gt;string.split&lt;/code&gt; の動作を模倣します。空の文字列で分割する代わりに、単一文字の文字列の配列を生成します。</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="1a0e2290409950c22eeaa9cec60aef1b7a34fe19" translate="yes" xml:space="preserve">
          <source>Mixed sequences of data sort in the following order:</source>
          <target state="translated">以下の順序でデータをソートする混合シーケンス。</target>
        </trans-unit>
        <trans-unit id="050aa84d9f3547048f944db27736fa71c21601f8" translate="yes" xml:space="preserve">
          <source>Modeling relationships</source>
          <target state="translated">関係性のモデリング</target>
        </trans-unit>
        <trans-unit id="4d7ad1ad621c826e63ea432ff5d8acd0e7e9dbc1" translate="yes" xml:space="preserve">
          <source>Models in depth</source>
          <target state="translated">深さのあるモデル</target>
        </trans-unit>
        <trans-unit id="0e0c2052c8a28cb53004104670a5f3189e0ff126" translate="yes" xml:space="preserve">
          <source>Modifying times</source>
          <target state="translated">修正時間</target>
        </trans-unit>
        <trans-unit id="38ed8d7a13fc2d35939d911335ecac667570c279" translate="yes" xml:space="preserve">
          <source>Molly.js</source>
          <target state="translated">Molly.js</target>
        </trans-unit>
        <trans-unit id="4bab2d8fe13fa6ab57f80098b414f0f734c5dd25" translate="yes" xml:space="preserve">
          <source>More</source>
          <target state="translated">More</target>
        </trans-unit>
        <trans-unit id="65607507695dbb68853f7200e33956e39fd6a15d" translate="yes" xml:space="preserve">
          <source>More Examples</source>
          <target state="translated">その他の例</target>
        </trans-unit>
        <trans-unit id="41775da315d57d76ff81ed9611116e4ea3dfd26d" translate="yes" xml:space="preserve">
          <source>More complex predicates</source>
          <target state="translated">より複雑な述語</target>
        </trans-unit>
        <trans-unit id="7180389997e0b1e0af0e7dc001fd021b621caff0" translate="yes" xml:space="preserve">
          <source>Most APIs support some form of authentication and rate limiting. The &lt;code&gt;r.http&lt;/code&gt; command supports common forms of authentication (see the &lt;a href=&quot;../../api/javascript/http/index&quot;&gt;reference&lt;/a&gt; for more details). For example, here is how you can use GitHub tokens with basic auth:</source>
          <target state="translated">ほとんどのAPIは、何らかの形式の認証とレート制限をサポートしています。 &lt;code&gt;r.http&lt;/code&gt; のコマンドは、（参照認証の一般的な形式をサポートしている&lt;a href=&quot;../../api/javascript/http/index&quot;&gt;参照&lt;/a&gt;の詳細については）。たとえば、次は基本認証でGitHubトークンを使用する方法です。</target>
        </trans-unit>
        <trans-unit id="fa60d0629e116eb043cbf63a410f5ce6c0b76c72" translate="yes" xml:space="preserve">
          <source>Most date operations are only defined on years in the range &lt;code&gt;[1400, 10000]&lt;/code&gt; (but note that times in the year &lt;code&gt;10000&lt;/code&gt; cannot be printed as ISO 8601 dates).</source>
          <target state="translated">ほとんどの日付操作は範囲だけで年に規定されている &lt;code&gt;[1400, 10000]&lt;/code&gt; （年間で倍ことなく、ノート &lt;code&gt;10000&lt;/code&gt; は ISO 8601件の日付として印刷することはできません）。</target>
        </trans-unit>
        <trans-unit id="0641f9094acfde9b6cf6cc3b9d52a297e0e65bd8" translate="yes" xml:space="preserve">
          <source>Multi indexes</source>
          <target state="translated">マルチインデックス</target>
        </trans-unit>
        <trans-unit id="98a7e7d6cc4d0854490ddbd7601741fd83b90023" translate="yes" xml:space="preserve">
          <source>Multi-datacenter setup</source>
          <target state="translated">複数のデータセンターの設定</target>
        </trans-unit>
        <trans-unit id="86753c0740ef8a696a347475bf1ea038b52b180e" translate="yes" xml:space="preserve">
          <source>Multipart responses</source>
          <target state="translated">マルチパート対応</target>
        </trans-unit>
        <trans-unit id="021a631169c4a417b486aab49a973289a6614f87" translate="yes" xml:space="preserve">
          <source>Multiple RethinkDB instances on a single machine</source>
          <target state="translated">1台のマシンに複数のRethinkDBインスタンスを搭載</target>
        </trans-unit>
        <trans-unit id="09ad7baebfde68a2882bc6128e8473c249838c72" translate="yes" xml:space="preserve">
          <source>Multiple instances</source>
          <target state="translated">複数のインスタンス</target>
        </trans-unit>
        <trans-unit id="cc1d53d7c78cd147a3d1ec6d9077c46bc8013328" translate="yes" xml:space="preserve">
          <source>Multiple servers, databases, or tables in the same database have been assigned the same name. The &lt;code&gt;name&lt;/code&gt; field shows the conflicting name; &lt;code&gt;ids&lt;/code&gt; are the UUIDs of the entities that have that name. In the case of &lt;code&gt;table_name_collision&lt;/code&gt;, &lt;code&gt;db&lt;/code&gt; will be the database that the tables are in. Rename the conflicting entities.</source>
          <target state="translated">同じデータベース内の複数のサーバー、データベース、またはテーブルに同じ名前が割り当てられています。 &lt;code&gt;name&lt;/code&gt; フィールドには、矛盾する名前を示しています。 &lt;code&gt;ids&lt;/code&gt; は、その名前を持つエンティティのUUIDです。 &lt;code&gt;table_name_collision&lt;/code&gt; の場合、 &lt;code&gt;db&lt;/code&gt; はテーブルが存在するデータベースになります。競合するエンティティの名前を変更します。</target>
        </trans-unit>
        <trans-unit id="8ee266f49fc4bb636b4d04389645377477ea4f26" translate="yes" xml:space="preserve">
          <source>Multiply two numbers, or make a periodic array.</source>
          <target state="translated">2つの数字を掛け合わせたり、周期的な配列を作ったり。</target>
        </trans-unit>
        <trans-unit id="1f211804aeeccd93ce4380676a5c34cd70670249" translate="yes" xml:space="preserve">
          <source>My insert queries are slow. How can I speed them up?</source>
          <target state="translated">私の挿入クエリは遅いです。どうすれば高速化できますか?</target>
        </trans-unit>
        <trans-unit id="4d572e4dbba9de4ec7b823d0ec15cdc5e5e700f7" translate="yes" xml:space="preserve">
          <source>My secondary index is outdated</source>
          <target state="translated">私のセカンダリーインデックスは古くなっています</target>
        </trans-unit>
        <trans-unit id="e7942af5c84b130986b851206ecc6f9a347c6d81" translate="yes" xml:space="preserve">
          <source>Name collision issues</source>
          <target state="translated">名前の衝突問題</target>
        </trans-unit>
        <trans-unit id="57d2c00ce45ae19ada8881fa5212e7afd2ff2b8c" translate="yes" xml:space="preserve">
          <source>Native ReQL commands like &lt;code&gt;reconfigure&lt;/code&gt; also control sharding and replication, and if you&amp;rsquo;re not using server tags you can change sharding/replication settings in the web UI. Read &lt;a href=&quot;../sharding-and-replication/index&quot;&gt;Sharding and replication&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;reconfigure&lt;/code&gt; などのネイティブReQLコマンドもシャーディングとレプリケーションを制御します。サーバータグを使用していない場合は、ウェブUIでシャーディング/レプリケーション設定を変更できます。読んで&lt;a href=&quot;../sharding-and-replication/index&quot;&gt;シャーディングとレプリケーションの&lt;/a&gt;詳細については。</target>
        </trans-unit>
        <trans-unit id="b732272c643f080018849521bf6a04412a4035e5" translate="yes" xml:space="preserve">
          <source>Native language&amp;rsquo;s operations that have side effects or control blocks cannot be used within a &lt;code&gt;lambda&lt;/code&gt;. Learn more about &lt;a href=&quot;https://rethinkdb.com/blog/lambda-functions/&quot;&gt;how this design is implemented&lt;/a&gt; for details.</source>
          <target state="translated">副作用または制御ブロックがある母国語の操作は、 &lt;code&gt;lambda&lt;/code&gt; 内では使用できません。詳細については&lt;a href=&quot;https://rethinkdb.com/blog/lambda-functions/&quot;&gt;、このデザインの実装方法の&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="87c96561f54572b1d2129d04e9b42119a72d9901" translate="yes" xml:space="preserve">
          <source>Near to the release of this performance report, we are excited to release RethinkDB 2.3 with plenty of new features. Rigorous performance testing, and properly publishing results is a very time-consuming process, but one we will conduct for future releases on an ongoing basis. We plan to publish our next set of metrics during the lifetime of the RethinkDB 2.3 release. We also would like to test RethinkDB performance when scaled to beyond a 16 node cluster during our next testing cycle. Going forward, we will include a summary of previous reports at the end of each report for comparison.</source>
          <target state="translated">このパフォーマンスレポートのリリースが間近に迫っており、多くの新機能を搭載したRethinkDB 2.3をリリースできることに興奮しています。厳密なパフォーマンス・テストを行い、結果を適切に公開することは、非常に時間のかかるプロセスですが、今後のリリースに向けて継続的に実施していきたいと考えています。RethinkDB 2.3のリリース期間中に、次のメトリクスを公開する予定です。また、次のテストサイクルでは、16ノードのクラスタを超えてスケールした場合のRethinkDBのパフォーマンスをテストしたいと考えています。今後は、比較のために各レポートの最後に過去のレポートの要約を掲載する予定です。</target>
        </trans-unit>
        <trans-unit id="2f6fba18324193c1ccc35dd945f1c291c471bf6d" translate="yes" xml:space="preserve">
          <source>Negative &lt;code&gt;startOffset&lt;/code&gt; and &lt;code&gt;endOffset&lt;/code&gt; values are allowed with arrays; in that case, the returned range counts back from the array&amp;rsquo;s end. That is, the range &lt;code&gt;(-2)&lt;/code&gt; returns the last two elements, and the range of &lt;code&gt;(2,-1)&lt;/code&gt; returns the second element through the next-to-last element of the range. An error will be raised on a negative &lt;code&gt;startOffset&lt;/code&gt; or &lt;code&gt;endOffset&lt;/code&gt; with non-arrays. (An &lt;code&gt;endOffset&lt;/code&gt; of &amp;minus;1 &lt;em&gt;is&lt;/em&gt; allowed with a stream if &lt;code&gt;rightBound&lt;/code&gt; is closed; this behaves as if no &lt;code&gt;endOffset&lt;/code&gt; was specified.)</source>
          <target state="translated">配列では負の &lt;code&gt;startOffset&lt;/code&gt; および &lt;code&gt;endOffset&lt;/code&gt; 値が許可されています。その場合、返される範囲は配列の最後から数えます。つまり、範囲 &lt;code&gt;(-2)&lt;/code&gt; は最後の2つの要素を返し、範囲 &lt;code&gt;(2,-1)&lt;/code&gt; は範囲の2番目の要素から最後から2番目の要素を返します。配列以外の負の &lt;code&gt;startOffset&lt;/code&gt; または &lt;code&gt;endOffset&lt;/code&gt; でエラーが発生します。（AN &lt;code&gt;endOffset&lt;/code&gt; の -1が&lt;em&gt;され&lt;/em&gt;た場合、ストリームとせ &lt;code&gt;rightBound&lt;/code&gt; が閉じられ、この挙動は何かのよう &lt;code&gt;endOffset&lt;/code&gt; のが指定されませんでした。）</target>
        </trans-unit>
        <trans-unit id="55d06d5784fa220b321b58feb4840aab256fc83a" translate="yes" xml:space="preserve">
          <source>Nested resources in views</source>
          <target state="translated">ビュー内のネストされたリソース</target>
        </trans-unit>
        <trans-unit id="6ddf66c9236295cf80e623178cd3a86d93d90f71" translate="yes" xml:space="preserve">
          <source>Network options</source>
          <target state="translated">ネットワークオプション</target>
        </trans-unit>
        <trans-unit id="11fc14203dd0f4441645a9c34d5dd022905f56e4" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="translated">次のステップ</target>
        </trans-unit>
        <trans-unit id="24f947aa7d57d693ce1d98cdba36427bb9ce7386" translate="yes" xml:space="preserve">
          <source>Next, we&amp;rsquo;ll connect to the RabbitMQ server using amqplib:</source>
          <target state="translated">次に、amqplibを使用してRabbitMQサーバーに接続します。</target>
        </trans-unit>
        <trans-unit id="8bcd0a2c52378cf0d5699266d7e259ed99978f8c" translate="yes" xml:space="preserve">
          <source>Nim</source>
          <target state="translated">Nim</target>
        </trans-unit>
        <trans-unit id="16acb6d551b744fda3354c17a22ed53ee3c2a38e" translate="yes" xml:space="preserve">
          <source>No proxy for: (remove everything)</source>
          <target state="translated">代理人はいません。(すべてを削除する)</target>
        </trans-unit>
        <trans-unit id="d4388553ac2433a2d8de402d1a33e87d261b34cb" translate="yes" xml:space="preserve">
          <source>No special procedures or commands are necessary to execute RethinkDB queries asynchronously in JavaScript. Read about using callbacks and promises with RethinkDB in the documentation for the &lt;a href=&quot;../../api/javascript/run/index&quot;&gt;run&lt;/a&gt; command.</source>
          <target state="translated">JavaScriptで非同期にRethinkDBクエリを実行するために特別な手順やコマンドは必要ありません。&lt;a href=&quot;../../api/javascript/run/index&quot;&gt;run&lt;/a&gt;コマンドのドキュメントで、RethinkDBでのコールバックとプロミスの使用について読んでください。</target>
        </trans-unit>
        <trans-unit id="7695d8b90da619c62d4210a919c12878e58d47a6" translate="yes" xml:space="preserve">
          <source>No. However, you can export to GeoJSON and process that with other tools.</source>
          <target state="translated">ただし、GeoJSONにエクスポートして他のツールで処理することは可能です。</target>
        </trans-unit>
        <trans-unit id="7fc6dfab40c56076b4529c151dc339fe0e28415a" translate="yes" xml:space="preserve">
          <source>NoBrainer adds a light wrapper around ReQL queries. Here are some examples:</source>
          <target state="translated">NoBrainerはReQLクエリの軽いラッパーを追加します。以下にいくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="2334597b85868c5bda45705d9c6dadcdc53b3feb" translate="yes" xml:space="preserve">
          <source>NoBrainer runs the validations only when saving, but not when retrieving a document. This means you can always retrieve your data, but an invalid model won&amp;rsquo;t be saved to the database.</source>
          <target state="translated">NoBrainerは、保存時にのみ検証を実行しますが、ドキュメントの取得時には実行しません。つまり、いつでもデータを取得できますが、無効なモデルはデータベースに保存されません。</target>
        </trans-unit>
        <trans-unit id="ff74a5e83610f74cfb3d040f4dd2a594d12dd9d2" translate="yes" xml:space="preserve">
          <source>Node and Socket.io</source>
          <target state="translated">ノードとSocket.io</target>
        </trans-unit>
        <trans-unit id="10b3493287f831e81a438811a1ffba01f8cec4b7" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="translated">Node.js</target>
        </trans-unit>
        <trans-unit id="aa72935495ba47f9868598eb0972bab220cb0b79" translate="yes" xml:space="preserve">
          <source>Node.js Todo list</source>
          <target state="translated">Node.js 全リスト</target>
        </trans-unit>
        <trans-unit id="4839715bc122d856e205f2a6e684ab4b4c9e9787" translate="yes" xml:space="preserve">
          <source>Node.js libraries</source>
          <target state="translated">Node.js ライブラリ</target>
        </trans-unit>
        <trans-unit id="9e325452c6548fc2449564842660d75ef3b1eb73" translate="yes" xml:space="preserve">
          <source>Nodes</source>
          <target state="translated">Nodes</target>
        </trans-unit>
        <trans-unit id="60e056d9960d2aa21ce42b1232734ba6d3cb45ff" translate="yes" xml:space="preserve">
          <source>Not passing the &lt;code&gt;group_format&lt;/code&gt; flag would return:</source>
          <target state="translated">&lt;code&gt;group_format&lt;/code&gt; フラグを渡さないと、以下が返されます。</target>
        </trans-unit>
        <trans-unit id="a33a695a3e0e45a968fb7f12f79cb0174916eeb2" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;../changefeeds/javascript/index&quot;&gt;changefeeds&lt;/a&gt; will ignore the &lt;code&gt;read_mode&lt;/code&gt; flag, and will always behave as if it is set to &lt;code&gt;single&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../changefeeds/javascript/index&quot;&gt;changefeeds&lt;/a&gt;は &lt;code&gt;read_mode&lt;/code&gt; フラグを無視し、常に &lt;code&gt;single&lt;/code&gt; に設定されているかのように動作することに注意してください。</target>
        </trans-unit>
        <trans-unit id="23aa91cdc70b0f0c42f4dc080acc2e18f209da6b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;branch&lt;/code&gt;, the ReQL conditional command, must be used instead of &lt;code&gt;if&lt;/code&gt;. See the &lt;code&gt;branch&lt;/code&gt;&lt;a href=&quot;../branch/index&quot;&gt;documentation&lt;/a&gt; for more.</source>
          <target state="translated">なお、 &lt;code&gt;branch&lt;/code&gt; 、ReQL条件付きのコマンドは、の代わりに使用しなければならない &lt;code&gt;if&lt;/code&gt; 。詳細については、 &lt;code&gt;branch&lt;/code&gt; &lt;a href=&quot;../branch/index&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="046b36ef7075cbe7dba601071ec0d34de7ee628d" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;getAll&lt;/code&gt; and similar operations do &lt;em&gt;not&lt;/em&gt; execute in an atomic fashion with &lt;code&gt;update&lt;/code&gt;. Read &lt;a href=&quot;../../../docs/consistency/index&quot;&gt;Consistency guarantees&lt;/a&gt; for more details. Also, see the example for conditional updates below for a solution using &lt;code&gt;branch&lt;/code&gt; in an &lt;code&gt;update&lt;/code&gt; clause.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; 、 &lt;code&gt;getAll&lt;/code&gt; などの操作は、 &lt;code&gt;update&lt;/code&gt; ではアトミックな方法で実行され&lt;em&gt;ない&lt;/em&gt;ことに注意してください。詳細については、&lt;a href=&quot;../../../docs/consistency/index&quot;&gt;一貫性保証&lt;/a&gt;をお読みください。また、 &lt;code&gt;update&lt;/code&gt; 句で &lt;code&gt;branch&lt;/code&gt; を使用するソリューションについては、以下の条件付き更新の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="f3cce3c5063c9b4680ce2db7489bc86d18a9613e" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;innerJoin&lt;/code&gt; is slower and much less efficient than using &lt;a href=&quot;../eq_join/index&quot;&gt;eqJoin&lt;/a&gt; or &lt;a href=&quot;../concat_map/index&quot;&gt;concatMap&lt;/a&gt; with &lt;a href=&quot;../get_all/index&quot;&gt;getAll&lt;/a&gt;. You should avoid using &lt;code&gt;innerJoin&lt;/code&gt; in commands when possible.</source>
          <target state="translated">&lt;code&gt;innerJoin&lt;/code&gt; は、&lt;a href=&quot;../get_all/index&quot;&gt;getAllで&lt;/a&gt;&lt;a href=&quot;../eq_join/index&quot;&gt;eqJoin&lt;/a&gt;または&lt;a href=&quot;../concat_map/index&quot;&gt;concatMap&lt;/a&gt;を使用する場合よりも遅く、はるかに効率が悪いことに注意してください。可能な場合は、コマンドで &lt;code&gt;innerJoin&lt;/code&gt; を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="fb9c353d911b32d303fae6ec6ffcae4f1a653918" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;map&lt;/code&gt; can only be applied to sequences, not single values. If you wish to apply a function to a single value/selection (including an array), use the &lt;a href=&quot;../do/index&quot;&gt;do&lt;/a&gt; command.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; はシーケンスにのみ適用でき、単一の値には適用できないことに注意してください。関数を単一の値/選択（配列を含む）に適用する場合は、&lt;a href=&quot;../do/index&quot;&gt;do&lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="52edb1931a7678b06f40d0f67216ea63d608c768" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;outerJoin&lt;/code&gt; is slower and much less efficient than using &lt;a href=&quot;../concat_map/index&quot;&gt;concatMap&lt;/a&gt; with &lt;a href=&quot;../get_all/index&quot;&gt;getAll&lt;/a&gt;. You should avoid using &lt;code&gt;outerJoin&lt;/code&gt; in commands when possible.</source>
          <target state="translated">&lt;code&gt;outerJoin&lt;/code&gt; は、&lt;a href=&quot;../get_all/index&quot;&gt;getAllで&lt;/a&gt;&lt;a href=&quot;../concat_map/index&quot;&gt;concatMap&lt;/a&gt;を使用するよりも遅く、はるかに効率が悪いことに注意してください。可能な場合は、コマンドで &lt;code&gt;outerJoin&lt;/code&gt; を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="bd4b1c6ffc31ec1f99a87680dc2b303487664897" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;row&lt;/code&gt; does not work within subqueries to access nested documents; you should use anonymous functions to access those documents instead. (See the last example.)</source>
          <target state="translated">&lt;code&gt;row&lt;/code&gt; は、ネストされたドキュメントにアクセスするためのサブクエリ内では機能しないことに注意してください。これらのドキュメントにアクセスするには、匿名関数を使用する必要があります。（最後の例を参照してください。）</target>
        </trans-unit>
        <trans-unit id="d752e9b9c354ac26c00d43811dff01c2a8679e7b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;true&lt;/code&gt; in the example above is testing for the existence of &lt;code&gt;championships&lt;/code&gt; as a field, not testing to see if the value of the &lt;code&gt;championships&lt;/code&gt; field is set to &lt;code&gt;true&lt;/code&gt;. There&amp;rsquo;s a more convenient shorthand form available. (See &lt;a href=&quot;../pluck/index&quot;&gt;pluck&lt;/a&gt; for more details on this.)</source>
          <target state="translated">なお、 &lt;code&gt;true&lt;/code&gt; 例では、上記の存在について試験される &lt;code&gt;championships&lt;/code&gt; 、フィールドとしての値かどうかを確認するためにテストしない &lt;code&gt;championships&lt;/code&gt; フィールドに設定されている &lt;code&gt;true&lt;/code&gt; 。より便利な省略形があります。（これの詳細については、&lt;a href=&quot;../pluck/index&quot;&gt;pluck&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="b95d53711950543d65d38ace0235593f05e863af" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;write_acks&lt;/code&gt; and &lt;code&gt;durability&lt;/code&gt; don&amp;rsquo;t actually affect how the write is performed; they only affect when the acknowledgement is sent back to the client.</source>
          <target state="translated">&lt;code&gt;write_acks&lt;/code&gt; と &lt;code&gt;durability&lt;/code&gt; は実際には書き込みの実行方法に影響しないことに注意してください。確認がクライアントに送り返されるときにのみ影響します。</target>
        </trans-unit>
        <trans-unit id="7020586ba6fb68f8b3332682998d8be66b7d38f3" translate="yes" xml:space="preserve">
          <source>Note that a line between the north pole and south pole (from latitude &amp;minus;90 to latitude 90) cannot be calculated, as &lt;em&gt;all&lt;/em&gt; possible paths between them are the &amp;ldquo;shortest&amp;rdquo;; this may trigger an error in ReQL or it may choose an arbitrary (but technically correct) path.</source>
          <target state="translated">北極と南極の間の線（緯度-90から緯度90まで）は計算できません。それらの間の&lt;em&gt;すべての&lt;/em&gt;可能なパスが「最短」であるためです。これにより、ReQLでエラーがトリガーされるか、任意の（ただし技術的には正しい）パスが選択される可能性があります。</target>
        </trans-unit>
        <trans-unit id="869310050eda36904b9b1684e375eea8a27df6a7" translate="yes" xml:space="preserve">
          <source>Note that an index may not be immediately available after creation. If your application needs to use indexes immediately after creation, use the &lt;a href=&quot;../index_wait/index&quot;&gt;indexWait&lt;/a&gt; command to ensure the indexes are ready before use.</source>
          <target state="translated">インデックスは、作成後すぐに使用できない場合があることに注意してください。アプリケーションが作成直後にインデックスを使用する必要がある場合は、&lt;a href=&quot;../index_wait/index&quot;&gt;indexWait&lt;/a&gt;コマンドを使用して、インデックスを使用する前に準備してください。</target>
        </trans-unit>
        <trans-unit id="cc7bb93e73f8b5f0f5aac10c43c2d4956feb9dc0" translate="yes" xml:space="preserve">
          <source>Note that by default, RethinkDB only opens connections bound to &lt;code&gt;localhost&lt;/code&gt; in order to prevent unauthorized clients on the network from connecting to the server. The &lt;code&gt;--bind all&lt;/code&gt; option allows connections from anywhere on the network. It works well if the network is protected.</source>
          <target state="translated">デフォルトでは、RethinkDBは &lt;code&gt;localhost&lt;/code&gt; にバインドされた接続のみを開いて、ネットワーク上の不正なクライアントがサーバーに接続するのを防ぎます。 &lt;code&gt;--bind all&lt;/code&gt; オプションは、ネットワーク上のどこからでも接続することができます。ネットワークが保護されている場合はうまく機能します。</target>
        </trans-unit>
        <trans-unit id="07fbecac98fcf0f3caf272d28683d05c9f00b5fe" translate="yes" xml:space="preserve">
          <source>Note that if you call &lt;a href=&quot;../../api/javascript/table/index&quot;&gt;table&lt;/a&gt; with &lt;code&gt;identifier_format&lt;/code&gt; set to &lt;code&gt;uuid&lt;/code&gt;, then references to servers, tables and databases in the &lt;code&gt;info&lt;/code&gt; subdocument will be UUIDs rather than names.</source>
          <target state="translated">&lt;code&gt;identifier_format&lt;/code&gt; を &lt;code&gt;uuid&lt;/code&gt; に設定して&lt;a href=&quot;../../api/javascript/table/index&quot;&gt;table&lt;/a&gt;を呼び出すと、 &lt;code&gt;info&lt;/code&gt; サブドキュメント内のサーバー、テーブル、およびデータベースへの参照は、名前ではなくUUIDになります。</target>
        </trans-unit>
        <trans-unit id="6ae89b9920878619801ec2ca89056fee59578b79" translate="yes" xml:space="preserve">
          <source>Note that if you didn&amp;rsquo;t call &lt;code&gt;ungroup&lt;/code&gt;, you would instead select one random game from each player:</source>
          <target state="translated">&lt;code&gt;ungroup&lt;/code&gt; を呼び出さなかった場合は、代わりに各プレイヤーから1つのランダムゲームを選択することに注意してください。</target>
        </trans-unit>
        <trans-unit id="794a796e7f7b74c249460ac6df405541e4ffc7df" translate="yes" xml:space="preserve">
          <source>Note that in the last case, you&amp;rsquo;re required to provide a CA certificate as well. This is a certificate used to sign other certificates. In this case, we&amp;rsquo;re using the same certificate for both, but we could sign our &lt;code&gt;cert.pem&lt;/code&gt; with a different CA certificate and specify both of them. Servers can only connect to the cluster if the certificates specified by their &lt;code&gt;cluster-tls-cert&lt;/code&gt; value are signed by the CA certificate specified by &lt;code&gt;cluster-tls-ca&lt;/code&gt;.</source>
          <target state="translated">最後のケースでは、CA証明書も提供する必要があることに注意してください。これは、他の証明書に署名するために使用される証明書です。この場合、両方に同じ証明書を使用していますが、 &lt;code&gt;cert.pem&lt;/code&gt; に別のCA証明書で署名し、両方を指定することもできます。サーバーは、 &lt;code&gt;cluster-tls-cert&lt;/code&gt; 値で指定された証明書が &lt;code&gt;cluster-tls-ca&lt;/code&gt; で指定されたCA証明書によって署名されている場合にのみ、クラスターに接続できます。</target>
        </trans-unit>
        <trans-unit id="69a530ba90750d307c78bffe12c73f7bc690c170" translate="yes" xml:space="preserve">
          <source>Note that in this case, &lt;a href=&quot;../row/index&quot;&gt;row&lt;/a&gt; may be used as an alternative to writing an anonymous function, as it returns the same value as the function parameter receives:</source>
          <target state="translated">この場合、関数パラメーターが受け取るのと同じ値を返すため、無名関数を作成する代わりに&lt;a href=&quot;../row/index&quot;&gt;行&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="d4d62e0a372be981e1086845747762fa68efdd64" translate="yes" xml:space="preserve">
          <source>Note that looping over a cursor must be done with &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;fetch_next&lt;/code&gt;, rather than using a &lt;code&gt;for x in cursor&lt;/code&gt; loop.</source>
          <target state="translated">&lt;code&gt;for x in cursor&lt;/code&gt; ループは、カーソルループでfor xを使用するのではなく、 &lt;code&gt;while&lt;/code&gt; と &lt;code&gt;fetch_next&lt;/code&gt; を使用して実行する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f9631e710ce7fec5bb59199fdbb7bd3ffaa2b587" translate="yes" xml:space="preserve">
          <source>Note that passwords will be sent in plaintext unless you are using TLS encryption. Instead of (or in addition to) TLS, you can bind the driver port and use SSH tunneling, as described below.</source>
          <target state="translated">TLS 暗号化を使用していない限り、パスワードは平文で送信されることに注意してください。TLS の代わりに (またはそれに加えて)ドライバのポートをバインドして、以下に説明するように SSH トンネリングを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="caab8be7c7ee8a44aad19ce23e3ceec991876422" translate="yes" xml:space="preserve">
          <source>Note that queries with &lt;code&gt;getAll&lt;/code&gt; or &lt;code&gt;between&lt;/code&gt; may return the same document multiple times unless you use the &lt;a href=&quot;../../../api/javascript/distinct/index&quot;&gt;distinct&lt;/a&gt; command.</source>
          <target state="translated">あなたが&lt;a href=&quot;../../../api/javascript/distinct/index&quot;&gt;distinct&lt;/a&gt;コマンドを使用しない限り、 &lt;code&gt;getAll&lt;/code&gt; または &lt;code&gt;between&lt;/code&gt; 間のクエリは同じドキュメントを複数回返す可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c7c21b67930f527774bfd43705840df0f2b95c65" translate="yes" xml:space="preserve">
          <source>Note that rebuilding indexes is &lt;em&gt;not&lt;/em&gt; required if you&amp;rsquo;re upgrading between minor releases (i.e., 2.2.0 to 2.2.1).</source>
          <target state="translated">マイナーリリース（2.2.0から2.2.1）の間でアップグレードする場合、インデックスの再構築は必要あり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6f72e66b293b77e8428e776de4027ca58fa284cb" translate="yes" xml:space="preserve">
          <source>Note that server tags cannot be configured through RethinkDB&amp;rsquo;s web administration dashboard. They may be created and assigned through ReQL commands and scripts.</source>
          <target state="translated">RethinkDBのWeb管理ダッシュボードからサーバータグを構成することはできません。それらは、ReQLコマンドとスクリプトを通じて作成および割り当てられます。</target>
        </trans-unit>
        <trans-unit id="82182344e60cfb2c08352c68670095dcbc4419cc" translate="yes" xml:space="preserve">
          <source>Note that tables are configured on creation and when the &lt;code&gt;reconfigure&lt;/code&gt; command is called, but the configurations are &lt;em&gt;not&lt;/em&gt; stored by the server otherwise. To reconfigure tables consistently&amp;mdash;especially if your configuration uses server tags&amp;mdash;you should save the configuration in a script. Read more about this in &lt;a href=&quot;../administration-tools/index&quot;&gt;Administration tools&lt;/a&gt;.</source>
          <target state="translated">テーブルは作成時および &lt;code&gt;reconfigure&lt;/code&gt; コマンドが呼び出されたときに構成されますが、それ以外の場合、構成はサーバーによって保存され&lt;em&gt;ない&lt;/em&gt;ことに注意してください。テーブルを一貫して再構成するには（特に、構成でサーバータグを使用している場合）、構成をスクリプトに保存する必要があります。これについて詳しくは、&lt;a href=&quot;../administration-tools/index&quot;&gt;管理ツールを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cf5a0befe8f4a2d2c04f639c1bc0ee0b7b9f3d58" translate="yes" xml:space="preserve">
          <source>Note that the left bound (including the implied left bound of 0 in the 0- and 1-argument form) is always closed and the right bound is always open: the start value will always be included in the returned range and the end value will &lt;em&gt;not&lt;/em&gt; be included in the returned range.</source>
          <target state="translated">左境界（0および1引数形式での0の暗黙の左境界を含む）は常に閉じており、右境界は常に開いていることに注意してください。開始値は常に返される範囲に含まれ、終了値は返される範囲に含まれ&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8c2fd8bb823ff27914611ee376d7f11e792c0216" translate="yes" xml:space="preserve">
          <source>Note that the sequence being merged&amp;mdash;in this example, the comments&amp;mdash;must be coerced from a selection to an array. Without &lt;code&gt;coerceTo&lt;/code&gt; the operation will throw an error (&amp;ldquo;Expected type DATUM but found SELECTION&amp;rdquo;).</source>
          <target state="translated">マージされるシーケンス（この例ではコメント）は、選択から配列に強制変換する必要があることに注意してください。 &lt;code&gt;coerceTo&lt;/code&gt; がなければ、操作はエラーをスローします（「タイプDATUMが必要ですが、SELECTIONが見つかりました」）。</target>
        </trans-unit>
        <trans-unit id="e98abad9a62e2bab40d6be837e719bce034e43c6" translate="yes" xml:space="preserve">
          <source>Note that the values for &lt;code&gt;author_id&lt;/code&gt; correspond to the &lt;code&gt;id&lt;/code&gt; field of the author, which allows us to link the documents.</source>
          <target state="translated">&lt;code&gt;author_id&lt;/code&gt; の値は作成者の &lt;code&gt;id&lt;/code&gt; フィールドに対応しているため、ドキュメントをリンクできることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d8ca43a4f1a4253668972ac4f388573e961d6210" translate="yes" xml:space="preserve">
          <source>Note that we first selected every author in the table, and then chained the &lt;code&gt;update&lt;/code&gt; command to the end of the query. We could also update a subset of documents by filtering the table first. Let&amp;rsquo;s update William Adama&amp;rsquo;s record to note that he has the rank of Admiral:</source>
          <target state="translated">最初にテーブル内のすべての作成者を選択し、次に &lt;code&gt;update&lt;/code&gt; コマンドをクエリの最後にチェーンしていることに注意してください。最初にテーブルをフィルタリングして、ドキュメントのサブセットを更新することもできます。ウィリアムアダマの記録を更新して、彼が提督の階級を持っていることに注目しましょう。</target>
        </trans-unit>
        <trans-unit id="92ed5dd039e24ac49d654376ac966bb44a6b7f52" translate="yes" xml:space="preserve">
          <source>Note that while &lt;code&gt;r.do()&lt;/code&gt; takes the function as its &lt;em&gt;last&lt;/em&gt; argument, &lt;code&gt;FUNCALL&lt;/code&gt; serializes the function as its &lt;em&gt;first&lt;/em&gt; argument.</source>
          <target state="translated">&lt;code&gt;r.do()&lt;/code&gt; は関数を&lt;em&gt;最後の&lt;/em&gt;引数として &lt;code&gt;FUNCALL&lt;/code&gt; ますが、FUNCALLは関数を&lt;em&gt;最初の&lt;/em&gt;引数としてシリアル化することに注意してください。</target>
        </trans-unit>
        <trans-unit id="961048dc5c12584ceafa08e33e5c7ca4211def59" translate="yes" xml:space="preserve">
          <source>Note that you can omit the &lt;code&gt;db&lt;/code&gt; command if you&amp;rsquo;re creating a table in the default database on your connection (set to &lt;code&gt;test&lt;/code&gt; unless specified in &lt;code&gt;connect&lt;/code&gt;).</source>
          <target state="translated">接続のデフォルトデータベースにテーブルを作成する場合は、 &lt;code&gt;db&lt;/code&gt; コマンドを省略できることに注意してください（ &lt;code&gt;connect&lt;/code&gt; で指定されていない限り、 &lt;code&gt;test&lt;/code&gt; 設定されています）。</target>
        </trans-unit>
        <trans-unit id="02badbdd66f3ecc05d33efbafafd420cfaa47135" translate="yes" xml:space="preserve">
          <source>Note that you will not be able to read the &lt;code&gt;iterations&lt;/code&gt; value for an account; as it&amp;rsquo;s stored in the password field, it remains read-only.</source>
          <target state="translated">アカウントの &lt;code&gt;iterations&lt;/code&gt; 値を読み取ることができないことに注意してください。パスワードフィールドに格納されているため、読み取り専用のままです。</target>
        </trans-unit>
        <trans-unit id="8cb089f10f83d1ccdecb1a60a861bab8d0ee2602" translate="yes" xml:space="preserve">
          <source>Note the command line parameters we used to start the second node:</source>
          <target state="translated">2番目のノードを起動するために使用したコマンドラインパラメータに注目してください。</target>
        </trans-unit>
        <trans-unit id="44da02227d007949366a19f44ea67a15d04cf1dc" translate="yes" xml:space="preserve">
          <source>Note the id of the security group. It will start with &lt;code&gt;sg-&lt;/code&gt;.</source>
          <target state="translated">セキュリティグループのIDをメモします。 &lt;code&gt;sg-&lt;/code&gt; で始まります。</target>
        </trans-unit>
        <trans-unit id="4be3a7d8983105ceac2d9d6226a9207c4e4a7f87" translate="yes" xml:space="preserve">
          <source>Note the port numbers you can use to access RethinkDB:</source>
          <target state="translated">RethinkDBへのアクセスに使用できるポート番号に注意してください。</target>
        </trans-unit>
        <trans-unit id="520bd0b12df7f31816c20ea08f041b38cd1efc9c" translate="yes" xml:space="preserve">
          <source>Note: Only alphanumeric characters and underscores are valid for the database name.</source>
          <target state="translated">注:データベース名には英数字とアンダースコアのみ有効です。</target>
        </trans-unit>
        <trans-unit id="e4f1dfb495411f7c79397bcc72d7fc74a5c0836b" translate="yes" xml:space="preserve">
          <source>Note: The last argument given will always be the &amp;lsquo;open&amp;rsquo; side of the range, but when generating a floating-point number, the &amp;lsquo;open&amp;rsquo; side may be less than the &amp;lsquo;closed&amp;rsquo; side.</source>
          <target state="translated">注：与えられた最後の引数は常に範囲の「オープン」側になりますが、浮動小数点数を生成する場合、「オープン」側は「クローズ」側よりも小さい場合があります。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="ceb637042a0d9428c0df8add2990697098a05c47" translate="yes" xml:space="preserve">
          <source>Notes on connections</source>
          <target state="translated">接続に関する注意事項</target>
        </trans-unit>
        <trans-unit id="b4d5a0b9e73af6cd9b264bcafa717aeda3b8bd40" translate="yes" xml:space="preserve">
          <source>Now consider a larger example:</source>
          <target state="translated">では、もっと大きな例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="3a1aea1028da8d2cfbf3ca018738fc4dca263dc7" translate="yes" xml:space="preserve">
          <source>Now create an SSH tunnel on the server that needs to access the remote RethinkDB driver port:</source>
          <target state="translated">リモートのRethinkDBドライバのポートにアクセスする必要があるサーバ上にSSHトンネルを作成します。</target>
        </trans-unit>
        <trans-unit id="36c86a37d15270331c5ca41f45f937ef93547855" translate="yes" xml:space="preserve">
          <source>Now for something more complicated: calculating the total and average quantities sold per item. For this, we&amp;rsquo;ll use the &lt;a href=&quot;https://rethinkdb.com/api/python/concat_map&quot;&gt;concat_map&lt;/a&gt; function, which combines mapping and concatenation together. In this case, we want to produce a sequence of all the items sold throughout all the orders with their item IDs and quantities. We&amp;rsquo;ll also add a &amp;ldquo;count&amp;rdquo; field set to &lt;code&gt;1&lt;/code&gt;; we&amp;rsquo;ll use this the same way we used the mapping of each post in the blog example.</source>
          <target state="translated">次に、より複雑なものについて、アイテムごとに販売された合計数量と平均数量を計算します。これには、マッピングと連結を組み合わせた&lt;a href=&quot;https://rethinkdb.com/api/python/concat_map&quot;&gt;concat_map&lt;/a&gt;関数を使用します。この例では、すべての注文を通じて販売されたすべてのアイテムのシーケンスを、アイテムIDと数量とともに生成します。また、「count」フィールドを &lt;code&gt;1&lt;/code&gt; に設定して追加します。これは、ブログの例で各投稿のマッピングを使用したのと同じ方法で使用します。</target>
        </trans-unit>
        <trans-unit id="83b7df19c7a7fab5f6f86d5d49556fd86a1c4ed9" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s access a real JSON API. In this example we&amp;rsquo;re going to use GitHub &amp;mdash; a collaborative development platform that hosts thousands of open-source projects. Users on GitHub can indicate interest by starring projects and following other users. GitHub calls users who starred other projects &amp;ldquo;stargazers&amp;rdquo;.</source>
          <target state="translated">次に、実際のJSON APIにアクセスします。この例では、何千ものオープンソースプロジェクトをホストする共同開発プラットフォームであるGitHubを使用します。GitHubのユーザーは、プロジェクトにスターを付けたり、他のユーザーをフォローしたりすることで、関心を示すことができます。GitHubは、他のプロジェクトにスターを付けたユーザーを「スターゲイザー」と呼んでいます。</target>
        </trans-unit>
        <trans-unit id="7e792f8e7d51655e21b3f588eca27d6ee4ec76c2" translate="yes" xml:space="preserve">
          <source>Now start the second RethinkDB instance on the same machine:</source>
          <target state="translated">次に、同じマシン上で2つ目のRethinkDBインスタンスを起動します。</target>
        </trans-unit>
        <trans-unit id="c29ee53738e56f268012e978255da2e21fb2123f" translate="yes" xml:space="preserve">
          <source>Now switch back to your first terminal. We&amp;rsquo;ll be updating and deleting some documents in the next two sections. As we run these commands, the feed will push notifications to your program. The code above will print the following messages in the second terminal:</source>
          <target state="translated">次に、最初のターミナルに切り替えます。次の2つのセクションでは、一部のドキュメントを更新および削除します。これらのコマンドを実行すると、フィードがプログラムに通知をプッシュします。上記のコードは、2番目のターミナルに次のメッセージを出力します。</target>
        </trans-unit>
        <trans-unit id="a233b26c262807902c4cc9fc0e713ee2a3c939fb" translate="yes" xml:space="preserve">
          <source>Now that we inserted some data, let&amp;rsquo;s see how we can query the database!</source>
          <target state="translated">データを挿入したので、データベースにクエリを実行する方法を見てみましょう！</target>
        </trans-unit>
        <trans-unit id="8efdd3a96ed18374cd2b44f39375f891439bba62" translate="yes" xml:space="preserve">
          <source>Now that we&amp;rsquo;ve installed the plugin, the next step is to actually configure it to connect to our RethinkDB instance. We can do that by talking to Elasticsearch&amp;rsquo;s REST API. There are three concepts we need to deal with in the API: indexes, types, and documents. A document is the actual data being stored itself and is just JSON. A type contains documents and is similar to a table in RethinkDB. An index contains types and is similar to a database in RethinkDB.</source>
          <target state="translated">プラグインをインストールしたので、次のステップは、実際にプラグインを構成してRethinkDBインスタンスに接続することです。そのためには、ElasticsearchのREST APIを使用します。APIで処理する必要がある3つの概念があります。インデックス、タイプ、ドキュメントです。ドキュメントは、それ自体が格納される実際のデータであり、単なるJSONです。タイプはドキュメントを含み、RethinkDBのテーブルに似ています。インデックスにはタイプが含まれ、RethinkDBのデータベースに似ています。</target>
        </trans-unit>
        <trans-unit id="e816e64d8ebb842e4b0118841e17ba4aab267ea3" translate="yes" xml:space="preserve">
          <source>Now the coroutine will run in the background, printing out changes. When we alter the table, the changes will be noticed.</source>
          <target state="translated">これで、コルーチンはバックグラウンドで実行され、変更を出力します。テーブルを変更すると、変更内容が表示されます。</target>
        </trans-unit>
        <trans-unit id="88579e11bba37adb2b24fcaf9dceaf04746ffa0d" translate="yes" xml:space="preserve">
          <source>Now the task will run in the background, printing out changes. When we alter the table, the changes will be noticed.</source>
          <target state="translated">これでタスクはバックグラウンドで実行され、変更を印刷します。テーブルを変更すると、変更内容が表示されます。</target>
        </trans-unit>
        <trans-unit id="96aaeca03bd2a83f83cdc2012364ba4295826827" translate="yes" xml:space="preserve">
          <source>Now we can plug our changes directly into Rabbit:</source>
          <target state="translated">これで、変更した内容を直接Rabbitにプラグインすることができるようになりました。</target>
        </trans-unit>
        <trans-unit id="7cca3688c70abd6d885cd1f6703f8f921526df1a" translate="yes" xml:space="preserve">
          <source>Now we can publish any arbitrary JSON document to the topic:</source>
          <target state="translated">これで、任意のJSONドキュメントをトピックに公開できるようになりました。</target>
        </trans-unit>
        <trans-unit id="2399a2288ab147cdf7e8afafb71d676fc702e4fb" translate="yes" xml:space="preserve">
          <source>Now we need to &amp;ldquo;bind&amp;rdquo; the queue to the topics we&amp;rsquo;re interested in. Other listeners can subscribe to the same topic, and Rabbit will copy the message for every queue. Here, we&amp;rsquo;ll just keep it simple and bind to all events from &amp;ldquo;mytable&amp;rdquo;:</source>
          <target state="translated">次に、キューを関心のあるトピックに「バインド」する必要があります。他のリスナーが同じトピックをサブスクライブでき、Rabbitはすべてのキューのメッセージをコピーします。ここでは、単純にして、「mytable」からのすべてのイベントにバインドします。</target>
        </trans-unit>
        <trans-unit id="0c8880d6597c3169973e8e1627a2c6d6907027cb" translate="yes" xml:space="preserve">
          <source>Now we&amp;rsquo;d like to sort RethinkDB stargazers by influence. When you request stargazers from GitHub, the GitHub API doesn&amp;rsquo;t include the number of followers for each stargazer, but it does include a field &lt;code&gt;url&lt;/code&gt; specific to each stargazer. If you follow this URL, the GitHub API will return additional information for the user, including the number of their followers.</source>
          <target state="translated">次に、RethinkDBスターゲイザーを影響度でソートしたいと思います。GitHubからスターゲイザーをリクエストすると、GitHub APIには各スターゲイザーのフォロワー数は含まれませんが、各スターゲイザーに固有のフィールド &lt;code&gt;url&lt;/code&gt; は含まれます。このURLをフォローすると、GitHub APIはフォロワーの数など、ユーザーの追加情報を返します。</target>
        </trans-unit>
        <trans-unit id="1ceb299c25786316a08bb16460c9243fa1eec175" translate="yes" xml:space="preserve">
          <source>Now with a &amp;ldquo;clean&amp;rdquo; data set we can run simple reports right in the Data Explorer. (You might want to switch to Table View for some of these, and you can also add &lt;code&gt;.without('id')&lt;/code&gt; in the command chain to &amp;ldquo;prettify&amp;rdquo; the table display if you wish.)</source>
          <target state="translated">「クリーン」なデータセットを使用して、データエクスプローラーで簡単なレポートを実行できます。（これらの一部をテーブルビューに切り替えることもできます。必要に応じて、コマンドチェーンに &lt;code&gt;.without('id')&lt;/code&gt; を追加して、テーブル表示を「整然とさせる」こともできます。）</target>
        </trans-unit>
        <trans-unit id="9caa73cdf116b57684d6c1c8b8b9f44f4d600fcd" translate="yes" xml:space="preserve">
          <source>Now, consider a larger example.</source>
          <target state="translated">では、もっと大きな例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="afea3b1aecf0d259448b1b35c58dad9976a271d3" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s get those back:</source>
          <target state="translated">今、それらを取り戻しましょう：</target>
        </trans-unit>
        <trans-unit id="e6ed379404867578a5a6db513257215a7d553130" translate="yes" xml:space="preserve">
          <source>Now, use one of the following two methods to enable secure access.</source>
          <target state="translated">さて、次の2つの方法のいずれかを使用して、安全なアクセスを可能にします。</target>
        </trans-unit>
        <trans-unit id="fba0bbb4e77831e38e81b55c86757fe6c887f2ef" translate="yes" xml:space="preserve">
          <source>Now, we&amp;rsquo;ll &lt;code&gt;group&lt;/code&gt; by the &lt;code&gt;item_id&lt;/code&gt; field and use a custom &lt;code&gt;reduce&lt;/code&gt; function to sum the quantities and counts.</source>
          <target state="translated">今、私たちはよ &lt;code&gt;group&lt;/code&gt; BY &lt;code&gt;item_id&lt;/code&gt; フィールドとカスタムを使用 &lt;code&gt;reduce&lt;/code&gt; 量や回数を合計する機能を。</target>
        </trans-unit>
        <trans-unit id="c4dffe1e129e38cabba8445af4a117e656e614bc" translate="yes" xml:space="preserve">
          <source>Now, when any heroes are added, modified or deleted from either table, a change notification will be sent out.</source>
          <target state="translated">これで、いずれかのテーブルからヒーローが追加、変更、削除されると、変更通知が送信されるようになりました。</target>
        </trans-unit>
        <trans-unit id="2c148f3b7dd44ba4e2ab9591ded50bd106dde2f1" translate="yes" xml:space="preserve">
          <source>Now, you can use ReQL commands to query system tables and perform reconfiguration commands. To return the server status, you can query the &lt;code&gt;server_status&lt;/code&gt; system table in the special &lt;code&gt;rethinkdb&lt;/code&gt; database.</source>
          <target state="translated">これで、ReQLコマンドを使用してシステムテーブルにクエリを実行し、再構成コマンドを実行できるようになりました。サーバーのステータスを返すには、特別な &lt;code&gt;rethinkdb&lt;/code&gt; データベースの &lt;code&gt;server_status&lt;/code&gt; システムテーブルをクエリします。</target>
        </trans-unit>
        <trans-unit id="85120bce76a23e361fb938c44bc73facc906afcd" translate="yes" xml:space="preserve">
          <source>ORMs</source>
          <target state="translated">ORMs</target>
        </trans-unit>
        <trans-unit id="9954b5cb646af3e1d62f8936ee802e399e164efe" translate="yes" xml:space="preserve">
          <source>OS X</source>
          <target state="translated">オーエスエックス</target>
        </trans-unit>
        <trans-unit id="9cf4af30df052d80876381f9ec0e05811ecd3d08" translate="yes" xml:space="preserve">
          <source>Objective-C</source>
          <target state="translated">Objective-C</target>
        </trans-unit>
        <trans-unit id="3868dbba6ab95babefa387180cf6de66e170f8ea" translate="yes" xml:space="preserve">
          <source>Official RethinkDB client drivers for Python, JavaScript, Java, and Ruby</source>
          <target state="translated">Python、JavaScript、Java、Ruby用の公式RethinkDBクライアントドライバ</target>
        </trans-unit>
        <trans-unit id="74cdd5cbbd592f9b99c0f8d5979f1463f350d5ff" translate="yes" xml:space="preserve">
          <source>Official drivers</source>
          <target state="translated">公式ドライバー</target>
        </trans-unit>
        <trans-unit id="ebd6ec34f67b785d250d426fa00edef1acad05a5" translate="yes" xml:space="preserve">
          <source>Official packages</source>
          <target state="translated">公式パッケージ</target>
        </trans-unit>
        <trans-unit id="831937a5ef9ec548ca483436b44fdfe4b969dfca" translate="yes" xml:space="preserve">
          <source>Older versions</source>
          <target state="translated">古いバージョン</target>
        </trans-unit>
        <trans-unit id="d65b6345aa5b8fc44215a53289fccbbb539c6d88" translate="yes" xml:space="preserve">
          <source>On &lt;code&gt;false&lt;/code&gt;, the server will send an error and error code as above.</source>
          <target state="translated">で &lt;code&gt;false&lt;/code&gt; 、サーバーは、上記のように、エラーとエラーコードを送信します。</target>
        </trans-unit>
        <trans-unit id="c1cebe4c7f1c61569d9257cc40cc35bbf81ae6de" translate="yes" xml:space="preserve">
          <source>On &lt;code&gt;false&lt;/code&gt;, the server will send an error and error code.</source>
          <target state="translated">で &lt;code&gt;false&lt;/code&gt; 、サーバがエラーとエラーコードを送信します。</target>
        </trans-unit>
        <trans-unit id="4412954aef37a85b9b6c203be268bc8e49fc7bc0" translate="yes" xml:space="preserve">
          <source>On &lt;strong&gt;failure,&lt;/strong&gt; the server sends a null-terminated error string (&lt;em&gt;not&lt;/em&gt; JSON).</source>
          <target state="translated">上&lt;strong&gt;の障害、&lt;/strong&gt;サーバーは、NULLで終了するエラー文字列（送信&lt;em&gt;ではない&lt;/em&gt; JSONを）。</target>
        </trans-unit>
        <trans-unit id="f51347c7500404083d9d35f76646a95435173ff5" translate="yes" xml:space="preserve">
          <source>On &lt;strong&gt;success,&lt;/strong&gt; the server sends a null-terminated JSON response, indicating success, minimum and maximum protocol versions, and the server version.</source>
          <target state="translated">上の&lt;strong&gt;成功、&lt;/strong&gt;サーバは、成功、最小および最大プロトコルバージョン、およびサーバのバージョンを示す、ヌル終了JSON応答を送信します。</target>
        </trans-unit>
        <trans-unit id="bb940d279b36ee1325e1f1b7715aa2df3888293b" translate="yes" xml:space="preserve">
          <source>On the &lt;a href=&quot;https://aws.amazon.com/marketplace/pp/B013R60Q8Y&quot;&gt;RethinkDB marketplace page&lt;/a&gt;, click the &lt;strong&gt;Continue&lt;/strong&gt; button.</source>
          <target state="translated">上&lt;a href=&quot;https://aws.amazon.com/marketplace/pp/B013R60Q8Y&quot;&gt;RethinkDB市場ページ&lt;/a&gt;、クリックしてください&lt;strong&gt;続行&lt;/strong&gt;ボタンを。</target>
        </trans-unit>
        <trans-unit id="b81c1cb3f1e6975a3ac220d8d48062c1f8158f69" translate="yes" xml:space="preserve">
          <source>Once RethinkDB is running, you can connect to it at &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;, assuming you&amp;rsquo;ve kept the default port (8080) and it&amp;rsquo;s running on your local machine.</source>
          <target state="translated">RethinkDBが実行されたら、デフォルトポート（8080）を維持し、ローカルマシンで実行されていると想定して、&lt;a href=&quot;http://localhost:8080&quot;&gt;http：// localhost：8080&lt;/a&gt;でそれに接続できます。</target>
        </trans-unit>
        <trans-unit id="7ee24599fbbe748a6207ac5abb75b2f0ce146744" translate="yes" xml:space="preserve">
          <source>Once a server has been given a tag, the tags may be used to assign table replicas to servers with the same tags using the &lt;code&gt;reconfigure&lt;/code&gt; command. Read the section of this document on &lt;a href=&quot;#server-tags&quot;&gt;Server tags&lt;/a&gt; for more details.</source>
          <target state="translated">サーバーにタグが付けられると、タグは、 &lt;code&gt;reconfigure&lt;/code&gt; コマンドを使用して、同じタグを持つサーバーにテーブルのレプリカを割り当てるために使用できます。詳細については、&lt;a href=&quot;#server-tags&quot;&gt;サーバータグ&lt;/a&gt;に関するこのドキュメントのセクションをお読みください。</target>
        </trans-unit>
        <trans-unit id="e5540408974abb67910a41cc619a4fa95a13d057" translate="yes" xml:space="preserve">
          <source>Once the &lt;a href=&quot;https://rethinkdb.com/api/python/run&quot;&gt;run&lt;/a&gt; command is processed, the serialized query needs to be wrapped in the message sent to the server. The complete message takes the form:</source>
          <target state="translated">&lt;a href=&quot;https://rethinkdb.com/api/python/run&quot;&gt;run&lt;/a&gt;コマンドが処理されたら、シリアル化されたクエリをサーバーに送信されるメッセージにラップする必要があります。完全なメッセージの形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="53bf8635a8710aec13732e6e69e7bc521527324f" translate="yes" xml:space="preserve">
          <source>Once the query is sent, you can read the response object back from the server. The response object takes the following form:</source>
          <target state="translated">クエリが送信されると、サーバーからレスポンスオブジェクトを読み返すことができます。レスポンスオブジェクトは以下の形式をとります。</target>
        </trans-unit>
        <trans-unit id="3581112a511227ecab2edb84928b539f7af5864d" translate="yes" xml:space="preserve">
          <source>Once you block the web interface port in the step above, the easiest way to access it is to use ssh to set up a SOCKS proxy. Run the following command on your local server (not the one running RethinkDB):</source>
          <target state="translated">上記の手順でWebインターフェイスのポートをブロックしたら、それにアクセスする最も簡単な方法は、sshを使用してSOCKSプロキシを設定することです。ローカルサーバ (RethinkDB を実行しているサーバではありません)で以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="d54a699f360387d75f05e3a07ed4952abe9ff92f" translate="yes" xml:space="preserve">
          <source>Once you have several machines in a RethinkDB cluster, you can improve your cluster&amp;rsquo;s efficiency by running a &lt;em&gt;proxy node&lt;/em&gt; on each application server and having the client application connect to the proxy on &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="translated">RethinkDBクラスターに複数のマシンを用意したら、各アプリケーションサーバーで&lt;em&gt;プロキシノード&lt;/em&gt;を実行し、クライアントアプリケーションを &lt;code&gt;localhost&lt;/code&gt; 上のプロキシに接続させることで、クラスターの効率を向上させることができます。</target>
        </trans-unit>
        <trans-unit id="0dbb1fe10358fc30c28cd5763913addfac15ea73" translate="yes" xml:space="preserve">
          <source>Once you start using the &lt;code&gt;EventEmitter&lt;/code&gt; interface, the other RethinkDB cursor commands like &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;toArray&lt;/code&gt;, and &lt;code&gt;each&lt;/code&gt; will not be available anymore.</source>
          <target state="translated">&lt;code&gt;EventEmitter&lt;/code&gt; インターフェースの使用を開始すると、 &lt;code&gt;next&lt;/code&gt; 、 &lt;code&gt;toArray&lt;/code&gt; などのその他のRethinkDBカーソルコマンド、および &lt;code&gt;each&lt;/code&gt; コマンドは使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="5e0cf5a9798cd7d0b4bee1fb0bc70175a34b8763" translate="yes" xml:space="preserve">
          <source>Once you&amp;rsquo;ve got the data in your Elasticsearch server, you&amp;rsquo;re ready to go. Here&amp;rsquo;s an example of a simple query using the Elasticsearch REST API:</source>
          <target state="translated">Elasticsearchサーバーにデータを取得したら、準備は完了です。以下は、Elasticsearch REST APIを使用した簡単なクエリの例です。</target>
        </trans-unit>
        <trans-unit id="91405022f24ea795a6deb7e4bd6123de31f00a95" translate="yes" xml:space="preserve">
          <source>One document exists in &lt;code&gt;db_config&lt;/code&gt; for each database in the cluster, with only two fields in the document.</source>
          <target state="translated">クラスター内のデータベースごとに1つのドキュメントが &lt;code&gt;db_config&lt;/code&gt; に存在し、ドキュメント内のフィールドは2つだけです。</target>
        </trans-unit>
        <trans-unit id="1aefbe1f3a3edcbf196b9064f46c2b010b75a91e" translate="yes" xml:space="preserve">
          <source>One error in particular is notable. If you have a coroutine set to consume a changefeed indefinitely, and the connection closes, the coroutine will experience a &lt;code&gt;ReqlRuntimeError&lt;/code&gt;.</source>
          <target state="translated">特に1つのエラーが顕著です。変更フィードを無期限に使用するようにコルーチンを設定していて、接続が閉じている場合、コルーチンは &lt;code&gt;ReqlRuntimeError&lt;/code&gt; を経験します。</target>
        </trans-unit>
        <trans-unit id="f970864af19d41ebb8dfcca5915e187b5747d24e" translate="yes" xml:space="preserve">
          <source>One error in particular is notable. If you have a task that consumes a changefeed indefinitely, and the connection closes, the task will experience a &lt;code&gt;ReqlRuntimeError&lt;/code&gt;.</source>
          <target state="translated">特に1つのエラーが顕著です。変更フィードを無期限に消費するタスクがあり、接続が閉じると、タスクで &lt;code&gt;ReqlRuntimeError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="16aa2d8ea363974f203646459194020c667345ca" translate="yes" xml:space="preserve">
          <source>One more way to write the previous query is to set the age to be &lt;code&gt;-1&lt;/code&gt; when the field is missing.</source>
          <target state="translated">前のクエリを記述するもう1つの方法は、フィールドが欠落しているときに年齢を &lt;code&gt;-1&lt;/code&gt; に設定することです。</target>
        </trans-unit>
        <trans-unit id="c3e019a9ff633c6020fe2ace6839ac83a61316c9" translate="yes" xml:space="preserve">
          <source>One to many relations</source>
          <target state="translated">一対多の関係</target>
        </trans-unit>
        <trans-unit id="2e0254c28e2b06c621fe3e5af23ceeb7e03e64e7" translate="yes" xml:space="preserve">
          <source>Ongoing</source>
          <target state="translated">Ongoing</target>
        </trans-unit>
        <trans-unit id="066193625de0ad53074bd617e05acb13fb7e193d" translate="yes" xml:space="preserve">
          <source>Only a limited subset of ReQL commands may be chained after &lt;code&gt;binary&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;binary&lt;/code&gt; 後にチェーンできるのは、ReQLコマンドの限られたサブセットのみです。</target>
        </trans-unit>
        <trans-unit id="bddea468cb2adb77cc258c3b88f6e01f0752c0bc" translate="yes" xml:space="preserve">
          <source>Only longitude/latitude coordinates are supported. GeoJSON objects that use Cartesian coordinates, specify an altitude, or specify their own coordinate reference system will be rejected.</source>
          <target state="translated">経度/緯度座標のみサポートされています。直交座標を使用したり、高度を指定したり、独自の座標参照システムを指定したりするGeoJSONオブジェクトは拒否されます。</target>
        </trans-unit>
        <trans-unit id="262b6559e88c687d15b623deba02fac703403295" translate="yes" xml:space="preserve">
          <source>Open a TCP connection to the server on the driver port. The default port is &lt;code&gt;28015&lt;/code&gt;.</source>
          <target state="translated">ドライバーポートでサーバーへのTCP接続を開きます。デフォルトのポートは &lt;code&gt;28015&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1c232e4ef552d94c7bc322934608dfd9c1f3678b" translate="yes" xml:space="preserve">
          <source>Open a connection</source>
          <target state="translated">接続を開く</target>
        </trans-unit>
        <trans-unit id="65160f68c4c399c8650355e13e625aa1a85b20f6" translate="yes" xml:space="preserve">
          <source>Open the &lt;strong&gt;Security Groups&lt;/strong&gt; section of the administration console.</source>
          <target state="translated">管理コンソールの[ &lt;strong&gt;セキュリティグループ]&lt;/strong&gt;セクションを開きます。</target>
        </trans-unit>
        <trans-unit id="3098205123cfb916f292fb3965082298a4ab6621" translate="yes" xml:space="preserve">
          <source>Open the RethinkDB Data Explorer in the web UI and execute the following command:</source>
          <target state="translated">Web UIでRethinkDB Data Explorerを開き、以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="26e94e9d577c801c827b900c0b793db4e3600d97" translate="yes" xml:space="preserve">
          <source>OpenSSL will ask you to enter information for the certificate. While some of these questions can be left at their default, the &amp;ldquo;Common Name&amp;rdquo; must match the domain name of your server. For local testing purposes you can use &lt;code&gt;localhost&lt;/code&gt;, but not in production.</source>
          <target state="translated">OpenSSLは、証明書の情報を入力するよう要求します。これらの質問の一部はデフォルトのままにすることができますが、「共通名」はサーバーのドメイン名と一致する必要があります。ローカルテストの目的で &lt;code&gt;localhost&lt;/code&gt; を使用できますが、本番環境では使用できません。</target>
        </trans-unit>
        <trans-unit id="005f473987f60d5de30a1511d957a61d11d7b074" translate="yes" xml:space="preserve">
          <source>Opera 1.62 or higher</source>
          <target state="translated">オペラ1.62以上</target>
        </trans-unit>
        <trans-unit id="800944565827543e19a120253438c1772df26425" translate="yes" xml:space="preserve">
          <source>Operations on authors and posts don&amp;rsquo;t require loading the data for every post for a given author into memory.</source>
          <target state="translated">著者と投稿の操作では、特定の著者のすべての投稿のデータをメモリに読み込む必要はありません。</target>
        </trans-unit>
        <trans-unit id="67910125278b444143eb3baa7f7a144f98b62c28" translate="yes" xml:space="preserve">
          <source>Optimizing query performance</source>
          <target state="translated">クエリ性能の最適化</target>
        </trans-unit>
        <trans-unit id="3c7b449b88c10330229439fe19c9db3e4b06af90" translate="yes" xml:space="preserve">
          <source>Optional arguments available with &lt;code&gt;circle&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;circle&lt;/code&gt; で使用できるオプションの引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e91d767910b702fe59c28c74e7779fc7e01b53ac" translate="yes" xml:space="preserve">
          <source>Optional arguments available with &lt;code&gt;distance&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;distance&lt;/code&gt; 使用できるオプションの引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="655dae8fdf9f43c66dc061c5ade6f0a366837031" translate="yes" xml:space="preserve">
          <source>Options for imports include:</source>
          <target state="translated">輸入品のオプションには、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="52b7d82bd544399dc5fb544375b8f490d76aeee0" translate="yes" xml:space="preserve">
          <source>Options to &lt;code&gt;dump&lt;/code&gt; let you specify cluster information and limit the archive to specific databases or tables.</source>
          <target state="translated">&lt;code&gt;dump&lt;/code&gt; オプションを使用すると、クラスター情報を指定して、アーカイブを特定のデータベースまたはテーブルに制限できます。</target>
        </trans-unit>
        <trans-unit id="c82e2b89585dcea4afe8d1cf12f407a6d9a9afae" translate="yes" xml:space="preserve">
          <source>Or create a secondary index on them:</source>
          <target state="translated">あるいは、それらにセカンダリインデックスを作成します。</target>
        </trans-unit>
        <trans-unit id="76ee0a831a4163c3b30755e038356362dcf59b70" translate="yes" xml:space="preserve">
          <source>Or, Bob&amp;rsquo;s work phone and Skype handle:</source>
          <target state="translated">または、ボブの職場の電話とSkypeのハンドル：</target>
        </trans-unit>
        <trans-unit id="dea3c588ab8bfc482b4550169db7672275347564" translate="yes" xml:space="preserve">
          <source>Or, let&amp;rsquo;s pluck out usernames and IDs, and sort the array in ascending order by user IDs:</source>
          <target state="translated">または、ユーザー名とIDを取り出し、配列をユーザーIDの昇順で並べ替えます。</target>
        </trans-unit>
        <trans-unit id="a8617c20d3ebc00ea8af63ceb4ece5ae885ba2bb" translate="yes" xml:space="preserve">
          <source>Or, let&amp;rsquo;s try to delete a single user:</source>
          <target state="translated">または、1人のユーザーを削除してみましょう。</target>
        </trans-unit>
        <trans-unit id="517d47ffe448c40f8d65907d0e9bbb885347087a" translate="yes" xml:space="preserve">
          <source>Oracle Java 1.8.0 on the client nodes</source>
          <target state="translated">クライアントノード上のOracle Java 1.8.0</target>
        </trans-unit>
        <trans-unit id="a67de582176ad1685ed737600c40cb806a9dc02a" translate="yes" xml:space="preserve">
          <source>Order by date and title.</source>
          <target state="translated">日付とタイトルから順にご紹介します。</target>
        </trans-unit>
        <trans-unit id="1d3437a75ca6256f37c2450c0c776fb565f1c788" translate="yes" xml:space="preserve">
          <source>Ordering without an index requires the server to load the whole sequence in an array, which is limited by default to 100,000 documents. You can use the &lt;code&gt;arrayLimit&lt;/code&gt; option to &lt;a href=&quot;../../api/javascript/run/index&quot;&gt;run&lt;/a&gt; to temporarily raise this limit. However, a more efficient option is to use an index. See the documentation for &lt;a href=&quot;../../api/javascript/order_by/index&quot;&gt;orderBy&lt;/a&gt; for more information.</source>
          <target state="translated">インデックスなしで注文すると、サーバーは配列全体を配列でロードする必要があります。配列はデフォルトで100,000ドキュメントに制限されています。 &lt;code&gt;arrayLimit&lt;/code&gt; オプションを使用して&lt;a href=&quot;../../api/javascript/run/index&quot;&gt;実行&lt;/a&gt;すると、この制限を一時的に引き上げることができます。ただし、より効率的なオプションはインデックスを使用することです。詳細については、&lt;a href=&quot;../../api/javascript/order_by/index&quot;&gt;orderBy&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="0635fe7d51a8df49e7a657f79a8f6473abb466ab" translate="yes" xml:space="preserve">
          <source>Organizing by value with &lt;strong&gt;multi&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;マルチを使用&lt;/strong&gt;して値で整理する&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02920c862ccbff6d9ea90f0249e6739c73f53be8" translate="yes" xml:space="preserve">
          <source>Other architectures</source>
          <target state="translated">その他のアーキテクチャ</target>
        </trans-unit>
        <trans-unit id="bc1c9b417f89fe542bb1934f83a9192b283b0bb0" translate="yes" xml:space="preserve">
          <source>Other tables</source>
          <target state="translated">その他のテーブル</target>
        </trans-unit>
        <trans-unit id="2650dbe4bcd4f307dc4c1b316b876d711322bfab" translate="yes" xml:space="preserve">
          <source>Other things that might be helpful to us, if you have them:</source>
          <target state="translated">他にも参考になりそうなものがあれば。</target>
        </trans-unit>
        <trans-unit id="866131f1f2375ca571ce12c268e0c656ecbc12e4" translate="yes" xml:space="preserve">
          <source>Other unusual configuration details</source>
          <target state="translated">その他の変わった構成の詳細</target>
        </trans-unit>
        <trans-unit id="3f6f6d94cdfb57598370b4d3559b5ea5baf371fc" translate="yes" xml:space="preserve">
          <source>Otherwise, a document was updated from &lt;code&gt;new_val&lt;/code&gt; to &lt;code&gt;old_val&lt;/code&gt;</source>
          <target state="translated">それ以外の場合、ドキュメントは &lt;code&gt;new_val&lt;/code&gt; から &lt;code&gt;old_val&lt;/code&gt; に更新されました</target>
        </trans-unit>
        <trans-unit id="635983c30fa94cc702bf5a3063575de06b27f6c0" translate="yes" xml:space="preserve">
          <source>Our first workload from YCSB is workload A. It performs an equal number of get and update operations.</source>
          <target state="translated">YCSBからの最初のワークロードはワークロードAです。</target>
        </trans-unit>
        <trans-unit id="c3102dfdc420ea7f4b95502211100be74c8d001e" translate="yes" xml:space="preserve">
          <source>Our long-term goal is to port RethinkDB to every widely-used platform. &lt;a href=&quot;https://rethinkdb.com/community/&quot;&gt;Get involved&lt;/a&gt; in the development effort and help port RethinkDB to more platforms.</source>
          <target state="translated">私たちの長期的な目標は、広く使用されているすべてのプラットフォームにRethinkDBを移植することです。開発作業に&lt;a href=&quot;https://rethinkdb.com/community/&quot;&gt;参加&lt;/a&gt;し、RethinkDBをより多くのプラットフォームに移植できるように支援します。</target>
        </trans-unit>
        <trans-unit id="9d27e01bc1f16af9ab5b684bbca08e77d04c7441" translate="yes" xml:space="preserve">
          <source>Outdated index issues</source>
          <target state="translated">時代遅れのインデックス問題</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="7daf403c7589f4927632ed3b6af762a992f09b78" translate="yes" xml:space="preserve">
          <source>PHP</source>
          <target state="translated">PHP</target>
        </trans-unit>
        <trans-unit id="100325b8d6de92dc6ff09cd2c078133755bf274f" translate="yes" xml:space="preserve">
          <source>Pagination</source>
          <target state="translated">Pagination</target>
        </trans-unit>
        <trans-unit id="1ad9f67d0f855f646efb3775c7a4778a3cc5a138" translate="yes" xml:space="preserve">
          <source>Parallelism</source>
          <target state="translated">Parallelism</target>
        </trans-unit>
        <trans-unit id="a3f2f9b464ffd6a075b16b138e68eee36eb4fad2" translate="yes" xml:space="preserve">
          <source>Parse a JSON string on the server.</source>
          <target state="translated">サーバー上のJSON文字列をパースします。</target>
        </trans-unit>
        <trans-unit id="a02cd3149b8489d7554699018bd6802639a0fb15" translate="yes" xml:space="preserve">
          <source>Parsing RethinkDB&amp;rsquo;s response to a write query</source>
          <target state="translated">書き込みクエリに対するRethinkDBの応答の解析</target>
        </trans-unit>
        <trans-unit id="d5ed1ca0e30841762087801ad0ea2356bf068bd4" translate="yes" xml:space="preserve">
          <source>Passport</source>
          <target state="translated">Passport</target>
        </trans-unit>
        <trans-unit id="a6ef67119795d1dec2733382dde8851959466fd2" translate="yes" xml:space="preserve">
          <source>Password hashing iterations</source>
          <target state="translated">パスワードハッシュの繰り返し</target>
        </trans-unit>
        <trans-unit id="602f708ddfd2f5c04ef6214f07b92793c6440c57" translate="yes" xml:space="preserve">
          <source>Pastie app</source>
          <target state="translated">パスティアプリ</target>
        </trans-unit>
        <trans-unit id="9ee3e3fb749ad0b1c61fd33d63af73925ef460d8" translate="yes" xml:space="preserve">
          <source>Perform a branching conditional equivalent to &lt;code&gt;if-then-else&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;if-then-else&lt;/code&gt; と同等の分岐条件を実行します。</target>
        </trans-unit>
        <trans-unit id="efb5dcdc44fc2c6fa0229180b4ba0e6617436df4" translate="yes" xml:space="preserve">
          <source>Perform a handshake</source>
          <target state="translated">握手をする</target>
        </trans-unit>
        <trans-unit id="31d145708b03b1271ba67061462d8bf7d2aa9ca6" translate="yes" xml:space="preserve">
          <source>Performance Details</source>
          <target state="translated">パフォーマンスの詳細</target>
        </trans-unit>
        <trans-unit id="d8de1447c9bf3acce93c7e508a1c29a20555687a" translate="yes" xml:space="preserve">
          <source>Performance report</source>
          <target state="translated">業績報告書</target>
        </trans-unit>
        <trans-unit id="1a7039a0fe11cfbcaf911a9186d34c5c3a09eeb8" translate="yes" xml:space="preserve">
          <source>Performing a conditional insert or replace</source>
          <target state="translated">条件付きの挿入または置換を実行する</target>
        </trans-unit>
        <trans-unit id="933b62ca112baccc2befe203fa03de8a89c72068" translate="yes" xml:space="preserve">
          <source>Performing a pivot operation</source>
          <target state="translated">ピボット操作を行う</target>
        </trans-unit>
        <trans-unit id="a9d4d7d7d35c4a76ac97d509252cf3e581c5e1dc" translate="yes" xml:space="preserve">
          <source>Performing an unpivot operation</source>
          <target state="translated">アンピボット操作の実行</target>
        </trans-unit>
        <trans-unit id="c0bc0b17b999bff2f1cc8b8c30efeb6034e0c0a9" translate="yes" xml:space="preserve">
          <source>Performing multiple aggregations simultaneously</source>
          <target state="translated">複数の集計を同時に実行</target>
        </trans-unit>
        <trans-unit id="a03eb97735ec7717f1d64f293267ac389abb2754" translate="yes" xml:space="preserve">
          <source>Performs 200 million operations in total</source>
          <target state="translated">トータルで2億件の業務をこなしている</target>
        </trans-unit>
        <trans-unit id="1f85efe74af8d3b3506a24e9543f0465c2109af2" translate="yes" xml:space="preserve">
          <source>Performs 50 million operations in total</source>
          <target state="translated">合計5,000万件の業務を実施しています。</target>
        </trans-unit>
        <trans-unit id="f111d810e7ca920bda8f128569fc002610c45314" translate="yes" xml:space="preserve">
          <source>Perl</source>
          <target state="translated">Perl</target>
        </trans-unit>
        <trans-unit id="d06d55570938d12f87db3bf2b48caa9de22d9c67" translate="yes" xml:space="preserve">
          <source>Permissions</source>
          <target state="translated">Permissions</target>
        </trans-unit>
        <trans-unit id="627aed65a0d9d2626caf51bb839dcee691e75d17" translate="yes" xml:space="preserve">
          <source>Permissions and user accounts</source>
          <target state="translated">権限とユーザーアカウント</target>
        </trans-unit>
        <trans-unit id="0ac88ea84587ef82d96b641061e89b7e0e66ff2c" translate="yes" xml:space="preserve">
          <source>Permissions are stored in the &lt;code&gt;permissions&lt;/code&gt; system table. While you can change permissions by modifying documents within that table, it&amp;rsquo;s far more convenient to use the &lt;a href=&quot;#the-grant-command&quot;&gt;grant&lt;/a&gt; command; see below.</source>
          <target state="translated">権限は &lt;code&gt;permissions&lt;/code&gt; システムテーブルに保存されます。テーブル内のドキュメントを変更することで権限を変更できますが、&lt;a href=&quot;#the-grant-command&quot;&gt;grant&lt;/a&gt;コマンドを使用する方がはるかに便利です。下記参照。</target>
        </trans-unit>
        <trans-unit id="bf871a8778973cc849027508cdc967888db0dc66" translate="yes" xml:space="preserve">
          <source>Permissions may be granted on a global scope, or granted for a specific table or database. The scope is defined by calling &lt;code&gt;grant&lt;/code&gt; on its own (e.g., &lt;code&gt;r.grant()&lt;/code&gt;, on a table (&lt;code&gt;r.table().grant()&lt;/code&gt;), or on a database (&lt;code&gt;r.db().grant()&lt;/code&gt;).</source>
          <target state="translated">アクセス許可は、グローバルスコープで付与することも、特定のテーブルまたはデータベースに付与することもできます。スコープは、 &lt;code&gt;grant&lt;/code&gt; を独自に呼び出すことにより（たとえば、 &lt;code&gt;r.grant()&lt;/code&gt; 、テーブル（ &lt;code&gt;r.table().grant()&lt;/code&gt; ）、またはデータベース（ &lt;code&gt;r.db().grant()&lt;/code&gt; ）で定義されます。</target>
        </trans-unit>
        <trans-unit id="eb767066d9789af7d92101acfb56fb7687bff20c" translate="yes" xml:space="preserve">
          <source>Permissions specified at a lower level will override permissions set at a higher level: a user could be granted read and write access to the &lt;code&gt;field_notes&lt;/code&gt; database, but denied the ability to write to the &lt;code&gt;calendar&lt;/code&gt; table and to either read or write to the &lt;code&gt;supervisor_only&lt;/code&gt; table.</source>
          <target state="translated">低いレベルで指定されたアクセス許可は、高いレベルで設定されたアクセス許可を上書きします。ユーザーには、 &lt;code&gt;field_notes&lt;/code&gt; データベースへの読み取りおよび書き込みアクセス権を付与できますが、 &lt;code&gt;calendar&lt;/code&gt; テーブルへの書き込み、および &lt;code&gt;supervisor_only&lt;/code&gt; テーブルへの読み取りまたは書き込みのいずれかを拒否できます。</target>
        </trans-unit>
        <trans-unit id="d15069fb8e15cad486a5d82a9690982408a75b0e" translate="yes" xml:space="preserve">
          <source>Permissions that are not defined on a local scope will be inherited from the next largest scope. For example, a write operation on a table will first check if &lt;code&gt;write&lt;/code&gt; permissions are explicitly set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; for that table and account combination; if they are not, the &lt;code&gt;write&lt;/code&gt; permissions for the database will be used if those are explicitly set; and if neither table nor database permissions are set for that account, the global &lt;code&gt;write&lt;/code&gt; permissions for that account will be used.</source>
          <target state="translated">ローカルスコープで定義されていないアクセス許可は、次に大きいスコープから継承されます。たとえば、テーブルの書き込み操作では、まず、そのテーブルとアカウントの組み合わせに対して &lt;code&gt;write&lt;/code&gt; 権限が明示的に &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; に設定されているかどうかを確認します。そうでない場合、明示的に設定されていれば、データベースの &lt;code&gt;write&lt;/code&gt; 権限が使用されます。また、そのアカウントにテーブル権限もデータベース権限も設定されていない場合、そのアカウントのグローバル &lt;code&gt;write&lt;/code&gt; 権限が使用されます。</target>
        </trans-unit>
        <trans-unit id="7b2206d37e61c7b1012ffbefa3c983e86a032077" translate="yes" xml:space="preserve">
          <source>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to &lt;a href=&quot;../has_fields/index&quot;&gt;hasFields&lt;/a&gt; followed by &lt;a href=&quot;../pluck/index&quot;&gt;pluck&lt;/a&gt; on a sequence.</source>
          <target state="translated">オブジェクトのシーケンスから1つ以上の属性を取得し、指定されたフィールドを持たないシーケンス内のオブジェクトを除外します。機能的には、これは同じです&lt;a href=&quot;../has_fields/index&quot;&gt;hasFields&lt;/a&gt;続い&lt;a href=&quot;../pluck/index&quot;&gt;Pluckの&lt;/a&gt;シーケンスに。</target>
        </trans-unit>
        <trans-unit id="a7461725c3e122f101426f35a2e66d9ba3287681" translate="yes" xml:space="preserve">
          <source>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to &lt;a href=&quot;has_fields/index&quot;&gt;hasFields&lt;/a&gt; followed by &lt;a href=&quot;pluck/index&quot;&gt;pluck&lt;/a&gt; on a sequence.</source>
          <target state="translated">オブジェクトのシーケンスから1つ以上の属性を取得し、指定されたフィールドを持たないシーケンス内のオブジェクトを除外します。機能的には、これは同じです&lt;a href=&quot;has_fields/index&quot;&gt;hasFields&lt;/a&gt;続い&lt;a href=&quot;pluck/index&quot;&gt;Pluckの&lt;/a&gt;シーケンスに。</target>
        </trans-unit>
        <trans-unit id="4550e37a008aa8641c291ddb18c860428af08805" translate="yes" xml:space="preserve">
          <source>Plucks out one or more attributes from either an object or a sequence of objects (projection).</source>
          <target state="translated">オブジェクトまたは一連のオブジェクトのいずれかから1つ以上の属性を取り出します(投影)。</target>
        </trans-unit>
        <trans-unit id="59a24e502e21080856136622628d2c36a365ff13" translate="yes" xml:space="preserve">
          <source>Point (single document) changefeeds</source>
          <target state="translated">ポイント(単一文書)の変更フィード</target>
        </trans-unit>
        <trans-unit id="d82fa8e3ba9ed2db42802966c34a79c79ec35e10" translate="yes" xml:space="preserve">
          <source>Point your browser to &lt;code&gt;localhost:8080&lt;/code&gt;. You&amp;rsquo;ll see an administrative UI where you can control the cluster (which so far consists of one server), and play with the query language.</source>
          <target state="translated">ブラウザで &lt;code&gt;localhost:8080&lt;/code&gt; にアクセスします。クラスター（これまでのところ1つのサーバーで構成されています）を制御し、クエリ言語を操作できる管理UIが表示されます。</target>
        </trans-unit>
        <trans-unit id="d6fedcfcdb0a32752d9ea03a839178f433515d36" translate="yes" xml:space="preserve">
          <source>Point your browser to the HTTP connections port (&lt;code&gt;8080&lt;/code&gt; by default) to access the web interface.</source>
          <target state="translated">ブラウザでHTTP接続ポート（デフォルトでは &lt;code&gt;8080&lt;/code&gt; ）を指定して、Webインターフェイスにアクセスします。</target>
        </trans-unit>
        <trans-unit id="a4a871ea0a8e57174881c9b4bf86e9bb052c9f69" translate="yes" xml:space="preserve">
          <source>Polygons can also have holes in them, created when a polygon entirely enclosed by another one is &amp;ldquo;punched out&amp;rdquo; of the larger one using the &lt;code&gt;polygonSub&lt;/code&gt; command. (This is the only way to create a polygon with a hole in it.)</source>
          <target state="translated">ポリゴンに穴を空けることもできます。これは、別のポリゴンで完全に囲まれたポリゴンが、 &lt;code&gt;polygonSub&lt;/code&gt; コマンドを使用して大きなポリゴンから「パンチアウト」されたときに作成されます。（これが、穴のあるポリゴンを作成する唯一の方法です。）</target>
        </trans-unit>
        <trans-unit id="606d1d5e59fa1b7b6ee0fae6e5cdc98754db92b8" translate="yes" xml:space="preserve">
          <source>Port 22 is for SSH. The server uses public key authentication.</source>
          <target state="translated">ポート22はSSH用です。サーバは公開鍵認証を使用します。</target>
        </trans-unit>
        <trans-unit id="167dacf7578e199e55dd6313fc9876a5b1867b79" translate="yes" xml:space="preserve">
          <source>Port 28015 is for client driver access. The only form of authentication is a key that is sent in plain text over the network.</source>
          <target state="translated">ポート 28015 はクライアントドライバのアクセス用です。認証の唯一の形式は、ネットワーク上でプレーンテキストで送信されるキーです。</target>
        </trans-unit>
        <trans-unit id="6122f7270d7d535ad95a3aec4e825c2e02f9c751" translate="yes" xml:space="preserve">
          <source>Port 443 is for HTTPS. An Nginx server sits between RethinkDB and the world and provides basic HTTP authentication and secure HTTPS connections for the web UI.</source>
          <target state="translated">443番ポートはHTTPS用です。NginxサーバーはRethinkDBと世界の間に配置され、基本的なHTTP認証とWeb UIのためのセキュアなHTTPS接続を提供しています。</target>
        </trans-unit>
        <trans-unit id="f5c666906c3424aaf3e0422d4c7fc73f92951d6e" translate="yes" xml:space="preserve">
          <source>Port 80 is for HTTP. It is used during the setup process but otherwise redirects to HTTPS.</source>
          <target state="translated">ポート80はHTTP用です。設定処理中に使用されますが、それ以外の場合はHTTPSにリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="687986e409c97687863566c17cb109678af9b482" translate="yes" xml:space="preserve">
          <source>Port: &lt;code&gt;3000&lt;/code&gt;</source>
          <target state="translated">ポート： &lt;code&gt;3000&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5333d3c84dc8377268cd686f0cc959419711b637" translate="yes" xml:space="preserve">
          <source>Predicates to &lt;code&gt;filter&lt;/code&gt; are evaluated on the server, and must use ReQL expressions. You cannot use standard JavaScript comparison operators such as &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;/&lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;/&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; する述語はサーバーで評価され、ReQL式を使用する必要があります。 &lt;code&gt;==&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; / &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;||&lt;/code&gt; などの標準のJavaScript比較演算子は使用できません。/ &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d574e84514abeecdd6ac66fa898f6addb4221b4" translate="yes" xml:space="preserve">
          <source>Prepend a value to an array.</source>
          <target state="translated">配列に値を前置します。</target>
        </trans-unit>
        <trans-unit id="7f22ba753489d7e920e259cf09c81b2c3d9c5597" translate="yes" xml:space="preserve">
          <source>Produce a single value from a sequence through repeated application of a reduction function.</source>
          <target state="translated">還元関数を繰り返し適用することで、シーケンスから1つの値を生成します。</target>
        </trans-unit>
        <trans-unit id="d9f525bfecb73d82d2f90a76e5e52925c8bfb8b8" translate="yes" xml:space="preserve">
          <source>Produces a non-existence error when called on an empty sequence. You can handle this case with &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">空のシーケンスで呼び出されると、存在しないエラーを生成します。このケースは &lt;code&gt;default&lt;/code&gt; 処理できます。</target>
        </trans-unit>
        <trans-unit id="9015371a0d33ee422afb2ea58ff543ac4c16f19b" translate="yes" xml:space="preserve">
          <source>Provide a default value in case of non-existence errors. The &lt;code&gt;default&lt;/code&gt; command evaluates its first argument (the value it&amp;rsquo;s chained to). If that argument returns &lt;code&gt;null&lt;/code&gt; or a non-existence error is thrown in evaluation, then &lt;code&gt;default&lt;/code&gt; returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</source>
          <target state="translated">存在しないエラーの場合のデフォルト値を提供します。 &lt;code&gt;default&lt;/code&gt; コマンドは、最初の引数（それが連鎖しています値）を評価します。その引数が &lt;code&gt;null&lt;/code&gt; を返すか、存在しないエラーが評価でスローされた場合、 &lt;code&gt;default&lt;/code&gt; は2番目の引数を返します。2番目の引数は通常デフォルト値ですが、値を返す関数にすることもできます。</target>
        </trans-unit>
        <trans-unit id="2a2793cd5e2cebdd699874e60337368ad4c7f0e4" translate="yes" xml:space="preserve">
          <source>Proxy nodes</source>
          <target state="translated">プロキシノード</target>
        </trans-unit>
        <trans-unit id="35cd7f9cdee7e3c5423c4f68b7a5a738e7ee908a" translate="yes" xml:space="preserve">
          <source>Publish-Subscribe</source>
          <target state="translated">Publish-Subscribe</target>
        </trans-unit>
        <trans-unit id="d74d06bbc20ee3a59b09c01526b467c887af9167" translate="yes" xml:space="preserve">
          <source>Publish-Subscribe with RethinkDB</source>
          <target state="translated">Publish-Subscribe with RethinkDB</target>
        </trans-unit>
        <trans-unit id="08ab1df032a5bfbbddcde416cd9683a3da9a8034" translate="yes" xml:space="preserve">
          <source>Publish-subscribe</source>
          <target state="translated">Publish-subscribe</target>
        </trans-unit>
        <trans-unit id="9c416ee884bbd4d8e89a95d4c023e9b2eff57f5f" translate="yes" xml:space="preserve">
          <source>Pushing changes to RabbitMQ</source>
          <target state="translated">RabbitMQへの変更点のプッシュ</target>
        </trans-unit>
        <trans-unit id="c148aded3d47eba6bad059e92b2038d207b0a750" translate="yes" xml:space="preserve">
          <source>Putting it all together</source>
          <target state="translated">まとめてみると</target>
        </trans-unit>
        <trans-unit id="6e3604888c4b4ec08e2837913d012fe2834ffa83" translate="yes" xml:space="preserve">
          <source>Python</source>
          <target state="translated">Python</target>
        </trans-unit>
        <trans-unit id="49cfc0fae0169e4b63343a3e789527ea52375294" translate="yes" xml:space="preserve">
          <source>Python driver</source>
          <target state="translated">パイソンドライバ</target>
        </trans-unit>
        <trans-unit id="d82cabe971317809828edbfbe4a5e9612ec586ff" translate="yes" xml:space="preserve">
          <source>Python libraries</source>
          <target state="translated">パイソンライブラリ</target>
        </trans-unit>
        <trans-unit id="c56ac30b14c8764fec5b5b70036659f9b693a5b5" translate="yes" xml:space="preserve">
          <source>Python with Tornado or Twisted</source>
          <target state="translated">トルネードやツイストを使ったPython</target>
        </trans-unit>
        <trans-unit id="bacc89e7a944a342361ad407e50c1bdc4adbb60e" translate="yes" xml:space="preserve">
          <source>Queries for accessing authors and posts tend to be simpler.</source>
          <target state="translated">著者や投稿にアクセスするためのクエリは、単純化されている傾向があります。</target>
        </trans-unit>
        <trans-unit id="9a23e1f2ab29b58922510028cdd1e93bcff6daa1" translate="yes" xml:space="preserve">
          <source>Queries in detail</source>
          <target state="translated">詳細なクエリ</target>
        </trans-unit>
        <trans-unit id="6ed8d030024e173cbdfaacb35d2c5b9fe1de254d" translate="yes" xml:space="preserve">
          <source>Query (read and/or update) the configurations for individual tables or databases.</source>
          <target state="translated">個々のテーブルやデータベースの設定を問い合わせる(読み込みや更新)。</target>
        </trans-unit>
        <trans-unit id="2dd43bff670fb4443641b638e91c3a1e2666b727" translate="yes" xml:space="preserve">
          <source>Query Runtime (seconds)</source>
          <target state="translated">クエリ実行時間(秒</target>
        </trans-unit>
        <trans-unit id="90479d900b8bfaebff69bef7c1e6f5e4acf525cc" translate="yes" xml:space="preserve">
          <source>Query execution</source>
          <target state="translated">クエリの実行</target>
        </trans-unit>
        <trans-unit id="89912ace151473384dc0a610242cf6f97eff4e6b" translate="yes" xml:space="preserve">
          <source>Query optimization</source>
          <target state="translated">クエリの最適化</target>
        </trans-unit>
        <trans-unit id="c40c0a7ff9b0eb9e3f2b0a13a19b9c280e41d151" translate="yes" xml:space="preserve">
          <source>Query types: 50% single-document read ops, 50% single-document update ops</source>
          <target state="translated">クエリの種類。50%の単一文書読取り作業、50%の単一文書更新作業</target>
        </trans-unit>
        <trans-unit id="aaa9e9974cdedcdc0d68a460b12895753d966e0f" translate="yes" xml:space="preserve">
          <source>Query types: Count the total number of sentences over a single field: table.map(r.row(&amp;ldquo;field0&amp;rdquo;).split(&amp;ldquo;.&amp;rdquo;).count()).sum()</source>
          <target state="translated">クエリの種類：1つのフィールドの文の総数を数える：table.map（r.row（ &quot;field0&quot;）。split（ &quot;。&quot;）。count（））。sum（）</target>
        </trans-unit>
        <trans-unit id="30a91f4f78c1ba3a4e0863c44ed3e1c0761b3e1b" translate="yes" xml:space="preserve">
          <source>Query types: Single-document gets</source>
          <target state="translated">クエリの種類。単一文書の取得</target>
        </trans-unit>
        <trans-unit id="cc6835ce045ca407e1aa42cf034a40b2dc968c7d" translate="yes" xml:space="preserve">
          <source>Querying</source>
          <target state="translated">Querying</target>
        </trans-unit>
        <trans-unit id="2311ef772fd9667ad480d784efeb91fd87562cee" translate="yes" xml:space="preserve">
          <source>Querying the jobs table</source>
          <target state="translated">ジョブテーブルへの問い合わせ</target>
        </trans-unit>
        <trans-unit id="cfd1d967b9233f2a022120ac5fc5e2af2bff64b0" translate="yes" xml:space="preserve">
          <source>Querying the stats table</source>
          <target state="translated">統計テーブルへの問い合わせ</target>
        </trans-unit>
        <trans-unit id="b4e9d799b4c484b951d3a7526f99384d51e97175" translate="yes" xml:space="preserve">
          <source>Querying this table with no filters produces a list of all current issues within the cluster.</source>
          <target state="translated">このテーブルにフィルタをかけずに問い合わせると、クラスタ内のすべての現在のissueのリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="24cc2440fd1b49aaf1c5a8958c6de61e1529c18a" translate="yes" xml:space="preserve">
          <source>Quick setup</source>
          <target state="translated">クイックセットアップ</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">Quickstart</target>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="bfc29699c72375bf47c9436811bc275479e815df" translate="yes" xml:space="preserve">
          <source>RECV</source>
          <target state="translated">RECV</target>
        </trans-unit>
        <trans-unit id="9e7d6316420463a965783442095454fff2759c0a" translate="yes" xml:space="preserve">
          <source>RabbitMQ is a natural choice for distributing notifications of change events. It&amp;rsquo;s designed to efficiently route messages to many listeners, and there are client libraries for most popular languages. In this tutorial we take advantage of RabbitMQ&amp;rsquo;s &lt;a href=&quot;https://www.rabbitmq.com/tutorials/amqp-concepts.html#topic-exchange&quot;&gt;topic exchanges&lt;/a&gt;. Topic exchanges allow clients to subscribe to the messages they&amp;rsquo;re interested in, and ignore the rest.</source>
          <target state="translated">RabbitMQは、変更イベントの通知を配信するための自然な選択です。多くのリスナーにメッセージを効率的にルーティングするように設計されており、最も一般的な言語用のクライアントライブラリがあります。このチュートリアルでは、RabbitMQの&lt;a href=&quot;https://www.rabbitmq.com/tutorials/amqp-concepts.html#topic-exchange&quot;&gt;トピック交換を利用し&lt;/a&gt;ます。トピックの交換により、クライアントは関心のあるメッセージをサブスクライブし、残りを無視することができます。</target>
        </trans-unit>
        <trans-unit id="5dd8e5ee1c3e6446669db2bc1a5feb0e30e90272" translate="yes" xml:space="preserve">
          <source>Rackspace OnMetal Compute</source>
          <target state="translated">ラックスペース・オンメタル・コンピュート</target>
        </trans-unit>
        <trans-unit id="26231667af7cc1c479da94498b920bd20cc4204e" translate="yes" xml:space="preserve">
          <source>Rackspace OnMetal I/O</source>
          <target state="translated">ラックスペース・オンメタルI/O</target>
        </trans-unit>
        <trans-unit id="56f04e78d5af9bc3df5498e192f568246521ebe8" translate="yes" xml:space="preserve">
          <source>Raspbian</source>
          <target state="translated">Raspbian</target>
        </trans-unit>
        <trans-unit id="cc2546f8cc7b851025e82d9ad64be8681c1defc8" translate="yes" xml:space="preserve">
          <source>ReQL</source>
          <target state="translated">ReQL</target>
        </trans-unit>
        <trans-unit id="4ac00efdbe1ef213d5db65a44a2317ffb880734f" translate="yes" xml:space="preserve">
          <source>ReQL administration commands</source>
          <target state="translated">ReQL 管理コマンド</target>
        </trans-unit>
        <trans-unit id="ed867a0a1051c1e47be81b1dc6bcf49d2a9a6a50" translate="yes" xml:space="preserve">
          <source>ReQL command: () (bracket)</source>
          <target state="translated">ReQLコマンド。()(カッコ)</target>
        </trans-unit>
        <trans-unit id="9c77279ce7eb456fb9242d6b0d4944fc101cd9ac" translate="yes" xml:space="preserve">
          <source>ReQL command: EventEmitter (connection)</source>
          <target state="translated">ReQLコマンド。イベントエミッタ(接続)</target>
        </trans-unit>
        <trans-unit id="33ff2c1a1ec8fbe986458a9f2936ae04f4bdfb80" translate="yes" xml:space="preserve">
          <source>ReQL command: EventEmitter (cursor)</source>
          <target state="translated">ReQLコマンドです。EventEmitter (カーソル)</target>
        </trans-unit>
        <trans-unit id="ecfe4f46eb5536b7c3b6865e0253407db4987f76" translate="yes" xml:space="preserve">
          <source>ReQL command: ISO8601</source>
          <target state="translated">ReQL コマンド。ISO8601</target>
        </trans-unit>
        <trans-unit id="d77f4ff715692913a39d0f155d76e544abc4994a" translate="yes" xml:space="preserve">
          <source>ReQL command: add</source>
          <target state="translated">ReQLコマンド:追加</target>
        </trans-unit>
        <trans-unit id="bd75b6bf5a43cdc3fbcc301becfc8a5b38968d20" translate="yes" xml:space="preserve">
          <source>ReQL command: and</source>
          <target state="translated">ReQLコマンド:と</target>
        </trans-unit>
        <trans-unit id="f2605569a04a0afde3a9470a0eff3c6a2b21a661" translate="yes" xml:space="preserve">
          <source>ReQL command: append</source>
          <target state="translated">ReQLコマンド:append</target>
        </trans-unit>
        <trans-unit id="c2634cf1d36dacdd152e506ed1c1009b68f6146a" translate="yes" xml:space="preserve">
          <source>ReQL command: args</source>
          <target state="translated">ReQL コマンド:args</target>
        </trans-unit>
        <trans-unit id="06786aca8c46cb6acbf99bb208c4f2ecc10b5911" translate="yes" xml:space="preserve">
          <source>ReQL command: avg</source>
          <target state="translated">ReQL コマンド:avg</target>
        </trans-unit>
        <trans-unit id="11520f025e9654a1117903ab39195c25867c3da1" translate="yes" xml:space="preserve">
          <source>ReQL command: between</source>
          <target state="translated">ReQLコマンド:間</target>
        </trans-unit>
        <trans-unit id="3655b193f6608706a983a08861b50d6b5e185a06" translate="yes" xml:space="preserve">
          <source>ReQL command: binary</source>
          <target state="translated">ReQLコマンド:バイナリ</target>
        </trans-unit>
        <trans-unit id="cc7b8e77c49a6f5233051f7e6eb87cbaa04267df" translate="yes" xml:space="preserve">
          <source>ReQL command: branch</source>
          <target state="translated">ReQL コマンド:branch</target>
        </trans-unit>
        <trans-unit id="a542671e41bd856caf41efc6940bae16c1a4696d" translate="yes" xml:space="preserve">
          <source>ReQL command: ceil</source>
          <target state="translated">ReQL コマンド:ceil</target>
        </trans-unit>
        <trans-unit id="527929389823a7da454b535fc44ab98c9b397b0d" translate="yes" xml:space="preserve">
          <source>ReQL command: changeAt</source>
          <target state="translated">ReQL コマンド:changeAt</target>
        </trans-unit>
        <trans-unit id="25d7b0a2ca00d4a73406eff48faa4fefee9b927e" translate="yes" xml:space="preserve">
          <source>ReQL command: changes</source>
          <target state="translated">ReQLコマンド:変更</target>
        </trans-unit>
        <trans-unit id="b439af789b774f651c0736c700338a2616f990b1" translate="yes" xml:space="preserve">
          <source>ReQL command: circle</source>
          <target state="translated">ReQLコマンド:円</target>
        </trans-unit>
        <trans-unit id="6b2fd8a84da14971568a45b72ab9313d35cade87" translate="yes" xml:space="preserve">
          <source>ReQL command: close</source>
          <target state="translated">ReQLコマンド:close</target>
        </trans-unit>
        <trans-unit id="417eab2fa9f97567083539e8c74527f21ccacd8c" translate="yes" xml:space="preserve">
          <source>ReQL command: coerceTo</source>
          <target state="translated">ReQL コマンド:coerceTo</target>
        </trans-unit>
        <trans-unit id="4184adbeb4e69b759b643238c0d1b15d72ffc48e" translate="yes" xml:space="preserve">
          <source>ReQL command: concatMap</source>
          <target state="translated">ReQL コマンド:concatMap</target>
        </trans-unit>
        <trans-unit id="2cba949c803d2634ab6f639cf3a79f395d198c8e" translate="yes" xml:space="preserve">
          <source>ReQL command: config</source>
          <target state="translated">ReQLコマンド:config</target>
        </trans-unit>
        <trans-unit id="44e902bd9764f683711d0c83dd116fd1ae54a328" translate="yes" xml:space="preserve">
          <source>ReQL command: connect</source>
          <target state="translated">ReQLコマンド:接続</target>
        </trans-unit>
        <trans-unit id="79ec01842c910c009d437f0b1ec418b2cd2e55ff" translate="yes" xml:space="preserve">
          <source>ReQL command: contains</source>
          <target state="translated">ReQL コマンド:インクルード</target>
        </trans-unit>
        <trans-unit id="63144a966ab3eea31f6d0e990c630286409bb445" translate="yes" xml:space="preserve">
          <source>ReQL command: count</source>
          <target state="translated">ReQL コマンド:count</target>
        </trans-unit>
        <trans-unit id="ed85af4ffe2d7e416e7f09211f7fde5e62c12bd2" translate="yes" xml:space="preserve">
          <source>ReQL command: date</source>
          <target state="translated">ReQLコマンド:日付</target>
        </trans-unit>
        <trans-unit id="fe45f01059e3f5e250f4fe61f283fa0b3e071514" translate="yes" xml:space="preserve">
          <source>ReQL command: day</source>
          <target state="translated">ReQLコマンド:日</target>
        </trans-unit>
        <trans-unit id="1bf352324c27548c918fa1efea8de5b8bd8c7ab1" translate="yes" xml:space="preserve">
          <source>ReQL command: dayOfWeek</source>
          <target state="translated">ReQL コマンド:dayOfWeek</target>
        </trans-unit>
        <trans-unit id="059e7de04bc86952404125b943c999aa79d78ed3" translate="yes" xml:space="preserve">
          <source>ReQL command: dayOfYear</source>
          <target state="translated">ReQL コマンド:dayOfYear</target>
        </trans-unit>
        <trans-unit id="8b5d959614c2e1eff9a4980760f966439d124e61" translate="yes" xml:space="preserve">
          <source>ReQL command: db</source>
          <target state="translated">ReQL コマンド:db</target>
        </trans-unit>
        <trans-unit id="d76075daac756324d6d0ec0a0928aa961d586a1d" translate="yes" xml:space="preserve">
          <source>ReQL command: dbCreate</source>
          <target state="translated">ReQLコマンド:dbCreate</target>
        </trans-unit>
        <trans-unit id="8e87a1bc1f3bf2ec8d32b7c2cc40f36556358729" translate="yes" xml:space="preserve">
          <source>ReQL command: dbDrop</source>
          <target state="translated">ReQLコマンド:dbDrop</target>
        </trans-unit>
        <trans-unit id="f2a8b36dca132fdcc0c2871c7a5fbe6092c9db74" translate="yes" xml:space="preserve">
          <source>ReQL command: dbList</source>
          <target state="translated">ReQL コマンド:dbList</target>
        </trans-unit>
        <trans-unit id="5f2d6e5cf850ea9208748619684b22798f566d95" translate="yes" xml:space="preserve">
          <source>ReQL command: default</source>
          <target state="translated">ReQLコマンド:デフォルト</target>
        </trans-unit>
        <trans-unit id="152ab9d0af0267e9629d3302fda86cb29bd1679c" translate="yes" xml:space="preserve">
          <source>ReQL command: delete</source>
          <target state="translated">ReQLコマンド:削除</target>
        </trans-unit>
        <trans-unit id="5793c7294123817b3c67b2446d9ed0fc24099e64" translate="yes" xml:space="preserve">
          <source>ReQL command: deleteAt</source>
          <target state="translated">ReQL コマンド:deleteAt</target>
        </trans-unit>
        <trans-unit id="ea37eedb2d752c766abd0663d17fa8283bafc07a" translate="yes" xml:space="preserve">
          <source>ReQL command: difference</source>
          <target state="translated">ReQLコマンド:差分</target>
        </trans-unit>
        <trans-unit id="4a5e04f27c1cb25c8d2eae66f69a116238196fdf" translate="yes" xml:space="preserve">
          <source>ReQL command: distance</source>
          <target state="translated">ReQLコマンド:距離</target>
        </trans-unit>
        <trans-unit id="f3ba8164cc670369a39c3cd89a607b234d43f1c0" translate="yes" xml:space="preserve">
          <source>ReQL command: distinct</source>
          <target state="translated">ReQL コマンド:distinct</target>
        </trans-unit>
        <trans-unit id="5476b8fa7162e4450c92f418aa9aa3e48fd06aef" translate="yes" xml:space="preserve">
          <source>ReQL command: div</source>
          <target state="translated">ReQL コマンド:div</target>
        </trans-unit>
        <trans-unit id="561b5fa4e590d6f2ad1196573954cfb43c646dd8" translate="yes" xml:space="preserve">
          <source>ReQL command: do</source>
          <target state="translated">ReQL コマンド:do</target>
        </trans-unit>
        <trans-unit id="9aec0c0d4c81051146d47accc16dda35f7a5a0b3" translate="yes" xml:space="preserve">
          <source>ReQL command: downcase</source>
          <target state="translated">ReQL コマンド:downcase</target>
        </trans-unit>
        <trans-unit id="f28b2c93a01839f916ec02c4cfcc9a13721eb722" translate="yes" xml:space="preserve">
          <source>ReQL command: during</source>
          <target state="translated">ReQLコマンド:中</target>
        </trans-unit>
        <trans-unit id="3d326b5fb9ed975ecff66601d036627598003399" translate="yes" xml:space="preserve">
          <source>ReQL command: each</source>
          <target state="translated">ReQLコマンド:各</target>
        </trans-unit>
        <trans-unit id="aabe73e97a51d3c59d01989d6242a260e6d74509" translate="yes" xml:space="preserve">
          <source>ReQL command: eachAsync</source>
          <target state="translated">ReQL コマンド:eachAsync</target>
        </trans-unit>
        <trans-unit id="425ea449a1d70e01c64dbe6b5b29d2b23e87a858" translate="yes" xml:space="preserve">
          <source>ReQL command: epochTime</source>
          <target state="translated">ReQLコマンド:epochTime</target>
        </trans-unit>
        <trans-unit id="98c30486e513c1a061f79323971a52b0a723618f" translate="yes" xml:space="preserve">
          <source>ReQL command: eq</source>
          <target state="translated">ReQL コマンド:eq</target>
        </trans-unit>
        <trans-unit id="3e7a5fb0e8e29eec05542a30ba6b8c444ee3105a" translate="yes" xml:space="preserve">
          <source>ReQL command: eqJoin</source>
          <target state="translated">ReQL コマンド:eqJoin</target>
        </trans-unit>
        <trans-unit id="6b42cae3456f66df523de497a56b8436bdc4f933" translate="yes" xml:space="preserve">
          <source>ReQL command: error</source>
          <target state="translated">ReQLコマンド:エラー</target>
        </trans-unit>
        <trans-unit id="804a86083314037dd13602582c6f8bbc82d8f39b" translate="yes" xml:space="preserve">
          <source>ReQL command: expr</source>
          <target state="translated">ReQLコマンド:expr</target>
        </trans-unit>
        <trans-unit id="611e77c0661fdb3292aea37d8df3679b35c7df12" translate="yes" xml:space="preserve">
          <source>ReQL command: fill</source>
          <target state="translated">ReQL コマンド:fill</target>
        </trans-unit>
        <trans-unit id="9dccb4ccbba48c519594c5157e513ba0d5701de8" translate="yes" xml:space="preserve">
          <source>ReQL command: filter</source>
          <target state="translated">ReQL コマンド:フィルタ</target>
        </trans-unit>
        <trans-unit id="9cffb149505c56762d298753a09eb0d2d8a6560b" translate="yes" xml:space="preserve">
          <source>ReQL command: floor</source>
          <target state="translated">ReQLコマンド:フロア</target>
        </trans-unit>
        <trans-unit id="94cbd2adf0a235aac8c2088b4ca0140be21b53f8" translate="yes" xml:space="preserve">
          <source>ReQL command: fold</source>
          <target state="translated">ReQL コマンド:fold</target>
        </trans-unit>
        <trans-unit id="897d9459594bc60b50cde84578f8afb019abc97e" translate="yes" xml:space="preserve">
          <source>ReQL command: forEach</source>
          <target state="translated">ReQLコマンド:forEach</target>
        </trans-unit>
        <trans-unit id="bab464954d3bc8833ad8340a54c35662a312b11d" translate="yes" xml:space="preserve">
          <source>ReQL command: ge</source>
          <target state="translated">ReQL コマンド:ge</target>
        </trans-unit>
        <trans-unit id="d741c68ddfa631d21e6871f1b46d42614e18a83a" translate="yes" xml:space="preserve">
          <source>ReQL command: geojson</source>
          <target state="translated">ReQL コマンド:geojson</target>
        </trans-unit>
        <trans-unit id="82ed05550360dd83aa891c363cbc524b4a2f8f7a" translate="yes" xml:space="preserve">
          <source>ReQL command: get</source>
          <target state="translated">ReQL コマンド:get</target>
        </trans-unit>
        <trans-unit id="a1f385f0efe0b25f9afac8babc9ac59aefa669e0" translate="yes" xml:space="preserve">
          <source>ReQL command: getAll</source>
          <target state="translated">ReQLコマンド:getAll</target>
        </trans-unit>
        <trans-unit id="d0a8e46aaab6c31944afe326cfc398bb973a4686" translate="yes" xml:space="preserve">
          <source>ReQL command: getField</source>
          <target state="translated">ReQL コマンド:getField</target>
        </trans-unit>
        <trans-unit id="db529b687aac749a71e749e57613644679a50870" translate="yes" xml:space="preserve">
          <source>ReQL command: getIntersecting</source>
          <target state="translated">ReQL コマンド:getIntersecting</target>
        </trans-unit>
        <trans-unit id="2496d8ab318dd96eb24cd47e28fe55900147c8db" translate="yes" xml:space="preserve">
          <source>ReQL command: getNearest</source>
          <target state="translated">ReQL コマンド:getNearest</target>
        </trans-unit>
        <trans-unit id="aabf73eab95fa6104bd97b42749ee58b48fd0292" translate="yes" xml:space="preserve">
          <source>ReQL command: grant</source>
          <target state="translated">ReQL コマンド:grant</target>
        </trans-unit>
        <trans-unit id="7b03dc68f7aad27c5aaa10cd5ee0aad622ce5f31" translate="yes" xml:space="preserve">
          <source>ReQL command: group</source>
          <target state="translated">ReQLコマンド:グループ</target>
        </trans-unit>
        <trans-unit id="e86480de71bd273e6658917ba3f61bc7e6824443" translate="yes" xml:space="preserve">
          <source>ReQL command: gt</source>
          <target state="translated">ReQL コマンド:gt</target>
        </trans-unit>
        <trans-unit id="c24bee4561071d0d871cdd0200719bc29b97ebc8" translate="yes" xml:space="preserve">
          <source>ReQL command: hasFields</source>
          <target state="translated">ReQLコマンド:hasFields</target>
        </trans-unit>
        <trans-unit id="7bd359800f881c05722a02a6b5695da760181882" translate="yes" xml:space="preserve">
          <source>ReQL command: hours</source>
          <target state="translated">ReQLコマンド:時間</target>
        </trans-unit>
        <trans-unit id="bcc9bf4de764097e98526fcd54cc961135eb7962" translate="yes" xml:space="preserve">
          <source>ReQL command: http</source>
          <target state="translated">ReQLコマンド:http</target>
        </trans-unit>
        <trans-unit id="7431d9aa2cada8de64c18a070081d24a5b9fbb09" translate="yes" xml:space="preserve">
          <source>ReQL command: inTimezone</source>
          <target state="translated">ReQLコマンド:inTimezone</target>
        </trans-unit>
        <trans-unit id="cd1c77e55dc7e874dfb9a9c9be6aaccb645f6b7d" translate="yes" xml:space="preserve">
          <source>ReQL command: includes</source>
          <target state="translated">ReQL コマンド:インクルード</target>
        </trans-unit>
        <trans-unit id="d6711e810c115ceff2ece5c128308dbb42b5a2cf" translate="yes" xml:space="preserve">
          <source>ReQL command: indexCreate</source>
          <target state="translated">ReQL コマンド:indexCreate</target>
        </trans-unit>
        <trans-unit id="bfd351f65f12fb8a7fe92627deee9214f561ab3e" translate="yes" xml:space="preserve">
          <source>ReQL command: indexDrop</source>
          <target state="translated">ReQLコマンド:indexDrop</target>
        </trans-unit>
        <trans-unit id="3652ad2442800cc05c6e2985c0264e2e0382ca27" translate="yes" xml:space="preserve">
          <source>ReQL command: indexList</source>
          <target state="translated">ReQL コマンド:indexList</target>
        </trans-unit>
        <trans-unit id="f1e54de063dd1435fd13b88690dd9922aa7eeb29" translate="yes" xml:space="preserve">
          <source>ReQL command: indexRename</source>
          <target state="translated">ReQLコマンド:indexRename</target>
        </trans-unit>
        <trans-unit id="8b48bce424975b58f5a6277f94555aa3e884e76e" translate="yes" xml:space="preserve">
          <source>ReQL command: indexStatus</source>
          <target state="translated">ReQL コマンド:indexStatus</target>
        </trans-unit>
        <trans-unit id="f625bf613db8f884e43c623097656ac6805cb4d5" translate="yes" xml:space="preserve">
          <source>ReQL command: indexWait</source>
          <target state="translated">ReQL コマンド:indexWait</target>
        </trans-unit>
        <trans-unit id="daf81e983eb792f0c3e3c85e87f063644fd228a7" translate="yes" xml:space="preserve">
          <source>ReQL command: info</source>
          <target state="translated">ReQLコマンド:info</target>
        </trans-unit>
        <trans-unit id="f2865b2fe07ec14465b473e3e2191c86471ebc88" translate="yes" xml:space="preserve">
          <source>ReQL command: innerJoin</source>
          <target state="translated">ReQL コマンド:innerJoin</target>
        </trans-unit>
        <trans-unit id="42c5914444ddf911b418ac8a07bbdfe87434a490" translate="yes" xml:space="preserve">
          <source>ReQL command: insert</source>
          <target state="translated">ReQL コマンド:insert</target>
        </trans-unit>
        <trans-unit id="5e67c8f25f616daa8641527206d66dbca593343b" translate="yes" xml:space="preserve">
          <source>ReQL command: insertAt</source>
          <target state="translated">ReQL コマンド:insertAt</target>
        </trans-unit>
        <trans-unit id="e7827d7ac574cac26fe38a431bf6d13d20d79386" translate="yes" xml:space="preserve">
          <source>ReQL command: intersects</source>
          <target state="translated">ReQL コマンド:intersects</target>
        </trans-unit>
        <trans-unit id="2fc4b91b71a6f3ca54688e50d5dfb5007f51a3a6" translate="yes" xml:space="preserve">
          <source>ReQL command: isEmpty</source>
          <target state="translated">ReQL コマンド:isEmpty</target>
        </trans-unit>
        <trans-unit id="cc63c3831bbe8fcf8cc6bb4a0bf3937a70c83637" translate="yes" xml:space="preserve">
          <source>ReQL command: js</source>
          <target state="translated">ReQLコマンド:js</target>
        </trans-unit>
        <trans-unit id="704734e522301a470558a5131f2c6e3b6ef85eb1" translate="yes" xml:space="preserve">
          <source>ReQL command: json</source>
          <target state="translated">ReQLコマンド:json</target>
        </trans-unit>
        <trans-unit id="ee963dc4f4a09e977f54e79c552d271a5efe1ab5" translate="yes" xml:space="preserve">
          <source>ReQL command: keys</source>
          <target state="translated">ReQLコマンド:キー</target>
        </trans-unit>
        <trans-unit id="464e94774d901f92cc30536abe6dc20f1abb20d5" translate="yes" xml:space="preserve">
          <source>ReQL command: le</source>
          <target state="translated">ReQL コマンド:le</target>
        </trans-unit>
        <trans-unit id="04153a56a203e790ab924f8607428b4b8d9eb847" translate="yes" xml:space="preserve">
          <source>ReQL command: limit</source>
          <target state="translated">ReQLコマンド:リミット</target>
        </trans-unit>
        <trans-unit id="9f2597983292d8bf2c21e31bbb1694b0f4e60b71" translate="yes" xml:space="preserve">
          <source>ReQL command: line</source>
          <target state="translated">ReQLコマンド:行</target>
        </trans-unit>
        <trans-unit id="04e551b6caa8c5819ee49593aa863ab30753852a" translate="yes" xml:space="preserve">
          <source>ReQL command: literal</source>
          <target state="translated">ReQLコマンド:リテラル</target>
        </trans-unit>
        <trans-unit id="dd52f5f092b7e6f28627bef15e94ecf8131e3ef6" translate="yes" xml:space="preserve">
          <source>ReQL command: lt</source>
          <target state="translated">ReQL コマンド:lt</target>
        </trans-unit>
        <trans-unit id="8cd6432c7520ab24d1a185bc4ab261febc0ac9f9" translate="yes" xml:space="preserve">
          <source>ReQL command: map</source>
          <target state="translated">ReQLコマンド:マップ</target>
        </trans-unit>
        <trans-unit id="f29d7e822149fb3bdb52bb327684c64fed039865" translate="yes" xml:space="preserve">
          <source>ReQL command: match</source>
          <target state="translated">ReQL コマンド:match</target>
        </trans-unit>
        <trans-unit id="c75671801e688e758173dd6841f05e272b833433" translate="yes" xml:space="preserve">
          <source>ReQL command: max</source>
          <target state="translated">ReQLコマンド:max</target>
        </trans-unit>
        <trans-unit id="99b4fb1fe845d533e11f41a152cc7193a70f0a3c" translate="yes" xml:space="preserve">
          <source>ReQL command: merge</source>
          <target state="translated">ReQLコマンド:マージ</target>
        </trans-unit>
        <trans-unit id="f32d131081cad08c01e30eada59cfa338cb1b409" translate="yes" xml:space="preserve">
          <source>ReQL command: min</source>
          <target state="translated">ReQL コマンド:min</target>
        </trans-unit>
        <trans-unit id="8c3b86a9d0f6ac29f03bfbb3265cd75620f9d3e0" translate="yes" xml:space="preserve">
          <source>ReQL command: minutes</source>
          <target state="translated">ReQLコマンド:分</target>
        </trans-unit>
        <trans-unit id="5cb8dacfbfe621b76bb3f63fdb19e0e6e6dd08d6" translate="yes" xml:space="preserve">
          <source>ReQL command: mod</source>
          <target state="translated">ReQL コマンド:mod</target>
        </trans-unit>
        <trans-unit id="759964af86c65918dbeb70bab369aed0f281b7ac" translate="yes" xml:space="preserve">
          <source>ReQL command: month</source>
          <target state="translated">ReQLコマンド:月</target>
        </trans-unit>
        <trans-unit id="f88a626fbd64a50878cbe7d76d55f2a5c63f80ce" translate="yes" xml:space="preserve">
          <source>ReQL command: mul</source>
          <target state="translated">ReQLコマンド:mul</target>
        </trans-unit>
        <trans-unit id="de874b4d0dc4ed2dbc0d6880b5cb21a27c76bc32" translate="yes" xml:space="preserve">
          <source>ReQL command: ne</source>
          <target state="translated">ReQLコマンド:ne</target>
        </trans-unit>
        <trans-unit id="6c6619dceafd328a67bddca06d99d66fe8e0c745" translate="yes" xml:space="preserve">
          <source>ReQL command: next</source>
          <target state="translated">ReQLコマンド:next</target>
        </trans-unit>
        <trans-unit id="2fe619f0be2dfaac8395f90e027e18f66dfb5cde" translate="yes" xml:space="preserve">
          <source>ReQL command: noreplyWait</source>
          <target state="translated">ReQLコマンド:noreplyWait</target>
        </trans-unit>
        <trans-unit id="b786c5ec3389b7fffd91940e9df8dcfc1bed6413" translate="yes" xml:space="preserve">
          <source>ReQL command: not</source>
          <target state="translated">ReQL コマンド:ではありません。</target>
        </trans-unit>
        <trans-unit id="51bf93483726e0ed581b769efc939be0c439b3f0" translate="yes" xml:space="preserve">
          <source>ReQL command: now</source>
          <target state="translated">ReQLコマンド:今</target>
        </trans-unit>
        <trans-unit id="142c81f0e7aad4d403a5e9717af093c3fa309da0" translate="yes" xml:space="preserve">
          <source>ReQL command: nth</source>
          <target state="translated">ReQL コマンド:n 番目</target>
        </trans-unit>
        <trans-unit id="7a52ef447aef8fb68ab5bf4ab1b1be3cb0a8e6fa" translate="yes" xml:space="preserve">
          <source>ReQL command: object</source>
          <target state="translated">ReQLコマンド:オブジェクト</target>
        </trans-unit>
        <trans-unit id="0285d42b6439c5758658f23558fb2a316aa232a9" translate="yes" xml:space="preserve">
          <source>ReQL command: offsetsOf</source>
          <target state="translated">ReQL コマンド:offsetsOf</target>
        </trans-unit>
        <trans-unit id="37141a239a711e7b56007bb0ff0bef4bc3a55f32" translate="yes" xml:space="preserve">
          <source>ReQL command: or</source>
          <target state="translated">ReQL コマンド:または</target>
        </trans-unit>
        <trans-unit id="469eeab7689f5192386b409764992410551e27f1" translate="yes" xml:space="preserve">
          <source>ReQL command: orderBy</source>
          <target state="translated">ReQLコマンド:orderBy</target>
        </trans-unit>
        <trans-unit id="c49f00d76ad001bdc3166004292a3c0a27e75d43" translate="yes" xml:space="preserve">
          <source>ReQL command: outerJoin</source>
          <target state="translated">ReQL コマンド:outerJoin</target>
        </trans-unit>
        <trans-unit id="cd3e4940e21cee61fccac24d189f22bbfab1ba9f" translate="yes" xml:space="preserve">
          <source>ReQL command: pluck</source>
          <target state="translated">ReQLコマンド:pluck</target>
        </trans-unit>
        <trans-unit id="0914f786606ccc5c9796e887a77cd485af776083" translate="yes" xml:space="preserve">
          <source>ReQL command: point</source>
          <target state="translated">ReQLコマンド:ポイント</target>
        </trans-unit>
        <trans-unit id="dce548026c69300e92a29bc23af287b80ded5dd0" translate="yes" xml:space="preserve">
          <source>ReQL command: polygon</source>
          <target state="translated">ReQLコマンド:ポリゴン</target>
        </trans-unit>
        <trans-unit id="ec7f5406bd2ba258cc0960fe19f501b84159cbf3" translate="yes" xml:space="preserve">
          <source>ReQL command: polygonSub</source>
          <target state="translated">ReQLコマンド:polygonSub</target>
        </trans-unit>
        <trans-unit id="25d262b79633d6a23b112ff0642a2bbd27b058de" translate="yes" xml:space="preserve">
          <source>ReQL command: prepend</source>
          <target state="translated">ReQL コマンド:prepend</target>
        </trans-unit>
        <trans-unit id="32df6b377a42b81280feba4abd45d6fb776b7c5b" translate="yes" xml:space="preserve">
          <source>ReQL command: r</source>
          <target state="translated">ReQLコマンド:r</target>
        </trans-unit>
        <trans-unit id="163b8f2d543ca883e5f457526db714e8507bc273" translate="yes" xml:space="preserve">
          <source>ReQL command: random</source>
          <target state="translated">ReQLコマンド:ランダム</target>
        </trans-unit>
        <trans-unit id="abd0f1d41d793cf5d1fd1be44dad48ed9f52dcb0" translate="yes" xml:space="preserve">
          <source>ReQL command: range</source>
          <target state="translated">ReQLコマンド:範囲</target>
        </trans-unit>
        <trans-unit id="abcfac2a068eb352bf7b1585227c21dd99a9dad2" translate="yes" xml:space="preserve">
          <source>ReQL command: rebalance</source>
          <target state="translated">ReQLコマンド:リバランス</target>
        </trans-unit>
        <trans-unit id="ed78391e00455b6f7508ebf957eb0c3519b8cda6" translate="yes" xml:space="preserve">
          <source>ReQL command: reconfigure</source>
          <target state="translated">ReQLコマンド:再設定</target>
        </trans-unit>
        <trans-unit id="bb603637d01d111818e3e54d87f6fbe2f0948e04" translate="yes" xml:space="preserve">
          <source>ReQL command: reconnect</source>
          <target state="translated">ReQLコマンド:再接続</target>
        </trans-unit>
        <trans-unit id="ca15dd0e4b3cb78958bbc04ff2ebdfc6237c1480" translate="yes" xml:space="preserve">
          <source>ReQL command: reduce</source>
          <target state="translated">ReQLコマンド:reduce</target>
        </trans-unit>
        <trans-unit id="1b669d035898f8b7832c9d6b122df85452bb3621" translate="yes" xml:space="preserve">
          <source>ReQL command: replace</source>
          <target state="translated">ReQLコマンド:置換</target>
        </trans-unit>
        <trans-unit id="462aad92203d25425961d17c822cf9c057229d02" translate="yes" xml:space="preserve">
          <source>ReQL command: round</source>
          <target state="translated">ReQLコマンド:ラウンド</target>
        </trans-unit>
        <trans-unit id="021b12c6ad75724f11b7b4db3ef364873869fc62" translate="yes" xml:space="preserve">
          <source>ReQL command: row</source>
          <target state="translated">ReQLコマンド:行</target>
        </trans-unit>
        <trans-unit id="30f7a7cfdc10d2f8f0979e09db335392564ee022" translate="yes" xml:space="preserve">
          <source>ReQL command: run</source>
          <target state="translated">ReQLコマンド:実行</target>
        </trans-unit>
        <trans-unit id="35baf0bd20ef826e0e6f2d92d0b5ececfd90953e" translate="yes" xml:space="preserve">
          <source>ReQL command: sample</source>
          <target state="translated">ReQLコマンド:サンプル</target>
        </trans-unit>
        <trans-unit id="0be3d60445795016ac04b5c046a0a131b0ae6079" translate="yes" xml:space="preserve">
          <source>ReQL command: seconds</source>
          <target state="translated">ReQLコマンド:秒</target>
        </trans-unit>
        <trans-unit id="f1bb2be8ae02baa7d054dd238fb17ff6adc0e5fc" translate="yes" xml:space="preserve">
          <source>ReQL command: server</source>
          <target state="translated">ReQLコマンド:サーバー</target>
        </trans-unit>
        <trans-unit id="bd21c33c7d7e4a661ae24315ff5adaf657b0d101" translate="yes" xml:space="preserve">
          <source>ReQL command: setDifference</source>
          <target state="translated">ReQLコマンド:setDifference</target>
        </trans-unit>
        <trans-unit id="ee8b9454ec4e6e9f1927b8de9dc70609dcdeafae" translate="yes" xml:space="preserve">
          <source>ReQL command: setInsert</source>
          <target state="translated">ReQLコマンド:setInsert</target>
        </trans-unit>
        <trans-unit id="c9a0eb231439f96cafbfefb58f50b26a3a819a2d" translate="yes" xml:space="preserve">
          <source>ReQL command: setIntersection</source>
          <target state="translated">ReQLコマンド:setIntersection</target>
        </trans-unit>
        <trans-unit id="04f4bae437d2c848c78c8d28f84714b52d7f6c3f" translate="yes" xml:space="preserve">
          <source>ReQL command: setUnion</source>
          <target state="translated">ReQLコマンド:setUnion</target>
        </trans-unit>
        <trans-unit id="19311ff5522c6db5f5f3d20e812d39f1a5fc5892" translate="yes" xml:space="preserve">
          <source>ReQL command: skip</source>
          <target state="translated">ReQLコマンド:スキップ</target>
        </trans-unit>
        <trans-unit id="76501a2b3ef6222fd67dd4c4fd5d7848613ac2b2" translate="yes" xml:space="preserve">
          <source>ReQL command: slice</source>
          <target state="translated">ReQLコマンド:スライス</target>
        </trans-unit>
        <trans-unit id="5dfe709e1e34e3632317f2600c09e5128cb9ae93" translate="yes" xml:space="preserve">
          <source>ReQL command: spliceAt</source>
          <target state="translated">ReQL コマンド:spliceAt</target>
        </trans-unit>
        <trans-unit id="c8464e0de44dd2800e23b2097a3059deee41b021" translate="yes" xml:space="preserve">
          <source>ReQL command: split</source>
          <target state="translated">ReQLコマンド:スプリット</target>
        </trans-unit>
        <trans-unit id="570b17954ae1d507f16d974d184fbad67acf5855" translate="yes" xml:space="preserve">
          <source>ReQL command: status</source>
          <target state="translated">ReQLコマンド:ステータス</target>
        </trans-unit>
        <trans-unit id="13e59b90332b50ab084f0e4a384ba3686605cd3f" translate="yes" xml:space="preserve">
          <source>ReQL command: sub</source>
          <target state="translated">ReQLコマンド:サブ</target>
        </trans-unit>
        <trans-unit id="10e1b3442af15fbd32119e6a98b64febea339584" translate="yes" xml:space="preserve">
          <source>ReQL command: sum</source>
          <target state="translated">ReQL コマンド:sum</target>
        </trans-unit>
        <trans-unit id="da0339a917c31dc275e5131893031fc7f6acce4c" translate="yes" xml:space="preserve">
          <source>ReQL command: sync</source>
          <target state="translated">ReQLコマンド:同期</target>
        </trans-unit>
        <trans-unit id="8d21f3686cbc79062796b79f01a307a2daa74707" translate="yes" xml:space="preserve">
          <source>ReQL command: table</source>
          <target state="translated">ReQLコマンド:テーブル</target>
        </trans-unit>
        <trans-unit id="5a75ff2420141b13ad812407726590d8e11bf491" translate="yes" xml:space="preserve">
          <source>ReQL command: tableCreate</source>
          <target state="translated">ReQLコマンド:tableCreate</target>
        </trans-unit>
        <trans-unit id="6edc96e8bb975009898532d7c3ac0d5c9c3e1171" translate="yes" xml:space="preserve">
          <source>ReQL command: tableDrop</source>
          <target state="translated">ReQLコマンド:tableDrop</target>
        </trans-unit>
        <trans-unit id="321385e05615dc1e097447354a11170214318796" translate="yes" xml:space="preserve">
          <source>ReQL command: tableList</source>
          <target state="translated">ReQLコマンド:tableList</target>
        </trans-unit>
        <trans-unit id="0659bee81d319deb7e130473db0dc2263f4622f3" translate="yes" xml:space="preserve">
          <source>ReQL command: time</source>
          <target state="translated">ReQLコマンド:時間</target>
        </trans-unit>
        <trans-unit id="37216ac18e28d2fe512c09beeb963db758364a4b" translate="yes" xml:space="preserve">
          <source>ReQL command: timeOfDay</source>
          <target state="translated">ReQLコマンド:timeOfDay</target>
        </trans-unit>
        <trans-unit id="1de03f1799a9257b1e0cb0c6a0e68b6a2125ca72" translate="yes" xml:space="preserve">
          <source>ReQL command: timezone</source>
          <target state="translated">ReQLコマンド:timezone</target>
        </trans-unit>
        <trans-unit id="2af08e633e375c04686b6dd4e002092239a1eed9" translate="yes" xml:space="preserve">
          <source>ReQL command: toArray</source>
          <target state="translated">ReQLコマンド:toArray</target>
        </trans-unit>
        <trans-unit id="513f46f55a4b510e789657e077cfdb94101a2398" translate="yes" xml:space="preserve">
          <source>ReQL command: toEpochTime</source>
          <target state="translated">ReQLコマンド:toEpochTime</target>
        </trans-unit>
        <trans-unit id="627570fef15c7acc0c2663e684f59cb33b2b1459" translate="yes" xml:space="preserve">
          <source>ReQL command: toGeojson</source>
          <target state="translated">ReQL コマンド:toGeojson</target>
        </trans-unit>
        <trans-unit id="56852d9c1a1873fd61c17972ef99801ac2c87ecf" translate="yes" xml:space="preserve">
          <source>ReQL command: toISO8601</source>
          <target state="translated">ReQLコマンド:toISO8601</target>
        </trans-unit>
        <trans-unit id="f6f174b5765bf64194d9ca622d10e16cd8a46617" translate="yes" xml:space="preserve">
          <source>ReQL command: toJsonString, toJSON</source>
          <target state="translated">ReQLコマンド:toJsonString、toJSON</target>
        </trans-unit>
        <trans-unit id="19cdf1a2a2fefcc0935b25802524c2a58527dbbb" translate="yes" xml:space="preserve">
          <source>ReQL command: typeOf</source>
          <target state="translated">ReQLコマンド:typeOf</target>
        </trans-unit>
        <trans-unit id="8022749a3da3c400ea76655d26b31790850a20bf" translate="yes" xml:space="preserve">
          <source>ReQL command: ungroup</source>
          <target state="translated">ReQL コマンド:ungroup</target>
        </trans-unit>
        <trans-unit id="fe481736ff3cb3a807c23188aaf45a55b2d99dc4" translate="yes" xml:space="preserve">
          <source>ReQL command: union</source>
          <target state="translated">ReQLコマンド:ユニオン</target>
        </trans-unit>
        <trans-unit id="6dbff263f97562be4ce701c91fec033e04feaf07" translate="yes" xml:space="preserve">
          <source>ReQL command: upcase</source>
          <target state="translated">ReQLコマンド:アップケース</target>
        </trans-unit>
        <trans-unit id="455ab20ffc94cace160b696dfbeaa15326dd0cf2" translate="yes" xml:space="preserve">
          <source>ReQL command: update</source>
          <target state="translated">ReQLコマンド:更新</target>
        </trans-unit>
        <trans-unit id="e0651ec1f9bbf8339e03befeb514c75a1ab27c73" translate="yes" xml:space="preserve">
          <source>ReQL command: use</source>
          <target state="translated">ReQLコマンド:使用</target>
        </trans-unit>
        <trans-unit id="4e9d4a579dc4455f2e6db7cb499db7af40804ded" translate="yes" xml:space="preserve">
          <source>ReQL command: uuid</source>
          <target state="translated">ReQLコマンド:uuid</target>
        </trans-unit>
        <trans-unit id="325ff960145ced96b81cf4fd70fa7b1153d74132" translate="yes" xml:space="preserve">
          <source>ReQL command: values</source>
          <target state="translated">ReQLコマンド:値</target>
        </trans-unit>
        <trans-unit id="997a6bf76bb87f3bcdf7d12f2d88b575cc41fefa" translate="yes" xml:space="preserve">
          <source>ReQL command: wait</source>
          <target state="translated">ReQL コマンド:wait</target>
        </trans-unit>
        <trans-unit id="85a62250b115e6cd99762def1db4a11a411a71e6" translate="yes" xml:space="preserve">
          <source>ReQL command: withFields</source>
          <target state="translated">ReQLコマンド:withFields</target>
        </trans-unit>
        <trans-unit id="369250ffd90be27fd1fa8cfe5c8ea1f06e5ca8ed" translate="yes" xml:space="preserve">
          <source>ReQL command: without</source>
          <target state="translated">ReQLコマンド:なし</target>
        </trans-unit>
        <trans-unit id="274b2016fa95fda2a3b60df052ec709fc131c8b3" translate="yes" xml:space="preserve">
          <source>ReQL command: year</source>
          <target state="translated">ReQLコマンド:年</target>
        </trans-unit>
        <trans-unit id="395a7dc9265d0f496258ee4292950abf3e16e123" translate="yes" xml:space="preserve">
          <source>ReQL command: zip</source>
          <target state="translated">ReQLコマンド:zip</target>
        </trans-unit>
        <trans-unit id="0745f2086f93ccd2a331d7072137817d3cb55afa" translate="yes" xml:space="preserve">
          <source>ReQL commands</source>
          <target state="translated">ReQLコマンド</target>
        </trans-unit>
        <trans-unit id="59807be887cb81af9dbfaac16f14ad42e6245fa9" translate="yes" xml:space="preserve">
          <source>ReQL commands are represented as a list of two or three elements.</source>
          <target state="translated">ReQLコマンドは、2つまたは3つの要素のリストとして表現されます。</target>
        </trans-unit>
        <trans-unit id="94f7952690489bb7dd3edb6940dbc296908f9252" translate="yes" xml:space="preserve">
          <source>ReQL data</source>
          <target state="translated">リQLデータ</target>
        </trans-unit>
        <trans-unit id="09010231d56a5d2fda3a74b70c661c1e81cadefe" translate="yes" xml:space="preserve">
          <source>ReQL data types</source>
          <target state="translated">ReQLデータ型</target>
        </trans-unit>
        <trans-unit id="191a7a574620481e86f08d38eca70528f9f36e03" translate="yes" xml:space="preserve">
          <source>ReQL embeds into your programming language</source>
          <target state="translated">ReQLをプログラミング言語に組み込む</target>
        </trans-unit>
        <trans-unit id="125f3b5c55d48af1835dac4b751c29ca63213adc" translate="yes" xml:space="preserve">
          <source>ReQL error types</source>
          <target state="translated">ReQL エラータイプ</target>
        </trans-unit>
        <trans-unit id="cece285d53709eacd625cbfa5e27ed559a1d29d6" translate="yes" xml:space="preserve">
          <source>ReQL geometry objects are not &lt;a href=&quot;http://geojson.org&quot;&gt;GeoJSON&lt;/a&gt; objects, but you can convert back and forth between them with the &lt;a href=&quot;../../../api/javascript/geojson/index&quot;&gt;geojson&lt;/a&gt; and &lt;a href=&quot;../../../api/javascript/to_geojson/index&quot;&gt;toGeojson&lt;/a&gt; commands.</source>
          <target state="translated">ReQLジオメトリオブジェクトは&lt;a href=&quot;http://geojson.org&quot;&gt;GeoJSON&lt;/a&gt;オブジェクトではありませんが、&lt;a href=&quot;../../../api/javascript/to_geojson/index&quot;&gt;geojson&lt;/a&gt;コマンドとtoGeojsonコマンドを使用して&lt;a href=&quot;../../../api/javascript/geojson/index&quot;&gt;オブジェクト&lt;/a&gt;間で相互に変換できます。</target>
        </trans-unit>
        <trans-unit id="35a42830df2a6efe0b040fe441dccc75dde4e460" translate="yes" xml:space="preserve">
          <source>ReQL has commands for extracting parts of &lt;a href=&quot;../../dates-and-times/javascript/index&quot;&gt;dates and times&lt;/a&gt;, including &lt;a href=&quot;../../../api/javascript/year/index&quot;&gt;year&lt;/a&gt;, &lt;a href=&quot;../../../api/javascript/month/index&quot;&gt;month&lt;/a&gt;, &lt;a href=&quot;../../../api/javascript/day/index&quot;&gt;day&lt;/a&gt;, &lt;a href=&quot;../../../api/javascript/day_of_week/index&quot;&gt;dayOfWeek&lt;/a&gt; and more. You can use these with &lt;a href=&quot;../../../api/javascript/group/index&quot;&gt;group&lt;/a&gt; to group by various intervals. Suppose you had a table of invoices and wanted to retrieve them in groups ordered by year and month:</source>
          <target state="translated">ReQLには、&lt;a href=&quot;../../../api/javascript/year/index&quot;&gt;年&lt;/a&gt;、&lt;a href=&quot;../../../api/javascript/month/index&quot;&gt;月&lt;/a&gt;、&lt;a href=&quot;../../../api/javascript/day/index&quot;&gt;日&lt;/a&gt;、&lt;a href=&quot;../../../api/javascript/day_of_week/index&quot;&gt;dayOfWeek&lt;/a&gt;など、&lt;a href=&quot;../../dates-and-times/javascript/index&quot;&gt;日付と時刻の&lt;/a&gt;一部を抽出するコマンドがあります。これらを&lt;a href=&quot;../../../api/javascript/group/index&quot;&gt;group&lt;/a&gt;とともに使用すると、さまざまな間隔でグループ化できます。請求書の表があり、年および月順に並べられたグループでそれらを取得したいとします。</target>
        </trans-unit>
        <trans-unit id="da86166d7e392999c718f777993e73c609f2fbc7" translate="yes" xml:space="preserve">
          <source>ReQL is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;domain specific language&lt;/a&gt; expressed in the host language. The three official drivers follow a very similar syntax; you should stick to that model as closely as your chosen language allows. Typically you are free to use either a prefix or infix notation, or mix the two.</source>
          <target state="translated">ReQLは、ホスト言語で表現された&lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-specific_language&quot;&gt;ドメイン固有の言語&lt;/a&gt;です。3つの公式ドライバーは非常によく似た構文に従います。選択した言語が許す限り、そのモデルに固執する必要があります。通常、プレフィックス表記またはインフィックス表記のいずれかを使用するか、2つを混在させることができます。</target>
        </trans-unit>
        <trans-unit id="03b7a017a84f9b3da4de0039647a3013516208eb" translate="yes" xml:space="preserve">
          <source>ReQL is different from other NoSQL query languages. It&amp;rsquo;s built on three key principles:</source>
          <target state="translated">ReQLは他のNoSQLクエリ言語とは異なります。3つの主要な原則に基づいて構築されています。</target>
        </trans-unit>
        <trans-unit id="dab0c7b28a7500cbaccffec7e5e887241992d2da" translate="yes" xml:space="preserve">
          <source>ReQL is efficient</source>
          <target state="translated">ReQLが効率的</target>
        </trans-unit>
        <trans-unit id="6c8ae750e37a742a762efbb4d4a707a2f88e21d9" translate="yes" xml:space="preserve">
          <source>ReQL is the RethinkDB query language. It offers a very powerful and convenient way to manipulate JSON documents. This document is a gentle introduction to ReQL concepts. You don&amp;rsquo;t have to read it to be productive with RethinkDB, but it helps to understand some basics.</source>
          <target state="translated">ReQLはRethinkDBクエリ言語です。JSONドキュメントを操作するための非常に強力で便利な方法を提供します。このドキュメントは、ReQLの概念の穏やかな紹介です。RethinkDBで生産性を高めるためにこれを読む必要はありませんが、いくつかの基本を理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="62b7b785aa09ec970184f5e88cf1e8539b883367" translate="yes" xml:space="preserve">
          <source>ReQL pseudo types</source>
          <target state="translated">ReQL 疑似型</target>
        </trans-unit>
        <trans-unit id="8b783f5ac5ce21c42bde10cc36b31b26d3e95f39" translate="yes" xml:space="preserve">
          <source>ReQL queries are composable</source>
          <target state="translated">ReQL クエリはコンポーザブル</target>
        </trans-unit>
        <trans-unit id="0d649019dd97255601cf647335065eb587632177" translate="yes" xml:space="preserve">
          <source>ReQL queries are executed lazily:</source>
          <target state="translated">ReQL クエリは怠惰に実行されます。</target>
        </trans-unit>
        <trans-unit id="46cc7a8d6eff2c8a22f5442d9d90d27387cddcaa" translate="yes" xml:space="preserve">
          <source>ReQL queries are functional</source>
          <target state="translated">ReQL クエリは機能的</target>
        </trans-unit>
        <trans-unit id="baf0a6b4a49af458581fecb524a2b910b9bc313c" translate="yes" xml:space="preserve">
          <source>ReQL types and commands are defined in the &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/src/rdb_protocol/ql2.proto&quot;&gt;ql2.proto&lt;/a&gt; file.</source>
          <target state="translated">ReQLタイプとコマンドは、&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/blob/next/src/rdb_protocol/ql2.proto&quot;&gt;ql2.proto&lt;/a&gt;ファイルで定義されています。</target>
        </trans-unit>
        <trans-unit id="2093e96b1a65a9a688a5cc8dffba6429e5a47515" translate="yes" xml:space="preserve">
          <source>ReQL&amp;rsquo;s nesting depth is limited to 20 levels. This can be changed with the undocumented &lt;code&gt;nestingDepth&lt;/code&gt; (or &lt;code&gt;nesting_depth&lt;/code&gt;) option to &lt;code&gt;r.expr()&lt;/code&gt;, but before using that, consider whether the document can be reorganized to avoid the error.</source>
          <target state="translated">ReQLのネストの深さは20レベルに制限されています。これは、文書化されていない &lt;code&gt;nestingDepth&lt;/code&gt; （または &lt;code&gt;nesting_depth&lt;/code&gt; ）オプションを使用して &lt;code&gt;r.expr()&lt;/code&gt; に変更できますが、それを使用する前に、ドキュメントを再編成してエラーを回避できるかどうかを検討してください。</target>
        </trans-unit>
        <trans-unit id="48fa53a29856312c157be48d24a169a0a913953d" translate="yes" xml:space="preserve">
          <source>Read &lt;a href=&quot;../../../docs/sharding-and-replication/index&quot;&gt;Sharding and replication&lt;/a&gt; for a complete discussion of the subject, including advanced topics.</source>
          <target state="translated">高度なトピックを含む、このテーマの完全な説明については、&lt;a href=&quot;../../../docs/sharding-and-replication/index&quot;&gt;シャーディングとレプリケーション&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="b4eef36f30bb0fd18c9978dad0fad8450b46a35e" translate="yes" xml:space="preserve">
          <source>Read Compose&amp;rsquo;s &lt;a href=&quot;https://docs.compose.io/getting-started/rethinkdb-deployments.html&quot;&gt;overview&lt;/a&gt; of RethinkDB support and their &lt;a href=&quot;https://help.compose.io/docs/connecting-to-rethinkdb&quot;&gt;Connecting to RethinkDB&lt;/a&gt; documentation for more information.</source>
          <target state="translated">詳細&lt;a href=&quot;https://docs.compose.io/getting-started/rethinkdb-deployments.html&quot;&gt;について&lt;/a&gt;は、ComposeのRethinkDBサポートの概要とRethinkDBへの&lt;a href=&quot;https://help.compose.io/docs/connecting-to-rethinkdb&quot;&gt;接続に関する&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="646061e2f38829c59bbd2bebc1acc8f7f33e1c4e" translate="yes" xml:space="preserve">
          <source>Read More</source>
          <target state="translated">続きを読む</target>
        </trans-unit>
        <trans-unit id="26899b3ad08bf6f09ed1824ded31e41b43aadfd5" translate="yes" xml:space="preserve">
          <source>Read about &lt;a href=&quot;../../secondary-indexes/javascript/index&quot;&gt;creating secondary indexes in RethinkDB&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../secondary-indexes/javascript/index&quot;&gt;RethinkDBでのセカンダリインデックスの作成&lt;/a&gt;についてお読みください。</target>
        </trans-unit>
        <trans-unit id="b6445979be97a3e933b6bb240cff09a6407b2918" translate="yes" xml:space="preserve">
          <source>Read about &lt;a href=&quot;http://nobrainer.io/docs/validations/&quot;&gt;validation in NoBrainer&lt;/a&gt; for more details.</source>
          <target state="translated">詳細について&lt;a href=&quot;http://nobrainer.io/docs/validations/&quot;&gt;は、NoBrainer&lt;/a&gt;での検証についてお読みください。</target>
        </trans-unit>
        <trans-unit id="f88dbb0d2a98507a39fce321163277b3a73a9734" translate="yes" xml:space="preserve">
          <source>Read about &lt;a href=&quot;https://rethinkdb.com/blog/lambda-functions/&quot;&gt;how this technology is implemented&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については&lt;a href=&quot;https://rethinkdb.com/blog/lambda-functions/&quot;&gt;、このテクノロジーの実装方法について&lt;/a&gt;お読みください。</target>
        </trans-unit>
        <trans-unit id="ad086cf55b834c375e209972840f1342401d8c41" translate="yes" xml:space="preserve">
          <source>Read more</source>
          <target state="translated">続きを読む</target>
        </trans-unit>
        <trans-unit id="a2453263034e6e359ea2f543b4881317b239da0a" translate="yes" xml:space="preserve">
          <source>Read more about this command &amp;rarr;</source>
          <target state="translated">このコマンドの詳細を読む&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="02f254122240b0223890c627f9fb1fededf11d25" translate="yes" xml:space="preserve">
          <source>Read more details about RethinkDB&amp;rsquo;s binary object support: &lt;a href=&quot;../../../docs/storing-binary/javascript/index&quot;&gt;Storing binary objects&lt;/a&gt;.</source>
          <target state="translated">RethinkDBのバイナリオブジェクトサポートの詳細については、バイナリオブジェクトの&lt;a href=&quot;../../../docs/storing-binary/javascript/index&quot;&gt;保存&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="90468c1697f8bededde1b19c579430c9cba85e5a" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../../introduction-to-reql/index&quot;&gt;introduction to RQL&lt;/a&gt; to learn about the ReQL concepts in more depth.</source>
          <target state="translated">読む&lt;a href=&quot;../../introduction-to-reql/index&quot;&gt;RQLへの導入を&lt;/a&gt;より深さReQLの概念について学ぶために。</target>
        </trans-unit>
        <trans-unit id="b7305dc3ce2b74ab8470a10b76b25826ab716813" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../../quickstart/index&quot;&gt;thirty-second quickstart&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../../quickstart/index&quot;&gt;32秒のクイックスタート&lt;/a&gt;を読む</target>
        </trans-unit>
        <trans-unit id="bd50ab4e04e65b18c59e790e54937f033d4e636d" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../../quickstart/index&quot;&gt;thirty-second quickstart&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../quickstart/index&quot;&gt;32秒のクイックスタート&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="b3f7216d53c7652972070c1613c1e9033b24a010" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../guide/javascript/index&quot;&gt;ten-minute guide&lt;/a&gt; to get started with using RethinkDB.</source>
          <target state="translated">RethinkDBの使用を開始するには、&lt;a href=&quot;../guide/javascript/index&quot;&gt;10分のガイド&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="2d09665db0a53946b8e9d31dc64ad079edc1aaff" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../quickstart/index&quot;&gt;thirty-second quickstart&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../quickstart/index&quot;&gt;32秒のクイックスタート&lt;/a&gt;を読む</target>
        </trans-unit>
        <trans-unit id="a87c2bcd4362cf6fb041820c08ec2389cdff1f01" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/tree/v2.3.x/drivers&quot;&gt;source code for existing drivers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/rethinkdb/rethinkdb/tree/v2.3.x/drivers&quot;&gt;既存のドライバのソースコードを&lt;/a&gt;読んでください。</target>
        </trans-unit>
        <trans-unit id="ecd34094f7e876256eb1edd303a58f87ed2f40f7" translate="yes" xml:space="preserve">
          <source>Read the article on &lt;a href=&quot;../../../docs/data-types/index&quot;&gt;ReQL data types&lt;/a&gt; for a more detailed discussion. Note that some possible return values from &lt;code&gt;typeOf&lt;/code&gt; are internal values, such as &lt;code&gt;MAXVAL&lt;/code&gt;, and unlikely to be returned from queries in standard practice.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../docs/data-types/index&quot;&gt;ReQLデータ型&lt;/a&gt;に関する記事をご覧ください。いくつかの可能な戻り値という注意 &lt;code&gt;typeOf&lt;/code&gt; 内部のような値です &lt;code&gt;MAXVAL&lt;/code&gt; 、および標準的な方法でクエリから返される可能性は低いです。</target>
        </trans-unit>
        <trans-unit id="69a94a798fe63c51a0462527c27fb6ae3d9aa98a" translate="yes" xml:space="preserve">
          <source>Read the article on &lt;a href=&quot;../writing-drivers/index&quot;&gt;writing RethinkDB drivers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../writing-drivers/index&quot;&gt;RethinkDBドライバーの作成&lt;/a&gt;に関する記事を読んでください。</target>
        </trans-unit>
        <trans-unit id="6ae455b050e5bf042c051a0264064730a12241af" translate="yes" xml:space="preserve">
          <source>Reads and writes are performed by eight client servers, with 128 concurrent connections per database server. This means we have 128 connections with just a single RethinkDB server, and 2048 concurrent connections with a 16-node cluster. We used a replication factor of two per table, meaning each document was replicated to two separate servers.</source>
          <target state="translated">読み出しと書き込みは8台のクライアントサーバで実行され、データベースサーバ1台あたり128の同時接続が可能です。つまり、1台のRethinkDBサーバーで128の接続があり、16ノードのクラスタでは2048の同時接続があることになります。テーブルごとに2のレプリケーション係数を使用し、各ドキュメントを2つの別々のサーバーにレプリケートしました。</target>
        </trans-unit>
        <trans-unit id="ee4d904478e46dd47f209480eb0a07339d3b0d44" translate="yes" xml:space="preserve">
          <source>Reads run in &lt;code&gt;&quot;outdated&quot;&lt;/code&gt; mode will return outdated data even during normal operation, but the data will typically be less than a second out of date. In the event of a network or server failure, the data may be much more out of date. The advantage of running reads in &lt;code&gt;&quot;outdated&quot;&lt;/code&gt; mode is that the latency and throughput are often better than in &lt;code&gt;&quot;single&quot;&lt;/code&gt; mode, in addition to the availability differences described in the previous section.</source>
          <target state="translated">&lt;code&gt;&quot;outdated&quot;&lt;/code&gt; モードで読み取りを実行すると、通常の操作中でも古いデータが返されますが、データは通常、1秒未満の古さになります。ネットワークまたはサーバーに障害が発生した場合、データははるかに古くなっている可能性があります。 &lt;code&gt;&quot;outdated&quot;&lt;/code&gt; モードで読み取りを実行する利点は、前のセクションで説明した可用性の違いに加えて、レイテンシとスループットが &lt;code&gt;&quot;single&quot;&lt;/code&gt; モードよりも優れていることが多いことです。</target>
        </trans-unit>
        <trans-unit id="4f4e1fdf56fccb0716e779b51b4fd1b78316b38b" translate="yes" xml:space="preserve">
          <source>Reads run in &lt;code&gt;single&lt;/code&gt; mode may succeed even if the table is not available, but this is not guaranteed. Reads run in &lt;code&gt;outdated&lt;/code&gt; mode will succeed as long as at least one replica for each of the relevant shards is available.</source>
          <target state="translated">&lt;code&gt;single&lt;/code&gt; モードで実行される読み取りは、テーブルが利用できない場合でも成功する可能性がありますが、これは保証されません。 &lt;code&gt;outdated&lt;/code&gt; モードで実行される読み取りは、関連する各シャードの少なくとも1つのレプリカが利用可能である限り成功します。</target>
        </trans-unit>
        <trans-unit id="1d0349ac58ea3d38ff5f50980a915c92316eb132" translate="yes" xml:space="preserve">
          <source>Realtime feeds</source>
          <target state="translated">リアルタイムフィード</target>
        </trans-unit>
        <trans-unit id="6858c6a7228cbd560d4cfe81ead5db5f9e52f0b8" translate="yes" xml:space="preserve">
          <source>Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.</source>
          <target state="translated">テーブルの欠片をリバランスします。データベース上で呼び出されると、そのデータベース内のすべてのテーブルがリバランスされます。</target>
        </trans-unit>
        <trans-unit id="0fe299ad13ae6716e4c9dd8be790a6a70d91b0f3" translate="yes" xml:space="preserve">
          <source>Rebuild indexes</source>
          <target state="translated">インデックスの再構築</target>
        </trans-unit>
        <trans-unit id="36141d622dd1843fafbde3ba5b63d5704d3eaca5" translate="yes" xml:space="preserve">
          <source>Receive responses</source>
          <target state="translated">回答を受け取る</target>
        </trans-unit>
        <trans-unit id="f40f931807d3e751f75ae8f61f51b88d3c55f63e" translate="yes" xml:space="preserve">
          <source>Recently, the team behind BigchainDB &amp;ndash; a scalable blockchain database built on top of RethinkDB &amp;ndash; has benchmarked RethinkDB on a 32-server cluster running on Amazon&amp;rsquo;s EC2. They measured throughput of more than a million writes per second. Their conclusion: &amp;ldquo;There is linear scaling in write performance with the number of nodes.&amp;rdquo; The full report is available at &lt;a href=&quot;https://www.bigchaindb.com/whitepaper/&quot;&gt;https://www.bigchaindb.com/whitepaper/&lt;/a&gt;</source>
          <target state="translated">最近、BigchainDB（RethinkDBの上に構築されたスケーラブルなブロックチェーンデータベース）の背後にあるチームは、AmazonのEC2で実行されている32サーバークラスターでRethinkDBをベンチマークしました。彼らは、毎秒100万を超える書き込みのスループットを測定しました。彼らの結論：「ノードの数に応じて書き込みパフォーマンスには線形のスケーリングがあります。」完全なレポートは&lt;a href=&quot;https://www.bigchaindb.com/whitepaper/&quot;&gt;https://www.bigchaindb.com/whitepaper/&lt;/a&gt;で入手できます。</target>
        </trans-unit>
        <trans-unit id="4ed843dc519783f62617c1358f81fae926ee0818" translate="yes" xml:space="preserve">
          <source>Reconfigure a table&amp;rsquo;s sharding and replication.</source>
          <target state="translated">テーブルのシャーディングとレプリケーションを再構成します。</target>
        </trans-unit>
        <trans-unit id="2ce1c56b1ad89cc7c3d7f1c846b92e4404ee94e6" translate="yes" xml:space="preserve">
          <source>Reconfiguring a table (changing the number of shards, rebalancing, etc.) causes brief losses of availability at various points during the reconfiguration.</source>
          <target state="translated">テーブルの再構成(シャード数の変更、リバランスなど)を行うと、再構成中の様々なポイントで短時間で可用性が失われます。</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="d883c0d0e6af1f4f5d9bae45cb31865272b7621e" translate="yes" xml:space="preserve">
          <source>Reference a database.</source>
          <target state="translated">データベースを参照します。</target>
        </trans-unit>
        <trans-unit id="f97b0faeb0aa223b01f7944075457b4fdb5c0b17" translate="yes" xml:space="preserve">
          <source>Related commands</source>
          <target state="translated">関連コマンド</target>
        </trans-unit>
        <trans-unit id="6fd9fce94e1798f55b5904f5f4b1afc9b73462f0" translate="yes" xml:space="preserve">
          <source>Remove one or more elements from an array at a given index. Returns the modified array. (Note: &lt;code&gt;deleteAt&lt;/code&gt; operates on arrays, not documents; to delete documents, see the &lt;a href=&quot;../delete/index&quot;&gt;delete&lt;/a&gt; command.)</source>
          <target state="translated">指定されたインデックスの配列から1つ以上の要素を削除します。変更された配列を返します。（注： &lt;code&gt;deleteAt&lt;/code&gt; はドキュメントではなく配列で動作します。ドキュメントを削除するには、&lt;a href=&quot;../delete/index&quot;&gt;delete&lt;/a&gt;コマンドを参照してください。）</target>
        </trans-unit>
        <trans-unit id="28b83b24b89e420600d6b0c7028a8d2290ddf0d9" translate="yes" xml:space="preserve">
          <source>Remove one or more elements from an array at a given index. Returns the modified array. (Note: &lt;code&gt;deleteAt&lt;/code&gt; operates on arrays, not documents; to delete documents, see the &lt;a href=&quot;delete/index&quot;&gt;delete&lt;/a&gt; command.)</source>
          <target state="translated">指定されたインデックスの配列から1つ以上の要素を削除します。変更された配列を返します。（注： &lt;code&gt;deleteAt&lt;/code&gt; はドキュメントではなく配列で動作します。ドキュメントを削除するには、&lt;a href=&quot;delete/index&quot;&gt;delete&lt;/a&gt;コマンドを参照してください。）</target>
        </trans-unit>
        <trans-unit id="a87b37bc5f692c148c02fe605a7458c77b15a50d" translate="yes" xml:space="preserve">
          <source>Remove the elements of one array from another and return them as a set (an array with distinct values).</source>
          <target state="translated">ある配列の要素を別の配列から削除して,それらを集合として返します(値が異なる配列).</target>
        </trans-unit>
        <trans-unit id="afa632a95dc9c80b866a354f23735d7bcd1157a2" translate="yes" xml:space="preserve">
          <source>Remove the elements of one array from another array.</source>
          <target state="translated">ある配列の要素を別の配列から削除します.</target>
        </trans-unit>
        <trans-unit id="0697a27ec337b72d0e4d72523605d451a59444a0" translate="yes" xml:space="preserve">
          <source>Removes duplicates from elements in a sequence.</source>
          <target state="translated">シーケンス内の要素から重複を削除します。</target>
        </trans-unit>
        <trans-unit id="79a53851e290035c55b906df35b29aaa6f920cf9" translate="yes" xml:space="preserve">
          <source>Removing a field from a document</source>
          <target state="translated">ドキュメントからフィールドを削除する</target>
        </trans-unit>
        <trans-unit id="67e44982c2b6ecb129404da6bb7b5c7d570feae7" translate="yes" xml:space="preserve">
          <source>Removing duplicate documents</source>
          <target state="translated">重複書類の削除</target>
        </trans-unit>
        <trans-unit id="fd82550f7bdd5147fa9b38ad056203473cb75426" translate="yes" xml:space="preserve">
          <source>Removing the conflicting fields</source>
          <target state="translated">競合するフィールドの削除</target>
        </trans-unit>
        <trans-unit id="b5140bff21a36c4d10e5e19f157b727b262facdd" translate="yes" xml:space="preserve">
          <source>Rename an existing secondary index on a table. If the optional argument &lt;code&gt;overwrite&lt;/code&gt; is specified as &lt;code&gt;true&lt;/code&gt;, a previously existing index with the new name will be deleted and the index will be renamed. If &lt;code&gt;overwrite&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; (the default) an error will be raised if the new index name already exists.</source>
          <target state="translated">テーブルの既存のセカンダリインデックスの名前を変更します。オプションの引数 &lt;code&gt;overwrite&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; として指定されている場合、新しい名前の既存のインデックスが削除され、インデックスの名前が変更されます。場合は &lt;code&gt;overwrite&lt;/code&gt; ある &lt;code&gt;false&lt;/code&gt; （デフォルト）新しいインデックス名が既に存在する場合は、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="3b77fd7d07db52ea2672fd8ede11ae8823105710" translate="yes" xml:space="preserve">
          <source>Rename the new index to the old index&amp;rsquo;s name with &lt;a href=&quot;https://rethinkdb.com/api/python/index_rename&quot;&gt;index_rename&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://rethinkdb.com/api/python/index_rename&quot;&gt;index_rename&lt;/a&gt;を使用して、新しいインデックスの名前を古いインデックスの名前に変更します。</target>
        </trans-unit>
        <trans-unit id="40c174bdf445078528f8a2f96d1df5c325ca2288" translate="yes" xml:space="preserve">
          <source>Renaming a database</source>
          <target state="translated">データベースの名前を変更する</target>
        </trans-unit>
        <trans-unit id="284f910642e6a0defb4586578a3c2a7bd1161d13" translate="yes" xml:space="preserve">
          <source>Renaming a field when retrieving documents</source>
          <target state="translated">ドキュメントを検索するときにフィールドの名前を変更する</target>
        </trans-unit>
        <trans-unit id="c85b059a75da0fd1dc38ae1c0c348e9320390608" translate="yes" xml:space="preserve">
          <source>Renaming the fields</source>
          <target state="translated">フィールドの名前を変更する</target>
        </trans-unit>
        <trans-unit id="6aca56afb789aecc38fe4230dec10a4632e60865" translate="yes" xml:space="preserve">
          <source>Replace an object in a field instead of merging it with an existing object in a &lt;code&gt;merge&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; operation. Using &lt;code&gt;literal&lt;/code&gt; with no arguments in a &lt;code&gt;merge&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; operation will remove the corresponding field.</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; または &lt;code&gt;update&lt;/code&gt; 操作で、フィールド内のオブジェクトを既存のオブジェクトとマージする代わりに、オブジェクトを置き換えます。 &lt;code&gt;merge&lt;/code&gt; または &lt;code&gt;update&lt;/code&gt; 操作で引数なしの &lt;code&gt;literal&lt;/code&gt; を使用すると、対応するフィールドが削除されます。</target>
        </trans-unit>
        <trans-unit id="9ab64c46bc6706994c25c2b0a6ee60d324ab8b2d" translate="yes" xml:space="preserve">
          <source>Replace documents in a table. Accepts a JSON document or a ReQL expression, and replaces the original document with the new one. The new document must have the same primary key as the original document.</source>
          <target state="translated">テーブル内のドキュメントを置換します。JSON ドキュメントまたは ReQL 式を受け取り、元のドキュメントを新しいものに置き換えます。新しいドキュメントは、元のドキュメントと同じ主キーを持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="b6a9ea19f10bfe83981d4540dee88a3df008ec57" translate="yes" xml:space="preserve">
          <source>Replace returns an object that contains the following attributes:</source>
          <target state="translated">Replaceは、以下の属性を含むオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="2c5d061d62323778048566a495b1df0b38ea2db7" translate="yes" xml:space="preserve">
          <source>Replaces cursors with streams.</source>
          <target state="translated">カーソルをストリームに置き換えます。</target>
        </trans-unit>
        <trans-unit id="722a8bb542ea393f48ca936e084109b805daa87a" translate="yes" xml:space="preserve">
          <source>Replication</source>
          <target state="translated">Replication</target>
        </trans-unit>
        <trans-unit id="8c34185af915f1e0949bfddb344b5dea859540d4" translate="yes" xml:space="preserve">
          <source>Repubsub implements a simple abstraction on top of RethinkDB to enable publish-subscribe. It uses ReQL as the filtering mechanism, so the full power of the language is at your disposal. This gives a lot more flexibility than traditional message queues.</source>
          <target state="translated">Repubsubは、RethinkDBの上にシンプルな抽象化を実装し、パブリッシュ・サブスクライブを可能にします。フィルタリング機構として ReQL を使用しているので、言語のフルパワーを自由に使うことができます。これにより、従来のメッセージキューよりも多くの柔軟性が得られます。</target>
        </trans-unit>
        <trans-unit id="552a6a287997255111938f1213d6239a6eb625b9" translate="yes" xml:space="preserve">
          <source>Request Options</source>
          <target state="translated">リクエストオプション</target>
        </trans-unit>
        <trans-unit id="cf028cb289e92d72ecac0c14797660b76e05fb6f" translate="yes" xml:space="preserve">
          <source>Resolving field name conflicts</source>
          <target state="translated">フィールド名の競合の解決</target>
        </trans-unit>
        <trans-unit id="5488d03c527f32b4acc287af95407883ab8f73b2" translate="yes" xml:space="preserve">
          <source>Response notes</source>
          <target state="translated">レスポンスノート</target>
        </trans-unit>
        <trans-unit id="edbff191035089d6d00fc87982482ed99855f37e" translate="yes" xml:space="preserve">
          <source>Response types</source>
          <target state="translated">レスポンスタイプ</target>
        </trans-unit>
        <trans-unit id="ab860e83a8bba4577ed1f5d169b6ff9b4a71a996" translate="yes" xml:space="preserve">
          <source>Responses from the server take the following form:</source>
          <target state="translated">サーバからの応答は以下の形式をとります。</target>
        </trans-unit>
        <trans-unit id="3cbe6d6b9a8d1596bb5bca12e14d81c9e108a1a3" translate="yes" xml:space="preserve">
          <source>Restore</source>
          <target state="translated">Restore</target>
        </trans-unit>
        <trans-unit id="fa8c448a3304c7e3bba81325d21434fc4e1ab989" translate="yes" xml:space="preserve">
          <source>Restore &lt;code&gt;backup.tar.gz&lt;/code&gt; to the cluster running on &lt;code&gt;fortress&lt;/code&gt; at port &lt;code&gt;39500&lt;/code&gt;.</source>
          <target state="translated">ポート &lt;code&gt;39500&lt;/code&gt; の &lt;code&gt;fortress&lt;/code&gt; で実行されているクラスターに &lt;code&gt;backup.tar.gz&lt;/code&gt; を復元します。</target>
        </trans-unit>
        <trans-unit id="1c5aff5b034a17ad5b0aa80d1b5867fcaeafd472" translate="yes" xml:space="preserve">
          <source>Restore to the default cluster (&lt;code&gt;localhost:28015&lt;/code&gt;).</source>
          <target state="translated">デフォルトのクラスター（ &lt;code&gt;localhost:28015&lt;/code&gt; ）に復元します。</target>
        </trans-unit>
        <trans-unit id="cfb3d23e010f68e0af656c3a161f08787d49d8df" translate="yes" xml:space="preserve">
          <source>Restore to the default cluster, only importing the table &lt;code&gt;users&lt;/code&gt; to the database &lt;code&gt;league&lt;/code&gt; from the archive &lt;code&gt;backup.tar.gz&lt;/code&gt;. Read the &lt;code&gt;admin&lt;/code&gt; user password from the file &lt;code&gt;pw.txt&lt;/code&gt;. (This should be a plain text file with the password on the first and only line.)</source>
          <target state="translated">アーカイブ &lt;code&gt;backup.tar.gz&lt;/code&gt; からデータベース &lt;code&gt;league&lt;/code&gt; テーブル &lt;code&gt;users&lt;/code&gt; のみをインポートして、デフォルトのクラスターに復元します。ファイル &lt;code&gt;pw.txt&lt;/code&gt; から &lt;code&gt;admin&lt;/code&gt; ユーザーのパスワードを読み取ります。（これは、最初の唯一の行にパスワードが記載されたプレーンテキストファイルである必要があります。）</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="89ddb5cfb70d8bad46dda602a6ccbd88515a58d8" translate="yes" xml:space="preserve">
          <source>RethinkDB</source>
          <target state="translated">RethinkDB</target>
        </trans-unit>
        <trans-unit id="735933ae21af969b090b07b609e7695fc978b7ac" translate="yes" xml:space="preserve">
          <source>RethinkDB 2.1.5 performance &amp;amp; scaling report</source>
          <target state="translated">RethinkDB 2.1.5パフォーマンス＆スケーリングレポート</target>
        </trans-unit>
        <trans-unit id="cb467484ded44adadf6f26ec92b1553d399b7b13" translate="yes" xml:space="preserve">
          <source>RethinkDB Documentation</source>
          <target state="translated">RethinkDB ドキュメント</target>
        </trans-unit>
        <trans-unit id="e4d8c0ff3051c40b7a7d2280bdd1fcf8d66cf738" translate="yes" xml:space="preserve">
          <source>RethinkDB achieves a throughput of 14.6K QPS with two servers, and scales near-linearly as servers are added to the cluster.</source>
          <target state="translated">RethinkDBは、2台のサーバーで14.6K QPSのスループットを実現し、サーバーがクラスタに追加されるとほぼ直線的にスケールします。</target>
        </trans-unit>
        <trans-unit id="e345c3b07e0fd9d1adeaa8ca81dd01baad355475" translate="yes" xml:space="preserve">
          <source>RethinkDB allows you to shard and replicate your cluster on a per-table basis. Settings can be controlled easily from the web administration console. In addition, ReQL commands for table configuration allow both scripting capability and more fine-grained control over replication, distributing replicas for individual tables across user-defined groups of servers using server tags.</source>
          <target state="translated">RethinkDBを使用すると、テーブル単位でクラスタをシャードしてレプリケートすることができます。設定はWeb管理コンソールから簡単に制御できます。さらに、テーブル設定用のReQLコマンドでは、スクリプト機能とレプリケーションのより細かい制御が可能で、サーバータグを使用してユーザー定義のサーバーグループに個々のテーブルのレプリカを分散させることができます。</target>
        </trans-unit>
        <trans-unit id="eda9071dab24f5356340e451144a72dcc92d3fce" translate="yes" xml:space="preserve">
          <source>RethinkDB and Rails</source>
          <target state="translated">RethinkDBとRails</target>
        </trans-unit>
        <trans-unit id="26e492bb4ea400bd0d23919baddf67941c58a444" translate="yes" xml:space="preserve">
          <source>RethinkDB automatically rebalances tables when the number of shards are increased, and as long as your documents have evenly distributed primary keys&amp;mdash;such as the default UUIDs&amp;mdash;it is rarely necessary to call &lt;code&gt;rebalance&lt;/code&gt; manually. Cases where &lt;code&gt;rebalance&lt;/code&gt; may need to be called include:</source>
          <target state="translated">シャードの数が増えると、RethinkDBはテーブルを自動的に再調整します。デフォルトのUUIDなどのドキュメントに主キーが均等に分散されている限り、手動で &lt;code&gt;rebalance&lt;/code&gt; を呼び出す必要はほとんどありません。ケース &lt;code&gt;rebalance&lt;/code&gt; 含めると呼ばれることが必要な場合があります。</target>
        </trans-unit>
        <trans-unit id="ad70484f409d6361985bb8c8f93c7743544624d3" translate="yes" xml:space="preserve">
          <source>RethinkDB binary installed by the official package in &lt;code&gt;/usr/local/bin/rethinkdb&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;/usr/local/bin/rethinkdb&lt;/code&gt; の公式パッケージによってインストールされたRethinkDBバイナリ</target>
        </trans-unit>
        <trans-unit id="b9fdbdd31616d7b419cfafad99fc5ceb4c45dd50" translate="yes" xml:space="preserve">
          <source>RethinkDB cache size set to 64,000 MB per server, otherwise default parameters</source>
          <target state="translated">RethinkDBのキャッシュサイズをサーバごとに64,000MBに設定し、それ以外の場合はデフォルトのパラメータを設定します。</target>
        </trans-unit>
        <trans-unit id="6492843a1285914ee9da37e99939a00ce233450b" translate="yes" xml:space="preserve">
          <source>RethinkDB can be easily deployed on &lt;a href=&quot;http://compose.io/&quot;&gt;Compose&lt;/a&gt; and &lt;a href=&quot;http://aws.amazon.com/&quot;&gt;Amazon Web Services&lt;/a&gt;.</source>
          <target state="translated">RethinkDBは、&lt;a href=&quot;http://compose.io/&quot;&gt;Compose&lt;/a&gt;および&lt;a href=&quot;http://aws.amazon.com/&quot;&gt;Amazon Web Servicesに&lt;/a&gt;簡単にデプロイできます。</target>
        </trans-unit>
        <trans-unit id="779613e061fcbb3ecdf1b3f674a77401d73451f7" translate="yes" xml:space="preserve">
          <source>RethinkDB can handle databases much larger than the amount of main memory available on a server. However, some internal metadata is always kept in memory to guarantee fast access times. Every table has an overhead of 8 MB per server.</source>
          <target state="translated">RethinkDBは、サーバー上で利用可能なメインメモリの量よりもはるかに大きなデータベースを扱うことができます。しかし、高速なアクセス時間を保証するために、一部の内部メタデータは常にメモリに保持されています。すべてのテーブルは、サーバーあたり8MBのオーバーヘッドがあります。</target>
        </trans-unit>
        <trans-unit id="a7a4715c972f6634315cdf77dceadee9d8dd2408" translate="yes" xml:space="preserve">
          <source>RethinkDB changefeeds</source>
          <target state="translated">RethinkDBのチェンジフィード</target>
        </trans-unit>
        <trans-unit id="1982a12bd3c3cd7086173906e98b7aa6c17ed25d" translate="yes" xml:space="preserve">
          <source>RethinkDB client drivers are responsible for serializing queries, sending them to the server using the ReQL wire protocol, and receiving responses from the server and returning them to the calling application. This process takes the following steps:</source>
          <target state="translated">RethinkDBクライアントドライバは、クエリをシリアライズし、ReQLワイヤプロトコルを使用してサーバに送信し、サーバからの応答を受信して呼び出し元のアプリケーションに返す役割を担っています。このプロセスは以下の手順で行われます。</target>
        </trans-unit>
        <trans-unit id="29742e53bf514545423e131a5089ae63314110fd" translate="yes" xml:space="preserve">
          <source>RethinkDB clustering with CoreOS, etcd2 and Docker, by &lt;a href=&quot;https://github.com/pires&quot;&gt;@pires&lt;/a&gt;.</source>
          <target state="translated">CoreOS、etcd2、Dockerを使用したRethinkDBクラスタリング、@ &lt;a href=&quot;https://github.com/pires&quot;&gt;piresによる&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="546b0d2304c21245d3bc9748794a02297ae69be4" translate="yes" xml:space="preserve">
          <source>RethinkDB command line options</source>
          <target state="translated">RethinkDBのコマンドラインオプション</target>
        </trans-unit>
        <trans-unit id="757b43f479974355f39e37a9afd966d958b550a0" translate="yes" xml:space="preserve">
          <source>RethinkDB controls access to clusters through a system based around &lt;strong&gt;users, permissions,&lt;/strong&gt; and &lt;strong&gt;scopes.&lt;/strong&gt; Together, these allow you to specify fine grained control for reading, writing and administrative access down to a per-table level.</source>
          <target state="translated">RethinkDBは周りに基づくシステムを通じてクラスタへのアクセスを制御し&lt;strong&gt;、ユーザー、権限、&lt;/strong&gt;および&lt;strong&gt;スコープ。&lt;/strong&gt;これらを組み合わせることで、読み取り、書き込み、および管理アクセスをテーブルごとのレベルまで細かく制御できます。</target>
        </trans-unit>
        <trans-unit id="b5823fa08eb48445af67a4037ecc0701a77215e5" translate="yes" xml:space="preserve">
          <source>RethinkDB data directory will be &lt;code&gt;/Library/RethinkDB/data&lt;/code&gt;</source>
          <target state="translated">RethinkDBデータディレクトリは &lt;code&gt;/Library/RethinkDB/data&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="612315f0d5f8087ec3f0b4e7fce019c06049b1a8" translate="yes" xml:space="preserve">
          <source>RethinkDB demonstrates extremely high scalability in this configuration, reaching throughputs of well over a million queries per second. The slightly sub-linear scalability when going from 12 to 16 database servers is caused by the client servers&amp;rsquo; CPUs getting saturated at these throughputs.</source>
          <target state="translated">RethinkDBは、この構成で非常に高いスケーラビリティを示し、毎秒100万クエリをはるかに超えるスループットに達しています。12から16のデータベースサーバーに移行する際のやや線形に近いスケーラビリティは、これらのスループットでクライアントサーバーのCPUが飽和するために発生します。</target>
        </trans-unit>
        <trans-unit id="8672db1bf1765198165013defafd20d8db24f975" translate="yes" xml:space="preserve">
          <source>RethinkDB does not currently have an optimizer. As an example, the following query will not automatically use an index:</source>
          <target state="translated">RethinkDBには現在オプティマイザがありません。例として、以下のクエリは自動的にインデックスを使用しません。</target>
        </trans-unit>
        <trans-unit id="672811adc0003c264d287d9d90dddfe5392790ce" translate="yes" xml:space="preserve">
          <source>RethinkDB does not have fully automatic failover (yet), but if a server in a cluster crashes it can be manually removed from the cluster. In most cases, RethinkDB will recover from such a situation automatically. For information on this process, read &lt;a href=&quot;../failover/index&quot;&gt;Failover&lt;/a&gt;.</source>
          <target state="translated">RethinkDBには（まだ）完全な自動フェイルオーバーはありませんが、クラスター内のサーバーがクラッシュした場合、手動でクラスターから削除できます。ほとんどの場合、RethinkDBはこのような状況から自動的に回復します。このプロセスの詳細については、&lt;a href=&quot;../failover/index&quot;&gt;フェイルオーバーを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="29225a505de5e9d97ccc052ef35e3e9e191310f6" translate="yes" xml:space="preserve">
          <source>RethinkDB does not support unique secondary indexes even for non-sharded tables.</source>
          <target state="translated">RethinkDBでは、シャードされていないテーブルであっても、一意のセカンダリインデックスはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="3a1e6552e69e48ce4c7f868763ae1040ab304a06" translate="yes" xml:space="preserve">
          <source>RethinkDB does take exclusive block-level locks in case multiple writes are performed on documents that are close together in the B-Tree. If the contested block is cached in memory, these locks are extremely short-lived. If the blocks need to be loaded from disk, these locks take longer. Typically this does not present performance problems because the top levels of the B-Tree are all cached along with the frequently used blocks, so in most cases writes can be performed essentially lock-free.</source>
          <target state="translated">RethinkDBは、B-Tree内で近接したドキュメントに対して複数の書き込みが行われた場合に、排他的なブロックレベルのロックを取ります。競合するブロックがメモリにキャッシュされている場合、これらのロックは非常に短命です。ブロックをディスクからロードする必要がある場合、これらのロックには時間がかかります。一般的に、B-Tree のトップレベルはすべて頻繁に使用されるブロックと一緒にキャッシュされているので、ほとんどの場合、これはパフォーマンス上の問題にはなりません。</target>
        </trans-unit>
        <trans-unit id="40f0f98da3c17608b70462f0c36e09dd4a185e21" translate="yes" xml:space="preserve">
          <source>RethinkDB has access to the query structure, which allows for optimization techniques similar to those available in SQL. This feature will be added to RethinkDB in the future.</source>
          <target state="translated">RethinkDBにはクエリ構造へのアクセス権があり、SQLで利用可能なものと同様の最適化技術を利用することができます。この機能は将来的にRethinkDBに追加される予定です。</target>
        </trans-unit>
        <trans-unit id="cf29f8f9f21bf8fba6ea63ced9d6fae553e0b5eb" translate="yes" xml:space="preserve">
          <source>RethinkDB has failed to write to its log file (or to &lt;code&gt;stdout/stderr&lt;/code&gt;). The &lt;code&gt;message&lt;/code&gt; string will be the error that RethinkDB received from the operating system on the failed write; &lt;code&gt;servers&lt;/code&gt; will be a list of servers affected.</source>
          <target state="translated">RethinkDBがログファイル（または &lt;code&gt;stdout/stderr&lt;/code&gt; ）への書き込みに失敗しました。 &lt;code&gt;message&lt;/code&gt; 文字列はRethinkDBが失敗した書き込みのオペレーティングシステムから受信したエラーであろう。 &lt;code&gt;servers&lt;/code&gt; は影響を受けるサーバーのリストになります。</target>
        </trans-unit>
        <trans-unit id="2bc2af13435e602b512f4af7f70dee3bcd170db5" translate="yes" xml:space="preserve">
          <source>RethinkDB has native support for millisecond-precision times with time zones. Some highlights:</source>
          <target state="translated">RethinkDBは、ミリ秒精度の時間をタイムゾーンでネイティブにサポートしています。いくつかのハイライト。</target>
        </trans-unit>
        <trans-unit id="0fae139b6eb1367767e96d5c430169b70f3ebb30" translate="yes" xml:space="preserve">
          <source>RethinkDB has powerful Hadoop-style map-reduce tools, that integrate cleanly into the query language. Learn how they work, and play with a few examples.</source>
          <target state="translated">RethinkDBには強力なHadoopスタイルのマップ削減ツールがあり、クエリ言語にきれいに統合されている。これらのツールがどのように動作するかを学び、いくつかの例を使って遊んでみましょう。</target>
        </trans-unit>
        <trans-unit id="7bba8fb71c9832349f00a9f837897d44f12388f1" translate="yes" xml:space="preserve">
          <source>RethinkDB has shortcuts for five common aggregation operations: &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;avg&lt;/code&gt;, &lt;code&gt;min&lt;/code&gt;, and &lt;code&gt;max&lt;/code&gt;. In practice, you&amp;rsquo;ll often be able to use these with &lt;code&gt;group&lt;/code&gt; these rather than writing your own &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;reduce&lt;/code&gt; functions.</source>
          <target state="translated">RethinkDBには、5つの一般的な集計操作（ &lt;code&gt;count&lt;/code&gt; 、 &lt;code&gt;sum&lt;/code&gt; 、 &lt;code&gt;avg&lt;/code&gt; 、 &lt;code&gt;min&lt;/code&gt; 、 &lt;code&gt;max&lt;/code&gt; )のショートカットがあります。実際には、独自の &lt;code&gt;map&lt;/code&gt; し &lt;code&gt;reduce&lt;/code&gt; 関数を削減するのではなく、これらを &lt;code&gt;group&lt;/code&gt; 化して使用できることがよくあります。</target>
        </trans-unit>
        <trans-unit id="a07a2f1e204ccef9ce95abeb8228ca595f3024c2" translate="yes" xml:space="preserve">
          <source>RethinkDB has three classes of errors: driver (&lt;code&gt;ReqlDriverError&lt;/code&gt;), query compilation (&lt;code&gt;ReqlCompileError&lt;/code&gt;) and runtime (errors subclassed from &lt;code&gt;ReqlRuntimeError&lt;/code&gt;).</source>
          <target state="translated">RethinkDBには、ドライバー（ &lt;code&gt;ReqlDriverError&lt;/code&gt; ）、クエリコンパイル（ &lt;code&gt;ReqlCompileError&lt;/code&gt; ）、およびランタイム（ &lt;code&gt;ReqlRuntimeError&lt;/code&gt; からサブクラス化されたエラー）の3つのクラスのエラーがあります。</target>
        </trans-unit>
        <trans-unit id="7024546f8577c97b82e4aeda6e9841941adc8703" translate="yes" xml:space="preserve">
          <source>RethinkDB in two minutes</source>
          <target state="translated">2分でRethinkDB</target>
        </trans-unit>
        <trans-unit id="4eeea1cb9e84ccba67aa59483a4f622f2c06144f" translate="yes" xml:space="preserve">
          <source>RethinkDB inverts the traditional database architecture by exposing an exciting new access model &amp;ndash; instead of polling for changes, the developer can tell RethinkDB to continuously push updated query results to applications in realtime.</source>
          <target state="translated">RethinkDBは、エキサイティングな新しいアクセスモデルを公開することにより、従来のデータベースアーキテクチャを逆転させます。開発者は、変更をポーリングする代わりに、更新されたクエリ結果をリアルタイムで継続的にアプリケーションにプッシュするようにRethinkDBに指示できます。</target>
        </trans-unit>
        <trans-unit id="f15b38cf885439fce391405265382c8fb3a5eddc" translate="yes" xml:space="preserve">
          <source>RethinkDB is running out of memory</source>
          <target state="translated">RethinkDBのメモリが不足している</target>
        </trans-unit>
        <trans-unit id="025c104640a27fcf19c9484f3ab6cf659bfa56be" translate="yes" xml:space="preserve">
          <source>RethinkDB keeps an internal directory tracking the current state of the cluster: how many servers are accessible, what data is currently stored on each server, etc. The data structures that keep track of the directory are automatically updated when the cluster changes. For example, if a server dies due to power failure, the directory is updated to represent this change.</source>
          <target state="translated">RethinkDBは、クラスタの現在の状態を追跡する内部ディレクトリを保持します。ディレクトリを追跡するデータ構造は、クラスタが変更されると自動的に更新されます。例えば、サーバが停電で停止した場合、ディレクトリはこの変化を表すように更新されます。</target>
        </trans-unit>
        <trans-unit id="cf9d083edb8c21c54d52f3036376df035b56b907" translate="yes" xml:space="preserve">
          <source>RethinkDB log will be &lt;code&gt;/var/log/rethinkdb.log&lt;/code&gt;</source>
          <target state="translated">RethinkDBログは &lt;code&gt;/var/log/rethinkdb.log&lt;/code&gt; になります</target>
        </trans-unit>
        <trans-unit id="12e7e6962d9b0bc38ee3bb81801ab1841743fac0" translate="yes" xml:space="preserve">
          <source>RethinkDB maintains availability if the user increases or decreases the number of replicas in the cluster. In most cases, the replication process should not have a strong performance impact on the real-time system.</source>
          <target state="translated">RethinkDBは、ユーザーがクラスタ内のレプリカの数を増減した場合、可用性を維持します。ほとんどの場合、レプリケーション処理はリアルタイムシステムに強いパフォーマンスの影響を与えないはずです。</target>
        </trans-unit>
        <trans-unit id="623536e8efae22fe8dbe6bff869831b8cb6a7ba8" translate="yes" xml:space="preserve">
          <source>RethinkDB makes building and scaling realtime apps dramatically easier. Get started by installing the server, and jump into our getting started guide to start building your first app in minutes.</source>
          <target state="translated">RethinkDBは、リアルタイム・アプリケーションの構築とスケーリングを劇的に容易にします。サーバーをインストールして、最初のアプリの構築を数分で始めるためのスタートアップガイドに飛び込んでください。</target>
        </trans-unit>
        <trans-unit id="2e85a94c44575620e7b9601eb22bb2499c37e1fb" translate="yes" xml:space="preserve">
          <source>RethinkDB may or may not maintain availability if the user modifies the number of shards. In many cases availability will be maintained, but currently it cannot be guaranteed. We&amp;rsquo;re exploring different solutions to remove this limitation.</source>
          <target state="translated">ユーザーがシャードの数を変更した場合、RethinkDBは可用性を維持する場合と維持しない場合があります。多くの場合、可用性は維持されますが、現時点では保証できません。この制限を取り除くために、さまざまなソリューションを模索しています。</target>
        </trans-unit>
        <trans-unit id="0d55b0820382b90b873c36c3282a6665c40558fe" translate="yes" xml:space="preserve">
          <source>RethinkDB only allows conversion of GeoJSON objects which have ReQL equivalents: Point, LineString, and Polygon. MultiPoint, MultiLineString, and MultiPolygon are not supported. (You could, however, store multiple points, lines and polygons in an array and use a geospatial multi index with them.)</source>
          <target state="translated">RethinkDBでは、ReQLに相当するものを持つGeoJSONオブジェクトの変換のみが可能です。Point、LineString、Polygon。MultiPoint、MultiLineString、および MultiPolygon はサポートされていません。(ただし、複数の点、線、および多角形を配列に格納し、それらを使用して地理空間マルチインデックスを使用することは可能です)。</target>
        </trans-unit>
        <trans-unit id="05eba76c1e3bf668992e43cbb82de3b220dab3cc" translate="yes" xml:space="preserve">
          <source>RethinkDB only allows conversion of GeoJSON objects which have ReQL equivalents: Point, LineString, and Polygon; MultiPoint, MultiLineString, and MultiPolygon are not supported. (You could, however, store multiple points, lines and polygons in an array and use a geospatial multi index with them.)</source>
          <target state="translated">RethinkDBでは、ReQLに相当するものを持つGeoJSONオブジェクトの変換のみが可能です。Point、LineString、および Polygon。MultiPoint、MultiLineString、および MultiPolygon はサポートされていません(ただし、複数の点、線、およびポリゴンを配列に格納し、それらを使用して地理空間マルチインデックスを使用することは可能です)。MultiPoint、MultiLineString、MultiPolygonはサポートされていません(ただし、複数のポイント、ライン、ポリゴンを配列に格納し、それらを使って地理空間マルチインデックスを使用することは可能です)。</target>
        </trans-unit>
        <trans-unit id="ae8f4e6bd74894f0a648d341946431e0292b55f6" translate="yes" xml:space="preserve">
          <source>RethinkDB operates at peak performance when the batch size is around two hundred documents.</source>
          <target state="translated">RethinkDBは、バッチサイズが200文書程度のときにピークパフォーマンスで動作します。</target>
        </trans-unit>
        <trans-unit id="08ab91ee1258986387b10e654d9e4c5d42985b98" translate="yes" xml:space="preserve">
          <source>RethinkDB operations are never atomic across multiple keys. For this reason, RethinkDB cannot be considered an ACID database.</source>
          <target state="translated">RethinkDBの操作は、複数のキー間では決してアトミックではありません。このため、RethinkDBはACIDデータベースとは考えられません。</target>
        </trans-unit>
        <trans-unit id="8741a43490c434407d3eb5b4660dc5f8849570f6" translate="yes" xml:space="preserve">
          <source>RethinkDB organizes data into blocks. Blocks in RethinkDB are sized in steps of 512 bytes up to a maximum of 4 KB. While the content of a block itself can be cleared from main memory to free space, metadata of approximately 10&amp;ndash;26 bytes per block is always kept in memory. Thus, this memory overhead is directly proportional to the number of blocks that a given data set requires. (This is in addition to the 8 MB overhead mentioned above.)</source>
          <target state="translated">RethinkDBはデータをブロックに編成します。RethinkDBのブロックのサイズは、512バイト単位で最大4 KBです。ブロック自体のコンテンツはメインメモリから空き領域にクリアできますが、ブロックごとに約10〜26バイトのメタデータは常にメモリに保持されます。したがって、このメモリオーバーヘッドは、特定のデータセットに必要なブロック数に正比例します。（これは、上記の8 MBのオーバーヘッドに追加されるものです。）</target>
        </trans-unit>
        <trans-unit id="b9269f54553fd9442463297c700ee2b8e73e7de2" translate="yes" xml:space="preserve">
          <source>RethinkDB packages automatically install an init script at &lt;code&gt;/etc/init.d/rethinkdb&lt;/code&gt; and add default run-level entries. For RethinkDB to automatically run on system startup, you&amp;rsquo;ll need to add a config file to &lt;code&gt;/etc/rethinkdb/instances.d/&lt;/code&gt;.</source>
          <target state="translated">RethinkDBパッケージは自動的にinitスクリプトをインストール &lt;code&gt;/etc/init.d/rethinkdb&lt;/code&gt; 、デフォルトランレベルのエントリを追加します。システムの起動時にRethinkDBを自動的に実行するには、設定ファイルを &lt;code&gt;/etc/rethinkdb/instances.d/&lt;/code&gt; に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="c7f008700c05c1865d12295437922484ecae3c18" translate="yes" xml:space="preserve">
          <source>RethinkDB provides a web interface which lets you manage your entire server cluster, from controlling sharding and replication to running ReQL queries (in JavaScript), with editing and history support. In addition, you can perform administration tasks using scriptable ReQL commands.</source>
          <target state="translated">RethinkDBは、シャーディングやレプリケーションの制御からReQLクエリ(JavaScript)の実行、編集、履歴のサポートまで、サーバクラスタ全体を管理できるWebインタフェースを提供します。さらに、スクリプト可能なReQLコマンドを使用して管理タスクを実行することができます。</target>
        </trans-unit>
        <trans-unit id="0f7f159d2a79c214cc2f935797ab4190a4a3c1ee" translate="yes" xml:space="preserve">
          <source>RethinkDB provides an &lt;a href=&quot;../../api/javascript/http/index&quot;&gt;r.http&lt;/a&gt; command for accessing external APIs directly from the database. Since many APIs accept and return JSON, RethinkDB is a convenient platform for manipulating and analyzing API data, both interactively and in running applications.</source>
          <target state="translated">RethinkDBは、データベースから直接外部APIにアクセスするための&lt;a href=&quot;../../api/javascript/http/index&quot;&gt;r.http&lt;/a&gt;コマンドを提供します。多くのAPIがJSONを受け入れて返すため、RethinkDBは、対話的にも実行中のアプリケーションにおいても、APIデータを操作および分析するための便利なプラットフォームです。</target>
        </trans-unit>
        <trans-unit id="7f522c8137b2011dbb2715593ecd36021f7cbfe7" translate="yes" xml:space="preserve">
          <source>RethinkDB server</source>
          <target state="translated">RethinkDBサーバー</target>
        </trans-unit>
        <trans-unit id="b74edfe769c267c7428c9983eb180ae400916f47" translate="yes" xml:space="preserve">
          <source>RethinkDB ships with simple tools to perform a hot backup of a running cluster. See the &lt;a href=&quot;../backup/index&quot;&gt;backup instructions&lt;/a&gt; for more details.</source>
          <target state="translated">RethinkDBには、実行中のクラスターのホットバックアップを実行するためのシンプルなツールが付属しています。詳細については、&lt;a href=&quot;../backup/index&quot;&gt;バックアップ手順&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="84dcf0975c77e90cf88fc77f75f9af0d1107ebf5" translate="yes" xml:space="preserve">
          <source>RethinkDB supports &lt;a href=&quot;../../changefeeds/javascript/index&quot;&gt;changefeeds&lt;/a&gt;, which allow you to subscribe to changes on a table. The database pushes these changes to you as they happen.</source>
          <target state="translated">RethinkDBはサポート&lt;a href=&quot;../../changefeeds/javascript/index&quot;&gt;changefeeds&lt;/a&gt;あなたがテーブル上の変更をサブスクライブすることができ、。これらの変更が発生すると、データベースによってユーザーにプッシュされます。</target>
        </trans-unit>
        <trans-unit id="f539d29ec109400beb33e87944c1bc419991ee37" translate="yes" xml:space="preserve">
          <source>RethinkDB supports a native binary object type, letting you use ReQL to store binary objects directly in the database. The ReQL driver will transparently translate between the ReQL type and Node.js &lt;a href=&quot;http://nodejs.org/api/buffer.html&quot;&gt;Buffers&lt;/a&gt;.</source>
          <target state="translated">RethinkDBはネイティブのバイナリオブジェクトタイプをサポートしているため、ReQLを使用してバイナリオブジェクトをデータベースに直接保存できます。ReQLドライバーは、ReQLタイプとNode.js &lt;a href=&quot;http://nodejs.org/api/buffer.html&quot;&gt;バッファー&lt;/a&gt;間を透過的に変換します。</target>
        </trans-unit>
        <trans-unit id="b79de0235d3d7e49d6270396cae554871735eba3" translate="yes" xml:space="preserve">
          <source>RethinkDB supports automatic failover when more than half of the voting replicas for each shard of a table are still available (see the &lt;a href=&quot;../../../docs/failover/index&quot;&gt;Failover&lt;/a&gt; documentation for more details). However, if half or more of the voting replicas for a shard are lost, failover will not happen automatically, leaving two options:</source>
          <target state="translated">RethinkDBは、テーブルの各シャードの投票レプリカの半分以上がまだ利用可能な場合に、自動フェイルオーバーをサポートします（詳細については、&lt;a href=&quot;../../../docs/failover/index&quot;&gt;フェイルオーバーの&lt;/a&gt;ドキュメントをご覧ください）。ただし、シャードの投票レプリカの半分以上が失われた場合、フェイルオーバーは自動的に行われず、2つのオプションが残されます。</target>
        </trans-unit>
        <trans-unit id="bc0a64248d0d6d9b7730531fe524793090fdf2c0" translate="yes" xml:space="preserve">
          <source>RethinkDB supports both secondary and compound indexes, as well as indexes that compute arbitrary expressions. You can see examples of how to use the secondary index API &lt;a href=&quot;../secondary-indexes/javascript/index&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">RethinkDBは、セカンダリインデックスと複合インデックスの両方、および任意の式を計算するインデックスをサポートしています。セカンダリインデックスAPIの使用例については、&lt;a href=&quot;../secondary-indexes/javascript/index&quot;&gt;こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="71d8b68931056a0d66d312a06ccb2e2e6cb5d9a2" translate="yes" xml:space="preserve">
          <source>RethinkDB supports both up-to-date and out-of-date reads. By default, all read queries are executed up-to-date, which means that every read operation for a given shard is routed to the primary replica for that shard and executed in order with other operations on the shard. In this default mode, the client always sees the latest, consistent, artifact-free view of the data.</source>
          <target state="translated">RethinkDBは、最新のリードと古いリードの両方をサポートしています。デフォルトでは、すべてのリードクエリは最新の状態で実行されます。つまり、指定されたシャードのすべてのリード操作は、そのシャードのプライマリレプリカにルーティングされ、シャード上の他の操作と順番に実行されます。このデフォルトモードでは、クライアントは常に最新の一貫したアーティファクトのないデータを見ることができます。</target>
        </trans-unit>
        <trans-unit id="f11243238b91ef1b89680e4c273314a374928ae0" translate="yes" xml:space="preserve">
          <source>RethinkDB supports different types of secondary indexes:</source>
          <target state="translated">RethinkDBは、さまざまなタイプのセカンダリインデックスをサポートしています。</target>
        </trans-unit>
        <trans-unit id="56794295c6dd1026fd6f7ec8b02775e58186eb63" translate="yes" xml:space="preserve">
          <source>RethinkDB supports most commonly used file systems. It optionally supports direct disk I/O for greater efficiency, but this is not enabled by default.</source>
          <target state="translated">RethinkDBは、ほとんどの一般的なファイルシステムをサポートしています。オプションで効率化のために直接ディスクI/Oをサポートしていますが、デフォルトでは有効になっていません。</target>
        </trans-unit>
        <trans-unit id="10e2f3eb29f4d8af581f7118e24c03dfdcd9a5d9" translate="yes" xml:space="preserve">
          <source>RethinkDB supports replication of data: every table in a database can be replicated as many times as you have servers in a cluster. Setting up replication is a simple operation with the web interface or the command line tool. For details, read &lt;a href=&quot;../sharding-and-replication/index&quot;&gt;Sharding and replication&lt;/a&gt;.</source>
          <target state="translated">RethinkDBはデータの複製をサポートします。データベース内のすべてのテーブルは、クラスター内にサーバーがある数だけ複製できます。レプリケーションの設定は、Webインターフェイスまたはコマンドラインツールを使用した簡単な操作です。詳細については、&lt;a href=&quot;../sharding-and-replication/index&quot;&gt;シャーディングとレプリケーションを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="2cb54ac86a86c52460e890916d58c1288376ab8b" translate="yes" xml:space="preserve">
          <source>RethinkDB supports spatial and geographic queries through geometry object support.</source>
          <target state="translated">RethinkDBは、ジオメトリオブジェクトのサポートにより、空間的および地理的なクエリをサポートしています。</target>
        </trans-unit>
        <trans-unit id="d32fa6ee6031165bb84247418c80028e7ab18532" translate="yes" xml:space="preserve">
          <source>RethinkDB supports the WGS84 World Geodetic System&amp;rsquo;s reference ellipsoid and geographic coordinate system (GCS). It does not directly support any projected coordinate system (PCS), but there are many tools available for performing such projections.</source>
          <target state="translated">RethinkDBは、WGS84 World Geodetic Systemの参照楕円体および地理座標系（GCS）をサポートしています。投影座標系（PCS）を直接サポートしていませんが、そのような投影を実行するために利用できる多くのツールがあります。</target>
        </trans-unit>
        <trans-unit id="a9c7488acfc62299ace979066c1e3f08638dfc5c" translate="yes" xml:space="preserve">
          <source>RethinkDB uses a range sharding algorithm parameterized on the table&amp;rsquo;s primary key to partition the data. When the user states they want a given table to use a certain number of shards, the system examines the statistics for the table and finds the optimal set of split points to break up the table evenly. All sharding is currently done based on the table&amp;rsquo;s primary key, and cannot be done based on any other attribute (in RethinkDB the primary key and the shard key are effectively the same thing).</source>
          <target state="translated">RethinkDBは、テーブルの主キーでパラメーター化された範囲シャーディングアルゴリズムを使用して、データを分割します。ユーザーが特定のテーブルに特定の数のシャードを使用することを希望すると、システムはテーブルの統計を調べ、テーブルを均等に分割するための最適な分割ポイントのセットを見つけます。すべてのシャーディングは現在、テーブルの主キーに基づいて行われ、他の属性に基づいて行うことはできません（RethinkDBでは、主キーとシャードキーは事実上同じものです）。</target>
        </trans-unit>
        <trans-unit id="5f2b0afa489f326033447882c4ce512558bc7c6f" translate="yes" xml:space="preserve">
          <source>RethinkDB uses a safe default configuration for write acknowledgement. Each write is committed to disk before the server acknowledges it to the client. If you&amp;rsquo;re running a single thread that inserts documents into RethinkDB in a loop, each insert must wait for the server acknowledgement before proceeding to the next one. This can significantly slow down the overall throughput.</source>
          <target state="translated">RethinkDBは安全なデフォルト設定を使用して書き込み確認を行います。各書き込みは、サーバーがクライアントに確認する前にディスクにコミットされます。ドキュメントをループでRethinkDBに挿入する単一のスレッドを実行している場合、各挿入はサーバーの確認を待ってから次の確認に進む必要があります。これにより、全体的なスループットが大幅に低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="87d7ed56e064cdc2be5c3c306b0a024e244f7da3" translate="yes" xml:space="preserve">
          <source>RethinkDB uses byte-wise ordering for &lt;code&gt;between&lt;/code&gt; and does not support Unicode collations; non-ASCII characters will be sorted by UTF-8 codepoint.</source>
          <target state="translated">RethinkDBは、バイト単位の順序を使用しています &lt;code&gt;between&lt;/code&gt; とUnicode照合順序をサポートしていません。非ASCII文字は、UTF-8コードポイントでソートされます。</target>
        </trans-unit>
        <trans-unit id="a2b7492bd98ab8c96ed190967271aac8f2b9a308" translate="yes" xml:space="preserve">
          <source>RethinkDB uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Raft_(computer_science)&quot;&gt;Raft algorithm&lt;/a&gt; to store and propagate cluster configuration in most cases, although there are some situations it uses semilattices, versioned with internal timestamps. This architecture turns out to have sufficient mathematical properties to address all the issues mentioned above (this result has been known in distributed systems research for quite a while).</source>
          <target state="translated">RethinkDBは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Raft_(computer_science)&quot;&gt;Raftアルゴリズム&lt;/a&gt;を使用してクラスター構成を保存および伝達しますが、内部タイムスタンプでバージョン管理された半格子を使用する場合もあります。このアーキテクチャは、上記のすべての問題に対処するのに十分な数学的特性を持つことがわかります（この結果は、分散システムの研究でかなり以前から知られています）。</target>
        </trans-unit>
        <trans-unit id="ad9e86f0c36323e6c20f0c976359840d640f76c9" translate="yes" xml:space="preserve">
          <source>RethinkDB uses the same protocol for communication within a datacenter as it does across datacenters. Because the architecture is immediately consistent and does not require quorums on individual document reads and writes, the latency issues commonly associated with cross-datacenter quorums on Dynamo-style systems do not arise in RethinkDB.</source>
          <target state="translated">RethinkDBは、データセンター内の通信に、データセンター間の通信と同じプロトコルを使用します。アーキテクチャは即座に一貫性があり、個々のドキュメントの読み書きにクォーラムを必要としないため、Dynamoスタイルのシステムではデータセンター間のクォーラムによくあるレイテンシの問題はRethinkDBでは発生しません。</target>
        </trans-unit>
        <trans-unit id="3e113a38cea5f70d16b5f974ca8331179248d2d4" translate="yes" xml:space="preserve">
          <source>RethinkDB uses three ports to operate&amp;mdash;the HTTP web UI port, the client drivers port, and the intracluster traffic port. You can connect the browser to the web UI port to administer the cluster right from your browser, and connect the client drivers to the client driver port to run queries from your application. If you&amp;rsquo;re running a cluster, different RethinkDB nodes communicate with each other via the intracluster traffic port.</source>
          <target state="translated">RethinkDBは、HTTP Web UIポート、クライアントドライバーポート、クラスター内トラフィックポートの3つのポートを使用して動作します。ブラウザーをWeb UIポートに接続して、ブラウザーから直接クラスターを管理し、クライアントドライバーをクライアントドライバーポートに接続して、アプリケーションからクエリを実行できます。クラスターを実行している場合、異なるRethinkDBノードはクラスター内トラフィックポートを介して相互に通信します。</target>
        </trans-unit>
        <trans-unit id="82c73af11c06078443ac96c46a3ff491a24f303f" translate="yes" xml:space="preserve">
          <source>RethinkDB version 2.1.5</source>
          <target state="translated">RethinkDBバージョン2.1.5</target>
        </trans-unit>
        <trans-unit id="64be170039b96e0579e9278dd905f8db6230488d" translate="yes" xml:space="preserve">
          <source>RethinkDB will accept two formats for JSON files:</source>
          <target state="translated">RethinkDBは、JSONファイルのために2つのフォーマットを受け入れます。</target>
        </trans-unit>
        <trans-unit id="1b3f223b9bb1750bce96d8634333989e0ebc07d7" translate="yes" xml:space="preserve">
          <source>RethinkDB will automatically load on startup. To disable this behavior, change the &lt;code&gt;RunAtLoad&lt;/code&gt; key to &lt;code&gt;&amp;lt;false/&amp;gt;&lt;/code&gt; in the &lt;code&gt;plist&lt;/code&gt; file.</source>
          <target state="translated">RethinkDBは起動時に自動的にロードされます。この動作を無効にするには、 &lt;code&gt;plist&lt;/code&gt; ファイルで &lt;code&gt;RunAtLoad&lt;/code&gt; キーを &lt;code&gt;&amp;lt;false/&amp;gt;&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="188b67359aa222e3ea9d29fed4e862f6d351f160" translate="yes" xml:space="preserve">
          <source>RethinkDB will generate a primary key and return it in &lt;code&gt;generated_keys&lt;/code&gt;.</source>
          <target state="translated">RethinkDBは主キーを生成し、それを &lt;code&gt;generated_keys&lt;/code&gt; に返します。</target>
        </trans-unit>
        <trans-unit id="ac7af94097e441aba69be3324247352a59b9643a" translate="yes" xml:space="preserve">
          <source>RethinkDB will notify your program of all changes in the &lt;code&gt;authors&lt;/code&gt; table and will include the old value and the new value of each modified document. See the &lt;a href=&quot;../../changefeeds/javascript/index&quot;&gt;changefeeds&lt;/a&gt; documentation entry for more details on how to use realtime feeds in RethinkDB.</source>
          <target state="translated">RethinkDBは、 &lt;code&gt;authors&lt;/code&gt; テーブルのすべての変更をプログラムに通知し、変更された各ドキュメントの古い値と新しい値を含めます。&lt;a href=&quot;../../changefeeds/javascript/index&quot;&gt;RethinkDBで&lt;/a&gt;リアルタイムフィードを使用する方法の詳細については、changefeedsのドキュメントエントリを参照してください。</target>
        </trans-unit>
        <trans-unit id="f968cad894d6556a053a28efbaa35e8a48e757e7" translate="yes" xml:space="preserve">
          <source>RethinkDB will process this query with the following steps:</source>
          <target state="translated">RethinkDBはこのクエリを以下の手順で処理します。</target>
        </trans-unit>
        <trans-unit id="64b9b5257d87ef3a851f521694a7f625e0295a7e" translate="yes" xml:space="preserve">
          <source>RethinkDB will seamlessly evaluate the &lt;code&gt;js&lt;/code&gt; command by calling into the V8 engine during the evaluation of the &lt;code&gt;filter&lt;/code&gt; query. You can combine most queries this way into progressively more complex ones.</source>
          <target state="translated">RethinkDBは、 &lt;code&gt;filter&lt;/code&gt; クエリの評価中にV8エンジンを呼び出すことにより、 &lt;code&gt;js&lt;/code&gt; コマンドをシームレスに評価します。この方法でほとんどのクエリを組み合わせて、徐々に複雑なクエリにできます。</target>
        </trans-unit>
        <trans-unit id="aaa0bfa56109a4dcf6840553fb0b62be795519d3" translate="yes" xml:space="preserve">
          <source>RethinkDB write operations will only throw exceptions if errors occur before any writes. Other errors will be listed in &lt;code&gt;first_error&lt;/code&gt;, and &lt;code&gt;errors&lt;/code&gt; will be set to a non-zero count. To properly handle errors with this term, code must both handle exceptions and check the &lt;code&gt;errors&lt;/code&gt; return value!</source>
          <target state="translated">RethinkDBの書き込み操作は、書き込みの前にエラーが発生した場合にのみ例外をスローします。その他のエラーは &lt;code&gt;first_error&lt;/code&gt; にリストされ、 &lt;code&gt;errors&lt;/code&gt; はゼロ以外のカウントに設定されます。この用語でエラーを適切に処理するには、コードで例外を処理し、 &lt;code&gt;errors&lt;/code&gt; 戻り値を確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="34e087373ce7adace20d25fd88b9372fbefa4968" translate="yes" xml:space="preserve">
          <source>RethinkDB&amp;rsquo;s GMR queries are distributed and parallelized across shards and CPU cores whenever possible. While this allows them to execute efficiently, it&amp;rsquo;s important to keep in mind that the &lt;code&gt;reduce&lt;/code&gt; function is &lt;em&gt;not&lt;/em&gt; called on the elements of its input stream from left to right. It&amp;rsquo;s called on either the elements of the stream &lt;em&gt;in any order&lt;/em&gt; or on the output of previous calls to the function.</source>
          <target state="translated">RethinkDBのGMRクエリは、可能な限りシャードとCPUコア全体に分散および並列化されます。これにより、効率的に実行できますが、 &lt;code&gt;reduce&lt;/code&gt; 関数は、入力ストリームの要素で左から右に呼び出され&lt;em&gt;ない&lt;/em&gt;ことに注意してください。ストリームの要素を&lt;em&gt;任意の順序で&lt;/em&gt;呼び出すか、前の関数呼び出しの出力で呼び出します。</target>
        </trans-unit>
        <trans-unit id="b133a4402124e33904942b046a7e475fcf7c87c8" translate="yes" xml:space="preserve">
          <source>RethinkDB&amp;rsquo;s UUIDs are standards-compliant. Without the optional argument, a version 4 random UUID will be generated; with that argument, a version 5 UUID will be generated, using a fixed namespace UUID of &lt;code&gt;91461c99-f89d-49d2-af96-d8e2e14e9b58&lt;/code&gt;. For more information, read &lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier&quot;&gt;Wikipedia&amp;rsquo;s UUID article&lt;/a&gt;.</source>
          <target state="translated">RethinkDBのUUIDは標準に準拠しています。オプションの引数がない場合、バージョン4のランダムUUIDが生成されます。その引数を使用すると、 &lt;code&gt;91461c99-f89d-49d2-af96-d8e2e14e9b58&lt;/code&gt; の固定名前空間UUIDを使用して、バージョン5のUUIDが生成されます。詳細については、&lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier&quot;&gt;WikipediaのUUIDに関する記事を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="0da7bfd7ba58030ff21673f3096c2d4399c90c10" translate="yes" xml:space="preserve">
          <source>RethinkDB&amp;rsquo;s automatic failover has limitations in cases of non-transitive connectivity failure, i.e., server A can contact B and B can contact C, but A cannot contact C. Read the &lt;a href=&quot;../failover/index&quot;&gt;Failover&lt;/a&gt; documentation for more details.</source>
          <target state="translated">RethinkDBの自動フェイルオーバーには、非推移的な接続障害が発生した場合の制限があります。つまり、サーバーAはBに接続でき、BはCに接続できますが、AはCに接続できません。詳細については、&lt;a href=&quot;../failover/index&quot;&gt;フェイルオーバーの&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="f1fe8ed60518c4cc231f66de64be6b6b14e157f1" translate="yes" xml:space="preserve">
          <source>RethinkDB&amp;rsquo;s basic data types include numbers, strings, boolean values, objects, arrays, and the &lt;code&gt;null&lt;/code&gt; value. In addition, it stores RethinkDB-specific data types including tables, streams, selections, binary objects, time objects, geometry data types, and grouped data.</source>
          <target state="translated">RethinkDBの基本的なデータ型には、数値、文字列、ブール値、オブジェクト、配列、および &lt;code&gt;null&lt;/code&gt; 値が含まれます。さらに、テーブル、ストリーム、セレクション、バイナリオブジェクト、時間オブジェクト、ジオメトリデータタイプ、グループ化されたデータなど、RethinkDB固有のデータタイプを格納します。</target>
        </trans-unit>
        <trans-unit id="0ca7a8d234327a4022cad363f1285f21bac0f144" translate="yes" xml:space="preserve">
          <source>RethinkDB&amp;rsquo;s default settings prioritize safety over performance, except in one case: &lt;code&gt;read_mode&lt;/code&gt; defaults to &lt;code&gt;single&lt;/code&gt; rather than &lt;code&gt;majority&lt;/code&gt;. The &lt;code&gt;majority&lt;/code&gt; read mode requires sending a query to all of the replicas and waiting for a majority to reply, which significantly degrades performance.</source>
          <target state="translated">：RethinkDBのデフォルト設定は、1場合を除いて、パフォーマンス上の安全性を優先順位付け &lt;code&gt;read_mode&lt;/code&gt; のデフォルトは &lt;code&gt;single&lt;/code&gt; ではなく、 &lt;code&gt;majority&lt;/code&gt; 。 &lt;code&gt;majority&lt;/code&gt; 読み取りモードは、レプリカのすべてにクエリを送信し、大半は大幅に性能が劣化する、返信するのを待つ必要があります。</target>
        </trans-unit>
        <trans-unit id="bb2f37e7edacabf1482154290f8348ef4776073d" translate="yes" xml:space="preserve">
          <source>RethinkDB&amp;rsquo;s defaults tend to prioritize safety over performance. One of those defaults is that queries will be sent to the primary replicas for shards, which will always have current data (although that data may be returned to a query before it&amp;rsquo;s been committed to disk).</source>
          <target state="translated">RethinkDBのデフォルトでは、パフォーマンスよりも安全性を優先する傾向があります。これらのデフォルトの1つは、クエリがシャードのプライマリレプリカに送信されることです。これには常に最新のデータが含まれます（ただし、データは、ディスクにコミットされる前にクエリに返される場合があります）。</target>
        </trans-unit>
        <trans-unit id="db4c9426f43aa7a8535f8d64ebcc1ea7e3791bc5" translate="yes" xml:space="preserve">
          <source>RethinkDB&amp;rsquo;s page cache keeps recently used data in memory to minimize disk access. By default, RethinkDB automatically configures the cache size limit according to the formula &lt;code&gt;(available_mem - 1024 MB) / 2&lt;/code&gt;. &lt;code&gt;available_mem&lt;/code&gt; is the amount of available memory at the time RethinkDB starts, including memory that can be freed up by the operating system if needed (such as the operating system&amp;rsquo;s disk cache). If there is less than 1224 MB of memory available on the system, a minimum cache size limit of 100 MB is used. You can find the actual size limit used by an instance of RethinkDB in its log.</source>
          <target state="translated">RethinkDBのページキャッシュは、最近使用されたデータをメモリに保持し、ディスクアクセスを最小限に抑えます。デフォルトでは、RethinkDBは式 &lt;code&gt;(available_mem - 1024 MB) / 2&lt;/code&gt; に従ってキャッシュサイズの制限を自動的に構成します。 &lt;code&gt;available_mem&lt;/code&gt; は、RethinkDBの起動時に利用可能なメモリの量です。これには、必要に応じてオペレーティングシステムが解放できるメモリ（オペレーティングシステムのディスクキャッシュなど）も含まれます。システムで使用可能なメモリが1224 MB未満の場合、100 MBの最小キャッシュサイズ制限が使用されます。RethinkDBのインスタンスで使用される実際のサイズ制限は、ログで確認できます。</target>
        </trans-unit>
        <trans-unit id="653b9779dde232052144d040476ebeef4a8dcaaa" translate="yes" xml:space="preserve">
          <source>RethinkDB-specific data types</source>
          <target state="translated">RethinkDB固有のデータ型</target>
        </trans-unit>
        <trans-unit id="57354ca1c1a9aab463d86135427b774bc928dbcc" translate="yes" xml:space="preserve">
          <source>Retrieve all results and pass them as an array to the given callback.</source>
          <target state="translated">すべての結果を取得し、配列として与えられたコールバックに渡します。</target>
        </trans-unit>
        <trans-unit id="a0800d22e7dc2655702fc5c45eb8eba5b2a4d42c" translate="yes" xml:space="preserve">
          <source>Retrieve all users named &amp;ldquo;William Adama&amp;rdquo; (first name &amp;ldquo;William&amp;rdquo;, last name &amp;ldquo;Adama&amp;rdquo;), and who do not have a middle name.</source>
          <target state="translated">「William Adama」という名前のすべてのユーザー（姓は「William」、姓は「Adama」）を取得し、ミドルネームを持たないユーザーを取得します。</target>
        </trans-unit>
        <trans-unit id="cec1adbb3f9ef3982a4b34f750d9645287ab990d" translate="yes" xml:space="preserve">
          <source>Retrieve all users named &amp;ldquo;William Adama&amp;rdquo; (first name &amp;ldquo;William&amp;rdquo;, last name &amp;ldquo;Adama&amp;rdquo;), with any middle name.</source>
          <target state="translated">「William Adama」という名前のすべてのユーザーを検索します（名は「William」、姓は「Adama」）。任意のミドルネームを使用します。</target>
        </trans-unit>
        <trans-unit id="237e5c73e5953045fa795163933e9ed9332088b6" translate="yes" xml:space="preserve">
          <source>Retrieve all users whose field &lt;code&gt;placesVisited&lt;/code&gt; contains &lt;code&gt;France&lt;/code&gt;.</source>
          <target state="translated">フィールド &lt;code&gt;placesVisited&lt;/code&gt; に &lt;code&gt;France&lt;/code&gt; が含まれるすべてのユーザーを取得します。</target>
        </trans-unit>
        <trans-unit id="5d4b04dce1b7df968174efc9d7f0fa1e97e4f76c" translate="yes" xml:space="preserve">
          <source>Retrieve all users whose name is &amp;ldquo;William&amp;rdquo; (case insensitive).</source>
          <target state="translated">名前が「William」であるすべてのユーザーを取得します（大文字と小文字は区別されません）。</target>
        </trans-unit>
        <trans-unit id="144e062a80d5bfa018aedb28a373c2819db9d43b" translate="yes" xml:space="preserve">
          <source>Retrieve data from the specified URL over HTTP. The return type depends on the &lt;code&gt;resultFormat&lt;/code&gt; option, which checks the &lt;code&gt;Content-Type&lt;/code&gt; of the response by default.</source>
          <target state="translated">HTTP経由で指定されたURLからデータを取得します。戻り値のタイプは、 &lt;code&gt;resultFormat&lt;/code&gt; オプションに依存します。これは、デフォルトで応答の &lt;code&gt;Content-Type&lt;/code&gt; をチェックします。</target>
        </trans-unit>
        <trans-unit id="211aca45f30753de118f273f7b269e7e4499fd62" translate="yes" xml:space="preserve">
          <source>Retrieve documents</source>
          <target state="translated">資料の取得</target>
        </trans-unit>
        <trans-unit id="3b22bfa4b5202554454b9ce9093ae3ce1ea8220d" translate="yes" xml:space="preserve">
          <source>Retrieve documents by primary key</source>
          <target state="translated">主キーでドキュメントを取得する</target>
        </trans-unit>
        <trans-unit id="7544efd784c58b3cc6b94510160698abf4204cdf" translate="yes" xml:space="preserve">
          <source>Retrieve the document you just inserted with:</source>
          <target state="translated">挿入した文書を取得します。</target>
        </trans-unit>
        <trans-unit id="0e7383fa3693e7f98d7e2271113002f8270dbf24" translate="yes" xml:space="preserve">
          <source>Retrieving all the objects in a stream (cursor) as an array</source>
          <target state="translated">ストリーム(カーソル)内のすべてのオブジェクトを配列として取得する</target>
        </trans-unit>
        <trans-unit id="d3381e3b339f22ad2879bc207700fcde0bfd99cc" translate="yes" xml:space="preserve">
          <source>Retrieving documents</source>
          <target state="translated">文書の検索</target>
        </trans-unit>
        <trans-unit id="96da5941680a83531c9d9d6e650a067fcf591587" translate="yes" xml:space="preserve">
          <source>Retrieving portions of times</source>
          <target state="translated">時間の一部を取得する</target>
        </trans-unit>
        <trans-unit id="095d7a5343b62a81ee9712b14cf269156fe7c534" translate="yes" xml:space="preserve">
          <source>Retrieving times</source>
          <target state="translated">時間を取得する</target>
        </trans-unit>
        <trans-unit id="1ac0fc4ed2e5cad9e59397ea987188f54b8218a4" translate="yes" xml:space="preserve">
          <source>Return a UUID (universally unique identifier), a string that can be used as a unique ID. If a string is passed to &lt;code&gt;uuid&lt;/code&gt; as an argument, the UUID will be deterministic, derived from the string&amp;rsquo;s SHA-1 hash.</source>
          <target state="translated">一意のIDとして使用できる文字列であるUUID（Universally Unique Identifier）を返します。文字列が引数として &lt;code&gt;uuid&lt;/code&gt; に渡される場合、UUIDは文字列のSHA-1ハッシュから導出された確定的なものになります。</target>
        </trans-unit>
        <trans-unit id="ffd17e2071ddb0546ffd90d50675a3881fba96ef" translate="yes" xml:space="preserve">
          <source>Return a list of documents closest to a specified point based on a geospatial index, sorted in order of increasing distance.</source>
          <target state="translated">地理空間インデックスに基づいて、指定された点に最も近い文書のリストを返します。</target>
        </trans-unit>
        <trans-unit id="7f63b091983357380f1a69b1dfe84c2c468192c7" translate="yes" xml:space="preserve">
          <source>Return a new time object only based on the day, month and year (ie. the same day at 00:00).</source>
          <target state="translated">日、月、年に基づいた新しい時間オブジェクトのみを返します(例えば、00:00の同じ日)。</target>
        </trans-unit>
        <trans-unit id="015c5dd378cc34e946f70fe5920eef6871ab879c" translate="yes" xml:space="preserve">
          <source>Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.</source>
          <target state="translated">タイムゾーンを変更した新しい時刻オブジェクトを返します。時間は同じままですが、hours()のようなメソッドはタイムゾーンを考慮しているため、返される結果は変わります。timezoneの引数はISO 8601形式でなければなりません。</target>
        </trans-unit>
        <trans-unit id="3c41bbd84134669b7c1a4ef8c089acb5a464d383" translate="yes" xml:space="preserve">
          <source>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</source>
          <target state="translated">現在の時刻をUTCで表した時刻オブジェクトを返します。コマンド now()は、サーバがクエリを受信したときに一度だけ計算されるので、 r.now()の複数のインスタンスは、クエリ内で常に同じ時刻を返します。</target>
        </trans-unit>
        <trans-unit id="0bf7e4e063eddc8455a8c8c1c7dcbd9e564f26eb" translate="yes" xml:space="preserve">
          <source>Return all documents in a table. Other commands may be chained after &lt;code&gt;table&lt;/code&gt; to return a subset of documents (such as &lt;a href=&quot;../get/index&quot;&gt;get&lt;/a&gt; and &lt;a href=&quot;../filter/index&quot;&gt;filter&lt;/a&gt;) or perform further processing.</source>
          <target state="translated">テーブル内のすべてのドキュメントを返します。 &lt;code&gt;table&lt;/code&gt; 後に他のコマンドをチェーンして、ドキュメントのサブセットを&lt;a href=&quot;../get/index&quot;&gt;取得し&lt;/a&gt;たり（getや&lt;a href=&quot;../filter/index&quot;&gt;filterなど&lt;/a&gt;）、さらに処理を実行したりできます。</target>
        </trans-unit>
        <trans-unit id="1cb807193ee6de63e427d7ed0d8324b9c3c3b591" translate="yes" xml:space="preserve">
          <source>Return all documents in a table. Other commands may be chained after &lt;code&gt;table&lt;/code&gt; to return a subset of documents (such as &lt;a href=&quot;get/index&quot;&gt;get&lt;/a&gt; and &lt;a href=&quot;filter/index&quot;&gt;filter&lt;/a&gt;) or perform further processing.</source>
          <target state="translated">テーブル内のすべてのドキュメントを返します。 &lt;code&gt;table&lt;/code&gt; 後に他のコマンドをチェーンして、ドキュメントのサブセットを&lt;a href=&quot;get/index&quot;&gt;取得し&lt;/a&gt;たり（getや&lt;a href=&quot;filter/index&quot;&gt;filterなど&lt;/a&gt;）、さらに処理を実行したりできます。</target>
        </trans-unit>
        <trans-unit id="478ae85b5976cf44bf341f6ea047a3fc9cec6987" translate="yes" xml:space="preserve">
          <source>Return all the elements in a sequence for which the given predicate is true. The return value of &lt;code&gt;filter&lt;/code&gt; will be the same as the input (sequence, stream, or array). Documents can be filtered in a variety of ways&amp;mdash;ranges, nested values, boolean conditions, and the results of anonymous functions.</source>
          <target state="translated">指定された述語が真であるシーケンス内のすべての要素を返します。 &lt;code&gt;filter&lt;/code&gt; の戻り値は、入力（シーケンス、ストリーム、または配列）と同じになります。ドキュメントは、範囲、ネストされた値、ブール条件、無名関数の結果など、さまざまな方法でフィルタリングできます。</target>
        </trans-unit>
        <trans-unit id="44f61e9b869f88502f4aea0e59d05d2b3e56538f" translate="yes" xml:space="preserve">
          <source>Return an array containing all of an object&amp;rsquo;s keys. Note that the keys will be sorted as described in &lt;a href=&quot;../../../docs/data-types/index#sorting-order&quot;&gt;ReQL data types&lt;/a&gt; (for strings, lexicographically).</source>
          <target state="translated">オブジェクトのすべてのキーを含む配列を返します。キーは&lt;a href=&quot;../../../docs/data-types/index#sorting-order&quot;&gt;ReQLデータ型&lt;/a&gt;（文字列の場合、辞書順）で説明されているようにソートされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e70c431aef04b9c7b45e841c2755e0962bdd3716" translate="yes" xml:space="preserve">
          <source>Return an array containing all of an object&amp;rsquo;s keys. Note that the keys will be sorted as described in &lt;a href=&quot;../../docs/data-types/index#sorting-order&quot;&gt;ReQL data types&lt;/a&gt; (for strings, lexicographically).</source>
          <target state="translated">オブジェクトのすべてのキーを含む配列を返します。キーは&lt;a href=&quot;../../docs/data-types/index#sorting-order&quot;&gt;ReQLデータ型&lt;/a&gt;（文字列の場合、辞書順）で説明されているようにソートされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f3730aaaa8f1bbcef6b27cf753e5ef734ef1890e" translate="yes" xml:space="preserve">
          <source>Return an array containing all of an object&amp;rsquo;s values. &lt;code&gt;values()&lt;/code&gt; guarantees the values will come out in the same order as &lt;a href=&quot;../keys/index&quot;&gt;keys&lt;/a&gt;.</source>
          <target state="translated">オブジェクトのすべての値を含む配列を返します。 &lt;code&gt;values()&lt;/code&gt; は、値が&lt;a href=&quot;../keys/index&quot;&gt;keys&lt;/a&gt;と同じ順序で出力されることを保証します。</target>
        </trans-unit>
        <trans-unit id="971118c553d2907361131e3449a1a6ec52645842" translate="yes" xml:space="preserve">
          <source>Return an array containing all of an object&amp;rsquo;s values. &lt;code&gt;values()&lt;/code&gt; guarantees the values will come out in the same order as &lt;a href=&quot;keys/index&quot;&gt;keys&lt;/a&gt;.</source>
          <target state="translated">オブジェクトのすべての値を含む配列を返します。 &lt;code&gt;values()&lt;/code&gt; は、値が&lt;a href=&quot;keys/index&quot;&gt;keys&lt;/a&gt;と同じ順序で出力されることを保証します。</target>
        </trans-unit>
        <trans-unit id="56bffb13073f7f91d3bc50303093a5720e9d1b1e" translate="yes" xml:space="preserve">
          <source>Return information about the server being used by a connection.</source>
          <target state="translated">接続で使用されているサーバの情報を返します。</target>
        </trans-unit>
        <trans-unit id="a1b11d0437587617248352faf5ad14320b9e0e72" translate="yes" xml:space="preserve">
          <source>Return players who have the &amp;ldquo;championships&amp;rdquo; field.</source>
          <target state="translated">「選手権」フィールドを持つプレイヤーを返します。</target>
        </trans-unit>
        <trans-unit id="9572f90ef4a18b691f067965a76e794f55e11c57" translate="yes" xml:space="preserve">
          <source>Return the day of a time object as a number between 1 and 31.</source>
          <target state="translated">時間オブジェクトの曜日を1から31までの数値で返します。</target>
        </trans-unit>
        <trans-unit id="439ddcb82ceaaca4c171019c2f4cb98b13d31d24" translate="yes" xml:space="preserve">
          <source>Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).</source>
          <target state="translated">時間オブジェクトの年の日を、1から366までの数値で返します(ISO 8601規格に準拠しています)。</target>
        </trans-unit>
        <trans-unit id="519ae8ae909a6a02ab7b4e9a29c2f7526e688760" translate="yes" xml:space="preserve">
          <source>Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday etc. are defined and map to the appropriate integer.</source>
          <target state="translated">時刻オブジェクトの曜日を、1から7までの数値で返します(ISO 8601規格に準拠しています)。利便性のために、r.monday,r.tuesday などの用語が定義されており、適切な整数にマップされています。</target>
        </trans-unit>
        <trans-unit id="d4ed5fd76817542a76355cd4b4f991608b7c9797" translate="yes" xml:space="preserve">
          <source>Return the elements of a sequence within the specified range.</source>
          <target state="translated">指定した範囲内のシーケンスの要素を返します。</target>
        </trans-unit>
        <trans-unit id="e2d16cca3af2640562e11239c5e1cb70f24e2040" translate="yes" xml:space="preserve">
          <source>Return the hour in a time object as a number between 0 and 23.</source>
          <target state="translated">時間オブジェクト内の時間を0から23までの数値で返します。</target>
        </trans-unit>
        <trans-unit id="6a27edb7435efd0748ac618d8f95b6d80fc2510a" translate="yes" xml:space="preserve">
          <source>Return the maximum number comments per post.</source>
          <target state="translated">1投稿あたりの最大コメント数を返します。</target>
        </trans-unit>
        <trans-unit id="1f0c62205fb575cc337651b85a3c80c4c42e9b98" translate="yes" xml:space="preserve">
          <source>Return the minute in a time object as a number between 0 and 59.</source>
          <target state="translated">時間オブジェクト内の分を、0から59の間の数値として返します。</target>
        </trans-unit>
        <trans-unit id="b204d98d48eba1077a862d07b71af3333275043c" translate="yes" xml:space="preserve">
          <source>Return the month of a time object as a number between 1 and 12. For your convenience, the terms r.january, r.february etc. are defined and map to the appropriate integer.</source>
          <target state="translated">時間オブジェクトの月を、1から12の間の数値で返します。便宜上、r.january,r.februaryなどの用語が定義されており、適切な整数にマップされています。</target>
        </trans-unit>
        <trans-unit id="7c290219ba6cddea6fd8ee62f62fd68fb04cbe8e" translate="yes" xml:space="preserve">
          <source>Return the number of comments for all posts.</source>
          <target state="translated">全投稿のコメント数を返します。</target>
        </trans-unit>
        <trans-unit id="e316ab849a4c0fd165af196f49cfa9c7888f04b2" translate="yes" xml:space="preserve">
          <source>Return the number of seconds elapsed since the beginning of the day stored in the time object.</source>
          <target state="translated">timeオブジェクトに格納されている日の始まりからの経過秒数を返します。</target>
        </trans-unit>
        <trans-unit id="c308fc928c3ca38906101a5971935fa2b23267d8" translate="yes" xml:space="preserve">
          <source>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</source>
          <target state="translated">時間オブジェクトの秒数を、0~59.999(倍精度)の間の数値として返します。</target>
        </trans-unit>
        <trans-unit id="2ca2261d31fada3154fe610f41e3f36f34f50104" translate="yes" xml:space="preserve">
          <source>Return the status of a table.</source>
          <target state="translated">テーブルの状態を返します。</target>
        </trans-unit>
        <trans-unit id="ee8f6ace073116dd4cee2823f8ec775a63ec6e3c" translate="yes" xml:space="preserve">
          <source>Return the timezone of the time object.</source>
          <target state="translated">時間オブジェクトのタイムゾーンを返します。</target>
        </trans-unit>
        <trans-unit id="a16f2cc87a2424696c4c7c72d81f1b8443ca04e0" translate="yes" xml:space="preserve">
          <source>Return the year of a time object.</source>
          <target state="translated">時間オブジェクトの年を返します。</target>
        </trans-unit>
        <trans-unit id="7251e5ca9210a35e0349f287619f236690248620" translate="yes" xml:space="preserve">
          <source>Return whether a time is between two other times.</source>
          <target state="translated">時間が他の2つの時間の間にあるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="7df890bcefe8759cfa2f24768eb854401e46e8ce" translate="yes" xml:space="preserve">
          <source>Returning a ReQL query as a string</source>
          <target state="translated">ReQL クエリを文字列として返す</target>
        </trans-unit>
        <trans-unit id="6549cc77b11e26ba920d62def1da169519c38689" translate="yes" xml:space="preserve">
          <source>Returning specific fields of a document</source>
          <target state="translated">ドキュメントの特定のフィールドを返す</target>
        </trans-unit>
        <trans-unit id="97c5eeaf29f67ee72247c15972aaba739a353910" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;&quot;SELECTION&amp;lt;OBJECT&amp;gt;&quot;&lt;/code&gt;. (Yes, the type of the &lt;code&gt;typeOf&lt;/code&gt; command is &lt;code&gt;&quot;STRING&quot;&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;&quot;SELECTION&amp;lt;OBJECT&amp;gt;&quot;&lt;/code&gt; 返します。（はい、 &lt;code&gt;typeOf&lt;/code&gt; コマンドのタイプは &lt;code&gt;&quot;STRING&quot;&lt;/code&gt; です。）</target>
        </trans-unit>
        <trans-unit id="14fe7627b67a0185a8f04483dd7d16235707fb12" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;'domain.com'&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;'domain.com'&lt;/code&gt; 返します</target>
        </trans-unit>
        <trans-unit id="643e18161845e0ecb05d553ae30ebf927d10f3ce" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;0&lt;/code&gt; when called on an empty sequence.</source>
          <target state="translated">空のシーケンスで呼び出されると &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c46d32827e2a7131ff1d77a2f7291e55fe3cc2c1" translate="yes" xml:space="preserve">
          <source>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with &lt;a href=&quot;../zip/index&quot;&gt;zip&lt;/a&gt; to combine the left and right results.</source>
          <target state="translated">2つのシーケンスの左外部結合を返します。返されるシーケンスは、左側のシーケンスと右側のシーケンスの和集合を表します。左側のシーケンスのすべてのドキュメントが返されます。それぞれが述語条件を満たす場合、右側のシーケンスのドキュメントと一致します。ほとんどの場合、結合を&lt;a href=&quot;../zip/index&quot;&gt;zipで&lt;/a&gt;追跡して、左と右の結果を結合します。</target>
        </trans-unit>
        <trans-unit id="ab1565069e4a0e57be6a5a52da760fcbbfc29ef0" translate="yes" xml:space="preserve">
          <source>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with &lt;a href=&quot;zip/index&quot;&gt;zip&lt;/a&gt; to combine the left and right results.</source>
          <target state="translated">2つのシーケンスの左外部結合を返します。返されるシーケンスは、左側のシーケンスと右側のシーケンスの和集合を表します。左側のシーケンスのすべてのドキュメントが返されます。それぞれが述語条件を満たす場合、右側のシーケンスのドキュメントと一致します。ほとんどの場合、結合を&lt;a href=&quot;zip/index&quot;&gt;zipで&lt;/a&gt;追跡して、左と右の結果を結合します。</target>
        </trans-unit>
        <trans-unit id="71e616c4f0779291525e7a3daecba278fcf11b08" translate="yes" xml:space="preserve">
          <source>Returns an inner join of two sequences.</source>
          <target state="translated">2つのシーケンスの内側結合を返します。</target>
        </trans-unit>
        <trans-unit id="c830f78dec23684142dbe486cecbd1eb26631348" translate="yes" xml:space="preserve">
          <source>Returns the currently visited document.</source>
          <target state="translated">現在訪問しているドキュメントを返します。</target>
        </trans-unit>
        <trans-unit id="63c93a91670215210d58774851527a985d56583c" translate="yes" xml:space="preserve">
          <source>Returns the following result:</source>
          <target state="translated">以下の結果を返します。</target>
        </trans-unit>
        <trans-unit id="3243ea249cfe8eb0c3119088a6a8fe5d63da9ba4" translate="yes" xml:space="preserve">
          <source>Rich command-set</source>
          <target state="translated">リッチコマンドセット</target>
        </trans-unit>
        <trans-unit id="57223975ae6497ffb734052c257297523d6a53df" translate="yes" xml:space="preserve">
          <source>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value&amp;rsquo;s floor).</source>
          <target state="translated">指定された値を切り捨てて、指定された値（値の下限）以下の最大の整数値を返します。</target>
        </trans-unit>
        <trans-unit id="1055a67da6f244655ae05b937e997675ab32f267" translate="yes" xml:space="preserve">
          <source>Rounds the given value to the nearest whole integer.</source>
          <target state="translated">指定された値を最も近い整数に丸めます。</target>
        </trans-unit>
        <trans-unit id="42e7a006f535f03176759ec87c52257b285ebc2f" translate="yes" xml:space="preserve">
          <source>Rounds the given value up, returning the smallest integer value greater than or equal to the given value (the value&amp;rsquo;s ceiling).</source>
          <target state="translated">指定された値を切り上げ、指定された値（値の上限）以上の最小の整数値を返します。</target>
        </trans-unit>
        <trans-unit id="b217e98c3bf70f3cf4633a5447d6587eea974ba1" translate="yes" xml:space="preserve">
          <source>Ruby</source>
          <target state="translated">Ruby</target>
        </trans-unit>
        <trans-unit id="91667aa4fbc722508d6b30787e8e791fb64f62f5" translate="yes" xml:space="preserve">
          <source>Ruby driver</source>
          <target state="translated">ルビドライバ</target>
        </trans-unit>
        <trans-unit id="b853e9265c2ef8705439ae2bf2b5eaf811a08fef" translate="yes" xml:space="preserve">
          <source>Ruby libraries</source>
          <target state="translated">Ruby ライブラリ</target>
        </trans-unit>
        <trans-unit id="73569b1cb680b4a4ed18b11d5df9a172d7172552" translate="yes" xml:space="preserve">
          <source>Ruby with EventMachine</source>
          <target state="translated">RubyとEventMachine</target>
        </trans-unit>
        <trans-unit id="079aca0608b19eda84bb36e7a085f9aa4e9ee427" translate="yes" xml:space="preserve">
          <source>Run a query on a connection. The callback will get either an error, a single JSON result, or a cursor, depending on the query.</source>
          <target state="translated">接続上でクエリを実行します。コールバックは、クエリに応じて、エラー、単一の JSON 結果、またはカーソルのいずれかを取得します。</target>
        </trans-unit>
        <trans-unit id="c8219c1f62102cbb2bc5e0e9dd3b930cf610805d" translate="yes" xml:space="preserve">
          <source>Run some queries</source>
          <target state="translated">いくつかのクエリを実行する</target>
        </trans-unit>
        <trans-unit id="d44ebe98717661727e47dcc676b5bed62a1bcda9" translate="yes" xml:space="preserve">
          <source>Run the publisher and corresponding subscribers in different terminal windows, so the output doesn&amp;rsquo;t run together. For example, to run the publisher for the regex demo:</source>
          <target state="translated">パブリッシャーと対応するサブスクライバーを異なるターミナルウィンドウで実行して、出力が一緒に実行されないようにします。たとえば、正規表現デモのパブリッシャーを実行するには：</target>
        </trans-unit>
        <trans-unit id="ce872fe41a13ab76827629aca0160e3532cba67b" translate="yes" xml:space="preserve">
          <source>Running a proxy node</source>
          <target state="translated">プロキシノードの実行</target>
        </trans-unit>
        <trans-unit id="e0d0a896f47bbfa4aa812a58dd924904235834c4" translate="yes" xml:space="preserve">
          <source>Running multiple instances of RethinkDB on the same server may be desirable for isolating databases for separate applications running on the same server, or for testing purposes. (There is no performance gain from running multiple nodes of the same cluster on the same physical machine.)</source>
          <target state="translated">同じサーバー上でRethinkDBの複数のインスタンスを実行することは、同じサーバー上で実行されている別々のアプリケーションのデータベースを分離したり、テスト目的のために望ましい場合があります。(同一物理マシン上で同一クラスタの複数ノードを実行してもパフォーマンスは向上しません)。</target>
        </trans-unit>
        <trans-unit id="a4942c26d0735947d8a22a2fbe2735a12e381808" translate="yes" xml:space="preserve">
          <source>SELECT</source>
          <target state="translated">SELECT</target>
        </trans-unit>
        <trans-unit id="a2469c47824560f8054ab9e6c0cc7613158a31d8" translate="yes" xml:space="preserve">
          <source>SEND</source>
          <target state="translated">SEND</target>
        </trans-unit>
        <trans-unit id="2064cb643caa8d9e1de12eea7f3e143ca9f8680d" translate="yes" xml:space="preserve">
          <source>SQL</source>
          <target state="translated">SQL</target>
        </trans-unit>
        <trans-unit id="94dbfc935bc4110b42a7479845ebaaf6831417c0" translate="yes" xml:space="preserve">
          <source>SQL and RethinkDB share very similar terminology. Below is a table of terms and concepts in the two systems.</source>
          <target state="translated">SQLとRethinkDBは非常に似た用語を共有しています。以下に、2つのシステムにおける用語と概念の表を示します。</target>
        </trans-unit>
        <trans-unit id="2d9ba3ea6a8f0fa4cc2e912557eb633510807715" translate="yes" xml:space="preserve">
          <source>SQL to ReQL cheat sheet</source>
          <target state="translated">SQLからReQLへのチートシート</target>
        </trans-unit>
        <trans-unit id="93660706dc5c1a232c7b857cae33b1f219f3ce07" translate="yes" xml:space="preserve">
          <source>SSH access</source>
          <target state="translated">SSHアクセス</target>
        </trans-unit>
        <trans-unit id="2913b792a0b75101deedbaa4f460c87e0b282d9f" translate="yes" xml:space="preserve">
          <source>SSH tunneling lets you connect directly to the virtual private network of your RethinkDB cluster. This is more complicated to set up, but lets you work with the hosted RethinkDB instance the same way you&amp;rsquo;d work with a local installation, and it can work with any community RethinkDB driver. After your RethinkDB deployment is created, the admin console will give you the host and port information that you need to use to set up the SSH tunnel.</source>
          <target state="translated">SSHトンネリングを使用すると、RethinkDBクラスターの仮想プライベートネットワークに直接接続できます。これはセットアップがより複雑ですが、ホストされているRethinkDBインスタンスをローカルインストールと同じように操作でき、どのコミュニティRethinkDBドライバーでも動作します。RethinkDBデプロイメントが作成された後、管理コンソールは、SSHトンネルのセットアップに使用する必要があるホストとポートの情報を提供します。</target>
        </trans-unit>
        <trans-unit id="0c37f79b7f9adfb0fadf4cb243f264c3d81acde8" translate="yes" xml:space="preserve">
          <source>Safari 6.02 or higher</source>
          <target state="translated">Safari 6.02以上</target>
        </trans-unit>
        <trans-unit id="7b7e70bcf209a5323526033a9cbf768a3ae70c2c" translate="yes" xml:space="preserve">
          <source>Scala</source>
          <target state="translated">Scala</target>
        </trans-unit>
        <trans-unit id="f1af3da47cd6f0772dc9bc865e617198fa0a2bb1" translate="yes" xml:space="preserve">
          <source>Scaling considerations</source>
          <target state="translated">スケーリングの考慮事項</target>
        </trans-unit>
        <trans-unit id="56711ed4f6ac142f89dade8ba9b9c93a04023164" translate="yes" xml:space="preserve">
          <source>Scaling, sharding and replication</source>
          <target state="translated">スケーリング、シャーディング、レプリケーション</target>
        </trans-unit>
        <trans-unit id="c23540e5fb551edff0ac95649a1d551f9736d55e" translate="yes" xml:space="preserve">
          <source>Scopes</source>
          <target state="translated">Scopes</target>
        </trans-unit>
        <trans-unit id="c3647743e6f9e273cffde9b95098045e446733a9" translate="yes" xml:space="preserve">
          <source>Scripting ReQL</source>
          <target state="translated">スクリプトのReQL</target>
        </trans-unit>
        <trans-unit id="5ea96a2371f2e2dcc3e4681dca2cd5e276968843" translate="yes" xml:space="preserve">
          <source>Scripting is also the only way to access some advanced features such as server tags, which let you group servers together for replication purposes (such as associating them with physical data centers). For more information, read the &amp;ldquo;Advanced configuration&amp;rdquo; section of &lt;a href=&quot;../sharding-and-replication/index&quot;&gt;Sharding and replication&lt;/a&gt;.</source>
          <target state="translated">スクリプトは、サーバータグなどのいくつかの高度な機能にアクセスする唯一の方法でもあり、サーバーを物理的なデータセンターに関連付けるなど、レプリケーションの目的でサーバーをグループ化できます。詳細については、&lt;a href=&quot;../sharding-and-replication/index&quot;&gt;シャーディングとレプリケーション&lt;/a&gt;の「詳細設定」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="e0672c0c8416fc438be3b303ceef330bdab976b4" translate="yes" xml:space="preserve">
          <source>Seagate Nytro WarpDrive BLP4-1600 storage</source>
          <target state="translated">シーゲイトNytro WarpDrive BLP4-1600ストレージ</target>
        </trans-unit>
        <trans-unit id="d0fdab3c7cf84c4001e23486595c30f75a5024ad" translate="yes" xml:space="preserve">
          <source>Secondary indexes are data structures that improve the speed of many read queries at the slight cost of increased storage space and decreased write performance.</source>
          <target state="translated">セカンダリインデックスは、ストレージスペースの増加と書き込みパフォーマンスの低下を多少犠牲にしても、多くの読み取りクエリの速度を向上させるデータ構造です。</target>
        </trans-unit>
        <trans-unit id="8c7224c2e5fff28a7f3c317eb4d8793a788ef45a" translate="yes" xml:space="preserve">
          <source>Secondary indexes can be used in extremely powerful ways with &lt;code&gt;between&lt;/code&gt; and other commands; read the full article on &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;secondary indexes&lt;/a&gt; for examples using boolean operations, &lt;code&gt;contains&lt;/code&gt; and more.</source>
          <target state="translated">セカンダリインデックスは &lt;code&gt;between&lt;/code&gt; と他のコマンド間で非常に強力な方法で使用できます。ブール演算、 &lt;code&gt;contains&lt;/code&gt; などを使用した例については、&lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;セカンダリインデックス&lt;/a&gt;に関する記事全体をお読みください。</target>
        </trans-unit>
        <trans-unit id="4eba5ab82d78a89eda9fb209fef681f5287e83f5" translate="yes" xml:space="preserve">
          <source>Secondary indexes can be used in extremely powerful ways with &lt;code&gt;getAll&lt;/code&gt; and other commands; read the full article on &lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;secondary indexes&lt;/a&gt; for examples using boolean operations, &lt;code&gt;contains&lt;/code&gt; and more.</source>
          <target state="translated">セカンダリインデックスは、 &lt;code&gt;getAll&lt;/code&gt; やその他のコマンドで非常に強力な方法で使用できます。ブール演算、 &lt;code&gt;contains&lt;/code&gt; などを使用した例については、&lt;a href=&quot;../../../docs/secondary-indexes/javascript/index&quot;&gt;セカンダリインデックス&lt;/a&gt;に関する記事全体をお読みください。</target>
        </trans-unit>
        <trans-unit id="7982e9ee250aad3eb15a6e1fa6db7cfdc26cb2f8" translate="yes" xml:space="preserve">
          <source>Secondary indexes will not store &lt;code&gt;null&lt;/code&gt; values or objects. Thus, the results of a command such as:</source>
          <target state="translated">セカンダリインデックスは &lt;code&gt;null&lt;/code&gt; 値またはオブジェクトを格納しません。したがって、次のようなコマンドの結果：</target>
        </trans-unit>
        <trans-unit id="8244783aa1946897f99cef0c73eb2f5a4dfb4197" translate="yes" xml:space="preserve">
          <source>Secure your cluster</source>
          <target state="translated">クラスタの安全性を確保する</target>
        </trans-unit>
        <trans-unit id="b8c1351559faf4d2f8b669b12ea7d407f5666309" translate="yes" xml:space="preserve">
          <source>Securing the driver port</source>
          <target state="translated">ドライバポートの確保</target>
        </trans-unit>
        <trans-unit id="a1d993407c8376c1672bf0c5a4284232354399e2" translate="yes" xml:space="preserve">
          <source>Securing your cluster</source>
          <target state="translated">クラスタの保護</target>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">Security</target>
        </trans-unit>
        <trans-unit id="69a94e079c6f72dd821a2916438daf4debbe798b" translate="yes" xml:space="preserve">
          <source>Security options</source>
          <target state="translated">セキュリティオプション</target>
        </trans-unit>
        <trans-unit id="6b8e42cb98e4e465a60e20b63d2bd2161876bca6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../../docs/external-api-access/index&quot;&gt;the tutorial&lt;/a&gt; on &lt;code&gt;r.http&lt;/code&gt; for more examples on how to use this command.</source>
          <target state="translated">このコマンドの使用方法の例について&lt;a href=&quot;../../../docs/external-api-access/index&quot;&gt;は&lt;/a&gt;、 &lt;code&gt;r.http&lt;/code&gt; のチュートリアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="2b99ffebc80bfe3b34e15d2ac5f938bedd9c52f7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../install-drivers/index&quot;&gt;driver install instructions&lt;/a&gt; for your language.</source>
          <target state="translated">ご使用の言語用の&lt;a href=&quot;../install-drivers/index&quot;&gt;ドライバーのインストール手順&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e659a7b1fb270abb215eabd50ddcef317a46e407" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://rethinkdb.com/install&quot;&gt;server install instructions&lt;/a&gt; for your platform.</source>
          <target state="translated">ご使用のプラットフォームの&lt;a href=&quot;https://rethinkdb.com/install&quot;&gt;サーバーインストール手順&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4fdf7b2ad01bc194f00eacfd1ee38e4d3b63dcb2" translate="yes" xml:space="preserve">
          <source>See cat pictures shared on Instagram in real time.</source>
          <target state="translated">インスタグラムでシェアされた猫の写真をリアルタイムで見ることができます。</target>
        </trans-unit>
        <trans-unit id="0c2ba2a4f667941be3cc9b497e222e28d10a7c74" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../data-types/index&quot;&gt;data type documentation&lt;/a&gt; for more detail about streams.</source>
          <target state="translated">ストリームの詳細については、&lt;a href=&quot;../../data-types/index&quot;&gt;データ型のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9c48c84da1b5e5392c19334e8b0bbaa319e703a8" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../index_status/index&quot;&gt;indexStatus&lt;/a&gt; documentation for a description of the field values.</source>
          <target state="translated">フィールド値の説明については、&lt;a href=&quot;../index_status/index&quot;&gt;indexStatusの&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="bde140c936811da044b952e743be8767f0ecb2cc" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../status/index&quot;&gt;status&lt;/a&gt; command for an explanation of the objects returned in the &lt;code&gt;old_val&lt;/code&gt; and &lt;code&gt;new_val&lt;/code&gt; fields.</source>
          <target state="translated">&lt;code&gt;old_val&lt;/code&gt; および &lt;code&gt;new_val&lt;/code&gt; フィールドで返されるオブジェクトの説明については、&lt;a href=&quot;../status/index&quot;&gt;status&lt;/a&gt;コマンドを参照してください。</target>
        </trans-unit>
        <trans-unit id="629e4746d16af85c9b3fd8d43b27fa95f2889be7" translate="yes" xml:space="preserve">
          <source>See the code &amp;raquo;</source>
          <target state="translated">コードを見る&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="dcd7ebe20b693b22889b95a15eca49030584ea07" translate="yes" xml:space="preserve">
          <source>See the source &amp;raquo;</source>
          <target state="translated">ソースを見る&amp;raquo;</target>
        </trans-unit>
        <trans-unit id="ab287e3400037660977c93949d06c8794701e08d" translate="yes" xml:space="preserve">
          <source>Select &amp;ldquo;RethinkDB.&amp;rdquo;</source>
          <target state="translated">「RethinkDB」を選択します。</target>
        </trans-unit>
        <trans-unit id="49ff71acb246cc6a63a1ed20135722e307015e4a" translate="yes" xml:space="preserve">
          <source>Select &lt;strong&gt;Custom TCP rule&lt;/strong&gt;.</source>
          <target state="translated">[ &lt;strong&gt;カスタムTCPルール]を&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="77ed0e41cf00adc048443a4c59a481c886d9dcf2" translate="yes" xml:space="preserve">
          <source>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</source>
          <target state="translated">一様なランダム分布を持つ配列から与えられた数の要素を選択する。選択は置換せずに行われる。</target>
        </trans-unit>
        <trans-unit id="cdf1371e4dd147b3db77a3f68e9797466ae68a9a" translate="yes" xml:space="preserve">
          <source>Select the &lt;strong&gt;1-Click Launch&lt;/strong&gt; tab, select the size of the instance you wish to configure, and click on the &lt;strong&gt;Launch with 1-Click&lt;/strong&gt; button on the right.</source>
          <target state="translated">[ &lt;strong&gt;ワンクリックで起動&lt;/strong&gt; ]タブを選択し、構成するインスタンスのサイズを選択して、右側の&lt;strong&gt;[ワンクリックで&lt;/strong&gt;起動]ボタンを&lt;strong&gt;クリックし&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="24ef151114580dc0d68467e5ab448d8c09efd89c" translate="yes" xml:space="preserve">
          <source>Select the security group that your instances belong to and open the &lt;strong&gt;Inbound&lt;/strong&gt; tab in the bottom half of the page.</source>
          <target state="translated">インスタンスが属するセキュリティグループを選択し、ページの下半分にある[ &lt;strong&gt;受信&lt;/strong&gt; ]タブを開きます。</target>
        </trans-unit>
        <trans-unit id="af912eddd3068889909f441f05cc66e7d588440d" translate="yes" xml:space="preserve">
          <source>Selecting Data</source>
          <target state="translated">データの選択</target>
        </trans-unit>
        <trans-unit id="cfe3f3de9a7d6d7478e815f2c854155e18ec593b" translate="yes" xml:space="preserve">
          <source>Selecting data</source>
          <target state="translated">データの選択</target>
        </trans-unit>
        <trans-unit id="01e78f2f17937f1b67c1972da29be60ea26dacdb" translate="yes" xml:space="preserve">
          <source>Selecting workloads and hardware</source>
          <target state="translated">ワークロードとハードウェアの選択</target>
        </trans-unit>
        <trans-unit id="0e06550e71b1bb97d074f86a8f3eff781b17db2b" translate="yes" xml:space="preserve">
          <source>Selections: &lt;code&gt;between&lt;/code&gt;, &lt;code&gt;get_all&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;</source>
          <target state="translated">選択： &lt;code&gt;between&lt;/code&gt; 、 &lt;code&gt;get_all&lt;/code&gt; 、 &lt;code&gt;filter&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c274dc21c7abbd576e80808d73c6a883b8fc67d" translate="yes" xml:space="preserve">
          <source>Semantic command</source>
          <target state="translated">セマンティックコマンド</target>
        </trans-unit>
        <trans-unit id="5340a0e3ba910c6ba58f50f0b02149f97571010b" translate="yes" xml:space="preserve">
          <source>Send the authorization key as an ASCII string. &lt;em&gt;If there is no authorization key, skip this step.&lt;/em&gt;</source>
          <target state="translated">認証キーをASCII文字列として送信します。&lt;em&gt;認証キーがない場合は、この手順をスキップしてください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="740b49c8e2030bbb3b6d6adfaf0a7f11772bbe3d" translate="yes" xml:space="preserve">
          <source>Send the following data to the server:</source>
          <target state="translated">以下のデータをサーバに送信します。</target>
        </trans-unit>
        <trans-unit id="efa93b393c3d5d51c8ab31aa67430179ff81d156" translate="yes" xml:space="preserve">
          <source>Send the length of the authorization key, as a 32-bit little-endian integer (4 bytes). Send &lt;code&gt;0&lt;/code&gt; if there is no authorization key.</source>
          <target state="translated">認証キーの長さを32ビットのリトルエンディアン整数（4バイト）として送信します。認証キーがない場合は &lt;code&gt;0&lt;/code&gt; を送信します。</target>
        </trans-unit>
        <trans-unit id="05226713ff51e987c345dc09ac55543399794d44" translate="yes" xml:space="preserve">
          <source>Send the message</source>
          <target state="translated">メッセージを送る</target>
        </trans-unit>
        <trans-unit id="4da6808722e9c55a13e5d55b1b3fcad59e4b38ad" translate="yes" xml:space="preserve">
          <source>Send the protocol type, as a 32-bit little-endian integer (4 bytes). Protocol types are defined in the &lt;code&gt;Protocol&lt;/code&gt; enum in &lt;code&gt;ql2.proto&lt;/code&gt;. New drivers should use JSON, &lt;code&gt;0x7e6970c7&lt;/code&gt;.</source>
          <target state="translated">プロトコルタイプを32ビットリトルエンディアン整数（4バイト）として送信します。プロトコルタイプは、 &lt;code&gt;ql2.proto&lt;/code&gt; の &lt;code&gt;Protocol&lt;/code&gt; 列挙で定義されています。新しいドライバーはJSON、 &lt;code&gt;0x7e6970c7&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d87012444da097dfb39f95359e77788d4b8c6f34" translate="yes" xml:space="preserve">
          <source>Send the protocol version, as a 32-bit little-endian integer (4 bytes). &lt;em&gt;Note:&lt;/em&gt; All instructions below assume a protocol of &lt;code&gt;V0_3&lt;/code&gt; or higher. The current protocol as of RethinkDB 2.0 is &lt;code&gt;V0_4&lt;/code&gt;.</source>
          <target state="translated">プロトコルバージョンを32ビットのリトルエンディアン整数（4バイト）として送信します。&lt;em&gt;注：&lt;/em&gt;以下のすべての手順は、 &lt;code&gt;V0_3&lt;/code&gt; 以上のプロトコルを想定しています。RethinkDB 2.0の現在のプロトコルは &lt;code&gt;V0_4&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0edc082b63c1cd873d382eccbdf135d9f6ac595b" translate="yes" xml:space="preserve">
          <source>Sending a query to the server takes the following steps:</source>
          <target state="translated">サーバーにクエリを送信するには、以下の手順が必要です。</target>
        </trans-unit>
        <trans-unit id="d443e709debab14709d7be0d682a089ecefe0676" translate="yes" xml:space="preserve">
          <source>Sending queries</source>
          <target state="translated">クエリの送信</target>
        </trans-unit>
        <trans-unit id="e46be1417c76343bc1c3aa2b1e53190674bcf776" translate="yes" xml:space="preserve">
          <source>Serialize the query</source>
          <target state="translated">クエリをシリアライズする</target>
        </trans-unit>
        <trans-unit id="2a0b4e570611bbb4fac2919e233436966085b203" translate="yes" xml:space="preserve">
          <source>Serialize the query as UTF8-encoded JSON</source>
          <target state="translated">クエリをUTF8エンコードされたJSONとしてシリアライズします。</target>
        </trans-unit>
        <trans-unit id="22560a188183eb4938827af6f2ba7b1b011ef57a" translate="yes" xml:space="preserve">
          <source>Serialize the result as the function body</source>
          <target state="translated">結果を関数本体としてシリアライズする</target>
        </trans-unit>
        <trans-unit id="e801f1e48565ad9f05ad5d47ade5d22a1e958713" translate="yes" xml:space="preserve">
          <source>Serializing BINARY</source>
          <target state="translated">BINARYのシリアライズ</target>
        </trans-unit>
        <trans-unit id="dd029cb1a0d313fcf58a06341f2e7bdf14cdb24d" translate="yes" xml:space="preserve">
          <source>Serializing FUNCALL (r.do)</source>
          <target state="translated">連載FUNCALL (r.do)</target>
        </trans-unit>
        <trans-unit id="6f6ea3f30e1c4a9dd85cfbac7843347f0e57f7af" translate="yes" xml:space="preserve">
          <source>Serializing IMPLICIT_VAR (r.row)</source>
          <target state="translated">IMPLICIT_VAR(r.row)のシリアライズ</target>
        </trans-unit>
        <trans-unit id="9362048d7a1ed20573c1df7d6139cfc0122f7c7f" translate="yes" xml:space="preserve">
          <source>Serializing functions depends heavily on your driver&amp;rsquo;s language. The JavaScript driver does it this way:</source>
          <target state="translated">関数のシリアル化は、ドライバーの言語に大きく依存します。JavaScriptドライバーは次のように実行します。</target>
        </trans-unit>
        <trans-unit id="097cf93c17b852922e8cd146b12ffe5341e6bbc2" translate="yes" xml:space="preserve">
          <source>Serializing queries</source>
          <target state="translated">クエリのシリアライズ</target>
        </trans-unit>
        <trans-unit id="b4269c5c84242504fd47a52d752db994a859d003" translate="yes" xml:space="preserve">
          <source>Server name options</source>
          <target state="translated">サーバー名のオプション</target>
        </trans-unit>
        <trans-unit id="71dcf72bf9cc6e1c264c8103df146d0cb981e165" translate="yes" xml:space="preserve">
          <source>Server tags</source>
          <target state="translated">サーバータグ</target>
        </trans-unit>
        <trans-unit id="92d0a01058b90937ea648c34a5eafe7e961cb37e" translate="yes" xml:space="preserve">
          <source>Server-side execution</source>
          <target state="translated">サーバーサイド実行</target>
        </trans-unit>
        <trans-unit id="052415886e7845a7d8c9677f78a612cf9388c2e4" translate="yes" xml:space="preserve">
          <source>Service options</source>
          <target state="translated">サービスオプション</target>
        </trans-unit>
        <trans-unit id="787ea64c257fea9081ea48830032783bdd035b44" translate="yes" xml:space="preserve">
          <source>Set User/Group options</source>
          <target state="translated">ユーザー/グループオプションの設定</target>
        </trans-unit>
        <trans-unit id="11b1bdd58898b94a3331dd7009df636000e030ca" translate="yes" xml:space="preserve">
          <source>Set a user account and password for your application</source>
          <target state="translated">アプリケーションのユーザーアカウントとパスワードを設定します。</target>
        </trans-unit>
        <trans-unit id="3720b938334b35818a908635b19bf42e1dc3cfc4" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;Label&lt;/code&gt; key value to the name of the file (e.g., &lt;code&gt;com.rethinkdb.server2.plist&lt;/code&gt;).</source>
          <target state="translated">設定する &lt;code&gt;Label&lt;/code&gt; ファイルの名前（例えば、キーに値を &lt;code&gt;com.rethinkdb.server2.plist&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bf4ec08a934fec647917f8442a9eb64a83b5273a" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;ProgramArguments&lt;/code&gt; key to a new configuration file (e.g., &lt;code&gt;/etc/rethinkdb2.conf&lt;/code&gt;).</source>
          <target state="translated">設定し &lt;code&gt;ProgramArguments&lt;/code&gt; の新しい設定ファイル（例えば、キーに &lt;code&gt;/etc/rethinkdb2.conf&lt;/code&gt; を）。</target>
        </trans-unit>
        <trans-unit id="8f3c03334a02bba0274f2e4013da9aefe549f42d" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;StandardOutPath&lt;/code&gt; and &lt;code&gt;StandardErrorPath&lt;/code&gt; keys to a new log file.</source>
          <target state="translated">設定し &lt;code&gt;StandardOutPath&lt;/code&gt; と &lt;code&gt;StandardErrorPath&lt;/code&gt; 新しいログファイルにキーを。</target>
        </trans-unit>
        <trans-unit id="049d191886309580e64950b88aef06ddc12854ad" translate="yes" xml:space="preserve">
          <source>Set the number of shards and replicas you would like.</source>
          <target state="translated">希望する破片やレプリカの数を設定します。</target>
        </trans-unit>
        <trans-unit id="259bb4847964abaa06f8a09e3bf87cfbfe2f039f" translate="yes" xml:space="preserve">
          <source>Set this file to be owned by the &lt;code&gt;root&lt;/code&gt; user:</source>
          <target state="translated">このファイルを &lt;code&gt;root&lt;/code&gt; ユーザーが所有するように設定します。</target>
        </trans-unit>
        <trans-unit id="484f40f1ca8f5abf97858ccdf6eaece611f3121b" translate="yes" xml:space="preserve">
          <source>Setting up VPC security groups</source>
          <target state="translated">VPCセキュリティグループの設定</target>
        </trans-unit>
        <trans-unit id="72717ced9f39074f0e308322cf67ec080b85f4cd" translate="yes" xml:space="preserve">
          <source>Setting up high availability</source>
          <target state="translated">高可用性の設定</target>
        </trans-unit>
        <trans-unit id="c7f73bb54d928922c3838bb789ee9fb8a5b1eb37" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="translated">Settings</target>
        </trans-unit>
        <trans-unit id="b40f8c6b312aa78981283ac7bcf07d39753f5f58" translate="yes" xml:space="preserve">
          <source>Sharding</source>
          <target state="translated">Sharding</target>
        </trans-unit>
        <trans-unit id="8b825f365b5f5094480702aedaba3f3404b88156" translate="yes" xml:space="preserve">
          <source>Sharding and replication</source>
          <target state="translated">シャーディングとレプリケーション</target>
        </trans-unit>
        <trans-unit id="9675bc0d332a6ee2cdd0a92eee926c14735851f9" translate="yes" xml:space="preserve">
          <source>Sharding and replication can be controlled through the &lt;code&gt;table_config&lt;/code&gt; table, along with the more advanced settings of write acknowledgements and durability. Tables can also be renamed by modifying their rows. A typical row in the &lt;code&gt;table_config&lt;/code&gt; table will look like this:</source>
          <target state="translated">シャーディングとレプリケーションは、書き込み確認と耐久性のより高度な設定とともに、 &lt;code&gt;table_config&lt;/code&gt; テーブルを通じて制御できます。テーブルは、行を変更することによって名前を変更することもできます。 &lt;code&gt;table_config&lt;/code&gt; テーブルの一般的な行は次のようになります。</target>
        </trans-unit>
        <trans-unit id="65fdb932a6e83c2148674a2aebcd5a18d8e5feee" translate="yes" xml:space="preserve">
          <source>Sharding and replication is configured through &lt;em&gt;table configurations,&lt;/em&gt; which let you simply specify the number of shards and replicas per table or for all tables within a database. Users do not need to manually associate servers with tables. RethinkDB uses a set of heuristics to attempt to satisfy table configurations in an optimal way. It will copy data for new replicas from an available server, evenly distribute replicas of the data across the cluster, try to distribute the load evenly, and so on.</source>
          <target state="translated">シャーディングとレプリケーションは&lt;em&gt;テーブル&lt;/em&gt;構成を介して&lt;em&gt;構成されます。&lt;/em&gt;これにより、&lt;em&gt;テーブル&lt;/em&gt;ごとまたはデータベース内のすべてのテーブルのシャードとレプリカの数を簡単に指定できます。ユーザーは手動でサーバーをテーブルに関連付ける必要はありません。RethinkDBは、ヒューリスティックのセットを使用して、最適な方法でテーブル構成を満たすことを試みます。利用可能なサーバーから新しいレプリカのデータをコピーし、データのレプリカをクラスター全体に均等に分散し、負荷を均等に分散しようとします。</target>
        </trans-unit>
        <trans-unit id="ca374faf5075c1fff58817a8737a9b8341f7b444" translate="yes" xml:space="preserve">
          <source>Sharding and replication via ReQL</source>
          <target state="translated">ReQLによるシャーディングとレプリケーション</target>
        </trans-unit>
        <trans-unit id="4675658ba485e5ab233faf96f4b4bd60bdbc1d69" translate="yes" xml:space="preserve">
          <source>Sharding and replication via the web console</source>
          <target state="translated">ウェブコンソールを介したシャーディングとレプリケーション</target>
        </trans-unit>
        <trans-unit id="0f61896f7a3a3b22c994b7290ce915514b2ffb18" translate="yes" xml:space="preserve">
          <source>Similarly, you can use the &lt;code&gt;r.or&lt;/code&gt; command to filter based on one of many conditions.</source>
          <target state="translated">同様に、 &lt;code&gt;r.or&lt;/code&gt; コマンドを使用して、多くの条件の1つに基づいてフィルタリングできます。</target>
        </trans-unit>
        <trans-unit id="4ead99c11dfb522b4ed24272cb8935d1b0c95297" translate="yes" xml:space="preserve">
          <source>Simple creation and insertion</source>
          <target state="translated">簡単な作成と挿入</target>
        </trans-unit>
        <trans-unit id="b49b76d7f46024bae079a561e12707a34bb17cda" translate="yes" xml:space="preserve">
          <source>Simple indexes</source>
          <target state="translated">シンプルなインデックス</target>
        </trans-unit>
        <trans-unit id="b9b59b87ad4c0b4b1b2c1e4f4e9e461f32d5aa30" translate="yes" xml:space="preserve">
          <source>Simple queries on a superheroes dataset.</source>
          <target state="translated">スーパーヒーローのデータセットの簡単なクエリ。</target>
        </trans-unit>
        <trans-unit id="f9e72abc4ccbeabab6d891f4fb04960cf410c43e" translate="yes" xml:space="preserve">
          <source>Simple usage</source>
          <target state="translated">簡単な使い方</target>
        </trans-unit>
        <trans-unit id="8ba0e1b4f1c2ba72682c0924cd3042f72176d882" translate="yes" xml:space="preserve">
          <source>Simply specify the field using the &lt;code&gt;row&lt;/code&gt; command instead of a string.</source>
          <target state="translated">文字列の代わりに &lt;code&gt;row&lt;/code&gt; コマンドを使用してフィールドを指定するだけです。</target>
        </trans-unit>
        <trans-unit id="e78ef142771d107595b0bc8cf20eb66722ed8ac8" translate="yes" xml:space="preserve">
          <source>Simulates a mixed read/write workload with equally many writes as reads</source>
          <target state="translated">読み取りと書き込みの混在したワークロードを、読み取りと書き込みが同じくらいの数でシミュレートします。</target>
        </trans-unit>
        <trans-unit id="1fdb1c708a30ef631fc8da75683628bb2d960c6a" translate="yes" xml:space="preserve">
          <source>Simulates a read-only workload</source>
          <target state="translated">読み取り専用のワークロードをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="3f5ef2e223d333ea61560c000796e68942bc4eab" translate="yes" xml:space="preserve">
          <source>Sinatra</source>
          <target state="translated">Sinatra</target>
        </trans-unit>
        <trans-unit id="b19b761fc2db7f1d9136da17083f2446b67beb3a" translate="yes" xml:space="preserve">
          <source>Since NoBrainer&amp;rsquo;s &lt;code&gt;has_many&lt;/code&gt; associations are read-only, handling nested resources changes a little bit. For example, if &lt;code&gt;Comments&lt;/code&gt; are nested in &lt;code&gt;Articles&lt;/code&gt;, the comment form in the Article view would look like this:</source>
          <target state="translated">NoBrainerの &lt;code&gt;has_many&lt;/code&gt; アソシエーションは読み取り専用であるため、ネストされたリソースの処理は少し変更されます。たとえば、 &lt;code&gt;Comments&lt;/code&gt; が &lt;code&gt;Articles&lt;/code&gt; にネストされている場合、Articleビューのコメントフォームは次のようになります。</target>
        </trans-unit>
        <trans-unit id="dea68530ec6917cefc65a58fb3ef6ae8d193b4ea" translate="yes" xml:space="preserve">
          <source>Since automatic failover requires a majority of servers for a table to be available, it requires a minimum of three servers to be involved. In a two-machine cluster, automatic failover will never occur, and tables will lose availability for writes if either machine loses connectivity. In this case, if the machine cannot be reconnected, you must fix the problem manually using the emergency repair option of &lt;code&gt;reconfigure&lt;/code&gt;.</source>
          <target state="translated">自動フェイルオーバーでは、テーブルを使用できるようにするために大多数のサーバーが必要になるため、最低3台のサーバーが関与する必要があります。2台のマシンのクラスターでは、自動フェイルオーバーは発生せず、いずれかのマシンが接続を失うと、テーブルは書き込みの可用性を失います。この場合、マシンを再接続できない場合は、 &lt;code&gt;reconfigure&lt;/code&gt; の緊急修復オプションを使用して手動で問題を修正する必要があります。</target>
        </trans-unit>
        <trans-unit id="c04f4c8a74a44e7cb0a881e32ee9d07a7e1b6956" translate="yes" xml:space="preserve">
          <source>Since changefeeds are unidirectional with no acknowledgement returned from clients, they cannot guarantee delivery. If you need real-time updating with delivery guarantees, consider using a model that distributes to the clients through a message broker such as &lt;a href=&quot;../../rabbitmq/javascript/index&quot;&gt;RabbitMQ&lt;/a&gt;.</source>
          <target state="translated">変更フィードは一方向であり、クライアントから返される確認応答がないため、配信を保証することはできません。配信保証付きのリアルタイム更新が必要な場合は、&lt;a href=&quot;../../rabbitmq/javascript/index&quot;&gt;RabbitMQ&lt;/a&gt;などのメッセージブローカーを介してクライアントに配布するモデルの使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="cfa008fce6f7f4612e2eead0a4d7c799cf0ca174" translate="yes" xml:space="preserve">
          <source>Since it&amp;rsquo;s available online, you can import our sample data set just by creating a table and importing it with &lt;a href=&quot;../http/index&quot;&gt;http&lt;/a&gt;. Just execute these commands directly in the Data Explorer.</source>
          <target state="translated">オンラインで利用できるので、テーブルを作成して&lt;a href=&quot;../http/index&quot;&gt;httpで&lt;/a&gt;インポートするだけで、サンプルデータセットをインポートできます。これらのコマンドをデータエクスプローラーで直接実行するだけです。</target>
        </trans-unit>
        <trans-unit id="28e09663b14b74fc50bbdf52af54ef70c8ff5d0a" translate="yes" xml:space="preserve">
          <source>Since primary keys are unique, the &lt;code&gt;get&lt;/code&gt; command returns a single document. This way we can retrieve the document directly without converting a cursor to an array.</source>
          <target state="translated">主キーは一意である &lt;code&gt;get&lt;/code&gt; 、getコマンドは単一のドキュメントを返します。このようにして、カーソルを配列に変換せずにドキュメントを直接取得できます。</target>
        </trans-unit>
        <trans-unit id="eded6ab1c8bba9391d0bc0efe3fde1c3a7029bd5" translate="yes" xml:space="preserve">
          <source>Since the backup process uses client drivers, it takes advantage of RethinkDB&amp;rsquo;s concurrency. While it will use some cluster resources, it won&amp;rsquo;t lock out any clients, and it can be safely run on a live cluster.</source>
          <target state="translated">バックアッププロセスはクライアントドライバーを使用するため、RethinkDBの同時実行性を利用します。一部のクラスターリソースを使用しますが、クライアントをロックアウトすることはなく、稼働中のクラスターで安全に実行できます。</target>
        </trans-unit>
        <trans-unit id="646f2ddb07a63e77664dbfdf8026cf82e89c96af" translate="yes" xml:space="preserve">
          <source>Since the table might contain a large number of documents, the database returns a cursor object. As you iterate through the cursor, the server will send documents to the client in batches as they are requested. We only have three documents in our example, so we can safely retrieve all the documents at once. The &lt;code&gt;toArray&lt;/code&gt; function automatically iterates through the cursor and puts the documents into a JavaScript array.</source>
          <target state="translated">テーブルには多数のドキュメントが含まれる可能性があるため、データベースはカーソルオブジェクトを返します。カーソルを反復処理すると、サーバーは要求に応じてドキュメントをバッチでクライアントに送信します。この例では3つのドキュメントしかないため、一度にすべてのドキュメントを安全に取得できます。 &lt;code&gt;toArray&lt;/code&gt; の機能は自動的にカーソルを反復処理し、JavaScriptの配列にドキュメントを置きます。</target>
        </trans-unit>
        <trans-unit id="461e45707281cf6856842c50c790ea612c5a6862" translate="yes" xml:space="preserve">
          <source>Since this query is pure ReQL, the entire query will be distributed efficiently over the cluster without any computation being done on the client.</source>
          <target state="translated">このクエリは純粋なReQLなので、クライアント上で計算を行うことなく、クエリ全体がクラスタ上に効率的に分散されます。</target>
        </trans-unit>
        <trans-unit id="d08c9e61a015681b5d3f9c65c2e3d1116acb06fd" translate="yes" xml:space="preserve">
          <source>Since we changed three documents, the result should look like this:</source>
          <target state="translated">3つのドキュメントを変更したので、結果は以下のようになるはずです。</target>
        </trans-unit>
        <trans-unit id="de5b0b24c773e307562dc43accdfc9204b771ec8" translate="yes" xml:space="preserve">
          <source>Since we have two authors with less than two posts, the result is:</source>
          <target state="translated">投稿数が2件以下の作者が2人いるので、結果的には</target>
        </trans-unit>
        <trans-unit id="8922e181eb91cb6fa5246f74862ea665af4e7901" translate="yes" xml:space="preserve">
          <source>Since we only updated one document, we get back this object:</source>
          <target state="translated">1つのドキュメントを更新しただけなので、このオブジェクトが返ってきます。</target>
        </trans-unit>
        <trans-unit id="eeaf9297d721b8e99b43d24aa5fc70dd66377540" translate="yes" xml:space="preserve">
          <source>Since you&amp;rsquo;ll be doing more manipulation on the data, you might want to store the results of an API call in the database. Let&amp;rsquo;s create a table &lt;code&gt;stargazers&lt;/code&gt; and insert the RethinkDB stargazers into this table:</source>
          <target state="translated">データをさらに操作するので、API呼び出しの結果をデータベースに保存したい場合があります。テーブル &lt;code&gt;stargazers&lt;/code&gt; を作成し、RethinkDBスターゲイザーをこのテーブルに挿入します。</target>
        </trans-unit>
        <trans-unit id="b9140d15368b4c6388b91b301bb59e02a57255f2" translate="yes" xml:space="preserve">
          <source>Skip a number of elements from the head of the sequence.</source>
          <target state="translated">シーケンスの先頭からいくつかの要素をスキップします。</target>
        </trans-unit>
        <trans-unit id="11669c94403e009f8888a5f31c24059deacb9444" translate="yes" xml:space="preserve">
          <source>Small documents of no more than 250 bytes (including encoding overhead) are stored &amp;ldquo;in line&amp;rdquo; in the primary index tree. Many such documents can share a single 4 KB block.</source>
          <target state="translated">250バイト以下の小さなドキュメント（エンコードのオーバーヘッドを含む）は、プライマリインデックスツリーに「インライン」で格納されます。このようなドキュメントの多くは、1つの4 KBブロックを共有できます。</target>
        </trans-unit>
        <trans-unit id="66e287db281bba04ed3fbc4687e72ca03b461a59" translate="yes" xml:space="preserve">
          <source>Smaller result sets can be turned into an array directly, with native language constructs in Python and Ruby (&lt;code&gt;list(players)&lt;/code&gt; and &lt;code&gt;players.to_a&lt;/code&gt; respectively) or ReQL commands in JavaScript and Java (&lt;code&gt;players.toArray()&lt;/code&gt; and &lt;code&gt;players.toList()&lt;/code&gt; respectively; see &lt;a href=&quot;../../api/javascript/to_array/index&quot;&gt;toArray&lt;/a&gt; and &lt;a href=&quot;https://rethinkdb.com/api/java/to_array/&quot;&gt;toList&lt;/a&gt; documentation).</source>
          <target state="translated">小さな結果セットは、PythonとRubyでネイティブ言語構造（と、直接配列に変換することができ &lt;code&gt;list(players)&lt;/code&gt; と &lt;code&gt;players.to_a&lt;/code&gt; JavaScriptとJava（登録でそれぞれ）またはReQLコマンド &lt;code&gt;players.toArray()&lt;/code&gt; と &lt;code&gt;players.toList()&lt;/code&gt; それぞれ; &lt;a href=&quot;../../api/javascript/to_array/index&quot;&gt;toArray&lt;/a&gt;および&lt;a href=&quot;https://rethinkdb.com/api/java/to_array/&quot;&gt;toListの&lt;/a&gt;ドキュメントを参照してください）。</target>
        </trans-unit>
        <trans-unit id="0d0c98658c204f1e54e4cbe7f13aa85d03ebbf38" translate="yes" xml:space="preserve">
          <source>So far we&amp;rsquo;ve seen only simple queries without conditions. ReQL supports a familiar syntax for building more advanced queries:</source>
          <target state="translated">これまでのところ、条件のない単純なクエリのみを見てきました。ReQLは、より高度なクエリを構築するための使い慣れた構文をサポートしています。</target>
        </trans-unit>
        <trans-unit id="679b56c74eaec9a82e1ba0243df0e7b84b448cc7" translate="yes" xml:space="preserve">
          <source>So we can see IMDb&amp;rsquo;s number one movie with &lt;code&gt;filter({rank: 1})&lt;/code&gt;:</source>
          <target state="translated">したがって、 &lt;code&gt;filter({rank: 1})&lt;/code&gt; 付きのIMDbのナンバー1ムービーを見ることができます（{rank：1}）：</target>
        </trans-unit>
        <trans-unit id="a2233aa4b211f8f385bb078bd9f37203992d460f" translate="yes" xml:space="preserve">
          <source>So, for example, if we wanted to send a notification that Batman and the Joker had a fight, we might publish with the tags &lt;code&gt;#superhero&lt;/code&gt;, &lt;code&gt;#fight&lt;/code&gt;, and &lt;code&gt;#supervillain&lt;/code&gt;:</source>
          <target state="translated">したがって、たとえば、バットマンとジョーカーの戦いがあったという通知を送信したい場合は、 &lt;code&gt;#fight&lt;/code&gt; &lt;code&gt;#superhero&lt;/code&gt; 、#fight、および &lt;code&gt;#supervillain&lt;/code&gt; というタグを付けて公開します。</target>
        </trans-unit>
        <trans-unit id="eba8326cc93ad5c924b37021c049a63bed74a15f" translate="yes" xml:space="preserve">
          <source>So, our initial example query of:</source>
          <target state="translated">ということで、最初の例のクエリは</target>
        </trans-unit>
        <trans-unit id="2c2be06fa2bad03ab6e4aac214b80b94243e8bb0" translate="yes" xml:space="preserve">
          <source>So, the data we send to the server is as follows:</source>
          <target state="translated">そこで、サーバーに送るデータは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="925f0ecb819a75da4d24fd9a6b368e3d9d210d0c" translate="yes" xml:space="preserve">
          <source>Socks host: &lt;code&gt;localhost&lt;/code&gt;</source>
          <target state="translated">靴下ホスト： &lt;code&gt;localhost&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f3d2add8cfb71350f0a21731bae9a1fcd1c6f911" translate="yes" xml:space="preserve">
          <source>Some commands (&lt;code&gt;orderBy&lt;/code&gt; and &lt;code&gt;between&lt;/code&gt;) return a data type similar to a selection called a &lt;strong&gt;table_slice&lt;/strong&gt;. In most cases a table_slice behaves identically to a selection, but &lt;code&gt;between&lt;/code&gt; can only be called on a table or a table_slice, not any other kind of selection.</source>
          <target state="translated">一部のコマンド（ &lt;code&gt;orderBy&lt;/code&gt; および &lt;code&gt;between&lt;/code&gt; ）は、&lt;strong&gt;table_slice&lt;/strong&gt;と呼ばれる選択に類似したデータ型を&lt;strong&gt;返し&lt;/strong&gt;ます。ほとんどの場合、table_sliceは、選択に同じように動作しますが、 &lt;code&gt;between&lt;/code&gt; 専用テーブルまたはtable_slice、選択のない他の種類で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="920b523b3dbbdb44d9018758c80fc8718d1fcd73" translate="yes" xml:space="preserve">
          <source>Some native ReQL data types have no direct JSON representations. These are implemented as &lt;em&gt;pseudo types,&lt;/em&gt; JSON objects with the special key &lt;code&gt;$reql_type$&lt;/code&gt;. The three official ReQL drivers convert date and binary types to pseudo types.</source>
          <target state="translated">一部のネイティブReQLデータ型には、直接のJSON表現がありません。これらは、特別なキー &lt;code&gt;$reql_type$&lt;/code&gt; 持つJSONオブジェクトである&lt;em&gt;疑似タイプ&lt;/em&gt;として実装されます。 3つの公式ReQLドライバーは、日付型とバイナリ型を疑似型に変換します。</target>
        </trans-unit>
        <trans-unit id="45727d8558702b8e8e6821036bedae3a955e8e75" translate="yes" xml:space="preserve">
          <source>Some other map-reduce implementations, like Hadoop&amp;rsquo;s, use the mapping step to perform grouping as well; RethinkDB&amp;rsquo;s implementation explicitly separates them. This is sometimes referred to as &amp;ldquo;group-map-reduce,&amp;rdquo; or GMR. RethinkDB distributes GMR queries over tables and shards efficiently. You write GMR queries with the &lt;a href=&quot;https://rethinkdb.com/api/python/group/&quot;&gt;group&lt;/a&gt;, &lt;a href=&quot;https://rethinkdb.com/api/python/map/&quot;&gt;map&lt;/a&gt; and &lt;a href=&quot;https://rethinkdb.com/api/python/reduce/&quot;&gt;reduce&lt;/a&gt; commands, although as we&amp;rsquo;ll see in our examples, many ReQL commands compile to GMR queries behind the scenes&amp;mdash;many common map-reduce cases can be accomplished in one or two lines of ReQL.</source>
          <target state="translated">Hadoopのような他のmap-reduce実装では、マッピング手順を使用してグループ化も実行します。 RethinkDBの実装は、それらを明示的に分離します。これは、「group-map-reduce」またはGMRと呼ばれることもあります。 RethinkDBは、GMRクエリをテーブルとシャードに効率的に分散します。&lt;a href=&quot;https://rethinkdb.com/api/python/group/&quot;&gt;group&lt;/a&gt;、&lt;a href=&quot;https://rethinkdb.com/api/python/map/&quot;&gt;map&lt;/a&gt;、&lt;a href=&quot;https://rethinkdb.com/api/python/reduce/&quot;&gt;reduce&lt;/a&gt;コマンドを使用してGMRクエリを記述しますが、例でわかるように、多くのReQLコマンドはバックグラウンドでGMRクエリにコンパイルされます。多くの一般的なmap-reduceケースは、ReQLの1行または2行で実行できます。 。</target>
        </trans-unit>
        <trans-unit id="38976f19ca7ba6bdfba5c08f5a088ab5d7765537" translate="yes" xml:space="preserve">
          <source>Some system tables are read-only. System tables which allow writing require specific document schema, described below.</source>
          <target state="translated">システムテーブルの中には、読み取り専用のものもあります。書き込みが可能なシステムテーブルは、後述する特定のドキュメントスキーマを必要とします。</target>
        </trans-unit>
        <trans-unit id="297bafdbd8b010b58a31c04b9e3f52472f0b3473" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to write a ReQL document with a dynamic key&amp;mdash;the field name is stored in a variable. You can do this with the &lt;code&gt;object&lt;/code&gt; command, which takes a list of keys and values (&lt;code&gt;(key, value, key, value ...)&lt;/code&gt;) and returns an object from them.</source>
          <target state="translated">動的キーを使用してReQLドキュメントを記述したい場合があります。フィールド名は変数に格納されます。これを行うには、キーと値（ &lt;code&gt;(key, value, key, value ...)&lt;/code&gt; ）のリストを受け取り、それらからオブジェクトを返す &lt;code&gt;object&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="377d3d6f2c79ecc7905a44e35d7263f6d55bd8b0" translate="yes" xml:space="preserve">
          <source>Sort the sequence by document values of the given key(s). To specify the ordering, wrap the attribute with either &lt;code&gt;r.asc&lt;/code&gt; or &lt;code&gt;r.desc&lt;/code&gt; (defaults to ascending).</source>
          <target state="translated">指定されたキーのドキュメント値でシーケンスをソートします。順序を指定するには、属性を &lt;code&gt;r.asc&lt;/code&gt; または &lt;code&gt;r.desc&lt;/code&gt; （デフォルトは昇順）でラップします。</target>
        </trans-unit>
        <trans-unit id="7901d66f07cf332523d69e3f926ea835572d11fb" translate="yes" xml:space="preserve">
          <source>Sorting functions passed to &lt;code&gt;orderBy&lt;/code&gt; must be deterministic. You cannot, for instance, order rows using the &lt;a href=&quot;../random/index&quot;&gt;random&lt;/a&gt; command. Using a non-deterministic function with &lt;code&gt;orderBy&lt;/code&gt; will raise a &lt;code&gt;ReqlQueryLogicError&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;orderBy&lt;/code&gt; に渡される並べ替え関数は確定的でなければなりません。たとえば、&lt;a href=&quot;../random/index&quot;&gt;random&lt;/a&gt;コマンドを使用して行を並べ替えることはできません。 &lt;code&gt;orderBy&lt;/code&gt; で非決定的関数を使用すると、 &lt;code&gt;ReqlQueryLogicError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="ea8a4b203c7a70438b72d257427b2cfcb7f268ca" translate="yes" xml:space="preserve">
          <source>Sorting order</source>
          <target state="translated">並び替え順</target>
        </trans-unit>
        <trans-unit id="dab5e101e385b9bc90149afad6561250f3d14abf" translate="yes" xml:space="preserve">
          <source>Sorting without an index requires the server to hold the sequence in memory, and is limited to 100,000 documents (or the setting of the &lt;code&gt;arrayLimit&lt;/code&gt; option for &lt;a href=&quot;../run/index&quot;&gt;run&lt;/a&gt;). Sorting with an index can be done on arbitrarily large tables, or after a &lt;a href=&quot;../between/index&quot;&gt;between&lt;/a&gt; command using the same index. This applies to both secondary indexes and the primary key (e.g., &lt;code&gt;{index:'id'}&lt;/code&gt;).</source>
          <target state="translated">インデックスなしでソートする場合、サーバーはシーケンスをメモリに保持する必要があり、100,000ドキュメント（または&lt;a href=&quot;../run/index&quot;&gt;runの&lt;/a&gt; &lt;code&gt;arrayLimit&lt;/code&gt; オプションの設定）に制限されます。インデックスでソートする任意の大きさのテーブルに、または後に行うことができる&lt;a href=&quot;../between/index&quot;&gt;との間の&lt;/a&gt;同じインデックスを使用してコマンド。これは、セカンダリインデックスとプライマリキーの両方に適用されます（例 &lt;code&gt;{index:'id'}&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="eb6ec6ac44dc07a6b156451cfaf45f72f2ae2b6e" translate="yes" xml:space="preserve">
          <source>Specify &lt;code&gt;emergencyRepair&lt;/code&gt; with one of two string options:</source>
          <target state="translated">次の2つの文字列オプションのいずれかを使用して、 &lt;code&gt;emergencyRepair&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="5e2ea144bfd6964140019a1eb9ee087345b4db18" translate="yes" xml:space="preserve">
          <source>Split points will not automatically be changed after table creation, which means that if the primary keys are unevenly distributed, shards may become unbalanced. However, the user can manually rebalance shards when necessary, as well as reconfigure tables with new sharding and replication settings. Users cannot set split points for shards manually.</source>
          <target state="translated">テーブル作成後にスプリットポイントが自動的に変更されることはありませんので、主キーが不均等に分散されている場合、シャードが不均衡になる可能性があります。しかし、ユーザーは必要に応じて手動でシャードをリバランスしたり、新しいシャーディングとレプリケーションの設定でテーブルを再構成したりすることができます。ユーザーが手動でシャードのスプリットポイントを設定することはできません。</target>
        </trans-unit>
        <trans-unit id="b1c84e3e4d99951fca9f0d1fa4ec08eae18ef655" translate="yes" xml:space="preserve">
          <source>Splits a string into substrings. Splits on whitespace when called with no arguments. When called with a separator, splits on that separator. When called with a separator and a maximum number of splits, splits on that separator at most &lt;code&gt;max_splits&lt;/code&gt; times. (Can be called with &lt;code&gt;null&lt;/code&gt; as the separator if you want to split on whitespace while still specifying &lt;code&gt;max_splits&lt;/code&gt;.)</source>
          <target state="translated">文字列を部分文字列に分割します。引数なしで呼び出されると、空白で分割されます。セパレーター付きで呼び出されると、そのセパレーターで分割されます。区切り文字と最大数の分割で呼び出された場合、最大で &lt;code&gt;max_splits&lt;/code&gt; 回、その区切り文字で分割されます。（ &lt;code&gt;max_splits&lt;/code&gt; を指定したまま空白で分割する場合は、セパレーターとして &lt;code&gt;null&lt;/code&gt; を使用して呼び出すことができます。）</target>
        </trans-unit>
        <trans-unit id="aad90813842550742d376854c4564d0e0ee6d4e7" translate="yes" xml:space="preserve">
          <source>Start RethinkDB at system startup</source>
          <target state="translated">システム起動時にRethinkDBを起動する</target>
        </trans-unit>
        <trans-unit id="f9f2f9177a8d7e05be7d153da2578fcbfbc850a7" translate="yes" xml:space="preserve">
          <source>Start a RethinkDB server</source>
          <target state="translated">RethinkDBサーバの起動</target>
        </trans-unit>
        <trans-unit id="95486e29d0190c040fcd314d3f50c1dbcf3ab1a4" translate="yes" xml:space="preserve">
          <source>Start monitoring the changefeed in one client:</source>
          <target state="translated">1つのクライアントでチェンジフィードの監視を開始します。</target>
        </trans-unit>
        <trans-unit id="d43ccd49e58bb91b7b4cdd2c2060dd0955232eae" translate="yes" xml:space="preserve">
          <source>Start on system startup</source>
          <target state="translated">システム起動時の起動</target>
        </trans-unit>
        <trans-unit id="2fbe3f947d63c8589e6302b2e97c70001429bf28" translate="yes" xml:space="preserve">
          <source>Start the server</source>
          <target state="translated">サーバーを起動する</target>
        </trans-unit>
        <trans-unit id="9f8bb9939a14cfff47edd8071834d58be0a0cbf9" translate="yes" xml:space="preserve">
          <source>Start the server from a terminal window.</source>
          <target state="translated">ターミナルウィンドウからサーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="78a3bbf31dc69529206cdcb865e33f6e461a23d6" translate="yes" xml:space="preserve">
          <source>Start the server from the Windows command prompt.</source>
          <target state="translated">Windowsのコマンドプロンプトからサーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="2d4af8c2a3172fa7ad4ba56655af4716e0c909b4" translate="yes" xml:space="preserve">
          <source>Starting RethinkDB instances</source>
          <target state="translated">RethinkDBインスタンスの起動</target>
        </trans-unit>
        <trans-unit id="c3c304eb5e15271a98ffd09a1430e6b519336201" translate="yes" xml:space="preserve">
          <source>Starting RethinkDB with the &lt;code&gt;proxy&lt;/code&gt; command turns a server into a &lt;em&gt;proxy node,&lt;/em&gt; which acts as a query router. This increases cluster performance by reducing intracluster traffic and, if you&amp;rsquo;re using changefeeds, de-duplicating feed messages.</source>
          <target state="translated">&lt;code&gt;proxy&lt;/code&gt; コマンドでRethinkDBを起動すると、サーバーが&lt;em&gt;プロキシノード&lt;/em&gt;になり、&lt;em&gt;プロキシノード&lt;/em&gt;がクエリルーターとして機能します。これにより、クラスター内のトラフィックが減少し、変更フィードを使用している場合はフィードメッセージの重複がなくなるため、クラスターのパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="11477333db87f433e59f65e30ba16cd581824f79" translate="yes" xml:space="preserve">
          <source>Starting a cluster on multiple machines or VMs is even easier than starting it on a single machine, because you don&amp;rsquo;t have to worry about port and directory conflicts.</source>
          <target state="translated">複数のマシンまたはVMでクラスターを起動する方が、単一のマシンで起動するよりも簡単です。ポートとディレクトリの競合を心配する必要がないためです。</target>
        </trans-unit>
        <trans-unit id="317d49bb0215c341c0bb18c9da4c9a7908ce3acf" translate="yes" xml:space="preserve">
          <source>Starting the server</source>
          <target state="translated">サーバーの起動</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
