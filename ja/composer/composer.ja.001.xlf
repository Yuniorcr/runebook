<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="composer">
    <body>
      <group id="composer">
        <trans-unit id="f4ca5196f9ff4ad22b0d9c78a3c939b4e5aa1466" translate="yes" xml:space="preserve">
          <source>&quot;The system cannot find the path specified&quot; (Windows)</source>
          <target state="translated">&quot;システムが指定したパスを見つけることができません&quot; (Windows)</target>
        </trans-unit>
        <trans-unit id="61714664a60e74bb9ba53df18abb5cdece955ce8" translate="yes" xml:space="preserve">
          <source>&amp;copy; Nils Adermann, Jordi Boggiano</source>
          <target state="translated">&amp;copy;Nils Adermann、Jordi Boggiano</target>
        </trans-unit>
        <trans-unit id="7be86bd215ca5ef3d7d786c2800effd418fc4dfa" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;00-intro.md&quot;&gt;Intro&lt;/a&gt; | &lt;a href=&quot;02-libraries.md&quot;&gt;Libraries&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;00-intro.md&quot;&gt;イントロ&lt;/a&gt; | &lt;a href=&quot;02-libraries.md&quot;&gt;ライブラリ&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="a933e9286f26fa87fe3bb3f850c8dd90fb85c177" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;01-basic-usage.md&quot;&gt;Basic usage&lt;/a&gt; | &lt;a href=&quot;03-cli.md&quot;&gt;Command-line interface&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;01-basic-usage.md&quot;&gt;基本的な使い方&lt;/a&gt; | &lt;a href=&quot;03-cli.md&quot;&gt;コマンドラインインターフェース&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="89e1906837779f975f241a01e3dd17f79caedf38" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;02-libraries.md&quot;&gt;Libraries&lt;/a&gt; | &lt;a href=&quot;04-schema.md&quot;&gt;Schema&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;02-libraries.md&quot;&gt;ライブラリ&lt;/a&gt; | &lt;a href=&quot;04-schema.md&quot;&gt;スキーマ&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="5e79d72d8ed7ac11838d0af4cd9c9deee848feee" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;03-cli.md&quot;&gt;Command-line interface&lt;/a&gt; | &lt;a href=&quot;05-repositories.md&quot;&gt;Repositories&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;03-cli.md&quot;&gt;コマンドラインインターフェイス&lt;/a&gt; | &lt;a href=&quot;05-repositories.md&quot;&gt;リポジトリ&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="931bb3b8aa57e1dc4286104763e3d472c0339f7a" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;04-schema.md&quot;&gt;Schema&lt;/a&gt; | &lt;a href=&quot;06-config.md&quot;&gt;Config&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;04-schema.md&quot;&gt;スキーマ&lt;/a&gt; | &lt;a href=&quot;06-config.md&quot;&gt;設定&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="6cba335dbfd0edc4bc3a00ace6808bd677db41bb" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;05-repositories.md&quot;&gt;Repositories&lt;/a&gt; | &lt;a href=&quot;07-community.md&quot;&gt;Community&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;05-repositories.md&quot;&gt;リポジトリ&lt;/a&gt; | &lt;a href=&quot;07-community.md&quot;&gt;コミュニティ&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="70f33919d22c9a0005150dfa3e1f75c411d11833" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;06-config.md&quot;&gt;Config&lt;/a&gt;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;06-config.md&quot;&gt;設定&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f189b8dbc452ee2bcbb7cf6ade70c1f019a52882" translate="yes" xml:space="preserve">
          <source>1. Introduction</source>
          <target state="translated">1.序章</target>
        </trans-unit>
        <trans-unit id="35213e58dfdb246cfaeaf75c8dfcb2726b47e2e9" translate="yes" xml:space="preserve">
          <source>1.0.0-RC5</source>
          <target state="translated">1.0.0-RC5</target>
        </trans-unit>
        <trans-unit id="32677f938c7fb77803242a1f8527474a280bb565" translate="yes" xml:space="preserve">
          <source>1.0.0-alpha3</source>
          <target state="translated">1.0.0-alpha3</target>
        </trans-unit>
        <trans-unit id="f104a17f69852aaa1e5c2b4ae621ae9be289e8eb" translate="yes" xml:space="preserve">
          <source>1.0.0-beta2</source>
          <target state="translated">1.0.0-beta2</target>
        </trans-unit>
        <trans-unit id="25cf73b921bade9c931214c627fc4b1c98a1c39d" translate="yes" xml:space="preserve">
          <source>1.0.0-dev</source>
          <target state="translated">1.0.0-dev</target>
        </trans-unit>
        <trans-unit id="a42e45f9ca82518f6e8ba6a549668fcf25dea16c" translate="yes" xml:space="preserve">
          <source>2. Basic usage</source>
          <target state="translated">2.基本的な使い方</target>
        </trans-unit>
        <trans-unit id="a04a39ed4144de6344ff166a121e11ad9ccf9f07" translate="yes" xml:space="preserve">
          <source>3. Libraries</source>
          <target state="translated">3.図書館</target>
        </trans-unit>
        <trans-unit id="0d7f5de74f1dfdac4ed3f41666431bfde147e568" translate="yes" xml:space="preserve">
          <source>4. Command-line interface / Commands</source>
          <target state="translated">4.コマンドラインインタフェース コマンド</target>
        </trans-unit>
        <trans-unit id="d643f52ebe5997b6108d46be67f9055303d64bb8" translate="yes" xml:space="preserve">
          <source>5. The composer.json Schema</source>
          <target state="translated">5.composer.json スキーマ</target>
        </trans-unit>
        <trans-unit id="cd81bdfbc177a0ca6adcea80af150b1ceffdb6b3" translate="yes" xml:space="preserve">
          <source>6. Repositories</source>
          <target state="translated">6.リポジトリ</target>
        </trans-unit>
        <trans-unit id="afaa6435ff39561884a857486ca7a2fd317ed3b4" translate="yes" xml:space="preserve">
          <source>7. Config</source>
          <target state="translated">7.設定</target>
        </trans-unit>
        <trans-unit id="6b4837ff5634431d1894540e443f3b2195059983" translate="yes" xml:space="preserve">
          <source>8. Community</source>
          <target state="translated">8.8.コミュニティ</target>
        </trans-unit>
        <trans-unit id="f6569067d917c5d5585013ca1e142c00d3e4fc99" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;01-basic-usage.md&quot;&gt;Basic usage&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&lt;a href=&quot;01-basic-usage.md&quot;&gt;基本的な使い方&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="52b0392293b77b887c8c5c33ae37294ab84cbb74" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/aliases.md&quot;&gt;Aliases&lt;/a&gt;Alias branch names to versions</source>
          <target state="translated">エイリアスブランチ名からバージョンへ</target>
        </trans-unit>
        <trans-unit id="d38624e46441b69745b3300480649427b86ed09d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;Autoloader Optimization&lt;/a&gt;How to reduce the performance impact of the autoloader</source>
          <target state="translated">&lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;オートローダーの最適化&lt;/a&gt;オートローダーのパフォーマンスへの影響を減らす方法</target>
        </trans-unit>
        <trans-unit id="21dc154eb2bec94b3219a18d77ae871cb3aea5b6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/custom-installers.md&quot;&gt;Setting up and using custom installers&lt;/a&gt;Modify the way certain types of packages are installed</source>
          <target state="translated">&lt;a href=&quot;articles/custom-installers.md&quot;&gt;カスタムインストーラーのセットアップと使用&lt;/a&gt;特定の種類のパッケージのインストール方法を変更する</target>
        </trans-unit>
        <trans-unit id="8ab9ccf6a0778c05f59fdb523e8a8ea245c0dbc7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/handling-private-packages-with-satis.md&quot;&gt;Handling private packages&lt;/a&gt;Hosting and installing private Composer packages</source>
          <target state="translated">&lt;a href=&quot;articles/handling-private-packages-with-satis.md&quot;&gt;プライベートパッケージの処理プライベート&lt;/a&gt; Composerパッケージのホスティングとインストール</target>
        </trans-unit>
        <trans-unit id="38cb66eef73b7de2767cd5adeffb2e98e2879b50" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/http-basic-authentication.md&quot;&gt;HTTP basic authentication&lt;/a&gt;Access privately hosted packages</source>
          <target state="translated">&lt;a href=&quot;articles/http-basic-authentication.md&quot;&gt;HTTP基本認証&lt;/a&gt;プライベートにホストされているパッケージにアクセスする</target>
        </trans-unit>
        <trans-unit id="fbde4be7da9b4ae07a45a0026286a6e07e013d30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/plugins.md&quot;&gt;Setting up and using plugins&lt;/a&gt;Modify and extend Composer's functionality</source>
          <target state="translated">&lt;a href=&quot;articles/plugins.md&quot;&gt;プラグインのセットアップと使用&lt;/a&gt; Composerの機能の変更と拡張</target>
        </trans-unit>
        <trans-unit id="3fa32fc7c8f2943148b7813c705e4f8d6eb8eec7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/scripts.md&quot;&gt;Scripts&lt;/a&gt;Script are callbacks that are called before/after installing packages</source>
          <target state="translated">&lt;a href=&quot;articles/scripts.md&quot;&gt;スクリプト&lt;/a&gt;スクリプトは、パッケージのインストール前/後に呼び出されるコールバックです</target>
        </trans-unit>
        <trans-unit id="721818c45c73ca5a281d16b32f7f5b2fbb8e3364" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/troubleshooting.md&quot;&gt;Troubleshooting&lt;/a&gt;Solving problems</source>
          <target state="translated">&lt;a href=&quot;articles/troubleshooting.md&quot;&gt;問題の&lt;/a&gt;解決のトラブルシューティング</target>
        </trans-unit>
        <trans-unit id="02c3d44e8d3f389ee6a3668d658e48589c725e8a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;Vendor binaries and the `vendor/bin` directory&lt;/a&gt;Expose command-line scripts from packages</source>
          <target state="translated">&lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;ベンダーバイナリと `vendor / bin`ディレクトリ&lt;/a&gt;パッケージからコマンドラインスクリプトを公開する</target>
        </trans-unit>
        <trans-unit id="454d22d364beb6382f9a19063005058fa0026a41" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/versions.md&quot;&gt;Versions and constraints&lt;/a&gt;Versions explained.</source>
          <target state="translated">&lt;a href=&quot;articles/versions.md&quot;&gt;バージョンと制約&lt;/a&gt;バージョンの説明。</target>
        </trans-unit>
        <trans-unit id="8f127788d142cf73ef953139ac56346b3eb9cc06" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt;&lt;code&gt;PSR-4&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.php-fig.org/psr/psr-0/&quot;&gt;&lt;code&gt;PSR-0&lt;/code&gt;&lt;/a&gt; autoloading, &lt;code&gt;classmap&lt;/code&gt; generation and &lt;code&gt;files&lt;/code&gt; includes are supported.</source>
          <target state="translated">&lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt; &lt;code&gt;PSR-4&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;http://www.php-fig.org/psr/psr-0/&quot;&gt; &lt;code&gt;PSR-0&lt;/code&gt; の&lt;/a&gt;自動ロード、 &lt;code&gt;classmap&lt;/code&gt; 生成、 &lt;code&gt;files&lt;/code&gt; インクルードがサポートされています。</target>
        </trans-unit>
        <trans-unit id="a5c84c55dfabff132243f0b04d5eea88de96f2ff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;Create&lt;/a&gt; an OAuth token on GitHub. &lt;a href=&quot;https://github.com/blog/1509-personal-api-tokens&quot;&gt;Read more&lt;/a&gt; on this.</source>
          <target state="translated">GitHubでOAuthトークンを&lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;作成&lt;/a&gt;します。 これについて&lt;a href=&quot;https://github.com/blog/1509-personal-api-tokens&quot;&gt;もっと読む&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="2e316d95a461116ece689308f91fd1e88132521d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://packagist.com&quot;&gt;Private Packagist&lt;/a&gt; is a commercial package hosting product offering professional support and web based management of private and public packages, and granular access permissions. Private Packagist provides mirroring for packages' zip files which makes installs faster and independent from third party systems - e.g. you can deploy even if GitHub is down because your zip files are mirrored.</source>
          <target state="translated">&lt;a href=&quot;https://packagist.com&quot;&gt;Private Packagist&lt;/a&gt;は、 プライベートパッケージとパブリックパッケージの専門的なサポートとWebベースの管理、およびきめ細かなアクセス許可を提供する商用パッケージホスティング製品です。 Private Packagistは、パッケージのzipファイルのミラーリングを提供します。これにより、インストールがより速く、サードパーティシステムから独立します。たとえば、zipファイルがミラーリングされているため、GitHubがダウンしている場合でもデプロイできます。</target>
        </trans-unit>
        <trans-unit id="a34719309e5d6aa3a87946e25525eb2e5c039012" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://packagist.com/&quot;&gt;Private Packagist&lt;/a&gt; is a hosted or self-hosted application providing private package hosting as well as mirroring of GitHub, Packagist.org and other package repositories.</source>
          <target state="translated">&lt;a href=&quot;https://packagist.com/&quot;&gt;Private Packagist&lt;/a&gt;は、GitHub、Packagist.org、およびその他のパッケージリポジトリのミラーリングだけでなく、プライベートパッケージのホスティングを提供するホスト型またはセルフホスト型のアプリケーションです。</target>
        </trans-unit>
        <trans-unit id="a73010ec20dd9a4bb65ad8cd6a915fbea90486c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt; is the main Composer repository. A Composer repository is basically a package source: a place where you can get packages from. Packagist aims to be the central repository that everybody uses. This means that you can automatically &lt;code&gt;require&lt;/code&gt; any package that is available there, without further specifying where Composer should look for the package.</source>
          <target state="translated">&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt;はメインのComposerリポジトリです。 Composerリポジトリは基本的にパッケージソースです。パッケージを取得できる場所です。 Packagistは、誰もが使用する中央リポジトリになることを目指しています。 これは、Composerがパッケージを探す場所をさらに指定することなく、そこで利用可能なパッケージを自動的に &lt;code&gt;require&lt;/code&gt; できることを意味します。</target>
        </trans-unit>
        <trans-unit id="51a9981c44f6135b58412d815eed10491bd577a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt; is the main package repository for Composer, and it is enabled by default. Anything that is published on Packagist is available automatically through Composer. Since &lt;a href=&quot;https://packagist.org/packages/monolog/monolog&quot;&gt;Monolog is on Packagist&lt;/a&gt;, we can depend on it without having to specify any additional repositories.</source>
          <target state="translated">&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt;はComposerのメインパッケージリポジトリであり、デフォルトで有効になっています。 Packagistで公開されているものはすべて、Composerを通じて自動的に使用できます。 &lt;a href=&quot;https://packagist.org/packages/monolog/monolog&quot;&gt;MonologはPackagist&lt;/a&gt;にあるため、追加のリポジトリを指定する必要なく、それに依存できます。</target>
        </trans-unit>
        <trans-unit id="2f8d95cc6f11a73bfaae566fb66164c1ffa32e4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IntermediatePackage&lt;/code&gt;, which depends on &lt;code&gt;BasePackage&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BasePackage&lt;/code&gt; に依存するIntermediatePackage</target>
        </trans-unit>
        <trans-unit id="c97af29157c8b8f02c9d1849bb18c05afe041451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TopLevelPackage1&lt;/code&gt; and &lt;code&gt;TopLevelPackage2&lt;/code&gt; which both depend on &lt;code&gt;IntermediatePackage&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TopLevelPackage1&lt;/code&gt; と &lt;code&gt;TopLevelPackage2&lt;/code&gt; はどちらも &lt;code&gt;IntermediatePackage&lt;/code&gt; に依存しています</target>
        </trans-unit>
        <trans-unit id="2e6547936d424568452ba1a388d5e912b6ff4b7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;absolute-directory&lt;/code&gt;: optional, a &lt;em&gt;local&lt;/em&gt; directory where the dist files are dumped instead of &lt;code&gt;output-dir&lt;/code&gt;/&lt;code&gt;directory&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;absolute-directory&lt;/code&gt; ：オプション、 &lt;code&gt;output-dir&lt;/code&gt; / &lt;code&gt;directory&lt;/code&gt; の代わりにdistファイルがダンプされる&lt;em&gt;ローカル&lt;/em&gt; ディレクトリ</target>
        </trans-unit>
        <trans-unit id="b198fa112f0bbb468cc9a93fba00e2691ff604db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blacklist&lt;/code&gt;: optional, if set as a list of package names, satis will not dump the dist files of these packages</source>
          <target state="translated">&lt;code&gt;blacklist&lt;/code&gt; ：オプション、パッケージ名のリストとして設定されている場合、satisはこれらのパッケージのdistファイルをダンプしません</target>
        </trans-unit>
        <trans-unit id="ac9e75546ff24f9c2b8db9b20a9cb08139426b03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checksum&lt;/code&gt;: optional, &lt;code&gt;true&lt;/code&gt; by default, when disabled (&lt;code&gt;false&lt;/code&gt;) satis will not provide the sha1 checksum for the dist files</source>
          <target state="translated">&lt;code&gt;checksum&lt;/code&gt; ：オプション、デフォルトでは &lt;code&gt;true&lt;/code&gt; 、無効の場合（ &lt;code&gt;false&lt;/code&gt; ）satisはdistファイルのsha1チェックサムを提供しません</target>
        </trans-unit>
        <trans-unit id="38c0ef4a6dd08c91b5e6e07cc94348d6397bcfe2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;composer.json&lt;/code&gt;: Project setup</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; ：プロジェクトのセットアップ</target>
        </trans-unit>
        <trans-unit id="8c2a50728481a45b81650be6576035eb96cb5f62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;config&lt;/code&gt;: optional, lets you define all config options from composer, except &lt;code&gt;archive-format&lt;/code&gt; and &lt;code&gt;archive-dir&lt;/code&gt; as the configuration is done through &lt;a href=&quot;#downloads&quot;&gt;archive&lt;/a&gt; instead. See docs on &lt;a href=&quot;../04-schema.md#config&quot;&gt;config schema&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; ：オプション。構成は代わりに&lt;a href=&quot;#downloads&quot;&gt;アーカイブ&lt;/a&gt;を介して行われるため、 &lt;code&gt;archive-format&lt;/code&gt; と &lt;code&gt;archive-dir&lt;/code&gt; を除いて、composerからすべての構成オプションを定義できます。 詳細については、構成&lt;a href=&quot;../04-schema.md#config&quot;&gt;スキーマ&lt;/a&gt;に関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c1e60a313eeef19dfa5ea7ff1081101138fa08eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;description&lt;/code&gt;, &lt;code&gt;homepage&lt;/code&gt;, &lt;code&gt;keywords&lt;/code&gt;, &lt;code&gt;license&lt;/code&gt;, &lt;code&gt;minimum-stability&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;prefer-stable&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;description&lt;/code&gt; 、 &lt;code&gt;homepage&lt;/code&gt; 、 &lt;code&gt;keywords&lt;/code&gt; 、 &lt;code&gt;license&lt;/code&gt; 、 &lt;code&gt;minimum-stability&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;prefer-stable&lt;/code&gt; 、 &lt;code&gt;type&lt;/code&gt; 、 &lt;code&gt;version&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d75d3f3556066feedf52b3171af355f56ebb0145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;: required, the location of the dist files (inside the &lt;code&gt;output-dir&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; ：必須、distファイルの場所（ &lt;code&gt;output-dir&lt;/code&gt; 内 ）</target>
        </trans-unit>
        <trans-unit id="0e131a9cd9c9cce12d4ffffc9c7f2fd9651f9725" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ext-&amp;lt;name&amp;gt;&lt;/code&gt; allows you to require PHP extensions (includes core extensions). Versioning can be quite inconsistent here, so it's often a good idea to set the constraint to &lt;code&gt;*&lt;/code&gt;. An example of an extension package name is &lt;code&gt;ext-gd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ext-&amp;lt;name&amp;gt;&lt;/code&gt; を使用すると、PHP拡張（コア拡張を含む）を要求できます。 ここではバージョン管理が非常に一貫していない可能性があるため、制約を &lt;code&gt;*&lt;/code&gt; に設定することをお勧めします。 拡張パッケージ名の例は &lt;code&gt;ext-gd&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="679508ecfec33432665b9bda223426aab7264827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt;: optional, &lt;code&gt;zip&lt;/code&gt; (default) or &lt;code&gt;tar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; ：オプション、 &lt;code&gt;zip&lt;/code&gt; （デフォルト）または &lt;code&gt;tar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b8223a09896d0d02daa5edaa85bbd94bec4b18b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hhvm&lt;/code&gt; represents the version of the HHVM runtime and allows you to apply a constraint, e.g., &lt;code&gt;^2.3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;hhvm&lt;/code&gt; はHHVMランタイムのバージョンを表し、 &lt;code&gt;^2.3&lt;/code&gt; 制約を適用できます。</target>
        </trans-unit>
        <trans-unit id="67a67e5a538438f0ae349f6d0484a263e9baeb72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lib-&amp;lt;name&amp;gt;&lt;/code&gt; allows constraints to be made on versions of libraries used by PHP. The following are available: &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;iconv&lt;/code&gt;, &lt;code&gt;icu&lt;/code&gt;, &lt;code&gt;libxml&lt;/code&gt;, &lt;code&gt;openssl&lt;/code&gt;, &lt;code&gt;pcre&lt;/code&gt;, &lt;code&gt;uuid&lt;/code&gt;, &lt;code&gt;xsl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lib-&amp;lt;name&amp;gt;&lt;/code&gt; により、PHPで使用されるライブラリのバージョンに制約を加えることができます。 次のものを使用できます： &lt;code&gt;curl&lt;/code&gt; 、 &lt;code&gt;iconv&lt;/code&gt; 、 &lt;code&gt;icu&lt;/code&gt; 、 &lt;code&gt;libxml&lt;/code&gt; 、 &lt;code&gt;openssl&lt;/code&gt; 、 &lt;code&gt;pcre&lt;/code&gt; 、 &lt;code&gt;uuid&lt;/code&gt; 、 &lt;code&gt;xsl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d86016a714e39684ab681491c97e6fd86feb1497" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify-batch&lt;/code&gt;: optional, specify a URL that will be called every time a user installs a package. See &lt;a href=&quot;../05-repositories.md#notify-batch&quot;&gt;notify-batch&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;notify-batch&lt;/code&gt; ：オプション。ユーザーがパッケージをインストールするたびに呼び出されるURLを指定します。 &lt;a href=&quot;../05-repositories.md#notify-batch&quot;&gt;notify-batchを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bbe88be73fbb4a95b28815d69696637af544dd06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output-dir&lt;/code&gt;: optional, defines where to output the repository files if not provided as an argument when calling the &lt;code&gt;build&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;output-dir&lt;/code&gt; ：オプション。 &lt;code&gt;build&lt;/code&gt; コマンドを呼び出すときに引数として指定されない場合、リポジトリファイルを出力する場所を定義します。</target>
        </trans-unit>
        <trans-unit id="594bd80832cf804800b9f0ff495ea34a72146191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output-html&lt;/code&gt;: optional, &lt;code&gt;true&lt;/code&gt; by default, when disabled (&lt;code&gt;false&lt;/code&gt;) satis will not generate the &lt;code&gt;output-dir&lt;/code&gt;/index.html page.</source>
          <target state="translated">&lt;code&gt;output-html&lt;/code&gt; ：オプション、デフォルトでは &lt;code&gt;true&lt;/code&gt; 、無効（ &lt;code&gt;false&lt;/code&gt; ）の場合、satisは &lt;code&gt;output-dir&lt;/code&gt; /index.htmlページを生成しません。</target>
        </trans-unit>
        <trans-unit id="dcc17d6df4998746b6378927f41123757bec6723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;php&lt;/code&gt; represents the PHP version of the user, allowing you to apply constraints, e.g. &lt;code&gt;^7.1&lt;/code&gt;. To require a 64bit version of php, you can require the &lt;code&gt;php-64bit&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;php&lt;/code&gt; はユーザーのPHPバージョンを表し、たとえば &lt;code&gt;^7.1&lt;/code&gt; 制約を適用できます。 64ビットバージョンのphpを要求するには、 &lt;code&gt;php-64bit&lt;/code&gt; パッケージを要求できます。</target>
        </trans-unit>
        <trans-unit id="281b25574038a232c87c8262faa71fe4677631e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prefix-url&lt;/code&gt;: optional, location of the downloads, homepage (from &lt;code&gt;satis.json&lt;/code&gt;) followed by &lt;code&gt;directory&lt;/code&gt; by default</source>
          <target state="translated">&lt;code&gt;prefix-url&lt;/code&gt; ：オプション、ダウンロードの場所、ホームページ（ &lt;code&gt;satis.json&lt;/code&gt; から）、デフォルトでは &lt;code&gt;directory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="43ef97ed3cea66ff838f9963595a313cea141567" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;providers&lt;/code&gt;: optional, &lt;code&gt;false&lt;/code&gt; by default, when enabled (&lt;code&gt;true&lt;/code&gt;) each package will be dumped into a separate include file which will be only loaded by composer when the package is really required. Speeds up composer handling for repositories with huge number of packages like f.i. packagist.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; ：オプション、デフォルトで &lt;code&gt;false&lt;/code&gt; 、有効（ &lt;code&gt;true&lt;/code&gt; ）の場合、各パッケージは個別のインクルードファイルにダンプされ、パッケージが本当に必要な場合にのみcomposerによってロードされます。 fi packagistのような膨大な数のパッケージがあるリポジトリのcomposer処理を高速化します。</target>
        </trans-unit>
        <trans-unit id="09803c1856f9c77da7455e7e8e85d93c066217fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require&lt;/code&gt; and &lt;code&gt;require-dev&lt;/code&gt; additionally support explicit references (i.e. commit) for dev versions to make sure they are locked to a given state, even when you run update. These only work if you explicitly require a dev version and append the reference with &lt;code&gt;#&amp;lt;ref&amp;gt;&lt;/code&gt;. This is also a &lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt; feature and will be ignored in dependencies.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; および &lt;code&gt;require-dev&lt;/code&gt; は、更新を実行した場合でも、それらが特定の状態に確実にロックされるように、devバージョンの明示的な参照（つまり、コミット）をさらにサポートします。 これらは、明示的に開発バージョンを必要とし、 &lt;code&gt;#&amp;lt;ref&amp;gt;&lt;/code&gt; で参照を追加する場合にのみ機能します。 これは&lt;a href=&quot;04-schema.md#root-package&quot;&gt;ルートのみの&lt;/a&gt;機能でもあり、依存関係では無視されます。</target>
        </trans-unit>
        <trans-unit id="9c58c08b8c40d2e2430bd8a779f673b0ca6e174c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require&lt;/code&gt; and &lt;code&gt;require-dev&lt;/code&gt; additionally support stability flags (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;). These allow you to further restrict or expand the stability of a package beyond the scope of the &lt;a href=&quot;#minimum-stability&quot;&gt;minimum-stability&lt;/a&gt; setting. You can apply them to a constraint, or apply them to an empty constraint if you want to allow unstable packages of a dependency for example.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; と &lt;code&gt;require-dev&lt;/code&gt; はさらに安定性フラグをサポートします（ &lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt; ）。 これらにより、パッケージの安定性を、 &lt;a href=&quot;#minimum-stability&quot;&gt;最小安定性&lt;/a&gt;設定の範囲を超えてさらに制限または拡張できます。 依存関係の不安定なパッケージを許可したい場合は、制約に適用したり、空の制約に適用したりできます。</target>
        </trans-unit>
        <trans-unit id="110e5b74d09bfeb5b8d896805490746c9860ba1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require&lt;/code&gt; and &lt;code&gt;require-dev&lt;/code&gt; also support references to specific PHP versions and PHP extensions your project needs to run successfully.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; および &lt;code&gt;require-dev&lt;/code&gt; は、プロジェクトが正常に実行するために必要な特定のPHPバージョンおよびPHP拡張機能への参照もサポートします。</target>
        </trans-unit>
        <trans-unit id="ada8fab31a3fc7c76ddbe7b6249857e3bf1fcfbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setting-key&lt;/code&gt; is a configuration option name and &lt;code&gt;setting-value1&lt;/code&gt; is a configuration value. For settings that can take an array of values (like &lt;code&gt;github-protocols&lt;/code&gt;), more than one setting-value arguments are allowed.</source>
          <target state="translated">&lt;code&gt;setting-key&lt;/code&gt; は構成オプション名で、 &lt;code&gt;setting-value1&lt;/code&gt; は構成値です。 値の配列を取得できる設定（ &lt;code&gt;github-protocols&lt;/code&gt; など ）では、複数の設定値引数を使用できます。</target>
        </trans-unit>
        <trans-unit id="2e45f2746ca4fa66796beddc0d44b5aec66d0356" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;skip-dev&lt;/code&gt;: optional, &lt;code&gt;false&lt;/code&gt; by default, when enabled (&lt;code&gt;true&lt;/code&gt;) satis will not create downloads for branches</source>
          <target state="translated">&lt;code&gt;skip-dev&lt;/code&gt; ：オプション、デフォルトでは &lt;code&gt;false&lt;/code&gt; 、有効になっている場合（ &lt;code&gt;true&lt;/code&gt; ）satisはブランチのダウンロードを作成しません</target>
        </trans-unit>
        <trans-unit id="1fb7239dafbd5a81a2db305d00fbed7893fa72bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;twig-template&lt;/code&gt;: optional, a path to a personalized &lt;a href=&quot;https://twig.sensiolabs.org/&quot;&gt;Twig&lt;/a&gt; template for the &lt;code&gt;output-dir&lt;/code&gt;/index.html page.</source>
          <target state="translated">&lt;code&gt;twig-template&lt;/code&gt; ：オプション、 &lt;code&gt;output-dir&lt;/code&gt; /index.htmlページ用のパーソナライズされた&lt;a href=&quot;https://twig.sensiolabs.org/&quot;&gt;Twig&lt;/a&gt;テンプレートへのパス。</target>
        </trans-unit>
        <trans-unit id="dbff6a322930947824e72c4ec1f0e16333fb9b54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;whitelist&lt;/code&gt;: optional, if set as a list of package names, satis will only dump the dist files of these packages</source>
          <target state="translated">&lt;code&gt;whitelist&lt;/code&gt; ：オプション、パッケージ名のリストとして設定されている場合、satisはこれらのパッケージのdistファイルのみをダンプします</target>
        </trans-unit>
        <trans-unit id="de9e57f8389bb01d5c30f2bed2f51a6d08c660f6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Composer commands are based on the &lt;a href=&quot;https://symfony.com/doc/current/components/console.html&quot;&gt;Symfony Console Component&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Composerコマンドは&lt;a href=&quot;https://symfony.com/doc/current/components/console.html&quot;&gt;Symfonyコンソールコンポーネントに&lt;/a&gt;基づいています 。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6ccb76c81fa61f75f41815c8ceeb093b4b4d4077" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For the following discussion, let's assume the following sample library repository:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;以下の説明では、次のサンプルライブラリリポジトリを想定します。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1d7df88c19567dd6e16f727e3b8803fe9830deaa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Instead of being installed in &lt;code&gt;/vendor&lt;/code&gt; any package installed using this Installer will be put in the &lt;code&gt;/data/templates/&amp;lt;stripped name&amp;gt;&lt;/code&gt; folder.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;/vendor&lt;/code&gt; にインストールされる代わりに、このインストーラーを使用してインストールされたパッケージは、 &lt;code&gt;/data/templates/&amp;lt;stripped name&amp;gt;&lt;/code&gt; フォルダーに配置されます。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c968d452eee5799f7b1088aee8a056da1f636231" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;See the next chapter for an instruction how to create Custom Installers.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;カスタムインストーラーの作成方法については、次の章を参照してください。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dec386eb9531926a09288fea60802644d93575a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--absolute:&lt;/strong&gt; Returns absolute paths when fetching *-dir config values instead of relative.</source>
          <target state="translated">&lt;strong&gt;--absolute：&lt;/strong&gt;相対ではなく* -dir設定値をフェッチするときに絶対パスを返します。</target>
        </trans-unit>
        <trans-unit id="371ceb7123ea241c2c12742e4590333cbc99a380" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--all (-a):&lt;/strong&gt; Show all packages, not just outdated (alias for &lt;code&gt;composer show -l&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;--all（-a）：&lt;/strong&gt;古くなったものだけでなく、すべてのパッケージを表示します（ &lt;code&gt;composer show -l&lt;/code&gt; のエイリアス）。</target>
        </trans-unit>
        <trans-unit id="c2cd131dda29cfaa33574ac56c57153cbc281558" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--all :&lt;/strong&gt; List all packages available in all your repositories.</source>
          <target state="translated">&lt;strong&gt;--all：&lt;/strong&gt;すべてのリポジトリで利用可能なすべてのパッケージを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="5692feca06452dd2bc9335eea0ef06204f8f2680" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--ansi:&lt;/strong&gt; Force ANSI output.</source>
          <target state="translated">&lt;strong&gt;--ansi：&lt;/strong&gt; ANSI出力を強制します。</target>
        </trans-unit>
        <trans-unit id="5054bfc1f8ec08c16f152b8b07aa60154d2e60b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--apcu-autoloader:&lt;/strong&gt; Use APCu to cache found/not-found classes.</source>
          <target state="translated">&lt;strong&gt;--apcu-autoloader：&lt;/strong&gt; APCuを使用して、見つかった/見つからないクラスをキャッシュします。</target>
        </trans-unit>
        <trans-unit id="c5937266e89d837369ef5f13718f20be62478d8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--apcu:&lt;/strong&gt; Use APCu to cache found/not-found classes.</source>
          <target state="translated">&lt;strong&gt;--apcu：&lt;/strong&gt; APCuを使用して、見つかった/見つからないクラスをキャッシュします。</target>
        </trans-unit>
        <trans-unit id="77c602af3b26ab8cb84fd370ed05bad85a090158" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--auth (-a):&lt;/strong&gt; Affect auth config file (only used for --editor).</source>
          <target state="translated">&lt;strong&gt;--auth（-a）：&lt;/strong&gt; auth設定ファイルに影響します（--editorでのみ使用）。</target>
        </trans-unit>
        <trans-unit id="3670d4e6c1063481934923942d3a28c79af08e1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--author:&lt;/strong&gt; Author name of the package.</source>
          <target state="translated">&lt;strong&gt;--author：&lt;/strong&gt;パッケージの作成者名。</target>
        </trans-unit>
        <trans-unit id="4b43bc0a394cd5014544a282bb1d5ee286ed090a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--available (-a):&lt;/strong&gt; List available packages only.</source>
          <target state="translated">&lt;strong&gt;--available（-a）：&lt;/strong&gt;利用可能なパッケージのみを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="b6494bbaaebfe1f05f8745dd3df1d22039bbef15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--by-package:&lt;/strong&gt; Groups output by suggesting package.</source>
          <target state="translated">&lt;strong&gt;--by-package：パッケージ&lt;/strong&gt;を提案して出力をグループ化します。</target>
        </trans-unit>
        <trans-unit id="12e3089da04250b5fc0f0d195641a1440c31ed72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--by-suggestion:&lt;/strong&gt; Groups output by suggested package.</source>
          <target state="translated">&lt;strong&gt;--by-suggestion：提案&lt;/strong&gt;されたパッケージでグループ化された出力。</target>
        </trans-unit>
        <trans-unit id="8761b53e8658e2f79294741dffb5f333f7ddaf63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--classmap-authoritative (-a):&lt;/strong&gt; Autoload classes from the classmap only. Implicitly enables &lt;code&gt;--optimize-autoloader&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--classmap-authoritative（-a）：&lt;/strong&gt;クラスマップからのみクラスをオートロードします。 &lt;code&gt;--optimize-autoloader&lt;/code&gt; を暗黙的に有効にします。</target>
        </trans-unit>
        <trans-unit id="1a5a400d83b6b0ab4fd61f58f8b4ac0e22c50191" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--classmap-authoritative (-a):&lt;/strong&gt; Autoload classes from the classmap only. Implicitly enables &lt;code&gt;--optimize&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--classmap-authoritative（-a）：&lt;/strong&gt;クラスマップからのみクラスをオートロードします。 &lt;code&gt;--optimize&lt;/code&gt; を暗黙的に有効にします 。</target>
        </trans-unit>
        <trans-unit id="e61a887544eda06725c54d9026f05db95f65ef6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--clean-backups:&lt;/strong&gt; Delete old backups during an update. This makes the current version of Composer the only backup available after the update.</source>
          <target state="translated">&lt;strong&gt;--clean-backups：&lt;/strong&gt;更新中に古いバックアップを削除します。 これにより、現在のバージョンのComposerが、更新後に使用できる唯一のバックアップになります。</target>
        </trans-unit>
        <trans-unit id="a1781db80bdda4a7187020ebe3e4a001640577ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--description:&lt;/strong&gt; Description of the package.</source>
          <target state="translated">&lt;strong&gt;--description：&lt;/strong&gt;パッケージの説明。</target>
        </trans-unit>
        <trans-unit id="3c3237d5ec8261f1a62db7391df06071b985a12c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dev:&lt;/strong&gt; Add packages to &lt;code&gt;require-dev&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--dev：&lt;/strong&gt; &lt;code&gt;require-dev&lt;/code&gt; にパッケージを追加します。</target>
        </trans-unit>
        <trans-unit id="7b85e4c322b3a94bab7b40bde3ae8f3177989801" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dev:&lt;/strong&gt; Install packages listed in &lt;code&gt;require-dev&lt;/code&gt; (this is the default behavior).</source>
          <target state="translated">&lt;strong&gt;--dev：&lt;/strong&gt; &lt;code&gt;require-dev&lt;/code&gt; にリストされているパッケージをインストールします（これはデフォルトの動作です）。</target>
        </trans-unit>
        <trans-unit id="bd9a9396996057e266c59adea7e719cecdf2f25a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dev:&lt;/strong&gt; Install packages listed in &lt;code&gt;require-dev&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--dev：&lt;/strong&gt; &lt;code&gt;require-dev&lt;/code&gt; にリストされているパッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="5ba13a3634f9c75ec03e84f10520c9cd89990b40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dev:&lt;/strong&gt; Remove packages from &lt;code&gt;require-dev&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--dev：&lt;/strong&gt; &lt;code&gt;require-dev&lt;/code&gt; からパッケージを削除します。</target>
        </trans-unit>
        <trans-unit id="17e87b7ddca31591b3c65a0614b9011c92fc8afa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dev:&lt;/strong&gt; Sets the dev mode.</source>
          <target state="translated">&lt;strong&gt;--dev：開発&lt;/strong&gt;モードを設定します。</target>
        </trans-unit>
        <trans-unit id="91c0dc4766e2ebc6f181d78c5717ed9c6942b828" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dir:&lt;/strong&gt; Write the archive to this directory (default: &quot;.&quot;)</source>
          <target state="translated">&lt;strong&gt;--dir：&lt;/strong&gt;このディレクトリにアーカイブを書き込みます（デフォルト： &quot;。&quot;）</target>
        </trans-unit>
        <trans-unit id="8fe22edfc27397c3d36e9e89be864072aa35241f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--direct (-D):&lt;/strong&gt; Restricts the list of packages to your direct dependencies.</source>
          <target state="translated">&lt;strong&gt;--direct（-D）：&lt;/strong&gt;パッケージのリストを直接の依存関係に制限します。</target>
        </trans-unit>
        <trans-unit id="6aaa26835161c91175aa04b808343b783352d92f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dry-run:&lt;/strong&gt; If you want to run through an installation without actually installing a package, you can use &lt;code&gt;--dry-run&lt;/code&gt;. This will simulate the installation and show you what would happen.</source>
          <target state="translated">&lt;strong&gt;--dry-run：&lt;/strong&gt;実際にパッケージをインストールせずにインストールを実行したい場合は、 &lt;code&gt;--dry-run&lt;/code&gt; を使用できます。 これはインストールをシミュレートし、何が起こるかを示します。</target>
        </trans-unit>
        <trans-unit id="ecc8b40af03d44f84feefa1a79a3111aa59277ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dry-run:&lt;/strong&gt; Simulate the command without actually doing anything.</source>
          <target state="translated">&lt;strong&gt;--dry-run：&lt;/strong&gt;実際には何もせずにコマンドをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="eb4cf15691dfeabfe5d9acb26299e1d77ff0ea64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--editor (-e):&lt;/strong&gt; Open the local composer.json file using in a text editor as defined by the &lt;code&gt;EDITOR&lt;/code&gt; env variable. With the &lt;code&gt;--global&lt;/code&gt; option, this opens the global config file.</source>
          <target state="translated">&lt;strong&gt;--editor（-e）：&lt;/strong&gt; &lt;code&gt;EDITOR&lt;/code&gt; env変数で定義されているように、テキストエディターでローカルcomposer.jsonファイルを開きます。 &lt;code&gt;--global&lt;/code&gt; オプションを使用すると、グローバル設定ファイルが開きます。</target>
        </trans-unit>
        <trans-unit id="943978498ae9ab15ce459d1cb0a2e10a9439da83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--file:&lt;/strong&gt; Write the archive with the given file name.</source>
          <target state="translated">&lt;strong&gt;--file：&lt;/strong&gt;指定されたファイル名でアーカイブを書き込みます。</target>
        </trans-unit>
        <trans-unit id="9b6b0bdcdf9143a74e62d6e1db83ab688e5c1834" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--file=&quot;...&quot; (-f):&lt;/strong&gt; Operate on a specific file instead of composer.json. Note that this cannot be used in conjunction with the &lt;code&gt;--global&lt;/code&gt; option.</source>
          <target state="translated">&lt;strong&gt;--file = &quot;...&quot;（-f）：&lt;/strong&gt; composer.jsonの代わりに特定のファイルを操作します。 これは &lt;code&gt;--global&lt;/code&gt; オプションと一緒に使用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="659a1e21cbb0221761c3aff2cd66d56382f70801" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--format (-f):&lt;/strong&gt; Format of the resulting archive: tar or zip (default: &quot;tar&quot;)</source>
          <target state="translated">&lt;strong&gt;--format（-f）：&lt;/strong&gt;結果のアーカイブの形式：tarまたはzip（デフォルト： &quot;tar&quot;）</target>
        </trans-unit>
        <trans-unit id="5c612927ebb4a11278c5f202a204a0a5f03bcd21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--format (-f):&lt;/strong&gt; Lets you pick between text (default) or json output format.</source>
          <target state="translated">&lt;strong&gt;--format（-f）：&lt;/strong&gt;テキスト（デフォルト）またはjson出力フォーマットから選択できます。</target>
        </trans-unit>
        <trans-unit id="c91dc0c1155b96d1b57b79e67c218f044efc2a74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--format:&lt;/strong&gt; Format of the output: text or json (default: &quot;text&quot;)</source>
          <target state="translated">&lt;strong&gt;--format：&lt;/strong&gt;出力の形式：textまたはjson（デフォルト： &quot;text&quot;）</target>
        </trans-unit>
        <trans-unit id="de4ea042f2767199ae39a7d6bfda61867b9330a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--global (-g):&lt;/strong&gt; Operate on the global config file located at &lt;code&gt;$COMPOSER_HOME/config.json&lt;/code&gt; by default. Without this option, this command affects the local composer.json file or a file specified by &lt;code&gt;--file&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--global（-g）：&lt;/strong&gt;デフォルトでは、 &lt;code&gt;$COMPOSER_HOME/config.json&lt;/code&gt; あるグローバル構成ファイルを操作します。 このオプションがない場合、このコマンドはローカルのcomposer.jsonファイルまたは &lt;code&gt;--file&lt;/code&gt; で指定されたファイルに影響します。</target>
        </trans-unit>
        <trans-unit id="0ec73deaf9374b0b7955dbcc3b9d179cc442d790" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--help (-h):&lt;/strong&gt; Display help information.</source>
          <target state="translated">&lt;strong&gt;--help（-h）：&lt;/strong&gt;ヘルプ情報を表示します。</target>
        </trans-unit>
        <trans-unit id="590e94faeb874423eecbf9ce2380df0d1454cf51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--homepage (-H):&lt;/strong&gt; Open the homepage instead of the repository URL.</source>
          <target state="translated">&lt;strong&gt;--homepage（-H）：&lt;/strong&gt;リポジトリURLの代わりにホームページを開きます。</target>
        </trans-unit>
        <trans-unit id="e6d2210ad5dfa4b17c04487c08704d1875d1e18c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--homepage:&lt;/strong&gt; Homepage of the package.</source>
          <target state="translated">&lt;strong&gt;--homepage：&lt;/strong&gt;パッケージのホームページ。</target>
        </trans-unit>
        <trans-unit id="362276146b492a875910f38b6f642c647715944a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--ignore-platform-reqs:&lt;/strong&gt; ignore &lt;code&gt;php&lt;/code&gt;, &lt;code&gt;hhvm&lt;/code&gt;, &lt;code&gt;lib-*&lt;/code&gt; and &lt;code&gt;ext-*&lt;/code&gt; requirements and force the installation even if the local machine does not fulfill these.</source>
          <target state="translated">&lt;strong&gt;--ignore-platform-reqs：&lt;/strong&gt; &lt;code&gt;php&lt;/code&gt; 、 &lt;code&gt;hhvm&lt;/code&gt; 、 &lt;code&gt;lib-*&lt;/code&gt; および &lt;code&gt;ext-*&lt;/code&gt; の要件を無視し、ローカルマシンがこれらを満たさない場合でもインストールを強制します。</target>
        </trans-unit>
        <trans-unit id="c622d4c08a8d9d565106baf426b408159b1cff4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--ignore-platform-reqs:&lt;/strong&gt; ignore &lt;code&gt;php&lt;/code&gt;, &lt;code&gt;hhvm&lt;/code&gt;, &lt;code&gt;lib-*&lt;/code&gt; and &lt;code&gt;ext-*&lt;/code&gt; requirements and force the installation even if the local machine does not fulfill these. See also the &lt;a href=&quot;06-config.md#platform&quot;&gt;&lt;code&gt;platform&lt;/code&gt;&lt;/a&gt; config option.</source>
          <target state="translated">&lt;strong&gt;--ignore-platform-reqs：&lt;/strong&gt; &lt;code&gt;php&lt;/code&gt; 、 &lt;code&gt;hhvm&lt;/code&gt; 、 &lt;code&gt;lib-*&lt;/code&gt; および &lt;code&gt;ext-*&lt;/code&gt; の要件を無視し、ローカルマシンがこれらを満たさない場合でもインストールを強制します。 &lt;a href=&quot;06-config.md#platform&quot;&gt; &lt;code&gt;platform&lt;/code&gt; &lt;/a&gt; configオプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="b0d7e505532b41d64c6416ffdbcbcaa1f34ad469" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--installed (-i):&lt;/strong&gt; List the packages that are installed (this is enabled by default, and deprecated).</source>
          <target state="translated">&lt;strong&gt;--installed（-i）：&lt;/strong&gt;インストールされているパッケージをリストします（これはデフォルトで有効になっていて、非推奨です）。</target>
        </trans-unit>
        <trans-unit id="7bb8181536f98c0f1c75ab90ad8001a1716516d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--interactive:&lt;/strong&gt; Interactive interface with autocompletion to select the packages to update.</source>
          <target state="translated">&lt;strong&gt;--interactive：&lt;/strong&gt;更新するパッケージを選択するためのオートコンプリートを備えたインタラクティブなインターフェース。</target>
        </trans-unit>
        <trans-unit id="3be741ac62d9530ee5e1d21b3df1ecbee139ee8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--keep-vcs:&lt;/strong&gt; Skip the deletion of the VCS metadata for the created project. This is mostly useful if you run the command in non-interactive mode.</source>
          <target state="translated">&lt;strong&gt;--keep-vcs：&lt;/strong&gt;作成されたプロジェクトのVCSメタデータの削除をスキップします。 これは、非対話モードでコマンドを実行する場合に最も役立ちます。</target>
        </trans-unit>
        <trans-unit id="9c3969d77674d274d1b6cd87d51f3f9d07d7967e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--latest (-l):&lt;/strong&gt; List all installed packages including their latest version.</source>
          <target state="translated">&lt;strong&gt;--latest（-l）：&lt;/strong&gt;インストールされているすべてのパッケージを最新バージョンを含めて一覧表示します。</target>
        </trans-unit>
        <trans-unit id="085d066bda65add716833dbc98538672d289de65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--license (-l):&lt;/strong&gt; License of package.</source>
          <target state="translated">&lt;strong&gt;--license（-l）：&lt;/strong&gt;パッケージのライセンス。</target>
        </trans-unit>
        <trans-unit id="f48801de109320f2bb4dc4b2a8f97a0d0609a435" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--list (-l):&lt;/strong&gt; List the available composer binaries.</source>
          <target state="translated">&lt;strong&gt;--list（-l）：&lt;/strong&gt;利用可能なcomposerバイナリを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="4039633ce1b90616305f938d369e276e5ae60b97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--list (-l):&lt;/strong&gt; List user defined scripts.</source>
          <target state="translated">&lt;strong&gt;--list（-l）：&lt;/strong&gt;ユーザー定義スクリプトをリストします。</target>
        </trans-unit>
        <trans-unit id="32c137ac5f6d53ba055415e124f6c31525ac19c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--list (-l):&lt;/strong&gt; Show the list of current config variables. With the &lt;code&gt;--global&lt;/code&gt; option this lists the global configuration only.</source>
          <target state="translated">&lt;strong&gt;--list（-l）：&lt;/strong&gt;現在の設定変数のリストを表示します。 &lt;code&gt;--global&lt;/code&gt; オプションを使用すると、グローバル設定のみが一覧表示されます。</target>
        </trans-unit>
        <trans-unit id="72ff0a3ad2fdd0b114a9fd794172d6338e7dc7ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--lock:&lt;/strong&gt; Only updates the lock file hash to suppress warning about the lock file being out of date.</source>
          <target state="translated">&lt;strong&gt;--lock：&lt;/strong&gt;ロックファイルのハッシュのみを更新して、ロックファイルが古くなっているという警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="983161050f323402209940917450a0eaa16dad3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--minor-only (-m):&lt;/strong&gt; Only shows packages that have minor SemVer-compatible updates.</source>
          <target state="translated">&lt;strong&gt;--minor-only（-m）：&lt;/strong&gt; SemVer互換のマイナーアップデートがあるパッケージのみを表示します。</target>
        </trans-unit>
        <trans-unit id="5ba29fcb0a6f804b1d1c0e199ae109c4a4418eb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--minor-only (-m):&lt;/strong&gt; Use with --latest. Only shows packages that have minor SemVer-compatible updates.</source>
          <target state="translated">&lt;strong&gt;--minor-only（-m）：--latest&lt;/strong&gt;と共に使用します。 SemVer互換のマイナーアップデートがあるパッケージのみを表示します。</target>
        </trans-unit>
        <trans-unit id="fdd8aa443c682088b133c921732d266443081b97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--name-only (-N):&lt;/strong&gt; List package names only.</source>
          <target state="translated">&lt;strong&gt;--name-only（-N）：&lt;/strong&gt;パッケージ名のみを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="4a7bf7a8caaf051fcfad6b8466167846d0ce88f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--name:&lt;/strong&gt; Name of the package.</source>
          <target state="translated">&lt;strong&gt;--name：&lt;/strong&gt;パッケージの名前。</target>
        </trans-unit>
        <trans-unit id="eef784e5890b101fa241f172e76e8c3555d37459" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-ansi:&lt;/strong&gt; Disable ANSI output.</source>
          <target state="translated">&lt;strong&gt;--no-ansi：&lt;/strong&gt; ANSI出力を無効にします。</target>
        </trans-unit>
        <trans-unit id="387943bf1b3ed3aace86fe9cbf17713d4ff2eace" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-autoloader:&lt;/strong&gt; Skips autoloader generation.</source>
          <target state="translated">&lt;strong&gt;--no-autoloader：&lt;/strong&gt;オートローダーの生成をスキップします。</target>
        </trans-unit>
        <trans-unit id="d37de835b97ed526cc926032b14f2fc7b6165a6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-cache:&lt;/strong&gt; Disables the use of the cache directory. Same as setting the COMPOSER_CACHE_DIR env var to /dev/null (or NUL on Windows).</source>
          <target state="translated">&lt;strong&gt;--no-cache：&lt;/strong&gt;キャッシュディレクトリの使用を無効にします。 COMPOSER_CACHE_DIR環境変数を/ dev / null（WindowsではNUL）に設定するのと同じです。</target>
        </trans-unit>
        <trans-unit id="a2fe70ec4b0e47428c2fc6e83e5fda244dee190b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-check-all:&lt;/strong&gt; Do not emit a warning if requirements in &lt;code&gt;composer.json&lt;/code&gt; use unbound or overly strict version constraints.</source>
          <target state="translated">&lt;strong&gt;--no-check-all：&lt;/strong&gt; &lt;code&gt;composer.json&lt;/code&gt; の要件でバインドされていない、または非常に厳密なバージョンの制約が使用されている場合、警告を&lt;strong&gt;発行&lt;/strong&gt;しません。</target>
        </trans-unit>
        <trans-unit id="66dd00e74a9689610353942214160c2588e15e69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-check-lock:&lt;/strong&gt; Do not emit an error if &lt;code&gt;composer.lock&lt;/code&gt; exists and is not up to date.</source>
          <target state="translated">&lt;strong&gt;--no-check-lock：&lt;/strong&gt; &lt;code&gt;composer.lock&lt;/code&gt; が存在し、最新でない場合でもエラーを出力しません。</target>
        </trans-unit>
        <trans-unit id="0312657edd42b7d6194357d6c323a08d086ac6ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-check-publish:&lt;/strong&gt; Do not emit an error if &lt;code&gt;composer.json&lt;/code&gt; is unsuitable for publishing as a package on Packagist but is otherwise valid.</source>
          <target state="translated">&lt;strong&gt;--no-check-publish：&lt;/strong&gt; composer.jsonがPackagistでパッケージとして公開するのに適していないが、それ以外の場合は有効である場合、エラーを出力しません。</target>
        </trans-unit>
        <trans-unit id="478cf0d7cf6c299e583b7f5eeeb71aa128a5a5ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-dev:&lt;/strong&gt; Disable dev mode.</source>
          <target state="translated">&lt;strong&gt;--no-dev：&lt;/strong&gt;開発モードを無効にします。</target>
        </trans-unit>
        <trans-unit id="33b4918df9d8207addad27d893dd3d1104fd8e9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-dev:&lt;/strong&gt; Disables autoload-dev rules.</source>
          <target state="translated">&lt;strong&gt;--no-dev：&lt;/strong&gt; autoload-devルールを無効にします。</target>
        </trans-unit>
        <trans-unit id="2215266c8be34ec3720733be85ba076b0d08e87b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-dev:&lt;/strong&gt; Disables installation of require-dev packages.</source>
          <target state="translated">&lt;strong&gt;--no-dev：&lt;/strong&gt; require-devパッケージのインストールを無効にします。</target>
        </trans-unit>
        <trans-unit id="c9c0d99cdbd04b725a72f21c014cd2b0795270ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-dev:&lt;/strong&gt; Excludes suggestions from &lt;code&gt;require-dev&lt;/code&gt; packages.</source>
          <target state="translated">&lt;strong&gt;--no-dev：&lt;/strong&gt; &lt;code&gt;require-dev&lt;/code&gt; パッケージからの提案を除外します。</target>
        </trans-unit>
        <trans-unit id="c2496eca3984956706deed36f576f4df48bbf792" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-dev:&lt;/strong&gt; Remove dev dependencies from the output</source>
          <target state="translated">&lt;strong&gt;--no-dev：&lt;/strong&gt;出力からdevの依存関係を削除します</target>
        </trans-unit>
        <trans-unit id="fa5a4dd82b9a32babe8d8d3fd7eda7f2346f1a4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-dev:&lt;/strong&gt; Skip installing packages listed in &lt;code&gt;require-dev&lt;/code&gt;. The autoloader generation skips the &lt;code&gt;autoload-dev&lt;/code&gt; rules.</source>
          <target state="translated">&lt;strong&gt;--no-dev：&lt;/strong&gt; &lt;code&gt;require-dev&lt;/code&gt; にリストされているパッケージのインストールをスキップします。 オートローダーの生成は、 &lt;code&gt;autoload-dev&lt;/code&gt; ルールをスキップします。</target>
        </trans-unit>
        <trans-unit id="4d87ee3b9b8c831ade789e27909dd3bf83a05766" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-install:&lt;/strong&gt; Disables installation of the vendors.</source>
          <target state="translated">&lt;strong&gt;--no-install：&lt;/strong&gt;ベンダーのインストールを無効にします。</target>
        </trans-unit>
        <trans-unit id="0e2dd7facaf0d3d64be7dd6ad9c937435b4c0ed3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-interaction (-n):&lt;/strong&gt; Do not ask any interactive question.</source>
          <target state="translated">&lt;strong&gt;--no-interaction（-n）：&lt;/strong&gt;インタラクティブな質問をしません。</target>
        </trans-unit>
        <trans-unit id="338aaff32a0346a9aef4270ee82adff9a2b81f00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-plugins:&lt;/strong&gt; Disables plugins.</source>
          <target state="translated">&lt;strong&gt;--no-plugins：プラグインを&lt;/strong&gt;無効にします。</target>
        </trans-unit>
        <trans-unit id="b6db78133c9dc3a331aee25dbfebaa946fde56ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-progress:&lt;/strong&gt; Do not output download progress.</source>
          <target state="translated">&lt;strong&gt;--no-progress：&lt;/strong&gt;ダウンロードの進行状況を出力しません。</target>
        </trans-unit>
        <trans-unit id="ec017d78b532aac5f6e563c76cc0ddf35b6bc559" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-progress:&lt;/strong&gt; Removes the progress display that can mess with some terminals or scripts which don't handle backspace characters.</source>
          <target state="translated">&lt;strong&gt;--no-progress：&lt;/strong&gt;バックスペース文字を処理しない一部の端末またはスクリプトを混乱させる可能性がある進行状況表示を削除します。</target>
        </trans-unit>
        <trans-unit id="0ab8aa4b90617335ca20c01d0c31fdb6ecf90d53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-scripts:&lt;/strong&gt; Disables the execution of the scripts defined in the root package.</source>
          <target state="translated">&lt;strong&gt;--no-scripts：&lt;/strong&gt;ルートパッケージで定義されたスクリプトの実行を無効にします。</target>
        </trans-unit>
        <trans-unit id="2f462f5e04ea5de751f245a73a853fd7da6da59b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-scripts:&lt;/strong&gt; Skips execution of scripts defined in &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--no-scripts：&lt;/strong&gt; &lt;code&gt;composer.json&lt;/code&gt; で定義されたスクリプトの実行をスキップします。</target>
        </trans-unit>
        <trans-unit id="199d11c67222c42b6782424630d9fe7477f1b04b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-scripts:&lt;/strong&gt; Skips the execution of all scripts defined in &lt;code&gt;composer.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;strong&gt;--no-scripts：&lt;/strong&gt; &lt;code&gt;composer.json&lt;/code&gt; ファイルで定義されているすべてのスクリプトの実行をスキップします。</target>
        </trans-unit>
        <trans-unit id="20b10ba3c35298247600417854a02c7ebca6293f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-secure-http:&lt;/strong&gt; Disable the secure-http config option temporarily while installing the root package. Use at your own risk. Using this flag is a bad idea.</source>
          <target state="translated">&lt;strong&gt;--no-secure-http：&lt;/strong&gt;ルートパッケージのインストール中に、secure-http設定オプションを一時的に無効にします。 自己責任。 このフラグの使用は悪い考えです。</target>
        </trans-unit>
        <trans-unit id="e3448e78d83e13cdf17aeb6014c57abcc788634a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-suggest:&lt;/strong&gt; Skips suggested packages in the output.</source>
          <target state="translated">&lt;strong&gt;--no-suggest：&lt;/strong&gt;出力で推奨パッケージをスキップします。</target>
        </trans-unit>
        <trans-unit id="61d5ee9e9d1b2241aea940bb023f6cc3819c22e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-update:&lt;/strong&gt; Disables the automatic update of the dependencies.</source>
          <target state="translated">&lt;strong&gt;--no-update：&lt;/strong&gt;依存関係の自動更新を無効にします。</target>
        </trans-unit>
        <trans-unit id="18ec46eafe06a346360e0c2ab299de540abcd326" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--only-name (-N):&lt;/strong&gt; Search only in name.</source>
          <target state="translated">&lt;strong&gt;--only-name（-N）：&lt;/strong&gt;名前のみで検索します。</target>
        </trans-unit>
        <trans-unit id="6ece66fc983b90b4843f17873aa4b8e86aa5509f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--optimize (-o):&lt;/strong&gt; Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.</source>
          <target state="translated">&lt;strong&gt;--optimize（-o）：&lt;/strong&gt;より高速なオートローダーを取得するために、PSR-0 / 4自動読み込みをクラスマップに変換します。 これは特に本番環境で推奨されますが、実行に少し時間がかかる可能性があるため、現在デフォルトでは実行されていません。</target>
        </trans-unit>
        <trans-unit id="c85f802b66283eaa75c0b55cc4c2ff31044efc61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--optimize-autoloader (-o):&lt;/strong&gt; Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.</source>
          <target state="translated">&lt;strong&gt;--optimize-autoloader（-o）：&lt;/strong&gt;より高速なオートローダーを取得するために、PSR-0 / 4自動読み込みをクラスマップに変換します。 これは特に本番環境で推奨されますが、実行に少し時間がかかる可能性があるため、現在デフォルトでは実行されていません。</target>
        </trans-unit>
        <trans-unit id="3ceb3df3d1bb5938696791760a0ef03b92974a4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--outdated (-o):&lt;/strong&gt; Implies --latest, but this lists &lt;em&gt;only&lt;/em&gt; packages that have a newer version available.</source>
          <target state="translated">&lt;strong&gt;--outdated（-o）：--&lt;/strong&gt; latestを意味しますが、新しいバージョンが利用可能なパッケージ&lt;em&gt;のみ&lt;/em&gt;がリストされます。</target>
        </trans-unit>
        <trans-unit id="327b42fd6f61c8ba13f911bc3133df81d2dcae30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--path (-P):&lt;/strong&gt; List package paths.</source>
          <target state="translated">&lt;strong&gt;--path（-P）：&lt;/strong&gt;パッケージパスを一覧表示します。</target>
        </trans-unit>
        <trans-unit id="99da7297ab9f643a9d42975ba3b6640a90410676" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--platform (-p):&lt;/strong&gt; List only platform packages (php &amp;amp; extensions).</source>
          <target state="translated">&lt;strong&gt;--platform（-p）：&lt;/strong&gt;プラットフォームパッケージ（php＆拡張）のみをリストします。</target>
        </trans-unit>
        <trans-unit id="96d12d6b4205c09a617d80cc021a8918d7a3cff0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--prefer-dist:&lt;/strong&gt; Install packages from &lt;code&gt;dist&lt;/code&gt; when available.</source>
          <target state="translated">&lt;strong&gt;--prefer-dist：&lt;/strong&gt;利用可能な場合、 &lt;code&gt;dist&lt;/code&gt; からパッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="90a02ee65ccd712464eff6d7ae41c564e37b777b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--prefer-dist:&lt;/strong&gt; Reverse of &lt;code&gt;--prefer-source&lt;/code&gt;, Composer will install from &lt;code&gt;dist&lt;/code&gt; if possible. This can speed up installs substantially on build servers and other use cases where you typically do not run updates of the vendors. It is also a way to circumvent problems with git if you do not have a proper setup.</source>
          <target state="translated">&lt;strong&gt;--prefer-dist：--&lt;/strong&gt; &lt;code&gt;--prefer-source&lt;/code&gt; 逆、Composerは可能であれば &lt;code&gt;dist&lt;/code&gt; からインストールします。 これにより、ビルドサーバーでのインストールや、通常はベンダーの更新を実行しないその他のユースケースでインストールを大幅に高速化できます。 また、適切な設定がない場合にgitの問題を回避する方法でもあります。</target>
        </trans-unit>
        <trans-unit id="dc1861539f4c5c16e8f7caa027821474ae9c4e1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--prefer-lowest:&lt;/strong&gt; Prefer lowest versions of dependencies. Useful for testing minimal versions of requirements, generally used with &lt;code&gt;--prefer-stable&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--prefer-lowest：&lt;/strong&gt;依存関係の最も低いバージョンを&lt;strong&gt;優先し&lt;/strong&gt;ます。 通常 &lt;code&gt;--prefer-stable&lt;/code&gt; で使用される、要件の最小バージョンのテストに役立ちます。</target>
        </trans-unit>
        <trans-unit id="74763d02ffa6f6be2598fcbe149cfd20cd6c6a08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--prefer-source:&lt;/strong&gt; Install packages from &lt;code&gt;source&lt;/code&gt; when available.</source>
          <target state="translated">&lt;strong&gt;--prefer-source：&lt;/strong&gt;可能な場合、 &lt;code&gt;source&lt;/code&gt; からパッケージをインストールします。</target>
        </trans-unit>
        <trans-unit id="a08e518a183628ada7ab7abbb9e8618c00044a6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--prefer-source:&lt;/strong&gt; There are two ways of downloading a package: &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;dist&lt;/code&gt;. For stable versions Composer will use the &lt;code&gt;dist&lt;/code&gt; by default. The &lt;code&gt;source&lt;/code&gt; is a version control repository. If &lt;code&gt;--prefer-source&lt;/code&gt; is enabled, Composer will install from &lt;code&gt;source&lt;/code&gt; if there is one. This is useful if you want to make a bugfix to a project and get a local git clone of the dependency directly.</source>
          <target state="translated">&lt;strong&gt;--prefer-source：&lt;/strong&gt;パッケージをダウンロードするには、 &lt;code&gt;source&lt;/code&gt; と &lt;code&gt;dist&lt;/code&gt; の 2つの方法があります。 安定したバージョンの場合、Composerはデフォルトで &lt;code&gt;dist&lt;/code&gt; を使用します。 &lt;code&gt;source&lt;/code&gt; はバージョン管理リポジトリです。 &lt;code&gt;--prefer-source&lt;/code&gt; が有効になっている場合、Composerは &lt;code&gt;source&lt;/code&gt; 場合はソースからインストールします 。 これは、プロジェクトにバグ修正を行い、依存関係のローカルgitクローンを直接取得する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="fc6cda61acf1d50859b32513ed6dce7db0d15b24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--prefer-stable:&lt;/strong&gt; Prefer stable versions of dependencies.</source>
          <target state="translated">&lt;strong&gt;--prefer-stable：&lt;/strong&gt;安定したバージョンの依存関係を&lt;strong&gt;優先&lt;/strong&gt;します。</target>
        </trans-unit>
        <trans-unit id="b706e5fa49c266823be2908787e21d21a4da56e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--preview:&lt;/strong&gt; Force an update to the preview channel.</source>
          <target state="translated">&lt;strong&gt;--preview：&lt;/strong&gt;プレビューチャネルを強制的に更新します。</target>
        </trans-unit>
        <trans-unit id="fec703c6b8bf454a2c0094d2f582b37ef4f4f050" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--profile:&lt;/strong&gt; Display timing and memory usage information</source>
          <target state="translated">&lt;strong&gt;--profile：&lt;/strong&gt;タイミングとメモリ使用量の情報を表示します</target>
        </trans-unit>
        <trans-unit id="c9663b0573f22877b83653ea4ffaf9440f320758" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--quiet (-q):&lt;/strong&gt; Do not output any message.</source>
          <target state="translated">&lt;strong&gt;--quiet（-q）：&lt;/strong&gt;メッセージを出力しません。</target>
        </trans-unit>
        <trans-unit id="801c2afba24e529f743a45d30775c542f3b7954d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--recursive (-r):&lt;/strong&gt; Recursively resolves up to the root package.</source>
          <target state="translated">&lt;strong&gt;--recursive（-r）：&lt;/strong&gt;ルートパッケージまで再帰的に解決します。</target>
        </trans-unit>
        <trans-unit id="0ef1d9bcfcbc4aad51868b6c163c71782231bc48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--remove-vcs:&lt;/strong&gt; Force-remove the VCS metadata without prompting.</source>
          <target state="translated">&lt;strong&gt;--remove-vcs：&lt;/strong&gt;プロンプトを表示せずにVCSメタデータを強制的に削除します。</target>
        </trans-unit>
        <trans-unit id="7984bbd9183b33633a40e3cf001cec9d3232b5c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--repository:&lt;/strong&gt; Provide a custom repository to search for the package, which will be used instead of packagist. Can be either an HTTP URL pointing to a &lt;code&gt;composer&lt;/code&gt; repository, a path to a local &lt;code&gt;packages.json&lt;/code&gt; file, or a JSON string which similar to what the &lt;a href=&quot;04-schema.md#repositories&quot;&gt;repositories&lt;/a&gt; key accepts.</source>
          <target state="translated">&lt;strong&gt;--repository：&lt;/strong&gt;パッケージを検索するためのカスタムリポジトリを提供します。これはpackagistの代わりに使用されます。 &lt;code&gt;composer&lt;/code&gt; リポジトリーを指すHTTP URL、ローカルの &lt;code&gt;packages.json&lt;/code&gt; ファイルへのパス、または&lt;a href=&quot;04-schema.md#repositories&quot;&gt;リポジトリー&lt;/a&gt;キーが受け入れるものと同様のJSON文字列のいずれかになります 。</target>
        </trans-unit>
        <trans-unit id="31ff4ec1c94dbce4eefe51f7cbcd4d88257e4210" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--repository:&lt;/strong&gt; Provide one (or more) custom repositories. They will be stored in the generated composer.json, and used for auto-completion when prompting for the list of requires. Every repository can be either an HTTP URL pointing to a &lt;code&gt;composer&lt;/code&gt; repository or a JSON string which similar to what the &lt;a href=&quot;04-schema.md#repositories&quot;&gt;repositories&lt;/a&gt; key accepts.</source>
          <target state="translated">&lt;strong&gt;--repository：&lt;/strong&gt; 1つ（または複数）のカスタムリポジトリを提供します。 これらは、生成されたcomposer.jsonに格納され、requiresのリストを要求するときにオートコンプリートに使用されます。 すべてのリポジトリは、 &lt;code&gt;composer&lt;/code&gt; リポジトリを指すHTTP URLまたは&lt;a href=&quot;04-schema.md#repositories&quot;&gt;リポジトリ&lt;/a&gt;キーが受け入れるものに類似したJSON文字列のいずれかです 。</target>
        </trans-unit>
        <trans-unit id="0f6905fbc9cfb7b9c687630730796eff1ffccfb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--require-dev:&lt;/strong&gt; Development requirements, see &lt;strong&gt;--require&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;--require-dev：&lt;/strong&gt;開発要件&lt;strong&gt;。--requireを&lt;/strong&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d3c22afe8ccde6da606ef27f402b5cd65739b5a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--require:&lt;/strong&gt; Package to require with a version constraint. Should be in format &lt;code&gt;foo/bar:1.0.0&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--require：&lt;/strong&gt;バージョンの制約が必要なパッケージ。 &lt;code&gt;foo/bar:1.0.0&lt;/code&gt; の形式にする必要があります。</target>
        </trans-unit>
        <trans-unit id="a873ce46364150747629463652004637586a1121" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--rollback (-r):&lt;/strong&gt; Rollback to the last version you had installed.</source>
          <target state="translated">&lt;strong&gt;--rollback（-r）：&lt;/strong&gt;インストールした最後のバージョンにロールバックします。</target>
        </trans-unit>
        <trans-unit id="9709706c604505ed5da4cec4e3b02bf77dc7ac24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--root-reqs:&lt;/strong&gt; Restricts the update to your first degree dependencies.</source>
          <target state="translated">&lt;strong&gt;--root-reqs：&lt;/strong&gt;更新を1次依存関係に制限します。</target>
        </trans-unit>
        <trans-unit id="ff0cae2ac2279d93932eb2ec7087d210ce778579" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--self (-s):&lt;/strong&gt; List the root package info.</source>
          <target state="translated">&lt;strong&gt;--self（-s）：&lt;/strong&gt;ルートパッケージ情報を一覧表示します。</target>
        </trans-unit>
        <trans-unit id="c4d2fa15c5d0bde93ff6308ca429e57fdba0dfb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--show (-s):&lt;/strong&gt; Only show the homepage or repository URL.</source>
          <target state="translated">&lt;strong&gt;--show（-s）：&lt;/strong&gt;ホームページまたはリポジトリのURLのみを表示します。</target>
        </trans-unit>
        <trans-unit id="fed2c0799b53b670b7f2fe65bc86bbcd6359f705" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--snapshot:&lt;/strong&gt; Force an update to the snapshot channel.</source>
          <target state="translated">&lt;strong&gt;--snapshot：&lt;/strong&gt;スナップショットチャネルを強制的に更新します。</target>
        </trans-unit>
        <trans-unit id="c76a0d7f47313017104bffa7155e0f92ebcbde3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--sort-packages:&lt;/strong&gt; Keep packages sorted in &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--sort-packages：&lt;/strong&gt; &lt;code&gt;composer.json&lt;/code&gt; でパッケージをソートしたままにします。</target>
        </trans-unit>
        <trans-unit id="c1ecb4375a4182c894adefec9be69e0c6095e623" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--stability (-s):&lt;/strong&gt; Minimum stability of package. Defaults to &lt;code&gt;stable&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--stability（-s）：&lt;/strong&gt;パッケージの最小安定性。 デフォルトは &lt;code&gt;stable&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e30444ca5d6754585a1dd17c6306ede6e9612c3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--stability (-s):&lt;/strong&gt; Value for the &lt;code&gt;minimum-stability&lt;/code&gt; field.</source>
          <target state="translated">&lt;strong&gt;--stability（-s）：&lt;/strong&gt; &lt;code&gt;minimum-stability&lt;/code&gt; フィールドの値。</target>
        </trans-unit>
        <trans-unit id="af05dd8820fc74dda5954af65e01f230e4a8a343" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--stable:&lt;/strong&gt; Force an update to the stable channel.</source>
          <target state="translated">&lt;strong&gt;--stable：&lt;/strong&gt;安定したチャネルを強制的に更新します。</target>
        </trans-unit>
        <trans-unit id="0ce291a1ad6cde49ba197595b9ce3245ed305188" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--strict:&lt;/strong&gt; Return a non-zero exit code for warnings as well as errors.</source>
          <target state="translated">&lt;strong&gt;--strict：&lt;/strong&gt;警告およびエラーに対して、ゼロ以外の終了コードを返します。</target>
        </trans-unit>
        <trans-unit id="677a4f8a5917a4e1258ba9dfa1e60b1d106b73c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--strict:&lt;/strong&gt; Return a non-zero exit code when there are outdated packages.</source>
          <target state="translated">&lt;strong&gt;--strict：&lt;/strong&gt;古いパッケージがある場合、ゼロ以外の終了コードを返します。</target>
        </trans-unit>
        <trans-unit id="d31fe1a158fba316dbbe2c8d9c17041cba03853d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--strict:&lt;/strong&gt; Returns non-zero exit code if any package is outdated.</source>
          <target state="translated">&lt;strong&gt;--strict：&lt;/strong&gt;パッケージが古い場合、ゼロ以外の終了コードを返します。</target>
        </trans-unit>
        <trans-unit id="482043461ddcf6b3cf3678498b882f8bded2634f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--timeout:&lt;/strong&gt; Set the script timeout in seconds, or 0 for no timeout.</source>
          <target state="translated">&lt;strong&gt;--timeout：&lt;/strong&gt;スクリプトのタイムアウトを秒単位で設定するか、タイムアウトなしの場合は0を設定します。</target>
        </trans-unit>
        <trans-unit id="cdda1854a4c8a1992d305e65ec0456c58f9c4390" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--tree (-t):&lt;/strong&gt; List your dependencies as a tree. If you pass a package name it will show the dependency tree for that package.</source>
          <target state="translated">&lt;strong&gt;--tree（-t）：&lt;/strong&gt;依存関係をツリーとしてリストします。 パッケージ名を渡すと、そのパッケージの依存関係ツリーが表示されます。</target>
        </trans-unit>
        <trans-unit id="631e7d74a91253e8ef2774d1d9f9c7d59409ba83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--tree (-t):&lt;/strong&gt; Prints the results as a nested tree, implies -r.</source>
          <target state="translated">&lt;strong&gt;--tree（-t）：&lt;/strong&gt;結果をネストされたツリーとして出力します。-rを意味します。</target>
        </trans-unit>
        <trans-unit id="b3ed5859a1845d71fcb740dce3a02e9069cd464c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--type (-t):&lt;/strong&gt; Search for a specific package type.</source>
          <target state="translated">&lt;strong&gt;--type（-t）：&lt;/strong&gt;特定のパッケージタイプを検索します。</target>
        </trans-unit>
        <trans-unit id="dfc629fd189876f798cc8eba1cf2e5602f408c00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--type:&lt;/strong&gt; Type of package.</source>
          <target state="translated">&lt;strong&gt;--type：&lt;/strong&gt;パッケージのタイプ。</target>
        </trans-unit>
        <trans-unit id="59e7a681e63aa4e5e0c188cfea5ec69716ffcfa3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--unset:&lt;/strong&gt; Remove the configuration element named by &lt;code&gt;setting-key&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--unset：&lt;/strong&gt; &lt;code&gt;setting-key&lt;/code&gt; で指定された構成要素を削除します。</target>
        </trans-unit>
        <trans-unit id="cc7e74e23beb39a9571575c4733da72fea85b991" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--update-keys:&lt;/strong&gt; Prompt user for a key update.</source>
          <target state="translated">&lt;strong&gt;--update-keys：&lt;/strong&gt;ユーザーにキーの更新を要求します。</target>
        </trans-unit>
        <trans-unit id="1a8d1c15da24615046b1ad9558caa96adf3cd125" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--update-no-dev:&lt;/strong&gt; Run the dependency update with the --no-dev option.</source>
          <target state="translated">&lt;strong&gt;--update-no-dev：--no&lt;/strong&gt; -devオプションを指定して依存関係の更新を実行します。</target>
        </trans-unit>
        <trans-unit id="d640b4028c4f564009b8726d9c358e75999af529" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--update-no-dev:&lt;/strong&gt; Run the dependency update with the &lt;code&gt;--no-dev&lt;/code&gt; option.</source>
          <target state="translated">&lt;strong&gt;--update-no-dev：--no&lt;/strong&gt; &lt;code&gt;--no-dev&lt;/code&gt; オプションを指定して依存関係の更新を実行します。</target>
        </trans-unit>
        <trans-unit id="f1353fc50d67df7d1048f88fd4582e845885a319" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--update-with-all-dependencies:&lt;/strong&gt; Also update dependencies of the newly required packages, including those that are root requirements.</source>
          <target state="translated">&lt;strong&gt;--update-with-all-dependencies：&lt;/strong&gt;ルート要件であるパッケージを含め、新しく必要なパッケージの依存関係も更新します。</target>
        </trans-unit>
        <trans-unit id="d1246d2ea48925340474895c6d7ec377fee832a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--update-with-dependencies:&lt;/strong&gt; Also update dependencies of the newly required packages, except those that are root requirements.</source>
          <target state="translated">&lt;strong&gt;--update-with-dependencies：&lt;/strong&gt;ルート要件であるパッケージを除いて、新しく必要なパッケージの依存関係も更新します。</target>
        </trans-unit>
        <trans-unit id="b8ba13a53f23cd124b70335d5bcee7fed2eafa72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--update-with-dependencies:&lt;/strong&gt; Also update dependencies of the removed packages.</source>
          <target state="translated">&lt;strong&gt;--update-with-dependencies：&lt;/strong&gt;削除されたパッケージの依存関係も更新します。</target>
        </trans-unit>
        <trans-unit id="7596bc5a7b0242f1baa4bf8464428cdd7ac2048b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--verbose (-v):&lt;/strong&gt; Increase verbosity of messages.</source>
          <target state="translated">&lt;strong&gt;--verbose（-v）：&lt;/strong&gt;メッセージの詳細度を上げます。</target>
        </trans-unit>
        <trans-unit id="e15740473a3b73f146bba611af32263e3cea2c77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--version (-V):&lt;/strong&gt; Display this application version.</source>
          <target state="translated">&lt;strong&gt;--version（-V）：&lt;/strong&gt;このアプリケーションのバージョンを表示します。</target>
        </trans-unit>
        <trans-unit id="be77cf898af6310b33d8538438cff3a368cdb58c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--with-all-dependencies:&lt;/strong&gt; Add also all dependencies of whitelisted packages to the whitelist, including those that are root requirements.</source>
          <target state="translated">&lt;strong&gt;--with-all-dependencies：&lt;/strong&gt;ルート要件であるものを含め、ホワイトリストに登録されたパッケージのすべての依存関係もホワイトリストに追加します。</target>
        </trans-unit>
        <trans-unit id="ff50d0d44432f52015adfb397f223c2a517bd3b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--with-dependencies:&lt;/strong&gt; Add also dependencies of whitelisted packages to the whitelist, except those that are root requirements.</source>
          <target state="translated">&lt;strong&gt;--with-dependencies：&lt;/strong&gt;ルート要件であるものを除いて、ホワイトリストに登録されたパッケージの依存関係もホワイトリストに追加します。</target>
        </trans-unit>
        <trans-unit id="dc7e26a16513b4ea2055f8155835b1d1609a6eac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--with-dependencies:&lt;/strong&gt; Also validate the composer.json of all installed dependencies.</source>
          <target state="translated">&lt;strong&gt;--with-dependencies：&lt;/strong&gt;インストールされているすべての依存関係のcomposer.jsonも検証します。</target>
        </trans-unit>
        <trans-unit id="12fc70d6f7a689d57e8371943643e8d34bfa4213" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--working-dir (-d):&lt;/strong&gt; If specified, use the given directory as working directory.</source>
          <target state="translated">&lt;strong&gt;--working-dir（-d）：&lt;/strong&gt;指定されている場合、指定されたディレクトリを作業ディレクトリとして使用します。</target>
        </trans-unit>
        <trans-unit id="2ddb5e07cc6fa020ccf53c6c7dc6bdca25ffe395" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;0:&lt;/strong&gt; OK</source>
          <target state="translated">&lt;strong&gt;0：&lt;/strong&gt; OK</target>
        </trans-unit>
        <trans-unit id="26588361e31218abb17a1066e167ca8c30d24dc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1:&lt;/strong&gt; Generic/unknown error code</source>
          <target state="translated">&lt;strong&gt;1：&lt;/strong&gt;一般的な/不明なエラーコード</target>
        </trans-unit>
        <trans-unit id="7b49fc70f5e12332fcc306841921b8e49989c836" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2:&lt;/strong&gt; Dependency solving error code</source>
          <target state="translated">&lt;strong&gt;2：&lt;/strong&gt;依存関係解決エラーコード</target>
        </trans-unit>
        <trans-unit id="4c77d8ece173d77948ed51b9ec42cee73be2e11b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;BitBucket:&lt;/strong&gt;&lt;a href=&quot;https://bitbucket.org&quot;&gt;bitbucket.org&lt;/a&gt; (Git and Mercurial)</source>
          <target state="translated">&lt;strong&gt;BitBucket：&lt;/strong&gt; &lt;a href=&quot;https://bitbucket.org&quot;&gt;bitbucket.org&lt;/a&gt; （GitおよびMercurial）</target>
        </trans-unit>
        <trans-unit id="a6ff007121e45355bb9e537533ba87767872c05d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEPRECATED&lt;/strong&gt;: This is only present to support legacy PSR-0 style autoloading, and all new code should preferably use PSR-4 without target-dir and projects using PSR-0 with PHP namespaces are encouraged to migrate to PSR-4 instead.</source>
          <target state="translated">&lt;strong&gt;非推奨&lt;/strong&gt; ：これは、レガシーのPSR-0スタイルの自動読み込みをサポートするためにのみ存在します。すべての新しいコードは、target-dirなしでPSR-4を使用する必要があり、代わりにPSR-0をPHP名前空間で使用するプロジェクトは、PSR-4に移行することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="10d9db569cdd3e4b372d79d5b51743d812f02c27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEPRECATED&lt;/strong&gt;: This is only present to support legacy projects, and all new code should preferably use autoloading. As such it is a deprecated practice, but the feature itself will not likely disappear from Composer.</source>
          <target state="translated">&lt;strong&gt;非推奨&lt;/strong&gt; ：これはレガシープロジェクトをサポートするためにのみ存在し、すべての新しいコードはオートロードを使用する必要があります。 そのため、これは非推奨の方法ですが、機能自体がComposerから消えることはありません。</target>
        </trans-unit>
        <trans-unit id="49fa3b05a631bf394d1bde42c7fbaab76b7110e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dist:&lt;/strong&gt; The dist is a packaged version of the package data. Usually a released version, usually a stable release.</source>
          <target state="translated">&lt;strong&gt;Dist：&lt;/strong&gt; distは、パッケージデータのパッケージバージョンです。 通常はリリースバージョン、通常は安定版リリース。</target>
        </trans-unit>
        <trans-unit id="0c126f672f29007068021841ab06334ba71673e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fossil&lt;/strong&gt;: &lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;fossil-scm.org&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Fossil&lt;/strong&gt; ： &lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;fossil-scm.org&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3de808c660a0f8db1771b8162e5005e058278801" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Git:&lt;/strong&gt;&lt;a href=&quot;https://git-scm.com&quot;&gt;git-scm.com&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Git:&lt;/strong&gt;&lt;a href=&quot;https://git-scm.com&quot;&gt;git-scm.com&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7285ea123f6266aca8aea1f0535e96f390a5f462" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;GitHub:&lt;/strong&gt;&lt;a href=&quot;https://github.com&quot;&gt;github.com&lt;/a&gt; (Git)</source>
          <target state="translated">&lt;strong&gt;GitHub：&lt;/strong&gt; &lt;a href=&quot;https://github.com&quot;&gt;github.com&lt;/a&gt; （Git）</target>
        </trans-unit>
        <trans-unit id="a486bfa0211053a651d88fa31857218b3061c731" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How does Composer download the right files?&lt;/strong&gt; When you specify a dependency in &lt;code&gt;composer.json&lt;/code&gt;, Composer first takes the name of the package that you have requested and searches for it in any repositories that you have registered using the &lt;a href=&quot;04-schema.md#repositories&quot;&gt;&lt;code&gt;repositories&lt;/code&gt;&lt;/a&gt; key. If you have not registered any extra repositories, or it does not find a package with that name in the repositories you have specified, it falls back to Packagist (more &lt;a href=&quot;#packagist&quot;&gt;below&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;Composerはどのようにして適切なファイルをダウンロードしますか？&lt;/strong&gt; &lt;code&gt;composer.json&lt;/code&gt; で依存関係を指定すると、Composerは最初に要求したパッケージの名前を取得し、 &lt;a href=&quot;04-schema.md#repositories&quot;&gt; &lt;code&gt;repositories&lt;/code&gt; &lt;/a&gt;キーを使用して登録したすべてのリポジトリでそのパッケージを検索します。 追加のリポジトリを登録していない場合、または指定したリポジトリでその名前のパッケージが見つからない場合は、Packagistにフォールバックします（ &lt;a href=&quot;#packagist&quot;&gt;下記を参照&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="61776e841338982493d2e31da4a3a4bb775e32a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT&lt;/strong&gt;: to make sure that the template installer is present at the time the template package is installed, template packages should require the plugin package.</source>
          <target state="translated">&lt;strong&gt;重要&lt;/strong&gt; ：テンプレートパッケージのインストール時にテンプレートインストーラーが存在することを確認するには、テンプレートパッケージにプラグインパッケージが必要です。</target>
        </trans-unit>
        <trans-unit id="f938d4a705cb3ce9d06f792260304e003195f9ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you already used a private repository&lt;/strong&gt;, this means Composer should have cloned it in cache. If you want to install the same package with drivers, remember to launch the command &lt;code&gt;composer clearcache&lt;/code&gt; followed by the command &lt;code&gt;composer update&lt;/code&gt; to update composer cache and install the package from dist.</source>
          <target state="translated">&lt;strong&gt;すでにプライベートリポジトリを使用している場合&lt;/strong&gt; 、これはComposerがそれをキャッシュに複製したことを意味し&lt;strong&gt;ます&lt;/strong&gt; 。 ドライバと同じパッケージをインストールする場合は、 &lt;code&gt;composer clearcache&lt;/code&gt; コマンドを起動し、次に &lt;code&gt;composer update&lt;/code&gt; コマンドを実行してcomposerキャッシュを更新し、distからパッケージをインストールしてください。</target>
        </trans-unit>
        <trans-unit id="bc3f1f2d9b8f636caf2bfe191be5a0d0e8989427" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Mercurial:&lt;/strong&gt;&lt;a href=&quot;https://www.mercurial-scm.org&quot;&gt;mercurial-scm.org&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Mercurial:&lt;/strong&gt;&lt;a href=&quot;https://www.mercurial-scm.org&quot;&gt;mercurial-scm.org&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db8af289d4a664a89833a26318c3ac1d64bc4971" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;em&gt;choose your &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; name carefully, it is recommended to follow the format: &lt;code&gt;vendor-type&lt;/code&gt;&lt;/em&gt;. For example: &lt;code&gt;phpdocumentor-template&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt; ： &lt;em&gt;&lt;a href=&quot;../04-schema.md#type&quot;&gt;タイプ&lt;/a&gt;名は慎重に選択してください&lt;/em&gt; 。 &lt;em&gt;次の形式に従うことをお勧めします： &lt;code&gt;vendor-type&lt;/code&gt; &lt;/em&gt; 。 例： &lt;code&gt;phpdocumentor-template&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3b868635801824ededfdb8e7d84c0f8c861bd8ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that the repository endpoint needs to be https rather than git.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;リポジトリエンドポイントはgitではなくhttpsである必要があることに注意してください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f28806810d8db8c71ee5f48e2c6bb639ce8e098" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; A package can be the root package or not, depending on the context. For example, if your project depends on the &lt;code&gt;monolog&lt;/code&gt; library, your project is the root package. However, if you clone &lt;code&gt;monolog&lt;/code&gt; from GitHub in order to fix a bug in it, then &lt;code&gt;monolog&lt;/code&gt; is the root package.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;コンテキストによっては、パッケージがルートパッケージになる場合とそうでない場合があります。 たとえば、プロジェクトが &lt;code&gt;monolog&lt;/code&gt; ライブラリに依存している場合、プロジェクトはルートパッケージです。 ただし、バグを修正するためにGitHubから &lt;code&gt;monolog&lt;/code&gt; を複製する場合、 &lt;code&gt;monolog&lt;/code&gt; はルートパッケージです。</target>
        </trans-unit>
        <trans-unit id="6431dd45e363b04efe2ec67b618969dae37f7d93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Although &lt;code&gt;2.0-beta.1&lt;/code&gt; is strictly before &lt;code&gt;2.0&lt;/code&gt;, a version constraint like &lt;code&gt;~1.2&lt;/code&gt; would not install it. As said above &lt;code&gt;~1.2&lt;/code&gt; only means the &lt;code&gt;.2&lt;/code&gt; can change but the &lt;code&gt;1.&lt;/code&gt; part is fixed.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;2.0-beta.1&lt;/code&gt; は &lt;code&gt;2.0&lt;/code&gt; より前のバージョンですが、 &lt;code&gt;~1.2&lt;/code&gt; ようなバージョンの制約ではインストールされません。 上記のように、 &lt;code&gt;~1.2&lt;/code&gt; は &lt;code&gt;.2&lt;/code&gt; が変更できることを意味しますが、 &lt;code&gt;1.&lt;/code&gt; 部分は修正されています。</target>
        </trans-unit>
        <trans-unit id="977789847f3175f93a20091377fdaaf5651a654f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Authentication-related config options like &lt;code&gt;http-basic&lt;/code&gt; and &lt;code&gt;github-oauth&lt;/code&gt; can also be specified inside a &lt;code&gt;auth.json&lt;/code&gt; file that goes besides your &lt;code&gt;composer.json&lt;/code&gt;. That way you can gitignore it and every developer can place their own credentials in there.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;http-basic&lt;/code&gt; や &lt;code&gt;github-oauth&lt;/code&gt; などの認証関連の構成オプションは、 &lt;code&gt;composer.json&lt;/code&gt; のほかに、 &lt;code&gt;auth.json&lt;/code&gt; ファイル内でも指定できます。 そうすれば、gitignoreを使用して、すべての開発者が自分の資格情報をそこに配置できます。</target>
        </trans-unit>
        <trans-unit id="a21cc1bf5565577e8342815d5580c7f7c42bf158" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Be careful when using unbounded ranges as you might end up unexpectedly installing versions that break backwards compatibility. Consider using the &lt;a href=&quot;#caret-version-range-&quot;&gt;caret&lt;/a&gt; operator instead for safety.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;無制限の範囲を使用する場合は、下位互換性を損なうバージョンを予期せずインストールする可能性があるため、注意してください。 安全のため、代わりに&lt;a href=&quot;#caret-version-range-&quot;&gt;キャレット&lt;/a&gt;演算子の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="62c90e08c9149aa546233fdc9ce6e446325d2295" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Before executing scripts, Composer's bin-dir is temporarily pushed on top of the PATH environment variable so that binaries of dependencies are easily accessible. In this example no matter if the &lt;code&gt;phpunit&lt;/code&gt; binary is actually in &lt;code&gt;vendor/bin/phpunit&lt;/code&gt; or &lt;code&gt;bin/phpunit&lt;/code&gt; it will be found and executed.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;スクリプトを実行する前に、依存関係のバイナリに簡単にアクセスできるように、Composerのbin-dirが一時的にPATH環境変数の上にプッシュされます。 この例では、 &lt;code&gt;phpunit&lt;/code&gt; バイナリが実際に &lt;code&gt;vendor/bin/phpunit&lt;/code&gt; または &lt;code&gt;bin/phpunit&lt;/code&gt; にあるかどうかに関係なく、 検出されて実行されます。</target>
        </trans-unit>
        <trans-unit id="fe7e4d7fba4c019988edaa9498cfc6633267f5b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Close your current terminal. Test usage with a new terminal: This is important since the PATH only gets loaded when the terminal starts.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;現在のターミナルを閉じます。 新しい端末での使用のテスト：PATHは端末の起動時にのみロードされるため、これは重要です。</target>
        </trans-unit>
        <trans-unit id="b52c85f6a19edcbdf741c95a92520811a55f625e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Composer internally increases the &lt;code&gt;memory_limit&lt;/code&gt; to &lt;code&gt;1.5G&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Composerは内部的に &lt;code&gt;memory_limit&lt;/code&gt; を &lt;code&gt;1.5G&lt;/code&gt; に増やします。</target>
        </trans-unit>
        <trans-unit id="49d23ab0b19f7ee09dc40117645373e231d5387a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Composer makes no assumptions about the state of your dependencies prior to &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt;. Therefore, you should not specify scripts that require Composer-managed dependencies in the &lt;code&gt;pre-update-cmd&lt;/code&gt; or &lt;code&gt;pre-install-cmd&lt;/code&gt; event hooks. If you need to execute scripts prior to &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; please make sure they are self-contained within your root package.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Composerは、 &lt;code&gt;install&lt;/code&gt; または &lt;code&gt;update&lt;/code&gt; 前の依存関係の状態を想定していません。 したがって、 &lt;code&gt;pre-update-cmd&lt;/code&gt; または &lt;code&gt;pre-install-cmd&lt;/code&gt; イベントフックでComposer管理の依存関係を必要とするスクリプトを指定しないでください。 &lt;code&gt;install&lt;/code&gt; または &lt;code&gt;update&lt;/code&gt; 前にスクリプトを実行する必要がある場合は、スクリプトがルートパッケージ内に自己完結していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="e71c16a33d2a9dad6810833ad22ee605acdad06a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Composer provides its own autoloader. If you don't want to use that one, you can include &lt;code&gt;vendor/composer/autoload_*.php&lt;/code&gt; files, which return associative arrays allowing you to configure your own autoloader.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Composerは独自のオートローダーを提供します。 これを使用したくない場合は、連想配列を返す &lt;code&gt;vendor/composer/autoload_*.php&lt;/code&gt; ファイルを含めることができます。これにより、独自のオートローダーを構成できます。</target>
        </trans-unit>
        <trans-unit id="2e9b74c6c27f1d9ce2c60e8e26d1489d32b02ce9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Composer will display a Warning when executing an &lt;code&gt;install&lt;/code&gt; command if the &lt;code&gt;composer.lock&lt;/code&gt; has not been updated since changes were made to the &lt;code&gt;composer.json&lt;/code&gt; that might affect dependency resolution.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;composer.lock&lt;/code&gt; が変更されてから依存関係の解決に影響を与える可能性がある &lt;code&gt;composer.json&lt;/code&gt; が更新されていない場合、 &lt;code&gt;install&lt;/code&gt; コマンドの実行時にComposerは警告を表示します。</target>
        </trans-unit>
        <trans-unit id="460652f1521729fac843fa821fbec87c39430832" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; During a composer install or update process, a variable named &lt;code&gt;COMPOSER_DEV_MODE&lt;/code&gt; will be added to the environment. If the command was run with the &lt;code&gt;--no-dev&lt;/code&gt; flag, this variable will be set to 0, otherwise it will be set to 1.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; composerのインストールまたは更新プロセス中に、 &lt;code&gt;COMPOSER_DEV_MODE&lt;/code&gt; という名前の変数が環境に追加されます。 コマンドが &lt;code&gt;--no-dev&lt;/code&gt; フラグを指定して実行された場合、この変数は0に設定されます。それ以外の場合は1に設定されます。</target>
        </trans-unit>
        <trans-unit id="8ae64c2d320ceca282e7962b7afe05d2bef1761c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For information on changing your PATH, please read the &lt;a href=&quot;https://en.wikipedia.org/wiki/PATH_(variable)&quot;&gt;Wikipedia article&lt;/a&gt; and/or use Google.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; PATHの変更については、 &lt;a href=&quot;https://en.wikipedia.org/wiki/PATH_(variable)&quot;&gt;Wikipediaの記事&lt;/a&gt;を読むか、Googleを使用してください。</target>
        </trans-unit>
        <trans-unit id="5ef6ebac896a02be2cd3d1583d81a52e745bd3a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For libraries it is not necessary to commit the lock file, see also: &lt;a href=&quot;02-libraries.md#lock-file&quot;&gt;Libraries - Lock file&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ライブラリーの場合、ロックファイルをコミットする必要はありません。 &lt;a href=&quot;02-libraries.md#lock-file&quot;&gt;ライブラリー-ロックファイル&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="bf7ad9fb36b514bac11bdebaab1c702d4491f4dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the above fails due to permissions, you may need to run it again with sudo.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;権限が原因で上記が失敗した場合は、sudoで再度実行する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="c911518cb3659fbe5714c4c9633aba6282ce4572" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are trying to require a package but Composer throws an error regarding package stability, the version you have specified may not meet your default minimum stability requirements. By default only stable releases are taken into consideration when searching for valid package versions in your VCS.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;パッケージを要求しようとしたが、Composerがパッケージの安定性に関するエラーをスローした場合、指定したバージョンはデフォルトの最小安定性要件を満たしていない可能性があります。 デフォルトでは、VCSで有効なパッケージバージョンを検索するときに、安定リリースのみが考慮されます。</target>
        </trans-unit>
        <trans-unit id="720201f8cea9a16bd571cd440491585314a94229" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you don't know what to use as a vendor name, your GitHub username is usually a good bet. While package names are case insensitive, the convention is all lowercase and dashes for word separation.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ベンダー名として何を使用するかわからない場合は、通常、GitHubのユーザー名が適しています。 パッケージ名は大文字と小文字を区別しませんが、規則はすべて単語の区切りのために小文字とダッシュです。</target>
        </trans-unit>
        <trans-unit id="04d3b9dfe332a4d5be5e4dec0f8bb7f1dab37af1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Inline aliasing is a root-only feature. If a package with inline aliases is required, the alias (right of the &lt;code&gt;as&lt;/code&gt;) is used as the version constraint. The part left of the &lt;code&gt;as&lt;/code&gt; is discarded. As a consequence, if A requires B and B requires &lt;code&gt;monolog/monolog&lt;/code&gt; version &lt;code&gt;dev-bugfix as 1.0.x-dev&lt;/code&gt;, installing A will make B require &lt;code&gt;1.0.x-dev&lt;/code&gt;, which may exist as a branch alias or an actual &lt;code&gt;1.0&lt;/code&gt; branch. If it does not, it must be inline-aliased again in A's &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;インラインエイリアスはルートのみの機能です。 インラインエイリアスを含むパッケージが必要な場合は、エイリアス（ &lt;code&gt;as&lt;/code&gt; の右側）がバージョン制約として使用されます。 &lt;code&gt;as&lt;/code&gt; の左側の部分は破棄されます。 結果として、AがBを必要とし、Bが &lt;code&gt;dev-bugfix as 1.0.x-dev&lt;/code&gt; &lt;code&gt;monolog/monolog&lt;/code&gt; バージョンdev-bugfixを必要とする場合、Aをインストールすると、ブランチエイリアスまたは実際の &lt;code&gt;1.0&lt;/code&gt; ブランチとして存在する可能性のある &lt;code&gt;1.0.x-dev&lt;/code&gt; が必要になります。 そうでない場合は、Aの &lt;code&gt;composer.json&lt;/code&gt; で再度インラインエイリアスする必要があります。</target>
        </trans-unit>
        <trans-unit id="24b2a3912db59c2651d08f09c21d7fea882761d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Inline aliasing should be avoided, especially for published packages/libraries. If you found a bug, try and get your fix merged upstream. This helps to avoid issues for users of your package.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;インラインエイリアスは、特に公開されたパッケージ/ライブラリの場合は避けてください。 バグを発見した場合は、修正を上流にマージしてください。 これは、パッケージのユーザーの問題を回避するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="93b0c41de147177a86dd482c80f2a94b3c39bfc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is important to list PHP extensions your project requires. Not all PHP installations are created equal: some may miss extensions you may consider as standard (such as &lt;code&gt;ext-mysqli&lt;/code&gt; which is not installed by default in Fedora/CentOS minimal installation systems). Failure to list required PHP extensions may lead to a bad user experience: Composer will install your package without any errors but it will then fail at run-time. The &lt;code&gt;composer show --platform&lt;/code&gt; command lists all PHP extensions available on your system. You may use it to help you compile the list of extensions you use and require. Alternatively you may use third party tools to analyze your project for the list of extensions used.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;プロジェクトに必要なPHP拡張機能をリストすることが重要です。 すべてのPHPインストールが同じように作成されるわけではありません。一部は、標準と見なすことができる拡張機能を見逃す可能性があります（Fedora / CentOS最小インストールシステムにデフォルトでインストールされない &lt;code&gt;ext-mysqli&lt;/code&gt; など）。 必要なPHP拡張機能をリストしないと、ユーザーエクスペリエンスが低下する可能性があります。Composerはパッケージをエラーなしでインストールしますが、実行時に失敗します。 &lt;code&gt;composer show --platform&lt;/code&gt; コマンドは、システムで使用可能なすべてのPHP拡張機能を一覧表示します。 使用して必要な拡張機能のリストをまとめるのに役立ちます。 または、サードパーティのツールを使用して、使用されている拡張機能のリストについてプロジェクトを分析することもできます。</target>
        </trans-unit>
        <trans-unit id="445b8401fb21aad2d3617f047300268585c4b410" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; On Windows, directory symlinks are implemented using NTFS junctions because they can be created by non-admin users. Mirroring will always be used on versions below Windows 7 or if &lt;code&gt;proc_open&lt;/code&gt; has been disabled.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Windowsでは、管理者以外のユーザーが作成できるディレクトリシンボリックリンクはNTFSジャンクションを使用して実装されます。 ミラーリングは、Windows 7より前のバージョン、または &lt;code&gt;proc_open&lt;/code&gt; が無効になっている場合は常に使用されます。</target>
        </trans-unit>
        <trans-unit id="3413b08d82b86122e78a808acd2b3f5f51aba898" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; On some versions of macOS the &lt;code&gt;/usr&lt;/code&gt; directory does not exist by default. If you receive the error &quot;/usr/local/bin/composer: No such file or directory&quot; then you must create the directory manually before proceeding: &lt;code&gt;mkdir -p /usr/local/bin&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; macOSの一部のバージョンでは、 &lt;code&gt;/usr&lt;/code&gt; ディレクトリーはデフォルトでは存在しません。 「/ usr / local / bin / composer：No such file or directory」というエラーが表示された場合は、続行する前に手動でディレクトリを作成する必要があります： &lt;code&gt;mkdir -p /usr/local/bin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3887083995c2d7cce4b610cb2fc9342d5fbc91e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Only scripts defined in the root package's &lt;code&gt;composer.json&lt;/code&gt; are executed. If a dependency of the root package specifies its own scripts, Composer does not execute those additional scripts.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ルートパッケージの &lt;code&gt;composer.json&lt;/code&gt; で定義されたスクリプトのみが実行されます。 ルートパッケージの依存関係が独自のスクリプトを指定している場合、Composerはそれらの追加のスクリプトを実行しません。</target>
        </trans-unit>
        <trans-unit id="406ad3f2ac4e637957fa87488f2d21015124eb19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Order is significant here. When looking for a package, Composer will look from the first to the last repository, and pick the first match. By default Packagist is added last which means that custom repositories can override packages from it.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;順序はここで重要です。 パッケージを探すとき、Composerは最初から最後のリポジトリまで探し、最初に一致するものを選びます。 デフォルトでは、Packagistは最後に追加されます。つまり、カスタムリポジトリはそこからパッケージをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="a583dccc80f4f4ad817ea602d58b42389e605ed4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Order matters. More specific patterns should be earlier than more relaxed patterns. When mixing the string notation with the hash configuration in global and package configurations the string notation is translated to a &lt;code&gt;*&lt;/code&gt; package pattern.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;順序は重要です。 より具体的なパターンは、よりリラックスしたパターンよりも早くする必要があります。 グローバルおよびパッケージ構成で文字列表記をハッシュ構成と混在させると、文字列表記は &lt;code&gt;*&lt;/code&gt; パッケージパターンに変換されます。</target>
        </trans-unit>
        <trans-unit id="9dd1433a92f1efdc5e9fd530b23fe13308f9b8aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Packagist uses VCS repositories, so the statement above is very much true for Packagist as well. Specifying the version yourself will most likely end up creating problems at some point due to human error.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; PackagistはVCSリポジトリを使用するため、上記の説明はPackagistにも当てはまります。 自分でバージョンを指定すると、人的エラーが原因で問題が発生する可能性が高くなります。</target>
        </trans-unit>
        <trans-unit id="8fcd532d9e2aae7148e88c3ef77bb5f324a39886" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Repository paths can also contain wildcards like &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;. For details, see the &lt;a href=&quot;http://php.net/glob&quot;&gt;PHP glob function&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;リポジトリパスには、 &lt;code&gt;*&lt;/code&gt; や &lt;code&gt;?&lt;/code&gt; などのワイルドカードを含めることもできます。 。 詳細については、 &lt;a href=&quot;http://php.net/glob&quot;&gt;PHPのglob関数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="99b126dfe73a699b29161b41ac5292adb7024603" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;pear&lt;/code&gt; repository requires doing quite a few requests per package, so this may considerably slow down the installation process.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;pear&lt;/code&gt; リポジトリでは、パッケージごとにかなりの数のリクエストを実行する必要があるため、インストールプロセスがかなり遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="cae3e6e6e95ca80806ca3dfbcfe5a592f163ac1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;~&lt;/code&gt; operator has an exception on its behavior for the major release number. This means for example that &lt;code&gt;~1&lt;/code&gt; is the same as &lt;code&gt;~1.0&lt;/code&gt; as it will not allow the major number to increase trying to keep backwards compatibility.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;~&lt;/code&gt; 演算子には、メジャーリリース番号の動作に関する例外があります。 これは、たとえば、下位互換性を維持しようとしてメジャー番号を増やすことができないため、 &lt;code&gt;~1.0&lt;/code&gt; と同じであることを意味します。</target>
        </trans-unit>
        <trans-unit id="12a9535648df2da8a81680f63397580c84ca9071" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This feature has severe technical limitations, as the composer.json metadata will still be read from the branch name you specify before the hash. You should therefore only use this as a temporary solution during development to remediate transient issues, until you can switch to tagged releases. The Composer team does not actively support this feature and will not accept bug reports related to it.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; composer.jsonメタデータはハッシュの前に指定したブランチ名から読み取られるため、この機能には重大な技術的制限があります。 したがって、タグ付きリリースに切り替えることができるまで、これを一時的な問題を修正するための開発中の一時的なソリューションとしてのみ使用してください。 Composerチームはこの機能を積極的にサポートしておらず、それに関連するバグレポートを受け入れません。</target>
        </trans-unit>
        <trans-unit id="1f35478ca99bd8cc07331ea1ed610cfd72683356" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When you add a hardcoded version to a VCS, the version will conflict with tag names. Composer will not be able to determine the version number.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;ハードコードされたバージョンをVCSに追加すると、バージョンはタグ名と競合します。 Composerはバージョン番号を判別できません。</target>
        </trans-unit>
        <trans-unit id="9a20789a1745de934c89c710b3175a2fc83a3fc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While this is convenient at times, it should not be how you use packages in the long term because it comes with a technical limitation. The composer.json metadata will still be read from the branch name you specify before the hash. Because of that in some cases it will not be a practical workaround, and you should always try to switch to tagged releases as soon as you can.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これは便利な場合もありますが、技術的な制限があるため、長期的にはパッケージの使用方法ではありません。 composer.jsonメタデータは、ハッシュの前に指定したブランチ名から読み取られます。 そのため、場合によっては実用的な回避策とはならず、できるだけ早くタグ付きリリースに切り替えるようにしてください。</target>
        </trans-unit>
        <trans-unit id="ecb822af2057532a238358469c9420a73650ffb5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You &lt;strong&gt;should not&lt;/strong&gt; enable any of these optimizations in &lt;strong&gt;development&lt;/strong&gt; as they all will cause various problems when adding/removing classes. The performance gains are not worth the trouble in a development setting.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これらの最適化はすべて、クラスの追加/削除時にさまざまな問題を引き起こすため、 &lt;strong&gt;開発時に&lt;/strong&gt; &lt;strong&gt;は&lt;/strong&gt;有効にしないでください。 パフォーマンスの向上は、開発環境での問題に値しません。</target>
        </trans-unit>
        <trans-unit id="5086af16e6c8feb0c766646a2f36588098876d85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can only set custom descriptions of custom commands.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;カスタムコマンドのカスタム説明のみを設定できます。</target>
        </trans-unit>
        <trans-unit id="40caf8939bb0f1d291b6a912c0d8ac4b989618e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for the sake of simplicity, this introduction will assume you have performed a &lt;a href=&quot;00-intro.md#locally&quot;&gt;local&lt;/a&gt; install of Composer.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;簡単にするために、この紹介ではComposerの&lt;a href=&quot;00-intro.md#locally&quot;&gt;ローカル&lt;/a&gt;インストールを実行済みであることを前提としています。</target>
        </trans-unit>
        <trans-unit id="5f9c8d323ce830c12d58374c9210c8fa1c3f7fe1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This repository type has a few limitations and should be avoided whenever possible:</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt; ：このリポジトリタイプにはいくつかの制限があり、可能な限り回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="63105deca0febefa6cbaeac217860910544675c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Private company packages:&lt;/strong&gt; If you are part of a company that uses Composer for their packages internally, you might want to keep those packages private.</source>
          <target state="translated">&lt;strong&gt;民間企業のパッケージ：&lt;/strong&gt;内部でパッケージにComposerを使用する企業の一部である場合は、それらのパッケージを非公開にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f21b18245a1b3680f03d2e45566b1cd3ce942aed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Recap:&lt;/strong&gt; Any git/svn/hg/fossil repository containing a &lt;code&gt;composer.json&lt;/code&gt; can be added to your project by specifying the package repository and declaring the dependency in the &lt;a href=&quot;04-schema.md#require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; field.</source>
          <target state="translated">&lt;strong&gt;まとめ：&lt;/strong&gt; &lt;code&gt;composer.json&lt;/code&gt; を含むgit / svn / hg / fossilリポジトリは、パッケージリポジトリを指定し、 &lt;a href=&quot;04-schema.md#require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;フィールドで依存関係を宣言することにより、プロジェクトに追加できます。</target>
        </trans-unit>
        <trans-unit id="cdf9bd19c04dac6bdf5d67d9742b4f6f60c65fc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Separate ecosystem:&lt;/strong&gt; If you have a project which has its own ecosystem, and the packages aren't really reusable by the greater PHP community, you might want to keep them separate to packagist. An example of this would be wordpress plugins.</source>
          <target state="translated">&lt;strong&gt;個別のエコシステム：&lt;/strong&gt;独自のエコシステムを持つプロジェクトがあり、パッケージがより大きなPHPコミュニティで実際に再利用できない場合は、パッケージをパッケージ担当者に分けておくとよいでしょう。 この例は、ワードプレスプラグインです。</target>
        </trans-unit>
        <trans-unit id="f565ba64da710e49662c7c998622da3c2398b8e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Source:&lt;/strong&gt; The source is used for development. This will usually originate from a source code repository, such as git. You can fetch this when you want to modify the downloaded package.</source>
          <target state="translated">&lt;strong&gt;ソース：&lt;/strong&gt;ソースは開発に使用されます。 これは通常、gitなどのソースコードリポジトリから作成されます。 ダウンロードしたパッケージを変更したい場合に取得できます。</target>
        </trans-unit>
        <trans-unit id="2846119bd84e4a514a1a1cf2dbb72bccc2bb0a72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Subversion:&lt;/strong&gt;&lt;a href=&quot;https://subversion.apache.org&quot;&gt;subversion.apache.org&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Subversion:&lt;/strong&gt;&lt;a href=&quot;https://subversion.apache.org&quot;&gt;subversion.apache.org&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="de29bfe94d76ca09c52f0578e83dfbf4464c153f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip:&lt;/strong&gt; If you are using git for your project, you probably want to add &lt;code&gt;vendor&lt;/code&gt; in your &lt;code&gt;.gitignore&lt;/code&gt;. You really don't want to add all of that third-party code to your versioned repository.</source>
          <target state="translated">&lt;strong&gt;ヒント：&lt;/strong&gt;プロジェクトにgitを使用している場合、おそらく &lt;code&gt;.gitignore&lt;/code&gt; に &lt;code&gt;vendor&lt;/code&gt; を追加する必要があります。 バージョン管理されたレポジトリにサードパーティのコードをすべて追加したくはありません。</target>
        </trans-unit>
        <trans-unit id="dfa4b0a37f5f8e7f419ce599af13b46ed31f1bfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip:&lt;/strong&gt; See &lt;a href=&quot;https://secure.php.net/manual/en/context.ssl.php&quot;&gt;ssl context options&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;ヒント：&lt;/strong&gt;詳細については、 &lt;a href=&quot;https://secure.php.net/manual/en/context.ssl.php&quot;&gt;sslコンテキストオプション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1408830decacd8e82668fd0066eee7e84ae9acc6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip:&lt;/strong&gt; See &lt;a href=&quot;https://secure.php.net/manual/en/wrappers.ssh2.php#refsect1-wrappers.ssh2-options&quot;&gt;ssh2 context options&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;ヒント：&lt;/strong&gt;詳細については、 &lt;a href=&quot;https://secure.php.net/manual/en/wrappers.ssh2.php#refsect1-wrappers.ssh2-options&quot;&gt;ssh2コンテキストオプション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5d2496fe3b1b84c20dfd2112ea12f40ff7b68c90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To let Composer choose which driver to use&lt;/strong&gt; the repository type needs to be defined as &quot;vcs&quot;</source>
          <target state="translated">&lt;strong&gt;Composerに&lt;/strong&gt;リポジトリタイプ&lt;strong&gt;を使用&lt;/strong&gt;する&lt;strong&gt;ドライバを選択させるには&lt;/strong&gt; 、「vcs」として定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="775edf9de2e72c0cd98fa5c1586c0ad69503a728" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Workaround Linux:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;回避策Linux：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="979242d8b8c3417d45458b910400c8a87a277c0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Workaround Mac OS X:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;回避策Mac OS X：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0e1a9a461530e50d9a6811125f4fccbd3eed2fd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Workaround Windows:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;回避策Windows：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8aca7735c32e763022b684ce025510fe67b04d4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;chat:&lt;/strong&gt; URL to the chat channel.</source>
          <target state="translated">&lt;strong&gt;chat：&lt;/strong&gt;チャットチャネルのURL。</target>
        </trans-unit>
        <trans-unit id="b088b5977a410080b7d68a84be4a6056632350b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;command&lt;/strong&gt;: occurs before any Composer Command is executed on the CLI. It provides you with access to the input and output objects of the program.</source>
          <target state="translated">&lt;strong&gt;command&lt;/strong&gt; ：CLIでComposerコマンドが実行される前に発生します。 プログラムの入出力オブジェクトへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="37cf871f7b57acf308b23c22687f539fd91723c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;composer-plugin:&lt;/strong&gt; A package of type &lt;code&gt;composer-plugin&lt;/code&gt; may provide an installer for other packages that have a custom type. Read more in the &lt;a href=&quot;articles/custom-installers.md&quot;&gt;dedicated article&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;composer-plugin：&lt;/strong&gt;タイプ &lt;code&gt;composer-plugin&lt;/code&gt; のパッケージは、カスタムタイプを持つ他のパッケージのインストーラーを提供します。 詳しくは&lt;a href=&quot;articles/custom-installers.md&quot;&gt;専用の記事&lt;/a&gt;をご覧ください 。</target>
        </trans-unit>
        <trans-unit id="ad6b3b514ee71ec9674b91b0582a9aa02d8397cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;composer:&lt;/strong&gt; A Composer repository is simply a &lt;code&gt;packages.json&lt;/code&gt; file served via the network (HTTP, FTP, SSH), that contains a list of &lt;code&gt;composer.json&lt;/code&gt; objects with additional &lt;code&gt;dist&lt;/code&gt; and/or &lt;code&gt;source&lt;/code&gt; information. The &lt;code&gt;packages.json&lt;/code&gt; file is loaded using a PHP stream. You can set extra options on that stream using the &lt;code&gt;options&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;strong&gt;composer：&lt;/strong&gt; Composerリポジトリは、ネットワーク（HTTP、FTP、SSH）を介して &lt;code&gt;packages.json&lt;/code&gt; れる単にpackages.jsonファイルであり、追加の &lt;code&gt;dist&lt;/code&gt; や &lt;code&gt;source&lt;/code&gt; 情報を持つ &lt;code&gt;composer.json&lt;/code&gt; オブジェクトのリストが含まれています。 &lt;code&gt;packages.json&lt;/code&gt; ファイルは、PHPストリームを使用してロードされます。 &lt;code&gt;options&lt;/code&gt; パラメータを使用して、そのストリームに追加のオプションを設定できます。</target>
        </trans-unit>
        <trans-unit id="e49741341d8e0a5edde684302a3b79ea04892353" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;docs:&lt;/strong&gt; URL to the documentation.</source>
          <target state="translated">&lt;strong&gt;docs：&lt;/strong&gt;ドキュメントへのURL。</target>
        </trans-unit>
        <trans-unit id="9cf3908747ea405ebe85090170fcfa6af178036d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;email:&lt;/strong&gt; Email address for support.</source>
          <target state="translated">&lt;strong&gt;email：&lt;/strong&gt;サポートのメールアドレス。</target>
        </trans-unit>
        <trans-unit id="d387ada5bf3aa045a4bc7cbbc4aa37f14e1aa5da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;email:&lt;/strong&gt; The author's email address.</source>
          <target state="translated">&lt;strong&gt;email：&lt;/strong&gt;作者のメールアドレス。</target>
        </trans-unit>
        <trans-unit id="0b93b65f351e385e2c3b2439d796d0c11292b529" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;exclude:&lt;/strong&gt; Allows configuring a list of patterns for excluded paths. The pattern syntax matches .gitignore files. A leading exclamation mark (!) will result in any matching files to be included even if a previous pattern excluded them. A leading slash will only match at the beginning of the project relative path. An asterisk will not expand to a directory separator.</source>
          <target state="translated">&lt;strong&gt;exclude：&lt;/strong&gt;除外されたパスのパターンのリストを構成できます。 パターン構文は.gitignoreファイルと一致します。 先頭の感嘆符（！）は、以前のパターンで除外されていたとしても、一致するファイルが含まれることになります。 先頭のスラッシュは、プロジェクトの相対パスの先頭でのみ一致します。 アスタリスクはディレクトリー区切り文字に展開されません。</target>
        </trans-unit>
        <trans-unit id="30ca3458b7a9af21701d5627a46bbd219478107b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;forum:&lt;/strong&gt; URL to the forum.</source>
          <target state="translated">&lt;strong&gt;forum：フォーラム&lt;/strong&gt;へのURL。</target>
        </trans-unit>
        <trans-unit id="22f55b899dc68f29a9e9c3b53bf8ab1580eb0163" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;getInstallPath()&lt;/strong&gt;, this method should return the location where the package is to be installed, &lt;em&gt;relative from the location of composer.json.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;getInstallPath（）&lt;/strong&gt; 。このメソッドは&lt;em&gt;、composer.jsonの場所からの相対的な&lt;/em&gt; 、パッケージがインストールされる場所を返す必要があります&lt;em&gt;。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4bdfafe8749549306ea27eaf054b9e4777c5e1a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;green (=)&lt;/strong&gt;: Dependency is in the latest version and is up to date.</source>
          <target state="translated">&lt;strong&gt;緑（=）&lt;/strong&gt; ：依存関係は最新バージョンであり、最新です。</target>
        </trans-unit>
        <trans-unit id="5dba7d0d38e4f50d35a61f0f57bd1c209d8fc357" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;homepage:&lt;/strong&gt; An URL to the author's website.</source>
          <target state="translated">&lt;strong&gt;ホームページ：&lt;/strong&gt;著者のWebサイトへのURL。</target>
        </trans-unit>
        <trans-unit id="dd8ac0521ba00173fcff19a28072d318e7146894" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;init&lt;/strong&gt;: occurs after a Composer instance is done being initialized.</source>
          <target state="translated">&lt;strong&gt;init&lt;/strong&gt; ：Composerインスタンスが初期化された後に発生します。</target>
        </trans-unit>
        <trans-unit id="d93b3405b1d61a9e0c22367280cbcf8cf81b713c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;install()&lt;/strong&gt;, here you can determine the actions that need to be executed upon installation.</source>
          <target state="translated">&lt;strong&gt;install（）&lt;/strong&gt; 、ここで、インストール時に実行する必要があるアクションを決定できます。</target>
        </trans-unit>
        <trans-unit id="a7d2cb22756dcc95b66818577cbab9908b21f7d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;irc:&lt;/strong&gt; IRC channel for support, as irc://server/channel.</source>
          <target state="translated">&lt;strong&gt;irc：&lt;/strong&gt;サポート用のIRCチャネル（irc：// server / channelなど）。</target>
        </trans-unit>
        <trans-unit id="ab6bdfba8f5260ed2502c64d2be8d066dc3a8e4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;isInstalled()&lt;/strong&gt;, determines whether a supported package is installed or not.</source>
          <target state="translated">&lt;strong&gt;isInstalled（）&lt;/strong&gt;は、サポートされているパッケージがインストールされているかどうかを判別します。</target>
        </trans-unit>
        <trans-unit id="9b404970d40c19f4c3b7ea79b77d7842d255cd4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;issues:&lt;/strong&gt; URL to the issue tracker.</source>
          <target state="translated">&lt;strong&gt;issues：&lt;/strong&gt;課題追跡へのURL。</target>
        </trans-unit>
        <trans-unit id="e33ca8ee93468a50681e30f03e296ed4967ac18c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;library:&lt;/strong&gt; This is the default. It will simply copy the files to &lt;code&gt;vendor&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ライブラリ：&lt;/strong&gt;これがデフォルトです。 ファイルを &lt;code&gt;vendor&lt;/code&gt; コピーするだけです。</target>
        </trans-unit>
        <trans-unit id="4933438bd5f8c7a8bedb35c6ed6e7f848e429940" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;metapackage:&lt;/strong&gt; An empty package that contains requirements and will trigger their installation, but contains no files and will not write anything to the filesystem. As such, it does not require a dist or source key to be installable.</source>
          <target state="translated">&lt;strong&gt;metapackage：&lt;/strong&gt;要件を含み、インストールをトリガーするが、ファイルを含まず、ファイルシステムに何も書き込まない空のパッケージ。 そのため、distまたはsourceキーをインストール可能にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="3afbe1e90c3d04b30a7df8b56b74b61d632983bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name:&lt;/strong&gt; The author's name. Usually their real name.</source>
          <target state="translated">&lt;strong&gt;name：作成&lt;/strong&gt;者の名前。 通常は本名。</target>
        </trans-unit>
        <trans-unit id="f3c2f8747cde4d7be3bf8a3ba7ea5546983e7b4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;package:&lt;/strong&gt; If you depend on a project that does not have any support for composer whatsoever you can define the package inline using a &lt;code&gt;package&lt;/code&gt; repository. You basically inline the &lt;code&gt;composer.json&lt;/code&gt; object.</source>
          <target state="translated">&lt;strong&gt;パッケージ：&lt;/strong&gt; composerをまったくサポートしていないプロジェクトに依存している場合は、 &lt;code&gt;package&lt;/code&gt; リポジトリを使用してパッケージをインラインで定義できます。 基本的に、 &lt;code&gt;composer.json&lt;/code&gt; オブジェクトをインライン化します。</target>
        </trans-unit>
        <trans-unit id="8cff7a514f0e6a07e3f87d6d8fc31384a8b57e37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pear:&lt;/strong&gt; With this you can import any pear repository into your Composer project.</source>
          <target state="translated">&lt;strong&gt;pear：&lt;/strong&gt;これにより、任意のpearリポジトリをComposerプロジェクトにインポートできます。</target>
        </trans-unit>
        <trans-unit id="1385500b801a0f1c2e61204451f2131197d7b3cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-archive-cmd&lt;/strong&gt;: occurs after the &lt;code&gt;archive&lt;/code&gt; command has been executed.</source>
          <target state="translated">&lt;strong&gt;post-archive-cmd&lt;/strong&gt; ： &lt;code&gt;archive&lt;/code&gt; コマンドが実行された後に発生します 。</target>
        </trans-unit>
        <trans-unit id="5485db196efa858644c2775709a710b969058910" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-autoload-dump&lt;/strong&gt;: occurs after the autoloader has been dumped, either during &lt;code&gt;install&lt;/code&gt;/&lt;code&gt;update&lt;/code&gt;, or via the &lt;code&gt;dump-autoload&lt;/code&gt; command.</source>
          <target state="translated">&lt;strong&gt;post-autoload-dump&lt;/strong&gt; ： &lt;code&gt;install&lt;/code&gt; / &lt;code&gt;update&lt;/code&gt; 、または &lt;code&gt;dump-autoload&lt;/code&gt; コマンドによって、オートローダーがダンプされた後に発生します。</target>
        </trans-unit>
        <trans-unit id="1c0fd9ff93a939377a1c237ee6fb37aa4500eaad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-create-project-cmd&lt;/strong&gt;: occurs after the &lt;code&gt;create-project&lt;/code&gt; command has been executed.</source>
          <target state="translated">&lt;strong&gt;post-create-project-cmd&lt;/strong&gt; ： &lt;code&gt;create-project&lt;/code&gt; コマンドが実行された後に発生します 。</target>
        </trans-unit>
        <trans-unit id="c25b682e67a24a63eb36d0f72c5bee9a7651f449" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-dependencies-solving&lt;/strong&gt;: occurs after the dependencies have been resolved.</source>
          <target state="translated">&lt;strong&gt;post-dependencies-solving&lt;/strong&gt; ：依存関係が解決された後に発生します。</target>
        </trans-unit>
        <trans-unit id="16b9bd189e89bf7a5042c9dc2592196119c4257d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-install-cmd&lt;/strong&gt;: occurs after the &lt;code&gt;install&lt;/code&gt; command has been executed with a lock file present.</source>
          <target state="translated">&lt;strong&gt;post-install-cmd&lt;/strong&gt; ：ロックファイルが存在する状態で &lt;code&gt;install&lt;/code&gt; コマンドが実行された後に発生します。</target>
        </trans-unit>
        <trans-unit id="0307fca9c2ff355b1f9bdca174b625ddfcabaad7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-package-install&lt;/strong&gt;: occurs after a package has been installed.</source>
          <target state="translated">&lt;strong&gt;post-package-install&lt;/strong&gt; ： &lt;strong&gt;パッケージがインストール&lt;/strong&gt;された後に発生します。</target>
        </trans-unit>
        <trans-unit id="6c6ac2336d97f0faaf9c589a59373f8776bf2f4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-package-uninstall&lt;/strong&gt;: occurs after a package has been uninstalled.</source>
          <target state="translated">&lt;strong&gt;post-package-uninstall&lt;/strong&gt; ：パッケージがアンインストールされた後に発生します。</target>
        </trans-unit>
        <trans-unit id="5d85bc7ae2eac58b4282c9f1ddc878be66f059d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-package-update&lt;/strong&gt;: occurs after a package has been updated.</source>
          <target state="translated">&lt;strong&gt;post-package-update&lt;/strong&gt; ：パッケージが更新された後に発生します。</target>
        </trans-unit>
        <trans-unit id="ea5b0e8990febaff591be31bfa67f545e5f21fee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-root-package-install&lt;/strong&gt;: occurs after the root package has been installed, during the &lt;code&gt;create-project&lt;/code&gt; command.</source>
          <target state="translated">&lt;strong&gt;post-root-package-install&lt;/strong&gt; ：ルートパッケージがインストールされた後、 &lt;code&gt;create-project&lt;/code&gt; コマンド中に発生します 。</target>
        </trans-unit>
        <trans-unit id="7a9d0f6608e9bcee9a5b0ed69e2f9f8c49164332" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-status-cmd&lt;/strong&gt;: occurs after the &lt;code&gt;status&lt;/code&gt; command has been executed.</source>
          <target state="translated">&lt;strong&gt;post-status-cmd&lt;/strong&gt; ： &lt;code&gt;status&lt;/code&gt; コマンドが実行された後に発生します 。</target>
        </trans-unit>
        <trans-unit id="f264f6c92d7d0905a592e96af6cfe73e67f42e2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-update-cmd&lt;/strong&gt;: occurs after the &lt;code&gt;update&lt;/code&gt; command has been executed, or after the &lt;code&gt;install&lt;/code&gt; command has been executed without a lock file present.</source>
          <target state="translated">&lt;strong&gt;post-update-cmd&lt;/strong&gt; ： &lt;code&gt;update&lt;/code&gt; コマンドが実行された後、またはロックファイルが存在せずに &lt;code&gt;install&lt;/code&gt; コマンドが実行された後に発生します。</target>
        </trans-unit>
        <trans-unit id="b49f43b6230cced94feec71053a00ef0d1c031de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-archive-cmd&lt;/strong&gt;: occurs before the &lt;code&gt;archive&lt;/code&gt; command is executed.</source>
          <target state="translated">&lt;strong&gt;pre-archive-cmd&lt;/strong&gt; ： &lt;code&gt;archive&lt;/code&gt; コマンドが実行される前に発生します 。</target>
        </trans-unit>
        <trans-unit id="80425f8361785ea7b053fc799b24b5d35dcec474" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-autoload-dump&lt;/strong&gt;: occurs before the autoloader is dumped, either during &lt;code&gt;install&lt;/code&gt;/&lt;code&gt;update&lt;/code&gt;, or via the &lt;code&gt;dump-autoload&lt;/code&gt; command.</source>
          <target state="translated">&lt;strong&gt;pre-autoload-dump&lt;/strong&gt; ： &lt;code&gt;install&lt;/code&gt; / &lt;code&gt;update&lt;/code&gt; 、または &lt;code&gt;dump-autoload&lt;/code&gt; コマンドを介して、オートローダーがダンプされる前に発生します。</target>
        </trans-unit>
        <trans-unit id="fd446d44f849170885a7616beed19363eb03e561" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-command-run&lt;/strong&gt;: occurs before a command is executed and allows you to manipulate the &lt;code&gt;InputInterface&lt;/code&gt; object's options and arguments to tweak a command's behavior.</source>
          <target state="translated">&lt;strong&gt;pre-command-run&lt;/strong&gt; ：コマンドが実行される前に発生し、 &lt;code&gt;InputInterface&lt;/code&gt; オブジェクトのオプションと引数を操作してコマンドの動作を微調整できます。</target>
        </trans-unit>
        <trans-unit id="e199058be7095072f0f16b73924ce1dff7a079c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-dependencies-solving&lt;/strong&gt;: occurs before the dependencies are resolved.</source>
          <target state="translated">&lt;strong&gt;pre-dependencies-solving&lt;/strong&gt; ：依存関係が解決される前に発生します。</target>
        </trans-unit>
        <trans-unit id="ebdafd4fa63e78146bdebfbda68c42df58b13b8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-file-download&lt;/strong&gt;: occurs before files are downloaded and allows you to manipulate the &lt;code&gt;RemoteFilesystem&lt;/code&gt; object prior to downloading files based on the URL to be downloaded.</source>
          <target state="translated">&lt;strong&gt;pre-file-download&lt;/strong&gt; ：ファイルがダウンロードされる前に発生し、ダウンロードするURLに基​​づいてファイルをダウンロードする前に &lt;code&gt;RemoteFilesystem&lt;/code&gt; オブジェクトを操作できます。</target>
        </trans-unit>
        <trans-unit id="26cf2f90f95a80866e0e35b487f56eba4212221a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-install-cmd&lt;/strong&gt;: occurs before the &lt;code&gt;install&lt;/code&gt; command is executed with a lock file present.</source>
          <target state="translated">&lt;strong&gt;pre-install-cmd&lt;/strong&gt; ：ロックファイルが存在する状態で &lt;code&gt;install&lt;/code&gt; コマンドが実行される前に発生します。</target>
        </trans-unit>
        <trans-unit id="22bec3f86a454eba738b38d2a50c08fb558df7a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-package-install&lt;/strong&gt;: occurs before a package is installed.</source>
          <target state="translated">&lt;strong&gt;pre-package-install&lt;/strong&gt; ：パッケージがインストールされる前に発生します。</target>
        </trans-unit>
        <trans-unit id="4f22d64e0f23a67827d5c068855fd036154edc41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-package-uninstall&lt;/strong&gt;: occurs before a package is uninstalled.</source>
          <target state="translated">&lt;strong&gt;pre-package-uninstall&lt;/strong&gt; ：パッケージがアンインストールされる前に発生します。</target>
        </trans-unit>
        <trans-unit id="cffaa6b05c8ed9edca8efe82f92ff26f022894e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-package-update&lt;/strong&gt;: occurs before a package is updated.</source>
          <target state="translated">&lt;strong&gt;pre-package-update&lt;/strong&gt; ：パッケージが更新される前に発生します。</target>
        </trans-unit>
        <trans-unit id="40c377a1df051cec64481fe13d71cda8e02634cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-update-cmd&lt;/strong&gt;: occurs before the &lt;code&gt;update&lt;/code&gt; command is executed, or before the &lt;code&gt;install&lt;/code&gt; command is executed without a lock file present.</source>
          <target state="translated">&lt;strong&gt;pre-update-cmd&lt;/strong&gt; ： &lt;code&gt;update&lt;/code&gt; コマンドが実行される前、またはロックファイルが存在せずに &lt;code&gt;install&lt;/code&gt; コマンドが実行される前に発生します。</target>
        </trans-unit>
        <trans-unit id="04475ca215f6342f4c43a84c45ad9384a4977036" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;project:&lt;/strong&gt; This denotes a project rather than a library. For example application shells like the &lt;a href=&quot;https://github.com/symfony/symfony-standard&quot;&gt;Symfony standard edition&lt;/a&gt;, CMSs like the &lt;a href=&quot;https://github.com/silverstripe/silverstripe-installer&quot;&gt;SilverStripe installer&lt;/a&gt; or full fledged applications distributed as packages. This can for example be used by IDEs to provide listings of projects to initialize when creating a new workspace.</source>
          <target state="translated">&lt;strong&gt;プロジェクト：&lt;/strong&gt;これは、ライブラリではなくプロジェクトを示します。 たとえば、 &lt;a href=&quot;https://github.com/symfony/symfony-standard&quot;&gt;Symfonyスタンダードエディションの&lt;/a&gt;ようなアプリケーションシェル、 &lt;a href=&quot;https://github.com/silverstripe/silverstripe-installer&quot;&gt;SilverStripeインストーラーの&lt;/a&gt;ようなCMS、またはパッケージとして配布される本格的なアプリケーション。 これは、たとえばIDEで使用して、新しいワークスペースを作成するときに初期化するプロジェクトのリストを提供できます。</target>
        </trans-unit>
        <trans-unit id="3c355a4a8154e7739358584fa3aab1e7e1e22335" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;red (!)&lt;/strong&gt;: Dependency has a new version that is semver-compatible and you should upgrade it.</source>
          <target state="translated">&lt;strong&gt;赤（！）&lt;/strong&gt; ：依存関係には、サーバー互換性のある新しいバージョンがあり、アップグレードする必要があります。</target>
        </trans-unit>
        <trans-unit id="86458479615e09edd2f03c10bf9cfa525ebe0203" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;role:&lt;/strong&gt; The author's role in the project (e.g. developer or translator)</source>
          <target state="translated">&lt;strong&gt;role：&lt;/strong&gt;プロジェクトにおける作成者の役割（例：開発者または翻訳者）</target>
        </trans-unit>
        <trans-unit id="dd91008c8d0a132e14c3309c54d1c9ce1a665817" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rss:&lt;/strong&gt; URL to the RSS feed.</source>
          <target state="translated">&lt;strong&gt;rss：&lt;/strong&gt; RSSフィードへのURL。</target>
        </trans-unit>
        <trans-unit id="caea9c44e70ec991ace0896e0ac65e564c782a8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;source:&lt;/strong&gt; URL to browse or download the sources.</source>
          <target state="translated">&lt;strong&gt;source：ソース&lt;/strong&gt;を参照またはダウンロードするためのURL。</target>
        </trans-unit>
        <trans-unit id="ecde19c0529bdf8289391f552a2d40ebe81cf094" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;supports()&lt;/strong&gt;, here you test whether the passed &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; matches the name that you declared for this installer (see the example).</source>
          <target state="translated">&lt;strong&gt;supports（）&lt;/strong&gt; 、ここでは、渡された&lt;a href=&quot;../04-schema.md#type&quot;&gt;型&lt;/a&gt;がこのインストーラーに対して宣言した名前と一致するかどうかをテストします（例を参照）。</target>
        </trans-unit>
        <trans-unit id="2faf403f49a22ce321ebd9bafc79f25d5cfd4a51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;uninstall()&lt;/strong&gt;, here you can determine the actions that need to be executed when the package needs to be removed.</source>
          <target state="translated">&lt;strong&gt;uninstall（）を&lt;/strong&gt;使用すると、パッケージを削除する必要があるときに実行する必要があるアクションをここで決定できます。</target>
        </trans-unit>
        <trans-unit id="02a50753a20a6df341616b1a1bf2be66fe4450dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;update()&lt;/strong&gt;, here you define the behavior that is required when Composer is invoked with the update argument.</source>
          <target state="translated">&lt;strong&gt;update（）&lt;/strong&gt;では、ここでComposerがupdate引数で呼び出されたときに必要な動作を定義します。</target>
        </trans-unit>
        <trans-unit id="39e060a629f0d4f6b6289958517694bd585f87fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;vcs:&lt;/strong&gt; The version control system repository can fetch packages from git, svn, fossil and hg repositories.</source>
          <target state="translated">&lt;strong&gt;vcs：&lt;/strong&gt;バージョン管理システムリポジトリは、git、svn、fossil、およびhgリポジトリからパッケージをフェッチできます。</target>
        </trans-unit>
        <trans-unit id="e2287278b4abfc7ea4c156aa77bd63f441d1f7f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;wiki:&lt;/strong&gt; URL to the wiki.</source>
          <target state="translated">&lt;strong&gt;wiki：Wiki&lt;/strong&gt;へのURL。</target>
        </trans-unit>
        <trans-unit id="94ad895969e1582599227bfde1525e4970e99b98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;yellow (~)&lt;/strong&gt;: Dependency has a new version available that includes backwards compatibility breaks according to semver, so upgrade when you can but it may involve work.</source>
          <target state="translated">&lt;strong&gt;黄色（〜）&lt;/strong&gt; ：依存関係には、semverによる下位互換性の問題を含む新しいバージョンがあります。可能な場合はアップグレードしてください。ただし、作業が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="13f519f1221d935086efe9208ff05e7e16c60337" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;.bat&lt;/code&gt; file is generated automatically to reference the binary</source>
          <target state="translated">バイナリを参照するために &lt;code&gt;.bat&lt;/code&gt; ファイルが自動的に生成されます</target>
        </trans-unit>
        <trans-unit id="df8e93aaac13af9b503414f82da517f4bea95052" translate="yes" xml:space="preserve">
          <source>A Custom Installer is defined as a class that implements the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/InstallerInterface.php&quot;&gt;&lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt;&lt;/a&gt; and is usually distributed in a Composer Plugin.</source>
          <target state="translated">カスタムインストーラーは、 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/InstallerInterface.php&quot;&gt; &lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt; &lt;/a&gt;を実装するクラスとして定義され、通常はComposerプラグインで配布されます。</target>
        </trans-unit>
        <trans-unit id="8e936a7b0ce95b88be1d5722da2927d874b03bec" translate="yes" xml:space="preserve">
          <source>A Unix-style proxy file with the same name as the binary is generated automatically (useful for Cygwin or Git Bash)</source>
          <target state="translated">バイナリと同じ名前のUnixスタイルのプロキシファイルが自動的に生成されます (CygwinやGit Bashで便利です)</target>
        </trans-unit>
        <trans-unit id="d36d6ed29388c5e09d8001c42082fc76405dd6c0" translate="yes" xml:space="preserve">
          <source>A basic Installer Plugin would thus compose of three files:</source>
          <target state="translated">基本的なインストーラープラグインは、このように3つのファイルで構成されています。</target>
        </trans-unit>
        <trans-unit id="963ab2dabf21f8bf030c1ed281079db920e26963" translate="yes" xml:space="preserve">
          <source>A list of domain names and consumers. For example using &lt;code&gt;{&quot;bitbucket.org&quot;: {&quot;consumer-key&quot;: &quot;myKey&quot;, &quot;consumer-secret&quot;: &quot;mySecret&quot;}}&lt;/code&gt;. &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html&quot;&gt;Read&lt;/a&gt; how to set up a consumer on Bitbucket.</source>
          <target state="translated">ドメイン名とコンシューマーのリスト。 たとえば、 &lt;code&gt;{&quot;bitbucket.org&quot;: {&quot;consumer-key&quot;: &quot;myKey&quot;, &quot;consumer-secret&quot;: &quot;mySecret&quot;}}&lt;/code&gt; ます。 Bitbucketでコンシューマーを設定する方法を&lt;a href=&quot;https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html&quot;&gt;読んでください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf8460fbf4fb187b445cdae1730d9cd743cf0782" translate="yes" xml:space="preserve">
          <source>A list of domain names and oauth keys. For example using &lt;code&gt;{&quot;github.com&quot;: &quot;oauthtoken&quot;}&lt;/code&gt; as the value of this option will use &lt;code&gt;oauthtoken&lt;/code&gt; to access private repositories on github and to circumvent the low IP-based rate limiting of their API. &lt;a href=&quot;articles/troubleshooting.md#api-rate-limit-and-oauth-tokens&quot;&gt;Read more&lt;/a&gt; on how to get an OAuth token for GitHub.</source>
          <target state="translated">ドメイン名とoauthキーのリスト。 たとえば、このオプションの値として &lt;code&gt;{&quot;github.com&quot;: &quot;oauthtoken&quot;}&lt;/code&gt; を使用すると、 &lt;code&gt;oauthtoken&lt;/code&gt; を使用してgithub上のプライベートリポジトリにアクセスし、APIの低IPベースのレート制限を回避します。 GitHubのOAuthトークンを取得する方法の&lt;a href=&quot;articles/troubleshooting.md#api-rate-limit-and-oauth-tokens&quot;&gt;詳細をご覧ください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="18cd575ab46d0c021d06912a47a33ce83304917c" translate="yes" xml:space="preserve">
          <source>A list of domain names and oauth keys. For example using &lt;code&gt;{&quot;gitlab.com&quot;: &quot;oauthtoken&quot;}&lt;/code&gt; as the value of this option will use &lt;code&gt;oauthtoken&lt;/code&gt; to access private repositories on gitlab. Please note: If the package is not hosted at gitlab.com the domain names must be also specified with the &lt;a href=&quot;06-config.md#gitlab-domains&quot;&gt;&lt;code&gt;gitlab-domains&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">ドメイン名とoauthキーのリスト。 たとえば、このオプションの値として &lt;code&gt;{&quot;gitlab.com&quot;: &quot;oauthtoken&quot;}&lt;/code&gt; を使用すると、 &lt;code&gt;oauthtoken&lt;/code&gt; を使用してgitlab上のプライベートリポジトリにアクセスできます。 注：パッケージがgitlab.comでホストされていない場合は、 &lt;a href=&quot;06-config.md#gitlab-domains&quot;&gt; &lt;code&gt;gitlab-domains&lt;/code&gt; &lt;/a&gt;オプションでドメイン名も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="5d8219d3461c8053f1343674ecb76e260d2dc2b4" translate="yes" xml:space="preserve">
          <source>A list of domain names and private tokens. For example using &lt;code&gt;{&quot;gitlab.com&quot;: &quot;privatetoken&quot;}&lt;/code&gt; as the value of this option will use &lt;code&gt;privatetoken&lt;/code&gt; to access private repositories on gitlab. Please note: If the package is not hosted at gitlab.com the domain names must be also specified with the &lt;a href=&quot;06-config.md#gitlab-domains&quot;&gt;&lt;code&gt;gitlab-domains&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">ドメイン名とプライベートトークンのリスト。 たとえば、このオプションの値として &lt;code&gt;{&quot;gitlab.com&quot;: &quot;privatetoken&quot;}&lt;/code&gt; を使用すると、 &lt;code&gt;privatetoken&lt;/code&gt; を使用してgitlab上のプライベートリポジトリにアクセスできます。 注：パッケージがgitlab.comでホストされていない場合は、 &lt;a href=&quot;06-config.md#gitlab-domains&quot;&gt; &lt;code&gt;gitlab-domains&lt;/code&gt; &lt;/a&gt;オプションでドメイン名も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="75b1a0230c760020ef540883d86be481fb5442e2" translate="yes" xml:space="preserve">
          <source>A list of domain names and username/passwords to authenticate against them. For example using &lt;code&gt;{&quot;example.org&quot;: {&quot;username&quot;: &quot;alice&quot;, &quot;password&quot;: &quot;foo&quot;}}&lt;/code&gt; as the value of this option will let Composer authenticate against example.org.</source>
          <target state="translated">それらに対して認証するドメイン名とユーザー名/パスワードのリスト。 たとえば、このオプションの値として &lt;code&gt;{&quot;example.org&quot;: {&quot;username&quot;: &quot;alice&quot;, &quot;password&quot;: &quot;foo&quot;}}&lt;/code&gt; を使用すると、Composerがexample.orgに対して認証されます。</target>
        </trans-unit>
        <trans-unit id="8d0f1e7d680e9bb21dfe2a43ac53de2651082f73" translate="yes" xml:space="preserve">
          <source>A list of paths which should get appended to PHP's &lt;code&gt;include_path&lt;/code&gt;.</source>
          <target state="translated">PHPの &lt;code&gt;include_path&lt;/code&gt; に追加されるパスのリスト。</target>
        </trans-unit>
        <trans-unit id="ee8970991ade70b038fbc1c02ead3f988987e111" translate="yes" xml:space="preserve">
          <source>A list of regex patterns of branch names that are non-numeric (e.g. &quot;latest&quot; or something), that will NOT be handled as feature branches. This is an array of strings.</source>
          <target state="translated">ブランチ名の正規表現パターンのリストで、数字以外のもの (例えば &quot;latest&quot; など)は機能ブランチとしては扱われません。これは文字列の配列です。</target>
        </trans-unit>
        <trans-unit id="67dc6540231c3964d515a09c73ef009a8f20b66d" translate="yes" xml:space="preserve">
          <source>A plugin is a regular Composer package which ships its code as part of the package and may also depend on further packages.</source>
          <target state="translated">プラグインは、パッケージの一部としてコードを出荷する通常の Composer パッケージで、他のパッケージに依存することもあります。</target>
        </trans-unit>
        <trans-unit id="d38e4e12abef5906db7925a3e48d134dba1fe3e2" translate="yes" xml:space="preserve">
          <source>A relative path to the readme document.</source>
          <target state="translated">readme ドキュメントへの相対パス。</target>
        </trans-unit>
        <trans-unit id="c9e7ec8b9486551865fc10f61b46c82d028e9b62" translate="yes" xml:space="preserve">
          <source>A repository is a package source. It's a list of packages/versions. Composer will look in all your repositories to find the packages your project requires.</source>
          <target state="translated">リポジトリとは、パッケージソースのことです。これは、パッケージバージョンのリストです。Composer は、すべてのリポジトリを検索して、プロジェクトに必要なパッケージを探します。</target>
        </trans-unit>
        <trans-unit id="79c1bc7dd91120fb559a7de4a04428d3770b85b7" translate="yes" xml:space="preserve">
          <source>A script, in Composer's terms, can either be a PHP callback (defined as a static method) or any command-line executable command. Scripts are useful for executing a package's custom code or package-specific commands during the Composer execution process.</source>
          <target state="translated">Composer の用語では、スクリプトは、PHP コールバック (静的メソッドとして定義されています)またはコマンドラインの実行可能なコマン ドのいずれかになります。スクリプトは、パッケージのカスタムコードやパッケージ固有のコマンドを Composer の実行プロセス中に実行するのに便利です。</target>
        </trans-unit>
        <trans-unit id="661c092eebd5a622e6d617dddbbcaf329411e963" translate="yes" xml:space="preserve">
          <source>A set of configuration options. It is only used for projects. See &lt;a href=&quot;06-config.md&quot;&gt;Config&lt;/a&gt; for a description of each individual option.</source>
          <target state="translated">設定オプションのセット。 プロジェクトでのみ使用されます。 個々のオプションの説明については、 &lt;a href=&quot;06-config.md&quot;&gt;Config&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d59b72e748ce0333cf4c7df4110d02d76f06ef78" translate="yes" xml:space="preserve">
          <source>A set of files that should be treated as binaries and symlinked into the &lt;code&gt;bin-dir&lt;/code&gt; (from config).</source>
          <target state="translated">バイナリとして扱われ、（configから） &lt;code&gt;bin-dir&lt;/code&gt; にシンボリックリンクされる一連のファイル。</target>
        </trans-unit>
        <trans-unit id="356c9597f36e258a39b6f52825b6cf8d5ddf3e2a" translate="yes" xml:space="preserve">
          <source>A set of options for creating package archives.</source>
          <target state="translated">パッケージアーカイブを作成するためのオプションセット。</target>
        </trans-unit>
        <trans-unit id="c03be50246edab18dfc20fb8f672c92310fa23d8" translate="yes" xml:space="preserve">
          <source>A short description of the package. Usually this is one line long.</source>
          <target state="translated">パッケージの簡単な説明。通常は一行の長さです。</target>
        </trans-unit>
        <trans-unit id="a826a7267f013e941b307b609fd6033381d10f1c" translate="yes" xml:space="preserve">
          <source>API Docs</source>
          <target state="translated">APIドキュメント</target>
        </trans-unit>
        <trans-unit id="3166ff840d994bface9fa737e8528f4da2d762d2" translate="yes" xml:space="preserve">
          <source>API rate limit and OAuth tokens</source>
          <target state="translated">APIのレート制限とOAuthトークン</target>
        </trans-unit>
        <trans-unit id="00a5c80e1460844da318f6587c5820f97141554c" translate="yes" xml:space="preserve">
          <source>Abandoned packages</source>
          <target state="translated">放棄されたパッケージ</target>
        </trans-unit>
        <trans-unit id="5858378096c74bbfef20cd02cc772338b68222de" translate="yes" xml:space="preserve">
          <source>Add it to the configuration running &lt;code&gt;composer config -g github-oauth.github.com &amp;lt;oauthtoken&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;composer config -g github-oauth.github.com &amp;lt;oauthtoken&amp;gt;&lt;/code&gt; を実行している構成に追加します</target>
        </trans-unit>
        <trans-unit id="2308a774677a3e82d6a92ebd3b52235665e96a82" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;--tree&lt;/code&gt; or &lt;code&gt;-t&lt;/code&gt; flag to show a recursive tree of why the package is depended upon, for example:</source>
          <target state="translated">&lt;code&gt;--tree&lt;/code&gt; または &lt;code&gt;-t&lt;/code&gt; フラグを追加して、パッケージが依存している理由の再帰ツリーを表示します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="1ad15dee4c3dc14abeaf2d1e6a47f79a600d06c6" translate="yes" xml:space="preserve">
          <source>Add the directory to your PATH environment variable if it isn't already. For information on changing your PATH variable, please see &lt;a href=&quot;https://www.computerhope.com/issues/ch000549.htm&quot;&gt;this article&lt;/a&gt; and/or use Google.</source>
          <target state="translated">ディレクトリがまだない場合は、PATH環境変数に追加します。 PATH変数の変更については、 &lt;a href=&quot;https://www.computerhope.com/issues/ch000549.htm&quot;&gt;この記事&lt;/a&gt;を参照するか、Googleを使用してください。</target>
        </trans-unit>
        <trans-unit id="0e87b9fd5b7ceb11080424614b21756f76294bc4" translate="yes" xml:space="preserve">
          <source>Add this to your project's root &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">これをプロジェクトのルート &lt;code&gt;composer.json&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="cfc6af115ac1a521e168f2c24495fb0c056c9b05" translate="yes" xml:space="preserve">
          <source>Additionally it lets you edit most properties in the local &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">さらに、ローカルの &lt;code&gt;composer.json&lt;/code&gt; のほとんどのプロパティを編集できます。</target>
        </trans-unit>
        <trans-unit id="5946d4847f4d0001af33058666731d42d192d1b5" translate="yes" xml:space="preserve">
          <source>Additionally, it can dump an optimized autoloader that converts PSR-0/4 packages into classmap ones for performance reasons. In large applications with many classes, the autoloader can take up a substantial portion of every request's time. Using classmaps for everything is less convenient in development, but using this option you can still use PSR-0/4 for convenience and classmaps for performance.</source>
          <target state="translated">さらに、パフォーマンス上の理由から、PSR-04 パッケージをクラスマップに変換する最適化されたオートローダをダンプすることができます。多くのクラスを持つ大規模なアプリケーションでは、オートローダはすべてのリクエストの時間のかなりの部分を占有します。すべてにクラスマップを使うのは開発上あまり便利ではありませんが、このオプションを使えばPSR-04を便利に使い、クラスマップをパフォーマンスのために使うことができます。</target>
        </trans-unit>
        <trans-unit id="e224601a817edf322b786028b91a01b43efae446" translate="yes" xml:space="preserve">
          <source>After adding the &lt;a href=&quot;04-schema.md#autoload&quot;&gt;&lt;code&gt;autoload&lt;/code&gt;&lt;/a&gt; field, you have to re-run &lt;a href=&quot;03-cli.md#dump-autoload&quot;&gt;&lt;code&gt;dump-autoload&lt;/code&gt;&lt;/a&gt; to re-generate the &lt;code&gt;vendor/autoload.php&lt;/code&gt; file.</source>
          <target state="translated">&lt;a href=&quot;04-schema.md#autoload&quot;&gt; &lt;code&gt;autoload&lt;/code&gt; &lt;/a&gt;フィールドを追加した後、 &lt;a href=&quot;03-cli.md#dump-autoload&quot;&gt; &lt;code&gt;dump-autoload&lt;/code&gt; &lt;/a&gt;を再実行して、 &lt;code&gt;vendor/autoload.php&lt;/code&gt; ファイルを再生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="61dd6cf6833b4b17b8948e12ac8cbbb0e1ca5e3c" translate="yes" xml:space="preserve">
          <source>After adding/changing the requirements, the modified requirements will be installed or updated.</source>
          <target state="translated">要件の変更を追加した後、変更された要件がインストールまたは更新されます。</target>
        </trans-unit>
        <trans-unit id="0f3944b7d7d2f2695ba96aba671b0a1f5ded0713" translate="yes" xml:space="preserve">
          <source>After creating an OAuth consumer in the BitBucket control panel, you need to setup your auth.json file with the credentials like this (more info &lt;a href=&quot;06-config.md#bitbucket-oauth&quot;&gt;here&lt;/a&gt;):</source>
          <target state="translated">BitBucketコントロールパネルでOAuthコンシューマーを作成したら、次のような認証情報を使用してauth.jsonファイルを設定する必要があります（詳細は&lt;a href=&quot;06-config.md#bitbucket-oauth&quot;&gt;こちら&lt;/a&gt; ）：</target>
        </trans-unit>
        <trans-unit id="4aa28c32fb5dbe71ebbd79ed9650dd181355fabf" translate="yes" xml:space="preserve">
          <source>After removing the requirements, the modified requirements will be uninstalled.</source>
          <target state="translated">要件を削除した後、修正した要件はアンインストールされます。</target>
        </trans-unit>
        <trans-unit id="17903b957c1d940039b3bd82f45433a8f0bba168" translate="yes" xml:space="preserve">
          <source>After running the installer following &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;the Download page instructions&lt;/a&gt; you can run this to move composer.phar to a directory that is in your path:</source>
          <target state="translated">&lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;ダウンロードページの指示に従って&lt;/a&gt;インストーラーを実行した後、これを実行してcomposer.pharをパス内のディレクトリに移動できます。</target>
        </trans-unit>
        <trans-unit id="6a8b49f23c0c2e66b347773e3a4bb453ff1fb91c" translate="yes" xml:space="preserve">
          <source>Aliases</source>
          <target state="translated">Aliases</target>
        </trans-unit>
        <trans-unit id="a6a9e38b01b416e6059104fd466af81fe97ecb7b" translate="yes" xml:space="preserve">
          <source>All code contributions - including those of people having commit access - must go through a pull request and approved by a core developer before being merged. This is to ensure proper review of all the code.</source>
          <target state="translated">コミット権限を持つ人のコードも含めて、すべてのコードの投稿は、マージされる前にプルリクエストを通過し、コア開発者の承認を得なければなりません。これは、すべてのコードを適切にレビューするためのものです。</target>
        </trans-unit>
        <trans-unit id="05cfff0020a373bb0881550ea0e0b0a465acb49f" translate="yes" xml:space="preserve">
          <source>All links are optional fields.</source>
          <target state="translated">すべてのリンクは任意のフィールドです。</target>
        </trans-unit>
        <trans-unit id="7b44701e8b75ad8b60f4dd7fb48d869cab914d68" translate="yes" xml:space="preserve">
          <source>All of the following take an object which maps package names to versions of the package via version constraints. Read more about versions &lt;a href=&quot;articles/versions.md&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">以下のすべては、バージョン制約を介してパッケージ名をパッケージのバージョンにマップするオブジェクトを取ります。 バージョンの詳細については、 &lt;a href=&quot;articles/versions.md&quot;&gt;こちらをご覧ください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="923b16c0ad8a8ee5768b8d8bb663bb3058b74d02" translate="yes" xml:space="preserve">
          <source>All versions of each package are checked for stability, and those that are less stable than the &lt;code&gt;minimum-stability&lt;/code&gt; setting will be ignored when resolving your project dependencies. (Note that you can also specify stability requirements on a per-package basis using stability flags in the version constraints that you specify in a &lt;code&gt;require&lt;/code&gt; block (see &lt;a href=&quot;#package-links&quot;&gt;package links&lt;/a&gt; for more details).</source>
          <target state="translated">各パッケージのすべてのバージョンの安定性がチェックされ、プロジェクトの依存関係を解決するときに、 &lt;code&gt;minimum-stability&lt;/code&gt; 設定よりも安定性が低いバージョンは無視されます。 （ &lt;code&gt;require&lt;/code&gt; ブロックで指定するバージョン制約の安定性フラグを使用して、パッケージごとに安定性要件を指定することもできます（詳細については、 &lt;a href=&quot;#package-links&quot;&gt;パッケージのリンク&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="317179843c1c1730dec66f620daad146ccc731bd" translate="yes" xml:space="preserve">
          <source>Alright, so now you can publish packages. But specifying the VCS repository every time is cumbersome. You don't want to force all your users to do that.</source>
          <target state="translated">さてさて、これでパッケージを公開できるようになりました。しかし、毎回 VCS リポジトリを指定するのは面倒です。すべてのユーザにそれを強制したくはないでしょう。</target>
        </trans-unit>
        <trans-unit id="4f20259389c1d9d8d131ff2817be13419ba6cc2a" translate="yes" xml:space="preserve">
          <source>Also note that the override will not work if you change the &lt;code&gt;name&lt;/code&gt; property in your forked repository's &lt;code&gt;composer.json&lt;/code&gt; file as this needs to match the original for the override to work.</source>
          <target state="translated">また、フォークされたリポジトリーの &lt;code&gt;composer.json&lt;/code&gt; ファイルの &lt;code&gt;name&lt;/code&gt; プロパティを変更すると、オーバーライドが機能するために元のプロパティと一致する必要があるため、オーバーライドは機能しません。</target>
        </trans-unit>
        <trans-unit id="f197754bda54aa57234fe164ab5f3668001a20e5" translate="yes" xml:space="preserve">
          <source>Alternatively if you prefer not to have your OAuth credentials on your filesystem you may export the &lt;code&gt;bitbucket-oauth&lt;/code&gt; block above to the &lt;a href=&quot;03-cli.md#composer-auth&quot;&gt;COMPOSER_AUTH&lt;/a&gt; environment variable instead.</source>
          <target state="translated">または、ファイルシステムにOAuth認証情報を &lt;code&gt;bitbucket-oauth&lt;/code&gt; ない場合は、代わりに上記のbitbucket-oauthブロックを&lt;a href=&quot;03-cli.md#composer-auth&quot;&gt;COMPOSER_AUTH&lt;/a&gt;環境変数にエクスポートできます。</target>
        </trans-unit>
        <trans-unit id="6e4b8666417c4b7a8c3048862314d49c204146d1" translate="yes" xml:space="preserve">
          <source>Alternatively they can be separated with &quot;or&quot; and enclosed in parenthesis;</source>
          <target state="translated">あるいは、&quot;or &quot;で区切って括弧で囲むこともできます。</target>
        </trans-unit>
        <trans-unit id="be3cb14740493823ed9e3ccdfd4affedbf1dfc10" translate="yes" xml:space="preserve">
          <source>Although Composer is not intended to manage long-running processes and other such aspects of PHP projects, it can sometimes be handy to disable the process timeout on custom commands. This timeout defaults to 300 seconds and can be overridden in a variety of ways depending on the desired effect:</source>
          <target state="translated">Composer は、長時間実行するプロセスや PHP プロジェクトのその他の側面を管理することを目的としたものではありませんが、 カスタム・コマンドのプロセス・タイムアウトを無効にすると便利な場合があります。このタイムアウトのデフォルト値は 300 秒で、効果に応じてさまざまな方法で上書きできます。</target>
        </trans-unit>
        <trans-unit id="af91eaa25ce544bf469ffd0d071c132eeb8d516c" translate="yes" xml:space="preserve">
          <source>An Example for disjunctive licenses:</source>
          <target state="translated">ディジャンクティブライセンスの例。</target>
        </trans-unit>
        <trans-unit id="d9060137a9bfa6f1c4f44c0578f5e597f5cd1b28" translate="yes" xml:space="preserve">
          <source>An Example:</source>
          <target state="translated">例。</target>
        </trans-unit>
        <trans-unit id="488b684d555d11d379d702469529c661f8ccc88d" translate="yes" xml:space="preserve">
          <source>An URL to the website of the project.</source>
          <target state="translated">プロジェクトのウェブサイトへのURL。</target>
        </trans-unit>
        <trans-unit id="3c7da7fff804312b1eed098770f5296093e76532" translate="yes" xml:space="preserve">
          <source>An array of keywords that the package is related to. These can be used for searching and filtering.</source>
          <target state="translated">パッケージが関連するキーワードの配列。これらは検索やフィルタリングに使用できます。</target>
        </trans-unit>
        <trans-unit id="34a9d39085608fb9a2a771f12b1263eea511009a" translate="yes" xml:space="preserve">
          <source>An array of scripts wired to a single event can contain both PHP callbacks and command-line executable commands.</source>
          <target state="translated">単一のイベントに接続されたスクリプトの配列には、 PHP コールバックとコマンドラインの実行可能なコマンドの両方を含めることができます。</target>
        </trans-unit>
        <trans-unit id="22aadf8b617fee0ea472666edf16fe14ec4b7f57" translate="yes" xml:space="preserve">
          <source>An example composer.json of such a template package would be:</source>
          <target state="translated">このようなテンプレートパッケージのcomposer.jsonの例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="b0531e39fe8a7df00689f5afffd161d403a410b5" translate="yes" xml:space="preserve">
          <source>An example is Symfony. There are individual packages for the components. The Yaml component is under &lt;code&gt;Symfony\Component\Yaml&lt;/code&gt;. The package root is that &lt;code&gt;Yaml&lt;/code&gt; directory. To make autoloading possible, we need to make sure that it is not installed into &lt;code&gt;vendor/symfony/yaml&lt;/code&gt;, but instead into &lt;code&gt;vendor/symfony/yaml/Symfony/Component/Yaml&lt;/code&gt;, so that the autoloader can load it from &lt;code&gt;vendor/symfony/yaml&lt;/code&gt;.</source>
          <target state="translated">Symfonyがその一例です。 コンポーネントには個別のパッケージがあります。 Yamlコンポーネントは &lt;code&gt;Symfony\Component\Yaml&lt;/code&gt; 下にあります。 パッケージのルートはその &lt;code&gt;Yaml&lt;/code&gt; ディレクトリです。 オートローディングを可能にするには、オートローダーが &lt;code&gt;vendor/symfony/yaml&lt;/code&gt; からロードできるように、それがvendor / symfony / yamlではなく、 &lt;code&gt;vendor/symfony/yaml/Symfony/Component/Yaml&lt;/code&gt; にインストールされていることを確認する必要があります。 。</target>
        </trans-unit>
        <trans-unit id="0339cebaea5e4ff28605686519382e5830abc261" translate="yes" xml:space="preserve">
          <source>An example of a valid plugin &lt;code&gt;composer.json&lt;/code&gt; file (with the autoloading part omitted):</source>
          <target state="translated">有効なプラグイン &lt;code&gt;composer.json&lt;/code&gt; ファイルの例（オートローディング部分は省略）：</target>
        </trans-unit>
        <trans-unit id="bf1fd0e9fdf4378c62fe51d50345262e5b266da6" translate="yes" xml:space="preserve">
          <source>An example of the former looks like this:</source>
          <target state="translated">前者の例はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="c264995e1a53090886ec6704f2cc9997edc074cc" translate="yes" xml:space="preserve">
          <source>An example use-case would be:</source>
          <target state="translated">使用例としては、次のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="4f74c81ba0e6c0f4b5e46560390f7ab5d2847548" translate="yes" xml:space="preserve">
          <source>An example value:</source>
          <target state="translated">値の例。</target>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">一例です。</target>
        </trans-unit>
        <trans-unit id="9704694c76c9e98120c00b94b09d9f74d4d832e6" translate="yes" xml:space="preserve">
          <source>Any command line script that a Composer package would like to pass along to a user who installs the package should be listed as a vendor binary.</source>
          <target state="translated">Composer パッケージが、パッケージをインストールするユーザーに渡したいコマンドライン・スクリプトは、ベンダー・ バイナリとしてリストアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="6e13958a7f476347a0a27581c50c98880b6ecc66" translate="yes" xml:space="preserve">
          <source>Any open source project using Composer is recommended to publish their packages on Packagist. A library does not need to be on Packagist to be used by Composer, but it enables discovery and adoption by other developers more quickly.</source>
          <target state="translated">Composer を使用しているオープンソース・プロジェクトでは、パッケージを Packagist で公開することをお勧めします。ライブラリは Packagist 上になくても Composer で使用できますが、他の開発者がより迅速に発見して採用することができます。</target>
        </trans-unit>
        <trans-unit id="9e50bc5c66adf3beca901b35da041ca722d6892c" translate="yes" xml:space="preserve">
          <source>Apache-2.0</source>
          <target state="translated">Apache-2.0</target>
        </trans-unit>
        <trans-unit id="97f66d41c11acc717f2700d3949ddca4a8745c7b" translate="yes" xml:space="preserve">
          <source>Arbitrary extra data for consumption by &lt;code&gt;scripts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;scripts&lt;/code&gt; で使用するための任意の追加データ。</target>
        </trans-unit>
        <trans-unit id="7c422841b7e3951946583038790545c4ed38481b" translate="yes" xml:space="preserve">
          <source>Articles</source>
          <target state="translated">Articles</target>
        </trans-unit>
        <trans-unit id="aa778b50a158bc996419912e96c1852b2ba59623" translate="yes" xml:space="preserve">
          <source>Artifact</source>
          <target state="translated">Artifact</target>
        </trans-unit>
        <trans-unit id="83746a64f3579fba8670f7ff387e1cd02c821240" translate="yes" xml:space="preserve">
          <source>As Composer uses &lt;a href=&quot;https://github.com/symfony/console&quot;&gt;symfony/console&lt;/a&gt; you can call commands by short name if it's not ambiguous.</source>
          <target state="translated">Composerは&lt;a href=&quot;https://github.com/symfony/console&quot;&gt;symfony / console&lt;/a&gt;を使用するので、あいまいでない場合はコマンドを短い名前で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="4cc2d185c72be53aa9065a9d2804ea68b6da7b69" translate="yes" xml:space="preserve">
          <source>As a result, anyone can now require &lt;code&gt;1.0.*&lt;/code&gt; and it will happily install &lt;code&gt;dev-master&lt;/code&gt;.</source>
          <target state="translated">その結果、誰もが &lt;code&gt;1.0.*&lt;/code&gt; を要求できるようになり、喜んで &lt;code&gt;dev-master&lt;/code&gt; がインストールされます。</target>
        </trans-unit>
        <trans-unit id="cc2eb351aa7f41fa352e127c8c2e9a76d9db0e54" translate="yes" xml:space="preserve">
          <source>As a workaround, open a SSH connection to your Git host before running Composer:</source>
          <target state="translated">回避策として、Composer を実行する前に Git ホストに SSH 接続を開きます。</target>
        </trans-unit>
        <trans-unit id="5c60684f215ca3f207993ba9fd601061e20cd23a" translate="yes" xml:space="preserve">
          <source>As mentioned above, the &lt;code&gt;composer.lock&lt;/code&gt; file prevents you from automatically getting the latest versions of your dependencies. To update to the latest versions, use the &lt;a href=&quot;03-cli.md#update&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; command. This will fetch the latest matching versions (according to your &lt;code&gt;composer.json&lt;/code&gt; file) and update the lock file with the new versions. (This is equivalent to deleting the &lt;code&gt;composer.lock&lt;/code&gt; file and running &lt;code&gt;install&lt;/code&gt; again.)</source>
          <target state="translated">上記のように、 &lt;code&gt;composer.lock&lt;/code&gt; ファイルは、依存関係の最新バージョンを自動的に取得することを防ぎます。 最新バージョンに&lt;a href=&quot;03-cli.md#update&quot;&gt; &lt;code&gt;update&lt;/code&gt; &lt;/a&gt;するには、 updateコマンドを使用します。 これにより、（ &lt;code&gt;composer.json&lt;/code&gt; ファイルに従って）最新の一致するバージョンがフェッチされ、ロックファイルが新しいバージョンで更新されます。 （これは、 &lt;code&gt;composer.lock&lt;/code&gt; ファイルを削除して、再度 &lt;code&gt;install&lt;/code&gt; を実行することと同じです。）</target>
        </trans-unit>
        <trans-unit id="6c039e17f280882f1d5927f7eb4bb1a439bebbd7" translate="yes" xml:space="preserve">
          <source>As soon as you have a &lt;code&gt;composer.json&lt;/code&gt; in a directory, that directory is a package. When you add a &lt;a href=&quot;04-schema.md#require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; to a project, you are making a package that depends on other packages. The only difference between your project and a library is that your project is a package without a name.</source>
          <target state="translated">ディレクトリに &lt;code&gt;composer.json&lt;/code&gt; があるとすぐに、そのディレクトリはパッケージになります。 プロジェクトに&lt;a href=&quot;04-schema.md#require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;を追加すると 、他のパッケージに依存するパッケージが作成されます。 プロジェクトとライブラリの唯一の違いは、プロジェクトが名前のないパッケージであることです。</target>
        </trans-unit>
        <trans-unit id="c1aabc679ca33306f57f0fe08b498796ae5fe846" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;depends&lt;/code&gt; you can request a recursive lookup, which will list all packages depending on the packages that cause the conflict.</source>
          <target state="translated">&lt;code&gt;depends&lt;/code&gt; と同様に、再帰的なルックアップをリクエストできます。これにより、競合を引き起こしているパッケージに依存するすべてのパッケージがリストされます。</target>
        </trans-unit>
        <trans-unit id="d202c4453954d168e38baec60c33f0d506920f64" translate="yes" xml:space="preserve">
          <source>As you can see, &lt;a href=&quot;04-schema.md#require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; takes an object that maps &lt;strong&gt;package names&lt;/strong&gt; (e.g. &lt;code&gt;monolog/monolog&lt;/code&gt;) to &lt;strong&gt;version constraints&lt;/strong&gt; (e.g. &lt;code&gt;1.0.*&lt;/code&gt;).</source>
          <target state="translated">ご覧のとおり、 &lt;a href=&quot;04-schema.md#require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;は&lt;strong&gt;パッケージ名&lt;/strong&gt; （例： &lt;code&gt;monolog/monolog&lt;/code&gt; ）を&lt;strong&gt;バージョン制約&lt;/strong&gt; （例： &lt;code&gt;1.0.*&lt;/code&gt; ）にマップするオブジェクトを取得します。</target>
        </trans-unit>
        <trans-unit id="f38a05a8846d18a6daea8aced7cdc6262589cf2e" translate="yes" xml:space="preserve">
          <source>Assuming &lt;code&gt;doctrine/doctrine-fixtures-bundle&lt;/code&gt; requires &lt;code&gt;&quot;doctrine/data-fixtures&quot;: &quot;dev-master&quot;&lt;/code&gt; then inside the root composer.json you need to add the second line below to allow dev releases for the &lt;code&gt;doctrine/data-fixtures&lt;/code&gt; package :</source>
          <target state="translated">&lt;code&gt;doctrine/doctrine-fixtures-bundle&lt;/code&gt; に &lt;code&gt;&quot;doctrine/data-fixtures&quot;: &quot;dev-master&quot;&lt;/code&gt; が必要であるとすると、ルートcomposer.json内に下の2行目を追加して、 &lt;code&gt;doctrine/data-fixtures&lt;/code&gt; パッケージのdevリリースを許可する必要があります。</target>
        </trans-unit>
        <trans-unit id="b26618622d53fbf3bd19bd424616badd12317792" translate="yes" xml:space="preserve">
          <source>At the same time, this implies that all code which is hosted somewhere else (on another service or for example in Subversion) will not have downloads available and thus installations usually take a lot longer.</source>
          <target state="translated">同時に、これはどこか別の場所(別のサービスやSubversionなど)でホストされているすべてのコードはダウンロードできないことを意味しています。</target>
        </trans-unit>
        <trans-unit id="8e1fec418eb438cc1626beef3a2c9b16ec051907" translate="yes" xml:space="preserve">
          <source>At times it may be necessary for a package to require additional actions during installation, such as installing packages outside of the default &lt;code&gt;vendor&lt;/code&gt; library.</source>
          <target state="translated">デフォルトの &lt;code&gt;vendor&lt;/code&gt; ライブラリの外部にパッケージをインストールするなど、パッケージのインストール中に追加のアクションが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="ee1acfa55eb1476c86c5c4a68f256a67b25289ab" translate="yes" xml:space="preserve">
          <source>Authentication</source>
          <target state="translated">Authentication</target>
        </trans-unit>
        <trans-unit id="328562ec3a0ea503937712c9339a32e0ddecbdc8" translate="yes" xml:space="preserve">
          <source>Autoload mapping for a PHP autoloader.</source>
          <target state="translated">PHP オートローダ用のオートロードマッピング。</target>
        </trans-unit>
        <trans-unit id="e0d04c67ce4415b0100fef1d7082f93a04ad4202" translate="yes" xml:space="preserve">
          <source>Autoloader Optimization</source>
          <target state="translated">オートローダーの最適化</target>
        </trans-unit>
        <trans-unit id="3fa81ba949fafdad4688aed6d9380f82976ca9d7" translate="yes" xml:space="preserve">
          <source>Autoloading</source>
          <target state="translated">Autoloading</target>
        </trans-unit>
        <trans-unit id="e1250113018e58f1b919dbf17ed6b4e89358edcf" translate="yes" xml:space="preserve">
          <source>Available options (in order of stability) are &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;alpha&lt;/code&gt;, &lt;code&gt;beta&lt;/code&gt;, &lt;code&gt;RC&lt;/code&gt;, and &lt;code&gt;stable&lt;/code&gt;.</source>
          <target state="translated">利用可能なオプション（安定性の順に）は、 &lt;code&gt;dev&lt;/code&gt; 、 &lt;code&gt;alpha&lt;/code&gt; 、 &lt;code&gt;beta&lt;/code&gt; 、 &lt;code&gt;RC&lt;/code&gt; 、および &lt;code&gt;stable&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0216db4ce6f2ea64dc7b8fe10f1a6c5c52bb7bd7" translate="yes" xml:space="preserve">
          <source>BSD-2-Clause</source>
          <target state="translated">BSD-2-Clause</target>
        </trans-unit>
        <trans-unit id="d6f9c69f2854ede6f6c6c74c61a8e511654060d0" translate="yes" xml:space="preserve">
          <source>BSD-3-Clause</source>
          <target state="translated">BSD-3-Clause</target>
        </trans-unit>
        <trans-unit id="f583344b17d6a421172c1f4d2a7fa649e96f7370" translate="yes" xml:space="preserve">
          <source>BSD-4-Clause</source>
          <target state="translated">BSD-4-Clause</target>
        </trans-unit>
        <trans-unit id="acc4dcc7543cec838398b3fb7433a77d63b4c27f" translate="yes" xml:space="preserve">
          <source>Base class: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/EventDispatcher/Event.html&quot;&gt;&lt;code&gt;Composer\EventDispatcher\Event&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">基本クラス： &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/EventDispatcher/Event.html&quot;&gt; &lt;code&gt;Composer\EventDispatcher\Event&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cb3a8802da5b3164771a468d78ff7995a249f08a" translate="yes" xml:space="preserve">
          <source>Basic usage</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="c3b2e01e7c06744d0ef00f9d777cf3cc3507e38c" translate="yes" xml:space="preserve">
          <source>Basically, you define the same information that is included in the &lt;code&gt;composer&lt;/code&gt; repository's &lt;code&gt;packages.json&lt;/code&gt;, but only for a single package. Again, the minimum required fields are &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;, and either of &lt;code&gt;dist&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">基本的に、 &lt;code&gt;composer&lt;/code&gt; リポジトリの &lt;code&gt;packages.json&lt;/code&gt; に含まれているものと同じ情報を定義しますが、単一のパッケージについてのみです。 この場合も、最低限必要なフィールドは &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;version&lt;/code&gt; 、および &lt;code&gt;dist&lt;/code&gt; または &lt;code&gt;source&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="e77116810cc0989f719eb50cb433c362056a10f6" translate="yes" xml:space="preserve">
          <source>Be sure to &lt;strong&gt;set the right &lt;a href=&quot;../04-schema.md#minimum-stability&quot;&gt;minimum-stability&lt;/a&gt;&lt;/strong&gt;. To get started or be sure this is no issue, set &lt;code&gt;minimum-stability&lt;/code&gt; to &quot;dev&quot;.</source>
          <target state="translated">&lt;strong&gt;正しい&lt;a href=&quot;../04-schema.md#minimum-stability&quot;&gt;最低安定度&lt;/a&gt;&lt;/strong&gt;を&lt;strong&gt;設定して&lt;/strong&gt;ください。 開始するか、これが問題でないことを確認するには、 &lt;code&gt;minimum-stability&lt;/code&gt; を &quot;dev&quot;に設定します。</target>
        </trans-unit>
        <trans-unit id="55fcce021fba295a9c1a6af7f5ed93b60787340c" translate="yes" xml:space="preserve">
          <source>Because Composer is heavily geared toward utilizing version control systems like git, the term &quot;version&quot; can be a little ambiguous. In the sense of a version control system, a &quot;version&quot; is a specific set of files that contain specific data. In git terminology, this is a &quot;ref&quot;, or a specific commit, which may be represented by a branch HEAD or a tag. When you check out that version in your VCS -- for example, tag &lt;code&gt;v1.1&lt;/code&gt; or commit &lt;code&gt;e35fa0d&lt;/code&gt; --, you're asking for a single, known set of files, and you always get the same files back.</source>
          <target state="translated">Composerはgitなどのバージョン管理システムを利用することに重点が置かれているため、「バージョン」という用語は少しあいまいな場合があります。 バージョン管理システムの意味では、「バージョン」は特定のデータを含む特定のファイルセットです。 gitの用語では、これは「ref」または特定のコミットであり、ブランチのHEADまたはタグで表すことができます。 VCSでそのバージョンをチェックアウトするとき-たとえば、 &lt;code&gt;v1.1&lt;/code&gt; をタグ付けしたり、 &lt;code&gt;e35fa0d&lt;/code&gt; をコミットしたりすると、単一の既知のファイルセットを要求し、常に同じファイルを取得します。</target>
        </trans-unit>
        <trans-unit id="152c73cab95ce715e300079e2e37c6e93412341a" translate="yes" xml:space="preserve">
          <source>Because of GitHub's rate limits on their API it can happen that Composer prompts for authentication asking your username and password so it can go ahead with its work.</source>
          <target state="translated">GitHubのAPIではレートが制限されているため、ユーザー名とパスワードを尋ねる認証画面が表示され、作業を進めることができます。</target>
        </trans-unit>
        <trans-unit id="e07ed9be88f11daeec2a6ef0ecdd15133bab6a21" translate="yes" xml:space="preserve">
          <source>Before asking anyone, run &lt;a href=&quot;../03-cli.md#diagnose&quot;&gt;&lt;code&gt;composer diagnose&lt;/code&gt;&lt;/a&gt; to check for common problems. If it all checks out, proceed to the next steps.</source>
          <target state="translated">誰かに尋ねる前に、 &lt;a href=&quot;../03-cli.md#diagnose&quot;&gt; &lt;code&gt;composer diagnose&lt;/code&gt; &lt;/a&gt;を実行して一般的な問題を確認してください。 すべてチェックアウトされている場合は、次の手順に進みます。</target>
        </trans-unit>
        <trans-unit id="67d05586169b883cd7101add6b91b3ddadc6b33f" translate="yes" xml:space="preserve">
          <source>Before we look at the different types of repositories that exist, we need to understand some of the basic concepts that Composer is built on.</source>
          <target state="translated">さまざまなタイプのリポジトリを見る前に、Composer の基本的なコンセプトを理解しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="f02382aa58e0da8edd4751f27e1393584e3e5513" translate="yes" xml:space="preserve">
          <source>BitBucket Driver Configuration</source>
          <target state="translated">BitBucketドライバの構成</target>
        </trans-unit>
        <trans-unit id="f69f233005f15802770fd26fbf7ead52ec13d9e6" translate="yes" xml:space="preserve">
          <source>Book</source>
          <target state="translated">Book</target>
        </trans-unit>
        <trans-unit id="c4b615a43fc4986cda3a69b80cf7e516c14464e4" translate="yes" xml:space="preserve">
          <source>Branch alias</source>
          <target state="translated">分岐の別名</target>
        </trans-unit>
        <trans-unit id="fe4749631b96d3c49496c6cb6e1a1bcfee742c85" translate="yes" xml:space="preserve">
          <source>Branch aliases are great for aliasing main development lines. But in order to use them you need to have control over the source repository, and you need to commit changes to version control.</source>
          <target state="translated">ブランチエイリアスはメインの開発ラインをエイリアスするのに最適です。しかし、ブランチエイリアスを使うにはソースリポジトリを制御する必要があり、バージョン管理に変更をコミットする必要があります。</target>
        </trans-unit>
        <trans-unit id="f578227926a03a85a494aaca127cfbff63d7ec5e" translate="yes" xml:space="preserve">
          <source>Branches</source>
          <target state="translated">Branches</target>
        </trans-unit>
        <trans-unit id="09a38d3ff9a1586cae8f4664c995a48251312bf5" translate="yes" xml:space="preserve">
          <source>By default Composer only uses the packagist repository. By specifying repositories you can get packages from elsewhere.</source>
          <target state="translated">デフォルトでは、Composer は packagist リポジトリのみを使用します。リポジトリを指定することで、他の場所からパッケージを取得することができます。</target>
        </trans-unit>
        <trans-unit id="2a8b9a8a3d0850cf06867f84d12744deee4d4819" translate="yes" xml:space="preserve">
          <source>By default it points to &lt;code&gt;$COMPOSER_HOME/cache&lt;/code&gt; on *nix and macOS, and &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Composer&lt;/code&gt; (or &lt;code&gt;%LOCALAPPDATA%/Composer&lt;/code&gt;) on Windows.</source>
          <target state="translated">デフォルトでは、* nixおよびmacOSでは &lt;code&gt;$COMPOSER_HOME/cache&lt;/code&gt; を &lt;code&gt;%LOCALAPPDATA%/Composer&lt;/code&gt; 、Windowsでは &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Composer&lt;/code&gt; （または％LOCALAPPDATA％/ Composer ）を指します。</target>
        </trans-unit>
        <trans-unit id="64cae90b72b27fba8f02807aaf622339c1454ab7" translate="yes" xml:space="preserve">
          <source>By default it points to &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Roaming\Composer&lt;/code&gt; on Windows and &lt;code&gt;/Users/&amp;lt;user&amp;gt;/.composer&lt;/code&gt; on macOS. On *nix systems that follow the &lt;a href=&quot;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specifications&lt;/a&gt;, it points to &lt;code&gt;$XDG_CONFIG_HOME/composer&lt;/code&gt;. On other *nix systems, it points to &lt;code&gt;/home/&amp;lt;user&amp;gt;/.composer&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Windowsでは &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Roaming\Composer&lt;/code&gt; 、macOSでは &lt;code&gt;/Users/&amp;lt;user&amp;gt;/.composer&lt;/code&gt; を指します。 &lt;a href=&quot;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDGベースディレクトリの仕様に&lt;/a&gt;従う* nixシステムでは、 &lt;code&gt;$XDG_CONFIG_HOME/composer&lt;/code&gt; 指します。 他の* nixシステムでは、 &lt;code&gt;/home/&amp;lt;user&amp;gt;/.composer&lt;/code&gt; . composerを指します。</target>
        </trans-unit>
        <trans-unit id="b10a53f3d48e004da63c6762c842f3369378f24a" translate="yes" xml:space="preserve">
          <source>By default only the Packagist repository is registered in Composer. You can add more repositories to your project by declaring them in &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、PackagistリポジトリのみがComposerに登録されています。 &lt;code&gt;composer.json&lt;/code&gt; でリポジトリを宣言することにより、プロジェクトにリポジトリを追加できます。</target>
        </trans-unit>
        <trans-unit id="74e9252d3f7d6051ccb03a29298d08944c0fe629" translate="yes" xml:space="preserve">
          <source>By default the command checks for the packages on packagist.org.</source>
          <target state="translated">デフォルトでは、このコマンドはpackagist.org上のパッケージをチェックします。</target>
        </trans-unit>
        <trans-unit id="97376d9330f10aa21dfe86e18b60daccda7ebab1" translate="yes" xml:space="preserve">
          <source>By default, the Composer autoloader runs relatively fast. However, due to the way PSR-4 and PSR-0 autoloading rules are set up, it needs to check the filesystem before resolving a classname conclusively. This slows things down quite a bit, but it is convenient in development environments because when you add a new class it can immediately be discovered/used without having to rebuild the autoloader configuration.</source>
          <target state="translated">デフォルトでは、Composer オートローダーは比較的高速に動作します。しかし、PSR-4 および PSR-0 のオートローディング・ルールの設定方法により、クラス名を最終的に解決する前に ファイルシステムをチェックする必要があります。このため、動作はかなり遅くなりますが、開発環境では、新しいクラスを追加したときに、オートローダの構成を再構築しなくても、そのクラスがすぐに検出され、使用されていることを確認でき るので便利です。</target>
        </trans-unit>
        <trans-unit id="2b1e704f6f2630ce516890978ee40d5f5b8d2c1c" translate="yes" xml:space="preserve">
          <source>By default, the priority of an event handler is set to 0. The priority can be changed by attaching a tuple where the first value is the method name, as before, and the second value is an integer representing the priority. Higher integers represent higher priorities. Priority 2 is called before priority 1, etc.</source>
          <target state="translated">デフォルトでは、イベントハンドラの優先度は 0 に設定されています。 優先度を変更するには、先ほどと同様にメソッド名を 1 番目の値に、2 番目の値に優先度を表す整数を指定したタプルをアタッチします。整数が大きいほど優先度が高くなります。優先度2は優先度1よりも先に呼び出されるなどの設定になっています。</target>
        </trans-unit>
        <trans-unit id="6a25f87d24c99b1abbe31d6ee5eeab7df2a02e90" translate="yes" xml:space="preserve">
          <source>By setting the &lt;code&gt;COMPOSER&lt;/code&gt; env variable it is possible to set the filename of &lt;code&gt;composer.json&lt;/code&gt; to something else.</source>
          <target state="translated">&lt;code&gt;COMPOSER&lt;/code&gt; 環境変数を設定することにより、 &lt;code&gt;composer.json&lt;/code&gt; のファイル名を別の名前に設定することが可能です。</target>
        </trans-unit>
        <trans-unit id="469bfa76674356b37b03b941b79f5ca6765089e7" translate="yes" xml:space="preserve">
          <source>By setting this environmental value, you can set a path to a certificate bundle file to be used during SSL/TLS peer verification.</source>
          <target state="translated">この環境値を設定することで、SSLTLSピア検証時に使用する証明書バンドルファイルのパスを設定することができます。</target>
        </trans-unit>
        <trans-unit id="c3b7d12599f837bb730748fd91344be9d410d870" translate="yes" xml:space="preserve">
          <source>By setting this option you can change the &lt;code&gt;bin&lt;/code&gt; (&lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;Vendor Binaries&lt;/a&gt;) directory to something other than &lt;code&gt;vendor/bin&lt;/code&gt;.</source>
          <target state="translated">このオプションを設定することで、 &lt;code&gt;bin&lt;/code&gt; （ &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;Vendor Binaries&lt;/a&gt; ）ディレクトリを &lt;code&gt;vendor/bin&lt;/code&gt; 以外のものに変更できます。</target>
        </trans-unit>
        <trans-unit id="7be72e168bf1e5048755e96032f845b3e549174b" translate="yes" xml:space="preserve">
          <source>By setting this var you can make Composer install the dependencies into a directory other than &lt;code&gt;vendor&lt;/code&gt;.</source>
          <target state="translated">この変数を設定することで、Composerに依存関係を &lt;code&gt;vendor&lt;/code&gt; 以外のディレクトリにインストールさせることができます。</target>
        </trans-unit>
        <trans-unit id="01a2ee466b5c41ba64286ce1734f0deba4e0276a" translate="yes" xml:space="preserve">
          <source>By setting this var you can specify the version of the root package, if it can not be guessed from VCS info and is not present in &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">この変数を設定することで、ルートパッケージのバージョンを指定できます。VCS情報から推測できず、 &lt;code&gt;composer.json&lt;/code&gt; に存在しない場合です。</target>
        </trans-unit>
        <trans-unit id="b3e712363655d1d41023e3aa1789639227680ec6" translate="yes" xml:space="preserve">
          <source>By specifying &lt;code&gt;vendor-alias&lt;/code&gt; for the PEAR repository from the start, you can avoid this scenario and future-proof your package names.</source>
          <target state="translated">PEARリポジトリの &lt;code&gt;vendor-alias&lt;/code&gt; を最初から指定することで、このシナリオを回避し、パッケージ名を将来にわたって保証できます。</target>
        </trans-unit>
        <trans-unit id="f17f4270d15421931e070fa495df5c5e37761cf6" translate="yes" xml:space="preserve">
          <source>By using comparison operators you can specify ranges of valid versions. Valid operators are &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;.</source>
          <target state="translated">比較演算子を使用すると、有効なバージョンの範囲を指定できます。 有効な演算子は、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;=&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;=&lt;/code&gt; 、 &lt;code&gt;!=&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c80f725e1f1fa64bc36b4ab6a91320da73c186ea" translate="yes" xml:space="preserve">
          <source>COMPOSER</source>
          <target state="translated">COMPOSER</target>
        </trans-unit>
        <trans-unit id="811286a00e3339baaad2d587906a50d0a5e7d07c" translate="yes" xml:space="preserve">
          <source>COMPOSER_ALLOW_SUPERUSER</source>
          <target state="translated">COMPOSER_ALLOW_SUPERUSER</target>
        </trans-unit>
        <trans-unit id="b04df09bbd89c2397dd18d6a63c9ff0758f6c294" translate="yes" xml:space="preserve">
          <source>COMPOSER_AUTH</source>
          <target state="translated">COMPOSER_AUTH</target>
        </trans-unit>
        <trans-unit id="60affbc85fc8fa713061f77f2269bcb4cceecd91" translate="yes" xml:space="preserve">
          <source>COMPOSER_BIN_DIR</source>
          <target state="translated">COMPOSER_BIN_DIR</target>
        </trans-unit>
        <trans-unit id="08671b47da28cf39041cfaa93342bdf251d4277c" translate="yes" xml:space="preserve">
          <source>COMPOSER_CACHE_DIR</source>
          <target state="translated">COMPOSER_CACHE_DIR</target>
        </trans-unit>
        <trans-unit id="2716563bcb8d0e8160b81fe8dba1c12874d1fbf3" translate="yes" xml:space="preserve">
          <source>COMPOSER_CAFILE</source>
          <target state="translated">COMPOSER_CAFILE</target>
        </trans-unit>
        <trans-unit id="9cd165d498d8467f52200c1094ac3c1366629fa7" translate="yes" xml:space="preserve">
          <source>COMPOSER_DISCARD_CHANGES</source>
          <target state="translated">COMPOSER_DISCARD_CHANGES</target>
        </trans-unit>
        <trans-unit id="dec4d4484b7da5bf2a4839a69cfb71305c57da1e" translate="yes" xml:space="preserve">
          <source>COMPOSER_HOME</source>
          <target state="translated">COMPOSER_HOME</target>
        </trans-unit>
        <trans-unit id="002ca46200390b4dffc437d7a5b4a8fe12a927ff" translate="yes" xml:space="preserve">
          <source>COMPOSER_HOME/config.json</source>
          <target state="translated">COMPOSER_HOME/config.json</target>
        </trans-unit>
        <trans-unit id="b0dd2ac67407e7516a1d40b2596aad90bff3cd56" translate="yes" xml:space="preserve">
          <source>COMPOSER_HTACCESS_PROTECT</source>
          <target state="translated">COMPOSER_HTACCESS_PROTECT</target>
        </trans-unit>
        <trans-unit id="518818cb74c2ab09567ec3ee44acbd971048955a" translate="yes" xml:space="preserve">
          <source>COMPOSER_MEMORY_LIMIT</source>
          <target state="translated">COMPOSER_MEMORY_LIMIT</target>
        </trans-unit>
        <trans-unit id="0b9a6f1a423b3d80d2e683f4d045962f5129b0e1" translate="yes" xml:space="preserve">
          <source>COMPOSER_MIRROR_PATH_REPOS</source>
          <target state="translated">COMPOSER_MIRROR_PATH_REPOS</target>
        </trans-unit>
        <trans-unit id="839f5a811dd50bed10be63eb1e3e27070f045463" translate="yes" xml:space="preserve">
          <source>COMPOSER_NO_INTERACTION</source>
          <target state="translated">COMPOSER_NO_INTERACTION</target>
        </trans-unit>
        <trans-unit id="ce2e7f03bdcd08ed026ebec46acbebc5c289ef2c" translate="yes" xml:space="preserve">
          <source>COMPOSER_PROCESS_TIMEOUT</source>
          <target state="translated">COMPOSER_PROCESS_TIMEOUT</target>
        </trans-unit>
        <trans-unit id="fd3289742ccea1c0b5b04e4bae337b35b40bbedc" translate="yes" xml:space="preserve">
          <source>COMPOSER_ROOT_VERSION</source>
          <target state="translated">COMPOSER_ROOT_VERSION</target>
        </trans-unit>
        <trans-unit id="29ba3f80cb4fbd7b0bd52f40bf529513f4bc0deb" translate="yes" xml:space="preserve">
          <source>COMPOSER_SELF_UPDATE_TARGET</source>
          <target state="translated">COMPOSER_SELF_UPDATE_TARGET</target>
        </trans-unit>
        <trans-unit id="25e1f34af5377a144fe0fc11466df9f68711dbe7" translate="yes" xml:space="preserve">
          <source>COMPOSER_VENDOR_DIR</source>
          <target state="translated">COMPOSER_VENDOR_DIR</target>
        </trans-unit>
        <trans-unit id="c0d1b9c003d5d8d40a926fbd3fa60c770d402adb" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;dump-autoload&lt;/code&gt; with &lt;code&gt;--apcu&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--apcu&lt;/code&gt; で &lt;code&gt;dump-autoload&lt;/code&gt; を呼び出す</target>
        </trans-unit>
        <trans-unit id="3b0b7e75ebc1d8ff08fe4ead9851ef02b810b602" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;dump-autoload&lt;/code&gt; with &lt;code&gt;-a&lt;/code&gt; / &lt;code&gt;--classmap-authoritative&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; / &lt;code&gt;--classmap-authoritative&lt;/code&gt; を指定して &lt;code&gt;dump-autoload&lt;/code&gt; を呼び出します</target>
        </trans-unit>
        <trans-unit id="9c1bbea1499aa2b8977e9b7e8f2b4d3e68e869a7" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;dump-autoload&lt;/code&gt; with &lt;code&gt;-o&lt;/code&gt; / &lt;code&gt;--optimize&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-o&lt;/code&gt; / &lt;code&gt;--optimize&lt;/code&gt; を指定して &lt;code&gt;dump-autoload&lt;/code&gt; を呼び出す</target>
        </trans-unit>
        <trans-unit id="67ff7e41394ab0443066504daf647293140ed095" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; with &lt;code&gt;--apcu-autoloader&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--apcu-autoloader&lt;/code&gt; で &lt;code&gt;install&lt;/code&gt; または &lt;code&gt;update&lt;/code&gt; を呼び出します</target>
        </trans-unit>
        <trans-unit id="7d942037648d77359138da13a97dd5f195963bdb" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; with &lt;code&gt;-a&lt;/code&gt; / &lt;code&gt;--classmap-authoritative&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; / &lt;code&gt;--classmap-authoritative&lt;/code&gt; で &lt;code&gt;install&lt;/code&gt; または &lt;code&gt;update&lt;/code&gt; を呼び出します</target>
        </trans-unit>
        <trans-unit id="2f47df95d2a46c67a0047d88ff4c647a2efcdcbc" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; with &lt;code&gt;-o&lt;/code&gt; / &lt;code&gt;--optimize-autoloader&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-o&lt;/code&gt; / &lt;code&gt;--optimize-autoloader&lt;/code&gt; を使用して &lt;code&gt;install&lt;/code&gt; または &lt;code&gt;update&lt;/code&gt; を呼び出します</target>
        </trans-unit>
        <trans-unit id="99965321c935b5a96e87e9bdba285ca4a39c5383" translate="yes" xml:space="preserve">
          <source>Callbacks can only autoload classes from psr-0, psr-4 and classmap definitions. If a defined callback relies on functions defined outside of a class, the callback itself is responsible for loading the file containing these functions.</source>
          <target state="translated">コールバックは、psr-0、psr-4、およびクラスマップ定義のクラスのみをオートロードすることができます。定義されたコールバックがクラス外で定義された関数に依存している場合、コールバック自身がこれらの関数を含むファイルをロードする責任を負います。</target>
        </trans-unit>
        <trans-unit id="6fe4f83df362d3832d1e83d41e9b63b23a3216d8" translate="yes" xml:space="preserve">
          <source>Calling Composer commands</source>
          <target state="translated">コンポーザーコマンドの呼び出し</target>
        </trans-unit>
        <trans-unit id="83f809c10eaa48c9342843ecdebde7f746889a5d" translate="yes" xml:space="preserve">
          <source>Calling a Custom Installer</source>
          <target state="translated">カスタム インストーラの呼び出し</target>
        </trans-unit>
        <trans-unit id="ed12502177a4977a99424b228a00927e85dfa7d3" translate="yes" xml:space="preserve">
          <source>Can vendor binaries be installed somewhere other than vendor/bin?</source>
          <target state="translated">ベンダーのバイナリを vendorbin 以外の場所にインストールすることはできますか?</target>
        </trans-unit>
        <trans-unit id="e253bce929413fa3ba2d6bd71ce6fa040084e4b5" translate="yes" xml:space="preserve">
          <source>Capable Plugins classes must implement the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/Capable.php&quot;&gt;&lt;code&gt;Composer\Plugin\Capable&lt;/code&gt;&lt;/a&gt; interface and declare their capabilities in the &lt;code&gt;getCapabilities()&lt;/code&gt; method. This method must return an array, with the &lt;em&gt;key&lt;/em&gt; as a Composer Capability class name, and the &lt;em&gt;value&lt;/em&gt; as the Plugin's own implementation class name of said Capability:</source>
          <target state="translated">Capable Pluginsクラスは&lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/Capable.php&quot;&gt; &lt;code&gt;Composer\Plugin\Capable&lt;/code&gt; &lt;/a&gt;インターフェースを実装し、それらの機能を &lt;code&gt;getCapabilities()&lt;/code&gt; メソッドで宣言する必要があります。 このメソッドは、 &lt;em&gt;キー&lt;/em&gt;をComposer Capabilityクラス名として、 &lt;em&gt;値&lt;/em&gt;をプラグイン自身の実装クラス名として持つ配列を返す必要があり&lt;em&gt;ます&lt;/em&gt; 。</target>
        </trans-unit>
        <trans-unit id="ffa0cee94ccf4b87b8503213ee98e3a3f10269b1" translate="yes" xml:space="preserve">
          <source>Caret Version Range (^)</source>
          <target state="translated">カレットバージョン範囲(^)</target>
        </trans-unit>
        <trans-unit id="c64d89c645acb633b019e7040519250c7745d79e" translate="yes" xml:space="preserve">
          <source>Caution is advised when using replace for the sub-package purpose explained above. You should then typically only replace using &lt;code&gt;self.version&lt;/code&gt; as a version constraint, to make sure the main package only replaces the sub-packages of that exact version, and not any other version, which would be incorrect.</source>
          <target state="translated">上記で説明したサブパッケージの目的で置換を使用する場合は注意が必要です。 次に、通常、バージョン制約として &lt;code&gt;self.version&lt;/code&gt; を使用してのみ置換し、メインパッケージがその正確なバージョンのサブパッケージのみを置換し、他のバージョンは正しくないことを確認します。</target>
        </trans-unit>
        <trans-unit id="1904d3ced95667b12c381358c305a2a50254c463" translate="yes" xml:space="preserve">
          <source>Certain fields only apply when in the root package context. One example of this is the &lt;code&gt;config&lt;/code&gt; field. Only the root package can define configuration. The config of dependencies is ignored. This makes the &lt;code&gt;config&lt;/code&gt; field &lt;code&gt;root-only&lt;/code&gt;.</source>
          <target state="translated">特定のフィールドは、ルートパッケージコンテキスト内にある場合にのみ適用されます。 この1つの例は、 &lt;code&gt;config&lt;/code&gt; フィールドです。 ルートパッケージのみが構成を定義できます。 依存関係の設定は無視されます。 これにより、構成フィールドが &lt;code&gt;root-only&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="8a8a27821a6ffed36d55100b9bdfe83edfaf54a2" translate="yes" xml:space="preserve">
          <source>Change to a directory on your &lt;code&gt;PATH&lt;/code&gt; and run the installer following &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;the Download page instructions&lt;/a&gt; to download &lt;code&gt;composer.phar&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PATH&lt;/code&gt; 上のディレクトリに移動し&lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;、ダウンロードページの指示に従って&lt;/a&gt;インストーラーを実行して &lt;code&gt;composer.phar&lt;/code&gt; をダウンロードします。</target>
        </trans-unit>
        <trans-unit id="264d009fefae2f4632d8f612cc3cfdc5360fe171" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;https://github.com/composer/satis&quot;&gt;the satis GitHub repository&lt;/a&gt; and the &lt;a href=&quot;articles/handling-private-packages-with-satis.md&quot;&gt;Satis article&lt;/a&gt; for more information.</source>
          <target state="translated">詳細について&lt;a href=&quot;https://github.com/composer/satis&quot;&gt;は、satis GitHubリポジトリ&lt;/a&gt;と&lt;a href=&quot;articles/handling-private-packages-with-satis.md&quot;&gt;Satisの記事&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="d66040cda0e16ed8b27275f86a5716cb3dec4f86" translate="yes" xml:space="preserve">
          <source>Check if it contains any path to non-existent file, if it's the case, remove them.</source>
          <target state="translated">存在しないファイルへのパスが含まれているかどうかを確認し、その場合は削除します。</target>
        </trans-unit>
        <trans-unit id="25fc1135a1a9fc602b1cf7be138488357d3a97f2" translate="yes" xml:space="preserve">
          <source>Check out &lt;a href=&quot;https://packagist.com/&quot;&gt;Packagist.com&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;https://packagist.com/&quot;&gt;Packagist.com&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7d23e1e1c386a696a627548f3491698127ca6fcb" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#package-not-found&quot;&gt;&quot;Package not found&quot;&lt;/a&gt; item above.</source>
          <target state="translated">上記の&lt;a href=&quot;#package-not-found&quot;&gt;「パッケージが見つかりません」の&lt;/a&gt;項目を確認してください。</target>
        </trans-unit>
        <trans-unit id="aa69c3b3440bce802584fb5a2fee8a43140046a3" translate="yes" xml:space="preserve">
          <source>Class map generation essentially converts PSR-4/PSR-0 rules into classmap rules. This makes everything quite a bit faster as for known classes the class map returns instantly the path, and Composer can guarantee the class is in there so there is no filesystem check needed.</source>
          <target state="translated">クラス・マップ生成は、基本的に PSR-4PSR-0 ルールをクラス・マップ・ルールに変換します。これにより、既知のクラスについては、クラス・マップが瞬時にパスを返し、Composer はクラスが存在することを保証するため、ファイルシステムのチェックが不要になるため、すべてがかなり高速になります。</target>
        </trans-unit>
        <trans-unit id="03f3c4b37979729c081d5b7761f1e9831a1fb382" translate="yes" xml:space="preserve">
          <source>Classes needed to run the test suite should not be included in the main autoload rules to avoid polluting the autoloader in production and when other people use your package as a dependency.</source>
          <target state="translated">テストスイートを実行するために必要なクラスは、本番環境でオートローダを汚染したり、他の人があなたのパッケージを依存関係として使用したりするのを避けるために、メインのオートローダのルールに含めてはいけません。</target>
        </trans-unit>
        <trans-unit id="f76907ed4d39d90e7317a23474d708e26daa9462" translate="yes" xml:space="preserve">
          <source>Classmap</source>
          <target state="translated">Classmap</target>
        </trans-unit>
        <trans-unit id="9da95dffd9499928fc1adcf1824546a50350bb7a" translate="yes" xml:space="preserve">
          <source>Close your current terminal. Test usage with a new terminal:</source>
          <target state="translated">現在の端末を閉じます。新しい端末で使用方法をテストしてください。</target>
        </trans-unit>
        <trans-unit id="16888f6f5885bcfabfaa6232751203e89dcc0902" translate="yes" xml:space="preserve">
          <source>Command Events</source>
          <target state="translated">コマンドイベント</target>
        </trans-unit>
        <trans-unit id="3780fe92a09dbc3757632112464d665685b72894" translate="yes" xml:space="preserve">
          <source>Command Events: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Script/Event.html&quot;&gt;&lt;code&gt;Composer\Script\Event&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">コマンドイベント： &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Script/Event.html&quot;&gt; &lt;code&gt;Composer\Script\Event&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e5f6b8926102bd39752771e1fee23adf5e0891ac" translate="yes" xml:space="preserve">
          <source>Command provider</source>
          <target state="translated">コマンドプロバイダ</target>
        </trans-unit>
        <trans-unit id="36445bce193e3cada4ed3f6d24054222a746b990" translate="yes" xml:space="preserve">
          <source>Command-line completion</source>
          <target state="translated">コマンドライン補完</target>
        </trans-unit>
        <trans-unit id="2776e2db8abab47b7f4a12550f08b2039ca69d97" translate="yes" xml:space="preserve">
          <source>Command-line completion can be enabled by following instructions &lt;a href=&quot;https://github.com/bamarni/symfony-console-autocomplete&quot;&gt;on this page&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/bamarni/symfony-console-autocomplete&quot;&gt;このページの&lt;/a&gt;手順に従って、コマンドライン補完を有効にすることができます 。</target>
        </trans-unit>
        <trans-unit id="f16f2f417e9b1c9a406ae47a7808a9c66f4a4ee9" translate="yes" xml:space="preserve">
          <source>Command-line interface / Commands</source>
          <target state="translated">コマンドラインインタフェース コマンド</target>
        </trans-unit>
        <trans-unit id="29d47fd518d126ab7f144f7ebeb9c4c2f9f944ec" translate="yes" xml:space="preserve">
          <source>Commit your &lt;code&gt;composer.lock&lt;/code&gt; file to version control</source>
          <target state="translated">&lt;code&gt;composer.lock&lt;/code&gt; ファイルをバージョン管理にコミットします</target>
        </trans-unit>
        <trans-unit id="bd042abd32546f9fee391ccd10f7d04496c6a026" translate="yes" xml:space="preserve">
          <source>Committing this file to VC is important because it will cause anyone who sets up the project to use the exact same versions of the dependencies that you are using. Your CI server, production machines, other developers in your team, everything and everyone runs on the same dependencies, which mitigates the potential for bugs affecting only some parts of the deployments. Even if you develop alone, in six months when reinstalling the project you can feel confident the dependencies installed are still working even if your dependencies released many new versions since then. (See note below about using the &lt;code&gt;update&lt;/code&gt; command.)</source>
          <target state="translated">このファイルをVCにコミットすると、プロジェクトを設定したユーザーが、使用している依存関係とまったく同じバージョンを使用するようになるため、重要です。 CIサーバー、プロダクションマシン、チーム内の他の開発者、すべておよび全員が同じ依存関係で実行されるため、デプロイメントの一部にのみ影響するバグの可能性が軽減されます。 単独で開発している場合でも、プロジェクトを再インストールする6か月後には、依存関係がその後多くの新しいバージョンをリリースしたとしても、インストールされている依存関係が引き続き機能していると確信できます。 （ &lt;code&gt;update&lt;/code&gt; コマンドの使用については、以下の注を参照してください。）</target>
        </trans-unit>
        <trans-unit id="bfd58ee3a270f3a931009900e1008d549bbd7453" translate="yes" xml:space="preserve">
          <source>Community</source>
          <target state="translated">Community</target>
        </trans-unit>
        <trans-unit id="10c35d71ded7545a87321c94b9da10ed95f1480d" translate="yes" xml:space="preserve">
          <source>Composer</source>
          <target state="translated">Composer</target>
        </trans-unit>
        <trans-unit id="564213f6a01d835d602a467ede4f4e6509159897" translate="yes" xml:space="preserve">
          <source>Composer Versions vs VCS Versions</source>
          <target state="translated">コンポーザー版とVCS版の比較</target>
        </trans-unit>
        <trans-unit id="bbddf50c065e5012ad5f83a93f20f4a3bde4fd0c" translate="yes" xml:space="preserve">
          <source>Composer allows you to hook into various parts of the installation process through the use of scripts.</source>
          <target state="translated">Composer では、スクリプトを使用して、インストールプロセスのさまざまな部分をフックすることができます。</target>
        </trans-unit>
        <trans-unit id="966bba701e0aba49b50e5b6531a3a374b71cc35c" translate="yes" xml:space="preserve">
          <source>Composer also respects a memory limit defined by the &lt;code&gt;COMPOSER_MEMORY_LIMIT&lt;/code&gt; environment variable:</source>
          <target state="translated">Composerは、 &lt;code&gt;COMPOSER_MEMORY_LIMIT&lt;/code&gt; 環境変数で定義されたメモリ制限も考慮します。</target>
        </trans-unit>
        <trans-unit id="2eb0317485a25f5cde4722c87f3837d85ede7074" translate="yes" xml:space="preserve">
          <source>Composer can unpack zipballs using either a system-provided &lt;code&gt;unzip&lt;/code&gt; utility or PHP's native &lt;code&gt;ZipArchive&lt;/code&gt; class. The &lt;code&gt;ZipArchive&lt;/code&gt; class is preferred on Windows. On other OSes where ZIP files can contain permissions and symlinks, the &lt;code&gt;unzip&lt;/code&gt; utility is preferred. You're advised to install it if you need these features.</source>
          <target state="translated">Composerは、システム提供の &lt;code&gt;unzip&lt;/code&gt; ユーティリティまたはPHPのネイティブ &lt;code&gt;ZipArchive&lt;/code&gt; クラスを使用して、zipballを解凍できます。 Windowsでは &lt;code&gt;ZipArchive&lt;/code&gt; クラスが推奨されます。 ZIPファイルに権限とシンボリックリンクを含めることができる他のOSでは、 &lt;code&gt;unzip&lt;/code&gt; ユーティリティが推奨されます。 これらの機能が必要な場合は、インストールすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4c8b5e83405fef865298a550f83b50d3d70ff646" translate="yes" xml:space="preserve">
          <source>Composer defines a standard set of capabilities which may be implemented by plugins. Their goal is to make the plugin ecosystem more stable as it reduces the need to mess with &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Composer.php&quot;&gt;&lt;code&gt;Composer\Composer&lt;/code&gt;&lt;/a&gt;'s internal state, by providing explicit extension points for common plugin requirements.</source>
          <target state="translated">Composerは、プラグインによって実装できる機能の標準セットを定義します。 彼らの目標は、一般的なプラグイン要件に明示的な拡張ポイントを提供することにより、 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Composer.php&quot;&gt; &lt;code&gt;Composer\Composer&lt;/code&gt; &lt;/a&gt;の内部状態をいじる必要性を減らすため、プラグインエコシステムをより安定させることです。</target>
        </trans-unit>
        <trans-unit id="9a438d57c1e2cf695257cdbd80897a83ad51780a" translate="yes" xml:space="preserve">
          <source>Composer fires the following named events during its execution process:</source>
          <target state="translated">コンポーザーは、実行プロセス中に以下の名前のイベントを発生させます。</target>
        </trans-unit>
        <trans-unit id="1e7eb8107596ba9de20f27e26cbe8f734f0b71d8" translate="yes" xml:space="preserve">
          <source>Composer hangs with SSH ControlMaster</source>
          <target state="translated">SSH ControlMasterでComposerがハングアップする</target>
        </trans-unit>
        <trans-unit id="39a2e677494b5ab72daf55f8b03dbf15535a3d38" translate="yes" xml:space="preserve">
          <source>Composer has platform packages, which are virtual packages for things that are installed on the system but are not actually installable by Composer. This includes PHP itself, PHP extensions and some system libraries.</source>
          <target state="translated">Composer には、システムにインストールされているが、実際には Composer がインストールできないもののための仮想パッケージであるプラットフォーム・パッケージがあります。これには、PHP 自体、PHP 拡張モジュール、システムライブラリが含まれます。</target>
        </trans-unit>
        <trans-unit id="573ce7b411054d4c02a18f5529546d6492648137" translate="yes" xml:space="preserve">
          <source>Composer is &lt;strong&gt;not&lt;/strong&gt; a package manager in the same sense as Yum or Apt are. Yes, it deals with &quot;packages&quot; or libraries, but it manages them on a per-project basis, installing them in a directory (e.g. &lt;code&gt;vendor&lt;/code&gt;) inside your project. By default it does not install anything globally. Thus, it is a dependency manager. It does however support a &quot;global&quot; project for convenience via the &lt;a href=&quot;03-cli.md#global&quot;&gt;global&lt;/a&gt; command.</source>
          <target state="translated">Composerは、YumやAptと同じ意味でのパッケージマネージャーではあり&lt;strong&gt;ません&lt;/strong&gt; 。 はい、「パッケージ」またはライブラリを扱いますが、それらをプロジェクトごとに管理し、プロジェクト内のディレクトリ（ &lt;code&gt;vendor&lt;/code&gt; ）にインストールします。 デフォルトでは、グローバルに何もインストールしません。 したがって、これは依存関係マネージャーです。 ただし、 &lt;a href=&quot;03-cli.md#global&quot;&gt;global&lt;/a&gt;コマンドを使用して、便宜上「グローバル」プロジェクトをサポートします。</target>
        </trans-unit>
        <trans-unit id="0ab18fe365dceb6a4bab6699bbef3db838115483" translate="yes" xml:space="preserve">
          <source>Composer is a dependency manager. It installs packages locally. A package is essentially a directory containing something. In this case it is PHP code, but in theory it could be anything. And it contains a package description which has a name and a version. The name and the version are used to identify the package.</source>
          <target state="translated">Composer は依存関係マネージャです。ローカルにパッケージをインストールします。パッケージとは、基本的に何かを含むディレクトリのことです。この例では PHP のコードですが、理論的には何でもよいのです。パッケージには、名前とバージョンを含むパッケージの説明が含まれています。名前とバージョンはパッケージを識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="59999efe265ca7e466df3fff847ca9b9a9316741" translate="yes" xml:space="preserve">
          <source>Composer is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.</source>
          <target state="translated">Composer は PHP の依存関係管理ツールです。プロジェクトが依存しているライブラリを宣言することができ、それらを管理 (インストール・アップデート)してくれます。</target>
        </trans-unit>
        <trans-unit id="366ae20a8e8e63302cc0fdee26078a4cd4ee6e73" translate="yes" xml:space="preserve">
          <source>Composer is multi-platform and we strive to make it run equally well on Windows, Linux and macOS.</source>
          <target state="translated">Composerはマルチプラットフォームであり、Windows、Linux、macOSでも同じように動作するように努力しています。</target>
        </trans-unit>
        <trans-unit id="691dc889620b5d930df233445b1acf0bc95c7a4f" translate="yes" xml:space="preserve">
          <source>Composer looks for the binaries defined in all of the dependencies. A symlink is created from each dependency's binaries to &lt;code&gt;vendor/bin&lt;/code&gt;.</source>
          <target state="translated">Composerは、すべての依存関係で定義されているバイナリを探します。 シンボリックリンクは、各依存関係のバイナリから &lt;code&gt;vendor/bin&lt;/code&gt; に作成されます。</target>
        </trans-unit>
        <trans-unit id="707aede2a268d7b206c88bc185db4d78ec2efc70" translate="yes" xml:space="preserve">
          <source>Composer may sometimes fail on some commands with this message:</source>
          <target state="translated">このメッセージが表示されているコマンドでは、Composer が失敗することがあります。</target>
        </trans-unit>
        <trans-unit id="733d99a35d5c1e976c74dc0fdd45cb1f0f594b3c" translate="yes" xml:space="preserve">
          <source>Composer offers a convenient installer that you can execute directly from the command line. Feel free to &lt;a href=&quot;https://getcomposer.org/installer&quot;&gt;download this file&lt;/a&gt; or review it on &lt;a href=&quot;https://github.com/composer/getcomposer.org/blob/master/web/installer&quot;&gt;GitHub&lt;/a&gt; if you wish to know more about the inner workings of the installer. The source is plain PHP.</source>
          <target state="translated">Composerには、コマンドラインから直接実行できる便利なインストーラーが用意されています。 インストーラーの内部の仕組みについて詳しく知りたい場合は、 &lt;a href=&quot;https://getcomposer.org/installer&quot;&gt;このファイル&lt;/a&gt;をダウンロードするか、 &lt;a href=&quot;https://github.com/composer/getcomposer.org/blob/master/web/installer&quot;&gt;GitHubで&lt;/a&gt;確認してください。 ソースはプレーンなPHPです。</target>
        </trans-unit>
        <trans-unit id="241ce300335a27c01b1e988de7c691cd71c253e7" translate="yes" xml:space="preserve">
          <source>Composer requires PHP 5.3.2+ to run. A few sensitive php settings and compile flags are also required, but when using the installer you will be warned about any incompatibilities.</source>
          <target state="translated">Composer を実行するには PHP 5.3.2+が必要です。いくつかの繊細なPHP設定やコンパイルフラグも必要ですが、 インストーラを使用する際には、非互換性についての警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="90c3049ed21de69b64a44b7a76d46bec6eae029a" translate="yes" xml:space="preserve">
          <source>Composer uses this information to search for the right set of files in package &quot;repositories&quot; that you register using the &lt;a href=&quot;04-schema.md#repositories&quot;&gt;&lt;code&gt;repositories&lt;/code&gt;&lt;/a&gt; key, or in Packagist, the default package repository. In the above example, since no other repository has been registered in the &lt;code&gt;composer.json&lt;/code&gt; file, it is assumed that the &lt;code&gt;monolog/monolog&lt;/code&gt; package is registered on Packagist. (See more about Packagist &lt;a href=&quot;#packagist&quot;&gt;below&lt;/a&gt;, or read more about repositories &lt;a href=&quot;05-repositories.md&quot;&gt;here&lt;/a&gt;).</source>
          <target state="translated">Composerはこの情報を使用して、 &lt;a href=&quot;04-schema.md#repositories&quot;&gt; &lt;code&gt;repositories&lt;/code&gt; &lt;/a&gt;キーを使用して登録したパッケージ「リポジトリ」、またはデフォルトのパッケージリポジトリであるPackagistで適切なファイルセットを検索します。 上記の例では、 &lt;code&gt;composer.json&lt;/code&gt; ファイルに他のリポジトリが登録されていないため、monolog &lt;code&gt;monolog/monolog&lt;/code&gt; monologパッケージがPackagistに登録されていると想定しています。 （ &lt;a href=&quot;#packagist&quot;&gt;以下の&lt;/a&gt; Packagistの詳細を参照するか、リポジトリの詳細については&lt;a href=&quot;05-repositories.md&quot;&gt;こちらをご覧ください&lt;/a&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6481c2852cf8382e61732068f690be54cb541baa" translate="yes" xml:space="preserve">
          <source>Composer uses your VCS's branch and tag features to resolve the version constraints you specify in your &lt;code&gt;require&lt;/code&gt; field to specific sets of files. When determining valid available versions, Composer looks at all of your tags and branches and translates their names into an internal list of options that it then matches against the version constraint you provided.</source>
          <target state="translated">ComposerはVCSのブランチとタグ機能を使用して、 &lt;code&gt;require&lt;/code&gt; フィールドで指定したバージョンの制約を特定のファイルセットに解決します。 有効な利用可能なバージョンを決定すると、Composerはすべてのタグとブランチを調べ、それらの名前をオプションの内部リストに変換し、指定したバージョンの制約と照合します。</target>
        </trans-unit>
        <trans-unit id="95d8e13cca24c5991166c47d870424b90cfc0d71" translate="yes" xml:space="preserve">
          <source>Composer will always show a warning if xdebug is being used, but you can override this with an environment variable: &lt;code&gt;COMPOSER_DISABLE_XDEBUG_WARN=1&lt;/code&gt;. If you see this warning unexpectedly, then the restart process has failed: please report this &lt;a href=&quot;https://github.com/composer/composer/issues&quot;&gt;issue&lt;/a&gt;.</source>
          <target state="translated">xdebugが使用されている場合、Composerは常に警告を表示しますが、環境変数 &lt;code&gt;COMPOSER_DISABLE_XDEBUG_WARN=1&lt;/code&gt; でこれを上書きできます。 この警告が予期せず表示される場合は、再起動プロセスが失敗しています。この&lt;a href=&quot;https://github.com/composer/composer/issues&quot;&gt;問題&lt;/a&gt;を報告してください。</target>
        </trans-unit>
        <trans-unit id="8cab82feaeeb9d53f20f389c3a7760a03f0111d3" translate="yes" xml:space="preserve">
          <source>Composer will not update the commit references, so if you use &lt;code&gt;master&lt;/code&gt; as reference you will have to delete the package to force an update, and will have to deal with an unstable lock file.</source>
          <target state="translated">Composerはコミット参照を更新しないため、参照として &lt;code&gt;master&lt;/code&gt; を使用する場合は、パッケージを削除して更新を強制する必要があり、不安定なロックファイルを処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="688b6c8d7810fec22a4430ea6ece1485660f438c" translate="yes" xml:space="preserve">
          <source>Composer will not update the package unless you change the &lt;code&gt;version&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; フィールドを変更しない限り、Composerはパッケージを更新しません。</target>
        </trans-unit>
        <trans-unit id="440ed834dac39bdde4e92eb504700db8b62a8f71" translate="yes" xml:space="preserve">
          <source>Composer will register a &lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt;PSR-4&lt;/a&gt; autoloader for the &lt;code&gt;Acme&lt;/code&gt; namespace.</source>
          <target state="translated">Composerは &lt;code&gt;Acme&lt;/code&gt; 名前空間の&lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt;PSR-4&lt;/a&gt;オートローダーを登録します。</target>
        </trans-unit>
        <trans-unit id="9925588b41b559458e85322904fa8a33d93eb91c" translate="yes" xml:space="preserve">
          <source>Composer:</source>
          <target state="translated">Composer:</target>
        </trans-unit>
        <trans-unit id="6f58d263f33944384921df8405fd4a36e06175e2" translate="yes" xml:space="preserve">
          <source>Concepts</source>
          <target state="translated">Concepts</target>
        </trans-unit>
        <trans-unit id="8851142da56fd885ce668a165b33fee7003e858d" translate="yes" xml:space="preserve">
          <source>Config</source>
          <target state="translated">Config</target>
        </trans-unit>
        <trans-unit id="b8577c99aaca7f628cb921ee68fce4bf962909c4" translate="yes" xml:space="preserve">
          <source>Configuration Options</source>
          <target state="translated">設定オプション</target>
        </trans-unit>
        <trans-unit id="cdd87b7907fb17673e884c148848c9c5e93b59ca" translate="yes" xml:space="preserve">
          <source>Constraint</source>
          <target state="translated">Constraint</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">Contributing</target>
        </trans-unit>
        <trans-unit id="ef66b677f36f651075aa196f90344383d2d3ce7e" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;composer.bat&lt;/code&gt; file alongside &lt;code&gt;composer.phar&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;composer.bat&lt;/code&gt; とともに新しいcomposer.batファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="4d78ac4eeb4777f579bb151b7e35e611b7af1d11" translate="yes" xml:space="preserve">
          <source>Creating a Plugin</source>
          <target state="translated">プラグインの作成</target>
        </trans-unit>
        <trans-unit id="4d452209c3a2b8a15387e01f17039d3b71192ca2" translate="yes" xml:space="preserve">
          <source>Creating an Installer</source>
          <target state="translated">インストーラの作成</target>
        </trans-unit>
        <trans-unit id="0daf585327efff762b3b8d8b84e8b0c38eb881d3" translate="yes" xml:space="preserve">
          <source>Custom descriptions.</source>
          <target state="translated">カスタムの説明。</target>
        </trans-unit>
        <trans-unit id="1cbe9ea3b339f05ed199bddfc0abd3eb69def700" translate="yes" xml:space="preserve">
          <source>Custom package repositories to use.</source>
          <target state="translated">使用するカスタムパッケージリポジトリ。</target>
        </trans-unit>
        <trans-unit id="cb973ac8447e7992a1d0cab66fa6da45eb931473" translate="yes" xml:space="preserve">
          <source>Custom vendor alias</source>
          <target state="translated">カスタムベンダーのエイリアス</target>
        </trans-unit>
        <trans-unit id="90250ae668e1c5af84df13ad2b78b18baa9765f1" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;$cache-dir/files&lt;/code&gt;. Stores the zip archives of packages.</source>
          <target state="translated">デフォルトは &lt;code&gt;$cache-dir/files&lt;/code&gt; 。 パッケージのzipアーカイブを格納します。</target>
        </trans-unit>
        <trans-unit id="f5dbffeb8c8d4f1d00a524ba11351aa99fdc62ae" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;$cache-dir/repo&lt;/code&gt;. Stores repository metadata for the &lt;code&gt;composer&lt;/code&gt; type and the VCS repos of type &lt;code&gt;svn&lt;/code&gt;, &lt;code&gt;fossil&lt;/code&gt;, &lt;code&gt;github&lt;/code&gt; and &lt;code&gt;bitbucket&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;$cache-dir/repo&lt;/code&gt; です。 &lt;code&gt;composer&lt;/code&gt; タイプのリポジトリメタデータと、タイプ &lt;code&gt;svn&lt;/code&gt; 、 &lt;code&gt;fossil&lt;/code&gt; 、 &lt;code&gt;github&lt;/code&gt; および &lt;code&gt;bitbucket&lt;/code&gt; のVCSリポジトリを格納します。</target>
        </trans-unit>
        <trans-unit id="60925053f3188a3be542e8f5b25d3fd918eebd2a" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;$cache-dir/vcs&lt;/code&gt;. Stores VCS clones for loading VCS repository metadata for the &lt;code&gt;git&lt;/code&gt;/&lt;code&gt;hg&lt;/code&gt; types and to speed up installs.</source>
          <target state="translated">デフォルトは &lt;code&gt;$cache-dir/vcs&lt;/code&gt; です。 &lt;code&gt;git&lt;/code&gt; / &lt;code&gt;hg&lt;/code&gt; タイプのVCSリポジトリメタデータをロードし、インストールを高速化するためのVCSクローンを保存します。</target>
        </trans-unit>
        <trans-unit id="ef15ec621f0b30559931c497419fee3e418e84cf" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;.&lt;/code&gt;. Composer allows you to add a default archive directory when the workflow needs to create a dedicated archiving format. Or for easier development between modules.</source>
          <target state="translated">デフォルトは &lt;code&gt;.&lt;/code&gt; 。 Composerでは、ワークフローで専用のアーカイブ形式を作成する必要がある場合に、デフォルトのアーカイブディレクトリを追加できます。 または、モジュール間の開発を容易にするため。</target>
        </trans-unit>
        <trans-unit id="aba9a295bb89950c86dcda1697662dc74f5d7a5e" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;15552000&lt;/code&gt; (6 months). Composer caches all dist (zip, tar, ..) packages that it downloads. Those are purged after six months of being unused by default. This option allows you to tweak this duration (in seconds) or disable it completely by setting it to 0.</source>
          <target state="translated">デフォルトは &lt;code&gt;15552000&lt;/code&gt; （6か月）です。 Composerは、ダウンロードしたすべてのdist（zip、tar、..）パッケージをキャッシュします。 これらは、デフォルトで使用されなくなってから6か月後に削除されます。 このオプションを使用すると、この期間（秒単位）を微調整したり、0に設定して完全に無効にしたりできます。</target>
        </trans-unit>
        <trans-unit id="a6e579c359951a0c9ce797a6efb7d13505153da1" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;1&lt;/code&gt;. If set to &lt;code&gt;0&lt;/code&gt;, Composer will not create &lt;code&gt;.htaccess&lt;/code&gt; files in the composer home, cache, and data directories.</source>
          <target state="translated">デフォルトは &lt;code&gt;1&lt;/code&gt; です。 &lt;code&gt;0&lt;/code&gt; に設定すると、Composerはcomposerのホーム、キャッシュ、およびデータディレクトリに &lt;code&gt;.htaccess&lt;/code&gt; ファイルを作成しません。</target>
        </trans-unit>
        <trans-unit id="5161525864513a85308ab6f0d10187a3304c00a1" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;300&lt;/code&gt;. The duration processes like git clones can run before Composer assumes they died out. You may need to make this higher if you have a slow connection or huge vendors.</source>
          <target state="translated">デフォルトは &lt;code&gt;300&lt;/code&gt; です。 git cloneのような期間プロセスは、Composerが期限切れであると想定する前に実行できます。 接続速度が遅い場合やベンダーが多い場合は、これを高くする必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="23df58a81df571c1a060d7620d5546039e3a05da" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;300MiB&lt;/code&gt;. Composer caches all dist (zip, tar, ..) packages that it downloads. When the garbage collection is periodically ran, this is the maximum size the cache will be able to use. Older (less used) files will be removed first until the cache fits.</source>
          <target state="translated">デフォルトは &lt;code&gt;300MiB&lt;/code&gt; です。 Composerは、ダウンロードしたすべてのdist（zip、tar、..）パッケージをキャッシュします。 ガベージコレクションが定期的に実行される場合、これはキャッシュが使用できる最大サイズです。 古い（使用頻度の低い）ファイルは、キャッシュが収まるまで最初に削除されます。</target>
        </trans-unit>
        <trans-unit id="5f3d6d54fd5210b07957c6ba8c9bf5ab5a43c946" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Composer&lt;/code&gt; on Windows, &lt;code&gt;$XDG_CACHE_HOME/composer&lt;/code&gt; on unix systems that follow the XDG Base Directory Specifications, and &lt;code&gt;$home/cache&lt;/code&gt; on other unix systems. Stores all the caches used by Composer. See also &lt;a href=&quot;03-cli.md#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt;.</source>
          <target state="translated">デフォルトは、Windowsでは &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Composer&lt;/code&gt; 、XDGベースディレクトリの仕様に従うUNIXシステムでは &lt;code&gt;$XDG_CACHE_HOME/composer&lt;/code&gt; 、他のUNIXシステムでは &lt;code&gt;$home/cache&lt;/code&gt; です。 Composerで使用されるすべてのキャッシュを保存します。 &lt;a href=&quot;03-cli.md#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="d23df709207ae7094d9f027aed62436abb2249dd" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Roaming\Composer&lt;/code&gt; on Windows, &lt;code&gt;$XDG_DATA_HOME/composer&lt;/code&gt; on unix systems that follow the XDG Base Directory Specifications, and &lt;code&gt;$home&lt;/code&gt; on other unix systems. Right now it is only used for storing past composer.phar files to be able to rollback to older versions. See also &lt;a href=&quot;03-cli.md#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt;.</source>
          <target state="translated">デフォルトは、Windowsの場合 &lt;code&gt;$XDG_DATA_HOME/composer&lt;/code&gt; &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Roaming\Composer&lt;/code&gt; 、XDGベースディレクトリの仕様に従うUNIXシステムの場合は$ XDG_DATA_HOME / composer 、他のUNIXシステムの場合は &lt;code&gt;$home&lt;/code&gt; です。 現時点では、過去のcomposer.pharファイルを保存して古いバージョンにロールバックできるようにするためだけに使用されています。 &lt;a href=&quot;03-cli.md#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="9cfcf65c954d7cc28f62704f45323cbb37e78fbe" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;[&quot;github.com&quot;]&lt;/code&gt;. A list of domains to use in github mode. This is used for GitHub Enterprise setups.</source>
          <target state="translated">デフォルトは &lt;code&gt;[&quot;github.com&quot;]&lt;/code&gt; です。 githubモードで使用するドメインのリスト。 これはGitHub Enterpriseのセットアップに使用されます。</target>
        </trans-unit>
        <trans-unit id="270ddeeb4e0195bf3dca99343b8d21f5f6d6576f" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;[&quot;gitlab.com&quot;]&lt;/code&gt;. A list of domains of GitLab servers. This is used if you use the &lt;code&gt;gitlab&lt;/code&gt; repository type.</source>
          <target state="translated">デフォルトは &lt;code&gt;[&quot;gitlab.com&quot;]&lt;/code&gt; です。 GitLabサーバーのドメインのリスト。 これは、 &lt;code&gt;gitlab&lt;/code&gt; リポジトリタイプを使用する場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="f0ba63f4844bdae3555691c9e5fb89e994e9dec8" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;[&quot;https&quot;, &quot;ssh&quot;, &quot;git&quot;]&lt;/code&gt;. A list of protocols to use when cloning from github.com, in priority order. By default &lt;code&gt;git&lt;/code&gt; is present but only if &lt;a href=&quot;#secure-http&quot;&gt;secure-http&lt;/a&gt; is disabled, as the git protocol is not encrypted. If you want your origin remote push URLs to be using https and not ssh (&lt;code&gt;git@github.com:...&lt;/code&gt;), then set the protocol list to be only &lt;code&gt;[&quot;https&quot;]&lt;/code&gt; and Composer will stop overwriting the push URL to an ssh URL.</source>
          <target state="translated">デフォルトは &lt;code&gt;[&quot;https&quot;, &quot;ssh&quot;, &quot;git&quot;]&lt;/code&gt; です。 github.comからクローンを作成するときに使用するプロトコルの優先順のリスト。 デフォルトでは &lt;code&gt;git&lt;/code&gt; が存在しますが、gitプロトコルは暗号化されていない&lt;a href=&quot;#secure-http&quot;&gt;ため&lt;/a&gt; 、 secure-httpが無効になっている場合のみです。 オリジンのリモートプッシュURLでsshではなくhttpsを使用する場合（ &lt;code&gt;git@github.com:...&lt;/code&gt; ）、プロトコルリストを &lt;code&gt;[&quot;https&quot;]&lt;/code&gt; のみに設定すると、ComposerはプッシュURLをssh URL。</target>
        </trans-unit>
        <trans-unit id="6a0c54139aca248f3da477274931315b5640d0f7" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;auto&lt;/code&gt; and can be any of &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;dist&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. This option allows you to set the install method Composer will prefer to use. Can optionally be a hash of patterns for more granular install preferences.</source>
          <target state="translated">デフォルトは &lt;code&gt;auto&lt;/code&gt; で、 &lt;code&gt;source&lt;/code&gt; 、 &lt;code&gt;dist&lt;/code&gt; 、 &lt;code&gt;auto&lt;/code&gt; のいずれかになります。 このオプションを使用すると、Composerが使用するインストール方法を設定できます。 オプションで、より詳細なインストール設定のパターンのハッシュにすることができます。</target>
        </trans-unit>
        <trans-unit id="9a7659f1bd7ec5f92ddfb60fda3c827733e381ff" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;auto&lt;/code&gt;. Determines the compatibility of the binaries to be installed. If it is &lt;code&gt;auto&lt;/code&gt; then Composer only installs .bat proxy files when on Windows. If set to &lt;code&gt;full&lt;/code&gt; then both .bat files for Windows and scripts for Unix-based operating systems will be installed for each binary. This is mainly useful if you run Composer inside a linux VM but still want the .bat proxies available for use in the Windows host OS.</source>
          <target state="translated">デフォルトは &lt;code&gt;auto&lt;/code&gt; です。 インストールするバイナリの互換性を決定します。 &lt;code&gt;auto&lt;/code&gt; 場合、Windowsの場合、Composerは.batプロキシファイルのみをインストールします。 &lt;code&gt;full&lt;/code&gt; に設定すると、Windowsの.batファイルとUnixベースのオペレーティングシステムのスクリプトの両方が各バイナリにインストールされます。 これは主に、Linux VM内でComposerを実行しているが、.batプロキシをWindowsホストOSで使用できるようにする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="9579f034c4fbdb78670ad56c0278b7f59193eece" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt; and can be any of &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;&quot;stash&quot;&lt;/code&gt;. This option allows you to set the default style of handling dirty updates when in non-interactive mode. &lt;code&gt;true&lt;/code&gt; will always discard changes in vendors, while &lt;code&gt;&quot;stash&quot;&lt;/code&gt; will try to stash and reapply. Use this for CI servers or deploy scripts if you tend to have modified vendors.</source>
          <target state="translated">デフォルトは &lt;code&gt;false&lt;/code&gt; で、 &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;&quot;stash&quot;&lt;/code&gt; のいずれかになります 。 このオプションを使用すると、非インタラクティブモードでダーティアップデートを処理するデフォルトのスタイルを設定できます。 &lt;code&gt;true&lt;/code&gt; は常にベンダーの変更を破棄しますが、 &lt;code&gt;&quot;stash&quot;&lt;/code&gt; は隠して再適用しようとします。 これをCIサーバーに使用するか、ベンダーを変更する傾向がある場合はスクリプトをデプロイします。</target>
        </trans-unit>
        <trans-unit id="30ed8dc291791a405af4586c20f86a3e3f29c7b2" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, always optimize when dumping the autoloader.</source>
          <target state="translated">デフォルトは &lt;code&gt;false&lt;/code&gt; です。 &lt;code&gt;true&lt;/code&gt; の場合、オートローダーのダンプ時に常に最適化します。</target>
        </trans-unit>
        <trans-unit id="ccf4618ef53908056dd7f64b918a26d4351b9663" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;require&lt;/code&gt; command keeps packages sorted by name in &lt;code&gt;composer.json&lt;/code&gt; when adding a new package.</source>
          <target state="translated">デフォルトは &lt;code&gt;false&lt;/code&gt; です。 &lt;code&gt;true&lt;/code&gt; の場合、 &lt;code&gt;require&lt;/code&gt; コマンドは、新しいパッケージを追加するときに &lt;code&gt;composer.json&lt;/code&gt; でパッケージを名前順にソートします。</target>
        </trans-unit>
        <trans-unit id="9ec7002d679899bf558291eaa0656a39e111cea5" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, the Composer autoloader will also look for classes in the PHP include path.</source>
          <target state="translated">デフォルトは &lt;code&gt;false&lt;/code&gt; です。 &lt;code&gt;true&lt;/code&gt; の場合、ComposerオートローダーはPHPインクルードパス内のクラスも検索します。</target>
        </trans-unit>
        <trans-unit id="c7a7234b1481674a29bbbca0d9873decde7379ac" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, the Composer autoloader will check for APCu and use it to cache found/not-found classes when the extension is enabled.</source>
          <target state="translated">デフォルトは &lt;code&gt;false&lt;/code&gt; です。 &lt;code&gt;true&lt;/code&gt; の場合、ComposerオートローダーはAPCuをチェックし、拡張機能が有効な場合にAPCuを使用して、見つかった/見つからないクラスをキャッシュします。</target>
        </trans-unit>
        <trans-unit id="7d2ad6085afe35b59a9da389f7c57053c3415afe" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, the Composer autoloader will only load classes from the classmap. Implies &lt;code&gt;optimize-autoloader&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;false&lt;/code&gt; です。 &lt;code&gt;true&lt;/code&gt; の場合、Composerオートローダーはクラスマップからのみクラスをロードします。 &lt;code&gt;optimize-autoloader&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="54f61ce2db0c1f39b9be5512ad7c90eca4cc1fb5" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;. If set to true all HTTPS URLs will be tried with HTTP instead and no network level encryption is performed. Enabling this is a security risk and is NOT recommended. The better way is to enable the php_openssl extension in php.ini.</source>
          <target state="translated">デフォルトは &lt;code&gt;false&lt;/code&gt; です。 trueに設定すると、すべてのHTTPS URLが代わりにHTTPで試行され、ネットワークレベルの暗号化は実行されません。 これを有効にすることはセキュリティ上のリスクであり、推奨されません。 より良い方法は、php.iniでphp_openssl拡張を有効にすることです。</target>
        </trans-unit>
        <trans-unit id="0720dca754225861b3aca2c2e0b4840759379056" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;null&lt;/code&gt;. String to be used as a suffix for the generated Composer autoloader. When null a random one will be generated.</source>
          <target state="translated">デフォルトは &lt;code&gt;null&lt;/code&gt; です。 生成されたComposerオートローダーのサフィックスとして使用される文字列。 nullの場合、ランダムなものが生成されます。</target>
        </trans-unit>
        <trans-unit id="60e243a398baee85d82bccb057c4f127b94472a5" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;tar&lt;/code&gt;. Composer allows you to add a default archive format when the workflow needs to create a dedicated archiving format.</source>
          <target state="translated">デフォルトは &lt;code&gt;tar&lt;/code&gt; です。 Composerでは、ワークフローで専用のアーカイブ形式を作成する必要がある場合に、デフォルトのアーカイブ形式を追加できます。</target>
        </trans-unit>
        <trans-unit id="1acd77b1fadbd3d095a10817a18f09ebd4b172ea" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt;. Composer allows repositories to define a notification URL, so that they get notified whenever a package from that repository is installed. This option allows you to disable that behaviour.</source>
          <target state="translated">デフォルトは &lt;code&gt;true&lt;/code&gt; です。 Composerでは、リポジトリで通知URLを定義できるため、そのリポジトリのパッケージがインストールされるたびに通知を受けることができます。 このオプションを使用すると、その動作を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="c3bffdb458c9ed8e8bfab8050af2b00220009ecb" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt;, the Composer autoloader will not be prepended to existing autoloaders. This is sometimes required to fix interoperability issues with other autoloaders.</source>
          <target state="translated">デフォルトは &lt;code&gt;true&lt;/code&gt; です。 &lt;code&gt;false&lt;/code&gt; の場合、Composerオートローダーは既存のオートローダーの先頭に追加されません。 これは、他のオートローダーとの相互運用性の問題を修正するために必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="cfb2e70db979f856e068496117ba528fd9004761" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt;, the OAuth tokens created to access the github API will have a date instead of the machine hostname.</source>
          <target state="translated">デフォルトは &lt;code&gt;true&lt;/code&gt; です。 &lt;code&gt;false&lt;/code&gt; の場合、github APIにアクセスするために作成されたOAuthトークンには、マシンのホスト名ではなく日付が含まれます。</target>
        </trans-unit>
        <trans-unit id="5b6db4727e51acd66e5b8e2f9c957b5e19bbeb8f" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt;. If set to &lt;code&gt;false&lt;/code&gt;, Composer will not create &lt;code&gt;.htaccess&lt;/code&gt; files in the composer home, cache, and data directories.</source>
          <target state="translated">デフォルトは &lt;code&gt;true&lt;/code&gt; です。 &lt;code&gt;false&lt;/code&gt; に設定すると 、Composerはcomposerのホーム、キャッシュ、およびデータディレクトリに &lt;code&gt;.htaccess&lt;/code&gt; ファイルを作成しません。</target>
        </trans-unit>
        <trans-unit id="0cdb650038d31ec6dc4e1dedd307018f52f284c6" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt;. If set to true only HTTPS URLs are allowed to be downloaded via Composer. If you really absolutely need HTTP access to something then you can disable it, but using &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let's Encrypt&lt;/a&gt; to get a free SSL certificate is generally a better alternative.</source>
          <target state="translated">デフォルトは &lt;code&gt;true&lt;/code&gt; です。 trueに設定すると、HTTPS URLのみがComposer経由でダウンロードできます。 何かへのHTTPアクセスが本当に必要な場合は、それを無効にすることができますが、 &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let's Encrypt&lt;/a&gt;を使用して無料のSSL証明書を取得することは、一般的にはより良い代替手段です。</target>
        </trans-unit>
        <trans-unit id="3232c38a06afd2f3ded8a9bcb42d70f35b1c02b1" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt;. Similar to the &lt;code&gt;no-api&lt;/code&gt; key on a specific repository, setting &lt;code&gt;use-github-api&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will define the global behavior for all GitHub repositories to clone the repository as it would with any other git repository instead of using the GitHub API. But unlike using the &lt;code&gt;git&lt;/code&gt; driver directly, Composer will still attempt to use GitHub's zip files.</source>
          <target state="translated">デフォルトは &lt;code&gt;true&lt;/code&gt; です。 特定のリポジトリの &lt;code&gt;no-api&lt;/code&gt; キーと同様に、 &lt;code&gt;use-github-api&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると 、GitHub APIを使用する代わりに、他のgitリポジトリの場合と同様に、すべてのGitHubリポジトリのグローバル動作が定義され、リポジトリが複製されます。 ただし、 &lt;code&gt;git&lt;/code&gt; ドライバーを直接使用する場合とは異なり、Composerは引き続きGitHubのzipファイルを使用しようとします。</target>
        </trans-unit>
        <trans-unit id="d8e47ec67b9cb40ae6122f45c7a5df56f0a3781f" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;vendor/bin&lt;/code&gt;. If a project includes binaries, they will be symlinked into this directory.</source>
          <target state="translated">デフォルトは &lt;code&gt;vendor/bin&lt;/code&gt; です。 プロジェクトにバイナリが含まれている場合、それらはこのディレクトリにシンボリックリンクされます。</target>
        </trans-unit>
        <trans-unit id="5334cea41c645eb8c9b207fb529f60e8436e4960" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;vendor&lt;/code&gt;. You can install dependencies into a different directory if you want to. &lt;code&gt;$HOME&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; will be replaced by your home directory's path in vendor-dir and all &lt;code&gt;*-dir&lt;/code&gt; options below.</source>
          <target state="translated">デフォルトは &lt;code&gt;vendor&lt;/code&gt; です。 必要に応じて、依存関係を別のディレクトリにインストールできます。 &lt;code&gt;$HOME&lt;/code&gt; と &lt;code&gt;~&lt;/code&gt; は、vendor-dir内のホームディレクトリのパスと、以下のすべての &lt;code&gt;*-dir&lt;/code&gt; オプションで置き換えられます。</target>
        </trans-unit>
        <trans-unit id="83771af0d9e990cfd4209b40879c5dd720b86a4b" translate="yes" xml:space="preserve">
          <source>Defaults to false.</source>
          <target state="translated">デフォルトは false です。</target>
        </trans-unit>
        <trans-unit id="71c9fdaea74e5c44ac9fb6140d13ce5d2d247244" translate="yes" xml:space="preserve">
          <source>Defines the installation target.</source>
          <target state="translated">インストール対象を定義します。</target>
        </trans-unit>
        <trans-unit id="2e345d151e8d839841cb86b04d07be9401525be5" translate="yes" xml:space="preserve">
          <source>Defining scripts</source>
          <target state="translated">スクリプトの定義</target>
        </trans-unit>
        <trans-unit id="50fbc17151272b6e3055d5b3153f9c497974382b" translate="yes" xml:space="preserve">
          <source>Degraded Mode</source>
          <target state="translated">劣化モード</target>
        </trans-unit>
        <trans-unit id="c3af5c8d633c065338498aeafc39df57df28dc70" translate="yes" xml:space="preserve">
          <source>Deletes all content from Composer's cache directories.</source>
          <target state="translated">Composer のキャッシュ・ディレクトリからすべてのコンテンツを削除します。</target>
        </trans-unit>
        <trans-unit id="9079efef93a26b3b473c6cb3d20683ad6140b067" translate="yes" xml:space="preserve">
          <source>Dependency management</source>
          <target state="translated">依存関係の管理</target>
        </trans-unit>
        <trans-unit id="5fd002d42b32b03691630ef9a99e8b355e766c30" translate="yes" xml:space="preserve">
          <source>Depending on the &lt;a href=&quot;#event-names&quot;&gt;script types&lt;/a&gt; you will get various event subclasses containing various getters with relevant data and associated objects:</source>
          <target state="translated">&lt;a href=&quot;#event-names&quot;&gt;スクリプトのタイプに&lt;/a&gt;応じて、関連するデータと関連オブジェクトを持つさまざまなゲッターを含むさまざまなイベントサブクラスを取得します。</target>
        </trans-unit>
        <trans-unit id="011df189338d66155256f1d43e14a60a54f15106" translate="yes" xml:space="preserve">
          <source>Dev dependencies are packaged only if the &lt;code&gt;require-dev-dependencies&lt;/code&gt; parameter is set to true.</source>
          <target state="translated">開発依存関係は、 &lt;code&gt;require-dev-dependencies&lt;/code&gt; パラメーターがtrueに設定されている場合にのみパッケージ化されます。</target>
        </trans-unit>
        <trans-unit id="c883fbe88c32f0f5cf075f3503ad2cdcf1f5bad7" translate="yes" xml:space="preserve">
          <source>Disable IPv6 on that device (in this case &quot;Wi-Fi&quot;):</source>
          <target state="translated">そのデバイス(この場合は「Wi-Fi」)でIPv6を無効にします。</target>
        </trans-unit>
        <trans-unit id="a84f03bb4b91183eed6a5128fa8833cc9d74b1bc" translate="yes" xml:space="preserve">
          <source>Disabling Packagist.org</source>
          <target state="translated">Packagist.orgを無効にする</target>
        </trans-unit>
        <trans-unit id="9e4ca2d79673bd28c9455522fb4e74a264f7d301" translate="yes" xml:space="preserve">
          <source>Double-check you &lt;strong&gt;don't have typos&lt;/strong&gt; in your &lt;code&gt;composer.json&lt;/code&gt; or repository branches and tag names.</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; またはリポジトリのブランチとタグ名に&lt;strong&gt;タイプミスがないことを再&lt;/strong&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="5e0b4ddd148deee1125634df43eb708e2bea6a20" translate="yes" xml:space="preserve">
          <source>Download and run &lt;a href=&quot;https://getcomposer.org/Composer-Setup.exe&quot;&gt;Composer-Setup.exe&lt;/a&gt;. It will install the latest Composer version and set up your PATH so that you can call &lt;code&gt;composer&lt;/code&gt; from any directory in your command line.</source>
          <target state="translated">&lt;a href=&quot;https://getcomposer.org/Composer-Setup.exe&quot;&gt;Composer-Setup.exeを&lt;/a&gt;ダウンロードして実行します 。 コマンドラインの任意のディレクトリから &lt;code&gt;composer&lt;/code&gt; を呼び出すことができるように、最新のComposerバージョンをインストールしてPATHを設定します。</target>
        </trans-unit>
        <trans-unit id="900b6536438229ef107bd7f67b2de2a927b64d57" translate="yes" xml:space="preserve">
          <source>Downloading the Composer Executable</source>
          <target state="translated">コンポーザー実行ファイルのダウンロード</target>
        </trans-unit>
        <trans-unit id="a862c2b21b5e1337de2b76d5e43ae1375117d34d" translate="yes" xml:space="preserve">
          <source>Downloads</source>
          <target state="translated">Downloads</target>
        </trans-unit>
        <trans-unit id="b4086a63ae25cf6bb443162780d2074dca067ddd" translate="yes" xml:space="preserve">
          <source>Due to some intermittent issues on Travis and other systems, we introduced a degraded network mode which helps Composer finish successfully but disables a few optimizations. This is enabled automatically when an issue is first detected. If you see this issue sporadically you probably don't have to worry (a slow or overloaded network can also cause those time outs), but if it appears repeatedly you might want to look at the options below to identify and resolve it.</source>
          <target state="translated">Travis や他のシステムで断続的に問題が発生したため、劣化したネットワークモードを導入しました。このモードは、問題が最初に検出されたときに自動的に有効になります。この問題が散発的に発生する場合は、心配する必要はありませんが (ネットワークの速度が遅かったり、過負荷がかかっていたりすると、タイムアウトが発生することもあります)、繰り返し発生する場合は、以下のオプションを参照して問題を特定し、解決することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b28903ed833112745caa96d6b9dc6663bdcf8d57" translate="yes" xml:space="preserve">
          <source>Each author object can have following properties:</source>
          <target state="translated">各オーサオブジェクトは以下のプロパティを持つことができます。</target>
        </trans-unit>
        <trans-unit id="65809a0834cd6f2253e992b6ec06734d4cad1432" translate="yes" xml:space="preserve">
          <source>Each zip artifact is a ZIP archive with &lt;code&gt;composer.json&lt;/code&gt; in root folder:</source>
          <target state="translated">各zipアーティファクトは、ルートフォルダーに &lt;code&gt;composer.json&lt;/code&gt; があるZIPアーカイブです。</target>
        </trans-unit>
        <trans-unit id="265ef52f371f285cd7bba79de0137ca6283eff5c" translate="yes" xml:space="preserve">
          <source>Either way, running &lt;code&gt;install&lt;/code&gt; when a &lt;code&gt;composer.lock&lt;/code&gt; file is present resolves and installs all dependencies that you listed in &lt;code&gt;composer.json&lt;/code&gt;, but Composer uses the exact versions listed in &lt;code&gt;composer.lock&lt;/code&gt; to ensure that the package versions are consistent for everyone working on your project. As a result you will have all dependencies requested by your &lt;code&gt;composer.json&lt;/code&gt; file, but they may not all be at the very latest available versions (some of the dependencies listed in the &lt;code&gt;composer.lock&lt;/code&gt; file may have released newer versions since the file was created). This is by design, it ensures that your project does not break because of unexpected changes in dependencies.</source>
          <target state="translated">どちらの方法でも、 &lt;code&gt;composer.lock&lt;/code&gt; ファイルが存在 &lt;code&gt;install&lt;/code&gt; ときにインストールを実行すると、 composer.jsonにリストされているすべての依存関係が解決およびインストールされますが、Composerは &lt;code&gt;composer.json&lt;/code&gt; にリストされている正確なバージョンを使用して、事業。 その結果、 &lt;code&gt;composer.json&lt;/code&gt; ファイルによって要求されたすべての依存関係がありますが、それらはすべて利用可能な最新バージョンではない可能性があります（ &lt;code&gt;composer.lock&lt;/code&gt; ファイルにリストされている依存関係の一部は、ファイルの作成後に新しいバージョンをリリースしている可能性があります）。 これは設計によるものであり、依存関係の予期しない変更が原因でプロジェクトが中断しないようにします。</target>
        </trans-unit>
        <trans-unit id="605308caa7f206b2f491e248ad63cb440939faac" translate="yes" xml:space="preserve">
          <source>Enables you to declare the libraries you depend on.</source>
          <target state="translated">依存しているライブラリを宣言できるようにします。</target>
        </trans-unit>
        <trans-unit id="cd95372241a5c7be4433dcc726965658231ddc53" translate="yes" xml:space="preserve">
          <source>Enabling this automatically enables Level 1 class map optimizations.</source>
          <target state="translated">これを有効にすると、自動的にレベル 1 のクラス マップの最適化が有効になります。</target>
        </trans-unit>
        <trans-unit id="cf0fbef1f216c16cf5e3f84a56150aa6f8f0e4f5" translate="yes" xml:space="preserve">
          <source>Ensure you're &lt;strong&gt;installing vendors straight from your &lt;code&gt;composer.json&lt;/code&gt;&lt;/strong&gt; via &lt;code&gt;rm -rf vendor &amp;amp;&amp;amp; composer update -v&lt;/code&gt; when troubleshooting, excluding any possible interferences with existing vendor installations or &lt;code&gt;composer.lock&lt;/code&gt; entries.</source>
          <target state="translated">トラブルシューティングの際に、トラブルシューティング時に &lt;code&gt;rm -rf vendor &amp;amp;&amp;amp; composer update -v&lt;/code&gt; を介し&lt;strong&gt;て &lt;code&gt;composer.json&lt;/code&gt; から直接ベンダーをインストールし&lt;/strong&gt;ていることを確認します。既存のベンダーインストールまたは &lt;code&gt;composer.lock&lt;/code&gt; エントリへの干渉の可能性は除外します。</target>
        </trans-unit>
        <trans-unit id="6564e88a14f1ab08cd478fc47de541aa22aa3f50" translate="yes" xml:space="preserve">
          <source>Enter aliases.</source>
          <target state="translated">エイリアスを入力します。</target>
        </trans-unit>
        <trans-unit id="1173b2e11bd16e5dc36c119a4b84f02be11626b5" translate="yes" xml:space="preserve">
          <source>Environment variables</source>
          <target state="translated">環境変数</target>
        </trans-unit>
        <trans-unit id="a316cddac25605e48610f8a6dd964f873589b328" translate="yes" xml:space="preserve">
          <source>Event Handler</source>
          <target state="translated">イベントハンドラ</target>
        </trans-unit>
        <trans-unit id="e83eedb3b5bebe9166bb9a244d25cc00a3a8e7b9" translate="yes" xml:space="preserve">
          <source>Event classes</source>
          <target state="translated">イベントクラス</target>
        </trans-unit>
        <trans-unit id="8cd8e98fdf756acb328b050073c765756bdae804" translate="yes" xml:space="preserve">
          <source>Event names</source>
          <target state="translated">イベント名</target>
        </trans-unit>
        <trans-unit id="b0a3cebb28f832f0854d2e85130ab1964d9ead5a" translate="yes" xml:space="preserve">
          <source>Every Custom Installer defines which &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; string it will recognize. Once recognized it will completely override the default installer and only apply its own logic.</source>
          <target state="translated">すべてのカスタムインストーラーは、認識する&lt;a href=&quot;../04-schema.md#type&quot;&gt;タイプ&lt;/a&gt;文字列を定義します。 認識されると、デフォルトのインストーラーを完全に上書きし、独自のロジックのみを適用します。</target>
        </trans-unit>
        <trans-unit id="3b00106ed1cf4f1597a65d595e1e958593489c86" translate="yes" xml:space="preserve">
          <source>Every plugin has to supply a class which implements the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/PluginInterface.php&quot;&gt;&lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;activate()&lt;/code&gt; method of the plugin is called after the plugin is loaded and receives an instance of &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Composer.php&quot;&gt;&lt;code&gt;Composer\Composer&lt;/code&gt;&lt;/a&gt; as well as an instance of &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/IO/IOInterface.php&quot;&gt;&lt;code&gt;Composer\IO\IOInterface&lt;/code&gt;&lt;/a&gt;. Using these two objects all configuration can be read and all internal objects and state can be manipulated as desired.</source>
          <target state="translated">すべてのプラグインは、 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/PluginInterface.php&quot;&gt; &lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt; &lt;/a&gt;を実装するクラスを提供する必要があります。 プラグインの &lt;code&gt;activate()&lt;/code&gt; メソッドは、プラグインがロードされ、 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Composer.php&quot;&gt; &lt;code&gt;Composer\Composer&lt;/code&gt; &lt;/a&gt;のインスタンスと&lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/IO/IOInterface.php&quot;&gt; &lt;code&gt;Composer\IO\IOInterface&lt;/code&gt; &lt;/a&gt;インスタンスを受け取った後に呼び出されます。 これら2つのオブジェクトを使用すると、すべての構成を読み取ることができ、すべての内部オブジェクトと状態を必要に応じて操作できます。</target>
        </trans-unit>
        <trans-unit id="2f6f4fb775c6074126c5e65c6480a9fa3f801538" translate="yes" xml:space="preserve">
          <source>Every project is a package</source>
          <target state="translated">すべてのプロジェクトはパッケージ</target>
        </trans-unit>
        <trans-unit id="40a9ee12036124d5e9bb9410c6341294eeb32ac9" translate="yes" xml:space="preserve">
          <source>Exact Version Constraint</source>
          <target state="translated">正確なバージョン制約</target>
        </trans-unit>
        <trans-unit id="dfc04035aec2660a76d7a80845c35f65055c4698" translate="yes" xml:space="preserve">
          <source>Exactly the same solution allows you to work with your private repositories at GitHub and BitBucket:</source>
          <target state="translated">全く同じソリューションで、GitHubやBitBucketのプライベートリポジトリで作業することができます。</target>
        </trans-unit>
        <trans-unit id="ca8c81a380f09ae6e9cabe40e437bc7578ea021b" translate="yes" xml:space="preserve">
          <source>Example assuming you patched monolog to fix a bug in the &lt;code&gt;bugfix&lt;/code&gt; branch:</source>
          <target state="translated">&lt;code&gt;bugfix&lt;/code&gt; ブランチのバグを修正するためにモノログにパッチを適用した場合の例：</target>
        </trans-unit>
        <trans-unit id="efc96200b84684c798d80db2272bf506435fe077" translate="yes" xml:space="preserve">
          <source>Example using &lt;code&gt;pear2.php.net&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;pear2.php.net&lt;/code&gt; を使用した例：</target>
        </trans-unit>
        <trans-unit id="b37796feda26a9a236e4716df885cb8dfcffeeef" translate="yes" xml:space="preserve">
          <source>Example using SSL/TLS (HTTPS) using a client certificate:</source>
          <target state="translated">クライアント証明書を使用したSSLTLS(HTTPS)の使用例。</target>
        </trans-unit>
        <trans-unit id="ed099e0a0bc7609b0d797a168a09f7f13ae1f005" translate="yes" xml:space="preserve">
          <source>Example using a custom HTTP Header field for token authentication:</source>
          <target state="translated">トークン認証にカスタム HTTP ヘッダーフィールドを使用する例。</target>
        </trans-unit>
        <trans-unit id="d1e9e1a0132a5a98e967e64001753f55b04b2e91" translate="yes" xml:space="preserve">
          <source>Example using a custom repository using SSH (requires the SSH2 PECL extension):</source>
          <target state="translated">SSHを使ったカスタムリポジトリの利用例(SSH2のPECL拡張が必要)。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="e7d7b95925251198ad685f710f5a28f508b6deb1" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;1.0 - 2.0&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;1.0 - 2.0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73a452712ad40d50f2c244207f8b955ab4362a02" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;1.0.*&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;1.0.*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e47f2f9866593afe4443a3d466b58b1244e14bc0" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;1.0.2&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;1.0.2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1e4c95e3482a8e429cb00f5067fe9d37f08a1145" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;^1.2.3&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;^1.2.3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4bc8d64f1b4347ae1c27dcaf6ec15d5e34b16442" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;~1.2&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;~1.2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eace9adaa2d97ffb2d799bb6d7c05a809674fc00" translate="yes" xml:space="preserve">
          <source>Example: A &lt;code&gt;prefix-url&lt;/code&gt; of &lt;code&gt;https://my-bucket.s3.amazonaws.com&lt;/code&gt; (and &lt;code&gt;directory&lt;/code&gt; set to &lt;code&gt;dist&lt;/code&gt;) creates download URLs which look like the following: &lt;code&gt;https://my-bucket.s3.amazonaws.com/dist/vendor-package-version-ref.zip&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;https://my-bucket.s3.amazonaws.com&lt;/code&gt; （および &lt;code&gt;dist&lt;/code&gt; に設定されたディレクトリ ）の &lt;code&gt;prefix-url&lt;/code&gt; は、次のようなダウンロードURLを作成します &lt;code&gt;https://my-bucket.s3.amazonaws.com/dist/vendor-package-version-ref.zip&lt;/code&gt; : //my-bucket.s3.amazonaws.com/ dist / vendor-package-version-ref.zip 。</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="57df4f096a0336166a8449200edbb838aaf3b1df" translate="yes" xml:space="preserve">
          <source>Exclude files from classmaps</source>
          <target state="translated">クラスマップからファイルを除外する</target>
        </trans-unit>
        <trans-unit id="7576ea680485379c7e63fcdc20bd70360a432244" translate="yes" xml:space="preserve">
          <source>Executes a vendored binary/script. You can execute any command and this will ensure that the Composer bin-dir is pushed on your PATH before the command runs.</source>
          <target state="translated">ベンダーのバイナリスクリプトを実行します。任意のコマンドを実行することができ、これにより、コマンドが実行される前に Composer の bin-dir が PATH にプッシュされます。</target>
        </trans-unit>
        <trans-unit id="7f5075d30198af47ebe4e9d8043055792cdc7e19" translate="yes" xml:space="preserve">
          <source>Executing PHP scripts</source>
          <target state="translated">PHP スクリプトの実行</target>
        </trans-unit>
        <trans-unit id="ab9dcd4a0295bd5e2c0f799fd9becca5752365e8" translate="yes" xml:space="preserve">
          <source>FAQs</source>
          <target state="translated">FAQs</target>
        </trans-unit>
        <trans-unit id="6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b" translate="yes" xml:space="preserve">
          <source>Files</source>
          <target state="translated">Files</target>
        </trans-unit>
        <trans-unit id="e4fc07f498212de95ed124da2a8d8c1a4b04067e" translate="yes" xml:space="preserve">
          <source>Finds out which versions of which packages can and need to be installed, and installs them (meaning it downloads them into your project).</source>
          <target state="translated">どのパッケージのどのバージョンがインストール可能で、どのパッケージをインストールする必要があるかを調べ、それらをインストールします(プロジェクトにダウンロードすることを意味します)。</target>
        </trans-unit>
        <trans-unit id="b6ac8873357db35b4041f9990002e5f9a1f8df5e" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;example.org/packages.json&lt;/code&gt; containing a &lt;code&gt;monolog/monolog&lt;/code&gt; package, this would send a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;example.org/downloads/&lt;/code&gt; with following JSON request body:</source>
          <target state="translated">たとえば、 &lt;code&gt;monolog/monolog&lt;/code&gt; パッケージを含む &lt;code&gt;example.org/downloads/&lt;/code&gt; 、次のJSONリクエスト本文を使用して &lt;code&gt;POST&lt;/code&gt; リクエストをexample.org/downloads/に送信します 。</target>
        </trans-unit>
        <trans-unit id="7ed04b2021243ae78807bf0ec583c388ceaf5701" translate="yes" xml:space="preserve">
          <source>For a package, when there is a choice between licenses (&quot;disjunctive license&quot;), multiple can be specified as array.</source>
          <target state="translated">パッケージの場合、ライセンスの選択肢がある場合(「分離ライセンス」)には、配列で複数指定することができます。</target>
        </trans-unit>
        <trans-unit id="f0c87d2954978715a0a6ce7368978dfa4b0140b7" translate="yes" xml:space="preserve">
          <source>For any given event:</source>
          <target state="translated">任意のイベントのために。</target>
        </trans-unit>
        <trans-unit id="fa042e578e268745d2b0d30c073540804c66196f" translate="yes" xml:space="preserve">
          <source>For closed-source software, you may use &lt;code&gt;&quot;proprietary&quot;&lt;/code&gt; as the license identifier.</source>
          <target state="translated">クローズドソースソフトウェアの場合、ライセンス識別子として &lt;code&gt;&quot;proprietary&quot;&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="4abb367a965c9af766137da6a7fa4e637665b385" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;composer run-script post-install-cmd&lt;/code&gt; will run any &lt;strong&gt;post-install-cmd&lt;/strong&gt; scripts and &lt;a href=&quot;plugins.md&quot;&gt;plugins&lt;/a&gt; that have been defined.</source>
          <target state="translated">たとえば、 &lt;code&gt;composer run-script post-install-cmd&lt;/code&gt; は、定義されている&lt;strong&gt;post-install-cmd&lt;/strong&gt;スクリプトおよび&lt;a href=&quot;plugins.md&quot;&gt;プラグイン&lt;/a&gt;を実行します。</target>
        </trans-unit>
        <trans-unit id="39494316aea08c0ac4d476c250a86d97b773bbe8" translate="yes" xml:space="preserve">
          <source>For example let's assume you have a few packages you want to reuse across your company but don't really want to open-source. You would first define a Satis configuration: a json file with an arbitrary name that lists your curated &lt;a href=&quot;../05-repositories.md&quot;&gt;repositories&lt;/a&gt;.</source>
          <target state="translated">たとえば、社内全体で再利用したいが、実際にはオープンソース化したくないパッケージがいくつかあるとします。 最初にSatis構成を定義し&lt;a href=&quot;../05-repositories.md&quot;&gt;ます&lt;/a&gt; 。キュレートされたリポジトリをリストする任意の名前のjsonファイルです 。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="5e34a2027562a942c714f5bde8188a6e49c2c032" translate="yes" xml:space="preserve">
          <source>For hosting your own packages, a native &lt;code&gt;composer&lt;/code&gt; type of repository is recommended, which provides the best performance.</source>
          <target state="translated">独自のパッケージをホストするには、最高のパフォーマンスを提供するネイティブ &lt;code&gt;composer&lt;/code&gt; タイプのリポジトリをお勧めします。</target>
        </trans-unit>
        <trans-unit id="d8287a23dda68d844acc73a7c1845b7f6a6d6172" translate="yes" xml:space="preserve">
          <source>For instance, if you have the following directory structure in your repository:</source>
          <target state="translated">例えば、以下のようなディレクトリ構造のリポジトリがあるとします。</target>
        </trans-unit>
        <trans-unit id="62abc70e0e723f10b90009a677b8dfeb7833b48e" translate="yes" xml:space="preserve">
          <source>For libraries that specify autoload information, Composer generates a &lt;code&gt;vendor/autoload.php&lt;/code&gt; file. You can simply include this file and start using the classes that those libraries provide without any extra work:</source>
          <target state="translated">自動ロード情報を指定するライブラリの場合、Composerは &lt;code&gt;vendor/autoload.php&lt;/code&gt; ファイルを生成します。 このファイルをインクルードして、追加の作業なしでそれらのライブラリーが提供するクラスを使い始めることができます。</target>
        </trans-unit>
        <trans-unit id="bb5dcb61d9064db38c175a51aa16cae4d7d2dd53" translate="yes" xml:space="preserve">
          <source>For more details on how package repositories work and what other types are available, see &lt;a href=&quot;05-repositories.md&quot;&gt;Repositories&lt;/a&gt;.</source>
          <target state="translated">パッケージリポジトリのしくみおよび使用可能な他のタイプの詳細については、「 &lt;a href=&quot;05-repositories.md&quot;&gt;リポジトリ&lt;/a&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="b3185000751c25fc4e13ea74bb77692b36565bc4" translate="yes" xml:space="preserve">
          <source>For more information on any of these, see &lt;a href=&quot;05-repositories.md&quot;&gt;Repositories&lt;/a&gt;.</source>
          <target state="translated">これらの詳細については、 &lt;a href=&quot;05-repositories.md&quot;&gt;リポジトリを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8dc45732f77bea68f0e8ff8a0b47988252184c97" translate="yes" xml:space="preserve">
          <source>For more on how Composer treats tags and branches and how it resolves package version constraints, read the &lt;a href=&quot;articles/versions.md&quot;&gt;versions&lt;/a&gt; article.</source>
          <target state="translated">Composerがタグとブランチを処理する方法、およびパッケージバージョンの制約を解決する方法の詳細については、 &lt;a href=&quot;articles/versions.md&quot;&gt;バージョンの&lt;/a&gt;記事を参照してください。</target>
        </trans-unit>
        <trans-unit id="c3779f01dd2f4be8d6240102b16d51f8e32c7471" translate="yes" xml:space="preserve">
          <source>For our basic usage introduction, we will be installing &lt;code&gt;monolog/monolog&lt;/code&gt;, a logging library. If you have not yet installed Composer, refer to the &lt;a href=&quot;00-intro.md&quot;&gt;Intro&lt;/a&gt; chapter.</source>
          <target state="translated">基本的な使用方法の紹介では、ロギングライブラリである &lt;code&gt;monolog/monolog&lt;/code&gt; をインストールします。 Composerをまだインストールしていない場合は、「はじめに」の章を参照してください。</target>
        </trans-unit>
        <trans-unit id="75e6d2b31cc97dd0197cef2e617f14aba33ae55a" translate="yes" xml:space="preserve">
          <source>For the binaries that a package defines directly, nothing happens.</source>
          <target state="translated">パッケージが直接定義するバイナリについては、何も起こりません。</target>
        </trans-unit>
        <trans-unit id="8dfaefa87378cfa297ae6856b372ac1883972a68" translate="yes" xml:space="preserve">
          <source>For this reason, Composer offers a few strategies to optimize the autoloader.</source>
          <target state="translated">このため、Composer では、オートローダーを最適化するためのいくつかの戦略が用意されています。</target>
        </trans-unit>
        <trans-unit id="eec20781e79661edb638ee3edc392f4c97c44dd5" translate="yes" xml:space="preserve">
          <source>For this reason, you can alias packages in your &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;require-dev&lt;/code&gt; fields. Let's say you found a bug in the &lt;code&gt;monolog/monolog&lt;/code&gt; package. You cloned &lt;a href=&quot;https://github.com/Seldaek/monolog&quot;&gt;Monolog&lt;/a&gt; on GitHub and fixed the issue in a branch named &lt;code&gt;bugfix&lt;/code&gt;. Now you want to install that version of monolog in your local project.</source>
          <target state="translated">このため、 &lt;code&gt;require&lt;/code&gt; および &lt;code&gt;require-dev&lt;/code&gt; フィールドでパッケージにエイリアスを設定できます。 &lt;code&gt;monolog/monolog&lt;/code&gt; パッケージにバグを見つけたとしましょう。 GitHubで&lt;a href=&quot;https://github.com/Seldaek/monolog&quot;&gt;Monolog&lt;/a&gt;を複製し、 bugfixという名前のブランチで問題を &lt;code&gt;bugfix&lt;/code&gt; 。 次に、そのバージョンのmonologをローカルプロジェクトにインストールします。</target>
        </trans-unit>
        <trans-unit id="9d240f8dbe6b660fdb55b1b62de641dcc119e2e7" translate="yes" xml:space="preserve">
          <source>For your library you may commit the &lt;code&gt;composer.lock&lt;/code&gt; file if you want to. This can help your team to always test against the same dependency versions. However, this lock file will not have any effect on other projects that depend on it. It only has an effect on the main project.</source>
          <target state="translated">ライブラリについては、必要に応じて &lt;code&gt;composer.lock&lt;/code&gt; ファイルをコミットできます。 これは、チームが常に同じ依存バージョンに対してテストするのに役立ちます。 ただし、このロックファイルは、それに依存する他のプロジェクトには影響しません。 メインプロジェクトにのみ影響します。</target>
        </trans-unit>
        <trans-unit id="67ed2a0d1646a25e4e5c6357ab650cceede2463a" translate="yes" xml:space="preserve">
          <source>Fork the project, create a feature branch, and send us a pull request.</source>
          <target state="translated">プロジェクトをフォークして、機能ブランチを作成し、プルリクエストを送ってください。</target>
        </trans-unit>
        <trans-unit id="e2ba7e21d0866d570745e0be2cd4ae1740b0c75b" translate="yes" xml:space="preserve">
          <source>Furthermore plugins may implement the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/EventDispatcher/EventSubscriberInterface.php&quot;&gt;&lt;code&gt;Composer\EventDispatcher\EventSubscriberInterface&lt;/code&gt;&lt;/a&gt; in order to have its event handlers automatically registered with the &lt;code&gt;EventDispatcher&lt;/code&gt; when the plugin is loaded.</source>
          <target state="translated">さらに、プラグインは、プラグインが読み込まれたときにイベントハンドラーを &lt;code&gt;EventDispatcher&lt;/code&gt; に自動的に登録するために、 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/EventDispatcher/EventSubscriberInterface.php&quot;&gt; &lt;code&gt;Composer\EventDispatcher\EventSubscriberInterface&lt;/code&gt; &lt;/a&gt;を実装する場合があります。</target>
        </trans-unit>
        <trans-unit id="fb703587700452b28bfa08ef925463786dcb39c4" translate="yes" xml:space="preserve">
          <source>GPL-2.0-only / GPL-2.0-or-later</source>
          <target state="translated">GPL-2.0-only GPL-2.0-or-later</target>
        </trans-unit>
        <trans-unit id="4f6d1551c226b3db5d0a73f882940e4664405676" translate="yes" xml:space="preserve">
          <source>GPL-3.0-only / GPL-3.0-or-later</source>
          <target state="translated">GPL-3.0-only GPL-3.0-or-later</target>
        </trans-unit>
        <trans-unit id="9239ee2cda84eca4c3440e2a7b50148af67da3d4" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">General</target>
        </trans-unit>
        <trans-unit id="01dde436c5bf40ebfa15e6a97edceace99a5403d" translate="yes" xml:space="preserve">
          <source>Get name of your network device:</source>
          <target state="translated">ネットワークデバイスの名前を取得します。</target>
        </trans-unit>
        <trans-unit id="7b97569b40d2f05a951d4cc330cbcfd7c88620a2" translate="yes" xml:space="preserve">
          <source>Git alternatives</source>
          <target state="translated">Git の代替</target>
        </trans-unit>
        <trans-unit id="3379efac69c85d5a3a34d9e84195afe7e45df889" translate="yes" xml:space="preserve">
          <source>Git is not the only version control system supported by the VCS repository. The following are supported:</source>
          <target state="translated">VCSリポジトリでサポートされているバージョン管理システムはGitだけではありません。以下のものがサポートされています。</target>
        </trans-unit>
        <trans-unit id="97fa0a5d6f5cbf067a98b0bd198984e13706b234" translate="yes" xml:space="preserve">
          <source>Global Options</source>
          <target state="translated">グローバルオプション</target>
        </trans-unit>
        <trans-unit id="5aebcb4070ba960a8a38b0cbb75dfb7c7ef36e09" translate="yes" xml:space="preserve">
          <source>Globally</source>
          <target state="translated">Globally</target>
        </trans-unit>
        <trans-unit id="40da55bdbda9f92b4cb162d0fa0d30ae87ad8e57" translate="yes" xml:space="preserve">
          <source>HTTP basic authentication</source>
          <target state="translated">HTTTP基本認証</target>
        </trans-unit>
        <trans-unit id="bd035743983c709d15f86865690d660745bc99b2" translate="yes" xml:space="preserve">
          <source>HTTPS_PROXY_REQUEST_FULLURI</source>
          <target state="translated">HTTPS_PROXY_REQUEST_FULLURI</target>
        </trans-unit>
        <trans-unit id="37b7cecc73b4173370f09237f4290bf6c8d5a3c9" translate="yes" xml:space="preserve">
          <source>HTTP_PROXY_REQUEST_FULLURI</source>
          <target state="translated">HTTP_PROXY_REQUEST_FULLURI</target>
        </trans-unit>
        <trans-unit id="e627c1e3518e94d5aae9b3b933c59079e3fb4c7a" translate="yes" xml:space="preserve">
          <source>Handling private packages</source>
          <target state="translated">プライベートパッケージの取り扱い</target>
        </trans-unit>
        <trans-unit id="64fcc7c4ab0402024824d129419bca4c329e16e2" translate="yes" xml:space="preserve">
          <source>Here is a minimal package definition:</source>
          <target state="translated">最小限のパッケージの定義は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="9623f75af0d8ab19c9cf3c45fafbbf6d16d1d8cc" translate="yes" xml:space="preserve">
          <source>Here is an example configuration, you see that it holds a few VCS repositories, but those could be any types of &lt;a href=&quot;../05-repositories.md&quot;&gt;repositories&lt;/a&gt;. Then it uses &lt;code&gt;&quot;require-all&quot;: true&lt;/code&gt; which selects all versions of all packages in the repositories you defined.</source>
          <target state="translated">これは設定例&lt;a href=&quot;../05-repositories.md&quot;&gt;です&lt;/a&gt; 。いくつかのVCSリポジトリが含まれていることがわかりますが、それらはどのタイプのリポジトリでもかまいません。 次に、 &lt;code&gt;&quot;require-all&quot;: true&lt;/code&gt; を使用して、定義したリポジトリー内のすべてのパッケージのすべてのバージョンを選択します。</target>
        </trans-unit>
        <trans-unit id="09f3dbbeaa3b1c6d87e5cac25a5fb203a0c173ad" translate="yes" xml:space="preserve">
          <source>Here is an example for the smarty template engine:</source>
          <target state="translated">ここではsmartyテンプレートエンジンの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="ac8594886bfaef3d4a21e69ed81096539b2cedff" translate="yes" xml:space="preserve">
          <source>Here's a complete example:</source>
          <target state="translated">ここに完全な例があります。</target>
        </trans-unit>
        <trans-unit id="733c1498f2b4229070221e228ebee2782a0bb81b" translate="yes" xml:space="preserve">
          <source>Hosting your own</source>
          <target state="translated">独自のホスティング</target>
        </trans-unit>
        <trans-unit id="a1b8a37912007fc22004a1b7e2e6ef7f70f8a9db" translate="yes" xml:space="preserve">
          <source>How do I install Composer programmatically?</source>
          <target state="translated">Composer をプログラムでインストールするにはどうすればよいですか?</target>
        </trans-unit>
        <trans-unit id="32b4c15f519c8cfc9fbaf27d93840a74834fb5b9" translate="yes" xml:space="preserve">
          <source>How do I install a package to a custom path for my framework?</source>
          <target state="translated">フレームワークのカスタムパスにパッケージをインストールするには?</target>
        </trans-unit>
        <trans-unit id="76d4c5f8ba475f3a6f4ced76d79b3ccc79ab9f04" translate="yes" xml:space="preserve">
          <source>How do I install untrusted packages safely? Is it safe to run Composer as superuser or root?</source>
          <target state="translated">信頼できないパッケージを安全にインストールするには? スーパーユーザーまたはルートで Composer を実行しても安全ですか?</target>
        </trans-unit>
        <trans-unit id="102fbd7c49585622551e497c9a5e68dde8d945d3" translate="yes" xml:space="preserve">
          <source>How is it defined?</source>
          <target state="translated">どのように定義されているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="b015b20972be7789cbf4dd0ca63686c363187c6c" translate="yes" xml:space="preserve">
          <source>How to run it?</source>
          <target state="translated">どうやって実行するのか?</target>
        </trans-unit>
        <trans-unit id="67020c6d121c72562a74fdb6b4b5279456ecf8e7" translate="yes" xml:space="preserve">
          <source>Hyphenated Version Range ( - )</source>
          <target state="translated">ハイフン付きバージョン範囲(-)</target>
        </trans-unit>
        <trans-unit id="576efc347180df74028853390e9844adb07ea6d9" translate="yes" xml:space="preserve">
          <source>I have a dependency which contains a &quot;repositories&quot; definition in its composer.json, but it seems to be ignored.</source>
          <target state="translated">composer.jsonに &quot;repositories &quot;の定義を含む依存関係を持っていますが、無視されているようです。</target>
        </trans-unit>
        <trans-unit id="5afc80c8e1732662deb554c6e05c589ccaca1bd0" translate="yes" xml:space="preserve">
          <source>I have locked a dependency to a specific commit but get unexpected results.</source>
          <target state="translated">依存関係を特定のコミットにロックしていますが、予期せぬ結果が出てしまいました。</target>
        </trans-unit>
        <trans-unit id="50ae4de91a28fad6ee03d5e34f4682e79a7025a7" translate="yes" xml:space="preserve">
          <source>IRC / mailing list</source>
          <target state="translated">IRCメーリングリスト</target>
        </trans-unit>
        <trans-unit id="2374cc06896a068605271a7e5fd9f58c772c9ea1" translate="yes" xml:space="preserve">
          <source>IRC channels are on irc.freenode.org: &lt;a href=&quot;irc://irc.freenode.org/composer&quot;&gt;#composer&lt;/a&gt; for users and &lt;a href=&quot;irc://irc.freenode.org/composer-dev&quot;&gt;#composer-dev&lt;/a&gt; for development.</source>
          <target state="translated">IRCチャネルはirc.freenode.orgにあります： &lt;a href=&quot;irc://irc.freenode.org/composer&quot;&gt;ユーザー&lt;/a&gt;用の#composerおよび開発用の&lt;a href=&quot;irc://irc.freenode.org/composer-dev&quot;&gt;＃composer-dev&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="f0a12ce5c3c75ddf52de114d3d2a8f8d29349b20" translate="yes" xml:space="preserve">
          <source>If a package contains other scripts that are not needed by the package users (like build or compile scripts) that code should not be listed as a vendor binary.</source>
          <target state="translated">パッケージに、パッケージユーザが必要としない他のスクリプト (ビルドスクリプトやコンパイルスクリプトなど)が含まれている場合、そのコードはベンダバイナリとしてリストアップされるべきではありません。</target>
        </trans-unit>
        <trans-unit id="c9878365edd01c34cda883058a9f9235932776b8" translate="yes" xml:space="preserve">
          <source>If anyone wants to require the latest &lt;code&gt;dev-master&lt;/code&gt;, they have a problem: Other packages may require &lt;code&gt;1.0.*&lt;/code&gt;, so requiring that dev version will lead to conflicts, since &lt;code&gt;dev-master&lt;/code&gt; does not match the &lt;code&gt;1.0.*&lt;/code&gt; constraint.</source>
          <target state="translated">誰かが最新の &lt;code&gt;dev-master&lt;/code&gt; を必要とする場合、問題があります。他のパッケージでは &lt;code&gt;1.0.*&lt;/code&gt; が必要になる可能性があるため、 &lt;code&gt;dev-master&lt;/code&gt; が &lt;code&gt;1.0.*&lt;/code&gt; 制約と一致しないため、devバージョンを要求すると競合が発生します。</target>
        </trans-unit>
        <trans-unit id="99d86305d22f8bb706853318ad611fc3e468676b" translate="yes" xml:space="preserve">
          <source>If cafile is not specified or if the certificate is not found there, the directory pointed to by capath is searched for a suitable certificate. capath must be a correctly hashed certificate directory.</source>
          <target state="translated">cafile が指定されていない場合や、証明書が見つからない場合は、 capath で指定されたディレクトリが適切な証明書を探します。</target>
        </trans-unit>
        <trans-unit id="5f9bcad59c2f8e80c2013ea1b4e8ab33bd62738e" translate="yes" xml:space="preserve">
          <source>If composer shows proc_open() fork failed on some commands:</source>
          <target state="translated">composer がいくつかのコマンドで proc_open()のフォークに失敗したと表示された場合。</target>
        </trans-unit>
        <trans-unit id="2c991edee9aba048db8b1999d7c98f52a07f8f83" translate="yes" xml:space="preserve">
          <source>If multiple methods should be called, then an array of tuples can be attached to each event. The tuples do not need to include the priority. If it is omitted, it will default to 0.</source>
          <target state="translated">複数のメソッドを呼び出す必要がある場合は、タプルの配列を各イベントにアタッチすることができます。タプルには優先度を含める必要はありません。省略された場合は0がデフォルトとなります。</target>
        </trans-unit>
        <trans-unit id="1cc270b289ba799faf0a3f94cfd39eaf16dc0d41" translate="yes" xml:space="preserve">
          <source>If none of the above helped, please report the error.</source>
          <target state="translated">上記のどれも役に立たなかった場合は、エラーを報告してください。</target>
        </trans-unit>
        <trans-unit id="da92988a7e481bbe7ab895b51780cde0c69ae365" translate="yes" xml:space="preserve">
          <source>If one of your dependencies has a dependency on an unstable package you need to explicitly require it as well, along with its sufficient stability flag.</source>
          <target state="translated">依存関係の一つが不安定なパッケージに依存している場合は、十分な安定性フラグとともに明示的にそれを要求する必要があります。</target>
        </trans-unit>
        <trans-unit id="652d81fbfa99ef96428ee35af1a0c5775df526f4" translate="yes" xml:space="preserve">
          <source>If other dependencies rely on the package you forked, it is possible to inline-alias it so that it matches a constraint that it otherwise would not. For more information &lt;a href=&quot;articles/aliases.md&quot;&gt;see the aliases article&lt;/a&gt;.</source>
          <target state="translated">他の依存関係が分岐したパッケージに依存している場合は、それをインラインエイリアスして、他の方法ではそうではない制約に一致させることができます。 詳細について&lt;a href=&quot;articles/aliases.md&quot;&gt;は、エイリアスの記事を参照してください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="9090b390f4e7f9e30dfd176510ae3dced3e642e3" translate="yes" xml:space="preserve">
          <source>If set to 1, this env changes the default path repository strategy to &lt;code&gt;mirror&lt;/code&gt; instead of &lt;code&gt;symlink&lt;/code&gt;. As it is the default strategy being set it can still be overwritten by repository options.</source>
          <target state="translated">1に設定されている場合、この環境はデフォルトのパスリポジトリ戦略を &lt;code&gt;symlink&lt;/code&gt; ではなく &lt;code&gt;mirror&lt;/code&gt; に変更します。 これは設定されているデフォルトの戦略であるため、リポジトリオプションで上書きできます。</target>
        </trans-unit>
        <trans-unit id="d56b92c2662fea7d4d9a480564618932a4dbc891" translate="yes" xml:space="preserve">
          <source>If set to 1, this env disables the warning about running commands as root/super user. It also disables automatic clearing of sudo sessions, so you should really only set this if you use Composer as super user at all times like in docker containers.</source>
          <target state="translated">1 に設定すると、root スーパーユーザーとしてコマンドを実行する際の警告を無効にします。また、sudo セッションの自動クリアも無効にするので、docker コンテナのように常にスーパーユーザーとして Composer を使用する場合にのみ設定してください。</target>
        </trans-unit>
        <trans-unit id="38bfe50f2ecd6244f1a6c53de8e608b2760e15b7" translate="yes" xml:space="preserve">
          <source>If set to 1, this env var will make Composer behave as if you passed the &lt;code&gt;--no-interaction&lt;/code&gt; flag to every command. This can be set on build boxes/CI.</source>
          <target state="translated">1に設定すると、このenv varにより、 &lt;code&gt;--no-interaction&lt;/code&gt; フラグをすべてのコマンドに渡した場合と同じように動作します。 これはビルドボックス/ CIで設定できます。</target>
        </trans-unit>
        <trans-unit id="64e467fe5be7021a5ba669d137edfa0d51f65a23" translate="yes" xml:space="preserve">
          <source>If set, makes the self-update command write the new Composer phar file into that path instead of overwriting itself. Useful for updating Composer on read-only filesystem.</source>
          <target state="translated">設定されている場合、セルフ・アップデート・コマンドは、自分自身を上書きするのではなく、新しい Composer phar ファイルをそのパスに書き込むようにします。読み取り専用のファイルシステムで Composer を更新する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="3ab8d09688cc5ca6dad1cca57382b3474e5b2aa8" translate="yes" xml:space="preserve">
          <source>If set, the value is used as php's memory_limit.</source>
          <target state="translated">設定されている場合は、その値がphpのmemory_limitとして使用されます。</target>
        </trans-unit>
        <trans-unit id="2543b50b6cb029ab5a5ed083d2af0de12cb24ab3" translate="yes" xml:space="preserve">
          <source>If the directory does not currently exist, it will be created during installation.</source>
          <target state="translated">現在存在しないディレクトリは、インストール中に作成されます。</target>
        </trans-unit>
        <trans-unit id="8ce36768537dc598e7768afc0257ba9d4428ce97" translate="yes" xml:space="preserve">
          <source>If the package is a local VCS repository, the version may be inferred by the branch or tag that is currently checked out. Otherwise, the version should be explicitly defined in the package's &lt;code&gt;composer.json&lt;/code&gt; file. If the version cannot be resolved by these means, it is assumed to be &lt;code&gt;dev-master&lt;/code&gt;.</source>
          <target state="translated">パッケージがローカルのVCSリポジトリの場合、バージョンは、現在チェックアウトされているブランチまたはタグによって推測される場合があります。 それ以外の場合、バージョンはパッケージの &lt;code&gt;composer.json&lt;/code&gt; ファイルで明示的に定義する必要があります。 これらの方法でバージョンを解決できない場合は、 &lt;code&gt;dev-master&lt;/code&gt; であると見なされます。</target>
        </trans-unit>
        <trans-unit id="14833f4633aa0b879e70aa37a9d50696f7aa5f37" translate="yes" xml:space="preserve">
          <source>If the package is in a sub-directory, e.g. &lt;code&gt;/trunk/foo/bar/composer.json&lt;/code&gt; and &lt;code&gt;/tags/1.0/foo/bar/composer.json&lt;/code&gt;, then you can make Composer access it by setting the &lt;code&gt;&quot;package-path&quot;&lt;/code&gt; option to the sub-directory, in this example it would be &lt;code&gt;&quot;package-path&quot;: &quot;foo/bar/&quot;&lt;/code&gt;.</source>
          <target state="translated">パッケージが &lt;code&gt;/trunk/foo/bar/composer.json&lt;/code&gt; や &lt;code&gt;/tags/1.0/foo/bar/composer.json&lt;/code&gt; などのサブディレクトリにある場合、 &lt;code&gt;&quot;package-path&quot;&lt;/code&gt; を設定することでComposerにアクセスさせることができます。サブディレクトリへのオプション、この例では &lt;code&gt;&quot;package-path&quot;: &quot;foo/bar/&quot;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="c2b6be5233d4eba96fdf2a2b89233da0d23b8f23" translate="yes" xml:space="preserve">
          <source>If the package tested is a dependency of one of its dependencies (cyclic dependency), the problem might be that Composer is not able to detect the version of the package properly. If it is a git clone it is generally alright and Composer will detect the version of the current branch, but travis does shallow clones so that process can fail when testing pull requests and feature branches in general. The best solution is to define the version you are on via an environment variable called COMPOSER_ROOT_VERSION. You set it to &lt;code&gt;dev-master&lt;/code&gt; for example to define the root package's version as &lt;code&gt;dev-master&lt;/code&gt;. Use: &lt;code&gt;before_script: COMPOSER_ROOT_VERSION=dev-master composer install&lt;/code&gt; to export the variable for the call to composer.</source>
          <target state="translated">テストされたパッケージが依存関係の1つ（循環依存関係）の依存関係である場合、問題はComposerがパッケージのバージョンを適切に検出できないことである可能性があります。 gitクローンの場合、通常は問題なく、Composerが現在のブランチのバージョンを検出しますが、travisは浅いクローンを作成するため、一般にプルリクエストと機能ブランチをテストするときにプロセスが失敗する可能性があります。 最善の解決策は、COMPOSER_ROOT_VERSIONと呼ばれる環境変数を介して現在のバージョンを定義することです。 たとえば、ルートパッケージのバージョンを &lt;code&gt;dev-master&lt;/code&gt; として定義するには、それを &lt;code&gt;dev-master&lt;/code&gt; に設定します。 &lt;code&gt;before_script: COMPOSER_ROOT_VERSION=dev-master composer install&lt;/code&gt; を使用して、composerを呼び出すための変数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="9e61f385a08c111b685ded10cd096bfb36759926" translate="yes" xml:space="preserve">
          <source>If there are two archives with different versions of a package, they are both imported. When an archive with a newer version is added in the artifact folder and you run &lt;code&gt;update&lt;/code&gt;, that version will be imported as well and Composer will update to the latest version.</source>
          <target state="translated">パッケージのバージョンが異なる2つのアーカイブがある場合、それらは両方ともインポートされます。 新しいバージョンのアーカイブがArtifactフォルダーに追加され、 &lt;code&gt;update&lt;/code&gt; を実行すると 、そのバージョンもインポートされ、Composerは最新バージョンに更新されます。</target>
        </trans-unit>
        <trans-unit id="4e348d79c2291e232760cee8518c2aaa309fc793" translate="yes" xml:space="preserve">
          <source>If there is a &lt;code&gt;composer.lock&lt;/code&gt; file in the current directory, it will use the exact versions from there instead of resolving them. This ensures that everyone using the library will get the same versions of the dependencies.</source>
          <target state="translated">現在のディレクトリに &lt;code&gt;composer.lock&lt;/code&gt; ファイルがある場合は、解決するのではなく、そこからの正確なバージョンを使用します。 これにより、ライブラリを使用するすべてのユーザーが同じバージョンの依存関係を取得できるようになります。</target>
        </trans-unit>
        <trans-unit id="ad9b942389111f2a40c08cad82e13bf58d73c57d" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;composer.lock&lt;/code&gt; file, Composer will create one after dependency resolution.</source>
          <target state="translated">&lt;code&gt;composer.lock&lt;/code&gt; ファイルがない場合、Composerは依存関係の解決後にファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="626c3cd3ac80e286d5b341e20dfc161383a10b95" translate="yes" xml:space="preserve">
          <source>If we wanted to share &lt;code&gt;hello-world&lt;/code&gt; with the world, we would publish it on Packagist as well. Doing so is really easy.</source>
          <target state="translated">&lt;code&gt;hello-world&lt;/code&gt; を世界と共有したい場合は、Packagistでも公開します。 そうするのは本当に簡単です。</target>
        </trans-unit>
        <trans-unit id="78b8c57955622e3c9dd99413d98367dd63fd9bdf" translate="yes" xml:space="preserve">
          <source>If you add custom scripts that do not fit one of the predefined event name above, you can either run them with run-script or also run them as native Composer commands. For example the handler defined below is executable by simply running &lt;code&gt;composer test&lt;/code&gt;:</source>
          <target state="translated">上記の事前定義されたイベント名のいずれにも適合しないカスタムスクリプトを追加する場合、それらをrun-scriptで実行するか、ネイティブComposerコマンドとして実行することもできます。 たとえば、以下で定義されているハンドラは、単に &lt;code&gt;composer test&lt;/code&gt; を実行することで実行可能です。</target>
        </trans-unit>
        <trans-unit id="8af62393468189affa3bd84e482c30715a61ff7e" translate="yes" xml:space="preserve">
          <source>If you alias a non-comparable version (such as dev-develop) &lt;code&gt;dev-&lt;/code&gt; must prefix the branch name. You may also alias a comparable version (i.e. start with numbers, and end with &lt;code&gt;.x-dev&lt;/code&gt;), but only as a more specific version. For example, 1.x-dev could be aliased as 1.2.x-dev.</source>
          <target state="translated">比較できないバージョン（dev-developなど）にエイリアスを付ける場合、 &lt;code&gt;dev-&lt;/code&gt; はブランチ名の前に付ける必要があります。 比較可能なバージョン（つまり、数字で始まり、 &lt;code&gt;.x-dev&lt;/code&gt; で終わる）にエイリアスを付けることもできますが、より具体的なバージョンとしてのみ使用できます。 たとえば、1.x-devは1.2.x-devとしてエイリアス化できます。</target>
        </trans-unit>
        <trans-unit id="ff2632c14db6a49a315cef5ff5a44ea962b68182" translate="yes" xml:space="preserve">
          <source>If you are behind a proxy and would like to disable it for certain domains, you can use the &lt;code&gt;no_proxy&lt;/code&gt; or &lt;code&gt;NO_PROXY&lt;/code&gt; env var. Simply set it to a comma separated list of domains the proxy should &lt;em&gt;not&lt;/em&gt; be used for.</source>
          <target state="translated">プロキシの背後にいて、特定のドメインでプロキシを無効にする場合は、 &lt;code&gt;no_proxy&lt;/code&gt; または &lt;code&gt;NO_PROXY&lt;/code&gt; env varを使用できます。 プロキシを使用し&lt;em&gt;ない&lt;/em&gt;ドメインのコンマ区切りリストに設定するだけです。</target>
        </trans-unit>
        <trans-unit id="c82daf78b6ad5e12a3006ff299f06dd1f92c604c" translate="yes" xml:space="preserve">
          <source>If you are maintaining packages by hand (i.e., without a VCS), you'll need to specify the version explicitly by adding a &lt;code&gt;version&lt;/code&gt; value in your &lt;code&gt;composer.json&lt;/code&gt; file:</source>
          <target state="translated">パッケージを手動で（つまりVCSなしで）保守している場合は、 &lt;code&gt;composer.json&lt;/code&gt; ファイルに &lt;code&gt;version&lt;/code&gt; 値を追加して、バージョンを明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="0a563964d428b8cf75ee5ba1b60df36e9d7cd77a" translate="yes" xml:space="preserve">
          <source>If you are updating a single package, it may depend on newer versions itself. In this case add the &lt;code&gt;--with-dependencies&lt;/code&gt; argument &lt;strong&gt;or&lt;/strong&gt; add all dependencies which need an update to the command.</source>
          <target state="translated">単一のパッケージを更新する場合は、新しいバージョン自体に依存している可能性があります。 この場合、 &lt;code&gt;--with-dependencies&lt;/code&gt; 引数を追加する&lt;strong&gt;か&lt;/strong&gt; 、コマンドの更新が必要なすべての依存関係を追加します。</target>
        </trans-unit>
        <trans-unit id="eb79f392f486e35ae98362b5acf26232cc081a6d" translate="yes" xml:space="preserve">
          <source>If you are updating to a recently published version of a package, be aware that Packagist has a delay of up to 1 minute before new packages are visible to Composer.</source>
          <target state="translated">最近公開されたバージョンのパッケージに更新する場合、Packagist では、新しいパッケージが Composer に表示されるまでに最大 1 分間の遅延が発生することに注意してください。</target>
        </trans-unit>
        <trans-unit id="214c408a3ac668f2be206dab1b2b6aa0d9b7cef2" translate="yes" xml:space="preserve">
          <source>If you are using Composer from behind an HTTP proxy, you can use the standard &lt;code&gt;http_proxy&lt;/code&gt; or &lt;code&gt;HTTP_PROXY&lt;/code&gt; env vars. Simply set it to the URL of your proxy. Many operating systems already set this variable for you.</source>
          <target state="translated">HTTPプロキシの背後からComposerを使用している場合は、標準の &lt;code&gt;http_proxy&lt;/code&gt; または &lt;code&gt;HTTP_PROXY&lt;/code&gt; env変数を使用できます。 プロキシのURLに設定するだけです。 多くのオペレーティングシステムでは、この変数がすでに設定されています。</target>
        </trans-unit>
        <trans-unit id="a3a34660b13c92ff230c92ecc3445778d514c737" translate="yes" xml:space="preserve">
          <source>If you are using Composer in a non-CLI context (i.e. integration into a CMS or similar use case), and need to support proxies, please provide the &lt;code&gt;CGI_HTTP_PROXY&lt;/code&gt; environment variable instead. See &lt;a href=&quot;https://httpoxy.org/&quot;&gt;httpoxy.org&lt;/a&gt; for further details.</source>
          <target state="translated">Composerを非CLIコンテキストで使用している場合（つまり、CMSへの統合または同様のユースケース）、プロキシをサポートする必要がある場合は、代わりに &lt;code&gt;CGI_HTTP_PROXY&lt;/code&gt; 環境変数を指定してください。 詳細については、 &lt;a href=&quot;https://httpoxy.org/&quot;&gt;httpoxy.org&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7a7a7c5a1ab1688bacc0cf072fd3c28547ddf845" translate="yes" xml:space="preserve">
          <source>If you are using ESET antivirus, go in &quot;Advanced Settings&quot; and disable &quot;HTTP-scanner&quot; under &quot;web access protection&quot;</source>
          <target state="translated">ESET アンチウイルスを使用している場合は、「詳細設定」で「ウェブアクセス保護」の「HTTP-scanner」を無効にしてください。</target>
        </trans-unit>
        <trans-unit id="b736abe3ce5462ae838e506eeb53c220f283d06f" translate="yes" xml:space="preserve">
          <source>If you are using IPv6, try disabling it. If that solves your issues, get in touch with your ISP or server host, the problem is not at the Packagist level but in the routing rules between you and Packagist (i.e. the internet at large). The best way to get these fixed is raise awareness to the network engineers that have the power to fix it. Take a look at the next section for IPv6 workarounds.</source>
          <target state="translated">IPv6を使用している場合は、IPv6を無効にしてみてください。問題が解決した場合は、ISPまたはサーバーホストに連絡してください。問題はPackagistレベルではなく、お客様とPackagist間のルーティングルール(つまりインターネット全体)にあります。これらを修正してもらうための最善の方法は、それを修正する力を持っているネットワークエンジニアに意識を高めてもらうことです。IPv6の回避策については、次のセクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="0297fb844c98d88aec299e5d01a69883fb33c2b8" translate="yes" xml:space="preserve">
          <source>If you are using a constraint that does not explicitly define a stability, Composer will default internally to &lt;code&gt;-dev&lt;/code&gt; or &lt;code&gt;-stable&lt;/code&gt;, depending on the operator(s) used. This happens transparently.</source>
          <target state="translated">安定性を明示的に定義しない制約を使用している場合、Composerは、使用される演算子に応じて、デフォルトで内部的に &lt;code&gt;-dev&lt;/code&gt; または &lt;code&gt;-stable&lt;/code&gt; になります。 これは透過的に行われます。</target>
        </trans-unit>
        <trans-unit id="d73e91c66121d31d4e38b634e488e742825b8d0c" translate="yes" xml:space="preserve">
          <source>If you configure &lt;code&gt;latest-.*&lt;/code&gt; as a pattern for non-feature-branches like this:</source>
          <target state="translated">次のように、 &lt;code&gt;latest-.*&lt;/code&gt; を非機能ブランチのパターンとして設定した場合：</target>
        </trans-unit>
        <trans-unit id="ca231dc25c174b7538db93b9f1af2bc4278a1bce" translate="yes" xml:space="preserve">
          <source>If you do not specify a package, composer will prompt you to search for a package, and given results, provide a list of matches to require.</source>
          <target state="translated">パッケージを指定しなかった場合、composerはパッケージを検索するように促し、結果が与えられた場合には、必要とするマッチのリストを提供します。</target>
        </trans-unit>
        <trans-unit id="2470d75b272eaf6e6c6d30fd50cd562308916d69" translate="yes" xml:space="preserve">
          <source>If you do not want to choose requirements interactively, you can pass them to the command.</source>
          <target state="translated">対話的に要件を選択したくない場合は、コマンドに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="f44476b16acbca33e02b01a2cfc7763a99dde3ff" translate="yes" xml:space="preserve">
          <source>If you do not want to commit the lock file and you are using git, add it to the &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">ロックファイルをコミットせず、gitを使用している場合は、それを &lt;code&gt;.gitignore&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="3a0d24e0066c5c369022ce8f6b5fd47f08d87060" translate="yes" xml:space="preserve">
          <source>If you go to the &lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist website&lt;/a&gt; (packagist.org), you can browse and search for packages.</source>
          <target state="translated">&lt;a href=&quot;https://packagist.org/&quot;&gt;PackagistのWebサイト&lt;/a&gt; （packagist.org）にアクセスすると、パッケージを参照および検索できます。</target>
        </trans-unit>
        <trans-unit id="06cd11334ea9a696d3396d6cd048332b3a6d4d74" translate="yes" xml:space="preserve">
          <source>If you have a private Subversion repository you can save credentials in the http-basic section of your config (See &lt;a href=&quot;04-schema.md&quot;&gt;Schema&lt;/a&gt;):</source>
          <target state="translated">プライベートSubversionリポジトリがある場合は、設定のhttp-basicセクションに認証情報を保存できます（ &lt;a href=&quot;04-schema.md&quot;&gt;スキーマを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="0854a6579605c2130f219568e0280e58360ad28c" translate="yes" xml:space="preserve">
          <source>If you have a testing branch, that is heavily maintained during a testing phase and is deployed to your staging environment, normally &lt;code&gt;composer show -s&lt;/code&gt; will give you &lt;code&gt;versions : * dev-master&lt;/code&gt;.</source>
          <target state="translated">テストブランチがあり、それがテストフェーズ中に頻繁に維持され、ステージング環境にデプロイされている場合、通常、 &lt;code&gt;composer show -s&lt;/code&gt; は &lt;code&gt;versions : * dev-master&lt;/code&gt; を提供します：* dev-master 。</target>
        </trans-unit>
        <trans-unit id="8ef4c3860cebec88583b720b8210cb7cd83193c4" translate="yes" xml:space="preserve">
          <source>If you have been pointed to this page, you want to check a few things:</source>
          <target state="translated">このページを指摘された方は、いくつか確認しておきたいことがあります。</target>
        </trans-unit>
        <trans-unit id="186247001f7e113a5aa68a248c4b8e7522db2a76" translate="yes" xml:space="preserve">
          <source>If you have installed Composer for your entire system (see &lt;a href=&quot;00-intro.md#globally&quot;&gt;global installation&lt;/a&gt;), you may have to run the command with &lt;code&gt;root&lt;/code&gt; privileges</source>
          <target state="translated">システム全体にComposerをインストールした場合（ &lt;a href=&quot;00-intro.md#globally&quot;&gt;グローバルインストールを&lt;/a&gt;参照）、 &lt;code&gt;root&lt;/code&gt; 権限でコマンドを実行する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="ff855960cce21697a7506692481856bdd607cf39" translate="yes" xml:space="preserve">
          <source>If you have never run the command before and there is also no &lt;code&gt;composer.lock&lt;/code&gt; file present, Composer simply resolves all dependencies listed in your &lt;code&gt;composer.json&lt;/code&gt; file and downloads the latest version of their files into the &lt;code&gt;vendor&lt;/code&gt; directory in your project. (The &lt;code&gt;vendor&lt;/code&gt; directory is the conventional location for all third-party code in a project). In our example from above, you would end up with the Monolog source files in &lt;code&gt;vendor/monolog/monolog/&lt;/code&gt;. If Monolog listed any dependencies, those would also be in folders under &lt;code&gt;vendor/&lt;/code&gt;.</source>
          <target state="translated">以前にコマンドを実行したことがなく、 &lt;code&gt;composer.lock&lt;/code&gt; ファイルも存在しない場合、Composerはcomposer.jsonファイルにリストされているすべての依存関係を解決し、それらのファイルの最新バージョンをプロジェクトの &lt;code&gt;vendor&lt;/code&gt; ディレクトリにダウンロードします。 （ &lt;code&gt;vendor&lt;/code&gt; ディレクトリは、プロジェクト内のすべてのサードパーティコードの従来の場所です）。 上記の例では、 &lt;code&gt;vendor/monolog/monolog/&lt;/code&gt; Monologソースファイルが作成されます。 Monologが依存関係をリストした場合、それらも &lt;code&gt;vendor/&lt;/code&gt; 下のフォルダーにあります。</target>
        </trans-unit>
        <trans-unit id="0d1805dea127164a1d22e823add2a8d04954f2fd" translate="yes" xml:space="preserve">
          <source>If you have no branches or tags directory you can disable them entirely by setting the &lt;code&gt;branches-path&lt;/code&gt; or &lt;code&gt;tags-path&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">ブランチまたはタグディレクトリがない場合は、 &lt;code&gt;branches-path&lt;/code&gt; または &lt;code&gt;tags-path&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定することで、それらを完全に無効にできます 。</target>
        </trans-unit>
        <trans-unit id="9fdb3f5de4ebac5ba748c10f5b5017b71d5209cb" translate="yes" xml:space="preserve">
          <source>If you have non-numeric branch names, for example like &quot;latest&quot;, &quot;current&quot;, &quot;latest-stable&quot; or something, that do not look like a version number, then Composer handles such branches as feature branches. This means it searches for parent branches, that look like a version or ends at special branches (like master) and the root package version number becomes the version of the parent branch or at least master or something.</source>
          <target state="translated">latest&quot;、&quot;current&quot;、&quot;latest-stable&quot; などのように、バージョン番号のように見えない数字以外のブランチ名がある場合、 Composer はそのようなブランチを機能ブランチとして処理します。つまり、バージョンのように見える親ブランチや、特別なブランチ (master など)で終わる親ブランチを検索し、ルート パッケージのバージョン番号が親ブランチのバージョンになるか、少なくとも master などになります。</target>
        </trans-unit>
        <trans-unit id="0a56ee656028257ad006b1e65bfa82d219ebd5ab" translate="yes" xml:space="preserve">
          <source>If you like to install it only for your user and avoid requiring root permissions, you can use &lt;code&gt;~/.local/bin&lt;/code&gt; instead which is available by default on some Linux distributions.</source>
          <target state="translated">ユーザーのみにインストールし、ルート権限を必要としない場合は、一部のLinuxディストリビューションでデフォルトで使用できる &lt;code&gt;~/.local/bin&lt;/code&gt; 代わりに使用できます。</target>
        </trans-unit>
        <trans-unit id="b1b53c2f91ab667b2afe417a4423be64fdf5e853" translate="yes" xml:space="preserve">
          <source>If you need to search for a same prefix in multiple directories, you can specify them as an array as such:</source>
          <target state="translated">複数のディレクトリで同じ接頭辞を検索する必要がある場合は、そのように配列として指定することができます。</target>
        </trans-unit>
        <trans-unit id="f478626e7651a39ebec29434873a03ee56d5ea94" translate="yes" xml:space="preserve">
          <source>If you need to update the autoloader because of new classes in a classmap package for example, you can use &lt;code&gt;dump-autoload&lt;/code&gt; to do that without having to go through an install or update.</source>
          <target state="translated">たとえば、クラスマップパッケージの新しいクラスのためにオートローダーを更新する必要がある場合は、 &lt;code&gt;dump-autoload&lt;/code&gt; を使用して、インストールや更新を行わずにそれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="45f5af54e96bfab85edc9ec72806abe899bed0db" translate="yes" xml:space="preserve">
          <source>If you need to work with composer as a library you may also want to check out the &lt;a href=&quot;https://getcomposer.org/apidoc/master/index.html&quot;&gt;API Docs&lt;/a&gt;</source>
          <target state="translated">ライブラリとしてcomposerを使用する必要がある場合は、 &lt;a href=&quot;https://getcomposer.org/apidoc/master/index.html&quot;&gt;APIドキュメント&lt;/a&gt;も確認してください。</target>
        </trans-unit>
        <trans-unit id="d0bab24d8881b62d58afe616d8a186eddeb30dd9" translate="yes" xml:space="preserve">
          <source>If you often need to modify the code of your dependencies and they are installed from source, the &lt;code&gt;status&lt;/code&gt; command allows you to check if you have local changes in any of them.</source>
          <target state="translated">依存関係のコードを頻繁に変更する必要があり、それらがソースからインストールされている場合、 &lt;code&gt;status&lt;/code&gt; コマンドを使用すると、依存関係のローカル変更があるかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="f4433cbc27ee9f55a46c17668d0e2b7df7f51c28" translate="yes" xml:space="preserve">
          <source>If you only want to install or update one dependency, you can whitelist them:</source>
          <target state="translated">1つの依存関係だけをインストールしたり更新したりしたい場合は、それらをホワイトリスト化することができます。</target>
        </trans-unit>
        <trans-unit id="37c078d691204589628a1c61d798e3249f1857b9" translate="yes" xml:space="preserve">
          <source>If you only want to update a few packages and not all, you can list them as such:</source>
          <target state="translated">すべてのパッケージを更新するのではなく、いくつかのパッケージだけを更新したい場合は、そのようにリストアップすることができます。</target>
        </trans-unit>
        <trans-unit id="0bfb23379dfbe8fd9e6d96b0bc658af47a41ba43" translate="yes" xml:space="preserve">
          <source>If you set the &lt;code&gt;no-api&lt;/code&gt; key to &lt;code&gt;true&lt;/code&gt; on a github repository it will clone the repository as it would with any other git repository instead of using the GitHub API. But unlike using the &lt;code&gt;git&lt;/code&gt; driver directly, Composer will still attempt to use github's zip files.</source>
          <target state="translated">githubリポジトリで &lt;code&gt;no-api&lt;/code&gt; キーを &lt;code&gt;true&lt;/code&gt; に設定すると、GitHub APIを使用する代わりに、他のgitリポジトリと同じようにリポジトリのクローンが作成されます。 ただし、 &lt;code&gt;git&lt;/code&gt; ドライバーを直接使用する場合とは異なり、Composerは引き続きgithubのzipファイルを使用しようとします。</target>
        </trans-unit>
        <trans-unit id="c0038faa59f789af61ca1da736eaa7df44af5eed" translate="yes" xml:space="preserve">
          <source>If you think you found a bug, or something is behaving strangely, you might want to run the &lt;code&gt;diagnose&lt;/code&gt; command to perform automated checks for many common problems.</source>
          <target state="translated">バグを見つけた、または異常な動作をしていると思われる場合は、 &lt;code&gt;diagnose&lt;/code&gt; コマンドを実行して、多くの一般的な問題の自動チェックを実行できます。</target>
        </trans-unit>
        <trans-unit id="92b3bae8dc6cad3e5e2f7cb5260a21e1be5a8462" translate="yes" xml:space="preserve">
          <source>If you use a proxy but it does not support the request_fulluri flag for HTTPS requests, then you should set this env var to &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; to prevent Composer from setting the request_fulluri option.</source>
          <target state="translated">プロキシを使用しているがHTTPSリクエストのrequest_fulluriフラグをサポートしていない場合は、この環境変数を &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;0&lt;/code&gt; に設定して、Composerがrequest_fulluriオプションを設定しないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="85d8396f73132b120e95ee633516d15440e3bf36" translate="yes" xml:space="preserve">
          <source>If you use a proxy but it does not support the request_fulluri flag, then you should set this env var to &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; to prevent Composer from setting the request_fulluri option.</source>
          <target state="translated">プロキシを使用しているがrequest_fulluriフラグをサポートしていない場合は、この環境変数を &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;0&lt;/code&gt; に設定して、Composerがrequest_fulluriオプションを設定しないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="44de192e0126331f914d4933480e0c49b603f76a" translate="yes" xml:space="preserve">
          <source>If you want Composer to check out a branch instead of a tag, you need to point it to the branch using the special &lt;code&gt;dev-*&lt;/code&gt; prefix (or sometimes suffix; see below). If you're checking out a branch, it's assumed that you want to &lt;em&gt;work&lt;/em&gt; on the branch and Composer actually clones the repo into the correct place in your &lt;code&gt;vendor&lt;/code&gt; directory. For tags, it copies the right files without actually cloning the repo. (You can modify this behavior with --prefer-source and --prefer-dist, see &lt;a href=&quot;../03-cli.md#install&quot;&gt;install options&lt;/a&gt;.)</source>
          <target state="translated">Composerがタグではなくブランチをチェックアウトするようにしたい場合は、特別な &lt;code&gt;dev-*&lt;/code&gt; プレフィックス（または場合によってはサフィックス。以下を参照）を使用してブランチをポイントする必要があります。 ブランチをチェックアウトしている場合、ブランチで&lt;em&gt;作業&lt;/em&gt;する必要があると想定され、Composerは実際にリポジトリを &lt;code&gt;vendor&lt;/code&gt; ディレクトリの正しい場所に複製します。 タグの場合、実際にリポジトリを複製せずに適切なファイルをコピーします。 （この動作は--prefer-sourceおよび--prefer-distで変更でき&lt;a href=&quot;../03-cli.md#install&quot;&gt;ます&lt;/a&gt; 。 インストールオプションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="55f79210d46f07282dbf89385baebc71ad1b28ee" translate="yes" xml:space="preserve">
          <source>If you want to cherry pick which packages you want, you can list all the packages you want to have in your satis repository inside the classic composer &lt;code&gt;require&lt;/code&gt; key, using a &lt;code&gt;&quot;*&quot;&lt;/code&gt; constraint to make sure all versions are selected, or another constraint if you want really specific versions.</source>
          <target state="translated">必要なパッケージを選択する場合は、クラシックコンポーザーの &lt;code&gt;require&lt;/code&gt; キー内のsatisリポジトリーに含めるすべてのパッケージをリストし、 &lt;code&gt;&quot;*&quot;&lt;/code&gt; 制約を使用してすべてのバージョンが選択されていることを確認します。本当に特定のバージョンが必要です。</target>
        </trans-unit>
        <trans-unit id="f13efbb7ac71ddeb7534aac795151e408acc5fa0" translate="yes" xml:space="preserve">
          <source>If you want to exclude some files or folders from the classmap you can use the &lt;code&gt;exclude-from-classmap&lt;/code&gt; property. This might be useful to exclude test classes in your live environment, for example, as those will be skipped from the classmap even when building an optimized autoloader.</source>
          <target state="translated">クラスマップから一部のファイルまたはフォルダーを除外する場合は、 &lt;code&gt;exclude-from-classmap&lt;/code&gt; プロパティを使用できます。 これは、たとえば、最適化されたオートローダーを構築する場合でもクラスマップからスキップされるため、ライブ環境でテストクラスを除外するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="b025eb2e6edeeb2c120f7599d2a9d04fe52bda64" translate="yes" xml:space="preserve">
          <source>If you want to have a fallback directory where any namespace can be, you can use an empty prefix like:</source>
          <target state="translated">任意の名前空間を使用できるフォールバックディレクトリを作成したい場合は、空のプレフィックスを使用することができます。</target>
        </trans-unit>
        <trans-unit id="f1a38ae9b1e7c1f52baf24f7fdce94b5b20ea762" translate="yes" xml:space="preserve">
          <source>If you want to have a fallback directory where any namespace will be looked for, you can use an empty prefix like:</source>
          <target state="translated">任意の名前空間を検索するフォールバックディレクトリを作りたい場合は、空のプレフィックスを使用することができます。</target>
        </trans-unit>
        <trans-unit id="039247ec0f83e47d8473b4e158781ab16a4b2334" translate="yes" xml:space="preserve">
          <source>If you want to require certain files explicitly on every request then you can use the &lt;code&gt;files&lt;/code&gt; autoloading mechanism. This is useful if your package includes PHP functions that cannot be autoloaded by PHP.</source>
          <target state="translated">すべてのリクエストで特定のファイルを明示的に要求する場合は、 &lt;code&gt;files&lt;/code&gt; 自動ロードメカニズムを使用できます。 これは、パッケージにPHPで自動ロードできないPHP関数が含まれている場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="39c1ae4e2a50cf6c1fcc88c7b7e7e78d29669faa" translate="yes" xml:space="preserve">
          <source>If you want to scan only a single repository and update all packages found in it, pass the VCS repository URL as an optional argument:</source>
          <target state="translated">単一のリポジトリのみをスキャンし、そのリポジトリで見つかったすべてのパッケージを更新したい場合は、オプションの引数として VCS リポジトリの URL を渡します。</target>
        </trans-unit>
        <trans-unit id="7a5767bb08621435fefaabf93b7649df7819c09f" translate="yes" xml:space="preserve">
          <source>If you want to scan only the selected package and not all VCS repositories you need to declare a &lt;em&gt;name&lt;/em&gt; for all your package (this only work on VCS repositories type) :</source>
          <target state="translated">すべてのVCSリポジトリではなく、選択したパッケージのみをスキャンする場合は、すべてのパッケージの&lt;em&gt;名前&lt;/em&gt;を宣言する必要があります（これはVCSリポジトリタイプでのみ機能します）。</target>
        </trans-unit>
        <trans-unit id="4db9a2f1f18b4c6bf7b791fb5dbde76c3b86956a" translate="yes" xml:space="preserve">
          <source>If you want to see the details of a certain package, you can pass the package name.</source>
          <target state="translated">特定のパッケージの詳細を見たい場合は、パッケージ名を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="c5e6d88e4258a31296a1f91aa671c93061b55add" translate="yes" xml:space="preserve">
          <source>If you want to use a project that does not support Composer through any of the means above, you still can define the package yourself by using a &lt;code&gt;package&lt;/code&gt; repository.</source>
          <target state="translated">上記のいずれかの方法でComposerをサポートしていないプロジェクトを使用する場合でも、 &lt;code&gt;package&lt;/code&gt; リポジトリを使用して自分でパッケージを定義できます。</target>
        </trans-unit>
        <trans-unit id="6028e69cd147ad305c8b9b1c5c1f58afd0a9413f" translate="yes" xml:space="preserve">
          <source>If you wish to explicitly consider only the stable release in the comparison, add the suffix &lt;code&gt;-stable&lt;/code&gt;.</source>
          <target state="translated">比較で安定版リリースのみを明示的に検討する場合は、接尾辞 &lt;code&gt;-stable&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="a4beab1c9689ede4fe7f9949cf6e86909429578d" translate="yes" xml:space="preserve">
          <source>If you wish to update the binary later on you can run a global update:</source>
          <target state="translated">バイナリを後で更新したい場合は、グローバルアップデートを実行することができます。</target>
        </trans-unit>
        <trans-unit id="4964960c30bc7d3323604eec740fe51ed759cbcc" translate="yes" xml:space="preserve">
          <source>If you would like to contribute to Composer, please read the &lt;a href=&quot;https://github.com/composer/composer&quot;&gt;README&lt;/a&gt; and &lt;a href=&quot;https://github.com/composer/composer/blob/master/.github/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; documents.</source>
          <target state="translated">Composerに寄稿したい場合は、 &lt;a href=&quot;https://github.com/composer/composer&quot;&gt;README&lt;/a&gt;および&lt;a href=&quot;https://github.com/composer/composer/blob/master/.github/CONTRIBUTING.md&quot;&gt;CONTRIBUTINGの&lt;/a&gt;ドキュメントをお読みください。</target>
        </trans-unit>
        <trans-unit id="6963e449f581002a0c44e6a9d4da812d9bc89061" translate="yes" xml:space="preserve">
          <source>If you would like to instead update to a specific release simply specify it:</source>
          <target state="translated">特定のリリースにアップデートしたい場合は、それを指定するだけです。</target>
        </trans-unit>
        <trans-unit id="05c1ceeea7ce577ba2bed1b7cb4a51e5a658c8c1" translate="yes" xml:space="preserve">
          <source>If you would like to run the scripts for an event manually, the syntax is:</source>
          <target state="translated">イベントのスクリプトを手動で実行したい場合は、構文は次のようになります。</target>
        </trans-unit>
        <trans-unit id="bb435988793ab200f1d2586c89bb80db3f459cfa" translate="yes" xml:space="preserve">
          <source>If you would prefer not to provide your GitHub credentials to Composer you can manually create a token using the following procedure:</source>
          <target state="translated">GitHub の認証情報を Composer に提供したくない場合は、次の手順でトークンを手動で作成します。</target>
        </trans-unit>
        <trans-unit id="9c5a5a78ae54c33fe4ab9aca3cfeaf309132ed18" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;master&lt;/code&gt; branch is used to tag releases of the &lt;code&gt;1.0&lt;/code&gt; development line, i.e. &lt;code&gt;1.0.1&lt;/code&gt;, &lt;code&gt;1.0.2&lt;/code&gt;, &lt;code&gt;1.0.3&lt;/code&gt;, etc., any package depending on it will probably require version &lt;code&gt;1.0.*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; ブランチを使用して &lt;code&gt;1.0&lt;/code&gt; 開発ラインのリリース（ &lt;code&gt;1.0.3&lt;/code&gt; など）にタグを付ける場合、それに依存するパッケージにはおそらくバージョン &lt;code&gt;1.0.*&lt;/code&gt; 必要です。</target>
        </trans-unit>
        <trans-unit id="85c7b943405e2749fb3c9f750c7fe352e18413b1" translate="yes" xml:space="preserve">
          <source>If your Subversion client is configured to store credentials by default these credentials will be saved for the current user and existing saved credentials for this server will be overwritten. To change this behavior by setting the &lt;code&gt;&quot;svn-cache-credentials&quot;&lt;/code&gt; option in your repository configuration:</source>
          <target state="translated">Subversionクライアントがデフォルトで認証情報を保存するように設定されている場合、これらの認証情報は現在のユーザー用に保存され、このサーバーに保存されている既存の認証情報は上書きされます。 リポジトリ設定で &lt;code&gt;&quot;svn-cache-credentials&quot;&lt;/code&gt; オプションを設定してこの動作を変更するには：</target>
        </trans-unit>
        <trans-unit id="9dd02a0fc08eda5fab24424683485cdd68b99b45" translate="yes" xml:space="preserve">
          <source>If your repository requires more configuration options, you can instead pass its JSON representation :</source>
          <target state="translated">リポジトリでより多くの設定オプションが必要な場合は、代わりにその JSON 表現を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2c37319ca4dbde153c43110cb80c63b0cf6850ce" translate="yes" xml:space="preserve">
          <source>In Composer, what's often referred to casually as a version -- that is, the string that follows the package name in a require line (e.g., &lt;code&gt;~1.1&lt;/code&gt; or &lt;code&gt;1.2.*&lt;/code&gt;) -- is actually more specifically a version constraint. Composer uses version constraints to figure out which refs in a VCS it should be checking out (or simply to verify that a given library is acceptable in the case of a statically-maintained library with a &lt;code&gt;version&lt;/code&gt; specification in &lt;code&gt;composer.json&lt;/code&gt;).</source>
          <target state="translated">Composerでは、バージョンと呼ばれることの多いもの（つまり、require行でパッケージ名の後に続く文字列（例： &lt;code&gt;~1.1&lt;/code&gt; または &lt;code&gt;1.2.*&lt;/code&gt; ））は、具体的にはバージョンの制約です。 Composerは、バージョンの制約を使用して、チェックアウトする必要があるVCSの参照を特定します（または、 &lt;code&gt;composer.json&lt;/code&gt; に &lt;code&gt;version&lt;/code&gt; 指定がある静的に維持されているライブラリの場合、特定のライブラリが受け入れ可能であることを確認するだけです）。</target>
        </trans-unit>
        <trans-unit id="3860748b7db84c776b09c637cb222a535886a2a1" translate="yes" xml:space="preserve">
          <source>In addition to PSR-4 autoloading, Composer also supports PSR-0, classmap and files autoloading. See the &lt;a href=&quot;04-schema.md#autoload&quot;&gt;&lt;code&gt;autoload&lt;/code&gt;&lt;/a&gt; reference for more information.</source>
          <target state="translated">PSR-4の自動ロードに加えて、ComposerはPSR-0、クラスマップ、ファイルの自動ロードもサポートしています。 詳細については、 &lt;a href=&quot;04-schema.md#autoload&quot;&gt; &lt;code&gt;autoload&lt;/code&gt; &lt;/a&gt;リファレンスをご覧ください。</target>
        </trans-unit>
        <trans-unit id="a867c9b8c3cabee64d6b05ee556a5afff1016d16" translate="yes" xml:space="preserve">
          <source>In addition to modifying the config section, the &lt;code&gt;config&lt;/code&gt; command also supports making changes to the extra section by using it the following way:</source>
          <target state="translated">configセクションの変更に加えて、 &lt;code&gt;config&lt;/code&gt; コマンドは次のように使用して、追加セクションへの変更をサポートします。</target>
        </trans-unit>
        <trans-unit id="2b39212db13d7fe902058fc96c0038991089f654" translate="yes" xml:space="preserve">
          <source>In addition to modifying the config section, the &lt;code&gt;config&lt;/code&gt; command also supports making changes to the repositories section by using it the following way:</source>
          <target state="translated">configセクションの変更に加えて、 &lt;code&gt;config&lt;/code&gt; コマンドは次のように使用することで、リポジトリセクションへの変更をサポートします。</target>
        </trans-unit>
        <trans-unit id="2d383ca19b495532ea690d9a1e23da833be95661" translate="yes" xml:space="preserve">
          <source>In addition to the artifact repository, you can use the path one, which allows you to depend on a local directory, either absolute or relative. This can be especially useful when dealing with monolithic repositories.</source>
          <target state="translated">アーティファクトリポジトリに加えて、パスを使用することができます。これはローカルディレクトリに依存することができます。これはモノリシックリポジトリを扱う場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="a09fb51e45d167e1f9714cc02e99c769d87f9f3f" translate="yes" xml:space="preserve">
          <source>In addition to the name and the version, there is useful metadata. The information most relevant for installation is the source definition, which describes where to get the package contents. The package data points to the contents of the package. And there are two options here: dist and source.</source>
          <target state="translated">名前とバージョンに加えて、有用なメタデータがあります。インストールに最も関連する情報はソース定義で、パッケージの内容をどこで取得するかを記述しています。パッケージデータはパッケージの内容を指します。そして、ここではdistとsourceの2つのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="aabc722227f77cc44f2dd4ebba9f418fd1086fee" translate="yes" xml:space="preserve">
          <source>In case global configuration matches &lt;em&gt;local&lt;/em&gt; configuration, the &lt;em&gt;local&lt;/em&gt; configuration in the project's &lt;code&gt;composer.json&lt;/code&gt; always wins.</source>
          <target state="translated">グローバル構成が&lt;em&gt;ローカル&lt;/em&gt;構成と一致する場合、プロジェクトの &lt;code&gt;composer.json&lt;/code&gt; の &lt;em&gt;ローカル&lt;/em&gt;構成が常に優先されます。</target>
        </trans-unit>
        <trans-unit id="a232ca8017214f112197ab8a59fc91ab0d6fdc06" translate="yes" xml:space="preserve">
          <source>In case the package root is below the namespace declaration you cannot autoload properly. &lt;code&gt;target-dir&lt;/code&gt; solves this problem.</source>
          <target state="translated">パッケージルートが名前空間宣言の下にある場合、適切に自動ロードできません。 &lt;code&gt;target-dir&lt;/code&gt; はこの問題を解決します。</target>
        </trans-unit>
        <trans-unit id="514951e744d431fba84a184763bc0c5182b87a7a" translate="yes" xml:space="preserve">
          <source>In fact, internally Composer sees every version as a separate package. While this distinction does not matter when you are using Composer, it's quite important when you want to change it.</source>
          <target state="translated">実際、内部的には Composer は、すべてのバージョンを別のパッケージとして認識しています。この区別は Composer を使用しているときには重要ではありませんが、変更したいときには非常に重要です。</target>
        </trans-unit>
        <trans-unit id="7fbe0750ceedb244ed354a301496f21ce026f969" translate="yes" xml:space="preserve">
          <source>In order to get the latest versions of the dependencies and to update the &lt;code&gt;composer.lock&lt;/code&gt; file, you should use the &lt;code&gt;update&lt;/code&gt; command. This command is also aliased as &lt;code&gt;upgrade&lt;/code&gt; as it does the same as &lt;code&gt;upgrade&lt;/code&gt; does if you are thinking of &lt;code&gt;apt-get&lt;/code&gt; or similar package managers.</source>
          <target state="translated">依存関係の最新バージョンを取得し、 &lt;code&gt;composer.lock&lt;/code&gt; ファイルを更新するには、 &lt;code&gt;update&lt;/code&gt; コマンドを使用する必要があります。 このコマンドは、 &lt;code&gt;apt-get&lt;/code&gt; または同様のパッケージマネージャーを検討している場合に、 &lt;code&gt;upgrade&lt;/code&gt; と同じように実行されるため、 &lt;code&gt;upgrade&lt;/code&gt; とも呼ばれます 。</target>
        </trans-unit>
        <trans-unit id="fa048ba15ab79c443eba36cbe514ccf101c430b5" translate="yes" xml:space="preserve">
          <source>In order to make that package installable you need to give it a name. You do this by adding the &lt;a href=&quot;04-schema.md#name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property in &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">そのパッケージをインストール可能にするには、名前を付ける必要があります。 これを行うには、 &lt;code&gt;composer.json&lt;/code&gt; に &lt;a href=&quot;04-schema.md#name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;プロパティを追加します。</target>
        </trans-unit>
        <trans-unit id="f5581c3335e7d368782b7aa61c1110389f74d217" translate="yes" xml:space="preserve">
          <source>In order to use branch aliasing, you must own the repository of the package being aliased. If you want to alias a third party package without maintaining a fork of it, use inline aliases as described below.</source>
          <target state="translated">ブランチエイリアスを使うには、エイリアスされるパッケージのリポジトリを所有していなければなりません。サードパーティのパッケージをフォークを維持せずにエイリアスしたい場合は、以下のようにインラインエイリアスを使用します。</target>
        </trans-unit>
        <trans-unit id="1b2b09f7f75da25891d541b08223becf58cd09cd" translate="yes" xml:space="preserve">
          <source>In our example, we are requesting the Monolog package with the version constraint &lt;a href=&quot;https://semver.mwl.be/#?package=monolog%2Fmonolog&amp;amp;version=1.0.*&quot;&gt;&lt;code&gt;1.0.*&lt;/code&gt;&lt;/a&gt;. This means any version in the &lt;code&gt;1.0&lt;/code&gt; development branch, or any version that is greater than or equal to 1.0 and less than 1.1 (&lt;code&gt;&amp;gt;=1.0 &amp;lt;1.1&lt;/code&gt;).</source>
          <target state="translated">この例では、バージョン制約&lt;a href=&quot;https://semver.mwl.be/#?package=monolog%2Fmonolog&amp;amp;version=1.0.*&quot;&gt; &lt;code&gt;1.0.*&lt;/code&gt; &lt;/a&gt;使用してMonologパッケージをリクエストしています。 これは、 &lt;code&gt;1.0&lt;/code&gt; 開発ブランチのすべてのバージョン、または1.0以上1.1未満のバージョン（ &lt;code&gt;&amp;gt;=1.0 &amp;lt;1.1&lt;/code&gt; ）を意味します。</target>
        </trans-unit>
        <trans-unit id="81986004cc1edc50bd4c375d6b69e538384f12f9" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;02-libraries.md&quot;&gt;Libraries&lt;/a&gt; chapter we looked at how to create a &lt;code&gt;composer.json&lt;/code&gt; by hand. There is also an &lt;code&gt;init&lt;/code&gt; command available that makes it a bit easier to do this.</source>
          <target state="translated">&lt;a href=&quot;02-libraries.md&quot;&gt;ライブラリの&lt;/a&gt;章では、 &lt;code&gt;composer.json&lt;/code&gt; を手動で作成する方法について説明しました。 これを少し簡単にする &lt;code&gt;init&lt;/code&gt; コマンドもあります 。</target>
        </trans-unit>
        <trans-unit id="0a2da24732faf864f958efa71b75fa65732d782b" translate="yes" xml:space="preserve">
          <source>In the above example, if you wanted to check out the &lt;code&gt;my-feature&lt;/code&gt; branch, you would specify &lt;code&gt;dev-my-feature&lt;/code&gt; as the version constraint in your &lt;code&gt;require&lt;/code&gt; clause. This would result in Composer cloning the &lt;code&gt;my-library&lt;/code&gt; repository into my &lt;code&gt;vendor&lt;/code&gt; directory and checking out the &lt;code&gt;my-feature&lt;/code&gt; branch.</source>
          <target state="translated">上記の例で、 &lt;code&gt;my-feature&lt;/code&gt; ブランチをチェックアウトしたい場合は、 &lt;code&gt;require&lt;/code&gt; 句のバージョン制約として &lt;code&gt;dev-my-feature&lt;/code&gt; を指定します。 これにより、Composerは &lt;code&gt;my-library&lt;/code&gt; リポジトリを &lt;code&gt;vendor&lt;/code&gt; ディレクトリに複製し、 &lt;code&gt;my-feature&lt;/code&gt; ブランチをチェックアウトします。</target>
        </trans-unit>
        <trans-unit id="d5130afafe2bbd873a555483b33693b38146a596" translate="yes" xml:space="preserve">
          <source>In the vast majority of cases, you will be maintaining your library using some sort of version control system like git, svn, hg or fossil. In these cases, Composer infers versions from your VCS and you &lt;strong&gt;should not&lt;/strong&gt; specify a version in your &lt;code&gt;composer.json&lt;/code&gt; file. (See the &lt;a href=&quot;articles/versions.md&quot;&gt;Versions article&lt;/a&gt; to learn about how Composer uses VCS branches and tags to resolve version constraints.)</source>
          <target state="translated">ほとんどの場合、git、svn、hg、fossilなどのバージョン管理システムを使用してライブラリを管理します。 これらの場合、ComposerはVCSからバージョンを推測するため、 &lt;code&gt;composer.json&lt;/code&gt; ファイルでバージョンを指定し&lt;strong&gt;ない&lt;/strong&gt;でください。 （ComposerがVCSブランチとタグを使用してバージョンの制約を解決する方法については、 &lt;a href=&quot;articles/versions.md&quot;&gt;バージョンの記事&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="ed442c1bb5da178492831e28d91ea61751721014" translate="yes" xml:space="preserve">
          <source>In these cases you could consider creating a Custom Installer to handle your specific logic.</source>
          <target state="translated">このような場合は、カスタムインストーラを作成して特定のロジックを処理することを検討してください。</target>
        </trans-unit>
        <trans-unit id="170a8dbc9b4f77d0bd1614591599fbf7c96848eb" translate="yes" xml:space="preserve">
          <source>In these cases you could consider creating a plugin to handle your specific logic.</source>
          <target state="translated">このような場合は、特定のロジックを処理するためのプラグインを作成することを検討してみてください。</target>
        </trans-unit>
        <trans-unit id="793ba49616bce296e29c482a71377cbea235e2c5" translate="yes" xml:space="preserve">
          <source>In this case the project name is &lt;code&gt;acme/hello-world&lt;/code&gt;, where &lt;code&gt;acme&lt;/code&gt; is the vendor name. Supplying a vendor name is mandatory.</source>
          <target state="translated">この場合、プロジェクト名は &lt;code&gt;acme/hello-world&lt;/code&gt; です 。ここで、 &lt;code&gt;acme&lt;/code&gt; はベンダー名です。 ベンダー名の指定は必須です。</target>
        </trans-unit>
        <trans-unit id="c717d3566ef7080f16efa4b5f212a62fcb3d59ad" translate="yes" xml:space="preserve">
          <source>In this case the short name of the channel is &lt;code&gt;pear2&lt;/code&gt;, so the &lt;code&gt;PEAR2_HTTP_Request&lt;/code&gt; package name becomes &lt;code&gt;pear-pear2/PEAR2_HTTP_Request&lt;/code&gt;.</source>
          <target state="translated">この場合、チャネルの短い名前は &lt;code&gt;pear2&lt;/code&gt; なので、 &lt;code&gt;PEAR2_HTTP_Request&lt;/code&gt; パッケージ名は &lt;code&gt;pear-pear2/PEAR2_HTTP_Request&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="b496889f750f4195a099872e2f6e1aa87dff2efa" translate="yes" xml:space="preserve">
          <source>In this case, Composer will make &lt;code&gt;vendor/my-vendor/project-a/bin/project-a-bin&lt;/code&gt; available as &lt;code&gt;vendor/bin/project-a-bin&lt;/code&gt;. On a Unix-like platform this is accomplished by creating a symlink.</source>
          <target state="translated">この場合、Composerは &lt;code&gt;vendor/my-vendor/project-a/bin/project-a-bin&lt;/code&gt; を &lt;code&gt;vendor/bin/project-a-bin&lt;/code&gt; として利用できるようにします。 Unixライクなプラットフォームでは、これはシンボリックリンクを作成することによって実現されます。</target>
        </trans-unit>
        <trans-unit id="a963ad558749f4cae6f3cb3300dfe673677907fc" translate="yes" xml:space="preserve">
          <source>In this case, the PHP &lt;code&gt;memory_limit&lt;/code&gt; should be increased.</source>
          <target state="translated">この場合、PHPの &lt;code&gt;memory_limit&lt;/code&gt; を増やす必要があります。</target>
        </trans-unit>
        <trans-unit id="324274df727baf36f83a94f18b8f85c487c1d51b" translate="yes" xml:space="preserve">
          <source>In your projects all you need to add now is your own composer repository using the &lt;code&gt;packages.example.org&lt;/code&gt; as URL, then you can require your private packages and everything should work smoothly. You don't need to copy all your repositories in every project anymore. Only that one unique repository that will update itself.</source>
          <target state="translated">プロジェクトで追加する必要があるのは、 &lt;code&gt;packages.example.org&lt;/code&gt; をURLとして使用する独自のコンポーザーリポジトリだけです。プライベートパッケージを要求すれば、すべてがスムーズに機能するはずです。 すべてのプロジェクトのすべてのリポジトリをコピーする必要はもうありません。 自身を更新する唯一のユニークなリポジトリ。</target>
        </trans-unit>
        <trans-unit id="58421e47121f093aa54aa3849421fb584b427a27" translate="yes" xml:space="preserve">
          <source>Including that file will also return the autoloader instance, so you can store the return value of the include call in a variable and add more namespaces. This can be useful for autoloading classes in a test suite, for example.</source>
          <target state="translated">そのファイルをインクルードするとオートローダーのインスタンスも返されるので、インクルード呼び出しの戻り値を変数に格納して、さらに名前空間を追加することができます。これは、例えばテストスイート内のクラスをオートローディングするのに便利です。</target>
        </trans-unit>
        <trans-unit id="4791f829db2b3e39aa06b77d019786a191286558" translate="yes" xml:space="preserve">
          <source>Inclusive set of versions. Partial versions on the right include are completed with a wildcard. For example &lt;code&gt;1.0 - 2.0&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.0.0 &amp;lt;2.1&lt;/code&gt; as the &lt;code&gt;2.0&lt;/code&gt; becomes &lt;code&gt;2.0.*&lt;/code&gt;. On the other hand &lt;code&gt;1.0.0 - 2.1.0&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.0.0 &amp;lt;=2.1.0&lt;/code&gt;.</source>
          <target state="translated">バージョンの包括的なセット。 右側のincludeの部分的なバージョンは、ワイルドカードで補完されています。 たとえば、 &lt;code&gt;2.0&lt;/code&gt; が &lt;code&gt;2.0.*&lt;/code&gt; なるため、 &lt;code&gt;&amp;gt;=1.0.0 &amp;lt;2.1&lt;/code&gt; と同等です。 一方、 &lt;code&gt;1.0.0 - 2.1.0&lt;/code&gt; は &lt;code&gt;&amp;gt;=1.0.0 &amp;lt;=2.1.0&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="f69204db48cfe1d2b13b7af95c6b1b35fb75fdf3" translate="yes" xml:space="preserve">
          <source>Indicates whether this package has been abandoned.</source>
          <target state="translated">このパッケージが放棄されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="e10dd585e5e2afa8bd14cac56f251d2de6fe174d" translate="yes" xml:space="preserve">
          <source>Installation - Linux / Unix / macOS</source>
          <target state="translated">インストール-Linux Unix macOS</target>
        </trans-unit>
        <trans-unit id="76837ac73a7ca41aaf9bcf6e335659ac5b4eb0d2" translate="yes" xml:space="preserve">
          <source>Installation - Windows</source>
          <target state="translated">インストール-Windows</target>
        </trans-unit>
        <trans-unit id="f1e881a2224fe5122792e10d0ad077069f2a07cc" translate="yes" xml:space="preserve">
          <source>Installer Events</source>
          <target state="translated">インストーラのイベント</target>
        </trans-unit>
        <trans-unit id="d5bb2ef38f6014141846b3e9d556916c8a004edd" translate="yes" xml:space="preserve">
          <source>Installer Events: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Installer/InstallerEvent.html&quot;&gt;&lt;code&gt;Composer\Installer\InstallerEvent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">インストーラーイベント： &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Installer/InstallerEvent.html&quot;&gt; &lt;code&gt;Composer\Installer\InstallerEvent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2185bce3af0f7dfafcbb1cdcdd31a0ce17c7d717" translate="yes" xml:space="preserve">
          <source>Installing dependencies</source>
          <target state="translated">依存関係のインストール</target>
        </trans-unit>
        <trans-unit id="6e4592e8c95b8b5a452392334a783ccb721f727f" translate="yes" xml:space="preserve">
          <source>Installing with &lt;code&gt;composer.lock&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;composer.lock&lt;/code&gt; を使用したインストール</target>
        </trans-unit>
        <trans-unit id="2ffb7489b0b00521f207ccc72e71117f8946745b" translate="yes" xml:space="preserve">
          <source>Installing without &lt;code&gt;composer.lock&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;composer.lock&lt;/code&gt; なしでインストールする</target>
        </trans-unit>
        <trans-unit id="fb948f9b97509ab4b83d0202b63cd87f44f32873" translate="yes" xml:space="preserve">
          <source>Instead of default fallback strategy you can force to use symlink with &lt;code&gt;&quot;symlink&quot;: true&lt;/code&gt; or mirroring with &lt;code&gt;&quot;symlink&quot;: false&lt;/code&gt; option. Forcing mirroring can be useful when deploying or generating package from a monolithic repository.</source>
          <target state="translated">デフォルトのフォールバック戦略の代わりに、 &lt;code&gt;&quot;symlink&quot;: true&lt;/code&gt; または &lt;code&gt;&quot;symlink&quot;: false&lt;/code&gt; オプションを使用したミラーリングを強制的に使用できます。 ミラーリングの強制は、モノリシックリポジトリからパッケージを展開または生成するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="3089277c7bf15c0f5a062881095ff5217e66742e" translate="yes" xml:space="preserve">
          <source>Internally</source>
          <target state="translated">Internally</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="a961ea723a682c40aadfeddfdbe09d83b7f6ddff" translate="yes" xml:space="preserve">
          <source>It can be boolean or a package name/URL pointing to a recommended alternative.</source>
          <target state="translated">ブール値か、推奨される代替品を指すパッケージ名URLを指定します。</target>
        </trans-unit>
        <trans-unit id="75731472d443051a88f8e3db5c6bb1a963dfc837" translate="yes" xml:space="preserve">
          <source>It instructs Composer to install the package's binaries to &lt;code&gt;vendor/bin&lt;/code&gt; for any project that &lt;strong&gt;depends&lt;/strong&gt; on that project.</source>
          <target state="translated">それ&lt;strong&gt;は&lt;/strong&gt; 、そのプロジェクトに&lt;strong&gt;依存する&lt;/strong&gt;すべてのプロジェクトの &lt;code&gt;vendor/bin&lt;/code&gt; パッケージのバイナリをインストールするようにComposerに指示します。</target>
        </trans-unit>
        <trans-unit id="ebd9d8878f4e1d5e19cd618e1e3280c80110bef0" translate="yes" xml:space="preserve">
          <source>It is also possible to inline-alias a package constraint so that it matches a constraint that it otherwise would not. For more information &lt;a href=&quot;articles/aliases.md&quot;&gt;see the aliases article&lt;/a&gt;.</source>
          <target state="translated">また、パッケージ制約をインラインエイリアスして、他の方法では一致しない制約と一致させることもできます。 詳細について&lt;a href=&quot;articles/aliases.md&quot;&gt;は、エイリアスの記事を参照してください&lt;/a&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1701bb7c05ef8c8846ba5dbd9b146867982796b" translate="yes" xml:space="preserve">
          <source>It is also possible to run the command without params in a directory with an existing &lt;code&gt;composer.json&lt;/code&gt; file to bootstrap a project.</source>
          <target state="translated">プロジェクトをブートストラップする既存の &lt;code&gt;composer.json&lt;/code&gt; ファイルがあるディレクトリで、paramsなしでコマンドを実行することもできます。</target>
        </trans-unit>
        <trans-unit id="812c26e53095ee59b36e6192646c8eadab90da06" translate="yes" xml:space="preserve">
          <source>It is defined by adding the &lt;code&gt;bin&lt;/code&gt; key to a project's &lt;code&gt;composer.json&lt;/code&gt;. It is specified as an array of files so multiple binaries can be added for any given project.</source>
          <target state="translated">これは、プロジェクトの &lt;code&gt;composer.json&lt;/code&gt; に &lt;code&gt;bin&lt;/code&gt; キーを追加することによって定義されます。 これはファイルの配列として指定されるため、任意のプロジェクトに複数のバイナリを追加できます。</target>
        </trans-unit>
        <trans-unit id="f972ca266357af82698d3ce7ec46d2e7b1589618" translate="yes" xml:space="preserve">
          <source>It is possible to alias PEAR channel packages with a custom vendor name.</source>
          <target state="translated">PEAR チャネルパッケージをカスタムベンダ名でエイリアスすることができます。</target>
        </trans-unit>
        <trans-unit id="bce0e2f917ce9777e7806b5d4a2c61107711704c" translate="yes" xml:space="preserve">
          <source>It is possible to install packages from any PEAR channel by using the &lt;code&gt;pear&lt;/code&gt; repository. Composer will prefix all package names with &lt;code&gt;pear-{channelName}/&lt;/code&gt; to avoid conflicts. All packages are also aliased with prefix &lt;code&gt;pear-{channelAlias}/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pear&lt;/code&gt; リポジトリを使用して、任意のPEARチャネルからパッケージをインストールできます。 Composerは、競合を回避するために、すべてのパッケージ名の前に &lt;code&gt;pear-{channelName}/&lt;/code&gt; を付けます。 すべてのパッケージには、プレフィックス &lt;code&gt;pear-{channelAlias}/&lt;/code&gt; のエイリアスも付けられます。</target>
        </trans-unit>
        <trans-unit id="20da6f1f5d601bd4c92b807a8c8d91dbc3566e9d" translate="yes" xml:space="preserve">
          <source>It is possible to make satis automatically resolve and add all dependencies for your projects. This can be used with the Downloads functionality to have a complete local mirror of packages. Add the following to your &lt;code&gt;satis.json&lt;/code&gt;:</source>
          <target state="translated">satisにプロジェクトのすべての依存関係を自動的に解決および追加させることができます。 これをダウンロード機能と併用して、パッケージの完全なローカルミラーを作成できます。 以下を &lt;code&gt;satis.json&lt;/code&gt; に追加してください：</target>
        </trans-unit>
        <trans-unit id="ca67ab1d1939601285ad03b6ac304cb65650bfc6" translate="yes" xml:space="preserve">
          <source>It may include any of the other fields specified in the &lt;a href=&quot;04-schema.md&quot;&gt;schema&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;04-schema.md&quot;&gt;スキーマで&lt;/a&gt;指定されている他のフィールドを含めることができます 。</target>
        </trans-unit>
        <trans-unit id="f6dce6ad8bf561cb3edb056891527e20b965d26a" translate="yes" xml:space="preserve">
          <source>It's also possible to set the global environment variable to disable the timeout of all following scripts in the current terminal environment:</source>
          <target state="translated">また、グローバル環境変数を設定して、現在のターミナル環境で以下のすべてのスクリプトのタイムアウトを無効にすることも可能です。</target>
        </trans-unit>
        <trans-unit id="1a5fdc02561b421ddd2832ed52db04d9182f02fd" translate="yes" xml:space="preserve">
          <source>JSON Schema</source>
          <target state="translated">JSON スキーマ</target>
        </trans-unit>
        <trans-unit id="56063a235ba093ec4ad8756556e3c89fce47c420" translate="yes" xml:space="preserve">
          <source>JSON schema</source>
          <target state="translated">JSONスキーマ</target>
        </trans-unit>
        <trans-unit id="6ccc57a8ec29ead468f4b6e64fdc72971898b7e5" translate="yes" xml:space="preserve">
          <source>LGPL-2.1-only / LGPL-2.1-or-later</source>
          <target state="translated">LGPL-2.1-only LGPL-2.1-or-later</target>
        </trans-unit>
        <trans-unit id="cee59ed970b6f0f108ee08f93c956dbacca4badc" translate="yes" xml:space="preserve">
          <source>LGPL-3.0-only / LGPL-3.0-or-later</source>
          <target state="translated">LGPL-3.0のみ LGPL-3.0-or-later</target>
        </trans-unit>
        <trans-unit id="04a80eef404b788c2ac3096db7191dcd5c52bde5" translate="yes" xml:space="preserve">
          <source>Leading tildes are expanded to the current user's home folder, and environment variables are parsed in both Windows and Linux/Mac notations. For example &lt;code&gt;~/git/mypackage&lt;/code&gt; will automatically load the mypackage clone from &lt;code&gt;/home/&amp;lt;username&amp;gt;/git/mypackage&lt;/code&gt;, equivalent to &lt;code&gt;$HOME/git/mypackage&lt;/code&gt; or &lt;code&gt;%USERPROFILE%/git/mypackage&lt;/code&gt;.</source>
          <target state="translated">先頭のチルダは現在のユーザーのホームフォルダに展開され、環境変数はWindowsとLinux / Macの両方の表記で解析されます。 たとえば、 &lt;code&gt;~/git/mypackage&lt;/code&gt; は、 &lt;code&gt;/home/&amp;lt;username&amp;gt;/git/mypackage&lt;/code&gt; からmypackage cloneを自動的にロードします。これは、 &lt;code&gt;$HOME/git/mypackage&lt;/code&gt; または &lt;code&gt;%USERPROFILE%/git/mypackage&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="6115eb8222524faf94a1fd28058cb3eed07fe3ff" translate="yes" xml:space="preserve">
          <source>Let's say your project depends on package A, which in turn depends on a specific version of package B (say 0.1). But you need a different version of said package B (say 0.11).</source>
          <target state="translated">例えば、あなたのプロジェクトがパッケージ A に依存していて、それが特定のバージョンのパッケージ B (例えば 0.1)に依存しているとします。しかし、あなたは異なるバージョンのパッケージ B (例えば 0.11)を必要としています。</target>
        </trans-unit>
        <trans-unit id="d150eb83739732c4183bc14cdcc3456ee159d0e2" translate="yes" xml:space="preserve">
          <source>Lets you fake platform packages (PHP and extensions) so that you can emulate a production env or define your target platform in the config. Example: &lt;code&gt;{&quot;php&quot;: &quot;7.0.3&quot;, &quot;ext-something&quot;: &quot;4.0.3&quot;}&lt;/code&gt;.</source>
          <target state="translated">プラットフォームパッケージ（PHPと拡張機能）を偽造して、本番環境の環境をエミュレートしたり、構成でターゲットプラットフォームを定義したりできるようにします。 例： &lt;code&gt;{&quot;php&quot;: &quot;7.0.3&quot;, &quot;ext-something&quot;: &quot;4.0.3&quot;}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="27c968e6692b41bf6e1a241b870dc41ff1a51b17" translate="yes" xml:space="preserve">
          <source>Libraries</source>
          <target state="translated">Libraries</target>
        </trans-unit>
        <trans-unit id="bfa04fb368a5e0983364490b2e0a25c4b7186a60" translate="yes" xml:space="preserve">
          <source>Library Versioning</source>
          <target state="translated">ライブラリのバージョン管理</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MITライセンスに基づいてライセンスされています。</target>
        </trans-unit>
        <trans-unit id="92852867281c5fe7ebe05f70897286a34e6ea878" translate="yes" xml:space="preserve">
          <source>List of other packages that are provided by this package. This is mostly useful for common interfaces. A package could depend on some virtual &lt;code&gt;logger&lt;/code&gt; package, any library that implements this logger interface would simply list it in &lt;code&gt;provide&lt;/code&gt;.</source>
          <target state="translated">このパッケージによって提供される他のパッケージのリスト。 これは主に一般的なインターフェースに役立ちます。 パッケージは、いくつかの仮想 &lt;code&gt;logger&lt;/code&gt; パッケージに依存している可能性があります。このロガーインターフェイスを実装するライブラリは、単にそれを &lt;code&gt;provide&lt;/code&gt; リストします 。</target>
        </trans-unit>
        <trans-unit id="9964d59d546e2e351e6b893948b041ecb483b85c" translate="yes" xml:space="preserve">
          <source>Lists all packages suggested by currently installed set of packages. You can optionally pass one or multiple package names in the format of &lt;code&gt;vendor/package&lt;/code&gt; to limit output to suggestions made by those packages only.</source>
          <target state="translated">現在インストールされているパッケージのセットによって提案されたすべてのパッケージを一覧表示します。 オプションで、 &lt;code&gt;vendor/package&lt;/code&gt; 形式で1つまたは複数のパッケージ名を渡して、それらのパッケージのみが行った提案に出力を制限できます。</target>
        </trans-unit>
        <trans-unit id="67693068fa45e351323ce3ae6696a59d9281155f" translate="yes" xml:space="preserve">
          <source>Lists packages required by this package. The package will not be installed unless those requirements can be met.</source>
          <target state="translated">このパッケージが必要とするパッケージを一覧表示します。これらの要件を満たすことができない限り、パッケージはインストールされません。</target>
        </trans-unit>
        <trans-unit id="57a8af45ed1f93453f445887172684b97b1e5d0c" translate="yes" xml:space="preserve">
          <source>Lists packages required for developing this package, or running tests, etc. The dev requirements of the root package are installed by default. Both &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; support the &lt;code&gt;--no-dev&lt;/code&gt; option that prevents dev dependencies from being installed.</source>
          <target state="translated">このパッケージの開発やテストの実行などに必要なパッケージをリストします。ルートパッケージの開発要件はデフォルトでインストールされます。 &lt;code&gt;install&lt;/code&gt; と &lt;code&gt;update&lt;/code&gt; 両方で、dev依存関係がインストールされないようにする &lt;code&gt;--no-dev&lt;/code&gt; オプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="7c9efbb6b043ec1ede887fd2eab1b41e770a97af" translate="yes" xml:space="preserve">
          <source>Lists packages that are replaced by this package. This allows you to fork a package, publish it under a different name with its own version numbers, while packages requiring the original package continue to work with your fork because it replaces the original package.</source>
          <target state="translated">このパッケージで置き換えられたパッケージを一覧表示します。これにより、パッケージをフォークして独自のバージョン番号で別の名前で公開し、 オリジナルのパッケージを必要とするパッケージはあなたのフォークで動作し続けることができます。</target>
        </trans-unit>
        <trans-unit id="2424c6a9d887557b6e5c88b7812c8eda4c6edee6" translate="yes" xml:space="preserve">
          <source>Lists packages that conflict with this version of this package. They will not be allowed to be installed together with your package.</source>
          <target state="translated">このバージョンのパッケージと競合するパッケージを一覧表示します。これらのパッケージは、あなたのパッケージと一緒にインストールすることはできません。</target>
        </trans-unit>
        <trans-unit id="b290639a378efa8d0461f9052cc8455a8022f8fa" translate="yes" xml:space="preserve">
          <source>Lists the name, version and license of every package installed. Use &lt;code&gt;--format=json&lt;/code&gt; to get machine readable output.</source>
          <target state="translated">インストールされているすべてのパッケージの名前、バージョン、ライセンスを一覧表示します。 マシンが読み取り可能な出力を取得するには、 &lt;code&gt;--format=json&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3bffbc8e6cfafc13c95a1ceacb012f9aad3c63b0" translate="yes" xml:space="preserve">
          <source>Loading a package from a VCS repository</source>
          <target state="translated">VCS リポジトリからパッケージをロードする</target>
        </trans-unit>
        <trans-unit id="e93141d83b8039749e1ed013e1831599e1264246" translate="yes" xml:space="preserve">
          <source>Locally</source>
          <target state="translated">Locally</target>
        </trans-unit>
        <trans-unit id="e398e289ecf1e6bf36e8b61d84c66dd67ec4b4bd" translate="yes" xml:space="preserve">
          <source>Location of Certificate Authority file on local filesystem. In PHP 5.6+ you should rather set this via openssl.cafile in php.ini, although PHP 5.6+ should be able to detect your system CA file automatically.</source>
          <target state="translated">ローカルファイルシステム上の認証局ファイルの場所。PHP 5.6+では、この設定はphp.iniのopenssl.cafileで行うべきですが、PHP 5.6+ではシステムのCAファイルを自動的に検出できるはずです。</target>
        </trans-unit>
        <trans-unit id="f1310cac3ef8c63b05825909f7fce70ea9e456dd" translate="yes" xml:space="preserve">
          <source>Lock file</source>
          <target state="translated">ロックファイル</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">MIT</target>
        </trans-unit>
        <trans-unit id="f9965c47af74ea6d77810c86b1fdead400609d1f" translate="yes" xml:space="preserve">
          <source>Mailing lists for &lt;a href=&quot;https://groups.google.com/group/composer-users&quot;&gt;user support&lt;/a&gt; and &lt;a href=&quot;https://groups.google.com/group/composer-dev&quot;&gt;development&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://groups.google.com/group/composer-users&quot;&gt;ユーザーサポート&lt;/a&gt;と&lt;a href=&quot;https://groups.google.com/group/composer-dev&quot;&gt;開発の&lt;/a&gt;ためのメーリングリスト。</target>
        </trans-unit>
        <trans-unit id="09afead4c4b37b59df1a8776647a9a30ed1c4fd2" translate="yes" xml:space="preserve">
          <source>Make sure you have no problems with your setup by running the installer's checks via &lt;code&gt;curl -sS https://getcomposer.org/installer | php -- --check&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;curl -sS https://getcomposer.org/installer | php -- --check&lt;/code&gt; 介してインストーラーのチェックを実行し、セットアップに問題がないことを確認してください。 php---check 。</target>
        </trans-unit>
        <trans-unit id="a7dbbb4172263077674577b2683165b09aa78cdb" translate="yes" xml:space="preserve">
          <source>Manual Installation</source>
          <target state="translated">マニュアルインストール</target>
        </trans-unit>
        <trans-unit id="1c3f45515cc28f74919408ffa9ca1a39a38b78f1" translate="yes" xml:space="preserve">
          <source>Memory limit errors</source>
          <target state="translated">メモリ制限エラー</target>
        </trans-unit>
        <trans-unit id="8752821c95f2b75d4dc8449c22b28ade8698a073" translate="yes" xml:space="preserve">
          <source>Minimum Stability</source>
          <target state="translated">最小安定性</target>
        </trans-unit>
        <trans-unit id="3ea0c857ba165aef26712171a2a706b53b8a0468" translate="yes" xml:space="preserve">
          <source>Modifying Extra Values</source>
          <target state="translated">余分な値を修正する</target>
        </trans-unit>
        <trans-unit id="91e2a3d97529d7420f188c7aaf45493ca9ec4280" translate="yes" xml:space="preserve">
          <source>Modifying Repositories</source>
          <target state="translated">リポジトリーの変更</target>
        </trans-unit>
        <trans-unit id="f76fee3286f84871a39a5e5f7f2503a3abf7f498" translate="yes" xml:space="preserve">
          <source>Must be in &lt;code&gt;YYYY-MM-DD&lt;/code&gt; or &lt;code&gt;YYYY-MM-DD HH:MM:SS&lt;/code&gt; format.</source>
          <target state="translated">&lt;code&gt;YYYY-MM-DD&lt;/code&gt; または &lt;code&gt;YYYY-MM-DD HH:MM:SS&lt;/code&gt; 形式である必要があります。</target>
        </trans-unit>
        <trans-unit id="4025b616f677202a7be84eb179a61bc894d1cd18" translate="yes" xml:space="preserve">
          <source>Namespace prefixes must end in &lt;code&gt;\\&lt;/code&gt; to avoid conflicts between similar prefixes. For example &lt;code&gt;Foo&lt;/code&gt; would match classes in the &lt;code&gt;FooBar&lt;/code&gt; namespace so the trailing backslashes solve the problem: &lt;code&gt;Foo\\&lt;/code&gt; and &lt;code&gt;FooBar\\&lt;/code&gt; are distinct.</source>
          <target state="translated">名前空間の接頭辞は、類似した接頭辞間の競合を回避するために、 &lt;code&gt;\\&lt;/code&gt; で終了する必要があります。 たとえば、 &lt;code&gt;Foo&lt;/code&gt; は &lt;code&gt;FooBar&lt;/code&gt; 名前空間のクラスに一致するため、末尾のバックスラッシュが問題を解決します &lt;code&gt;FooBar\\&lt;/code&gt; とFooBar \\は区別されます。</target>
        </trans-unit>
        <trans-unit id="fc3e4b461b8b1cf9a32915e44b9c1d726c407755" translate="yes" xml:space="preserve">
          <source>Need to override a package version</source>
          <target state="translated">パッケージのバージョンを上書きする必要がある</target>
        </trans-unit>
        <trans-unit id="28ee11c63fdc46b8c878bc353cf5dfd2cbbb147d" translate="yes" xml:space="preserve">
          <source>Next Significant Release Operators</source>
          <target state="translated">次の重要なリリースオペレータ</target>
        </trans-unit>
        <trans-unit id="39c736c92084eab192eb0796662a0f1c7f600808" translate="yes" xml:space="preserve">
          <source>Normally, Composer deals with tags (as opposed to branches -- if you don't know what this means, read up on &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control#Common_vocabulary&quot;&gt;version control systems&lt;/a&gt;). When you write a version constraint, it may reference a specific tag (e.g., &lt;code&gt;1.1&lt;/code&gt;) or it may reference a valid range of tags (e.g., &lt;code&gt;&amp;gt;=1.1 &amp;lt;2.0&lt;/code&gt;, or &lt;code&gt;~4.0&lt;/code&gt;). To resolve these constraints, Composer first asks the VCS to list all available tags, then creates an internal list of available versions based on these tags. In the above example, composer's internal list includes versions &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;1.0.1&lt;/code&gt;, &lt;code&gt;1.0.2&lt;/code&gt;, the beta release of &lt;code&gt;1.1&lt;/code&gt;, the first and second release candidates of &lt;code&gt;1.1&lt;/code&gt;, the final release version &lt;code&gt;1.1&lt;/code&gt;, etc.... (Note that Composer automatically removes the 'v' prefix in the actual tagname to get a valid final version number.)</source>
          <target state="translated">通常、Composerはタグを扱います（ブランチではなく、これが何を意味するのかわからない場合は、 &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control#Common_vocabulary&quot;&gt;バージョン管理システムを&lt;/a&gt;読んでください）。 バージョン制約を作成する場合、特定のタグ（例： &lt;code&gt;1.1&lt;/code&gt; ）を参照するか、有効な範囲のタグ（例： &lt;code&gt;&amp;gt;=1.1 &amp;lt;2.0&lt;/code&gt; 、または &lt;code&gt;~4.0&lt;/code&gt; ）を参照する場合があります。 これらの制約を解決するために、ComposerはまずVCSに使用可能なすべてのタグをリストするように要求し、次にこれらのタグに基づいて使用可能なバージョンの内部リストを作成します。 上記の例では、composerの内部リストには、バージョン &lt;code&gt;1.0.2&lt;/code&gt; のベータリリース、 &lt;code&gt;1.1&lt;/code&gt; の最初と2番目のリリース候補、最終リリースバージョン &lt;code&gt;1.1&lt;/code&gt; などが含まれています...（Composer実際のタグ名の「v」プレフィックスを自動的に削除して、有効な最終バージョン番号を取得します。）</target>
        </trans-unit>
        <trans-unit id="66ec2e93672c49b92fb864b93b03dba5a399c1ee" translate="yes" xml:space="preserve">
          <source>Note that all packages set as abandoned in their own &lt;code&gt;composer.json&lt;/code&gt; file will be marked abandoned as well.</source>
          <target state="translated">独自の &lt;code&gt;composer.json&lt;/code&gt; ファイルで破棄として設定されたすべてのパッケージにも、破棄のマークが付けられることに注意してください。</target>
        </trans-unit>
        <trans-unit id="21967d75d7258073c7e7e8056ae0005a275d4501" translate="yes" xml:space="preserve">
          <source>Note that if your private packages are hosted on GitHub, your server should have an ssh key that gives it access to those packages, and then you should add the &lt;code&gt;--no-interaction&lt;/code&gt; (or &lt;code&gt;-n&lt;/code&gt;) flag to the command to make sure it falls back to ssh key authentication instead of prompting for a password. This is also a good trick for continuous integration servers.</source>
          <target state="translated">プライベートパッケージがGitHubでホストされている場合、サーバーにはそれらのパッケージへのアクセスを提供するsshキーが必要です。次に、コマンドに &lt;code&gt;--no-interaction&lt;/code&gt; （または &lt;code&gt;-n&lt;/code&gt; ）フラグを追加して、パスワードを要求する代わりに、sshキー認証にフォールバックします。 これは、継続的インテグレーションサーバーにとっても良いトリックです。</target>
        </trans-unit>
        <trans-unit id="eb8ff490b71790f9c09f4f22c1a128673037a74b" translate="yes" xml:space="preserve">
          <source>Note that this will still need to pull and scan all of your VCS repositories because any VCS repository might contain (on any branch) one of the selected packages.</source>
          <target state="translated">どの VCS リポジトリにも (どのブランチにも)選択したパッケージの 1 つが含まれている可能性があるため、これはすべての VCS リポジトリをプルしてスキャンする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f01bc369850f21ecb0b302f70e46cf0c42088b86" translate="yes" xml:space="preserve">
          <source>Note that when specifying ranges like &lt;code&gt;&amp;lt;1.0 &amp;gt;=1.1&lt;/code&gt; in a &lt;code&gt;conflict&lt;/code&gt; link, this will state a conflict with all versions that are less than 1.0 &lt;em&gt;and&lt;/em&gt; equal or newer than 1.1 at the same time, which is probably not what you want. You probably want to go for &lt;code&gt;&amp;lt;1.0 || &amp;gt;=1.1&lt;/code&gt; in this case.</source>
          <target state="translated">&lt;code&gt;conflict&lt;/code&gt; リンクで &lt;code&gt;&amp;lt;1.0 &amp;gt;=1.1&lt;/code&gt; ような範囲を指定する&lt;em&gt;と&lt;/em&gt; 、1.0未満かつ1.1以上のすべてのバージョンで同時に競合が発生することに注意してください。 あなたはおそらく &lt;code&gt;&amp;lt;1.0 || &amp;gt;=1.1&lt;/code&gt; に行きたいです|| この場合、 &amp;gt; = 1.1 。</target>
        </trans-unit>
        <trans-unit id="349b8b2d44121046ce03f6a242ab3742d620205a" translate="yes" xml:space="preserve">
          <source>Note that you can also specify platform requirements, for example to check whether you can upgrade your server to PHP 8.0:</source>
          <target state="translated">プラットフォームの要件を指定することもできることに注意しましょう。 例えば、サーバーを PHP 8.0 にアップグレードできるかどうかを確認するなどです。</target>
        </trans-unit>
        <trans-unit id="f8d858dc9f61c771e304c17678cf573f732e62b5" translate="yes" xml:space="preserve">
          <source>Note that you should not rename the package unless you really intend to fork it in the long term, and completely move away from the original package. Composer will correctly pick your package over the original one since the custom repository has priority over packagist. If you want to rename the package, you should do so in the default (often master) branch and not in a feature branch, since the package name is taken from the default branch.</source>
          <target state="translated">長期的にフォークするつもりがない限り、パッケージの名前を変更してはいけないことに注意してください。カスタムリポジトリは packagist よりも優先されるので、Composer は元のパッケージよりもあなたのパッケージを正しく選択します。パッケージの名前を変更したい場合は、機能ブランチではなくデフォルト (マスター)ブランチで行うようにしてください。</target>
        </trans-unit>
        <trans-unit id="65627b96ba23d8784652148c698d095d8aa281c4" translate="yes" xml:space="preserve">
          <source>Note: This can not be combined with Level 2/A optimizations. You have to choose one as they address the same issue in different ways.</source>
          <target state="translated">注意:これはレベル2Aの最適化と組み合わせることはできません。同じ問題に異なる方法で対処しているので、どちらかを選択しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a5ff623c6e03990dd6b7700d8d7c9f6a47910f9d" translate="yes" xml:space="preserve">
          <source>Note: This can not be combined with Level 2/B optimizations. You have to choose one as they address the same issue in different ways.</source>
          <target state="translated">注意:これはレベル2Bの最適化と組み合わせることはできません。同じ問題に異なる方法で対処しているので、どちらかを選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="387af04d85e51dc7c42b167c7882a89f1e6dcdb8" translate="yes" xml:space="preserve">
          <source>Now Composer should install/update without asking for authentication.</source>
          <target state="translated">これで、Composer は認証を求めずにインストールすることができるようになりました。</target>
        </trans-unit>
        <trans-unit id="9263c718ae240bde8332cbe309524bedf436eeb2" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;composer&lt;/code&gt; in order to run Composer instead of &lt;code&gt;php composer.phar&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;php composer.phar&lt;/code&gt; の代わりにComposerを実行するために &lt;code&gt;composer&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="b4e7cc9974d34dfe545130531200e0ad3cd778a8" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;php bin/composer&lt;/code&gt; in order to run Composer.</source>
          <target state="translated">Composerを実行するために、 &lt;code&gt;php bin/composer&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="7e592a51014fd9c1cdc6d0842c0a3d7115a7ee5d" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;php composer.phar&lt;/code&gt; in order to run Composer.</source>
          <target state="translated">Composerを実行するために、 &lt;code&gt;php composer.phar&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="2fab28bb5852f336cde499074da143417cfa4131" translate="yes" xml:space="preserve">
          <source>Now that you have an idea of how Composer sees versions, let's talk about how to specify version constraints for your project dependencies.</source>
          <target state="translated">これで Composer のバージョンの見方がわかったので、プロジェクトの依存関係にバージョン制約を指定する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="3fe810793472cdd189145b4ace481ad873c4b2f7" translate="yes" xml:space="preserve">
          <source>Now that you've installed Composer, you are ready to use it! Head on over to the next chapter for a short and simple demonstration.</source>
          <target state="translated">これで、Composer をインストールした後は、Composer を使用する準備が整いました。次の章では、簡単なデモを紹介します。</target>
        </trans-unit>
        <trans-unit id="2bd3a570efb4d8c629a0ee8a6d69ac026d9eacac" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;custom-plugin-command&lt;/code&gt; is available alongside Composer commands.</source>
          <target state="translated">これで、 &lt;code&gt;custom-plugin-command&lt;/code&gt; がComposerコマンドと一緒に使用できるようになりました。</target>
        </trans-unit>
        <trans-unit id="e9e6eca78d466b159aa78053709e4ad719a70c6b" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;php-cs-fixer&lt;/code&gt; binary is available globally. Make sure your global &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;vendor binaries&lt;/a&gt; directory is in your &lt;code&gt;$PATH&lt;/code&gt; environment variable, you can get its location with the following command :</source>
          <target state="translated">&lt;code&gt;php-cs-fixer&lt;/code&gt; バイナリがグローバルに利用可能になりました。 グローバル&lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;ベンダーのバイナリ&lt;/a&gt;ディレクトリが &lt;code&gt;$PATH&lt;/code&gt; 環境変数にあることを確認してください。次のコマンドでその場所を取得できます。</target>
        </trans-unit>
        <trans-unit id="1476aa89b57099f5cad68b9f9cf684fc7a4f638e" translate="yes" xml:space="preserve">
          <source>Now we need to tell the blog app where to find the &lt;code&gt;hello-world&lt;/code&gt; dependency. We do this by adding a package repository specification to the blog's &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;hello-world&lt;/code&gt; 依存関係を見つける場所をブログアプリに伝える必要があります。 これを行うには、ブログの &lt;code&gt;composer.json&lt;/code&gt; にパッケージリポジトリの仕様を追加します。</target>
        </trans-unit>
        <trans-unit id="32ce30c25194aacb1ca0174ad92a44bfeacc8bf6" translate="yes" xml:space="preserve">
          <source>Now, to test installing the &lt;code&gt;acme/hello-world&lt;/code&gt; package, we create a new project locally. We will call it &lt;code&gt;acme/blog&lt;/code&gt;. This blog will depend on &lt;code&gt;acme/hello-world&lt;/code&gt;, which in turn depends on &lt;code&gt;monolog/monolog&lt;/code&gt;. We can accomplish this by creating a new &lt;code&gt;blog&lt;/code&gt; directory somewhere, containing a &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;acme/hello-world&lt;/code&gt; パッケージのインストールをテストするために、新しいプロジェクトをローカルで作成します。 これを &lt;code&gt;acme/blog&lt;/code&gt; と呼びます。 このブログは &lt;code&gt;acme/hello-world&lt;/code&gt; に依存し、それは今度は &lt;code&gt;monolog/monolog&lt;/code&gt; に依存します。 これは、 &lt;code&gt;composer.json&lt;/code&gt; を含む新しい &lt;code&gt;blog&lt;/code&gt; ディレクトリをどこかに作成することで実現できます。</target>
        </trans-unit>
        <trans-unit id="4587b368346a74605e0d40b442bfdf26f03c54d5" translate="yes" xml:space="preserve">
          <source>On PHP 5.6+, the class map is also cached in opcache which improves the initialization time greatly. If you make sure opcache is enabled, then the class map should load almost instantly and then class loading is fast.</source>
          <target state="translated">PHP 5.6+では、クラスマップも opcache にキャッシュされるようになり、初期化時間が大幅に改善されました。opcache を有効にしておけば、クラスマップはほぼ瞬時に読み込まれ、クラスの読み込みは高速になります。</target>
        </trans-unit>
        <trans-unit id="ae3c3db6d2a031bc3ad36779c6b3e1cdc1fa2c2a" translate="yes" xml:space="preserve">
          <source>On linux, it seems that running this command helps to make ipv4 traffic have a higher prio than ipv6, which is a better alternative than disabling ipv6 entirely:</source>
          <target state="translated">linuxでは、このコマンドを実行することでipv6よりもipv4のトラフィックの方が高いprioを持つようになり、ipv6を完全に無効にするよりも良い選択肢になるようです。</target>
        </trans-unit>
        <trans-unit id="4cfae3e0baae856236b797ca3f70b48ef9740a1d" translate="yes" xml:space="preserve">
          <source>On windows the only way is to disable ipv6 entirely I am afraid (either in windows or in your home router).</source>
          <target state="translated">Windows上で唯一の方法は、私が恐れている完全にipv6を無効にすることです (Windowsまたはあなたの家のルータのいずれか)。</target>
        </trans-unit>
        <trans-unit id="f4caa5db27c7bbfc7acf3e76298574742a7900d8" translate="yes" xml:space="preserve">
          <source>Once enabled, all downloads (include those from GitHub and BitBucket) will be replaced with a &lt;em&gt;local&lt;/em&gt; version.</source>
          <target state="translated">有効にすると、すべてのダウンロード（GitHubおよびBitBucketからのダウンロードを含む）が&lt;em&gt;ローカル&lt;/em&gt;バージョンに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="3c8ecb0a49d67dfd20f0c2a0a5ec46c497e69fbc" translate="yes" xml:space="preserve">
          <source>Once you have a VCS repository (version control system, e.g. git) containing a &lt;code&gt;composer.json&lt;/code&gt; file, your library is already composer-installable. In this example we will publish the &lt;code&gt;acme/hello-world&lt;/code&gt; library on GitHub under &lt;code&gt;github.com/username/hello-world&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; ファイルを含むVCSリポジトリ（gitなどのバージョン管理システム）を作成すると、ライブラリはすでにcomposerでインストール可能です。 この例では、GitHubの &lt;code&gt;github.com/username/hello-world&lt;/code&gt; の下に &lt;code&gt;acme/hello-world&lt;/code&gt; ライブラリを公開します 。</target>
        </trans-unit>
        <trans-unit id="2be4082b951f4b0fec0a31f2ad0abe0239fad5f2" translate="yes" xml:space="preserve">
          <source>Once you've done this, you run:</source>
          <target state="translated">これができたら、走るんだ。</target>
        </trans-unit>
        <trans-unit id="8041e10b705dc85b075554596c8ea75b31b23844" translate="yes" xml:space="preserve">
          <source>One limitation of this is that you can not call multiple commands in a row like &lt;code&gt;@php install &amp;amp;&amp;amp; @php foo&lt;/code&gt;. You must split them up in a JSON array of commands.</source>
          <target state="translated">これの1つの制限は、 &lt;code&gt;@php install &amp;amp;&amp;amp; @php foo&lt;/code&gt; ように複数のコマンドを続けて呼び出すことができないことです。 それらをコマンドのJSON配列に分割する必要があります。</target>
        </trans-unit>
        <trans-unit id="09f49662c505ecd16b312d8170a9b9c8b2a7367b" translate="yes" xml:space="preserve">
          <source>One limitation of this is that you can not call multiple composer commands in a row like &lt;code&gt;@composer install &amp;amp;&amp;amp; @composer foo&lt;/code&gt;. You must split them up in a JSON array of commands.</source>
          <target state="translated">これの1つの制限は、 &lt;code&gt;@composer install &amp;amp;&amp;amp; @composer foo&lt;/code&gt; ように複数のcomposerコマンドを連続して呼び出すことができないことです。 それらをコマンドのJSON配列に分割する必要があります。</target>
        </trans-unit>
        <trans-unit id="88a71808a6e53aa8ac0a7288de26ea1f6ebb9c6c" translate="yes" xml:space="preserve">
          <source>Only use a custom type if you need custom logic during installation. It is recommended to omit this field and have it default to &lt;code&gt;library&lt;/code&gt;.</source>
          <target state="translated">インストール中にカスタムロジックが必要な場合にのみ、カスタムタイプを使用してください。 このフィールドを省略して、デフォルトで &lt;code&gt;library&lt;/code&gt; にすることをお勧めします 。</target>
        </trans-unit>
        <trans-unit id="5ca29842b6366a87b12b2dfc5e1f8ba42909a4e8" translate="yes" xml:space="preserve">
          <source>Open regedit.</source>
          <target state="translated">regeditを開く。</target>
        </trans-unit>
        <trans-unit id="35064de80e652d77dcded899337a2daf36a48c6a" translate="yes" xml:space="preserve">
          <source>Operation timed out (IPv6 issues)</source>
          <target state="translated">タイムアウト(IPv6の問題</target>
        </trans-unit>
        <trans-unit id="e98a8860ae41df2f164bc4524d7707c1fa03e9cb" translate="yes" xml:space="preserve">
          <source>Optimization Level 1: Class map generation</source>
          <target state="translated">最適化レベル1:クラスマップの生成</target>
        </trans-unit>
        <trans-unit id="b88ba88fdefd32d130d14691f8cd9af2d80e4300" translate="yes" xml:space="preserve">
          <source>Optimization Level 2/A: Authoritative class maps</source>
          <target state="translated">最適化レベル2A:権威あるクラスマップ</target>
        </trans-unit>
        <trans-unit id="374cf1c74f6c9b8b61c87ca0039a7ef67526d9ae" translate="yes" xml:space="preserve">
          <source>Optimization Level 2/B: APCu cache</source>
          <target state="translated">最適化レベル2B:APCuキャッシュ</target>
        </trans-unit>
        <trans-unit id="dcb8c77ab80793f9f37a1a328a3f0f9842d229c7" translate="yes" xml:space="preserve">
          <source>Optimizing the autoloader</source>
          <target state="translated">オートローダーの最適化</target>
        </trans-unit>
        <trans-unit id="ff1450379f5e57929e363c8b2643a47a4501cc42" translate="yes" xml:space="preserve">
          <source>Optional if the package repository can infer the version from somewhere, such as the VCS tag name in the VCS repository. In that case it is also recommended to omit it.</source>
          <target state="translated">VCS リポジトリの VCS タグ名など、パッケージリポジトリがどこかからバージョンを推測できる場合はオプションです。その場合は省略することも推奨されます。</target>
        </trans-unit>
        <trans-unit id="5d05d2dd7183d099b1103019a900abd314417d7a" translate="yes" xml:space="preserve">
          <source>Optional, but highly recommended.</source>
          <target state="translated">オプションですが、非常にお勧めです。</target>
        </trans-unit>
        <trans-unit id="5a6e381addee65c08c090c3ca7506df2c0160b90" translate="yes" xml:space="preserve">
          <source>Optional, but it is highly recommended to supply this. More identifiers are listed at the &lt;a href=&quot;https://spdx.org/licenses/&quot;&gt;SPDX Open Source License Registry&lt;/a&gt;.</source>
          <target state="translated">オプションですが、これを指定することを強くお勧めします。 その他の識別子は、 &lt;a href=&quot;https://spdx.org/licenses/&quot;&gt;SPDXオープンソースライセンスレジストリに&lt;/a&gt;記載されています。</target>
        </trans-unit>
        <trans-unit id="a4149a55fc8e55fc8490190fca6fd327f9a538b3" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="debe6f39ae1c4b3cf5d5b85436ee9ae9c53b497c" translate="yes" xml:space="preserve">
          <source>Options explained</source>
          <target state="translated">オプションの説明</target>
        </trans-unit>
        <trans-unit id="b0a85adf308424bc26224008cff29d5723289ca4" translate="yes" xml:space="preserve">
          <source>Or let composer add it for you with:</source>
          <target state="translated">または、作曲家があなたのためにそれを追加することができます。</target>
        </trans-unit>
        <trans-unit id="920735b63b1ba85cdd5521f7e488d6c682247074" translate="yes" xml:space="preserve">
          <source>Or, you can increase the limit with a command-line argument:</source>
          <target state="translated">または、コマンドライン引数で制限値を増やすことができます。</target>
        </trans-unit>
        <trans-unit id="d291165f3e48fa04de2df661e5577d3237e36a86" translate="yes" xml:space="preserve">
          <source>Other options</source>
          <target state="translated">その他のオプション</target>
        </trans-unit>
        <trans-unit id="7c4bcdf19c07367e085db3c2d0ddc529436b907b" translate="yes" xml:space="preserve">
          <source>Out of the box, Composer supports four types:</source>
          <target state="translated">コンポーザーは、4種類のタイプをサポートしています。</target>
        </trans-unit>
        <trans-unit id="145c01c620170c3ab3ab1215a0dfe84a56338dba" translate="yes" xml:space="preserve">
          <source>PEAR</source>
          <target state="translated">PEAR</target>
        </trans-unit>
        <trans-unit id="b6e0d0c69cff41f30dce51b7b05962b13a29ec59" translate="yes" xml:space="preserve">
          <source>PHP classes containing defined callbacks must be autoloadable via Composer's autoload functionality.</source>
          <target state="translated">定義されたコールバックを含む PHP クラスは、 Composer のオートロード機能を使用してオートロード可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="7b85166b23e4fdb8a3f3d6707be258197c2f05da" translate="yes" xml:space="preserve">
          <source>PSR-0</source>
          <target state="translated">PSR-0</target>
        </trans-unit>
        <trans-unit id="68e25a577a611f4f331ecea46a4359c671d2e74e" translate="yes" xml:space="preserve">
          <source>PSR-4</source>
          <target state="translated">PSR-4</target>
        </trans-unit>
        <trans-unit id="52d9c7a80cbf6e9fceabf8a3117045a2cd4cbe6c" translate="yes" xml:space="preserve">
          <source>PSR-4 is the recommended way since it offers greater ease of use (no need to regenerate the autoloader when you add classes).</source>
          <target state="translated">PSR-4は使い勝手が良いのでお勧めです(クラスを追加する際にオートローダーを再生成する必要がありません)。</target>
        </trans-unit>
        <trans-unit id="7431e3df243c5be33cffa0b28ca2a76b93f0538c" translate="yes" xml:space="preserve">
          <source>Package</source>
          <target state="translated">Package</target>
        </trans-unit>
        <trans-unit id="d73077614a8918bcc7ab02c45fb25c2c3ea664b3" translate="yes" xml:space="preserve">
          <source>Package Events</source>
          <target state="translated">パッケージイベント</target>
        </trans-unit>
        <trans-unit id="9cd2dccd7cba2c30aa43f6a4a27d8a1ba63796dd" translate="yes" xml:space="preserve">
          <source>Package Events: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Installer/PackageEvent.html&quot;&gt;&lt;code&gt;Composer\Installer\PackageEvent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">パッケージイベント： &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Installer/PackageEvent.html&quot;&gt; &lt;code&gt;Composer\Installer\PackageEvent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f7ee708da2b2b4ac2f2b6dc1f83560afdbaa61c3" translate="yes" xml:space="preserve">
          <source>Package links</source>
          <target state="translated">パッケージのリンク</target>
        </trans-unit>
        <trans-unit id="7808007c934c54e5e8c20cde242071f3de2b4543" translate="yes" xml:space="preserve">
          <source>Package names</source>
          <target state="translated">パッケージ名</target>
        </trans-unit>
        <trans-unit id="9b6676118da40f238ed9660264a2908784ef4d5f" translate="yes" xml:space="preserve">
          <source>Package not found</source>
          <target state="translated">パッケージが見つかりません</target>
        </trans-unit>
        <trans-unit id="65bf5a7cd4916964c223ea4dc17425667807c1c9" translate="yes" xml:space="preserve">
          <source>Package not found in a Jenkins-build</source>
          <target state="translated">Jenkinsビルドでパッケージが見つからない</target>
        </trans-unit>
        <trans-unit id="cf7ada2ffe27de5fe65906b47c96e5bf9be8d26c" translate="yes" xml:space="preserve">
          <source>Package not found on travis-ci.org</source>
          <target state="translated">travis-ci.org にパッケージが見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="9d66039c4da8ed7be8986cbc17aef4f92c7e728d" translate="yes" xml:space="preserve">
          <source>Package types are used for custom installation logic. If you have a package that needs some special logic, you can define a custom type. This could be a &lt;code&gt;symfony-bundle&lt;/code&gt;, a &lt;code&gt;wordpress-plugin&lt;/code&gt; or a &lt;code&gt;typo3-cms-extension&lt;/code&gt;. These types will all be specific to certain projects, and they will need to provide an installer capable of installing packages of that type.</source>
          <target state="translated">パッケージタイプは、カスタムインストールロジックに使用されます。 特別なロジックが必要なパッケージがある場合は、カスタムタイプを定義できます。 これは、 &lt;code&gt;symfony-bundle&lt;/code&gt; 、 &lt;code&gt;wordpress-plugin&lt;/code&gt; 、または &lt;code&gt;typo3-cms-extension&lt;/code&gt; です。 これらのタイプはすべて特定のプロジェクトに固有であり、そのタイプのパッケージをインストールできるインストーラーを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="b1148d2ffb47e8ac173078f14c3968dd49a99de0" translate="yes" xml:space="preserve">
          <source>Package version constraints</source>
          <target state="translated">パッケージのバージョン制約</target>
        </trans-unit>
        <trans-unit id="7795b2a652dd3647020427af8e59a1a34d64b2c1" translate="yes" xml:space="preserve">
          <source>Packages &lt;strong&gt;not coming from &lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt;&lt;/strong&gt; should always be &lt;strong&gt;defined in the root package&lt;/strong&gt; (the package depending on all vendors).</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist以外の&lt;/a&gt;&lt;/strong&gt;パッケージは、常に&lt;strong&gt;ルートパッケージ&lt;/strong&gt; （すべてのベンダーに依存するパッケージ）で&lt;strong&gt;定義する&lt;/strong&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="f2f1d4136f717c17ab1127fb36edacfeb63c693f" translate="yes" xml:space="preserve">
          <source>Packages can supply either of these, or even both. Depending on certain factors, such as user-supplied options and stability of the package, one will be preferred.</source>
          <target state="translated">パッケージは、これらのどちらか一方を提供することもできますし、両方を提供することもできます。ユーザが提供するオプションやパッケージの安定性など、特定の要因に応じて、どちらか一方が好まれます。</target>
        </trans-unit>
        <trans-unit id="880f5abce3a48ec9c69994966d82b07c36f2c125" translate="yes" xml:space="preserve">
          <source>Packages managed entirely by Composer do not &lt;em&gt;need&lt;/em&gt; to contain any &lt;code&gt;.bat&lt;/code&gt; files for Windows compatibility. Composer handles installation of binaries in a special way when run in a Windows environment:</source>
          <target state="translated">Composerによって完全に管理されるパッケージには、Windows互換性のために &lt;code&gt;.bat&lt;/code&gt; ファイルを含める&lt;em&gt;必要&lt;/em&gt;は&lt;em&gt;あり&lt;/em&gt;ません。 Composerは、Windows環境で実行する場合、バイナリのインストールを特別な方法で処理します。</target>
        </trans-unit>
        <trans-unit id="26055ee12e3b8d847d880cd6592b032b9f872d9a" translate="yes" xml:space="preserve">
          <source>Packages that need to support workflows that may not include Composer are welcome to maintain custom &lt;code&gt;.bat&lt;/code&gt; files. In this case, the package should &lt;strong&gt;not&lt;/strong&gt; list the &lt;code&gt;.bat&lt;/code&gt; file as a binary as it is not needed.</source>
          <target state="translated">Composerを含まない可能性のあるワークフローをサポートする必要があるパッケージは、カスタム &lt;code&gt;.bat&lt;/code&gt; ファイルを維持することができます。 この場合、パッケージには &lt;code&gt;.bat&lt;/code&gt; ファイルが必要ないため、バイナリとしてリストされるべきではありません。</target>
        </trans-unit>
        <trans-unit id="c6250cdaf320b82f3e5a0d36976d129cdc787296" translate="yes" xml:space="preserve">
          <source>Packagist</source>
          <target state="translated">Packagist</target>
        </trans-unit>
        <trans-unit id="2f4831d117e9d70eb059538b163468d2567d16f0" translate="yes" xml:space="preserve">
          <source>Partial Updates</source>
          <target state="translated">部分的な更新</target>
        </trans-unit>
        <trans-unit id="519e39132bb98418cc0483cc446ccf5f3c8dcffe" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="translated">Path</target>
        </trans-unit>
        <trans-unit id="70bff551342eea6aa8f97b6fb1a2dd9985b39fe4" translate="yes" xml:space="preserve">
          <source>Platform packages</source>
          <target state="translated">プラットフォームパッケージ</target>
        </trans-unit>
        <trans-unit id="96d94578c257f290e0c3f650c9d7c1b66632be47" translate="yes" xml:space="preserve">
          <source>Please note namespace declarations should end in &lt;code&gt;\\&lt;/code&gt; to make sure the autoloader responds exactly. For example &lt;code&gt;Foo&lt;/code&gt; would match in &lt;code&gt;FooBar&lt;/code&gt; so the trailing backslashes solve the problem: &lt;code&gt;Foo\\&lt;/code&gt; and &lt;code&gt;FooBar\\&lt;/code&gt; are distinct.</source>
          <target state="translated">オートローダーが正確に応答するように、名前空間宣言は &lt;code&gt;\\&lt;/code&gt; で終わる必要があることに注意してください。 たとえば、 &lt;code&gt;Foo&lt;/code&gt; は &lt;code&gt;FooBar&lt;/code&gt; で一致するため、末尾のバックスラッシュが問題を解決します &lt;code&gt;FooBar\\&lt;/code&gt; とFooBar \\は区別されます。</target>
        </trans-unit>
        <trans-unit id="b092b192a4d648e172b4a375b0666e778cde5015" translate="yes" xml:space="preserve">
          <source>Please note:</source>
          <target state="translated">ご注意ください。</target>
        </trans-unit>
        <trans-unit id="dc8572ee2a167aa3f336a06359c0636a878ee8b8" translate="yes" xml:space="preserve">
          <source>Please read &lt;a href=&quot;articles/versions.md&quot;&gt;versions&lt;/a&gt; for more in-depth information on versions, how versions relate to each other, and on version constraints.</source>
          <target state="translated">バージョン、バージョン間の相互関係、バージョンの制約に関する詳細情報については、 &lt;a href=&quot;articles/versions.md&quot;&gt;バージョン&lt;/a&gt;をお読みください。</target>
        </trans-unit>
        <trans-unit id="2727c3578f91631c9e0a5c09bb235062be698f63" translate="yes" xml:space="preserve">
          <source>Plugin Class</source>
          <target state="translated">プラグインクラス</target>
        </trans-unit>
        <trans-unit id="fbdd2cb4c3815c09ac6f353fde19990df0b826d0" translate="yes" xml:space="preserve">
          <source>Plugin Events</source>
          <target state="translated">プラグインのイベント</target>
        </trans-unit>
        <trans-unit id="1df4349176f4606f4b4fc1a4c20f4de9c5fe741c" translate="yes" xml:space="preserve">
          <source>Plugin Events:</source>
          <target state="translated">プラグインのイベント。</target>
        </trans-unit>
        <trans-unit id="f2d09e4541ac1902ecf8252c0d5a538540c73aee" translate="yes" xml:space="preserve">
          <source>Plugin Package</source>
          <target state="translated">プラグインパッケージ</target>
        </trans-unit>
        <trans-unit id="e1e8cb868c4b032adc5e4c82f96fadede05e328f" translate="yes" xml:space="preserve">
          <source>Plugin capabilities</source>
          <target state="translated">プラグインの機能</target>
        </trans-unit>
        <trans-unit id="a53d056c00a56390bd56f3c78f912907c666bd3c" translate="yes" xml:space="preserve">
          <source>Plugin packages are automatically loaded as soon as they are installed and will be loaded when composer starts up if they are found in the current project's list of installed packages. Additionally all plugin packages installed in the &lt;code&gt;COMPOSER_HOME&lt;/code&gt; directory using the composer global command are loaded before local project plugins are loaded.</source>
          <target state="translated">プラグインパッケージは、インストールされるとすぐに自動的にロードされ、現在のプロジェクトのインストール済みパッケージのリストで見つかった場合、composerの起動時にロードされます。 さらに、composerグローバルコマンドを使用して &lt;code&gt;COMPOSER_HOME&lt;/code&gt; ディレクトリにインストールされたすべてのプラグインパッケージは、ローカルプロジェクトプラグインがロードされる前にロードされます。</target>
        </trans-unit>
        <trans-unit id="b7c6ef4a80a2bb0071c2036b48d6fd0521467b1a" translate="yes" xml:space="preserve">
          <source>Plugins for an event can be run manually by the &lt;code&gt;run-script&lt;/code&gt; command. This works the same way as &lt;a href=&quot;scripts.md#running-scripts-manually&quot;&gt;running scripts manually&lt;/a&gt;.</source>
          <target state="translated">イベントのプラグインは、 &lt;code&gt;run-script&lt;/code&gt; コマンドを使用して手動で実行できます。 これは、 &lt;a href=&quot;scripts.md#running-scripts-manually&quot;&gt;スクリプトを手動で実行&lt;/a&gt;するのと同じように機能します。</target>
        </trans-unit>
        <trans-unit id="17141dcfb65c0d75c4b8fa523d332056f8473365" translate="yes" xml:space="preserve">
          <source>Prefixing the URL with another host is especially helpful if the downloads end up in a private Amazon S3 bucket or on a CDN host. A CDN would drastically improve download times and therefore package installation.</source>
          <target state="translated">ダウンロードがプライベートの Amazon S3 バケットや CDN ホストで終わる場合は、URL を別のホストでプレフィックスするのが特に便利です。CDN はダウンロード時間を劇的に改善し、その結果パッケージのインストールが可能になります。</target>
        </trans-unit>
        <trans-unit id="3dbe65a0c8818c614259574a8fd951bbed420749" translate="yes" xml:space="preserve">
          <source>Private Packagist</source>
          <target state="translated">プライベートパッカギスト</target>
        </trans-unit>
        <trans-unit id="0b2b487a5d607bb7624863de43f47569bd855362" translate="yes" xml:space="preserve">
          <source>Private Packagist is available as a hosted SaaS solution or as an on-premise self-hosted package, providing an easy interactive set up experience.</source>
          <target state="translated">Private Packagistは、ホスト型SaaSソリューションとして、またはオンプレミスのセルフホスト型パッケージとして利用でき、インタラクティブなセットアップを簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="27ffe1daea0160bc5786db4606d8a83b60d8853e" translate="yes" xml:space="preserve">
          <source>Process Exit Codes</source>
          <target state="translated">プロセス終了コード</target>
        </trans-unit>
        <trans-unit id="cf2d7e79920f5805b436bb910c9b0246a2e2d54d" translate="yes" xml:space="preserve">
          <source>Projects with multiple developers can use this feature to bootstrap the initial application for development.</source>
          <target state="translated">複数の開発者がいるプロジェクトでは、この機能を使用して、開発用の初期アプリケーションをブートストラップすることができます。</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="51d00bce44383befa1de652a2c9d7a4923aa0aa3" translate="yes" xml:space="preserve">
          <source>Publishing to a VCS</source>
          <target state="translated">VCSへの出版</target>
        </trans-unit>
        <trans-unit id="42996cc0d06a03dc418669f81467080a796b0d5a" translate="yes" xml:space="preserve">
          <source>Publishing to packagist</source>
          <target state="translated">パッキャジストへの出版</target>
        </trans-unit>
        <trans-unit id="90648a9b69d6e473de40f812b8e2311c4bc465c2" translate="yes" xml:space="preserve">
          <source>Read more about publishing packages and package naming &lt;a href=&quot;02-libraries.md&quot;&gt;here&lt;/a&gt;. (Note that you can also specify &quot;platform packages&quot; as dependencies, allowing you to require certain versions of server software. See &lt;a href=&quot;#platform-packages&quot;&gt;platform packages&lt;/a&gt; below.)</source>
          <target state="translated">パッケージの公開とパッケージの命名について詳しくは、 &lt;a href=&quot;02-libraries.md&quot;&gt;こちらをご覧ください&lt;/a&gt; 。 （依存関係として「プラットフォームパッケージ」を指定することもでき、サーバーソフトウェアの特定のバージョンを要求できることに注意してください。以下の&lt;a href=&quot;#platform-packages&quot;&gt;プラットフォームパッケージを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="681d40c1d15168cc59415bffa0703c0b2c2a59fc" translate="yes" xml:space="preserve">
          <source>Reason for failing is similar to the problem which can occur on travis-ci.org: The git-clone / checkout within Jenkins leaves the branch in a &quot;detached HEAD&quot;-state. As a result, Composer is not able to identify the version of the current checked out branch and may not be able to resolve a cyclic dependency. To solve this problem, you can use the &quot;Additional Behaviours&quot; -&amp;gt; &quot;Check out to specific local branch&quot; in your Git-settings for your Jenkins-job, where your &quot;local branch&quot; shall be the same branch as you are checking out. Using this, the checkout will not be in detached state any more and cyclic dependency is recognized correctly.</source>
          <target state="translated">失敗の理由は、travis-ci.orgで発生する可能性がある問題に似ています。Jenkins内のgit-clone / checkoutは、ブランチを「デタッチされたHEAD」状態のままにします。 その結果、Composerは現在チェックアウトされているブランチのバージョンを識別できず、循環依存関係を解決できない場合があります。 この問題を解決するには、JenkinsジョブのGit設定で「追加の動作」-&amp;gt;「特定のローカルブランチにチェックアウト」を使用できます。「ローカルブランチ」は、チェックアウトしているブランチと同じです。 これを使用すると、チェックアウトはデタッチ状態ではなくなり、循環依存関係が正しく認識されます。</target>
        </trans-unit>
        <trans-unit id="e65b862a7b98484b46ff204d10dc79c7f23dbb75" translate="yes" xml:space="preserve">
          <source>Referencing scripts</source>
          <target state="translated">スクリプトの参照</target>
        </trans-unit>
        <trans-unit id="658a9348d9a36546995e485b083535db9c64517f" translate="yes" xml:space="preserve">
          <source>Release date of the version.</source>
          <target state="translated">バージョンのリリース日。</target>
        </trans-unit>
        <trans-unit id="c91e6e6a538a5087a64a99718ae975966b761c1e" translate="yes" xml:space="preserve">
          <source>Repositories</source>
          <target state="translated">Repositories</target>
        </trans-unit>
        <trans-unit id="605e324dd79c33933203988a504354e6dc37d2e2" translate="yes" xml:space="preserve">
          <source>Repositories are not resolved recursively. You can only add them to your main &lt;code&gt;composer.json&lt;/code&gt;. Repository declarations of dependencies' &lt;code&gt;composer.json&lt;/code&gt;s are ignored.</source>
          <target state="translated">リポジトリは再帰的に解決されません。 メインの &lt;code&gt;composer.json&lt;/code&gt; にのみ追加できます。 依存関係の &lt;code&gt;composer.json&lt;/code&gt; のリポジトリ宣言は無視されます。</target>
        </trans-unit>
        <trans-unit id="b677b0048a64154830ece638e2fb27b8f835437b" translate="yes" xml:space="preserve">
          <source>Repositories are only available to the root package and the repositories defined in your dependencies will not be loaded. Read the &lt;a href=&quot;https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md&quot;&gt;FAQ entry&lt;/a&gt; if you want to learn why.</source>
          <target state="translated">リポジトリはルートパッケージでのみ使用でき、依存関係で定義されたリポジトリは読み込まれません。 理由を知りたい場合は、 &lt;a href=&quot;https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md&quot;&gt;FAQエントリ&lt;/a&gt;をお読みください 。</target>
        </trans-unit>
        <trans-unit id="312386841084261c610413fa4de8b7505f469407" translate="yes" xml:space="preserve">
          <source>Repository</source>
          <target state="translated">Repository</target>
        </trans-unit>
        <trans-unit id="0e55ca59eef1f33d943a8c14fb2edc1bffd9bc99" translate="yes" xml:space="preserve">
          <source>Require inline alias</source>
          <target state="translated">インラインエイリアスを必要とする</target>
        </trans-unit>
        <trans-unit id="636bb9b3d34f25b03a23fc4011cb6c5b95c66512" translate="yes" xml:space="preserve">
          <source>Required for published packages (libraries).</source>
          <target state="translated">公開されているパッケージ(ライブラリ)に必要です。</target>
        </trans-unit>
        <trans-unit id="67e63d91858ebf302948af233d78d205f3631584" translate="yes" xml:space="preserve">
          <source>Resolving dependencies</source>
          <target state="translated">依存関係の解決</target>
        </trans-unit>
        <trans-unit id="bf3c723943afb10b30be5099934d0061dde1b3a0" translate="yes" xml:space="preserve">
          <source>Root Package</source>
          <target state="translated">ルートパッケージ</target>
        </trans-unit>
        <trans-unit id="40a11bc6f420df54a1cc6ac2f27779f1a22bcf02" translate="yes" xml:space="preserve">
          <source>Run composer ...</source>
          <target state="translated">ダイヤルを走らせて...</target>
        </trans-unit>
        <trans-unit id="02c176abc5d53a5cddcb7db60b388f7f2db17a9f" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;composer install&lt;/code&gt; for this &lt;code&gt;composer.json&lt;/code&gt; will look at all of project-a's binaries and install them to &lt;code&gt;vendor/bin&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;composer.json&lt;/code&gt; に対して &lt;code&gt;composer install&lt;/code&gt; を実行すると、project-aのすべてのバイナリが確認され、それらが &lt;code&gt;vendor/bin&lt;/code&gt; にインストールされます。</target>
        </trans-unit>
        <trans-unit id="77d6c9754e9d79e4c035466336d20ed9c56cf340" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;composer install&lt;/code&gt; for this &lt;code&gt;composer.json&lt;/code&gt; will not do anything with &lt;code&gt;bin/project-a-bin&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;composer.json&lt;/code&gt; に対して &lt;code&gt;composer install&lt;/code&gt; を実行しても、 &lt;code&gt;bin/project-a-bin&lt;/code&gt; では何も行われません。</target>
        </trans-unit>
        <trans-unit id="2c66496e4b8a83692d805b42d3fb10a45cf55a2b" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;composer install&lt;/code&gt; for this &lt;code&gt;composer.json&lt;/code&gt; will result in all of the vendor binaries being installed in &lt;code&gt;scripts/&lt;/code&gt; instead of &lt;code&gt;vendor/bin/&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;composer.json&lt;/code&gt; に対して &lt;code&gt;composer install&lt;/code&gt; を実行すると、すべてのベンダーバイナリが &lt;code&gt;vendor/bin/&lt;/code&gt; ではなく &lt;code&gt;scripts/&lt;/code&gt; にインストールされます。</target>
        </trans-unit>
        <trans-unit id="462d1db361dd2705327cbd57e61bc116206a5b83" translate="yes" xml:space="preserve">
          <source>Running plugins manually</source>
          <target state="translated">プラグインを手動で実行する</target>
        </trans-unit>
        <trans-unit id="63661918ff1f46e010610418f83ba15536a0edad" translate="yes" xml:space="preserve">
          <source>Running scripts manually</source>
          <target state="translated">スクリプトを手動で実行する</target>
        </trans-unit>
        <trans-unit id="69ae939a6e24536ac11cc6467262835c9ffe1ab4" translate="yes" xml:space="preserve">
          <source>Satis</source>
          <target state="translated">Satis</target>
        </trans-unit>
        <trans-unit id="afa4ca2e1dad5257bc45bcb2ae3345ecd9520e05" translate="yes" xml:space="preserve">
          <source>Satis is a static &lt;code&gt;composer&lt;/code&gt; repository generator. It is a bit like an ultra- lightweight, static file-based version of packagist.</source>
          <target state="translated">Satisは静的 &lt;code&gt;composer&lt;/code&gt; リポジトリジェネレーターです。 これは、超軽量で静的なファイルベースのバージョンのpackagistに少し似ています。</target>
        </trans-unit>
        <trans-unit id="0ade51e1e159b2e3e7fa56b4472a1503e5ac6f7d" translate="yes" xml:space="preserve">
          <source>Satis on the other hand is open source but only a static &lt;code&gt;composer&lt;/code&gt; repository generator. It is a bit like an ultra-lightweight, static file-based version of packagist and can be used to host the metadata of your company's private packages, or your own. You can get it from &lt;a href=&quot;https://github.com/composer/satis&quot;&gt;GitHub&lt;/a&gt; or install via CLI:</source>
          <target state="translated">一方、Satisはオープンソースですが、静的な &lt;code&gt;composer&lt;/code&gt; リポジトリジェネレーターのみです。 これは、超軽量で静的なファイルベースのバージョンのpackagistに少し似ており、会社のプライベートパッケージまたは独自のパッケージのメタデータをホストするために使用できます。 &lt;a href=&quot;https://github.com/composer/satis&quot;&gt;GitHub&lt;/a&gt;から取得するか、CLI経由でインストールできます。</target>
        </trans-unit>
        <trans-unit id="3085f6884448b8a839b11cdf3feb5ca13ee5f95f" translate="yes" xml:space="preserve">
          <source>Say package &lt;code&gt;my-vendor/project-a&lt;/code&gt; has binaries setup like this:</source>
          <target state="translated">パッケージ &lt;code&gt;my-vendor/project-a&lt;/code&gt; に次のようなバイナリ設定があるとします。</target>
        </trans-unit>
        <trans-unit id="876d059b9d11b42563fa49538d722751048969b4" translate="yes" xml:space="preserve">
          <source>Say project &lt;code&gt;my-vendor/project-b&lt;/code&gt; has requirements setup like this:</source>
          <target state="translated">プロジェクト &lt;code&gt;my-vendor/project-b&lt;/code&gt; に次のような要件設定があるとします。</target>
        </trans-unit>
        <trans-unit id="141f05a2d444aedb2a416b6f6aa967c248a38bdb" translate="yes" xml:space="preserve">
          <source>Script definition example:</source>
          <target state="translated">スクリプトの定義例。</target>
        </trans-unit>
        <trans-unit id="381e3298b2b8f6caeb2208b57d805ada38402f0b" translate="yes" xml:space="preserve">
          <source>Scripts</source>
          <target state="translated">Scripts</target>
        </trans-unit>
        <trans-unit id="8c20810320df84c5a3a66b73a1a4a6799911bd24" translate="yes" xml:space="preserve">
          <source>Scripts execute in the order defined when their corresponding event is fired.</source>
          <target state="translated">スクリプトは、対応するイベントが発生したときに定義された順序で実行されます。</target>
        </trans-unit>
        <trans-unit id="bca27a084b31f7d5711e8aa95a27580b07d7ceb8" translate="yes" xml:space="preserve">
          <source>Search for an &lt;code&gt;AutoRun&lt;/code&gt; key inside &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor&lt;/code&gt;, &lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Command Processor&lt;/code&gt; or &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Command Processor&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor&lt;/code&gt; 、 &lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Command Processor&lt;/code&gt; または &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Command Processor&lt;/code&gt; 内で &lt;code&gt;AutoRun&lt;/code&gt; キーを検索します 。</target>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">Security</target>
        </trans-unit>
        <trans-unit id="2f2e0cfb9b921677358c2029c8aa562157bb4028" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;aliases.md&quot;&gt;aliases&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;aliases.md&quot;&gt;エイリアス&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9fa3e83b7d0fca52d3747da12efee577c92ff227" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;articles/scripts.md&quot;&gt;Scripts&lt;/a&gt; for events details and examples.</source>
          <target state="translated">イベントの詳細と例については、 &lt;a href=&quot;articles/scripts.md&quot;&gt;スクリプト&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9d620fa0ce1b37fe9dd7ba9d411ab04a43133094" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;Vendor Binaries&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;ベンダーバイナリ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="559b72f77032e67604dc874b9a392a115d181b4e" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://github.com/composer/composer/issues/4180&quot;&gt;https://github.com/composer/composer/issues/4180&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、 &lt;a href=&quot;https://github.com/composer/composer/issues/4180&quot;&gt;https：//github.com/composer/composer/issues/4180&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="0de267ef8a389c1e7998354eba22473decbeb28f" translate="yes" xml:space="preserve">
          <source>See also the docs on &lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;optimizing the autoloader&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;オートローダーの最適化&lt;/a&gt;に関するドキュメントもご覧ください。</target>
        </trans-unit>
        <trans-unit id="40a90c87b8f1bab04a3544adc01bea2e0e9bce45" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;01-basic-usage.md&quot;&gt;Basic usage&lt;/a&gt; chapter for more details on declaring dependencies.</source>
          <target state="translated">依存関係の宣言の詳細については、 &lt;a href=&quot;01-basic-usage.md&quot;&gt;基本的な使用法の&lt;/a&gt;章を参照してください。</target>
        </trans-unit>
        <trans-unit id="2575ba8fbc7c125e927fe44e94d8db132d3a6adb" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;06-config.md&quot;&gt;Config&lt;/a&gt; chapter for valid configuration options.</source>
          <target state="translated">有効な構成オプションについては、 &lt;a href=&quot;06-config.md&quot;&gt;構成の&lt;/a&gt;章を参照してください。</target>
        </trans-unit>
        <trans-unit id="e4650020b4ad72f5700c979161041d4ed54e1267" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;apcu-autoloader&quot;: true&lt;/code&gt; inside the config key of composer.json</source>
          <target state="translated">&lt;code&gt;&quot;apcu-autoloader&quot;: true&lt;/code&gt; の設定キー内で「apcu-autoloader」：trueを設定します</target>
        </trans-unit>
        <trans-unit id="214a7a23d5f78ae506afcb7b0713b0f632fd1c5f" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;classmap-authoritative&quot;: true&lt;/code&gt; inside the config key of composer.json</source>
          <target state="translated">&lt;code&gt;&quot;classmap-authoritative&quot;: true&lt;/code&gt; 設定します： composer.jsonの構成キー内でtrue</target>
        </trans-unit>
        <trans-unit id="5c0a92c54590466a677967f926d1748729dcfdaf" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;optimize-autoloader&quot;: true&lt;/code&gt; inside the config key of composer.json</source>
          <target state="translated">composer.jsonの構成キー内で &lt;code&gt;&quot;optimize-autoloader&quot;: true&lt;/code&gt; を設定します</target>
        </trans-unit>
        <trans-unit id="a8874dcc81d1b0c7d334d5272e38e9accbd8eeb3" translate="yes" xml:space="preserve">
          <source>Set up a virtual-host that points to that &lt;code&gt;web/&lt;/code&gt; directory, let's say it is &lt;code&gt;packages.example.org&lt;/code&gt;. Alternatively, with PHP &amp;gt;= 5.4.0, you can use the built-in CLI server &lt;code&gt;php -S localhost:port -t satis-output-dir/&lt;/code&gt; for a temporary solution.</source>
          <target state="translated">その &lt;code&gt;web/&lt;/code&gt; ディレクトリを指す仮想ホストを設定し &lt;code&gt;packages.example.org&lt;/code&gt; 。たとえば、それがpackages.example.orgであるとします 。 または、PHP&amp;gt; = 5.4.0では、一時的な解決策として組み込みのCLIサーバー &lt;code&gt;php -S localhost:port -t satis-output-dir/&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="ad1bd84f8db19260d4b3be58ad221bf7fd52b6ac" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;bin-dir&lt;/code&gt; configuration setting in &lt;code&gt;composer.json&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; での &lt;code&gt;bin-dir&lt;/code&gt; 構成設定の設定</target>
        </trans-unit>
        <trans-unit id="e60dbf0bbeb4c51b8c1fb230befbe410040e5635" translate="yes" xml:space="preserve">
          <source>Setting the environment variable &lt;code&gt;COMPOSER_BIN_DIR&lt;/code&gt;</source>
          <target state="translated">環境変数 &lt;code&gt;COMPOSER_BIN_DIR&lt;/code&gt; の設定</target>
        </trans-unit>
        <trans-unit id="af23ae56582131e07f436b39f455d9b7d1775c48" translate="yes" xml:space="preserve">
          <source>Setting up and using custom installers</source>
          <target state="translated">カスタムインストーラの設定と使用</target>
        </trans-unit>
        <trans-unit id="f9f484fe084b559575d6a474fc363c8262aa4d5b" translate="yes" xml:space="preserve">
          <source>Setting up and using plugins</source>
          <target state="translated">プラグインの設定と使用</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="4226ac02b9051f1d88c8061a46bff4b36feed5e3" translate="yes" xml:space="preserve">
          <source>Should I commit the dependencies in my vendor directory?</source>
          <target state="translated">ベンダーディレクトリに依存関係をコミットする必要がありますか?</target>
        </trans-unit>
        <trans-unit id="fed63dbe315e1977317e6b4cf10f84a0bfa8ebac" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;run-script&lt;/code&gt; command you can give additional arguments to scripts, e.g. &lt;code&gt;composer test -- --filter &amp;lt;pattern&amp;gt;&lt;/code&gt; will pass &lt;code&gt;--filter &amp;lt;pattern&amp;gt;&lt;/code&gt; along to the &lt;code&gt;phpunit&lt;/code&gt; script.</source>
          <target state="translated">&lt;code&gt;run-script&lt;/code&gt; コマンドと同様に、スクリプトに追加の引数を与えることができます。たとえば、 &lt;code&gt;composer test -- --filter &amp;lt;pattern&amp;gt;&lt;/code&gt; は、 &lt;code&gt;phpunit&lt;/code&gt; スクリプトとともに &lt;code&gt;--filter &amp;lt;pattern&amp;gt;&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="505c2aef95bc2765ce09ae92a6ca5a4a2e326f2b" translate="yes" xml:space="preserve">
          <source>Similarly when multiple licenses need to be applied (&quot;conjunctive license&quot;), they should be separated with &quot;and&quot; and enclosed in parenthesis.</source>
          <target state="translated">同様に、複数のライセンス(「接続法ライセンス」)を適用する場合には、「and」で区切って括弧で囲んでください。</target>
        </trans-unit>
        <trans-unit id="07757201e1834f1bb8a3143e05ba241fefdc3d8b" translate="yes" xml:space="preserve">
          <source>Since Subversion has no native concept of branches and tags, Composer assumes by default that code is located in &lt;code&gt;$url/trunk&lt;/code&gt;, &lt;code&gt;$url/branches&lt;/code&gt; and &lt;code&gt;$url/tags&lt;/code&gt;. If your repository has a different layout you can change those values. For example if you used capitalized names you could configure the repository like this:</source>
          <target state="translated">Subversionにはブランチとタグのネイティブの概念がないため、Composerはデフォルトでコードが &lt;code&gt;$url/trunk&lt;/code&gt; 、 &lt;code&gt;$url/branches&lt;/code&gt; 、および &lt;code&gt;$url/tags&lt;/code&gt; と想定します。 リポジトリのレイアウトが異なる場合は、それらの値を変更できます。 たとえば、大文字の名前を使用した場合、次のようにリポジトリを構成できます。</target>
        </trans-unit>
        <trans-unit id="a1bed418fe5291e542f2bb5af84238985d583150" translate="yes" xml:space="preserve">
          <source>Some of Private Packagist's revenue is used to pay for Composer and Packagist.org development and hosting so using it is a good way to support the maintenance of these open source projects financially. You can find more information about how to set up your own package archive on &lt;a href=&quot;https://packagist.com&quot;&gt;Packagist.com&lt;/a&gt;.</source>
          <target state="translated">Private Packagistの収益の一部は、ComposerおよびPackagist.orgの開発とホスティングの支払いに使用されるため、これらを使用することは、これらのオープンソースプロジェクトのメンテナンスを経済的にサポートするための良い方法です。 独自のパッケージアーカイブをセットアップする方法の詳細については、 &lt;a href=&quot;https://packagist.com&quot;&gt;Packagist.comを参照&lt;/a&gt;してください 。</target>
        </trans-unit>
        <trans-unit id="d5d81a8f8c1036267fdfca0f8435abe72c266686" translate="yes" xml:space="preserve">
          <source>Some of those libraries depend on other libraries.</source>
          <target state="translated">これらのライブラリの中には、他のライブラリに依存しているものもあります。</target>
        </trans-unit>
        <trans-unit id="ce09e2a04d1ee91f7c193aa30ccee69c0962bbb6" translate="yes" xml:space="preserve">
          <source>Stability Constraints</source>
          <target state="translated">安定性制約</target>
        </trans-unit>
        <trans-unit id="b500adbbebfd71b34fddb37de3e62913e7c37fbd" translate="yes" xml:space="preserve">
          <source>Stack Overflow has a growing collection of &lt;a href=&quot;https://stackoverflow.com/questions/tagged/composer-php&quot;&gt;Composer related questions&lt;/a&gt;.</source>
          <target state="translated">Stack Overflowには、 &lt;a href=&quot;https://stackoverflow.com/questions/tagged/composer-php&quot;&gt;Composer関連の質問の&lt;/a&gt;コレクションが増えています。</target>
        </trans-unit>
        <trans-unit id="3fc3578f9d49c8b0cad651c3dd63878f9b611d5e" translate="yes" xml:space="preserve">
          <source>Subversion Options</source>
          <target state="translated">サブバージョンオプション</target>
        </trans-unit>
        <trans-unit id="c0b6128dc969b8189931a29860ad74c7707de85e" translate="yes" xml:space="preserve">
          <source>Suggested packages that can enhance or work well with this package. These are informational and are displayed after the package is installed, to give your users a hint that they could add more packages, even though they are not strictly required.</source>
          <target state="translated">このパッケージを強化したり、このパッケージと相性が良いと思われるパッケージの提案。これらは情報を提供するもので、パッケージがインストールされた後に表示され、 厳密には必須ではありませんが、もっと多くのパッケージを追加できるという ヒントをユーザに与えることができます。</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="28d1a6decd2e638f2e207094e4022a81f85e33b1" translate="yes" xml:space="preserve">
          <source>Support information includes the following:</source>
          <target state="translated">サポート情報には以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="178e128d3e0c743ef84dc31fd34744e94560d958" translate="yes" xml:space="preserve">
          <source>Suppose at a later time you wish to migrate your PEAR packages to a Composer repository and naming scheme, and adopt the vendor name of &lt;code&gt;foobar&lt;/code&gt;. Projects using your PEAR packages would not see the updated packages, since they have a different vendor name (&lt;code&gt;foobar/IntermediatePackage&lt;/code&gt; vs &lt;code&gt;pear-pear.foobar.repo/IntermediatePackage&lt;/code&gt;).</source>
          <target state="translated">後でPEARパッケージをComposerリポジトリと命名スキームに移行し、ベンダー名 &lt;code&gt;foobar&lt;/code&gt; を採用するとします。 PEARパッケージを使用するプロジェクトは、異なるベンダー名（ &lt;code&gt;foobar/IntermediatePackage&lt;/code&gt; vs &lt;code&gt;pear-pear.foobar.repo/IntermediatePackage&lt;/code&gt; ）を持っているため、更新されたパッケージを表示しません。</target>
        </trans-unit>
        <trans-unit id="b7151b24f20e3570c88fe771b993984180a7026e" translate="yes" xml:space="preserve">
          <source>Suppose that your project already has a Custom Installer for specific modules then invoking that installer is a matter of defining the correct &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; in your package file.</source>
          <target state="translated">プロジェクトに特定のモジュール用のカスタムインストーラーがすでにあるとします。そのインストーラーを起動するには、パッケージファイルで正しい&lt;a href=&quot;../04-schema.md#type&quot;&gt;タイプ&lt;/a&gt;を定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="e52bd5474aee7c47125d6c88e627d38304399a38" translate="yes" xml:space="preserve">
          <source>Suppose you have a private PEAR repository and wish to use Composer to incorporate dependencies from a VCS. Your PEAR repository contains the following packages:</source>
          <target state="translated">プライベート PEAR リポジトリを持っていて、 Composer を使って VCS からの依存関係を組み込みたいとします。PEAR リポジトリには、以下のパッケージが含まれています。</target>
        </trans-unit>
        <trans-unit id="b130631fc1a052b53e9b573c6a35c3793ee28509" translate="yes" xml:space="preserve">
          <source>Suppose:</source>
          <target state="translated">Suppose:</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="0e1642f6a15ccf097e1cdabd2a2cd6876eb2a2b4" translate="yes" xml:space="preserve">
          <source>System Requirements</source>
          <target state="translated">システム要件</target>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="b70c6eaf1355459ee9b2792678e48b364ac7a92a" translate="yes" xml:space="preserve">
          <source>Testing Version Constraints</source>
          <target state="translated">バージョン制約のテスト</target>
        </trans-unit>
        <trans-unit id="38971f840464aad791a1ca6172cba81ab073a153" translate="yes" xml:space="preserve">
          <source>That said, if this fixes your problem, please talk to your ISP about it to try and resolve the routing errors. That's the best way to get things resolved for everyone.</source>
          <target state="translated">つまり、これで問題が解決した場合は、ISPに相談してルーティングエラーを解決してみてください。それがみんなのために物事を解決するための最善の方法です。</target>
        </trans-unit>
        <trans-unit id="0cf9c170058ae7fe4ac78ba8a0f70a5c525899ab" translate="yes" xml:space="preserve">
          <source>That will fetch the &lt;code&gt;dev-bugfix&lt;/code&gt; version of &lt;code&gt;monolog/monolog&lt;/code&gt; from your GitHub and alias it to &lt;code&gt;1.0.x-dev&lt;/code&gt;.</source>
          <target state="translated">これにより、GitHubから &lt;code&gt;dev-bugfix&lt;/code&gt; バージョンの &lt;code&gt;monolog/monolog&lt;/code&gt; がフェッチされ、それが &lt;code&gt;1.0.x-dev&lt;/code&gt; にエイリアスされます。</target>
        </trans-unit>
        <trans-unit id="1ae72273043859b4044f98f451fcae97261be08a" translate="yes" xml:space="preserve">
          <source>That will store it in the current directory's auth.json, but if you want it available globally you can use the &lt;code&gt;--global&lt;/code&gt; (&lt;code&gt;-g&lt;/code&gt;) flag.</source>
          <target state="translated">これにより、現在のディレクトリのauth.jsonに保存されますが、グローバルに使用したい場合は、 &lt;code&gt;--global&lt;/code&gt; （ &lt;code&gt;-g&lt;/code&gt; ）フラグを使用できます。</target>
        </trans-unit>
        <trans-unit id="38ca4f78e527bb3cb8fc5615d830b1cad2faef41" translate="yes" xml:space="preserve">
          <source>That's all. You can now install the dependencies by running Composer's &lt;a href=&quot;03-cli.md#install&quot;&gt;&lt;code&gt;install&lt;/code&gt;&lt;/a&gt; command!</source>
          <target state="translated">それで全部です。 Composerの&lt;a href=&quot;03-cli.md#install&quot;&gt; &lt;code&gt;install&lt;/code&gt; &lt;/a&gt;コマンドを実行して、依存関係をインストールできるようになりました。</target>
        </trans-unit>
        <trans-unit id="6f7a7ff242bfd8b5c67a5855a5c9da8aeb28993f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../04-schema.md#extra&quot;&gt;extra&lt;/a&gt; attribute must contain an element &lt;code&gt;class&lt;/code&gt; defining the class name of the plugin (including namespace). If a package contains multiple plugins, this can be array of class names.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#extra&quot;&gt;追加の&lt;/a&gt;属性には、プラグインのクラス名（名前空間を含む）を定義する要素 &lt;code&gt;class&lt;/code&gt; が含まれている必要があります。 パッケージに複数のプラグインが含まれている場合、これはクラス名の配列にすることができます。</target>
        </trans-unit>
        <trans-unit id="e63d949c881e513c359946a15964fc66ca3a9f38" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../04-schema.md#repositories&quot;&gt;&lt;code&gt;repositories&lt;/code&gt;&lt;/a&gt; configuration property is defined as &lt;a href=&quot;../04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;. It is not inherited. You can read more about the reasons behind this in the &quot;&lt;a href=&quot;https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md&quot;&gt;why can't composer load repositories recursively?&lt;/a&gt;&quot; article. The simplest work-around to this limitation, is moving or duplicating the &lt;code&gt;repositories&lt;/code&gt; definition into your root composer.json.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#repositories&quot;&gt; &lt;code&gt;repositories&lt;/code&gt; &lt;/a&gt;構成プロパティーは&lt;a href=&quot;../04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;として定義されています。 受け継がれません。 この理由については、「 &lt;a href=&quot;https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md&quot;&gt;composerがリポジトリを再帰的にロードできないのはなぜですか？&lt;/a&gt; 」の記事を参照してください。 この制限に対する最も簡単な回避策は、 &lt;code&gt;repositories&lt;/code&gt; 定義をルートcomposer.jsonに移動または複製することです 。</target>
        </trans-unit>
        <trans-unit id="7e648472e86fccaf7b5a0d4f0178fcbf7990ea9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; attribute must be &lt;code&gt;composer-plugin&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt;属性は &lt;code&gt;composer-plugin&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="9c0c186b57848575cfd467a57c175faa35ce67c4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/Capability/CommandProvider.php&quot;&gt;&lt;code&gt;Composer\Plugin\Capability\CommandProvider&lt;/code&gt;&lt;/a&gt; capability allows to register additional commands for Composer :</source>
          <target state="translated">&lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/Capability/CommandProvider.php&quot;&gt; &lt;code&gt;Composer\Plugin\Capability\CommandProvider&lt;/code&gt; &lt;/a&gt;機能を使用すると、Composerの追加コマンドを登録できます。</target>
        </trans-unit>
        <trans-unit id="325c906fcb1706b6d31de5f9aea2d2c7863feee2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;package&quot;&lt;/code&gt; key in a &lt;code&gt;package&lt;/code&gt; repository may be set to an array to define multiple versions of a package:</source>
          <target state="translated">&lt;code&gt;package&lt;/code&gt; リポジトリの &lt;code&gt;&quot;package&quot;&lt;/code&gt; キーを配列に設定して、パッケージの複数のバージョンを定義できます。</target>
        </trans-unit>
        <trans-unit id="2d194afcac512a2852d1eb7e545166d274d4dfcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@composer.json&lt;/code&gt; marker would be the contents of the &lt;code&gt;composer.json&lt;/code&gt; from that package version including as a minimum:</source>
          <target state="translated">&lt;code&gt;@composer.json&lt;/code&gt; マーカーは、そのパッケージバージョンの &lt;code&gt;composer.json&lt;/code&gt; のコンテンツであり、最低限次のものを含みます。</target>
        </trans-unit>
        <trans-unit id="bd712f3b81992c5860b40a6b5ab839dc7e577f9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COMPOSER_AUTH&lt;/code&gt; var allows you to set up authentication as an environment variable. The contents of the variable should be a JSON formatted object containing http-basic, github-oauth, bitbucket-oauth, ... objects as needed, and following the &lt;a href=&quot;06-config.md#gitlab-oauth&quot;&gt;spec from the config&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;COMPOSER_AUTH&lt;/code&gt; 変数を使用すると、認証を環境変数として設定できます。 変数の内容は、必要に応じてhttp-basic、github-oauth、bitbucket-oauth、...オブジェクトを含み&lt;a href=&quot;06-config.md#gitlab-oauth&quot;&gt;、configの仕様に&lt;/a&gt;従うJSON形式のオブジェクトである必要があります。</target>
        </trans-unit>
        <trans-unit id="3ed00a9880a9e50789f89e7aab7d95b03db98829" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COMPOSER_CACHE_DIR&lt;/code&gt; var allows you to change the Composer cache directory, which is also configurable via the &lt;a href=&quot;06-config.md#cache-dir&quot;&gt;&lt;code&gt;cache-dir&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">&lt;code&gt;COMPOSER_CACHE_DIR&lt;/code&gt; 変数を使用すると、Composerキャッシュディレクトリを変更できます。これは、 &lt;a href=&quot;06-config.md#cache-dir&quot;&gt; &lt;code&gt;cache-dir&lt;/code&gt; &lt;/a&gt;オプションを使用して構成することもできます。</target>
        </trans-unit>
        <trans-unit id="7bc49fec4bcc895b60c5179e29c54bb2670855e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COMPOSER_HOME&lt;/code&gt; var allows you to change the Composer home directory. This is a hidden, global (per-user on the machine) directory that is shared between all projects.</source>
          <target state="translated">&lt;code&gt;COMPOSER_HOME&lt;/code&gt; 変数を使用すると、Composerのホームディレクトリを変更できます。 これは、すべてのプロジェクト間で共有される非表示のグローバル（マシン上のユーザーごと）ディレクトリです。</target>
        </trans-unit>
        <trans-unit id="e041cfbe9bb1437b512da0ba6bc16c640c5d064f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;^&lt;/code&gt; operator behaves very similarly but it sticks closer to semantic versioning, and will always allow non-breaking updates. For example &lt;code&gt;^1.2.3&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/code&gt; as none of the releases until 2.0 should break backwards compatibility. For pre-1.0 versions it also acts with safety in mind and treats &lt;code&gt;^0.3&lt;/code&gt; as &lt;code&gt;&amp;gt;=0.3.0 &amp;lt;0.4.0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; 演算子の動作は非常に似ていますが、セマンティックバージョニングに固執しており、常に互換性のある更新が可能です。 たとえば、 &lt;code&gt;^1.2.3&lt;/code&gt; は &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/code&gt; と同等です。これは、2.0までのリリースでは下位互換性が失われないためです。 1.0より前のバージョンでは、安全性も考慮して動作し、 &lt;code&gt;^0.3&lt;/code&gt; を &lt;code&gt;&amp;gt;=0.3.0 &amp;lt;0.4.0&lt;/code&gt; として扱います。</target>
        </trans-unit>
        <trans-unit id="015e5b54a0eec0b1d03e7f482cd6462e60215bba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;browse&lt;/code&gt; (aliased to &lt;code&gt;home&lt;/code&gt;) opens a package's repository URL or homepage in your browser.</source>
          <target state="translated">&lt;code&gt;browse&lt;/code&gt; （エイリアスは &lt;code&gt;home&lt;/code&gt; ）は、パッケージのリポジトリURLまたはホームページをブラウザで開きます。</target>
        </trans-unit>
        <trans-unit id="e24a601ed15c83838a05734062b36f958f6fe9aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;classmap&lt;/code&gt; references are all combined, during install/update, into a single key =&amp;gt; value array which may be found in the generated file &lt;code&gt;vendor/composer/autoload_classmap.php&lt;/code&gt;. This map is built by scanning for classes in all &lt;code&gt;.php&lt;/code&gt; and &lt;code&gt;.inc&lt;/code&gt; files in the given directories/files.</source>
          <target state="translated">&lt;code&gt;classmap&lt;/code&gt; 参照はすべて、インストール/更新時に、生成されたファイル &lt;code&gt;vendor/composer/autoload_classmap.php&lt;/code&gt; にある単一のキー=&amp;gt;値配列に結合されます。 このマップは、指定されたディレクトリ/ファイル内のすべての &lt;code&gt;.php&lt;/code&gt; および &lt;code&gt;.inc&lt;/code&gt; ファイル内のクラスをスキャンして構築されます。</target>
        </trans-unit>
        <trans-unit id="21bbbda97714f24cc525ea7078e6201890999863" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;config&lt;/code&gt; command allows you to edit composer config settings and repositories in either the local &lt;code&gt;composer.json&lt;/code&gt; file or the global &lt;code&gt;config.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; コマンドを使用すると、ローカル &lt;code&gt;composer.json&lt;/code&gt; ファイルまたはグローバル &lt;code&gt;config.json&lt;/code&gt; ファイルのいずれかのcomposer構成設定とリポジトリーを編集できます。</target>
        </trans-unit>
        <trans-unit id="c6c37718b606670d0260bf58b8957a8aa19464e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;depends&lt;/code&gt; command tells you which other packages depend on a certain package. As with installation &lt;code&gt;require-dev&lt;/code&gt; relationships are only considered for the root package.</source>
          <target state="translated">&lt;code&gt;depends&lt;/code&gt; コマンドは、他のどのパッケージが特定のパッケージに依存しているかを通知します。 インストール &lt;code&gt;require-dev&lt;/code&gt; 同様に、 require-dev関係はルートパッケージに対してのみ考慮されます。</target>
        </trans-unit>
        <trans-unit id="cd8cb2da2827dbba6abaedf322dadfb22ed9c77d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dev-master&lt;/code&gt; branch is one in your main VCS repo. It is rather common that someone will want the latest master dev version. Thus, Composer allows you to alias your &lt;code&gt;dev-master&lt;/code&gt; branch to a &lt;code&gt;1.0.x-dev&lt;/code&gt; version. It is done by specifying a &lt;code&gt;branch-alias&lt;/code&gt; field under &lt;code&gt;extra&lt;/code&gt; in &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;dev-master&lt;/code&gt; ブランチはメインのVCSリポジトリの1つです。 誰かが最新のマスター開発バージョンを必要とすることはかなり一般的です。 したがって、Composerでは、 &lt;code&gt;dev-master&lt;/code&gt; ブランチに &lt;code&gt;1.0.x-dev&lt;/code&gt; バージョンのエイリアスを付けることができます。 これは、 &lt;code&gt;composer.json&lt;/code&gt; の &lt;code&gt;extra&lt;/code&gt; で &lt;code&gt;branch-alias&lt;/code&gt; フィールドを指定することによって行われます。</target>
        </trans-unit>
        <trans-unit id="3ffd5faf0b39f88ce9eee783d1d943fc47e2604b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;install&lt;/code&gt; command reads the &lt;code&gt;composer.json&lt;/code&gt; file from the current directory, resolves the dependencies, and installs them into &lt;code&gt;vendor&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;install&lt;/code&gt; コマンドは、現在のディレクトリから &lt;code&gt;composer.json&lt;/code&gt; ファイルを読み取り、依存関係を解決して、それらを &lt;code&gt;vendor&lt;/code&gt; にインストールします。</target>
        </trans-unit>
        <trans-unit id="af9d00ff9fc127804bb95896f7496fcf274263e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;notify-batch&lt;/code&gt; field allows you to specify a URL that will be called every time a user installs a package. The URL can be either an absolute path (that will use the same domain as the repository) or a fully qualified URL.</source>
          <target state="translated">&lt;code&gt;notify-batch&lt;/code&gt; フィールドでは、ユーザーがパッケージをインストールするたびに呼び出されるURLを指定できます。 URLは、絶対パス（リポジトリーと同じドメインを使用する）または完全修飾URLのいずれかです。</target>
        </trans-unit>
        <trans-unit id="5dc0d928853964ca3fd6729ac78fc54fe7baf249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outdated&lt;/code&gt; command shows a list of installed packages that have updates available, including their current and latest versions. This is basically an alias for &lt;code&gt;composer show -lo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;outdated&lt;/code&gt; コマンドは、現在および最新のバージョンを含む、利用可能な更新があるインストール済みパッケージのリストを表示します。 これは基本的には &lt;code&gt;composer show -lo&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="1fc3b3ae8a67c22d97268e322bf22ea6082ae19e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;packages.json&lt;/code&gt; file is loaded using a PHP stream. You can set extra options on that stream using the &lt;code&gt;options&lt;/code&gt; parameter. You can set any valid PHP stream context option. See &lt;a href=&quot;https://php.net/manual/en/context.php&quot;&gt;Context options and parameters&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;packages.json&lt;/code&gt; ファイルは、PHPストリームを使用してロードされます。 &lt;code&gt;options&lt;/code&gt; パラメータを使用して、そのストリームに追加のオプションを設定できます。 任意の有効なPHPストリームコンテキストオプションを設定できます。 詳細については、 &lt;a href=&quot;https://php.net/manual/en/context.php&quot;&gt;コンテキストオプションとパラメータ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="71efcc29e40b42abc0b13e32c0ea8a45315fc701" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prohibits&lt;/code&gt; command tells you which packages are blocking a given package from being installed. Specify a version constraint to verify whether upgrades can be performed in your project, and if not why not. See the following example:</source>
          <target state="translated">&lt;code&gt;prohibits&lt;/code&gt; コマンドは、特定のパッケージのインストールをブロックしているパッケージを通知します。 バージョンの制約を指定して、プロジェクトでアップグレードを実行できるかどうかを確認し、できない場合はその理由を確認します。 次の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="f4fb232cdcc4af02a2a6fc8964c4e4e68c3772b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provider-includes&lt;/code&gt; field allows you to list a set of files that list package names provided by this repository. The hash should be a sha256 of the files in this case.</source>
          <target state="translated">&lt;code&gt;provider-includes&lt;/code&gt; フィールドを使用すると、このリポジトリーによって提供されるパッケージ名をリストするファイルのセットをリストできます。 この場合、ハッシュはファイルのsha256である必要があります。</target>
        </trans-unit>
        <trans-unit id="99a72339c9fbd5f71d239e716a19d3ef78a99394" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;providers-url&lt;/code&gt; describes how provider files are found on the server. It is an absolute path from the repository root. It must contain the placeholders &lt;code&gt;%package%&lt;/code&gt; and &lt;code&gt;%hash%&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;providers-url&lt;/code&gt; は、サーバー上でプロバイダーファイルがどのように検出されるかを示します。 リポジトリのルートからの絶対パスです。 プレースホルダー &lt;code&gt;%package%&lt;/code&gt; および &lt;code&gt;%hash%&lt;/code&gt; が含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="28b5498e54a0d27ed7d7003af00bb9c9ef721186" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;remove&lt;/code&gt; command removes packages from the &lt;code&gt;composer.json&lt;/code&gt; file from the current directory.</source>
          <target state="translated">&lt;code&gt;remove&lt;/code&gt; コマンドは、現在のディレクトリの &lt;code&gt;composer.json&lt;/code&gt; ファイルからパッケージを削除します。</target>
        </trans-unit>
        <trans-unit id="a2a826c2fb4b4f08c3a69b19718facb4884e979c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; command adds new packages to the &lt;code&gt;composer.json&lt;/code&gt; file from the current directory. If no file exists one will be created on the fly.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; コマンドは、現在のディレクトリから &lt;code&gt;composer.json&lt;/code&gt; ファイルに新しいパッケージを追加します。 ファイルが存在しない場合は、その場で作成されます。</target>
        </trans-unit>
        <trans-unit id="3ab1e58fb4e10f7b6b5e0e76a52020bdc4252e34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; key</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; キー</target>
        </trans-unit>
        <trans-unit id="346d1272d0323d4c3803e8e8e133e5fcf9d5248b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;true&lt;/code&gt; value indicates that the package is truly abandoned while the &lt;code&gt;&quot;company/newpackage&quot;&lt;/code&gt; value specifies that the package is replaced by the &lt;code&gt;company/newpackage&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 値はパッケージが本当に放棄されていることを示し、 &lt;code&gt;&quot;company/newpackage&quot;&lt;/code&gt; 値はパッケージが &lt;code&gt;company/newpackage&lt;/code&gt; パッケージで置き換えられることを示します。</target>
        </trans-unit>
        <trans-unit id="c56cadbd66f034c7c3ee76e3d00211e36a3d21e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~&lt;/code&gt; operator is best explained by example: &lt;code&gt;~1.2&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.2 &amp;lt;2.0.0&lt;/code&gt;, while &lt;code&gt;~1.2.3&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;1.3.0&lt;/code&gt;. As you can see it is mostly useful for projects respecting &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;. A common usage would be to mark the minimum minor version you depend on, like &lt;code&gt;~1.2&lt;/code&gt; (which allows anything up to, but not including, 2.0). Since in theory there should be no backwards compatibility breaks until 2.0, that works well. Another way of looking at it is that using &lt;code&gt;~&lt;/code&gt; specifies a minimum version, but allows the last digit specified to go up.</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; 演算子は例で最もよく説明されています &lt;code&gt;&amp;gt;=1.2 &amp;lt;2.0.0&lt;/code&gt; は&amp;gt; = 1.2 &amp;lt;2.0.0と同等であり、 &lt;code&gt;~1.2.3&lt;/code&gt; は &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;1.3.0&lt;/code&gt; と同等です。 ご覧のように、 &lt;a href=&quot;https://semver.org/&quot;&gt;セマンティックバージョニングを&lt;/a&gt;尊重するプロジェクトに最も役立ちます。 一般的な使用法は、依存する最小のマイナーバージョンにマークを付けることです。 理論的には、2.0までの下位互換性の問題はないはずなので、うまく機能します。 別の見方をすると、 &lt;code&gt;~&lt;/code&gt; を使用すると最小バージョンが指定されますが、指定された最後の桁が上がることができます。</target>
        </trans-unit>
        <trans-unit id="f025912d98018c171a9e7aa4c512d6735e081304" translate="yes" xml:space="preserve">
          <source>The BitBucket driver uses OAuth to access your private repositories via the BitBucket REST APIs and you will need to create an OAuth consumer to use the driver, please refer to &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html&quot;&gt;Atlassian's Documentation&lt;/a&gt;. You will need to fill the callback url with something to satisfy BitBucket, but the address does not need to go anywhere and is not used by Composer.</source>
          <target state="translated">BitBucketドライバーはOAuthを使用して、BitBucket REST API経由でプライベートリポジトリにアクセスします。ドライバーを使用するには、OAuthコンシューマーを作成する必要があります。 &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html&quot;&gt;アトラシアンのドキュメント&lt;/a&gt;を参照してください。 BitBucketを満たすためにコールバックURLに何かを入力する必要がありますが、アドレスはどこにでも移動する必要がなく、Composerによって使用されません。</target>
        </trans-unit>
        <trans-unit id="d8325f01cfc89ecc5834c22272e499dc2a35975d" translate="yes" xml:space="preserve">
          <source>The Custom Installer class</source>
          <target state="translated">カスタムインストーラクラス</target>
        </trans-unit>
        <trans-unit id="9ffda155dc61c6b7fc0c53c17b097166f828397f" translate="yes" xml:space="preserve">
          <source>The Installer class, e.g.: &lt;code&gt;My\Project\Composer\Installer.php&lt;/code&gt;, containing a class that implements &lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt;.</source>
          <target state="translated">インストーラークラス。例： &lt;code&gt;My\Project\Composer\Installer.php&lt;/code&gt; &lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt; を実装するクラスを含みます。</target>
        </trans-unit>
        <trans-unit id="40980219df2f4506ac88e5c28f53b42bdd97d1a6" translate="yes" xml:space="preserve">
          <source>The InstallerInterface class defines the following methods (please see the source for the exact signature):</source>
          <target state="translated">InstallerInterface クラスは、以下のメソッドを定義しています (正確なシグネチャについてはソースを参照ください)。</target>
        </trans-unit>
        <trans-unit id="6a8be988f00a6babc58dafb4dd2328cbd191b0a7" translate="yes" xml:space="preserve">
          <source>The PSR-0 references are all combined, during install/update, into a single key =&amp;gt; value array which may be found in the generated file &lt;code&gt;vendor/composer/autoload_namespaces.php&lt;/code&gt;.</source>
          <target state="translated">PSR-0の参照はすべて、インストール/更新時に、生成されたファイル &lt;code&gt;vendor/composer/autoload_namespaces.php&lt;/code&gt; にある単一のキー=&amp;gt;値の配列に結合されます。</target>
        </trans-unit>
        <trans-unit id="e895bca51e7dbca56269fca833da7d53335b08ce" translate="yes" xml:space="preserve">
          <source>The PSR-0 style is not limited to namespace declarations only but may be specified right down to the class level. This can be useful for libraries with only one class in the global namespace. If the php source file is also located in the root of the package, for example, it may be declared like this:</source>
          <target state="translated">PSR-0スタイルは名前空間宣言のみに限定されるものではなく、クラスレベルまで指定することができます。これは、グローバルな名前空間に一つのクラスしかないライブラリの場合に便利です。例えば、php のソースファイルがパッケージのルートにもある場合は、次のように宣言することができます。</target>
        </trans-unit>
        <trans-unit id="cbb9bada46ef9caab4f699c77fb22360668e31ba" translate="yes" xml:space="preserve">
          <source>The PSR-4 references are all combined, during install/update, into a single key =&amp;gt; value array which may be found in the generated file &lt;code&gt;vendor/composer/autoload_psr4.php&lt;/code&gt;.</source>
          <target state="translated">PSR-4の参照はすべて、インストール/更新時に、生成されたファイル &lt;code&gt;vendor/composer/autoload_psr4.php&lt;/code&gt; にある単一のキー=&amp;gt;値の配列に結合されます。</target>
        </trans-unit>
        <trans-unit id="ea8afc8984ffee8650e20f4736a1022091c847c6" translate="yes" xml:space="preserve">
          <source>The Plugin class</source>
          <target state="translated">プラグインクラス</target>
        </trans-unit>
        <trans-unit id="b068549699c4405448400cc7e68c4a937ff32939" translate="yes" xml:space="preserve">
          <source>The Plugin class, e.g.: &lt;code&gt;My\Project\Composer\Plugin.php&lt;/code&gt;, containing a class that implements &lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt;.</source>
          <target state="translated">プラグインクラス。例： &lt;code&gt;My\Project\Composer\Plugin.php&lt;/code&gt; &lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt; を実装するクラスを含みます。</target>
        </trans-unit>
        <trans-unit id="a9837d2cfdfe1047f666926235fe851440587ed9" translate="yes" xml:space="preserve">
          <source>The VCS driver to be used is detected automatically based on the URL. However, should you need to specify one for whatever reason, you can use &lt;code&gt;git-bitbucket&lt;/code&gt;, &lt;code&gt;hg-bitbucket&lt;/code&gt;, &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;, &lt;code&gt;perforce&lt;/code&gt;, &lt;code&gt;fossil&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;svn&lt;/code&gt; or &lt;code&gt;hg&lt;/code&gt; as the repository type instead of &lt;code&gt;vcs&lt;/code&gt;.</source>
          <target state="translated">使用するVCSドライバーは、URLに基​​づいて自動的に検出されます。 ただし、 &lt;code&gt;git-bitbucket&lt;/code&gt; 理由で指定する必要がある場合は、 vcsの代わりにgit-bitbucket 、 &lt;code&gt;hg-bitbucket&lt;/code&gt; 、 &lt;code&gt;github&lt;/code&gt; 、 &lt;code&gt;gitlab&lt;/code&gt; 、 &lt;code&gt;perforce&lt;/code&gt; 、 &lt;code&gt;fossil&lt;/code&gt; 、 &lt;code&gt;git&lt;/code&gt; 、 &lt;code&gt;svn&lt;/code&gt; または &lt;code&gt;hg&lt;/code&gt; をリポジトリタイプとして使用 &lt;code&gt;vcs&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="5c420979637a5530647ac1a7b4bf05aaac4a2eb2" translate="yes" xml:space="preserve">
          <source>The alias must be a comparable dev version, and the &lt;code&gt;branch-alias&lt;/code&gt; must be present on the branch that it references. For &lt;code&gt;dev-master&lt;/code&gt;, you need to commit it on the &lt;code&gt;master&lt;/code&gt; branch.</source>
          <target state="translated">エイリアスは同等のdevバージョンである必要があり、 &lt;code&gt;branch-alias&lt;/code&gt; はそれが参照するブランチに存在する必要があります。 &lt;code&gt;dev-master&lt;/code&gt; の場合、 &lt;code&gt;master&lt;/code&gt; ブランチでコミットする必要があります。</target>
        </trans-unit>
        <trans-unit id="c2cac23aeb2cc9f6f9a5c06f625e856aa7411284" translate="yes" xml:space="preserve">
          <source>The authors of the package. This is an array of objects.</source>
          <target state="translated">パッケージの作者です。これはオブジェクトの配列です。</target>
        </trans-unit>
        <trans-unit id="7eb0326398d1c95d61a67bf85374074040d3aaf6" translate="yes" xml:space="preserve">
          <source>The autoloader can have quite a substantial impact on your request time (50-100ms per request in large frameworks using a lot of classes). See the &lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;article about optimizing the autoloader&lt;/a&gt; for more details on how to reduce this impact.</source>
          <target state="translated">オートローダーは、リクエスト時間にかなりの影響を与える可能性があります（多数のクラスを使用する大規模なフレームワークでは、リクエストごとに50〜100ミリ秒）。 この影響を減らす方法の詳細については&lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;、オートローダーの最適化に関する記事を&lt;/a&gt;参照してください 。</target>
        </trans-unit>
        <trans-unit id="6edc136191c54700a29b49ad70fd35ef21540920" translate="yes" xml:space="preserve">
          <source>The check-platform-reqs command checks that your PHP and extensions versions match the platform requirements of the installed packages. This can be used to verify that a production server has all the extensions needed to run a project after installing it for example.</source>
          <target state="translated">check-platform-reqs コマンドは、PHP と拡張モジュールのバージョンが インストールされているパッケージのプラットフォーム要件と一致しているかどうかをチェックします。これは、例えば本番サーバをインストールした後に、 プロジェクトを実行するのに必要なすべての拡張機能があるかどうかを確認するために使用できます。</target>
        </trans-unit>
        <trans-unit id="7214bc8cd5c44f89fec9925261db070ce7d274d6" translate="yes" xml:space="preserve">
          <source>The class defining the Composer plugin must implement the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/PluginInterface.php&quot;&gt;&lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt;&lt;/a&gt;. It can then register the Custom Installer in its &lt;code&gt;activate()&lt;/code&gt; method.</source>
          <target state="translated">Composerプラグインを定義するクラスは、 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/PluginInterface.php&quot;&gt; &lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt; &lt;/a&gt;実装する必要があります。 その後、 &lt;code&gt;activate()&lt;/code&gt; メソッドでカスタムインストーラーを登録できます。</target>
        </trans-unit>
        <trans-unit id="78950139234e498468b2a4ae5ec9d8e2bc496990" translate="yes" xml:space="preserve">
          <source>The class may be placed in any location and have any name, as long as it is autoloadable and matches the &lt;code&gt;extra.class&lt;/code&gt; element in the package definition.</source>
          <target state="translated">クラスは、自動ロード可能であり、パッケージ定義の &lt;code&gt;extra.class&lt;/code&gt; 要素と一致する限り、任意の場所に配置でき、任意の名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="56dd19048623d8951439a67803c703f7d2bdaa57" translate="yes" xml:space="preserve">
          <source>The class that executes the custom installation should implement the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/InstallerInterface.php&quot;&gt;&lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt;&lt;/a&gt; (or extend another installer that implements that interface). It defines the &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; string as it will be recognized by packages that will use this installer in the &lt;code&gt;supports()&lt;/code&gt; method.</source>
          <target state="translated">カスタムインストールを実行するクラスは、 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/InstallerInterface.php&quot;&gt; &lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt; &lt;/a&gt;を実装する必要があります（または、そのインターフェースを実装する別のインストーラーを拡張します）。 文字列&lt;a href=&quot;../04-schema.md#type&quot;&gt;タイプを&lt;/a&gt;定義します &lt;code&gt;supports()&lt;/code&gt; メソッドでこのインストーラを使用するパッケージによって認識されます。</target>
        </trans-unit>
        <trans-unit id="8131e8038e7a59be229bcd80fa0d944009da9be3" translate="yes" xml:space="preserve">
          <source>The classmap generator will ignore all files in the paths configured here. The paths are absolute from the package root directory (i.e. composer.json location), and support &lt;code&gt;*&lt;/code&gt; to match anything but a slash, and &lt;code&gt;**&lt;/code&gt; to match anything. &lt;code&gt;**&lt;/code&gt; is implicitly added to the end of the paths.</source>
          <target state="translated">クラスマップ生成プログラムは、ここで構成されたパス内のすべてのファイルを無視します。 パスは、パッケージのルートディレクトリ（つまり、composer.jsonの場所）からの絶対パスであり、スラッシュ以外のすべてに一致する &lt;code&gt;*&lt;/code&gt; およびすべてに一致する &lt;code&gt;**&lt;/code&gt; をサポートします。 &lt;code&gt;**&lt;/code&gt; は暗黙的にパスの最後に追加されます。</target>
        </trans-unit>
        <trans-unit id="c8aa46cca88981162bd728fbbc3eec19ff704de5" translate="yes" xml:space="preserve">
          <source>The color coding is as such:</source>
          <target state="translated">色分けはこのようになっています。</target>
        </trans-unit>
        <trans-unit id="3406243459548a65cba91c96d7498aeca9791af0" translate="yes" xml:space="preserve">
          <source>The composer.json Schema</source>
          <target state="translated">composer.json スキーマ</target>
        </trans-unit>
        <trans-unit id="f7d96ecd6ebde5fd4e1ab5d82811712e5da91ffa" translate="yes" xml:space="preserve">
          <source>The current composer plugin API version is 1.1.0.</source>
          <target state="translated">現在のコンポーザープラグインのAPIバージョンは1.1.0です。</target>
        </trans-unit>
        <trans-unit id="7e11cbbb09c0ca65a8dd4a02c0c684bedae13af1" translate="yes" xml:space="preserve">
          <source>The default file Satis looks for is &lt;code&gt;satis.json&lt;/code&gt; in the root of the repository.</source>
          <target state="translated">Satisが検索するデフォルトファイルは、リポジトリのルートにある &lt;code&gt;satis.json&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="abc92330ba7d4489dae7ca56a23c07eaff4520aa" translate="yes" xml:space="preserve">
          <source>The dots indicate array nesting, a max depth of 3 levels is allowed though. The above would set &lt;code&gt;&quot;extra&quot;: { &quot;foo&quot;: { &quot;bar&quot;: &quot;value&quot; } }&lt;/code&gt;.</source>
          <target state="translated">ドットは配列のネストを示していますが、最大深度は3レベルまで可能です。 上記は &lt;code&gt;&quot;extra&quot;: { &quot;foo&quot;: { &quot;bar&quot;: &quot;value&quot; } }&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="74881a8aac37fc93dea5343409e2d729aa3c5f0c" translate="yes" xml:space="preserve">
          <source>The env var accepts domains, IP addresses, and IP address blocks in CIDR notation. You can restrict the filter to a particular port (e.g. &lt;code&gt;:80&lt;/code&gt;). You can also set it to &lt;code&gt;*&lt;/code&gt; to ignore the proxy for all HTTP requests.</source>
          <target state="translated">env varは、ドメイン、IPアドレス、およびIPアドレスブロックをCIDR表記で受け入れます。 フィルターを特定のポート（たとえば &lt;code&gt;:80&lt;/code&gt; ）に制限できます。 &lt;code&gt;*&lt;/code&gt; に設定して、すべてのHTTPリクエストのプロキシを無視することもできます。</target>
        </trans-unit>
        <trans-unit id="56026558ef4f20a6fe91ce4862f665827754603a" translate="yes" xml:space="preserve">
          <source>The example above has Composer itself in its require-dev, which allows you to use the Composer classes in your test suite for example.</source>
          <target state="translated">上の例では、require-dev に Composer 自体が含まれているので、例えばテストスイートで Composer クラスを使用することができます。</target>
        </trans-unit>
        <trans-unit id="e055753e0d7efaac55d01e0c0c7e3200bf65f47f" translate="yes" xml:space="preserve">
          <source>The example demonstrates that it is quite simple to extend the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/LibraryInstaller.php&quot;&gt;&lt;code&gt;Composer\Installer\LibraryInstaller&lt;/code&gt;&lt;/a&gt; class to strip a prefix (&lt;code&gt;phpdocumentor/template-&lt;/code&gt;) and use the remaining part to assemble a completely different installation path.</source>
          <target state="translated">この例は、 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/LibraryInstaller.php&quot;&gt; &lt;code&gt;Composer\Installer\LibraryInstaller&lt;/code&gt; &lt;/a&gt;クラスを拡張してプレフィックス（ &lt;code&gt;phpdocumentor/template-&lt;/code&gt; ）を削除し 、残りの部分を使用して完全に異なるインストールパスを組み立てるのが非常に簡単であることを示しています。</target>
        </trans-unit>
        <trans-unit id="81ae7fa842663d4675156a0236029004afaad470" translate="yes" xml:space="preserve">
          <source>The example will include &lt;code&gt;/dir/foo/bar/file&lt;/code&gt;, &lt;code&gt;/foo/bar/baz&lt;/code&gt;, &lt;code&gt;/file.php&lt;/code&gt;, &lt;code&gt;/foo/my.test&lt;/code&gt; but it will exclude &lt;code&gt;/foo/bar/any&lt;/code&gt;, &lt;code&gt;/foo/baz&lt;/code&gt;, and &lt;code&gt;/my.test&lt;/code&gt;.</source>
          <target state="translated">この例には &lt;code&gt;/dir/foo/bar/file&lt;/code&gt; 、 &lt;code&gt;/foo/bar/baz&lt;/code&gt; 、 / &lt;code&gt;/file.php&lt;/code&gt; 、 &lt;code&gt;/foo/bar/any&lt;/code&gt; &lt;code&gt;/foo/my.test&lt;/code&gt; が含まれますが、 / foo / bar / any 、 &lt;code&gt;/foo/baz&lt;/code&gt; 、および &lt;code&gt;/my.test&lt;/code&gt; は除外されます .test 。</target>
        </trans-unit>
        <trans-unit id="1a0f3bc9bad979ddd627af3051a98ef3a26f4b7d" translate="yes" xml:space="preserve">
          <source>The file above declares that acme/foo and acme/bar can be found in this repository, by loading the file referenced by &lt;code&gt;providers-url&lt;/code&gt;, replacing &lt;code&gt;%package%&lt;/code&gt; by the vendor namespaced package name and &lt;code&gt;%hash%&lt;/code&gt; by the sha256 field. Those files themselves contain package definitions as described &lt;a href=&quot;#packages&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">上記のファイルは、 &lt;code&gt;providers-url&lt;/code&gt; によって参照されるファイルをロードし、 &lt;code&gt;%package%&lt;/code&gt; をベンダー名前空間付きパッケージ名で置き換え、 &lt;code&gt;%hash%&lt;/code&gt; をsha256フィールドで置き換えることにより、acme / fooおよびacme / barがこのリポジトリで見つかることを宣言しています。 これらのファイル自体には、 &lt;a href=&quot;#packages&quot;&gt;上記の&lt;/a&gt;パッケージ定義が含まれています。</target>
        </trans-unit>
        <trans-unit id="6d04c87c83c5973964832e301e5817c17e04115c" translate="yes" xml:space="preserve">
          <source>The file should contain a set of hostnames followed each with their own username/password pairs, for example:</source>
          <target state="translated">ファイルにはホスト名のセットが含まれていなければなりませんが、それぞれがそれぞれのユーザ名とパスワードのペアを持っていなければなりません。</target>
        </trans-unit>
        <trans-unit id="091badbd3ca13442d4996bee76cff03f2295613e" translate="yes" xml:space="preserve">
          <source>The first (and often only) thing you specify in &lt;code&gt;composer.json&lt;/code&gt; is the &lt;a href=&quot;04-schema.md#require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; key. You are simply telling Composer which packages your project depends on.</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; で最初に指定する（多くの場合のみ）ものは、 &lt;a href=&quot;04-schema.md#require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;キーです。 プロジェクトが依存しているパッケージをComposerに伝えるだけです。</target>
        </trans-unit>
        <trans-unit id="4068eb0da4bab0dfa6227d4ca7a2283c9ce6189b" translate="yes" xml:space="preserve">
          <source>The following options are available with every command:</source>
          <target state="translated">以下のオプションは、すべてのコマンドで利用可能です。</target>
        </trans-unit>
        <trans-unit id="3ab6a9f1a0bbaef19cacfbc5c31136467bf2e22d" translate="yes" xml:space="preserve">
          <source>The following options are supported:</source>
          <target state="translated">以下のオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="688e77612c7849c6eb5d4e0fbd7cfa158fa310b2" translate="yes" xml:space="preserve">
          <source>The following repository types are supported:</source>
          <target state="translated">以下のリポジトリタイプがサポートされています。</target>
        </trans-unit>
        <trans-unit id="38c69aebc2faf396ee7792986c5789b23a388455" translate="yes" xml:space="preserve">
          <source>The format is like package links above, except that the values are free text and not version constraints.</source>
          <target state="translated">フォーマットは上記のパッケージリンクのようなものですが、値がフリーテキストであり、バージョンの制約を受けないことを除いては、このような形式になっています。</target>
        </trans-unit>
        <trans-unit id="576aa3666a88d5083d4ea7e2b38f285df4a4c92c" translate="yes" xml:space="preserve">
          <source>The generated lock file will use the same name: &lt;code&gt;composer-other.lock&lt;/code&gt; in this example.</source>
          <target state="translated">生成されたロックファイルは同じ名前を使用します。この例では &lt;code&gt;composer-other.lock&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fe31ec4a7957f674f8ecc0410e91ef85456dc028" translate="yes" xml:space="preserve">
          <source>The global command allows you to run other commands like &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; as if you were running them from the &lt;a href=&quot;#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt; directory.</source>
          <target state="translated">グローバルコマンドを使用すると、 &lt;a href=&quot;#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt;ディレクトリから実行しているかのように、 &lt;code&gt;install&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、 &lt;code&gt;require&lt;/code&gt; 、 &lt;code&gt;update&lt;/code&gt; などの他のコマンドを実行できます。</target>
        </trans-unit>
        <trans-unit id="09296591caac805b00e1c7c545308983c42db440" translate="yes" xml:space="preserve">
          <source>The installer will check a few PHP settings and then download &lt;code&gt;composer.phar&lt;/code&gt; to your working directory. This file is the Composer binary. It is a PHAR (PHP archive), which is an archive format for PHP which can be run on the command line, amongst other things.</source>
          <target state="translated">インストーラーはいくつかのPHP設定をチェックしてから、 &lt;code&gt;composer.phar&lt;/code&gt; を作業ディレクトリにダウンロードします。 このファイルはComposerバイナリです。 これはPHAR（PHPアーカイブ）であり、とりわけ、コマンドラインで実行できるPHPのアーカイブ形式です。</target>
        </trans-unit>
        <trans-unit id="6ab73b5d5179ad996c84e68defcb2f4641ccefde" translate="yes" xml:space="preserve">
          <source>The license of the package. This can be either a string or an array of strings.</source>
          <target state="translated">パッケージのライセンス。これは文字列か文字列の配列のいずれかです。</target>
        </trans-unit>
        <trans-unit id="9b254b0f71f0fb069aac1d74943b185fdca724e6" translate="yes" xml:space="preserve">
          <source>The local package will be symlinked if possible, in which case the output in the console will read &lt;code&gt;Symlinking from ../../packages/my-package&lt;/code&gt;. If symlinking is &lt;em&gt;not&lt;/em&gt; possible the package will be copied. In that case, the console will output &lt;code&gt;Mirrored from ../../packages/my-package&lt;/code&gt;.</source>
          <target state="translated">ローカルパッケージは、可能であれば &lt;code&gt;Symlinking from ../../packages/my-package&lt;/code&gt; 。その場合、コンソールの出力には../../packages/my-packageからのシンボリックリンクが表示されます。 シンボリックリンクが&lt;em&gt;できない&lt;/em&gt;場合は、パッケージがコピーされます。 その場合、コンソールは &lt;code&gt;Mirrored from ../../packages/my-package&lt;/code&gt; を出力します 。</target>
        </trans-unit>
        <trans-unit id="36c3a0eac5c63bf1776205e5e15f95251c900625" translate="yes" xml:space="preserve">
          <source>The main advantage of the auth.json file is that it can be gitignored so that every developer in your team can place their own credentials in there, which makes revocation of credentials much easier than if you all share the same.</source>
          <target state="translated">auth.json ファイルの主な利点は、チーム内のすべての開発者が自分の認証情報を置くことができるように gitignored することができることです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
