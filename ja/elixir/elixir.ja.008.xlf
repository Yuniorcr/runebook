<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="elixir">
    <body>
      <group id="elixir">
        <trans-unit id="490a95607dded73b4e2c7121c35b8a2a2901b097" translate="yes" xml:space="preserve">
          <source>Returns how many months there are in the given year.</source>
          <target state="translated">指定した年の月数を返します。</target>
        </trans-unit>
        <trans-unit id="da0d66142abc50d51d45fadbe1b7ceb2bf128de8" translate="yes" xml:space="preserve">
          <source>Returns if the given year is a leap year.</source>
          <target state="translated">指定した年がうるう年であるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="f5884d887fb7ba8b1601d037e06dde2d616f18cc" translate="yes" xml:space="preserve">
          <source>Returns information about the &lt;code&gt;path&lt;/code&gt;. If it exists, it returns a &lt;code&gt;{:ok, info}&lt;/code&gt; tuple, where info is a &lt;a href=&quot;file.stat&quot;&gt;&lt;code&gt;File.Stat&lt;/code&gt;&lt;/a&gt; struct. Returns &lt;code&gt;{:error, reason}&lt;/code&gt; with the same reasons as &lt;a href=&quot;#read/1&quot;&gt;&lt;code&gt;read/1&lt;/code&gt;&lt;/a&gt; if a failure occurs.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; に関する情報を返します。存在する場合は、 &lt;code&gt;{:ok, info}&lt;/code&gt; タプルを返します&lt;a href=&quot;file.stat&quot;&gt; &lt;code&gt;File.Stat&lt;/code&gt; &lt;/a&gt;はFile.Stat構造体です。失敗が発生した場合、&lt;a href=&quot;#read/1&quot;&gt; &lt;code&gt;read/1&lt;/code&gt; &lt;/a&gt;と同じ理由で &lt;code&gt;{:error, reason}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="71f428255ff2f929b5d980ed8e402267ff12f103" translate="yes" xml:space="preserve">
          <source>Returns information about the &lt;code&gt;path&lt;/code&gt;. If the file is a symlink, sets the &lt;code&gt;type&lt;/code&gt; to &lt;code&gt;:symlink&lt;/code&gt; and returns a &lt;a href=&quot;file.stat&quot;&gt;&lt;code&gt;File.Stat&lt;/code&gt;&lt;/a&gt; struct for the link. For any other file, returns exactly the same values as &lt;a href=&quot;#stat/2&quot;&gt;&lt;code&gt;stat/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; に関する情報を返します。ファイルがシンボリックリンクの場合、 &lt;code&gt;type&lt;/code&gt; を &lt;code&gt;:symlink&lt;/code&gt; に設定し、リンクの&lt;a href=&quot;file.stat&quot;&gt; &lt;code&gt;File.Stat&lt;/code&gt; &lt;/a&gt;構造体を返します。その他のファイルの場合、&lt;a href=&quot;#stat/2&quot;&gt; &lt;code&gt;stat/2&lt;/code&gt; &lt;/a&gt;とまったく同じ値を返します。</target>
        </trans-unit>
        <trans-unit id="2202568b5257269fabf7b8610f1f9626579ccc58" translate="yes" xml:space="preserve">
          <source>Returns information about the &lt;code&gt;port&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; if the port is closed.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; に関する情報、またはポートが閉じている場合は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="83f9b5f443afc3ae957189755eaa98e7c3fb2722" translate="yes" xml:space="preserve">
          <source>Returns information about the process identified by &lt;code&gt;pid&lt;/code&gt;, or returns &lt;code&gt;nil&lt;/code&gt; if the process is not alive.</source>
          <target state="translated">&lt;code&gt;pid&lt;/code&gt; で識別されるプロセスに関する情報を返すか、プロセスが &lt;code&gt;nil&lt;/code&gt; ない場合はnilを返します。</target>
        </trans-unit>
        <trans-unit id="04a73d587974a8675e9a92ec0f5497b61cf34112" translate="yes" xml:space="preserve">
          <source>Returns list of lists containing &lt;code&gt;count&lt;/code&gt; elements each, where each new chunk starts &lt;code&gt;step&lt;/code&gt; elements into the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 個の要素をそれぞれ含むリストのリストを返します。各新しいチャンクは &lt;code&gt;enumerable&lt;/code&gt; への &lt;code&gt;step&lt;/code&gt; 要素を開始します。</target>
        </trans-unit>
        <trans-unit id="97c42435f2786e7a4559d668951c6de124e0b400" translate="yes" xml:space="preserve">
          <source>Returns registered &lt;code&gt;after_spawn&lt;/code&gt; callbacks.</source>
          <target state="translated">登録された &lt;code&gt;after_spawn&lt;/code&gt; コールバックを返します。</target>
        </trans-unit>
        <trans-unit id="35972be543b88cdbe520718e001cfd9da6a4c1a6" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;calendar#t:iso_days/0&quot;&gt;&lt;code&gt;Calendar.iso_days/0&lt;/code&gt;&lt;/a&gt; format of the specified date.</source>
          <target state="translated">指定された日付の&lt;a href=&quot;calendar#t:iso_days/0&quot;&gt; &lt;code&gt;Calendar.iso_days/0&lt;/code&gt; &lt;/a&gt;形式を返します。</target>
        </trans-unit>
        <trans-unit id="4d8fb3220039c4a989cf50dc53c6e73ba318cf3b" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;enumerable&lt;/code&gt; with each element wrapped in a tuple alongside its index.</source>
          <target state="translated">各要素がそのインデックスと一緒にタプルにラップされた &lt;code&gt;enumerable&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f6e24cfb2ae8f59a7578a010e574fc3caa012742" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;path&lt;/code&gt; with the &lt;code&gt;extension&lt;/code&gt; stripped.</source>
          <target state="translated">&lt;code&gt;extension&lt;/code&gt; 取り除いた &lt;code&gt;path&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dc74c30f8661f563864d03e8b3c44b66d1bd4aa7" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;pid&lt;/code&gt; or &lt;code&gt;{name, node}&lt;/code&gt; of a GenServer process, or &lt;code&gt;nil&lt;/code&gt; if no process is associated with the given &lt;code&gt;server&lt;/code&gt;.</source>
          <target state="translated">GenServerプロセスの &lt;code&gt;pid&lt;/code&gt; または &lt;code&gt;{name, node}&lt;/code&gt; を返し &lt;code&gt;server&lt;/code&gt; 。指定されたサーバーに関連付けられているプロセスがない場合は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="90365e0f63c31c851a4ea0a22762d8fd5340a36b" translate="yes" xml:space="preserve">
          <source>Returns the Erlang/OTP release number.</source>
          <target state="translated">Erlang/OTP のリリース番号を返します。</target>
        </trans-unit>
        <trans-unit id="bc57bd779fa06cd3c466e24b49175637b5fc12c9" translate="yes" xml:space="preserve">
          <source>Returns the IEx width for printing.</source>
          <target state="translated">印刷するための IEx の幅を返します。</target>
        </trans-unit>
        <trans-unit id="8dab0f32fd45479245e3d6084613b9547e47fae3" translate="yes" xml:space="preserve">
          <source>Returns the Mix target.</source>
          <target state="translated">Mixターゲットを返します。</target>
        </trans-unit>
        <trans-unit id="3cb31056e81f8170874a64e3b816a1cafeaf8b88" translate="yes" xml:space="preserve">
          <source>Returns the PID (process identifier) of the calling process.</source>
          <target state="translated">呼び出し元のプロセスの PID(プロセス識別子)を返します。</target>
        </trans-unit>
        <trans-unit id="28781d2a7b24b9b3e88b31850c6fffc73a81f172" translate="yes" xml:space="preserve">
          <source>Returns the PID of a new linked process started by the application of &lt;code&gt;fun&lt;/code&gt; on &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; に &lt;code&gt;fun&lt;/code&gt; を適用することによって開始された、新しくリンクされたプロセスのPIDを返します。</target>
        </trans-unit>
        <trans-unit id="2a1c4c6c2d4ba2c1a2bfd7c6cfe2d55559ccd904" translate="yes" xml:space="preserve">
          <source>Returns the PID of a new linked process started by the application of &lt;code&gt;module.function(args)&lt;/code&gt; on &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">戻り値のアプリケーションによって開始された新しいリンクプロセスのPID &lt;code&gt;module.function(args)&lt;/code&gt; 上の &lt;code&gt;node&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d1bea2590103786ac5c9572e9655db1dfaa04b8a" translate="yes" xml:space="preserve">
          <source>Returns the PID of a new process started by the application of &lt;code&gt;fun&lt;/code&gt; on &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; に &lt;code&gt;fun&lt;/code&gt; を適用して開始された新しいプロセスのPIDを返します。</target>
        </trans-unit>
        <trans-unit id="cd52650d0092e03bdb2d1d752a3e5d17538c5add" translate="yes" xml:space="preserve">
          <source>Returns the PID of a new process started by the application of &lt;code&gt;fun&lt;/code&gt; on &lt;code&gt;node&lt;/code&gt;. If &lt;code&gt;node&lt;/code&gt; does not exist, a useless PID is returned.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; に &lt;code&gt;fun&lt;/code&gt; を適用して開始された新しいプロセスのPIDを返します。場合は &lt;code&gt;node&lt;/code&gt; 存在しない、役に立たないPIDが返されます。</target>
        </trans-unit>
        <trans-unit id="fff6b40d45bb938426184e6a79905ec94d725709" translate="yes" xml:space="preserve">
          <source>Returns the PID of a new process started by the application of &lt;code&gt;module.function(args)&lt;/code&gt; on &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">戻り値のアプリケーションによって開始された新しいプロセスのPID &lt;code&gt;module.function(args)&lt;/code&gt; 上の &lt;code&gt;node&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5fc95961643565d6ee0e94b3a948a9b32184e234" translate="yes" xml:space="preserve">
          <source>Returns the PID of the group leader for the calling process.</source>
          <target state="translated">呼び出しプロセスのグループリーダのPIDを返します。</target>
        </trans-unit>
        <trans-unit id="67e30a9be70444eddcad990e1b99321a52cda56a" translate="yes" xml:space="preserve">
          <source>Returns the PID or port identifier registered under &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; if the name is not registered.</source>
          <target state="translated">戻り値は、PIDまたはポート識別子は、下に登録 &lt;code&gt;name&lt;/code&gt; または &lt;code&gt;nil&lt;/code&gt; の名前が登録されていない場合。</target>
        </trans-unit>
        <trans-unit id="b6ea0621ee843d2f4183487a30251fd512bb4dd5" translate="yes" xml:space="preserve">
          <source>Returns the absolute path of the directory of the current file as a binary.</source>
          <target state="translated">カレントファイルのディレクトリの絶対パスをバイナリで返します。</target>
        </trans-unit>
        <trans-unit id="b054fb6b930203c886bcc866a9d057bd209f4748" translate="yes" xml:space="preserve">
          <source>Returns the accumulator for the next enumeration step.</source>
          <target state="translated">次の列挙ステップのアキュムレータを返します。</target>
        </trans-unit>
        <trans-unit id="c2b4002e3b75b6bab925771b8767cfa960e477fa" translate="yes" xml:space="preserve">
          <source>Returns the application path inside the build.</source>
          <target state="translated">ビルド内のアプリケーションパスを返します。</target>
        </trans-unit>
        <trans-unit id="9b85bed3a262af6f35083e7e28994ef4428c7299" translate="yes" xml:space="preserve">
          <source>Returns the biggest of the two given terms according to Erlang's term ordering.</source>
          <target state="translated">Erlangの項順に従って、与えられた2つの項のうち最大のものを返します。</target>
        </trans-unit>
        <trans-unit id="fea2095c1f29cacac8d65cf66784d4ef1ae83102" translate="yes" xml:space="preserve">
          <source>Returns the binding for the given context as a keyword list.</source>
          <target state="translated">指定したコンテキストのバインディングをキーワードリストとして返します。</target>
        </trans-unit>
        <trans-unit id="752314d956a27e5c44f8fbfba8a3757afae67eba" translate="yes" xml:space="preserve">
          <source>Returns the build path for the given project.</source>
          <target state="translated">指定したプロジェクトのビルドパスを返します。</target>
        </trans-unit>
        <trans-unit id="573a0f5ab58416d588ed3b479256a76e548b06c3" translate="yes" xml:space="preserve">
          <source>Returns the cookie if the node is alive, otherwise &lt;code&gt;:nocookie&lt;/code&gt;.</source>
          <target state="translated">ノードが生きている場合はクッキーを返し、そうでない場合は &lt;code&gt;:nocookie&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d845d89480874ca778a1116c5567c440609d9b1a" translate="yes" xml:space="preserve">
          <source>Returns the count of elements in the &lt;code&gt;enumerable&lt;/code&gt; for which &lt;code&gt;fun&lt;/code&gt; returns a truthy value.</source>
          <target state="translated">戻り値の要素の数 &lt;code&gt;enumerable&lt;/code&gt; いる &lt;code&gt;fun&lt;/code&gt; truthy値を返します。</target>
        </trans-unit>
        <trans-unit id="5f20500df9c0629148c9bd099e966749367e6127" translate="yes" xml:space="preserve">
          <source>Returns the current Mix environment.</source>
          <target state="translated">現在のミックス環境を返します。</target>
        </trans-unit>
        <trans-unit id="0f05fa0008ff2e3de6102d2eb231a36353917056" translate="yes" xml:space="preserve">
          <source>Returns the current calling environment as a &lt;a href=&quot;macro.env&quot;&gt;&lt;code&gt;Macro.Env&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">現在の呼び出し環境を&lt;a href=&quot;macro.env&quot;&gt; &lt;code&gt;Macro.Env&lt;/code&gt; &lt;/a&gt;構造体として返します。</target>
        </trans-unit>
        <trans-unit id="cbcdc4db9ba8ae581e0947b7522b6b7808fe867d" translate="yes" xml:space="preserve">
          <source>Returns the current date in UTC.</source>
          <target state="translated">現在の日付をUTCで返します。</target>
        </trans-unit>
        <trans-unit id="d427f0d881fcb426b0308f9c5527544913d37578" translate="yes" xml:space="preserve">
          <source>Returns the current datetime in UTC.</source>
          <target state="translated">現在の日付時刻をUTCで返します。</target>
        </trans-unit>
        <trans-unit id="6db00f03d4b312ef865190016b2f434102565fa4" translate="yes" xml:space="preserve">
          <source>Returns the current datetime in the provided time zone.</source>
          <target state="translated">指定したタイムゾーンにおける現在の日付時刻を返します。</target>
        </trans-unit>
        <trans-unit id="b4e884734713aacb55b93422d56caab2fd2fd029" translate="yes" xml:space="preserve">
          <source>Returns the current environment information as a &lt;a href=&quot;macro.env&quot;&gt;&lt;code&gt;Macro.Env&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">現在の環境情報を&lt;a href=&quot;macro.env&quot;&gt; &lt;code&gt;Macro.Env&lt;/code&gt; &lt;/a&gt;構造体として返します。</target>
        </trans-unit>
        <trans-unit id="c2d246446e08e73fc7f43897b3ee7185cb7780f4" translate="yes" xml:space="preserve">
          <source>Returns the current input/output buffers for the given IO device.</source>
          <target state="translated">指定したIOデバイスの現在の入出力バッファを返します。</target>
        </trans-unit>
        <trans-unit id="fe927394cd0bfd1e814f4cc201198db4e42a8162" translate="yes" xml:space="preserve">
          <source>Returns the current module name as an atom or &lt;code&gt;nil&lt;/code&gt; otherwise.</source>
          <target state="translated">現在のモジュール名をアトムとして返すか、それ以外の場合は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="521ef1fd72b95fd19ed6d9439535d64de0fedd30" translate="yes" xml:space="preserve">
          <source>Returns the current monotonic time in the &lt;code&gt;:native&lt;/code&gt; time unit.</source>
          <target state="translated">現在の単調な時間を &lt;code&gt;:native&lt;/code&gt; 時間単位で返します。</target>
        </trans-unit>
        <trans-unit id="345cd1d89db7604f650f8e73c200c61040ceeea5" translate="yes" xml:space="preserve">
          <source>Returns the current monotonic time in the given time unit.</source>
          <target state="translated">指定した時間単位での現在の単調時間を返します。</target>
        </trans-unit>
        <trans-unit id="26adce4b3c858c82bd89e77053f0a78750bacda8" translate="yes" xml:space="preserve">
          <source>Returns the current naive datetime in UTC.</source>
          <target state="translated">現在のナイーブな日付の時刻をUTCで返します。</target>
        </trans-unit>
        <trans-unit id="1bec217a2783d794b0aff1789f2269eed2669c4d" translate="yes" xml:space="preserve">
          <source>Returns the current node.</source>
          <target state="translated">現在のノードを返します。</target>
        </trans-unit>
        <trans-unit id="6d12c14c21595e740c48f9036de98fd93391e9c1" translate="yes" xml:space="preserve">
          <source>Returns the current operating system (OS) time in the given time &lt;code&gt;unit&lt;/code&gt;.</source>
          <target state="translated">現在のオペレーティングシステム（OS）時間を指定された時間 &lt;code&gt;unit&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="8ec3d852082bcaf3ce2741e711151dd5810411b5" translate="yes" xml:space="preserve">
          <source>Returns the current operating system (OS) time.</source>
          <target state="translated">現在のオペレーティングシステム(OS)の時刻を返します。</target>
        </trans-unit>
        <trans-unit id="9577165071461244948e156a490206caaa49ee13" translate="yes" xml:space="preserve">
          <source>Returns the current shell.</source>
          <target state="translated">現在のシェルを返します。</target>
        </trans-unit>
        <trans-unit id="8e8ea115727f9d4064d043a892fb6bd3286e6745" translate="yes" xml:space="preserve">
          <source>Returns the current system time in the &lt;code&gt;:native&lt;/code&gt; time unit.</source>
          <target state="translated">現在のシステム時刻を &lt;code&gt;:native&lt;/code&gt; 時間単位で返します。</target>
        </trans-unit>
        <trans-unit id="92212b92e0e8001ce298e74695fe895e088b04d3" translate="yes" xml:space="preserve">
          <source>Returns the current system time in the given time unit.</source>
          <target state="translated">指定した時間単位での現在のシステム時刻を返します。</target>
        </trans-unit>
        <trans-unit id="540dd0788a95b6d0957d5ed2f9059d09fdbd91d9" translate="yes" xml:space="preserve">
          <source>Returns the current time in UTC.</source>
          <target state="translated">現在の時刻をUTCで返します。</target>
        </trans-unit>
        <trans-unit id="4fabbe6f4e846eeed8c475505bc8075dfa40dcb3" translate="yes" xml:space="preserve">
          <source>Returns the current time offset between the Erlang VM monotonic time and the Erlang VM system time.</source>
          <target state="translated">Erlang VMのモノトニックタイムとErlang VMのシステムタイムの間の現在の時間オフセットを返します。</target>
        </trans-unit>
        <trans-unit id="20d5a985cb0015239605f2f1156e73f61f7acab9" translate="yes" xml:space="preserve">
          <source>Returns the current working directory or &lt;code&gt;nil&lt;/code&gt; if one is not available.</source>
          <target state="translated">現在の作業ディレクトリを返します。使用できない場合は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3f4d96f8d1d49184aac4fce163ea1635bed830d9" translate="yes" xml:space="preserve">
          <source>Returns the current working directory or raises &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在の作業ディレクトリを返すか、&lt;a href=&quot;runtimeerror&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;を送出します。</target>
        </trans-unit>
        <trans-unit id="bd5eda37e289b94da28ee644df8f58ab267ce4a8" translate="yes" xml:space="preserve">
          <source>Returns the day of the week as an integer. For the ISO 8601 calendar (the default), it is an integer from 1 to 7, where 1 is Monday and 7 is Sunday.</source>
          <target state="translated">曜日を整数で返します。ISO 8601 カレンダー (デフォルト)の場合は、1 から 7 までの整数で、1 は月曜日、7 は日曜日です。</target>
        </trans-unit>
        <trans-unit id="473215ad94d1a89d8e50f3170d490992cd7fa885" translate="yes" xml:space="preserve">
          <source>Returns the day of the year as an integer. For the ISO 8601 calendar (the default), it is an integer from 1 to 366.</source>
          <target state="translated">年の曜日を整数で返します。ISO 8601 カレンダー (デフォルト)では、1 から 366 までの整数値となります。</target>
        </trans-unit>
        <trans-unit id="33b04f5e22dce70a50b505e48c02613150c8eb8a" translate="yes" xml:space="preserve">
          <source>Returns the day of the year as an integer. For the ISO 8601 calendar (the default), it is an integer from 1 to 4.</source>
          <target state="translated">年の曜日を整数で返します。ISO 8601 カレンダー (デフォルト)の場合は、1 から 4 までの整数値となります。</target>
        </trans-unit>
        <trans-unit id="04afcb00bb6df97dc22721d3b7726ba2c39e5893" translate="yes" xml:space="preserve">
          <source>Returns the default compilers used by Mix.</source>
          <target state="translated">Mixが使用するデフォルトのコンパイラを返します。</target>
        </trans-unit>
        <trans-unit id="3918a2e8d3b80984f96cb96c51a0494d3d39bed6" translate="yes" xml:space="preserve">
          <source>Returns the default port for a given &lt;code&gt;scheme&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;scheme&lt;/code&gt; デフォルトポートを返します。</target>
        </trans-unit>
        <trans-unit id="535f11476c25e1bb602ba6d2aeb55347a1d6a043" translate="yes" xml:space="preserve">
          <source>Returns the difference between two times, considering only the hour, minute, second and microsecond.</source>
          <target state="translated">時、分、秒、マイクロ秒だけを考慮して、2つの時間の差を返します。</target>
        </trans-unit>
        <trans-unit id="c360d7e4c5c2b410f7a146c98152183d42efdcf3" translate="yes" xml:space="preserve">
          <source>Returns the directory component of &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; のディレクトリコンポーネントを返します。</target>
        </trans-unit>
        <trans-unit id="743a31f3d672772d256b1200c80f279d76f2d31c" translate="yes" xml:space="preserve">
          <source>Returns the docs for the given module or path to &lt;code&gt;.beam&lt;/code&gt; file.</source>
          <target state="translated">指定されたモジュールのドキュメントまたは &lt;code&gt;.beam&lt;/code&gt; ファイルへのパスを返します。</target>
        </trans-unit>
        <trans-unit id="60f44569a96a86763b4d5487c67ec190e0aa215b" translate="yes" xml:space="preserve">
          <source>Returns the endianness the system was compiled with.</source>
          <target state="translated">システムがコンパイルされた際のエンディアンを返します。</target>
        </trans-unit>
        <trans-unit id="90dc2654ea71a38a108c2c7c6240011daa9ac00b" translate="yes" xml:space="preserve">
          <source>Returns the endianness.</source>
          <target state="translated">エンディアンを返します。</target>
        </trans-unit>
        <trans-unit id="55ed469436421de6156924c6030eb3ab0a32ba8f" translate="yes" xml:space="preserve">
          <source>Returns the environment stacktrace.</source>
          <target state="translated">環境のスタックトレースを返します。</target>
        </trans-unit>
        <trans-unit id="5456a19f646f58529fe8a657394e5ddae1330e08" translate="yes" xml:space="preserve">
          <source>Returns the error or fails otherwise.</source>
          <target state="translated">エラーを返すか、そうでなければ失敗します。</target>
        </trans-unit>
        <trans-unit id="7362835e7fb583b56ba30b3e3d72e9f11ce9a6a9" translate="yes" xml:space="preserve">
          <source>Returns the exit status/message of the current process or fails otherwise.</source>
          <target state="translated">現在のプロセスの終了ステータス/メッセージを返すか、そうでない場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="13b1cd87bb42d7ad26289e50c4f9af5414cf7bac" translate="yes" xml:space="preserve">
          <source>Returns the extension of the last component of &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; の最後のコンポーネントの拡張子を返します。</target>
        </trans-unit>
        <trans-unit id="30b2ff36eaf15948432462e234a67e21fe2e2019" translate="yes" xml:space="preserve">
          <source>Returns the first element for which &lt;code&gt;fun&lt;/code&gt; returns a truthy value. If no such element is found, returns &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; が真の値を返す最初の要素を返します。そのような要素が見つからない場合は、 &lt;code&gt;default&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="44fb56015a721ac17ca474e99ac44941901f7216" translate="yes" xml:space="preserve">
          <source>Returns the first element in &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is empty.</source>
          <target state="translated">最初の要素を返し &lt;code&gt;list&lt;/code&gt; または &lt;code&gt;nil&lt;/code&gt; を場合は &lt;code&gt;list&lt;/code&gt; 空です。</target>
        </trans-unit>
        <trans-unit id="b755a0a7007ddbe1d8bd4609634632fb2a788b92" translate="yes" xml:space="preserve">
          <source>Returns the first grapheme from a UTF-8 string, &lt;code&gt;nil&lt;/code&gt; if the string is empty.</source>
          <target state="translated">UTF-8文字列から最初の書記素を返します。文字列が空の場合は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2328ab83b14d6136b16a050205c1494154a3401b" translate="yes" xml:space="preserve">
          <source>Returns the first value for &lt;code&gt;key&lt;/code&gt; and removes all associated entries in the keyword list.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; の最初の値を返し、キーワードリスト内のすべての関連エントリを削除します。</target>
        </trans-unit>
        <trans-unit id="adace3ea6573dd72a53ac820de069b8efe08eeae" translate="yes" xml:space="preserve">
          <source>Returns the float whose text representation is &lt;code&gt;charlist&lt;/code&gt;.</source>
          <target state="translated">テキスト表現が &lt;code&gt;charlist&lt;/code&gt; であるfloatを返します。</target>
        </trans-unit>
        <trans-unit id="132d92e12bedb340ac3d1a53925f3bc5b200ce16" translate="yes" xml:space="preserve">
          <source>Returns the full path of all dependencies as a map.</source>
          <target state="translated">すべての依存関係のフルパスをマップとして返します。</target>
        </trans-unit>
        <trans-unit id="8d3182b82f60a34d74d98ba7cc9c7db20ff5729c" translate="yes" xml:space="preserve">
          <source>Returns the given &lt;code&gt;path&lt;/code&gt; relative to the given &lt;code&gt;from&lt;/code&gt; path.</source>
          <target state="translated">戻り値指定した &lt;code&gt;path&lt;/code&gt; 与えられたの相対 &lt;code&gt;from&lt;/code&gt; パス。</target>
        </trans-unit>
        <trans-unit id="75bed7c4c49c3acb846eb78679f043b5f9939bba" translate="yes" xml:space="preserve">
          <source>Returns the given captures as a map or &lt;code&gt;nil&lt;/code&gt; if no captures are found.</source>
          <target state="translated">指定されたキャプチャをマップとして返​​すか、キャプチャが見つからない場合は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7fa658bba7d8988f6fff21b54b937be943e2fbb1" translate="yes" xml:space="preserve">
          <source>Returns the given datetime with the microsecond field truncated to the given precision (&lt;code&gt;:microsecond&lt;/code&gt;, &lt;code&gt;millisecond&lt;/code&gt; or &lt;code&gt;:second&lt;/code&gt;).</source>
          <target state="translated">マイクロ秒フィールドを指定された精度（ &lt;code&gt;:microsecond&lt;/code&gt; 、 &lt;code&gt;millisecond&lt;/code&gt; 、または &lt;code&gt;:second&lt;/code&gt; ）に切り捨てて、指定された日時を返します。</target>
        </trans-unit>
        <trans-unit id="28d16705056be413543338cdc59340c17555be51" translate="yes" xml:space="preserve">
          <source>Returns the given naive datetime with the microsecond field truncated to the given precision (&lt;code&gt;:microsecond&lt;/code&gt;, &lt;code&gt;:millisecond&lt;/code&gt; or &lt;code&gt;:second&lt;/code&gt;).</source>
          <target state="translated">マイクロ秒フィールドを指定された精度（ &lt;code&gt;:microsecond&lt;/code&gt; 、 &lt;code&gt;:millisecond&lt;/code&gt; または &lt;code&gt;:second&lt;/code&gt; ）に切り捨てて、指定された単純な日時を返します。</target>
        </trans-unit>
        <trans-unit id="3d1a559ecef9e97b4e0334ec074b0b1f5674bf30" translate="yes" xml:space="preserve">
          <source>Returns the given path inside &lt;a href=&quot;#app_dir/1&quot;&gt;&lt;code&gt;app_dir/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#app_dir/1&quot;&gt; &lt;code&gt;app_dir/1&lt;/code&gt; &lt;/a&gt;内の指定されたパスを返します。</target>
        </trans-unit>
        <trans-unit id="45f9818c95e6364d0071ed3fb00b8ef3cc3d319d" translate="yes" xml:space="preserve">
          <source>Returns the given time with the microsecond field truncated to the given precision (&lt;code&gt;:microsecond&lt;/code&gt;, &lt;code&gt;millisecond&lt;/code&gt; or &lt;code&gt;:second&lt;/code&gt;).</source>
          <target state="translated">マイクロ秒フィールドを指定された精度（ &lt;code&gt;:microsecond&lt;/code&gt; 、 &lt;code&gt;millisecond&lt;/code&gt; または &lt;code&gt;:second&lt;/code&gt; ）に切り捨てて、指定された時間を返します。</target>
        </trans-unit>
        <trans-unit id="909b8d4669adb90c693b81f2a8d07663b593a92e" translate="yes" xml:space="preserve">
          <source>Returns the grapheme at the &lt;code&gt;position&lt;/code&gt; of the given UTF-8 &lt;code&gt;string&lt;/code&gt;. If &lt;code&gt;position&lt;/code&gt; is greater than &lt;code&gt;string&lt;/code&gt; length, then it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">指定されたUTF-8 &lt;code&gt;string&lt;/code&gt; &lt;code&gt;position&lt;/code&gt; にある書記素を返します。 &lt;code&gt;position&lt;/code&gt; が &lt;code&gt;string&lt;/code&gt; 長さより大きい場合は、 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="05c6f692fd2828628bdd1efab20923941cb15eae" translate="yes" xml:space="preserve">
          <source>Returns the greatest common divisor of the two given integers.</source>
          <target state="translated">与えられた2つの整数の最大公約数を返します。</target>
        </trans-unit>
        <trans-unit id="b283ba5da4ce9761248fbc47c852c80114d37e35" translate="yes" xml:space="preserve">
          <source>Returns the head of a list. Raises &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the list is empty.</source>
          <target state="translated">リストの先頭を返します。発生させます&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;リストが空の場合。</target>
        </trans-unit>
        <trans-unit id="1aab8bad43ed60da302eaec7116a0fb4f8228f71" translate="yes" xml:space="preserve">
          <source>Returns the integer part of &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; の整数部分を返します。</target>
        </trans-unit>
        <trans-unit id="3e4caee94b42975fc4ef569f7edb886b32f98473" translate="yes" xml:space="preserve">
          <source>Returns the integer represented by the ordered &lt;code&gt;digits&lt;/code&gt;.</source>
          <target state="translated">順序付けられた &lt;code&gt;digits&lt;/code&gt; 表される整数を返します。</target>
        </trans-unit>
        <trans-unit id="9dca7c41159299ac837cdcf59a4ccdfd24e8223d" translate="yes" xml:space="preserve">
          <source>Returns the keyword list itself.</source>
          <target state="translated">キーワードリスト自体を返します。</target>
        </trans-unit>
        <trans-unit id="28cf4adaa9e99aa7a488eb9e9efd274d65ac64ca" translate="yes" xml:space="preserve">
          <source>Returns the known keys for the given &lt;code&gt;pid&lt;/code&gt; in &lt;code&gt;registry&lt;/code&gt; in no particular order.</source>
          <target state="translated">与えられたため、既知のキーを返し &lt;code&gt;pid&lt;/code&gt; で &lt;code&gt;registry&lt;/code&gt; 順不同で。</target>
        </trans-unit>
        <trans-unit id="ed4f2c86eaedecae2c967c536bfa703cc2920d0c" translate="yes" xml:space="preserve">
          <source>Returns the largest integer smaller than or equal to &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; 以下の最大の整数を返します。</target>
        </trans-unit>
        <trans-unit id="b463682e5f1620bc48bbe9a0c681922d3b6e22db" translate="yes" xml:space="preserve">
          <source>Returns the last component of &lt;code&gt;path&lt;/code&gt; with the &lt;code&gt;extension&lt;/code&gt; stripped.</source>
          <target state="translated">最後のコンポーネントを返し &lt;code&gt;path&lt;/code&gt; して &lt;code&gt;extension&lt;/code&gt; 剥奪。</target>
        </trans-unit>
        <trans-unit id="81927b94fd63f85c8665acc4bc7874e3d4d31937" translate="yes" xml:space="preserve">
          <source>Returns the last component of the path or the path itself if it does not contain any directory separators.</source>
          <target state="translated">パスの最後のコンポーネント、あるいはパスがディレクトリセパレータを含まない場合はパス自体を返します。</target>
        </trans-unit>
        <trans-unit id="45bb2bd2dfb7427c0def40b931c0fa8bb71e07c7" translate="yes" xml:space="preserve">
          <source>Returns the last element in &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is empty.</source>
          <target state="translated">内の最後の要素を返し &lt;code&gt;list&lt;/code&gt; または &lt;code&gt;nil&lt;/code&gt; を場合は &lt;code&gt;list&lt;/code&gt; 空です。</target>
        </trans-unit>
        <trans-unit id="b60f9b2a8336b775ec25cc98be20c5236daea41a" translate="yes" xml:space="preserve">
          <source>Returns the last grapheme from a UTF-8 string, &lt;code&gt;nil&lt;/code&gt; if the string is empty.</source>
          <target state="translated">UTF-8文字列から最後の書記素を返します。文字列が空の場合は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="60f662f4df687832912347c33ee43b43e8d7e49d" translate="yes" xml:space="preserve">
          <source>Returns the latest modification time from config files.</source>
          <target state="translated">設定ファイルの最新の変更時刻を返します。</target>
        </trans-unit>
        <trans-unit id="1a17acd17d93c2beed018ebd32e7381da5cf43a4" translate="yes" xml:space="preserve">
          <source>Returns the length of &lt;code&gt;list&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; の長さを返します。</target>
        </trans-unit>
        <trans-unit id="8b308f7849b98129f4e56bec9a2ab362236e7a74" translate="yes" xml:space="preserve">
          <source>Returns the list of command line arguments passed to the program.</source>
          <target state="translated">プログラムに渡されたコマンドライン引数のリストを返します。</target>
        </trans-unit>
        <trans-unit id="44d5cb238fa513f56b5a6d6939f5b722a4d1a26c" translate="yes" xml:space="preserve">
          <source>Returns the list of files in the given directory.</source>
          <target state="translated">指定したディレクトリ内のファイルの一覧を返します。</target>
        </trans-unit>
        <trans-unit id="fe0f0d1d998912ae211cef3e07fac10c74125c71" translate="yes" xml:space="preserve">
          <source>Returns the magic cookie of the local node.</source>
          <target state="translated">ローカルノードのマジッククッキーを返します。</target>
        </trans-unit>
        <trans-unit id="33b9544a2e452f1a99c29a76bae5d5dc88adf825" translate="yes" xml:space="preserve">
          <source>Returns the maximal element in the &lt;code&gt;enumerable&lt;/code&gt; according to Erlang's term ordering.</source>
          <target state="translated">Erlangの用語の順序に従って、 &lt;code&gt;enumerable&lt;/code&gt; 要素の最大要素を返します。</target>
        </trans-unit>
        <trans-unit id="7a1a242005e42a95aa3266b2eab0a2a4fd8e3105" translate="yes" xml:space="preserve">
          <source>Returns the maximal element in the &lt;code&gt;enumerable&lt;/code&gt; as calculated by the given function.</source>
          <target state="translated">指定された関数で計算された &lt;code&gt;enumerable&lt;/code&gt; 要素の最大要素を返します。</target>
        </trans-unit>
        <trans-unit id="9536ff1a100bf1bce64d62cc60d29cc363b6d009" translate="yes" xml:space="preserve">
          <source>Returns the minimal element in the &lt;code&gt;enumerable&lt;/code&gt; according to Erlang's term ordering.</source>
          <target state="translated">Erlangの用語の順序に従って、 &lt;code&gt;enumerable&lt;/code&gt; 要素の最小要素を返します。</target>
        </trans-unit>
        <trans-unit id="4aaf9ad65824961ffacf65287788a624a792d8ad" translate="yes" xml:space="preserve">
          <source>Returns the minimal element in the &lt;code&gt;enumerable&lt;/code&gt; as calculated by the given function.</source>
          <target state="translated">指定された関数によって計算された &lt;code&gt;enumerable&lt;/code&gt; 要素の最小要素を返します。</target>
        </trans-unit>
        <trans-unit id="0ae1bfedd52d674e4dd2a7059e781e1680098395" translate="yes" xml:space="preserve">
          <source>Returns the moduledoc or &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">moduledocまたは &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dc0172f27e90560535eb10761257b16c6438a35f" translate="yes" xml:space="preserve">
          <source>Returns the next code point in a string.</source>
          <target state="translated">文字列の次のコードポイントを返します。</target>
        </trans-unit>
        <trans-unit id="b7a2d63dd8aa9e75aa8ca9871ffd197f84b3ad92" translate="yes" xml:space="preserve">
          <source>Returns the next grapheme in a string.</source>
          <target state="translated">文字列の次の書記素を返します。</target>
        </trans-unit>
        <trans-unit id="a16815d4724b8691695891cfce1bd1b80506605c" translate="yes" xml:space="preserve">
          <source>Returns the node where the given argument is located. The argument can be a PID, a reference, or a port. If the local node is not alive, &lt;code&gt;:nonode@nohost&lt;/code&gt; is returned.</source>
          <target state="translated">指定された引数が配置されているノードを返します。引数には、PID、参照、またはポートを指定できます。ローカルノードが生きていない場合、 &lt;code&gt;:nonode@nohost&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="fb0d19709454ac201a1e441f05c0767db885f7e5" translate="yes" xml:space="preserve">
          <source>Returns the normalized day fraction of the specified time.</source>
          <target state="translated">指定した時刻の正規化された日分数を返します。</target>
        </trans-unit>
        <trans-unit id="ebe9ee0e2dcfef83024da931aea937711de22721" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;code&gt;{pid, value}&lt;/code&gt; pairs under the given &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;registry&lt;/code&gt; that match &lt;code&gt;pattern&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;registry&lt;/code&gt; 内の指定された &lt;code&gt;key&lt;/code&gt; 下で、 &lt;code&gt;pattern&lt;/code&gt; に一致する &lt;code&gt;{pid, value}&lt;/code&gt; ペアの数を返します。</target>
        </trans-unit>
        <trans-unit id="993096f11931f901931f9487833be33b5fe12f30" translate="yes" xml:space="preserve">
          <source>Returns the number of Unicode graphemes in a UTF-8 string.</source>
          <target state="translated">UTF-8文字列に含まれるUnicode書記素の数を返します。</target>
        </trans-unit>
        <trans-unit id="b9318f14536ad10f68dec3a090722544f2fc933e" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes needed to contain &lt;code&gt;bitstring&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bitstring&lt;/code&gt; を含めるために必要なバイト数を返します。</target>
        </trans-unit>
        <trans-unit id="0ab6d73ab9101e6ad794ac65a9028c34ffc39f8a" translate="yes" xml:space="preserve">
          <source>Returns the number of days in the given &lt;code&gt;date&lt;/code&gt; month.</source>
          <target state="translated">指定された &lt;code&gt;date&lt;/code&gt; 月の日数を返します。</target>
        </trans-unit>
        <trans-unit id="aef856be9186f5050ccf210e12afe31c44f70bfd" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in &lt;code&gt;map_set&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map_set&lt;/code&gt; の要素数を返します。</target>
        </trans-unit>
        <trans-unit id="5b54c7695f5998e85118fe351a01a0eac6afe807" translate="yes" xml:space="preserve">
          <source>Returns the number of months in the given &lt;code&gt;date&lt;/code&gt; year.</source>
          <target state="translated">指定した &lt;code&gt;date&lt;/code&gt; 年の月数を返します。</target>
        </trans-unit>
        <trans-unit id="d1ea18c62ae69b9b7617892c57bf359ea558d46a" translate="yes" xml:space="preserve">
          <source>Returns the number of registered keys in a registry. It runs in constant time.</source>
          <target state="translated">レジストリに登録されているキーの数を返します。これは一定時間で実行されます。</target>
        </trans-unit>
        <trans-unit id="acfbdec1c3382733c31d3e5a142e482203fcba40" translate="yes" xml:space="preserve">
          <source>Returns the number of schedulers in the VM.</source>
          <target state="translated">VM内のスケジューラの数を返します。</target>
        </trans-unit>
        <trans-unit id="b889415c6fce3d59b84ddd96e7cca2db8db380cb" translate="yes" xml:space="preserve">
          <source>Returns the number of schedulers online in the VM.</source>
          <target state="translated">VM内でオンラインになっているスケジューラの数を返します。</target>
        </trans-unit>
        <trans-unit id="5df4306ee94fe8f8fafbfae6afb8dc375379b369" translate="yes" xml:space="preserve">
          <source>Returns the old value of &lt;code&gt;flag&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flag&lt;/code&gt; の古い値を返します。</target>
        </trans-unit>
        <trans-unit id="13ba9fcca2a0649fec425cb7848af73f91935f3e" translate="yes" xml:space="preserve">
          <source>Returns the operating system PID for the current Erlang runtime system instance.</source>
          <target state="translated">現在のErlangランタイムシステムインスタンスのオペレーティングシステムのPIDを返します。</target>
        </trans-unit>
        <trans-unit id="89200e57745b7c39430ec5683fae28a368d62bac" translate="yes" xml:space="preserve">
          <source>Returns the options used for inspecting.</source>
          <target state="translated">検査に使用したオプションを返します。</target>
        </trans-unit>
        <trans-unit id="e56c4592d5df7f1bace540247183fda61bd3a8c9" translate="yes" xml:space="preserve">
          <source>Returns the ordered digits for the given &lt;code&gt;integer&lt;/code&gt;.</source>
          <target state="translated">指定された数字の順序を返します &lt;code&gt;integer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8d395cac96a71568d47555bbbbf4625ac25a1410" translate="yes" xml:space="preserve">
          <source>Returns the path type.</source>
          <target state="translated">パスの種類を返します。</target>
        </trans-unit>
        <trans-unit id="12f1d8051a526d9c6a64f1dbb1d2d7d5ae196c74" translate="yes" xml:space="preserve">
          <source>Returns the path where dependencies are stored for the given project.</source>
          <target state="translated">指定したプロジェクトの依存関係が保存されているパスを返します。</target>
        </trans-unit>
        <trans-unit id="25dbe974fbdff9402cb982b026d936c4ff110e40" translate="yes" xml:space="preserve">
          <source>Returns the path where manifests are stored.</source>
          <target state="translated">マニフェストが保存されているパスを返します。</target>
        </trans-unit>
        <trans-unit id="9d953d9255141f7294d89b7b7fe49a513a28c2b3" translate="yes" xml:space="preserve">
          <source>Returns the path where protocol consolidations are stored.</source>
          <target state="translated">プロトコル統合が保存されているパスを返します。</target>
        </trans-unit>
        <trans-unit id="1f11106aa39ba84c5e30cc0b55e17085927e4e42" translate="yes" xml:space="preserve">
          <source>Returns the paths the given project compiles to.</source>
          <target state="translated">指定したプロジェクトのコンパイル先のパスを返します。</target>
        </trans-unit>
        <trans-unit id="f12bd00aec58184b41e9e6a2031aa30605d2df99" translate="yes" xml:space="preserve">
          <source>Returns the pluralization for &lt;code&gt;word&lt;/code&gt;.</source>
          <target state="translated">の複数形を返します &lt;code&gt;word&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df6a4629eb175817de97b50b825cf94add115c00" translate="yes" xml:space="preserve">
          <source>Returns the process identifier of the current Erlang emulator in the format most commonly used by the operating system environment.</source>
          <target state="translated">現在のErlangエミュレータのプロセス識別子をオペレーティングシステム環境で最も一般的に使われている形式で返します。</target>
        </trans-unit>
        <trans-unit id="568636cdc2330b657828aa8245c56f10e4eee142" translate="yes" xml:space="preserve">
          <source>Returns the project configuration.</source>
          <target state="translated">プロジェクトの設定を返します。</target>
        </trans-unit>
        <trans-unit id="ab453c26a5feb021a2c9059dd3c8585ac19eb3ef" translate="yes" xml:space="preserve">
          <source>Returns the regex options as a string.</source>
          <target state="translated">正規表現オプションを文字列で返します。</target>
        </trans-unit>
        <trans-unit id="ce3ebec18204dd94a1942d1c3249ace4c6e0d006" translate="yes" xml:space="preserve">
          <source>Returns the regex source as a binary.</source>
          <target state="translated">正規表現のソースをバイナリで返します。</target>
        </trans-unit>
        <trans-unit id="9433dc7ce38dfb47f9e2242a44435d8ec1469e59" translate="yes" xml:space="preserve">
          <source>Returns the shortdoc or &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">shortdocまたは &lt;code&gt;nil&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="53b0081e44e5c9c4563adcd42943126cb72ba8c9" translate="yes" xml:space="preserve">
          <source>Returns the size of a map.</source>
          <target state="translated">マップのサイズを返します。</target>
        </trans-unit>
        <trans-unit id="464da3495a9bba600da306000b297ddb8d537d28" translate="yes" xml:space="preserve">
          <source>Returns the size of a tuple.</source>
          <target state="translated">タプルのサイズを返します。</target>
        </trans-unit>
        <trans-unit id="2eab1deb376aa2eb3ded24f57f590dc04c57e6b1" translate="yes" xml:space="preserve">
          <source>Returns the size of an IO data.</source>
          <target state="translated">IOデータのサイズを返します。</target>
        </trans-unit>
        <trans-unit id="771fa37bdad6a0b0f3f8ca4535f1113f29b7cca1" translate="yes" xml:space="preserve">
          <source>Returns the size of the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">のサイズを返します &lt;code&gt;enumerable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4360055191bbc6d560abe7b2a7ed6423ae2263a6" translate="yes" xml:space="preserve">
          <source>Returns the size of the next grapheme.</source>
          <target state="translated">次の書記素のサイズを返します。</target>
        </trans-unit>
        <trans-unit id="921d7de9abba27ebf9e4ec955853abb5d9b2dfde" translate="yes" xml:space="preserve">
          <source>Returns the smallest integer greater than or equal to &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">以上の最小の整数を返します &lt;code&gt;number&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ec9bf6067fd64ae230688cac070ca822929e9781" translate="yes" xml:space="preserve">
          <source>Returns the smallest of the two given terms according to Erlang's term ordering.</source>
          <target state="translated">Erlangの項順に従って、与えられた2つの項のうち最も小さいものを返します。</target>
        </trans-unit>
        <trans-unit id="f7e094cce152da41bb001fe75ff8ff8c450d3c55" translate="yes" xml:space="preserve">
          <source>Returns the spec for &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">の仕様を返します &lt;code&gt;app&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5393c9233d23da08562a8362027b6bca2a3dff85" translate="yes" xml:space="preserve">
          <source>Returns the stacktrace for the currently handled exception.</source>
          <target state="translated">現在処理中の例外のスタックトレースを返します。</target>
        </trans-unit>
        <trans-unit id="8b893b416ca9bfbcc2d075a8ada9c6aca862a339" translate="yes" xml:space="preserve">
          <source>Returns the string representation of the given &lt;a href=&quot;#t:t/0&quot;&gt;URI struct&lt;/a&gt;.</source>
          <target state="translated">指定された文字列表現を返します &lt;a href=&quot;#t:t/0&quot;&gt; URI構造体&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cea5e90d9f2a065b00dd59e1c92db64e63a26004" translate="yes" xml:space="preserve">
          <source>Returns the string untouched if there are no occurrences.</source>
          <target state="translated">発生していない場合は、未処理の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="2119c6340fc1c60d171f69f5b6fc40832b65f1de" translate="yes" xml:space="preserve">
          <source>Returns the string untouched if there is no match. If &lt;code&gt;match&lt;/code&gt; is an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), &lt;code&gt;replacement&lt;/code&gt; is just appended to &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">一致しない場合、文字列をそのまま返します。場合は &lt;code&gt;match&lt;/code&gt; 空の文字列（ある &lt;code&gt;&quot;&quot;&lt;/code&gt; ）、 &lt;code&gt;replacement&lt;/code&gt; ちょうどに追加されます &lt;code&gt;string&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d3e5f86a6a3448482723c629b72cbcf08d2a6d1" translate="yes" xml:space="preserve">
          <source>Returns the string untouched if there is no match. If &lt;code&gt;match&lt;/code&gt; is an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), &lt;code&gt;replacement&lt;/code&gt; is just prepended to &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">一致しない場合、文字列をそのまま返します。場合は &lt;code&gt;match&lt;/code&gt; 空の文字列（ある &lt;code&gt;&quot;&quot;&lt;/code&gt; ）、 &lt;code&gt;replacement&lt;/code&gt; ただの前に追加されました &lt;code&gt;string&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99f109b4c1e9e2e52c16c8c6e0ba33b2337b1129" translate="yes" xml:space="preserve">
          <source>Returns the sum of all elements.</source>
          <target state="translated">すべての要素の合計を返します。</target>
        </trans-unit>
        <trans-unit id="5446f0a929a51f2841c8d97a177322c6d4cfbd4b" translate="yes" xml:space="preserve">
          <source>Returns the tail of a list. Raises &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the list is empty.</source>
          <target state="translated">リストの末尾を返します。発生させ&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;リストが空の場合。</target>
        </trans-unit>
        <trans-unit id="c9be2b1fad24de04c50b3e83a236b19a500bd708" translate="yes" xml:space="preserve">
          <source>Returns the task name for the given &lt;code&gt;module&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;module&lt;/code&gt; タスク名を返します。</target>
        </trans-unit>
        <trans-unit id="878347c3aa6513fbf6afa6efa6c7f012a2ebde56" translate="yes" xml:space="preserve">
          <source>Returns the thrown value or fails otherwise.</source>
          <target state="translated">投げられた値を返すか、そうでなければ失敗します。</target>
        </trans-unit>
        <trans-unit id="76679b3900f0ba1621d3328c4d07b6237c72c826" translate="yes" xml:space="preserve">
          <source>Returns the underlying &lt;code&gt;re_pattern&lt;/code&gt; in the regular expression.</source>
          <target state="translated">正規表現で基になる &lt;code&gt;re_pattern&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8968b9f6847de7df218d57ed06876fcd4deefde7" translate="yes" xml:space="preserve">
          <source>Returns the user home directory (platform independent).</source>
          <target state="translated">ユーザーのホームディレクトリを返します(プラットフォームに依存しません)。</target>
        </trans-unit>
        <trans-unit id="f853f8018f651d849df46372217944c5cafdc33f" translate="yes" xml:space="preserve">
          <source>Returns the value for &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;app&lt;/code&gt;'s environment in a tuple.</source>
          <target state="translated">戻り値 &lt;code&gt;key&lt;/code&gt; で &lt;code&gt;app&lt;/code&gt; タプル内の環境。</target>
        </trans-unit>
        <trans-unit id="a25fac0ea4b17b37d92bb53583068e5149115241" translate="yes" xml:space="preserve">
          <source>Returns the value for &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;app&lt;/code&gt;'s environment.</source>
          <target state="translated">戻り値 &lt;code&gt;key&lt;/code&gt; で &lt;code&gt;app&lt;/code&gt; の環境。</target>
        </trans-unit>
        <trans-unit id="98a6e9fe912ad2fc1ebf1d97990bf4eace7713a9" translate="yes" xml:space="preserve">
          <source>Returns the value for &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;app&lt;/code&gt;'s specification.</source>
          <target state="translated">戻り値 &lt;code&gt;key&lt;/code&gt; で &lt;code&gt;app&lt;/code&gt; の仕様。</target>
        </trans-unit>
        <trans-unit id="4904ba9d019e50de81dadd2fd0f3950811aa6e11" translate="yes" xml:space="preserve">
          <source>Returns the value for the given &lt;code&gt;key&lt;/code&gt; in the process dictionary, or &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not set.</source>
          <target state="translated">与えられたの値を返します &lt;code&gt;key&lt;/code&gt; プロセス辞書に、または &lt;code&gt;default&lt;/code&gt; の場合 &lt;code&gt;key&lt;/code&gt; 。キーが設定されていないは。</target>
        </trans-unit>
        <trans-unit id="4b4cb0e2ce0546225daafc01a7abd95363859e47" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;n&lt;/code&gt;th expression in the history.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; の値を返します履歴の番目の式の。</target>
        </trans-unit>
        <trans-unit id="d4c5eb060d7795d63f93a93d2174bfbde5eec930" translate="yes" xml:space="preserve">
          <source>Returns the value of the given environment variable or &lt;code&gt;:error&lt;/code&gt; if not found.</source>
          <target state="translated">指定された環境変数または &lt;code&gt;:error&lt;/code&gt; の値を返します。見つからない場合は。</target>
        </trans-unit>
        <trans-unit id="6d3c958f0d384e41e1fd39b3e1093c21e579bb87" translate="yes" xml:space="preserve">
          <source>Returns the value of the given environment variable or raises if not found.</source>
          <target state="translated">与えられた環境変数の値を返します。</target>
        </trans-unit>
        <trans-unit id="fc426843775837bb9713393133e0f84dd5fa52c9" translate="yes" xml:space="preserve">
          <source>Returns the value of the given environment variable.</source>
          <target state="translated">指定した環境変数の値を返します。</target>
        </trans-unit>
        <trans-unit id="b17bccbe58f022f5360104153b5324a3a5f8ab53" translate="yes" xml:space="preserve">
          <source>Returns the value that was under &lt;code&gt;key&lt;/code&gt; in the process dictionary, or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; was not stored in the process dictionary.</source>
          <target state="translated">プロセスディクショナリの &lt;code&gt;key&lt;/code&gt; 下にあった値を返します。 &lt;code&gt;key&lt;/code&gt; 場合は &lt;code&gt;nil&lt;/code&gt; を返しますがプロセスディクショナリに格納されていないは。</target>
        </trans-unit>
        <trans-unit id="4002ca69c8b4a4e8942a2a8ca79b1e4c4939052d" translate="yes" xml:space="preserve">
          <source>Returns the value under &lt;code&gt;key&lt;/code&gt; if there is such a key, or &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not found.</source>
          <target state="translated">下の戻り値 &lt;code&gt;key&lt;/code&gt; など、Aキー、または存在する場合 &lt;code&gt;default&lt;/code&gt; 場合 &lt;code&gt;key&lt;/code&gt; が見つからないは。</target>
        </trans-unit>
        <trans-unit id="3af843cadbfac1113304e7db687b00b1758b0e54" translate="yes" xml:space="preserve">
          <source>Returns the version of the underlying Regex engine.</source>
          <target state="translated">Regexエンジンのバージョンを返します。</target>
        </trans-unit>
        <trans-unit id="a5febd0aca2ae71b9183cb365b24eaa3298ba222" translate="yes" xml:space="preserve">
          <source>Returns whether a given &lt;code&gt;key&lt;/code&gt; exists in the given &lt;code&gt;keywords&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;key&lt;/code&gt; が指定された &lt;code&gt;keywords&lt;/code&gt; 存在するかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="7d1348c5848b47392a61baf065679e3fe4bbd884" translate="yes" xml:space="preserve">
          <source>Returns whether the compilation environment is currently inside a guard.</source>
          <target state="translated">コンパイル環境が現在ガード内にあるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="d07dcf1758adbeddd9f6a8a1e7d76495004156ac" translate="yes" xml:space="preserve">
          <source>Returns whether the compilation environment is currently inside a match clause.</source>
          <target state="translated">コンパイル環境が現在 match 節の中にあるかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="198fd42b2e9a3935326202ead8ca134f2cac7795" translate="yes" xml:space="preserve">
          <source>Returns whether the given &lt;code&gt;key&lt;/code&gt; exists in the given &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;key&lt;/code&gt; が指定された &lt;code&gt;map&lt;/code&gt; 存在するかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="8f15c934f199fc52996cd96ba7cb34c1dfc57796" translate="yes" xml:space="preserve">
          <source>Reverses the &lt;code&gt;enumerable&lt;/code&gt; in the range from initial &lt;code&gt;start_index&lt;/code&gt; through &lt;code&gt;count&lt;/code&gt; elements.</source>
          <target state="translated">反転させ &lt;code&gt;enumerable&lt;/code&gt; 初期の範囲で &lt;code&gt;start_index&lt;/code&gt; て &lt;code&gt;count&lt;/code&gt; 要素。</target>
        </trans-unit>
        <trans-unit id="51ef45f336354a32dda3e205577483e8849e2250" translate="yes" xml:space="preserve">
          <source>Reverses the elements in &lt;code&gt;enumerable&lt;/code&gt;, appends the &lt;code&gt;tail&lt;/code&gt;, and returns it as a list.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の要素を反転し、末尾を追加し &lt;code&gt;tail&lt;/code&gt; 、リストとして戻り、それを。</target>
        </trans-unit>
        <trans-unit id="b84612001a4f1eaa6c97171fdc0b0c9f2ef21eae" translate="yes" xml:space="preserve">
          <source>Reverses the graphemes in given string.</source>
          <target state="translated">与えられた文字列の中の書記素を反転させます。</target>
        </trans-unit>
        <trans-unit id="da502a644e54b1ce6f094fca466290322f89787d" translate="yes" xml:space="preserve">
          <source>Right to left</source>
          <target state="translated">右から左へ</target>
        </trans-unit>
        <trans-unit id="8565eb000a57c1167c9162526ae9f7f67679477d" translate="yes" xml:space="preserve">
          <source>Rounds a float to the largest number less than or equal to &lt;code&gt;num&lt;/code&gt;.</source>
          <target state="translated">floatを &lt;code&gt;num&lt;/code&gt; 以下の最大の数値に丸めますます。</target>
        </trans-unit>
        <trans-unit id="d4d7ddf396c77d3a28aacfec25345f3233ed75ed" translate="yes" xml:space="preserve">
          <source>Rounds a float to the smallest integer greater than or equal to &lt;code&gt;num&lt;/code&gt;.</source>
          <target state="translated">floatを &lt;code&gt;num&lt;/code&gt; 以上の最小の整数に丸めますます。</target>
        </trans-unit>
        <trans-unit id="f2bfe2b43d2e555e7e1fc1953a64ed430131021f" translate="yes" xml:space="preserve">
          <source>Rounds a floating-point value to an arbitrary number of fractional digits (between 0 and 15).</source>
          <target state="translated">浮動小数点値を任意の端数桁数(0~15)に丸めます。</target>
        </trans-unit>
        <trans-unit id="9740f5d1fe5f451949c9d945ffaea21c8d9432a4" translate="yes" xml:space="preserve">
          <source>Rounds a number to the nearest integer.</source>
          <target state="translated">数値を最も近い整数に丸めます。</target>
        </trans-unit>
        <trans-unit id="394ff7414ed58e9bb399195e5ae3da301b62e17d" translate="yes" xml:space="preserve">
          <source>Routing layer</source>
          <target state="translated">ルーティング層</target>
        </trans-unit>
        <trans-unit id="2cab34e43d5bf64f55c18070062b1bc29de8d797" translate="yes" xml:space="preserve">
          <source>Run &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;&lt;code&gt;mix help test&lt;/code&gt;&lt;/a&gt; for more information on how to run filters via Mix.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt; &lt;code&gt;mix help test&lt;/code&gt; &lt;/a&gt;実行するMixを介してフィルターを実行する方法の詳細については、Mixをしてください。</target>
        </trans-unit>
        <trans-unit id="7f49ea60a8e2caa16528ffe5a08a1e644ee38ac0" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;iex -S mix&lt;/code&gt; so we can give our dynamic supervisor a try:</source>
          <target state="translated">&lt;code&gt;iex -S mix&lt;/code&gt; 実行するて、動的スーパーバイザーを試せるようにします。</target>
        </trans-unit>
        <trans-unit id="858865eeebb714c4204dbc57a8ddb8b571d4940a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Format.html&quot;&gt;code formatter&lt;/a&gt;. The code formatter formats your code according to a consistent style shared by your library and the whole community, making it easier for other developers to understand your code and contribute.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Format.html&quot;&gt;コードフォーマッターを&lt;/a&gt;実行する。コードフォーマッタは、ライブラリおよびコミュニティ全体で共有される一貫したスタイルに従ってコードをフォーマットし、他の開発者がコードを理解して貢献することを容易にします。</target>
        </trans-unit>
        <trans-unit id="2561b01d11beb7887fdb55f789d105da46475bd7" translate="yes" xml:space="preserve">
          <source>Run the test suite and the doctest should fail:</source>
          <target state="translated">テストスイートを実行し、doctestは失敗するはずです。</target>
        </trans-unit>
        <trans-unit id="502cb8247a0563cd3767c7c278a608b8f2c8d52e" translate="yes" xml:space="preserve">
          <source>Run the tests and they should all pass!</source>
          <target state="translated">テストを実行して、それらはすべて合格する必要があります</target>
        </trans-unit>
        <trans-unit id="abce5e360ddf9e955294138f90e126f096dcc734" translate="yes" xml:space="preserve">
          <source>Running IEx in the directory where the above &lt;code&gt;.iex.exs&lt;/code&gt; file is located results in:</source>
          <target state="translated">上記の &lt;code&gt;.iex.exs&lt;/code&gt; ファイルが配置されているディレクトリでIExを実行すると、次のような結果になります。</target>
        </trans-unit>
        <trans-unit id="e8a30d8ac7729deb2e42d58fc103a0fb057a8270" translate="yes" xml:space="preserve">
          <source>Running commands</source>
          <target state="translated">コマンドの実行</target>
        </trans-unit>
        <trans-unit id="e1e0218f656dddcbb2f3c0fcf7777db3f26647dd" translate="yes" xml:space="preserve">
          <source>Running scripts</source>
          <target state="translated">スクリプトの実行</target>
        </trans-unit>
        <trans-unit id="be64280ade23e74f60a4ce8d57444019c4382156" translate="yes" xml:space="preserve">
          <source>Running tests</source>
          <target state="translated">テストの実行</target>
        </trans-unit>
        <trans-unit id="ae6f4b64040963769b7f32a98c16f274e7e2534e" translate="yes" xml:space="preserve">
          <source>Running the formatter</source>
          <target state="translated">フォーマッタの実行</target>
        </trans-unit>
        <trans-unit id="2ad21e0961858c4a176621a74bbb6c251ecc92f2" translate="yes" xml:space="preserve">
          <source>Runs a &lt;code&gt;task&lt;/code&gt; with the given &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;args&lt;/code&gt; で &lt;code&gt;task&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="27f5a1001c04b3d326d3130b840b82e3d8b78086" translate="yes" xml:space="preserve">
          <source>Runs the given &lt;code&gt;fun&lt;/code&gt; inside the given project.</source>
          <target state="translated">指定 &lt;code&gt;fun&lt;/code&gt; れたプロジェクト内で指定されたfunを実行します。</target>
        </trans-unit>
        <trans-unit id="fc60430f8b509c1280cf05d516e5e479f037c43d" translate="yes" xml:space="preserve">
          <source>Runs the given stream.</source>
          <target state="translated">与えられたストリームを実行します。</target>
        </trans-unit>
        <trans-unit id="d815a8f6506a6d2030fc71c5314a4b7cbc242ba3" translate="yes" xml:space="preserve">
          <source>Runs the regular expression against the given string until the first match. It returns a list with all captures or &lt;code&gt;nil&lt;/code&gt; if no match occurred.</source>
          <target state="translated">最初に一致するまで、指定された文字列に対して正規表現を実行します。すべてのキャプチャを含むリストを返すか、一致が発生しなかった場合は &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e5ffbfd911e0b566d41b50bdfa640dfbca592312" translate="yes" xml:space="preserve">
          <source>Runs the tests for a project.</source>
          <target state="translated">プロジェクトのテストを実行します。</target>
        </trans-unit>
        <trans-unit id="119006df7a024a81cf340543ca824cea7d8efa82" translate="yes" xml:space="preserve">
          <source>Runs the tests. It is invoked automatically if ExUnit is started via &lt;a href=&quot;#start/1&quot;&gt;&lt;code&gt;start/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テストを実行します。ExUnitが&lt;a href=&quot;#start/1&quot;&gt; &lt;code&gt;start/1&lt;/code&gt; を&lt;/a&gt;介して起動されると、自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="222cad2bd37e45b5f33d5d967590f4b613622bfd" translate="yes" xml:space="preserve">
          <source>Runtime Configuration</source>
          <target state="translated">ランタイム設定</target>
        </trans-unit>
        <trans-unit id="1582600625fd381ca554979f70e7434d87fa5103" translate="yes" xml:space="preserve">
          <source>Runtime configuration</source>
          <target state="translated">ランタイム設定</target>
        </trans-unit>
        <trans-unit id="bef3d737e1cd6b54fa5c0c009af907047c31c70e" translate="yes" xml:space="preserve">
          <source>Runtime configuration - can be set before the &lt;code&gt;:logger&lt;/code&gt; application is started, but may be changed during runtime</source>
          <target state="translated">ランタイム構成- &lt;code&gt;:logger&lt;/code&gt; の前に設定できますアプリケーションが起動が、ランタイム中に変更できます</target>
        </trans-unit>
        <trans-unit id="f1be8bbdfa39d80e63d75464d871ca752fb54889" translate="yes" xml:space="preserve">
          <source>RuntimeError</source>
          <target state="translated">RuntimeError</target>
        </trans-unit>
        <trans-unit id="2367bc1690bc7150c00e3cc3a74e421b0f5a75af" translate="yes" xml:space="preserve">
          <source>RuntimeError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">RuntimeError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="48afa22bba76fdc43e8ef8f37036831d587b298b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#cast/2&quot;&gt;&lt;code&gt;cast/2&lt;/code&gt;&lt;/a&gt; but a module, function, and arguments are expected instead of an anonymous function. The state is added as first argument to the given list of arguments.</source>
          <target state="translated">&lt;a href=&quot;#cast/2&quot;&gt; &lt;code&gt;cast/2&lt;/code&gt; と&lt;/a&gt;同じですが、無名関数の代わりにモジュール、関数、引数が必要です。状態は、指定された引数リストの最初の引数として追加されます。</target>
        </trans-unit>
        <trans-unit id="8b6186d6c9aeff961c16e5da9e96a9c93e25a101" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#chgrp/2&quot;&gt;&lt;code&gt;chgrp/2&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#chgrp/2&quot;&gt; &lt;code&gt;chgrp/2&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。そうでなければ &lt;code&gt;:ok&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5551163d02c8194e2886a885aa06654149c83ba" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#chmod/2&quot;&gt;&lt;code&gt;chmod/2&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#chmod/2&quot;&gt; &lt;code&gt;chmod/2&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。そうでなければ &lt;code&gt;:ok&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="452a2701829e8135c60bab1ba0681e8954ffe2b7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#chown/2&quot;&gt;&lt;code&gt;chown/2&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#chown/2&quot;&gt; &lt;code&gt;chown/2&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。そうでなければ &lt;code&gt;:ok&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e0949047f6cf1d6ba67f61109f1b819c88cfe7a7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#defrecord/3&quot;&gt;&lt;code&gt;defrecord/3&lt;/code&gt;&lt;/a&gt; but generates private macros.</source>
          <target state="translated">&lt;a href=&quot;#defrecord/3&quot;&gt; &lt;code&gt;defrecord/3&lt;/code&gt; と&lt;/a&gt;同じですが、プライベートマクロを生成します。</target>
        </trans-unit>
        <trans-unit id="8e9194a522fb8fb657e281729e962d0ed06857f7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#get/0&quot;&gt;&lt;code&gt;get/0&lt;/code&gt;&lt;/a&gt;, but raises an exception if there is no current project.</source>
          <target state="translated">&lt;a href=&quot;#get/0&quot;&gt; &lt;code&gt;get/0&lt;/code&gt; &lt;/a&gt;と同じですが、現在のプロジェクトがない場合は例外が発生します。</target>
        </trans-unit>
        <trans-unit id="1a5ebf1a38b49af9938b5e72845065800dbdcff3" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#get/3&quot;&gt;&lt;code&gt;get/3&lt;/code&gt;&lt;/a&gt; but a module, function, and arguments are expected instead of an anonymous function. The state is added as first argument to the given list of arguments.</source>
          <target state="translated">&lt;a href=&quot;#get/3&quot;&gt; &lt;code&gt;get/3&lt;/code&gt; と&lt;/a&gt;同じですが、無名関数の代わりにモジュール、関数、および引数が必要です。状態は、指定された引数リストの最初の引数として追加されます。</target>
        </trans-unit>
        <trans-unit id="454d80b60394294842383e45eb87437d14c3f75a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#get_and_update/3&quot;&gt;&lt;code&gt;get_and_update/3&lt;/code&gt;&lt;/a&gt; but a module, function, and arguments are expected instead of an anonymous function. The state is added as first argument to the given list of arguments.</source>
          <target state="translated">&lt;a href=&quot;#get_and_update/3&quot;&gt; &lt;code&gt;get_and_update/3&lt;/code&gt; と&lt;/a&gt;同じですが、無名関数の代わりにモジュール、関数、および引数が必要です。状態は、指定された引数リストの最初の引数として追加されます。</target>
        </trans-unit>
        <trans-unit id="51fc3a99abe232080d3ba08eef47a68cfc7ea01d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#get_env/1&quot;&gt;&lt;code&gt;get_env/1&lt;/code&gt;&lt;/a&gt; but raises instead of returning &lt;code&gt;nil&lt;/code&gt; when the variable is not set.</source>
          <target state="translated">&lt;a href=&quot;#get_env/1&quot;&gt; &lt;code&gt;get_env/1&lt;/code&gt; と&lt;/a&gt;同じですが、変数が設定されていない場合は &lt;code&gt;nil&lt;/code&gt; を返す代わりに発生します。</target>
        </trans-unit>
        <trans-unit id="3c7f2b70e8cfe5f2634b92d0a6549de81f8bd0c0" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#ln/2&quot;&gt;&lt;code&gt;ln/2&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.linkerror&quot;&gt;&lt;code&gt;File.LinkError&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#ln/2&quot;&gt; &lt;code&gt;ln/2&lt;/code&gt; と&lt;/a&gt;同じですが、失敗すると&lt;a href=&quot;file.linkerror&quot;&gt; &lt;code&gt;File.LinkError&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="62ec00d18d6c7c4096134aa08579c416180f7b6c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#ln_s/2&quot;&gt;&lt;code&gt;ln_s/2&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.linkerror&quot;&gt;&lt;code&gt;File.LinkError&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#ln_s/2&quot;&gt; &lt;code&gt;ln_s/2&lt;/code&gt; と&lt;/a&gt;同じですが、失敗すると&lt;a href=&quot;file.linkerror&quot;&gt; &lt;code&gt;File.LinkError&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="98a4a1fa45aa8e47b2fe2b04f4757dac9baf83e3" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#lstat/2&quot;&gt;&lt;code&gt;lstat/2&lt;/code&gt;&lt;/a&gt; but returns the &lt;a href=&quot;file.stat&quot;&gt;&lt;code&gt;File.Stat&lt;/code&gt;&lt;/a&gt; struct directly, or raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if an error is returned.</source>
          <target state="translated">&lt;a href=&quot;#lstat/2&quot;&gt; &lt;code&gt;lstat/2&lt;/code&gt; と&lt;/a&gt;同じですが、&lt;a href=&quot;file.stat&quot;&gt; &lt;code&gt;File.Stat&lt;/code&gt; &lt;/a&gt;構造体を直接返します。エラーが返された場合は、&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="5a1ac89b3d9b7123dddd932cfa309cb1e771fec8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#mkdir/1&quot;&gt;&lt;code&gt;mkdir/1&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#mkdir/1&quot;&gt; &lt;code&gt;mkdir/1&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。そうでなければ &lt;code&gt;:ok&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="36da26cc0d9ef98b6d7a837321a0b850aa977e10" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#mkdir_p/1&quot;&gt;&lt;code&gt;mkdir_p/1&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#mkdir_p/1&quot;&gt; &lt;code&gt;mkdir_p/1&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。そうでなければ &lt;code&gt;:ok&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9f817cb5944a5943ab83623cde62144c04d14cd3" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#read_link/1&quot;&gt;&lt;code&gt;read_link/1&lt;/code&gt;&lt;/a&gt; but returns the target directly, or raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if an error is returned.</source>
          <target state="translated">&lt;a href=&quot;#read_link/1&quot;&gt; &lt;code&gt;read_link/1&lt;/code&gt; と&lt;/a&gt;同じですが、ターゲットを直接返します。エラーが返された場合は&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="d59c6eed3d63d4d8a3c113ef08c30a24189a97d7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#rm/1&quot;&gt;&lt;code&gt;rm/1&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#rm/1&quot;&gt; &lt;code&gt;rm/1&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。そうでなければ &lt;code&gt;:ok&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb0d2ee4285409ea9feb23a66cf1147cd51c9979" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#rm_rf/1&quot;&gt;&lt;code&gt;rm_rf/1&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failures, otherwise the list of files or directories removed.</source>
          <target state="translated">&lt;a href=&quot;#rm_rf/1&quot;&gt; &lt;code&gt;rm_rf/1&lt;/code&gt; と&lt;/a&gt;同じですが、失敗した場合は&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は、ファイルまたはディレクトリのリストが削除されます。</target>
        </trans-unit>
        <trans-unit id="ca1993cb0cbd43a38f474d1155f5b7b631b2f919" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#rmdir/1&quot;&gt;&lt;code&gt;rmdir/1&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#rmdir/1&quot;&gt; &lt;code&gt;rmdir/1&lt;/code&gt; &lt;/a&gt;と同じですが、失敗すると&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。そうでなければ &lt;code&gt;:ok&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="575d3a4dccc355486708c0f537c0716004925b5b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#run/3&quot;&gt;&lt;code&gt;run/3&lt;/code&gt;&lt;/a&gt;, but scans the target several times collecting all matches of the regular expression.</source>
          <target state="translated">&lt;a href=&quot;#run/3&quot;&gt; &lt;code&gt;run/3&lt;/code&gt; &lt;/a&gt;と同じですが、ターゲットを数回スキャンして、正規表現のすべての一致を収集します。</target>
        </trans-unit>
        <trans-unit id="b77457b6b2b1ee2217867a7c46a67495e6e62c68" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; but also starts the applications listed under &lt;code&gt;:applications&lt;/code&gt; in the &lt;code&gt;.app&lt;/code&gt; file in case they were not previously started.</source>
          <target state="translated">&lt;a href=&quot;#start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; と&lt;/a&gt;同じ &lt;code&gt;:applications&lt;/code&gt; が、以前に起動されていない場合に備えて、 &lt;code&gt;.app&lt;/code&gt; ファイルの：applicationsにリストされているアプリケーションも起動します。</target>
        </trans-unit>
        <trans-unit id="e78793e6d643221f3a0ae420ea08015425edcec9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; but returns &lt;code&gt;:ok&lt;/code&gt; if the application was already started. This is useful in scripts and in test setup, where test applications need to be explicitly started:</source>
          <target state="translated">&lt;a href=&quot;#start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; と&lt;/a&gt;同じですが、アプリケーションがすでに開始されている場合は &lt;code&gt;:ok&lt;/code&gt; を返します。これは、テストアプリケーションを明示的に開始する必要があるスクリプトやテストセットアップで役立ちます。</target>
        </trans-unit>
        <trans-unit id="0a3828c1ba3c6005e9c3108c08cdb5024ed08348" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#start_link/2&quot;&gt;&lt;code&gt;start_link/2&lt;/code&gt;&lt;/a&gt; but a module, function, and arguments are expected instead of an anonymous function; &lt;code&gt;fun&lt;/code&gt; in &lt;code&gt;module&lt;/code&gt; will be called with the given arguments &lt;code&gt;args&lt;/code&gt; to initialize the state.</source>
          <target state="translated">&lt;a href=&quot;#start_link/2&quot;&gt; &lt;code&gt;start_link/2&lt;/code&gt; と&lt;/a&gt;同じですが、無名関数の代わりにモジュール、関数、および引数が必要です。 &lt;code&gt;fun&lt;/code&gt; in &lt;code&gt;module&lt;/code&gt; は、指定された引数 &lt;code&gt;args&lt;/code&gt; を使用して呼び出され、状態を初期化します。</target>
        </trans-unit>
        <trans-unit id="a7642aeb9f07cd0551ad686039cb0019e61b10b4" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#start_supervised/2&quot;&gt;&lt;code&gt;start_supervised/2&lt;/code&gt;&lt;/a&gt; but returns the PID on success and raises if not started properly.</source>
          <target state="translated">&lt;a href=&quot;#start_supervised/2&quot;&gt; &lt;code&gt;start_supervised/2&lt;/code&gt; と&lt;/a&gt;同じですが、成功するとPIDを返し、正しく開始されない場合は発生します。</target>
        </trans-unit>
        <trans-unit id="b74921cc1238626c0cdfe7d517884a5434d9754d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#stat/2&quot;&gt;&lt;code&gt;stat/2&lt;/code&gt;&lt;/a&gt; but returns the &lt;a href=&quot;file.stat&quot;&gt;&lt;code&gt;File.Stat&lt;/code&gt;&lt;/a&gt; directly, or raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if an error is returned.</source>
          <target state="translated">&lt;a href=&quot;#stat/2&quot;&gt; &lt;code&gt;stat/2&lt;/code&gt; と&lt;/a&gt;同じですが、&lt;a href=&quot;file.stat&quot;&gt; &lt;code&gt;File.Stat&lt;/code&gt; を&lt;/a&gt;直接返します。エラーが返された場合は、&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="752522d479f590f393198cc7a71e949163e1bfc7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#tmp_dir/0&quot;&gt;&lt;code&gt;tmp_dir/0&lt;/code&gt;&lt;/a&gt; but raises &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; instead of returning &lt;code&gt;nil&lt;/code&gt; if no temp dir is set.</source>
          <target state="translated">&lt;a href=&quot;#tmp_dir/0&quot;&gt; &lt;code&gt;tmp_dir/0&lt;/code&gt; と&lt;/a&gt;同じですが、一時ディレクトリが設定されていない場合、 &lt;code&gt;nil&lt;/code&gt; を返す代わりに、&lt;a href=&quot;runtimeerror&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;を発生させます。</target>
        </trans-unit>
        <trans-unit id="0f0e9ffc8fa804b8724f92c838bc286537c2fe1b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#touch/2&quot;&gt;&lt;code&gt;touch/2&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#touch/2&quot;&gt; &lt;code&gt;touch/2&lt;/code&gt; と&lt;/a&gt;同じですが、失敗すると&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f77f681371830c84b3006064d21f15db82e03e0f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#update/3&quot;&gt;&lt;code&gt;update/3&lt;/code&gt;&lt;/a&gt; but a module, function, and arguments are expected instead of an anonymous function. The state is added as first argument to the given list of arguments.</source>
          <target state="translated">&lt;a href=&quot;#update/3&quot;&gt; &lt;code&gt;update/3&lt;/code&gt; と&lt;/a&gt;同じですが、無名関数の代わりにモジュール、関数、および引数が必要です。状態は、指定された引数リストの最初の引数として追加されます。</target>
        </trans-unit>
        <trans-unit id="66821177dd6aa530fcb0000506d72a8e2ab408e7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#user_home/0&quot;&gt;&lt;code&gt;user_home/0&lt;/code&gt;&lt;/a&gt; but raises &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; instead of returning &lt;code&gt;nil&lt;/code&gt; if no user home is set.</source>
          <target state="translated">&lt;a href=&quot;#user_home/0&quot;&gt; &lt;code&gt;user_home/0&lt;/code&gt; と&lt;/a&gt;同じですが、ユーザーのホームが設定されていない場合は &lt;code&gt;nil&lt;/code&gt; を返す代わりに、&lt;a href=&quot;runtimeerror&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;を発生させます。</target>
        </trans-unit>
        <trans-unit id="8977282b08efdcece77456c7255cb72c1b1e4397" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#write/3&quot;&gt;&lt;code&gt;write/3&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#write/3&quot;&gt; &lt;code&gt;write/3&lt;/code&gt; と&lt;/a&gt;同じですが、失敗すると&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0e1bb5e835ea84efb6ed3926f6ca1a526b10413b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#write_stat/3&quot;&gt;&lt;code&gt;write_stat/3&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#write_stat/3&quot;&gt; &lt;code&gt;write_stat/3&lt;/code&gt; と&lt;/a&gt;同じですが、失敗すると&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合は &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0e420af5a80458e93aaceadae51899a9fda1e40e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;list(:visible)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list(:visible)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="72636a9e74014e05a068fdeb4cbbbe0b8cdb277c" translate="yes" xml:space="preserve">
          <source>Sample config provider</source>
          <target state="translated">サンプル設定プロバイダ</target>
        </trans-unit>
        <trans-unit id="96628af1c348f649b32608354d505436e3d1b258" translate="yes" xml:space="preserve">
          <source>Save it as &lt;code&gt;simple.exs&lt;/code&gt; and execute it with &lt;code&gt;elixir&lt;/code&gt;:</source>
          <target state="translated">それを保存 &lt;code&gt;simple.exs&lt;/code&gt; し、それを実行し &lt;code&gt;elixir&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="1469fbd916831395b6490858a3b537c06e6af8b1" translate="yes" xml:space="preserve">
          <source>Say we have a &lt;code&gt;LousyCalculator&lt;/code&gt; module, which performs the usual arithmetic operations (sum, product, and so on) but, instead of returning numbers, it returns tuples with the result of an operation as the first element and a random remark as the second element.</source>
          <target state="translated">通常の算術演算（合計、積など）を実行する &lt;code&gt;LousyCalculator&lt;/code&gt; モジュールがあるが、数値を返すのではなく、演算の結果を最初の要素として、ランダムな注釈を2番目の要素としてタプルを返すとします。 。</target>
        </trans-unit>
        <trans-unit id="97a0b16b16a4b9ffa852bc90badc2708b654ea72" translate="yes" xml:space="preserve">
          <source>Say we want to implement a bunch of parsers, each parsing structured data: for example, a JSON parser and a MessagePack parser. Each of these two parsers will &lt;em&gt;behave&lt;/em&gt; the same way: both will provide a &lt;code&gt;parse/1&lt;/code&gt; function and an &lt;code&gt;extensions/0&lt;/code&gt; function. The &lt;code&gt;parse/1&lt;/code&gt; function will return an Elixir representation of the structured data, while the &lt;code&gt;extensions/0&lt;/code&gt; function will return a list of file extensions that can be used for each type of data (e.g., &lt;code&gt;.json&lt;/code&gt; for JSON files).</source>
          <target state="translated">たとえば、JSONパーサーやMessagePackパーサーなど、一連のパーサーを実装して、それぞれが構造化データを解析するとします。これらの2つのパーサーはそれぞれ同じように&lt;em&gt;動作&lt;/em&gt;します。どちらも &lt;code&gt;parse/1&lt;/code&gt; 関数と &lt;code&gt;extensions/0&lt;/code&gt; 関数を提供します。 &lt;code&gt;parse/1&lt;/code&gt; ながら機能は、構造化データのエリクサー表現が返される &lt;code&gt;extensions/0&lt;/code&gt; 関数は、例えば、（データの種類ごとに使用することができるファイル拡張子のリストを返します &lt;code&gt;.json&lt;/code&gt; JSONファイル用）。</target>
        </trans-unit>
        <trans-unit id="f797ec069a3a588cc93b2d7e7b51ec1b87b751dc" translate="yes" xml:space="preserve">
          <source>Scripted mode</source>
          <target state="translated">スクリプトモード</target>
        </trans-unit>
        <trans-unit id="8847aea2b37857c4fe9c4e29d9a32c95be30e798" translate="yes" xml:space="preserve">
          <source>Second, IEx allows you to break an expression into many lines, since this is common in Elixir. For example:</source>
          <target state="translated">第二に、IExでは式を多くの行に分割することができます。例えば</target>
        </trans-unit>
        <trans-unit id="80863c7291923af44e1f330d4438e654d8c8d816" translate="yes" xml:space="preserve">
          <source>Security patches only</source>
          <target state="translated">セキュリティパッチのみ</target>
        </trans-unit>
        <trans-unit id="f87ff12a5586b140b44d0aed5d1141d157905ed6" translate="yes" xml:space="preserve">
          <source>Security: a security issue in the implementation may arise whose resolution requires backwards incompatible changes. We reserve the right to address such security issues.</source>
          <target state="translated">セキュリティ:実装におけるセキュリティ上の問題が発生する可能性があり、その解決には後方互換性のない変更が必要となります。当社は、このようなセキュリティ問題に対処する権利を留保します。</target>
        </trans-unit>
        <trans-unit id="3d297aad6172ead65e3f02dab6f6aac40aa79934" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#async_stream/5&quot;&gt;&lt;code&gt;async_stream/5&lt;/code&gt;&lt;/a&gt; for discussion, options, and more examples.</source>
          <target state="translated">&lt;a href=&quot;#async_stream/5&quot;&gt; &lt;code&gt;async_stream/5&lt;/code&gt; を&lt;/a&gt;参照説明、オプション、およびその他の例については、を。</target>
        </trans-unit>
        <trans-unit id="b9ea2a4f9446b7042ac45e1cc5f076950d4c363d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#async_stream/6&quot;&gt;&lt;code&gt;async_stream/6&lt;/code&gt;&lt;/a&gt; for discussion and examples.</source>
          <target state="translated">&lt;a href=&quot;#async_stream/6&quot;&gt; &lt;code&gt;async_stream/6&lt;/code&gt; を&lt;/a&gt;参照してください説明と例については、を。</target>
        </trans-unit>
        <trans-unit id="ab0b50cd928f15f49cfb5f68465e7dfe1adc62ce" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#async_stream/6&quot;&gt;&lt;code&gt;async_stream/6&lt;/code&gt;&lt;/a&gt; for discussion, options, and examples.</source>
          <target state="translated">&lt;a href=&quot;#async_stream/6&quot;&gt; &lt;code&gt;async_stream/6&lt;/code&gt; を&lt;/a&gt;参照してください説明、オプション、および例については、を。</target>
        </trans-unit>
        <trans-unit id="c711218ea0622a68dc6c47b17be58ae3b4864c62" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#compile_file/2&quot;&gt;&lt;code&gt;compile_file/2&lt;/code&gt;&lt;/a&gt; if you would like to compile a file without tracking its filenames. Finally, if you would like to get the result of evaluating a file rather than the modules defined in it, see &lt;a href=&quot;#eval_file/2&quot;&gt;&lt;code&gt;eval_file/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイル名を追跡せずにファイルをコンパイルする場合は、&lt;a href=&quot;#compile_file/2&quot;&gt; &lt;code&gt;compile_file/2&lt;/code&gt; を&lt;/a&gt;参照してください。最後に、ファイルで定義されたモジュールではなく、ファイルの評価結果を取得したい場合は、&lt;a href=&quot;#eval_file/2&quot;&gt; &lt;code&gt;eval_file/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6204a9c040341b764a2faf52239bda6c2bbaf5b0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#compiler_options/1&quot;&gt;&lt;code&gt;compiler_options/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#compiler_options/1&quot;&gt; &lt;code&gt;compiler_options/1&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7ca396c98cfdbd4e90a303c7e6adb445c5b12ce0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#eval_string/3&quot;&gt;&lt;code&gt;eval_string/3&lt;/code&gt;&lt;/a&gt; for a description of bindings and options.</source>
          <target state="translated">バインディングとオプションの説明については、&lt;a href=&quot;#eval_string/3&quot;&gt; &lt;code&gt;eval_string/3&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a25453935310383344a90ea3aef438a7fa788ccc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#format_string!/2&quot;&gt;&lt;code&gt;format_string!/2&lt;/code&gt;&lt;/a&gt; for more information on code formatting and available options.</source>
          <target state="translated">コードのフォーマットと使用可能なオプションの詳細については、&lt;a href=&quot;#format_string!/2&quot;&gt; &lt;code&gt;format_string!/2&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2883129c68b02ac70cbb305db2bb3985757fe9f2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#inspect/2&quot;&gt;&lt;code&gt;inspect/2&lt;/code&gt;&lt;/a&gt; for a full list of options.</source>
          <target state="translated">オプションの完全なリストについては、&lt;a href=&quot;#inspect/2&quot;&gt; &lt;code&gt;inspect/2&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6775db0edf91fd1bcde122f816eb64ab4807cb75" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#line/0&quot;&gt;&lt;code&gt;line/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#line/0&quot;&gt; &lt;code&gt;line/0&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e856b9a0b3c384f7599e00c066aa601e20cd32e9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#multi_call/4&quot;&gt;&lt;code&gt;multi_call/4&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#multi_call/4&quot;&gt; &lt;code&gt;multi_call/4&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="412e2ee91670d1cb67318a56aed59f181db3e2c1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#myers_difference/3&quot;&gt;&lt;code&gt;myers_difference/3&lt;/code&gt;&lt;/a&gt; if you want to handle nesting in the diff scripts.</source>
          <target state="translated">&lt;a href=&quot;#myers_difference/3&quot;&gt; &lt;code&gt;myers_difference/3&lt;/code&gt; を&lt;/a&gt;参照差分スクリプトでネストを処理する場合は、。</target>
        </trans-unit>
        <trans-unit id="5383aa98051793554179d6dd9886bd65adc02068" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt; for the list of available &lt;code&gt;modes&lt;/code&gt;.</source>
          <target state="translated">利用可能な &lt;code&gt;modes&lt;/code&gt; リストについては、&lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e9443c84eb6a0e5596d38a53c0ea69e901bb5f63" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt; for the list of available modes.</source>
          <target state="translated">&lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; を&lt;/a&gt;参照使用可能なモードのリストについては、を。</target>
        </trans-unit>
        <trans-unit id="72587bfb37893ece855338ff229de106ec981e60" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#parse/2&quot;&gt;&lt;code&gt;parse/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;a href=&quot;#parse/2&quot;&gt; &lt;code&gt;parse/2&lt;/code&gt; を&lt;/a&gt;参照をしてください。</target>
        </trans-unit>
        <trans-unit id="a60c62583c5e98de75e0009105889ad004974083" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#random/1&quot;&gt;&lt;code&gt;random/1&lt;/code&gt;&lt;/a&gt; for notes on implementation and random seed.</source>
          <target state="translated">&lt;a href=&quot;#random/1&quot;&gt; &lt;code&gt;random/1&lt;/code&gt; を&lt;/a&gt;参照実装とランダムシードに関する注意事項を。</target>
        </trans-unit>
        <trans-unit id="f79bab9f64b4c1b4a45f5094f7ec3cc5e70348f2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#spec/1&quot;&gt;&lt;code&gt;spec/1&lt;/code&gt;&lt;/a&gt; for the supported keys. If the given specification parameter does not exist, this function will raise. Returns &lt;code&gt;nil&lt;/code&gt; if the application is not loaded.</source>
          <target state="translated">サポートされているキーについては、&lt;a href=&quot;#spec/1&quot;&gt; &lt;code&gt;spec/1&lt;/code&gt; &lt;/a&gt;を参照してください。指定された仕様パラメータが存在しない場合、この関数が発生します。アプリケーションがロードされていない場合は、 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4b86593efd6d87f56f5a4b1d1c80f9efa89b9f35" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#start_link/2&quot;&gt;&lt;code&gt;start_link/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#start_link/2&quot;&gt; &lt;code&gt;start_link/2&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9104acc9f7e509727a191a9c211563bc8c6b8821" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#start_link/3&quot;&gt;&lt;code&gt;start_link/3&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#start_link/3&quot;&gt; &lt;code&gt;start_link/3&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="30ce1591410e8c20c70a914da2c1f177eba54a6b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#start_link/4&quot;&gt;&lt;code&gt;start_link/4&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;a href=&quot;#start_link/4&quot;&gt; &lt;code&gt;start_link/4&lt;/code&gt; を&lt;/a&gt;参照をしてください。</target>
        </trans-unit>
        <trans-unit id="025b78a6ec53671f1f70eaadb8c6a69193d1552c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#time_offset/1&quot;&gt;&lt;code&gt;time_offset/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;a href=&quot;#time_offset/1&quot;&gt; &lt;code&gt;time_offset/1&lt;/code&gt; を&lt;/a&gt;参照してくださいをしてください。</target>
        </trans-unit>
        <trans-unit id="85b0baaaca71d7d382229291aee3fadaa203940b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;calendar#c:day_rollover_relative_to_midnight_utc/0&quot;&gt;&lt;code&gt;Calendar.day_rollover_relative_to_midnight_utc/0&lt;/code&gt;&lt;/a&gt; for documentation.</source>
          <target state="translated">&lt;a href=&quot;calendar#c:day_rollover_relative_to_midnight_utc/0&quot;&gt; &lt;code&gt;Calendar.day_rollover_relative_to_midnight_utc/0&lt;/code&gt; を&lt;/a&gt;参照してくださいドキュメントを。</target>
        </trans-unit>
        <trans-unit id="39aa7c276c8b00b83eda4436db990a46be4f135d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;calendar.timezonedatabase&quot;&gt;&lt;code&gt;Calendar.TimeZoneDatabase&lt;/code&gt;&lt;/a&gt; for more information on custom time zone databases.</source>
          <target state="translated">&lt;a href=&quot;calendar.timezonedatabase&quot;&gt; &lt;code&gt;Calendar.TimeZoneDatabase&lt;/code&gt; を&lt;/a&gt;参照してくださいカスタムタイムゾーンデータベースのを。</target>
        </trans-unit>
        <trans-unit id="b437e60993127a72d9f00604cb32048636bf30b7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;exunit.case&quot;&gt;&lt;code&gt;ExUnit.Case&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exunit.callbacks&quot;&gt;&lt;code&gt;ExUnit.Callbacks&lt;/code&gt;&lt;/a&gt; for more information about defining test cases and setting up callbacks.</source>
          <target state="translated">&lt;a href=&quot;exunit.case&quot;&gt; &lt;code&gt;ExUnit.Case&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;exunit.callbacks&quot;&gt; &lt;code&gt;ExUnit.Callbacks&lt;/code&gt; を&lt;/a&gt;参照してくださいテストケースの定義とコールバックの設定のを。</target>
        </trans-unit>
        <trans-unit id="c5e92f1a723af642ec18095ee3c3e5a7b44a5253" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#demonitor-2&quot;&gt;&lt;code&gt;:erlang.demonitor/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#demonitor-2&quot;&gt; &lt;code&gt;:erlang.demonitor/2&lt;/code&gt; を&lt;/a&gt;参照してくださいをしてください。</target>
        </trans-unit>
        <trans-unit id="236c47cfb4f80177fcf2f8fee345fdbbdb89da09" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#hibernate-3&quot;&gt;&lt;code&gt;:erlang.hibernate/3&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#hibernate-3&quot;&gt; &lt;code&gt;:erlang.hibernate/3&lt;/code&gt; を&lt;/a&gt;参照してくださいをしてください。</target>
        </trans-unit>
        <trans-unit id="eb6d7556c0af02d5c3798524709f1fdfd3d33b21" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#link-1&quot;&gt;&lt;code&gt;:erlang.link/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#link-1&quot;&gt; &lt;code&gt;:erlang.link/1&lt;/code&gt; を&lt;/a&gt;参照してくださいをしてください。</target>
        </trans-unit>
        <trans-unit id="b294ce31a8bb19561980ff4b847d775b1ea0dc45" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor-2&quot;&gt;&lt;code&gt;:erlang.monitor/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor-2&quot;&gt; &lt;code&gt;:erlang.monitor/2&lt;/code&gt; を&lt;/a&gt;参照してくださいをしてください。</target>
        </trans-unit>
        <trans-unit id="937ed9e63e3b26fc6260095741b862928cedd6d2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_flag-2&quot;&gt;&lt;code&gt;:erlang.process_flag/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_flag-2&quot;&gt; &lt;code&gt;:erlang.process_flag/2&lt;/code&gt; を&lt;/a&gt;参照してくださいをしてください。</target>
        </trans-unit>
        <trans-unit id="5cb7732eb146e3fb56c4b2718c19b9b1594162d2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_flag-3&quot;&gt;&lt;code&gt;:erlang.process_flag/3&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細は&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_flag-3&quot;&gt; &lt;code&gt;:erlang.process_flag/3&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1b8a68e27e33937ed393acd9f8bbbb6ac56124be" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_info-1&quot;&gt;&lt;code&gt;:erlang.process_info/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細は&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_info-1&quot;&gt; &lt;code&gt;:erlang.process_info/1&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c57f8a3d92d9199927d2cc7fa62dbb000dd3236c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_info-2&quot;&gt;&lt;code&gt;:erlang.process_info/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細は&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_info-2&quot;&gt; &lt;code&gt;:erlang.process_info/2&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="09e49090898de7a7c2f63c4761f683b4aa8ffefe" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#processes-0&quot;&gt;&lt;code&gt;:erlang.processes/0&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細は&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#processes-0&quot;&gt; &lt;code&gt;:erlang.processes/0&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c9b42c9b4711df8ae0d4cbe5f4d34c94df707f05" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#unlink-1&quot;&gt;&lt;code&gt;:erlang.unlink/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細は&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#unlink-1&quot;&gt; &lt;code&gt;:erlang.unlink/1&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="90a52cb46cb51ef1c81084e7b546e8f0e253d2e0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#whereis-1&quot;&gt;&lt;code&gt;:erlang.whereis/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細は&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#whereis-1&quot;&gt; &lt;code&gt;:erlang.whereis/1&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="17e5bc7119d17d5e936d1012e37bfd0ad107efba" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://elixir-lang.org/getting-started/mix-otp/genserver.html#the-need-for-monitoring&quot;&gt;the need for monitoring&lt;/a&gt; for an example. See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor-2&quot;&gt;&lt;code&gt;:erlang.monitor/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">例について&lt;a href=&quot;https://elixir-lang.org/getting-started/mix-otp/genserver.html#the-need-for-monitoring&quot;&gt;は、監視の必要性を&lt;/a&gt;参照してください。詳細は&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor-2&quot;&gt; &lt;code&gt;:erlang.monitor/2&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ff292d29bb98bb0fb3e3262c9d111868a43a1bea" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Opts.html&quot;&gt;&lt;code&gt;Inspect.Opts&lt;/code&gt;&lt;/a&gt; for the full list of options.</source>
          <target state="translated">オプションの完全なリストについては、&lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Opts.html&quot;&gt; &lt;code&gt;Inspect.Opts&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ff7fac65821b31c7cfc50567f8471dc1022a6991" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html#configure/1&quot;&gt;&lt;code&gt;ExUnit.configure/1&lt;/code&gt;&lt;/a&gt; for more information on configuration options.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html#configure/1&quot;&gt; &lt;code&gt;ExUnit.configure/1&lt;/code&gt; を&lt;/a&gt;参照してください設定オプションのを。</target>
        </trans-unit>
        <trans-unit id="6edba8d79bc2caa95282b27ca2537278ef94ab01" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;iex#break!/4&quot;&gt;&lt;code&gt;IEx.break!/4&lt;/code&gt;&lt;/a&gt; for a complete description of breakpoints in IEx.</source>
          <target state="translated">&lt;a href=&quot;iex#break!/4&quot;&gt; &lt;code&gt;IEx.break!/4&lt;/code&gt; &lt;/a&gt;のブレークポイントの詳細については、IEx.break！/ 4を参照してください。</target>
        </trans-unit>
        <trans-unit id="5122ba27d8721b949fffc951604aa13f45980e9b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;inspect.opts&quot;&gt;&lt;code&gt;Inspect.Opts&lt;/code&gt;&lt;/a&gt; for a full list of remaining formatting options.</source>
          <target state="translated">残りのフォーマットオプションの完全なリストについては、&lt;a href=&quot;inspect.opts&quot;&gt; &lt;code&gt;Inspect.Opts&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1dc68776cfd1eb7d70aa15085d8f462ed1d3d053" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;io#getn/3&quot;&gt;&lt;code&gt;IO.getn/3&lt;/code&gt;&lt;/a&gt; for a description of return values.</source>
          <target state="translated">戻り値の説明については、&lt;a href=&quot;io#getn/3&quot;&gt; &lt;code&gt;IO.getn/3&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="97d611377e22e5db00ff12e232a607ad3ab3ef5e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;kernel#defoverridable/1&quot;&gt;&lt;code&gt;Kernel.defoverridable/1&lt;/code&gt;&lt;/a&gt; for more information and documentation.</source>
          <target state="translated">詳細およびドキュメントについては、&lt;a href=&quot;kernel#defoverridable/1&quot;&gt; &lt;code&gt;Kernel.defoverridable/1&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="571066f54659ec2ac5b16799e2adaad081cfb2dd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;kernel.specialforms#import/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.import/2&lt;/code&gt;&lt;/a&gt; for more information on importing.</source>
          <target state="translated">インポートの詳細については、&lt;a href=&quot;kernel.specialforms#import/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.import/2&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2f044d50d2ace10fab3e6c795376b601501a3205" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;stream#run/1&quot;&gt;&lt;code&gt;Stream.run/1&lt;/code&gt;&lt;/a&gt; for an example of streaming into a file.</source>
          <target state="translated">ファイルへのストリーミングの例については、&lt;a href=&quot;stream#run/1&quot;&gt; &lt;code&gt;Stream.run/1&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c71eb54f62c0e44af2d3fc12b12fd9ffd5a6142c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="14914fd526c793471e43dfbd5057556d75ec048c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;task#async/1&quot;&gt;&lt;code&gt;Task.async/1&lt;/code&gt;&lt;/a&gt; for more information. The task spawned must be always awaited on by calling &lt;a href=&quot;task#await/1&quot;&gt;&lt;code&gt;Task.await/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;task#async/1&quot;&gt; &lt;code&gt;Task.async/1&lt;/code&gt; &lt;/a&gt;を参照してください。生成されたタスクは、&lt;a href=&quot;task#await/1&quot;&gt; &lt;code&gt;Task.await/1&lt;/code&gt; を&lt;/a&gt;呼び出して常に待機する必要があります</target>
        </trans-unit>
        <trans-unit id="3aa41a4f7ed7d2b0af79578b5fcca0043e0e1e47" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;%Task{}&lt;/code&gt; for information about each field of the structure.</source>
          <target state="translated">構造体の各フィールドについては、 &lt;code&gt;%Task{}&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="4cceaf34a6a814616d8794130f79ffcf533b24d5" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;encode_www_form&lt;/code&gt; if you are interested in escaping reserved characters too.</source>
          <target state="translated">予約文字のエスケープにも関心がある場合は、 &lt;code&gt;encode_www_form&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c68610d4f3ab56d8617f2cfbefaa73856e91cce0" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#async/3&quot;&gt;&lt;code&gt;async/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#async/3&quot;&gt; &lt;code&gt;async/3&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="29a63667da796e9c242be4119c0fafe37c909456" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#filter/2&quot;&gt;&lt;code&gt;filter/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#filter/2&quot;&gt; &lt;code&gt;filter/2&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="0a0192db1681c0a57d284e9275a06f0331fb0685" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#if/2&quot;&gt;&lt;code&gt;if/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#if/2&quot;&gt; &lt;code&gt;if/2&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="521978e302ce7fcc9d153cb10876b8947a2b4270" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#reject/2&quot;&gt;&lt;code&gt;reject/2&lt;/code&gt;&lt;/a&gt; which discards all elements where the function returns a truthy value.</source>
          <target state="translated">関数が真の値を返すすべての要素を破棄する&lt;a href=&quot;#reject/2&quot;&gt; &lt;code&gt;reject/2&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="a6f19e1118fb5439e3b2951ab6f2872117a4c839" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;calendar#compatible_calendars?/2&quot;&gt;&lt;code&gt;Calendar.compatible_calendars?/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;calendar#compatible_calendars?/2&quot;&gt; &lt;code&gt;Calendar.compatible_calendars?/2&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="cce61e3bd48619c59d1a4129a8b1e9973519ccfe" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;function#capture/3&quot;&gt;&lt;code&gt;Function.capture/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;function#capture/3&quot;&gt; &lt;code&gt;Function.capture/3&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="57eefd5a434fd09c6836f667932fd5024b9ccc46" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;kernel#is_atom/1&quot;&gt;&lt;code&gt;Kernel.is_atom/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;kernel#is_atom/1&quot;&gt; &lt;code&gt;Kernel.is_atom/1&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="2b47b902698fa63ed92ca0c651047d9fbaef5a1d" translate="yes" xml:space="preserve">
          <source>See the &quot;Child specification&quot; section in the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for more detailed information.</source>
          <target state="translated">&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;の「子の仕様」セクションを参照してくださいモジュールください。</target>
        </trans-unit>
        <trans-unit id="1dd6eb5e99c7c03dbe3b1d4be075fa120ab3f831" translate="yes" xml:space="preserve">
          <source>See the &quot;Child specification&quot; section in the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for more detailed information. The &lt;code&gt;@doc&lt;/code&gt; annotation immediately preceding &lt;code&gt;use Agent&lt;/code&gt; will be attached to the generated &lt;a href=&quot;#child_spec/1&quot;&gt;&lt;code&gt;child_spec/1&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">詳細については、&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールの「子の仕様」セクションを参照してください。 &lt;code&gt;use Agent&lt;/code&gt; 直前の &lt;code&gt;@doc&lt;/code&gt; アノテーションは、生成された&lt;a href=&quot;#child_spec/1&quot;&gt; &lt;code&gt;child_spec/1&lt;/code&gt; &lt;/a&gt;関数に添付されます。</target>
        </trans-unit>
        <trans-unit id="960d22cd31686e11772eef98ee456c7709453659" translate="yes" xml:space="preserve">
          <source>See the &quot;Child specification&quot; section in the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for more detailed information. The &lt;code&gt;@doc&lt;/code&gt; annotation immediately preceding &lt;code&gt;use GenServer&lt;/code&gt; will be attached to the generated &lt;code&gt;child_spec/1&lt;/code&gt; function.</source>
          <target state="translated">詳細については、&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールの「子の仕様」セクションを参照してください。 &lt;code&gt;use GenServer&lt;/code&gt; を使用する直前の &lt;code&gt;@doc&lt;/code&gt; アノテーションは、生成された &lt;code&gt;child_spec/1&lt;/code&gt; 関数に添付されます。</target>
        </trans-unit>
        <trans-unit id="7b1dc97a60bbc7638b75a98279e08aacfb50a439" translate="yes" xml:space="preserve">
          <source>See the &quot;Child specification&quot; section in the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for more detailed information. The &lt;code&gt;@doc&lt;/code&gt; annotation immediately preceding &lt;code&gt;use Task&lt;/code&gt; will be attached to the generated &lt;a href=&quot;#child_spec/1&quot;&gt;&lt;code&gt;child_spec/1&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">詳細については、&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールの「子の仕様」セクションを参照してください。 &lt;code&gt;use Task&lt;/code&gt; の直前の &lt;code&gt;@doc&lt;/code&gt; アノテーションは、生成された&lt;a href=&quot;#child_spec/1&quot;&gt; &lt;code&gt;child_spec/1&lt;/code&gt; &lt;/a&gt;関数に添付されます。</target>
        </trans-unit>
        <trans-unit id="30dd4d39d714824873c91242d2b45957ae02a0c9" translate="yes" xml:space="preserve">
          <source>See the &quot;Child specification&quot; section in the module documentation for all of the available keys for overriding.</source>
          <target state="translated">オーバーライドに使用できるすべてのキーについては、モジュールドキュメントの「子の仕様」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="13a1ebd27d05e64d87df69ec749b3054f6d91e47" translate="yes" xml:space="preserve">
          <source>See the &quot;Examples&quot; section for examples on how to use these macros.</source>
          <target state="translated">これらのマクロの使用方法については、「例」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4715e0f5e31a7ecf5eb97e3118b4e7cb9a349e30" translate="yes" xml:space="preserve">
          <source>See the &quot;Requirements&quot; section in the &lt;a href=&quot;version&quot;&gt;&lt;code&gt;Version&lt;/code&gt;&lt;/a&gt; module for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;version&quot;&gt; &lt;code&gt;Version&lt;/code&gt; &lt;/a&gt;モジュールの「要件」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="085f6faad706b44fbfe10741a52117a1876b7c28" translate="yes" xml:space="preserve">
          <source>See the &quot;Runtime Configuration&quot; section in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; module documentation for the available options. The changes done here are automatically persisted to the &lt;code&gt;:logger&lt;/code&gt; application environment.</source>
          <target state="translated">使用可能なオプションについては、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントの「ランタイム構成」セクションを参照してください。ここで行われた変更は、自動的に &lt;code&gt;:logger&lt;/code&gt; アプリケーション環境に永続化されます。</target>
        </trans-unit>
        <trans-unit id="cca171332e51871d4f29f2362aba4c90108dd995" translate="yes" xml:space="preserve">
          <source>See the &quot;Supervisor and worker options&quot; section in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Supervisor.Spec&lt;/code&gt;&lt;/a&gt; module for more information on the available options.</source>
          <target state="translated">使用可能なオプションの詳細については、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Supervisor.Spec&lt;/code&gt; &lt;/a&gt;モジュールの「スーパーバイザーとワーカーのオプション」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="fed1d1ad790bc4b32e368f1dd909f8be2e226649" translate="yes" xml:space="preserve">
          <source>See the &quot;User-defined types&quot; and &quot;Defining a specification&quot; sub-sections below for more information on defining types and typespecs.</source>
          <target state="translated">タイプの定義とタイプ仕様の詳細については、以下の「ユーザー定義タイプ」と「仕様の定義」のサブセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="d47f633402a6dc7774499c24b6dc4ec38c37f7ac" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://hex.pm/docs/usage&quot;&gt;Hex usage documentation&lt;/a&gt; for Hex options.</source>
          <target state="translated">&lt;a href=&quot;https://hex.pm/docs/usage&quot;&gt;Hexの使用法のドキュメントを&lt;/a&gt;参照してくださいHexオプションを。</target>
        </trans-unit>
        <trans-unit id="f2819013089d7de456841d6baad7b4a9a0642c29" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://hexdocs.pm/elixir/IO.ANSI.html&quot;&gt;&lt;code&gt;IO.ANSI&lt;/code&gt;&lt;/a&gt; module for a list of colors and attributes.</source>
          <target state="translated">色と属性のリストについては、&lt;a href=&quot;https://hexdocs.pm/elixir/IO.ANSI.html&quot;&gt; &lt;code&gt;IO.ANSI&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="e4e1309d06b307016c3bb04091688992534bfea8" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for a discussion on child specifications and the available specification keys.</source>
          <target state="translated">子仕様と使用可能な仕様キーの説明については、&lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="31cebecc5227b5e52c63b7361e188bd42aa17e0e" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; module for more information about maps, their syntax, and ways to access and manipulate them.</source>
          <target state="translated">マップ、その構文、およびそれらにアクセスして操作する方法の詳細については、&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="651c622de5237592dd974ed0f2426a971dc5e1d4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;map#fetch/2&quot;&gt;&lt;code&gt;Map.fetch/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;keyword#fetch/2&quot;&gt;&lt;code&gt;Keyword.fetch/2&lt;/code&gt;&lt;/a&gt; implementations for examples of how to implement this callback.</source>
          <target state="translated">このコールバックの実装方法の例については、&lt;a href=&quot;map#fetch/2&quot;&gt; &lt;code&gt;Map.fetch/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;keyword#fetch/2&quot;&gt; &lt;code&gt;Keyword.fetch/2&lt;/code&gt; の&lt;/a&gt;実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="b624e472805d3adc4b87dc79e98807bc8b027cc7" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;mix.project&quot;&gt;&lt;code&gt;Mix.Project&lt;/code&gt;&lt;/a&gt; module for detailed documentation on Mix projects.</source>
          <target state="translated">Mixプロジェクトの詳細なドキュメントについては、&lt;a href=&quot;mix.project&quot;&gt; &lt;code&gt;Mix.Project&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="7d2161f4dd28a8df53dbe019879d314fcf1214b8" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;mix.task&quot;&gt;&lt;code&gt;Mix.Task&lt;/code&gt;&lt;/a&gt; behaviour for detailed documentation on Mix tasks.</source>
          <target state="translated">Mixタスクの詳細なドキュメントについては、&lt;a href=&quot;mix.task&quot;&gt; &lt;code&gt;Mix.Task&lt;/code&gt; &lt;/a&gt;動作を参照してください。</target>
        </trans-unit>
        <trans-unit id="834e1b329e36786a4bfd904e77180b7810718e3a" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;protocol&quot;&gt;&lt;code&gt;Protocol&lt;/code&gt;&lt;/a&gt; module for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;protocol&quot;&gt; &lt;code&gt;Protocol&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="0847e6e61327a1ea818ef259423a8a134e0ee0f4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; docs for a discussion of when you may want to use module-based supervisors. A &lt;code&gt;@doc&lt;/code&gt; annotation immediately preceding &lt;code&gt;use DynamicSupervisor&lt;/code&gt; will be attached to the generated &lt;a href=&quot;#child_spec/1&quot;&gt;&lt;code&gt;child_spec/1&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">モジュールベースのスーパーバイザをいつ使用するかについては、&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。 &lt;code&gt;use DynamicSupervisor&lt;/code&gt; を使用する直前の &lt;code&gt;@doc&lt;/code&gt; アノテーションは、生成された&lt;a href=&quot;#child_spec/1&quot;&gt; &lt;code&gt;child_spec/1&lt;/code&gt; &lt;/a&gt;関数に添付されます。</target>
        </trans-unit>
        <trans-unit id="30646707ecc4c9e5716bc2575d2918e37f631016" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; module for more examples.</source>
          <target state="translated">その他の例については、&lt;a href=&quot;task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="97b5840ba3ecf762a5d50e89e069b4203e9b0770" translate="yes" xml:space="preserve">
          <source>See the documentation of the types &lt;a href=&quot;#t:result/0&quot;&gt;&lt;code&gt;result/0&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#t:acc/0&quot;&gt;&lt;code&gt;acc/0&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#t:result/0&quot;&gt; &lt;code&gt;result/0&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#t:acc/0&quot;&gt; &lt;code&gt;acc/0&lt;/code&gt; &lt;/a&gt;タイプのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="48919ea9082d235b5077c7a570c846b395a36e13" translate="yes" xml:space="preserve">
          <source>See the function &lt;a href=&quot;#translate/4&quot;&gt;&lt;code&gt;translate/4&lt;/code&gt;&lt;/a&gt; in this module for an example implementation and the default messages translated by Logger.</source>
          <target state="translated">実装例とLoggerによって翻訳されるデフォルトのメッセージについては、このモジュールの関数&lt;a href=&quot;#translate/4&quot;&gt; &lt;code&gt;translate/4&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d03554d098407b50efb80318b6cb826078d373be" translate="yes" xml:space="preserve">
          <source>See the functions &lt;a href=&quot;#key/1&quot;&gt;&lt;code&gt;key/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#key!/1&quot;&gt;&lt;code&gt;key!/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#elem/1&quot;&gt;&lt;code&gt;elem/1&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#all/0&quot;&gt;&lt;code&gt;all/0&lt;/code&gt;&lt;/a&gt; for some of the available accessors.</source>
          <target state="translated">使用可能なアクセサの一部については、関数&lt;a href=&quot;#key/1&quot;&gt; &lt;code&gt;key/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#key!/1&quot;&gt; &lt;code&gt;key!/1&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#elem/1&quot;&gt; &lt;code&gt;elem/1&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#all/0&quot;&gt; &lt;code&gt;all/0&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d99ed096cc54f8665e2cf9b783ce3e9873f41906" translate="yes" xml:space="preserve">
          <source>See the implementations for &lt;a href=&quot;map#pop/3&quot;&gt;&lt;code&gt;Map.pop/3&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;keyword#pop/3&quot;&gt;&lt;code&gt;Keyword.pop/3&lt;/code&gt;&lt;/a&gt; for more examples.</source>
          <target state="translated">その他の例については、&lt;a href=&quot;map#pop/3&quot;&gt; &lt;code&gt;Map.pop/3&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;keyword#pop/3&quot;&gt; &lt;code&gt;Keyword.pop/3&lt;/code&gt; &lt;/a&gt;の実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="48e1c7f34e1efc0af461c403476b7022caec0f16" translate="yes" xml:space="preserve">
          <source>See the implementations of &lt;a href=&quot;map#get_and_update/3&quot;&gt;&lt;code&gt;Map.get_and_update/3&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;keyword#get_and_update/3&quot;&gt;&lt;code&gt;Keyword.get_and_update/3&lt;/code&gt;&lt;/a&gt; for more examples.</source>
          <target state="translated">その他の例については、&lt;a href=&quot;map#get_and_update/3&quot;&gt; &lt;code&gt;Map.get_and_update/3&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;keyword#get_and_update/3&quot;&gt; &lt;code&gt;Keyword.get_and_update/3&lt;/code&gt; &lt;/a&gt;の実装をご覧ください。</target>
        </trans-unit>
        <trans-unit id="6c1685eaa54fe519606b25019173c312cf3476a2" translate="yes" xml:space="preserve">
          <source>See the module documentation for examples of using the &lt;a href=&quot;#dispatch/3&quot;&gt;&lt;code&gt;dispatch/3&lt;/code&gt;&lt;/a&gt; function for building custom dispatching or a pubsub system.</source>
          <target state="translated">カスタムディスパッチまたはpubsubシステムを構築するための&lt;a href=&quot;#dispatch/3&quot;&gt; &lt;code&gt;dispatch/3&lt;/code&gt; &lt;/a&gt;関数の使用例については、モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="14956dad2080627640e7bd584face34c8c603039" translate="yes" xml:space="preserve">
          <source>Seen in typespecs between &lt;code&gt;(&lt;/code&gt;/&lt;code&gt;)&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt; / &lt;code&gt;)&lt;/code&gt; の間のtypespecsで見られる：</target>
        </trans-unit>
        <trans-unit id="0bf39df7a763366418834d3b6d581e918c721630" translate="yes" xml:space="preserve">
          <source>Select key, pid, and values registered using full match specs.</source>
          <target state="translated">フルマッチ仕様で登録されたキー、pid、値を選択します。</target>
        </trans-unit>
        <trans-unit id="b240d04328a96aac53d166b5299cca81675589d4" translate="yes" xml:space="preserve">
          <source>Selector</source>
          <target state="translated">Selector</target>
        </trans-unit>
        <trans-unit id="a2fea41f17d4b9ff27715e407e2cf8ec1bb01c0a" translate="yes" xml:space="preserve">
          <source>Self-contained. A release does not require the source code to be included in your production artifacts. All of the code is precompiled and packaged. Releases do not even require Erlang or Elixir in your servers, as they include the Erlang VM and its runtime by default. Furthermore, both Erlang and Elixir standard libraries are stripped to bring only the parts you are actually using.</source>
          <target state="translated">自己完結型。リリースでは、本番の成果物にソースコードを含める必要はありません。すべてのコードはプリコンパイルされてパッケージ化されています。リリースにはデフォルトでErlang VMとそのランタイムが含まれているので、ErlangやElixirをサーバにインストールする必要はありません。さらに、ErlangとElixirの標準ライブラリは、あなたが実際に使っている部分だけを持ってくるようにストリップされています。</target>
        </trans-unit>
        <trans-unit id="fa5e4064e6fa9724596beba2eb2d2bdeb5bdd5ec" translate="yes" xml:space="preserve">
          <source>Self-synchronization</source>
          <target state="translated">Self-synchronization</target>
        </trans-unit>
        <trans-unit id="3c0d7514174147765863ad4a49aa216f1de66c30" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;data&lt;/code&gt; to the port driver &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="translated">送信し &lt;code&gt;data&lt;/code&gt; ポートドライバに &lt;code&gt;port&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f64dd7958524cc44215629f3b20e0dd31bc22fa" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;msg&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt; after &lt;code&gt;time&lt;/code&gt; milliseconds.</source>
          <target state="translated">送信 &lt;code&gt;msg&lt;/code&gt; に &lt;code&gt;dest&lt;/code&gt; した後 &lt;code&gt;time&lt;/code&gt; （ミリ秒）。</target>
        </trans-unit>
        <trans-unit id="17e918478af63ce463699cc4ff1b23f883f95a9f" translate="yes" xml:space="preserve">
          <source>Sends a message to the given &lt;code&gt;dest&lt;/code&gt; and returns the message.</source>
          <target state="translated">所与へメッセージを送信 &lt;code&gt;dest&lt;/code&gt; とメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="b54fc6854b1a982d3c545edf5c557bc49fded778" translate="yes" xml:space="preserve">
          <source>Sends a message to the given &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;dest&lt;/code&gt; にメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="2cefd165c18081fd6fe91c82252ac408d3292fbd" translate="yes" xml:space="preserve">
          <source>Sends an asynchronous request to the &lt;code&gt;server&lt;/code&gt;.</source>
          <target state="translated">非同期リクエストを &lt;code&gt;server&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ca5b7002363f9f0cca78f8e906c3aa3330d0ae12" translate="yes" xml:space="preserve">
          <source>Sends an exit signal with the given &lt;code&gt;reason&lt;/code&gt; to &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;reason&lt;/code&gt; 終了シグナルを &lt;code&gt;pid&lt;/code&gt; に送信します。</target>
        </trans-unit>
        <trans-unit id="1e44ba6bd0968aeac7b6e9cefab2ddb65373d4d8" translate="yes" xml:space="preserve">
          <source>Sends cursor &lt;code&gt;columns&lt;/code&gt; to the left.</source>
          <target state="translated">カーソル &lt;code&gt;columns&lt;/code&gt; を左に移動します。</target>
        </trans-unit>
        <trans-unit id="7f6080a32049ff439b9da9800dd735d75c29d425" translate="yes" xml:space="preserve">
          <source>Sends cursor &lt;code&gt;columns&lt;/code&gt; to the right.</source>
          <target state="translated">カーソル &lt;code&gt;columns&lt;/code&gt; を右に送ります。</target>
        </trans-unit>
        <trans-unit id="6dbc5e735ac797de8a8c5b81a5251a5f1a283865" translate="yes" xml:space="preserve">
          <source>Sends cursor &lt;code&gt;lines&lt;/code&gt; down.</source>
          <target state="translated">カーソル &lt;code&gt;lines&lt;/code&gt; 下に送ります。</target>
        </trans-unit>
        <trans-unit id="b9a4e84d28ea3580244ab3256b50bd9efdbc0151" translate="yes" xml:space="preserve">
          <source>Sends cursor &lt;code&gt;lines&lt;/code&gt; up.</source>
          <target state="translated">カーソル &lt;code&gt;lines&lt;/code&gt; 上に送ります。</target>
        </trans-unit>
        <trans-unit id="bcec44f9ec6cb9df6688389583935ce809c35f6c" translate="yes" xml:space="preserve">
          <source>Sends cursor home.</source>
          <target state="translated">カーソルを原点復帰させます。</target>
        </trans-unit>
        <trans-unit id="bc0e62df768087c38a6a36d743e8886f42bf3c96" translate="yes" xml:space="preserve">
          <source>Sends cursor to the absolute position specified by &lt;code&gt;line&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;line&lt;/code&gt; と &lt;code&gt;column&lt;/code&gt; で指定された絶対位置にカーソルを送ります。</target>
        </trans-unit>
        <trans-unit id="448ab73ba1c21e671e218fb91f2644c834f0c16f" translate="yes" xml:space="preserve">
          <source>Set</source>
          <target state="translated">Set</target>
        </trans-unit>
        <trans-unit id="9be72aa01b53dd3cf81dc5aa2dc80af2f415c3d0" translate="yes" xml:space="preserve">
          <source>Sets Mix debug mode.</source>
          <target state="translated">Mix デバッグモードを設定します。</target>
        </trans-unit>
        <trans-unit id="1d77307070c014b533b9d6cfd05431cb6f0b4261" translate="yes" xml:space="preserve">
          <source>Sets a callback to be executed after the completion of a test suite.</source>
          <target state="translated">テストスイートの完了後に実行されるコールバックを設定します。</target>
        </trans-unit>
        <trans-unit id="95049291413df5043d39363ceb451c80a5958431" translate="yes" xml:space="preserve">
          <source>Sets a new &lt;code&gt;value&lt;/code&gt; for the environment variable &lt;code&gt;varname&lt;/code&gt;.</source>
          <target state="translated">環境変数 &lt;code&gt;varname&lt;/code&gt; の新しい &lt;code&gt;value&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="df04ebaf2d3a8d6495161f70b69f8869f9593188" translate="yes" xml:space="preserve">
          <source>Sets a new value for each environment variable corresponding to each &lt;code&gt;{key, value}&lt;/code&gt; pair in &lt;code&gt;enum&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enum&lt;/code&gt; の各 &lt;code&gt;{key, value}&lt;/code&gt; ペアに対応する各環境変数に新しい値を設定します。</target>
        </trans-unit>
        <trans-unit id="e9ab43d5de5cacd3bc561774001fd54e4bba2a96" translate="yes" xml:space="preserve">
          <source>Sets alternative font 1.</source>
          <target state="translated">代替フォント 1 を設定します。</target>
        </trans-unit>
        <trans-unit id="8edb8def9cdb97da70bf0451c00ff25555c70e10" translate="yes" xml:space="preserve">
          <source>Sets alternative font 2.</source>
          <target state="translated">代替フォントを設定します。</target>
        </trans-unit>
        <trans-unit id="8d1ac9cd4cf8b0e229c6dda3c6ecd12e98303ed1" translate="yes" xml:space="preserve">
          <source>Sets alternative font 3.</source>
          <target state="translated">代替フォントを設定します。</target>
        </trans-unit>
        <trans-unit id="7072854cf2f06837bfe9e42053b67d0885cc7381" translate="yes" xml:space="preserve">
          <source>Sets alternative font 4.</source>
          <target state="translated">代替フォントの設定 4.</target>
        </trans-unit>
        <trans-unit id="2aa48cc2b1893e137ef411ac32f856604cb77735" translate="yes" xml:space="preserve">
          <source>Sets alternative font 5.</source>
          <target state="translated">代替フォントを設定します。</target>
        </trans-unit>
        <trans-unit id="39ca4c1a80bf153fcd9906082161dce28ef18160" translate="yes" xml:space="preserve">
          <source>Sets alternative font 6.</source>
          <target state="translated">代替フォントを設定します。</target>
        </trans-unit>
        <trans-unit id="4215ec54612d026378660065215630d2d5625b02" translate="yes" xml:space="preserve">
          <source>Sets alternative font 7.</source>
          <target state="translated">代替フォントを設定します。</target>
        </trans-unit>
        <trans-unit id="ad6d8612ae8881afaba1678731ca951e971a4545" translate="yes" xml:space="preserve">
          <source>Sets alternative font 8.</source>
          <target state="translated">代替フォントを設定します。</target>
        </trans-unit>
        <trans-unit id="72c2cb3ddc59641afaf2b1648696085dca57354a" translate="yes" xml:space="preserve">
          <source>Sets alternative font 9.</source>
          <target state="translated">代替フォントを設定します。</target>
        </trans-unit>
        <trans-unit id="8cc46141abbbe2bfc4a335984571ebea030f1f4e" translate="yes" xml:space="preserve">
          <source>Sets an environment variable value.</source>
          <target state="translated">環境変数の値を設定します。</target>
        </trans-unit>
        <trans-unit id="a826d74849fb62ee6a74ceb3b1cd7978be06262a" translate="yes" xml:space="preserve">
          <source>Sets background color to black.</source>
          <target state="translated">背景色を黒に設定します。</target>
        </trans-unit>
        <trans-unit id="10d0c6b6216ecb182183e3e4490d75b331e5ac4e" translate="yes" xml:space="preserve">
          <source>Sets background color to blue.</source>
          <target state="translated">背景色を青に設定します。</target>
        </trans-unit>
        <trans-unit id="d1c957999d6dba80218cf8c9e454329ec1c641b4" translate="yes" xml:space="preserve">
          <source>Sets background color to cyan.</source>
          <target state="translated">背景色をシアンに設定します。</target>
        </trans-unit>
        <trans-unit id="465b2301d66d2ec0dd6aba721293763d3f5fbd3c" translate="yes" xml:space="preserve">
          <source>Sets background color to green.</source>
          <target state="translated">背景色を緑に設定します。</target>
        </trans-unit>
        <trans-unit id="fdef1c6739e5c7657622b69f885688ac2aaf4c09" translate="yes" xml:space="preserve">
          <source>Sets background color to light black.</source>
          <target state="translated">背景色を明るい黒に設定します。</target>
        </trans-unit>
        <trans-unit id="6174513109caa31b77c1be107e7629e5ce50fce3" translate="yes" xml:space="preserve">
          <source>Sets background color to light blue.</source>
          <target state="translated">背景色を水色に設定します。</target>
        </trans-unit>
        <trans-unit id="03c66b8d8e716ec6c1fecb339dadb258b6f11e36" translate="yes" xml:space="preserve">
          <source>Sets background color to light cyan.</source>
          <target state="translated">背景色をライトシアンに設定します。</target>
        </trans-unit>
        <trans-unit id="470bff16eaf6d3fe0e9511cc22903bf7199b64f9" translate="yes" xml:space="preserve">
          <source>Sets background color to light green.</source>
          <target state="translated">背景色をライトグリーンに設定します。</target>
        </trans-unit>
        <trans-unit id="c39a6cde4a6acc3a0d5beb27b16ee1f4c511d012" translate="yes" xml:space="preserve">
          <source>Sets background color to light magenta.</source>
          <target state="translated">背景色を明るいマゼンタに設定します。</target>
        </trans-unit>
        <trans-unit id="111295dc77fed13435d084cb4401ea78ad5738ad" translate="yes" xml:space="preserve">
          <source>Sets background color to light red.</source>
          <target state="translated">背景色を淡い赤に設定します。</target>
        </trans-unit>
        <trans-unit id="9ad6ecd81399c88b626b837ebb871a3c9b0bb23f" translate="yes" xml:space="preserve">
          <source>Sets background color to light white.</source>
          <target state="translated">背景色を淡い白に設定します。</target>
        </trans-unit>
        <trans-unit id="a9206206a115c985d751db2969e98ef4a03e0264" translate="yes" xml:space="preserve">
          <source>Sets background color to light yellow.</source>
          <target state="translated">背景色を明るい黄色に設定します。</target>
        </trans-unit>
        <trans-unit id="8a1777285d3d09b9e1d76c7f8cd49f56a1573623" translate="yes" xml:space="preserve">
          <source>Sets background color to magenta.</source>
          <target state="translated">背景色をマゼンタに設定します。</target>
        </trans-unit>
        <trans-unit id="adca10d1c7b344189df9fae05a24c1bd96a1d92d" translate="yes" xml:space="preserve">
          <source>Sets background color to red.</source>
          <target state="translated">背景色を赤に設定します。</target>
        </trans-unit>
        <trans-unit id="b2c0cffecb0fad25ca47ab11177e30d0c791deeb" translate="yes" xml:space="preserve">
          <source>Sets background color to white.</source>
          <target state="translated">背景色を白に設定します。</target>
        </trans-unit>
        <trans-unit id="b1bdfb344a41cbd6621586aef35110ba60881a19" translate="yes" xml:space="preserve">
          <source>Sets background color to yellow.</source>
          <target state="translated">背景色を黄色に設定します。</target>
        </trans-unit>
        <trans-unit id="23e5897be4d76f7fd4bcf26d66bb09668bfae14d" translate="yes" xml:space="preserve">
          <source>Sets background color.</source>
          <target state="translated">背景色を設定します。</target>
        </trans-unit>
        <trans-unit id="b0e963b8a639f7cfa8a928aa5ef30a18f01b8b76" translate="yes" xml:space="preserve">
          <source>Sets compilation options.</source>
          <target state="translated">コンパイルオプションを設定します。</target>
        </trans-unit>
        <trans-unit id="4af3191878353787f09804a940963cda289d2d58" translate="yes" xml:space="preserve">
          <source>Sets foreground color to black.</source>
          <target state="translated">前景色を黒に設定します。</target>
        </trans-unit>
        <trans-unit id="9693e9447a4e2e975813685e987ef317a4f373d1" translate="yes" xml:space="preserve">
          <source>Sets foreground color to blue.</source>
          <target state="translated">前景色を青に設定します。</target>
        </trans-unit>
        <trans-unit id="e44fc44fed1f585a9fb08e38ac54d6f386d53ac5" translate="yes" xml:space="preserve">
          <source>Sets foreground color to cyan.</source>
          <target state="translated">前景色をシアンに設定します。</target>
        </trans-unit>
        <trans-unit id="6c8d3d784036e97c3c14e6d5155a1952076959ea" translate="yes" xml:space="preserve">
          <source>Sets foreground color to green.</source>
          <target state="translated">前景色を緑に設定します。</target>
        </trans-unit>
        <trans-unit id="4643e7e7d60ef13b2f47d12231b5f29dc03d16e3" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light black.</source>
          <target state="translated">前景色を明るい黒に設定します。</target>
        </trans-unit>
        <trans-unit id="a1be063da145c5ab4439b40cb811d8dbef34898c" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light blue.</source>
          <target state="translated">前景色を水色に設定します。</target>
        </trans-unit>
        <trans-unit id="08f981db1719b08b000707738b3ef9fc3d0c75d3" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light cyan.</source>
          <target state="translated">前景色をライトシアンに設定します。</target>
        </trans-unit>
        <trans-unit id="104b8231f209bfbf0b97108717afda2f1750e5d3" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light green.</source>
          <target state="translated">前景色をライトグリーンに設定します。</target>
        </trans-unit>
        <trans-unit id="9db34278c7284edbd42cf0cfc89abc1fb83132ee" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light magenta.</source>
          <target state="translated">前景色を明るいマゼンタに設定します。</target>
        </trans-unit>
        <trans-unit id="db32a2537ecf889b0b1e5629fd7f42272fcb8fb5" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light red.</source>
          <target state="translated">前景色を淡い赤に設定します。</target>
        </trans-unit>
        <trans-unit id="72d00d975399756fdaf345e4284802fef4f90f59" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light white.</source>
          <target state="translated">前景色をライトホワイトに設定します。</target>
        </trans-unit>
        <trans-unit id="30c5f586e9b9108513eabb3254f8b2f1c79928cf" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light yellow.</source>
          <target state="translated">前景色を明るい黄色に設定します。</target>
        </trans-unit>
        <trans-unit id="6abe9f60e85e97f2db25eaee46be72b5178bd4ac" translate="yes" xml:space="preserve">
          <source>Sets foreground color to magenta.</source>
          <target state="translated">前景色をマゼンタに設定します。</target>
        </trans-unit>
        <trans-unit id="0f1aec19bba5405d7e33275e8d1e98684627bc08" translate="yes" xml:space="preserve">
          <source>Sets foreground color to red.</source>
          <target state="translated">前景色を赤に設定します。</target>
        </trans-unit>
        <trans-unit id="137be52a07b0514fd13837fd0050db9f38fd3616" translate="yes" xml:space="preserve">
          <source>Sets foreground color to white.</source>
          <target state="translated">前景色を白に設定します。</target>
        </trans-unit>
        <trans-unit id="2056c5a1cef57a1806341bd57931cd7718d0b632" translate="yes" xml:space="preserve">
          <source>Sets foreground color to yellow.</source>
          <target state="translated">前景色を黄色に設定します。</target>
        </trans-unit>
        <trans-unit id="9d088fae2dd79b40a794415b1ccbd5f28b7b2072" translate="yes" xml:space="preserve">
          <source>Sets foreground color.</source>
          <target state="translated">前景色を設定します。</target>
        </trans-unit>
        <trans-unit id="138c11b17735272c60f9c50b24086509b686f1f3" translate="yes" xml:space="preserve">
          <source>Sets multiple environment variables.</source>
          <target state="translated">複数の環境変数を設定します。</target>
        </trans-unit>
        <trans-unit id="68c33adeac89d23e6d5c99a05bcb4768a7c7a0e8" translate="yes" xml:space="preserve">
          <source>Sets primary (default) font.</source>
          <target state="translated">プライマリ(デフォルト)フォントを設定します。</target>
        </trans-unit>
        <trans-unit id="e3fdb4abe2997f749409b0d03703a7b121cc9bd8" translate="yes" xml:space="preserve">
          <source>Sets the background color from individual RGB values.</source>
          <target state="translated">個々のRGB値から背景色を設定します。</target>
        </trans-unit>
        <trans-unit id="bc55385c692fce0d395e0b8027824e31b2766460" translate="yes" xml:space="preserve">
          <source>Sets the current shell.</source>
          <target state="translated">現在のシェルを設定します。</target>
        </trans-unit>
        <trans-unit id="74d40df198b56abc05f8ae6474de9b6ea08c8551" translate="yes" xml:space="preserve">
          <source>Sets the current time zone database.</source>
          <target state="translated">現在のタイムゾーンデータベースを設定します。</target>
        </trans-unit>
        <trans-unit id="0d9058661731fe47ca5d9563f7f21cf061409cb2" translate="yes" xml:space="preserve">
          <source>Sets the current working directory.</source>
          <target state="translated">現在の作業ディレクトリを設定します。</target>
        </trans-unit>
        <trans-unit id="0481389a90a61b6c7c4ff7d6f8792d81ecb8db2e" translate="yes" xml:space="preserve">
          <source>Sets the foreground color from individual RGB values.</source>
          <target state="translated">個々のRGB値から前景色を設定します。</target>
        </trans-unit>
        <trans-unit id="4544a9510feb0bb4447692b76f601f1678a0ecba" translate="yes" xml:space="preserve">
          <source>Sets the given &lt;code&gt;flag&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt; for the calling process.</source>
          <target state="translated">指定された &lt;code&gt;flag&lt;/code&gt; を呼び出しプロセスの &lt;code&gt;value&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="51027f581acba990017f79f26cef0236eb4184ea" translate="yes" xml:space="preserve">
          <source>Sets the given &lt;code&gt;flag&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt; for the given process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;flag&lt;/code&gt; を、指定されたプロセス &lt;code&gt;pid&lt;/code&gt; の &lt;code&gt;value&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="5c02ad6423bb5f9510d26c0e48d4dc2436660ce3" translate="yes" xml:space="preserve">
          <source>Sets the group leader of the given &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;leader&lt;/code&gt;.</source>
          <target state="translated">与えられたのグループリーダーを設定し &lt;code&gt;pid&lt;/code&gt; に &lt;code&gt;leader&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee2d768284181cfd0a76ff1eedd982eeb0cd8f49" translate="yes" xml:space="preserve">
          <source>Sets the magic cookie of &lt;code&gt;node&lt;/code&gt; to the atom &lt;code&gt;cookie&lt;/code&gt;.</source>
          <target state="translated">マジッククッキーを設定し &lt;code&gt;node&lt;/code&gt; 原子に &lt;code&gt;cookie&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a730a55e3da87bcb0378535ef9cec7bda9822337" translate="yes" xml:space="preserve">
          <source>Sets the number of pending stops in the breakpoint with the given &lt;code&gt;id&lt;/code&gt; to zero.</source>
          <target state="translated">指定された &lt;code&gt;id&lt;/code&gt; ブレークポイントで保留中の停止の数をゼロに設定します。</target>
        </trans-unit>
        <trans-unit id="4dd8c9f35b81d47b86870fbb320fb9caa4087ba5" translate="yes" xml:space="preserve">
          <source>Sets the number of pending stops in the given module, function and arity to zero.</source>
          <target state="translated">指定されたモジュール、関数、およびアリティの保留中のストップの数をゼロに設定します。</target>
        </trans-unit>
        <trans-unit id="5526d1cab96d796578c11fabfff9398f5447f063" translate="yes" xml:space="preserve">
          <source>Sets up a breakpoint in &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;arity&lt;/code&gt; with the given number of &lt;code&gt;stops&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; 、 &lt;code&gt;function&lt;/code&gt; ブレークポイントを設定します &lt;code&gt;stops&lt;/code&gt; 数、 &lt;code&gt;arity&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5ff2890da0c6af3803e3733c3157cb74c62b5167" translate="yes" xml:space="preserve">
          <source>Sets, maps, and other dictionaries can also be given to the &lt;code&gt;:into&lt;/code&gt; option. In general, &lt;code&gt;:into&lt;/code&gt; accepts any structure that implements the &lt;a href=&quot;https://hexdocs.pm/elixir/Collectable.html&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">セット、マップ、およびその他の辞書も &lt;code&gt;:into&lt;/code&gt; オプションに指定できます。一般に、 &lt;code&gt;:into&lt;/code&gt; は&lt;a href=&quot;https://hexdocs.pm/elixir/Collectable.html&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt;プロトコルを実装するすべての構造を受け入れます。</target>
        </trans-unit>
        <trans-unit id="bd4535505c2417e61961a7113d0eafce3cb64c39" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;:trap_exit&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; - trapping exits should be used only in special circumstances as it would make your process immune to not only exits from the task but from any other processes.</source>
          <target state="translated">設定 &lt;code&gt;:trap_exit&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に -出口のトラップは、プロセスがタスクからの出口だけでなく他のプロセスからの出口にも影響されないようにするため、特別な状況でのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d6289491eaac788284614dd116bb32674dddf31b" translate="yes" xml:space="preserve">
          <source>Setting variables or importing modules in IEx does not affect the caller's environment. However, sending and receiving messages will change the process state.</source>
          <target state="translated">IEx で変数を設定したり、モジュールをインポートしたりしても、呼び出し元の環境には影響しません。ただし、メッセージの送受信によりプロセスの状態が変化します。</target>
        </trans-unit>
        <trans-unit id="acd658415e3f4cbdae905269541fc503e941566c" translate="yes" xml:space="preserve">
          <source>Several environment variables can be used to modify Mix's behaviour.</source>
          <target state="translated">Mix の動作を変更するために、いくつかの環境変数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="1511667d6b259adc4e62f0970e71e5fc502c0dde" translate="yes" xml:space="preserve">
          <source>Shared options</source>
          <target state="translated">共有オプション</target>
        </trans-unit>
        <trans-unit id="47bf46e89ff4eb081f0b726f66e98d60c275fcf4" translate="yes" xml:space="preserve">
          <source>Shared state in tests</source>
          <target state="translated">テストでの共有状態</target>
        </trans-unit>
        <trans-unit id="15226b1f30cdb72557e1cfce27d2920a8525c275" translate="yes" xml:space="preserve">
          <source>Shell commands</source>
          <target state="translated">シェルコマンド</target>
        </trans-unit>
        <trans-unit id="6fce86e296dfabdc486d69f2a4bdabf524c07784" translate="yes" xml:space="preserve">
          <source>Shell history</source>
          <target state="translated">シェルの歴史</target>
        </trans-unit>
        <trans-unit id="3b7bc055d42cb5ee445b4629591b6c7ce151525c" translate="yes" xml:space="preserve">
          <source>Shortcut Syntax</source>
          <target state="translated">ショートカット構文</target>
        </trans-unit>
        <trans-unit id="bff5c401cba317d37dd02f3bf20eb021a9a7d880" translate="yes" xml:space="preserve">
          <source>Shortcut to &lt;code&gt;chunk_every(enum, count, count)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;chunk_every(enum, count, count)&lt;/code&gt; へのショートカット。</target>
        </trans-unit>
        <trans-unit id="d799f33666a25c03f217b3a7fec86053786d518a" translate="yes" xml:space="preserve">
          <source>Shortcut to &lt;code&gt;chunk_every(enumerable, count, count)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;chunk_every(enumerable, count, count)&lt;/code&gt; へのショートカット。</target>
        </trans-unit>
        <trans-unit id="3772f76c5efeb817b41e59c6169f0a12a5138e18" translate="yes" xml:space="preserve">
          <source>Should be called with the &lt;code&gt;enumerable&lt;/code&gt; element and the accumulator contents.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 要素とアキュムレータのコンテンツを使用して呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="eaf3c5d30de589fe59588a546de2d175706c0a28" translate="yes" xml:space="preserve">
          <source>Should return &lt;code&gt;true&lt;/code&gt; if the given date describes a proper date in the calendar.</source>
          <target state="translated">指定された日付がカレンダーの適切な日付を表す場合、 &lt;code&gt;true&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="f80193079cddaf6297db3a4d414717fac1a93d52" translate="yes" xml:space="preserve">
          <source>Should return &lt;code&gt;true&lt;/code&gt; if the given time describes a proper time in the calendar.</source>
          <target state="translated">指定された時間がカレンダーの適切な時間を表す場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cbf43a01a6c566cc924430796428a82791fb3321" translate="yes" xml:space="preserve">
          <source>Shutdown values (:shutdown)</source>
          <target state="translated">シャットダウン値 (:shutdown)</target>
        </trans-unit>
        <trans-unit id="48d45e15f28f53d164bd6ccb48a540af8d866b66" translate="yes" xml:space="preserve">
          <source>Shutdown values (&lt;code&gt;:shutdown&lt;/code&gt;)</source>
          <target state="translated">シャットダウン値（ &lt;code&gt;:shutdown&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4bebc37beab3e41d0359e7a912db5b152d7f9a2a" translate="yes" xml:space="preserve">
          <source>Shutting down a live system cleanly can be done by calling &lt;a href=&quot;system#stop/1&quot;&gt;&lt;code&gt;System.stop/1&lt;/code&gt;&lt;/a&gt;. It will shut down every application in the opposite order they had been started.</source>
          <target state="translated">ライブシステムを正常にシャットダウンするには、&lt;a href=&quot;system#stop/1&quot;&gt; &lt;code&gt;System.stop/1&lt;/code&gt; を&lt;/a&gt;呼び出します。すべてのアプリケーションを、開始されたときとは逆の順序でシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="9495787c0b2e930e3fb428c17f97a16d333de82b" translate="yes" xml:space="preserve">
          <source>Sigils</source>
          <target state="translated">Sigils</target>
        </trans-unit>
        <trans-unit id="093f8622874818f518acf108d0ec2fc97a25f178" translate="yes" xml:space="preserve">
          <source>Sigils also support heredocs, that is, triple double- or single-quotes as separators:</source>
          <target state="translated">また、シグルはヘレドク、つまりトリプルダブルクォートやシングルクォートをセパレータとしてサポートしています。</target>
        </trans-unit>
        <trans-unit id="5c6cf440097cb0b13b54bff0118fbd4058653ed5" translate="yes" xml:space="preserve">
          <source>Sigils are useful to encode text with their own escaping rules, such as regular expressions, datetimes, etc.</source>
          <target state="translated">シギルは、正規表現や日付など、独自のエスケープルールを持つテキストをエンコードするのに便利です。</target>
        </trans-unit>
        <trans-unit id="fc9770922e8235e07af434b1817bb43b4b551610" translate="yes" xml:space="preserve">
          <source>Sigils can also be used to do compile-time work with the help of macros. For example, regular expressions in Elixir are compiled into an efficient representation during compilation of the source code, therefore skipping this step at runtime. If you&amp;rsquo;re interested in the subject, we recommend you learn more about macros and check out how sigils are implemented in the &lt;code&gt;Kernel&lt;/code&gt; module (where the &lt;code&gt;sigil_*&lt;/code&gt; functions are defined).</source>
          <target state="translated">Sigilsは、マクロを使用してコンパイル時の作業を行うためにも使用できます。たとえば、Elixirの正規表現は、ソースコードのコンパイル中に効率的な表現にコンパイルされるため、実行時にこの手順をスキップします。このテーマに興味がある場合は、マクロについてさらに学習し、 &lt;code&gt;Kernel&lt;/code&gt; モジュール（ &lt;code&gt;sigil_*&lt;/code&gt; 関数が定義されている）でシギルがどのように実装されているかを確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6a856a592437bb8bd2bfbbd8383e2fec047cb719" translate="yes" xml:space="preserve">
          <source>Sigils start with &lt;code&gt;~&lt;/code&gt; and are followed by a letter and one of the following pairs:</source>
          <target state="translated">Sigilは &lt;code&gt;~&lt;/code&gt; で始まり、その後に文字と次のペアのいずれかが続きます。</target>
        </trans-unit>
        <trans-unit id="8b3d8d665a765918b70a3f5f0378d51df00b92dd" translate="yes" xml:space="preserve">
          <source>Sign</source>
          <target state="translated">Sign</target>
        </trans-unit>
        <trans-unit id="83755b5bb4d8f50108c88dbf26b3cd7060bdd814" translate="yes" xml:space="preserve">
          <source>Similar results can be achieved with the string concatenation operator &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">文字列連結演算子 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; でも同様の結果が得られます。</target>
        </trans-unit>
        <trans-unit id="680a08604d41ca47d86f103212437a67e75222e6" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#defmacrop/2&quot;&gt;&lt;code&gt;defmacrop/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#defguardp/1&quot;&gt;&lt;code&gt;defguardp/1&lt;/code&gt;&lt;/a&gt; must be defined before its use in the current module.</source>
          <target state="translated">&lt;a href=&quot;#defmacrop/2&quot;&gt; &lt;code&gt;defmacrop/2&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;#defguardp/1&quot;&gt; &lt;code&gt;defguardp/1&lt;/code&gt; &lt;/a&gt;は、現在のモジュールで使用する前に定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="3a4528cdf8fb4e2486a93c3402abd54f52d95d7d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#ensure_compiled/1&quot;&gt;&lt;code&gt;ensure_compiled/1&lt;/code&gt;&lt;/a&gt;, but returns &lt;code&gt;true&lt;/code&gt; if the module is already loaded or was successfully loaded and compiled. Returns &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#ensure_compiled/1&quot;&gt; &lt;code&gt;ensure_compiled/1&lt;/code&gt; &lt;/a&gt;似ていますが、モジュールが既にロードされているか、正常にロードおよびコンパイルされた場合は &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d8d26b0dd0bc64203103e9942583d4ea3210f692" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#ensure_loaded/1&quot;&gt;&lt;code&gt;ensure_loaded/1&lt;/code&gt;&lt;/a&gt;, but returns &lt;code&gt;true&lt;/code&gt; if the module is already loaded or was successfully loaded. Returns &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#ensure_loaded/1&quot;&gt; &lt;code&gt;ensure_loaded/1&lt;/code&gt; &lt;/a&gt;似ていますが、モジュールが既にロードされているか、正常にロードされた場合は &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="671b3de2f1f9e1bc01bc7256b906ac67b5dbc5aa" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#find/3&quot;&gt;&lt;code&gt;find/3&lt;/code&gt;&lt;/a&gt;, but returns the index (zero-based) of the element instead of the element itself.</source>
          <target state="translated">&lt;a href=&quot;#find/3&quot;&gt; &lt;code&gt;find/3&lt;/code&gt; に&lt;/a&gt;似ていますが、要素自体ではなく要素のインデックス（ゼロから始まる）を返します。</target>
        </trans-unit>
        <trans-unit id="ed983810dcc745a1edc28d41dbf198f45ff86a26" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#find/3&quot;&gt;&lt;code&gt;find/3&lt;/code&gt;&lt;/a&gt;, but returns the value of the function invocation instead of the element itself.</source>
          <target state="translated">&lt;a href=&quot;#find/3&quot;&gt; &lt;code&gt;find/3&lt;/code&gt; に&lt;/a&gt;似ていますが、要素自体ではなく、関数呼び出しの値を返します。</target>
        </trans-unit>
        <trans-unit id="cb0ea66cf26fd48568417afc7388e0fe5e4a0cfe" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#key/2&quot;&gt;&lt;code&gt;key/2&lt;/code&gt;&lt;/a&gt;, but the returned function raises if the key does not exist.</source>
          <target state="translated">&lt;a href=&quot;#key/2&quot;&gt; &lt;code&gt;key/2&lt;/code&gt; に&lt;/a&gt;似ていますが、キーが存在しない場合、返される関数が発生します。</target>
        </trans-unit>
        <trans-unit id="0e30d8489677f14c1a6e61f63b887f618946e277" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt; but expects a function as its last argument.</source>
          <target state="translated">&lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; に&lt;/a&gt;似ていますが、最後の引数として関数を想定しています。</target>
        </trans-unit>
        <trans-unit id="9a017555f9bfef427f80d7907bb1a0b56d3fc6f0" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if the file could not be opened. Returns the IO device otherwise.</source>
          <target state="translated">&lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; に&lt;/a&gt;似ていますが、ファイルを開けなかった場合は&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。それ以外の場合はIOデバイスを返します。</target>
        </trans-unit>
        <trans-unit id="fa8f09aee13c03e4fa19ccdc0e8643206d67f367" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#open/3&quot;&gt;&lt;code&gt;open/3&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if the file could not be opened.</source>
          <target state="translated">&lt;a href=&quot;#open/3&quot;&gt; &lt;code&gt;open/3&lt;/code&gt; &lt;/a&gt;と似ていますが、ファイルを開けなかった場合は&lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="0c7612d9e10f8bbba6b6e71ca68dcee1c3c8ada0" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#parse/2&quot;&gt;&lt;code&gt;parse/2&lt;/code&gt;&lt;/a&gt; but only parses the head of &lt;code&gt;argv&lt;/code&gt;; as soon as it finds a non-switch, it stops parsing.</source>
          <target state="translated">&lt;a href=&quot;#parse/2&quot;&gt; &lt;code&gt;parse/2&lt;/code&gt; に&lt;/a&gt;似ていますが、 &lt;code&gt;argv&lt;/code&gt; の先頭のみを解析します。非スイッチが見つかると、解析を停止します。</target>
        </trans-unit>
        <trans-unit id="86e0d7ca33894f72508f1acefed15f61bc326aa6" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#start_child/2&quot;&gt;&lt;code&gt;start_child/2&lt;/code&gt;&lt;/a&gt; except the task is specified by the given &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;fun&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#start_child/2&quot;&gt; &lt;code&gt;start_child/2&lt;/code&gt; &lt;/a&gt;と同様ですが、タスクは指定された &lt;code&gt;module&lt;/code&gt; 、 &lt;code&gt;fun&lt;/code&gt; 、 &lt;code&gt;args&lt;/code&gt; によって指定されます。</target>
        </trans-unit>
        <trans-unit id="fffdeb395a71dd9c69be0df6ed520f0f8929cdac" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#start_link/2&quot;&gt;&lt;code&gt;start_link/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#init/2&quot;&gt;&lt;code&gt;init/2&lt;/code&gt;&lt;/a&gt;, it expects a &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;{module, arg}&lt;/code&gt; or a map as the child specification. If a module is given, the specification is retrieved by calling &lt;code&gt;module.child_spec(arg)&lt;/code&gt;.</source>
          <target state="translated">類似&lt;a href=&quot;#start_link/2&quot;&gt; &lt;code&gt;start_link/2&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;#init/2&quot;&gt; &lt;code&gt;init/2&lt;/code&gt; &lt;/a&gt;、それが期待 &lt;code&gt;module&lt;/code&gt; 、 &lt;code&gt;{module, arg}&lt;/code&gt; または子仕様としてマップ。モジュールが指定されている場合、 &lt;code&gt;module.child_spec(arg)&lt;/code&gt; を呼び出すことで仕様が取得されます。</target>
        </trans-unit>
        <trans-unit id="4f96191ac218da513737f46d949226677e297839" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#struct/2&quot;&gt;&lt;code&gt;struct/2&lt;/code&gt;&lt;/a&gt; but checks for key validity.</source>
          <target state="translated">&lt;a href=&quot;#struct/2&quot;&gt; &lt;code&gt;struct/2&lt;/code&gt; に&lt;/a&gt;似ていますが、キーの有効性をチェックします。</target>
        </trans-unit>
        <trans-unit id="544d28beafeb6ba6440bbbfe15ff61212ffb6825" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#transform/3&quot;&gt;&lt;code&gt;transform/3&lt;/code&gt;&lt;/a&gt; but the initial accumulated value is computed lazily via &lt;code&gt;start_fun&lt;/code&gt; and executes an &lt;code&gt;after_fun&lt;/code&gt; at the end of enumeration (both in cases of success and failure).</source>
          <target state="translated">類似&lt;a href=&quot;#transform/3&quot;&gt; &lt;code&gt;transform/3&lt;/code&gt; &lt;/a&gt;が、初期積算値を介して遅延して計算される &lt;code&gt;start_fun&lt;/code&gt; て実行 &lt;code&gt;after_fun&lt;/code&gt; （成功と失敗の場合には両方）列挙の終わりにあります。</target>
        </trans-unit>
        <trans-unit id="31f64163363b89c1b2d96b23c5caf03b42260cad" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#unquote/1&quot;&gt;&lt;code&gt;unquote/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#unquote/1&quot;&gt; &lt;code&gt;unquote/1&lt;/code&gt; に&lt;/a&gt;似ています。</target>
        </trans-unit>
        <trans-unit id="a4bad9ce5e5e51929cb2b375dafa5b7519c51fcd" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;date#convert/2&quot;&gt;&lt;code&gt;Date.convert/2&lt;/code&gt;&lt;/a&gt;, but raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the conversion between the two calendars is not possible.</source>
          <target state="translated">に似ている &lt;a href=&quot;date#convert/2&quot;&gt; &lt;code&gt;Date.convert/2&lt;/code&gt; にます&lt;/a&gt;が、2つのカレンダー間の変換が不可能な場合は&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="49dab40556418138d9a746ed4e7aec86ea69773a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;kernel#defmodule/2&quot;&gt;&lt;code&gt;Kernel.defmodule/2&lt;/code&gt;&lt;/a&gt;, the binary will only be written to disk as a &lt;code&gt;.beam&lt;/code&gt; file if &lt;a href=&quot;module#create/3&quot;&gt;&lt;code&gt;Module.create/3&lt;/code&gt;&lt;/a&gt; is invoked in a file that is currently being compiled.</source>
          <target state="translated">&lt;a href=&quot;kernel#defmodule/2&quot;&gt; &lt;code&gt;Kernel.defmodule/2&lt;/code&gt; &lt;/a&gt;と同様に、バイナリはディスクにのみ書き込まれます &lt;code&gt;.beam&lt;/code&gt; は、現在コンパイルされているファイルで&lt;a href=&quot;module#create/3&quot;&gt; &lt;code&gt;Module.create/3&lt;/code&gt; &lt;/a&gt;が呼び出された場合にのみ .beamファイルます。</target>
        </trans-unit>
        <trans-unit id="78ac4aae468baba341cc07ffa89a70612faee3d2" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;, dynamic supervisors also support module-based supervisors.</source>
          <target state="translated">&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;と同様に、ダイナミックスーパーバイザもモジュールベースのスーパーバイザをサポートしています。</target>
        </trans-unit>
        <trans-unit id="12930727ef42425fe713d11813225cb176e88f5a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;time#convert/2&quot;&gt;&lt;code&gt;Time.convert/2&lt;/code&gt;&lt;/a&gt;, but raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the conversion between the two calendars is not possible.</source>
          <target state="translated">&lt;a href=&quot;time#convert/2&quot;&gt; &lt;code&gt;Time.convert/2&lt;/code&gt; に&lt;/a&gt;似ていますが、2つのカレンダー間の変換が不可能な場合は&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="a8b6ff3051123b6b61657f0295e50e9b9854f439" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;IEx.pry/0&lt;/code&gt;, once a breakpoint is reached code execution stops until &lt;code&gt;continue&lt;/code&gt; is invoked. However, note &lt;code&gt;break!/2&lt;/code&gt; does not have access to aliases and imports from the debugged code as it works on the compiled artifact rather than on source.</source>
          <target state="translated">&lt;code&gt;IEx.pry/0&lt;/code&gt; と同様に、ブレークポイントに到達すると、コードの実行は &lt;code&gt;continue&lt;/code&gt; が呼び出されるます。ただし、 &lt;code&gt;break!/2&lt;/code&gt; は、ソースではなくコンパイルされたアーティファクトで機能するため、デバッグコードからエイリアスとインポートにアクセスできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b9586bcd0e9346aa9f7e1956ff7ddc48f27965b9" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;Kernel.&quot;FUNCTION_NAME&quot;&lt;/code&gt;, &lt;code&gt;unquote(x)&lt;/code&gt; will always generate a remote call, independent of the value of &lt;code&gt;x&lt;/code&gt;. To generate an alias via the quoted expression, one needs to rely on &lt;a href=&quot;module#concat/2&quot;&gt;&lt;code&gt;Module.concat/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;Kernel.&quot;FUNCTION_NAME&quot;&lt;/code&gt; と同様に、 &lt;code&gt;unquote(x)&lt;/code&gt; は、 &lt;code&gt;x&lt;/code&gt; の値に関係なく、常にリモート呼び出しを生成します。引用された式を介してエイリアスを生成するには、&lt;a href=&quot;module#concat/2&quot;&gt; &lt;code&gt;Module.concat/2&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a72d340e0a469b82ec469f91c51a4c2a166acbb3" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;case&lt;/code&gt;, a function may have many clauses. A particular clause is executed when the arguments passed to the function match the clause&amp;rsquo;s argument patterns and its guard evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;case&lt;/code&gt; 似ていますと、関数には多くの句がある場合があります。関数に渡された引数が句の引数パターンと一致し、そのガードが &lt;code&gt;true&lt;/code&gt; と評価されると、特定の句が実行されます。</target>
        </trans-unit>
        <trans-unit id="b996bc1af4b984c3da4c7bc2ef94d27afb3fd274" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;import_file&lt;/code&gt; but only imports the file it if it is available.</source>
          <target state="translated">に似ている &lt;code&gt;import_file&lt;/code&gt; にいますが、利用可能な場合にのみファイルをインポートします。</target>
        </trans-unit>
        <trans-unit id="68799b7562c806765dc2184265fa19c244ff0d6b" translate="yes" xml:space="preserve">
          <source>Similar to aliases, imports in Elixir are hygienic. Consider the following code:</source>
          <target state="translated">エイリアスと同様に、Elixirでのインポートは衛生的です。次のコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="dc2b244e98818b0c2e54b67213f8b4899ca5dd2c" translate="yes" xml:space="preserve">
          <source>Similar to constructs like &lt;code&gt;if&lt;/code&gt;, named functions support both &lt;code&gt;do:&lt;/code&gt; and &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; block syntax, as &lt;a href=&quot;case-cond-and-if#doend-blocks&quot;&gt;we learned &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; is a convenient syntax for the keyword list format&lt;/a&gt;. For example, we can edit &lt;code&gt;math.exs&lt;/code&gt; to look like this:</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; などの構文と同様に、名前付き関数は &lt;code&gt;do:&lt;/code&gt; と &lt;code&gt;do&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; ブロック構文の両方をサポートします。これ&lt;a href=&quot;case-cond-and-if#doend-blocks&quot;&gt;は、&lt;/a&gt; &lt;code&gt;do&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; がキーワードリスト形式の便利な構文であることを学習したためです。たとえば、 &lt;code&gt;math.exs&lt;/code&gt; を次のように編集できます。</target>
        </trans-unit>
        <trans-unit id="399d5c38656b13369d3de8bc4c4d3ffe8febae4e" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;debugger&lt;/code&gt; note above, your package manager may require a separate installation in order to run Observer.</source>
          <target state="translated">に似ています &lt;code&gt;debugger&lt;/code&gt; 上記デバッガーのメモパッケージマネージャーでは、Observerを実行するために個別のインストールが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="1967136eae3bf06afa80ff77d2c742df8670b3d5" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;hd/1&lt;/code&gt; and &lt;code&gt;tl/1&lt;/code&gt; functions, we can&amp;rsquo;t match an empty list with a head and tail pattern:</source>
          <target state="translated">&lt;code&gt;hd/1&lt;/code&gt; と同様 &lt;code&gt;tl/1&lt;/code&gt; 関数 tl / 1関数空のリストを先頭と末尾のパターンと一致させることはできません。</target>
        </trans-unit>
        <trans-unit id="82f50da22742b95c84f018370c23671aa332e9f5" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;a href=&quot;#yield/2&quot;&gt;&lt;code&gt;yield/2&lt;/code&gt;&lt;/a&gt;, each task's result will be</source>
          <target state="translated">同様に&lt;a href=&quot;#yield/2&quot;&gt; &lt;code&gt;yield/2&lt;/code&gt; &lt;/a&gt;と、各タスクの結果は次のようになります</target>
        </trans-unit>
        <trans-unit id="93b5800fe560b818a42489dce100f7db2d3fa208" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;code&gt;@doc&lt;/code&gt; also accepts a keyword list to provide metadata about the module. For more details, see the documentation of &lt;code&gt;@doc&lt;/code&gt; above.</source>
          <target state="translated">&lt;code&gt;@doc&lt;/code&gt; と同様に、モジュールに関するメタデータを提供するキーワードリストも受け入れます。詳細については、次のドキュメントを参照してください。 &lt;code&gt;@doc&lt;/code&gt; 上記 @doc。</target>
        </trans-unit>
        <trans-unit id="c33174c994c7adc74f3417777668f8c098a0d34c" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;uniq: true&lt;/code&gt; can also be given to comprehensions to guarantee the results are only added to the collection if they were not returned before. For example:</source>
          <target state="translated">同様に、 &lt;code&gt;uniq: true&lt;/code&gt; は、結果が以前に返されなかった場合にのみコレクションに追加されることを保証するために、理解に与えることもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="f039a2100664bab09c37cccb1c2473f79463bd63" translate="yes" xml:space="preserve">
          <source>Similarly, an exception inside an &lt;code&gt;else&lt;/code&gt; clause is not caught or rescued inside the same &lt;code&gt;try&lt;/code&gt;:</source>
          <target state="translated">同様に、 &lt;code&gt;else&lt;/code&gt; 句内の例外は、同じ内部でキャッチまたは救出されません。 &lt;code&gt;try&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="639b47876914dc3c064fca8afae90a6661f1b39d" translate="yes" xml:space="preserve">
          <source>Similarly, even if we defined an alias with the same name before invoking a macro, it won't affect the macro's result:</source>
          <target state="translated">同様に、マクロを呼び出す前に同名のエイリアスを定義しても、マクロの結果には影響しません。</target>
        </trans-unit>
        <trans-unit id="b0b02f74e4f6ced9283eee76d1f5d4a6dc901fa2" translate="yes" xml:space="preserve">
          <source>Similarly, if a match expression is given, it will report any failure in terms of that match. Given</source>
          <target state="translated">同様に、一致する式が与えられた場合、その一致の観点から失敗を報告します。与えられた</target>
        </trans-unit>
        <trans-unit id="d93711412269341e983df1ae16c13701f1ea42ed" translate="yes" xml:space="preserve">
          <source>Similarly, if you are waiting for a process to terminate, monitor that process instead of sleeping. &lt;strong&gt;Do not&lt;/strong&gt;:</source>
          <target state="translated">同様に、プロセスの終了を待っている場合は、スリープ状態ではなく、そのプロセスを監視します。&lt;strong&gt;しないでください&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="cbf36629b903bf319e1dd5dfee276a2f96f82ebd" translate="yes" xml:space="preserve">
          <source>Similarly, the performance of list concatenation depends on the length of the left-hand list:</source>
          <target state="translated">同様に、リスト連結の性能は左手リストの長さに依存します。</target>
        </trans-unit>
        <trans-unit id="c1f148bd168fe86bf71a8f03f4f454f35acbd7df" translate="yes" xml:space="preserve">
          <source>Similarly, we could write the list &lt;code&gt;[1, 2, 3]&lt;/code&gt; using only such pairs (called cons cells):</source>
          <target state="translated">同様に、このようなペア（コンスセルと呼ばれる）のみを使用してリスト &lt;code&gt;[1, 2, 3]&lt;/code&gt; を書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="b59932c5adb29f058bd5e0bb657d8adae59c14bf" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;Enum&lt;/code&gt;&lt;em&gt;does&lt;/em&gt; provide a proper API, in practice &lt;code&gt;Enum.find/2&lt;/code&gt; is the way to go:</source>
          <target state="translated">&lt;code&gt;Enum&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;適切なAPIを提供するので、実際には &lt;code&gt;Enum.find/2&lt;/code&gt; がその方法です。</target>
        </trans-unit>
        <trans-unit id="69225423a0e2b117d7cd03442182856546997bd1" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;setup_all&lt;/code&gt; blocks don't belong to a specific test, log messages generated in them (or between tests) are never captured. If you want to suppress these messages as well, remove the console backend globally by setting:</source>
          <target state="translated">以来 &lt;code&gt;setup_all&lt;/code&gt; ブロックは、特定のテストに属していない、彼ら（またはテスト間）で生成されたログメッセージは捕獲されることはありません。これらのメッセージも抑制する場合は、次のように設定して、コンソールバックエンドをグローバルに削除します。</target>
        </trans-unit>
        <trans-unit id="e2bf20a6c317edb9d40eaad36a3fcaaa5065a63f" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;use&lt;/code&gt; allows any code to run, we can&amp;rsquo;t really know the side-effects of using a module without reading its documentation. For this reason, &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;alias&lt;/code&gt; are often preferred, as their semantics are defined by the language.</source>
          <target state="translated">以来 &lt;code&gt;use&lt;/code&gt; 実行するために任意のコードを可能にする、私たちは本当にそのマニュアルを読まずにモジュールを使用しての副作用を知ることができません。このため、 &lt;code&gt;import&lt;/code&gt; して &lt;code&gt;alias&lt;/code&gt; セマンティクスは言語によって定義されるエイリアスがよく使用されます。</target>
        </trans-unit>
        <trans-unit id="4d3c552f54084c3d7869c55199e78593b9eebc2e" translate="yes" xml:space="preserve">
          <source>Since Elixir controls when the streamed file is opened, the underlying device cannot be shared and as such it is convenient to open the file in raw mode for performance reasons. Therefore, Elixir &lt;strong&gt;will&lt;/strong&gt; open streams in &lt;code&gt;:raw&lt;/code&gt; mode with the &lt;code&gt;:read_ahead&lt;/code&gt; option unless an encoding is specified. This means any data streamed into the file must be converted to &lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;iodata/0&lt;/code&gt;&lt;/a&gt; type. If you pass e.g. &lt;code&gt;[encoding: :utf8]&lt;/code&gt; or &lt;code&gt;[encoding: {:utf16, :little}]&lt;/code&gt; in the modes parameter, the underlying stream will use &lt;a href=&quot;io#write/2&quot;&gt;&lt;code&gt;IO.write/2&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;string.chars&quot;&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; protocol to convert the data. See &lt;a href=&quot;io#binwrite/2&quot;&gt;&lt;code&gt;IO.binwrite/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#write/2&quot;&gt;&lt;code&gt;IO.write/2&lt;/code&gt;&lt;/a&gt; .</source>
          <target state="translated">Elixirはストリーミングされたファイルを開くタイミングを制御するため、基盤となるデバイスを共有することはできません。したがって、パフォーマンス上の理由から、ファイルをrawモードで開くと便利です。したがって、エンコーディングが指定されていない限り、Elixir &lt;strong&gt;は&lt;/strong&gt; &lt;code&gt;:read_ahead&lt;/code&gt; オプションを使用して &lt;code&gt;:raw&lt;/code&gt; モードでストリーム&lt;strong&gt;を&lt;/strong&gt;開きます。つまり、ファイルにストリーミングされるデータはすべて&lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;iodata/0&lt;/code&gt; &lt;/a&gt;タイプに変換する必要があります。たとえば、 &lt;code&gt;[encoding: :utf8]&lt;/code&gt; または &lt;code&gt;[encoding: {:utf16, :little}]&lt;/code&gt; をモードパラメータで&lt;a href=&quot;io#write/2&quot;&gt; &lt;code&gt;IO.write/2&lt;/code&gt; &lt;/a&gt;と、基になるストリームはIO.write / 2および&lt;a href=&quot;string.chars&quot;&gt; &lt;code&gt;String.Chars&lt;/code&gt; &lt;/a&gt;プロトコルを使用してデータを変換します。&lt;a href=&quot;io#binwrite/2&quot;&gt; &lt;code&gt;IO.binwrite/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;io#write/2&quot;&gt; &lt;code&gt;IO.write/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="acfc136eac08ea2248c061b764cdc270d0d7d75b" translate="yes" xml:space="preserve">
          <source>Since Elixir provides a &lt;a href=&quot;task.supervisor&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt;, it is easy to use one to dynamically start tasks across nodes:</source>
          <target state="translated">Elixirが&lt;a href=&quot;task.supervisor&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; を&lt;/a&gt;提供するため、ノード間で動的にタスクを開始するために簡単に使用できます。</target>
        </trans-unit>
        <trans-unit id="9ddb7c4c4e5a83e7e2eb15f183943d89c62afa54" translate="yes" xml:space="preserve">
          <source>Since Elixir's compilation happens in parallel, in some situations you may need to use a module that was not yet compiled, therefore it can't even be loaded.</source>
          <target state="translated">Elixirのコンパイルは並行して行われるので、状況によってはまだコンパイルされていないモジュールを使う必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="7382428d7f17d64e52201beba024a7ffa766e6af" translate="yes" xml:space="preserve">
          <source>Since ISO 8601 does not include the proper time zone, the given string will be converted to UTC and its offset in seconds will be returned as part of this function. Therefore offset information must be present in the string.</source>
          <target state="translated">ISO 8601には適切なタイムゾーンが含まれていないため、与えられた文字列はUTCに変換され、この関数の一部として秒単位のオフセットが返されます。したがって、オフセット情報は文字列の中に存在しなければなりません。</target>
        </trans-unit>
        <trans-unit id="b15ad8d4c4ceb4a097cb8049bcccb30f2c171c27" translate="yes" xml:space="preserve">
          <source>Since a &lt;code&gt;DynamicSupervisor&lt;/code&gt; does not define any children during initialization, the &lt;code&gt;DynamicSupervisor&lt;/code&gt; also allows us to skip the work of defining a whole separate module with the usual &lt;code&gt;start_link&lt;/code&gt; function and the &lt;code&gt;init&lt;/code&gt; callback. Instead, we can define a &lt;code&gt;DynamicSupervisor&lt;/code&gt; directly in the supervision tree, by giving it a name and a strategy.</source>
          <target state="translated">以来 &lt;code&gt;DynamicSupervisor&lt;/code&gt; が初期化中に子を定義していない、 &lt;code&gt;DynamicSupervisor&lt;/code&gt; はまた、私たちはいつもと全体の別のモジュールを定義する作業をスキップすることを可能にする &lt;code&gt;start_link&lt;/code&gt; 機能と &lt;code&gt;init&lt;/code&gt; コールバックを。代わりに、 &lt;code&gt;DynamicSupervisor&lt;/code&gt; を定義できます名前と戦略を与えることにより、管理ツリーで直接。</target>
        </trans-unit>
        <trans-unit id="a6552dd3f478ee5a7825eccbbaad93572a691d75" translate="yes" xml:space="preserve">
          <source>Since agents are processes, each bucket has a process identifier (pid), but buckets do not have a name. Back &lt;a href=&quot;../processes&quot;&gt;in the Process chapter&lt;/a&gt;, we have learned that we can register processes in Elixir by giving them atom names:</source>
          <target state="translated">エージェントはプロセスであるため、各バケットにはプロセス識別子（pid）がありますが、バケットには名前がありません。&lt;a href=&quot;../processes&quot;&gt;プロセスの章に&lt;/a&gt;戻るアトム名を付けることでプロセスをElixirに登録できることがわかりました。</target>
        </trans-unit>
        <trans-unit id="3a720a734f9deda5036a5ed5e6279947f6baf484" translate="yes" xml:space="preserve">
          <source>Since an expression inside &lt;code&gt;try&lt;/code&gt; may not have been evaluated due to an exception, any variable created inside &lt;code&gt;try&lt;/code&gt; cannot be accessed externally. For instance:</source>
          <target state="translated">内部表現以来 &lt;code&gt;try&lt;/code&gt; 、例外により内部で作成された任意の変数に評価されていない可能性 &lt;code&gt;try&lt;/code&gt; 外部からアクセスすることができません。例えば：</target>
        </trans-unit>
        <trans-unit id="6e8e1aa133da1364ca9cd2b48bd61a3e3c1339f3" translate="yes" xml:space="preserve">
          <source>Since any message, including the ones sent via &lt;code&gt;send/2&lt;/code&gt;, go to &lt;code&gt;handle_info/2&lt;/code&gt;, there is a chance unexpected messages will arrive to the server. Therefore, if we don&amp;rsquo;t define the catch-all clause, those messages could cause our registry to crash, because no clause would match. We don&amp;rsquo;t need to worry about such cases for &lt;code&gt;handle_call/3&lt;/code&gt; and &lt;code&gt;handle_cast/2&lt;/code&gt; though. Calls and casts are only done via the &lt;code&gt;GenServer&lt;/code&gt; API, so an unknown message is quite likely a developer mistake.</source>
          <target state="translated">&lt;code&gt;send/2&lt;/code&gt; を介して送信されたメッセージを含むすべてのメッセージが &lt;code&gt;handle_info/2&lt;/code&gt; に移動するため、予期しないメッセージがサーバーに到着する可能性があります。したがって、catch-all句を定義しないと、一致する句がないため、これらのメッセージによってレジストリがクラッシュする可能性があります。ただし、 &lt;code&gt;handle_cast/2&lt;/code&gt; &lt;code&gt;handle_call/3&lt;/code&gt; とhandle_cast / 2については、そのような場合について心配する必要はありません。呼び出しとキャストは &lt;code&gt;GenServer&lt;/code&gt; API を介してのみ行われるため、不明なメッセージは開発者の間違いである可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="3d6f72045be18842d7d487aab2142772aa012354" translate="yes" xml:space="preserve">
          <source>Since configuration files are often accessed on target machines, it can be expressed either as:</source>
          <target state="translated">設定ファイルはターゲットマシン上でアクセスされることが多いので、どちらかのように表現することができます。</target>
        </trans-unit>
        <trans-unit id="8fc813b30867503fd7d80ceb89d26056f219ebb2" translate="yes" xml:space="preserve">
          <source>Since each test has a unique name, we use the test name to name our registries. This way, we no longer need to pass the registry PID around, instead we identify it by the test name. Also note we assigned the result of &lt;code&gt;start_supervised!&lt;/code&gt; to underscore (&lt;code&gt;_&lt;/code&gt;). This idiom is often used to signal that we are not interested in the result of &lt;code&gt;start_supervised!&lt;/code&gt;.</source>
          <target state="translated">各テストには一意の名前があるため、レジストリに名前を付けるためにテスト名を使用します。このようにして、レジストリPIDを渡す必要がなくなり、代わりにテスト名で識別します。また、 &lt;code&gt;start_supervised!&lt;/code&gt; の結果を割り当てたことにも注意してください。アンダースコア（ &lt;code&gt;_&lt;/code&gt; ）に。このイディオムは、 &lt;code&gt;start_supervised!&lt;/code&gt; の結果に関心がないことを示すためによく使用されます。。</target>
        </trans-unit>
        <trans-unit id="539b55b9c301e37db2ba5709f167489b7c16ad33" translate="yes" xml:space="preserve">
          <source>Since evaluating this function causes the process to terminate, it has no return value.</source>
          <target state="translated">この関数を評価するとプロセスが終了するため、戻り値はありません。</target>
        </trans-unit>
        <trans-unit id="f1ce4d7db6e34c56c6b0f354fe1c976084fd70b9" translate="yes" xml:space="preserve">
          <source>Since exceptions are structs, the API supported by &lt;a href=&quot;#defstruct/1&quot;&gt;&lt;code&gt;defstruct/1&lt;/code&gt;&lt;/a&gt; is also available in &lt;a href=&quot;#defexception/1&quot;&gt;&lt;code&gt;defexception/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">例外は構造体なので、でサポートされているAPI &lt;a href=&quot;#defstruct/1&quot;&gt; &lt;code&gt;defstruct/1&lt;/code&gt; &lt;/a&gt;でもご覧になれます。&lt;a href=&quot;#defexception/1&quot;&gt; &lt;code&gt;defexception/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="43379b8fa276cfff986ca581f0982483e58e7290" translate="yes" xml:space="preserve">
          <source>Since our routing table is now empty, our distributed tests should fail. Restart the apps and re-run tests to see the failure:</source>
          <target state="translated">ルーティングテーブルが空になったので、分散テストは失敗するはずです。アプリを再起動し、テストを再実行して失敗を確認してください。</target>
        </trans-unit>
        <trans-unit id="35acc66a5d066ad7dd9d09e09f76ee2a2ec26964" translate="yes" xml:space="preserve">
          <source>Since regular strings are valid entities in an algebra document, an implementation of the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol may simply return a string, although that will devoid it of any pretty-printing.</source>
          <target state="translated">通常の文字列は代数ドキュメントの有効なエンティティであるため、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;プロトコルの実装は単純に文字列を返す場合がありますが、これではきれいに印刷できなくなります。</target>
        </trans-unit>
        <trans-unit id="2f64d99700777b1262233e96b381239b72533e52" translate="yes" xml:space="preserve">
          <source>Since the &amp;ldquo;shopping&amp;rdquo; bucket would be stored on &lt;code&gt;bar&lt;/code&gt;, the request fails as &lt;code&gt;bar&lt;/code&gt; is not available. If you go back to the terminal running &lt;code&gt;foo&lt;/code&gt;, you will see:</source>
          <target state="translated">「ショッピング」バケットは &lt;code&gt;bar&lt;/code&gt; に格納されるため、 &lt;code&gt;bar&lt;/code&gt; が利用できないため、リクエストは失敗します。 &lt;code&gt;foo&lt;/code&gt; を実行しているターミナルに戻ると、次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="f3f50b4e1f5b6c16d180ba7b01763cd119278691" translate="yes" xml:space="preserve">
          <source>Since the bucket terminated, the registry also stopped, and our test fails when trying to &lt;code&gt;GenServer.call/3&lt;/code&gt; it:</source>
          <target state="translated">バケットが終了したため、レジストリも停止し、 &lt;code&gt;GenServer.call/3&lt;/code&gt; を実行しようとするとテストが失敗します。</target>
        </trans-unit>
        <trans-unit id="7a4bb3b51a8bb6e716ca0d2a7b86f828cab0f46b" translate="yes" xml:space="preserve">
          <source>Since the example above is such a common requirement, it can be expressed as:</source>
          <target state="translated">上記の例はこのような一般的な要件であるため、次のように表現することができます。</target>
        </trans-unit>
        <trans-unit id="85bfe62ef0b50ee77c720da4424c8a1e00f3e6de" translate="yes" xml:space="preserve">
          <source>Since the first element of the enumerable is used as the initial value of the accumulator, &lt;code&gt;fun&lt;/code&gt; will only be executed &lt;code&gt;n - 1&lt;/code&gt; times where &lt;code&gt;n&lt;/code&gt; is the length of the enumerable. This function won't call the specified function for enumerables that are one-element long.</source>
          <target state="translated">enumerableの最初の要素はアキュムレータの初期値として使用されるため、 &lt;code&gt;fun&lt;/code&gt; は &lt;code&gt;n - 1&lt;/code&gt; 回のみ実行されます。ここで、 &lt;code&gt;n&lt;/code&gt; はenumerableの長さです。この関数は、1要素の長さの列挙型に対して指定された関数を呼び出しません。</target>
        </trans-unit>
        <trans-unit id="765bd0055668383c0ea2677b5b1bfbe98b9619f4" translate="yes" xml:space="preserve">
          <source>Since there is no variable &lt;code&gt;unknown&lt;/code&gt; previously defined, Elixir imagined you were trying to call a function named &lt;code&gt;unknown/0&lt;/code&gt;, but such a function does not exist.</source>
          <target state="translated">以前に定義された変数 &lt;code&gt;unknown&lt;/code&gt; がないため、Elixirは、 &lt;code&gt;unknown/0&lt;/code&gt; という名前の関数を呼び出そうとしていると想像しました、そのような関数は存在しません。</target>
        </trans-unit>
        <trans-unit id="f8894fa7fe5c3478753e328f6f323ba67ca2e3bb" translate="yes" xml:space="preserve">
          <source>Since these tasks are supervised and not directly linked to the caller, they cannot be awaited on. &lt;a href=&quot;#start_link/1&quot;&gt;&lt;code&gt;start_link/1&lt;/code&gt;&lt;/a&gt;, unlike &lt;a href=&quot;#async/1&quot;&gt;&lt;code&gt;async/1&lt;/code&gt;&lt;/a&gt;, returns &lt;code&gt;{:ok, pid}&lt;/code&gt; (which is the result expected by supervisors).</source>
          <target state="translated">これらのタスクは監視され、呼び出し元に直接リンクされていないため、待つことはできません。&lt;a href=&quot;#start_link/1&quot;&gt; &lt;code&gt;start_link/1&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#async/1&quot;&gt; &lt;code&gt;async/1&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;{:ok, pid}&lt;/code&gt; （スーパーバイザが期待する結果）を返します。</target>
        </trans-unit>
        <trans-unit id="389839597845fc091bf9814cfbeff4f11280ed1d" translate="yes" xml:space="preserve">
          <source>Since this function prints the result returned by the editor, &lt;code&gt;ELIXIR_EDITOR&lt;/code&gt; can be set &quot;echo&quot; if you prefer to display the location rather than opening it.</source>
          <target state="translated">この関数はエディターから返された結果を出力するため、場所を開くのではなく表示したい場合は、 &lt;code&gt;ELIXIR_EDITOR&lt;/code&gt; を「エコー」に設定できます。</target>
        </trans-unit>
        <trans-unit id="bd876c2171809804da789369d0f788453b1d762e" translate="yes" xml:space="preserve">
          <source>Since typespecs and docs are loaded from the .beam file (they are not loaded in memory with the module because there is no need for them to be in memory), they are not reloaded when you reload the module.</source>
          <target state="translated">typespecやdocsは.beamファイルから読み込まれるので(メモリにある必要がないのでモジュールと一緒に読み込まれることはありません)、モジュールをリロードしてもリロードされることはありません。</target>
        </trans-unit>
        <trans-unit id="695e4486dc05d2af7e873048e111e9ef335874fa" translate="yes" xml:space="preserve">
          <source>Since we have changed the supervisor specification, we need to ask: is our supervision strategy still correct?</source>
          <target state="translated">スーパーバイザーの仕様を変更したので、次のような質問をする必要があります:私たちのスーパーバイザー戦略はまだ正しいのか?</target>
        </trans-unit>
        <trans-unit id="1ebfcf673c0172052f119086e5c87a6211d88260" translate="yes" xml:space="preserve">
          <source>Since we have characters like &lt;code&gt;ł&lt;/code&gt; assigned to the code point &lt;code&gt;322&lt;/code&gt;, we actually need more than one byte to represent them. That&amp;rsquo;s why we see a difference when we calculate the &lt;code&gt;byte_size/1&lt;/code&gt; of a string compared to its &lt;code&gt;String.length/1&lt;/code&gt;:</source>
          <target state="translated">我々のような文字があるので &lt;code&gt;ł&lt;/code&gt; コードポイントに割り当てられた &lt;code&gt;322&lt;/code&gt; を、我々は実際にそれらを表現するために、複数のバイトを必要としています。そのため、文字列の &lt;code&gt;byte_size/1&lt;/code&gt; を計算すると、その &lt;code&gt;String.length/1&lt;/code&gt; と比較して違いが見られます。：</target>
        </trans-unit>
        <trans-unit id="f2c19e5383a549d66b2f89101e27b9b7851ada37" translate="yes" xml:space="preserve">
          <source>Since we have now changed our registry to use &lt;code&gt;KV.BucketSupervisor&lt;/code&gt;, which is registered globally, our tests are now relying on this shared supervisor even though each test has its own registry. The question is: should we?</source>
          <target state="translated">これで、グローバルに登録されている &lt;code&gt;KV.BucketSupervisor&lt;/code&gt; を使用するようにレジストリを変更したため、各テストに独自のレジストリがある場合でも、テストはこの共有スーパーバイザに依存しています。問題は、私たちがすべきか？</target>
        </trans-unit>
        <trans-unit id="73c1faf8869380abc1edacc97a5d1771ec7b9e8e" translate="yes" xml:space="preserve">
          <source>Since we have relied only on a non-shared partition of the bucket supervisor so far, we don&amp;rsquo;t need to worry about concurrency issues in our test suite. In case it ever becomes a problem, we can start a supervisor per test and pass it as an argument to the registry &lt;code&gt;start_link&lt;/code&gt; function.</source>
          <target state="translated">これまでバケットスーパーバイザの非共有パーティションのみに依存していたため、テストスイートでの同時実行の問題について心配する必要はありません。問題が発生した場合は、テストごとにスーパーバイザを起動し、それを引数としてレジストリの &lt;code&gt;start_link&lt;/code&gt; に渡すことができます。関数にます。</target>
        </trans-unit>
        <trans-unit id="27114ec0715ca4313c0f129e147c381a042f1009" translate="yes" xml:space="preserve">
          <source>Since we have specified &lt;code&gt;KV&lt;/code&gt; as the module callback, let&amp;rsquo;s change the &lt;code&gt;KV&lt;/code&gt; module defined in &lt;code&gt;lib/kv.ex&lt;/code&gt; to implement a &lt;code&gt;start/2&lt;/code&gt; function:</source>
          <target state="translated">モジュールコールバックとして &lt;code&gt;KV&lt;/code&gt; を指定したので、 &lt;code&gt;lib/kv.ex&lt;/code&gt; で定義された &lt;code&gt;KV&lt;/code&gt; モジュールを変更して、 &lt;code&gt;start/2&lt;/code&gt; 関数を実装します。</target>
        </trans-unit>
        <trans-unit id="701589be2a9f211ec2f7483dc6bba98a5419568a" translate="yes" xml:space="preserve">
          <source>Since we want &lt;code&gt;kv_server&lt;/code&gt; to eventually use the functionality we defined in &lt;code&gt;kv&lt;/code&gt;, we need to add &lt;code&gt;kv&lt;/code&gt; as a dependency to our application.</source>
          <target state="translated">&lt;code&gt;kv_server&lt;/code&gt; が最終的に &lt;code&gt;kv&lt;/code&gt; で定義した機能を使用するようにしたいので、アプリケーションに依存関係として &lt;code&gt;kv&lt;/code&gt; を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="425a08cd5321884d0ab45bab21799979e1c5501f" translate="yes" xml:space="preserve">
          <source>Single quotes are charlists, double quotes are strings. We will talk more about them in the &lt;a href=&quot;binaries-strings-and-char-lists&quot;&gt;&amp;ldquo;Binaries, strings and charlists&amp;rdquo;&lt;/a&gt; chapter.</source>
          <target state="translated">一重引用符は文字リスト、二重引用符は文字列です。それらについては、&lt;a href=&quot;binaries-strings-and-char-lists&quot;&gt;「バイナリ、文字列、およびチャーリスト」で詳しく説明します。&lt;/a&gt;章ます。</target>
        </trans-unit>
        <trans-unit id="2d7528bda0a71f6d8069c7c15f6dcbe9bf22f1e0" translate="yes" xml:space="preserve">
          <source>Single-line strings in Elixir are written between double-quotes, such as &lt;code&gt;&quot;foo&quot;&lt;/code&gt;. Any double-quote inside the string must be escaped with &lt;code&gt;\&lt;/code&gt;. Strings support Unicode characters and are stored as UTF-8 encoded binaries.</source>
          <target state="translated">Elixirの単一行の文字列は、 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; のように二重引用符で囲みます。文字列内の二重引用符は &lt;code&gt;\&lt;/code&gt; でエスケープする必要があります。文字列はUnicode文字をサポートし、UTF-8エンコードされたバイナリとして保存されます。</target>
        </trans-unit>
        <trans-unit id="a2e31d493b537b363c074ec4f97ee377323684c2" translate="yes" xml:space="preserve">
          <source>Size and unit can also be specified using a syntax shortcut when passing integer values:</source>
          <target state="translated">サイズと単位は、整数値を渡すときに構文ショートカットを使って指定することもできます。</target>
        </trans-unit>
        <trans-unit id="52d2c70012d8ed1ea7e910df59a016b1f6976dde" translate="yes" xml:space="preserve">
          <source>Sizes for types are a bit more nuanced. The default size for integers is 8.</source>
          <target state="translated">型のサイズはもう少しニュアンスがあります。整数のデフォルトサイズは8です。</target>
        </trans-unit>
        <trans-unit id="5bb4bb1ca83ec5f474261d62ad95799078b47602" translate="yes" xml:space="preserve">
          <source>Skipped (via @tag :skip)</source>
          <target state="translated">スキップ (@tag :skip)</target>
        </trans-unit>
        <trans-unit id="d5ca622d07bd8d35b6d8664121b3593144857e10" translate="yes" xml:space="preserve">
          <source>Sleeps the current process for the given &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;timeout&lt;/code&gt; 、現在のプロセスをスリープ状態にします。</target>
        </trans-unit>
        <trans-unit id="7fa4b79925c8d51a8a7c81a3dc5cde46fe8fe666" translate="yes" xml:space="preserve">
          <source>So far we have been starting one registry per test to ensure they are isolated:</source>
          <target state="translated">これまでのところ、テストごとに1つのレジストリを開始し、それらが分離されていることを確認しています。</target>
        </trans-unit>
        <trans-unit id="c0b9613de7c2b582f1851b80ca71692048f39354" translate="yes" xml:space="preserve">
          <source>So far we have explored tasks that are started and run in isolation, with no regard for their return value. However, sometimes it is useful to run a task to compute a value and read its result later on. For this, tasks also provide the &lt;code&gt;async/await&lt;/code&gt; pattern:</source>
          <target state="translated">これまでは、戻り値に関係なく、独立して開始および実行されるタスクについて検討してきました。ただし、値を計算してその結果を後で読み取るタスクを実行すると便利な場合があります。このため、タスクは &lt;code&gt;async/await&lt;/code&gt; パターンも提供します。</target>
        </trans-unit>
        <trans-unit id="7f909522b97564dd4054fcb1eb6b62ef9bbb43d1" translate="yes" xml:space="preserve">
          <source>So far we have hardcoded the routing table into the &lt;code&gt;KV.Router&lt;/code&gt; module. However, we would like to make the table dynamic. This allows us not only to configure development/test/production, but also to allow different nodes to run with different entries in the routing table. There is a feature of</source>
          <target state="translated">これまでのところ、ルーティングテーブルを &lt;code&gt;KV.Router&lt;/code&gt; ハードコーディングしました。ルーターモジュールに。ただし、テーブルを動的にする必要があります。これにより、開発/テスト/本番環境を構成できるだけでなく、ルーティングテーブルの異なるエントリを使用して異なるノードを実行できるようになります。の特徴があります</target>
        </trans-unit>
        <trans-unit id="6f62da9b30846d1f5dc3344a1711f438b5114216" translate="yes" xml:space="preserve">
          <source>So far we have only written unit tests, typically testing a single module directly. However, in order to make &lt;code&gt;KVServer.Command.run/1&lt;/code&gt; testable as a unit we would need to change its implementation to not send commands directly to the &lt;code&gt;KV.Registry&lt;/code&gt; process but instead pass a server as an argument. For example, we would need to change &lt;code&gt;run&lt;/code&gt;&amp;rsquo;s signature to &lt;code&gt;def run(command, pid)&lt;/code&gt; and then change all clauses accordingly:</source>
          <target state="translated">これまでのところ、単体テストのみを記述し、通常は単一のモジュールを直接テストしています。ただし、 &lt;code&gt;KVServer.Command.run/1&lt;/code&gt; 1をユニットとしてテスト可能にするには、その実装を変更して、コマンドを &lt;code&gt;KV.Registry&lt;/code&gt; プロセスに直接送信せず、代わりにサーバーを引数として渡す必要があります。たとえば、 &lt;code&gt;run&lt;/code&gt; の署名を &lt;code&gt;def run(command, pid)&lt;/code&gt; に変更してから、それに応じてすべての句を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="251229844d6239ebff61cacf8582cf96e235c9f5" translate="yes" xml:space="preserve">
          <source>So far we have started the supervisor and listed its children. Once the supervisor started, it also started all of its children.</source>
          <target state="translated">ここまでで、監督者を起動し、その子供たちをリストアップしました。スーパバイザが起動すると、その子供たちもすべて起動しました。</target>
        </trans-unit>
        <trans-unit id="cd7e3ac7c01c70e2691dd378c34f831dc99cf144" translate="yes" xml:space="preserve">
          <source>So far we have started the supervisor passing a single child as a tuple as well as a strategy called &lt;code&gt;:one_for_one&lt;/code&gt;:</source>
          <target state="translated">これまでのところ、スーパーバイザーは単一の子をタプルとして渡すだけでなく、 &lt;code&gt;:one_for_one&lt;/code&gt; と呼ばれる戦略も開始しています。ます。</target>
        </trans-unit>
        <trans-unit id="2b84bcc0b56e9b7a77002fd2c4c80e6b1043dfd4" translate="yes" xml:space="preserve">
          <source>So far we have used three callbacks: &lt;code&gt;handle_call/3&lt;/code&gt;, &lt;code&gt;handle_cast/2&lt;/code&gt; and &lt;code&gt;handle_info/2&lt;/code&gt;. Here is what we should consider when deciding when to use each:</source>
          <target state="translated">これまで、3つのコールバックを使用しました： &lt;code&gt;handle_call/3&lt;/code&gt; 、 &lt;code&gt;handle_cast/2&lt;/code&gt; 、および &lt;code&gt;handle_info/2&lt;/code&gt; 。以下は、それぞれをいつ使用するかを決定するときに考慮すべきことです。</target>
        </trans-unit>
        <trans-unit id="6f7dbac470c8be21619867a1a999689fe67e712e" translate="yes" xml:space="preserve">
          <source>So far we haven&amp;rsquo;t discussed any associative data structures, i.e. data structures that are able to associate a certain value (or multiple values) to a key. Different languages call these different names like dictionaries, hashes, associative arrays, etc.</source>
          <target state="translated">これまで、連想データ構造、つまり特定の値（または複数の値）をキーに関連付けることができるデータ構造については説明していませんでした。辞書、ハッシュ、連想配列など、さまざまな言語がこれらのさまざまな名前を呼び出します。</target>
        </trans-unit>
        <trans-unit id="5774107ee19024763a6ae09242699f6a7714e566" translate="yes" xml:space="preserve">
          <source>So far, all examples have used &lt;code&gt;/&lt;/code&gt; to delimit a regular expression. However, sigils support 8 different delimiters:</source>
          <target state="translated">これまでのところ、すべての例で &lt;code&gt;/&lt;/code&gt; が使用されていますをして正規表現を区切っています。ただし、シギルは8つの異なる区切り文字をサポートします。</target>
        </trans-unit>
        <trans-unit id="088fcaa5540ac3f087305577f114f1bc32519aad" translate="yes" xml:space="preserve">
          <source>So far, we have assembled a release named &lt;code&gt;foo&lt;/code&gt;, but our routing table contains information for both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;. Let&amp;rsquo;s start &lt;code&gt;foo&lt;/code&gt;:</source>
          <target state="translated">これまでのところ、 &lt;code&gt;foo&lt;/code&gt; という名前のリリースをアセンブルしましたが、ルーティングテーブルには &lt;code&gt;foo&lt;/code&gt; と &lt;code&gt;bar&lt;/code&gt; の両方の情報が含まれています。 &lt;code&gt;foo&lt;/code&gt; を始めましょう：</target>
        </trans-unit>
        <trans-unit id="e56c23fa4849096bb2c027d3d123d2a2f49fa67b" translate="yes" xml:space="preserve">
          <source>So far, we have learned that a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; can be used as a supervised process that handles sync and async calls. It can also handle system messages, such as periodic messages and monitoring events. GenServer processes may also be named.</source>
          <target state="translated">これまでのところ、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;を同期および非同期呼び出しを処理する監視対象プロセスとして使用できることを学びました。また、定期的なメッセージや監視イベントなどのシステムメッセージを処理することもできます。GenServerプロセスにも名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="68075bc4dca6cf8169233819190fd1733a0423c9" translate="yes" xml:space="preserve">
          <source>So let&amp;rsquo;s get started!</source>
          <target state="translated">それでは始めましょう！</target>
        </trans-unit>
        <trans-unit id="25ecbbe8564fb6e467c9ba98322930bbb97f7a85" translate="yes" xml:space="preserve">
          <source>So one may ask: which exit reason should I choose when exiting? There are three options:</source>
          <target state="translated">だから一つは、次のように尋ねるかもしれません:私はどの出口の理由を選択する必要がありますか?3つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="c55832fc922e1c92f24778a3f7674a00b54faf03" translate="yes" xml:space="preserve">
          <source>So our last option is to go all in and pick the &lt;code&gt;:one_for_all&lt;/code&gt; strategy: the supervisor will kill and restart all of its children processes whenever any one of them dies. This is a completely reasonable approach for our application, since the registry can&amp;rsquo;t work without the bucket supervisor, and the bucket supervisor should terminate without the registry. Let&amp;rsquo;s reimplement &lt;code&gt;init/1&lt;/code&gt; in &lt;code&gt;KV.Supervisor&lt;/code&gt; to encode those properties:</source>
          <target state="translated">したがって、最後のオプションは、オールインして &lt;code&gt;:one_for_all&lt;/code&gt; 戦略を選択することです。スーパーバイザーは、子プロセスのいずれかが停止すると、その子プロセスをすべて強制終了して再起動します。これは私たちのアプリケーションにとって完全に合理的なアプローチです。レジストリはバケットスーパーバイザーなしでは機能せず、バケットスーパーバイザーはレジストリなしで終了する必要があるためです。 &lt;code&gt;KV.Supervisor&lt;/code&gt; &lt;code&gt;init/1&lt;/code&gt; を再実装してみましょう。これらのプロパティをエンコードするために。</target>
        </trans-unit>
        <trans-unit id="83ae82602ec909b7e64f3e9c4185c9b43776fc1a" translate="yes" xml:space="preserve">
          <source>So, as mentioned above, we need to explicitly &lt;em&gt;not&lt;/em&gt; import &lt;a href=&quot;kernel#+/2&quot;&gt;&lt;code&gt;+/2&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">したがって、上記のように、&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;から&lt;a href=&quot;kernel#+/2&quot;&gt; &lt;code&gt;+/2&lt;/code&gt; &lt;/a&gt;を明示的にインポートし&lt;em&gt;ない&lt;/em&gt;ようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="298eccb34dba30d15b41ce5a15b44bef2b165685" translate="yes" xml:space="preserve">
          <source>Some functions that work on integers are found in &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">整数で機能するいくつかの関数は&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; にあり&lt;/a&gt;ます：</target>
        </trans-unit>
        <trans-unit id="b4ff408bd67bda590b1a8dadfe81203b9dd46dcd" translate="yes" xml:space="preserve">
          <source>Some lists, called improper lists, do not have an empty list as the second element in the last cons cell:</source>
          <target state="translated">不適切なリストと呼ばれるリストの中には、最後のconsセルの2番目の要素として空のリストを持たないものがあります。</target>
        </trans-unit>
        <trans-unit id="d07d38fa8e482844b99583b24c1125361f791f0e" translate="yes" xml:space="preserve">
          <source>Some names have specific meaning in Elixir. We detail those cases below.</source>
          <target state="translated">エリクサーには特定の意味を持つ名前もあります。以下では、そのような場合について詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="5102715b1c152eb041c75bc9866d03423b108a9d" translate="yes" xml:space="preserve">
          <source>Some of the functionalities described here will not be available depending on your terminal. In particular, if you get a message saying that the smart terminal could not be run, some of the features described here won't work.</source>
          <target state="translated">ここに記載されている機能の一部は、お使いの端末によってはご利用いただけません。特に、スマートターミナルを実行できませんでしたというメッセージが表示された場合、ここで説明した機能の一部は動作しません。</target>
        </trans-unit>
        <trans-unit id="424f006fc61cb524f1c4101e27c8c225bd339a44" translate="yes" xml:space="preserve">
          <source>Some of the functions described in this module are inlined by the Elixir compiler into their Erlang counterparts in the &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html&quot;&gt;&lt;code&gt;:erlang&lt;/code&gt; module&lt;/a&gt;. Those functions are called BIFs (built-in internal functions) in Erlang-land and they exhibit interesting properties, as some of them are allowed in guards and others are used for compiler optimizations.</source>
          <target state="translated">このモジュールで説明されている関数の一部は、Elixirコンパイラーによって、&lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html&quot;&gt; &lt;code&gt;:erlang&lt;/code&gt; モジュール&lt;/a&gt;内の対応するErlangにインライン化されます。これらの関数は、ErlangランドではBIF（組み込みの内部関数）と呼ばれ、ガードで許可されているものとコンパイラーの最適化に使用されているものがあるため、興味深い特性を示します。</target>
        </trans-unit>
        <trans-unit id="a192dcc1e8e79268df0b27c2cf55ebeff7ecf7e0" translate="yes" xml:space="preserve">
          <source>Some of the functions in this module are inlined by the compiler, similar to functions in the &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module and they are explicitly marked in their docs as &quot;inlined by the compiler&quot;. For more information about inlined functions, check out the &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">このモジュールの一部の関数は、&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;モジュールの関数と同様に、コンパイラーによってインライン化され、それらのドキュメントでは「コンパイラーによってインライン化された」と明示的にマークされています。インライン関数の詳細については、&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;モジュールをご覧ください。</target>
        </trans-unit>
        <trans-unit id="1351a1f3f5e4ff15e2ee7bf563a9188c76ada1d8" translate="yes" xml:space="preserve">
          <source>Some of those functions are low-level, allowing the user to interact with files or IO devices, like &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#copy/3&quot;&gt;&lt;code&gt;copy/3&lt;/code&gt;&lt;/a&gt; and others. This module also provides higher level functions that work with filenames and have their naming based on UNIX variants. For example, one can copy a file via &lt;a href=&quot;#cp/3&quot;&gt;&lt;code&gt;cp/3&lt;/code&gt;&lt;/a&gt; and remove files and directories recursively via &lt;a href=&quot;#rm_rf/1&quot;&gt;&lt;code&gt;rm_rf/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの機能の一部は低レベルであり、ユーザーは&lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#copy/3&quot;&gt; &lt;code&gt;copy/3&lt;/code&gt; &lt;/a&gt;などのファイルまたはIOデバイスを操作できます。このモジュールは、ファイル名を処理し、UNIXバリアントに基づいて名前を付ける、より高レベルの関数も提供します。たとえば、&lt;a href=&quot;#cp/3&quot;&gt; &lt;code&gt;cp/3&lt;/code&gt; &lt;/a&gt;を介してファイルをコピーし、&lt;a href=&quot;#rm_rf/1&quot;&gt; &lt;code&gt;rm_rf/1&lt;/code&gt; を&lt;/a&gt;介してファイルとディレクトリを再帰的に削除できます。</target>
        </trans-unit>
        <trans-unit id="6fd879bb620af289a1b036290e1cf67c2340065b" translate="yes" xml:space="preserve">
          <source>Some switches will output different values based on the switches types:</source>
          <target state="translated">一部のスイッチは、スイッチの種類によって異なる値を出力します。</target>
        </trans-unit>
        <trans-unit id="1594a8ec691f4330becf7636c23a4c5abd8a9640" translate="yes" xml:space="preserve">
          <source>Some types have associated modifiers to clear up ambiguity in byte representation.</source>
          <target state="translated">いくつかの型には、バイト表現の曖昧さを解消するための関連する修飾子があります。</target>
        </trans-unit>
        <trans-unit id="deaf1a57d57875a67207f24f3b5dd3ac6b782a3a" translate="yes" xml:space="preserve">
          <source>Sometimes a module embeds information from an external file. This attribute allows the module to annotate which external resources have been used.</source>
          <target state="translated">モジュールが外部ファイルからの情報を埋め込むことがあります。この属性は、モジュールがどの外部リソースが使用されたかをアノテーションすることを可能にします。</target>
        </trans-unit>
        <trans-unit id="384caed829a0ddd94d2e273f1d95ffe9dee6a8ec" translate="yes" xml:space="preserve">
          <source>Sometimes it&amp;rsquo;s necessary to ensure that a resource is cleaned up after some action that could potentially raise an error. The &lt;code&gt;try/after&lt;/code&gt; construct allows you to do that. For example, we can open a file and use an &lt;code&gt;after&lt;/code&gt; clause to close it&amp;ndash;even if something goes wrong:</source>
          <target state="translated">場合によっては、エラーを発生させる可能性のある何らかのアクションの後で、リソースを確実にクリーンアップする必要があります。 &lt;code&gt;try/after&lt;/code&gt; 構文あなたがそれを行うことができます。たとえば、何か問題が発生した場合でも、ファイルを開き、 &lt;code&gt;after&lt;/code&gt; 句を使用してファイルを閉じることができます。</target>
        </trans-unit>
        <trans-unit id="e2b2ac6019fb65f8717c90d1d018234f716a20c9" translate="yes" xml:space="preserve">
          <source>Sometimes variable names might be dynamically created. In such cases, &lt;code&gt;Macro.var/2&lt;/code&gt; can be used to define new variables:</source>
          <target state="translated">変数名が動的に作成される場合があります。このような場合、 &lt;code&gt;Macro.var/2&lt;/code&gt; を使用して新しい変数を定義できます。</target>
        </trans-unit>
        <trans-unit id="c3e6cdc44719c0255e951c12c019ffe28042a186" translate="yes" xml:space="preserve">
          <source>Sometimes when working with quoted expressions, it may be useful to get the textual code representation back. This can be done with &lt;code&gt;Macro.to_string/1&lt;/code&gt;:</source>
          <target state="translated">引用符で囲まれた式を使用する場合、テキストコード表現を元に戻すと役立つことがあります。これは &lt;code&gt;Macro.to_string/1&lt;/code&gt; で行うことができます：</target>
        </trans-unit>
        <trans-unit id="f678369b61eb09a9e589708cd7a2e02598564507" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to wrap the entire body of a function in a &lt;code&gt;try&lt;/code&gt; construct, often to guarantee some code will be executed afterwards. In such cases, Elixir allows you to omit the &lt;code&gt;try&lt;/code&gt; line:</source>
          <target state="translated">場合によっては、関数の本体全体を &lt;code&gt;try&lt;/code&gt; 構文でラップし、後でいくつかのコードが実行されることを保証することもできます。このような場合、Elixirでは &lt;code&gt;try&lt;/code&gt; 行を省略できます。</target>
        </trans-unit>
        <trans-unit id="a96f5994cefa16cd2405b3c485f7fd5c98881745" translate="yes" xml:space="preserve">
          <source>Sometimes you will create a list and it will return a value in single quotes. For example:</source>
          <target state="translated">リストを作成して、一重引用符で値を返すこともあります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8127688bd131696b0a37f05f499d0599032f888f" translate="yes" xml:space="preserve">
          <source>Sometimes, it may be handy to define supervisors backed by a module:</source>
          <target state="translated">時には、モジュールに裏打ちされたスーパーバイザを定義するのに便利な場合もあります。</target>
        </trans-unit>
        <trans-unit id="7107404c903a42c3ea798cd0771e63de0679051a" translate="yes" xml:space="preserve">
          <source>Sorting by multiple properties - first by size, then by first letter (this takes advantage of the fact that tuples are compared element-by-element):</source>
          <target state="translated">複数のプロパティによるソート-最初にサイズでソートし、次に最初の文字でソートします(これは、タプルが要素ごとに比較されるという事実を利用しています)。</target>
        </trans-unit>
        <trans-unit id="be5acfabf53936ea3e9b1247e69a2a9d3351da9f" translate="yes" xml:space="preserve">
          <source>Sorts the &lt;code&gt;enumerable&lt;/code&gt; according to Erlang's term ordering.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; をErlangの用語の順序に従ってソートします。</target>
        </trans-unit>
        <trans-unit id="e68a312ee613bb7d1d0c541895ad03ce0f0b9c2f" translate="yes" xml:space="preserve">
          <source>Sorts the &lt;code&gt;enumerable&lt;/code&gt; by the given function.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; ものを与えられた関数でソートします。</target>
        </trans-unit>
        <trans-unit id="abd6bf16aa13625f3c6058f6271a87fad2698de5" translate="yes" xml:space="preserve">
          <source>Sorts the mapped results of the &lt;code&gt;enumerable&lt;/code&gt; according to the provided &lt;code&gt;sorter&lt;/code&gt; function.</source>
          <target state="translated">提供された &lt;code&gt;sorter&lt;/code&gt; 関数に従って、 &lt;code&gt;enumerable&lt;/code&gt; のマップされた結果をソートします。</target>
        </trans-unit>
        <trans-unit id="15783b50f9d3f00eb365b748b956c65a135f9d3e" translate="yes" xml:space="preserve">
          <source>Spawn executable is a more restricted and explicit version of spawn. It expects full file paths to the executable you want to execute. If they are in your &lt;code&gt;$PATH&lt;/code&gt;, they can be retrieved by calling &lt;a href=&quot;system#find_executable/1&quot;&gt;&lt;code&gt;System.find_executable/1&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">スポーン実行可能ファイルは、スポーンのより制限された明示的なバージョンです。実行する実行可能ファイルへの完全なファイルパスが必要です。それらが &lt;code&gt;$PATH&lt;/code&gt; にある場合は、&lt;a href=&quot;system#find_executable/1&quot;&gt; &lt;code&gt;System.find_executable/1&lt;/code&gt; を&lt;/a&gt;呼び出すことで取得できます。</target>
        </trans-unit>
        <trans-unit id="06d844ce2d042cfc05ff00cd36cbaef907fbf9f7" translate="yes" xml:space="preserve">
          <source>Spawns the given function &lt;code&gt;fun&lt;/code&gt; from module &lt;code&gt;mod&lt;/code&gt;, passing the given &lt;code&gt;args&lt;/code&gt; according to the given options.</source>
          <target state="translated">モジュール &lt;code&gt;mod&lt;/code&gt; から指定された関数 &lt;code&gt;fun&lt;/code&gt; を生成し、指定されたオプションに従って指定された &lt;code&gt;args&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="e59d5e96307908db7f7259b156c4207b4b6647f1" translate="yes" xml:space="preserve">
          <source>Spawns the given function &lt;code&gt;fun&lt;/code&gt; from the given &lt;code&gt;module&lt;/code&gt; passing it the given &lt;code&gt;args&lt;/code&gt; and returns its PID.</source>
          <target state="translated">指定 &lt;code&gt;fun&lt;/code&gt; れた &lt;code&gt;module&lt;/code&gt; から指定された関数funを生成し、指定された &lt;code&gt;args&lt;/code&gt; を渡して、そのPIDを返します。</target>
        </trans-unit>
        <trans-unit id="ebfa1216cad38e8a649b56dffd10838521f159b4" translate="yes" xml:space="preserve">
          <source>Spawns the given function &lt;code&gt;fun&lt;/code&gt; from the given &lt;code&gt;module&lt;/code&gt; passing it the given &lt;code&gt;args&lt;/code&gt;, links it to the current process, and returns its PID.</source>
          <target state="translated">指定 &lt;code&gt;fun&lt;/code&gt; れた &lt;code&gt;module&lt;/code&gt; から指定された関数funを生成し、指定された &lt;code&gt;args&lt;/code&gt; を渡して、現在のプロセスにリンクし、そのPIDを返します。</target>
        </trans-unit>
        <trans-unit id="ea2e62ea14924f90832df9726a7c47d9b99aef7a" translate="yes" xml:space="preserve">
          <source>Spawns the given function according to the given options.</source>
          <target state="translated">与えられたオプションに従って、与えられた関数を起動します。</target>
        </trans-unit>
        <trans-unit id="3315809b279cf15aa395cbce73fa8ae67f6dbff9" translate="yes" xml:space="preserve">
          <source>Spawns the given function and returns its PID.</source>
          <target state="translated">指定された関数をスポーンし、そのPIDを返します。</target>
        </trans-unit>
        <trans-unit id="35d6575cb965b03843b65682af53845db43ea4f1" translate="yes" xml:space="preserve">
          <source>Spawns the given function, links it to the current process, and returns its PID.</source>
          <target state="translated">指定された関数を起動し、現在のプロセスにリンクし、そのPIDを返します。</target>
        </trans-unit>
        <trans-unit id="6b3166525e86d6671be4ca627ba932e58c5e6876" translate="yes" xml:space="preserve">
          <source>Spawns the given function, monitors it and returns its PID and monitoring reference.</source>
          <target state="translated">指定された関数を起動し、それを監視し、そのPIDと監視参照を返します。</target>
        </trans-unit>
        <trans-unit id="476a4f932c0193636e1b5b265079bd4eebed09cf" translate="yes" xml:space="preserve">
          <source>Spawns the given module and function passing the given args, monitors it and returns its PID and monitoring reference.</source>
          <target state="translated">指定されたモジュールと関数は、指定された引数を渡して生成され、それを監視し、その PID と監視参照を返します。</target>
        </trans-unit>
        <trans-unit id="11becd1e5ec9242aef1d1841d542f66a7becf7fb" translate="yes" xml:space="preserve">
          <source>Special forms are the basic building blocks of Elixir, and therefore cannot be overridden by the developer.</source>
          <target state="translated">特殊なフォームは Elixir の基本的な構成要素であるため、開発者がオーバーライドすることはできません。</target>
        </trans-unit>
        <trans-unit id="ec2d21cb128d08e54f4cc7123b3da9fc09f1d1fc" translate="yes" xml:space="preserve">
          <source>Special names</source>
          <target state="translated">特殊名称</target>
        </trans-unit>
        <trans-unit id="bd9733e0c08db2f71cd9184a67c342d610f82cb0" translate="yes" xml:space="preserve">
          <source>Specifically, this function takes a UTF-8 encoded binary and returns a list of its integer code points. It is similar to &lt;a href=&quot;#codepoints/1&quot;&gt;&lt;code&gt;codepoints/1&lt;/code&gt;&lt;/a&gt; except that the latter returns a list of code points as strings.</source>
          <target state="translated">具体的には、この関数はUTF-8でエンコードされたバイナリを受け取り、その整数コードポイントのリストを返します。&lt;a href=&quot;#codepoints/1&quot;&gt; &lt;code&gt;codepoints/1&lt;/code&gt; に&lt;/a&gt;似ていますが、後者はコードポイントのリストを文字列として返す点が異なります。</target>
        </trans-unit>
        <trans-unit id="076d7709d7ab86ddce0bc7b4c95d3c7f192f7af8" translate="yes" xml:space="preserve">
          <source>Specifications can be overloaded just like ordinary functions.</source>
          <target state="translated">仕様は、通常の関数と同じようにオーバーロードすることができます。</target>
        </trans-unit>
        <trans-unit id="5caf5e40c5f8e8465a047f2e293de43751354b57" translate="yes" xml:space="preserve">
          <source>Specifies a provider API that loads configuration during boot.</source>
          <target state="translated">ブート時に構成をロードするプロバイダ API を指定します。</target>
        </trans-unit>
        <trans-unit id="594428487583abee60caa384a006645343bb4dab" translate="yes" xml:space="preserve">
          <source>Specifies an external resource for the current module.</source>
          <target state="translated">現在のモジュールの外部リソースを指定します。</target>
        </trans-unit>
        <trans-unit id="991ba6c6c1d2cdca7ee53711d92474c28af8b0e5" translate="yes" xml:space="preserve">
          <source>Specifies the time zone database for calendar operations.</source>
          <target state="translated">カレンダー操作のタイムゾーンデータベースを指定します。</target>
        </trans-unit>
        <trans-unit id="33f17cd6008d68beaa918cd4a927ca8b7fb23835" translate="yes" xml:space="preserve">
          <source>Specify the module version. Accepts any valid Elixir value, for example:</source>
          <target state="translated">モジュールのバージョンを指定します。有効なElixirの値を指定します。</target>
        </trans-unit>
        <trans-unit id="5ae92cad872366e915ee35a53033e6a501a2ddaf" translate="yes" xml:space="preserve">
          <source>Splits a string into &lt;a href=&quot;#t:argv/0&quot;&gt;&lt;code&gt;argv/0&lt;/code&gt;&lt;/a&gt; chunks.</source>
          <target state="translated">文字列を&lt;a href=&quot;#t:argv/0&quot;&gt; &lt;code&gt;argv/0&lt;/code&gt; &lt;/a&gt;チャンクに分割します。</target>
        </trans-unit>
        <trans-unit id="9cee674c64765c1d80ecb8eac714ef8b24a33c1b" translate="yes" xml:space="preserve">
          <source>Splits a string into two at the specified offset. When the offset given is negative, location is counted from the end of the string.</source>
          <target state="translated">指定されたオフセットで文字列を2つに分割します。指定されたオフセットが負の場合は、文字列の末尾から位置をカウントします。</target>
        </trans-unit>
        <trans-unit id="ff232001d7426240fb22459c05a5783114c65dee" translate="yes" xml:space="preserve">
          <source>Splits enumerable in two at the position of the element for which &lt;code&gt;fun&lt;/code&gt; returns a falsy value (&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;) for the first time.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; が最初に &lt;code&gt;false&lt;/code&gt; 値（falseまたは &lt;code&gt;nil&lt;/code&gt; ）を返す要素の位置で列挙可能を2つに分割します。</target>
        </trans-unit>
        <trans-unit id="17bf201d5ac6822c0e5461609bb3331d4a9b71ae" translate="yes" xml:space="preserve">
          <source>Splits enumerable on every element for which &lt;code&gt;fun&lt;/code&gt; returns a new value.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; が新しい値を返すすべての要素で列挙可能を分割します。</target>
        </trans-unit>
        <trans-unit id="8fab28fdcf7550270e90b45a72ddba1737cc4ba0" translate="yes" xml:space="preserve">
          <source>Splits the &lt;code&gt;enumerable&lt;/code&gt; in two lists according to the given function &lt;code&gt;fun&lt;/code&gt;.</source>
          <target state="translated">指定された関数 &lt;code&gt;fun&lt;/code&gt; に従って、 &lt;code&gt;enumerable&lt;/code&gt; を2つのリストに分割します。</target>
        </trans-unit>
        <trans-unit id="e9928604019411df089cbfb5d79d98e495eb508a" translate="yes" xml:space="preserve">
          <source>Splits the &lt;code&gt;enumerable&lt;/code&gt; into groups based on &lt;code&gt;key_fun&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; を &lt;code&gt;key_fun&lt;/code&gt; に基づいてグループに分割します。</target>
        </trans-unit>
        <trans-unit id="9508aa9de8649214346d921d5668688428b1f895" translate="yes" xml:space="preserve">
          <source>Splits the &lt;code&gt;enumerable&lt;/code&gt; into two enumerables, leaving &lt;code&gt;count&lt;/code&gt; elements in the first one.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; を2つのenumerableに分割し、最初の要素に &lt;code&gt;count&lt;/code&gt; 要素を残します。</target>
        </trans-unit>
        <trans-unit id="f96c656c96d7ad7920526ee526067cab2352a1cf" translate="yes" xml:space="preserve">
          <source>Splits the given &lt;code&gt;enumerable&lt;/code&gt; in two lists by calling &lt;code&gt;fun&lt;/code&gt; with each element in the &lt;code&gt;enumerable&lt;/code&gt; as its only argument. Returns a tuple with the first list containing all the elements in &lt;code&gt;enumerable&lt;/code&gt; for which applying &lt;code&gt;fun&lt;/code&gt; returned a truthy value, and a second list with all the elements for which applying &lt;code&gt;fun&lt;/code&gt; returned a falsy value (&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;).</source>
          <target state="translated">与えられた分割 &lt;code&gt;enumerable&lt;/code&gt; 呼び出すことによって、二つのリストに &lt;code&gt;fun&lt;/code&gt; 内の各要素を &lt;code&gt;enumerable&lt;/code&gt; 唯一の引数として。 &lt;code&gt;fun&lt;/code&gt; を適用して真の値を返した &lt;code&gt;enumerable&lt;/code&gt; すべての要素を含む最初のリストと、 &lt;code&gt;fun&lt;/code&gt; を適用して &lt;code&gt;false&lt;/code&gt; 値（falseまたは &lt;code&gt;nil&lt;/code&gt; ）を返したすべての要素を含む2番目のリストを含むタプルを返します。</target>
        </trans-unit>
        <trans-unit id="178b0042fed7fdd8f93f31219d901e4b9b82d0c2" translate="yes" xml:space="preserve">
          <source>Splits the given module name into binary parts.</source>
          <target state="translated">与えられたモジュール名をバイナリ部分に分割します。</target>
        </trans-unit>
        <trans-unit id="0fd31f1cd4c506deb298a3d1cd81da35a74ebe25" translate="yes" xml:space="preserve">
          <source>Splits the given target based on the given pattern and in the given number of parts.</source>
          <target state="translated">指定されたパターンに基づいて指定されたターゲットを指定された数のパーツに分割します。</target>
        </trans-unit>
        <trans-unit id="8b112253fdc3346c7e770f36bb6f23ad8926016d" translate="yes" xml:space="preserve">
          <source>Splits the path into a list at the path separator.</source>
          <target state="translated">パスをパス区切りでリストに分割します。</target>
        </trans-unit>
        <trans-unit id="359b1199c2392525736cac5022b5304530d285ca" translate="yes" xml:space="preserve">
          <source>Splits the string into chunks of characters that share a common trait.</source>
          <target state="translated">文字列を共通の特徴を持つ文字の塊に分割します。</target>
        </trans-unit>
        <trans-unit id="036d667a456f6e5701ef615d7e9fe0acfd59a5e1" translate="yes" xml:space="preserve">
          <source>Splitting on empty string returns graphemes:</source>
          <target state="translated">空の文字列に分割すると、グレープスキームが返されます。</target>
        </trans-unit>
        <trans-unit id="580cb6b295814a3188d6380df0dec3f391ba39fd" translate="yes" xml:space="preserve">
          <source>Splitting with a string pattern:</source>
          <target state="translated">文字列パターンで分割。</target>
        </trans-unit>
        <trans-unit id="bcf765c54d34e28f6803f95f077f285d09e39e5b" translate="yes" xml:space="preserve">
          <source>Stacktrace information</source>
          <target state="translated">スタックトレース情報</target>
        </trans-unit>
        <trans-unit id="27f8a6f3b534fe60cc2d1d773b278872783430c8" translate="yes" xml:space="preserve">
          <source>Start IEx with &lt;code&gt;iex -S mix&lt;/code&gt; and you can see that the IEx prompt has changed.</source>
          <target state="translated">&lt;code&gt;iex -S mix&lt;/code&gt; でIExを開始すると、IExプロンプトが変更されたことがわかります。</target>
        </trans-unit>
        <trans-unit id="cd55884cf622ecaecfbd0f8029b7a2200a0e0ffe" translate="yes" xml:space="preserve">
          <source>Start a new server with &lt;code&gt;PORT=4040 mix run --no-halt&lt;/code&gt; and we can now open up many concurrent telnet clients. You will also notice that quitting a client does not bring the acceptor down. Excellent!</source>
          <target state="translated">&lt;code&gt;PORT=4040 mix run --no-halt&lt;/code&gt; 新しいサーバーを起動し、mix run --no-haltを実行すると、多数の同時Telnetクライアントを開くことができます。また、クライアントを終了してもアクセプターがダウンしないことに気付くでしょう。優秀な！</target>
        </trans-unit>
        <trans-unit id="a95c450013bed3752195e10c7871fec8dc526ef5" translate="yes" xml:space="preserve">
          <source>Start an IEx session inside the &lt;code&gt;kv_server&lt;/code&gt; application with &lt;code&gt;iex -S mix&lt;/code&gt;. Inside IEx, run:</source>
          <target state="translated">&lt;code&gt;iex -S mix&lt;/code&gt; を使用して、 &lt;code&gt;kv_server&lt;/code&gt; アプリケーション内でIExセッションを開始します。IEx内で、以下を実行します。</target>
        </trans-unit>
        <trans-unit id="f1e3c34a15115da4146bddae97a22e873ad3aba6" translate="yes" xml:space="preserve">
          <source>Start and shutdown</source>
          <target state="translated">スタートとシャットダウン</target>
        </trans-unit>
        <trans-unit id="12af8a4747b6cb74e2c03f95e160e013ad4c5cb4" translate="yes" xml:space="preserve">
          <source>Start new sections with second level Markdown headers &lt;code&gt;##&lt;/code&gt;. First level headers are reserved for module and function names.</source>
          <target state="translated">第2レベルのMarkdownヘッダー &lt;code&gt;##&lt;/code&gt; で新しいセクションを開始します。第1レベルのヘッダーは、モジュールと関数の名前用に予約されています。</target>
        </trans-unit>
        <trans-unit id="089185f450fbba06f1ee579db9849d55ba57b73a" translate="yes" xml:space="preserve">
          <source>Start the function name with one or two underscores, for example, &lt;code&gt;__add__/2&lt;/code&gt;, and add &lt;code&gt;@doc false&lt;/code&gt;. The compiler does not import functions with leading underscores and they hint to anyone reading the code of their intended private usage.</source>
          <target state="translated">関数名を1つまたは2つの下線（例えば &lt;code&gt;__add__/2&lt;/code&gt; ）で &lt;code&gt;@doc false&lt;/code&gt; 、@doc falseを追加します。コンパイラーは、先頭に下線が付いている関数をインポートせず、意図されたプライベート使用のコードを読み取る人にヒントを与えます。</target>
        </trans-unit>
        <trans-unit id="07f93068d3bc0f04950355efb6ddd2d17ec1f56e" translate="yes" xml:space="preserve">
          <source>Started applications are, finally, &lt;em&gt;stopped&lt;/em&gt;:</source>
          <target state="translated">開始されたアプリケーションは、最終的に&lt;em&gt;停止され&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="64358ae1fb937d4c75eba047d686e13aa9f19ac8" translate="yes" xml:space="preserve">
          <source>Starting applications</source>
          <target state="translated">アプリケーションの開始</target>
        </trans-unit>
        <trans-unit id="f835ee5c0014a63ad6b6df82abb9e701ec553824" translate="yes" xml:space="preserve">
          <source>Starts ExUnit and automatically runs tests right before the VM terminates.</source>
          <target state="translated">ExUnit を起動し、VM が終了する直前にテストを自動的に実行します。</target>
        </trans-unit>
        <trans-unit id="86c6bbd882bee2fa0066e7a22e3454fd13db4c2a" translate="yes" xml:space="preserve">
          <source>Starts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; process linked to the current process.</source>
          <target state="translated">現在のプロセスにリンクされている&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;プロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="2318ba34ca99a824b9aff08f1f35d1274803200e" translate="yes" xml:space="preserve">
          <source>Starts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; process without links (outside of a supervision tree).</source>
          <target state="translated">リンクなしで（監視ツリー外に）&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;プロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="0782a0a4923899805a82fdd2cfd52de5db03738c" translate="yes" xml:space="preserve">
          <source>Starts a child process under the test supervisor.</source>
          <target state="translated">試験監督者の下で子プロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="8ae57b5742336733267931b5f6b503fd008c72a0" translate="yes" xml:space="preserve">
          <source>Starts a module-based supervisor process with the given &lt;code&gt;module&lt;/code&gt; and &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;module&lt;/code&gt; と &lt;code&gt;arg&lt;/code&gt; でモジュールベースの監視プロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="fcf80a20aa8126b71633a9c4d9fbaa386ee40cfe" translate="yes" xml:space="preserve">
          <source>Starts a module-based supervisor process with the given &lt;code&gt;module&lt;/code&gt; and &lt;code&gt;init_arg&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;module&lt;/code&gt; と &lt;code&gt;init_arg&lt;/code&gt; でモジュールベースのスーパーバイザプロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="a29ac2effba91a69db59f15d944bea1c07200c03" translate="yes" xml:space="preserve">
          <source>Starts a new IEx server session.</source>
          <target state="translated">新しい IEx サーバー セッションを開始します。</target>
        </trans-unit>
        <trans-unit id="d40ac264e18a64e3aa1c8e14b1832737938a297e" translate="yes" xml:space="preserve">
          <source>Starts a new supervisor.</source>
          <target state="translated">新しいスーパーバイザーを開始します。</target>
        </trans-unit>
        <trans-unit id="ebaacaa2714f2595144af20c9a68793efe7ffd04" translate="yes" xml:space="preserve">
          <source>Starts a process linked to the current process.</source>
          <target state="translated">現在のプロセスに連動したプロセスを起動します。</target>
        </trans-unit>
        <trans-unit id="2b59224aef1ecbe4120f6edee31cbd426830d26d" translate="yes" xml:space="preserve">
          <source>Starts a supervisor with the given children.</source>
          <target state="translated">与えられた子供たちと一緒に監督を開始します。</target>
        </trans-unit>
        <trans-unit id="7d9965ed4725208ff0fa257915381d4a0e7c1131" translate="yes" xml:space="preserve">
          <source>Starts a supervisor with the given options.</source>
          <target state="translated">与えられたオプションでスーパーバイザーを開始します。</target>
        </trans-unit>
        <trans-unit id="07b52174845bc90fe1ecf5c9721f55e62fa125c0" translate="yes" xml:space="preserve">
          <source>Starts a task as a child of the given &lt;code&gt;supervisor&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;supervisor&lt;/code&gt; 子としてタスクを開始します。</target>
        </trans-unit>
        <trans-unit id="b2df2466c722de3bf0630de14ca0456f24b95029" translate="yes" xml:space="preserve">
          <source>Starts a task as part of a supervision tree.</source>
          <target state="translated">監督ツリーの一部としてタスクを開始します。</target>
        </trans-unit>
        <trans-unit id="1cb728f23ec3d4bd98eecc35a24b2ca0a288323d" translate="yes" xml:space="preserve">
          <source>Starts a task for parallel compilation.</source>
          <target state="translated">並列コンパイルのためのタスクを起動します。</target>
        </trans-unit>
        <trans-unit id="3e12fe5929d287faa596ff7c27135e404f41d121" translate="yes" xml:space="preserve">
          <source>Starts a task that can be awaited on.</source>
          <target state="translated">待機可能なタスクを開始します。</target>
        </trans-unit>
        <trans-unit id="5e4e4d48d3e46c07e8ad89683993faa9920d4034" translate="yes" xml:space="preserve">
          <source>Starts a task that must be awaited on.</source>
          <target state="translated">待機しなければならないタスクを開始します。</target>
        </trans-unit>
        <trans-unit id="baff2e0636d16f2edf213eeb533e7524ff6da6ba" translate="yes" xml:space="preserve">
          <source>Starts a task.</source>
          <target state="translated">タスクを開始します。</target>
        </trans-unit>
        <trans-unit id="60a11990717e4ff2488b4ece1a89e6bbe58d521f" translate="yes" xml:space="preserve">
          <source>Starts an agent linked to the current process with the given function.</source>
          <target state="translated">与えられた関数で現在のプロセスにリンクされたエージェントを起動します。</target>
        </trans-unit>
        <trans-unit id="88115ca2a6a5c44765a372981f691549cc020d54" translate="yes" xml:space="preserve">
          <source>Starts an agent linked to the current process.</source>
          <target state="translated">現在のプロセスにリンクされたエージェントを起動します。</target>
        </trans-unit>
        <trans-unit id="95ae19223d60b6b02cb6c4bd30ac4fa25fed8a18" translate="yes" xml:space="preserve">
          <source>Starts an agent process without links (outside of a supervision tree).</source>
          <target state="translated">リンクのないエージェントプロセスを開始します(監視ツリーの外)。</target>
        </trans-unit>
        <trans-unit id="abf365e5082ecbff5e0e8db22fa0296d814d2bfa" translate="yes" xml:space="preserve">
          <source>Starts an agent without links with the given module, function, and arguments.</source>
          <target state="translated">与えられたモジュール、関数、引数とのリンクなしでエージェントを起動します。</target>
        </trans-unit>
        <trans-unit id="a32e4b2048c8ef3240a536f9df6ce6e47d26f263" translate="yes" xml:space="preserve">
          <source>Starts an application in synchronous phases.</source>
          <target state="translated">同期フェーズでアプリケーションを起動します。</target>
        </trans-unit>
        <trans-unit id="c1cb03abb8e558c98285d30efef32d8ab46f3eb9" translate="yes" xml:space="preserve">
          <source>Starts monitoring the given &lt;code&gt;item&lt;/code&gt; from the calling process.</source>
          <target state="translated">呼び出しプロセスから指定された &lt;code&gt;item&lt;/code&gt; 監視を開始します。</target>
        </trans-unit>
        <trans-unit id="814c5f11fc85ecacb301d5d1ff7a5207b63cc546" translate="yes" xml:space="preserve">
          <source>Starts monitoring the given &lt;code&gt;port&lt;/code&gt; from the calling process.</source>
          <target state="translated">呼び出しプロセスから &lt;code&gt;port&lt;/code&gt; れたポートの監視を開始します。</target>
        </trans-unit>
        <trans-unit id="32f7fdf8c34390c9e691d76ef8c0ec7bd0d81af7" translate="yes" xml:space="preserve">
          <source>Starts the current application and runs code.</source>
          <target state="translated">現在のアプリケーションを起動し、コードを実行します。</target>
        </trans-unit>
        <trans-unit id="465701ca429a2dfabc3bc5f01a8bd60e3b9231c7" translate="yes" xml:space="preserve">
          <source>Starts the given &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;app&lt;/code&gt; 起動します。</target>
        </trans-unit>
        <trans-unit id="e2271caeb4b7d5b3c207dd94c7b7c318ed2188f2" translate="yes" xml:space="preserve">
          <source>Starts the registry as a supervisor process.</source>
          <target state="translated">レジストリをスーパーバイザプロセスとして起動します。</target>
        </trans-unit>
        <trans-unit id="a72502067518684f9deeec70cf119fd26326cd33" translate="yes" xml:space="preserve">
          <source>State</source>
          <target state="translated">State</target>
        </trans-unit>
        <trans-unit id="a04227ba1319a1fad4347603729d051498bac906" translate="yes" xml:space="preserve">
          <source>Static code analysis</source>
          <target state="translated">静的コード解析</target>
        </trans-unit>
        <trans-unit id="a62a6d902db47855d8f77112868e3787eabbca53" translate="yes" xml:space="preserve">
          <source>Stopping an application with a callback module has three steps:</source>
          <target state="translated">コールバックモジュールでアプリケーションを停止するには、3つのステップがあります。</target>
        </trans-unit>
        <trans-unit id="3753ad0cdb9c49b6498a88fe4f4514a2b9b36ece" translate="yes" xml:space="preserve">
          <source>Stopping an application without a callback module is defined, but except for some system tracing, it is in practice a no-op.</source>
          <target state="translated">コールバックモジュールを使わずにアプリケーションを停止することが定義されていますが、システムトレースを除いては、実際には何もしないことになっています。</target>
        </trans-unit>
        <trans-unit id="d5b2d506e52eb47a1075dbad242127c01e521df7" translate="yes" xml:space="preserve">
          <source>Stopping applications</source>
          <target state="translated">アプリケーションの停止</target>
        </trans-unit>
        <trans-unit id="16d9ee2c7e28df63e19079e90e7824e30d92fc9f" translate="yes" xml:space="preserve">
          <source>Stops a child process started via &lt;a href=&quot;#start_supervised/2&quot;&gt;&lt;code&gt;start_supervised/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#start_supervised/2&quot;&gt; &lt;code&gt;start_supervised/2&lt;/code&gt; &lt;/a&gt;によって開始された子プロセスを停止します。</target>
        </trans-unit>
        <trans-unit id="1d836dc29fd66efd06619857a7f3fbdbb2570615" translate="yes" xml:space="preserve">
          <source>Stops the IO device and returns the remaining input/output buffers.</source>
          <target state="translated">IOデバイスを停止し、残りの入出力バッファを返します。</target>
        </trans-unit>
        <trans-unit id="420cba62897b963528b14026eceb60569ceedeae" translate="yes" xml:space="preserve">
          <source>Stops the execution of the calling process with the given reason.</source>
          <target state="translated">与えられた理由で呼び出したプロセスの実行を停止します。</target>
        </trans-unit>
        <trans-unit id="1b87ddfd2f0a1efe1c63c07d6457515d241e5a11" translate="yes" xml:space="preserve">
          <source>Stops the given &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;app&lt;/code&gt; 停止します。</target>
        </trans-unit>
        <trans-unit id="7a8ca646fdc158d3d531a0223dadbec6991917ca" translate="yes" xml:space="preserve">
          <source>Stores registry metadata.</source>
          <target state="translated">レジストリのメタデータを格納します。</target>
        </trans-unit>
        <trans-unit id="486a63f10cb978abccfbd8ecf134b1efae0f41f9" translate="yes" xml:space="preserve">
          <source>Stores the given &lt;code&gt;key&lt;/code&gt;-&lt;code&gt;value&lt;/code&gt; pair in the process dictionary.</source>
          <target state="translated">指定された &lt;code&gt;key&lt;/code&gt; 格納します - &lt;code&gt;value&lt;/code&gt; プロセス辞書のペア。</target>
        </trans-unit>
        <trans-unit id="3a40588dab874cb0f15e4d524b5977f1cc44faf9" translate="yes" xml:space="preserve">
          <source>Storing information with attributes</source>
          <target state="translated">属性を使った情報の保存</target>
        </trans-unit>
        <trans-unit id="876f3e0202ca40dedf2e5ab6577eba1ae637fb53" translate="yes" xml:space="preserve">
          <source>Strategies</source>
          <target state="translated">Strategies</target>
        </trans-unit>
        <trans-unit id="df063869e11d7a9aa132cd4a984f7b5eb870d656" translate="yes" xml:space="preserve">
          <source>Stream</source>
          <target state="translated">Stream</target>
        </trans-unit>
        <trans-unit id="74985da267c6803b262f117de72af2d02e48029f" translate="yes" xml:space="preserve">
          <source>Streams</source>
          <target state="translated">Streams</target>
        </trans-unit>
        <trans-unit id="32937312f1205a985f371273166b0a08620a94b4" translate="yes" xml:space="preserve">
          <source>Streams are composable, lazy enumerables (for an introduction on enumerables, see the &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module). Any enumerable that generates elements one by one during enumeration is called a stream. For example, Elixir's &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; is a stream:</source>
          <target state="translated">ストリームは、合成可能な遅延列挙型です（&lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;については、Enumモジュールを参照してください）。列挙中に要素を1つずつ生成する列挙可能なものは、ストリームと呼ばれます。たとえば、エリクサーの&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;はストリームです。</target>
        </trans-unit>
        <trans-unit id="4d05b9a39a36694d426084ba23a5f9e69c3f3e62" translate="yes" xml:space="preserve">
          <source>Streams are lazy, composable enumerables.</source>
          <target state="translated">ストリームは怠惰でコンポーザブルな列挙可能なものです。</target>
        </trans-unit>
        <trans-unit id="712809970aa25b88c8417d13c741aaaed8cdc5c7" translate="yes" xml:space="preserve">
          <source>Streams the enumerable in chunks, containing &lt;code&gt;count&lt;/code&gt; elements each, where each new chunk starts &lt;code&gt;step&lt;/code&gt; elements into the enumerable.</source>
          <target state="translated">enumerableをチャンク単位でストリーミングします。各 &lt;code&gt;count&lt;/code&gt; 要素が含まれ、新しいチャンクが &lt;code&gt;step&lt;/code&gt; 要素を列挙型に開始します。</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="642ccf43dc1d6fbbbae9dcb9d0b32837c15cd30f" translate="yes" xml:space="preserve">
          <source>String (binary) concatenation uses the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator but charlists use the lists concatenation operator &lt;code&gt;++&lt;/code&gt;:</source>
          <target state="translated">文字列（バイナリ）連結では &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 演算子を使用しますが、文字リストではリスト連結演算子 &lt;code&gt;++&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="83229f3ff8f7ea7a043154af3b38efd4909e3589" translate="yes" xml:space="preserve">
          <source>String and binary operations</source>
          <target state="translated">文字列とバイナリ演算</target>
        </trans-unit>
        <trans-unit id="bd850015d8baaaed30b4f3d5a9c9529f30dc8015" translate="yes" xml:space="preserve">
          <source>String concatenation is done with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">文字列の連結は &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; で行われます：</target>
        </trans-unit>
        <trans-unit id="d89992e6bf13c0c402335f758d9be996e2e01c23" translate="yes" xml:space="preserve">
          <source>String.Chars</source>
          <target state="translated">String.Chars</target>
        </trans-unit>
        <trans-unit id="34301512f5868a1de9803c4f3410c31c2c126816" translate="yes" xml:space="preserve">
          <source>String.Chars &lt;small&gt;protocol&lt;/small&gt;</source>
          <target state="translated">String.Chars &lt;small&gt;プロトコル&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1c5c736c504b053727fd9efef0379fa8c75be99f" translate="yes" xml:space="preserve">
          <source>String.Chars.t (0)</source>
          <target state="translated">String.Chars.t (0)</target>
        </trans-unit>
        <trans-unit id="53d34343625f2871cea1abc24cdb3f39da79c324" translate="yes" xml:space="preserve">
          <source>String.Chars.to_string (1)</source>
          <target state="translated">String.Chars.to_string (1)</target>
        </trans-unit>
        <trans-unit id="71b9f81312a912f581ac74b4c41e1dabf6deb89c" translate="yes" xml:space="preserve">
          <source>StringIO</source>
          <target state="translated">StringIO</target>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="4e070c4fd19657d532bad6b50d3c0bc3ada85afa" translate="yes" xml:space="preserve">
          <source>Strings are always represented as themselves in the AST.</source>
          <target state="translated">ASTでは文字列は常にそれ自身で表現されます。</target>
        </trans-unit>
        <trans-unit id="9189545cce6b22534b68d2a8c78d66e2e097a67a" translate="yes" xml:space="preserve">
          <source>Strings can have line breaks in them. You can introduce them using escape sequences:</source>
          <target state="translated">文字列には改行を入れることができます。エスケープシーケンスを使って改行を導入することができます。</target>
        </trans-unit>
        <trans-unit id="ca38f6c1fbddaf28313e82e08e3bdd20ed71adb5" translate="yes" xml:space="preserve">
          <source>Strings in Elixir are delimited by double quotes, and they are encoded in UTF-8:</source>
          <target state="translated">Elixirの文字列は二重引用符で区切られ、UTF-8でエンコードされています。</target>
        </trans-unit>
        <trans-unit id="956ce6bc8b8fc3893f30f39eeac47f3c2031a779" translate="yes" xml:space="preserve">
          <source>Strings in Elixir are represented internally by binaries which are sequences of bytes:</source>
          <target state="translated">Elixirの文字列は、内部的にはバイト列であるバイナリで表現されます。</target>
        </trans-unit>
        <trans-unit id="949492a01a0acbead6a5b64c79b3a5208d1fa196" translate="yes" xml:space="preserve">
          <source>Strings, char lists, and word lists sigils</source>
          <target state="translated">文字列、文字列リスト、単語リストの記号</target>
        </trans-unit>
        <trans-unit id="b1b0c17e89281d54da848221c3d7d64fce387af1" translate="yes" xml:space="preserve">
          <source>Strings, charlists, atoms and sigils are kept as is. No character is automatically escaped or unescaped. The choice of delimiter is also respected from the input</source>
          <target state="translated">文字列、文字列、アトム、シグルはそのまま保存されます。文字が自動的にエスケープされたり、エスケープされなかったりすることはありません。区切り文字の選択は入力からも尊重されます。</target>
        </trans-unit>
        <trans-unit id="a4ab848fe5c4b2e5f638f279c7f13cc481bac6da" translate="yes" xml:space="preserve">
          <source>Struct</source>
          <target state="translated">Struct</target>
        </trans-unit>
        <trans-unit id="21e310386df8cb3491068257a8769c52dadb5d7d" translate="yes" xml:space="preserve">
          <source>Struct fields are evaluated at compile-time, which allows them to be dynamic. In the example below, &lt;code&gt;10 + 11&lt;/code&gt; is evaluated at compile-time and the age field is stored with value &lt;code&gt;21&lt;/code&gt;:</source>
          <target state="translated">構造体フィールドはコンパイル時に評価されるため、動的にすることができます。以下の例では、 &lt;code&gt;10 + 11&lt;/code&gt; がコンパイル時に評価され、年齢フィールドが値 &lt;code&gt;21&lt;/code&gt; で格納されます。</target>
        </trans-unit>
        <trans-unit id="66b9bcf6fa135918752a0ac296373b9fc45c7435" translate="yes" xml:space="preserve">
          <source>Structs</source>
          <target state="translated">Structs</target>
        </trans-unit>
        <trans-unit id="e48092358ab469205143fa60ac35c7155aef2e05" translate="yes" xml:space="preserve">
          <source>Structs (see below)</source>
          <target state="translated">構造体(下記参照</target>
        </trans-unit>
        <trans-unit id="1fa66ef16d007913d84111c1caa8d36201a759a2" translate="yes" xml:space="preserve">
          <source>Structs alongside protocols provide one of the most important features for Elixir developers: data polymorphism. That&amp;rsquo;s what we will explore in the next chapter.</source>
          <target state="translated">プロトコルとともに構造体は、Elixir開発者にとって最も重要な機能の1つであるデータのポリモーフィズムを提供します。これは、次の章で説明します。</target>
        </trans-unit>
        <trans-unit id="906ed9113d865df8c36d98027adb8b4c438462a1" translate="yes" xml:space="preserve">
          <source>Structs also allow pattern matching on the struct name:</source>
          <target state="translated">構造体は、構造体名のパターン・マッチングも可能です。</target>
        </trans-unit>
        <trans-unit id="403a81b60bd1b9d08b2aba9ce6f1c1e83a0ae9bd" translate="yes" xml:space="preserve">
          <source>Structs are bare maps underneath</source>
          <target state="translated">構造体はその下にあるむき出しのマップ</target>
        </trans-unit>
        <trans-unit id="ef8a5b2279bd1fda0dd17b3e4b37d53f5cabffc3" translate="yes" xml:space="preserve">
          <source>Structs are extensions built on top of maps that provide compile-time checks and default values.</source>
          <target state="translated">構造体は、マップの上に構築された拡張機能で、コンパイル時のチェックやデフォルト値を提供します。</target>
        </trans-unit>
        <trans-unit id="57a5690039bdfaa887691c076af282fbfcd1e385" translate="yes" xml:space="preserve">
          <source>Structs are usually defined with the &lt;a href=&quot;kernel#defstruct/1&quot;&gt;&lt;code&gt;Kernel.defstruct/1&lt;/code&gt;&lt;/a&gt; macro:</source>
          <target state="translated">構造体は通常、&lt;a href=&quot;kernel#defstruct/1&quot;&gt; &lt;code&gt;Kernel.defstruct/1&lt;/code&gt; &lt;/a&gt;マクロで定義されます。</target>
        </trans-unit>
        <trans-unit id="abdab30b78e5e45d65ba3227273c7089180b1f6f" translate="yes" xml:space="preserve">
          <source>Structs built on the map syntax by passing the struct name between &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;{&lt;/code&gt;. For example, &lt;code&gt;%User{...}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt; と &lt;code&gt;{&lt;/code&gt; の間に構造体名を渡すことにより、マップ構文に基づいて構築された構造体。たとえば、 &lt;code&gt;%User{...}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6ce56958d9176de03025283b3099e3721e59a8eb" translate="yes" xml:space="preserve">
          <source>Structs can also be used in pattern matching, both for matching on the value of specific keys as well as for ensuring that the matching value is a struct of the same type as the matched value.</source>
          <target state="translated">構造体は、パターン・マッチングでも使用できます。これは、特定のキーの値でのマッチングだけでなく、マッチング値がマッチング値と同じ型の構造体であることを確認するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="627a64dfd0ce65d3cdca0e3adc12f995862ee10f" translate="yes" xml:space="preserve">
          <source>Structs provide &lt;em&gt;compile-time&lt;/em&gt; guarantees that only the fields (and &lt;em&gt;all&lt;/em&gt; of them) defined through &lt;code&gt;defstruct&lt;/code&gt; will be allowed to exist in a struct:</source>
          <target state="translated">構造体が提供&lt;em&gt;コンパイル時の&lt;/em&gt;フィールドのみ（および保証&lt;em&gt;すべて&lt;/em&gt;で定義されたそれらの） &lt;code&gt;defstruct&lt;/code&gt; が構造体に存在することが許可されますが。</target>
        </trans-unit>
        <trans-unit id="9a421e5ee413973974fb1a4739a9e94164f81b8a" translate="yes" xml:space="preserve">
          <source>Structs take the name of the module they&amp;rsquo;re defined in. In the example above, we defined a struct named &lt;code&gt;User&lt;/code&gt;.</source>
          <target state="translated">構造体は、それらが定義されているモジュールの名前を取ります。上記の例では、 &lt;code&gt;User&lt;/code&gt; という名前の構造体を定義しました。</target>
        </trans-unit>
        <trans-unit id="4bcfdb993ad07d9903f21c6cf1477e9cf60ca26b" translate="yes" xml:space="preserve">
          <source>Structs whose internal structure is private to the local module (pattern matching them or directly accessing their fields should not be allowed) should use the &lt;code&gt;@opaque&lt;/code&gt; attribute. Structs whose internal structure is public should use &lt;code&gt;@type&lt;/code&gt;.</source>
          <target state="translated">内部構造がローカルモジュールにプライベートである構造体（それらに一致するパターンまたはフィールドに直接アクセスすることは許可されません）は、 &lt;code&gt;@opaque&lt;/code&gt; 属性を使用する必要があります。内部構造がパブリックである構造体は &lt;code&gt;@type&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3fdac6921d89e2c5b2bed6c0d9d18041f744d060" translate="yes" xml:space="preserve">
          <source>Subtracts &lt;code&gt;datetime2&lt;/code&gt; from &lt;code&gt;datetime1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;datetime2&lt;/code&gt; から &lt;code&gt;datetime1&lt;/code&gt; 減算します。</target>
        </trans-unit>
        <trans-unit id="01f386a46810771df7fb30922411804e63bbb211" translate="yes" xml:space="preserve">
          <source>Subtracts &lt;code&gt;naive_datetime2&lt;/code&gt; from &lt;code&gt;naive_datetime1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;naive_datetime2&lt;/code&gt; から &lt;code&gt;naive_datetime1&lt;/code&gt; 減算します。</target>
        </trans-unit>
        <trans-unit id="14da215035d163f8d2e9ac00ee5de927b8ce5918" translate="yes" xml:space="preserve">
          <source>Successive values are generated by calling &lt;code&gt;next_fun&lt;/code&gt; with the previous accumulator (the initial value being the result returned by &lt;code&gt;start_fun&lt;/code&gt;) and it must return a tuple containing a list of elements to be emitted and the next accumulator. The enumeration finishes if it returns &lt;code&gt;{:halt, acc}&lt;/code&gt;.</source>
          <target state="translated">連続する値は、前のアキュムレータ（初期値は &lt;code&gt;start_fun&lt;/code&gt; によって返される結果）で &lt;code&gt;next_fun&lt;/code&gt; を呼び出すことによって生成され、発行される要素のリストと次のアキュムレータを含むタプルを返す必要があります。列挙は、 &lt;code&gt;{:halt, acc}&lt;/code&gt; 返すと終了します。</target>
        </trans-unit>
        <trans-unit id="522311cdcaf7b3267814d3b09a19e47dea3c8a0f" translate="yes" xml:space="preserve">
          <source>Successive values are generated by calling &lt;code&gt;next_fun&lt;/code&gt; with the previous accumulator and it must return a tuple with the current value and next accumulator. The enumeration finishes if it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">連続する値は、前のアキュムレータで &lt;code&gt;next_fun&lt;/code&gt; を呼び出すことによって生成され、現在の値と次のアキュムレータを持つタプルを返す必要があります。列挙は、 &lt;code&gt;nil&lt;/code&gt; を返すと終了します。</target>
        </trans-unit>
        <trans-unit id="ec0597f1e250ca1cd4f549ebe479656572bafdd1" translate="yes" xml:space="preserve">
          <source>Such a guard would look like this:</source>
          <target state="translated">そんなガードはこんな感じになります。</target>
        </trans-unit>
        <trans-unit id="53658e37fb70788364f35c3ef3e5d3ef21ca3b29" translate="yes" xml:space="preserve">
          <source>Such function calls are efficient memory-wise no matter the size of the range. The implementation of the &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol uses logic based solely on the endpoints and does not materialize the whole list of integers.</source>
          <target state="translated">このような関数呼び出しは、範囲のサイズに関係なく、メモリの点で効率的です。&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコルの実装は、エンドポイントのみに基づくロジックを使用し、整数のリスト全体を具体化しません。</target>
        </trans-unit>
        <trans-unit id="413448cc1d1e59d4180a2c1df46d6b20fc8b2386" translate="yes" xml:space="preserve">
          <source>Such is also useful when using update functions, allowing us to introduce values as we traverse the data structure for updates:</source>
          <target state="translated">このような機能は、更新関数を使用する際にも便利で、更新のためにデータ構造をたどる際に値を導入することができます。</target>
        </trans-unit>
        <trans-unit id="f0c8c931aa883a1710a5641257d627e0b793426c" translate="yes" xml:space="preserve">
          <source>Such is possible for duplicate registries though:</source>
          <target state="translated">このようなことが可能なのは、重複するレジストリの場合です。</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="9413f829dc8a9eeac79634a8fecd1c1711b00407" translate="yes" xml:space="preserve">
          <source>Summing up</source>
          <target state="translated">まとめ</target>
        </trans-unit>
        <trans-unit id="008681d0cf389abc8327426047cec2a8b18317d8" translate="yes" xml:space="preserve">
          <source>Supervised tasks</source>
          <target state="translated">監督されたタスク</target>
        </trans-unit>
        <trans-unit id="908fa8f422bcf3bb9ccc6611b5129caf568648d9" translate="yes" xml:space="preserve">
          <source>Supervision trees</source>
          <target state="translated">監修樹木</target>
        </trans-unit>
        <trans-unit id="2cd4fa195ed5b220930149c31cc72fbb131921db" translate="yes" xml:space="preserve">
          <source>Supervisor</source>
          <target state="translated">Supervisor</target>
        </trans-unit>
        <trans-unit id="e1ea02d7a77e7dff85d3adb88e64fc729ba83f91" translate="yes" xml:space="preserve">
          <source>Supervisor &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">スーパーバイザの&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d69abd18d455510b99f3ff0e898ca02a3c32b696" translate="yes" xml:space="preserve">
          <source>Supervisor and Application</source>
          <target state="translated">スーパーバイザーとアプリケーション</target>
        </trans-unit>
        <trans-unit id="def06f454fe2aafd60e9bf9113ffca345eac503e" translate="yes" xml:space="preserve">
          <source>Supervisor and GenServers</source>
          <target state="translated">スーパーバイザーとGenServers</target>
        </trans-unit>
        <trans-unit id="12010eabcaf19b4380edc62ef8ef7afae10e6caa" translate="yes" xml:space="preserve">
          <source>Supervisor and worker options</source>
          <target state="translated">監督者と労働者のオプション</target>
        </trans-unit>
        <trans-unit id="ef948fc60b8d6995f73a05206917fcdf6cd81c08" translate="yes" xml:space="preserve">
          <source>Supervisor.Spec</source>
          <target state="translated">Supervisor.Spec</target>
        </trans-unit>
        <trans-unit id="fb7cc714ff3123e658f82813b47d9835dd16af4d" translate="yes" xml:space="preserve">
          <source>Supervisors support different strategies; in the example above, we have chosen &lt;code&gt;:one_for_one&lt;/code&gt;. Furthermore, each supervisor can have many workers and/or supervisors as children, with each one having its own configuration (as outlined in the &quot;Child specification&quot; section).</source>
          <target state="translated">監督者はさまざまな戦略をサポートしています。上記の例では、 &lt;code&gt;:one_for_one&lt;/code&gt; を選択しています。さらに、各スーパーバイザーは多くのワーカーやスーパーバイザーを子として持つことができ、各スーパーバイザーは独自の構成を持っています（「子の仕様」セクションで概説されています）。</target>
        </trans-unit>
        <trans-unit id="0578994f188280cb99013a5c58ec4c81802bfe88" translate="yes" xml:space="preserve">
          <source>Supervisors support different supervision strategies (through the &lt;code&gt;:strategy&lt;/code&gt; option, as seen above):</source>
          <target state="translated">スーパーバイザは、さまざまな監督戦略をサポートします（上記の &lt;code&gt;:strategy&lt;/code&gt; オプションを使用）。</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">Support</target>
        </trans-unit>
        <trans-unit id="a4eab47f32a482fa6a57e7d78931eebd65984bbe" translate="yes" xml:space="preserve">
          <source>Support for making private functions overridable</source>
          <target state="translated">プライベート関数をオーバーライド可能にするサポート</target>
        </trans-unit>
        <trans-unit id="6afec07b7fa976af6cf8797ee913469e9babea8a" translate="yes" xml:space="preserve">
          <source>Supported Erlang/OTP versions</source>
          <target state="translated">サポートされている Erlang/OTP のバージョン</target>
        </trans-unit>
        <trans-unit id="cc98180ca761a9afbf85fc26a48b02b6e25dbae6" translate="yes" xml:space="preserve">
          <source>Supported ID values</source>
          <target state="translated">サポートされているID値</target>
        </trans-unit>
        <trans-unit id="59b7fd869e912d97d97078bf118935bf508cd7dc" translate="yes" xml:space="preserve">
          <source>Supported module values</source>
          <target state="translated">サポートされているモジュールの値</target>
        </trans-unit>
        <trans-unit id="4ce9ab2c76a64f3bead6b697086605679c05ba0b" translate="yes" xml:space="preserve">
          <source>Supported restart values</source>
          <target state="translated">サポートされている再起動値</target>
        </trans-unit>
        <trans-unit id="4754143afdbe77546c223d10dd545bf29beec5ec" translate="yes" xml:space="preserve">
          <source>Supported shutdown values</source>
          <target state="translated">サポートされているシャットダウンの値</target>
        </trans-unit>
        <trans-unit id="556737ead8feb164936eb5c9d04fdbaa68615120" translate="yes" xml:space="preserve">
          <source>Supported strategies</source>
          <target state="translated">サポートされている戦略</target>
        </trans-unit>
        <trans-unit id="011f076c3d846af2a7296431ecd45f9d0d9ceba4" translate="yes" xml:space="preserve">
          <source>Supported worker values</source>
          <target state="translated">サポートされているワーカーの価値観</target>
        </trans-unit>
        <trans-unit id="b1ffd261b167462587f7afeaf76db355c7359f62" translate="yes" xml:space="preserve">
          <source>Supporting documents</source>
          <target state="translated">補助書類</target>
        </trans-unit>
        <trans-unit id="5074c54fe3d2dada9edf83c0782274a9de618a17" translate="yes" xml:space="preserve">
          <source>Supports multiple backends which are automatically supervised when plugged into &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;に接続すると自動的に監視される複数のバックエンドをサポートします。</target>
        </trans-unit>
        <trans-unit id="63b71cb9682231a38f6cb8bfe3190bb22abb9ee8" translate="yes" xml:space="preserve">
          <source>Switch definitions</source>
          <target state="translated">スイッチの定義</target>
        </trans-unit>
        <trans-unit id="3b07b3e7fad246aad851785b8640c09bc790a0c6" translate="yes" xml:space="preserve">
          <source>Switches can be specified via one of two options:</source>
          <target state="translated">スイッチは2つのオプションのいずれかで指定することができます。</target>
        </trans-unit>
        <trans-unit id="10f820ab2456db02149e31f2047f0b2fc4844076" translate="yes" xml:space="preserve">
          <source>Switches can be specified with modifiers, which change how they behave. The following modifiers are supported:</source>
          <target state="translated">スイッチは修飾子で指定することができ、その動作を変更することができます。以下の修飾子がサポートされています。</target>
        </trans-unit>
        <trans-unit id="76095f9f5c83633412d257a75ee9b301147d2861" translate="yes" xml:space="preserve">
          <source>Switches followed by a value will be assigned the value, as a string. Switches without an argument will be set automatically to &lt;code&gt;true&lt;/code&gt;. Since we cannot assert the type of the switch value, it is preferred to use the &lt;code&gt;:strict&lt;/code&gt; option that accepts only known switches and always verify their types.</source>
          <target state="translated">スイッチの後に値が続く場合は、文字列として値が割り当てられます。引数のないスイッチは自動的に &lt;code&gt;true&lt;/code&gt; に設定されます。スイッチ値のタイプをアサートできないため、既知のスイッチのみを受け入れ、常にそのタイプを確認する &lt;code&gt;:strict&lt;/code&gt; オプションを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5845d5880bc5d8b451e5a4dd803aa622305d25f1" translate="yes" xml:space="preserve">
          <source>Switches parsed by &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;OptionParser&lt;/code&gt;&lt;/a&gt; may take zero or one arguments.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;OptionParser&lt;/code&gt; &lt;/a&gt;によって解析されるスイッチは、0または1つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="3687a859d3cbb75ed3b6669b03cb32119eb5e843" translate="yes" xml:space="preserve">
          <source>Synchronously stops the agent with the given &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;reason&lt;/code&gt; エージェントを同期的に停止します。</target>
        </trans-unit>
        <trans-unit id="83e327b0ee0a0791c10736b6ce6e0977e644efa8" translate="yes" xml:space="preserve">
          <source>Synchronously stops the given supervisor with the given &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;reason&lt;/code&gt; 指定されたスーパーバイザを同期的に停止します。</target>
        </trans-unit>
        <trans-unit id="20daca0170b9cf17db723aa618e07ac24ddb1612" translate="yes" xml:space="preserve">
          <source>Synchronously stops the server with the given &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;reason&lt;/code&gt; サーバーを同期的に停止します。</target>
        </trans-unit>
        <trans-unit id="f6ceae4e1810d086bda09a8ac74e9e1fae98d4f4" translate="yes" xml:space="preserve">
          <source>Syntactic sugar</source>
          <target state="translated">構文糖</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="8c15a6de8bd57bfcd07b3aef8fb9a4bc8f26c05e" translate="yes" xml:space="preserve">
          <source>Syntax reference</source>
          <target state="translated">構文参照</target>
        </trans-unit>
        <trans-unit id="de4af2ff6c0bd31526ce7f5f8ca08783d0cc5ed7" translate="yes" xml:space="preserve">
          <source>SyntaxError</source>
          <target state="translated">SyntaxError</target>
        </trans-unit>
        <trans-unit id="62e61480537cef04396517bf21f00631d5916b00" translate="yes" xml:space="preserve">
          <source>SyntaxError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">SyntaxError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bc0792d8dc81e8aa30b987246a5ce97c40cd6833" translate="yes" xml:space="preserve">
          <source>System</source>
          <target state="translated">System</target>
        </trans-unit>
        <trans-unit id="15a3c2ea878a67e7f83b1e5350d3a1c397e6870e" translate="yes" xml:space="preserve">
          <source>System messages such as timer messages and monitoring events</source>
          <target state="translated">タイマーメッセージや監視イベントなどのシステムメッセージ</target>
        </trans-unit>
        <trans-unit id="629539f2b0b3c31f1b5b674c293fc529369d30a0" translate="yes" xml:space="preserve">
          <source>System modules</source>
          <target state="translated">システムモジュール</target>
        </trans-unit>
        <trans-unit id="e1f03c30c4ad532e4c164e6bd797580a623de00e" translate="yes" xml:space="preserve">
          <source>SystemLimitError</source>
          <target state="translated">SystemLimitError</target>
        </trans-unit>
        <trans-unit id="87d2f1faf999bf62e28a61deae6996346ba925b4" translate="yes" xml:space="preserve">
          <source>SystemLimitError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">SystemLimitError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="34fe46e18f0db15e3602c13218d0d43606ec62eb" translate="yes" xml:space="preserve">
          <source>Table of deprecations</source>
          <target state="translated">非推奨事項の一覧表</target>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="b6178fb349e0b28eda375aea2c569cd350dc4da1" translate="yes" xml:space="preserve">
          <source>Tags are also very effective when used with case templates (&lt;a href=&quot;exunit.casetemplate&quot;&gt;&lt;code&gt;ExUnit.CaseTemplate&lt;/code&gt;&lt;/a&gt;) allowing callbacks in the case template to customize the test behaviour.</source>
          <target state="translated">タグは、ケーステンプレート（&lt;a href=&quot;exunit.casetemplate&quot;&gt; &lt;code&gt;ExUnit.CaseTemplate&lt;/code&gt; &lt;/a&gt;）で、ケーステンプレートのコールバックでテスト動作をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="fc249ccb61119dc450a78be8a81ac2c8c0e49629" translate="yes" xml:space="preserve">
          <source>Tags can also be used to identify specific tests, which can then be included or excluded using filters. The most common functionality is to exclude some particular tests from running, which can be done via &lt;a href=&quot;exunit#configure/1&quot;&gt;&lt;code&gt;ExUnit.configure/1&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">タグは、特定のテストを識別するためにも使用でき、フィルターを使用してこれを含めたり除外したりできます。最も一般的な機能は、&lt;a href=&quot;exunit#configure/1&quot;&gt; &lt;code&gt;ExUnit.configure/1&lt;/code&gt; を&lt;/a&gt;介して実行できる特定のテストの実行を除外することです。。</target>
        </trans-unit>
        <trans-unit id="8b6e5fd9a74ed5f0c910db816652873cf2d30599" translate="yes" xml:space="preserve">
          <source>Tags in ExUnit are used to annotate tests. Tags can be later used to filter tests. For example, you can avoid running external tests on your machine because they are slow and dependent on other services, while they can still be enabled in your build system.</source>
          <target state="translated">ExUnit のタグは、テストに注釈をつけるために使用します。タグは、後からテストのフィルタリングに使うことができます。たとえば、他のサービスに依存していて遅いからといって外部テストをマシン上で実行しないようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="001aa408e4c6ef94853eea6d535dd0cd3f2d9ecb" translate="yes" xml:space="preserve">
          <source>Take note of the second argument to &lt;code&gt;Macro.var/2&lt;/code&gt;. This is the context being used and will determine hygiene as described in the next section.</source>
          <target state="translated">&lt;code&gt;Macro.var/2&lt;/code&gt; の2番目の引数に注意してください。これは使用されるコンテキストであり、次のセクションで説明するように衛生状態を決定します。</target>
        </trans-unit>
        <trans-unit id="396cb525a863762a0153f155bab5fa14c60b4b53" translate="yes" xml:space="preserve">
          <source>Take such cases as a suggestion that your code should be refactored:</source>
          <target state="translated">そのような場合は、あなたのコードをリファクタリングすべきだという提案として受け止めてください。</target>
        </trans-unit>
        <trans-unit id="3272b9a706ed0ca47f559e862d6dc2150998b033" translate="yes" xml:space="preserve">
          <source>Takes &lt;code&gt;count&lt;/code&gt; random elements from &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">とり &lt;code&gt;count&lt;/code&gt; からランダムな要素を &lt;code&gt;enumerable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff00a34c033bd6b414639eb45fc22dcd00b26ff3" translate="yes" xml:space="preserve">
          <source>Takes a compiled format and injects the level, timestamp, message, and metadata keyword list and returns a properly formatted string.</source>
          <target state="translated">コンパイルされた形式を取り、レベル、タイムスタンプ、メッセージ、およびメタデータのキーワード・リストを注入し、適切にフォーマットされた文字列を返します。</target>
        </trans-unit>
        <trans-unit id="fc0be3a7f7029dd2d434cb9dc499906bd7070ad7" translate="yes" xml:space="preserve">
          <source>Takes a time zone name and a point in time for UTC and returns a &lt;code&gt;time_zone_period&lt;/code&gt; for that point in time.</source>
          <target state="translated">UTCのタイムゾーン名と &lt;code&gt;time_zone_period&lt;/code&gt; 時点を受け取り、その特定の時点のtime_zone_periodを返します。</target>
        </trans-unit>
        <trans-unit id="108613966b46cb41abd8d09ea8bc76b57d639cc0" translate="yes" xml:space="preserve">
          <source>Takes all entries corresponding to the given &lt;code&gt;keys&lt;/code&gt; in &lt;code&gt;map&lt;/code&gt; and extracts them into a separate map.</source>
          <target state="translated">指定された &lt;code&gt;keys&lt;/code&gt; に対応するすべてのエントリを取得します &lt;code&gt;map&lt;/code&gt; それらを別のマップに抽出します。</target>
        </trans-unit>
        <trans-unit id="a057f41d143426d964dc91f467aeae07be4b8c88" translate="yes" xml:space="preserve">
          <source>Takes all entries corresponding to the given keys and extracts them into a separate keyword list.</source>
          <target state="translated">与えられたキーに対応するすべてのエントリを取得し、それらを別のキーワードリストに抽出します。</target>
        </trans-unit>
        <trans-unit id="22f2fcc0cd4b387311cd745e5116cafb06152b07" translate="yes" xml:space="preserve">
          <source>Takes all entries corresponding to the given keys and returns them in a new keyword list.</source>
          <target state="translated">与えられたキーに対応するすべてのエントリを取得し、それを新しいキーワードリストで返します。</target>
        </trans-unit>
        <trans-unit id="f01e74291caa1b3fb31a76131a0358dad5dd2b3a" translate="yes" xml:space="preserve">
          <source>Takes an &lt;code&gt;amount&lt;/code&gt; of elements from the beginning or the end of the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 要素の最初または最後から要素の &lt;code&gt;amount&lt;/code&gt; を取りますます。</target>
        </trans-unit>
        <trans-unit id="1f1f6557000f60347445111652f8c88ca3309153" translate="yes" xml:space="preserve">
          <source>Takes an enumerable that enumerates as a list of two-element tuples (e.g., a map or a keyword list) and returns a string in the form of &lt;code&gt;key1=value1&amp;amp;key2=value2...&lt;/code&gt; where keys and values are URL encoded as per &lt;a href=&quot;#encode_www_form/1&quot;&gt;&lt;code&gt;encode_www_form/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2要素のタプルのリスト（たとえば、マップまたはキーワードリスト）として列挙する列挙 &lt;code&gt;key1=value1&amp;amp;key2=value2...&lt;/code&gt; の形式で文字列を返します。ここで、キーと値は、&lt;a href=&quot;#encode_www_form/1&quot;&gt; &lt;code&gt;encode_www_form/1&lt;/code&gt; &lt;/a&gt;に従ってURLエンコードされています。1。</target>
        </trans-unit>
        <trans-unit id="e45acfd4331b2440feb53de6fbc1560baa366e61" translate="yes" xml:space="preserve">
          <source>Takes an optional &lt;code&gt;character_limit&lt;/code&gt; as a second argument. If &lt;code&gt;character_limit&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, this function will return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">2番目の引数としてオプションの &lt;code&gt;character_limit&lt;/code&gt; を取ります。 &lt;code&gt;character_limit&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; の場合、この関数は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="feadb0c8e9163376cb17aaa5d080783ed49a3087" translate="yes" xml:space="preserve">
          <source>Takes an optional &lt;code&gt;limit&lt;/code&gt; as a second argument. &lt;a href=&quot;#ascii_printable?/2&quot;&gt;&lt;code&gt;ascii_printable?/2&lt;/code&gt;&lt;/a&gt; only checks the printability of the list up to the &lt;code&gt;limit&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;limit&lt;/code&gt; を2番目の引数として受け取ります。&lt;a href=&quot;#ascii_printable?/2&quot;&gt; &lt;code&gt;ascii_printable?/2&lt;/code&gt; &lt;/a&gt;は、リストまでの印刷可能性のみをチェックします &lt;code&gt;limit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b31890ea4f4df85c9832a1da5e1e6d04b9bbfbd0" translate="yes" xml:space="preserve">
          <source>Takes changes such as summer time/DST into account. This means that adding time can cause the wall time to &quot;go backwards&quot; during &quot;fall back&quot; during autumn. Adding just a few seconds to a datetime just before &quot;spring forward&quot; can cause wall time to increase by more than an hour.</source>
          <target state="translated">夏時間/DSTなどの変化を考慮に入れています。つまり、時間を追加することで、秋の「フォールバック」の間に壁の時間が「逆行」してしまうことがあります。春分前倒し」の直前の日付時間に数秒だけ時間を追加すると、壁の時間が1時間以上増加することがあります。</target>
        </trans-unit>
        <trans-unit id="fae8e01301c7e0feb68a23236a2c9b3567e8ae34" translate="yes" xml:space="preserve">
          <source>Takes the elements from the beginning of the &lt;code&gt;enumerable&lt;/code&gt; while &lt;code&gt;fun&lt;/code&gt; returns a truthy value.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; ながら &lt;code&gt;enumerable&lt;/code&gt; 要素の最初から要素を取得しますが真の値を返す取得します。</target>
        </trans-unit>
        <trans-unit id="c5464b7fb8fc4c108c9bf24e8c373a4e9e4044e0" translate="yes" xml:space="preserve">
          <source>Takes the maximum width and a document to print as its arguments and returns an IO data representation of the best layout for the document to fit in the given width.</source>
          <target state="translated">最大幅と印刷する文書を引数として取り,与えられた幅に収まるように文書に最適なレイアウトのIOデータ表現を返します.</target>
        </trans-unit>
        <trans-unit id="d35260a00f655f27edcc35a7eb16da44a4f671a6" translate="yes" xml:space="preserve">
          <source>Targets</source>
          <target state="translated">Targets</target>
        </trans-unit>
        <trans-unit id="7bb0ddf9221c03b806b03c209e8366000124aa15" translate="yes" xml:space="preserve">
          <source>Task</source>
          <target state="translated">Task</target>
        </trans-unit>
        <trans-unit id="56913f440f346fedff0613f1a58aff47c8c81efb" translate="yes" xml:space="preserve">
          <source>Task and gen_tcp</source>
          <target state="translated">タスクとgen_tcp</target>
        </trans-unit>
        <trans-unit id="42d489b854c5dff6b39f3ae727392332235bf30a" translate="yes" xml:space="preserve">
          <source>Task supervisor</source>
          <target state="translated">タスクスーパーバイザー</target>
        </trans-unit>
        <trans-unit id="35a08efc9d440da7708c69812b0507ba330ba97d" translate="yes" xml:space="preserve">
          <source>Task.Supervisor</source>
          <target state="translated">Task.Supervisor</target>
        </trans-unit>
        <trans-unit id="090ec5f560fc50377fcd95e5cda128e91b276e98" translate="yes" xml:space="preserve">
          <source>Tasks</source>
          <target state="translated">Tasks</target>
        </trans-unit>
        <trans-unit id="ba00cfab602d1779b811d576baf5eafe077e7cab" translate="yes" xml:space="preserve">
          <source>Tasks are processes meant to execute one particular action throughout their lifetime, often with little or no communication with other processes. The most common use case for tasks is to convert sequential code into concurrent code by computing a value asynchronously:</source>
          <target state="translated">タスクとは、その生涯を通じて特定のアクションを実行するためのプロセスで、他のプロセスとの通信はほとんどないか、あるいはほとんどないことが多いです。タスクの最も一般的な使用例は、値を非同期的に計算してシーケンシャルコードをコンカレントコードに変換することです。</target>
        </trans-unit>
        <trans-unit id="8a0db3194d6f9d766302e10355f2237684a84453" translate="yes" xml:space="preserve">
          <source>Tasks are what make Mix extensible.</source>
          <target state="translated">タスクはMixを拡張可能にするものです。</target>
        </trans-unit>
        <trans-unit id="a520f228dee983c80456da705995e99d0baf055b" translate="yes" xml:space="preserve">
          <source>Tasks build on top of the spawn functions to provide better error reports and introspection:</source>
          <target state="translated">タスクはスポーン機能の上に構築され、より良いエラーレポートとイントロスペクションを提供します。</target>
        </trans-unit>
        <trans-unit id="0d54343e18426db24d51d0ad44751f910be12ca3" translate="yes" xml:space="preserve">
          <source>Tasks spawned with &lt;code&gt;async&lt;/code&gt; can be awaited on by their caller process (and only their caller) as shown in the example above. They are implemented by spawning a process that sends a message to the caller once the given computation is performed.</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; 生成されたタスク上記の例に示すように、、呼び出し元プロセス（および呼び出し元のみ）によってできます。これらは、特定の計算が実行されると、呼び出し元にメッセージを送信するプロセスを生成することによって実装されます。</target>
        </trans-unit>
        <trans-unit id="f36d34a8fff232dc61a718546ef8daf864665507" translate="yes" xml:space="preserve">
          <source>Tells whether the given process is alive on the local node.</source>
          <target state="translated">指定されたプロセスがローカルノード上で生きているかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="3c899cc5439be26f0cd7b582a42447cf769aca66" translate="yes" xml:space="preserve">
          <source>Temporarily blocks the current process waiting for a task reply.</source>
          <target state="translated">タスクの応答を待っている現在のプロセスを一時的にブロックします。</target>
        </trans-unit>
        <trans-unit id="d33ebb237e98c8b9d937b2d694b2c125b79ca66f" translate="yes" xml:space="preserve">
          <source>Term ordering</source>
          <target state="translated">用語の順序付け</target>
        </trans-unit>
        <trans-unit id="696845220c6e0a0d1e64cd82d61908625e60074a" translate="yes" xml:space="preserve">
          <source>Terminate the top-level supervisor.</source>
          <target state="translated">トップレベルの監督者を終了させる。</target>
        </trans-unit>
        <trans-unit id="37c2abf54c623c6250b581aced135fc94e351e86" translate="yes" xml:space="preserve">
          <source>Terminates the Erlang runtime system without properly shutting down applications and ports. Please see &lt;a href=&quot;#stop/1&quot;&gt;&lt;code&gt;stop/1&lt;/code&gt;&lt;/a&gt; for a careful shutdown of the system.</source>
          <target state="translated">アプリケーションとポートを適切にシャットダウンせずに、Erlangランタイムシステムを終了します。&lt;a href=&quot;#stop/1&quot;&gt; &lt;code&gt;stop/1&lt;/code&gt; を&lt;/a&gt;ご覧くださいシステムの注意深いシャットダウンについては、を。</target>
        </trans-unit>
        <trans-unit id="3cd2179f3f59774aca5baa2c47c7a727d23960ae" translate="yes" xml:space="preserve">
          <source>Terminates the child with the given &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;pid&lt;/code&gt; 子を終了しますます。</target>
        </trans-unit>
        <trans-unit id="c4bb07a1089485a5deadcff889ffd042bd8e458f" translate="yes" xml:space="preserve">
          <source>Terminates the given child identified by &lt;code&gt;child_id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;child_id&lt;/code&gt; で識別される指定された子を終了します。</target>
        </trans-unit>
        <trans-unit id="a50fe58f5df366a9be1362e929ebd0084a28443a" translate="yes" xml:space="preserve">
          <source>Terminates the given child identified by &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pid&lt;/code&gt; で識別される指定された子を終了します。</target>
        </trans-unit>
        <trans-unit id="a202094d471c445107dcaeee3f888512868cbcd8" translate="yes" xml:space="preserve">
          <source>Test filters and tags</source>
          <target state="translated">テストフィルタとタグ</target>
        </trans-unit>
        <trans-unit id="6259e4e6f0c5acd8366ddcebaae6c7f8a418bd4b" translate="yes" xml:space="preserve">
          <source>Test setup with ExUnit callbacks</source>
          <target state="translated">ExUnit コールバックによるテスト設定</target>
        </trans-unit>
        <trans-unit id="56c4fd8cce0fae76b0fc19e67eda41b7a30e0a0f" translate="yes" xml:space="preserve">
          <source>Testing a GenServer</source>
          <target state="translated">GenServerのテスト</target>
        </trans-unit>
        <trans-unit id="788b3affdeae419dc740b3f8cbcd405e20e4cc4b" translate="yes" xml:space="preserve">
          <source>Testing a GenServer is not much different from testing an agent. We will spawn the server on a setup callback and use it throughout our tests. Create a file at &lt;code&gt;test/kv/registry_test.exs&lt;/code&gt; with the following:</source>
          <target state="translated">GenServerのテストは、エージェントのテストと大差ありません。セットアップコールバックでサーバーを生成し、テスト全体で使用します。 &lt;code&gt;test/kv/registry_test.exs&lt;/code&gt; に次のファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="85b9fcfc0f6fc72610f7a98efec365df258038e3" translate="yes" xml:space="preserve">
          <source>Tests in umbrella projects can be run from the root by specifying the full suite path, including &lt;code&gt;apps/my_app/test&lt;/code&gt;, in which case recursive tests for other child apps will be skipped completely:</source>
          <target state="translated">アンブレラプロジェクトのテストは、 &lt;code&gt;apps/my_app/test&lt;/code&gt; を含む完全なスイートパスを指定することにより、ルートから実行できます。この場合、他の子アプリの再帰テストは完全にスキップされます。</target>
        </trans-unit>
        <trans-unit id="062dbf72aa69df4b2bf2e11e396bf97a679fa018" translate="yes" xml:space="preserve">
          <source>Thankfully, Elixir v1.2 introduced the &lt;code&gt;with&lt;/code&gt; construct, which allows you to simplify code like the above, replacing nested &lt;code&gt;case&lt;/code&gt; calls with a chain of matching clauses. Let&amp;rsquo;s rewrite the &lt;code&gt;serve/1&lt;/code&gt; function to use &lt;code&gt;with&lt;/code&gt;:</source>
          <target state="translated">ありがたいことに、Elixir v1.2は &lt;code&gt;with&lt;/code&gt; 構文を導入しました。これにより、上記のようなコードを単純化し、ネストされた &lt;code&gt;case&lt;/code&gt; と小文字の呼び出しを一連の一致する句で置き換えることができます。レッツ・リライトは &lt;code&gt;serve/1&lt;/code&gt; 使用する機能 &lt;code&gt;with&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="01e9b39e30c1a0e15112939ef1fff61fe4a3aa75" translate="yes" xml:space="preserve">
          <source>Thanks to the agent server process, the counter can be safely incremented concurrently.</source>
          <target state="translated">エージェント・サーバー・プロセスのおかげで、カウンタを安全に同時にインクリメントすることができます。</target>
        </trans-unit>
        <trans-unit id="cdbd4eae22bceef6692b374955bde22d9b7d01d6" translate="yes" xml:space="preserve">
          <source>That defines a release named &lt;code&gt;foo&lt;/code&gt; with both &lt;code&gt;kv_server&lt;/code&gt; and &lt;code&gt;kv&lt;/code&gt; applications. Their mode is set to &lt;code&gt;:permanent&lt;/code&gt;, which means that, if those applications crash, the whole node terminates. That&amp;rsquo;s reasonable since those applications are essential to our system. With the configuration in place, let&amp;rsquo;s give another try at assembling the release:</source>
          <target state="translated">これは、 &lt;code&gt;kv_server&lt;/code&gt; および &lt;code&gt;kv&lt;/code&gt; アプリケーションの両方で &lt;code&gt;foo&lt;/code&gt; という名前のリリースを定義します。それらのモードは &lt;code&gt;:permanent&lt;/code&gt; に設定されています。つまり、これらのアプリケーションがクラッシュすると、ノード全体が終了します。これらのアプリケーションはシステムに不可欠であるため、これは合理的です。構成が整ったら、リリースの組み立てをもう一度試してみましょう。</target>
        </trans-unit>
        <trans-unit id="c0b2e0d9fe52f84cc809886b734e22953d615efa" translate="yes" xml:space="preserve">
          <source>That ensures that if the task completes after the &lt;code&gt;timeout&lt;/code&gt; but before &lt;a href=&quot;#shutdown/1&quot;&gt;&lt;code&gt;shutdown/1&lt;/code&gt;&lt;/a&gt; has been called, you will still get the result, since &lt;a href=&quot;#shutdown/1&quot;&gt;&lt;code&gt;shutdown/1&lt;/code&gt;&lt;/a&gt; is designed to handle this case and return the result.</source>
          <target state="translated">これにより、&lt;a href=&quot;#shutdown/1&quot;&gt; &lt;code&gt;shutdown/1&lt;/code&gt; &lt;/a&gt;がこのケースを処理して結果を返すように設計されているため、 &lt;code&gt;timeout&lt;/code&gt; 後、&lt;a href=&quot;#shutdown/1&quot;&gt; &lt;code&gt;shutdown/1&lt;/code&gt; &lt;/a&gt;が呼び出される前にタスクが完了した場合でも、結果が得られます。</target>
        </trans-unit>
        <trans-unit id="d1fc0fd9268067ed50e8dff689947fe93beb5673" translate="yes" xml:space="preserve">
          <source>That happens because the &lt;code&gt;IO&lt;/code&gt; module actually works with processes (see &lt;a href=&quot;processes&quot;&gt;chapter 11&lt;/a&gt;). Given a file is a process, when you write to a file that has been closed, you are actually sending a message to a process which has been terminated:</source>
          <target state="translated">これは、 &lt;code&gt;IO&lt;/code&gt; モジュールが実際にプロセスで動作するために発生します（&lt;a href=&quot;processes&quot;&gt;第11章を&lt;/a&gt;参照）。ファイルがプロセスであるとすると、閉じられたファイルに書き込むとき、実際には、終了したプロセスにメッセージを送信しています。</target>
        </trans-unit>
        <trans-unit id="897c7bf39cdf3d75952cff1b5ff6f99e7827d8f9" translate="yes" xml:space="preserve">
          <source>That is, if the node can be part of a distributed system.</source>
          <target state="translated">つまり、ノードが分散システムの一部になり得るかどうかです。</target>
        </trans-unit>
        <trans-unit id="8e363ec1e2d5f0647070623c22f89c8707555da9" translate="yes" xml:space="preserve">
          <source>That is, if the number of bits in &lt;code&gt;bitstring&lt;/code&gt; is not divisible by 8, the resulting number of bytes will be rounded up (by excess). This operation happens in constant time.</source>
          <target state="translated">つまり、 &lt;code&gt;bitstring&lt;/code&gt; 列のビット数が8で割り切れない場合、結果のバイト数は切り上げられます（超過分）。この操作は一定の時間で発生します。</target>
        </trans-unit>
        <trans-unit id="21fbb88b6f851991624fb5b17096150fe0715845" translate="yes" xml:space="preserve">
          <source>That said, there are still cases where using macros and modules to build domain-specific languages is useful. Since we have explored data structures and function definitions in the Getting Started guide, this chapter will explore how to use macros and module attributes to tackle more complex DSLs.</source>
          <target state="translated">とはいえ、マクロやモジュールを使用してドメイン固有の言語を構築することが有用な場合もあります。はじめに」でデータ構造と関数定義について説明したので、この章ではマクロとモジュール属性を使ってより複雑なDSLに取り組む方法を探っていきます。</target>
        </trans-unit>
        <trans-unit id="814b47f77dfc5a37096b4b03955d625f97a0e859" translate="yes" xml:space="preserve">
          <source>That said, we need to expand the aliases node above to an atom, so we can retrieve its length. Expanding the node is not straightforward because we also need to expand the caller aliases. For example:</source>
          <target state="translated">つまり、上記の aliases ノードをアトムに展開する必要があるので、その長さを取得することができます。呼び出し元のエイリアスも展開する必要があるので、ノードを展開するのは簡単ではありません。例えば</target>
        </trans-unit>
        <trans-unit id="4d3f07f40965deb2a6bdc254e2fe7db4fac694fb" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s because an umbrella project gives us plenty of options when deploying the software. We can:</source>
          <target state="translated">それは、包括的プロジェクトがソフトウェアを展開するときに多くのオプションを提供するためです。私たちはできる：</target>
        </trans-unit>
        <trans-unit id="11e8efbea29607bc7f881559616858502e41b031" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s because we were expecting data from &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; but the client closed the connection. We need to handle such cases better in future revisions of our server.</source>
          <target state="translated">これは、 &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; からのデータを予期していたが、クライアントが接続を閉じたためです。サーバーの将来のリビジョンでは、このようなケースをより適切に処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="4c56715445461f557ef98a6e96f4646be8d6243e" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s enough for our tests to pass but there is a resource leakage in our application. When a bucket terminates, the supervisor will start a new bucket in its place. After all, that&amp;rsquo;s the role of the supervisor!</source>
          <target state="translated">テストに合格するにはこれで十分ですが、アプリケーションにリソースリークがあります。バケットが終了すると、スーパーバイザーは代わりに新しいバケットを開始します。結局、それがスーパーバイザーの役割です！</target>
        </trans-unit>
        <trans-unit id="b7a0f3e3c150c923165c6e2a99dd197a0a28b7af" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s happening because the release &lt;code&gt;foo&lt;/code&gt; is already listening on port &lt;code&gt;4040&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; is trying to do the same! One option could be to move the &lt;code&gt;:port&lt;/code&gt; configuration to the application environment, like we did for the routing table. But let&amp;rsquo;s try something else. Let&amp;rsquo;s make it so the &lt;code&gt;bar&lt;/code&gt; release contains only the &lt;code&gt;:kv&lt;/code&gt; application. So it works as a storage but it won&amp;rsquo;t have a front-end. Change the &lt;code&gt;:bar&lt;/code&gt; information to this:</source>
          <target state="translated">これは、リリース &lt;code&gt;foo&lt;/code&gt; がすでにポート &lt;code&gt;4040&lt;/code&gt; でリッスンしており、 &lt;code&gt;bar&lt;/code&gt; が同じことをしようとしているためです。1つのオプションは、ルーティングテーブルの場合と同様に、 &lt;code&gt;:port&lt;/code&gt; 構成をアプリケーション環境に移動することです。しかし、他のことを試してみましょう。 &lt;code&gt;bar&lt;/code&gt; リリースに &lt;code&gt;:kv&lt;/code&gt; アプリケーションのみが含まれるようにします。したがって、ストレージとして機能しますが、フロントエンドはありません。 &lt;code&gt;:bar&lt;/code&gt; 情報を次のように変更します。</target>
        </trans-unit>
        <trans-unit id="728db93af19ad8ae8e28827f7df6fa0ee95b6c1b" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it for the client API. On the server side, we can implement a variety of callbacks to guarantee the server initialization, termination, and handling of requests. Those callbacks are optional and for now, we have only implemented the ones we care about. Let&amp;rsquo;s recap.</source>
          <target state="translated">クライアントAPIについては以上です。サーバー側では、サーバーの初期化、終了、リクエストの処理を保証するために、さまざまなコールバックを実装できます。これらのコールバックはオプションであり、現時点では、気になるコールバックのみを実装しています。まとめましょう。</target>
        </trans-unit>
        <trans-unit id="a3de339a8a8126c8176ac9eab07a22576517e36b" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s not what we wanted, since the value of the &lt;code&gt;number&lt;/code&gt; variable has not been injected and &lt;code&gt;number&lt;/code&gt; has been quoted in the expression. In order to inject the &lt;em&gt;value&lt;/em&gt; of the &lt;code&gt;number&lt;/code&gt; variable, &lt;code&gt;unquote&lt;/code&gt; has to be used inside the quoted representation:</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; 変数の値が注入されておらず、 &lt;code&gt;number&lt;/code&gt; が式で引用されているため、それは私たちが望んでいたことではありません。 &lt;code&gt;number&lt;/code&gt; 変数の&lt;em&gt;値&lt;/em&gt;を注入するには、引用符で囲まれた表現の内部で &lt;code&gt;unquote&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="dcf68842185af09e3a0f9fe32163648242f47543" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s what macros are all about. They are about receiving quoted expressions and transforming them into something else. In fact, &lt;code&gt;unless/2&lt;/code&gt; in Elixir is implemented as a macro:</source>
          <target state="translated">それがマクロのすべてです。彼らは引用された表現を受け取り、それらを別のものに変換することについてです。実際、Elixirの &lt;code&gt;unless/2&lt;/code&gt; がマクロとして実装されていない場合：</target>
        </trans-unit>
        <trans-unit id="23bd0d6f40de4627ff508337339ea27a545beab3" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s when &lt;code&gt;unquote_splicing&lt;/code&gt; becomes handy:</source>
          <target state="translated">それは &lt;code&gt;unquote_splicing&lt;/code&gt; が便利になるときです：</target>
        </trans-unit>
        <trans-unit id="dd53bd72aff61e4af823bbda7c24cb88da5c37ab" translate="yes" xml:space="preserve">
          <source>That's what we meant when we said earlier that streams are composable, lazy enumerables. Notice we could call &lt;a href=&quot;stream#map/2&quot;&gt;&lt;code&gt;Stream.map/2&lt;/code&gt;&lt;/a&gt; multiple times, effectively composing the streams and keeping them lazy. The computations are only performed when you call a function from the &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">これは、先にストリームが構成可能で遅延の列挙可能なものであると言ったときの意味です。&lt;a href=&quot;stream#map/2&quot;&gt; &lt;code&gt;Stream.map/2&lt;/code&gt; を&lt;/a&gt;複数回呼び出して、ストリームを効果的に構成し、遅延させておくことができることに注意してください。計算は、&lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;モジュールから関数を呼び出すときにのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="a59d1e1634f57e0cf851ffcf7499aa4351a17212" translate="yes" xml:space="preserve">
          <source>The &quot;file:line&quot; represents the file and line a call to a deprecated &quot;module.function/arity&quot; is made. This operation does not show deprecated local calls (a call to a deprecated function or macro in the same module) nor calls to deprecated functionality in Elixir itself.</source>
          <target state="translated">file:line」は、非推奨の「module.function/arity」への呼び出しが行われたファイルと行を表します。この操作では、非推奨のローカルコール(同じモジュール内の非推奨の関数やマクロへのコール)や、Elixir自身の非推奨機能へのコールは表示されません。</target>
        </trans-unit>
        <trans-unit id="826934dab44a7a099fc8b2a86a3c62e533cc4b2e" translate="yes" xml:space="preserve">
          <source>The &quot;file:line&quot; represents the file and line a call to an unknown &quot;module.function/arity&quot; is made.</source>
          <target state="translated">file:line」は、未知の「module.function/arity」への呼び出しが行われたファイルと行を表します。</target>
        </trans-unit>
        <trans-unit id="0c20b0f5fe22af74b9f5bd9023dad3c12944c0fd" translate="yes" xml:space="preserve">
          <source>The .iex.exs file</source>
          <target state="translated">.iex.exs ファイル</target>
        </trans-unit>
        <trans-unit id="f8308d6c331d75737fe1ed60777039be95e5626b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#%253C%253E/2&quot;&gt;&lt;code&gt;&amp;lt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt; operator can also be used in pattern matching (and guard clauses) as long as the left argument is a literal binary:</source>
          <target state="translated">&lt;a href=&quot;#%253C%253E/2&quot;&gt; &lt;code&gt;&amp;lt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt;演算子も長い左引数がリテラルバイナリされるとパターンマッチング（及びガード句）で使用することができます。</target>
        </trans-unit>
        <trans-unit id="ae4a9ae0930f3e9d2c507d033d48dd4bf27477e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#add/2&quot;&gt;&lt;code&gt;add/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#diff/2&quot;&gt;&lt;code&gt;diff/2&lt;/code&gt;&lt;/a&gt; functions can be used for computing dates or retrieving the number of days between instants. For example, if there is an interest in computing the number of days from the Unix epoch (1970-01-01):</source>
          <target state="translated">&lt;a href=&quot;#add/2&quot;&gt; &lt;code&gt;add/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#diff/2&quot;&gt; &lt;code&gt;diff/2&lt;/code&gt; &lt;/a&gt;の関数は、日付を計算するか、瞬間の間の日数を取得するために使用することができます。たとえば、Unixエポック（1970-01-01）からの日数の計算に関心がある場合：</target>
        </trans-unit>
        <trans-unit id="9ee4b27e73fcd2815c54fe669288c51019f1a3b0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#add/3&quot;&gt;&lt;code&gt;add/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#diff/3&quot;&gt;&lt;code&gt;diff/3&lt;/code&gt;&lt;/a&gt; functions can be used for computing with date times or retrieving the number of seconds between instants. For example, if there is an interest in computing the number of seconds from the Unix epoch (1970-01-01 00:00:00):</source>
          <target state="translated">&lt;a href=&quot;#add/3&quot;&gt; &lt;code&gt;add/3&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#diff/3&quot;&gt; &lt;code&gt;diff/3&lt;/code&gt; &lt;/a&gt;の機能は、日付と時刻の計算や瞬間の間の秒数を取得するために使用することができます。たとえば、Unixエポック（1970-01-01 00:00:00）からの秒数の計算に関心がある場合：</target>
        </trans-unit>
        <trans-unit id="43daa6aefdc5d7ab59c882f8c756868ab5825ba5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; callback has to spawn and link a supervisor and return &lt;code&gt;{:ok, pid}&lt;/code&gt; or &lt;code&gt;{:ok, pid, state}&lt;/code&gt;, where &lt;code&gt;pid&lt;/code&gt; is the PID of the supervisor, and &lt;code&gt;state&lt;/code&gt; is an optional application state. &lt;code&gt;args&lt;/code&gt; is the second element of the tuple given to the &lt;code&gt;:mod&lt;/code&gt; option.</source>
          <target state="translated">&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;コールバックはスポーンにあり、スーパーバイザーとリターンリンク &lt;code&gt;{:ok, pid}&lt;/code&gt; 又は &lt;code&gt;{:ok, pid, state}&lt;/code&gt; 、 &lt;code&gt;pid&lt;/code&gt; スーパバイザのPIDであり、 &lt;code&gt;state&lt;/code&gt; 、オプションのアプリケーションの状態です。 &lt;code&gt;args&lt;/code&gt; は、 &lt;code&gt;:mod&lt;/code&gt; オプションに指定されたタプルの2番目の要素です。</target>
        </trans-unit>
        <trans-unit id="ed55773b14c9f49b1e67866369426e97f1e28202" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#c:terminate/2&quot;&gt;&lt;code&gt;terminate/2&lt;/code&gt;&lt;/a&gt; callback of the given &lt;code&gt;server&lt;/code&gt; will be invoked before exiting. This function returns &lt;code&gt;:ok&lt;/code&gt; if the server terminates with the given reason; if it terminates with another reason, the call exits.</source>
          <target state="translated">&lt;a href=&quot;#c:terminate/2&quot;&gt; &lt;code&gt;terminate/2&lt;/code&gt; &lt;/a&gt;前に、指定された &lt;code&gt;server&lt;/code&gt; のterminate / 2コールバックが呼び出されます。この関数は、サーバーが指定された理由で終了した場合、 &lt;code&gt;:ok&lt;/code&gt; を返します。別の理由で終了した場合、呼び出しは終了します。</target>
        </trans-unit>
        <trans-unit id="e5479aff7c9902d4559e5268eb0059ef6a88b9eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module defines a behaviour for dynamically accessing keys of any type in a data structure via the &lt;code&gt;data[key]&lt;/code&gt; syntax.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;モジュールは、動的に介してデータ構造内の任意のタイプのキーにアクセスするための動作を定義する &lt;code&gt;data[key]&lt;/code&gt; シンタックス。</target>
        </trans-unit>
        <trans-unit id="22076bf07a81ed27164e331c5cdde4703e5883c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Agent&lt;/code&gt;&lt;/a&gt; module provides a basic server implementation that allows state to be retrieved and updated via a simple API.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Agent&lt;/code&gt; &lt;/a&gt;モジュールは、状態は、単純なAPIを介して検索して更新することを可能にする基本的なサーバの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="ab7d336fe7d0f927a59616b237afeff91face2e6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt; module was designed to fill the gap left by the &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol. &lt;a href=&quot;collectable#into/1&quot;&gt;&lt;code&gt;Collectable.into/1&lt;/code&gt;&lt;/a&gt; can be seen as the opposite of &lt;a href=&quot;enumerable#reduce/3&quot;&gt;&lt;code&gt;Enumerable.reduce/3&lt;/code&gt;&lt;/a&gt;. If the functions in &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; are about taking values out, then &lt;a href=&quot;collectable#into/1&quot;&gt;&lt;code&gt;Collectable.into/1&lt;/code&gt;&lt;/a&gt; is about collecting those values into a structure.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt;モジュールによって残されたギャップを埋めるために設計されました&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコル。&lt;a href=&quot;collectable#into/1&quot;&gt; &lt;code&gt;Collectable.into/1&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;enumerable#reduce/3&quot;&gt; &lt;code&gt;Enumerable.reduce/3&lt;/code&gt; の&lt;/a&gt;逆と見なすことができます。&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;の関数が値を取り出すことである場合、&lt;a href=&quot;collectable#into/1&quot;&gt; &lt;code&gt;Collectable.into/1&lt;/code&gt; &lt;/a&gt;はそれらの値を構造体に収集することです。</target>
        </trans-unit>
        <trans-unit id="abf8114bea9b602a6fa5cde26a4f28f20fe6f936" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; is disabled by configuration but might be enabled later.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; は&lt;/a&gt;設定で無効になっていますが、後で有効にすることがあります。</target>
        </trans-unit>
        <trans-unit id="6bff3abe60e151fca7d023800c126e733ac84e99" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol can be derived to hide certain fields from structs, so they don't show up in logs, inspects and similar. This is especially useful for fields containing private information.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;、彼らがログインすると、検査し、類似したに表示されませんので、プロトコルは、構造体から特定のフィールドを非表示に導出することができます。これは、個人情報を含むフィールドで特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="8080f21d315b84058f54169b0d0e5acda5fedb17" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol converts an Elixir data structure into an algebra document.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;プロトコルは代数文書にエリクサーデータ構造を変換します。</target>
        </trans-unit>
        <trans-unit id="9b2d0f65323751f2d634dcefd3c1350838c93ed4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;List.Chars&lt;/code&gt;&lt;/a&gt; protocol is responsible for converting a structure to a charlist (only if applicable).</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;List.Chars&lt;/code&gt; の&lt;/a&gt;プロトコルはCHARLIST（のみ該当する場合）に構造を変換するための責任があります。</target>
        </trans-unit>
        <trans-unit id="38d20b80dced22a569e8ce8dd2e2cb76ca007f43" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; level can be changed via &lt;a href=&quot;#configure/1&quot;&gt;&lt;code&gt;configure/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;レベルを介して変更することができる&lt;a href=&quot;#configure/1&quot;&gt; &lt;code&gt;configure/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="49b1a8808d4938037f08f4bb6036b797cb46526f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; protocol is responsible for converting a structure to a binary (only if applicable).</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;String.Chars&lt;/code&gt; &lt;/a&gt;プロトコルは、バイナリ（のみ該当する場合）に構造を変換するための責任があります。</target>
        </trans-unit>
        <trans-unit id="3a7cc4ed1dd3a53a3c1622be5d60a8754eb496ed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;System&lt;/code&gt;&lt;/a&gt; module also provides functions that work with time, returning different times kept by the system with support for different time units.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;System&lt;/code&gt; &lt;/a&gt;モジュールは、異なる時間単位をサポートするシステムによって維持異なる時間を返す、経時的にその仕事関数を提供します。</target>
        </trans-unit>
        <trans-unit id="cb4a8417128c99dd0f8e923027d6accff8aed84b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;System&lt;/code&gt;&lt;/a&gt; module provides functions that interact directly with the VM or the host system.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;System&lt;/code&gt; &lt;/a&gt;モジュールは、VMまたはホストシステムとの相互作用を直接機能を提供します。</target>
        </trans-unit>
        <trans-unit id="809a6d9b2839f1f30bd03fe2ee9a26d931f04222" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#escape/2&quot;&gt;&lt;code&gt;escape/2&lt;/code&gt;&lt;/a&gt; function is sometimes confused with &lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt;&lt;/a&gt;, because the above examples behave the same with both. The key difference is best illustrated when the value to escape is stored in a variable.</source>
          <target state="translated">&lt;a href=&quot;#escape/2&quot;&gt; &lt;code&gt;escape/2&lt;/code&gt; &lt;/a&gt;機能は、しばしば混同される&lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt; &lt;/a&gt;上記の例は、両方のと同じように動作するので、。主な違いは、エスケープする値が変数に格納されている場合に最もよくわかります。</target>
        </trans-unit>
        <trans-unit id="9c2c3fda2409ed0d9077f83013708c3d236d2331" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#in/2&quot;&gt;&lt;code&gt;in/2&lt;/code&gt;&lt;/a&gt; operator (as well as &lt;code&gt;not in&lt;/code&gt;) can be used in guard clauses as long as the right-hand side is a range or a list. In such cases, Elixir will expand the operator to a valid guard expression. For example:</source>
          <target state="translated">&lt;a href=&quot;#in/2&quot;&gt; &lt;code&gt;in/2&lt;/code&gt; &lt;/a&gt;演算子（ならびに &lt;code&gt;not in&lt;/code&gt; ）長い右側範囲またはリストされるとガード句で使用することができます。このような場合、Elixirは演算子を有効なガード式に展開します。例えば：</target>
        </trans-unit>
        <trans-unit id="1987eac8908bd887fd45fd0aa17e5d5cf4eae6f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#inspect/2&quot;&gt;&lt;code&gt;inspect/2&lt;/code&gt;&lt;/a&gt; function receives the entity to be inspected followed by the inspecting options, represented by the struct &lt;a href=&quot;inspect.opts&quot;&gt;&lt;code&gt;Inspect.Opts&lt;/code&gt;&lt;/a&gt;. Building of the algebra document is done with &lt;a href=&quot;inspect.algebra&quot;&gt;&lt;code&gt;Inspect.Algebra&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#inspect/2&quot;&gt; &lt;code&gt;inspect/2&lt;/code&gt; &lt;/a&gt;機能は、エンティティが構造体によって表される検査オプション、続いて検査する受信&lt;a href=&quot;inspect.opts&quot;&gt; &lt;code&gt;Inspect.Opts&lt;/code&gt; &lt;/a&gt;。代数ドキュメントの構築は、&lt;a href=&quot;inspect.algebra&quot;&gt; &lt;code&gt;Inspect.Algebra&lt;/code&gt; ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="134dffce704618fe41bc1a6ff89c996a1a5a5795" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#parse_head/2&quot;&gt;&lt;code&gt;parse_head/2&lt;/code&gt;&lt;/a&gt; function is an alternative to &lt;a href=&quot;#parse/2&quot;&gt;&lt;code&gt;parse/2&lt;/code&gt;&lt;/a&gt; which stops parsing as soon as it finds a value that is not a switch nor a value for a previous switch.</source>
          <target state="translated">&lt;a href=&quot;#parse_head/2&quot;&gt; &lt;code&gt;parse_head/2&lt;/code&gt; &lt;/a&gt;機能は、代替であります&lt;a href=&quot;#parse/2&quot;&gt; &lt;code&gt;parse/2&lt;/code&gt; &lt;/a&gt;がスイッチも前スイッチの値ではない値を求めるとすぐに解析を停止します。</target>
        </trans-unit>
        <trans-unit id="697f7c6714240908cebb2f84042a4676fb351582" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#receive/1&quot;&gt;&lt;code&gt;receive/1&lt;/code&gt;&lt;/a&gt; special form handles variables exactly as the &lt;a href=&quot;#case/2&quot;&gt;&lt;code&gt;case/2&lt;/code&gt;&lt;/a&gt; special macro. For more information, check the docs for &lt;a href=&quot;#case/2&quot;&gt;&lt;code&gt;case/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#receive/1&quot;&gt; &lt;code&gt;receive/1&lt;/code&gt; &lt;/a&gt;とおりに特殊な形ハンドル変数を&lt;a href=&quot;#case/2&quot;&gt; &lt;code&gt;case/2&lt;/code&gt; &lt;/a&gt;特殊マクロ。詳細については、ドキュメントを確認してください&lt;a href=&quot;#case/2&quot;&gt; &lt;code&gt;case/2&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e0a73aff6dd1644a4fec2f0cc2e5b4cbf67e226d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#run/1&quot;&gt;&lt;code&gt;run/1&lt;/code&gt;&lt;/a&gt; function will receive a list of all arguments passed to the command line.</source>
          <target state="translated">の &lt;a href=&quot;#run/1&quot;&gt; &lt;code&gt;run/1&lt;/code&gt; &lt;/a&gt;関数は、コマンドラインに渡されるすべての引数のリストを受け取ります。</target>
        </trans-unit>
        <trans-unit id="1acbbf7700e430d5e8a317ed727437d8f72605c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#to_charlist/1&quot;&gt;&lt;code&gt;to_charlist/1&lt;/code&gt;&lt;/a&gt; function automatically imported by &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; invokes this protocol.</source>
          <target state="translated">&lt;a href=&quot;#to_charlist/1&quot;&gt; &lt;code&gt;to_charlist/1&lt;/code&gt; &lt;/a&gt;自動でインポート機能&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;このプロトコルを呼び出します。</target>
        </trans-unit>
        <trans-unit id="c9a742b2d1a9b66bf0c1dce63c60e9a1472deab1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#to_string/1&quot;&gt;&lt;code&gt;to_string/1&lt;/code&gt;&lt;/a&gt; function automatically imported by &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; invokes this protocol. String interpolation also invokes &lt;a href=&quot;#to_string/1&quot;&gt;&lt;code&gt;to_string/1&lt;/code&gt;&lt;/a&gt; in its arguments. For example, &lt;code&gt;&quot;foo#{bar}&quot;&lt;/code&gt; is the same as &lt;code&gt;&quot;foo&quot; &amp;lt;&amp;gt; to_string(bar)&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#to_string/1&quot;&gt; &lt;code&gt;to_string/1&lt;/code&gt; &lt;/a&gt;によって自動的にインポート機能&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;このプロトコルを呼び出します。文字列補間は、引数で&lt;a href=&quot;#to_string/1&quot;&gt; &lt;code&gt;to_string/1&lt;/code&gt; &lt;/a&gt;も呼び出します。たとえば、 &lt;code&gt;&quot;foo#{bar}&quot;&lt;/code&gt; は &lt;code&gt;&quot;foo&quot; &amp;lt;&amp;gt; to_string(bar)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="99cfcb046ece84f36691d25008fe9a0f03a6c335" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;access&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module ships with many convenience accessor functions, like the &lt;code&gt;all&lt;/code&gt; anonymous function defined above. See &lt;a href=&quot;access#all/0&quot;&gt;&lt;code&gt;Access.all/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;access#key/2&quot;&gt;&lt;code&gt;Access.key/2&lt;/code&gt;&lt;/a&gt;, and others as examples.</source>
          <target state="translated">&lt;a href=&quot;access&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt;のような多くの便利なアクセッサ関数とモジュールの船、 &lt;code&gt;all&lt;/code&gt; 上記で定義された匿名関数。例として&lt;a href=&quot;access#all/0&quot;&gt; &lt;code&gt;Access.all/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;access#key/2&quot;&gt; &lt;code&gt;Access.key/2&lt;/code&gt; &lt;/a&gt;などを参照してください。</target>
        </trans-unit>
        <trans-unit id="bf10aa8724a5861c9b7609f06466ac0092733d78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;enum#into/2&quot;&gt;&lt;code&gt;Enum.into/2&lt;/code&gt;&lt;/a&gt; function uses this protocol to insert an enumerable into a collection:</source>
          <target state="translated">&lt;a href=&quot;enum#into/2&quot;&gt; &lt;code&gt;Enum.into/2&lt;/code&gt; &lt;/a&gt;機能は、コレクションに列挙を挿入するには、このプロトコルを使用しています。</target>
        </trans-unit>
        <trans-unit id="fa114b12b62761d046798dab8cfd3d0e25686da7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol is useful to take values out of a collection. In order to support a wide range of values, the functions provided by the &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol do not keep shape. For example, passing a map to &lt;a href=&quot;enum#map/2&quot;&gt;&lt;code&gt;Enum.map/2&lt;/code&gt;&lt;/a&gt; always returns a list.</source>
          <target state="translated">&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコルは、コレクションから値を取ることに有用です。広範囲の値をサポートするために、&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;プロトコルによって提供される関数は形を保持しません。たとえば、地図を&lt;a href=&quot;enum#map/2&quot;&gt; &lt;code&gt;Enum.map/2&lt;/code&gt; に&lt;/a&gt;常にリストが返されます。</target>
        </trans-unit>
        <trans-unit id="c6e919949e1cc4c7055aecf80d424e6c7c8e1be6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;exunit.assertions&quot;&gt;&lt;code&gt;ExUnit.Assertions&lt;/code&gt;&lt;/a&gt; module contains a set of macros to generate assertions with appropriate error messages.</source>
          <target state="translated">&lt;a href=&quot;exunit.assertions&quot;&gt; &lt;code&gt;ExUnit.Assertions&lt;/code&gt; &lt;/a&gt;モジュールは、適切なエラーメッセージとアサーションを生成するために、マクロのセットが含まれています。</target>
        </trans-unit>
        <trans-unit id="e06ff54ee1b695829bf1293f395bfa9eaf00995b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://erlang.org/doc/man/queue.html&quot;&gt;&lt;code&gt;queue&lt;/code&gt; is a data structure&lt;/a&gt; that implements (double-ended) FIFO (first-in first-out) queues efficiently:</source>
          <target state="translated">&lt;a href=&quot;http://erlang.org/doc/man/queue.html&quot;&gt; &lt;code&gt;queue&lt;/code&gt; データ構造であり、&lt;/a&gt;実装（ダブルエンド）FIFO（先入れ先出し）キューを効率的ということ：</target>
        </trans-unit>
        <trans-unit id="bdd1437c3341d1c07273b3f627a96d773e38e418" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt; module&lt;/a&gt;, which we&amp;rsquo;re going to see in the next chapter, already provides many conveniences for working with lists. For instance, the examples above could be written as:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; モジュール&lt;/a&gt;我々は次の章で見に行っている、すでにリストを操作するための多くの利便性を提供します。たとえば、上記の例は次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="a8c7834fd0c261cc1b5f7ce8f49f4c14a50c74c8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/File.html&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; module contains functions that allow us to open files as IO devices. By default, files are opened in binary mode, which requires developers to use the specific &lt;code&gt;IO.binread/2&lt;/code&gt; and &lt;code&gt;IO.binwrite/2&lt;/code&gt; functions from the &lt;code&gt;IO&lt;/code&gt; module:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/File.html&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;モジュールは、私たちはIOデバイスとしてファイルを開くことができるような機能が含まれています。デフォルトでは、ファイルはバイナリモードで開かれるため、開発者は特定の &lt;code&gt;IO.binread/2&lt;/code&gt; および &lt;code&gt;IO.binwrite/2&lt;/code&gt; 関数を &lt;code&gt;IO&lt;/code&gt; モジュールます。</target>
        </trans-unit>
        <trans-unit id="f10e5258e9f652f477ba9a6f2a826f10009c524a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module is the main mechanism in Elixir for reading and writing to standard input/output (&lt;code&gt;:stdio&lt;/code&gt;), standard error (&lt;code&gt;:stderr&lt;/code&gt;), files, and other IO devices. Usage of the module is pretty straightforward:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt; &lt;code&gt;IO&lt;/code&gt; の&lt;/a&gt;（モジュールは標準入力/出力への読み書きのためにエリクサーにおける主要なメカニズムである &lt;code&gt;:stdio&lt;/code&gt; ）、標準誤差（ &lt;code&gt;:stderr&lt;/code&gt; ）、ファイル、および他のIOデバイス。モジュールの使い方はかなり簡単です：</target>
        </trans-unit>
        <trans-unit id="0707ff13aefb15f3954d547b10f3f7c1336b24c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;String module&lt;/a&gt; contains a bunch of functions that operate on strings as defined in the Unicode standard:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;文字列のモジュール&lt;/a&gt; Unicode標準で定義された文字列を操作する関数の束が含まれています。</target>
        </trans-unit>
        <trans-unit id="67af9d3d80d8598be47bff2ebf254dbbb32a0636" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.New.html&quot;&gt;&lt;code&gt;mix new&lt;/code&gt;&lt;/a&gt; command also allows the &lt;code&gt;--sup&lt;/code&gt; option to scaffold an application with a supervision tree out of the box. We talk about supervision trees later on when discussing one of the common anti-patterns when writing libraries.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.New.html&quot;&gt; &lt;code&gt;mix new&lt;/code&gt; &lt;/a&gt;コマンドも可能に &lt;code&gt;--sup&lt;/code&gt; をボックスのうち監督の木を使用してアプリケーションを足場にオプションを選択します。ライブラリを作成するときに一般的なアンチパターンの1つについて説明するときに、監視ツリーについて後で説明します。</target>
        </trans-unit>
        <trans-unit id="08414f62e4bbf9fd4d3ea08bc5b82b4c8e08abc1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;inspect&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol can be derived to hide certain fields from structs, so they don't show up in logs, inspects and similar. See the &quot;Deriving&quot; section of the documentation of the &lt;a href=&quot;inspect&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol for more information.</source>
          <target state="translated">&lt;a href=&quot;inspect&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;、彼らがログインすると、検査し、類似したに表示されませんので、プロトコルは、構造体から特定のフィールドを非表示に導出することができます。詳細については、&lt;a href=&quot;inspect&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;プロトコルのドキュメントの「派生」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="40361add3dfacd3a82f9de048a333c39b479ae30" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;inspect.algebra#concat/1&quot;&gt;&lt;code&gt;concat/1&lt;/code&gt;&lt;/a&gt; function comes from &lt;a href=&quot;inspect.algebra&quot;&gt;&lt;code&gt;Inspect.Algebra&lt;/code&gt;&lt;/a&gt; and it concatenates algebra documents together. In the example above, it is concatenating the string &lt;code&gt;&quot;MapSet&amp;lt;&quot;&lt;/code&gt; (all strings are valid algebra documents that keep their formatting when pretty printed), the document returned by &lt;a href=&quot;inspect.algebra#to_doc/2&quot;&gt;&lt;code&gt;Inspect.Algebra.to_doc/2&lt;/code&gt;&lt;/a&gt; and the other string &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;inspect.algebra#concat/1&quot;&gt; &lt;code&gt;concat/1&lt;/code&gt; &lt;/a&gt;関数は、から来て&lt;a href=&quot;inspect.algebra&quot;&gt; &lt;code&gt;Inspect.Algebra&lt;/code&gt; &lt;/a&gt;、それは一緒に代数書類を連結します。上記の例では、文字列 &lt;code&gt;&quot;MapSet&amp;lt;&quot;&lt;/code&gt; （すべての文字列は、きれいに印刷されてもフォーマットを維持する有効な代数ドキュメントです）、&lt;a href=&quot;inspect.algebra#to_doc/2&quot;&gt; &lt;code&gt;Inspect.Algebra.to_doc/2&lt;/code&gt; &lt;/a&gt;によって返されるドキュメント、および他の文字列 &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; を連結しています。。</target>
        </trans-unit>
        <trans-unit id="3e499fed5d9e082220ab4665ee83930202fbc216" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module provides streams, that are both &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;collectable&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt;, here is an upcase echo server using comprehensions:</source>
          <target state="translated">&lt;a href=&quot;io&quot;&gt; &lt;code&gt;IO&lt;/code&gt; の&lt;/a&gt;モジュールが共に流れ、提供&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;collectable&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt;、ここで内包を用いUPCASEエコーサーバです。</target>
        </trans-unit>
        <trans-unit id="ef991dbc6590a70e7dc7792c1502faa5b82544ac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;logger#info/2&quot;&gt;&lt;code&gt;Logger.info/2&lt;/code&gt;&lt;/a&gt; macro emits the provided message at the &lt;code&gt;:info&lt;/code&gt; level. Note the arguments given to &lt;a href=&quot;#info/2&quot;&gt;&lt;code&gt;info/2&lt;/code&gt;&lt;/a&gt; will only be evaluated if a message is logged. For instance, if the Logger level is set to &lt;code&gt;:warn&lt;/code&gt;, &lt;code&gt;:info&lt;/code&gt; messages are never logged and therefore the arguments given above won't even be executed.</source>
          <target state="translated">&lt;a href=&quot;logger#info/2&quot;&gt; &lt;code&gt;Logger.info/2&lt;/code&gt; の&lt;/a&gt;マクロは、で提供されたメッセージを発する &lt;code&gt;:info&lt;/code&gt; レベル。&lt;a href=&quot;#info/2&quot;&gt; &lt;code&gt;info/2&lt;/code&gt; に&lt;/a&gt;指定された引数は、メッセージがログに記録された場合にのみ評価されることに注意してください。たとえば、ロガーレベルが &lt;code&gt;:warn&lt;/code&gt; に設定されている場合、 &lt;code&gt;:info&lt;/code&gt; メッセージはログに記録されないため、上記の引数は実行されません。</target>
        </trans-unit>
        <trans-unit id="3fb892be769329b47a3a72fea685384027a625eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module was designed to handle mostly static children that are started in the given order when the supervisor starts. A &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; starts with no children. Instead, children are started on demand via &lt;a href=&quot;#start_child/2&quot;&gt;&lt;code&gt;start_child/2&lt;/code&gt;&lt;/a&gt;. When a dynamic supervisor terminates, all children are shut down at the same time, with no guarantee of ordering.</source>
          <target state="translated">&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールは、スーパーバイザが開始したときに与えられた順序で開始され、主に静的な子供を扱うように設計されました。A &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; は&lt;/a&gt;子供がいないから始まります。代わりに、子は&lt;a href=&quot;#start_child/2&quot;&gt; &lt;code&gt;start_child/2&lt;/code&gt; を&lt;/a&gt;介してオンデマンドで開始されます。ダイナミックスーパーバイザが終了すると、すべての子が同時にシャットダウンされ、順序の保証はありません。</target>
        </trans-unit>
        <trans-unit id="26a12a273dc85b3ddb0a7cf7190ec7cccb61c0d5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;task.supervisor&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; module allows developers to dynamically create multiple supervised tasks.</source>
          <target state="translated">&lt;a href=&quot;task.supervisor&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; &lt;/a&gt;モジュールは、開発者が動的に複数の教師タスクを作成することができます。</target>
        </trans-unit>
        <trans-unit id="9f3bcdc6b0dacd5812de01049f85ba71ec9d986e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;1&lt;/code&gt; represents the first argument passed into the function. &lt;code&gt;&amp;amp;(&amp;amp;1 + 1)&lt;/code&gt; above is exactly the same as &lt;code&gt;fn x -&amp;gt; x + 1 end&lt;/code&gt;. The syntax above is useful for short function definitions.</source>
          <target state="translated">&lt;code&gt;&amp;amp;1&lt;/code&gt; 関数に渡される最初の引数を表します。 &lt;code&gt;&amp;amp;(&amp;amp;1 + 1)&lt;/code&gt; は、 &lt;code&gt;fn x -&amp;gt; x + 1 end&lt;/code&gt; とまったく同じです。上記の構文は、短い関数定義に役立ちます。</target>
        </trans-unit>
        <trans-unit id="462dea57799a704e8bdaa1d60d5f41548cf0ff70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;&lt;/code&gt; operator can be used with more complex expressions:</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; 演算子より複雑な式で使用することができます。</target>
        </trans-unit>
        <trans-unit id="8324a31beed435619f352d82babacf78e2ffed56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--source&lt;/code&gt; and &lt;code&gt;--sink&lt;/code&gt; options are particularly useful when trying to understand how the modules in a particular file interact with the whole system. You can combine those options with &lt;code&gt;--label&lt;/code&gt; and &lt;code&gt;--only-nodes&lt;/code&gt; to get all files that exhibit a certain property, for example:</source>
          <target state="translated">&lt;code&gt;--source&lt;/code&gt; と &lt;code&gt;--sink&lt;/code&gt; システム全体で特定のファイルの相互作用でどのようにモジュールを理解しようとする場合のオプションは特に有用です。これらのオプションを &lt;code&gt;--label&lt;/code&gt; および &lt;code&gt;--only-nodes&lt;/code&gt; と組み合わせて、特定のプロパティを示すすべてのファイルを取得できます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="27914fb6ca74f78b539d08d503dae1d70d9876c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--stale&lt;/code&gt; command line option attempts to run only those test files which reference modules that have changed since the last time you ran this task with &lt;code&gt;--stale&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--stale&lt;/code&gt; あなたがこのタスクを実行した最後の時間以降に変更された参照モジュールのみのテストファイルを実行するためのコマンドラインオプションの試み &lt;code&gt;--stale&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="70c59bbd77397d77a76b99b62c09d5b35df96a8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--trace&lt;/code&gt; option is useful when your tests are deadlocking or there are race conditions, as it runs all tests synchronously (&lt;code&gt;async: true&lt;/code&gt; has no effect) and shows detailed information about each test. You may see one or two intermittent failures:</source>
          <target state="translated">&lt;code&gt;--trace&lt;/code&gt; それは同期（すべてのテストを実行してオプションでは、あなたのテストがデッドロックされているか、競合状態がある場合に便利です &lt;code&gt;async: true&lt;/code&gt; やショーが各テストに関する詳細情報を何の効果もありません）。1つまたは2つの断続的な障害が発生する場合があります。</target>
        </trans-unit>
        <trans-unit id="bac163fa8c2566f186b54fd07de5c6d65f93af5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:ascii&lt;/code&gt; mode ignores Unicode characters and provides a more performant implementation when you know the string contains only ASCII characters:</source>
          <target state="translated">&lt;code&gt;:ascii&lt;/code&gt; モードでは、Unicode文字を無視して、文字列はASCII文字のみが含まれている知っているときよりパフォーマンスの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="05564ea628704e49dd4cc09651f569d44c1a82ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:crypto&lt;/code&gt; module is not part of the Erlang standard library, but is included with the Erlang distribution. This means you must list &lt;code&gt;:crypto&lt;/code&gt; in your project&amp;rsquo;s applications list whenever you use it. To do this, edit your &lt;code&gt;mix.exs&lt;/code&gt; file to include:</source>
          <target state="translated">&lt;code&gt;:crypto&lt;/code&gt; モジュールは、Erlangの標準ライブラリの一部ではありませんが、Erlangのディストリビューションに含まれています。つまり、使用するときは常に、プロジェクトのアプリケーションリストに &lt;code&gt;:crypto&lt;/code&gt; をリストする必要があります。これを行うには、 &lt;code&gt;mix.exs&lt;/code&gt; ファイルを編集して以下を含めます。</target>
        </trans-unit>
        <trans-unit id="add3cf115e3a7915716bd93a5b79e1744ef2d173" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:fd&lt;/code&gt; name option allows developers to access &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; file descriptors used by the Erlang VM. You would use those only if you are reimplementing core part of the Runtime System, such as the &lt;code&gt;:user&lt;/code&gt; and &lt;code&gt;:shell&lt;/code&gt; processes.</source>
          <target state="translated">&lt;code&gt;:fd&lt;/code&gt; nameオプションは、アクセスに開発を可能 &lt;code&gt;in&lt;/code&gt; し、 &lt;code&gt;out&lt;/code&gt; ErlangのVMが使用するファイルディスクリプタ。これらは、 &lt;code&gt;:user&lt;/code&gt; プロセスや &lt;code&gt;:shell&lt;/code&gt; プロセスなど、ランタイムシステムのコア部分を再実装する場合にのみ使用します。</target>
        </trans-unit>
        <trans-unit id="3f6ac7a8b41e26b0d52e88d330fed22cf2cc2f20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:into&lt;/code&gt; and &lt;code&gt;:uniq&lt;/code&gt; options</source>
          <target state="translated">&lt;code&gt;:into&lt;/code&gt; と &lt;code&gt;:uniq&lt;/code&gt; のオプション</target>
        </trans-unit>
        <trans-unit id="0211bc3942dfba08cb46ef94332394518116ea6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:into&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;:into&lt;/code&gt; オプション</target>
        </trans-unit>
        <trans-unit id="a3988e2dcd8f368dd88c8ea1b7ec2bcd3100e56a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:label&lt;/code&gt; option is especially useful with pipelines:</source>
          <target state="translated">&lt;code&gt;:label&lt;/code&gt; オプションは、パイプラインで特に便利です。</target>
        </trans-unit>
        <trans-unit id="d03df649244dc7c63287f31c15a54de9bf6e2182" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:mod&lt;/code&gt; option specifies the &amp;ldquo;application callback module&amp;rdquo;, followed by the arguments to be passed on application start. The application callback module can be any module that implements the &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;Application&lt;/a&gt; behaviour.</source>
          <target state="translated">&lt;code&gt;:mod&lt;/code&gt; オプションは、アプリケーションの起動時に渡される引数が続く「アプリケーションのコールバックモジュール」を指定します。アプリケーションコールバックモジュールは、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;アプリケーションの&lt;/a&gt;動作を実装する任意のモジュールです。</target>
        </trans-unit>
        <trans-unit id="ebc92fad8b6ff75a2a9c584dbe63fcee1353d021" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; option can also be given in order to register a supervisor name, the supported values are described in the &quot;Name registration&quot; section in the &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; module docs.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; オプションもスーパーバイザ名を登録するために与えることができ、サポートされる値は、で「名前登録」に記載されている&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; の&lt;/a&gt;モジュールのドキュメント。</target>
        </trans-unit>
        <trans-unit id="9dd616361d3877df539a2d092f8aadb9d1c83008" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; option can also be used to register a supervisor name. The supported values are described under the &quot;Name registration&quot; section in the &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; module docs.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; オプションは、スーパーバイザ名を登録するために使用することができます。サポートされる値は、&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;モジュールドキュメントの「名前の登録」セクションで説明されています。</target>
        </trans-unit>
        <trans-unit id="0be059e0f52bc117f0d9ac535f0ebaba535ffdbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; option is used for registration as described in the module documentation.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; モジュールのマニュアルに記載されているオプションは、登録のために使用されています。</target>
        </trans-unit>
        <trans-unit id="9ae6a790ebfb15d6c60e22c6003dc079f27e1350" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:persistent&lt;/code&gt; option can be set to &lt;code&gt;true&lt;/code&gt; when there is a need to guarantee parameters set with this function will not be overridden by the ones defined in the application resource file on load. This means persistent values will stick after the application is loaded and also on application reload.</source>
          <target state="translated">&lt;code&gt;:persistent&lt;/code&gt; オプションは次のように設定することができ &lt;code&gt;true&lt;/code&gt; 負荷上のアプリケーションリソースファイルで定義されたもので上書きされなくなります。この機能で設定した保証パラメータに必要がある場合。これは、アプリケーションがロードされた後、およびアプリケーションの再ロード時にも永続的な値が残ることを意味します。</target>
        </trans-unit>
        <trans-unit id="f0d1fdc494208ae6f6f718ee89ecd443e0ecaf7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:reduce&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;:reduce&lt;/code&gt; オプションを</target>
        </trans-unit>
        <trans-unit id="fb3b286cd086eae72642832fb5a362f5110c1af4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:restart&lt;/code&gt; option controls what the supervisor should consider to be a successful termination or not. If the termination is successful, the supervisor won't restart the child. If the child process crashed, the supervisor will start a new one.</source>
          <target state="translated">&lt;code&gt;:restart&lt;/code&gt; スーパーバイザが正常終了かどうかであることを考慮しなければならない事項を制御します。終了が成功した場合、スーパーバイザは子を再起動しません。子プロセスがクラッシュした場合、スーパーバイザは新しいプロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="21c211e6097ddfd5bc4a9bb4945fe2497ef06a6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:second&lt;/code&gt;, &lt;code&gt;:millisecond&lt;/code&gt;, &lt;code&gt;:microsecond&lt;/code&gt; and &lt;code&gt;:nanosecond&lt;/code&gt; time units controls the return value of the functions that accept a time unit.</source>
          <target state="translated">&lt;code&gt;:second&lt;/code&gt; 、 &lt;code&gt;:millisecond&lt;/code&gt; 、 &lt;code&gt;:microsecond&lt;/code&gt; および &lt;code&gt;:nanosecond&lt;/code&gt; 時間単位時間単位を受け入れる関数の戻り値を制御します。</target>
        </trans-unit>
        <trans-unit id="1fc77c6e40a992f998c561f03446c6642ec346ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:spawn&lt;/code&gt; tuple receives a binary that is going to be executed as a full invocation. For example, we can use it to invoke &quot;echo hello&quot; directly:</source>
          <target state="translated">&lt;code&gt;:spawn&lt;/code&gt; タプルは、完全な呼び出しとして実行されようとしているバイナリを受け取ります。たとえば、これを使用して「echo hello」を直接呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="7b93bb4d3ff18560e52b37ae6c18a308889c8bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:static_atom_encoder&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;:static_atom_encoder&lt;/code&gt; の機能</target>
        </trans-unit>
        <trans-unit id="7852e9b0f6e5ea07cd2dd1ac64030694b4b9d2d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:strategy&lt;/code&gt; is a required option and the currently supported value is &lt;code&gt;:one_for_one&lt;/code&gt;. The remaining options can be found in the &lt;a href=&quot;#init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; docs.</source>
          <target state="translated">&lt;code&gt;:strategy&lt;/code&gt; 必要なオプションであり、現在サポートされている値がある &lt;code&gt;:one_for_one&lt;/code&gt; 。残りのオプションは&lt;a href=&quot;#init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;ドキュメントにあります。</target>
        </trans-unit>
        <trans-unit id="3ecf2c76d0e93dbfb5af69dd0e723a8fce1f3ba3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:strategy&lt;/code&gt; option is required and by default a maximum of 3 restarts is allowed within 5 seconds. Check the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for a detailed description of the available strategies.</source>
          <target state="translated">&lt;code&gt;:strategy&lt;/code&gt; オプションが必要とされており、デフォルトで3回の再起動の最大は5秒以内に許可されています。利用可能な戦略の詳細については、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールを確認してください。</target>
        </trans-unit>
        <trans-unit id="4318a8c81e458ee0b9cf77340dadbaf79a290499" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:strategy&lt;/code&gt; option is required and by default a maximum of 3 restarts is allowed within 5 seconds. Check the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for a detailed description of the available strategies.</source>
          <target state="translated">&lt;code&gt;:strategy&lt;/code&gt; オプションが必要とされており、デフォルトで3回の再起動の最大は5秒以内に許可されています。利用可能な戦略の詳細については、&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;モジュールを確認してください。</target>
        </trans-unit>
        <trans-unit id="6fd3d939dbec7e219780c6a3622d4fe572215853" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:test_coverage&lt;/code&gt; configuration accepts the following options:</source>
          <target state="translated">&lt;code&gt;:test_coverage&lt;/code&gt; の構成は以下のオプションを受け付けます。</target>
        </trans-unit>
        <trans-unit id="ad9818925ace018f87e1927334e33ca1a365e0b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:test_type&lt;/code&gt; tag is automatically set by ExUnit, but is &lt;em&gt;not&lt;/em&gt; reserved. This tag is available for users to customize if they desire.</source>
          <target state="translated">&lt;code&gt;:test_type&lt;/code&gt; のタグが自動的にExUnitによって設定されますが、されて&lt;em&gt;いない&lt;/em&gt;予約済み。このタグは、ユーザーが必要に応じてカスタマイズできるようになっています。</target>
        </trans-unit>
        <trans-unit id="0bb936c2d2f36ac2f8066e21c586a6fb2a08b1b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;/code&gt; macro compiles to a call to this function. For example, the following code:</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; この関数の呼び出しにマクロをコンパイルします。たとえば、次のコード：</target>
        </trans-unit>
        <trans-unit id="5131f63d4a847e5310d4b0da9f690cbf2653c391" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@compile&lt;/code&gt; attribute accepts different options that are used by both Elixir and Erlang compilers. Some of the common use cases are documented below:</source>
          <target state="translated">&lt;code&gt;@compile&lt;/code&gt; 属性は、両方のElixirとErlangのコンパイラで使用されているさまざまなオプションを受け付けます。一般的な使用例の一部を以下に示します。</target>
        </trans-unit>
        <trans-unit id="9c96b72a2b5229c84ff37173dda7b65a784fe244" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@doc&lt;/code&gt; annotation immediately preceding &lt;code&gt;use Supervisor&lt;/code&gt; will be attached to the generated &lt;code&gt;child_spec/1&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;use Supervisor&lt;/code&gt; 直前の &lt;code&gt;@doc&lt;/code&gt; アノテーションは、生成された &lt;code&gt;child_spec/1&lt;/code&gt; 関数に添付されます。</target>
        </trans-unit>
        <trans-unit id="c2548a73a793d075044328d72e23f487f2153196" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@moduledoc&lt;/code&gt; attribute is used to add documentation to the module. &lt;code&gt;@doc&lt;/code&gt; is used before a function to provide documentation for it. Besides the attributes above, &lt;code&gt;@typedoc&lt;/code&gt; can also be used to attach documentation to types defined as part of typespecs. Elixir also allows metadata to be attached to documentation, by passing a keyword list to &lt;code&gt;@doc&lt;/code&gt; and friends.</source>
          <target state="translated">&lt;code&gt;@moduledoc&lt;/code&gt; の属性は、モジュールにドキュメントを追加するために使用されます。 &lt;code&gt;@doc&lt;/code&gt; は、その前にドキュメントを提供するために使用されます。上記の属性の他に、 &lt;code&gt;@typedoc&lt;/code&gt; を使用して、typespecの一部として定義された型にドキュメントを添付することもできます。Elixirでは、 &lt;code&gt;@doc&lt;/code&gt; や友達にキーワードリストを渡すことで、ドキュメントにメタデータを添付することもできます。</target>
        </trans-unit>
        <trans-unit id="5c4c9561309d3048192c645c1b53867cd58046c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@spec&lt;/code&gt; above expresses that all types allowed to implement the given protocol are valid argument types for the given function.</source>
          <target state="translated">上記の &lt;code&gt;@spec&lt;/code&gt; は、特定のプロトコルの実装が許可されているすべての型が、特定の関数の有効な引数型であることを表しています。</target>
        </trans-unit>
        <trans-unit id="4ecf8bb424c804cabf2a64179dad99d91c08aa50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@type&lt;/code&gt;, &lt;code&gt;@typep&lt;/code&gt;, and &lt;code&gt;@opaque&lt;/code&gt; module attributes can be used to define new types:</source>
          <target state="translated">&lt;code&gt;@type&lt;/code&gt; 、 &lt;code&gt;@typep&lt;/code&gt; 、および &lt;code&gt;@opaque&lt;/code&gt; モジュール属性は新しい型を定義するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="923172e1b194c31095f6b50cc3fcf7cd6864f7d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@typedoc&lt;/code&gt; directive, similarly to the &lt;code&gt;@doc&lt;/code&gt; and &lt;code&gt;@moduledoc&lt;/code&gt; directives, is used to document custom types.</source>
          <target state="translated">&lt;code&gt;@typedoc&lt;/code&gt; のディレクティブは、同様に &lt;code&gt;@doc&lt;/code&gt; と &lt;code&gt;@moduledoc&lt;/code&gt; ディレクティブ、カスタムタイプを文書化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a63341783e3511427fe146f8a19ffd92af29382f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Agent.update/3&lt;/code&gt; function accepts as second argument any function that receives one argument and returns a value:</source>
          <target state="translated">&lt;code&gt;Agent.update/3&lt;/code&gt; 機能は、2番目の引数として一つの引数を受け取り、値を返す任意の機能を受け付け。</target>
        </trans-unit>
        <trans-unit id="7a655503d2990c75edcb4c8b8a481ab364d1c5d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Config&lt;/code&gt; module in Elixir was introduced in v1.9 as a replacement to &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Config.html&quot;&gt;&lt;code&gt;Mix.Config&lt;/code&gt;&lt;/a&gt;, which was specific to Mix and has been deprecated.</source>
          <target state="translated">&lt;code&gt;Config&lt;/code&gt; エリクサーにおけるモジュールの代替としてV1.9で導入された&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Config.html&quot;&gt; &lt;code&gt;Mix.Config&lt;/code&gt; &lt;/a&gt;ミックスに特異的であり、廃止されました。</target>
        </trans-unit>
        <trans-unit id="e27fe58053aba859d0bb7d011fc28980f6e9c181" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Enum&lt;/code&gt; module provides a huge range of functions to transform, sort, group, filter and retrieve items from enumerables. It is one of the modules developers use frequently in their Elixir code.</source>
          <target state="translated">&lt;code&gt;Enum&lt;/code&gt; モジュールは、変換、ソート、グループ、フィルタおよびenumerablesからアイテムを取得するための機能の巨大な範囲を提供します。これは、開発者がElixirコードで頻繁に使用するモジュールの1つです。</target>
        </trans-unit>
        <trans-unit id="1d4fbc9808f8e26c00c234d6fa1459002dc186de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;File&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; モジュール</target>
        </trans-unit>
        <trans-unit id="e840334dc33e37be12e55cfa6bc3b7e8c169342a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IO&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; モジュール</target>
        </trans-unit>
        <trans-unit id="ef38704061a34457ddb379b41a2b80be49207a37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Inspect&lt;/code&gt; protocol is the protocol used to transform any data structure into a readable textual representation. This is what tools like IEx use to print results:</source>
          <target state="translated">&lt;code&gt;Inspect&lt;/code&gt; のプロトコルは、読みやすいテキスト表現に任意のデータ構造を変換するために使用されるプロトコルです。これは、IExのようなツールが結果を印刷するために使用するものです。</target>
        </trans-unit>
        <trans-unit id="867c539e4d21456c5aa36b2d220867f9a7212a1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;KV.RouterTest&lt;/code&gt; truly has to be distributed, as its purpose is to test the distribution. However, the test in &lt;code&gt;KVServerTest&lt;/code&gt; was only made distributed because we had a hardcoded distributed routing table, which we couldn&amp;rsquo;t configure, but now we can!</source>
          <target state="translated">&lt;code&gt;KV.RouterTest&lt;/code&gt; は本当にその目的は、配布をテストすることであるように、分散されなければなりません。ただし、 &lt;code&gt;KVServerTest&lt;/code&gt; でのテストは、ハードコーディングされた分散ルーティングテーブルがあり、構成できなかったために分散されました。</target>
        </trans-unit>
        <trans-unit id="98cbbae17162ecee1b3987ff4642880f4c337dca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyApp&lt;/code&gt; module given to &lt;code&gt;:mod&lt;/code&gt; needs to implement the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; behaviour. This can be done by putting &lt;code&gt;use Application&lt;/code&gt; in that module and implementing the &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; callback, for example:</source>
          <target state="translated">&lt;code&gt;MyApp&lt;/code&gt; に与えられたモジュール &lt;code&gt;:mod&lt;/code&gt; ニーズが実装する&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt;の挙動を。これを行うに &lt;code&gt;use Application&lt;/code&gt; 、そのモジュールにuse Applicationを配置し、&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;コールバックを実装します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="eb345c09eb20de824e9541a17d7bf17e012b4abc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; モジュール</target>
        </trans-unit>
        <trans-unit id="c334edecfba6073bd7010af2e40dba91546f5ce7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Size&lt;/code&gt; protocol can now be implemented for &lt;code&gt;Any&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; プロトコルは、今のところ実装することができ &lt;code&gt;Any&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e306d6fedad75e62089879bf19da4f3ec37aa79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Size&lt;/code&gt; protocol expects a function called &lt;code&gt;size&lt;/code&gt; that receives one argument (the data structure we want to know the size of) to be implemented. We can now implement this protocol for the data structures that would have a compliant implementation:</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; プロトコルは、呼び出された関数を期待 &lt;code&gt;size&lt;/code&gt; に実装される1つの引数（私たちはの大きさを知りたいデータ構造）を受信します。これで、準拠した実装を持つデータ構造にこのプロトコルを実装できます。</target>
        </trans-unit>
        <trans-unit id="db5fefc34081f3a8d848c3114be6230d0555c05c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;User switch command&lt;/code&gt; can also be used to terminate an existing session, for example when the evaluator gets stuck in an infinite loop or when you are stuck typing an expression:</source>
          <target state="translated">&lt;code&gt;User switch command&lt;/code&gt; また、評価者が無限ループで立ち往生場合や、たとえば、既存のセッションを終了するために使用することができますあなたが立ち往生タイピング表現されているとき：</target>
        </trans-unit>
        <trans-unit id="7f41e81f3757a1435933e38bc5bfe28881ade0a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;User switch command&lt;/code&gt; menu also allows developers to connect to remote shells using the &lt;code&gt;r&lt;/code&gt; command. A topic which we will discuss next.</source>
          <target state="translated">&lt;code&gt;User switch command&lt;/code&gt; メニューには、開発者が使用してリモートシェルに接続することができます &lt;code&gt;r&lt;/code&gt; コマンドを。次に説明するトピック。</target>
        </trans-unit>
        <trans-unit id="57c1d154dd951f8282bee6bdc6065d02cb12023d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[head | tail]&lt;/code&gt; format is not only used on pattern matching but also for prepending items to a list:</source>
          <target state="translated">&lt;code&gt;[head | tail]&lt;/code&gt; 形式は、パターンマッチングで使用されるだけでなく、リストの前に項目を追加するためにも使用されます。</target>
        </trans-unit>
        <trans-unit id="fd1f98818191e0504c9112dc757cd520cf41584f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;after&lt;/code&gt; clause can be specified even if there are no match clauses. The timeout value given to &lt;code&gt;after&lt;/code&gt; can be any expression evaluating to one of the allowed values:</source>
          <target state="translated">&lt;code&gt;after&lt;/code&gt; 句は一致句がない場合でも指定することができます。 &lt;code&gt;after&lt;/code&gt; に与えるタイムアウト値は、許容値の1つに評価される任意の式にすることができます。</target>
        </trans-unit>
        <trans-unit id="d4dc8c4ed1d9e88f4741236f5ec92ee315c9d28b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;after&lt;/code&gt; clause will be executed regardless of whether or not the tried block succeeds. Note, however, that if a linked process exits, this process will exit and the &lt;code&gt;after&lt;/code&gt; clause will not get run. Thus &lt;code&gt;after&lt;/code&gt; provides only a soft guarantee. Luckily, files in Elixir are also linked to the current processes and therefore they will always get closed if the current process crashes, independent of the &lt;code&gt;after&lt;/code&gt; clause. You will find the same to be true for other resources like ETS tables, sockets, ports and more.</source>
          <target state="translated">&lt;code&gt;after&lt;/code&gt; 関わらず、試みブロックが成功したか否かの句が実行されます。ただし、リンクされたプロセスが終了すると、このプロセスは終了し、 &lt;code&gt;after&lt;/code&gt; 句は実行されません。したがって &lt;code&gt;after&lt;/code&gt; はソフト保証のみを提供します。幸い、Elixir内のファイルは現在のプロセスにもリンクされているため、現在のプロセスがクラッシュした場合、 &lt;code&gt;after&lt;/code&gt; 句とは関係なく、常に閉じられます。ETSテーブル、ソケット、ポートなど、他のリソースについても同様です。</target>
        </trans-unit>
        <trans-unit id="522546706684271ab3f2efbb350890fbe1239f1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assigns&lt;/code&gt; extension is useful when the number of variables required by the template is not specified at compilation time.</source>
          <target state="translated">&lt;code&gt;assigns&lt;/code&gt; テンプレートで必要な変数の数は、コンパイル時に指定されていない場合の拡張に便利です。</target>
        </trans-unit>
        <trans-unit id="20b542c507c9f404606e6129f6dd5795d8b21d4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;binding&lt;/code&gt; argument is a keyword list of variable bindings. The &lt;code&gt;opts&lt;/code&gt; argument is a keyword list of environment options.</source>
          <target state="translated">&lt;code&gt;binding&lt;/code&gt; の引数は変数バインディングのキーワードリストです。 &lt;code&gt;opts&lt;/code&gt; 引数は、環境オプションのキーワードのリストです。</target>
        </trans-unit>
        <trans-unit id="43af9d9f02afe40e3a624713286d4df36015f946" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; clause also supports &lt;code&gt;:error&lt;/code&gt; alongside &lt;code&gt;:exit&lt;/code&gt; and &lt;code&gt;:throw&lt;/code&gt; as in Erlang, although this is commonly avoided in favor of &lt;code&gt;raise&lt;/code&gt;/&lt;code&gt;rescue&lt;/code&gt; control mechanisms. One reason for this is that when catching &lt;code&gt;:error&lt;/code&gt;, the error is not automatically transformed into an Elixir error:</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 句もサポートしてい &lt;code&gt;:error&lt;/code&gt; と並ん &lt;code&gt;:exit&lt;/code&gt; と &lt;code&gt;:throw&lt;/code&gt; アーランのように、これは一般的に有利に回避されたものの &lt;code&gt;raise&lt;/code&gt; / &lt;code&gt;rescue&lt;/code&gt; 制御機構。この理由の1つは、 &lt;code&gt;:error&lt;/code&gt; をキャッチしたときに、エラーが自動的にElixirエラーに変換されないためです。</target>
        </trans-unit>
        <trans-unit id="efeea9a7b42fc8c994bd1aa663c47cac8fa65f39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; clause also supports catching exits and errors. To do that, it allows matching on both the &lt;em&gt;kind&lt;/em&gt; of the caught value as well as the value itself:</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 句は、出口とエラーのキャッチもサポートします。これを行うには、キャッチされた値の&lt;em&gt;種類&lt;/em&gt;と値自体の両方でマッチングを行うことができます。</target>
        </trans-unit>
        <trans-unit id="24330da6829bfcedd43d719e9d8c6b8cc77a9453" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; clause can be used to catch thrown values, exits, and errors.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 節がスロー値、終了し、エラーをキャッチするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="8d2397a8238f753aef5def5de423d0f7288e2079" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_spec/1&lt;/code&gt; function returns the child specification which describes how to start the process, if the process is a worker or a supervisor, if the process is temporary, transient or permanent and so on. The &lt;code&gt;child_spec/1&lt;/code&gt; function is automatically defined when we &lt;code&gt;use Agent&lt;/code&gt;, &lt;code&gt;use GenServer&lt;/code&gt;, &lt;code&gt;use Supervisor&lt;/code&gt;, etc. Let&amp;rsquo;s give it a try in the terminal with &lt;code&gt;iex -S mix&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;child_spec/1&lt;/code&gt; 関数は、プロセスが、一時的に一時的または恒久などである場合、プロセスは、労働者や監督者であれば、プロセスを開始する方法を説明した子の仕様を返します。 &lt;code&gt;child_spec/1&lt;/code&gt; 我々はときに関数を自動的に定義された &lt;code&gt;use Agent&lt;/code&gt; 、 &lt;code&gt;use GenServer&lt;/code&gt; 、 &lt;code&gt;use Supervisor&lt;/code&gt; それが持つ、端末で試してみましょうの弾力など、 &lt;code&gt;iex -S mix&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5076e4aa7f98418aab62c50ce92daa399ad148af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;datetime&lt;/code&gt; is expected to be using the ISO calendar with a year greater than or equal to 0.</source>
          <target state="translated">&lt;code&gt;datetime&lt;/code&gt; 年よりも大きいかまたは0に等しいとISOカレンダーを使用することが期待されます。</target>
        </trans-unit>
        <trans-unit id="a7470ce899e96bb2d28a9c1301a9927e4e0d7efa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;device&lt;/code&gt; is iterated by the given number of bytes or line by line if &lt;code&gt;:line&lt;/code&gt; is given. Alternatively, if &lt;code&gt;:all&lt;/code&gt; is given, then whole &lt;code&gt;device&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; 回線IFバイトまたは行の所定数によって繰り返される &lt;code&gt;:line&lt;/code&gt; 与えられています。または、 &lt;code&gt;:all&lt;/code&gt; を指定すると、 &lt;code&gt;device&lt;/code&gt; 全体が返されます。</target>
        </trans-unit>
        <trans-unit id="18926bc10cd79bf34225eb9fdce31365b1c6d418" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;device&lt;/code&gt; is iterated by the given number of bytes or line by line if &lt;code&gt;:line&lt;/code&gt; is given. This reads from the IO device as a raw binary.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; 回線IFバイトまたは行の所定数によって繰り返される &lt;code&gt;:line&lt;/code&gt; 与えられています。これは、IOデバイスからrawバイナリとして読み取ります。</target>
        </trans-unit>
        <trans-unit id="d123d0b725ad2bf46d13d4f89ecd59664f74da3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;device&lt;/code&gt; is iterated by the given number of characters or line by line if &lt;code&gt;:line&lt;/code&gt; is given.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; 回線IFによって文字やラインの所定の数で繰り返される &lt;code&gt;:line&lt;/code&gt; 与えられています。</target>
        </trans-unit>
        <trans-unit id="8d73a8d9622fd3342e8e37363bb8e4678e91ee6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;device&lt;/code&gt; is iterated by the given number of characters or line by line if &lt;code&gt;:line&lt;/code&gt; is given. Alternatively, if &lt;code&gt;:all&lt;/code&gt; is given, then whole &lt;code&gt;device&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; 回線IFによって文字やラインの所定の数で繰り返される &lt;code&gt;:line&lt;/code&gt; 与えられています。または、 &lt;code&gt;:all&lt;/code&gt; を指定すると、 &lt;code&gt;device&lt;/code&gt; 全体が返されます。</target>
        </trans-unit>
        <trans-unit id="bd6d16ba352ae3e2cd0c595b6f985cf5e9830dad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do:&lt;/code&gt; and &lt;code&gt;else:&lt;/code&gt; pairs form a keyword list! In fact, the call above is equivalent to:</source>
          <target state="translated">&lt;code&gt;do:&lt;/code&gt; そして &lt;code&gt;else:&lt;/code&gt; ペアは、キーワードリストを形成します！実際、上記の呼び出しは次と同等です。</target>
        </trans-unit>
        <trans-unit id="d7d3bd404eb61a5ace38bb205d91cc9fe9dacd66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fields&lt;/code&gt; argument is usually a keyword list with field names as atom keys and default values as corresponding values. &lt;a href=&quot;#defstruct/1&quot;&gt;&lt;code&gt;defstruct/1&lt;/code&gt;&lt;/a&gt; also supports a list of atoms as its argument: in that case, the atoms in the list will be used as the struct's field names and they will all default to &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; 引数は、通常、原子のキーと対応する値として、デフォルト値としてフィールド名とキーワードのリストです。&lt;a href=&quot;#defstruct/1&quot;&gt; &lt;code&gt;defstruct/1&lt;/code&gt; &lt;/a&gt;は、引数としてアトムのリストもサポートしています。その場合、リスト内のアトムは構造体のフィールド名として使用され、すべてデフォルトで &lt;code&gt;nil&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="5f8139dc2ac79685ca13901ec7c7e0bf0f70fcbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fun&lt;/code&gt; argument receives the value of &lt;code&gt;key&lt;/code&gt; (or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;container&lt;/code&gt;) and must return a two-element tuple &lt;code&gt;{get_value, update_value}&lt;/code&gt;: the &quot;get&quot; value &lt;code&gt;get_value&lt;/code&gt; (the retrieved value, which can be operated on before being returned) and the new value to be stored under &lt;code&gt;key&lt;/code&gt; (&lt;code&gt;update_value&lt;/code&gt;). &lt;code&gt;fun&lt;/code&gt; may also return &lt;code&gt;:pop&lt;/code&gt;, which means the current value should be removed from the container and returned.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; 引数は、の値受信 &lt;code&gt;key&lt;/code&gt; （または &lt;code&gt;nil&lt;/code&gt; を場合 &lt;code&gt;key&lt;/code&gt; 中に存在しない &lt;code&gt;container&lt;/code&gt; ）と、2つの要素のタプルを返す必要があり &lt;code&gt;{get_value, update_value}&lt;/code&gt; ：「GET」値 &lt;code&gt;get_value&lt;/code&gt; 前に動作させることができる（検索された値を、返される）、 &lt;code&gt;key&lt;/code&gt; 下に保存される新しい値（ &lt;code&gt;update_value&lt;/code&gt; ）。 &lt;code&gt;fun&lt;/code&gt; は &lt;code&gt;:pop&lt;/code&gt; を返すこともあります。つまり、現在の値をコンテナから削除して返す必要があります。</target>
        </trans-unit>
        <trans-unit id="ab82e984fadbbf0154d9f589974323854d91ddd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fun&lt;/code&gt; argument receives the value of &lt;code&gt;key&lt;/code&gt; (or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not present) and must return one of the following values:</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; 引数は、の値を受信 &lt;code&gt;key&lt;/code&gt; （または &lt;code&gt;nil&lt;/code&gt; を場合は &lt;code&gt;key&lt;/code&gt; 存在しない）と、次のいずれかの値を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="15ae90181c3399df6f57363e86986a58cdd69c58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspect/1&lt;/code&gt; function is used to convert a data structure&amp;rsquo;s internal representation into a string, typically for printing. Notice that when the &lt;code&gt;receive&lt;/code&gt; block gets executed the sender process we have spawned may already be dead, as its only instruction was to send a message.</source>
          <target state="translated">&lt;code&gt;inspect/1&lt;/code&gt; 機能は、典型的には、印刷するため、文字列にデータ構造の内部表現に変換するために使用されます。ことをお知らせ &lt;code&gt;receive&lt;/code&gt; ブロックは、その命令のみがメッセージを送信するためにあったように私たちが生み出してきた送信元プロセスはすでに、死んでも実行されます。</target>
        </trans-unit>
        <trans-unit id="b4ef8eb0a2e7ca9a57a606a0bc63171348ce16a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lib/kv.ex&lt;/code&gt; file was compiled, an application manifest named &lt;code&gt;kv.app&lt;/code&gt; was generated and &lt;a href=&quot;../protocols#protocol-consolidation&quot;&gt;all protocols were consolidated as described in the Getting Started guide&lt;/a&gt;. All compilation artifacts are placed inside the &lt;code&gt;_build&lt;/code&gt; directory using the options defined in the &lt;code&gt;mix.exs&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;lib/kv.ex&lt;/code&gt; ファイルは、コンパイルされたアプリケーションマニフェストの名前 &lt;code&gt;kv.app&lt;/code&gt; を発生させたと&lt;a href=&quot;../protocols#protocol-consolidation&quot;&gt;入門ガイドで説明したように、すべてのプロトコルが併合されました&lt;/a&gt;。すべてのコンパイルアーティファクトは、 &lt;code&gt;mix.exs&lt;/code&gt; ファイルで定義されたオプションを使用して &lt;code&gt;_build&lt;/code&gt; ディレクトリ内に配置されます。</target>
        </trans-unit>
        <trans-unit id="fb93b5ae3cb838786493785c00bd4b6f99477ad7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;line_or_bytes&lt;/code&gt; argument configures how the file is read when streaming, by &lt;code&gt;:line&lt;/code&gt; (default) or by a given number of bytes.</source>
          <target state="translated">&lt;code&gt;line_or_bytes&lt;/code&gt; により、ストリーミング時にファイルが読み込まれるか、引数設定さを &lt;code&gt;:line&lt;/code&gt; （デフォルト）または指定されたバイト数だけ。</target>
        </trans-unit>
        <trans-unit id="fe606eea5a853797263dc491beb562e8cbcc73c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;logger&lt;/code&gt; application ships as part of Elixir. We stated that our application needs it by specifying it in the &lt;code&gt;:extra_applications&lt;/code&gt; list in &lt;code&gt;mix.exs&lt;/code&gt;. See the &lt;a href=&quot;https://hexdocs.pm/logger&quot;&gt;official docs&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;logger&lt;/code&gt; エリクサーの一環として、アプリケーション船。私たちは、アプリケーションが &lt;code&gt;:extra_applications&lt;/code&gt; の：extra_applicationsリストでそれを指定することによってそれを必要とすると述べ &lt;code&gt;mix.exs&lt;/code&gt; 。詳細については、&lt;a href=&quot;https://hexdocs.pm/logger&quot;&gt;公式ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="54af23949bca7ed78e1b2333920d90c038af7ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mix test&lt;/code&gt; command also allows us to dynamically include and exclude tags. For example, we can run &lt;code&gt;$ mix test --include distributed&lt;/code&gt; to run distributed tests regardless of the value set in &lt;code&gt;test/test_helper.exs&lt;/code&gt;. We could also pass &lt;code&gt;--exclude&lt;/code&gt; to exclude a particular tag from the command line. Finally, &lt;code&gt;--only&lt;/code&gt; can be used to run only tests with a particular tag:</source>
          <target state="translated">&lt;code&gt;mix test&lt;/code&gt; コマンドも、私たちは、動的にタグを含めると除外することができます。たとえば、 &lt;code&gt;test/test_helper.exs&lt;/code&gt; に設定されている値に関係なく、 &lt;code&gt;$ mix test --include distributed&lt;/code&gt; を実行して分散テストを実行できます。 &lt;code&gt;--exclude&lt;/code&gt; を渡して、コマンドラインから特定のタグを除外することもできます。最後に、 &lt;code&gt;--only&lt;/code&gt; を使用して、特定のタグを持つテストのみを実行できます。</target>
        </trans-unit>
        <trans-unit id="75c3e7f0c2115829278fc15321400f8791e52369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mod&lt;/code&gt; key of an application resource file configures an application callback module and start argument:</source>
          <target state="translated">アプリケーションリソースファイルの &lt;code&gt;mod&lt;/code&gt; キーは、アプリケーションコールバックモジュールと開始引数を構成します。</target>
        </trans-unit>
        <trans-unit id="cefbaf0f99d8706ada7dd49301877753ff097956" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; received by this function are also supported by &lt;a href=&quot;#start_link/2&quot;&gt;&lt;code&gt;start_link/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; この機能によって受信されたもでサポートされて&lt;a href=&quot;#start_link/2&quot;&gt; &lt;code&gt;start_link/2&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="64284a2724bf8bf1be42ef3f1c05bbea72ce9fee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; argument must be a match pattern. Flunks with &lt;code&gt;failure_message&lt;/code&gt; if a message matching &lt;code&gt;pattern&lt;/code&gt; is not received.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 引数は、マッチパターンでなければなりません。Flunks &lt;code&gt;failure_message&lt;/code&gt; メッセージ整合場合 &lt;code&gt;pattern&lt;/code&gt; 受信されません。</target>
        </trans-unit>
        <trans-unit id="306d8664f10996ce7979609652732704d345ac55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; argument must be a match pattern. Flunks with &lt;code&gt;failure_message&lt;/code&gt; if a message matching &lt;code&gt;pattern&lt;/code&gt; is received.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 引数は、マッチパターンでなければなりません。Flunks &lt;code&gt;failure_message&lt;/code&gt; メッセージ整合場合 &lt;code&gt;pattern&lt;/code&gt; 受信されます。</target>
        </trans-unit>
        <trans-unit id="e0b8cb821a5d5214e8e6bc4e51c9c7ff6f736aee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; argument must be a match pattern. Flunks with &lt;code&gt;failure_message&lt;/code&gt; if a message matching &lt;code&gt;pattern&lt;/code&gt; was not received.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 引数は、マッチパターンでなければなりません。Flunks &lt;code&gt;failure_message&lt;/code&gt; メッセージ整合場合 &lt;code&gt;pattern&lt;/code&gt; 受信されませんでした。</target>
        </trans-unit>
        <trans-unit id="05af0549cba6832bb035eed4973d7149b45f6ee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; argument must be a match pattern. Flunks with &lt;code&gt;failure_message&lt;/code&gt; if a message matching &lt;code&gt;pattern&lt;/code&gt; was received.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 引数は、マッチパターンでなければなりません。Flunks &lt;code&gt;failure_message&lt;/code&gt; メッセージ整合場合 &lt;code&gt;pattern&lt;/code&gt; 受信されました。</target>
        </trans-unit>
        <trans-unit id="9712132d8ecb090f4be0f4f06a8c889cede54cae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; may be a string, a regular expression, or a compiled pattern.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 、文字列、正規表現、またはコンパイルパターンであってもよいです。</target>
        </trans-unit>
        <trans-unit id="f1e822b0c23d86ef4a2e7320c3e2f68f5b6a5886" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read_line/1&lt;/code&gt; implementation receives data from the socket using &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; and &lt;code&gt;write_line/2&lt;/code&gt; writes to the socket using &lt;code&gt;:gen_tcp.send/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read_line/1&lt;/code&gt; 実装が使用ソケットからデータを受信する &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; 及び &lt;code&gt;write_line/2&lt;/code&gt; 書き込み使用ソケットに &lt;code&gt;:gen_tcp.send/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4738ad60c532661639b80291c79bbfd95de51f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replacement&lt;/code&gt; may be a string or a function that receives the matched pattern and must return the replacement as a string or iodata.</source>
          <target state="translated">&lt;code&gt;replacement&lt;/code&gt; 文字列または一致したパターンを受け取り、文字列またはiodataとして交換を返さなければならない機能であってもよいです。</target>
        </trans-unit>
        <trans-unit id="9c0458fa683a21c30d6bb8dd696e33377e0fc149" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rescue&lt;/code&gt; clause is used to handle exceptions while the &lt;code&gt;catch&lt;/code&gt; clause can be used to catch thrown values and exits. The &lt;code&gt;else&lt;/code&gt; clause can be used to control flow based on the result of the expression. &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;rescue&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; clauses work based on pattern matching (similar to the &lt;code&gt;case&lt;/code&gt; special form).</source>
          <target state="translated">&lt;code&gt;rescue&lt;/code&gt; ながら句は、例外を処理するために使用される &lt;code&gt;catch&lt;/code&gt; 節がスローされた値と終了をキャッチするために使用することができます。 &lt;code&gt;else&lt;/code&gt; 句は、式の結果に基づいて、フローを制御するために使用することができます。 &lt;code&gt;catch&lt;/code&gt; 、 &lt;code&gt;rescue&lt;/code&gt; 、および &lt;code&gt;else&lt;/code&gt; 句は、パターンマッチングに基づいて機能します（特殊な &lt;code&gt;case&lt;/code&gt; と同様）。</target>
        </trans-unit>
        <trans-unit id="8d1df58d3bea703fd1bbf8c012df285de49b968d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setup_all&lt;/code&gt; callbacks are invoked only once per module, before any test is run. All &lt;code&gt;setup&lt;/code&gt; callbacks are run before each test. No callback is run if the test case has no tests or all tests have been filtered out.</source>
          <target state="translated">&lt;code&gt;setup_all&lt;/code&gt; 任意のテストが実行される前にコールバックは、一度だけモジュールごとに呼び出されます。すべての &lt;code&gt;setup&lt;/code&gt; コールバックは、各テストの前に実行されます。テストケースにテストがないか、すべてのテストが除外されている場合、コールバックは実行されません。</target>
        </trans-unit>
        <trans-unit id="bd0f9431cca0c37985b6fe072752b25bee336f01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; value returned by this function is used for boundary checks, therefore it is extremely important that this function only returns &lt;code&gt;:ok&lt;/code&gt; if retrieving the &lt;code&gt;size&lt;/code&gt; of the &lt;code&gt;enumerable&lt;/code&gt; is cheap, fast and takes constant time. Otherwise the simplest of operations, such as &lt;code&gt;Enum.at(enumerable, 0)&lt;/code&gt;, will become too expensive.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; この関数によって返される値は、したがって、それはこの機能だけを返すことが非常に重要である、境界チェックのために使用され &lt;code&gt;:ok&lt;/code&gt; 取り出す場合の &lt;code&gt;size&lt;/code&gt; の &lt;code&gt;enumerable&lt;/code&gt; 速く、安価でかつ一定の時間を要します。そうしないと、 &lt;code&gt;Enum.at(enumerable, 0)&lt;/code&gt; などの最も単純な操作が高額になります。</target>
        </trans-unit>
        <trans-unit id="c3101c570b674a9ec75b76ebada532649060afec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spec&lt;/code&gt; consists of a list of three part tuples, in the shape of &lt;code&gt;[{match_pattern, guards, body}]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;spec&lt;/code&gt; の形で、3つの部分組のリストで構成 &lt;code&gt;[{match_pattern, guards, body}]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="135f720ae9d7a6885e26e8bce732a1ea91412353" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; position is a number &lt;code&gt;&amp;gt;= 0&lt;/code&gt; and guaranteed to exist in the &lt;code&gt;enumerable&lt;/code&gt;. The length is a number &lt;code&gt;&amp;gt;= 1&lt;/code&gt; in a way that &lt;code&gt;start + length &amp;lt;= count&lt;/code&gt;, where &lt;code&gt;count&lt;/code&gt; is the maximum amount of elements in the enumerable.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 位置は、数ある &lt;code&gt;&amp;gt;= 0&lt;/code&gt; とに存在することが保証 &lt;code&gt;enumerable&lt;/code&gt; 。長さは、 &lt;code&gt;start + length &amp;lt;= count&lt;/code&gt; ように、 &lt;code&gt;&amp;gt;= 1&lt;/code&gt; 数値です。ここで、 &lt;code&gt;count&lt;/code&gt; は列挙可能な要素の最大数です。</target>
        </trans-unit>
        <trans-unit id="e168d9178d44f7f46283a9cdf56615be6a7637ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_link/1&lt;/code&gt; (or a custom) is then called for each child process. The &lt;code&gt;start_link/1&lt;/code&gt; function must return &lt;code&gt;{:ok, pid}&lt;/code&gt; where &lt;code&gt;pid&lt;/code&gt; is the process identifier of a new process that is linked to the supervisor. The child process usually starts its work by executing the &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback. Generally speaking, the &lt;code&gt;init&lt;/code&gt; callback is where we initialize and configure the child process.</source>
          <target state="translated">次に、 &lt;code&gt;start_link/1&lt;/code&gt; （またはカスタム）が子プロセスごとに呼び出されます。 &lt;code&gt;start_link/1&lt;/code&gt; 関数が戻らなければならない &lt;code&gt;{:ok, pid}&lt;/code&gt; &lt;code&gt;pid&lt;/code&gt; 監督者にリンクされている新しいプロセスのプロセス識別子です。子プロセスは通常、&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;コールバックを実行することで作業を開始します。一般的に言って、 &lt;code&gt;init&lt;/code&gt; コールバックは、子プロセスを初期化および構成する場所です。</target>
        </trans-unit>
        <trans-unit id="a8a0cec068e183c964ba134c5b70d885df25681c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_supervised!&lt;/code&gt; function was injected into our test module by &lt;code&gt;use ExUnit.Case&lt;/code&gt;. It does the job of starting the &lt;code&gt;KV.Registry&lt;/code&gt; process, by calling its &lt;code&gt;start_link/1&lt;/code&gt; function. The advantage of using &lt;code&gt;start_supervised!&lt;/code&gt; is that ExUnit will guarantee that the registry process will be shutdown &lt;strong&gt;before&lt;/strong&gt; the next test starts. In other words, it helps guarantee that the state of one test is not going to interfere with the next one in case they depend on shared resources.</source>
          <target state="translated">&lt;code&gt;start_supervised!&lt;/code&gt; 関数は、 &lt;code&gt;use ExUnit.Case&lt;/code&gt; を使用してテストモジュールに挿入されました。これは、 &lt;code&gt;start_link/1&lt;/code&gt; 関数を呼び出すことによって、 &lt;code&gt;KV.Registry&lt;/code&gt; プロセスを開始するジョブを実行します。 &lt;code&gt;start_supervised!&lt;/code&gt; を使用する利点！ExUnitは、次のテストが開始される&lt;strong&gt;前に&lt;/strong&gt;レジストリプロセスがシャットダウンされることを保証します。つまり、共有リソースに依存している場合に、1つのテストの状態が次のテストに干渉しないことを保証するのに役立ちます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c3b0210439efc565cc631c8fa0e308643197cf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string()&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;string()&lt;/code&gt; タイプ</target>
        </trans-unit>
        <trans-unit id="61ebcef3a8537f672d50ed7bff3d6db73d860578" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;struct&lt;/code&gt; argument may be an atom (which defines &lt;code&gt;defstruct&lt;/code&gt;) or a &lt;code&gt;struct&lt;/code&gt; itself. The second argument is any &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; that emits two-element tuples (key-value pairs) during enumeration.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 引数は、（定義原子であってもよい &lt;code&gt;defstruct&lt;/code&gt; ）または &lt;code&gt;struct&lt;/code&gt; そのもの。2番目の引数は、列挙中に2要素のタプル（キーと値のペア）を発行する任意の&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="3ca4af46f233ac35dc3b79485d62ec51b88145af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subject&lt;/code&gt; is always a string.</source>
          <target state="translated">&lt;code&gt;subject&lt;/code&gt; 常に文字列です。</target>
        </trans-unit>
        <trans-unit id="fa2ecf30353c15851b99330eab13deee5216e86a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;supervisor&lt;/code&gt; must be a reference as defined in &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;. The task will still be linked to the caller, see &lt;a href=&quot;task#async/3&quot;&gt;&lt;code&gt;Task.async/3&lt;/code&gt;&lt;/a&gt; for more information and &lt;a href=&quot;#async_nolink/2&quot;&gt;&lt;code&gt;async_nolink/2&lt;/code&gt;&lt;/a&gt; for a non-linked variant.</source>
          <target state="translated">&lt;code&gt;supervisor&lt;/code&gt; で定義されるように参照でなければならない&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;。タスクは引き続き呼び出し元にリンクされます。詳細については&lt;a href=&quot;task#async/3&quot;&gt; &lt;code&gt;Task.async/3&lt;/code&gt; &lt;/a&gt;を、リンクされていないバリアントについては&lt;a href=&quot;#async_nolink/2&quot;&gt; &lt;code&gt;async_nolink/2&lt;/code&gt; &lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="549a87864f7a5407aab555d12f030b23c5278a92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;supervisor&lt;/code&gt; must be a reference as defined in &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;. The task won't be linked to the caller, see &lt;a href=&quot;task#async/3&quot;&gt;&lt;code&gt;Task.async/3&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;supervisor&lt;/code&gt; で定義されるように参照でなければならない&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;。タスクは呼び出し元にリンクされません。詳細については、&lt;a href=&quot;task#async/3&quot;&gt; &lt;code&gt;Task.async/3&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bc1957bc0923712dab3fe287b0e8df3bec3ec39a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; macro</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; マクロ</target>
        </trans-unit>
        <trans-unit id="6bf883ffd229719baaf3e026049bc07e3e3fdc26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument passed to &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; is usually &lt;code&gt;:normal&lt;/code&gt; unless in a distributed setup where application takeovers and failovers are configured. Distributed applications are beyond the scope of this documentation.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 引数がに渡さ&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;、通常 &lt;code&gt;:normal&lt;/code&gt; アプリケーション買収とフェイルオーバーが構成されている分散セットアップでない限り。分散アプリケーションは、このドキュメントの範囲外です。</target>
        </trans-unit>
        <trans-unit id="69149411f0751c47ab43a2cb8ee2352867ce8c60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument specifies the type of the application:</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 引数には、アプリケーションの種類を指定します。</target>
        </trans-unit>
        <trans-unit id="f6663df984e95662866d3ab67e965809a6b673af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update_in/2&lt;/code&gt; macro is similar but allows us to pass a function that controls how the value changes. For example, let&amp;rsquo;s remove &amp;ldquo;Clojure&amp;rdquo; from Mary&amp;rsquo;s list of languages:</source>
          <target state="translated">&lt;code&gt;update_in/2&lt;/code&gt; マクロは同様であるが、制御方法値が変化することを私たちは機能を通過することを可能にします。たとえば、Maryの言語リストから「Clojure」を削除してみましょう。</target>
        </trans-unit>
        <trans-unit id="8f6feff517dde91abd98ddcc94fc5f8ee947ce68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use&lt;/code&gt; macro is frequently used as an extension point. This means that, when you &lt;code&gt;use&lt;/code&gt; a module &lt;code&gt;FooBar&lt;/code&gt;, you allow that module to inject &lt;em&gt;any&lt;/em&gt; code in the current module, such as importing itself or other modules, defining new functions, setting a module state, etc.</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; マクロはしばしば拡張ポイントとして使用されます。もし場合、この手段 &lt;code&gt;use&lt;/code&gt; モジュール &lt;code&gt;FooBar&lt;/code&gt; のを、あなたは、そのモジュールを注入することを可能にする&lt;em&gt;任意&lt;/em&gt;など、新しい機能を定義する、それ自体または他のモジュールをインポートするモジュールの状態を設定し、現在のモジュール内のコードを、</target>
        </trans-unit>
        <trans-unit id="443668287cbb8f84b2664ce3f01400a9552185b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;utf8&lt;/code&gt;, &lt;code&gt;utf16&lt;/code&gt;, and &lt;code&gt;utf32&lt;/code&gt; types are for Unicode code points. They can also be applied to literal strings and charlists:</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; 、 &lt;code&gt;utf16&lt;/code&gt; 、および &lt;code&gt;utf32&lt;/code&gt; タイプは、Unicodeコードポイントのためのものです。それらはリテラル文字列と文字リストにも適用できます：</target>
        </trans-unit>
        <trans-unit id="766b25b711b24bf14734bf86264816b50201e5a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;xref&lt;/code&gt; task expects a mode as first argument:</source>
          <target state="translated">&lt;code&gt;xref&lt;/code&gt; タスクは、最初の引数としてのモードを想定しています。</target>
        </trans-unit>
        <trans-unit id="848f828061a57fea28024ac6791811ddcc578da8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{module, function}&lt;/code&gt; will be invoked with four arguments:</source>
          <target state="translated">&lt;code&gt;{module, function}&lt;/code&gt; 四つの引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6bb6f7b835bb4273bfb73268cdb830e1eaa1b0c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;|&amp;gt;&lt;/code&gt; operator is mostly useful when there is a desire to execute a series of operations resembling a pipeline:</source>
          <target state="translated">&lt;code&gt;|&amp;gt;&lt;/code&gt; パイプラインに似た一連の操作を実行したいがある場合に、オペレータは、主に便利です。</target>
        </trans-unit>
        <trans-unit id="e7c15f5a444d0eb501f58185ab4ff6cc148686d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;|&amp;gt;&lt;/code&gt; symbol used in the snippet above is the &lt;strong&gt;pipe operator&lt;/strong&gt;: it takes the output from the expression on its left side and passes it as the first argument to the function call on its right side. It&amp;rsquo;s similar to the Unix &lt;code&gt;|&lt;/code&gt; operator. Its purpose is to highlight the data being transformed by a series of functions. To see how it can make the code cleaner, have a look at the example above rewritten without using the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator:</source>
          <target state="translated">&lt;code&gt;|&amp;gt;&lt;/code&gt; 上記のコードで使用される記号は、&lt;strong&gt;パイプ演算子&lt;/strong&gt;：それは、その左側の表現から出力を受け取り、その右側に関数呼び出しの最初の引数として渡します。Unixに似ています &lt;code&gt;|&lt;/code&gt; オペレーター。その目的は、一連の関数によって変換されるデータを強調表示することです。コードをよりクリーンにする方法を確認するには、 &lt;code&gt;|&amp;gt;&lt;/code&gt; 演算子を使用せずに上記の例を書き直してください。</target>
        </trans-unit>
        <trans-unit id="de83fadff1ba2a72273182089ea2a050990085bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~c&lt;/code&gt; sigil is useful for generating char lists that contain single quotes:</source>
          <target state="translated">&lt;code&gt;~c&lt;/code&gt; 印章は、単一引用符が含まれている文字のリストを生成するために有用です：</target>
        </trans-unit>
        <trans-unit id="281b4a2fc5fd64a2cedf95577018a34d44729cd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~s&lt;/code&gt; sigil is used to generate strings, like double quotes are. The &lt;code&gt;~s&lt;/code&gt; sigil is useful when a string contains double quotes:</source>
          <target state="translated">&lt;code&gt;~s&lt;/code&gt; 二重引用符があるよう印章は、文字列を生成するために使用されます。 &lt;code&gt;~s&lt;/code&gt; 文字列は二重引用符が含まれている場合、印章は便利です。</target>
        </trans-unit>
        <trans-unit id="1b5ce296d52d56b387e6952a8ac2c01f7f747b55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~w&lt;/code&gt; sigil also accepts the &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; modifiers (for char lists, strings, and atoms, respectively), which specify the data type of the elements of the resulting list:</source>
          <target state="translated">&lt;code&gt;~w&lt;/code&gt; シギルも受け付け &lt;code&gt;c&lt;/code&gt; 、 &lt;code&gt;s&lt;/code&gt; 、および結果のリストの要素のデータ型を指定し、（それぞれチャーリスト、文字列、原子など）修飾子。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9578a70bcff0146fc766139c2fb2691deada995b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~w&lt;/code&gt; sigil is used to generate lists of words (&lt;em&gt;words&lt;/em&gt; are just regular strings). Inside the &lt;code&gt;~w&lt;/code&gt; sigil, words are separated by whitespace.</source>
          <target state="translated">&lt;code&gt;~w&lt;/code&gt; 印章は、単語のリストを（生成するために使用される&lt;em&gt;言葉は&lt;/em&gt;普通の文字列です）。内部 &lt;code&gt;~w&lt;/code&gt; 印章、単語は空白で区切られています。</target>
        </trans-unit>
        <trans-unit id="57c0bcba93565ebcb726bbcf9fe5e3a854d68664" translate="yes" xml:space="preserve">
          <source>The AST for a pipeline (a sequence of applications of &lt;code&gt;|&amp;gt;&lt;/code&gt;) is similar to the AST of a sequence of binary operators or function applications: the top-level expression is the right-most &lt;code&gt;:|&amp;gt;&lt;/code&gt; (which is the last one to be executed), and its left-hand and right-hand sides are its arguments:</source>
          <target state="translated">パイプラインのAST（一連の &lt;code&gt;|&amp;gt;&lt;/code&gt; のアプリケーション）は、一連のバイナリ演算子または関数アプリケーションのASTに似ています。最上位の式は、最も右の &lt;code&gt;:|&amp;gt;&lt;/code&gt; です（これは、実行）、およびその左側と右側はその引数です：</target>
        </trans-unit>
        <trans-unit id="22673f1e15930ac4a2bce8fc889928e4bf1f922d" translate="yes" xml:space="preserve">
          <source>The BREAK menu</source>
          <target state="translated">BREACKメニュー</target>
        </trans-unit>
        <trans-unit id="98504b06eb756100aa8d0fe1b8a5bed8131e1638" translate="yes" xml:space="preserve">
          <source>The Client API</source>
          <target state="translated">クライアントAPI</target>
        </trans-unit>
        <trans-unit id="087349ac5d28e5bd9b6d72d6f50436cef7a3d724" translate="yes" xml:space="preserve">
          <source>The Date struct contains the fields year, month, day and calendar. New dates can be built with the &lt;a href=&quot;#new/3&quot;&gt;&lt;code&gt;new/3&lt;/code&gt;&lt;/a&gt; function or using the &lt;code&gt;~D&lt;/code&gt; (see &lt;a href=&quot;kernel#sigil_D/2&quot;&gt;&lt;code&gt;Kernel.sigil_D/2&lt;/code&gt;&lt;/a&gt;) sigil:</source>
          <target state="translated">Date構造体には、年、月、日、カレンダーのフィールドが含まれています。新しい日付は、&lt;a href=&quot;#new/3&quot;&gt; &lt;code&gt;new/3&lt;/code&gt; &lt;/a&gt;関数を使用するか、 &lt;code&gt;~D&lt;/code&gt; （&lt;a href=&quot;kernel#sigil_D/2&quot;&gt; &lt;code&gt;Kernel.sigil_D/2&lt;/code&gt; を&lt;/a&gt;参照）sigil を使用して構築できます。</target>
        </trans-unit>
        <trans-unit id="60739ce280ae99907b36b37adf6ef92a05aaedd6" translate="yes" xml:space="preserve">
          <source>The Elixir AST</source>
          <target state="translated">エリクシールAST</target>
        </trans-unit>
        <trans-unit id="b354da44a5ccc03b14d8e9e9f977406245074d69" translate="yes" xml:space="preserve">
          <source>The Elixir guides are also available in EPUB format:</source>
          <target state="translated">エリクシールのガイドはEPUB形式でもご利用いただけます。</target>
        </trans-unit>
        <trans-unit id="3b3b88c39f2093f79b409f882370622044ce70ae" translate="yes" xml:space="preserve">
          <source>The Erlang compiler can provide a number of optimizations on binary creation and matching. To see optimization output, set the &lt;code&gt;bin_opt_info&lt;/code&gt; compiler option:</source>
          <target state="translated">Erlangコンパイラーは、バイナリーの作成とマッチングに関して多くの最適化を提供できます。最適化出力を表示するには、 &lt;code&gt;bin_opt_info&lt;/code&gt; コンパイラー・オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="7953816f5ef9843a5ed4589ec36cf1a54fdf799d" translate="yes" xml:space="preserve">
          <source>The GenServer behaviour abstracts the common client-server interaction. Developers are only required to implement the callbacks and functionality they are interested in.</source>
          <target state="translated">GenServerのビヘイビアは、一般的なクライアントとサーバの相互作用を抽象化しています。開発者は、興味のあるコールバックや機能を実装するだけでよいのです。</target>
        </trans-unit>
        <trans-unit id="3d66e19aeb4f8b03c43c83bf06d0a7f010db09c4" translate="yes" xml:space="preserve">
          <source>The GenServer name</source>
          <target state="translated">GenServer名</target>
        </trans-unit>
        <trans-unit id="4c83968c19110a694ab1613224a8a36aaf6e3f41" translate="yes" xml:space="preserve">
          <source>The IEx.Server.</source>
          <target state="translated">IEx.Serverを使用しています。</target>
        </trans-unit>
        <trans-unit id="25aef49825211907484d43e756114a0b1fa27f36" translate="yes" xml:space="preserve">
          <source>The ISO calendar has two eras: the current era which starts in year 1 and is defined as era &quot;1&quot;. And a second era for those years less than 1 defined as era &quot;0&quot;.</source>
          <target state="translated">ISOカレンダーには2つの時代があり、1年目から始まる現在の時代を「1」の時代と定義しています。そして、1年未満の年を &quot;0 &quot;と定義した第2の時代です。</target>
        </trans-unit>
        <trans-unit id="1a856fcbbb476ea67477f19a707dbe002ca4c6dc" translate="yes" xml:space="preserve">
          <source>The Jaro distance metric is designed and best suited for short strings such as person names. Elixir itself uses this function to provide the &quot;did you mean?&quot; functionality. For instance, when you are calling a function in a module and you have a typo in the function name, we attempt to suggest the most similar function name available, if any, based on the &lt;a href=&quot;#jaro_distance/2&quot;&gt;&lt;code&gt;jaro_distance/2&lt;/code&gt;&lt;/a&gt; score.</source>
          <target state="translated">Jaro距離メトリックは、人名などの短い文字列に最適です。エリクサー自体はこの関数を使用して「もしかして？」機能性。たとえば、モジュールで関数を呼び出しているときに、関数名にタイプミスがある場合、&lt;a href=&quot;#jaro_distance/2&quot;&gt; &lt;code&gt;jaro_distance/2&lt;/code&gt; &lt;/a&gt;スコアに基づいて、使用可能な最も類似した関数名があれば提案します。</target>
        </trans-unit>
        <trans-unit id="37173c596301d8be8275b8b1f500a183f87ab7fa" translate="yes" xml:space="preserve">
          <source>The Mix build tool can also be used to start your applications. For example, &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/a&gt; automatically starts your application dependencies and your application itself before your test runs. &lt;code&gt;mix run --no-halt&lt;/code&gt; boots your current project and can be used to start a long running system. See &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt;&lt;code&gt;mix help run&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Mixビルドツールは、アプリケーションの起動にも使用できます。たとえば、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt; &lt;code&gt;mix test&lt;/code&gt; &lt;/a&gt;、テストが実行される前に、アプリケーションの依存関係とアプリケーション自体が自動的に開始されます。 &lt;code&gt;mix run --no-halt&lt;/code&gt; は現在のプロジェクトを起動し、長時間実行されているシステムの起動に使用できます。&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt; &lt;code&gt;mix help run&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ed1904da080bbb46fb65f0901cdd39a58e1d853d" translate="yes" xml:space="preserve">
          <source>The Mix compiler automatically looks for calls to deprecated modules and emit warnings during compilation, computed via &lt;code&gt;mix xref warnings&lt;/code&gt;.</source>
          <target state="translated">Mixコンパイラーは、非推奨のモジュールへの呼び出しを自動的に検索し、コンパイル時に &lt;code&gt;mix xref warnings&lt;/code&gt; を介して計算された警告を発行します。</target>
        </trans-unit>
        <trans-unit id="be1eb0ffc63d3de62778534778d3195fa7ba19b5" translate="yes" xml:space="preserve">
          <source>The NaiveDateTime struct contains the fields year, month, day, hour, minute, second, microsecond and calendar. New naive datetimes can be built with the &lt;a href=&quot;#new/2&quot;&gt;&lt;code&gt;new/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#new/8&quot;&gt;&lt;code&gt;new/8&lt;/code&gt;&lt;/a&gt; functions or using the &lt;code&gt;~N&lt;/code&gt; (see &lt;a href=&quot;kernel#sigil_N/2&quot;&gt;&lt;code&gt;Kernel.sigil_N/2&lt;/code&gt;&lt;/a&gt;) sigil:</source>
          <target state="translated">NaiveDateTime構造体には、年、月、日、時、分、秒、マイクロ秒、およびカレンダーのフィールドが含まれます。新しいナイーブ日付時刻はで構築することができます&lt;a href=&quot;#new/2&quot;&gt; &lt;code&gt;new/2&lt;/code&gt; &lt;/a&gt;及び&lt;a href=&quot;#new/8&quot;&gt; &lt;code&gt;new/8&lt;/code&gt; &lt;/a&gt;機能や使用 &lt;code&gt;~N&lt;/code&gt; （参照&lt;a href=&quot;kernel#sigil_N/2&quot;&gt; &lt;code&gt;Kernel.sigil_N/2&lt;/code&gt; の&lt;/a&gt;印章）：</target>
        </trans-unit>
        <trans-unit id="68ea22c150e9e8bf3b5e486f34ccdf3da6885051" translate="yes" xml:space="preserve">
          <source>The Plug library also allows developers to define their own plugs which can be run in a web server:</source>
          <target state="translated">また、プラグライブラリは、開発者が独自のプラグを定義してウェブサーバで実行できるようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="a12ef86cf46c7d5f545c70ee0f3e00bac2b5a15b" translate="yes" xml:space="preserve">
          <source>The Supervisor name</source>
          <target state="translated">監督者名</target>
        </trans-unit>
        <trans-unit id="ec4b01d7b2161ab93486a9f17a632dd403411fb3" translate="yes" xml:space="preserve">
          <source>The Task struct.</source>
          <target state="translated">Task構造体。</target>
        </trans-unit>
        <trans-unit id="5c4c62b39d79d7cb27a5185a0a6601bdd97a3708" translate="yes" xml:space="preserve">
          <source>The Task type.</source>
          <target state="translated">タスクの種類。</target>
        </trans-unit>
        <trans-unit id="3b4c615274399f80e52f24988cf891d5bac9928c" translate="yes" xml:space="preserve">
          <source>The Time struct contains the fields hour, minute, second and microseconds. New times can be built with the &lt;a href=&quot;#new/4&quot;&gt;&lt;code&gt;new/4&lt;/code&gt;&lt;/a&gt; function or using the &lt;code&gt;~T&lt;/code&gt; (see &lt;a href=&quot;kernel#sigil_T/2&quot;&gt;&lt;code&gt;Kernel.sigil_T/2&lt;/code&gt;&lt;/a&gt;) sigil:</source>
          <target state="translated">Time構造体には、時間、分、秒、マイクロ秒のフィールドが含まれます。新しい時刻は、&lt;a href=&quot;#new/4&quot;&gt; &lt;code&gt;new/4&lt;/code&gt; &lt;/a&gt;関数を使用するか、 &lt;code&gt;~T&lt;/code&gt; （&lt;a href=&quot;kernel#sigil_T/2&quot;&gt; &lt;code&gt;Kernel.sigil_T/2&lt;/code&gt; を&lt;/a&gt;参照）sigil を使用して構築できます。</target>
        </trans-unit>
        <trans-unit id="8474ee41c99d01d2c859c45e3ba20cf759140dae" translate="yes" xml:space="preserve">
          <source>The UTF-8 encoding is self-synchronizing. This means that if malformed data (i.e., data that is not possible according to the definition of the encoding) is encountered, only one code point needs to be rejected.</source>
          <target state="translated">UTF-8 エンコーディングは自己同期です。こ れは、 不正なデー タ (すなわち、 エン コ ーデ ィ ン グの定義に従 う こ と がで き ないデー タ)に遭遇 し た場合には、 1 つの コ ー ド 点だけを拒否す る 必要があ る こ と を意味 し ます。</target>
        </trans-unit>
        <trans-unit id="af4cd337ec1852f0dfb035c5a67522bde05e43a9" translate="yes" xml:space="preserve">
          <source>The Unicode standard assigns code points to many of the characters we know. For example, the letter &lt;code&gt;a&lt;/code&gt; has code point &lt;code&gt;97&lt;/code&gt; while the letter &lt;code&gt;ł&lt;/code&gt; has code point &lt;code&gt;322&lt;/code&gt;. When writing the string &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; to disk, we need to convert this sequence of characters to bytes. If we adopted a rule that said one byte represents one code point, we wouldn&amp;rsquo;t be able to write &lt;code&gt;&quot;hełło&quot;&lt;/code&gt;, because it uses the code point &lt;code&gt;322&lt;/code&gt; for &lt;code&gt;ł&lt;/code&gt;, and one byte can only represent a number from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. But of course, given you can actually read &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; on your screen, it must be represented &lt;em&gt;somehow&lt;/em&gt;. That&amp;rsquo;s where encodings come in.</source>
          <target state="translated">Unicode標準は、コードポイントを、私たちが知っている多くの文字に割り当てます。たとえば、文字 &lt;code&gt;a&lt;/code&gt; にはコードポイント &lt;code&gt;97&lt;/code&gt; があり、文字 &lt;code&gt;ł&lt;/code&gt; にはコードポイント &lt;code&gt;322&lt;/code&gt; があります。文字列 &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; をディスクに書き込むとき、この文字シーケンスをバイトに変換する必要があります。私たちは、1つのバイトが1つのコード・ポイントを表したルールを採用した場合、我々は書くことができないだろう &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; 、それはコードポイントを使用しているので、 &lt;code&gt;322&lt;/code&gt; のための &lt;code&gt;ł&lt;/code&gt; 、1バイトのみから数を表すことができます &lt;code&gt;0&lt;/code&gt; へ &lt;code&gt;255&lt;/code&gt; 。しかしもちろん、実際に画面上で &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; を読むことができる場合、それは表されなければなりません&lt;em&gt;どういうわけか&lt;/em&gt;。それがエンコーディングの出番です。</target>
        </trans-unit>
        <trans-unit id="2f4916c41c92d9991c4b1a3b6471eb39a20e54f2" translate="yes" xml:space="preserve">
          <source>The User switch command</source>
          <target state="translated">ユーザースイッチコマンド</target>
        </trans-unit>
        <trans-unit id="1a567b978fcdc4da963f5cc140173eaaff0ae789" translate="yes" xml:space="preserve">
          <source>The above example shows the difference; the &lt;code&gt;String&lt;/code&gt; module returns Unicode codepoints, while &lt;code&gt;:binary&lt;/code&gt; deals with raw data bytes.</source>
          <target state="translated">上記の例は違いを示しています。 &lt;code&gt;String&lt;/code&gt; モジュールはしばらくの間、Unicodeのコードポイントを返し &lt;code&gt;:binary&lt;/code&gt; 生のデータバイトを扱います。</target>
        </trans-unit>
        <trans-unit id="3a294edc39ba298dd2fbf7c3e29c2a6c5831e0fe" translate="yes" xml:space="preserve">
          <source>The above is treated the same as &lt;code&gt;sum(1, 2, 3)&lt;/code&gt; by the parser.</source>
          <target state="translated">上記は、パーサーによって &lt;code&gt;sum(1, 2, 3)&lt;/code&gt; と同じように扱われます。</target>
        </trans-unit>
        <trans-unit id="06bc5ff1abf3cc124d1fca8a735f66352777e819" translate="yes" xml:space="preserve">
          <source>The above will open another Graphical User Interface that provides many panes to fully understand and navigate the runtime and your project:</source>
          <target state="translated">上記は、ランタイムとプロジェクトを完全に理解し、ナビゲートするための多くのペインを提供する別のグラフィカル・ユーザー・インターフェースを開きます。</target>
        </trans-unit>
        <trans-unit id="4124955158531615905cdb11c74372fed2efecdc" translate="yes" xml:space="preserve">
          <source>The accepted options are:</source>
          <target state="translated">受け入れられた選択肢は</target>
        </trans-unit>
        <trans-unit id="aca7adeb72bb259b777f4c2b15cd9a4f9b4ff5ce" translate="yes" xml:space="preserve">
          <source>The access syntax can also be used with the &lt;a href=&quot;kernel#put_in/2&quot;&gt;&lt;code&gt;Kernel.put_in/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#update_in/2&quot;&gt;&lt;code&gt;Kernel.update_in/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;kernel#get_and_update_in/2&quot;&gt;&lt;code&gt;Kernel.get_and_update_in/2&lt;/code&gt;&lt;/a&gt; macros to allow values to be set in nested data structures:</source>
          <target state="translated">アクセス構文を&lt;a href=&quot;kernel#put_in/2&quot;&gt; &lt;code&gt;Kernel.put_in/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#update_in/2&quot;&gt; &lt;code&gt;Kernel.update_in/2&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;kernel#get_and_update_in/2&quot;&gt; &lt;code&gt;Kernel.get_and_update_in/2&lt;/code&gt; &lt;/a&gt;マクロと共に使用して、ネストされたデータ構造に値を設定することもできます。</target>
        </trans-unit>
        <trans-unit id="243c0eadcb33ec262a94b0246c4ece1f117a3666" translate="yes" xml:space="preserve">
          <source>The access syntax is represented as a call to &lt;a href=&quot;access#get/2&quot;&gt;&lt;code&gt;Access.get/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">アクセス構文は&lt;a href=&quot;access#get/2&quot;&gt; &lt;code&gt;Access.get/2&lt;/code&gt; の&lt;/a&gt;呼び出しとして表されます。</target>
        </trans-unit>
        <trans-unit id="4b8d2c8f5f09f671794f31f1f907968a5ca06aff" translate="yes" xml:space="preserve">
          <source>The accumulator is only calculated when transformation starts. It also allows an after function to be given which is invoked when the stream halts or completes.</source>
          <target state="translated">アキュムレータは変換開始時のみ計算されます。また、ストリームが停止したときや完了したときに呼び出されるafter関数を与えることもできます。</target>
        </trans-unit>
        <trans-unit id="231cb19852aaf99a578b488de350325c3dbaf7df" translate="yes" xml:space="preserve">
          <source>The accumulator value for each step.</source>
          <target state="translated">各ステップのアキュムレータ値。</target>
        </trans-unit>
        <trans-unit id="3f1f1fb598d7730a9ff70812d543d26b95408bb0" translate="yes" xml:space="preserve">
          <source>The advantage of starting a process under the test supervisor is that it is guaranteed to exit before the next test starts. Therefore, you don't need to remove the process at the end of your tests via &lt;a href=&quot;#stop_supervised/1&quot;&gt;&lt;code&gt;stop_supervised/1&lt;/code&gt;&lt;/a&gt;. You only need to use &lt;a href=&quot;#stop_supervised/1&quot;&gt;&lt;code&gt;stop_supervised/1&lt;/code&gt;&lt;/a&gt; if you want to remove a process from the supervision tree in the middle of a test, as simply shutting down the process would cause it to be restarted according to its &lt;code&gt;:restart&lt;/code&gt; value.</source>
          <target state="translated">テストスーパーバイザでプロセスを開始する利点は、次のテストが開始する前に終了することが保証されていることです。したがって、テストの最後で&lt;a href=&quot;#stop_supervised/1&quot;&gt; &lt;code&gt;stop_supervised/1&lt;/code&gt; &lt;/a&gt;を使用してプロセスを削除する必要はありません。テストの途中で監視ツリーからプロセスを削除する場合にのみ、&lt;a href=&quot;#stop_supervised/1&quot;&gt; &lt;code&gt;stop_supervised/1&lt;/code&gt; &lt;/a&gt;を使用する必要があります。単にプロセスをシャットダウンすると、そのプロセスが &lt;code&gt;:restart&lt;/code&gt; 値に従って再起動されるためです。</target>
        </trans-unit>
        <trans-unit id="f25d9730409ef1dfe6f5e984f31be4fd99cffcf1" translate="yes" xml:space="preserve">
          <source>The advantage of structs is that they validate that the given keys are part of the defined struct. The example below will fail because there is no key &lt;code&gt;:full_name&lt;/code&gt; in the &lt;code&gt;User&lt;/code&gt; struct:</source>
          <target state="translated">構造体の利点は、指定されたキーが定義された構造体の一部であることを検証することです。次の例は、 &lt;code&gt;User&lt;/code&gt; 構造体にキー &lt;code&gt;:full_name&lt;/code&gt; がないため失敗します。</target>
        </trans-unit>
        <trans-unit id="83ac1b567e220f667e9d9d2c2f19a5c7705de064" translate="yes" xml:space="preserve">
          <source>The agent name</source>
          <target state="translated">エージェント名</target>
        </trans-unit>
        <trans-unit id="850cde34796934da35ab95f25d166c013161b0f7" translate="yes" xml:space="preserve">
          <source>The agent reference</source>
          <target state="translated">エージェントリファレンス</target>
        </trans-unit>
        <trans-unit id="79d99d2d3b7f3ac280b26b43a51cc435cf66db5f" translate="yes" xml:space="preserve">
          <source>The agent state</source>
          <target state="translated">エージェントの状態</target>
        </trans-unit>
        <trans-unit id="04287ba52642f4b2e9805d3cbb6242221ac4131b" translate="yes" xml:space="preserve">
          <source>The agent's state will be added to the given list of arguments (&lt;code&gt;[%{}]&lt;/code&gt;) as the first argument.</source>
          <target state="translated">エージェントの状態は、最初の引数として指定された引数のリスト（ &lt;code&gt;[%{}]&lt;/code&gt; ）に追加されます。</target>
        </trans-unit>
        <trans-unit id="8beb83ba7f5ecd3254d30e564e0d6fb8a2d460e5" translate="yes" xml:space="preserve">
          <source>The algorithm is outlined in the &quot;An O(ND) Difference Algorithm and Its Variations&quot; paper by E. Myers.</source>
          <target state="translated">このアルゴリズムは、E.マイヤーズによる論文「An O(ND)Difference Algorithm and Its Variations」に概説されています。</target>
        </trans-unit>
        <trans-unit id="3e134324067f32fab468c28c29405fca71811700" translate="yes" xml:space="preserve">
          <source>The algorithm is outlined in the &quot;String Matching with Metric Trees Using an Approximate Distance&quot; paper by Ilaria Bartolini, Paolo Ciaccia, and Marco Patella.</source>
          <target state="translated">このアルゴリズムの概要は、Ilaria Bartolini、Paolo Ciaccia、Marco Patellaによる論文「String Matching with Metric Trees Using an Approximate Distance(近似距離を用いたメトリックツリーとの文字列マッチング)」に記載されています。</target>
        </trans-unit>
        <trans-unit id="e4b130944005218b61f70b8dda4acb83f5f8b422" translate="yes" xml:space="preserve">
          <source>The algorithm is outlined in the &lt;a href=&quot;https://www.unicode.org/reports/tr29/&quot;&gt;Unicode Standard Annex #29, Unicode Text Segmentation&lt;/a&gt;.</source>
          <target state="translated">アルゴリズムの概要は、&lt;a href=&quot;https://www.unicode.org/reports/tr29/&quot;&gt;Unicode Standard Annex＃29、Unicode Text Segmentationに&lt;/a&gt;記載されています。</target>
        </trans-unit>
        <trans-unit id="f9558fd66aceb0ac12811fbd079f3478d2d6d0b6" translate="yes" xml:space="preserve">
          <source>The allowed modes:</source>
          <target state="translated">許可されたモード。</target>
        </trans-unit>
        <trans-unit id="22b1bedb9b0e24d713b2164c5c95fdaf0f81ef84" translate="yes" xml:space="preserve">
          <source>The allowed values for &lt;code&gt;flag&lt;/code&gt; are only a subset of those allowed in &lt;a href=&quot;#flag/2&quot;&gt;&lt;code&gt;flag/2&lt;/code&gt;&lt;/a&gt;, namely &lt;code&gt;:save_calls&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flag&lt;/code&gt; に許可される値は、 &lt;code&gt;:save_calls&lt;/code&gt; &lt;a href=&quot;#flag/2&quot;&gt; &lt;code&gt;flag/2&lt;/code&gt; &lt;/a&gt;で許可される値のサブセット、つまり：save_callsのみです。</target>
        </trans-unit>
        <trans-unit id="a1284e6a8b509aaab6853404ad966b4c6d0d9c11" translate="yes" xml:space="preserve">
          <source>The amount of functionality in the &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; modules can be daunting at first, but you will get familiar with them case by case. In particular, focus on the &lt;code&gt;Enum&lt;/code&gt; module first and only move to &lt;code&gt;Stream&lt;/code&gt; for the particular scenarios where laziness is required, to either deal with slow resources or large, possibly infinite, collections.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;モジュールと&lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;モジュールの機能の量は最初は気が遠くなるかもしれませんが、ケースバイケースでそれらに慣れるでしょう。特に、最初に &lt;code&gt;Enum&lt;/code&gt; モジュールに注目し、遅延リソースが必要な特定のシナリオでのみ &lt;code&gt;Stream&lt;/code&gt; に移動して、遅いリソースまたは大きな、場合によっては無限のコレクションを処理します。</target>
        </trans-unit>
        <trans-unit id="7e8600e30f0a326a12149028f15ee8e6ad16cef8" translate="yes" xml:space="preserve">
          <source>The anonymous function receives 0 arguments, and may return any value.</source>
          <target state="translated">匿名関数は0個の引数を受け取り、任意の値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="273c2352c55239386071c9f97857464d5b54d531" translate="yes" xml:space="preserve">
          <source>The answer can be returned in any &lt;code&gt;unit&lt;/code&gt; available from &lt;a href=&quot;system#t:time_unit/0&quot;&gt;&lt;code&gt;System.time_unit/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">答えは&lt;a href=&quot;system#t:time_unit/0&quot;&gt; &lt;code&gt;System.time_unit/0&lt;/code&gt; &lt;/a&gt;から利用可能な任意の &lt;code&gt;unit&lt;/code&gt; で返すことができます。</target>
        </trans-unit>
        <trans-unit id="0c851ccba3a0c5e2913af28fbba1bc5059650f30" translate="yes" xml:space="preserve">
          <source>The answer can be returned in any &lt;code&gt;unit&lt;/code&gt; available from &lt;a href=&quot;system#t:time_unit/0&quot;&gt;&lt;code&gt;System.time_unit/0&lt;/code&gt;&lt;/a&gt;. If the first unit is smaller than the second, a negative number is returned.</source>
          <target state="translated">答えは&lt;a href=&quot;system#t:time_unit/0&quot;&gt; &lt;code&gt;System.time_unit/0&lt;/code&gt; &lt;/a&gt;から利用可能な任意の &lt;code&gt;unit&lt;/code&gt; で返すことができます。最初の単位が2番目の単位より小さい場合、負の数が返されます。</target>
        </trans-unit>
        <trans-unit id="11872c1546ad5d8d77e3dd6dcf24fe80bdc32569" translate="yes" xml:space="preserve">
          <source>The application callback</source>
          <target state="translated">アプリケーションのコールバック</target>
        </trans-unit>
        <trans-unit id="498cebd5386c08940274d180a46313b584299218" translate="yes" xml:space="preserve">
          <source>The application callback module</source>
          <target state="translated">アプリケーションのコールバックモジュール</target>
        </trans-unit>
        <trans-unit id="ce357182db7e39e7d54f85ac0fa8ea1bfe43cdcd" translate="yes" xml:space="preserve">
          <source>The application environment</source>
          <target state="translated">アプリケーション環境</target>
        </trans-unit>
        <trans-unit id="40917bb5c729fef80a4c140a2928d1f7a14bf4d7" translate="yes" xml:space="preserve">
          <source>The application environment can be overridden via the &lt;code&gt;-config&lt;/code&gt; option of &lt;code&gt;erl&lt;/code&gt;, as well as command-line options, as we are going to see below.</source>
          <target state="translated">以下で説明するように、アプリケーション環境は &lt;code&gt;erl&lt;/code&gt; の &lt;code&gt;-config&lt;/code&gt; オプションとコマンドラインオプションを使用してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="37789b75dd5f623e649e47a61f598fab65dfa7b6" translate="yes" xml:space="preserve">
          <source>The application environment should be reserved only for configurations that are truly global, for example, to control your application boot process and its supervision tree.</source>
          <target state="translated">アプリケーション環境は、アプリケーションのブートプロセスやその監視ツリーを制御するなど、真にグローバルな設定のためだけに予約されるべきです。</target>
        </trans-unit>
        <trans-unit id="280a9a5faaec5ff9e8215df748115db28ebee1a0" translate="yes" xml:space="preserve">
          <source>The application is located by analyzing the spec of all loaded applications. Returns &lt;code&gt;nil&lt;/code&gt; if the module is not listed in any application spec.</source>
          <target state="translated">ロードされたすべてのアプリケーションの仕様を分析して、アプリケーションを見つけます。モジュールがどのアプリケーション仕様にもリストされていない場合は、 &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="cc4a58ee1265d5c1fe9173d32bf0ac223249dd85" translate="yes" xml:space="preserve">
          <source>The application lifecycle</source>
          <target state="translated">アプリケーションのライフサイクル</target>
        </trans-unit>
        <trans-unit id="143141b825e19c759eb1a18e855e24abed92b957" translate="yes" xml:space="preserve">
          <source>The application resource file</source>
          <target state="translated">アプリケーションリソースファイル</target>
        </trans-unit>
        <trans-unit id="e3563cd3d1dfc3ea0fa27f37030c6816eb2657f5" translate="yes" xml:space="preserve">
          <source>The application works as a distributed key-value store. We are going to organize key-value pairs into buckets and distribute those buckets across multiple nodes. We will also build a simple client that allows us to connect to any of those nodes and send requests such as:</source>
          <target state="translated">このアプリケーションは、分散型のキー値ストアとして動作します。キーと値のペアをバケットに整理し、それらのバケットを複数のノードに分散させます。また、これらのノードに接続して以下のようなリクエストを送信できるシンプルなクライアントを構築します。</target>
        </trans-unit>
        <trans-unit id="d0f3ead845310ee387fe5a545e6953c55ffb1629" translate="yes" xml:space="preserve">
          <source>The argument can also be a compiled pattern:</source>
          <target state="translated">引数にはコンパイルされたパターンを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="591637cab81491d8824a1f871aa68b8d413473f1" translate="yes" xml:space="preserve">
          <source>The argument can be either a variable unquoted or in standard tuple form &lt;code&gt;{name, meta, context}&lt;/code&gt;.</source>
          <target state="translated">引数は、引用符で囲まれていない変数、または &lt;code&gt;{name, meta, context}&lt;/code&gt; 標準タプル形式のいずれかです。</target>
        </trans-unit>
        <trans-unit id="001d538e8d0cdf963d20a8cda73ecd32223786da" translate="yes" xml:space="preserve">
          <source>The arguments passed to the callbacks are related to the state optionally returned by &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt;, and are documented in the section about the callback module above.</source>
          <target state="translated">コールバックに渡される引数は、オプションで&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;によって返される状態に関連し、上記のコールバックモジュールに関するセクションに記載されています。</target>
        </trans-unit>
        <trans-unit id="2a881ae7cb35da41cfdaee7b5069205d1b09ab08" translate="yes" xml:space="preserve">
          <source>The atom encoder is not called for &lt;em&gt;all&lt;/em&gt; atoms that are present in the AST. It won't be invoked for the following atoms:</source>
          <target state="translated">アトムエンコーダーは、ASTに存在する&lt;em&gt;すべての&lt;/em&gt;アトムに対して呼び出されるわけではありません。次のアトムに対しては呼び出されません：</target>
        </trans-unit>
        <trans-unit id="b41ad89c98d422fd2e978f100782ecfe3f1da362" translate="yes" xml:space="preserve">
          <source>The attribute values will be available through &lt;code&gt;context.registered&lt;/code&gt;. Registered values are cleared after each &lt;a href=&quot;exunit.case#test/3&quot;&gt;&lt;code&gt;ExUnit.Case.test/3&lt;/code&gt;&lt;/a&gt; similar to &lt;code&gt;@tag&lt;/code&gt;.</source>
          <target state="translated">属性値は、 &lt;code&gt;context.registered&lt;/code&gt; を通じて利用できます。登録された値は、各&lt;a href=&quot;exunit.case#test/3&quot;&gt; &lt;code&gt;ExUnit.Case.test/3&lt;/code&gt; の&lt;/a&gt;後にクリアされます、 &lt;code&gt;@tag&lt;/code&gt; と同様に。</target>
        </trans-unit>
        <trans-unit id="8fadbc924b0cd6b0ad53d9ab7f75eafe50d08633" translate="yes" xml:space="preserve">
          <source>The available backends by default are:</source>
          <target state="translated">デフォルトで利用可能なバックエンドは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6cce71e8c20ef741ad606617e045711680af943f" translate="yes" xml:space="preserve">
          <source>The available color options are:</source>
          <target state="translated">利用可能なカラーオプションは</target>
        </trans-unit>
        <trans-unit id="6310c4c55c85283101be1a934d0a00206b4f631d" translate="yes" xml:space="preserve">
          <source>The backend needs to be started and running in order to be configured at runtime.</source>
          <target state="translated">実行時に設定するためには、バックエンドを起動して実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="96a787facf19135fb4b200f8b487060672819be8" translate="yes" xml:space="preserve">
          <source>The bag distance is meant to be an efficient approximation of the distance between two strings to quickly rule out strings that are largely different.</source>
          <target state="translated">バッグディスタンスは、2つの文字列間の距離を効率的に近似し、大きく異なる文字列を素早く除外することを目的としています。</target>
        </trans-unit>
        <trans-unit id="338ca5e9a146228c6591ce27e258c309b41537d7" translate="yes" xml:space="preserve">
          <source>The basic mechanism for spawning new processes is the auto-imported &lt;code&gt;spawn/1&lt;/code&gt; function:</source>
          <target state="translated">新しいプロセスを生成するための基本的なメカニズムは、自動インポートされます &lt;code&gt;spawn/1&lt;/code&gt; 関数です。</target>
        </trans-unit>
        <trans-unit id="4e7559ee61af701da957bbebc32b89de3be4e12f" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;a href=&quot;#ceil/2&quot;&gt;&lt;code&gt;ceil/2&lt;/code&gt;&lt;/a&gt; for floats can be surprising. For example:</source>
          <target state="translated">の行動 &lt;a href=&quot;#ceil/2&quot;&gt; &lt;code&gt;ceil/2&lt;/code&gt; &lt;/a&gt;floatに対する ceil / 2驚くべきものです。例えば：</target>
        </trans-unit>
        <trans-unit id="d56bb8e1dfaa2c0603350dcc324ff5c454da55f1" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;a href=&quot;#floor/2&quot;&gt;&lt;code&gt;floor/2&lt;/code&gt;&lt;/a&gt; for floats can be surprising. For example:</source>
          <target state="translated">の行動 &lt;a href=&quot;#floor/2&quot;&gt; &lt;code&gt;floor/2&lt;/code&gt; &lt;/a&gt;フロートに対する floor / 2驚くべきことです。例えば：</target>
        </trans-unit>
        <trans-unit id="038842fad2e4b3a86e4d5b65bf16dcbffaa55807" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;a href=&quot;#round/2&quot;&gt;&lt;code&gt;round/2&lt;/code&gt;&lt;/a&gt; for floats can be surprising. For example:</source>
          <target state="translated">の行動 &lt;a href=&quot;#round/2&quot;&gt; &lt;code&gt;round/2&lt;/code&gt; &lt;/a&gt;floatに対する round / 2驚くべきことです。例えば：</target>
        </trans-unit>
        <trans-unit id="850b8800d7a40702a94f4c6f350b76c00c714c91" translate="yes" xml:space="preserve">
          <source>The behaviour of any expression in a clause is the same as outside. For example, &lt;code&gt;=&lt;/code&gt; will raise a &lt;a href=&quot;matcherror&quot;&gt;&lt;code&gt;MatchError&lt;/code&gt;&lt;/a&gt; instead of returning the non-matched value:</source>
          <target state="translated">節内の式の動作は、外部と同じです。たとえば、 &lt;code&gt;=&lt;/code&gt; は&lt;a href=&quot;matcherror&quot;&gt; &lt;code&gt;MatchError&lt;/code&gt; &lt;/a&gt;一致しない値を返すのではなく MatchErrorを発生させます。</target>
        </trans-unit>
        <trans-unit id="2c2089b4c70310731d109bdd4cb28eac8386c5ba" translate="yes" xml:space="preserve">
          <source>The behaviours above are not guaranteed. We may remove or add new rules in the future. The goal of documenting them is to provide better understanding on what to expect from the formatter.</source>
          <target state="translated">上記の行動を保証するものではありません。将来的に新しいルールを削除したり、追加したりする可能性があります。これらのルールを文書化する目的は、フォーマッタに何を期待するかをよりよく理解してもらうことです。</target>
        </trans-unit>
        <trans-unit id="1b5532ea236231522d81c8ef60d96c8157a31b23" translate="yes" xml:space="preserve">
          <source>The best solution is to simply use the explicit module, function, and arguments APIs when working with distributed agents.</source>
          <target state="translated">最良の解決策は、分散エージェントを扱う際に、明示的なモジュール、関数、引数APIを単純に使用することです。</target>
        </trans-unit>
        <trans-unit id="230a7e78c26b7490aaeba0ccd0ad9d4d649d4144" translate="yes" xml:space="preserve">
          <source>The best way to get started with your first project is by calling &lt;code&gt;mix new my_project&lt;/code&gt; from the command line.</source>
          <target state="translated">最初のプロジェクトを始めるための最良の方法は、 &lt;code&gt;mix new my_project&lt;/code&gt; 、コマンドラインからmix new my_projectをです。</target>
        </trans-unit>
        <trans-unit id="d0bbf418b1f38a55ccb7dde48f0990ed9ed4760a" translate="yes" xml:space="preserve">
          <source>The binary module</source>
          <target state="translated">バイナリモジュール</target>
        </trans-unit>
        <trans-unit id="0b507e4caeeefa4e12188b817548237116e75e51" translate="yes" xml:space="preserve">
          <source>The booleans &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are also atoms:</source>
          <target state="translated">ブール値の &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;false&lt;/code&gt; もアトムです。</target>
        </trans-unit>
        <trans-unit id="173c29727301f1e8ee220ab1adbc4da76be15175" translate="yes" xml:space="preserve">
          <source>The bucket supervisor</source>
          <target state="translated">バケツ監修</target>
        </trans-unit>
        <trans-unit id="28ca52bc03d0c7c44e235ef531de8f5ba2e83b87" translate="yes" xml:space="preserve">
          <source>The building block of Elixir's AST is a call, such as:</source>
          <target state="translated">ElixirのASTの構成要素は、例えば呼び出しです。</target>
        </trans-unit>
        <trans-unit id="461328f5549d78a8b5fdedc116f07cd5036d784a" translate="yes" xml:space="preserve">
          <source>The building block of an Elixir program is a tuple with three elements. For example, the function call &lt;code&gt;sum(1, 2, 3)&lt;/code&gt; is represented internally as:</source>
          <target state="translated">Elixirプログラムの構成要素は、3つの要素を持つタプルです。たとえば、関数呼び出し &lt;code&gt;sum(1, 2, 3)&lt;/code&gt; は内部的に次のように表されます。</target>
        </trans-unit>
        <trans-unit id="bb521e80a89a4c39c427f904962402bd53b9f9e8" translate="yes" xml:space="preserve">
          <source>The built-in &lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;iodata/0&lt;/code&gt;&lt;/a&gt; type is defined in terms of &lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;iolist/0&lt;/code&gt;&lt;/a&gt;. An IO list is the same as IO data but it doesn't allow for a binary at the top level (but binaries are still allowed in the list itself).</source>
          <target state="translated">組み込みの&lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;iodata/0&lt;/code&gt; &lt;/a&gt;タイプは、&lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;iolist/0&lt;/code&gt; &lt;/a&gt;。IOリストはIOデータと同じですが、トップレベルでのバイナリは許可されていません（ただし、リスト自体ではバイナリは許可されています）。</target>
        </trans-unit>
        <trans-unit id="fa702ce8bbd071f4798263a3cd547b0d108c54b2" translate="yes" xml:space="preserve">
          <source>The built-in Elixir String module handles binaries that are UTF-8 encoded. &lt;a href=&quot;http://erlang.org/doc/man/binary.html&quot;&gt;The binary module&lt;/a&gt; is useful when you are dealing with binary data that is not necessarily UTF-8 encoded.</source>
          <target state="translated">組み込みのElixir Stringモジュールは、UTF-8でエンコードされたバイナリを処理します。 &lt;a href=&quot;http://erlang.org/doc/man/binary.html&quot;&gt;バイナリモジュール&lt;/a&gt;は、必ずしもUTF-8でエンコードされていないバイナリデータを処理する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="9912c6244d1c63cb84c34b3a68b26e804aecd085" translate="yes" xml:space="preserve">
          <source>The built-in calendar does not support leap seconds.</source>
          <target state="translated">内蔵カレンダーはうるう秒をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="b5d5a7fc225ff3dc99ea235a243bb670a176a9d8" translate="yes" xml:space="preserve">
          <source>The calling process is put into a waiting state where its memory allocation has been reduced as much as possible, which is useful if the process does not expect to receive any messages in the near future.</source>
          <target state="translated">呼び出したプロセスは、メモリ割り当てが可能な限り削減された待機状態に置かれますが、これは近い将来にメッセージの受信を期待していない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="2b5b064f8261c2b03a774df6e6ae6dcd0d5c8140" translate="yes" xml:space="preserve">
          <source>The canonical example for attributes is annotating that a module implements an OTP behaviour, such as &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">属性の標準的な例は、モジュールが&lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;などのOTP動作を実装していることを示しています。</target>
        </trans-unit>
        <trans-unit id="1347b7b88b5541d0e12b97a6af43a979bc085407" translate="yes" xml:space="preserve">
          <source>The capture operator can also be used to capture local functions, including private ones, and imported functions by omitting the module name:</source>
          <target state="translated">キャプチャ演算子は、プライベートなものを含むローカル関数や、モジュール名を省略してインポートした関数をキャプチャすることもできます。</target>
        </trans-unit>
        <trans-unit id="9ef5fce1b72abda5249ca40d94c6bba5adc71084" translate="yes" xml:space="preserve">
          <source>The capture operator can also be used to partially apply functions, where &lt;code&gt;&amp;amp;1&lt;/code&gt;, &lt;code&gt;&amp;amp;2&lt;/code&gt; and so on can be used as value placeholders. For example:</source>
          <target state="translated">キャプチャー演算子は、関数を部分的に適用するためにも使用できます。ここで、 &lt;code&gt;&amp;amp;1&lt;/code&gt; 、 &lt;code&gt;&amp;amp;2&lt;/code&gt; などを値のプレースホルダーとして使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="ed78fb3f56be122fa668d8b4473c09f744fcc1e2" translate="yes" xml:space="preserve">
          <source>The capture operator is most commonly used to capture a function with given name and arity from a module:</source>
          <target state="translated">capture演算子は、与えられた名前とアリティを持つ関数をモジュールからキャプチャするために最も一般的に使用されます。</target>
        </trans-unit>
        <trans-unit id="daa5b67ac4266d64104c7c678fbebf39b612b043" translate="yes" xml:space="preserve">
          <source>The changes we have performed above have broken our tests because the registry requires the &lt;code&gt;:name&lt;/code&gt; option when starting up. Furthermore, some registry operations such as &lt;code&gt;lookup/2&lt;/code&gt; require the name to be given as an argument, instead of a PID, so we can do the ETS table lookup. Let&amp;rsquo;s change the setup function in &lt;code&gt;test/kv/registry_test.exs&lt;/code&gt; to fix both issues:</source>
          <target state="translated">上記で行った変更は、レジストリが起動時に &lt;code&gt;:name&lt;/code&gt; オプションを必要とするため、テストに失敗しました。さらに、 &lt;code&gt;lookup/2&lt;/code&gt; などの一部のレジストリ操作では、PIDではなく名前を引数として指定する必要があるため、ETSテーブルの検索を実行できます。 &lt;code&gt;test/kv/registry_test.exs&lt;/code&gt; のセットアップ関数を変更して、両方の問題を修正しましょう。</target>
        </trans-unit>
        <trans-unit id="a0d4f7e1122a8b55f665626ee09ac09a98518fc5" translate="yes" xml:space="preserve">
          <source>The child specification contains 6 keys. The first two are required, and the remaining ones are optional:</source>
          <target state="translated">子仕様には6つのキーが含まれます。最初の2つは必須で、残りの2つはオプションです。</target>
        </trans-unit>
        <trans-unit id="7160687e53597f9f0ad549c50eef17c501e4af5e" translate="yes" xml:space="preserve">
          <source>The child specification describes how the supervisor starts, shuts down, and restarts child processes.</source>
          <target state="translated">子の仕様では、スーパーバイザが子プロセスを起動、シャットダウン、再起動する方法を説明しています。</target>
        </trans-unit>
        <trans-unit id="42da62bf1cce6040df7eca9209cf8b54396ada67" translate="yes" xml:space="preserve">
          <source>The child specification must exist and the corresponding child process must not be running.</source>
          <target state="translated">子指定が存在し、対応する子プロセスが実行されていない必要があります。</target>
        </trans-unit>
        <trans-unit id="313526f010da8f629d585c9d88474ee1e8f4898f" translate="yes" xml:space="preserve">
          <source>The children is a list of modules, two-element tuples with module and arguments or a map with the child specification. A strategy is required to be provided through the &lt;code&gt;:strategy&lt;/code&gt; option. See &quot;start_link/2, init/2, and strategies&quot; for examples and other options.</source>
          <target state="translated">子は、モジュールのリスト、モジュールと引数を持つ2要素のタプル、または子の仕様を持つマップです。 &lt;code&gt;:strategy&lt;/code&gt; オプションを通じて戦略を提供する必要があります。例とその他のオプションについては、「start_link / 2、init / 2、および戦略」を参照してください。</target>
        </trans-unit>
        <trans-unit id="53b9ca94898155cae15db3cc7ef654f0bd4da634" translate="yes" xml:space="preserve">
          <source>The choice between &lt;code&gt;:do&lt;/code&gt; keyword and &lt;code&gt;do/end&lt;/code&gt; blocks is left to the user</source>
          <target state="translated">&lt;code&gt;:do&lt;/code&gt; キーワードと &lt;code&gt;do/end&lt;/code&gt; ブロックの選択はユーザーに任されます</target>
        </trans-unit>
        <trans-unit id="7b1b61c1ee1c04db8df86f79837449227f41eae5" translate="yes" xml:space="preserve">
          <source>The choice between parens and no parens is a matter of preference.</source>
          <target state="translated">パレンとパレンなしの選択は好みの問題です。</target>
        </trans-unit>
        <trans-unit id="a3a0a29c159eb1228d94714c1b6b06e0b32d7a74" translate="yes" xml:space="preserve">
          <source>The choice of parens and no parens also affects indentation. When a function call with parens doesn't fit on the same line, the formatter introduces a newline around parens and indents the arguments with two spaces:</source>
          <target state="translated">パレンの有無の選択はインデントにも影響します。パレンを含む関数呼び出しが同じ行に収まらない場合、フォーマッタはパレンの周りに改行を導入し、引数を2つのスペースでインデントします。</target>
        </trans-unit>
        <trans-unit id="23594e68f8f770603c0ad519dc9b20dde3e76ac3" translate="yes" xml:space="preserve">
          <source>The clause above will only be invoked if the user's age is more than or equal to 16. A more complete introduction to guards is available &lt;a href=&quot;guards&quot;&gt;in the Guards page&lt;/a&gt;.</source>
          <target state="translated">上記の条項は、ユーザーの年齢が16歳以上の場合にのみ呼び出されます。Guardsの詳細について&lt;a href=&quot;guards&quot;&gt;は、Guardsページをご覧ください。&lt;/a&gt;。。</target>
        </trans-unit>
        <trans-unit id="c255b3390bdbf75961fab635ba6b005f6d757746" translate="yes" xml:space="preserve">
          <source>The client sends the given &lt;code&gt;request&lt;/code&gt; to the server and waits until a reply arrives or a timeout occurs. &lt;a href=&quot;#c:handle_call/3&quot;&gt;&lt;code&gt;handle_call/3&lt;/code&gt;&lt;/a&gt; will be called on the server to handle the request.</source>
          <target state="translated">クライアントは指定された &lt;code&gt;request&lt;/code&gt; をサーバーに送信し、応答が到着するかタイムアウトが発生するまで待機します。&lt;a href=&quot;#c:handle_call/3&quot;&gt; &lt;code&gt;handle_call/3&lt;/code&gt; &lt;/a&gt;は、リクエストを処理するためにサーバーで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d9950721b47bf760ca7644941dac9e25516ba4de" translate="yes" xml:space="preserve">
          <source>The closest representable number to 0.01 is 0.0099999997</source>
          <target state="translated">0.01 に最も近い表現可能な数は 0.0099999997 です。</target>
        </trans-unit>
        <trans-unit id="94f439e6735d38fbe26e845fc67b04161ed13286" translate="yes" xml:space="preserve">
          <source>The closest representable number to 0.1 is 0.1000000014</source>
          <target state="translated">0.1に最も近い表現可能な数は、0.1000000014です。</target>
        </trans-unit>
        <trans-unit id="a2e208db8b2d737003cfa026657e7817cb56f94b" translate="yes" xml:space="preserve">
          <source>The code above has very long lines and running the formatter is not going to address this issue. In fact, the formatter may make it more obvious that you have complex expressions:</source>
          <target state="translated">上のコードは非常に長い行を持っており、フォーマッタを実行してもこの問題は解決しません。実際、フォーマッタを実行すると、複雑な式を持っていることがより明らかになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="8971296bf8b5fe352cb67c40d256dea059794cfe" translate="yes" xml:space="preserve">
          <source>The code above says we are only bringing in the functions from &lt;code&gt;MyLib&lt;/code&gt; so we can invoke &lt;code&gt;some_fun(arg1, arg2)&lt;/code&gt; directly without the &lt;code&gt;MyLib.&lt;/code&gt; prefix. Even more important, &lt;code&gt;import MyLib&lt;/code&gt; says that we have an option to not &lt;code&gt;import MyLib&lt;/code&gt; at all as we can simply invoke the function as &lt;code&gt;MyLib.some_fun(arg1, arg2)&lt;/code&gt;.</source>
          <target state="translated">上記のコードでは、関数を &lt;code&gt;MyLib&lt;/code&gt; から取り込むだけなので、 &lt;code&gt;MyLib.&lt;/code&gt; なしで &lt;code&gt;some_fun(arg1, arg2)&lt;/code&gt; 直接呼び出すことができます。接頭辞。さらに重要なのは、 &lt;code&gt;import MyLib&lt;/code&gt; 、我々がないオプションがあることを述べている &lt;code&gt;import MyLib&lt;/code&gt; 、我々は単に機能呼び出すことができるように、すべての &lt;code&gt;MyLib.some_fun(arg1, arg2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09481c86dbd26d18c6fe8e729156a7702b288946" translate="yes" xml:space="preserve">
          <source>The code above will be kept with one keyword entry per line by the formatter. To avoid that, just squash everything into a single line.</source>
          <target state="translated">上記のコードは、フォーマッタによって1行に1つのキーワード入力で保持されます。これを避けるためには、すべてを一行にまとめてください。</target>
        </trans-unit>
        <trans-unit id="5a5a8b1aa48591121657910360da4599001ef7e7" translate="yes" xml:space="preserve">
          <source>The code above will fail because the &lt;code&gt;=&lt;/code&gt; operator always fails when the sides do not match and &lt;a href=&quot;#refute/2&quot;&gt;&lt;code&gt;refute/2&lt;/code&gt;&lt;/a&gt; does not change it.</source>
          <target state="translated">上記のコードは、両側が一致せず&lt;a href=&quot;#refute/2&quot;&gt; &lt;code&gt;refute/2&lt;/code&gt; になる&lt;/a&gt;と &lt;code&gt;=&lt;/code&gt; 演算子が常に失敗するため、失敗します。が変更しない。</target>
        </trans-unit>
        <trans-unit id="d1a28899a290431210335f780f9a3a344e1bdaa4" translate="yes" xml:space="preserve">
          <source>The code above will work but issue a warning: &lt;code&gt;variable &quot;a&quot; is unused&lt;/code&gt;. The macro is overriding the original value and the original value is never used.</source>
          <target state="translated">上記のコードは機能しますが、警告を出します： &lt;code&gt;variable &quot;a&quot; is unused&lt;/code&gt; 。マクロは元の値を上書きしており、元の値が使用されることはありません。</target>
        </trans-unit>
        <trans-unit id="269d3d7086c8d03fa3a689c409e633046b40f522" translate="yes" xml:space="preserve">
          <source>The code above would have the same flaw: if we link the &lt;code&gt;serve(client)&lt;/code&gt; task to the acceptor, a crash when serving a request would bring the acceptor, and consequently all other connections, down.</source>
          <target state="translated">上記のコードにも同じ欠陥があります： &lt;code&gt;serve(client)&lt;/code&gt; をリンクするとタスクをアクセプターにすると、リクエストを処理するときにクラッシュすると、アクセプターが停止し、その結果、他のすべての接続がダウンします。</target>
        </trans-unit>
        <trans-unit id="89723bc3e0f1ff8256d889a81362651a037ba774" translate="yes" xml:space="preserve">
          <source>The code is now more readable, as it is now clear which functions are part of your API and which ones are callback implementations. To reinforce this idea, &lt;code&gt;@impl true&lt;/code&gt; automatically marks the function as &lt;code&gt;@doc false&lt;/code&gt;, disabling documentation unless &lt;code&gt;@doc&lt;/code&gt; is explicitly set.</source>
          <target state="translated">APIの一部である関数とコールバック実装である関数が明確になったため、コードが読みやすくなりました。このアイデアを強化するために、 &lt;code&gt;@impl true&lt;/code&gt; は関数を &lt;code&gt;@doc false&lt;/code&gt; として自動的にマークし、 &lt;code&gt;@doc&lt;/code&gt; ない限りドキュメントを無効にしますが明示的に設定されてい。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
