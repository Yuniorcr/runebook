<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="elixir">
    <body>
      <group id="elixir">
        <trans-unit id="f364101757fd7b07c462556f8631107344aea9a7" translate="yes" xml:space="preserve">
          <source>Anti-patterns</source>
          <target state="translated">Anti-patterns</target>
        </trans-unit>
        <trans-unit id="bf6f13831a7432164063eab288ffb17f48516527" translate="yes" xml:space="preserve">
          <source>Any Elixir code can be represented using Elixir data structures. The building block of Elixir macros is a tuple with three elements, for example:</source>
          <target state="translated">Elixirのコードは、Elixirのデータ構造を使って表現することができます。Elixirマクロの構成要素は、例えば3つの要素を持つタプルです。</target>
        </trans-unit>
        <trans-unit id="cc4013b8d32a07ea1cafd334cef7889bf5c90d15" translate="yes" xml:space="preserve">
          <source>Any arbitrary configuration can also be passed to &lt;a href=&quot;#configure/1&quot;&gt;&lt;code&gt;configure/1&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#start/1&quot;&gt;&lt;code&gt;start/1&lt;/code&gt;&lt;/a&gt;, and these options can then be used in places such as custom formatters. These other options will be ignored by ExUnit itself.</source>
          <target state="translated">任意の構成を&lt;a href=&quot;#configure/1&quot;&gt; &lt;code&gt;configure/1&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#start/1&quot;&gt; &lt;code&gt;start/1&lt;/code&gt; &lt;/a&gt;に渡して、これらのオプションをカスタムフォーマッターなどの場所で使用することもできます。これらの他のオプションは、ExUnit自体によって無視されます。</target>
        </trans-unit>
        <trans-unit id="ddb0b53128202d492ea01bc6e15be1d122ecf8de" translate="yes" xml:space="preserve">
          <source>Any developer can create their own &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; backend. Since &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; is an event manager powered by &lt;code&gt;:gen_event&lt;/code&gt;, writing a new backend is a matter of creating an event handler, as described in the &lt;a href=&quot;http://erlang.org/doc/man/gen_event.html&quot;&gt;&lt;code&gt;:gen_event&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">すべての開発者が独自の&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;バックエンドを作成できます。以来&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; は&lt;/a&gt;によって供給イベントマネージャである &lt;code&gt;:gen_event&lt;/code&gt; で説明したように、新しいバックエンドを書くことは、イベントハンドラを作成する問題です&lt;a href=&quot;http://erlang.org/doc/man/gen_event.html&quot;&gt; &lt;code&gt;:gen_event&lt;/code&gt; &lt;/a&gt;ドキュメント。</target>
        </trans-unit>
        <trans-unit id="0eda7adbc051844f9bb1f76988dfdbc8ee614b71" translate="yes" xml:space="preserve">
          <source>Any expression is allowed to serve as a default value, but it won&amp;rsquo;t be evaluated during the function definition. Every time the function is invoked and any of its default values have to be used, the expression for that default value will be evaluated:</source>
          <target state="translated">任意の式をデフォルト値として使用できますが、関数の定義中には評価されません。関数が呼び出され、そのデフォルト値のいずれかを使用する必要があるたびに、そのデフォルト値の式が評価されます。</target>
        </trans-unit>
        <trans-unit id="51294445c2892caace0f93beba65cca2df4db722" translate="yes" xml:space="preserve">
          <source>Any functions may be called when defining a module attribute.</source>
          <target state="translated">モジュール属性を定義する際には、任意の関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="168da730b1d34c5154e469d6a2c57e8cc938548d" translate="yes" xml:space="preserve">
          <source>Any map/struct that contains the date fields</source>
          <target state="translated">日付フィールドを含むすべてのマップ/構造体</target>
        </trans-unit>
        <trans-unit id="6009b6eb66ee2e5f4fe90dd4f8cc38fa5add92f6" translate="yes" xml:space="preserve">
          <source>Any map/struct that contains the datetime fields</source>
          <target state="translated">datetimeフィールドを含むすべてのマップ/構造体</target>
        </trans-unit>
        <trans-unit id="bdac0a5a4c31c821fbdf66fa2f00b8ebf1826565" translate="yes" xml:space="preserve">
          <source>Any map/struct that contains the naive_datetime fields</source>
          <target state="translated">naive_datetimeフィールドを含むすべてのマップ/構造体</target>
        </trans-unit>
        <trans-unit id="c72e818c080afa7ce37cf5ba8b92ceb1c5d794de" translate="yes" xml:space="preserve">
          <source>Any map/struct that contains the time fields</source>
          <target state="translated">時間フィールドを含む任意のマップ/構造体</target>
        </trans-unit>
        <trans-unit id="f0169052fc32e3ac2806fe55bbfa851febc0b349" translate="yes" xml:space="preserve">
          <source>Any module is also able to define its own types and the modules in Elixir are no exception. For example, the &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; module defines a &lt;a href=&quot;t:Range.t/0&quot;&gt;&lt;code&gt;t/0&lt;/code&gt;&lt;/a&gt; type that represents a range: this type can be referred to as &lt;a href=&quot;range#t:t/0&quot;&gt;&lt;code&gt;Range.t/0&lt;/code&gt;&lt;/a&gt;. In a similar fashion, a string is &lt;a href=&quot;string#t:t/0&quot;&gt;&lt;code&gt;String.t/0&lt;/code&gt;&lt;/a&gt;, any enumerable can be &lt;a href=&quot;enum#t:t/0&quot;&gt;&lt;code&gt;Enum.t/0&lt;/code&gt;&lt;/a&gt;, and so on.</source>
          <target state="translated">どのモジュールでも独自のタイプを定義でき、Elixirのモジュールも例外ではありません。たとえば、&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;モジュールは範囲を表す&lt;a href=&quot;t:Range.t/0&quot;&gt; &lt;code&gt;t/0&lt;/code&gt; &lt;/a&gt;型を定義します。この型は&lt;a href=&quot;range#t:t/0&quot;&gt; &lt;code&gt;Range.t/0&lt;/code&gt; &lt;/a&gt;と呼ばれます。同様に、文字列は&lt;a href=&quot;string#t:t/0&quot;&gt; &lt;code&gt;String.t/0&lt;/code&gt; &lt;/a&gt;であり、列挙可能なものは&lt;a href=&quot;enum#t:t/0&quot;&gt; &lt;code&gt;Enum.t/0&lt;/code&gt; &lt;/a&gt;などです。</target>
        </trans-unit>
        <trans-unit id="8630a55fc792a79de5fdbeb3cf17c110eb8b5440" translate="yes" xml:space="preserve">
          <source>Any module that contains a call to the &lt;a href=&quot;#defexception/1&quot;&gt;&lt;code&gt;defexception/1&lt;/code&gt;&lt;/a&gt; macro automatically implements the &lt;a href=&quot;exception#c:exception/1&quot;&gt;&lt;code&gt;Exception.exception/1&lt;/code&gt;&lt;/a&gt; callback expected by &lt;a href=&quot;#raise/2&quot;&gt;&lt;code&gt;raise/2&lt;/code&gt;&lt;/a&gt;. For more information, see &lt;a href=&quot;#defexception/1&quot;&gt;&lt;code&gt;defexception/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#defexception/1&quot;&gt; &lt;code&gt;defexception/1&lt;/code&gt; &lt;/a&gt;マクロの呼び出しを含むすべてのモジュールは、&lt;a href=&quot;#raise/2&quot;&gt; &lt;code&gt;raise/2&lt;/code&gt; が&lt;/a&gt;期待する&lt;a href=&quot;exception#c:exception/1&quot;&gt; &lt;code&gt;Exception.exception/1&lt;/code&gt; &lt;/a&gt;コールバックを自動的に実装します。詳細については、&lt;a href=&quot;#defexception/1&quot;&gt; &lt;code&gt;defexception/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="75747731e474a8178e05e264cb1563d939c05224" translate="yes" xml:space="preserve">
          <source>Any other exit reason will cause the operating system process to exit with status &lt;code&gt;1&lt;/code&gt; and linked Erlang processes to crash.</source>
          <target state="translated">その他の終了理由により、オペレーティングシステムプロセスがステータス &lt;code&gt;1&lt;/code&gt; で終了し、リンクされたErlangプロセスがクラッシュします。</target>
        </trans-unit>
        <trans-unit id="0f5f30288dbfabd82f00bbad3a6e84be7fe32c88" translate="yes" xml:space="preserve">
          <source>Any other value, such as a map or a four-element tuple, must be escaped (&lt;a href=&quot;macro#escape/1&quot;&gt;&lt;code&gt;Macro.escape/1&lt;/code&gt;&lt;/a&gt;) before being introduced into an AST.</source>
          <target state="translated">マップや4要素のタプルなどの他の値は、ASTに導入する前にエスケープする必要があります（&lt;a href=&quot;macro#escape/1&quot;&gt; &lt;code&gt;Macro.escape/1&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="21dbf38e245345b7875ff893e598c955362174cf" translate="yes" xml:space="preserve">
          <source>Any protocol module contains three extra functions:</source>
          <target state="translated">任意のプロトコルモジュールには、3つの追加関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="9f90ff0f062168c098cc8f21cea2c19c727f8a1e" translate="yes" xml:space="preserve">
          <source>Appends a path to the end of the Erlang VM code path list.</source>
          <target state="translated">Erlang VMのコードパスリストの最後にパスを追加します。</target>
        </trans-unit>
        <trans-unit id="b291beb8793f4f3308c463951165dad483715a6c" translate="yes" xml:space="preserve">
          <source>Application</source>
          <target state="translated">Application</target>
        </trans-unit>
        <trans-unit id="97e8780936863ac8125cd13898e95fb6c124a954" translate="yes" xml:space="preserve">
          <source>Application &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">アプリケーションの&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1631e1c82584aae550c9008087504b1cc7b074ed" translate="yes" xml:space="preserve">
          <source>Application callback modules may also implement the optional callback &lt;a href=&quot;#c:prep_stop/1&quot;&gt;&lt;code&gt;prep_stop/1&lt;/code&gt;&lt;/a&gt;. If present, &lt;a href=&quot;#c:prep_stop/1&quot;&gt;&lt;code&gt;prep_stop/1&lt;/code&gt;&lt;/a&gt; is invoked before the supervision tree is terminated. Its argument is the state returned by &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt;, if it did, or &lt;code&gt;[]&lt;/code&gt; otherwise, and its return value is passed to &lt;a href=&quot;#c:stop/1&quot;&gt;&lt;code&gt;stop/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アプリケーションコールバックモジュールは、オプションのコールバック&lt;a href=&quot;#c:prep_stop/1&quot;&gt; &lt;code&gt;prep_stop/1&lt;/code&gt; &lt;/a&gt;も実装できます。存在する場合、監視ツリーが終了する前に&lt;a href=&quot;#c:prep_stop/1&quot;&gt; &lt;code&gt;prep_stop/1&lt;/code&gt; &lt;/a&gt;が呼び出されます。その引数は、もしあれば&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt;によって返された状態であり、そうでなければ &lt;code&gt;[]&lt;/code&gt; であり、その戻り値は&lt;a href=&quot;#c:stop/1&quot;&gt; &lt;code&gt;stop/1&lt;/code&gt; に&lt;/a&gt;渡されます。</target>
        </trans-unit>
        <trans-unit id="1ce84d4d04cdd60bd8ab75207bda952026831b49" translate="yes" xml:space="preserve">
          <source>Application configuration</source>
          <target state="translated">アプリケーションの設定</target>
        </trans-unit>
        <trans-unit id="eb463fa74d812fcc05af997894ad4ba18a4c240c" translate="yes" xml:space="preserve">
          <source>Application configuration - must be set before the &lt;code&gt;:logger&lt;/code&gt; application is started</source>
          <target state="translated">アプリケーション構成- &lt;code&gt;:logger&lt;/code&gt; アプリケーションを開始する前に設定する必要があります</target>
        </trans-unit>
        <trans-unit id="6bfdc5f066d27eac11710638a304662a34399413" translate="yes" xml:space="preserve">
          <source>Application environment</source>
          <target state="translated">アプリケーション環境</target>
        </trans-unit>
        <trans-unit id="133263b1a0a761afc7a839c1e0d9f30d4370bf27" translate="yes" xml:space="preserve">
          <source>Applications are &lt;em&gt;loaded&lt;/em&gt;, which means that the runtime finds and processes their resource files:</source>
          <target state="translated">アプリケーションが&lt;em&gt;読み込まれ&lt;/em&gt;ます。つまり、ランタイムはリソースファイルを見つけて処理します。</target>
        </trans-unit>
        <trans-unit id="72f9cc4dac3452357e96e709303ddb464195b4c3" translate="yes" xml:space="preserve">
          <source>Applications are also &lt;em&gt;started&lt;/em&gt;:</source>
          <target state="translated">アプリケーションも&lt;em&gt;開始され&lt;/em&gt;ます：</target>
        </trans-unit>
        <trans-unit id="8e022aa7ab84d060d734fd766d3347c2181f8ccb" translate="yes" xml:space="preserve">
          <source>Applications are specified in their &lt;a href=&quot;http://erlang.org/doc/man/app.html&quot;&gt;&lt;em&gt;resource file&lt;/em&gt;&lt;/a&gt;, which is a file called &lt;code&gt;APP.app&lt;/code&gt;, where &lt;code&gt;APP&lt;/code&gt; is the application name. For example, the application resource file of the OTP application &lt;code&gt;ex_unit&lt;/code&gt; is called &lt;code&gt;ex_unit.app&lt;/code&gt;.</source>
          <target state="translated">アプリケーションは、その中で指定され&lt;a href=&quot;http://erlang.org/doc/man/app.html&quot;&gt;&lt;em&gt;たリソースファイル&lt;/em&gt;&lt;/a&gt;と呼ばれるファイルで、 &lt;code&gt;APP.app&lt;/code&gt; 、 &lt;code&gt;APP&lt;/code&gt; はアプリケーション名です。たとえば、OTPアプリケーション &lt;code&gt;ex_unit&lt;/code&gt; のアプリケーションリソースファイルはex_unit.appと呼ばれ &lt;code&gt;ex_unit.app&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43a3c55fce58945b7955ada014ceb15badbab6c6" translate="yes" xml:space="preserve">
          <source>Applications are the idiomatic way to package software in Erlang/OTP. To get the idea, they are similar to the &quot;library&quot; concept common in other programming languages, but with some additional characteristics.</source>
          <target state="translated">アプリケーションはErlang/OTPでソフトウェアをパッケージ化するための慣用的な方法です。他のプログラミング言語で一般的な &quot;ライブラリ &quot;の概念に似ていますが、いくつかの特徴を持っています。</target>
        </trans-unit>
        <trans-unit id="b4dbd62a16fa04d91bfc40f06c512edf333a1fbe" translate="yes" xml:space="preserve">
          <source>Applications with supervision tree</source>
          <target state="translated">監督の木が付いているアプリケーション</target>
        </trans-unit>
        <trans-unit id="bac054c1e14c519b199d2517df6a0101c94441d1" translate="yes" xml:space="preserve">
          <source>Applies the given function to each element in the &lt;code&gt;enumerable&lt;/code&gt;, storing the result in a list and passing it as the accumulator for the next computation. Uses the first element in the &lt;code&gt;enumerable&lt;/code&gt; as the starting value.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の各要素に指定された関数を適用し、結果をリストに格納して、次の計算のアキュムレータとして渡します。 &lt;code&gt;enumerable&lt;/code&gt; 値の最初の要素を開始値として使用します。</target>
        </trans-unit>
        <trans-unit id="2f961980e9fba3a80a3fe84a5a33a282dd684b9a" translate="yes" xml:space="preserve">
          <source>Applies the given function to each element in the &lt;code&gt;enumerable&lt;/code&gt;, storing the result in a list and passing it as the accumulator for the next computation. Uses the given &lt;code&gt;acc&lt;/code&gt; as the starting value.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の各要素に指定された関数を適用し、結果をリストに格納して、次の計算のアキュムレータとして渡します。指定された &lt;code&gt;acc&lt;/code&gt; を開始値として使用します。</target>
        </trans-unit>
        <trans-unit id="71a330535e646341a3e67bdc7aa7099b09d7d159" translate="yes" xml:space="preserve">
          <source>Applies the given function to the node metadata if it contains one.</source>
          <target state="translated">与えられた関数がノードのメタデータに含まれている場合、その関数を適用します。</target>
        </trans-unit>
        <trans-unit id="41ed7b8f7c8e97d4eaa49d91cf5d985f2894e409" translate="yes" xml:space="preserve">
          <source>ArgumentError</source>
          <target state="translated">ArgumentError</target>
        </trans-unit>
        <trans-unit id="05067852bd2137fdf10aad2ca39e484ed4d4c628" translate="yes" xml:space="preserve">
          <source>ArgumentError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ArgumentError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="0953d0a8d8a481b72be4dd1a2e649d93e22bf086" translate="yes" xml:space="preserve">
          <source>Arguments given to the alias will be appended to the arguments of the last task in the list, if the last task is a function they will be given as a list of strings to the function.</source>
          <target state="translated">エイリアスに与えられた引数はリストの最後のタスクの引数に追加され、最後のタスクが関数である場合は関数への文字列のリストとして与えられます。</target>
        </trans-unit>
        <trans-unit id="655bc33009493f707144bb646531efed13876152" translate="yes" xml:space="preserve">
          <source>Arithmetic addition.</source>
          <target state="translated">算数の足し算。</target>
        </trans-unit>
        <trans-unit id="9681d96eaf931c989e28ccf9f0440d77ba06dd99" translate="yes" xml:space="preserve">
          <source>Arithmetic division.</source>
          <target state="translated">算数の割り算。</target>
        </trans-unit>
        <trans-unit id="4a61e0447f1394155d9609b0e8ddd9ef54c528e0" translate="yes" xml:space="preserve">
          <source>Arithmetic multiplication.</source>
          <target state="translated">算数の掛け算。</target>
        </trans-unit>
        <trans-unit id="da79f19cf7e168e8190dfbc95a70f65090f55686" translate="yes" xml:space="preserve">
          <source>Arithmetic subtraction.</source>
          <target state="translated">算術の引き算。</target>
        </trans-unit>
        <trans-unit id="1a3bb43ad05ec69548de8b5dbef76098f6a10101" translate="yes" xml:space="preserve">
          <source>Arithmetic unary minus.</source>
          <target state="translated">算術単項マイナス。</target>
        </trans-unit>
        <trans-unit id="cf96a5cfba060ff295e5568cfb369fe78d6a4661" translate="yes" xml:space="preserve">
          <source>Arithmetic unary plus.</source>
          <target state="translated">算術単項プラス。</target>
        </trans-unit>
        <trans-unit id="5509c94c0f9f738717633e15c4c8dbc85e63a4c9" translate="yes" xml:space="preserve">
          <source>ArithmeticError</source>
          <target state="translated">ArithmeticError</target>
        </trans-unit>
        <trans-unit id="8a7db15e8806afedd47b1c010408683e54e7f2aa" translate="yes" xml:space="preserve">
          <source>ArithmeticError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">ArithmeticError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8a481eb9afcf30f19b235a484387c683a5bc9ce7" translate="yes" xml:space="preserve">
          <source>As &amp;ldquo;constants&amp;rdquo;</source>
          <target state="translated">「定数」として</target>
        </trans-unit>
        <trans-unit id="5a534e4a24eb4e108c8c81b831db9cad75e840a4" translate="yes" xml:space="preserve">
          <source>As IEx evaluates its input line by line, it will first encounter &lt;code&gt;[1, [2], 3]&lt;/code&gt;. As a list is a valid expression, IEx will evaluate it immediately before looking at the next input line. Only then will IEx attempt to evaluate the now incomplete expression &lt;code&gt;|&amp;gt; List.flatten()&lt;/code&gt;, which on its own is missing its left operand. The evaluation thus fails with the above syntax error.</source>
          <target state="translated">IExはその入力を行ごとに評価するため、最初に &lt;code&gt;[1, [2], 3]&lt;/code&gt; ます。リストは有効な式であるため、IExは次の入力行を調べる直前にそれを評価します。 &lt;code&gt;|&amp;gt; List.flatten()&lt;/code&gt; 、IExは、まだ不完全な式|&amp;gt; List.flatten（）を評価しようとしますが、それだけでは左のオペランドがありません。したがって、評価は上記の構文エラーで失敗します。</target>
        </trans-unit>
        <trans-unit id="af041e603020699ecc4a407c05175708814edeb5" translate="yes" xml:space="preserve">
          <source>As a library author, it is your responsibility to make sure users are not required to use exceptions for control-flow in their applications. You can follow the same convention as Elixir here, using the name without &lt;code&gt;!&lt;/code&gt; for returning &lt;code&gt;:ok&lt;/code&gt;/&lt;code&gt;:error&lt;/code&gt; tuples and appending &lt;code&gt;!&lt;/code&gt; for a version of the function which raises an exception.</source>
          <target state="translated">ライブラリの作成者は、ユーザーがアプリケーションで制御フローの例外を使用する必要がないことを確認する必要があります。Elixirと同じ規則に従うことができますが、 &lt;code&gt;!&lt;/code&gt; なしの名前を使用できます。 &lt;code&gt;:ok&lt;/code&gt; / &lt;code&gt;:error&lt;/code&gt; タプルを返し、追加する &lt;code&gt;!&lt;/code&gt; 例外を発生させる関数のバージョン。</target>
        </trans-unit>
        <trans-unit id="77c3cf325603a665b9b8eac02035614c9c18c7ae" translate="yes" xml:space="preserve">
          <source>As a provider</source>
          <target state="translated">プロバイダーとして</target>
        </trans-unit>
        <trans-unit id="99a1d5c639e5fae94bea39706a508ae1b1b194aa" translate="yes" xml:space="preserve">
          <source>As a rule of thumb, use &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; and &lt;code&gt;not&lt;/code&gt; when you are expecting booleans. If any of the arguments are non-boolean, use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">親指、使用の原則として &lt;code&gt;and&lt;/code&gt; 、 &lt;code&gt;or&lt;/code&gt; および &lt;code&gt;not&lt;/code&gt; あなたが真偽値を期待しているとき。いずれかの引数がブール値でない場合は、 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;||&lt;/code&gt; を使用します そして &lt;code&gt;!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d342dd5680ead35a3c501294db776be8ca86c04" translate="yes" xml:space="preserve">
          <source>As a short summary, prefer to using the &lt;code&gt;:spawn&lt;/code&gt; and &lt;code&gt;:spawn_executable&lt;/code&gt; options mentioned below. The other two options, &lt;code&gt;:spawn_driver&lt;/code&gt; and &lt;code&gt;:fd&lt;/code&gt; are for advanced usage within the VM. Also consider using &lt;a href=&quot;system#cmd/3&quot;&gt;&lt;code&gt;System.cmd/3&lt;/code&gt;&lt;/a&gt; if all you want is to execute a program and retrieve its return value.</source>
          <target state="translated">簡単にまとめると、下記の &lt;code&gt;:spawn&lt;/code&gt; および &lt;code&gt;:spawn_executable&lt;/code&gt; オプションの使用をお勧めします。他の2つのオプション、 &lt;code&gt;:spawn_driver&lt;/code&gt; と &lt;code&gt;:fd&lt;/code&gt; は、VM内の高度な使用法です。プログラムを実行してその戻り値を取得するだけの場合は、&lt;a href=&quot;system#cmd/3&quot;&gt; &lt;code&gt;System.cmd/3&lt;/code&gt; の&lt;/a&gt;使用も検討してください。</target>
        </trans-unit>
        <trans-unit id="cb104516ec4ba9c5daae1d819dfced70e5b80a3a" translate="yes" xml:space="preserve">
          <source>As a starting point, let&amp;rsquo;s define a release that includes both &lt;code&gt;:kv_server&lt;/code&gt; and &lt;code&gt;:kv&lt;/code&gt; applications. We will also add a version to it. Open up the &lt;code&gt;mix.exs&lt;/code&gt; in the umbrella root and add inside &lt;code&gt;def project&lt;/code&gt;:</source>
          <target state="translated">開始点として、 &lt;code&gt;:kv_server&lt;/code&gt; と &lt;code&gt;:kv&lt;/code&gt; アプリケーションの両方を含むリリースを定義しましょう。また、それにバージョンを追加します。アンブレラルートで &lt;code&gt;mix.exs&lt;/code&gt; を開き、内部に &lt;code&gt;def project&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="71409663988da93d2218196a4f8d08db41758aae" translate="yes" xml:space="preserve">
          <source>As an alternative to &lt;code&gt;Enum&lt;/code&gt;, Elixir provides &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;the &lt;code&gt;Stream&lt;/code&gt; module&lt;/a&gt; which supports lazy operations:</source>
          <target state="translated">&lt;code&gt;Enum&lt;/code&gt; の代わりに、Elixirは遅延操作をサポート&lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;する &lt;code&gt;Stream&lt;/code&gt; モジュール&lt;/a&gt;を提供します：</target>
        </trans-unit>
        <trans-unit id="1e751881fcb15d693b8ad4d4a8a7706bd11e93e1" translate="yes" xml:space="preserve">
          <source>As an example, &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt;&lt;code&gt;ExUnit&lt;/code&gt;&lt;/a&gt; stores the AST of every assertion, so when an assertion fails we can show code snippets to users. Without this option, each time the test module is compiled, we get a different MD5 of the module byte code, because the AST contains metadata, such as counters, specific to the compilation environment. By pruning the metadata, we ensure that the module is deterministic and reduce the amount of data &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt;&lt;code&gt;ExUnit&lt;/code&gt;&lt;/a&gt; needs to keep around.</source>
          <target state="translated">例として、&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt; &lt;code&gt;ExUnit&lt;/code&gt; &lt;/a&gt;はすべてのアサーションのASTを保存するため、アサーションが失敗したときにコードスニペットをユーザーに表示できます。このオプションを使用しない場合、ASTにはコンパイル環境に固有のカウンターなどのメタデータが含まれるため、テストモジュールがコンパイルされるたびに、モジュールバイトコードの異なるMD5が取得されます。メタデータをプルーニングすることにより、モジュールが確定的であることを確認し、&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html&quot;&gt; &lt;code&gt;ExUnit&lt;/code&gt; &lt;/a&gt;が保持する必要があるデータの量を削減します。</target>
        </trans-unit>
        <trans-unit id="0349a9ec4dea6160dbbe7ca7df0fd8cda00d0b76" translate="yes" xml:space="preserve">
          <source>As an example, here is the implementation of &lt;code&gt;reduce&lt;/code&gt; for lists:</source>
          <target state="translated">例として、ここに &lt;code&gt;reduce&lt;/code&gt; forリストの実装があります：</target>
        </trans-unit>
        <trans-unit id="464ac5e237ea0054e115f37d2c18ebb476327aba" translate="yes" xml:space="preserve">
          <source>As an example, when &lt;code&gt;Mix.shell.info(&quot;hello&quot;)&lt;/code&gt; is called, the following message will be sent to the calling process:</source>
          <target state="translated">例として、 &lt;code&gt;Mix.shell.info(&quot;hello&quot;)&lt;/code&gt; が呼び出されると、次のメッセージが呼び出しプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="dc93e8a699323a5ad9c331b0b8b1db6ef13f00e3" translate="yes" xml:space="preserve">
          <source>As an interactive shell, IEx evaluates expressions. This has some interesting consequences that are worth discussing.</source>
          <target state="translated">対話型シェルである IEx は式を評価します。これは、議論に値する興味深い結果をもたらします。</target>
        </trans-unit>
        <trans-unit id="85b7c3a4aee2708f25f8484199a1fbbe55745c55" translate="yes" xml:space="preserve">
          <source>As annotations</source>
          <target state="translated">注釈として</target>
        </trans-unit>
        <trans-unit id="b3d151430c89c74eb889709b00af1b8cd57bf29f" translate="yes" xml:space="preserve">
          <source>As before, if &lt;code&gt;heavy_fun/0&lt;/code&gt; fails, the whole computation will fail, including the parent process. If you don't want the task to fail then you must change the &lt;code&gt;heavy_fun/0&lt;/code&gt; code in the same way you would achieve it if you didn't have the async call. For example, to either return &lt;code&gt;{:ok, val} | :error&lt;/code&gt; results or, in more extreme cases, by using &lt;code&gt;try/rescue&lt;/code&gt;. In other words, an asynchronous task should be thought of as an extension of a process rather than a mechanism to isolate it from all errors.</source>
          <target state="translated">以前と同様に、 &lt;code&gt;heavy_fun/0&lt;/code&gt; が失敗すると、親プロセスを含む計算全体が失敗します。タスクを失敗させたくない場合は、非同期呼び出しがない場合と同じように &lt;code&gt;heavy_fun/0&lt;/code&gt; コードを変更する必要があります。たとえば、 &lt;code&gt;{:ok, val} | :error&lt;/code&gt; いずれかを返すには| ：エラーの結果、またはより極端な場合は、 &lt;code&gt;try/rescue&lt;/code&gt; を使用します。つまり、非同期タスクは、プロセスをすべてのエラーから分離するメカニズムではなく、プロセスの拡張と考える必要があります。</target>
        </trans-unit>
        <trans-unit id="92c62ad7d5aa1057f77beb16eeaa0f4ad0108cba" translate="yes" xml:space="preserve">
          <source>As can be seen in the example above, &lt;code&gt;@doc&lt;/code&gt; and &lt;code&gt;@typedoc&lt;/code&gt; also accept a keyword list that serves as a way to provide arbitrary metadata about the entity. Tools like &lt;a href=&quot;https://hexdocs.pm/ex_doc/&quot;&gt;&lt;code&gt;ExDoc&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/iex/IEx.html&quot;&gt;&lt;code&gt;IEx&lt;/code&gt;&lt;/a&gt; may use this information to display annotations. A common use case is &lt;code&gt;since&lt;/code&gt; that may be used to annotate in which version the function was introduced.</source>
          <target state="translated">上記の例でわかるように、 &lt;code&gt;@doc&lt;/code&gt; および &lt;code&gt;@typedoc&lt;/code&gt; は、エンティティに関する任意のメタデータを提供する方法として機能するキーワードリストも受け入れます。以下のようなツール&lt;a href=&quot;https://hexdocs.pm/ex_doc/&quot;&gt; &lt;code&gt;ExDoc&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://hexdocs.pm/iex/IEx.html&quot;&gt; &lt;code&gt;IEx&lt;/code&gt; &lt;/a&gt;表示、注釈にこの情報を使用することができます。一般的な使用例である &lt;code&gt;since&lt;/code&gt; 、その機能が導入されたバージョンで注釈を付けるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="53c5b01ebc748740fa3a202be293afebe8d3531d" translate="yes" xml:space="preserve">
          <source>As hinted at the beginning of this chapter, sigils in Elixir are extensible. In fact, using the sigil &lt;code&gt;~r/foo/i&lt;/code&gt; is equivalent to calling &lt;code&gt;sigil_r&lt;/code&gt; with a binary and a char list as the argument:</source>
          <target state="translated">この章の冒頭でほのめかしたように、エリクサーの印章は拡張可能です。実際、 &lt;code&gt;sigil_r&lt;/code&gt; &lt;code&gt;~r/foo/i&lt;/code&gt; を使用することは、引数としてバイナリと文字リストを使用してsigil_rを呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="6c8f5fa4753404d9868b5d71ab1cbc0f0b9f0e9c" translate="yes" xml:space="preserve">
          <source>As illustrated in the example, it is possible to use these attributes more than once before an entity. However, the compiler will warn if used twice with binaries as that replaces the documentation text from the preceding use. Multiple uses with keyword lists will merge the lists into one.</source>
          <target state="translated">例で説明したように、これらの属性をエンティティの前に複数回使用することができます。ただし、バイナリと一緒に 2 回使用すると、前に使用したときのドキュメント・テキストが置き換えられるため、コンパイラは警告します。キーワード・リストを使用して複数回使用すると、リストは 1 つに統合されます。</target>
        </trans-unit>
        <trans-unit id="4ba33298179402c80c62d07ca88b3e24f39778d2" translate="yes" xml:space="preserve">
          <source>As in &lt;a href=&quot;#for/1&quot;&gt;&lt;code&gt;for/1&lt;/code&gt;&lt;/a&gt;, variables bound inside &lt;a href=&quot;#with/1&quot;&gt;&lt;code&gt;with/1&lt;/code&gt;&lt;/a&gt; won't leak. Expressions without &lt;code&gt;&amp;lt;-&lt;/code&gt; may also be used in clauses. For instance, you can perform regular matches with the &lt;code&gt;=&lt;/code&gt; operator:</source>
          <target state="translated">&lt;a href=&quot;#for/1&quot;&gt; &lt;code&gt;for/1&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;#with/1&quot;&gt; &lt;code&gt;with/1&lt;/code&gt; &lt;/a&gt;内でバインドされた変数はリークしません。 &lt;code&gt;&amp;lt;-&lt;/code&gt; のない式も句で使用できます。たとえば、 &lt;code&gt;=&lt;/code&gt; 演算子を使用して通常の一致を実行できます。</target>
        </trans-unit>
        <trans-unit id="7618dfe0b48bdcbbc92fb053f674001960e2baaf" translate="yes" xml:space="preserve">
          <source>As many programming languages, Elixir also support operators as non-qualified calls with their precedence and associativity rules. Constructs such as &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;when&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; are simply treated as operators. See &lt;a href=&quot;operators&quot;&gt;the Operators page&lt;/a&gt; for a full reference.</source>
          <target state="translated">多くのプログラミング言語と同様に、Elixirは演算子を優先順位と結合規則を使用して非修飾呼び出しとしてサポートします。などの構築 &lt;code&gt;=&lt;/code&gt; 、、 &lt;code&gt;&amp;amp;&lt;/code&gt; や &lt;code&gt;@&lt;/code&gt; は、単に演算子として扱われます。完全なリファレンスについて&lt;a href=&quot;operators&quot;&gt;は、演算子のページ&lt;/a&gt;を参照してください。 &lt;code&gt;when&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="37b8d1cf77312071adcc9e820be3a314b89ebb03" translate="yes" xml:space="preserve">
          <source>As mentioned before, only the expressions listed in this page are allowed in guards. However, we can take advantage of macros to write custom guards that can simplify our programs or make them more domain-specific. At the end of the day, what matters is that the &lt;em&gt;output&lt;/em&gt; of the macros (which is what will be compiled) boils down to a combinations of the allowed expressions.</source>
          <target state="translated">前述したように、このページにリストされている式のみがガードで許可されます。ただし、マクロを利用して、プログラムを簡略化したり、ドメイン固有のカスタムガードを作成したりできます。結局のところ、重要なのは、マクロの&lt;em&gt;出力&lt;/em&gt;（コンパイルされるもの）が、許可された式の組み合わせにまとめられることです。</target>
        </trans-unit>
        <trans-unit id="8270045d7128d710af04fe8613d76eb301a527bc" translate="yes" xml:space="preserve">
          <source>As per the standard, a code point is a single Unicode Character, which may be represented by one or more bytes.</source>
          <target state="translated">標準によると、コードポイントは1つのユニコード文字であり、1つ以上のバイトで表されることがあります。</target>
        </trans-unit>
        <trans-unit id="676396c741582d57035ca27fdb32352c00e638d7" translate="yes" xml:space="preserve">
          <source>As seen as in the example above, &lt;code&gt;super&lt;/code&gt; can be used to call the default implementation.</source>
          <target state="translated">上記の例のように、 &lt;code&gt;super&lt;/code&gt; を使用してデフォルトの実装を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="1acf70e5576f741c3828bd3ef7c8c6ec15e18ff5" translate="yes" xml:space="preserve">
          <source>As seen in the example above, defining a callback is a matter of defining a specification for that callback, made of:</source>
          <target state="translated">上の例で見たように、コールバックを定義するということは、そのコールバックの仕様を定義するということです。</target>
        </trans-unit>
        <trans-unit id="c17961654b5ef8c817d3bea42d0612f57d6bdfb6" translate="yes" xml:space="preserve">
          <source>As shown above, a map matches as long as the keys in the pattern exist in the given map. Therefore, an empty map matches all maps.</source>
          <target state="translated">上記のように、パターン内のキーが与えられたマップ内に存在する限り、マップはマッチします。したがって、空のマップはすべてのマップにマッチします。</target>
        </trans-unit>
        <trans-unit id="3e87159a8128cba6f69d2d663e334e06403ae804" translate="yes" xml:space="preserve">
          <source>As specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-2.2&quot;&gt;RFC 3986, section 2.2&lt;/a&gt;, the following characters are reserved: &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;@&lt;/code&gt;, &lt;code&gt;!&lt;/code&gt;, &lt;code&gt;$&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;'&lt;/code&gt;, &lt;code&gt;(&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;</source>
          <target state="translated">で指定されているように&lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-2.2&quot;&gt;RFC 3986、セクション2.2&lt;/a&gt;、以下の文字は予約されていますか： &lt;code&gt;:&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; 、 &lt;code&gt;?&lt;/code&gt; 、 &lt;code&gt;#&lt;/code&gt; 、 &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;]&lt;/code&gt; 、 &lt;code&gt;@&lt;/code&gt; 、 &lt;code&gt;!&lt;/code&gt; 、 &lt;code&gt;$&lt;/code&gt; 、 &lt;code&gt;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;'&lt;/code&gt; 、 &lt;code&gt;(&lt;/code&gt; 、 &lt;code&gt;)&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;,&lt;/code&gt; 、 &lt;code&gt;;&lt;/code&gt; 、 &lt;code&gt;=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f34ca7664a4faf689aba327936c76b57db41870" translate="yes" xml:space="preserve">
          <source>As specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-2.3&quot;&gt;RFC 3986, section 2.3&lt;/a&gt;, the following characters are unreserved:</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc3986#section-2.3&quot;&gt;RFC 3986のセクション2.3&lt;/a&gt;で指定されているように、次の文字は予約されていません。</target>
        </trans-unit>
        <trans-unit id="ae8c2d0eb718b47d6bdc235bbe27fe6688ec42f5" translate="yes" xml:space="preserve">
          <source>As specified in the standard, the separator &quot;T&quot; may be omitted if desired as there is no ambiguity within this function.</source>
          <target state="translated">規格に規定されているように、この関数内では曖昧さがないため、必要に応じて区切り文字 &quot;T &quot;を省略してもよい。</target>
        </trans-unit>
        <trans-unit id="172b9ef57ee22a616a5d576f366995c400978c73" translate="yes" xml:space="preserve">
          <source>As temporary storage</source>
          <target state="translated">一時保管として</target>
        </trans-unit>
        <trans-unit id="09bf92a059d2e30dbaaf2c6c71588317b92537a3" translate="yes" xml:space="preserve">
          <source>As the context is a map, it can be pattern matched on to extract information:</source>
          <target state="translated">コンテキストは地図であるため、パターンマッチングを行って情報を抽出することができます。</target>
        </trans-unit>
        <trans-unit id="aa7714894dcee21ed3c16ea2836ca8361fe264b6" translate="yes" xml:space="preserve">
          <source>As the name says, doctest is documentation first and a test later. Their goal is not to replace tests but to provide up to date documentation. You can read more about doctests in &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.DocTest.html&quot;&gt;the &lt;code&gt;ExUnit.DocTest&lt;/code&gt; docs&lt;/a&gt;.</source>
          <target state="translated">名前が示すように、doctestは最初にドキュメント化され、後でテストされます。彼らの目標は、テストを置き換えることではなく、最新のドキュメントを提供することです。&lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.DocTest.html&quot;&gt; &lt;code&gt;ExUnit.DocTest&lt;/code&gt; &lt;/a&gt;詳細については、ExUnit.DocTest docsをご覧ください。</target>
        </trans-unit>
        <trans-unit id="4b3950445b3884bea63da00e819f70e116c9c457" translate="yes" xml:space="preserve">
          <source>As the name says, this function is useful to stream values from resources.</source>
          <target state="translated">その名の通り、リソースから値をストリームするのに便利な関数です。</target>
        </trans-unit>
        <trans-unit id="94f0af78270d1f9bb5f3fb4c7e50123a2d1e6b3c" translate="yes" xml:space="preserve">
          <source>As usual, we&amp;rsquo;ve passed a two-element tuple as a child specification, which in turn will invoke &lt;code&gt;Task.start_link/1&lt;/code&gt;.</source>
          <target state="translated">いつものように、子要素として2要素のタプルを渡し、次に &lt;code&gt;Task.start_link/1&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="200471b29b35258f77b2250785934287d372a624" translate="yes" xml:space="preserve">
          <source>As we are now able to parse commands, we can finally start implementing the logic that runs the commands. Let&amp;rsquo;s add a stub definition for this function for now:</source>
          <target state="translated">これでコマンドを解析できるようになったので、コマンドを実行するロジックの実装を開始できます。とりあえず、この関数のスタブ定義を追加しましょう：</target>
        </trans-unit>
        <trans-unit id="601235f1a3d19d8aa741732ca63364ee542ff5d9" translate="yes" xml:space="preserve">
          <source>As we have seen above, code points can be inserted into a string by their hexadecimal code:</source>
          <target state="translated">上で見たように、コードポイントは16進コードで文字列に挿入することができます。</target>
        </trans-unit>
        <trans-unit id="b744ff728795adae8a150cdd6bdfc7a23aebec3d" translate="yes" xml:space="preserve">
          <source>As we said in the previous section, the implementation of &lt;code&gt;Size&lt;/code&gt; for &lt;code&gt;Any&lt;/code&gt; is not one that can apply to any data type. That&amp;rsquo;s one of the reasons why &lt;code&gt;@fallback_to_any&lt;/code&gt; is an opt-in behaviour. For the majority of protocols, raising an error when a protocol is not implemented is the proper behaviour. That said, assuming we have implemented &lt;code&gt;Any&lt;/code&gt; as in the previous section:</source>
          <target state="translated">前のセクションで述べたように、 &lt;code&gt;Size&lt;/code&gt; for &lt;code&gt;Any&lt;/code&gt; の実装は、どのデータ型にも適用できるものではありません。これが、 &lt;code&gt;@fallback_to_any&lt;/code&gt; がオプトイン動作である理由の1つです。ほとんどのプロトコルでは、プロトコルが実装されていないときにエラーを発生させるのが適切な動作です。つまり、前のセクションのように &lt;code&gt;Any&lt;/code&gt; を実装したと仮定します。</target>
        </trans-unit>
        <trans-unit id="15c53c6aaf99d7b2cea9d0b0858060f9842a9b54" translate="yes" xml:space="preserve">
          <source>As we saw at the beginning of this chapter, only some values are valid quoted expressions in Elixir. For example, a map is not a valid quoted expression. Neither is a tuple with four elements. However, such values &lt;em&gt;can&lt;/em&gt; be expressed as a quoted expression:</source>
          <target state="translated">この章の冒頭で見たように、Elixirでは、一部の値だけが有効な引用式です。たとえば、マップは引用符で囲まれた有効な式ではありません。どちらも4つの要素を持つタプルではありません。ただし、そのような値&lt;em&gt;は&lt;/em&gt;引用符で囲まれた式として表す&lt;em&gt;こと&lt;/em&gt;が&lt;em&gt;でき&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a70db684277fce0a661e1a1649e67da611b415a0" translate="yes" xml:space="preserve">
          <source>As we will see in later chapters, aliases also play a crucial role in macros, to guarantee they are hygienic.</source>
          <target state="translated">後の章で見るように、エイリアスはマクロでも衛生的であることを保証するために重要な役割を果たします。</target>
        </trans-unit>
        <trans-unit id="4b0983ae2706b788ff3f58d0346e9d53db96d9c3" translate="yes" xml:space="preserve">
          <source>As well as with lists and tuples:</source>
          <target state="translated">リストやタプルと同様に。</target>
        </trans-unit>
        <trans-unit id="0f4afdbad8980e1dc31c0b805a2715e284761af4" translate="yes" xml:space="preserve">
          <source>As with any other function or macro call in Elixir, explicit parens can also be used around the arguments before the &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; block:</source>
          <target state="translated">Elixirの他の関数またはマクロ呼び出しと同様に、 &lt;code&gt;do&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; ブロックの前の引数の前後に明示的な括弧を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="97fa256436a4dcbb72bdc937146524beaa952bd1" translate="yes" xml:space="preserve">
          <source>As with other functions in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; module, &lt;a href=&quot;#next_codepoint/1&quot;&gt;&lt;code&gt;next_codepoint/1&lt;/code&gt;&lt;/a&gt; works with binaries that are invalid UTF-8. If the string starts with a sequence of bytes that is not valid in UTF-8 encoding, the first element of the returned tuple is a binary with the first byte.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;モジュールの他の関数と同様に、&lt;a href=&quot;#next_codepoint/1&quot;&gt; &lt;code&gt;next_codepoint/1&lt;/code&gt; &lt;/a&gt;は無効なUTF-8であるバイナリを処理します。文字列がUTF-8エンコーディングでは無効なバイトのシーケンスで始まる場合、返されるタプルの最初の要素は最初のバイトのバイナリです。</target>
        </trans-unit>
        <trans-unit id="3f6413773613da2d0a327678be51feae49a384ac" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;#compare/2&quot;&gt;&lt;code&gt;compare/2&lt;/code&gt;&lt;/a&gt; function both &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; structs and other structures containing time can be used. If for instance a &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; is passed, only the hour, month, second, and microsecond is considered. Any additional information about a date or time zone is ignored when calculating the difference.</source>
          <target state="translated">同様に&lt;a href=&quot;#compare/2&quot;&gt; &lt;code&gt;compare/2&lt;/code&gt; &lt;/a&gt;機能の両方&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;時間を含む構造体と他の構造を使用することができます。たとえば、&lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;が渡された場合、時間、月、秒、マイクロ秒のみが考慮されます。差を計算するとき、日付またはタイムゾーンに関する追加情報は無視されます。</target>
        </trans-unit>
        <trans-unit id="bfac16304766e4e02a86d724f96fe90d475e9d00" translate="yes" xml:space="preserve">
          <source>As you can see &lt;code&gt;IO.inspect/2&lt;/code&gt; makes it possible to &amp;ldquo;spy&amp;rdquo; on values almost anywhere in your code without altering the result, making it very helpful inside of a pipeline like in the above case.</source>
          <target state="translated">ご覧のように、 &lt;code&gt;IO.inspect/2&lt;/code&gt; は、結果を変更せずにコード内のほぼどこでも値を「スパイ」できるため、上記の場合のようにパイプライン内で非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="21f8fc70137800358c066550264ed73297889dbe" translate="yes" xml:space="preserve">
          <source>As you can see above, Elixir supports a special syntax for defining such lists: &lt;code&gt;[key: value]&lt;/code&gt;. Underneath it maps to the same list of tuples as above. Since keyword lists are lists, we can use all operations available to lists. For example, we can use &lt;code&gt;++&lt;/code&gt; to add new values to a keyword list:</source>
          <target state="translated">上記のように、Elixirはそのようなリストを定義するための特別な構文をサポートしています： &lt;code&gt;[key: value]&lt;/code&gt; 。その下は、上記と同じタプルのリストにマップされます。キーワードリストはリストなので、リストで使用できるすべての操作を使用できます。たとえば、 &lt;code&gt;++&lt;/code&gt; を使用して新しい値をキーワードリストに追加できます。</target>
        </trans-unit>
        <trans-unit id="aa4170415b6c223620cdf1f88ee2130beff4adea" translate="yes" xml:space="preserve">
          <source>As you can see in the example, tuples are a compound type and each tuple is identified by the types inside it. To understand why &lt;code&gt;String.t&lt;/code&gt; is not written as &lt;code&gt;string&lt;/code&gt;, have another look at the &lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#the-string-type&quot;&gt;typespecs docs&lt;/a&gt;.</source>
          <target state="translated">例からわかるように、タプルは複合型であり、各タプルはその中の型によって識別されます。 &lt;code&gt;String.t&lt;/code&gt; が &lt;code&gt;string&lt;/code&gt; として記述されていない理由を理解するには、&lt;a href=&quot;https://hexdocs.pm/elixir/typespecs.html#the-string-type&quot;&gt;typespecsドキュメント&lt;/a&gt;をもう一度見てください。</target>
        </trans-unit>
        <trans-unit id="6e385b1477b16c3d8afb0738a5dc664781fad0f5" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator retains the same semantics as when the pipe is not used since both require the &lt;code&gt;fun.(...)&lt;/code&gt; notation.</source>
          <target state="translated">ご覧のとおり、 &lt;code&gt;|&amp;gt;&lt;/code&gt; 演算子はパイプが使用されていない場合と同じセマンティクスを保持してい &lt;code&gt;fun.(...)&lt;/code&gt; は、どちらもfun。（...）表記が必要であるためです。</target>
        </trans-unit>
        <trans-unit id="30d1ce2388da1cbee1aee34fe86a268a3580437f" translate="yes" xml:space="preserve">
          <source>As you can see, we can modify the agent state in any way we want. Therefore, we most likely don&amp;rsquo;t want to access the Agent API throughout many different places in our code. Instead, we want to encapsulate all Agent-related functionality in a single module, which we will call &lt;code&gt;KV.Bucket&lt;/code&gt;. Before we implement it, let&amp;rsquo;s write some tests which will outline the API exposed by our module.</source>
          <target state="translated">ご覧のとおり、エージェントの状態は任意に変更できます。したがって、コード内のさまざまな場所でAgent APIにアクセスすることはほとんどありません。代わりに、すべてのエージェント関連機能を単一のモジュールにカプセル化します。これを &lt;code&gt;KV.Bucket&lt;/code&gt; と呼びます。それを実装する前に、モジュールによって公開されるAPIの概要を説明するいくつかのテストを記述しましょう。</target>
        </trans-unit>
        <trans-unit id="210d4ba9daa92ffc70077cd3f9e0051375613c5f" translate="yes" xml:space="preserve">
          <source>As you grow more proficient in Elixir, you may want to explore the Erlang &lt;a href=&quot;http://erlang.org/doc/apps/stdlib/index.html&quot;&gt;STDLIB Reference Manual&lt;/a&gt; in more detail.</source>
          <target state="translated">Elixirの熟練度が&lt;a href=&quot;http://erlang.org/doc/apps/stdlib/index.html&quot;&gt;高まったら&lt;/a&gt;、Erlang STDLIBリファレンスマニュアルをさらに詳しく調べてみてください。</target>
        </trans-unit>
        <trans-unit id="42243c9d4edc16320cc7a5237930463fbe38b8c3" translate="yes" xml:space="preserve">
          <source>Asking questions</source>
          <target state="translated">質問をすること</target>
        </trans-unit>
        <trans-unit id="e7490b91fb48bace99c9c58dc1ba9142c591d1b6" translate="yes" xml:space="preserve">
          <source>Assembling multiple releases</source>
          <target state="translated">複数のリリースのアセンブル</target>
        </trans-unit>
        <trans-unit id="5e68467c391c90ed39d1769e2c7fc777abc9ce10" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;expression&lt;/code&gt; will cause an error.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; をアサートするとエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="21ea5a6283f658e3d8429f3c704fec015ff7ac86" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;expression&lt;/code&gt; will exit.</source>
          <target state="translated">アサート &lt;code&gt;expression&lt;/code&gt; 終了します。</target>
        </trans-unit>
        <trans-unit id="51dd35c873c4195a1aa602ca5fc4593065d118d6" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;expression&lt;/code&gt; will throw a value.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; をアサートすると値がスローされます。</target>
        </trans-unit>
        <trans-unit id="a4fccd55c6fefc18e898969890abca9f3867d90f" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;value1&lt;/code&gt; and &lt;code&gt;value2&lt;/code&gt; are not within &lt;code&gt;delta&lt;/code&gt;.</source>
          <target state="translated">アサート &lt;code&gt;value1&lt;/code&gt; と &lt;code&gt;value2&lt;/code&gt; のは内にない &lt;code&gt;delta&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e3419e6d5b518f88bf525f195c071962c45d888" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; (that is, &lt;code&gt;value&lt;/code&gt; is not truthy).</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; であることをアサートします（つまり、 &lt;code&gt;value&lt;/code&gt; は真実ではありません）。</target>
        </trans-unit>
        <trans-unit id="b25f69bb32e51bfa75bcf7ba330376b516079f9a" translate="yes" xml:space="preserve">
          <source>Asserts &lt;code&gt;value&lt;/code&gt; is truthy, displaying the given &lt;code&gt;message&lt;/code&gt; otherwise.</source>
          <target state="translated">アサート &lt;code&gt;value&lt;/code&gt; 所定の表示、truthyである &lt;code&gt;message&lt;/code&gt; 、さもなければ。</target>
        </trans-unit>
        <trans-unit id="dfe5bb735de6540b2a06f98b0a42bdd8ef4828e5" translate="yes" xml:space="preserve">
          <source>Asserts a message matching &lt;code&gt;pattern&lt;/code&gt; was not received (i.e. it is not in the current process' mailbox).</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; に一致するメッセージが受信されなかった（つまり、現在のプロセスのメールボックスにない）ことを表明します。</target>
        </trans-unit>
        <trans-unit id="27e6e46a40f5aa357f1b1f71823ab2714d6dfc2c" translate="yes" xml:space="preserve">
          <source>Asserts against a larger timeout:</source>
          <target state="translated">より大きなタイムアウトに対してアサートします。</target>
        </trans-unit>
        <trans-unit id="0dcb430556180c632dbd6a05ebad3939684ea882" translate="yes" xml:space="preserve">
          <source>Asserts its argument is a truthy value.</source>
          <target state="translated">その引数が真理値であることを主張します。</target>
        </trans-unit>
        <trans-unit id="631f267df18019d097de2ba4fa501aea456587c9" translate="yes" xml:space="preserve">
          <source>Asserts that &lt;code&gt;value1&lt;/code&gt; and &lt;code&gt;value2&lt;/code&gt; differ by no more than &lt;code&gt;delta&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value1&lt;/code&gt; と &lt;code&gt;value2&lt;/code&gt; の差が &lt;code&gt;delta&lt;/code&gt; 以下であることを表明します。</target>
        </trans-unit>
        <trans-unit id="b3d081c32e7b0ecb8b1370d55ed5d56cfeed4172" translate="yes" xml:space="preserve">
          <source>Asserts that a message matching &lt;code&gt;pattern&lt;/code&gt; was not received (and won't be received) within the &lt;code&gt;timeout&lt;/code&gt; period, specified in milliseconds.</source>
          <target state="translated">ミリ秒で指定された &lt;code&gt;timeout&lt;/code&gt; 期間内に &lt;code&gt;pattern&lt;/code&gt; に一致するメッセージが受信されなかった（そして受信されない）ことを表明します。</target>
        </trans-unit>
        <trans-unit id="c8c7b2bb8b65a4ae00cb202f3465c2a6e04800c2" translate="yes" xml:space="preserve">
          <source>Asserts that a message matching &lt;code&gt;pattern&lt;/code&gt; was or is going to be received within the &lt;code&gt;timeout&lt;/code&gt; period, specified in milliseconds.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; に一致するメッセージがミリ秒単位で指定された &lt;code&gt;timeout&lt;/code&gt; 期間内に受信されたか、または受信されることをアサートします。</target>
        </trans-unit>
        <trans-unit id="e4b2d80d77ed40f1fbbfa18c2d6aec035c3583ca" translate="yes" xml:space="preserve">
          <source>Asserts that a message matching &lt;code&gt;pattern&lt;/code&gt; was received and is in the current process' mailbox.</source>
          <target state="translated">メッセージ一致 &lt;code&gt;pattern&lt;/code&gt; が受信され、現在のプロセスのメールボックスにあることを表明します。</target>
        </trans-unit>
        <trans-unit id="08e716a4d9543f0675eaa0e9aeb88e0dbd3e68b3" translate="yes" xml:space="preserve">
          <source>Asserts the &lt;code&gt;exception&lt;/code&gt; is raised during &lt;code&gt;function&lt;/code&gt; execution with the expected &lt;code&gt;message&lt;/code&gt;, which can be a &lt;a href=&quot;https://hexdocs.pm/elixir/Regex.html&quot;&gt;&lt;code&gt;Regex&lt;/code&gt;&lt;/a&gt; or an exact &lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;. Returns the rescued exception, fails otherwise.</source>
          <target state="translated">アサート &lt;code&gt;exception&lt;/code&gt; 中に発生された &lt;code&gt;function&lt;/code&gt; 予想と実行 &lt;code&gt;message&lt;/code&gt; とすることができる、&lt;a href=&quot;https://hexdocs.pm/elixir/Regex.html&quot;&gt; &lt;code&gt;Regex&lt;/code&gt; &lt;/a&gt;または正確な&lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;。救出された例外を返し、それ以外の場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="f189bf2d977136873077301bfd1a2a270f543d21" translate="yes" xml:space="preserve">
          <source>Asserts the &lt;code&gt;exception&lt;/code&gt; is raised during &lt;code&gt;function&lt;/code&gt; execution. Returns the rescued exception, fails otherwise.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 実行中に &lt;code&gt;exception&lt;/code&gt; が発生することを表明します。救出された例外を返し、それ以外の場合は失敗します。</target>
        </trans-unit>
        <trans-unit id="c6416f331120cf783e79cebf7095c44ed2cd766d" translate="yes" xml:space="preserve">
          <source>Assigns can also be used when compiled to a function:</source>
          <target state="translated">代入は、関数にコンパイルする際にも使用できます。</target>
        </trans-unit>
        <trans-unit id="e92203a0ace3ba65c682a54de5d568ec7a27a848" translate="yes" xml:space="preserve">
          <source>Associates the &lt;code&gt;port&lt;/code&gt; identifier with a &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">関連付け &lt;code&gt;port&lt;/code&gt; を持つ識別子 &lt;code&gt;pid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d20b5a26a1cdf631954b50a5206246dff93d9c8a" translate="yes" xml:space="preserve">
          <source>Associativity</source>
          <target state="translated">Associativity</target>
        </trans-unit>
        <trans-unit id="0706e10abd81eb18f13ab749dfc8f7c363cf456b" translate="yes" xml:space="preserve">
          <source>Assuming the &lt;code&gt;Stack&lt;/code&gt; GenServer mentioned in the docs for the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; module is registered as &lt;code&gt;Stack&lt;/code&gt; in the &lt;code&gt;:&quot;foo@my-machine&quot;&lt;/code&gt; and &lt;code&gt;:&quot;bar@my-machine&quot;&lt;/code&gt; nodes:</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントに記載されている &lt;code&gt;Stack&lt;/code&gt; GenServer が、 &lt;code&gt;:&quot;foo@my-machine&quot;&lt;/code&gt; および &lt;code&gt;:&quot;bar@my-machine&quot;&lt;/code&gt; ノードに &lt;code&gt;Stack&lt;/code&gt; として登録されていると仮定します。</target>
        </trans-unit>
        <trans-unit id="3a5f997602b6a56d42f72e433af46958ffb188f5" translate="yes" xml:space="preserve">
          <source>Assuming we defined &lt;code&gt;TestCase&lt;/code&gt; in a file named &lt;code&gt;tests.exs&lt;/code&gt;, we can open it up by running &lt;code&gt;iex tests.exs&lt;/code&gt; and define our first tests:</source>
          <target state="translated">我々が定義されたと仮定すると、 &lt;code&gt;TestCase&lt;/code&gt; という名前のファイルに &lt;code&gt;tests.exs&lt;/code&gt; 、我々は実行して、それを開くことができ &lt;code&gt;iex tests.exs&lt;/code&gt; 、私たちの最初のテストを定義します。</target>
        </trans-unit>
        <trans-unit id="d95ac37a47c14d5f1acc4f76198a9b839014e3cc" translate="yes" xml:space="preserve">
          <source>Async or not, our new test should obviously fail, as none of the functionality is implemented in the module being tested:</source>
          <target state="translated">非同期であろうとなかろうと、新しいテストは明らかに失敗するはずです。</target>
        </trans-unit>
        <trans-unit id="44790a848ce1e0b878b857a7d7bf4211e67c716a" translate="yes" xml:space="preserve">
          <source>At first, the process map has no keys, so sending a &lt;code&gt;:get&lt;/code&gt; message and then flushing the current process inbox returns &lt;code&gt;nil&lt;/code&gt;. Let&amp;rsquo;s send a &lt;code&gt;:put&lt;/code&gt; message and try it again:</source>
          <target state="translated">最初、プロセスマップにはキーがないため、 &lt;code&gt;:get&lt;/code&gt; メッセージを送信してから現在のプロセスの受信トレイをフラッシュすると、 &lt;code&gt;nil&lt;/code&gt; が返されます。さんが送ってみましょう &lt;code&gt;:put&lt;/code&gt; たメッセージを、もう一度試してください。</target>
        </trans-unit>
        <trans-unit id="16f7256f734477a56caabe25739de6426b77ff24" translate="yes" xml:space="preserve">
          <source>At first, there is nothing in this example that actually reveals it is a macro. But what is happening is that, at compilation time, &lt;code&gt;squared(5)&lt;/code&gt; becomes &lt;code&gt;5 * 5&lt;/code&gt;. The argument &lt;code&gt;5&lt;/code&gt; is duplicated in the produced code, we can see this behaviour in practice though because our macro actually has a bug:</source>
          <target state="translated">最初は、この例では実際にマクロであることを明らかにするものはありません。しかし、起こっていることは、コンパイル時に、 &lt;code&gt;squared(5)&lt;/code&gt; が &lt;code&gt;5 * 5&lt;/code&gt; です。生成されたコードでは引数 &lt;code&gt;5&lt;/code&gt; が重複していますが、実際にはマクロにバグがあるため、実際にこの動作を確認できます。</target>
        </trans-unit>
        <trans-unit id="17e0c2ba6bf8585ab612f28b687b66ddbc446816" translate="yes" xml:space="preserve">
          <source>At the end of the chapter, we will also talk about Applications. As we will see, Mix has been packaging all of our code into an application, and we will learn how to customize our application to guarantee that our Supervisor and the Registry are up and running whenever our system starts.</source>
          <target state="translated">この章の最後には、アプリケーションについても触れます。ご覧のように、Mix はすべてのコードをアプリケーションにパッケージ化していますが、システムが起動したときにいつでもスーパーバイザとレジストリが稼働していることを保証するために、アプリケーションをカスタマイズする方法を学びます。</target>
        </trans-unit>
        <trans-unit id="7e1720c79764d1bd4a3c1260e363853f08ce78d4" translate="yes" xml:space="preserve">
          <source>At the end of the day, it is up to you and your team to figure out the best testing strategy for your applications. You need to balance code quality, confidence, and test suite runtime. For example, we may start with testing the server only with integration tests, but if the server continues to grow in future releases, or it becomes a part of the application with frequent bugs, it is important to consider breaking it apart and writing more intensive unit tests that don&amp;rsquo;t have the weight of an integration test.</source>
          <target state="translated">結局のところ、アプリケーションに最適なテスト戦略を見つけるのは、あなたとあなたのチーム次第です。コードの品質、信頼性、テストスイートランタイムのバランスをとる必要があります。たとえば、統合テストのみでサーバーをテストすることから始める場合がありますが、サーバーが将来のリリースで成長し続ける場合、またはバグが頻繁に発生するアプリケーションの一部になる場合は、サーバーを分解してより集中的に記述することを検討することが重要です統合テストの重みを持たない単体テスト。</target>
        </trans-unit>
        <trans-unit id="2a3ffa5cb7dc9aa4c3ec3ff462d233d2b07bed27" translate="yes" xml:space="preserve">
          <source>At the end of the day, it&amp;rsquo;s up to your application to decide if an error while opening a file is exceptional or not. That&amp;rsquo;s why Elixir doesn&amp;rsquo;t impose exceptions on &lt;code&gt;File.read/1&lt;/code&gt; and many other functions. Instead, it leaves it up to the developer to choose the best way to proceed.</source>
          <target state="translated">結局のところ、ファイルを開くときのエラーが例外的であるかどうかは、アプリケーション次第です。そのため、Elixirは &lt;code&gt;File.read/1&lt;/code&gt; や他の多くの関数に例外を課していません。代わりに、続行する最善の方法を選択するのは開発者に任されています。</target>
        </trans-unit>
        <trans-unit id="b873e6ad14549bcea5b5a36336f039751d9658a1" translate="yes" xml:space="preserve">
          <source>At the end of the day, tools like Observer are one of the reasons you want to always start processes inside supervision trees, even if they are temporary, to ensure they are always reachable and introspectable.</source>
          <target state="translated">結局のところ、Observerのようなツールは、たとえ一時的なものであっても、常に手が届き、内省的なものであることを保証するために、常に監督ツリーの内部でプロセスを開始したいと思う理由の一つです。</target>
        </trans-unit>
        <trans-unit id="e06f56d0fcde25a11eb9f4fd12e26af6e57cc715" translate="yes" xml:space="preserve">
          <source>At this point, we have learned four control structures: &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;cond&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, and &lt;code&gt;unless&lt;/code&gt;, and they were all wrapped in &lt;code&gt;do/end&lt;/code&gt; blocks. It happens we could also write &lt;code&gt;if&lt;/code&gt; as follows:</source>
          <target state="translated">：この時点で、我々は4つの制御構造を学んできた &lt;code&gt;case&lt;/code&gt; 、 &lt;code&gt;cond&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、および &lt;code&gt;unless&lt;/code&gt; 、それらはすべてに包まれた &lt;code&gt;do/end&lt;/code&gt; ブロック。我々はまた、書くことができ起こる &lt;code&gt;if&lt;/code&gt; 、次のように：</target>
        </trans-unit>
        <trans-unit id="0ac71a7b2e14e6b71166183a00716c799d7bccef" translate="yes" xml:space="preserve">
          <source>At this point, you may be wondering, how can we make two nodes start with two different routing tables? One option is to use the &lt;code&gt;--config&lt;/code&gt; flag in &lt;code&gt;mix run&lt;/code&gt;. For example, you could write two extra configuration files, &lt;code&gt;config/foo.exs&lt;/code&gt; and &lt;code&gt;config/bar.exs&lt;/code&gt;, with two distinct routing tables and then:</source>
          <target state="translated">この時点で、疑問に思われるかもしれませんが、2つのノードを2つの異なるルーティングテーブルで開始するにはどうすればよいでしょうか。1つのオプションは、 &lt;code&gt;mix run&lt;/code&gt; &lt;code&gt;--config&lt;/code&gt; フラグを使用することです。たとえば、2つの追加の構成ファイル &lt;code&gt;config/foo.exs&lt;/code&gt; と &lt;code&gt;config/bar.exs&lt;/code&gt; を作成し、2つの異なるルーティングテーブルを使用して、次のように記述できます。</target>
        </trans-unit>
        <trans-unit id="0dfd56da90b26d4f5fcb9d69b1cd07569e6e1396" translate="yes" xml:space="preserve">
          <source>At this point, you may be wondering: should you also locally name bucket processes? Remember buckets are started dynamically based on user input. Since local names MUST be atoms, we would have to dynamically create atoms, which is a bad idea since once an atom is defined, it is never erased nor garbage collected. This means that, if we create atoms dynamically based on user input, we will eventually run out of memory (or to be more precise, the VM will crash because it imposes a hard limit on the number of atoms). This limitation is precisely why we created our own registry (or why one would use Elixir&amp;rsquo;s built-in &lt;a href=&quot;https://hexdocs.pm/elixir/Registry.html&quot;&gt;&lt;code&gt;Registry&lt;/code&gt;&lt;/a&gt; module).</source>
          <target state="translated">この時点で、疑問に思うかもしれません。バケットプロセスにもローカルで名前を付ける必要がありますか？バケットはユーザー入力に基づいて動的に開始されることに注意してください。ローカル名はアトムでなければならないので、アトムを動的に作成する必要があります。アトムが定義されると、それが消去されたりガベージコレクションされたりすることはないため、これは悪い考えです。つまり、ユーザー入力に基づいて動的にアトムを作成すると、最終的にメモリ不足になります（正確には、アトムの数にハード制限があるため、VMがクラッシュします）。この制限が、私たちが独自のレジストリを作成した理由（またはElixirの組み込み&lt;a href=&quot;https://hexdocs.pm/elixir/Registry.html&quot;&gt; &lt;code&gt;Registry&lt;/code&gt; &lt;/a&gt;モジュールを使用する理由）です。</target>
        </trans-unit>
        <trans-unit id="4f19fee95b461d9367b1c2a9128f16cd17a5edf3" translate="yes" xml:space="preserve">
          <source>At this point, you may be wondering: what exactly is an Elixir alias and how is it represented?</source>
          <target state="translated">この時点で、あなたは疑問に思うかもしれません:エリクサーの別名とは何か、それはどのように表現されているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="41dded417052424bdcf3c39f6c8664147fae6806" translate="yes" xml:space="preserve">
          <source>Atom</source>
          <target state="translated">Atom</target>
        </trans-unit>
        <trans-unit id="f53a98286f82798d588f67a7f0db19f7aebc839e" translate="yes" xml:space="preserve">
          <source>Atoms</source>
          <target state="translated">Atoms</target>
        </trans-unit>
        <trans-unit id="2a69989a3d606e64bc701c17d1245c7fdba9b230" translate="yes" xml:space="preserve">
          <source>Atoms and tuples are allowed as keys.</source>
          <target state="translated">アトムやタプルはキーとして認められています。</target>
        </trans-unit>
        <trans-unit id="c3e82516bd38cc41825c1c56991455366d6b7205" translate="yes" xml:space="preserve">
          <source>Atoms are equal if their names are equal.</source>
          <target state="translated">原子は名前が同じなら等しい。</target>
        </trans-unit>
        <trans-unit id="4e0ec53ea5b7d828ef6e5c43d6e21909c2587391" translate="yes" xml:space="preserve">
          <source>Atoms can be written either in &lt;code&gt;:snake_case&lt;/code&gt; or &lt;code&gt;:CamelCase&lt;/code&gt;, although the convention is to use the snake case version throughout Elixir.</source>
          <target state="translated">原子は、のいずれかで記述することができ &lt;code&gt;:snake_case&lt;/code&gt; または &lt;code&gt;:CamelCase&lt;/code&gt; 大会はエリクサー全体のヘビのケースのバージョンを使用することですが、。</target>
        </trans-unit>
        <trans-unit id="7823d59c9025838f9df163a9aa5632eb33e8f5f9" translate="yes" xml:space="preserve">
          <source>Atoms with foreign characters, such as whitespace, must be wrapped in quotes. This rule applies to keywords as well:</source>
          <target state="translated">空白文字のような外来文字を含むアトムは、引用符で包む必要があります。この規則はキーワードにも適用されます。</target>
        </trans-unit>
        <trans-unit id="adfc32a230bc2cd9939f99a65ee1e1c430d56f45" translate="yes" xml:space="preserve">
          <source>Attaches information to exceptions for extra debugging.</source>
          <target state="translated">追加のデバッグ用の例外に情報をアタッチします。</target>
        </trans-unit>
        <trans-unit id="be4563947c24c97f1390cb029a949e02c2dd4bc2" translate="yes" xml:space="preserve">
          <source>Attempting to convert an invalid ISO calendar date will produce an error tuple.</source>
          <target state="translated">無効なISO暦の日付を変換しようとすると、エラータプルが生成されます。</target>
        </trans-unit>
        <trans-unit id="2cb1d997f70ceafe9419b46accfb019d8d855e4b" translate="yes" xml:space="preserve">
          <source>Attention! While the access syntax is allowed in maps via &lt;code&gt;map[key]&lt;/code&gt;, if your map is made of predefined atom keys, you should prefer to access those atom keys with &lt;code&gt;map.key&lt;/code&gt; instead of &lt;code&gt;map[key]&lt;/code&gt;, as &lt;code&gt;map.key&lt;/code&gt; will raise if the key is missing. This is important because, if a map has a predefined set of keys and a key is missing, it is most likely a bug in your software or a typo on the key name. For this reason, because structs are predefined in nature, they only allow the &lt;code&gt;struct.key&lt;/code&gt; syntax and they do not allow the &lt;code&gt;struct[key]&lt;/code&gt; access syntax. See the &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; module for more information.</source>
          <target state="translated">注意！アクセス構文を経由してマップで許可されている間 &lt;code&gt;map[key]&lt;/code&gt; あなたのマップが事前に定義された原子のキーで構成されている場合、あなたがそれらの原子のキーにアクセスすることを好むべきで &lt;code&gt;map.key&lt;/code&gt; の代わりに、 &lt;code&gt;map[key]&lt;/code&gt; として、 &lt;code&gt;map.key&lt;/code&gt; があれば上げますキーがありません。これは重要です。マップに事前に定義されたキーのセットがあり、キーがない場合は、ソフトウェアのバグかキー名のタイプミスの可能性が高いためです。このため、構造体は本質的に事前定義されているため、構造体は &lt;code&gt;struct.key&lt;/code&gt; 構文のみを許可し、 &lt;code&gt;struct[key]&lt;/code&gt; アクセス構文は許可しません。詳細については、&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="5f97e36f103d67250ebb8f2ffecafc5a4f3670e6" translate="yes" xml:space="preserve">
          <source>Autocomplete</source>
          <target state="translated">Autocomplete</target>
        </trans-unit>
        <trans-unit id="59ca0e6a6a5c6fa7d8b2946ea7d9f3d1a2cddf19" translate="yes" xml:space="preserve">
          <source>Autocomplete may not be available on some Windows shells. You may need to pass the &lt;code&gt;--werl&lt;/code&gt; option when starting IEx, as in &lt;code&gt;iex --werl&lt;/code&gt; for it to work. &lt;code&gt;--werl&lt;/code&gt; may be permanently enabled by setting the &lt;code&gt;IEX_WITH_WERL&lt;/code&gt; environment variable.</source>
          <target state="translated">一部のWindowsシェルでは、オートコンプリートが使用できない場合があります。 &lt;code&gt;iex --werl&lt;/code&gt; のように、IExを起動するときに &lt;code&gt;--werl&lt;/code&gt; オプションを渡す必要がある場合があります。 &lt;code&gt;--werl&lt;/code&gt; は、 &lt;code&gt;IEX_WITH_WERL&lt;/code&gt; 環境変数を設定することで永続的に有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="51a4c659ece8f79813a8062061a37db34ec84e7f" translate="yes" xml:space="preserve">
          <source>Automatic code formatting</source>
          <target state="translated">自動コードフォーマット</target>
        </trans-unit>
        <trans-unit id="a5325c58f3190f03981f3d4b6e263a0fcae8b5bc" translate="yes" xml:space="preserve">
          <source>Available options are:</source>
          <target state="translated">利用可能なオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="092cd6bcec2dc4f94a4fc33bc1ed3409700531e1" translate="yes" xml:space="preserve">
          <source>Avoid &lt;code&gt;use&lt;/code&gt; when an &lt;code&gt;import&lt;/code&gt; is enough</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; で十分な場合は &lt;code&gt;use&lt;/code&gt; 避けます</target>
        </trans-unit>
        <trans-unit id="41d25fe1a41fca091b7e6f07deb9576aa406ed90" translate="yes" xml:space="preserve">
          <source>Avoid application configuration</source>
          <target state="translated">アプリケーションの設定を避ける</target>
        </trans-unit>
        <trans-unit id="7dd92d342635cd8bad5012751cc0ba8c68f401f5" translate="yes" xml:space="preserve">
          <source>Avoid macros</source>
          <target state="translated">マクロを避ける</target>
        </trans-unit>
        <trans-unit id="f82e2d945abfb2dbbf3f826fcc4d148cee063c63" translate="yes" xml:space="preserve">
          <source>Avoid spawning unsupervised processes</source>
          <target state="translated">監視されていないプロセスの産卵を避ける</target>
        </trans-unit>
        <trans-unit id="8ee9dc89a780c53fc8d9382fa5ad113c6c75cdf9" translate="yes" xml:space="preserve">
          <source>Avoid using exceptions for control-flow</source>
          <target state="translated">コントロールフローに例外を使用しないようにする</target>
        </trans-unit>
        <trans-unit id="29209be29de64c2bb9545649ddfd6abf62c0ea65" translate="yes" xml:space="preserve">
          <source>Avoid using processes for code organization</source>
          <target state="translated">コード編成にプロセスを使用しないようにする</target>
        </trans-unit>
        <trans-unit id="ee960a2bc0567e3f91ebc97f2955ec11939e5015" translate="yes" xml:space="preserve">
          <source>Avoid working with invalid data</source>
          <target state="translated">無効なデータでの作業を避ける</target>
        </trans-unit>
        <trans-unit id="6bbd15d15dade34920aa898885177fb819b3bbad" translate="yes" xml:space="preserve">
          <source>Awaits a task reply and returns it.</source>
          <target state="translated">タスクの応答を待ち、それを返します。</target>
        </trans-unit>
        <trans-unit id="b3776d63ad7b7a84bfe20d9c6d4a53a2b25d0e43" translate="yes" xml:space="preserve">
          <source>Backends</source>
          <target state="translated">Backends</target>
        </trans-unit>
        <trans-unit id="607e2afde4148b04e8bd542f10f2849f8f644bf6" translate="yes" xml:space="preserve">
          <source>Backends added by this function are not persisted. Therefore if the Logger application or supervision tree is restarted, the backend won't be available. If you need this guarantee, then configure the backend via the application environment.</source>
          <target state="translated">この関数によって追加されたバックエンドは永続化されません。そのため、ロガー アプリケーションや監視ツリーが再起動されると、バックエンドは利用できなくなります。この保証が必要な場合は、アプリケーション環境を介してバックエンドを設定してください。</target>
        </trans-unit>
        <trans-unit id="43d581f1eb0812cfb36d4f0598607e6abe9c3fc9" translate="yes" xml:space="preserve">
          <source>Backends typically allow developers to supply such control strings via configuration files. This module provides &lt;a href=&quot;#compile/1&quot;&gt;&lt;code&gt;compile/1&lt;/code&gt;&lt;/a&gt;, which compiles the string into a format for fast operations at runtime and &lt;a href=&quot;#format/5&quot;&gt;&lt;code&gt;format/5&lt;/code&gt;&lt;/a&gt; to format the compiled pattern into an actual IO data.</source>
          <target state="translated">通常、開発者はバックエンドを使用して、構成ファイルを介してそのような制御文字列を提供できます。このモジュールは&lt;a href=&quot;#compile/1&quot;&gt; &lt;code&gt;compile/1&lt;/code&gt; を&lt;/a&gt;提供します。これは文字列を実行時の高速操作用のフォーマットにコンパイルし、&lt;a href=&quot;#format/5&quot;&gt; &lt;code&gt;format/5&lt;/code&gt; &lt;/a&gt;はコンパイルされたパターンを実際のIOデータにフォーマットします。</target>
        </trans-unit>
        <trans-unit id="01490bc8fe9235ceac536a8719e2fd8ca0b13630" translate="yes" xml:space="preserve">
          <source>BadArityError</source>
          <target state="translated">BadArityError</target>
        </trans-unit>
        <trans-unit id="1df44135a4f51a5f9d12b388a32c4c2e6d2a6b30" translate="yes" xml:space="preserve">
          <source>BadArityError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">BadArityError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5bb59613df97911bc039ac4ce8ed0b812a7d3491" translate="yes" xml:space="preserve">
          <source>BadBooleanError</source>
          <target state="translated">BadBooleanError</target>
        </trans-unit>
        <trans-unit id="57ba7227528009570f1b1d15380fc32ed086f39e" translate="yes" xml:space="preserve">
          <source>BadBooleanError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">BadBooleanError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a0852fff990851477fa9d2fdee0a9048bbbbdb7d" translate="yes" xml:space="preserve">
          <source>BadFunctionError</source>
          <target state="translated">BadFunctionError</target>
        </trans-unit>
        <trans-unit id="e756ec5075fbedd06423ae8813b13fdf69470cc6" translate="yes" xml:space="preserve">
          <source>BadFunctionError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">BadFunctionError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f157c6b78035669d35edd4f53d7a99803e6b19c9" translate="yes" xml:space="preserve">
          <source>BadMapError</source>
          <target state="translated">BadMapError</target>
        </trans-unit>
        <trans-unit id="a74cad8b7640a588410f7882a3ccc9f02553c083" translate="yes" xml:space="preserve">
          <source>BadMapError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">BadMapError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a7b05ea8ad05f0867a5f60c4ed382b666fac7e20" translate="yes" xml:space="preserve">
          <source>BadStructError</source>
          <target state="translated">BadStructError</target>
        </trans-unit>
        <trans-unit id="77be63d18634fd3f43204f653d7f4f7be7b6d9cf" translate="yes" xml:space="preserve">
          <source>BadStructError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">BadStructError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="077fe9c54ed5ed26fa547f4ded3ef9a9bb066d65" translate="yes" xml:space="preserve">
          <source>Base</source>
          <target state="translated">Base</target>
        </trans-unit>
        <trans-unit id="b061ce422c6698d64988deeb26c5124d27241a6d" translate="yes" xml:space="preserve">
          <source>Base 16 alphabet</source>
          <target state="translated">ベース16のアルファベット</target>
        </trans-unit>
        <trans-unit id="d9713d603d3e619edcf68e9a83a17b392250a596" translate="yes" xml:space="preserve">
          <source>Base 32 (extended hex) alphabet</source>
          <target state="translated">ベース32(拡張16進数)アルファベット</target>
        </trans-unit>
        <trans-unit id="f6d0d37e0e6abc4695da716daeb5b71bf9e4e8a9" translate="yes" xml:space="preserve">
          <source>Base 32 alphabet</source>
          <target state="translated">ベース32のアルファベット</target>
        </trans-unit>
        <trans-unit id="2ace0138e855f83bb01e7ea6cfff3e40f0341e66" translate="yes" xml:space="preserve">
          <source>Base 64 (URL and filename safe) alphabet</source>
          <target state="translated">ベース 64 (URL とファイル名の安全な)アルファベット</target>
        </trans-unit>
        <trans-unit id="a8bce8929575acb7ad98c820c9d117c8df047208" translate="yes" xml:space="preserve">
          <source>Base 64 alphabet</source>
          <target state="translated">ベース64アルファベット</target>
        </trans-unit>
        <trans-unit id="8f7bbf48e0f79ed0979b2afc3fafb20bb06f11dd" translate="yes" xml:space="preserve">
          <source>Basic EEx engine that ships with Elixir.</source>
          <target state="translated">Elixirに同梱されている基本的なExエンジン。</target>
        </trans-unit>
        <trans-unit id="3fea98561b7f996109a7e74c90044335541db19e" translate="yes" xml:space="preserve">
          <source>Basic arithmetic</source>
          <target state="translated">基本的な算数</target>
        </trans-unit>
        <trans-unit id="ab72076fa59e5852da2fccb552c3249d259cf025" translate="yes" xml:space="preserve">
          <source>Basic operators</source>
          <target state="translated">基本的なオペレーター</target>
        </trans-unit>
        <trans-unit id="3fc431b29bb2c2516db706b2f480a558166eba6d" translate="yes" xml:space="preserve">
          <source>Basic types</source>
          <target state="translated">基本的な種類</target>
        </trans-unit>
        <trans-unit id="5db51d4d8d4118f127c924c3d2f8f040e27fb0f4" translate="yes" xml:space="preserve">
          <source>Basic writing and formatting syntax</source>
          <target state="translated">基本的な書き方と書式の構文</target>
        </trans-unit>
        <trans-unit id="6e3c900efbf268090f3977656c91979f9f90e7e4" translate="yes" xml:space="preserve">
          <source>Be aware that a negative &lt;code&gt;count&lt;/code&gt; implies the &lt;code&gt;enumerable&lt;/code&gt; will be enumerated twice: once to calculate the position, and a second time to do the actual splitting.</source>
          <target state="translated">否定されることに注意してください &lt;code&gt;count&lt;/code&gt; 意味 &lt;code&gt;enumerable&lt;/code&gt; 、位置、および実際の分割を行うための第2の時間を計算するために一度：二回列挙されます。</target>
        </trans-unit>
        <trans-unit id="c537de13da2b3fc86676babd1bbd74c778fed4a2" translate="yes" xml:space="preserve">
          <source>Be aware that this function can match within or across grapheme boundaries. For example, take the grapheme &quot;&amp;eacute;&quot; which is made of the characters &quot;e&quot; and the acute accent. The following returns &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">この関数は書記素境界内または書記素境界を越えて一致する可能性があることに注意してください。たとえば、文字「e」とアキュートアクセントで構成される書記素「&amp;eacute;」を考えてみます。次は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fe3b9560a0f552cce44a7d701654dd7f10621bc4" translate="yes" xml:space="preserve">
          <source>Be aware that this function can split within or across grapheme boundaries. For example, take the grapheme &quot;&amp;eacute;&quot; which is made of the characters &quot;e&quot; and the acute accent. The following will split the string into two parts:</source>
          <target state="translated">この関数は書記素の境界内またはそれを超えて分割できることに注意してください。たとえば、文字「e」とアキュートアクセントで構成される書記素「&amp;eacute;」を考えてみます。以下は、文字列を2つの部分に分割します。</target>
        </trans-unit>
        <trans-unit id="cf25f9df3bad9cb90f28a2c00f8a03ffb9eb9c29" translate="yes" xml:space="preserve">
          <source>Be careful when invoking this function as any project configuration won't be reloaded.</source>
          <target state="translated">この関数を呼び出す際には、プロジェクトの設定がリロードされないので注意してください。</target>
        </trans-unit>
        <trans-unit id="e18c280856e9dc54c0e0dc6a6cbf86bdcec2ba1b" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; does not hold time information, data will be lost during the conversion.</source>
          <target state="translated">&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;は時間情報がないため、変換中にデータが失われます。</target>
        </trans-unit>
        <trans-unit id="89a503aad4225c39937eafdaf3de6829d7a2c3d7" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; does not hold time nor time zone information, data will be lost during the conversion.</source>
          <target state="translated">&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;は時間もタイムゾーン情報も含まれないため、変換中にデータが失われます。</target>
        </trans-unit>
        <trans-unit id="ee3ed875cfa3017d3e47eeb02c53615d3ef66c7c" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; does not hold time zone information, any time zone related data will be lost during the conversion.</source>
          <target state="translated">&lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;はタイムゾーン情報を保持しないため、タイムゾーン関連のデータは変換中に失われます。</target>
        </trans-unit>
        <trans-unit id="9953ea4685d0c190284f858b1d39f874790b5054" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; does not hold date information, data will be lost during the conversion.</source>
          <target state="translated">&lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;は日付情報を保持しないため、変換中にデータが失われます。</target>
        </trans-unit>
        <trans-unit id="a4d4f5f9b7fb3d32cc67b90484bddec4871ac391" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; does not hold date nor time zone information, data will be lost during the conversion.</source>
          <target state="translated">&lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;は日付やタイムゾーン情報を保持しないため、変換中にデータが失われます。</target>
        </trans-unit>
        <trans-unit id="78be6a8f5f24d82881c32f396a97e82cbdfa517d" translate="yes" xml:space="preserve">
          <source>Because a message may arrive before the timeout is set, even a timeout of &lt;code&gt;0&lt;/code&gt; milliseconds is not guaranteed to execute. To take another action immediately and unconditionally, use a &lt;code&gt;:continue&lt;/code&gt; instruction.</source>
          <target state="translated">タイムアウトが設定される前にメッセージが到着する可能性があるため、タイムアウトが &lt;code&gt;0&lt;/code&gt; ミリ秒であっても、実行が保証されるわけではありません。すぐに無条件に別のアクションを実行するには、 &lt;code&gt;:continue&lt;/code&gt; 命令を使用します。</target>
        </trans-unit>
        <trans-unit id="4eb887b63f6f74f7dc70ebfb02ba9a98c81899af" translate="yes" xml:space="preserve">
          <source>Because code comments are handled apart from the code representation (AST), there are some situations where code comments are seen as ambiguous by the code formatter. For example, the comment in the anonymous function below</source>
          <target state="translated">コードコメントはコード表現(AST)とは別に処理されるため、コードフォーマッタによってはコードコメントが曖昧に見える場合があります。例えば、以下の匿名関数のコメントは</target>
        </trans-unit>
        <trans-unit id="cb95a029baf84de67bb48b3b03c76e87ea66bc98" translate="yes" xml:space="preserve">
          <source>Because private functions cannot be accessed externally, Elixir will warn if a private function has a &lt;code&gt;@doc&lt;/code&gt; attribute and will discard its content. However, you can add code comments to private functions, as with any other piece of code, and we recommend developers to do so whenever they believe it will add relevant information to the readers and maintainers of such code.</source>
          <target state="translated">プライベート関数は外部からアクセスできないため、プライベート関数に &lt;code&gt;@doc&lt;/code&gt; 属性がある場合はElixirが警告し、その内容を破棄します。ただし、他のコードの場合と同様に、プライベート関数にコードコメントを追加できます。開発者が関連する情報をそのようなコードの読者やメンテナーに追加すると思われる場合は、開発者が追加することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="63e17dd4459e7d876a444fbbbb7e7cf39c566595" translate="yes" xml:space="preserve">
          <source>Because processes are linked, we now see a message saying the parent process, which is the shell process, has received an EXIT signal from another process causing the shell to terminate. IEx detects this situation and starts a new shell session.</source>
          <target state="translated">プロセスはリンクされているため、シェルプロセスである親プロセスが他のプロセスから EXIT シグナルを受信してシェルが終了したというメッセージが表示されます。IEx はこの状況を検出し、新しいシェルセッションを開始します。</target>
        </trans-unit>
        <trans-unit id="974c41adb42d893477152cfa18608582df7753a0" translate="yes" xml:space="preserve">
          <source>Because we have assigned the value of 1 to the variable x, this last example could also have been written as:</source>
          <target state="translated">変数 x に 1 の値を代入しているので、この最後の例は次のように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="f4b97ed92549a1467b9e669e260cb145416087a8" translate="yes" xml:space="preserve">
          <source>Because we passed the &lt;code&gt;--sup&lt;/code&gt; flag, Mix automatically added &lt;code&gt;mod: {KVServer.Application, []}&lt;/code&gt;, specifying that &lt;code&gt;KVServer.Application&lt;/code&gt; is our application callback module. &lt;code&gt;KVServer.Application&lt;/code&gt; will start our application supervision tree.</source>
          <target state="translated">&lt;code&gt;--sup&lt;/code&gt; フラグを渡したため、Mixは &lt;code&gt;mod: {KVServer.Application, []}&lt;/code&gt; 自動的に追加し、 &lt;code&gt;KVServer.Application&lt;/code&gt; がアプリケーションコールバックモジュールであることを指定します。 &lt;code&gt;KVServer.Application&lt;/code&gt; がアプリケーション監視ツリーを起動します。</target>
        </trans-unit>
        <trans-unit id="0e079b753ab1db1c0b01fd308f3688e970fbe5e7" translate="yes" xml:space="preserve">
          <source>Before Erlang/OTP 21, the call is going to block until a connection happens. This was done to guarantee ordering. Starting with Erlang/OTP 21, both Erlang and Elixir do not block the call.</source>
          <target state="translated">Erlang/OTP 21の前は、接続が起こるまで通話がブロックされていました。これは順番を保証するために行われました。Erlang/OTP 21からは、ErlangもElixirもコールをブロックしません。</target>
        </trans-unit>
        <trans-unit id="0bd87597929851d458fd795ea7da7ac0201de944" translate="yes" xml:space="preserve">
          <source>Before creating our new application, we must discuss how Mix handles dependencies. In practice, there are two kinds of dependencies we usually work with: internal and external dependencies. Mix supports mechanisms to work with both of them.</source>
          <target state="translated">新しいアプリケーションを作成する前に、Mix がどのように依存関係を扱うかを説明しなければなりません。実際には、私たちが通常扱う依存関係には、内部依存関係と外部依存関係の 2 種類があります。Mix は、その両方を扱うメカニズムをサポートしています。</target>
        </trans-unit>
        <trans-unit id="9e1d3d5382e86bf1a14e9500b332884bdb9faaa9" translate="yes" xml:space="preserve">
          <source>Before doing anything, Mix will compile the current application if needed, unless you pass &lt;code&gt;--no-compile&lt;/code&gt;.</source>
          <target state="translated">何かを行う前に、 &lt;code&gt;--no-compile&lt;/code&gt; を渡さない限り、Mixは必要に応じて現在のアプリケーションをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="deff23ba4c089e0db16c965d3ed9a26698499445" translate="yes" xml:space="preserve">
          <source>Before moving on and adding more features to &lt;code&gt;KV.Bucket&lt;/code&gt;, let&amp;rsquo;s talk about ExUnit callbacks. As you may expect, all &lt;code&gt;KV.Bucket&lt;/code&gt; tests will require a bucket agent to be up and running. Luckily, ExUnit supports callbacks that allow us to skip such repetitive tasks.</source>
          <target state="translated">&lt;code&gt;KV.Bucket&lt;/code&gt; に機能を追加する前に、ExUnitコールバックについて説明しましょう。ご &lt;code&gt;KV.Bucket&lt;/code&gt; 、すべてのKV.Bucketテストでは、バケットエージェントを起動して実行する必要があります。幸いなことに、ExUnitはコールバックをサポートしているため、このような繰り返しの多いタスクをスキップできます。</target>
        </trans-unit>
        <trans-unit id="961885446a9fe194662c4186d4c9a590779945e8" translate="yes" xml:space="preserve">
          <source>Before running the code, it invokes the &lt;code&gt;app.start&lt;/code&gt; task which compiles and loads your project. Then the target expression is profiled, together with all matching function calls using the Erlang trace BIFs. The tracing of the function calls for that is enabled when the profiling is begun, and disabled when profiling is stopped.</source>
          <target state="translated">コードを実行する前に、プロジェクトをコンパイルしてロードする &lt;code&gt;app.start&lt;/code&gt; タスクを呼び出します。次に、ErlangトレースBIFを使用して、一致するすべての関数呼び出しとともに、ターゲット式がプロファイルされます。そのための関数呼び出しのトレースは、プロファイリングの開始時に有効になり、プロファイリングの停止時に無効になります。</target>
        </trans-unit>
        <trans-unit id="98349800481aea068998de4b5050ab0150891107" translate="yes" xml:space="preserve">
          <source>Before running the code, it invokes the &lt;code&gt;app.start&lt;/code&gt; task which compiles and loads your project. Then the target expression is profiled, together with all matching function calls, by setting breakpoints containing counters. These can only be set on BEAM code so BIFs cannot be call count traced.</source>
          <target state="translated">コードを実行する前に、プロジェクトをコンパイルしてロードする &lt;code&gt;app.start&lt;/code&gt; タスクを呼び出します。次に、カウンターを含むブレークポイントを設定することにより、ターゲット式が、一致するすべての関数呼び出しと共にプロファイルされます。これらは、BEAMコードでのみ設定できるため、BIFを呼び出し回数で追跡することはできません。</target>
        </trans-unit>
        <trans-unit id="0c0b9f1f5eae004310d510256ead240f82165663" translate="yes" xml:space="preserve">
          <source>Before running the code, it invokes the &lt;code&gt;app.start&lt;/code&gt; task which compiles and loads your project. Then the target expression is profiled, together with all processes which are spawned by it. Other processes (e.g. those residing in the OTP application supervision tree) are not profiled.</source>
          <target state="translated">コードを実行する前に、プロジェクトをコンパイルしてロードする &lt;code&gt;app.start&lt;/code&gt; タスクを呼び出します。次に、ターゲット式が、それによって生成されたすべてのプロセスとともにプロファイルされます。その他のプロセス（OTPアプリケーション監視ツリーにあるプロセスなど）はプロファイルされません。</target>
        </trans-unit>
        <trans-unit id="1031dca640f3e14f582133d487561b8ee04d85da" translate="yes" xml:space="preserve">
          <source>Before we added monitoring, if a bucket crashed, the registry would forever point to a bucket that no longer exists. If a user tried to read or write to the crashed bucket, it would fail. Any attempt at creating a new bucket with the same name would just return the PID of the crashed bucket. In other words, that registry entry for that bucket would forever be in a bad state. Once we added monitoring, the registry automatically removes the entry for the crashed bucket. Trying to lookup the crashed bucket now (correctly) says the bucket does not exist and a user of the system can successfully create a new one if desired.</source>
          <target state="translated">モニタリングを追加する前は、バケットがクラッシュするとレジストリが永遠に存在しないバケットを指すようになっていました。ユーザがクラッシュしたバケットを読み書きしようとすると失敗します。同じ名前の新しいバケットを作成しようとしても、クラッシュしたバケットの PID を返すだけです。言い換えれば、そのバケットのレジストリエントリは永遠に悪い状態になってしまうということです。モニタリングを追加すると、レジストリはクラッシュしたバケットのエントリを自動的に削除します。今、クラッシュしたバケットを検索しようとすると(正しくは)バケットは存在せず、システムのユーザーが必要に応じて新しいバケットを作成することができます。</target>
        </trans-unit>
        <trans-unit id="73411f78618a7af4cd67aad8b3e0200b03df8a87" translate="yes" xml:space="preserve">
          <source>Before we finish this brief introduction, you will notice that, even though we defined a variable &lt;code&gt;x&lt;/code&gt; inside our quote:</source>
          <target state="translated">この簡単な紹介を終える前に、引用符の中に変数 &lt;code&gt;x&lt;/code&gt; を定義したにもかかわらず、</target>
        </trans-unit>
        <trans-unit id="9e016d24e4bd4f71c8ebd97643051b410bf7754a" translate="yes" xml:space="preserve">
          <source>Before we implement this function, let&amp;rsquo;s change our server to start using our new &lt;code&gt;parse/1&lt;/code&gt; and &lt;code&gt;run/1&lt;/code&gt; functions. Remember, our &lt;code&gt;read_line/1&lt;/code&gt; function was also crashing when the client closed the socket, so let&amp;rsquo;s take the opportunity to fix it, too. Open up &lt;code&gt;lib/kv_server.ex&lt;/code&gt; and replace the existing server definition:</source>
          <target state="translated">この関数を実装する前に、新しい &lt;code&gt;parse/1&lt;/code&gt; &lt;code&gt;run/1&lt;/code&gt; 関数とrun / 1関数の使用を開始するようにサーバーを変更しましょう。覚えておいてください、私たちの &lt;code&gt;read_line/1&lt;/code&gt; クライアントがソケットを閉じたときに、関数もそうのは、あまりにも、それを修正する機会をみましょう、クラッシュしていました。 &lt;code&gt;lib/kv_server.ex&lt;/code&gt; を開き、既存のサーバー定義を置き換えます。</target>
        </trans-unit>
        <trans-unit id="f3303e03cd7a934490164882116bb279452d10ec" translate="yes" xml:space="preserve">
          <source>Before we move on to the next chapter, let&amp;rsquo;s discuss the client/server dichotomy in agents. Let&amp;rsquo;s expand the &lt;code&gt;delete/2&lt;/code&gt; function we have just implemented:</source>
          <target state="translated">次の章に進む前に、エージェントのクライアント/サーバーの二分法について説明しましょう。実装した &lt;code&gt;delete/2&lt;/code&gt; 関数を拡張してみましょう。</target>
        </trans-unit>
        <trans-unit id="c38b5c81b1c893dcec882d171436db1cd1a630dc" translate="yes" xml:space="preserve">
          <source>Behaves as &lt;a href=&quot;#monitor/2&quot;&gt;&lt;code&gt;monitor/2&lt;/code&gt;&lt;/a&gt; except that it allows an extra option to be given, namely &lt;code&gt;:allow_passive_connect&lt;/code&gt;.</source>
          <target state="translated">追加オプション、つまり &lt;code&gt;:allow_passive_connect&lt;/code&gt; を指定できることを除いて、&lt;a href=&quot;#monitor/2&quot;&gt; &lt;code&gt;monitor/2&lt;/code&gt; &lt;/a&gt;として動作します。</target>
        </trans-unit>
        <trans-unit id="e1590670ae5ba07b6059ef77a6163f923d148669" translate="yes" xml:space="preserve">
          <source>Behaves exactly like &lt;a href=&quot;#get_and_update/3&quot;&gt;&lt;code&gt;get_and_update/3&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;keyerror&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception if &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#get_and_update/3&quot;&gt; &lt;code&gt;get_and_update/3&lt;/code&gt; &lt;/a&gt;とまったく同じように動作し &lt;code&gt;key&lt;/code&gt; が、キーが &lt;code&gt;map&lt;/code&gt; 存在しない場合、&lt;a href=&quot;keyerror&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="171ca0385a0e84eb697558f3866b7cb4cf03fcb1" translate="yes" xml:space="preserve">
          <source>Behaviour</source>
          <target state="translated">Behaviour</target>
        </trans-unit>
        <trans-unit id="50adeaa74402f255e81a881e8e825fcfde5736a2" translate="yes" xml:space="preserve">
          <source>Behaviours</source>
          <target state="translated">Behaviours</target>
        </trans-unit>
        <trans-unit id="520b702bda3e42703a9629b3c841c1dac503dd33" translate="yes" xml:space="preserve">
          <source>Behaviours are frequently used with dynamic dispatching. For example, we could add a &lt;code&gt;parse!&lt;/code&gt; function to the &lt;code&gt;Parser&lt;/code&gt; module that dispatches to the given implementation and returns the &lt;code&gt;:ok&lt;/code&gt; result or raises in cases of &lt;code&gt;:error&lt;/code&gt;:</source>
          <target state="translated">ビヘイビアは、動的ディスパッチで頻繁に使用されます。たとえば、 &lt;code&gt;parse!&lt;/code&gt; 追加できます！指定された実装にディスパッチし、 &lt;code&gt;:ok&lt;/code&gt; 結果を返すか、 &lt;code&gt;:error&lt;/code&gt; の場合に発生する &lt;code&gt;Parser&lt;/code&gt; モジュールの関数：</target>
        </trans-unit>
        <trans-unit id="c431c072b0cc17065274eb235452b6f56afb83ac" translate="yes" xml:space="preserve">
          <source>Behaviours can be referenced by modules to ensure they implement required specific function signatures defined by &lt;code&gt;@callback&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@callback&lt;/code&gt; で定義された必要な特定の関数シグネチャを確実に実装するために、モジュールで動作を参照できます。</target>
        </trans-unit>
        <trans-unit id="18891de861c3177370c1c4c8a6abb93b6d478d0c" translate="yes" xml:space="preserve">
          <source>Behaviours in Elixir (and Erlang) are a way to separate and abstract the generic part of a component (which becomes the &lt;em&gt;behaviour module&lt;/em&gt;) from the specific part (which becomes the &lt;em&gt;callback module&lt;/em&gt;).</source>
          <target state="translated">Elixir（およびErlang）の&lt;em&gt;動作&lt;/em&gt;は、コンポーネントの一般的な部分（&lt;em&gt;動作モジュールになる&lt;/em&gt;）を特定の部分（&lt;em&gt;コールバックモジュールに&lt;/em&gt;なる）から分離して抽象化する方法です。</target>
        </trans-unit>
        <trans-unit id="59b495bc5ef8fa3525a42f910a73c32fc61ed8ab" translate="yes" xml:space="preserve">
          <source>Behaviours provide a way to:</source>
          <target state="translated">行動は方法を提供します。</target>
        </trans-unit>
        <trans-unit id="cc4b77c255d4ba04e467a0cc47a0e51ec0adef1c" translate="yes" xml:space="preserve">
          <source>Behind the scenes, &lt;code&gt;use&lt;/code&gt; requires the given module and then calls the &lt;code&gt;__using__/1&lt;/code&gt; callback on it allowing the module to inject some code into the current context. Some modules (for example, the above &lt;code&gt;ExUnit.Case&lt;/code&gt;, but also &lt;code&gt;Supervisor&lt;/code&gt; and &lt;code&gt;GenServer&lt;/code&gt;) use this mechanism to populate your module with some basic behaviour, which your module is intended to override or complete.</source>
          <target state="translated">舞台裏では、 &lt;code&gt;use&lt;/code&gt; は特定のモジュールが必要であり、次にそのモジュールで &lt;code&gt;__using__/1&lt;/code&gt; コールバックを呼び出して、モジュールが現在のコンテキストにコードを挿入できるようにします。一部のモジュール（たとえば、上記の &lt;code&gt;ExUnit.Case&lt;/code&gt; だけでなく、 &lt;code&gt;Supervisor&lt;/code&gt; および &lt;code&gt;GenServer&lt;/code&gt; ）は、このメカニズムを使用して、モジュールをオーバーライドまたは完了することを目的とした基本的な動作をモジュールに設定します。</target>
        </trans-unit>
        <trans-unit id="603deb4a274e7852a27649e6771d381771e20617" translate="yes" xml:space="preserve">
          <source>Below we provide a more detailed look into the available options.</source>
          <target state="translated">以下では、利用可能なオプションについて詳しくご紹介します。</target>
        </trans-unit>
        <trans-unit id="fcad24575feed887abc51ccc85f8548bece28f68" translate="yes" xml:space="preserve">
          <source>Besides &lt;a href=&quot;#async/1&quot;&gt;&lt;code&gt;async/1&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#await/2&quot;&gt;&lt;code&gt;await/2&lt;/code&gt;&lt;/a&gt;, tasks can also be started as part of a supervision tree and dynamically spawned on remote nodes. We will explore all three scenarios next.</source>
          <target state="translated">他に&lt;a href=&quot;#async/1&quot;&gt; &lt;code&gt;async/1&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#await/2&quot;&gt; &lt;code&gt;await/2&lt;/code&gt; &lt;/a&gt;、タスクも監視ツリーの一部として起動することができ、動的にリモート・ノード上で生成されました。次に、3つのシナリオすべてについて説明します。</target>
        </trans-unit>
        <trans-unit id="84bd8dd7435a7e50a7902eac99410b942c4d0240" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;@before_compile&lt;/code&gt;, there are other useful module attributes like &lt;code&gt;@on_definition&lt;/code&gt; and &lt;code&gt;@after_compile&lt;/code&gt;, which you can read more about in &lt;a href=&quot;https://hexdocs.pm/elixir/Module.html&quot;&gt;the docs for the &lt;code&gt;Module&lt;/code&gt; module&lt;/a&gt;. You can also find useful information about macros and the compilation environment in the documentation for the &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html&quot;&gt;&lt;code&gt;Macro&lt;/code&gt; module&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Macro.Env.html&quot;&gt;&lt;code&gt;Macro.Env&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@before_compile&lt;/code&gt; の他にも、 &lt;code&gt;@on_definition&lt;/code&gt; や &lt;code&gt;@after_compile&lt;/code&gt; などの便利なモジュール属性があり&lt;a href=&quot;https://hexdocs.pm/elixir/Module.html&quot;&gt;ます&lt;/a&gt;。これらについては、 &lt;code&gt;Module&lt;/code&gt; モジュールのドキュメントで詳細をご覧ください。マクロとコンパイル環境に関する有用な情報は、&lt;a href=&quot;https://hexdocs.pm/elixir/Macro.html&quot;&gt; &lt;code&gt;Macro&lt;/code&gt; モジュール&lt;/a&gt;と&lt;a href=&quot;https://hexdocs.pm/elixir/Macro.Env.html&quot;&gt; &lt;code&gt;Macro.Env&lt;/code&gt; の&lt;/a&gt;ドキュメントにも記載されています。</target>
        </trans-unit>
        <trans-unit id="b1e80b1ec582384418cc616d1f8343b52b2b4cd5" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;cond&lt;/code&gt;, Elixir also provides the macros &lt;code&gt;if/2&lt;/code&gt; and &lt;code&gt;unless/2&lt;/code&gt; which are useful when you need to check for only one condition:</source>
          <target state="translated">ほか &lt;code&gt;case&lt;/code&gt; と &lt;code&gt;cond&lt;/code&gt; 、エリクサーもマクロを提供 &lt;code&gt;if/2&lt;/code&gt; と &lt;code&gt;unless/2&lt;/code&gt; あなたは一つだけ条件をチェックする必要がある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="f6cdfaf2baa94aad4e65fa26be490d407b1c2ff9" translate="yes" xml:space="preserve">
          <source>Besides allowing pattern matching on struct fields, such as:</source>
          <target state="translated">のような構造体フィールドでのパターンマッチングを可能にする以外にも</target>
        </trans-unit>
        <trans-unit id="01bb2cd8bbff810bc2463c24d74581c14f3d6b3f" translate="yes" xml:space="preserve">
          <source>Besides environments, Mix supports targets. Targets are useful when a project needs to compile to different architectures and some of the dependencies are only available to some of them. By default, the target is &lt;code&gt;:host&lt;/code&gt; but it can be set via the &lt;code&gt;MIX_TARGET&lt;/code&gt; environment variable. The target can be read via &lt;a href=&quot;mix#target/0&quot;&gt;&lt;code&gt;Mix.target/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">環境の他に、Mixはターゲットをサポートします。ターゲットは、プロジェクトをさまざまなアーキテクチャーにコンパイルする必要があり、一部の依存関係がそれらの一部でしか使用できない場合に役立ちます。デフォルトでは、ターゲットは &lt;code&gt;:host&lt;/code&gt; ですが、 &lt;code&gt;MIX_TARGET&lt;/code&gt; 環境変数を使用して設定できます。ターゲットは&lt;a href=&quot;mix#target/0&quot;&gt; &lt;code&gt;Mix.target/0&lt;/code&gt; &lt;/a&gt;を介して読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="57fd661d50a52343735a3a512de7f5de0c57eebb" translate="yes" xml:space="preserve">
          <source>Besides functions for opening, reading and writing files, the &lt;code&gt;File&lt;/code&gt; module has many functions to work with the file system. Those functions are named after their UNIX equivalents. For example, &lt;code&gt;File.rm/1&lt;/code&gt; can be used to remove files, &lt;code&gt;File.mkdir/1&lt;/code&gt; to create directories, &lt;code&gt;File.mkdir_p/1&lt;/code&gt; to create directories and all their parent chain. There are even &lt;code&gt;File.cp_r/2&lt;/code&gt; and &lt;code&gt;File.rm_rf/1&lt;/code&gt; to respectively copy and remove files and directories recursively (i.e., copying and removing the contents of the directories too).</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; モジュールには、ファイルを開いたり、読み込んだり、書き込んだりする機能の他に、ファイルシステムを操作するための多くの機能があります。これらの関数は、UNIXの同等の関数にちなんで名付けられています。たとえば、 &lt;code&gt;File.rm/1&lt;/code&gt; を使用してファイルを削除し、 &lt;code&gt;File.mkdir/1&lt;/code&gt; を使用してディレクトリを作成し、 &lt;code&gt;File.mkdir_p/1&lt;/code&gt; を使用してディレクトリとそのすべての親チェーンを作成できます。でもあります &lt;code&gt;File.cp_r/2&lt;/code&gt; および &lt;code&gt;File.rm_rf/1&lt;/code&gt; をそれぞれコピーすると（すなわち、コピーしすぎディレクトリの内容を削除する）を再帰的に削除ファイルとディレクトリ。</target>
        </trans-unit>
        <trans-unit id="bf0bf58fef26f8d47abf58c4e98d942fe7e09d41" translate="yes" xml:space="preserve">
          <source>Besides getting a value and updating the agent state, agents allow us to get a value and update the agent state in one function call via &lt;code&gt;Agent.get_and_update/2&lt;/code&gt;. Let&amp;rsquo;s implement a &lt;code&gt;KV.Bucket.delete/2&lt;/code&gt; function that deletes a key from the bucket, returning its current value:</source>
          <target state="translated">値を取得してエージェントの状態を更新するほかに、エージェントを使用すると、 &lt;code&gt;Agent.get_and_update/2&lt;/code&gt; を介した1回の関数呼び出しで値を取得してエージェントの状態を更新できます。バケットからキーを削除して現在の値を返す &lt;code&gt;KV.Bucket.delete/2&lt;/code&gt; 関数を実装してみましょう。</target>
        </trans-unit>
        <trans-unit id="9789e063966a758871f9c998af33a9bf355ebc18" translate="yes" xml:space="preserve">
          <source>Besides lowercase sigils, Elixir supports uppercase sigils to deal with escaping characters and interpolation. While both &lt;code&gt;~s&lt;/code&gt; and &lt;code&gt;~S&lt;/code&gt; will return strings, the former allows escape codes and interpolation while the latter does not:</source>
          <target state="translated">小文字の印章に加えて、Elixirは大文字の印章をサポートしてエスケープ文字と補間を処理します。双方の間に &lt;code&gt;~s&lt;/code&gt; と &lt;code&gt;~S&lt;/code&gt; 文字列を返します。後者はしませんが、前者はエスケープコードおよび補間することができます：</target>
        </trans-unit>
        <trans-unit id="d7d97bd69019c17af96e7bec585780be62ea803d" translate="yes" xml:space="preserve">
          <source>Besides regular expressions, Elixir ships with three other sigils.</source>
          <target state="translated">エリクサーは正規表現の他に3つの紋章を持っています。</target>
        </trans-unit>
        <trans-unit id="fa2db308837aea27b007c38a306f2dbb8af757b6" translate="yes" xml:space="preserve">
          <source>Besides relying on pattern matching, &lt;code&gt;rescue&lt;/code&gt; clauses provide some conveniences around exceptions that allow one to rescue an exception by its name. All the following formats are valid patterns in &lt;code&gt;rescue&lt;/code&gt; clauses:</source>
          <target state="translated">パターンマッチングに依存することに加えて、 &lt;code&gt;rescue&lt;/code&gt; 句は、例外を回避するための便利な機能を提供します。次のすべての形式は、 &lt;code&gt;rescue&lt;/code&gt; 句の有効なパターンです。</target>
        </trans-unit>
        <trans-unit id="3ce006769a3ad73d2aa5c3e5097589962e275bb7" translate="yes" xml:space="preserve">
          <source>Besides the &lt;code&gt;BREAK&lt;/code&gt; menu, one can type &lt;code&gt;Ctrl+G&lt;/code&gt; to get to the &lt;code&gt;User switch command&lt;/code&gt; menu. When reached, you can type &lt;code&gt;h&lt;/code&gt; to get more information.</source>
          <target state="translated">&lt;code&gt;BREAK&lt;/code&gt; メニューの他に、 &lt;code&gt;Ctrl+G&lt;/code&gt; を入力して、 &lt;code&gt;User switch command&lt;/code&gt; メニューを表示できます。到達したら、 &lt;code&gt;h&lt;/code&gt; と入力して詳細情報を取得できます。</target>
        </trans-unit>
        <trans-unit id="17a296909c364def2f70ba9542fcca5af1be1690" translate="yes" xml:space="preserve">
          <source>Besides the booleans &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; Elixir also has the concept of a &quot;truthy&quot; or &quot;falsy&quot; value.</source>
          <target state="translated">ブール値の他に、 &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;false&lt;/code&gt; エリクサーには、「真実」または「虚偽」の値という概念もあります。</target>
        </trans-unit>
        <trans-unit id="5b77eafa1881088ae45eaa4e4da415f6bbc48892" translate="yes" xml:space="preserve">
          <source>Besides the functions available in this module, the &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module exposes and auto-imports some basic functionality related to processes available through the following functions:</source>
          <target state="translated">このモジュールで使用可能な関数に加えて、&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;モジュールは、次の関数を通じて使用可能なプロセスに関連するいくつかの基本的な機能を公開および自動インポートします。</target>
        </trans-unit>
        <trans-unit id="24c285ef9b5dcc5c662b164a6b173b44cbf8936b" translate="yes" xml:space="preserve">
          <source>Besides the modules and functions libraries provide as part of their public interface, libraries may also implement important functionality that is not part of their API. While these modules and functions can be accessed, they are meant to be internal to the library and thus should not have documentation for end users.</source>
          <target state="translated">ライブラリがパブリック・インターフェースの一部として提供するモジュールや関数の他に、ライブラリはAPIの一部ではない重要な機能を実装することもあります。これらのモジュールや関数にアクセスすることはできますが、それらはライブラリの内部にあることを意図しているため、エンドユーザのためのドキュメントを持つべきではありません。</target>
        </trans-unit>
        <trans-unit id="d1e278a8ee8e14b171370d3d1993e61557fa885d" translate="yes" xml:space="preserve">
          <source>Besides the synchronous and asynchronous communication provided by &lt;a href=&quot;#call/3&quot;&gt;&lt;code&gt;call/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#cast/2&quot;&gt;&lt;code&gt;cast/2&lt;/code&gt;&lt;/a&gt;, &quot;regular&quot; messages sent by functions such as &lt;a href=&quot;kernel#send/2&quot;&gt;&lt;code&gt;Kernel.send/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;process#send_after/4&quot;&gt;&lt;code&gt;Process.send_after/4&lt;/code&gt;&lt;/a&gt; and similar, can be handled inside the &lt;a href=&quot;#c:handle_info/2&quot;&gt;&lt;code&gt;handle_info/2&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="translated">&lt;a href=&quot;#call/3&quot;&gt; &lt;code&gt;call/3&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#cast/2&quot;&gt; &lt;code&gt;cast/2&lt;/code&gt; &lt;/a&gt;によって提供される同期および非同期通信に加えて、&lt;a href=&quot;kernel#send/2&quot;&gt; &lt;code&gt;Kernel.send/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;process#send_after/4&quot;&gt; &lt;code&gt;Process.send_after/4&lt;/code&gt; &lt;/a&gt;などの関数によって送信された「通常の」メッセージは、&lt;a href=&quot;#c:handle_info/2&quot;&gt; &lt;code&gt;handle_info/2&lt;/code&gt; &lt;/a&gt;コールバック内で処理できます。</target>
        </trans-unit>
        <trans-unit id="517337ce1caa7ff89458c6a131be85fc7edc22c4" translate="yes" xml:space="preserve">
          <source>Besides the tuple defined above, there are five Elixir literals that, when quoted, return themselves (and not a tuple). They are:</source>
          <target state="translated">上で定義したタプルの他に、引用されたときに(タプルではなく)自分自身を返す5つのElixirリテラルがあります。それらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="36c1c37f1ad939c92cf62bb17cfdd2a856f1bff4" translate="yes" xml:space="preserve">
          <source>Besides the tuple described above, Elixir has a few literals that are also part of its AST. Those literals return themselves when quoted. They are:</source>
          <target state="translated">上で説明したタプルの他に、ElixirはASTの一部であるいくつかのリテラルを持っています。これらのリテラルは、引用されると自分自身を返します。それらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="be7cb95beca4417119b196c5145eac30a92f05f3" translate="yes" xml:space="preserve">
          <source>Besides these boolean operators, Elixir also provides &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt; which accept arguments of any type. For these operators, all values except &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt; will evaluate to true:</source>
          <target state="translated">これらのブール演算子の他に、Elixirは &lt;code&gt;||&lt;/code&gt; も提供しています。、 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; および &lt;code&gt;!&lt;/code&gt; 任意のタイプの引数を受け入れます。これらの演算子の場合、 &lt;code&gt;false&lt;/code&gt; と &lt;code&gt;nil&lt;/code&gt; を除くすべての値はtrueと評価されます。</target>
        </trans-unit>
        <trans-unit id="eb8de9ce8757ee3c542141ac80ff3b33dc04edff" translate="yes" xml:space="preserve">
          <source>Best practices</source>
          <target state="translated">ベストプラクティス</target>
        </trans-unit>
        <trans-unit id="21f3045d2e00281b8e684e3df830ced85cb7ac6f" translate="yes" xml:space="preserve">
          <source>Between &lt;code&gt;(&lt;/code&gt;/&lt;code&gt;)&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt; / &lt;code&gt;)&lt;/code&gt; の間：</target>
        </trans-unit>
        <trans-unit id="c2e583cf3da1aee0a9f017fc5ad1b43ad947c175" translate="yes" xml:space="preserve">
          <source>Between &lt;code&gt;fn/end&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;fn/end&lt;/code&gt; 間：</target>
        </trans-unit>
        <trans-unit id="b564736adfe95cd2b39d3044818184c7616b6b8d" translate="yes" xml:space="preserve">
          <source>Between &lt;code&gt;use ExUnit.Case&lt;/code&gt; and setup, add the following call:</source>
          <target state="translated">&lt;code&gt;use ExUnit.Case&lt;/code&gt; とセットアップの間に、次の呼び出しを追加します。</target>
        </trans-unit>
        <trans-unit id="536a214ab9480c5673911e94b4e8775035965909" translate="yes" xml:space="preserve">
          <source>Beware that the Erlang VM does not terminate child processes when it shuts down. Therefore, if you use &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;mix cmd&lt;/code&gt;&lt;/a&gt; to start long running processes and then shut down the VM, it is likely that those child processes won't be terminated with the VM.</source>
          <target state="translated">Erlang VMはシャットダウン時に子プロセスを終了しないことに注意してください。したがって、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;mix cmd&lt;/code&gt; &lt;/a&gt;を使用して実行時間の長いプロセスを開始してからVMをシャットダウンすると、それらの子プロセスがVMで終了しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="ac071b29fee9c70fb03e3c3c8147b7946ee31eea" translate="yes" xml:space="preserve">
          <source>Binaries (and bitstrings)</source>
          <target state="translated">バイナリ (およびビットストリング)</target>
        </trans-unit>
        <trans-unit id="b191af7fc34f7fbb5fbc2a69591b4e9bf648fbff" translate="yes" xml:space="preserve">
          <source>Binaries have a representation similar to tuples, except they are tagged with &lt;code&gt;:&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; instead of &lt;code&gt;:{}&lt;/code&gt;:</source>
          <target state="translated">バイナリはタプルに似た表現を持っていますが、 &lt;code&gt;:{}&lt;/code&gt; ではなく &lt;code&gt;:&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; でタグ付けされている点が異なります。</target>
        </trans-unit>
        <trans-unit id="49aff6fbacb348e58a8db3dc080372ebbadd0f28" translate="yes" xml:space="preserve">
          <source>Binaries, strings, and charlists</source>
          <target state="translated">バイナリ、文字列、文字列リスト</target>
        </trans-unit>
        <trans-unit id="af15fd6b97639efd6a9b693a8880e6903d2f3cd2" translate="yes" xml:space="preserve">
          <source>Binary matching can be used by itself to extract information from binaries:</source>
          <target state="translated">バイナリマッチングは、それ自体を使ってバイナリから情報を抽出することができます。</target>
        </trans-unit>
        <trans-unit id="2042acc40e9773f089632ff1fc5f3d54f8826ee5" translate="yes" xml:space="preserve">
          <source>Binary matching is a powerful feature in Elixir that is useful for extracting information from binaries as well as pattern matching.</source>
          <target state="translated">バイナリマッチングは、パターンマッチングと同様にバイナリから情報を抽出するのに便利なElixirの強力な機能です。</target>
        </trans-unit>
        <trans-unit id="64a4a40cae012874b1a177797783b5c6ec4aefa1" translate="yes" xml:space="preserve">
          <source>Binary pattern matching provides a similar way to decompose a string:</source>
          <target state="translated">バイナリパターンマッチングは、文字列を分解するための同様の方法を提供します。</target>
        </trans-unit>
        <trans-unit id="8ea819ee42276da3a90285cc5b8c1cf028115def" translate="yes" xml:space="preserve">
          <source>Binary pattern matching, however, is simpler and more efficient, so pick the option that better suits your use case.</source>
          <target state="translated">しかし、バイナリーパターンマッチングの方がシンプルで効率的なので、使用ケースに合ったオプションを選択してください。</target>
        </trans-unit>
        <trans-unit id="d61004333e425a59f39f73680dda0fe68656875f" translate="yes" xml:space="preserve">
          <source>Binary/Bitstring Matching</source>
          <target state="translated">バイナリ/ビットストリングのマッチング</target>
        </trans-unit>
        <trans-unit id="c282b192a231740a4b0a7bb6f752b62b8492be4b" translate="yes" xml:space="preserve">
          <source>Binding and unquote fragments</source>
          <target state="translated">バインドとアンクオートの断片</target>
        </trans-unit>
        <trans-unit id="45c425457bcdcfb5085aa625ded75d4bf3929b5b" translate="yes" xml:space="preserve">
          <source>Bitstring - a sequence of bits, created with &lt;a href=&quot;kernel.specialforms#%253C%253C%253E%253E/1&quot;&gt;&lt;code&gt;Kernel.SpecialForms.&amp;lt;&amp;lt;&amp;gt;&amp;gt;/1&lt;/code&gt;&lt;/a&gt;. When the number of bits is divisible by 8, they are called binaries and can be manipulated with Erlang's &lt;code&gt;:binary&lt;/code&gt; module</source>
          <target state="translated">ビット文字列&lt;a href=&quot;kernel.specialforms#%253C%253C%253E%253E/1&quot;&gt; &lt;code&gt;Kernel.SpecialForms.&amp;lt;&amp;lt;&amp;gt;&amp;gt;/1&lt;/code&gt; &lt;/a&gt;で作成されたビットのシーケンス。ビット数が8で割り切れる場合、それらはバイナリと呼ばれ、Erlangの &lt;code&gt;:binary&lt;/code&gt; モジュールで操作できます。</target>
        </trans-unit>
        <trans-unit id="7ea9d52bc54bc6f374f2fad4f115fc7ac1b63024" translate="yes" xml:space="preserve">
          <source>Bitstring generators</source>
          <target state="translated">ビット文字列ジェネレータ</target>
        </trans-unit>
        <trans-unit id="f3c1518585255719399d723cff9097dc10d6275d" translate="yes" xml:space="preserve">
          <source>Bitstring generators are also supported and are very useful when you need to comprehend over bitstring streams. The example below receives a list of pixels from a binary with their respective red, green and blue values and converts them into tuples of three elements each:</source>
          <target state="translated">ビット文字列ジェネレータもサポートされており、ビット文字列ストリームを理解する必要がある場合に非常に便利です。以下の例は、それぞれの赤、緑、青の値を持つバイナリからピクセルのリストを受け取り、それらをそれぞれ3つの要素からなるタプルに変換します。</target>
        </trans-unit>
        <trans-unit id="beaa67a4353085a5a0b2c675dc039718337cb9d0" translate="yes" xml:space="preserve">
          <source>Bitstring generators are also supported and are very useful when you need to organize bitstring streams:</source>
          <target state="translated">ビットストリングジェネレータもサポートされており、ビットストリングストリームを整理する必要がある場合に非常に便利です。</target>
        </trans-unit>
        <trans-unit id="afaf36b63e4b1dad0901ea18c5897446e09881ea" translate="yes" xml:space="preserve">
          <source>Bitstrings are compared byte by byte, incomplete bytes are compared bit by bit.</source>
          <target state="translated">ビットストリングはバイトごとに比較され、不完全なバイトはビットごとに比較されます。</target>
        </trans-unit>
        <trans-unit id="3f687d3e29fc77fc43b356662b1a2660353fff87" translate="yes" xml:space="preserve">
          <source>Bitwise</source>
          <target state="translated">Bitwise</target>
        </trans-unit>
        <trans-unit id="aad380f630b0abfaeebd6b63365cfb723443ad4d" translate="yes" xml:space="preserve">
          <source>Blames the invocation of the given module, function and arguments.</source>
          <target state="translated">与えられたモジュール、関数、引数の呼び出しを非難します。</target>
        </trans-unit>
        <trans-unit id="6f46461436a8e71915de539b6c2a0b43e158d0cd" translate="yes" xml:space="preserve">
          <source>Blink: off.</source>
          <target state="translated">まばたき:オフ。</target>
        </trans-unit>
        <trans-unit id="ba5e3f453d009bde1d3539dbf1179df1faca9394" translate="yes" xml:space="preserve">
          <source>Blink: rapid. MS-DOS ANSI.SYS; 150 per minute or more; not widely supported.</source>
          <target state="translated">ブリンク:高速。MS-DOS ANSI.SYS;1分間に150以上、広くはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="701dbab8ca66a57b0d87ff8fc2dc263f3150cedf" translate="yes" xml:space="preserve">
          <source>Blink: slow. Less than 150 per minute.</source>
          <target state="translated">まばたき:ゆっくり。1分間に150以下。</target>
        </trans-unit>
        <trans-unit id="54c45c033f5eb914fae27a646cbd9e23d3750d19" translate="yes" xml:space="preserve">
          <source>Blocks</source>
          <target state="translated">Blocks</target>
        </trans-unit>
        <trans-unit id="2822489452326c302f28e1501fd6edcfc934d1fa" translate="yes" xml:space="preserve">
          <source>Blocks are multiple Elixir expressions separated by newlines or semi-colons. A new block may be created at any moment by using parentheses.</source>
          <target state="translated">ブロックは、改行またはセミコロンで区切られた複数の Elixir 式です。括弧を使用することで、いつでも新しいブロックを作成することができます。</target>
        </trans-unit>
        <trans-unit id="d103eae36d19a85d68a720e19cf2a1c73ba893fb" translate="yes" xml:space="preserve">
          <source>Blocks are represented as a &lt;code&gt;__block__&lt;/code&gt; call with each line as a separate argument:</source>
          <target state="translated">ブロックは &lt;code&gt;__block__&lt;/code&gt; 呼び出しとして表され、各行が個別の引数として示されます。</target>
        </trans-unit>
        <trans-unit id="c3b2d105cf560a74b63402e4c3067e0eff5cac1a" translate="yes" xml:space="preserve">
          <source>Blocks examples</source>
          <target state="translated">ブロック例</target>
        </trans-unit>
        <trans-unit id="36016951d6cf223fe79a2c8002262083d4f62b06" translate="yes" xml:space="preserve">
          <source>Boolean and.</source>
          <target state="translated">ブール値と</target>
        </trans-unit>
        <trans-unit id="c2e29c3c880739783d09b4fe1f081591e67b960c" translate="yes" xml:space="preserve">
          <source>Boolean not.</source>
          <target state="translated">ブールではありません。</target>
        </trans-unit>
        <trans-unit id="39431fd4748e66e596621d8b72c4abb89473c694" translate="yes" xml:space="preserve">
          <source>Boolean or.</source>
          <target state="translated">論理値または</target>
        </trans-unit>
        <trans-unit id="0786cdff946e6084c50bb7df6cacd8ed965599fa" translate="yes" xml:space="preserve">
          <source>Booleans</source>
          <target state="translated">Booleans</target>
        </trans-unit>
        <trans-unit id="f2506581ad8aed3b0c1c03b8ace8bf389d0d1aef" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#new/3&quot;&gt;&lt;code&gt;new/3&lt;/code&gt;&lt;/a&gt; and sigil return a struct where the date fields can be accessed directly:</source>
          <target state="translated">&lt;a href=&quot;#new/3&quot;&gt; &lt;code&gt;new/3&lt;/code&gt; &lt;/a&gt;とsigilはどちらも、日付フィールドに直接アクセスできる構造体を返します。</target>
        </trans-unit>
        <trans-unit id="c5670efb08fea60db5c1dc778b7fa5fca46a8dfe" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#new/4&quot;&gt;&lt;code&gt;new/4&lt;/code&gt;&lt;/a&gt; and sigil return a struct where the time fields can be accessed directly:</source>
          <target state="translated">両方の&lt;a href=&quot;#new/4&quot;&gt; &lt;code&gt;new/4&lt;/code&gt; &lt;/a&gt;と時間フィールドを直接アクセスすることができる構造体を返す印章。</target>
        </trans-unit>
        <trans-unit id="e6db73dfc41eeeab376e55d7d970cd504e5c8628" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#start_link/3&quot;&gt;&lt;code&gt;start_link/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#start/3&quot;&gt;&lt;code&gt;start/3&lt;/code&gt;&lt;/a&gt; support the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; to register a name on start via the &lt;code&gt;:name&lt;/code&gt; option. Registered names are also automatically cleaned up on termination. The supported values are:</source>
          <target state="translated">両方&lt;a href=&quot;#start_link/3&quot;&gt; &lt;code&gt;start_link/3&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#start/3&quot;&gt; &lt;code&gt;start/3&lt;/code&gt; &lt;/a&gt;のサポート&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; は&lt;/a&gt;経由して起動時に名前を登録する &lt;code&gt;:name&lt;/code&gt; オプション。登録された名前も終了時に自動的にクリーンアップされます。サポートされている値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6a2c37b3cef4535145ce827a33ddc90d02fb5af8" translate="yes" xml:space="preserve">
          <source>Both alias and the regular stack are reenabled when this function is called.</source>
          <target state="translated">この関数が呼び出されると、エイリアスと通常のスタックの両方が有効になります。</target>
        </trans-unit>
        <trans-unit id="c950a48885327096ba9eaa9566182e792003879f" translate="yes" xml:space="preserve">
          <source>Both errors and warnings are a list of three-element tuples containing the file, line and the formatted error/warning.</source>
          <target state="translated">エラーと警告の両方は、ファイル、行、およびフォーマットされたエラー/警告を含む3つの要素のタプルのリストです。</target>
        </trans-unit>
        <trans-unit id="ced4465ef3cf40ff59c16c913d6d37a1752d7479" translate="yes" xml:space="preserve">
          <source>Both key-based access syntaxes can be used with the nested update functions and macros in &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;, such as &lt;a href=&quot;kernel#get_in/2&quot;&gt;&lt;code&gt;Kernel.get_in/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#put_in/3&quot;&gt;&lt;code&gt;Kernel.put_in/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#update_in/3&quot;&gt;&lt;code&gt;Kernel.update_in/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#pop_in/2&quot;&gt;&lt;code&gt;Kernel.pop_in/2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;kernel#get_and_update_in/3&quot;&gt;&lt;code&gt;Kernel.get_and_update_in/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">両方の鍵ベースのアクセス構文はでネストされた更新機能とマクロを使用することができる&lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt;など、&lt;a href=&quot;kernel#get_in/2&quot;&gt; &lt;code&gt;Kernel.get_in/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#put_in/3&quot;&gt; &lt;code&gt;Kernel.put_in/3&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#update_in/3&quot;&gt; &lt;code&gt;Kernel.update_in/3&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#pop_in/2&quot;&gt; &lt;code&gt;Kernel.pop_in/2&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;kernel#get_and_update_in/3&quot;&gt; &lt;code&gt;Kernel.get_and_update_in/3&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d1725c5aa2fe9943dc5f589af21621f3d6dac806" translate="yes" xml:space="preserve">
          <source>Both keyword lists (list of two-element tuples where the first element is atom) and maps with atom keys support a keyword notation where the colon character &lt;code&gt;:&lt;/code&gt; is moved to the end of the atom. &lt;code&gt;%{hello: &quot;world&quot;}&lt;/code&gt; is equivalent to &lt;code&gt;%{:hello =&amp;gt; &quot;world&quot;}&lt;/code&gt; and &lt;code&gt;[foo: :bar]&lt;/code&gt; is equivalent to &lt;code&gt;[{:foo, :bar}]&lt;/code&gt;. This notation is a syntax sugar that emits the same AST representation. It will be explained in later sections.</source>
          <target state="translated">両方のキーワードリスト（最初の要素がアトムである2要素のタプルのリスト）とアトムキーを使用したマップは、コロン記号 &lt;code&gt;:&lt;/code&gt; がアトムの末尾に移動するキーワード表記をサポートしています。 &lt;code&gt;%{hello: &quot;world&quot;}&lt;/code&gt; は &lt;code&gt;%{:hello =&amp;gt; &quot;world&quot;}&lt;/code&gt; と同等で、 &lt;code&gt;[foo: :bar]&lt;/code&gt; は &lt;code&gt;[{:foo, :bar}]&lt;/code&gt; と同等です。この表記は、同じAST表現を出力する構文糖衣です。これについては、後のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="aeaad2964ed5e5302fd8d6cbf6876b036e35f28d" translate="yes" xml:space="preserve">
          <source>Both parameters can be a filename or an IO device opened with &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;bytes_count&lt;/code&gt; specifies the number of bytes to copy, the default being &lt;code&gt;:infinity&lt;/code&gt;.</source>
          <target state="translated">どちらのパラメーターも、ファイル名または&lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; &lt;/a&gt;で開いたIOデバイスです。 &lt;code&gt;bytes_count&lt;/code&gt; は、コピーするバイト数を指定します。デフォルトは &lt;code&gt;:infinity&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b065bf9a58cf78ea7c21c2504ab89c6bf366d41d" translate="yes" xml:space="preserve">
          <source>Both these options accept a keyword list where the key is an atom defining the name of the switch and value is the &lt;code&gt;type&lt;/code&gt; of the switch (see the &quot;Types&quot; section below for more information).</source>
          <target state="translated">これらのオプションはどちらも、キーリストがスイッチの名前を定義するアトムであり、値がスイッチの &lt;code&gt;type&lt;/code&gt; であるキーワードリストを受け入れます（詳細については、以下の「タイプ」セクションを参照してください）。</target>
        </trans-unit>
        <trans-unit id="fe42655b432ab90415ad78eca77b12d1539f938b" translate="yes" xml:space="preserve">
          <source>Both warning behaviours could be changed by explicitly setting the &lt;code&gt;:warn&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:warn&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; に明示的に設定することで、両方の警告動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="4804b38853ff3a7357a1b3869d1bda894f6fb5c8" translate="yes" xml:space="preserve">
          <source>Breaks a pipeline expression into a list.</source>
          <target state="translated">パイプライン式をリストに分割します。</target>
        </trans-unit>
        <trans-unit id="a3a49c6ab668c2b3b545008e5e7b0af2866999c8" translate="yes" xml:space="preserve">
          <source>Breaks and &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">休憩と&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt; &lt;code&gt;mix test&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9d9f59f6ab1ddf5fe748e2618c2c67b4cc598990" translate="yes" xml:space="preserve">
          <source>Bright (increased intensity) or bold.</source>
          <target state="translated">明るく(強度を増す)または大胆に。</target>
        </trans-unit>
        <trans-unit id="838f6cdccb12d9e52e7eaf582463cf22eb4cba90" translate="yes" xml:space="preserve">
          <source>Bug fixes and security patches</source>
          <target state="translated">バグ修正とセキュリティパッチ</target>
        </trans-unit>
        <trans-unit id="c41f68079c3956a3a9d158dc0407d610d85618c9" translate="yes" xml:space="preserve">
          <source>Bugs: if an API has undesired behaviour, a program that depends on the buggy behaviour may break if the bug is fixed. We reserve the right to fix such bugs.</source>
          <target state="translated">バグ:APIが望ましくない動作をしている場合、バグが修正された場合、バグのある動作に依存しているプログラムが壊れてしまう可能性があります。我々はそのようなバグを修正する権利を留保します。</target>
        </trans-unit>
        <trans-unit id="a375cb36a8473ab5ec8546cdcf8ac0d2a5cb8b43" translate="yes" xml:space="preserve">
          <source>Build information can be added by appending a plus sign and a series of dot-separated identifiers immediately following the patch or pre-release version. Identifiers consist of only ASCII alphanumeric characters and hyphens (&lt;code&gt;[0-9A-Za-z-]&lt;/code&gt;):</source>
          <target state="translated">ビルド情報は、パッチまたはプレリリースバージョンの直後に、プラス記号と一連のドット区切りの識別子を追加することで追加できます。識別子は、ASCII英数字とハイフン（ &lt;code&gt;[0-9A-Za-z-]&lt;/code&gt; ）のみで構成されています。</target>
        </trans-unit>
        <trans-unit id="a6e387e513a488787baf35f75987dd36421ea7d2" translate="yes" xml:space="preserve">
          <source>Build segments are ignored: if two versions differ only in their build segment they are considered to be equal.</source>
          <target state="translated">ビルドセグメントは無視されます:2つのバージョンがビルドセグメントだけ異なる場合、それらは等しいとみなされます。</target>
        </trans-unit>
        <trans-unit id="bad1e9b6552746278d7a8c6c088673f831353f0b" translate="yes" xml:space="preserve">
          <source>Build your first Elixir project</source>
          <target state="translated">初めてのElixirプロジェクトを構築する</target>
        </trans-unit>
        <trans-unit id="a7c7f9a08b1bad090b46d9ebf6e47a7e84c9421c" translate="yes" xml:space="preserve">
          <source>Building IO data is cheaper than concatenating binaries. Concatenating multiple pieces of IO data just means putting them together inside a list since IO data can be arbitrarily nested, and that's a cheap and efficient operation. Most of the IO-based APIs, such as &lt;code&gt;:gen_tcp&lt;/code&gt;, &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;, etc, receive IO data and write it to the socket directly without converting it to binary.</source>
          <target state="translated">IOデータの構築は、バイナリを連結するよりも安価です。複数のIOデータを連結するとは、IOデータを任意にネストできるため、リスト内にまとめることを意味します。これは、安価で効率的な操作です。 &lt;code&gt;:gen_tcp&lt;/code&gt; 、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt;などのほとんどのIOベースのAPIは、IOデータを受け取り、バイナリに変換せずにソケットに直接書き込みます。</target>
        </trans-unit>
        <trans-unit id="c158d8129679833ab365e0432154a06c26bbe385" translate="yes" xml:space="preserve">
          <source>Building on top of the exit signals mentioned above, if the process started by the command line exits with any of the three reasons above, its exit is considered normal and the Operating System process will exit with status 0.</source>
          <target state="translated">上記の終了信号に加えて、コマンドラインで起動されたプロセスが上記の3つの理由のいずれかで終了した場合、その終了は正常とみなされ、オペレーティングシステムプロセスはステータス0で終了します。</target>
        </trans-unit>
        <trans-unit id="54488c84dcebf713a9804555c846d54e655ff471" translate="yes" xml:space="preserve">
          <source>Building our own test case</source>
          <target state="translated">独自のテストケースの構築</target>
        </trans-unit>
        <trans-unit id="5b816d21e0eec18041c314dcb38039717c983b72" translate="yes" xml:space="preserve">
          <source>Builds a naive datetime from date and time structs.</source>
          <target state="translated">日付と時刻構造体からナイーブな datetime を構築します。</target>
        </trans-unit>
        <trans-unit id="3802216eb98726ee9ca40c4c3bac375bd9485cbb" translate="yes" xml:space="preserve">
          <source>Builds a new ISO date.</source>
          <target state="translated">新しいISOの日付をビルドします。</target>
        </trans-unit>
        <trans-unit id="b5365600952fb4b419ca2ffa21c352a921992cfb" translate="yes" xml:space="preserve">
          <source>Builds a new ISO naive datetime.</source>
          <target state="translated">新しい ISO ナイーブな datetime をビルドします。</target>
        </trans-unit>
        <trans-unit id="ad04bee5eab482961a816bfa7021b7c0d60dd82a" translate="yes" xml:space="preserve">
          <source>Builds a new time.</source>
          <target state="translated">新しい時間を構築します。</target>
        </trans-unit>
        <trans-unit id="e8ea57a5a998c38bcfc9ffa8c023a39dd669576d" translate="yes" xml:space="preserve">
          <source>Builds a path from &lt;code&gt;relative_to&lt;/code&gt; to &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">以下からのパスビルド &lt;code&gt;relative_to&lt;/code&gt; へ &lt;code&gt;path&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22bdb46a287e3157896ab159a9b538b7fcd94ffb" translate="yes" xml:space="preserve">
          <source>Builds an escript for the project.</source>
          <target state="translated">プロジェクト用のスクリプトをビルドします。</target>
        </trans-unit>
        <trans-unit id="3596331ae831e5817637a172c927de54ca3c406d" translate="yes" xml:space="preserve">
          <source>Builds and overrides a child specification.</source>
          <target state="translated">子仕様をビルドしてオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="0943df460e764126fabb5f2d806ad8f731c23730" translate="yes" xml:space="preserve">
          <source>Builds the project structure for the given application.</source>
          <target state="translated">与えられたアプリケーションのプロジェクト構造を構築します。</target>
        </trans-unit>
        <trans-unit id="9ce6098db87d0ac3e024a19c0c868db81217ca3a" translate="yes" xml:space="preserve">
          <source>Built-in protocols</source>
          <target state="translated">内蔵プロトコル</target>
        </trans-unit>
        <trans-unit id="d424bfa2909fd88b6e78f50f994b1bd31b188869" translate="yes" xml:space="preserve">
          <source>Built-in time zone database that works only in Etc/UTC.</source>
          <target state="translated">Etc/UTCでのみ動作するタイムゾーンデータベースを内蔵。</target>
        </trans-unit>
        <trans-unit id="4389d7f528857f621560c37a11c338ec93a16c7f" translate="yes" xml:space="preserve">
          <source>Built-in translation function.</source>
          <target state="translated">翻訳機能を内蔵しています。</target>
        </trans-unit>
        <trans-unit id="16eecec82d486c492cf075a47b6a4441bd83afc7" translate="yes" xml:space="preserve">
          <source>Built-in type</source>
          <target state="translated">ビルトインタイプ</target>
        </trans-unit>
        <trans-unit id="0f6bebd51ff8927e6e3679a7b2412429e9c60cb6" translate="yes" xml:space="preserve">
          <source>Built-in types</source>
          <target state="translated">ビルトインタイプ</target>
        </trans-unit>
        <trans-unit id="3ce0e81919d4eeb06fc46e63df5ab62e9c33b1f7" translate="yes" xml:space="preserve">
          <source>But &lt;strong&gt;do&lt;/strong&gt;:</source>
          <target state="translated">しかし、&lt;strong&gt;そうします&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="94aeec5dec71ba6c72dd8ee87f32d3fcfa0e12f5" translate="yes" xml:space="preserve">
          <source>But let&amp;rsquo;s also try something different. Let&amp;rsquo;s write integration tests that rely on the global server names to exercise the whole stack from the TCP server to the bucket. Our integration tests will rely on global state and must be synchronous. With integration tests, we get coverage on how the components in our application work together at the cost of test performance. They are typically used to test the main flows in your application. For example, we should avoid using integration tests to test an edge case in our command parsing implementation.</source>
          <target state="translated">しかし、別のことも試してみましょう。TCPサーバーからバケットまでスタック全体を実行するために、グローバルサーバー名に依存する統合テストを作成してみましょう。統合テストはグローバルな状態に依存し、同期する必要があります。統合テストでは、アプリケーションのコンポーネントがどのように連携するかについて、テストパフォーマンスを犠牲にしてカバレッジを取得します。これらは通常、アプリケーションのメインフローをテストするために使用されます。たとえば、コマンド解析の実装では、統合テストを使用してエッジケースをテストすることは避けてください。</target>
        </trans-unit>
        <trans-unit id="2104911582eed895c4670127fe6ced7d06c28a31" translate="yes" xml:space="preserve">
          <source>But this is recommended only for scripting and should be avoided in production code. Generally speaking, processes should always be started inside supervision trees.</source>
          <target state="translated">しかし、これはスクリプティングのためだけに推奨されており、プロダクションコードでは避けるべきです。一般的に言えば、プロセスは常に監視ツリーの中で開始されるべきです。</target>
        </trans-unit>
        <trans-unit id="a957b50ab3b7a97450a9f30efde74d666b75a07a" translate="yes" xml:space="preserve">
          <source>But we are not done yet. So far we are supervising the registry but our application is also starting buckets. Since buckets are started dynamically, they have to be supervised by a special type of supervisor, called &lt;code&gt;DynamicSupervisor&lt;/code&gt;, which we will explore next.</source>
          <target state="translated">しかし、まだ終わっていません。これまでのところ、レジストリを監視していますが、アプリケーションもバケットを開始しています。バケットは動的に開始されるため、次に説明する &lt;code&gt;DynamicSupervisor&lt;/code&gt; と呼ばれる特別なタイプのスーパーバイザによって監視される必要があります。</target>
        </trans-unit>
        <trans-unit id="259915d984d09b8201e37a16fe47bc5e83ead48a" translate="yes" xml:space="preserve">
          <source>By calling &lt;a href=&quot;#register/3&quot;&gt;&lt;code&gt;register/3&lt;/code&gt;&lt;/a&gt;, different processes can register under a given key and associate any value under that key. In this case, let's register the current process under the key &lt;code&gt;&quot;hello&quot;&lt;/code&gt; and attach the &lt;code&gt;{IO, :inspect}&lt;/code&gt; tuple to it:</source>
          <target state="translated">&lt;a href=&quot;#register/3&quot;&gt; &lt;code&gt;register/3&lt;/code&gt; を&lt;/a&gt;呼び出すことにより、さまざまなプロセスが特定のキーの下で登録し、そのキーの下の任意の値を関連付けることができます。この場合、現在のプロセスをキー &lt;code&gt;&quot;hello&quot;&lt;/code&gt; 下に登録し、それに &lt;code&gt;{IO, :inspect}&lt;/code&gt; タプルをアタッチします。</target>
        </trans-unit>
        <trans-unit id="35c51c698203bdb71ecbe3d1c4e04427369f9034" translate="yes" xml:space="preserve">
          <source>By convention, &lt;code&gt;gcd(0, 0)&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">慣例により、 &lt;code&gt;gcd(0, 0)&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4048bc8096f6b36395ad6e4a56b15f84086c68e9" translate="yes" xml:space="preserve">
          <source>By default Elixir supports all the module attributes supported by Erlang, but custom attributes can be used as well:</source>
          <target state="translated">デフォルトではElixirはErlangでサポートされているすべてのモジュール属性をサポートしていますが、カスタム属性を使うこともできます。</target>
        </trans-unit>
        <trans-unit id="29b4b62fb6ee1da01a3d45071c4e61941d60a2f2" translate="yes" xml:space="preserve">
          <source>By default functions starting with &lt;code&gt;_&lt;/code&gt; are not imported. If you really want to import a function starting with &lt;code&gt;_&lt;/code&gt; you must explicitly include it in the &lt;code&gt;:only&lt;/code&gt; selector.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;_&lt;/code&gt; で始まる関数はインポートされません。 &lt;code&gt;_&lt;/code&gt; で始まる関数を本当にインポートする場合は、明示的に &lt;code&gt;:only&lt;/code&gt; セレクターに含める必要があります。</target>
        </trans-unit>
        <trans-unit id="428db1ab9fef04afe30a2b4353b549c7fa27a980" translate="yes" xml:space="preserve">
          <source>By default it replaces all occurrences but this behaviour can be controlled through the &lt;code&gt;:global&lt;/code&gt; option; see the &quot;Options&quot; section below.</source>
          <target state="translated">デフォルトではすべての出現箇所を置き換えますが、この動作は &lt;code&gt;:global&lt;/code&gt; オプションで制御できます。以下の「オプション」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6b5c9ac97926d41c848960a670c7a3023e1508cb" translate="yes" xml:space="preserve">
          <source>By default they are stored in the app path inside the build directory. Umbrella applications have the manifest path set to the root of the build directory. Directories may be changed in future releases.</source>
          <target state="translated">既定では、ビルド ディレクトリ内のアプリ パスに格納されます。アンブレラアプリケーションでは、マニフェストパスがビルドディレクトリのルートに設定されます。ディレクトリは将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="e03fb74ffa75b5e845b130ed2ea480214ef77b84" translate="yes" xml:space="preserve">
          <source>By default this task works across all environments, unless &lt;code&gt;--only&lt;/code&gt; is given.</source>
          <target state="translated">&lt;code&gt;--only&lt;/code&gt; が指定されていない限り、このタスクはデフォルトですべての環境で機能します。</target>
        </trans-unit>
        <trans-unit id="4b1fb5bfb4739bdd9aa579eb2c739f86cf625765" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;EEx&lt;/code&gt;&lt;/a&gt; uses the &lt;a href=&quot;eex.smartengine&quot;&gt;&lt;code&gt;EEx.SmartEngine&lt;/code&gt;&lt;/a&gt; that provides some conveniences on top of the simple &lt;a href=&quot;eex.engine&quot;&gt;&lt;code&gt;EEx.Engine&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;EEx&lt;/code&gt; &lt;/a&gt;使用しています&lt;a href=&quot;eex.smartengine&quot;&gt; &lt;code&gt;EEx.SmartEngine&lt;/code&gt; &lt;/a&gt;シンプルの上にいくつかの便利さを提供してい&lt;a href=&quot;eex.engine&quot;&gt; &lt;code&gt;EEx.Engine&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9bdca89e148f6c41a836026b82ff88340bd20f20" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#import_file/1&quot;&gt;&lt;code&gt;import_file/1&lt;/code&gt;&lt;/a&gt; fails when the given file does not exist. However, since &lt;a href=&quot;#import_file/1&quot;&gt;&lt;code&gt;import_file/1&lt;/code&gt;&lt;/a&gt; is expanded at compile-time, it's not possible to conditionally import a file since the macro is always expanded:</source>
          <target state="translated">デフォルトでは、指定されたファイルが存在しない場合、&lt;a href=&quot;#import_file/1&quot;&gt; &lt;code&gt;import_file/1&lt;/code&gt; は&lt;/a&gt;失敗します。ただし、&lt;a href=&quot;#import_file/1&quot;&gt; &lt;code&gt;import_file/1&lt;/code&gt; &lt;/a&gt;はコンパイル時に展開されるため、マクロは常に展開されるため、条件付きでファイルをインポートすることはできません。</target>
        </trans-unit>
        <trans-unit id="adb610af913a885c5f8ec16a7315dfe5ad91f080" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;date#to_iso8601/2&quot;&gt;&lt;code&gt;Date.to_iso8601/2&lt;/code&gt;&lt;/a&gt; returns dates formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format through passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;date#to_iso8601/2&quot;&gt; &lt;code&gt;Date.to_iso8601/2&lt;/code&gt; &lt;/a&gt;は、人間が読みやすいように「拡張」フォーマットでフォーマットされた日付を返します。 &lt;code&gt;:basic&lt;/code&gt; オプションを渡すことで、「基本」形式もサポートします。</target>
        </trans-unit>
        <trans-unit id="ccc1fef33702c4720574cd45b1815c6fd01a3c75" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;datetime#to_iso8601/2&quot;&gt;&lt;code&gt;DateTime.to_iso8601/2&lt;/code&gt;&lt;/a&gt; returns datetimes formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format through passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;datetime#to_iso8601/2&quot;&gt; &lt;code&gt;DateTime.to_iso8601/2&lt;/code&gt; &lt;/a&gt;は、人間が読みやすいように、「拡張」フォーマットでフォーマットされた日時を返します。 &lt;code&gt;:basic&lt;/code&gt; オプションを渡すことで、「基本」形式もサポートします。</target>
        </trans-unit>
        <trans-unit id="31bee08f151471a3561e8ba12545f1a1c133d832" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;naivedatetime#to_iso8601/2&quot;&gt;&lt;code&gt;NaiveDateTime.to_iso8601/2&lt;/code&gt;&lt;/a&gt; returns naive datetimes formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format through passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;naivedatetime#to_iso8601/2&quot;&gt; &lt;code&gt;NaiveDateTime.to_iso8601/2&lt;/code&gt; &lt;/a&gt;は、人間が読みやすいように、「拡張」フォーマットでフォーマットされた単純な日時を返します。 &lt;code&gt;:basic&lt;/code&gt; オプションを渡すことで、「基本」形式もサポートします。</target>
        </trans-unit>
        <trans-unit id="b515c8daeec8b46c7f7d220a1b811128e57e311e" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;time#to_iso8601/2&quot;&gt;&lt;code&gt;Time.to_iso8601/2&lt;/code&gt;&lt;/a&gt; returns times formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format through passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;time#to_iso8601/2&quot;&gt; &lt;code&gt;Time.to_iso8601/2&lt;/code&gt; &lt;/a&gt;は、人間が読みやすいように、「拡張」フォーマットでフォーマットされた時間を返します。 &lt;code&gt;:basic&lt;/code&gt; オプションを渡すことで、「基本」形式もサポートします。</target>
        </trans-unit>
        <trans-unit id="b8cda1125e6a420cc973a5e4e861c0de6be40f01" translate="yes" xml:space="preserve">
          <source>By default, Elixir imports functions and macros from the given module, except the ones starting with underscore (which are usually callbacks):</source>
          <target state="translated">デフォルトでは、アンダースコアで始まるもの(通常はコールバック)を除いて、Elixirは指定されたモジュールから関数やマクロをインポートします。</target>
        </trans-unit>
        <trans-unit id="94a6204986c6d52028cb274c78170f8522dfc345" translate="yes" xml:space="preserve">
          <source>By default, Elixir provides some basic types, such as &lt;code&gt;integer&lt;/code&gt; or &lt;code&gt;pid&lt;/code&gt;, as well as more complex types: for example, the &lt;code&gt;round/1&lt;/code&gt; function, which rounds a float to its nearest integer, takes a &lt;code&gt;number&lt;/code&gt; as an argument (an &lt;code&gt;integer&lt;/code&gt; or a &lt;code&gt;float&lt;/code&gt;) and returns an &lt;code&gt;integer&lt;/code&gt;. As you can see &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#round/1&quot;&gt;in its documentation&lt;/a&gt;, &lt;code&gt;round/1&lt;/code&gt;&amp;rsquo;s typed signature is written as:</source>
          <target state="translated">デフォルトでは、Elixirは &lt;code&gt;integer&lt;/code&gt; や &lt;code&gt;pid&lt;/code&gt; などのいくつかの基本的なタイプと、より複雑なタイプを提供します。たとえば、float &lt;code&gt;round/1&lt;/code&gt; 関数は、floatを最も近い整数に丸め、 &lt;code&gt;number&lt;/code&gt; を引数として受け取ります（ &lt;code&gt;integer&lt;/code&gt; または &lt;code&gt;float&lt;/code&gt; ）戻る &lt;code&gt;integer&lt;/code&gt; 。&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#round/1&quot;&gt;ドキュメント&lt;/a&gt;で確認できるように、 &lt;code&gt;round/1&lt;/code&gt; の型付き署名は次のように記述されています。</target>
        </trans-unit>
        <trans-unit id="1d78fd453e9e78e2b87f694e9f9cc1959686ec03" translate="yes" xml:space="preserve">
          <source>By default, Elixir uses the record name as the first element of the tuple (the &quot;tag&quot;). However, a different tag can be specified when defining a record, as in the following example, in which we use &lt;code&gt;Customer&lt;/code&gt; as the second argument of &lt;a href=&quot;#defrecord/3&quot;&gt;&lt;code&gt;defrecord/3&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">デフォルトでは、Elixirはレコード名をタプルの最初の要素（「タグ」）として使用します。ただし、次の例のように、レコードを定義するときに別のタグを指定できます。ここでは、&lt;a href=&quot;#defrecord/3&quot;&gt; &lt;code&gt;defrecord/3&lt;/code&gt; の&lt;/a&gt; 2番目の引数として &lt;code&gt;Customer&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="fecf0c12d9669a08a42b3ae280cf7c91a67014c4" translate="yes" xml:space="preserve">
          <source>By default, a SIGTERM from the operating system will automatically translate to &lt;a href=&quot;system#stop/0&quot;&gt;&lt;code&gt;System.stop/0&lt;/code&gt;&lt;/a&gt;. You can also have more explicit control over operating system signals via the &lt;a href=&quot;http://www.erlang.org/doc/man/os.html#set_signal-2&quot;&gt;&lt;code&gt;:os.set_signal/2&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">デフォルトでは、オペレーティングシステムのSIGTERMは自動的に&lt;a href=&quot;system#stop/0&quot;&gt; &lt;code&gt;System.stop/0&lt;/code&gt; に&lt;/a&gt;変換されます。&lt;a href=&quot;http://www.erlang.org/doc/man/os.html#set_signal-2&quot;&gt; &lt;code&gt;:os.set_signal/2&lt;/code&gt; &lt;/a&gt;関数を使用して、オペレーティングシステムシグナルをより明示的に制御することもできます。</target>
        </trans-unit>
        <trans-unit id="d6e330cb0e08f49bb3e2e3203bfbe1f8002483ca" translate="yes" xml:space="preserve">
          <source>By default, a very simple wrapper around OTP's &lt;code&gt;cover&lt;/code&gt; is used as a tool, but it can be overridden as follows:</source>
          <target state="translated">デフォルトでは、OTP &lt;code&gt;cover&lt;/code&gt; 非常に単純なラッパーがツールとして使用されますが、次のようにオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="6a9b40c40cdba277f891d9a5de3cd80838db5f8e" translate="yes" xml:space="preserve">
          <source>By default, both options are &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、どちらのオプションも &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f61d408262ba8f9487dfd034c6dee6a7168af604" translate="yes" xml:space="preserve">
          <source>By default, dependencies are fetched using the &lt;a href=&quot;https://hex.pm/&quot;&gt;Hex package manager&lt;/a&gt;:</source>
          <target state="translated">デフォルトでは、依存関係は&lt;a href=&quot;https://hex.pm/&quot;&gt;16進数のパッケージマネージャー&lt;/a&gt;を使用してフェッチされます。</target>
        </trans-unit>
        <trans-unit id="402ef1fd034af623e1289d8acec9995fa48d7ee2" translate="yes" xml:space="preserve">
          <source>By default, functions in the &lt;code&gt;IO&lt;/code&gt; module read from the standard input and write to the standard output. We can change that by passing, for example, &lt;code&gt;:stderr&lt;/code&gt; as an argument (in order to write to the standard error device):</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;IO&lt;/code&gt; モジュールの関数は標準入力から読み取り、標準出力に書き込みます。これを変更するには、たとえば &lt;code&gt;:stderr&lt;/code&gt; を引数として渡します（標準エラーデバイスに書き込むため）。</target>
        </trans-unit>
        <trans-unit id="4ed5dc3aa06cbe6867cbdf252c51bacfce3e2d13" translate="yes" xml:space="preserve">
          <source>By default, it attempts to open the file and line using the &lt;code&gt;file:line&lt;/code&gt; notation. For example, if your editor is called &lt;code&gt;subl&lt;/code&gt;, it will open the file as:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;file:line&lt;/code&gt; 表記を使用してファイルと行を開こうとします。たとえば、エディタの名前が &lt;code&gt;subl&lt;/code&gt; の場合、ファイルは次のように開きます。</target>
        </trans-unit>
        <trans-unit id="c829da1aa58fc9ca50895d425d34bf3c9320a86e" translate="yes" xml:space="preserve">
          <source>By default, it uses the default time zone database returned by &lt;a href=&quot;calendar#get_time_zone_database/0&quot;&gt;&lt;code&gt;Calendar.get_time_zone_database/0&lt;/code&gt;&lt;/a&gt;, which defaults to &lt;a href=&quot;calendar.utconlytimezonedatabase&quot;&gt;&lt;code&gt;Calendar.UTCOnlyTimeZoneDatabase&lt;/code&gt;&lt;/a&gt; which only handles &quot;Etc/UTC&quot; datetimes. Other time zone databases can be passed as argument or set globally. See the &quot;Time zone database&quot; section in the module docs.</source>
          <target state="translated">デフォルトでは、によって返されるデフォルトのタイムゾーンデータベース使用しています&lt;a href=&quot;calendar#get_time_zone_database/0&quot;&gt; &lt;code&gt;Calendar.get_time_zone_database/0&lt;/code&gt; &lt;/a&gt;、デフォルト&lt;a href=&quot;calendar.utconlytimezonedatabase&quot;&gt; &lt;code&gt;Calendar.UTCOnlyTimeZoneDatabase&lt;/code&gt; &lt;/a&gt;のみ「など/ UTC」日付時刻を処理します。他のタイムゾーンデータベースは、引数として渡すか、グローバルに設定できます。モジュールドキュメントの「タイムゾーンデータベース」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="e9dec0631c2a769f90c241506aa566e6abbea33c" translate="yes" xml:space="preserve">
          <source>By default, it uses the default time_zone returned by &lt;a href=&quot;calendar#get_time_zone_database/0&quot;&gt;&lt;code&gt;Calendar.get_time_zone_database/0&lt;/code&gt;&lt;/a&gt;, which defaults to &lt;a href=&quot;calendar.utconlytimezonedatabase&quot;&gt;&lt;code&gt;Calendar.UTCOnlyTimeZoneDatabase&lt;/code&gt;&lt;/a&gt; which only handles &quot;Etc/UTC&quot; datetimes. Other time zone databases can be passed as argument or set globally. See the &quot;Time zone database&quot; section in the module docs.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;calendar#get_time_zone_database/0&quot;&gt; &lt;code&gt;Calendar.get_time_zone_database/0&lt;/code&gt; &lt;/a&gt;によって返されるデフォルトのtime_zoneを使用します。デフォルトでは、「Etc / UTC」の日時のみを処理する&lt;a href=&quot;calendar.utconlytimezonedatabase&quot;&gt; &lt;code&gt;Calendar.UTCOnlyTimeZoneDatabase&lt;/code&gt; &lt;/a&gt;になります。他のタイムゾーンデータベースは、引数として渡すか、グローバルに設定できます。モジュールドキュメントの「タイムゾーンデータベース」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9c13147ccfd35712f018a1f03ef31c9fbc8ad18d" translate="yes" xml:space="preserve">
          <source>By default, returns dates formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format by passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">デフォルトでは、人間が読みやすいように、「拡張」フォーマットでフォーマットされた日付を返します。 &lt;code&gt;:basic&lt;/code&gt; オプションを渡すことで、「基本」形式もサポートします。</target>
        </trans-unit>
        <trans-unit id="20a23cbb3ef91c7f640f08773138ca20ec0122ed" translate="yes" xml:space="preserve">
          <source>By default, returns datetimes formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format by passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">デフォルトでは、人間が読みやすいように、「拡張」フォーマットでフォーマットされた日時を返します。 &lt;code&gt;:basic&lt;/code&gt; オプションを渡すことで、「基本」形式もサポートします。</target>
        </trans-unit>
        <trans-unit id="0d95b00ea148fc8f3ba77340beb5e5c599d4d480" translate="yes" xml:space="preserve">
          <source>By default, returns times formatted in the &quot;extended&quot; format, for human readability. It also supports the &quot;basic&quot; format by passing the &lt;code&gt;:basic&lt;/code&gt; option.</source>
          <target state="translated">デフォルトでは、人間が読みやすいように、「拡張」フォーマットでフォーマットされた時間を返します。 &lt;code&gt;:basic&lt;/code&gt; オプションを渡すことで、「基本」形式もサポートします。</target>
        </trans-unit>
        <trans-unit id="79230ff1afddb9cbbca293f5d5dcc65fc02ebeae" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;device&lt;/code&gt; is the standard output.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;device&lt;/code&gt; は標準出力です。</target>
        </trans-unit>
        <trans-unit id="ee717eb9f32dadabdfe51a1c183f392e83d0ac3e" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;device&lt;/code&gt; is the standard output. It returns &lt;code&gt;:ok&lt;/code&gt; if it succeeds.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;device&lt;/code&gt; は標準出力です。成功すると &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="152a3dd3601b47a2fc040c22f7db42fbbe85286d" translate="yes" xml:space="preserve">
          <source>By default, the Erlang VM runs in interactive mode, where modules are loaded as needed. In embedded mode the opposite happens, as all modules need to be loaded upfront or explicitly.</source>
          <target state="translated">デフォルトでは、Erlang VMはインタラクティブモードで動作し、必要に応じてモジュールがロードされます。組み込みモードでは逆になり、すべてのモジュールを前もってロードするか、明示的にロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="e13fb2c0bf54cc07fce73aa25bcefd707893e86c" translate="yes" xml:space="preserve">
          <source>By default, the contents of a &lt;code&gt;.iex.exs&lt;/code&gt; file in the same directory as you are starting IEx are automatically imported. See the section for &quot;.iex.exs&quot; in the &lt;a href=&quot;iex&quot;&gt;&lt;code&gt;IEx&lt;/code&gt;&lt;/a&gt; module docs for more information.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;.iex.exs&lt;/code&gt; を開始しているのと同じディレクトリにある.iex.exsファイルの内容が自動的にインポートされます。で「.iex.exs」のセクションを参照してください。&lt;a href=&quot;iex&quot;&gt; &lt;code&gt;IEx&lt;/code&gt; &lt;/a&gt;詳細については、モジュールのドキュメントを。</target>
        </trans-unit>
        <trans-unit id="cdfad8bcd03f7fb8e453f58547c4b335ce6d4024" translate="yes" xml:space="preserve">
          <source>By default, the environment of an application is an empty list. In a Mix project you can set that key in &lt;code&gt;application/0&lt;/code&gt;:</source>
          <target state="translated">デフォルトでは、アプリケーションの環境は空のリストです。Mixプロジェクトでは、 &lt;code&gt;application/0&lt;/code&gt; にそのキーを設定できます。</target>
        </trans-unit>
        <trans-unit id="e9135e0a0bea88ce661f36edb920759a95dcfb15" translate="yes" xml:space="preserve">
          <source>By default, the function &lt;code&gt;start_link&lt;/code&gt; is invoked on the given module. Overall, the default values for the options are:</source>
          <target state="translated">デフォルトでは、指定されたモジュールで関数 &lt;code&gt;start_link&lt;/code&gt; が呼び出されます。全体として、オプションのデフォルト値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="98ef59d20d514a8b4d0714a0cd844e52ec39eb70" translate="yes" xml:space="preserve">
          <source>By default, the maximum number of atoms is &lt;code&gt;1_048_576&lt;/code&gt;. This limit can be raised or lowered using the VM option &lt;code&gt;+t&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、アトムの最大数は &lt;code&gt;1_048_576&lt;/code&gt; です。この制限は、VMオプション &lt;code&gt;+t&lt;/code&gt; を使用して増減できます。</target>
        </trans-unit>
        <trans-unit id="86266caa42c7dcf2b57a3b39797b6e7045f35720" translate="yes" xml:space="preserve">
          <source>By default, the number of stops in a breakpoint is 1. Any follow-up call won't stop the code execution unless another breakpoint is set.</source>
          <target state="translated">デフォルトでは、ブレークポイントの停止数は1です。 他のブレークポイントが設定されていない限り、フォローアップコールはコードの実行を停止しません。</target>
        </trans-unit>
        <trans-unit id="20bf365c81414f9dd0f97d60214c83776220e730" translate="yes" xml:space="preserve">
          <source>By default, the patterns &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt; do not match files starting with a dot &lt;code&gt;.&lt;/code&gt;. See the &lt;code&gt;:match_dot&lt;/code&gt; option in the &quot;Options&quot; section below.</source>
          <target state="translated">デフォルトでは、パターン &lt;code&gt;*&lt;/code&gt; および &lt;code&gt;?&lt;/code&gt; ドットで始まるファイルとは一致しません &lt;code&gt;.&lt;/code&gt; 。以下の「オプション」セクションの &lt;code&gt;:match_dot&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="62f836c1ca1f7ffa0fe44a5d83b70dadbe30aead" translate="yes" xml:space="preserve">
          <source>By default, this returns &lt;a href=&quot;mix.shell.io&quot;&gt;&lt;code&gt;Mix.Shell.IO&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、これは&lt;a href=&quot;mix.shell.io&quot;&gt; &lt;code&gt;Mix.Shell.IO&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="4039ff511c9b0c6e465576202aa05d0f1134bbb1" translate="yes" xml:space="preserve">
          <source>By default, this task starts the current application. If this is not desired, set the &lt;code&gt;:app&lt;/code&gt; configuration to nil.</source>
          <target state="translated">デフォルトでは、このタスクは現在のアプリケーションを起動します。これが望ましくない場合は、 &lt;code&gt;:app&lt;/code&gt; 構成をnilに設定してください。</target>
        </trans-unit>
        <trans-unit id="76c88cd6bc21370893bb9ca4286fa947e3185c6d" translate="yes" xml:space="preserve">
          <source>By forbidding hierarchies in favor of named setups, it is straightforward for the developer to glance at each describe block and know exactly the setup steps involved.</source>
          <target state="translated">階層化を禁止して名前付きのセットアップを優先することで、開発者は各記述ブロックを見て正確なセットアップ手順を知ることができます。</target>
        </trans-unit>
        <trans-unit id="be8729ba3d997306cc7c2732e9d5715d7b733113" translate="yes" xml:space="preserve">
          <source>By modeling IO devices with processes, the Erlang</source>
          <target state="translated">IOデバイスをプロセスでモデリングすることで、Erlangの</target>
        </trans-unit>
        <trans-unit id="20fbb45a951d34847b2361b232cf1603416a2b67" translate="yes" xml:space="preserve">
          <source>By registering an attribute, a developer is able to customize how Elixir will store and accumulate the attribute values.</source>
          <target state="translated">属性を登録することで、開発者はElixirがどのように属性値を保存し、蓄積するかをカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="3a533dc2f30d084da0ee799f07f2509ceacdcbfd" translate="yes" xml:space="preserve">
          <source>By specifying such dependencies, Mix will automatically install Hex (if it wasn't previously installed) and download a package suitable to your project. Note Hex expects the dependency requirement to always be given and it will warn otherwise.</source>
          <target state="translated">このような依存関係を指定することで、Mix は自動的に Hex をインストールし (まだインストールされていない場合)、あなたのプロジェクトに適したパッケージをダウンロードします。Hex は依存関係の要件が常に与えられていることを期待しており、そうでない場合は警告します。</target>
        </trans-unit>
        <trans-unit id="28e75c4b609dc334804d7f657136c8679b6ee20a" translate="yes" xml:space="preserve">
          <source>By starting a new IEx session, we can now define our tests and run them:</source>
          <target state="translated">新しい IEx セッションを開始することで、テストを定義して実行できるようになりました。</target>
        </trans-unit>
        <trans-unit id="6ed40a81a21966a2166b56cae05accc09ed2523e" translate="yes" xml:space="preserve">
          <source>By tagging a test, the tag value can be accessed in the context, allowing the developer to customize the test. Let's see an example:</source>
          <target state="translated">テストにタグを付けることで、タグの値にコンテキストでアクセスすることができ、開発者はテストをカスタマイズすることができます。例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="c72eb5d7c9a45f27e69792c0b3ad14f6fb4125b9" translate="yes" xml:space="preserve">
          <source>By the way, since we are now returning &lt;code&gt;{:error, :not_found}&lt;/code&gt;, we should amend the &lt;code&gt;write_line/2&lt;/code&gt; function in &lt;code&gt;KVServer&lt;/code&gt; to print such error as well:</source>
          <target state="translated">ところで、今は &lt;code&gt;{:error, :not_found}&lt;/code&gt; 返しているので、 &lt;code&gt;write_line/2&lt;/code&gt; 関数を &lt;code&gt;KVServer&lt;/code&gt; して、このようなエラーも出力する必要があります。</target>
        </trans-unit>
        <trans-unit id="afd2b04041c5023417e7856e0350ac915e93bf70" translate="yes" xml:space="preserve">
          <source>By using &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt;, modules get a default implementation of &lt;a href=&quot;#c:stop/1&quot;&gt;&lt;code&gt;stop/1&lt;/code&gt;&lt;/a&gt; that ignores its argument and returns &lt;code&gt;:ok&lt;/code&gt;, but it can be overridden.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt;を使用すると、モジュールは、引数を無視して &lt;code&gt;:ok&lt;/code&gt; を返す&lt;a href=&quot;#c:stop/1&quot;&gt; &lt;code&gt;stop/1&lt;/code&gt; の&lt;/a&gt;デフォルト実装を取得しますが、オーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="3f1539bdede002cb03f8125233616b6cf3691dc6" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;~S&lt;/code&gt;, this problem can be avoided altogether:</source>
          <target state="translated">&lt;code&gt;~S&lt;/code&gt; を使用すると、この問題を完全に回避できます。</target>
        </trans-unit>
        <trans-unit id="ace2af82bde9ed60e0b2eb329287e9e1f1b8c284" translate="yes" xml:space="preserve">
          <source>By using the &lt;code&gt;alias/2&lt;/code&gt; directive, we are changing the atom the alias expands to.</source>
          <target state="translated">&lt;code&gt;alias/2&lt;/code&gt; ディレクティブを使用することで、エイリアスが展開するアトムを変更しています。</target>
        </trans-unit>
        <trans-unit id="3f1405ee5f9cba8a93cc7f0b13abb38e7a60f2e5" translate="yes" xml:space="preserve">
          <source>By using the functions in this module one can specify the children to be used under a supervisor, started with &lt;a href=&quot;supervisor#start_link/2&quot;&gt;&lt;code&gt;Supervisor.start_link/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">このモジュールの関数を使用することにより、&lt;a href=&quot;supervisor#start_link/2&quot;&gt; &lt;code&gt;Supervisor.start_link/2&lt;/code&gt; &lt;/a&gt;で開始される、スーパーバイザーの下で使用される子を指定できます。</target>
        </trans-unit>
        <trans-unit id="2c4df2c57a78ef2bacad336bf3270c7691b6b4a9" translate="yes" xml:space="preserve">
          <source>By using this module, the callbacks and assertions available for regular test cases will also be available.</source>
          <target state="translated">このモジュールを使うことで、通常のテストケースで利用できるコールバックやアサーションも利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="b1570089a3b884d047ed831c82108ff3c320012d" translate="yes" xml:space="preserve">
          <source>Byte order marks</source>
          <target state="translated">バイトオーダーマーク</target>
        </trans-unit>
        <trans-unit id="eb1ba157957ddfdacc5b18a96c80b83156efc283" translate="yes" xml:space="preserve">
          <source>CLI exits</source>
          <target state="translated">CLI終了</target>
        </trans-unit>
        <trans-unit id="e0116c5110dfc390223e2cf0357726dcea588606" translate="yes" xml:space="preserve">
          <source>CNT - total number of invocations of the given function</source>
          <target state="translated">CNT-指定された関数の総呼び出し回数.</target>
        </trans-unit>
        <trans-unit id="5a1f679c89e760e380af7bd2f44ba411cf25722e" translate="yes" xml:space="preserve">
          <source>Calculates the bitwise AND of its arguments.</source>
          <target state="translated">引数のビット単位のANDを計算します。</target>
        </trans-unit>
        <trans-unit id="84e4f0eeebc650c4d2644607d336f04cbb23d438" translate="yes" xml:space="preserve">
          <source>Calculates the bitwise NOT of its argument.</source>
          <target state="translated">引数のビット単位のNOTを計算します。</target>
        </trans-unit>
        <trans-unit id="82c78143ba33e97d749e3529f91d872adcb213b4" translate="yes" xml:space="preserve">
          <source>Calculates the bitwise OR of its arguments.</source>
          <target state="translated">引数のビット単位のORを計算します。</target>
        </trans-unit>
        <trans-unit id="66848a208113faeb7ce19122ab8c270554db335f" translate="yes" xml:space="preserve">
          <source>Calculates the bitwise XOR of its arguments.</source>
          <target state="translated">引数のビット単位のXORを計算します。</target>
        </trans-unit>
        <trans-unit id="872e2eaef65c0a774ab638167d32944d779fe0db" translate="yes" xml:space="preserve">
          <source>Calculates the day and era from the given &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、 &lt;code&gt;day&lt;/code&gt; から日と元号を計算します。</target>
        </trans-unit>
        <trans-unit id="59531be2cfe81760a8bcb2ad77fdb94258d79267" translate="yes" xml:space="preserve">
          <source>Calculates the day of the week from the given &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、 &lt;code&gt;day&lt;/code&gt; から曜日を計算します。</target>
        </trans-unit>
        <trans-unit id="977d26fb6d2c6237ad910b694ef77ece58a18321" translate="yes" xml:space="preserve">
          <source>Calculates the day of the week of a given &lt;code&gt;date&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;date&lt;/code&gt; 曜日を計算します。</target>
        </trans-unit>
        <trans-unit id="48ab91160e20cbcc7db86d12c7c5d29ffe417d69" translate="yes" xml:space="preserve">
          <source>Calculates the day of the year from the given &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、 &lt;code&gt;day&lt;/code&gt; からその年の日を計算します。</target>
        </trans-unit>
        <trans-unit id="69bb790c7a94873e3a63a87bed9ab85d41e51ad2" translate="yes" xml:space="preserve">
          <source>Calculates the day of the year of a given &lt;code&gt;date&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;date&lt;/code&gt; 年間通算日を計算します。</target>
        </trans-unit>
        <trans-unit id="51f486811d7efdb5f59099bf0821d88cdd0fcdb3" translate="yes" xml:space="preserve">
          <source>Calculates the day-of-era and era for a given calendar &lt;code&gt;date&lt;/code&gt;.</source>
          <target state="translated">指定されたカレンダー &lt;code&gt;date&lt;/code&gt; 元号と元号を計算します。</target>
        </trans-unit>
        <trans-unit id="31ffe77841021e9cd0d8d28a2ff0eb90596f7c2f" translate="yes" xml:space="preserve">
          <source>Calculates the difference between two dates, in a full number of days.</source>
          <target state="translated">2つの日付の差を、完全な日数で計算します。</target>
        </trans-unit>
        <trans-unit id="1e22629218c7c2524d719a6aafb26320a9e33d6f" translate="yes" xml:space="preserve">
          <source>Calculates the quarter of the year from the given &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、 &lt;code&gt;day&lt;/code&gt; からその年の四半期を計算します。</target>
        </trans-unit>
        <trans-unit id="ced99eb284fbbc4addff1f8982435da702405206" translate="yes" xml:space="preserve">
          <source>Calculates the quarter of the year of a given &lt;code&gt;date&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;date&lt;/code&gt; 年の四半期を計算します。</target>
        </trans-unit>
        <trans-unit id="38a63816978a3500d8832c7b1f94a4f1bae97c63" translate="yes" xml:space="preserve">
          <source>Calculates the result of an arithmetic left bitshift.</source>
          <target state="translated">算術左ビットシフトの結果を計算します。</target>
        </trans-unit>
        <trans-unit id="4efe33d70304152372f10ae59d4a94377d6ac6d6" translate="yes" xml:space="preserve">
          <source>Calculates the result of an arithmetic right bitshift.</source>
          <target state="translated">算術右ビットシフトの結果を計算します。</target>
        </trans-unit>
        <trans-unit id="df000a9c3e0cbb692af58f43cb56584844928596" translate="yes" xml:space="preserve">
          <source>Calculates the year and era from the given &lt;code&gt;year&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;year&lt;/code&gt; から年と年号を計算します。</target>
        </trans-unit>
        <trans-unit id="c5b862a12e39e020b060e66f5c4acab9c33e37a6" translate="yes" xml:space="preserve">
          <source>Calculates the year-of-era and era for a given calendar year.</source>
          <target state="translated">指定された暦年の年号と時代を計算します。</target>
        </trans-unit>
        <trans-unit id="adab5090ac6a1b7b5420faac7be86c41721ba27c" translate="yes" xml:space="preserve">
          <source>Calendar</source>
          <target state="translated">Calendar</target>
        </trans-unit>
        <trans-unit id="d2846e6231c1d94a724f86fb32fe4ede252c7e62" translate="yes" xml:space="preserve">
          <source>Calendar &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">カレンダーの&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ef9e9ae658ec14ea6882de0157e1d6807db80ee5" translate="yes" xml:space="preserve">
          <source>Calendar.ISO</source>
          <target state="translated">Calendar.ISO</target>
        </trans-unit>
        <trans-unit id="f5c6e67829066a800fc5a7db8149d3747aa50714" translate="yes" xml:space="preserve">
          <source>Calendar.TimeZoneDatabase</source>
          <target state="translated">Calendar.TimeZoneDatabase</target>
        </trans-unit>
        <trans-unit id="97fb668d95f303af428dbebc65b8e7dcb0c6a7d1" translate="yes" xml:space="preserve">
          <source>Calendar.TimeZoneDatabase &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">Calendar.TimeZoneDatabaseの&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d8efcf40cde9eb544b2f246797c94807656d1da5" translate="yes" xml:space="preserve">
          <source>Calendar.UTCOnlyTimeZoneDatabase</source>
          <target state="translated">Calendar.UTCOnlyTimeZoneDatabase</target>
        </trans-unit>
        <trans-unit id="c7ed9654ce3205b4d11f855df757291b19bd05d6" translate="yes" xml:space="preserve">
          <source>Call &lt;a href=&quot;enum#to_list/1&quot;&gt;&lt;code&gt;Enum.to_list/1&lt;/code&gt;&lt;/a&gt; on the second argument before hand (v1.0)</source>
          <target state="translated">&lt;a href=&quot;enum#to_list/1&quot;&gt; &lt;code&gt;Enum.to_list/1&lt;/code&gt; &lt;/a&gt; 2番目の引数でEnum.to_list / 1を呼び出します（v1.0）</target>
        </trans-unit>
        <trans-unit id="0ec5483fd7a38077d057ae7802d3cb47d7ef8aa0" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;eex.engine#c:handle_begin/1&quot;&gt;&lt;code&gt;EEx.Engine.handle_begin/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eex.engine#c:handle_begin/1&quot;&gt; &lt;code&gt;EEx.Engine.handle_begin/1&lt;/code&gt; の&lt;/a&gt;コールバック実装。</target>
        </trans-unit>
        <trans-unit id="c10d1f66343bff0367facdfabc09309b1db76d10" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;eex.engine#c:handle_body/1&quot;&gt;&lt;code&gt;EEx.Engine.handle_body/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eex.engine#c:handle_body/1&quot;&gt; &lt;code&gt;EEx.Engine.handle_body/1&lt;/code&gt; の&lt;/a&gt;コールバック実装。</target>
        </trans-unit>
        <trans-unit id="809f4f9c22dd6ee3ec66bf463f931344c3f340dd" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;eex.engine#c:handle_end/1&quot;&gt;&lt;code&gt;EEx.Engine.handle_end/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eex.engine#c:handle_end/1&quot;&gt; &lt;code&gt;EEx.Engine.handle_end/1&lt;/code&gt; の&lt;/a&gt;コールバック実装。</target>
        </trans-unit>
        <trans-unit id="3b8c930f53b6ae5c6504b04c2e084c2c472b9f22" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;eex.engine#c:handle_expr/3&quot;&gt;&lt;code&gt;EEx.Engine.handle_expr/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eex.engine#c:handle_expr/3&quot;&gt; &lt;code&gt;EEx.Engine.handle_expr/3&lt;/code&gt; の&lt;/a&gt;コールバック実装。</target>
        </trans-unit>
        <trans-unit id="d538426bfe18e63fe5c0d95dab134b723574484b" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;eex.engine#c:handle_text/2&quot;&gt;&lt;code&gt;EEx.Engine.handle_text/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eex.engine#c:handle_text/2&quot;&gt; &lt;code&gt;EEx.Engine.handle_text/2&lt;/code&gt; の&lt;/a&gt;コールバック実装。</target>
        </trans-unit>
        <trans-unit id="7f0b1ed3855a5c3236f255f01ab409ddde0f8818" translate="yes" xml:space="preserve">
          <source>Callback implementation for &lt;a href=&quot;eex.engine#c:init/1&quot;&gt;&lt;code&gt;EEx.Engine.init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;eex.engine#c:init/1&quot;&gt; &lt;code&gt;EEx.Engine.init/1&lt;/code&gt; の&lt;/a&gt;コールバック実装。</target>
        </trans-unit>
        <trans-unit id="cd7ab7f77ceb6a2945635de1386a402a7ef6ee53" translate="yes" xml:space="preserve">
          <source>Callback invoked after code upgrade, if the application environment has changed.</source>
          <target state="translated">コードアップグレード後、アプリケーション環境が変更された場合に呼び出されるコールバックです。</target>
        </trans-unit>
        <trans-unit id="9fbe07680545fab8c38f764f99ebaad2d192e475" translate="yes" xml:space="preserve">
          <source>Callback invoked to start the supervisor and during hot code upgrades.</source>
          <target state="translated">スーパーバイザの起動時やホットコードのアップグレード時にコールバックが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="f6c42f7bb51b73d4b211ee83945d9879bce48368" translate="yes" xml:space="preserve">
          <source>Callbacks registered first will run last.</source>
          <target state="translated">最初に登録されたコールバックは最後に実行されます。</target>
        </trans-unit>
        <trans-unit id="66201e1b84a1d1a6ff96f16fa8793345ed84e782" translate="yes" xml:space="preserve">
          <source>Callbacks registered first will run last. Any overridable definition will be made concrete before the first callback runs. A definition may be made overridable again in another before compile callback and it will be made concrete one last time after after all callbacks run.</source>
          <target state="translated">最初に登録されたコールバックは最後に実行されます。オーバーライド可能な定義は、最初のコールバックが実行される前に具象化されます。オーバーライド可能な定義は、コンパイル前の別のコールバックで再度オーバーライド可能にすることができますが、すべてのコールバックが実行された後に、最後にもう一度具体化されます。</target>
        </trans-unit>
        <trans-unit id="d85b3a76866da7a60448467248c2cfd125983166" translate="yes" xml:space="preserve">
          <source>Callbacks set with &lt;a href=&quot;#after_suite/1&quot;&gt;&lt;code&gt;after_suite/1&lt;/code&gt;&lt;/a&gt; must accept a single argument, which is a map containing the results of the test suite's execution.</source>
          <target state="translated">&lt;a href=&quot;#after_suite/1&quot;&gt; &lt;code&gt;after_suite/1&lt;/code&gt; で&lt;/a&gt;設定されたコールバックは単一の引数を受け入れる必要があります。これは、テストスイートの実行結果を含むマップです。</target>
        </trans-unit>
        <trans-unit id="0faabceba35fd7a48636a9f242b76d779503989b" translate="yes" xml:space="preserve">
          <source>Called after an application has been stopped.</source>
          <target state="translated">アプリケーションが停止した後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="63380a742a1ed6d808719b27ab046bd5083024b3" translate="yes" xml:space="preserve">
          <source>Called at the beginning of every template.</source>
          <target state="translated">すべてのテンプレートの最初に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c3e6c4eb21e116160c46b9548a425a642cdad1e5" translate="yes" xml:space="preserve">
          <source>Called at the end of every template.</source>
          <target state="translated">すべてのテンプレートの最後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="442535ed506cf7f3e8f4628a3a6c0adb928772c4" translate="yes" xml:space="preserve">
          <source>Called before stopping the application.</source>
          <target state="translated">アプリケーションを停止する前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e32234ad249148d3b937bfee926f036a291cfa48" translate="yes" xml:space="preserve">
          <source>Called for the dynamic/code parts of a template.</source>
          <target state="translated">テンプレートの動的/コード部分のために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="03a90d4fa846b3199574f48f2a69056a02070095" translate="yes" xml:space="preserve">
          <source>Called for the text/static parts of a template.</source>
          <target state="translated">テンプレートのテキスト/静的部分のために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="efdaf943b92658db4a3efff473253de2372bcf86" translate="yes" xml:space="preserve">
          <source>Called from &lt;a href=&quot;exception#blame/3&quot;&gt;&lt;code&gt;Exception.blame/3&lt;/code&gt;&lt;/a&gt; to augment the exception struct.</source>
          <target state="translated">&lt;a href=&quot;exception#blame/3&quot;&gt; &lt;code&gt;Exception.blame/3&lt;/code&gt; &lt;/a&gt;構造体を拡張するためにException.blame / 3から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f0ca56a7a06bc47a8cf3a0a7612d281facc7aec4" translate="yes" xml:space="preserve">
          <source>Called when an application is started.</source>
          <target state="translated">アプリケーションの起動時に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b8f234a1e4d68947a81625776c2d1d09281b09d9" translate="yes" xml:space="preserve">
          <source>Calling &lt;a href=&quot;kernel.specialforms#super/1&quot;&gt;&lt;code&gt;super/1&lt;/code&gt;&lt;/a&gt; on GenServer callbacks</source>
          <target state="translated">呼び出し&lt;a href=&quot;kernel.specialforms#super/1&quot;&gt; &lt;code&gt;super/1&lt;/code&gt; &lt;/a&gt; GenServerコールバックに</target>
        </trans-unit>
        <trans-unit id="351d7d149e48159d87db220bf823be28fe3f8023" translate="yes" xml:space="preserve">
          <source>Calling anonymous functions uses the dot in the AST with a single argument, mirroring the fact the function name is &quot;missing&quot; from right side of the dot:</source>
          <target state="translated">匿名関数の呼び出しは、AST内のドットを1つの引数で使用し、関数名がドットの右側から「抜けている」という事実をミラーリングします。</target>
        </trans-unit>
        <trans-unit id="483676a4323ff474475176f21ccdb14d6acd93be" translate="yes" xml:space="preserve">
          <source>Calling this new &lt;code&gt;return_length/0&lt;/code&gt; will still return &lt;code&gt;3&lt;/code&gt; as result.</source>
          <target state="translated">この新しい &lt;code&gt;return_length/0&lt;/code&gt; を呼び出しても、結果として &lt;code&gt;3&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="2f70240a7a73a837a65004029341593ba5615c20" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#import/2&quot;&gt;&lt;code&gt;import/2&lt;/code&gt;&lt;/a&gt; with the given arguments, but only if the module is available.</source>
          <target state="translated">与えられた引数で&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.SpecialForms.html#import/2&quot;&gt; &lt;code&gt;import/2&lt;/code&gt; &lt;/a&gt;を呼び出しますが、モジュールが利用可能な場合のみです。</target>
        </trans-unit>
        <trans-unit id="32b79b53c10b7818f97870494be94fb3c414206b" translate="yes" xml:space="preserve">
          <source>Calls &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#use/2&quot;&gt;&lt;code&gt;use/2&lt;/code&gt;&lt;/a&gt; with the given arguments, but only if the module is available.</source>
          <target state="translated">与えられた引数で&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#use/2&quot;&gt; &lt;code&gt;use/2&lt;/code&gt; &lt;/a&gt;を呼び出しますが、モジュールが利用可能な場合のみです。</target>
        </trans-unit>
        <trans-unit id="aa43ce86529e7a9b7d32993a0bcab9a4c00c893f" translate="yes" xml:space="preserve">
          <source>Calls all servers locally registered as &lt;code&gt;name&lt;/code&gt; at the specified &lt;code&gt;nodes&lt;/code&gt;.</source>
          <target state="translated">指定した &lt;code&gt;nodes&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; としてローカルに登録されているすべてのサーバーを呼び出します。</target>
        </trans-unit>
        <trans-unit id="973a2b37cbb904055d8b2cb9085515443a94fcfb" translate="yes" xml:space="preserve">
          <source>Calls inside &lt;a href=&quot;#try/1&quot;&gt;&lt;code&gt;try/1&lt;/code&gt;&lt;/a&gt; are not tail recursive since the VM needs to keep the stacktrace in case an exception happens. To retrieve the stacktrace, access &lt;a href=&quot;#__STACKTRACE__/0&quot;&gt;&lt;code&gt;__STACKTRACE__/0&lt;/code&gt;&lt;/a&gt; inside the &lt;code&gt;rescue&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt; clause.</source>
          <target state="translated">VMは例外が発生した場合にスタックトレースを保持する必要があるため、&lt;a href=&quot;#try/1&quot;&gt; &lt;code&gt;try/1&lt;/code&gt; &lt;/a&gt;内の呼び出しは末尾再帰ではありません。スタックトレースを取得するには、 &lt;code&gt;rescue&lt;/code&gt; または &lt;code&gt;catch&lt;/code&gt; 句内の&lt;a href=&quot;#__STACKTRACE__/0&quot;&gt; &lt;code&gt;__STACKTRACE__/0&lt;/code&gt; &lt;/a&gt;アクセスします。</target>
        </trans-unit>
        <trans-unit id="9e45c3b1dc9f022a7ca2feaa09407ac0c9c46f51" translate="yes" xml:space="preserve">
          <source>Calls the &lt;code&gt;exception/1&lt;/code&gt; function on the given argument (which has to be a module name like &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt;) passing &lt;code&gt;attrs&lt;/code&gt; as the attributes in order to retrieve the exception struct.</source>
          <target state="translated">例外構造体を取得するために、属性として &lt;code&gt;attrs&lt;/code&gt; を渡して、指定された引数（&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;runtimeerror&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; の&lt;/a&gt;ようなモジュール名である必要があります）で &lt;code&gt;exception/1&lt;/code&gt; 関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="cf2cbc473a24499b6038ffab5fe859228e498845" translate="yes" xml:space="preserve">
          <source>Calls the overridden function when overriding it with &lt;a href=&quot;kernel#defoverridable/1&quot;&gt;&lt;code&gt;Kernel.defoverridable/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;kernel#defoverridable/1&quot;&gt; &lt;code&gt;Kernel.defoverridable/1&lt;/code&gt; &lt;/a&gt;でオーバーライドするときに、オーバーライドされた関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="4da0eb7496c45b4f2e06c9a592ed791d6921bdac" translate="yes" xml:space="preserve">
          <source>Calls the provided &lt;code&gt;empty_fallback&lt;/code&gt; function and returns its value if &lt;code&gt;enumerable&lt;/code&gt; is empty. The default &lt;code&gt;empty_fallback&lt;/code&gt; raises &lt;a href=&quot;enum.emptyerror&quot;&gt;&lt;code&gt;Enum.EmptyError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">提供された &lt;code&gt;empty_fallback&lt;/code&gt; 関数を呼び出し、 &lt;code&gt;enumerable&lt;/code&gt; が空の場合はその値を返します。デフォルトの &lt;code&gt;empty_fallback&lt;/code&gt; はEnum.EmptyErrorを発生さ&lt;a href=&quot;enum.emptyerror&quot;&gt; &lt;code&gt;Enum.EmptyError&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8341f9c0dc9a43feb95e575c7d1ff19857e6cc50" translate="yes" xml:space="preserve">
          <source>Can be used to collect additional information about the exception or do some additional expensive computation.</source>
          <target state="translated">例外についての追加情報を収集したり、追加の高価な計算をしたりするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="e334a2ce3108e0febeb57230bd2cb23a051d7fbe" translate="yes" xml:space="preserve">
          <source>Can return values to be merged into the &lt;code&gt;context&lt;/code&gt;, to set up the state for tests. For more details, see the &quot;Context&quot; section shown above.</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; にマージされる値を返し、テストの状態を設定できます。詳細については、上記の「コンテキスト」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0242ecee6ab6bf770b987438f3bfcd7060632331" translate="yes" xml:space="preserve">
          <source>Can return values to be merged into the context, to set up the state for tests. For more details, see the &quot;Context&quot; section shown above.</source>
          <target state="translated">テストのための状態を設定するために、コンテキストにマージする値を返すことができます。詳細については、上に示した「コンテキスト」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8716b1b959af99def374d9b25e8ba6c67f8e0642" translate="yes" xml:space="preserve">
          <source>Cancels a timer returned by &lt;a href=&quot;#send_after/3&quot;&gt;&lt;code&gt;send_after/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#send_after/3&quot;&gt; &lt;code&gt;send_after/3&lt;/code&gt; &lt;/a&gt;によって返されたタイマーをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="772a4bcb6564702a3954bd84a80b8688f24e0663" translate="yes" xml:space="preserve">
          <source>Capture</source>
          <target state="translated">Capture</target>
        </trans-unit>
        <trans-unit id="7c8134e39c2398e58f343200b0596b236c139932" translate="yes" xml:space="preserve">
          <source>Captures</source>
          <target state="translated">Captures</target>
        </trans-unit>
        <trans-unit id="ee795a7fa93d1d3588ea4bf78c087bb3df764e96" translate="yes" xml:space="preserve">
          <source>Captures or creates an anonymous function.</source>
          <target state="translated">匿名関数をキャプチャまたは作成します。</target>
        </trans-unit>
        <trans-unit id="a1bd477e88eb362e3b6ca6a4a29b2702d3015ff6" translate="yes" xml:space="preserve">
          <source>Captures the given function.</source>
          <target state="translated">与えられた関数をキャプチャします。</target>
        </trans-unit>
        <trans-unit id="aa83b0db7571a9b488496ed9d08b379219be7ce6" translate="yes" xml:space="preserve">
          <source>Carefully stops the Erlang runtime system.</source>
          <target state="translated">慎重にErlangランタイムシステムを停止させます。</target>
        </trans-unit>
        <trans-unit id="3de7c7c7fd9020f41906a55076bb7100b700d996" translate="yes" xml:space="preserve">
          <source>Case, Callbacks and Assertions</source>
          <target state="translated">ケース、コールバック、アサーション</target>
        </trans-unit>
        <trans-unit id="50ae5b37c236ae7f885890b3cfa7f117f01aadb1" translate="yes" xml:space="preserve">
          <source>CaseClauseError</source>
          <target state="translated">CaseClauseError</target>
        </trans-unit>
        <trans-unit id="fdf5275c868ecbada652e512ffc1fdefc861f736" translate="yes" xml:space="preserve">
          <source>CaseClauseError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">CaseClauseError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f3d4dffe4c9ebac969ee4f02157e5740619b3299" translate="yes" xml:space="preserve">
          <source>Casing</source>
          <target state="translated">Casing</target>
        </trans-unit>
        <trans-unit id="7ed67e7a3ac2c5f0b4ebfcbd5516cf4cb07f36ce" translate="yes" xml:space="preserve">
          <source>Casts all servers locally registered as &lt;code&gt;name&lt;/code&gt; at the specified nodes.</source>
          <target state="translated">指定されたノードで &lt;code&gt;name&lt;/code&gt; としてローカルに登録されているすべてのサーバーをキャストします。</target>
        </trans-unit>
        <trans-unit id="a338872f01e247b728456edb7f0b896e06d6f40c" translate="yes" xml:space="preserve">
          <source>Catching thrown values</source>
          <target state="translated">投げられた値のキャッチ</target>
        </trans-unit>
        <trans-unit id="b1d7430e3b7ebe0c9345e291ab7d148a7c0b4616" translate="yes" xml:space="preserve">
          <source>Catching values of any kind</source>
          <target state="translated">あらゆる種類の値をキャッチ</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="fb1ca31f7b105b5db3d68fcceddbb09d728d0d20" translate="yes" xml:space="preserve">
          <source>Change the assertion in &lt;code&gt;test/kv_test.exs&lt;/code&gt; to the following:</source>
          <target state="translated">&lt;code&gt;test/kv_test.exs&lt;/code&gt; のアサーションを次のように変更します。</target>
        </trans-unit>
        <trans-unit id="4a4854b634f3d16dfe0416ab69448c4d70e815bc" translate="yes" xml:space="preserve">
          <source>Changes the &lt;code&gt;mode&lt;/code&gt; for a given &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;file&lt;/code&gt; &lt;code&gt;mode&lt;/code&gt; を変更します。</target>
        </trans-unit>
        <trans-unit id="1e48df922da0b08e16af81da8ffa6075f757955f" translate="yes" xml:space="preserve">
          <source>Changes the current Mix environment to &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="translated">現在のMix環境を &lt;code&gt;env&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="441d60b43c53fc069fbc6a19e176cade2240e17d" translate="yes" xml:space="preserve">
          <source>Changes the current Mix target to &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="translated">現在のMixターゲットを &lt;code&gt;target&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="5d07d3f0b91ed23185354c26ccbebfdb380e8f21" translate="yes" xml:space="preserve">
          <source>Changes the current directory to the given &lt;code&gt;path&lt;/code&gt;, executes the given function and then reverts back to the previous path regardless of whether there is an exception.</source>
          <target state="translated">例外があるかどうかに関係なく、現在のディレクトリを指定された &lt;code&gt;path&lt;/code&gt; に変更し、指定された関数を実行してから、以前のパスに戻します。</target>
        </trans-unit>
        <trans-unit id="81244f5feba2a2ae578c67d52abe75adcd2c03c4" translate="yes" xml:space="preserve">
          <source>Changes the current working directory to the given path.</source>
          <target state="translated">現在の作業ディレクトリを指定したパスに変更します。</target>
        </trans-unit>
        <trans-unit id="dca7438f013e9357695dd4f7bbf67adfc6043e3a" translate="yes" xml:space="preserve">
          <source>Changes the filename used in stacktraces for the function or macro that follows the attribute, such as:</source>
          <target state="translated">属性の後に続く関数またはマクロのスタックトレースで使用されるファイル名を変更します。</target>
        </trans-unit>
        <trans-unit id="d49019da62eaa7b23d02a05fcc1a34795c0447dd" translate="yes" xml:space="preserve">
          <source>Changes the group given by the group ID &lt;code&gt;gid&lt;/code&gt; for a given &lt;code&gt;file&lt;/code&gt;. Returns &lt;code&gt;:ok&lt;/code&gt; on success, or &lt;code&gt;{:error, reason}&lt;/code&gt; on failure.</source>
          <target state="translated">指定された &lt;code&gt;file&lt;/code&gt; グループID &lt;code&gt;gid&lt;/code&gt; で指定されたグループを変更します。成功すると &lt;code&gt;:ok&lt;/code&gt; を返し、失敗すると &lt;code&gt;{:error, reason}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f8403cc6f3117f7214b1f5348fc78e244e7765be" translate="yes" xml:space="preserve">
          <source>Changes the list of command line arguments. Use it with caution, as it destroys any previous argv information.</source>
          <target state="translated">コマンドライン引数のリストを変更します。これは以前の argv 情報を破棄するので、注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="f78fe574885e1218644c8eb3ec719b0f72557786" translate="yes" xml:space="preserve">
          <source>Changes the owner given by the user ID &lt;code&gt;uid&lt;/code&gt; for a given &lt;code&gt;file&lt;/code&gt;. Returns &lt;code&gt;:ok&lt;/code&gt; on success, or &lt;code&gt;{:error, reason}&lt;/code&gt; on failure.</source>
          <target state="translated">指定された &lt;code&gt;file&lt;/code&gt; ユーザーID &lt;code&gt;uid&lt;/code&gt; で指定された所有者を変更します。成功すると &lt;code&gt;:ok&lt;/code&gt; を返し、失敗すると &lt;code&gt;{:error, reason}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4a5a85be01bff52b55691c3e0e53685cf643afeb" translate="yes" xml:space="preserve">
          <source>Changes the time zone of a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; の&lt;/a&gt;タイムゾーンを変更します。</target>
        </trans-unit>
        <trans-unit id="284d1f54427e012e84088102ed1bc9f15dfbd47a" translate="yes" xml:space="preserve">
          <source>Char lists</source>
          <target state="translated">チャーリスト</target>
        </trans-unit>
        <trans-unit id="bf238be65bb5e7ebb05fdca2c63f71cc0a076a1a" translate="yes" xml:space="preserve">
          <source>Character classes</source>
          <target state="translated">文字クラス</target>
        </trans-unit>
        <trans-unit id="c51df18f8947669b0b6631dd0793cff088cde7c4" translate="yes" xml:space="preserve">
          <source>Chardata</source>
          <target state="translated">Chardata</target>
        </trans-unit>
        <trans-unit id="6995b6a69e7114b0d9f12f1dd5c41634206726e5" translate="yes" xml:space="preserve">
          <source>Charlists</source>
          <target state="translated">Charlists</target>
        </trans-unit>
        <trans-unit id="6c06cb03cc85ac5b58f555f3b3b633f044c1c86a" translate="yes" xml:space="preserve">
          <source>Charlists are always represented as themselves in the AST.</source>
          <target state="translated">シャーリストは常にASTの中で自分自身として表現されています。</target>
        </trans-unit>
        <trans-unit id="29fe510ad38d3c89583dde7f48d5a6ec1fc330d4" translate="yes" xml:space="preserve">
          <source>Charlists in Elixir are written in single-quotes, such as &lt;code&gt;'foo'&lt;/code&gt;. Any single-quote inside the string must be escaped with &lt;code&gt;\&lt;/code&gt;. Charlists are made of non-negative integers, where each integer represents a Unicode code point.</source>
          <target state="translated">Elixirの文字リストは、 &lt;code&gt;'foo'&lt;/code&gt; のように単一引用符で囲みます。文字列内の単一引用符は &lt;code&gt;\&lt;/code&gt; でエスケープする必要があります。チャーリストは負でない整数で構成され、各整数はUnicodeコードポイントを表します。</target>
        </trans-unit>
        <trans-unit id="692ca546041e0defb9df176c51dca7a9351edd04" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#compiler_options/1&quot;&gt;&lt;code&gt;compiler_options/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#compiler_options/1&quot;&gt; &lt;code&gt;compiler_options/1&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="580e68b2106988dd01d5c2d7c8cd6275df6bffa6" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#def/2&quot;&gt;&lt;code&gt;def/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#def/2&quot;&gt; &lt;code&gt;def/2&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="95077ccb031fbcb95d39307f645abe3b02d020d7" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#def/2&quot;&gt;&lt;code&gt;def/2&lt;/code&gt;&lt;/a&gt; for rules on naming and default arguments.</source>
          <target state="translated">&lt;a href=&quot;#def/2&quot;&gt; &lt;code&gt;def/2&lt;/code&gt; &lt;/a&gt;で名前付けとデフォルト引数のルールを確認してください。</target>
        </trans-unit>
        <trans-unit id="16471b3c05acbe867b23d78e9ce516c95eaa45af" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#defmacro/2&quot;&gt;&lt;code&gt;defmacro/2&lt;/code&gt;&lt;/a&gt; for more information, and check &lt;a href=&quot;#def/2&quot;&gt;&lt;code&gt;def/2&lt;/code&gt;&lt;/a&gt; for rules on naming and default arguments.</source>
          <target state="translated">詳細については&lt;a href=&quot;#defmacro/2&quot;&gt; &lt;code&gt;defmacro/2&lt;/code&gt; &lt;/a&gt;を確認し、命名規則とデフォルト引数の規則については&lt;a href=&quot;#def/2&quot;&gt; &lt;code&gt;def/2&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="d696caf065aad7dda368b9ed69150792a031438c" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#ensure_loaded/1&quot;&gt;&lt;code&gt;ensure_loaded/1&lt;/code&gt;&lt;/a&gt; for more information on module loading and when to use &lt;a href=&quot;#ensure_loaded/1&quot;&gt;&lt;code&gt;ensure_loaded/1&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ensure_compiled/1&quot;&gt;&lt;code&gt;ensure_compiled/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">モジュールのロードの詳細と、&lt;a href=&quot;#ensure_loaded/1&quot;&gt; &lt;code&gt;ensure_loaded/1&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#ensure_compiled/1&quot;&gt; &lt;code&gt;ensure_compiled/1&lt;/code&gt; &lt;/a&gt;使用するかについては、&lt;a href=&quot;#ensure_loaded/1&quot;&gt; &lt;code&gt;ensure_loaded/1&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="223535a829f654f4ba1b94d2f73c385014b275bc" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#string_to_quoted/2&quot;&gt;&lt;code&gt;string_to_quoted/2&lt;/code&gt;&lt;/a&gt; for options information.</source>
          <target state="translated">オプション情報については、&lt;a href=&quot;#string_to_quoted/2&quot;&gt; &lt;code&gt;string_to_quoted/2&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="7c8d72337056863704c80e076ca875b05f4c79da" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#unescape_string/1&quot;&gt;&lt;code&gt;unescape_string/1&lt;/code&gt;&lt;/a&gt; if you want to use the same map as Elixir single- and double-quoted strings.</source>
          <target state="translated">Elixirの単一引用符および二重引用符で囲まれた文字列と同じマップを使用する場合は、&lt;a href=&quot;#unescape_string/1&quot;&gt; &lt;code&gt;unescape_string/1&lt;/code&gt; を&lt;/a&gt;チェックします。</target>
        </trans-unit>
        <trans-unit id="ee05709b378da3558eb634305561ffc48a326464" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;#yield/2&quot;&gt;&lt;code&gt;yield/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;#yield/2&quot;&gt; &lt;code&gt;yield/2&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="785712997747226e23cf4b84e679095c307ba597" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;file#open/2&quot;&gt;&lt;code&gt;File.open/2&lt;/code&gt;&lt;/a&gt; for other available options.</source>
          <target state="translated">&lt;a href=&quot;file#open/2&quot;&gt; &lt;code&gt;File.open/2&lt;/code&gt; &lt;/a&gt;で他の使用可能なオプションを確認してください。</target>
        </trans-unit>
        <trans-unit id="f8d550f87c99e2d04e0824dc4af6695df840266f" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;http://www.erlang.org/doc/man/file.html#open-2&quot;&gt;&lt;code&gt;:file.open/2&lt;/code&gt;&lt;/a&gt; for more information about such options and other performance considerations.</source>
          <target state="translated">そのようなオプションとその他のパフォーマンスの考慮事項の詳細については、&lt;a href=&quot;http://www.erlang.org/doc/man/file.html#open-2&quot;&gt; &lt;code&gt;:file.open/2&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="0f5fa039b607cd582c6a4c955e7af1e177a34d30" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細&lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="9879b9cff677770f7fc6dce2a1ef0f51a801fd9d" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;kernel.specialforms#try/1&quot;&gt;&lt;code&gt;Kernel.SpecialForms.try/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細&lt;a href=&quot;kernel.specialforms#try/1&quot;&gt; &lt;code&gt;Kernel.SpecialForms.try/1&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="f8681dafec33d53ad1aff221f5baee38d09e6e9c" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;list#myers_difference/2&quot;&gt;&lt;code&gt;List.myers_difference/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細&lt;a href=&quot;list#myers_difference/2&quot;&gt; &lt;code&gt;List.myers_difference/2&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="e75e0fdd1c293bab75b6473bd2c4557b0ba22f15" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;https://hexdocs.pm/elixir/Regex.html&quot;&gt;&lt;code&gt;Regex&lt;/code&gt; module&lt;/a&gt; for more information on other modifiers and the supported operations with regular expressions.</source>
          <target state="translated">他の修飾子と正規表現でサポートされる操作の詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/Regex.html&quot;&gt; &lt;code&gt;Regex&lt;/code&gt; モジュール&lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="cbebd3b6561ff651e663b17bfb1588d294d1f922" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; module for more process-related functions.</source>
          <target state="translated">&lt;a href=&quot;process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;関連の機能については、プロセスモジュールを確認してください。</target>
        </trans-unit>
        <trans-unit id="a3840e7aee47b59321bae16ce0d7c094d2966b67" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; module for more process-related functions. For more information on linking, check &lt;a href=&quot;process#link/1&quot;&gt;&lt;code&gt;Process.link/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;関連の機能については、プロセスモジュールを確認してください。リンクの詳細については、&lt;a href=&quot;process#link/1&quot;&gt; &lt;code&gt;Process.link/1&lt;/code&gt; を&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="240896e1c6f52924fd3b42c51075a7aa10e367b9" translate="yes" xml:space="preserve">
          <source>Check the implementation for &lt;a href=&quot;https://hexdocs.pm/logger/Logger.Backends.Console.html&quot;&gt;&lt;code&gt;Logger.Backends.Console&lt;/code&gt;&lt;/a&gt;, for examples on how to handle the recommendations in this section and how to process the existing options.</source>
          <target state="translated">このセクションの推奨事項の処理方法と既存のオプションの処理方法の例については、&lt;a href=&quot;https://hexdocs.pm/logger/Logger.Backends.Console.html&quot;&gt; &lt;code&gt;Logger.Backends.Console&lt;/code&gt; &lt;/a&gt;の実装を確認してください。</target>
        </trans-unit>
        <trans-unit id="000a7110c0505a98fde3ef2e1bc528f24d4ff55d" translate="yes" xml:space="preserve">
          <source>Check the module doc for documentation on the valid parameters that will be interpolated in the pattern. If you pass &lt;code&gt;nil&lt;/code&gt; as the pattern, the pattern defaults to:</source>
          <target state="translated">パターンで補間される有効なパラメーターのドキュメントについては、モジュールのドキュメントを確認してください。パターンとして &lt;code&gt;nil&lt;/code&gt; を渡すと、パターンはデフォルトで次のようになります。</target>
        </trans-unit>
        <trans-unit id="baffb5f95d2d027ef564012567d5c8bd4d57d7b5" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;character&lt;/code&gt; is a reserved one in a URI.</source>
          <target state="translated">&lt;code&gt;character&lt;/code&gt; がURIで予約済みの文字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="4d43630cda829f9c5480cb619b0d9ba3fc02bfa4" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;character&lt;/code&gt; is allowed unescaped in a URI.</source>
          <target state="translated">URIでエスケープなしの &lt;code&gt;character&lt;/code&gt; が許可されているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="642c5506cb97150c8b0c49957d1ec0c39ec37c4b" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;character&lt;/code&gt; is an unreserved one in a URI.</source>
          <target state="translated">&lt;code&gt;character&lt;/code&gt; がURIで予約されていない文字かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="bc5a3786cdb4b06c32ad1fea1d9dd0e8f286bf9a" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;element&lt;/code&gt; exists within the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 内に &lt;code&gt;element&lt;/code&gt; が存在するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="34e9118ae59c73fb1d0e9850a5a925dc8f08a60c" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;list&lt;/code&gt; is a charlist made only of printable ASCII characters.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; が印刷可能なASCII文字のみで構成された文字リストかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="51ba5162de69ab5b19b61f1d779e77a231f9273a" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;map_set1&lt;/code&gt; and &lt;code&gt;map_set2&lt;/code&gt; have no members in common.</source>
          <target state="translated">&lt;code&gt;map_set1&lt;/code&gt; と &lt;code&gt;map_set2&lt;/code&gt; に共通のメンバーがないかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="6de0146be0b596d291b6d034f7c054092ea93647" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;map_set1&lt;/code&gt;'s members are all contained in &lt;code&gt;map_set2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map_set1&lt;/code&gt; のメンバーがすべて &lt;code&gt;map_set2&lt;/code&gt; に含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="860353a348e857f20a74b65256993cbd76ecfd45" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;map_set&lt;/code&gt; contains &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map_set&lt;/code&gt; に &lt;code&gt;value&lt;/code&gt; が含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="7d02d1acf553172c398ff3badaa55f9975d65496" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;string&lt;/code&gt; contains any of the given &lt;code&gt;contents&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; に指定された &lt;code&gt;contents&lt;/code&gt; が含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="fd0b0ab3712234c91e2a938e6cf5b5d74612661e" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;string&lt;/code&gt; matches the given regular expression.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; が指定された正規表現と一致するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="c32e6246846b85caee2acf1229eb3f9ce12bff47" translate="yes" xml:space="preserve">
          <source>Checks if ANSI coloring is supported and enabled on this machine.</source>
          <target state="translated">ANSI カラーリングがサポートされており、このマシンで有効になっているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="598cd82c1f65bc6e00bf01f403ad5bf50ee82808" translate="yes" xml:space="preserve">
          <source>Checks if a module is open.</source>
          <target state="translated">モジュールが開いているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="97952b511a27ef4ca31c8b021afb71a2e3a4d636" translate="yes" xml:space="preserve">
          <source>Checks if a string contains only printable characters up to &lt;code&gt;character_limit&lt;/code&gt;.</source>
          <target state="translated">文字列は最大のみ印刷可能な文字が含まれているかどうかをチェック &lt;code&gt;character_limit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="738ad3d07d9803b45243f29adefcce780279e603" translate="yes" xml:space="preserve">
          <source>Checks if a variable belongs to the environment.</source>
          <target state="translated">変数が環境に属しているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="9b7301ad49b99d36c204b6d78c9440851f9234b1" translate="yes" xml:space="preserve">
          <source>Checks if an &lt;code&gt;element&lt;/code&gt; exists within the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 内に &lt;code&gt;element&lt;/code&gt; が存在するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="0c385aef6748980d6bd7e8fb950ad4f9d46b618a" translate="yes" xml:space="preserve">
          <source>Checks if an alias called &lt;code&gt;task&lt;/code&gt; exists.</source>
          <target state="translated">&lt;code&gt;task&lt;/code&gt; と呼ばれるエイリアスが存在するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="5e7e666e0c3d03945af8991776e375da93987b75" translate="yes" xml:space="preserve">
          <source>Checks if the current module defines the given type (private, opaque or not).</source>
          <target state="translated">現在のモジュールが指定されたタイプを定義しているかどうかをチェックします (private、opaqueかどうか)。</target>
        </trans-unit>
        <trans-unit id="889ecbb917f6d1b03f6c203ac51a025e0d0d4cb0" translate="yes" xml:space="preserve">
          <source>Checks if the element on the left-hand side is a member of the collection on the right-hand side.</source>
          <target state="translated">左側の要素が右側のコレクションのメンバーであるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="3a7758dda8842a876dc8bd8d7f91d3f50d8c1417" translate="yes" xml:space="preserve">
          <source>Checks if the given &lt;code&gt;data&lt;/code&gt; is a record of kind &lt;code&gt;kind&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;data&lt;/code&gt; が種類 &lt;code&gt;kind&lt;/code&gt; のレコードであるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="118f8426c42f72df84637b50990f8b910aead852" translate="yes" xml:space="preserve">
          <source>Checks if the given &lt;code&gt;data&lt;/code&gt; is a record.</source>
          <target state="translated">指定された &lt;code&gt;data&lt;/code&gt; がレコードであるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="124c3e109b20d327475da3b493e383ae7cd3250b" translate="yes" xml:space="preserve">
          <source>Checks if the given module is loaded and is an implementation of the given protocol.</source>
          <target state="translated">指定されたモジュールがロードされているかどうか、指定されたプロトコルの実装であるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="5a8b4e75b4856943a7b23d0e4a8d665c881560a7" translate="yes" xml:space="preserve">
          <source>Checks if the given module is loaded and is protocol.</source>
          <target state="translated">指定されたモジュールがロードされているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="713890b386025a6cc8d7c4048850fb4a3ab6191f" translate="yes" xml:space="preserve">
          <source>Checks if the given version matches the specification.</source>
          <target state="translated">指定されたバージョンが仕様に一致するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="ea84db153f8c1bc78f779caa23e3b2b9bc11b2d3" translate="yes" xml:space="preserve">
          <source>Checks if the module defines a function or macro of the given &lt;code&gt;kind&lt;/code&gt;.</source>
          <target state="translated">モジュールが指定された &lt;code&gt;kind&lt;/code&gt; 関数またはマクロを定義しているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="92dc6ac545a0ed645ba9886a5695677e1e6e7604" translate="yes" xml:space="preserve">
          <source>Checks if the module defines the given function or macro.</source>
          <target state="translated">モジュールが指定された関数またはマクロを定義しているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="3bea1813950d347f459ed2da2d1886b8aa3f7f12" translate="yes" xml:space="preserve">
          <source>Checks if the system will halt or not at the end of ARGV processing.</source>
          <target state="translated">ARGV処理の終了時にシステムが停止するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="437313cfd325500ea732df919e03e5de51e3289c" translate="yes" xml:space="preserve">
          <source>Checks if the task should be run recursively for all sub-apps in umbrella projects.</source>
          <target state="translated">アンブレラプロジェクト内のすべてのサブアプリに対して、タスクを再帰的に実行するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="c8fc6d1821d83fee2fd98b4e29b2eab8ee0991ba" translate="yes" xml:space="preserve">
          <source>Checks if there is a message matching the given clauses in the current process mailbox.</source>
          <target state="translated">現在のプロセスメールボックスに指定された句に一致するメッセージがあるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="79beead16967435820b57e591ccbecace1d1c3ce" translate="yes" xml:space="preserve">
          <source>Checks if two keywords are equal.</source>
          <target state="translated">2つのキーワードが等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="73ce1f2860aa5f7e1244cc43d53173af401fa1c5" translate="yes" xml:space="preserve">
          <source>Checks if two maps are equal.</source>
          <target state="translated">2 つのマップが等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="616eb9024590388233fa19552a45060a809c58ab" translate="yes" xml:space="preserve">
          <source>Checks if two ranges are disjoint.</source>
          <target state="translated">2つの範囲が不連続であるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="fc3b8041f2a764e72f9a99d83ff9d7edebb760d0" translate="yes" xml:space="preserve">
          <source>Checks if two sets are equal.</source>
          <target state="translated">2 つのセットが等しいかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="41c4661f5df293e90c7e8468bec27fa2820e5985" translate="yes" xml:space="preserve">
          <source>Checks the &lt;a href=&quot;macro#t:t/0&quot;&gt;&lt;code&gt;Macro.t/0&lt;/code&gt;&lt;/a&gt; for the specification of a valid quoted expression.</source>
          <target state="translated">&lt;a href=&quot;macro#t:t/0&quot;&gt; &lt;code&gt;Macro.t/0&lt;/code&gt; &lt;/a&gt;をチェックして、引用符で囲まれた有効な式の指定を確認します。</target>
        </trans-unit>
        <trans-unit id="666ba3e423d21e52f9fd2dec6cb05f41ff960a45" translate="yes" xml:space="preserve">
          <source>Checks whether &lt;code&gt;string&lt;/code&gt; contains only valid characters.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; に有効な文字のみが含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="f6e9c56ca18d9754f5af26417de2a328548838cb" translate="yes" xml:space="preserve">
          <source>Child specification</source>
          <target state="translated">子機仕様</target>
        </trans-unit>
        <trans-unit id="c3d58e131073765a8fbc52191251a770441a66e5" translate="yes" xml:space="preserve">
          <source>Choose a &lt;a href=&quot;https://choosealicense.com/&quot;&gt;license&lt;/a&gt;. The most common licenses in the Elixir community are the &lt;a href=&quot;https://choosealicense.com/licenses/mit/&quot;&gt;MIT License&lt;/a&gt; and the &lt;a href=&quot;https://choosealicense.com/licenses/apache-2.0/&quot;&gt;Apache License 2.0&lt;/a&gt;. The latter is also the one used by Elixir itself.</source>
          <target state="translated">&lt;a href=&quot;https://choosealicense.com/&quot;&gt;ライセンスを&lt;/a&gt;選択します。Elixirコミュニティで最も一般的なライセンスは、&lt;a href=&quot;https://choosealicense.com/licenses/mit/&quot;&gt;MITライセンス&lt;/a&gt;と&lt;a href=&quot;https://choosealicense.com/licenses/apache-2.0/&quot;&gt;Apacheライセンス2.0&lt;/a&gt;です。後者は、Elixir自体が使用するものでもあります。</target>
        </trans-unit>
        <trans-unit id="d746003f831879f4d9c00718df18aa77507218d3" translate="yes" xml:space="preserve">
          <source>Choose a versioning schema. Elixir requires versions to be in the format &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; but the meaning of those numbers is up to you. Most projects choose &lt;a href=&quot;https://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt;.</source>
          <target state="translated">バージョンスキーマを選択します。Elixirでは、バージョンを &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; の形式にする必要がありますが、これらの番号の意味はユーザー次第です。ほとんどのプロジェクトは&lt;a href=&quot;https://semver.org/&quot;&gt;セマンティックバージョニングを&lt;/a&gt;選択します。</target>
        </trans-unit>
        <trans-unit id="1339b412671e2da05add576032c5b579ea52376a" translate="yes" xml:space="preserve">
          <source>Choosing requirement R6 automatically excludes requirements R4, R5 and R7.</source>
          <target state="translated">要件 R6 を選択すると、要件 R4、R5、および R7 は自動的に除外されます。</target>
        </trans-unit>
        <trans-unit id="ef47da406dcfe37fc12040175eeecabe9f974ccd" translate="yes" xml:space="preserve">
          <source>Chunks the &lt;code&gt;enum&lt;/code&gt; by buffering elements for which &lt;code&gt;fun&lt;/code&gt; returns the same value.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; が同じ値を返す要素をバッファリングすることにより、 &lt;code&gt;enum&lt;/code&gt; チャンク化します。</target>
        </trans-unit>
        <trans-unit id="09c64d73a45df2fc80159ff7084b07b4e192ed3b" translate="yes" xml:space="preserve">
          <source>Chunks the &lt;code&gt;enum&lt;/code&gt; with fine grained control when every chunk is emitted.</source>
          <target state="translated">すべてのチャンクが放出されるときに、 &lt;code&gt;enum&lt;/code&gt; を細かい制御でチャンクします。</target>
        </trans-unit>
        <trans-unit id="f3199a3f0afc069c8d87ccec0cb9e42069a3b81e" translate="yes" xml:space="preserve">
          <source>Chunks the &lt;code&gt;enumerable&lt;/code&gt; with fine grained control when every chunk is emitted.</source>
          <target state="translated">チャンク &lt;code&gt;enumerable&lt;/code&gt; すべてのチャンクが放出されたときに罰金が制御を木目。</target>
        </trans-unit>
        <trans-unit id="5130e70e6af041df0b4f02efa5896c71601680f4" translate="yes" xml:space="preserve">
          <source>Clauses also allow extra conditions to be specified via guards:</source>
          <target state="translated">条項はまた、ガードを介して余分な条件を指定することができます。</target>
        </trans-unit>
        <trans-unit id="4d21fa3b66fd85a0eae22c5b7627920962b58e23" translate="yes" xml:space="preserve">
          <source>Clears all invoked tasks, allowing them to be reinvoked.</source>
          <target state="translated">呼び出されたタスクをすべてクリアし、再起動できるようにします。</target>
        </trans-unit>
        <trans-unit id="b5501033c685e38d6fb36033a17bad897fb206fd" translate="yes" xml:space="preserve">
          <source>Clears line.</source>
          <target state="translated">ラインをクリアします。</target>
        </trans-unit>
        <trans-unit id="b408d2632b8e891b143869b00518580273c47949" translate="yes" xml:space="preserve">
          <source>Clears out all messages sent to the shell's inbox and prints them out.</source>
          <target state="translated">シェルの受信箱に送られたメッセージをすべて消去して印刷します。</target>
        </trans-unit>
        <trans-unit id="8eb38935be80ed9039da3a39b11aa4d0c24919e9" translate="yes" xml:space="preserve">
          <source>Clears screen.</source>
          <target state="translated">画面をクリアします。</target>
        </trans-unit>
        <trans-unit id="f02f33c6f3cdd9389808e91d095c2309fcb9224a" translate="yes" xml:space="preserve">
          <source>Clears the console screen.</source>
          <target state="translated">コンソール画面をクリアします。</target>
        </trans-unit>
        <trans-unit id="827e22262ec4bb7ded4eeadb9fb3aa8dc2c35bd9" translate="yes" xml:space="preserve">
          <source>Clears the dependency for the current environment.</source>
          <target state="translated">現在の環境の依存関係をクリアします。</target>
        </trans-unit>
        <trans-unit id="9c4f3063144d0a8e09522b56e2ecffbfbfc5efbc" translate="yes" xml:space="preserve">
          <source>Client / Server APIs</source>
          <target state="translated">クライアント/サーバーAPI</target>
        </trans-unit>
        <trans-unit id="ee4f79f897434114271f46c13449ce1869f416ea" translate="yes" xml:space="preserve">
          <source>Client/Server in agents</source>
          <target state="translated">エージェントのクライアント/サーバー</target>
        </trans-unit>
        <trans-unit id="182072135056cbdedcd87bbad9287c89ec82bc4d" translate="yes" xml:space="preserve">
          <source>Clients and Servers - Learn You Some Erlang for Great Good!</source>
          <target state="translated">クライアントとサーバ-Erlangを学ぶことで、より良いものになる!</target>
        </trans-unit>
        <trans-unit id="5321f8adc0182546df611269506b6bc3b81f34df" translate="yes" xml:space="preserve">
          <source>Closes the &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; 閉じます。</target>
        </trans-unit>
        <trans-unit id="08b2eefe6b6ef7fc70e6d5b483e21b4922d35e18" translate="yes" xml:space="preserve">
          <source>Closes the file referenced by &lt;code&gt;io_device&lt;/code&gt;. It mostly returns &lt;code&gt;:ok&lt;/code&gt;, except for some severe errors such as out of memory.</source>
          <target state="translated">&lt;code&gt;io_device&lt;/code&gt; が参照するファイルを閉じます。メモリ不足などのいくつかの重大なエラーを除いて、ほとんど &lt;code&gt;:ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="adac69379a626c2436948a4ef1792c7d719ef929" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">Code</target>
        </trans-unit>
        <trans-unit id="e9b5273619e7c9d59651c9302451ddc5bba79f43" translate="yes" xml:space="preserve">
          <source>Code comments</source>
          <target state="translated">コードコメント</target>
        </trans-unit>
        <trans-unit id="407e0b95bcfcf898b9202ae04357406ff3f10f14" translate="yes" xml:space="preserve">
          <source>Code comments are aimed at developers reading the code. They are useful for marking improvements, leaving notes (for example, why you had to resort to a workaround due to a bug in a library), and so forth. They are tied to the source code: you can completely rewrite a function and remove all existing code comments, and it will continue to behave the same, with no change to either its behaviour or its documentation.</source>
          <target state="translated">コードコメントは、コードを読む開発者を対象としています。コメントは、改善点をマークしたり、メモを残したりするのに便利です(例えば、ライブラリのバグのために回避策に頼らざるを得なかった理由など)。関数を完全に書き換え、既存のコードコメントをすべて削除することができます。</target>
        </trans-unit>
        <trans-unit id="3d0c84971ed8c269fff1364330b0cb908605d37f" translate="yes" xml:space="preserve">
          <source>Code loading on the Erlang VM</source>
          <target state="translated">Erlang VMでのコードローディング</target>
        </trans-unit>
        <trans-unit id="ec7909dcc79311e3f0b6979c6dc4d55422c72b61" translate="yes" xml:space="preserve">
          <source>Code points and grapheme cluster</source>
          <target state="translated">コードポイントと書記素クラスタ</target>
        </trans-unit>
        <trans-unit id="1aa5924d1c20fa9f241eb4e1b21f78f5905bf0bd" translate="yes" xml:space="preserve">
          <source>Code preloading. The VM has two mechanisms for loading code: interactive and embedded. By default, it runs in the interactive mode which dynamically loads modules when they are used for the first time. The first time your application calls &lt;code&gt;Enum.map/2&lt;/code&gt;, the VM will find the &lt;code&gt;Enum&lt;/code&gt; module and load it. There&amp;rsquo;s a downside. When you start a new server in production, it may need to load many other modules, causing the first requests to have an unusual spike in response time. Releases run in embedded mode, which loads all available modules upfront, guaranteeing your system is ready to handle requests after booting.</source>
          <target state="translated">コードのプリロード。VMには、コードをロードするための2つのメカニズムがあります。対話型と埋め込みです。デフォルトでは、モジュールは初めて使用されるときにモジュールを動的にロードするインタラクティブモードで実行されます。アプリケーションが &lt;code&gt;Enum.map/2&lt;/code&gt; と、VMは &lt;code&gt;Enum&lt;/code&gt; モジュールを見つけてロードします。欠点があります。本番環境で新しいサーバーを起動すると、他の多くのモジュールをロードする必要があり、最初のリクエストの応答時間が異常に急上昇する可能性があります。リリースは組み込みモードで実行され、使用可能なすべてのモジュールを事前にロードし、システムが起動後にリクエストを処理する準備ができていることを保証します。</target>
        </trans-unit>
        <trans-unit id="9bbbc29ce6e01c5f883b21207d4df5d189f562e4" translate="yes" xml:space="preserve">
          <source>Code to be executed can also be passed inline with the &lt;code&gt;-e&lt;/code&gt; option:</source>
          <target state="translated">実行するコードは、 &lt;code&gt;-e&lt;/code&gt; オプションを使用してインラインで渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="8925ef3817c5078333f965ac2c4f8fd3dec413cd" translate="yes" xml:space="preserve">
          <source>Code.LoadError</source>
          <target state="translated">Code.LoadError</target>
        </trans-unit>
        <trans-unit id="2793300c10721db92c5d2235001b12020b992cc1" translate="yes" xml:space="preserve">
          <source>Code.LoadError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">Code.LoadError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="87076accf13c08a15b009170f620b176a4faca61" translate="yes" xml:space="preserve">
          <source>Code.fetch_docs/1</source>
          <target state="translated">Code.fetch_docs/1</target>
        </trans-unit>
        <trans-unit id="faada4c03778897c42585b08b0a16dfdfe932b0b" translate="yes" xml:space="preserve">
          <source>Collapse any new lines and whitespace following this node, emitting up to &lt;code&gt;max&lt;/code&gt; new lines.</source>
          <target state="translated">このノードに続くすべての新しい行と空白を折りたたみ、 &lt;code&gt;max&lt;/code&gt; 行まで出力します。</target>
        </trans-unit>
        <trans-unit id="91af54365271b68093cc58f58877c5e5fbf80e5a" translate="yes" xml:space="preserve">
          <source>Collectable</source>
          <target state="translated">Collectable</target>
        </trans-unit>
        <trans-unit id="d80c0d2f5db391e72e90f3887949506276cfb40c" translate="yes" xml:space="preserve">
          <source>Collectable &lt;small&gt;protocol&lt;/small&gt;</source>
          <target state="translated">収集可能な&lt;small&gt;プロトコル&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="efccae93725e6f5a9afb9579e21ff7b906852fd3" translate="yes" xml:space="preserve">
          <source>Collectable.command (0)</source>
          <target state="translated">Collectable.command (0)</target>
        </trans-unit>
        <trans-unit id="8647850dbe0b4bbf11c6e320d7b6ef187ee2db5e" translate="yes" xml:space="preserve">
          <source>Collectable.into (1)</source>
          <target state="translated">Collectable.into (1)</target>
        </trans-unit>
        <trans-unit id="3f6e96c64cc87200f83a7abe1d28f9e91920b4d4" translate="yes" xml:space="preserve">
          <source>Collectable.t (0)</source>
          <target state="translated">収集可能な.t (0)</target>
        </trans-unit>
        <trans-unit id="88d5e4cac104ffc3f02dd54f2f0f1074fd33fd9b" translate="yes" xml:space="preserve">
          <source>Colors</source>
          <target state="translated">Colors</target>
        </trans-unit>
        <trans-unit id="96e74053cae538c3ecd9d29799c5c9b0fceb9d72" translate="yes" xml:space="preserve">
          <source>Colors a document if the &lt;code&gt;color_key&lt;/code&gt; has a color in the options.</source>
          <target state="translated">オプションに &lt;code&gt;color_key&lt;/code&gt; の色がある場合、ドキュメントに色を付けます。</target>
        </trans-unit>
        <trans-unit id="6e3d3bf1961b8057b125fc05310e2099de8793b0" translate="yes" xml:space="preserve">
          <source>Command line options</source>
          <target state="translated">コマンドラインオプション</target>
        </trans-unit>
        <trans-unit id="f67e000a046a21604b2818c94a17c7ddab8e2442" translate="yes" xml:space="preserve">
          <source>Command-line options</source>
          <target state="translated">コマンドラインオプション</target>
        </trans-unit>
        <trans-unit id="e49bd0922826a05729c3e5928e11f174c484ef82" translate="yes" xml:space="preserve">
          <source>Community and other resources</source>
          <target state="translated">コミュニティなどの資源</target>
        </trans-unit>
        <trans-unit id="351b39c3cb9ffe473609505c1caefaf73bfad121" translate="yes" xml:space="preserve">
          <source>Compared to keyword lists, we can already see two differences:</source>
          <target state="translated">キーワードリストと比較すると、すでに2つの違いが見えてきます。</target>
        </trans-unit>
        <trans-unit id="3c4dd5827aee0b7bc5bce155cef1a41295eb21d9" translate="yes" xml:space="preserve">
          <source>Compared to the &lt;a href=&quot;#cp/3&quot;&gt;&lt;code&gt;cp/3&lt;/code&gt;&lt;/a&gt;, this function is more low-level, allowing a copy from device to device limited by a number of bytes. On the other hand, &lt;a href=&quot;#cp/3&quot;&gt;&lt;code&gt;cp/3&lt;/code&gt;&lt;/a&gt; performs more extensive checks on both source and destination and it also preserves the file mode after copy.</source>
          <target state="translated">&lt;a href=&quot;#cp/3&quot;&gt; &lt;code&gt;cp/3&lt;/code&gt; &lt;/a&gt;と比較して、この関数はより低レベルであり、デバイスからデバイスへのコピーをバイト数で制限できます。一方、&lt;a href=&quot;#cp/3&quot;&gt; &lt;code&gt;cp/3&lt;/code&gt; &lt;/a&gt;はコピー元とコピー先の両方でより広範なチェックを実行し、コピー後のファイルモードも保持します。</target>
        </trans-unit>
        <trans-unit id="4396ebd5f93ea927d7f38fcc76884b2d876b8c70" translate="yes" xml:space="preserve">
          <source>Compares log levels.</source>
          <target state="translated">ログレベルを比較します。</target>
        </trans-unit>
        <trans-unit id="2bddca0648b60655df6f9b1bec6eaa161ae7af3b" translate="yes" xml:space="preserve">
          <source>Compares two &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; structs.</source>
          <target state="translated">2つの&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;構造体を比較します。</target>
        </trans-unit>
        <trans-unit id="221fa096c94059dac8cb4762f358f4aa7a03c1ff" translate="yes" xml:space="preserve">
          <source>Compares two date structs.</source>
          <target state="translated">2 つの日付構造体を比較します。</target>
        </trans-unit>
        <trans-unit id="6782100a1e3b01bfa6aced20d6a89d3df7b1b892" translate="yes" xml:space="preserve">
          <source>Compares two datetime structs.</source>
          <target state="translated">2 つの日付時間構造体を比較します。</target>
        </trans-unit>
        <trans-unit id="34b17d0b1be43ba0ceacc7bc5ba086b336622a11" translate="yes" xml:space="preserve">
          <source>Compares two time structs.</source>
          <target state="translated">2つの時間構造を比較します。</target>
        </trans-unit>
        <trans-unit id="aed844f61a9c1a83201e59d846227cc4ca353638" translate="yes" xml:space="preserve">
          <source>Compares two versions.</source>
          <target state="translated">2つのバージョンを比較します。</target>
        </trans-unit>
        <trans-unit id="7dca07167ef3fe34550bf0509fc6fb45f893e74a" translate="yes" xml:space="preserve">
          <source>Comparing dates</source>
          <target state="translated">日付の比較</target>
        </trans-unit>
        <trans-unit id="fb5333c90cc8d2bfbc9b665af90800832ab0f856" translate="yes" xml:space="preserve">
          <source>Comparing naive date times</source>
          <target state="translated">ナイーブな日付時間の比較</target>
        </trans-unit>
        <trans-unit id="72158d6e3482e00cedae532226bd81727e66a164" translate="yes" xml:space="preserve">
          <source>Comparing times</source>
          <target state="translated">時間の比較</target>
        </trans-unit>
        <trans-unit id="9461d4c9f916ad7df5538225ed552fb6e7e3284b" translate="yes" xml:space="preserve">
          <source>Comparison operators</source>
          <target state="translated">比較演算子</target>
        </trans-unit>
        <trans-unit id="15ab192596c8ba15e4efa62ffe722828f388b1e3" translate="yes" xml:space="preserve">
          <source>Comparison to &lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt; との&lt;/a&gt;比較</target>
        </trans-unit>
        <trans-unit id="b40ad652f0b8e3e0fb8ff30d06417bb28cb7e636" translate="yes" xml:space="preserve">
          <source>Comparison with binary pattern matching</source>
          <target state="translated">バイナリパターンマッチングとの比較</target>
        </trans-unit>
        <trans-unit id="7ea963a047168a722cbd246ebd47586d05f01b19" translate="yes" xml:space="preserve">
          <source>Comparisons in Elixir using &lt;a href=&quot;kernel#==/2&quot;&gt;&lt;code&gt;==/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#%253E/2&quot;&gt;&lt;code&gt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#%253C/2&quot;&gt;&lt;code&gt;&amp;lt;/2&lt;/code&gt;&lt;/a&gt; and similar are structural and based on the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; struct fields. For proper comparison between dates, use the &lt;a href=&quot;#compare/2&quot;&gt;&lt;code&gt;compare/2&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">Elixirでの&lt;a href=&quot;kernel#==/2&quot;&gt; &lt;code&gt;==/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#%253E/2&quot;&gt; &lt;code&gt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#%253C/2&quot;&gt; &lt;code&gt;&amp;lt;/2&lt;/code&gt; &lt;/a&gt;などの比較は構造的であり、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;構造体フィールドに基づいています。日付を適切に比較するには、&lt;a href=&quot;#compare/2&quot;&gt; &lt;code&gt;compare/2&lt;/code&gt; &lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="223f508a513f824a4ac2feecf7af48fa276819c5" translate="yes" xml:space="preserve">
          <source>Comparisons in Elixir using &lt;a href=&quot;kernel#==/2&quot;&gt;&lt;code&gt;==/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#%253E/2&quot;&gt;&lt;code&gt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#%253C/2&quot;&gt;&lt;code&gt;&amp;lt;/2&lt;/code&gt;&lt;/a&gt; and similar are structural and based on the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; struct fields. For proper comparison between naive datetimes, use the &lt;a href=&quot;#compare/2&quot;&gt;&lt;code&gt;compare/2&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">Elixirでの&lt;a href=&quot;kernel#==/2&quot;&gt; &lt;code&gt;==/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#%253E/2&quot;&gt; &lt;code&gt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#%253C/2&quot;&gt; &lt;code&gt;&amp;lt;/2&lt;/code&gt; &lt;/a&gt;などの比較は構造的であり、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;構造体フィールドに基づいています。単純な日付時刻を適切に比較するには、&lt;a href=&quot;#compare/2&quot;&gt; &lt;code&gt;compare/2&lt;/code&gt; &lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="0bfda4dfed8330e94d2d4752354274648b44ba3b" translate="yes" xml:space="preserve">
          <source>Comparisons in Elixir using &lt;a href=&quot;kernel#==/2&quot;&gt;&lt;code&gt;==/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#%253E/2&quot;&gt;&lt;code&gt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#%253C/2&quot;&gt;&lt;code&gt;&amp;lt;/2&lt;/code&gt;&lt;/a&gt; and similar are structural and based on the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; struct fields. For proper comparison between times, use the &lt;a href=&quot;#compare/2&quot;&gt;&lt;code&gt;compare/2&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">Elixirでの&lt;a href=&quot;kernel#==/2&quot;&gt; &lt;code&gt;==/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#%253E/2&quot;&gt; &lt;code&gt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel#%253C/2&quot;&gt; &lt;code&gt;&amp;lt;/2&lt;/code&gt; &lt;/a&gt;などの比較は構造的であり、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;構造体フィールドに基づいています。時間を適切に比較するには、&lt;a href=&quot;#compare/2&quot;&gt; &lt;code&gt;compare/2&lt;/code&gt; &lt;/a&gt;関数を使用します。</target>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes" xml:space="preserve">
          <source>Compatibility</source>
          <target state="translated">Compatibility</target>
        </trans-unit>
        <trans-unit id="c4a94cda45edff3876fed45dbc4c3cb4ce79baa3" translate="yes" xml:space="preserve">
          <source>Compatibility and Deprecations</source>
          <target state="translated">互換性と非推奨</target>
        </trans-unit>
        <trans-unit id="f42d7b50ca233e04dc35e582f6b9af961f23c004" translate="yes" xml:space="preserve">
          <source>Compatibility between Elixir and Erlang/OTP</source>
          <target state="translated">ElixirとErlang/OTPの互換性</target>
        </trans-unit>
        <trans-unit id="8f74e2722c1f84edbd83275bae1006369ac7ea9d" translate="yes" xml:space="preserve">
          <source>Compatibility between non-major Elixir versions</source>
          <target state="translated">メジャーではないElixirのバージョン間の互換性</target>
        </trans-unit>
        <trans-unit id="1684199ac60e5587c6ced4c1cbb54268a896b641" translate="yes" xml:space="preserve">
          <source>Compatibility with OTP behaviours</source>
          <target state="translated">OTP行動との相性</target>
        </trans-unit>
        <trans-unit id="aad755de429541e8ec1db943cf4102247f2bb5d3" translate="yes" xml:space="preserve">
          <source>Compilation</source>
          <target state="translated">Compilation</target>
        </trans-unit>
        <trans-unit id="3e7a794cfc66ce992a7ff5365bcfa7b7bd38cc57" translate="yes" xml:space="preserve">
          <source>Compilation environment macros (&lt;a href=&quot;kernel.specialforms#__CALLER__/0&quot;&gt;&lt;code&gt;__CALLER__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel.specialforms#__DIR__/0&quot;&gt;&lt;code&gt;__DIR__/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt;&lt;code&gt;__ENV__/0&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;kernel.specialforms#__MODULE__/0&quot;&gt;&lt;code&gt;__MODULE__/0&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">コンパイル環境マクロ（&lt;a href=&quot;kernel.specialforms#__CALLER__/0&quot;&gt; &lt;code&gt;__CALLER__/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel.specialforms#__DIR__/0&quot;&gt; &lt;code&gt;__DIR__/0&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;kernel.specialforms#__ENV__/0&quot;&gt; &lt;code&gt;__ENV__/0&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;kernel.specialforms#__MODULE__/0&quot;&gt; &lt;code&gt;__MODULE__/0&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="f657a919e86d30d7dc49c2990c4badfef6d2ae9b" translate="yes" xml:space="preserve">
          <source>Compile a string (&lt;code&gt;compile_string&lt;/code&gt;) or a file (&lt;code&gt;compile_file&lt;/code&gt;) into Elixir syntax tree. This is the API used by both functions above and is available to you if you want to provide your own ways of handling the compiled template.</source>
          <target state="translated">文字列（ &lt;code&gt;compile_string&lt;/code&gt; ）またはファイル（ &lt;code&gt;compile_file&lt;/code&gt; ）をElixir構文ツリーにコンパイルします。これは上記の両方の関数で使用されるAPIであり、コンパイル済みテンプレートを処理する独自の方法を提供する場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="99d6c95e99f15d2782415966b874bf7ac7c480ec" translate="yes" xml:space="preserve">
          <source>Compile callbacks</source>
          <target state="translated">コールバックをコンパイル</target>
        </trans-unit>
        <trans-unit id="b9b345cfc373ededcbc96ee76cf173b0c38e656e" translate="yes" xml:space="preserve">
          <source>Compile options</source>
          <target state="translated">コンパイルオプション</target>
        </trans-unit>
        <trans-unit id="a4eb1e8f716939c9fd4a5a9009f8576e365876fc" translate="yes" xml:space="preserve">
          <source>CompileError</source>
          <target state="translated">CompileError</target>
        </trans-unit>
        <trans-unit id="f54ad90826f1166c75feaaf8212b1ffed6e2b140" translate="yes" xml:space="preserve">
          <source>CompileError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">CompileError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d3b37411d97ddaa5a4d151b734a15fb76e5fca29" translate="yes" xml:space="preserve">
          <source>Compiler front-end: improvements may be done to the compiler, introducing new warnings for ambiguous modes and providing more detailed error messages. Those can lead to compilation errors (when running with &lt;code&gt;--warning-as-errors&lt;/code&gt;) or tooling failures when asserting on specific error messages (although one should avoid such). We reserve the right to do such improvements.</source>
          <target state="translated">コンパイラフロントエンド：曖昧なモードに対する新しい警告を導入し、より詳細なエラーメッセージを提供して、コンパイラに改善を加えることができます。これらは、コンパイルエラー（ &lt;code&gt;--warning-as-errors&lt;/code&gt; を指定して実行している場合）または特定のエラーメッセージをアサートする際のツールエラーにつながる可能性があります（ただし、回避する必要があります）。私たちはそのような改善を行う権利を留保します。</target>
        </trans-unit>
        <trans-unit id="e1be83a7756a5bb6c9b11d838efbdc2b010f2edd" translate="yes" xml:space="preserve">
          <source>Compilers</source>
          <target state="translated">Compilers</target>
        </trans-unit>
        <trans-unit id="6a97aec4e0f175d98451227716629a5e06e9daa5" translate="yes" xml:space="preserve">
          <source>Compiles Elixir source files.</source>
          <target state="translated">Elixirのソースファイルをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="bec1c5e79e401a7466a08ba63018054233105899" translate="yes" xml:space="preserve">
          <source>Compiles Erlang source files.</source>
          <target state="translated">Erlangのソースファイルをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="1f5b4ba2582167bc9dbc03751202b445126c211d" translate="yes" xml:space="preserve">
          <source>Compiles Yecc source files.</source>
          <target state="translated">Yeccのソースファイルをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="0555a5fff463fa1be9a0f36abf14a298f2675629" translate="yes" xml:space="preserve">
          <source>Compiles a format string into a data structure that &lt;a href=&quot;#format/5&quot;&gt;&lt;code&gt;format/5&lt;/code&gt;&lt;/a&gt; can handle.</source>
          <target state="translated">書式文字列を、&lt;a href=&quot;#format/5&quot;&gt; &lt;code&gt;format/5&lt;/code&gt; &lt;/a&gt;が処理できるデータ構造にコンパイルします。</target>
        </trans-unit>
        <trans-unit id="12d2667a1f41abc65eebfb8aca2ce483662f6d90" translate="yes" xml:space="preserve">
          <source>Compiles a requirement to its internal representation with &lt;a href=&quot;http://www.erlang.org/doc/man/ets.html#match_spec_compile-1&quot;&gt;&lt;code&gt;:ets.match_spec_compile/1&lt;/code&gt;&lt;/a&gt; for faster matching.</source>
          <target state="translated">より速いマッチングのために、要件をその内部表現に&lt;a href=&quot;http://www.erlang.org/doc/man/ets.html#match_spec_compile-1&quot;&gt; &lt;code&gt;:ets.match_spec_compile/1&lt;/code&gt; &lt;/a&gt;でコンパイルします。</target>
        </trans-unit>
        <trans-unit id="f2cf002d6de77f196a3161337e5d01f628fa219c" translate="yes" xml:space="preserve">
          <source>Compiles the given file.</source>
          <target state="translated">与えられたファイルをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="fe5d7e4a131dbe8c58cc4a04762428daf778a3f1" translate="yes" xml:space="preserve">
          <source>Compiles the given files.</source>
          <target state="translated">与えられたファイルをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="a5664f86acdcfb847dd8e5c6fc454b47248e9f79" translate="yes" xml:space="preserve">
          <source>Compiles the given project.</source>
          <target state="translated">与えられたプロジェクトをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="ae26c039cef510e8b34ba14faf19222f446f7af5" translate="yes" xml:space="preserve">
          <source>Compiles the given string.</source>
          <target state="translated">与えられた文字列をコンパイルします。</target>
        </trans-unit>
        <trans-unit id="917e43c9d373a6e4c3419110429f241ad1a5803b" translate="yes" xml:space="preserve">
          <source>Compiles the quoted expression.</source>
          <target state="translated">引用された式をコンパイルします。</target>
        </trans-unit>
        <trans-unit id="c23a1bc10af7479e16b7d2e120610e8416f989f4" translate="yes" xml:space="preserve">
          <source>Compiles the regular expression and raises &lt;a href=&quot;regex.compileerror&quot;&gt;&lt;code&gt;Regex.CompileError&lt;/code&gt;&lt;/a&gt; in case of errors.</source>
          <target state="translated">正規表現をコンパイルし、エラーが発生した場合は&lt;a href=&quot;regex.compileerror&quot;&gt; &lt;code&gt;Regex.CompileError&lt;/code&gt; &lt;/a&gt;を発生させます。</target>
        </trans-unit>
        <trans-unit id="1e49c3744a3522b82c9288a53a5c637df4b01d82" translate="yes" xml:space="preserve">
          <source>Compiles the regular expression.</source>
          <target state="translated">正規表現をコンパイルします。</target>
        </trans-unit>
        <trans-unit id="ed2ff637c10fb1755e29c0eb2376d67d8e5a91b4" translate="yes" xml:space="preserve">
          <source>Comprehensions</source>
          <target state="translated">Comprehensions</target>
        </trans-unit>
        <trans-unit id="1310c30df240bc12f3591d11936eb9f7e6967dd7" translate="yes" xml:space="preserve">
          <source>Comprehensions allow you to quickly build a data structure from an enumerable or a bitstring.</source>
          <target state="translated">コンプレッションでは、列挙可能な文字列やビットストリングからデータ構造を素早く構築することができます。</target>
        </trans-unit>
        <trans-unit id="dfe3133c5fadf89f0c4e372dfb9d3554729a6dc3" translate="yes" xml:space="preserve">
          <source>Comprehensions discard all elements for which the filter expression returns &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;; all other values are selected.</source>
          <target state="translated">内包表記は、フィルター式が &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;nil&lt;/code&gt; を返すすべての要素を破棄します。他のすべての値が選択されます。</target>
        </trans-unit>
        <trans-unit id="5b77c42be234abc320cd3adb104af1c94a8cbc7a" translate="yes" xml:space="preserve">
          <source>Comprehensions generally provide a much more concise representation than using the equivalent functions from the &lt;code&gt;Enum&lt;/code&gt; and &lt;code&gt;Stream&lt;/code&gt; modules. Furthermore, comprehensions also allow multiple generators and filters to be given. Here is an example that receives a list of directories and gets the size of each file in those directories:</source>
          <target state="translated">内包表記は、通常、 &lt;code&gt;Enum&lt;/code&gt; および &lt;code&gt;Stream&lt;/code&gt; モジュールの同等の関数を使用するよりもはるかに簡潔な表現を提供します。さらに、理解力により、複数のジェネレータとフィルタを指定することもできます。次に、ディレクトリのリストを受け取り、それらのディレクトリ内の各ファイルのサイズを取得する例を示します。</target>
        </trans-unit>
        <trans-unit id="2a2326284774c69e81d063232192764ec8e7d87e" translate="yes" xml:space="preserve">
          <source>Computes the Jaro distance (similarity) between two strings.</source>
          <target state="translated">2つの文字列間のジャロ距離(類似度)を計算します。</target>
        </trans-unit>
        <trans-unit id="d58e9fd05f3363b68db438a625d16b10d703140f" translate="yes" xml:space="preserve">
          <source>Computes the bag distance between two strings.</source>
          <target state="translated">2本の弦の間のバッグの距離を計算します。</target>
        </trans-unit>
        <trans-unit id="7e5fa6baea52e5444c5ab52e6620ff1a5e2eaa64" translate="yes" xml:space="preserve">
          <source>Computes the modulo remainder of an integer division.</source>
          <target state="translated">整数除算の剰余を計算します。</target>
        </trans-unit>
        <trans-unit id="1695adb6bedb251b98b5d02b3e294f80f6533ad8" translate="yes" xml:space="preserve">
          <source>Computes the remainder of an integer division.</source>
          <target state="translated">整数の除算の余りを計算します。</target>
        </trans-unit>
        <trans-unit id="ca3e5ac4bfa4005f9e7c85636c6e23330025a032" translate="yes" xml:space="preserve">
          <source>Concatenates a list of aliases and returns a new alias only if the alias was already referenced.</source>
          <target state="translated">エイリアスのリストを連結し、そのエイリアスが既に参照されていた場合にのみ新しいエイリアスを返します。</target>
        </trans-unit>
        <trans-unit id="79fdba952b89833ad044a47f954b778d9ac3754b" translate="yes" xml:space="preserve">
          <source>Concatenates a list of aliases and returns a new alias.</source>
          <target state="translated">エイリアスのリストを連結し、新しいエイリアスを返します。</target>
        </trans-unit>
        <trans-unit id="7bfc55b10bbbaaa1172955e020d089c69f73a61a" translate="yes" xml:space="preserve">
          <source>Concatenates a list of documents returning a new document.</source>
          <target state="translated">新しい文書を返す文書のリストを連結します。</target>
        </trans-unit>
        <trans-unit id="5b0b906d9626f876d63bb926f568d768133479d8" translate="yes" xml:space="preserve">
          <source>Concatenates a proper list and a term, returning a list.</source>
          <target state="translated">適切なリストと項を連結し、リストを返します。</target>
        </trans-unit>
        <trans-unit id="602a2270158b7a64f1f9b30928698846da471ed5" translate="yes" xml:space="preserve">
          <source>Concatenates the enumerable on the &lt;code&gt;right&lt;/code&gt; with the enumerable on the &lt;code&gt;left&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;right&lt;/code&gt; の列挙可能オブジェクトを &lt;code&gt;left&lt;/code&gt; 列挙可能オブジェクトと連結します。</target>
        </trans-unit>
        <trans-unit id="17b31e6fe3e3ae89aaf0d1779930dec62c20d4ce" translate="yes" xml:space="preserve">
          <source>Concatenates two aliases and returns a new alias only if the alias was already referenced.</source>
          <target state="translated">2 つのエイリアスを連結し、既に参照されている場合にのみ新しいエイリアスを返します。</target>
        </trans-unit>
        <trans-unit id="386735a5ef2326d96732530103099d26861648c4" translate="yes" xml:space="preserve">
          <source>Concatenates two aliases and returns a new alias.</source>
          <target state="translated">2 つのエイリアスを連結し、新しいエイリアスを返します。</target>
        </trans-unit>
        <trans-unit id="d9fca663b0cde911b53f590809a91e7d824fbc80" translate="yes" xml:space="preserve">
          <source>Concatenates two binaries.</source>
          <target state="translated">2つのバイナリを連結します。</target>
        </trans-unit>
        <trans-unit id="0f2b5970a12dbb01ecd860bde29bb4c55faec263" translate="yes" xml:space="preserve">
          <source>Concatenates two document entities returning a new document.</source>
          <target state="translated">2 つの文書実体を連結して新しい文書を返します。</target>
        </trans-unit>
        <trans-unit id="f8bc4ede142b49230daa5c308a51253e61b3acb4" translate="yes" xml:space="preserve">
          <source>Conceal. Not widely supported.</source>
          <target state="translated">隠す。広くはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="464963b89dcc6466af50e87b1ef88a9571abb6de" translate="yes" xml:space="preserve">
          <source>Concurrency and distribution</source>
          <target state="translated">並行性と分配</target>
        </trans-unit>
        <trans-unit id="7cd453bb0f5341af9292ceae5a5c3162881bf52e" translate="yes" xml:space="preserve">
          <source>CondClauseError</source>
          <target state="translated">CondClauseError</target>
        </trans-unit>
        <trans-unit id="ee1067fabb817f815f6d1ba09137fd2a6703386f" translate="yes" xml:space="preserve">
          <source>CondClauseError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">CondClauseError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8851142da56fd885ce668a165b33fee7003e858d" translate="yes" xml:space="preserve">
          <source>Config</source>
          <target state="translated">Config</target>
        </trans-unit>
        <trans-unit id="be61fc18c63c243175cee5a20cbdc6209fe104d3" translate="yes" xml:space="preserve">
          <source>Config providers are typically used during releases to load external configuration while the system boots. This is done by starting the VM with the minimum amount of applications running, then invoking all of the providers, and then restarting the system. This requires a mutable configuration file on disk, as the results of the providers are written to the file system. For more information on runtime configuration, see &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt;&lt;code&gt;mix release&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">構成プロバイダーは通常、システムの起動中に外部構成をロードするためにリリース中に使用されます。これは、最小量のアプリケーションを実行してVMを起動し、すべてのプロバイダーを呼び出してから、システムを再起動することによって行われます。プロバイダーの結果はファイルシステムに書き込まれるため、これにはディスク上に変更可能な構成ファイルが必要です。ランタイム構成の詳細については、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Release.html&quot;&gt; &lt;code&gt;mix release&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5fcd3c95e9636c8e66396624d0366fb4e126a6fc" translate="yes" xml:space="preserve">
          <source>Config.Provider</source>
          <target state="translated">Config.Provider</target>
        </trans-unit>
        <trans-unit id="44f0cb9ea6de4ecc8ddcc1c6279200cfa4b1dd4c" translate="yes" xml:space="preserve">
          <source>Config.Provider &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">Config.Providerの&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9ada04c4b7a0b493079259a2091c99186d5d2a8d" translate="yes" xml:space="preserve">
          <source>Config.Reader</source>
          <target state="translated">Config.Reader</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="933619b0b6242cbc74cd30c08b880cf1aadc921f" translate="yes" xml:space="preserve">
          <source>Configuration and customization. Releases give developers fine grained control over system configuration and the VM flags used to start the system.</source>
          <target state="translated">設定とカスタマイズ。リリースにより、開発者はシステムの設定やシステムの起動に使用する VM フラグをきめ細かく制御できるようになりました。</target>
        </trans-unit>
        <trans-unit id="6d11d00d9a62190558bb928d4cffeb8d72a5cbfa" translate="yes" xml:space="preserve">
          <source>Configuration and releases</source>
          <target state="translated">設定とリリース</target>
        </trans-unit>
        <trans-unit id="304a1684e3b52f4fb102a5314a519b8e7696a2ea" translate="yes" xml:space="preserve">
          <source>Configuration files provide a mechanism for us to configure the environment of any application. Such configuration is done by the &lt;code&gt;config/config.exs&lt;/code&gt; file.</source>
          <target state="translated">構成ファイルは、アプリケーションの環境を構成するためのメカニズムを提供します。このような構成は、 &lt;code&gt;config/config.exs&lt;/code&gt; ファイルによって行われます。</target>
        </trans-unit>
        <trans-unit id="afb00b3a5bb013d5e19cf2138a2e20f7d4494b4e" translate="yes" xml:space="preserve">
          <source>Configuration for most built-in data types are supported: &lt;code&gt;:atom&lt;/code&gt;, &lt;code&gt;:string&lt;/code&gt;, &lt;code&gt;:binary&lt;/code&gt;, &lt;code&gt;:list&lt;/code&gt;, &lt;code&gt;:number&lt;/code&gt;, &lt;code&gt;:boolean&lt;/code&gt;, &lt;code&gt;:nil&lt;/code&gt;, etc. The default is:</source>
          <target state="translated">ほとんどの組み込みデータ型の構成がサポートされています &lt;code&gt;:atom&lt;/code&gt; 、 &lt;code&gt;:string&lt;/code&gt; 、 &lt;code&gt;:binary&lt;/code&gt; 、 &lt;code&gt;:list&lt;/code&gt; 、 &lt;code&gt;:number&lt;/code&gt; 、 &lt;code&gt;:boolean&lt;/code&gt; 、 &lt;code&gt;:nil&lt;/code&gt; など。デフォルトは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="35d5425d04246c4803ef5cf5e8d025d35dd3c648" translate="yes" xml:space="preserve">
          <source>Configures ExUnit.</source>
          <target state="translated">ExUnit を設定します。</target>
        </trans-unit>
        <trans-unit id="f86ca4f2497f02577bc94a87775d8f36d626720d" translate="yes" xml:space="preserve">
          <source>Configures IEx.</source>
          <target state="translated">IExを設定します。</target>
        </trans-unit>
        <trans-unit id="39aba670500b643a046792d3d15815451b7382dd" translate="yes" xml:space="preserve">
          <source>Configures the given &lt;code&gt;key&lt;/code&gt; for the given &lt;code&gt;root_key&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;root_key&lt;/code&gt; に指定された &lt;code&gt;key&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="dab905aea9ce47c3e8e30630f4f6fdec7eafa472" translate="yes" xml:space="preserve">
          <source>Configures the given &lt;code&gt;root_key&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;root_key&lt;/code&gt; を構成します。</target>
        </trans-unit>
        <trans-unit id="931f9f9842f89caae33a5520f0561b2c38a9e395" translate="yes" xml:space="preserve">
          <source>Configures the given backend.</source>
          <target state="translated">指定したバックエンドを設定します。</target>
        </trans-unit>
        <trans-unit id="f7ca95cd7d184c9f425b7a30f220923f9cfac8a1" translate="yes" xml:space="preserve">
          <source>Configures the logger.</source>
          <target state="translated">ロガーを設定します。</target>
        </trans-unit>
        <trans-unit id="2d88aa7d5d042401a88814d3d2e345c7830e2a8f" translate="yes" xml:space="preserve">
          <source>Configuring releases</source>
          <target state="translated">リリースの設定</target>
        </trans-unit>
        <trans-unit id="7297dda9d64e28b97aa3fde0b781b550726677f6" translate="yes" xml:space="preserve">
          <source>Configuring the shell</source>
          <target state="translated">シェルの設定</target>
        </trans-unit>
        <trans-unit id="480ea81ed58de6247a0cec11d6c975007208ce9e" translate="yes" xml:space="preserve">
          <source>Connecting an Elixir shell to a remote node without Elixir is &lt;strong&gt;not&lt;/strong&gt; supported.</source>
          <target state="translated">ElixirなしでElixirシェルをリモートノードに接続することはサポートされて&lt;strong&gt;いません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c0f664a4d1ec0a9ec3a687038c62cd4690e15c63" translate="yes" xml:space="preserve">
          <source>Consider a new application &lt;code&gt;:my_app&lt;/code&gt;. &lt;code&gt;:my_app&lt;/code&gt; contains a database engine which supports a pool of databases. The database engine needs to know the configuration for each of those databases, and that configuration is supplied by key-value pairs in environment of &lt;code&gt;:my_app&lt;/code&gt;.</source>
          <target state="translated">新しいアプリケーション &lt;code&gt;:my_app&lt;/code&gt; を考えてみましょう。 &lt;code&gt;:my_app&lt;/code&gt; には、データベースのプールをサポートするデータベースエンジンが含まれています。データベースエンジンは、これらの各データベースの構成を認識している必要があり、その構成は &lt;code&gt;:my_app&lt;/code&gt; の環境のキーと値のペアによって提供されます。</target>
        </trans-unit>
        <trans-unit id="d7f69e049d11cfea430a186ac01ffac1bca0cfc8" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
          <target state="translated">次のような例を考えてみてください。</target>
        </trans-unit>
        <trans-unit id="3d212d623893215a5c1ab44a4dc949acff16e8f9" translate="yes" xml:space="preserve">
          <source>Consider the implementation below:</source>
          <target state="translated">以下の実装を検討してみてください。</target>
        </trans-unit>
        <trans-unit id="7a7b310d2495e484fea1ff460e80d2fdad0204cf" translate="yes" xml:space="preserve">
          <source>Consider these two examples:</source>
          <target state="translated">この2つの例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="2b2d8a64936d851f0d73e6380decdfbb4b3fdb12" translate="yes" xml:space="preserve">
          <source>Consider using &lt;a href=&quot;task.supervisor#async_stream/6&quot;&gt;&lt;code&gt;Task.Supervisor.async_stream/6&lt;/code&gt;&lt;/a&gt; to start tasks under a supervisor. If you find yourself trapping exits to handle exits inside the async stream, consider using &lt;a href=&quot;task.supervisor#async_stream_nolink/6&quot;&gt;&lt;code&gt;Task.Supervisor.async_stream_nolink/6&lt;/code&gt;&lt;/a&gt; to start tasks that are not linked to the calling process.</source>
          <target state="translated">&lt;a href=&quot;task.supervisor#async_stream/6&quot;&gt; &lt;code&gt;Task.Supervisor.async_stream/6&lt;/code&gt; &lt;/a&gt;を使用して、スーパーバイザの下でタスクを開始することを検討してください。非同期ストリーム内の出口を処理するために出口をトラップしている場合は、&lt;a href=&quot;task.supervisor#async_stream_nolink/6&quot;&gt; &lt;code&gt;Task.Supervisor.async_stream_nolink/6&lt;/code&gt; &lt;/a&gt;を使用して、呼び出しプロセスにリンクされていないタスクを開始することを検討してください。</target>
        </trans-unit>
        <trans-unit id="6430b20394a2b43032f0df564046ae9e5ed61c04" translate="yes" xml:space="preserve">
          <source>Considers the next break as fit.</source>
          <target state="translated">次の休みをフィットと考える。</target>
        </trans-unit>
        <trans-unit id="39cbdd33812e96a59909005452966168ffe901bd" translate="yes" xml:space="preserve">
          <source>Console backend</source>
          <target state="translated">コンソールバックエンド</target>
        </trans-unit>
        <trans-unit id="81ff41187d9a55a0a0d410b37e2a03ec4014258e" translate="yes" xml:space="preserve">
          <source>Consolidation</source>
          <target state="translated">Consolidation</target>
        </trans-unit>
        <trans-unit id="781883259f97b814dbeb10bd2aa9654bde39c92f" translate="yes" xml:space="preserve">
          <source>Consolidation happens by changing the protocol &lt;code&gt;impl_for&lt;/code&gt; in the abstract format to have fast lookup rules. Usually the list of implementations to use during consolidation are retrieved with the help of &lt;a href=&quot;#extract_impls/2&quot;&gt;&lt;code&gt;extract_impls/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">統合は、抽象形式でプロトコル &lt;code&gt;impl_for&lt;/code&gt; を変更して、高速ルックアップルールを設定することで行われます。通常、統合中に使用する実装のリストは、&lt;a href=&quot;#extract_impls/2&quot;&gt; &lt;code&gt;extract_impls/2&lt;/code&gt; &lt;/a&gt;を使用して取得されます。</target>
        </trans-unit>
        <trans-unit id="ea5ee0077ba2637f156ee60a85375b364c21ab7b" translate="yes" xml:space="preserve">
          <source>Constructs such as &lt;code&gt;unless/2&lt;/code&gt;, &lt;code&gt;defmacro/2&lt;/code&gt;, &lt;code&gt;def/2&lt;/code&gt;, &lt;code&gt;defprotocol/2&lt;/code&gt;, and many others used throughout this getting started guide are implemented in pure Elixir, often as a macro. This means that the constructs being used to build the language can be used by developers to extend the language to the domains they are working on.</source>
          <target state="translated">以下のような構築 &lt;code&gt;unless/2&lt;/code&gt; 、 &lt;code&gt;defmacro/2&lt;/code&gt; 、 &lt;code&gt;def/2&lt;/code&gt; 、 &lt;code&gt;defprotocol/2&lt;/code&gt; 、およびこのスタートアップガイド全体で使用される他の多くは、多くの場合、マクロとして、純粋なエリクサーで実装されています。これは、言語の構築に使用されている構成体を使用して、開発者が作業中のドメインに言語を拡張できることを意味します。</target>
        </trans-unit>
        <trans-unit id="f06815eccc7951b7a3293862d553938e6057b7dd" translate="yes" xml:space="preserve">
          <source>Consult &lt;a href=&quot;https://hexdocs.pm/elixir/guards.html&quot;&gt;the full documentation for guards&lt;/a&gt; for more information about guards, how they are used, and what expressions are allowed in them.</source>
          <target state="translated">相談する&lt;a href=&quot;https://hexdocs.pm/elixir/guards.html&quot;&gt;警備員のための完全なドキュメント&lt;/a&gt;それらがどのように使用されるか、警備員の詳細については、どのような表現それらに許可されています。</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="1bbfd156f85e030d051094c906e097817e15b4d1" translate="yes" xml:space="preserve">
          <source>Continues execution of the current process.</source>
          <target state="translated">現在の処理を継続して実行します。</target>
        </trans-unit>
        <trans-unit id="9cf96af56061f48b77f2ca372e437a5cbfd34ccd" translate="yes" xml:space="preserve">
          <source>Controls an IO device process that wraps a string.</source>
          <target state="translated">文字列をラップするIOデバイスプロセスを制御します。</target>
        </trans-unit>
        <trans-unit id="511bc588c44b169481c4ab2f5fa4baa6ea94d293" translate="yes" xml:space="preserve">
          <source>Convenience functions for defining supervisor specifications.</source>
          <target state="translated">スーパーバイザーの仕様を定義するための便利な機能</target>
        </trans-unit>
        <trans-unit id="1896f8c1898ba69ed8398e4cd445925ae4014f8a" translate="yes" xml:space="preserve">
          <source>Convenience functions for working with atoms.</source>
          <target state="translated">原子を使った作業に便利な機能</target>
        </trans-unit>
        <trans-unit id="0dec42bbf61a109359c91148d0509bd563207899" translate="yes" xml:space="preserve">
          <source>Convenience to get the path relative to the current working directory.</source>
          <target state="translated">現在の作業ディレクトリからの相対パスを取得するのに便利です。</target>
        </trans-unit>
        <trans-unit id="9398c3d1709bffcf5ee58dc22ca7bba010067260" translate="yes" xml:space="preserve">
          <source>Conveniences for formatting data for logs.</source>
          <target state="translated">ログのデータをフォーマットするための便利な機能。</target>
        </trans-unit>
        <trans-unit id="ac8dec653917d71f3e1fde2e3774b6870ed89c0c" translate="yes" xml:space="preserve">
          <source>Conveniences for spawning and awaiting tasks.</source>
          <target state="translated">産卵やタスク待ちに便利。</target>
        </trans-unit>
        <trans-unit id="11a944db3534dab5708e3a3090c3d296632e9d28" translate="yes" xml:space="preserve">
          <source>Conveniences for working with macros.</source>
          <target state="translated">マクロを扱うのに便利です。</target>
        </trans-unit>
        <trans-unit id="58e5e941c629021c4446da1893e95f1f6661c6be" translate="yes" xml:space="preserve">
          <source>Conveniences for working with processes and the process dictionary.</source>
          <target state="translated">プロセスとプロセス辞書で作業するための便利な機能。</target>
        </trans-unit>
        <trans-unit id="2bb0c4c90fda78018fef946d3af1057c1a6f7f6f" translate="yes" xml:space="preserve">
          <source>Conveniently, Elixir allows developers to hide modules and functions from the documentation, by setting &lt;code&gt;@doc false&lt;/code&gt; to hide a particular function, or &lt;code&gt;@moduledoc false&lt;/code&gt; to hide the whole module. If a module is hidden, you may even document the functions in the module, but the module itself won't be listed in the documentation:</source>
          <target state="translated">好都合には、エリキシル剤は設定することにより、文書から非表示モジュール及び機能に開発を可能にする &lt;code&gt;@doc false&lt;/code&gt; 特定の機能を隠すため、又は &lt;code&gt;@moduledoc false&lt;/code&gt; モジュール全体を非表示にします。モジュールが非表示の場合、モジュール内の関数をドキュメント化することもできますが、モジュール自体はドキュメントにリストされません。</target>
        </trans-unit>
        <trans-unit id="734c112fb013ffbcab9477e1420f148661879dd3" translate="yes" xml:space="preserve">
          <source>Converts &lt;a href=&quot;#t:day_fraction/0&quot;&gt;&lt;code&gt;day_fraction/0&lt;/code&gt;&lt;/a&gt; to the Calendar's time format.</source>
          <target state="translated">変換し&lt;a href=&quot;#t:day_fraction/0&quot;&gt; &lt;code&gt;day_fraction/0&lt;/code&gt; &lt;/a&gt; Calendarの時刻形式に。</target>
        </trans-unit>
        <trans-unit id="c263dea4a8926f236fd6cf885211f470d0040f25" translate="yes" xml:space="preserve">
          <source>Converts &lt;a href=&quot;#t:iso_days/0&quot;&gt;&lt;code&gt;iso_days/0&lt;/code&gt;&lt;/a&gt; to the Calendar's datetime format.</source>
          <target state="translated">変換し&lt;a href=&quot;#t:iso_days/0&quot;&gt; &lt;code&gt;iso_days/0&lt;/code&gt; &lt;/a&gt;カレンダーの日時フォーマットへ。</target>
        </trans-unit>
        <trans-unit id="2c5350eabc852769f746830f4fbed1c2624db80b" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;enumerable&lt;/code&gt; to a list.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; をリストに変換します。</target>
        </trans-unit>
        <trans-unit id="a74487f27205428d15f0451bc0d11babd1e1ca88" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;map&lt;/code&gt; to a list.</source>
          <target state="translated">&lt;code&gt;map&lt;/code&gt; をリストに変換します。</target>
        </trans-unit>
        <trans-unit id="7f76385606d85b29a0ecab53642a1b53c3fb2af8" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;map_set&lt;/code&gt; to a list.</source>
          <target state="translated">&lt;code&gt;map_set&lt;/code&gt; をリストに変換します。</target>
        </trans-unit>
        <trans-unit id="b4037010ef8b8f68c53234550440e37ebcec11b4" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;term&lt;/code&gt; into an algebra document.</source>
          <target state="translated">&lt;code&gt;term&lt;/code&gt; を代数ドキュメントに変換します。</target>
        </trans-unit>
        <trans-unit id="2239811e8691306d987c87bb035ec0e285472797" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;term&lt;/code&gt; to a charlist.</source>
          <target state="translated">&lt;code&gt;term&lt;/code&gt; を文字リストに変換します。</target>
        </trans-unit>
        <trans-unit id="9282cdf0f052d8c88bcaf95a8ca087cb35fb7850" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;term&lt;/code&gt; to a string.</source>
          <target state="translated">&lt;code&gt;term&lt;/code&gt; を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="dcced501d6c07a24ff93c483518b8cc2d151f569" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;time&lt;/code&gt; from time unit &lt;code&gt;from_unit&lt;/code&gt; to time unit &lt;code&gt;to_unit&lt;/code&gt;.</source>
          <target state="translated">変換し &lt;code&gt;time&lt;/code&gt; の時間単位から &lt;code&gt;from_unit&lt;/code&gt; で時間単位に &lt;code&gt;to_unit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4b45c5892f77b48c1c88133c4a37df2e1f1e3aa7" translate="yes" xml:space="preserve">
          <source>Converts IO data into a binary</source>
          <target state="translated">IOデータをバイナリに変換します。</target>
        </trans-unit>
        <trans-unit id="1e80e49bd371488057e5eccaf5915dabe9cfd4b5" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; into &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="79f2b0486144a184da614f47d1d9aa5bd5c88b86" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="0e51af90c033ac5546b2570c303b594fb7ef386c" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;File.Stat&lt;/code&gt;&lt;/a&gt; struct to a &lt;code&gt;:file_info&lt;/code&gt; record.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;File.Stat&lt;/code&gt; &lt;/a&gt;構造体を &lt;code&gt;:file_info&lt;/code&gt; レコードに変換します。</target>
        </trans-unit>
        <trans-unit id="e71a4386d83ce453a946bfe6a893f35063f07d35" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; into &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="83028e5e704a1dc83086bc5f2000e97670618390" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; into a &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="2f9f5e5dfb5e1f309523442b6a2bb70c25fa00ad" translate="yes" xml:space="preserve">
          <source>Converts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; struct to an Erlang datetime tuple.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;構造体をErlang日時タプルに変換します。</target>
        </trans-unit>
        <trans-unit id="8719af2c72dba20a75e23d17b6bea44825e5d5d1" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;:file_info&lt;/code&gt; record into a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;File.Stat&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">変換 &lt;code&gt;:file_info&lt;/code&gt; にレコード&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;File.Stat&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c2727fee5122159fbc0af23661dab2ef0c9c2631" translate="yes" xml:space="preserve">
          <source>Converts a &lt;code&gt;struct&lt;/code&gt; to map.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; をマップに変換します。</target>
        </trans-unit>
        <trans-unit id="254bf8d1b281f322924363fb1a83ad9e2361d7e3" translate="yes" xml:space="preserve">
          <source>Converts a charlist to an atom.</source>
          <target state="translated">文字列リストをアトムに変換します。</target>
        </trans-unit>
        <trans-unit id="e68efbd247250deb02e7332f2af7b7b7a3149d56" translate="yes" xml:space="preserve">
          <source>Converts a charlist to an existing atom. Raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the atom does not exist.</source>
          <target state="translated">文字リストを既存のアトムに変換します。発生させます&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;原子が存在しない場合。</target>
        </trans-unit>
        <trans-unit id="0a5d5cd9b05db0c45b6438328ca412df82f34ace" translate="yes" xml:space="preserve">
          <source>Converts a day fraction to this Calendar's representation of time.</source>
          <target state="translated">1日の端数をこのカレンダーの時間表現に変換します。</target>
        </trans-unit>
        <trans-unit id="0e54c7b2dbe83fdf26bac6202e532577515f8965" translate="yes" xml:space="preserve">
          <source>Converts a given &lt;code&gt;datetime&lt;/code&gt; from one calendar to another.</source>
          <target state="translated">指定された &lt;code&gt;datetime&lt;/code&gt; を1つのカレンダーから別のカレンダーに変換します。</target>
        </trans-unit>
        <trans-unit id="d8dc043a8b2c88ab996fe2e13bf007f26909078f" translate="yes" xml:space="preserve">
          <source>Converts a list of integers representing code points, lists or strings into a charlist.</source>
          <target state="translated">コードポイント、リスト、文字列を表す整数のリストを文字列リストに変換します。</target>
        </trans-unit>
        <trans-unit id="6e5cc0b47448c4c5bcff4e00375ab0e486ccf2c4" translate="yes" xml:space="preserve">
          <source>Converts a list of integers representing code points, lists or strings into a string.</source>
          <target state="translated">コードポイント、リスト、文字列を表す整数のリストを文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="c987e9c958f5bc59b13e956f62b766e68b6fe8f4" translate="yes" xml:space="preserve">
          <source>Converts a list to a tuple.</source>
          <target state="translated">リストをタプルに変換します。</target>
        </trans-unit>
        <trans-unit id="02dde49cf9a6a46064141cae9a87851199d4ae33" translate="yes" xml:space="preserve">
          <source>Converts a string into a charlist.</source>
          <target state="translated">文字列を文字列リストに変換します。</target>
        </trans-unit>
        <trans-unit id="947ec7e9bf96de02e99903966169c97ef903b0be" translate="yes" xml:space="preserve">
          <source>Converts a string to an atom.</source>
          <target state="translated">文字列をアトムに変換します。</target>
        </trans-unit>
        <trans-unit id="780538ea266d284ab56b9dc3c29cf37ce27a4b0f" translate="yes" xml:space="preserve">
          <source>Converts a string to an existing atom.</source>
          <target state="translated">文字列を既存のアトムに変換します。</target>
        </trans-unit>
        <trans-unit id="b5a8ad6e165d7ed1c7615d02f03e2dbeea23252b" translate="yes" xml:space="preserve">
          <source>Converts a tuple to a list.</source>
          <target state="translated">タプルをリストに変換します。</target>
        </trans-unit>
        <trans-unit id="13453b8d1508b3203babeb1e62e12b28c32edc34" translate="yes" xml:space="preserve">
          <source>Converts all characters in &lt;code&gt;string&lt;/code&gt; to Unicode normalization form identified by &lt;code&gt;form&lt;/code&gt;.</source>
          <target state="translated">内のすべての文字を変換し &lt;code&gt;string&lt;/code&gt; で識別されるUnicode正規化フォームに &lt;code&gt;form&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9b6510ebfe5cd9b4636c09de47097a06fbbf94e" translate="yes" xml:space="preserve">
          <source>Converts all characters in the given string to lowercase according to &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 応じて、指定された文字列のすべての文字を小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="27176c2f820ec7f891716f0f78755c8187c887d6" translate="yes" xml:space="preserve">
          <source>Converts all characters in the given string to uppercase according to &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 応じて、指定された文字列のすべての文字を大文字に変換します。</target>
        </trans-unit>
        <trans-unit id="197e6c77a16aeec861dffc2a445548a230c5e211" translate="yes" xml:space="preserve">
          <source>Converts an Elixir term to an algebra document according to the &lt;a href=&quot;inspect&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">&lt;a href=&quot;inspect&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;プロトコルに従って、Elixir項を代数ドキュメントに変換します。</target>
        </trans-unit>
        <trans-unit id="ad1541b2455219564d77382ed7fe2e73581b2fa4" translate="yes" xml:space="preserve">
          <source>Converts an Erlang date tuple but raises for invalid dates.</source>
          <target state="translated">Erlangの日付タプルを変換しますが、無効な日付の場合は発生します。</target>
        </trans-unit>
        <trans-unit id="6237472326aa97d4d91dbe7ea3d8a7f40e943982" translate="yes" xml:space="preserve">
          <source>Converts an Erlang date tuple to a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">Erlangの日付タプルを&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;構造体に変換します。</target>
        </trans-unit>
        <trans-unit id="0dc925bdd2a6249b07fa9efae38dfa76258fa019" translate="yes" xml:space="preserve">
          <source>Converts an Erlang datetime tuple to a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">Erlangの日時タプルを&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;構造体に変換します。</target>
        </trans-unit>
        <trans-unit id="8dd9ae9ebd84083585be7487d706b7eaa52e69ec" translate="yes" xml:space="preserve">
          <source>Converts an Erlang time tuple to a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">Erlang時間タプルを&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;構造体に変換します。</target>
        </trans-unit>
        <trans-unit id="d582318b9473f2734864958a0821294f01f1b66d" translate="yes" xml:space="preserve">
          <source>Converts an atom to a charlist.</source>
          <target state="translated">アトムを文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="7fa16e00cee3fcccbfdea7311d60ada14e4f260e" translate="yes" xml:space="preserve">
          <source>Converts an atom to a string.</source>
          <target state="translated">原子を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="e841d0667d5d6ef74ab9e5853d985c4cea6b18cc" translate="yes" xml:space="preserve">
          <source>Converts chardata into a string.</source>
          <target state="translated">chardataを文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="a145202abf06e7ca92dcbfc3594ac19f06cf61b5" translate="yes" xml:space="preserve">
          <source>Converts given &lt;code&gt;time&lt;/code&gt; to a different calendar.</source>
          <target state="translated">指定された &lt;code&gt;time&lt;/code&gt; を別のカレンダーに変換します。</target>
        </trans-unit>
        <trans-unit id="60bf168f1407388298d9b210e72535da75765532" translate="yes" xml:space="preserve">
          <source>Converts given &lt;code&gt;time&lt;/code&gt; to an Erlang time tuple.</source>
          <target state="translated">指定された &lt;code&gt;time&lt;/code&gt; をErlang時間タプルに変換します。</target>
        </trans-unit>
        <trans-unit id="3ac0da74aab610cfdee319e397f52884c7cca511" translate="yes" xml:space="preserve">
          <source>Converts the &lt;a href=&quot;calendar#t:iso_days/0&quot;&gt;&lt;code&gt;Calendar.iso_days/0&lt;/code&gt;&lt;/a&gt; format to the datetime format specified by this calendar.</source>
          <target state="translated">変換&lt;a href=&quot;calendar#t:iso_days/0&quot;&gt; &lt;code&gt;Calendar.iso_days/0&lt;/code&gt; &lt;/a&gt;このカレンダーで指定された日時形式にフォーマット。</target>
        </trans-unit>
        <trans-unit id="4b6111172b0ba4063d262291c6c3b2b09eac09ae" translate="yes" xml:space="preserve">
          <source>Converts the IO &lt;code&gt;device&lt;/code&gt; into an &lt;a href=&quot;io.stream&quot;&gt;&lt;code&gt;IO.Stream&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">IO &lt;code&gt;device&lt;/code&gt; を&lt;a href=&quot;io.stream&quot;&gt; &lt;code&gt;IO.Stream&lt;/code&gt; に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="4e89484d19f8b391081fcfbf11774ccd7e0029f8" translate="yes" xml:space="preserve">
          <source>Converts the IO &lt;code&gt;device&lt;/code&gt; into an &lt;a href=&quot;io.stream&quot;&gt;&lt;code&gt;IO.Stream&lt;/code&gt;&lt;/a&gt;. The operation is Unicode unsafe.</source>
          <target state="translated">IO &lt;code&gt;device&lt;/code&gt; を&lt;a href=&quot;io.stream&quot;&gt; &lt;code&gt;IO.Stream&lt;/code&gt; に&lt;/a&gt;変換します。この操作はUnicodeで安全ではありません。</target>
        </trans-unit>
        <trans-unit id="c8e6e16de8acf03faa5a8b241195a52aa4b1e29e" translate="yes" xml:space="preserve">
          <source>Converts the argument to a string according to the &lt;a href=&quot;string.chars&quot;&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">&lt;a href=&quot;string.chars&quot;&gt; &lt;code&gt;String.Chars&lt;/code&gt; &lt;/a&gt;プロトコルに従って、引数を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="5b8fbdf0a0fa574e14e63c37f6a8ef88b3232cef" translate="yes" xml:space="preserve">
          <source>Converts the date into a string according to the calendar.</source>
          <target state="translated">カレンダーに従って日付を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="227b186ae0acc44776906432dd066fbe4fde8846" translate="yes" xml:space="preserve">
          <source>Converts the datetime (with time zone) into a string according to the calendar.</source>
          <target state="translated">日時(タイムゾーンを含む)をカレンダーに従って文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="92e2c5a23650305fee01a1fcd9a57ab26fc28d72" translate="yes" xml:space="preserve">
          <source>Converts the datetime (with time zone) into a string.</source>
          <target state="translated">日時(タイムゾーンを含む)を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="e1625d9cdfd25143785b1fa11bbd89706012c4af" translate="yes" xml:space="preserve">
          <source>Converts the datetime (without time zone) into a string according to the calendar.</source>
          <target state="translated">日付時刻(タイムゾーンなし)をカレンダーに従って文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="717185aa13daa78bdde43f04c886115fa0e73941" translate="yes" xml:space="preserve">
          <source>Converts the datetime (without time zone) into a string.</source>
          <target state="translated">日付時刻(タイムゾーンなし)を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="a2abe353af0045108936797a9195af1772dfd552" translate="yes" xml:space="preserve">
          <source>Converts the first character in the given string to uppercase and the remainder to lowercase according to &lt;code&gt;mode&lt;/code&gt;.</source>
          <target state="translated">指定された文字列の最初の文字を &lt;code&gt;mode&lt;/code&gt; 応じて大文字に変換し、残りを小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="d4564c56ea18e08e51a07042222eb171cff78504" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="21e264a9524cd6e7dc80e416d4e36f478333a439" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;date&lt;/code&gt; from its calendar to the given &lt;code&gt;calendar&lt;/code&gt;.</source>
          <target state="translated">与えられた変換し &lt;code&gt;date&lt;/code&gt; のカレンダーからは、与えられたに &lt;code&gt;calendar&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="030c0774d22f233ba42fb12f10a1a70296d43037" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;date&lt;/code&gt; to &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601:2004&lt;/a&gt;.</source>
          <target state="translated">指定された &lt;code&gt;date&lt;/code&gt; を&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601：2004に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="f6c9bebf617d290f961736311cefb7f89e429aa0" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;date&lt;/code&gt; to an Erlang date tuple.</source>
          <target state="translated">指定された &lt;code&gt;date&lt;/code&gt; をErlangの日付タプルに変換します。</target>
        </trans-unit>
        <trans-unit id="90042dc24d2d96d4b3dd9984c599920efaec9579" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;datetime&lt;/code&gt; into a &lt;a href=&quot;naivedatetime&quot;&gt;&lt;code&gt;NaiveDateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定された &lt;code&gt;datetime&lt;/code&gt; を&lt;a href=&quot;naivedatetime&quot;&gt; &lt;code&gt;NaiveDateTime&lt;/code&gt; に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="38607d070d5886f0af38c1f08b0fc3fd52cfa931" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;datetime&lt;/code&gt; to Unix time.</source>
          <target state="translated">指定された &lt;code&gt;datetime&lt;/code&gt; をUnix時間に変換します。</target>
        </trans-unit>
        <trans-unit id="e7713cd000f48f06c03b261c1ce2b54eeac3472c" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;datetime&lt;/code&gt; to a string according to its calendar.</source>
          <target state="translated">指定された &lt;code&gt;datetime&lt;/code&gt; をカレンダーに従って文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="023233441b992e80b392f70911a5906ce4e0cba9" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;naive_datetime&lt;/code&gt; from one calendar to another.</source>
          <target state="translated">指定された &lt;code&gt;naive_datetime&lt;/code&gt; を1つのカレンダーから別のカレンダーに変換します。</target>
        </trans-unit>
        <trans-unit id="8ec6376d2a13e24a0141c11d23138342f5fbc8b0" translate="yes" xml:space="preserve">
          <source>Converts the given &lt;code&gt;time&lt;/code&gt; to a string.</source>
          <target state="translated">指定された &lt;code&gt;time&lt;/code&gt; を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="5e23f4682b8833610adb0fd47c62bcd1fdcc4cd9" translate="yes" xml:space="preserve">
          <source>Converts the given Unix time to &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたUnix時間を&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="612b4c3348db1df419a84869d47308c8a6a2a9d6" translate="yes" xml:space="preserve">
          <source>Converts the given atom or binary to underscore format.</source>
          <target state="translated">指定された原子またはバイナリをアンダースコア形式に変換します。</target>
        </trans-unit>
        <trans-unit id="e4c120019c6ce0243ca3ed4ef026a01e5af3d50a" translate="yes" xml:space="preserve">
          <source>Converts the given date into a string.</source>
          <target state="translated">指定した日付を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="748850d792b313b153351dc3fad876e09a4a6167" translate="yes" xml:space="preserve">
          <source>Converts the given date to a string according to its calendar.</source>
          <target state="translated">指定された日付を、そのカレンダーに従って文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="580ca61be38d506e1fbabba1567234376f9fb67a" translate="yes" xml:space="preserve">
          <source>Converts the given datetime (without time zone) into the &lt;a href=&quot;#t:iso_days/0&quot;&gt;&lt;code&gt;iso_days/0&lt;/code&gt;&lt;/a&gt; format.</source>
          <target state="translated">指定された日時（タイムゾーンなし）を&lt;a href=&quot;#t:iso_days/0&quot;&gt; &lt;code&gt;iso_days/0&lt;/code&gt; &lt;/a&gt;形式に変換します。</target>
        </trans-unit>
        <trans-unit id="4ac5ca644110fb9234b585f20da953fc40183d3a" translate="yes" xml:space="preserve">
          <source>Converts the given datetime to &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601:2004&lt;/a&gt; format.</source>
          <target state="translated">指定された日時を&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601：2004&lt;/a&gt;形式に変換します。</target>
        </trans-unit>
        <trans-unit id="98e2af74ab4f811ebccb7dfd38e2983ea26bd505" translate="yes" xml:space="preserve">
          <source>Converts the given expression AST to a string.</source>
          <target state="translated">与えられた式ASTを文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="1a63c1aa4ca02493d9e3dc44717b50d2c6cdc341" translate="yes" xml:space="preserve">
          <source>Converts the given naive datetime to &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601:2004&lt;/a&gt;.</source>
          <target state="translated">指定された単純な日時を&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601：2004に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="228c1561eef12bb4d3d95a29c1441ec5a4be11f6" translate="yes" xml:space="preserve">
          <source>Converts the given naive datetime to a string according to its calendar.</source>
          <target state="translated">与えられた素朴な日時を、そのカレンダーに従って文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="c9286e3dd5d56cf4207fbf7300a7241dc950a591" translate="yes" xml:space="preserve">
          <source>Converts the given path to an absolute one. Unlike &lt;a href=&quot;#expand/1&quot;&gt;&lt;code&gt;expand/1&lt;/code&gt;&lt;/a&gt;, no attempt is made to resolve &lt;code&gt;..&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;.</source>
          <target state="translated">指定されたパスを絶対パスに変換します。&lt;a href=&quot;#expand/1&quot;&gt; &lt;code&gt;expand/1&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;..&lt;/code&gt; 、 &lt;code&gt;.&lt;/code&gt; を解決する試みは行われません。または &lt;code&gt;~&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f7f5abb6efabe13737c9ca4626a86c8733407bd" translate="yes" xml:space="preserve">
          <source>Converts the given string to CamelCase format.</source>
          <target state="translated">与えられた文字列をキャメルケース形式に変換します。</target>
        </trans-unit>
        <trans-unit id="309d33e35d53f2e58eb95fc785af528ca7744f6d" translate="yes" xml:space="preserve">
          <source>Converts the given string to its quoted form.</source>
          <target state="translated">与えられた文字列を引用符で囲まれた形式に変換します。</target>
        </trans-unit>
        <trans-unit id="8bc0590b1dbce230536e4466653afeda26e0e2ec" translate="yes" xml:space="preserve">
          <source>Converts the given term to a charlist according to the &lt;a href=&quot;list.chars&quot;&gt;&lt;code&gt;List.Chars&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">&lt;a href=&quot;list.chars&quot;&gt; &lt;code&gt;List.Chars&lt;/code&gt; &lt;/a&gt;プロトコルに従って、指定された用語を文字リストに変換します。</target>
        </trans-unit>
        <trans-unit id="c044a36802721d40a5b50ee9d1fca02b69813080" translate="yes" xml:space="preserve">
          <source>Converts the given time into a string.</source>
          <target state="translated">与えられた時間を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="babee3dcd26752eb23edd13cb79aa04dd96a76e9" translate="yes" xml:space="preserve">
          <source>Converts the given time to &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601:2004&lt;/a&gt;.</source>
          <target state="translated">指定された時間を&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601&quot;&gt;ISO 8601：2004に&lt;/a&gt;変換します。</target>
        </trans-unit>
        <trans-unit id="8c7a03767b5d1566df3d146e4fbaef558f6a1090" translate="yes" xml:space="preserve">
          <source>Converts the given time to the &lt;a href=&quot;#t:day_fraction/0&quot;&gt;&lt;code&gt;day_fraction/0&lt;/code&gt;&lt;/a&gt; format.</source>
          <target state="translated">指定された時間を&lt;a href=&quot;#t:day_fraction/0&quot;&gt; &lt;code&gt;day_fraction/0&lt;/code&gt; &lt;/a&gt;形式に変換します。</target>
        </trans-unit>
        <trans-unit id="8bef9301d9edb5e35de1e260e607e1823667132d" translate="yes" xml:space="preserve">
          <source>Converts the path to an absolute one and expands any &lt;code&gt;.&lt;/code&gt; and &lt;code&gt;..&lt;/code&gt; characters and a leading &lt;code&gt;~&lt;/code&gt;.</source>
          <target state="translated">パスを絶対パスに変換し、任意のパスを展開します &lt;code&gt;.&lt;/code&gt; および &lt;code&gt;..&lt;/code&gt; 文字と先頭の &lt;code&gt;~&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23415e661cc9d41a024959347984730e2601bed2" translate="yes" xml:space="preserve">
          <source>Converts the time into a string according to the calendar.</source>
          <target state="translated">カレンダーに従って時刻を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="0a49d0c8f3285f335233220c5993daacbad3d3a5" translate="yes" xml:space="preserve">
          <source>Copies the contents in &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;destination&lt;/code&gt; recursively, maintaining the source directory structure and modes.</source>
          <target state="translated">コピー内のコンテンツ &lt;code&gt;source&lt;/code&gt; へ &lt;code&gt;destination&lt;/code&gt; ソースディレクトリ構造およびモードを維持する再帰的に、。</target>
        </trans-unit>
        <trans-unit id="abf53458642b38d338f60c6e1bf1d5064dfd444e" translate="yes" xml:space="preserve">
          <source>Copies the contents in &lt;code&gt;source_file&lt;/code&gt; to &lt;code&gt;destination_file&lt;/code&gt; preserving its modes.</source>
          <target state="translated">モードを保持したまま、 &lt;code&gt;source_file&lt;/code&gt; の内容を &lt;code&gt;destination_file&lt;/code&gt; にコピーします。</target>
        </trans-unit>
        <trans-unit id="e3e9a52265052fb7c4cbfaaee0f1c813d805b775" translate="yes" xml:space="preserve">
          <source>Copies the contents of &lt;code&gt;source&lt;/code&gt; to &lt;code&gt;destination&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; のコンテンツを &lt;code&gt;destination&lt;/code&gt; コピーします。</target>
        </trans-unit>
        <trans-unit id="fb042f0b0cf7bbae523e4db50401acd89b538c94" translate="yes" xml:space="preserve">
          <source>Copies the given spec as a callback.</source>
          <target state="translated">与えられた仕様をコールバックとしてコピーします。</target>
        </trans-unit>
        <trans-unit id="5bd5c22751074967a6095132bfee44e6a2f51436" translate="yes" xml:space="preserve">
          <source>Count the code points in each string asynchronously, then add the counts together using reduce.</source>
          <target state="translated">各文字列のコードポイントを非同期にカウントし、reduceを使ってカウントを加算します。</target>
        </trans-unit>
        <trans-unit id="80e13549b47a4dfc6e898a282920091b209c78be" translate="yes" xml:space="preserve">
          <source>Coverage</source>
          <target state="translated">Coverage</target>
        </trans-unit>
        <trans-unit id="028ea82f8e6a71263262972962b3eb339200a07d" translate="yes" xml:space="preserve">
          <source>Create a file at &lt;code&gt;lib/kv/router.ex&lt;/code&gt; with the following contents:</source>
          <target state="translated">&lt;code&gt;lib/kv/router.ex&lt;/code&gt; に次の内容のファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="1ef2cd8271ebb73d84add4da7d468bc9403cf8d4" translate="yes" xml:space="preserve">
          <source>Create a file at &lt;code&gt;test/kv/bucket_test.exs&lt;/code&gt; (remember the &lt;code&gt;.exs&lt;/code&gt; extension) with the following:</source>
          <target state="translated">&lt;code&gt;test/kv/bucket_test.exs&lt;/code&gt; （ &lt;code&gt;.exs&lt;/code&gt; 拡張子を忘れないでください）に次のファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="a8070c19ec35f828badfb0971876a3836aa01640" translate="yes" xml:space="preserve">
          <source>Create a new file at &lt;code&gt;lib/kv/registry.ex&lt;/code&gt; with the following contents:</source>
          <target state="translated">&lt;code&gt;lib/kv/registry.ex&lt;/code&gt; に次の内容で新しいファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="4d096b85c273e9bc8931277d2ffdc25ab305cfa5" translate="yes" xml:space="preserve">
          <source>Creates a PID from &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; からPIDを作成します。</target>
        </trans-unit>
        <trans-unit id="17c20052fb303436bdb11d8899b481f14df4590c" translate="yes" xml:space="preserve">
          <source>Creates a PID with 3 non-negative integers passed as arguments to the function.</source>
          <target state="translated">関数に引数として渡された3つの非負の整数を持つPIDを作成します。</target>
        </trans-unit>
        <trans-unit id="4ccd0821086d4ce314a99c2b1ec5d27e4161dbd2" translate="yes" xml:space="preserve">
          <source>Creates a Port from &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; からポートを作成します。</target>
        </trans-unit>
        <trans-unit id="95deb48dcab4fa865482dbf5af752daa124b8bc8" translate="yes" xml:space="preserve">
          <source>Creates a Port from two non-negative integers.</source>
          <target state="translated">2つの非負の整数からポートを作成します。</target>
        </trans-unit>
        <trans-unit id="65524decb6cf29f2e8ddd1d1ebc67371ef0050b6" translate="yes" xml:space="preserve">
          <source>Creates a Reference from &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; から参照を作成します。</target>
        </trans-unit>
        <trans-unit id="80e84c042a84564fb45d3e4ea04bdde0d79343e7" translate="yes" xml:space="preserve">
          <source>Creates a Reference from its 4 non-negative integers components.</source>
          <target state="translated">4つの非負の整数成分から参照を作成します。</target>
        </trans-unit>
        <trans-unit id="72a773275c1891d62c509356c702ed500fd44357" translate="yes" xml:space="preserve">
          <source>Creates a document represented by string.</source>
          <target state="translated">文字列で表される文書を作成します。</target>
        </trans-unit>
        <trans-unit id="a25ffa072c9b4497ffa77caddb84e10a12c4fece" translate="yes" xml:space="preserve">
          <source>Creates a hard link &lt;code&gt;new&lt;/code&gt; to the file &lt;code&gt;existing&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;existing&lt;/code&gt; のファイルに &lt;code&gt;new&lt;/code&gt; ハードリンクを作成します。</target>
        </trans-unit>
        <trans-unit id="498fc9088eefd0b5d1f1097ae8face4e13b2235a" translate="yes" xml:space="preserve">
          <source>Creates a keyword list from an enumerable via the transformation function.</source>
          <target state="translated">変換関数を使用して列挙可能ファイルからキーワードリストを作成します。</target>
        </trans-unit>
        <trans-unit id="0cf02892cb76f3bfd617a2b9b66aa2c84f3221a2" translate="yes" xml:space="preserve">
          <source>Creates a keyword list from an enumerable.</source>
          <target state="translated">列挙可能なものからキーワードリストを作成します。</target>
        </trans-unit>
        <trans-unit id="484073e0a88950e889b7cb4cdaaff39cb41a7044" translate="yes" xml:space="preserve">
          <source>Creates a link between the calling process and the given item (process or port).</source>
          <target state="translated">呼び出し元のプロセスと指定された項目(プロセスまたはポート)との間にリンクを作成します。</target>
        </trans-unit>
        <trans-unit id="3845ba5590ad3018c23c28e5c890fa7cb6ca6f20" translate="yes" xml:space="preserve">
          <source>Creates a map from an &lt;code&gt;enumerable&lt;/code&gt; via the given transformation function.</source>
          <target state="translated">指定された変換関数を介して、 &lt;code&gt;enumerable&lt;/code&gt; からマップを作成します。</target>
        </trans-unit>
        <trans-unit id="1f569ea7402f94a429015887b7617e16fc743562" translate="yes" xml:space="preserve">
          <source>Creates a map from an &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; からマップを作成します。</target>
        </trans-unit>
        <trans-unit id="ce89e48193f46f044fa2d633cfe5156548be0642" translate="yes" xml:space="preserve">
          <source>Creates a map.</source>
          <target state="translated">マップを作成します。</target>
        </trans-unit>
        <trans-unit id="bca0cb06c3c10839d539f0c9df1de4a58a5af887" translate="yes" xml:space="preserve">
          <source>Creates a module with the given name and defined by the given quoted expressions.</source>
          <target state="translated">指定された名前で、指定された引用符で囲まれた式で定義されたモジュールを作成します。</target>
        </trans-unit>
        <trans-unit id="f6fb16ff7d235494c11327d98497f4cf281e95fe" translate="yes" xml:space="preserve">
          <source>Creates a new empty dict.</source>
          <target state="translated">新しい空のdictを作成します。</target>
        </trans-unit>
        <trans-unit id="1c9315ba3d69260c14b757669db279c4b74f54d8" translate="yes" xml:space="preserve">
          <source>Creates a new range.</source>
          <target state="translated">新しい範囲を作成します。</target>
        </trans-unit>
        <trans-unit id="a2eba7b5cc42b2afd7e58fcb27cbf5d6f7a5f7b2" translate="yes" xml:space="preserve">
          <source>Creates a new tuple.</source>
          <target state="translated">新しいタプルを作成します。</target>
        </trans-unit>
        <trans-unit id="7d7a85ef1ed1803d92c9416ace3552ee52d3a318" translate="yes" xml:space="preserve">
          <source>Creates a set from an enumerable via the transformation function.</source>
          <target state="translated">変換関数を使用して列挙可能な要素から集合を作成します。</target>
        </trans-unit>
        <trans-unit id="c912e955c1e13f472af8b11a6e720fa581a82ea3" translate="yes" xml:space="preserve">
          <source>Creates a set from an enumerable.</source>
          <target state="translated">列挙可能なものからセットを作成します。</target>
        </trans-unit>
        <trans-unit id="92c9b57f1e2cecc049ffa0a17491ad60c9aea49d" translate="yes" xml:space="preserve">
          <source>Creates a stream that applies the given function to each element, emits the result and uses the same result as the accumulator for the next computation. Uses the first element in the enumerable as the starting value.</source>
          <target state="translated">与えられた関数を各要素に適用し、結果を出力し、同じ結果を次の計算にアキュムレータとして使用するストリームを作成します。列挙可能な要素の最初の要素を開始値として使用します。</target>
        </trans-unit>
        <trans-unit id="3febf59f90e67bb54f793ba91dfddfb75ca065cb" translate="yes" xml:space="preserve">
          <source>Creates a stream that applies the given function to each element, emits the result and uses the same result as the accumulator for the next computation. Uses the given &lt;code&gt;acc&lt;/code&gt; as the starting value.</source>
          <target state="translated">指定された関数を各要素に適用するストリームを作成し、結果を発行し、次の計算でアキュムレータと同じ結果を使用します。指定された &lt;code&gt;acc&lt;/code&gt; を開始値として使用します。</target>
        </trans-unit>
        <trans-unit id="368eb7731010419d3d1b8a5fa0a96992f65548c6" translate="yes" xml:space="preserve">
          <source>Creates a stream that cycles through the given enumerable, infinitely.</source>
          <target state="translated">与えられた列挙可能な項目を無限に循環させるストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="09a0edafbe5af88cdea45c406f8cf75648a29039" translate="yes" xml:space="preserve">
          <source>Creates a stream that drops every &lt;code&gt;nth&lt;/code&gt; element from the enumerable.</source>
          <target state="translated">列挙可能な要素から &lt;code&gt;nth&lt;/code&gt; ごとの要素を削除するストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="a65e224893927d60f5f1aea1df74c6d4636b9d19" translate="yes" xml:space="preserve">
          <source>Creates a stream that emits a single value after &lt;code&gt;n&lt;/code&gt; milliseconds.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; ミリ秒後に単一の値を出力するストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="e7bf644491bc4caaaa2f9796f5b0a4de1a1168a3" translate="yes" xml:space="preserve">
          <source>Creates a stream that emits a value after the given period &lt;code&gt;n&lt;/code&gt; in milliseconds.</source>
          <target state="translated">ミリ秒単位の指定された期間 &lt;code&gt;n&lt;/code&gt; の後に値を発行するストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="6b1bf40efcd55deb62653b37917ef53710fe8a67" translate="yes" xml:space="preserve">
          <source>Creates a stream that enumerates each enumerable in an enumerable.</source>
          <target state="translated">列挙可能な各列挙子を列挙するストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="1b7ed8a49c2a04606f29f4e01e9a43aba6e74367" translate="yes" xml:space="preserve">
          <source>Creates a stream that enumerates the first argument, followed by the second.</source>
          <target state="translated">最初の引数を列挙し、それに続く2番目の引数を列挙するストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="5de27bcf3f438e8e62f7ff655930f9a342d628f0" translate="yes" xml:space="preserve">
          <source>Creates a stream that filters elements according to the given function on enumeration.</source>
          <target state="translated">列挙時に指定された関数に従って要素をフィルタリングするストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="a292d4224debffe065f234930161932a5927780b" translate="yes" xml:space="preserve">
          <source>Creates a stream that only emits elements if the result of calling &lt;code&gt;fun&lt;/code&gt; on the element is different from the (stored) result of calling &lt;code&gt;fun&lt;/code&gt; on the last emitted element.</source>
          <target state="translated">要素に対して &lt;code&gt;fun&lt;/code&gt; を呼び出した結果が、最後に放出された要素に対して &lt;code&gt;fun&lt;/code&gt; を呼び出した（格納された）結果と異なる場合にのみ、要素を放出するストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="58a5512f2444ff6976377bbee4eb5372d54fcd5c" translate="yes" xml:space="preserve">
          <source>Creates a stream that only emits elements if they are different from the last emitted element.</source>
          <target state="translated">最後に放出された要素と異なる要素のみを放出するストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="962425bd297f3b883238978c7ce6a85a752c07fc" translate="yes" xml:space="preserve">
          <source>Creates a stream that only emits elements if they are unique, by removing the elements for which function &lt;code&gt;fun&lt;/code&gt; returned duplicate elements.</source>
          <target state="translated">関数 &lt;code&gt;fun&lt;/code&gt; が重複した要素を返した要素を削除することにより、要素が一意の場合にのみ要素を放出するストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="cdde751cd26237ff05d16e7de6b337007018fc9a" translate="yes" xml:space="preserve">
          <source>Creates a stream that only emits elements if they are unique.</source>
          <target state="translated">要素が一意である場合にのみ排出されるストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="32be0a0b96ea6c99b90acb3b387e407fab509a1f" translate="yes" xml:space="preserve">
          <source>Creates a stream that takes every &lt;code&gt;nth&lt;/code&gt; element from the enumerable.</source>
          <target state="translated">enumerableから &lt;code&gt;nth&lt;/code&gt; ごとの要素を取得するストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="018a830e30f48f2abb4f6e375d5c3596f09ae1a1" translate="yes" xml:space="preserve">
          <source>Creates a stream that will apply the given function on enumeration.</source>
          <target state="translated">指定した関数を列挙に適用するストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="52a5b372e2b712a7fcefd3796ad7bb8aa811e396" translate="yes" xml:space="preserve">
          <source>Creates a stream that will apply the given function on every &lt;code&gt;nth&lt;/code&gt; element from the enumerable.</source>
          <target state="translated">enumerableから &lt;code&gt;nth&lt;/code&gt; ごとの要素に指定された関数を適用するストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="a1c7db814b0f2d86987998b90fdbe81b3fe20363" translate="yes" xml:space="preserve">
          <source>Creates a stream that will reject elements according to the given function on enumeration.</source>
          <target state="translated">列挙時に与えられた関数に従って要素を拒否するストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="d4e101ae0e59e353e2c11459f9cd83b9fb41375b" translate="yes" xml:space="preserve">
          <source>Creates a stream where each element in the enumerable will be wrapped in a tuple alongside its index.</source>
          <target state="translated">列挙可能要素の各要素がインデックスと一緒にタプルで包まれるようなストリームを作成します。</target>
        </trans-unit>
        <trans-unit id="794b74194468fc9dd669423522605922875647a9" translate="yes" xml:space="preserve">
          <source>Creates a symbolic link &lt;code&gt;new&lt;/code&gt; to the file or directory &lt;code&gt;existing&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;existing&lt;/code&gt; ファイルまたはディレクトリに &lt;code&gt;new&lt;/code&gt; シンボリックリンクを作成します。</target>
        </trans-unit>
        <trans-unit id="37d7b6cf67d4f7ee7f942e6b2de56067571c402e" translate="yes" xml:space="preserve">
          <source>Creates a tuple of &lt;code&gt;size&lt;/code&gt; containing the given &lt;code&gt;data&lt;/code&gt; at every position.</source>
          <target state="translated">すべての位置に指定された &lt;code&gt;data&lt;/code&gt; を含む &lt;code&gt;size&lt;/code&gt; タプルを作成します。</target>
        </trans-unit>
        <trans-unit id="c12cdd291771a6531cab586dd7713827a9512c63" translate="yes" xml:space="preserve">
          <source>Creates a tuple.</source>
          <target state="translated">タプルを作成します。</target>
        </trans-unit>
        <trans-unit id="981204be793902bce796c0cf3f7b3ba3f28ef48b" translate="yes" xml:space="preserve">
          <source>Creates an IO device.</source>
          <target state="translated">IOデバイスを作成します。</target>
        </trans-unit>
        <trans-unit id="0c34079208451017d540c9fb615f1989d707408b" translate="yes" xml:space="preserve">
          <source>Creates and updates structs.</source>
          <target state="translated">構造体を作成し、更新します。</target>
        </trans-unit>
        <trans-unit id="4b73576aa815a8d50bb5014bba09ef6ac2a8dadd" translate="yes" xml:space="preserve">
          <source>Creating Streams</source>
          <target state="translated">ストリームの作成</target>
        </trans-unit>
        <trans-unit id="9bf07eaecf55e49059496beb7aa95c4062a592c9" translate="yes" xml:space="preserve">
          <source>Creating a supervisor is not much different from creating a GenServer. We are going to define a module named &lt;code&gt;KV.Supervisor&lt;/code&gt;, which will use the Supervisor behaviour, inside the &lt;code&gt;lib/kv/supervisor.ex&lt;/code&gt; file:</source>
          <target state="translated">スーパーバイザの作成は、GenServerの作成とそれほど変わりません。 &lt;code&gt;lib/kv/supervisor.ex&lt;/code&gt; ファイル内に、スーパーバイザーの動作を使用する &lt;code&gt;KV.Supervisor&lt;/code&gt; という名前のモジュールを定義します。</target>
        </trans-unit>
        <trans-unit id="89584c30004088bac7c1dae0caca5ec122b003e7" translate="yes" xml:space="preserve">
          <source>Crossed-out. Characters legible, but marked for deletion. Not widely supported.</source>
          <target state="translated">クロスアウト。文字は読めるが、削除のためにマークされている。広くはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="b32ee5eae663bc459ca55799e6c9e900ee825b77" translate="yes" xml:space="preserve">
          <source>Current working directory, exception on error.</source>
          <target state="translated">現在の作業ディレクトリ、エラー時の例外</target>
        </trans-unit>
        <trans-unit id="a9e67a1612d3786289b31085caea29dd802d1a39" translate="yes" xml:space="preserve">
          <source>Current working directory.</source>
          <target state="translated">現在の作業ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="f248a387f0f37e77ff666c2a85a59f7074c24d85" translate="yes" xml:space="preserve">
          <source>Currently &lt;code&gt;@deprecated&lt;/code&gt; only supports functions and macros. However you can use the &lt;code&gt;:deprecated&lt;/code&gt; key in the annotation metadata to annotate the docs of modules, types and callbacks too.</source>
          <target state="translated">現在 &lt;code&gt;@deprecated&lt;/code&gt; は関数とマクロのみをサポートしています。ただし、アノテーションメタデータで &lt;code&gt;:deprecated&lt;/code&gt; キーを使用して、モジュール、タイプ、およびコールバックのドキュメントにアノテーションを付けることもできます。</target>
        </trans-unit>
        <trans-unit id="51f90102aa9d37408ac2a331660c80b3de845ceb" translate="yes" xml:space="preserve">
          <source>Currently it defines types and the minimal implementation for a calendar behaviour in Elixir. The goal of the Calendar features in Elixir is to provide a base for interoperability instead of full-featured datetime API.</source>
          <target state="translated">現在のところ、Elixirにおけるカレンダーの動作のための型と最低限の実装を定義しています。ElixirのCalendar機能の目標は、フル機能を備えたデータタイムAPIではなく、相互運用性のための基盤を提供することです。</target>
        </trans-unit>
        <trans-unit id="58e947fb9b58beb32c0020272eaa3d95ced9ee44" translate="yes" xml:space="preserve">
          <source>Currently the only accepted PID is &lt;code&gt;self()&lt;/code&gt;.</source>
          <target state="translated">現在受け入れられている唯一のPIDは &lt;code&gt;self()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="63f26076c7ac35014e638bc9d9a7df511fa73b4d" translate="yes" xml:space="preserve">
          <source>Currently we have two tests tagged with &lt;code&gt;@tag :distributed&lt;/code&gt;. The &amp;ldquo;server interaction&amp;rdquo; test in &lt;code&gt;KVServerTest&lt;/code&gt;, and the &amp;ldquo;route requests across nodes&amp;rdquo; in &lt;code&gt;KV.RouterTest&lt;/code&gt;. Both tests are failing since they require a routing table, which is currently empty.</source>
          <target state="translated">現在、 &lt;code&gt;@tag :distributed&lt;/code&gt; タグ付けされた2つのテストがあります。で、「サーバの対話」テスト &lt;code&gt;KVServerTest&lt;/code&gt; 、との「ノード間でルート要求」 &lt;code&gt;KV.RouterTest&lt;/code&gt; 。現在空のルーティングテーブルが必要なため、どちらのテストも失敗しています。</target>
        </trans-unit>
        <trans-unit id="5bdaaebe2bbb603df00e4573b0900ccd99aa7d09" translate="yes" xml:space="preserve">
          <source>Custom Sigils</source>
          <target state="translated">カスタムサイン</target>
        </trans-unit>
        <trans-unit id="d797cab8a29cd6c10dc9372d1ab9213b989caf7f" translate="yes" xml:space="preserve">
          <source>Custom and overridden operators</source>
          <target state="translated">カスタムおよびオーバーライドされた演算子</target>
        </trans-unit>
        <trans-unit id="00146f5b748062fe67c9600ecfcdf444284e0bcf" translate="yes" xml:space="preserve">
          <source>Custom attributes</source>
          <target state="translated">カスタム属性</target>
        </trans-unit>
        <trans-unit id="e3fd71a31afaaf057b0fedc28ba72336f1780a64" translate="yes" xml:space="preserve">
          <source>Custom backends</source>
          <target state="translated">カスタムバックエンド</target>
        </trans-unit>
        <trans-unit id="abe70270d1f6e2920fe2d28c23289b5295fb962a" translate="yes" xml:space="preserve">
          <source>Custom configuration</source>
          <target state="translated">カスタム設定</target>
        </trans-unit>
        <trans-unit id="170bc5dc5f750c41d4def27ed27eed6bf3c468fb" translate="yes" xml:space="preserve">
          <source>Custom editors are supported by using the &lt;code&gt;__FILE__&lt;/code&gt; and &lt;code&gt;__LINE__&lt;/code&gt; notations, for example:</source>
          <target state="translated">カスタムエディタは、 &lt;code&gt;__FILE__&lt;/code&gt; および &lt;code&gt;__LINE__&lt;/code&gt; 表記を使用してサポートされます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="642fb7c499e4524f98e2922e90ae2a2b071cfd52" translate="yes" xml:space="preserve">
          <source>Custom formatting</source>
          <target state="translated">カスタムフォーマット</target>
        </trans-unit>
        <trans-unit id="8eb31d3e78f5111c059041eed039c75877655487" translate="yes" xml:space="preserve">
          <source>Custom sigils</source>
          <target state="translated">カスタムサイン</target>
        </trans-unit>
        <trans-unit id="b447a4b2b4a5635d3f0dd6f81cbcc0d90e8e4a6d" translate="yes" xml:space="preserve">
          <source>Custom types defined through &lt;code&gt;@type&lt;/code&gt; are exported and available outside the module they&amp;rsquo;re defined in:</source>
          <target state="translated">&lt;code&gt;@type&lt;/code&gt; で定義されたカスタム型はエクスポートされ、それらが定義されているモジュールの外部で使用できます。</target>
        </trans-unit>
        <trans-unit id="8b25d03b9dabe02b1fafe8ede605cce72a76c6c5" translate="yes" xml:space="preserve">
          <source>Customization per environment can be done by accessing &lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#env/0&quot;&gt;the &lt;code&gt;Mix.env&lt;/code&gt; function&lt;/a&gt; in your &lt;code&gt;mix.exs&lt;/code&gt; file, which returns the current environment as an atom. That&amp;rsquo;s what we have used in the &lt;code&gt;:start_permanent&lt;/code&gt; options:</source>
          <target state="translated">環境ごとのカスタマイズがアクセスすることによって行うことができます&lt;a href=&quot;https://hexdocs.pm/mix/Mix.html#env/0&quot;&gt; &lt;code&gt;Mix.env&lt;/code&gt; の&lt;/a&gt;機能をお使いに &lt;code&gt;mix.exs&lt;/code&gt; 原子として現在の環境を返すファイル、。これが &lt;code&gt;:start_permanent&lt;/code&gt; オプションで使用したものです。</target>
        </trans-unit>
        <trans-unit id="303c85db56e6f90f1fcaafbed47e91067f22fbe9" translate="yes" xml:space="preserve">
          <source>Data structures</source>
          <target state="translated">データ構造</target>
        </trans-unit>
        <trans-unit id="696ae3d17016ea7046f1ce357ae0b1f6103499a3" translate="yes" xml:space="preserve">
          <source>Data structures such as lists, tuples, and binaries are marked respectively by the delimiters &lt;code&gt;[...]&lt;/code&gt;, &lt;code&gt;{...}&lt;/code&gt;, and &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt;. Each element is separated by comma. A trailing comma is also allowed, such as in &lt;code&gt;[1, 2, 3,]&lt;/code&gt;.</source>
          <target state="translated">リスト、タプル、バイナリなどのデータ構造は、それぞれ区切り文字 &lt;code&gt;[...]&lt;/code&gt; 、 &lt;code&gt;{...}&lt;/code&gt; 、および &lt;code&gt;&amp;lt;&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt; でマークされます。各要素はカンマで区切られます。 &lt;code&gt;[1, 2, 3,]&lt;/code&gt; ように、末尾にコンマを付けることもできます。</target>
        </trans-unit>
        <trans-unit id="b6be514c02654c4ded06230fc9559da237b0aa77" translate="yes" xml:space="preserve">
          <source>Data types</source>
          <target state="translated">データ型</target>
        </trans-unit>
        <trans-unit id="eb9a4bc1c0c153e4e4b042a79113b815b7e3021d" translate="yes" xml:space="preserve">
          <source>Date</source>
          <target state="translated">Date</target>
        </trans-unit>
        <trans-unit id="904c0db9491168bf7b0f96a8127a1e2e956e54ec" translate="yes" xml:space="preserve">
          <source>Date.Range</source>
          <target state="translated">Date.Range</target>
        </trans-unit>
        <trans-unit id="f1e5baf5ecc3589631088c40cbdd43061976ed8f" translate="yes" xml:space="preserve">
          <source>DateTime</source>
          <target state="translated">DateTime</target>
        </trans-unit>
        <trans-unit id="d0c32ae37c8ec0c5b70c6fbada27ade3b4484def" translate="yes" xml:space="preserve">
          <source>Debug options supported by the &lt;code&gt;start*&lt;/code&gt; functions</source>
          <target state="translated">&lt;code&gt;start*&lt;/code&gt; 関数でサポートされるデバッグオプション</target>
        </trans-unit>
        <trans-unit id="3dea78e2b42ff6c53cdfe32a0caf66a693083f61" translate="yes" xml:space="preserve">
          <source>Debugger</source>
          <target state="translated">Debugger</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="4dbfbf2c1ca5c9cbf7ff86eebf9f1e60dfaae3c2" translate="yes" xml:space="preserve">
          <source>Debugging with the :sys module</source>
          <target state="translated">sys モジュールでのデバッグ</target>
        </trans-unit>
        <trans-unit id="49bac63211bb6e767f6bd201454a7033e302753a" translate="yes" xml:space="preserve">
          <source>Decodes &lt;code&gt;string&lt;/code&gt; as &quot;x-www-form-urlencoded&quot;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; を「x-www-form-urlencoded」としてデコードします。</target>
        </trans-unit>
        <trans-unit id="f7d7142bd19e1c0ea0198316fec06393f6cb0ea2" translate="yes" xml:space="preserve">
          <source>Decodes a base 16 encoded string into a binary string.</source>
          <target state="translated">ベース 16 エンコードされた文字列をバイナリ文字列にデコードします。</target>
        </trans-unit>
        <trans-unit id="fb034015ded81968d20fd5f7e210338ebd758879" translate="yes" xml:space="preserve">
          <source>Decodes a base 32 encoded string into a binary string.</source>
          <target state="translated">ベース 32 エンコードされた文字列をバイナリ文字列にデコードします。</target>
        </trans-unit>
        <trans-unit id="885c7e9658ad97e9a9af45bd4781416e206a6334" translate="yes" xml:space="preserve">
          <source>Decodes a base 32 encoded string with extended hexadecimal alphabet into a binary string.</source>
          <target state="translated">16 進数のアルファベットを拡張したベース 32 エンコードされた文字列をバイナリ文字列にデコードします。</target>
        </trans-unit>
        <trans-unit id="4b608e75a46b84e1feb5de2f9f73f4f8523e9f1d" translate="yes" xml:space="preserve">
          <source>Decodes a base 64 encoded string into a binary string.</source>
          <target state="translated">ベース 64 エンコードされた文字列をバイナリ文字列にデコードします。</target>
        </trans-unit>
        <trans-unit id="b945eb1852da433ae69fcf285b6a56aed338e16f" translate="yes" xml:space="preserve">
          <source>Decodes a base 64 encoded string with URL and filename safe alphabet into a binary string.</source>
          <target state="translated">URL とファイル名の安全なアルファベットを含むベース 64 エンコードされた文字列をバイナリ文字列にデコードします。</target>
        </trans-unit>
        <trans-unit id="12cd61b38813ead53840f88994a5a092cca61e7f" translate="yes" xml:space="preserve">
          <source>Decodes a query string into a map.</source>
          <target state="translated">クエリ文字列をマップにデコードします。</target>
        </trans-unit>
        <trans-unit id="624612278a208a23a0e8ccd36697aaa475bd3192" translate="yes" xml:space="preserve">
          <source>Decomposes a local or remote call into its remote part (when provided), function name and argument list.</source>
          <target state="translated">ローカルまたはリモートの呼び出しを、そのリモート部分 (提供されている場合)、関数名、および引数リストに分解します。</target>
        </trans-unit>
        <trans-unit id="7151035c3114809bda0193c2a85fa1a470935213" translate="yes" xml:space="preserve">
          <source>Default Unit</source>
          <target state="translated">デフォルトの単位</target>
        </trans-unit>
        <trans-unit id="6bcca2541d3f4eb99df509a0ef05a98d2f536b6d" translate="yes" xml:space="preserve">
          <source>Default arguments</source>
          <target state="translated">デフォルトの引数</target>
        </trans-unit>
        <trans-unit id="6593ff7fb992a5e5072fa654c1b194d94010d120" translate="yes" xml:space="preserve">
          <source>Default background color.</source>
          <target state="translated">デフォルトの背景色。</target>
        </trans-unit>
        <trans-unit id="6e98c72a394abdbcd4b12051bb239d5b6259e9ce" translate="yes" xml:space="preserve">
          <source>Default text color.</source>
          <target state="translated">デフォルトのテキスト色。</target>
        </trans-unit>
        <trans-unit id="89487e7c33b83cf47b069ff9b1fec8587ba1c7a6" translate="yes" xml:space="preserve">
          <source>Default translation for Erlang log messages.</source>
          <target state="translated">Erlangのログメッセージのデフォルトの翻訳。</target>
        </trans-unit>
        <trans-unit id="e19bd89011e61a7bb0e77dd718395ff863fa6b57" translate="yes" xml:space="preserve">
          <source>Default values and required keys</source>
          <target state="translated">デフォルト値と必須キー</target>
        </trans-unit>
        <trans-unit id="0b6846959c6ecef6294ea2738ab118ae06eb0104" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt; for Elixir projects, &lt;code&gt;false&lt;/code&gt; for Erlang projects.</source>
          <target state="translated">Elixirプロジェクトのデフォルトは &lt;code&gt;true&lt;/code&gt; 、Erlangプロジェクトのデフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d3da7d067c0e2af23683cd3618963a0c016ef27c" translate="yes" xml:space="preserve">
          <source>Define a function from a string (&lt;code&gt;function_from_string&lt;/code&gt;) or a file (&lt;code&gt;function_from_file&lt;/code&gt;). This allows you to embed the template as a function inside a module which will then be compiled. This is the preferred API if you have access to the template at compilation time.</source>
          <target state="translated">文字列（ &lt;code&gt;function_from_string&lt;/code&gt; ）またはファイル（ &lt;code&gt;function_from_file&lt;/code&gt; ）から関数を定義します。これにより、テンプレートを関数としてモジュール内に埋め込むことができ、モジュールはコンパイルされます。これは、コンパイル時にテンプレートにアクセスできる場合に推奨されるAPIです。</target>
        </trans-unit>
        <trans-unit id="7af570fa4ced5be1c1e832e70770e29cb3378f42" translate="yes" xml:space="preserve">
          <source>Define the function explicitly (v1.0)</source>
          <target state="translated">関数を明示的に定義する (v1.0)</target>
        </trans-unit>
        <trans-unit id="bc125b89387e69b38c0b71432e6451758cd10e9b" translate="yes" xml:space="preserve">
          <source>Define the rollover moment for the given calendar.</source>
          <target state="translated">指定されたカレンダーのロールオーバーモーメントを定義します。</target>
        </trans-unit>
        <trans-unit id="cdc8ce38051bdb795b598be018ffa7c0e1241cd3" translate="yes" xml:space="preserve">
          <source>Defined as</source>
          <target state="translated">として定義されています。</target>
        </trans-unit>
        <trans-unit id="2c159947b8552c14519d220c3a6ddfaa0e00eeec" translate="yes" xml:space="preserve">
          <source>Defines ExUnit callbacks.</source>
          <target state="translated">ExUnit のコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="3fba28715c151409c38236ee7000eb4ed16c82f1" translate="yes" xml:space="preserve">
          <source>Defines a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;File.Stream&lt;/code&gt;&lt;/a&gt; struct returned by &lt;a href=&quot;file#stream!/3&quot;&gt;&lt;code&gt;File.stream!/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;file#stream!/3&quot;&gt; &lt;code&gt;File.stream!/3&lt;/code&gt; &lt;/a&gt;によって返される&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;File.Stream&lt;/code&gt; &lt;/a&gt;構造体を定義します。</target>
        </trans-unit>
        <trans-unit id="718b6b621786a1acc4c26d42dbc485e26faf7eec" translate="yes" xml:space="preserve">
          <source>Defines a callback that runs once the test exits.</source>
          <target state="translated">テストが終了したら実行するコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="9200a3742bfb9e88c562c9f6f3ed2f69e18c6f67" translate="yes" xml:space="preserve">
          <source>Defines a callback to be run before all tests in a case.</source>
          <target state="translated">ケース内のすべてのテストの前に実行されるコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="4b6166591f75c5a4bf0202583ee95cba035668e8" translate="yes" xml:space="preserve">
          <source>Defines a callback to be run before each test in a case.</source>
          <target state="translated">ケース内の各テストの前に実行されるコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="d5bc2aab7b6f9616afc524a405cb7757608452d9" translate="yes" xml:space="preserve">
          <source>Defines a function callback according to the given type specification.</source>
          <target state="translated">指定された型指定に従って関数のコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="c5db38a50b427e41d0ad25365053a42c56f8a1f7" translate="yes" xml:space="preserve">
          <source>Defines a function that delegates to another module.</source>
          <target state="translated">他のモジュールにデリゲートする関数を定義します。</target>
        </trans-unit>
        <trans-unit id="307e106c43982d5b12630cb72b848406b819c6c6" translate="yes" xml:space="preserve">
          <source>Defines a function with the given name and body.</source>
          <target state="translated">与えられた名前とボディを持つ関数を定義します。</target>
        </trans-unit>
        <trans-unit id="f063e0d1325de98da63498e5fe376536a4c88d2c" translate="yes" xml:space="preserve">
          <source>Defines a macro callback according to the given type specification.</source>
          <target state="translated">指定された型指定に従ってマクロのコールバックを定義します。</target>
        </trans-unit>
        <trans-unit id="d1bdce6fb82524ea6dca239a6d1b4282ce120736" translate="yes" xml:space="preserve">
          <source>Defines a macro with the given name and body.</source>
          <target state="translated">指定された名前とボディを持つマクロを定義します。</target>
        </trans-unit>
        <trans-unit id="45436ad823527d91893ee57c61d5208fd54f8f28" translate="yes" xml:space="preserve">
          <source>Defines a module given by name with the given contents.</source>
          <target state="translated">名前で与えられたモジュールを、与えられた内容で定義します。</target>
        </trans-unit>
        <trans-unit id="cf550b43951705ff60d293e8451b26e72a1b3d68" translate="yes" xml:space="preserve">
          <source>Defines a new bitstring.</source>
          <target state="translated">新しいビット文字列を定義します。</target>
        </trans-unit>
        <trans-unit id="5e5448d0355663eca910a26c7f674b96bdfb1318" translate="yes" xml:space="preserve">
          <source>Defines a not implemented test with a string.</source>
          <target state="translated">実装されていないテストを文字列で定義します。</target>
        </trans-unit>
        <trans-unit id="3c2d3289caf113cf07d04f07d984ecc30b13bea4" translate="yes" xml:space="preserve">
          <source>Defines a private function with the given name and body.</source>
          <target state="translated">与えられた名前とボディを持つプライベート関数を定義します。</target>
        </trans-unit>
        <trans-unit id="08a09270f00cde41495279c24131c417ef5be1db" translate="yes" xml:space="preserve">
          <source>Defines a private macro with the given name and body.</source>
          <target state="translated">与えられた名前とボディを持つプライベートマクロを定義します。</target>
        </trans-unit>
        <trans-unit id="234e236e77f17928fa5de859398ddc5049a5ff60" translate="yes" xml:space="preserve">
          <source>Defines a protocol.</source>
          <target state="translated">プロトコルを定義します。</target>
        </trans-unit>
        <trans-unit id="cf0422852f7761d300210619550ed122f7749dee" translate="yes" xml:space="preserve">
          <source>Defines a range.</source>
          <target state="translated">範囲を定義します。</target>
        </trans-unit>
        <trans-unit id="84d0bf0e5d21a052c34ad1cf8cc4fd2c0b2d922d" translate="yes" xml:space="preserve">
          <source>Defines a remote call, a call to an anonymous function, or an alias.</source>
          <target state="translated">リモート呼び出し、匿名関数への呼び出し、またはエイリアスを定義します。</target>
        </trans-unit>
        <trans-unit id="148ce01689924171178db559eb8519855c18cbf6" translate="yes" xml:space="preserve">
          <source>Defines a set of macros to create, access, and pattern match on a record.</source>
          <target state="translated">レコードの作成、アクセス、およびパターンマッチを行うためのマクロのセットを定義します。</target>
        </trans-unit>
        <trans-unit id="d43aa789386d3da190d548740ece58b49c1b5c28" translate="yes" xml:space="preserve">
          <source>Defines a struct.</source>
          <target state="translated">構造体を定義します。</target>
        </trans-unit>
        <trans-unit id="6ff008b3bfc5f520079685bb6518c7f8c263c332" translate="yes" xml:space="preserve">
          <source>Defines a test with a string.</source>
          <target state="translated">文字列でテストを定義します。</target>
        </trans-unit>
        <trans-unit id="81a4f177d77d4b3501935507c322bb13c914958e" translate="yes" xml:space="preserve">
          <source>Defines an &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;IO.Stream&lt;/code&gt;&lt;/a&gt; struct returned by &lt;a href=&quot;io#stream/2&quot;&gt;&lt;code&gt;IO.stream/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#binstream/2&quot;&gt;&lt;code&gt;IO.binstream/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;io#stream/2&quot;&gt; &lt;code&gt;IO.stream/2&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;io#binstream/2&quot;&gt; &lt;code&gt;IO.binstream/2&lt;/code&gt; &lt;/a&gt;によって返される&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;IO.Stream&lt;/code&gt; &lt;/a&gt;構造体を定義します。</target>
        </trans-unit>
        <trans-unit id="61d9e7c667e3e371baebf26eb4a1e174baee751d" translate="yes" xml:space="preserve">
          <source>Defines an anonymous function.</source>
          <target state="translated">匿名関数を定義します。</target>
        </trans-unit>
        <trans-unit id="1f336908a8420d524aec43e1dfa0a8c9f56be6ac" translate="yes" xml:space="preserve">
          <source>Defines an exception.</source>
          <target state="translated">例外を定義します。</target>
        </trans-unit>
        <trans-unit id="47c4eab1a12c9a4e9e5bfc15095c4f5f1e7f8420" translate="yes" xml:space="preserve">
          <source>Defines an implementation for the given protocol.</source>
          <target state="translated">指定したプロトコルの実装を定義します。</target>
        </trans-unit>
        <trans-unit id="7574e6578cdcbcf5986b0221d662d60206450586" translate="yes" xml:space="preserve">
          <source>Defines and manipulates Mix projects.</source>
          <target state="translated">Mixプロジェクトを定義して操作します。</target>
        </trans-unit>
        <trans-unit id="c87324807b8cf7ca458804ea8ef4c07d69ba7fe6" translate="yes" xml:space="preserve">
          <source>Defines options for module compilation. This is used to configure both Elixir and Erlang compilers, as any other compilation pass added by external tools. For example:</source>
          <target state="translated">モジュールのコンパイルオプションを定義します。これはElixirとErlangの両方のコンパイラを設定するために使われます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="51d68b5790fad1de6d84cef24485698c5aa44718" translate="yes" xml:space="preserve">
          <source>Defines the given &lt;code&gt;module&lt;/code&gt; as a supervisor which will be started with the given arguments.</source>
          <target state="translated">指定された &lt;code&gt;module&lt;/code&gt; を、指定された引数で起動されるスーパーバイザとして定義します。</target>
        </trans-unit>
        <trans-unit id="a74b181531a071dccf103975ef9b5f457594135a" translate="yes" xml:space="preserve">
          <source>Defines the given &lt;code&gt;module&lt;/code&gt; as a worker which will be started with the given arguments.</source>
          <target state="translated">指定された &lt;code&gt;module&lt;/code&gt; を、指定された引数で開始されるワーカーとして定義します。</target>
        </trans-unit>
        <trans-unit id="1e7e7a56a0498c33eb4666ce267e88fdd0443785" translate="yes" xml:space="preserve">
          <source>Defines the options used by the &lt;a href=&quot;inspect&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">&lt;a href=&quot;inspect&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt;プロトコルで使用されるオプションを定義します。</target>
        </trans-unit>
        <trans-unit id="f752321778df74391c3378581723efb4dca5e78b" translate="yes" xml:space="preserve">
          <source>Defines warnings to request or suppress when using a version of &lt;code&gt;:dialyzer&lt;/code&gt; that supports module attributes.</source>
          <target state="translated">モジュール属性をサポートするバージョンの &lt;code&gt;:dialyzer&lt;/code&gt; を使用するときに要求または抑制する警告を定義します。</target>
        </trans-unit>
        <trans-unit id="99cdfc3cbea74f1f4372e3c3f255ee42a2f77809" translate="yes" xml:space="preserve">
          <source>Defining a protocol automatically defines a type named &lt;code&gt;t&lt;/code&gt;, which can be used as follows:</source>
          <target state="translated">プロトコルを定義すると、 &lt;code&gt;t&lt;/code&gt; という名前のタイプが自動的に定義され、次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="eed610b2a524f1fea8a5a11a6b90ab2b660a40c7" translate="yes" xml:space="preserve">
          <source>Defining a specification</source>
          <target state="translated">仕様の定義</target>
        </trans-unit>
        <trans-unit id="375bfa92ccfe2bd509e0a5a5c9ecb19ed5761bbc" translate="yes" xml:space="preserve">
          <source>Defining behaviours</source>
          <target state="translated">行動の定義</target>
        </trans-unit>
        <trans-unit id="1ea27e7345dd55520e1c3fd955a1961190ab35d0" translate="yes" xml:space="preserve">
          <source>Defining custom guard expressions</source>
          <target state="translated">カスタムガード式の定義</target>
        </trans-unit>
        <trans-unit id="67ee31ce55d3432708e003e7896d5c65897de368" translate="yes" xml:space="preserve">
          <source>Defining custom operators</source>
          <target state="translated">カスタム演算子の定義</target>
        </trans-unit>
        <trans-unit id="88f1538130a6f0b0a36142a4e1e014b6b0b27ac0" translate="yes" xml:space="preserve">
          <source>Defining custom types</source>
          <target state="translated">カスタムタイプの定義</target>
        </trans-unit>
        <trans-unit id="da279c1a631ba36a0429ee2b6ef866ee7c040663" translate="yes" xml:space="preserve">
          <source>Defining extracted records with anonymous functions in the values</source>
          <target state="translated">抽出されたレコードを匿名関数で値に定義する</target>
        </trans-unit>
        <trans-unit id="d271da3ed06fd6bd866bb6e79184abd537c3512e" translate="yes" xml:space="preserve">
          <source>Defining function specs this way works, but it quickly becomes annoying since we&amp;rsquo;re repeating the type &lt;code&gt;{number, String.t}&lt;/code&gt; over and over. We can use the &lt;code&gt;@type&lt;/code&gt; directive in order to declare our own custom type.</source>
          <target state="translated">このように関数仕様を定義すると機能しますが、タイプ &lt;code&gt;{number, String.t}&lt;/code&gt; を何度も繰り返しているため、すぐに煩わしくなります。 &lt;code&gt;@type&lt;/code&gt; ディレクティブを使用して、独自のカスタムタイプを宣言できます。</target>
        </trans-unit>
        <trans-unit id="9fec1dfeb38c397bddde90cce354ec968be3e685" translate="yes" xml:space="preserve">
          <source>Defining structs</source>
          <target state="translated">構造体の定義</target>
        </trans-unit>
        <trans-unit id="ac3516b411710c30e4cd006454c7f1994a4da34a" translate="yes" xml:space="preserve">
          <source>Delegation only works with functions; delegating macros is not supported.</source>
          <target state="translated">委任は関数でのみ機能し、マクロの委任はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="e726a77011c0fe0cd388991d477e194ae9fd7af2" translate="yes" xml:space="preserve">
          <source>Deletes &lt;code&gt;value&lt;/code&gt; from &lt;code&gt;map_set&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map_set&lt;/code&gt; から &lt;code&gt;value&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="7197d992ec2d7887544bc401d08055b1f065eeeb" translate="yes" xml:space="preserve">
          <source>Deletes a path from the Erlang VM code path list. This is the list of directories the Erlang VM uses for finding module code.</source>
          <target state="translated">Erlang VMのコードパスリストからパスを削除します。これはErlang VMがモジュールコードを見つけるのに使うディレクトリのリストです。</target>
        </trans-unit>
        <trans-unit id="23800ac90aacec2911367a4560daa8ed5fec9cb1" translate="yes" xml:space="preserve">
          <source>Deletes an environment variable.</source>
          <target state="translated">環境変数を削除します。</target>
        </trans-unit>
        <trans-unit id="28cada09dd4174a63836f40b25ecf14ff7e1c534" translate="yes" xml:space="preserve">
          <source>Deletes generated application files.</source>
          <target state="translated">生成されたアプリケーションファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="6511b55cc1b351a9cd395e58f52ffa508ee0de39" translate="yes" xml:space="preserve">
          <source>Deletes the &lt;code&gt;key&lt;/code&gt; from the given &lt;code&gt;app&lt;/code&gt; environment.</source>
          <target state="translated">指定された &lt;code&gt;app&lt;/code&gt; 環境から &lt;code&gt;key&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="cda458e47c2adb906a94c0b5117cdc3d628bc0de" translate="yes" xml:space="preserve">
          <source>Deletes the child specification identified by &lt;code&gt;child_id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;child_id&lt;/code&gt; で識別される子仕様を削除します。</target>
        </trans-unit>
        <trans-unit id="06519f5a98d8a9576fa45c95f0c76ae133cbfd51" translate="yes" xml:space="preserve">
          <source>Deletes the element at the given &lt;code&gt;index&lt;/code&gt; from &lt;code&gt;tuple&lt;/code&gt;. Raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;index&lt;/code&gt; is negative or greater than or equal to the length of &lt;code&gt;tuple&lt;/code&gt;. Index is zero-based.</source>
          <target state="translated">&lt;code&gt;tuple&lt;/code&gt; から指定された &lt;code&gt;index&lt;/code&gt; 要素を削除します。上昇させる&lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;場合 &lt;code&gt;index&lt;/code&gt; 負またはより大きいであるかの長さに等しい &lt;code&gt;tuple&lt;/code&gt; 。インデックスはゼロベースです。</target>
        </trans-unit>
        <trans-unit id="768479db33c4ea83d038f3e75c0b46d08cfff3a1" translate="yes" xml:space="preserve">
          <source>Deletes the entries in the keyword list for a &lt;code&gt;key&lt;/code&gt; with &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; を持つ &lt;code&gt;key&lt;/code&gt; キーワードリストのエントリを削除します。</target>
        </trans-unit>
        <trans-unit id="30f8ea2c4a41f9ff990549664a0c3e8cc979a2f3" translate="yes" xml:space="preserve">
          <source>Deletes the entries in the keyword list for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">特定の &lt;code&gt;key&lt;/code&gt; キーワードリストのエントリを削除します。</target>
        </trans-unit>
        <trans-unit id="e356fc985f5b4c45501dcdd4bf05b2d169dc820a" translate="yes" xml:space="preserve">
          <source>Deletes the entry in &lt;code&gt;map&lt;/code&gt; for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">特定の &lt;code&gt;key&lt;/code&gt; &lt;code&gt;map&lt;/code&gt; 内のエントリを削除します。</target>
        </trans-unit>
        <trans-unit id="84bf7f6c44bf7d1a25fea2eb0b485822b94e4057" translate="yes" xml:space="preserve">
          <source>Deletes the first entry in the keyword list for a specific &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">特定の &lt;code&gt;key&lt;/code&gt; キーワードリストの最初のエントリを削除します。</target>
        </trans-unit>
        <trans-unit id="f8205134472497de5f123b07ed4ca04623561776" translate="yes" xml:space="preserve">
          <source>Deletes the given &lt;code&gt;element&lt;/code&gt; from the &lt;code&gt;list&lt;/code&gt;. Returns a new list without the element.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; から指定された &lt;code&gt;element&lt;/code&gt; を削除します。要素のない新しいリストを返します。</target>
        </trans-unit>
        <trans-unit id="6931640e5585d21423be80c31e8281e15f83ebe2" translate="yes" xml:space="preserve">
          <source>Deletes the given &lt;code&gt;key&lt;/code&gt; from the process dictionary.</source>
          <target state="translated">指定された &lt;code&gt;key&lt;/code&gt; をプロセスディクショナリから削除します。</target>
        </trans-unit>
        <trans-unit id="241d39fd9168ac37f5f1398b699e96cae08161ab" translate="yes" xml:space="preserve">
          <source>Deletes the module attribute that matches the given key.</source>
          <target state="translated">指定されたキーに一致するモジュール属性を削除します。</target>
        </trans-unit>
        <trans-unit id="a7699468279a4b12f6e55a5ad1b8c725c2c3ca8c" translate="yes" xml:space="preserve">
          <source>Demonitors the monitor identified by the given &lt;code&gt;reference&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;reference&lt;/code&gt; によって識別されるモニターを監視解除します。</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="ca0bdefd221fdbfd10bc0f3013fa9c019ef6808e" translate="yes" xml:space="preserve">
          <source>Dependencies and umbrella projects</source>
          <target state="translated">依存関係とアンブレラプロジェクト</target>
        </trans-unit>
        <trans-unit id="0aeab4e8a30c470967346544f8d2eeabc88b3b63" translate="yes" xml:space="preserve">
          <source>Dependencies between applications in an umbrella project must still be explicitly defined and Mix makes it easy to do so. Open up &lt;code&gt;apps/kv_server/mix.exs&lt;/code&gt; and change the &lt;code&gt;deps/0&lt;/code&gt; function to the following:</source>
          <target state="translated">アンブレラプロジェクトのアプリケーション間の依存関係は明示的に定義する必要があり、Mixを使用すると簡単に定義できます。 &lt;code&gt;apps/kv_server/mix.exs&lt;/code&gt; を開き、 &lt;code&gt;deps/0&lt;/code&gt; 関数を次のように変更します。</target>
        </trans-unit>
        <trans-unit id="20c4e61613e0bb2759ad45cedce4f0b014181be0" translate="yes" xml:space="preserve">
          <source>Dependencies must be specified in the &lt;code&gt;mix.exs&lt;/code&gt; file in one of the following formats:</source>
          <target state="translated">依存関係は、 &lt;code&gt;mix.exs&lt;/code&gt; ファイルで次のいずれかの形式で指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="1313d46d93e4456c33c34bdf877a2b31296e6f6b" translate="yes" xml:space="preserve">
          <source>Dependencies within an umbrella project</source>
          <target state="translated">アンブレラプロジェクト内の依存関係</target>
        </trans-unit>
        <trans-unit id="2ae4f4df59c1f88916b85e951202eefbff4c7b68" translate="yes" xml:space="preserve">
          <source>Dependency definition options</source>
          <target state="translated">依存関係定義オプション</target>
        </trans-unit>
        <trans-unit id="ac1bc59655cdca7840ee9bf9d55721f13ebb7a55" translate="yes" xml:space="preserve">
          <source>Depending on the accumulator value, the result returned by &lt;a href=&quot;enumerable#reduce/3&quot;&gt;&lt;code&gt;Enumerable.reduce/3&lt;/code&gt;&lt;/a&gt; will change. Please check the &lt;a href=&quot;#t:result/0&quot;&gt;&lt;code&gt;result/0&lt;/code&gt;&lt;/a&gt; type documentation for more information.</source>
          <target state="translated">アキュムレータの値に応じて、&lt;a href=&quot;enumerable#reduce/3&quot;&gt; &lt;code&gt;Enumerable.reduce/3&lt;/code&gt; &lt;/a&gt;によって返される結果は変化します。詳細については、&lt;a href=&quot;#t:result/0&quot;&gt; &lt;code&gt;result/0&lt;/code&gt; &lt;/a&gt;タイプのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="4962f760a0cc6ed936dcedffadba8733dd81e124" translate="yes" xml:space="preserve">
          <source>Deploys a given module's BEAM code to a list of nodes.</source>
          <target state="translated">与えられたモジュールのBEAMコードをノードのリストにデプロイします。</target>
        </trans-unit>
        <trans-unit id="f6ef72731d9f2999dced5cdda829d282f60229ed" translate="yes" xml:space="preserve">
          <source>Deprecated feature</source>
          <target state="translated">非推奨機能</target>
        </trans-unit>
        <trans-unit id="e5135ac9aa0f3adf0ead688638a7cada98f65645" translate="yes" xml:space="preserve">
          <source>Deprecated function to retrieve old documentation format.</source>
          <target state="translated">古いドキュメントフォーマットを取得するための機能が廃止されました。</target>
        </trans-unit>
        <trans-unit id="355cf2e1caeb8e5de974f3e0ee6f449e9a16967c" translate="yes" xml:space="preserve">
          <source>Deprecated mechanism to retrieve the last exception stacktrace.</source>
          <target state="translated">最後の例外のスタックトレースを取得するための非推奨のメカニズム。</target>
        </trans-unit>
        <trans-unit id="34730e9bbd5c0ba7b7655973316eed44e39da85f" translate="yes" xml:space="preserve">
          <source>Deprecations</source>
          <target state="translated">Deprecations</target>
        </trans-unit>
        <trans-unit id="8189415262d9b40fadd78cc759dd14fdb9868384" translate="yes" xml:space="preserve">
          <source>Deps task</source>
          <target state="translated">デプスタスク</target>
        </trans-unit>
        <trans-unit id="1751cb6240f8427862c44d9fda1a1acebc588f2b" translate="yes" xml:space="preserve">
          <source>Derives the &lt;code&gt;protocol&lt;/code&gt; for &lt;code&gt;module&lt;/code&gt; with the given options.</source>
          <target state="translated">指定されたオプションで &lt;code&gt;module&lt;/code&gt; の &lt;code&gt;protocol&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="b1f507cfab066377ebfd776c06ce8c6ae1d1dfae" translate="yes" xml:space="preserve">
          <source>Deriving</source>
          <target state="translated">Deriving</target>
        </trans-unit>
        <trans-unit id="469b2320b22b8de425b1224d561debab3b7e4eec" translate="yes" xml:space="preserve">
          <source>Describes tests together.</source>
          <target state="translated">テストを一緒に記述します。</target>
        </trans-unit>
        <trans-unit id="373b67a9ef6e15b48984d2e64ecfb18feb928f40" translate="yes" xml:space="preserve">
          <source>Design principles</source>
          <target state="translated">設計原理</target>
        </trans-unit>
        <trans-unit id="9c5959e7ab4938c2e1595e724f3e5f686f3d536b" translate="yes" xml:space="preserve">
          <source>Destructures two lists, assigning each term in the right one to the matching term in the left one.</source>
          <target state="translated">2つのリストを分解し、右のリストの各項を左のリストの一致する項に代入します。</target>
        </trans-unit>
        <trans-unit id="55519a961a5691717096efcabf1914eee5dab5a5" translate="yes" xml:space="preserve">
          <source>Determines if &lt;code&gt;integer&lt;/code&gt; is odd.</source>
          <target state="translated">&lt;code&gt;integer&lt;/code&gt; が奇数かどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="026e5ca0dfda1ad25fabda732fd35af3e32e25b5" translate="yes" xml:space="preserve">
          <source>Determines if an &lt;code&gt;integer&lt;/code&gt; is even.</source>
          <target state="translated">&lt;code&gt;integer&lt;/code&gt; が偶数かどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="ada7ef5eac5cda7b071d8c84d536d21adaaabe11" translate="yes" xml:space="preserve">
          <source>Determines if the &lt;code&gt;enumerable&lt;/code&gt; is empty.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; が空かどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="240590c512304822fc6f9051f63c5097957b51d1" translate="yes" xml:space="preserve">
          <source>Determines if the date given is valid according to the proleptic Gregorian calendar.</source>
          <target state="translated">指定した日付がプロレプティック・グレゴリオ暦に基づいて有効かどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="b906ed370d76a314f78611272f97a7c5324fbfb8" translate="yes" xml:space="preserve">
          <source>Developers can also use tools like &lt;a href=&quot;https://github.com/bitwalker/distillery&quot;&gt;Distillery&lt;/a&gt; that build &lt;strong&gt;releases&lt;/strong&gt;. Releases are able to package all of your source code as well as the Erlang VM into a single directory. Releases also give you explicit control over how each application is started and in which order. They also provide a more streamlined mechanism for starting and stopping systems, debugging, logging, as well as system monitoring.</source>
          <target state="translated">開発者は、&lt;strong&gt;リリース&lt;/strong&gt;をビルドする&lt;a href=&quot;https://github.com/bitwalker/distillery&quot;&gt;Distillery&lt;/a&gt;などのツールを使用することもでき&lt;strong&gt;ます&lt;/strong&gt;。リリースでは、すべてのソースコードとErlang VMを単一のディレクトリにパッケージ化できます。リリースでは、各アプリケーションの起動方法と順序を明示的に制御することもできます。また、システムの起動と停止、デバッグ、ロギング、およびシステム監視のためのより合理化されたメカニズムも提供します。</target>
        </trans-unit>
        <trans-unit id="17f25608342d4ab77bb1907f884cfe439bc54de0" translate="yes" xml:space="preserve">
          <source>Developers may also implement their own backends, an option that is explored in more detail below.</source>
          <target state="translated">開発者は独自のバックエンドを実装することもできます。</target>
        </trans-unit>
        <trans-unit id="0f26c5755a434f3e16da5992d7fb7b82ce5cc7eb" translate="yes" xml:space="preserve">
          <source>Developers may also use umbrella projects to break large business domains apart. The caution here is to make sure the domains don&amp;rsquo;t depend on each other (also known as cyclic dependencies). If you run into such situations, it means those applications are not as isolated from each other as you originally thought, and you have architectural and design issues to solve.</source>
          <target state="translated">開発者は、大規模なビジネスドメインを分割するために包括的なプロジェクトを使用することもできます。ここでの注意は、ドメインが互いに依存しないようにすることです（循環依存とも呼ばれます）。このような状況に遭遇した場合、それらのアプリケーションは当初考えていたほど互いに分離されておらず、解決すべきアーキテクチャと設計の問題があることを意味します。</target>
        </trans-unit>
        <trans-unit id="b4df092ce16103b5263190978f954da4abebc038" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; struct directly and instead rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">開発者は、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;構造体を直接作成することを避け、代わりに、このモジュールによって提供される関数とサードパーティのカレンダーライブラリの関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="9399f0af7289ccae2bbfba26b54d6beaa45eceaa" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the Date structs directly and instead rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">開発者は、Date 構造体を直接作成することは避け、代わりにこのモジュールが提供する関数やサードパーティのカレンダー・ライブラリの関数に依存する必要があります。</target>
        </trans-unit>
        <trans-unit id="372765583e2c62003b134d7cd14c816d752b1af8" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the NaiveDateTime structs directly and instead, rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">開発者は、NaiveDateTime構造体を直接作成することは避け、代わりに、このモジュールが提供する関数やサードパーティのカレンダー・ライブラリの関数に依存するようにしてください。</target>
        </trans-unit>
        <trans-unit id="055215a2dc231830ec70e2ea3ed245f009feefc1" translate="yes" xml:space="preserve">
          <source>Developers should avoid creating the Time structs directly and instead rely on the functions provided by this module as well as the ones in third-party calendar libraries.</source>
          <target state="translated">開発者は、Time 構造体を直接作成することは避け、このモジュールが提供する関数やサードパーティのカレンダー・ライブラリの関数に頼るようにしてください。</target>
        </trans-unit>
        <trans-unit id="a0f9f33bf587fbe7754189054b93906eb196c38a" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;dynamicsupervisor#init/1&quot;&gt;&lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="translated">開発者は通常、initコールバックの最後に&lt;a href=&quot;dynamicsupervisor#init/1&quot;&gt; &lt;code&gt;DynamicSupervisor.init/1&lt;/code&gt; &lt;/a&gt;を呼び出して、適切な監視フラグを返します。</target>
        </trans-unit>
        <trans-unit id="c23ae07b94722ec4976e1fcb3346ba8a18a11515" translate="yes" xml:space="preserve">
          <source>Developers typically invoke &lt;a href=&quot;supervisor#init/2&quot;&gt;&lt;code&gt;Supervisor.init/2&lt;/code&gt;&lt;/a&gt; at the end of their init callback to return the proper supervision flags.</source>
          <target state="translated">開発者は通常、initコールバックの最後に&lt;a href=&quot;supervisor#init/2&quot;&gt; &lt;code&gt;Supervisor.init/2&lt;/code&gt; &lt;/a&gt;を呼び出して、適切な監視フラグを返します。</target>
        </trans-unit>
        <trans-unit id="c943b3eb860130726114a82a12d17559028bcef9" translate="yes" xml:space="preserve">
          <source>Developing in Elixir does not make your code free of race conditions. However, Elixir&amp;rsquo;s abstractions where nothing is shared by default make it easier to spot a race condition&amp;rsquo;s root cause.</source>
          <target state="translated">Elixirで開発しても、コードが競合状態から解放されるわけではありません。ただし、デフォルトでは何も共有されないエリクサーの抽象化により、競合状態の根本原因を特定しやすくなります。</target>
        </trans-unit>
        <trans-unit id="3550a4a38c380e14df95457cd13d6dabbd0c0b20" translate="yes" xml:space="preserve">
          <source>Dict</source>
          <target state="translated">Dict</target>
        </trans-unit>
        <trans-unit id="28a9d7ddb98e082ecef8831bdb74b74701f20d77" translate="yes" xml:space="preserve">
          <source>Differences from &lt;code&gt;defmodule&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;defmodule&lt;/code&gt; との違い</target>
        </trans-unit>
        <trans-unit id="951f149c561762e46794ae9088e9246ba02fb48d" translate="yes" xml:space="preserve">
          <source>Differences to &lt;a href=&quot;#count/1&quot;&gt;&lt;code&gt;count/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#count/1&quot;&gt; &lt;code&gt;count/1&lt;/code&gt; &lt;/a&gt;違い/ 1</target>
        </trans-unit>
        <trans-unit id="7664bc212e56811cb62a63d951c16c5ee311e137" translate="yes" xml:space="preserve">
          <source>Directory separators must always be written as &lt;code&gt;/&lt;/code&gt;, even on Windows. You may call &lt;a href=&quot;path#expand/1&quot;&gt;&lt;code&gt;Path.expand/1&lt;/code&gt;&lt;/a&gt; to normalize the path before invoking this function.</source>
          <target state="translated">Windowsであっても、ディレクトリ区切り文字は常に &lt;code&gt;/&lt;/code&gt; と記述する必要があります。あなたは呼び出すこと&lt;a href=&quot;path#expand/1&quot;&gt; &lt;code&gt;Path.expand/1&lt;/code&gt; を&lt;/a&gt;、この関数を呼び出す前にパスを正規化します。</target>
        </trans-unit>
        <trans-unit id="5095c2a8d43020f623949798775e0dea6df3427e" translate="yes" xml:space="preserve">
          <source>Disables logging for the current process.</source>
          <target state="translated">現在のプロセスのロギングを無効にします。</target>
        </trans-unit>
        <trans-unit id="3243542aa799d7700902fa9d17f21c898a51bd23" translate="yes" xml:space="preserve">
          <source>Dispatching happens in the process that calls &lt;a href=&quot;#dispatch/3&quot;&gt;&lt;code&gt;dispatch/3&lt;/code&gt;&lt;/a&gt; either serially or concurrently in case of multiple partitions (via spawned tasks). The registered processes are not involved in dispatching unless involving them is done explicitly (for example, by sending them a message in the callback).</source>
          <target state="translated">ディスパッチは、（生成されたタスクを介して）複数のパーティションの場合に、&lt;a href=&quot;#dispatch/3&quot;&gt; &lt;code&gt;dispatch/3&lt;/code&gt; を&lt;/a&gt;シリアルまたは同時に呼び出すプロセスで発生します。登録されたプロセスは、明示的に（たとえば、コールバックでメッセージを送信することによって）実行されない限り、ディスパッチに関与しません。</target>
        </trans-unit>
        <trans-unit id="129dd56090745e370bed845813615f5c08f21b2a" translate="yes" xml:space="preserve">
          <source>Distributed tasks</source>
          <target state="translated">分散タスク</target>
        </trans-unit>
        <trans-unit id="aef0124ef44afd7de1feb0a9b09b0c6ee2798fe2" translate="yes" xml:space="preserve">
          <source>Distributed tasks and tags</source>
          <target state="translated">分散タスクとタグ</target>
        </trans-unit>
        <trans-unit id="b4c7a18ac5c24ec1029c892a8a7fb3fbcc59af1d" translate="yes" xml:space="preserve">
          <source>Distributed tasks are exactly the same as supervised tasks. The only difference is that we pass the node name when spawning the task on the supervisor. Open up &lt;code&gt;lib/kv/supervisor.ex&lt;/code&gt; from the &lt;code&gt;:kv&lt;/code&gt; application. Let&amp;rsquo;s add a task supervisor as the last child of the tree:</source>
          <target state="translated">分散タスクは、監視対象タスクとまったく同じです。唯一の違いは、スーパーバイザーでタスクを生成するときにノード名を渡すことです。 &lt;code&gt;:kv&lt;/code&gt; アプリケーションから &lt;code&gt;lib/kv/supervisor.ex&lt;/code&gt; を開きます。ツリーの最後の子としてタスクスーパーバイザーを追加しましょう。</target>
        </trans-unit>
        <trans-unit id="98348afa0d882c80ed7d05917265b30ff93c136a" translate="yes" xml:space="preserve">
          <source>Divides a string into parts based on a pattern.</source>
          <target state="translated">パターンに基づいて文字列を分割します。</target>
        </trans-unit>
        <trans-unit id="4f19d3c5ba97dc473a0dd975ca453b2aa1eeca76" translate="yes" xml:space="preserve">
          <source>Divides a string into substrings at each Unicode whitespace occurrence with leading and trailing whitespace ignored. Groups of whitespace are treated as a single occurrence. Divisions do not occur on non-breaking whitespace.</source>
          <target state="translated">文字列を、先頭と末尾の空白を無視して Unicode の空白が出現するたびに部分文字列に分割します。空白のグループは、単一の出現として扱われます。分割は、改行していない空白には発生しません。</target>
        </trans-unit>
        <trans-unit id="6e4d17c0fddf7977be47a1ef9b14e7b1d0cef265" translate="yes" xml:space="preserve">
          <source>Do not rely on the particular format returned by the &lt;code&gt;format*&lt;/code&gt; functions in this module. They may be changed in future releases in order to better suit Elixir's tool chain. In other words, by using the functions in this module it is guaranteed you will format exceptions as in the current Elixir version being used.</source>
          <target state="translated">このモジュールの &lt;code&gt;format*&lt;/code&gt; 関数によって返される特定の形式に依存しないでください。Elixirのツールチェーンにより適合するように、将来のリリースで変更される可能性があります。つまり、このモジュールの関数を使用することで、使用されている現在のElixirバージョンのように例外をフォーマットすることが保証されます。</target>
        </trans-unit>
        <trans-unit id="5be89a1272cff39c64911be3f9a33057d2a2263c" translate="yes" xml:space="preserve">
          <source>Do not use &lt;a href=&quot;mix.project#config/0&quot;&gt;&lt;code&gt;Mix.Project.config/0&lt;/code&gt;&lt;/a&gt; to find the runtime configuration. Use it only to configure aspects of your project (like compilation directories) and not your application runtime.</source>
          <target state="translated">ランタイム構成を見つけるために&lt;a href=&quot;mix.project#config/0&quot;&gt; &lt;code&gt;Mix.Project.config/0&lt;/code&gt; &lt;/a&gt;を使用しないでください。これは、アプリケーションのランタイムではなく、プロジェクトの要素（コンパイルディレクトリなど）の構成にのみ使用します。</target>
        </trans-unit>
        <trans-unit id="a8d3dcf5e3a5a8a9d6963913c532d9b07e33dbf9" translate="yes" xml:space="preserve">
          <source>Do not use special match variables &lt;code&gt;:&quot;$_&quot;&lt;/code&gt; and &lt;code&gt;:&quot;$$&quot;&lt;/code&gt;, because they might not work as expected.</source>
          <target state="translated">特殊な一致変数 &lt;code&gt;:&quot;$_&quot;&lt;/code&gt; および &lt;code&gt;:&quot;$$&quot;&lt;/code&gt; を使用しないでください。これらは期待どおりに機能しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="9078c7f338a72de9ec9a277913417c733a31c6ad" translate="yes" xml:space="preserve">
          <source>Do not use this function to generate a sequence of numbers. If blocking the caller process is not necessary, use &lt;code&gt;Stream.iterate(0, &amp;amp; &amp;amp;1 + 1)&lt;/code&gt; instead.</source>
          <target state="translated">この関数を使用して一連の数値を生成しないでください。呼び出し元プロセスをブロックする必要がない場合は、 &lt;code&gt;Stream.iterate(0, &amp;amp; &amp;amp;1 + 1)&lt;/code&gt; 使用してください。</target>
        </trans-unit>
        <trans-unit id="5e01c221d853296d84e769113c74b2df4ca129d1" translate="yes" xml:space="preserve">
          <source>Doctests</source>
          <target state="translated">Doctests</target>
        </trans-unit>
        <trans-unit id="fd6f84b7484c0cf7709bebbb23583c23abf1b083" translate="yes" xml:space="preserve">
          <source>Doctests are specified by an indentation of four spaces followed by the &lt;code&gt;iex&amp;gt;&lt;/code&gt; prompt in a documentation string. If a command spans multiple lines, you can use &lt;code&gt;...&amp;gt;&lt;/code&gt;, as in IEx. The expected result should start at the next line after &lt;code&gt;iex&amp;gt;&lt;/code&gt; or &lt;code&gt;...&amp;gt;&lt;/code&gt; line(s) and is terminated either by a newline or a new &lt;code&gt;iex&amp;gt;&lt;/code&gt; prefix.</source>
          <target state="translated">doctestは、4つのスペースのインデントに続いて、説明文字列の &lt;code&gt;iex&amp;gt;&lt;/code&gt; プロンプトで指定されます。コマンドが複数行にわたる場合は、IExのように &lt;code&gt;...&amp;gt;&lt;/code&gt; を使用できます。予想される結果は、 &lt;code&gt;iex&amp;gt;&lt;/code&gt; または &lt;code&gt;...&amp;gt;&lt;/code&gt; 行の次の行から始まり、改行または新しい &lt;code&gt;iex&amp;gt;&lt;/code&gt; 接頭辞のいずれかで終了します。</target>
        </trans-unit>
        <trans-unit id="acfc0021db2710ad6e5c5976444819b508e6a8e7" translate="yes" xml:space="preserve">
          <source>Doctests, patterns and with</source>
          <target state="translated">ドクテスト、パターンと</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="dbeb3b73b289a45968e86a1c4e28757eddbb7b21" translate="yes" xml:space="preserve">
          <source>Documentation != Code comments</source>
          <target state="translated">ドキュメント !=コードコメント</target>
        </trans-unit>
        <trans-unit id="dc66ec30a9e7992a7f99224cd60ef6a9e6f7c515" translate="yes" xml:space="preserve">
          <source>Documentation in Elixir is usually attached to module attributes. Let's see an example:</source>
          <target state="translated">Elixirのドキュメントは通常、モジュールの属性に添付されています。例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="d46677a0ad1e404b917f0ea8b3b31b80c34ffa5f" translate="yes" xml:space="preserve">
          <source>Documentation metadata</source>
          <target state="translated">ドキュメントのメタデータ</target>
        </trans-unit>
        <trans-unit id="fcb85c951e6d656fcd603d110a64fcd8866200d9" translate="yes" xml:space="preserve">
          <source>Documents in a group are attempted to be rendered together to the best of the renderer ability.</source>
          <target state="translated">グループ内のドキュメントは、レンダラーの能力が最大限に発揮されるように一緒にレンダリングされようとします。</target>
        </trans-unit>
        <trans-unit id="7bd6d91ba0fc6656f3596671325c2a8e0bccb23f" translate="yes" xml:space="preserve">
          <source>Does not load any of the implementations.</source>
          <target state="translated">いずれの実装もロードしません。</target>
        </trans-unit>
        <trans-unit id="e1c5568ff1b2696956a80de3fbdad95c454b1c9a" translate="yes" xml:space="preserve">
          <source>Does not load any of the protocols.</source>
          <target state="translated">プロトコルをロードしません。</target>
        </trans-unit>
        <trans-unit id="c263be485f93e4de275853028d24c5388efd78f6" translate="yes" xml:space="preserve">
          <source>Doing 0.1 * 0.1 should return 0.01, but because 0.1 is actually 0.1000000014, the result is 0.010000000000000002, and because this is not the closest representable number to 0.01, you'll get the wrong result for this operation</source>
          <target state="translated">0.1*0.1 を実行すると 0.01 が返されるはずですが、0.1 は実際には 0.1000000014 なので、結果は 0.010000000000000002 となり、これは 0.01 に最も近い表現可能な数ではないので、この操作では間違った結果が得られます。</target>
        </trans-unit>
        <trans-unit id="576aa93d193455e3276b07f4cd2af71d8167c617" translate="yes" xml:space="preserve">
          <source>Doing it in reverse order will raise a syntax error:</source>
          <target state="translated">逆順に行うと構文エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="a56ad56b6280b6eca6747cdcbe707267d3443caf" translate="yes" xml:space="preserve">
          <source>Domain-specific languages</source>
          <target state="translated">ドメイン固有の言語</target>
        </trans-unit>
        <trans-unit id="e6ab4e40cdc60406c301246d5709b2813b1c0221" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t drink the kool aid</source>
          <target state="translated">クールエイドを飲まない</target>
        </trans-unit>
        <trans-unit id="bfd4ab20e5eed869032f79c7d0b2472213257269" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t forget that you can also check the &lt;a href=&quot;https://github.com/elixir-lang/elixir&quot;&gt;source code of Elixir itself&lt;/a&gt;, which is mostly written in Elixir (mainly the &lt;code&gt;lib&lt;/code&gt; directory), or &lt;a href=&quot;https://elixir-lang.org/docs.html&quot;&gt;explore Elixir&amp;rsquo;s documentation&lt;/a&gt;.</source>
          <target state="translated">ほとんどがElixir（主に &lt;code&gt;lib&lt;/code&gt; ディレクトリ）で記述されている&lt;a href=&quot;https://github.com/elixir-lang/elixir&quot;&gt;Elixir自体のソースコードを&lt;/a&gt;チェックしたり&lt;a href=&quot;https://elixir-lang.org/docs.html&quot;&gt;、Elixirのドキュメントを調べ&lt;/a&gt;たりすることもできます。</target>
        </trans-unit>
        <trans-unit id="8e3dff4b81533f75ceec6a97ebb6191aa309061e" translate="yes" xml:space="preserve">
          <source>Drops elements at the beginning of the &lt;code&gt;enumerable&lt;/code&gt; while &lt;code&gt;fun&lt;/code&gt; returns a truthy value.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; が真の値を返す間、 &lt;code&gt;enumerable&lt;/code&gt; 要素の先頭に要素をドロップします。</target>
        </trans-unit>
        <trans-unit id="594f287d9f0bd3fb9ea891584418c737436dd38e" translate="yes" xml:space="preserve">
          <source>Drops the &lt;code&gt;amount&lt;/code&gt; of elements from the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; から要素の &lt;code&gt;amount&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="ab32b2e5c71cd1c17d36b26a0d25edc63a27b074" translate="yes" xml:space="preserve">
          <source>Drops the given &lt;code&gt;keys&lt;/code&gt; from &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;keys&lt;/code&gt; を &lt;code&gt;map&lt;/code&gt; から削除します。</target>
        </trans-unit>
        <trans-unit id="cdb8b8343fe7d1adbf36b056e528d2571ea6a12c" translate="yes" xml:space="preserve">
          <source>Drops the given keys from the keyword list.</source>
          <target state="translated">指定したキーをキーワードリストから削除します。</target>
        </trans-unit>
        <trans-unit id="69c0475e80c404bbdc2d49a7a643fb10c6ace760" translate="yes" xml:space="preserve">
          <source>Due to immutability, loops in Elixir (as in any functional programming language) are written differently from imperative languages. For example, in an imperative language like C, one would write:</source>
          <target state="translated">不変性のため、Elixirのループは(他の関数型プログラミング言語と同様に)命令型言語とは異なる書き方をします。例えば、C言語のような命令型言語では、次のように書きます。</target>
        </trans-unit>
        <trans-unit id="5cf07ff6fe7f2d796d09183c5eda29bcd66f1127" translate="yes" xml:space="preserve">
          <source>Due to their cons cell based representation, prepending an element to a list is always fast (constant time), while appending becomes slower as the list grows in size (linear time):</source>
          <target state="translated">consセルベースの表現のため、リストへの要素の前置は常に高速(一定時間)ですが、リストのサイズが大きくなるにつれて追記は遅くなります(線形時間)。</target>
        </trans-unit>
        <trans-unit id="4f1ef09b3bb7845a809a8a0e2e38529155ed603e" translate="yes" xml:space="preserve">
          <source>Due to their laziness, streams are useful when working with large (or even infinite) collections. When chaining many operations with &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt;, intermediate lists are created, while &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; creates a recipe of computations that are executed at a later moment. Let's see another example:</source>
          <target state="translated">ストリームは遅延があるため、大規模な（または無限の）コレクションを扱う場合に役立ちます。&lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; を使用して&lt;/a&gt;多くの操作をチェーンすると、中間リストが作成されますが、&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;は、後で実行される計算のレシピを作成します。別の例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="9895fb241f7b45a9dc3e35cea835d242910bcea5" translate="yes" xml:space="preserve">
          <source>Due to this property, Elixir relies on functions starting with underscore to attach compile-time metadata to modules. Such functions are most often in the &lt;code&gt;__foo__&lt;/code&gt; format. For example, every module in Elixir has an &lt;a href=&quot;module#c:__info__/1&quot;&gt;&lt;code&gt;__info__/1&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">この特性により、Elixirはモジュールにコンパイル時メタデータを添付するためにアンダースコアで始まる関数に依存しています。そのような関数は、ほとんどの場合 &lt;code&gt;__foo__&lt;/code&gt; 形式です。たとえば、Elixirのすべてのモジュールには&lt;a href=&quot;module#c:__info__/1&quot;&gt; &lt;code&gt;__info__/1&lt;/code&gt; &lt;/a&gt;関数があります。</target>
        </trans-unit>
        <trans-unit id="7d17d072820769c205a9be99134b8181cc1f8d63" translate="yes" xml:space="preserve">
          <source>Duplicated entries are removed, the latest one prevails. Unlike &lt;code&gt;Enum.into(enumerable, [])&lt;/code&gt;, &lt;code&gt;Keyword.new(enumerable)&lt;/code&gt; guarantees the keys are unique.</source>
          <target state="translated">重複したエントリは削除され、最新のエントリが優先されます。 &lt;code&gt;Enum.into(enumerable, [])&lt;/code&gt; とは異なり、 &lt;code&gt;Keyword.new(enumerable)&lt;/code&gt; はキーが一意であることを保証します。</target>
        </trans-unit>
        <trans-unit id="076f63ae0f418e3862988b172f7c4cc5852450a8" translate="yes" xml:space="preserve">
          <source>Duplicated entries are removed, the latest one prevails. Unlike &lt;code&gt;Enum.into(enumerable, [], fun)&lt;/code&gt;, &lt;code&gt;Keyword.new(enumerable, fun)&lt;/code&gt; guarantees the keys are unique.</source>
          <target state="translated">重複したエントリは削除され、最新のエントリが優先されます。 &lt;code&gt;Enum.into(enumerable, [], fun)&lt;/code&gt; とは異なり、 &lt;code&gt;Keyword.new(enumerable, fun)&lt;/code&gt; はキーが一意であることを保証します。</target>
        </trans-unit>
        <trans-unit id="64aa4fe0da505292ed7a57df0b239e0d4183ccec" translate="yes" xml:space="preserve">
          <source>Duplicated keys appear duplicated in the final list of keys.</source>
          <target state="translated">重複した鍵は、最終的な鍵のリストに重複して表示されます。</target>
        </trans-unit>
        <trans-unit id="efdd2fd6681b594f9b79a82e9b5aa48b4fbf5e9b" translate="yes" xml:space="preserve">
          <source>Duplicated keys are not removed.</source>
          <target state="translated">重複したキーは削除されません。</target>
        </trans-unit>
        <trans-unit id="ac53e68a8e0e729bf98aeec7ce7b6340de177d35" translate="yes" xml:space="preserve">
          <source>Duplicated keys are preserved in the new keyword list.</source>
          <target state="translated">重複したキーは、新しいキーワードリストに保存されます。</target>
        </trans-unit>
        <trans-unit id="b3b6f1eeffe99ed90517ec6eae526962d142636d" translate="yes" xml:space="preserve">
          <source>Duplicated keys are removed; the latest one prevails.</source>
          <target state="translated">重複したキーは削除され、最新のものが優先される。</target>
        </trans-unit>
        <trans-unit id="9ba8d07a9bc46aeb1c779fab12a8b4dd715ff170" translate="yes" xml:space="preserve">
          <source>Duplicates the given element &lt;code&gt;n&lt;/code&gt; times in a list.</source>
          <target state="translated">リスト内の指定された要素を &lt;code&gt;n&lt;/code&gt; 回複製します。</target>
        </trans-unit>
        <trans-unit id="612d35050e691a1a2b9f22fe6b8f2fde9cb8f9d1" translate="yes" xml:space="preserve">
          <source>Dynamic dispatch</source>
          <target state="translated">ダイナミックディスパッチ</target>
        </trans-unit>
        <trans-unit id="edd7dafc098b4b13db6ad466bd4e821198c0337f" translate="yes" xml:space="preserve">
          <source>Dynamic names</source>
          <target state="translated">動的な名前</target>
        </trans-unit>
        <trans-unit id="46d2782a295d697a8b9e27c2d91c25f66bfd854d" translate="yes" xml:space="preserve">
          <source>Dynamic supervisors</source>
          <target state="translated">動的スーパーバイザ</target>
        </trans-unit>
        <trans-unit id="3aa9130077fcc44c7eb24ab3a909359998b572f0" translate="yes" xml:space="preserve">
          <source>DynamicSupervisor</source>
          <target state="translated">DynamicSupervisor</target>
        </trans-unit>
        <trans-unit id="4981d257018e7d749e02934b79c0b6bdb94f8f95" translate="yes" xml:space="preserve">
          <source>DynamicSupervisor &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">DynamicSupervisorの&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7ba279830cac8f3b7ac440b34f16c258d525250e" translate="yes" xml:space="preserve">
          <source>Dynamically adds a child specification to &lt;code&gt;supervisor&lt;/code&gt; and starts that child.</source>
          <target state="translated">子仕様を &lt;code&gt;supervisor&lt;/code&gt; 動的に追加し、その子を開始します。</target>
        </trans-unit>
        <trans-unit id="887cf55c60fc1c9af6689bd5e2a2c3b3766133c3" translate="yes" xml:space="preserve">
          <source>Dynamically supervised tasks</source>
          <target state="translated">動的に管理されたタスク</target>
        </trans-unit>
        <trans-unit id="5b16ec2483e166fe049f665c022763eabe66f30f" translate="yes" xml:space="preserve">
          <source>EEx</source>
          <target state="translated">EEx</target>
        </trans-unit>
        <trans-unit id="af3993684170f3f24c787f9d7ffb881775da9c68" translate="yes" xml:space="preserve">
          <source>EEx has the concept of engines which allows you to modify or transform the code extracted from the given string or file.</source>
          <target state="translated">EExにはエンジンという概念があり、与えられた文字列やファイルから抽出されたコードを変更したり、変換したりすることができます。</target>
        </trans-unit>
        <trans-unit id="818fc332cfd248836c5442317677dfe04bdbbd73" translate="yes" xml:space="preserve">
          <source>EEx stands for Embedded Elixir. It allows you to embed Elixir code inside a string in a robust way.</source>
          <target state="translated">EExはEmbedded Elixirの略です。これにより、Elixirのコードを文字列の中に堅牢な方法で埋め込むことができます。</target>
        </trans-unit>
        <trans-unit id="22a24f67ecb347cc9015ff6237454fdbf0669653" translate="yes" xml:space="preserve">
          <source>EEx.Engine &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">EEx.Engineの&lt;small&gt;動作&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="eebf2acaee05e7c09c816457012d68bbfc96c6f3" translate="yes" xml:space="preserve">
          <source>EEx.SmartEngine</source>
          <target state="translated">EEx.SmartEngine</target>
        </trans-unit>
        <trans-unit id="674e9c18d21c34b87c83982cf9afa4d95159a4be" translate="yes" xml:space="preserve">
          <source>EEx.SyntaxError</source>
          <target state="translated">EEx.SyntaxError</target>
        </trans-unit>
        <trans-unit id="49bba56082c8e3c9fff304ab7864ed3cb3a25fb5" translate="yes" xml:space="preserve">
          <source>EEx.SyntaxError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">EEx.SyntaxError &lt;small&gt;例外&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="98d18c239604c617df6f8788536838fd25d8c03d" translate="yes" xml:space="preserve">
          <source>EEx: &lt;code&gt;&amp;lt;%=&lt;/code&gt; in middle and end expressions</source>
          <target state="translated">EEx：中間式と終了式の &lt;code&gt;&amp;lt;%=&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7eceb14d6ed554f3e39c3487db659c8d63e28acd" translate="yes" xml:space="preserve">
          <source>ETS</source>
          <target state="translated">ETS</target>
        </trans-unit>
        <trans-unit id="1500176ef8cc8bfbbaf08eb4c1316bcf890f3395" translate="yes" xml:space="preserve">
          <source>ETS (Erlang Term Storage)</source>
          <target state="translated">ETS (Erlang Term Storage)</target>
        </trans-unit>
        <trans-unit id="4f5a2cc3fa91eb59c67ada064593bcea69c5e3b4" translate="yes" xml:space="preserve">
          <source>ETS allows us to store any Elixir term in an in-memory table. Working with ETS tables is done via &lt;a href=&quot;http://www.erlang.org/doc/man/ets.html&quot;&gt;Erlang&amp;rsquo;s &lt;code&gt;:ets&lt;/code&gt; module&lt;/a&gt;:</source>
          <target state="translated">ETSを使用すると、Elixir用語をメモリ内のテーブルに保存できます。ETSテーブルの操作は、&lt;a href=&quot;http://www.erlang.org/doc/man/ets.html&quot;&gt;Erlangの &lt;code&gt;:ets&lt;/code&gt; モジュールを&lt;/a&gt;介して行われます。</target>
        </trans-unit>
        <trans-unit id="8e8dd8378100a7f6cf535d73f581bb5835a296a0" translate="yes" xml:space="preserve">
          <source>ETS as a cache</source>
          <target state="translated">キャッシュとしてのETS</target>
        </trans-unit>
        <trans-unit id="0c6b672feadc74b2fa303a786fd5682cec52505f" translate="yes" xml:space="preserve">
          <source>ETS lets you create a table containing tuples. By default, ETS tables are protected, which means only the owner process may write to the table but any other process can read. ETS has some functionality to allow a table to be used as a simple database, a key-value store or as a cache mechanism.</source>
          <target state="translated">ETS を使用すると、タプルを含むテーブルを作成することができます。デフォルトでは、ETS のテーブルは保護されています。つまり、所有者のプロセスだけがテーブルに書き込むことができますが、他のプロセスは読み取ることができます。ETSには、テーブルを単純なデータベース、キー値ストア、キャッシュメカニズムとして使用するための機能があります。</target>
        </trans-unit>
        <trans-unit id="52adb6284390fce5741221672f061e71df403d05" translate="yes" xml:space="preserve">
          <source>ETS tables can also be named, allowing us to access them by a given name:</source>
          <target state="translated">ETSテーブルには名前を付けることもでき、与えられた名前でアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="362cea4d522d64f424e9ad3e438c8000b26fb5c9" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;enumerable&lt;/code&gt; element is passed as argument to the given function &lt;code&gt;fun&lt;/code&gt; and processed by its own task. The tasks will be linked to the current process, similarly to &lt;a href=&quot;#async/1&quot;&gt;&lt;code&gt;async/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 各要素は、引数として与えられた関数 &lt;code&gt;fun&lt;/code&gt; に渡され、独自のタスクによって処理されます。タスクは、&lt;a href=&quot;#async/1&quot;&gt; &lt;code&gt;async/1&lt;/code&gt; &lt;/a&gt;と同様に、現在のプロセスにリンクされます。</target>
        </trans-unit>
        <trans-unit id="c70223b508f5fb20c656733438516d9c4a38e207" translate="yes" xml:space="preserve">
          <source>Each application has an environment that stores the application&amp;rsquo;s specific configuration by key. For example, we could store the routing table in the &lt;code&gt;:kv&lt;/code&gt; application environment, giving it a default value and allowing other applications to change the table as needed.</source>
          <target state="translated">各アプリケーションには、アプリケーションの特定の構成をキー別に格納する環境があります。たとえば、ルーティングテーブルを &lt;code&gt;:kv&lt;/code&gt; アプリケーション環境に格納して、デフォルト値を指定し、他のアプリケーションが必要に応じてテーブルを変更できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="30b77596010e1d94e168b64218473fa0c4476548" translate="yes" xml:space="preserve">
          <source>Each application in our system can be started and stopped. The rules for starting and stopping an application are also defined in the &lt;code&gt;.app&lt;/code&gt; file. When we invoke &lt;code&gt;iex -S mix&lt;/code&gt;, Mix compiles our application and then starts it.</source>
          <target state="translated">システム内の各アプリケーションは、開始および停止できます。アプリケーションの起動と停止のルールも &lt;code&gt;.app&lt;/code&gt; ファイルで定義されています。 &lt;code&gt;iex -S mix&lt;/code&gt; を呼び出すと、Mixはアプリケーションをコンパイルして起動します。</target>
        </trans-unit>
        <trans-unit id="6ee7cee4e35c13e97e0b113c7ad93de2b2e9f9ff" translate="yes" xml:space="preserve">
          <source>Each element in &lt;code&gt;enumerable&lt;/code&gt; is passed as argument to the given function &lt;code&gt;fun&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and linked to the current process, similarly to &lt;a href=&quot;#async/2&quot;&gt;&lt;code&gt;async/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の各要素は、与えられた関数 &lt;code&gt;fun&lt;/code&gt; に引数として渡され、独自のタスクによって処理されます。タスクは、&lt;a href=&quot;#async/2&quot;&gt; &lt;code&gt;async/2&lt;/code&gt; &lt;/a&gt;と同様に、指定された &lt;code&gt;supervisor&lt;/code&gt; 下で生成され、現在のプロセスにリンクされます。</target>
        </trans-unit>
        <trans-unit id="0bff2b054449ef93f88ae378fceaa7c3773b512d" translate="yes" xml:space="preserve">
          <source>Each element in &lt;code&gt;enumerable&lt;/code&gt; is passed as argument to the given function &lt;code&gt;fun&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and will not be linked to the current process, similarly to &lt;a href=&quot;#async_nolink/2&quot;&gt;&lt;code&gt;async_nolink/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の各要素は、与えられた関数 &lt;code&gt;fun&lt;/code&gt; に引数として渡され、独自のタスクによって処理されます。タスクは、指定された &lt;code&gt;supervisor&lt;/code&gt; 下で生成され、&lt;a href=&quot;#async_nolink/2&quot;&gt; &lt;code&gt;async_nolink/2&lt;/code&gt; &lt;/a&gt;と同様に現在のプロセスにリンクされません。</target>
        </trans-unit>
        <trans-unit id="f8ff31374c6e0e1792073cfd7bf59921a2ee8196" translate="yes" xml:space="preserve">
          <source>Each element in &lt;code&gt;enumerable&lt;/code&gt; will be prepended to the given &lt;code&gt;args&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and will not be linked to the current process, similarly to &lt;a href=&quot;#async_nolink/4&quot;&gt;&lt;code&gt;async_nolink/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の各要素は、指定された &lt;code&gt;args&lt;/code&gt; 前に追加され、独自のタスクによって処理されます。タスクは、指定された &lt;code&gt;supervisor&lt;/code&gt; 下で生成され、&lt;a href=&quot;#async_nolink/4&quot;&gt; &lt;code&gt;async_nolink/4&lt;/code&gt; &lt;/a&gt;と同様に現在のプロセスにリンクされません。</target>
        </trans-unit>
        <trans-unit id="3e074b39ec3a1ed372a909c0a3201829b19421e8" translate="yes" xml:space="preserve">
          <source>Each element of &lt;code&gt;enumerable&lt;/code&gt; will be prepended to the given &lt;code&gt;args&lt;/code&gt; and processed by its own task. The tasks will be linked to an intermediate process that is then linked to the current process. This means a failure in a task terminates the current process and a failure in the current process terminates all tasks.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; の各要素は、指定された &lt;code&gt;args&lt;/code&gt; 前に追加され、独自のタスクによって処理されます。タスクは、現在のプロセスにリンクされている中間プロセスにリンクされます。これは、タスクの失敗により現在のプロセスが終了し、現在のプロセスの失敗によりすべてのタスクが終了することを意味します。</target>
        </trans-unit>
        <trans-unit id="ea81b39bec07b5eca51e7cb8e73b08cc88b185e5" translate="yes" xml:space="preserve">
          <source>Each element will be prepended to the given &lt;code&gt;args&lt;/code&gt; and processed by its own task. The tasks will be spawned under the given &lt;code&gt;supervisor&lt;/code&gt; and linked to the current process, similarly to &lt;a href=&quot;#async/4&quot;&gt;&lt;code&gt;async/4&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">各要素は、指定された &lt;code&gt;args&lt;/code&gt; 前に追加され、独自のタスクによって処理されます。タスクは、&lt;a href=&quot;#async/4&quot;&gt; &lt;code&gt;async/4&lt;/code&gt; &lt;/a&gt;と同様に、指定された &lt;code&gt;supervisor&lt;/code&gt; 下で生成され、現在のプロセスにリンクされます。</target>
        </trans-unit>
        <trans-unit id="77459e85ee4402d66fd92ef0b7844cafe8faeccd" translate="yes" xml:space="preserve">
          <source>Each entry in the registry is associated to the process that has registered the key. If the process crashes, the keys associated to that process are automatically removed. All key comparisons in the registry are done using the match operation (&lt;a href=&quot;kernel#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">レジストリの各エントリは、キーを登録したプロセスに関連付けられています。プロセスがクラッシュすると、そのプロセスに関連付けられたキーは自動的に削除されます。レジストリ内のすべてのキー比較は、一致操作（&lt;a href=&quot;kernel#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; &lt;/a&gt;）を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="f51dcc2b38618bcc3fe87f6cb31bfc9d58a91577" translate="yes" xml:space="preserve">
          <source>Each item in the list is a map with the following keys:</source>
          <target state="translated">リストの各項目は、以下のキーを持つマップです。</target>
        </trans-unit>
        <trans-unit id="532f0099dc0a59c8142722d964bd46289ef70cfc" translate="yes" xml:space="preserve">
          <source>Each key-value pair in the map is converted to a two-element tuple &lt;code&gt;{key, value}&lt;/code&gt; in the resulting list.</source>
          <target state="translated">マップ内の各キーと値のペアは、結果のリストで2要素のタプル &lt;code&gt;{key, value}&lt;/code&gt; に変換されます。</target>
        </trans-unit>
        <trans-unit id="4934170f741619738531430df9405d17c3b39b24" translate="yes" xml:space="preserve">
          <source>Each module can be decorated with one or more attributes. The following ones are currently defined by Elixir:</source>
          <target state="translated">各モジュールは、1つ以上の属性で装飾することができます。現在Elixirでは以下のものが定義されています。</target>
        </trans-unit>
        <trans-unit id="9ac8e172618067a3e6bc12be54b49bfe15535ac3" translate="yes" xml:space="preserve">
          <source>Each module gets an &lt;code&gt;__info__/1&lt;/code&gt; function when it's compiled. The function takes one of the following items:</source>
          <target state="translated">各モジュールは、コンパイル時に &lt;code&gt;__info__/1&lt;/code&gt; 関数を取得します。この関数は、次のいずれかの項目を取ります。</target>
        </trans-unit>
        <trans-unit id="e4ebc93808a7013b1682e04607e3d5c0727d33dc" translate="yes" xml:space="preserve">
          <source>Each number given to a binary is meant to represent a byte and therefore must go up to 255. Binaries allow modifiers to be given to store numbers bigger than 255 or to convert a code point to its UTF-8 representation:</source>
          <target state="translated">バイナリに与えられる各数値はバイトを表すものであるため、255までの数値を表す必要があります。バイナリでは、255よりも大きな数値を格納したり、コードポイントをUTF-8表現に変換したりするための修飾子を与えることができます。</target>
        </trans-unit>
        <trans-unit id="372725c1f82abeb98e09b054fcea454db1d9af25" translate="yes" xml:space="preserve">
          <source>Each process started with the application must be listed as a child under the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; above. We call those &quot;static processes&quot; because they are known upfront. For handling dynamic processes, such as the ones started during requests and other user inputs, look at the &lt;a href=&quot;dynamicsupervisor&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">アプリケーションで開始された各プロセスは、上記の&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt;下に子としてリストされている必要があります。これらは前もって知られているため、「静的プロセス」と呼びます。リクエストやその他のユーザー入力中に開始されたプロセスなどの動的プロセスの処理については、&lt;a href=&quot;dynamicsupervisor&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; &lt;/a&gt;モジュールをご覧ください。</target>
        </trans-unit>
        <trans-unit id="a1a597396bbd78d869061e9cc988eca475a9257e" translate="yes" xml:space="preserve">
          <source>Each task has its own options and sometimes specific configuration to be defined in the &lt;code&gt;project/0&lt;/code&gt; function. You can use &lt;a href=&quot;mix.tasks.help&quot;&gt;&lt;code&gt;mix help&lt;/code&gt;&lt;/a&gt; to list all available tasks and &lt;code&gt;mix help NAME&lt;/code&gt; to show help for a particular task.</source>
          <target state="translated">各タスクには独自のオプションがあり、時には &lt;code&gt;project/0&lt;/code&gt; 関数で定義される特定の構成があります。&lt;a href=&quot;mix.tasks.help&quot;&gt; &lt;code&gt;mix help&lt;/code&gt; &lt;/a&gt;を使用して使用可能なすべてのタスクを一覧表示し、 &lt;code&gt;mix help NAME&lt;/code&gt; を使用して特定のタスクのヘルプを表示できます。</target>
        </trans-unit>
        <trans-unit id="bcac1b6f9d120c9722086c7e508489b0226da684" translate="yes" xml:space="preserve">
          <source>Each variable is identified by a tuple of two elements, where the first element is the variable name as an atom and the second element is its context, which may be an atom or an integer.</source>
          <target state="translated">各変数は2つの要素のタプルで識別され、第1の要素は原子としての変数名であり、第2の要素はそのコンテキストであり、原子でも整数でもよい。</target>
        </trans-unit>
        <trans-unit id="68310c7d97bd5e9d47967e9e9edcb285e94d70ff" translate="yes" xml:space="preserve">
          <source>Eager to learn more? Keep reading!</source>
          <target state="translated">もっと知りたいですか?読み続けてください</target>
        </trans-unit>
        <trans-unit id="773015863b8b24712e29c53fe98994b9728f6381" translate="yes" xml:space="preserve">
          <source>Eager vs Lazy</source>
          <target state="translated">熱心さと怠惰さ</target>
        </trans-unit>
        <trans-unit id="28ac06af2cb7839cf14f9821c41dfad421032a0a" translate="yes" xml:space="preserve">
          <source>Echo server</source>
          <target state="translated">エコーサーバー</target>
        </trans-unit>
        <trans-unit id="eeccb169551120a3e6a633e63e844185e028c154" translate="yes" xml:space="preserve">
          <source>Edit the file at &lt;code&gt;lib/kv/registry.ex&lt;/code&gt;, filling in the blanks for the client API:</source>
          <target state="translated">&lt;code&gt;lib/kv/registry.ex&lt;/code&gt; にあるファイルを編集し、クライアントAPIの空白を埋めます。</target>
        </trans-unit>
        <trans-unit id="25857c2157bff6e7a9f798c89b04873173125f2d" translate="yes" xml:space="preserve">
          <source>Elements are compared using &lt;a href=&quot;kernel#===/2&quot;&gt;&lt;code&gt;===/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">要素は&lt;a href=&quot;kernel#===/2&quot;&gt; &lt;code&gt;===/2&lt;/code&gt; &lt;/a&gt;を使用して比較されます。</target>
        </trans-unit>
        <trans-unit id="b1bc7fb1f226e6f6f3ef7ee47c49d49289229118" translate="yes" xml:space="preserve">
          <source>Elements are only emitted when &lt;code&gt;fun&lt;/code&gt; returns a new value or the &lt;code&gt;enum&lt;/code&gt; finishes.</source>
          <target state="translated">要素は、 &lt;code&gt;fun&lt;/code&gt; が新しい値を返すか、 &lt;code&gt;enum&lt;/code&gt; 終了したときにのみ発行されます。</target>
        </trans-unit>
        <trans-unit id="c0c7bf14304705b88f3bf9ecdfcf919293c76e53" translate="yes" xml:space="preserve">
          <source>Elixir</source>
          <target state="translated">Elixir</target>
        </trans-unit>
        <trans-unit id="e5c4daa79e73a93f8dc527746d72ef1e1f99e8dd" translate="yes" xml:space="preserve">
          <source>Elixir 1.5.0 onwards</source>
          <target state="translated">エリクサー1.5.0以降</target>
        </trans-unit>
        <trans-unit id="67dd209de0ff8f0eac333c13b028cb684c348812" translate="yes" xml:space="preserve">
          <source>Elixir 1.9.0 onwards</source>
          <target state="translated">Elixir 1.9.0以降</target>
        </trans-unit>
        <trans-unit id="bff9443fa7cf4ae0bab8d5c8f1f4dab57c2d5acf" translate="yes" xml:space="preserve">
          <source>Elixir Forum</source>
          <target state="translated">エリクサーフォーラム</target>
        </trans-unit>
        <trans-unit id="de61752fa33c065b078b47c60fdefbfedf94b579" translate="yes" xml:space="preserve">
          <source>Elixir allows developers to attach arbitrary metadata to the documentation. This is done by passing a keyword list to the relevant attribute (such as &lt;code&gt;@moduledoc&lt;/code&gt;, &lt;code&gt;@typedoc&lt;/code&gt;, and &lt;code&gt;@doc&lt;/code&gt;). A commonly used metadata is &lt;code&gt;:since&lt;/code&gt;, which annotates in which version that particular module, function, type, or callback was added, as shown in the example above.</source>
          <target state="translated">Elixirを使用すると、開発者はドキュメントに任意のメタデータを添付できます。これは、（のような関連する属性にキーワードリストを渡すことによって行われ &lt;code&gt;@moduledoc&lt;/code&gt; 、 &lt;code&gt;@typedoc&lt;/code&gt; 、および &lt;code&gt;@doc&lt;/code&gt; ）。よく使用されるメタデータは &lt;code&gt;:since&lt;/code&gt; で、上記の例に示すように、特定のモジュール、関数、タイプ、またはコールバックが追加されたバージョンに注釈を付けます。</target>
        </trans-unit>
        <trans-unit id="3c0ee4efd422df64d926e1699ce27c5bdf0b25e6" translate="yes" xml:space="preserve">
          <source>Elixir allows integers to contain &lt;code&gt;_&lt;/code&gt; to separate digits and provides conveniences to represent integers in other bases:</source>
          <target state="translated">エリクサーでは、整数に &lt;code&gt;_&lt;/code&gt; を含めて数字を区切ることができ、整数を他の底で表すのに便利です。</target>
        </trans-unit>
        <trans-unit id="f75c26877ef871217ff6769618e4b459e83b4aa9" translate="yes" xml:space="preserve">
          <source>Elixir allows us to derive a protocol implementation based on the &lt;code&gt;Any&lt;/code&gt; implementation. Let&amp;rsquo;s first implement &lt;code&gt;Any&lt;/code&gt; as follows:</source>
          <target state="translated">Elixirを使用すると、 &lt;code&gt;Any&lt;/code&gt; 実装に基づいてプロトコル実装を導出できます。まず &lt;code&gt;Any&lt;/code&gt; を次のように実装しましょう：</target>
        </trans-unit>
        <trans-unit id="83c382416abbdb750f7a0b52274c72d3eeffa512" translate="yes" xml:space="preserve">
          <source>Elixir allows variables to be rebound via static single assignment:</source>
          <target state="translated">Elixirでは、静的な単一代入で変数をリバウンドさせることができます。</target>
        </trans-unit>
        <trans-unit id="0e0d77b67e657e2b9066c1ff6972927494c31617" translate="yes" xml:space="preserve">
          <source>Elixir allows you to skip the leading &lt;code&gt;:&lt;/code&gt; for the atoms &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">エリクサーはあなたがリードをスキップすることができます &lt;code&gt;:&lt;/code&gt; 原子のための &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;nil&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39ff842a6a4a3cf98a11fae4fd4498e3695c470e" translate="yes" xml:space="preserve">
          <source>Elixir already provides mechanisms to write your everyday code in a simple and readable fashion by using its data structures and functions. Macros should only be used as a last resort. Remember that &lt;strong&gt;explicit is better than implicit&lt;/strong&gt;. &lt;strong&gt;Clear code is better than concise code.&lt;/strong&gt;</source>
          <target state="translated">Elixirはすでに、そのデータ構造と関数を使用して、シンプルで読みやすい方法で日常のコードを作成するメカニズムを提供しています。マクロは最後の手段としてのみ使用してください。&lt;strong&gt;暗黙的よりも明示的の方が優れ&lt;/strong&gt;ていること&lt;strong&gt;に&lt;/strong&gt;注意してください。&lt;strong&gt;明確なコードは簡潔なコードよりも優れています。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3c84bd869e800cf00a0f15faeb1fec6f09ff020" translate="yes" xml:space="preserve">
          <source>Elixir already provides mechanisms to write your everyday code in a simple and readable fashion by using its data structures and functions. Macros should only be used as a last resort. Remember that &lt;strong&gt;explicit is better than implicit&lt;/strong&gt;. &lt;strong&gt;Clear code is better than concise code&lt;/strong&gt;.</source>
          <target state="translated">Elixirはすでに、そのデータ構造と関数を使用して、シンプルで読みやすい方法で日常のコードを作成するメカニズムを提供しています。マクロは最後の手段としてのみ使用してください。&lt;strong&gt;暗黙的よりも明示的の方が優れ&lt;/strong&gt;ていること&lt;strong&gt;に&lt;/strong&gt;注意してください。&lt;strong&gt;明確なコードは簡潔なコードよりも優れています&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="04d508ddfa3159bfde64248d0cbc115d950cb551" translate="yes" xml:space="preserve">
          <source>Elixir also accepts by default the segment to be a literal string or a literal charlist, which are by default expanded to integers:</source>
          <target state="translated">Elixirは、セグメントをリテラル文字列またはリテラル文字列にすることもできます。</target>
        </trans-unit>
        <trans-unit id="738cbc7a97733fcad20b5d4c9dce828da97453d5" translate="yes" xml:space="preserve">
          <source>Elixir also allows developers to enforce certain keys must always be given when building the struct:</source>
          <target state="translated">Elixirでは、構造体を構築する際に必ず与えなければならない特定のキーを強制することもできます。</target>
        </trans-unit>
        <trans-unit id="b2aeb44fb689a73ee1106300bdf2d7f03241fd14" translate="yes" xml:space="preserve">
          <source>Elixir also contains an &lt;a href=&quot;#ensure_compiled/1&quot;&gt;&lt;code&gt;ensure_compiled/1&lt;/code&gt;&lt;/a&gt; function that is a superset of &lt;a href=&quot;#ensure_loaded/1&quot;&gt;&lt;code&gt;ensure_loaded/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エリキシル剤はまた、含ま&lt;a href=&quot;#ensure_compiled/1&quot;&gt; &lt;code&gt;ensure_compiled/1&lt;/code&gt; &lt;/a&gt;のスーパーセットである機能&lt;a href=&quot;#ensure_loaded/1&quot;&gt; &lt;code&gt;ensure_loaded/1&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
