<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="fish">
    <body>
      <group id="fish">
        <trans-unit id="4f10862d2cb42eba3132cb49d2ba2a80e3864525" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to have a function &lt;code&gt;ll&lt;/code&gt;, you would add a text file &lt;code&gt;ll.fish&lt;/code&gt; to &lt;code&gt;~/.config/fish/functions&lt;/code&gt;:</source>
          <target state="translated">たとえば、関数 &lt;code&gt;ll&lt;/code&gt; が必要な場合は、テキストファイル &lt;code&gt;ll.fish&lt;/code&gt; を &lt;code&gt;~/.config/fish/functions&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="631584c9382e007cb93a95331a33fec25ea95d0e" translate="yes" xml:space="preserve">
          <source>For example, the following is a function definition that calls the command &lt;code&gt;ls&lt;/code&gt; with the argument '&lt;code&gt;-l&lt;/code&gt;' to print a detailed listing of the contents of the current directory:</source>
          <target state="translated">たとえば、次の関数定義は、引数 ' &lt;code&gt;-l&lt;/code&gt; 'を指定してコマンド &lt;code&gt;ls&lt;/code&gt; を呼び出し、現在のディレクトリの内容の詳細なリストを出力します。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="9b35e52823563d2df240637c363f5b52ee523904" translate="yes" xml:space="preserve">
          <source>For examples of how to write your own complex completions, study the completions in &lt;code&gt;/usr/share/fish/completions&lt;/code&gt;. (The exact path depends on your chosen installation prefix and may be slightly different)</source>
          <target state="translated">独自の複雑な補完を作成する方法の例については、 &lt;code&gt;/usr/share/fish/completions&lt;/code&gt; で補完を調べてください。（正確なパスは、選択したインストールプレフィックスによって異なり、多少異なる場合があります）</target>
        </trans-unit>
        <trans-unit id="bbba6181daff6006d824b40726c5e1dc21c20696" translate="yes" xml:space="preserve">
          <source>For loops can be used to iterate over a list. For example, a list of files:</source>
          <target state="translated">Forループは、リストの反復処理に使用することができます。例えば、ファイルのリストなどです。</target>
        </trans-unit>
        <trans-unit id="0d3b4b55cdd235f8a297cfd58fd2b4aaeb478949" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</source>
          <target state="translated">詳細については、 &lt;code&gt;fish&lt;/code&gt; マニュアルの「&lt;a href=&quot;index#debugging&quot;&gt;debug fishスクリプト&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="2fc141152e052520326e534bbd191caeb550504d" translate="yes" xml:space="preserve">
          <source>For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; command.</source>
          <target state="translated">新しいイベントハンドラーの定義方法の詳細については、&lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt;コマンドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6895247d91fcffa104e9a4003d47294a8b67a455" translate="yes" xml:space="preserve">
          <source>For more information, read the documentation for the block constructs, such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;.</source>
          <target state="translated">詳細については、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; などのブロック構造のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b8d92b5c7148803c36e855152c078c15224a9486" translate="yes" xml:space="preserve">
          <source>For numbers, &lt;code&gt;.&lt;/code&gt; is always the radix character regardless of locale - &lt;code&gt;2.5&lt;/code&gt;, not &lt;code&gt;2,5&lt;/code&gt;. Scientific notation (&lt;code&gt;10e5&lt;/code&gt;) is also available.</source>
          <target state="translated">番号については、 &lt;code&gt;.&lt;/code&gt; ロケールに関係なく、常に基数文字です &lt;code&gt;2.5&lt;/code&gt; ではなく、 &lt;code&gt;2,5&lt;/code&gt; です。科学表記（ &lt;code&gt;10e5&lt;/code&gt; ）も使用できます。</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">よくある質問</target>
        </trans-unit>
        <trans-unit id="817a23516d79c9310b8cbcd3fbb553ae7f962425" translate="yes" xml:space="preserve">
          <source>From an interactive shell, the commands below exit with a return value of zero:</source>
          <target state="translated">対話型シェルからは、以下のコマンドは戻り値ゼロで終了します。</target>
        </trans-unit>
        <trans-unit id="68add3d9773584e2619f672ebe5f9d4745e5e9ea" translate="yes" xml:space="preserve">
          <source>From now on, we'll pretend your prompt is just a '&lt;code&gt;&amp;gt;&lt;/code&gt;' to save space.</source>
          <target state="translated">これからは、スペースを節約するために、プロンプトが単なる ' &lt;code&gt;&amp;gt;&lt;/code&gt; 'であると仮定します。</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="daf9c1f469f134e463969d3e8181e558bbde191a" translate="yes" xml:space="preserve">
          <source>Functions are programs written in the fish syntax. They group together one or more commands and their arguments using a single name. It can also be used to start a specific command with additional arguments.</source>
          <target state="translated">関数は魚の構文で書かれたプログラムです。1つ以上のコマンドとその引数を1つの名前でグループ化します。また、追加の引数で特定のコマンドを起動するために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="89f90915711f79d63d40ae94fbe45e944677e599" translate="yes" xml:space="preserve">
          <source>Functions beginning with the string &lt;code&gt;__fish_print_&lt;/code&gt; print a newline separated list of strings. For example, &lt;code&gt;__fish_print_filesystems&lt;/code&gt; prints a list of all known file systems. Functions beginning with &lt;code&gt;__fish_complete_&lt;/code&gt; print out a newline separated list of completions with descriptions. The description is separated from the completion by a tab character.</source>
          <target state="translated">文字列 &lt;code&gt;__fish_print_&lt;/code&gt; で始まる関数は、改行で区切られた文字列のリストを出力します。たとえば、 &lt;code&gt;__fish_print_filesystems&lt;/code&gt; は、すべての既知のファイルシステムのリストを出力します。 &lt;code&gt;__fish_complete_&lt;/code&gt; で始まる関数は、説明と補完の改行区切りリストを出力します。説明はタブ文字で補完と区切られます。</target>
        </trans-unit>
        <trans-unit id="bfd6b853607d78b9cac90686ca5ac5f2f2bd0492" translate="yes" xml:space="preserve">
          <source>Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This method of defining functions has several advantages. An autoloaded function becomes available automatically to all running shells. If the function definition is changed, all running shells will automatically reload the altered version. Startup time and memory usage is improved, etc.</source>
          <target state="translated">関数はコマンドラインや設定ファイルで定義できますが、自動的にロードすることもできます。この方法にはいくつかの利点があります。オートロードされた関数は、すべての実行中のシェルで自動的に利用できるようになります。関数の定義が変更された場合、すべての実行中のシェルは自動的に変更後のバージョンをリロードします。起動時間やメモリ使用量などが改善されます。</target>
        </trans-unit>
        <trans-unit id="45aaac446e8af8ab443ebb79de1921177d9fc9c4" translate="yes" xml:space="preserve">
          <source>Fundle</source>
          <target state="translated">Fundle</target>
        </trans-unit>
        <trans-unit id="1dbc937890de836b0044393faedad472b64f7496" translate="yes" xml:space="preserve">
          <source>Further help and development</source>
          <target state="translated">さらなる支援と開発</target>
        </trans-unit>
        <trans-unit id="bcbbc69b089ac1c6106198168f95bbc56b4fa684" translate="yes" xml:space="preserve">
          <source>Future feature flags</source>
          <target state="translated">将来の機能フラグ</target>
        </trans-unit>
        <trans-unit id="3dc04827b1d89f032f341434dadfd4fcc6c503c2" translate="yes" xml:space="preserve">
          <source>GNU style long options, like '&lt;code&gt;--colors&lt;/code&gt;'. GNU style long options can be more than one character long, are preceded by two hyphens, and may not be grouped together. Option arguments may be specified in the following parameter ('&lt;code&gt;--quoting-style shell&lt;/code&gt;') or by appending the option with a '&lt;code&gt;=&lt;/code&gt;' and the value ('&lt;code&gt;--quoting-style=shell&lt;/code&gt;'). GNU style long options may be abbreviated so long as the abbreviation is unique ('&lt;code&gt;--h&lt;/code&gt;') is equivalent to '&lt;code&gt;--help&lt;/code&gt;' if help is the only long option beginning with an 'h').</source>
          <target state="translated">' &lt;code&gt;--colors&lt;/code&gt; 'のようなGNUスタイルの長いオプション。GNUスタイルの長いオプションは、2文字以上にすることができ、2つのハイフンが前に付くため、一緒にグループ化することはできません。オプションの引数は、次のパラメーターで指定するか（ ' &lt;code&gt;--quoting-style shell&lt;/code&gt; '）、またはオプションに ' &lt;code&gt;=&lt;/code&gt; 'と値を追加します（ ' &lt;code&gt;--quoting-style=shell&lt;/code&gt; '）。GNUスタイルの長いオプションは、省略形が一意である限り省略できます（ ' &lt;code&gt;--h&lt;/code&gt; '）は、 'h'で始まる唯一の長いオプションである場合、 ' &lt;code&gt;--help&lt;/code&gt; ' と同等です）。</target>
        </trans-unit>
        <trans-unit id="d19c496fc9fc5f17e29b156659c99fdebbdf355e" translate="yes" xml:space="preserve">
          <source>Get the length of a list with &lt;code&gt;count&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; を使用してリストの長さを取得します。</target>
        </trans-unit>
        <trans-unit id="9a0f73ca6aa746ede1e77153dd3bf5bb16e841ab" translate="yes" xml:space="preserve">
          <source>Getting Help</source>
          <target state="translated">助けを求める</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">始めるには</target>
        </trans-unit>
        <trans-unit id="097b5d5320d0735796306d389e915b1392ea4a90" translate="yes" xml:space="preserve">
          <source>Groups:</source>
          <target state="translated">Groups:</target>
        </trans-unit>
        <trans-unit id="c47ae15370cfe1ed2781eedc1dc2547d12d9e972" translate="yes" xml:space="preserve">
          <source>Help</source>
          <target state="translated">Help</target>
        </trans-unit>
        <trans-unit id="0053f4880938c6ad45d9f6ae784ae7aa588de2e2" translate="yes" xml:space="preserve">
          <source>Help on a specific builtin can also be obtained with the &lt;code&gt;-h&lt;/code&gt; parameter. For instance, to obtain help on the &lt;code&gt;fg&lt;/code&gt; builtin, either type &lt;code&gt;fg -h&lt;/code&gt; or &lt;code&gt;help fg&lt;/code&gt;.</source>
          <target state="translated">特定の組み込みに関するヘルプは、 &lt;code&gt;-h&lt;/code&gt; パラメーターを使用して取得することもできます。たとえば、組み込みの &lt;code&gt;fg&lt;/code&gt; に関するヘルプを表示するには、 &lt;code&gt;fg -h&lt;/code&gt; または &lt;code&gt;help fg&lt;/code&gt; と入力します。</target>
        </trans-unit>
        <trans-unit id="4f5d69f1e4fa9190f3df409c8af9094f4963c8a1" translate="yes" xml:space="preserve">
          <source>Here is a list of some useful commands:</source>
          <target state="translated">ここでは、いくつかの便利なコマンドを紹介します。</target>
        </trans-unit>
        <trans-unit id="7a509c793438fa230f1278ed402f9c7e9018572d" translate="yes" xml:space="preserve">
          <source>History searches can be aborted by pressing the escape key.</source>
          <target state="translated">エスケープキーを押すことで履歴検索を中止することができます。</target>
        </trans-unit>
        <trans-unit id="67bc332b46b3f3dc1b8024a5e5cfdee70680168b" translate="yes" xml:space="preserve">
          <source>Hit tab again to cycle through the possibilities.</source>
          <target state="translated">もう一度タブを押して、可能性を循環させます。</target>
        </trans-unit>
        <trans-unit id="0fb159db1e28fce0aea599e71e51612c11b25f22" translate="yes" xml:space="preserve">
          <source>Home directory expansion</source>
          <target state="translated">ホームディレクトリの拡張</target>
        </trans-unit>
        <trans-unit id="d5208f2bd161f7ef9e4786ba2058053cc8cefa22" translate="yes" xml:space="preserve">
          <source>How can I use `-` as a shortcut for `cd -`?</source>
          <target state="translated">cd -` のショートカットとして `-` を使うにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="ba1155cc4fa464e6593f08ba2b8723aab74c8f1c" translate="yes" xml:space="preserve">
          <source>How do I change the greeting message?</source>
          <target state="translated">挨拶文を変更するには?</target>
        </trans-unit>
        <trans-unit id="13c4a91c9a86c9c981e277c7f5e4a2ed6189509e" translate="yes" xml:space="preserve">
          <source>How do I customize my syntax highlighting colors?</source>
          <target state="translated">シンタックスハイライトの色をカスタマイズするには?</target>
        </trans-unit>
        <trans-unit id="a694102af5424918d28a1f9662a1aa3950673c08" translate="yes" xml:space="preserve">
          <source>How do I get the exit status of a command?</source>
          <target state="translated">コマンドの終了ステータスを取得するには?</target>
        </trans-unit>
        <trans-unit id="0e58d9d321d50cf0c49be8ad0ed48955a88a6bce" translate="yes" xml:space="preserve">
          <source>How do I make fish my default shell?</source>
          <target state="translated">魚をデフォルトのシェルにするには?</target>
        </trans-unit>
        <trans-unit id="bc538e8432ebecf3f9f7a45d7ccb524d4da71c7d" translate="yes" xml:space="preserve">
          <source>How do I run a command every login? What's fish's equivalent to .bashrc?</source>
          <target state="translated">ログインするたびにコマンドを実行するには?フィッシュの.bashrcと同等のものは何ですか?</target>
        </trans-unit>
        <trans-unit id="9d52246c1acb2dd2ad95298d27dac048384b6b2b" translate="yes" xml:space="preserve">
          <source>How do I run a command from history?</source>
          <target state="translated">履歴からコマンドを実行するには?</target>
        </trans-unit>
        <trans-unit id="7c2282706e5d5da05460852fe614e0ea089754e8" translate="yes" xml:space="preserve">
          <source>How do I run a subcommand? The backtick doesn't work!</source>
          <target state="translated">サブコマンドを実行するには?バックティックが効かない!?</target>
        </trans-unit>
        <trans-unit id="240782fc9c5f0b5d6c4cc74b05803ec8fdfa4ffc" translate="yes" xml:space="preserve">
          <source>How do I set an environment variable for just one command?</source>
          <target state="translated">1つのコマンドだけに環境変数を設定するには?</target>
        </trans-unit>
        <trans-unit id="cf01f8cfda8ac7fdc0ad1cfce27146791559db05" translate="yes" xml:space="preserve">
          <source>How do I set my prompt?</source>
          <target state="translated">プロンプトの設定方法は?</target>
        </trans-unit>
        <trans-unit id="a7f2b2fb54e2d471e8f341688e112fc1e1ce9d80" translate="yes" xml:space="preserve">
          <source>How do I set or clear an environment variable?</source>
          <target state="translated">環境変数を設定したりクリアしたりするには?</target>
        </trans-unit>
        <trans-unit id="1bbce1c02cef5225c09fe183c39555282f316dab" translate="yes" xml:space="preserve">
          <source>How do I update man page completions?</source>
          <target state="translated">マンページの補完を更新するにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="8755f1ac4179b2490bfd8d3384a3c541bc0e9557" translate="yes" xml:space="preserve">
          <source>However sometimes, especially with &lt;code&gt;pkg-config&lt;/code&gt; and related tools, splitting on spaces is needed.</source>
          <target state="translated">ただし、ときどき、特に &lt;code&gt;pkg-config&lt;/code&gt; および関連ツールでは、スペースの分割が必要になります。</target>
        </trans-unit>
        <trans-unit id="54bce717b6b4bc0facb17b1202d46c84a308e996" translate="yes" xml:space="preserve">
          <source>However using variables as indices for command substitution is currently not supported, so</source>
          <target state="translated">しかし、変数をインデックスとして使用することは現在のところサポートされていません。</target>
        </trans-unit>
        <trans-unit id="3ece1cae89b5ddaf2b419721f67d267e2d87fe0b" translate="yes" xml:space="preserve">
          <source>However, it is more common and efficient to use autoloading functions and universal variables.</source>
          <target state="translated">しかし、オートローディング関数やユニバーサル変数を使用する方が一般的で効率的です。</target>
        </trans-unit>
        <trans-unit id="332860b83cabf222387565b3cbb3a4ca2b6a60c7" translate="yes" xml:space="preserve">
          <source>I accidentally entered a directory path and fish changed directory. What happened?</source>
          <target state="translated">誤ってディレクトリパスを入力してしまい、魚がディレクトリを変更してしまいました。何が起こったのでしょうか?</target>
        </trans-unit>
        <trans-unit id="077b540fd621e89ad74c3aa41ae8c6bb0c4148b1" translate="yes" xml:space="preserve">
          <source>I'm seeing weird output before each prompt when using screen. What's wrong?</source>
          <target state="translated">screenを使っていると、各プロンプトの前に変な出力が出てきます。何か問題があるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="7884771064847db56c0b28c42a19e5f67be016fb" translate="yes" xml:space="preserve">
          <source>If $animals is a list of animals, the following will test if it contains a cat:</source>
          <target state="translated">animalsが動物のリストの場合、以下は猫が含まれているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="6288311089317cecbe49c2b077270e72c24f0c74" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$animal&lt;/code&gt; was set to &quot;banana&quot;, it would print &quot;I have no idea what a banana is&quot;.</source>
          <target state="translated">場合は &lt;code&gt;$animal&lt;/code&gt; 「バナナ」に設定し、それは「私はバナナが何であるか見当がつかない」印刷します。</target>
        </trans-unit>
        <trans-unit id="6529dd48f4bbe7af35d8ee17e053a860dce8bc42" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt;. If they are found they are removed from the arguments and local variables (more on this &lt;a href=&quot;argparse-local-variables&quot;&gt;below&lt;/a&gt;) are set so the script can determine which options were seen. Assuming &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, such as a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with status zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</source>
          <target state="translated">&lt;code&gt;$argv&lt;/code&gt; が空の場合、解析するものは何もなく、 &lt;code&gt;argparse&lt;/code&gt; は成功を示すためにゼロを返します。 &lt;code&gt;$argv&lt;/code&gt; が空でない場合、フラグ &lt;code&gt;-h&lt;/code&gt; 、-- &lt;code&gt;--help&lt;/code&gt; 、 &lt;code&gt;-n&lt;/code&gt; 、および &lt;code&gt;--name&lt;/code&gt; がチェックされます。彼らが発見された場合、それらは、引数とローカル変数（この詳細から削除されている&lt;a href=&quot;argparse-local-variables&quot;&gt;以下の&lt;/a&gt;スクリプトが見られたどのオプションを判別できるように設定されています）。 &lt;code&gt;$argv&lt;/code&gt; オプションの必須値がないなどのエラーがないと仮定すると、 &lt;code&gt;argparse&lt;/code&gt; はステータス0で終了します。それ以外の場合は、適切なエラーメッセージをstderrに書き込み、ステータス1で終了します。</target>
        </trans-unit>
        <trans-unit id="18c0231ee0546ad7aeb3f50a1a68cbc1c85d1797" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--index&lt;/code&gt; or &lt;code&gt;-n&lt;/code&gt; is given, each match is reported as a 1-based start position and a length. By default, PATTERN is interpreted as a glob pattern matched against each entire STRING argument. A glob pattern is only considered a valid match if it matches the entire STRING.</source>
          <target state="translated">&lt;code&gt;--index&lt;/code&gt; または &lt;code&gt;-n&lt;/code&gt; が指定されている場合、各一致は1から始まる開始位置と長さとして報告されます。デフォルトでは、PATTERNはSTRING引数全体と照合されるグロブパターンとして解釈されます。globパターンは、STRING全体と一致する場合にのみ有効な一致と見なされます。</target>
        </trans-unit>
        <trans-unit id="dbf8f89e324b9e1f656b472c919d4c7a437efce4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--invert&lt;/code&gt; or &lt;code&gt;-v&lt;/code&gt; is used the selected lines will be only those which do not match the given glob pattern or regular expression.</source>
          <target state="translated">場合 &lt;code&gt;--invert&lt;/code&gt; または &lt;code&gt;-v&lt;/code&gt; が使用されている選択した行のみが与えられたグロブパターンや正規表現に一致しないものになります。</target>
        </trans-unit>
        <trans-unit id="bca5e01e9673f9e6a815d4bc3b45775fa51fbbf4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--regex&lt;/code&gt; or &lt;code&gt;-r&lt;/code&gt; is given, PATTERN is interpreted as a Perl-compatible regular expression, which does not have to match the entire STRING. For a regular expression containing capturing groups, multiple items will be reported for each match, one for the entire match and one for each capturing group. With this, only the matching part of the STRING will be reported, unless &lt;code&gt;--entire&lt;/code&gt; is given.</source>
          <target state="translated">&lt;code&gt;--regex&lt;/code&gt; または &lt;code&gt;-r&lt;/code&gt; が指定されている場合、PATTERNはPerl互換の正規表現として解釈され、STRING全体と一致する必要はありません。キャプチャグループを含む正規表現の場合、一致ごとに1つ、一致全体とキャプチャグループごとに1つずつ、複数のアイテムが報告されます。これにより、 &lt;code&gt;--entire&lt;/code&gt; が指定されていない限り、STRINGの一致する部分のみが報告されます。</target>
        </trans-unit>
        <trans-unit id="4e269b8b85f5f48b405e1f529c5cc1623456789e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--array&lt;/code&gt; is provided, only one variable name is allowed and the tokens are stored as an array in this variable.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; または &lt;code&gt;--array&lt;/code&gt; が指定されている場合、1つの変数名のみが許可され、トークンはこの変数に配列として格納されます。</target>
        </trans-unit>
        <trans-unit id="a6dcb1b88668c5c41c70fbdad2157ee6171f60f0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-e&lt;/code&gt; is used, the following sequences are recognized:</source>
          <target state="translated">場合は &lt;code&gt;-e&lt;/code&gt; が使用され、以下の配列が認識されます。</target>
        </trans-unit>
        <trans-unit id="e5d5482f59147347f76e114d12618ff3d78fea80" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--regex&lt;/code&gt; is given, PATTERN is interpreted as a Perl-compatible regular expression, and REPLACEMENT can contain C-style escape sequences like &lt;code&gt;\t&lt;/code&gt; as well as references to capturing groups by number or name as &lt;code&gt;$n&lt;/code&gt; or &lt;code&gt;${n}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; または &lt;code&gt;--regex&lt;/code&gt; が指定されている場合、PATTERNはPerl互換の正規表現として解釈され、REPLACEMENTには、 &lt;code&gt;\t&lt;/code&gt; などのCスタイルのエスケープシーケンスと、 &lt;code&gt;$n&lt;/code&gt; または &lt;code&gt;${n}&lt;/code&gt; としての番号または名前によるキャプチャグループへの参照を含めることができます。n}。</target>
        </trans-unit>
        <trans-unit id="227584b023d6d2c7837f693e7e9b190c0c0b3bf5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; and &lt;code&gt;REASON&lt;/code&gt; are both specified, &lt;code&gt;ARG&lt;/code&gt; is the command to be executed when the event specified by &lt;code&gt;REASON&lt;/code&gt; occurs (e.g., the signal is delivered).</source>
          <target state="translated">&lt;code&gt;ARG&lt;/code&gt; と &lt;code&gt;REASON&lt;/code&gt; の両方が指定されている場合、 &lt;code&gt;ARG&lt;/code&gt; は、 &lt;code&gt;REASON&lt;/code&gt; で指定されたイベントが発生した（たとえば、シグナルが配信された）ときに実行されるコマンドです。</target>
        </trans-unit>
        <trans-unit id="d6a059f39530ea46f03b1a88f280774a9e1b7e4c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; is absent (and there is a single REASON) or -, each specified signal is reset to its original disposition (the value it had upon entrance to the shell). If &lt;code&gt;ARG&lt;/code&gt; is the null string the signal specified by each &lt;code&gt;REASON&lt;/code&gt; is ignored by the shell and by the commands it invokes.</source>
          <target state="translated">場合 &lt;code&gt;ARG&lt;/code&gt; が存在しない（および単一理由がある）又は- 、指定された各信号は、元の配置（これはシェルの入口上にあった値）にリセットされます。 &lt;code&gt;ARG&lt;/code&gt; がヌル文字列の場合、各 &lt;code&gt;REASON&lt;/code&gt; によって指定されたシグナルは、シェルとそれが呼び出すコマンドによって無視されます。</target>
        </trans-unit>
        <trans-unit id="0310897c6525d4c0a20301e5b59490367df8d786" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; is not present and &lt;code&gt;-p&lt;/code&gt; has been supplied, then the trap commands associated with each &lt;code&gt;REASON&lt;/code&gt; are displayed. If no arguments are supplied or if only &lt;code&gt;-p&lt;/code&gt; is given, &lt;code&gt;trap&lt;/code&gt; prints the list of commands associated with each signal.</source>
          <target state="translated">場合 &lt;code&gt;ARG&lt;/code&gt; が存在せず、 &lt;code&gt;-p&lt;/code&gt; は、供給された後、それぞれに関連するトラップコマンド &lt;code&gt;REASON&lt;/code&gt; 表示されています。引数が指定されていない場合、または &lt;code&gt;-p&lt;/code&gt; のみが指定されている場合、 &lt;code&gt;trap&lt;/code&gt; は各シグナルに関連付けられているコマンドのリストを出力します。</target>
        </trans-unit>
        <trans-unit id="46f4e7706aaa7715626c2065fdf439e268266771" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is a relative path, the paths found in the &lt;code&gt;CDPATH&lt;/code&gt; environment variable array will be tried as prefixes for the specified path.</source>
          <target state="translated">&lt;code&gt;DIRECTORY&lt;/code&gt; が相対パスの場合、 &lt;code&gt;CDPATH&lt;/code&gt; 環境変数配列にあるパスが、指定されたパスのプレフィックスとして試行されます。</target>
        </trans-unit>
        <trans-unit id="6d211b5295328f27c5f4dda2c5b64e33b2d339ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is supplied, it will become the new directory. If no parameter is given, the contents of the &lt;code&gt;HOME&lt;/code&gt; environment variable will be used.</source>
          <target state="translated">場合は &lt;code&gt;DIRECTORY&lt;/code&gt; 供給され、それは、新しいディレクトリになります。パラメータを指定しない場合、 &lt;code&gt;HOME&lt;/code&gt; 環境変数の内容が使用されます。</target>
        </trans-unit>
        <trans-unit id="ee49ba74d2c75163466a92ec95757c32496b3231" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandline&lt;/code&gt; is called during a call to complete a given string using &lt;code&gt;complete -C STRING&lt;/code&gt;, &lt;code&gt;commandline&lt;/code&gt; will consider the specified string to be the current contents of the command line.</source>
          <target state="translated">場合は &lt;code&gt;commandline&lt;/code&gt; 使用して、指定された文字列を完了するために、通話中に呼び出され &lt;code&gt;complete -C STRING&lt;/code&gt; 、 &lt;code&gt;commandline&lt;/code&gt; 指定した文字列は、コマンドラインの現在の内容であると考えます。</target>
        </trans-unit>
        <trans-unit id="1145ddb3bdeee96521a717d934a15cc64d95077c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fish&lt;/code&gt; encounters a problem while executing a command, the status variable may also be set to a specific value:</source>
          <target state="translated">コマンドの実行中に &lt;code&gt;fish&lt;/code&gt; で問題が発生した場合、ステータス変数も特定の値に設定される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f09fbf7f2a9a04bff01d5330effffef51795cab0" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;SECTION&lt;/code&gt; is specified, the help for that command is shown.</source>
          <target state="translated">場合 &lt;code&gt;SECTION&lt;/code&gt; が指定され、そのコマンドのヘルプが表示されます。</target>
        </trans-unit>
        <trans-unit id="8ebee8483e83b06811ff3ba9ccc429433dce33cd" translate="yes" xml:space="preserve">
          <source>If a function named &lt;code&gt;fish_greeting&lt;/code&gt; exists, it will be run when entering interactive mode. Otherwise, if an environment variable named &lt;code&gt;fish_greeting&lt;/code&gt; exists, it will be printed.</source>
          <target state="translated">&lt;code&gt;fish_greeting&lt;/code&gt; という名前の関数が存在する場合、インタラクティブモードに入るときに実行されます。それ以外の場合、 &lt;code&gt;fish_greeting&lt;/code&gt; という名前の環境変数が存在すると、それが出力されます。</target>
        </trans-unit>
        <trans-unit id="236d9b2bfa9ffd703bff82e438702935d8f276d3" translate="yes" xml:space="preserve">
          <source>If a job is stopped, it is sent a signal to continue running, and a warning is printed. It is not possible to use the &lt;code&gt;bg&lt;/code&gt; builtin to continue a job once it has been disowned.</source>
          <target state="translated">ジョブが停止すると、実行を継続するシグナルが送信され、警告が出力されます。取り消されたジョブを続行するために組み込みの &lt;code&gt;bg&lt;/code&gt; を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="60e2a752180a8997dd97af87732b5ed3a03f8d8f" translate="yes" xml:space="preserve">
          <source>If a numeric mask is specified as a parameter, the current shell's umask will be set to that value, and the rights specified by that mask will be removed from new files and directories by default.</source>
          <target state="translated">数値マスクがパラメータとして指定された場合、現在のシェルの umask はその値に設定され、そのマスクで指定された権利はデフォルトで新しいファイルやディレクトリから削除されます。</target>
        </trans-unit>
        <trans-unit id="2dde9e658888f495cea69c0ad8b260a62416e91a" translate="yes" xml:space="preserve">
          <source>If a pid is specified, the command waits for the job that the process with the pid belongs to.</source>
          <target state="translated">pid が指定された場合は、その pid を持つプロセスが属するジョブを待ちます。</target>
        </trans-unit>
        <trans-unit id="f851c83c3c3953c372c81382f02613c546f275f0" translate="yes" xml:space="preserve">
          <source>If a process exits through a signal, the exit status will be 128 plus the number of the signal.</source>
          <target state="translated">シグナルを経由してプロセスが終了する場合、終了ステータスは128にシグナルの番号を加えたものになります。</target>
        </trans-unit>
        <trans-unit id="47cb47829c9383def1fb8361853c4c7dd09368a8" translate="yes" xml:space="preserve">
          <source>If a process name is specified, the command waits for the jobs that the matched processes belong to.</source>
          <target state="translated">プロセス名を指定すると、一致したプロセスが属するジョブを待ちます。</target>
        </trans-unit>
        <trans-unit id="302f9ccffa6bb045e0895a185f5c9e50859c884f" translate="yes" xml:space="preserve">
          <source>If a script produces output, it should finish by calling &lt;code&gt;commandline -f repaint&lt;/code&gt; to tell fish that a repaint is in order.</source>
          <target state="translated">スクリプトが出力を生成する場合は、 &lt;code&gt;commandline -f repaint&lt;/code&gt; を呼び出して再描画が適切であることを魚に通知することで終了します。</target>
        </trans-unit>
        <trans-unit id="67026ba945428dc31827715c1565311d33b5af8d" translate="yes" xml:space="preserve">
          <source>If a star (&lt;code&gt;*&lt;/code&gt;) or a question mark (&lt;code&gt;?&lt;/code&gt;) is present in the parameter, &lt;code&gt;fish&lt;/code&gt; attempts to match the given parameter to any files in such a way that:</source>
          <target state="translated">スター（ &lt;code&gt;*&lt;/code&gt; ）または疑問符（ &lt;code&gt;?&lt;/code&gt; ）がパラメーターに含まれている場合、 &lt;code&gt;fish&lt;/code&gt; は指定されたパラメーターを次のような方法で任意のファイルに一致させようとします。</target>
        </trans-unit>
        <trans-unit id="18a6fd00e4b1ddec496d39ba9f288b25c849a5d6" translate="yes" xml:space="preserve">
          <source>If a symbolic mask is specified, the desired permission bits, and not the inverse, should be specified. A symbolic mask is a comma separated list of rights. Each right consists of three parts:</source>
          <target state="translated">シンボリックマスクが指定されている場合は、その逆ではなく、所望の許可ビットを指定する必要があります。シンボリックマスクは、カンマで区切られた権利のリストである。各権利は 3 つの部分から構成される。</target>
        </trans-unit>
        <trans-unit id="c3bd46787a5c6b92e6f20cfe4fbc883c75045f2a" translate="yes" xml:space="preserve">
          <source>If a variable has global scope, it is accessible read-write to functions whether it is exported or not.</source>
          <target state="translated">変数がグローバルスコープを持つ場合、エクスポートされているかどうかに関わらず、関数への読み書きが可能です。</target>
        </trans-unit>
        <trans-unit id="741d44bccaaf674b1d069d14a1bdb399e238d593" translate="yes" xml:space="preserve">
          <source>If a variable has local scope and is exported, any function called receives a &lt;em&gt;copy&lt;/em&gt; of it, so any changes it makes to the variable disappear once the function returns.</source>
          <target state="translated">変数にローカルスコープがあり、エクスポートされた場合、呼び出された関数はその&lt;em&gt;コピー&lt;/em&gt;を受け取ります。そのため、変数が変数に加えた変更は、関数が戻ると消えます。</target>
        </trans-unit>
        <trans-unit id="2cbdc88f5e9bb2f3b40009d0379b55ab2352ae84" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to either be exported or not exported, that setting will be honored.</source>
          <target state="translated">変数が明示的にエクスポートされるかどうかが設定されている場合は、その設定が優先されます。</target>
        </trans-unit>
        <trans-unit id="ce6484065868b4e9c43f6db14f55a84fe136a4bf" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to either universal, global or local, that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.</source>
          <target state="translated">変数が明示的にユニバーサル、グローバル、ローカルのいずれかに設定されている場合は、その設定が尊重されます。同じ名前の変数が別のスコープに存在する場合、その変数は変更されません。</target>
        </trans-unit>
        <trans-unit id="326eb232490e8df93b49fd2c3a89fde63906ed77" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either exported or not exported and has never before been defined, the variable will not be exported.</source>
          <target state="translated">エクスポートするかしないかが明示的に設定されておらず、これまでに一度も定義されたことがない変数の場合、その変数はエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="ef107fe0701094bebbf7a6322c1155614a1be3ba" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either exported or unexported and has never before been defined, the variable will not be exported.</source>
          <target state="translated">変数が明示的にエクスポートまたはエクスポートされないように設定されておらず、一度も定義されたことがない場合、変数はエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="bd6c17ea05cd6c81f352d96759e2622e4a16e84b" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local and has never before been defined, the variable will be local to the currently executing function. Note that this is different from using the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.</source>
          <target state="translated">変数が明示的にユニバーサル、グローバル、またはローカルに設定されておらず、かつて定義されたことがない場合、変数は現在実行中の関数に対してローカルになります。これは、 &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--local&lt;/code&gt; フラグの使用とは異なることに注意してください。これらのフラグの1つが使用される場合、変数は現在実行されている最も内側のブロックに対してローカルになりますが、これらがない場合、変数は関数に対してローカルになります。関数が実行されていない場合、変数はグローバルになります。</target>
        </trans-unit>
        <trans-unit id="8b2d1734ef9bdd7bd6d21bc623798a68378e6c8b" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the previous variable scope is used.</source>
          <target state="translated">変数がユニバーサル、グローバル、ローカルのいずれかに明示的に設定されておらず、以前に定義されていた場合は、以前の変数スコープが使用されます。</target>
        </trans-unit>
        <trans-unit id="ae5e31cb3d02690bd43a99dc6a823c8568d4b6e8" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the variable scope is not changed.</source>
          <target state="translated">変数がユニバーサル、グローバル、ローカルのいずれかに明示的に設定されていなくても、以前に定義されていた場合、変数のスコープは変更されません。</target>
        </trans-unit>
        <trans-unit id="6ccd9990afce6a9aaaa05eb9827a340fd925feb1" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be exported or not exported, but has been previously defined, the previous exporting rule for the variable is kept.</source>
          <target state="translated">変数が明示的にエクスポートされるかどうかが設定されておらず、以前に定義されていた場合、その変数の以前のエクスポートルールが保持されます。</target>
        </trans-unit>
        <trans-unit id="72e2106717a7a37128914da8765dc2c6c6697b14" translate="yes" xml:space="preserve">
          <source>If a variable is set to more than one value, the variable will be an array with the specified elements. If a variable is set to zero elements, it will become an array with zero elements.</source>
          <target state="translated">変数に複数の値が設定されている場合は、指定された要素を持つ配列になります。変数に0要素が設定されている場合は、指定された要素を持つ配列になります。</target>
        </trans-unit>
        <trans-unit id="7f805483966bd1b92bb16fa0e48ac91c14f18567" translate="yes" xml:space="preserve">
          <source>If an error occurs during argparse processing it will exit with a non-zero status and print error messages to stderr.</source>
          <target state="translated">argparseの処理中にエラーが発生した場合は、0以外のステータスで終了し、エラーメッセージをstderrに表示します。</target>
        </trans-unit>
        <trans-unit id="f3bb201c1119b5848ebfda84c47d1e1698174af5" translate="yes" xml:space="preserve">
          <source>If any non-option parameters are given, the definition of the specified functions are printed.</source>
          <target state="translated">オプション以外のパラメータが与えられた場合、指定された関数の定義が出力されます。</target>
        </trans-unit>
        <trans-unit id="dcc764ad71040642c2ae2b7ce376987c8f357ee1" translate="yes" xml:space="preserve">
          <source>If exit is called while sourcing a file (using the &lt;a href=&quot;#source&quot;&gt;source&lt;/a&gt; builtin) the rest of the file will be skipped, but the shell itself will not exit.</source>
          <target state="translated">（組み込みの&lt;a href=&quot;#source&quot;&gt;ソース&lt;/a&gt;を使用して）ファイルのソース中にexitが呼び出されると、ファイルの残りの部分はスキップされますが、シェル自体は終了しません。</target>
        </trans-unit>
        <trans-unit id="3068ba7bd98e36689eab0ca26911e82ce1011087" translate="yes" xml:space="preserve">
          <source>If fish is unable to locate a command with a given name, and it starts with '&lt;code&gt;.&lt;/code&gt;', '&lt;code&gt;/&lt;/code&gt;' or '&lt;code&gt;~&lt;/code&gt;', fish will test if a directory of that name exists. If it does, it is implicitly assumed that you want to change working directory. For example, the fastest way to switch to your home directory is to simply press &lt;code&gt;~&lt;/code&gt; and enter.</source>
          <target state="translated">魚が特定の名前のコマンドを見つけることができず、「」で始まる場合 &lt;code&gt;.&lt;/code&gt; '、' &lt;code&gt;/&lt;/code&gt; 'または' &lt;code&gt;~&lt;/code&gt; '、fishはその名前のディレクトリが存在するかどうかをテストします。その場合、作業ディレクトリを変更することを暗黙的に想定しています。たとえば、ホームディレクトリに切り替える最も速い方法は、単に &lt;code&gt;~&lt;/code&gt; を押してEnter キーを押すことです。</target>
        </trans-unit>
        <trans-unit id="9365afaebdcba814bae204eaa9cb6846f923618b" translate="yes" xml:space="preserve">
          <source>If limit is given, it is the new value of the specified resource. If no option is given, then &lt;code&gt;-f&lt;/code&gt; is assumed. Values are in kilobytes, except for &lt;code&gt;-t&lt;/code&gt;, which is in seconds and &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-u&lt;/code&gt;, which are unscaled values. The return status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.</source>
          <target state="translated">制限が指定されている場合は、指定されたリソースの新しい値です。オプションを指定しない場合、 &lt;code&gt;-f&lt;/code&gt; が想定されます。値はキロバイト単位です。ただし、秒単位の &lt;code&gt;-t&lt;/code&gt; と、スケーリングされていない値である &lt;code&gt;-n&lt;/code&gt; および &lt;code&gt;-u&lt;/code&gt; を除きます。無効なオプションまたは引数が指定されない限り、または新しい制限の設定中にエラーが発生しない限り、戻りステータスは0です。</target>
        </trans-unit>
        <trans-unit id="ca3ffe9826b96a93254e7258c40cd2d913b9941e" translate="yes" xml:space="preserve">
          <source>If neither a pid nor a process name is specified, the command waits for all background jobs.</source>
          <target state="translated">pid やプロセス名が指定されていない場合、コマンドはすべてのバックグラウンドジョブを待ちます。</target>
        </trans-unit>
        <trans-unit id="6620b792aa7c50700f6a7c83a134de00e5936216" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;SEQUENCE&lt;/code&gt; is provided, all bindings (or just the bindings in the specified &lt;code&gt;MODE&lt;/code&gt;) are printed. If &lt;code&gt;SEQUENCE&lt;/code&gt; is provided without &lt;code&gt;COMMAND&lt;/code&gt;, just the binding matching that sequence is printed.</source>
          <target state="translated">&lt;code&gt;SEQUENCE&lt;/code&gt; が指定されていない場合、すべてのバインディング（または指定された &lt;code&gt;MODE&lt;/code&gt; のバインディングのみ）が出力されます。 &lt;code&gt;COMMAND&lt;/code&gt; なしで &lt;code&gt;SEQUENCE&lt;/code&gt; が提供されている場合、そのシーケンスに一致するバインディングのみが出力されます。</target>
        </trans-unit>
        <trans-unit id="319b10cf51c7aaf0a0ad28a0d4b4f6c772504c25" translate="yes" xml:space="preserve">
          <source>If no file is specified and stdin is not the terminal, or if the file name '&lt;code&gt;-&lt;/code&gt;' is used, stdin will be read.</source>
          <target state="translated">ファイルが指定されておらず、標準入力が端末でない場合、またはファイル名「 &lt;code&gt;-&lt;/code&gt; 」が使用されている場合、標準入力が読み取られます。</target>
        </trans-unit>
        <trans-unit id="536986c9ac77b0a65c848619315ad13a2f046d5c" translate="yes" xml:space="preserve">
          <source>If no process is specified, the most recently-used job is removed (like &lt;code&gt;bg&lt;/code&gt; and &lt;code&gt;fg&lt;/code&gt;). If one or more &lt;code&gt;PID&lt;/code&gt;s are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.</source>
          <target state="translated">プロセスが指定されていない場合、最後に使用されたジョブが削除されます（ &lt;code&gt;bg&lt;/code&gt; や &lt;code&gt;fg&lt;/code&gt; など）。1つ以上の &lt;code&gt;PID&lt;/code&gt; が指定されている場合、指定されたプロセスIDのジョブはジョブリストから削除されます。無効なジョブは無視され、警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="713bf8682430a51e2b7af1a6d836f8e75fd1bdaa" translate="yes" xml:space="preserve">
          <source>If no variable names are provided, &lt;code&gt;read&lt;/code&gt; enters a special case that simply provides redirection from standard input to standard output, useful for command substitution. For instance, the fish shell command below can be used to read data that should be provided via a command line argument from the console instead of hardcoding it in the command itself, allowing the command to both be reused as-is in various contexts with different input values and preventing possibly sensitive text from being included in the shell history:</source>
          <target state="translated">変数名が指定されていない場合、 &lt;code&gt;read&lt;/code&gt; は、標準入力から標準出力へのリダイレクトを提供する特別なケースに入り、コマンド置換に役立ちます。たとえば、以下のフィッシュシェルコマンドを使用すると、コマンド自体にハードコーディングするのではなく、コンソールからコマンドライン引数を介して提供する必要のあるデータを読み取ることができるため、コマンドをさまざまなコンテキストでさまざまなコンテキストでそのまま再利用できます。値を入力し、機密性の高いテキストがシェルの履歴に含まれないようにします。</target>
        </trans-unit>
        <trans-unit id="f6b617c0f8612fdf2ea16aba5ec62984acf5c44a" translate="yes" xml:space="preserve">
          <source>If only 123 and 789 exist, it will still background them and print an error about 456.</source>
          <target state="translated">123と789だけが存在する場合でも、それらをバックグラウンドにして456についてのエラーを表示します。</target>
        </trans-unit>
        <trans-unit id="e5b23704e06de8e7cf41b466203c3d1a05734047" translate="yes" xml:space="preserve">
          <source>If set is called with no arguments, the names and values of all shell variables are printed in sorted order. If some of the scope or export flags have been given, only the variables matching the specified scope are printed.</source>
          <target state="translated">set が引数なしで呼ばれた場合、すべてのシェル変数の名前と値がソートされた順に表示されます。スコープフラグやエクスポートフラグが指定されている場合は、 指定されたスコープにマッチする変数のみが表示されます。</target>
        </trans-unit>
        <trans-unit id="302a7adb7b2bb424535b98eb0c4ef6539ea7cb20" translate="yes" xml:space="preserve">
          <source>If terminfo reports 256 color support for a terminal, support will always be enabled. To debug color palette problems, &lt;code&gt;tput colors&lt;/code&gt; may be useful to see the number of colors in terminfo for a terminal. Fish launched as &lt;code&gt;fish -d2&lt;/code&gt; will include diagnostic messages that indicate the color support mode in use.</source>
          <target state="translated">terminfoが端末の256色サポートを報告する場合、サポートは常に有効になります。カラーパレットの問題をデバッグするには、端末のterminfoで色の数を確認するために &lt;code&gt;tput colors&lt;/code&gt; が役立つ場合があります。 &lt;code&gt;fish -d2&lt;/code&gt; として起動されたFishには、使用中のカラーサポートモードを示す診断メッセージが含まれます。</target>
        </trans-unit>
        <trans-unit id="34986c35bab0e2df661c76619902534fb332f46c" translate="yes" xml:space="preserve">
          <source>If that directory traversal is taking a long time, you can &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; out of it.</source>
          <target state="translated">そのディレクトリトラバーサルに長い時間がかかる場合は、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;C&lt;/b&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="e3d023db5ee6df47941a2ca566209f059001722c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$VISUAL&lt;/code&gt; environment variable is set, it will be used as the program to edit the function. If &lt;code&gt;$VISUAL&lt;/code&gt; is unset but &lt;code&gt;$EDITOR&lt;/code&gt; is set, that will be used. Otherwise, a built-in editor will be used. Note that to enter a literal newline using the built-in editor you should press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Enter&lt;/b&gt;. Pressing &lt;b&gt;Enter&lt;/b&gt; signals that you are done editing the function. This does not apply to an external editor like emacs or vim.</source>
          <target state="translated">場合は &lt;code&gt;$VISUAL&lt;/code&gt; 環境変数が設定され、それが編集にプログラムの機能として使用されます。場合は &lt;code&gt;$VISUAL&lt;/code&gt; 設定されていないが、 &lt;code&gt;$EDITOR&lt;/code&gt; セットされ、それが使用されます。それ以外の場合は、組み込みのエディターが使用されます。組み込みのエディタを使用してリテラルの改行を入力するには、&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Enter &lt;/b&gt;&lt;em&gt;キー&lt;/em&gt;を押す必要があることに注意して&lt;b&gt;ください&lt;/b&gt;。&lt;b&gt;Enterキーを&lt;/b&gt;押すと、関数の編集が完了したことが通知されます。これは、emacsやvimなどの外部エディターには適用されません。</target>
        </trans-unit>
        <trans-unit id="e8fb943c750f92e3917384bc05f81b775bd8db88" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--delimiter&lt;/code&gt; argument is not given, the variable &lt;code&gt;IFS&lt;/code&gt; is used as a list of characters to split on. Relying on the use of &lt;code&gt;IFS&lt;/code&gt; is deprecated and this behaviour will be removed in future versions. The default value of &lt;code&gt;IFS&lt;/code&gt; contains space, tab and newline characters. As a special case, if &lt;code&gt;IFS&lt;/code&gt; is set to the empty string, each character of the input is considered a separate token.</source>
          <target state="translated">&lt;code&gt;--delimiter&lt;/code&gt; 引数が指定されていない場合、変数 &lt;code&gt;IFS&lt;/code&gt; は分割する文字のリストとして使用されます。 &lt;code&gt;IFS&lt;/code&gt; の使用に依存することは非推奨であり、この動作は将来のバージョンで削除される予定です。 &lt;code&gt;IFS&lt;/code&gt; のデフォルト値には、スペース、タブ、および改行文字が含まれています。特殊なケースとして、 &lt;code&gt;IFS&lt;/code&gt; が空の文字列に設定されている場合、入力の各文字は個別のトークンと見なされます。</target>
        </trans-unit>
        <trans-unit id="b9a1bc2ff2f56d3990f495529faa7ba44ead0455" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-k&lt;/code&gt; switch is used, the name of the key (such as 'down', 'up' or 'backspace') is used instead of a sequence. The names used are the same as the corresponding curses variables, but without the 'key_' prefix. (See &lt;code&gt;terminfo(5)&lt;/code&gt; for more information, or use &lt;code&gt;bind --key-names&lt;/code&gt; for a list of all available named keys.) If used in conjunction with the &lt;code&gt;-s&lt;/code&gt; switch, &lt;code&gt;bind&lt;/code&gt; will silently ignore bindings to named keys that are not found in termcap for the current &lt;code&gt;$TERMINAL&lt;/code&gt;, otherwise a warning is emitted.</source>
          <target state="translated">&lt;code&gt;-k&lt;/code&gt; スイッチを使用する場合、シーケンスの代わりにキーの名前（「down」、「up」、「backspace」など）が使用されます。使用される名前は対応するcurses変数と同じですが、「key_」接頭辞がありません。（詳細については、 &lt;code&gt;terminfo(5)&lt;/code&gt; を参照してください。または、使用可能なすべての名前付きキーのリストについては、 &lt;code&gt;bind --key-names&lt;/code&gt; を使用してください。）- &lt;code&gt;-s&lt;/code&gt; スイッチと一緒に使用すると、 &lt;code&gt;bind&lt;/code&gt; は、見つからない名前付きキーへのバインディングを暗黙的に無視します現在の &lt;code&gt;$TERMINAL&lt;/code&gt; termcap では、それ以外の場合は警告が発行されます。</target>
        </trans-unit>
        <trans-unit id="1d7b9b3be6cec368c8849bf11af8487da853a633" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; flag is specified, the current directory history is also displayed.</source>
          <target state="translated">場合は &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--list&lt;/code&gt; フラグが指定され、現在のディレクトリ履歴も表示されます。</target>
        </trans-unit>
        <trans-unit id="4cfc35a3a98ed01dd389efdde71deb0bf3c6669a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; flag is specified, the current history is also displayed.</source>
          <target state="translated">場合は &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--list&lt;/code&gt; フラグが指定され、現在の履歴も表示されます。</target>
        </trans-unit>
        <trans-unit id="492a67bd7712dda8e66c7c5fc44c0836f4b18f3a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--any&lt;/code&gt; flag is provided, the command returns as soon as the first job completes. If it is not provided, it returns after all jobs complete.</source>
          <target state="translated">場合は &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--any&lt;/code&gt; フラグはすぐに最初のジョブが完了するほど、コマンドのリターンを提供します。指定されていない場合は、すべてのジョブが完了した後に戻ります。</target>
        </trans-unit>
        <trans-unit id="63b9207ee5d979afeb85211115a3c6ffa7012a71" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/tmp&lt;/code&gt; directory exists, copy the &lt;code&gt;/etc/motd&lt;/code&gt; file to it:</source>
          <target state="translated">&lt;code&gt;/tmp&lt;/code&gt; ディレクトリが存在する場合は、 &lt;code&gt;/etc/motd&lt;/code&gt; ファイルをそこにコピーします。</target>
        </trans-unit>
        <trans-unit id="c3b856c7f49407f5bd18390ec22c0a975e0942a6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;BROWSER&lt;/code&gt; environment variable is set, it will be used as the name of the web browser to open instead of the system default.</source>
          <target state="translated">場合は &lt;code&gt;BROWSER&lt;/code&gt; 環境変数が設定され、システムのデフォルトの代わりに開くために、Webブラウザの名前として使用されます。</target>
        </trans-unit>
        <trans-unit id="3debf54dad8f4dc6d939e041eacf2dbfc04ad3d0" translate="yes" xml:space="preserve">
          <source>If the BROWSER environment variable is set, it will be used to display the documentation. Otherwise, fish will search for a suitable browser.</source>
          <target state="translated">環境変数browserが設定されている場合は、ドキュメントを表示するために使用されます。そうでない場合、fishは適切なブラウザを探します。</target>
        </trans-unit>
        <trans-unit id="aa6fc1ea4246a9f77c10ddff36e9849dd9022bcd" translate="yes" xml:space="preserve">
          <source>If the above code was run with &lt;code&gt;$animal&lt;/code&gt; set to &lt;code&gt;whale&lt;/code&gt;, the output would be &lt;code&gt;mammal&lt;/code&gt;.</source>
          <target state="translated">上記のコードが &lt;code&gt;$animal&lt;/code&gt; を &lt;code&gt;whale&lt;/code&gt; に設定して実行された場合、出力は &lt;code&gt;mammal&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d75d0af6becad51e324987bba4dbf96c51e8300a" translate="yes" xml:space="preserve">
          <source>If the alias has the same name as the aliased command, it is necessary to prefix the call to the program with &lt;code&gt;command&lt;/code&gt; in order to tell fish that the function should not call itself, but rather a command with the same name. Failing to do so will cause infinite recursion bugs.</source>
          <target state="translated">エイリアスがエイリアスコマンドと同じ名前である場合、関数にそれ自体を呼び出すのではなく、同じ名前のコマンドを呼び出す必要があることを魚に伝えるために、プログラムの呼び出しの前に &lt;code&gt;command&lt;/code&gt; を付ける必要があります。そうしないと、無限の再帰バグが発生します。</target>
        </trans-unit>
        <trans-unit id="ad3ed0aa46a2e24462a85265faa22a817cd5bf4f" translate="yes" xml:space="preserve">
          <source>If the argument you want is far back in history (e.g. 2 lines back - that's a lot of words!), type any part of it and then press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt;. This will show only arguments containing that part and you will get what you want much faster. Try it out, this is very convenient!</source>
          <target state="translated">あなたが欲しい引数がはるかに戻って歴史の中である場合（例えばバック2つのライン！ -言葉の多くはだ）、任意のその一部、その後、プレス型&lt;em&gt;Altキーを&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;。これにより、その部分を含む引数のみが表示され、必要なものがより速く取得されます。試してみてください、これはとても便利です！</target>
        </trans-unit>
        <trans-unit id="8b1303483eab8a0aafe5607e65c79febb8c3aca1" translate="yes" xml:space="preserve">
          <source>If the commandline contains</source>
          <target state="translated">コマンドラインに</target>
        </trans-unit>
        <trans-unit id="4b1c190c6ad0436a0fd3fb383f1281a2e816bf89" translate="yes" xml:space="preserve">
          <source>If the commandline reads &lt;code&gt;cd m&lt;/code&gt;, place the cursor over the &lt;code&gt;m&lt;/code&gt; character and press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; to search for previously typed words containing 'm'.</source>
          <target state="translated">コマンドラインを読み込む場合は &lt;code&gt;cd m&lt;/code&gt; 、上にカーソルを置き &lt;code&gt;m&lt;/code&gt; 文字を押して&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;「M」を含む、以前に入力した単語を検索します。</target>
        </trans-unit>
        <trans-unit id="aec97b1cdbedc052d45f0ca8a3886ba07331192c" translate="yes" xml:space="preserve">
          <source>If the current directory contains the files 'foo' and 'bar', the command &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; will output 'abar1 abar2 abar3 afoo1 afoo2 afoo3'.</source>
          <target state="translated">現在のディレクトリにファイル「foo」と「bar」が含まれている場合、コマンド &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; は「abar1 abar2 abar3 afoo1 afoo2 afoo3」を出力します。</target>
        </trans-unit>
        <trans-unit id="9ac01aa8bdf61c4705d1b573ca6b14e107487f86" translate="yes" xml:space="preserve">
          <source>If the expression is successfully evaluated and doesn't over/underflow or return NaN the return &lt;code&gt;status&lt;/code&gt; is zero (success) else one.</source>
          <target state="translated">式が正常に評価され、オーバーフロー/アンダーフローまたはNaNを返さない場合、戻り &lt;code&gt;status&lt;/code&gt; は0（成功）、それ以外は1です。</target>
        </trans-unit>
        <trans-unit id="5cfff00b5bb7a05a9b5b06be91a9cc46be32a1f7" translate="yes" xml:space="preserve">
          <source>If the first and second parts are skipped, they are assumed to be &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt;, respectively. As an example, &lt;code&gt;r,u+w&lt;/code&gt; means all users should have read access and the file owner should also have write access.</source>
          <target state="translated">最初の部分と2番目の部分をスキップ &lt;code&gt;a&lt;/code&gt; と、それぞれaと &lt;code&gt;=&lt;/code&gt; と見なされます。例として、 &lt;code&gt;r,u+w&lt;/code&gt; は、すべてのユーザーが読み取りアクセス権を持ち、ファイルの所有者も書き込みアクセス権を持つ必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="154cdf4f784ed79e1fcb74335c0c901b6cf4ac90" translate="yes" xml:space="preserve">
          <source>If the line you want is far back in the history, type any part of the line and then press Up one or more times. This will constrain the recall to lines that include this text, and you will get to the line you want much faster. This replaces &quot;!vi&quot;, &quot;!?bar.c&quot; and the like.</source>
          <target state="translated">欲しい行が履歴の中でかなり後ろにある場合は、その行の任意の部分を入力してから、Upを1回以上押します。こうすることで、このテキストを含む行への呼び出しが制限され、目的の行への到達が格段に速くなります。これは、「!vi」や「!bar.c」などの代わりになります。</target>
        </trans-unit>
        <trans-unit id="70006a59c6935a4438f9d0040be162c8ee9ec5a8" translate="yes" xml:space="preserve">
          <source>If the list is visible, pressing control-S (or the &lt;code&gt;pager-toggle-search&lt;/code&gt; binding) will allow filtering the list. Shift-tab (or the &lt;code&gt;complete-and-search&lt;/code&gt; binding) will trigger completion with the search field immediately visible.</source>
          <target state="translated">リストが表示されている場合、control-S（または &lt;code&gt;pager-toggle-search&lt;/code&gt; バインディング）を押すと、リストをフィルタリングできます。Shift-tab（または &lt;code&gt;complete-and-search&lt;/code&gt; バインディング）は、検索フィールドをすぐに表示して完了をトリガーします。</target>
        </trans-unit>
        <trans-unit id="e4c01f00f1709a1d845be8af766e2896516906fa" translate="yes" xml:space="preserve">
          <source>If the path is invalid no translated path will be written to stdout and an error will be reported.</source>
          <target state="translated">パスが無効な場合、翻訳されたパスは標準出力に書き込まれず、エラーが報告されます。</target>
        </trans-unit>
        <trans-unit id="e907fd3510899683ab1ac3f96d2aac1979d9258b" translate="yes" xml:space="preserve">
          <source>If the specified file descriptor is a tty, the exit status of the command is zero. Otherwise, the exit status is non-zero. No messages are printed to standard error.</source>
          <target state="translated">指定されたファイル記述子が tty の場合、コマンドの終了ステータスはゼロである。それ以外の場合、終了ステータスはゼロではありません。標準エラーにはメッセージは出力されません。</target>
        </trans-unit>
        <trans-unit id="bd0e2ed527cbeaac8bf34e5481dc729ba00211c1" translate="yes" xml:space="preserve">
          <source>If the user enters any additional arguments after the function, they are inserted into the environment &lt;a href=&quot;index#variables-arrays&quot;&gt;variable array&lt;/a&gt;&lt;code&gt;$argv&lt;/code&gt;. If the &lt;code&gt;--argument-names&lt;/code&gt; option is provided, the arguments are also assigned to names specified in that option.</source>
          <target state="translated">ユーザーが関数の後に追加の引数を入力すると、それらは環境&lt;a href=&quot;index#variables-arrays&quot;&gt;変数配列&lt;/a&gt; &lt;code&gt;$argv&lt;/code&gt; 挿入されます。場合 &lt;code&gt;--argument-names&lt;/code&gt; オプションが提供され、引数は、そのオプションで指定した名前に割り当てられています。</target>
        </trans-unit>
        <trans-unit id="89093e95575f5c91e69c231cc514a5f888c355b9" translate="yes" xml:space="preserve">
          <source>If the variable $animal contains the name of an animal, the following code would attempt to classify it:</source>
          <target state="translated">変数 $animal に動物の名前が含まれている場合、以下のコードはそれを分類しようとします。</target>
        </trans-unit>
        <trans-unit id="081ef0f3bbeaf93e50b97aca197ba4dab7103ab9" translate="yes" xml:space="preserve">
          <source>If the variable &lt;code&gt;MANPATH&lt;/code&gt; is defined and not empty, print the contents. (If &lt;code&gt;MANPATH&lt;/code&gt; is not defined, then it will expand to zero arguments, unless quoted.)</source>
          <target state="translated">変数 &lt;code&gt;MANPATH&lt;/code&gt; が定義されていて空でない場合は、内容を出力します。（ &lt;code&gt;MANPATH&lt;/code&gt; が定義されていない場合、引用されない限り、引数はゼロに展開されます。）</target>
        </trans-unit>
        <trans-unit id="b85b340b71b7dd9ea477da93a9f45e28372572db" translate="yes" xml:space="preserve">
          <source>If the variable name is one or more array elements, such as &lt;code&gt;PATH[1 3 7]&lt;/code&gt;, only those array elements specified will be changed. If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.</source>
          <target state="translated">変数名が &lt;code&gt;PATH[1 3 7]&lt;/code&gt; などの1つ以上の配列要素の場合、指定された配列要素のみが変更されます。配列変数を展開または割り当てるときに負のインデックスを指定すると、インデックスは配列の最後から計算されます。たとえば、インデックス-1は配列の最後のインデックスを意味します。</target>
        </trans-unit>
        <trans-unit id="788fcc2dc7b9ec9c743aa985b73d706a1c941ace" translate="yes" xml:space="preserve">
          <source>If there are multiple files with the same name in these directories, only the first will be executed. They are executed in order of their filename, sorted (like globs) in a natural order (i.e. &quot;01&quot; sorts before &quot;2&quot;).</source>
          <target state="translated">これらのディレクトリに同じ名前のファイルが複数ある場合、最初のファイルのみが実行されます。これらのファイルは、ファイル名の順に実行され、自然な順序でソートされます (グロブのように)(例:&quot;01&quot; は &quot;2&quot; の前にソートされます)。</target>
        </trans-unit>
        <trans-unit id="37b3f6c1d9e2443aab8662a7a439797d66881a18" translate="yes" xml:space="preserve">
          <source>If there is no function called &lt;code&gt;NAME&lt;/code&gt; a new function will be created with the specified name</source>
          <target state="translated">&lt;code&gt;NAME&lt;/code&gt; という関数がない場合は、指定した名前で新しい関数が作成されます</target>
        </trans-unit>
        <trans-unit id="6d5cfe09681412194f4ba98b5cd9ee3fb9a19be4" translate="yes" xml:space="preserve">
          <source>If there is nothing between a brace and a comma or two commas, it's interpreted as an empty element.</source>
          <target state="translated">中括弧とカンマまたは2つのカンマの間に何もない場合は、空の要素として解釈されます。</target>
        </trans-unit>
        <trans-unit id="afe6214497e3e493ce7fed66861473c8f9d5c2d3" translate="yes" xml:space="preserve">
          <source>If there's more than one possibility, it will list them:</source>
          <target state="translated">複数の可能性がある場合は、それをリストアップします。</target>
        </trans-unit>
        <trans-unit id="1b4ecf432926bdf9219384030390dce4a62ae339" translate="yes" xml:space="preserve">
          <source>If you are developing another program and would like to ship completions with your program, install them to the &quot;vendor&quot; completions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt;.</source>
          <target state="translated">別のプログラムを開発していて、プログラムに補完を同梱する場合は、それらを「ベンダー」の補完ディレクトリにインストールします。このパスはシステムによって異なるため、 &lt;code&gt;pkgconfig&lt;/code&gt; フレームワークを使用して、 &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt; の出力でこのパスを検出する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2e3bcc2c86a34d726c99da6041e118aebc6aab5" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install configuration which is run for all users of the fish shell on a system. This is discouraged; if not carefully written, they may have side-effects or slow the startup of the shell. Additionally, users of other shells will not benefit from the Fish-specific configuration. However, if they are absolutely required, you may install them to the &quot;vendor&quot; configuration directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable confdir fish&lt;/code&gt;.</source>
          <target state="translated">別のプログラムを開発している場合、魚シェルのすべてのユーザーに対して実行される構成をシステムにインストールすることができます。これはお勧めできません。注意深く書かれていないと、副作用が発生したり、シェルの起動が遅くなる可能性があります。さらに、他のシェルのユーザーは、Fish固有の構成から恩恵を受けません。ただし、それらが絶対に必要な場合は、「ベンダー」構成ディレクトリにインストールできます。このパスはシステムによって異なる可能性があるため、 &lt;code&gt;pkg-config --variable confdir fish&lt;/code&gt; の出力でこのパスを検出するには、 &lt;code&gt;pkgconfig&lt;/code&gt; フレームワークを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4916db32b6aa8cbf9c1ffbb01d73d5df4a8870cc" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install functions which are available for all users of the fish shell on a system. They can be installed to the &quot;vendor&quot; functions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt;.</source>
          <target state="translated">別のプログラムを開発している場合は、魚の殻のすべてのユーザーが使用できる機能をシステムにインストールすることができます。これらは、「ベンダー」関数ディレクトリにインストールできます。このパスはシステムによって異なる可能性があるため、 &lt;code&gt;pkgconfig&lt;/code&gt; のフレームワークを使用して、 &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt; の出力でこのパスを検出する必要があります。</target>
        </trans-unit>
        <trans-unit id="2c8709afb8c37b08fcb75856aca6d9778e8772cd" translate="yes" xml:space="preserve">
          <source>If you are just interested in success or failure, you can run the command directly as the if-condition:</source>
          <target state="translated">成功か失敗かだけに興味があるのであれば、if条件として直接実行しても良いでしょう。</target>
        </trans-unit>
        <trans-unit id="6b4679db7ed1ee15be09b7a815eb852cdada744e" translate="yes" xml:space="preserve">
          <source>If you do not use any brackets, all the elements of the array will be written as separate items. This means you can easily iterate over an array using this syntax:</source>
          <target state="translated">括弧を使用しない場合は、配列のすべての要素が別の項目として記述されます。つまり、この構文を使って簡単に配列を反復処理することができます。</target>
        </trans-unit>
        <trans-unit id="21121c72874a1f506d3167db9734fb72635e8aba" translate="yes" xml:space="preserve">
          <source>If you do this via a function it should be defined with the &lt;code&gt;--no-scope-shadowing&lt;/code&gt; flag. Otherwise it won't have access to those variables.</source>
          <target state="translated">関数を使用してこれを行う場合は、 &lt;code&gt;--no-scope-shadowing&lt;/code&gt; フラグを使用して定義する必要があります。そうしないと、これらの変数にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="76fc284188c8102e752b1bddb9f0226a85c1fbff" translate="yes" xml:space="preserve">
          <source>If you have a question not answered by this documentation, there are several avenues for help:</source>
          <target state="translated">このドキュメントで回答が得られない質問がある場合は、いくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="d5d69fd8cf3faf8da11aa1c87838469a40522c72" translate="yes" xml:space="preserve">
          <source>If you have a strong understanding of other shells, and want to know what &lt;code&gt;fish&lt;/code&gt; does differently, search for the magic phrase &lt;em&gt;unlike other shells&lt;/em&gt;, which is used to call out important differences.</source>
          <target state="translated">あなたが他のシェルの強力な理解を持って、そして何を知りたい場合は &lt;code&gt;fish&lt;/code&gt; 異なりん、魔法のフレーズを検索&lt;em&gt;他のシェルとは異なり、&lt;/em&gt;重要な違いを呼び出す際に使用します。</target>
        </trans-unit>
        <trans-unit id="d94e356f3d06bfc0847471bd8ac63c7fdd35e968" translate="yes" xml:space="preserve">
          <source>If you have an improvement for fish, you can submit it via the mailing list or the GitHub page.</source>
          <target state="translated">魚のための改善点があれば、メーリングリストやGitHubページから投稿することができます。</target>
        </trans-unit>
        <trans-unit id="3c91aaa3641347d6b92a729c32a7d96c010b6da2" translate="yes" xml:space="preserve">
          <source>If you have written new completions for a common Unix command, please consider sharing your work by submitting it via the instructions in &lt;a href=&quot;#more-help&quot;&gt;Further help and development&lt;/a&gt;.</source>
          <target state="translated">一般的なUnixコマンドの新しい補完を書いた場合は、「&lt;a href=&quot;#more-help&quot;&gt;さらなるヘルプと開発」の&lt;/a&gt;指示に従って提出して、作品を共有することを検討してください。</target>
        </trans-unit>
        <trans-unit id="801a4bfeff44c78289adc6da559907889b10b7ff" translate="yes" xml:space="preserve">
          <source>If you installed a prepackaged version of fish, the package manager should have already done this for you.</source>
          <target state="translated">魚のプレパッケージ版をインストールした場合は、パッケージマネージャがすでにこれを行っているはずです。</target>
        </trans-unit>
        <trans-unit id="bacc9cf3f5b8aece5e2cb795329bd9e98f414229" translate="yes" xml:space="preserve">
          <source>If you installed fish manually (e.g. by compiling it, not by using a package manager), you first need to add fish to the list of shells by executing the following command (assuming you installed fish in /usr/local):</source>
          <target state="translated">手動で(パッケージマネージャを使わずにコンパイルするなどして)fishをインストールした場合は、まず以下のコマンドを実行して、シェルのリストにfishを追加する必要があります(/usr/localにfishをインストールしたと仮定して)。</target>
        </trans-unit>
        <trans-unit id="24dbcaa65ea45136e4556660a86f87890a258184" translate="yes" xml:space="preserve">
          <source>If you instead want to put a suspended job into the background, use the &lt;a href=&quot;commands#bg&quot;&gt;&lt;code&gt;bg&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">一時停止したジョブをバックグラウンドに置きたい場合は、&lt;a href=&quot;commands#bg&quot;&gt; &lt;code&gt;bg&lt;/code&gt; &lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="76575622923fc6960275a0372650f7e641f7d23c" translate="yes" xml:space="preserve">
          <source>If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as an array, where the first element is the browser command and the rest are browser options.</source>
          <target state="translated">魚のヘルプに別のブラウザ(上記以外)を使いたい場合は、 fish_help_browser 変数を設定することができます。この変数は配列として設定することができ、最初の要素はブラウザコマンドで、残りの要素はブラウザオプションです。</target>
        </trans-unit>
        <trans-unit id="6b10dc2d52b83a3f3bcbb9eafde410131a7638e1" translate="yes" xml:space="preserve">
          <source>If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.</source>
          <target state="translated">配列変数の展開時や代入時に負のインデックスを指定すると、配列の末尾からインデックスが計算されます。例えば、インデックス -1 は配列の最後のインデックスを意味します。</target>
        </trans-unit>
        <trans-unit id="bef2a5da408bc0ccc604bb6e7c2ada1e1e368d28" translate="yes" xml:space="preserve">
          <source>If you specify both &lt;code&gt;--prefix&lt;/code&gt; and &lt;code&gt;--contains&lt;/code&gt; the last flag seen is used.</source>
          <target state="translated">&lt;code&gt;--prefix&lt;/code&gt; と &lt;code&gt;--contains&lt;/code&gt; の両方を指定した場合、最後に表示されたフラグが使用されます。</target>
        </trans-unit>
        <trans-unit id="cfeb5cfbb4d7330298cd9ae2e7db448aa2300961" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--entire&lt;/code&gt; then each matching string is printed including any prefix or suffix not matched by the pattern (equivalent to &lt;code&gt;grep&lt;/code&gt; without the &lt;code&gt;-o&lt;/code&gt; flag). You can, obviously, achieve the same result by prepending and appending &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;.*&lt;/code&gt; depending on whether or not you have specified the &lt;code&gt;--regex&lt;/code&gt; flag. The &lt;code&gt;--entire&lt;/code&gt; flag is simply a way to avoid having to complicate the pattern in that fashion and make the intent of the &lt;code&gt;string match&lt;/code&gt; clearer. Without &lt;code&gt;--entire&lt;/code&gt; and &lt;code&gt;--regex&lt;/code&gt;, a PATTERN will need to match the entire STRING before it will be reported.</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; または &lt;code&gt;--entire&lt;/code&gt; を指定すると、パターンに一致しないプレフィックスまたはサフィックスを含む、一致する各文字列が出力されます（ &lt;code&gt;-o&lt;/code&gt; フラグなしの &lt;code&gt;grep&lt;/code&gt; と同等）。 &lt;code&gt;--regex&lt;/code&gt; フラグを指定したかどうかに応じて、 &lt;code&gt;*&lt;/code&gt; または &lt;code&gt;.*&lt;/code&gt; 先頭に追加して追加することで、同じ結果を達成できることは明らかです。 &lt;code&gt;--entire&lt;/code&gt; フラグは、単にそのやり方でパターンを複雑にしての意図作ることを避けるための方法である &lt;code&gt;string match&lt;/code&gt; 明確に。 &lt;code&gt;--entire&lt;/code&gt; と &lt;code&gt;--regex&lt;/code&gt; がない場合、PATTERNは報告される前にSTRING全体と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="22a9feadf64d822a318f10f2b4793d1a2316c159" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--filter&lt;/code&gt; flag then each input string is printed only if a replacement was done. This is useful where you would otherwise use this idiom: &lt;code&gt;a_cmd | string match pattern | string replace pattern new_pattern&lt;/code&gt;. You can instead just write &lt;code&gt;a_cmd | string replace --filter pattern new_pattern&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; または &lt;code&gt;--filter&lt;/code&gt; フラグを指定すると、置換が行われた場合にのみ、各入力文字列が出力されます。これは、このイディオムを使用する場合に便利です &lt;code&gt;a_cmd | string match pattern | string replace pattern new_pattern&lt;/code&gt; 。代わりに単に &lt;code&gt;a_cmd | string replace --filter pattern new_pattern&lt;/code&gt; と書くことができます。string replace --filter pattern new_pattern。</target>
        </trans-unit>
        <trans-unit id="d8e54ae0a24762829d8f55a86df97428a46a48f0" translate="yes" xml:space="preserve">
          <source>If you want to add the directory &lt;code&gt;~/linux/bin&lt;/code&gt; to your PATH variable when using a login shell, add the following to your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file:</source>
          <target state="translated">ログインシェルを使用するときにディレクトリ &lt;code&gt;~/linux/bin&lt;/code&gt; をPATH変数に追加する場合は、以下を &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="3226bbbfea92d52214a04066c17b75561d8b1dfd" translate="yes" xml:space="preserve">
          <source>If you want to find out more about the echo command used above, read the manual page for the echo command by writing: &lt;code&gt;man echo&lt;/code&gt;</source>
          <target state="translated">上記で使用したechoコマンドの詳細を知りたい場合は、次のように記述してechoコマンドのマニュアルページを読んでください &lt;code&gt;man echo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6b8934a463057ab4cbebc293cbcc2bde13fda93" translate="yes" xml:space="preserve">
          <source>If you want to learn more about fish, there is &lt;a href=&quot;index&quot;&gt;lots of detailed documentation&lt;/a&gt;, an &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;official mailing list&lt;/a&gt;, the IRC channel #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;, and the &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;github page&lt;/a&gt;.</source>
          <target state="translated">魚についてもっと知りたいなら、&lt;a href=&quot;index&quot;&gt;たくさんの詳細なドキュメント&lt;/a&gt;、&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;公式のメーリングリスト&lt;/a&gt;、IRCチャンネル#fish on &lt;code&gt;irc.oftc.net&lt;/code&gt; 、そして&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;githubページがあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="19d1a8c24236cf7d05190b1115ef30aaad303cfb" translate="yes" xml:space="preserve">
          <source>If you want to make your command line more productive, more useful, and more fun, without learning a bunch of arcane syntax and configuration options, then &lt;code&gt;fish&lt;/code&gt; might be just what you're looking for!</source>
          <target state="translated">難解な構文と構成オプションを学ばなくても、コマンドラインをより生産的で、より便利で、より楽しいものにしたい場合、 &lt;code&gt;fish&lt;/code&gt; はまさにあなたが探しているものかもしれません！</target>
        </trans-unit>
        <trans-unit id="817bbc583c325d82f70d5e4e389c9fb588a7021e" translate="yes" xml:space="preserve">
          <source>If you want to reuse several arguments from the same line (&quot;!!:3*&quot; and the like), consider recalling the whole line and removing what you don't need (&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Backspace&lt;/b&gt; are your friends).</source>
          <target state="translated">同じ行の複数の引数（ &quot;!!：3 *&quot;など）を再利用する場合は、行全体を呼び出して、不要なものを削除することを検討してください（&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;と&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Backspace&lt;/b&gt;は友だちです）。</target>
        </trans-unit>
        <trans-unit id="17b2c50714eca6eb3a1c4f418309af6c45fec63f" translate="yes" xml:space="preserve">
          <source>If you want to run a set of commands when &lt;code&gt;fish&lt;/code&gt; exits, use an &lt;a href=&quot;#event&quot;&gt;event handler&lt;/a&gt; that is triggered by the exit of the shell:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; が終了したときに一連のコマンドを実行する場合は、シェルの終了によってトリガーされる&lt;a href=&quot;#event&quot;&gt;イベントハンドラー&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="840dcfc4db83e11261bb160a1f0912d853943c4b" translate="yes" xml:space="preserve">
          <source>If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; in two places:</source>
          <target state="translated">fish（またはその他のシェル）をデフォルトのシェルとして使用する場合は、新しいシェルの実行可能ファイル &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; を2か所に入力する必要があります。</target>
        </trans-unit>
        <trans-unit id="3a88aaa448eb4ccc5d7c16b222b1aaafa2e3553e" translate="yes" xml:space="preserve">
          <source>If your command does not need access to stdin, consider using &lt;code&gt;source&lt;/code&gt; instead.</source>
          <target state="translated">コマンドがstdinにアクセスする必要がない場合は、代わりに &lt;code&gt;source&lt;/code&gt; 使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="20b7e02e5dced2f235b74397e5dd8fd6678ecaa1" translate="yes" xml:space="preserve">
          <source>If, in the example above, $WORD is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed, if $WORD is the empty string.</source>
          <target state="translated">上の例で、$WORDが未定義または空のリストの場合、&quot;s &quot;は出力されません。ただし、$WORDが空の文字列の場合は表示されます。</target>
        </trans-unit>
        <trans-unit id="cd4f982a2dfbfb7a494a0fcc11edc18044fd3ee7" translate="yes" xml:space="preserve">
          <source>Import the abbreviations defined on another_host over SSH.</source>
          <target state="translated">another_host で定義されている略語を SSH 経由でインポートします。</target>
        </trans-unit>
        <trans-unit id="99b7d1b47f67f33906cafe0ea45bb9a7ae9de792" translate="yes" xml:space="preserve">
          <source>In addition, when adding abbreviations:</source>
          <target state="translated">また、略語を追加する場合。</target>
        </trans-unit>
        <trans-unit id="b11dd25d3b50e779c52a3bed6755a9de86e7cc31" translate="yes" xml:space="preserve">
          <source>In assignment mode, &lt;code&gt;set&lt;/code&gt; does not modify the exit status. This allows simultaneous capture of the output and exit status of a subcommand, e.g. &lt;code&gt;if set output (command)&lt;/code&gt;. In query mode, the exit status is the number of variables that were not found. In erase mode, &lt;code&gt;set&lt;/code&gt; exits with a zero exit status in case of success, with a non-zero exit status if the commandline was invalid, if the variable was write-protected or if the variable did not exist.</source>
          <target state="translated">割り当てモードでは、 &lt;code&gt;set&lt;/code&gt; は終了ステータスを変更しません。これにより、たとえば &lt;code&gt;if set output (command)&lt;/code&gt; 、サブコマンドの出力と終了ステータスを同時にキャプチャできます。照会モードでは、終了状況は検出されなかった変数の数です。消去モードでは、成功の場合はゼロの終了ステータスで終了を &lt;code&gt;set&lt;/code&gt; 、コマンドラインが無効な場合、変数が書き込み保護されている場合、または変数が存在しない場合は、非ゼロの終了ステータスで終了を設定します。</target>
        </trans-unit>
        <trans-unit id="997bbb76e726398decafa893aef44209d89a5923" translate="yes" xml:space="preserve">
          <source>In bash, this would have created two directories &quot;Mister&quot; and &quot;Noodle&quot;. In &lt;code&gt;fish&lt;/code&gt;, it created only one: the variable had the value &quot;Mister Noodle&quot;, so that is the argument that was passed to &lt;code&gt;mkdir&lt;/code&gt;, spaces and all. Other shells use the term &quot;arrays&quot;, rather than lists.</source>
          <target state="translated">bashでは、これにより2つのディレクトリ「Mister」と「Noodle」が作成されます。では &lt;code&gt;fish&lt;/code&gt; 、それは一つだけ作成しました：それはに渡された引数であるので、変数は、値「ミスターヌードル」を持ってい &lt;code&gt;mkdir&lt;/code&gt; 、スペースおよびすべて。他のシェルでは、リストではなく「配列」という用語を使用します。</target>
        </trans-unit>
        <trans-unit id="febdce18a02406c3f663a8114d7d2b52f9d2f956" translate="yes" xml:space="preserve">
          <source>In cases such as this, one can use &lt;code&gt;command&lt;/code&gt;&lt;code&gt;test&lt;/code&gt; to explicitly use the system's standalone &lt;code&gt;test&lt;/code&gt; rather than this &lt;code&gt;builtin&lt;/code&gt;&lt;code&gt;test&lt;/code&gt;.</source>
          <target state="translated">このような場合、 &lt;code&gt;command&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; を使用して、この &lt;code&gt;builtin&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; ではなく、システムのスタンドアロン &lt;code&gt;test&lt;/code&gt; を明示的に使用できます。</target>
        </trans-unit>
        <trans-unit id="8150d5ade4961a7346cfe9d6f7af40451a0e9eba" translate="yes" xml:space="preserve">
          <source>In erase mode, if variable indices are specified, only the specified slices of the array variable will be erased.</source>
          <target state="translated">消去モードでは、変数のインデックスを指定すると、配列変数の指定されたスライスのみが消去されます。</target>
        </trans-unit>
        <trans-unit id="d285383bee7174093582f84311886d8e77b2597e" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.3.0 the &lt;code&gt;$argv&lt;/code&gt; variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.</source>
          <target state="translated">2.3.0より前のバージョンのfishでは、引数が存在しない場合、 &lt;code&gt;$argv&lt;/code&gt; 変数は単一の要素（ソースファイルの名前）になります。それ以外の場合は、ソースファイルの名前のない引数が含まれます。その動作は非常に混乱し、bashやzshなどの他のシェルとは異なりました。</target>
        </trans-unit>
        <trans-unit id="b6167c9c2e21f8c5d664cda565772acda6aa5a44" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.5.0 it was possible to create a function named &lt;code&gt;-&lt;/code&gt; that would do &lt;code&gt;cd -&lt;/code&gt;. Changes in the 2.5.0 release included several bug fixes that enforce the rule that a bare hyphen is not a valid function (or variable) name. However, you can achieve the same effect via an abbreviation:</source>
          <target state="translated">前2.5.0に魚のバージョンでは、という名前の関数を作成することが可能であった &lt;code&gt;-&lt;/code&gt; どうなる &lt;code&gt;cd -&lt;/code&gt; 。2.5.0リリースの変更には、ベアハイフンが有効な関数（または変数）名ではないというルールを適用するいくつかのバグ修正が含まれています。ただし、省略形を使用して同じ効果を得ることができます。</target>
        </trans-unit>
        <trans-unit id="c82580c4fc0344cd7e4b4c3bbc7ac9db12a80d91" translate="yes" xml:space="preserve">
          <source>In functions, &lt;code&gt;block&lt;/code&gt; can be useful while performing work that should not be interrupted by the shell.</source>
          <target state="translated">関数では、 &lt;code&gt;block&lt;/code&gt; はシェルによって中断されるべきではない作業を実行するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="89ff03b555073b2736f671e958968657fb6eb4ed" translate="yes" xml:space="preserve">
          <source>In general, special characters are special by default, so &lt;code&gt;a+&lt;/code&gt; matches one or more &quot;a&quot;s, while &lt;code&gt;a\+&lt;/code&gt; matches an &quot;a&quot; and then a &quot;+&quot;. &lt;code&gt;(a+)&lt;/code&gt; matches one or more &quot;a&quot;s in a capturing group (&lt;code&gt;(?:XXXX)&lt;/code&gt; denotes a non-capturing group). For the replacement parameter of &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;$n&lt;/code&gt; refers to the n-th group of the match. In the match parameter, &lt;code&gt;\n&lt;/code&gt; (e.g. &lt;code&gt;\1&lt;/code&gt;) refers back to groups.</source>
          <target state="translated">一般に、特殊文字はデフォルトで特殊であるため &lt;code&gt;a+&lt;/code&gt; 1つ以上の「a」に一致し、 &lt;code&gt;a\+&lt;/code&gt; は「a」、次に「+」に一致します。 &lt;code&gt;(a+)&lt;/code&gt; は、キャプチャグループ内の1つ以上の &quot;a&quot;に一致し &lt;code&gt;(?:XXXX)&lt;/code&gt; （（？：XXXX）は非キャプチャグループを示します）。 &lt;code&gt;replace&lt;/code&gt; の置換パラメーターの場合、 &lt;code&gt;$n&lt;/code&gt; は一致のn番目のグループを指します。 matchパラメータでは、 &lt;code&gt;\n&lt;/code&gt; （例： &lt;code&gt;\1&lt;/code&gt; ）はグループを参照します。</target>
        </trans-unit>
        <trans-unit id="52f151afd8c58f05083781d29e38adf8acc285ad" translate="yes" xml:space="preserve">
          <source>In order to change your default shell, type:</source>
          <target state="translated">デフォルトのシェルを変更するには、次のようにタイプします。</target>
        </trans-unit>
        <trans-unit id="7744f887d10f15ca76ae2472bb145fdd5fdbdb57" translate="yes" xml:space="preserve">
          <source>In order to protect the shell from consuming too many system resources, &lt;code&gt;read&lt;/code&gt; will only consume a maximum of 10 MiB (1048576 bytes); if the terminator is not reached before this limit then VARIABLE is set to empty and the exit status is set to 122. This limit can be altered with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable. If set to 0 (zero), the limit is removed.</source>
          <target state="translated">シェルが多くのシステムリソースを消費しないように保護するために、 &lt;code&gt;read&lt;/code&gt; は最大10 MiB（1048576バイト）しか消費しません。この制限の前にターミネータに到達しない場合、VARIABLEは空に設定され、終了ステータスは122に設定されます。この制限は、 &lt;code&gt;fish_read_limit&lt;/code&gt; 変数で変更できます。0（ゼロ）に設定すると、制限が削除されます。</target>
        </trans-unit>
        <trans-unit id="cfb4b17946050d9f509c4bdb763f770ebb06687a" translate="yes" xml:space="preserve">
          <source>In query mode, the scope to be examined can be specified.</source>
          <target state="translated">クエリモードでは、検査対象のスコープを指定することができます。</target>
        </trans-unit>
        <trans-unit id="89d4f28841a1759ddcc1b8894ac4045a23593691" translate="yes" xml:space="preserve">
          <source>In the following code, all output is redirected to the file out.html.</source>
          <target state="translated">以下のコードでは、すべての出力がファイル out.html にリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="67bf59485bd852b33bf0045b83854687c5fd2923" translate="yes" xml:space="preserve">
          <source>In the following examples if a flag is not seen when parsing the arguments then the corresponding _flag_X var(s) will not be set.</source>
          <target state="translated">以下の例では、引数を解析する際にフラグが見えない場合は、対応する _flag_X var(s)は設定されません。</target>
        </trans-unit>
        <trans-unit id="b18679bb485a969aa3729a892fbc342e477da1e5" translate="yes" xml:space="preserve">
          <source>In the overwhelming majority of cases, splitting on spaces is unwanted, so this is an improvement.</source>
          <target state="translated">圧倒的に多いのがスペースでの分割は不要なので、これは改善の余地があります。</target>
        </trans-unit>
        <trans-unit id="40d4bef31048f07adb0a3c1f574c30c70992f0e5" translate="yes" xml:space="preserve">
          <source>In these cases use &lt;code&gt;string split &quot; &quot;&lt;/code&gt; like:</source>
          <target state="translated">これらの場合、次のように &lt;code&gt;string split &quot; &quot;&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="e86e38a4028df2e1d281758cf65343b3a55357c4" translate="yes" xml:space="preserve">
          <source>In these cases, the expansion eliminates the string, as a result of the implicit &lt;a href=&quot;#cartesian-product&quot;&gt;cartesian product&lt;/a&gt;.</source>
          <target state="translated">これらの場合、暗黙の&lt;a href=&quot;#cartesian-product&quot;&gt;デカルト積の&lt;/a&gt;結果として、展開により文字列が削除されます。</target>
        </trans-unit>
        <trans-unit id="a96781a5a37dbe8375812a63f70f63e6201fe8ae" translate="yes" xml:space="preserve">
          <source>Incorrect use of output redirects</source>
          <target state="translated">出力リダイレクトの誤用</target>
        </trans-unit>
        <trans-unit id="00039aeb76d249d44e4bf3ba01d88ffc368e8bd4" translate="yes" xml:space="preserve">
          <source>Index range expansion</source>
          <target state="translated">インデックス範囲の拡大</target>
        </trans-unit>
        <trans-unit id="6fb7f6ce1f52c7d40f5bab615e431e3f8551d458" translate="yes" xml:space="preserve">
          <source>Initialization files</source>
          <target state="translated">初期化ファイル</target>
        </trans-unit>
        <trans-unit id="2a06266a915eac92808f8af015840d61f777058b" translate="yes" xml:space="preserve">
          <source>Input/Output (IO) redirection</source>
          <target state="translated">入出力リダイレクト</target>
        </trans-unit>
        <trans-unit id="cc03501ba8e2728a6aa8f006cb5c7941d732153b" translate="yes" xml:space="preserve">
          <source>Insert mode</source>
          <target state="translated">挿入モード</target>
        </trans-unit>
        <trans-unit id="653edb0bfdb6bd20dfe7affb5776bc7d271237c7" translate="yes" xml:space="preserve">
          <source>Internals</source>
          <target state="translated">Internals</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="c62c2864f20a2be4aa0393bfb86357685145de0e" translate="yes" xml:space="preserve">
          <source>Invoking &lt;code&gt;complete&lt;/code&gt; multiple times for the same command adds the new definitions on top of any existing completions defined for the command.</source>
          <target state="translated">同じコマンドに対して &lt;code&gt;complete&lt;/code&gt; 複数回呼び出すと、コマンドに定義されている既存の完了に加えて新しい定義が追加されます。</target>
        </trans-unit>
        <trans-unit id="83c3b240dba13d15ae7f53c1a501f0c631e4c4fe" translate="yes" xml:space="preserve">
          <source>It is also possible to add all emacs-mode bindings to vi-mode by using something like</source>
          <target state="translated">また、以下のようにしてすべての emacs-mode バインディングを vi-mode に追加することも可能です。</target>
        </trans-unit>
        <trans-unit id="8ab84d80263900ba9d5b235b1f2ea80519e28b73" translate="yes" xml:space="preserve">
          <source>It is also possible to set or erase individual elements of an array:</source>
          <target state="translated">また、配列の個々の要素を設定したり、消去したりすることも可能です。</target>
        </trans-unit>
        <trans-unit id="5d526954a8bce879648c1f8388f9dcd5c2cf78df" translate="yes" xml:space="preserve">
          <source>It is common to want to validate the the value provided for an option satisfies some criteria. For example, that it is a valid integer within a specific range. You can always do this after &lt;code&gt;argparse&lt;/code&gt; returns but you can also request that &lt;code&gt;argparse&lt;/code&gt; perform the validation by executing arbitrary fish script. To do so simply append an &lt;code&gt;!&lt;/code&gt; (exclamation-mark) then the fish script to be run. When that code is executed three vars will be defined:</source>
          <target state="translated">オプションに指定された値がいくつかの基準を満たしていることを検証したい場合がよくあります。たとえば、特定の範囲内の有効な整数であること。 &lt;code&gt;argparse&lt;/code&gt; が戻った後はいつでもこれを行うことができますが、任意のfishスクリプトを実行して &lt;code&gt;argparse&lt;/code&gt; が検証を実行するように要求することもできます。これを行うには、単に &lt;code&gt;!&lt;/code&gt; （感嘆符）次に、fishスクリプトを実行します。このコードを実行すると、3つの変数が定義されます。</target>
        </trans-unit>
        <trans-unit id="a71bcd2264c669eb00c671521098fb03d224a747" translate="yes" xml:space="preserve">
          <source>It is possible to directly create functions and variables in &lt;code&gt;config.fish&lt;/code&gt; file, using the commands shown above. For example:</source>
          <target state="translated">上記のコマンドを使用して、 &lt;code&gt;config.fish&lt;/code&gt; ファイルに関数と変数を直接作成できます。例えば：</target>
        </trans-unit>
        <trans-unit id="83c56d7ebd2ae7a42fad58d3fe21565a95290624" translate="yes" xml:space="preserve">
          <source>It is usually added inside of a conditional block such as an &lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt; statement or a &lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt; statement to conditionally stop the executing function and return to the caller, but it can also be used to specify the exit status of a function.</source>
          <target state="translated">これは通常、&lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt;ステートメントや&lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt;ステートメントなどの条件付きブロック内に追加され、実行中の関数を条件付きで停止して呼び出し元に戻りますが、関数の終了ステータスを指定するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="cefa92c853442bbe4dd3a6ef0bacadea8c59bfbd" translate="yes" xml:space="preserve">
          <source>It is very important that function definition files only contain the definition for the specified function and nothing else. Otherwise, it is possible that autoloading a function files requires that the function already be loaded, which creates a circular dependency.</source>
          <target state="translated">関数定義ファイルには、指定された関数の定義のみが含まれ、それ以外は何も含まれていないことが非常に重要です。そうしないと、関数ファイルをオートロードする際に、その関数が既にロードされている必要があり、循環的な依存関係が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="13749347248c90340a66276ab0e48e071806f943" translate="yes" xml:space="preserve">
          <source>It knows about paths and options:</source>
          <target state="translated">それは、パスとオプションについて知っています。</target>
        </trans-unit>
        <trans-unit id="f51b747a62fc1665fa16726f0cc05a908bd9ced6" translate="yes" xml:space="preserve">
          <source>It will print &lt;code&gt;xa b c x&lt;/code&gt;. But if you do</source>
          <target state="translated">それが印刷されます &lt;code&gt;xa b c x&lt;/code&gt; 。しかし、もし</target>
        </trans-unit>
        <trans-unit id="784cf5b2d3ebe2dbad48daf3fd3356b85327650b" translate="yes" xml:space="preserve">
          <source>Iterating over a list of numbers can be done with &lt;code&gt;seq&lt;/code&gt;:</source>
          <target state="translated">数値のリストを反復処理するには、 &lt;code&gt;seq&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="1c2654e77c8a1d66520f0e811b49f2ee16ec66ef" translate="yes" xml:space="preserve">
          <source>Job control</source>
          <target state="translated">ジョブ制御</target>
        </trans-unit>
        <trans-unit id="090e4272d6cb5283367e3c64d3f84a1ce2fa8aee" translate="yes" xml:space="preserve">
          <source>Jobs in the list of jobs are sent a hang-up signal when fish terminates, which usually causes the job to terminate; &lt;code&gt;disown&lt;/code&gt; allows these processes to continue regardless.</source>
          <target state="translated">ジョブのリストにあるジョブには、魚が終了するとハングアップシグナルが送信されます。これにより、通常、ジョブが終了します。 &lt;code&gt;disown&lt;/code&gt; を指定すると、これらのプロセスを続行できます。</target>
        </trans-unit>
        <trans-unit id="946c99cee0972cba5b6dec7f34cb20b94d3a2715" translate="yes" xml:space="preserve">
          <source>Keep in mind that parameter expansion takes before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis and the asterisk glob character have to be escaped or quoted.</source>
          <target state="translated">パラメータ展開は式が評価される前に行われることに注意してください。これはシェル変数を含む計算やコマンド置換の出力を行う際に非常に便利ですが、括弧とアスタリスク・グロブ文字をエスケープするか引用符で囲む必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="573891be377321acc4815f0519173b9b072d48fa" translate="yes" xml:space="preserve">
          <source>Key bindings may use &quot;modes&quot;, which mimics Vi's modal input behavior. The default mode is &quot;default&quot;, and every bind applies to a single mode. The mode can be viewed/changed with the &lt;code&gt;$fish_bind_mode&lt;/code&gt; variable.</source>
          <target state="translated">キーバインディングは、Viのモーダル入力動作を模倣する「モード」を使用できます。デフォルトのモードは「デフォルト」であり、すべてのバインドは単一のモードに適用されます。モードは &lt;code&gt;$fish_bind_mode&lt;/code&gt; 変数で表示/変更できます。</target>
        </trans-unit>
        <trans-unit id="b562f1a6d0c5684ca96b09426bc1669506a7f803" translate="yes" xml:space="preserve">
          <source>Learning fish</source>
          <target state="translated">学習魚</target>
        </trans-unit>
        <trans-unit id="b5cf98d60edf53bb04a75b49fe8d89b334867632" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU General Public License, version 2.</source>
          <target state="translated">GNU General Public License,バージョン2の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="f063dbdbbc3586964fed3651ab53c12631bbacd5" translate="yes" xml:space="preserve">
          <source>Like other shells, a dollar sign performs variable substitution:</source>
          <target state="translated">他のシェルと同様に、ドル記号は変数の置換を行います。</target>
        </trans-unit>
        <trans-unit id="1c10e83fba90f8ed8fbb793d35b29d018d6a8897" translate="yes" xml:space="preserve">
          <source>Like other shells, fish allows multiple commands either on separate lines or the same line.</source>
          <target state="translated">他のシェルと同様に、魚は複数のコマンドを別々の行または同じ行で実行することができます。</target>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="a51da1d245e2b299170419f02a7283c1cf86ec93" translate="yes" xml:space="preserve">
          <source>Lists adjacent to other lists or strings are expanded as &lt;a href=&quot;index#cartesian-product&quot;&gt;cartesian products&lt;/a&gt; unless quoted (see &lt;a href=&quot;index#expand-variable&quot;&gt;Variable expansion&lt;/a&gt;):</source>
          <target state="translated">他のリストまたは文字列に隣接するリストは、引用符で囲まれていない限り、&lt;a href=&quot;index#cartesian-product&quot;&gt;デカルト積&lt;/a&gt;として展開されます（&lt;a href=&quot;index#expand-variable&quot;&gt;変数展開を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e550372c446deb80cb7097a6530c7895ce489c98" translate="yes" xml:space="preserve">
          <source>Lists adjacent to other lists or strings are expanded as cartesian products:</source>
          <target state="translated">他のリストや文字列に隣接するリストは、直交積として展開されます。</target>
        </trans-unit>
        <trans-unit id="d036c0ec2ab378b452b8d2cead3a3ffcc191575a" translate="yes" xml:space="preserve">
          <source>Lists cannot contain other lists: there is no recursion. A variable is a list of strings, full stop.</source>
          <target state="translated">リストは他のリストを含むことはできません。変数は文字列のリストです。</target>
        </trans-unit>
        <trans-unit id="8172703ebdf7bfc5b44da606bf9f833637212ffc" translate="yes" xml:space="preserve">
          <source>Locale variables</source>
          <target state="translated">ロケール変数</target>
        </trans-unit>
        <trans-unit id="02720f9d38bf4f35e84ed5228689898bee176418" translate="yes" xml:space="preserve">
          <source>Loops</source>
          <target state="translated">Loops</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="f5f695dcfd95e469044fda4ad8dda41439800142" translate="yes" xml:space="preserve">
          <source>Many other shells have a large library of builtin commands. Most of these commands are also available as standalone commands, but have been implemented in the shell anyway. To avoid code duplication, and to avoid the confusion of subtly differing versions of the same command, &lt;code&gt;fish&lt;/code&gt; generally only implements builtins for actions which cannot be performed by a regular command.</source>
          <target state="translated">他の多くのシェルには、組み込みコマンドの大きなライブラリがあります。これらのコマンドのほとんどはスタンドアロンコマンドとしても使用できますが、いずれにしてもシェルに実装されています。コードの重複を避け、同じコマンドの微妙に異なるバージョンの混乱を避けるために、 &lt;code&gt;fish&lt;/code&gt; は通常、通常のコマンドでは実行できないアクションのビルトインのみを実装します。</target>
        </trans-unit>
        <trans-unit id="508666f7961e41b7a23a46d49b1c68da21e0ab6e" translate="yes" xml:space="preserve">
          <source>Many terminals support 24-bit (i.e., true-color) color escape sequences. This includes modern xterm, Gnome Terminal, Konsole, and iTerm2. Fish attempts to detect such terminals through various means in &lt;code&gt;config.fish&lt;/code&gt; You can explicitly force that support via &lt;code&gt;set fish_term24bit 1&lt;/code&gt;.</source>
          <target state="translated">多くの端末は24ビット（つまり、トゥルーカラー）のカラーエスケープシーケンスをサポートしています。これには、最新のxterm、Gnome Terminal、Konsole、およびiTerm2が含まれます。Fishは、 &lt;code&gt;config.fish&lt;/code&gt; のさまざまな方法でそのような端末を検出しようとします &lt;code&gt;set fish_term24bit 1&lt;/code&gt; 介して、そのサポートを明示的に強制できます。</target>
        </trans-unit>
        <trans-unit id="ee9b4890d50f0c6b762d298b81c92845215e8616" translate="yes" xml:space="preserve">
          <source>Match Glob Examples</source>
          <target state="translated">グローブの例を一致させる</target>
        </trans-unit>
        <trans-unit id="5d635a6434318430e0640768784677cf44ef96c2" translate="yes" xml:space="preserve">
          <source>Match Regex Examples</source>
          <target state="translated">一致する正規表現の例</target>
        </trans-unit>
        <trans-unit id="282c4c424c8c8f802f09ed9069046a66c3e0e2df" translate="yes" xml:space="preserve">
          <source>Matching can be made case-insensitive with &lt;code&gt;--ignore-case&lt;/code&gt; or &lt;code&gt;-i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--ignore-case&lt;/code&gt; または &lt;code&gt;-i&lt;/code&gt; を使用すると、大文字と小文字を区別しないマッチングを行うことができます。</target>
        </trans-unit>
        <trans-unit id="dfe39636b572a032956990221bea7522894ca013" translate="yes" xml:space="preserve">
          <source>Mismatched parenthesis</source>
          <target state="translated">括弧の不一致</target>
        </trans-unit>
        <trans-unit id="7d99cf687fc07cadeb9c71efe74a35ddac5120de" translate="yes" xml:space="preserve">
          <source>More on universal variables</source>
          <target state="translated">普遍的な変数の詳細</target>
        </trans-unit>
        <trans-unit id="a6722727e636d961891415cd8a8813e266709c00" translate="yes" xml:space="preserve">
          <source>Most programs allow you to suspend the program's execution and return control to &lt;code&gt;fish&lt;/code&gt; by pressing &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Z&lt;/b&gt; (also referred to as &lt;code&gt;^Z&lt;/code&gt;). Once back at the &lt;code&gt;fish&lt;/code&gt; commandline, you can start other programs and do anything you want. If you then want you can go back to the suspended command by using the &lt;a href=&quot;commands#fg&quot;&gt;&lt;code&gt;fg&lt;/code&gt;&lt;/a&gt; (foreground) command.</source>
          <target state="translated">ほとんどのプログラムでは、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Z&lt;/b&gt;（ &lt;code&gt;^Z&lt;/code&gt; とも呼ばれる）を押すことで、プログラムの実行を一時停止し、制御を &lt;code&gt;fish&lt;/code&gt; 戻すことができます。 &lt;code&gt;fish&lt;/code&gt; コマンドラインに戻ったら、他のプログラムを起動して、好きなことを行うことができます。その後、必要に応じて、&lt;a href=&quot;commands#fg&quot;&gt; &lt;code&gt;fg&lt;/code&gt; &lt;/a&gt;（フォアグラウンド）コマンドを使用して、中断されたコマンドに戻ることができます。&lt;em&gt;&lt;/em&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e36a3163fcb5b2ce91e7e62b6620c694486a5106" translate="yes" xml:space="preserve">
          <source>Most programs use three input/output (IO) streams, each represented by a number called a file descriptor (FD). These are:</source>
          <target state="translated">ほとんどのプログラムでは、ファイルディスクリプタ(FD)と呼ばれる番号で表される3つの入出力(IO)ストリームを使用します。これらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="fbfe945f56b2d1285935393b0ba01a8e6e9fb533" translate="yes" xml:space="preserve">
          <source>Most subcommands accept a &lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; switch, which suppresses the usual output but exits with the documented status.</source>
          <target state="translated">ほとんどのサブコマンドは &lt;code&gt;-q&lt;/code&gt; または &lt;code&gt;--quiet&lt;/code&gt; スイッチを受け入れます。これは、通常の出力を抑制しますが、文書化されたステータスで終了します。</target>
        </trans-unit>
        <trans-unit id="9e4b95e5fe05cdb2e32c0be4dc38dcb8444a090a" translate="yes" xml:space="preserve">
          <source>Multiline editing</source>
          <target state="translated">マルチライン編集</target>
        </trans-unit>
        <trans-unit id="284d6c5f151a78ee571b877c91d2822cf913407f" translate="yes" xml:space="preserve">
          <source>Multiple lines are OK. Colors can be set via &lt;code&gt;set_color&lt;/code&gt;, passing it named ANSI colors, or hex RGB values:</source>
          <target state="translated">複数行でも問題ありません。色は、 &lt;code&gt;set_color&lt;/code&gt; を使用して設定でき、名前付きのANSI色、または16進RGB値を渡します。</target>
        </trans-unit>
        <trans-unit id="b9313e4afc7e7087f2691f5390743aa11cb2045a" translate="yes" xml:space="preserve">
          <source>Multiple lines are not supported in &lt;code&gt;fish_right_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_right_prompt&lt;/code&gt; では複数行はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="2ddaeb8bc8e45a0d0bc521306478830db49c61a1" translate="yes" xml:space="preserve">
          <source>My command (pkg-config) gives its output as a single long string?</source>
          <target state="translated">私のコマンド (pkg-config)は、その出力を一本の長い文字列として出力していますか?</target>
        </trans-unit>
        <trans-unit id="f9c6fa94b0cdb85c962b8db6aabb5f0166f8183a" translate="yes" xml:space="preserve">
          <source>NUL Delimited Examples</source>
          <target state="translated">NUL 区切りの例</target>
        </trans-unit>
        <trans-unit id="2bcd7736113c6b4efdb7226bbeffaacd2a34dab2" translate="yes" xml:space="preserve">
          <source>Next, do the following (assuming fish was installed to /usr/local):</source>
          <target state="translated">次に、以下のようにします(fishが/usr/localにインストールされていると仮定して)。</target>
        </trans-unit>
        <trans-unit id="e1c89d68ecad2be53a8cf7ccdf90c12f59e35a10" translate="yes" xml:space="preserve">
          <source>Non existing commands.</source>
          <target state="translated">既存のコマンド以外。</target>
        </trans-unit>
        <trans-unit id="76f3e65e8538fb0ceb8d456aa90c5d4ef9931a07" translate="yes" xml:space="preserve">
          <source>Normally when &lt;code&gt;fish&lt;/code&gt; starts a program, this program will be put in the foreground, meaning it will take control of the terminal and &lt;code&gt;fish&lt;/code&gt; will be stopped until the program finishes. Sometimes this is not desirable. For example, you may wish to start an application with a graphical user interface from the terminal, and then be able to continue using the shell. In such cases, there are several ways in which the user can change fish's behavior.</source>
          <target state="translated">通常、 &lt;code&gt;fish&lt;/code&gt; がプログラムを開始すると、このプログラムはフォアグラウンドに置かれます。つまり、ターミナルを制御し、プログラムが終了するまで &lt;code&gt;fish&lt;/code&gt; は停止します。これは望ましくない場合があります。たとえば、ターミナルからグラフィカルユーザーインターフェイスを使用してアプリケーションを起動し、シェルを引き続き使用できるようにする場合があります。このような場合、ユーザーが魚の行動を変更する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="08c5c1ef76ceaf50dd2d8b6a05425f76eaec2b83" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;case&lt;/code&gt; does not fall through, and can accept multiple arguments or (quoted) wildcards.</source>
          <target state="translated">&lt;code&gt;case&lt;/code&gt; と小文字は区別されず、複数の引数または（引用符で囲まれた）ワイルドカードを受け入れることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="daafcf66550c6e75c5e67349c16e61c50e7a4d2f" translate="yes" xml:space="preserve">
          <source>Note that array indices start at 1 in &lt;code&gt;fish&lt;/code&gt;, not 0, as is more common in other languages. This is because many common Unix tools like &lt;code&gt;seq&lt;/code&gt; are more suited to such use. An invalid index is silently ignored resulting in no value being substituted (not an empty string).</source>
          <target state="translated">他の言語ではより一般的であるように、配列のインデックスは0ではなく &lt;code&gt;fish&lt;/code&gt; で1から始まることに注意してください。これは、 &lt;code&gt;seq&lt;/code&gt; のような多くの一般的なUnixツールがそのような用途により適しているためです。無効なインデックスは暗黙的に無視され、その結果、値は置換されません（空の文字列ではありません）。</target>
        </trans-unit>
        <trans-unit id="a0707e5e6cd48555094dd0ce06f95a929ab9ee48" translate="yes" xml:space="preserve">
          <source>Note that because fish loads functions on-demand, saved functions will not function as &lt;a href=&quot;index#event&quot;&gt;event handlers&lt;/a&gt; until they are run or sourced otherwise. To activate an event handler for every new shell, add the function to your &lt;a href=&quot;index#initialization&quot;&gt;shell initialization file&lt;/a&gt; instead of using &lt;code&gt;funcsave&lt;/code&gt;.</source>
          <target state="translated">fishはオンデマンドで関数をロードするため、保存された関数は、実行されるか、別の方法でソースされるまで、&lt;a href=&quot;index#event&quot;&gt;イベントハンドラー&lt;/a&gt;として機能しません。新しいシェルごとにイベントハンドラーをアクティブにするには、 &lt;code&gt;funcsave&lt;/code&gt; を使用&lt;a href=&quot;index#initialization&quot;&gt;する&lt;/a&gt;代わりに、シェル初期化ファイルに関数を追加します。</target>
        </trans-unit>
        <trans-unit id="d05600b5a2c4216ed0373e93b0ae5b8dde601d3a" translate="yes" xml:space="preserve">
          <source>Note that command substitutions in a case statement will be evaluated even if its body is not taken. All substitutions, including command substitutions, must be performed before the value can be compared against the parameter.</source>
          <target state="translated">case文の中のコマンドの置換は、本体が取られていなくても評価されることに注意してください。コマンドの置換を含むすべての置換は、値がパラメータと比較される前に実行されなければなりません。</target>
        </trans-unit>
        <trans-unit id="27acedfb629019bcb72c1aaa58829703ce6d6432" translate="yes" xml:space="preserve">
          <source>Note that conversion may fail, e.g. &quot;102.234&quot; will not losslessly convert to an integer, causing printf to print an error.</source>
          <target state="translated">変換に失敗する可能性があることに注意してください。例えば、&quot;102.234 &quot;はロスレスに整数に変換されず、printfがエラーを表示する原因となります。</target>
        </trans-unit>
        <trans-unit id="8107914840367cc99db95db5e903f636fb93ac38" translate="yes" xml:space="preserve">
          <source>Note that events are only received from the current fish process as there is no way to send events from one fish process to another.</source>
          <target state="translated">ある魚プロセスから別の魚プロセスにイベントを送信する方法がないため、イベントは現在の魚プロセスからしか受信できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b604d17300bf8871e1df935d8ccab61e77f2c2e6" translate="yes" xml:space="preserve">
          <source>Note that events are only sent to the current fish process as there is no way to send events from one fish process to another.</source>
          <target state="translated">ある魚プロセスから別の魚プロセスにイベントを送信する方法がないため、イベントは現在の魚プロセスにのみ送信されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1816c418ab7796b893d641bb9d4e996647340b50" translate="yes" xml:space="preserve">
          <source>Note that fish does not fall through on case statements. Only the first matching case is executed.</source>
          <target state="translated">fishはcase文では落ちないことに注意してください。最初にマッチしたケースのみが実行されます。</target>
        </trans-unit>
        <trans-unit id="dea20fe7204b37a954eb8c5b71576a69b5e9c5a0" translate="yes" xml:space="preserve">
          <source>Note that fish has a default titlebar message, which will be used if the fish_title function is undefined. So simply unsetting the fish_title function will not work.</source>
          <target state="translated">fishにはデフォルトのタイトルバーメッセージがあり、これはfish_title関数が未定義の場合に使用されることに注意してください。そのため、単に fish_title 関数の設定を解除しただけでは動作しません。</target>
        </trans-unit>
        <trans-unit id="216dd486d99355c7f2e848a5066c6390232ae830" translate="yes" xml:space="preserve">
          <source>Note that for backwards compatibility each subcommand can also be specified as a long option. For example, rather than &lt;code&gt;history search&lt;/code&gt; you can type &lt;code&gt;history --search&lt;/code&gt;. Those long options are deprecated and will be removed in a future release.</source>
          <target state="translated">下位互換性のために、各サブコマンドを長いオプションとして指定することもできます。たとえば、 &lt;code&gt;history search&lt;/code&gt; ではなく、「 &lt;code&gt;history --search&lt;/code&gt; 」と入力できます。これらの長いオプションは非推奨であり、将来のリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="c97f265eeb04a552b0a053d1fe6fd39164111e41" translate="yes" xml:space="preserve">
          <source>Note that for most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;&lt;code&gt;$status&lt;/code&gt;&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is consistent with setting &lt;code&gt;shopt -s failglob&lt;/code&gt; in bash. There are exactly 3 exceptions, namely &lt;a href=&quot;commands#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#count&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;. Their globs are permitted to expand to zero arguments, as with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="translated">ほとんどのコマンドでは、ワイルドカードが展開に失敗した場合、コマンドは実行されず、&lt;a href=&quot;#variables-status&quot;&gt; &lt;code&gt;$status&lt;/code&gt; &lt;/a&gt;がゼロ以外に設定され、警告が出力されます。この動作は、bashでの &lt;code&gt;shopt -s failglob&lt;/code&gt; の設定と一致しています。ちょうど3つの例外、つまり&lt;a href=&quot;commands#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#count&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#for&quot;&gt; &lt;code&gt;for&lt;/code&gt; があり&lt;/a&gt;ます。それらのグロブは、bashの &lt;code&gt;shopt -s nullglob&lt;/code&gt; と同様に、ゼロ引数に拡張することが許可されています。</target>
        </trans-unit>
        <trans-unit id="179b535385e9bcd6de7a6f886e309b106b43e8dd" translate="yes" xml:space="preserve">
          <source>Note that functions cannot be started in the background. Functions that are stopped and then restarted in the background using the &lt;code&gt;bg&lt;/code&gt; command will not execute correctly.</source>
          <target state="translated">機能はバックグラウンドで開始できないことに注意してください。停止してから &lt;code&gt;bg&lt;/code&gt; コマンドを使用してバックグラウンドで再開した機能は、正しく実行されません。</target>
        </trans-unit>
        <trans-unit id="56578f519a03e2785432ffc83f432b088789cd11" translate="yes" xml:space="preserve">
          <source>Note that most builtin commands display their help in the terminal when given the &lt;code&gt;--help&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;--help&lt;/code&gt; オプションを指定すると、ほとんどの組み込みコマンドがヘルプを端末に表示することに注意してください。</target>
        </trans-unit>
        <trans-unit id="052c493b4f8ae8b6935593bcf58c5ec984ab99f3" translate="yes" xml:space="preserve">
          <source>Note that not all these limits are available in all operating systems.</source>
          <target state="translated">これらの制限は、すべてのオペレーティングシステムで利用できるわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="fd0759c196f448d14f3c2205ba14675a88db1daf" translate="yes" xml:space="preserve">
          <source>Note that parentheses will usually require escaping with &lt;code&gt;\(&lt;/code&gt; to avoid being interpreted as a command substitution.</source>
          <target state="translated">括弧は通常、コマンド置換として解釈されないように &lt;code&gt;\(&lt;/code&gt; でエスケープする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="188395866987d29873c39e6fea9524d72368f195" translate="yes" xml:space="preserve">
          <source>Note that seeding the engine will NOT give the same result across different systems.</source>
          <target state="translated">エンジンのシーディングを行っても、異なるシステムで同じ結果が得られるわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b65cb077ea76993a41de3fb713b42e0fed91a42b" translate="yes" xml:space="preserve">
          <source>Note that symbolic masks currently do not work as intended.</source>
          <target state="translated">シンボリックマスクは現在のところ意図した通りには動作しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="bef2f79c5ca0fefc2538b283ecde5e201f174c69" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables which this command manipulates.</source>
          <target state="translated">&lt;code&gt;cd&lt;/code&gt; コマンドは、ディレクトリ履歴を最近アクセスした25個のディレクトリに制限することに注意してください。履歴は、このコマンドが操作する &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; 変数に格納されます。</target>
        </trans-unit>
        <trans-unit id="10a8eb5ef4bfcbb0fbb38b2c1dbc89e74a6c7106" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables which this command manipulates. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">&lt;code&gt;cd&lt;/code&gt; コマンドは、ディレクトリ履歴を最近アクセスした25個のディレクトリに制限することに注意してください。履歴は、このコマンドが操作する &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; 変数に格納されます。これらのユニバーサル変数を作成すると、 &lt;code&gt;cd&lt;/code&gt; 履歴がすべての魚インスタンス間で共有されます。</target>
        </trans-unit>
        <trans-unit id="9b4bda95d407194baa99d73ed10ab09fd4118640" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables.</source>
          <target state="translated">&lt;code&gt;cd&lt;/code&gt; コマンドは、ディレクトリ履歴を最近アクセスした25個のディレクトリに制限することに注意してください。履歴は &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; 変数に格納されます。</target>
        </trans-unit>
        <trans-unit id="468f475ce4540aa6d4ffc053e8efd0e42aba5839" translate="yes" xml:space="preserve">
          <source>Note that the shell will attempt to change directory without requiring &lt;code&gt;cd&lt;/code&gt; if the name of a directory is provided (starting with &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;, or ending with &lt;code&gt;/&lt;/code&gt;).</source>
          <target state="translated">ディレクトリの名前が​​指定されている場合（ &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; または &lt;code&gt;~&lt;/code&gt; で始まる、または &lt;code&gt;/&lt;/code&gt; で終わる）、シェルは &lt;code&gt;cd&lt;/code&gt; を要求せずにディレクトリを変更しようとすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4a1ad39e7a025d924c676894892c33d43f516843" translate="yes" xml:space="preserve">
          <source>Note that there are three environment variables that are automatically split on colons to become lists when fish starts running: &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;CDPATH&lt;/code&gt;, &lt;code&gt;MANPATH&lt;/code&gt;. Conversely, they are joined on colons when exported to subcommands. All other environment variables (e.g., &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;) which have similar semantics are treated as simple strings.</source>
          <target state="translated">fishの実行開始時にリストになるようにコロンで自動的に分割される3つの環境変数があることに注意してください： &lt;code&gt;PATH&lt;/code&gt; 、 &lt;code&gt;CDPATH&lt;/code&gt; 、 &lt;code&gt;MANPATH&lt;/code&gt; 。逆に、サブコマンドにエクスポートすると、コロンで結合されます。同様のセマンティクスを持つ他のすべての環境変数（ &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; など）は、単純な文字列として扱われます。</target>
        </trans-unit>
        <trans-unit id="bf45589c3e3c3f4d264bc9f93c56158f4afde11c" translate="yes" xml:space="preserve">
          <source>Note that this function will not be used if a command by this name exists (which is the case on macOS or Haiku).</source>
          <target state="translated">この名前のコマンドが存在する場合(macOSやHaikuの場合)は、この関数は使用されませんのでご注意ください。</target>
        </trans-unit>
        <trans-unit id="5bf381b343429f3c3b6b07cc6b6f0a80c7987163" translate="yes" xml:space="preserve">
          <source>Note that without the quotes or braces, fish will try to expand a variable called &lt;code&gt;$WORDs&lt;/code&gt;, which may not exist.</source>
          <target state="translated">引用符や中括弧がないと、fishは &lt;code&gt;$WORDs&lt;/code&gt; という変数を展開しようとしますが、これは存在しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="655206648d0dc7faa21d15bc23b20c851a2e5079" translate="yes" xml:space="preserve">
          <source>Note that ~/.config/fish/config.fish is sourced &lt;em&gt;after&lt;/em&gt; the snippets. This is so users can copy snippets and override some of their behavior.</source>
          <target state="translated">〜/ .config / fish / config.fishはスニペットの&lt;em&gt;後&lt;/em&gt;に供給されることに注意してください。これは、ユーザーがスニペットをコピーして、一部の動作を上書きできるようにするためです。</target>
        </trans-unit>
        <trans-unit id="e2ce3cf51c29175bd1e3054b41cb66e679925023" translate="yes" xml:space="preserve">
          <source>Note that, like GNU tools and most of fish's builtins, &lt;code&gt;contains&lt;/code&gt; interprets all arguments starting with a &lt;code&gt;-&lt;/code&gt; as options to contains, until it reaches an argument that is &lt;code&gt;--&lt;/code&gt; (two dashes). See the examples below.</source>
          <target state="translated">GNUツールやほとんどのfishのビルトインと同様に、 &lt;code&gt;contains&lt;/code&gt; は &lt;code&gt;-&lt;/code&gt; で始まるすべての引数を、それが &lt;code&gt;--&lt;/code&gt; （2つのダッシュ）である引数に達するまで、containsのオプションとして解釈することに注意してください。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="9cd1c04aa664d29ef9d4114fed80a20478f9f7c6" translate="yes" xml:space="preserve">
          <source>Note: At the moment the debug prompt is identical to your normal fish prompt. This can make it hard to recognize that you've entered a debug session. Issue 1310 is open to improve this.</source>
          <target state="translated">注意:現時点では、デバッグプロンプトは通常の魚のプロンプトと同じです。これにより、デバッグセッションに入ったことを認識するのが困難になることがあります。これを改善するために1310号を公開しています。</target>
        </trans-unit>
        <trans-unit id="2acd9175970aa8fc3b9936ce32e6e5f5129257b5" translate="yes" xml:space="preserve">
          <source>Note: This event will be emitted even if the command is invalid. The commandline parameter includes the entire commandline verbatim, and may potentially include newlines.</source>
          <target state="translated">注意:このイベントは、コマンドが無効な場合でも発生します。コマンドラインパラメータにはコマンドライン全体がそのまま含まれ、改行を含む可能性があります。</target>
        </trans-unit>
        <trans-unit id="4a71ed28fa070fd5d0f2ba5d9d8b94e51646208b" translate="yes" xml:space="preserve">
          <source>Note: fish 2.2.0 and earlier used a default of 10 milliseconds, and provided no way to configure it. That effectively made it impossible to use escape as a meta key.</source>
          <target state="translated">注意:fish 2.2.0 以前のバージョンではデフォルトで 10 ミリ秒を使用しており、これを設定する方法はありませんでした。そのため、メタキーとしてエスケープを使用することが事実上不可能になっていました。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="03c757f6b7891744a49627d17ec9ed791ed69d26" translate="yes" xml:space="preserve">
          <source>Nothing if the flag is a boolean that takes no argument or is an implicit int flag, else</source>
          <target state="translated">フラグが引数を取らないブール値か、暗黙のintフラグであれば何もしません。</target>
        </trans-unit>
        <trans-unit id="7e9e91cddb4e1bbe3d96c5cfb7bcf12796b0c7e0" translate="yes" xml:space="preserve">
          <source>Now hub inherits all of the completions from git. Note this can also be specified in a function declaration.</source>
          <target state="translated">これで hub は git からすべての補完を継承するようになりました。これは関数宣言で指定することもできます。</target>
        </trans-unit>
        <trans-unit id="377c6369b04b17877206baabd99b8340d2c1712d" translate="yes" xml:space="preserve">
          <source>Now in another shell:</source>
          <target state="translated">今度は別のシェルで。</target>
        </trans-unit>
        <trans-unit id="d5aead3c087eb1218d9c5de157a34a40ad6e6161" translate="yes" xml:space="preserve">
          <source>Numerical comparisons will simply fail if one of the operands is not a number:</source>
          <target state="translated">オペランドの1つが数値でない場合、数値比較は単純に失敗します。</target>
        </trans-unit>
        <trans-unit id="aeeb9e7d5766fc544e9c4260b0a26961443229c2" translate="yes" xml:space="preserve">
          <source>Oh My Fish</source>
          <target state="translated">オーマイフィッシュ</target>
        </trans-unit>
        <trans-unit id="c168b84a253f1a9380f35914e43b4459d37046ec" translate="yes" xml:space="preserve">
          <source>Old style long options, like '&lt;code&gt;-Wall&lt;/code&gt;'. Old style long options can be more than one character long, are preceded by a single hyphen and may not be grouped together. Option arguments are specified in the following parameter ('&lt;code&gt;-ao null&lt;/code&gt;').</source>
          <target state="translated">' &lt;code&gt;-Wall&lt;/code&gt; 'のような古いスタイルの長いオプション。古いスタイルの長いオプションは、1文字以上にすることができ、単一のハイフンが前に付き、一緒にグループ化することはできません。オプション引数は、次のパラメーターで指定されます（ ' &lt;code&gt;-ao null&lt;/code&gt; '）。</target>
        </trans-unit>
        <trans-unit id="b9e42bb3078b6143675803071b50a1f886f1fddf" translate="yes" xml:space="preserve">
          <source>On startup, Fish evaluates a number of configuration files, which can be used to control the behavior of the shell. The location of these configuration variables is controlled by a number of environment variables, and their default or usual location is given below.</source>
          <target state="translated">起動時に、Fishはシェルの動作を制御するために使用できる多くの設定ファイルを評価します。これらの設定ファイルの場所はいくつかの環境変数によって制御されており、それらのデフォルトまたは通常の場所は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="53732b6ec19e859a0b3473ce5240c51bbdc7db63" translate="yes" xml:space="preserve">
          <source>On systems that supports this feature, jobs will print the CPU usage of each job since the last command was executed. The CPU usage is expressed as a percentage of full CPU activity. Note that on multiprocessor systems, the total activity may be more than 100%.</source>
          <target state="translated">この機能をサポートしているシステムでは、最後のコマンドが実行されてからの各ジョブのCPU使用率が表示されます。CPU使用率は、フルCPUアクティビティのパーセンテージで表示されます。マルチプロセッサシステムでは、アクティビティの合計が100%を超える場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="18125968ef24a12c2f2c9db564d4fb936f8a352f" translate="yes" xml:space="preserve">
          <source>Once installed, just type in &lt;code&gt;fish&lt;/code&gt; into your current shell to try it out!</source>
          <target state="translated">インストールしたら、現在のシェルに &lt;code&gt;fish&lt;/code&gt; を入力して試してみてください！</target>
        </trans-unit>
        <trans-unit id="f9801d214429ef9429f41d9ccbf53d1f50cc2cf7" translate="yes" xml:space="preserve">
          <source>One of the most common uses for functions is to slightly alter the behavior of an already existing command. For example, one might want to redefine the &lt;code&gt;ls&lt;/code&gt; command to display colors. The switch for turning on colors on GNU systems is '&lt;code&gt;--color=auto&lt;/code&gt;'. An alias, or wrapper, around &lt;code&gt;ls&lt;/code&gt; might look like this:</source>
          <target state="translated">関数の最も一般的な用途の1つは、既存のコマンドの動作をわずかに変更することです。たとえば、色を表示するために &lt;code&gt;ls&lt;/code&gt; コマンドを再定義したい場合があります。GNUシステムで色をオンにするスイッチは ' &lt;code&gt;--color=auto&lt;/code&gt; 'です。 &lt;code&gt;ls&lt;/code&gt; のエイリアスまたはラッパーは次のようになります。</target>
        </trans-unit>
        <trans-unit id="c6ed72e8734163b3555d72a22a65213a63ac427a" translate="yes" xml:space="preserve">
          <source>Only one function's description can be changed in a single invocation of &lt;code&gt;functions -d&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;functions -d&lt;/code&gt; 1回の呼び出しで変更できる関数の説明は1つだけです。</target>
        </trans-unit>
        <trans-unit id="744f6b1ea6029a4d03e486aa51d71e6cdfe3a24a" translate="yes" xml:space="preserve">
          <source>Only part of the output can be used, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">出力の一部のみを使用できます。詳細については、&lt;a href=&quot;#expand-index-range&quot;&gt;インデックス範囲の拡張&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="e52f4d4c344dadad003e702bffb9e5e28cdc4a21" translate="yes" xml:space="preserve">
          <source>Operators for files and directories</source>
          <target state="translated">ファイルとディレクトリの演算子</target>
        </trans-unit>
        <trans-unit id="f27bb0ff136bb8c7c7f1daaac32275d53bfd219d" translate="yes" xml:space="preserve">
          <source>Operators for text strings</source>
          <target state="translated">テキスト文字列用の演算子</target>
        </trans-unit>
        <trans-unit id="a47a505eb7af733ce0bd8e9777ac0dd7490e55d7" translate="yes" xml:space="preserve">
          <source>Operators to combine expressions</source>
          <target state="translated">式を結合するための演算子</target>
        </trans-unit>
        <trans-unit id="7fa47fe3927b334a484c669114b525abc6a94112" translate="yes" xml:space="preserve">
          <source>Operators to compare and examine numbers</source>
          <target state="translated">数字を比較検討するオペレーター</target>
        </trans-unit>
        <trans-unit id="d4829f651a76eb5aa9c3d27e3534a7c418cd1fc9" translate="yes" xml:space="preserve">
          <source>Option Specifications</source>
          <target state="translated">オプション仕様</target>
        </trans-unit>
        <trans-unit id="6f38993c6d0d5cf791252a01f84f61ce28090cdc" translate="yes" xml:space="preserve">
          <source>Optionally a &lt;code&gt;!&lt;/code&gt; followed by fish script to validate the value. Typically this will be a function to run. If the return status is zero the value for the flag is valid. If non-zero the value is invalid. Any error messages should be written to stdout (not stderr). See the section on &lt;a href=&quot;#arparse-validation&quot;&gt;Flag Value Validation&lt;/a&gt; for more information.</source>
          <target state="translated">オプションで &lt;code&gt;!&lt;/code&gt; 続いて、値を検証するための魚のスクリプト通常、これは実行する関数です。戻り状況がゼロの場合、フラグの値は有効です。ゼロ以外の場合、値は無効です。エラーメッセージは、（stderrではなく）stdoutに書き込む必要があります。詳細については、&lt;a href=&quot;#arparse-validation&quot;&gt;フラグ値の検証&lt;/a&gt;に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="14be7a9cc678ff8d2acac3f8d22e39b9c8a4df32" translate="yes" xml:space="preserve">
          <source>Other features</source>
          <target state="translated">その他の特徴</target>
        </trans-unit>
        <trans-unit id="8064e7b7ad17f0248f35efb48f0f1d68ee39d15e" translate="yes" xml:space="preserve">
          <source>Other shells such as bash and zsh use a variable named &lt;code&gt;HISTFILE&lt;/code&gt; for a similar purpose. Fish uses a different name to avoid conflicts and signal that the behavior is different (session name instead of a file path). Also, if you set the var to anything other than &lt;code&gt;fish&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt; it will inhibit importing the bash history. That's because the most common use case for this feature is to avoid leaking private or sensitive history when giving a presentation.</source>
          <target state="translated">bashやzshなどの他のシェルは、同様の目的で &lt;code&gt;HISTFILE&lt;/code&gt; という名前の変数を使用します。 Fishは別の名前を使用して競合を回避し、動作が異なることを通知します（ファイルパスではなくセッション名）。また、varを &lt;code&gt;fish&lt;/code&gt; または &lt;code&gt;default&lt;/code&gt; 以外に設定すると、bash履歴のインポートが禁止されます。これは、この機能の最も一般的な使用例は、プレゼンテーションを行うときにプライベートな履歴や機密の履歴が漏洩しないようにするためです。</target>
        </trans-unit>
        <trans-unit id="ca76df4fa26ca40f2ebdbbcc9b7ac947b4b17597" translate="yes" xml:space="preserve">
          <source>Other shells, such as zsh, provide a rich glob syntax for restricting the files matched by globs. For example, &lt;code&gt;**(.)&lt;/code&gt;, to only match regular files. Fish prefers to defer such features to programs, such as &lt;code&gt;find&lt;/code&gt;, rather than reinventing the wheel. Thus, if you want to limit the wildcard expansion to just regular files the fish approach is to define and use a function. For example,</source>
          <target state="translated">zshなどの他のシェルは、グロブに一致するファイルを制限するための豊富なグロブ構文を提供します。たとえば、 &lt;code&gt;**(.)&lt;/code&gt; 、通常のファイルにのみ一致します。Fishは、そのような機能を、ホイールを再発明するのではなく、 &lt;code&gt;find&lt;/code&gt; などのプログラムに任せることを好みます。したがって、ワイルドカードの展開を通常のファイルだけに制限したい場合、魚のアプローチは関数を定義して使用することです。例えば、</target>
        </trans-unit>
        <trans-unit id="14a838bcf64937317892425e5ab22ef3642359f4" translate="yes" xml:space="preserve">
          <source>Other variables, like &lt;code&gt;$PATH&lt;/code&gt;, really do have multiple values. During variable expansion, the variable expands to become multiple arguments:</source>
          <target state="translated">&lt;code&gt;$PATH&lt;/code&gt; などの他の変数には、実際には複数の値があります。変数の展開中、変数は展開されて複数の引数になります。</target>
        </trans-unit>
        <trans-unit id="adcbabbfd6290e1df478b0d2b37c0beb20ff4767" translate="yes" xml:space="preserve">
          <source>Outputting multiple lines is not supported in &lt;code&gt;fish_mode_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_mode_prompt&lt;/code&gt; では、複数行の出力はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="5b8012177cdea50be6a01e8c45312b388ccc9c7a" translate="yes" xml:space="preserve">
          <source>Outside of double quotes, variables will expand to as many arguments as they have elements. That means an empty list will expand to nothing, a variable with one element will expand to that element, and a variable with multiple elements will expand to each of those elements separately.</source>
          <target state="translated">二重引用符以外では、変数は要素を持つ引数の数だけ展開されます。つまり、空のリストは何も展開されず、1つの要素を持つ変数はその要素に展開され、複数の要素を持つ変数はそれぞれの要素に個別に展開されます。</target>
        </trans-unit>
        <trans-unit id="b7cda6a843d651b6992452486c962d590a3cb164" translate="yes" xml:space="preserve">
          <source>PATH variables</source>
          <target state="translated">PATH 変数</target>
        </trans-unit>
        <trans-unit id="404b5a722c514f9f99c58c8b9832dbdc15c84e14" translate="yes" xml:space="preserve">
          <source>PATH variables act as normal arrays, except they are are implicitly joined and split on colons.</source>
          <target state="translated">PATH 変数は通常の配列と同じように動作しますが、コロンで暗黙的に結合されたり分割されたりします。</target>
        </trans-unit>
        <trans-unit id="6b76530ae6668a37f97a682d440c45d138de6409" translate="yes" xml:space="preserve">
          <source>Parameter expansion (Globbing)</source>
          <target state="translated">パラメータ展開(グラビング</target>
        </trans-unit>
        <trans-unit id="0fdb3f75d27167ce5697671dbec55e14ed3744ea" translate="yes" xml:space="preserve">
          <source>Parentheses and the &lt;code&gt;-o&lt;/code&gt; and &lt;code&gt;-a&lt;/code&gt; operators can be combined to produce more complicated expressions. In this example, success is printed if there is a &lt;code&gt;/foo&lt;/code&gt; or &lt;code&gt;/bar&lt;/code&gt; file as well as a &lt;code&gt;/baz&lt;/code&gt; or &lt;code&gt;/bat&lt;/code&gt; file.</source>
          <target state="translated">括弧と &lt;code&gt;-o&lt;/code&gt; および &lt;code&gt;-a&lt;/code&gt; 演算子を組み合わせて、より複雑な式を作成できます。この例では、 &lt;code&gt;/foo&lt;/code&gt; または &lt;code&gt;/bar&lt;/code&gt; ファイルと &lt;code&gt;/baz&lt;/code&gt; または &lt;code&gt;/bat&lt;/code&gt; ファイルがある場合、成功が出力されます。</target>
        </trans-unit>
        <trans-unit id="e0efa09d094aec052590bdd703ecb253fb17eb1e" translate="yes" xml:space="preserve">
          <source>Path variables are a special kind of variable used to support colon-delimited path lists including PATH, CDPATH, MANPATH, PYTHONPATH, etc. All variables that end in &lt;code&gt;PATH&lt;/code&gt; (case-sensitive) become PATH variables.</source>
          <target state="translated">パス変数は、PATH、CDPATH、MANPATH、PYTHONPATHを含む支持コロン区切りのパスリストに使用する変数の特殊な、などすべての変数という点で終了している &lt;code&gt;PATH&lt;/code&gt; （大文字と小文字を区別）となっPATH変数。</target>
        </trans-unit>
        <trans-unit id="acdeb27738adfec3e214f14b0bc5ac319dee18bf" translate="yes" xml:space="preserve">
          <source>Performs a history search when the &lt;b&gt;Page Up&lt;/b&gt; key is pressed.</source>
          <target state="translated">とき履歴検索を行います&lt;b&gt;ページアップ&lt;/b&gt;キーが押されています。</target>
        </trans-unit>
        <trans-unit id="b07e355a3677aa688ad89bddfe79ee5b312d7645" translate="yes" xml:space="preserve">
          <source>Pipes and Redirections</source>
          <target state="translated">パイプとリダイレクト</target>
        </trans-unit>
        <trans-unit id="109d28af6c9d51926601f8d9e60546da74487021" translate="yes" xml:space="preserve">
          <source>Pipes usually connect file descriptor 1 (standard output) of the first process to file descriptor 0 (standard input) of the second process. It is possible to use a different output file descriptor by prepending the desired FD number and then output redirect symbol to the pipe. For example:</source>
          <target state="translated">パイプは通常、第1の処理のファイルディスクリプタ1(標準出力)と第2の処理のファイルディスクリプタ0(標準入力)を接続する。所望のFD番号を前置してパイプにリダイレクトシンボルを出力することで、異なる出力のファイルディスクリプタを使用することが可能である。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3247b493bc40b8745523a27d8c525cd0dc056fd5" translate="yes" xml:space="preserve">
          <source>Piping</source>
          <target state="translated">Piping</target>
        </trans-unit>
        <trans-unit id="484a02744408ea850ed69df5530d98aa375e29f4" translate="yes" xml:space="preserve">
          <source>Please note that event handlers only become active when a function is loaded, which means you might need to otherwise &lt;a href=&quot;commands#source&quot;&gt;source&lt;/a&gt; or execute a function instead of relying on &lt;a href=&quot;#syntax-function-autoloading&quot;&gt;autoloading&lt;/a&gt;. One approach is to put it into your &lt;a href=&quot;index#initialization&quot;&gt;initialization file&lt;/a&gt;.</source>
          <target state="translated">イベントハンドラーは、関数が読み込まれたときにのみアクティブになることに注意してください。つまり、&lt;a href=&quot;#syntax-function-autoloading&quot;&gt;自動&lt;/a&gt;読み込みに依存する代わりに、関数を&lt;a href=&quot;commands#source&quot;&gt;ソース&lt;/a&gt;または実行する必要がある場合があります。1つのアプローチは、それを&lt;a href=&quot;index#initialization&quot;&gt;初期化ファイル&lt;/a&gt;に入れることです。</target>
        </trans-unit>
        <trans-unit id="d9da79a093b23650535a151c09a73e3fee5ee4ae" translate="yes" xml:space="preserve">
          <source>Prefixing the commandline with a space will prevent the entire line from being stored in the history.</source>
          <target state="translated">コマンドラインの先頭にスペースを付けると、その行全体が履歴に保存されないようになります。</target>
        </trans-unit>
        <trans-unit id="fe2ed6ea3216d06709445e2c3ce6b00041d037ed" translate="yes" xml:space="preserve">
          <source>Press &lt;b&gt;Tab&lt;/b&gt;, and &lt;code&gt;fish&lt;/code&gt; will attempt to complete the command, argument, or path:</source>
          <target state="translated">押して&lt;b&gt;タブ&lt;/b&gt;、および &lt;code&gt;fish&lt;/code&gt; 、コマンド、引数、またはパスを完成しようとします。</target>
        </trans-unit>
        <trans-unit id="09c712c74db06b262e6e04d6f0d9c7fa02c47733" translate="yes" xml:space="preserve">
          <source>Pressing &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Enter&lt;/b&gt; instead of pressing the &lt;b&gt;Enter&lt;/b&gt; key.</source>
          <target state="translated">押すと&lt;em&gt;Altキーを&lt;/em&gt; - &lt;b&gt;入力&lt;/b&gt;を押すのではなく、&lt;b&gt;入力&lt;/b&gt;キーを。</target>
        </trans-unit>
        <trans-unit id="27bf58510d3b20325eed84381a6d30434da9e2ca" translate="yes" xml:space="preserve">
          <source>Pressing the &lt;b&gt;Enter&lt;/b&gt; key while a block of commands is unclosed, such as when one or more block commands such as &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; do not have a corresponding &lt;code&gt;end&lt;/code&gt; command.</source>
          <target state="translated">押すと&lt;b&gt;入力し&lt;/b&gt;たコマンドのブロックは、1つのまたは複数のブロックのようなコマンド時のように、閉じていないあるときにキーを &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;begin&lt;/code&gt; または &lt;code&gt;if&lt;/code&gt; 、対応する必要はありません &lt;code&gt;end&lt;/code&gt; コマンドを。</target>
        </trans-unit>
        <trans-unit id="27493f631ba000f95a572539cafcbb594a951944" translate="yes" xml:space="preserve">
          <source>Print Top and Bottom on separate lines, using an escape sequence</source>
          <target state="translated">エスケープシーケンスを使用して、上と下を別々の行に印刷する</target>
        </trans-unit>
        <trans-unit id="84c34db7a924b44d0ab81ef51631e488d755a55a" translate="yes" xml:space="preserve">
          <source>Print hello world to stdout</source>
          <target state="translated">ハローワールドを標準出力に印刷する</target>
        </trans-unit>
        <trans-unit id="ad29dcc16fea024e7e41818ab9d4740b264b782b" translate="yes" xml:space="preserve">
          <source>Prior to the addition of this builtin command in the 2.7.0 release there were two main ways to parse the arguments passed to a fish script or function. One way was to use the OS provided &lt;code&gt;getopt&lt;/code&gt; command. The problem with that is that the GNU and BSD implementations are not compatible. Which makes using that external command difficult other than in trivial situations. The other way is to iterate over &lt;code&gt;$argv&lt;/code&gt; and use the fish &lt;code&gt;switch&lt;/code&gt; statement to decide how to handle the argument. That, however, involves a huge amount of boilerplate code. It is also borderline impossible to implement the same behavior as builtin commands.</source>
          <target state="translated">2.7.0リリースでこの組み込みコマンドが追加される前は、fishスクリプトまたは関数に渡された引数を解析する方法は主に2つありました。1つの方法は、OS提供の &lt;code&gt;getopt&lt;/code&gt; コマンドを使用することでした。これの問題は、GNUとBSDの実装に互換性がないことです。これは、些細な状況以外では、その外部コマンドの使用を困難にします。もう1つの方法は、 &lt;code&gt;$argv&lt;/code&gt; を反復処理し、fish &lt;code&gt;switch&lt;/code&gt; ステートメントを使用して引数の処理方法を決定することです。ただし、これには大量の定型コードが含まれます。また、組み込みコマンドと同じ動作を実装することは不可能です。</target>
        </trans-unit>
        <trans-unit id="e14c52a6b5ed7f130784534e792abd7951342686" translate="yes" xml:space="preserve">
          <source>Private mode</source>
          <target state="translated">プライベートモード</target>
        </trans-unit>
        <trans-unit id="7d03d42c737cd08e3c616e333f7637225318bb7d" translate="yes" xml:space="preserve">
          <source>Problem solved!</source>
          <target state="translated">問題解決!</target>
        </trans-unit>
        <trans-unit id="27fee3438e0d28b1f5e56d2013e82bcf5b441945" translate="yes" xml:space="preserve">
          <source>Programmable prompt</source>
          <target state="translated">プログラム可能なプロンプト</target>
        </trans-unit>
        <trans-unit id="4eae5ed9e86eb92ca41dd75ef52fb9a0a53af761" translate="yes" xml:space="preserve">
          <source>Programmable title</source>
          <target state="translated">プログラム可能なタイトル</target>
        </trans-unit>
        <trans-unit id="a817d7eb8e0f1dab755ab5203a082e5c3c094fce" translate="yes" xml:space="preserve">
          <source>Prompt</source>
          <target state="translated">Prompt</target>
        </trans-unit>
        <trans-unit id="0495187c978ea883d19171649639e1c756060adb" translate="yes" xml:space="preserve">
          <source>Quick answer:</source>
          <target state="translated">即答で。</target>
        </trans-unit>
        <trans-unit id="7b0257ce75add65485cb879a8ababbebc2270b68" translate="yes" xml:space="preserve">
          <source>Quotes</source>
          <target state="translated">Quotes</target>
        </trans-unit>
        <trans-unit id="a5ab0c393626e6b25924176a035ebd63722dc7ec" translate="yes" xml:space="preserve">
          <source>Range expansion will go in reverse if the end element is earlier in the list than the start and forward if the end is later than the start, unless exactly one of the given indices is negative. This is to enable clamping without changing direction if the list has fewer elements than expected.</source>
          <target state="translated">範囲の拡張は、与えられたインデックスのうちの1つがまさに負の値でない限り、リストの最後の要素が開始よりも前にある場合は逆に進み、最後の要素が開始よりも後にある場合は順に進みます。これは、リストの要素数が予想よりも少ない場合に、方向を変えずにクランプできるようにするためです。</target>
        </trans-unit>
        <trans-unit id="b16d80967d06f9706108437bd28e6a8d5175e9a0" translate="yes" xml:space="preserve">
          <source>Reading from or appending to a non existing file.</source>
          <target state="translated">既存のファイルではないファイルから読み込んだり、既存のファイルに追加したりします。</target>
        </trans-unit>
        <trans-unit id="3e22373b8f4786a11fc3f5247c24bd1cd140127f" translate="yes" xml:space="preserve">
          <source>Ready for more?</source>
          <target state="translated">準備はできていますか?</target>
        </trans-unit>
        <trans-unit id="ab140354a34bd045ff52d42f722acc1c4ffada22" translate="yes" xml:space="preserve">
          <source>Regular Expressions</source>
          <target state="translated">正規表現</target>
        </trans-unit>
        <trans-unit id="5c8c7c6ececfc7a4858b06b4968629df633fe974" translate="yes" xml:space="preserve">
          <source>Renames an existing abbreviation from &lt;code&gt;gco&lt;/code&gt; to &lt;code&gt;gch&lt;/code&gt;.</source>
          <target state="translated">既存の略語の &lt;code&gt;gch&lt;/code&gt; を &lt;code&gt;gco&lt;/code&gt; からgchに変更します。</target>
        </trans-unit>
        <trans-unit id="4dc79b3cd9563c59f1fd2d978861f14b1270090f" translate="yes" xml:space="preserve">
          <source>Repeat Examples</source>
          <target state="translated">リピート例</target>
        </trans-unit>
        <trans-unit id="a879640933d6c8936ca4cc6a02a55f8cc4408041" translate="yes" xml:space="preserve">
          <source>Replace Literal Examples</source>
          <target state="translated">リテラルの例を置き換える</target>
        </trans-unit>
        <trans-unit id="13b05ad41dc01c7c29077cca05d8339a7a6429b9" translate="yes" xml:space="preserve">
          <source>Replace Regex Examples</source>
          <target state="translated">正規表現の例を置き換える</target>
        </trans-unit>
        <trans-unit id="4c85d59c181a8bdfec393789d72d1942cf54846f" translate="yes" xml:space="preserve">
          <source>Return Values</source>
          <target state="translated">戻り値</target>
        </trans-unit>
        <trans-unit id="27ca7249b11e61ac7f3b63efe842130af63f97b8" translate="yes" xml:space="preserve">
          <source>Run the following command in fish:</source>
          <target state="translated">fishで以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="ddd9c246e03e2789458ae8bb429c9d694195cb17" translate="yes" xml:space="preserve">
          <source>Running Commands</source>
          <target state="translated">実行中のコマンド</target>
        </trans-unit>
        <trans-unit id="5c5cc33a225b06807a45544c8793a5276a15976d" translate="yes" xml:space="preserve">
          <source>Running multiple programs</source>
          <target state="translated">複数のプログラムを実行する</target>
        </trans-unit>
        <trans-unit id="b3fe37f1b337c360725965146e94ffa93a9708da" translate="yes" xml:space="preserve">
          <source>SEQUENCE is the character sequence to bind to. These should be written as &lt;a href=&quot;index#escapes&quot;&gt;fish escape sequences&lt;/a&gt;. For example, because pressing the Alt key and another character sends that character prefixed with an escape character, Alt-based key bindings can be written using the &lt;code&gt;\e&lt;/code&gt; escape. For example, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;w&lt;/b&gt; can be written as &lt;code&gt;\ew&lt;/code&gt;. The control character can be written in much the same way using the &lt;code&gt;\c&lt;/code&gt; escape, for example &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; (^X) can be written as &lt;code&gt;\cx&lt;/code&gt;. Note that Alt-based key bindings are case sensitive and Control-based key bindings are not. This is a constraint of text-based terminals, not &lt;code&gt;fish&lt;/code&gt;.</source>
          <target state="translated">SEQUENCEは、バインドする文字シーケンスです。これらは&lt;a href=&quot;index#escapes&quot;&gt;魚のエスケープシーケンス&lt;/a&gt;として記述する必要があります。たとえば、Altキーを押して別の文字を押すと、その文字の前にエスケープ文字が送信されるため、Altベースのキーバインディングは &lt;code&gt;\e&lt;/code&gt; エスケープを使用して記述できます。たとえば、&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;w&lt;/b&gt;は &lt;code&gt;\ew&lt;/code&gt; と書くことができます。制御文字は、 &lt;code&gt;\c&lt;/code&gt; エスケープを使用してほぼ同じ方法で記述できます。たとえば、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt;（^ X）は &lt;code&gt;\cx&lt;/code&gt; として記述できます。Altベースのキーバインディングでは大文字と小文字が区別され、Controlベースのキーバインディングでは区別されないことに注意してください。これは &lt;code&gt;fish&lt;/code&gt; ではなくテキストベースの端末の制約です。</target>
        </trans-unit>
        <trans-unit id="769ee8ba6c10d0fc5cc5d5931ff5950b069f7631" translate="yes" xml:space="preserve">
          <source>STRING arguments are taken from the command line unless standard input is connected to a pipe or a file, in which case they are read from standard input, one STRING per line. It is an error to supply STRING arguments on the command line and on standard input.</source>
          <target state="translated">標準入力がパイプやファイルに接続されていない限り、STRING引数はコマンドラインから取り出されます。コマンドラインと標準入力でSTRING引数を指定するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="3e9759d5f8593842e337c74b9202035585d520b2" translate="yes" xml:space="preserve">
          <source>Same as above but with a second flag that requires a value:</source>
          <target state="translated">上記と同じですが、値を必要とする2番目のフラグがあります。</target>
        </trans-unit>
        <trans-unit id="d562a361adfcc4bd04396673622d38c2c23c4a3b" translate="yes" xml:space="preserve">
          <source>Same as above but with a third flag that can be given multiple times saving the value of each instance seen and only the long flag name (&lt;code&gt;--token&lt;/code&gt;) can be used:</source>
          <target state="translated">上記と同じですが、3番目のフラグを複数回指定して、表示される各インスタンスの値を保存し、長いフラグ名（ &lt;code&gt;--token&lt;/code&gt; ）のみを使用できます。</target>
        </trans-unit>
        <trans-unit id="c902e77d44ee1a72851bdd66a8039b7289e5469e" translate="yes" xml:space="preserve">
          <source>Say $animal contains the name of an animal. Then this code would classify it:</source>
          <target state="translated">animal に動物の名前が含まれているとします。そうすると、このコードはそれを分類します。</target>
        </trans-unit>
        <trans-unit id="2e406da000ac4099abeb149121071ece020d3907" translate="yes" xml:space="preserve">
          <source>Searchable history</source>
          <target state="translated">検索可能な履歴</target>
        </trans-unit>
        <trans-unit id="b445d35ecc1c55f9e1ceba18d794fb79d964e899" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;index#editor&quot;&gt;documentation&lt;/a&gt; for more details about line editing in fish.</source>
          <target state="translated">魚のライン編集の詳細については、&lt;a href=&quot;index#editor&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="67373bb92cd7ecbf243edb9d60ad6f00f86a6052" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="67035298680ddb09dd248da78e915fd9c9627f01" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;dirs&lt;/code&gt; and &lt;code&gt;dirs -c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dirs&lt;/code&gt; および &lt;code&gt;dirs -c&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="1a3b31765df862a7d9c4531c872152ad402c53f3" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;read --delimiter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read --delimiter&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="7238893c67063d93ae05263dd71a5ccfc50d90c7" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commands#cdh&quot;&gt;&lt;code&gt;cdh&lt;/code&gt;&lt;/a&gt; command for changing to a recently visited directory.</source>
          <target state="translated">最近アクセスしたディレクトリに変更するには、&lt;a href=&quot;commands#cdh&quot;&gt; &lt;code&gt;cdh&lt;/code&gt; &lt;/a&gt;コマンドも参照してください。</target>
        </trans-unit>
        <trans-unit id="01cfa9314baef15cf1a7d7383228c6d181370cb2" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commands#prevd&quot;&gt;&lt;code&gt;prevd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; commands which also work with the recent &lt;code&gt;cd&lt;/code&gt; history and are provided for compatibility with other shells.</source>
          <target state="translated">最近の &lt;code&gt;cd&lt;/code&gt; 履歴でも機能し、他のシェルとの互換性のために提供されている&lt;a href=&quot;commands#prevd&quot;&gt; &lt;code&gt;prevd&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;commands#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt;コマンドも参照してください。</target>
        </trans-unit>
        <trans-unit id="c59959e6168e702c87aad6497074fc87974da46d" translate="yes" xml:space="preserve">
          <source>See the &quot;Internals&quot; section for more on them.</source>
          <target state="translated">それらについては、「内部」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c6e5f5869c0d557646211d7b722a3358667dc217" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#fish-opt&quot;&gt;&lt;code&gt;fish_opt&lt;/code&gt;&lt;/a&gt; command for a friendlier but more verbose way to create option specifications.</source>
          <target state="translated">オプションの仕様を作成するための、より&lt;a href=&quot;#fish-opt&quot;&gt; &lt;code&gt;fish_opt&lt;/code&gt; &lt;/a&gt;詳細な方法については、fish_optコマンドを参照してください。</target>
        </trans-unit>
        <trans-unit id="8ac7646fb3e869bb56303fbe3fca839b0d38f1d8" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;commands#funced&quot;&gt;funced&lt;/a&gt; and &lt;a href=&quot;commands#funcsave&quot;&gt;funcsave&lt;/a&gt; for ways to create these files automatically.</source>
          <target state="translated">これらのファイルを自動的に作成する方法については、&lt;a href=&quot;commands#funced&quot;&gt;funced&lt;/a&gt;および&lt;a href=&quot;commands#funcsave&quot;&gt;funcsaveの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bb216107606bc95b848f93fc29c67e8fe68c93ea" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;commands#test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;commands#test&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9299a43e63898a7efcae7a83cc40f247242085fc" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;code&gt;set&lt;/code&gt; for more details on the scoping rules for variables.</source>
          <target state="translated">変数のスコープ規則の詳細については、 &lt;code&gt;set&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f325a391b2afa8d45fd9b05b9b133df7d497fc47" translate="yes" xml:space="preserve">
          <source>Separating Commands (Semicolon)</source>
          <target state="translated">コマンドの区切り(セミコロン</target>
        </trans-unit>
        <trans-unit id="cafea76301da663d6e72c8dd0182bf1a08fe0c7b" translate="yes" xml:space="preserve">
          <source>Setting the background color only affects subsequently written characters. Fish provides no way to set the background color for the entire terminal window. Configuring the window background color (and other attributes such as its opacity) has to be done using whatever mechanisms the terminal provides.</source>
          <target state="translated">背景色の設定は、その後に書かれた文字にのみ影響します。Fishは端末のウィンドウ全体の背景色を設定する方法を提供していません。ウィンドウの背景色(およびその不透明度などの他の属性)を設定するには、端末が提供するメカニズムを使って行う必要があります。</target>
        </trans-unit>
        <trans-unit id="0c0750f1643a764b440d30cec12896d4e2f3c4f4" translate="yes" xml:space="preserve">
          <source>Shared bindings</source>
          <target state="translated">共有バインディング</target>
        </trans-unit>
        <trans-unit id="61e5ec8aae4e834701135d3867ab63125d131c5e" translate="yes" xml:space="preserve">
          <source>Shell variable and function names</source>
          <target state="translated">シェルの変数名と関数名</target>
        </trans-unit>
        <trans-unit id="e91aede6defa8d430f67e550004d49863d3e2e5b" translate="yes" xml:space="preserve">
          <source>Shell variables</source>
          <target state="translated">シェル変数</target>
        </trans-unit>
        <trans-unit id="0f86f7ae2195716edf4d3ac75b6ae230d7060ba1" translate="yes" xml:space="preserve">
          <source>Shell variables are named pieces of data, which can be created, deleted and their values changed and used by the user. Variables may optionally be &quot;exported&quot;, so that a copy of the variable is available to any subprocesses the shell creates. An exported variable is referred to as an &quot;environment variable&quot;.</source>
          <target state="translated">シェル変数は、名前のついたデータの断片で、作成、削除、値の変更が可能で、ユーザが使用することができます。変数はオプションで「エクスポート」することができ、シェルが作成するどのサブプロセスでも変数のコピーを利用できるようにします。エクスポートされた変数は「環境変数」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="e122d1fcfbe4d2952329855d2c90efb389777230" translate="yes" xml:space="preserve">
          <source>Shells like fish are used by giving them commands. Every &lt;code&gt;fish&lt;/code&gt; command follows the same simple syntax.</source>
          <target state="translated">魚のような貝はそれらにコマンドを与えることによって使用されます。すべての &lt;code&gt;fish&lt;/code&gt; コマンドは、同じ単純な構文に従います。</target>
        </trans-unit>
        <trans-unit id="42414c807cd9c1ab64d204f7113345e9c5f0a85a" translate="yes" xml:space="preserve">
          <source>Short options, like '&lt;code&gt;-a&lt;/code&gt;'. Short options are a single character long, are preceded by a single hyphen and may be grouped together (like '&lt;code&gt;-la&lt;/code&gt;', which is equivalent to '&lt;code&gt;-l -a&lt;/code&gt;'). Option arguments may be specified in the following parameter ('&lt;code&gt;-w 32&lt;/code&gt;') or by appending the option with the value ('&lt;code&gt;-w32&lt;/code&gt;').</source>
          <target state="translated">' &lt;code&gt;-a&lt;/code&gt; 'のような短いオプション。短いオプションは1文字の長さで、前に1つのハイフンがあり、一緒にグループ化できます（ ' &lt;code&gt;-la&lt;/code&gt; 'は ' &lt;code&gt;-l -a&lt;/code&gt; ' と同じです）。オプションの引数は、次のパラメーター（ ' &lt;code&gt;-w 32&lt;/code&gt; '）で指定するか、オプションに値（ ' &lt;code&gt;-w32&lt;/code&gt; '）を追加することで指定できます。</target>
        </trans-unit>
        <trans-unit id="214c488d368da8c81796e48eb7f6963ef7a93bff" translate="yes" xml:space="preserve">
          <source>Should you wish to uninstall fish, first ensure fish is not set as your shell. Run &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; if you are not sure.</source>
          <target state="translated">魚をアンインストールする場合は、まず魚がシェルとして設定されていないことを確認してください。不明な場合は、 &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; 実行します。</target>
        </trans-unit>
        <trans-unit id="d5a22b01fc547f4aefabc8c7a496313159dfc74d" translate="yes" xml:space="preserve">
          <source>Signal names are case insensitive and the &lt;code&gt;SIG&lt;/code&gt; prefix is optional.</source>
          <target state="translated">信号名では大文字と小文字が区別されず、 &lt;code&gt;SIG&lt;/code&gt; プレフィックスはオプションです。</target>
        </trans-unit>
        <trans-unit id="2339b49e18e4fa7fa63c25097d1c3cb05b3abf7a" translate="yes" xml:space="preserve">
          <source>Similar to bash, fish has Emacs and Vi editing modes. The default editing mode is Emacs. You can switch to Vi mode with &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; and switch back with &lt;code&gt;fish_default_key_bindings&lt;/code&gt;. You can also make your own key bindings by creating a function and setting $fish_key_bindings to its name. For example:</source>
          <target state="translated">bashと同様に、fishにはEmacsおよびVi編集モードがあります。デフォルトの編集モードはEmacsです。あなたはとViのモードに切り替えることができ &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; と、スイッチバック &lt;code&gt;fish_default_key_bindings&lt;/code&gt; 。関数を作成して$ fish_key_bindingsをその名前に設定することにより、独自のキーバインディングを作成することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="14b8aecd3aaaa33e35d9724dfec4e61ddcb14189" translate="yes" xml:space="preserve">
          <source>So:</source>
          <target state="translated">So:</target>
        </trans-unit>
        <trans-unit id="530fce1c2ad1ce0277a5df96933c6fbf422dc856" translate="yes" xml:space="preserve">
          <source>Some OPTION_SPEC examples:</source>
          <target state="translated">いくつかのOPTION_SPECの例。</target>
        </trans-unit>
        <trans-unit id="4d6baccd4c71912ba57043465594b0cf17749be7" translate="yes" xml:space="preserve">
          <source>Some bindings are shared between emacs- and vi-mode because they aren't text editing bindings or because what Vi/Vim does for a particular key doesn't make sense for a shell.</source>
          <target state="translated">いくつかのバインディングは emacs-と vi-mode の間で共有されていますが、これはテキスト編集用のバインディングではないため、あるいは Vi/Vim が特定のキーに対して行うことがシェルでは意味をなさないためです。</target>
        </trans-unit>
        <trans-unit id="425593164f34a70e7fd63371baa3a373bc2ecb38" translate="yes" xml:space="preserve">
          <source>Some characters can not be written directly on the command line. For these characters, so called escape sequences are provided. These are:</source>
          <target state="translated">コマンドラインに直接書き込めない文字があります。これらの文字には、いわゆるエスケープシーケンスが用意されています。これらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6dd3509b210643ba6eefaffcdf24924a6a2790a7" translate="yes" xml:space="preserve">
          <source>Some common words</source>
          <target state="translated">いくつかの一般的な単語</target>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="translated">いくつかの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="9a67d5493118a559656027def8dc4fcd0cc3974f" translate="yes" xml:space="preserve">
          <source>Some features include repetitions:</source>
          <target state="translated">一部の機能にはリピートが含まれています。</target>
        </trans-unit>
        <trans-unit id="d39624c87b3e78e02ed8dde71f696712e0710389" translate="yes" xml:space="preserve">
          <source>Some shells (e.g., ksh, bash) feature a syntax that is a mix between command substitution and piping, called process substitution. It is used to send the output of a command into the calling command, much like command substitution, but with the difference that the output is not sent through commandline arguments but through a named pipe, with the filename of the named pipe sent as an argument to the calling program. &lt;code&gt;psub&lt;/code&gt; combined with a regular command substitution provides the same functionality.</source>
          <target state="translated">一部のシェル（ksh、bashなど）には、コマンド置換とパイプ処理を組み合わせた構文（プロセス置換と呼ばれる）があります。これは、コマンド置換のように、コマンドの出力を呼び出しコマンドに送信するために使用されますが、出力はコマンドライン引数ではなく、名前付きパイプを通じて送信され、名前付きパイプのファイル名が引数として送信されます。呼び出しプログラムに。通常のコマンド置換と組み合わせた &lt;code&gt;psub&lt;/code&gt; は、同じ機能を提供します。</target>
        </trans-unit>
        <trans-unit id="28861f1ca2bfa4eb42bfb98ba18be09e02df8f97" translate="yes" xml:space="preserve">
          <source>Some terminals use the &lt;code&gt;--bold&lt;/code&gt; escape sequence to switch to a brighter color set rather than increasing the weight of text.</source>
          <target state="translated">一部の端末では、-- &lt;code&gt;--bold&lt;/code&gt; エスケープシーケンスを使用して、テキストの重みを増やすのではなく、明るい色のセットに切り替えます。</target>
        </trans-unit>
        <trans-unit id="c4dd50f777b9a845d16edeb5ac29fc4998e7e176" translate="yes" xml:space="preserve">
          <source>Some variables, like &lt;code&gt;$PWD&lt;/code&gt;, only have one value. By convention, we talk about that variable's value, but we really mean its first (and only) value.</source>
          <target state="translated">&lt;code&gt;$PWD&lt;/code&gt; などの一部の変数には、1つの値しかありません。慣例として、その変数の値について説明しますが、実際にはその最初の（そして唯一の）値を意味します。</target>
        </trans-unit>
        <trans-unit id="8709ff84c2c20f30aea0078b8e4ce461f5bca70c" translate="yes" xml:space="preserve">
          <source>Sometimes features such as &lt;a href=&quot;#expand&quot;&gt;parameter expansion&lt;/a&gt; and &lt;a href=&quot;#escapes&quot;&gt;character escapes&lt;/a&gt; get in the way. When that happens, the user can write a parameter within quotes, either &amp;lsquo;&amp;rsquo;&lt;code&gt;(single quote) or&lt;/code&gt;&quot;&lt;code&gt;(double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &amp;lt;a href=&quot;#expand-variable&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt; still takes place. Other than that, no other kind of expansion (including &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;brace expansion&amp;lt;/a&amp;gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored. The only backslash escape accepted within single quotes is&lt;/code&gt;\'&lt;code&gt;, which escapes a single quote and&lt;/code&gt;\`, which escapes the backslash symbol. The only backslash escapes accepted within double quotes are &lt;code&gt;\&quot;&lt;/code&gt;, which escapes a double quote, &lt;code&gt;\$&lt;/code&gt;, which escapes a dollar character, &lt;code&gt;\&lt;/code&gt; followed by a newline, which deletes the backslash and the newline, and lastly &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. Single quotes have no special meaning within double quotes and vice versa.</source>
          <target state="translated">&lt;a href=&quot;#expand&quot;&gt;パラメータ拡張&lt;/a&gt;や&lt;a href=&quot;#escapes&quot;&gt;文字エスケープ&lt;/a&gt;などの機能が邪魔になる場合があります。その場合、ユーザーは '' &lt;code&gt;(single quote) or&lt;/code&gt; &lt;code&gt;(double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &amp;lt;a href=&quot;#expand-variable&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt; still takes place. Other than that, no other kind of expansion (including &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;brace expansion&amp;lt;/a&amp;gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored. The only backslash escape accepted within single quotes is&lt;/code&gt; 符）または &quot; （二重引用符）のいずれかでパラメーターを引用符で囲むことができます。一重引用符付き文字列と二重引用符付き文字列の間に重要な違いが1つあります。二重引用符付き文字列を使用する場合、&amp;lt;a href = &quot;＃expand-variable&quot;&amp;gt;変数の展開&amp;lt;/a&amp;gt;は引き続き行われます。それ以外の場合、他の種類の展開（&amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;ブレース展開&amp;lt;/a&amp;gt;およびパラメーター展開を含む）は行われませんが発生すると、パラメータにはスペースが含まれる可能性があり、エスケープシーケンスは無視されます。単一引用符内で受け入れられるバックスラッシュエスケープ &lt;code&gt;, which escapes a single quote and&lt;/code&gt; \ ' のみです。\ `：バックスラッシュ記号をエスケープします。二重引用符で受け入れられた唯一のバックスラッシュエスケープは &lt;code&gt;\&quot;&lt;/code&gt; 二重引用符、逃げる、 &lt;code&gt;\$&lt;/code&gt; ドル記号、逃げる、 &lt;code&gt;\&lt;/code&gt; 最後に改行が続き、バックスラッシュと改行を削除し、 &lt;code&gt;\\&lt;/code&gt; バックスラッシュをエスケープし、シンボル。二重引用符内では単一引用符は特別な意味を持たず、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="5773d504847f59d4f28606344c751b42fcadfb09" translate="yes" xml:space="preserve">
          <source>Special Case: The escape Character</source>
          <target state="translated">特殊なケース:脱出キャラクター</target>
        </trans-unit>
        <trans-unit id="28dc52fcfc9145786fed85cff73226269b82a2c9" translate="yes" xml:space="preserve">
          <source>Special input functions</source>
          <target state="translated">特殊入力機能</target>
        </trans-unit>
        <trans-unit id="a6c32b7763c1deccd93080cf33efdb324072a965" translate="yes" xml:space="preserve">
          <source>Special variables</source>
          <target state="translated">特殊変数</target>
        </trans-unit>
        <trans-unit id="a0a234701d3553b3ee0fce9d93e7f64fadef5cac" translate="yes" xml:space="preserve">
          <source>Specifying your own completions is not difficult. To specify a completion, use the &lt;code&gt;complete&lt;/code&gt; command. &lt;code&gt;complete&lt;/code&gt; takes as a parameter the name of the command to specify a completion for. For example, to add a completion for the program &lt;code&gt;myprog&lt;/code&gt;, one would start the completion command with &lt;code&gt;complete -c myprog ...&lt;/code&gt;</source>
          <target state="translated">独自の補完を指定することは難しくありません。補完を指定するには、 &lt;code&gt;complete&lt;/code&gt; コマンドを使用します。 &lt;code&gt;complete&lt;/code&gt; は、補完を指定するコマンドの名前をパラメーターとして受け取ります。例えば、プログラムの完了追加する &lt;code&gt;myprog&lt;/code&gt; 、一つはで終了コマンドを開始すると &lt;code&gt;complete -c myprog ...&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ac6973627e50b5b3feef24cc873cca39ec65518" translate="yes" xml:space="preserve">
          <source>Standard error, FD 2, for writing errors and warnings, defaults to writing to the screen.</source>
          <target state="translated">標準エラー、FD 2、書き込みエラーや警告の場合は、デフォルトで画面に書き込みます。</target>
        </trans-unit>
        <trans-unit id="8116e8803b0b4ccfe612ba1239d0a4c13eb0c484" translate="yes" xml:space="preserve">
          <source>Standard input, FD 0, for reading, defaults to reading from the keyboard.</source>
          <target state="translated">標準入力、読込用FD 0、デフォルトはキーボードからの読込です。</target>
        </trans-unit>
        <trans-unit id="fd08166eefe7793a02e0886b87576b866f11ba8d" translate="yes" xml:space="preserve">
          <source>Standard output, FD 1, for writing, defaults to writing to the screen.</source>
          <target state="translated">標準出力、書き込み用FD1、デフォルトは画面への書き込みです。</target>
        </trans-unit>
        <trans-unit id="b3883f88eaf74aa505b11f01894c4909220af6a1" translate="yes" xml:space="preserve">
          <source>Standards</source>
          <target state="translated">Standards</target>
        </trans-unit>
        <trans-unit id="806c8aeb75c45b416dcfcd215f384af2b2abda22" translate="yes" xml:space="preserve">
          <source>Startup (Where's .bashrc?)</source>
          <target state="translated">スタートアップ(.bashrcはどこにある?</target>
        </trans-unit>
        <trans-unit id="b3cfed68ddc06bae90fd47f85fdeed65b5766e4e" translate="yes" xml:space="preserve">
          <source>Support for italics, dim, reverse, and other modes is not guaranteed in all terminal emulators. Fish attempts to determine if the terminal supports these modes even if the terminfo database may not be up-to-date.</source>
          <target state="translated">イタリック、ディム、リバース、その他のモードのサポートはすべてのターミナルエミュレータで保証されているわけではありません。Fish は terminfo データベースが最新でなくても、ターミナルがこれらのモードをサポートしているかどうかを判断しようとします。</target>
        </trans-unit>
        <trans-unit id="d269dff6a5e6def876fa34f03bd1eb013ca33acd" translate="yes" xml:space="preserve">
          <source>Switches differ between commands and are documented in the manual page for each command. Some switches are common to most command though, for example '&lt;code&gt;--help&lt;/code&gt;' will usually display a help text, '&lt;code&gt;-i&lt;/code&gt;' will often turn on interactive prompting before taking action, while '&lt;code&gt;-f&lt;/code&gt;' will turn it off.</source>
          <target state="translated">スイッチはコマンドごとに異なり、各コマンドのマニュアルページに記載されています。一部のスイッチはほとんどのコマンドに共通ですが、たとえば、「-- &lt;code&gt;--help&lt;/code&gt; 」は通常、ヘルプテキストを表示します。「- &lt;code&gt;-i&lt;/code&gt; 」は、アクションを実行する前にインタラクティブプロンプトをオンにし、「- &lt;code&gt;-f&lt;/code&gt; 」はオフにします。</target>
        </trans-unit>
        <trans-unit id="b5eb6066faf764d428231e3c214c4d783bbf5bcc" translate="yes" xml:space="preserve">
          <source>Switching to fish?</source>
          <target state="translated">魚に切り替え?</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="d27b4fd727666f53e797902bf47550ba0a21184a" translate="yes" xml:space="preserve">
          <source>Syntax Highlighting</source>
          <target state="translated">構文の強調表示</target>
        </trans-unit>
        <trans-unit id="037fceb004812e2c76fd4ee125e5787960e7ee91" translate="yes" xml:space="preserve">
          <source>Syntax highlighting</source>
          <target state="translated">シンタックスハイライト</target>
        </trans-unit>
        <trans-unit id="418e9ee62ad6b7ba7264fdf5d0ee995e2e351045" translate="yes" xml:space="preserve">
          <source>Syntax overview</source>
          <target state="translated">構文の概要</target>
        </trans-unit>
        <trans-unit id="afcc6a38c449b540b7b14d03d1b1f6092ebcf158" translate="yes" xml:space="preserve">
          <source>System-wide configuration files, where administrators can include initialization that should be run for all users on the system - similar to &lt;code&gt;/etc/profile&lt;/code&gt; for POSIX-style shells - in &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; (usually &lt;code&gt;/etc/fish/config.fish&lt;/code&gt;);</source>
          <target state="translated">システム全体の構成ファイル。管理者は、POSIXスタイルのシェルの &lt;code&gt;/etc/profile&lt;/code&gt; と同様に、システムのすべてのユーザーに対して実行する必要のある初期化を &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; （通常は &lt;code&gt;/etc/fish/config.fish&lt;/code&gt; ）に含めることができます。</target>
        </trans-unit>
        <trans-unit id="87564ea1bf094f88395489e37aab98a53d8a3438" translate="yes" xml:space="preserve">
          <source>Tab Completions</source>
          <target state="translated">タブの完成</target>
        </trans-unit>
        <trans-unit id="eb8b89e8c468a2f2b0bf3f62ac7419a0270f3b4b" translate="yes" xml:space="preserve">
          <source>Tab completion</source>
          <target state="translated">タブ補完</target>
        </trans-unit>
        <trans-unit id="2ea2b2cc91429ba0736ea7b5a4dc7f2208abf174" translate="yes" xml:space="preserve">
          <source>Tab completion is one of the most time saving features of any modern shell. By tapping the tab key, the user asks &lt;code&gt;fish&lt;/code&gt; to guess the rest of the command or parameter that the user is currently typing. If &lt;code&gt;fish&lt;/code&gt; can only find one possible completion, &lt;code&gt;fish&lt;/code&gt; will write it out. If there is more than one completion, &lt;code&gt;fish&lt;/code&gt; will write out the longest prefix that all completions have in common. If the completions differ on the first character, a list of all possible completions is printed. The list features descriptions of the completions and if the list doesn't fit the screen, it is scrollable by using the arrow keys, the page up/page down keys, the tab key or the space bar.</source>
          <target state="translated">タブ補完は、最近のシェルで最も時間を節約できる機能の1つです。ユーザーはタブキーをタップすることで、ユーザーが現在入力しているコマンドまたはパラメーターの残りを推測するように &lt;code&gt;fish&lt;/code&gt; に要求します。 &lt;code&gt;fish&lt;/code&gt; が可能な補完を1つしか見つけられない場合、 &lt;code&gt;fish&lt;/code&gt; はそれを書き出します。複数の補完がある場合、 &lt;code&gt;fish&lt;/code&gt; はすべての補完に共通する最も長い接頭辞を書き出します。最初の文字で補完が異なる場合、可能なすべての補完のリストが出力されます。リストには補完の説明が表示され、リストが画面に合わない場合は、矢印キー、PageUp / PageDownキー、タブキー、またはスペースバーを使用してスクロールできます。</target>
        </trans-unit>
        <trans-unit id="44e924f5f1b607dd0e4feccbc1d4d898f052a887" translate="yes" xml:space="preserve">
          <source>Tacklebox</source>
          <target state="translated">Tacklebox</target>
        </trans-unit>
        <trans-unit id="e3c7839574383a9eaa3d82c610c455446f6121c0" translate="yes" xml:space="preserve">
          <source>Terminal Capability Detection</source>
          <target state="translated">端末能力検出</target>
        </trans-unit>
        <trans-unit id="b54b1fa82b8ecdc3fb07f7f9d29066e5997831e6" translate="yes" xml:space="preserve">
          <source>Tests the expression given and sets the exit status to 0 if true, and 1 if false. An expression is made up of one or more operators and their arguments.</source>
          <target state="translated">与えられた式をテストし、真の場合は0、偽の場合は1に終了ステータスを設定します。式は、1つ以上の演算子とその引数で構成されます。</target>
        </trans-unit>
        <trans-unit id="6b1fc2e3b816bc95de3d9b1753ab9aa1375ff7b8" translate="yes" xml:space="preserve">
          <source>That means if you run</source>
          <target state="translated">つまり、あなたが実行すると</target>
        </trans-unit>
        <trans-unit id="92160f08bddffe06e4520887bdd5645514caf0af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;project GitHub page&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;プロジェクトGitHubのページ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4cc348ddd7ad603b4b7e3a6d1134042f24b0ee0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$&lt;/code&gt; symbol can also be used multiple times, as a kind of &quot;dereference&quot; operator (the &lt;code&gt;*&lt;/code&gt; in C or C++), like in the following code:</source>
          <target state="translated">&lt;code&gt;$&lt;/code&gt; の記号は、「間接参照」演算子（の一種として、複数回使用することができる &lt;code&gt;*&lt;/code&gt; 以下のコードのように、CまたはC ++で）。</target>
        </trans-unit>
        <trans-unit id="7e4fc8fc89e59cd9ece4a187b16054d89db8031c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; operators for comparing strings are not implemented.</source>
          <target state="translated">文字列を比較するための &lt;code&gt;&amp;lt;&lt;/code&gt; および &lt;code&gt;&amp;gt;&lt;/code&gt; 演算子は実装されていません。</target>
        </trans-unit>
        <trans-unit id="65fe6102162982a331ea3f92362fbdf8528333d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; argument is required. You do not have to include any arguments after the &lt;code&gt;--&lt;/code&gt; but you must include the &lt;code&gt;--&lt;/code&gt;. For example, this is acceptable:</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; 引数が必要です。 &lt;code&gt;--&lt;/code&gt; 後に引数を含める必要はありませんが、 &lt;code&gt;--&lt;/code&gt; 含める必要があります。たとえば、これは許容範囲です。</target>
        </trans-unit>
        <trans-unit id="0c906c7f83627c97b083a6eb5c63248805d8c516" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; here stops &lt;code&gt;contains&lt;/code&gt; from treating &lt;code&gt;-q&lt;/code&gt; to an option to itself. Instead it treats it as a normal string to check.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; ここで停止しますが &lt;code&gt;contains&lt;/code&gt; 治療から &lt;code&gt;-q&lt;/code&gt; 自体のオプションに。代わりに、チェックする通常の文字列として扱います。</target>
        </trans-unit>
        <trans-unit id="c88d441c07c1b7086b4b120f0e1995c32e1789db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-q&lt;/code&gt;, &lt;code&gt;-p&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-P&lt;/code&gt; flags (and their long flag aliases) are mutually exclusive. Only one can be specified at a time.</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; 、 &lt;code&gt;-p&lt;/code&gt; 、 &lt;code&gt;-t&lt;/code&gt; および &lt;code&gt;-P&lt;/code&gt; フラグ（およびその長フラグ別名）が相互に排他的です。一度に指定できるのは1つだけです。</target>
        </trans-unit>
        <trans-unit id="2c58a8949ca637e3657d904f90d0683f9b8a4548" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--wraps&lt;/code&gt; options causes the specified command to inherit completions from another command. The inheriting command is said to &quot;wrap&quot; the inherited command. The wrapping command may have its own completions in addition to inherited ones. A command may wrap multiple commands, and wrapping is transitive: if A wraps B, and B wraps C, then A automatically inherits all of C's completions. Wrapping can be removed using the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; options. Note that wrapping only works for completions specified with &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--command&lt;/code&gt; and are ignored when specifying completions with &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-w&lt;/code&gt; または &lt;code&gt;--wraps&lt;/code&gt; オプション別のコマンドから継承補完に指定されたコマンドを引き起こします。継承するコマンドは、継承されたコマンドを「ラップ」すると言います。 wrappingコマンドには、継承されたコマンドの他に、独自の補完機能がある場合があります。コマンドは複数のコマンドをラップする場合があり、ラップは推移的です。AがBをラップし、BがCをラップする場合、AはCのすべての補完を自動的に継承します。折り返しは、 &lt;code&gt;-e&lt;/code&gt; または &lt;code&gt;--erase&lt;/code&gt; オプションを使用して削除できます。ラップは &lt;code&gt;-c&lt;/code&gt; または &lt;code&gt;--command&lt;/code&gt; で指定された補完に対してのみ機能し、 &lt;code&gt;-p&lt;/code&gt; または &lt;code&gt;--path&lt;/code&gt; で補完を指定した場合は無視されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c3779bf48914bcae0cdcc953ecc413edee9ed2fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VARNAME&lt;/code&gt; was local to the for block in releases prior to 3.0.0. This means that if you did something like this:</source>
          <target state="translated">&lt;code&gt;VARNAME&lt;/code&gt; は、以前の3.0.0のリリースでブロックのために地元のでした。つまり、次のようなことをした場合、</target>
        </trans-unit>
        <trans-unit id="da3409d273e3db5ef8ddc4ea273fbbb872d656c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt; and &lt;code&gt;yum&lt;/code&gt; commands use all installed packages as completions.</source>
          <target state="translated">&lt;code&gt;apt-get&lt;/code&gt; は、 &lt;code&gt;rpm&lt;/code&gt; と &lt;code&gt;yum&lt;/code&gt; コマンドが補完としてインストールされているすべてのパッケージを使用しています。</target>
        </trans-unit>
        <trans-unit id="08c885ad47f98ee1d2fa7d61aaf2be5914055c4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;end&lt;/code&gt; command does not change the current exit status. Instead, the status after it will be the status returned by the most recent command.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; コマンドは、現在の終了ステータスは変更されません。その代わり、その後のステータスは、最新のコマンドによって返されたステータスになります。</target>
        </trans-unit>
        <trans-unit id="3cb7ec726c85b79feb29910ee5250baa8513a66f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; editor features copy and paste, a searchable history and many editor functions that can be bound to special keyboard shortcuts.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; エディタ機能は、特殊なキーボードショートカットにバインドすることができ、検索履歴や多くのエディタ機能をコピーして貼り付けます。</target>
        </trans-unit>
        <trans-unit id="c64f6cc8af3f868e2009e8fec92b3aa89f2848f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; implementation of &lt;code&gt;ulimit&lt;/code&gt; should behave identically to the implementation in bash, except for these differences:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; の &lt;code&gt;fish&lt;/code&gt; 実装は、これらの違いを除いて、bashの実装と同じように動作する必要があります。</target>
        </trans-unit>
        <trans-unit id="67113321177587b92e33339a6cdbfbb714ba38b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is re-used as many times as necessary to convert all of the given arguments. If a format specifier is not appropriate for the given argument, an error is printed. For example, &amp;lsquo;printf &amp;rsquo;d' &quot;102.234&quot;` produces an error, as &quot;102.234&quot; cannot be formatted as an integer.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 引数が指定された引数のすべてを変換するのに必要な回数として再利用されます。書式指定子が指定された引数に適切でない場合、エラーが出力されます。たとえば、「printf 'd' &quot;102.234&quot; `は、「102.234」は整数としてフォーマットできないため、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="89f23a465dd8d76eebf980544d18d2de2601f2be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;make&lt;/code&gt; program uses all targets in the Makefile in the current directory as completions.</source>
          <target state="translated">&lt;code&gt;make&lt;/code&gt; プログラムは補完として、現在のディレクトリにあるMakefileのすべてのターゲットを使用しています。</target>
        </trans-unit>
        <trans-unit id="08ddda0f4e3d5dbda6ef1fb82291b1b27f800ddd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mount&lt;/code&gt; command uses all mount points specified in fstab as completions.</source>
          <target state="translated">&lt;code&gt;mount&lt;/code&gt; コマンドが使用するすべての補完としてfstabに指定されたマウントポイントを。</target>
        </trans-unit>
        <trans-unit id="bac670339d33af9a7bab7a0aa6c9bff4de41f823" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;open&lt;/code&gt; command uses the MIME type database and the &lt;code&gt;.desktop&lt;/code&gt; files used by Gnome and KDE to identify filetypes and default actions. If at least one of these environments is installed, but the open command is not working, this probably means that the relevant files are installed in a non-standard location. Consider &lt;a href=&quot;index#more-help&quot;&gt;asking for more help&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; コマンドは、MIMEタイプのデータベースや使用 &lt;code&gt;.desktop&lt;/code&gt; ファイルタイプとデフォルトのアクションを識別するために、GNOMEとKDEで使用されるファイルを。これらの環境の少なくとも1つがインストールされているが、openコマンドが機能していない場合は、関連するファイルが標準以外の場所にインストールされている可能性があります。&lt;a href=&quot;index#more-help&quot;&gt;さらに助け&lt;/a&gt;を求めることを検討してください。</target>
        </trans-unit>
        <trans-unit id="12db9bbc519582e7296e06534b51717da7e239b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pushd&lt;/code&gt; function adds &lt;code&gt;DIRECTORY&lt;/code&gt; to the top of the directory stack and makes it the current working directory. &lt;a href=&quot;#popd&quot;&gt;&lt;code&gt;popd&lt;/code&gt;&lt;/a&gt; will pop it off and return to the original directory.</source>
          <target state="translated">&lt;code&gt;pushd&lt;/code&gt; 機能が追加されます &lt;code&gt;DIRECTORY&lt;/code&gt; ディレクトリスタックの一番上にし、それを現在の作業ディレクトリになります。&lt;a href=&quot;#popd&quot;&gt; &lt;code&gt;popd&lt;/code&gt; &lt;/a&gt;はそれをポップし、元のディレクトリに戻ります。</target>
        </trans-unit>
        <trans-unit id="a826eafcc5f8080c789ef8d78318660a9727e115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; command supported the &lt;code&gt;-m&lt;/code&gt; and &lt;code&gt;--mode-name&lt;/code&gt; flags in fish versions prior to 2.7.0 to specify an alternative read history file. Those flags are now deprecated and ignored. Instead, set the &lt;code&gt;fish_history&lt;/code&gt; variable to specify a history session ID. That will affect both the &lt;code&gt;read&lt;/code&gt; history file and the fish command history file. You can set it to an empty string to specify that no history should be read or written. This is useful for presentations where you do not want possibly private or sensitive history to be exposed to the audience but do want history relevant to the presentation to be available.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; コマンドはサポートされ &lt;code&gt;-m&lt;/code&gt; と &lt;code&gt;--mode-name&lt;/code&gt; 代替読み取り履歴ファイルを指定するには、魚より前のバージョン2.7.0へのフラグを。これらのフラグは廃止され、無視されます。代わりに、 &lt;code&gt;fish_history&lt;/code&gt; 変数を設定して、履歴セッションIDを指定します。これは、 &lt;code&gt;read&lt;/code&gt; 履歴ファイルと魚コマンド履歴ファイルの両方に影響します。空の文字列に設定して、履歴を読み書きしないことを指定できます。これは、プライベートまたは機密の履歴を聴衆に公開したくないが、プレゼンテーションに関連する履歴を利用可能にしたいプレゼンテーションに役立ちます。</target>
        </trans-unit>
        <trans-unit id="7fcdb96d7e5417d911e99a0401becd905a30865f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rpm&lt;/code&gt; command has several different modes. If the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; flag has been specified, &lt;code&gt;rpm&lt;/code&gt; should delete one or more packages, in which case several switches related to deleting packages are valid, like the &lt;code&gt;nodeps&lt;/code&gt; switch.</source>
          <target state="translated">&lt;code&gt;rpm&lt;/code&gt; コマンドは、いくつかの異なるモードがあります。 &lt;code&gt;-e&lt;/code&gt; または &lt;code&gt;--erase&lt;/code&gt; フラグが指定されている場合、 &lt;code&gt;rpm&lt;/code&gt; は1つ以上のパッケージを削除する必要があります。この場合、 &lt;code&gt;nodeps&lt;/code&gt; スイッチのように、パッケージの削除に関連するいくつかのスイッチが有効です。</target>
        </trans-unit>
        <trans-unit id="a790e8c78ea9f158b99ff23d36fc572c40897097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; command above used quotes to ensure that &lt;code&gt;Mister Noodle&lt;/code&gt; was one argument. If it had been two arguments, then &lt;code&gt;name&lt;/code&gt; would have been a list of length 2. In fact, all variables in &lt;code&gt;fish&lt;/code&gt; are really lists, that can contain any number of values, or none at all.</source>
          <target state="translated">上記の &lt;code&gt;set&lt;/code&gt; コマンドは引用符を使用して、 &lt;code&gt;Mister Noodle&lt;/code&gt; が1つの引数であることを確認しました。2つの引数があった場合、 &lt;code&gt;name&lt;/code&gt; は長さ2のリストになります。実際、 &lt;code&gt;fish&lt;/code&gt; のすべての変数は実際にはリストであり、任意の数の値を含むことも、まったく含まないこともあります。</target>
        </trans-unit>
        <trans-unit id="b8a21bdde776c698d3de37f05072833e8526edd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set_color&lt;/code&gt; command uses the terminfo database to look up how to change terminal colors on whatever terminal is in use. Some systems have old and incomplete terminfo databases, and may lack color information for terminals that support it. Fish will assume that all terminals can use the &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI X3.64&lt;/a&gt; escape sequences if the terminfo definition indicates a color below 16 is not supported.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; コマンドが使用されているものは何でも端末上の端末の色を変更する方法を探すためにterminfoデータベースを使用しています。一部のシステムには古い不完全なterminfoデータベースがあり、それをサポートする端末のカラー情報が不足している場合があります。Fishは、terminfo定義が16未満の色がサポートされていないことを示している場合、すべての端末が&lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI X3.64&lt;/a&gt;エスケープシーケンスを使用できると想定します。</target>
        </trans-unit>
        <trans-unit id="570ae270bf32027068dbc7611cc21eacc745b07d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ssh&lt;/code&gt; command uses all hosts that are stored in the known_hosts file as completions. (See the ssh documentation for more information)</source>
          <target state="translated">&lt;code&gt;ssh&lt;/code&gt; コマンドが補完として、known_hostsファイルに保存されているすべてのホストを使用しています。（詳細については、sshのドキュメントを参照してください）</target>
        </trans-unit>
        <trans-unit id="98c28ed2787aacc681a7fe21c43d77f6911bb6d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;su&lt;/code&gt; command takes any username as an argument. Usernames are given as the first colon-separated field in the file /etc/passwd. This can be specified as:</source>
          <target state="translated">&lt;code&gt;su&lt;/code&gt; コマンドは、引数として任意のユーザー名を取ります。ユーザー名は、/ etc / passwdファイル内の最初のコロンで区切られたフィールドとして指定されます。これは次のように指定できます。</target>
        </trans-unit>
        <trans-unit id="d0c2e5dc87ea547203543a3113293b01834dc317" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;su&lt;/code&gt; command uses all users on the system as completions.</source>
          <target state="translated">&lt;code&gt;su&lt;/code&gt; コマンドが補完として、システム上のすべてのユーザーを使用しています。</target>
        </trans-unit>
        <trans-unit id="ac2d93e5ce9c99380286aea119eb1c4d811d5e80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; command is used to execute one of possibly many blocks of commands depending on the value of a string. See the documentation for &lt;a href=&quot;commands#switch&quot;&gt;switch&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; コマンドは、文字列の値に応じてコマンドのおそらく多くのブロックのいずれかを実行するために使用されます。詳細については、&lt;a href=&quot;commands#switch&quot;&gt;スイッチ&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="47ad27700014770c354049370500a3fdcb1e0c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~&lt;/code&gt; (tilde) character at the beginning of a parameter, followed by a username, is expanded into the home directory of the specified user. A lone &lt;code&gt;~&lt;/code&gt;, or a &lt;code&gt;~&lt;/code&gt; followed by a slash, is expanded into the home directory of the process owner.</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; ユーザー名に続くパラメータの先頭に（チルダ）文字は、指定したユーザのホームディレクトリに展開されます。単独の &lt;code&gt;~&lt;/code&gt; 、または &lt;code&gt;~&lt;/code&gt; 後にスラッシュが続くものは、プロセス所有者のホームディレクトリに展開されます。</target>
        </trans-unit>
        <trans-unit id="81bc67c4cc6d1500fe78dbf824dcd5a05daabcef" translate="yes" xml:space="preserve">
          <source>The Internet Relay Chat channel, #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;</source>
          <target state="translated">インターネットリレーチャットチャネル、irc.oftc.netの &lt;code&gt;irc.oftc.net&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38912f78e93626e5fa47b637ba81937a676623d5" translate="yes" xml:space="preserve">
          <source>The advantage is that you don't have to go mucking around in files: just run this once at the command line, and it will affect the current session and all future instances too. (Note: you should NOT add this line to &lt;code&gt;config.fish&lt;/code&gt;. If you do, the variable will get longer each time you run fish!)</source>
          <target state="translated">利点は、ファイルをいじくり回す必要がないことです。これをコマンドラインで1回実行するだけで、現在のセッションと将来のすべてのインスタンスにも影響します。（注：この行を &lt;code&gt;config.fish&lt;/code&gt; に追加しないでください。追加すると、魚を実行するたびに変数が長くなります！）</target>
        </trans-unit>
        <trans-unit id="9a5b6fa2b60fb7b30f834fa877a85006d71c86dd" translate="yes" xml:space="preserve">
          <source>The block can be removed. Any events which triggered while the block was in place will then be delivered.</source>
          <target state="translated">ブロックは削除することができます。ブロックが設置されている間に発生したイベントはすべて配信されます。</target>
        </trans-unit>
        <trans-unit id="bb7debcb6ad4bd52a3602c3c576ba4ce44391ac4" translate="yes" xml:space="preserve">
          <source>The block is unconditionally executed. &lt;code&gt;begin; ...; end&lt;/code&gt; is equivalent to &lt;code&gt;if true; ...; end&lt;/code&gt;.</source>
          <target state="translated">ブロックは無条件に実行されます。 &lt;code&gt;begin; ...; end&lt;/code&gt; は &lt;code&gt;if true; ...; end&lt;/code&gt; と同等です。...; 終わり。</target>
        </trans-unit>
        <trans-unit id="c5cb93e79eb59eed4f3c4bd5e54faad96127309f" translate="yes" xml:space="preserve">
          <source>The colors used by fish for syntax highlighting can be configured by changing the values of a various variables. The value of these variables can be one of the colors accepted by the &lt;a href=&quot;commands#set_color&quot;&gt;set_color&lt;/a&gt; command. The &lt;code&gt;--bold&lt;/code&gt; or &lt;code&gt;-b&lt;/code&gt; switches accepted by &lt;code&gt;set_color&lt;/code&gt; are also accepted.</source>
          <target state="translated">fishが構文の強調表示に使用する色は、さまざまな変数の値を変更することで構成できます。これらの変数の値は、&lt;a href=&quot;commands#set_color&quot;&gt;set_color&lt;/a&gt;コマンドで受け入れられる色のいずれかになります。 &lt;code&gt;--bold&lt;/code&gt; または &lt;code&gt;-b&lt;/code&gt; によって受け入れられたスイッチ &lt;code&gt;set_color&lt;/code&gt; も受け入れています。</target>
        </trans-unit>
        <trans-unit id="84d325ad2d19b4840c597f9597e729e6423f6e0a" translate="yes" xml:space="preserve">
          <source>The command history is stored in the file &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; (or &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; if that variable is set) by default. However, you can set the &lt;code&gt;fish_history&lt;/code&gt; environment variable to change the name of the history session (resulting in a &lt;code&gt;&amp;lt;session&amp;gt;_history&lt;/code&gt; file); both before starting the shell and while the shell is running.</source>
          <target state="translated">コマンド履歴は、デフォルトでファイル &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; （または、変数が設定されている場合は &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; されます。ただし、 &lt;code&gt;fish_history&lt;/code&gt; 環境変数を設定して、履歴セッションの名前を変更できます（結果として &lt;code&gt;&amp;lt;session&amp;gt;_history&lt;/code&gt; ファイルになります）。シェルを開始する前とシェルの実行中の両方。</target>
        </trans-unit>
        <trans-unit id="ad9471aeb00cd7dbf667ba8000bfffbdd6168599" translate="yes" xml:space="preserve">
          <source>The completions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/completions&lt;/code&gt;; and</source>
          <target state="translated">通常、 &lt;code&gt;/usr/share/fish/completions&lt;/code&gt; にインストールされる、fishに付属する補完物。そして</target>
        </trans-unit>
        <trans-unit id="526642f1e62598bbea0ecea2aededa98b233083a" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;fish_mode_prompt&lt;/code&gt; function will output indicators about the current Vi editor mode displayed to the left of the regular prompt. Define your own function to customize the appearance of the mode indicator. You can also define an empty &lt;code&gt;fish_mode_prompt&lt;/code&gt; function to remove the Vi mode indicators. The &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; can be used to determine the current mode. It will be one of &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;replace_one&lt;/code&gt;, or &lt;code&gt;visual&lt;/code&gt;.</source>
          <target state="translated">デフォルトの &lt;code&gt;fish_mode_prompt&lt;/code&gt; 関数は、通常のプロンプトの左側に表示される現在のViエディターモードに関するインジケーターを出力します。独自の関数を定義して、モードインジケーターの外観をカスタマイズします。空の &lt;code&gt;fish_mode_prompt&lt;/code&gt; 関数を定義して、Viモードインジケーターを削除することもできます。 &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; 現在のモードを決定するために使用することができます。これは、のいずれかになります &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;insert&lt;/code&gt; 、 &lt;code&gt;replace_one&lt;/code&gt; 、または &lt;code&gt;visual&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b701404c307944b4f207202092290f154a8ceb6b" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;functions&lt;/code&gt;, when called with no arguments, is to print the names of all defined functions. Unless the &lt;code&gt;-a&lt;/code&gt; option is given, no functions starting with underscores are not included in the output.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; のデフォルトの動作は、引数なしで呼び出された場合、定義されたすべての関数の名前を出力することです。 &lt;code&gt;-a&lt;/code&gt; オプションを指定しない限り、アンダースコアで始まる関数は出力に含まれません。</target>
        </trans-unit>
        <trans-unit id="3238e1ed93b89a49bf4c1e65f05bfcad2dc2ccfc" translate="yes" xml:space="preserve">
          <source>The default key binding can be set by specifying a &lt;code&gt;SEQUENCE&lt;/code&gt; of the empty string (that is, &lt;code&gt;''&lt;/code&gt; ). It will be used whenever no other binding matches. For most key bindings, it makes sense to use the &lt;code&gt;self-insert&lt;/code&gt; function (i.e. &lt;code&gt;bind '' self-insert&lt;/code&gt;) as the default keybinding. This will insert any keystrokes not specifically bound to into the editor. Non- printable characters are ignored by the editor, so this will not result in control sequences being printable.</source>
          <target state="translated">空の文字列（つまり &lt;code&gt;''&lt;/code&gt; ）の &lt;code&gt;SEQUENCE&lt;/code&gt; を指定することで、デフォルトのキーバインディングを設定できます。他のバインディングが一致しない場合は常に使用されます。ほとんどのキー割り当てでは、デフォルトのキー割り当てとして &lt;code&gt;self-insert&lt;/code&gt; 関数（つまり &lt;code&gt;bind '' self-insert&lt;/code&gt; ）を使用するのが理にかなっています。これにより、特にバインドされていないキーストロークがエディターに挿入されます。印刷不可能な文字はエディターによって無視されるため、これによって制御シーケンスが印刷可能になることはありません。</target>
        </trans-unit>
        <trans-unit id="761122ce7c1e00f6a72f6459922524107cc8cd64" translate="yes" xml:space="preserve">
          <source>The delay in milliseconds since the previous character was received is included in the diagnostic information written to stderr. This information may be useful to determine the optimal &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; setting or learn the amount of lag introduced by tools like &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;mosh&lt;/code&gt; or &lt;code&gt;tmux&lt;/code&gt;.</source>
          <target state="translated">前の文字が受信されてからのミリ秒単位の遅延は、stderrに書き込まれる診断情報に含まれています。この情報は、最適な決定するのに有用である可能性が &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; を設定するなどのツールによって導入遅れの量を学び &lt;code&gt;ssh&lt;/code&gt; 、 &lt;code&gt;mosh&lt;/code&gt; や &lt;code&gt;tmux&lt;/code&gt; のを。</target>
        </trans-unit>
        <trans-unit id="e2ae9cb276e98e46e4c54626cf3a5b994505cd52" translate="yes" xml:space="preserve">
          <source>The escape key can be used standalone, for example, to switch from insertion mode to normal mode when using Vi keybindings. Escape may also be used as a &quot;meta&quot; key, to indicate the start of an escape sequence, such as function or arrow keys. Custom bindings can also be defined that begin with an escape character.</source>
          <target state="translated">エスケープキーは、例えば、Vi キーバインドを使用しているときに挿入モードから通常モードに切り替えるためにスタンドアローンで使用することができます。エスケープは「メタ」キーとしても使用でき、ファンクションキーや矢印キーなどのエスケープシーケンスの開始を示すことができます。エスケープ文字で始まるカスタムバインディングを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="f2b67ae0b734fe8c7eb4002ecf7174bec7a097d2" translate="yes" xml:space="preserve">
          <source>The exit code of the &lt;code&gt;jobs&lt;/code&gt; builtin is &lt;code&gt;0&lt;/code&gt; if there are running background jobs and &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="translated">組み込みの &lt;code&gt;jobs&lt;/code&gt; の終了コードは、実行中のバックグラウンドジョブがある場合は &lt;code&gt;0&lt;/code&gt; 、それ以外の場合は &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="92a98ee3485df09b2caf60e2fe8f1f43529de92d" translate="yes" xml:space="preserve">
          <source>The exit status of &lt;code&gt;functions&lt;/code&gt; is the number of functions specified in the argument list that do not exist, which can be used in concert with the &lt;code&gt;-q&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; の終了ステータスは、存在しない引数リストで指定された関数の数であり、 &lt;code&gt;-q&lt;/code&gt; オプションと組み合わせて使用できます。</target>
        </trans-unit>
        <trans-unit id="0f212eae622b07227263f98bfdb5b6ec216b4de4" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 内のコマンドの終了ステータスは、 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 関数外の&lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt;の値を変更しません。</target>
        </trans-unit>
        <trans-unit id="5657481f999e23c3116d622970acdbbcff597a42" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 内のコマンドの終了ステータスは、 &lt;code&gt;fish_prompt&lt;/code&gt; 関数外の&lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt;の値を変更しません。</target>
        </trans-unit>
        <trans-unit id="ff645c10072dc44f93fe8a0bc1b09a1e128e9d19" translate="yes" xml:space="preserve">
          <source>The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">最後に終了するフォアグラウンドコマンドの終了ステータスには、&lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt;変数を使用していつでもアクセスできます。</target>
        </trans-unit>
        <trans-unit id="4652deeba9fb7344bebbe6060971799e99a44a6b" translate="yes" xml:space="preserve">
          <source>The exit status of the last run command substitution is available in the &lt;a href=&quot;#variables-status&quot;&gt;status&lt;/a&gt; variable if the substitution occurs in the context of a &lt;code&gt;set&lt;/code&gt; command.</source>
          <target state="translated">最後に実行されたコマンド置換の終了ステータスは、置換が &lt;code&gt;set&lt;/code&gt; コマンドのコンテキストで発生した場合、&lt;a href=&quot;#variables-status&quot;&gt;ステータス&lt;/a&gt;変数で利用できます。</target>
        </trans-unit>
        <trans-unit id="110fb03150bee422319feb18aa0d332d91a7cdc7" translate="yes" xml:space="preserve">
          <source>The exit status of the while loop is the exit status of the last iteration of the &lt;code&gt;COMMANDS&lt;/code&gt; executed, or 0 if none were executed. (This matches other shells and is POSIX-compatible.)</source>
          <target state="translated">whileループの終了ステータスは、実行された &lt;code&gt;COMMANDS&lt;/code&gt; の最後の反復の終了ステータス、または何も実行されなかった場合は0です。（これは他のシェルと一致し、POSIX互換です。）</target>
        </trans-unit>
        <trans-unit id="0e8e9a53dcf07764aa42aaf44d6d7a9d7ab8311a" translate="yes" xml:space="preserve">
          <source>The exporting rules when creating or updating a variable are identical to the scoping rules for variables:</source>
          <target state="translated">変数を作成または更新する際のエクスポートルールは、変数のスコープルールと同じです。</target>
        </trans-unit>
        <trans-unit id="ccd7da4c54986027f5d438b2f8ee07a3d4f4e74d" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;--&lt;/code&gt; seen is what allows the &lt;code&gt;argparse&lt;/code&gt; command to reliably separate the option specifications from the command arguments.</source>
          <target state="translated">最初の &lt;code&gt;--&lt;/code&gt; 見ては可能にするものです &lt;code&gt;argparse&lt;/code&gt; 確実コマンド引数からオプション仕様を分離するためのコマンドを。</target>
        </trans-unit>
        <trans-unit id="f00c945cebc76b9e34b8670689ec76047f703bed" translate="yes" xml:space="preserve">
          <source>The first form (&lt;code&gt;test&lt;/code&gt;) is preferred. For compatibility with other shells, the second form is available: a matching pair of square brackets (&lt;code&gt;[ [EXPRESSION ] ]&lt;/code&gt;).</source>
          <target state="translated">最初の形式（ &lt;code&gt;test&lt;/code&gt; ）が推奨されます。他のシェルとの互換性のために、2番目の形式が使用できます。対応する角括弧のペア（ &lt;code&gt;[ [EXPRESSION ] ]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1feeb6c582e1b13feec652671af704d8c4bca81d" translate="yes" xml:space="preserve">
          <source>The first line tells fish that a function by the name of &lt;code&gt;ll&lt;/code&gt; is to be defined. To use it, simply write &lt;code&gt;ll&lt;/code&gt; on the commandline. The second line tells fish that the command &lt;code&gt;ls -l $argv&lt;/code&gt; should be called when &lt;code&gt;ll&lt;/code&gt; is invoked. '&lt;code&gt;$argv&lt;/code&gt;' is an array variable, which always contains all arguments sent to the function. In the example above, these are simply passed on to the &lt;code&gt;ls&lt;/code&gt; command. For more information on functions, see the documentation for the &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; builtin.</source>
          <target state="translated">最初の行は、 &lt;code&gt;ll&lt;/code&gt; という名前の関数が定義されることを魚に伝えます。それを使用するには、コマンドラインで &lt;code&gt;ll&lt;/code&gt; と書くだけです。 2行目は、 &lt;code&gt;ll&lt;/code&gt; が呼び出されたときにコマンド &lt;code&gt;ls -l $argv&lt;/code&gt; を呼び出す必要があることをfishに伝えます。 ' &lt;code&gt;$argv&lt;/code&gt; 'は配列変数で、常に関数に送信されるすべての引数が含まれています。上記の例では、これらは単に &lt;code&gt;ls&lt;/code&gt; コマンドに渡されます。関数の詳細については、組み込み&lt;a href=&quot;commands#function&quot;&gt;関数&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5aa91cd04a31d486d202e2b1e77d870e577f521a" translate="yes" xml:space="preserve">
          <source>The first part specifies to whom this set of right applies, and can be one of &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt;, where &lt;code&gt;u&lt;/code&gt; specifies the user who owns the file, &lt;code&gt;g&lt;/code&gt; specifies the group owner of the file, &lt;code&gt;o&lt;/code&gt; specific other users rights and &lt;code&gt;a&lt;/code&gt; specifies all three should be changed.</source>
          <target state="translated">最初の部分は、この一連の権利を誰に適用するかを指定し、 &lt;code&gt;u&lt;/code&gt; 、 &lt;code&gt;g&lt;/code&gt; 、 &lt;code&gt;o&lt;/code&gt; または &lt;code&gt;a&lt;/code&gt; のいずれかです。ここで、 &lt;code&gt;u&lt;/code&gt; はファイルを所有するユーザーを指定し、 &lt;code&gt;g&lt;/code&gt; はファイルのグループ所有者を指定します &lt;code&gt;o&lt;/code&gt; 他の特定のユーザー権限および &lt;code&gt;a&lt;/code&gt; は、3つすべてを変更する必要があることを指定します。</target>
        </trans-unit>
        <trans-unit id="8197431f9332af76bce775e1de1257355f1cd95c" translate="yes" xml:space="preserve">
          <source>The fish commandline editor can be used to work on commands that are several lines long. There are three ways to make a command span more than a single line:</source>
          <target state="translated">魚のコマンドラインエディタを使えば、数行に及ぶコマンドを扱うことができます。コマンドを一行以上の長さにするには、3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="8f8186d4ab0a2d348fed572d2dce9da78099265a" translate="yes" xml:space="preserve">
          <source>The fish commandline editor works exactly the same in single line mode and in multiline mode. To move between lines use the left and right arrow keys and other such keyboard shortcuts.</source>
          <target state="translated">魚のコマンドラインエディタは、一行モードでも複数行モードでも全く同じように動作します。行間を移動するには、左右の矢印キーやその他のキーボードショートカットを使用します。</target>
        </trans-unit>
        <trans-unit id="23b5304e27f02f59d7a10f53fd4009e199ac5306" translate="yes" xml:space="preserve">
          <source>The fish exit status is generally the exit status of the last foreground command. If fish is exiting because of a parse error, the exit status is 127.</source>
          <target state="translated">fishの終了ステータスは、一般的には最後のフォアグラウンドコマンドの終了ステータスです。パースエラーでfishが終了している場合、終了ステータスは127です。</target>
        </trans-unit>
        <trans-unit id="81b0737757c6447d0c7efe9ceff078d063aa48ef" translate="yes" xml:space="preserve">
          <source>The fish user community extends fish in unique and useful ways via scripts that aren't always appropriate for bundling with the fish package. Typically because they solve a niche problem unlikely to appeal to a broad audience. You can find those extensions, including prompts, themes and useful functions, in various third-party repositories. These include:</source>
          <target state="translated">魚のユーザーコミュニティは、スクリプトを使ってユニークで有用な方法で魚を拡張していますが、必ずしも魚のパッケージにバンドルするのに適しているとは限りません。一般的に、それらのスクリプトはニッチな問題を解決するものであり、多くの人にアピールすることはできません。これらの拡張機能は、プロンプトやテーマ、便利な機能など、さまざまなサードパーティのリポジトリで見つけることができます。これらには次のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="d06891f80053c3220358df28d431b54da754d75c" translate="yes" xml:space="preserve">
          <source>The fish_mode_prompt function will output the mode indicator for use in vi-mode.</source>
          <target state="translated">fish_mode_prompt関数は、viモードで使用するためのモードインジケータを出力します。</target>
        </trans-unit>
        <trans-unit id="89d3be5da20cd5974bed5d4cec48f0faf57383bf" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;argparse&lt;/code&gt; options are available. They must appear before all OPTION_SPECs:</source>
          <target state="translated">次の &lt;code&gt;argparse&lt;/code&gt; オプションを使用できます。これらはすべてのOPTION_SPECの前に配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="23d5e5164bbb45ea1a895b015bf1d3acf0cdeae1" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;argparse&lt;/code&gt; options are available:</source>
          <target state="translated">次の &lt;code&gt;argparse&lt;/code&gt; オプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="224bb1116b7af6da373f3bd98c7370044c04d51d" translate="yes" xml:space="preserve">
          <source>The following additional options are also understood by &lt;code&gt;ulimit&lt;/code&gt;:</source>
          <target state="translated">以下の追加オプションも &lt;code&gt;ulimit&lt;/code&gt; によって認識されます。</target>
        </trans-unit>
        <trans-unit id="72e92d902d19c4f9a787cc785c9f6f673c804c7c" translate="yes" xml:space="preserve">
          <source>The following code first defines an event handler for the generic event named 'test_event', and then emits an event of that type.</source>
          <target state="translated">以下のコードは、まず 'test_event' という名前の汎用イベントのイベントハンドラを定義し、そのタイプのイベントを放出します。</target>
        </trans-unit>
        <trans-unit id="4dfce41da5b846516accbd2a1b32a0ea88076d5d" translate="yes" xml:space="preserve">
          <source>The following code is an implementation of the false command as a fish function</source>
          <target state="translated">以下のコードは、False コマンドを fish 関数として実装したものです。</target>
        </trans-unit>
        <trans-unit id="73f428206d6cc247fb0a938bd495734a3eb822ae" translate="yes" xml:space="preserve">
          <source>The following code removes all tmp files that do not contain the word smurf.</source>
          <target state="translated">以下のコードは、smurfという単語を含まないすべてのtmpファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="479b6746587510b08a8b09d6baf9432244f03bce" translate="yes" xml:space="preserve">
          <source>The following code reports an error and exits if no file named spoon can be found.</source>
          <target state="translated">次のコードは、スプーンという名前のファイルが見つからない場合にエラーを報告して終了します。</target>
        </trans-unit>
        <trans-unit id="c4c2a9bc321af801fbf29261dd0e7d5af4245506" translate="yes" xml:space="preserve">
          <source>The following code runs the &lt;code&gt;make&lt;/code&gt; command to build a program. If the build succeeds, &lt;code&gt;make&lt;/code&gt;'s exit status is 0, and the program is installed. If either step fails, the exit status is 1, and &lt;code&gt;make clean&lt;/code&gt; is run, which removes the files created by the build process.</source>
          <target state="translated">次のコードは、 &lt;code&gt;make&lt;/code&gt; コマンドを実行してプログラムをビルドします。ビルドが成功すると、 &lt;code&gt;make&lt;/code&gt; の終了ステータスは0になり、プログラムがインストールされます。いずれかのステップが失敗すると、終了ステータスは1になり、 &lt;code&gt;make clean&lt;/code&gt; が実行され、ビルドプロセスによって作成されたファイルが削除されます。</target>
        </trans-unit>
        <trans-unit id="546e6c9b6b78b14a90cdffaa174cd31d19fddac9" translate="yes" xml:space="preserve">
          <source>The following code runs the &lt;code&gt;make&lt;/code&gt; command to build a program. If the build succeeds, the program is installed. If either step fails, &lt;code&gt;make clean&lt;/code&gt; is run, which removes the files created by the build process.</source>
          <target state="translated">次のコードは、 &lt;code&gt;make&lt;/code&gt; コマンドを実行してプログラムをビルドします。ビルドが成功すると、プログラムがインストールされます。いずれかのステップが失敗すると、 &lt;code&gt;make clean&lt;/code&gt; が実行され、ビルドプロセスによって作成されたファイルが削除されます。</target>
        </trans-unit>
        <trans-unit id="22ceb5db939abfc8429d0cfac70346e285c29f90" translate="yes" xml:space="preserve">
          <source>The following code searches all .c files for &quot;smurf&quot;, and halts at the first occurrence.</source>
          <target state="translated">以下のコードは、すべての .c ファイルから &quot;smurf&quot; を検索し、最初の出現で停止します。</target>
        </trans-unit>
        <trans-unit id="4275d8a3b1aa0d62413745bb834485269f681525" translate="yes" xml:space="preserve">
          <source>The following code sets a number of variables inside of a block scope. Since the variables are set inside the block and have local scope, they will be automatically deleted when the block ends.</source>
          <target state="translated">以下のコードは、ブロックスコープ内にいくつかの変数を設定しています。変数はブロック内で設定され、ローカルスコープを持っているため、ブロックが終了すると自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="9c3e3b53e3555daf8b545c545da16a2dcb0110a7" translate="yes" xml:space="preserve">
          <source>The following code stores the value 'hello' in the shell variable &lt;code&gt;$foo&lt;/code&gt;.</source>
          <target state="translated">次のコードは、値 'hello'をシェル変数 &lt;code&gt;$foo&lt;/code&gt; 格納します。</target>
        </trans-unit>
        <trans-unit id="381bfb0bdea553cc88676dcf9cb0ff3a9ee0da17" translate="yes" xml:space="preserve">
          <source>The following code tests whether a file &lt;code&gt;foo.txt&lt;/code&gt; exists as a regular file.</source>
          <target state="translated">次のコードは、ファイル &lt;code&gt;foo.txt&lt;/code&gt; が通常のファイルとして存在するかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="96c71a4810d00e2a53ad0417748ddcd2d89501b6" translate="yes" xml:space="preserve">
          <source>The following code will call the ls command. Note that &lt;code&gt;fish&lt;/code&gt; does not support the use of shell variables as direct commands; &lt;code&gt;eval&lt;/code&gt; can be used to work around this.</source>
          <target state="translated">次のコードはlsコマンドを呼び出します。 &lt;code&gt;fish&lt;/code&gt; は、シェル変数のダイレクトコマンドとしての使用をサポートしていないことに注意してください。 &lt;code&gt;eval&lt;/code&gt; はこれを回避するために使用できます。</target>
        </trans-unit>
        <trans-unit id="ca62666931da18a9248d4ac0f516c18c3953407d" translate="yes" xml:space="preserve">
          <source>The following code will count down from a random even number between 10 and 20 to 1:</source>
          <target state="translated">以下のコードは、10から20までの偶数の乱数から1までカウントダウンします。</target>
        </trans-unit>
        <trans-unit id="b827c00166140f0325b113f6c5ec11ead3608d8d" translate="yes" xml:space="preserve">
          <source>The following code will create &lt;code&gt;rmi&lt;/code&gt;, which runs &lt;code&gt;rm&lt;/code&gt; with additional arguments on every invocation.</source>
          <target state="translated">次のコードは、呼び出しごとに追加の引数を使用して &lt;code&gt;rm&lt;/code&gt; を実行する &lt;code&gt;rmi&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="2bda4fa27dff7ecce2f691a9e2a6631fca487d27" translate="yes" xml:space="preserve">
          <source>The following code will not output anything:</source>
          <target state="translated">以下のコードでは何も出力されません。</target>
        </trans-unit>
        <trans-unit id="ef1c53d0ac92fed4883e8ae1b1d7d027d13ad785" translate="yes" xml:space="preserve">
          <source>The following code will print &quot;foo.txt exists and is readable&quot; if foo.txt is a regular file and readable</source>
          <target state="translated">以下のコードは、foo.txt が通常のファイルで読み込み可能な場合、&quot;foo.txt が存在し、読み込み可能である&quot; と表示されます。</target>
        </trans-unit>
        <trans-unit id="1b900844821e8f04f7dd1574d0cf172ece4e3553" translate="yes" xml:space="preserve">
          <source>The following code will print &lt;code&gt;foo.txt exists&lt;/code&gt; if the file foo.txt exists and is a regular file, otherwise it will print &lt;code&gt;bar.txt exists&lt;/code&gt; if the file bar.txt exists and is a regular file, otherwise it will print &lt;code&gt;foo.txt and bar.txt do not exist&lt;/code&gt;.</source>
          <target state="translated">次のコードが印刷されます &lt;code&gt;foo.txt exists&lt;/code&gt; ファイルfoo.txtのが存在し、通常のファイルであれば、それ以外の場合は、印刷します &lt;code&gt;bar.txt exists&lt;/code&gt; ファイルbar.txtが存在し、通常のファイルであれば、それ以外の場合は、印刷します &lt;code&gt;foo.txt and bar.txt do not exist&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de3876978d90a169388326ae4fae09574262829b" translate="yes" xml:space="preserve">
          <source>The following operations (sub-commands) are available:</source>
          <target state="translated">以下の操作(サブコマンド)が可能です。</target>
        </trans-unit>
        <trans-unit id="87ad7915cdbf5aabf9ec8f4e6f650717a3e51ad5" translate="yes" xml:space="preserve">
          <source>The following options are available:</source>
          <target state="translated">以下のようなオプションがあります。</target>
        </trans-unit>
        <trans-unit id="d66ddc0c6de8a95bb5854453416293c96da8d8a9" translate="yes" xml:space="preserve">
          <source>The following options change the way &lt;code&gt;commandline&lt;/code&gt; prints the current commandline buffer:</source>
          <target state="translated">次のオプションは、 &lt;code&gt;commandline&lt;/code&gt; が現在のコマンドラインバッファを出力する方法を変更します。</target>
        </trans-unit>
        <trans-unit id="63df7f64ccf12b96665f8dde259ffe470d38015a" translate="yes" xml:space="preserve">
          <source>The following options change the way &lt;code&gt;commandline&lt;/code&gt; updates the command line buffer:</source>
          <target state="translated">次のオプションが途中変更 &lt;code&gt;commandline&lt;/code&gt; コマンド・ライン・バッファを更新します：</target>
        </trans-unit>
        <trans-unit id="74214e3ec02696aeea391992facc065916f44218" translate="yes" xml:space="preserve">
          <source>The following options change what part of the commandline is printed or updated:</source>
          <target state="translated">以下のオプションは、コマンドラインのどの部分が印刷されるか、または更新されるかを変更します。</target>
        </trans-unit>
        <trans-unit id="4caebaf69abe1f045ca9b70c7d77c6343b9dba77" translate="yes" xml:space="preserve">
          <source>The following options control variable scope:</source>
          <target state="translated">以下のオプションは、変数のスコープを制御します。</target>
        </trans-unit>
        <trans-unit id="de38d59c5de4e05441ae91dc9bbb795a1e1439a4" translate="yes" xml:space="preserve">
          <source>The following options output metadata about the commandline state:</source>
          <target state="translated">以下のオプションは、コマンドラインの状態に関するメタデータを出力します。</target>
        </trans-unit>
        <trans-unit id="2cc91c14fc643ec75cd8e42977ab3bf342c34ee4" translate="yes" xml:space="preserve">
          <source>The following parameters are available:</source>
          <target state="translated">以下のパラメータを使用できます。</target>
        </trans-unit>
        <trans-unit id="328c4823c00af02675ec490144bb09f24d6106dd" translate="yes" xml:space="preserve">
          <source>The following special input functions are available:</source>
          <target state="translated">以下のような特殊入力機能があります。</target>
        </trans-unit>
        <trans-unit id="f152dd9767da97d86c0b7bee6016016e58054d4e" translate="yes" xml:space="preserve">
          <source>The following subcommands are available.</source>
          <target state="translated">以下のサブコマンドが利用できます。</target>
        </trans-unit>
        <trans-unit id="58f88b1896d25d9e560265aa1ea2d352215c9687" translate="yes" xml:space="preserve">
          <source>The following variables are available to change the highlighting colors in fish:</source>
          <target state="translated">魚のハイライトカラーを変更するには、以下の変数を使用できます。</target>
        </trans-unit>
        <trans-unit id="c602bb0a290012cbead72e55c75dd6308e892909" translate="yes" xml:space="preserve">
          <source>The functions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/functions&lt;/code&gt;.</source>
          <target state="translated">fishに付属する関数で、通常は &lt;code&gt;/usr/share/fish/functions&lt;/code&gt; にインストールされます。</target>
        </trans-unit>
        <trans-unit id="31d1d74253673e0e00e4ab6d298c6cfbfbe641c4" translate="yes" xml:space="preserve">
          <source>The last value assigned to &lt;code&gt;var&lt;/code&gt; when the loop terminated would not be available outside the loop. What &lt;code&gt;echo $var&lt;/code&gt; would write depended on what it was set to before the loop was run. Likely nothing.</source>
          <target state="translated">ループが終了したときに &lt;code&gt;var&lt;/code&gt; に割り当てられた最後の値は、ループ外では使用できません。何が &lt;code&gt;echo $var&lt;/code&gt; 、それがループを実行する前に設定したものに依存して書きます。おそらくない。</target>
        </trans-unit>
        <trans-unit id="4b5d758036d63a8bf5273befa9ba2de30bb1d084" translate="yes" xml:space="preserve">
          <source>The latter syntax &lt;code&gt;{$WORD}&lt;/code&gt; works by exploiting &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt;.</source>
          <target state="translated">後者の構文 &lt;code&gt;{$WORD}&lt;/code&gt; は、&lt;a href=&quot;#expand-brace&quot;&gt;ブレース展開を&lt;/a&gt;利用することで機能します。</target>
        </trans-unit>
        <trans-unit id="af91f79f8373488bcf43ad9d85211f47c5490d9e" translate="yes" xml:space="preserve">
          <source>The long answer:</source>
          <target state="translated">長い答えだ</target>
        </trans-unit>
        <trans-unit id="3bc04ce8ee0aaf5de96a68984a57d83e6ba0f996" translate="yes" xml:space="preserve">
          <source>The most common way to set the locale to use a command like 'set -x LANG en_GB.utf8', which sets the current locale to be the English language, as used in Great Britain, using the UTF-8 character set. For a list of available locales, use 'locale -a'.</source>
          <target state="translated">ロケールを設定する最も一般的な方法は、'set -x LANG en_GB.utf8' のようなコマンドを使用することです。利用可能なロケールの一覧は 'locale -a' を使用してください。</target>
        </trans-unit>
        <trans-unit id="65aa63047471b9a76e26dd8f43f5899f1292feb3" translate="yes" xml:space="preserve">
          <source>The names given to shell objects such as variables and function names are known as &quot;identifiers&quot;. Each type of identifier has rules that define the valid sequence of characters which compose the identifier.</source>
          <target state="translated">変数や関数名などのシェルオブジェクトに与えられる名前は「識別子」として知られています。各タイプの識別子には、識別子を構成する有効な文字列を定義するルールがあります。</target>
        </trans-unit>
        <trans-unit id="2fe3f46a59e146e352f1c4758de7a57641a2c629" translate="yes" xml:space="preserve">
          <source>The names of these variables are mostly derived from the csh family of shells and differ from the ones used by Bourne style shells such as bash.</source>
          <target state="translated">これらの変数の名前はほとんどの場合、シェルの csh ファミリーに由来しており、 bash のようなボーンスタイルのシェルで使われているものとは異なります。</target>
        </trans-unit>
        <trans-unit id="0cdd8d204de3244af011ba40dd2e1e03a80c3965" translate="yes" xml:space="preserve">
          <source>The official mailing list at &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;fish-users@lists.sourceforge.net&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;fish-users@lists.sourceforge.net&lt;/a&gt;の公式メーリングリスト</target>
        </trans-unit>
        <trans-unit id="341137762021767c1bcfe1d4e89d1efb6ab672f6" translate="yes" xml:space="preserve">
          <source>The open command doesn't work.</source>
          <target state="translated">オープンコマンドが効かない</target>
        </trans-unit>
        <trans-unit id="1270e20d3a3df8e1f5346556fc472ccabc75c9c8" translate="yes" xml:space="preserve">
          <source>The options for specifying command name and command path may be used multiple times to define the same completions for multiple commands.</source>
          <target state="translated">コマンド名とコマンドパスを指定するオプションは、複数のコマンドに対して同じ補完を定義するために複数回使用することができます。</target>
        </trans-unit>
        <trans-unit id="ff3a156169840aa3d5e264e866d9a002dac09c1f" translate="yes" xml:space="preserve">
          <source>The options for specifying command switches and wrapped commands may be used multiple times to define multiple completions for the command(s) in a single call.</source>
          <target state="translated">コマンドスイッチやラッピングコマンドを指定するためのオプションは、1回の呼び出しでコマンドの複数の補完を定義するために複数回使用することができます。</target>
        </trans-unit>
        <trans-unit id="514a8bdf395655769cdf0c1f52c06c11623edf78" translate="yes" xml:space="preserve">
          <source>The other conditionals use the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of a command to decide if a command or a block of commands should be executed. See the documentation for &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">他の条件&lt;a href=&quot;#variables-status&quot;&gt;文&lt;/a&gt;は、コマンドの終了ステータスを使用して、コマンドまたはコマンドのブロックを実行する必要があるかどうかを決定します。詳細については、&lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt;のドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="a2490e597900e8176c6a2c4a4584d5571260ded3" translate="yes" xml:space="preserve">
          <source>The output of a series of commands can be used as the parameters to another command. If a parameter contains a set of parenthesis, the text enclosed by the parenthesis will be interpreted as a list of commands. On expansion, this list is executed, and substituted by the output. If the output is more than one line long, each line will be expanded to a new parameter. Setting &lt;code&gt;IFS&lt;/code&gt; to the empty string will disable line splitting.</source>
          <target state="translated">一連のコマンドの出力は、別のコマンドのパラメーターとして使用できます。パラメータに一連の括弧が含まれている場合、括弧で囲まれたテキストはコマンドのリストとして解釈されます。展開時に、このリストが実行され、出力に置き換えられます。出力が複数行の場合、各行は新しいパラメーターに展開されます。 &lt;code&gt;IFS&lt;/code&gt; を空の文字列に設定すると、行分割が無効になります。</target>
        </trans-unit>
        <trans-unit id="c076b2b362e357c8c787010692c3897b0cde8acf" translate="yes" xml:space="preserve">
          <source>The previous test can likewise be inverted:</source>
          <target state="translated">前のテストも同様に反転させることができます。</target>
        </trans-unit>
        <trans-unit id="ddedd2674467015f6a5beb34ee2fbb835520f26b" translate="yes" xml:space="preserve">
          <source>The programs &lt;code&gt;man&lt;/code&gt; and &lt;code&gt;whatis&lt;/code&gt; show all installed manual pages as completions.</source>
          <target state="translated">プログラム &lt;code&gt;man&lt;/code&gt; と &lt;code&gt;whatis&lt;/code&gt; は、インストールされているすべてのマニュアルページを補完として表示します。</target>
        </trans-unit>
        <trans-unit id="923e6b118fb538f4ca8e8f67ca4698c422b3b072" translate="yes" xml:space="preserve">
          <source>The prompt is the output of the &lt;code&gt;fish_prompt&lt;/code&gt; function. Put it in &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt;. For example, a simple prompt is:</source>
          <target state="translated">プロンプトは、 &lt;code&gt;fish_prompt&lt;/code&gt; 関数の出力です。で、それを入れて &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt; 。たとえば、簡単なプロンプトは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f6c98e8413fa41203c749875900025da16302aca" translate="yes" xml:space="preserve">
          <source>The reason for providing for two output file descriptors is to allow separation of errors and warnings from regular program output.</source>
          <target state="translated">2つの出力ファイル記述子を提供する理由は、通常のプログラム出力からエラーと警告を分離できるようにするためです。</target>
        </trans-unit>
        <trans-unit id="1c641b43a1ed9a01749c093f3a5864403b12f91c" translate="yes" xml:space="preserve">
          <source>The return status is 1 if any &lt;code&gt;REASON&lt;/code&gt; is invalid; otherwise trap returns 0.</source>
          <target state="translated">いずれかの &lt;code&gt;REASON&lt;/code&gt; が無効な場合、戻りステータスは1です。それ以外の場合、トラップは0を返します。</target>
        </trans-unit>
        <trans-unit id="eec28e525883ec2bf359aa9ac84f19012ae7983d" translate="yes" xml:space="preserve">
          <source>The return status of &lt;code&gt;source&lt;/code&gt; is the return status of the last job to execute. If something goes wrong while opening or reading the file, &lt;code&gt;source&lt;/code&gt; exits with a non-zero status.</source>
          <target state="translated">戻りステータス &lt;code&gt;source&lt;/code&gt; 実行するための最後のジョブの戻り状態です。ファイルのオープンまたは読み取り中に問題が発生した場合、 &lt;code&gt;source&lt;/code&gt; はゼロ以外のステータスで終了します。</target>
        </trans-unit>
        <trans-unit id="1c30a73e8a51035e518bdfeccb5ae03bbba2a49e" translate="yes" xml:space="preserve">
          <source>The same works when setting or expanding variables:</source>
          <target state="translated">変数を設定したり展開したりしても同じように動作します。</target>
        </trans-unit>
        <trans-unit id="0df43a9567e35d287e4e0a64578b1540c9c5524d" translate="yes" xml:space="preserve">
          <source>The scoping rules when creating or updating a variable are:</source>
          <target state="translated">変数の作成時や更新時のスコープルールは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="af1ca2dded8974103c58a768e1e91d3d877d12bd" translate="yes" xml:space="preserve">
          <source>The script should write any error messages to stdout, not stderr. It should return a status of zero if the flag value is valid otherwise a non-zero status to indicate it is invalid.</source>
          <target state="translated">スクリプトはエラーメッセージを標準エラーではなく標準出力に書き込むべきです。フラグの値が有効な場合はゼロのステータスを返し、そうでない場合は無効であることを示すためにゼロ以外のステータスを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="ea5694e15d95ca5a5e96c990e236cff7fa4686dd" translate="yes" xml:space="preserve">
          <source>The second part of a right specifies the mode, and can be one of &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;, where &lt;code&gt;=&lt;/code&gt; specifies that the rights should be set to the new value, &lt;code&gt;+&lt;/code&gt; specifies that the specified right should be added to those previously specified and &lt;code&gt;-&lt;/code&gt; specifies that the specified rights should be removed from those previously specified.</source>
          <target state="translated">権限の2番目の部分はモードを指定し、 &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; または &lt;code&gt;-&lt;/code&gt; のいずれかです。ここで &lt;code&gt;=&lt;/code&gt; は権限を新しい値に設定することを指定し、 &lt;code&gt;+&lt;/code&gt; は指定した権限を以前に指定した権限に追加することを指定し、 &lt;code&gt;-&lt;/code&gt; 指定した権限を以前に指定した権限から削除する必要があることを指定します。</target>
        </trans-unit>
        <trans-unit id="7823c527da5d40f4505f5d7ca9cee1dbf65bd935" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-d&lt;/code&gt; for the &lt;code&gt;grep&lt;/code&gt; command requires that one of the strings '&lt;code&gt;read&lt;/code&gt;', '&lt;code&gt;skip&lt;/code&gt;' or '&lt;code&gt;recurse&lt;/code&gt;' is used. This can be specified writing:</source>
          <target state="translated">オプションはショートスタイル &lt;code&gt;-d&lt;/code&gt; ため &lt;code&gt;grep&lt;/code&gt; コマンドは、文字列「のいずれかが必要です &lt;code&gt;read&lt;/code&gt; 」、「 &lt;code&gt;skip&lt;/code&gt; 」または「 &lt;code&gt;recurse&lt;/code&gt; 」が使用されます。これは次のように指定できます。</target>
        </trans-unit>
        <trans-unit id="21aef96d543138db0f5113aa8c694e877221993a" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-o&lt;/code&gt; for the &lt;code&gt;gcc&lt;/code&gt; command requires that a file follows it. This can be done using writing:</source>
          <target state="translated">ショートスタイルオプション &lt;code&gt;-o&lt;/code&gt; 用 &lt;code&gt;gcc&lt;/code&gt; コマンドは、ファイルがそれに従うことが必要です。これは、書き込みを使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="a7c9c314ad94ef58d396d8ee54dfb17c9688e5cf" translate="yes" xml:space="preserve">
          <source>The status variable</source>
          <target state="translated">ステータス変数</target>
        </trans-unit>
        <trans-unit id="3d79b5f2fb8b7ff9607cb6173124ce2876018175" translate="yes" xml:space="preserve">
          <source>The string FORMAT should contain format specifiers, each of which are replaced with successive arguments according to the specifier. Specifiers are detailed below, and are taken from the C library function &lt;code&gt;printf(3)&lt;/code&gt;.</source>
          <target state="translated">文字列FORMATにはフォーマット指定子を含める必要があります。フォーマット指定子はそれぞれ、指定子に従って連続した引数に置き換えられます。指定子の詳細は以下のとおりで、Cライブラリ関数 &lt;code&gt;printf(3)&lt;/code&gt; から取得されます。</target>
        </trans-unit>
        <trans-unit id="78761829292527d745af43c24666b70964c2aa8e" translate="yes" xml:space="preserve">
          <source>The third part of a right specifies what rights should be changed and can be any combination of &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, representing read, write and execute rights.</source>
          <target state="translated">権利の3番目の部分は、変更する必要がある権利を指定し、読み取り、書き込み、および実行の権利を表す、 &lt;code&gt;r&lt;/code&gt; 、 &lt;code&gt;w&lt;/code&gt; 、および &lt;code&gt;x&lt;/code&gt; の任意の組み合わせにすることができます。</target>
        </trans-unit>
        <trans-unit id="f6aea30b4125640db0c941f62792d8db2583d13d" translate="yes" xml:space="preserve">
          <source>The tool will write an example &lt;code&gt;bind&lt;/code&gt; command matching the character sequence captured to stdout. If the character sequence matches a special key name (see &lt;code&gt;bind --key-names&lt;/code&gt;), both &lt;code&gt;bind CHARS ...&lt;/code&gt; and &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; usage will be shown. Additional details about the characters received, such as the delay between chars, are written to stderr.</source>
          <target state="translated">ツールは、標準出力にキャプチャされた文字シーケンスに一致 &lt;code&gt;bind&lt;/code&gt; コマンドの例を記述します。文字シーケンスが特殊なキー名に一致する場合（ &lt;code&gt;bind --key-names&lt;/code&gt; を参照）、 &lt;code&gt;bind CHARS ...&lt;/code&gt; と &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; の両方の使用法が表示されます。文字間の遅延など、受け取った文字に関する追加の詳細は、stderrに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="33a16e681c6b2de523ee079730543d5aaaa072a3" translate="yes" xml:space="preserve">
          <source>The umask may be expressed either as an octal number, which represents the rights that will be removed by default, or symbolically, which represents the only rights that will be granted by default.</source>
          <target state="translated">umaskは、デフォルトで削除される権利を表す8進数で表現するか、デフォルトで付与される権利のみを表す記号で表現することができます。</target>
        </trans-unit>
        <trans-unit id="ff67961119e87010a71ffb5f982a7874fbd862b2" translate="yes" xml:space="preserve">
          <source>The user can change the settings of &lt;code&gt;fish&lt;/code&gt; by changing the values of certain variables.</source>
          <target state="translated">ユーザーは、特定の変数の値を変更することにより、 &lt;code&gt;fish&lt;/code&gt; の設定を変更できます。</target>
        </trans-unit>
        <trans-unit id="92734526becf97d0102e67503ae3f5ec70437f52" translate="yes" xml:space="preserve">
          <source>The user can string together multiple commands into a so called pipeline. This means that the standard output of one command will be read in as standard input into the next command. This is done by separating the commands by the pipe character '&lt;code&gt;|&lt;/code&gt;'. For example</source>
          <target state="translated">ユーザーは、いわゆるパイプラインに複数のコマンドをつなぎ合わせることができます。これは、1つのコマンドの標準出力が標準入力として次のコマンドに読み込まれることを意味します。これは、コマンドをパイプ文字 ' &lt;code&gt;|&lt;/code&gt; で区切ることによって行われます。'。例えば</target>
        </trans-unit>
        <trans-unit id="7b8b4db39167ca73155b4a80905652bbe883d472" translate="yes" xml:space="preserve">
          <source>The value of limit can be a number in the unit specified for the resource or one of the special values &lt;code&gt;hard&lt;/code&gt;, &lt;code&gt;soft&lt;/code&gt;, or &lt;code&gt;unlimited&lt;/code&gt;, which stand for the current hard limit, the current soft limit, and no limit, respectively.</source>
          <target state="translated">limitの値は、リソースに指定された単位の数値、または現在のハード制限、現在のソフト制限、制限なしをそれぞれ表す特別な値 &lt;code&gt;hard&lt;/code&gt; 、 &lt;code&gt;soft&lt;/code&gt; 、または &lt;code&gt;unlimited&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="ea2f6068a9dad88efc3494909770d142904666d0" translate="yes" xml:space="preserve">
          <source>The web interface allows you to view your functions, variables and history, and to make changes to your prompt and color configuration.</source>
          <target state="translated">ウェブインタフェースでは、関数、変数、履歴を表示したり、プロンプトや色の設定を変更したりすることができます。</target>
        </trans-unit>
        <trans-unit id="27cd5ebce2dff7c39841e898f946a341a35b41e4" translate="yes" xml:space="preserve">
          <source>Then the following invocations behave like this:</source>
          <target state="translated">すると、次の呼び出しは次のように動作します。</target>
        </trans-unit>
        <trans-unit id="fa54c06d5fdedec560ab96fcbf9871934330e6d3" translate="yes" xml:space="preserve">
          <source>There are a few important things that need to be noted about aliases:</source>
          <target state="translated">エイリアスについて注意すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="3ba25ca105726fc0d596821887908ff16a459bda" translate="yes" xml:space="preserve">
          <source>There are also special switches for specifying that a switch requires an argument, to disable filename completion, to create completions that are only available in some combinations, etc.. For a complete description of the various switches accepted by the &lt;code&gt;complete&lt;/code&gt; command, see the documentation for the &lt;a href=&quot;commands#complete&quot;&gt;complete&lt;/a&gt; builtin, or write &lt;code&gt;complete --help&lt;/code&gt; inside the &lt;code&gt;fish&lt;/code&gt; shell.</source>
          <target state="translated">受け入れられた各種スイッチの完全な説明については、いくつかの組み合わせ、など。でのみ利用可能です補完作成するには、無効ファイル名補完に、スイッチは引数が必要であることを指定するための特別なスイッチでもあり &lt;code&gt;complete&lt;/code&gt; コマンドは、ドキュメントを参照してください、以下のための&lt;a href=&quot;commands#complete&quot;&gt;完全な&lt;/a&gt;組み込み、または書き込み &lt;code&gt;complete --help&lt;/code&gt; 内部の &lt;code&gt;fish&lt;/code&gt; 貝。</target>
        </trans-unit>
        <trans-unit id="2d9df96be8b6a2362ccd2ca558b23ccf8d96cd57" translate="yes" xml:space="preserve">
          <source>There are four fish builtins that let you execute commands only if a specific criterion is met. These builtins are &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定の基準が満たされた場合にのみコマンドを実行できる4つの魚の組み込みがあります。これらの組み込みは&lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="255b5925229ebf64b3dccbaf56f554bfda33418a" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;break&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; のパラメーターはありません。</target>
        </trans-unit>
        <trans-unit id="a56ebf43ed98e5db43b2052e83aa4d07a4140747" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;breakpoint&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;breakpoint&lt;/code&gt; のパラメーターはありません。</target>
        </trans-unit>
        <trans-unit id="c25f17ac972a261d801c33ab7a6b142dc2017014" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;fish_update_completions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_update_completions&lt;/code&gt; のパラメーターはありません。</target>
        </trans-unit>
        <trans-unit id="031b665a362fca99dc2232105e16d4be76ec8e13" translate="yes" xml:space="preserve">
          <source>There are three kinds of variables in fish: universal, global and local variables. Universal variables are shared between all fish sessions a user is running on one computer. Global variables are specific to the current fish session, but are not associated with any specific block scope, and will never be erased unless the user explicitly requests it using &lt;code&gt;set -e&lt;/code&gt;. Local variables are specific to the current fish session, and associated with a specific block of commands, and is automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;, and ends with the command &lt;code&gt;end&lt;/code&gt;. The user can specify that a variable should have either global or local scope using the &lt;code&gt;-g/--global&lt;/code&gt; or &lt;code&gt;-l/--local&lt;/code&gt; switches.</source>
          <target state="translated">魚には、ユニバーサル変数、グローバル変数、ローカル変数の3種類の変数があります。ユニバーサル変数は、ユーザーが1台のコンピューターで実行しているすべてのfishセッション間で共有されます。グローバル変数は現在のフィッシュセッションに固有ですが、特定のブロックスコープに関連付けられておらず、ユーザーが &lt;code&gt;set -e&lt;/code&gt; を使用して明示的に要求しない限り消去されることはありません。ローカル変数は現在のフィッシュセッションに固有であり、コマンドの特定のブロックに関連付けられており、特定のブロックがスコープ外になると自動的に消去されます。コマンドのブロックは、コマンドのいずれかで始まる一連のコマンドである &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;function&lt;/code&gt; 、 &lt;code&gt;begin&lt;/code&gt; 又は &lt;code&gt;switch&lt;/code&gt; 、コマンド &lt;code&gt;end&lt;/code&gt; で終了します。ユーザーは、 &lt;code&gt;-g/--global&lt;/code&gt; または &lt;code&gt;-l/--local&lt;/code&gt; スイッチを使用して、変数にグローバルスコープまたはローカルスコープを指定することができます。</target>
        </trans-unit>
        <trans-unit id="a8bb46a6b8bc305c23a119159486bd2d5c470ee5" translate="yes" xml:space="preserve">
          <source>There are two breaking changes in fish 3.0: caret &lt;code&gt;^&lt;/code&gt; no longer redirects stderr, and question mark &lt;code&gt;?&lt;/code&gt; is no longer a glob. These changes are off by default. They can be enabled on a per session basis:</source>
          <target state="translated">fish 3.0には2つの重大な変更があります。キャレット &lt;code&gt;^&lt;/code&gt; が stderrをリダイレクトしないようになりました &lt;code&gt;?&lt;/code&gt; もはやグロブではありません。これらの変更はデフォルトでオフになっています。セッションごとに有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="20ceb2460c137862f053425df367d426c42e4313" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;switch&lt;/code&gt; command:</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; コマンドもあります：</target>
        </trans-unit>
        <trans-unit id="b0866a618c196f1ac7d2ced3309d7b238c006085" translate="yes" xml:space="preserve">
          <source>There may be many variables with the same name, but different scopes. When using a variable, the variable scope will be searched from the inside out, i.e. a local variable will be used rather than a global variable with the same name, a global variable will be used rather than a universal variable with the same name.</source>
          <target state="translated">同じ名前の変数がたくさんあっても、スコープが異なる場合があります。つまり、同じ名前のグローバル変数ではなくローカル変数が使用され、同じ名前のユニバーサル変数ではなくグローバル変数が使用されます。</target>
        </trans-unit>
        <trans-unit id="d7f028aa2b19c153baae8d83c317ae110446208a" translate="yes" xml:space="preserve">
          <source>These are the general purpose tab completions that &lt;code&gt;fish&lt;/code&gt; provides:</source>
          <target state="translated">これらは、 &lt;code&gt;fish&lt;/code&gt; が提供する汎用タブ補完です。</target>
        </trans-unit>
        <trans-unit id="e7972582e9c4968e777fc42db67d9b318fa79e46" translate="yes" xml:space="preserve">
          <source>These colors, and many more, can be changed by running &lt;code&gt;fish_config&lt;/code&gt;, or by modifying variables directly.</source>
          <target state="translated">これらの色やその他の色は、 &lt;code&gt;fish_config&lt;/code&gt; を実行するか、変数を直接変更することで変更できます。</target>
        </trans-unit>
        <trans-unit id="91e1e5aba0c598515d08d40af2f8d04dd57004f4" translate="yes" xml:space="preserve">
          <source>These files are all executed on the startup of every shell. If you want to run a command only on starting an interactive shell, use the exit status of the command &lt;code&gt;status --is-interactive&lt;/code&gt; to determine if the shell is interactive. If you want to run a command only when using a login shell, use &lt;code&gt;status --is-login&lt;/code&gt; instead. This will speed up the starting of non-interactive or non-login shells.</source>
          <target state="translated">これらのファイルはすべて、すべてのシェルの起動時に実行されます。対話型シェルの開始時にのみコマンドを実行する場合は、コマンドの終了ステータス &lt;code&gt;status --is-interactive&lt;/code&gt; を使用して、シェルが対話型かどうかを判断します。ログインシェルを使用しているときにのみコマンドを実行する場合は、代わりに &lt;code&gt;status --is-login&lt;/code&gt; を使用します。これにより、非インタラクティブシェルまたは非ログインシェルの起動が高速化されます。</target>
        </trans-unit>
        <trans-unit id="80b96b3d74710e83d20ff5ac21723a42f2f052d6" translate="yes" xml:space="preserve">
          <source>These flags can appear before or immediately after one of the sub-commands listed above.</source>
          <target state="translated">これらのフラグは、上記のいずれかのサブコマンドの前または直後に表示することができます。</target>
        </trans-unit>
        <trans-unit id="018467e6400b14718548d65eb59c273e2720ed52" translate="yes" xml:space="preserve">
          <source>These paths are controlled by parameters set at build, install, or run time, and may vary from the defaults listed above.</source>
          <target state="translated">これらのパスは、ビルド、インストール、または実行時に設定されたパラメータによって制御され、上記のデフォルト値とは異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="d24f98a189aa3819db3885dc20417a7ef5fd2074" translate="yes" xml:space="preserve">
          <source>They are all used in an infix manner - &lt;code&gt;5 + 2&lt;/code&gt;, not &lt;code&gt;+ 5 2&lt;/code&gt;.</source>
          <target state="translated">それらはすべて、内接法で使用されます &lt;code&gt;5 + 2&lt;/code&gt; ではなく、5 + &lt;code&gt;+ 5 2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af768071c5b224ad5b92ddb2ba1221dcbc0d859d" translate="yes" xml:space="preserve">
          <source>This also happens after &lt;a href=&quot;#expand-command-substitution&quot;&gt;command substitution&lt;/a&gt;. Therefore strings might be eliminated. This can be avoided by making the inner command return a trailing newline.</source>
          <target state="translated">これは、&lt;a href=&quot;#expand-command-substitution&quot;&gt;コマンド置換&lt;/a&gt;後にも発生します。したがって、文字列が削除される可能性があります。これは、内部のコマンドが末尾の改行を返すようにすることで回避できます。</target>
        </trans-unit>
        <trans-unit id="b50932aeaca87e43aadc296b2abd6503a42d3550" translate="yes" xml:space="preserve">
          <source>This calls the &lt;code&gt;echo&lt;/code&gt; command. &lt;code&gt;echo&lt;/code&gt; is a command which will write its arguments to the screen. In the example above, the output will be 'hello world'. Everything in fish is done with commands. There are commands for performing a set of commands multiple times, commands for assigning variables, commands for treating a group of commands as a single command, etc.. And every single command follows the same simple syntax.</source>
          <target state="translated">これは、 &lt;code&gt;echo&lt;/code&gt; コマンドを呼び出します。 &lt;code&gt;echo&lt;/code&gt; は、引数を画面に書き込むコマンドです。上記の例では、出力は「hello world」になります。魚のすべてはコマンドで行われます。一連のコマンドを複数回実行するコマンド、変数を割り当てるコマンド、コマンドのグループを単一のコマンドとして扱うコマンドなどがあります。すべての単一のコマンドは、同じ単純な構文に従います。</target>
        </trans-unit>
        <trans-unit id="366a5d79af152ebea92d5f861ed8a475043b7941" translate="yes" xml:space="preserve">
          <source>This can be written as:</source>
          <target state="translated">と書くことができます。</target>
        </trans-unit>
        <trans-unit id="2c3fa67d634b278ec1a7802bf809ac5774656af1" translate="yes" xml:space="preserve">
          <source>This code will add some directories to $PATH if they aren't yet included:</source>
          <target state="translated">このコードは、まだ含まれていないディレクトリを $PATH に追加します。</target>
        </trans-unit>
        <trans-unit id="46b694f24aed40624e847ae57ae10b126b23d033" translate="yes" xml:space="preserve">
          <source>This command makes it easy for fish scripts and functions to handle arguments in a manner 100% identical to how fish builtin commands handle their arguments. You pass a sequence of arguments that define the options recognized, followed by a literal &lt;code&gt;--&lt;/code&gt;, then the arguments to be parsed (which might also include a literal &lt;code&gt;--&lt;/code&gt;). More on this in the &lt;a href=&quot;#argparse-usage&quot;&gt;usage&lt;/a&gt; section below.</source>
          <target state="translated">このコマンドを使用すると、fishスクリプトおよび関数で、fish組み込みコマンドが引数を処理する方法と100％同一の方法で引数を処理できます。認識されるオプションを定義する一連の引数を渡し、その後にリテラル &lt;code&gt;--&lt;/code&gt; 、次に解析する引数（リテラル &lt;code&gt;--&lt;/code&gt; も含まれる場合があります）を渡します。これについては、以下の&lt;a href=&quot;#argparse-usage&quot;&gt;使用法の&lt;/a&gt;セクションで詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="20cd8d04285455a5eeee7e58dc05b32ca7729358" translate="yes" xml:space="preserve">
          <source>This command provides a way to produce option specifications suitable for use with the &lt;a href=&quot;#argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; command. You can, of course, write the option specs by hand without using this command. But you might prefer to use this for the clarity it provides.</source>
          <target state="translated">このコマンドは、&lt;a href=&quot;#argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt;コマンドでの使用に適したオプション指定を生成する方法を提供します。もちろん、このコマンドを使用せずに、オプション仕様を手動で作成することもできます。しかし、提供する明快さのためにこれを使用することを好むかもしれません。</target>
        </trans-unit>
        <trans-unit id="07448165c0f812cb8478f38c84a94b14d2215ae2" translate="yes" xml:space="preserve">
          <source>This does not overwrite custom completions.</source>
          <target state="translated">これはカスタム補完を上書きするものではありません。</target>
        </trans-unit>
        <trans-unit id="6147eda0417a76ae63d83548f1bb6d3684130031" translate="yes" xml:space="preserve">
          <source>This file has been imported from the printf in GNU Coreutils version 6.9. If you would like to use a newer version of printf, for example the one shipped with your OS, try &lt;code&gt;command printf&lt;/code&gt;.</source>
          <target state="translated">このファイルは、GNU Coreutilsバージョン6.9のprintfからインポートされました。OSに同梱されているなど、新しいバージョンのprintfを使用する場合は、 &lt;code&gt;command printf&lt;/code&gt; 試してください。</target>
        </trans-unit>
        <trans-unit id="36a27e8809bc8ecec60cf5b8b496d2f657edff50" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Please call &lt;code&gt;fish_vi_key_bindings directly&lt;/code&gt;</source>
          <target state="translated">この関数は非推奨です。 &lt;code&gt;fish_vi_key_bindings directly&lt;/code&gt; 呼び出してください</target>
        </trans-unit>
        <trans-unit id="cbbea16193e927515d0dc3be9146ab095157af42" translate="yes" xml:space="preserve">
          <source>This is a short explanation of some of the commonly used words in fish.</source>
          <target state="translated">魚でよく使われる言葉を簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="8d244f1f10393a3fd4f3ebf581d37f923228ef19" translate="yes" xml:space="preserve">
          <source>This is implemented as a function and a builtin. The function will attempt to use an external realpath command if one can be found. Otherwise it falls back to the builtin. The builtin does not support any options. It's meant to be used only by scripts which need to be portable. The builtin implementation behaves like GNU realpath when invoked without any options (which is the most common use case). In general scripts should not invoke the builtin directly. They should just use &lt;code&gt;realpath&lt;/code&gt;.</source>
          <target state="translated">これは、関数および組み込みとして実装されます。関数は、外部のrealpathコマンドが見つかると、それを使用しようとします。それ以外の場合は、組み込みにフォールバックします。組み込みはオプションをサポートしていません。移植性が必要なスクリプトでのみ使用することを意図しています。組み込み実装は、オプションなしで呼び出されると、GNU realpathのように動作します（これが最も一般的な使用例です）。一般に、スクリプトは組み込みを直接呼び出すべきではありません。彼らはただ &lt;code&gt;realpath&lt;/code&gt; を使うべきです。</target>
        </trans-unit>
        <trans-unit id="ee1d4171e513cf57adfa5dbd82bf66ed41edba27" translate="yes" xml:space="preserve">
          <source>This is not an exhaustive list and the fish project has no opinion regarding the merits of the repositories listed above or the scripts found therein.</source>
          <target state="translated">これは網羅的なリストではなく、上記のようなリポジトリやそこにあるスクリプトのメリットについては、魚類プロジェクトは意見を述べていません。</target>
        </trans-unit>
        <trans-unit id="096d775aa834b5a98fc75f9c9df8cd5ad1df3f6c" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;index#expand-brace&quot;&gt;Brace expansion&lt;/a&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;index#expand-brace&quot;&gt;ブレース展開に&lt;/a&gt;似ています。</target>
        </trans-unit>
        <trans-unit id="87b5c6aa51fef3c82ea1bd8fddb7c95bed61e89d" translate="yes" xml:space="preserve">
          <source>This is the documentation for &lt;code&gt;fish&lt;/code&gt;, the friendly interactive shell. &lt;code&gt;fish&lt;/code&gt; is a user friendly commandline shell intended mostly for interactive use. A shell is a program used to execute other programs. For the latest information on &lt;code&gt;fish&lt;/code&gt;, please visit the &lt;a href=&quot;https://fishshell.com/&quot;&gt;&lt;code&gt;fish&lt;/code&gt; homepage&lt;/a&gt;.</source>
          <target state="translated">これは、使いやすいインタラクティブなシェルである &lt;code&gt;fish&lt;/code&gt; のドキュメントです。 &lt;code&gt;fish&lt;/code&gt; は、主にインタラクティブな使用を目的としたユーザーフレンドリーなコマンドラインシェルです。シェルは、他のプログラムを実行するために使用されるプログラムです。 &lt;code&gt;fish&lt;/code&gt; の最新情報については、&lt;a href=&quot;https://fishshell.com/&quot;&gt; &lt;code&gt;fish&lt;/code&gt; ホームページ&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="577bd6355fb298c4b6b2d6488f451eaa11f5dbb8" translate="yes" xml:space="preserve">
          <source>This is the preferred way to define your prompt as well:</source>
          <target state="translated">これはプロンプトを定義するのにも好ましい方法です。</target>
        </trans-unit>
        <trans-unit id="8cc576b35450257aadce9343fd3afaecbb82068c" translate="yes" xml:space="preserve">
          <source>This means that the global value takes precedence over the universal value.</source>
          <target state="translated">これは、グローバルな値が普遍的な値よりも優先されることを意味します。</target>
        </trans-unit>
        <trans-unit id="51d7db524de6aeb12230612416aa7c659663fe8a" translate="yes" xml:space="preserve">
          <source>This prompt that you see above is the &lt;code&gt;fish&lt;/code&gt; default prompt: it shows your username, hostname, and working directory.</source>
          <target state="translated">上に表示されるこのプロンプトは、 &lt;code&gt;fish&lt;/code&gt; のデフォルトのプロンプトです。ユーザー名、ホスト名、および作業ディレクトリが表示されます。</target>
        </trans-unit>
        <trans-unit id="c731bb20159682c25c6b4c24ba8357e2f689c68f" translate="yes" xml:space="preserve">
          <source>This tells you that there exists a file that starts with '&lt;code&gt;somefi&lt;/code&gt;', which is useful feedback as you type.</source>
          <target state="translated">これは、「 &lt;code&gt;somefi&lt;/code&gt; 」で始まるファイルが存在することを示しています。これは、入力するときに役立つフィードバックです。</target>
        </trans-unit>
        <trans-unit id="1ffb61bd1cd5715a466531b7a657f71109690e35" translate="yes" xml:space="preserve">
          <source>This test is mostly POSIX-compatible.</source>
          <target state="translated">このテストはほとんどPOSIXと互換性があります。</target>
        </trans-unit>
        <trans-unit id="44595c0d7ccfd8b4e39fcc6fb1c75e80391912f7" translate="yes" xml:space="preserve">
          <source>This tutorial assumes a basic understanding of command line shells and Unix commands, and that you have a working copy of &lt;code&gt;fish&lt;/code&gt;.</source>
          <target state="translated">このチュートリアルは、コマンドラインシェルとUnixコマンドの基本的な理解と、 &lt;code&gt;fish&lt;/code&gt; の作業用コピーがあることを前提としています。</target>
        </trans-unit>
        <trans-unit id="f48d5a2439da006a37325d3b33d3046473c20c81" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure where to put your own customisations, use &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;.</source>
          <target state="translated">この広い検索は混乱するかもしれません。独自のカスタマイズをどこに置くかわからない場合は、 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 使用してください。</target>
        </trans-unit>
        <trans-unit id="f358815973e2ad20875ee5c37318a06668178037" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure, your completions probably belong in &lt;code&gt;~/.config/fish/completions&lt;/code&gt;.</source>
          <target state="translated">この広い検索は混乱するかもしれません。よくわからない場合は、補完がおそらく &lt;code&gt;~/.config/fish/completions&lt;/code&gt; 属しています。</target>
        </trans-unit>
        <trans-unit id="fc8f74e5e402cdc09fe9163449bdf559dd908a47" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure, your functions probably belong in &lt;code&gt;~/.config/fish/functions&lt;/code&gt;.</source>
          <target state="translated">この広い検索は混乱するかもしれません。不明な場合は、関数が &lt;code&gt;~/.config/fish/functions&lt;/code&gt; 属している可能性があります。</target>
        </trans-unit>
        <trans-unit id="8a9195514b37c65c22f746374d557ac1c811b3ed" translate="yes" xml:space="preserve">
          <source>This will beep when the most recent job completes.</source>
          <target state="translated">直近のジョブが完了するとビープ音が鳴ります。</target>
        </trans-unit>
        <trans-unit id="d275d705f3563e034e584f7f1416ca37d5829386" translate="yes" xml:space="preserve">
          <source>This will run the &lt;code&gt;mkdir&lt;/code&gt; command, and if it is successful, change the current working directory to the one just created.</source>
          <target state="translated">これにより &lt;code&gt;mkdir&lt;/code&gt; コマンドが実行され、成功した場合は、現在の作業ディレクトリを作成したディレクトリに変更します。</target>
        </trans-unit>
        <trans-unit id="f891073aa4578597be2a0dcd4d98d094f936e0cd" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion (replacing the command line contents), press right arrow or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. To accept the first suggested word, press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; or &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. If the autosuggestion is not what you want, just ignore it: it won't execute unless you accept it.</source>
          <target state="translated">自動提案を受け入れる（コマンドラインの内容を置き換える）には、右矢印キーまたは&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;F&lt;/b&gt;キーを押します。最初の候補の単語、プレス受け入れるには&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt;または&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;Fを&lt;/b&gt;。自動提案が適切でない場合は、無視してください。受け入れない限り、自動提案は実行されません。</target>
        </trans-unit>
        <trans-unit id="18bff7130ea79ac3d65a254db2e29fd6582707f0" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion, hit &lt;b&gt;&amp;rarr;&lt;/b&gt; or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. To accept a single word of the autosuggestion, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; (right arrow). If the autosuggestion is not what you want, just ignore it.</source>
          <target state="translated">自動提案を受け入れるには、&lt;b&gt;&amp;rarr;&lt;/b&gt;または&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Fを&lt;/b&gt;押します。自己暗示の単一の単語、受け入れるために、&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt;（右矢印）。自動提案が適切でない場合は、無視してください。</target>
        </trans-unit>
        <trans-unit id="dd013ce2337c6820983e0fd191e213738ceadda7" translate="yes" xml:space="preserve">
          <source>To append standard error to a file, write &lt;code&gt;2&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</source>
          <target state="translated">ファイルに標準エラーを追加するには、 &lt;code&gt;2&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt; と書き込みます</target>
        </trans-unit>
        <trans-unit id="0108b6b821f16c26049be48e0e57d43670272afc" translate="yes" xml:space="preserve">
          <source>To append standard output to a file, write &lt;code&gt;&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</source>
          <target state="translated">標準出力をファイルに追加するには、 &lt;code&gt;&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt; と書き込みます</target>
        </trans-unit>
        <trans-unit id="9943d195413e31ff48e223d431261ac3888d43ba" translate="yes" xml:space="preserve">
          <source>To append the output of FD N to a file, write &lt;code&gt;N&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;</source>
          <target state="translated">FD Nの出力をファイルに追加するには、 &lt;code&gt;N&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt; と書き込みます</target>
        </trans-unit>
        <trans-unit id="193736dda0ff3338bfe47b251780f85b63fdea40" translate="yes" xml:space="preserve">
          <source>To avoid this problem, consider changing the setting which fish inherits. If this is not possible, add a statement to your &lt;a href=&quot;index#&quot;&gt;user initialization file&lt;/a&gt; (usually &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;):</source>
          <target state="translated">この問題を回避するには、魚が継承する設定を変更することを検討してください。これが不可能な場合は、&lt;a href=&quot;index#&quot;&gt;ユーザー初期化ファイル&lt;/a&gt;（通常は &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; ）にステートメントを追加します。</target>
        </trans-unit>
        <trans-unit id="49e4d836110da227491a5f8bda022aa8c6061ef3" translate="yes" xml:space="preserve">
          <source>To change the number of characters per path component, set $fish_prompt_pwd_dir_length to the number of characters. Setting it to 0 or an invalid value will disable shortening entirely.</source>
          <target state="translated">パスコンポーネントごとの文字数を変更するには、$fish_prompt_pwd_dir_lengthに文字数を設定します。0に設定するか、無効な値を指定すると、短縮が完全に無効になります。</target>
        </trans-unit>
        <trans-unit id="7c3563dd46a7946806ee797b7c244ebcbcfd652c" translate="yes" xml:space="preserve">
          <source>To compare strings or numbers or check file properties (whether a file exists or is writeable and such), use &lt;a href=&quot;commands#test&quot;&gt;test&lt;/a&gt;, like</source>
          <target state="translated">文字列や数値を比較したり、ファイルのプロパティ（ファイルが存在するか、書き込み可能かなど）を&lt;a href=&quot;commands#test&quot;&gt;確認するには&lt;/a&gt;、次のようにtestを使用します。</target>
        </trans-unit>
        <trans-unit id="6a7f4987047f57b402d8e5f6d3639b704d77e210" translate="yes" xml:space="preserve">
          <source>To create a variable &lt;code&gt;smurf&lt;/code&gt;, containing the items &lt;code&gt;blue&lt;/code&gt; and &lt;code&gt;small&lt;/code&gt;, simply write:</source>
          <target state="translated">&lt;code&gt;blue&lt;/code&gt; と &lt;code&gt;small&lt;/code&gt; の項目を含む変数 &lt;code&gt;smurf&lt;/code&gt; を作成するには、次のように記述します。</target>
        </trans-unit>
        <trans-unit id="98a0be80bb6315e5a311feb69467eb89c6ebbff0" translate="yes" xml:space="preserve">
          <source>To customize the syntax highlighting, you can set the environment variables listed in the &lt;a href=&quot;index#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; section.</source>
          <target state="translated">構文の強調表示をカスタマイズするには、&lt;a href=&quot;index#variables-color&quot;&gt;強調表示の色を変更するため&lt;/a&gt;の変数セクションにリストされている環境変数を設定できます。</target>
        </trans-unit>
        <trans-unit id="27cc6de064f425d626ab9949da6c184849b875b2" translate="yes" xml:space="preserve">
          <source>To easily create a function of this form, you can use the &lt;a href=&quot;commands#alias&quot;&gt;alias&lt;/a&gt; command.</source>
          <target state="translated">この形式の関数を簡単に作成するには、&lt;a href=&quot;commands#alias&quot;&gt;alias&lt;/a&gt;コマンドを使用できます。</target>
        </trans-unit>
        <trans-unit id="86c65bf9fb8994e55d7d62a0a0233657bfd07c71" translate="yes" xml:space="preserve">
          <source>To get a listing of all currently started jobs, use the &lt;a href=&quot;commands#jobs&quot;&gt;&lt;code&gt;jobs&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">現在開始されているすべてのジョブのリストを取得するには、&lt;a href=&quot;commands#jobs&quot;&gt; &lt;code&gt;jobs&lt;/code&gt; &lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="dfb97c4eee9e02bf1114c1290403e1dda007a114" translate="yes" xml:space="preserve">
          <source>To implement an alias, use the &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--wraps&lt;/code&gt; option:</source>
          <target state="translated">エイリアスを実装するには、 &lt;code&gt;-w&lt;/code&gt; または &lt;code&gt;--wraps&lt;/code&gt; オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="2897daf35873ca16d00ef5a1dac5a630b8c3c2e1" translate="yes" xml:space="preserve">
          <source>To make errors highlighted and red, use:</source>
          <target state="translated">エラーをハイライトして赤くするには、使用します。</target>
        </trans-unit>
        <trans-unit id="d3fa292c2ab02a989c54851cc682dc196a6ed257" translate="yes" xml:space="preserve">
          <source>To not overwrite (&quot;clobber&quot;) an existing file, write '&amp;gt;?DESTINATION' or '2&amp;gt;?DESTINATION'</source>
          <target state="translated">既存のファイルを上書きしない（「上書きする」）には、「&amp;gt;？DESTINATION」または「2&amp;gt;？DESTINATION」と書き込みます</target>
        </trans-unit>
        <trans-unit id="9ec5501ff931d8cf824481581d142283552d1be7" translate="yes" xml:space="preserve">
          <source>To prepend /usr/local/bin and /usr/sbin to &lt;code&gt;$PATH&lt;/code&gt;, you can write:</source>
          <target state="translated">/ usr / local / binおよび/ usr / sbinを &lt;code&gt;$PATH&lt;/code&gt; に追加するには、次のように記述します。</target>
        </trans-unit>
        <trans-unit id="e4beb8ce6e29ccb991aceef2a82e88203ebcf1e6" translate="yes" xml:space="preserve">
          <source>To provide a list of possible completions for myprog, use the &lt;code&gt;-a&lt;/code&gt; switch. If &lt;code&gt;myprog&lt;/code&gt; accepts the arguments start and stop, this can be specified as &amp;lsquo;complete -c myprog -a 'start stop&amp;rsquo;&lt;code&gt;. The argument to the&lt;/code&gt;-a` switch is always a single string. At completion time, it will be tokenized on spaces and tabs, and variable expansion, command substitution and other forms of parameter expansion will take place.</source>
          <target state="translated">myprogの可能な補完のリストを提供するには、 &lt;code&gt;-a&lt;/code&gt; スイッチを使用します。 &lt;code&gt;myprog&lt;/code&gt; が引数startおよびstopを受け入れる場合、これは 'complete -c myprog -a' start stop 'として指定できます &lt;code&gt;. The argument to the&lt;/code&gt; -a`スイッチの引数は常に単一の文字列です。完了時に、スペースとタブでトークン化され、変数展開、コマンド置換、およびその他の形式のパラメーター展開が行われます。</target>
        </trans-unit>
        <trans-unit id="e25d06bf926dcd36845db13c547e9060f688cf44" translate="yes" xml:space="preserve">
          <source>To read standard input from a file, write &lt;code&gt;&amp;lt;SOURCE_FILE&lt;/code&gt;</source>
          <target state="translated">ファイルから標準入力を読み取るには、 &lt;code&gt;&amp;lt;SOURCE_FILE&lt;/code&gt; を書き込みます</target>
        </trans-unit>
        <trans-unit id="efd4ccfede11d358f3540d606a3599db34a9bcee" translate="yes" xml:space="preserve">
          <source>To redirect both standard output and standard error to the file 'all_output.txt', you can write &lt;code&gt;echo Hello &amp;gt; all_output.txt 2&amp;gt;&amp;amp;1&lt;/code&gt;.</source>
          <target state="translated">標準出力と標準エラーの両方をファイル「all_output.txt」にリダイレクトするには、 &lt;code&gt;echo Hello &amp;gt; all_output.txt 2&amp;gt;&amp;amp;1&lt;/code&gt; 書き込みます。</target>
        </trans-unit>
        <trans-unit id="2f9c19f996d0330cf3e69a9443cdf693a9354414" translate="yes" xml:space="preserve">
          <source>To redirect input of FD N, write &lt;code&gt;N&amp;lt;DESTINATION&lt;/code&gt;</source>
          <target state="translated">FD Nの入力をリダイレクトするには、 &lt;code&gt;N&amp;lt;DESTINATION&lt;/code&gt; と書き込みます</target>
        </trans-unit>
        <trans-unit id="1bceaef825c7c9262bebcb64ef18bc758682a29d" translate="yes" xml:space="preserve">
          <source>To redirect output of FD N, write &lt;code&gt;N&amp;gt;DESTINATION&lt;/code&gt;</source>
          <target state="translated">FD Nの出力をリダイレクトするには、 &lt;code&gt;N&amp;gt;DESTINATION&lt;/code&gt; と書き込みます</target>
        </trans-unit>
        <trans-unit id="752b3b48d45276169440be6784b7f3a0d12fbd09" translate="yes" xml:space="preserve">
          <source>To remove /usr/local/bin from &lt;code&gt;$PATH&lt;/code&gt;, you can write:</source>
          <target state="translated">&lt;code&gt;$PATH&lt;/code&gt; から/ usr / local / binを削除するには、次のように記述します。</target>
        </trans-unit>
        <trans-unit id="b2510f1ad4da5cd52177add85db1eee2d566d8fe" translate="yes" xml:space="preserve">
          <source>To save custom keybindings, put the &lt;code&gt;bind&lt;/code&gt; statements into &lt;a href=&quot;index#initialization&quot;&gt;config.fish&lt;/a&gt;. Alternatively, fish also automatically executes a function called &lt;code&gt;fish_user_key_bindings&lt;/code&gt; if it exists.</source>
          <target state="translated">カスタムキーバインドを保存 &lt;code&gt;bind&lt;/code&gt; には、bindステートメントを&lt;a href=&quot;index#initialization&quot;&gt;config.fishに配置し&lt;/a&gt;ます。または、fishは、 &lt;code&gt;fish_user_key_bindings&lt;/code&gt; という関数が存在する場合、それも自動的に実行します。</target>
        </trans-unit>
        <trans-unit id="61901ecaf8e208e6ef9d0647eaddf669c1ca4bd8" translate="yes" xml:space="preserve">
          <source>To search for previous entries containing the word 'make', type &lt;code&gt;make&lt;/code&gt; in the console and press the up key.</source>
          <target state="translated">「make」という単語を含む以前のエントリを検索 &lt;code&gt;make&lt;/code&gt; は、コンソールにmakeと入力して、上キーを押します。</target>
        </trans-unit>
        <trans-unit id="4b5da07cf8e10869da36d0830cda73f0b82b9df0" translate="yes" xml:space="preserve">
          <source>To see universal variables in action, start two fish sessions side by side, and issue the following command in one of them &lt;code&gt;set fish_color_cwd blue&lt;/code&gt;. Since &lt;code&gt;fish_color_cwd&lt;/code&gt; is a universal variable, the color of the current working directory listing in the prompt will instantly change to blue on both terminals.</source>
          <target state="translated">ユニバーサル変数の動作を確認するには、2つのfishセッションを並べて開始し、そのうちの1つで次のコマンドを発行します &lt;code&gt;set fish_color_cwd blue&lt;/code&gt; 。以来 &lt;code&gt;fish_color_cwd&lt;/code&gt; は普遍的な変数であり、迅速な意志に上場現在の作業ディレクトリの色が瞬時に両端子に青に変化します。</target>
        </trans-unit>
        <trans-unit id="b44733fd0f7a6b3cff6f09a867502f4ea60ec37a" translate="yes" xml:space="preserve">
          <source>To separate a variable name from text encase the variable within double-quotes or braces.</source>
          <target state="translated">変数名をテキストから分離するには、変数をダブルクォートまたは中括弧で囲みます。</target>
        </trans-unit>
        <trans-unit id="7e8052447e58d55b5e4f105d0ffa9d20ca69cabc" translate="yes" xml:space="preserve">
          <source>To set a variable value, use the &lt;a href=&quot;commands#set&quot;&gt;&lt;code&gt;set&lt;/code&gt; command&lt;/a&gt;. A variable name can not be empty and can contain only letters, digits, and underscores. It may begin and end with any of those characters.</source>
          <target state="translated">変数値を設定するには、&lt;a href=&quot;commands#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; コマンドを&lt;/a&gt;使用します。変数名は空にできず、文字、数字、アンダースコアのみを含めることができます。これらの文字のいずれかで開始および終了できます。</target>
        </trans-unit>
        <trans-unit id="698d5831491bbb9701f405a1762b10b1e4e34b8d" translate="yes" xml:space="preserve">
          <source>To set the variable &lt;code&gt;smurf_color&lt;/code&gt; to the value &lt;code&gt;blue&lt;/code&gt;, use the command &lt;code&gt;set smurf_color blue&lt;/code&gt;.</source>
          <target state="translated">変数 &lt;code&gt;smurf_color&lt;/code&gt; を値 &lt;code&gt;blue&lt;/code&gt; に &lt;code&gt;set smurf_color blue&lt;/code&gt; するには、コマンドset smurf_color blueを使用します。</target>
        </trans-unit>
        <trans-unit id="bed9902ef9dec5f2285d68ae61ceccf41fb50e0a" translate="yes" xml:space="preserve">
          <source>To show the last command in the title:</source>
          <target state="translated">タイトルに最後のコマンドを表示するには</target>
        </trans-unit>
        <trans-unit id="10b0cfc6463833f72da638ff9b75529f78df15de" translate="yes" xml:space="preserve">
          <source>To specify a signal handler for the WINCH signal, write:</source>
          <target state="translated">WINCH信号のシグナルハンドラを指定するには、書き込みます。</target>
        </trans-unit>
        <trans-unit id="5271e92937f5c39aabd3c25c1ed834a98af6473a" translate="yes" xml:space="preserve">
          <source>To start a debug session simply run the builtin command &lt;code&gt;breakpoint&lt;/code&gt; at the point in a function or script where you wish to gain control. Also, the default action of the TRAP signal is to call this builtin. So a running script can be debugged by sending it the TRAP signal with the &lt;code&gt;kill&lt;/code&gt; command. Once in the debugger, it is easy to insert new breakpoints by using the funced function to edit the definition of a function.</source>
          <target state="translated">デバッグセッションを開始するには、制御を取得する関数またはスクリプトの &lt;code&gt;breakpoint&lt;/code&gt; で組み込みコマンドのブレークポイントを実行します。また、TRAPシグナルのデフォルトのアクションは、この組み込み関数を呼び出すことです。したがって、実行中のスクリプトは、 &lt;code&gt;kill&lt;/code&gt; コマンドを使用してTRAPシグナルを送信することでデバッグできます。デバッガーに入ると、関数の定義を編集するための関数を使用して、新しいブレークポイントを簡単に挿入できます。</target>
        </trans-unit>
        <trans-unit id="1ca038b49940b6708e8ae180bb586be833d5a8f7" translate="yes" xml:space="preserve">
          <source>To use a &quot;,&quot; as an element, &lt;a href=&quot;#quotes&quot;&gt;quote&lt;/a&gt; or &lt;a href=&quot;#escapes&quot;&gt;escape&lt;/a&gt; it.</source>
          <target state="translated">「、」を要素として使用するには、&lt;a href=&quot;#quotes&quot;&gt;引用符&lt;/a&gt;または&lt;a href=&quot;#escapes&quot;&gt;エスケープ&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="4d1e2f58f1d1e885a6a557bd9d4d5d08b6944f6a" translate="yes" xml:space="preserve">
          <source>To use the value of the variable &lt;code&gt;smurf_color&lt;/code&gt;, write &lt;code&gt;$&lt;/code&gt; (dollar symbol) followed by the name of the variable, like &lt;code&gt;echo Smurfs are usually $smurf_color&lt;/code&gt;, which would print the result 'Smurfs are usually blue'.</source>
          <target state="translated">変数 &lt;code&gt;smurf_color&lt;/code&gt; の値を使用するには、 &lt;code&gt;$&lt;/code&gt; （ドル記号）に続けて変数の名前を続けます。たとえば、 &lt;code&gt;echo Smurfs are usually $smurf_color&lt;/code&gt; であり、「Smurfs is通常は青色」という結果を出力します。</target>
        </trans-unit>
        <trans-unit id="68bccd38cdde729f08d1dabeb1a907eb895c4a23" translate="yes" xml:space="preserve">
          <source>To write standard error to a file, write &lt;code&gt;2&amp;gt;DESTINATION&lt;/code&gt;</source>
          <target state="translated">標準エラーをファイルに書き込むには、 &lt;code&gt;2&amp;gt;DESTINATION&lt;/code&gt; と書き込みます</target>
        </trans-unit>
        <trans-unit id="659acd568f9529fe70705f8989914717371b557a" translate="yes" xml:space="preserve">
          <source>To write standard output to a file, write &lt;code&gt;&amp;gt;DESTINATION&lt;/code&gt;</source>
          <target state="translated">標準出力をファイルに書き込むには、 &lt;code&gt;&amp;gt;DESTINATION&lt;/code&gt; と書き込みます。</target>
        </trans-unit>
        <trans-unit id="73b0536304b40903244a528081e1fdc688374119" translate="yes" xml:space="preserve">
          <source>To write them on the same line, use the semicolon (&quot;;&quot;). That means the following two examples are equivalent:</source>
          <target state="translated">これらを同じ行に書くには、セミコロン(&quot;;&quot;)を使用します。つまり、以下の2つの例は等価です。</target>
        </trans-unit>
        <trans-unit id="8a17b293eb79b591812fbe348e1ab2d33402a845" translate="yes" xml:space="preserve">
          <source>Try hitting tab and see what &lt;code&gt;fish&lt;/code&gt; can do!</source>
          <target state="translated">タブを押して、 &lt;code&gt;fish&lt;/code&gt; が何をすることができるか見てください！</target>
        </trans-unit>
        <trans-unit id="fb05e0051333734c4ad4030d178c0e59ac5682e1" translate="yes" xml:space="preserve">
          <source>Turns on Vi key bindings and rebinds &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; to clear the input line.</source>
          <target state="translated">Viキーバインディングをオンにし、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;C&lt;/b&gt;を再バインドして入力行をクリアします。</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="cddfd60fdd3770f95874832546e909dcebf4b486" translate="yes" xml:space="preserve">
          <source>Type some part of the command, and then hit the &lt;b&gt;&amp;uarr;&lt;/b&gt; or &lt;b&gt;&amp;darr;&lt;/b&gt; arrow keys to navigate through history matches.</source>
          <target state="translated">コマンドの一部を入力し、&lt;b&gt;&amp;uarr;&lt;/b&gt;または&lt;b&gt;&amp;darr;&lt;/b&gt;矢印キーを押して、履歴の一致をナビゲートします。</target>
        </trans-unit>
        <trans-unit id="d5c2f3a388810326308a4cf0f9d12d94e467f941" translate="yes" xml:space="preserve">
          <source>Undefined and empty variables expand to nothing.</source>
          <target state="translated">未定義の変数や空の変数は何も展開しません。</target>
        </trans-unit>
        <trans-unit id="7f54feaec318be95b0574260bf420fada9f4de3f" translate="yes" xml:space="preserve">
          <source>Unfortunately, there is no way to make the changes take effect at once. You will need to log out and back in again.</source>
          <target state="translated">残念ながら、変更を一度に有効にする方法はありません。一度ログアウトしてから再度ログインする必要があります。</target>
        </trans-unit>
        <trans-unit id="145a9952034e76af8265b97c5e75a18c616e70d3" translate="yes" xml:space="preserve">
          <source>Unicode private-use characters reserved by fish</source>
          <target state="translated">フィッシュ予約済みユニコード私用文字</target>
        </trans-unit>
        <trans-unit id="e1607dfd6b696cdd21b339099c2b8ec1f42324b3" translate="yes" xml:space="preserve">
          <source>Uninstalling fish</source>
          <target state="translated">魚のアンインストール</target>
        </trans-unit>
        <trans-unit id="b034e228b90d3e971c38c185d9c173b9fad3cb92" translate="yes" xml:space="preserve">
          <source>Universal Variables</source>
          <target state="translated">ユニバーサル変数</target>
        </trans-unit>
        <trans-unit id="0ad651b3b2a50ae7d1ebd0a6ea4647b1fc3c39a6" translate="yes" xml:space="preserve">
          <source>Universal variables are variables that are shared between all the users' fish sessions on the computer. Fish stores many of its configuration options as universal variables. This means that in order to change fish settings, all you have to do is change the variable value once, and it will be automatically updated for all sessions, and preserved across computer reboots and login/logout.</source>
          <target state="translated">ユニバーサル変数とは、コンピュータ上のすべてのユーザーのFishセッション間で共有される変数です。Fishは設定オプションの多くをユニバーサル変数として保存しています。これは、Fishの設定を変更するためには、変数の値を一度変更するだけで、すべてのセッションで自動的に更新され、コンピュータの再起動やログイン/ログアウト時にも保存されます。</target>
        </trans-unit>
        <trans-unit id="44adc92f43c50d7e6bc38161bddc8ab76986e3b8" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;echo&lt;/code&gt;, &lt;code&gt;printf&lt;/code&gt; does not append a new line unless it is specified as part of the string.</source>
          <target state="translated">&lt;code&gt;echo&lt;/code&gt; とは異なり、 &lt;code&gt;printf&lt;/code&gt; は文字列の一部として指定されていない限り、新しい行を追加しません。</target>
        </trans-unit>
        <trans-unit id="80688e6bfe64112d0b40126d6899beb59a720d8b" translate="yes" xml:space="preserve">
          <source>Unlike all other expanions, variable expansion also happens in double quoted strings. Inside double quotes (&lt;code&gt;&quot;these&quot;&lt;/code&gt;), variables will always expand to exactly one argument. If they are empty or undefined, it will result in an empty string. If they have one element, they'll expand to that element. If they have more than that, the elements will be joined with spaces.</source>
          <target state="translated">他のすべての展開とは異なり、変数展開は二重引用符付き文字列でも行われます。二重引用符（ &lt;code&gt;&quot;these&quot;&lt;/code&gt; ）内では、変数は常に1つの引数に展開されます。空または未定義の場合は、空の文字列になります。要素が1つある場合は、その要素に展開されます。それ以上の場合、要素はスペースで結合されます。</target>
        </trans-unit>
        <trans-unit id="ae2292eead056d06d02e28adb305ab1fa7a4ec35" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not have aliases or special prompt syntax. Functions take their place.</source>
          <target state="translated">他のシェルとは異なり、 &lt;code&gt;fish&lt;/code&gt; にはエイリアスや特別なプロンプト構文はありません。関数が代わりになります。</target>
        </trans-unit>
        <trans-unit id="081f5baca42ff8efaa02caf11115f980ca88911b" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not have an export command. Instead, a variable is exported via an option to &lt;code&gt;set&lt;/code&gt;, either &lt;code&gt;--export&lt;/code&gt; or just &lt;code&gt;-x&lt;/code&gt;.</source>
          <target state="translated">他のシェルとは異なり、 &lt;code&gt;fish&lt;/code&gt; にはエクスポートコマンドがありません。代わりに、変数は &lt;code&gt;--export&lt;/code&gt; または &lt;code&gt;-x&lt;/code&gt; のいずれかを &lt;code&gt;set&lt;/code&gt; するオプションを介してエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="eee0d0201f0eeaf8c0900eea9c927bb9f91321d9" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; has no dedicated syntax for setting variables. Instead it has an ordinary command: &lt;code&gt;set&lt;/code&gt;, which takes a variable name, and then its value.</source>
          <target state="translated">他のシェルとは異なり、 &lt;code&gt;fish&lt;/code&gt; には変数を設定するための専用の構文はありません。代わりに、通常のコマンドである &lt;code&gt;set&lt;/code&gt; があり、変数名とその値を受け取ります。</target>
        </trans-unit>
        <trans-unit id="a37e511dd2f26fdeffb3863f66e1a1c929cfac6a" translate="yes" xml:space="preserve">
          <source>Unlike other shells, &lt;code&gt;fish&lt;/code&gt; stores the exit status of the last command in &lt;code&gt;$status&lt;/code&gt; instead of &lt;code&gt;$?&lt;/code&gt;.</source>
          <target state="translated">他のシェルとは異なり、 &lt;code&gt;fish&lt;/code&gt; は最後のコマンドの終了ステータスを &lt;code&gt;$?&lt;/code&gt; ではなく &lt;code&gt;$status&lt;/code&gt; に保存します。。</target>
        </trans-unit>
        <trans-unit id="3af21d9e6a82afb93e7644e0365cdc2669f846f5" translate="yes" xml:space="preserve">
          <source>Unlike other shells, fish does not split command substitutions on any whitespace (like spaces or tabs), only newlines. This can be an issue with commands like &lt;code&gt;pkg-config&lt;/code&gt; that print what is meant to be multiple arguments on a single line. To split it on spaces too, use &lt;code&gt;string split&lt;/code&gt;.</source>
          <target state="translated">他のシェルとは異なり、fishは空白（タブやタブなど）のコマンド置換を分割せず、改行だけを分割します。これは、 &lt;code&gt;pkg-config&lt;/code&gt; のようなコマンドで、1行に複数の引数となるものを出力する場合の問題である可能性があります。スペースでも分割するには、 &lt;code&gt;string split&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="51633ed047475ca6ce896f07a0b3e652915476f4" translate="yes" xml:space="preserve">
          <source>Unlike other shells, fish splits command substitutions only on newlines, not spaces or tabs or the characters in $IFS.</source>
          <target state="translated">他のシェルとは異なり、fish は、スペースやタブ、$IFS の文字ではなく、改行のみでコマンドの置換を行います。</target>
        </trans-unit>
        <trans-unit id="2e36f8ffbac36ebebd737db0d45fea3f73bea9ee" translate="yes" xml:space="preserve">
          <source>Unlike other shells, there is no prompt variable like PS1. To display your prompt, &lt;code&gt;fish&lt;/code&gt; executes a function with the name &lt;code&gt;fish_prompt&lt;/code&gt;, and its output is used as the prompt.</source>
          <target state="translated">他のシェルとは異なり、PS1のようなプロンプト変数はありません。プロンプトを表示するために、 &lt;code&gt;fish&lt;/code&gt; は &lt;code&gt;fish_prompt&lt;/code&gt; という名前の関数を実行し、その出力がプロンプトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="dd1f16e81556a309c131d3f6b2ba87b84eb31d62" translate="yes" xml:space="preserve">
          <source>Unlike other shells, variables are not further split after substitution:</source>
          <target state="translated">他のシェルとは異なり、代入後に変数がさらに分割されることはありません。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="4df13ec4234f96a6f1f82fccdde77669b4c4b95c" translate="yes" xml:space="preserve">
          <source>Usage Notes</source>
          <target state="translated">使用上の注意</target>
        </trans-unit>
        <trans-unit id="d74b204180b301da11db45838e08032a0d957c03" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; to conditionally execute code, based on the exit status of a command.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;else if&lt;/code&gt; 、および &lt;code&gt;else&lt;/code&gt; を使用して、コマンドの終了ステータスに基づいて条件付きでコードを実行します。</target>
        </trans-unit>
        <trans-unit id="eb181080b44029a3622b4ef5a70c42d2deefdef1" translate="yes" xml:space="preserve">
          <source>Use one of the following switches to specify which resource limit to set or report:</source>
          <target state="translated">次のいずれかのスイッチを使用して、設定またはレポートするリソース制限を指定します。</target>
        </trans-unit>
        <trans-unit id="454bd477b983f01843d0ef8db935e66528a0a530" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;commands#fish_update_completions&quot;&gt;&lt;code&gt;fish_update_completions&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;a href=&quot;commands#fish_update_completions&quot;&gt; &lt;code&gt;fish_update_completions&lt;/code&gt; &lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="173607f929222a6b2423c5f7cb2482dcefe3fd4d" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;commands#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; command:</source>
          <target state="translated">&lt;a href=&quot;commands#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="a070d11e8f9357b2f82f012cf1cbf197f82d8186" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;$status&lt;/code&gt; variable. This replaces the &lt;code&gt;$?&lt;/code&gt; variable used in some other shells.</source>
          <target state="translated">&lt;code&gt;$status&lt;/code&gt; 変数を使用します。これは &lt;code&gt;$?&lt;/code&gt; 置き換えますか？他のいくつかのシェルで使用される変数。</target>
        </trans-unit>
        <trans-unit id="31c238ddde1e3a389d384b0e3b72354aef7e4403" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;env&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="0411e393ae78c9f8172fc0b2dbacdfcc91e4286c" translate="yes" xml:space="preserve">
          <source>Use the web configuration tool, &lt;a href=&quot;commands#fish_config&quot;&gt;&lt;code&gt;fish_config&lt;/code&gt;&lt;/a&gt;, or alter the &lt;a href=&quot;index#variables-color&quot;&gt;&lt;code&gt;fish_color&lt;/code&gt; family of environment variables&lt;/a&gt;.</source>
          <target state="translated">Web構成ツール&lt;a href=&quot;commands#fish_config&quot;&gt; &lt;code&gt;fish_config&lt;/code&gt; を&lt;/a&gt;使用するか&lt;a href=&quot;index#variables-color&quot;&gt;、環境変数の&lt;/a&gt; &lt;code&gt;fish_color&lt;/code&gt; ファミリーを変更します。</target>
        </trans-unit>
        <trans-unit id="60f35ccc6241ede38ff1ff41aa11e4d625890b21" translate="yes" xml:space="preserve">
          <source>Use them without a leading &lt;code&gt;$&lt;/code&gt; - &lt;code&gt;pi - 3&lt;/code&gt; should be about 0.</source>
          <target state="translated">招くことなく、それらを使用してください &lt;code&gt;$&lt;/code&gt; - &lt;code&gt;pi - 3&lt;/code&gt; 0であるべきです。</target>
        </trans-unit>
        <trans-unit id="0cae9ed3f91cf8ab384b29a4865d0861615ac352" translate="yes" xml:space="preserve">
          <source>Useful functions for writing completions</source>
          <target state="translated">書きかけの補完に便利な機能</target>
        </trans-unit>
        <trans-unit id="da533743f0159eea920a315a90c8751cf23609aa" translate="yes" xml:space="preserve">
          <source>User initialization, usually in &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable, and accessible as &lt;code&gt;$__fish_config_dir&lt;/code&gt;).</source>
          <target state="translated">ユーザーの初期化。通常は &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; （ &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 環境変数によって制御され、 &lt;code&gt;$__fish_config_dir&lt;/code&gt; としてアクセス可能）。</target>
        </trans-unit>
        <trans-unit id="7ab03bad0e4c29694da24c66d0dfd6218d876cd9" translate="yes" xml:space="preserve">
          <source>Using another read history file</source>
          <target state="translated">別の読み取り履歴ファイルを使用する</target>
        </trans-unit>
        <trans-unit id="b73b7dbea87b71c6a8e64d7b592b0efded7f191c" translate="yes" xml:space="preserve">
          <source>Using the &lt;em&gt;normal&lt;/em&gt; keyword will reset both background and foreground colors to whatever is the default for the terminal.</source>
          <target state="translated">&lt;em&gt;normal&lt;/em&gt;キーワードを使用すると、背景色と前景色の両方が端末のデフォルトにリセットされます。</target>
        </trans-unit>
        <trans-unit id="01391f93ace379e5306ef34014cfa60be33aafe9" translate="yes" xml:space="preserve">
          <source>Using the &lt;em&gt;normal&lt;/em&gt; keyword will reset foreground, background, and all formatting back to default.</source>
          <target state="translated">&lt;em&gt;normal&lt;/em&gt;キーワードを使用すると、フォアグラウンド、バックグラウンド、およびすべてのフォーマットがデフォルトにリセットされます。</target>
        </trans-unit>
        <trans-unit id="f3b2ac121de4ce08e07778437bf30ed6cd6b55da" translate="yes" xml:space="preserve">
          <source>Using this command involves passing two sets of arguments separated by &lt;code&gt;--&lt;/code&gt;. The first set consists of one or more option specifications (&lt;code&gt;OPTION_SPEC&lt;/code&gt; above) and options that modify the behavior of &lt;code&gt;argparse&lt;/code&gt;. These must be listed before the &lt;code&gt;--&lt;/code&gt; argument. The second set are the arguments to be parsed in accordance with the option specifications. They occur after the &lt;code&gt;--&lt;/code&gt; argument and can be empty. More about this below but here is a simple example that might be used in a function named &lt;code&gt;my_function&lt;/code&gt;:</source>
          <target state="translated">このコマンドを使用するには、 &lt;code&gt;--&lt;/code&gt; 区切られた2つの引数セットを渡す必要があります。最初のセットは、1つ以上のオプション指定（上記の &lt;code&gt;OPTION_SPEC&lt;/code&gt; ）と &lt;code&gt;argparse&lt;/code&gt; の動作を変更するオプションで構成されています。これらは &lt;code&gt;--&lt;/code&gt; 引数の前にリストする必要があります。 2番目のセットは、オプションの指定に従って解析される引数です。それらは &lt;code&gt;--&lt;/code&gt; 引数の後に発生し、空にすることができます。これについては以下で詳しく説明しますが、 &lt;code&gt;my_function&lt;/code&gt; という名前の関数で使用できる簡単な例を次に示します。</target>
        </trans-unit>
        <trans-unit id="f09d5d78e534ac9eee0414d7d7a0fb24af84d370" translate="yes" xml:space="preserve">
          <source>Valid colors include:</source>
          <target state="translated">有効な色は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="95b8e49e0a4f7e7d23df31b6c1eedc2a79d60c67" translate="yes" xml:space="preserve">
          <source>Valid format specifiers are:</source>
          <target state="translated">有効な書式指定子は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="047ea2f72ce834a5cd86fc46331f14acbb3f9954" translate="yes" xml:space="preserve">
          <source>Variable expansion</source>
          <target state="translated">可変膨張</target>
        </trans-unit>
        <trans-unit id="e2eb91d2e9dd9d2efdc78a2c535e066657ae307e" translate="yes" xml:space="preserve">
          <source>Variable expansions</source>
          <target state="translated">変数展開</target>
        </trans-unit>
        <trans-unit id="69cd2e4d36065246c043d32da81f65b5ec76feab" translate="yes" xml:space="preserve">
          <source>Variable scope</source>
          <target state="translated">可変範囲</target>
        </trans-unit>
        <trans-unit id="f2ffbf1cf26a2aeca0a92264405ee06ceed33e13" translate="yes" xml:space="preserve">
          <source>Variable scope for functions</source>
          <target state="translated">機能の可変範囲</target>
        </trans-unit>
        <trans-unit id="d3800988cc67ea9f9ae70495ad31314d7a633d64" translate="yes" xml:space="preserve">
          <source>Variable substitution also occurs in double quotes, but not single quotes:</source>
          <target state="translated">変数の置換は二重引用符でも発生しますが、シングル引用符では発生しません。</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="dc55a791f0556b1e2c98faf060801c75b48b8e87" translate="yes" xml:space="preserve">
          <source>Variables can be explicitly set to be exported with the &lt;code&gt;-x&lt;/code&gt; or &lt;code&gt;--export&lt;/code&gt; switch, or not exported with the &lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--unexport&lt;/code&gt; switch. The exporting rules when creating or updating a variable are identical to the scoping rules for variables:</source>
          <target state="translated">変数は、 &lt;code&gt;-x&lt;/code&gt; または &lt;code&gt;--export&lt;/code&gt; スイッチでエクスポートするように明示的に設定することも、 &lt;code&gt;-u&lt;/code&gt; または &lt;code&gt;--unexport&lt;/code&gt; スイッチでエクスポートしないように設定することもできます。変数を作成または更新するときのエクスポート規則は、変数のスコープ規則と同じです。</target>
        </trans-unit>
        <trans-unit id="8caf7a3931edf651d5c0eb5b032760d30623081d" translate="yes" xml:space="preserve">
          <source>Variables can be explicitly set to be universal with the &lt;code&gt;-U&lt;/code&gt; or &lt;code&gt;--universal&lt;/code&gt; switch, global with the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--global&lt;/code&gt; switch, or local with the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; switch. The scoping rules when creating or updating a variable are:</source>
          <target state="translated">変数は、 &lt;code&gt;-U&lt;/code&gt; または &lt;code&gt;--universal&lt;/code&gt; スイッチを使用してユニバーサル、 &lt;code&gt;-g&lt;/code&gt; または &lt;code&gt;--global&lt;/code&gt; スイッチを使用してグローバル、 &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--local&lt;/code&gt; スイッチを使用してローカルに明示的に設定できます。変数を作成または更新するときのスコープ規則は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="866a24aa0e9eb8db8b30498e951c623e32e65a14" translate="yes" xml:space="preserve">
          <source>Variables can be marked or unmarked as PATH variables via the &lt;code&gt;--path&lt;/code&gt; and &lt;code&gt;--unpath&lt;/code&gt; options to &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">変数は、 &lt;code&gt;set&lt;/code&gt; する &lt;code&gt;--path&lt;/code&gt; および &lt;code&gt;--unpath&lt;/code&gt; オプションを介してPATH変数としてマークまたはマーク解除できます。</target>
        </trans-unit>
        <trans-unit id="81a1e4b50937d575e7941efe7d24b3e8887251ba" translate="yes" xml:space="preserve">
          <source>Variables can be used as indices for expansion of variables, like so:</source>
          <target state="translated">変数は、このように変数を展開する際の指標として使うことができます。</target>
        </trans-unit>
        <trans-unit id="d13d8872f2b85622ec05b4faa321ef701163466e" translate="yes" xml:space="preserve">
          <source>Variables for changing highlighting colors</source>
          <target state="translated">ハイライトの色を変更するための変数</target>
        </trans-unit>
        <trans-unit id="021a38b749711c430ab7b97416e1e7f42bc63ab2" translate="yes" xml:space="preserve">
          <source>Variables in fish can be exported. This means the variable will be inherited by any commands started by fish. It is convention that exported variables are in uppercase and unexported variables are in lowercase.</source>
          <target state="translated">fishの変数はエクスポートすることができます。これは、その変数が fish で起動されたコマンドによって継承されることを意味します。エクスポートされた変数は大文字で、エクスポートされていない変数は小文字で表示されるのが慣例です。</target>
        </trans-unit>
        <trans-unit id="8b7277f6927f4830af2060ea99b89d5f43313327" translate="yes" xml:space="preserve">
          <source>Variables may be explicitly set to either exported or not exported. When an exported variable goes out of scope, it is unexported.</source>
          <target state="translated">変数は、明示的にエクスポートされるか、エクスポートされないかを設定することができます。エクスポートされた変数がスコープ外になると、エクスポートされません。</target>
        </trans-unit>
        <trans-unit id="5daf675f51e0dc0a7ce5d91db9146d3208ab170c" translate="yes" xml:space="preserve">
          <source>Variables may be explicitly set to universal, global or local. Variables with the same name in different scopes will not be changed.</source>
          <target state="translated">変数は、明示的にユニバーサル、グローバル、ローカルのいずれかに設定することができます。異なるスコープ内の同じ名前の変数は変更されません。</target>
        </trans-unit>
        <trans-unit id="4a88384607868c891caaae0411d761359e4f6ef5" translate="yes" xml:space="preserve">
          <source>Variables whose name are in uppercase are generally exported to the commands started by fish, while those in lowercase are not exported (&lt;code&gt;CMD_DURATION&lt;/code&gt; is an exception, for historical reasons). This rule is not enforced by fish, but it is good coding practice to use casing to distinguish between exported and unexported variables. &lt;code&gt;fish&lt;/code&gt; also uses several variables internally. Such variables are prefixed with the string &lt;code&gt;__FISH&lt;/code&gt; or &lt;code&gt;__fish.&lt;/code&gt; These should never be used by the user. Changing their value may break fish.</source>
          <target state="translated">名前が大文字の変数は通常、fishで開始されたコマンドにエクスポートされますが、小文字の変数はエクスポートされません（ &lt;code&gt;CMD_DURATION&lt;/code&gt; は歴史的な理由で例外です）。このルールは魚には適用されませんが、大文字と小文字を使用して、エクスポートされた変数とエクスポートされていない変数を区別することをお勧めします。 &lt;code&gt;fish&lt;/code&gt; は内部的にいくつかの変数も使用します。このような変数には、文字列 &lt;code&gt;__FISH&lt;/code&gt; または &lt;code&gt;__fish.&lt;/code&gt; が前に付けられます。これらはユーザーが使用することはできません。それらの値を変更すると、魚が壊れる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8de6cda0a76daf29c82a8e5cb8b2ed185cd03414" translate="yes" xml:space="preserve">
          <source>Vi mode allows for the use of Vi-like commands at the prompt. Initially, &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; is active. &lt;b&gt;Escape&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-command&quot;&gt;command mode&lt;/a&gt;. The commands available in command, insert and visual mode are described below. Vi mode shares &lt;a href=&quot;#shared-binds&quot;&gt;some bindings&lt;/a&gt; with &lt;a href=&quot;#emacs-mode&quot;&gt;Emacs mode&lt;/a&gt;.</source>
          <target state="translated">Viモードでは、プロンプトでViのようなコマンドを使用できます。最初は、&lt;a href=&quot;#vi-mode-insert&quot;&gt;挿入モード&lt;/a&gt;がアクティブです。&lt;b&gt;エスケープ&lt;/b&gt;は&lt;a href=&quot;#vi-mode-command&quot;&gt;コマンドモードに&lt;/a&gt;入ります。コマンド、挿入、ビジュアルモードで使用できるコマンドを以下に説明します。 Viモードは、&lt;a href=&quot;#shared-binds&quot;&gt;いくつかのバインディング&lt;/a&gt;を&lt;a href=&quot;#emacs-mode&quot;&gt;Emacsモード&lt;/a&gt;と共有します。</target>
        </trans-unit>
        <trans-unit id="fc7edfc16e4d70682dbbf7a6226979a31fd0ad3e" translate="yes" xml:space="preserve">
          <source>Vi mode commands</source>
          <target state="translated">バイコマンドモード</target>
        </trans-unit>
        <trans-unit id="5fb895569dd30157f331b4727bbce633510ff8ba" translate="yes" xml:space="preserve">
          <source>Visual mode</source>
          <target state="translated">ビジュアルモード</target>
        </trans-unit>
        <trans-unit id="31e1f6a5be94b9a7630dae992d9a626fc08b6ea1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--arguments&lt;/code&gt; is specified in conjunction with long, short, or old style options, the specified arguments are only used as completions when attempting to complete an argument for any of the specified options. If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--arguments&lt;/code&gt; is specified without any long, short, or old style options, the specified arguments are used when completing any argument to the command (except when completing an option argument that was specified with &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--require-parameter&lt;/code&gt;).</source>
          <target state="translated">ときに &lt;code&gt;-a&lt;/code&gt; または &lt;code&gt;--arguments&lt;/code&gt; が長い、短い、または古いスタイルのオプションと一緒に指定された指定されたオプションのいずれかの引数を完了しようとしたときに、指定した引数は唯一の補完として使用されています。場合 &lt;code&gt;-a&lt;/code&gt; または &lt;code&gt;--arguments&lt;/code&gt; が任意の長い、短い、または古いスタイルのオプションなしで指定されたコマンドに任意の引数を完了したときに、指定した引数が指定されましたオプションの引数完了したときを除き、（使用されている &lt;code&gt;-r&lt;/code&gt; または &lt;code&gt;--require-parameter&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2505ca259992c20f2e115bd87371ef8405dc9f79" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;COMMAND&lt;/code&gt; is a shellscript command, it is a good practice to put the actual code into a &lt;a href=&quot;#function&quot;&gt;function&lt;/a&gt; and simply bind to the function name. This way it becomes significantly easier to test the function while editing, and the result is usually more readable as well.</source>
          <target state="translated">&lt;code&gt;COMMAND&lt;/code&gt; がshellscriptコマンドの場合、実際のコードを&lt;a href=&quot;#function&quot;&gt;関数&lt;/a&gt;に入れて、単に関数名にバインドすることをお勧めします。このようにすると、編集中に関数をテストするのが非常に簡単になり、結果も通常より読みやすくなります。</target>
        </trans-unit>
        <trans-unit id="0b61f14b6442d9d89b8d8fa699d95bbd93af2c25" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fish&lt;/code&gt; encounters a command, it attempts to autoload a function for that command, by looking for a file with the name of that command in &lt;code&gt;~/.config/fish/functions/&lt;/code&gt;.</source>
          <target state="translated">とき &lt;code&gt;fish&lt;/code&gt; コマンドに遭遇し、それが中にそのコマンドの名前を持つファイルを探すことで、そのコマンドの機能を自動ロードしようとする &lt;code&gt;~/.config/fish/functions/&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="80ac01474d96293d4e91964bb2b3037356d135af" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;read&lt;/code&gt; reaches the end-of-file (EOF) instead of the terminator, the exit status is set to 1. Otherwise, it is set to 0.</source>
          <target state="translated">場合 &lt;code&gt;read&lt;/code&gt; エンド・オブ・ファイル（EOF）に達する代わりターミネーターの、終了ステータスは、それ以外の場合は1に設定され、それが0に設定されています。</target>
        </trans-unit>
        <trans-unit id="f91db4fb609ae3c10e05da51ef90890379f33f5d" translate="yes" xml:space="preserve">
          <source>When a command lookup fails</source>
          <target state="translated">コマンドの検索に失敗した場合</target>
        </trans-unit>
        <trans-unit id="a64df52b82b6680cee5d07a9157923c1c477f30d" translate="yes" xml:space="preserve">
          <source>When a process or job exits</source>
          <target state="translated">プロセスやジョブが終了した場合</target>
        </trans-unit>
        <trans-unit id="1b00bfa449d40b6151effb4cc0facd22af7b0736" translate="yes" xml:space="preserve">
          <source>When a signal is delivered</source>
          <target state="translated">信号が配信された場合</target>
        </trans-unit>
        <trans-unit id="3f06f0c49199bffd6092463385d2eaaf34e91888" translate="yes" xml:space="preserve">
          <source>When all arguments are valid job specifiers, bg will background all matching jobs that exist.</source>
          <target state="translated">すべての引数が有効なジョブ指定子である場合、bgは存在するすべてのマッチするジョブをバックグラウンドにします。</target>
        </trans-unit>
        <trans-unit id="24bda0993bf1f284e0377d7559e36d7befb31f8a" translate="yes" xml:space="preserve">
          <source>When an argument for a program is given on the commandline, it undergoes the process of parameter expansion before it is sent on to the command. Parameter expansion is a powerful mechanism that allows you to expand the parameter in various ways, including performing wildcard matching on files, inserting the value of a shell variable into the parameter or even using the output of another command as a parameter list.</source>
          <target state="translated">プログラムの引数がコマンドラインで与えられると、それがコマンドに送信される前にパラメータ展開のプロセスを経ます。パラメータ展開は強力なメカニズムで、ファイルのワイルドカードマッチングを行ったり、シェル変数の値をパラメータに挿入したり、他のコマンドの出力をパラメータリストとして使用したりと、様々な方法でパラメータを展開することができます。</target>
        </trans-unit>
        <trans-unit id="51d4ef16c4e522527f31c576578d19308f006fec" translate="yes" xml:space="preserve">
          <source>When an array is exported as an environment variable, it is either space or colon delimited, depending on whether it is a path variable:</source>
          <target state="translated">配列が環境変数としてエクスポートされた場合、パス変数であるかどうかに応じて、スペースまたはコロンで区切られます。</target>
        </trans-unit>
        <trans-unit id="083625467bc7bf4cd25dc54b2e5d0f68812dc076" translate="yes" xml:space="preserve">
          <source>When at least one of the arguments isn't a valid job specifier (i.e. PID), &lt;code&gt;bg&lt;/code&gt; will print an error without backgrounding anything.</source>
          <target state="translated">引数の少なくとも1つが有効なジョブ指定子（つまりPID）ではない場合、 &lt;code&gt;bg&lt;/code&gt; は何もバックグラウンドせずにエラーを出力します。</target>
        </trans-unit>
        <trans-unit id="a37e1f3259f6cdbb079115ac56119f8c19560a48" translate="yes" xml:space="preserve">
          <source>When calling a function, all current local variables temporarily disappear. This shadowing of the local scope is needed since the variable namespace would become cluttered, making it very easy to accidentally overwrite variables from another function.</source>
          <target state="translated">関数を呼び出すと、現在のすべてのローカル変数が一時的に消えます。このようなローカルスコープのシャドウイングは、変数の名前空間が乱雑になり、他の関数からの変数を誤って上書きしてしまう可能性があるために必要となります。</target>
        </trans-unit>
        <trans-unit id="15eb860b17777aaad36a975023e7f241c10c68cb" translate="yes" xml:space="preserve">
          <source>When combining multiple parameter expansions, expansions are performed in the following order:</source>
          <target state="translated">複数のパラメータ展開を組み合わせる場合は、以下の順序で展開を行います。</target>
        </trans-unit>
        <trans-unit id="8f30248e782192746e24f20cbd06bf81e9f75b5d" translate="yes" xml:space="preserve">
          <source>When defining a new function in fish, it is possible to make it into an event handler, i.e. a function that is automatically run when a specific event takes place. Events that can trigger a handler currently are:</source>
          <target state="translated">fishで新しい関数を定義する際に、それをイベントハンドラ、つまり特定のイベントが発生したときに自動的に実行される関数にすることができます。現在、ハンドラのトリガーとなるイベントは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c06a76c81fd354d96a91e2098cf33daa64c9b259" translate="yes" xml:space="preserve">
          <source>When erasing completions, it is possible to either erase all completions for a specific command by specifying &lt;code&gt;complete -c COMMAND -e&lt;/code&gt;, or by specifying a specific completion option to delete by specifying either a long, short or old style option.</source>
          <target state="translated">補完を消去する場合、 &lt;code&gt;complete -c COMMAND -e&lt;/code&gt; を指定して特定のコマンドのすべての補完を消去するか、長い、短い、または古いスタイルのオプションを指定して削除する特定の補完オプションを指定することができます。</target>
        </trans-unit>
        <trans-unit id="71562657ada1f73f1b73dd5722b7668b06f50100" translate="yes" xml:space="preserve">
          <source>When fish waits for input, it will display a prompt by evaluating the &lt;code&gt;fish_prompt&lt;/code&gt; and &lt;code&gt;fish_right_prompt&lt;/code&gt; functions. The output of the former is displayed on the left and the latter's output on the right side of the terminal. The output of &lt;code&gt;fish_mode_prompt&lt;/code&gt; will be prepended on the left, though the default function only does this when in &lt;a href=&quot;index#vi-mode&quot;&gt;vi-mode&lt;/a&gt;.</source>
          <target state="translated">入力のために魚を待つ場合は、評価することによってプロンプトが表示され &lt;code&gt;fish_prompt&lt;/code&gt; と &lt;code&gt;fish_right_prompt&lt;/code&gt; 機能します。前者の出力は端末の左側に表示され、後者の出力は端末の右側に表示されます。 &lt;code&gt;fish_mode_prompt&lt;/code&gt; の出力は左側に付加されますが、デフォルトの関数は&lt;a href=&quot;index#vi-mode&quot;&gt;vi-modeの&lt;/a&gt;場合にのみこれを行います。</target>
        </trans-unit>
        <trans-unit id="607879a486f64cd0da9cb1a6673f02fc3b5d2fec" translate="yes" xml:space="preserve">
          <source>When in vi-mode, the &lt;a href=&quot;fish_mode_prompt&quot;&gt;&lt;code&gt;fish_mode_prompt&lt;/code&gt;&lt;/a&gt; function will display a mode indicator to the left of the prompt. The &lt;code&gt;fish_vi_cursor&lt;/code&gt; function will be used to change the cursor's shape depending on the mode in supported terminals. To disable this feature, override it with an empty function. To display the mode elsewhere (like in your right prompt), use the output of the &lt;code&gt;fish_default_mode_prompt&lt;/code&gt; function.</source>
          <target state="translated">viモードの場合、&lt;a href=&quot;fish_mode_prompt&quot;&gt; &lt;code&gt;fish_mode_prompt&lt;/code&gt; &lt;/a&gt;関数は、モードインジケーターをプロンプトの左側に表示します。 &lt;code&gt;fish_vi_cursor&lt;/code&gt; の機能がサポートされる端末モードに応じてカーソルの形状を変更するために使用されるであろう。この機能を無効にするには、空の関数でオーバーライドします。他の場所（右のプロンプトなど）でモードを表示するには、 &lt;code&gt;fish_default_mode_prompt&lt;/code&gt; 関数の出力を使用します。</target>
        </trans-unit>
        <trans-unit id="33b46dcb16afbaec6d4436b9d1a5f44e784219a0" translate="yes" xml:space="preserve">
          <source>When multiple &lt;code&gt;COMMAND&lt;/code&gt;s are provided, they are all run in the specified order when the key is pressed. Note that special input functions cannot be combined with ordinary shell script commands. The commands must be entirely a sequence of special input functions (from &lt;code&gt;bind -f&lt;/code&gt;) or all shell script commands (i.e., valid fish script).</source>
          <target state="translated">複数の &lt;code&gt;COMMAND&lt;/code&gt; が提供されている場合、キーが押されると、それらはすべて指定された順序で実行されます。特別な入力関数を通常のシェルスクリプトコマンドと組み合わせることはできません。コマンドは、完全に一連の特別な入力関数（ &lt;code&gt;bind -f&lt;/code&gt; から）またはすべてのシェルスクリプトコマンド（つまり、有効なfishスクリプト）でなければなりません。</target>
        </trans-unit>
        <trans-unit id="60402cb8f58632c68a26ced09b11fbf6589f7279" translate="yes" xml:space="preserve">
          <source>When running in this mode, &lt;code&gt;read&lt;/code&gt; does not split the input in any way and text is redirected to standard output without any further processing or manipulation.</source>
          <target state="translated">このモードで実行している場合、 &lt;code&gt;read&lt;/code&gt; は入力を分割せず、テキストはそれ以上の処理や操作なしで標準出力にリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="efd94d1e11c389f3a2b8042a383ed84dc4be3715" translate="yes" xml:space="preserve">
          <source>When the cursor is over a parenthesis or a quote, &lt;code&gt;fish&lt;/code&gt; also highlights its matching quote or parenthesis.</source>
          <target state="translated">カーソルが括弧または引用符の上にある場合、 &lt;code&gt;fish&lt;/code&gt; は対応する引用符または括弧も強調表示します。</target>
        </trans-unit>
        <trans-unit id="01a87969e30ad0e39174183d05f883882efbc023" translate="yes" xml:space="preserve">
          <source>When the prompt is about to be shown</source>
          <target state="translated">プロンプトが表示されようとしている場合</target>
        </trans-unit>
        <trans-unit id="84fb666d00ac44965366d223053ffc07523cfa5c" translate="yes" xml:space="preserve">
          <source>When the value of a variable is updated</source>
          <target state="translated">変数の値が更新された場合</target>
        </trans-unit>
        <trans-unit id="5149e58fb1af17e2b78bfc79105f3521233c2ff0" translate="yes" xml:space="preserve">
          <source>When two unquoted expansions directly follow each other, you need to watch out for expansions that expand to nothing. This includes undefined variables and empty lists, but also command substitutions with no output. See the &lt;a href=&quot;#cartesian-product&quot;&gt;cartesian product&lt;/a&gt; section for more information.</source>
          <target state="translated">引用符で囲まれていない2つの拡張が互いに直接続く場合、何も拡張しない拡張に注意する必要があります。これには、未定義の変数と空のリストだけでなく、出力のないコマンド置換も含まれます。詳細については、&lt;a href=&quot;#cartesian-product&quot;&gt;デカルト積の&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="611390b4e7bff2a4f48823eeb19ea95b7d5c6f8e" translate="yes" xml:space="preserve">
          <source>When using a variable as an argument for a test operator you should almost always enclose it in double-quotes. There are only two situations it is safe to omit the quote marks. The first is when the argument is a literal string with no whitespace or other characters special to the shell (e.g., semicolon). For example, &lt;code&gt;test -b /my/file&lt;/code&gt;. The second is using a variable that expands to exactly one element including if that element is the empty string (e.g., &amp;lsquo;set x &amp;rsquo;'&lt;code&gt;). If the variable is not set, set but with no value, or set to more than one value you must enclose it in double-quotes. For example,&lt;/code&gt;test &quot;$x&quot; = &quot;$y&quot;&lt;code&gt;. Since it is always safe to enclose variables in double-quotes when used as&lt;/code&gt;test` arguments that is the recommended practice.</source>
          <target state="translated">変数をテスト演算子の引数として使用する場合、ほとんどの場合、変数を二重引用符で囲みます。引用符を省略しても安全な状況は2つだけです。 1つ目は、引数が空白やシェル固有のその他の文字（セミコロンなど）を含まないリテラル文字列の場合です。たとえば、 &lt;code&gt;test -b /my/file&lt;/code&gt; 。 2つ目は、要素が空の文字列（ 'set x' 'など &lt;code&gt;). If the variable is not set, set but with no value, or set to more than one value you must enclose it in double-quotes. For example,&lt;/code&gt; かどうかを含め、1つの要素に展開する変数を使用する方法です。変数が設定されていない、設定されているが値がない、または複数の値に設定されている場合は、二重引用符で囲む必要があります。たとえば、 &quot;$ x&quot; = &quot;$ y&quot;をテストし &lt;code&gt;. Since it is always safe to enclose variables in double-quotes when used as&lt;/code&gt; テスト `引数として使用する場合、変数を二重引用符で囲むことが常に安全であるため、これは推奨される方法です。</target>
        </trans-unit>
        <trans-unit id="423a828b908fd75e9cc37f539daeca01ccaa2ca1" translate="yes" xml:space="preserve">
          <source>When using most virtual terminals, it is possible to set the message displayed in the titlebar of the terminal window. This can be done automatically in fish by defining the &lt;code&gt;fish_title&lt;/code&gt; function. The &lt;code&gt;fish_title&lt;/code&gt; function is executed before and after a new command is executed or put into the foreground and the output is used as a titlebar message. The &lt;code&gt;status current-command&lt;/code&gt; builtin will always return the name of the job to be put into the foreground (or 'fish' if control is returning to the shell) when the &lt;code&gt;fish_prompt&lt;/code&gt; function is called. The first argument to fish_title will contain the most recently executed foreground command as a string, starting with fish 2.2.</source>
          <target state="translated">ほとんどの仮想端末を使用する場合、端末ウィンドウのタイトルバーに表示されるメッセージを設定できます。これは、 &lt;code&gt;fish_title&lt;/code&gt; 関数を定義することにより、魚で自動的に行うことができます。 &lt;code&gt;fish_title&lt;/code&gt; 機能は前にして、新しいコマンドを実行またはフォアグラウンドに入れ、出力はタイトルバーメッセージとして使用された後に実行されます。 &lt;code&gt;status current-command&lt;/code&gt; 組み込みは、常にとき（制御がシェルに戻っている場合や「魚」）ジョブの名前がフォアグラウンドに入れなければ戻ります &lt;code&gt;fish_prompt&lt;/code&gt; の関数が呼び出されます。 fish_titleの最初の引数には、fish 2.2で始まる、最近実行されたフォアグラウンドコマンドが文字列として含まれます。</target>
        </trans-unit>
        <trans-unit id="8174e8c2267c766e6e1589bb88a15f5f751e9e9e" translate="yes" xml:space="preserve">
          <source>When using this feature together with array brackets, the brackets will always match the innermost &lt;code&gt;$&lt;/code&gt; dereference. Thus, &lt;code&gt;$$foo[5]&lt;/code&gt; will always mean the fifth element of the &lt;code&gt;foo&lt;/code&gt; variable should be dereferenced, not the fifth element of the doubly dereferenced variable &lt;code&gt;foo&lt;/code&gt;. The latter can instead be expressed as &lt;code&gt;$$foo[1][5]&lt;/code&gt;.</source>
          <target state="translated">この機能を配列ブラケットと一緒に使用すると、ブラケットは常に最も内側の &lt;code&gt;$&lt;/code&gt; 参照解除と一致します。したがって、 &lt;code&gt;$$foo[5]&lt;/code&gt; は常に、二重に逆参照された変数 &lt;code&gt;foo&lt;/code&gt; の 5番目の要素ではなく、 &lt;code&gt;foo&lt;/code&gt; 変数の5番目の要素を逆参照する必要があることを意味します。後者は、代わりに &lt;code&gt;$$foo[1][5]&lt;/code&gt; として表すことができます。</target>
        </trans-unit>
        <trans-unit id="8fc413625f2d8700615beffe00723d3e066b2931" translate="yes" xml:space="preserve">
          <source>When you start a job in &lt;code&gt;fish&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt; itself will pause, and give control of the terminal to the program just started. Sometimes, you want to continue using the commandline, and have the job run in the background. To create a background job, append an &amp;amp; (ampersand) to your command. This will tell fish to run the job in the background. Background jobs are very useful when running programs that have a graphical user interface.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; でジョブを開始すると、 &lt;code&gt;fish&lt;/code&gt; 自体が一時停止し、開始したプログラムに端末の制御権を与えます。コマンドラインの使用を継続し、ジョブをバックグラウンドで実行したい場合があります。バックグラウンドジョブを作成するには、コマンドに＆（アンパサンド）を追加します。これはバックグラウンドでジョブを実行するように魚に伝えます。バックグラウンドジョブは、グラフィカルユーザーインターフェイスを持つプログラムを実行するときに非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d15c25511fa0415df6ab124fbf33636f92131f5e" translate="yes" xml:space="preserve">
          <source>Whenever a process exits, an exit status is returned to the program that started it (usually the shell). This exit status is an integer number, which tells the calling application how the execution of the command went. In general, a zero exit status means that the command executed without problem, but a non-zero exit status means there was some form of problem.</source>
          <target state="translated">プロセスが終了するたびに、そのプロセスを起動したプログラム(通常はシェル)に終了ステータスが返されます。この終了ステータスは整数値で、コマンドの実行がどのように行われたかを呼び出し元のアプリケーションに伝えます。一般的に、終了ステータスが 0 の場合、コマンドが問題なく実行されたことを意味しますが、0 以外の場合は何らかの問題があったことを意味します。</target>
        </trans-unit>
        <trans-unit id="37e6818d213a036baa5f294f8cb49db4fd377178" translate="yes" xml:space="preserve">
          <source>Where can I find extra tools for fish?</source>
          <target state="translated">魚のための余分な道具はどこにありますか?</target>
        </trans-unit>
        <trans-unit id="079e201e9c4dd5d183821d76711a9a3942fe2c10" translate="yes" xml:space="preserve">
          <source>Where to put completions</source>
          <target state="translated">完成品を置く場所</target>
        </trans-unit>
        <trans-unit id="218d0fd933c5736f11bfc14c23fd644e6997fe12" translate="yes" xml:space="preserve">
          <source>While loops:</source>
          <target state="translated">ループしながら</target>
        </trans-unit>
        <trans-unit id="c3d957621152f2cbd082b0e140ac7a547272ab27" translate="yes" xml:space="preserve">
          <source>While this will check if &lt;code&gt;hasargs&lt;/code&gt; was run with the &lt;code&gt;-q&lt;/code&gt; option:</source>
          <target state="translated">これにより、 &lt;code&gt;-q&lt;/code&gt; オプションを指定して &lt;code&gt;hasargs&lt;/code&gt; が実行されたかどうかが確認されます。</target>
        </trans-unit>
        <trans-unit id="3da2ee8c41b2531ccfd9706e7ed4059f9b39b539" translate="yes" xml:space="preserve">
          <source>Why doesn't `set -Ux` (exported universal variables) seem to work?</source>
          <target state="translated">なぜ `set -Ux` (エクスポートされたユニバーサル変数)が動作しないように見えるのですか?</target>
        </trans-unit>
        <trans-unit id="1e505f696e4f6b7e0b5ed829f453debff8a4a2e5" translate="yes" xml:space="preserve">
          <source>Why doesn't history substitution (&quot;!$&quot; etc.) work?</source>
          <target state="translated">履歴置換(&quot;!$&quot;など)が効かないのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="567d5b34994eb0320286730214d3dd777982c9ad" translate="yes" xml:space="preserve">
          <source>Why fish?</source>
          <target state="translated">なぜ魚なのか?</target>
        </trans-unit>
        <trans-unit id="59af40d4a351e635fdbe369d7b681d20a590a23a" translate="yes" xml:space="preserve">
          <source>Wildcard expansion</source>
          <target state="translated">ワイルドカード拡張</target>
        </trans-unit>
        <trans-unit id="59047ee36a3c7c05f567f4b4586b76d8d7e3171d" translate="yes" xml:space="preserve">
          <source>Wildcard matches are sorted case insensitively. When sorting matches containing numbers, consecutive digits are considered to be one element, so that the strings '1' '5' and '12' would be sorted in the order given.</source>
          <target state="translated">ワイルドカードマッチは、大文字小文字を区別せずにソートされます。数字を含むマッチをソートする場合、連続した数字は1つの要素とみなされ、文字列 '1' '5' および '12' は指定された順序でソートされます。</target>
        </trans-unit>
        <trans-unit id="f4138f22664d37f96c263052adeb723fdfd7248c" translate="yes" xml:space="preserve">
          <source>Wildcards</source>
          <target state="translated">Wildcards</target>
        </trans-unit>
        <trans-unit id="278d17b7409d744f59bd2b428221655321a32bee" translate="yes" xml:space="preserve">
          <source>Will print &quot;Number of bananas in my pocket: 42&quot;, &lt;em&gt;without&lt;/em&gt; a newline.</source>
          <target state="translated">「ポケットの中のバナナの数：42」を改行&lt;em&gt;なしで&lt;/em&gt;印刷します。</target>
        </trans-unit>
        <trans-unit id="6d27bda981ba079ffce589e22866c0442facccba" translate="yes" xml:space="preserve">
          <source>Will print &quot;flounder fish&quot; (separated with a tab character), followed by a newline character. This is useful for writing completions, as fish expects completion scripts to output the option followed by the description, separated with a tab character.</source>
          <target state="translated">(タブ文字で区切って)&quot;ヒラメの魚 &quot;と表示し、その後に改行文字を付けます。これは補完を書く際に便利です。 fishは補完スクリプトがオプションの後に説明文をタブ文字で区切って出力することを期待しているからです。</target>
        </trans-unit>
        <trans-unit id="d95f3955e4775af2ffe313a32a1e156b2312cd4e" translate="yes" xml:space="preserve">
          <source>Will remove the file 'cumbersome filename.txt', while</source>
          <target state="translated">ファイル 'cumbersome filename.txt' を削除します。</target>
        </trans-unit>
        <trans-unit id="4044b3d5cb068502c25839df6244b97ef13bfd98" translate="yes" xml:space="preserve">
          <source>With &quot;-c&quot;, it clears the directory stack instead.</source>
          <target state="translated">c &quot;を使うと、代わりにディレクトリスタックをクリアします。</target>
        </trans-unit>
        <trans-unit id="b3f596135ed991ca7f5a3bdc45b29b16283c1e4c" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;CMD&lt;/code&gt; specified, the command line buffer is erased and replaced with the contents of &lt;code&gt;CMD&lt;/code&gt;.</source>
          <target state="translated">では &lt;code&gt;CMD&lt;/code&gt; が指定され、コマンド・ライン・バッファは消去との内容に置き換えられ &lt;code&gt;CMD&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d3a11523e7c7f53a50eb3f5c7145415a6eeb3a11" translate="yes" xml:space="preserve">
          <source>With both variable names and values provided, &lt;code&gt;set&lt;/code&gt; assigns the variable &lt;code&gt;VARIABLE_NAME&lt;/code&gt; the values &lt;code&gt;VALUES...&lt;/code&gt;.</source>
          <target state="translated">変数名と値の両方を指定して、 &lt;code&gt;set&lt;/code&gt; は変数 &lt;code&gt;VARIABLE_NAME&lt;/code&gt; に値 &lt;code&gt;VALUES...&lt;/code&gt; 割り当てます。</target>
        </trans-unit>
        <trans-unit id="e3a3bdf1969b9c7b04d35c628b64777d5949f26c" translate="yes" xml:space="preserve">
          <source>With no arguments, &lt;code&gt;status&lt;/code&gt; displays a summary of the current login and job control status of the shell.</source>
          <target state="translated">引数がない場合、 &lt;code&gt;status&lt;/code&gt; は現在のログインの概要とシェルのジョブ制御ステータスを表示します。</target>
        </trans-unit>
        <trans-unit id="ff0f6870a82d5cfaf6592bfe8160d96a5dcb7c33" translate="yes" xml:space="preserve">
          <source>With no options, &lt;code&gt;type&lt;/code&gt; indicates how each &lt;code&gt;NAME&lt;/code&gt; would be interpreted if used as a command name.</source>
          <target state="translated">オプションがない場合、 &lt;code&gt;type&lt;/code&gt; は、各 &lt;code&gt;NAME&lt;/code&gt; をコマンド名として使用した場合の解釈方法を示します。</target>
        </trans-unit>
        <trans-unit id="324faf3e252b5aa14d470f7a0e509c22b0211914" translate="yes" xml:space="preserve">
          <source>With no parameters, &lt;code&gt;commandline&lt;/code&gt; returns the current value of the command line.</source>
          <target state="translated">パラメーターを指定しない場合、 &lt;code&gt;commandline&lt;/code&gt; はコマンドラインの現在の値を返します。</target>
        </trans-unit>
        <trans-unit id="32e508ff64591c08b5059eaf16992b090526d942" translate="yes" xml:space="preserve">
          <source>With no parameters, the current file creation mode mask is printed as an octal number.</source>
          <target state="translated">パラメータを指定しない場合、現在のファイル作成モードのマスクは8進数で表示されます。</target>
        </trans-unit>
        <trans-unit id="550c07a797cef93c6dca0c250695a3ee3bc836c8" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--line&lt;/code&gt; option, &lt;code&gt;read&lt;/code&gt; reads a line of input from standard input into each provided variable, stopping when each variable has been filled. The line is not tokenized.</source>
          <target state="translated">&lt;code&gt;--line&lt;/code&gt; オプション、 &lt;code&gt;read&lt;/code&gt; 、各変数が満たされたときに停止する、それぞれ設け変数に標準入力からの入力の行を読み取ります。行はトークン化されません。</target>
        </trans-unit>
        <trans-unit id="7eb04c1870bbf00dde53d943ea601f02f6aade6f" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;-s&lt;/code&gt; option, &lt;code&gt;command&lt;/code&gt; treats every argument as a separate command to look up and sets the exit status to 0 if any of the specified commands were found, or 1 if no commands could be found. Additionally passing a &lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; option prevents any paths from being printed, like &lt;code&gt;type -q&lt;/code&gt;, for testing only the exit status.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; オプション、 &lt;code&gt;command&lt;/code&gt; 扱いは、別々のコマンドとして、すべての引数は、ルックアップし、何のコマンドが見つからなかった場合は指定されたコマンドのいずれかが見つかった場合は0、または1の終了ステータスを設定します。さらに、 &lt;code&gt;-q&lt;/code&gt; または &lt;code&gt;--quiet&lt;/code&gt; オプションを渡すと、 &lt;code&gt;type -q&lt;/code&gt; ように、終了ステータスのみをテストするためにパスが出力されなくなります。</target>
        </trans-unit>
        <trans-unit id="bc8e1321c10d803c389c5b4efea6741544b19b13" translate="yes" xml:space="preserve">
          <source>Without arguments, it exchanges the top two directories in the stack.</source>
          <target state="translated">引数がなければ、スタック内の上位2つのディレクトリを交換します。</target>
        </trans-unit>
        <trans-unit id="1afcecbf9280e75078efa249fd70e1ac68834d9a" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;--line&lt;/code&gt; option, &lt;code&gt;read&lt;/code&gt; reads a single line of input from standard input, breaks it into tokens, and then assigns one token to each variable specified in &lt;code&gt;VARIABLES&lt;/code&gt;. If there are more tokens than variables, the complete remainder is assigned to the last variable.</source>
          <target state="translated">&lt;code&gt;--line&lt;/code&gt; オプションを指定しない場合、 &lt;code&gt;read&lt;/code&gt; は標準入力から1行の入力を読み取り、それをトークンに分解してから、 &lt;code&gt;VARIABLES&lt;/code&gt; で指定された各変数に1つのトークンを割り当てます。変数よりもトークンが多い場合、残りのすべてが最後の変数に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="81356a4d6a0a4a4ef7b6e1d572238cf1fdea2fd0" translate="yes" xml:space="preserve">
          <source>Writing your own completions</source>
          <target state="translated">自分の完成形を書く</target>
        </trans-unit>
        <trans-unit id="7683cbf9a7b5e61b6d059df3889d47cb3365f802" translate="yes" xml:space="preserve">
          <source>You can access individual elements with square brackets. Indexing starts at 1 from the beginning, and -1 from the end:</source>
          <target state="translated">角括弧で個々の要素にアクセスすることができます。インデックスは先頭から1、末尾から-1で始まります。</target>
        </trans-unit>
        <trans-unit id="22411b5ee78ea15c18bd052b59931e2ba02abfc9" translate="yes" xml:space="preserve">
          <source>You can also access ranges of elements, known as &quot;slices:&quot;</source>
          <target state="translated">また、&quot;slices:&quot;として知られる要素の範囲にアクセスすることもできます。</target>
        </trans-unit>
        <trans-unit id="183a967967d542440e171619570f33c53983ac70" translate="yes" xml:space="preserve">
          <source>You can also declare a local variable in a block:</source>
          <target state="translated">ブロック内でローカル変数を宣言することもできます。</target>
        </trans-unit>
        <trans-unit id="c6736676dcee399ddf959a5129dcc47bfa72a06e" translate="yes" xml:space="preserve">
          <source>You can also use the Web configuration tool, &lt;a href=&quot;commands#fish_config&quot;&gt;&lt;code&gt;fish_config&lt;/code&gt;&lt;/a&gt;, to preview and choose from a gallery of sample prompts.</source>
          <target state="translated">Web構成ツール&lt;a href=&quot;commands#fish_config&quot;&gt; &lt;code&gt;fish_config&lt;/code&gt; を&lt;/a&gt;使用して、サンプルプロンプトのギャラリーからプレビューして選択することもできます。</target>
        </trans-unit>
        <trans-unit id="bdd92db017317ccc2cf69c4b1d28391056cb80e8" translate="yes" xml:space="preserve">
          <source>You can append (or prepend) to a list by setting the list to itself, with some additional arguments. Here we append /usr/local/bin to $PATH:</source>
          <target state="translated">リストを自分自身に設定し、いくつかの引数を追加することで、リストに追加(または前置)することができます。ここでは、/usr/local/bin を $PATH に追加しています。</target>
        </trans-unit>
        <trans-unit id="1bb567fe25bb6a2caba3279e69807e978438ad28" translate="yes" xml:space="preserve">
          <source>You can change &lt;code&gt;fish_history&lt;/code&gt; at any time (by using &lt;code&gt;set -x fish_history &quot;session_name&quot;&lt;/code&gt;) and it will take effect right away. If you set it to &lt;code&gt;&quot;default&quot;&lt;/code&gt;, it will use the default session name (which is &lt;code&gt;&quot;fish&quot;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;fish_history&lt;/code&gt; はいつでも（ &lt;code&gt;set -x fish_history &quot;session_name&quot;&lt;/code&gt; を使用して）変更でき、すぐに有効になります。 &lt;code&gt;&quot;default&quot;&lt;/code&gt; に設定すると、デフォルトのセッション名（ &lt;code&gt;&quot;fish&quot;&lt;/code&gt; ）が使用されます。</target>
        </trans-unit>
        <trans-unit id="271d995eee26c277a042d3d479fbc5c44abb9d62" translate="yes" xml:space="preserve">
          <source>You can change these key bindings using the &lt;a href=&quot;commands#bind&quot;&gt;bind&lt;/a&gt; builtin command.</source>
          <target state="translated">&lt;a href=&quot;commands#bind&quot;&gt;bind&lt;/a&gt;組み込みコマンドを使用して、これらのキーバインディングを変更できます。</target>
        </trans-unit>
        <trans-unit id="0fbf59159cacd6194c5d1afee388fe6f9b2deba5" translate="yes" xml:space="preserve">
          <source>You can choose among some sample prompts by running &lt;code&gt;fish_config prompt&lt;/code&gt;. &lt;code&gt;fish&lt;/code&gt; also supports RPROMPT through &lt;code&gt;fish_right_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_config prompt&lt;/code&gt; を実行すると、いくつかのサンプルプロンプトから選択できます。 &lt;code&gt;fish&lt;/code&gt; は、fish_right_promptを通じて &lt;code&gt;fish_right_prompt&lt;/code&gt; もサポートします。</target>
        </trans-unit>
        <trans-unit id="29e07248f927a66e3445195c42cee5dad321cbe4" translate="yes" xml:space="preserve">
          <source>You can create abbreviations interactively and they will be visible to other fish sessions if you use the &lt;code&gt;-U&lt;/code&gt; or &lt;code&gt;--universal&lt;/code&gt; flag or don't explicitly specify the scope and the abbreviation isn't already defined with global scope. If you want it to be visible only to the current shell use the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--global&lt;/code&gt; flag.</source>
          <target state="translated">インタラクティブに略語を作成できます。略称を使用すると、他の魚のセッションに表示されます。 &lt;code&gt;-U&lt;/code&gt; または &lt;code&gt;--universal&lt;/code&gt; フラグを明示的または範囲を指定しないと略語がすでにグローバルスコープで定義されていません。現在のシェルのみに表示したい場合は、 &lt;code&gt;-g&lt;/code&gt; または &lt;code&gt;--global&lt;/code&gt; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="b6e4c148ce6b5b609986d145a9a7da7ea9b88d15" translate="yes" xml:space="preserve">
          <source>You can define your own prompt:</source>
          <target state="translated">独自のプロンプトを定義することができます。</target>
        </trans-unit>
        <trans-unit id="f61c13e82446efa061ca7d17091f411ee83d8761" translate="yes" xml:space="preserve">
          <source>You can do so directly in &lt;code&gt;config.fish&lt;/code&gt;, like you might do in other shells with &lt;code&gt;.profile&lt;/code&gt;. See &lt;a href=&quot;#path_example&quot;&gt;this example&lt;/a&gt;.</source>
          <target state="translated">あなたは直接それを行うことができます &lt;code&gt;config.fish&lt;/code&gt; &lt;code&gt;.profile&lt;/code&gt; を使用して他のシェルで行う場合と同様に config.fishで。&lt;a href=&quot;#path_example&quot;&gt;この例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="70c6c6dd6e2cc9d671b6c22ccdb9354bc3fcc555" translate="yes" xml:space="preserve">
          <source>You can erase a variable with &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; または &lt;code&gt;--erase&lt;/code&gt; を使用して変数を消去できます</target>
        </trans-unit>
        <trans-unit id="5bad3c32a8d2a38fb8952af3582045099d1f7782" translate="yes" xml:space="preserve">
          <source>You can include a literal space in an argument with a backslash, or by using single or double quotes:</source>
          <target state="translated">リテラルスペースを引数に含めるには、バックスラッシュを使用するか、シングルクォーテーションやダブルクォーテーションを使用します。</target>
        </trans-unit>
        <trans-unit id="cf2d7abc4fc8709fbd1e843b233396517d8ddaca" translate="yes" xml:space="preserve">
          <source>You can include multiple wildcards:</source>
          <target state="translated">複数のワイルドカードを含めることができます。</target>
        </trans-unit>
        <trans-unit id="f83e4dd668d0923f31b885de0832e79602a1616d" translate="yes" xml:space="preserve">
          <source>You can iterate over a list (or a slice) with a for loop:</source>
          <target state="translated">forループを使ってリスト(またはスライス)を反復処理することができます。</target>
        </trans-unit>
        <trans-unit id="582ba3e59d153a759cfa8931cfe3daa07df07cb8" translate="yes" xml:space="preserve">
          <source>You can list the names of all functions with the &lt;code&gt;functions&lt;/code&gt; keyword (note the plural!). &lt;code&gt;fish&lt;/code&gt; starts out with a number of functions:</source>
          <target state="translated">すべての関数の名前を &lt;code&gt;functions&lt;/code&gt; キーワードでリストできます（複数形に注意してください！）。 &lt;code&gt;fish&lt;/code&gt; は多くの機能から始まります：</target>
        </trans-unit>
        <trans-unit id="cdbfa536e96ce4c5031503e10bf462df7b697afe" translate="yes" xml:space="preserve">
          <source>You can only specify one subcommand per invocation even if you use the flag form of the subcommand.</source>
          <target state="translated">サブコマンドのフラグ形式を使用しても、1回の呼び出しにつき1つのサブコマンドしか指定できません。</target>
        </trans-unit>
        <trans-unit id="32cbb15c775d0a5c4bd4e986a03e5ca4d359b068" translate="yes" xml:space="preserve">
          <source>You can pipe between commands with the usual vertical bar:</source>
          <target state="translated">通常の縦棒でコマンド間をパイプすることができます。</target>
        </trans-unit>
        <trans-unit id="9d42fab7275c3711f78f4cc0e17430682558b418" translate="yes" xml:space="preserve">
          <source>You can see the current list of features via &lt;code&gt;status features&lt;/code&gt;:</source>
          <target state="translated">あなたは &lt;code&gt;status features&lt;/code&gt; を介して機能の現在のリストを見ることができます：</target>
        </trans-unit>
        <trans-unit id="d372da7b7b5d10683d41167afee54d800f912536" translate="yes" xml:space="preserve">
          <source>You can see the source for any function by passing its name to &lt;code&gt;functions&lt;/code&gt;:</source>
          <target state="translated">名前を渡すことにより、任意の関数のソースを表示できます &lt;code&gt;functions&lt;/code&gt; にます。</target>
        </trans-unit>
        <trans-unit id="119c7a997d5bdc2b60e626a0ba66e37ce06fb4d1" translate="yes" xml:space="preserve">
          <source>You can set the &lt;code&gt;fish_history&lt;/code&gt; variable to another name for the current shell session. The default value (when the variable is unset) is &lt;code&gt;fish&lt;/code&gt; which corresponds to &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt;. If you set it to e.g. &lt;code&gt;fun&lt;/code&gt;, the history would be written to &lt;code&gt;$XDG_DATA_HOME/fish/fun_history&lt;/code&gt;. An empty string means history will not be stored at all. This is similar to the private session features in web browsers.</source>
          <target state="translated">&lt;code&gt;fish_history&lt;/code&gt; 変数を現在のシェルセッションの別の名前に設定できます。デフォルト値（変数が設定されていない）である &lt;code&gt;fish&lt;/code&gt; にどの対応 &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; 。たとえば &lt;code&gt;fun&lt;/code&gt; に設定した場合、履歴は &lt;code&gt;$XDG_DATA_HOME/fish/fun_history&lt;/code&gt; ます。空の文字列は、履歴がまったく保存されないことを意味します。これは、Webブラウザーのプライベートセッション機能に似ています。</target>
        </trans-unit>
        <trans-unit id="805a6b59b4757ac95f6f000c9c60c72ef172664e" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt; for complex conditions. Even more complex control can be achieved with &lt;code&gt;while true&lt;/code&gt; containing a &lt;a href=&quot;#break&quot;&gt;break&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt;を複雑な条件に使用できます。さらに複雑な制御 &lt;code&gt;while true&lt;/code&gt; は、&lt;a href=&quot;#break&quot;&gt;休憩を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="36becbc0de8c6768b79b53bcf652c0ec7f0d05ab" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt; in the condition. See the second example below.</source>
          <target state="translated">あなたは使用することができます&lt;a href=&quot;#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;あるいは&lt;a href=&quot;#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt;状態で orを。以下の2番目の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="a29442c2c0cd9017469875929db91ad4d3e135db" translate="yes" xml:space="preserve">
          <source>You can use the following commands for this:</source>
          <target state="translated">これには以下のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="ae2c831ec8a49110729d78b946cea71b43a00858" translate="yes" xml:space="preserve">
          <source>You cannot create an alias to a function with the same name. Note that spaces need to be escaped in the call to &lt;code&gt;alias&lt;/code&gt; just like at the command line, &lt;em&gt;even inside quoted parts&lt;/em&gt;.</source>
          <target state="translated">同じ名前の関数のエイリアスを作成することはできません。&lt;em&gt;引用符で囲まれた部分内&lt;/em&gt;で&lt;em&gt;あっても&lt;/em&gt;、コマンドラインと同じように、 &lt;code&gt;alias&lt;/code&gt; の呼び出しではスペースをエスケープする必要があることに注意してください。&lt;em&gt;&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="ccdace8ac9f08512755f925735f08580088b949a" translate="yes" xml:space="preserve">
          <source>You don't need to use &lt;code&gt;--&lt;/code&gt; before the expression even if it begins with a minus sign which might otherwise be interpreted as an invalid option. If you do insert &lt;code&gt;--&lt;/code&gt; before the expression it will cause option scanning to stop just like for every other command and it won't be part of the expression.</source>
          <target state="translated">マイナス記号で始まっていても、式の前に &lt;code&gt;--&lt;/code&gt; を使用する必要はありません。マイナス記号がなければ、無効なオプションとして解釈される可能性があります。挿入する場合 &lt;code&gt;--&lt;/code&gt; すると、式の前に他のすべてのコマンドと同じようにオプションのスキャンが停止し、式の一部にはなりません。</target>
        </trans-unit>
        <trans-unit id="dff1182c8c84fa78c31ad7304aa236d391621f4d" translate="yes" xml:space="preserve">
          <source>You may be interested in the &lt;a href=&quot;commands#cdh&quot;&gt;&lt;code&gt;cdh&lt;/code&gt;&lt;/a&gt; command which provides a more intuitive way to navigate to recently visited directories.</source>
          <target state="translated">あなたは興味があるかもしれません &lt;a href=&quot;commands#cdh&quot;&gt; &lt;code&gt;cdh&lt;/code&gt; &lt;/a&gt;最近アクセスしたディレクトリに移動するためのより直感的な方法を提供する cdhコマンドに。</target>
        </trans-unit>
        <trans-unit id="f19456ce739912cdbaadf68c5288fc6b883036c4" translate="yes" xml:space="preserve">
          <source>You may need to adjust the above path to e.g. &lt;code&gt;/usr/bin/fish&lt;/code&gt;. Use the command &lt;code&gt;which fish&lt;/code&gt; if you are unsure of where fish is installed.</source>
          <target state="translated">上記のパスを &lt;code&gt;/usr/bin/fish&lt;/code&gt; な​​どに調整する必要があるかもしれません。 &lt;code&gt;which fish&lt;/code&gt; コマンドを使用します魚がインストールされている場所がわからない場合ます。</target>
        </trans-unit>
        <trans-unit id="f60f3dbd8379e7020fda94ce83302c2e10232183" translate="yes" xml:space="preserve">
          <source>You should not assume that only five lines will be written since we may add additional information to the output in the future.</source>
          <target state="translated">今後、出力に追加情報を加える可能性があるので、5行しか書かれていないと思ってはいけません。</target>
        </trans-unit>
        <trans-unit id="d00cc0aeee9d747695090dc15483badfdd7bb562" translate="yes" xml:space="preserve">
          <source>You should not consider &lt;code&gt;RANDOM&lt;/code&gt; cryptographically secure, or even statistically accurate.</source>
          <target state="translated">&lt;code&gt;RANDOM&lt;/code&gt; 考慮すべきではありません暗号的に安全である、統計的にも正確である。</target>
        </trans-unit>
        <trans-unit id="099d04689a14254d5c264e92a8949102945a2d8c" translate="yes" xml:space="preserve">
          <source>You will be greeted by the standard fish prompt, which means you are all set up and can start using fish:</source>
          <target state="translated">標準的な魚のプロンプトが表示されますので、すべての設定が完了し、魚を使用して開始することができます。</target>
        </trans-unit>
        <trans-unit id="daf44230d29581bbad655cd6db1bfaf7030ab520" translate="yes" xml:space="preserve">
          <source>You would then use it in place of &lt;code&gt;**&lt;/code&gt; like this, &lt;code&gt;my_prog (ff)&lt;/code&gt;, to pass only regular files in or below $PWD to &lt;code&gt;my_prog&lt;/code&gt;.</source>
          <target state="translated">次に、このような &lt;code&gt;my_prog (ff)&lt;/code&gt; などの &lt;code&gt;**&lt;/code&gt; の代わりに使用して、$ PWD以下の通常のファイルのみを &lt;code&gt;my_prog&lt;/code&gt; に渡します。ます。</target>
        </trans-unit>
        <trans-unit id="1c67de04c7033796c6c74cd4dd03c739078b5757" translate="yes" xml:space="preserve">
          <source>You'll quickly notice that &lt;code&gt;fish&lt;/code&gt; performs syntax highlighting as you type. Invalid commands are colored red by default:</source>
          <target state="translated">入力すると、 &lt;code&gt;fish&lt;/code&gt; が構文の強調表示を実行することがすぐにわかります。無効なコマンドはデフォルトで赤色になっています。</target>
        </trans-unit>
        <trans-unit id="0f1904a8c07ac4a095aa5e3b5df39a737f0d2b78" translate="yes" xml:space="preserve">
          <source>Zero is considered success, and non-zero is failure.</source>
          <target state="translated">ゼロは成功とされ、ゼロ以外は失敗とされています。</target>
        </trans-unit>
        <trans-unit id="b9bce8bc7cbd4cfc74af295dc63b50f294e0fb27" translate="yes" xml:space="preserve">
          <source>abbr</source>
          <target state="translated">abbr</target>
        </trans-unit>
        <trans-unit id="10c64ce9ed7a8c30b0b458cd0cea2f41104ed020" translate="yes" xml:space="preserve">
          <source>abbr - manage fish abbreviations</source>
          <target state="translated">abbr-魚の略語を管理する</target>
        </trans-unit>
        <trans-unit id="682cee3cbd526832d0e8acb7535f6a975ddc96ee" translate="yes" xml:space="preserve">
          <source>add &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;/usr/local/bin/fish&lt;/code&gt; を追加します &lt;code&gt;/etc/shells&lt;/code&gt; にをます</target>
        </trans-unit>
        <trans-unit id="cdb6fdbe91faa53a7c573c80b7c18108c73c0480" translate="yes" xml:space="preserve">
          <source>alias</source>
          <target state="translated">alias</target>
        </trans-unit>
        <trans-unit id="42a06677b30252b0d37eaddcaf33c622b85d08b4" translate="yes" xml:space="preserve">
          <source>alias - create a function</source>
          <target state="translated">alias-関数を作成する</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="4ed9a78158a5eed2a098e3c46a71c9215bfe4153" translate="yes" xml:space="preserve">
          <source>and - conditionally execute a command</source>
          <target state="translated">と-条件付きでコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="e750ee7c231477c66be61075d1aafe532a03970f" translate="yes" xml:space="preserve">
          <source>argparse</source>
          <target state="translated">argparse</target>
        </trans-unit>
        <trans-unit id="b3ef1b3ad484c3f1815d35a2d7273ba16d3fc004" translate="yes" xml:space="preserve">
          <source>argparse - parse options passed to a fish script or function</source>
          <target state="translated">argparse-フィッシュスクリプトや関数に渡されたオプションを解析する</target>
        </trans-unit>
        <trans-unit id="8cbd0a74c6efdb39943b290bb82c9d6b2a6ee5a6" translate="yes" xml:space="preserve">
          <source>begin</source>
          <target state="translated">begin</target>
        </trans-unit>
        <trans-unit id="d849f3a2774d5c3d8a5b753d01c1b98a89678580" translate="yes" xml:space="preserve">
          <source>begin - start a new block of code</source>
          <target state="translated">begin-新しいコードブロックを開始する</target>
        </trans-unit>
        <trans-unit id="80f87c8847da6c872ce2fc9fec0a98a73ebc578d" translate="yes" xml:space="preserve">
          <source>bg</source>
          <target state="translated">bg</target>
        </trans-unit>
        <trans-unit id="eae83d584c6eeb26f5e657e85aaec8ab661a533a" translate="yes" xml:space="preserve">
          <source>bg - send jobs to background</source>
          <target state="translated">bg-バックグラウンドにジョブを送信する</target>
        </trans-unit>
        <trans-unit id="6bdd4db977b0f96aaf3bff2e4300153c648ca382" translate="yes" xml:space="preserve">
          <source>bind</source>
          <target state="translated">bind</target>
        </trans-unit>
        <trans-unit id="4d74207ae06bd7de23e2fc590a893d97bc45179b" translate="yes" xml:space="preserve">
          <source>bind - handle fish key bindings</source>
          <target state="translated">bind-ハンドルフィッシュキーバインディング</target>
        </trans-unit>
        <trans-unit id="0214b4b355d11ca8f2ce45a968c264651bdfbf83" translate="yes" xml:space="preserve">
          <source>block</source>
          <target state="translated">block</target>
        </trans-unit>
        <trans-unit id="eaad10d066a35f607308cf97548f180f4b9b872e" translate="yes" xml:space="preserve">
          <source>block - temporarily block delivery of events</source>
          <target state="translated">block-イベントの配信を一時的にブロックする</target>
        </trans-unit>
        <trans-unit id="4f9cac8dbc4c67a388b8379dcc126c90c7c5e72a" translate="yes" xml:space="preserve">
          <source>break</source>
          <target state="translated">break</target>
        </trans-unit>
        <trans-unit id="175a258d07e2daaf5e3b38a9da4f646e868f7dd3" translate="yes" xml:space="preserve">
          <source>break - stop the current inner loop</source>
          <target state="translated">break-現在の内部ループを停止します</target>
        </trans-unit>
        <trans-unit id="5c0a31c48cda57c40dc61b785110d76593834ffd" translate="yes" xml:space="preserve">
          <source>breakpoint</source>
          <target state="translated">breakpoint</target>
        </trans-unit>
        <trans-unit id="2922ddae1fa1032ce7131127668d51bf87c71f7e" translate="yes" xml:space="preserve">
          <source>breakpoint - Launch debug mode</source>
          <target state="translated">breakpoint-デバッグモードを起動します。</target>
        </trans-unit>
        <trans-unit id="748a336cc88c03ccb07ed5f5073d18624731b8b5" translate="yes" xml:space="preserve">
          <source>builtin</source>
          <target state="translated">builtin</target>
        </trans-unit>
        <trans-unit id="fa7c75bcd8e77b2860336c73b4baf210585bbf7f" translate="yes" xml:space="preserve">
          <source>builtin - run a builtin command</source>
          <target state="translated">builtin-ビルドインコマンドを実行する</target>
        </trans-unit>
        <trans-unit id="6406510c31e0c9925733c7f21414bf6428333ed2" translate="yes" xml:space="preserve">
          <source>case</source>
          <target state="translated">case</target>
        </trans-unit>
        <trans-unit id="ecbc5351327db65d354a1a7d358353471d69609a" translate="yes" xml:space="preserve">
          <source>case - conditionally execute a block of commands</source>
          <target state="translated">case-条件付きでコマンドブロックを実行する</target>
        </trans-unit>
        <trans-unit id="034778198a045c1ed80be271cdd029b76874f6fc" translate="yes" xml:space="preserve">
          <source>cd</source>
          <target state="translated">cd</target>
        </trans-unit>
        <trans-unit id="fb525966ad485c5f8afa455838828ee40af068d5" translate="yes" xml:space="preserve">
          <source>cd - change directory</source>
          <target state="translated">cd-ディレクトリを変更</target>
        </trans-unit>
        <trans-unit id="2aba119bde64723a0961a18ff7adcf76a9d24d8e" translate="yes" xml:space="preserve">
          <source>cdh</source>
          <target state="translated">cdh</target>
        </trans-unit>
        <trans-unit id="1be63f271a472b0d15f170811e4caf9972df88bb" translate="yes" xml:space="preserve">
          <source>cdh - change to a recently visited directory</source>
          <target state="translated">cdh-最近訪問したディレクトリに変更</target>
        </trans-unit>
        <trans-unit id="0f8e267ee0d75f9ceaa9ed7d8f182c646d73ba65" translate="yes" xml:space="preserve">
          <source>change your default shell with &lt;code&gt;chsh -s&lt;/code&gt; to &lt;code&gt;/usr/local/bin/fish&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;chsh -s&lt;/code&gt; を使用してデフォルトのシェルを次のように変更します。 &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; に</target>
        </trans-unit>
        <trans-unit id="1925f793093581c47a5c6b2e414506b1cbae280d" translate="yes" xml:space="preserve">
          <source>command</source>
          <target state="translated">command</target>
        </trans-unit>
        <trans-unit id="919a6f5c6816036eaffc9cdb1996a015acf915b7" translate="yes" xml:space="preserve">
          <source>command - run a program</source>
          <target state="translated">コマンド-プログラムを実行する</target>
        </trans-unit>
        <trans-unit id="92df95e63882bc424c741ba3025a247583b8fe73" translate="yes" xml:space="preserve">
          <source>commandline</source>
          <target state="translated">commandline</target>
        </trans-unit>
        <trans-unit id="bcf389e72583580fd4176da0b6e9a5409c5718c2" translate="yes" xml:space="preserve">
          <source>commandline - set or get the current command line buffer</source>
          <target state="translated">commandline-現在のコマンドラインバッファを設定または取得する</target>
        </trans-unit>
        <trans-unit id="0737c22d3bfae812339732d14d8c7dbd6dc4e09c" translate="yes" xml:space="preserve">
          <source>complete</source>
          <target state="translated">complete</target>
        </trans-unit>
        <trans-unit id="b1b90f2b3d099b292abc0be14142c4ee0c55e03b" translate="yes" xml:space="preserve">
          <source>complete - edit command specific tab-completions</source>
          <target state="translated">complete-コマンド固有のタブコンプリートを編集する</target>
        </trans-unit>
        <trans-unit id="caeb909ae4ff4ee25a0ff0d476946ed256f2aee1" translate="yes" xml:space="preserve">
          <source>contains</source>
          <target state="translated">contains</target>
        </trans-unit>
        <trans-unit id="904d39bd3ceac4decbc721c45054ed1c4b2c7fdb" translate="yes" xml:space="preserve">
          <source>contains - test if a word is present in a list</source>
          <target state="translated">contains-単語がリストに含まれているかどうかをテストする</target>
        </trans-unit>
        <trans-unit id="eee0bbba4ff92adbeb038a77df0466d660f15716" translate="yes" xml:space="preserve">
          <source>continue</source>
          <target state="translated">continue</target>
        </trans-unit>
        <trans-unit id="3dcfedcccb8d23e7c6644e8aaa4e93528f238e86" translate="yes" xml:space="preserve">
          <source>continue - skip the remainder of the current iteration of the current inner loop</source>
          <target state="translated">continue-現在の内輪の反復の残りをスキップします.</target>
        </trans-unit>
        <trans-unit id="ee9f38e186ba06f57b7b74d7e626b94e13ce2556" translate="yes" xml:space="preserve">
          <source>count</source>
          <target state="translated">count</target>
        </trans-unit>
        <trans-unit id="f9695c7d17d44b126e144bc1e4fd9b6da6439c0b" translate="yes" xml:space="preserve">
          <source>count - count the number of elements of an array</source>
          <target state="translated">count-配列の要素数を数えます.</target>
        </trans-unit>
        <trans-unit id="3e96454870cb43583623cd6fd2ede60817e93fe7" translate="yes" xml:space="preserve">
          <source>dirh</source>
          <target state="translated">dirh</target>
        </trans-unit>
        <trans-unit id="0c8c1d4815753a4a62148f6267504e711947a5a6" translate="yes" xml:space="preserve">
          <source>dirh - print directory history</source>
          <target state="translated">dirh-ディレクトリの履歴を表示する</target>
        </trans-unit>
        <trans-unit id="4d47d2db541c41663c8c0bc2b1795aa88c209d4d" translate="yes" xml:space="preserve">
          <source>dirs</source>
          <target state="translated">dirs</target>
        </trans-unit>
        <trans-unit id="d78b6ac49770a83c7c282f2a24eb1a12e41b5ef0" translate="yes" xml:space="preserve">
          <source>dirs - print directory stack</source>
          <target state="translated">dirs-ディレクトリスタックを表示する</target>
        </trans-unit>
        <trans-unit id="9b66695fe2c105488ed57178ad21457b4a8f4d6d" translate="yes" xml:space="preserve">
          <source>disown</source>
          <target state="translated">disown</target>
        </trans-unit>
        <trans-unit id="58603ac8c3e3cdf452a31e52281bae95d4d75e55" translate="yes" xml:space="preserve">
          <source>disown - remove a process from the list of jobs</source>
          <target state="translated">disown-ジョブのリストからプロセスを削除する</target>
        </trans-unit>
        <trans-unit id="b2d21e771d9f86865c5eff193663574dd1796c8f" translate="yes" xml:space="preserve">
          <source>echo</source>
          <target state="translated">echo</target>
        </trans-unit>
        <trans-unit id="3da22d7a242ac6222e2c07ce546b9e4c6dd38dd1" translate="yes" xml:space="preserve">
          <source>echo - display a line of text</source>
          <target state="translated">echo-テキストの行を表示する</target>
        </trans-unit>
        <trans-unit id="ae050f5b7fb8d383d62139276081853b47e7a03e" translate="yes" xml:space="preserve">
          <source>else</source>
          <target state="translated">else</target>
        </trans-unit>
        <trans-unit id="b25854c62e2574da9e59aea193dfc09880feb717" translate="yes" xml:space="preserve">
          <source>else - execute command if a condition is not met</source>
          <target state="translated">else-条件が満たされていない場合にコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="2e96e89125f4c1aef797410a4bfdb32c0632ef0c" translate="yes" xml:space="preserve">
          <source>emit</source>
          <target state="translated">emit</target>
        </trans-unit>
        <trans-unit id="bf4da1905dbefff0b501f9e43f751404b18c712b" translate="yes" xml:space="preserve">
          <source>emit - Emit a generic event</source>
          <target state="translated">emit-汎用イベントを送信する</target>
        </trans-unit>
        <trans-unit id="7a92f3d26362d6557d5701de77a63a01df61e57f" translate="yes" xml:space="preserve">
          <source>end</source>
          <target state="translated">end</target>
        </trans-unit>
        <trans-unit id="786c7d3478f2ca103089368c16db1f80f0f9c7cb" translate="yes" xml:space="preserve">
          <source>end - end a block of commands.</source>
          <target state="translated">end-コマンドのブロックを終了します。</target>
        </trans-unit>
        <trans-unit id="822bc13e2d55b402eb4233cb23c9d414a7a03bc1" translate="yes" xml:space="preserve">
          <source>eval</source>
          <target state="translated">eval</target>
        </trans-unit>
        <trans-unit id="20a23908f3b688d4985f1907e61de8afef1f3a09" translate="yes" xml:space="preserve">
          <source>eval - evaluate the specified commands</source>
          <target state="translated">eval-指定したコマンドを評価する</target>
        </trans-unit>
        <trans-unit id="be62562725d30894d1641b11d5106adde66f0d79" translate="yes" xml:space="preserve">
          <source>exec</source>
          <target state="translated">exec</target>
        </trans-unit>
        <trans-unit id="766cd545cfc1fa64a7d4796ba64c27dc06bebbfc" translate="yes" xml:space="preserve">
          <source>exec - execute command in current process</source>
          <target state="translated">exec-現在のプロセスでコマンドを実行する</target>
        </trans-unit>
        <trans-unit id="de3ac21778e51de199438300e1a9f816c618d33a" translate="yes" xml:space="preserve">
          <source>exit</source>
          <target state="translated">exit</target>
        </trans-unit>
        <trans-unit id="471719c1d7f23f2fb831651b4dd0b2d996e8d915" translate="yes" xml:space="preserve">
          <source>exit - exit the shell</source>
          <target state="translated">exit-シェルを終了する</target>
        </trans-unit>
        <trans-unit id="7cb6efb98ba5972a9b5090dc2e517fe14d12cb04" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="translated">false</target>
        </trans-unit>
        <trans-unit id="6f9d12a083b81d8fbe0b94c63c69b42fb349ddbb" translate="yes" xml:space="preserve">
          <source>false - return an unsuccessful result</source>
          <target state="translated">false-失敗した結果を返します。</target>
        </trans-unit>
        <trans-unit id="72f77e84ba0149b2af1051f1318128dccf60ab60" translate="yes" xml:space="preserve">
          <source>fg</source>
          <target state="translated">fg</target>
        </trans-unit>
        <trans-unit id="d57e75549526546c15d5c9fb8e07df72a8c58c81" translate="yes" xml:space="preserve">
          <source>fg - bring job to foreground</source>
          <target state="translated">fg-ジョブを前景に持ってくる</target>
        </trans-unit>
        <trans-unit id="64875fcccaac069fcb3e0e201e7d5b9166641608" translate="yes" xml:space="preserve">
          <source>fish</source>
          <target state="translated">fish</target>
        </trans-unit>
        <trans-unit id="72e0e125205009a2096ed8c57d1f27ec4b75c74b" translate="yes" xml:space="preserve">
          <source>fish - the friendly interactive shell</source>
          <target state="translated">魚-フレンドリーな対話型シェル</target>
        </trans-unit>
        <trans-unit id="55daf0fb67b0105e5fee42d2b43a9981fcc9b191" translate="yes" xml:space="preserve">
          <source>fish also supports &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;not&lt;/code&gt;. The first two are job modifiers and have lower precedence. Example usage:</source>
          <target state="translated">魚は &lt;code&gt;and&lt;/code&gt; 、 &lt;code&gt;or&lt;/code&gt; 、および &lt;code&gt;not&lt;/code&gt; もサポートします。最初の2つはジョブ修飾子であり、優先順位は低くなります。使用例：</target>
        </trans-unit>
        <trans-unit id="d0b6a9d36699331ac1f0bb6a1d6c28f0fee1e9d4" translate="yes" xml:space="preserve">
          <source>fish suggests commands as you type, based on command history, completions, and valid file paths. As you type commands, you will see a suggestion offered after the cursor, in a muted gray color (which can be changed with the &lt;code&gt;fish_color_autosuggestion&lt;/code&gt; variable).</source>
          <target state="translated">fishは、コマンド履歴、補完、有効なファイルパスに基づいて、入力時にコマンドを提案します。コマンドを入力すると、カーソルの後に提示される提案がミュートされた灰色で表示されます（これは &lt;code&gt;fish_color_autosuggestion&lt;/code&gt; で変更できます）変数でます）。</target>
        </trans-unit>
        <trans-unit id="68f36d0bf0f877357b61f16b465f75cb1a85b6d8" translate="yes" xml:space="preserve">
          <source>fish supports launching in private mode via &lt;code&gt;fish --private&lt;/code&gt; (or &lt;code&gt;fish -P&lt;/code&gt; for short). In private mode, old history is not available and any interactive commands you execute will not be appended to the global history file, making it useful both for avoiding inadvertently leaking personal information (e.g. for screencasts) and when dealing with sensitive information to prevent it being persisted to disk. You can query the global variable &lt;code&gt;fish_private_mode&lt;/code&gt; (&lt;code&gt;if set -q fish_private_mode ...&lt;/code&gt;) if you would like to respect the user's wish for privacy and alter the behavior of your own fish scripts.</source>
          <target state="translated">fishは &lt;code&gt;fish --private&lt;/code&gt; （または略して &lt;code&gt;fish -P&lt;/code&gt; ）を介したプライベートモードでの起動をサポートしています。プライベートモードでは、古い履歴は利用できず、実行するインタラクティブコマンドはグローバル履歴ファイルに追加されないため、不注意による個人情報の漏洩（スクリーンキャストなど）を回避する場合と、機密情報を処理して機密情報を扱う場合の両方に役立ちます。ディスクに永続化。ユーザーのプライバシーに対する希望を尊重し、独自のfishスクリプトの動作を変更したい &lt;code&gt;if set -q fish_private_mode ...&lt;/code&gt; は、グローバル変数 &lt;code&gt;fish_private_mode&lt;/code&gt; を照会できます（設定されている場合-q fish_private_mode ...）。</target>
        </trans-unit>
        <trans-unit id="0c4f6d7aed742643b6fbdc12202fe3db52010252" translate="yes" xml:space="preserve">
          <source>fish supports the familiar &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; to combine commands, and &lt;code&gt;!&lt;/code&gt; to negate them:</source>
          <target state="translated">魚はおなじみの &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; と &lt;code&gt;||&lt;/code&gt; をサポートしています コマンドを組み合わせる、および &lt;code&gt;!&lt;/code&gt; それらを否定する：</target>
        </trans-unit>
        <trans-unit id="18585084ed30bb889b3339262219e49ab2ae44bd" translate="yes" xml:space="preserve">
          <source>fish tutorial</source>
          <target state="translated">フィッシュチュートリアル</target>
        </trans-unit>
        <trans-unit id="55dedfb95373873760b0ed9625c82cb35531172a" translate="yes" xml:space="preserve">
          <source>fish waits for a period after receiving the escape character, to determine whether it is standalone or part of an escape sequence. While waiting, additional key presses make the escape key behave as a meta key. If no other key presses come in, it is handled as a standalone escape. The waiting period is set to 300 milliseconds (0.3 seconds) in the default key bindings and 10 milliseconds in the vi key bindings. It can be configured by setting the &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; variable to a value between 10 and 5000 ms. It is recommended that this be a universal variable that you set once from an interactive session.</source>
          <target state="translated">fishは、エスケープキャラクターを受け取った後、それがスタンドアロンであるかエスケープシーケンスの一部であるかを判断するために一定期間待機します。待機中に追加のキーを押すと、エスケープキーがメタキーとして動作します。他にキーが押されない場合は、スタンドアロンエスケープとして処理されます。待機期間は、デフォルトのキーバインディングでは300ミリ秒（0.3秒）、viキーバインディングでは10ミリ秒に設定されています。 &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; 変数を10〜5000ミリ秒の値に設定することで設定できます。これは、対話型セッションから一度設定したユニバーサル変数にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="baba6f248a72657be16047fe4da7199bc44ea8e3" translate="yes" xml:space="preserve">
          <source>fish_breakpoint_prompt</source>
          <target state="translated">fish_breakpoint_prompt</target>
        </trans-unit>
        <trans-unit id="d7bd245d8c242e03fae1578420c74d8093b0ee04" translate="yes" xml:space="preserve">
          <source>fish_breakpoint_prompt - define the appearance of the command line prompt when in the context of a `breakpoint` command</source>
          <target state="translated">fish_breakpoint_prompt-`breakpoint` コマンドのコンテキスト内でのコマンドラインプロンプトの外観を定義する</target>
        </trans-unit>
        <trans-unit id="5a3fc1d157b0191f6866ceecc3630a982089cde4" translate="yes" xml:space="preserve">
          <source>fish_config</source>
          <target state="translated">fish_config</target>
        </trans-unit>
        <trans-unit id="183a6fdb6a00d86295de833100112576b1cb4834" translate="yes" xml:space="preserve">
          <source>fish_config - start the web-based configuration interface</source>
          <target state="translated">fish_config-ウェブベースの設定インターフェースを起動する</target>
        </trans-unit>
        <trans-unit id="2397e0dc3855f2a5c3c894e107875e26a08a4480" translate="yes" xml:space="preserve">
          <source>fish_indent</source>
          <target state="translated">fish_indent</target>
        </trans-unit>
        <trans-unit id="c6e19f4ee30f4e23e4160409b9be9c8d16942cd4" translate="yes" xml:space="preserve">
          <source>fish_indent - indenter and prettifier</source>
          <target state="translated">fish_indent-圧子とプリティファイア</target>
        </trans-unit>
        <trans-unit id="127fb90e55ea67e053d705088a841052da6eef7c" translate="yes" xml:space="preserve">
          <source>fish_key_reader</source>
          <target state="translated">fish_key_reader</target>
        </trans-unit>
        <trans-unit id="69a0ebb11cb1a759ede45515c0024c4ec8c9ee18" translate="yes" xml:space="preserve">
          <source>fish_key_reader - explore what characters keyboard keys send</source>
          <target state="translated">fish_key_reader-キーボードのキーが送信する文字を調べる</target>
        </trans-unit>
        <trans-unit id="b07df081e3eda23a685e0d24569437ba4ab4a6ff" translate="yes" xml:space="preserve">
          <source>fish_mode_prompt</source>
          <target state="translated">fish_mode_prompt</target>
        </trans-unit>
        <trans-unit id="753b48a0cc344eee0593915eb34429a7626e167e" translate="yes" xml:space="preserve">
          <source>fish_mode_prompt - define the appearance of the mode indicator</source>
          <target state="translated">fish_mode_prompt-モードインジケータの外観を定義する</target>
        </trans-unit>
        <trans-unit id="3c9b15ad3294d2aa5aa52ac9e2632d2eae53e420" translate="yes" xml:space="preserve">
          <source>fish_opt</source>
          <target state="translated">fish_opt</target>
        </trans-unit>
        <trans-unit id="543365accaae619eee02dcae6dea132a363085b7" translate="yes" xml:space="preserve">
          <source>fish_opt - create an option spec for the argparse command</source>
          <target state="translated">fish_opt-argparse コマンドのオプション仕様を作成する</target>
        </trans-unit>
        <trans-unit id="6501c27fb0858cd3f54b84ab4f9f296d0dda8c9c" translate="yes" xml:space="preserve">
          <source>fish_prompt</source>
          <target state="translated">fish_prompt</target>
        </trans-unit>
        <trans-unit id="cd788e8b2b186c68bc7b4e563896df245043a589" translate="yes" xml:space="preserve">
          <source>fish_prompt - define the appearance of the command line prompt</source>
          <target state="translated">fish_prompt-コマンドラインプロンプトの外観を定義する</target>
        </trans-unit>
        <trans-unit id="f78d4c9641a64c769e933588d8994ca394327414" translate="yes" xml:space="preserve">
          <source>fish_right_prompt</source>
          <target state="translated">fish_right_prompt</target>
        </trans-unit>
        <trans-unit id="4f1afbb85b31538c97624a72a30d55414589b49a" translate="yes" xml:space="preserve">
          <source>fish_right_prompt - define the appearance of the right-side command line prompt</source>
          <target state="translated">fish_right_prompt-右側のコマンドラインプロンプトの外観を定義する</target>
        </trans-unit>
        <trans-unit id="8b339b0c658d3c4228467574152fa75f2375b32e" translate="yes" xml:space="preserve">
          <source>fish_update_completions</source>
          <target state="translated">fish_update_completions</target>
        </trans-unit>
        <trans-unit id="90c9f004ea4a216adfd9c72340b8112edb288283" translate="yes" xml:space="preserve">
          <source>fish_update_completions - Update completions using manual pages</source>
          <target state="translated">fish_update_completions-マニュアルページを使って補完を更新する</target>
        </trans-unit>
        <trans-unit id="f76de474163a63c296945fcd9d696f36636c8aef" translate="yes" xml:space="preserve">
          <source>fish_vi_mode</source>
          <target state="translated">fish_vi_mode</target>
        </trans-unit>
        <trans-unit id="410186a970357c931e2a7dec30a37b5a1e74ebea" translate="yes" xml:space="preserve">
          <source>fish_vi_mode - Enable vi mode</source>
          <target state="translated">fish_vi_mode-vi モードを有効にする</target>
        </trans-unit>
        <trans-unit id="43eef9a62abb8b1e1654f8a890aae054abffa82b" translate="yes" xml:space="preserve">
          <source>for</source>
          <target state="translated">for</target>
        </trans-unit>
        <trans-unit id="6aa32fad737b7aa5ceaccf76038f5bbfb35631a8" translate="yes" xml:space="preserve">
          <source>for - perform a set of commands multiple times.</source>
          <target state="translated">for-一連のコマンドを複数回実行します。</target>
        </trans-unit>
        <trans-unit id="c039c214c3b0d96340e4ef72f733eedd0388e42d" translate="yes" xml:space="preserve">
          <source>funced</source>
          <target state="translated">funced</target>
        </trans-unit>
        <trans-unit id="0816bc375ac09bd74efea8d7a85a93023e8ffa5a" translate="yes" xml:space="preserve">
          <source>funced - edit a function interactively</source>
          <target state="translated">funced-関数を対話的に編集する</target>
        </trans-unit>
        <trans-unit id="3bc1aee64f9e2c4c5efada178ad6165cab6377cc" translate="yes" xml:space="preserve">
          <source>funcsave</source>
          <target state="translated">funcsave</target>
        </trans-unit>
        <trans-unit id="2f69307df7e91d4902cb35c04dd61609789e8b05" translate="yes" xml:space="preserve">
          <source>funcsave - save the definition of a function to the user's autoload directory</source>
          <target state="translated">funcsave-関数の定義をユーザのオートロードディレクトリに保存します。</target>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="translated">function</target>
        </trans-unit>
        <trans-unit id="bf41a97c9825ae2e3550fdddcd8aaf42e45d7245" translate="yes" xml:space="preserve">
          <source>function - create a function</source>
          <target state="translated">関数-関数を作成する</target>
        </trans-unit>
        <trans-unit id="2f887def33825e52ffbcca83446cfd6a6f676ff7" translate="yes" xml:space="preserve">
          <source>functions</source>
          <target state="translated">functions</target>
        </trans-unit>
        <trans-unit id="a2dd0c9d390ee256fa9d3c2d2857526a5930b073" translate="yes" xml:space="preserve">
          <source>functions - print or erase functions</source>
          <target state="translated">機能-印刷または消去機能</target>
        </trans-unit>
        <trans-unit id="92005ecf3788faea8346a7919fba0232188561ab" translate="yes" xml:space="preserve">
          <source>help</source>
          <target state="translated">help</target>
        </trans-unit>
        <trans-unit id="90df5c81817176fc99bd4d5ed355b097e8ac84fe" translate="yes" xml:space="preserve">
          <source>help - display fish documentation</source>
          <target state="translated">help-魚のドキュメントを表示する</target>
        </trans-unit>
        <trans-unit id="66f79d8a6327c82c9033e6d65ff03322a3766c87" translate="yes" xml:space="preserve">
          <source>history</source>
          <target state="translated">history</target>
        </trans-unit>
        <trans-unit id="9c54bcb9992fb9affc2aedd28a291f6b1a369e0b" translate="yes" xml:space="preserve">
          <source>history - Show and manipulate command history</source>
          <target state="translated">history-コマンドの履歴を表示して操作する</target>
        </trans-unit>
        <trans-unit id="958f57f57d72a30f329ee5538f21b0257a49a46e" translate="yes" xml:space="preserve">
          <source>if</source>
          <target state="translated">if</target>
        </trans-unit>
        <trans-unit id="f95ea4c87a089d830126713a97723833a9fd76fc" translate="yes" xml:space="preserve">
          <source>if - conditionally execute a command</source>
          <target state="translated">if-条件付きでコマンドを実行します</target>
        </trans-unit>
        <trans-unit id="24def2dc36d8c488f6dd73f146437207b25f618c" translate="yes" xml:space="preserve">
          <source>isatty</source>
          <target state="translated">isatty</target>
        </trans-unit>
        <trans-unit id="3cfe607d872677db1789d97ef106886f84f5899b" translate="yes" xml:space="preserve">
          <source>isatty - test if a file descriptor is a tty.</source>
          <target state="translated">isatty-ファイル記述子が tty であるかどうかをテストする</target>
        </trans-unit>
        <trans-unit id="638dbc85cd3410c50689528013eccaae778361f3" translate="yes" xml:space="preserve">
          <source>it will print &lt;code&gt;xax xbx xcx&lt;/code&gt;.</source>
          <target state="translated">それが印刷されます &lt;code&gt;xax xbx xcx&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6966922100bf006356af2b9098e6ba3b1c190226" translate="yes" xml:space="preserve">
          <source>jobs</source>
          <target state="translated">jobs</target>
        </trans-unit>
        <trans-unit id="2c0538a731bda1d0b48cf0b71c7f1eea39760d56" translate="yes" xml:space="preserve">
          <source>jobs - print currently running jobs</source>
          <target state="translated">jobs-現在実行中のジョブを表示する</target>
        </trans-unit>
        <trans-unit id="eab8b533a9af65bf25991bce5aab55764e3ca4e8" translate="yes" xml:space="preserve">
          <source>jobs accepts the following switches:</source>
          <target state="translated">jobsは以下のスイッチを受け付けています。</target>
        </trans-unit>
        <trans-unit id="7a488390a939c4795cc1a801e51751d5f25d800d" translate="yes" xml:space="preserve">
          <source>math</source>
          <target state="translated">math</target>
        </trans-unit>
        <trans-unit id="ac55c69e1a4e4deadae82d7d2501bb6e8354689f" translate="yes" xml:space="preserve">
          <source>math - Perform mathematics calculations</source>
          <target state="translated">数学-数学の計算を行う</target>
        </trans-unit>
        <trans-unit id="5788f5d9921db1d9d54ea779e091c82300b105e9" translate="yes" xml:space="preserve">
          <source>nextd</source>
          <target state="translated">nextd</target>
        </trans-unit>
        <trans-unit id="5962cd086d9c9b34c1fe8730983fbd9559aed0f5" translate="yes" xml:space="preserve">
          <source>nextd - move forward through directory history</source>
          <target state="translated">nextd-ディレクトリの履歴を移動します。</target>
        </trans-unit>
        <trans-unit id="d058f2cdd7781f829008a74cc23a43186eacb161" translate="yes" xml:space="preserve">
          <source>no output.</source>
          <target state="translated">出力されません。</target>
        </trans-unit>
        <trans-unit id="557f255516719ea16f8f4a0aae1166054e2c9b43" translate="yes" xml:space="preserve">
          <source>not</source>
          <target state="translated">not</target>
        </trans-unit>
        <trans-unit id="4575a330b9abc396835c8ef87416bed7db17b511" translate="yes" xml:space="preserve">
          <source>not - negate the exit status of a job</source>
          <target state="translated">not-ジョブの終了ステータスを否定する</target>
        </trans-unit>
        <trans-unit id="5fc7e38bffe00ca46add89145464a2eaf759d5c2" translate="yes" xml:space="preserve">
          <source>open</source>
          <target state="translated">open</target>
        </trans-unit>
        <trans-unit id="199b395ad03deff5d4ae7fbee3ed860eb83c6145" translate="yes" xml:space="preserve">
          <source>open - open file in its default application</source>
          <target state="translated">open-デフォルトのアプリケーションでファイルを開く</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="711125b2ab4f03f077b0f47796a68a231b18fde3" translate="yes" xml:space="preserve">
          <source>or - conditionally execute a command</source>
          <target state="translated">または-条件付きでコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="4a4fca309e453918d1fa9832f4ef19832f32f1de" translate="yes" xml:space="preserve">
          <source>or opted into globally for a user:</source>
          <target state="translated">またはユーザーのためにグローバルにオプトインされています。</target>
        </trans-unit>
        <trans-unit id="bd053f79a6a0b97eca270388d4266f6cdc2e5d1f" translate="yes" xml:space="preserve">
          <source>popd</source>
          <target state="translated">popd</target>
        </trans-unit>
        <trans-unit id="c0ad7ae5d6dea353b86b7975b175fb7ec7a5b0d8" translate="yes" xml:space="preserve">
          <source>popd - move through directory stack</source>
          <target state="translated">popd-ディレクトリスタックを移動する</target>
        </trans-unit>
        <trans-unit id="501bed2ce7870bcc5b0594fe851ae7aafaa0d983" translate="yes" xml:space="preserve">
          <source>press &lt;code&gt;Ctrl-C&lt;/code&gt; twice, or</source>
          <target state="translated">プレス &lt;code&gt;Ctrl-C&lt;/code&gt; 二回、または</target>
        </trans-unit>
        <trans-unit id="7dc7f09beed59586cbda067c6eeb7b7166812ad2" translate="yes" xml:space="preserve">
          <source>press &lt;code&gt;Ctrl-D&lt;/code&gt; twice, or</source>
          <target state="translated">プレス &lt;code&gt;Ctrl-D&lt;/code&gt; を二回、または</target>
        </trans-unit>
        <trans-unit id="e291f27c814229dc2eb10fa92c9b8c4185958322" translate="yes" xml:space="preserve">
          <source>prevd</source>
          <target state="translated">prevd</target>
        </trans-unit>
        <trans-unit id="f7c05f49b7608d19659229d1610a7b144fd04131" translate="yes" xml:space="preserve">
          <source>prevd - move backward through directory history</source>
          <target state="translated">prevd-ディレクトリの履歴を後方に移動する</target>
        </trans-unit>
        <trans-unit id="df39b4caf493869772ff3a0f95cca6a9ae7934dc" translate="yes" xml:space="preserve">
          <source>printf</source>
          <target state="translated">printf</target>
        </trans-unit>
        <trans-unit id="3c6a47d2ffca0ad0d4a07143fcfbfd3c2bf900e7" translate="yes" xml:space="preserve">
          <source>printf - display text according to a format string</source>
          <target state="translated">printf-フォーマット文字列に従ってテキストを表示する</target>
        </trans-unit>
        <trans-unit id="21999975d6629ee4bcf6c7777ee78ef2dde68352" translate="yes" xml:space="preserve">
          <source>printf also knows a number of backslash escapes:</source>
          <target state="translated">printfはバックスラッシュエスケープもいくつか知っています。</target>
        </trans-unit>
        <trans-unit id="f0e9a119bdd370e572983792f8da0fd600bbb244" translate="yes" xml:space="preserve">
          <source>printf formats the string FORMAT with ARGUMENT, and displays the result.</source>
          <target state="translated">printfは文字列FORMATをARGUMENTでフォーマットし、その結果を表示します。</target>
        </trans-unit>
        <trans-unit id="03b62a0fc91ac76f534c8506377fd0cd7094b326" translate="yes" xml:space="preserve">
          <source>prompt_pwd</source>
          <target state="translated">prompt_pwd</target>
        </trans-unit>
        <trans-unit id="379685f1a28ec5f5585e4ea14e8526590620679f" translate="yes" xml:space="preserve">
          <source>prompt_pwd - Print pwd suitable for prompt</source>
          <target state="translated">prompt_pwd-プロンプトに適した pwd を印刷する</target>
        </trans-unit>
        <trans-unit id="a140601076b214970f21dd77e03c7939cd93ecdc" translate="yes" xml:space="preserve">
          <source>prompt_pwd is a function to print the current working directory in a way suitable for prompts. It will replace the home directory with &quot;~&quot; and shorten every path component but the last to a default of one character.</source>
          <target state="translated">prompt_pwd は、現在の作業ディレクトリをプロンプトに適した方法で表示する関数です。これは、ホームディレクトリを &quot;~&quot; に置き換え、最後のパスを除いたすべてのパスコンポーネントを 1 文字のデフォルトに短縮します。</target>
        </trans-unit>
        <trans-unit id="9afd2538d3d4ffb696f4dcdd4ab6baadf04ff522" translate="yes" xml:space="preserve">
          <source>psub</source>
          <target state="translated">psub</target>
        </trans-unit>
        <trans-unit id="63fbf23d9d9b481ea407c815c90933057897af4b" translate="yes" xml:space="preserve">
          <source>psub - perform process substitution</source>
          <target state="translated">psub-プロセス置換を実行します。</target>
        </trans-unit>
        <trans-unit id="ca99455ec63652d0ac9ec250727ee0c6c910786e" translate="yes" xml:space="preserve">
          <source>pushd</source>
          <target state="translated">pushd</target>
        </trans-unit>
        <trans-unit id="9160b1d55f9fa10d249ec7b308dccac953b32fc0" translate="yes" xml:space="preserve">
          <source>pushd - push directory to directory stack</source>
          <target state="translated">pushd-ディレクトリをディレクトリスタックにプッシュする</target>
        </trans-unit>
        <trans-unit id="37fa265330ad83eaa879efb1e2db6380896cf639" translate="yes" xml:space="preserve">
          <source>pwd</source>
          <target state="translated">pwd</target>
        </trans-unit>
        <trans-unit id="3f4e967878bd5e1bb4a87ca851b714379daca044" translate="yes" xml:space="preserve">
          <source>pwd - output the current working directory</source>
          <target state="translated">pwd-現在の作業ディレクトリを出力する</target>
        </trans-unit>
        <trans-unit id="a415ab5cc17c8c093c015ccdb7e552aee7911aa4" translate="yes" xml:space="preserve">
          <source>random</source>
          <target state="translated">random</target>
        </trans-unit>
        <trans-unit id="a2268607239de0e6afadb64003588824de27a1ad" translate="yes" xml:space="preserve">
          <source>random - generate random number</source>
          <target state="translated">random-乱数を生成する</target>
        </trans-unit>
        <trans-unit id="a7afddb68260a60f86c02a021efba7f216c2e7cf" translate="yes" xml:space="preserve">
          <source>read</source>
          <target state="translated">read</target>
        </trans-unit>
        <trans-unit id="02d0fa56be4fca5d7cc0c6db5a7aa370743eb4ff" translate="yes" xml:space="preserve">
          <source>read - read line of input into variables</source>
          <target state="translated">read-変数に入力された行を読み込む</target>
        </trans-unit>
        <trans-unit id="ff2b5744be5fceda4fc467fda551bcbf199f8fa0" translate="yes" xml:space="preserve">
          <source>realpath</source>
          <target state="translated">realpath</target>
        </trans-unit>
        <trans-unit id="2caa95ad63632ed3825a317f46514c851816d5ab" translate="yes" xml:space="preserve">
          <source>realpath - Convert a path to an absolute path without symlinks</source>
          <target state="translated">realpath-シンボリックリンクなしでパスを絶対パスに変換する</target>
        </trans-unit>
        <trans-unit id="63143b6f8007b98c53ca2149822777b3566f9241" translate="yes" xml:space="preserve">
          <source>return</source>
          <target state="translated">return</target>
        </trans-unit>
        <trans-unit id="288b5d6d1a89a6e706dfc7486e06e4a8d8078410" translate="yes" xml:space="preserve">
          <source>return - stop the current inner function</source>
          <target state="translated">return-現在の内部関数を停止します.</target>
        </trans-unit>
        <trans-unit id="65c10dc3549fe07424148a8a4790a3341ecbc253" translate="yes" xml:space="preserve">
          <source>set</source>
          <target state="translated">set</target>
        </trans-unit>
        <trans-unit id="063c17e14f7627ded7c57ede98e0f6ca9045fc66" translate="yes" xml:space="preserve">
          <source>set - display and change shell variables.</source>
          <target state="translated">set-シェル変数を表示したり変更したりします。</target>
        </trans-unit>
        <trans-unit id="20f7c32664f5d1e0b9c515a18fcf90cdb3c57984" translate="yes" xml:space="preserve">
          <source>set_color</source>
          <target state="translated">set_color</target>
        </trans-unit>
        <trans-unit id="cff11275c6338d2e5dde20951c1557cf0de59d43" translate="yes" xml:space="preserve">
          <source>set_color - set the terminal color</source>
          <target state="translated">set_color-端末の色を設定する</target>
        </trans-unit>
        <trans-unit id="828d338a9b04221c9cbe286f50cd389f68de4ecf" translate="yes" xml:space="preserve">
          <source>source</source>
          <target state="translated">source</target>
        </trans-unit>
        <trans-unit id="2f7991a9100c9583f2155802c7350aa74443ed20" translate="yes" xml:space="preserve">
          <source>source - evaluate contents of file.</source>
          <target state="translated">source-ファイルの内容を評価します。</target>
        </trans-unit>
        <trans-unit id="506a7e1ca8d34664e2b86653d70401c523f26553" translate="yes" xml:space="preserve">
          <source>spawns &lt;code&gt;sleep&lt;/code&gt; in the background, and then waits until it finishes.</source>
          <target state="translated">バックグラウンドで &lt;code&gt;sleep&lt;/code&gt; を生成し、終了するまで待機します。</target>
        </trans-unit>
        <trans-unit id="78dbe5e491bc63d2e79ab65c266d6d41e91f56ff" translate="yes" xml:space="preserve">
          <source>spawns five jobs and &lt;code&gt;hoge&lt;/code&gt; in the background, and then waits until all &lt;code&gt;sleep&lt;/code&gt;s finishes, and doesn't wait for &lt;code&gt;hoge&lt;/code&gt; finishing.</source>
          <target state="translated">5つのジョブと &lt;code&gt;hoge&lt;/code&gt; をバックグラウンドで生成し、すべての &lt;code&gt;sleep&lt;/code&gt; が終了するまで待機し、 &lt;code&gt;hoge&lt;/code&gt; が終了するのを待機しません。</target>
        </trans-unit>
        <trans-unit id="b6e22225897433914493a887f4a4f462d9a13ced" translate="yes" xml:space="preserve">
          <source>spawns five jobs in the background, and then waits until all of them finishes.</source>
          <target state="translated">バックグラウンドで5つのジョブをスポーンし、すべてのジョブが終了するまで待ちます。</target>
        </trans-unit>
        <trans-unit id="48a3661d846478fa991a825ebd10b78671444b5b" translate="yes" xml:space="preserve">
          <source>status</source>
          <target state="translated">status</target>
        </trans-unit>
        <trans-unit id="420a0e9d08406c887fa9f473fb502e30acd9a336" translate="yes" xml:space="preserve">
          <source>status - query fish runtime information</source>
          <target state="translated">status-魚の実行時間情報を問い合わせる</target>
        </trans-unit>
        <trans-unit id="33a9e6923b5cff6e1c9fb560ddb572a069a669c0" translate="yes" xml:space="preserve">
          <source>stdin and stdout can be redirected via the familiar &amp;lt; and &amp;gt;. stderr is redirected with a &amp;gt;2.</source>
          <target state="translated">stdinおよびstdoutは、使い慣れた&amp;lt;および&amp;gt;を介してリダイレクトできます。stderrは&amp;gt; 2でリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="ecb252044b5ea0f679ee78ec1a12904739e2904d" translate="yes" xml:space="preserve">
          <source>string</source>
          <target state="translated">string</target>
        </trans-unit>
        <trans-unit id="5eb279c348daa58c49a3c45c42799e5a0b7195c1" translate="yes" xml:space="preserve">
          <source>string - manipulate strings</source>
          <target state="translated">string-文字列を操作する</target>
        </trans-unit>
        <trans-unit id="b6f0c43f69fad2bd2df597f8c1f9289bf8ebf0a2" translate="yes" xml:space="preserve">
          <source>suspend</source>
          <target state="translated">suspend</target>
        </trans-unit>
        <trans-unit id="0a906b8b4efdea69b1aa7921bd59ea5a07a19f19" translate="yes" xml:space="preserve">
          <source>suspend - suspend the current shell</source>
          <target state="translated">suspend-現在のシェルをサスペンドする</target>
        </trans-unit>
        <trans-unit id="01ba7992f85de477e8e630428eb5ed14769f9155" translate="yes" xml:space="preserve">
          <source>switch</source>
          <target state="translated">switch</target>
        </trans-unit>
        <trans-unit id="b6b1294b1f61dc5bf9ee190db20eac07851abf99" translate="yes" xml:space="preserve">
          <source>switch - conditionally execute a block of commands</source>
          <target state="translated">switch-条件付きでコマンドブロックを実行する</target>
        </trans-unit>
        <trans-unit id="a94a8fe5ccb19ba61c4c0873d391e987982fbbd3" translate="yes" xml:space="preserve">
          <source>test</source>
          <target state="translated">test</target>
        </trans-unit>
        <trans-unit id="4f3107d98473bb39c5345a7b62319a827c9d8057" translate="yes" xml:space="preserve">
          <source>test - perform tests on files and text</source>
          <target state="translated">test-ファイルやテキストのテストを実行する</target>
        </trans-unit>
        <trans-unit id="c87a7f7b83a3a58c6087ce1eb24509a6f210bbe6" translate="yes" xml:space="preserve">
          <source>the function description minimally escaped so it is a single line or &lt;code&gt;n/a&lt;/code&gt; if the function isn't defined.</source>
          <target state="translated">関数の説明は最小限にエスケープされているため、1行または関数が定義されていない場合は &lt;code&gt;n/a&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="02aa698783c53dd6998a194b4ec93ca8e6192a89" translate="yes" xml:space="preserve">
          <source>the line number within the file or zero if not applicable,</source>
          <target state="translated">ファイル内の行番号、該当しない場合はゼロ。</target>
        </trans-unit>
        <trans-unit id="d326199cf56e0ae280f8a9fda92ba199137f5b06" translate="yes" xml:space="preserve">
          <source>the pathname as already described,</source>
          <target state="translated">のように、既に説明したようにパス名を指定します。</target>
        </trans-unit>
        <trans-unit id="93fde051556cb8919a6c75036bae40f55a1a1718" translate="yes" xml:space="preserve">
          <source>to change this prompt see &lt;a href=&quot;#tut_prompt&quot;&gt;how to change your prompt&lt;/a&gt;</source>
          <target state="translated">このプロンプト&lt;a href=&quot;#tut_prompt&quot;&gt;を変更するには、プロンプトを変更する方法を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="b60b004f5d8183032d2f3fcf34a581edbdea5c61" translate="yes" xml:space="preserve">
          <source>to switch to fish permanently see &lt;a href=&quot;#tut_switching_to_fish&quot;&gt;switch your default shell to fish&lt;/a&gt;</source>
          <target state="translated">魚に永久に&lt;a href=&quot;#tut_switching_to_fish&quot;&gt;切り替えるには、デフォルトのシェルを魚&lt;/a&gt;に切り替えるを参照してください</target>
        </trans-unit>
        <trans-unit id="e6d307367af5382983ed0d6888c8e3e045355281" translate="yes" xml:space="preserve">
          <source>trap</source>
          <target state="translated">trap</target>
        </trans-unit>
        <trans-unit id="3abaf5ffe5c75ece5fd52f452cf4a7f90fed7421" translate="yes" xml:space="preserve">
          <source>trap - perform an action when the shell receives a signal</source>
          <target state="translated">trap-シェルがシグナルを受信したときにアクションを実行する</target>
        </trans-unit>
        <trans-unit id="5ffe533b830f08a0326348a9160afafc8ada44db" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="translated">true</target>
        </trans-unit>
        <trans-unit id="10b80755987d5e861fcb4c74925a714ba8dce054" translate="yes" xml:space="preserve">
          <source>true - return a successful result</source>
          <target state="translated">true-成功した結果を返します。</target>
        </trans-unit>
        <trans-unit id="d0a3e7f81a9885e99049d1cae0336d269d5e47a9" translate="yes" xml:space="preserve">
          <source>type</source>
          <target state="translated">type</target>
        </trans-unit>
        <trans-unit id="fa189f6932e07966b2945f9c641067e1250a2bb7" translate="yes" xml:space="preserve">
          <source>type - indicate how a command would be interpreted</source>
          <target state="translated">type-コマンドがどのように解釈されるかを示します。</target>
        </trans-unit>
        <trans-unit id="6747212f18c8e5d826c489535a7ede3cf68eb31d" translate="yes" xml:space="preserve">
          <source>type &lt;code&gt;exit&lt;/code&gt;, or</source>
          <target state="translated">タイプ &lt;code&gt;exit&lt;/code&gt; 、または</target>
        </trans-unit>
        <trans-unit id="8f17cfc3a44394fc7a0575f4eb71f3dbd5d29eb7" translate="yes" xml:space="preserve">
          <source>type &lt;code&gt;quit&lt;/code&gt;</source>
          <target state="translated">タイプ &lt;code&gt;quit&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e5e5b45aaa91b76b5567fa66b0d05fe7289fd30" translate="yes" xml:space="preserve">
          <source>ulimit</source>
          <target state="translated">ulimit</target>
        </trans-unit>
        <trans-unit id="6f97e285ade4768f7a97feb604606ad49d5d73d5" translate="yes" xml:space="preserve">
          <source>ulimit - set or get resource usage limits</source>
          <target state="translated">ulimit-リソースの使用制限を設定または取得する</target>
        </trans-unit>
        <trans-unit id="4b824f445e8d64ec6f262547c18a3ab02a6fd22c" translate="yes" xml:space="preserve">
          <source>umask</source>
          <target state="translated">umask</target>
        </trans-unit>
        <trans-unit id="40ce63190ce7b180322f127f1880704153f8b29a" translate="yes" xml:space="preserve">
          <source>umask - set or get the file creation mode mask</source>
          <target state="translated">umask-ファイル作成モードのマスクを設定または取得する</target>
        </trans-unit>
        <trans-unit id="ed6354b5f4780263c94651c766c76e339fe47f1e" translate="yes" xml:space="preserve">
          <source>vared</source>
          <target state="translated">vared</target>
        </trans-unit>
        <trans-unit id="095ed909fb13c4817a8aeb74a62b6468a254ca8d" translate="yes" xml:space="preserve">
          <source>vared - interactively edit the value of an environment variable</source>
          <target state="translated">vared-環境変数の値をインタラクティブに編集する</target>
        </trans-unit>
        <trans-unit id="daaad336276d15594d0e765f96c17cd746bf4971" translate="yes" xml:space="preserve">
          <source>wait</source>
          <target state="translated">wait</target>
        </trans-unit>
        <trans-unit id="5dc68f4d1dfb375d9f030f65dae3398df707ba38" translate="yes" xml:space="preserve">
          <source>wait - wait for jobs to complete</source>
          <target state="translated">wait-ジョブの完了を待つ</target>
        </trans-unit>
        <trans-unit id="daca2c7abafe19aed94611021e5a4bbeb2584565" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;__fish_contains_opt&lt;/code&gt; is a function that checks the command line buffer for the presence of a specified set of options.</source>
          <target state="translated">ここで、 &lt;code&gt;__fish_contains_opt&lt;/code&gt; は、指定されたオプションのセットの存在についてコマンドラインバッファーをチェックする関数です。</target>
        </trans-unit>
        <trans-unit id="489a6e620233cc9d22541565dff2f3ac8a1d932a" translate="yes" xml:space="preserve">
          <source>which is logically equivalent to the following:</source>
          <target state="translated">と論理的に等価です。</target>
        </trans-unit>
        <trans-unit id="6517f89c46c3f0d6db9cb009b8c7d1f98c371fa0" translate="yes" xml:space="preserve">
          <source>while</source>
          <target state="translated">while</target>
        </trans-unit>
        <trans-unit id="1ff56800352145ff9f9300f91d5ae15e85c17b92" translate="yes" xml:space="preserve">
          <source>while - perform a command multiple times</source>
          <target state="translated">while-コマンドを複数回実行する</target>
        </trans-unit>
        <trans-unit id="a605898fdfaef482c78ebc3e9e8274f6d32b1cba" translate="yes" xml:space="preserve">
          <source>will attempt to build the fish program, and any errors will be shown using the less pager.</source>
          <target state="translated">は魚のプログラムを構築しようとし、エラーがあった場合は less pager を使用して表示されます。</target>
        </trans-unit>
        <trans-unit id="e99b731e0ff1040d87b00c1c061573852dcca4b4" translate="yes" xml:space="preserve">
          <source>will call the &lt;code&gt;cat&lt;/code&gt; program with the parameter 'foo.txt', which will print the contents of the file 'foo.txt'. The contents of foo.txt will then be filtered through the program 'head', which will pass on the first ten lines of the file to the screen. For more information on how to combine commands through pipes, read the manual pages of the commands you want to use using the &lt;code&gt;man&lt;/code&gt; command. If you want to find out more about the &lt;code&gt;cat&lt;/code&gt; program, type &lt;code&gt;man cat&lt;/code&gt;.</source>
          <target state="translated">これは、パラメータ「foo.txt」で &lt;code&gt;cat&lt;/code&gt; プログラムを呼び出し、ファイル「foo.txt」の内容を出力します。foo.txtの内容は、プログラムの「head」によってフィルタリングされ、ファイルの最初の10行が画面に渡されます。パイプを介してコマンドを組み合わせる方法の詳細については、 &lt;code&gt;man&lt;/code&gt; コマンドを使用して使用するコマンドのマニュアルページをお読みください。 &lt;code&gt;cat&lt;/code&gt; プログラムについて詳しく知りたい場合は、 &lt;code&gt;man cat&lt;/code&gt; と入力してください。</target>
        </trans-unit>
        <trans-unit id="ef5f8dfda25d3d985781b69dcb1b285ae55e913d" translate="yes" xml:space="preserve">
          <source>will run the &lt;code&gt;ls&lt;/code&gt; command, using the &lt;code&gt;-l&lt;/code&gt; option, while passing on any additional files and switches to &lt;code&gt;ls&lt;/code&gt;.</source>
          <target state="translated">追加のファイルを渡して &lt;code&gt;ls&lt;/code&gt; に切り替えながら、 &lt;code&gt;-l&lt;/code&gt; オプションを使用して &lt;code&gt;ls&lt;/code&gt; コマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="a80dacfdcbb824e4242afb200ba1d4cc653f254c" translate="yes" xml:space="preserve">
          <source>will start the emacs text editor in the background.</source>
          <target state="translated">はバックグラウンドで emacs テキストエディタを起動します。</target>
        </trans-unit>
        <trans-unit id="875af98e94b5a2e2425bd92b03433e7c0f34dfa0" translate="yes" xml:space="preserve">
          <source>would remove the two files 'cumbersome' and 'filename.txt'.</source>
          <target state="translated">を実行すると、2つのファイル 'cumbersome' と 'filename.txt' が削除されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
