<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="d8f5a662d30248028e58618a9cb324b38272bbd8" translate="yes" xml:space="preserve">
          <source>These commands all compare two sets of things; what is compared differs:</source>
          <target state="translated">これらのコマンドはすべて、2つのセットを比較します。</target>
        </trans-unit>
        <trans-unit id="6e07bfec6529e0e8049d6a168dde51eb0ed55268" translate="yes" xml:space="preserve">
          <source>These commands are to interact with foreign SCM and with other people via patch over e-mail.</source>
          <target state="translated">これらのコマンドは、海外のSCMとパッチを使ってメールでやりとりするためのものです。</target>
        </trans-unit>
        <trans-unit id="008c5282b165f202ade67dc870d3522a81a841bd" translate="yes" xml:space="preserve">
          <source>These configuration variables control &lt;code&gt;internal&lt;/code&gt; gitweb behavior.</source>
          <target state="translated">これらの構成変数は、 &lt;code&gt;internal&lt;/code&gt; gitwebの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="94d243826a65ff43f06f691e3b2f877746c8e3a7" translate="yes" xml:space="preserve">
          <source>These configurations enable two things. First, each unix user (&lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt;) of the server will be able to browse through gitweb Git repositories found in &lt;code&gt;~/public_git/&lt;/code&gt; with the following url:</source>
          <target state="translated">これらの構成により、2つのことが可能になります。最初に、サーバーの各UNIXユーザー（ &lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt; ）は、 &lt;code&gt;~/public_git/&lt;/code&gt; にあるgitweb Gitリポジトリを次のURLで閲覧できます。</target>
        </trans-unit>
        <trans-unit id="3c188c162ef90ed4e72b2204b53fd7bbdf63ed82" translate="yes" xml:space="preserve">
          <source>These environment variables apply to &lt;code&gt;all&lt;/code&gt; core Git commands. Nb: it is worth noting that they may be used/overridden by SCMS sitting above Git so take care if using a foreign front-end.</source>
          <target state="translated">これらの環境変数は、 &lt;code&gt;all&lt;/code&gt; コアGitコマンドに適用されます。Nb：Gitの上にあるSCMSによってそれらが使用/オーバーライドされる可能性があることに注意してください。外部のフロントエンドを使用する場合は注意してください。</target>
        </trans-unit>
        <trans-unit id="e4a9928c908043039dae5cc89a184941db222aba" translate="yes" xml:space="preserve">
          <source>These exclude patterns come from these places, in order:</source>
          <target state="translated">これらの除外パターンは、順番に、これらの場所から来ています。</target>
        </trans-unit>
        <trans-unit id="75ad982aca6a7add80092ae27820348741497d7e" translate="yes" xml:space="preserve">
          <source>These flag are passed to the &lt;code&gt;git apply&lt;/code&gt; program (see &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;) that applies the patch.</source>
          <target state="translated">これらのフラグは、パッチを適用する &lt;code&gt;git apply&lt;/code&gt; プログラム（&lt;a href=&quot;git-apply&quot;&gt;git-apply [1]を&lt;/a&gt;参照）に渡されます。</target>
        </trans-unit>
        <trans-unit id="a66ecfa5cef3d43b11b6332452dde3bc34998a82" translate="yes" xml:space="preserve">
          <source>These flags are passed to &lt;code&gt;git am&lt;/code&gt; to easily change the dates of the rebased commits (see &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;).</source>
          <target state="translated">これらのフラグは &lt;code&gt;git am&lt;/code&gt; に渡され、リベースされたコミットの日付を簡単に変更できます（&lt;a href=&quot;git-am&quot;&gt;git-am [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="6f1d3498209d5426cb1c8295c9947466ac12cab4" translate="yes" xml:space="preserve">
          <source>These flags are passed to the &lt;code&gt;git apply&lt;/code&gt; (see &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;) program that applies the patch.</source>
          <target state="translated">これらのフラグは、パッチを適用する &lt;code&gt;git apply&lt;/code&gt; （&lt;a href=&quot;git-apply&quot;&gt;git-apply [1]を&lt;/a&gt;参照）プログラムに渡されます。</target>
        </trans-unit>
        <trans-unit id="17c5d825c714d7f669df648adc8ffa3b9865aa3a" translate="yes" xml:space="preserve">
          <source>These forms reset the index entries for all paths that match the &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt; to their state at &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt;. (It does not affect the working tree or the current branch.)</source>
          <target state="translated">これらのフォームは、 &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt; に一致するすべてのパスのインデックスエントリを &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; の状態にリセットします。（作業ツリーや現在のブランチには影響しません。）</target>
        </trans-unit>
        <trans-unit id="84dfe82e69639d7dd0490e18b4061edc5e5f61bb" translate="yes" xml:space="preserve">
          <source>These general best practices are very helpful if you bisect often.</source>
          <target state="translated">これらの一般的なベストプラクティスは、あなたが頻繁に二分する場合に非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="db63350c8a27af092cfd256119dcf34d87e7125f" translate="yes" xml:space="preserve">
          <source>These instructions use the &lt;code&gt;git-cvsimport&lt;/code&gt; script which ships with git, but other importers may provide better results. See the note in &lt;a href=&quot;git-cvsimport&quot;&gt;git-cvsimport[1]&lt;/a&gt; for other options.</source>
          <target state="translated">これらの手順では、 &lt;code&gt;git-cvsimport&lt;/code&gt; するgit-cvsimportスクリプトを使用しますが、他のインポーターがより良い結果を提供する場合があります。その他のオプションについては、&lt;a href=&quot;git-cvsimport&quot;&gt;git-cvsimport [1]&lt;/a&gt;のメモを参照してください。</target>
        </trans-unit>
        <trans-unit id="4de4cd9ec9920076e498bf4f8c01b7cc0e7335b0" translate="yes" xml:space="preserve">
          <source>These messages are concerned with Git thread usage.</source>
          <target state="translated">これらのメッセージは、Git スレッドの使用に関するものです。</target>
        </trans-unit>
        <trans-unit id="b8e5bd243ffdab655773f15dbcfc0554b819902f" translate="yes" xml:space="preserve">
          <source>These options are deprecated. Use the above --notes/--no-notes options instead.</source>
          <target state="translated">これらのオプションは非推奨です。代わりに上記の --notes/--no-notes オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="894173daf027c82b1254f620d2cbbddacd04b7fd" translate="yes" xml:space="preserve">
          <source>These options are ignored for historical reasons.</source>
          <target state="translated">これらのオプションは歴史的な理由から無視されています。</target>
        </trans-unit>
        <trans-unit id="0608f735748e7710136ac2ca4b1a8fc7f8d0f8a8" translate="yes" xml:space="preserve">
          <source>These options are mostly targeted for packing of Git repositories.</source>
          <target state="translated">これらのオプションは主に Git リポジトリのパッキングを対象としています。</target>
        </trans-unit>
        <trans-unit id="44fc7c2eb5b5d3f683db2d8973767b7defab9c76" translate="yes" xml:space="preserve">
          <source>These options are passed to &lt;a href=&quot;git-send-pack&quot;&gt;git-send-pack[1]&lt;/a&gt;. A thin transfer significantly reduces the amount of sent data when the sender and receiver share many of the same objects in common. The default is &lt;code&gt;--thin&lt;/code&gt;.</source>
          <target state="translated">これらのオプションは&lt;a href=&quot;git-send-pack&quot;&gt;git-send-pack [1]に&lt;/a&gt;渡されます。シン転送は、送信者と受信者が同じオブジェクトの多くを共有している場合に、送信されるデータの量を大幅に削減します。デフォルトは &lt;code&gt;--thin&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0c86ff6978b6c3146e6796c4f36abf160da0176d" translate="yes" xml:space="preserve">
          <source>These options can be used in an initial &lt;code&gt;clone&lt;/code&gt;, along with the &lt;code&gt;sync&lt;/code&gt; options described above.</source>
          <target state="translated">これらのオプションは、上記の &lt;code&gt;sync&lt;/code&gt; オプションとともに、初期 &lt;code&gt;clone&lt;/code&gt; で使用できます。</target>
        </trans-unit>
        <trans-unit id="0ade32a888d52a4ba127b2e5cb51121d4b067e67" translate="yes" xml:space="preserve">
          <source>These options can be used in the initial &lt;code&gt;clone&lt;/code&gt; as well as in subsequent &lt;code&gt;sync&lt;/code&gt; operations.</source>
          <target state="translated">これらのオプションは、最初の &lt;code&gt;clone&lt;/code&gt; と後続の &lt;code&gt;sync&lt;/code&gt; 操作で使用できます。</target>
        </trans-unit>
        <trans-unit id="3f45787718e6c314237aec0cf2c5e63156df92c4" translate="yes" xml:space="preserve">
          <source>These options can be used to modify &lt;code&gt;git p4 rebase&lt;/code&gt; behavior.</source>
          <target state="translated">これらのオプションは、 &lt;code&gt;git p4 rebase&lt;/code&gt; の動作を変更するために使用できます。</target>
        </trans-unit>
        <trans-unit id="046bf3cadb648529c8cbf517d3ba66246fc697fc" translate="yes" xml:space="preserve">
          <source>These options can be used to modify &lt;code&gt;git p4 submit&lt;/code&gt; behavior.</source>
          <target state="translated">これらのオプションを使用して、 &lt;code&gt;git p4 submit&lt;/code&gt; 動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="5bf9264c3d2f29d27aed45b38db366aee6362601" translate="yes" xml:space="preserve">
          <source>These options control layout (defaults to &lt;code&gt;column&lt;/code&gt;). Setting any of these implies &lt;code&gt;always&lt;/code&gt; if none of &lt;code&gt;always&lt;/code&gt;, &lt;code&gt;never&lt;/code&gt;, or &lt;code&gt;auto&lt;/code&gt; are specified.</source>
          <target state="translated">これらのオプションはレイアウトを制御します（デフォルトは &lt;code&gt;column&lt;/code&gt; です）。これらのいずれかを設定することを意味し &lt;code&gt;always&lt;/code&gt; のどれ場合は &lt;code&gt;always&lt;/code&gt; 、 &lt;code&gt;never&lt;/code&gt; 、または &lt;code&gt;auto&lt;/code&gt; が指定されていません。</target>
        </trans-unit>
        <trans-unit id="510a1cbefb424a60db8479a49dd55a0966d6d945" translate="yes" xml:space="preserve">
          <source>These options control when the feature should be enabled (defaults to &lt;code&gt;never&lt;/code&gt;):</source>
          <target state="translated">これらのオプションは、機能を有効にするタイミングを制御します（デフォルトは &lt;code&gt;never&lt;/code&gt; です）。</target>
        </trans-unit>
        <trans-unit id="931e215644554fa9404627a014bfd3cf51399ea5" translate="yes" xml:space="preserve">
          <source>These options take effect whatever the value of the &lt;code&gt;core.splitIndex&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option.</source>
          <target state="translated">これらのオプションは、 &lt;code&gt;core.splitIndex&lt;/code&gt; 構成変数の値が何であっても有効です（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。ただし、変更が構成された値に対して行われると警告が発行されます。構成された値は次にインデックスが読み取られたときに有効になり、これによりオプションの意図した効果が削除されます。</target>
        </trans-unit>
        <trans-unit id="932e8c22c29966222600cac9510425979eeabd1c" translate="yes" xml:space="preserve">
          <source>These options take effect whatever the value of the &lt;code&gt;core.untrackedCache&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option.</source>
          <target state="translated">これらのオプションは、 &lt;code&gt;core.untrackedCache&lt;/code&gt; 構成変数の値が何であっても有効です（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。ただし、変更が構成された値に対して行われると警告が発行されます。構成された値は次にインデックスが読み取られたときに有効になり、これによりオプションの意図した効果が削除されます。</target>
        </trans-unit>
        <trans-unit id="ff7024be4fc3bd9a63ff1aab42e5c2f33080a5ad" translate="yes" xml:space="preserve">
          <source>These parameters can also be set individually with &lt;code&gt;--stat-width=&amp;lt;width&amp;gt;&lt;/code&gt;, &lt;code&gt;--stat-name-width=&amp;lt;name-width&amp;gt;&lt;/code&gt; and &lt;code&gt;--stat-count=&amp;lt;count&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これらのパラメーターは、-- &lt;code&gt;--stat-width=&amp;lt;width&amp;gt;&lt;/code&gt; 、-- &lt;code&gt;--stat-name-width=&amp;lt;name-width&amp;gt;&lt;/code&gt; および &lt;code&gt;--stat-count=&amp;lt;count&amp;gt;&lt;/code&gt; を使用して個別に設定することもできます。</target>
        </trans-unit>
        <trans-unit id="25d97f197e2ad468ea791c831ca2e71054c4e207" translate="yes" xml:space="preserve">
          <source>These remote-tracking references can be deleted as a one-off with either of:</source>
          <target state="translated">これらのリモートトラッキング参照は、以下のいずれかの方法で一度に削除することができます。</target>
        </trans-unit>
        <trans-unit id="4994737bcfd88cfa54486bc85e99d5152416b798" translate="yes" xml:space="preserve">
          <source>These rules make it easy for shell script based tools to parse reference names, pathname expansion by the shell when a reference name is used unquoted (by mistake), and also avoid ambiguities in certain reference name expressions (see &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;):</source>
          <target state="translated">これらのルールにより、シェルスクリプトベースのツールが参照名を解析しやすくなり、参照名が引用符なしで（誤って）使用された場合のシェルによるパス名展開が可能になり、特定の参照名式のあいまいさを回避できます（&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d2d3b8bc5c27c38dddb2f7c9e54b52668c820483" translate="yes" xml:space="preserve">
          <source>These services can be enabled/disabled using the per-repository configuration file:</source>
          <target state="translated">これらのサービスは、リポジトリごとの設定ファイルを使用して有効化/無効化することができます。</target>
        </trans-unit>
        <trans-unit id="11be9ffec744e4c727f505822229118ed50ca097" translate="yes" xml:space="preserve">
          <source>These services can be globally enabled/disabled using the command-line options of this command. If finer-grained control is desired (e.g. to allow &lt;code&gt;git archive&lt;/code&gt; to be run against only in a few selected repositories the daemon serves), the per-repository configuration file can be used to enable or disable them.</source>
          <target state="translated">これらのサービスは、このコマンドのコマンドラインオプションを使用してグローバルに有効/無効にすることができます。より細かい制御が必要な場合（たとえば、デーモンが提供するいくつかの選択したリポジトリに対してのみ &lt;code&gt;git archive&lt;/code&gt; を実行できるようにする場合）、リポジトリごとの構成ファイルを使用して、それらを有効または無効にできます。</target>
        </trans-unit>
        <trans-unit id="6e7a1043f71fa1813c0b5e398e97710f483944d9" translate="yes" xml:space="preserve">
          <source>These things may exist in a Git repository.</source>
          <target state="translated">これらのものはGitリポジトリに存在している可能性があります。</target>
        </trans-unit>
        <trans-unit id="b5c7f688db050c92cfc9bb2aa9d676e52849ec7b" translate="yes" xml:space="preserve">
          <source>These three branches all forked from a common commit, [master], whose commit message is &quot;Add 'git show-branch'&quot;. The &quot;fixes&quot; branch adds one commit &quot;Introduce &quot;reset type&quot; flag to &quot;git reset&quot;&quot;. The &quot;mhf&quot; branch adds many other commits. The current branch is &quot;master&quot;.</source>
          <target state="translated">これら 3 つのブランチはすべて共通のコミット [master]からフォークされたもので、そのコミットメッセージは &quot;Add 'git show-branch'&quot; となっています。そのコミットメッセージは &quot;Add 'git show-branch'&quot; です。mhf&quot; ブランチは他にもたくさんのコミットを追加しています。現在のブランチは &quot;master&quot; です。</target>
        </trans-unit>
        <trans-unit id="c6204a9318b7a0526e46b8696b2eb378d52ecf11" translate="yes" xml:space="preserve">
          <source>These two filters behave differently, and by default, a filter is taken as the former, massaging the contents into more convenient shape. A missing filter driver definition in the config, or a filter driver that exits with a non-zero status, is not an error but makes the filter a no-op passthru.</source>
          <target state="translated">これら 2 つのフィルタの振る舞いは異なり、デフォルトではフィルタは前者として扱われ、内容をより便利な形に整形します。設定にフィルタドライバの定義がない場合や、ゼロではない状態で終了するフィルタドライバはエラーではありませんが、そのフィルタは無操作パススルーになります。</target>
        </trans-unit>
        <trans-unit id="e20e46dc24b79b5218925e423850545226b0898e" translate="yes" xml:space="preserve">
          <source>These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within --window to see if using delta compression saves space. --depth limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object.</source>
          <target state="translated">これら 2 つのオプションは、パックに含まれるオブジェクトがデルタ圧縮を用いてどのように保存されるかに影響を与えます。まずオブジェクトは内部的にタイプ、サイズ、オプションとして名前でソートされ、 --window 内の他のオブジェクトと比較され、デルタ圧縮を使用することでスペースを節約できるかどうかが確認されます。--あまり深くしすぎるとアンパッカー側のパフォーマンスに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="de212a952b72f4cd05af023bbd056fa8307c4a9f" translate="yes" xml:space="preserve">
          <source>These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within &lt;code&gt;--window&lt;/code&gt; to see if using delta compression saves space. &lt;code&gt;--depth&lt;/code&gt; limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object.</source>
          <target state="translated">これらの2つのオプションは、パックに含まれるオブジェクトがデルタ圧縮を使用して格納される方法に影響します。オブジェクトは最初にタイプ、サイズ、オプションで名前で内部的にソートされ、デルタ圧縮を使用してスペースを節約できるかどうかを確認するために &lt;code&gt;--window&lt;/code&gt; 内の他のオブジェクトと比較されます。 &lt;code&gt;--depth&lt;/code&gt; は最大デルタ深度を制限します。必要以上の深さにすると、アンパッカー側のパフォーマンスに影響します。必要なオブジェクトに到達するには、デルタデータを何度も適用する必要があるためです。</target>
        </trans-unit>
        <trans-unit id="6a0bfaec1ca5ad5a0f6710f22f7b4b78eecfef67" translate="yes" xml:space="preserve">
          <source>These two syntaxes are mostly equivalent, except the former implies --local option.</source>
          <target state="translated">これら2つの構文は、前者が--ローカルオプションを意味することを除けば、ほぼ同等です。</target>
        </trans-unit>
        <trans-unit id="9270307e15adf00d482cdebd8e068750f310bc87" translate="yes" xml:space="preserve">
          <source>These two syntaxes are mostly equivalent, except when cloning, when the former implies --local option. See &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; for details.</source>
          <target state="translated">これらの2つの構文は、前者が--localオプションを暗黙指定している場合を除いて、ほとんど同じです。詳細については、&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="469e074d32a553c54f69af6603803ffbfd2e6dda" translate="yes" xml:space="preserve">
          <source>These types of entries are generally created as a result of using &lt;code&gt;git
commit --amend&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt; and are the commits prior to the amend or rebase occurring. Since these changes are not part of the current project most users will want to expire them sooner, which is why the default is more aggressive than &lt;code&gt;gc.reflogExpire&lt;/code&gt;.</source>
          <target state="translated">これらのタイプのエントリは通常、 &lt;code&gt;git commit --amend&lt;/code&gt; または &lt;code&gt;git rebase&lt;/code&gt; を使用した結果として作成され、修正またはリベースが発生する前のコミットです。これらの変更は現在のプロジェクトの一部ではないため、ほとんどのユーザーはそれらをより早く期限切れにしたいと思うでしょう。そのため、デフォルトは &lt;code&gt;gc.reflogExpire&lt;/code&gt; よりも積極的です。</target>
        </trans-unit>
        <trans-unit id="99a10a0726ee032ba80815c05eceb6d5a6ab2aa8" translate="yes" xml:space="preserve">
          <source>These variables control various optional help messages designed to aid new users. All &lt;code&gt;advice.*&lt;/code&gt; variables default to &lt;code&gt;true&lt;/code&gt;, and you can tell Git that you do not need help by setting these to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">これらの変数は、新しいユーザーを支援するために設計されたさまざまなオプションのヘルプメッセージを制御します。すべての &lt;code&gt;advice.*&lt;/code&gt; 変数はデフォルトで &lt;code&gt;true&lt;/code&gt; に設定されています。これらを &lt;code&gt;false&lt;/code&gt; に設定することで、Gitにヘルプが必要ないことを伝えることができます。</target>
        </trans-unit>
        <trans-unit id="289bbff1e27f0cf157d5208bbfcb9f369ecc1504" translate="yes" xml:space="preserve">
          <source>These variables obviate the need for command-line options in some circumstances, allowing easier restricted usage through git-shell.</source>
          <target state="translated">これらの変数を使用することで、状況によってはコマンドラインオプションが不要になり、git-shell での使用をより簡単に制限できるようになります。</target>
        </trans-unit>
        <trans-unit id="48d5c4b33cae3d35014b5a5e266ea897c2a18c9f" translate="yes" xml:space="preserve">
          <source>These will display all commits which exist only on HEAD or on MERGE_HEAD, and which touch an unmerged file.</source>
          <target state="translated">これらのコミットは、HEAD または MERGE_HEAD にのみ存在し、マージされていないファイルに触れているすべてのコミットを表示します。</target>
        </trans-unit>
        <trans-unit id="e9ab0d9bdf3f35b7d6ece2d3bc65f4fbb38bad38" translate="yes" xml:space="preserve">
          <source>They are both passed directly to &lt;code&gt;git diff-tree&lt;/code&gt;; see &lt;a href=&quot;git-diff-tree&quot;&gt;git-diff-tree[1]&lt;/a&gt; for more information.</source>
          <target state="translated">どちらも直接 &lt;code&gt;git diff-tree&lt;/code&gt; に渡されます。詳細については、&lt;a href=&quot;git-diff-tree&quot;&gt;git-diff-tree [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="afa16f632fa562fed5a34ad41431101aacb568d7" translate="yes" xml:space="preserve">
          <source>They can include slash &lt;code&gt;/&lt;/code&gt; for hierarchical (directory) grouping, but no slash-separated component can begin with a dot &lt;code&gt;.&lt;/code&gt; or end with the sequence &lt;code&gt;.lock&lt;/code&gt;.</source>
          <target state="translated">階層（ディレクトリ）のグループ化のためにスラッシュ &lt;code&gt;/&lt;/code&gt; を含めることができますが、スラッシュで区切られたコンポーネントをドットで始めることはできません &lt;code&gt;.&lt;/code&gt; または、シーケンス &lt;code&gt;.lock&lt;/code&gt; で終わります。</target>
        </trans-unit>
        <trans-unit id="48a933f433abac80f2e0e41b240081f7a399893c" translate="yes" xml:space="preserve">
          <source>They cannot be the single character &lt;code&gt;@&lt;/code&gt;.</source>
          <target state="translated">単一文字 &lt;code&gt;@&lt;/code&gt; にすることはできません。</target>
        </trans-unit>
        <trans-unit id="c798a840110b095cd0c31cb10cad16c17f5292dd" translate="yes" xml:space="preserve">
          <source>They cannot begin or end with a slash &lt;code&gt;/&lt;/code&gt; or contain multiple consecutive slashes (see the &lt;code&gt;--normalize&lt;/code&gt; option below for an exception to this rule)</source>
          <target state="translated">スラッシュで開始または終了することはできません &lt;code&gt;/&lt;/code&gt; または連続する複数のスラッシュを含めることはできません（このルールの例外については、以下の &lt;code&gt;--normalize&lt;/code&gt; オプションを参照してください）</target>
        </trans-unit>
        <trans-unit id="794c847c2b033448497ba9e6f46f59b7325ccd69" translate="yes" xml:space="preserve">
          <source>They cannot contain a &lt;code&gt;\&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;\&lt;/code&gt; を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="c4cf89d0a711867dbdfa498e7e6b80fb04c020f3" translate="yes" xml:space="preserve">
          <source>They cannot contain a sequence &lt;code&gt;@{&lt;/code&gt;.</source>
          <target state="translated">シーケンス &lt;code&gt;@{&lt;/code&gt; 含めることはできません。</target>
        </trans-unit>
        <trans-unit id="c781dcfcbfa7c545717cc72f3f25ac7fba039fd7" translate="yes" xml:space="preserve">
          <source>They cannot end with a dot &lt;code&gt;.&lt;/code&gt;.</source>
          <target state="translated">ドットで終わることはできません &lt;code&gt;.&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdf3c698f8591838633d63d5550c41009f5d53bb" translate="yes" xml:space="preserve">
          <source>They cannot have ASCII control characters (i.e. bytes whose values are lower than \040, or \177 &lt;code&gt;DEL&lt;/code&gt;), space, tilde &lt;code&gt;~&lt;/code&gt;, caret &lt;code&gt;^&lt;/code&gt;, or colon &lt;code&gt;:&lt;/code&gt; anywhere.</source>
          <target state="translated">ASCII制御文字（つまり、値が\ 040または\ 177 &lt;code&gt;DEL&lt;/code&gt; 未満のバイト）、スペース、チルド &lt;code&gt;~&lt;/code&gt; 、キャレット &lt;code&gt;^&lt;/code&gt; 、またはコロン &lt;code&gt;:&lt;/code&gt; はどこにも含めることができません。</target>
        </trans-unit>
        <trans-unit id="9fa9a35ba99f055f59e5fb0fc3903845af8141d1" translate="yes" xml:space="preserve">
          <source>They cannot have question-mark &lt;code&gt;?&lt;/code&gt;, asterisk &lt;code&gt;*&lt;/code&gt;, or open bracket &lt;code&gt;[&lt;/code&gt; anywhere. See the &lt;code&gt;--refspec-pattern&lt;/code&gt; option below for an exception to this rule.</source>
          <target state="translated">彼らは疑問符を持つことができません &lt;code&gt;?&lt;/code&gt; 、アスタリスク &lt;code&gt;*&lt;/code&gt; 、または開き角かっこ &lt;code&gt;[&lt;/code&gt; どこでも。このルールの例外については、以下の &lt;code&gt;--refspec-pattern&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="07233de88d34b821d099ea14e09099281360fa3d" translate="yes" xml:space="preserve">
          <source>They cannot have two consecutive dots &lt;code&gt;..&lt;/code&gt; anywhere.</source>
          <target state="translated">彼らは、2つの連続したドットを持つことができません &lt;code&gt;..&lt;/code&gt; .どこでも。</target>
        </trans-unit>
        <trans-unit id="08cc7b3818b658e36c5e9a0a0fcefabb2c9bd5ce" translate="yes" xml:space="preserve">
          <source>They must contain at least one &lt;code&gt;/&lt;/code&gt;. This enforces the presence of a category like &lt;code&gt;heads/&lt;/code&gt;, &lt;code&gt;tags/&lt;/code&gt; etc. but the actual names are not restricted. If the &lt;code&gt;--allow-onelevel&lt;/code&gt; option is used, this rule is waived.</source>
          <target state="translated">少なくとも1つ &lt;code&gt;/&lt;/code&gt; を含める必要があります。これにより、 &lt;code&gt;heads/&lt;/code&gt; 、 &lt;code&gt;tags/&lt;/code&gt; などのカテゴリの存在が強制されますが、実際の名前は制限されません。場合 &lt;code&gt;--allow-onelevel&lt;/code&gt; ですオプションが使用され、このルールが免除されます。</target>
        </trans-unit>
        <trans-unit id="9c66e1086c1b783565f285e9f8d345796e4a920b" translate="yes" xml:space="preserve">
          <source>Things get more complicated if the &lt;code&gt;subsystem&lt;/code&gt; changes do not exactly correspond to the ones before the rebase.</source>
          <target state="translated">&lt;code&gt;subsystem&lt;/code&gt; 変更がリベース前の変更と正確に対応していない場合、状況はさらに複雑になります。</target>
        </trans-unit>
        <trans-unit id="877bd5e347693a4c90610529b809f198ae203a8a" translate="yes" xml:space="preserve">
          <source>Think about how to create a clear chapter dependency graph that will allow people to get to important topics without necessarily reading everything in between.</source>
          <target state="translated">必ずしも間にあるものをすべて読まなくても、重要なトピックにたどり着けるような、わかりやすい章の依存関係グラフの作り方を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="5f03012af2a22f62503c31e1e064eb23ddd2be46" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;key&lt;/code&gt; will be used instead of &amp;lt;token&amp;gt; in the trailer. At the end of this key, a separator can appear and then some space characters. By default the only valid separator is &lt;code&gt;:&lt;/code&gt;, but this can be changed using the &lt;code&gt;trailer.separators&lt;/code&gt; config variable.</source>
          <target state="translated">この &lt;code&gt;key&lt;/code&gt; は、トレーラーで&amp;lt;token&amp;gt;の代わりに使用されます。このキーの最後に、セパレータが表示され、その後にいくつかのスペース文字が表示されます。デフォルトでは、有効なセパレーターは &lt;code&gt;:&lt;/code&gt; のみですが、これは、 &lt;code&gt;trailer.separators&lt;/code&gt; 構成変数を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="9ed9ef222233001104259cd6ab7e0ea2e028dedb" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;merge&lt;/code&gt; can also be done by &lt;code&gt;pulling from her own remote-tracking branch&lt;/code&gt;, like this:</source>
          <target state="translated">この &lt;code&gt;merge&lt;/code&gt; は、次のように &lt;code&gt;pulling from her own remote-tracking branch&lt;/code&gt; することでも実行できます。</target>
        </trans-unit>
        <trans-unit id="0007248c88629a35b9fa8e1cf4c8fdf299191526" translate="yes" xml:space="preserve">
          <source>This accepts all options that &lt;code&gt;git svn fetch&lt;/code&gt; and &lt;code&gt;git rebase&lt;/code&gt; accept. However, &lt;code&gt;--fetch-all&lt;/code&gt; only fetches from the current [svn-remote], and not all [svn-remote] definitions.</source>
          <target state="translated">これは &lt;code&gt;git svn fetch&lt;/code&gt; および &lt;code&gt;git rebase&lt;/code&gt; が受け入れるすべてのオプションを受け入れます。ただし、 &lt;code&gt;--fetch-all&lt;/code&gt; は現在の[svn-remote]からのみフェッチし、すべての[svn-remote]定義からはフェッチしません。</target>
        </trans-unit>
        <trans-unit id="c118365ba0290d763b2d4e635fbfbb09d23e73e6" translate="yes" xml:space="preserve">
          <source>This action is disabled by default for performance reasons.</source>
          <target state="translated">このアクションは、パフォーマンス上の理由からデフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="692de83ae64c152ace96a6b22c40c6c7b5256f5f" translate="yes" xml:space="preserve">
          <source>This adds a link titled &quot;graphiclog&quot; after the &quot;summary&quot; link, leading to &lt;code&gt;git-browser&lt;/code&gt; script, passing &lt;code&gt;r=&amp;lt;project&amp;gt;&lt;/code&gt; as a query parameter.</source>
          <target state="translated">これにより、「summary」リンクの後に「graphiclog」というタイトルのリンクが追加され、 &lt;code&gt;git-browser&lt;/code&gt; スクリプトにつながり、クエリパラメータとして &lt;code&gt;r=&amp;lt;project&amp;gt;&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="9647e1f610a9d28b74cedc3ffa625f5d98628ec8" translate="yes" xml:space="preserve">
          <source>This algorithm extends the patience algorithm to &quot;support low-occurrence common elements&quot;.</source>
          <target state="translated">このアルゴリズムは、忍耐アルゴリズムを拡張して「低頻度の共通要素をサポート」するものです。</target>
        </trans-unit>
        <trans-unit id="5f9e4d22cfa1bc9f924abb0f51a443db2655b318" translate="yes" xml:space="preserve">
          <source>This allows &lt;code&gt;git svn&lt;/code&gt; to re-map repository URLs and UUIDs from mirrors created using SVN::Mirror (or svk) for metadata.</source>
          <target state="translated">これにより、 &lt;code&gt;git svn&lt;/code&gt; がメタデータのSVN :: Mirror（またはsvk）を使用して作成されたミラーからリポジトリURLとUUIDを再マッピングできるようになります。</target>
        </trans-unit>
        <trans-unit id="cb552885bcd7df779f362e35a229c9d935657c60" translate="yes" xml:space="preserve">
          <source>This allows one to specify a Perl regular expression that will cause skipping of all matching paths from checkout from SVN. The &lt;code&gt;--ignore-paths&lt;/code&gt; option should match for every &lt;code&gt;fetch&lt;/code&gt; (including automatic fetches due to &lt;code&gt;clone&lt;/code&gt;, &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, etc) on a given repository.</source>
          <target state="translated">これにより、SVNからのチェックアウトから一致するすべてのパスをスキップするPerl正規表現を指定できます。 &lt;code&gt;--ignore-paths&lt;/code&gt; オプションは、すべてのために一致している必要があり &lt;code&gt;fetch&lt;/code&gt; （自動起因するフェッチを含む &lt;code&gt;clone&lt;/code&gt; 、 &lt;code&gt;dcommit&lt;/code&gt; 、 &lt;code&gt;rebase&lt;/code&gt; 所定のリポジトリに、など）。</target>
        </trans-unit>
        <trans-unit id="bf5d12ceb1111e8b06bd58f3985472091a1cae12" translate="yes" xml:space="preserve">
          <source>This allows one to specify a Perl regular expression that will cause the inclusion of only matching paths from checkout from SVN. The &lt;code&gt;--include-paths&lt;/code&gt; option should match for every &lt;code&gt;fetch&lt;/code&gt; (including automatic fetches due to &lt;code&gt;clone&lt;/code&gt;, &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, etc) on a given repository. &lt;code&gt;--ignore-paths&lt;/code&gt; takes precedence over &lt;code&gt;--include-paths&lt;/code&gt;.</source>
          <target state="translated">これにより、SVNからのチェックアウトから一致するパスのみを含めるPerl正規表現を指定できます。 &lt;code&gt;--include-paths&lt;/code&gt; オプションは、すべてのために一致している必要があり &lt;code&gt;fetch&lt;/code&gt; （自動起因するフェッチを含む &lt;code&gt;clone&lt;/code&gt; 、 &lt;code&gt;dcommit&lt;/code&gt; 、 &lt;code&gt;rebase&lt;/code&gt; 所定のリポジトリに、など）。 &lt;code&gt;--ignore-paths&lt;/code&gt; は--include-pathsよりも優先され &lt;code&gt;--include-paths&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c68f089f9144bc4bdc1d710532bfa75a569d11ed" translate="yes" xml:space="preserve">
          <source>This allows one to specify a prefix which is prepended to the names of remotes if trunk/branches/tags are specified. The prefix does not automatically include a trailing slash, so be sure you include one in the argument if that is what you want. If --branches/-b is specified, the prefix must include a trailing slash. Setting a prefix (with a trailing slash) is strongly encouraged in any case, as your SVN-tracking refs will then be located at &quot;refs/remotes/$prefix/&lt;strong&gt;&quot;, which is compatible with Git&amp;rsquo;s own remote-tracking ref layout (refs/remotes/$remote/&lt;/strong&gt;). Setting a prefix is also useful if you wish to track multiple projects that share a common repository. By default, the prefix is set to &lt;code&gt;origin/&lt;/code&gt;.</source>
          <target state="translated">これにより、トランク/ブランチ/タグが指定されている場合に、リモートの名前の前に付加されるプレフィックスを指定できます。接頭辞には自動的に末尾のスラッシュが含まれないため、必要な場合は引数にスラッシュを含めてください。 --branches / -bを指定する場合、接頭辞には末尾にスラッシュを含める必要があります。接頭辞（末尾にスラッシュを付ける）を設定することを強くお勧めします。SVN追跡参照は、&lt;strong&gt;Gitの独自のリモート追跡参照レイアウト（refs&lt;/strong&gt; / remotes / $ prefix / &lt;strong&gt;）に配置されるためです。 / remotes / $ remote /&lt;/strong&gt;）。共通のリポジトリを共有する複数のプロジェクトを追跡する場合にも、プレフィックスを設定すると便利です。デフォルトでは、プレフィックスは &lt;code&gt;origin/&lt;/code&gt; 設定されています。</target>
        </trans-unit>
        <trans-unit id="99b10fdeae941de841a9ac73e39b7c06fcc2d978" translate="yes" xml:space="preserve">
          <source>This allows revision ranges for partial/cauterized history to be supported. $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges), $NUMBER:HEAD, and BASE:$NUMBER are all supported.</source>
          <target state="translated">これにより、部分的に/焼灼された履歴のリビジョン範囲をサポートすることができます。NUMBER、$NUMBER1:$NUMBER2 (数値範囲)、$NUMBER:HEAD、およびBASE:$NUMBERはすべてサポートされています。</target>
        </trans-unit>
        <trans-unit id="f18b167effc162d347deb782b83eab22ac73f014" translate="yes" xml:space="preserve">
          <source>This allows users to create repositories from alternate URLs. For example, an administrator could run &lt;code&gt;git svn&lt;/code&gt; on the server locally (accessing via file://) but wish to distribute the repository with a public http:// or svn:// URL in the metadata so users of it will see the public URL.</source>
          <target state="translated">これにより、ユーザーは代替URLからリポジトリを作成できます。たとえば、管理者はサーバー上で &lt;code&gt;git svn&lt;/code&gt; をローカルに実行（file：//経由でアクセス）できますが、メタデータにhttp：//またはsvn：//のパブリックURLを付けてリポジトリを配布して、ユーザーに表示されるようにします。パブリックURL。</target>
        </trans-unit>
        <trans-unit id="86c4c002dbb35b192dee2247feadc27722ad842a" translate="yes" xml:space="preserve">
          <source>This application is a CVS emulation layer for Git.</source>
          <target state="translated">このアプリケーションはGitのCVSエミュレーションレイヤーです。</target>
        </trans-unit>
        <trans-unit id="8feea1468fa1fae814e84f89aca492fad30e5da4" translate="yes" xml:space="preserve">
          <source>This applies modifications from a hot-fix branch before each test run, e.g. in case your build or test environment changed so that older revisions may need a fix which newer ones have already. (Make sure the hot-fix branch is based off a commit which is contained in all revisions which you are bisecting, so that the merge does not pull in too much, or use &lt;code&gt;git cherry-pick&lt;/code&gt; instead of &lt;code&gt;git merge&lt;/code&gt;.)</source>
          <target state="translated">これは、たとえば、ビルドまたはテスト環境が変更されて、古いリビジョンが新しいリビジョンにすでにある修正を必要とする場合など、各テストの実行前にホットフィックスブランチからの変更を適用します。（ホットフィックスブランチが、2分割しているすべてのリビジョンに含まれているコミットに基づいていることを確認してください。マージがあまり引き込まれないようにするか、 &lt;code&gt;git merge&lt;/code&gt; ではなく &lt;code&gt;git cherry-pick&lt;/code&gt; を使用してください。）</target>
        </trans-unit>
        <trans-unit id="889d1277201779cf18582f69129975a9bf60d357" translate="yes" xml:space="preserve">
          <source>This applies to files added to the source branch &lt;strong&gt;after&lt;/strong&gt; a daughter branch was created: if previously no commit was made on the daughter branch they will erroneously be added to the daughter branch in git.</source>
          <target state="translated">これは、ドーターブランチの作成&lt;strong&gt;後に&lt;/strong&gt;ソースブランチ&lt;strong&gt;に&lt;/strong&gt;追加されたファイルに適用されます。以前にドーターブランチでコミットが行われなかった場合、gitのドーターブランチに誤って追加されます。</target>
        </trans-unit>
        <trans-unit id="cd519f993fc33ca56b2cb882b0ae5ba8b983012d" translate="yes" xml:space="preserve">
          <source>This argument will not be passed to &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt;. Instead it sets the vhost field in the git:// service request (to rest of the argument). Default is not to send vhost in such request (if sent).</source>
          <target state="translated">この引数は &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; に渡されません。代わりに、git：//サービスリクエストのvhostフィールドを設定します（残りの引数に）。デフォルトでは、そのようなリクエストでvhostを送信しません（送信された場合）。</target>
        </trans-unit>
        <trans-unit id="9535ee34f2074fa8e689413e0518f1d3faf71e7d" translate="yes" xml:space="preserve">
          <source>This argument will not be passed to &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt;. Instead, it will cause the helper to start by sending git:// service requests to the remote side with the service field set to an appropriate value and the repository field set to rest of the argument. Default is not to send such a request.</source>
          <target state="translated">この引数は &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; に渡されません。その代わり、ヘルパーは、サービスフィールドを適切な値に設定し、リポジトリフィールドを残りの引数に設定して、リモート側にgit：//サービスリクエストを送信することから始めます。デフォルトでは、そのようなリクエストは送信されません。</target>
        </trans-unit>
        <trans-unit id="b50cd8ffcdc46b4b68ae7776a2b00f1d1183b6dd" translate="yes" xml:space="preserve">
          <source>This asks for all the history reachable from the given commit but not from any branch, tag, or other reference. If you decide it&amp;rsquo;s something you want, you can always create a new reference to it, e.g.,</source>
          <target state="translated">これは、ブランチ、タグ、その他の参照からではなく、特定のコミットから到達可能なすべての履歴を要求します。あなたがそれがあなたが望むものであると決定した場合、あなたはいつでもそれへの新しい参照を作成することができます、例えば、</target>
        </trans-unit>
        <trans-unit id="7efa4dea1c9da210003e0c08e382eb543f66cbf7" translate="yes" xml:space="preserve">
          <source>This attribute controls the length of conflict markers left in the work tree file during a conflicted merge. Only setting to the value to a positive integer has any meaningful effect.</source>
          <target state="translated">この属性は、競合したマージ時にワークツリーファイルに残される競合マーカーの長さを制御します。この値を正の整数に設定した場合のみ、意味のある効果があります。</target>
        </trans-unit>
        <trans-unit id="4caef1788f338fb02906a32b34bfb366a7539a3a" translate="yes" xml:space="preserve">
          <source>This attribute enables and controls end-of-line normalization. When a text file is normalized, its line endings are converted to LF in the repository. To control what line ending style is used in the working directory, use the &lt;code&gt;eol&lt;/code&gt; attribute for a single file and the &lt;code&gt;core.eol&lt;/code&gt; configuration variable for all text files. Note that setting &lt;code&gt;core.autocrlf&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;input&lt;/code&gt; overrides &lt;code&gt;core.eol&lt;/code&gt; (see the definitions of those options in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">この属性は、行末の正規化を有効にして制御します。テキストファイルが正規化されると、その行末はリポジトリでLFに変換されます。作業ディレクトリで使用される行末スタイルを制御するには、単一のファイルに &lt;code&gt;eol&lt;/code&gt; 属性を使用し、すべてのテキストファイルに &lt;code&gt;core.eol&lt;/code&gt; 構成変数を使用します。設定することを注意 &lt;code&gt;core.autocrlf&lt;/code&gt; に &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;input&lt;/code&gt; オーバーライド &lt;code&gt;core.eol&lt;/code&gt; （にこれらのオプションの定義を参照&lt;a href=&quot;git-config&quot;&gt;のgit -設定[1] &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9abb1dada669f4b282e87943eaa4c10d9676f824" translate="yes" xml:space="preserve">
          <source>This attribute sets a specific line-ending style to be used in the working directory. It enables end-of-line conversion without any content checks, effectively setting the &lt;code&gt;text&lt;/code&gt; attribute. Note that setting this attribute on paths which are in the index with CRLF line endings may make the paths to be considered dirty. Adding the path to the index again will normalize the line endings in the index.</source>
          <target state="translated">この属性は、作業ディレクトリで使用される特定の行末スタイルを設定します。コンテンツのチェックなしで行末変換を可能にし、効果的に &lt;code&gt;text&lt;/code&gt; 属性を設定します。CRLF行末のインデックスにあるパスにこの属性を設定すると、パスがダーティと見なされる場合があることに注意してください。インデックスへのパスを再度追加すると、インデックスの行末が正規化されます。</target>
        </trans-unit>
        <trans-unit id="a95f413f93d421b5f0b609911f7201baca2aa2de" translate="yes" xml:space="preserve">
          <source>This automatically updates the rev_map if needed (see &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; in the FILES section below for details).</source>
          <target state="translated">これにより、必要に応じてrev_mapが自動的に更新されます（詳細については、以下の「ファイル」セクションの &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="756e07e0622c048ffb322b306c002b3fe742a463" translate="yes" xml:space="preserve">
          <source>This behavior can be suppressed with the &lt;code&gt;--no-ff&lt;/code&gt; option.</source>
          <target state="translated">この動作は &lt;code&gt;--no-ff&lt;/code&gt; オプションで抑制できます。</target>
        </trans-unit>
        <trans-unit id="8ad430bc747d1916521d538bf94c1847176c4231" translate="yes" xml:space="preserve">
          <source>This behavior is the default when the start point is a remote-tracking branch. Set the branch.autoSetupMerge configuration variable to &lt;code&gt;false&lt;/code&gt; if you want &lt;code&gt;git switch&lt;/code&gt;, &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git branch&lt;/code&gt; to always behave as if &lt;code&gt;--no-track&lt;/code&gt; were given. Set it to &lt;code&gt;always&lt;/code&gt; if you want this behavior when the start-point is either a local or remote-tracking branch.</source>
          <target state="translated">この動作は、開始点がリモート追跡ブランチである場合のデフォルトです。 &lt;code&gt;git switch&lt;/code&gt; 、 &lt;code&gt;git checkout&lt;/code&gt; 、および &lt;code&gt;git branch&lt;/code&gt; を常に &lt;code&gt;--no-track&lt;/code&gt; が指定されているかのように動作させたい場合は、branch.autoSetupMerge構成変数を &lt;code&gt;false&lt;/code&gt; に設定します。開始点がローカルまたはリモート追跡ブランチであるときにこの動作が必要な場合は、 &lt;code&gt;always&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="e589ab09a449c7cf7000e50f249deca2b148281c" translate="yes" xml:space="preserve">
          <source>This boolean will enable &lt;code&gt;fsync()&lt;/code&gt; when writing object files.</source>
          <target state="translated">このブール値は、オブジェクトファイルを書き込むときに &lt;code&gt;fsync()&lt;/code&gt; を有効にします。</target>
        </trans-unit>
        <trans-unit id="2a9d8bb8cd3e4996e1654fca8257ad2030d24d70" translate="yes" xml:space="preserve">
          <source>This breakage is of course most of the time unrelated to the breakage we are trying to locate in the commit graph. But it prevents us to know if the interesting &quot;bad behavior&quot; is present or not.</source>
          <target state="translated">このブレークエイジは、もちろんほとんどの場合、コミットグラフの中で見つけようとしているブレークエイジとは無関係です。しかし、これでは興味深い「悪い動作」が存在するかどうかを知ることができません。</target>
        </trans-unit>
        <trans-unit id="1a7656b1b8b17aa91ea330f8fbedd0a75097faed" translate="yes" xml:space="preserve">
          <source>This bug has also been shown to affect non-symlink cases of replacing a directory with a file when it comes to the internal structures of the untracked cache, but no case has been reported where this resulted in wrong &quot;git status&quot; output.</source>
          <target state="translated">このバグは、トラックされていないキャッシュの内部構造に関連して、ディレクトリをファイルに置き換えた場合にも影響を与えることが示されていますが、これが原因で誤った &quot;git status&quot; 出力になったケースは報告されていません。</target>
        </trans-unit>
        <trans-unit id="bbb14e9c1a32bd1658d34b41d317e78fe3e2cf7e" translate="yes" xml:space="preserve">
          <source>This cache is meant to speed up commands that involve determining untracked files such as &lt;code&gt;git status&lt;/code&gt;.</source>
          <target state="translated">このキャッシュは、 &lt;code&gt;git status&lt;/code&gt; などの追跡されていないファイルの特定を含むコマンドを高速化するためのものです。</target>
        </trans-unit>
        <trans-unit id="5e9291bab46bd7ea7a2a21b7e8d51146482ff7a6" translate="yes" xml:space="preserve">
          <source>This calculates the same as &lt;code&gt;--bisect&lt;/code&gt;, except that refs in &lt;code&gt;refs/bisect/&lt;/code&gt; are not used, and except that this outputs text ready to be eval&amp;rsquo;ed by the shell. These lines will assign the name of the midpoint revision to the variable &lt;code&gt;bisect_rev&lt;/code&gt;, and the expected number of commits to be tested after &lt;code&gt;bisect_rev&lt;/code&gt; is tested to &lt;code&gt;bisect_nr&lt;/code&gt;, the expected number of commits to be tested if &lt;code&gt;bisect_rev&lt;/code&gt; turns out to be good to &lt;code&gt;bisect_good&lt;/code&gt;, the expected number of commits to be tested if &lt;code&gt;bisect_rev&lt;/code&gt; turns out to be bad to &lt;code&gt;bisect_bad&lt;/code&gt;, and the number of commits we are bisecting right now to &lt;code&gt;bisect_all&lt;/code&gt;.</source>
          <target state="translated">同じこの計算 &lt;code&gt;--bisect&lt;/code&gt; におけるその参考文献を除いて、 &lt;code&gt;refs/bisect/&lt;/code&gt; 使用されず、レディこの出力テキストはシェルによってevalされたされることを除いて。これらの行は、変数への中間点の改正の名前が割り当てられます &lt;code&gt;bisect_rev&lt;/code&gt; 後に試験すること、およびコミット数の期待値を &lt;code&gt;bisect_rev&lt;/code&gt; をするためにテストされる &lt;code&gt;bisect_nr&lt;/code&gt; 場合コミット数の期待値をテストするために、 &lt;code&gt;bisect_rev&lt;/code&gt; はに良いことが判明 &lt;code&gt;bisect_good&lt;/code&gt; 、 &lt;code&gt;bisect_rev&lt;/code&gt; が &lt;code&gt;bisect_bad&lt;/code&gt; に対して悪いことが判明した場合にテストされると予想されるコミットの数、および現在 &lt;code&gt;bisect_all&lt;/code&gt; に対して二分しているコミットの数。</target>
        </trans-unit>
        <trans-unit id="7d3cf717b036e3b0e81df34e24d7ea082a035f6a" translate="yes" xml:space="preserve">
          <source>This can allow you to make partial mirrors when running fetch; but is generally not recommended because history will be skipped and lost.</source>
          <target state="translated">これにより、fetch を実行しているときに部分的なミラーを作成することができますが、履歴がスキップされて失われるので、一般的には推奨されません。</target>
        </trans-unit>
        <trans-unit id="636e119b451b3bd7ccaf26b7d43733789f26ed19" translate="yes" xml:space="preserve">
          <source>This can also be set up as the default behaviour by using the &lt;code&gt;worktree.guessRemote&lt;/code&gt; config option.</source>
          <target state="translated">これは、 &lt;code&gt;worktree.guessRemote&lt;/code&gt; 構成オプションを使用して、デフォルトの動作として設定することもできます。</target>
        </trans-unit>
        <trans-unit id="fa409f68e80081ea9a669e9f13a5d077543254ef" translate="yes" xml:space="preserve">
          <source>This can be &lt;code&gt;end&lt;/code&gt;, which is the default, &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt; or &lt;code&gt;before&lt;/code&gt;.</source>
          <target state="translated">これは、デフォルトである &lt;code&gt;end&lt;/code&gt; 、 &lt;code&gt;start&lt;/code&gt; 、 &lt;code&gt;after&lt;/code&gt; 、 &lt;code&gt;before&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="0de02388f102cf8ff32d10ea0ea1542e4435ae39" translate="yes" xml:space="preserve">
          <source>This can be any options that the archiver backend understands. See next section.</source>
          <target state="translated">これは、アーカイバーバックエンドが理解する任意のオプションを指定することができます。次のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8ebe928ea2c46867d2d30a22aa44b6d209b60b27" translate="yes" xml:space="preserve">
          <source>This can be combined with the gitweb configuration:</source>
          <target state="translated">gitwebの設定と組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="3e2aafd0fe68d162abd0214f2c4dbcf97a317242" translate="yes" xml:space="preserve">
          <source>This can be enabled by default with the configuration option mailinfo.scissors.</source>
          <target state="translated">これは、設定オプションmailinfo.scissorsでデフォルトで有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="90b17ef61d05f77323fefc823815f1b4d0ca5c24" translate="yes" xml:space="preserve">
          <source>This can be set to a comma-separated list of strings. When a curl trace is enabled (see &lt;code&gt;GIT_TRACE_CURL&lt;/code&gt; above), whenever a &quot;Cookies:&quot; header sent by the client is dumped, values of cookies whose key is in that list (case-sensitive) are redacted.</source>
          <target state="translated">これは、文字列のコンマ区切りリストに設定できます。カールトレースが有効になっている場合（上記の &lt;code&gt;GIT_TRACE_CURL&lt;/code&gt; を参照）、クライアントから送信された「Cookies：」ヘッダーがダンプされるたびに、そのリストにあるキー（大文字と小文字が区別される）のCookieの値が編集されます。</target>
        </trans-unit>
        <trans-unit id="3d49143ca76086473ec42d2280fe45285788984b" translate="yes" xml:space="preserve">
          <source>This can be used to color the metadata of a blame line depending on age of the line.</source>
          <target state="translated">これを利用して、年齢に応じて非難ラインのメタデータに色をつけることができます。</target>
        </trans-unit>
        <trans-unit id="0f9fdab39f98d82a2bdc74c13a484288c9af48d4" translate="yes" xml:space="preserve">
          <source>This can be used to convert arguments to a command run in a subdirectory so that they can still be used after moving to the top-level of the repository. For example:</source>
          <target state="translated">これは、サブディレクトリで実行されるコマンドの引数を変換して、リポジトリのトップレベルに移動した後でも使用できるようにするために使用できます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7c4f04c6d6345aed6141f4d5502d056991a7840c" translate="yes" xml:space="preserve">
          <source>This can be used when you want to include further changes to the merge, or want to write your own merge commit message.</source>
          <target state="translated">これは、マージにさらに変更を加えたい場合や、独自のマージコミットメッセージを書きたい場合に使用します。</target>
        </trans-unit>
        <trans-unit id="14d1ead4268c0c0f3315fceadadaf2f291770d82" translate="yes" xml:space="preserve">
          <source>This can be used with the &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt; commands.</source>
          <target state="translated">これは、 &lt;code&gt;dcommit&lt;/code&gt; 、 &lt;code&gt;rebase&lt;/code&gt; 、 &lt;code&gt;branch&lt;/code&gt; 、および &lt;code&gt;tag&lt;/code&gt; コマンドで使用できます。</target>
        </trans-unit>
        <trans-unit id="9067f207a93cdcf6d90b3183367a4ae6097c31d6" translate="yes" xml:space="preserve">
          <source>This can be useful when you want to publish the tree from a commit without exposing its full history. You might want to do this to publish an open source branch of a project whose current tree is &quot;clean&quot;, but whose full history contains proprietary or otherwise encumbered bits of code.</source>
          <target state="translated">これは、コミットしたツリーの全履歴を公開せずに公開したい場合に便利です。現在のツリーが &quot;クリーン&quot; であるプロジェクトのオープンソースブランチを公開したい場合に便利ですが、その全履歴にはプロプライエタリなコードが含まれていたり、それ以外のコードが含まれていたりします。</target>
        </trans-unit>
        <trans-unit id="4ddcbb1d5b5e22f922e078b6b0d84fe1dcc0409b" translate="yes" xml:space="preserve">
          <source>This can happen, for example, if you:</source>
          <target state="translated">これは、例えば、あなたの場合に起こることがあります。</target>
        </trans-unit>
        <trans-unit id="9140f80526c6eb06ff98ed4abf5c0d2e07067266" translate="yes" xml:space="preserve">
          <source>This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.</source>
          <target state="translated">これは、3 者間マージアルゴリズムを使用して、2 つのヘッド (すなわち、現在のブランチとプルした別のブランチ)を解決することができます。これは、クリスクロスマージの曖昧さを注意深く検出しようとするもので、一般的には安全で高速と考えられています。</target>
        </trans-unit>
        <trans-unit id="10679b433b60fbaff0452d6d903b314fee5164d2" translate="yes" xml:space="preserve">
          <source>This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect and handle merges involving renames, but currently cannot make use of detected copies. This is the default merge strategy when pulling or merging one branch.</source>
          <target state="translated">これは、3 者間マージアルゴリズムを使用して 2 つのヘッドのみを解決することができます。3 者間マージに使用できる共通の祖先が複数ある場合、共通の祖先のマージされたツリーを作成し、それを 3 者間マージの参照ツリーとして使用します。これは、Linux 2.6 カーネルの開発履歴から取得した実際のマージコミットをテストした結果、誤マージを引き起こすことなく、マージの競合が少なくなることが報告されています。さらに、これはリネームを含むマージを検出して処理することができますが、現在のところ検出されたコピーを利用することはできません。これは、ひとつのブランチを引っ張ったりマージしたりするときのデフォルトのマージ戦略です。</target>
        </trans-unit>
        <trans-unit id="2cac39aeb86961e1363f7613dfed0033661ab943" translate="yes" xml:space="preserve">
          <source>This can speed up operations like &lt;code&gt;git diff&lt;/code&gt; and &lt;code&gt;git status&lt;/code&gt; especially on filesystems like NFS that have weak caching semantics and thus relatively high IO latencies. When enabled, Git will do the index comparison to the filesystem data in parallel, allowing overlapping IO&amp;rsquo;s. Defaults to true.</source>
          <target state="translated">これにより、特にキャッシングセマンティクスが弱く、IOレイテンシが比較的高いNFSなどのファイルシステムで、 &lt;code&gt;git diff&lt;/code&gt; や &lt;code&gt;git status&lt;/code&gt; などの操作を高速化できます。有効にすると、Gitはファイルシステムデータと並行してインデックス比較を行い、IOの重複を許可します。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="9202266152fd1a0a2194149286bebd74fe30a95c" translate="yes" xml:space="preserve">
          <source>This capability can be advertised multiple times. The first applicable refspec takes precedence. The left-hand of refspecs advertised with this capability must cover all refs reported by the list command. If no &lt;code&gt;refspec&lt;/code&gt; capability is advertised, there is an implied &lt;code&gt;refspec *:*&lt;/code&gt;.</source>
          <target state="translated">この機能は複数回アドバタイズできます。最初に適用可能なrefspecが優先されます。この機能でアドバタイズされるrefspecの左側は、listコマンドによって報告されるすべての参照をカバーする必要があります。 &lt;code&gt;refspec&lt;/code&gt; 機能がアドバタイズされていない場合、暗黙の &lt;code&gt;refspec *:*&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="561397ab0857a5bada65e17ac4aabd661a6939b5" translate="yes" xml:space="preserve">
          <source>This chapter covers internal details of the Git implementation which probably only Git developers need to understand.</source>
          <target state="translated">この章では、おそらくGit開発者だけが理解する必要があるであろうGitの実装の内部的な詳細を扱います。</target>
        </trans-unit>
        <trans-unit id="9301665301f3e50c4417122a8411be226ea5b235" translate="yes" xml:space="preserve">
          <source>This command always gets all objects. Historically, there were three options &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-t&lt;/code&gt; for choosing which objects to download. They are now silently ignored.</source>
          <target state="translated">このコマンドは常にすべてのオブジェクトを取得します。歴史的に、ダウンロードするオブジェクトを選択するための3つのオプション &lt;code&gt;-a&lt;/code&gt; 、 &lt;code&gt;-c&lt;/code&gt; 、および &lt;code&gt;-t&lt;/code&gt; がありました。それらは黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="5b8a59dc9ca3a3d6f247d36df5fb54708fa69494" translate="yes" xml:space="preserve">
          <source>This command applies the patch but does not create a commit. Use &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt; to create commits from patches generated by &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; and/or received by email.</source>
          <target state="translated">このコマンドはパッチを適用しますが、コミットは作成しません。使用&lt;a href=&quot;git-am&quot;&gt;のgit-AM [1]&lt;/a&gt;によって生成されたパッチからのコミットを作成するには、&lt;a href=&quot;git-format-patch&quot;&gt;gitのフォーマット-パッチ[1]&lt;/a&gt;および/または電子メールで受け取りました。</target>
        </trans-unit>
        <trans-unit id="1f849e1e7df08a5bb28860e4715d22e12f5d5d20" translate="yes" xml:space="preserve">
          <source>This command assists the developer in this process by recording conflicted automerge results and corresponding hand resolve results on the initial manual merge, and applying previously recorded hand resolutions to their corresponding automerge results.</source>
          <target state="translated">このコマンドは、最初の手動マージで競合するオートマージ結果と対応するハンド解決結果を記録し、以前に記録したハンド解決を対応するオートマージ結果に適用することで、このプロセスの開発者を支援します。</target>
        </trans-unit>
        <trans-unit id="b823d02fd766a4ae4b81090ce369454e7da568d6" translate="yes" xml:space="preserve">
          <source>This command caches credentials in memory for use by future Git programs. The stored credentials never touch the disk, and are forgotten after a configurable timeout. The cache is accessible over a Unix domain socket, restricted to the current user by filesystem permissions.</source>
          <target state="translated">このコマンドは、将来の Git プログラムで使用するための認証情報をメモリにキャッシュします。保存された認証情報はディスクに触れることはなく、設定したタイムアウト後に忘れ去られます。キャッシュへのアクセスは、Unix ドメインソケットを介して行います。</target>
        </trans-unit>
        <trans-unit id="4784337d21599fe7fcfddcd79392d8470207170e" translate="yes" xml:space="preserve">
          <source>This command can be performed multiple times before a commit. It only adds the content of the specified file(s) at the time the add command is run; if you want subsequent changes included in the next commit, then you must run &lt;code&gt;git add&lt;/code&gt; again to add the new content to the index.</source>
          <target state="translated">このコマンドは、コミット前に複数回実行できます。addコマンドの実行時に、指定されたファイルのコンテンツのみが追加されます。後続の変更を次のコミットに含める場合は、 &lt;code&gt;git add&lt;/code&gt; を再度実行して、新しいコンテンツをインデックスに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="c286ab165ab2a31532b621372beb627366820ec4" translate="yes" xml:space="preserve">
          <source>This command can be used where a &lt;code&gt;filemodify&lt;/code&gt; directive can appear, allowing it to be used in the middle of a commit. For a &lt;code&gt;filemodify&lt;/code&gt; using an inline directive, it can also appear right before the &lt;code&gt;data&lt;/code&gt; directive.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;filemodify&lt;/code&gt; ディレクティブを表示できる場所で使用できるため、コミットの途中で使用できます。インラインディレクティブを使用した &lt;code&gt;filemodify&lt;/code&gt; の場合は、 &lt;code&gt;data&lt;/code&gt; ディレクティブの直前に置くこともできます。</target>
        </trans-unit>
        <trans-unit id="74e4352fd2289d447be4133ac0e6d68d162428a6" translate="yes" xml:space="preserve">
          <source>This command can run &lt;code&gt;applypatch-msg&lt;/code&gt;, &lt;code&gt;pre-applypatch&lt;/code&gt;, and &lt;code&gt;post-applypatch&lt;/code&gt; hooks. See &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for more information.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;applypatch-msg&lt;/code&gt; 、 &lt;code&gt;pre-applypatch&lt;/code&gt; 、および &lt;code&gt;post-applypatch&lt;/code&gt; フックを実行できます。詳細については、&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2e5610ce87e5d01d8f8246892b4f05f886b6ad5a" translate="yes" xml:space="preserve">
          <source>This command can run &lt;code&gt;commit-msg&lt;/code&gt;, &lt;code&gt;prepare-commit-msg&lt;/code&gt;, &lt;code&gt;pre-commit&lt;/code&gt;, &lt;code&gt;post-commit&lt;/code&gt; and &lt;code&gt;post-rewrite&lt;/code&gt; hooks. See &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for more information.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;commit-msg&lt;/code&gt; 、 &lt;code&gt;prepare-commit-msg&lt;/code&gt; 、 &lt;code&gt;pre-commit&lt;/code&gt; 、 &lt;code&gt;post-commit&lt;/code&gt; および &lt;code&gt;post-rewrite&lt;/code&gt; フックを実行できます。詳細については、&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6ba8d48bf258fdf0b61e4a3a7667022fd45b3e45" translate="yes" xml:space="preserve">
          <source>This command creates an empty Git repository - basically a &lt;code&gt;.git&lt;/code&gt; directory with subdirectories for &lt;code&gt;objects&lt;/code&gt;, &lt;code&gt;refs/heads&lt;/code&gt;, &lt;code&gt;refs/tags&lt;/code&gt;, and template files. An initial &lt;code&gt;HEAD&lt;/code&gt; file that references the HEAD of the master branch is also created.</source>
          <target state="translated">このコマンドは、空のGitリポジトリを作成します-基本的に、 &lt;code&gt;objects&lt;/code&gt; 、 &lt;code&gt;refs/heads&lt;/code&gt; 、 &lt;code&gt;refs/tags&lt;/code&gt; 、およびテンプレートファイルのサブディレクトリを持つ &lt;code&gt;.git&lt;/code&gt; ディレクトリ。masterブランチのHEADを参照する最初の &lt;code&gt;HEAD&lt;/code&gt; ファイルも作成されます。</target>
        </trans-unit>
        <trans-unit id="f52be87adec196973421cd7319ee0f98c1860983" translate="yes" xml:space="preserve">
          <source>This command degenerates to download everything to complete the asked refs from the remote side when the local side does not have a common ancestor commit.</source>
          <target state="translated">このコマンドは、ローカル側に共通の祖先コミットがない場合に、リモート側から要求された refs を完了するためにすべてのものをダウンロードするように退化します。</target>
        </trans-unit>
        <trans-unit id="194b70091800ec19021441e8c1778ca9e02b53d5" translate="yes" xml:space="preserve">
          <source>This command ensures that the changes in the experimental branch are already in the current branch.</source>
          <target state="translated">このコマンドは、実験ブランチの変更がすでに現在のブランチにあることを保証します。</target>
        </trans-unit>
        <trans-unit id="1b788d383418fe8b134f7630991a2d6359c7dd7c" translate="yes" xml:space="preserve">
          <source>This command finds new changes in p4 and imports them as Git commits.</source>
          <target state="translated">このコマンドは、p4 の新しい変更点を見つけ、それを Git コミットとしてインポートします。</target>
        </trans-unit>
        <trans-unit id="4b11fc8efec3bd343a83e9f1aa4620a514b9ab8e" translate="yes" xml:space="preserve">
          <source>This command formats the lines of its standard input into a table with multiple columns. Each input line occupies one cell of the table. It is used internally by other git commands to format output into columns.</source>
          <target state="translated">このコマンドは、標準入力の行を複数の列を持つテーブルにフォーマットします。各入力行はテーブルのひとつのセルを占有します。これは、他の git コマンドで内部的に使用され、出力をカラムに整形するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ade7fdc971ed1f0936fb8fbff7bb1574367ca37b" translate="yes" xml:space="preserve">
          <source>This command is extremely useful if the frontend does not know (or does not care to know) what files are currently on the branch, and therefore cannot generate the proper &lt;code&gt;filedelete&lt;/code&gt; commands to update the content.</source>
          <target state="translated">このコマンドは、フロントエンドが現在ブランチ上にあるファイルを知らない（または知らない）場合に非常に役立ちます。そのため、コンテンツを更新するための適切な &lt;code&gt;filedelete&lt;/code&gt; コマンドを生成できません。</target>
        </trans-unit>
        <trans-unit id="5f45dc9e63088b4d8e620891decbfdd6655de376" translate="yes" xml:space="preserve">
          <source>This command is intended mostly for internal use by scripts automatically invoking &lt;code&gt;git merge&lt;/code&gt;.</source>
          <target state="translated">このコマンドは、主に &lt;code&gt;git merge&lt;/code&gt; を自動的に呼び出すスクリプトによる内部使用を目的としています。</target>
        </trans-unit>
        <trans-unit id="3710225b15829bc8cbeb92895b81ff709286e645" translate="yes" xml:space="preserve">
          <source>This command is recursive by default.</source>
          <target state="translated">このコマンドは、デフォルトでは再帰的です。</target>
        </trans-unit>
        <trans-unit id="6e8668d616c8790cb8d71e8720597de54ced7850" translate="yes" xml:space="preserve">
          <source>This command is used to combine all objects that do not currently reside in a &quot;pack&quot;, into a pack. It can also be used to re-organize existing packs into a single, more efficient pack.</source>
          <target state="translated">このコマンドは、現在 &quot;pack &quot;に存在しないすべてのオブジェクトを1つのpackにまとめるために使用します。また、既存のパックを一つの効率的なパックに再編成するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="e7cbc44be580e3c1734536d3564c4b9dc7e501fa" translate="yes" xml:space="preserve">
          <source>This command is used to solve the storage and performance problem by storing the refs in a single file, &lt;code&gt;$GIT_DIR/packed-refs&lt;/code&gt;. When a ref is missing from the traditional &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; directory hierarchy, it is looked up in this file and used if found.</source>
          <target state="translated">このコマンドは、単一のファイル &lt;code&gt;$GIT_DIR/packed-refs&lt;/code&gt; 格納することにより、ストレージとパフォーマンスの問題を解決するために使用されます。refが従来の &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; ディレクトリ階層から欠落している場合、このファイルで参照が検索され、見つかれば使用されます。</target>
        </trans-unit>
        <trans-unit id="43f707239bbecf8d6bf96bbdb4b367abb8fd5357" translate="yes" xml:space="preserve">
          <source>This command is usually not invoked directly by the end user. The UI for the protocol is on the &lt;code&gt;git archive&lt;/code&gt; side, and the program pair is meant to be used to get an archive from a remote repository.</source>
          <target state="translated">このコマンドは通常、エンドユーザーによって直接呼び出されることはありません。プロトコルのUIは &lt;code&gt;git archive&lt;/code&gt; 側にあり、プログラムのペアはリモートリポジトリからアーカイブを取得するために使用されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="17d67b43408b7b4804e33e1e3b79dc1fbf03af1b" translate="yes" xml:space="preserve">
          <source>This command is usually not invoked directly by the end user. The UI for the protocol is on the &lt;code&gt;git fetch-pack&lt;/code&gt; side, and the program pair is meant to be used to pull updates from a remote repository. For push operations, see &lt;code&gt;git send-pack&lt;/code&gt;.</source>
          <target state="translated">このコマンドは通常、エンドユーザーによって直接呼び出されることはありません。プロトコルのUIは &lt;code&gt;git fetch-pack&lt;/code&gt; 側にあり、プログラムペアはリモートリポジトリから更新をプルするために使用されることを意図しています。プッシュ操作については、 &lt;code&gt;git send-pack&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="36ac8b84f92c3cf141e5ae101adcc45178aae4c7" translate="yes" xml:space="preserve">
          <source>This command is usually not invoked directly by the end user. The UI for the protocol is on the &lt;code&gt;git send-pack&lt;/code&gt; side, and the program pair is meant to be used to push updates to remote repository. For pull operations, see &lt;a href=&quot;git-fetch-pack&quot;&gt;git-fetch-pack[1]&lt;/a&gt;.</source>
          <target state="translated">このコマンドは通常、エンドユーザーによって直接呼び出されることはありません。プロトコルのUIは &lt;code&gt;git send-pack&lt;/code&gt; 側にあり、プログラムペアはリモートリポジトリに更新をプッシュするために使用されることを意図しています。プル操作については、&lt;a href=&quot;git-fetch-pack&quot;&gt;git-fetch-pack [1]を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="f8cac5b996748b602d2e8f0cf9273cee3d1c4d80" translate="yes" xml:space="preserve">
          <source>This command lets you check that intermediate commits are compilable. The todo list becomes like that:</source>
          <target state="translated">このコマンドを使うと、中間コミットがコンパイル可能かどうかを確認できます。Todoリストはこのようになります。</target>
        </trans-unit>
        <trans-unit id="56bca57be11add071b8aeae38f6a28f443105856" translate="yes" xml:space="preserve">
          <source>This command manages the information recorded in the reflogs.</source>
          <target state="translated">このコマンドは、リブログに記録された情報を管理します。</target>
        </trans-unit>
        <trans-unit id="7c7ebb85111dd101dc1c2782f6e5cbc235a39c44" translate="yes" xml:space="preserve">
          <source>This command provides a way to interact with p4 repositories using Git.</source>
          <target state="translated">このコマンドは、Git を使って p4 リポジトリを操作する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="637c92f99feb8b30861eeaee2e3273c64a9b5351" translate="yes" xml:space="preserve">
          <source>This command reads some patches or commit messages from either the &amp;lt;file&amp;gt; arguments or the standard input if no &amp;lt;file&amp;gt; is specified. If &lt;code&gt;--parse&lt;/code&gt; is specified, the output consists of the parsed trailers.</source>
          <target state="translated">このコマンドは、&amp;lt;file&amp;gt;が指定されていない場合、&amp;lt;file&amp;gt;引数または標準入力からパッチまたはコミットメッセージを読み取ります。場合 &lt;code&gt;--parse&lt;/code&gt; が指定され、出力が解析されたトレーラーで構成されています。</target>
        </trans-unit>
        <trans-unit id="a38646d64359b52991af1358c674765acf2c0c11" translate="yes" xml:space="preserve">
          <source>This command should not list any commits. Otherwise, check out &lt;code&gt;master&lt;/code&gt; and merge &lt;code&gt;maint&lt;/code&gt; into it.</source>
          <target state="translated">このコマンドはコミットをリストするべきではありません。それ以外の場合は、 &lt;code&gt;master&lt;/code&gt; をチェックアウトし、 &lt;code&gt;maint&lt;/code&gt; をそれにマージします。</target>
        </trans-unit>
        <trans-unit id="6a853b09f1818b9d32f936bd42aa8a84af13b068" translate="yes" xml:space="preserve">
          <source>This command shows the differences between two versions of a patch series, or more generally, two commit ranges (ignoring merge commits).</source>
          <target state="translated">このコマンドは、パッチシリーズの2つのバージョン、より一般的には2つのコミット範囲(マージコミットを無視して)の違いを表示します。</target>
        </trans-unit>
        <trans-unit id="852903a68075d19a47d4520af94edde77996207f" translate="yes" xml:space="preserve">
          <source>This command stores credentials indefinitely on disk for use by future Git programs.</source>
          <target state="translated">このコマンドは、将来の Git プログラムで使用するための認証情報をディスク上に無期限に保存します。</target>
        </trans-unit>
        <trans-unit id="d143bf10d727fe2f5d0639ed85e199dd448d8bd2" translate="yes" xml:space="preserve">
          <source>This command updates the index using the current content found in the working tree, to prepare the content staged for the next commit. It typically adds the current content of existing paths as a whole, but with some options it can also be used to add content with only part of the changes made to the working tree files applied, or remove paths that do not exist in the working tree anymore.</source>
          <target state="translated">このコマンドは、作業ツリーで見つかった現在の内容を用いてインデックスを更新し、 次のコミットに向けてステージングされた内容を準備します。通常は、既存のパスの現在の内容を全体として追加しますが、オプションによっては、作業ツリーファイルに加えられた変更の一部だけを追加したり、作業ツリーに存在しないパスを削除したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="61eacd31ecbd262bdcbed11d9c6103318919d1be" translate="yes" xml:space="preserve">
          <source>This command uploads a mailbox generated with &lt;code&gt;git format-patch&lt;/code&gt; into an IMAP drafts folder. This allows patches to be sent as other email is when using mail clients that cannot read mailbox files directly. The command also works with any general mailbox in which emails have the fields &quot;From&quot;, &quot;Date&quot;, and &quot;Subject&quot; in that order.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;git format-patch&lt;/code&gt; で生成されたメールボックスをIMAP下書きフォルダーにアップロードします。これにより、メールボックスファイルを直接読み取ることができないメールクライアントを使用している場合に、他のメールと同じようにパッチを送信できます。このコマンドは、メールのフィールドが「From」、「Date」、「Subject」の順になっている一般的なメールボックスでも機能します。</target>
        </trans-unit>
        <trans-unit id="a3bcbdfcf8f3a072ac23f24cf310648f9691fb70" translate="yes" xml:space="preserve">
          <source>This command uses a binary search algorithm to find which commit in your project&amp;rsquo;s history introduced a bug. You use it by first telling it a &quot;bad&quot; commit that is known to contain the bug, and a &quot;good&quot; commit that is known to be before the bug was introduced. Then &lt;code&gt;git
bisect&lt;/code&gt; picks a commit between those two endpoints and asks you whether the selected commit is &quot;good&quot; or &quot;bad&quot;. It continues narrowing down the range until it finds the exact commit that introduced the change.</source>
          <target state="translated">このコマンドは、バイナリ検索アルゴリズムを使用して、プロジェクトの履歴でバグが発生したコミットを見つけます。まず、バグが含まれていることがわかっている「悪い」コミットと、バグが導入される前にわかっている「良い」コミットを伝えることによって、それを使用します。次に、 &lt;code&gt;git bisect&lt;/code&gt; が2つのエンドポイント間のコミットを選択し、選択したコミットが「良い」か「悪い」かを尋ねます。変更をもたらした正確なコミットが見つかるまで、範囲を絞り込み続けます。</target>
        </trans-unit>
        <trans-unit id="097f8af4b6f26b418927a5ca4b24d71746b1f843" translate="yes" xml:space="preserve">
          <source>This command uses the &lt;code&gt;diff.color.*&lt;/code&gt; and &lt;code&gt;pager.range-diff&lt;/code&gt; settings (the latter is on by default). See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;diff.color.*&lt;/code&gt; および &lt;code&gt;pager.range-diff&lt;/code&gt; 設定を使用します（後者はデフォルトでオンです）。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="03bab6a03561ee7ff2e9bf92505bcdd5322bfb51" translate="yes" xml:space="preserve">
          <source>This command will fail with non-zero status upon error. Some exit codes are:</source>
          <target state="translated">このコマンドはエラー時にゼロ以外のステータスで失敗します。いくつかの終了コードがあります。</target>
        </trans-unit>
        <trans-unit id="7ed6af6e5518c122d94f4b8fea824fc7938bd5aa" translate="yes" xml:space="preserve">
          <source>This command will fetch changes from the remote branches to your remote-tracking branches &lt;code&gt;origin/*&lt;/code&gt;, and merge the default branch into the current branch.</source>
          <target state="translated">このコマンドは、リモートブランチからリモートトラッキングブランチ &lt;code&gt;origin/*&lt;/code&gt; への変更をフェッチし、デフォルトのブランチを現在のブランチにマージします。</target>
        </trans-unit>
        <trans-unit id="99c24081605f25434a1fa0a51df82045bf4b7763" translate="yes" xml:space="preserve">
          <source>This command will save your changes away to the &lt;code&gt;stash&lt;/code&gt;, and reset your working tree and the index to match the tip of your current branch. Then you can make your fix as usual.</source>
          <target state="translated">このコマンドは変更を &lt;code&gt;stash&lt;/code&gt; に保存し、作業ツリーとインデックスをリセットして現在のブランチの先端に一致させます。その後、通常どおり修正を行うことができます。</target>
        </trans-unit>
        <trans-unit id="cb41b9bb98cbe715b8d6c0b50eb0b52309cdc91a" translate="yes" xml:space="preserve">
          <source>This commit will get blown away so a throw-away log message is OK.</source>
          <target state="translated">このコミットは吹き飛ばされてしまうので、投げやりなログメッセージでOKです。</target>
        </trans-unit>
        <trans-unit id="068d7057b3017084327709c3e61c2e224fb2a5f6" translate="yes" xml:space="preserve">
          <source>This commits all other changes in the index.</source>
          <target state="translated">これはインデックス内の他のすべての変更をコミットします。</target>
        </trans-unit>
        <trans-unit id="1d649ab8ff53024e7549864469811ccee0abf2e7" translate="yes" xml:space="preserve">
          <source>This commits your first edits in &lt;code&gt;branch1&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;branch1&lt;/code&gt; での最初の編集がコミットされます。</target>
        </trans-unit>
        <trans-unit id="8bc13c84a009ea0d6abb173ac6100dc00ae7606a" translate="yes" xml:space="preserve">
          <source>This compares stage 2 (our branch), stage 3 (their branch) and the working tree file and outputs a combined diff, similar to the way &lt;code&gt;diff-tree&lt;/code&gt; shows a merge commit with these flags.</source>
          <target state="translated">これは、ステージ2（私たちのブランチ）、ステージ3（それらのブランチ）、および作業ツリーファイルを比較し、 &lt;code&gt;diff-tree&lt;/code&gt; がこれらのフラグを使用したマージコミットを示すのと同様に、結合されたdiffを出力します。</target>
        </trans-unit>
        <trans-unit id="d3fe164a17e549b712f12743eb90dc676fb8455c" translate="yes" xml:space="preserve">
          <source>This computation involves traversing all the reachable objects, i.e. it has the same cost as &lt;code&gt;git prune&lt;/code&gt;. It is primarily intended to fix corruption caused by garbage collecting using older versions of Git, which didn&amp;rsquo;t protect objects referred to by reflogs.</source>
          <target state="translated">この計算には、到達可能なすべてのオブジェクトのトラバースが含まれます。つまり、 &lt;code&gt;git prune&lt;/code&gt; と同じコストです。これは主に、reflogによって参照されるオブジェクトを保護していなかった古いバージョンのGitを使用したガベージコレクションによって引き起こされる破損を修正することを目的としています。</target>
        </trans-unit>
        <trans-unit id="9e7c3905269f2318ce8a27a07b91b053d9dd7129" translate="yes" xml:space="preserve">
          <source>This configuration can be specified multiple times in order to allow multiple notes refs to be included. In that case, it will behave similarly to multiple &lt;code&gt;--[no-]notes[=]&lt;/code&gt; options passed in. That is, a value of &lt;code&gt;true&lt;/code&gt; will show the default notes, a value of &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; will also show notes from that notes ref and a value of &lt;code&gt;false&lt;/code&gt; will negate previous configurations and not show notes.</source>
          <target state="translated">この構成を複数回指定して、複数のノート参照を含めることができます。その場合、複数の &lt;code&gt;--[no-]notes[=]&lt;/code&gt; オプションを渡した場合と同様に動作します。つまり、 &lt;code&gt;true&lt;/code&gt; の値はデフォルトのノートを表示し、 &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; の値はそのノートのノートも表示しますrefおよび &lt;code&gt;false&lt;/code&gt; の値は、以前の構成を無効にし、メモを表示しません。</target>
        </trans-unit>
        <trans-unit id="e6aa4372bde5e931f9e4e006e5a3cd0aea5ccf17" translate="yes" xml:space="preserve">
          <source>This configuration is used in two ways:</source>
          <target state="translated">この設定は2つの方法で使用されます。</target>
        </trans-unit>
        <trans-unit id="06f31556dacb48424e7a1be662dd26364f785ce9" translate="yes" xml:space="preserve">
          <source>This configuration variable is useful in cases where you&amp;rsquo;d like to centrally configure your Git hooks instead of configuring them on a per-repository basis, or as a more flexible and centralized alternative to having an &lt;code&gt;init.templateDir&lt;/code&gt; where you&amp;rsquo;ve changed default hooks.</source>
          <target state="translated">この構成変数は、Gitフックをリポジトリごとに構成する代わりに一元的に構成する場合、またはデフォルトのフックを変更した &lt;code&gt;init.templateDir&lt;/code&gt; を使用するよりも柔軟で一元化された代替手段として役立ちます。 。</target>
        </trans-unit>
        <trans-unit id="eed4a11499740f4bb5f61d3ce7354c5409f33bf3" translate="yes" xml:space="preserve">
          <source>This configures how whitespace is ignored when performing the move detection for &lt;code&gt;--color-moved&lt;/code&gt;. It can be set by the &lt;code&gt;diff.colorMovedWS&lt;/code&gt; configuration setting. These modes can be given as a comma separated list:</source>
          <target state="translated">&lt;code&gt;--color-moved&lt;/code&gt; の移動検出を実行するときに空白が無視される方法を構成します。これは、 &lt;code&gt;diff.colorMovedWS&lt;/code&gt; 構成設定で設定できます。これらのモードは、コンマ区切りのリストとして指定できます。</target>
        </trans-unit>
        <trans-unit id="9b4ea1fd788cef298d939e77017eddec04b80461" translate="yes" xml:space="preserve">
          <source>This configures how whitespace is ignored when performing the move detection for &lt;code&gt;--color-moved&lt;/code&gt;. These modes can be given as a comma separated list:</source>
          <target state="translated">&lt;code&gt;--color-moved&lt;/code&gt; の移動検出を実行するときに空白が無視される方法を構成します。これらのモードは、コンマ区切りのリストとして指定できます。</target>
        </trans-unit>
        <trans-unit id="77030a3f3e0bddf7aada34bc0939552bc0993e3c" translate="yes" xml:space="preserve">
          <source>This counts the number of unpacked object files and disk space consumed by them, to help you decide when it is a good time to repack.</source>
          <target state="translated">これは、アンパックされたオブジェクトファイルの数と、それらによって消費されたディスク容量をカウントし、再パックするのに適した時期を決定するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="3e67b0f2a3d6f811dcdec6a80edd2cc8d01b0b6b" translate="yes" xml:space="preserve">
          <source>This creates a &quot;lightweight&quot; tag. If you would also like to include a comment with the tag, and possibly sign it cryptographically, then you should create a tag object instead; see the &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt; man page for details.</source>
          <target state="translated">これにより、「軽量」タグが作成されます。タグ付きのコメントも含め、暗号化して署名したい場合は、代わりにタグオブジェクトを作成する必要があります。詳細は&lt;a href=&quot;git-tag&quot;&gt;git-tag [1]の&lt;/a&gt; manページをご覧ください。</target>
        </trans-unit>
        <trans-unit id="687e61032de29ec5a828bf99d3854a432acd2a82" translate="yes" xml:space="preserve">
          <source>This creates a new directory &quot;myrepo&quot; containing a clone of Alice&amp;rsquo;s repository. The clone is on an equal footing with the original project, possessing its own copy of the original project&amp;rsquo;s history.</source>
          <target state="translated">これにより、アリスのリポジトリのクローンを含む新しいディレクトリ「myrepo」が作成されます。クローンは元のプロジェクトと同等の立場にあり、元のプロジェクトの履歴の独自のコピーを持っています。</target>
        </trans-unit>
        <trans-unit id="c2fd84fc2fa04021fed2cadb8707ca64b05a22fb" translate="yes" xml:space="preserve">
          <source>This creates a single &quot;pack file&quot; in .git/objects/pack/ containing all currently unpacked objects. You can then run</source>
          <target state="translated">これにより、.git/objects/pack/にひとつの &quot;pack ファイル&quot; が作成され、現在アンパックされているすべてのオブジェクトが含まれます。これを実行するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="bf43931e74b20a3da5197ed923f890fe71d72016" translate="yes" xml:space="preserve">
          <source>This default configuration is achieved by creating references to the remote branch heads under &lt;code&gt;refs/remotes/origin&lt;/code&gt; and by initializing &lt;code&gt;remote.origin.url&lt;/code&gt; and &lt;code&gt;remote.origin.fetch&lt;/code&gt; configuration variables.</source>
          <target state="translated">このデフォルト構成は、 &lt;code&gt;refs/remotes/origin&lt;/code&gt; の下にリモートブランチヘッドへの参照を作成し、 &lt;code&gt;remote.origin.url&lt;/code&gt; および &lt;code&gt;remote.origin.fetch&lt;/code&gt; 構成変数を初期化することによって実現されます。</target>
        </trans-unit>
        <trans-unit id="984768ad68337dfe2b0015e657c9f4f069afabc8" translate="yes" xml:space="preserve">
          <source>This defines two submodules, &lt;code&gt;libfoo&lt;/code&gt; and &lt;code&gt;libbar&lt;/code&gt;. These are expected to be checked out in the paths &lt;code&gt;include/foo&lt;/code&gt; and &lt;code&gt;include/bar&lt;/code&gt;, and for both submodules a URL is specified which can be used for cloning the submodules.</source>
          <target state="translated">これは、二つのサブモジュール、定義 &lt;code&gt;libfoo&lt;/code&gt; と &lt;code&gt;libbar&lt;/code&gt; を。これらはパス &lt;code&gt;include/foo&lt;/code&gt; および &lt;code&gt;include/bar&lt;/code&gt; でチェックアウトされることが期待されており、両方のサブモジュールに対して、サブモジュールの複製に使用できるURLが指定されています。</target>
        </trans-unit>
        <trans-unit id="57db5304522b1070a0df1071ce5df5d38ea7d002" translate="yes" xml:space="preserve">
          <source>This describes how Tony Luck uses Git in his role as maintainer of the IA64 architecture for the Linux kernel.</source>
          <target state="translated">LinuxカーネルのIA64アーキテクチャのメンテナとしてTony LuckがどのようにGitを使っているかを説明しています。</target>
        </trans-unit>
        <trans-unit id="c9e275f2996b22cd4415c594fae8f08a0dfe70e8" translate="yes" xml:space="preserve">
          <source>This determines the coloring scheme to be applied to blame output. It can be &lt;code&gt;repeatedLines&lt;/code&gt;, &lt;code&gt;highlightRecent&lt;/code&gt;, or &lt;code&gt;none&lt;/code&gt; which is the default.</source>
          <target state="translated">これは、blame出力に適用される配色を決定します。それはすることができ &lt;code&gt;repeatedLines&lt;/code&gt; 、 &lt;code&gt;highlightRecent&lt;/code&gt; 、または &lt;code&gt;none&lt;/code&gt; デフォルトです。</target>
        </trans-unit>
        <trans-unit id="56ee29b22f07db9306c3380b74b5b0180828e415" translate="yes" xml:space="preserve">
          <source>This directory is ignored if $GIT_COMMON_DIR is set and &quot;$GIT_COMMON_DIR/objects&quot; will be used instead.</source>
          <target state="translated">GIT_COMMON_DIRが設定されている場合、このディレクトリは無視され、代わりに&quot;$GIT_COMMON_DIR/objects &quot;が使用されます。</target>
        </trans-unit>
        <trans-unit id="2072b137cd96280de0e098678b51f23a76dcd0dc" translate="yes" xml:space="preserve">
          <source>This disables potentially expensive checks to workaround broken symlinks checked into SVN by broken clients. Set this option to &quot;false&quot; if you track a SVN repository with many empty blobs that are not symlinks. This option may be changed while &lt;code&gt;git svn&lt;/code&gt; is running and take effect on the next revision fetched. If unset, &lt;code&gt;git svn&lt;/code&gt; assumes this option to be &quot;true&quot;.</source>
          <target state="translated">これは、壊れたクライアントによってSVNにチェックインされた壊れたシンボリックリンクを回避するために、潜在的に高価なチェックを無効にします。シンボリックリンクではない空のblobが多数あるSVNリポジトリを追跡する場合は、このオプションを「false」に設定します。このオプションは &lt;code&gt;git svn&lt;/code&gt; の実行中に変更され、フェッチされた次のリビジョンで有効になります。設定されていない場合、 &lt;code&gt;git svn&lt;/code&gt; はこのオプションを「true」と見なします。</target>
        </trans-unit>
        <trans-unit id="006e62625e60aabc7f31fa591f6f9b4a3bd2a878" translate="yes" xml:space="preserve">
          <source>This document attempts to write down and motivate some of the workflow elements used for &lt;code&gt;git.git&lt;/code&gt; itself. Many ideas apply in general, though the full workflow is rarely required for smaller projects with fewer people involved.</source>
          <target state="translated">このドキュメントは、 &lt;code&gt;git.git&lt;/code&gt; 自体に使用されるワークフロー要素のいくつかを書き留めて動機づけることを試みます。一般的に多くのアイデアが当てはまりますが、関係する人が少ない小規模なプロジェクトでは、完全なワークフローが必要になることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="8cd9193645885514540ac19f3167f508bebca422" translate="yes" xml:space="preserve">
          <source>This document presents a specification for a version 2 of Git&amp;rsquo;s wire protocol. Protocol v2 will improve upon v1 in the following ways:</source>
          <target state="translated">このドキュメントは、Gitのワイヤプロトコルのバージョン2の仕様を示しています。プロトコルv2は、v1を次のように改善します。</target>
        </trans-unit>
        <trans-unit id="46bd1a26c48d1772be26d3d869cc4b6544004ea1" translate="yes" xml:space="preserve">
          <source>This document shows the &quot;raw&quot; syntax as seen by git. The shell and other UIs might require additional quoting to protect special characters and to avoid word splitting.</source>
          <target state="translated">このドキュメントでは、git から見た &quot;生の&quot; 構文を示しています。シェルやその他の UI では、特殊文字を保護したり単語の分割を避けるために追加のクォートが必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="a76f8971dde9f8810b677765aca0d70490d9f8fa" translate="yes" xml:space="preserve">
          <source>This document will serve as the master list for extensions. Any implementation wishing to define a new extension should make a note of it here, in order to claim the name.</source>
          <target state="translated">このドキュメントは拡張機能のマスターリストとして機能します。新しい拡張機能を定義したい実装は、その名前を主張するためにここにメモしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="d24a591988945bec7d040b25bd5a37c73014bcf3" translate="yes" xml:space="preserve">
          <source>This does not affect &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; or the &lt;code&gt;git-diff-*&lt;/code&gt; plumbing commands. Can be overridden on the command line with the &lt;code&gt;--color[=&amp;lt;when&amp;gt;]&lt;/code&gt; option.</source>
          <target state="translated">これは&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt;または &lt;code&gt;git-diff-*&lt;/code&gt; plumbingコマンドには影響しません。コマンドラインで &lt;code&gt;--color[=&amp;lt;when&amp;gt;]&lt;/code&gt; オプションを使用してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="99af460532d2c9f72e65ed17f7464c8aa563e1f4" translate="yes" xml:space="preserve">
          <source>This does not force normalization of text files, but does ensure that text files that you introduce to the repository have their line endings normalized to LF when they are added, and that files that are already normalized in the repository stay normalized.</source>
          <target state="translated">これはテキストファイルの正規化を強制するものではありませんが、リポジトリに導入するテキストファイルが追加されたときに行末がLFに正規化され、リポジトリで既に正規化されているファイルは正規化されたままであることを保証します。</target>
        </trans-unit>
        <trans-unit id="257328db317fb853114a41f8430f87cd826d08a0" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t interfere with interoperating with the Subversion repository you cloned from, but if you wish for your local Git repository to be able to interoperate with someone else&amp;rsquo;s local Git repository, either don&amp;rsquo;t use this option or you should both use it in the same local time zone.</source>
          <target state="translated">これは、クローン元のSubversionリポジトリとの相互運用には影響しませんが、ローカルGitリポジトリを他の誰かのローカルGitリポジトリと相互運用できるようにする場合は、このオプションを使用しないか、両方で使用する必要があります。同じローカルタイムゾーン。</target>
        </trans-unit>
        <trans-unit id="45497ef8f3614492732f059c04bc30af3c6593e9" translate="yes" xml:space="preserve">
          <source>This effectively runs &lt;code&gt;add --interactive&lt;/code&gt;, but bypasses the initial command menu and directly jumps to the &lt;code&gt;patch&lt;/code&gt; subcommand. See &amp;ldquo;Interactive mode&amp;rdquo; for details.</source>
          <target state="translated">これは効果的に &lt;code&gt;add --interactive&lt;/code&gt; を実行しますが、初期コマンドメニューをバイパスし、直接 &lt;code&gt;patch&lt;/code&gt; サブコマンドにジャンプします。詳細については、「インタラクティブモード」を参照してください。</target>
        </trans-unit>
        <trans-unit id="53c54ba0465bbf9916ac436659dbf61aedb86156" translate="yes" xml:space="preserve">
          <source>This enables parent rewriting, see &lt;code&gt;History Simplification&lt;/code&gt; above.</source>
          <target state="translated">これにより、親の書き換えが可能になります。上記の &lt;code&gt;History Simplification&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="ccdf590466d01d04dcf6da8ad6a6bec9f02c4d8e" translate="yes" xml:space="preserve">
          <source>This environment allows the specification of an alternate index file. If not specified, the default of &lt;code&gt;$GIT_DIR/index&lt;/code&gt; is used.</source>
          <target state="translated">この環境では、代替インデックスファイルを指定できます。指定しない場合、デフォルトの &lt;code&gt;$GIT_DIR/index&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="2abd55a6650395bf249165e2f6568e98ab14958c" translate="yes" xml:space="preserve">
          <source>This environment variable allows the specification of an index version for new repositories. It won&amp;rsquo;t affect existing index files. By default index file version 2 or 3 is used. See &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt; for more information.</source>
          <target state="translated">この環境変数を使用すると、新しいリポジトリのインデックスバージョンを指定できます。既存のインデックスファイルには影響しません。デフォルトでは、インデックスファイルバージョン2または3が使用されます。詳細については、&lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2763e4fc7ba1973ac90184c067d20f9d0fda70a8" translate="yes" xml:space="preserve">
          <source>This environment variable overrides &lt;code&gt;$EDITOR&lt;/code&gt; and &lt;code&gt;$VISUAL&lt;/code&gt;. It is used by several Git commands when, on interactive mode, an editor is to be launched. See also &lt;a href=&quot;git-var&quot;&gt;git-var[1]&lt;/a&gt; and the &lt;code&gt;core.editor&lt;/code&gt; option in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">この環境変数は、 &lt;code&gt;$EDITOR&lt;/code&gt; および &lt;code&gt;$VISUAL&lt;/code&gt; オーバーライドします。これは、対話モードでエディターを起動するときに、いくつかのGitコマンドで使用されます。&lt;a href=&quot;git-var&quot;&gt;git-var [1]&lt;/a&gt;および&lt;a href=&quot;git-config&quot;&gt;git-config [1]の&lt;/a&gt; &lt;code&gt;core.editor&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="ddbc158f0dcc3c8ea52494b42fbb66d15e06e460" translate="yes" xml:space="preserve">
          <source>This environment variable overrides &lt;code&gt;$PAGER&lt;/code&gt;. If it is set to an empty string or to the value &quot;cat&quot;, Git will not launch a pager. See also the &lt;code&gt;core.pager&lt;/code&gt; option in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">この環境変数は &lt;code&gt;$PAGER&lt;/code&gt; オーバーライドします。空の文字列または値「cat」に設定されている場合、Gitはポケットベルを起動しません。&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;の &lt;code&gt;core.pager&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="25ea93764f52eb3dcc477c86398962bd9bbded98" translate="yes" xml:space="preserve">
          <source>This event contains the command name for this git process and the hierarchy of commands from parent git processes.</source>
          <target state="translated">このイベントには、この git プロセスのコマンド名と親 git プロセスからのコマンドの階層が含まれます。</target>
        </trans-unit>
        <trans-unit id="f5d9f72db5c7ffa9776d5c71964338d54a2515a4" translate="yes" xml:space="preserve">
          <source>This event contains the complete argv received by main().</source>
          <target state="translated">このイベントには、main()が受信した完全な argv が含まれます。</target>
        </trans-unit>
        <trans-unit id="2a4c1f111536d47e2687ea692bfe5bd399b4307d" translate="yes" xml:space="preserve">
          <source>This event contains the discovered full path of the git executable (on platforms that are configured to resolve it).</source>
          <target state="translated">このイベントには、発見された git 実行ファイルのフルパスが含まれます (これを解決するように設定されているプラットフォームでは)。</target>
        </trans-unit>
        <trans-unit id="c8af8dbf59abf700f44d6449c7c951b54692bd2e" translate="yes" xml:space="preserve">
          <source>This event defines a repo-id and associates it with the root of the worktree.</source>
          <target state="translated">このイベントはレポIDを定義し、ワークツリーのルートに関連付けます。</target>
        </trans-unit>
        <trans-unit id="efbcacd1a490c688869fdd46397140e75919d7ab" translate="yes" xml:space="preserve">
          <source>This event describes a child process that is about to be spawned.</source>
          <target state="translated">このイベントは、スポーンされようとしている子プロセスを記述します。</target>
        </trans-unit>
        <trans-unit id="8c8f935852467fd7c3b46787d77518dc3611a986" translate="yes" xml:space="preserve">
          <source>This event gives the version of the executable and the EVENT format. It should always be the first event in a trace session. The EVENT format version will be incremented if new event types are added, if existing fields are removed, or if there are significant changes in interpretation of existing events or fields. Smaller changes, such as adding a new field to an existing event, will not require an increment to the EVENT format version.</source>
          <target state="translated">このイベントは、実行ファイルのバージョンと EVENT のフォーマットを提供します。これは常にトレースセッションの最初のイベントでなければなりません。新しいイベントタイプが追加されたり、既存のフィールドが削除されたり、既存のイベントやフィールドの解釈に重大な変更があった場合、EVENT フォーマットのバージョンはインクリメントされます。既存のイベントに新しいフィールドを追加するなどの小さな変更は、EVENT フォーマットのバージョンをインクリメントする必要はありません。</target>
        </trans-unit>
        <trans-unit id="7ea085d0e611d87af89c62af2b70656c0016dc7e" translate="yes" xml:space="preserve">
          <source>This event is emitted by the Trace2 &lt;code&gt;atexit&lt;/code&gt; routine during final shutdown. It should be the last event emitted by the process.</source>
          <target state="translated">このイベントは、最後のシャットダウン中にTrace2 &lt;code&gt;atexit&lt;/code&gt; ルーチンによって発行されます。これは、プロセスによって発行された最後のイベントである必要があります。</target>
        </trans-unit>
        <trans-unit id="0b20979b7d0436896a9e4dd619b31c2f047cbd64" translate="yes" xml:space="preserve">
          <source>This event is emitted when git calls &lt;code&gt;exit()&lt;/code&gt;.</source>
          <target state="translated">このイベントは、gitが &lt;code&gt;exit()&lt;/code&gt; を呼び出したときに発生します。</target>
        </trans-unit>
        <trans-unit id="9c63cb7135e802e553dc499a675da732d4f96c3a" translate="yes" xml:space="preserve">
          <source>This event is emitted when one of the &lt;code&gt;error()&lt;/code&gt;, &lt;code&gt;die()&lt;/code&gt;, or &lt;code&gt;usage()&lt;/code&gt; functions are called.</source>
          <target state="translated">このイベントは、 &lt;code&gt;error()&lt;/code&gt; 、 &lt;code&gt;die()&lt;/code&gt; 、または &lt;code&gt;usage()&lt;/code&gt; 関数のいずれかが呼び出されたときに発生します。</target>
        </trans-unit>
        <trans-unit id="ebb8b872e605289564f67171a3133d84781ab210" translate="yes" xml:space="preserve">
          <source>This event is emitted when the program is terminated by a user signal. Depending on the platform, the signal event may prevent the &quot;atexit&quot; event from being generated.</source>
          <target state="translated">このイベントは、ユーザ信号によってプログラムが終了したときに発生します。プラットフォームによっては、シグナルイベントによって &quot;atexit &quot;イベントが発生しなくなる場合があります。</target>
        </trans-unit>
        <trans-unit id="2ca8802f12c75856c4e7ea399ac7a1939e2a37eb" translate="yes" xml:space="preserve">
          <source>This event is generated after the current process has returned from the waitpid() and collected the exit information from the child.</source>
          <target state="translated">このイベントは、現在のプロセスが waitpid()から戻り、子プロセスの終了情報を収集した後に生成されます。</target>
        </trans-unit>
        <trans-unit id="9fe6d803410a7d3a5cd4bc2114534352d230200b" translate="yes" xml:space="preserve">
          <source>This event is generated before git attempts to &lt;code&gt;exec()&lt;/code&gt; another command rather than starting a child process.</source>
          <target state="translated">このイベントは、git が子プロセスを開始するのではなく、別のコマンドを &lt;code&gt;exec()&lt;/code&gt; する前に生成されます。</target>
        </trans-unit>
        <trans-unit id="93caa8939f471f1240286ec30c6905ef3996f20e" translate="yes" xml:space="preserve">
          <source>This event is generated if the &lt;code&gt;exec()&lt;/code&gt; fails and control returns to the current git command.</source>
          <target state="translated">このイベントは、 &lt;code&gt;exec()&lt;/code&gt; が失敗し、制御が現在のgitコマンドに戻った場合に生成されます。</target>
        </trans-unit>
        <trans-unit id="814427d239ec02f31ac7bf0fb913766e18bfb53e" translate="yes" xml:space="preserve">
          <source>This event is generated to log a global parameter.</source>
          <target state="translated">このイベントは、グローバルパラメータをログに記録するために生成されます。</target>
        </trans-unit>
        <trans-unit id="54b6cc61590e1e0eba249cc8ddd71ddff154355b" translate="yes" xml:space="preserve">
          <source>This event is generated to log a pre-formatted JSON string containing structured data.</source>
          <target state="translated">このイベントは、構造化データを含む事前にフォーマットされた JSON 文字列をログに記録するために生成されます。</target>
        </trans-unit>
        <trans-unit id="0ee97bbcf1fde0cf306363257efe6b7de578045e" translate="yes" xml:space="preserve">
          <source>This event is generated to log a thread- and region-local key/value pair.</source>
          <target state="translated">このイベントは、スレッドとリージョンローカルのキー/値のペアをログに記録するために生成されます。</target>
        </trans-unit>
        <trans-unit id="4caa8d05330c9e1126d8391705e312b0d8975d63" translate="yes" xml:space="preserve">
          <source>This event is generated when a thread exits. It is generated from &lt;strong&gt;within&lt;/strong&gt; the thread&amp;rsquo;s thread-proc (for TLS reasons).</source>
          <target state="translated">このイベントは、スレッドの終了時に生成されます。これは、スレッドのthread-proc &lt;strong&gt;内&lt;/strong&gt;から生成され&lt;strong&gt;ます&lt;/strong&gt;（TLSのため）。</target>
        </trans-unit>
        <trans-unit id="eba565beaf1b2269c764c147f5196869afe38bce" translate="yes" xml:space="preserve">
          <source>This event is generated when a thread is started. It is generated from &lt;strong&gt;within&lt;/strong&gt; the new thread&amp;rsquo;s thread-proc (for TLS reasons).</source>
          <target state="translated">このイベントは、スレッドが開始されたときに生成されます。新しいスレッドのthread-proc &lt;strong&gt;内&lt;/strong&gt;から生成され&lt;strong&gt;ます&lt;/strong&gt;（TLSのため）。</target>
        </trans-unit>
        <trans-unit id="1684fe3e3862662b36c1dfb0c9bb20558e1f338a" translate="yes" xml:space="preserve">
          <source>This event is generated when entering a region.</source>
          <target state="translated">このイベントは、地域に入ったときに発生します。</target>
        </trans-unit>
        <trans-unit id="809d72e4f54bac6c7054af4e990fa8c97e8c764d" translate="yes" xml:space="preserve">
          <source>This event is generated when leaving a region.</source>
          <target state="translated">このイベントはリージョンを離れるときに発生します。</target>
        </trans-unit>
        <trans-unit id="1e6a7368deeb7ec580313fc82400f1c12d17672a" translate="yes" xml:space="preserve">
          <source>This event is present when an alias is expanded.</source>
          <target state="translated">このイベントはエイリアスが展開されたときに発生します。</target>
        </trans-unit>
        <trans-unit id="bca802363ffa9599d9e13df71e2f62ec1454e32f" translate="yes" xml:space="preserve">
          <source>This event is written to the git-trace2-discard sentinel file if there are too many files in the target trace directory (see the trace2.maxFiles config option).</source>
          <target state="translated">このイベントは、ターゲットのトレースディレクトリにファイルが多すぎる場合に git-trace2-discard sentinel ファイルに書き込まれます (trace2.maxFiles 設定オプションを参照ください)。</target>
        </trans-unit>
        <trans-unit id="8c2ad60a0d9356a6e908b18056fbac1c2b1d4129" translate="yes" xml:space="preserve">
          <source>This event, when present, describes the command variant This event may be emitted more than once.</source>
          <target state="translated">このイベントが存在する場合、このイベントはコマンドバリアントを記述します。 このイベントは複数回発行される可能性があります。</target>
        </trans-unit>
        <trans-unit id="3e7d09cee878b03064fb9d9484c73f3f00225826" translate="yes" xml:space="preserve">
          <source>This example also shows that thread names are assigned in a racy manner as each thread starts and allocates TLS storage.</source>
          <target state="translated">この例でも、各スレッドが起動してTLSストレージを確保する際に、スレッド名がキビキビと割り当てられていることがわかります。</target>
        </trans-unit>
        <trans-unit id="e296b28f1fcad64b66f85f9abe931f54fc5fbde0" translate="yes" xml:space="preserve">
          <source>This example imports a new remote &quot;p4/proj2&quot; into an existing Git repository:</source>
          <target state="translated">この例では、新しいリモートの「p4/proj2」を既存のGitリポジトリにインポートしています。</target>
        </trans-unit>
        <trans-unit id="7cbbc9fac80d3f9e05217d26ad6f34ea5097abe6" translate="yes" xml:space="preserve">
          <source>This example shows that the index contained 3552 entries.</source>
          <target state="translated">この例は、インデックスに3552個のエントリが含まれていることを示しています。</target>
        </trans-unit>
        <trans-unit id="af5672891a1be21669d22b688901415e2cf060c3" translate="yes" xml:space="preserve">
          <source>This expands to the object name of the delta base for the given object, if it is stored as a delta. Otherwise it expands to the null object name (all zeroes).</source>
          <target state="translated">これは、与えられたオブジェクトのデルタベースがデルタとして格納されている場合、そのオブジェクト名に展開されます。そうでない場合は、ヌルのオブジェクト名(すべてゼロ)に展開されます。</target>
        </trans-unit>
        <trans-unit id="1a642986ccbacca12888668bff4ca6d3b1007b62" translate="yes" xml:space="preserve">
          <source>This explanation comes for &quot;free&quot; because there was no change. Similarly &lt;code&gt;C&lt;/code&gt; could be explained using &lt;code&gt;1&lt;/code&gt;, but that comes at some cost c&amp;gt;0 because of the modification:</source>
          <target state="translated">変更がなかったため、この説明は「無料」で行われます。同様に、 &lt;code&gt;C&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; を使用して説明できますが、変更のためにc&amp;gt; 0のコストがかかります。</target>
        </trans-unit>
        <trans-unit id="86a0b58a904e042293eb0ea80455653f123e7d4e" translate="yes" xml:space="preserve">
          <source>This extended format can be useful if rename or copy detection is active, to allow you to see the original name of the file in different parents.</source>
          <target state="translated">この拡張フォーマットは、名前の変更やコピー検出がアクティブな場合に便利で、異なる親でファイルの元の名前を見ることができます。</target>
        </trans-unit>
        <trans-unit id="fc95481325c82bdecdaa23291b735168b05af418" translate="yes" xml:space="preserve">
          <source>This extension does not change git&amp;rsquo;s behavior at all. It is useful only for testing format-1 compatibility.</source>
          <target state="translated">この拡張機能は、gitの動作をまったく変更しません。これは、フォーマット1の互換性をテストする場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="24a20ccff9f7f9f91cdf61fb876086b44fc5be61" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis by setting repository&amp;rsquo;s &lt;code&gt;gitweb.pickaxe&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.pickaxe&lt;/code&gt; 構成変数（ブール値）を設定することにより、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="3fcd9d965aa29d51e3ab01e56c522e086b7f545b" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.avatar&lt;/code&gt; configuration variable.</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.avatar&lt;/code&gt; 構成変数を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="da6908103a49ae5e820a33c13aadd5dfdd3e67a7" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.blame&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.blame&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="1d6d167abae14ab18966eab440f954ed6085f29c" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.grep&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.grep&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="dd4f802848cf6cbdc7682aeefb00472f2c444c9e" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.highlight&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.highlight&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="a8e82652b1c51e397e7f1e31621e9084d5611fda" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.patches&lt;/code&gt; configuration variable (integer).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.patches&lt;/code&gt; 構成変数（整数）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="a0528d6fc23cb2716835712f44b5daf955251062" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.remote_heads&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.remote_heads&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="58b983175f59d7aad97dac71b32251a2f4a8c4a0" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.showSizes&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.showSizes&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="ee33afe943a28f48529ed67cc410ad185ea09f23" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.snapshot&lt;/code&gt; configuration variable, which contains a comma separated list of formats or &quot;none&quot; to disable snapshots. Unknown values are ignored.</source>
          <target state="translated">この機能は、リポジトリーの &lt;code&gt;gitweb.snapshot&lt;/code&gt; 構成変数を介してリポジトリーごとに構成できます。これには、フォーマットのコンマ区切りリストまたはスナップショットを無効にする「なし」が含まれます。不明な値は無視されます。</target>
        </trans-unit>
        <trans-unit id="c2467a6f49bad0810d0f5e1c4a51888ceb4f5b0f" translate="yes" xml:space="preserve">
          <source>This feature can be configured on per-repository basis after setting $feature{&lt;code&gt;extra-branch-refs&lt;/code&gt;}{&lt;code&gt;override&lt;/code&gt;} to true, via repository&amp;rsquo;s &lt;code&gt;gitweb.extraBranchRefs&lt;/code&gt; configuration variable, which contains a space separated list of refs. An example:</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.extraBranchRefs&lt;/code&gt; 構成変数を介して$ feature { &lt;code&gt;extra-branch-refs&lt;/code&gt; } { &lt;code&gt;override&lt;/code&gt; }をtrue に設定した後、リポジトリごとに構成できます。例：</target>
        </trans-unit>
        <trans-unit id="83b4612ad81d70c9ed8920a4b451b69b8c3ee080" translate="yes" xml:space="preserve">
          <source>This feature is intended to speed up git operations for repos that have large working directories.</source>
          <target state="translated">この機能は、大きな作業ディレクトリを持つreposのgit操作を高速化することを目的としています。</target>
        </trans-unit>
        <trans-unit id="6b24b487d6d9654020073f6754733ecc051175ad" translate="yes" xml:space="preserve">
          <source>This feature is semi-deprecated. For scripting purpose, &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt;&lt;code&gt;--porcelain&lt;/code&gt; and &lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files[1]&lt;/a&gt;&lt;code&gt;--name-status&lt;/code&gt; are almost always superior alternatives, and users should look at &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt;&lt;code&gt;--short&lt;/code&gt; or &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--name-status&lt;/code&gt; for more user-friendly alternatives.</source>
          <target state="translated">この機能は半非推奨です。スクリプト作成の目的では、&lt;a href=&quot;git-status&quot;&gt;git-status [1] &lt;/a&gt; &lt;code&gt;--porcelain&lt;/code&gt; と&lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files [1] &lt;/a&gt; &lt;code&gt;--name-status&lt;/code&gt; はほとんどの場合優れた代替手段であり、ユーザーは&lt;a href=&quot;git-status&quot;&gt;git-status [1] &lt;/a&gt; &lt;code&gt;--short&lt;/code&gt; または&lt;a href=&quot;git-diff&quot;&gt;git-を&lt;/a&gt;確認する必要がありますdiff [1] &lt;code&gt;--name-status&lt;/code&gt; は、よりユーザーフレンドリーな代替手段です。</target>
        </trans-unit>
        <trans-unit id="0861edc399d3214fad2ecef2c8c7d8f9e28b4564" translate="yes" xml:space="preserve">
          <source>This feature is useful when an established project should be accepted despite early commits containing errors that can be safely ignored such as invalid committer email addresses. Note: corrupt objects cannot be skipped with this setting.</source>
          <target state="translated">この機能は、コミット者のメールアドレスが無効な場合など、初期のコミットでエラーが発生していても安全に無視できる場合に、確立されたプロジェクトを受け入れる場合に便利です。注意:この設定では、破損したオブジェクトをスキップすることはできません。</target>
        </trans-unit>
        <trans-unit id="5474f37d061902594342fbe38be401770ea2769f" translate="yes" xml:space="preserve">
          <source>This feature works by recording the mtime of the working tree directories and then omitting reading directories and stat calls against files in those directories whose mtime hasn&amp;rsquo;t changed. For this to work the underlying operating system and file system must change the &lt;code&gt;st_mtime&lt;/code&gt; field of directories if files in the directory are added, modified or deleted.</source>
          <target state="translated">この機能は、作業ツリーディレクトリのmtimeを記録し、ディレクトリの読み取りと、mtimeが変更されていないディレクトリ内のファイルに対するstat呼び出しを省略して機能します。これが機能するためには、ディレクトリ内のファイルが追加、変更、または削除された場合、基盤となるオペレーティングシステムとファイルシステムがディレクトリの &lt;code&gt;st_mtime&lt;/code&gt; フィールドを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="ef2541ade640bd800921de0e87cda6dd56d4d5f6" translate="yes" xml:space="preserve">
          <source>This fetches revisions from the SVN parent of the current HEAD and rebases the current (uncommitted to SVN) work against it.</source>
          <target state="translated">これは、現在のHEADのSVN親からリビジョンを取得し、それに対して現在の(SVNにコミットされていない)作業をリベースします。</target>
        </trans-unit>
        <trans-unit id="e6f84c5c8c6a08793025b9538660cbd1c1faa637" translate="yes" xml:space="preserve">
          <source>This file contains the commit message of a commit in progress. If &lt;code&gt;git commit&lt;/code&gt; exits due to an error before creating a commit, any commit message that has been provided by the user (e.g., in an editor session) will be available in this file, but will be overwritten by the next invocation of &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">このファイルには、進行中のコミットのコミットメッセージが含まれています。 &lt;code&gt;git commit&lt;/code&gt; 作成する前にエラーが発生してgit commitが終了した場合、ユーザーが（たとえば、エディターセッションで）提供したコミットメッセージはこのファイルで使用できますが、次の &lt;code&gt;git commit&lt;/code&gt; の呼び出しで上書きされます。</target>
        </trans-unit>
        <trans-unit id="2063696fd909d95d720efff6859f2846f7a33789" translate="yes" xml:space="preserve">
          <source>This file helps dumb transports discover what refs are available in this repository. If the repository is published for dumb transports, this file should be regenerated by &lt;code&gt;git update-server-info&lt;/code&gt; every time a tag or branch is created or modified. This is normally done from the &lt;code&gt;hooks/update&lt;/code&gt; hook, which is run by the &lt;code&gt;git-receive-pack&lt;/code&gt; command when you &lt;code&gt;git push&lt;/code&gt; into the repository.</source>
          <target state="translated">このファイルは、ダムトランスポートがこのリポジトリで使用可能な参照を検出するのに役立ちます。ダムトランスポート用にリポジトリが公開されている場合、タグまたはブランチが作成または変更されるたびに、このファイルは &lt;code&gt;git update-server-info&lt;/code&gt; によって再生成される必要があります。これは通常、 &lt;code&gt;hooks/update&lt;/code&gt; フックから行われます。これは、リポジトリに &lt;code&gt;git push&lt;/code&gt; するときに &lt;code&gt;git-receive-pack&lt;/code&gt; コマンドによって実行されます。</target>
        </trans-unit>
        <trans-unit id="3487083c7b98c66e39acc8f940f40c0e9ceac88f" translate="yes" xml:space="preserve">
          <source>This file is to help dumb transports discover what packs are available in this object store. Whenever a pack is added or removed, &lt;code&gt;git update-server-info&lt;/code&gt; should be run to keep this file up to date if the repository is published for dumb transports. &lt;code&gt;git repack&lt;/code&gt; does this by default.</source>
          <target state="translated">このファイルは、ダムトランスポートがこのオブジェクトストアで利用可能なパックを検出するのに役立ちます。パックが追加または削除されるたびに、リポジトリがダムトランスポート用に公開されている場合は、 &lt;code&gt;git update-server-info&lt;/code&gt; を実行してこのファイルを最新の状態に保つ必要があります。 &lt;code&gt;git repack&lt;/code&gt; はデフォルトでこれを行います。</target>
        </trans-unit>
        <trans-unit id="cbe65e34529f44f10bf3c4bc531b3ef1a1689dfb" translate="yes" xml:space="preserve">
          <source>This file mainly serves as the mapping between the name and path of submodules in the superproject, such that the submodule&amp;rsquo;s Git directory can be located.</source>
          <target state="translated">このファイルは主に、スーパーモジュール内のサブモジュールの名前とパスの間のマッピングとして機能し、サブモジュールのGitディレクトリを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="071050e2544b6fc3703fb63508bbfdc9243b46ab" translate="yes" xml:space="preserve">
          <source>This file records URLs to alternate object stores that this object store borrows objects from, to be used when the repository is fetched over HTTP.</source>
          <target state="translated">このファイルは、このオブジェクトストアがオブジェクトを借用している代替オブジェクトストアへの URL を記録し、リポジトリを HTTP で取得する際に使用します。</target>
        </trans-unit>
        <trans-unit id="cc3397ff622f0d4d27f532099612807583041388" translate="yes" xml:space="preserve">
          <source>This file records fake commit ancestry information, to pretend the set of parents a commit has is different from how the commit was actually created. One record per line describes a commit and its fake parents by listing their 40-byte hexadecimal object names separated by a space and terminated by a newline.</source>
          <target state="translated">このファイルは、あるコミットの親のセットが実際に作成されたものとは異なるものであるかのように見せかけるために、偽のコミットの祖先情報を記録します。1 行に 1 つの記録で、コミットとその偽の親について、スペースで区切られた 40 バイトの 16 進数のオブジェクト名をリストアップし、改行で終わります。</target>
        </trans-unit>
        <trans-unit id="1873ba1c652fc3e8dae8a41ecd45dff2c995baaf" translate="yes" xml:space="preserve">
          <source>This file records paths to alternate object stores that this object store borrows objects from, one pathname per line. Note that not only native Git tools use it locally, but the HTTP fetcher also tries to use it remotely; this will usually work if you have relative paths (relative to the object database, not to the repository!) in your alternates file, but it will not work if you use absolute paths unless the absolute path in filesystem and web URL is the same. See also &lt;code&gt;objects/info/http-alternates&lt;/code&gt;.</source>
          <target state="translated">このファイルは、このオブジェクトストアがオブジェクトを借用する代替オブジェクトストアへのパスを1行に1つのパス名で記録します。ネイティブのGitツールがローカルで使用するだけでなく、HTTPフェッチャーもリモートで使用しようとすることに注意してください。これは通常、代替ファイルに相対パス（リポジトリではなくオブジェクトデータベースへの相対パス）がある場合は機能しますが、ファイルシステムとWeb URLの絶対パスが同じでない限り、絶対パスを使用する場合は機能しません。 &lt;code&gt;objects/info/http-alternates&lt;/code&gt; もご覧ください。</target>
        </trans-unit>
        <trans-unit id="517ab2689bb34239adf0b92ebb2a70e736956866" translate="yes" xml:space="preserve">
          <source>This file stores sparse checkout patterns. See also: &lt;a href=&quot;git-read-tree&quot;&gt;git-read-tree[1]&lt;/a&gt;.</source>
          <target state="translated">このファイルは、スパースチェックアウトパターンを格納します。&lt;a href=&quot;git-read-tree&quot;&gt;git-read-tree [1]&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="39e8ca5394d81b30bccd145a749de9346fba2480" translate="yes" xml:space="preserve">
          <source>This file uses the following format:</source>
          <target state="translated">このファイルは以下の形式を使用しています。</target>
        </trans-unit>
        <trans-unit id="53c1d1d0fe83b95fe57b9ac9f6f59413589df721" translate="yes" xml:space="preserve">
          <source>This file, by convention among Porcelains, stores the exclude pattern list. &lt;code&gt;.gitignore&lt;/code&gt; is the per-directory ignore file. &lt;code&gt;git status&lt;/code&gt;, &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git rm&lt;/code&gt; and &lt;code&gt;git clean&lt;/code&gt; look at it but the core Git commands do not look at it. See also: &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;.</source>
          <target state="translated">このファイルは、磁器間の規約により、除外パターンリストを格納します。 &lt;code&gt;.gitignore&lt;/code&gt; は、ディレクトリごとの無視ファイルです。 &lt;code&gt;git status&lt;/code&gt; 、 &lt;code&gt;git add&lt;/code&gt; 、 &lt;code&gt;git rm&lt;/code&gt; 、および &lt;code&gt;git clean&lt;/code&gt; はそれを調べますが、コアGitコマンドはそれを調べません。&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="d8956b9fdca3244ff8cd9467aefdc82ab275d878" translate="yes" xml:space="preserve">
          <source>This filter may be used if you only need to modify the environment in which the commit will be performed. Specifically, you might want to rewrite the author/committer name/email/time environment variables (see &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt; for details).</source>
          <target state="translated">このフィルターは、コミットが実行される環境のみを変更する必要がある場合に使用できます。具体的には、作成者/コミッター名/メール/時間の環境変数を書き換えることができます（詳細については、&lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree [1]&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="1f7d9b6979d573a6d61c7fc37aef6ce7f09ba079" translate="yes" xml:space="preserve">
          <source>This flag causes &lt;code&gt;git diff-tree --stdin&lt;/code&gt; to also show the commit message before the differences.</source>
          <target state="translated">このフラグにより​​、 &lt;code&gt;git diff-tree --stdin&lt;/code&gt; は、差分の前にコミットメッセージも表示します。</target>
        </trans-unit>
        <trans-unit id="f18c1480999d4a64a19b051751a1dfdb3d01c394" translate="yes" xml:space="preserve">
          <source>This flag causes an object already in a local pack that has a .keep file to be ignored, even if it would have otherwise been packed.</source>
          <target state="translated">このフラグは、.keep ファイルを持つローカルパック内のオブジェクトを無視します。</target>
        </trans-unit>
        <trans-unit id="3b2c5aa43d85ae95c70f7126e1a8d471a0247285" translate="yes" xml:space="preserve">
          <source>This flag causes an object already in a pack to be ignored even if it would have otherwise been packed.</source>
          <target state="translated">このフラグは、既にパックされているオブジェクトを無視するようにします。</target>
        </trans-unit>
        <trans-unit id="936ccdd465b71c76f59e3d7929f0e31e3a24c431" translate="yes" xml:space="preserve">
          <source>This flag causes an object already in the given pack to be ignored, even if it would have otherwise been packed. &lt;code&gt;&amp;lt;pack-name&amp;gt;&lt;/code&gt; is the pack file name without leading directory (e.g. &lt;code&gt;pack-123.pack&lt;/code&gt;). The option could be specified multiple times to keep multiple packs.</source>
          <target state="translated">このフラグを指定すると、指定されたパックに既に含まれているオブジェクトであっても、そのオブジェクトは無視されます。 &lt;code&gt;&amp;lt;pack-name&amp;gt;&lt;/code&gt; は、先頭のディレクトリを除いたパックファイル名です（例： &lt;code&gt;pack-123.pack&lt;/code&gt; ）。複数のパックを保持するために、オプションを複数回指定できます。</target>
        </trans-unit>
        <trans-unit id="9fad47cb9db9729fbeb177e82626a6322dbefd6c" translate="yes" xml:space="preserve">
          <source>This flag causes an object that is borrowed from an alternate object store to be ignored even if it would have otherwise been packed.</source>
          <target state="translated">このフラグは、別のオブジェクトストアから借りてきたオブジェクトを無視するようにします。</target>
        </trans-unit>
        <trans-unit id="97fddffea713eaa9774ecf695b0619f959916c25" translate="yes" xml:space="preserve">
          <source>This flag causes combined diffs (used for merge commits) to list the name of the file from all parents. It thus only has effect when -c or --cc are specified, and is likely only useful if filename changes are detected (i.e. when either rename or copy detection have been requested).</source>
          <target state="translated">このフラグは、結合された diff (マージコミットで使用される)で、すべての親ファイルのファイル名をリストアップします。このため、このフラグは -c または --cc が指定された場合にのみ有効で、ファイル名の変更が検出された場合 (つまり、リネームやコピーの検出が要求された場合)にのみ有用です。</target>
        </trans-unit>
        <trans-unit id="7d04699c745135d6f14712a3d65005478838c3a7" translate="yes" xml:space="preserve">
          <source>This flag changes the way a merge commit is displayed (which means it is useful only when the command is given one &amp;lt;tree-ish&amp;gt;, or &lt;code&gt;--stdin&lt;/code&gt;). It shows the differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time (which is what the &lt;code&gt;-m&lt;/code&gt; option does). Furthermore, it lists only files which were modified from all parents.</source>
          <target state="translated">このフラグは、マージコミットの表示方法を変更します（つまり、コマンドに1つの&amp;lt;tree-ish&amp;gt;、または &lt;code&gt;--stdin&lt;/code&gt; が指定されている場合にのみ役立ちます）。これは、親と結果のペアごとの差分を一度に1つずつ表示するのではなく、各親からマージ結果への違いを同時に示します（ &lt;code&gt;-m&lt;/code&gt; オプションの機能です）。さらに、すべての親から変更されたファイルのみがリストされます。</target>
        </trans-unit>
        <trans-unit id="0d503f20848f4e1ff6c5e78038f4bce28f3422a3" translate="yes" xml:space="preserve">
          <source>This flag changes the way a merge commit patch is displayed, in a similar way to the &lt;code&gt;-c&lt;/code&gt; option. It implies the &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-p&lt;/code&gt; options and further compresses the patch output by omitting uninteresting hunks whose the contents in the parents have only two variants and the merge result picks one of them without modification. When all hunks are uninteresting, the commit itself and the commit log message is not shown, just like in any other &quot;empty diff&quot; case.</source>
          <target state="translated">このフラグは、 &lt;code&gt;-c&lt;/code&gt; オプションと同様に、マージコミットパッチの表示方法を変更します。これは、 &lt;code&gt;-c&lt;/code&gt; および &lt;code&gt;-p&lt;/code&gt; オプションを意味し、親のコンテンツに2つのバリアントしかない興味のないハンクを省略してパッチ出力をさらに圧縮し、マージ結果は変更なしでそれらの1つを選択します。すべてのハンクが興味をそそらない場合、他の「空の差分」の場合と同様に、コミット自体とコミットログメッセージは表示されません。</target>
        </trans-unit>
        <trans-unit id="4835250d6cbee97633146544cd1896afcc631099" translate="yes" xml:space="preserve">
          <source>This flag disables these checks, and can cause the remote repository to lose commits; use it with care.</source>
          <target state="translated">このフラグはこれらのチェックを無効にし、リモートリポジトリのコミットを失う可能性があります。</target>
        </trans-unit>
        <trans-unit id="cc5f19786a1b0eda7705eaaa80c372612ab5d782" translate="yes" xml:space="preserve">
          <source>This flag implies the &lt;code&gt;-c&lt;/code&gt; option and further compresses the patch output by omitting uninteresting hunks whose contents in the parents have only two variants and the merge result picks one of them without modification.</source>
          <target state="translated">このフラグは &lt;code&gt;-c&lt;/code&gt; オプションを意味し、親のコンテンツに2つのバリアントしかない興味のないハンクを省略してパッチ出力をさらに圧縮し、マージ結果は変更なしでそれらの1つを選択します。</target>
        </trans-unit>
        <trans-unit id="6c9f2e241df42ed566896490c4c1723461343597" translate="yes" xml:space="preserve">
          <source>This flag is passed to the &lt;code&gt;git log&lt;/code&gt; program (see &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;) that generates the patches.</source>
          <target state="translated">このフラグは、パッチを生成する &lt;code&gt;git log&lt;/code&gt; プログラム（&lt;a href=&quot;git-log&quot;&gt;git-log [1]を&lt;/a&gt;参照）に渡されます。</target>
        </trans-unit>
        <trans-unit id="7d74132f018d1e29c74648fc0cf6690a80cd700b" translate="yes" xml:space="preserve">
          <source>This flag makes the command not to report its progress on the standard error stream.</source>
          <target state="translated">このフラグは、コマンドの進行状況を標準エラーストリームに報告しないようにします。</target>
        </trans-unit>
        <trans-unit id="c7300f914a6246e85c4558f9e03e3ac6bd2957c2" translate="yes" xml:space="preserve">
          <source>This flag makes the merge commits show the full diff like regular commits; for each merge parent, a separate log entry and diff is generated. An exception is that only diff against the first parent is shown when &lt;code&gt;--first-parent&lt;/code&gt; option is given; in that case, the output represents the changes the merge brought &lt;code&gt;into&lt;/code&gt; the then-current branch.</source>
          <target state="translated">このフラグにより​​、マージコミットは通常のコミットのように完全な差分を表示します。マージの親ごとに、個別のログエントリと差分が生成されます。例外は、 &lt;code&gt;--first-parent&lt;/code&gt; オプションが指定されている場合、最初の親との差分のみが表示されることです。その場合には、出力がもたらしたマージ変更表し &lt;code&gt;into&lt;/code&gt; 、その後、現在のブランチを。</target>
        </trans-unit>
        <trans-unit id="824f1a5cbd322eac2edc9b61691e0afb5fb06c7c" translate="yes" xml:space="preserve">
          <source>This flag tells the command not to reuse existing object data at all, including non deltified object, forcing recompression of everything. This implies --no-reuse-delta. Useful only in the obscure case where wholesale enforcement of a different compression level on the packed data is desired.</source>
          <target state="translated">このフラグは、デルタ化されていないオブジェクトを含め、既存のオブジェクトデータを一切再利用しないように指示し、すべてのオブジェクトの再圧縮を強制します。これは --no-reuse-delta を意味します。パックされたデータに別の圧縮レベルを強制的に適用したいというような曖昧な場合にのみ有用です。</target>
        </trans-unit>
        <trans-unit id="e554d11fed47fbadc588fbbd426a692640350799" translate="yes" xml:space="preserve">
          <source>This form can only be used in the middle of a &lt;code&gt;commit&lt;/code&gt;. The path names a directory entry within fast-import&amp;rsquo;s active commit. The path must be quoted in this case.</source>
          <target state="translated">この形式は、 &lt;code&gt;commit&lt;/code&gt; 途中でのみ使用できます。パスは、高速インポートのアクティブなコミット内のディレクトリエントリを指定します。この場合、パスは引用符で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="55cd46dfe4dc47146eb359f16ba2ab6440f5d33b" translate="yes" xml:space="preserve">
          <source>This form is to compare the given two paths on the filesystem. You can omit the &lt;code&gt;--no-index&lt;/code&gt; option when running the command in a working tree controlled by Git and at least one of the paths points outside the working tree, or when running the command outside a working tree controlled by Git. This form implies &lt;code&gt;--exit-code&lt;/code&gt;.</source>
          <target state="translated">このフォームは、ファイルシステム上の指定された2つのパスを比較するためのものです。Gitによって制御されている作業ツリーでコマンドを実行し、少なくとも1つのパスが作業ツリーの外を指している場合、またはGitによって制御されている作業ツリーの外でコマンドを実行する場合は、 &lt;code&gt;--no-index&lt;/code&gt; オプションを省略できます。この形式は &lt;code&gt;--exit-code&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="1a36c2e6e9bf305ffd5ef7a7e4c453ac93dfb865" translate="yes" xml:space="preserve">
          <source>This form is to view the changes on the branch containing and up to the second &amp;lt;commit&amp;gt;, starting at a common ancestor of both &amp;lt;commit&amp;gt;. &quot;git diff A...B&quot; is equivalent to &quot;git diff $(git merge-base A B) B&quot;. You can omit any one of &amp;lt;commit&amp;gt;, which has the same effect as using HEAD instead.</source>
          <target state="translated">このフォームは、両方の&amp;lt;commit&amp;gt;の共通の祖先から始まり、2番目の&amp;lt;commit&amp;gt;を含むブランチまでの変更を表示するためのものです。「git diff A ... B」は「git diff $（git merge-base AB）B」と同等です。&amp;lt;commit&amp;gt;のいずれかを省略できます。これは、代わりにHEADを使用するのと同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="18011d68a19f669179582c8652eaff17f583329f" translate="yes" xml:space="preserve">
          <source>This form is to view the changes you have in your working tree relative to the named &amp;lt;commit&amp;gt;. You can use HEAD to compare it with the latest commit, or a branch name to compare with the tip of a different branch.</source>
          <target state="translated">このフォームは、名前付きの&amp;lt;commit&amp;gt;に関連して作業ツリーに加えた変更を表示するためのものです。HEADを使用して最新のコミットと比較したり、ブランチ名を使用して別のブランチの先端と比較したりできます。</target>
        </trans-unit>
        <trans-unit id="0c3233dc5774a7d1fc399a8b304cc732bba72d9f" translate="yes" xml:space="preserve">
          <source>This form is to view the changes you made relative to the index (staging area for the next commit). In other words, the differences are what you &lt;code&gt;could&lt;/code&gt; tell Git to further add to the index but you still haven&amp;rsquo;t. You can stage these changes by using &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt;.</source>
          <target state="translated">このフォームは、インデックス（次のコミットのステージング領域）に対して行った変更を表示するためのものです。言い換えれば、Gitにインデックスにさらに追加するように伝えることが &lt;code&gt;could&lt;/code&gt; 違いですが、まだ違います。これらの変更は、&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;を使用してステージングできます。</target>
        </trans-unit>
        <trans-unit id="ee8e76f95895702db36db495b0e53027904973c9" translate="yes" xml:space="preserve">
          <source>This form is to view the changes you staged for the next commit relative to the named &amp;lt;commit&amp;gt;. Typically you would want comparison with the latest commit, so if you do not give &amp;lt;commit&amp;gt;, it defaults to HEAD. If HEAD does not exist (e.g. unborn branches) and &amp;lt;commit&amp;gt; is not given, it shows all staged changes. --staged is a synonym of --cached.</source>
          <target state="translated">このフォームは、名前付きの&amp;lt;commit&amp;gt;に関連する次のコミットのためにステージングした変更を表示するためのものです。通常、最新のコミットとの比較が必要になるため、&amp;lt;commit&amp;gt;を指定しない場合、デフォルトでHEADになります。HEADが存在せず（たとえば、生まれていないブランチ）、&amp;lt;commit&amp;gt;が指定されていない場合、すべての段階的な変更が表示されます。--stagedは--cachedの同義語です。</target>
        </trans-unit>
        <trans-unit id="51dda6a69f38e64f972e32a62549822542d75887" translate="yes" xml:space="preserve">
          <source>This form is to view the differences between the raw contents of two blob objects.</source>
          <target state="translated">本実施形態では、2つのブロブオブジェクトの生の内容の違いを表示する。</target>
        </trans-unit>
        <trans-unit id="395d78419362cad7438eb6eae46785d35953f019" translate="yes" xml:space="preserve">
          <source>This form resets the current branch head to &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; and possibly updates the index (resetting it to the tree of &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;) and the working tree depending on &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; is omitted, defaults to &lt;code&gt;--mixed&lt;/code&gt;. The &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; must be one of the following:</source>
          <target state="translated">このフォームは、現在のブランチヘッドを &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; にリセットし、インデックスを更新（ &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; のツリーにリセット）し、 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; に応じて作業ツリーを更新します。場合は &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; に、デフォルトでは省略されて &lt;code&gt;--mixed&lt;/code&gt; を。 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; 次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="90bcd35d4969f3a90ba2bd18f27a5c6eb93f333b" translate="yes" xml:space="preserve">
          <source>This form will use the first line matching the given POSIX regex. If &amp;lt;start&amp;gt; is a regex, it will search from the end of the previous &lt;code&gt;-L&lt;/code&gt; range, if any, otherwise from the start of file. If &amp;lt;start&amp;gt; is &amp;ldquo;^/regex/&amp;rdquo;, it will search from the start of file. If &amp;lt;end&amp;gt; is a regex, it will search starting at the line given by &amp;lt;start&amp;gt;.</source>
          <target state="translated">このフォームは、指定されたPOSIX正規表現に一致する最初の行を使用します。&amp;lt;start&amp;gt;が正規表現の場合、前の &lt;code&gt;-L&lt;/code&gt; 範囲がある場合は最後から検索し、そうでない場合はファイルの先頭から検索します。&amp;lt;start&amp;gt;が「^ / regex /」の場合、ファイルの先頭から検索します。&amp;lt;end&amp;gt;が正規表現の場合、&amp;lt;start&amp;gt;で指定された行から検索を開始します。</target>
        </trans-unit>
        <trans-unit id="b42c261dd1828c15332725a480fa7095bcc76b2a" translate="yes" xml:space="preserve">
          <source>This format expects the first line of the file to contain the &quot;Cc:&quot; value and the &quot;Subject:&quot; of the message as the second line.</source>
          <target state="translated">このフォーマットでは、ファイルの1行目に &quot;Cc:&quot;の値を、2行目にメッセージの &quot;Subject:&quot;を含むことを想定しています。</target>
        </trans-unit>
        <trans-unit id="105520fc7842a24e43537a27759a074335828eb6" translate="yes" xml:space="preserve">
          <source>This format is identical to version &lt;code&gt;0&lt;/code&gt;, with the following exceptions:</source>
          <target state="translated">この形式はバージョン &lt;code&gt;0&lt;/code&gt; と同じですが、次の例外があります。</target>
        </trans-unit>
        <trans-unit id="fd22347e6ce1cebbfe9140a8d5df54f1132eb3e9" translate="yes" xml:space="preserve">
          <source>This format is no longer produced by any Git command, but is and will continue to be supported by &lt;code&gt;update-index --index-info&lt;/code&gt;.</source>
          <target state="translated">この形式は、Gitコマンドでは作成されなくなりましたが、 &lt;code&gt;update-index --index-info&lt;/code&gt; で引き続きサポートされます。</target>
        </trans-unit>
        <trans-unit id="e1e42b99834dd201113f33eae88b5856f686096e" translate="yes" xml:space="preserve">
          <source>This format is to put higher order stages into the index file and matches &lt;code&gt;git ls-files --stage&lt;/code&gt; output.</source>
          <target state="translated">このフォーマットは、より高次のステージをインデックスファイルに入れ、 &lt;code&gt;git ls-files --stage&lt;/code&gt; 出力と一致します。</target>
        </trans-unit>
        <trans-unit id="483caba3e82677e09e2d521ebba75089a90ce09e" translate="yes" xml:space="preserve">
          <source>This format is to stuff &lt;code&gt;git ls-tree&lt;/code&gt; output into the index.</source>
          <target state="translated">このフォーマットは、 &lt;code&gt;git ls-tree&lt;/code&gt; 出力をインデックスに詰め込むためのものです。</target>
        </trans-unit>
        <trans-unit id="078ec0cba6df63b2f2fc0bbcd069e250ea13b628" translate="yes" xml:space="preserve">
          <source>This format is used to refer to another commit in a commit message and is the same as &lt;code&gt;--pretty='format:%C(auto)%h (%s, %ad)'&lt;/code&gt;. By default, the date is formatted with &lt;code&gt;--date=short&lt;/code&gt; unless another &lt;code&gt;--date&lt;/code&gt; option is explicitly specified. As with any &lt;code&gt;format:&lt;/code&gt; with format placeholders, its output is not affected by other options like &lt;code&gt;--decorate&lt;/code&gt; and &lt;code&gt;--walk-reflogs&lt;/code&gt;.</source>
          <target state="translated">このフォーマットは、コミットメッセージ内の別のコミットを参照するために使用され、-- &lt;code&gt;--pretty='format:%C(auto)%h (%s, %ad)'&lt;/code&gt; と同じです。デフォルトでは、別の &lt;code&gt;--date&lt;/code&gt; オプションが明示的に指定されていない限り、日付は &lt;code&gt;--date=short&lt;/code&gt; でフォーマットされます。他の &lt;code&gt;format:&lt;/code&gt; と同様に、フォーマットプレースホルダーを使用すると、その出力は &lt;code&gt;--decorate&lt;/code&gt; や &lt;code&gt;--walk-reflogs&lt;/code&gt; などの他のオプションの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="742c78626a467f269e89b016f43c5e1a7be4cd88" translate="yes" xml:space="preserve">
          <source>This gets rid of the &lt;code&gt;git-svn-id:&lt;/code&gt; lines at the end of every commit.</source>
          <target state="translated">これにより、すべてのコミットの最後に &lt;code&gt;git-svn-id:&lt;/code&gt; 行が削除されます。</target>
        </trans-unit>
        <trans-unit id="2acaf36aea784a80df7509fcb8e38355c645c5a7" translate="yes" xml:space="preserve">
          <source>This gives a very controlled flow of fixes. If you notice that you have applied a fix to e.g. &lt;code&gt;master&lt;/code&gt; that is also required in &lt;code&gt;maint&lt;/code&gt;, you will need to cherry-pick it (using &lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick[1]&lt;/a&gt;) downwards. This will happen a few times and is nothing to worry about unless you do it very frequently.</source>
          <target state="translated">これにより、修正のフローが非常に制御されます。 &lt;code&gt;maint&lt;/code&gt; でも必要な修正を &lt;code&gt;master&lt;/code&gt; などに適用したことに気付いた場合は、（&lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick [1]を使用して&lt;/a&gt;）下方にチェリーピックする必要があります。これは数回発生し、頻繁に実行しない限り、心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="1f3884c08aac0f5d8941c7814b274c9743619a33" translate="yes" xml:space="preserve">
          <source>This happens if the &lt;code&gt;subsystem&lt;/code&gt; rebase had conflicts, or used &lt;code&gt;--interactive&lt;/code&gt; to omit, edit, squash, or fixup commits; or if the upstream used one of &lt;code&gt;commit --amend&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt;, or a full history rewriting command like &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;&lt;code&gt;filter-repo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;subsystem&lt;/code&gt; リベースに競合がある場合、または &lt;code&gt;--interactive&lt;/code&gt; を使用してコミットを省略、編集、スカッシュ、または修正する場合に発生します。または、アップストリームが &lt;code&gt;commit --amend&lt;/code&gt; 、 &lt;code&gt;reset&lt;/code&gt; 、または&lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt; &lt;code&gt;filter-repo&lt;/code&gt; の&lt;/a&gt;ような完全な履歴書き換えコマンドのいずれかを使用した場合。</target>
        </trans-unit>
        <trans-unit id="53ac63807fcdbfc7e050fb3151d6b086f2e9a274" translate="yes" xml:space="preserve">
          <source>This happens if the &lt;code&gt;subsystem&lt;/code&gt; rebase was a simple rebase and had no conflicts.</source>
          <target state="translated">これは、 &lt;code&gt;subsystem&lt;/code&gt; リベースが単純なリベースであり、競合がなかった場合に発生します。</target>
        </trans-unit>
        <trans-unit id="d414984e9f8d7bfd782c8f2da36b80bcd80ea28e" translate="yes" xml:space="preserve">
          <source>This has a few user-visible effects and caveats:</source>
          <target state="translated">これにはいくつかのユーザー目線の効果と注意点があります。</target>
        </trans-unit>
        <trans-unit id="1c876a37c9c7633e47e1a6a38b1f16f75e32a3ed" translate="yes" xml:space="preserve">
          <source>This has a very similar UI to &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;revert&lt;/code&gt;, and lets you add untracked paths to the index.</source>
          <target state="translated">これには &lt;code&gt;update&lt;/code&gt; と &lt;code&gt;revert&lt;/code&gt; と非常によく似たUIがあり、追跡されていないパスをインデックスに追加できます。</target>
        </trans-unit>
        <trans-unit id="33280cb105ee3b71902ce7b15c9592fd52f73e30" translate="yes" xml:space="preserve">
          <source>This has a very similar UI to &lt;code&gt;update&lt;/code&gt;, and the staged information for selected paths are reverted to that of the HEAD version. Reverting new paths makes them untracked.</source>
          <target state="translated">これは &lt;code&gt;update&lt;/code&gt; と非常によく似たUIを持ち、選択されたパスのステージングされた情報はHEADバージョンの情報に戻されます。新しいパスを元に戻すと、追跡されなくなります。</target>
        </trans-unit>
        <trans-unit id="4d4512b846dcedcc9cf4704e69eaeda15e1830db" translate="yes" xml:space="preserve">
          <source>This has been requested by some kernel developers because some bugs called sporadic bugs do not appear in all the kernel builds because they are very dependent on the compiler output.</source>
          <target state="translated">これは、散発的バグと呼ばれるいくつかのバグがコンパイラの出力に非常に依存しているため、すべてのカーネルビルドには表示されないという理由で、いくつかのカーネル開発者から要望がありました。</target>
        </trans-unit>
        <trans-unit id="b93781d2b5ee24d7b760545bc5177eb80e4c3e22" translate="yes" xml:space="preserve">
          <source>This has the advantage that it will be saved in your &lt;code&gt;CVS/Root&lt;/code&gt; files and you don&amp;rsquo;t need to worry about always setting the correct environment variable. SSH users restricted to &lt;code&gt;git-shell&lt;/code&gt; don&amp;rsquo;t need to override the default with CVS_SERVER (and shouldn&amp;rsquo;t) as &lt;code&gt;git-shell&lt;/code&gt; understands &lt;code&gt;cvs&lt;/code&gt; to mean &lt;code&gt;git-cvsserver&lt;/code&gt; and pretends that the other end runs the real &lt;code&gt;cvs&lt;/code&gt; better.</source>
          <target state="translated">これには、 &lt;code&gt;CVS/Root&lt;/code&gt; ファイルに保存され、常に正しい環境変数を設定することを心配する必要がないという利点があります。制限SSHユーザー &lt;code&gt;git-shell&lt;/code&gt; CVS_SERVERでデフォルトをオーバーライドする必要があります（とすべきでない）していないよう &lt;code&gt;git-shell&lt;/code&gt; 理解 &lt;code&gt;cvs&lt;/code&gt; 平均へ &lt;code&gt;git-cvsserver&lt;/code&gt; 、他端が本当実行されることをふり &lt;code&gt;cvs&lt;/code&gt; 良くします。</target>
        </trans-unit>
        <trans-unit id="f27a3b2d1e595dbb21c1b28424b4a89305bcf439" translate="yes" xml:space="preserve">
          <source>This has two implications:</source>
          <target state="translated">これには2つの意味合いがあります。</target>
        </trans-unit>
        <trans-unit id="a2d38b5ae6dea81df64d435d13a5c9c9c6e43a8c" translate="yes" xml:space="preserve">
          <source>This header line is followed by the following information at least once for each commit:</source>
          <target state="translated">このヘッダ行の後には、コミットごとに少なくとも1回、以下の情報が続きます。</target>
        </trans-unit>
        <trans-unit id="aac19de1c954c0a5c2aba42bf1f288afbf74cabf" translate="yes" xml:space="preserve">
          <source>This helper uses specified file descriptors to connect to a remote Git server. This is not meant for end users but for programs and scripts calling git fetch, push or archive.</source>
          <target state="translated">このヘルパーは、指定したファイル記述子を使用してリモートの Git サーバーに接続します。これはエンドユーザー向けではなく、git fetch や push あるいは archive をコールするプログラムやスクリプト向けのものです。</target>
        </trans-unit>
        <trans-unit id="eafdc2cefff4153e88df550a24ce4b00606582ea" translate="yes" xml:space="preserve">
          <source>This hook can be used in conjunction with a corresponding pre-commit hook to save and restore any form of metadata associated with the working tree (e.g.: permissions/ownership, ACLS, etc). See contrib/hooks/setgitperms.perl for an example of how to do this.</source>
          <target state="translated">このフックは、対応するプレコミットフックと組み合わせて使用することで、作業ツリーに関連付けられたあらゆる形式のメタデータ(例:パーミッション/所有権、ACLSなど)を保存および復元することができます。この方法の例については、contrib/hooks/setgitperms.perlを参照してください。</target>
        </trans-unit>
        <trans-unit id="9fae8c19d5ced3830760d386f8db3473a746ea76" translate="yes" xml:space="preserve">
          <source>This hook can be used to perform repository validity checks, auto-display differences from the previous HEAD if different, or set working dir metadata properties.</source>
          <target state="translated">このフックは、リポジトリの有効性チェックを行ったり、前のHEADと異なる場合は自動表示したり、作業ディレクトリのメタデータプロパティを設定したりするために使われます。</target>
        </trans-unit>
        <trans-unit id="89a247d66f7dd9fd927ac160899ee7ad4eefe257" translate="yes" xml:space="preserve">
          <source>This hook can be used to prevent &lt;code&gt;forced&lt;/code&gt; update on certain refs by making sure that the object name is a commit object that is a descendant of the commit object named by the old object name. That is, to enforce a &quot;fast-forward only&quot; policy.</source>
          <target state="translated">このフックを使用して、オブジェクト名が古いオブジェクト名で指定されたコミットオブジェクトの子孫であるコミットオブジェクトであることを確認することで、特定のrefでの &lt;code&gt;forced&lt;/code&gt; 更新を防ぐことができます。つまり、「早送りのみ」のポリシーを適用します。</target>
        </trans-unit>
        <trans-unit id="e2b4b08b5c7d529703ac2e4609fae5478174d015" translate="yes" xml:space="preserve">
          <source>This hook can be used, for example, to run &lt;code&gt;git update-server-info&lt;/code&gt; if the repository is packed and is served via a dumb transport.</source>
          <target state="translated">このフックは、たとえば、リポジトリがパックされ、ダムトランスポートを介して提供される場合に &lt;code&gt;git update-server-info&lt;/code&gt; を実行するために使用できます。</target>
        </trans-unit>
        <trans-unit id="ec8359ca4fe68868d4a094d214fa5c736b07b686" translate="yes" xml:space="preserve">
          <source>This hook does not affect the outcome of &lt;code&gt;git receive-pack&lt;/code&gt;, as it is called after the real work is done.</source>
          <target state="translated">このフックは、実際の作業が完了した後に呼び出される &lt;code&gt;git receive-pack&lt;/code&gt; 、git receive-packの結果には影響しません。</target>
        </trans-unit>
        <trans-unit id="4f1494681f56d1e644fae421a13f75381d1bf104" translate="yes" xml:space="preserve">
          <source>This hook executes once for the receive operation. It takes no arguments, but for each ref to be updated it receives on standard input a line of the format:</source>
          <target state="translated">このフックは受信操作に対して一度だけ実行されます。引数はとりませんが、更新される各 ref に対して、標準入力でフォーマットの行を受け取ります。</target>
        </trans-unit>
        <trans-unit id="1c705c0b531046d9558421e4543f9aca35624390" translate="yes" xml:space="preserve">
          <source>This hook executes once for the receive operation. It takes no arguments, but gets the same information as the &lt;a href=&quot;#pre-receive&quot;&gt;&lt;em&gt;pre-receive&lt;/em&gt;&lt;/a&gt; hook does on its standard input.</source>
          <target state="translated">このフックは、受信操作に対して1回実行されます。引数はありませんが、&lt;a href=&quot;#pre-receive&quot;&gt;&lt;em&gt;事前受信&lt;/em&gt;&lt;/a&gt;フックが標準入力で行うのと同じ情報を取得します。</target>
        </trans-unit>
        <trans-unit id="8f404b0d7afced029532dd1c0ce00c69033fa119" translate="yes" xml:space="preserve">
          <source>This hook is called before any refname is updated and before any fast-forward checks are performed.</source>
          <target state="translated">このフックは refname が更新され、早送りチェックが実行される前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6f4d4e6bc9f3d3e90e8224d9cc9d15607a5f159d" translate="yes" xml:space="preserve">
          <source>This hook is called by &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; and can be used to prevent a push from taking place. The hook is called with two parameters which provide the name and location of the destination remote, if a named remote is not being used both values will be the same.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;によって呼び出され、プッシュが行われないようにするために使用できます。フックは、宛先リモートの名前と場所を提供する2つのパラメーターで呼び出されます。名前付きリモートが使用されていない場合、両方の値は同じになります。</target>
        </trans-unit>
        <trans-unit id="b761c5f63f99b7c22c6e4ca4e1bd741b6a19c509" translate="yes" xml:space="preserve">
          <source>This hook is called by &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; and can be used to prevent a branch from getting rebased. The hook may be called with one or two parameters. The first parameter is the upstream from which the series was forked. The second parameter is the branch being rebased, and is not set when rebasing the current branch.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;によって呼び出され、ブランチがリベースされるのを防ぐために使用できます。フックは、1つまたは2つのパラメーターで呼び出すことができます。最初のパラメータは、シリーズが分岐した上流です。2番目のパラメーターはリベースされるブランチであり、現在のブランチをリベースする場合は設定されません。</target>
        </trans-unit>
        <trans-unit id="fc84f5afc2cc3712fb061152c42b83b5432e2d28" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes &lt;code&gt;git am&lt;/code&gt; to abort before applying the patch.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;によって呼び出されます。これは、提案されたコミットログメッセージを保持するファイルの名前という単一のパラメーターを取ります。ゼロ以外のステータスで終了すると、パッチを適用する前に &lt;code&gt;git am&lt;/code&gt; が中止されます。</target>
        </trans-unit>
        <trans-unit id="109f1251e93ab76b92d28a05e1f40ca3ae3e2435" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;. It takes no parameter, and is invoked after the patch is applied and a commit is made.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;によって呼び出されます。パラメータを取らず、パッチが適用されてコミットが行われた後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="31dd1042d3a6d88015bf6a789db56141bf61f664" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;. It takes no parameter, and is invoked after the patch is applied, but before a commit is made.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;によって呼び出されます。パラメータを取らず、パッチが適用された後、コミットが行われる前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4126a7ec7eb0a54d9b99d1f389fd70ce96c40950" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; and &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes the command to abort.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;および&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;によって呼び出され、-- &lt;code&gt;--no-verify&lt;/code&gt; オプションでバイパスできます。これは、提案されたコミットログメッセージを保持するファイルの名前という単一のパラメーターを取ります。ゼロ以外のステータスで終了すると、コマンドは中止されます。</target>
        </trans-unit>
        <trans-unit id="977ece26ae3c0446a7497462b09e90162737d6ca" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; right after preparing the default log message, and before the editor is started.</source>
          <target state="translated">このフックは、デフォルトのログメッセージを準備した直後、エディタが起動する前に&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2ae25bad855fc10ca5e955357c713cdbb31a472c" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes no parameters, and is invoked before obtaining the proposed commit log message and making a commit. Exiting with a non-zero status from this script causes the &lt;code&gt;git commit&lt;/code&gt; command to abort before creating a commit.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;によって呼び出され、-- &lt;code&gt;--no-verify&lt;/code&gt; オプションでバイパスできます。これはパラメーターを取りません。提案されたコミットログメッセージを取得してコミットする前に呼び出されます。このスクリプトからゼロ以外のステータスで終了すると、コミットを作成する前に &lt;code&gt;git commit&lt;/code&gt; コマンドが中止されます。</target>
        </trans-unit>
        <trans-unit id="21226463d529e8f7d5082c27401d959f905ec4d1" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;. It takes no parameters, and is invoked after a commit is made.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;によって呼び出されます。これはパラメーターをとらず、コミットが行われた後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0a4097349c79cead9de93e647cb9ba47cbed7c91" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes no parameters, and is invoked after the merge has been carried out successfully and before obtaining the proposed commit log message to make a commit. Exiting with a non-zero status from this script causes the &lt;code&gt;git merge&lt;/code&gt; command to abort before creating a commit.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;によって呼び出され、-- &lt;code&gt;--no-verify&lt;/code&gt; オプションでバイパスできます。これはパラメーターを取りません。マージが正常に実行された後、提案されたコミットログメッセージを取得してコミットする前に呼び出されます。このスクリプトからゼロ以外のステータスで終了すると、コミットを作成する前に &lt;code&gt;git merge&lt;/code&gt; コマンドが中止されます。</target>
        </trans-unit>
        <trans-unit id="de911dadfd0a4abc2b13baa4ccbc2ae0aca9f055" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;, which happens when a &lt;code&gt;git pull&lt;/code&gt; is done on a local repository. The hook takes a single parameter, a status flag specifying whether or not the merge being done was a squash merge. This hook cannot affect the outcome of &lt;code&gt;git merge&lt;/code&gt; and is not executed, if the merge failed due to conflicts.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;によって呼び出されます。これは、ローカルリポジトリで &lt;code&gt;git pull&lt;/code&gt; が行われたときに発生します。フックは単一のパラメーター、つまり、実行中のマージがスカッシュマージであったかどうかを指定するステータスフラグを受け取ります。競合が原因でマージが失敗した場合、このフックは &lt;code&gt;git merge&lt;/code&gt; の結果に影響を与えることはできず、実行されません。</target>
        </trans-unit>
        <trans-unit id="76961cafe28e294daa6f1b287a02eb4fe4bf07aa" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository, and when the push tries to update the branch that is currently checked out and the &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; configuration variable is set to &lt;code&gt;updateInstead&lt;/code&gt;. Such a push by default is refused if the working tree and the index of the remote repository has any difference from the currently checked out commit; when both the working tree and the index match the current commit, they are updated to match the newly pushed tip of the branch. This hook is to be used to override the default behaviour.</source>
          <target state="translated">このフックは、&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;が &lt;code&gt;git push&lt;/code&gt; に反応してリポジトリ内の参照を更新したとき、およびpushが現在チェックアウトされているブランチと &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; 構成変数を更新しようとしたときに呼び出されます。 &lt;code&gt;updateInstead&lt;/code&gt; に設定されています。作業ツリーとリモートリポジトリのインデックスに現在チェックアウトされているコミットとの違いがある場合、デフォルトではこのようなプッシュは拒否されます。作業ツリーとインデックスの両方が現在のコミットに一致すると、新しくプッシュされたブランチの先端に一致するように更新されます。このフックは、デフォルトの動作をオーバーライドするために使用されます。</target>
        </trans-unit>
        <trans-unit id="5a56dac625f1205849f2b5f6e3619a708d3ea48e" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository. It executes on the remote repository once after all the refs have been updated.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;によって呼び出され、 &lt;code&gt;git push&lt;/code&gt; に反応してリポジトリ内の参照を更新します。すべての参照が更新された後、リモートリポジトリで1回実行されます。</target>
        </trans-unit>
        <trans-unit id="390ce0821ef413eec43c389641cce2dfc9687135" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository. Just before starting to update refs on the remote repository, the pre-receive hook is invoked. Its exit status determines the success or failure of the update.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;によって呼び出され、 &lt;code&gt;git push&lt;/code&gt; に反応してリポジトリ内の参照を更新します。リモートリポジトリの参照の更新を開始する直前に、事前受信フックが呼び出されます。その終了ステータスは、更新の成功または失敗を決定します。</target>
        </trans-unit>
        <trans-unit id="f508c67d780c6e440d114ab5a4809e8db15887c6" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository. Just before updating the ref on the remote repository, the update hook is invoked. Its exit status determines the success or failure of the ref update.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;によって呼び出され、 &lt;code&gt;git push&lt;/code&gt; に反応してリポジトリ内の参照を更新します。リモートリポジトリのrefを更新する直前に、更新フックが呼び出されます。その終了ステータスは、参照更新の成功または失敗を決定します。</target>
        </trans-unit>
        <trans-unit id="c94fc31562e49c2e1f57905c2984b3787d6eb579" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-send-email&quot;&gt;git-send-email[1]&lt;/a&gt;. It takes a single parameter, the name of the file that holds the e-mail to be sent. Exiting with a non-zero status causes &lt;code&gt;git send-email&lt;/code&gt; to abort before sending any e-mails.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-send-email&quot;&gt;git-send-email [1]&lt;/a&gt;によって呼び出されます。これは、送信される電子メールを保持するファイルの名前という単一のパラメーターを取ります。0以外のステータスで終了すると、 &lt;code&gt;git send-email&lt;/code&gt; を送信する前にgit send-emailが中止されます。</target>
        </trans-unit>
        <trans-unit id="898dc345a1faef7e78cc6f07a48d416762cf9e72" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git gc --auto&lt;/code&gt; (see &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;). It takes no parameter, and exiting with non-zero status from this script causes the &lt;code&gt;git gc --auto&lt;/code&gt; to abort.</source>
          <target state="translated">このフックは &lt;code&gt;git gc --auto&lt;/code&gt; によって呼び出されます（&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]を&lt;/a&gt;参照）。これはパラメーターを取り &lt;code&gt;git gc --auto&lt;/code&gt; このスクリプトからゼロ以外のステータスで終了すると、git gc --autoが異常終了します。</target>
        </trans-unit>
        <trans-unit id="fa504b80ab7d4ab7fd02bb1c09f7267f7ffd0b87" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git-p4 submit&lt;/code&gt;. It takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevent &lt;code&gt;git-p4 submit&lt;/code&gt; from launching. Run &lt;code&gt;git-p4 submit --help&lt;/code&gt; for details.</source>
          <target state="translated">このフックは &lt;code&gt;git-p4 submit&lt;/code&gt; によって呼び出されます。パラメータはなく、標準入力からは何も受け取りません。このスクリプトからゼロ以外のステータスで終了すると、 &lt;code&gt;git-p4 submit&lt;/code&gt; が起動しなくなります。詳細については、 &lt;code&gt;git-p4 submit --help&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="e8569f58a670ba9d05dfd0c2191295df64e04e73" translate="yes" xml:space="preserve">
          <source>This hook is invoked by commands that rewrite commits (&lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; when called with &lt;code&gt;--amend&lt;/code&gt; and &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;; however, full-history (re)writing tools like &lt;a href=&quot;git-fast-import&quot;&gt;git-fast-import[1]&lt;/a&gt; or &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repo&lt;/a&gt; typically do not call it!). Its first argument denotes the command it was invoked by: currently one of &lt;code&gt;amend&lt;/code&gt; or &lt;code&gt;rebase&lt;/code&gt;. Further command-dependent arguments may be passed in the future.</source>
          <target state="translated">このフックは、コミットを書き換えるコマンド（&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;を &lt;code&gt;--amend&lt;/code&gt; と&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;で呼び出すと呼び出されますが、&lt;a href=&quot;git-fast-import&quot;&gt;git-fast-import [1]&lt;/a&gt;または&lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repo&lt;/a&gt;は通常それを呼び出しません！）。最初の引数は、それが呼び出されたコマンドを示します。現在は、 &lt;code&gt;amend&lt;/code&gt; または &lt;code&gt;rebase&lt;/code&gt; のいずれかです。今後、コマンドに依存する引数がさらに渡される可能性があります。</target>
        </trans-unit>
        <trans-unit id="7b20b75526e2af7ef8179932e884a838f68429b3" translate="yes" xml:space="preserve">
          <source>This hook is invoked when a &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt; or &lt;a href=&quot;git-switch&quot;&gt;git-switch[1]&lt;/a&gt; is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0). This hook cannot affect the outcome of &lt;code&gt;git switch&lt;/code&gt; or &lt;code&gt;git checkout&lt;/code&gt;.</source>
          <target state="translated">このフックは、ワークツリーを更新した後に&lt;a href=&quot;git-checkout&quot;&gt;git-checkout [1]&lt;/a&gt;または&lt;a href=&quot;git-switch&quot;&gt;git-switch [1]&lt;/a&gt;が実行されたときに呼び出されます。フックには3つのパラメーターが指定されています。前のHEADの参照、新しいHEADの参照（変更されている場合と変更されていない場合があります）、およびチェックアウトがブランチチェックアウト（ブランチの変更、フラグ= 1）であったかどうかを示すフラグ、またはファイルのチェックアウト（インデックスからファイルを取得、flag = 0）。このフックは &lt;code&gt;git switch&lt;/code&gt; または &lt;code&gt;git checkout&lt;/code&gt; の結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="7b0692c459d4a723afc690b678a8556c7e5d3814" translate="yes" xml:space="preserve">
          <source>This hook is invoked when the configuration option &lt;code&gt;core.fsmonitor&lt;/code&gt; is set to &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt;. It takes two arguments, a version (currently 1) and the time in elapsed nanoseconds since midnight, January 1, 1970.</source>
          <target state="translated">このフックは、設定オプション &lt;code&gt;core.fsmonitor&lt;/code&gt; が &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt; に設定されている場合に呼び出されます。バージョン（現在は1）と1970年1月1日の午前0時からの経過ナノ秒単位の時間の2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="1ea8190ee0fad5a3aca31c578a724c322c0d57cb" translate="yes" xml:space="preserve">
          <source>This hook is invoked when the index is written in read-cache.c do_write_locked_index.</source>
          <target state="translated">このフックは、read-cache.c do_write_locked_indexにインデックスが書き込まれたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="bbcd7cc3d137fc9e83cb037a7ffe28a3a104cf5b" translate="yes" xml:space="preserve">
          <source>This hook is invoked with the environment variable &lt;code&gt;GIT_EDITOR=:&lt;/code&gt; if the command will not bring up an editor to modify the commit message.</source>
          <target state="translated">このフックは、環境変数 &lt;code&gt;GIT_EDITOR=:&lt;/code&gt; 呼び出されます。コマンドがコミットメッセージを変更するためのエディターを起動しない場合。</target>
        </trans-unit>
        <trans-unit id="ddc7ece9286909c0de44abe41d5a762b67552ed5" translate="yes" xml:space="preserve">
          <source>This hook is meant primarily for notification, and cannot affect the outcome of &lt;code&gt;git am&lt;/code&gt;.</source>
          <target state="translated">このフックは主に通知用であり、 &lt;code&gt;git am&lt;/code&gt; の結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="448e187d53f17c70cda00f92a3ee55c4bde07472" translate="yes" xml:space="preserve">
          <source>This hook is meant primarily for notification, and cannot affect the outcome of &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">このフックは主に通知用であり、 &lt;code&gt;git commit&lt;/code&gt; の結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="08260832c28c95684a1993d7203db5c6a733006a" translate="yes" xml:space="preserve">
          <source>This hook is meant primarily for notification, and cannot affect the outcome of &lt;code&gt;git receive-pack&lt;/code&gt;.</source>
          <target state="translated">このフックは主に通知用であり、 &lt;code&gt;git receive-pack&lt;/code&gt; の結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="f1b9eafafbdf014b8c082347223fc7e3e439cd3c" translate="yes" xml:space="preserve">
          <source>This implies &lt;code&gt;--revs&lt;/code&gt;. In addition to the list of revision arguments read from the standard input, pretend as if all refs under &lt;code&gt;refs/&lt;/code&gt; are specified to be included.</source>
          <target state="translated">これは &lt;code&gt;--revs&lt;/code&gt; を意味します。標準入力から読み取られたリビジョン引数のリストに加えて、 &lt;code&gt;refs/&lt;/code&gt; 下のすべてのref が含まれるように指定されているかのように見せかけます。</target>
        </trans-unit>
        <trans-unit id="00f6fe101136dac1c604175fe5bf787266d15317" translate="yes" xml:space="preserve">
          <source>This implies &lt;code&gt;--revs&lt;/code&gt;. When processing the list of revision arguments read from the standard input, limit the objects packed to those that are not already packed.</source>
          <target state="translated">これは &lt;code&gt;--revs&lt;/code&gt; を意味します。標準入力から読み取られたリビジョン引数のリストを処理するときは、パックされるオブジェクトを、まだパックされていないオブジェクトに制限します。</target>
        </trans-unit>
        <trans-unit id="23abf25dbec44cc1a257bc71a457bb760d4a79eb" translate="yes" xml:space="preserve">
          <source>This implies the &lt;code&gt;--topo-order&lt;/code&gt; option by default, but the &lt;code&gt;--date-order&lt;/code&gt; option may also be specified.</source>
          <target state="translated">これが意味 &lt;code&gt;--topo-order&lt;/code&gt; デフォルトでオプションを、しかし &lt;code&gt;--date-order&lt;/code&gt; オプションも指定することができます。</target>
        </trans-unit>
        <trans-unit id="9bafb6d097d43ca4ccca730edb887425acfba8b5" translate="yes" xml:space="preserve">
          <source>This imports the specified depot into &lt;code&gt;refs/remotes/p4/master&lt;/code&gt; in an existing Git repository. The &lt;code&gt;--branch&lt;/code&gt; option can be used to specify a different branch to be used for the p4 content.</source>
          <target state="translated">これにより、指定したデポが既存のGitリポジトリの &lt;code&gt;refs/remotes/p4/master&lt;/code&gt; にインポートされます。 &lt;code&gt;--branch&lt;/code&gt; オプションは、p4のコンテンツに使用される別のブランチを指定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="505428074ae07b004fad59f4eaeb272274ac2c6b" translate="yes" xml:space="preserve">
          <source>This information can be used to determine what commit was the tip of a branch &quot;2 days ago&quot;.</source>
          <target state="translated">この情報から、どのコミットが「2日前」のブランチの先端だったのかを判断することができます。</target>
        </trans-unit>
        <trans-unit id="86187244d1368864bf6af8ccb054656e32b6a58b" translate="yes" xml:space="preserve">
          <source>This instructs git svn to recode pathnames to a given encoding. It can be used by windows users and by those who work in non-utf8 locales to avoid corrupted file names with non-ASCII characters. Valid encodings are the ones supported by Perl&amp;rsquo;s Encode module.</source>
          <target state="translated">これはgit svnにパス名を指定されたエンコーディングに再コード化するように指示します。これは、Windowsユーザーおよび非utf8ロケールで作業するユーザーが非ASCII文字を含むファイル名の破損を回避するために使用できます。有効なエンコーディングは、PerlのEncodeモジュールでサポートされているものです。</target>
        </trans-unit>
        <trans-unit id="0909b4167b1b6cfc93db8cafdc74248d3901c792" translate="yes" xml:space="preserve">
          <source>This is a deprecated synonym for &lt;code&gt;repack.writeBitmaps&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;repack.writeBitmaps&lt;/code&gt; の非推奨の同義語です。</target>
        </trans-unit>
        <trans-unit id="0663f3ff3f5e643bb58ee19e6a44fd14680c40d5" translate="yes" xml:space="preserve">
          <source>This is a login shell for SSH accounts to provide restricted Git access. It permits execution only of server-side Git commands implementing the pull/push functionality, plus custom commands present in a subdirectory named &lt;code&gt;git-shell-commands&lt;/code&gt; in the user&amp;rsquo;s home directory.</source>
          <target state="translated">これは、SSHアカウント用のログインシェルであり、制限されたGitアクセスを提供します。プル/プッシュ機能を実装するサーバー側のGit &lt;code&gt;git-shell-commands&lt;/code&gt; と、ユーザーのホームディレクトリのgit-shell-commandsという名前のサブディレクトリにあるカスタムコマンドの実行のみを許可します。</target>
        </trans-unit>
        <trans-unit id="bb9b1700493e02e1c42808252a2a81a90b07f06f" translate="yes" xml:space="preserve">
          <source>This is a modified recursive strategy. When merging trees A and B, if B corresponds to a subtree of A, B is first adjusted to match the tree structure of A, instead of reading the trees at the same level. This adjustment is also done to the common ancestor tree.</source>
          <target state="translated">これは、修正された再帰的な戦略です。木AとBをマージするとき、BがAのサブツリーに対応する場合、Bはまず、同じレベルの木を読むのではなく、Aの木構造に一致するように調整されます。この調整は共通の祖先木に対しても行われます。</target>
        </trans-unit>
        <trans-unit id="94478372a5a22fcace1286299ca604a903c0373f" translate="yes" xml:space="preserve">
          <source>This is a multi-valued variable, and an empty value can be used in a higher priority configuration file (e.g. &lt;code&gt;.git/config&lt;/code&gt; in a repository) to clear the values inherited from a lower priority configuration files (e.g. &lt;code&gt;$HOME/.gitconfig&lt;/code&gt;).</source>
          <target state="translated">これは複数値の変数であり、空の値を優先度の高い構成ファイル（リポジトリの &lt;code&gt;.git/config&lt;/code&gt; など)で使用して、優先度の低い構成ファイル（ &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ）から継承した値をクリアできます。。</target>
        </trans-unit>
        <trans-unit id="9800795b0feafe785919ba7eb03d901a5af98b6d" translate="yes" xml:space="preserve">
          <source>This is a potentially &lt;em&gt;dangerous&lt;/em&gt; mode of operation. It rewrites history, which does not bode well when you published that history already. Do &lt;strong&gt;not&lt;/strong&gt; use this option unless you have read &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; carefully.</source>
          <target state="translated">これは潜在的に&lt;em&gt;危険な&lt;/em&gt;操作モードです。それは歴史を書き直しますが、あなたがその歴史をすでに公開したときは、それはうまくいきません。&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]を&lt;/a&gt;注意深く読んでいない限り、このオプションを使用し&lt;strong&gt;ないで&lt;/strong&gt;ください。</target>
        </trans-unit>
        <trans-unit id="7393bcbfeab09d874001a82423e807bb091915e9" translate="yes" xml:space="preserve">
          <source>This is a quick summary of the major commands; the previous chapters explain how these work in more detail.</source>
          <target state="translated">これは主なコマンドの簡単な要約で、前の章では、これらのコマンドがどのように動作するかをより詳細に説明しています。</target>
        </trans-unit>
        <trans-unit id="e6b70a1472f7c00669a56c92197ed227d5be5866" translate="yes" xml:space="preserve">
          <source>This is a shorthand for &quot;--pretty=oneline --abbrev-commit&quot; used together.</source>
          <target state="translated">これは、&quot;--pretty=oneline --abbrev-commit &quot;と一緒に使われる速記法です。</target>
        </trans-unit>
        <trans-unit id="18c84bcba1b16c1ac1cf14d08c1c68d27e4599a1" translate="yes" xml:space="preserve">
          <source>This is a total waste of time and effort on a filesystem that orders data writes properly, but can be useful for filesystems that do not use journalling (traditional UNIX filesystems) or that only journal metadata and not file contents (OS X&amp;rsquo;s HFS+, or Linux ext3 with &quot;data=writeback&quot;).</source>
          <target state="translated">これは、データ書き込みを適切に順序付けるファイルシステムで時間と労力を浪費することになりますが、ジャーナリングを使用しないファイルシステム（従来のUNIXファイルシステム）、またはメタデータのみをジャーナルし、ファイルの内容を使用しない（OS XのHFS +、またはLinux）場合に役立ちます。 「data = writeback」を使用したext3）。</target>
        </trans-unit>
        <trans-unit id="554ab63db8a74b017dac093a21d0557d821484db" translate="yes" xml:space="preserve">
          <source>This is a toy format. The current time and time zone of this system is always copied into the identity string at the time it is being created by fast-import. There is no way to specify a different time or time zone.</source>
          <target state="translated">これはおもちゃのフォーマットです。このシステムの現在の時刻とタイムゾーンは、fast-importで作成されている時点で常にID文字列にコピーされています。別の時間帯やタイムゾーンを指定する方法はありません。</target>
        </trans-unit>
        <trans-unit id="bc30d84517d5f02b55a3811eba6ffba9e6c0e4f0" translate="yes" xml:space="preserve">
          <source>This is a work in progress.</source>
          <target state="translated">これは作業中のものです。</target>
        </trans-unit>
        <trans-unit id="3e77feb91313add3d7aff3491329020f7cd2b88e" translate="yes" xml:space="preserve">
          <source>This is an easy way to check out a particular version without having to make up a name for the new branch. You can still create a new branch (or tag) for this version later if you decide to.</source>
          <target state="translated">これは、新しいブランチの名前を作らなくても、特定のバージョンをチェックアウトするための簡単な方法です。このバージョン用の新しいブランチ (またはタグ)を後で作成することができます。</target>
        </trans-unit>
        <trans-unit id="86d03a90949a936d437c536daea902a3352ca567" translate="yes" xml:space="preserve">
          <source>This is because &lt;code&gt;rebase&lt;/code&gt; is used in a workflow that treats the history at the remote as the shared canonical one, and treats the work done on the branch you are rebasing as the third-party work to be integrated, and you are temporarily assuming the role of the keeper of the canonical history during the rebase. As the keeper of the canonical history, you need to view the history from the remote as &lt;code&gt;ours&lt;/code&gt; (i.e. &quot;our shared canonical history&quot;), while what you did on your side branch as &lt;code&gt;theirs&lt;/code&gt; (i.e. &quot;one contributor&amp;rsquo;s work on top of it&quot;).</source>
          <target state="translated">これは、リモートでの履歴を共有の標準的なものとして扱い、 &lt;code&gt;rebase&lt;/code&gt; するブランチで行われた作業を統合するサードパーティの作業として扱い、一時的に役割を引き受けるワークフローでリベースが使用されるためですリベース中の正規履歴のキーパーの。正規の歴史の番人として、あなたにリモートからの履歴を表示する必要が &lt;code&gt;ours&lt;/code&gt; 、あなたの側枝に何をしたかしながら、（つまり、「私たちの共有正規の歴史」）として &lt;code&gt;theirs&lt;/code&gt; （すなわち、「その上に1つの貢献の仕事」 ）。</target>
        </trans-unit>
        <trans-unit id="95a20fc02bc3cd4094f682df1ea1f755e327d688" translate="yes" xml:space="preserve">
          <source>This is called a &lt;code&gt;hunk header&lt;/code&gt;. The &quot;TEXT&quot; portion is by default a line that begins with an alphabet, an underscore or a dollar sign; this matches what GNU &lt;code&gt;diff -p&lt;/code&gt; output uses. This default selection however is not suited for some contents, and you can use a customized pattern to make a selection.</source>
          <target state="translated">これは、 &lt;code&gt;hunk header&lt;/code&gt; と呼ばれます。「TEXT」部分は、デフォルトではアルファベット、アンダースコア、またはドル記号で始まる行です。これは、GNU &lt;code&gt;diff -p&lt;/code&gt; 出力が使用するものと一致します。ただし、このデフォルトの選択は一部のコンテンツには適しておらず、カスタマイズされたパターンを使用して選択を行うことができます。</target>
        </trans-unit>
        <trans-unit id="85de32d717921314245903361d4033db93188253" translate="yes" xml:space="preserve">
          <source>This is default name of common system-wide configuration file.</source>
          <target state="translated">これは、システム全体に共通の設定ファイルのデフォルト名です。</target>
        </trans-unit>
        <trans-unit id="8fabc38be889239efec56b25dba57afb3b308b5b" translate="yes" xml:space="preserve">
          <source>This is default name of fallback system-wide configuration file. This file is used only if per-instance configuration variable is not found.</source>
          <target state="translated">これはフォールバックシステム全体の設定ファイルのデフォルト名です。このファイルは、インスタンスごとの設定変数が見つからない場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="e13cac7eff842df90d7031a70a4150ab3a8cdbc2" translate="yes" xml:space="preserve">
          <source>This is default name of per-instance configuration file. The format of this file is described above.</source>
          <target state="translated">これは、インスタンス単位の設定ファイルのデフォルト名です。このファイルのフォーマットは上述の通りです。</target>
        </trans-unit>
        <trans-unit id="2ac99b50de3702f5d543e44c6b1ddc55b08d7471" translate="yes" xml:space="preserve">
          <source>This is designed to be as compact as possible.</source>
          <target state="translated">できるだけコンパクトになるように設計されています。</target>
        </trans-unit>
        <trans-unit id="d4d30dfd1772dd73a7b51cd065bd14037d1044bf" translate="yes" xml:space="preserve">
          <source>This is done to prevent you from losing your work-in-progress changes, and mixing your random changes in an unrelated merge commit. To illustrate, suppose you start from what has been committed last to your repository:</source>
          <target state="translated">これは、進行中の変更を失ったり、無関係なマージコミットにランダムな変更が混ざったりするのを防ぐためです。説明するために、リポジトリに最後にコミットされたものから始めるとします。</target>
        </trans-unit>
        <trans-unit id="c5483036881ec5a0c568843866e403149495194d" translate="yes" xml:space="preserve">
          <source>This is how you read a blob (actually, not only a blob, but any type of object). To know how the function &lt;code&gt;read_object_with_reference()&lt;/code&gt; actually works, find the source code for it (something like &lt;code&gt;git grep
read_object_with | grep &quot;:[a-z]&quot;&lt;/code&gt; in the Git repository), and read the source.</source>
          <target state="translated">これは、ブロブ（実際にはブロブだけでなく、あらゆるタイプのオブジェクト）を読み取る方法です。関数 &lt;code&gt;read_object_with_reference()&lt;/code&gt; が実際にどのように機能するかを知るには、そのソースコード（Gitリポジトリの &lt;code&gt;git grep read_object_with | grep &quot;:[a-z]&quot;&lt;/code&gt; ようなもの）を見つけて、ソースを読み取ります。</target>
        </trans-unit>
        <trans-unit id="d94f65e687e225292db2cabccebd8f5b3adaa1d5" translate="yes" xml:space="preserve">
          <source>This is ideally suited for read-only updates, i.e., pulling from Git repositories.</source>
          <target state="translated">これは、読み取り専用の更新、つまり Git リポジトリからの引っ張り出しに最適です。</target>
        </trans-unit>
        <trans-unit id="4f74abb17322f51c4e08c52446429282a69cbb4c" translate="yes" xml:space="preserve">
          <source>This is intended to be used by the test suite only. It allows to force the version for the generated pack index, and to force 64-bit index entries on objects located above the given offset.</source>
          <target state="translated">これは、テストスイートでのみ使用することを意図しています。これにより、生成されたパックインデックスのバージョンを強制的に変更したり、 指定したオフセットよりも上に位置するオブジェクトに対して 64 ビットのインデックスエントリを強制的に追加したりすることができます。</target>
        </trans-unit>
        <trans-unit id="8180429180a5d33dfa16e7d2805d2ac9f53f061d" translate="yes" xml:space="preserve">
          <source>This is just to get you into the groove for the most libified part of Git: the revision walker.</source>
          <target state="translated">これは、Git の最も解放された部分であるリビジョンウォーカーのためのものです。</target>
        </trans-unit>
        <trans-unit id="dce30f3fbb0be29025f159d55505215087cce86b" translate="yes" xml:space="preserve">
          <source>This is known to &lt;code&gt;range-diff&lt;/code&gt; as &quot;dual coloring&quot;. Use &lt;code&gt;--no-dual-color&lt;/code&gt; to revert to color all lines according to the outer diff markers (and completely ignore the inner diff when it comes to color).</source>
          <target state="translated">これは&quot;dual coloring&quot;として &lt;code&gt;range-diff&lt;/code&gt; として知られています。 &lt;code&gt;--no-dual-color&lt;/code&gt; を使用して、外側のdiffマーカーに従ってすべての線の色を元に戻します（色に関しては、内側のdiffを完全に無視します）。</target>
        </trans-unit>
        <trans-unit id="51ecbd5eaeeeee461a4969f3b0cb27dc975ebc23" translate="yes" xml:space="preserve">
          <source>This is made much worse if many files have to be fixed to resolve conflicts. That&amp;rsquo;s why such merges are called &quot;evil merges&quot;. They can make regressions very difficult to track down. It can even be misleading to know the first bad commit if it happens to be such a merge, because people might think that the bug comes from bad conflict resolution when it comes from a semantic change in one branch.</source>
          <target state="translated">競合を解決するために多くのファイルを修正する必要がある場合、これはさらに悪化します。そのため、このようなマージは「悪のマージ」と呼ばれます。彼らは回帰を追跡することを非常に困難にすることができます。1つのブランチでのセマンティックの変更に起因するバグは不適切な競合の解決に起因すると考えられるため、このようなマージが発生した場合、最初の不良コミットを知ることは誤解を招く可能性さえあります。</target>
        </trans-unit>
        <trans-unit id="2742189647afc1dbda2e1e2ecc6c9303cbb2d70b" translate="yes" xml:space="preserve">
          <source>This is meant to be used by higher level scripts to compute merge results outside of the index, and stuff the results back into the index. For this reason, the output from the command omits entries that match the &amp;lt;branch1&amp;gt; tree.</source>
          <target state="translated">これは、より高いレベルのスクリプトがインデックス外のマージ結果を計算し、結果をインデックスに詰め込むために使用されることを意図しています。このため、コマンドからの出力では、&amp;lt;branch1&amp;gt;ツリーに一致するエントリが省略されています。</target>
        </trans-unit>
        <trans-unit id="9ccf843e585a34e60ae505f61685a10813c9c88a" translate="yes" xml:space="preserve">
          <source>This is most often done when you remembered what you just committed is incomplete, or you misspelled your commit message, or both. Leaves working tree as it was before &quot;reset&quot;.</source>
          <target state="translated">これは、コミットした内容が不完全であったことを思い出したときや、コミットメッセージのスペルを間違えたとき、あるいはその両方の場合によく行われます。作業ツリーを &quot;reset&quot; 前の状態に戻します。</target>
        </trans-unit>
        <trans-unit id="efff48b2c5bed4c5ab6435b6d058280a53664967" translate="yes" xml:space="preserve">
          <source>This is not a command the end user would want to run. Ever. This documentation is meant for people who are studying the Porcelain-ish scripts and/or are writing new ones.</source>
          <target state="translated">これはエンドユーザーが実行したいコマンドではありません。絶対に。このドキュメントは、Porcelain-ishなスクリプトを研究している人や、新しいスクリプトを書いている人のためのものです。</target>
        </trans-unit>
        <trans-unit id="4c9e09ba77ce1340a426d6ae669add42a4fe4542" translate="yes" xml:space="preserve">
          <source>This is not a real filter executed for each commit but a one time setup just before the loop. Therefore no commit-specific variables are defined yet. Functions or variables defined here can be used or modified in the following filter steps except the commit filter, for technical reasons.</source>
          <target state="translated">これはコミットごとに実行されるフィルタではなく、ループの直前に一度だけ設定されるものです。したがって、コミット固有の変数はまだ定義されていません。ここで定義されている関数や変数は、技術的な理由から、コミットフィルタ以外の以下のフィルタステップで使用したり変更したりすることができます。</target>
        </trans-unit>
        <trans-unit id="ad1d1c10cd51125ef48d021d8c7283be0413a66d" translate="yes" xml:space="preserve">
          <source>This is not hard to understand, as soon as you realize that Git simply never knows (or cares) about files that it is not told about explicitly. Git will never go &lt;strong&gt;looking&lt;/strong&gt; for files to compare, it expects you to tell it what the files are, and that&amp;rsquo;s what the index is there for.</source>
          <target state="translated">これは、Gitが明示的に通知されていないファイルについて単に知らない（または気にしない）だけであることがわかるとすぐに理解できます。Gitは比較するファイルを&lt;strong&gt;探す&lt;/strong&gt;ことはありません。ファイルが何であるかを教えてくれることを期待しており、それがインデックスの目的です。</target>
        </trans-unit>
        <trans-unit id="0273358cae89a5a683cca4bca340f2d1ab3cc600" translate="yes" xml:space="preserve">
          <source>This is only used by git-completion.bash to add or remove commands from the list of completed commands. Normally only porcelain commands and a few select others are completed. You can add more commands, separated by space, in this variable. Prefixing the command with &lt;code&gt;-&lt;/code&gt; will remove it from the existing list.</source>
          <target state="translated">これは、完了したコマンドのリストにコマンドを追加または削除するためにgit-completion.bashによってのみ使用されます。通常、磁器コマンドといくつかの選択コマンドのみが完了します。この変数には、スペースで区切ってコマンドを追加できます。コマンドの前に &lt;code&gt;-&lt;/code&gt; を付けると、既存のリストから削除されます。</target>
        </trans-unit>
        <trans-unit id="fcaf558e1ca35a6c93dcb363081455cef6ced8a0" translate="yes" xml:space="preserve">
          <source>This is only valid for &amp;lt;end&amp;gt; and will specify a number of lines before or after the line given by &amp;lt;start&amp;gt;.</source>
          <target state="translated">これは&amp;lt;end&amp;gt;にのみ有効で、&amp;lt;start&amp;gt;で指定された行の前後の行数を指定します。</target>
        </trans-unit>
        <trans-unit id="1b0501180252ff128dca83458515deca695a7ecc" translate="yes" xml:space="preserve">
          <source>This is optional and is only searched when &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; is present in $GIT_DIR/config.</source>
          <target state="translated">これはオプションであり、 &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; が$ GIT_DIR / configにある場合にのみ検索されます。</target>
        </trans-unit>
        <trans-unit id="4306207006bf4fdd2134f4efea5f0d698d2c1f81" translate="yes" xml:space="preserve">
          <source>This is particularly true when passing in diff options. Currently some options like &lt;code&gt;--stat&lt;/code&gt; can, as an emergent effect, produce output that&amp;rsquo;s quite useless in the context of &lt;code&gt;range-diff&lt;/code&gt;. Future versions of &lt;code&gt;range-diff&lt;/code&gt; may learn to interpret such options in a manner specific to &lt;code&gt;range-diff&lt;/code&gt; (e.g. for &lt;code&gt;--stat&lt;/code&gt; producing human-readable output which summarizes how the diffstat changed).</source>
          <target state="translated">これは、diffオプションを渡すときに特に当てはまります。現在、-- &lt;code&gt;--stat&lt;/code&gt; ようないくつかのオプションは、緊急効果として、 &lt;code&gt;range-diff&lt;/code&gt; のコンテキストではまったく役に立たない出力を生成する可能性があります。 &lt;code&gt;range-diff&lt;/code&gt; の将来のバージョンでは、そのようなオプションを &lt;code&gt;range-diff&lt;/code&gt; に固有の方法で解釈することを学習する可能性があります（たとえば、 &lt;code&gt;--stat&lt;/code&gt; がdiffstatの変更方法を要約する人間が読める出力を生成する場合）。</target>
        </trans-unit>
        <trans-unit id="c2dfec9fbb580524d9c87ce7e3303a7b47cc295d" translate="yes" xml:space="preserve">
          <source>This is passed to both underlying git-fetch to squelch reporting of during transfer, and underlying git-merge to squelch output during merging.</source>
          <target state="translated">これは、転送中の報告をスクエルチするために基礎となる git-fetch と、マージ中の出力をスクエルチするために基礎となる git-merge の両方に渡されます。</target>
        </trans-unit>
        <trans-unit id="3d17e8f742373c8bbf1871e58142a3d3c4b1c09b" translate="yes" xml:space="preserve">
          <source>This is per-repository enhancement / version of global prefix-based &lt;code&gt;@git_base_url_list&lt;/code&gt; gitweb configuration variable (see &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf[5]&lt;/a&gt;).</source>
          <target state="translated">これは、リポジトリごとの拡張/グローバルプレフィックスベースの &lt;code&gt;@git_base_url_list&lt;/code&gt; gitweb構成変数のバージョンです（&lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf [5]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a7bcc6783fe2c533eb40b84879a83d32f4d95dc9" translate="yes" xml:space="preserve">
          <source>This is similar to --symbolic, but it omits input that are not refs (i.e. branch or tag names; or more explicitly disambiguating &quot;heads/master&quot; form, when you want to name the &quot;master&quot; branch when there is an unfortunately named tag &quot;master&quot;), and show them as full refnames (e.g. &quot;refs/heads/master&quot;).</source>
          <target state="translated">これは -symbolic と似ていますが、refs ではない入力(すなわちブランチ名やタグ名;より明示的に &quot;head/master&quot; の形式を曖昧にするために、不幸にも &quot;master&quot; という名前のタグがある場合に &quot;master&quot; ブランチに名前を付けたい場合など)を省略し、完全な refnames (例えば &quot;refs/heads/master&quot;)として表示します。</target>
        </trans-unit>
        <trans-unit id="4cae7dda407705febf1be1d8f0d77956238a429a" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;code&gt;info/grafts&lt;/code&gt; but is internally used and maintained by shallow clone mechanism. See &lt;code&gt;--depth&lt;/code&gt; option to &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; and &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;. This file is ignored if $GIT_COMMON_DIR is set and &quot;$GIT_COMMON_DIR/shallow&quot; will be used instead.</source>
          <target state="translated">これは &lt;code&gt;info/grafts&lt;/code&gt; に似ていますが、内部的に使用され、浅いクローンメカニズムによって維持されます。&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;および&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]の&lt;/a&gt; &lt;code&gt;--depth&lt;/code&gt; オプションを参照してください。$ GIT_COMMON_DIRが設定されており、代わりに「$ GIT_COMMON_DIR / shallow」が使用される場合、このファイルは無視されます。</target>
        </trans-unit>
        <trans-unit id="44c5e44a5b0e8e88feba4a9ab4b3411e28cf0521" translate="yes" xml:space="preserve">
          <source>This is similar to the previous mode, but lets you use the interactive interface to show the &quot;diff&quot; output and choose which hunks to use in the result. See below for the description of &lt;code&gt;--patch&lt;/code&gt; option.</source>
          <target state="translated">これは前のモードに似ていますが、インタラクティブインターフェイスを使用して「diff」出力を表示し、結果で使用するハンクを選択できます。 &lt;code&gt;--patch&lt;/code&gt; オプションの説明については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="4054020991b3f63ee43241d99b871a192e5f7888" translate="yes" xml:space="preserve">
          <source>This is synonymous to the previous form. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the same effect as using HEAD instead.</source>
          <target state="translated">これは前のフォームと同義です。一方の&amp;lt;commit&amp;gt;を省略すると、代わりにHEADを使用するのと同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="75478eb48b06b2098532610f52369c54c5a35766" translate="yes" xml:space="preserve">
          <source>This is the Git native format and is &lt;code&gt;&amp;lt;time&amp;gt; SP &amp;lt;offutc&amp;gt;&lt;/code&gt;. It is also fast-import&amp;rsquo;s default format, if --date-format was not specified.</source>
          <target state="translated">これはGitネイティブ形式であり、 &lt;code&gt;&amp;lt;time&amp;gt; SP &amp;lt;offutc&amp;gt;&lt;/code&gt; です。--date-formatが指定されていない場合、これはfast-importのデフォルト形式でもあります。</target>
        </trans-unit>
        <trans-unit id="6bd79ba5c8340a61cc49527317aae865e2230698" translate="yes" xml:space="preserve">
          <source>This is the filter for performing the commit. If this filter is specified, it will be called instead of the &lt;code&gt;git commit-tree&lt;/code&gt; command, with arguments of the form &quot;&amp;lt;TREE_ID&amp;gt; [(-p &amp;lt;PARENT_COMMIT_ID&amp;gt;)&amp;hellip;​]&quot; and the log message on stdin. The commit id is expected on stdout.</source>
          <target state="translated">これは、コミットを実行するためのフィルターです。このフィルターが指定されている場合、 &quot;&amp;lt;TREE_ID&amp;gt; [（-p &amp;lt;PARENT_COMMIT_ID&amp;gt;）&amp;hellip;]&quot;という形式の引数とstdinのログメッセージを使用して、 &lt;code&gt;git commit-tree&lt;/code&gt; コマンドの代わりに呼び出されます。コミットIDはstdoutで予期されています。</target>
        </trans-unit>
        <trans-unit id="ab02ed108f018595c9832dcfce47c6a593278667" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting tag names. When passed, it will be called for every tag ref that points to a rewritten object (or to a tag object which points to a rewritten object). The original tag name is passed via standard input, and the new tag name is expected on standard output.</source>
          <target state="translated">これは、タグ名を書き換えるためのフィルタです。渡されると、書き換えられたオブジェクトを指す(または書き換えられたオブジェクトを指すタグオブジェクトを指す)タグrefごとに呼び出されます。元のタグ名は標準入力で渡され、標準出力では新しいタグ名が期待されます。</target>
        </trans-unit>
        <trans-unit id="ec46b5cef98509f43f653471ea24de2e709b0b36" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting the commit messages. The argument is evaluated in the shell with the original commit message on standard input; its standard output is used as the new commit message.</source>
          <target state="translated">これはコミットメッセージを書き換えるためのフィルタです。引数は、標準入力の元のコミットメッセージとともにシェルで評価され、その標準出力が新しいコミットメッセージとして使用されます。</target>
        </trans-unit>
        <trans-unit id="baaf77805fbcb910ae11f451b39d9e38daaa6669" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting the commit&amp;rsquo;s parent list. It will receive the parent string on stdin and shall output the new parent string on stdout. The parent string is in the format described in &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt;: empty for the initial commit, &quot;-p parent&quot; for a normal commit and &quot;-p parent1 -p parent2 -p parent3 &amp;hellip;​&quot; for a merge commit.</source>
          <target state="translated">これは、コミットの親リストを書き換えるためのフィルターです。stdinで親文字列を受け取り、stdoutで新しい親文字列を出力します。親文字列は&lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree [1]で&lt;/a&gt;説明されている形式です。最初のコミットの場合は空、通常のコミットの場合は「-p parent」、マージの場合は「-p parent1 -p parent2 -p parent3&amp;hellip;」コミット。</target>
        </trans-unit>
        <trans-unit id="ed6796eee1e84719fc79503aec05a2585b0a98ee" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting the index. It is similar to the tree filter but does not check out the tree, which makes it much faster. Frequently used with &lt;code&gt;git rm --cached
--ignore-unmatch ...&lt;/code&gt;, see EXAMPLES below. For hairy cases, see &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;.</source>
          <target state="translated">インデックスを書き換えるためのフィルターです。これはツリーフィルターに似ていますが、ツリーをチェックアウトしないため、処理速度が大幅に向上します。 &lt;code&gt;git rm --cached --ignore-unmatch ...&lt;/code&gt; で頻繁に使用されます。以下の例を参照してください。毛深いケースについては、&lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="84464b13412e29584cb64fc663c003212ddd470c" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting the tree and its contents. The argument is evaluated in shell with the working directory set to the root of the checked out tree. The new tree is then used as-is (new files are auto-added, disappeared files are auto-removed - neither .gitignore files nor any other ignore rules &lt;strong&gt;HAVE ANY EFFECT&lt;/strong&gt;!).</source>
          <target state="translated">これは、ツリーとその内容を書き換えるためのフィルターです。引数はシェルで評価され、作業ディレクトリはチェックアウトされたツリーのルートに設定されます。新しいツリーは、（ - .gitignoreファイルや他でもないが、ルールは無視し、新しいファイルは、自動的に追加されたファイルは自動削除されている姿を消し、そのまま使用されて&lt;strong&gt;何の効果もあり&lt;/strong&gt;！）。</target>
        </trans-unit>
        <trans-unit id="ac6e8f6a01875184858c8585102e8f6aa273aee7" translate="yes" xml:space="preserve">
          <source>This is the format defined by the initial version of git, including but not limited to the format of the repository directory, the repository configuration file, and the object and ref storage. Specifying the complete behavior of git is beyond the scope of this document.</source>
          <target state="translated">これは、git の初期バージョンで定義された形式で、リポジトリディレクトリの形式、リポジトリ設定ファイルの形式、オブジェクトや ref の保存方法などが含まれますが、これらに限定されません。git の完全な動作を指定することは、このドキュメントの範囲を超えています。</target>
        </trans-unit>
        <trans-unit id="53064adeec7c86c12f0de7129be2018180dbdde8" translate="yes" xml:space="preserve">
          <source>This is the instruction format to copy a byte range from the source object. It encodes the offset to copy from and the number of bytes to copy. Offset and size are in little-endian order.</source>
          <target state="translated">コピー元のオブジェクトからバイト範囲をコピーする命令形式です。コピー元のオフセットとコピーするバイト数をエンコードします。オフセットとサイズはリトルエンディアン順です。</target>
        </trans-unit>
        <trans-unit id="7c56810b4cb2a212f096564a869dc50ed111eb3c" translate="yes" xml:space="preserve">
          <source>This is the instruction reserved for future expansion.</source>
          <target state="translated">これは将来の拡張のために予約された命令です。</target>
        </trans-unit>
        <trans-unit id="2ac15a186ae4c1add6605d649b034295db99bef1" translate="yes" xml:space="preserve">
          <source>This is the instruction to construct target object without the base object. The following data is appended to the target object. The first seven bits of the first octet determines the size of data in bytes. The size must be non-zero.</source>
          <target state="translated">ベースとなるオブジェクトを持たずにターゲットオブジェクトを構築する命令です。ターゲットオブジェクトには次のデータが付加されます。最初のオクテットの最初の7ビットは、データのサイズをバイト単位で決定します。サイズは0以外でなければなりません。</target>
        </trans-unit>
        <trans-unit id="109ca8035c1b87bb820c08a28a9de7b34fde1bb6" translate="yes" xml:space="preserve">
          <source>This is the opposite of &lt;code&gt;ours&lt;/code&gt;; note that, unlike &lt;code&gt;ours&lt;/code&gt;, there is no &lt;code&gt;theirs&lt;/code&gt; merge strategy to confuse this merge option with.</source>
          <target state="translated">これは &lt;code&gt;ours&lt;/code&gt; の反対です。 &lt;code&gt;ours&lt;/code&gt; とは異なり、このマージオプションを混同する &lt;code&gt;theirs&lt;/code&gt; マージ戦略がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a470bc42a7932d13fef06a087064186d12eef547" translate="yes" xml:space="preserve">
          <source>This is the preferred method.</source>
          <target state="translated">これが好ましい方法です。</target>
        </trans-unit>
        <trans-unit id="d5ae5cf60359e7831f40d915d7567f63dc115a19" translate="yes" xml:space="preserve">
          <source>This is the same &lt;code&gt;git read-tree&lt;/code&gt; command we have already seen, but it takes three trees, unlike previous examples. This reads the contents of each tree into different &lt;code&gt;stage&lt;/code&gt; in the index file (the first tree goes to stage 1, the second to stage 2, etc.). After reading three trees into three stages, the paths that are the same in all three stages are &lt;code&gt;collapsed&lt;/code&gt; into stage 0. Also paths that are the same in two of three stages are collapsed into stage 0, taking the SHA-1 from either stage 2 or stage 3, whichever is different from stage 1 (i.e. only one side changed from the common ancestor).</source>
          <target state="translated">これはすでに見た &lt;code&gt;git read-tree&lt;/code&gt; コマンドと同じですが、前の例とは異なり、3つのツリーが必要です。これにより、各ツリーのコンテンツがインデックスファイルの異なる &lt;code&gt;stage&lt;/code&gt; に読み込まれます（最初のツリーはステージ1に、2番目のツリーはステージ2に、など）。3つのツリーを3つのステージに読み込んだ後、3つのステージすべてで同じパスがステージ0に &lt;code&gt;collapsed&lt;/code&gt; れます。また、3つのステージのうち2つで同じパスがステージ0に折りたたまれ、SHA-1がいずれかのステージ2から取得されます。またはステージ3は、ステージ1とは異なる（つまり、共通の祖先から片側のみが変更された）。</target>
        </trans-unit>
        <trans-unit id="d9a78198f4c718b4aad0f141375d5823cd8e39e3" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;code&gt;gitdir&lt;/code&gt; except that matching is done case-insensitively (e.g. on case-insensitive file systems)</source>
          <target state="translated">これは &lt;code&gt;gitdir&lt;/code&gt; と同じですが、照合は大文字と小文字を区別せずに行われます（たとえば、大文字と小文字を区別しないファイルシステム）。</target>
        </trans-unit>
        <trans-unit id="3d8eaa3e252f616f4794342341d2f4ec065a52c7" translate="yes" xml:space="preserve">
          <source>This is the standard email format as described by RFC 2822.</source>
          <target state="translated">これは、RFC 2822に記載されている標準的な電子メールフォーマットです。</target>
        </trans-unit>
        <trans-unit id="b1825adadaae31865a7ba56f02eeaa58bb1a595e" translate="yes" xml:space="preserve">
          <source>This is the standard helper program to use with &lt;code&gt;git merge-index&lt;/code&gt; to resolve a merge after the trivial merge done with &lt;code&gt;git read-tree -m&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;git read-tree -m&lt;/code&gt; を使用して簡単なマージを行った後、 &lt;code&gt;git merge-index&lt;/code&gt; を使用してマージを解決する標準のヘルパープログラムです。</target>
        </trans-unit>
        <trans-unit id="f4605ef17a6ae238fb7ad1359ce2fc3809a170d2" translate="yes" xml:space="preserve">
          <source>This is the state of the index file and the working file after &lt;code&gt;git merge&lt;/code&gt; returns control back to you, leaving the conflicting merge for you to resolve. Notice that the path &lt;code&gt;hello&lt;/code&gt; is still unmerged, and what you see with &lt;code&gt;git diff&lt;/code&gt; at this point is differences since stage 2 (i.e. your version).</source>
          <target state="translated">これは、 &lt;code&gt;git merge&lt;/code&gt; が制御をユーザーに戻した後のインデックスファイルと作業ファイルの状態です。競合するマージは解決する必要があります。パス &lt;code&gt;hello&lt;/code&gt; はまだマージされておらず、この時点で &lt;code&gt;git diff&lt;/code&gt; で表示されるのは、ステージ2（つまり、バージョン）以降の違いです。</target>
        </trans-unit>
        <trans-unit id="885013fc19184ff3f87757857452f6badc7e664c" translate="yes" xml:space="preserve">
          <source>This is to emulate &lt;code&gt;git fetch&lt;/code&gt; run on the &lt;code&gt;mothership&lt;/code&gt; using &lt;code&gt;git
push&lt;/code&gt; that is run in the opposite direction in order to integrate the work done on &lt;code&gt;satellite&lt;/code&gt;, and is often necessary when you can only make connection in one way (i.e. satellite can ssh into mothership but mothership cannot initiate connection to satellite because the latter is behind a firewall or does not run sshd).</source>
          <target state="translated">これは、 &lt;code&gt;satellite&lt;/code&gt; で行われた作業を統合するために反対方向に実行される &lt;code&gt;git push&lt;/code&gt; を使用して、 &lt;code&gt;mothership&lt;/code&gt; &lt;code&gt;git fetch&lt;/code&gt; run をエミュレートするものであり、一方向でしか接続できない場合（つまり、サテライトが母船にsshできる場合）に必要です。しかし、後者はファイアウォールの背後にあるか、sshdを実行していないため、母艦は衛星への接続を開始できません。</target>
        </trans-unit>
        <trans-unit id="a0fbffa526980249cc459b3697ae082d2fb16d12" translate="yes" xml:space="preserve">
          <source>This is to view the changes between two arbitrary &amp;lt;commit&amp;gt;.</source>
          <target state="translated">これは、2つの任意の&amp;lt;commit&amp;gt;間の変更を表示するためのものです。</target>
        </trans-unit>
        <trans-unit id="2ccd3734f230a6bccf87e0841ef19acfd1763ec7" translate="yes" xml:space="preserve">
          <source>This is used if &lt;code&gt;gitcvs.usecrlfattr&lt;/code&gt; does not resolve the correct &lt;code&gt;-kb&lt;/code&gt; mode to use. If true, all unresolved files are sent to the client in mode &lt;code&gt;-kb&lt;/code&gt;. This causes the client to treat them as binary files, which suppresses any newline munging it otherwise might do. Alternatively, if it is set to &quot;guess&quot;, then the contents of the file are examined to decide if it is binary, similar to &lt;code&gt;core.autocrlf&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;gitcvs.usecrlfattr&lt;/code&gt; が使用する正しい &lt;code&gt;-kb&lt;/code&gt; モードを解決しない場合に使用されます。trueの場合、すべての未解決のファイルはモード &lt;code&gt;-kb&lt;/code&gt; でクライアントに送信されます。これにより、クライアントはそれらのファイルをバイナリファイルとして扱い、それがなければ改行を改ざんすることを抑制します。あるいは、「guess」に設定されている場合、ファイルの内容が調べられ、 &lt;code&gt;core.autocrlf&lt;/code&gt; と同様に、それがバイナリかどうかが判断されます。</target>
        </trans-unit>
        <trans-unit id="414b7e001678a67515e35206eca5b23ff617a9b6" translate="yes" xml:space="preserve">
          <source>This is used to avoid unnecessary false hits when &lt;code&gt;git diff-files&lt;/code&gt; is run after &lt;code&gt;git read-tree&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;git read-tree&lt;/code&gt; の後に &lt;code&gt;git diff-files&lt;/code&gt; が実行されたときに不要な誤ヒットを回避するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1756049aad8be96bbdbe029ae5b31f810c9534b0" translate="yes" xml:space="preserve">
          <source>This is used to imply --all-progress whenever progress display is activated. Unlike --all-progress this flag doesn&amp;rsquo;t actually force any progress display by itself.</source>
          <target state="translated">これは、進行状況の表示がアクティブになっているときは常に--all-progressを意味します。--all-progressとは異なり、このフラグは実際にはそれ自体で進行状況の表示を強制しません。</target>
        </trans-unit>
        <trans-unit id="fa389947911fb92b7cae5947eac62679e5095362" translate="yes" xml:space="preserve">
          <source>This is used to reorder the filepairs according to the user&amp;rsquo;s (or project&amp;rsquo;s) taste, and is controlled by the -O option to the &lt;code&gt;git diff-*&lt;/code&gt; commands.</source>
          <target state="translated">これは、ユーザー（またはプロジェクト）の好みに応じてファイルペアを並べ替えるために使用され、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドの-Oオプションによって制御されます。</target>
        </trans-unit>
        <trans-unit id="e4698ff07eb1e8e63a5c87a4e409437aeb77e0b4" translate="yes" xml:space="preserve">
          <source>This is useful because it makes it easy to choose a good commit to test when you want to avoid to test some of them for some reason (they may not compile for example).</source>
          <target state="translated">これは、何らかの理由で一部のテストを避けたい場合(例えばコンパイルされない可能性がある)に、テストするのに適したコミットを簡単に選択できるので便利です。</target>
        </trans-unit>
        <trans-unit id="8b37ac2c46d9c49011957ba8051eb182f97c074f" translate="yes" xml:space="preserve">
          <source>This is useful if F and G were flawed in some way, or should not be part of topicA. Note that the argument to --onto and the &amp;lt;upstream&amp;gt; parameter can be any valid commit-ish.</source>
          <target state="translated">これは、FとGに何らかの欠陥がある場合、またはtopicAの一部ではない場合に役立ちます。--ontoへの引数と&amp;lt;upstream&amp;gt;パラメータは、任意の有効なcommit-ishにすることができます。</target>
        </trans-unit>
        <trans-unit id="5add7a300e88f092e0ef1b21363222f3ece44ad7" translate="yes" xml:space="preserve">
          <source>This is useful if remote side is git:// server accessed over some tunnel.</source>
          <target state="translated">これは、リモート側が何らかのトンネルを経由して git://サーバーにアクセスしている場合に便利です。</target>
        </trans-unit>
        <trans-unit id="d562e00428aacff2db14167eb0ecbc7ee7ea6370" translate="yes" xml:space="preserve">
          <source>This is useful if the branch on which you ran &lt;code&gt;git stash push&lt;/code&gt; has changed enough that &lt;code&gt;git stash apply&lt;/code&gt; fails due to conflicts. Since the stash entry is applied on top of the commit that was HEAD at the time &lt;code&gt;git stash&lt;/code&gt; was run, it restores the originally stashed state with no conflicts.</source>
          <target state="translated">これは、 &lt;code&gt;git stash push&lt;/code&gt; を実行したブランチが変更され、競合のために &lt;code&gt;git stash apply&lt;/code&gt; が失敗した場合に役立ちます。stashエントリは、 &lt;code&gt;git stash&lt;/code&gt; が実行されたときにHEADだったコミットの上に適用されるため、競合することなく、元のstash状態が復元されます。</target>
        </trans-unit>
        <trans-unit id="30fcffaf45041b08cc97af9d1fa76a9ba0b33fa3" translate="yes" xml:space="preserve">
          <source>This is useful if you want to begin your message in a discussion thread with comments and suggestions on the message you are responding to, and to conclude it with a patch submission, separating the discussion and the beginning of the proposed commit log message with a scissors line.</source>
          <target state="translated">これは、ディスカッションスレッドでメッセージを開始して、応答しているメッセージへのコメントや提案でメッセージを始め、最後にパッチの投稿で締めくくりたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="f93051fa336df47ab5f519702120e3efac9cd277" translate="yes" xml:space="preserve">
          <source>This is useful on systems where lstat() calls are very slow, such as CIFS/Microsoft Windows.</source>
          <target state="translated">これは、CIFS/Microsoft Windows のように lstat()の呼び出しが非常に遅いシステムで有用です。</target>
        </trans-unit>
        <trans-unit id="6b9439a13a0f6c5a19da94d77f92d4a1ee7e5be6" translate="yes" xml:space="preserve">
          <source>This is useful when cherry-picking more than one commits' effect to your index in a row.</source>
          <target state="translated">これは、複数のコミットの効果を自分のインデックスに一列に並べてチェリーピックするときに便利です。</target>
        </trans-unit>
        <trans-unit id="ccb566ca825959d19feaead9d9434de1315351a7" translate="yes" xml:space="preserve">
          <source>This is useful when reverting more than one commits' effect to your index in a row.</source>
          <target state="translated">これは、複数のコミットの効果を一行にまとめてインデックスに戻す場合に便利です。</target>
        </trans-unit>
        <trans-unit id="a6b3b2938023c6383383af34a5efd6428edcf530" translate="yes" xml:space="preserve">
          <source>This is useful when topicB does not depend on topicA.</source>
          <target state="translated">これは、トピックBがトピックAに依存しない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="804a7dc8302db74d34102cb378738f0047ef1777" translate="yes" xml:space="preserve">
          <source>This is usually not what an end user wants to run directly. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; instead.</source>
          <target state="translated">これは通常、エンドユーザーが直接実行したいものではありません。代わりに&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="81deedcd021f1608f9f91f70a15e2349e22a39d7" translate="yes" xml:space="preserve">
          <source>This is what &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; generates. Most headers and MIME formatting are ignored.</source>
          <target state="translated">これは&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]が&lt;/a&gt;生成するものです。ほとんどのヘッダーとMIME形式は無視されます。</target>
        </trans-unit>
        <trans-unit id="ca6a5c0a1684e36bc50c3e68cfccb9e6ebf59a4b" translate="yes" xml:space="preserve">
          <source>This is what causes Git to track the remote&amp;rsquo;s branches; you may modify or delete these configuration options by editing &lt;code&gt;.git/config&lt;/code&gt; with a text editor. (See the &quot;CONFIGURATION FILE&quot; section of &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for details.)</source>
          <target state="translated">これが、Gitがリモートのブランチを追跡する原因になります。テキストエディタで &lt;code&gt;.git/config&lt;/code&gt; を編集して、これらの構成オプションを変更または削除できます。（詳細については、&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;の「CONFIGURATION FILE」セクションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="e49010e0ec73f433e7f19c2db7cbfd7081066732" translate="yes" xml:space="preserve">
          <source>This is why it is a bad idea to just chose the next best unskipped bisection commit when the first one has been skipped.</source>
          <target state="translated">だからこそ、最初にスキップされたときに、スキップされていない次善のバイセクションコミットを選んだだけではダメなのです。</target>
        </trans-unit>
        <trans-unit id="51722bee7db4c41cee14b92ba092db0dce132718" translate="yes" xml:space="preserve">
          <source>This leaves a copy of &lt;code&gt;next&lt;/code&gt; temporarily in FETCH_HEAD, but does not update any remote-tracking branches. Using remote-tracking branches, the same can be done by invoking fetch and merge:</source>
          <target state="translated">これにより、 &lt;code&gt;next&lt;/code&gt; のコピーが一時的にFETCH_HEADに残りますが、リモート追跡ブランチは更新されません。リモート追跡ブランチを使用すると、フェッチとマージを呼び出すことで同じことができます。</target>
        </trans-unit>
        <trans-unit id="8d3c273456c213d2f0eef245650834ea18d26a16" translate="yes" xml:space="preserve">
          <source>This lets you choose one path out of a &lt;code&gt;status&lt;/code&gt; like selection. After choosing the path, it presents the diff between the index and the working tree file and asks you if you want to stage the change of each hunk. You can select one of the following options and type return:</source>
          <target state="translated">これにより、選択などの &lt;code&gt;status&lt;/code&gt; から1つのパスを選択できます。パスを選択すると、インデックスと作業ツリーファイルの差分が表示され、各ハンクの変更をステージングするかどうかを尋ねられます。次のオプションのいずれかを選択して、returnと入力できます。</target>
        </trans-unit>
        <trans-unit id="060b46ed6fd409fbf360157d2f3c13ff3dcd2220" translate="yes" xml:space="preserve">
          <source>This lets you quit without do cleaning.</source>
          <target state="translated">これで掃除をしなくても辞めることができます。</target>
        </trans-unit>
        <trans-unit id="aa41c7db3702739cc1b230bda0b83b675d7b2671" translate="yes" xml:space="preserve">
          <source>This lets you review what will be committed (i.e. between HEAD and index).</source>
          <target state="translated">これにより、何がコミットされるかを確認することができます(つまり、HEADとインデックスの間)。</target>
        </trans-unit>
        <trans-unit id="ca3fd0a1256c2900c49910f1d037599eb216d4ff" translate="yes" xml:space="preserve">
          <source>This list should contain the URI of gitweb&amp;rsquo;s standard stylesheet. The default URI of gitweb stylesheet can be set at build time using the &lt;code&gt;GITWEB_CSS&lt;/code&gt; makefile variable. Its default value is &lt;code&gt;static/gitweb.css&lt;/code&gt; (or &lt;code&gt;static/gitweb.min.css&lt;/code&gt; if the &lt;code&gt;CSSMIN&lt;/code&gt; variable is defined, i.e. if CSS minifier is used during build).</source>
          <target state="translated">このリストには、gitwebの標準スタイルシートのURIが含まれている必要があります。gitwebスタイルシートのデフォルトURIは、ビルド時に &lt;code&gt;GITWEB_CSS&lt;/code&gt; makefile変数を使用して設定できます。そのデフォルト値は &lt;code&gt;static/gitweb.css&lt;/code&gt; （または &lt;code&gt;static/gitweb.min.css&lt;/code&gt; 場合 &lt;code&gt;CSSMIN&lt;/code&gt; の変数が定義されている、すなわちCSSのminifierがビルド時に使用されている場合）。</target>
        </trans-unit>
        <trans-unit id="87db555786bcad0bd342abfeced795a76cdcb852" translate="yes" xml:space="preserve">
          <source>This lists the commits reachable from the previous version of the &lt;code&gt;master&lt;/code&gt; branch head. This syntax can be used with any Git command that accepts a commit, not just with &lt;code&gt;git log&lt;/code&gt;. Some other examples:</source>
          <target state="translated">これは、以前のバージョンの &lt;code&gt;master&lt;/code&gt; ブランチヘッドから到達可能なコミットを一覧表示します。この構文は、 &lt;code&gt;git log&lt;/code&gt; だけでなく、コミットを受け入れるすべてのGitコマンドで使用できます。その他の例：</target>
        </trans-unit>
        <trans-unit id="9d19ff56a7106ea2437dd5210773dc60fd2828eb" translate="yes" xml:space="preserve">
          <source>This looks up the &amp;lt;file&amp;gt;(s) in the index and, if there are any merge entries, passes the SHA-1 hash for those files as arguments 1, 2, 3 (empty argument if no file), and &amp;lt;file&amp;gt; as argument 4. File modes for the three files are passed as arguments 5, 6 and 7.</source>
          <target state="translated">これはインデックスで&amp;lt;file&amp;gt;（s）を検索し、マージエントリがある場合は、それらのファイルのSHA-1ハッシュを引数1、2、3（ファイルがない場合は空の引数）、および&amp;lt;file&amp;gt;として渡します3つのファイルのファイルモードは、引数5、6、7として渡されます。</target>
        </trans-unit>
        <trans-unit id="6790f45ac4b6ed7e77775e3a5dfba68fc876105d" translate="yes" xml:space="preserve">
          <source>This makes a commit that records the modification to &lt;code&gt;Makefile&lt;/code&gt;. The changes staged for &lt;code&gt;hello.c&lt;/code&gt; and &lt;code&gt;hello.h&lt;/code&gt; are not included in the resulting commit. However, their changes are not lost &amp;mdash; they are still staged and merely held back. After the above sequence, if you do:</source>
          <target state="translated">これにより、 &lt;code&gt;Makefile&lt;/code&gt; への変更を記録するコミットが行われます。 &lt;code&gt;hello.c&lt;/code&gt; および &lt;code&gt;hello.h&lt;/code&gt; に対してステージングされた変更は、結果のコミットには含まれません。ただし、それらの変更は失われません&amp;mdash;それらはまだステージングされ、単に保留されます。上記のシーケンスの後、次の操作を行った場合：</target>
        </trans-unit>
        <trans-unit id="c23316330a20f8d3e00d74e273bc6ee3d02efbd7" translate="yes" xml:space="preserve">
          <source>This makes a new branch called &lt;code&gt;other&lt;/code&gt; from &lt;code&gt;master~5..master&lt;/code&gt; (i.e. if &lt;code&gt;master&lt;/code&gt; has linear history, it will take the last 5 commits).</source>
          <target state="translated">これにより、 &lt;code&gt;master~5..master&lt;/code&gt; から &lt;code&gt;other&lt;/code&gt; と呼ばれる新しいブランチが作成されます（つまり、 &lt;code&gt;master&lt;/code&gt; に線形履歴がある場合、最後の5回のコミットが行われます）。</target>
        </trans-unit>
        <trans-unit id="b0ade35fb815795f98a8b6354752858acd9e1cfa" translate="yes" xml:space="preserve">
          <source>This makes sure that only the key/value pair for kernel.org is replaced.</source>
          <target state="translated">これにより、kernel.org のキーと値のペアだけが置換されることを確認します。</target>
        </trans-unit>
        <trans-unit id="2d726c732ca5f310160366fecc16a8d1ede4f94c" translate="yes" xml:space="preserve">
          <source>This manual describes the convention used throughout Git CLI.</source>
          <target state="translated">このマニュアルでは、Git CLI全体で使用される規約について説明しています。</target>
        </trans-unit>
        <trans-unit id="40982f6c18ca56554ec412b18ace4f012d6c51fa" translate="yes" xml:space="preserve">
          <source>This manual is designed to be readable by someone with basic UNIX command-line skills, but no previous knowledge of Git.</source>
          <target state="translated">本書は、基本的な UNIX コマンドラインのスキルはあるが、Git の知識がない人でも読めるように設計されています。</target>
        </trans-unit>
        <trans-unit id="1b4c4400f56ace6af78ca50c928fe7f5cfe13be6" translate="yes" xml:space="preserve">
          <source>This manual page describes only the most frequently used options.</source>
          <target state="translated">このマニュアルページでは、最もよく使用されるオプションのみを説明しています。</target>
        </trans-unit>
        <trans-unit id="c74c8f67468f674a4bbb6cadbdb326520214aafb" translate="yes" xml:space="preserve">
          <source>This manual page describes only the most frequently used options. See &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt; for a complete list.</source>
          <target state="translated">このマニュアルページでは、最も頻繁に使用されるオプションのみを説明しています。完全なリストについては、&lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="78fbc8bf0be13ddc4f9bce27ee4dc19783022a2b" translate="yes" xml:space="preserve">
          <source>This means &quot;show everything that is reachable from either one, but exclude anything that is reachable from both of them&quot;.</source>
          <target state="translated">これは、「どちらか一方から届くものはすべて表示するが、両方から届くものは除外する」という意味です。</target>
        </trans-unit>
        <trans-unit id="9f4c07f14694007bf95dcdb96bbfc3991db01ef3" translate="yes" xml:space="preserve">
          <source>This means that &lt;code&gt;git reset &amp;lt;pathspec&amp;gt;&lt;/code&gt; is the opposite of &lt;code&gt;git add
&amp;lt;pathspec&amp;gt;&lt;/code&gt;. This command is equivalent to &lt;code&gt;git restore [--source=&amp;lt;tree-ish&amp;gt;] --staged &amp;lt;pathspec&amp;gt;...&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;git reset &amp;lt;pathspec&amp;gt;&lt;/code&gt; が &lt;code&gt;git add &amp;lt;pathspec&amp;gt;&lt;/code&gt; 反対であることを意味します。このコマンドは &lt;code&gt;git restore [--source=&amp;lt;tree-ish&amp;gt;] --staged &amp;lt;pathspec&amp;gt;...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="138908f8222de2b4daf75b57b97dc896b1845167" translate="yes" xml:space="preserve">
          <source>This means that &lt;code&gt;git reset -p&lt;/code&gt; is the opposite of &lt;code&gt;git add -p&lt;/code&gt;, i.e. you can use it to selectively reset hunks. See the &amp;ldquo;Interactive Mode&amp;rdquo; section of &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; to learn how to operate the &lt;code&gt;--patch&lt;/code&gt; mode.</source>
          <target state="translated">これは &lt;code&gt;git reset -p&lt;/code&gt; が &lt;code&gt;git add -p&lt;/code&gt; の逆であることを意味します。つまり、これを使用してハンクを選択的にリセットできます。 &lt;code&gt;--patch&lt;/code&gt; モードの操作方法については、&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;の「インタラクティブモード」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="9c231d7cedbd657513f91f60869397c2bef2f37d" translate="yes" xml:space="preserve">
          <source>This means that it is often &quot;cheaper&quot; if QA people or end users can do it.</source>
          <target state="translated">つまり、QAの人やエンドユーザーができれば「安く」なることが多いということです。</target>
        </trans-unit>
        <trans-unit id="0ff1dc064f7e1f4d0872498ac05a21ade168adc9" translate="yes" xml:space="preserve">
          <source>This means that test suites are good to prevent some bugs from being committed and they are also quite good to tell you that you have some bugs. But they are not so good to tell you where some bugs have been introduced. To tell you that efficiently, git bisect is needed.</source>
          <target state="translated">つまり、テストスイートはいくつかのバグがコミットされるのを防ぐためには良いものであり、いくつかのバグがあることを伝えるためにはかなり良いものです。しかし、どこにいくつかのバグが混入しているかを伝えるのにはあまり向いていません。それを効率よく伝えるために必要なのが git bisect です。</target>
        </trans-unit>
        <trans-unit id="388b9571e5f1264e3be3a08ce2827efedebdef31" translate="yes" xml:space="preserve">
          <source>This means that the best bisection commits are the commits where the following function is maximum:</source>
          <target state="translated">つまり、以下の関数が最大となるコミットが最良の二等分コミットとなります。</target>
        </trans-unit>
        <trans-unit id="597961da0012b9cd684792dccd1c7471e5687e9f" translate="yes" xml:space="preserve">
          <source>This means that the trimmed &amp;lt;token&amp;gt; and &amp;lt;value&amp;gt; will be separated by &lt;code&gt;': '&lt;/code&gt; (one colon followed by one space).</source>
          <target state="translated">これは、トリムされた&amp;lt;token&amp;gt;と&amp;lt;value&amp;gt;が &lt;code&gt;': '&lt;/code&gt; （1つのコロンと1つのスペース）で区切られることを意味します。</target>
        </trans-unit>
        <trans-unit id="38ea5711a664516b71bd0eeea932fd8ac8d7c412" translate="yes" xml:space="preserve">
          <source>This means that we get rid of the uninteresting commits in the DAG.</source>
          <target state="translated">これは、DAG内の興味のないコミットを取り除くことを意味します。</target>
        </trans-unit>
        <trans-unit id="2454a8b57cbe01726a67b284a671cd468ecfe3a7" translate="yes" xml:space="preserve">
          <source>This means that you can do</source>
          <target state="translated">ということは、以下のことができるということです。</target>
        </trans-unit>
        <trans-unit id="4bfb7f09c9f4811c3630d40fb2caf5f3310e564e" translate="yes" xml:space="preserve">
          <source>This means that you can use &lt;code&gt;git checkout -p&lt;/code&gt; to selectively discard edits from your current working tree. See the &amp;ldquo;Interactive Mode&amp;rdquo; section of &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; to learn how to operate the &lt;code&gt;--patch&lt;/code&gt; mode.</source>
          <target state="translated">これは、 &lt;code&gt;git checkout -p&lt;/code&gt; を使用して、現在の作業ツリーから編集を選択的に破棄できることを意味します。 &lt;code&gt;--patch&lt;/code&gt; モードの操作方法については、&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;の「インタラクティブモード」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="2db1fd51873ef2a0afca87fc61387f5a8891e2a5" translate="yes" xml:space="preserve">
          <source>This merges the changes from Bob&amp;rsquo;s &quot;master&quot; branch into Alice&amp;rsquo;s current branch. If Alice has made her own changes in the meantime, then she may need to manually fix any conflicts.</source>
          <target state="translated">これにより、ボブの「マスター」ブランチからの変更がアリスの現在のブランチにマージされます。その間にアリスが自分で変更を加えた場合は、競合を手動で修正する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="cff3569519105ed116111cf73b4d626e89a75fc2" translate="yes" xml:space="preserve">
          <source>This merges the file listing in the directory cache index with the actual working directory list, and shows different combinations of the two.</source>
          <target state="translated">これは、ディレクトリキャッシュインデックスのファイルリストと実際の作業ディレクトリリストをマージし、2つの異なる組み合わせを表示します。</target>
        </trans-unit>
        <trans-unit id="e550f0e6cba8953c27a9638529775caa0627f8ed" translate="yes" xml:space="preserve">
          <source>This might not be what you expect, i.e. you want to prune remote &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;, but also explicitly fetch tags from it, so when you fetch from it you delete all your local tags, most of which may not have come from the &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; remote in the first place.</source>
          <target state="translated">これは期待したものではない可能性があります。つまり、リモート &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; をプルーニングしたいが、そこからタグを明示的にフェッチするため、そこからフェッチする場合、すべてのローカルタグを削除します。ほとんどのタグは &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; そもそもリモート。</target>
        </trans-unit>
        <trans-unit id="c165a1bf0e23a30271149315bd9959512cec8cbc" translate="yes" xml:space="preserve">
          <source>This mode differs from the default in one point: always follow all parents of a merge, even if it is TREESAME to one of them. Even if more than one side of the merge has commits that are included, this does not imply that the merge itself is! In the example, we get</source>
          <target state="translated">このモードはデフォルトとは異なる点があります:マージの親のいずれかに対して TREESAME であっても、常にすべての親に従うという点です。マージの複数の側にコミットが含まれていたとしても、これはマージ自体がそうであることを意味するものではありません! 例では</target>
        </trans-unit>
        <trans-unit id="06118fd3f101fa40f7bcb707d4305013c9a74e7d" translate="yes" xml:space="preserve">
          <source>This mode has become the default in Git 2.0.</source>
          <target state="translated">このモードはGit 2.0ではデフォルトとなっています。</target>
        </trans-unit>
        <trans-unit id="9c35450959e8c97cb733c60205966cdb68e529c7" translate="yes" xml:space="preserve">
          <source>This mode is designed for repositories with very large indexes, and aims at reducing the time it takes to repeatedly write these indexes.</source>
          <target state="translated">このモードは非常に大きなインデックスを持つリポジトリのために設計されており、これらのインデックスの繰り返し書き込みにかかる時間を短縮することを目的としています。</target>
        </trans-unit>
        <trans-unit id="660380648a3de0733323135a33a60c0126cae6f8" translate="yes" xml:space="preserve">
          <source>This modifies the &lt;code&gt;export&lt;/code&gt; capability, instructing Git to dump the internal marks table to &amp;lt;file&amp;gt; when complete. For details, read up on &lt;code&gt;--export-marks=&amp;lt;file&amp;gt;&lt;/code&gt; in &lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export[1]&lt;/a&gt;.</source>
          <target state="translated">これにより &lt;code&gt;export&lt;/code&gt; 機能が変更され、完了時に内部マークテーブルを&amp;lt;file&amp;gt;にダンプするようGitに指示します。詳細については、&lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export [1]の&lt;/a&gt; &lt;code&gt;--export-marks=&amp;lt;file&amp;gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="59a5d5693433000c28979c8002984ee295ddd735" translate="yes" xml:space="preserve">
          <source>This modifies the &lt;code&gt;export&lt;/code&gt; capability, instructing Git to load the marks specified in &amp;lt;file&amp;gt; before processing any input. For details, read up on &lt;code&gt;--import-marks=&amp;lt;file&amp;gt;&lt;/code&gt; in &lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export[1]&lt;/a&gt;.</source>
          <target state="translated">これは &lt;code&gt;export&lt;/code&gt; 機能を変更し、入力を処理する前に&amp;lt;file&amp;gt;で指定されたマークをロードするようGitに指示します。詳細については、&lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export [1]の&lt;/a&gt; &lt;code&gt;--import-marks=&amp;lt;file&amp;gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="29cca50076d9ab0c1672949be9f5cf285333ce65" translate="yes" xml:space="preserve">
          <source>This modifies the &lt;code&gt;export&lt;/code&gt; capability, instructing Git to pass &lt;code&gt;--signed-tags=verbatim&lt;/code&gt; to &lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export[1]&lt;/a&gt;. In the absence of this capability, Git will use &lt;code&gt;--signed-tags=warn-strip&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;export&lt;/code&gt; 機能が変更され、Gitに &lt;code&gt;--signed-tags=verbatim&lt;/code&gt; を&lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export [1]&lt;/a&gt;に渡すように指示されます。この機能がない場合、Gitは &lt;code&gt;--signed-tags=warn-strip&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="1cd76e4b36f80f26235450d81c7340212de49a9e" translate="yes" xml:space="preserve">
          <source>This modifies the &lt;code&gt;import&lt;/code&gt; capability. The fast-import commands &lt;code&gt;cat-blob&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt; can be used by remote-helpers to retrieve information about blobs and trees that already exist in fast-import&amp;rsquo;s memory. This requires a channel from fast-import to the remote-helper. If it is advertised in addition to &quot;import&quot;, Git establishes a pipe from fast-import to the remote-helper&amp;rsquo;s stdin. It follows that Git and fast-import are both connected to the remote-helper&amp;rsquo;s stdin. Because Git can send multiple commands to the remote-helper it is required that helpers that use &lt;code&gt;bidi-import&lt;/code&gt; buffer all &lt;code&gt;import&lt;/code&gt; commands of a batch before sending data to fast-import. This is to prevent mixing commands and fast-import responses on the helper&amp;rsquo;s stdin.</source>
          <target state="translated">これにより、 &lt;code&gt;import&lt;/code&gt; 機能が変更されます。高速インポートコマンド &lt;code&gt;cat-blob&lt;/code&gt; および &lt;code&gt;ls&lt;/code&gt; をリモートヘルパーが使用して、高速インポートのメモリにすでに存在するblobおよびツリーに関する情報を取得できます。これには、高速インポートからリモートヘルパーへのチャネルが必要です。「インポート」に加えてアドバタイズされる場合、Gitはfast-importからリモートヘルパーのstdinへのパイプを確立します。したがって、Gitとfast-importはどちらもリモートヘルパーのstdinに接続されています。Gitはリモートヘルパーに複数のコマンドを送信できるため、 &lt;code&gt;bidi-import&lt;/code&gt; を使用するヘルパーがすべての &lt;code&gt;import&lt;/code&gt; バッファーする必要がありますデータを高速インポートに送信する前のバッチのコマンド。これは、ヘルパーの標準入力でコマンドと高速インポート応答が混在するのを防ぐためです。</target>
        </trans-unit>
        <trans-unit id="18b230f7b58b67f5f52143b1696b5514cecb3bd1" translate="yes" xml:space="preserve">
          <source>This operation is safe even if Alice has uncommitted local changes. The range notation &quot;HEAD..FETCH_HEAD&quot; means &quot;show everything that is reachable from the FETCH_HEAD but exclude anything that is reachable from HEAD&quot;. Alice already knows everything that leads to her current state (HEAD), and reviews what Bob has in his state (FETCH_HEAD) that she has not seen with this command.</source>
          <target state="translated">この操作は、アリスがローカルの変更をコミットしていない場合でも安全です。範囲表記「head...fetch_head」は、「fetch_headから到達可能なものはすべて表示するが、headから到達可能なものは除外する」という意味です。アリスはすでに自分の現在の状態(head)につながるものはすべて知っていて、このコマンドで見ていないボブの状態(fetch_head)にあるものを見直しています。</target>
        </trans-unit>
        <trans-unit id="4d6058894e90e81912f089323abaddf6ff7286d2" translate="yes" xml:space="preserve">
          <source>This option affects options that expect path name like &lt;code&gt;--git-dir&lt;/code&gt; and &lt;code&gt;--work-tree&lt;/code&gt; in that their interpretations of the path names would be made relative to the working directory caused by the &lt;code&gt;-C&lt;/code&gt; option. For example the following invocations are equivalent:</source>
          <target state="translated">このオプションは、 &lt;code&gt;--git-dir&lt;/code&gt; や &lt;code&gt;--work-tree&lt;/code&gt; などのパス名を期待するオプションに影響を与えます。つまり、パス名の解釈は、 &lt;code&gt;-C&lt;/code&gt; オプションによって引き起こされる作業ディレクトリに対して相対的になります。たとえば、次の呼び出しは同等です。</target>
        </trans-unit>
        <trans-unit id="2b42f3dc9742d00737d912066dfd2008f4af0874" translate="yes" xml:space="preserve">
          <source>This option allows you to say that you expect the history you are updating is what you rebased and want to replace. If the remote ref still points at the commit you specified, you can be sure that no other people did anything to the ref. It is like taking a &quot;lease&quot; on the ref without explicitly locking it, and the remote ref is updated only if the &quot;lease&quot; is still valid.</source>
          <target state="translated">このオプションを使用すると、更新する履歴がリベースした履歴であり、置き換えたい履歴であることを想定していると言うことができます。リモートの ref が指定したコミットをまだ指している場合、他の人がその ref に何かをしたわけではないことを確認することができます。これは、明示的にロックしないで ref に &quot;リース&quot; を取るようなもので、リモート ref は &quot;リース&quot; がまだ有効な場合にのみ更新されます。</target>
        </trans-unit>
        <trans-unit id="a3080455c3c310acd65dd25e9f3c439906791e33" translate="yes" xml:space="preserve">
          <source>This option bypasses the pre-commit and commit-msg hooks. See also &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;.</source>
          <target state="translated">このオプションは、pre-commitおよびcommit-msgフックをバイパスします。&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ae0cb95b3299088da58c88ea10fd24e68d20bac1" translate="yes" xml:space="preserve">
          <source>This option bypasses the pre-merge and commit-msg hooks. See also &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;.</source>
          <target state="translated">このオプションは、マージ前およびcommit-msgフックをバイパスします。&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="22c10b3b137f37c4d219034c9b73126392cd066c" translate="yes" xml:space="preserve">
          <source>This option bypasses the pre-rebase hook. See also &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;.</source>
          <target state="translated">このオプションは、リベース前フックをバイパスします。&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="8e7eb09891c6b3b929ffed676724fa916ce9b73e" translate="yes" xml:space="preserve">
          <source>This option can be either set to a boolean value or to &lt;code&gt;on-demand&lt;/code&gt;. Setting it to a boolean changes the behavior of fetch and pull to unconditionally recurse into submodules when set to true or to not recurse at all when set to false. When set to &lt;code&gt;on-demand&lt;/code&gt; (the default value), fetch and pull will only recurse into a populated submodule when its superproject retrieves a commit that updates the submodule&amp;rsquo;s reference.</source>
          <target state="translated">このオプションは、ブール値または &lt;code&gt;on-demand&lt;/code&gt; に設定できます。これをブール値に設定すると、フェッチおよびプルの動作が変更され、trueに設定されている場合は無条件にサブモジュールに再帰し、falseに設定されている場合はまったく再帰しません。 &lt;code&gt;on-demand&lt;/code&gt; （デフォルト値）に設定されている場合、フェッチとプルは、そのスーパープロジェクトがサブモジュールの参照を更新するコミットを取得したときにのみ、設定されたサブモジュールに再帰します。</target>
        </trans-unit>
        <trans-unit id="5d7a21f2665910c78fd7ff132552ce53899e84c0" translate="yes" xml:space="preserve">
          <source>This option can be used along with &lt;code&gt;--bisect-vars&lt;/code&gt;, in this case, after all the sorted commit objects, there will be the same text as if &lt;code&gt;--bisect-vars&lt;/code&gt; had been used alone.</source>
          <target state="translated">このオプションは &lt;code&gt;--bisect-vars&lt;/code&gt; と一緒に使用できます。この場合、ソートされたすべてのコミットオブジェクトの後に、 &lt;code&gt;--bisect-vars&lt;/code&gt; が単独で使用された場合と同じテキストが表示されます。</target>
        </trans-unit>
        <trans-unit id="93ff5c11faab29c493dcd0eb330b2a514a09e43b" translate="yes" xml:space="preserve">
          <source>This option can be used several times to provide several detection regexes.</source>
          <target state="translated">このオプションは、複数回使用して複数の検出正規表現を提供することができます。</target>
        </trans-unit>
        <trans-unit id="a9be17765d99ef763e2665079651c5e7b4e1ceec" translate="yes" xml:space="preserve">
          <source>This option can be used to control recursive fetching of this submodule. If this option is also present in the submodules entry in .git/config of the superproject, the setting there will override the one found in .gitmodules. Both settings can be overridden on the command line by using the &quot;--[no-]recurse-submodules&quot; option to &quot;git fetch&quot; and &quot;git pull&quot;.</source>
          <target state="translated">このオプションを使用すると、このサブモジュールの再帰的な取得を制御することができます。このオプションがスーパープロジェクトの .git/config の submodules エントリにもある場合は、その設定が .gitmodules の設定を上書きします。どちらの設定も、コマンドラインで &quot;git fetch&quot; と &quot;git pull&quot; に &quot;--[no-]recurse-submodules&quot; オプションを指定することで上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="4813ba4c4b012e94932c2c7e77e5d37eb750ee7d" translate="yes" xml:space="preserve">
          <source>This option can be used to control recursive fetching of this submodule. It can be overridden by using the --[no-]recurse-submodules command-line option to &quot;git fetch&quot; and &quot;git pull&quot;. This setting will override that from in the &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; file.</source>
          <target state="translated">このオプションは、このサブモジュールの再帰的なフェッチを制御するために使用できます。「git fetch」と「git pull」に-[no-] recurse-submodulesコマンドラインオプションを使用することで上書きできます。この設定は、&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;ファイルの設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="dc1c2b92ebab0226490f8de8ccd94e6df6f7955b" translate="yes" xml:space="preserve">
          <source>This option can be used to separate command-line options from the list of files, (useful when filenames might be mistaken for command-line options).</source>
          <target state="translated">このオプションを使うと、コマンドラインオプションをファイルの一覧から切り離すことができます (ファイル名がコマンドラインオプションと間違われる可能性がある場合に便利です)。</target>
        </trans-unit>
        <trans-unit id="792e2c6acea003d2f54070521de0f6b1fb530a29" translate="yes" xml:space="preserve">
          <source>This option can be used to specify a shell command that will be called to automatically add or modify a trailer with the specified &amp;lt;token&amp;gt;.</source>
          <target state="translated">このオプションを使用して、指定された&amp;lt;token&amp;gt;でトレーラーを自動的に追加または変更するために呼び出されるシェルコマンドを指定できます。</target>
        </trans-unit>
        <trans-unit id="3870831de784b5f9a3b27254aee6ab6f7a036b72" translate="yes" xml:space="preserve">
          <source>This option can only be used for one-shot imports as &lt;code&gt;git svn&lt;/code&gt; will not be able to fetch again without metadata. Additionally, if you lose your &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; files, &lt;code&gt;git svn&lt;/code&gt; will not be able to rebuild them.</source>
          <target state="translated">&lt;code&gt;git svn&lt;/code&gt; はメタデータなしでは再度フェッチできないため、このオプションはワンショットインポートにのみ使用できます。さらに、 &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; ファイルを紛失すると、 &lt;code&gt;git svn&lt;/code&gt; はそれらを再構築できなくなります。</target>
        </trans-unit>
        <trans-unit id="7745929fdc4d071dfa2f069450065a35fb03a357" translate="yes" xml:space="preserve">
          <source>This option can only be used together with --dry-run. By using this option the user can check if any of the given files would be ignored, no matter if they are already present in the work tree or not.</source>
          <target state="translated">このオプションは --dry-run と一緒に使用することができます。このオプションを使用することで、ユーザは与えられたファイルがワークツリーに既に存在するかどうかに関わらず、無視されるかどうかをチェックすることができます。</target>
        </trans-unit>
        <trans-unit id="2cd2090b6cd931e9fb6990b800f11805da77a460" translate="yes" xml:space="preserve">
          <source>This option cannot (currently) be used unless &lt;code&gt;--batch&lt;/code&gt; or &lt;code&gt;--batch-check&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;--batch&lt;/code&gt; または &lt;code&gt;--batch-check&lt;/code&gt; を使用しない限り、このオプションは（現在）使用できません。</target>
        </trans-unit>
        <trans-unit id="882762ef26e2279478bc78603a1e7faf56dec8c3" translate="yes" xml:space="preserve">
          <source>This option controls if and under what conditions new commits of populated submodules should be fetched too. It can be used as a boolean option to completely disable recursion when set to &lt;code&gt;no&lt;/code&gt; or to unconditionally recurse into all populated submodules when set to &lt;code&gt;yes&lt;/code&gt;, which is the default when this option is used without any value. Use &lt;code&gt;on-demand&lt;/code&gt; to only recurse into a populated submodule when the superproject retrieves a commit that updates the submodule&amp;rsquo;s reference to a commit that isn&amp;rsquo;t already in the local submodule clone.</source>
          <target state="translated">このオプションは、入力されたサブモジュールの新しいコミットもフェッチする必要があるかどうか、またどのような条件下でフェッチするかを制御します。これをブールオプションとして使用して、 &lt;code&gt;no&lt;/code&gt; に設定すると再帰を完全に無効にするか、 &lt;code&gt;yes&lt;/code&gt; に設定すると無条件にすべての入力済みサブモジュールに再帰します。これは、このオプションを値なしで使用した場合のデフォルトです。 &lt;code&gt;on-demand&lt;/code&gt; を使用して、スーパープロジェクトが、サブモジュールの参照を、ローカルのサブモジュールのクローンにまだないコミットへの更新を更新するコミットを取得するときにのみ、入力されたサブモジュールに再帰します。</target>
        </trans-unit>
        <trans-unit id="69bffdffaf64305a520ea61fd7a4110a4c5bf981" translate="yes" xml:space="preserve">
          <source>This option controls if new commits of all populated submodules should be fetched and updated, too (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt;).</source>
          <target state="translated">このオプションは、入力されたすべてのサブモジュールの新しいコミットもフェッチして更新する必要があるかどうかを制御します（&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;および&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="30828ff428cc76245c5c17e5cbd61f4d3413d1c5" translate="yes" xml:space="preserve">
          <source>This option determines how the commit message will be cleaned up before being passed on to the commit machinery. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for more details. In particular, if the &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; is given a value of &lt;code&gt;scissors&lt;/code&gt;, scissors will be appended to &lt;code&gt;MERGE_MSG&lt;/code&gt; before being passed on in the case of a conflict.</source>
          <target state="translated">このオプションは、コミットメッセージがコミット機構に渡される前にクリーンアップされる方法を決定します。詳細については、&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;を参照してください。特に、 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; に &lt;code&gt;scissors&lt;/code&gt; の値が指定されている場合、競合が発生した場合に渡される前に &lt;code&gt;MERGE_MSG&lt;/code&gt; にscissorsが追加されます。</target>
        </trans-unit>
        <trans-unit id="286a93d0042817a6190102b1bfcb5df866579bac" translate="yes" xml:space="preserve">
          <source>This option determines how the merge message will be cleaned up before committing. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for more details. In addition, if the &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; is given a value of &lt;code&gt;scissors&lt;/code&gt;, scissors will be appended to &lt;code&gt;MERGE_MSG&lt;/code&gt; before being passed on to the commit machinery in the case of a merge conflict.</source>
          <target state="translated">このオプションは、コミットメッセージをコミットする前にクリーンアップする方法を決定します。詳細については、&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;を参照してください。さらに、 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; に &lt;code&gt;scissors&lt;/code&gt; の値が指定されている場合、マージの競合が発生した場合に、はさみが &lt;code&gt;MERGE_MSG&lt;/code&gt; に追加されてからコミット機構に渡されます。</target>
        </trans-unit>
        <trans-unit id="4d1960d5d8472d2a194e5ec10acd8959326f748a" translate="yes" xml:space="preserve">
          <source>This option determines how the supplied commit message should be cleaned up before committing. The &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; can be &lt;code&gt;strip&lt;/code&gt;, &lt;code&gt;whitespace&lt;/code&gt;, &lt;code&gt;verbatim&lt;/code&gt;, &lt;code&gt;scissors&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">このオプションは、コミットする前に、提供されたコミットメッセージをクリーンアップする方法を決定します。 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; することができ &lt;code&gt;strip&lt;/code&gt; 、 &lt;code&gt;whitespace&lt;/code&gt; 、 &lt;code&gt;verbatim&lt;/code&gt; 、 &lt;code&gt;scissors&lt;/code&gt; または &lt;code&gt;default&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5dab8a93409f72b36d8b46ab64625d688725721" translate="yes" xml:space="preserve">
          <source>This option does not (currently) work correctly when an object in the index is specified (e.g. &lt;code&gt;:link&lt;/code&gt; instead of &lt;code&gt;HEAD:link&lt;/code&gt;) rather than one in the tree.</source>
          <target state="translated">インデックス内のオブジェクトが（例えば、指定された場合、このオプションは正しくありません（現在は）作業を行います &lt;code&gt;:link&lt;/code&gt; の代わり &lt;code&gt;HEAD:link&lt;/code&gt; ではなく、ツリー内の1。）</target>
        </trans-unit>
        <trans-unit id="d9ea124fbd7a15594b4c6836d821b0c2d1f565c3" translate="yes" xml:space="preserve">
          <source>This option forces conflicting hunks to be auto-resolved cleanly by favoring &lt;code&gt;our&lt;/code&gt; version. Changes from the other tree that do not conflict with our side are reflected in the merge result. For a binary file, the entire contents are taken from our side.</source>
          <target state="translated">このオプションは &lt;code&gt;our&lt;/code&gt; バージョンを優先することで、競合するハンクを強制的に完全に自動解決します。私たちの側と競合しない他のツリーからの変更は、マージ結果に反映されます。バイナリファイルの場合、コンテンツ全体が私たちの側から取得されます。</target>
        </trans-unit>
        <trans-unit id="03e43ead906b5a3ebd0febb15138c0f0fef70180" translate="yes" xml:space="preserve">
          <source>This option identifies the file status with the following tags (followed by a space) at the start of each line:</source>
          <target state="translated">このオプションは、各行の先頭に以下のタグ(後にスペース)を付けてファイルの状態を識別します。</target>
        </trans-unit>
        <trans-unit id="11f1817b2bcb9580d82cb7eff477a970ee3352b6" translate="yes" xml:space="preserve">
          <source>This option is NOT recommended as it makes it difficult to track down old references to SVN revision numbers in existing documentation, bug reports, and archives. If you plan to eventually migrate from SVN to Git and are certain about dropping SVN history, consider &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repo&lt;/a&gt; instead. filter-repo also allows reformatting of metadata for ease-of-reading and rewriting authorship info for non-&quot;svn.authorsFile&quot; users.</source>
          <target state="translated">既存のドキュメント、バグレポート、アーカイブでSVNリビジョン番号への古い参照を追跡することが困難になるため、このオプションはお勧めしません。最終的にSVNからGitに移行する予定で、SVN履歴の削除について確信がある場合は、代わりに&lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repoを&lt;/a&gt;検討してください。filter-repoでは、メタデータを再フォーマットして、「svn.authorsFile」以外のユーザーの作成者情報を読みやすくしたり書き換えたりすることもできます。</target>
        </trans-unit>
        <trans-unit id="78790ec840bc0471b6e620b0edc9dccd8cb32215" translate="yes" xml:space="preserve">
          <source>This option is a more advanced form of &lt;code&gt;subtree&lt;/code&gt; strategy, where the strategy makes a guess on how two trees must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped from the beginning) to make the shape of two trees to match.</source>
          <target state="translated">このオプションは、 &lt;code&gt;subtree&lt;/code&gt; 戦略のより高度な形式です。この戦略では、マージ時に2つのツリーをシフトして互いに一致させる必要がある方法を推測します。代わりに、2つのツリーの形状を一致させるために、指定されたパスにプレフィックスが付けられます（または最初から削除されます）。</target>
        </trans-unit>
        <trans-unit id="4caf0764823caa06aa3cb192d447e797c84f9905" translate="yes" xml:space="preserve">
          <source>This option is deprecated in favour of &lt;code&gt;git stash push&lt;/code&gt;. It differs from &quot;stash push&quot; in that it cannot take pathspecs. Instead, all non-option arguments are concatenated to form the stash message.</source>
          <target state="translated">このオプションは &lt;code&gt;git stash push&lt;/code&gt; のために廃止されました。パススペックを取得できないという点で「スタッシュプッシュ」とは異なります。代わりに、すべての非オプション引数が連結されてstashメッセージが形成されます。</target>
        </trans-unit>
        <trans-unit id="c02fef4ae69460732c7c3bd405bb6c17f43ad119" translate="yes" xml:space="preserve">
          <source>This option is equivalent to the &amp;lt;repository&amp;gt; argument. If both are specified, the command-line argument takes precedence.</source>
          <target state="translated">このオプションは、&amp;lt;repository&amp;gt;引数と同等です。両方が指定されている場合、コマンドライン引数が優先されます。</target>
        </trans-unit>
        <trans-unit id="b7fdcf9707bc99b530bc435f0d474fdd1738b42d" translate="yes" xml:space="preserve">
          <source>This option is implicitly supplied if any other list-like option such as &lt;code&gt;--contains&lt;/code&gt; is provided. See the documentation for each of those options for details.</source>
          <target state="translated">&lt;code&gt;--contains&lt;/code&gt; などの他のリスト形式のオプションが指定されている場合、このオプションは暗黙的に提供されます。詳細については、これらの各オプションのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="710c94d6943c052c3ce9d72b355d1824bacce0cd" translate="yes" xml:space="preserve">
          <source>This option is only applicable in non-verbose mode.</source>
          <target state="translated">このオプションは、非言語モードでのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="4cc49fd28601407189cb758fe5a41d5aaf8777ac" translate="yes" xml:space="preserve">
          <source>This option is only applicable when listing tags without annotation lines.</source>
          <target state="translated">このオプションは、注釈行のないタグをリストアップする場合にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="ac28aa5e8f93911465d1aaa74ae4db50de2f286b" translate="yes" xml:space="preserve">
          <source>This option is only relevant if we are tracking branches (using one of the repository layout options --trunk, --tags, --branches, --stdlayout). For each tracked branch, try to find out where its revision was copied from, and set a suitable parent in the first Git commit for the branch. This is especially helpful when we&amp;rsquo;re tracking a directory that has been moved around within the repository. If this feature is disabled, the branches created by &lt;code&gt;git svn&lt;/code&gt; will all be linear and not share any history, meaning that there will be no information on where branches were branched off or merged. However, following long/convoluted histories can take a long time, so disabling this feature may speed up the cloning process. This feature is enabled by default, use --no-follow-parent to disable it.</source>
          <target state="translated">このオプションは、ブランチを追跡する場合にのみ関連します（リポジトリレイアウトオプション--trunk、-tags、-branches、-stdlayoutのいずれかを使用）。追跡されたブランチごとに、そのリビジョンのコピー元を見つけて、ブランチの最初のGitコミットに適切な親を設定します。これは、リポジトリ内で移動されたディレクトリを追跡する場合に特に役立ちます。この機能が無効になっている場合、 &lt;code&gt;git svn&lt;/code&gt; によって作成されたブランチはすべて線形であり、履歴を共有しません。つまり、ブランチが分岐またはマージされた場所に関する情報はありません。ただし、長い/複雑な履歴をたどると時間がかかる場合があるため、この機能を無効にすると、クローン作成プロセスが高速化する場合があります。この機能はデフォルトで有効になっています。無効にするには--no-follow-parentを使用します。</target>
        </trans-unit>
        <trans-unit id="e12fdc170000781ad1c58dbca132db57e3472f94" translate="yes" xml:space="preserve">
          <source>This option is only used by Mac OS implementation of Git. When core.precomposeUnicode=true, Git reverts the unicode decomposition of filenames done by Mac OS. This is useful when sharing a repository between Mac OS and Linux or Windows. (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7). When false, file names are handled fully transparent by Git, which is backward compatible with older versions of Git.</source>
          <target state="translated">このオプションは、Git の Mac OS の実装でのみ使用されます。core.precomposeUnicode=true の場合、Git は Mac OS で行われたファイル名の unicode 分解を元に戻します。これは、Mac OS と Linux や Windows の間でリポジトリを共有するときに便利です。(Git for Windows 1.7.10 以降、もしくは cygwin 1.7 以下の Git が必要です)。falseにすると、ファイル名はGitによって完全に透過的に処理され、古いバージョンのGitとの下位互換性があります。</target>
        </trans-unit>
        <trans-unit id="488a5b3855b8742f267f0b39339ad03e677bc10e" translate="yes" xml:space="preserve">
          <source>This option is only valid for add and update commands. Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.</source>
          <target state="translated">このオプションは、追加および更新コマンドに対してのみ有効です。q が指定されていない限り、標準エラーストリームが端末に接続されている場合、デフォルトで進行状況が標準エラーストリームに報告される。このフラグは、標準エラーストリームが端末に接続されていない場合でも、進行状況を強制的に表示します。</target>
        </trans-unit>
        <trans-unit id="564be2665790d0ee7a744865d472382d1cf20497" translate="yes" xml:space="preserve">
          <source>This option is only valid for add and update commands. These commands sometimes need to clone a remote repository. In this case, this option will be passed to the &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; command.</source>
          <target state="translated">このオプションは、追加および更新コマンドに対してのみ有効です。これらのコマンドは、リモートリポジトリのクローンを作成する必要がある場合があります。この場合、このオプションは&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;コマンドに渡されます。</target>
        </trans-unit>
        <trans-unit id="1175e1719609394666bffaa81ec16b8052e4a6b8" translate="yes" xml:space="preserve">
          <source>This option is only valid for add, deinit and update commands. When running add, allow adding an otherwise ignored submodule path. When running deinit the submodule working trees will be removed even if they contain local changes. When running update (only effective with the checkout procedure), throw away local changes in submodules when switching to a different commit; and always run a checkout operation in the submodule, even if the commit listed in the index of the containing repository matches the commit checked out in the submodule.</source>
          <target state="translated">このオプションは、add、deinit、update コマンドでのみ有効です。add を実行している場合は、無視されているサブモジュールのパスを追加できるようにします。deinit を実行している場合は、サブモジュールの作業ツリーがローカルの変更を含んでいても削除されます。update を実行している場合 (チェックアウト手続きでのみ有効です)、別のコミットに切り替える際にはサブモジュール内のローカルな変更を捨てます。</target>
        </trans-unit>
        <trans-unit id="2de8d442aa39a274aaa4b758d62aa7d0adb622e3" translate="yes" xml:space="preserve">
          <source>This option is only valid for foreach, update, status and sync commands. Traverse submodules recursively. The operation is performed not only in the submodules of the current repo, but also in any nested submodules inside those submodules (and so on).</source>
          <target state="translated">このオプションは、foreach、update、status、syncコマンドに対してのみ有効です。サブモジュールを再帰的にトラバースします。この操作は現在のレポのサブモジュールだけでなく、それらのサブモジュールの中にあるネストしたサブモジュールも含めて実行されます(など)。</target>
        </trans-unit>
        <trans-unit id="d01c54f91ad08eb6d9511d7549b500d6b89b1500" translate="yes" xml:space="preserve">
          <source>This option is only valid for status and summary commands. These commands typically use the commit found in the submodule HEAD, but with this option, the commit stored in the index is used instead.</source>
          <target state="translated">このオプションは、ステータスコマンドとサマリーコマンドに対してのみ有効です。これらのコマンドは通常、サブモジュールの HEAD にあるコミットを使用しますが、 このオプションを指定すると、代わりにインデックスに格納されているコミットが使用されます。</target>
        </trans-unit>
        <trans-unit id="7ba21174d5319ba108a98df185e2c79d000e199b" translate="yes" xml:space="preserve">
          <source>This option is only valid for the add command. It sets the submodule&amp;rsquo;s name to the given string instead of defaulting to its path. The name must be valid as a directory name and may not end with a &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">このオプションは、addコマンドに対してのみ有効です。デフォルトのパスではなく、サブモジュールの名前を指定された文字列に設定します。名前はディレクトリ名として有効である必要があり、 &lt;code&gt;/&lt;/code&gt; で終わってはなりません。</target>
        </trans-unit>
        <trans-unit id="87ff71824f0ae07bd73763f995cf49d0ad4b94cd" translate="yes" xml:space="preserve">
          <source>This option is only valid for the deinit command. Unregister all submodules in the working tree.</source>
          <target state="translated">このオプションはdeinitコマンドでのみ有効です。作業ツリーのすべてのサブモジュールの登録を解除します。</target>
        </trans-unit>
        <trans-unit id="f24783ef5194da88d7aca04af04dd4876a0ce3ed" translate="yes" xml:space="preserve">
          <source>This option is only valid for the summary command. Limit the summary size (number of commits shown in total). Giving 0 will disable the summary; a negative number means unlimited (the default). This limit only applies to modified submodules. The size is always limited to 1 for added/deleted/typechanged submodules.</source>
          <target state="translated">このオプションは summary コマンドでのみ有効です。サマリーのサイズ (合計で表示されるコミット数)を制限します。0を指定するとサマリーは無効になります。負の数は無制限(デフォルト)を意味します。この制限は変更されたサブモジュールにのみ適用されます。追加/削除/タイプ変更されたサブモジュールのサイズは常に1に制限されます。</target>
        </trans-unit>
        <trans-unit id="ba7d2b303205764476dea6127f5143ab027381fd" translate="yes" xml:space="preserve">
          <source>This option is only valid for the summary command. This command compares the commit in the index with that in the submodule HEAD when this option is used.</source>
          <target state="translated">このオプションは summary コマンドでのみ有効です。このオプションを使用すると、このコマンドはインデックス内のコミットとサブモジュールの HEAD 内のコミットを比較します。</target>
        </trans-unit>
        <trans-unit id="0329e613a2d579c43cf813e4dcb872eed327d20c" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Checkout the commit recorded in the superproject on a detached HEAD in the submodule. This is the default behavior, the main use of this option is to override &lt;code&gt;submodule.$name.update&lt;/code&gt; when set to a value other than &lt;code&gt;checkout&lt;/code&gt;. If the key &lt;code&gt;submodule.$name.update&lt;/code&gt; is either not explicitly set or set to &lt;code&gt;checkout&lt;/code&gt;, this option is implicit.</source>
          <target state="translated">このオプションは、updateコマンドでのみ有効です。スーパーモジュールに記録されたコミットを、サブモジュールの切り離されたHEADでチェックアウトします。これはデフォルトの動作です &lt;code&gt;submodule.$name.update&lt;/code&gt; このオプションの主な用途は、 &lt;code&gt;checkout&lt;/code&gt; 以外の値に設定されている場合にsubmodule。$ name.updateをオーバーライドすることです。キー &lt;code&gt;submodule.$name.update&lt;/code&gt; が明示的に設定されていないか、 &lt;code&gt;checkout&lt;/code&gt; に設定されている場合、このオプションは暗黙的です。</target>
        </trans-unit>
        <trans-unit id="7988d8bd0ba82c9f133c5f7cc525c2236228f253" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Clone new submodules in parallel with as many jobs. Defaults to the &lt;code&gt;submodule.fetchJobs&lt;/code&gt; option.</source>
          <target state="translated">このオプションは、updateコマンドでのみ有効です。新しいサブモジュールを同じ数のジョブと並行して複製します。デフォルトは &lt;code&gt;submodule.fetchJobs&lt;/code&gt; オプションです。</target>
        </trans-unit>
        <trans-unit id="de5e49243a4037b1b14e7038956130dc87de6d4f" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Don&amp;rsquo;t fetch new objects from the remote site.</source>
          <target state="translated">このオプションは、updateコマンドでのみ有効です。リモートサイトから新しいオブジェクトをフェッチしないでください。</target>
        </trans-unit>
        <trans-unit id="f13e740e91a73f0a2574eefa11fc263894a39d8c" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Initialize all submodules for which &quot;git submodule init&quot; has not been called so far before updating.</source>
          <target state="translated">このオプションは update コマンドでのみ有効です。これまでのところ &quot;git submodule init&quot; が呼ばれていないすべてのサブモジュールを、更新前に初期化します。</target>
        </trans-unit>
        <trans-unit id="78bb9a5b0867074719f5c17324b183ac216eed4e" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Instead of using the superproject&amp;rsquo;s recorded SHA-1 to update the submodule, use the status of the submodule&amp;rsquo;s remote-tracking branch. The remote used is branch&amp;rsquo;s remote (&lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt;), defaulting to &lt;code&gt;origin&lt;/code&gt;. The remote branch used defaults to &lt;code&gt;master&lt;/code&gt;, but the branch name may be overridden by setting the &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; option in either &lt;code&gt;.gitmodules&lt;/code&gt; or &lt;code&gt;.git/config&lt;/code&gt; (with &lt;code&gt;.git/config&lt;/code&gt; taking precedence).</source>
          <target state="translated">このオプションは、updateコマンドでのみ有効です。スーパープロジェクトの記録されたSHA-1を使用してサブモジュールを更新する代わりに、サブモジュールのリモート追跡ブランチのステータスを使用します。使用されるリモートはブランチのリモート（ &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; ）で、デフォルトは &lt;code&gt;origin&lt;/code&gt; です。リモートブランチはデフォルトで &lt;code&gt;master&lt;/code&gt; を使用しましたが、ブランチ名は、 &lt;code&gt;.gitmodules&lt;/code&gt; または &lt;code&gt;.git/config&lt;/code&gt; （ &lt;code&gt;.git/config&lt;/code&gt; を優先）のいずれかで &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; オプションを設定することでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="c3d36d21960733622c3c4d0c9b1d02dde186ab4d" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Merge the commit recorded in the superproject into the current branch of the submodule. If this option is given, the submodule&amp;rsquo;s HEAD will not be detached. If a merge failure prevents this process, you will have to resolve the resulting conflicts within the submodule with the usual conflict resolution tools. If the key &lt;code&gt;submodule.$name.update&lt;/code&gt; is set to &lt;code&gt;merge&lt;/code&gt;, this option is implicit.</source>
          <target state="translated">このオプションは、updateコマンドでのみ有効です。スーパープロジェクトに記録されたコミットをサブモジュールの現在のブランチにマージします。このオプションを指定すると、サブモジュールのHEADは切り離されません。マージの失敗がこのプロセスを妨げる場合、通常の競合解決ツールを使用して、サブモジュール内で発生する競合を解決する必要があります。キー &lt;code&gt;submodule.$name.update&lt;/code&gt; が &lt;code&gt;merge&lt;/code&gt; に設定されている場合、このオプションは暗黙的です。</target>
        </trans-unit>
        <trans-unit id="24320b0a3d3cc55ac6e67c5111e4d5b2024f7768" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Rebase the current branch onto the commit recorded in the superproject. If this option is given, the submodule&amp;rsquo;s HEAD will not be detached. If a merge failure prevents this process, you will have to resolve these failures with &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;. If the key &lt;code&gt;submodule.$name.update&lt;/code&gt; is set to &lt;code&gt;rebase&lt;/code&gt;, this option is implicit.</source>
          <target state="translated">このオプションは、updateコマンドでのみ有効です。スーパープロジェクトに記録されたコミットに現在のブランチをリベースします。このオプションを指定すると、サブモジュールのHEADは切り離されません。マージの失敗がこのプロセスを妨げる場合、これらの失敗を&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]で&lt;/a&gt;解決する必要があります。キー &lt;code&gt;submodule.$name.update&lt;/code&gt; が &lt;code&gt;rebase&lt;/code&gt; に設定されている場合、このオプションは暗黙的です。</target>
        </trans-unit>
        <trans-unit id="7010a654e778ac0c1da27a5e658bfb8f3af2d2b7" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. The initial clone of a submodule will use the recommended &lt;code&gt;submodule.&amp;lt;name&amp;gt;.shallow&lt;/code&gt; as provided by the &lt;code&gt;.gitmodules&lt;/code&gt; file by default. To ignore the suggestions use &lt;code&gt;--no-recommend-shallow&lt;/code&gt;.</source>
          <target state="translated">このオプションは、updateコマンドでのみ有効です。サブモジュールの最初のクローンは、デフォルトで &lt;code&gt;.gitmodules&lt;/code&gt; ファイルによって提供される推奨 &lt;code&gt;submodule.&amp;lt;name&amp;gt;.shallow&lt;/code&gt; を使用します。提案を無視するには、 &lt;code&gt;--no-recommend-shallow&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e6d7b3753dd95003bf8a5d9061fa7c1fb4ce2aaa" translate="yes" xml:space="preserve">
          <source>This option is only valid when &quot;--rebase&quot; is used.</source>
          <target state="translated">このオプションは、&quot;--rebase &quot;を使用した場合のみ有効である。</target>
        </trans-unit>
        <trans-unit id="f287cb1cbdf50b2a99b97c922a7a8e625bb0e374" translate="yes" xml:space="preserve">
          <source>This option is passed through to &lt;code&gt;git pack-objects&lt;/code&gt;.</source>
          <target state="translated">このオプションは &lt;code&gt;git pack-objects&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="4fbc055bad10c535a2fe42cbab527b95ac43fb4e" translate="yes" xml:space="preserve">
          <source>This option is primarily to help users who are used to older versions of Git, whose &quot;git add &amp;lt;pathspec&amp;gt;&amp;hellip;​&quot; was a synonym for &quot;git add --no-all &amp;lt;pathspec&amp;gt;&amp;hellip;​&quot;, i.e. ignored removed files.</source>
          <target state="translated">このオプションは主に、「git add &amp;lt;pathspec&amp;gt;&amp;hellip;」が「git add --no-all &amp;lt;pathspec&amp;gt;&amp;hellip;」の同義語である古いバージョンのGitに慣れているユーザー、つまり削除されたファイルを無視するユーザーを支援するためのものです。</target>
        </trans-unit>
        <trans-unit id="b78fb9017b343dcaa9f7e76e34c0b6aead88f71f" translate="yes" xml:space="preserve">
          <source>This option is similar to &lt;code&gt;--topo-order&lt;/code&gt; in the sense that no parent comes before all of its children, but otherwise commits are ordered according to their commit date.</source>
          <target state="translated">このオプションは、親がそのすべての子より前に来るという意味では &lt;code&gt;--topo-order&lt;/code&gt; に似ていますが、それ以外の場合、コミットはコミット日に従って順序付けられます。</target>
        </trans-unit>
        <trans-unit id="45355afb761a7570eab836899016e010dbbaff37" translate="yes" xml:space="preserve">
          <source>This option is used internally to temporarily provide a non-negative default value for the --recurse-submodules option. All other methods of configuring fetch&amp;rsquo;s submodule recursion (such as settings in &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; and &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;) override this option, as does specifying --[no-]recurse-submodules directly.</source>
          <target state="translated">このオプションは、-recurse-submodulesオプションに負でないデフォルト値を一時的に提供するために内部的に使用されます。-[no-] recurse-submodulesを直接指定するのと同様に、フェッチのサブモジュール再帰を構成する他のすべての方法（&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;や&lt;a href=&quot;git-config&quot;&gt;git-config [1]の設定など&lt;/a&gt;）は、このオプションをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="37e6c888c3b366c4018908c683d3076036665dbd" translate="yes" xml:space="preserve">
          <source>This option is useful in the case where one is developing a feature on top of an upstream branch. While the feature is being worked on, the upstream branch may advance and it may not be the best idea to keep rebasing on top of the upstream but to keep the base commit as-is.</source>
          <target state="translated">このオプションは、上流ブランチの上で機能を開発している場合に便利です。機能を開発している間は、上流のブランチが進むかもしれないので、上流のブランチの上でリベースを続けるのは最良のアイデアではないかもしれませんが、 ベースのコミットはそのままにしておきましょう。</target>
        </trans-unit>
        <trans-unit id="df85f593fd6f7620dd8216482ba39599038d6eaa" translate="yes" xml:space="preserve">
          <source>This option is valid for add and update commands. Create a &lt;code&gt;shallow&lt;/code&gt; clone with a history truncated to the specified number of revisions. See &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt;</source>
          <target state="translated">このオプションは、追加および更新コマンドに有効です。指定したリビジョン数に切り捨てられた履歴を持つ &lt;code&gt;shallow&lt;/code&gt; クローンを作成します。&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="ebd5b9556122446be4baef760f1327190ef9a1e0" translate="yes" xml:space="preserve">
          <source>This option makes it possible to choose what action will be performed when there is already at least one trailer with the same &amp;lt;token&amp;gt; in the message.</source>
          <target state="translated">このオプションにより、メッセージ内に同じ&amp;lt;token&amp;gt;を持つトレーラがすでに少なくとも1つある場合に実行されるアクションを選択できます。</target>
        </trans-unit>
        <trans-unit id="ccc070d377579e85f01a8bc02ef61c868f5331ee" translate="yes" xml:space="preserve">
          <source>This option makes it possible to choose what action will be performed when there is not yet any trailer with the same &amp;lt;token&amp;gt; in the message.</source>
          <target state="translated">このオプションを使用すると、メッセージに同じ&amp;lt;token&amp;gt;を持つトレーラーがまだない場合に実行するアクションを選択できます。</target>
        </trans-unit>
        <trans-unit id="f87ac9b403a45c29acabaf374d53994925318884" translate="yes" xml:space="preserve">
          <source>This option may be given up to three times, and specifies labels to be used in place of the corresponding file names in conflict reports. That is, &lt;code&gt;git merge-file -L x -L y -L z a b c&lt;/code&gt; generates output that looks like it came from files x, y and z instead of from files a, b and c.</source>
          <target state="translated">このオプションは3回まで指定でき、競合レポートで対応するファイル名の代わりに使用するラベルを指定します。つまり、 &lt;code&gt;git merge-file -L x -L y -L z a b c&lt;/code&gt; は、ファイルa、b、cからではなく、ファイルx、y、zからの出力を生成します。</target>
        </trans-unit>
        <trans-unit id="e631233708c2bfee4790b72e1f69b49f86a6c1ad" translate="yes" xml:space="preserve">
          <source>This option may be specified more than once.</source>
          <target state="translated">このオプションは複数回指定することができます。</target>
        </trans-unit>
        <trans-unit id="ad4bbf67e7b293924d5786bf652c9c00512dbaee" translate="yes" xml:space="preserve">
          <source>This option may be specified more than once; if so, Git will report commits reachable from any of the given commits.</source>
          <target state="translated">このオプションは複数回指定することができます。その場合、Git は指定したコミットのいずれかから到達可能なコミットを報告します。</target>
        </trans-unit>
        <trans-unit id="02516672facfbf5a7b264eba6cd92c5455d92d79" translate="yes" xml:space="preserve">
          <source>This option may be specified multiple times.</source>
          <target state="translated">このオプションは複数回指定することができます。</target>
        </trans-unit>
        <trans-unit id="b397b665066a62a5850aaf1e8487dea9e6d48e99" translate="yes" xml:space="preserve">
          <source>This option may be useful if you have CVS revision numbers stored in commit messages, bug-tracking systems, email archives, and the like.</source>
          <target state="translated">このオプションは、コミットメッセージやバグ追跡システム、電子メールアーカイブなどに CVS リビジョン番号が保存されている場合に便利です。</target>
        </trans-unit>
        <trans-unit id="5f0fddd7193d3e6d239ce8fc4bc7fc077dbf4105" translate="yes" xml:space="preserve">
          <source>This option may be useful when the test you would perform in each step does not require a checked out tree.</source>
          <target state="translated">このオプションは、各ステップで実行するテストがチェックアウトされたツリーを必要としない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="17ca02a4d5f28c7e8971b8d1a382a0b6bcfa0d17" translate="yes" xml:space="preserve">
          <source>This option overrides this restriction if the current value of the remote ref is the expected value. &quot;git push&quot; fails otherwise.</source>
          <target state="translated">このオプションは、リモート ref の現在の値が期待値である場合にこの制限を上書きします。&quot;git push&quot; は失敗します。</target>
        </trans-unit>
        <trans-unit id="8d166b9e59f19f7598d41e509f594cbcbd0ac7f1" translate="yes" xml:space="preserve">
          <source>This option provides an additional limit on top of &lt;code&gt;--window&lt;/code&gt;; the window size will dynamically scale down so as to not take up more than &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; bytes in memory. This is useful in repositories with a mix of large and small objects to not run out of memory with a large window, but still be able to take advantage of the large window for the smaller objects. The size can be suffixed with &quot;k&quot;, &quot;m&quot;, or &quot;g&quot;. &lt;code&gt;--window-memory=0&lt;/code&gt; makes memory usage unlimited. The default is taken from the &lt;code&gt;pack.windowMemory&lt;/code&gt; configuration variable.</source>
          <target state="translated">このオプションは、-- &lt;code&gt;--window&lt;/code&gt; 加えて追加の制限を提供します。ウィンドウサイズは、メモリで &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; バイトを超えないように動的に縮小されます。これは、大きなオブジェクトと小さなオブジェクトが混在しているリポジトリで、大きなウィンドウでメモリが不足しないようにするのに便利ですが、小さなオブジェクトでも大きなウィンドウを利用できます。サイズの末尾には「k」、「m」、または「g」を付けることができます。 &lt;code&gt;--window-memory=0&lt;/code&gt; は、メモリ使用量を無制限にします。デフォルトは &lt;code&gt;pack.windowMemory&lt;/code&gt; 構成変数から取得されます。</target>
        </trans-unit>
        <trans-unit id="b37ac455915a6998f49ecb85f682ef29dfba0c63" translate="yes" xml:space="preserve">
          <source>This option provides an additional limit on top of &lt;code&gt;--window&lt;/code&gt;; the window size will dynamically scale down so as to not take up more than &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; bytes in memory. This is useful in repositories with a mix of large and small objects to not run out of memory with a large window, but still be able to take advantage of the large window for the smaller objects. The size can be suffixed with &quot;k&quot;, &quot;m&quot;, or &quot;g&quot;. &lt;code&gt;--window-memory=0&lt;/code&gt; makes memory usage unlimited. The default is taken from the &lt;code&gt;pack.windowMemory&lt;/code&gt; configuration variable. Note that the actual memory usage will be the limit multiplied by the number of threads used by &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">このオプションは、-- &lt;code&gt;--window&lt;/code&gt; 加えて追加の制限を提供します。ウィンドウサイズは、メモリで &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; バイトを超えないように動的に縮小されます。これは、大きなオブジェクトと小さなオブジェクトが混在しているリポジトリで、大きなウィンドウでメモリが不足しないようにするのに便利ですが、小さなオブジェクトでも大きなウィンドウを利用できます。サイズの末尾には「k」、「m」、または「g」を付けることができます。 &lt;code&gt;--window-memory=0&lt;/code&gt; は、メモリ使用量を無制限にします。デフォルトは &lt;code&gt;pack.windowMemory&lt;/code&gt; 構成変数から取得されます。実際のメモリ使用量は、制限に&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]が&lt;/a&gt;使用するスレッド数を掛けたものになることに注意してください。</target>
        </trans-unit>
        <trans-unit id="16a6b7273f3cccefcfa42e33a667c568aaee0875" translate="yes" xml:space="preserve">
          <source>This option sets how the tag message is cleaned up. The &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; can be one of &lt;code&gt;verbatim&lt;/code&gt;, &lt;code&gt;whitespace&lt;/code&gt; and &lt;code&gt;strip&lt;/code&gt;. The &lt;code&gt;strip&lt;/code&gt; mode is default. The &lt;code&gt;verbatim&lt;/code&gt; mode does not change message at all, &lt;code&gt;whitespace&lt;/code&gt; removes just leading/trailing whitespace lines and &lt;code&gt;strip&lt;/code&gt; removes both whitespace and commentary.</source>
          <target state="translated">このオプションは、タグメッセージのクリーンアップ方法を設定します。 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; のいずれかを指定でき &lt;code&gt;verbatim&lt;/code&gt; 、 &lt;code&gt;whitespace&lt;/code&gt; と &lt;code&gt;strip&lt;/code&gt; 。 &lt;code&gt;strip&lt;/code&gt; モードがデフォルトです。 &lt;code&gt;verbatim&lt;/code&gt; モードでは、すべてのメッセージを変更しない &lt;code&gt;whitespace&lt;/code&gt; だけ/大手行と空白末尾削除し &lt;code&gt;strip&lt;/code&gt; 空白や解説の両方を削除します。</target>
        </trans-unit>
        <trans-unit id="1c04622cab5eac3fe5e20d1c189be97d2000ad23" translate="yes" xml:space="preserve">
          <source>This option takes the same values as the &lt;code&gt;trailer.ifexists&lt;/code&gt; configuration variable and it overrides what is specified by that option for trailers with the specified &amp;lt;token&amp;gt;.</source>
          <target state="translated">このオプションは、 &lt;code&gt;trailer.ifexists&lt;/code&gt; 構成変数と同じ値を取り、指定された&amp;lt;token&amp;gt;を持つトレーラーのオプションで指定されたものをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="de59f6641e33166f78c75c60b985eacdf1d2a0ea" translate="yes" xml:space="preserve">
          <source>This option takes the same values as the &lt;code&gt;trailer.ifmissing&lt;/code&gt; configuration variable and it overrides what is specified by that option for trailers with the specified &amp;lt;token&amp;gt;.</source>
          <target state="translated">このオプションは、 &lt;code&gt;trailer.ifmissing&lt;/code&gt; 構成変数と同じ値を取り、指定された&amp;lt;token&amp;gt;を持つトレーラーのそのオプションで指定されたものをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="6b156d8c8a67e1eaa9c71b8c4e454e308c17c450" translate="yes" xml:space="preserve">
          <source>This option takes the same values as the &lt;code&gt;trailer.where&lt;/code&gt; configuration variable and it overrides what is specified by that option for trailers with the specified &amp;lt;token&amp;gt;.</source>
          <target state="translated">このオプションは、 &lt;code&gt;trailer.where&lt;/code&gt; 構成変数と同じ値を取り、指定された&amp;lt;token&amp;gt;を持つトレーラーのそのオプションで指定されたものをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="7df9ff293572a5c1527bce59783d9544419daa5b" translate="yes" xml:space="preserve">
          <source>This option tells where a new trailer will be added.</source>
          <target state="translated">このオプションは、新しいトレーラーが追加される場所を指定します。</target>
        </trans-unit>
        <trans-unit id="b36c69b0196d300061790058cdc0665affb9915e" translate="yes" xml:space="preserve">
          <source>This option tells which characters are recognized as trailer separators. By default only &lt;code&gt;:&lt;/code&gt; is recognized as a trailer separator, except that &lt;code&gt;=&lt;/code&gt; is always accepted on the command line for compatibility with other git commands.</source>
          <target state="translated">このオプションは、トレーラセパレータとして認識される文字を示します。デフォルトでは &lt;code&gt;:&lt;/code&gt; のみがトレーラー区切りとして認識されますが、他のgitコマンドとの互換性のために &lt;code&gt;=&lt;/code&gt; はコマンドラインで常に受け入れられます。</target>
        </trans-unit>
        <trans-unit id="d89b4c86a97ff8d1caa3cc84d59173003c0040dc" translate="yes" xml:space="preserve">
          <source>This option will cause fast-export to issue a &quot;deleteall&quot; directive for each commit followed by a full list of all files in the commit (as opposed to just listing the files which are different from the commit&amp;rsquo;s first parent).</source>
          <target state="translated">このオプションを指定すると、fast-exportは、コミットごとに「deleteall」ディレクティブを発行し、その後にコミット内のすべてのファイルの完全なリストを発行します（コミットの最初の親とは異なるファイルをリストするだけではありません）。</target>
        </trans-unit>
        <trans-unit id="f143abcfc92e5721db51d7183ec9951b417133b6" translate="yes" xml:space="preserve">
          <source>This option will cause git-svn to attempt to automatically populate the svn:mergeinfo property in the SVN repository when possible. Currently, this can only be done when dcommitting non-fast-forward merges where all parents but the first have already been pushed into SVN.</source>
          <target state="translated">このオプションを指定すると、git-svn は可能な限り自動的に svn:mergeinfo プロパティを SVN リポジトリに埋めようとします。現在のところ、これが可能なのは、最初の親を除くすべての親がすでに SVN にプッシュされている、fast-forward ではないマージを dcommitting しているときだけです。</target>
        </trans-unit>
        <trans-unit id="06697c041d5aacbd598da12e9917cf43b1b799c5" translate="yes" xml:space="preserve">
          <source>This option will cause the mapping from old to new objects to be loaded from named branch upon startup and saved as a new commit to that branch upon exit, enabling incremental of large trees. If &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; does not exist it will be created.</source>
          <target state="translated">このオプションにより、古いオブジェクトから新しいオブジェクトへのマッピングが、起動時に名前付きブランチからロードされ、終了時にそのブランチへの新しいコミットとして保存され、大きなツリーの増分が可能になります。場合 &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; 存在しない、それが作成されます。</target>
        </trans-unit>
        <trans-unit id="dac1adaa75a920f5808dd15e4e9468c4b8319529" translate="yes" xml:space="preserve">
          <source>This output format is compatible with what &lt;code&gt;--index-info --stdin&lt;/code&gt; of &lt;code&gt;git update-index&lt;/code&gt; expects.</source>
          <target state="translated">この出力形式は、 &lt;code&gt;git update-index&lt;/code&gt; の &lt;code&gt;--index-info --stdin&lt;/code&gt; が予期するものと互換性があります。</target>
        </trans-unit>
        <trans-unit id="9b61a138f7f673e2e13a43bac58e20e6d27091cc" translate="yes" xml:space="preserve">
          <source>This outputs all the commit objects between the included and excluded commits, ordered by their distance to the included and excluded commits. Refs in &lt;code&gt;refs/bisect/&lt;/code&gt; are not used. The farthest from them is displayed first. (This is the only one displayed by &lt;code&gt;--bisect&lt;/code&gt;.)</source>
          <target state="translated">これにより、包含および除外されたコミット間のすべてのコミットオブジェクトが、包含および除外されたコミットまでの距離順に並べられて出力されます。中に参考文献 &lt;code&gt;refs/bisect/&lt;/code&gt; 使用されていません。それらから最も遠いものが最初に表示されます。（これは &lt;code&gt;--bisect&lt;/code&gt; によって表示される唯一のものです。）</target>
        </trans-unit>
        <trans-unit id="c6b16b352aa83127a9d9220754dcd31555c3879e" translate="yes" xml:space="preserve">
          <source>This outputs something like this (the actual commit object names would be different)</source>
          <target state="translated">これは以下のようなものを出力します (実際のコミットオブジェクト名は異なるでしょう)。</target>
        </trans-unit>
        <trans-unit id="05fcf2a461c52cf42967559d01dbd73ffe108135" translate="yes" xml:space="preserve">
          <source>This overrides a previous &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--gui&lt;/code&gt; setting and reads the default merge tool will be read from the configured &lt;code&gt;merge.tool&lt;/code&gt; variable.</source>
          <target state="translated">これにより、以前の &lt;code&gt;-g&lt;/code&gt; または &lt;code&gt;--gui&lt;/code&gt; 設定が上書きされ、デフォルトのマージツールが読み取られ、構成 &lt;code&gt;merge.tool&lt;/code&gt; 変数から読み取られます。</target>
        </trans-unit>
        <trans-unit id="cf7619d964802ced013b07a7c34a4262a7e0e3f4" translate="yes" xml:space="preserve">
          <source>This page can be displayed with &lt;code&gt;git help help&lt;/code&gt; or &lt;code&gt;git help --help&lt;/code&gt;</source>
          <target state="translated">このページは、 &lt;code&gt;git help help&lt;/code&gt; または &lt;code&gt;git help --help&lt;/code&gt; で表示できます。</target>
        </trans-unit>
        <trans-unit id="d990ef47ac594dcb10bc55890ec7a6963b3ffaed" translate="yes" xml:space="preserve">
          <source>This particular format is supplied as it&amp;rsquo;s short to implement and may be useful to a process that wants to create a new commit right now, without needing to use a working directory or &lt;code&gt;git update-index&lt;/code&gt;.</source>
          <target state="translated">この特定の形式は、実装するのが短いため提供されており、作業ディレクトリや &lt;code&gt;git update-index&lt;/code&gt; を使用する必要なく、新しいコミットを今すぐ作成したいプロセスに役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="3ace4cf0777df858ca1c6440d5cccb2ed6637934" translate="yes" xml:space="preserve">
          <source>This prints the name of a commit they are both based on. You should now look up the tree objects of those commits, which you can easily do with</source>
          <target state="translated">これは、両者のベースとなっているコミットの名前を表示します。これらのコミットのツリーオブジェクトを調べなければなりません。</target>
        </trans-unit>
        <trans-unit id="65ce33f2a6f411ae54de75d77a4a5c5e2663fba3" translate="yes" xml:space="preserve">
          <source>This program computes which packs in your repository are redundant. The output is suitable for piping to &lt;code&gt;xargs rm&lt;/code&gt; if you are in the root of the repository.</source>
          <target state="translated">このプログラムは、リポジトリ内のどのパックが冗長であるかを計算します。リポジトリのルートにいる場合、出力は &lt;code&gt;xargs rm&lt;/code&gt; へのパイプに適しています。</target>
        </trans-unit>
        <trans-unit id="9dec60739fdc5804a4abedc6cf66847493211890" translate="yes" xml:space="preserve">
          <source>This program dumps the given revisions in a form suitable to be piped into &lt;code&gt;git fast-import&lt;/code&gt;.</source>
          <target state="translated">このプログラムは、指定されたリビジョンを &lt;code&gt;git fast-import&lt;/code&gt; にパイプするのに適した形式でダンプします。</target>
        </trans-unit>
        <trans-unit id="21943cdf9cd81593906492b86163eaa305da0be9" translate="yes" xml:space="preserve">
          <source>This program is usually not what the end user wants to run directly. Most end users want to use one of the existing frontend programs, which parses a specific type of foreign source and feeds the contents stored there to &lt;code&gt;git fast-import&lt;/code&gt;.</source>
          <target state="translated">このプログラムは通常、エンドユーザーが直接実行するものではありません。ほとんどのエンドユーザーは、既存のフロントエンドプログラムの1つを使用したいと考えています。このプログラムは、特定の種類の外部ソースを解析し、そこに格納されているコンテンツを &lt;code&gt;git fast-import&lt;/code&gt; にフィードします。</target>
        </trans-unit>
        <trans-unit id="17acfb3fc2cc80c07ee41f3eeadca000eefd6ee0" translate="yes" xml:space="preserve">
          <source>This program searches the &lt;code&gt;$GIT_OBJECT_DIRECTORY&lt;/code&gt; for all objects that currently exist in a pack file as well as the independent object directories.</source>
          <target state="translated">このプログラムは、 &lt;code&gt;$GIT_OBJECT_DIRECTORY&lt;/code&gt; を検索して、現在パックファイルに存在するすべてのオブジェクトと、独立したオブジェクトディレクトリを探します。</target>
        </trans-unit>
        <trans-unit id="a85a25d731117b0f9fdffb50b50cd41a205c14dd" translate="yes" xml:space="preserve">
          <source>This public repository could further be mirrored, and that is how Git repositories at &lt;code&gt;kernel.org&lt;/code&gt; are managed.</source>
          <target state="translated">このパブリックリポジトリはさらにミラーリングすることができます。これが、 &lt;code&gt;kernel.org&lt;/code&gt; の Gitリポジトリを管理する方法です。</target>
        </trans-unit>
        <trans-unit id="3f74cf126c451b6a68e67763c97a8253f485453b" translate="yes" xml:space="preserve">
          <source>This puts a Git archive of the named CVS module in the directory &amp;lt;destination&amp;gt;, which will be created if necessary.</source>
          <target state="translated">これにより、指定したCVSモジュールのGitアーカイブがディレクトリ&amp;lt;destination&amp;gt;に配置され、必要に応じて作成されます。</target>
        </trans-unit>
        <trans-unit id="8831ce4f64ae931ef68e9c4eb0b8a48320fea478" translate="yes" xml:space="preserve">
          <source>This rebase can be performed using the &lt;code&gt;--rebase-merges&lt;/code&gt; option. It will generate a todo list looking like this:</source>
          <target state="translated">このリベースは &lt;code&gt;--rebase-merges&lt;/code&gt; オプションを使用して実行できます。次のようなToDoリストが生成されます。</target>
        </trans-unit>
        <trans-unit id="5e2dd779ca9f11c05d6bae58c7d8a031f404dc72" translate="yes" xml:space="preserve">
          <source>This ref is unchanged since the last import or fetch, although the helper cannot necessarily determine what value that produced.</source>
          <target state="translated">この参照は最後のインポートやフェッチから変更されていませんが、ヘルパーはそれがどのような値を生成したかを決定することはできません。</target>
        </trans-unit>
        <trans-unit id="0e48a6f59fc5d06bf39a026582c3a2674a30ee86" translate="yes" xml:space="preserve">
          <source>This remote helper is transparently used by Git when you use commands such as &quot;git fetch &amp;lt;URL&amp;gt;&quot;, &quot;git clone &amp;lt;URL&amp;gt;&quot;, , &quot;git push &amp;lt;URL&amp;gt;&quot; or &quot;git remote add &amp;lt;nick&amp;gt; &amp;lt;URL&amp;gt;&quot;, where &amp;lt;URL&amp;gt; begins with &lt;code&gt;ext::&lt;/code&gt;. Examples:</source>
          <target state="translated">このリモートヘルパーは、「git fetch &amp;lt;URL&amp;gt;」、「git clone &amp;lt;URL&amp;gt;」、「git push &amp;lt;URL&amp;gt;」、「git remote add &amp;lt;nick&amp;gt; &amp;lt;URL&amp;gt;」などのコマンドを使用すると、Gitによって透過的に使用されますここで、&amp;lt;URL&amp;gt;は &lt;code&gt;ext::&lt;/code&gt; 始まります。例：</target>
        </trans-unit>
        <trans-unit id="76e69f76fb018209940d2bd178b055119cc99cef" translate="yes" xml:space="preserve">
          <source>This remote helper uses the specified &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; to connect to a remote Git server.</source>
          <target state="translated">このリモートヘルパーは、指定された &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; を使用してリモートGitサーバーに接続します。</target>
        </trans-unit>
        <trans-unit id="08f3058ad626936f077bcdb5101be9917b27eae0" translate="yes" xml:space="preserve">
          <source>This removes the &lt;code&gt;WIP&lt;/code&gt; commit from the commit history, and sets your working tree to the state just before you made that snapshot.</source>
          <target state="translated">これにより、コミット履歴から &lt;code&gt;WIP&lt;/code&gt; コミットが削除され、スナップショットを作成する直前の状態に作業ツリーが設定されます。</target>
        </trans-unit>
        <trans-unit id="6cde691b95501235edce70baf30f3d475a6f05af" translate="yes" xml:space="preserve">
          <source>This removes the file from the index while keeping it in the working directory.</source>
          <target state="translated">これは、作業ディレクトリにファイルを保持したままインデックスからファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="f2e99bc05d5874bb5e940e93689126e6c4aa347e" translate="yes" xml:space="preserve">
          <source>This resolves any number of heads, but the resulting tree of the merge is always that of the current branch head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old development history of side branches. Note that this is different from the -Xours option to the &lt;code&gt;recursive&lt;/code&gt; merge strategy.</source>
          <target state="translated">これにより任意の数のヘッドが解決されますが、マージの結果ツリーは常に現在のブランチヘッドのツリーになり、他のすべてのブランチからのすべての変更を事実上無視します。これは、サイドブランチの古い開発履歴に取って代わるために使用されることを意図しています。これは、 &lt;code&gt;recursive&lt;/code&gt; マージ戦略の-Xoursオプションとは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="053dd73bd0ed92de95c5b132a1b4a0308f96cd04" translate="yes" xml:space="preserve">
          <source>This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when pulling or merging more than one branch.</source>
          <target state="translated">これは、2 つ以上のヘッドを持つケースを解決しますが、手動での解決が必要な複雑なマージは行いません。これは、主にトピックブランチのヘッドをまとめて使用することを目的としています。これは、複数のブランチを引っ張ったりマージしたりする場合のデフォルトのマージ方法です。</target>
        </trans-unit>
        <trans-unit id="e1337ea8d65ee53d09143c99f1f587dd31c2d238" translate="yes" xml:space="preserve">
          <source>This results in:</source>
          <target state="translated">これは結果的に</target>
        </trans-unit>
        <trans-unit id="a3acfff86d0ac3c7e1c1af7dc1decad57125efa5" translate="yes" xml:space="preserve">
          <source>This runs &lt;code&gt;git fsck --unreachable&lt;/code&gt; using all the refs available in &lt;code&gt;refs/&lt;/code&gt;, optionally with additional set of objects specified on the command line, and prunes all unpacked objects unreachable from any of these head objects from the object database. In addition, it prunes the unpacked objects that are also found in packs by running &lt;code&gt;git prune-packed&lt;/code&gt;. It also removes entries from .git/shallow that are not reachable by any ref.</source>
          <target state="translated">これは &lt;code&gt;refs/&lt;/code&gt; で利用可能なすべての参照を使用して &lt;code&gt;git fsck --unreachable&lt;/code&gt; を実行し、オプションでコマンドラインで指定された追加のオブジェクトセットを使用して、オブジェクトデータベースからこれらのヘッドオブジェクトのいずれからも到達できないアンパックされたすべてのオブジェクトをプルーニングします。さらに、 &lt;code&gt;git prune-packed&lt;/code&gt; を実行して、パックにも含まれているアンパックされたオブジェクトを整理します。また、どの参照からも到達できないエントリを.git / shallowから削除します。</target>
        </trans-unit>
        <trans-unit id="66bb2cd044765c7338efb3b55d3b51e463e22970" translate="yes" xml:space="preserve">
          <source>This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge. This option is meant to be used when merging branches with different clean filters or end-of-line normalization rules. See &quot;Merging branches with differing checkin/checkout attributes&quot; in &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">これは、3者間マージを解決するときに、ファイルの3つのステージすべての仮想チェックアウトとチェックインを実行します。このオプションは、異なるクリーンフィルターまたは行末の正規化ルールを使用してブランチをマージするときに使用するためのものです。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]の&lt;/a&gt;「異なるチェックイン/チェックアウト属性を持つブランチのマージ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="b3bd580b61f2b6d754a6c049f07ff919549d1439" translate="yes" xml:space="preserve">
          <source>This says &quot;include everything in root, but nothing two levels below root.&quot; If we then add the folder &lt;code&gt;A/B/C&lt;/code&gt; as a recursive pattern, the folders &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;A/B&lt;/code&gt; are added as parent patterns. The resulting sparse-checkout file is now</source>
          <target state="translated">これは、「すべてをルートに含めるが、ルートの2つ下のレベルは含めない」ことを意味します。その後、フォルダー &lt;code&gt;A/B/C&lt;/code&gt; を再帰パターンとして追加 &lt;code&gt;A&lt;/code&gt; と、フォルダーAと &lt;code&gt;A/B&lt;/code&gt; が親パターンとして追加されます。結果のスパースチェックアウトファイルは</target>
        </trans-unit>
        <trans-unit id="9f2fcd6a73ae4ce542d08fc5e7f799314e8e80fc" translate="yes" xml:space="preserve">
          <source>This script can be passed to &quot;git bisect run&quot; to find the commit that introduced a performance regression:</source>
          <target state="translated">このスクリプトを &quot;git bisect run&quot; に渡すことで、パフォーマンスの低下をもたらしたコミットを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="72c86095923977328df35910b245e776428b840b" translate="yes" xml:space="preserve">
          <source>This script is included in various scripts to supply routines to parse files under $GIT_DIR/remotes/ and $GIT_DIR/branches/ and configuration variables that are related to fetching, pulling and pushing.</source>
          <target state="translated">このスクリプトは、$GIT_DIR/remotes/および$GIT_DIR/branches/以下のファイルをパースするルーチンと、フェッチ、プル、プッシュに関連する設定変数を提供するための様々なスクリプトに含まれています。</target>
        </trans-unit>
        <trans-unit id="a405ee4e7ff4cc67a738558081388543481850c0" translate="yes" xml:space="preserve">
          <source>This section can also be used by those who respond to &lt;code&gt;git
request-pull&lt;/code&gt; or pull-request on GitHub (www.github.com) to integrate the work of others into their history. A sub-area lieutenant for a repository will act both as a participant and as an integrator.</source>
          <target state="translated">このセクションは、GitHub（www.github.com）で &lt;code&gt;git request-pull&lt;/code&gt; またはpull-requestに応答して他のユーザーの作業を履歴に統合する場合にも使用できます。リポジトリのサブエリア代理は、参加者とインテグレータの両方として機能します。</target>
        </trans-unit>
        <trans-unit id="53af582e47690e9820cb012bdcbccf97b8def7d3" translate="yes" xml:space="preserve">
          <source>This section explains how to configure some common webservers to run gitweb. In all cases, &lt;code&gt;/path/to/gitweb&lt;/code&gt; in the examples is the directory you ran installed gitweb in, and contains &lt;code&gt;gitweb_config.perl&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、gitwebを実行するようにいくつかの一般的なWebサーバーを構成する方法について説明します。すべての場合において、例の &lt;code&gt;/path/to/gitweb&lt;/code&gt; は、実行したgitwebがインストールされているディレクトリであり、gitweb_config.perlが含まれてい &lt;code&gt;gitweb_config.perl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="79c0f1f15a38eae1b5cc2a5e381bfbc844ef9486" translate="yes" xml:space="preserve">
          <source>This section is only included if a packfile section is also included in the response.</source>
          <target state="translated">このセクションは、パックファイルセクションが応答にも含まれている場合にのみ含まれます。</target>
        </trans-unit>
        <trans-unit id="f3cd5eb5a3885e012dabb05171cc566728c1791b" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git archive --remote&lt;/code&gt;. It is disabled by default, but a repository can enable it by setting &lt;code&gt;daemon.uploadarch&lt;/code&gt; configuration item to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git archive --remote&lt;/code&gt; を提供します。デフォルトでは無効になっていますが、リポジトリは &lt;code&gt;daemon.uploadarch&lt;/code&gt; 設定項目を &lt;code&gt;true&lt;/code&gt; に設定することで有効にできます。</target>
        </trans-unit>
        <trans-unit id="a1fc9be9532fca80163bd11748e3553d0b5b85a4" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git fetch-pack&lt;/code&gt; and &lt;code&gt;git ls-remote&lt;/code&gt; clients. It is enabled by default, but a repository can disable it by setting &lt;code&gt;daemon.uploadpack&lt;/code&gt; configuration item to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git fetch-pack&lt;/code&gt; および &lt;code&gt;git ls-remote&lt;/code&gt; クライアントにサービスを提供します。これはデフォルトで有効になっていますが、リポジトリは &lt;code&gt;daemon.uploadpack&lt;/code&gt; 設定項目を &lt;code&gt;false&lt;/code&gt; に設定することで無効にできます。</target>
        </trans-unit>
        <trans-unit id="ce507c3877f92fc6c1de609ca683d1e2a4e1b26f" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git fetch-pack&lt;/code&gt; and &lt;code&gt;git ls-remote&lt;/code&gt; clients. It is enabled by default, but a repository can disable it by setting this configuration item to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git fetch-pack&lt;/code&gt; および &lt;code&gt;git ls-remote&lt;/code&gt; クライアントにサービスを提供します。これはデフォルトで有効になっていますが、リポジトリはこの設定項目を &lt;code&gt;false&lt;/code&gt; に設定することで無効にできます。</target>
        </trans-unit>
        <trans-unit id="f25bae0e6df9b1b4a76a588d485b17d422e56c18" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git send-pack&lt;/code&gt; clients, allowing anonymous push. It is disabled by default, as there is &lt;code&gt;no&lt;/code&gt; authentication in the protocol (in other words, anybody can push anything into the repository, including removal of refs). This is solely meant for a closed LAN setting where everybody is friendly. This service can be enabled by setting &lt;code&gt;daemon.receivepack&lt;/code&gt; configuration item to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git send-pack&lt;/code&gt; クライアントにサービスを提供し、匿名のプッシュを許可します。プロトコルには認証が &lt;code&gt;no&lt;/code&gt; 、デフォルトでは無効になっています（つまり、参照の削除を含め、誰でもリポジトリに何かをプッシュできます）。これは、誰もが親しみやすい閉鎖的なLAN設定のためだけのものです。このサービスを有効にするには、 &lt;code&gt;daemon.receivepack&lt;/code&gt; 構成アイテムを &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="6b2859849402fde4d51ffe73c129c97d00cb6083" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git send-pack&lt;/code&gt; clients, allowing push. It is disabled by default for anonymous users, and enabled by default for users authenticated by the web server. It can be disabled by setting this item to &lt;code&gt;false&lt;/code&gt;, or enabled for all users, including anonymous users, by setting it to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git send-pack&lt;/code&gt; クライアントにサービスを提供し、プッシュを許可します。匿名ユーザーの場合はデフォルトで無効になり、Webサーバーで認証されたユーザーの場合はデフォルトで有効になります。この項目を &lt;code&gt;false&lt;/code&gt; に設定して無効にするか、 &lt;code&gt;true&lt;/code&gt; に設定して匿名ユーザーを含むすべてのユーザーに対して有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="1d789007e515492a9cc42830b12a07ff1db6d084" translate="yes" xml:space="preserve">
          <source>This serves Git clients older than version 1.6.6 that are unable to use the upload pack service. When enabled, clients are able to read any file within the repository, including objects that are no longer reachable from a branch but are still present. It is enabled by default, but a repository can disable it by setting this configuration item to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これは、アップロードパックサービスを使用できないバージョン1.6.6より古いGitクライアントにサービスを提供します。有効にすると、クライアントは、ブランチから到達できなくなってもまだ存在しているオブジェクトを含め、リポジトリ内の任意のファイルを読み取ることができます。これはデフォルトで有効になっていますが、リポジトリはこの設定項目を &lt;code&gt;false&lt;/code&gt; に設定することで無効にできます。</target>
        </trans-unit>
        <trans-unit id="5456200c93d8963943eca093573a9d8938a4ea5f" translate="yes" xml:space="preserve">
          <source>This sets GIT_SVN_ID (instead of using the environment). This allows the user to override the default refname to fetch from when tracking a single URL. The &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;dcommit&lt;/code&gt; commands no longer require this switch as an argument.</source>
          <target state="translated">これにより、（環境を使用する代わりに）GIT_SVN_IDが設定されます。これにより、ユーザーは、単一のURLを追跡するときに取得するデフォルトの参照名を上書きできます。 &lt;code&gt;log&lt;/code&gt; と &lt;code&gt;dcommit&lt;/code&gt; コマンドは、もはや引数としてこのスイッチを必要としません。</target>
        </trans-unit>
        <trans-unit id="acb244d7aa46a820614aa10decb4464bc8ecabb6" translate="yes" xml:space="preserve">
          <source>This setting can be disabled by the &lt;code&gt;--no-notes&lt;/code&gt; option, overridden by the &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; environment variable, and overridden by the &lt;code&gt;--notes=&amp;lt;ref&amp;gt;&lt;/code&gt; option.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; &lt;code&gt;--no-notes&lt;/code&gt; オプションで無効にしたり、GIT_NOTES_DISPLAY_REF環境変数で上書きしたり、 &lt;code&gt;--notes=&amp;lt;ref&amp;gt;&lt;/code&gt; オプションで上書きしたりできます。</target>
        </trans-unit>
        <trans-unit id="a8f435ef26eec94bd5c23846a74c0f4d57a87c8f" translate="yes" xml:space="preserve">
          <source>This setting can be overridden by passing the &lt;code&gt;--strategy&lt;/code&gt; option.</source>
          <target state="translated">この設定は &lt;code&gt;--strategy&lt;/code&gt; オプションを渡すことで上書きできます。</target>
        </trans-unit>
        <trans-unit id="5d273f23cd160340c4f9b3fbc5a088c0fc2c32be" translate="yes" xml:space="preserve">
          <source>This setting can be overridden by the &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; environment variable.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; 環境変数によって上書きできます。</target>
        </trans-unit>
        <trans-unit id="b28435a905552ea063d5203034696b428fdc0b87" translate="yes" xml:space="preserve">
          <source>This setting can be overridden with the &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; environment variable, which must be a colon separated list of refs or globs.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; 環境変数で上書きできます。これは、コロンで区切られた参照またはグロブのリストである必要があります。</target>
        </trans-unit>
        <trans-unit id="45473aa6b3903d5487aab6b473bcf528e266cdec" translate="yes" xml:space="preserve">
          <source>This setting can be overridden with the &lt;code&gt;GIT_NOTES_REWRITE_MODE&lt;/code&gt; environment variable.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_REWRITE_MODE&lt;/code&gt; 環境変数で上書きできます。</target>
        </trans-unit>
        <trans-unit id="39555b916eeeec115f6735665b5426bf964f4e52" translate="yes" xml:space="preserve">
          <source>This setting can be overridden with the &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; environment variable, which must be a colon separated list of refs or globs.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; 環境変数でオーバーライドできます。これは、コロンで区切られた参照またはグロブのリストでなければなりません。</target>
        </trans-unit>
        <trans-unit id="d17d74e5aa80b06bd416eb43f1c510767efc6dc8" translate="yes" xml:space="preserve">
          <source>This setting defaults to &quot;refs/notes/commits&quot;, and it can be overridden by the &lt;code&gt;GIT_NOTES_REF&lt;/code&gt; environment variable. See &lt;a href=&quot;git-notes&quot;&gt;git-notes[1]&lt;/a&gt;.</source>
          <target state="translated">この設定のデフォルトは「refs / notes / commits」で、 &lt;code&gt;GIT_NOTES_REF&lt;/code&gt; 環境変数によって上書きできます。&lt;a href=&quot;git-notes&quot;&gt;git-notes [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="843f7e48b1e3c030c426060d83a399e29388c249" translate="yes" xml:space="preserve">
          <source>This setting forces Git to normalize line endings for this file on checkin and convert them to CRLF when the file is checked out.</source>
          <target state="translated">この設定では、チェックイン時にこのファイルの行末を正規化し、チェックアウト時にはCRLFに変換します。</target>
        </trans-unit>
        <trans-unit id="8c7bb001c250cfdf4247d252deb09b8b2c2a2839" translate="yes" xml:space="preserve">
          <source>This setting forces Git to normalize line endings to LF on checkin and prevents conversion to CRLF when the file is checked out.</source>
          <target state="translated">この設定では、チェックイン時にGitが行末をLFに正規化し、ファイルをチェックアウトした際にCRLFに変換されないようにします。</target>
        </trans-unit>
        <trans-unit id="886fc853da603148f91948f5793a0d1be70dc28a" translate="yes" xml:space="preserve">
          <source>This setting is automatically guessed by &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; or &lt;a href=&quot;git-init&quot;&gt;git-init[1]&lt;/a&gt; when the repository was created. By default a repository that ends in &quot;/.git&quot; is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).</source>
          <target state="translated">この設定は、リポジトリの作成時に&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;または&lt;a href=&quot;git-init&quot;&gt;git-init [1]&lt;/a&gt;によって自動的に推測されます。デフォルトでは、「/。git」で終わるリポジトリはベアではないと見なされ（bare = false）、他のすべてのリポジトリはベアであると見なされます（bare = true）。</target>
        </trans-unit>
        <trans-unit id="a32da40367d476cb817ba2cfa99cb18bc04a7b3a" translate="yes" xml:space="preserve">
          <source>This setting overrides the default of the &lt;code&gt;--cleanup&lt;/code&gt; option in &lt;code&gt;git commit&lt;/code&gt;. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for details. Changing the default can be useful when you always want to keep lines that begin with comment character &lt;code&gt;#&lt;/code&gt; in your log message, in which case you would do &lt;code&gt;git config commit.cleanup whitespace&lt;/code&gt; (note that you will have to remove the help lines that begin with &lt;code&gt;#&lt;/code&gt; in the commit log template yourself, if you do this).</source>
          <target state="translated">この設定は、 &lt;code&gt;git commit&lt;/code&gt; の &lt;code&gt;--cleanup&lt;/code&gt; オプションのデフォルトを上書きします。詳細は&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;をご覧ください。あなたはいつもコメント文字で始まる行おきたいときにデフォルトを変更すると便利です &lt;code&gt;#&lt;/code&gt; あなたが行うことになる場合には、あなたのログメッセージには、 &lt;code&gt;git config commit.cleanup whitespace&lt;/code&gt; （注あなたが始まるのヘルプラインを削除する必要があること &lt;code&gt;#&lt;/code&gt; これを行う場合は、自分でコミットログテンプレートを使用してください）。</target>
        </trans-unit>
        <trans-unit id="e85001143ab4f6109a8db79b80d46592a3792b5e" translate="yes" xml:space="preserve">
          <source>This setting should be set to a comma-separated list of color and date settings, starting and ending with a color, the dates should be set from oldest to newest. The metadata will be colored given the colors if the line was introduced before the given timestamp, overwriting older timestamped colors.</source>
          <target state="translated">この設定は、色と日付の設定をカンマで区切ったリストに設定し、色で始まり、色で終わるようにし、日付は古いものから新しいものまで設定する必要があります。指定されたタイムスタンプよりも前にその行が導入された場合、メタデータはその色で着色され、古いタイムスタンプの色を上書きします。</target>
        </trans-unit>
        <trans-unit id="1b39995bc064271da90ffd3401f4ace36766db6f" translate="yes" xml:space="preserve">
          <source>This setting writes a JSON-based format that is suited for machine interpretation. See &lt;code&gt;GIT_TRACE2&lt;/code&gt; for available trace output options and &lt;a href=&quot;api-trace2&quot;&gt;Trace2 documentation&lt;/a&gt; for full details.</source>
          <target state="translated">この設定は、機械の解釈に適したJSONベースの形式を書き込みます。使用可能なトレース出力オプションについては &lt;code&gt;GIT_TRACE2&lt;/code&gt; を、詳細については&lt;a href=&quot;api-trace2&quot;&gt;Trace2のドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d727921c238e28668ffb0dd7e4775077e3d6b368" translate="yes" xml:space="preserve">
          <source>This should be a colon-separated list of absolute paths. If set, it is a list of directories that Git should not chdir up into while looking for a repository directory (useful for excluding slow-loading network directories). It will not exclude the current working directory or a GIT_DIR set on the command line or in the environment. Normally, Git has to read the entries in this list and resolve any symlink that might be present in order to compare them with the current directory. However, if even this access is slow, you can add an empty entry to the list to tell Git that the subsequent entries are not symlinks and needn&amp;rsquo;t be resolved; e.g., &lt;code&gt;GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink&lt;/code&gt;.</source>
          <target state="translated">これは、コロンで区切られた絶対パスのリストである必要があります。設定されている場合、これは、リポジトリディレクトリを探すときにGitがchdirを実行してはならないディレクトリのリストです（読み込みの遅いネットワークディレクトリを除外するのに役立ちます）。コマンドラインまたは環境で設定されている現在の作業ディレクトリまたはGIT_DIRは除外されません。通常、Gitはこのリストのエントリを読み取り、現在のディレクトリと比較するために、存在する可能性のあるシンボリックリンクを解決する必要があります。ただし、このアクセスが遅い場合でも、リストに空のエントリを追加して、後続のエントリがシンボリックリンクではなく、解決する必要がないことをGitに伝えることができます。例： &lt;code&gt;GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02391ad98329bedcf2ddfbe7ebdef774e4e7cc67" translate="yes" xml:space="preserve">
          <source>This should help you to submit patches inline using KMail.</source>
          <target state="translated">これで、KMailを使ってパッチをインラインで送信することができるようになるはずです。</target>
        </trans-unit>
        <trans-unit id="dc65a8c75ec971d079e04ac05264e8ee2fb908c8" translate="yes" xml:space="preserve">
          <source>This should make &quot;--pretty=oneline&quot; a whole lot more readable for people using 80-column terminals.</source>
          <target state="translated">これにより、80カラムの端末を使っている人にとっては、&quot;--pretty=oneline &quot;がより読みやすくなるはずです。</target>
        </trans-unit>
        <trans-unit id="cda899a68420b48633046b1cef20e4960b467a9e" translate="yes" xml:space="preserve">
          <source>This should make it easy to look up svn log messages when svn users refer to -r/--revision numbers.</source>
          <target state="translated">これにより、svn のユーザーが -r/--修正番号を参照したときに svn のログメッセージを簡単に調べることができるようになるはずです。</target>
        </trans-unit>
        <trans-unit id="3fce0b9f9a8369808848ec3f066c1735323bb111" translate="yes" xml:space="preserve">
          <source>This should not be confused with the &lt;code&gt;ours&lt;/code&gt; merge strategy, which does not even look at what the other tree contains at all. It discards everything the other tree did, declaring &lt;code&gt;our&lt;/code&gt; history contains all that happened in it.</source>
          <target state="translated">これは、他のツリーに何が含まれているかをまったく確認しない、 &lt;code&gt;ours&lt;/code&gt; マージ戦略と混同しないでください。それは他のツリーが行ったすべてを破棄し、 &lt;code&gt;our&lt;/code&gt; 歴史はその中で起こったすべてを含んでいると宣言します。</target>
        </trans-unit>
        <trans-unit id="70d0ce2d7e7f48cdf303b28228ad271bde0b97ac" translate="yes" xml:space="preserve">
          <source>This shows that our resolved version deleted &quot;Hello world&quot; from the first parent, deleted &quot;Goodbye&quot; from the second parent, and added &quot;Goodbye world&quot;, which was previously absent from both.</source>
          <target state="translated">これは、私たちが解決したバージョンでは、最初の親から &quot;Hello world &quot;が削除され、2番目の親から &quot;Goodbye &quot;が削除され、両方の親にはなかった &quot;Goodbye world &quot;が追加されたことを示しています。</target>
        </trans-unit>
        <trans-unit id="e0fbc89a9eb1f686d88b41839c951cd18b86bf5e" translate="yes" xml:space="preserve">
          <source>This shows that you can do without a run script if you write the test on a single line.</source>
          <target state="translated">これは、テストを一行で書けばランスクリプトなしでもできることを示しています。</target>
        </trans-unit>
        <trans-unit id="f580a082428b40358ee35f346bb87b38bbd6e3f8" translate="yes" xml:space="preserve">
          <source>This shows the change between HEAD and index (i.e. what will be committed if you say &lt;code&gt;git commit&lt;/code&gt;), and between index and working tree files (i.e. what you could stage further before &lt;code&gt;git commit&lt;/code&gt; using &lt;code&gt;git add&lt;/code&gt;) for each path. A sample output looks like this:</source>
          <target state="translated">これは、各パスのHEADとインデックス（つまり、 &lt;code&gt;git commit&lt;/code&gt; と言った場合にコミットされるもの）と、インデックスと作業ツリーファイル（つまり、 &lt;code&gt;git add&lt;/code&gt; &lt;code&gt;git commit&lt;/code&gt; 使用してgit コミットする前にさらにステージングできるもの）との間の変更を示しています。出力例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="cdedf9c4235065dcc3b6a065543c259879fefa6b" translate="yes" xml:space="preserve">
          <source>This shows the files and directories to be deleted and issues an &quot;Input ignore patterns&amp;gt;&amp;gt;&quot; prompt. You can input space-separated patterns to exclude files and directories from deletion. E.g. &quot;*.c *.h&quot; will excludes files end with &quot;.c&quot; and &quot;.h&quot; from deletion. When you are satisfied with the filtered result, press ENTER (empty) back to the main menu.</source>
          <target state="translated">削除するファイルとディレクトリが表示され、「入力無視パターン&amp;gt;&amp;gt;」プロンプトが表示されます。スペースで区切られたパターンを入力して、ファイルとディレクトリを削除から除外できます。たとえば、「*。c * .h」は、「。c」および「.h」で終わるファイルを削除から除外します。フィルター処理された結果に満足したら、Enter（空）を押してメインメニューに戻ります。</target>
        </trans-unit>
        <trans-unit id="d76da1518821bfa115def32fd19d8e8b1e73d979" translate="yes" xml:space="preserve">
          <source>This shows the files and directories to be deleted and issues an &quot;Select items to delete&amp;gt;&amp;gt;&quot; prompt. When the prompt ends with double &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; like this, you can make more than one selection, concatenated with whitespace or comma. Also you can say ranges. E.g. &quot;2-5 7,9&quot; to choose 2,3,4,5,7,9 from the list. If the second number in a range is omitted, all remaining items are selected. E.g. &quot;7-&quot; to choose 7,8,9 from the list. You can say &lt;code&gt;*&lt;/code&gt; to choose everything. Also when you are satisfied with the filtered result, press ENTER (empty) back to the main menu.</source>
          <target state="translated">削除するファイルとディレクトリが表示され、「削除するアイテムを選択&amp;gt;&amp;gt;」というプロンプトが表示されます。プロンプトがこのように二重 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; で終了する場合、空白またはコンマで連結された複数の選択を行うことができます。また、あなたは範囲を言うことができます。たとえば、「2-5 7,9」はリストから2、3、4、5、7、9を選択します。範囲の2番目の数値を省略すると、残りのすべての項目が選択されます。たとえば、「7-」はリストから7,8,9を選択します。 &lt;code&gt;*&lt;/code&gt; と言ってすべてを選択できます。また、フィルター処理した結果に満足したら、Enter（空）を押してメインメニューに戻ります。</target>
        </trans-unit>
        <trans-unit id="53f59db63b45945049b0fe262d831991c1cb4a8d" translate="yes" xml:space="preserve">
          <source>This shows the status information and issues an &quot;Update&amp;gt;&amp;gt;&quot; prompt. When the prompt ends with double &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, you can make more than one selection, concatenated with whitespace or comma. Also you can say ranges. E.g. &quot;2-5 7,9&quot; to choose 2,3,4,5,7,9 from the list. If the second number in a range is omitted, all remaining patches are taken. E.g. &quot;7-&quot; to choose 7,8,9 from the list. You can say &lt;code&gt;*&lt;/code&gt; to choose everything.</source>
          <target state="translated">ステータス情報が表示され、「Update &amp;gt;&amp;gt;」プロンプトが表示されます。プロンプトが二重 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; で終了する場合、空白またはコンマで連結された複数の選択を行うことができます。また、あなたは範囲を言うことができます。たとえば、「2-5 7,9」はリストから2、3、4、5、7、9を選択します。範囲の2番目の番号を省略すると、残りのすべてのパッチが取得されます。たとえば、「7-」はリストから7,8,9を選択します。 &lt;code&gt;*&lt;/code&gt; と言ってすべてを選択できます。</target>
        </trans-unit>
        <trans-unit id="728eb7da1f0f1bff86889f4ac114a7967bd3817f" translate="yes" xml:space="preserve">
          <source>This snapshot is now stored in a temporary staging area which Git calls the &quot;index&quot;. You can permanently store the contents of the index in the repository with &lt;code&gt;git commit&lt;/code&gt;:</source>
          <target state="translated">このスナップショットは、Gitが「インデックス」と呼ぶ一時的なステージング領域に保存されます。 &lt;code&gt;git commit&lt;/code&gt; を使用して、インデックスのコンテンツをリポジトリに永続的に保存できます。</target>
        </trans-unit>
        <trans-unit id="dfa3a419f48a4609a0668c69a143f543612e713a" translate="yes" xml:space="preserve">
          <source>This solution is not 100% bulletproof, in the sense that if some project has a named ref (branch, tag) starting with &lt;code&gt;git/&lt;/code&gt;, then paths such as</source>
          <target state="translated">このソリューションは100％防弾ではありません。あるプロジェクトに &lt;code&gt;git/&lt;/code&gt; で始まる名前付き参照（ブランチ、タグ）がある場合、次のようなパスになります。</target>
        </trans-unit>
        <trans-unit id="02da975953020f9ebbe3388889e8a8406f05d0c7" translate="yes" xml:space="preserve">
          <source>This step and the next one could be combined into a single step with &quot;checkout -b my2.6.14 v2.6.14&quot;.</source>
          <target state="translated">このステップと次のステップは、&quot;checkout -b my2.6.14 v2.6.14 &quot;で1つのステップにまとめることができます。</target>
        </trans-unit>
        <trans-unit id="9b0b980e437fd3274de63464aa9184e42833d899" translate="yes" xml:space="preserve">
          <source>This suffix is also accepted when spelled in uppercase, and means the same thing no matter the case.</source>
          <target state="translated">この接尾辞は大文字で綴った場合にも通用し、大文字と小文字に関係なく同じ意味になります。</target>
        </trans-unit>
        <trans-unit id="01f381d8f83cae139b7e7ff06573574ebdbc8086" translate="yes" xml:space="preserve">
          <source>This supersedes the &lt;a href=&quot;#post-update&quot;&gt;&lt;em&gt;post-update&lt;/em&gt;&lt;/a&gt; hook in that it gets both old and new values of all the refs in addition to their names.</source>
          <target state="translated">これは、名前に加えてすべての参照の古い値と新しい値の両方を取得するという点で、&lt;a href=&quot;#post-update&quot;&gt;&lt;em&gt;更新後の&lt;/em&gt;&lt;/a&gt;フックに取って代わります。</target>
        </trans-unit>
        <trans-unit id="6339f7da558022ed0ae10f566dd01f30bb047e19" translate="yes" xml:space="preserve">
          <source>This synchronizes your public repository to match the named branch head (i.e. &lt;code&gt;master&lt;/code&gt; in this case) and objects reachable from them in your current repository.</source>
          <target state="translated">これにより、パブリックリポジトリが同期され、名前付きブランチヘッド（この場合は &lt;code&gt;master&lt;/code&gt; ）と現在のリポジトリ内のそこから到達可能なオブジェクトが一致します。</target>
        </trans-unit>
        <trans-unit id="0012e2584fc653cc03e6dda35ea11cbdc9f6c1a2" translate="yes" xml:space="preserve">
          <source>This syntax is only recognized if there are no slashes before the first colon. This helps differentiate a local path that contains a colon. For example the local path &lt;code&gt;foo:bar&lt;/code&gt; could be specified as an absolute path or &lt;code&gt;./foo:bar&lt;/code&gt; to avoid being misinterpreted as an ssh url.</source>
          <target state="translated">この構文は、最初のコロンの前にスラッシュがない場合にのみ認識されます。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、ローカルパス &lt;code&gt;foo:bar&lt;/code&gt; 、絶対パスまたはとして指定することができ &lt;code&gt;./foo:bar&lt;/code&gt; sshのURLと誤解されないように。</target>
        </trans-unit>
        <trans-unit id="9f5d9872e03f1e6dd55415fa2249d9c84ea6f738" translate="yes" xml:space="preserve">
          <source>This takes a text file each of whose lines is a shell glob pattern. Filepairs that match a glob pattern on an earlier line in the file are output before ones that match a later line, and filepairs that do not match any glob pattern are output last.</source>
          <target state="translated">これは、各行がシェル・グロブ・パターンであるテキスト・ファイルを取得します。ファイルの前の行でグロブ・パターンにマッチしたファイルペアは、後の行にマッチしたファイルペアの前に出力され、グロブ・パターンにマッチしないファイルペアは最後に出力されます。</target>
        </trans-unit>
        <trans-unit id="b169549655fddd825e67d14c1591493d6ac0be03" translate="yes" xml:space="preserve">
          <source>This target is intended to be more of a summary (like GIT_TRACE) and less detailed than the other targets. It ignores thread, region, and data messages, for example.</source>
          <target state="translated">このターゲットは (GIT_TRACE のように)より要約的で、他のターゲットよりも詳細ではないことを意図しています。例えば、スレッド、リージョン、データメッセージは無視されます。</target>
        </trans-unit>
        <trans-unit id="49bec15344e0cef74269dabec868d060f4c1b07d" translate="yes" xml:space="preserve">
          <source>This tells the bisect process that no commit after &lt;code&gt;v2.5&lt;/code&gt;, up to and including &lt;code&gt;v2.6&lt;/code&gt;, should be tested.</source>
          <target state="translated">これはbisectプロセスに、 &lt;code&gt;v2.5&lt;/code&gt; 以降（ &lt;code&gt;v2.6&lt;/code&gt; まで）のコミットはテストしないように指示します。</target>
        </trans-unit>
        <trans-unit id="1842bab1269e00a8bf77d06ee23570861225cc48" translate="yes" xml:space="preserve">
          <source>This tells the bisect process that the commits between &lt;code&gt;v2.5&lt;/code&gt; and &lt;code&gt;v2.6&lt;/code&gt; (inclusive) should be skipped.</source>
          <target state="translated">これは、 &lt;code&gt;v2.5&lt;/code&gt; と &lt;code&gt;v2.6&lt;/code&gt; （両端を含む）の間のコミットはスキップする必要があることをbisectプロセスに伝えます。</target>
        </trans-unit>
        <trans-unit id="fb42c5eea9f7afe3662a07fd6af3c3105ab04e8f" translate="yes" xml:space="preserve">
          <source>This tells you that the immediately following version of the file was &quot;newsha&quot;, and that the immediately preceding version was &quot;oldsha&quot;. You also know the commit messages that went with the change from oldsha to 4b9458b and with the change from 4b9458b to newsha.</source>
          <target state="translated">これは、ファイルの直後のバージョンが「newsha」であり、直前のバージョンが「oldsha」であったことを教えてくれます。oldsha から 4b9458b への変更と、4b9458b から newsha への変更に伴うコミットメッセージもわかります。</target>
        </trans-unit>
        <trans-unit id="8f1179423f3ea23a6c9e525ef159db41c1155b6a" translate="yes" xml:space="preserve">
          <source>This transformation is used to detect renames and copies, and is controlled by the -M option (to detect renames) and the -C option (to detect copies as well) to the &lt;code&gt;git diff-*&lt;/code&gt; commands. If the input contained these filepairs:</source>
          <target state="translated">この変換は、名前の変更とコピーを検出するために使用され、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドの-Mオプション（名前の変更を検出する）と-Cオプション（コピーも検出する）によって制御されます。入力にこれらのファイルペアが含まれていた場合：</target>
        </trans-unit>
        <trans-unit id="573190bccf8f2a4ea6fc33eedd23b4b8fc3f90f8" translate="yes" xml:space="preserve">
          <source>This transformation is used to merge filepairs broken by diffcore-break, and not transformed into rename/copy by diffcore-rename, back into a single modification. This always runs when diffcore-break is used.</source>
          <target state="translated">この変換は、diffcode-break で壊れたファイルペアを、diffcode-rename で rename/copy に変換されなかったファイルペアにマージして、単一の変更に戻すために使われます。これは diffcore-break が使われているときに常に実行されます。</target>
        </trans-unit>
        <trans-unit id="448726c2164ad1aa28f4d84dcd657bc466764287" translate="yes" xml:space="preserve">
          <source>This transformation limits the set of filepairs to those that change specified strings between the preimage and the postimage in a certain way. -S&amp;lt;block of text&amp;gt; and -G&amp;lt;regular expression&amp;gt; options are used to specify different ways these strings are sought.</source>
          <target state="translated">この変換は、ファイルペアのセットを、特定の方法でプリイメージとポストイメージの間で指定された文字列を変更するペアに制限します。-S &amp;lt;テキストのブロック&amp;gt;および-G &amp;lt;正規表現&amp;gt;オプションを使用して、これらの文字列を探すさまざまな方法を指定します。</target>
        </trans-unit>
        <trans-unit id="eb01f7c28a2e42a179d9ca76727e0a7db6bb8dce" translate="yes" xml:space="preserve">
          <source>This transport can be used for both uploading and downloading, and requires you to have a log-in privilege over &lt;code&gt;ssh&lt;/code&gt; to the remote machine. It finds out the set of objects the other side lacks by exchanging the head commits both ends have and transfers (close to) minimum set of objects. It is by far the most efficient way to exchange Git objects between repositories.</source>
          <target state="translated">このトランスポートは、アップロードとダウンロードの両方に使用でき、リモートマシンへの &lt;code&gt;ssh&lt;/code&gt; 経由のログイン権限が必要です。両端にあるヘッドコミットを交換し、オブジェクトの最小セットを（近くに）転送することで、反対側にないオブジェクトのセットを見つけます。これは、リポジトリ間でGitオブジェクトを交換するための最も効率的な方法です。</target>
        </trans-unit>
        <trans-unit id="1e93313475dc2966a9b364d25d3e63ddb92cd35d" translate="yes" xml:space="preserve">
          <source>This transport is the same as SSH transport but uses &lt;code&gt;sh&lt;/code&gt; to run both ends on the local machine instead of running other end on the remote machine via &lt;code&gt;ssh&lt;/code&gt;.</source>
          <target state="translated">このトランスポートはSSHトランスポートと同じですが、リモートマシンで &lt;code&gt;ssh&lt;/code&gt; を介して他のエンドを実行する代わりに、ローカルマシンで &lt;code&gt;sh&lt;/code&gt; を使用して両端を実行します。</target>
        </trans-unit>
        <trans-unit id="187c060b77919e40b0db07be6c4444d6bedf0f1f" translate="yes" xml:space="preserve">
          <source>This transport was designed for anonymous downloading. Like SSH transport, it finds out the set of objects the downstream side lacks and transfers (close to) minimum set of objects.</source>
          <target state="translated">このトランスポートは匿名ダウンロード用に設計されています。SSH トランスポートと同様に、下流側に不足しているオブジェクトのセットを見つけ出し、 最小限のオブジェクトのセットを(それに近い形で)転送します。</target>
        </trans-unit>
        <trans-unit id="a843c4941e9eb68216876c91a59842ae7d058faa" translate="yes" xml:space="preserve">
          <source>This tutorial explains how to import a new project into Git, make changes to it, and share changes with other developers.</source>
          <target state="translated">このチュートリアルでは、新しいプロジェクトを Git にインポートして変更を加え、他の開発者と共有する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="586b98337ae35b657ccc9687b72106b49b3b174b" translate="yes" xml:space="preserve">
          <source>This tutorial explains how to use the &quot;core&quot; Git commands to set up and work with a Git repository.</source>
          <target state="translated">このチュートリアルでは、&quot;core&quot; Git コマンドを使って Git リポジトリを設定して作業する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="4f3b7287fc4739a451de38537fb0637003a134c1" translate="yes" xml:space="preserve">
          <source>This tutorial should be enough to perform basic distributed revision control for your projects. However, to fully understand the depth and power of Git you need to understand two simple ideas on which it is based:</source>
          <target state="translated">このチュートリアルでは、プロジェクトの基本的な分散リビジョン管理を行うのに十分な内容となっています。しかし、Git の奥深さとパワーを完全に理解するには、Git のベースとなっている二つのシンプルな考え方を理解する必要があります。</target>
        </trans-unit>
        <trans-unit id="50b7797bad77b49520127714ff8a716873aad978" translate="yes" xml:space="preserve">
          <source>This updates (or creates, as necessary) branches &lt;code&gt;pu&lt;/code&gt; and &lt;code&gt;tmp&lt;/code&gt; in the local repository by fetching from the branches (respectively) &lt;code&gt;pu&lt;/code&gt; and &lt;code&gt;maint&lt;/code&gt; from the remote repository.</source>
          <target state="translated">これは、リモートリポジトリから &lt;code&gt;pu&lt;/code&gt; および &lt;code&gt;maint&lt;/code&gt; を（それぞれ）ブランチからフェッチすることにより、ローカルリポジトリの &lt;code&gt;pu&lt;/code&gt; および &lt;code&gt;tmp&lt;/code&gt; ブランチを更新（または必要に応じて作成）します。</target>
        </trans-unit>
        <trans-unit id="70ac0b727096d7231e8fdcdd112d1a04551c8ca8" translate="yes" xml:space="preserve">
          <source>This used to be the default, but not since Git 2.0 (&lt;code&gt;simple&lt;/code&gt; is the new default).</source>
          <target state="translated">これは以前はデフォルトでしたが、Git 2.0以降ではありません（ &lt;code&gt;simple&lt;/code&gt; が新しいデフォルトです）。</target>
        </trans-unit>
        <trans-unit id="fd75f35034e73b98112aaaf4198ee488b9e51804" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;--interactive&lt;/code&gt; machinery internally, but combining it with the &lt;code&gt;--interactive&lt;/code&gt; option explicitly is generally not a good idea unless you know what you are doing (see BUGS below).</source>
          <target state="translated">これは内部的に &lt;code&gt;--interactive&lt;/code&gt; 機構を使用しますが、 &lt;code&gt;--interactive&lt;/code&gt; オプションと明示的に組み合わせることは、何をしているのかを知らない限り、一般に良い考えではありません（以下のバグを参照）。</target>
        </trans-unit>
        <trans-unit id="665eaff82148d49a545a97a7903a8bf0d3754608" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;--interactive&lt;/code&gt; machinery internally, but it can be run without an explicit &lt;code&gt;--interactive&lt;/code&gt;.</source>
          <target state="translated">これは内部で &lt;code&gt;--interactive&lt;/code&gt; 機構を使用しますが、明示的な &lt;code&gt;--interactive&lt;/code&gt; なしで実行できます。</target>
        </trans-unit>
        <trans-unit id="5a59444b879ae5151f30b1cffe08974240ac7bdc" translate="yes" xml:space="preserve">
          <source>This uses the same two-dot range notation we saw earlier with &lt;code&gt;git log&lt;/code&gt;.</source>
          <target state="translated">これは、前に &lt;code&gt;git log&lt;/code&gt; で見たのと同じ2つのドット範囲表記を使用します。</target>
        </trans-unit>
        <trans-unit id="94dc29f5a82c88ac8ea06389eebe7535e89a6fb1" translate="yes" xml:space="preserve">
          <source>This value is true by default in a repository that has a working directory associated with it, and false by default in a bare repository.</source>
          <target state="translated">この値は、作業ディレクトリが関連付けられているリポジトリではデフォルトでtrueになり、ベアリポジトリではデフォルトでfalseになります。</target>
        </trans-unit>
        <trans-unit id="73a34f84ecc165ae3643b28ecca4c6c41f197412" translate="yes" xml:space="preserve">
          <source>This variable can be used to restrict the permission bits of tar archive entries. The default is 0002, which turns off the world write bit. The special value &quot;user&quot; indicates that the archiving user&amp;rsquo;s umask will be used instead. See umask(2) and &lt;a href=&quot;git-archive&quot;&gt;git-archive[1]&lt;/a&gt;.</source>
          <target state="translated">この変数は、tarアーカイブエントリの許可ビットを制限するために使用できます。デフォルトは0002で、ワールドライトビットをオフにします。特別な値「user」は、代わ​​りにアーカイブユーザーのumaskが使用されることを示します。umask（2）と&lt;a href=&quot;git-archive&quot;&gt;git-archive [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="63a384d932515032afb2060852ce18cd5598c9ca" translate="yes" xml:space="preserve">
          <source>This variable can be used to restrict the permission bits of tar archive entries. The default is 0002, which turns off the world write bit. The special value &quot;user&quot; indicates that the archiving user&amp;rsquo;s umask will be used instead. See umask(2) for details. If &lt;code&gt;--remote&lt;/code&gt; is used then only the configuration of the remote repository takes effect.</source>
          <target state="translated">この変数は、tarアーカイブエントリの許可ビットを制限するために使用できます。デフォルトは0002で、ワールドライトビットをオフにします。特別な値「user」は、代わ​​りにアーカイブユーザーのumaskが使用されることを示します。詳細については、umask（2）を参照してください。場合 &lt;code&gt;--remote&lt;/code&gt; が、その後使用されているリモートリポジトリの構成のみが有効になります。</target>
        </trans-unit>
        <trans-unit id="0afce327e7d4311118de1c5dc2faa8fa7a291053" translate="yes" xml:space="preserve">
          <source>This variable controls the event target destination. It may be overridden by the &lt;code&gt;GIT_TRACE2_EVENT&lt;/code&gt; environment variable. The following table shows possible values.</source>
          <target state="translated">この変数は、イベントのターゲット宛先を制御します。 &lt;code&gt;GIT_TRACE2_EVENT&lt;/code&gt; 環境変数によって上書きされる場合があります。次の表に、可能な値を示します。</target>
        </trans-unit>
        <trans-unit id="b3073c2a2c3930628fae47eb515e2fe5729910f0" translate="yes" xml:space="preserve">
          <source>This variable controls the normal target destination. It may be overridden by the &lt;code&gt;GIT_TRACE2&lt;/code&gt; environment variable. The following table shows possible values.</source>
          <target state="translated">この変数は、通常のターゲット宛先を制御します。 &lt;code&gt;GIT_TRACE2&lt;/code&gt; 環境変数によって上書きされる場合があります。次の表に、可能な値を示します。</target>
        </trans-unit>
        <trans-unit id="ab644894061fa15fc115b6d355d07c2965277303" translate="yes" xml:space="preserve">
          <source>This variable controls the performance target destination. It may be overridden by the &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; environment variable. The following table shows possible values.</source>
          <target state="translated">この変数は、パフォーマンスターゲットの宛先を制御します。 &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; 環境変数によってオーバーライドされる場合があります。次の表に、可能な値を示します。</target>
        </trans-unit>
        <trans-unit id="53008d90e6aae985c2e7839a77d7b54894ce429e" translate="yes" xml:space="preserve">
          <source>This variable controls the sort ordering of branches when displayed by &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt;. Without the &quot;--sort=&amp;lt;value&amp;gt;&quot; option provided, the value of this variable will be used as the default. See &lt;a href=&quot;git-for-each-ref&quot;&gt;git-for-each-ref[1]&lt;/a&gt; field names for valid values.</source>
          <target state="translated">この変数は、&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;によって表示されるときのブランチのソート順を制御します。「--sort = &amp;lt;value&amp;gt;」オプションを指定しない場合、この変数の値がデフォルトとして使用されます。有効な値については、&lt;a href=&quot;git-for-each-ref&quot;&gt;git-for-each-ref [1]&lt;/a&gt;フィールド名をご覧ください。</target>
        </trans-unit>
        <trans-unit id="ea1c7eb75a360c1f9f69915dbc32e427ddfb7ced" translate="yes" xml:space="preserve">
          <source>This variable controls the sort ordering of tags when displayed by &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt;. Without the &quot;--sort=&amp;lt;value&amp;gt;&quot; option provided, the value of this variable will be used as the default.</source>
          <target state="translated">この変数は、&lt;a href=&quot;git-tag&quot;&gt;git-tag [1]&lt;/a&gt;によって表示されるときのタグのソート順を制御します。「--sort = &amp;lt;value&amp;gt;」オプションを指定しない場合、この変数の値がデフォルトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="c2680b6925a4a160ca8f3fee892cc23ec9be5f4f" translate="yes" xml:space="preserve">
          <source>This variable determines the default value for variables such as &lt;code&gt;color.diff&lt;/code&gt; and &lt;code&gt;color.grep&lt;/code&gt; that control the use of color per command family. Its scope will expand as more commands learn configuration to set a default for the &lt;code&gt;--color&lt;/code&gt; option. Set it to &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;never&lt;/code&gt; if you prefer Git commands not to use color unless enabled explicitly with some other configuration or the &lt;code&gt;--color&lt;/code&gt; option. Set it to &lt;code&gt;always&lt;/code&gt; if you want all output not intended for machine consumption to use color, to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt; (this is the default since Git 1.8.4) if you want such output to use color when written to the terminal.</source>
          <target state="translated">この変数は、コマンドファミリごとの色の使用を制御する &lt;code&gt;color.diff&lt;/code&gt; や &lt;code&gt;color.grep&lt;/code&gt; などの変数のデフォルト値を決定します。より多くのコマンドが &lt;code&gt;--color&lt;/code&gt; オプションのデフォルトを設定するための構成を学習するにつれて、その範囲は拡大します。他の構成または &lt;code&gt;--color&lt;/code&gt; オプションで明示的に有効にしない限り、Gitコマンドが色を使用しないようにする場合 &lt;code&gt;never&lt;/code&gt; 、これを &lt;code&gt;false&lt;/code&gt; または決して設定しないでください。マシンの消費を目的としないすべての出力で色を使用する場合は、 &lt;code&gt;always&lt;/code&gt; 出力に設定します。ターミナルに書き込むときに出力を色で使用する場合は、 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;auto&lt;/code&gt; （Git 1.8.4以降のデフォルト）に設定します。</target>
        </trans-unit>
        <trans-unit id="2eb6f1e33d90fc7fb4373fa1793932292fbc650d" translate="yes" xml:space="preserve">
          <source>This variable is the same as &lt;code&gt;transfer.hideRefs&lt;/code&gt;, but applies only to &lt;code&gt;receive-pack&lt;/code&gt; (and so affects pushes, but not fetches). An attempt to update or delete a hidden ref by &lt;code&gt;git push&lt;/code&gt; is rejected.</source>
          <target state="translated">この変数は &lt;code&gt;transfer.hideRefs&lt;/code&gt; と同じですが、 &lt;code&gt;receive-pack&lt;/code&gt; のみ適用されます（したがって、プッシュには影響しますが、フェッチには影響しません）。 &lt;code&gt;git push&lt;/code&gt; によって非表示の参照を更新または削除する試みは拒否されます。</target>
        </trans-unit>
        <trans-unit id="763a368531eb9d8bc40e93c6334e049f21620c45" translate="yes" xml:space="preserve">
          <source>This variable is the same as &lt;code&gt;transfer.hideRefs&lt;/code&gt;, but applies only to &lt;code&gt;upload-pack&lt;/code&gt; (and so affects only fetches, not pushes). An attempt to fetch a hidden ref by &lt;code&gt;git fetch&lt;/code&gt; will fail. See also &lt;code&gt;uploadpack.allowTipSHA1InWant&lt;/code&gt;.</source>
          <target state="translated">この変数は &lt;code&gt;transfer.hideRefs&lt;/code&gt; と同じですが、 &lt;code&gt;upload-pack&lt;/code&gt; にのみ適用されます（したがって、フェッチのみに影響し、プッシュには影響しません）。 &lt;code&gt;git fetch&lt;/code&gt; によって非表示の参照をフェッチしようとすると失敗します。 &lt;code&gt;uploadpack.allowTipSHA1InWant&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="75aa35a44ffd767e8a239dc01347d150ce1e39ed" translate="yes" xml:space="preserve">
          <source>This variable matters only when using persistent web environments that serve multiple requests using single gitweb instance, like mod_perl, FastCGI or Plackup.</source>
          <target state="translated">この変数が重要になるのは、mod_perl や FastCGI、Plackup のように、単一の gitweb インスタンスを使用して複数のリクエストに対応する持続的なウェブ環境を使用している場合のみです。</target>
        </trans-unit>
        <trans-unit id="c0526214b5c55d639fefd6a92d93b97ec2455930" translate="yes" xml:space="preserve">
          <source>This variable specifies a shell command through which the tar output generated by &lt;code&gt;git archive&lt;/code&gt; should be piped. The command is executed using the shell with the generated tar file on its standard input, and should produce the final output on its standard output. Any compression-level options will be passed to the command (e.g., &quot;-9&quot;). An output file with the same extension as &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; will be use this format if no other format is given.</source>
          <target state="translated">この変数は、 &lt;code&gt;git archive&lt;/code&gt; によって生成されたtar出力をパイプするシェルコマンドを指定します。コマンドは、標準入力に生成されたtarファイルを使用してシェルを使用して実行され、標準出力に最終出力を生成します。圧縮レベルのオプションがコマンドに渡されます（例： &quot;-9&quot;）。他の形式が指定されていない場合、 &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; と同じ拡張子を持つ出力ファイルはこの形式を使用します。</target>
        </trans-unit>
        <trans-unit id="99ffcf0d1fc58b3934082bac9786637cf3a8cdad" translate="yes" xml:space="preserve">
          <source>This view is similar to &lt;code&gt;shortlog&lt;/code&gt; view.</source>
          <target state="translated">このビューは、 &lt;code&gt;shortlog&lt;/code&gt; ビューに似ています。</target>
        </trans-unit>
        <trans-unit id="16ae6576174eeb48325f0bfa3042bcb20d29d417" translate="yes" xml:space="preserve">
          <source>This was not the case in the initial release of this feature in v2.13.0, which only matched the realpath version. Configuration that wants to be compatible with the initial release of this feature needs to either specify only the realpath version, or both versions.</source>
          <target state="translated">この機能の初期リリースである v2.13.0 では、realpath のバージョンにしか対応していませんでした。この機能の初期リリースとの互換性を望む設定は、realpath のバージョンのみを指定するか、両方のバージョンを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="7c8d457b197b5558b7abfe068bcd1974205f94ad" translate="yes" xml:space="preserve">
          <source>This was optional in prior versions of git, but now it is the default. You can use &lt;code&gt;--no-utf8&lt;/code&gt; to override this.</source>
          <target state="translated">これは以前のバージョンのgitではオプションでしたが、現在はデフォルトになっています。 &lt;code&gt;--no-utf8&lt;/code&gt; を使用してこれを上書きできます。</target>
        </trans-unit>
        <trans-unit id="314df942d006c94c85d3e8c8bfe0a0b8ef8308d1" translate="yes" xml:space="preserve">
          <source>This will again prompt you for a message describing the change, and then record a new version of the project.</source>
          <target state="translated">これにより、変更内容を説明するメッセージが再度表示され、プロジェクトの新しいバージョンが記録されます。</target>
        </trans-unit>
        <trans-unit id="53cca56aaa41c3093032e1d720cb620b22717e06" translate="yes" xml:space="preserve">
          <source>This will cache the result of running &quot;exif&quot; on each blob indefinitely. If you change the textconv config variable for a diff driver, Git will automatically invalidate the cache entries and re-run the textconv filter. If you want to invalidate the cache manually (e.g., because your version of &quot;exif&quot; was updated and now produces better output), you can remove the cache manually with &lt;code&gt;git update-ref -d refs/notes/textconv/jpg&lt;/code&gt; (where &quot;jpg&quot; is the name of the diff driver, as in the example above).</source>
          <target state="translated">これにより、各blobで「exif」を実行した結果が無期限にキャッシュされます。差分ドライバーのtextconv構成変数を変更すると、Gitは自動的にキャッシュエントリーを無効にし、textconvフィルターを再実行します。キャッシュを手動で無効にする場合（たとえば、「exif」のバージョンが更新され、出力が向上したため）、 &lt;code&gt;git update-ref -d refs/notes/textconv/jpg&lt;/code&gt; （where &quot; jpg &quot;は、上記の例のように、diffドライバーの名前です。</target>
        </trans-unit>
        <trans-unit id="3d17cc7dd2b4aac7e00ecd2628dbb99eefd074c7" translate="yes" xml:space="preserve">
          <source>This will cause Git to generate &lt;code&gt;Binary files differ&lt;/code&gt; (or a binary patch, if binary patches are enabled) instead of a regular diff.</source>
          <target state="translated">これにより、Git は通常の差分ではなく、 &lt;code&gt;Binary files differ&lt;/code&gt; （バイナリパッチが有効な場合はバイナリパッチ）を生成します。</target>
        </trans-unit>
        <trans-unit id="dac66330b2bd98fcf90352c4cbeba694c8f4feb3" translate="yes" xml:space="preserve">
          <source>This will check out the currently cached copy of &lt;code&gt;Makefile&lt;/code&gt; into the file &lt;code&gt;.merged-Makefile&lt;/code&gt;.</source>
          <target state="translated">これにより、現在キャッシュされている &lt;code&gt;Makefile&lt;/code&gt; のコピーがファイル &lt;code&gt;.merged-Makefile&lt;/code&gt; にチェックアウトされます。</target>
        </trans-unit>
        <trans-unit id="9acb73cd9d17d8ef0d5dfd6af35ea9d0a50c12ab" translate="yes" xml:space="preserve">
          <source>This will create a new commit which undoes the change in HEAD. You will be given a chance to edit the commit message for the new commit.</source>
          <target state="translated">これにより、HEADの変更を元に戻す新しいコミットが作成されます。新しいコミットのコミットメッセージを編集する機会が与えられます。</target>
        </trans-unit>
        <trans-unit id="85437cd96f5cff3dd194d542498fd954d1bf1e01" translate="yes" xml:space="preserve">
          <source>This will define a remote called &quot;origin&quot; in the resulting repository that lets you fetch and pull from the bundle. The $GIT_DIR/config file in R2 will have an entry like this:</source>
          <target state="translated">これにより、結果として得られるリポジトリに &quot;origin &quot;というリモートが定義され、バンドルをフェッチしたりプルしたりすることができるようになります。R2の$git_dir/configファイルには、このようなエントリがあります。</target>
        </trans-unit>
        <trans-unit id="2986121c6e711f05b2ed0ba772dedbd8c66503ff" translate="yes" xml:space="preserve">
          <source>This will error out if $REV is empty or not a valid revision.</source>
          <target state="translated">これは、$REVが空であるか、有効なリビジョンでない場合にエラーとなります。</target>
        </trans-unit>
        <trans-unit id="c8b7e8566771f37a03bc25eaec95675ffe82ba31" translate="yes" xml:space="preserve">
          <source>This will export the whole repository and import it into the existing empty repository. Except for reencoding commits that are not in UTF-8, it would be a one-to-one mirror.</source>
          <target state="translated">これはリポジトリ全体をエクスポートし、既存の空のリポジトリにインポートします。UTF-8ではないコミットを再エンコードする以外は、1対1のミラーになります。</target>
        </trans-unit>
        <trans-unit id="5f851e29f67384fe2f487309701055635453a02c" translate="yes" xml:space="preserve">
          <source>This will list what commits you must have in order to extract from the bundle and will error out if you do not have them.</source>
          <target state="translated">これは、バンドルから抽出するために必要なコミットをリストアップし、それを持っていない場合はエラーになります。</target>
        </trans-unit>
        <trans-unit id="7ed8616207d4b6e51bdcbe1e7b524863a0139782" translate="yes" xml:space="preserve">
          <source>This will open your editor with a list of steps to be taken to perform your rebase.</source>
          <target state="translated">これにより、リベースを実行するためのステップのリストがエディタに表示されます。</target>
        </trans-unit>
        <trans-unit id="e9e68cbb3d1c11da9ad7575ebecc630d58996f10" translate="yes" xml:space="preserve">
          <source>This will prompt you for a commit message. You&amp;rsquo;ve now stored the first version of your project in Git.</source>
          <target state="translated">これにより、コミットメッセージの入力が求められます。これで、プロジェクトの最初のバージョンがGitに保存されました。</target>
        </trans-unit>
        <trans-unit id="9229da0c83ee0b71f5a22085b5f3b7e07e9ec55a" translate="yes" xml:space="preserve">
          <source>This will remove each of your commits from mywork, temporarily saving them as patches (in a directory named &lt;code&gt;.git/rebase-apply&lt;/code&gt;), update mywork to point at the latest version of origin, then apply each of the saved patches to the new mywork. The result will look like:</source>
          <target state="translated">これにより、各コミットがmyworkから削除され、一時的にパッチとして（ &lt;code&gt;.git/rebase-apply&lt;/code&gt; という名前のディレクトリに）保存され、myworkが最新バージョンのoriginを指すように更新され、保存された各パッチが新しいmyworkに適用されます。 。結果は次のようになります。</target>
        </trans-unit>
        <trans-unit id="1c98be5284d00528a6b74a33ba778d044a767668" translate="yes" xml:space="preserve">
          <source>This will result in only b (a and c are cleared).</source>
          <target state="translated">これではb(aとcがクリアされている)だけになってしまいます。</target>
        </trans-unit>
        <trans-unit id="0385ed25689cd3e1167020ff6e8ba549d1603871" translate="yes" xml:space="preserve">
          <source>This will set the property &lt;code&gt;svn:keywords&lt;/code&gt; to &lt;code&gt;FreeBSD=%H&lt;/code&gt; for the file &lt;code&gt;devel/py-tipper/Makefile&lt;/code&gt;.</source>
          <target state="translated">これにより、ファイル &lt;code&gt;devel/py-tipper/Makefile&lt;/code&gt; のプロパティ &lt;code&gt;svn:keywords&lt;/code&gt; が &lt;code&gt;FreeBSD=%H&lt;/code&gt; れます。</target>
        </trans-unit>
        <trans-unit id="61383e31770f578e5ee86310440dccd09a4e5008" translate="yes" xml:space="preserve">
          <source>This will show &quot;refs/heads/master&quot; but also &quot;refs/remote/other-repo/master&quot;, if such references exists.</source>
          <target state="translated">これは、&quot;refs/heads/master &quot;だけでなく、&quot;refs/remote/other-repo/master &quot;も表示されます。</target>
        </trans-unit>
        <trans-unit id="23dd2de32c54566f1df1adf9f6794600102b9c2b" translate="yes" xml:space="preserve">
          <source>This will start to clean, and you must confirm one by one in order to delete items. Please note that this action is not as efficient as the above two actions.</source>
          <target state="translated">これでクリーン化が始まりますので、項目を削除するには一つ一つ確認する必要があります。このアクションは上記2つのアクションに比べて効率が悪いので注意してください。</target>
        </trans-unit>
        <trans-unit id="9b7bbd24afc1c6a470a80ef47d5171b33809ea28" translate="yes" xml:space="preserve">
          <source>This works for any of the supported update procedures (&lt;code&gt;--checkout&lt;/code&gt;, &lt;code&gt;--rebase&lt;/code&gt;, etc.). The only change is the source of the target SHA-1. For example, &lt;code&gt;submodule update --remote --merge&lt;/code&gt; will merge upstream submodule changes into the submodules, while &lt;code&gt;submodule update
--merge&lt;/code&gt; will merge superproject gitlink changes into the submodules.</source>
          <target state="translated">これは、サポートされているすべての更新手順（ &lt;code&gt;--checkout&lt;/code&gt; 、-- &lt;code&gt;--rebase&lt;/code&gt; など）で機能します。唯一の変更は、ターゲットSHA-1のソースです。たとえば、 &lt;code&gt;submodule update --remote --merge&lt;/code&gt; はアップストリームサブモジュールの変更をサブモジュールにマージし、 &lt;code&gt;submodule update --merge&lt;/code&gt; はスーパープロジェクトのgitlink変更をサブモジュールにマージします。</target>
        </trans-unit>
        <trans-unit id="5a2ee7840b76b59e3aede30738fb578b292bc5f3" translate="yes" xml:space="preserve">
          <source>This works similarly to &lt;code&gt;svn update&lt;/code&gt; or &lt;code&gt;git pull&lt;/code&gt; except that it preserves linear history with &lt;code&gt;git rebase&lt;/code&gt; instead of &lt;code&gt;git merge&lt;/code&gt; for ease of dcommitting with &lt;code&gt;git svn&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;svn update&lt;/code&gt; や &lt;code&gt;git pull&lt;/code&gt; と同様に機能しますが、 &lt;code&gt;git svn&lt;/code&gt; で簡単にコミットできるように、 &lt;code&gt;git merge&lt;/code&gt; ではなく &lt;code&gt;git rebase&lt;/code&gt; で線形履歴を保持します。</target>
        </trans-unit>
        <trans-unit id="5bc6c0e59c3e651570d66e12101e9a57040fd659" translate="yes" xml:space="preserve">
          <source>This would leave only one merge commit when your topic branch is finally ready and merged into the master branch. This merge would require you to resolve the conflict, introduced by the commits marked with &lt;code&gt;*&lt;/code&gt;. However, this conflict is often the same conflict you resolved when you created the test merge you blew away. &lt;code&gt;git rerere&lt;/code&gt; helps you resolve this final conflicted merge using the information from your earlier hand resolve.</source>
          <target state="translated">これにより、トピックブランチが最終的に準備され、マスターブランチにマージされるときに、マージコミットが1つだけ残ります。このマージでは、 &lt;code&gt;*&lt;/code&gt; でマークされたコミットによって引き起こされる競合を解決する必要があります。ただし、多くの場合、この競合は、吹き飛ばしたテストマージを作成したときに解決した競合と同じです。 &lt;code&gt;git rerere&lt;/code&gt; は、以前の手の解決からの情報を使用して、この最後の競合するマージを解決するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="dcd6f908de988995d9fff4cafd75d14bc0785c1a" translate="yes" xml:space="preserve">
          <source>This would leave the merge result in &lt;code&gt;hello.c~2&lt;/code&gt; file, along with conflict markers if there are conflicts. After verifying the merge result makes sense, you can tell Git what the final merge result for this file is by:</source>
          <target state="translated">これにより、 &lt;code&gt;hello.c~2&lt;/code&gt; ファイルにマージ結果が残り、競合がある場合は競合マーカーが残ります。マージ結果を確認したら、次のようにして、このファイルの最終的なマージ結果をGitに通知できます。</target>
        </trans-unit>
        <trans-unit id="cf5b7c750a4b16617dfd7cff20be48990a9d7985" translate="yes" xml:space="preserve">
          <source>This:</source>
          <target state="translated">This:</target>
        </trans-unit>
        <trans-unit id="ee3cacca7314105556d3050112f523980e59f973" translate="yes" xml:space="preserve">
          <source>Those snapshots aren&amp;rsquo;t necessarily all arranged in a single line from oldest to newest; instead, work may simultaneously proceed along parallel lines of development, called &lt;a href=&quot;#def_branch&quot;&gt;branches&lt;/a&gt;, which may merge and diverge.</source>
          <target state="translated">これらのスナップショットは、必ずしもすべてが古いものから新しいものへと1行に配置されているとは限りません。代わりに、&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;と呼ばれる並行した開発ラインに沿って作業が同時に進行し、マージと分岐が発生する場合があります。</target>
        </trans-unit>
        <trans-unit id="7a5a53a50d0fbac4f3a27d9d2d5853146557d940" translate="yes" xml:space="preserve">
          <source>Though not required, it&amp;rsquo;s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.</source>
          <target state="translated">必須ではありませんが、変更を要約した短い（50文字未満の）1行でコミットメッセージを開始し、その後に空白行を入れてから、さらに詳細な説明を書くことをお勧めします。コミットメッセージの最初の空白行までのテキストはコミットタイトルとして扱われ、そのタイトルはGit全体で使用されます。たとえば、&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt;はコミットをメールに変換し、件名のタイトルと本文の残りのコミットを使用します。</target>
        </trans-unit>
        <trans-unit id="fdd6ea0498f5dbe48e6926bc8c91e77146fa2184" translate="yes" xml:space="preserve">
          <source>Though, according to Wikipedia &lt;a href=&quot;#3&quot;&gt;[3]&lt;/a&gt;:</source>
          <target state="translated">しかし、ウィキペディアによれば&lt;a href=&quot;#3&quot;&gt;[3]&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="18c9e3ce5bbbf77af11ba41f4d7a7d9b7a1aaa55" translate="yes" xml:space="preserve">
          <source>Thread Events</source>
          <target state="translated">スレッドイベント</target>
        </trans-unit>
        <trans-unit id="8850eee2783cf53d0af71d524467316d7d06a850" translate="yes" xml:space="preserve">
          <source>Thread messages added to a thread-proc.</source>
          <target state="translated">スレッドメッセージがスレッドプロックに追加されました。</target>
        </trans-unit>
        <trans-unit id="1501e9d814d273ed34cc6b50f1b5e25add4ac049" translate="yes" xml:space="preserve">
          <source>Three other shorthands exist, particularly useful for merge commits, for naming a set that is formed by a commit and its parent commits.</source>
          <target state="translated">他にも3つの短縮形があります。特にマージコミットでは、コミットとその親コミットで形成されるセットの名前を付けるのに便利です。</target>
        </trans-unit>
        <trans-unit id="8e23a87c8354d34eb4b513798d76048267e22ae4" translate="yes" xml:space="preserve">
          <source>Three steps:</source>
          <target state="translated">3つのステップ。</target>
        </trans-unit>
        <trans-unit id="cf3d01be00b3333c6ca36b4d1bb0a1a1c357a43f" translate="yes" xml:space="preserve">
          <source>Throw-away integration</source>
          <target state="translated">スローアウェイ統合</target>
        </trans-unit>
        <trans-unit id="c4780f4837eebde8ca1de31df251ef05e2361eb2" translate="yes" xml:space="preserve">
          <source>Thunderbird</source>
          <target state="translated">Thunderbird</target>
        </trans-unit>
        <trans-unit id="d5e84648e0355ba1080675ff57a3c64a03a76a7c" translate="yes" xml:space="preserve">
          <source>Thunderbird in particular is known to be problematic. Thunderbird users may wish to visit this web page for more information: &lt;a href=&quot;http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email&quot;&gt;http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email&lt;/a&gt;</source>
          <target state="translated">特にThunderbirdには問題があることが知られています。Thunderbirdのユーザーは、詳細についてこのWebページにアクセスすることをお&lt;a href=&quot;http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email&quot;&gt;勧めし&lt;/a&gt;ます。http：//kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email</target>
        </trans-unit>
        <trans-unit id="da473e9b687406079cfbc2672fddb50595865b5d" translate="yes" xml:space="preserve">
          <source>Thus we see that this tree has one file in it. The SHA-1 hash is a reference to that file&amp;rsquo;s data:</source>
          <target state="translated">したがって、このツリーには1つのファイルがあることがわかります。SHA-1ハッシュは、そのファイルのデータへの参照です。</target>
        </trans-unit>
        <trans-unit id="309fb29079c2e5019b9d34cb235aee0452735a40" translate="yes" xml:space="preserve">
          <source>Thus you can, e.g., turn a library subdirectory into a repository of its own. Note the &lt;code&gt;--&lt;/code&gt; that separates &lt;code&gt;filter-branch&lt;/code&gt; options from revision options, and the &lt;code&gt;--all&lt;/code&gt; to rewrite all branches and tags.</source>
          <target state="translated">したがって、たとえば、ライブラリサブディレクトリを独自のリポジトリに変えることができます。 &lt;code&gt;filter-branch&lt;/code&gt; オプションとリビジョンオプションを分離する &lt;code&gt;--&lt;/code&gt; と、すべてのブランチとタグを書き換える &lt;code&gt;--all&lt;/code&gt; に注意してください。</target>
        </trans-unit>
        <trans-unit id="d35ca4f0ad7715e9f69a7f979c2424eb99273503" translate="yes" xml:space="preserve">
          <source>Thus, the following command:</source>
          <target state="translated">したがって、次のようなコマンドがあります。</target>
        </trans-unit>
        <trans-unit id="77cc1ec67e1af48d92e062ee397960be200bdf58" translate="yes" xml:space="preserve">
          <source>Thus, we can provide O(log N) lookup time for any number of packfiles.</source>
          <target state="translated">このようにして、我々は任意の数のpackfileに対してO(log N)のルックアップ時間を提供することができます。</target>
        </trans-unit>
        <trans-unit id="ae19d34e63a0724afdaaeabe3d0fe80af7f9e778" translate="yes" xml:space="preserve">
          <source>Time and date specified by the ISO 8601 standard, for example &lt;code&gt;2005-04-07T22:13:13&lt;/code&gt;. The parser accepts a space instead of the &lt;code&gt;T&lt;/code&gt; character as well.</source>
          <target state="translated">ISO 8601標準で指定された日時（例 &lt;code&gt;2005-04-07T22:13:13&lt;/code&gt; 。パーサーは、 &lt;code&gt;T&lt;/code&gt; 文字の代わりにスペースも受け入れます。</target>
        </trans-unit>
        <trans-unit id="0bac72478f018c225224e8417f521a2dad6209d3" translate="yes" xml:space="preserve">
          <source>Time zone values can be &quot;local&quot; (for local time zone that browser uses), &quot;utc&quot; (what gitweb uses when JavaScript or this feature is disabled), or numerical time zones in the form of &quot;+/-HHMM&quot;, such as &quot;+0200&quot;.</source>
          <target state="translated">タイムゾーンの値は、&quot;local&quot;(ブラウザが使用するローカルタイムゾーンの場合)、&quot;utc &quot;のいずれかになります。(JavaScript やこの機能が無効になっているときに gitweb が使用するもの)、あるいは &quot;+/HHMM&quot; のような形でタイムゾーンを数値化したもの、たとえば &quot;+0200&quot; のようなものです。</target>
        </trans-unit>
        <trans-unit id="396a560fd1658574279d941c34737eda5359f4fc" translate="yes" xml:space="preserve">
          <source>Timeout (in seconds) between the moment the connection is established and the client request is received (typically a rather low value, since that should be basically immediate).</source>
          <target state="translated">接続が確立されてからクライアントのリクエストを受信するまでのタイムアウト(秒単位)。</target>
        </trans-unit>
        <trans-unit id="0ae2f4dfeb0fa0aaf2833b3c271308d2190a4162" translate="yes" xml:space="preserve">
          <source>Timeout (in seconds) for specific client sub-requests. This includes the time it takes for the server to process the sub-request and the time spent waiting for the next client&amp;rsquo;s request.</source>
          <target state="translated">特定のクライアントサブリクエストのタイムアウト（秒単位）。これには、サーバーがサブリクエストを処理するのにかかる時間と、次のクライアントのリクエストを待つのに費やされる時間が含まれます。</target>
        </trans-unit>
        <trans-unit id="ad6b83abe0aada0e5e6aec8e7e7470429fd4ee37" translate="yes" xml:space="preserve">
          <source>Tips and tricks</source>
          <target state="translated">コツとコツ</target>
        </trans-unit>
        <trans-unit id="d7242682d2f91b131962f45ed3706e536d3cdcc6" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;#def_merge&quot;&gt;merge&lt;/a&gt; more than two &lt;a href=&quot;#def_branch&quot;&gt;branches&lt;/a&gt;.</source>
          <target state="translated">3 つ以上の&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;を&lt;a href=&quot;#def_merge&quot;&gt;マージ&lt;/a&gt;する。</target>
        </trans-unit>
        <trans-unit id="7c181af3380fe2a4df836df7796a5de6ef8d47c5" translate="yes" xml:space="preserve">
          <source>To access refs, it&amp;rsquo;s best not to look inside GIT_DIR directly. Instead use commands such as &lt;a href=&quot;git-rev-parse&quot;&gt;git-rev-parse[1]&lt;/a&gt; or &lt;a href=&quot;git-update-ref&quot;&gt;git-update-ref[1]&lt;/a&gt; which will handle refs correctly.</source>
          <target state="translated">refにアクセスするには、GIT_DIRの内部を直接調べないことをお勧めします。代わりに、&lt;a href=&quot;git-update-ref&quot;&gt;リファレンスを&lt;/a&gt;正しく処理&lt;a href=&quot;git-rev-parse&quot;&gt;するgit-rev-parse [1]&lt;/a&gt;やgit-update-ref [1]などのコマンドを使用してください。</target>
        </trans-unit>
        <trans-unit id="bdc5ec95e827bdeffd1f9aab0bef5dd1e05d0443" translate="yes" xml:space="preserve">
          <source>To achieve this, try to split your work into small steps from the very beginning. It is always easier to squash a few commits together than to split one big commit into several. Don&amp;rsquo;t be afraid of making too small or imperfect steps along the way. You can always go back later and edit the commits with &lt;code&gt;git rebase --interactive&lt;/code&gt; before you publish them. You can use &lt;code&gt;git stash push --keep-index&lt;/code&gt; to run the test suite independent of other uncommitted changes; see the EXAMPLES section of &lt;a href=&quot;git-stash&quot;&gt;git-stash[1]&lt;/a&gt;.</source>
          <target state="translated">これを達成するには、最初から作業を小さなステップに分割してみてください。 1つの大きなコミットをいくつかに分割するよりも、いくつかのコミットをつぶす方が常に簡単です。途中で小さすぎる、または不完全なステップを作成することを恐れないでください。コミットする前に、いつでも戻って &lt;code&gt;git rebase --interactive&lt;/code&gt; でコミットを編集できます。 &lt;code&gt;git stash push --keep-index&lt;/code&gt; を使用して、他のコミットされていない変更とは関係なくテストスイートを実行できます。&lt;a href=&quot;git-stash&quot;&gt;git-stash [1]の「使用&lt;/a&gt;例」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0fad63887775e60c970096082173b077cbcda459" translate="yes" xml:space="preserve">
          <source>To actually match only values with an exclamation mark, you have to</source>
          <target state="translated">感嘆符のついた値だけを実際にマッチさせるには、次のようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="0fea0d3a69770ac7053eba17165f8f811c0d830f" translate="yes" xml:space="preserve">
          <source>To add a new proxy, without altering any of the existing ones, use</source>
          <target state="translated">既存のプロキシを変更せずに新しいプロキシを追加するには</target>
        </trans-unit>
        <trans-unit id="6a37f3f129452efb4608e170beca8c23ff8dc189" translate="yes" xml:space="preserve">
          <source>To aid in debugging frontends fast-import ignores any line that begins with &lt;code&gt;#&lt;/code&gt; (ASCII pound/hash) up to and including the line ending &lt;code&gt;LF&lt;/code&gt;. A comment line may contain any sequence of bytes that does not contain an LF and therefore may be used to include any detailed debugging information that might be specific to the frontend and useful when inspecting a fast-import data stream.</source>
          <target state="translated">フロントエンドのデバッグを支援するために、高速インポートは &lt;code&gt;#&lt;/code&gt; （ASCIIポンド/ハッシュ）で始まり、 &lt;code&gt;LF&lt;/code&gt; で終わる行までを含むすべての行を無視します。コメント行には、LFを含まないバイトシーケンスを含めることができるため、フロントエンドに固有であり、高速インポートデータストリームを検査するときに役立つ詳細なデバッグ情報を含めるために使用できます。</target>
        </trans-unit>
        <trans-unit id="285359187a2aff04e4ea763b2f3e4bbaf641190b" translate="yes" xml:space="preserve">
          <source>To assist in this, Git also provides the tag object&amp;hellip;​</source>
          <target state="translated">これを支援するために、Gitはタグオブジェクトも提供しています&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="b0021f1eb05e23f63eb7ccc2f58c52546ee61585" translate="yes" xml:space="preserve">
          <source>To avoid deadlock, such frontends must completely consume any pending output from &lt;code&gt;progress&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;get-mark&lt;/code&gt;, and &lt;code&gt;cat-blob&lt;/code&gt; before performing writes to fast-import that might block.</source>
          <target state="translated">デッドロックを回避するために、このようなフロントエンドは、ブロックする可能性のある高速インポートへの書き込みを実行する前に、 &lt;code&gt;progress&lt;/code&gt; 、 &lt;code&gt;ls&lt;/code&gt; 、 &lt;code&gt;get-mark&lt;/code&gt; 、および &lt;code&gt;cat-blob&lt;/code&gt; からの保留中の出力を完全に消費する必要があります。</target>
        </trans-unit>
        <trans-unit id="75e1daad195d404dc835c71216234df4a4676d4e" translate="yes" xml:space="preserve">
          <source>To avoid deleting a shared index file that is still used, its modification time is updated to the current time every time a new split index based on the shared index file is either created or read from.</source>
          <target state="translated">まだ使用されている共有インデックスファイルを削除しないようにするために、共有インデックスファイルに基づく新しいスプリットインデックスが作成されるたびに、その変更時刻が現在の時刻に更新されます。</target>
        </trans-unit>
        <trans-unit id="0b95bb4f949904cf33707d2a81be23c345f8e5aa" translate="yes" xml:space="preserve">
          <source>To avoid false positives (e.g. when a patch has been removed, and an unrelated patch has been added between two iterations of the same patch series), the cost matrix is extended to allow for that, by adding fixed-cost entries for wholesale deletes/adds.</source>
          <target state="translated">誤検出(例えば、パッチが削除され、同じパッチシリーズの2回の繰り返しの間に関連のないパッチが追加された場合など)を避けるために、コストマトリックスは、ホールセール削除/追加のための固定コストエントリを追加することで、それを可能にするように拡張されています。</target>
        </trans-unit>
        <trans-unit id="0fd573776931ed5e5643654b60eb3896366ed973" translate="yes" xml:space="preserve">
          <source>To avoid interfering with other worktrees, it first enables the &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; setting and makes sure to set the &lt;code&gt;core.sparseCheckout&lt;/code&gt; setting in the worktree-specific config file.</source>
          <target state="translated">他のワークツリーとの干渉を回避するために、最初に &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; 設定を有効にし、ワークツリー固有の設定ファイルで &lt;code&gt;core.sparseCheckout&lt;/code&gt; 設定を必ず設定します。</target>
        </trans-unit>
        <trans-unit id="3c2082115575958e10a9c1afdaf9ab0c9127b12a" translate="yes" xml:space="preserve">
          <source>To avoid recording unrelated changes in the merge commit, &lt;code&gt;git pull&lt;/code&gt; and &lt;code&gt;git merge&lt;/code&gt; will also abort if there are any changes registered in the index relative to the &lt;code&gt;HEAD&lt;/code&gt; commit. (Special narrow exceptions to this rule may exist depending on which merge strategy is in use, but generally, the index must match HEAD.)</source>
          <target state="translated">マージコミットで無関係な変更が記録されないようにするため、 &lt;code&gt;HEAD&lt;/code&gt; コミットに関連するインデックスに変更が登録されている場合、 &lt;code&gt;git pull&lt;/code&gt; と &lt;code&gt;git merge&lt;/code&gt; も中止されます。（使用されているマージ戦略によっては、このルールに対する特別な狭い例外が存在する可能性がありますが、通常、インデックスはHEADと一致する必要があります。）</target>
        </trans-unit>
        <trans-unit id="3066556f3c40d15744968614a5fc8c1e23bf8a7b" translate="yes" xml:space="preserve">
          <source>To avoid typing long email addresses, point this to one or more email aliases files. You must also supply &lt;code&gt;sendemail.aliasFileType&lt;/code&gt;.</source>
          <target state="translated">長い電子メールアドレスを入力しないようにするには、1つ以上の電子メールエイリアスファイルを指定します。 &lt;code&gt;sendemail.aliasFileType&lt;/code&gt; も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="c4b87fbf313d264308ea989e0e3b9a4c3d776c25" translate="yes" xml:space="preserve">
          <source>To bootstrap the process, you can first create a bundle that does not have any basis. You can use a tag to remember up to what commit you last processed, in order to make it easy to later update the other repository with an incremental bundle:</source>
          <target state="translated">プロセスをブートストラップするには、まずベースを持たないバンドルを作成します。タグを使って最後に処理したコミットまで覚えておくことで、後からインクリメンタルバンドルで他のリポジトリを更新しやすくすることができます。</target>
        </trans-unit>
        <trans-unit id="9d8840568125195e79747db7654d577582e9ce27" translate="yes" xml:space="preserve">
          <source>To change which notes are shown by &lt;code&gt;git log&lt;/code&gt;, see the &quot;notes.displayRef&quot; configuration in &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;git log&lt;/code&gt; で表示されるメモを変更するには、&lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt;の「notes.displayRef」設定を参照してください。</target>
        </trans-unit>
        <trans-unit id="97883ec3271fcc02269394ee0880b3655a6f452f" translate="yes" xml:space="preserve">
          <source>To check out commit &lt;code&gt;HEAD~3&lt;/code&gt; for temporary inspection or experiment without creating a new branch:</source>
          <target state="translated">新しいブランチを作成せずに一時的な検査または実験のためにコミット &lt;code&gt;HEAD~3&lt;/code&gt; をチェックアウトするには：</target>
        </trans-unit>
        <trans-unit id="d144f3be27bf6711b21fc83fdbf3f1e8ff9fc321" translate="yes" xml:space="preserve">
          <source>To commit a tree you have instantiated with &lt;code&gt;git write-tree&lt;/code&gt;, you&amp;rsquo;d create a &quot;commit&quot; object that refers to that tree and the history behind it&amp;mdash;​most notably the &quot;parent&quot; commits that preceded it in history.</source>
          <target state="translated">&lt;code&gt;git write-tree&lt;/code&gt; でインスタンス化したツリーをコミットするには、そのツリーとその背後の履歴を参照する「コミット」オブジェクトを作成します。最も顕著なのは、履歴の前にあった「親」コミットです。</target>
        </trans-unit>
        <trans-unit id="05e44c536d85ee3801aa2c0d698cefa8d09c4c33" translate="yes" xml:space="preserve">
          <source>To completely remove a submodule, manually delete &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt;.</source>
          <target state="translated">サブモジュールを完全に削除するには、 &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; 手動で削除します。</target>
        </trans-unit>
        <trans-unit id="27c15a86c7e79c3805e163825e563ceb0da18b5a" translate="yes" xml:space="preserve">
          <source>To control which revisions to show, gitk supports most options applicable to the &lt;code&gt;git rev-list&lt;/code&gt; command. It also supports a few options applicable to the &lt;code&gt;git diff-*&lt;/code&gt; commands to control how the changes each commit introduces are shown. Finally, it supports some gitk-specific options.</source>
          <target state="translated">表示するリビジョンを制御するために、gitkは &lt;code&gt;git rev-list&lt;/code&gt; コマンドに適用できるほとんどのオプションをサポートしています。また、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドに適用可能ないくつかのオプションをサポートし、各コミットが導入する変更の表示方法を制御します。最後に、いくつかのgitk固有のオプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="777e371b82028c9765bc912013f44d79febb95a6" translate="yes" xml:space="preserve">
          <source>To cope with such a situation, after the inner &lt;code&gt;git bisect&lt;/code&gt; finds the next revision to test, the script can apply the patch before compiling, run the real test, and afterwards decide if the revision (possibly with the needed patch) passed the test and then rewind the tree to the pristine state. Finally the script should exit with the status of the real test to let the &lt;code&gt;git bisect run&lt;/code&gt; command loop determine the eventual outcome of the bisect session.</source>
          <target state="translated">このような状況に対処するために、内部 &lt;code&gt;git bisect&lt;/code&gt; がテストする次のリビジョンを見つけた後、スクリプトはコンパイルする前にパッチを適用し、実際のテストを実行し、その後、リビジョン（おそらく必要なパッチを含む）がテストに合格したかどうかを判断します。次に、ツリーを元の状態に戻します。最後に、スクリプトは実際のテストのステータスで終了し、 &lt;code&gt;git bisect run&lt;/code&gt; コマンドループがbisectセッションの最終的な結果を決定できるようにします。</target>
        </trans-unit>
        <trans-unit id="8674c1ca562e6ecc34e19d2429ea897e7602bd28" translate="yes" xml:space="preserve">
          <source>To create your own local live copy of such a &quot;raw&quot; Git repository, you&amp;rsquo;d first create your own subdirectory for the project, and then copy the raw repository contents into the &lt;code&gt;.git&lt;/code&gt; directory. For example, to create your own copy of the Git repository, you&amp;rsquo;d do the following</source>
          <target state="translated">そのような「生の」Gitリポジトリの独自のローカルライブコピーを作成するには、まずプロジェクト用に独自のサブディレクトリを作成し、次に生のリポジトリコンテンツを &lt;code&gt;.git&lt;/code&gt; ディレクトリにコピーします。たとえば、Gitリポジトリの独自のコピーを作成するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="495be7922d2a293092e6f366efd8045104e01478" translate="yes" xml:space="preserve">
          <source>To define a custom merge driver &lt;code&gt;filfre&lt;/code&gt;, add a section to your &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file (or &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; file) like this:</source>
          <target state="translated">カスタムマージドライバー &lt;code&gt;filfre&lt;/code&gt; を定義するには、次のように、セクションを &lt;code&gt;$GIT_DIR/config&lt;/code&gt; ファイル（または &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ファイル）に追加します。</target>
        </trans-unit>
        <trans-unit id="369d97c17e3edbb633e139fcbb4d6a1ea94c1201" translate="yes" xml:space="preserve">
          <source>To define an external diff driver &lt;code&gt;jcdiff&lt;/code&gt;, add a section to your &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file (or &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; file) like this:</source>
          <target state="translated">外部diffドライバー &lt;code&gt;jcdiff&lt;/code&gt; を定義するには、次のように &lt;code&gt;$GIT_DIR/config&lt;/code&gt; ファイル（または &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ファイル）にセクションを追加します。</target>
        </trans-unit>
        <trans-unit id="302897a013466c7a33ee45af87c508a98422abd4" translate="yes" xml:space="preserve">
          <source>To delete the entry for renames, do</source>
          <target state="translated">リネームのエントリを削除するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="f31f6b0ae1c80bea942e287ae0ab318c31ede1f4" translate="yes" xml:space="preserve">
          <source>To determine the location of the repository on disk, &lt;code&gt;git http-backend&lt;/code&gt; concatenates the environment variables PATH_INFO, which is set automatically by the web server, and GIT_PROJECT_ROOT, which must be set manually in the web server configuration. If GIT_PROJECT_ROOT is not set, &lt;code&gt;git http-backend&lt;/code&gt; reads PATH_TRANSLATED, which is also set automatically by the web server.</source>
          <target state="translated">ディスク上のリポジトリの場所を特定するために、 &lt;code&gt;git http-backend&lt;/code&gt; は、Webサーバーによって自動的に設定される環境変数PATH_INFOと、Webサーバー構成で手動で設定する必要があるGIT_PROJECT_ROOTを連結します。GIT_PROJECT_ROOTが設定されていない場合、 &lt;code&gt;git http-backend&lt;/code&gt; はPATH_TRANSLATEDを読み取ります。これもWebサーバーによって自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="b99f7180a07f9dbb13dde063c76c98dd5e2d7887" translate="yes" xml:space="preserve">
          <source>To disable features that accept parameters (are configurable), you need to set this element to empty list i.e. &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">パラメーターを受け入れる（構成可能）機能を無効にするには、この要素を空のリスト、つまり &lt;code&gt;[]&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="43f3c91605c9cb6d680c0ea9cf4c1bb2e77b4d9d" translate="yes" xml:space="preserve">
          <source>To disable interactive logins, displaying a greeting instead:</source>
          <target state="translated">インタラクティブログインを無効にするには、代わりに挨拶を表示します。</target>
        </trans-unit>
        <trans-unit id="2e78622c40c98dec97477af783b12ba20d12cc1a" translate="yes" xml:space="preserve">
          <source>To display the &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt; man page, use &lt;code&gt;git help git&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;git&quot;&gt;git [1]の&lt;/a&gt; manページを表示するには、 &lt;code&gt;git help git&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="fa4dddf358b16e56494c90923230fd025e6f958d" translate="yes" xml:space="preserve">
          <source>To do automatic tag object dereferencing, use the &quot;-d&quot; or &quot;--dereference&quot; flag, so you can do</source>
          <target state="translated">タグオブジェクトの自動参照を行うには、&quot;-d&quot; または &quot;--dereference&quot; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="dc05ce874d6baee1eae11d94d6fd56f1e0a6d0ed" translate="yes" xml:space="preserve">
          <source>To do the merge, do</source>
          <target state="translated">マージを行うには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="45ed93b09b65e276ec2ef33a1d9d7c3e10d14bfe" translate="yes" xml:space="preserve">
          <source>To do this, the current maintenance branch is copied to another branch named with the previous release version number (e.g. maint-X.Y.(Z-1) where X.Y.Z is the current release).</source>
          <target state="translated">これを行うには、現在のメンテナンスブランチを、前のリリースのバージョン番号を持つ別のブランチにコピーします (例:maint-X.Y.(Z-1)X.Y.Z は現在のリリースです)。</target>
        </trans-unit>
        <trans-unit id="380aa6a091a04ad8bbf89399d1982760e370374e" translate="yes" xml:space="preserve">
          <source>To drop a commit, replace the command &quot;pick&quot; with &quot;drop&quot;, or just delete the matching line.</source>
          <target state="translated">コミットを削除するには、コマンド &quot;pick&quot; を &quot;drop&quot; に置き換えるか、一致する行を削除します。</target>
        </trans-unit>
        <trans-unit id="e05b8854f808624747710c5e1d641ee4dabaf30c" translate="yes" xml:space="preserve">
          <source>To elaborate, &quot;reading&quot; means checking for file existence, reading file attributes or file content. The working directory version may be present or absent. If present, its content may match against the index version or not. Writing is not affected by this bit, content safety is still first priority. Note that Git &lt;code&gt;can&lt;/code&gt; update working directory file, that is marked skip-worktree, if it is safe to do so (i.e. working directory version matches index version)</source>
          <target state="translated">詳しく説明すると、「読み取り」とは、ファイルの存在を確認すること、ファイル属性またはファイルの内容を読み取ることを意味します。作業ディレクトリのバージョンが存在する場合と存在しない場合があります。存在する場合、そのコンテンツはインデックスバージョンと一致するかどうかにかかわらず、一致しない場合があります。書き込みはこのビットの影響を受けません。コンテンツの安全性が最優先事項です。Git は、安全に実行できる場合は、skip-worktreeとマークされている作業ディレクトリファイル &lt;code&gt;can&lt;/code&gt; 更新できることに注意してください（つまり、作業ディレクトリのバージョンはインデックスのバージョンと一致します）。</target>
        </trans-unit>
        <trans-unit id="64ecd7272d648bbcdba5e527a1a80e43cb0705c5" translate="yes" xml:space="preserve">
          <source>To enable &lt;code&gt;git archive --remote&lt;/code&gt; and disable &lt;code&gt;git fetch&lt;/code&gt; against a repository, have the following in the configuration file in the repository (that is the file &lt;code&gt;config&lt;/code&gt; next to &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;refs&lt;/code&gt; and &lt;code&gt;objects&lt;/code&gt;).</source>
          <target state="translated">有効にするには &lt;code&gt;git archive --remote&lt;/code&gt; し、無効に &lt;code&gt;git fetch&lt;/code&gt; （ファイルのあるリポジトリ内の構成ファイルに次のように持って、リポジトリに対して &lt;code&gt;config&lt;/code&gt; 次へ &lt;code&gt;HEAD&lt;/code&gt; 、 &lt;code&gt;refs&lt;/code&gt; および &lt;code&gt;objects&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="af7d8457fff28a2087e0f74bc51d0468026a9bff" translate="yes" xml:space="preserve">
          <source>To enable a target, set the corresponding environment variable or system or global config value to one of the following:</source>
          <target state="translated">ターゲットを有効にするには、対応する環境変数、システムまたはグローバル設定値を以下のいずれかに設定します。</target>
        </trans-unit>
        <trans-unit id="01e6eac26c3bbc386ab13c8cd6a9167801f24836" translate="yes" xml:space="preserve">
          <source>To enable anonymous read access but authenticated write access, require authorization for both the initial ref advertisement (which we detect as a push via the service parameter in the query string), and the receive-pack invocation itself:</source>
          <target state="translated">匿名の読み取りアクセスと認証された書き込みアクセスを可能にするには、最初の ref 広告 (クエリ文字列のサービス・パラメータを介したプッシュとして検出されます)と受信パックの呼び出し自体の両方に認証が必要です。</target>
        </trans-unit>
        <trans-unit id="9bda367b82f8881561a1128afb27f36988891c35" translate="yes" xml:space="preserve">
          <source>To enable anonymous read access but authenticated write access:</source>
          <target state="translated">匿名の読み取りアクセスを有効にするが、認証された書き込みアクセスを有効にする。</target>
        </trans-unit>
        <trans-unit id="050d5472dcd3f05f019f9a8129d0bb6d5e205df8" translate="yes" xml:space="preserve">
          <source>To enable blame, pickaxe search, and snapshot support (allowing &quot;tar.gz&quot; and &quot;zip&quot; snapshots), while allowing individual projects to turn them off, put the following in your GITWEB_CONFIG file:</source>
          <target state="translated">blame、pickaxe 検索、スナップショットのサポートを有効にし(&quot;tar.gz&quot; と &quot;zip&quot; スナップショットを許可)、個々のプロジェクトでそれらをオフにするには、GITWEB_CONFIG ファイルに以下のように記述します。</target>
        </trans-unit>
        <trans-unit id="fa7174e314ce7012972664ac5bcf82d4b390a6d5" translate="yes" xml:space="preserve">
          <source>To enable git-cvsserver access (which should generally have the &lt;code&gt;no-interactive-login&lt;/code&gt; example above as a prerequisite, as creating the git-shell-commands directory allows interactive logins):</source>
          <target state="translated">git-cvsserverアクセス​​を有効にするには（通常、上記の &lt;code&gt;no-interactive-login&lt;/code&gt; の例を前提条件として持つ必要があります。git -shell-commandsディレクトリを作成するとインタラクティブなログインが可能になるためです）：</target>
        </trans-unit>
        <trans-unit id="69aa803d2928631745bb26ea6d720a34de175dd7" translate="yes" xml:space="preserve">
          <source>To enable that additional nice feature, when a bisection is started and when some good commits are not ancestors of the bad commit, we first compute the merge bases between the bad and the good commits and we chose these merge bases as the first commits that will be checked out and tested.</source>
          <target state="translated">この追加機能を有効にするために、二分法が開始され、いくつかの良いコミットが悪いコミットの祖先ではない場合には、まず悪いコミットと良いコミットのマージベースを計算し、これらのマージベースを最初にチェックアウトしてテストするコミットとして選択します。</target>
        </trans-unit>
        <trans-unit id="ba44f6ad0a0230b79b3149aabc029b57fd7f22d9" translate="yes" xml:space="preserve">
          <source>To enable the sparse-checkout feature, run &lt;code&gt;git sparse-checkout init&lt;/code&gt; to initialize a simple sparse-checkout file and enable the &lt;code&gt;core.sparseCheckout&lt;/code&gt; config setting. Then, run &lt;code&gt;git sparse-checkout set&lt;/code&gt; to modify the patterns in the sparse-checkout file.</source>
          <target state="translated">スパースチェックアウト機能を有効にするには、 &lt;code&gt;git sparse-checkout init&lt;/code&gt; を実行してシンプルなスパースチェックアウトファイルを初期化し、 &lt;code&gt;core.sparseCheckout&lt;/code&gt; 構成設定を有効にします。次に、 &lt;code&gt;git sparse-checkout set&lt;/code&gt; を実行して、sparse-checkoutファイルのパターンを変更します。</target>
        </trans-unit>
        <trans-unit id="1318b73efc503f41a06d5d140c646ee25cf7e427" translate="yes" xml:space="preserve">
          <source>To exclude commits reachable from a commit, a prefix &lt;code&gt;^&lt;/code&gt; notation is used. E.g. &lt;code&gt;^r1 r2&lt;/code&gt; means commits reachable from &lt;code&gt;r2&lt;/code&gt; but exclude the ones reachable from &lt;code&gt;r1&lt;/code&gt; (i.e. &lt;code&gt;r1&lt;/code&gt; and its ancestors).</source>
          <target state="translated">コミットから到達可能なコミットを除外するには、プレフィックス &lt;code&gt;^&lt;/code&gt; 表記を使用します。たとえば、 &lt;code&gt;^r1 r2&lt;/code&gt; は、 &lt;code&gt;r2&lt;/code&gt; から到達可能なコミットを意味しますが、 &lt;code&gt;r1&lt;/code&gt; から到達可能なコミット（つまり、 &lt;code&gt;r1&lt;/code&gt; とその祖先）を除外します。</target>
        </trans-unit>
        <trans-unit id="a12d809ea9b20c2b561957b059e3fe943cb6e440" translate="yes" xml:space="preserve">
          <source>To find out how the result can be used, just read on in &lt;code&gt;cmd_cat_file()&lt;/code&gt;:</source>
          <target state="translated">結果がどのように使用されるかを知るには、 &lt;code&gt;cmd_cat_file()&lt;/code&gt; を読んでください：</target>
        </trans-unit>
        <trans-unit id="338cdf0c3d82152dc96e1eae9cd9922bf736e76c" translate="yes" xml:space="preserve">
          <source>To get a checkout with the Eclipse CVS client:</source>
          <target state="translated">EclipseのCVSクライアントでチェックアウトを取得するには</target>
        </trans-unit>
        <trans-unit id="976f859125db1311d8f82bb8df703ef2ad537fd0" translate="yes" xml:space="preserve">
          <source>To get a reminder of the currently used terms, use</source>
          <target state="translated">現在使用されている用語のリマインダーを取得するには</target>
        </trans-unit>
        <trans-unit id="68b714c59ff5898ff58433a2938d52aeb27df43e" translate="yes" xml:space="preserve">
          <source>To get started with gitweb, run &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt; from a Git repository. This would configure and start your web server, and run web browser pointing to gitweb.</source>
          <target state="translated">gitwebを使い始めるには、Gitリポジトリから&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]を&lt;/a&gt;実行します。これにより、Webサーバーが構成および起動され、gitwebを指すWebブラウザーが実行されます。</target>
        </trans-unit>
        <trans-unit id="bf62a03860b36b4b6a615592146052d88035a5f4" translate="yes" xml:space="preserve">
          <source>To get the &quot;base&quot; for the merge, look up the common parent of two commits:</source>
          <target state="translated">マージの &quot;ベース&quot; を取得するには、2 つのコミットの共通の親を調べます。</target>
        </trans-unit>
        <trans-unit id="ec1f343ca45777aa33e95b7222bfb7658aa36062" translate="yes" xml:space="preserve">
          <source>To get the feature/bugfix into an integration branch, simply merge it. If the topic has evolved further in the meantime, merge again. (Note that you do not necessarily have to merge it to the oldest integration branch first. For example, you can first merge a bugfix to &lt;code&gt;next&lt;/code&gt;, give it some testing time, and merge to &lt;code&gt;maint&lt;/code&gt; when you know it is stable.)</source>
          <target state="translated">機能/バグ修正を統合ブランチに入れるには、単にそれをマージします。その間にトピックがさらに進化した場合は、再度マージしてください。（必ずしも最初に最も古い統合ブランチにマージする必要はないことに注意してください。たとえば、最初にバグ修正を &lt;code&gt;next&lt;/code&gt; にマージし、テスト時間を与え、安定していることがわかったら &lt;code&gt;maint&lt;/code&gt; にマージできます。）</target>
        </trans-unit>
        <trans-unit id="60ae758b58fc83602f1720fb9cc2f0f4fb30b090" translate="yes" xml:space="preserve">
          <source>To give some hard figures, we used to have an average report-to-fix cycle of 142.6 hours (according to our somewhat weird bug-tracker which just measures wall-clock time). Since we moved to Git, we&amp;rsquo;ve lowered that to 16.2 hours. Primarily because we can stay on top of the bug fixing now, and because everyone&amp;rsquo;s jockeying to get to fix bugs (we&amp;rsquo;re quite proud of how lazy we are to let Git find the bugs for us). Each new release results in ~40% fewer bugs (almost certainly due to how we now feel about writing tests).</source>
          <target state="translated">いくつかの明確な数字を与えるために、私たちは142.6時間の平均のレポートから修正までのサイクルを使用していました（壁時計時間を測定するだけの私たちのやや奇妙なバグトラッカーによると）。 Gitに移行してから、それを16.2時間に下げました。主な理由は、今はバグ修正の最上位にいることができ、バグを修正するためにみんながジョッキーしているからです（Gitにバグを見つけてもらうのがどれほど面倒かを私たちはとても誇りに思っています）。新しいリリースごとに、バグが最大で40％減少します（ほとんどの場合、テストの作成についての感想が原因です）。</target>
        </trans-unit>
        <trans-unit id="cc855cb566c405d222e3a3236275bbad376833c3" translate="yes" xml:space="preserve">
          <source>To help with that, &lt;code&gt;range&lt;/code&gt; uses the &lt;code&gt;--dual-color&lt;/code&gt; mode by default. In this mode, the diff of diffs will retain the original diff colors, and prefix the lines with -/+ markers that have their &lt;strong&gt;background&lt;/strong&gt; red or green, to make it more obvious that they describe how the diff itself changed.</source>
          <target state="translated">これを支援するために、 &lt;code&gt;range&lt;/code&gt; はデフォルトで &lt;code&gt;--dual-color&lt;/code&gt; モードを使用します。このモードでは、diffのdiffは元のdiffの色を保持し、行の前に-/ +マーカーを付けて&lt;strong&gt;背景が&lt;/strong&gt;赤または緑になり、diff自体がどのように変更されたかを明確に示します。</target>
        </trans-unit>
        <trans-unit id="096c5d9029f3f58b2af501ec17fb5d42ac0f73fe" translate="yes" xml:space="preserve">
          <source>To illustrate the difference between &lt;code&gt;-S&amp;lt;regex&amp;gt; --pickaxe-regex&lt;/code&gt; and &lt;code&gt;-G&amp;lt;regex&amp;gt;&lt;/code&gt;, consider a commit with the following diff in the same file:</source>
          <target state="translated">&lt;code&gt;-S&amp;lt;regex&amp;gt; --pickaxe-regex&lt;/code&gt; と &lt;code&gt;-G&amp;lt;regex&amp;gt;&lt;/code&gt; の違いを説明するために、同じファイルで次のdiffを使用したコミットを検討してください。</target>
        </trans-unit>
        <trans-unit id="e67d6de21feaa90def83753eb253a23faea561fa" translate="yes" xml:space="preserve">
          <source>To illustrate, suppose you are in a situation where someone develops a &lt;code&gt;subsystem&lt;/code&gt; branch, and you are working on a &lt;code&gt;topic&lt;/code&gt; that is dependent on this &lt;code&gt;subsystem&lt;/code&gt;. You might end up with a history like the following:</source>
          <target state="translated">例として、誰かが &lt;code&gt;subsystem&lt;/code&gt; ブランチを開発し、この &lt;code&gt;subsystem&lt;/code&gt; 依存する &lt;code&gt;topic&lt;/code&gt; で作業している状況を想定します。次のような履歴になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a98d25733140cb4450fff563f123b0d4cafeb9f9" translate="yes" xml:space="preserve">
          <source>To interrupt the rebase (just like an &quot;edit&quot; command would do, but without cherry-picking any commit first), use the &quot;break&quot; command.</source>
          <target state="translated">リベースを中断するには (「edit」コマンドと同じように、最初にコミットを選択しないように)、「break」コマンドを使ってください。</target>
        </trans-unit>
        <trans-unit id="f6408dba3913ebdb903fdfce1d68f1906d3e56f0" translate="yes" xml:space="preserve">
          <source>To look at only non-zero stages, use &lt;code&gt;--unmerged&lt;/code&gt; flag:</source>
          <target state="translated">ゼロ以外のステージのみを表示するには、 &lt;code&gt;--unmerged&lt;/code&gt; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="5b273f729e50c3bb1996889c896c925cce764cd8" translate="yes" xml:space="preserve">
          <source>To make it readable, we can tell &lt;code&gt;git diff-files&lt;/code&gt; to output the differences as a patch, using the &lt;code&gt;-p&lt;/code&gt; flag:</source>
          <target state="translated">読みやすくするために、 &lt;code&gt;-p&lt;/code&gt; フラグを使用して、違いをパッチとして出力するように &lt;code&gt;git diff-files&lt;/code&gt; に指示できます。</target>
        </trans-unit>
        <trans-unit id="5411ef1231b1da2dbabaf49f4348af685832f2f7" translate="yes" xml:space="preserve">
          <source>To move the whole tree into a subdirectory, or remove it from there:</source>
          <target state="translated">ツリー全体をサブディレクトリに移動したり、そこから削除したりするには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="9fef1883cb2bb53007927c93e3d8f7431145efad" translate="yes" xml:space="preserve">
          <source>To perform a three-way merge, you start with the two commits you want to merge, find their closest common parent (a third commit), and compare the trees corresponding to these three commits.</source>
          <target state="translated">三者間マージを実行するには、まずマージしたい二つのコミットから始め、その共通の親 (三番目のコミット)を見つけ、その三つのコミットに対応するツリーを比較します。</target>
        </trans-unit>
        <trans-unit id="a35f3e8a10774da4c0b0f3f87118660d7ef9889e" translate="yes" xml:space="preserve">
          <source>To place a higher stage entry to the index, the path should first be removed by feeding a mode=0 entry for the path, and then feeding necessary input lines in the third format.</source>
          <target state="translated">より高いステージのエントリをインデックスに配置するためには、まずパスに対してmode=0のエントリを与えてパスを削除し、次に第3のフォーマットで必要な入力行を与えるべきである。</target>
        </trans-unit>
        <trans-unit id="26b0cbf1bc1090821ae6f59cac15f02ec7f562f8" translate="yes" xml:space="preserve">
          <source>To prepare for working on &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;, switch to it by updating the index and the files in the working tree, and by pointing &lt;code&gt;HEAD&lt;/code&gt; at the branch. Local modifications to the files in the working tree are kept, so that they can be committed to the &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; での作業を準備するには、作業ツリー内のインデックスとファイルを更新し、ブランチに &lt;code&gt;HEAD&lt;/code&gt; をポイントして、ブランチに切り替えます。作業ツリー内のファイルへのローカル変更は保持されるため、 &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; にコミットできます。</target>
        </trans-unit>
        <trans-unit id="13739c43ac679e23fc4c2d09478ac31e5293cb15" translate="yes" xml:space="preserve">
          <source>To pretend you have a file at path with mode and sha1, say:</source>
          <target state="translated">パスにモードと sha1 を持つファイルがあると仮定します。</target>
        </trans-unit>
        <trans-unit id="6785e6ba620455f331d4a09eb8363e2600eabf25" translate="yes" xml:space="preserve">
          <source>To prevent a $GIT_DIR/worktrees entry from being pruned (which can be useful in some situations, such as when the entry&amp;rsquo;s working tree is stored on a portable device), use the &lt;code&gt;git worktree lock&lt;/code&gt; command, which adds a file named &lt;code&gt;locked&lt;/code&gt; to the entry&amp;rsquo;s directory. The file contains the reason in plain text. For example, if a linked working tree&amp;rsquo;s &lt;code&gt;.git&lt;/code&gt; file points to &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; then a file named &lt;code&gt;/path/main/.git/worktrees/test-next/locked&lt;/code&gt; will prevent the &lt;code&gt;test-next&lt;/code&gt; entry from being pruned. See &lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout[5]&lt;/a&gt; for details.</source>
          <target state="translated">$ GIT_DIRを防ぐために/（そのようなエントリの作業ツリーをポータブルデバイスに保存されている場合など、いくつかの状況で便利です）剪定されてからのエントリ、使用worktrees &lt;code&gt;git worktree lock&lt;/code&gt; という名前のファイルを追加するコマンド、 &lt;code&gt;locked&lt;/code&gt; へのエントリのディレクトリ。ファイルには理由がプレーンテキストで含まれています。例えば、作業ツリーのリンク場合は &lt;code&gt;.git&lt;/code&gt; するために、ファイルのポイントを &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; その後、名前のファイル &lt;code&gt;/path/main/.git/worktrees/test-next/locked&lt;/code&gt; を防ぐことができます &lt;code&gt;test-next&lt;/code&gt; 剪定からの次のエントリー。詳細は&lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout [5]&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="46ac404b2baca4d3a659bb0594db0c41828389ed" translate="yes" xml:space="preserve">
          <source>To prevent these unnecessary merge conflicts, Git can be told to run a virtual check-out and check-in of all three stages of a file when resolving a three-way merge by setting the &lt;code&gt;merge.renormalize&lt;/code&gt; configuration variable. This prevents changes caused by check-in conversion from causing spurious merge conflicts when a converted file is merged with an unconverted file.</source>
          <target state="translated">これらの不要なマージの競合を防ぐために、 &lt;code&gt;merge.renormalize&lt;/code&gt; 構成変数を設定して、3者間マージを解決するときに、ファイルの3つのステージすべての仮想チェックアウトおよびチェックインを実行するようにGitに指示できます。これにより、変換されたファイルが未変換のファイルとマージされるときに、チェックイン変換によって引き起こされる変更が誤ったマージの競合を引き起こすのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="91d260766aee213709a415223ac206b93100d7d5" translate="yes" xml:space="preserve">
          <source>To prune objects not used by your repository or another that borrows from your repository via its &lt;code&gt;.git/objects/info/alternates&lt;/code&gt;:</source>
          <target state="translated">リポジトリで使用されていないオブジェクト、または &lt;code&gt;.git/objects/info/alternates&lt;/code&gt; を介してリポジトリから借用したオブジェクトをプルーニングするには：</target>
        </trans-unit>
        <trans-unit id="2f63f42b98c259e7fd0384dd68939f7fc302c5eb" translate="yes" xml:space="preserve">
          <source>To prune references as part of your normal workflow without needing to remember to run that, set &lt;code&gt;fetch.prune&lt;/code&gt; globally, or &lt;code&gt;remote.&amp;lt;name&amp;gt;.prune&lt;/code&gt; per-remote in the config. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">通常のワークフローの一部として、実行を覚えておく必要なく参照をプルーニングするには、 &lt;code&gt;fetch.prune&lt;/code&gt; をグローバルに設定するか、configでリモートごとに &lt;code&gt;remote.&amp;lt;name&amp;gt;.prune&lt;/code&gt; 設定します。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="68bfae2792009c9d944a67bd77b4854e1c8c4d3e" translate="yes" xml:space="preserve">
          <source>To put the loose objects into a pack, just run git repack:</source>
          <target state="translated">ゆるいものをパックに入れるには git repack を実行するだけです。</target>
        </trans-unit>
        <trans-unit id="8344caf5b982f9b0d4dc99f7ff5aa708ff0b3592" translate="yes" xml:space="preserve">
          <source>To query the value for a given key, do</source>
          <target state="translated">指定したキーの値を問い合わせるには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="6d7c1598e59e901d58d9b961c14fa449c82ef069" translate="yes" xml:space="preserve">
          <source>To reapply a series of changes from a &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt; to a different base, and reset the &lt;a href=&quot;#def_head&quot;&gt;head&lt;/a&gt; of that branch to the result.</source>
          <target state="translated">一連の変更を&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;から別のベースに再適用し、そのブランチの&lt;a href=&quot;#def_head&quot;&gt;ヘッド&lt;/a&gt;を結果にリセットします。</target>
        </trans-unit>
        <trans-unit id="25388a0bc929e9a0e4d2bb9d4d113e8444bb02a5" translate="yes" xml:space="preserve">
          <source>To remove a file from the index and from the working tree, use</source>
          <target state="translated">インデックスと作業ツリーからファイルを削除するには</target>
        </trans-unit>
        <trans-unit id="c7850646e909d85f101794190a2e6f7a699e3e90" translate="yes" xml:space="preserve">
          <source>To remove commits authored by &quot;Darl McBribe&quot; from the history:</source>
          <target state="translated">Darl McBribe &quot;が作成したコミットを履歴から削除します。</target>
        </trans-unit>
        <trans-unit id="65692943c43d72ea453917ea884fccf3994fb56e" translate="yes" xml:space="preserve">
          <source>To remove selection, prefix the input with &lt;code&gt;-&lt;/code&gt; like this:</source>
          <target state="translated">選択を削除するには、次のように入力の前に &lt;code&gt;-&lt;/code&gt; を付けます。</target>
        </trans-unit>
        <trans-unit id="9e91a512899aa79b93af123e6b1768a526248346" translate="yes" xml:space="preserve">
          <source>To repopulate the working directory with all files, use the &lt;code&gt;git sparse-checkout disable&lt;/code&gt; command.</source>
          <target state="translated">作業ディレクトリにすべてのファイルを再配置するには、 &lt;code&gt;git sparse-checkout disable&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="5c497720a7ab3ae3ef408305ef475289bc14a521" translate="yes" xml:space="preserve">
          <source>To reproduce the entire p4 history in Git, use the &lt;code&gt;@all&lt;/code&gt; modifier on the depot path:</source>
          <target state="translated">&lt;code&gt;@all&lt;/code&gt; でp4履歴全体を再現するには、デポパスで@all修飾子を使用します。</target>
        </trans-unit>
        <trans-unit id="d4609928d728916d052df2a3b481b65890e4b16e" translate="yes" xml:space="preserve">
          <source>To require authentication for both reads and writes, use a Location directive around the repository, or one of its parent directories:</source>
          <target state="translated">読み取りと書き込みの両方に認証を要求するには、リポジトリの周囲や親ディレクトリの一つに Location ディレクティブを使用します。</target>
        </trans-unit>
        <trans-unit id="10ebfb5ceb771c952eff2c39be3b852f1f654421" translate="yes" xml:space="preserve">
          <source>To require authentication for both reads and writes:</source>
          <target state="translated">読み取りと書き込みの両方に認証を要求する。</target>
        </trans-unit>
        <trans-unit id="847928f545abee25f9f8e4e2cc396a049af86735" translate="yes" xml:space="preserve">
          <source>To restore a file in the index to match the version in &lt;code&gt;HEAD&lt;/code&gt; (this is the same as using &lt;a href=&quot;git-reset&quot;&gt;git-reset[1]&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAD&lt;/code&gt; のバージョンと一致するようにインデックス内のファイルを復元するには（これは&lt;a href=&quot;git-reset&quot;&gt;git-reset [1]&lt;/a&gt;を使用するのと同じです）</target>
        </trans-unit>
        <trans-unit id="21366b05c441f538e6886570018737e901640e49" translate="yes" xml:space="preserve">
          <source>To restore all files in the current directory</source>
          <target state="translated">カレントディレクトリ内のすべてのファイルを復元するには</target>
        </trans-unit>
        <trans-unit id="0ab7e14988a23edeb341648ca7b63377b3dd49d2" translate="yes" xml:space="preserve">
          <source>To restrict rewriting to only part of the history, specify a revision range in addition to the new branch name. The new branch name will point to the top-most revision that a &lt;code&gt;git rev-list&lt;/code&gt; of this range will print.</source>
          <target state="translated">書き換えを履歴の一部のみに制限するには、新しいブランチ名に加えてリビジョン範囲を指定します。新しいブランチ名は、この範囲の &lt;code&gt;git rev-list&lt;/code&gt; が出力する一番上のリビジョンを指します。</target>
        </trans-unit>
        <trans-unit id="4d880d7fd779c619b85e62692eb083b5f59e932e" translate="yes" xml:space="preserve">
          <source>To rewrite commits E,F,G,H, use one of these:</source>
          <target state="translated">E,F,G,H のコミットを書き換えるには、これらのいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="47b66273feb1f496168989ebee433bebb314fc85" translate="yes" xml:space="preserve">
          <source>To rewrite only commits D,E,F,G,H, but leave A, B and C alone, use:</source>
          <target state="translated">D,E,F,G,H のコミットだけを書き換え、A,B,C のコミットだけを残しておくには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="8c31d9c011b7c86062de888fb92cc01426b53584" translate="yes" xml:space="preserve">
          <source>To rewrite the repository to look as if &lt;code&gt;foodir/&lt;/code&gt; had been its project root, and discard all other history:</source>
          <target state="translated">リポジトリを書き直して、 &lt;code&gt;foodir/&lt;/code&gt; がそのプロジェクトルートであるかのように見せ、他のすべての履歴を破棄します。</target>
        </trans-unit>
        <trans-unit id="7c02b2b350476c8c24e25173b62f35a8ad0c0ae3" translate="yes" xml:space="preserve">
          <source>To see how submodule support works, create four example repositories that can be used later as a submodule:</source>
          <target state="translated">サブモジュールのサポートがどのように機能するかを確認するために、後からサブモジュールとして使うことができる4つのリポジトリの例を作成します。</target>
        </trans-unit>
        <trans-unit id="700bc56e5656b835e5cd7fa2e5386957dfc66eac" translate="yes" xml:space="preserve">
          <source>To see the currently remaining suspects in &lt;code&gt;gitk&lt;/code&gt;, issue the following command during the bisection process (the subcommand &lt;code&gt;view&lt;/code&gt; can be used as an alternative to &lt;code&gt;visualize&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;gitk&lt;/code&gt; に現在残っている容疑者を表示するには、二分割プロセス中に次のコマンドを発行します（サブコマンド &lt;code&gt;view&lt;/code&gt; を &lt;code&gt;visualize&lt;/code&gt; 代わりに使用できます）。</target>
        </trans-unit>
        <trans-unit id="faa509deef7fcd4d518cc2cd2e577046b7eb747b" translate="yes" xml:space="preserve">
          <source>To see whether it has already been merged into the test or release branches, use:</source>
          <target state="translated">すでにテストブランチやリリースブランチにマージされているかどうかを確認するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="1e15ca1368deb202f467e491af7bfdb38f930af4" translate="yes" xml:space="preserve">
          <source>To serve gitweb at the same url, use a ScriptAliasMatch to only those URLs that &lt;code&gt;git http-backend&lt;/code&gt; can handle, and forward the rest to gitweb:</source>
          <target state="translated">同じURLでgitwebを提供するには、githttp &lt;code&gt;git http-backend&lt;/code&gt; が処理できるURLのみにScriptAliasMatchを使用し、残りをgitwebに転送します。</target>
        </trans-unit>
        <trans-unit id="3b5c2b799f6b39d60aa882699fc88e3eb3a77175" translate="yes" xml:space="preserve">
          <source>To serve multiple repositories from different &lt;a href=&quot;gitnamespaces&quot;&gt;gitnamespaces[7]&lt;/a&gt; in a single repository:</source>
          <target state="translated">1つのリポジトリで異なる&lt;a href=&quot;gitnamespaces&quot;&gt;gitnamespaces [7]の&lt;/a&gt;複数のリポジトリを提供するには：</target>
        </trans-unit>
        <trans-unit id="59fa97f902b7761eca14600ff37aff1758dec6bd" translate="yes" xml:space="preserve">
          <source>To set a commit (which typically is at the tip of another history) to be the parent of the current initial commit, in order to paste the other history behind the current history:</source>
          <target state="translated">現在の履歴の後ろにある他の履歴を貼り付けるために、現在の最初のコミットの親となるコミット(通常は他の履歴の先端にある)を設定します。</target>
        </trans-unit>
        <trans-unit id="d091c25539483b5c5b3db274eae656a5f768704a" translate="yes" xml:space="preserve">
          <source>To set the date used in future tag objects, set the environment variable GIT_COMMITTER_DATE (see the later discussion of possible values; the most common form is &quot;YYYY-MM-DD HH:MM&quot;).</source>
          <target state="translated">将来のタグオブジェクトで使用される日付を設定するには、環境変数GIT_COMMITTER_DATEを設定します(可能な値については後述します;最も一般的な形式は &quot;YYYY-MM-DD HH:MM &quot;です)。</target>
        </trans-unit>
        <trans-unit id="0de4847876d8ab04ebb463613f39507d60c3b1a3" translate="yes" xml:space="preserve">
          <source>To set this up, first create your work tree by cloning Linus&amp;rsquo;s public tree:</source>
          <target state="translated">これを設定するには、まずLinusのパブリックツリーを複製してワークツリーを作成します。</target>
        </trans-unit>
        <trans-unit id="6fdb47a7575f286ad7a6b8b651d8470ef2c51c01" translate="yes" xml:space="preserve">
          <source>To set up &lt;code&gt;git daemon&lt;/code&gt; as a regular, non-inetd service that handles repositories for multiple virtual hosts based on their IP addresses, start the daemon like this:</source>
          <target state="translated">IPアドレスに基づいて複数の仮想ホストのリポジトリを処理する、inetd以外の通常のサービスとして &lt;code&gt;git daemon&lt;/code&gt; を設定するには、次のようにデーモンを起動します。</target>
        </trans-unit>
        <trans-unit id="cd4e85b93c0b5a71d973a240463742c429d6ce10" translate="yes" xml:space="preserve">
          <source>To set up &lt;code&gt;git daemon&lt;/code&gt; as an inetd service that handles any repository under the whitelisted set of directories, /pub/foo and /pub/bar, place an entry like the following into /etc/inetd all on one line:</source>
          <target state="translated">ホワイトリストに登録された一連のディレクトリ/ pub / fooおよび/ pub / barの下にあるリポジトリを処理するinetdサービスとして &lt;code&gt;git daemon&lt;/code&gt; を設定するには、次のようなエントリを/ etc / inetdにすべて1行で配置します。</target>
        </trans-unit>
        <trans-unit id="d85d4c6ac447e3ea7881a95ee3354b641502c913" translate="yes" xml:space="preserve">
          <source>To set up &lt;code&gt;git daemon&lt;/code&gt; as an inetd service that handles repositories for different virtual hosts, &lt;code&gt;www.example.com&lt;/code&gt; and &lt;code&gt;www.example.org&lt;/code&gt;, place an entry like the following into &lt;code&gt;/etc/inetd&lt;/code&gt; all on one line:</source>
          <target state="translated">&lt;code&gt;git daemon&lt;/code&gt; を、異なる仮想ホスト &lt;code&gt;www.example.com&lt;/code&gt; と &lt;code&gt;www.example.org&lt;/code&gt; のリポジトリを処理するinetdサービスとして設定するには、次のようなエントリを &lt;code&gt;/etc/inetd&lt;/code&gt; にすべて1行で配置します。</target>
        </trans-unit>
        <trans-unit id="6d1dfa06a0b2e0253dac9a23d3e763ff2be4729c" translate="yes" xml:space="preserve">
          <source>To shelve changes instead of submitting, use &lt;code&gt;--shelve&lt;/code&gt; and &lt;code&gt;--update-shelve&lt;/code&gt;:</source>
          <target state="translated">送信する代わりに変更を &lt;code&gt;--shelve&lt;/code&gt; するには、 &lt;code&gt;--update-shelve&lt;/code&gt; shelveおよび--update- shelveを使用します。</target>
        </trans-unit>
        <trans-unit id="b19251adc869dd31b98316a2df3ca3e146f58f68" translate="yes" xml:space="preserve">
          <source>To show all references called &quot;master&quot;, whether tags or heads or anything else, and regardless of how deep in the reference naming hierarchy they are, use:</source>
          <target state="translated">タグでもヘッドでも他のものでも、また、それらが参照名付けの階層の中でどれだけ深い位置にあるかに関係なく、「マスター」と呼ばれるすべての参照を表示するには、使用します。</target>
        </trans-unit>
        <trans-unit id="51ec81ccf2337a76aefa897308cd08d96e515614" translate="yes" xml:space="preserve">
          <source>To show only tags, or only proper branch heads, use &quot;--tags&quot; and/or &quot;--heads&quot; respectively (using both means that it shows tags and heads, but not other random references under the refs/ subdirectory).</source>
          <target state="translated">タグのみを表示したり、適切なブランチの先頭のみを表示したりするには、それぞれ &quot;--tags&quot; や &quot;--heads&quot; を使用します (両方を使用すると、タグと先頭を表示しますが、refs/サブディレクトリの下にある他のランダムな参照は表示しません)。</target>
        </trans-unit>
        <trans-unit id="864f9f1ee17e37f4b3823291b8524eebd5879fc4" translate="yes" xml:space="preserve">
          <source>To show that as an example, let&amp;rsquo;s go back to the git-tutorial repository we used earlier, and create a branch in it. You do that by simply just saying that you want to check out a new branch:</source>
          <target state="translated">例としてそれを示すために、前に使用したgit-tutorialリポジトリに戻り、ブランチを作成します。新しいブランチをチェックアウトしたいというだけで、それを行います。</target>
        </trans-unit>
        <trans-unit id="acab411fa1b0a4e2f72e42b537e21a4bc08bf613" translate="yes" xml:space="preserve">
          <source>To simplify the discussion we will suppose that the untestable area is a simple string of commits and that it was created by a breakage introduced by one commit (let&amp;rsquo;s call it BBC for bisect breaking commit) and later fixed by another one (let&amp;rsquo;s call it BFC for bisect fixing commit).</source>
          <target state="translated">議論を簡単にするために、テスト不可能な領域はコミットの単純な文字列であり、1つのコミットによって導入された破損によって作成され（2分割ブレークコミットの場合はBBCとしましょう）、後で別のコミットによって修正される（BFCとしましょう）二等分修正コミット）。</target>
        </trans-unit>
        <trans-unit id="975e3a9279c8287bca9f664bbcc61fee7baa93ca" translate="yes" xml:space="preserve">
          <source>To specify a branch other than the current one, use:</source>
          <target state="translated">現在のブランチ以外のブランチを指定するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="b6b6e95c2c1acd4004bc280690d73f7c9df3e3b0" translate="yes" xml:space="preserve">
          <source>To specify a namespace, set the &lt;code&gt;GIT_NAMESPACE&lt;/code&gt; environment variable to the namespace. For each ref namespace, Git stores the corresponding refs in a directory under &lt;code&gt;refs/namespaces/&lt;/code&gt;. For example, &lt;code&gt;GIT_NAMESPACE=foo&lt;/code&gt; will store refs under &lt;code&gt;refs/namespaces/foo/&lt;/code&gt;. You can also specify namespaces via the &lt;code&gt;--namespace&lt;/code&gt; option to &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt;.</source>
          <target state="translated">名前空間を指定するには、 &lt;code&gt;GIT_NAMESPACE&lt;/code&gt; 環境変数を名前空間に設定します。各ref名前空間について、Gitは対応するrefを &lt;code&gt;refs/namespaces/&lt;/code&gt; 下のディレクトリに保存します。たとえば、 &lt;code&gt;GIT_NAMESPACE=foo&lt;/code&gt; は &lt;code&gt;refs/namespaces/foo/&lt;/code&gt; 下に参照を格納します。&lt;a href=&quot;git&quot;&gt;git [1]の&lt;/a&gt; &lt;code&gt;--namespace&lt;/code&gt; オプションを使用して名前空間を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="8d8e0463dddb070b083bcb1d31f0cd304bcae1a2" translate="yes" xml:space="preserve">
          <source>To specify a single commit or a range of commits, use:</source>
          <target state="translated">単一のコミットまたはコミットの範囲を指定するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="b6bdd73c5af990a9c308cb3582e6683a673000a9" translate="yes" xml:space="preserve">
          <source>To stop tracking a file that is currently tracked, use &lt;code&gt;git rm --cached&lt;/code&gt;.</source>
          <target state="translated">現在追跡されているファイルの追跡を停止するには、 &lt;code&gt;git rm --cached&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5aabd990937e7026d6c235ccca8da7a1bd54429f" translate="yes" xml:space="preserve">
          <source>To submit all changes that are in the current Git branch but not in the &lt;code&gt;p4/master&lt;/code&gt; branch, use:</source>
          <target state="translated">現在のGitブランチにあり、 &lt;code&gt;p4/master&lt;/code&gt; ブランチにはないすべての変更を送信するには、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="4d37523ff8334f7ae27e64b17d4088a430f024d8" translate="yes" xml:space="preserve">
          <source>To submit patches using GMail&amp;rsquo;s IMAP interface, first, edit your ~/.gitconfig to specify your account settings:</source>
          <target state="translated">GMailのIMAPインターフェースを使用してパッチを送信するには、まず〜/ .gitconfigを編集してアカウント設定を指定します：</target>
        </trans-unit>
        <trans-unit id="3829362b0206f78fb7e35755e5364f47036b822a" translate="yes" xml:space="preserve">
          <source>To support virtual hosting, an interpolated path template can be used to dynamically construct alternate paths. The template supports %H for the target hostname as supplied by the client but converted to all lowercase, %CH for the canonical hostname, %IP for the server&amp;rsquo;s IP address, %P for the port number, and %D for the absolute path of the named repository. After interpolation, the path is validated against the directory whitelist.</source>
          <target state="translated">仮想ホスティングをサポートするために、補間パステンプレートを使用して、代替パスを動的に構築できます。テンプレートは、クライアントから提供されたターゲットホスト名の％Hをサポートしますが、すべて小文字に変換され、％CHは正規のホスト名、％IPはサーバーのIPアドレス、％Pはポート番号、％Dは絶対パスです。名前付きリポジトリ。補間後、パスはディレクトリのホワイトリストに対して検証されます。</target>
        </trans-unit>
        <trans-unit id="5c5bebcfb262219afa24ad57e1be9ff8017de145" translate="yes" xml:space="preserve">
          <source>To switch back to the previous branch before we switched to mytopic (i.e. &quot;master&quot; branch):</source>
          <target state="translated">mytopicに切り替える前のブランチ(つまり「master」ブランチ)に戻る。</target>
        </trans-unit>
        <trans-unit id="f604bfa9fc2a5e3a8b43aed4c26f0a58bfbd1e14" translate="yes" xml:space="preserve">
          <source>To tell Git that yes, you really do realize that certain files no longer exist, or that new files should be added, you should use the &lt;code&gt;--remove&lt;/code&gt; and &lt;code&gt;--add&lt;/code&gt; flags respectively.</source>
          <target state="translated">Gitに「はい」と伝えるには、特定のファイルが存在しないこと、または新しいファイルを追加する必要があることを実際に認識しているため、それぞれ &lt;code&gt;--remove&lt;/code&gt; フラグと &lt;code&gt;--add&lt;/code&gt; フラグを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f3c508cb95e621506ae6e931b2fdadcaba14a047" translate="yes" xml:space="preserve">
          <source>To test the interaction of several topics, merge them into a throw-away branch. You must never base any work on such a branch!</source>
          <target state="translated">いくつかのトピックの相互作用をテストするには、それらを投げ出しブランチにマージします。このようなブランチをベースにした作業は絶対に行ってはいけません!</target>
        </trans-unit>
        <trans-unit id="ded44bb687bc8a448accbaa8cf09bc1b10b3ff71" translate="yes" xml:space="preserve">
          <source>To that end, it first finds pairs of commits from both commit ranges that correspond with each other. Two commits are said to correspond when the diff between their patches (i.e. the author information, the commit message and the commit diff) is reasonably small compared to the patches' size. See ``Algorithm`` below for details.</source>
          <target state="translated">そのために、まず、両方のコミット範囲から、互いに対応するコミットのペアを見つけます。2つのコミットのパッチ間の差分(すなわち、作者情報、コミットメッセージ、コミット差分)がパッチのサイズに比べて合理的に小さい場合、2つのコミットは対応していると言われます。詳細は以下の ``アルゴリズム`` を参照してください。</target>
        </trans-unit>
        <trans-unit id="28b9a65cbb97d3af18835efd06d4d171278e0508" translate="yes" xml:space="preserve">
          <source>To throw away part of the development, i.e. to assign the &lt;a href=&quot;#def_head&quot;&gt;head&lt;/a&gt; to an earlier &lt;a href=&quot;#def_revision&quot;&gt;revision&lt;/a&gt;.</source>
          <target state="translated">開発の一部を破棄する、つまり、&lt;a href=&quot;#def_head&quot;&gt;ヘッド&lt;/a&gt;を以前の&lt;a href=&quot;#def_revision&quot;&gt;リビジョン&lt;/a&gt;に割り当てる。</target>
        </trans-unit>
        <trans-unit id="f2857b34f71a88c7afeb725363e4097e2e44ff45" translate="yes" xml:space="preserve">
          <source>To top it all off, even when users finally find working commands, they naturally want to share them. But they may be unaware that their repo didn&amp;rsquo;t have some special cases that someone else&amp;rsquo;s does. So, when someone else with a different repository runs the same commands, they get hit by the problems above. Or, the user just runs commands that really were vetted for special cases, but they run it on a different OS where it doesn&amp;rsquo;t work, as noted above.</source>
          <target state="translated">さらに、ユーザーが最終的に機能するコマンドを見つけたときでも、当然それらを共有したいと思っています。しかし、彼らは自分のリポジトリに他の誰かが行うような特別なケースがなかったことに気づいていないかもしれません。したがって、別のリポジトリを持つ他の誰かが同じコマンドを実行すると、上記の問題が発生します。または、ユーザーは実際には特別なケースで精査されたコマンドを実行するだけですが、上記のように、機能しない別のOSで実行します。</target>
        </trans-unit>
        <trans-unit id="c4d2ca21938c992db0b3b75cacfc935366e6629e" translate="yes" xml:space="preserve">
          <source>To update and refresh only the files already checked out</source>
          <target state="translated">既にチェックアウトされているファイルのみを更新・更新するには</target>
        </trans-unit>
        <trans-unit id="a8c26a487a2f6627cb1ef2fcc7d8934daa7b62d0" translate="yes" xml:space="preserve">
          <source>To update and refresh only the files already checked out:</source>
          <target state="translated">既にチェックアウトされているファイルだけを更新して更新する。</target>
        </trans-unit>
        <trans-unit id="ec65c1043e980aa5b1f1a444793e6e405a4b07fd" translate="yes" xml:space="preserve">
          <source>To update the index with the contents of a new or modified file, use</source>
          <target state="translated">新しいファイルや変更されたファイルの内容でインデックスを更新するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="693fe77a3dea0f3b3cf2c4a884d12237d7043db5" translate="yes" xml:space="preserve">
          <source>To update the resulting mine.git repository, you can fetch or pull after replacing the bundle stored at /home/me/tmp/file.bundle with incremental updates.</source>
          <target state="translated">結果の mine.git リポジトリを更新するには、/home/me/tmp/file.bundle に保存されている bundle をインクリメンタルアップデートで置き換えた後に fetch または pull を実行します。</target>
        </trans-unit>
        <trans-unit id="7804c7379482ba8df4ffa8604001ea71fae1937a" translate="yes" xml:space="preserve">
          <source>To use &quot;old&quot; and &quot;new&quot; instead of &quot;good&quot; and bad, you must run &lt;code&gt;git
bisect start&lt;/code&gt; without commits as argument and then run the following commands to add the commits:</source>
          <target state="translated">「良い」と「悪い」の代わりに「古い」と「新しい」を使用 &lt;code&gt;git bisect start&lt;/code&gt; には、引数としてコミットなしでgit bisect startを実行し、次のコマンドを実行してコミットを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="288cf0a04f95ab8d9b3cedc9a80bcb75e1eb91a6" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;git send-email&lt;/code&gt; to send your patches through the GMail SMTP server, edit ~/.gitconfig to specify your account settings:</source>
          <target state="translated">&lt;code&gt;git send-email&lt;/code&gt; を使用してGMail SMTPサーバー経由でパッチを送信するには、〜/ .gitconfigを編集してアカウント設定を指定します。</target>
        </trans-unit>
        <trans-unit id="b24b5140a04c50c5ab1f6a8bf4b67a65e4b08446" translate="yes" xml:space="preserve">
          <source>To use a helper, you must first select one to use. Git currently includes the following helpers:</source>
          <target state="translated">ヘルパーを使用するには、まず使用するヘルパーを選択しなければなりません。Git には現在、以下のヘルパーが含まれています。</target>
        </trans-unit>
        <trans-unit id="00e4f18d69f51ffe1eea42af728cb3d7bb0059ec" translate="yes" xml:space="preserve">
          <source>To use the tool, imap.folder and either imap.tunnel or imap.host must be set to appropriate values.</source>
          <target state="translated">このツールを使用するには、imap.folder と imap.tunnel または imap.host を適切な値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8b51a494019812910be0a147154b59e9ef1b84fa" translate="yes" xml:space="preserve">
          <source>To use this mode effectively, you have to make sure &lt;code&gt;all&lt;/code&gt; the branches you would push out are ready to be pushed out before running &lt;code&gt;git push&lt;/code&gt;, as the whole point of this mode is to allow you to push all of the branches in one go. If you usually finish work on only one branch and push out the result, while other branches are unfinished, this mode is not for you. Also this mode is not suitable for pushing into a shared central repository, as other people may add new branches there, or update the tip of existing branches outside your control.</source>
          <target state="translated">効果的にこのモードを使用するには、確認する必要があり &lt;code&gt;all&lt;/code&gt; あなたが実行する前に押し出される準備ができている押し出すでしょう枝 &lt;code&gt;git push&lt;/code&gt; このモードの全体のポイントは、あなたが一度に枝の全てをプッシュできるようにすることであるように、。通常、1つのブランチのみで作業を完了して結果をプッシュアウトし、他のブランチは未完了である場合、このモードは適していません。また、他の人が新しいブランチをそこに追加したり、コントロール外の既存のブランチのチップを更新したりする可能性があるため、このモードは共有の中央リポジトリにプッシュするのには適していません。</target>
        </trans-unit>
        <trans-unit id="0db2ead5af506998515a70d6693b9cc78c43968a" translate="yes" xml:space="preserve">
          <source>To verify that &lt;code&gt;master&lt;/code&gt; is indeed a superset of &lt;code&gt;maint&lt;/code&gt;, use git log:</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; が本当に &lt;code&gt;maint&lt;/code&gt; のスーパーセットであることを確認するには、git logを使用します。</target>
        </trans-unit>
        <trans-unit id="25e07c07376edb7f994c3289d03610c1335d5288" translate="yes" xml:space="preserve">
          <source>Todo list</source>
          <target state="translated">全リスト</target>
        </trans-unit>
        <trans-unit id="44e89f12173f1b11f3c33dfcf393dbeb53d74231" translate="yes" xml:space="preserve">
          <source>Toggle the pre-push hook (see &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;). The default is --verify, giving the hook a chance to prevent the push. With --no-verify, the hook is bypassed completely.</source>
          <target state="translated">プレプッシュフックを切り替えます（&lt;a href=&quot;githooks&quot;&gt;githooks [5]を&lt;/a&gt;参照）。デフォルトは--verifyで、フックにプッシュを防止する機会を与えます。 --no-verifyを使用すると、フックは完全にバイパスされます。</target>
        </trans-unit>
        <trans-unit id="e69b3ac557eee7192f98b057069c2f145301ef39" translate="yes" xml:space="preserve">
          <source>Topic branches</source>
          <target state="translated">トピックブランチ</target>
        </trans-unit>
        <trans-unit id="99011a3381da15bff0042576b0bb55bb6ae9ffd0" translate="yes" xml:space="preserve">
          <source>TortoiseCVS</source>
          <target state="translated">TortoiseCVS</target>
        </trans-unit>
        <trans-unit id="9732ce69da01051c0a62cf40cfeb5063ebcf5c22" translate="yes" xml:space="preserve">
          <source>Trace the evolution of the line range given by &quot;&amp;lt;start&amp;gt;,&amp;lt;end&amp;gt;&quot; (or the function name regex &amp;lt;funcname&amp;gt;) within the &amp;lt;file&amp;gt;. You may not give any pathspec limiters. This is currently limited to a walk starting from a single revision, i.e., you may only give zero or one positive revision arguments, and &amp;lt;start&amp;gt; and &amp;lt;end&amp;gt; (or &amp;lt;funcname&amp;gt;) must exist in the starting revision. You can specify this option more than once. Implies &lt;code&gt;--patch&lt;/code&gt;. Patch output can be suppressed using &lt;code&gt;--no-patch&lt;/code&gt;, but other diff formats (namely &lt;code&gt;--raw&lt;/code&gt;, &lt;code&gt;--numstat&lt;/code&gt;, &lt;code&gt;--shortstat&lt;/code&gt;, &lt;code&gt;--dirstat&lt;/code&gt;, &lt;code&gt;--summary&lt;/code&gt;, &lt;code&gt;--name-only&lt;/code&gt;, &lt;code&gt;--name-status&lt;/code&gt;, &lt;code&gt;--check&lt;/code&gt;) are not currently implemented.</source>
          <target state="translated">&amp;lt;file&amp;gt;内の &quot;&amp;lt;start&amp;gt;、&amp;lt;end&amp;gt;&quot;（または関数名regex &amp;lt;funcname&amp;gt;）によって指定された行範囲の変化を追跡します。パススペックリミッターを指定することはできません。これは現在、単一のリビジョンから始まるウォークに制限されています。つまり、ゼロまたは1つの正のリビジョン引数のみを指定でき、&amp;lt;start&amp;gt;および&amp;lt;end&amp;gt;（または&amp;lt;funcname&amp;gt;）は開始リビジョンに存在する必要があります。このオプションは複数回指定できます。意味 &lt;code&gt;--patch&lt;/code&gt; 。パッチ出力は &lt;code&gt;--no-patch&lt;/code&gt; を使用して抑制できますが、他のdiff形式（つまり &lt;code&gt;--raw&lt;/code&gt; 、-- &lt;code&gt;--numstat&lt;/code&gt; 、-- &lt;code&gt;--shortstat&lt;/code&gt; 、-- &lt;code&gt;--dirstat&lt;/code&gt; 、-- &lt;code&gt;--summary&lt;/code&gt; 、 &lt;code&gt;--name-only&lt;/code&gt; name -only、-- name &lt;code&gt;--name-status&lt;/code&gt; 、 &lt;code&gt;--check&lt;/code&gt; ）は現在実装されていません。</target>
        </trans-unit>
        <trans-unit id="324f1031e6064bf946ba7ad7de400c92a706ee71" translate="yes" xml:space="preserve">
          <source>Trace2 api</source>
          <target state="translated">Trace2 api</target>
        </trans-unit>
        <trans-unit id="f39bab439a6977ac76a84295e79b079d44b7d908" translate="yes" xml:space="preserve">
          <source>Trace2 config settings are only read from the system and global config files; repository local and worktree config files and &lt;code&gt;-c&lt;/code&gt; command line arguments are not respected.</source>
          <target state="translated">Trace2構成設定は、システムおよびグローバル構成ファイルからのみ読み取られます。リポジトリローカルおよびワークツリー構成ファイルと &lt;code&gt;-c&lt;/code&gt; コマンドライン引数は考慮されません。</target>
        </trans-unit>
        <trans-unit id="34f4d5fb2d35b898a8c6180c70ae5079360dafe0" translate="yes" xml:space="preserve">
          <source>Trace2 defines the following set of Trace2 Targets. Format details are given in a later section.</source>
          <target state="translated">Trace2では、以下のようなTrace2 Targetsのセットを定義しています。フォーマットの詳細は後述します。</target>
        </trans-unit>
        <trans-unit id="9cffe01770c87380a0c500c2ba4c5fe9919c83ec" translate="yes" xml:space="preserve">
          <source>Trace2 instrumentation throughout the Git code base sends Trace2 messages to the enabled Trace2 Targets. Targets transform these messages content into purpose-specific formats and write events to their data streams. In this manner, the Trace2 API can drive many different types of analysis.</source>
          <target state="translated">Git コードベース全体の Trace2 インストルメンテーションは、有効になっている Trace2 Targets に Trace2 メッセージを送信します。Targets は、これらのメッセージの内容を目的に応じたフォーマットに変換し、イベントをデータストリームに書き込みます。このようにして、Trace2 API はさまざまなタイプの分析を行うことができます。</target>
        </trans-unit>
        <trans-unit id="952dc6d60a810a50f48d84409a5ca3162f18abfc" translate="yes" xml:space="preserve">
          <source>Trace2 is controlled using &lt;code&gt;trace2.&lt;/code&gt; config values in the system and global config files and &lt;code&gt;GIT_TRACE2&lt;/code&gt; environment variables. Trace2 does not read from repo local or worktree config files or respect &lt;code&gt;-c&lt;/code&gt; command line config settings.</source>
          <target state="translated">Trace2はtrace2を使用して制御され &lt;code&gt;trace2.&lt;/code&gt; システムおよびグローバル構成ファイルの構成値と &lt;code&gt;GIT_TRACE2&lt;/code&gt; 環境変数。Trace2は、リポジトリのローカルファイルまたはワークツリーの構成ファイルを読み取ったり、 &lt;code&gt;-c&lt;/code&gt; コマンドラインの構成設定を尊重したりしません。</target>
        </trans-unit>
        <trans-unit id="20f68aac372bbc56e3b5b3e96aea0079529bedb9" translate="yes" xml:space="preserve">
          <source>Trace2 regions are similar to the existing trace_performance_enter() and trace_performance_leave() routines, but are thread safe and maintain per-thread stacks of timers.</source>
          <target state="translated">Trace2 リージョンは、既存の trace_performance_enter()および trace_performance_leave()ルーチンに似ていますが、スレッドセーフで、スレッドごとのタイマースタックを維持します。</target>
        </trans-unit>
        <trans-unit id="8bded73626b8544423d59c1c5a0c1bfb684cb12e" translate="yes" xml:space="preserve">
          <source>Trace2 target formats</source>
          <target state="translated">Trace2 のターゲットフォーマット</target>
        </trans-unit>
        <trans-unit id="e4cb4d4e7e519744d1375eb303304baebc567ae9" translate="yes" xml:space="preserve">
          <source>Trace2 targets</source>
          <target state="translated">Trace2ターゲット</target>
        </trans-unit>
        <trans-unit id="a0cfb1f78b98054b282b0aab138d8ea25f2c82bd" translate="yes" xml:space="preserve">
          <source>Tracking and contributing to an entire Subversion-managed project (complete with a trunk, tags and branches):</source>
          <target state="translated">Subversion で管理されているプロジェクト全体(トランク、タグ、ブランチを含む)をトラッキングし、貢献することができます。</target>
        </trans-unit>
        <trans-unit id="847895b0cdb93b975e4c930f95d66dabeb1e64d2" translate="yes" xml:space="preserve">
          <source>Tracking and contributing to the trunk of a Subversion-managed project (ignoring tags and branches):</source>
          <target state="translated">Subversion で管理されているプロジェクトのトランクをトラッキングし、貢献する(タグやブランチは無視する)。</target>
        </trans-unit>
        <trans-unit id="667c19a45142471c0c20cc605b683a6a3152afb1" translate="yes" xml:space="preserve">
          <source>Traditionally, tips of branches and tags (collectively known as &lt;code&gt;refs&lt;/code&gt;) were stored one file per ref in a (sub)directory under &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; directory. While many branch tips tend to be updated often, most tags and some branch tips are never updated. When a repository has hundreds or thousands of tags, this one-file-per-ref format both wastes storage and hurts performance.</source>
          <target state="translated">従来、ブランチとタグのヒント（まとめて &lt;code&gt;refs&lt;/code&gt; と呼ばれていました）は、 &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; ディレクトリの下の（サブ）ディレクトリにrefごとに1つのファイルを格納していました。多くのブランチヒントは頻繁に更新される傾向がありますが、ほとんどのタグと一部のブランチヒントは決して更新されません。リポジトリに数百または数千のタグがある場合、この1ファイル/参照形式はストレージを浪費し、パフォーマンスを低下させます。</target>
        </trans-unit>
        <trans-unit id="a5cf7db57e9cf074478d171148671cc677faf56a" translate="yes" xml:space="preserve">
          <source>Trailing spaces are ignored unless they are quoted with backslash (&quot;&lt;code&gt;\&lt;/code&gt;&quot;).</source>
          <target state="translated">末尾のスペースは、バックスラッシュ（ &quot; &lt;code&gt;\&lt;/code&gt; &quot;）で囲まれていない限り無視されます。</target>
        </trans-unit>
        <trans-unit id="18baa50eee1aac68104e16bd4ad94c661cde3869" translate="yes" xml:space="preserve">
          <source>Transfer size: In its current form Git requires the whole working tree present. It does not allow partial trees to be transferred in fetch or clone. If the project you work on consists of multiple repositories tied together as submodules in a superproject, you can avoid fetching the working trees of the repositories you are not interested in.</source>
          <target state="translated">転送サイズ。現在の形では、Git は作業ツリー全体を必要としています。部分的なツリーをフェッチやクローンで転送することはできません。作業しているプロジェクトが複数のリポジトリをスーパープロジェクトのサブモジュールとして結びつけている場合は、興味のないリポジトリの作業ツリーをフェッチしないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="bdf6a912dffd18ed6042052fce8610d96ce56a71" translate="yes" xml:space="preserve">
          <source>Transform stdin by substituting all the 40-character SHA-1 hexes (say $hex) with &quot;$hex ($rev_name)&quot;. When used with --name-only, substitute with &quot;$rev_name&quot;, omitting $hex altogether. Intended for the scripter&amp;rsquo;s use.</source>
          <target state="translated">すべての40文字のSHA-1 hex（たとえば$ hex）を「$ hex（$ rev_name）」で置き換えることにより、stdinを変換します。--name-onlyと共に使用する場合は、「$ rev_name」に置き換えて、$ hexを完全に省略します。スクリプト作成者の使用を目的としています。</target>
        </trans-unit>
        <trans-unit id="fc873c381aea0c960eb3ebd47773defb66d7e124" translate="yes" xml:space="preserve">
          <source>Transmit &amp;lt;string&amp;gt; as a push option. As the push option must not contain LF or NUL characters, the string is not encoded.</source>
          <target state="translated">&amp;lt;string&amp;gt;をプッシュオプションとして送信します。プッシュオプションにLFまたはNUL文字を含めることはできないため、文字列はエンコードされません。</target>
        </trans-unit>
        <trans-unit id="32bd61986aca00f68612950bbcdb4915d3d0e846" translate="yes" xml:space="preserve">
          <source>Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. The server&amp;rsquo;s handling of server options, including unknown ones, is server-specific. When multiple &lt;code&gt;--server-option=&amp;lt;option&amp;gt;&lt;/code&gt; are given, they are all sent to the other side in the order listed on the command line.</source>
          <target state="translated">プロトコルバージョン2を使用して通信するときに、指定された文字列をサーバーに送信します。指定された文字列には、NULまたはLF文字を含めることはできません。不明なオプションを含むサーバーオプションのサーバーの処理は、サーバー固有です。複数の &lt;code&gt;--server-option=&amp;lt;option&amp;gt;&lt;/code&gt; が指定されている場合、それらはすべてコマンドラインにリストされている順序で反対側に送信されます。</target>
        </trans-unit>
        <trans-unit id="39635a03df29b9789e505a1038590e24ea96c9e9" translate="yes" xml:space="preserve">
          <source>Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. When multiple &lt;code&gt;--server-option=&amp;lt;option&amp;gt;&lt;/code&gt; are given, they are all sent to the other side in the order listed on the command line.</source>
          <target state="translated">プロトコルバージョン2を使用して通信するときに、指定された文字列をサーバーに送信します。指定された文字列には、NULまたはLF文字を含めることはできません。複数の &lt;code&gt;--server-option=&amp;lt;option&amp;gt;&lt;/code&gt; が指定されている場合、それらはすべてコマンドラインにリストされている順序で反対側に送信されます。</target>
        </trans-unit>
        <trans-unit id="2995fbcc2c84443582483713456b482a39b63e37" translate="yes" xml:space="preserve">
          <source>Transmit the given string to the server, which passes them to the pre-receive as well as the post-receive hook. The given string must not contain a NUL or LF character. When multiple &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; are given, they are all sent to the other side in the order listed on the command line. When no &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; is given from the command line, the values of configuration variable &lt;code&gt;push.pushOption&lt;/code&gt; are used instead.</source>
          <target state="translated">与えられた文字列をサーバーに送信し、サーバーはそれらを受信前フックと受信後フックに渡します。与えられた文字列はNULまたはLF文字を含んではいけません。複数の &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; が指定されている場合、それらはすべてコマンドラインにリストされている順序で反対側に送信されます。ない場合 &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; コマンドラインから与えられ、コンフィギュレーション変数の値 &lt;code&gt;push.pushOption&lt;/code&gt; が代わりに使用されています。</target>
        </trans-unit>
        <trans-unit id="9960fbc3363c91bebbbc4dae3127f4935a1a22d6" translate="yes" xml:space="preserve">
          <source>Treat all files as text.</source>
          <target state="translated">すべてのファイルをテキストとして扱います。</target>
        </trans-unit>
        <trans-unit id="a08e9c61e543dccc4a24afe7a10c95737cbb1ca7" translate="yes" xml:space="preserve">
          <source>Treat pathspecs literally (i.e. no globbing, no pathspec magic). This is equivalent to setting the &lt;code&gt;GIT_LITERAL_PATHSPECS&lt;/code&gt; environment variable to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">パススペックを文字どおりに扱います（つまり、グロビングなし、パススペックマジックなし）。これは、 &lt;code&gt;GIT_LITERAL_PATHSPECS&lt;/code&gt; 環境変数を &lt;code&gt;1&lt;/code&gt; に設定することと同じです。</target>
        </trans-unit>
        <trans-unit id="8024445062b4bb90b2e84a4da6e0bb207f37b5f4" translate="yes" xml:space="preserve">
          <source>Treat the &amp;lt;string&amp;gt; given to &lt;code&gt;-S&lt;/code&gt; as an extended POSIX regular expression to match.</source>
          <target state="translated">&lt;code&gt;-S&lt;/code&gt; に指定された&amp;lt;string&amp;gt; を、一致する拡張POSIX正規表現として扱います。</target>
        </trans-unit>
        <trans-unit id="72315ec1092243bb561e5b4697869abb3601099e" translate="yes" xml:space="preserve">
          <source>Treat the repository as a bare repository. If GIT_DIR environment is not set, it is set to the current working directory.</source>
          <target state="translated">リポジトリをベアリポジトリとして扱います。GIT_DIR環境が設定されていない場合は、現在の作業ディレクトリに設定されます。</target>
        </trans-unit>
        <trans-unit id="1dad3a3b77cbf00bf58d87ee853af6d3cddb344a" translate="yes" xml:space="preserve">
          <source>Treat the revision argument as a &amp;lt;revision range&amp;gt;, even if it is just a single commit (that would normally be treated as a &amp;lt;since&amp;gt;). Note that root commits included in the specified range are always formatted as creation patches, independently of this flag.</source>
          <target state="translated">単一のコミット（通常は&amp;lt;since&amp;gt;として扱われる）であっても、リビジョン引数を&amp;lt;リビジョン範囲&amp;gt;として扱います。指定された範囲に含まれるルートコミットは、このフラグとは関係なく、常に作成パッチとしてフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="aa88eae97d6ad1936bc41000081122649aee8d74" translate="yes" xml:space="preserve">
          <source>Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge. Whitespace changes mixed with other changes to a line are not ignored. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;-b&lt;/code&gt;, &lt;code&gt;-w&lt;/code&gt;, &lt;code&gt;--ignore-space-at-eol&lt;/code&gt;, and &lt;code&gt;--ignore-cr-at-eol&lt;/code&gt;.</source>
          <target state="translated">3者間マージのために、指定されたタイプの空白の変更がある行を変更されていないものとして扱います。行に対する他の変更と混合された空白の変更は無視されません。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;-b&lt;/code&gt; 、 &lt;code&gt;-w&lt;/code&gt; 、-- &lt;code&gt;--ignore-space-at-eol&lt;/code&gt; 、-- &lt;code&gt;--ignore-cr-at-eol&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="6ddd0e484558c1f8e50a8fe3c2dc7499225a9297" translate="yes" xml:space="preserve">
          <source>Tree Object</source>
          <target state="translated">ツリーオブジェクト</target>
        </trans-unit>
        <trans-unit id="bce93b7f9d4c3064a3f582b574710500d7e5efb5" translate="yes" xml:space="preserve">
          <source>Tree and blob objects outside of &lt;code&gt;refs/{tags,heads}/*&lt;/code&gt; will be treated the same way as if they were inside &lt;code&gt;refs/tags/*&lt;/code&gt;, any update of them will be rejected.</source>
          <target state="translated">&lt;code&gt;refs/{tags,heads}/*&lt;/code&gt; 外のツリーおよびblobオブジェクトは、 &lt;code&gt;refs/tags/*&lt;/code&gt; 内にある場合と同じように扱われ、それらの更新は拒否されます。</target>
        </trans-unit>
        <trans-unit id="faed43d5018a65bdda1021ea817b81efdd882a1f" translate="yes" xml:space="preserve">
          <source>Tree objects as well as tag objects not pointing at commits, cannot be described. When describing blobs, the lightweight tags pointing at blobs are ignored, but the blob is still described as &amp;lt;committ-ish&amp;gt;:&amp;lt;path&amp;gt; despite the lightweight tag being favorable.</source>
          <target state="translated">ツリーオブジェクトや、コミットを指さないタグオブジェクトは記述できません。blobを記述する場合、blobを指す軽量タグは無視されますが、軽量タグが好ましいにもかかわらず、blobは引き続き&amp;lt;committ-ish&amp;gt;：&amp;lt;path&amp;gt;として記述されます。</target>
        </trans-unit>
        <trans-unit id="d94a666a1561928de12071aa36f46464acd70f54" translate="yes" xml:space="preserve">
          <source>Tree to checkout from (when paths are given). If not specified, the index will be used.</source>
          <target state="translated">チェックアウトするツリー(パスが指定されている場合)。指定しない場合はインデックスが使用されます。</target>
        </trans-unit>
        <trans-unit id="fef8232d1c67b8b3403ba454c8ae3c965dc5fb72" translate="yes" xml:space="preserve">
          <source>Trees (aka directories) use just 12 bytes of memory on top of the memory required for their entries (see &amp;ldquo;per active file&amp;rdquo; below). The cost of a tree is virtually 0, as its overhead amortizes out over the individual file entries.</source>
          <target state="translated">ツリー（別名ディレクトリ）は、エントリに必要なメモリの上に12バイトのメモリを使用します（以下の「アクティブなファイルごと」を参照）。ツリーのコストは実質的に0です。これは、そのオーバーヘッドが個々のファイルエントリで償却されるためです。</target>
        </trans-unit>
        <trans-unit id="8797468d6463e4f71332170d9f50ca7fd321cc3a" translate="yes" xml:space="preserve">
          <source>Trivial merges are done by &lt;code&gt;git read-tree&lt;/code&gt; itself. Only conflicting paths will be in unmerged state when &lt;code&gt;git read-tree&lt;/code&gt; returns.</source>
          <target state="translated">ささいなマージは &lt;code&gt;git read-tree&lt;/code&gt; 自体によって行われます。 &lt;code&gt;git read-tree&lt;/code&gt; が戻ると、競合するパスのみがマージされない状態になります。</target>
        </trans-unit>
        <trans-unit id="c14d8e783a9f521d30b73eb971eac8f82acc62a0" translate="yes" xml:space="preserve">
          <source>True merge</source>
          <target state="translated">真のマージ</target>
        </trans-unit>
        <trans-unit id="33a579ffc0dccbff15be01734ea4138ea4e7635c" translate="yes" xml:space="preserve">
          <source>Trust</source>
          <target state="translated">Trust</target>
        </trans-unit>
        <trans-unit id="df8a0e781552ee165e12d7086194c5f37262dc36" translate="yes" xml:space="preserve">
          <source>Try to speed up the traversal using the pack bitmap index (if one is available). Note that when traversing with &lt;code&gt;--objects&lt;/code&gt;, trees and blobs will not have their associated path printed.</source>
          <target state="translated">パックビットマップインデックス（使用可能な場合）を使用して、走査を高速化してください。 &lt;code&gt;--objects&lt;/code&gt; を使用してトラバースする場合、ツリーとブロブには関連するパスが印刷されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="db494399fc91d335ea933090c261cf51f7615da6" translate="yes" xml:space="preserve">
          <source>Try to update from the upstream resulted in a lot of conflicts; you were not ready to spend a lot of time merging right now, so you decide to do that later.</source>
          <target state="translated">上流から更新しようとすると、多くの競合が発生しました。</target>
        </trans-unit>
        <trans-unit id="3a12d2b4901990f4e580a360ff850809fe3f67b9" translate="yes" xml:space="preserve">
          <source>Turn off any previous &lt;code&gt;--filter=&lt;/code&gt; argument.</source>
          <target state="translated">以前の &lt;code&gt;--filter=&lt;/code&gt; 引数をオフにします。</target>
        </trans-unit>
        <trans-unit id="34771065d121fc03fac8d38d540e254893826329" translate="yes" xml:space="preserve">
          <source>Turn off branch colors, even when the configuration file gives the default to color output. Same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">設定ファイルでデフォルトのカラー出力が指定されている場合でも、ブランチのカラーをオフにします。 &lt;code&gt;--color=never&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="6d9cbb32ce6c68e264cdb30b91e954cf183958d3" translate="yes" xml:space="preserve">
          <source>Turn off colored diff. It is the same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">色付きの差分をオフにします。 &lt;code&gt;--color=never&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="3d9b2354f095eeb41acddbf4f3d69d4ac5775813" translate="yes" xml:space="preserve">
          <source>Turn off colored diff. This can be used to override configuration settings. It is the same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">色付きの差分をオフにします。これは、構成設定をオーバーライドするために使用できます。 &lt;code&gt;--color=never&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="8ad464ef4a6c59cdcb2319e829113b9b9a0202fe" translate="yes" xml:space="preserve">
          <source>Turn off colored output, even when the configuration file gives the default to color output. Same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">構成ファイルがデフォルトでカラー出力を指定している場合でも、カラー出力をオフにします。 &lt;code&gt;--color=never&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="a3a997309d5fb6a6ca30f0f6201f278a284d8e1e" translate="yes" xml:space="preserve">
          <source>Turn off match highlighting, even when the configuration file gives the default to color output. Same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">構成ファイルでデフォルトのカラー出力が指定されている場合でも、一致の強調表示をオフにします。 &lt;code&gt;--color=never&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="d4fab0f230de92fdcff08739247b39013a4dcf91" translate="yes" xml:space="preserve">
          <source>Turn off move detection. This can be used to override configuration settings. It is the same as &lt;code&gt;--color-moved=no&lt;/code&gt;.</source>
          <target state="translated">移動検出をオフにします。これは、構成設定をオーバーライドするために使用できます。 &lt;code&gt;--color-moved=no&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="b0eb0b106db412297afc722cb22850ad8fd89466" translate="yes" xml:space="preserve">
          <source>Turn off rename detection, even when the configuration file gives the default to do so.</source>
          <target state="translated">設定ファイルでデフォルトでリネーム検出を行うように設定されている場合でも、リネーム検出をオフにします。</target>
        </trans-unit>
        <trans-unit id="4e867193eda90e02a99d5e3b2d3aff016424ee32" translate="yes" xml:space="preserve">
          <source>Turn off rename detection. This overrides the &lt;code&gt;merge.renames&lt;/code&gt; configuration variable. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--no-renames&lt;/code&gt;.</source>
          <target state="translated">名前の変更の検出をオフにします。これは、 &lt;code&gt;merge.renames&lt;/code&gt; 構成変数をオーバーライドします。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--no-renames&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="29eb4a9a74bb1156273caaa264fc85825c0572ef" translate="yes" xml:space="preserve">
          <source>Turn on rename detection, optionally setting the similarity threshold. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--find-renames&lt;/code&gt;.</source>
          <target state="translated">名前変更の検出をオンにし、オプションで類似性のしきい値を設定します。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--find-renames&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="a279dbfc86c680add56c7a5993ef6023dec20637" translate="yes" xml:space="preserve">
          <source>Turn on rename detection, optionally setting the similarity threshold. This is the default. This overrides the &lt;code&gt;merge.renames&lt;/code&gt; configuration variable. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--find-renames&lt;/code&gt;.</source>
          <target state="translated">名前変更の検出をオンにし、オプションで類似性のしきい値を設定します。これがデフォルトです。これは、 &lt;code&gt;merge.renames&lt;/code&gt; 構成変数をオーバーライドします。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--find-renames&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="e9d077a66918e3017c929a4d5ef75e05f491a825" translate="yes" xml:space="preserve">
          <source>Turn on/off rename detection regardless of user configuration. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--no-renames&lt;/code&gt;.</source>
          <target state="translated">ユーザー設定に関係なく、名前変更の検出をオン/オフにします。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--no-renames&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="ff597cb2e8f500da1bb43f369ea55f0017801fbc" translate="yes" xml:space="preserve">
          <source>Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal.</source>
          <target state="translated">プログレスのオン/オフを明示的に設定します。どちらも指定しない場合は、標準エラーが端末に接続されている場合にプログレスを表示します。</target>
        </trans-unit>
        <trans-unit id="b63e204e5b5bb236923126ba202fed353f8079ec" translate="yes" xml:space="preserve">
          <source>Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal. Note that not all merge strategies may support progress reporting.</source>
          <target state="translated">プログレスのオン/オフを明示的に設定します。どちらも指定しない場合、標準エラーがターミナルに接続されている場合、進捗状況が表示されます。すべてのマージ戦略が進捗報告をサポートしているわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ae22b8d4ecb731b706e41a653df929373ee8e8e0" translate="yes" xml:space="preserve">
          <source>Turns off any previous &lt;code&gt;--filter=&lt;/code&gt; argument.</source>
          <target state="translated">以前の &lt;code&gt;--filter=&lt;/code&gt; 引数をオフにします。</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="aef2d842e6b781b12f96bc62f4ab607c12e12218" translate="yes" xml:space="preserve">
          <source>Two Tree Merge</source>
          <target state="translated">2つの木のマージ</target>
        </trans-unit>
        <trans-unit id="6bda5442e87e811366b94ce6966009ecac6ac5dc" translate="yes" xml:space="preserve">
          <source>Two consecutive asterisks (&quot;&lt;code&gt;**&lt;/code&gt;&quot;) in patterns matched against full pathname may have special meaning:</source>
          <target state="translated">完全パス名と照合されるパターン内の2つの連続するアスタリスク（ &quot; &lt;code&gt;**&lt;/code&gt; &quot;）は、特別な意味を持つ場合があります。</target>
        </trans-unit>
        <trans-unit id="e187ca5222f2f1c9a298321896225faf75c5697a" translate="yes" xml:space="preserve">
          <source>Two consecutive asterisks (&amp;ldquo;**&amp;rdquo;) in patterns matched against full pathname may have special meaning:</source>
          <target state="translated">完全パス名と照合されるパターン内の2つの連続するアスタリスク（「**」）は、特別な意味を持つ場合があります。</target>
        </trans-unit>
        <trans-unit id="fce699584c34eaef39ec9c341ad51961e194a419" translate="yes" xml:space="preserve">
          <source>Two special values are supported: &lt;code&gt;off&lt;/code&gt; will simply close the corresponding standard handle, and if &lt;code&gt;GIT_REDIRECT_STDERR&lt;/code&gt; is &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;, standard error will be redirected to the same handle as standard output.</source>
          <target state="translated">：二つの特別な値がサポートされて &lt;code&gt;off&lt;/code&gt; 単に対応する標準ハンドルを閉じ、そして場合 &lt;code&gt;GIT_REDIRECT_STDERR&lt;/code&gt; がある &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; 、標準誤差は、標準出力と同じハンドルにリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="34a739d621f3038babff4f0f681d077135e77a75" translate="yes" xml:space="preserve">
          <source>Two things are interesting here:</source>
          <target state="translated">ここで気になるのは2つ。</target>
        </trans-unit>
        <trans-unit id="ced48512ad4d3cb13ca20b7cb1f2f8e4abd0bc9d" translate="yes" xml:space="preserve">
          <source>Tying it all together</source>
          <target state="translated">結び付け</target>
        </trans-unit>
        <trans-unit id="3a87a5a93967e0c0facb5bdbedab0a6936494920" translate="yes" xml:space="preserve">
          <source>Type 5 is reserved for future expansion. Type 0 is invalid.</source>
          <target state="translated">タイプ 5 は将来の拡張のために予約されています。タイプ0は無効です。</target>
        </trans-unit>
        <trans-unit id="e8e8d3184972cec12ef3bd94d7eec7947cbe4b53" translate="yes" xml:space="preserve">
          <source>Typical gitweb config files will only change starting (default) time zone, and leave other elements at their default values:</source>
          <target state="translated">典型的な gitweb の設定ファイルは、開始時刻 (デフォルト)のタイムゾーンを変更するだけで、他の要素はデフォルトのままにしておきます。</target>
        </trans-unit>
        <trans-unit id="3aa25a3911a2da2f000729dbc451ee040fee4a66" translate="yes" xml:space="preserve">
          <source>Typical usage is something like:</source>
          <target state="translated">典型的な使い方はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="db1f5b1028dc570d4bb8caccd45a45601a38210c" translate="yes" xml:space="preserve">
          <source>Typical use of git credential</source>
          <target state="translated">git credential の典型的な使い方</target>
        </trans-unit>
        <trans-unit id="d63a8a509d39725ec5fc85189ba54ffbab2dd0bb" translate="yes" xml:space="preserve">
          <source>Typically it will be placed in a MUA&amp;rsquo;s drafts folder, edited to add timely commentary that should not go in the changelog after the three dashes, and then sent as a message whose body, in our example, starts with &quot;arch/arm config files were&amp;hellip;​&quot;. On the receiving end, readers can save interesting patches in a UNIX mailbox and apply them with &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;.</source>
          <target state="translated">通常、MUAのドラフトフォルダーに配置され、3つのダッシュの後に変更ログに入れるべきではないタイムリーなコメントを追加するように編集され、この例では本文が「arch / arm config filesで始まるメッセージとして送信されます。 &amp;hellip;」。受信側では、読者は興味深いパッチをUNIXメールボックスに保存し、それらを&lt;a href=&quot;git-am&quot;&gt;git-am [1]で&lt;/a&gt;適用できます。</target>
        </trans-unit>
        <trans-unit id="3b51965ce078cc4b0d9ecb0a1b113a383a8700dc" translate="yes" xml:space="preserve">
          <source>Typically such a variable may look like this:</source>
          <target state="translated">通常、このような変数は次のようになります。</target>
        </trans-unit>
        <trans-unit id="9f47be9cc1e7fcec80fcc7e52dcbd486a27d2ee2" translate="yes" xml:space="preserve">
          <source>Typically this is run with a script calling Git&amp;rsquo;s imitation of the &lt;code&gt;merge&lt;/code&gt; command from the RCS package.</source>
          <target state="translated">通常、これは、RCSパッケージからの &lt;code&gt;merge&lt;/code&gt; コマンドのGitの模倣を呼び出すスクリプトで実行されます。</target>
        </trans-unit>
        <trans-unit id="e4333d902cedfd0d4739277fdec621b3f9f09422" translate="yes" xml:space="preserve">
          <source>Typically this matches the real type of &amp;lt;object&amp;gt; but asking for a type that can trivially be dereferenced from the given &amp;lt;object&amp;gt; is also permitted. An example is to ask for a &quot;tree&quot; with &amp;lt;object&amp;gt; being a commit object that contains it, or to ask for a &quot;blob&quot; with &amp;lt;object&amp;gt; being a tag object that points at it.</source>
          <target state="translated">通常、これは&amp;lt;object&amp;gt;の実際のタイプと一致しますが、特定の&amp;lt;object&amp;gt;から簡単に逆参照できるタイプを要求することも許可されます。たとえば、&amp;lt;object&amp;gt;が含まれる「ツリー」を含むツリーを要求するか、または&amp;lt;object&amp;gt;がそれを指すタグオブジェクトである「blob」を要求します。</target>
        </trans-unit>
        <trans-unit id="6b016c5601edd059fd8dc12bb8d8426b6525fff2" translate="yes" xml:space="preserve">
          <source>Typically you would first remove all tracked files from the working tree using this command:</source>
          <target state="translated">通常は、まずこのコマンドを使って作業ツリーからすべての追跡されたファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="3a2ee6ee14f11a86e1818d26c21e9493d38718f1" translate="yes" xml:space="preserve">
          <source>Typically, parallel recursive and multi-remote fetches will be faster. By default fetches are performed sequentially, not in parallel.</source>
          <target state="translated">一般的に、並列再帰的なフェッチや複数のリモートからのフェッチの方が高速です。デフォルトでは、フェッチは並列ではなく順次実行されます。</target>
        </trans-unit>
        <trans-unit id="94e92e77c127b9c8a314ec2c48c4916e008c6404" translate="yes" xml:space="preserve">
          <source>Typically, this is invoked as &lt;code&gt;git read-tree -m $H $M&lt;/code&gt;, where $H is the head commit of the current repository, and $M is the head of a foreign tree, which is simply ahead of $H (i.e. we are in a fast-forward situation).</source>
          <target state="translated">通常、これは &lt;code&gt;git read-tree -m $H $M&lt;/code&gt; として呼び出されます。ここで、$ Hは現在のリポジトリの先頭コミットであり、$ Mは外部ツリーの先頭であり、単に$ Hの前にあります（つまり、早送りの状況にあります）。</target>
        </trans-unit>
        <trans-unit id="0ada5827188094ef6e82c28e45e078ca96f54ca4" translate="yes" xml:space="preserve">
          <source>U: file is unmerged (you must complete the merge before it can be committed)</source>
          <target state="translated">U:ファイルがマージされていません (コミットする前にマージを完了する必要があります)</target>
        </trans-unit>
        <trans-unit id="1a7a0d0dd35212ae4c8c4c873315c6e7e9351f3b" translate="yes" xml:space="preserve">
          <source>URI and label (title) for the Git logo link (or your site logo, if you chose to use different logo image). By default, these both refer to Git homepage, &lt;a href=&quot;https://git-scm.com&quot;&gt;https://git-scm.com&lt;/a&gt;; in the past, they pointed to Git documentation at &lt;a href=&quot;https://www.kernel.org&quot;&gt;https://www.kernel.org&lt;/a&gt;.</source>
          <target state="translated">GitロゴリンクのURIとラベル（タイトル）（または、別のロゴ画像を使用することを選択した場合は、サイトのロゴ）。デフォルトでは、どちらもGitホームページ&lt;a href=&quot;https://git-scm.com&quot;&gt;https://git-scm.comを&lt;/a&gt;参照しています。以前は、&lt;a href=&quot;https://www.kernel.org&quot;&gt;https：&lt;/a&gt; //www.kernel.orgにあるGitのドキュメントを参照していました。</target>
        </trans-unit>
        <trans-unit id="8561702ffd22bbb5ccd1a81c9c8d8cc77f16fa7e" translate="yes" xml:space="preserve">
          <source>Un-sets the previously set type specifier (if one was previously set). This option requests that &lt;code&gt;git config&lt;/code&gt; not canonicalize the retrieved variable. &lt;code&gt;--no-type&lt;/code&gt; has no effect without &lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; or &lt;code&gt;--&amp;lt;type&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">以前に設定されたタイプ指定子の設定を解除します（以前に設定されていた場合）。このオプションは、 &lt;code&gt;git config&lt;/code&gt; が取得した変数を正規化しないことを要求します。 &lt;code&gt;--no-type&lt;/code&gt; は、 &lt;code&gt;--&amp;lt;type&amp;gt;&lt;/code&gt; &lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; または-&amp;lt;type&amp;gt;なしでは効果がありません。</target>
        </trans-unit>
        <trans-unit id="911839695653d988872929c95814b8902e300040" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;--pretty=oneline&lt;/code&gt;, the commit message is prefixed with this information on the same line. This option cannot be combined with &lt;code&gt;--reverse&lt;/code&gt;. See also &lt;a href=&quot;git-reflog&quot;&gt;git-reflog[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--pretty=oneline&lt;/code&gt; の下では、コミットメッセージの同じ行にこの情報がプレフィックスされます。このオプションを &lt;code&gt;--reverse&lt;/code&gt; と組み合わせることはできません。&lt;a href=&quot;git-reflog&quot;&gt;git-reflog [1]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="64ba59969ba5a36d002d9a189101c624fcf7d3cc" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;--pretty=reference&lt;/code&gt;, this information will not be shown at all.</source>
          <target state="translated">&lt;code&gt;--pretty=reference&lt;/code&gt; の下では、この情報はまったく表示されません。</target>
        </trans-unit>
        <trans-unit id="c73a6e04cc57ad10ee4ae7284f559a5ae2a53d36" translate="yes" xml:space="preserve">
          <source>Under certain circumstances, some versions of &lt;code&gt;diff&lt;/code&gt; do not correctly detect a missing new-line at the end of the file. As a result, patches created by such &lt;code&gt;diff&lt;/code&gt; programs do not record incomplete lines correctly. This option adds support for applying such patches by working around this bug.</source>
          <target state="translated">特定の状況下で、 &lt;code&gt;diff&lt;/code&gt; の一部のバージョンは、ファイルの末尾にある欠落した改行を正しく検出しません。その結果、そのような &lt;code&gt;diff&lt;/code&gt; プログラムによって作成されたパッチは、不完全な行を正しく記録しません。このオプションは、このバグを回避することにより、このようなパッチの適用のサポートを追加します。</target>
        </trans-unit>
        <trans-unit id="67a27dbf5548d05ac63e85bd8b4c875d8f48c102" translate="yes" xml:space="preserve">
          <source>Understanding History: Commits</source>
          <target state="translated">歴史を理解する。コミット</target>
        </trans-unit>
        <trans-unit id="9334dba95d5dfb2042093dd9adbddea5f77c5eb4" translate="yes" xml:space="preserve">
          <source>Understanding history: History diagrams</source>
          <target state="translated">歴史を理解する。歴史の図解</target>
        </trans-unit>
        <trans-unit id="85bd1a7ea75afef7e0417cd2bf9d9f3cf13e5e08" translate="yes" xml:space="preserve">
          <source>Understanding history: What is a branch?</source>
          <target state="translated">歴史を理解する。枝とは何か?</target>
        </trans-unit>
        <trans-unit id="6d61d96a492f996316f1e84e66cbfde933315e2c" translate="yes" xml:space="preserve">
          <source>Understanding history: commits, parents, and reachability</source>
          <target state="translated">歴史を理解する:コミット、親、到達可能性</target>
        </trans-unit>
        <trans-unit id="afa47a28efb9d6631a7be02ac359bed5256995ce" translate="yes" xml:space="preserve">
          <source>Undo a commit and redo</source>
          <target state="translated">コミットを取り消してやり直し</target>
        </trans-unit>
        <trans-unit id="61cb90c052dfcd0fda883c6029d1d0fc0a0f4685" translate="yes" xml:space="preserve">
          <source>Undo a commit, making it a topic branch</source>
          <target state="translated">コミットを元に戻してトピックブランチにする</target>
        </trans-unit>
        <trans-unit id="93d74feb000c815128d68a09c83733db43b69c15" translate="yes" xml:space="preserve">
          <source>Undo a merge or pull</source>
          <target state="translated">マージまたはプルを元に戻す</target>
        </trans-unit>
        <trans-unit id="4728c70cd06347b5f285fb3e7887387303b3968e" translate="yes" xml:space="preserve">
          <source>Undo a merge or pull inside a dirty working tree</source>
          <target state="translated">汚れた作業ツリー内でのマージやプルを元に戻す</target>
        </trans-unit>
        <trans-unit id="27b7abb5b90b7a2e8f00eaf74b6df8323ba7d926" translate="yes" xml:space="preserve">
          <source>Undo add</source>
          <target state="translated">追加を元に戻す</target>
        </trans-unit>
        <trans-unit id="ca677a11d37ffdca5231911a194cc2fcdffc5a26" translate="yes" xml:space="preserve">
          <source>Undo commits permanently</source>
          <target state="translated">コミットを恒久的に元に戻す</target>
        </trans-unit>
        <trans-unit id="4180759bca2f04cde0ec69611cb0e0ec1cfe7139" translate="yes" xml:space="preserve">
          <source>Undoes the effects of &lt;code&gt;fetch&lt;/code&gt; back to the specified revision. This allows you to re-&lt;code&gt;fetch&lt;/code&gt; an SVN revision. Normally the contents of an SVN revision should never change and &lt;code&gt;reset&lt;/code&gt; should not be necessary. However, if SVN permissions change, or if you alter your --ignore-paths option, a &lt;code&gt;fetch&lt;/code&gt; may fail with &quot;not found in commit&quot; (file not previously visible) or &quot;checksum mismatch&quot; (missed a modification). If the problem file cannot be ignored forever (with --ignore-paths) the only way to repair the repo is to use &lt;code&gt;reset&lt;/code&gt;.</source>
          <target state="translated">指定したリビジョンに戻る &lt;code&gt;fetch&lt;/code&gt; の効果を元に戻します。これにより、SVNリビジョンを再 &lt;code&gt;fetch&lt;/code&gt; できます。通常、SVNリビジョンの内容は変更 &lt;code&gt;reset&lt;/code&gt; ず、リセットは必要ありません。ただし、SVN権限が変更された場合、または--ignore-pathsオプションを変更した場合、「コミットに見つかりません」（以前に表示されなかったファイル）または「チェックサムの不一致」（変更を見逃した）で &lt;code&gt;fetch&lt;/code&gt; が失敗する場合があります。問題のファイルを永久に無視できない場合（--ignore-pathsを使用）、リポジトリを修復する唯一の方法は、 &lt;code&gt;reset&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="ac1f58f831611819b4114b80dd55e3ce540d5b23" translate="yes" xml:space="preserve">
          <source>Undoing a merge</source>
          <target state="translated">マージを元に戻す</target>
        </trans-unit>
        <trans-unit id="f552d5a5802e3df6273c784214def9840b82f594" translate="yes" xml:space="preserve">
          <source>Unfortunately this system becomes inefficient once a project has a lot of objects. Try this on an old project:</source>
          <target state="translated">残念ながら、このシステムはプロジェクトに多くのオブジェクトがあると効率が悪くなります。古いプロジェクトで試してみてください。</target>
        </trans-unit>
        <trans-unit id="c7deb06b3e42a38e2b00598939aa39f8d24897bd" translate="yes" xml:space="preserve">
          <source>Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs corrupts data.</source>
          <target state="translated">残念ながら、行末が混在するテキストファイルをクリーンアップするという望ましい効果と、バイナリファイルを破損させるという望ましくない効果を区別することはできません。どちらの場合も、CRLF は不可逆的な方法で削除されます。テキスト ファイルの場合は CRLF が行末であるため、これは正しいことですが、バイナリ ファイルの場合は CRLF を変換するとデータが破損します。</target>
        </trans-unit>
        <trans-unit id="6da1ce58d3a6c34c76807dc44593d7cd8c6563b6" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;--text&lt;/code&gt; is supplied patches of binary files without a textconv filter will be ignored.</source>
          <target state="translated">&lt;code&gt;--text&lt;/code&gt; が提供されない限り、textconvフィルターのないバイナリファイルのパッチは無視されます。</target>
        </trans-unit>
        <trans-unit id="54cbf98b314812a07f65f95ae77e8608ddf0b26f" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;-f&lt;/code&gt; is given, the &lt;code&gt;replace&lt;/code&gt; reference must not yet exist.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; を指定しない限り、 &lt;code&gt;replace&lt;/code&gt; 参照はまだ存在していてはなりません。</target>
        </trans-unit>
        <trans-unit id="ec0a9816e3fe8947b4bfff6f5914c3288bed6fc9" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;-f&lt;/code&gt; is given, the named tag must not yet exist.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; を指定しない限り、名前付きタグはまだ存在していてはなりません。</target>
        </trans-unit>
        <trans-unit id="7824ccb45f3d7be1fd07def25712792fbdf3f009" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;git blame&lt;/code&gt; and &lt;code&gt;git annotate&lt;/code&gt; in older versions of git, the extent of the annotation can be limited to both line ranges and revision ranges. The &lt;code&gt;-L&lt;/code&gt; option, which limits annotation to a range of lines, may be specified multiple times.</source>
          <target state="translated">古いバージョンのgitの &lt;code&gt;git blame&lt;/code&gt; や &lt;code&gt;git annotate&lt;/code&gt; とは異なり、注釈の範囲は行範囲とリビジョン範囲の両方に制限できます。 &lt;code&gt;-L&lt;/code&gt; 線の範囲に注釈を制限オプションは、複数回指定することができます。</target>
        </trans-unit>
        <trans-unit id="1fa5e3a4c28161d2ef67ee80d5624341cfa56be1" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;git diff-files&lt;/code&gt;, which showed the difference between the index file and the working tree, &lt;code&gt;git diff-index&lt;/code&gt; shows the differences between a committed &lt;strong&gt;tree&lt;/strong&gt; and either the index file or the working tree. In other words, &lt;code&gt;git diff-index&lt;/code&gt; wants a tree to be diffed against, and before we did the commit, we couldn&amp;rsquo;t do that, because we didn&amp;rsquo;t have anything to diff against.</source>
          <target state="translated">インデックスファイルと作業ツリーの違いを示した &lt;code&gt;git diff-files&lt;/code&gt; とは異なり、 &lt;code&gt;git diff-index&lt;/code&gt; はコミットされた&lt;strong&gt;ツリー&lt;/strong&gt;とインデックスファイルまたは作業ツリーのどちらかとの違いを示します。言い換えれば、 &lt;code&gt;git diff-index&lt;/code&gt; はツリーを比較することを望んでいます。コミットを行う前に、比較するものがなかったため、それを行うことができませんでした。</target>
        </trans-unit>
        <trans-unit id="a75073ebd9356a7219cb30b4bb866c17ce8b906c" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;gitk&lt;/code&gt;, &lt;code&gt;git gui&lt;/code&gt; focuses on commit generation and single file annotation and does not show project history. It does however supply menu actions to start a &lt;code&gt;gitk&lt;/code&gt; session from within &lt;code&gt;git gui&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gitk&lt;/code&gt; とは異なり、 &lt;code&gt;git gui&lt;/code&gt; はコミットの生成と単一ファイルのアノテーションに焦点を当てており、プロジェクトの履歴を表示しません。ただし、 &lt;code&gt;git gui&lt;/code&gt; 内から &lt;code&gt;gitk&lt;/code&gt; セッションを開始するためのメニューアクションを提供します。</target>
        </trans-unit>
        <trans-unit id="cd17281830ac5a9aa50c0d768481eabf04240182" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;raw&lt;/code&gt; format above, the time zone/UTC offset information contained in an RFC 2822 date string is used to adjust the date value to UTC prior to storage. Therefore it is important that this information be as accurate as possible.</source>
          <target state="translated">上記の &lt;code&gt;raw&lt;/code&gt; 形式とは異なり、RFC 2822日付文字列に含まれるタイムゾーン/ UTCオフセット情報は、保存前に日付値をUTCに調整するために使用されます。したがって、この情報はできるだけ正確であることが重要です。</target>
        </trans-unit>
        <trans-unit id="422977ffd462a03a6cbce65db58b07001eb2214f" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;rfc2822&lt;/code&gt; format, this format is very strict. Any variation in formatting will cause fast-import to reject the value.</source>
          <target state="translated">&lt;code&gt;rfc2822&lt;/code&gt; 形式とは異なり、この形式は非常に厳密です。書式設定にばらつきがあると、高速インポートで値が拒否されます。</target>
        </trans-unit>
        <trans-unit id="a5e8af576412d2facd9f39a0996da0da165c42ee" translate="yes" xml:space="preserve">
          <source>Unlike the Porcelain format, the filename information is always given and terminates the entry:</source>
          <target state="translated">Porcelain形式とは異なり、ファイル名の情報は常に与えられ、エントリは終了します。</target>
        </trans-unit>
        <trans-unit id="b603b31236d9df1a4442c23c62ea6317f2525837" translate="yes" xml:space="preserve">
          <source>Unlike the longhand form, when Alice fetches from Bob using a remote repository shorthand set up with &lt;code&gt;git remote&lt;/code&gt;, what was fetched is stored in a remote-tracking branch, in this case &lt;code&gt;bob/master&lt;/code&gt;. So after this:</source>
          <target state="translated">ロングハンドフォームとは異なり、アリスが &lt;code&gt;git remote&lt;/code&gt; で設定されたリモートリポジトリショートハンドを使用してボブからフェッチすると、フェッチされたものはリモート追跡ブランチ（この場合は &lt;code&gt;bob/master&lt;/code&gt; ）に格納されます。したがって、この後：</target>
        </trans-unit>
        <trans-unit id="cc8e9909209a90f3a790bc3005980e8527de79e5" translate="yes" xml:space="preserve">
          <source>Unlike the traditional &lt;code&gt;unified&lt;/code&gt; diff format, which shows two files A and B with a single column that has &lt;code&gt;-&lt;/code&gt; (minus &amp;mdash; appears in A but removed in B), &lt;code&gt;+&lt;/code&gt; (plus &amp;mdash; missing in A but added to B), or &lt;code&gt;&quot; &quot;&lt;/code&gt; (space &amp;mdash; unchanged) prefix, this format compares two or more files file1, file2,&amp;hellip;​ with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X&amp;rsquo;s line is different from it.</source>
          <target state="translated">伝統とは異なり、 &lt;code&gt;unified&lt;/code&gt; diff形式、ショー二つのファイルAと持っている単一の列とB &lt;code&gt;-&lt;/code&gt; （マイナス- Aに表示されますが、Bで削除）、 &lt;code&gt;+&lt;/code&gt; （プラス- Aに欠けているが、Bに加える）、または &lt;code&gt;&quot; &quot;&lt;/code&gt; （スペース&amp;mdash;変更なし）プレフィックス。このフォーマットは、2つ以上のファイルfile1、file2、&amp;hellip;を1つのファイルXと比較し、Xが各fileNとどのように異なるかを示します。 Xの行との違いを示すために、各fileNの1つの列が出力行の先頭に追加されます。</target>
        </trans-unit>
        <trans-unit id="71233552f2a4fc77054593fac1f6899dd0308229" translate="yes" xml:space="preserve">
          <source>Unlike variables like &lt;code&gt;color.ui&lt;/code&gt; and &lt;code&gt;core.editor&lt;/code&gt; the &lt;code&gt;receive.fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; and &lt;code&gt;fetch.fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; variables will not fall back on the &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; configuration if they aren&amp;rsquo;t set. To uniformly configure the same fsck settings in different circumstances all three of them they must all set to the same values.</source>
          <target state="translated">異なりのような変数 &lt;code&gt;color.ui&lt;/code&gt; と &lt;code&gt;core.editor&lt;/code&gt; &lt;code&gt;receive.fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; と &lt;code&gt;fetch.fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; 変数は、上で戻って落ちることはありません &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; コンフィギュレーションそうでない場合セットする。異なる環境で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="00ee5ed7b48c819f6f323dbe1b9a72aef5a0c864" translate="yes" xml:space="preserve">
          <source>Unlike variables like &lt;code&gt;color.ui&lt;/code&gt; and &lt;code&gt;core.editor&lt;/code&gt; the &lt;code&gt;receive.fsck.skipList&lt;/code&gt; and &lt;code&gt;fetch.fsck.skipList&lt;/code&gt; variables will not fall back on the &lt;code&gt;fsck.skipList&lt;/code&gt; configuration if they aren&amp;rsquo;t set. To uniformly configure the same fsck settings in different circumstances all three of them they must all set to the same values.</source>
          <target state="translated">以下のような変数とは異なり &lt;code&gt;color.ui&lt;/code&gt; と &lt;code&gt;core.editor&lt;/code&gt; &lt;code&gt;receive.fsck.skipList&lt;/code&gt; と &lt;code&gt;fetch.fsck.skipList&lt;/code&gt; 変数は、上で戻って落ちることはありません &lt;code&gt;fsck.skipList&lt;/code&gt; のそれらが設定されていない場合は、設定。異なる環境で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8a3dffb4c65d7a1f27e907ef2a919885d1125ac9" translate="yes" xml:space="preserve">
          <source>Unlike when pushing with &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;, any updates outside of &lt;code&gt;refs/{tags,heads}/*&lt;/code&gt; will be accepted without &lt;code&gt;+&lt;/code&gt; in the refspec (or &lt;code&gt;--force&lt;/code&gt;), whether that&amp;rsquo;s swapping e.g. a tree object for a blob, or a commit for another commit that&amp;rsquo;s doesn&amp;rsquo;t have the previous commit as an ancestor etc.</source>
          <target state="translated">&lt;a href=&quot;git-push&quot;&gt;git-push [1]を使用してプッシュ&lt;/a&gt;する場合とは異なり、refspec &lt;code&gt;refs/{tags,heads}/*&lt;/code&gt; 以外の更新は、refspec（または &lt;code&gt;--force&lt;/code&gt; ）に &lt;code&gt;+&lt;/code&gt; なしで受け入れられます。または、祖先としての以前のコミットを持たない別のコミットのコミットなど</target>
        </trans-unit>
        <trans-unit id="2f2516ccb262ba2dda1eeb5218e911868837ce78" translate="yes" xml:space="preserve">
          <source>Unlike when pushing with &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;, there is no configuration which&amp;rsquo;ll amend these rules, and nothing like a &lt;code&gt;pre-fetch&lt;/code&gt; hook analogous to the &lt;code&gt;pre-receive&lt;/code&gt; hook.</source>
          <target state="translated">&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;でプッシュする場合とは異なり、これらのルールを修正する構成はなく、 &lt;code&gt;pre-receive&lt;/code&gt; フックに似た &lt;code&gt;pre-fetch&lt;/code&gt; フックのようなものはありません。</target>
        </trans-unit>
        <trans-unit id="fb79f423670171900d7e94880e8d45907e9f995c" translate="yes" xml:space="preserve">
          <source>Unlock a working tree, allowing it to be pruned, moved or deleted.</source>
          <target state="translated">作業木のロックを解除して、剪定、移動、削除を可能にします。</target>
        </trans-unit>
        <trans-unit id="b00eee8b49227caba98e5d68033660ff6076ebcc" translate="yes" xml:space="preserve">
          <source>Unmerged entries have the following format; the first character is a &quot;u&quot; to distinguish from ordinary changed entries.</source>
          <target state="translated">マージされていないエントリは以下の形式になります。最初の文字は、通常の変更されたエントリと区別するための「u」です。</target>
        </trans-unit>
        <trans-unit id="2c99cc569343579b221cd64026ecc62bb1c21d7b" translate="yes" xml:space="preserve">
          <source>Unpack objects from a packed archive</source>
          <target state="translated">パックされたアーカイブからオブジェクトを展開する</target>
        </trans-unit>
        <trans-unit id="42e2a268d032a6abb00d4cbd80feaa1ecd7a75d6" translate="yes" xml:space="preserve">
          <source>Unreachable tags, commits, and trees will also be accessed to find the tips of dangling segments of history. Use &lt;code&gt;--no-dangling&lt;/code&gt; if you don&amp;rsquo;t care about this output and want to speed it up further.</source>
          <target state="translated">到達できないタグ、コミット、ツリーにもアクセスして、履歴のぶら下がりセグメントのヒントを見つけます。この出力を気にせず、さらに高速化する場合は、 &lt;code&gt;--no-dangling&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="d8a4efd1d470fc3c5ede97084c82a35b9804122a" translate="yes" xml:space="preserve">
          <source>Unregister the given submodules, i.e. remove the whole &lt;code&gt;submodule.$name&lt;/code&gt; section from .git/config together with their work tree. Further calls to &lt;code&gt;git submodule update&lt;/code&gt;, &lt;code&gt;git submodule foreach&lt;/code&gt; and &lt;code&gt;git submodule sync&lt;/code&gt; will skip any unregistered submodules until they are initialized again, so use this command if you don&amp;rsquo;t want to have a local checkout of the submodule in your working tree anymore.</source>
          <target state="translated">指定されたサブモジュールの登録を解除し &lt;code&gt;submodule.$name&lt;/code&gt; つまり、サブモジュール全体を$ .nameセクションを.git / configから作業ツリーとともに削除します。 &lt;code&gt;git submodule update&lt;/code&gt; 、 &lt;code&gt;git submodule foreach&lt;/code&gt; 、および &lt;code&gt;git submodule sync&lt;/code&gt; をさらに呼び出すと、未登録のサブモジュールは再び初期化されるまでスキップされるため、作業ツリーでサブモジュールのローカルチェックアウトを行わない場合は、このコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="1431f68f359f8699975be39dca08302c67d68d9e" translate="yes" xml:space="preserve">
          <source>Unset</source>
          <target state="translated">Unset</target>
        </trans-unit>
        <trans-unit id="8ff954e80b42b18d3d0fcda602d94db1e46da2d4" translate="yes" xml:space="preserve">
          <source>Unsetting the &lt;code&gt;text&lt;/code&gt; attribute on a path tells Git not to attempt any end-of-line conversion upon checkin or checkout.</source>
          <target state="translated">パスの &lt;code&gt;text&lt;/code&gt; 属性を設定解除すると、チェックインまたはチェックアウト時にGitが行末変換を試行しないようになります。</target>
        </trans-unit>
        <trans-unit id="7f84947907454dd0cb412d2a8e5d5e3b9c2382f0" translate="yes" xml:space="preserve">
          <source>Unsetting the variable, or setting it to empty, &quot;0&quot; or &quot;false&quot; (case insensitive) disables trace messages.</source>
          <target state="translated">変数の設定を解除するか、空、&quot;0 &quot;または &quot;false&quot;(大文字小文字を区別しない)に設定すると、トレースメッセージが無効になります。</target>
        </trans-unit>
        <trans-unit id="c176eff9c64fa28a4b6af1aa296cc1394bbf7a80" translate="yes" xml:space="preserve">
          <source>Unshelve</source>
          <target state="translated">Unshelve</target>
        </trans-unit>
        <trans-unit id="9fde2b36ff30053ad23e6a695929873244cc0367" translate="yes" xml:space="preserve">
          <source>Unshelve options</source>
          <target state="translated">オプションを解除する</target>
        </trans-unit>
        <trans-unit id="004e593b6690fb3d48f4f5a86eac1cd13b5b2234" translate="yes" xml:space="preserve">
          <source>Unshelving will take a shelved P4 changelist, and produce the equivalent git commit in the branch refs/remotes/p4-unshelved/&amp;lt;changelist&amp;gt;.</source>
          <target state="translated">Unshelvingは保留されたP4チェンジリストを受け取り、ブランチrefs / remotes / p4-unshelved / &amp;lt;changelist&amp;gt;に同等のgit commitを生成します。</target>
        </trans-unit>
        <trans-unit id="a6e7eb706e115cdaf88206be37eb67b232d007bc" translate="yes" xml:space="preserve">
          <source>Unspecified</source>
          <target state="translated">Unspecified</target>
        </trans-unit>
        <trans-unit id="78f88266b367e8b6e086054e91f1ebc89e168d16" translate="yes" xml:space="preserve">
          <source>Until Git version 2.20, and unlike when pushing with &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;, any updates to &lt;code&gt;refs/tags/*&lt;/code&gt; would be accepted without &lt;code&gt;+&lt;/code&gt; in the refspec (or &lt;code&gt;--force&lt;/code&gt;). When fetching, we promiscuously considered all tag updates from a remote to be forced fetches. Since Git version 2.20, fetching to update &lt;code&gt;refs/tags/*&lt;/code&gt; works the same way as when pushing. I.e. any updates will be rejected without &lt;code&gt;+&lt;/code&gt; in the refspec (or &lt;code&gt;--force&lt;/code&gt;).</source>
          <target state="translated">Gitバージョン2.20まで、および&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;でプッシュする場合とは異なり、refspec &lt;code&gt;refs/tags/*&lt;/code&gt; への更新は、refspec（または &lt;code&gt;--force&lt;/code&gt; ）に &lt;code&gt;+&lt;/code&gt; なしで受け入れられます。フェッチするとき、リモートからのすべてのタグの更新を強制フェッチと無差別に考慮しました。 Gitバージョン2.20以降、 &lt;code&gt;refs/tags/*&lt;/code&gt; を更新するためのフェッチは、プッシュ時と同じように機能します。つまり、refspec（または &lt;code&gt;--force&lt;/code&gt; ）に &lt;code&gt;+&lt;/code&gt; がなければ、更新は拒否されます。</target>
        </trans-unit>
        <trans-unit id="9514c500d61430538679eec9081979b274172cf9" translate="yes" xml:space="preserve">
          <source>Untracked cache</source>
          <target state="translated">未踏キャッシュ</target>
        </trans-unit>
        <trans-unit id="614ce4ff1bf92552970ab54ff766006d0da693f9" translate="yes" xml:space="preserve">
          <source>Untracked items have the following format:</source>
          <target state="translated">トラックされていない項目は、以下のような形式になっています。</target>
        </trans-unit>
        <trans-unit id="1eade895e693b4111455eda06a87af1097cf4d6c" translate="yes" xml:space="preserve">
          <source>Untyped &lt;a href=&quot;#def_object&quot;&gt;object&lt;/a&gt;, e.g. the contents of a file.</source>
          <target state="translated">型なし&lt;a href=&quot;#def_object&quot;&gt;オブジェクト&lt;/a&gt;（例：ファイルの内容）。</target>
        </trans-unit>
        <trans-unit id="7b839a219907b09268c047c522a03961e96bd78b" translate="yes" xml:space="preserve">
          <source>Unused configuration variable. Used in Git versions 2.20 and 2.21 as an escape hatch to enable the legacy shellscript implementation of rebase. Now the built-in rewrite of it in C is always used. Setting this will emit a warning, to alert any remaining users that setting this now does nothing.</source>
          <target state="translated">未使用の設定変数です。Git バージョン 2.20 と 2.21 で、レガシーなシェルスクリプトの実装である rebase を有効にするためのエスケープハッチとして使用されました。現在は、C 言語での組み込みの書き換えが常に使用されています。これを設定すると警告が表示され、残っているユーザーには何もしないことを警告します。</target>
        </trans-unit>
        <trans-unit id="ca31b4c795dcb03444e6d0c037dbcd47081c70a9" translate="yes" xml:space="preserve">
          <source>Update affected files from CVS repository before attempting export.</source>
          <target state="translated">エクスポートを試みる前に、CVS リポジトリから影響を受けるファイルを更新してください。</target>
        </trans-unit>
        <trans-unit id="82e59b151c004802a1fa23ba3e75a68d14df0e2a" translate="yes" xml:space="preserve">
          <source>Update an existing shelved changelist with this commit. Implies --shelve. Repeat for multiple shelved changelists.</source>
          <target state="translated">このコミットで既存の棚上げされた変更リストを更新します。-shelve を意味します。複数のシェル化された変更リストに対して繰り返してください。</target>
        </trans-unit>
        <trans-unit id="5433caf2e572561b5bb38ff5e69b0263d08b90aa" translate="yes" xml:space="preserve">
          <source>Update and examine branches from the repository you cloned from:</source>
          <target state="translated">クローンしたリポジトリからブランチを更新して調べます。</target>
        </trans-unit>
        <trans-unit id="381f15e94e347f076ef71f417ee29b782a6dcc4d" translate="yes" xml:space="preserve">
          <source>Update auxiliary info file to help dumb servers</source>
          <target state="translated">補助情報ファイルを更新して、ダムサーバーを支援する</target>
        </trans-unit>
        <trans-unit id="d94aecddb1a2d3c03afb4a7cf4e1bb3a0123c2c6" translate="yes" xml:space="preserve">
          <source>Update hook</source>
          <target state="translated">フックの更新</target>
        </trans-unit>
        <trans-unit id="e5f960e3f28d7d7ea59f8750682a356ae18535be" translate="yes" xml:space="preserve">
          <source>Update remote refs along with associated objects</source>
          <target state="translated">関連するオブジェクトと一緒にリモート参照を更新する</target>
        </trans-unit>
        <trans-unit id="ee3315ea0cbb49ab6105a89db0964480184c3ce9" translate="yes" xml:space="preserve">
          <source>Update the Git repository with recent changes from p4, rebasing your work on top:</source>
          <target state="translated">Git リポジトリを p4 からの最近の変更点で更新し、作業内容を上にリベースします。</target>
        </trans-unit>
        <trans-unit id="5937294218e2d7b95b7b77414b52c326239ca8d5" translate="yes" xml:space="preserve">
          <source>Update the index by adding new files that are unknown to the index and files modified in the working tree, but ignore files that have been removed from the working tree. This option is a no-op when no &amp;lt;pathspec&amp;gt; is used.</source>
          <target state="translated">インデックスで不明な新しいファイルと作業ツリーで変更されたファイルを追加して、インデックスを更新します。ただし、作業ツリーから削除されたファイルは無視してください。&amp;lt;pathspec&amp;gt;が使用されていない場合、このオプションは何もしません。</target>
        </trans-unit>
        <trans-unit id="94df66721f1bfd4990972c3f5f4a0d6b61f59f9e" translate="yes" xml:space="preserve">
          <source>Update the index just where it already has an entry matching &amp;lt;pathspec&amp;gt;. This removes as well as modifies index entries to match the working tree, but adds no new files.</source>
          <target state="translated">&amp;lt;pathspec&amp;gt;に一致するエントリがすでにある場所でのみインデックスを更新します。これにより、作業ツリーと一致するようにインデックスエントリが削除および変更されますが、新しいファイルは追加されません。</target>
        </trans-unit>
        <trans-unit id="03d173e098621e3730258998672da85e88b347b1" translate="yes" xml:space="preserve">
          <source>Update the index not only where the working tree has a file matching &amp;lt;pathspec&amp;gt; but also where the index already has an entry. This adds, modifies, and removes index entries to match the working tree.</source>
          <target state="translated">作業ツリーに&amp;lt;pathspec&amp;gt;に一致するファイルがある場所だけでなく、インデックスにすでにエントリがある場所でもインデックスを更新します。これにより、作業ツリーと一致するようにインデックスエントリが追加、変更、および削除されます。</target>
        </trans-unit>
        <trans-unit id="1a6e291eaaa3e731de98429f7fb37fdac90f0a22" translate="yes" xml:space="preserve">
          <source>Update the object name stored in a ref safely</source>
          <target state="translated">refに格納されているオブジェクト名を安全に更新する</target>
        </trans-unit>
        <trans-unit id="00f0c8a1eac4ed2966a7d563ef87a6387d365dcf" translate="yes" xml:space="preserve">
          <source>Update the origin repository&amp;rsquo;s master branch with the dev branch, allowing non-fast-forward updates. &lt;strong&gt;This can leave unreferenced commits dangling in the origin repository.&lt;/strong&gt; Consider the following situation, where a fast-forward is not possible:</source>
          <target state="translated">オリジンリポジトリのマスターブランチをdevブランチで更新し、早送り以外の更新を可能にします。&lt;strong&gt;これにより、参照されていないコミットが元のリポジトリにぶら下がる可能性があります。&lt;/strong&gt;早送りが不可能な次の状況を考えます。</target>
        </trans-unit>
        <trans-unit id="b73d3968359117cfd051c2e81a709d1d9e1579b7" translate="yes" xml:space="preserve">
          <source>Update the reference to the value of the top reflog entry (i.e. &amp;lt;ref&amp;gt;@{0}) if the previous top entry was pruned. (This option is ignored for symbolic references.)</source>
          <target state="translated">前のトップエントリがプルーニングされた場合は、リファレンスをトップのreflogエントリの値（&amp;lt;ref&amp;gt; @ {0}）に更新します。（このオプションはシンボリック参照では無視されます。）</target>
        </trans-unit>
        <trans-unit id="d7c08d3ae4fbcbbf6a3dc89cdba309659a4395bc" translate="yes" xml:space="preserve">
          <source>Update the reflog for &amp;lt;name&amp;gt; with &amp;lt;reason&amp;gt;. This is valid only when creating or updating a symbolic ref.</source>
          <target state="translated">&amp;lt;name&amp;gt;のreflogを&amp;lt;reason&amp;gt;で更新します。これは、シンボリック参照を作成または更新する場合にのみ有効です。</target>
        </trans-unit>
        <trans-unit id="d053e75e709458eca9f01e5c8910658ea18a25cf" translate="yes" xml:space="preserve">
          <source>Update the registered submodules to match what the superproject expects by cloning missing submodules, fetching missing commits in submodules and updating the working tree of the submodules. The &quot;updating&quot; can be done in several ways depending on command line options and the value of &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; configuration variable. The command line option takes precedence over the configuration variable. If neither is given, a &lt;code&gt;checkout&lt;/code&gt; is performed. The &lt;code&gt;update&lt;/code&gt; procedures supported both from the command line as well as through the &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; configuration are:</source>
          <target state="translated">登録されているサブモジュールを更新して、欠落しているサブモジュールを複製し、サブモジュールで欠落しているコミットをフェッチし、サブモジュールの作業ツリーを更新することにより、スーパープロジェクトが期待するものと一致させます。 「更新」は、コマンドラインオプションと &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; 構成変数の値に応じて、いくつかの方法で実行できます。コマンドラインオプションは、構成変数よりも優先されます。どちらも指定されていない場合、 &lt;code&gt;checkout&lt;/code&gt; が実行されます。 &lt;code&gt;update&lt;/code&gt; 手順は、コマンドラインから、ならびにを通して両方をサポート &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; 構成は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9a189cb9ecf6f808972788504f5218556d75488e" translate="yes" xml:space="preserve">
          <source>Update the remote-tracking branches for the repository you cloned from, then merge one of them into your current branch:</source>
          <target state="translated">クローンしたリポジトリのリモートトラッキングブランチを更新し、そのうちの一つを現在のブランチにマージします。</target>
        </trans-unit>
        <trans-unit id="b4a6a66956cae4a12a849cae6094fa1d9187d293" translate="yes" xml:space="preserve">
          <source>Update the remote-tracking branches:</source>
          <target state="translated">リモートトラッキングブランチを更新します。</target>
        </trans-unit>
        <trans-unit id="f68dff1cbdca38d9a97763a1d9fd849e951b6a1b" translate="yes" xml:space="preserve">
          <source>Updates files in the working tree to match the version in the index or the specified tree. If no pathspec was given, &lt;code&gt;git checkout&lt;/code&gt; will also update &lt;code&gt;HEAD&lt;/code&gt; to set the specified branch as the current branch.</source>
          <target state="translated">作業ツリーのファイルを更新して、インデックスまたは指定されたツリーのバージョンと一致させます。pathspecが指定されていない場合、 &lt;code&gt;git checkout&lt;/code&gt; は &lt;code&gt;HEAD&lt;/code&gt; も更新して、指定されたブランチを現在のブランチとして設定します。</target>
        </trans-unit>
        <trans-unit id="091bf3e8c6fb28b8688a9117ac018615896df561" translate="yes" xml:space="preserve">
          <source>Updates remote refs using local refs, while sending objects necessary to complete the given refs.</source>
          <target state="translated">与えられた参照を完了させるために必要なオブジェクトを送信しながら、ローカル参照を使用してリモート参照を更新します。</target>
        </trans-unit>
        <trans-unit id="91ca9b60db53a2ebedea4c579e08371ec4025869" translate="yes" xml:space="preserve">
          <source>Updating A with the resulting merge commit will fast-forward and your push will be accepted.</source>
          <target state="translated">マージコミットの結果に応じて A を更新すると、早送りされ、あなたのプッシュが受け入れられます。</target>
        </trans-unit>
        <trans-unit id="b1b31935884de26d68d690781ac1ec814b3bc924" translate="yes" xml:space="preserve">
          <source>Updating a repository with git fetch</source>
          <target state="translated">git fetch でリポジトリを更新する</target>
        </trans-unit>
        <trans-unit id="c2ed1ab77aee7c3aaed70bc448641d662955a12f" translate="yes" xml:space="preserve">
          <source>Updating existing tests that assume GIT_TRACE format messages.</source>
          <target state="translated">GIT_TRACE 形式のメッセージを前提とした既存のテストを更新しました。</target>
        </trans-unit>
        <trans-unit id="c5ded60beb1b0eb17cab63a8e09a8acd2261286e" translate="yes" xml:space="preserve">
          <source>Updating the index did something else too: it created a &lt;code&gt;.git/index&lt;/code&gt; file. This is the index that describes your current working tree, and something you should be very aware of. Again, you normally never worry about the index file itself, but you should be aware of the fact that you have not actually really &quot;checked in&quot; your files into Git so far, you&amp;rsquo;ve only &lt;strong&gt;told&lt;/strong&gt; Git about them.</source>
          <target state="translated">インデックスを更新すると、別のことも行われました。それにより、 &lt;code&gt;.git/index&lt;/code&gt; ファイルが作成されました。これは、現在の作業ツリーを説明するインデックスであり、非常に注意する必要があります。ここでも、あなたは通常、インデックスファイル自体心配はありませんが、あなたは、あなたがいない実際には本当にGitリポジトリへのあなたのファイルはこれまでのところ、あなただけしました「で確認」しているという事実を認識しておく必要があり&lt;strong&gt;語っ&lt;/strong&gt;それらについてのGitを。</target>
        </trans-unit>
        <trans-unit id="583381e5edf6e3ab467919c38286667f0916979d" translate="yes" xml:space="preserve">
          <source>Upon completion, &amp;lt;branch&amp;gt; will be the current branch.</source>
          <target state="translated">完了すると、&amp;lt;branch&amp;gt;が現在のブランチになります。</target>
        </trans-unit>
        <trans-unit id="c956664b8da61af6d0e1bf33a6e1ff75cbe45ad1" translate="yes" xml:space="preserve">
          <source>Upon seeing an invalid object name in the input, pretend as if the bad input was not given.</source>
          <target state="translated">入力に無効なオブジェクト名があった場合は、不正な入力がなかったことにしてください。</target>
        </trans-unit>
        <trans-unit id="d725441fc805b8226e9417fb2c8cf53ac8d791d5" translate="yes" xml:space="preserve">
          <source>Upstream branch to compare against. May be any valid commit, not just an existing branch name. Defaults to the configured upstream for the current branch.</source>
          <target state="translated">比較対象となるアップストリームブランチ。既存のブランチ名だけでなく、有効なコミットであっても構いません。デフォルトは、現在のブランチのアップストリームで設定されているものです。</target>
        </trans-unit>
        <trans-unit id="f5808323e4ba717fc383cb75e63b6cf3a4e857e7" translate="yes" xml:space="preserve">
          <source>Upstream branch to search for equivalent commits. Defaults to the upstream branch of HEAD.</source>
          <target state="translated">同等のコミットを検索するアップストリームブランチ。デフォルトは HEAD のアップストリームブランチです。</target>
        </trans-unit>
        <trans-unit id="309bc26d3c4c2649258f95c7069216bb2a7ac5f4" translate="yes" xml:space="preserve">
          <source>Upstream location from which commits are identified to submit to p4. By default, this is the most recent p4 commit reachable from &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">p4に送信するコミットが識別される上流の場所。デフォルトでは、これは &lt;code&gt;HEAD&lt;/code&gt; から到達可能な最新のp4コミットです。</target>
        </trans-unit>
        <trans-unit id="df28f1403e8348eae4829434034d1a95e5fe659d" translate="yes" xml:space="preserve">
          <source>Url translation</source>
          <target state="translated">Url翻訳</target>
        </trans-unit>
        <trans-unit id="f51159e5f3b0adbeed98e188d040286280a5320b" translate="yes" xml:space="preserve">
          <source>Usage text</source>
          <target state="translated">使用テキスト</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="6039144c2dc6586b6f3f0cb7423bcc0b3de0d0c1" translate="yes" xml:space="preserve">
          <source>Use &quot;patience diff&quot; algorithm when generating patches.</source>
          <target state="translated">パッチを生成する際には、&quot;patient diff&quot; アルゴリズムを使用してください。</target>
        </trans-unit>
        <trans-unit id="1712fa1f1e6f89a27b7d3117ed39073a3258971d" translate="yes" xml:space="preserve">
          <source>Use &amp;lt;dir&amp;gt; to store the resulting files, instead of the current working directory.</source>
          <target state="translated">現在の作業ディレクトリではなく、&amp;lt;dir&amp;gt;を使用して結果のファイルを保存します。</target>
        </trans-unit>
        <trans-unit id="89ed1ad2d65d4e1af42e685a9ee22c739e5d2c9b" translate="yes" xml:space="preserve">
          <source>Use &amp;lt;message&amp;gt; instead of the branch names for the first line of the log message. For use with &lt;code&gt;--log&lt;/code&gt;.</source>
          <target state="translated">ログメッセージの最初の行のブランチ名の代わりに&amp;lt;message&amp;gt;を使用します。 &lt;code&gt;--log&lt;/code&gt; とともに使用します。</target>
        </trans-unit>
        <trans-unit id="a8e6c324c4e7440184ef28eb2f6fc1fca5a4a325" translate="yes" xml:space="preserve">
          <source>Use &amp;lt;regex&amp;gt; to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies &lt;code&gt;--word-diff&lt;/code&gt; unless it was already enabled.</source>
          <target state="translated">空白文字以外の文字列を単語と見なす代わりに、&amp;lt;regex&amp;gt;を使用して単語を決定します。また、すでに有効になっていない限り、 &lt;code&gt;--word-diff&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="f70b8a97f949594b729b07efce2ca59a63023925" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;!&lt;/code&gt; to not make the corresponding negated long option available.</source>
          <target state="translated">使用してください &lt;code&gt;!&lt;/code&gt; 対応するnegated longオプションを使用可能にしない。</target>
        </trans-unit>
        <trans-unit id="f7924a219e6794d45a36b15b2c44738227b795ff" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; to set the symbolic-ref &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; explicitly. e.g., &quot;git remote set-head origin master&quot; will set the symbolic-ref &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; to &lt;code&gt;refs/remotes/origin/master&lt;/code&gt;. This will only work if &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; already exists; if not it must be fetched first.</source>
          <target state="translated">&lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; を使用して、symbolic-ref &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; を明示的に設定します。たとえば、「git remote set-head origin master」は、symbolic-ref &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; を &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; に設定します。これは、 &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; がすでに存在する場合にのみ機能します。そうでない場合は、最初にフェッチする必要があります。</target>
        </trans-unit>
        <trans-unit id="d950943422ee3b93275d1e4b1e510463e5b432e0" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; to contact a running cache daemon (or start a new cache daemon if one is not started). Defaults to &lt;code&gt;$XDG_CACHE_HOME/git/credential/socket&lt;/code&gt; unless &lt;code&gt;~/.git-credential-cache/&lt;/code&gt; exists in which case &lt;code&gt;~/.git-credential-cache/socket&lt;/code&gt; is used instead. If your home directory is on a network-mounted filesystem, you may need to change this to a local filesystem. You must specify an absolute path.</source>
          <target state="translated">&lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; を使用して、実行中のキャッシュデーモンに接続します（または、キャッシュデーモンが開始されていない場合は、新しいキャッシュデーモンを開始します）。 &lt;code&gt;~/.git-credential-cache/&lt;/code&gt; が存在しない限り、デフォルトは &lt;code&gt;$XDG_CACHE_HOME/git/credential/socket&lt;/code&gt; です。この場合、代わりに &lt;code&gt;~/.git-credential-cache/socket&lt;/code&gt; が使用されます。ホームディレクトリがネットワークマウントされたファイルシステムにある場合、これをローカルファイルシステムに変更する必要があるかもしれません。絶対パスを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="faabe60607ec900b5e4ad4f074b4870d8f9c10c6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; to lookup and store credentials. The file will have its filesystem permissions set to prevent other users on the system from reading it, but will not be encrypted or otherwise protected. If not specified, credentials will be searched for from &lt;code&gt;~/.git-credentials&lt;/code&gt; and &lt;code&gt;$XDG_CONFIG_HOME/git/credentials&lt;/code&gt;, and credentials will be written to &lt;code&gt;~/.git-credentials&lt;/code&gt; if it exists, or &lt;code&gt;$XDG_CONFIG_HOME/git/credentials&lt;/code&gt; if it exists and the former does not. See also &lt;a href=&quot;#FILES&quot;&gt;FILES&lt;/a&gt;.</source>
          <target state="translated">使用 &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; 資格情報を検索し、保存するために。このファイルには、システム上の他のユーザーがファイルを読み取れないようにファイルシステムのアクセス許可が設定されていますが、暗号化されたり、保護されたりすることはありません。指定しない場合、資格情報はから検索されます &lt;code&gt;~/.git-credentials&lt;/code&gt; および &lt;code&gt;$XDG_CONFIG_HOME/git/credentials&lt;/code&gt; 、および資格情報に書き込まれます &lt;code&gt;~/.git-credentials&lt;/code&gt; が存在する場合、または &lt;code&gt;$XDG_CONFIG_HOME/git/credentials&lt;/code&gt; が存在する場合前者はしません。&lt;a href=&quot;#FILES&quot;&gt;FILES&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="aadb92eae500ef695bbe6a445720ce25246dd04e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;*&lt;/code&gt; to mean that this option should not be listed in the usage generated for the &lt;code&gt;-h&lt;/code&gt; argument. It&amp;rsquo;s shown for &lt;code&gt;--help-all&lt;/code&gt; as documented in &lt;a href=&quot;gitcli&quot;&gt;gitcli[7]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; を使用すると、このオプションは &lt;code&gt;-h&lt;/code&gt; 引数に対して生成される使用法にリストされません。&lt;a href=&quot;gitcli&quot;&gt;gitcli [7]に&lt;/a&gt;記載されている &lt;code&gt;--help-all&lt;/code&gt; に対して表示されます。</target>
        </trans-unit>
        <trans-unit id="3bbcee2a044e9c08185b38acb1e1c57ceea88054" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--no-guess&lt;/code&gt; to disable this.</source>
          <target state="translated">使用 &lt;code&gt;--no-guess&lt;/code&gt; 、これを無効にします。</target>
        </trans-unit>
        <trans-unit id="6deefc2a8fa6667ca14a90dee15faf81b1f0546a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;-o master&lt;/code&gt; for continuing an import that was initially done by the old cvs2git tool.</source>
          <target state="translated">古いcvs2gitツールによって最初に行われたインポートを続行するには、 &lt;code&gt;-o master&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="a4527eec708654a210ce88433047c8e573fb91f2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;-r&lt;/code&gt; together with &lt;code&gt;-d&lt;/code&gt; to delete remote-tracking branches. Note, that it only makes sense to delete remote-tracking branches if they no longer exist in the remote repository or if &lt;code&gt;git fetch&lt;/code&gt; was configured not to fetch them again. See also the &lt;code&gt;prune&lt;/code&gt; subcommand of &lt;a href=&quot;git-remote&quot;&gt;git-remote[1]&lt;/a&gt; for a way to clean up all obsolete remote-tracking branches.</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; を &lt;code&gt;-d&lt;/code&gt; と一緒に使用して、リモート追跡ブランチを削除します。リモート追跡ブランチがリモートリポジトリに存在しなくなった場合、または &lt;code&gt;git fetch&lt;/code&gt; がそれらを再度フェッチしないように構成されている場合にのみ、リモート追跡ブランチを削除しても意味があることに注意してください。廃止されたすべてのリモート追跡ブランチをクリーンアップする方法については、&lt;a href=&quot;git-remote&quot;&gt;git-remote [1]&lt;/a&gt;の &lt;code&gt;prune&lt;/code&gt; サブコマンドも参照してください。</target>
        </trans-unit>
        <trans-unit id="eb7d25cab29167524de808a8da669505756898ee" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;=&lt;/code&gt; if the option takes an argument.</source>
          <target state="translated">オプションが引数を取る場合は &lt;code&gt;=&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="d247642d4c8609f74c2030daa3d24c7c82d2e46d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;?&lt;/code&gt; to mean that the option takes an optional argument. You probably want to use the &lt;code&gt;--stuck-long&lt;/code&gt; mode to be able to unambiguously parse the optional argument.</source>
          <target state="translated">使用し &lt;code&gt;?&lt;/code&gt; オプションがオプションの引数を取ることを意味します。おそらく &lt;code&gt;--stuck-long&lt;/code&gt; モードを使用して、オプションの引数を明確に解析できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="7929eb6fd77d1ea35c9c481fc89518eafcc1cd45" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git bisect&lt;/code&gt; to get a short usage description, and &lt;code&gt;git bisect
help&lt;/code&gt; or &lt;code&gt;git bisect -h&lt;/code&gt; to get a long usage description.</source>
          <target state="translated">&lt;code&gt;git bisect&lt;/code&gt; を使用して短い使用法の説明を取得し、 &lt;code&gt;git bisect help&lt;/code&gt; または &lt;code&gt;git bisect -h&lt;/code&gt; を使用して長い使用法の説明を取得します。</target>
        </trans-unit>
        <trans-unit id="599c65a25784af23c9351ba6f4874c534a65a263" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git cherry origin&lt;/code&gt; to see which ones of your patches were accepted, and/or use &lt;code&gt;git rebase origin&lt;/code&gt; to port your unmerged changes forward to the updated upstream.</source>
          <target state="translated">&lt;code&gt;git cherry origin&lt;/code&gt; を使用して、受け入れられたパッチを確認するか、 &lt;code&gt;git rebase origin&lt;/code&gt; を使用して、マージされていない変更を更新されたアップストリームに転送します。</target>
        </trans-unit>
        <trans-unit id="f1986201248cbf297f2fb86d6f520b30d057ce7d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git fetch &amp;lt;remote&amp;gt;&lt;/code&gt; or &lt;code&gt;git remote update&lt;/code&gt; to stay up to date.</source>
          <target state="translated">使用して、 &lt;code&gt;git fetch &amp;lt;remote&amp;gt;&lt;/code&gt; または &lt;code&gt;git remote update&lt;/code&gt; 最新の状態に滞在します。</target>
        </trans-unit>
        <trans-unit id="252ef42d37b56d31d5e5dc2525ae974052dfca91" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git format-patch origin&lt;/code&gt; to prepare patches for e-mail submission to your upstream and send it out. Go back to step 2. and continue.</source>
          <target state="translated">&lt;code&gt;git format-patch origin&lt;/code&gt; を使用して、アップストリームへの電子メール送信用のパッチを準備して送信します。手順2に戻り、続行します。</target>
        </trans-unit>
        <trans-unit id="cd30f3ed950161de3f8267d9a18953af3c02784f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git mergetool&lt;/code&gt; to run one of several merge utilities to resolve merge conflicts. It is typically run after &lt;code&gt;git merge&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git mergetool&lt;/code&gt; を使用して、いくつかのマージユーティリティの1つを実行し、マージの競合を解決します。通常は &lt;code&gt;git merge&lt;/code&gt; の後に実行されます。</target>
        </trans-unit>
        <trans-unit id="6b298c06fc405635f29d06efdf0f42592d8075f2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git rev-parse&lt;/code&gt; in option parsing mode (see PARSEOPT section below).</source>
          <target state="translated">オプション解析モードで &lt;code&gt;git rev-parse&lt;/code&gt; を使用します（下記のPARSEOPTセクションを参照）。</target>
        </trans-unit>
        <trans-unit id="7c9820d48befbd19730095f238fb8a15824823ad" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git rev-parse&lt;/code&gt; in shell quoting mode (see SQ-QUOTE section below). In contrast to the &lt;code&gt;--sq&lt;/code&gt; option below, this mode does only quoting. Nothing else is done to command input.</source>
          <target state="translated">シェルクォートモードで &lt;code&gt;git rev-parse&lt;/code&gt; を使用します（以下のSQ-QUOTEセクションを参照）。以下の &lt;code&gt;--sq&lt;/code&gt; オプションとは対照的に、このモードは引用のみを行います。コマンド入力に対して他に何も行われません。</target>
        </trans-unit>
        <trans-unit id="4c4d44083fa5e2a6971987cf935297be30994f4c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git stash&lt;/code&gt; when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the &lt;code&gt;HEAD&lt;/code&gt; commit.</source>
          <target state="translated">作業ディレクトリとインデックスの現在の状態を記録したいが、クリーンな作業ディレクトリに戻りたい場合は、 &lt;code&gt;git stash&lt;/code&gt; を使用してください。このコマンドは、ローカルの変更を保存し、 &lt;code&gt;HEAD&lt;/code&gt; コミットに一致するように作業ディレクトリを元に戻します。</target>
        </trans-unit>
        <trans-unit id="41c11f9d8154a7d9c49ff48bc15e09cdeb4a9a5c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git stripspace --strip-comments&lt;/code&gt; to obtain:</source>
          <target state="translated">取得するには、 &lt;code&gt;git stripspace --strip-comments&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="141b00818c5025cc15ff515d81283fc5705a8a4e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git stripspace&lt;/code&gt; with no arguments to obtain:</source>
          <target state="translated">引数なしで &lt;code&gt;git stripspace&lt;/code&gt; を使用して取得します。</target>
        </trans-unit>
        <trans-unit id="ae0479a18945009a7ebac30bdfceaa72c61a99c4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ident&lt;/code&gt; in the &lt;code&gt;From:&lt;/code&gt; header of each commit email. If the author ident of the commit is not textually identical to the provided &lt;code&gt;ident&lt;/code&gt;, place a &lt;code&gt;From:&lt;/code&gt; header in the body of the message with the original author. If no &lt;code&gt;ident&lt;/code&gt; is given, use the committer ident.</source>
          <target state="translated">各コミットメールの &lt;code&gt;From:&lt;/code&gt; ヘッダーで &lt;code&gt;ident&lt;/code&gt; を使用します。コミットの著者IDENTはテキストで提供さと同一でない場合 &lt;code&gt;ident&lt;/code&gt; 、場所A &lt;code&gt;From:&lt;/code&gt; 原作者のメッセージの本体内のヘッダ。 &lt;code&gt;ident&lt;/code&gt; が指定されていない場合は、コミッターIDを使用します。</target>
        </trans-unit>
        <trans-unit id="8fb68f530aa46816206d7ea34908da4d297edef3" translate="yes" xml:space="preserve">
          <source>Use IPv4 addresses only, ignoring IPv6 addresses.</source>
          <target state="translated">IPv6アドレスは無視して、IPv4アドレスのみを使用してください。</target>
        </trans-unit>
        <trans-unit id="d89ac89f76f16a68a863b0d9f578ffd1a558d6b0" translate="yes" xml:space="preserve">
          <source>Use IPv6 addresses only, ignoring IPv4 addresses.</source>
          <target state="translated">IPv4アドレスは無視して、IPv6アドレスのみを使用してください。</target>
        </trans-unit>
        <trans-unit id="23206ddfb8d01b68973d7bd9cccf799f208e3657" translate="yes" xml:space="preserve">
          <source>Use Message &amp;rarr; Insert file&amp;hellip;​ and insert the patch.</source>
          <target state="translated">メッセージ&amp;rarr;ファイルの挿入&amp;hellip;を使用して、パッチを挿入します。</target>
        </trans-unit>
        <trans-unit id="1b7e380bb9ef947a64359e01f17ce54cd3bdece1" translate="yes" xml:space="preserve">
          <source>Use One Mark Per Commit</source>
          <target state="translated">コミットごとに1つのマークを使用する</target>
        </trans-unit>
        <trans-unit id="c24268aab2b43d4e294643c8fbcbd60d377e139b" translate="yes" xml:space="preserve">
          <source>Use POSIX extended/basic regexp for patterns. Default is to use basic regexp.</source>
          <target state="translated">パターンに POSIX 拡張/基本正規表現を使用します。デフォルトは基本正規表現を使用します。</target>
        </trans-unit>
        <trans-unit id="36e96e4a2fd002679f3b794b4968539810c5c2eb" translate="yes" xml:space="preserve">
          <source>Use Perl-compatible regular expressions for patterns.</source>
          <target state="translated">パターンにはPerl互換の正規表現を使用します。</target>
        </trans-unit>
        <trans-unit id="fd46ce4ee0de88bb1a4ebb0e0c6375d24c2fb065" translate="yes" xml:space="preserve">
          <source>Use SO_REUSEADDR when binding the listening socket. This allows the server to restart without waiting for old connections to time out.</source>
          <target state="translated">リスニングソケットをバインドする際にSO_REUSEADDRを使用します。これにより、古い接続がタイムアウトするのを待たずにサーバを再起動することができます。</target>
        </trans-unit>
        <trans-unit id="f351ffbdfc957393f82f6653e37778e19987b350" translate="yes" xml:space="preserve">
          <source>Use Tag Fixup Branches</source>
          <target state="translated">タグの修正ブランチを使用する</target>
        </trans-unit>
        <trans-unit id="67640e675158aa473b8a69cc0cdb46fb8ed7283f" translate="yes" xml:space="preserve">
          <source>Use a &quot;stable&quot; sum of hashes as the patch ID. With this option:</source>
          <target state="translated">パッチ ID として「安定した」ハッシュの合計を使用します。このオプションを使うと</target>
        </trans-unit>
        <trans-unit id="0ec5feaf620cc0230519584645c952a1ae99d83c" translate="yes" xml:space="preserve">
          <source>Use a client spec to find the list of interesting files in p4. See the &quot;CLIENT SPEC&quot; section below.</source>
          <target state="translated">クライアントスペックを使って、p4の中の興味深いファイルのリストを探します。後述の「クライアントスペック」を参照してください。</target>
        </trans-unit>
        <trans-unit id="cf410607b4d646fae6b37dffcb3f37fcc481f52b" translate="yes" xml:space="preserve">
          <source>Use a mergetool. &lt;code&gt;git mergetool&lt;/code&gt; to launch a graphical mergetool which will work you through the merge.</source>
          <target state="translated">mergetoolを使用します。 &lt;code&gt;git mergetool&lt;/code&gt; は、マージを実行するグ​​ラフィカルなマージツールを起動します。</target>
        </trans-unit>
        <trans-unit id="e7589df3d820308df2c8a838829de10cfbcf2077" translate="yes" xml:space="preserve">
          <source>Use a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a &lt;code&gt;+&lt;/code&gt;/&lt;code&gt;-&lt;/code&gt;/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde &lt;code&gt;~&lt;/code&gt; on a line of its own.</source>
          <target state="translated">スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/変更されていないランは、通常の統一されたdiff形式で出力されます。行の先頭に &lt;code&gt;+&lt;/code&gt; / &lt;code&gt;-&lt;/code&gt; / ``文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ &lt;code&gt;~&lt;/code&gt; で表されます。</target>
        </trans-unit>
        <trans-unit id="77b024aefcbc37a1627539595d18a928f0842816" translate="yes" xml:space="preserve">
          <source>Use a tarball as a starting point for a new repository.</source>
          <target state="translated">新しいリポジトリの出発点として tarball を使用します。</target>
        </trans-unit>
        <trans-unit id="afac3b09febbe243aa11caf12f594c7284e7bf23" translate="yes" xml:space="preserve">
          <source>Use an &quot;unstable&quot; hash as the patch ID. With this option, the result produced is compatible with the patch-id value produced by git 1.9 and older. Users with pre-existing databases storing patch-ids produced by git 1.9 and older (who do not deal with reordered patches) may want to use this option.</source>
          <target state="translated">パッチ ID として &quot;unstable&quot; ハッシュを使用します。このオプションを指定すると、生成される結果は git 1.9 以降で生成された patch-id と互換性があります。git 1.9 以降で作成されたパッチ ID を保存しているデータベースがすでにある場合 (再注文されたパッチを扱わない場合)は、このオプションを使用したほうがよいでしょう。</target>
        </trans-unit>
        <trans-unit id="ef4088fc09156b38070cb26da8281dc7bfd8c504" translate="yes" xml:space="preserve">
          <source>Use an atomic transaction for updating the refs. If any of the refs fails to update then the entire push will fail without changing any refs.</source>
          <target state="translated">参照の更新にはアトミックトランザクションを使用します。いずれかの refs が更新に失敗した場合は、refs を変更せずにプッシュ全体が失敗します。</target>
        </trans-unit>
        <trans-unit id="049c3e05f1b188c69413c7549059c67376f76ed1" translate="yes" xml:space="preserve">
          <source>Use an atomic transaction on the remote side if available. Either all refs are updated, or on error, no refs are updated. If the server does not support atomic pushes the push will fail.</source>
          <target state="translated">利用可能であれば、リモート側でアトミックトランザクションを使用します。すべての参照が更新されるか、エラーの場合は参照が更新されません。サーバがアトミックプッシュをサポートしていない場合、プッシュは失敗します。</target>
        </trans-unit>
        <trans-unit id="e55fb404106de44576d9bc731a7fb4baf9a6337c" translate="yes" xml:space="preserve">
          <source>Use binary search to find the commit that introduced a bug</source>
          <target state="translated">バイナリ検索を使ってバグが発生したコミットを見つける</target>
        </trans-unit>
        <trans-unit id="78ee9b127501691d305b39cc3fc13fc74a1d22a1" translate="yes" xml:space="preserve">
          <source>Use customized color for &lt;code&gt;git add --interactive&lt;/code&gt; and &lt;code&gt;git clean --interactive&lt;/code&gt; output. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; may be &lt;code&gt;prompt&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;help&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt;, for four distinct types of normal output from interactive commands.</source>
          <target state="translated">&lt;code&gt;git add --interactive&lt;/code&gt; および &lt;code&gt;git clean --interactive&lt;/code&gt; 出力にカスタマイズされた色を使用します。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; は、対話型コマンドからの4つの異なるタイプの通常の出力に対して、 &lt;code&gt;prompt&lt;/code&gt; 、 &lt;code&gt;header&lt;/code&gt; 、 &lt;code&gt;help&lt;/code&gt; または &lt;code&gt;error&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bf3aeb7f00c3d69ade01b5cc321078d4f50948ae" translate="yes" xml:space="preserve">
          <source>Use customized color for &lt;code&gt;git log --decorate&lt;/code&gt; output. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; is one of &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;remoteBranch&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;stash&lt;/code&gt; or &lt;code&gt;HEAD&lt;/code&gt; for local branches, remote-tracking branches, tags, stash and HEAD, respectively and &lt;code&gt;grafted&lt;/code&gt; for grafted commits.</source>
          <target state="translated">&lt;code&gt;git log --decorate&lt;/code&gt; 出力にカスタマイズされた色を使用します。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; の一つである &lt;code&gt;branch&lt;/code&gt; 、 &lt;code&gt;remoteBranch&lt;/code&gt; 、 &lt;code&gt;tag&lt;/code&gt; 、 &lt;code&gt;stash&lt;/code&gt; 又は &lt;code&gt;HEAD&lt;/code&gt; それぞれ、ローカルブランチのリモート追跡ブランチ、タグ、スタッシュとHEADと &lt;code&gt;grafted&lt;/code&gt; グラフトコミットするため。</target>
        </trans-unit>
        <trans-unit id="29ecef38edab0e1998d46583be9558cf2a562eff" translate="yes" xml:space="preserve">
          <source>Use customized color for branch coloration. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; is one of &lt;code&gt;current&lt;/code&gt; (the current branch), &lt;code&gt;local&lt;/code&gt; (a local branch), &lt;code&gt;remote&lt;/code&gt; (a remote-tracking branch in refs/remotes/), &lt;code&gt;upstream&lt;/code&gt; (upstream tracking branch), &lt;code&gt;plain&lt;/code&gt; (other refs).</source>
          <target state="translated">ブランチの配色にはカスタマイズした色を使用します。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; は、 &lt;code&gt;current&lt;/code&gt; （現在のブランチ）、 &lt;code&gt;local&lt;/code&gt; （ローカルブランチ）、 &lt;code&gt;remote&lt;/code&gt; （refs / remotes /のリモート追跡ブランチ）、 &lt;code&gt;upstream&lt;/code&gt; （上流の追跡ブランチ）、 &lt;code&gt;plain&lt;/code&gt; （他の参照）のいずれかです。</target>
        </trans-unit>
        <trans-unit id="fcdeebdb47ef8466da45d806c0dccf091f4447a0" translate="yes" xml:space="preserve">
          <source>Use customized color for diff colorization. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; specifies which part of the patch to use the specified color, and is one of &lt;code&gt;context&lt;/code&gt; (context text - &lt;code&gt;plain&lt;/code&gt; is a historical synonym), &lt;code&gt;meta&lt;/code&gt; (metainformation), &lt;code&gt;frag&lt;/code&gt; (hunk header), &lt;code&gt;func&lt;/code&gt; (function in hunk header), &lt;code&gt;old&lt;/code&gt; (removed lines), &lt;code&gt;new&lt;/code&gt; (added lines), &lt;code&gt;commit&lt;/code&gt; (commit headers), &lt;code&gt;whitespace&lt;/code&gt; (highlighting whitespace errors), &lt;code&gt;oldMoved&lt;/code&gt; (deleted lines), &lt;code&gt;newMoved&lt;/code&gt; (added lines), &lt;code&gt;oldMovedDimmed&lt;/code&gt;, &lt;code&gt;oldMovedAlternative&lt;/code&gt;, &lt;code&gt;oldMovedAlternativeDimmed&lt;/code&gt;, &lt;code&gt;newMovedDimmed&lt;/code&gt;, &lt;code&gt;newMovedAlternative&lt;/code&gt;&lt;code&gt;newMovedAlternativeDimmed&lt;/code&gt; (See the &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; setting of &lt;code&gt;--color-moved&lt;/code&gt; in &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt; for details), &lt;code&gt;contextDimmed&lt;/code&gt;, &lt;code&gt;oldDimmed&lt;/code&gt;, &lt;code&gt;newDimmed&lt;/code&gt;, &lt;code&gt;contextBold&lt;/code&gt;, &lt;code&gt;oldBold&lt;/code&gt;, and &lt;code&gt;newBold&lt;/code&gt; (see &lt;a href=&quot;git-range-diff&quot;&gt;git-range-diff[1]&lt;/a&gt; for details).</source>
          <target state="translated">カスタマイズされた色を使用して、差分の色付けを行います。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; は、指定された色を使用するパッチの部分を指定し、 &lt;code&gt;context&lt;/code&gt; （コンテキストテキスト- &lt;code&gt;plain&lt;/code&gt; は履歴の同義語です）、 &lt;code&gt;meta&lt;/code&gt; （メタ情報）、 &lt;code&gt;frag&lt;/code&gt; （ハンクヘッダー）、 &lt;code&gt;func&lt;/code&gt; （ハンクヘッダー内の関数）、 &lt;code&gt;old&lt;/code&gt; （削除された行）、 &lt;code&gt;new&lt;/code&gt; （追加された行）、 &lt;code&gt;commit&lt;/code&gt; （ヘッダーのコミット）、 &lt;code&gt;whitespace&lt;/code&gt; （空白エラーの強調表示）、 &lt;code&gt;oldMoved&lt;/code&gt; （削除された行）、 &lt;code&gt;newMoved&lt;/code&gt; （追加された行）、 &lt;code&gt;oldMovedDimmed&lt;/code&gt; 、 &lt;code&gt;oldMovedAlternative&lt;/code&gt; 、 &lt;code&gt;oldMovedAlternativeDimmed&lt;/code&gt; 、 &lt;code&gt;newMovedDimmed&lt;/code&gt; 、 &lt;code&gt;newMovedAlternative&lt;/code&gt; &lt;code&gt;newMovedAlternativeDimmed&lt;/code&gt; （詳細については、&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]&lt;/a&gt;の &lt;code&gt;--color-moved&lt;/code&gt; の &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; 設定を参照）、 &lt;code&gt;contextDimmed&lt;/code&gt; 、 &lt;code&gt;oldDimmed&lt;/code&gt; 、 &lt;code&gt;newDimmed&lt;/code&gt; 、 &lt;code&gt;contextBold&lt;/code&gt; 、 &lt;code&gt;oldBold&lt;/code&gt; 、および &lt;code&gt;newBold&lt;/code&gt; （&lt;a href=&quot;git-range-diff&quot;&gt;git-rangeを&lt;/a&gt;参照）1]詳細については）。</target>
        </trans-unit>
        <trans-unit id="799532fe06b09693cab5782f0c7b74d1305d2cb1" translate="yes" xml:space="preserve">
          <source>Use customized color for each remote keyword. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; may be &lt;code&gt;hint&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;success&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt; which match the corresponding keyword.</source>
          <target state="translated">各リモートキーワードにカスタマイズされた色を使用します。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; は、対応するキーワードに一致する &lt;code&gt;hint&lt;/code&gt; 、 &lt;code&gt;warning&lt;/code&gt; 、 &lt;code&gt;success&lt;/code&gt; または &lt;code&gt;error&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e8363e3bb3b19269f1bec63465f050d08c7400a8" translate="yes" xml:space="preserve">
          <source>Use customized color for grep colorization. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; specifies which part of the line to use the specified color, and is one of</source>
          <target state="translated">grepの色付けにカスタマイズした色を使用します。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; は、指定した色を使用する線の部分を指定します。</target>
        </trans-unit>
        <trans-unit id="3d940f7a54cc13b6b8a420b163ce2b7e4ccedf38" translate="yes" xml:space="preserve">
          <source>Use customized color for hints.</source>
          <target state="translated">ヒントにカスタマイズした色を使用します。</target>
        </trans-unit>
        <trans-unit id="a7bc0186c1d40a59aee910eedb6524484cbce3a0" translate="yes" xml:space="preserve">
          <source>Use customized color for push errors.</source>
          <target state="translated">プッシュエラーにカスタマイズされた色を使用します。</target>
        </trans-unit>
        <trans-unit id="efd1e4b094e6a540e69b42772ae161651f4648a2" translate="yes" xml:space="preserve">
          <source>Use customized color for status colorization. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; is one of &lt;code&gt;header&lt;/code&gt; (the header text of the status message), &lt;code&gt;added&lt;/code&gt; or &lt;code&gt;updated&lt;/code&gt; (files which are added but not committed), &lt;code&gt;changed&lt;/code&gt; (files which are changed but not added in the index), &lt;code&gt;untracked&lt;/code&gt; (files which are not tracked by Git), &lt;code&gt;branch&lt;/code&gt; (the current branch), &lt;code&gt;nobranch&lt;/code&gt; (the color the &lt;code&gt;no branch&lt;/code&gt; warning is shown in, defaulting to red), &lt;code&gt;localBranch&lt;/code&gt; or &lt;code&gt;remoteBranch&lt;/code&gt; (the local and remote branch names, respectively, when branch and tracking information is displayed in the status short-format), or &lt;code&gt;unmerged&lt;/code&gt; (files which have unmerged changes).</source>
          <target state="translated">ステータスの色付けにはカスタマイズされた色を使用します。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; は、 &lt;code&gt;header&lt;/code&gt; （ステータスメッセージのヘッダーテキスト）、 &lt;code&gt;added&lt;/code&gt; または &lt;code&gt;updated&lt;/code&gt; （追加されたがコミットされていないファイル）、 &lt;code&gt;changed&lt;/code&gt; （変更されたがインデックスに追加されていないファイル）、 &lt;code&gt;untracked&lt;/code&gt; されていない（追加されていないファイル）Gitによって追跡）、 &lt;code&gt;branch&lt;/code&gt; （現在のブランチ）、 &lt;code&gt;nobranch&lt;/code&gt; （ &lt;code&gt;no branch&lt;/code&gt; 警告が表示される色、デフォルトでは赤）、 &lt;code&gt;localBranch&lt;/code&gt; または &lt;code&gt;remoteBranch&lt;/code&gt; （ローカルとリモートのブランチ名、それぞれブランチと追跡情報が表示される場合）ステータスの短い形式）、または &lt;code&gt;unmerged&lt;/code&gt; （変更がマージされていないファイル）。</target>
        </trans-unit>
        <trans-unit id="42006ecfd08deb9b3ff0a3f1d7240d8f715710f3" translate="yes" xml:space="preserve">
          <source>Use customized color when a push was rejected.</source>
          <target state="translated">プッシュが拒否されたときにカスタマイズされた色を使用します。</target>
        </trans-unit>
        <trans-unit id="7714f2243f3ecb7a0c915a75f0d9677bee5cfddf" translate="yes" xml:space="preserve">
          <source>Use fixed strings for patterns (don&amp;rsquo;t interpret pattern as a regex).</source>
          <target state="translated">パターンには固定文字列を使用します（パターンを正規表現として解釈しないでください）。</target>
        </trans-unit>
        <trans-unit id="be83392780575c9c0f338875e4ab41fca7ad0580" translate="yes" xml:space="preserve">
          <source>Use given directory for the location of Git objects. We check &lt;code&gt;&amp;lt;dir&amp;gt;/packs/multi-pack-index&lt;/code&gt; for the current MIDX file, and &lt;code&gt;&amp;lt;dir&amp;gt;/packs&lt;/code&gt; for the pack-files to index.</source>
          <target state="translated">Gitオブジェクトの場所には、指定されたディレクトリを使用します。私たちは、チェック &lt;code&gt;&amp;lt;dir&amp;gt;/packs/multi-pack-index&lt;/code&gt; 現在のMIDXファイルのために、そして &lt;code&gt;&amp;lt;dir&amp;gt;/packs&lt;/code&gt; インデックスにパック・ファイルのために。</target>
        </trans-unit>
        <trans-unit id="58e0e6d68f2b1086e2f61cc3ccf9bb473fce2cb1" translate="yes" xml:space="preserve">
          <source>Use given directory for the location of packfiles and commit-graph file. This parameter exists to specify the location of an alternate that only has the objects directory, not a full &lt;code&gt;.git&lt;/code&gt; directory. The commit-graph file is expected to be in the &lt;code&gt;&amp;lt;dir&amp;gt;/info&lt;/code&gt; directory and the packfiles are expected to be in &lt;code&gt;&amp;lt;dir&amp;gt;/pack&lt;/code&gt;.</source>
          <target state="translated">packfilesとcommit-graphファイルの場所には、指定されたディレクトリを使用します。このパラメーターは、完全な &lt;code&gt;.git&lt;/code&gt; ディレクトリではなく、オブジェクトディレクトリのみを持つ代替の場所を指定するために存在します。commit-graphファイルは &lt;code&gt;&amp;lt;dir&amp;gt;/info&lt;/code&gt; ディレクトリにあり、packfilesは &lt;code&gt;&amp;lt;dir&amp;gt;/pack&lt;/code&gt; にあると想定されています。</target>
        </trans-unit>
        <trans-unit id="9e22ac3ec044552fceb6f971a8409c3fc735d918" translate="yes" xml:space="preserve">
          <source>Use gmail as the smtp server</source>
          <target state="translated">gmailをsmtpサーバーとして使用する</target>
        </trans-unit>
        <trans-unit id="243e0ec42451f8d223cf0a086b6e0d020fe017bc" translate="yes" xml:space="preserve">
          <source>Use hash &lt;code&gt;#&lt;/code&gt; for comments that are either on their own line, or after the email address.</source>
          <target state="translated">自分の行または電子メールアドレスの後にあるコメントにはハッシュ &lt;code&gt;#&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="fe4290ca9cf2dcf165b3911c20fcc8115cf36b09" translate="yes" xml:space="preserve">
          <source>Use libcurl to communicate with the IMAP server, unless tunneling into it. Ignored if Git was built without the USE_CURL_FOR_IMAP_SEND option set.</source>
          <target state="translated">IMAP サーバーとの通信には libcurl を使用します。USE_CURL_FOR_IMAP_SEND オプションを設定せずに Git をビルドした場合は無視します。</target>
        </trans-unit>
        <trans-unit id="b43e2a7c9e04ff83908291bc454ceb95c66f26d2" translate="yes" xml:space="preserve">
          <source>Use mailmap file to map author and committer names and email addresses to canonical real names and email addresses. See &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt;.</source>
          <target state="translated">mailmapファイルを使用して、作成者とコミッターの名前と電子メールアドレスを正規の実名と電子メールアドレスにマップします。&lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="869311b9e64386ec94c4224dbda98ca212bcb863" translate="yes" xml:space="preserve">
          <source>Use merging strategies to rebase. When the recursive (default) merge strategy is used, this allows rebase to be aware of renames on the upstream side.</source>
          <target state="translated">マージ戦略を使用してリベースを行います。再帰的 (デフォルト)マージ戦略を使用すると、これにより上流側でリベースがリネームを認識できるようになります。</target>
        </trans-unit>
        <trans-unit id="504dd078aaf1ec972f6af826bbe142e1450759fa" translate="yes" xml:space="preserve">
          <source>Use of &quot;topic branches&quot; solves these problems. The name is pretty self explanatory, with a caveat that comes from the &quot;merge upwards&quot; rule above:</source>
          <target state="translated">トピックブランチ」を使用すると、これらの問題が解決されます。この名前は、上の &quot;上向きにマージ&quot; ルールに由来する注意点がありますが、かなり自己説明的なものです。</target>
        </trans-unit>
        <trans-unit id="2997460999cadfc1fcc5d52315d53b3d5efcd07d" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;dcommit&lt;/code&gt; is preferred to &lt;code&gt;set-tree&lt;/code&gt; (below).</source>
          <target state="translated">使用 &lt;code&gt;dcommit&lt;/code&gt; がより好まれる &lt;code&gt;set-tree&lt;/code&gt; （下記）。</target>
        </trans-unit>
        <trans-unit id="6b08c4843a60fcea417d6fa6b7562621b3124054" translate="yes" xml:space="preserve">
          <source>Use of this utility is encouraged in favor of directly accessing files under the &lt;code&gt;.git&lt;/code&gt; directory.</source>
          <target state="translated">このユーティリティの使用は、 &lt;code&gt;.git&lt;/code&gt; ディレクトリの下のファイルに直接アクセスすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3a96544176d9c64bcdfe76616987380a83e4f896" translate="yes" xml:space="preserve">
          <source>Use permissions reported by umask(2). The default, when &lt;code&gt;--shared&lt;/code&gt; is not specified.</source>
          <target state="translated">umask（2）によって報告された許可を使用します。 &lt;code&gt;--shared&lt;/code&gt; が指定されていない場合のデフォルト。</target>
        </trans-unit>
        <trans-unit id="7b2e5a64a2bb1a5fbe6304abee401e1d3f35a8f4" translate="yes" xml:space="preserve">
          <source>Use reflog to find a better common ancestor between &amp;lt;upstream&amp;gt; and &amp;lt;branch&amp;gt; when calculating which commits have been introduced by &amp;lt;branch&amp;gt;.</source>
          <target state="translated">&amp;lt;branch&amp;gt;によって導入されたコミットを計算するときに、reflogを使用して、&amp;lt;upstream&amp;gt;と&amp;lt;branch&amp;gt;の間のより良い共通の祖先を見つけます。</target>
        </trans-unit>
        <trans-unit id="b40e39ff3f77007104d997879dd735023a9dca06" translate="yes" xml:space="preserve">
          <source>Use revisions from revs-file instead of calling &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list [1]&lt;/a&gt;を呼び出す代わりにrevs-fileのリビジョンを使用します。</target>
        </trans-unit>
        <trans-unit id="efb298546ca010c6e357a2c3cc79d1b86fb2f356" translate="yes" xml:space="preserve">
          <source>Use the &quot;sparse&quot; algorithm to determine which objects to include in the pack, when combined with the &quot;--revs&quot; option. This algorithm only walks trees that appear in paths that introduce new objects. This can have significant performance benefits when computing a pack to send a small change. However, it is possible that extra objects are added to the pack-file if the included commits contain certain types of direct renames.</source>
          <target state="translated">sparse&quot; アルゴリズムを使用して、どのオブジェクトをパックに含めるかを決定します。このアルゴリズムは、新しいオブジェクトを導入するパスの中に現れるツリーのみを歩きます。これは、小銭を送るためにパックを計算する際に、パフォーマンスを大きく向上させることができます。しかし、含まれるコミットに特定のタイプの直接リネームが含まれている場合、追加のオブジェクトがパックファイルに追加される可能性があります。</target>
        </trans-unit>
        <trans-unit id="0755f10a2fd51824d1737b45b49a4642d66873f8" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--in-place&lt;/code&gt; option to edit a message file in place:</source>
          <target state="translated">使用 &lt;code&gt;--in-place&lt;/code&gt; 編集代わりに、メッセージ・ファイルにオプションを：</target>
        </trans-unit>
        <trans-unit id="55e7e1126d3aa0a5c8bf2360dfcd495bb1107882" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;working-tree-encoding&lt;/code&gt; attribute only if you cannot store a file in UTF-8 encoding and if you want Git to be able to process the content as text.</source>
          <target state="translated">ファイルをUTF-8エンコーディングで保存できない場合、およびGitでコンテンツをテキストとして処理できるようにする場合にのみ、 &lt;code&gt;working-tree-encoding&lt;/code&gt; 属性を使用します。</target>
        </trans-unit>
        <trans-unit id="b5ec705c3f1e9d70bd95302efbf5732684172042" translate="yes" xml:space="preserve">
          <source>Use the branch detection algorithm to find new paths in p4. It is documented below in &quot;BRANCH DETECTION&quot;.</source>
          <target state="translated">p4 で新しいパスを見つけるには、分岐検出アルゴリズムを使用します。これについては、以下の「分岐検出」で説明します。</target>
        </trans-unit>
        <trans-unit id="33ac56041ae34da6b3682a94d8a665913a47636a" translate="yes" xml:space="preserve">
          <source>Use the credential (e.g., access the URL with the username and password from step (2)), and see if it&amp;rsquo;s accepted.</source>
          <target state="translated">資格情報を使用して（たとえば、ステップ（2）のユーザー名とパスワードでURLにアクセスします）、それが受け入れられるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="4cfefdd524d37cf0c1fedc168c903048fc636bbd" translate="yes" xml:space="preserve">
          <source>Use the customized color for the part of git-blame output that is repeated meta information per line (such as commit id, author name, date and timezone). Defaults to cyan.</source>
          <target state="translated">git-blame の出力のうち、1 行ごとにメタ情報 (コミット ID、著者名、日付、タイムゾーンなど)が繰り返される部分の色をカスタマイズします。デフォルトは cyan です。</target>
        </trans-unit>
        <trans-unit id="a024bae6c0f6ae8fa68e77c95e0c4f95100aa970" translate="yes" xml:space="preserve">
          <source>Use the diff tool specified by &amp;lt;tool&amp;gt;. Valid values include emerge, kompare, meld, and vimdiff. Run &lt;code&gt;git difftool --tool-help&lt;/code&gt; for the list of valid &amp;lt;tool&amp;gt; settings.</source>
          <target state="translated">&amp;lt;tool&amp;gt;で指定されたdiffツールを使用します。有効な値には、emerge、konpare、meld、vimdiffがあります。有効な&amp;lt;tool&amp;gt;設定のリストについては、 &lt;code&gt;git difftool --tool-help&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="161588bc8b76efbad18d428ccf6e2f5e459908d1" translate="yes" xml:space="preserve">
          <source>Use the fast patchset import strategy. This can be significantly faster for large trees, but cannot handle directory renames or permissions changes. The default strategy is slow and safe.</source>
          <target state="translated">高速なパッチセットのインポート戦略を使用してください。これは大きなツリーに対してはかなり高速になりますが、ディレクトリのリネームやパーミッションの変更を扱うことはできません。デフォルトのストラテジーは低速で安全です。</target>
        </trans-unit>
        <trans-unit id="89541b63bc820ad5c76ea37101a62452ee62e61c" translate="yes" xml:space="preserve">
          <source>Use the following attributes if your &lt;code&gt;*.ps1&lt;/code&gt; files are UTF-16 little endian encoded without BOM and you want Git to use Windows line endings in the working directory (use &lt;code&gt;UTF-16LE-BOM&lt;/code&gt; instead of &lt;code&gt;UTF-16LE&lt;/code&gt; if you want UTF-16 little endian with BOM). Please note, it is highly recommended to explicitly define the line endings with &lt;code&gt;eol&lt;/code&gt; if the &lt;code&gt;working-tree-encoding&lt;/code&gt; attribute is used to avoid ambiguity.</source>
          <target state="translated">あなたの場合は、以下の属性を使用してください &lt;code&gt;*.ps1&lt;/code&gt; というファイルはBOMなしでエンコードされたUTF-16リトルエンディアンであり、あなたはGitが作業ディレクトリ（使用中のWindowsの行末を使用する &lt;code&gt;UTF-16LE-BOM&lt;/code&gt; の代わりに、 &lt;code&gt;UTF-16LE&lt;/code&gt; あなたはUTF-16をしたい場合BOMのリトルエンディアン）。あいまいさを避けるために &lt;code&gt;working-tree-encoding&lt;/code&gt; 属性を使用する場合は、行末を &lt;code&gt;eol&lt;/code&gt; で明示的に定義することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="e5c2f58b6a6ebc713504e60181f4f0dd37da2d6d" translate="yes" xml:space="preserve">
          <source>Use the given &amp;lt;msg&amp;gt; as the commit message. If multiple &lt;code&gt;-m&lt;/code&gt; options are given, their values are concatenated as separate paragraphs.</source>
          <target state="translated">指定された&amp;lt;msg&amp;gt;をコミットメッセージとして使用します。複数の &lt;code&gt;-m&lt;/code&gt; オプションを指定すると、それらの値は別々の段落として連結されます。</target>
        </trans-unit>
        <trans-unit id="be3b9715415e0357d3d87d01aa8f812c871fb1e1" translate="yes" xml:space="preserve">
          <source>Use the given &lt;code&gt;msg&lt;/code&gt; as the commit message. This option disables the &lt;code&gt;--edit&lt;/code&gt; option.</source>
          <target state="translated">与えられた使用 &lt;code&gt;msg&lt;/code&gt; コミットメッセージとして。このオプションは &lt;code&gt;--edit&lt;/code&gt; オプションを無効にします。</target>
        </trans-unit>
        <trans-unit id="43103d879018fa15a44cefa9b3baec705e25165c" translate="yes" xml:space="preserve">
          <source>Use the given config file instead of the one specified by GIT_CONFIG.</source>
          <target state="translated">GIT_CONFIG で指定された設定ファイルの代わりに、指定された設定ファイルを使用してください。</target>
        </trans-unit>
        <trans-unit id="6d07104b51b424f44cb0346a9ac8f4116b0f06d7" translate="yes" xml:space="preserve">
          <source>Use the given exclude pattern in addition to the standard ignore rules (see &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;).</source>
          <target state="translated">標準の無視ルールに加えて、指定された除外パターンを使用します（&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="9a12bbd112f0b48f03fdbbbb0b9c68268bedd960" translate="yes" xml:space="preserve">
          <source>Use the given merge strategy. If there is no &lt;code&gt;-s&lt;/code&gt; option &lt;code&gt;git merge-recursive&lt;/code&gt; is used instead. This implies --merge.</source>
          <target state="translated">指定されたマージ戦略を使用します。 &lt;code&gt;-s&lt;/code&gt; オプションがない場合は、代わりに &lt;code&gt;git merge-recursive&lt;/code&gt; が使用されます。これは--mergeを意味します。</target>
        </trans-unit>
        <trans-unit id="aad779cdebc63bc4b25eb19e46a7b214101b70ea" translate="yes" xml:space="preserve">
          <source>Use the given merge strategy. Should only be used once. See the MERGE STRATEGIES section in &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt; for details.</source>
          <target state="translated">指定されたマージ戦略を使用します。一度だけ使用してください。詳細については、&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;のMERGE STRATEGIESセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0d697cccd6049781089822f14d706ae91b43a781" translate="yes" xml:space="preserve">
          <source>Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no &lt;code&gt;-s&lt;/code&gt; option, a built-in list of strategies is used instead (&lt;code&gt;git merge-recursive&lt;/code&gt; when merging a single head, &lt;code&gt;git merge-octopus&lt;/code&gt; otherwise).</source>
          <target state="translated">指定されたマージ戦略を使用します。複数回指定して、試行する順序で指定できます。 &lt;code&gt;-s&lt;/code&gt; オプションがない場合は、代わりに組み込みの戦略リストが使用されます（単一のヘッドをマージする場合は &lt;code&gt;git merge-recursive&lt;/code&gt; 、それ以外の場合は &lt;code&gt;git merge-octopus&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e15a6801b533c61848133f0481a1499ec359e784" translate="yes" xml:space="preserve">
          <source>Use the given note message (instead of prompting). If multiple &lt;code&gt;-m&lt;/code&gt; options are given, their values are concatenated as separate paragraphs. Lines starting with &lt;code&gt;#&lt;/code&gt; and empty lines other than a single line between paragraphs will be stripped out.</source>
          <target state="translated">（プロンプトの代わりに）指定されたメモメッセージを使用します。複数の &lt;code&gt;-m&lt;/code&gt; オプションを指定すると、それらの値は別々の段落として連結されます。 &lt;code&gt;#&lt;/code&gt; で始まる行と、段落間の1行以外の空行は削除されます。</target>
        </trans-unit>
        <trans-unit id="2301e57be484e5bf3374c6061960726be52acd3f" translate="yes" xml:space="preserve">
          <source>Use the given tag message (instead of prompting). If multiple &lt;code&gt;-m&lt;/code&gt; options are given, their values are concatenated as separate paragraphs. Implies &lt;code&gt;-a&lt;/code&gt; if none of &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-s&lt;/code&gt;, or &lt;code&gt;-u &amp;lt;keyid&amp;gt;&lt;/code&gt; is given.</source>
          <target state="translated">（プロンプトの代わりに）指定されたタグメッセージを使用します。複数の &lt;code&gt;-m&lt;/code&gt; オプションを指定すると、それらの値は別々の段落として連結されます。意味 &lt;code&gt;-a&lt;/code&gt; をのどれ場合 &lt;code&gt;-a&lt;/code&gt; 、 &lt;code&gt;-s&lt;/code&gt; 、または &lt;code&gt;-u &amp;lt;keyid&amp;gt;&lt;/code&gt; 与えられていません。</target>
        </trans-unit>
        <trans-unit id="52a6c166f490dbb0be0d25b65f46015f7e67e623" translate="yes" xml:space="preserve">
          <source>Use the interactive patch selection interface to chose which changes to commit. See &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; for details.</source>
          <target state="translated">インタラクティブなパッチ選択インターフェイスを使用して、コミットする変更を選択します。詳細は&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7db128e87ada4e1ec3f3340d8431acfc429f3677" translate="yes" xml:space="preserve">
          <source>Use the merge resolution program specified by &amp;lt;tool&amp;gt;. Valid values include emerge, gvimdiff, kdiff3, meld, vimdiff, and tortoisemerge. Run &lt;code&gt;git mergetool --tool-help&lt;/code&gt; for the list of valid &amp;lt;tool&amp;gt; settings.</source>
          <target state="translated">&amp;lt;tool&amp;gt;で指定されたマージ解決プログラムを使用します。有効な値には、emerge、gvimdiff、kdiff3、meld、vimdiff、tortoisemergeがあります。有効な&amp;lt;tool&amp;gt;設定のリストについては、 &lt;code&gt;git mergetool --tool-help&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="047156e36b9d6e8b2155d32a029545b1b026f10e" translate="yes" xml:space="preserve">
          <source>Use the multi-pack-index file to track multiple packfiles using a single index. See &lt;a href=&quot;multi-pack-index&quot;&gt;the multi-pack-index design document&lt;/a&gt;.</source>
          <target state="translated">multi-pack-indexファイルを使用して、単一のインデックスを使用して複数のパックファイルを追跡します。&lt;a href=&quot;multi-pack-index&quot;&gt;multi-pack-index設計ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6bac5b4ccbcc396e691c8ba8f2af89d4f60c9270" translate="yes" xml:space="preserve">
          <source>Use the same output mode as &lt;a href=&quot;git-annotate&quot;&gt;git-annotate[1]&lt;/a&gt; (Default: off).</source>
          <target state="translated">&lt;a href=&quot;git-annotate&quot;&gt;git-annotate [1]&lt;/a&gt;と同じ出力モードを使用します（デフォルト：オフ）。</target>
        </trans-unit>
        <trans-unit id="0ed67a2ecd3a9ee96ae4cd7dcb45f48a2cf84bf4" translate="yes" xml:space="preserve">
          <source>Use the selected commit message without launching an editor. For example, &lt;code&gt;git commit --amend --no-edit&lt;/code&gt; amends a commit without changing its commit message.</source>
          <target state="translated">エディターを起動せずに、選択したコミットメッセージを使用します。たとえば、 &lt;code&gt;git commit --amend --no-edit&lt;/code&gt; は、コミットメッセージを変更せずにコミットを修正します。</target>
        </trans-unit>
        <trans-unit id="8e65c034e7da87d64be153e02b39a8529bd16f67" translate="yes" xml:space="preserve">
          <source>Use the source ref that matches &lt;code&gt;master&lt;/code&gt; (e.g. &lt;code&gt;refs/heads/master&lt;/code&gt;) to update the ref that matches &lt;code&gt;satellite/master&lt;/code&gt; (most probably &lt;code&gt;refs/remotes/satellite/master&lt;/code&gt;) in the &lt;code&gt;mothership&lt;/code&gt; repository; do the same for &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;satellite/dev&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; 一致するソース参照（例： &lt;code&gt;refs/heads/master&lt;/code&gt; ）を使用して、 &lt;code&gt;mothership&lt;/code&gt; リポジトリ内の &lt;code&gt;satellite/master&lt;/code&gt; （ほとんどの場合は &lt;code&gt;refs/remotes/satellite/master&lt;/code&gt; ）に一致する参照を更新します。 &lt;code&gt;dev&lt;/code&gt; と &lt;code&gt;satellite/dev&lt;/code&gt; についても同じようにします。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
