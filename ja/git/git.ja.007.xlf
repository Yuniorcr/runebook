<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="6da92828bff93237c525d505f61963005fa8aa9b" translate="yes" xml:space="preserve">
          <source>Merges can be also made simpler by using smaller branches or by using many topic branches instead of only long version related branches.</source>
          <target state="translated">また、マージは、より小さなブランチを使用したり、長いバージョンに関連するブランチだけではなく、多くのトピックブランチを使用したりすることで、より簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="18462046f484e3565df5821cdce8eadab95f1224" translate="yes" xml:space="preserve">
          <source>Merges have many advantages, so we try to solve as many problems as possible with merges alone. Cherry-picking is still occasionally useful; see &quot;Merging upwards&quot; below for an example.</source>
          <target state="translated">マージには多くの利点があるので、できるだけ多くの問題をマージだけで解決するようにしています。チェリーピッキングは今でも時々役に立ちます。</target>
        </trans-unit>
        <trans-unit id="40de0d4de887a374168bf79e72c7aa0fa4594d6e" translate="yes" xml:space="preserve">
          <source>Merging</source>
          <target state="translated">Merging</target>
        </trans-unit>
        <trans-unit id="f2204607f23628214b6d42add29d21c7f2e29b95" translate="yes" xml:space="preserve">
          <source>Merging branches with differing checkin/checkout attributes</source>
          <target state="translated">チェックイン/チェックアウトの属性が異なるブランチのマージ</target>
        </trans-unit>
        <trans-unit id="c535f2db054f922c7b696495f8b89a913e2a11c4" translate="yes" xml:space="preserve">
          <source>Merging external work</source>
          <target state="translated">外部作業のマージ</target>
        </trans-unit>
        <trans-unit id="603157d894d36cb77fbe21d75b0d20a12dc01779" translate="yes" xml:space="preserve">
          <source>Merging inside a &lt;a href=&quot;#def_shallow_clone&quot;&gt;shallow clone&lt;/a&gt; will work as long as a merge base is in the recent history. Otherwise, it will be like merging unrelated histories and may have to result in huge conflicts. This limitation may make such a repository unsuitable to be used in merge based workflows.</source>
          <target state="translated">&lt;a href=&quot;#def_shallow_clone&quot;&gt;浅いクローン&lt;/a&gt;内でのマージは、マージベースが最近の履歴にある限り機能します。それ以外の場合は、無関係な履歴をマージするようなものであり、巨大な競合が発生する可能性があります。この制限により、そのようなリポジトリは、マージベースのワークフローでの使用に適さなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ab26fbd41a8ed9c39ebd7d129433578a03343e81" translate="yes" xml:space="preserve">
          <source>Merging multiple trees</source>
          <target state="translated">複数の木をマージする</target>
        </trans-unit>
        <trans-unit id="f73ac93115d3cdadc50aebe7fa9b08f89899740b" translate="yes" xml:space="preserve">
          <source>Merging multiple trees, continued</source>
          <target state="translated">複数の木の結合、続き</target>
        </trans-unit>
        <trans-unit id="98b404243306169adb88696dc4ad2165a137c1ac" translate="yes" xml:space="preserve">
          <source>Merging tag</source>
          <target state="translated">タグのマージ</target>
        </trans-unit>
        <trans-unit id="1af53d3a2af732fec14191525698059a5e40b8d4" translate="yes" xml:space="preserve">
          <source>Merging two branches</source>
          <target state="translated">2つのブランチをマージする</target>
        </trans-unit>
        <trans-unit id="6153c9c2afc2b444427af54ff710f1f84e9dda45" translate="yes" xml:space="preserve">
          <source>Merging upwards</source>
          <target state="translated">上向きにマージ</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="ede02150d3611f561b342e50cd978f7d1c7b1d2a" translate="yes" xml:space="preserve">
          <source>Miscellaneous capabilities</source>
          <target state="translated">その他の機能</target>
        </trans-unit>
        <trans-unit id="68e2e957e53389b060cb16e85d086c46b6c88151" translate="yes" xml:space="preserve">
          <source>Missing From or In-Reply-To headers will be prompted for.</source>
          <target state="translated">Missing FromヘッダまたはIn-Reply-Toヘッダは、プロンプトが表示されます。</target>
        </trans-unit>
        <trans-unit id="00b61542d0211972bc61982931e3e8c50577c383" translate="yes" xml:space="preserve">
          <source>Modified content is represented by &quot;-&quot; lines (removing the old content) followed by &quot;+&quot; lines (adding the replacement content). You can prevent staging the modification by converting &quot;-&quot; lines to &quot; &quot;, and removing &quot;+&quot; lines. Beware that modifying only half of the pair is likely to introduce confusing changes to the index.</source>
          <target state="translated">変更された内容は、&quot;-&quot;行(古い内容を削除する)と &quot;+&quot;行(代替内容を追加する)で表されます。変更された内容は、&quot;-&quot;行を&quot; &quot;に変換し、&quot;+&quot;行を削除することで、ステージングを防ぐことができます。ペアの半分だけを変更すると、インデックスが混乱する可能性があるので注意してください。</target>
        </trans-unit>
        <trans-unit id="6e5a153f7d9724480c99f8d43544411a606a03ba" translate="yes" xml:space="preserve">
          <source>Modifies the index or directory cache. Each file mentioned is updated into the index and any &lt;code&gt;unmerged&lt;/code&gt; or &lt;code&gt;needs updating&lt;/code&gt; state is cleared.</source>
          <target state="translated">インデックスまたはディレクトリキャッシュを変更します。言及された各ファイルはインデックスに更新され、 &lt;code&gt;unmerged&lt;/code&gt; されていない、または &lt;code&gt;needs updating&lt;/code&gt; 状態はすべてクリアされます。</target>
        </trans-unit>
        <trans-unit id="f87d4010c94238df04ebfd441b3a0111f33d7a25" translate="yes" xml:space="preserve">
          <source>Modify behavior of the next command naming a &amp;lt;ref&amp;gt;. The only valid option is &lt;code&gt;no-deref&lt;/code&gt; to avoid dereferencing a symbolic ref.</source>
          <target state="translated">&amp;lt;ref&amp;gt;という名前の次のコマンドの動作を変更します。シンボリック参照の逆参照を回避するための唯一の有効なオプションは &lt;code&gt;no-deref&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eeb79095663bd56bf370bd2096cd4a5ecc99b3a1" translate="yes" xml:space="preserve">
          <source>Modify some files, then add their updated contents to the index:</source>
          <target state="translated">いくつかのファイルを修正し、更新された内容をインデックスに追加します。</target>
        </trans-unit>
        <trans-unit id="19db1a3cc38a1c275e20ba3eb14f5761050f2bac" translate="yes" xml:space="preserve">
          <source>Modifying the index is easy:</source>
          <target state="translated">インデックスの修正は簡単です。</target>
        </trans-unit>
        <trans-unit id="3d6095a82dcd262f6e6b119640e8d9b20bcf7da2" translate="yes" xml:space="preserve">
          <source>More detail on the following is available from the &lt;a href=&quot;user-manual#git-concepts&quot;&gt;Git concepts chapter of the user-manual&lt;/a&gt; and &lt;a href=&quot;gitcore-tutorial&quot;&gt;gitcore-tutorial[7]&lt;/a&gt;.</source>
          <target state="translated">以下の詳細について&lt;a href=&quot;user-manual#git-concepts&quot;&gt;は、user-manual&lt;/a&gt;および&lt;a href=&quot;gitcore-tutorial&quot;&gt;gitcore-tutorial [7]&lt;/a&gt;のGitコンセプトの章を参照してください。</target>
        </trans-unit>
        <trans-unit id="06099ebf3c1fb2d228710b5b862871e1eab3c063" translate="yes" xml:space="preserve">
          <source>More generally, a branch that is created from a remote-tracking branch will pull by default from that branch. See the descriptions of the &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; and &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; options in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;, and the discussion of the &lt;code&gt;--track&lt;/code&gt; option in &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt;, to learn how to control these defaults.</source>
          <target state="translated">より一般的には、リモート追跡ブランチから作成されたブランチは、デフォルトでそのブランチからプルします。説明を参照してください &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; して &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; のオプション&lt;a href=&quot;git-config&quot;&gt;[1]はgit-config設定&lt;/a&gt;、およびの議論 &lt;code&gt;--track&lt;/code&gt; でオプション&lt;a href=&quot;git-checkout&quot;&gt;のgit-アウト[1]&lt;/a&gt;どのように学習し、これらのデフォルトを制御します。</target>
        </trans-unit>
        <trans-unit id="415ceff2cb011b2c5375c0d469dab2cba200eaed" translate="yes" xml:space="preserve">
          <source>More generally, among the two commits to compute the merge base from, one is specified by the first commit argument on the command line; the other commit is a (possibly hypothetical) commit that is a merge across all the remaining commits on the command line.</source>
          <target state="translated">より一般的には、マージベースを計算する 2 つのコミットのうち 1 つはコマンドラインの最初のコミット引数で指定され、もう 1 つのコミットはコマンドライン上の残りのすべてのコミットをマージした (仮定の)コミットです。</target>
        </trans-unit>
        <trans-unit id="816cda5b46035bd1542e1775969151ec4a09cada" translate="yes" xml:space="preserve">
          <source>More importantly, it allows the update of a ref file to follow these symbolic pointers, whether they are symlinks or these &quot;regular file symbolic refs&quot;. It follows &lt;strong&gt;real&lt;/strong&gt; symlinks only if they start with &quot;refs/&quot;: otherwise it will just try to read them and update them as a regular file (i.e. it will allow the filesystem to follow them, but will overwrite such a symlink to somewhere else with a regular filename).</source>
          <target state="translated">さらに重要なことは、シンボリックリンクであろうと「通常のファイルシンボリック参照」であろうと、これらのシンボリックポインターを参照ファイルが更新できるようにすることです。&quot;refs /&quot;で始まる場合にのみ、&lt;strong&gt;実際の&lt;/strong&gt;シンボリックリンクをたどります。それ以外の場合は、それらを読み取って通常のファイルとして更新しようとします（つまり、ファイルシステムはこれらをたどることができますが、そのようなシンボリックリンクは他の場所に上書きされます通常のファイル名）。</target>
        </trans-unit>
        <trans-unit id="2be26ffe68463b96abc5601cef9bdbafbf2f631d" translate="yes" xml:space="preserve">
          <source>More interestingly, you can also give &lt;code&gt;git diff-tree&lt;/code&gt; the &lt;code&gt;--pretty&lt;/code&gt; flag, which tells it to also show the commit message and author and date of the commit, and you can tell it to show a whole series of diffs. Alternatively, you can tell it to be &quot;silent&quot;, and not show the diffs at all, but just show the actual commit message.</source>
          <target state="translated">さらに興味深いことに、 &lt;code&gt;git diff-tree&lt;/code&gt; に &lt;code&gt;--pretty&lt;/code&gt; フラグを指定して、コミットメッセージと作成者およびコミットの日付も表示するように指示したり、一連の差分全体を表示するように指示したりできます。または、「サイレント」であり、差分をまったく表示せず、実際のコミットメッセージのみを表示するように指示することもできます。</target>
        </trans-unit>
        <trans-unit id="854ef0fd2eba012b7c2e6ecb33388db153e60f9a" translate="yes" xml:space="preserve">
          <source>More on recovery from repository corruption. See: &lt;a href=&quot;https://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@woody.linux-foundation.org/&quot;&gt;https://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@woody.linux-foundation.org/&lt;/a&gt;&lt;a href=&quot;https://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@woody.linux-foundation.org/&quot;&gt;https://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@woody.linux-foundation.org/&lt;/a&gt;</source>
          <target state="translated">リポジトリの破損からの回復の詳細。参照：&lt;a href=&quot;https://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@woody.linux-foundation.org/&quot;&gt;https&lt;/a&gt; : //lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@woody.linux-foundation.org/ &lt;a href=&quot;https://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@woody.linux-foundation.org/&quot;&gt;https://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@ woody.linux-foundation.org/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e1784c94f3b7a373b03c0ae45229574de43eee20" translate="yes" xml:space="preserve">
          <source>More precisely, &lt;code&gt;git pull&lt;/code&gt; runs &lt;code&gt;git fetch&lt;/code&gt; with the given parameters and calls &lt;code&gt;git merge&lt;/code&gt; to merge the retrieved branch heads into the current branch. With &lt;code&gt;--rebase&lt;/code&gt;, it runs &lt;code&gt;git rebase&lt;/code&gt; instead of &lt;code&gt;git merge&lt;/code&gt;.</source>
          <target state="translated">より正確には、 &lt;code&gt;git pull&lt;/code&gt; は指定されたパラメーターで &lt;code&gt;git fetch&lt;/code&gt; を実行し、 &lt;code&gt;git merge&lt;/code&gt; を呼び出して、取得したブランチヘッドを現在のブランチにマージします。 &lt;code&gt;--rebase&lt;/code&gt; 、それが実行されます &lt;code&gt;git rebase&lt;/code&gt; の代わりに &lt;code&gt;git merge&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17f51f170751975b2cc4764665c6e712fb67447f" translate="yes" xml:space="preserve">
          <source>Most CVS command arguments that read CVS tags or revision numbers (typically -r) work, and also support any git refspec (tag, branch, commit ID, etc). However, CVS revision numbers for non-default branches are not well emulated, and cvs log does not show tags or branches at all. (Non-main-branch CVS revision numbers superficially resemble CVS revision numbers, but they actually encode a git commit ID directly, rather than represent the number of revisions since the branch point.)</source>
          <target state="translated">CVS タグやリビジョン番号 (通常は -r)を読み取るほとんどの CVS コマンド引数は動作しますし、git の refspec (タグ、ブランチ、コミット ID など)もサポートしています。しかし、デフォルトではないブランチの CVS リビジョン番号はうまくエミュレートされておらず、cvs log はタグやブランチを全く表示しません。(非メインブランチの CVS リビジョン番号は表面的には CVS リビジョン番号に似ていますが、実際には git のコミット ID を直接エンコードしたもので、ブランチポイント以降のリビジョン数を表すものではありません)。</target>
        </trans-unit>
        <trans-unit id="880f481ef12ec663b5ff4186eb50766022add75f" translate="yes" xml:space="preserve">
          <source>Most bottlenecks appear to be in foreign source data access (the source just cannot extract revisions fast enough) or disk IO (fast-import writes as fast as the disk will take the data). Imports will run faster if the source data is stored on a different drive than the destination Git repository (due to less IO contention).</source>
          <target state="translated">ほとんどのボトルネックは、外部からのソースデータへのアクセス (ソース側がリビジョンを高速に抽出できない)あるいはディスクの IO (ディスクがデータを取得するのと同じくらいの速さでインポートの書き込みを行う)にあると思われます。移行元のデータが移行先の Git リポジトリとは別のドライブに保存されている場合は、インポートの実行速度が速くなります (IO の競合が少なくなるからです)。</target>
        </trans-unit>
        <trans-unit id="b1a743b45e6efbd5b49b8c3c8d73ad9b477276e1" translate="yes" xml:space="preserve">
          <source>Most commits have only one parent, but it is also common for a commit to have multiple parents. In that case the commit represents a merge, with the parent references pointing to the heads of the merged branches.</source>
          <target state="translated">ほとんどのコミットの親はひとつだけですが、複数の親を持つこともよくあります。この場合、コミットはマージを表し、親参照はマージされたブランチの先頭を指します。</target>
        </trans-unit>
        <trans-unit id="4d50eced4caaa6d0cca3ee6a1e2e2e07d0d5849b" translate="yes" xml:space="preserve">
          <source>Most importantly, merging works at the branch level, while cherry-picking works at the commit level. This means that a merge can carry over the changes from 1, 10, or 1000 commits with equal ease, which in turn means the workflow scales much better to a large number of contributors (and contributions). Merges are also easier to understand because a merge commit is a &quot;promise&quot; that all changes from all its parents are now included.</source>
          <target state="translated">最も重要なことは、マージはブランチレベルで動作し、チェリーピックはコミットレベルで動作します。つまり、マージでは 1 コミット、10 コミット、1000 コミットの変更を同じように簡単に引き継ぐことができ、多くの貢献者 (と貢献者)に向けてワークフローを拡張することができます。マージはまた、親コミットからのすべての変更が含まれているという「約束」でもあるので、理解しやすくなります。</target>
        </trans-unit>
        <trans-unit id="2e130c2e2dd2a16594642aa625e1fc3c4df26608" translate="yes" xml:space="preserve">
          <source>Most of features are configured via &lt;code&gt;%feature&lt;/code&gt; hash; however some of extra gitweb features can be turned on and configured using variables described below. This list beside configuration variables that control how gitweb looks does contain variables configuring administrative side of gitweb (e.g. cross-site scripting prevention; admittedly this as side effect affects how &quot;summary&quot; pages look like, or load limiting).</source>
          <target state="translated">ほとんどの機能は &lt;code&gt;%feature&lt;/code&gt; ハッシュを介して構成されます。ただし、追加のgitweb機能のいくつかは、以下で説明する変数を使用してオンにして構成することができます。gitwebの外観を制御する構成変数の横にあるこのリストには、gitwebの管理側を構成する変数が含まれています（例：クロスサイトスクリプティング防止。副作用として、これは「概要」ページの外観や負荷制限に影響するためです）。</target>
        </trans-unit>
        <trans-unit id="12c479c9b5f1b05779ca1427f8469c4d0c8e41b4" translate="yes" xml:space="preserve">
          <source>Most of what &lt;code&gt;git rev-list&lt;/code&gt; did is contained in &lt;code&gt;revision.c&lt;/code&gt; and &lt;code&gt;revision.h&lt;/code&gt;. It wraps the options in a struct named &lt;code&gt;rev_info&lt;/code&gt;, which controls how and what revisions are walked, and more.</source>
          <target state="translated">&lt;code&gt;git rev-list&lt;/code&gt; が行ったことのほとんどは、 &lt;code&gt;revision.c&lt;/code&gt; と &lt;code&gt;revision.h&lt;/code&gt; に含まれています。オプションを &lt;code&gt;rev_info&lt;/code&gt; という名前の構造体にラップします。これは、どのリビジョンをどのように、どのリビジョンをたどるかなどを制御します。</target>
        </trans-unit>
        <trans-unit id="9ceb817bd0e340cfd6e3a665612ec974c7873cd6" translate="yes" xml:space="preserve">
          <source>Most operations that add an object to the database update the modification time of the object if it is already present so that #1 applies.</source>
          <target state="translated">オブジェクトをデータベースに追加するほとんどの操作は、オブジェクトが既に存在する場合には、#1が適用されるようにオブジェクトの変更時刻を更新します。</target>
        </trans-unit>
        <trans-unit id="ed4a3f36c4746567049b5d83d49f91438e7cd1fa" translate="yes" xml:space="preserve">
          <source>Most projects also use &lt;a href=&quot;#def_tag&quot;&gt;tags&lt;/a&gt;. Tags, like heads, are references into the project&amp;rsquo;s history, and can be listed using the &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt; command:</source>
          <target state="translated">ほとんどのプロジェクトでも&lt;a href=&quot;#def_tag&quot;&gt;タグを&lt;/a&gt;使用します。ヘッドと同様に、タグはプロジェクトの履歴への参照であり、&lt;a href=&quot;git-tag&quot;&gt;git-tag [1]&lt;/a&gt;コマンドを使用してリストできます。</target>
        </trans-unit>
        <trans-unit id="6e9a1bc6364ad2c889e7f09c69628c8251c67662" translate="yes" xml:space="preserve">
          <source>Most projects with multiple contributors (such as the Linux kernel, or Git itself) have frequent merges, and &lt;code&gt;gitk&lt;/code&gt; does a better job of visualizing their history. For example,</source>
          <target state="translated">複数のコントリビューター（Linuxカーネル、Git自体など）を持つほとんどのプロジェクトは頻繁にマージされ、 &lt;code&gt;gitk&lt;/code&gt; はその履歴を視覚化するのに優れています。例えば、</target>
        </trans-unit>
        <trans-unit id="b110af03cd46bd74e1684a2cb53fb12fe52de561" translate="yes" xml:space="preserve">
          <source>Mostly a synonym to &lt;a href=&quot;#def_shallow_repository&quot;&gt;shallow repository&lt;/a&gt; but the phrase makes it more explicit that it was created by running &lt;code&gt;git clone --depth=&amp;hellip;​&lt;/code&gt; command.</source>
          <target state="translated">大抵の同義語&lt;a href=&quot;#def_shallow_repository&quot;&gt;浅いリポジトリ&lt;/a&gt;が、フレーズは、それが実行することによって作成されたこと、それがより明確になり &lt;code&gt;git clone --depth=&amp;hellip;​&lt;/code&gt; コマンドを。</target>
        </trans-unit>
        <trans-unit id="0a0252ca3dca0dd6561eccb6a1ba0495bf433801" translate="yes" xml:space="preserve">
          <source>Mostly a synonym to &lt;a href=&quot;#def_shallow_repository&quot;&gt;shallow repository&lt;/a&gt; but the phrase makes it more explicit that it was created by running &lt;code&gt;git clone --depth=...&lt;/code&gt; command.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;#def_shallow_repository&quot;&gt;浅いリポジトリの&lt;/a&gt;同義語ですが、このフレーズを使用すると、 &lt;code&gt;git clone --depth=...&lt;/code&gt; コマンドを実行して作成されたことがより明確になります。</target>
        </trans-unit>
        <trans-unit id="437db9b7f03fcf9c59c19e8599b81a4181786550" translate="yes" xml:space="preserve">
          <source>Move a working tree to a new location. Note that the main working tree or linked working trees containing submodules cannot be moved.</source>
          <target state="translated">作業ツリーを新しい場所に移動します。メインの作業ツリーやサブモジュールを含むリンクされた作業ツリーは移動できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="00451deb449902283a1a1b09ee616f563047050b" translate="yes" xml:space="preserve">
          <source>Move objects and refs by archive</source>
          <target state="translated">アーカイブによるオブジェクトと参照の移動</target>
        </trans-unit>
        <trans-unit id="0a2aa584391bc2ed097c1ace071233493faa0978" translate="yes" xml:space="preserve">
          <source>Move or rename a file, a directory, or a symlink</source>
          <target state="translated">ファイル、ディレクトリ、シンボリックリンクの移動や名前の変更</target>
        </trans-unit>
        <trans-unit id="4bc0abe3ae87a3007e76abb67d150957939b61b8" translate="yes" xml:space="preserve">
          <source>Move or rename a file, directory or symlink.</source>
          <target state="translated">ファイル、ディレクトリ、シンボリックリンクを移動したり、名前を変更したりします。</target>
        </trans-unit>
        <trans-unit id="24cb8f062e449dc4167b50460e2e7341fe4e0aa6" translate="yes" xml:space="preserve">
          <source>Move/rename a branch and the corresponding reflog.</source>
          <target state="translated">ブランチとそれに対応するリブログを移動/名前を付けます。</target>
        </trans-unit>
        <trans-unit id="86a2fcc8fa8d4ad8c3c46b9d3e5182feb14f1b60" translate="yes" xml:space="preserve">
          <source>Moved lines are not highlighted.</source>
          <target state="translated">移動した行はハイライトされません。</target>
        </trans-unit>
        <trans-unit id="e5cbd47a10df638d21a9258d79ed6bd371f01027" translate="yes" xml:space="preserve">
          <source>Moved lines of code are colored differently. It can be changed by the &lt;code&gt;diff.colorMoved&lt;/code&gt; configuration setting. The &amp;lt;mode&amp;gt; defaults to &lt;code&gt;no&lt;/code&gt; if the option is not given and to &lt;code&gt;zebra&lt;/code&gt; if the option with no mode is given. The mode must be one of:</source>
          <target state="translated">移動したコード行の色が異なります。 &lt;code&gt;diff.colorMoved&lt;/code&gt; 構成設定で変更できます。オプションが指定されてい &lt;code&gt;no&lt;/code&gt; 場合、&amp;lt;mode&amp;gt;はデフォルトでnoになり、モードのないオプションが指定されている場合は &lt;code&gt;zebra&lt;/code&gt; になります。モードは次のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="b99084289befcccb3b6f25bb5a902159aaa2283b" translate="yes" xml:space="preserve">
          <source>Moved lines of code are colored differently. The &amp;lt;mode&amp;gt; defaults to &lt;code&gt;no&lt;/code&gt; if the option is not given and to &lt;code&gt;zebra&lt;/code&gt; if the option with no mode is given. The mode must be one of:</source>
          <target state="translated">移動したコード行の色が異なります。オプションが指定されてい &lt;code&gt;no&lt;/code&gt; 場合、&amp;lt;mode&amp;gt;はデフォルトでnoになり、モードのないオプションが指定されている場合は &lt;code&gt;zebra&lt;/code&gt; になります。モードは次のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="b9c1e9c13eb039f68657e5a15bbd12085ba143c2" translate="yes" xml:space="preserve">
          <source>Moving a submodule using a gitfile (which means they were cloned with a Git version 1.7.8 or newer) will update the gitfile and core.worktree setting to make the submodule work in the new location. It also will attempt to update the submodule.&amp;lt;name&amp;gt;.path setting in the &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; file and stage that file (unless -n is used).</source>
          <target state="translated">gitfile（Gitバージョン1.7.8以降で複製されたもの）を使用してサブモジュールを移動すると、gitfileとcore.worktree設定が更新され、サブモジュールが新しい場所で機能するようになります。また、&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;ファイルのsubmodule。&amp;lt;name&amp;gt; .path設定を更新し、そのファイルをステージングします（-nが使用されている場合を除く）。</target>
        </trans-unit>
        <trans-unit id="64f4589d8b3cd6346365a117e7caa3c7d877c770" translate="yes" xml:space="preserve">
          <source>Mua-specific hints</source>
          <target state="translated">ムア固有のヒント</target>
        </trans-unit>
        <trans-unit id="c811c6583f834ffbc46d39586b81b1cb3e49b3e5" translate="yes" xml:space="preserve">
          <source>Multi-pack-index (midx) files have the following format:</source>
          <target state="translated">マルチパックインデックス(midx)ファイルの形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="53148ea4bd03c54715064a8f67e0cc8cc140f85c" translate="yes" xml:space="preserve">
          <source>Multiple --notes options can be combined to control which notes are being displayed. Examples: &quot;--notes=foo&quot; will show only notes from &quot;refs/notes/foo&quot;; &quot;--notes=foo --notes&quot; will show both notes from &quot;refs/notes/foo&quot; and from the default notes ref(s).</source>
          <target state="translated">複数の --notes オプションを組み合わせて、どのノートを表示するかを制御することができます。例えば、&quot;--notes=foo &quot;は &quot;refs/notes/foo &quot;のノートのみを表示します。&quot;--notes=foo&quot; は &quot;refs/notes/foo&quot; のノートのみを表示し、&quot;--notes=foo --notes&quot; は &quot;refs/notes/foo&quot; とデフォルトのノート ref(複数可)の両方を表示します。</target>
        </trans-unit>
        <trans-unit id="63667e9cd419f9751274dd2f16bda1512b373262" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;--filter=&lt;/code&gt; flags can be specified to combine filters. Only objects which are accepted by every filter are included.</source>
          <target state="translated">複数の &lt;code&gt;--filter=&lt;/code&gt; フラグを指定して、フィルターを組み合わせることができます。すべてのフィルターで受け入れられるオブジェクトのみが含まれます。</target>
        </trans-unit>
        <trans-unit id="dc96f8ef1ccc109ff4dae28503fa1d96c62fb1de" translate="yes" xml:space="preserve">
          <source>Multiple checkout in general is still experimental, and the support for submodules is incomplete. It is NOT recommended to make multiple checkouts of a superproject.</source>
          <target state="translated">一般的なマルチチェックアウトはまだ実験的なものであり、サブモジュールのサポートは不完全です。スーパープロジェクトの複数チェックアウトは推奨されていません。</target>
        </trans-unit>
        <trans-unit id="5a07b93df04fb253e2e899a192e36f3454a882cd" translate="yes" xml:space="preserve">
          <source>Multiple fetch, branches, and tags keys are supported:</source>
          <target state="translated">複数のフェッチ、ブランチ、タグキーをサポートしています。</target>
        </trans-unit>
        <trans-unit id="b46275ca6ba0af124488d22d1e877279bfe2e6c0" translate="yes" xml:space="preserve">
          <source>Multiple lines can be added to an option by using the &lt;code&gt;--add&lt;/code&gt; option. If you want to update or unset an option which can occur on multiple lines, a POSIX regexp &lt;code&gt;value_regex&lt;/code&gt; needs to be given. Only the existing values that match the regexp are updated or unset. If you want to handle the lines that do &lt;strong&gt;not&lt;/strong&gt; match the regex, just prepend a single exclamation mark in front (see also &lt;a href=&quot;#EXAMPLES&quot;&gt;EXAMPLES&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;--add&lt;/code&gt; オプションを使用すると、オプションに複数の行を追加できます。複数行で発生する可能性のあるオプションを更新または設定解除する場合は、POSIX regexp &lt;code&gt;value_regex&lt;/code&gt; を指定する必要があります。正規表現に一致する既存の値のみが更新または設定解除されます。正規表現に一致し&lt;strong&gt;ない&lt;/strong&gt;行を処理する場合は、先頭に感嘆符を1つ追加します（「&lt;a href=&quot;#EXAMPLES&quot;&gt;例&lt;/a&gt;」も参照）。</target>
        </trans-unit>
        <trans-unit id="77c43675935243a813626f8da7cb046544167112" translate="yes" xml:space="preserve">
          <source>Multiple tags on the same revision are not imported.</source>
          <target state="translated">同じリビジョンの複数のタグはインポートされません。</target>
        </trans-unit>
        <trans-unit id="f2beb5df6d3d8f2a372e3411ba76c2a81700ed4b" translate="yes" xml:space="preserve">
          <source>Multiple values may be given to the &lt;code&gt;man.viewer&lt;/code&gt; configuration variable. Their corresponding programs will be tried in the order listed in the configuration file.</source>
          <target state="translated">&lt;code&gt;man.viewer&lt;/code&gt; 構成変数に複数の値を指定できます。対応するプログラムは、構成ファイルにリストされている順序で試行されます。</target>
        </trans-unit>
        <trans-unit id="ee6ae3f9558f190018d900b972ec0dd86c3ef0ee" translate="yes" xml:space="preserve">
          <source>Munging the diff output</source>
          <target state="translated">デフ出力をマンネリ化</target>
        </trans-unit>
        <trans-unit id="31284f7dc1d9489b6ba33462518d05bce29455ee" translate="yes" xml:space="preserve">
          <source>Must be a blob id</source>
          <target state="translated">ブロブIDである必要があります。</target>
        </trans-unit>
        <trans-unit id="bab4c6d734b3b13c2268e7fc81c79c9b99eef1dd" translate="yes" xml:space="preserve">
          <source>NORMAL Format</source>
          <target state="translated">ノーマルフォーマット</target>
        </trans-unit>
        <trans-unit id="4b5d099fcd6efcc01a4251de7ab2ddb7c47dd96b" translate="yes" xml:space="preserve">
          <source>NOTE! &lt;code&gt;git checkout-index&lt;/code&gt; normally refuses to overwrite old files, so if you have an old version of the tree already checked out, you will need to use the &lt;code&gt;-f&lt;/code&gt; flag ('before' the &lt;code&gt;-a&lt;/code&gt; flag or the filename) to 'force' the checkout.</source>
          <target state="translated">注意！ &lt;code&gt;git checkout-index&lt;/code&gt; は通常、古いファイルの上書きを拒否するため、古いバージョンのツリーがすでにチェックアウトされている場合は、 &lt;code&gt;-f&lt;/code&gt; フラグ（「 &lt;code&gt;-a&lt;/code&gt; フラグの前」またはファイル名）を使用して「強制」する必要があります。チェックアウト。</target>
        </trans-unit>
        <trans-unit id="1264e842b1d5e884b1bcd9c56e546555c80966fe" translate="yes" xml:space="preserve">
          <source>NOTE! A &lt;code&gt;--remove&lt;/code&gt; flag does 'not' mean that subsequent filenames will necessarily be removed: if the files still exist in your directory structure, the index will be updated with their new status, not removed. The only thing &lt;code&gt;--remove&lt;/code&gt; means is that update-index will be considering a removed file to be a valid thing, and if the file really does not exist any more, it will update the index accordingly.</source>
          <target state="translated">注意！ &lt;code&gt;--remove&lt;/code&gt; ファイルがまだあなたのディレクトリ構造に存在する場合、インデックスは削除されません、彼らの新しい状態で更新されます。フラグは、後続のファイル名は必ず削除されることを意味するもの「ではない」ん。唯一の &lt;code&gt;--remove&lt;/code&gt; は、update-indexが削除されたファイルを有効なものと見なし、ファイルが実際に存在しなくなった場合に、それに応じてインデックスを更新することを意味します。</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="cab1b18ac6c645752b07db74b58a821d43db7033" translate="yes" xml:space="preserve">
          <source>Name for the new branch.</source>
          <target state="translated">新しいブランチの名前。</target>
        </trans-unit>
        <trans-unit id="ae3aefe579fe0e7749a842bc31610ab7a07dfe4c" translate="yes" xml:space="preserve">
          <source>Name of a HTML file which, if it exists, is included on the gitweb projects overview page (&quot;projects_list&quot; view). Relative to the directory containing the gitweb.cgi script. Default value can be adjusted during build time using &lt;code&gt;GITWEB_HOMETEXT&lt;/code&gt; variable. By default set to &lt;code&gt;indextext.html&lt;/code&gt;.</source>
          <target state="translated">gitwebプロジェクトの概要ページ（ &quot;projects_list&quot;ビュー）に含まれているHTMLファイルの名前。gitweb.cgiスクリプトを含むディレクトリに対して相対的です。デフォルト値は、 &lt;code&gt;GITWEB_HOMETEXT&lt;/code&gt; 変数を使用してビルド時に調整できます。デフォルトでは &lt;code&gt;indextext.html&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="b26ce2bab88403572eb261078ddb7db93d3d704e" translate="yes" xml:space="preserve">
          <source>Name of a file with HTML to be included at the bottom of each page. Relative to the directory containing the &lt;code&gt;gitweb.cgi&lt;/code&gt; script. Can be set using &lt;code&gt;GITWEB_SITE_FOOTER&lt;/code&gt; at build time. No default value.</source>
          <target state="translated">各ページの下部に含めるHTMLを含むファイルの名前。 &lt;code&gt;gitweb.cgi&lt;/code&gt; スクリプトを含むディレクトリに対して相対的です。ビルド時に &lt;code&gt;GITWEB_SITE_FOOTER&lt;/code&gt; を使用して設定できます。デフォルト値はありません。</target>
        </trans-unit>
        <trans-unit id="cb37057e9d095a173db9c241ef8419b86a202d02" translate="yes" xml:space="preserve">
          <source>Name of a file with HTML to be included at the top of each page. Relative to the directory containing the &lt;code&gt;gitweb.cgi&lt;/code&gt; script. Can be set using &lt;code&gt;GITWEB_SITE_HEADER&lt;/code&gt; at build time. No default value.</source>
          <target state="translated">各ページの上部に含めるHTMLを含むファイルの名前。 &lt;code&gt;gitweb.cgi&lt;/code&gt; スクリプトを含むディレクトリに対して相対的です。ビルド時に &lt;code&gt;GITWEB_SITE_HEADER&lt;/code&gt; を使用して設定できます。デフォルト値はありません。</target>
        </trans-unit>
        <trans-unit id="389075bf1328d95e30f257d38d278dd3a0c94121" translate="yes" xml:space="preserve">
          <source>Name of a plain text file listing projects, or a name of directory to be scanned for projects.</source>
          <target state="translated">プロジェクトをリストアップしたプレーンテキストファイルの名前、またはプロジェクトをスキャンするディレクトリの名前。</target>
        </trans-unit>
        <trans-unit id="c0afa4635407444ed041e335278cc30cd2a11b14" translate="yes" xml:space="preserve">
          <source>Name of the SSL backend to use (e.g. &quot;openssl&quot; or &quot;schannel&quot;). This option is ignored if cURL lacks support for choosing the SSL backend at runtime.</source>
          <target state="translated">使用するSSLバックエンドの名前 (例:&quot;openssl&quot; や &quot;schannel&quot;)。cURLが実行時にSSLバックエンドを選択するサポートを欠いている場合、このオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="4d338fcbbcef71a5bde9a77e37abcbca835f1d4a" translate="yes" xml:space="preserve">
          <source>Name of the user running &lt;code&gt;git-cvsserver&lt;/code&gt;. If no name can be determined, the numeric uid is used.</source>
          <target state="translated">&lt;code&gt;git-cvsserver&lt;/code&gt; を実行しているユーザーの名前。名前を判別できない場合は、数値のuidが使用されます。</target>
        </trans-unit>
        <trans-unit id="33a3a9f4baab999f10555d77c61fc17ad7a2e690" translate="yes" xml:space="preserve">
          <source>Name of your site or organization, to appear in page titles. Set it to something descriptive for clearer bookmarks etc. If this variable is not set or is, then gitweb uses the value of the &lt;code&gt;SERVER_NAME&lt;/code&gt;&lt;code&gt;CGI&lt;/code&gt; environment variable, setting site name to &quot;$SERVER_NAME Git&quot;, or &quot;Untitled Git&quot; if this variable is not set (e.g. if running gitweb as standalone script).</source>
          <target state="translated">ページタイトルに表示されるサイトまたは組織の名前。この変数が設定されていないか設定されている場合は、わかりやすいブックマークに設定します。この変数が設定されていないか設定されている場合、gitwebは &lt;code&gt;SERVER_NAME&lt;/code&gt; &lt;code&gt;CGI&lt;/code&gt; 環境変数の値を使用して、サイト名を「$ SERVER_NAME Git」、またはこの変数が「無題のGit」に設定します設定されていません（たとえば、gitwebをスタンドアロンスクリプトとして実行している場合）。</target>
        </trans-unit>
        <trans-unit id="ac84f0f88b7824faf06c4b53397972bcd09b01be" translate="yes" xml:space="preserve">
          <source>Name output in &lt;code&gt;[PATCH n/m]&lt;/code&gt; format, even with a single patch.</source>
          <target state="translated">単一のパッチでも &lt;code&gt;[PATCH n/m]&lt;/code&gt; 形式で名前を出力します。</target>
        </trans-unit>
        <trans-unit id="ffd008dca3705155e76303827e2a4d3059068c9a" translate="yes" xml:space="preserve">
          <source>Name output in &lt;code&gt;[PATCH]&lt;/code&gt; format.</source>
          <target state="translated">&lt;code&gt;[PATCH]&lt;/code&gt; 形式で名前を出力します。</target>
        </trans-unit>
        <trans-unit id="fe45d9f50e3991235a5aaf79d20ba4e50638c193" translate="yes" xml:space="preserve">
          <source>Named file in &lt;code&gt;$GIT_DIR/branches&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/branches&lt;/code&gt; 内の名前付きファイル</target>
        </trans-unit>
        <trans-unit id="e694d096f60594b306ed977a1cb3bf7e40731642" translate="yes" xml:space="preserve">
          <source>Named file in &lt;code&gt;$GIT_DIR/remotes&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/remotes&lt;/code&gt; 内の名前付きファイル</target>
        </trans-unit>
        <trans-unit id="4d0059ee6bf7ca65460797daae6395c800b562c5" translate="yes" xml:space="preserve">
          <source>Named pointers called refs mark interesting points in history. A ref may contain the SHA-1 name of an object or the name of another ref. Refs with names beginning &lt;code&gt;ref/head/&lt;/code&gt; contain the SHA-1 name of the most recent commit (or &quot;head&quot;) of a branch under development. SHA-1 names of tags of interest are stored under &lt;code&gt;ref/tags/&lt;/code&gt;. A special ref named &lt;code&gt;HEAD&lt;/code&gt; contains the name of the currently checked-out branch.</source>
          <target state="translated">refsと呼ばれる名前付きポインターは、履歴内の興味深いポイントを示します。refには、オブジェクトのSHA-1名または別のrefの名前を含めることができます。名前が &lt;code&gt;ref/head/&lt;/code&gt; 始まるrefには、開発中のブランチの最新のコミット（または「ヘッド」）のSHA-1名が含まれています。対象のタグのSHA-1名は &lt;code&gt;ref/tags/&lt;/code&gt; 保存されます。 &lt;code&gt;HEAD&lt;/code&gt; という名前の特別な参照には、現在チェックアウトされているブランチの名前が含まれています。</target>
        </trans-unit>
        <trans-unit id="afc8b12ea961269025f67734b3112ac3163fa044" translate="yes" xml:space="preserve">
          <source>Named remote in configuration file</source>
          <target state="translated">設定ファイルで指定されたリモート</target>
        </trans-unit>
        <trans-unit id="60da66dd4d339a94ae12e8c7a620ab333cdfa554" translate="yes" xml:space="preserve">
          <source>Names a low-level merge driver to be used when performing an internal merge between common ancestors. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">共通の祖先間で内部マージを実行するときに使用される低レベルのマージドライバーを指定します。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7238264e2238da432cea4cee3e4e4ec456281760" translate="yes" xml:space="preserve">
          <source>Naming branches, tags, and other references</source>
          <target state="translated">ブランチ、タグ、その他の参照の命名</target>
        </trans-unit>
        <trans-unit id="a8a795a40591e9038f52c089f34245ee06ab71bc" translate="yes" xml:space="preserve">
          <source>Naming commits</source>
          <target state="translated">ネーミングコミット</target>
        </trans-unit>
        <trans-unit id="7b635b48de06412b114cd8e91f1912aac5470b03" translate="yes" xml:space="preserve">
          <source>Nearly proper rewriting of tag objects is supported. If the tag has a message attached, a new tag object will be created with the same message, author, and timestamp. If the tag has a signature attached, the signature will be stripped. It is by definition impossible to preserve signatures. The reason this is &quot;nearly&quot; proper, is because ideally if the tag did not change (points to the same object, has the same name, etc.) it should retain any signature. That is not the case, signatures will always be removed, buyer beware. There is also no support for changing the author or timestamp (or the tag message for that matter). Tags which point to other tags will be rewritten to point to the underlying commit.</source>
          <target state="translated">タグオブジェクトのほぼ適切な書き換えがサポートされています。タグにメッセージが添付されている場合、同じメッセージ、作者、タイムスタンプで新しいタグオブジェクトが作成されます。タグに署名が添付されている場合、署名は削除されます。署名を保存することは定義上不可能です。これが「ほぼ」適切である理由は、理想的にはタグが変化しなければ(同じオブジェクトを指している、同じ名前を持っている、など)、署名を保持するべきだからです。それはそうではなく、署名は常に削除されます。また、作者やタイムスタンプ(あるいはタグメッセージ)の変更もサポートされていません。他のタグを指しているタグは、元のコミットを指すように書き換えられます。</target>
        </trans-unit>
        <trans-unit id="ec8ce921b28e9d3cf6cf20eaf08287c17f378d35" translate="yes" xml:space="preserve">
          <source>Negating options</source>
          <target state="translated">オプションを否定する</target>
        </trans-unit>
        <trans-unit id="781db1e57c260d141571a81cbcc3db723749ad7f" translate="yes" xml:space="preserve">
          <source>Nevertheless, the code at C is broken, because the callers added on the lower line of development have not been converted to the new semantics introduced on the upper line of development. So if all you know is that D is bad, that Z is good, and that &lt;a href=&quot;git-bisect&quot;&gt;git-bisect[1]&lt;/a&gt; identifies C as the culprit, how will you figure out that the problem is due to this change in semantics?</source>
          <target state="translated">それにもかかわらず、Cのコードは壊れています。開発の下の行に追加された呼び出し元が、開発の上の行に導入された新しいセマンティクスに変換されていないためです。Dが悪い、Zが良い、そして&lt;a href=&quot;git-bisect&quot;&gt;git-bisect [1]が&lt;/a&gt; Cを原因として特定していることがわかっている場合、問題がこのセマンティクスの変更によるものであるとどうやって理解できますか？</target>
        </trans-unit>
        <trans-unit id="a6160e254f396c410b853d5ee2bc722e35ccb61c" translate="yes" xml:space="preserve">
          <source>Nevertheless, this is a common practice for people that need a simple way to publish a work-in-progress patch series, and it is an acceptable compromise as long as you warn other developers that this is how you intend to manage the branch.</source>
          <target state="translated">とはいえ、これは進行中のパッチシリーズを簡単に公開する方法を必要としている人にとってはよくあることであり、他の開発者にこれがあなたがブランチを管理するつもりであることを警告している限り、許容できる妥協点です。</target>
        </trans-unit>
        <trans-unit id="208a508aabbf19798034826f77ed481ec28e90cc" translate="yes" xml:space="preserve">
          <source>New features:</source>
          <target state="translated">新機能を搭載しています。</target>
        </trans-unit>
        <trans-unit id="c191eda851b2a021b1ece3943d51bb10c7c6e4eb" translate="yes" xml:space="preserve">
          <source>New marks are created automatically. Existing marks can be moved to another object simply by reusing the same &lt;code&gt;&amp;lt;idnum&amp;gt;&lt;/code&gt; in another &lt;code&gt;mark&lt;/code&gt; command.</source>
          <target state="translated">新しいマークは自動的に作成されます。別の &lt;code&gt;mark&lt;/code&gt; コマンドで同じ &lt;code&gt;&amp;lt;idnum&amp;gt;&lt;/code&gt; を再利用するだけで、既存のマークを別のオブジェクトに移動できます。</target>
        </trans-unit>
        <trans-unit id="34f293962e034aa3adab30d6ce7bb006c129576e" translate="yes" xml:space="preserve">
          <source>New objects written by fast-import are not available immediately. Most fast-import commands have no visible effect until the next checkpoint (or completion). The frontend can send commands to fill fast-import&amp;rsquo;s input pipe without worrying about how quickly they will take effect, which improves performance by simplifying scheduling.</source>
          <target state="translated">高速インポートによって書き込まれた新しいオブジェクトは、すぐには利用できません。ほとんどの高速インポートコマンドは、次のチェックポイント（または完了）まで効果がありません。フロントエンドはコマンドを送信して、コマンドが効果を発揮する速さを気にすることなく、高速インポートの入力パイプを満たすことができます。これにより、スケジューリングが簡素化され、パフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="bd5d84635e8045ac3e97cdc31b8e7c57fb2006ba" translate="yes" xml:space="preserve">
          <source>New remote-tracking branches will be stored under the shorthand name that you gave &lt;code&gt;git remote add&lt;/code&gt;, in this case &lt;code&gt;staging&lt;/code&gt;:</source>
          <target state="translated">新しいリモートトラッキングブランチは、 &lt;code&gt;git remote add&lt;/code&gt; を指定した省略名で保存されます。この場合は、 &lt;code&gt;staging&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="408210d4e2e7bc9a95a98e6b1bf8a3bd1ff14459" translate="yes" xml:space="preserve">
          <source>New users are encouraged to use &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; instead. The &lt;code&gt;whatchanged&lt;/code&gt; command is essentially the same as &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; but defaults to show the raw format diff output and to skip merges.</source>
          <target state="translated">新しいユーザーは代わりに&lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt;を使用することをお勧めします。 &lt;code&gt;whatchanged&lt;/code&gt; コマンドは、本質的に同じである&lt;a href=&quot;git-log&quot;&gt;、[1] gitのログ&lt;/a&gt;が、デフォルトは、RAW形式の差分出力を表示し、マージをスキップします。</target>
        </trans-unit>
        <trans-unit id="04e09d741912def77b41c31c7fd7bada0af8f8f2" translate="yes" xml:space="preserve">
          <source>Newer &lt;code&gt;git diff&lt;/code&gt; output has embedded &lt;code&gt;index information&lt;/code&gt; for each blob to help identify the original version that the patch applies to. When this flag is given, and if the original versions of the blobs are available locally, builds a temporary index containing those blobs.</source>
          <target state="translated">新しい &lt;code&gt;git diff&lt;/code&gt; 出力には、各BLOBの &lt;code&gt;index information&lt;/code&gt; が埋め込まれており、パッチが適用される元のバージョンを特定するのに役立ちます。このフラグが指定されている場合、元のバージョンのblobがローカルで利用できる場合は、それらのblobを含む一時インデックスを作成します。</target>
        </trans-unit>
        <trans-unit id="7f94af506f4cd517718453425d685ea35e84d4c7" translate="yes" xml:space="preserve">
          <source>Newly created objects are initially created in a file named after the object&amp;rsquo;s SHA-1 hash (stored in &lt;code&gt;.git/objects&lt;/code&gt;).</source>
          <target state="translated">新しく作成されたオブジェクトは、最初はオブジェクトのSHA-1ハッシュ（ &lt;code&gt;.git/objects&lt;/code&gt; に格納されている）にちなんで名付けられたファイルに作成されます。</target>
        </trans-unit>
        <trans-unit id="5efdf7f0d1fca004c74269609acfa25723d86160" translate="yes" xml:space="preserve">
          <source>Next step: get familiar with the object naming. Read &lt;a href=&quot;#naming-commits&quot;&gt;Naming commits&lt;/a&gt;. There are quite a few ways to name an object (and not only revisions!). All of these are handled in &lt;code&gt;sha1_name.c&lt;/code&gt;. Just have a quick look at the function &lt;code&gt;get_sha1()&lt;/code&gt;. A lot of the special handling is done by functions like &lt;code&gt;get_sha1_basic()&lt;/code&gt; or the likes.</source>
          <target state="translated">次のステップ：オブジェクトの命名に慣れます。&lt;a href=&quot;#naming-commits&quot;&gt;ネーミングコミット&lt;/a&gt;をお読みください。オブジェクトに名前を付ける方法はかなり多くあります（リビジョンだけではありません！）。これらはすべて &lt;code&gt;sha1_name.c&lt;/code&gt; で処理されます。関数 &lt;code&gt;get_sha1()&lt;/code&gt; をざっと見てください。特別な処理の多くは、 &lt;code&gt;get_sha1_basic()&lt;/code&gt; などの関数によって行われます。</target>
        </trans-unit>
        <trans-unit id="11fc14203dd0f4441645a9c34d5dd022905f56e4" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="translated">次のステップ</target>
        </trans-unit>
        <trans-unit id="817a91571b93a177740989ad9e63a1941cffb303" translate="yes" xml:space="preserve">
          <source>Next time, after seeing the same conflicted automerge, running &lt;code&gt;git rerere&lt;/code&gt; will perform a three-way merge between the earlier conflicted automerge, the earlier manual resolution, and the current conflicted automerge. If this three-way merge resolves cleanly, the result is written out to your working tree file, so you do not have to manually resolve it. Note that &lt;code&gt;git rerere&lt;/code&gt; leaves the index file alone, so you still need to do the final sanity checks with &lt;code&gt;git diff&lt;/code&gt; (or &lt;code&gt;git diff -c&lt;/code&gt;) and &lt;code&gt;git add&lt;/code&gt; when you are satisfied.</source>
          <target state="translated">次回、同じ競合する自動マージを確認した後、 &lt;code&gt;git rerere&lt;/code&gt; を実行すると、以前の競合する自動マージ、以前の手動の解決策、現在の競合する自動マージの間で3者間マージが実行されます。この3者間マージが問題なく解決される場合、結果は作業ツリーファイルに書き出されるため、手動で解決する必要はありません。 &lt;code&gt;git rerere&lt;/code&gt; はインデックスファイルをそのままにするので、満足したら &lt;code&gt;git diff&lt;/code&gt; （または &lt;code&gt;git diff -c&lt;/code&gt; ）と &lt;code&gt;git add&lt;/code&gt; で最終的な健全性チェックを行う必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="74ccc5b41472ca3ff8486dd211ddfe0cae9246c3" translate="yes" xml:space="preserve">
          <source>Next, commit the changes stored in the index. The &lt;code&gt;-c&lt;/code&gt; option specifies to pre-populate the commit message from the original message that you started with in the first commit. This is helpful to avoid retyping it. The &lt;code&gt;HEAD@{1}&lt;/code&gt; is a special notation for the commit that &lt;code&gt;HEAD&lt;/code&gt; used to be at prior to the original reset commit (1 change ago). See &lt;a href=&quot;git-reflog&quot;&gt;git-reflog[1]&lt;/a&gt; for more details. You may also use any other valid commit reference.</source>
          <target state="translated">次に、インデックスに保存されている変更をコミットします。 &lt;code&gt;-c&lt;/code&gt; オプションを指定は、事前移入あなたが最初のコミットでの使用を開始することを、元のメッセージからのメッセージをコミットします。これは再入力を避けるのに役立ちます。 &lt;code&gt;HEAD@{1}&lt;/code&gt; ことをコミットするための特別な表記法である &lt;code&gt;HEAD&lt;/code&gt; が元のリセットの前には、（1変更前）コミットになるように使用されます。詳細については、&lt;a href=&quot;git-reflog&quot;&gt;git-reflog [1]&lt;/a&gt;を参照してください。他の有効なコミット参照も使用できます。</target>
        </trans-unit>
        <trans-unit id="d481150e66b12915d203137377672c89781fe045" translate="yes" xml:space="preserve">
          <source>Next, copy &lt;code&gt;proj.git&lt;/code&gt; to the server where you plan to host the public repository. You can use scp, rsync, or whatever is most convenient.</source>
          <target state="translated">次に、パブリックリポジトリをホストする予定のサーバーに &lt;code&gt;proj.git&lt;/code&gt; をコピーします。scp、rsync、または最も便利なものを使用できます。</target>
        </trans-unit>
        <trans-unit id="04e0b9feb1c4a494995ed09ad261d2d4e9ce11c5" translate="yes" xml:space="preserve">
          <source>Next, give every team member read/write access to this repository. One easy way to do this is to give all the team members ssh access to the machine where the repository is hosted. If you don&amp;rsquo;t want to give them a full shell on the machine, there is a restricted shell which only allows users to do Git pushes and pulls; see &lt;a href=&quot;git-shell&quot;&gt;git-shell[1]&lt;/a&gt;.</source>
          <target state="translated">次に、すべてのチームメンバーにこのリポジトリへの読み取り/書き込みアクセス権を付与します。これを行う簡単な方法の1つは、すべてのチームメンバーに、リポジトリがホストされているマシンへのsshアクセスを許可することです。マシン上で完全なシェルを提供したくない場合は、ユーザーがGitのプッシュとプルのみを実行できる制限付きシェルがあります。&lt;a href=&quot;git-shell&quot;&gt;git-shell [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="28d55d870524553fca2220c18e5b9bb0de3dcbdb" translate="yes" xml:space="preserve">
          <source>Next, tell Git to take a snapshot of the contents of all files under the current directory (note the &lt;code&gt;.&lt;/code&gt;), with &lt;code&gt;git add&lt;/code&gt;:</source>
          <target state="translated">次に、（注意現在のディレクトリの下のすべてのファイルの内容のスナップショットを取るためにGitリポジトリを伝える &lt;code&gt;.&lt;/code&gt; で、） &lt;code&gt;git add&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="596419ac8ea3393898cb55dbbde5c3613a819bd1" translate="yes" xml:space="preserve">
          <source>Next, we interactively select diff hunks to add using the &lt;code&gt;git add -p&lt;/code&gt; facility. This will ask you about each diff hunk in sequence and you can use simple commands such as &quot;yes, include this&quot;, &quot;No don&amp;rsquo;t include this&quot; or even the very powerful &quot;edit&quot; facility.</source>
          <target state="translated">次に、 &lt;code&gt;git add -p&lt;/code&gt; 機能を使用して、追加する差分ハンクを対話的に選択します。これにより、各差分ハンクについて順番に尋ねられ、「はい、これを含める」、「いいえ、これを含めない」などの単純なコマンド、または非常に強力な「編集」機能を使用できます。</target>
        </trans-unit>
        <trans-unit id="8951da293ad0f99492d7f4956f721a58ac3b7ff1" translate="yes" xml:space="preserve">
          <source>No checkout of HEAD is performed after the clone is complete.</source>
          <target state="translated">クローン完了後、HEADのチェックアウトは行われません。</target>
        </trans-unit>
        <trans-unit id="cfeba19b6e040607769791cbfbefd83c894b180c" translate="yes" xml:space="preserve">
          <source>No modifications to submodules are ignored, all of committed differences, and modifications to tracked and untracked files are shown. This is the default option.</source>
          <target state="translated">サブモジュールへの変更は無視され、コミットされた差分はすべて無視され、追跡されたファイルと追跡されていないファイルへの変更は表示されます。これはデフォルトのオプションです。</target>
        </trans-unit>
        <trans-unit id="e2a67085604f2eb59fb72fa11fe30ca6d6e00a34" translate="yes" xml:space="preserve">
          <source>No other changes are made. In particular, the local modifications you had before you started merge will stay the same and the index entries for them stay as they were, i.e. matching &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">他の変更は行われません。特に、マージを開始する前に行ったローカル変更は同じままで、それらのインデックスエントリはそのままで、つまり &lt;code&gt;HEAD&lt;/code&gt; に一致します。</target>
        </trans-unit>
        <trans-unit id="c967d0b967e1e36091e8958a5454d9ea9951dded" translate="yes" xml:space="preserve">
          <source>No other modifications are made.</source>
          <target state="translated">それ以外の改造はしていません。</target>
        </trans-unit>
        <trans-unit id="57658df76cf3f4fecaffea0a60cae0068e21e278" translate="yes" xml:space="preserve">
          <source>No patch introduces a regression: after applying any initial part of the series, the resulting project still compiles and works, and has no bugs that it didn&amp;rsquo;t have before.</source>
          <target state="translated">パッチによって回帰が発生することはありません。シリーズの最初の部分を適用した後も、結果のプロジェクトはコンパイルされて機能し、以前にはなかったバグはありません。</target>
        </trans-unit>
        <trans-unit id="0d39633312554b0ea8cb734d680c4698c57a7afd" translate="yes" xml:space="preserve">
          <source>No pattern matches the path, and nothing says if the path has or does not have the attribute, the attribute for the path is said to be Unspecified.</source>
          <target state="translated">パスと一致するパターンはなく、パスが属性を持っているか持っていないかは何も書いていないので、パスの属性はUnspecifiedと言われています。</target>
        </trans-unit>
        <trans-unit id="c90ed1cbdf989952fffa921b682ee1beb354558a" translate="yes" xml:space="preserve">
          <source>No special setup is needed for SSH access, other than having Git tools in the PATH. If you have clients that do not accept the CVS_SERVER environment variable, you can rename &lt;code&gt;git-cvsserver&lt;/code&gt; to &lt;code&gt;cvs&lt;/code&gt;.</source>
          <target state="translated">PATHにGitツールがあること以外は、SSHアクセスに特別な設定は必要ありません。 CVS_SERVER環境変数を受け入れないクライアントがある場合は、 &lt;code&gt;git-cvsserver&lt;/code&gt; の名前を &lt;code&gt;cvs&lt;/code&gt; に変更できます。</target>
        </trans-unit>
        <trans-unit id="a5febeaff9fb6579d7fb9744e50b3994bde6d8e3" translate="yes" xml:space="preserve">
          <source>Non-ascii filenames can be silently removed despite being in a desired directory. Keeping only wanted paths is often done using pipelines like &lt;code&gt;git ls-files | grep -v ^WANTED_DIR/ | xargs git rm&lt;/code&gt;. ls-files will only quote filenames if needed, so folks may not notice that one of the files didn&amp;rsquo;t match the regex (at least not until it&amp;rsquo;s much too late). Yes, someone who knows about core.quotePath can avoid this (unless they have other special characters like \t, \n, or &quot;), and people who use ls-files -z with something other than grep can avoid this, but that doesn&amp;rsquo;t mean they will.</source>
          <target state="translated">ASCII以外のファイル名は、目的のディレクトリにあるにもかかわらずサイレントに削除できます。必要なパスのみを保持することは、多くの場合、 &lt;code&gt;git ls-files | grep -v ^WANTED_DIR/ | xargs git rm&lt;/code&gt; ようなパイプラインを使用して行われます。 grep -v ^ WANTED_DIR / | xargs git rm。 ls-filesは必要な場合にのみファイル名を引用します。そのため、ファイルの1つが正規表現に一致しなかったことに気付かない場合があります（少なくとも手遅れになるまでは）。はい、core.quotePathを知っている人はこれを回避できます（\ t、\ n、 &quot;などの他の特殊文字が含まれている場合を除きます）。ls-files-zをgrep以外で使用すると回避できますが、彼らがそうするつもりはありません。</target>
        </trans-unit>
        <trans-unit id="e2858812ab58a3c85b7437528709a46037dcfba6" translate="yes" xml:space="preserve">
          <source>Non-cached mode</source>
          <target state="translated">非キャッシュモード</target>
        </trans-unit>
        <trans-unit id="28592521357265f4a182551c4308e7cea911b93e" translate="yes" xml:space="preserve">
          <source>Non-empty context lines that have one extra whitespace at the beginning.</source>
          <target state="translated">空ではないコンテキスト行で、先頭に余分な空白が1つあるもの。</target>
        </trans-unit>
        <trans-unit id="54b4652d3bd254c89ec712af1b81619180dc7f11" translate="yes" xml:space="preserve">
          <source>None of the provided paths are ignored.</source>
          <target state="translated">提供されたパスはいずれも無視されます。</target>
        </trans-unit>
        <trans-unit id="53d641d85a09ede95cefeac02aadaca1a7fcd396" translate="yes" xml:space="preserve">
          <source>Normalize &lt;code&gt;refname&lt;/code&gt; by removing any leading slash (&lt;code&gt;/&lt;/code&gt;) characters and collapsing runs of adjacent slashes between name components into a single slash. If the normalized refname is valid then print it to standard output and exit with a status of 0, otherwise exit with a non-zero status. (&lt;code&gt;--print&lt;/code&gt; is a deprecated way to spell &lt;code&gt;--normalize&lt;/code&gt;.)</source>
          <target state="translated">先頭のスラッシュ（ &lt;code&gt;/&lt;/code&gt; ）文字を削除し、名前コンポーネント間の隣接するスラッシュのランを単一のスラッシュに &lt;code&gt;refname&lt;/code&gt; することにより、refnameを正規化します。正規化されたrefnameが有効な場合は、標準出力に出力し、ステータス0で終了します。それ以外の場合は、ゼロ以外のステータスで終了します。（ &lt;code&gt;--print&lt;/code&gt; は--normalizeのスペルを非推奨にする方法 &lt;code&gt;--normalize&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="cd7a46a34b030b4fa7a1f4c298bb470454f5bdc6" translate="yes" xml:space="preserve">
          <source>Normally &lt;code&gt;git write-tree&lt;/code&gt; ensures that the objects referenced by the directory exist in the object database. This option disables this check.</source>
          <target state="translated">通常、 &lt;code&gt;git write-tree&lt;/code&gt; は、ディレクトリによって参照されるオブジェクトがオブジェクトデータベースに存在することを保証します。このオプションは、このチェックを無効にします。</target>
        </trans-unit>
        <trans-unit id="88fcf17b3fc3a47614adb1a8f9a3b0161d3a2185" translate="yes" xml:space="preserve">
          <source>Normally a &quot;commit&quot; has one parent: the previous state of the tree before a certain change was made. However, sometimes it can have two or more parent commits, in which case we call it a &quot;merge&quot;, due to the fact that such a commit brings together (&quot;merges&quot;) two or more previous states represented by other commits.</source>
          <target state="translated">通常、&quot;コミット&quot; は一つの親を持ちます:ある変更が行われる前のツリーの前の状態です。このようなコミットは、他のコミットが表す二つ以上の前の状態をまとめてマージすることから、「マージ」と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="a69474e938cf33a616aeca615fe9997480c7c945" translate="yes" xml:space="preserve">
          <source>Normally a commit would identify a new &quot;HEAD&quot; state, and while Git doesn&amp;rsquo;t care where you save the note about that state, in practice we tend to just write the result to the file that is pointed at by &lt;code&gt;.git/HEAD&lt;/code&gt;, so that we can always see what the last committed state was.</source>
          <target state="translated">通常、コミットは新しい &quot;HEAD&quot;状態を識別し、Gitはその状態に関するメモをどこに保存するかは気にしませんが、実際には &lt;code&gt;.git/HEAD&lt;/code&gt; が指すファイルに結果を書き込む傾向があります。そのため、最後にコミットされた状態を常に確認できます。</target>
        </trans-unit>
        <trans-unit id="de60fcb388acbd1518bd224ad2216b3a990124fa" translate="yes" xml:space="preserve">
          <source>Normally batch output is flushed after each object is output, so that a process can interactively read and write from &lt;code&gt;cat-file&lt;/code&gt;. With this option, the output uses normal stdio buffering; this is much more efficient when invoking &lt;code&gt;--batch-check&lt;/code&gt; on a large number of objects.</source>
          <target state="translated">通常、バッチ出力は各オブジェクトが出力された後にフラッシュされるため、プロセスは &lt;code&gt;cat-file&lt;/code&gt; からインタラクティブに読み書きできます。このオプションを使用すると、出力は通常のstdioバッファリングを使用します。これは、多数のオブジェクトに対して &lt;code&gt;--batch-check&lt;/code&gt; を呼び出すときにはるかに効率的です。</target>
        </trans-unit>
        <trans-unit id="38e091b35be2fc0762233a3d599b506f3b643fb1" translate="yes" xml:space="preserve">
          <source>Normally commits are only added to a project, never taken away or replaced. Git is designed with this assumption, and violating it will cause Git&amp;rsquo;s merge machinery (for example) to do the wrong thing.</source>
          <target state="translated">通常、コミットはプロジェクトにのみ追加され、削除または置換されることはありません。Gitはこの前提で設計されており、これに違反すると、Gitのマージ機構（たとえば）が間違った動作をします。</target>
        </trans-unit>
        <trans-unit id="9122c3565585fe79768943dc25f1cf167ffbd58d" translate="yes" xml:space="preserve">
          <source>Normally the &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; stores the name of a &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt;, and commands that operate on the history HEAD represents operate on the history leading to the tip of the branch the HEAD points at. However, Git also allows you to &lt;a href=&quot;#def_checkout&quot;&gt;check out&lt;/a&gt; an arbitrary &lt;a href=&quot;#def_commit&quot;&gt;commit&lt;/a&gt; that isn&amp;rsquo;t necessarily the tip of any particular branch. The HEAD in such a state is called &quot;detached&quot;.</source>
          <target state="translated">通常、&lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt;は&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;の名前を格納し、HEADが表す履歴を操作するコマンドは、HEADが指すブランチの先端に至る履歴を操作します。ただし、Gitでは、必ずしも特定のブランチの先端とは限らない任意の&lt;a href=&quot;#def_commit&quot;&gt;コミット&lt;/a&gt;を&lt;a href=&quot;#def_checkout&quot;&gt;チェックアウト&lt;/a&gt;することもできます。このような状態のHEADを「デタッチ」と呼びます。</target>
        </trans-unit>
        <trans-unit id="cc5f74671cf296af564ff0627cbd1c153eed7819" translate="yes" xml:space="preserve">
          <source>Normally the branch merged in is the HEAD of the remote repository, but the choice is determined by the branch.&amp;lt;name&amp;gt;.remote and branch.&amp;lt;name&amp;gt;.merge options; see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for details.</source>
          <target state="translated">通常、マージされるブランチはリモートリポジトリのHEADですが、選択は、branch。&amp;lt;name&amp;gt; .remoteおよびbranch。&amp;lt;name&amp;gt; .mergeオプションによって決定されます。詳細は&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="f22467859cfedb6f904df5424dcd9afb82c226b1" translate="yes" xml:space="preserve">
          <source>Normally whenever a branch head in a public repository is modified, it is modified to point to a descendant of the commit that it pointed to before. By forcing a push in this situation, you break that convention. (See &lt;a href=&quot;#problems-With-rewriting-history&quot;&gt;Problems with rewriting history&lt;/a&gt;.)</source>
          <target state="translated">通常、パブリックリポジトリのブランチヘッドが変更されるたびに、以前にポイントしたコミットの子孫をポイントするように変更されます。この状況でプッシュを強制することにより、その慣習を破ります。（&lt;a href=&quot;#problems-With-rewriting-history&quot;&gt;履歴の書き換えに関する問題を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="43244e83cbae6a59cf653d315de1a56015589247" translate="yes" xml:space="preserve">
          <source>Normally, &lt;code&gt;git rerere&lt;/code&gt; is run without arguments or user-intervention. However, it has several commands that allow it to interact with its working state.</source>
          <target state="translated">通常、 &lt;code&gt;git rerere&lt;/code&gt; は引数やユーザー介入なしで実行されます。ただし、動作状態を操作できるいくつかのコマンドがあります。</target>
        </trans-unit>
        <trans-unit id="d7d70adae9e248dcbf5927b7eeba22fdf79a73fb" translate="yes" xml:space="preserve">
          <source>Normally, only files unknown to Git are removed, but if the &lt;code&gt;-x&lt;/code&gt; option is specified, ignored files are also removed. This can, for example, be useful to remove all build products.</source>
          <target state="translated">通常、Gitに認識されていないファイルのみが削除されますが、 &lt;code&gt;-x&lt;/code&gt; オプションが指定されている場合、無視されたファイルも削除されます。これは、たとえば、すべてのビルド製品を削除するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="ea1a90319260338e8b5ddefd985427f3690ce910" translate="yes" xml:space="preserve">
          <source>Normally, the &quot;git svn clone&quot; and &quot;git svn rebase&quot; commands attempt to recreate empty directories that are in the Subversion repository. If this option is set to &quot;false&quot;, then empty directories will only be created if the &quot;git svn mkdirs&quot; command is run explicitly. If unset, &lt;code&gt;git svn&lt;/code&gt; assumes this option to be &quot;true&quot;.</source>
          <target state="translated">通常、「git svn clone」コマンドと「git svn rebase」コマンドは、Subversionリポジトリにある空のディレクトリを再作成しようとします。このオプションを「false」に設定すると、「git svn mkdirs」コマンドが明示的に実行された場合にのみ空のディレクトリが作成されます。設定されていない場合、 &lt;code&gt;git svn&lt;/code&gt; はこのオプションを「true」と見なします。</target>
        </trans-unit>
        <trans-unit id="cbab35b86acdc7c387af4e06856d3dc90a27828f" translate="yes" xml:space="preserve">
          <source>Normally, the &quot;name&quot; field contains the canonical name of the command. When a canonical name is not available, one of these special values are used:</source>
          <target state="translated">通常、「name」フィールドにはコマンドの正式名称が含まれます。正準名が利用できない場合は、これらの特別な値のいずれかが使用されます。</target>
        </trans-unit>
        <trans-unit id="a72159c3df537e6c1eeaac201666cb67a55dea2c" translate="yes" xml:space="preserve">
          <source>Normally, the first commit in an SVN branch consists of a copy operation. &lt;code&gt;git svn&lt;/code&gt; will read this commit to get the SVN revision the branch was created from. It will then try to find the Git commit that corresponds to this SVN revision, and use that as the parent of the branch. However, it is possible that there is no suitable Git commit to serve as parent. This will happen, among other reasons, if the SVN branch is a copy of a revision that was not fetched by &lt;code&gt;git svn&lt;/code&gt; (e.g. because it is an old revision that was skipped with &lt;code&gt;--revision&lt;/code&gt;), or if in SVN a directory was copied that is not tracked by &lt;code&gt;git svn&lt;/code&gt; (such as a branch that is not tracked at all, or a subdirectory of a tracked branch). In these cases, &lt;code&gt;git svn&lt;/code&gt; will still create a Git branch, but instead of using an existing Git commit as the parent of the branch, it will read the SVN history of the directory the branch was copied from and create appropriate Git commits. This is indicated by the message &quot;Initializing parent: &amp;lt;branchname&amp;gt;&quot;.</source>
          <target state="translated">通常、SVNブランチの最初のコミットはコピー操作で構成されます。 &lt;code&gt;git svn&lt;/code&gt; はこのコミットを読み取り、ブランチの作成元であるSVNリビジョンを取得します。次に、このSVNリビジョンに対応するGitコミットを見つけて、ブランチの親として使用します。ただし、親として機能する適切なGitコミットがない可能性があります。これは、SVNの枝がでフェッチされなかったリビジョンのコピーである場合、他の理由の中で、どうなる &lt;code&gt;git svn&lt;/code&gt; （それがでスキップされた古いリビジョンであるため、例えば &lt;code&gt;--revision&lt;/code&gt; ）、またはディレクトリがコピーされたSVNであればこれは &lt;code&gt;git svn&lt;/code&gt; によって追跡されません（まったく追跡されないブランチ、または追跡されるブランチのサブディレクトリなど）。これらの場合、 &lt;code&gt;git svn&lt;/code&gt; は引き続きGitブランチを作成しますが、既存のGitコミットをブランチの親として使用する代わりに、ブランチのコピー元のディレクトリのSVN履歴を読み取り、適切なGitコミットを作成します。これは、「Initializing parent：&amp;lt;branchname&amp;gt;」というメッセージで示されます。</target>
        </trans-unit>
        <trans-unit id="4d54b3aadfbad6c493d83bcb2428d0cb9e46992e" translate="yes" xml:space="preserve">
          <source>Normally, when no &amp;lt;path&amp;gt; is specified, git clean will not recurse into untracked directories to avoid removing too much. Specify -d to have it recurse into such directories as well. If any paths are specified, -d is irrelevant; all untracked files matching the specified paths (with exceptions for nested git directories mentioned under &lt;code&gt;--force&lt;/code&gt;) will be removed.</source>
          <target state="translated">通常、&amp;lt;path&amp;gt;が指定されていない場合、あまり削除されないように、git cleanは追跡されていないディレクトリに再帰しません。-dを指定すると、そのようなディレクトリにも再帰しま​​す。パスが指定されている場合、-dは無関係です。指定されたパスに一致するすべての追跡されていないファイル（ &lt;code&gt;--force&lt;/code&gt; で言及されているネストされたgitディレクトリを除く）は削除されます。</target>
        </trans-unit>
        <trans-unit id="429c7c6d611a6b06377c7694b2f456c87ba75047" translate="yes" xml:space="preserve">
          <source>Not all pattern types support patterns containing \0. Git will error out if a given pattern type can&amp;rsquo;t support such a pattern. The &lt;code&gt;--perl-regexp&lt;/code&gt; pattern type when compiled against the PCRE v2 backend has the widest support for these types of patterns.</source>
          <target state="translated">すべてのパターンタイプが\ 0を含むパターンをサポートしているわけではありません。特定のパターンタイプがそのようなパターンをサポートできない場合、Gitはエラーになります。 &lt;code&gt;--perl-regexp&lt;/code&gt; PCRE v2のバックエンドに対してコンパイルされたパターンのタイプは、パターンのこれらのタイプの最も広いサポートを有しています。</target>
        </trans-unit>
        <trans-unit id="fc85aa9ed9f2a57ce72e656178cf6fe66c794d02" translate="yes" xml:space="preserve">
          <source>Not all values are equally unambiguous:</source>
          <target state="translated">すべての価値観が同じように曖昧ではありません。</target>
        </trans-unit>
        <trans-unit id="8394b0fb9c23c1116919b0832addc200fe1387df" translate="yes" xml:space="preserve">
          <source>Not to worry. It left the (trivial) conflict in &lt;code&gt;hello&lt;/code&gt; in the same form you should already be well used to if you&amp;rsquo;ve ever used CVS, so let&amp;rsquo;s just open &lt;code&gt;hello&lt;/code&gt; in our editor (whatever that may be), and fix it up somehow. I&amp;rsquo;d suggest just making it so that &lt;code&gt;hello&lt;/code&gt; contains all four lines:</source>
          <target state="translated">心配無用。これは、CVSを使用したことがあれば慣れ親しんでいるはずの同じ形式の &lt;code&gt;hello&lt;/code&gt; の（些細な）競合を残したので、エディターで &lt;code&gt;hello&lt;/code&gt; を開いて（それが何であれ）、どうにかして修正します。 &lt;code&gt;hello&lt;/code&gt; に4行すべてが含まれるようにするだけです。</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="b7ed8e5f5bf09b0c843d3af582307ddfb588c4c6" translate="yes" xml:space="preserve">
          <source>Note about fast-forwards</source>
          <target state="translated">早送りについての注意点</target>
        </trans-unit>
        <trans-unit id="318ccd302e94c5b26153ff4314826ba81af60a67" translate="yes" xml:space="preserve">
          <source>Note about git config --global</source>
          <target state="translated">git config --global についての注意点</target>
        </trans-unit>
        <trans-unit id="a858b9b8c7722185661603839f0881f8c7f88318" translate="yes" xml:space="preserve">
          <source>Note about konqueror</source>
          <target state="translated">コンクラーについての注意事項</target>
        </trans-unit>
        <trans-unit id="01b5dd07775875ee6aa9a8a3da76365c637f9b1a" translate="yes" xml:space="preserve">
          <source>Note also that multiple copies of an object may be present in the object database; in this case, it is undefined which copy&amp;rsquo;s size or delta base will be reported.</source>
          <target state="translated">オブジェクトの複数のコピーがオブジェクトデータベースに存在する場合があることにも注意してください。この場合、どのコピーのサイズまたはデルタベースが報告されるかは定義されていません。</target>
        </trans-unit>
        <trans-unit id="e92cbc9ca374ec932eab116752367c5739918c53" translate="yes" xml:space="preserve">
          <source>Note for Git users, that it is equivalent as keeping only the commit given by:</source>
          <target state="translated">Git ユーザーにとっては、これは与えられたコミットのみを保持しているのと同じであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9cd066f98a94620416bd40171030f2cd3deb4780" translate="yes" xml:space="preserve">
          <source>Note how the rule to only follow the TREESAME parent, if one is available, removed &lt;code&gt;B&lt;/code&gt; from consideration entirely. &lt;code&gt;C&lt;/code&gt; was considered via &lt;code&gt;N&lt;/code&gt;, but is TREESAME. Root commits are compared to an empty tree, so &lt;code&gt;I&lt;/code&gt; is !TREESAME.</source>
          <target state="translated">TREESAME親のみが従うというルールがある場合は、それが使用可能な場合に、 &lt;code&gt;B&lt;/code&gt; を完全に考慮から外したことに注意してください。 &lt;code&gt;C&lt;/code&gt; は &lt;code&gt;N&lt;/code&gt; を介して検討されましたが、TREESAMEです。ルートコミットは空のツリーと比較されるので、 &lt;code&gt;I&lt;/code&gt; は！TREESAMEです。</target>
        </trans-unit>
        <trans-unit id="8bfd2da46a110f046c6975fde1a8b82933cacdc7" translate="yes" xml:space="preserve">
          <source>Note how there is no need for an entry for &lt;code&gt;&amp;lt;jane@laptop.(none)&amp;gt;&lt;/code&gt;, because the real name of that author is already correct.</source>
          <target state="translated">&lt;code&gt;&amp;lt;jane@laptop.(none)&amp;gt;&lt;/code&gt; エントリは必要ないことに注意してください。その作者の本名はすでに正しいからです。</target>
        </trans-unit>
        <trans-unit id="a357a7dbcbc2a41b2d3445e7cfb8ae38a48bfe09" translate="yes" xml:space="preserve">
          <source>Note in the example that we set up a triangular workflow, where we pull from one location and push to another. In a non-triangular workflow, &lt;code&gt;@{push}&lt;/code&gt; is the same as &lt;code&gt;@{upstream}&lt;/code&gt;, and there is no need for it.</source>
          <target state="translated">この例では、ある場所からプルして別の場所にプッシュする三角ワークフローを設定していることに注意してください。三角形以外のワークフローでは、 &lt;code&gt;@{push}&lt;/code&gt; は &lt;code&gt;@{upstream}&lt;/code&gt; と同じであり、必要はありません。</target>
        </trans-unit>
        <trans-unit id="01660f89f7c458ce6428d6e0df0b322692b74596" translate="yes" xml:space="preserve">
          <source>Note that &quot;%f&quot; is the name of the path that is being worked on. Depending on the version that is being filtered, the corresponding file on disk may not exist, or may have different contents. So, smudge and clean commands should not try to access the file on disk, but only act as filters on the content provided to them on standard input.</source>
          <target state="translated">f&quot; は作業中のパス名であることに注意してください。フィルタリングされるバージョンによっては、ディスク上に対応するファイルが存在しなかったり、内容が異なる場合があります。そのため、smudge コマンドや clean コマンドは、ディスク上のファイルにアクセスしようとせず、標準入力で提供された内容に対するフィルタとしてのみ動作するようにすべきです。</target>
        </trans-unit>
        <trans-unit id="014f6a8d43d7b297d024fa501c939621bed28154" translate="yes" xml:space="preserve">
          <source>Note that &quot;../&quot; is not special and will match literally, which is unlikely what you want.</source>
          <target state="translated">./」は特別なものではなく、文字通りに一致することに注意してください。</target>
        </trans-unit>
        <trans-unit id="8b91ded5c4fad4671b25fb8bfeab09bc89a0acef" translate="yes" xml:space="preserve">
          <source>Note that (3) is a historical artefact and will be ignored if the (1) and (2) specify that the submodule is not active. In other words, if we have a &lt;code&gt;submodule.&amp;lt;name&amp;gt;.active&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt; or if the submodule&amp;rsquo;s path is excluded in the pathspec in &lt;code&gt;submodule.active&lt;/code&gt;, the url doesn&amp;rsquo;t matter whether it is present or not. This is illustrated in the example that follows.</source>
          <target state="translated">（3）は歴史的なアーティファクトであり、（1）および（2）がサブモジュールがアクティブでないことを指定している場合は無視されることに注意してください。つまり、 &lt;code&gt;submodule.&amp;lt;name&amp;gt;.active&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されている場合、またはsubmodule.activeのpathspecで &lt;code&gt;submodule.active&lt;/code&gt; モジュールのパスが除外されている場合、URLは存在してもしなくてもかまいません。これは、次の例で説明されています。</target>
        </trans-unit>
        <trans-unit id="6fec9940a0e0728d1bf92151624eb87584d6019f" translate="yes" xml:space="preserve">
          <source>Note that --more, --list, --independent and --merge-base options are mutually exclusive.</source>
          <target state="translated">more,--list,--independent,--merge-base オプションは相互に排他的であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9b9a74f48dd77c7cda36904d8ae57495c22af6f7" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;--force&lt;/code&gt; applies to all the refs that are pushed, hence using it with &lt;code&gt;push.default&lt;/code&gt; set to &lt;code&gt;matching&lt;/code&gt; or with multiple push destinations configured with &lt;code&gt;remote.*.push&lt;/code&gt; may overwrite refs other than the current branch (including local refs that are strictly behind their remote counterpart). To force a push to only one branch, use a &lt;code&gt;+&lt;/code&gt; in front of the refspec to push (e.g &lt;code&gt;git push
origin +master&lt;/code&gt; to force a push to the &lt;code&gt;master&lt;/code&gt; branch). See the &lt;code&gt;&amp;lt;refspec&amp;gt;...&lt;/code&gt; section above for details.</source>
          <target state="translated">そのノート &lt;code&gt;--force&lt;/code&gt; が故にでそれを使用して、プッシュされたすべての参考文献に適用 &lt;code&gt;push.default&lt;/code&gt; のにセット &lt;code&gt;matching&lt;/code&gt; またはで構成された複数のプッシュ先と &lt;code&gt;remote.*.push&lt;/code&gt; （あるローカル参考文献を含めて、現在のブランチ以外の参考文献を上書きすることができます完全にリモートの相手の背後にあります）。1つのブランチのみにプッシュを強制するには、refspecの前に &lt;code&gt;+&lt;/code&gt; を使用してプッシュします（例： &lt;code&gt;git push origin +master&lt;/code&gt; は &lt;code&gt;master&lt;/code&gt; ブランチに強制的にプッシュします）。詳細については、上記の &lt;code&gt;&amp;lt;refspec&amp;gt;...&lt;/code&gt; セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f71426a1d6dfa55d8e5b4bb3bb7ddab1eba41559" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;--patch&lt;/code&gt; can accept no pathspec and will prompt to restore all modified paths.</source>
          <target state="translated">&lt;code&gt;--patch&lt;/code&gt; はpathspecを受け入れることができず、変更されたすべてのパスを復元するように要求することに注意してください。</target>
        </trans-unit>
        <trans-unit id="788dab85e40bdd496cc4b3d8bdc2f5695fd79580" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;combined diff&lt;/code&gt; lists only files which were modified from all parents.</source>
          <target state="translated">&lt;code&gt;combined diff&lt;/code&gt; は、すべての親から変更されたファイルのみをリストすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e64bae554ef50a53010f144d204d2601ed2388af" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;git --help ...&lt;/code&gt; is identical to &lt;code&gt;git help ...&lt;/code&gt; because the former is internally converted into the latter.</source>
          <target state="translated">注意 &lt;code&gt;git --help ...&lt;/code&gt; 同じです &lt;code&gt;git help ...&lt;/code&gt; 前者は内部的に後者に変換されるため。</target>
        </trans-unit>
        <trans-unit id="0f050e4f28b585b64021f162ba65306d71b16a1c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;git add&lt;/code&gt; always adds just the current contents of a file to the index; further changes to the same file will be ignored unless you run &lt;code&gt;git add&lt;/code&gt; on the file again.</source>
          <target state="translated">&lt;code&gt;git add&lt;/code&gt; は常にファイルの現在の内容だけをインデックスに追加することに注意してください。同じファイルへのそれ以上の変更は、ファイルに対して再度 &lt;code&gt;git add&lt;/code&gt; を実行しない限り無視されます。</target>
        </trans-unit>
        <trans-unit id="a75d3b6c972faf4b238fb20e64f0ae5ba4c5e6f0" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;git diff-tree&lt;/code&gt; can use the tree encapsulated in a commit object.</source>
          <target state="translated">&lt;code&gt;git diff-tree&lt;/code&gt; では、コミットオブジェクトにカプセル化されたツリーを使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c22023840a6edf8cbd10c5905bf1fe0b2598253c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;trailers&lt;/code&gt; do not follow and are not intended to follow many rules for RFC 822 headers. For example they do not follow the encoding rules and probably many other rules.</source>
          <target state="translated">&lt;code&gt;trailers&lt;/code&gt; は従わず、RFC 822ヘッダーの多くのルールに従うことを意図していないことに注意してください。たとえば、エンコーディングルールやおそらく他の多くのルールに従いません。</target>
        </trans-unit>
        <trans-unit id="99d4b644b5be625d6423f4cb1035eccb3ada0dfe" translate="yes" xml:space="preserve">
          <source>Note that Git at the core level treats path names simply as sequences of non-NUL bytes, there are no path name encoding conversions (except on Mac and Windows). Therefore, using non-ASCII path names will mostly work even on platforms and file systems that use legacy extended ASCII encodings. However, repositories created on such systems will not work properly on UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa. Additionally, many Git-based tools simply assume path names to be UTF-8 and will fail to display other encodings correctly.</source>
          <target state="translated">Git のコアレベルでは、パス名は単に non-NUL バイトのシーケンスとして扱われ、パス名のエンコーディング変換は行われません (Mac と Windows を除く)。そのため、従来の拡張 ASCII エンコーディングを使用しているプラットフォームやファイルシステムでも、非 ASCII パス名を使用すればほとんどの場合は動作します。しかし、そのようなシステムで作成されたリポジトリは UTF-8 ベースのシステム (Linux、Mac、Windows など)では正しく動作しませんし、その逆も同様です。さらに、多くの Git ベースのツールは単にパス名を UTF-8 と仮定しているだけで、他のエンコーディングを正しく表示できません。</target>
        </trans-unit>
        <trans-unit id="9883f1d7503e774a80aca1b5641976f5b274bd93" translate="yes" xml:space="preserve">
          <source>Note that a &lt;code&gt;filerename&lt;/code&gt; is the same as a &lt;code&gt;filecopy&lt;/code&gt; followed by a &lt;code&gt;filedelete&lt;/code&gt; of the source location. There is a slight performance advantage to using &lt;code&gt;filerename&lt;/code&gt;, but the advantage is so small that it is never worth trying to convert a delete/add pair in source material into a rename for fast-import. This &lt;code&gt;filerename&lt;/code&gt; command is provided just to simplify frontends that already have rename information and don&amp;rsquo;t want bother with decomposing it into a &lt;code&gt;filecopy&lt;/code&gt; followed by a &lt;code&gt;filedelete&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;filerename&lt;/code&gt; は、 &lt;code&gt;filecopy&lt;/code&gt; の後にソースの場所の &lt;code&gt;filedelete&lt;/code&gt; が続くことと同じであることに注意してください。 &lt;code&gt;filerename&lt;/code&gt; の使用には若干のパフォーマンス上の利点がありますが、その利点は非常に小さいため、ソースマテリアルの削除/追加ペアを高速インポート用の名前変更に変換する価値はありません。この &lt;code&gt;filerename&lt;/code&gt; コマンドは、すでに名前変更情報があり、それを &lt;code&gt;filecopy&lt;/code&gt; に分解してからfiledeleteを実行することに煩わされたくないフロントエンドを単純化するためにのみ提供されてい &lt;code&gt;filedelete&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0f7296e0d288c1c6e4ca2a5e972f6c90872dfac0" translate="yes" xml:space="preserve">
          <source>Note that a commit does not itself contain any information about what actually changed; all changes are calculated by comparing the contents of the tree referred to by this commit with the trees associated with its parents. In particular, Git does not attempt to record file renames explicitly, though it can identify cases where the existence of the same file data at changing paths suggests a rename. (See, for example, the &lt;code&gt;-M&lt;/code&gt; option to &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;).</source>
          <target state="translated">コミット自体には、実際に変更された内容に関する情報は含まれていないことに注意してください。すべての変更は、このコミットによって参照されるツリーの内容を、その親に関連付けられているツリーと比較することによって計算されます。特に、Gitはファイルの名前変更を明示的に記録しようとしませんが、パスの変更時に同じファイルデータが存在することで名前の変更が示唆される場合を識別できます。（たとえば、&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]&lt;/a&gt;の &lt;code&gt;-M&lt;/code&gt; オプションを参照してください）。</target>
        </trans-unit>
        <trans-unit id="54977b94f7c8617e07e8f365a31b9faa2fc062c5" translate="yes" xml:space="preserve">
          <source>Note that a more compact instruction does not change offset and size encoding. For example, if only offset2 is omitted like below, offset3 still contains bits 16-23. It does not become offset2 and contains bits 8-15 even if it&amp;rsquo;s right next to offset1.</source>
          <target state="translated">よりコンパクトな命令はオフセットとサイズのエンコーディングを変更しないことに注意してください。たとえば、以下のようにoffset2のみが省略されている場合でも、offset3にはビット16〜23が含まれています。offset1のすぐ隣にあっても、offset2にはならず、ビット8〜15が含まれます。</target>
        </trans-unit>
        <trans-unit id="2599b1548726c0979f146506e9008608bae9db4a" translate="yes" xml:space="preserve">
          <source>Note that a rebase merge works by replaying each commit from the working branch on top of the &amp;lt;upstream&amp;gt; branch. Because of this, when a merge conflict happens, the side reported as &lt;code&gt;ours&lt;/code&gt; is the so-far rebased series, starting with &amp;lt;upstream&amp;gt;, and &lt;code&gt;theirs&lt;/code&gt; is the working branch. In other words, the sides are swapped.</source>
          <target state="translated">リベースマージは、&amp;lt;upstream&amp;gt;ブランチの上にある作業ブランチから各コミットを再生することで機能することに注意してください。このため、マージの競合が発生すると、&amp;lt;upstream&amp;gt;で始まる、これまでにリベースされたシリーズが &lt;code&gt;ours&lt;/code&gt; として報告された側であり、 &lt;code&gt;theirs&lt;/code&gt; が作業ブランチです。つまり、辺が入れ替わります。</target>
        </trans-unit>
        <trans-unit id="8523c23f527cd324df8d4075c34f666be6f6f3b7" translate="yes" xml:space="preserve">
          <source>Note that all forms other than &lt;code&gt;--force-with-lease=&amp;lt;refname&amp;gt;:&amp;lt;expect&amp;gt;&lt;/code&gt; that specifies the expected current value of the ref explicitly are still experimental and their semantics may change as we gain experience with this feature.</source>
          <target state="translated">refの予想される現在の値を明示的に指定する &lt;code&gt;--force-with-lease=&amp;lt;refname&amp;gt;:&amp;lt;expect&amp;gt;&lt;/code&gt; 以外のすべての形式はまだ実験的なものであり、この機能の経験を積むにつれてその意味が変わる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4c01852cae3ff7462ff1404dd165465e299075b3" translate="yes" xml:space="preserve">
          <source>Note that all these configuration variables should probably be set using the &lt;code&gt;--global&lt;/code&gt; flag, for example like this:</source>
          <target state="translated">これらすべての構成変数は、たとえば &lt;code&gt;--global&lt;/code&gt; フラグを使用して、たとえば次のように設定する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="11bfa085b8a4e40f2da0245c59f1751f600a1ada" translate="yes" xml:space="preserve">
          <source>Note that any of the &lt;code&gt;refs/*&lt;/code&gt; cases above may come either from the &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; directory or from the &lt;code&gt;$GIT_DIR/packed-refs&lt;/code&gt; file. While the ref name encoding is unspecified, UTF-8 is preferred as some output processing may assume ref names in UTF-8.</source>
          <target state="translated">上記の &lt;code&gt;refs/*&lt;/code&gt; のケースは、 &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; ディレクトリまたは &lt;code&gt;$GIT_DIR/packed-refs&lt;/code&gt; ファイルのいずれかにあることに注意してください。参照名のエンコードは指定されていませんが、一部の出力処理ではUTF-8で参照名を想定する場合があるため、UTF-8が推奨されます。</target>
        </trans-unit>
        <trans-unit id="508d8a380e829238fc278b6ce7f900eddc6afba3" translate="yes" xml:space="preserve">
          <source>Note that any protocol restrictions will be applied to the rewritten URL. If the rewrite changes the URL to use a custom protocol or remote helper, you may need to adjust the &lt;code&gt;protocol.*.allow&lt;/code&gt; config to permit the request. In particular, protocols you expect to use for submodules must be set to &lt;code&gt;always&lt;/code&gt; rather than the default of &lt;code&gt;user&lt;/code&gt;. See the description of &lt;code&gt;protocol.allow&lt;/code&gt; above.</source>
          <target state="translated">書き換えられたURLにはプロトコル制限が適用されることに注意してください。書き換えによってカスタムプロトコルまたはリモートヘルパーを使用するようにURLが変更された場合は、 &lt;code&gt;protocol.*.allow&lt;/code&gt; configを調整してリクエストを許可する必要がある場合があります。特に、サブモジュールに使用する予定のプロトコルは、デフォルトの &lt;code&gt;user&lt;/code&gt; ではなく、 &lt;code&gt;always&lt;/code&gt; 設定する必要があります。上記の &lt;code&gt;protocol.allow&lt;/code&gt; の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="85755e8e95f86917d98f865efeaea006efa16988" translate="yes" xml:space="preserve">
          <source>Note that any tree or blob object can be examined using &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt; with the &amp;lt;revision&amp;gt;:&amp;lt;path&amp;gt; syntax. This can sometimes be useful for browsing the contents of a tree that is not currently checked out.</source>
          <target state="translated">ツリーまたはブロブオブジェクトは、&amp;lt;revision&amp;gt;：&amp;lt;path&amp;gt;構文で&lt;a href=&quot;git-show&quot;&gt;git-show [1]&lt;/a&gt;を使用して検査できることに注意してください。これは、現在チェックアウトされていないツリーのコンテンツを閲覧する場合に役立つことがあります。</target>
        </trans-unit>
        <trans-unit id="fbb379f0a0fd79434d80db46f9a2b53054c72c7c" translate="yes" xml:space="preserve">
          <source>Note that attributes are by default taken from the &lt;code&gt;.gitattributes&lt;/code&gt; files in the tree that is being archived. If you want to tweak the way the output is generated after the fact (e.g. you committed without adding an appropriate export-ignore in its &lt;code&gt;.gitattributes&lt;/code&gt;), adjust the checked out &lt;code&gt;.gitattributes&lt;/code&gt; file as necessary and use &lt;code&gt;--worktree-attributes&lt;/code&gt; option. Alternatively you can keep necessary attributes that should apply while archiving any tree in your &lt;code&gt;$GIT_DIR/info/attributes&lt;/code&gt; file.</source>
          <target state="translated">属性はデフォルトで、アーカイブされているツリーの &lt;code&gt;.gitattributes&lt;/code&gt; ファイルから取得されることに注意してください。事後に出力が生成される方法を微調整したい場合（たとえば、 &lt;code&gt;.gitattributes&lt;/code&gt; に適切なexport-ignoreを追加せずにコミットした場合）、必要に応じてチェックアウトされた &lt;code&gt;.gitattributes&lt;/code&gt; ファイルを調整し、 &lt;code&gt;--worktree-attributes&lt;/code&gt; オプションを使用します。または、 &lt;code&gt;$GIT_DIR/info/attributes&lt;/code&gt; ファイルにツリーをアーカイブするときに適用する必要のある属性を保持することもできます。</target>
        </trans-unit>
        <trans-unit id="cff58353f0553493321de729107a5ed939f5819e" translate="yes" xml:space="preserve">
          <source>Note that changing the compression level will not automatically recompress all existing objects. You can force recompression by passing the -F option to &lt;a href=&quot;git-repack&quot;&gt;git-repack[1]&lt;/a&gt;.</source>
          <target state="translated">圧縮レベルを変更しても、既存のすべてのオブジェクトが自動的に再圧縮されるわけではないことに注意してください。-Fオプションを&lt;a href=&quot;git-repack&quot;&gt;git-repack [1]に&lt;/a&gt;渡すことにより、再圧縮を強制できます。</target>
        </trans-unit>
        <trans-unit id="64e3311b0fc4c31b0c8a5b69594b7b0fffce6672" translate="yes" xml:space="preserve">
          <source>Note that commands that operate on the history of the current branch (e.g. &lt;code&gt;git commit&lt;/code&gt; to build a new history on top of it) still work while the HEAD is detached. They update the HEAD to point at the tip of the updated history without affecting any branch. Commands that update or inquire information &lt;code&gt;about&lt;/code&gt; the current branch (e.g. &lt;code&gt;git
branch --set-upstream-to&lt;/code&gt; that sets what remote-tracking branch the current branch integrates with) obviously do not work, as there is no (real) current branch to ask about in this state.</source>
          <target state="translated">現在のブランチの履歴を操作するコマンド（たとえば、その上に新しい履歴を構築する &lt;code&gt;git commit&lt;/code&gt; ）は、HEADがデタッチされている間も機能することに注意してください。ブランチに影響を与えることなく、更新された履歴の先端を指すようにHEADを更新します。更新または問い合わせ情報というコマンド &lt;code&gt;about&lt;/code&gt; 、現在のブランチ（例えば &lt;code&gt;git branch --set-upstream-to&lt;/code&gt; 聞いて何の（本当の）現在のブランチがないので何のリモート追跡ブランチと、現在の分岐統合そのセットは）明らかに、ではない仕事をしますこの状態で。</target>
        </trans-unit>
        <trans-unit id="c16e502657efa32285522830eee76fe68f8a2daa" translate="yes" xml:space="preserve">
          <source>Note that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled.</source>
          <target state="translated">最初のモードの名前にもかかわらず、有効になっている場合は、すべてのモードで変更された部分を強調するために色が使用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="53b666711e62d15ce074196074eb30f8dac41460" translate="yes" xml:space="preserve">
          <source>Note that diff options passed to the command affect how the primary product of &lt;code&gt;format-patch&lt;/code&gt; is generated, and they are not passed to the underlying &lt;code&gt;range-diff&lt;/code&gt; machinery used to generate the cover-letter material (this may change in the future).</source>
          <target state="translated">コマンドに渡されるdiffオプションは、 &lt;code&gt;format-patch&lt;/code&gt; の主な生成物の生成方法に影響し、カバーレターマテリアルの生成に使用される基になる &lt;code&gt;range-diff&lt;/code&gt; 機構には渡されないことに注意してください（これは将来変更される可能性があります）。</target>
        </trans-unit>
        <trans-unit id="e0e05126bbcc50063c2790c39405469ee70a21a8" translate="yes" xml:space="preserve">
          <source>Note that during &lt;code&gt;git rebase&lt;/code&gt; and &lt;code&gt;git pull --rebase&lt;/code&gt;, &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; may appear swapped. See the explanation of the same options in &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;git rebase&lt;/code&gt; と &lt;code&gt;git pull --rebase&lt;/code&gt; の実行中、 &lt;code&gt;ours&lt;/code&gt; と &lt;code&gt;theirs&lt;/code&gt; は入れ替わったように見える場合があることに注意してください。詳細については、&lt;a href=&quot;git-checkout&quot;&gt;git-checkout [1]&lt;/a&gt;の同じオプションの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="1af7aa20d72debc79fb9171e27e72669f87bd742" translate="yes" xml:space="preserve">
          <source>Note that during &lt;code&gt;git rebase&lt;/code&gt; and &lt;code&gt;git pull --rebase&lt;/code&gt;, &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; may appear swapped; &lt;code&gt;--ours&lt;/code&gt; gives the version from the branch the changes are rebased onto, while &lt;code&gt;--theirs&lt;/code&gt; gives the version from the branch that holds your work that is being rebased.</source>
          <target state="translated">&lt;code&gt;git rebase&lt;/code&gt; と &lt;code&gt;git pull --rebase&lt;/code&gt; の実行中、 &lt;code&gt;ours&lt;/code&gt; と &lt;code&gt;theirs&lt;/code&gt; は入れ替わったように見えるかもしれないことに注意してください。 &lt;code&gt;--ours&lt;/code&gt; は一方で、変更が上にリベースされているブランチからのバージョンを提供します &lt;code&gt;--theirs&lt;/code&gt; がリベースされているあなたの仕事を保持しているブランチからのバージョンを提供します。</target>
        </trans-unit>
        <trans-unit id="c0c3e4b221eecb8ab2fd8007bde41fbeccbc289b" translate="yes" xml:space="preserve">
          <source>Note that earlier implementation left a broken pair as a separate creation and deletion patches. This was an unnecessary hack and the latest implementation always merges all the broken pairs back into modifications, but the resulting patch output is formatted differently for easier review in case of such a complete rewrite by showing the entire contents of old version prefixed with &lt;code&gt;-&lt;/code&gt;, followed by the entire contents of new version prefixed with &lt;code&gt;+&lt;/code&gt;.</source>
          <target state="translated">以前の実装では、壊れたペアが個別の作成および削除パッチとして残されていたことに注意してください。これは不必要なハックであり、最新の実装は常にすべての壊れたペアをマージして変更に戻しますが、結果のパッチ出力は異なる形式になっており、古いバージョンの内容全体を &lt;code&gt;-&lt;/code&gt; で始めて完全に書き直した場合に備えて、 &lt;code&gt;+&lt;/code&gt; で始まる新しいバージョンのコンテンツ全体。</target>
        </trans-unit>
        <trans-unit id="1e94eb3093be7f837a0c2027288d60b6c3b52e2c" translate="yes" xml:space="preserve">
          <source>Note that earlier versions of this command did not complain and produced incorrect results if you gave these options.</source>
          <target state="translated">このコマンドの以前のバージョンでは、これらのオプションを指定しても文句を言わず、誤った結果を生成していたことに注意してください。</target>
        </trans-unit>
        <trans-unit id="5d58dd5b84f29e01b510ca03eab20796ad3c7cbe" translate="yes" xml:space="preserve">
          <source>Note that extra commits can be shown to give a meaningful history.</source>
          <target state="translated">余分なコミットは、意味のある履歴を示すことができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5d8bcfac8a1a61a9e4be4013c3b0af7c68e4f7e1" translate="yes" xml:space="preserve">
          <source>Note that fast-forward updates do not create a merge commit and therefore there is no way to stop those merges with --no-commit. Thus, if you want to ensure your branch is not changed or updated by the merge command, use --no-ff with --no-commit.</source>
          <target state="translated">早送り更新ではマージコミットは発生しないので、 --no-commit でマージを止める方法はないことに注意してください。したがって、マージコマンドによってブランチが変更されたり更新されたりしないようにしたい場合は、 --no-commit と --no-ff を使用してください。</target>
        </trans-unit>
        <trans-unit id="f0d1c52e1eb6b4521a19e733ce553d5995206cf5" translate="yes" xml:space="preserve">
          <source>Note that fast-import automatically switches packfiles when the current packfile reaches --max-pack-size, or 4 GiB, whichever limit is smaller. During an automatic packfile switch fast-import does not update the branch refs, tags or marks.</source>
          <target state="translated">現在のパックファイルが --max-pack-size または 4GiB のいずれか小さい方に達すると、fast-import は自動的にパックファイルを切り替えることに注意してください。自動パックファイル切り替えの間、fast-import はブランチの参照、タグ、マークを更新しません。</target>
        </trans-unit>
        <trans-unit id="6615d1d4a8cbe8f9f5da36594407e26f3b365d70" translate="yes" xml:space="preserve">
          <source>Note that git log starts with the most recent commit and works backwards through the parents; however, since Git history can contain multiple independent lines of development, the particular order that commits are listed in may be somewhat arbitrary.</source>
          <target state="translated">しかし、Git の履歴には複数の独立した開発ラインが含まれていることがあるので、コミットの並び順は任意のものになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="b6e44338fe1bf08aabf78cd81639eb77b1309fea" translate="yes" xml:space="preserve">
          <source>Note that git pull always merges into the current branch, regardless of what else is given on the command line.</source>
          <target state="translated">git pull は常に現在のブランチにマージされることに注意しましょう。</target>
        </trans-unit>
        <trans-unit id="bcdb8efaa60d12b40472e9e7be3ed7ef20fcfd01" translate="yes" xml:space="preserve">
          <source>Note that git-svn keeps track of the highest revision in which a branch or tag has appeared. If the subset of branches or tags is changed after fetching, then $GIT_DIR/svn/.metadata must be manually edited to remove (or reset) branches-maxRev and/or tags-maxRev as appropriate.</source>
          <target state="translated">git-svn は、ブランチやタグが出現した最高リビジョンを追跡していることに注意しましょう。取得後にブランチやタグのサブセットが変更された場合は、$GIT_DIR/svn/.metadata を手動で編集して branches-maxRev や tags-maxRev を削除 (あるいはリセット)しなければなりません。</target>
        </trans-unit>
        <trans-unit id="9d6b14c8954c11ebf9dc491ca128004d883ac7cd" translate="yes" xml:space="preserve">
          <source>Note that he doesn&amp;rsquo;t need to give the path to Alice&amp;rsquo;s repository; when Bob cloned Alice&amp;rsquo;s repository, Git stored the location of her repository in the repository configuration, and that location is used for pulls:</source>
          <target state="translated">アリスのリポジトリへのパスを指定する必要がないことに注意してください。BobがAliceのリポジトリーを複製したとき、Gitは彼女のリポジトリーの場所をリポジトリー構成に保管し、その場所はプルに使用されます。</target>
        </trans-unit>
        <trans-unit id="d033887586c63461935e98a544790f02b6895719" translate="yes" xml:space="preserve">
          <source>Note that if no extensions are specified in the config file, then &lt;code&gt;core.repositoryformatversion&lt;/code&gt; SHOULD be set to &lt;code&gt;0&lt;/code&gt; (setting it to &lt;code&gt;1&lt;/code&gt; provides no benefit, and makes the repository incompatible with older implementations of git).</source>
          <target state="translated">設定ファイルで拡張子が指定されていない場合、 &lt;code&gt;core.repositoryformatversion&lt;/code&gt; を &lt;code&gt;0&lt;/code&gt; に設定する必要があります（ &lt;code&gt;1&lt;/code&gt; に設定してもメリットはなく、リポジトリがgitの古い実装と互換性がなくなります）。</target>
        </trans-unit>
        <trans-unit id="855e515073658cd86a49dd1065464c65266acbcf" translate="yes" xml:space="preserve">
          <source>Note that if the &lt;code&gt;bidi-import&lt;/code&gt; capability is used the complete batch sequence has to be buffered before starting to send data to fast-import to prevent mixing of commands and fast-import responses on the helper&amp;rsquo;s stdin.</source>
          <target state="translated">&lt;code&gt;bidi-import&lt;/code&gt; 機能を使用する場合、ヘルパーの標準入力でコマンドと高速インポート応答が混在しないように、高速インポートへのデータの送信を開始する前に、完全なバッチシーケンスをバッファーする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b689c65aa31e82a2dbc37c89c0ac3187b41716e6" translate="yes" xml:space="preserve">
          <source>Note that if the current branch head was your only reference to a particular point in history, then resetting that branch may leave you with no way to find the history it used to point to; so use this command carefully.</source>
          <target state="translated">現在のブランチの先頭が歴史上の特定のポイントへの唯一の参照であった場合、そのブランチをリセットすると、そのブランチが指し示していた歴史を見つけることができなくなる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e6c226fbc041b7aed3f8d988d110ae660c99fecc" translate="yes" xml:space="preserve">
          <source>Note that if the number of kept packs is more than gc.autoPackLimit, this configuration variable is ignored, all packs except the base pack will be repacked. After this the number of packs should go below gc.autoPackLimit and gc.bigPackThreshold should be respected again.</source>
          <target state="translated">保存パック数が gc.autoPackLimit を超えた場合、この設定変数は無視され、ベースパックを除くすべてのパックが再パックされます。この後、パック数はgc.autoPackLimit以下になり、gc.bigPackThresholdが再び尊重されます。</target>
        </trans-unit>
        <trans-unit id="876a2eaaf30082c69c38a89b274fd268226ca0ba" translate="yes" xml:space="preserve">
          <source>Note that if you also want to skip the first commit of the range you would issue the command:</source>
          <target state="translated">範囲の最初のコミットをスキップしたい場合は、コマンドを発行することに注意してください。</target>
        </trans-unit>
        <trans-unit id="102fd7adeeb68915f128c7eebf4ae04f1c363d22" translate="yes" xml:space="preserve">
          <source>Note that in general, Alice would want her local changes committed before initiating this &quot;pull&quot;. If Bob&amp;rsquo;s work conflicts with what Alice did since their histories forked, Alice will use her working tree and the index to resolve conflicts, and existing local changes will interfere with the conflict resolution process (Git will still perform the fetch but will refuse to merge --- Alice will have to get rid of her local changes in some way and pull again when this happens).</source>
          <target state="translated">一般に、アリスはこの「プル」を開始する前に、ローカルの変更をコミットすることを望みます。ボブの仕事が履歴が分岐して以来アリスが行ったことと矛盾する場合、アリスは自分の作業ツリーとインデックスを使用して矛盾を解決し、既存のローカル変更は競合解決プロセスを妨害します（Gitは引き続きフェッチを実行しますが、マージを拒否します- -アリスは、何らかの方法でローカルの変更を取り除き、これが発生したときに再度プルする必要があります）。</target>
        </trans-unit>
        <trans-unit id="51fccf4fe2d201a349cf25a2b82190079f387e94" translate="yes" xml:space="preserve">
          <source>Note that in older documentation you may see the index called the &quot;current directory cache&quot; or just the &quot;cache&quot;. It has three important properties:</source>
          <target state="translated">古いドキュメントでは、&quot;カレントディレクトリキャッシュ &quot;と呼ばれるインデックスや、単に &quot;キャッシュ &quot;と呼ばれるインデックスを見ることがあることに注意してください。これには3つの重要なプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="33bb6a06b88e89af07ea98fc22445ba64a91b75d" translate="yes" xml:space="preserve">
          <source>Note that in this file, the exception for &lt;code&gt;core.bare&lt;/code&gt; and &lt;code&gt;core.worktree&lt;/code&gt; is gone. If you have them in $GIT_DIR/config before, you must move them to the &lt;code&gt;config.worktree&lt;/code&gt; of the main working tree. You may also take this opportunity to review and move other configuration that you do not want to share to all working trees:</source>
          <target state="translated">このファイルでは、 &lt;code&gt;core.bare&lt;/code&gt; および &lt;code&gt;core.worktree&lt;/code&gt; の例外がなくなっていることに注意してください。以前に$ GIT_DIR / configにある &lt;code&gt;config.worktree&lt;/code&gt; は、メインの作業ツリーのconfig.worktreeに移動する必要があります。この機会に、共有したくない他の構成を確認して、すべての作業ツリーに移動することもできます。</target>
        </trans-unit>
        <trans-unit id="f62684e2b0c86eaa1fac93a58127ba986d09144a" translate="yes" xml:space="preserve">
          <source>Note that it is currently &lt;strong&gt;always&lt;/strong&gt; an array reference, even if feature doesn&amp;rsquo;t accept any configuration parameters, and 'default' is used only to turn it on or off. In such case you turn feature on by setting this element to &lt;code&gt;[1]&lt;/code&gt;, and torn it off by setting it to &lt;code&gt;[0]&lt;/code&gt;. See also the passage about the &quot;blame&quot; feature in the &quot;Examples&quot; section.</source>
          <target state="translated">機能が構成パラメーターを受け入れなくても、現在は&lt;strong&gt;常に&lt;/strong&gt;配列参照であり、「デフォルト」はオンまたはオフにするためにのみ使用されることに注意してください。このような場合、この要素を &lt;code&gt;[1]&lt;/code&gt; に設定して機能をオンにし、 &lt;code&gt;[0]&lt;/code&gt; に設定して機能をオフにします。「例」セクションの「非難」機能に関する節も参照してください。</target>
        </trans-unit>
        <trans-unit id="c6d71837c5b2acf93d8b7a746fdb13a8f313316a" translate="yes" xml:space="preserve">
          <source>Note that it is possible for refname to not have sha1-new when this hook runs. This can easily occur if another user modifies the ref after it was updated by &lt;code&gt;git-receive-pack&lt;/code&gt;, but before the hook was able to evaluate it. It is recommended that hooks rely on sha1-new rather than the current value of refname.</source>
          <target state="translated">このフックの実行時にrefnameがsha1-newを持たない可能性があることに注意してください。これは、 &lt;code&gt;git-receive-pack&lt;/code&gt; によって更新された後、フックが評価できるようになる前に、別のユーザーが参照を変更した場合に簡単に発生します。フックは、refnameの現在の値ではなく、sha1-newに依存することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="288f25c901caafda3b52f9e96d7bc31178f41bbc" translate="yes" xml:space="preserve">
          <source>Note that merge commits may have more than one parent:</source>
          <target state="translated">マージコミットは複数の親を持つ可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b4bd4c01bcc139c9e086b4c697c46e8ed5645dbb" translate="yes" xml:space="preserve">
          <source>Note that namespaces which include a &lt;code&gt;/&lt;/code&gt; will expand to a hierarchy of namespaces; for example, &lt;code&gt;GIT_NAMESPACE=foo/bar&lt;/code&gt; will store refs under &lt;code&gt;refs/namespaces/foo/refs/namespaces/bar/&lt;/code&gt;. This makes paths in &lt;code&gt;GIT_NAMESPACE&lt;/code&gt; behave hierarchically, so that cloning with &lt;code&gt;GIT_NAMESPACE=foo/bar&lt;/code&gt; produces the same result as cloning with &lt;code&gt;GIT_NAMESPACE=foo&lt;/code&gt; and cloning from that repo with &lt;code&gt;GIT_NAMESPACE=bar&lt;/code&gt;. It also avoids ambiguity with strange namespace paths such as &lt;code&gt;foo/refs/heads/&lt;/code&gt;, which could otherwise generate directory/file conflicts within the &lt;code&gt;refs&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; を含む名前空間は、名前空間の階層に展開されることに注意してください。たとえば、 &lt;code&gt;GIT_NAMESPACE=foo/bar&lt;/code&gt; は &lt;code&gt;refs/namespaces/foo/refs/namespaces/bar/&lt;/code&gt; を格納します。これにより、 &lt;code&gt;GIT_NAMESPACE&lt;/code&gt; のパスが階層的に動作するため、 &lt;code&gt;GIT_NAMESPACE=foo/bar&lt;/code&gt; を使用したクローン作成は、 &lt;code&gt;GIT_NAMESPACE=foo&lt;/code&gt; を使用したクローン作成および &lt;code&gt;GIT_NAMESPACE=bar&lt;/code&gt; を使用したそのリポジトリからのクローン作成と同じ結果になります。また、 &lt;code&gt;foo/refs/heads/&lt;/code&gt; などの &lt;code&gt;refs&lt;/code&gt; ディレクトリ内でディレクトリ/ファイルの競合が発生する可能性がある奇妙な名前空間パスのあいまいさを回避します。</target>
        </trans-unit>
        <trans-unit id="5960cd2f6a18c56540790aa3e8525ad5bfd7623b" translate="yes" xml:space="preserve">
          <source>Note that no attempts whatsoever are made to validate the encoding.</source>
          <target state="translated">エンコーディングを検証する試みは一切行われていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a90bb6c9021795be1cb1c05d155b4badc4462ac4" translate="yes" xml:space="preserve">
          <source>Note that not all diffs can feature all types. For instance, diffs from the index to the working tree can never have Added entries (because the set of paths included in the diff is limited by what is in the index). Similarly, copied and renamed entries cannot appear if detection for those types is disabled.</source>
          <target state="translated">すべての diff がすべてのタイプを特徴づけることができるわけではないことに注意してください。例えば、インデックスから作業ツリーへの diff は、追加エントリを持つことはできません (diff に含まれるパスのセットはインデックスにあるものによって制限されるからです)。同様に、コピーされたエントリや名前が変更されたエントリは、それらのタイプの検出が無効になっている場合には表示されません。</target>
        </trans-unit>
        <trans-unit id="b214bd38041e6a3ecd59f0a8d74547fecd3e66a2" translate="yes" xml:space="preserve">
          <source>Note that omitting the &lt;code&gt;=&lt;/code&gt; in &lt;code&gt;git -c foo.bar ...&lt;/code&gt; is allowed and sets &lt;code&gt;foo.bar&lt;/code&gt; to the boolean true value (just like &lt;code&gt;[foo]bar&lt;/code&gt; would in a config file). Including the equals but with an empty value (like &lt;code&gt;git -c
foo.bar= ...&lt;/code&gt;) sets &lt;code&gt;foo.bar&lt;/code&gt; to the empty string which &lt;code&gt;git config
--type=bool&lt;/code&gt; will convert to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">省略することを注意 &lt;code&gt;=&lt;/code&gt; で &lt;code&gt;git -c foo.bar ...&lt;/code&gt; 許可し、セットはされ &lt;code&gt;foo.bar&lt;/code&gt; ブール値trueに（だけのような &lt;code&gt;[foo]bar&lt;/code&gt; の設定ファイルになります）。等しいが空の値を含む（ &lt;code&gt;git -c foo.bar= ...&lt;/code&gt; ）と、 &lt;code&gt;foo.bar&lt;/code&gt; が空の文字列に &lt;code&gt;git config --type=bool&lt;/code&gt; れ &lt;code&gt;false&lt;/code&gt; 。これはgit config --type = boolがfalseに変換します。</target>
        </trans-unit>
        <trans-unit id="2d893e89ed900e1f0840df95a39350717d32e84c" translate="yes" xml:space="preserve">
          <source>Note that per repository configuration can be set in &lt;code&gt;$GIT_DIR/cloneurl&lt;/code&gt; file, or as values of multi-value &lt;code&gt;gitweb.url&lt;/code&gt; configuration variable in project config. Per-repository configuration takes precedence over value composed from &lt;code&gt;@git_base_url_list&lt;/code&gt; elements and project name.</source>
          <target state="translated">リポジトリごとの構成は、 &lt;code&gt;$GIT_DIR/cloneurl&lt;/code&gt; ファイルで、またはプロジェクト構成の複数値の &lt;code&gt;gitweb.url&lt;/code&gt; 構成変数の値として設定できることに注意してください。リポジトリごとの設定は、 &lt;code&gt;@git_base_url_list&lt;/code&gt; 要素とプロジェクト名から構成される値よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="fccadef8ff02c3c7b5e8091c077ff771f4d090ed" translate="yes" xml:space="preserve">
          <source>Note that rule 3 disallows many cases that do not have any privacy implications. These rules are subject to change in future versions of git, and the server accessed by &lt;code&gt;git archive --remote&lt;/code&gt; may or may not follow these exact rules.</source>
          <target state="translated">ルール3では、プライバシーに影響を与えない多くのケースが許可されないことに注意してください。これらのルールはgitの将来のバージョンで変更される可能性があり、 &lt;code&gt;git archive --remote&lt;/code&gt; によってアクセスされるサーバーはこれらの正確なルールに従う場合とそうでない場合があります。</target>
        </trans-unit>
        <trans-unit id="6b2cd45b5672bcfb50850c37a2d3873eae0b00dc" translate="yes" xml:space="preserve">
          <source>Note that running &lt;code&gt;git repack&lt;/code&gt; without the &lt;code&gt;--local&lt;/code&gt; option in a repository cloned with &lt;code&gt;--shared&lt;/code&gt; will copy objects from the source repository into a pack in the cloned repository, removing the disk space savings of &lt;code&gt;clone --shared&lt;/code&gt;. It is safe, however, to run &lt;code&gt;git gc&lt;/code&gt;, which uses the &lt;code&gt;--local&lt;/code&gt; option by default.</source>
          <target state="translated">&lt;code&gt;--shared&lt;/code&gt; で複製されたリポジトリで &lt;code&gt;--local&lt;/code&gt; オプションを指定せずに &lt;code&gt;git repack&lt;/code&gt; repackを実行すると、ソースリポジトリから複製されたリポジトリのパックにオブジェクトがコピーされ、 &lt;code&gt;clone --shared&lt;/code&gt; ディスク領域の節約が削除されます。ただし、デフォルトで &lt;code&gt;--local&lt;/code&gt; オプションを使用する &lt;code&gt;git gc&lt;/code&gt; を実行しても安全です。</target>
        </trans-unit>
        <trans-unit id="140dadc93eb0ab3b9abb37d56f2b3ec8284a753b" translate="yes" xml:space="preserve">
          <source>Note that since this operation is very I/O expensive, it might be a good idea to redirect the temporary directory off-disk with the &lt;code&gt;-d&lt;/code&gt; option, e.g. on tmpfs. Reportedly the speedup is very noticeable.</source>
          <target state="translated">この操作はI / Oに非常に負荷がかかるため、一時ディレクトリをtmpfsなどの &lt;code&gt;-d&lt;/code&gt; オプションを使用してディスク外にリダイレクトすることをお勧めします。報告によると、スピードアップは非常に顕著です。</target>
        </trans-unit>
        <trans-unit id="406b2d499d377ca290ed5b4924c72cd2cd51a43f" translate="yes" xml:space="preserve">
          <source>Note that some configuration can be controlled on per-repository rather than gitweb-wide basis: see &quot;Per-repository gitweb configuration&quot; subsection on &lt;a href=&quot;gitweb&quot;&gt;gitweb[1]&lt;/a&gt; manpage.</source>
          <target state="translated">一部の構成はgitweb全体ではなくリポジトリごとに制御できることに注意してください&lt;a href=&quot;gitweb&quot;&gt;。gitweb[1]&lt;/a&gt;マンページの「リポジトリごとのgitweb構成」サブセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0d8f5c59efaf04f91fb17771a5f9956f75377d81" translate="yes" xml:space="preserve">
          <source>Note that terminology has changed since that revision. For example, the README in that revision uses the word &quot;changeset&quot; to describe what we now call a &lt;a href=&quot;#def_commit_object&quot;&gt;commit&lt;/a&gt;.</source>
          <target state="translated">その改訂以降、用語が変更されていることに注意してください。たとえば、そのリビジョンのREADMEでは、「チェンジセット」という単語を使用して、現在&lt;a href=&quot;#def_commit_object&quot;&gt;commit&lt;/a&gt;と呼んでいるものを説明しています。</target>
        </trans-unit>
        <trans-unit id="1162a2144d0b881d5670bbd9b0805334b2b73beb" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;t_rel&lt;/code&gt; field contains the observed run time in seconds for the child process (starting before the fork/exec/spawn and stopping after the waitpid() and includes OS process creation overhead). So this time will be slightly larger than the atexit time reported by the child process itself.</source>
          <target state="translated">&lt;code&gt;t_rel&lt;/code&gt; フィールドには、子プロセスの監視された実行時間が秒単位で含まれていることに注意してください（fork / exec / spawnの前に開始し、waitpid（）の後に停止し、OSプロセスの作成オーバーヘッドが含まれます）。したがって、この時間は、子プロセス自体によって報告されるatexit時間よりもわずかに長くなります。</target>
        </trans-unit>
        <trans-unit id="b7757b33b688da6e41f6e15271bd961d7647767a" translate="yes" xml:space="preserve">
          <source>Note that the SVN URL of the commiturl config key includes the SVN branch. If you rather want to set the commit URL for an entire SVN repository use svn-remote.&amp;lt;name&amp;gt;.pushurl instead.</source>
          <target state="translated">commiturl設定キーのSVN URLにはSVNブランチが含まれていることに注意してください。SVNリポジトリ全体のコミットURLを設定する場合は、代わりにsvn-remote。&amp;lt;name&amp;gt; .pushurlを使用してください。</target>
        </trans-unit>
        <trans-unit id="cb5d63c2ce1d70a7eb8e0b6357957166a5a229f7" translate="yes" xml:space="preserve">
          <source>Note that the asterisk &lt;code&gt;*&lt;/code&gt; is quoted from the shell in this example; this lets Git, and not the shell, expand the pathnames of files and subdirectories under the &lt;code&gt;Documentation/&lt;/code&gt; directory.</source>
          <target state="translated">この例では、アスタリスク &lt;code&gt;*&lt;/code&gt; はシェルから引用されていることに注意してください。これにより、シェルではなくGitが、 &lt;code&gt;Documentation/&lt;/code&gt; ディレクトリの下のファイルとサブディレクトリのパス名を展開できます。</target>
        </trans-unit>
        <trans-unit id="ce32bdb056375627c69f9422ed26926b9107752d" translate="yes" xml:space="preserve">
          <source>Note that the asterisk &lt;code&gt;*&lt;/code&gt; is quoted from the shell in this example; this lets the command include the files from subdirectories of &lt;code&gt;Documentation/&lt;/code&gt; directory.</source>
          <target state="translated">この例では、アスタリスク &lt;code&gt;*&lt;/code&gt; はシェルから引用されていることに注意してください。これにより、 &lt;code&gt;Documentation/&lt;/code&gt; ディレクトリのサブディレクトリからのファイルをコマンドに含めることができます。</target>
        </trans-unit>
        <trans-unit id="8938c6c44864ae040ef79f140140b8a3da4caab5" translate="yes" xml:space="preserve">
          <source>Note that the commit message will already be filled in for you with some information about the merge. Normally you can just use this default message unchanged, but you may add additional commentary of your own if desired.</source>
          <target state="translated">コミットメッセージには、マージに関する情報がすでに記入されていることに注意してください。通常はこのデフォルトのメッセージをそのまま使うことができますが、必要に応じてコメントを追加しても構いません。</target>
        </trans-unit>
        <trans-unit id="131272668a67eaa5ac9294087a9ff4488c82c210" translate="yes" xml:space="preserve">
          <source>Note that the example that we will use is really a toy example, we will be looking for the first commit that has a version like &quot;2.6.26-something&quot;, that is the commit that has a &quot;SUBLEVEL = 26&quot; line in the top level Makefile. This is a toy example because there are better ways to find this commit with Git than using &quot;git bisect&quot; (for example &quot;git blame&quot; or &quot;git log -S&amp;lt;string&amp;gt;&quot;).</source>
          <target state="translated">使用する例は実際にはおもちゃの例であることに注意してください。「2.6.26-something」のようなバージョンを持つ最初のコミットを探します。つまり、「SUBLEVEL = 26」行が含まれるコミットです。トップレベルのMakefile。これはおもちゃの例です。「git bisect」（たとえば「git blame」または「git log -S &amp;lt;string&amp;gt;」）を使用するよりもGitでこのコミットを見つける方が良いためです。</target>
        </trans-unit>
        <trans-unit id="5e386156a3e0996458a30d74f4a22474e7420343" translate="yes" xml:space="preserve">
          <source>Note that the files all have mode 644 or 755: Git actually only pays attention to the executable bit.</source>
          <target state="translated">すべてのファイルが644か755のモードになっていることに注意しましょう。</target>
        </trans-unit>
        <trans-unit id="d2e57a867612d1ae307185458bab810ae89e20a5" translate="yes" xml:space="preserve">
          <source>Note that the first word of an alias does not necessarily have to be a command. It can be a command-line option that will be passed into the invocation of &lt;code&gt;git&lt;/code&gt;. In particular, this is useful when used with &lt;code&gt;-c&lt;/code&gt; to pass in one-time configurations or &lt;code&gt;-p&lt;/code&gt; to force pagination. For example, &lt;code&gt;loud-rebase = -c commit.verbose=true rebase&lt;/code&gt; can be defined such that running &lt;code&gt;git loud-rebase&lt;/code&gt; would be equivalent to &lt;code&gt;git -c commit.verbose=true rebase&lt;/code&gt;. Also, &lt;code&gt;ps = -p status&lt;/code&gt; would be a helpful alias since &lt;code&gt;git ps&lt;/code&gt; would paginate the output of &lt;code&gt;git status&lt;/code&gt; where the original command does not.</source>
          <target state="translated">エイリアスの最初の単語は必ずしもコマンドである必要はないことに注意してください。これは、 &lt;code&gt;git&lt;/code&gt; の呼び出しに渡されるコマンドラインオプションにすることができます。特に、これは &lt;code&gt;-c&lt;/code&gt; とともに使用して1回限りの構成で渡す場合、または &lt;code&gt;-p&lt;/code&gt; を使用して強制的にページ分割を行う場合に役立ちます。たとえば、 &lt;code&gt;loud-rebase = -c commit.verbose=true rebase&lt;/code&gt; は、 &lt;code&gt;git loud-rebase&lt;/code&gt; の実行が &lt;code&gt;git -c commit.verbose=true rebase&lt;/code&gt; と同等になるように定義できます。また、 &lt;code&gt;git ps&lt;/code&gt; は &lt;code&gt;git status&lt;/code&gt; の出力に元のコマンドではないページ番号を付けるため、 &lt;code&gt;ps = -p status&lt;/code&gt; は便利なエイリアスになります。</target>
        </trans-unit>
        <trans-unit id="650b87912cfe39dc5747fbba67473a3822f86ab9" translate="yes" xml:space="preserve">
          <source>Note that the form &lt;code&gt;--filter=sparse:path=&amp;lt;path&amp;gt;&lt;/code&gt; that wants to read from an arbitrary path on the filesystem has been dropped for security reasons.</source>
          <target state="translated">ファイルシステムの任意のパスから読み取りたい &lt;code&gt;--filter=sparse:path=&amp;lt;path&amp;gt;&lt;/code&gt; という形式は、セキュリティ上の理由から削除されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d8075e043d9a3ca9826ff1989c66c1905d9648ca" translate="yes" xml:space="preserve">
          <source>Note that the grafts mechanism is outdated and can lead to problems transferring objects between repositories; see &lt;a href=&quot;git-replace&quot;&gt;git-replace[1]&lt;/a&gt; for a more flexible and robust system to do the same thing.</source>
          <target state="translated">移植メカニズムは古く、リポジトリ間でオブジェクトを転送する際に問題が発生する可能性があることに注意してください。同じことを行うためのより柔軟で堅牢なシステムについては、&lt;a href=&quot;git-replace&quot;&gt;git-replace [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0b0bdd8828d416a94597b15ce8aefc2c0b976fde" translate="yes" xml:space="preserve">
          <source>Note that the last point clashes with the other two: a topic that has been merged elsewhere should not be rebased. See the section on RECOVERING FROM UPSTREAM REBASE in &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;.</source>
          <target state="translated">最後の点は他の2つと衝突することに注意してください。他の場所にマージされたトピックはリベースしないでください。&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]の&lt;/a&gt; UPSTREAM REBASEからのリカバリに関するセクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="bd4901c4d1f08f37f3106399dbc26a76568f48fe" translate="yes" xml:space="preserve">
          <source>Note that the leading character does not have to be a dot; for example, you can use &lt;code&gt;--suffix=-patch&lt;/code&gt; to get &lt;code&gt;0001-description-of-my-change-patch&lt;/code&gt;.</source>
          <target state="translated">先頭の文字がドットである必要はないことに注意してください。たとえば、-- &lt;code&gt;--suffix=-patch&lt;/code&gt; を使用して &lt;code&gt;0001-description-of-my-change-patch&lt;/code&gt; を取得できます。</target>
        </trans-unit>
        <trans-unit id="833f1e85ef857dfcde43c87fdacaaa1075b0d6b3" translate="yes" xml:space="preserve">
          <source>Note that the maintainer(s) may impose restrictions, such as &quot;Signed-off-by&quot; requirements, that all commits/patches submitted for inclusion must adhere to. Consult your project&amp;rsquo;s documentation for more information.</source>
          <target state="translated">メンテナは、 &quot;Signed-off-by&quot;要件など、含めるために送信されたすべてのコミット/パッチが遵守しなければならない制限を課す場合があることに注意してください。詳細については、プロジェクトのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="50f092ab1e91fa0de2c9ed05785c4a967888dc6a" translate="yes" xml:space="preserve">
          <source>Note that the name &quot;origin&quot; is just the name that Git uses by default to refer to the repository that you cloned from.</source>
          <target state="translated">なお、&quot;origin &quot;という名前は、デフォルトではGitがクローンしたリポジトリを参照するために使用する名前にすぎません。</target>
        </trans-unit>
        <trans-unit id="22728656f144a546aef50a70cd21a26fce3a8c1d" translate="yes" xml:space="preserve">
          <source>Note that the patch is always used as-is without charset conversion, even with this flag.</source>
          <target state="translated">このフラグがあっても、パッチは常に文字コード変換をせずにそのまま使用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9bea9d7e3f1393135579965b1439ff9a7baaf238" translate="yes" xml:space="preserve">
          <source>Note that the push URL and the fetch URL, even though they can be set differently, must still refer to the same place. What you pushed to the push URL should be what you would see if you immediately fetched from the fetch URL. If you are trying to fetch from one place (e.g. your upstream) and push to another (e.g. your publishing repository), use two separate remotes.</source>
          <target state="translated">プッシュ URL とフェッチ URL は、設定が異なっていても同じ場所を参照しなければならないことに注意してください。プッシュ URL にプッシュしたものは、フェッチ URL からすぐにフェッチした場合に表示されるものでなければなりません。ある場所(アップストリームなど)からフェッチして、別の場所(パブリッシングリポジトリなど)にプッシュしようとしている場合は、2つの別々のリモートを使用します。</target>
        </trans-unit>
        <trans-unit id="f8efe69c6940942131795b6ce6c48d7e64d9560b" translate="yes" xml:space="preserve">
          <source>Note that the reflog history is very different from normal Git history. While normal history is shared by every repository that works on the same project, the reflog history is not shared: it tells you only about how the branches in your local repository have changed over time.</source>
          <target state="translated">reflog の履歴は、通常の Git の履歴とは大きく異なることに注意しましょう。通常の履歴は同じプロジェクトで働くすべてのリポジトリで共有されますが、 reflog の履歴は共有されません。</target>
        </trans-unit>
        <trans-unit id="9a9c3b4049e20efd5a28033d7014008a8c2ac264" translate="yes" xml:space="preserve">
          <source>Note that the script (&lt;code&gt;my_script&lt;/code&gt; in the above example) should exit with code 0 if the current source code is good/old, and exit with a code between 1 and 127 (inclusive), except 125, if the current source code is bad/new.</source>
          <target state="translated">スクリプト（上記の例では &lt;code&gt;my_script&lt;/code&gt; ）は、現在のソースコードが良好/古い場合はコード0で終了し、現在のソースコードが不正な場合は125を除いて1〜127（両端を含む）のコードで終了することに注意してください。新着。</target>
        </trans-unit>
        <trans-unit id="5586aefc0f8bd69c9dcf3cf3294d72d0db17f0fc" translate="yes" xml:space="preserve">
          <source>Note that the second point is true even across machines. You can duplicate a remote Git repository with &lt;strong&gt;any&lt;/strong&gt; regular copy mechanism, be it &lt;code&gt;scp&lt;/code&gt;, &lt;code&gt;rsync&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt;.</source>
          <target state="translated">2番目のポイントは、マシン間でも当てはまることに注意してください。 &lt;code&gt;scp&lt;/code&gt; 、 &lt;code&gt;rsync&lt;/code&gt; 、 &lt;code&gt;wget&lt;/code&gt; など、通常のコピーメカニズムを&lt;strong&gt;使用し&lt;/strong&gt;てリモートGitリポジトリを複製できます。</target>
        </trans-unit>
        <trans-unit id="e9e6bb5468c99a3a334f80fab3dbb52fc16223c6" translate="yes" xml:space="preserve">
          <source>Note that the session-id of the child process is not available to the current/spawning process, so the child&amp;rsquo;s PID is reported here as a hint for post-processing. (But it is only a hint because the child process may be a shell script which doesn&amp;rsquo;t have a session-id.)</source>
          <target state="translated">子プロセスのセッションIDは現在のプロセス/生成プロセスでは使用できないため、子のPIDは後処理のヒントとしてここに報告されます。（ただし、子プロセスはセッションIDを持たないシェルスクリプトである可能性があるため、これはヒントにすぎません。）</target>
        </trans-unit>
        <trans-unit id="e98f559f39ce7645bbbb14c50cc4f9c4dc239749" translate="yes" xml:space="preserve">
          <source>Note that the sizes of objects on disk are reported accurately, but care should be taken in drawing conclusions about which refs or objects are responsible for disk usage. The size of a packed non-delta object may be much larger than the size of objects which delta against it, but the choice of which object is the base and which is the delta is arbitrary and is subject to change during a repack.</source>
          <target state="translated">ディスク上のオブジェクトのサイズは正確に報告されていますが、どの参照先やオブジェクトがディスクの使用に影響を与えているかについての結論を出す際には注意が必要です。パックされた非デルタオブジェクトのサイズは、それに対してデルタするオブジェクトのサイズよりもはるかに大きいかもしれませんが、どのオブジェクトをベースとし、どのオブジェクトをデルタとするかの選択は任意であり、リパック中に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="47fc7cad6a527b522ab5e266e3e278a07a579735" translate="yes" xml:space="preserve">
          <source>Note that the suffix you get if you type these commands today may be longer than what Linus saw above when he ran these commands, as your Git repository may have new commits whose object names begin with 975b that did not exist back then, and &quot;-g975b&quot; suffix alone may not be sufficient to disambiguate these commits.</source>
          <target state="translated">今日これらのコマンドを入力したときに得られるサフィックスは、Linus が上記のコマンドを実行したときのものよりも長いものになるかもしれないことに注意しましょう。</target>
        </trans-unit>
        <trans-unit id="7eeba5803dc504042af48f9504a175baa6f39016" translate="yes" xml:space="preserve">
          <source>Note that the target of a &lt;code&gt;push&lt;/code&gt; is normally a &lt;a href=&quot;#def_bare_repository&quot;&gt;bare&lt;/a&gt; repository. You can also push to a repository that has a checked-out working tree, but a push to update the currently checked-out branch is denied by default to prevent confusion. See the description of the receive.denyCurrentBranch option in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; のターゲットは通常、&lt;a href=&quot;#def_bare_repository&quot;&gt;ベア&lt;/a&gt;リポジトリであることに注意してください。チェックアウトされた作業ツリーがあるリポジトリにプッシュすることもできますが、混乱を避けるために、現在チェックアウトされているブランチを更新するプッシュはデフォルトで拒否されます。詳細については、&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;のreceive.denyCurrentBranchオプションの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="110e365a18d2e41e53b11ff50c7bbd9d01eae2f0" translate="yes" xml:space="preserve">
          <source>Note that the two techniques outlined above (exporting via &lt;a href=&quot;#exporting-via-http&quot;&gt;http&lt;/a&gt; or &lt;a href=&quot;#exporting-via-git&quot;&gt;git&lt;/a&gt;) allow other maintainers to fetch your latest changes, but they do not allow write access, which you will need to update the public repository with the latest changes created in your private repository.</source>
          <target state="translated">上記の2つの手法（&lt;a href=&quot;#exporting-via-http&quot;&gt;http&lt;/a&gt;または&lt;a href=&quot;#exporting-via-git&quot;&gt;git&lt;/a&gt;を介したエクスポート）では、他のメンテナが最新の変更をフェッチできますが、書き込みアクセスは許可されません。プライベートリポジトリで作成された最新の変更でパブリックリポジトリを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="ae8ea7d3546a16ede3faa6039563fb0d737e4467" translate="yes" xml:space="preserve">
          <source>Note that the version which &lt;code&gt;git bisect&lt;/code&gt; checks out for you at each point is just a suggestion, and you&amp;rsquo;re free to try a different version if you think it would be a good idea. For example, occasionally you may land on a commit that broke something unrelated; run</source>
          <target state="translated">&lt;code&gt;git bisect&lt;/code&gt; が各時点でチェックアウトするバージョンは単なる提案であり、それが良いアイデアだと思われる場合は、別のバージョンを自由に試すことができることに注意してください。たとえば、関係のないものを壊したコミットに時折遭遇するかもしれません。走る</target>
        </trans-unit>
        <trans-unit id="1000c60b0f402f5d9e4c69088fd79818a06e5e98" translate="yes" xml:space="preserve">
          <source>Note that there are two ways to checkout a particular branch. As described elsewhere on this page, the &quot;module&quot; parameter of cvs checkout is interpreted as a branch name, and it becomes the main branch. It remains the main branch for a given sandbox even if you temporarily make another branch sticky with cvs update -r. Alternatively, the -r argument can indicate some other branch to actually checkout, even though the module is still the &quot;main&quot; branch. Tradeoffs (as currently implemented): Each new &quot;module&quot; creates a new database on disk with a history for the given module, and after the database is created, operations against that main branch are fast. Or alternatively, -r doesn&amp;rsquo;t take any extra disk space, but may be significantly slower for many operations, like cvs update.</source>
          <target state="translated">特定のブランチをチェックアウトするには2つの方法があることに注意してください。このページの他の場所で説明されているように、cvs checkoutの「モジュール」パラメーターはブランチ名として解釈され、メインブランチになります。 cvs update -rを使用して別のブランチを一時的に固定しても、指定されたサンドボックスのメインブランチのままです。または、モジュールがまだ「メイン」ブランチである場合でも、-r引数は実際にチェックアウトする他のブランチを示すことができます。トレードオフ（現在実装されているとおり）：新しい「モジュール」ごとに、指定されたモジュールの履歴を持つ新しいデータベースがディスク上に作成され、データベースが作成された後、そのメインブランチに対する操作は高速になります。または、-rは余分なディスク容量を必要としませんが、cvs updateなどの多くの操作では大幅に遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4fe39a3f8a6c98b987fad41f0865478fee4d146d" translate="yes" xml:space="preserve">
          <source>Note that these are applied before commit ordering and formatting options, such as &lt;code&gt;--reverse&lt;/code&gt;.</source>
          <target state="translated">これらは、-- &lt;code&gt;--reverse&lt;/code&gt; などのコミット順序付けおよびフォーマットオプションの前に適用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ccb8cdc33c08512e4436bbf3b8db5bc9921ae58d" translate="yes" xml:space="preserve">
          <source>Note that this affects all diff-based output types, e.g. those produced by &lt;code&gt;--stat&lt;/code&gt;, etc.</source>
          <target state="translated">これは、たとえば &lt;code&gt;--stat&lt;/code&gt; によって生成される出力タイプなど、すべてのdiffベースの出力タイプに影響することに注意してください。</target>
        </trans-unit>
        <trans-unit id="0691624d8498eccd40578875388b7f8bab2a7b6c" translate="yes" xml:space="preserve">
          <source>Note that this applies only to accessing the repository&amp;rsquo;s disk contents directly. An older client which understands only format &lt;code&gt;0&lt;/code&gt; may still connect via &lt;code&gt;git://&lt;/code&gt; to a repository using format &lt;code&gt;1&lt;/code&gt;, as long as the server process understands format &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">これは、リポジトリのディスクコンテンツに直接アクセスする場合にのみ適用されることに注意してください。サーバープロセスがフォーマット &lt;code&gt;1&lt;/code&gt; を理解している限り、フォーマット &lt;code&gt;0&lt;/code&gt; のみを &lt;code&gt;git://&lt;/code&gt; 古いクライアントは、フォーマット &lt;code&gt;1&lt;/code&gt; を使用してgit：//経由でリポジトリに接続できます。</target>
        </trans-unit>
        <trans-unit id="c3528bf60e5e55bcec2b34b4efbb66a2e2ad0ca9" translate="yes" xml:space="preserve">
          <source>Note that this assumes that none of the blobs and commit messages referenced by that revision range contains the string &lt;code&gt;refs/heads/master&lt;/code&gt;.</source>
          <target state="translated">これは、そのリビジョン範囲によって参照されるblobおよびコミットメッセージのいずれにも文字列 &lt;code&gt;refs/heads/master&lt;/code&gt; が含まれていないことを前提としています。</target>
        </trans-unit>
        <trans-unit id="b2c1b09dd03782a35574f4220ce1860b1a59abed" translate="yes" xml:space="preserve">
          <source>Note that this configuration variable is ignored if it is seen in the repository-level config (this is a safety measure against fetching from untrusted repositories).</source>
          <target state="translated">この設定変数がリポジトリレベルの設定で見られる場合は無視されることに注意してください (これは信頼されていないリポジトリからのフェッチに対する安全対策です)。</target>
        </trans-unit>
        <trans-unit id="8243e24ce26ee48638bea5b267bba5916eee07a8" translate="yes" xml:space="preserve">
          <source>Note that this is currently only implemented for the client side of clones and fetches.</source>
          <target state="translated">現在のところ、これはクローンとフェッチのクライアント側にのみ実装されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7278e2ca069b871494710e49f702957a299741e8" translate="yes" xml:space="preserve">
          <source>Note that this is the old file data; so the object that Git named in its response to the initial tree was a tree with a snapshot of the directory state that was recorded by the first commit.</source>
          <target state="translated">これは古いファイルデータなので、Git が最初のツリーに対するレスポンスで名付けたオブジェクトは、最初のコミットで記録されたディレクトリの状態のスナップショットを含むツリーでした。</target>
        </trans-unit>
        <trans-unit id="8524e2a4579b70a19e36821a3f8f1b43bac12c4a" translate="yes" xml:space="preserve">
          <source>Note that this list is non-comprehensive and not necessarily complete. For command-specific variables, you will find a more detailed description in the appropriate manual page.</source>
          <target state="translated">このリストは包括的なものではなく、必ずしも完全なものではないことに注意してください。コマンド固有の変数については、該当するマニュアルページに詳細な説明があります。</target>
        </trans-unit>
        <trans-unit id="a06dd344c0e0f4252ac8d0d18c1815e7f413d617" translate="yes" xml:space="preserve">
          <source>Note that this may contain embedded LF or CRLF characters that are not escaped, so the event may spill across multiple lines.</source>
          <target state="translated">これには、エスケープされていないLFまたはCRLF文字が埋め込まれている可能性があるため、イベントが複数の行にまたがる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="954610f540e4dda45ac67b28e742adb370b9dd1c" translate="yes" xml:space="preserve">
          <source>Note that this may mean that multiple Git commits are created for a single SVN revision.</source>
          <target state="translated">これは、一つの SVN リビジョンに対して複数の Git コミットが作成されていることを意味することに注意してください。</target>
        </trans-unit>
        <trans-unit id="69a24fcf6b082a94d6b3e16af2197fed496268e4" translate="yes" xml:space="preserve">
          <source>Note that this option is only useful if you are actually sending the emails and want to identify yourself as the sender, but retain the original author (and &lt;code&gt;git am&lt;/code&gt; will correctly pick up the in-body header). Note also that &lt;code&gt;git send-email&lt;/code&gt; already handles this transformation for you, and this option should not be used if you are feeding the result to &lt;code&gt;git send-email&lt;/code&gt;.</source>
          <target state="translated">このオプションが役立つのは、実際にメールを送信していて、自分を送信者として識別したいが、元の作成者は保持したい場合のみです（そして &lt;code&gt;git am&lt;/code&gt; は、本文のヘッダーを正しく取得します）。 &lt;code&gt;git send-email&lt;/code&gt; がすでにこの変換を処理していることにも注意してください。結果を &lt;code&gt;git send-email&lt;/code&gt; に送る場合は、このオプションを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="d0a34c500aa8e9fdf22f16d59ae03a1a8711ff64" translate="yes" xml:space="preserve">
          <source>Note that this option uses the no overlay mode by default (see also &lt;code&gt;--overlay&lt;/code&gt;), and currently doesn&amp;rsquo;t support overlay mode.</source>
          <target state="translated">このオプションはデフォルトでオーバーレイなしモードを使用し（ &lt;code&gt;--overlay&lt;/code&gt; も参照）、現在オーバーレイモードをサポートしていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e3aa2cd05420cf442d246cf6450d49e1768c842c" translate="yes" xml:space="preserve">
          <source>Note that this variable is honored even when set in a configuration file in a &quot;.git&quot; subdirectory of a directory and its value differs from the latter directory (e.g. &quot;/path/to/.git/config&quot; has core.worktree set to &quot;/different/path&quot;), which is most likely a misconfiguration. Running Git commands in the &quot;/path/to&quot; directory will still use &quot;/different/path&quot; as the root of the work tree and can cause confusion unless you know what you are doing (e.g. you are creating a read-only snapshot of the same index to a location different from the repository&amp;rsquo;s usual working tree).</source>
          <target state="translated">この変数は、ディレクトリの「.git」サブディレクトリにある構成ファイルで設定された場合でも尊重され、その値は後者のディレクトリとは異なります（たとえば、「/ path / to / .git / config」では、core.worktreeが&quot;/ different / path&quot;）、これはおそらく構成ミスです。「/ path / to」ディレクトリでGitコマンドを実行すると、作業ツリーのルートとして「/ different / path」が引き続き使用され、何をしているのかわからない場合（たとえば、読み取り専用のスナップショットを作成している場合）に混乱が生じる可能性があります。リポジトリの通常の作業ツリーとは異なる場所への同じインデックス）。</target>
        </trans-unit>
        <trans-unit id="f66853802a66e4aff14a38d5843516f4164ff5ba" translate="yes" xml:space="preserve">
          <source>Note that this will create the new branch, but it will not switch the working tree to it; use &quot;git switch &amp;lt;newbranch&amp;gt;&quot; to switch to the new branch.</source>
          <target state="translated">これにより新しいブランチが作成されますが、作業ツリーがブランチに切り替わることはありません。「git switch &amp;lt;newbranch&amp;gt;」を使用して、新しいブランチに切り替えます。</target>
        </trans-unit>
        <trans-unit id="48c8adea213e6ac01f80c59a6b72ca8bc5d0c4be" translate="yes" xml:space="preserve">
          <source>Note that unreachable, packed objects will remain. If this is not desired, see &lt;a href=&quot;git-repack&quot;&gt;git-repack[1]&lt;/a&gt;.</source>
          <target state="translated">到達できないパックされたオブジェクトが残ることに注意してください。これが望ましくない場合は、&lt;a href=&quot;git-repack&quot;&gt;git-repack [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f9c873a19166627d45cbe06c1e92f0fc64675a0f" translate="yes" xml:space="preserve">
          <source>Note that users fetching over dumb protocols will have to fetch the whole new pack in order to get any contained object, no matter how many other objects in that pack they already have locally.</source>
          <target state="translated">ダムプロトコルをフェッチしているユーザは、そのパックに含まれるオブジェクトを取得するためには、そのパックに含まれるオブジェクトがローカルにいくつあったとしても、新しいパック全体をフェッチしなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="511b177ad0f4f309a1f22f8d5a0729bb57a27072" translate="yes" xml:space="preserve">
          <source>Note that we deliberately chose not to re-code the commit log message when a commit is made to force UTF-8 at the commit object level, because re-coding to UTF-8 is not necessarily a reversible operation.</source>
          <target state="translated">コミット時にコミットログメッセージを再コードしないようにしたのは、コミットオブジェクトレベルでUTF-8を強制するためです。</target>
        </trans-unit>
        <trans-unit id="352feed71993cca2768c0de80ab4efdfef627645" translate="yes" xml:space="preserve">
          <source>Note that we pick a single island for each regex to go into, using &quot;last one wins&quot; ordering (which allows repo-specific config to take precedence over user-wide config, and so forth).</source>
          <target state="translated">各regexに対して、&quot;last one wins &quot;の順序を使って、1つの島を選んでいることに注意してください (これにより、レポ固有の設定がユーザー全体の設定などよりも優先されるようになります)。</target>
        </trans-unit>
        <trans-unit id="0f413678af329d8b352f68927252d8a326f2b212" translate="yes" xml:space="preserve">
          <source>Note that when matching against a tree object, attributes are still obtained from working tree, not from the given tree object.</source>
          <target state="translated">ツリーオブジェクトに対してマッチングを行う場合、属性は与えられたツリーオブジェクトからではなく、作業ツリーから取得されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6f16ff14e66ecdeaed0888755a04ec80e3903de7" translate="yes" xml:space="preserve">
          <source>Note that when providing a &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt;, you must use &lt;code&gt;--list&lt;/code&gt;; otherwise the command may be interpreted as branch creation.</source>
          <target state="translated">&lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; を指定する場合は、-- &lt;code&gt;--list&lt;/code&gt; 使用する必要があることに注意してください。そうでない場合、コマンドはブランチの作成と解釈される場合があります。</target>
        </trans-unit>
        <trans-unit id="2e31fbecbd095ab339f753f545ee8ad3cdcfd7be" translate="yes" xml:space="preserve">
          <source>Note that when you&amp;rsquo;ve moved or copied a Git repository, your Git index file (which caches various information, notably some of the &quot;stat&quot; information for the files involved) will likely need to be refreshed. So after you do a &lt;code&gt;cp -a&lt;/code&gt; to create a new copy, you&amp;rsquo;ll want to do</source>
          <target state="translated">Gitリポジトリを移動またはコピーした場合は、Gitインデックスファイル（さまざまな情報、特に関連するファイルの「stat」情報の一部をキャッシュする）を更新する必要がある可能性があります。したがって、 &lt;code&gt;cp -a&lt;/code&gt; を実行して新しいコピーを作成した後、次のようにします。</target>
        </trans-unit>
        <trans-unit id="b6e7add23d70ae9c79a92003e95b0646493f7240" translate="yes" xml:space="preserve">
          <source>Note that without &lt;code&gt;--full-history&lt;/code&gt;, this still simplifies merges: if one of the parents is TREESAME, we follow only that one, so the other sides of the merge are never walked.</source>
          <target state="translated">&lt;code&gt;--full-history&lt;/code&gt; がなくても、これはマージを単純化することに注意してください。親の1つがTREESAMEの場合、その1つだけに従うため、マージの反対側は決して実行されません。</target>
        </trans-unit>
        <trans-unit id="26c6b6e45f05961054f9762544f517daa6e3a44f" translate="yes" xml:space="preserve">
          <source>Note that without parent rewriting, it is not really possible to talk about the parent/child relationships between the commits, so we show them disconnected.</source>
          <target state="translated">親の書き換えがないと、コミット間の親子関係を語ることが本当にできないので、切り離して表示していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="40996350a13d178ee15ae3215e9ae292d6702c1c" translate="yes" xml:space="preserve">
          <source>Note that you can get more information on a packfile by calling &lt;a href=&quot;git-verify-pack&quot;&gt;git-verify-pack[1]&lt;/a&gt;. However, as this command considers only the index file itself, it&amp;rsquo;s both faster and more flexible.</source>
          <target state="translated">&lt;a href=&quot;git-verify-pack&quot;&gt;git-verify-pack [1]を&lt;/a&gt;呼び出すことにより、パックファイルに関する詳細情報を取得できることに注意してください。ただし、このコマンドはインデックスファイル自体のみを考慮するため、より高速で柔軟性があります。</target>
        </trans-unit>
        <trans-unit id="191247c1388c3f45dfe82bf6b2f0384fea86edc8" translate="yes" xml:space="preserve">
          <source>Note that you cannot generally put &lt;code&gt;git for-each-ref&lt;/code&gt; directly into the config value, as it does not take a repository path as an argument (but you can wrap the command above in a shell script).</source>
          <target state="translated">リポジトリのパスを引数として使用しないため、通常は &lt;code&gt;git for-each-ref&lt;/code&gt; を直接config値に入れることはできません（ただし、上記のコマンドをシェルスクリプトでラップすることはできます）。</target>
        </trans-unit>
        <trans-unit id="0fb44a035d4df6f6306133b267ae1546e220d2ba" translate="yes" xml:space="preserve">
          <source>Note that you should not do Octopus just because you can. An octopus is a valid thing to do and often makes it easier to view the commit history if you are merging more than two independent changes at the same time. However, if you have merge conflicts with any of the branches you are merging in and need to hand resolve, that is an indication that the development happened in those branches were not independent after all, and you should merge two at a time, documenting how you resolved the conflicts, and the reason why you preferred changes made in one side over the other. Otherwise it would make the project history harder to follow, not easier.</source>
          <target state="translated">オクトパスはできるからといってやってはいけないことに注意してください。オクトパスを行うことは有効なことであり、二つ以上の独立した変更を同時にマージしている場合、コミット履歴を見るのが簡単になることがよくあります。しかし、マージしているブランチのいずれかとマージの競合があり、手作業で解決する必要がある場合は、そのブランチで起こった開発が結局は独立していなかったことを示しているので、一度に二つのブランチをマージし、競合をどのように解決したのか、そして、一方のブランチでの変更を他方のブランチよりも優先した理由を文書化しておくべきです。そうしないと、プロジェクトの歴史を追うのが難しくなります。</target>
        </trans-unit>
        <trans-unit id="482be6a864fbdcc5f9a936e9708b6d9c3eb14ff5" translate="yes" xml:space="preserve">
          <source>Note the addition of the &lt;code&gt;+&lt;/code&gt; sign. Alternatively, you can use the &lt;code&gt;-f&lt;/code&gt; flag to force the remote update, as in:</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 記号が追加されていることに注意してください。または、次のように &lt;code&gt;-f&lt;/code&gt; フラグを使用してリモート更新を強制できます。</target>
        </trans-unit>
        <trans-unit id="c14d9654c43dfc38c5ce0e390578cf211f8eb175" translate="yes" xml:space="preserve">
          <source>Note the addition of the &lt;code&gt;+&lt;/code&gt; sign. Alternatively, you can use the &lt;code&gt;-f&lt;/code&gt; flag to force updates of all the fetched branches, as in:</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 記号が追加されていることに注意してください。または、次のように &lt;code&gt;-f&lt;/code&gt; フラグを使用して、フェッチされたすべてのブランチを強制的に更新できます。</target>
        </trans-unit>
        <trans-unit id="2261964ad436001973909975a060cb501a98c780" translate="yes" xml:space="preserve">
          <source>Note the last point. Do &lt;code&gt;not&lt;/code&gt; use &lt;code&gt;git pull&lt;/code&gt; unless you actually want to merge the remote branch.</source>
          <target state="translated">最後の点に注意してください。実際にリモートブランチをマージする必要がない限り、 &lt;code&gt;git pull&lt;/code&gt; を使用し &lt;code&gt;not&lt;/code&gt; ください。</target>
        </trans-unit>
        <trans-unit id="b5d534f9876445dbbed162e13c3b9e1bade912b4" translate="yes" xml:space="preserve">
          <source>Note the major differences in &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;P&lt;/code&gt;, and &lt;code&gt;Q&lt;/code&gt; over &lt;code&gt;--full-history&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;--full-history&lt;/code&gt; に対する &lt;code&gt;N&lt;/code&gt; 、 &lt;code&gt;P&lt;/code&gt; 、および &lt;code&gt;Q&lt;/code&gt; の主な違いに注意してください。</target>
        </trans-unit>
        <trans-unit id="592ed4ba86d62c504859114fd8d03df0827a06fa" translate="yes" xml:space="preserve">
          <source>Note the quotes around &lt;code&gt;*.c&lt;/code&gt;. The file &lt;code&gt;hello.c&lt;/code&gt; will also be checked out, even though it is no longer in the working tree, because the file globbing is used to match entries in the index (not in the working tree by the shell).</source>
          <target state="translated">&lt;code&gt;*.c&lt;/code&gt; の前後の引用符に注意してください。ファイル &lt;code&gt;hello.c&lt;/code&gt; は、作業ツリーには存在しなくても、チェックアウトされます。これは、ファイルグロビングがインデックス内のエントリの照合に使用されるためです（シェルでは作業ツリーではありません）。</target>
        </trans-unit>
        <trans-unit id="d840183324e7e2c4b1d9b149ae89bf837a67da9c" translate="yes" xml:space="preserve">
          <source>Note the quotes around &lt;code&gt;*.c&lt;/code&gt;. The file &lt;code&gt;hello.c&lt;/code&gt; will also be restored, even though it is no longer in the working tree, because the file globbing is used to match entries in the index (not in the working tree by the shell).</source>
          <target state="translated">&lt;code&gt;*.c&lt;/code&gt; の前後の引用符に注意してください。ファイル &lt;code&gt;hello.c&lt;/code&gt; は、作業ツリーには存在しなくても復元されます。これは、ファイルグロビングがインデックス内のエントリの照合に使用されるためです（シェルでは作業ツリーではありません）。</target>
        </trans-unit>
        <trans-unit id="86811ec658abf1645177c2f89c78cd1610e7ea04" translate="yes" xml:space="preserve">
          <source>Note what happens to the different &lt;code&gt;git diff-*&lt;/code&gt; versions here. After we&amp;rsquo;ve updated &lt;code&gt;hello&lt;/code&gt; in the index, &lt;code&gt;git diff-files -p&lt;/code&gt; now shows no differences, but &lt;code&gt;git diff-index -p HEAD&lt;/code&gt; still &lt;strong&gt;does&lt;/strong&gt; show that the current state is different from the state we committed. In fact, now &lt;code&gt;git diff-index&lt;/code&gt; shows the same difference whether we use the &lt;code&gt;--cached&lt;/code&gt; flag or not, since now the index is coherent with the working tree.</source>
          <target state="translated">ここで、異なる &lt;code&gt;git diff-*&lt;/code&gt; バージョンがどうなるか注意してください。インデックスの &lt;code&gt;hello&lt;/code&gt; を更新した後、 &lt;code&gt;git diff-files -p&lt;/code&gt; は違いを表示しなくなりましたが、 &lt;code&gt;git diff-index -p HEAD&lt;/code&gt; &lt;strong&gt;は&lt;/strong&gt;、現在の状態がコミットした状態と異なることをまだ示しています。実際、今では &lt;code&gt;git diff-index&lt;/code&gt; は &lt;code&gt;--cached&lt;/code&gt; フラグを使用してもしなくても同じ違いを示しています。これは、インデックスが作業ツリーと一貫しているためです。</target>
        </trans-unit>
        <trans-unit id="c96f5bf9205aae211cb148d5f8bcf4fb9ebed15b" translate="yes" xml:space="preserve">
          <source>Note, by the way, that lots of commands take a tree as an argument. But as we can see above, a tree can be referred to in many different ways&amp;mdash;​by the SHA-1 name for that tree, by the name of a commit that refers to the tree, by the name of a branch whose head refers to that tree, etc.--and most such commands can accept any of these names.</source>
          <target state="translated">ちなみに、多くのコマンドはツリーを引数として取ります。しかし、上記のように、ツリーはさまざまな方法で参照できます。ツリーのSHA-1名、ツリーを参照するコミットの名前、ヘッドが参照するブランチの名前そのツリーなどに-そしてそのようなコマンドのほとんどはこれらの名前のどれでも受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="ba28d9bd22f696c9f9b774765c5cbeba6fcd1342" translate="yes" xml:space="preserve">
          <source>Note, for the reasons stated above usage of context-free patches is discouraged.</source>
          <target state="translated">上記の理由から、コンテキストフリーのパッチの使用はお勧めしません。</target>
        </trans-unit>
        <trans-unit id="22eddd855ac86c24360d06b5276ff8c7e192d879" translate="yes" xml:space="preserve">
          <source>Note, this safety check does not mean that a checkout will generate a file identical to the original file for a different setting of &lt;code&gt;core.eol&lt;/code&gt; and &lt;code&gt;core.autocrlf&lt;/code&gt;, but only for the current one. For example, a text file with &lt;code&gt;LF&lt;/code&gt; would be accepted with &lt;code&gt;core.eol=lf&lt;/code&gt; and could later be checked out with &lt;code&gt;core.eol=crlf&lt;/code&gt;, in which case the resulting file would contain &lt;code&gt;CRLF&lt;/code&gt;, although the original file contained &lt;code&gt;LF&lt;/code&gt;. However, in both work trees the line endings would be consistent, that is either all &lt;code&gt;LF&lt;/code&gt; or all &lt;code&gt;CRLF&lt;/code&gt;, but never mixed. A file with mixed line endings would be reported by the &lt;code&gt;core.safecrlf&lt;/code&gt; mechanism.</source>
          <target state="translated">この安全性チェックは、チェックアウトが &lt;code&gt;core.eol&lt;/code&gt; と &lt;code&gt;core.autocrlf&lt;/code&gt; の異なる設定に対して元のファイルと同じファイルを生成することを意味するのではなく、現在のファイルに対してのみ生成することに注意してください。たとえば、 &lt;code&gt;LF&lt;/code&gt; を含むテキストファイルは &lt;code&gt;core.eol=lf&lt;/code&gt; で受け入れられ、後で &lt;code&gt;core.eol=crlf&lt;/code&gt; でチェックアウトできます。その場合、元のファイルには &lt;code&gt;LF&lt;/code&gt; が含まれていても、結果のファイルには &lt;code&gt;CRLF&lt;/code&gt; が含まれます。ただし、両方の作業ツリーでは、行末が一貫します。つまり、すべて &lt;code&gt;LF&lt;/code&gt; またはすべて &lt;code&gt;CRLF&lt;/code&gt; ですが、決して混在しません。行末が混在するファイルは、 &lt;code&gt;core.safecrlf&lt;/code&gt; によって報告されます。 機構。</target>
        </trans-unit>
        <trans-unit id="955b317bd13857ee21eddce08c9664927a950a2e" translate="yes" xml:space="preserve">
          <source>Note. A single level of backslashes are eaten by the configuration file parser, so you would need to double the backslashes; the pattern above picks a line that begins with a backslash, and zero or more occurrences of &lt;code&gt;sub&lt;/code&gt; followed by &lt;code&gt;section&lt;/code&gt; followed by open brace, to the end of line.</source>
          <target state="translated">注意。単一レベルのバックスラッシュが構成ファイルパーサーによって使用されるため、バックスラッシュを2倍にする必要があります。上記のパターンは、バックスラッシュで始まる行を選択し、0個以上の &lt;code&gt;sub&lt;/code&gt; の後に &lt;code&gt;section&lt;/code&gt; 続き、その後に開き括弧が続き、行の終わりまで続きます。</target>
        </trans-unit>
        <trans-unit id="c3a8d5b6840faaf677f5d3f6a79125e45b041b0b" translate="yes" xml:space="preserve">
          <source>Note. When the &quot;-C&quot; option is used with &lt;code&gt;--find-copies-harder&lt;/code&gt; option, &lt;code&gt;git diff-*&lt;/code&gt; commands feed unmodified filepairs to diffcore mechanism as well as modified ones. This lets the copy detector consider unmodified files as copy source candidates at the expense of making it slower. Without &lt;code&gt;--find-copies-harder&lt;/code&gt;, &lt;code&gt;git diff-*&lt;/code&gt; commands can detect copies only if the file that was copied happened to have been modified in the same changeset.</source>
          <target state="translated">注意。 「-C」オプションを &lt;code&gt;--find-copies-harder&lt;/code&gt; オプションとともに使用すると、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドは、変更されていないファイルペアを変更されたものと同様にdiffcoreメカニズムにフィードします。これにより、コピー検出機能は、変更が遅くなることを犠牲にして、変更されていないファイルをコピーソースの候補と見なします。なければ &lt;code&gt;--find-copies-harder&lt;/code&gt; 、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドは、コピーされたファイルは同じチェンジで変更されたために起こった場合にのみ、コピーを検出することができます。</target>
        </trans-unit>
        <trans-unit id="9ed1ac27dff5378ed96f590f4322050a04cabf6d" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;git revert&lt;/code&gt; is used to record some new commits to reverse the effect of some earlier commits (often only a faulty one). If you want to throw away all uncommitted changes in your working directory, you should see &lt;a href=&quot;git-reset&quot;&gt;git-reset[1]&lt;/a&gt;, particularly the &lt;code&gt;--hard&lt;/code&gt; option. If you want to extract specific files as they were in another commit, you should see &lt;a href=&quot;git-restore&quot;&gt;git-restore[1]&lt;/a&gt;, specifically the &lt;code&gt;--source&lt;/code&gt; option. Take care with these alternatives as both will discard uncommitted changes in your working directory.</source>
          <target state="translated">注： &lt;code&gt;git revert&lt;/code&gt; は、いくつかの新しいコミットを記録して、以前のコミット（多くの場合、障害のあるコミットのみ）の影響を元に戻すために使用されます。作業ディレクトリでコミットされていないすべての変更を &lt;code&gt;--hard&lt;/code&gt; 場合は、&lt;a href=&quot;git-reset&quot;&gt;git-reset [1]&lt;/a&gt;、特に--hardオプションが表示されます。別のコミットと同じように特定のファイルを抽出する場合は、&lt;a href=&quot;git-restore&quot;&gt;git-restore [1]&lt;/a&gt;、特に &lt;code&gt;--source&lt;/code&gt; オプションが表示されます。どちらも作業ディレクトリ内のコミットされていない変更を破棄するため、これらの選択肢には注意してください。</target>
        </trans-unit>
        <trans-unit id="6007883f602581f1393822506c41cbfbfd02c805" translate="yes" xml:space="preserve">
          <source>Note: A thin pack violates the packed archive format by omitting required objects and is thus unusable by Git without making it self-contained. Use &lt;code&gt;git index-pack --fix-thin&lt;/code&gt; (see &lt;a href=&quot;git-index-pack&quot;&gt;git-index-pack[1]&lt;/a&gt;) to restore the self-contained property.</source>
          <target state="translated">注：シンパックは、必要なオブジェクトを省略してパックアーカイブ形式に違反しているため、自己完結型にしないとGitで使用できません。使用 &lt;code&gt;git index-pack --fix-thin&lt;/code&gt; （参照&lt;a href=&quot;git-index-pack&quot;&gt;のgit-インデックスパック[1] &lt;/a&gt;）自己完結型のプロパティを復元します。</target>
        </trans-unit>
        <trans-unit id="1f8f5701942fbb7ebefa9dee3f4f37f4528c7cfd" translate="yes" xml:space="preserve">
          <source>Note: Make sure you quote the result when passing it to &lt;code&gt;eval&lt;/code&gt;. See below for an example.</source>
          <target state="translated">注： &lt;code&gt;eval&lt;/code&gt; に渡すときは、必ず結果を引用してください。例については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="b0f0e4e61a2bb004cf3ec68d5169e8ba972a47ee" translate="yes" xml:space="preserve">
          <source>Note: Newer CVS versions (&amp;gt;= 1.12.11) also support specifying CVS_SERVER directly in CVSROOT like</source>
          <target state="translated">注：新しいCVSバージョン（&amp;gt; = 1.12.11）では、CVSROOTで直接CVS_SERVERを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="b833243d544e1089f2767ea8843cab2eed5526b2" translate="yes" xml:space="preserve">
          <source>Note: Porcelain commands such as &lt;code&gt;git gc&lt;/code&gt; (see &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;), &lt;code&gt;git repack&lt;/code&gt; (see &lt;a href=&quot;git-repack&quot;&gt;git-repack[1]&lt;/a&gt;) pass this option by default in modern Git when they put objects in your repository into pack files. So does &lt;code&gt;git bundle&lt;/code&gt; (see &lt;a href=&quot;git-bundle&quot;&gt;git-bundle[1]&lt;/a&gt;) when it creates a bundle.</source>
          <target state="translated">注： &lt;code&gt;git gc&lt;/code&gt; （&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]を&lt;/a&gt;参照）、 &lt;code&gt;git repack&lt;/code&gt; （&lt;a href=&quot;git-repack&quot;&gt;git-repack [1]を&lt;/a&gt;参照）などの磁器コマンドは、リポジトリ内のオブジェクトをパックファイルに入れるときに、デフォルトでこのオプションを渡します。そうする &lt;code&gt;git bundle&lt;/code&gt; （参照&lt;a href=&quot;git-bundle&quot;&gt;のgit-バンドルを[1]&lt;/a&gt;それはバンドルを作成します）。</target>
        </trans-unit>
        <trans-unit id="7a04bc9af081bc88d648e6675a2308737bd31c23" translate="yes" xml:space="preserve">
          <source>Note: Some inetd servers let you specify the name of the executable independently of the value of argv[0] (i.e. the name the program assumes it was executed with). In this case the correct line in /etc/inetd.conf looks like</source>
          <target state="translated">注意:inetd サーバの中には argv[0]の値とは別に実行ファイルの名前を指定できるものがあります (つまり、プログラムが実行されたと仮定した名前)。この場合、/etc/inetd.conf の正しい行は次のようになります。</target>
        </trans-unit>
        <trans-unit id="722ccad077353010f3a3bf5b634c417679782a2c" translate="yes" xml:space="preserve">
          <source>Note: Whenever the clean filter is changed, the repo should be renormalized: $ git add --renormalize .</source>
          <target state="translated">Note:クリーンフィルタを変更したときはいつでも、レポをリノーマライズしなければなりません。</target>
        </trans-unit>
        <trans-unit id="e979029bca285fbda95b190d7e0a6ad42b034f7b" translate="yes" xml:space="preserve">
          <source>Note: the first command (&lt;code&gt;label onto&lt;/code&gt;) labels the revision onto which the commits are rebased; The name &lt;code&gt;onto&lt;/code&gt; is just a convention, as a nod to the &lt;code&gt;--onto&lt;/code&gt; option.</source>
          <target state="translated">注：最初のコマンド（ &lt;code&gt;label onto&lt;/code&gt; on）は、コミットがリベースされるリビジョンにラベルを付けます。 &lt;code&gt;onto&lt;/code&gt; という名前は &lt;code&gt;--onto&lt;/code&gt; オプションのうなずきとして、単なる慣例です。</target>
        </trans-unit>
        <trans-unit id="c1bc321618eb470344ec0a0359d287ae90474ae5" translate="yes" xml:space="preserve">
          <source>Note: the following core Perl modules that may be installed with your distribution of Perl are required: MIME::Base64, MIME::QuotedPrint, Net::Domain and Net::SMTP. These additional Perl modules are also required: Authen::SASL and Mail::Address.</source>
          <target state="translated">注意:Perl のディストリビューションと一緒にインストールされている可能性のある以下のコア Perl モジュールが必要です。MIME::Base64、MIME::QuotedPrint、Net::Domain および Net::SMTP。これらの追加の Perl モジュールも必要です。Authen::SASL および Mail::Address です。</target>
        </trans-unit>
        <trans-unit id="9ca0395056bb808a73d2de7297fac7a555e73c25" translate="yes" xml:space="preserve">
          <source>Note: you can specify the default pretty format in the repository configuration (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">注：リポジトリ設定でデフォルトのpretty形式を指定できます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="399df4ce8f932f9b96c0fdefbfc88e37bceafef0" translate="yes" xml:space="preserve">
          <source>Note: you need to ensure each user that is going to invoke &lt;code&gt;git-cvsserver&lt;/code&gt; has write access to the log file and to the database (see &lt;a href=&quot;#dbbackend&quot;&gt;Database Backend&lt;/a&gt;. If you want to offer write access over SSH, the users of course also need write access to the Git repository itself.</source>
          <target state="translated">注： &lt;code&gt;git-cvsserver&lt;/code&gt; を呼び出す各ユーザーがログファイルとデータベースへの書き込みアクセス権を持っていることを確認する必要があります（&lt;a href=&quot;#dbbackend&quot;&gt;データベースバックエンドを&lt;/a&gt;参照してください。SSH経由で書き込みアクセス権を提供する場合は、もちろんユーザーにも書き込みアクセス権が必要です。 Gitリポジトリ自体に。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="803fb7d2ab5d83b44291b7856ec7ac09a4ad4990" translate="yes" xml:space="preserve">
          <source>Notes can also be added to patches prepared with &lt;code&gt;git format-patch&lt;/code&gt; by using the &lt;code&gt;--notes&lt;/code&gt; option. Such notes are added as a patch commentary after a three dash separator line.</source>
          <target state="translated">&lt;code&gt;--notes&lt;/code&gt; オプションを使用して、 &lt;code&gt;git format-patch&lt;/code&gt; で作成したパッチにメモを追加することもできます。このような注記は、3つのダッシュの区切り線の後にパッチ解説として追加されます。</target>
        </trans-unit>
        <trans-unit id="680f18d9848c14869bd7dca451d5f596480f4677" translate="yes" xml:space="preserve">
          <source>Notes merge strategies</source>
          <target state="translated">ノートのマージ戦略</target>
        </trans-unit>
        <trans-unit id="abd4e292c73314f22de94f0e2806350a1ebe4452" translate="yes" xml:space="preserve">
          <source>Notes on frequently confused options</source>
          <target state="translated">よく混同するオプションの注意点</target>
        </trans-unit>
        <trans-unit id="f5aa58376045f00b2abde3758c9ee9232861fade" translate="yes" xml:space="preserve">
          <source>Notes ref to read and manipulate instead of &lt;code&gt;refs/notes/commits&lt;/code&gt;. Must be an unabbreviated ref name. This setting can be overridden through the environment and command line.</source>
          <target state="translated">メモは、 &lt;code&gt;refs/notes/commits&lt;/code&gt; ではなく、読み取りと操作を参照します。省略されていない参照名でなければなりません。この設定は、環境とコマンドラインで上書きできます。</target>
        </trans-unit>
        <trans-unit id="27c7345a105341e9d7ed2a9f6b06c674d31c0796" translate="yes" xml:space="preserve">
          <source>Notice all types of potential whitespace errors known to Git. The tab width is taken from the value of the &lt;code&gt;core.whitespace&lt;/code&gt; configuration variable.</source>
          <target state="translated">Gitで認識されているすべてのタイプの潜在的な空白エラーに注意してください。タブ幅は、 &lt;code&gt;core.whitespace&lt;/code&gt; 構成変数の値から取得されます。</target>
        </trans-unit>
        <trans-unit id="b1fa74b0ca5d38d82ab602be416ab241bc186864" translate="yes" xml:space="preserve">
          <source>Notice that regardless of which checkout command we use, &lt;code&gt;HEAD&lt;/code&gt; now refers directly to commit &lt;code&gt;b&lt;/code&gt;. This is known as being in detached &lt;code&gt;HEAD&lt;/code&gt; state. It means simply that &lt;code&gt;HEAD&lt;/code&gt; refers to a specific commit, as opposed to referring to a named branch. Let&amp;rsquo;s see what happens when we create a commit:</source>
          <target state="translated">使用するチェックアウトコマンドに関係なく、 &lt;code&gt;HEAD&lt;/code&gt; はcommit &lt;code&gt;b&lt;/code&gt; を直接参照するようになりました。これは、切り離された &lt;code&gt;HEAD&lt;/code&gt; 状態であると呼ばれます。これは単に、名前付きブランチを指すのではなく、 &lt;code&gt;HEAD&lt;/code&gt; が特定のコミットを指すことを意味します。コミットを作成するとどうなるか見てみましょう：</target>
        </trans-unit>
        <trans-unit id="223ae08c12689ce4cda40425ac912a2b7bc15955" translate="yes" xml:space="preserve">
          <source>Notify the helper this is a clone request (i.e. the current repository is guaranteed empty).</source>
          <target state="translated">ヘルパーにこれがクローン要求であることを通知します (つまり、現在のリポジトリが空であることが保証されます)。</target>
        </trans-unit>
        <trans-unit id="4abfc187ad76ac88063d3dc9dd98a5854ac68fcf" translate="yes" xml:space="preserve">
          <source>Now add the changes to the index that you want to have in the first commit. You can use &lt;code&gt;git add&lt;/code&gt; (possibly interactively) or &lt;code&gt;git gui&lt;/code&gt; (or both) to do that.</source>
          <target state="translated">ここで、最初のコミットで使用するインデックスに変更を追加します。これを行うには、 &lt;code&gt;git add&lt;/code&gt; （おそらく対話式）または &lt;code&gt;git gui&lt;/code&gt; （またはその両方）を使用できます。</target>
        </trans-unit>
        <trans-unit id="f89d262ba51a934099d56714cbb679d531203dd2" translate="yes" xml:space="preserve">
          <source>Now clone the superproject:</source>
          <target state="translated">今すぐスーパープロジェクトのクローンを作成してください。</target>
        </trans-unit>
        <trans-unit id="ba793c9ae00cb4d237b36de220bcaff0d64b7a28" translate="yes" xml:space="preserve">
          <source>Now create the branches in which you are going to work; these start out at the current tip of origin/master branch, and should be set up (using the &lt;code&gt;--track&lt;/code&gt; option to &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt;) to merge changes in from Linus by default.</source>
          <target state="translated">次に、作業するブランチを作成します。これらはorigin / masterブランチの現在の先端から始まり、（&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;の &lt;code&gt;--track&lt;/code&gt; オプションを使用して）デフォルトでLinusからの変更をマージするようにセットアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="b3aa6a5493fd6ad1a98101f846b1686abf42b2c1" translate="yes" xml:space="preserve">
          <source>Now create the superproject and add all the submodules:</source>
          <target state="translated">さて、スーパープロジェクトを作成し、すべてのサブモジュールを追加します。</target>
        </trans-unit>
        <trans-unit id="aec2ee2ebf7f0a1017c29bcb872a25ae6bf7b23d" translate="yes" xml:space="preserve">
          <source>Now is a good point to take a break to let this information sink in.</source>
          <target state="translated">今は、この情報を流し込むために休憩を取るのに良いポイントです。</target>
        </trans-unit>
        <trans-unit id="8125d3bd8f5c390de8746d2ef58ce50b7de72c0b" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s suppose that commit J is bad and commit G is good and that we apply the bisection algorithm like it has been previously described.</source>
          <target state="translated">ここで、コミットJが不良でコミットGが良好であり、前述のように二分法アルゴリズムを適用するとします。</target>
        </trans-unit>
        <trans-unit id="880aeec71bcb81a6f397f1be442543fc2e21cab4" translate="yes" xml:space="preserve">
          <source>Now suppose that Joe wants his middle name initial used, and Jane prefers her family name fully spelled out. A proper &lt;code&gt;.mailmap&lt;/code&gt; file would look like:</source>
          <target state="translated">ここで、ジョーがミドルネームのイニシャルを使用することを望み、ジェーンは完全に綴られた姓を好むとします。適切な &lt;code&gt;.mailmap&lt;/code&gt; ファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="3e7c06961fbf7a9468c5f87e472b9bdf95e1fa5a" translate="yes" xml:space="preserve">
          <source>Now to apply some patches from the community. Think of a short snappy name for a branch to hold this patch (or related group of patches), and create a new branch from a recent stable tag of Linus&amp;rsquo;s branch. Picking a stable base for your branch will: 1) help you: by avoiding inclusion of unrelated and perhaps lightly tested changes 2) help future bug hunters that use &lt;code&gt;git bisect&lt;/code&gt; to find problems</source>
          <target state="translated">コミュニティからのパッチをいくつか適用します。このパッチ（または関連するパッチのグループ）を保持するブランチの簡潔な名前を考え、Linusのブランチの最近の安定したタグから新しいブランチを作成します。ブランチの安定したベースを選択すると、次のようになります。1）役立つ：無関係でおそらく軽くテストされた変更が含まれないようにすることで2） &lt;code&gt;git bisect&lt;/code&gt; を使用する将来のバグハンターが問題を見つけるのを助ける</target>
        </trans-unit>
        <trans-unit id="31a13e21421ef92e8ef4a0a89bea77231f7d36fb" translate="yes" xml:space="preserve">
          <source>Now use &lt;code&gt;git submodule update&lt;/code&gt; to clone the repositories and check out the commits specified in the superproject:</source>
          <target state="translated">次に、 &lt;code&gt;git submodule update&lt;/code&gt; を使用してリポジトリのクローンを作成し、スーパープロジェクトで指定されたコミットをチェックアウトします。</target>
        </trans-unit>
        <trans-unit id="93f7a0302cd464e3e88673ccf5b8a8b034507a50" translate="yes" xml:space="preserve">
          <source>Now we are ready to experiment with the merge by hand.</source>
          <target state="translated">これで、手でマージの実験ができるようになりました。</target>
        </trans-unit>
        <trans-unit id="0479e792f6adb8abb7cacffe33ca0f7a5b48ab2f" translate="yes" xml:space="preserve">
          <source>Now we will suppose that there is only one &quot;first bad commit&quot;. This means that all its descendants are &quot;bad&quot; and all the other commits are &quot;good&quot;. And we will suppose that all commits have an equal probability of being good or bad, or of being the first bad commit, so knowing the state of c commits gives always the same amount of information wherever these c commits are on the graph and whatever c is. (So we suppose that these commits being for example on a branch or near a good or a bad commit does not give more or less information).</source>
          <target state="translated">ここでは、「最初の悪いコミット」が1つしかないと仮定します。これは、その子孫はすべて &quot;不良 &quot;であり、他のコミットはすべて &quot;良 &quot;であることを意味します。そして、すべてのコミットが良いコミットであるか悪いコミットであるか、最初の悪いコミットであるかは同じ確率であると仮定します。(つまり、これらのコミットが例えばブランチ上にあったり、良いコミットや悪いコミットの近くにあったりしても、情報量が多くなったり少なくなったりすることはないと仮定します)。</target>
        </trans-unit>
        <trans-unit id="16cb16561e679da512d88420e76326b5c722ec8f" translate="yes" xml:space="preserve">
          <source>Now when the background process runs &lt;code&gt;git fetch origin&lt;/code&gt; the references on &lt;code&gt;origin-push&lt;/code&gt; won&amp;rsquo;t be updated, and thus commands like:</source>
          <target state="translated">これで、バックグラウンドプロセスが &lt;code&gt;git fetch origin&lt;/code&gt; を実行するとき、 &lt;code&gt;origin-push&lt;/code&gt; の参照は更新されないため、次のようなコマンドが実行されます。</target>
        </trans-unit>
        <trans-unit id="3ecf9739a1d0abf420c43be7ddca1b7fc46c48f7" translate="yes" xml:space="preserve">
          <source>Now you apply the patch(es), run some tests, and commit the change(s). If the patch is a multi-part series, then you should apply each as a separate commit to this branch.</source>
          <target state="translated">ここで、パッチを適用し、テストを実行し、変更をコミットします。パッチが複数のパートに分かれている場合は、それぞれをこのブランチに個別にコミットしてください。</target>
        </trans-unit>
        <trans-unit id="ac8b110d69f8df7d9503ad0a18549a8731f4daf9" translate="yes" xml:space="preserve">
          <source>Now you are wiser, because you know that it happened 940 revisions before v0.99.</source>
          <target state="translated">v0.99以前の940リビジョンで起きていたことを知っているので、今のあなたはより賢明です。</target>
        </trans-unit>
        <trans-unit id="54796c29834d872153c55921bf00540d7c6165a5" translate="yes" xml:space="preserve">
          <source>Now you can proceed with the creation of the feature release. Apply a tag to the tip of &lt;code&gt;master&lt;/code&gt; indicating the release version:</source>
          <target state="translated">これで、機能リリースの作成に進むことができます。 &lt;code&gt;master&lt;/code&gt; の先端にリリースバージョンを示すタグを適用します。</target>
        </trans-unit>
        <trans-unit id="d60447094204d4dec9840c772eacade572f28205" translate="yes" xml:space="preserve">
          <source>Now you know that blob 4b9458b3 is missing, and that the tree 2d9263c6 points to it. If you could find just one copy of that missing blob object, possibly in some other repository, you could move it into &lt;code&gt;.git/objects/4b/9458b3&amp;hellip;​&lt;/code&gt; and be done. Suppose you can&amp;rsquo;t. You can still examine the tree that pointed to it with &lt;a href=&quot;git-ls-tree&quot;&gt;git-ls-tree[1]&lt;/a&gt;, which might output something like:</source>
          <target state="translated">これで、blob 4b9458b3が欠落しており、ツリー2d9263c6がそれを指していることがわかります。あなたはおそらくいくつかの他のリポジトリに、その欠落しているブロブオブジェクトのただ一つのコピーを見つけることができれば、あなたにそれを動かすことができ &lt;code&gt;.git/objects/4b/9458b3&amp;hellip;​&lt;/code&gt; と行われます。できないとしましょう。&lt;a href=&quot;git-ls-tree&quot;&gt;git-ls-tree [1]を使用して&lt;/a&gt;、それを指し示しているツリーを調べることができます。</target>
        </trans-unit>
        <trans-unit id="c93b9bdc902ddf8466cfefc51dc1f28429545152" translate="yes" xml:space="preserve">
          <source>Now you&amp;rsquo;ve split out many of the changes into their own commits, and might no longer use the patch mode of &lt;code&gt;git add&lt;/code&gt;, in order to select all remaining uncommitted changes.</source>
          <target state="translated">これで、変更の多くを独自のコミットに分割しました。残りのすべてのコミットされていない変更を選択するために、 &lt;code&gt;git add&lt;/code&gt; のパッチモードを使用しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="69b6ae43249b3d4c8e61d7b20084413cd49e5e3e" translate="yes" xml:space="preserve">
          <source>Now, for the meat:</source>
          <target state="translated">さて、お肉です。</target>
        </trans-unit>
        <trans-unit id="4449e60d3fdd6703a4970ef116187e4c17d80dc4" translate="yes" xml:space="preserve">
          <source>Now, in this case we&amp;rsquo;ve intentionally created a situation where the merge will need to be fixed up by hand, though, so Git will do as much of it as it can automatically (which in this case is just merge the &lt;code&gt;example&lt;/code&gt; file, which had no differences in the &lt;code&gt;mybranch&lt;/code&gt; branch), and say:</source>
          <target state="translated">さて、この場合、意図的にマージを手動で修正する必要がある状況を作成しました。そのため、Gitはできる限り多くのことを自動的に行います（この場合は、 &lt;code&gt;example&lt;/code&gt; ファイルをマージするだけです）。 &lt;code&gt;mybranch&lt;/code&gt; ブランチに違いはありませんでした）、そして言う：</target>
        </trans-unit>
        <trans-unit id="93036e7630aadf8fab80b9b1079ffb3d1ea1e18f" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s pretend you are the one who did all the work in &lt;code&gt;mybranch&lt;/code&gt;, and the fruit of your hard work has finally been merged to the &lt;code&gt;master&lt;/code&gt; branch. Let&amp;rsquo;s go back to &lt;code&gt;mybranch&lt;/code&gt;, and run &lt;code&gt;git merge&lt;/code&gt; to get the &quot;upstream changes&quot; back to your branch.</source>
          <target state="translated">さて、あなたが &lt;code&gt;mybranch&lt;/code&gt; ですべての作業を実行した人であるとしましょう。あなたのハードワークの成果がついに &lt;code&gt;master&lt;/code&gt; ブランチにマージされました。 &lt;code&gt;mybranch&lt;/code&gt; に戻り、 &lt;code&gt;git merge&lt;/code&gt; を実行して、「上流の変更」をブランチに戻しましょう。</target>
        </trans-unit>
        <trans-unit id="7c23965b9cba90dec960d959f0eea85b60ea2b28" translate="yes" xml:space="preserve">
          <source>Now, since we&amp;rsquo;ve updated &lt;code&gt;hello&lt;/code&gt; in the index, we can commit the new version. We could do it by writing the tree by hand again, and committing the tree (this time we&amp;rsquo;d have to use the &lt;code&gt;-p HEAD&lt;/code&gt; flag to tell commit that the HEAD was the &lt;strong&gt;parent&lt;/strong&gt; of the new commit, and that this wasn&amp;rsquo;t an initial commit any more), but you&amp;rsquo;ve done that once already, so let&amp;rsquo;s just use the helpful script this time:</source>
          <target state="translated">これで、インデックスの &lt;code&gt;hello&lt;/code&gt; を更新したので、新しいバージョンをコミットできます。ツリーをもう一度手で書いて、ツリーをコミットすることでそれを行うことができます（今回は、 &lt;code&gt;-p HEAD&lt;/code&gt; フラグを使用して、HEADが新しいコミットの&lt;strong&gt;親&lt;/strong&gt;であり、これがそうではなかったことをコミットに伝える必要があります）最初のコミットはこれ以上ありませんが、すでにそれを行っているので、今回は役立つスクリプトを使用します。</target>
        </trans-unit>
        <trans-unit id="dfab069f398c1bff7a8b8aa3dadd95d2ce84088a" translate="yes" xml:space="preserve">
          <source>Now, to make it a bit more interesting, let&amp;rsquo;s assume that somebody else does some work in the original branch, and simulate that by going back to the master branch, and editing the same file differently there:</source>
          <target state="translated">ここでもう少し面白くするために、他の誰かが元のブランチで何らかの作業を行っていると想定し、masterブランチに戻って同じファイルを別の場所で編集することでそれをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="83bf1df5f5028baeb9804ff8b012e2bfb43363e7" translate="yes" xml:space="preserve">
          <source>Now, we want to go to the next stage in Git, which is to take the files that Git knows about in the index, and commit them as a real tree. We do that in two phases: creating a &lt;code&gt;tree&lt;/code&gt; object, and committing that &lt;code&gt;tree&lt;/code&gt; object as a &lt;code&gt;commit&lt;/code&gt; object together with an explanation of what the tree was all about, along with information of how we came to that state.</source>
          <target state="translated">ここで、Gitがインデックスで認識しているファイルを取得し、実際のツリーとしてコミットするという、Gitの次のステージに進みます。これを2つのフェーズで実行します。 &lt;code&gt;tree&lt;/code&gt; オブジェクトを作成し、その &lt;code&gt;tree&lt;/code&gt; オブジェクトを &lt;code&gt;commit&lt;/code&gt; オブジェクトとしてコミットします。ツリーの概要と、その状態になった方法に関する情報も一緒にコミットします。</target>
        </trans-unit>
        <trans-unit id="4b50314ab323fb71cb3292dbd2b0326c17673414" translate="yes" xml:space="preserve">
          <source>Now, you will get the rewritten history saved in HEAD.</source>
          <target state="translated">これで、HEADに保存されている書き換え履歴が手に入ります。</target>
        </trans-unit>
        <trans-unit id="575836ebc8e262c11aa86a9dd4e0c52f7d072bcd" translate="yes" xml:space="preserve">
          <source>Now, you&amp;rsquo;ve got two branches, and you decide that you want to merge the work done. Before we do that, let&amp;rsquo;s introduce a cool graphical tool that helps you view what&amp;rsquo;s going on:</source>
          <target state="translated">これで、2つのブランチがあり、完了した作業をマージすることにしました。その前に、何が起こっているのかを確認するのに役立つクールなグラフィカルツールを紹介しましょう。</target>
        </trans-unit>
        <trans-unit id="910f1e558e60364937a941e26d7def6b701f836e" translate="yes" xml:space="preserve">
          <source>Nowadays though gitweb should create HTML base tag when needed (to set base URI for relative links), so it should work automatically.</source>
          <target state="translated">最近のgitwebは必要に応じてHTMLのベースタグを作成するようになっているので(相対リンクのベースURIを設定するために)、自動的に動作するようになっているはずです。</target>
        </trans-unit>
        <trans-unit id="9a11d4479b92e7b2c9a9fc979b41f6f7eb2a1edf" translate="yes" xml:space="preserve">
          <source>Nowadays, &lt;code&gt;git log&lt;/code&gt; is a builtin, which means that it is &lt;code&gt;contained&lt;/code&gt; in the command &lt;code&gt;git&lt;/code&gt;. The source side of a builtin is</source>
          <target state="translated">現在、 &lt;code&gt;git log&lt;/code&gt; は組み込みであり、コマンド &lt;code&gt;git&lt;/code&gt; に &lt;code&gt;contained&lt;/code&gt; れています。組み込みのソース側は</target>
        </trans-unit>
        <trans-unit id="33e31083ab9551e7141ee8a3ee7a0a4d045c20a2" translate="yes" xml:space="preserve">
          <source>Number of bytes of a pack file to map into memory in a single mapping operation. Larger window sizes may allow your system to process a smaller number of large pack files more quickly. Smaller window sizes will negatively affect performance due to increased calls to the operating system&amp;rsquo;s memory manager, but may improve performance when accessing a large number of large pack files.</source>
          <target state="translated">単一のマッピング操作でメモリにマップするパックファイルのバイト数。ウィンドウサイズが大きいほど、システムは少数の大きなパックファイルをより速く処理できます。ウィンドウサイズが小さいと、オペレーティングシステムのメモリマネージャーへの呼び出しが増えるため、パフォーマンスに悪影響を及ぼしますが、多数の大きなパックファイルにアクセスするときのパフォーマンスは向上する可能性があります。</target>
        </trans-unit>
        <trans-unit id="782270330831f0728fbf1b39424dcd7ac04c3bcf" translate="yes" xml:space="preserve">
          <source>Number of grep worker threads to use. If unset (or set to 0), 8 threads are used by default (for now).</source>
          <target state="translated">使用する grep ワーカースレッドの数。未設定 (または 0 に設定)の場合、デフォルトでは (今のところ)8 個のスレッドが使用されます。</target>
        </trans-unit>
        <trans-unit id="b3f7cd4c72eff1cd06e6ea960c75592f7883408d" translate="yes" xml:space="preserve">
          <source>Number of grep worker threads to use. See &lt;code&gt;grep.threads&lt;/code&gt; in &lt;a href=&quot;git-grep&quot;&gt;git-grep[1]&lt;/a&gt; for more information.</source>
          <target state="translated">使用するgrepワーカースレッドの数。詳細 &lt;code&gt;grep.threads&lt;/code&gt; は、&lt;a href=&quot;git-grep&quot;&gt;git-grep [1]の&lt;/a&gt;grep.threadsを参照してください。</target>
        </trans-unit>
        <trans-unit id="340883bf973e4a0a0a15928c3b44200ef6d0edac" translate="yes" xml:space="preserve">
          <source>Number of grep worker threads to use. See &lt;code&gt;grep.threads&lt;/code&gt; in &lt;code&gt;CONFIGURATION&lt;/code&gt; for more information.</source>
          <target state="translated">使用するgrepワーカースレッドの数。詳細 &lt;code&gt;grep.threads&lt;/code&gt; は、 &lt;code&gt;CONFIGURATION&lt;/code&gt; のgrep.threadsを参照してください。</target>
        </trans-unit>
        <trans-unit id="4a06461d5cac364fcad71d6e428b30d7321d874b" translate="yes" xml:space="preserve">
          <source>Number of messages to be sent per connection, after that a relogin will happen. If the value is 0 or undefined, send all messages in one connection. See also the &lt;code&gt;--batch-size&lt;/code&gt; option of &lt;a href=&quot;git-send-email&quot;&gt;git-send-email[1]&lt;/a&gt;.</source>
          <target state="translated">接続ごとに送信されるメッセージの数。その後、再ログインが行われます。値が0または未定義の場合、1つの接続ですべてのメッセージを送信します。&lt;a href=&quot;git-send-email&quot;&gt;git-send-email [1]&lt;/a&gt;の &lt;code&gt;--batch-size&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="263d5a12c4d7938e6b1945ed2d424a531e8ffd37" translate="yes" xml:space="preserve">
          <source>Number of parallel children to be used for all forms of fetching.</source>
          <target state="translated">すべての形式のフェッチに使用される並列子の数。</target>
        </trans-unit>
        <trans-unit id="5f124a70076360d6cdb202a3452dac6608d9c87a" translate="yes" xml:space="preserve">
          <source>Number of seconds to cache credentials (default: 900).</source>
          <target state="translated">資格情報をキャッシュする秒数 (既定値:900)。</target>
        </trans-unit>
        <trans-unit id="0600a433ee142590b5ed0795ec15517899403cc1" translate="yes" xml:space="preserve">
          <source>OBJ_BLOB (3)</source>
          <target state="translated">OBJ_BLOB (3)</target>
        </trans-unit>
        <trans-unit id="20a9deedd57091e656a9ceb8afe723fea4c8ae28" translate="yes" xml:space="preserve">
          <source>OBJ_COMMIT (1)</source>
          <target state="translated">OBJ_COMMIT (1)</target>
        </trans-unit>
        <trans-unit id="33b36795cfe9033fd325f2c4f57ccf4bbcdb1c8c" translate="yes" xml:space="preserve">
          <source>OBJ_OFS_DELTA (6)</source>
          <target state="translated">obj_ofs_delta (6)</target>
        </trans-unit>
        <trans-unit id="ad63d6a2f7a5f774df4b60dc52ffc40dc66ab330" translate="yes" xml:space="preserve">
          <source>OBJ_REF_DELTA (7)</source>
          <target state="translated">obj_ref_delta (7)</target>
        </trans-unit>
        <trans-unit id="bf0dce0da3b6ff387e755df6e790a1cac5898dd7" translate="yes" xml:space="preserve">
          <source>OBJ_TAG (4)</source>
          <target state="translated">OBJ_TAG (4)</target>
        </trans-unit>
        <trans-unit id="2f77abc6705f39815a181a261b98c26e748660a6" translate="yes" xml:space="preserve">
          <source>OBJ_TREE (2)</source>
          <target state="translated">OBJ_TREE (2)</target>
        </trans-unit>
        <trans-unit id="bcb75e6bd3e418ec921606a22f47e84ce889c09d" translate="yes" xml:space="preserve">
          <source>OK, still with me? To give us an example to look at, let&amp;rsquo;s go back to the earlier repository with &quot;hello&quot; and &quot;example&quot; file, and bring ourselves back to the pre-merge state:</source>
          <target state="translated">はい、まだ私と一緒ですか？例を示すために、「hello」と「example」ファイルを使用して以前のリポジトリに戻り、マージ前の状態に戻します。</target>
        </trans-unit>
        <trans-unit id="6477da6d91ea639e6e30c40f69d7500177d55603" translate="yes" xml:space="preserve">
          <source>OK, this all sounds like a collection of totally nonsensical rules, but it&amp;rsquo;s actually exactly what you want in order to do a fast merge. The different stages represent the &quot;result tree&quot; (stage 0, aka &quot;merged&quot;), the original tree (stage 1, aka &quot;orig&quot;), and the two trees you are trying to merge (stage 2 and 3 respectively).</source>
          <target state="translated">OK、これはまったく無意味なルールの集まりのように聞こえますが、実際には、高速マージを行うためにまさに必要なものです。異なるステージは、「結果ツリー」（ステージ0、別名「マージ済み」）、元のツリー（ステージ1、別名「orig」）、およびマージしようとしている2つのツリー（それぞれステージ2および3）を表します。</target>
        </trans-unit>
        <trans-unit id="30c34ea4528b5e99d721b2ada273c08402f70a1d" translate="yes" xml:space="preserve">
          <source>Object Traversal</source>
          <target state="translated">オブジェクトトラバーサル</target>
        </trans-unit>
        <trans-unit id="e07348665c9e3f452362a58c36e1f55665279269" translate="yes" xml:space="preserve">
          <source>Object access and manipulation</source>
          <target state="translated">オブジェクトへのアクセスと操作</target>
        </trans-unit>
        <trans-unit id="d963c54afefdbe29bbc1f0380d42869afd8a753b" translate="yes" xml:space="preserve">
          <source>Object size identified by &amp;lt;object&amp;gt; is given in bytes, and right-justified with minimum width of 7 characters. Object size is given only for blobs (file) entries; for other entries &lt;code&gt;-&lt;/code&gt; character is used in place of size.</source>
          <target state="translated">&amp;lt;object&amp;gt;で識別されるオブジェクトのサイズはバイト単位で指定され、最小幅7文字で右揃えされます。オブジェクトサイズはblob（ファイル）エントリに対してのみ指定されます。他のエントリの場合 &lt;code&gt;-&lt;/code&gt; サイズの代わりに文字が使用されます。</target>
        </trans-unit>
        <trans-unit id="5a755e02f9fddc8d9863cff303858fc5c0963f4b" translate="yes" xml:space="preserve">
          <source>Object storage format</source>
          <target state="translated">オブジェクト格納形式</target>
        </trans-unit>
        <trans-unit id="4410a56144704dcadb0adeabc1f66b086332a778" translate="yes" xml:space="preserve">
          <source>Object store associated with this repository. Usually an object store is self sufficient (i.e. all the objects that are referred to by an object found in it are also found in it), but there are a few ways to violate it.</source>
          <target state="translated">このリポジトリに関連付けられたオブジェクトストア。通常、オブジェクトストアは自己完結型ですが (つまり、そこにあるオブジェクトが参照しているオブジェクトはすべてそこにもあります)、これに違反する方法がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="66c888d10ab6a46198fcec7325df97ad7688050e" translate="yes" xml:space="preserve">
          <source>Object types</source>
          <target state="translated">オブジェクトの種類</target>
        </trans-unit>
        <trans-unit id="397880af9235fafbc028a684c78f613458679a72" translate="yes" xml:space="preserve">
          <source>Objects that already exist in the repository will &lt;strong&gt;not&lt;/strong&gt; be unpacked from the packfile. Therefore, nothing will be unpacked if you use this command on a packfile that exists within the target repository.</source>
          <target state="translated">リポジトリにすでに存在するオブジェクトは、packfileからアンパックされ&lt;strong&gt;ません&lt;/strong&gt;。したがって、ターゲットリポジトリ内に存在するpackfileに対してこのコマンドを使用しても、何も解凍されません。</target>
        </trans-unit>
        <trans-unit id="f90e1faea66f4ee07afc15b9cfbe6b37aebe1076" translate="yes" xml:space="preserve">
          <source>Objects unreachable from the refs in packs named with --unpacked= option are added to the resulting pack, in addition to the reachable objects that are not in packs marked with *.keep files. This implies &lt;code&gt;--revs&lt;/code&gt;.</source>
          <target state="translated">--unpacked =オプションで指定されたパック内の参照から到達できないオブジェクトは、*。keepファイルでマークされたパック内にない到達可能なオブジェクトに加えて、結果のパックに追加されます。これは &lt;code&gt;--revs&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="c4b47085e458e48bb4b0605ca6d2f6a3cc7755c2" translate="yes" xml:space="preserve">
          <source>Obsolete for: &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">廃止：&lt;a href=&quot;#def_index&quot;&gt;インデックス&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d42a49317326d6b79f20beebf76935d065ccac7f" translate="yes" xml:space="preserve">
          <source>Obviously, endless variations are possible; for example, to see all commits reachable from some head but not from any tag in the repository:</source>
          <target state="translated">もちろん、無限のバリエーションが可能です。例えば、リポジトリ内のどのタグからではなく、どこかのヘッドから到達可能なコミットをすべて見ることができます。</target>
        </trans-unit>
        <trans-unit id="80e98962116f1f595b28a3f430e4b1f9c4dbde82" translate="yes" xml:space="preserve">
          <source>Occasionally, the maintainer may get merge conflicts when they try to pull changes from downstream. In this case, they can ask downstream to do the merge and resolve the conflicts themselves (perhaps they will know better how to resolve them). It is one of the rare cases where downstream &lt;code&gt;should&lt;/code&gt; merge from upstream.</source>
          <target state="translated">メンテナがダウンストリームから変更をプルしようとすると、マージの競合が発生する場合があります。この場合、ダウンストリームにマージを実行して競合を解決するよう依頼することができます（おそらく、競合を解決する方法をよりよく理解しているでしょう）。これは、下流のはまれなケースの一つである &lt;code&gt;should&lt;/code&gt; 、上流から合流します。</target>
        </trans-unit>
        <trans-unit id="7c4df738049a7589e8637595f08e890f6ad9d98e" translate="yes" xml:space="preserve">
          <source>Of course some kind of software is developed, then used during some time without being improved on much, and then finally thrown away. In this case, of course, regressions may not be a big problem. But on the other hand, there is a lot of big software that is continually developed and maintained during years or even tens of years by a lot of people. And as there are often many people who depend (sometimes critically) on such software, regressions are a really big problem.</source>
          <target state="translated">もちろん、ある種のソフトウェアは開発され、その後、あまり改良されることなくしばらくの間使用され、最後には捨てられてしまいます。この場合、もちろん、リグレッションは大きな問題ではないかもしれません。しかし、一方で、多くの人が何年も何十年もの間、継続的に開発し、メンテナンスされている大きなソフトウェアがたくさんあります。そして、そのようなソフトウェアに(時には批判的に)依存している多くの人々がいることが多いので、リグレッションは本当に大きな問題です。</target>
        </trans-unit>
        <trans-unit id="19fce424b8331b64c65b8a6acafb03304b015bfc" translate="yes" xml:space="preserve">
          <source>Of course the &quot;bad&quot; commit cannot be an ancestor of a &quot;good&quot; commit, because the ancestors of the good commits are supposed to be &quot;good&quot;. And all the &quot;good&quot; commits must be related to the bad commit. They cannot be on a branch that has no link with the branch of the &quot;bad&quot; commit. But it is possible for a good commit to be related to a bad commit and yet not be neither one of its ancestor nor one of its descendants.</source>
          <target state="translated">もちろん、&quot;悪い &quot;コミットは &quot;良い &quot;コミットの祖先にはなりえません。また、すべての &quot;良い&quot; コミットは悪いコミットに関連していなければなりません。これらのコミットは、「悪い」コミットのブランチとは関係のないブランチには存在してはいけません。しかし、良いコミットが悪いコミットに関連していても、その先祖の一つでも子孫の一つでもないということはあり得ます。</target>
        </trans-unit>
        <trans-unit id="7c78c10d5c75907a546f96553e9802bb23f4c982" translate="yes" xml:space="preserve">
          <source>Of course, there may be more than one answer&amp;mdash;​if the history branched after commit e05db0fd, then there could be multiple &quot;earliest&quot; tagged releases.</source>
          <target state="translated">もちろん、複数の回答が存在する可能性があります。e05db0fdのコミット後に履歴が分岐した場合、「最も古い」タグ付きリリースが複数存在する可能性があります。</target>
        </trans-unit>
        <trans-unit id="bc73231ef0df798acd7604c5e90f5ea460992bab" translate="yes" xml:space="preserve">
          <source>Often people use &lt;code&gt;git pull&lt;/code&gt; without giving any parameter. Traditionally, this has been equivalent to saying &lt;code&gt;git pull
origin&lt;/code&gt;. However, when configuration &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; is present while on branch &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;, that value is used instead of &lt;code&gt;origin&lt;/code&gt;.</source>
          <target state="translated">多くの場合、パラメータを指定せずに &lt;code&gt;git pull&lt;/code&gt; を使用します。伝統的に、これは &lt;code&gt;git pull origin&lt;/code&gt; と言うことと同等でした。しかし、コンフィギュレーション・ &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; 枝に存在しばらくある &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; 、その値が代わりに使用される &lt;code&gt;origin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="813c6a487fc92be3bf23c6677bbfade25d37be89" translate="yes" xml:space="preserve">
          <source>Often the current branch head is an ancestor of the named commit. This is the most common case especially when invoked from &lt;code&gt;git pull&lt;/code&gt;: you are tracking an upstream repository, you have committed no local changes, and now you want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history; instead, the &lt;code&gt;HEAD&lt;/code&gt; (along with the index) is updated to point at the named commit, without creating an extra merge commit.</source>
          <target state="translated">多くの場合、現在のブランチヘッドは名前付きコミットの先祖です。これは、特に &lt;code&gt;git pull&lt;/code&gt; から呼び出された場合に最も一般的なケースです。上流のリポジトリを追跡していて、ローカルの変更をコミットしておらず、新しい上流のリビジョンに更新したい場合。この場合、結合された履歴を保存するために新しいコミットは必要ありません。代わりに、 &lt;code&gt;HEAD&lt;/code&gt; （およびインデックス）は、追加のマージコミットを作成することなく、指定されたコミットを指すように更新されます。</target>
        </trans-unit>
        <trans-unit id="bc22c639538c04ca7d5608268e4dc9b34f324581" translate="yes" xml:space="preserve">
          <source>Often the overview of the change is useful to get a feel of each step</source>
          <target state="translated">多くの場合、変更の概要は、各ステップの感触を得るのに便利です。</target>
        </trans-unit>
        <trans-unit id="a0ef5be0d5f74372c2549cc7906cdb110a910654" translate="yes" xml:space="preserve">
          <source>Often, &quot;please pull&quot; messages on the mailing list just provide two pieces of information: a repo URL and a branch name; this is designed to be easily cut&amp;amp;pasted at the end of a &lt;code&gt;git fetch&lt;/code&gt; command line:</source>
          <target state="translated">多くの場合、メーリングリストの「プルしてください」メッセージは、2つの情報を提供するだけです。リポジトリのURLとブランチ名です。これは、 &lt;code&gt;git fetch&lt;/code&gt; コマンドラインの最後で簡単にカットアンドペーストできるように設計されています。</target>
        </trans-unit>
        <trans-unit id="b90f5f996d698883902ffd1dba32d6eea369ef9a" translate="yes" xml:space="preserve">
          <source>Older documentation written before the packed-refs mechanism was introduced may still say things like &quot;.git/refs/heads/&amp;lt;branch&amp;gt; file exists&quot; when it means &quot;branch &amp;lt;branch&amp;gt; exists&quot;.</source>
          <target state="translated">pack-refsメカニズムが導入される前に作成された古いドキュメントでは、「ブランチ&amp;lt;branch&amp;gt;が存在する」という意味で、「。git / refs / heads / &amp;lt;branch&amp;gt;ファイルが存在する」のように記載されている場合があります。</target>
        </trans-unit>
        <trans-unit id="a148aab8f38b980de65dd5f412fc336ae5d855f6" translate="yes" xml:space="preserve">
          <source>Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message. They will see an editor opened when they run &lt;code&gt;git merge&lt;/code&gt;. To make it easier to adjust such scripts to the updated behaviour, the environment variable &lt;code&gt;GIT_MERGE_AUTOEDIT&lt;/code&gt; can be set to &lt;code&gt;no&lt;/code&gt; at the beginning of them.</source>
          <target state="translated">古いスクリプトは、ユーザーがマージログメッセージを編集できないという過去の動作に依存している場合があります。 &lt;code&gt;git merge&lt;/code&gt; を実行すると、エディターが開きます。このようなスクリプトを更新された動作に合わせて調整しやすくするために、環境変数 &lt;code&gt;GIT_MERGE_AUTOEDIT&lt;/code&gt; を最初に &lt;code&gt;no&lt;/code&gt; に設定できます。</target>
        </trans-unit>
        <trans-unit id="3a027c8ab6aede7960dbe3d141d016ee3e6589ef" translate="yes" xml:space="preserve">
          <source>Older versions of &lt;code&gt;meld&lt;/code&gt; do not support the &lt;code&gt;--output&lt;/code&gt; option. Git will attempt to detect whether &lt;code&gt;meld&lt;/code&gt; supports &lt;code&gt;--output&lt;/code&gt; by inspecting the output of &lt;code&gt;meld --help&lt;/code&gt;. Configuring &lt;code&gt;mergetool.meld.hasOutput&lt;/code&gt; will make Git skip these checks and use the configured value instead. Setting &lt;code&gt;mergetool.meld.hasOutput&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; tells Git to unconditionally use the &lt;code&gt;--output&lt;/code&gt; option, and &lt;code&gt;false&lt;/code&gt; avoids using &lt;code&gt;--output&lt;/code&gt;.</source>
          <target state="translated">古いバージョンの &lt;code&gt;meld&lt;/code&gt; は &lt;code&gt;--output&lt;/code&gt; オプションをサポートしていません。 Gitはかどうかを検出しようと &lt;code&gt;meld&lt;/code&gt; サポート &lt;code&gt;--output&lt;/code&gt; の出力検査することによって、 &lt;code&gt;meld --help&lt;/code&gt; 。 &lt;code&gt;mergetool.meld.hasOutput&lt;/code&gt; を構成すると、Gitはこれらのチェックをスキップし、代わりに構成された値を使用します。 &lt;code&gt;mergetool.meld.hasOutput&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、Gitに &lt;code&gt;--output&lt;/code&gt; オプションを無条件で使用するように指示し、 &lt;code&gt;false&lt;/code&gt; を指定すると &lt;code&gt;--output&lt;/code&gt; の使用を回避します。</target>
        </trans-unit>
        <trans-unit id="8511fe9d48b84ff3883d162d35ccd3dcba224454" translate="yes" xml:space="preserve">
          <source>Older versions of Git (before 2.20) documented that the object names list should be sorted. This was never a requirement, the object names could appear in any order, but when reading the list we tracked whether the list was sorted for the purposes of an internal binary search implementation, which could save itself some work with an already sorted list. Unless you had a humongous list there was no reason to go out of your way to pre-sort the list. After Git version 2.20 a hash implementation is used instead, so there&amp;rsquo;s now no reason to pre-sort the list.</source>
          <target state="translated">古いバージョンのGit（2.20より前）では、オブジェクト名リストをソートする必要があると記載されていました。これは要件ではなく、オブジェクト名は任意の順序で表示できますが、リストを読み取るときに、リストが内部バイナリ検索実装のためにソートされているかどうかを追跡しました。あなたが膨大なリストを持っていない限り、リストを事前に分類するためにあなたの道を行く理由はありませんでした。Gitバージョン2.20以降では、代わりにハッシュ実装が使用されるため、リストを事前にソートする理由はありません。</target>
        </trans-unit>
        <trans-unit id="c51aaa3680fede028efcceee261b4919c277f552" translate="yes" xml:space="preserve">
          <source>Omit any commit that introduces the same change as another commit on the &amp;ldquo;other side&amp;rdquo; when the set of commits are limited with symmetric difference.</source>
          <target state="translated">コミットのセットが対称的な違いで制限されている場合は、「反対側」で別のコミットと同じ変更を導入するコミットを省略します。</target>
        </trans-unit>
        <trans-unit id="e35d3ce0c9ea9ff6d661fcb1cbc8e08ffef97df6" translate="yes" xml:space="preserve">
          <source>Omit diff output for unmerged entries and just show &quot;Unmerged&quot;. Can be used only when comparing the working tree with the index.</source>
          <target state="translated">マージされていないエントリの差分出力を省略し、&quot;Unmerged &quot;のみを表示します。作業ツリーとインデックスを比較する場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="3138b0b10501de06a44e08d0de4b10a83646644b" translate="yes" xml:space="preserve">
          <source>Omit objects that are known to be in the promisor remote. (This option has the purpose of operating only on locally created objects, so that when we repack, we still maintain a distinction between locally created objects [without .promisor] and objects from the promisor remote [with .promisor].) This is used with partial clone.</source>
          <target state="translated">プロマイザリモートにあることがわかっているオブジェクトを省略します (このオプションは、ローカルに作成されたオブジェクトに対してのみ動作するという目的があるので、リパックするときには、ローカルに作成されたオブジェクト [not .promisor]とプロマイザリモートにあるオブジェクト [with .promisor]の区別を維持します)。(このオプションは、ローカルに作成されたオブジェクトに対してのみ動作するという目的がありますので、リパックする際には、ローカルに作成されたオブジェクト[.promisorなし]とプロミザリモートにあるオブジェクト[.promisorあり]の区別を維持します)。これはパーシャルクローンと一緒に使用されます。</target>
        </trans-unit>
        <trans-unit id="fcfe3e3e988e33991f3ebb33b70ee9c58a79e5d0" translate="yes" xml:space="preserve">
          <source>Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and &lt;code&gt;/dev/null&lt;/code&gt;. The resulting patch is not meant to be applied with &lt;code&gt;patch&lt;/code&gt; or &lt;code&gt;git apply&lt;/code&gt;; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.</source>
          <target state="translated">削除の場合、プリイメージを省略し &lt;code&gt;/dev/null&lt;/code&gt; 。つまり、プリイメージと/ dev / nullの間の差分ではなく、ヘッダーのみを出力します。結果のパッチは、 &lt;code&gt;patch&lt;/code&gt; や &lt;code&gt;git apply&lt;/code&gt; で適用されることを意図していません。これは、変更後のテキストのレビューに集中したい人のためのものです。さらに、出力にはそのようなパッチを手動で適用しても逆に適用するのに十分な情報がないため、オプションの名前が明らかに不足しています。</target>
        </trans-unit>
        <trans-unit id="2c239b325c52048ed0e0df682e63161da794c522" translate="yes" xml:space="preserve">
          <source>Omitting &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; detaches &lt;code&gt;HEAD&lt;/code&gt; at the tip of the current branch.</source>
          <target state="translated">省略 &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; 切り離し &lt;code&gt;HEAD&lt;/code&gt; を現在のブランチの先端で。</target>
        </trans-unit>
        <trans-unit id="6f08ea1a85b441d7cdb4b9da4840e51d4a63074c" translate="yes" xml:space="preserve">
          <source>Omitting the &lt;code&gt;from&lt;/code&gt; command in the first commit of a new branch will cause fast-import to create that commit with no ancestor. This tends to be desired only for the initial commit of a project. If the frontend creates all files from scratch when making a new branch, a &lt;code&gt;merge&lt;/code&gt; command may be used instead of &lt;code&gt;from&lt;/code&gt; to start the commit with an empty tree. Omitting the &lt;code&gt;from&lt;/code&gt; command on existing branches is usually desired, as the current commit on that branch is automatically assumed to be the first ancestor of the new commit.</source>
          <target state="translated">新しいブランチの最初のコミットで &lt;code&gt;from&lt;/code&gt; コマンドを省略すると、高速インポートで祖先のないコミットが作成されます。これは、プロジェクトの最初のコミットにのみ必要になる傾向があります。フロントエンドは、最初からすべてのファイルを作成する場合、新しいブランチを作成する際に、 &lt;code&gt;merge&lt;/code&gt; コマンドの代わりに使用することができる &lt;code&gt;from&lt;/code&gt; 、空のツリーでコミットを開始します。そのブランチでの現在のコミットは自動的に新しいコミットの最初の祖先であると想定されるため、既存のブランチで &lt;code&gt;from&lt;/code&gt; コマンドを省略することが通常望ましいです。</target>
        </trans-unit>
        <trans-unit id="2e6ae0a1101e66bbdd1aff8c2583b81c23208b83" translate="yes" xml:space="preserve">
          <source>On Automatic following</source>
          <target state="translated">自動で次のように</target>
        </trans-unit>
        <trans-unit id="82b4aa90bf6690a7ed8e3558248667b070567fb7" translate="yes" xml:space="preserve">
          <source>On Backdating Tags</source>
          <target state="translated">バックデートのタグについて</target>
        </trans-unit>
        <trans-unit id="52c1ff7f8dbe6e1f6639547a437fb78c51994ab9" translate="yes" xml:space="preserve">
          <source>On Re-tagging</source>
          <target state="translated">再タグ付けについて</target>
        </trans-unit>
        <trans-unit id="a3e5a575b7ca5dced5a48ec2289cb57e77edaa64" translate="yes" xml:space="preserve">
          <source>On an inefficient filesystem with &lt;code&gt;core.ignorestat&lt;/code&gt; set</source>
          <target state="translated">&lt;code&gt;core.ignorestat&lt;/code&gt; が設定された非効率的なファイルシステム</target>
        </trans-unit>
        <trans-unit id="ccf984a0700972bcd62e51c87e569c1158e56007" translate="yes" xml:space="preserve">
          <source>On large repositories, Git depends on compression to keep the history information from taking up too much space on disk or in memory. Some Git commands may automatically run &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;, so you don&amp;rsquo;t have to worry about running it manually. However, compressing a large repository may take a while, so you may want to call &lt;code&gt;gc&lt;/code&gt; explicitly to avoid automatic compression kicking in when it is not convenient.</source>
          <target state="translated">大規模なリポジトリーでは、Gitは圧縮に依存して、履歴情報がディスクまたはメモリー内で過度のスペースを占有しないようにします。一部のGitコマンドは&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]を&lt;/a&gt;自動的に実行する可能性があるため、手動で実行する必要はありません。ただし、大きなリポジトリの圧縮には時間がかかる場合があるため、 &lt;code&gt;gc&lt;/code&gt; を明示的に呼び出して、都合の悪いときに自動的に圧縮が開始されるのを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="d4d8aed3bf55796608219c0adac254008695a3f9" translate="yes" xml:space="preserve">
          <source>On some file system/operating system combinations, this is unreliable. Set this config setting to &lt;code&gt;rename&lt;/code&gt; there; However, This will remove the check that makes sure that existing object files will not get overwritten.</source>
          <target state="translated">一部のファイルシステムとオペレーティングシステムの組み合わせでは、これは信頼できません。ここで &lt;code&gt;rename&lt;/code&gt; を変更するには、この構成設定を設定します。ただし、これにより、既存のオブジェクトファイルが上書きされないようにするチェックが削除されます。</target>
        </trans-unit>
        <trans-unit id="5895edccc183158d9e3740d2cebb6ada4fc33444" translate="yes" xml:space="preserve">
          <source>On submit, re-author changes to reflect the Git author, regardless of who invokes &lt;code&gt;git p4 submit&lt;/code&gt;.</source>
          <target state="translated">送信時に、誰が &lt;code&gt;git p4 submit&lt;/code&gt; を呼び出したかに関係なく、Gitの作成者を反映するように変更を再作成します。</target>
        </trans-unit>
        <trans-unit id="625dc8e72565a5aa6c893e4054fd5a7bd4cd4c77" translate="yes" xml:space="preserve">
          <source>On success, the command returns the exit code 0.</source>
          <target state="translated">成功すると、コマンドは終了コード 0 を返します。</target>
        </trans-unit>
        <trans-unit id="990e4d4ec388fa2b56426ae37da6b01c179599b8" translate="yes" xml:space="preserve">
          <source>On success, the exit status is &lt;code&gt;0&lt;/code&gt;. If the filter can&amp;rsquo;t find any commits to rewrite, the exit status is &lt;code&gt;2&lt;/code&gt;. On any other error, the exit status may be any other non-zero value.</source>
          <target state="translated">成功した場合、終了ステータスは &lt;code&gt;0&lt;/code&gt; です。フィルターが書き換えるコミットを見つけられない場合、終了ステータスは &lt;code&gt;2&lt;/code&gt; です。その他のエラーの場合、終了ステータスはその他のゼロ以外の値になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="9b26f7834b511fe2fcda898a4f6a6ea24bf02deb" translate="yes" xml:space="preserve">
          <source>On the filesystem, a submodule usually (but not always - see FORMS below) consists of (i) a Git directory located under the &lt;code&gt;$GIT_DIR/modules/&lt;/code&gt; directory of its superproject, (ii) a working directory inside the superproject&amp;rsquo;s working directory, and a &lt;code&gt;.git&lt;/code&gt; file at the root of the submodule&amp;rsquo;s working directory pointing to (i).</source>
          <target state="translated">ファイルシステムでは、サブモジュールは通常（常にではない-以下のFORMSを参照）は（i）スーパー &lt;code&gt;$GIT_DIR/modules/&lt;/code&gt; の$ GIT_DIR / modules /ディレクトリの下にあるGitディレクトリ、（ii）スーパープロジェクトの作業ディレクトリ内の作業ディレクトリ、および（i）を指しているサブモジュールの作業ディレクトリのルートにある &lt;code&gt;.git&lt;/code&gt; ファイル</target>
        </trans-unit>
        <trans-unit id="4db9025909f7f5bf5e13acbeaf805aa54cd01729" translate="yes" xml:space="preserve">
          <source>On the other hand if you do this often, then it can be worth having scripts to avoid too much typing.</source>
          <target state="translated">一方で、これを頻繁に行うのであれば、タイプしすぎないようにスクリプトを持つ価値があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="683649c177c2041eda8a2d9bcca87e40a04a531c" translate="yes" xml:space="preserve">
          <source>On the other hand, if instead of merging at C you had rebased the history between Z to B on top of A, you would have gotten this linear history:</source>
          <target state="translated">一方、Cでマージするのではなく、Aの上にZからBまでの履歴をリベースしていたら、このような直線的な履歴が得られたことになります。</target>
        </trans-unit>
        <trans-unit id="0322f18dd0193743bffa03c418d12c6fe0b24261" translate="yes" xml:space="preserve">
          <source>On the other hand, if you are fetching because you would want a one-shot merge from somebody else, you typically do not want to get tags from there. This happens more often for people near the toplevel but not limited to them. Mere mortals when pulling from each other do not necessarily want to automatically get private anchor point tags from the other person.</source>
          <target state="translated">一方、他の誰かから一発でマージしたいからフェッチしているのであれば、一般的にはそこからタグを取得したくありません。これはトップレベルの近くにいる人の方が頻繁に起こるが、これに限定されるものではない。互いにプルしているときに、他の人からプライベートなアンカーポイントのタグを自動的に取得したいとは限りません。</target>
        </trans-unit>
        <trans-unit id="ff26b6c1b15a595913b474bb862db9261a722064" translate="yes" xml:space="preserve">
          <source>On the other hand, when &lt;code&gt;git gc&lt;/code&gt; runs concurrently with another process, there is a risk of it deleting an object that the other process is using but hasn&amp;rsquo;t created a reference to. This may just cause the other process to fail or may corrupt the repository if the other process later adds a reference to the deleted object. Git has two features that significantly mitigate this problem:</source>
          <target state="translated">一方、 &lt;code&gt;git gc&lt;/code&gt; が別のプロセスと同時に実行されると、他のプロセスが使用しているが参照を作成していないオブジェクトが削除されるリスクがあります。これにより、他のプロセスが失敗したり、他のプロセスが削除されたオブジェクトへの参照を後で追加した場合にリポジトリが破損したりする可能性があります。Gitには、この問題を大幅に軽減する2つの機能があります。</target>
        </trans-unit>
        <trans-unit id="9cc6a0108c9ca30d35fc16f0e158699698e2687d" translate="yes" xml:space="preserve">
          <source>On the plus side, distributed revision control systems can much better integrate with external sources. In a centralized model, a single arbitrary snapshot of the external project is exported from its own revision control and then imported into the local revision control on a vendor branch. All the history is hidden. With distributed revision control you can clone the entire external history and much more easily follow development and re-merge local changes.</source>
          <target state="translated">プラス面では、分散型リビジョン管理システムは、外部ソースとの統合性が格段に向上します。集中型モデルでは、外部プロジェクトの単一の任意のスナップショットが、それ自身のリビジョンコントロールからエクスポートされ、ベンダーブランチのローカルリビジョンコントロールにインポートされます。履歴はすべて非表示になります。分散リビジョンコントロールを使用すると、外部の履歴全体をクローンして、開発のフォローやローカルの変更の再マージをより簡単に行うことができます。</target>
        </trans-unit>
        <trans-unit id="90597c320571938c2a30a9ec587f181632e3da9c" translate="yes" xml:space="preserve">
          <source>On the receiving side, failing fsckObjects will make those objects unreachable, see &quot;QUARANTINE ENVIRONMENT&quot; in &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt;. On the fetch side, malformed objects will instead be left unreferenced in the repository.</source>
          <target state="translated">受信側では、fsckObjectsに失敗すると、これらのオブジェクトに到達できなくなります。git &lt;a href=&quot;git-receive-pack&quot;&gt;-receive-pack [1]の&lt;/a&gt;「QUARANTINE ENVIRONMENT」を参照してください。フェッチ側では、不正なオブジェクトはリポジトリで参照されないままになります。</target>
        </trans-unit>
        <trans-unit id="0cb32cbc06583a961d1463cba3f54ceac091ac9b" translate="yes" xml:space="preserve">
          <source>Once a patch completes the great cycle (moving from test to release, then pulled by Linus, and finally coming back into your local &lt;code&gt;origin/master&lt;/code&gt; branch), the branch for this change is no longer needed. You detect this when the output from:</source>
          <target state="translated">パッチが素晴らしいサイクル（テストからリリースに移り、Linusによってプルされ、最後にローカルの &lt;code&gt;origin/master&lt;/code&gt; ブランチに戻る）を完了すると、この変更のためのブランチは不要になります。以下からの出力時にこれを検出します。</target>
        </trans-unit>
        <trans-unit id="b9ebb68ceda33b5f55394a76815abe93f554d5a0" translate="yes" xml:space="preserve">
          <source>Once again, check to verify that you&amp;rsquo;ve included what you want to. You may also wish to verify that git diff doesn&amp;rsquo;t show any remaining changes to be committed later.</source>
          <target state="translated">もう一度、必要なものが含まれていることを確認してください。git diffに、後でコミットされる残りの変更が表示されていないことを確認することもできます。</target>
        </trans-unit>
        <trans-unit id="90e05562a65001025b0b72d96c6a4e4b947387b5" translate="yes" xml:space="preserve">
          <source>Once housekeeping is triggered by exceeding the limits of configuration options such as &lt;code&gt;gc.auto&lt;/code&gt; and &lt;code&gt;gc.autoPackLimit&lt;/code&gt;, all other housekeeping tasks (e.g. rerere, working trees, reflog&amp;hellip;​) will be performed as well.</source>
          <target state="translated">&lt;code&gt;gc.auto&lt;/code&gt; や &lt;code&gt;gc.autoPackLimit&lt;/code&gt; などの構成オプションの制限を超えてハウスキーピングがトリガーされると、他のすべてのハウスキーピングタスク（rerere、作業ツリー、reflog&amp;hellip;）も同様に実行されます。</target>
        </trans-unit>
        <trans-unit id="e4fac50f608beca9583acae6e66b5b839bc7af82" translate="yes" xml:space="preserve">
          <source>Once satisfied with the hunks you want to include, you should verify what has been prepared for the first commit by using &lt;code&gt;git diff --cached&lt;/code&gt;. This shows all the changes that have been moved into the index and are about to be committed.</source>
          <target state="translated">含めるハンクに満足したら、 &lt;code&gt;git diff --cached&lt;/code&gt; を使用して、最初のコミットのために何が準備されているかを確認する必要があります。これは、インデックスに移動されてコミットされようとしているすべての変更を示しています。</target>
        </trans-unit>
        <trans-unit id="3dd9fb6970c316fd22de16c64bf93a0699f63f8d" translate="yes" xml:space="preserve">
          <source>Once the commits are ready to be sent, run the following command:</source>
          <target state="translated">コミットを送信する準備ができたら、以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="bc0e79bf062114aed97a847d2dbf78bde74bcedc" translate="yes" xml:space="preserve">
          <source>Once the index has been created, the list of object names is sorted and the SHA-1 hash of that list is printed to stdout. If --stdin was also used then this is prefixed by either &quot;pack\t&quot;, or &quot;keep\t&quot; if a new .keep file was successfully created. This is useful to remove a .keep file used as a lock to prevent the race with &lt;code&gt;git repack&lt;/code&gt; mentioned above.</source>
          <target state="translated">インデックスが作成されると、オブジェクト名のリストがソートされ、そのリストのSHA-1ハッシュがstdoutに出力されます。--stdinも使用された場合、新しい.keepファイルが正常に作成された場合は、「pack \ t」または「keep \ t」のいずれかが前に付きます。これは、ロックとして使用されている.keepファイルを削除して、上記の &lt;code&gt;git repack&lt;/code&gt; repackとの競合を防ぐのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="267c8839170c35911e5505454167dce43ef8461e" translate="yes" xml:space="preserve">
          <source>Once the index is updated with the results of the conflict resolution, instead of creating a new commit, just run</source>
          <target state="translated">インデックスがコンフリクト解決の結果で更新されたら、新しいコミットを作成する代わりに</target>
        </trans-unit>
        <trans-unit id="dce83a819a58902526be63ab88beb478ade1a830" translate="yes" xml:space="preserve">
          <source>Once tracking a Subversion repository (with any of the above methods), the Git repository can be updated from Subversion by the &lt;code&gt;fetch&lt;/code&gt; command and Subversion updated from Git by the &lt;code&gt;dcommit&lt;/code&gt; command.</source>
          <target state="translated">（上記の方法のいずれかを使用して）Subversionリポジトリーを追跡すると、Gitリポジトリーは、 &lt;code&gt;fetch&lt;/code&gt; コマンドによってSubversionから更新され、 &lt;code&gt;dcommit&lt;/code&gt; コマンドによってGitから更新されたSubversionになります。</target>
        </trans-unit>
        <trans-unit id="f7c323cf6aca82334469eb4ac31bb75f493bfcb2" translate="yes" xml:space="preserve">
          <source>Once you fetch from the remote repository, you &lt;code&gt;merge&lt;/code&gt; that with your current branch.</source>
          <target state="translated">リモートリポジトリからフェッチしたら、それを現在のブランチと &lt;code&gt;merge&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="196d7a30344d61fce15a29277d1febbefab63366" translate="yes" xml:space="preserve">
          <source>Once you have packed objects, you do not need to leave the unpacked objects that are contained in the pack file anymore.</source>
          <target state="translated">一度オブジェクトをパックしてしまえば、パックファイルに含まれているパックされていないオブジェクトを残す必要はもうありません。</target>
        </trans-unit>
        <trans-unit id="19419c3fb2ffef21b9b034f5ca5d579751e9cffb" translate="yes" xml:space="preserve">
          <source>Once you have specified at least one bad and one good commit, &lt;code&gt;git
bisect&lt;/code&gt; selects a commit in the middle of that range of history, checks it out, and outputs something similar to the following:</source>
          <target state="translated">少なくとも1つの不良コミットと1つの良好なコミットを指定すると、 &lt;code&gt;git bisect&lt;/code&gt; はその履歴の範囲の真ん中にあるコミットを選択し、チェックアウトして、次のようなものを出力します。</target>
        </trans-unit>
        <trans-unit id="a222e7e00ea22df97bc019f6fbda7d4a739d08f0" translate="yes" xml:space="preserve">
          <source>Once you know the three trees you are going to merge (the one &quot;original&quot; tree, aka the common tree, and the two &quot;result&quot; trees, aka the branches you want to merge), you do a &quot;merge&quot; read into the index. This will complain if it has to throw away your old index contents, so you should make sure that you&amp;rsquo;ve committed those&amp;mdash;​in fact you would normally always do a merge against your last commit (which should thus match what you have in your current index anyway).</source>
          <target state="translated">マージする3つのツリー（1つは「元の」ツリー、別名は共通ツリー、2つは「結果」ツリー、別名はマージするブランチ）がわかったら、「マージ」を読み取り、インデックス。これは、古いインデックスの内容を破棄する必要がある場合に文句を言うので、それらをコミットしたことを確認する必要があります。実際、通常は常に最後のコミットに対してマージを実行します（したがって、とにかく現在のインデックス）。</target>
        </trans-unit>
        <trans-unit id="2f6bdbc854c9f4a06850e81f40a40893a853f873" translate="yes" xml:space="preserve">
          <source>Once your commits are ready to be sent to the mailing list, run the following commands:</source>
          <target state="translated">コミットをメーリングリストに送る準備ができたら、以下のコマンドを実行してください。</target>
        </trans-unit>
        <trans-unit id="1e3411b288c5ece442ec5affcc9ccff7867288ff" translate="yes" xml:space="preserve">
          <source>One can also modify context lines by staging them for removal (by converting &quot; &quot; to &quot;-&quot;) and adding a &quot;+&quot; line with the new content. Similarly, one can modify &quot;+&quot; lines for existing additions or modifications. In all cases, the new modification will appear reverted in the working tree.</source>
          <target state="translated">また、削除のためにそれらをステージングし(&quot; &quot; を &quot;-&quot; に変換することで)、新しい内容の &quot;+&quot; 行を追加することで、コンテキスト行を修正することもできます。同様に、既存の追加や変更に対して &quot;+&quot;行を修正することもできます。いずれの場合も、新しい変更は作業ツリーに戻されて表示されます。</target>
        </trans-unit>
        <trans-unit id="cefda8701820e17ff3e5c1f9d74674c9ba3ca4b0" translate="yes" xml:space="preserve">
          <source>One feature worth pointing out is the three-way merge, which can help if you get conflicts: &lt;code&gt;git am -3&lt;/code&gt; will use index information contained in patches to figure out the merge base. See &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt; for other options.</source>
          <target state="translated">指摘する価値のある機能の1つは、3者間マージです。これは、競合が発生した場合に役立ちます &lt;code&gt;git am -3&lt;/code&gt; は、パッチに含まれるインデックス情報を使用して、マージベースを特定します。他のオプションについては&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="91b115a828fd51fba09fc11d7213ae15c1c47544" translate="yes" xml:space="preserve">
          <source>One important aspect of Git is its distributed nature, which largely means there is no inherent &quot;upstream&quot; or &quot;downstream&quot; in the system. On the face of it, the above example might seem to indicate that the tag namespace is owned by the upper echelon of people and that tags only flow downwards, but that is not the case. It only shows that the usage pattern determines who are interested in whose tags.</source>
          <target state="translated">Git の重要な点のひとつは分散型であるということです。これは、システムには本質的な「上流」や「下流」が存在しないことを意味します。一見すると、上の例は、タグの名前空間は上層部の人々によって所有されており、タグは下にしか流れないことを示しているように見えるかもしれませんが、そうではありません。使用パターンによって誰が誰のタグに興味を持つかが決まることを示しているに過ぎません。</target>
        </trans-unit>
        <trans-unit id="04ced8b13491984476dfed877ea62bd96c9df7a6" translate="yes" xml:space="preserve">
          <source>One major difference between &lt;code&gt;git submodule update&lt;/code&gt; and &lt;code&gt;git submodule add&lt;/code&gt; is that &lt;code&gt;git submodule update&lt;/code&gt; checks out a specific commit, rather than the tip of a branch. It&amp;rsquo;s like checking out a tag: the head is detached, so you&amp;rsquo;re not working on a branch.</source>
          <target state="translated">&lt;code&gt;git submodule update&lt;/code&gt; と &lt;code&gt;git submodule add&lt;/code&gt; 主な違いの1つは、 &lt;code&gt;git submodule update&lt;/code&gt; がブランチの先端ではなく特定のコミットをチェックアウトすることです。これはタグをチェックアウトするようなものです。ヘッドが切り離されているため、ブランチで作業していません。</target>
        </trans-unit>
        <trans-unit id="8d6438f7bb62b577ed24501432d3010343f7c06f" translate="yes" xml:space="preserve">
          <source>One nice about &quot;git bisect&quot; is that it is not only a developer tool. It can effectively be used by QA people or even end users (if they have access to the source code or if they can get access to all the builds).</source>
          <target state="translated">git bisect&quot; の良いところは、開発者だけのツールではないということです。QA の人やエンドユーザーでさえも (彼らがソースコードにアクセスできるか、すべてのビルドにアクセスできるのであれば)効果的に使うことができます。</target>
        </trans-unit>
        <trans-unit id="142f19dfe765b1c5ce574050578fa3bc8f7c4c07" translate="yes" xml:space="preserve">
          <source>One note: the special &lt;code&gt;master&lt;/code&gt; head is the default branch, which is why the &lt;code&gt;.git/HEAD&lt;/code&gt; file was created points to it even if it doesn&amp;rsquo;t yet exist. Basically, the &lt;code&gt;HEAD&lt;/code&gt; link is supposed to always point to the branch you are working on right now, and you always start out expecting to work on the &lt;code&gt;master&lt;/code&gt; branch.</source>
          <target state="translated">1つの注意：特別な &lt;code&gt;master&lt;/code&gt; ヘッドはデフォルトのブランチです。そのため、 &lt;code&gt;.git/HEAD&lt;/code&gt; ファイルが作成されたのは、まだ存在しない場合でもそれを指します。基本的に、 &lt;code&gt;HEAD&lt;/code&gt; リンクは常に現在作業中のブランチを指すようになっており、常に &lt;code&gt;master&lt;/code&gt; ブランチで作業することを期待して開始します。</target>
        </trans-unit>
        <trans-unit id="29a0c8f350324f991b248dd3aa593e11f5862130" translate="yes" xml:space="preserve">
          <source>One obvious improvement to this algorithm would be to look for a commit that has an associated value near the one of the best bisection commit, and that is on another branch, before using the PRNG. Because if such a commit exists, then it is not very likely to be untestable too, so it will probably give more information than a nearly randomly chosen one.</source>
          <target state="translated">このアルゴリズムの明らかな改善点としては、PRNG を使う前に、最高の二分法コミットの値に近い値を持つコミットを探して、別のブランチにあるコミットを探すことです。なぜなら、もしそのようなコミットが存在するならば、それもテスト不可能である可能性が低いので、ほぼランダムに選ばれたコミットよりも多くの情報が得られるだろうからです。</target>
        </trans-unit>
        <trans-unit id="e1159b72c8727d654a00df87bb5a62e68448d486" translate="yes" xml:space="preserve">
          <source>One of the following transports can be used to name the repository to download from:</source>
          <target state="translated">以下のいずれかのトランスポートを使用して、ダウンロードするリポジトリの名前を指定することができます。</target>
        </trans-unit>
        <trans-unit id="f2e9320213d36179f9f718d529b707eca70ac72d" translate="yes" xml:space="preserve">
          <source>One of the ideas of having a branch is that you do some (possibly experimental) work in it, and eventually merge it back to the main branch. So assuming you created the above &lt;code&gt;mybranch&lt;/code&gt; that started out being the same as the original &lt;code&gt;master&lt;/code&gt; branch, let&amp;rsquo;s make sure we&amp;rsquo;re in that branch, and do some work there.</source>
          <target state="translated">ブランチを持つことのアイデアの1つは、ブランチで（おそらく実験的な）作業を行い、最終的にそれをメインブランチにマージすることです。したがって、元の &lt;code&gt;master&lt;/code&gt; ブランチと同じである上記の &lt;code&gt;mybranch&lt;/code&gt; を作成したと仮定して、そのブランチにいることを確認し、そこでいくつかの作業を行います。</target>
        </trans-unit>
        <trans-unit id="07b5c446feb269c31391e3ec2cd0376191f84e84" translate="yes" xml:space="preserve">
          <source>One of the identifiers &quot;&lt;a href=&quot;#def_commit_object&quot;&gt;commit&lt;/a&gt;&quot;, &quot;&lt;a href=&quot;#def_tree_object&quot;&gt;tree&lt;/a&gt;&quot;, &quot;&lt;a href=&quot;#def_tag_object&quot;&gt;tag&lt;/a&gt;&quot; or &quot;&lt;a href=&quot;#def_blob_object&quot;&gt;blob&lt;/a&gt;&quot; describing the type of an &lt;a href=&quot;#def_object&quot;&gt;object&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#def_object&quot;&gt;オブジェクトの&lt;/a&gt;タイプを説明する識別子「&lt;a href=&quot;#def_commit_object&quot;&gt;commit&lt;/a&gt;」、「&lt;a href=&quot;#def_tree_object&quot;&gt;tree&lt;/a&gt;」、「&lt;a href=&quot;#def_tag_object&quot;&gt;tag&lt;/a&gt;」、「&lt;a href=&quot;#def_blob_object&quot;&gt;blob&lt;/a&gt;」のいずれか。</target>
        </trans-unit>
        <trans-unit id="4cfd499f1faa2bf47281b08252a27709dbf65c31" translate="yes" xml:space="preserve">
          <source>One or more of the options below may be used to determine the files shown:</source>
          <target state="translated">表示されているファイルを決定するために、以下のオプションの1つ以上を使用することができます。</target>
        </trans-unit>
        <trans-unit id="5fdc57e5472e4e105b70357796e6b6c7c9687799" translate="yes" xml:space="preserve">
          <source>One or more of the provided paths is ignored.</source>
          <target state="translated">提供されたパスのうち1つ以上は無視されます。</target>
        </trans-unit>
        <trans-unit id="fa8d672b6bbfcb201a67403df350a9a5a712d006" translate="yes" xml:space="preserve">
          <source>One phase in branch detection involves looking at p4 branches to find new ones to import. By default, all branches are inspected. This option limits the search to just those owned by the single user named in the variable.</source>
          <target state="translated">ブランチ検出の一つの段階では、p4 のブランチを調べてインポートする新しいブランチを見つけます。デフォルトでは、すべてのブランチが検査されます。このオプションは、変数で指定された単一のユーザが所有するブランチのみを検索対象とします。</target>
        </trans-unit>
        <trans-unit id="11468bd4c23009003db390c522332f7c3d2a8eae" translate="yes" xml:space="preserve">
          <source>One problem with &quot;git replace&quot; is that currently it stores all the replacements refs in &quot;refs/replace/&quot;, but it would be perhaps better if the replacement refs that are useful only for bisecting would be in &quot;refs/replace/bisect/&quot;. This way the replacement refs could be used only for bisecting, while other refs directly in &quot;refs/replace/&quot; would be used nearly all the time.</source>
          <target state="translated">git replace&quot; の問題点のひとつは、現在はすべての置換用 refs を &quot;refs/replace/&quot; に保存しているということです。そうすれば、置換用の参照は二分法のためだけに使われ、&quot;refs/replace/&quot;に直接ある他の参照はほぼずっと使われることになります。</target>
        </trans-unit>
        <trans-unit id="d1e2a86cedb580a377c28acdbf81410bf88bf79b" translate="yes" xml:space="preserve">
          <source>One record (for project / repository) per line; does not support line continuation (newline escaping).</source>
          <target state="translated">1行に1レコード(プロジェクト/リポジトリ用)。</target>
        </trans-unit>
        <trans-unit id="8e018f50410d5f4a4feb43d8b0ec18d17af4444c" translate="yes" xml:space="preserve">
          <source>One such software is the Linux kernel. And if we look at the Linux kernel, we can see that a lot of time and effort is spent to fight regressions. The release cycle start with a 2 weeks long merge window. Then the first release candidate (rc) version is tagged. And after that about 7 or 8 more rc versions will appear with around one week between each of them, before the final release.</source>
          <target state="translated">そのようなソフトウェアの一つがLinuxカーネルです。そして、Linuxカーネルを見てみると、リグレッションと戦うために多くの時間と労力が費やされていることがわかります。リリースサイクルは2週間の長いマージウィンドウから始まります。その後、最初のリリース候補 (rc)バージョンがタグ付けされます。その後、最終リリースまでの間に約1週間の間に7、8つのrcバージョンが現れます。</target>
        </trans-unit>
        <trans-unit id="bdac2081c61d66c365f2d2f97739c2e3f666a74e" translate="yes" xml:space="preserve">
          <source>One usage scenario is to run unit tests in the hook.</source>
          <target state="translated">1つの利用法としては、フックでユニットテストを実行することが挙げられます。</target>
        </trans-unit>
        <trans-unit id="f9e9013eccf2a70e5a5f30b1ea62b3495fc5c835" translate="yes" xml:space="preserve">
          <source>One use of the content filtering is to massage the content into a shape that is more convenient for the platform, filesystem, and the user to use. For this mode of operation, the key phrase here is &quot;more convenient&quot; and not &quot;turning something unusable into usable&quot;. In other words, the intent is that if someone unsets the filter driver definition, or does not have the appropriate filter program, the project should still be usable.</source>
          <target state="translated">コンテンツフィルタリングの用途の一つに、プラットフォームやファイルシステム、ユーザーにとってより便利な形にコンテンツをマッサージするというものがあります。この動作モードでは、ここでのキーワードは「より便利に」であり、「使えないものを使えるものに変える」ということではありません。言い換えれば、誰かがフィルタドライバの定義を解除したり、適切なフィルタプログラムを持っていなかったりしても、プロジェクトはまだ使えるはずだということです。</target>
        </trans-unit>
        <trans-unit id="bf346c4d1c8b72f5f128424640398ae0ca4f5b99" translate="yes" xml:space="preserve">
          <source>One way to test if your MUA is set up correctly is:</source>
          <target state="translated">あなたのMUAが正しく設定されているかどうかをテストする方法の一つです。</target>
        </trans-unit>
        <trans-unit id="b7da7d48889d5c708679796bf76623241882d879" translate="yes" xml:space="preserve">
          <source>Only allow viewing of repositories also shown on the overview page. This for example makes &lt;code&gt;$export_ok&lt;/code&gt; file decide if repository is available and not only if it is shown. If &lt;code&gt;$projects_list&lt;/code&gt; points to file with list of project, only those repositories listed would be available for gitweb. Can be set during building gitweb via &lt;code&gt;GITWEB_STRICT_EXPORT&lt;/code&gt;. By default this variable is not set, which means that you can directly access those repositories that are hidden from projects list page (e.g. the are not listed in the $projects_list file).</source>
          <target state="translated">概要ページにも表示されるリポジトリの表示のみを許可します。たとえば、これは &lt;code&gt;$export_ok&lt;/code&gt; ファイルに、リポジトリが利用可能かどうか、それが表示されているかどうかだけを決定させることになります。 &lt;code&gt;$projects_list&lt;/code&gt; がプロジェクトのリストを含むファイルを指している場合、リストされているリポジトリのみがgitwebで使用できます。 GITWEB_STRICT_EXPORTを介して &lt;code&gt;GITWEB_STRICT_EXPORT&lt;/code&gt; をビルドするときに設定できます。デフォルトでは、この変数は設定されていません。つまり、プロジェクトリストページで非表示になっているリポジトリに直接アクセスできます（例：$ projects_listファイルにリストされていない）。</target>
        </trans-unit>
        <trans-unit id="a9db6957ecdccb26c443588b379fe63817da234e" translate="yes" xml:space="preserve">
          <source>Only anonymous access is provided by pserve by default. To commit you will have to create pserver accounts, simply add a gitcvs.authdb setting in the config file of the repositories you want the cvsserver to allow writes to, for example:</source>
          <target state="translated">デフォルトでは、pserve は匿名アクセスのみを提供しています。コミットするには pserver のアカウントを作成しなければなりませんが、cvserver が書き込みを許可するリポジトリの設定ファイルに gitcvs.authdb の設定を追加するだけです。</target>
        </trans-unit>
        <trans-unit id="f8de1f9ddde9f99ee756c31ae048d708dda7832c" translate="yes" xml:space="preserve">
          <source>Only bind the web server to the local IP (127.0.0.1).</source>
          <target state="translated">ウェブサーバーをローカルIP(127.0.0.0.1)にのみバインドします。</target>
        </trans-unit>
        <trans-unit id="914060d4007bba68d0e5b57a08eb8520cbc0281b" translate="yes" xml:space="preserve">
          <source>Only consider tags matching the given &lt;code&gt;glob(7)&lt;/code&gt; pattern, excluding the &quot;refs/tags/&quot; prefix. If used with &lt;code&gt;--all&lt;/code&gt;, it also considers local branches and remote-tracking references matching the pattern, excluding respectively &quot;refs/heads/&quot; and &quot;refs/remotes/&quot; prefix; references of other types are never considered. If given multiple times, a list of patterns will be accumulated, and tags matching any of the patterns will be considered. Use &lt;code&gt;--no-match&lt;/code&gt; to clear and reset the list of patterns.</source>
          <target state="translated">「refs / tags /」接頭辞を除いて、指定された &lt;code&gt;glob(7)&lt;/code&gt; パターンに一致するタグのみを考慮してください。 &lt;code&gt;--all&lt;/code&gt; と一緒に使用すると、パターンに一致するローカルブランチとリモートトラッキングの参照も考慮されます。他のタイプの参照は考慮されません。複数回指定すると、パターンのリストが蓄積され、パターンのいずれかに一致するタグが考慮されます。パターンのリストをクリアしてリセットするには、 &lt;code&gt;--no-match&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="941066ff4f5ea2a1056ac361a36573c125ff04f2" translate="yes" xml:space="preserve">
          <source>Only create a packed archive if it would contain at least one object.</source>
          <target state="translated">少なくとも 1 つのオブジェクトを含む場合にのみ、パックされたアーカイブを作成します。</target>
        </trans-unit>
        <trans-unit id="83ca14f8cd2c9566aaa74ad9a438e0a15bc783b9" translate="yes" xml:space="preserve">
          <source>Only expire loose objects older than &amp;lt;time&amp;gt;.</source>
          <target state="translated">&amp;lt;time&amp;gt;より古い緩いオブジェクトのみを期限切れにします。</target>
        </trans-unit>
        <trans-unit id="d50becec82fb156672fd24c1ecb55cefe6d9b0c0" translate="yes" xml:space="preserve">
          <source>Only list branches of the given object.</source>
          <target state="translated">与えられたオブジェクトのブランチのみをリストアップします。</target>
        </trans-unit>
        <trans-unit id="ae8314faed018be3007d334a54cd4f7b3bde067a" translate="yes" xml:space="preserve">
          <source>Only list branches which contain the specified commit (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;.</source>
          <target state="translated">指定されたコミット（指定されていない場合はHEAD）を含むブランチのみをリストします。 &lt;code&gt;--list&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="b39fcb7ccfd206d2a11b5cac77f876ebbcdc59a6" translate="yes" xml:space="preserve">
          <source>Only list branches which don&amp;rsquo;t contain the specified commit (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;.</source>
          <target state="translated">指定されたコミット（指定されていない場合はHEAD）を含まないブランチのみをリストします。 &lt;code&gt;--list&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="5d91bc93b24e96b92cd74b3016507c8892f02d8e" translate="yes" xml:space="preserve">
          <source>Only list branches whose tips are not reachable from the specified commit (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;, incompatible with &lt;code&gt;--merged&lt;/code&gt;.</source>
          <target state="translated">指定されたコミット（指定されていない場合はHEAD）からヒントに到達できないブランチのみをリストします。意味 &lt;code&gt;--list&lt;/code&gt; と互換性がない、 &lt;code&gt;--merged&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="368e1f5311ab357c6579dd2598d3554e5f69ab7b" translate="yes" xml:space="preserve">
          <source>Only list branches whose tips are reachable from the specified commit (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;, incompatible with &lt;code&gt;--no-merged&lt;/code&gt;.</source>
          <target state="translated">指定されたコミット（指定されていない場合はHEAD）からヒントに到達できるブランチのみをリストします。意味 &lt;code&gt;--list&lt;/code&gt; と互換性がない、 &lt;code&gt;--no-merged&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dc004fe98c7c853edcd721c4a4743bbe17dc0ceb" translate="yes" xml:space="preserve">
          <source>Only list refs which contain the specified commit (HEAD if not specified).</source>
          <target state="translated">指定されたコミットを含む参照のみをリストアップします (指定されていない場合は HEAD)。</target>
        </trans-unit>
        <trans-unit id="53301ab6d13e8c23069a84dba2acf3daf5a67784" translate="yes" xml:space="preserve">
          <source>Only list refs which don&amp;rsquo;t contain the specified commit (HEAD if not specified).</source>
          <target state="translated">指定されたコミット（指定されていない場合はHEAD）を含まない参照のみをリストします。</target>
        </trans-unit>
        <trans-unit id="13917fddfb76486aac0b6b32382a8222d7ef7129" translate="yes" xml:space="preserve">
          <source>Only list refs which points at the given object.</source>
          <target state="translated">与えられたオブジェクトを指す参照のみをリストアップします。</target>
        </trans-unit>
        <trans-unit id="d63446ed3ed439dd64fa48118858d7dc8f885568" translate="yes" xml:space="preserve">
          <source>Only list refs whose tips are not reachable from the specified commit (HEAD if not specified), incompatible with &lt;code&gt;--merged&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--merged&lt;/code&gt; と互換性がなく、指定されたコミット（指定されていない場合はHEAD）からヒントに到達できない参照のみをリストします。</target>
        </trans-unit>
        <trans-unit id="b4d24af2a09941026de883e7412997a62ab6d500" translate="yes" xml:space="preserve">
          <source>Only list refs whose tips are reachable from the specified commit (HEAD if not specified), incompatible with &lt;code&gt;--no-merged&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--no-merged&lt;/code&gt; と互換性がなく、指定されたコミット（指定されていない場合はHEAD）からヒントに到達できる参照のみをリストします。</target>
        </trans-unit>
        <trans-unit id="817a4e30ee524e4266621c0a4648ab3909ffeed4" translate="yes" xml:space="preserve">
          <source>Only list tags of the given object (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;.</source>
          <target state="translated">指定されたオブジェクトのタグのみをリストします（指定されていない場合はHEAD）。 &lt;code&gt;--list&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="83f1d08e3476b4b0f43eedc9885a23e56ff396f3" translate="yes" xml:space="preserve">
          <source>Only list tags which contain the specified commit (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;.</source>
          <target state="translated">指定されたコミット（指定されていない場合はHEAD）を含むタグのみをリストします。 &lt;code&gt;--list&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="4bae480f98a8915919a61381cb993558ff75823a" translate="yes" xml:space="preserve">
          <source>Only list tags which don&amp;rsquo;t contain the specified commit (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;.</source>
          <target state="translated">指定されたコミット（指定されていない場合はHEAD）を含まないタグのみをリストします。 &lt;code&gt;--list&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="db9714bdab86b2c5263129a27ca40bb06f5dcdf2" translate="yes" xml:space="preserve">
          <source>Only list tags whose commits are not reachable from the specified commit (&lt;code&gt;HEAD&lt;/code&gt; if not specified), incompatible with &lt;code&gt;--merged&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--merged&lt;/code&gt; と互換性がなく、指定されたコミット（指定されていない場合は &lt;code&gt;HEAD&lt;/code&gt; ）からコミットに到達できないタグのみをリストします。</target>
        </trans-unit>
        <trans-unit id="1c62aa2054943bc2c5749c5693c2757ab8e53449" translate="yes" xml:space="preserve">
          <source>Only list tags whose commits are reachable from the specified commit (&lt;code&gt;HEAD&lt;/code&gt; if not specified), incompatible with &lt;code&gt;--no-merged&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--no-merged&lt;/code&gt; と互換性がない、指定されたコミット（指定されていない場合は &lt;code&gt;HEAD&lt;/code&gt; ）からコミットに到達できるタグのみをリストします。</target>
        </trans-unit>
        <trans-unit id="b0cdb0cde0c40de0beaaced5d658f2a7018630fe" translate="yes" xml:space="preserve">
          <source>Only look at the history which touches the given subdirectory. The result will contain that directory (and only that) as its project root. Implies &lt;a href=&quot;#Remap_to_ancestor&quot;&gt;Remap to ancestor&lt;/a&gt;.</source>
          <target state="translated">与えられたサブディレクトリに触れる履歴のみを見てください。結果には、プロジェクトルートとしてそのディレクトリ（およびそのディレクトリのみ）が含まれます。&lt;a href=&quot;#Remap_to_ancestor&quot;&gt;先祖への&lt;/a&gt;リマップを意味します。</target>
        </trans-unit>
        <trans-unit id="2bbdf47a64eee45ee95696813788d11863c01152" translate="yes" xml:space="preserve">
          <source>Only meaningful in &lt;code&gt;--parseopt&lt;/code&gt; mode. Lets the option parser stop at the first non-option argument. This can be used to parse sub-commands that take options themselves.</source>
          <target state="translated">&lt;code&gt;--parseopt&lt;/code&gt; モードでのみ意味があります。オプションパーサーが最初の非オプション引数で停止できるようにします。これは、オプションを受け取るサブコマンドを解析するために使用できます。</target>
        </trans-unit>
        <trans-unit id="d8057f98f6fd66c86adb34f091c531e316f7ca42" translate="yes" xml:space="preserve">
          <source>Only meaningful in &lt;code&gt;--parseopt&lt;/code&gt; mode. Output the options in their long form if available, and with their arguments stuck.</source>
          <target state="translated">&lt;code&gt;--parseopt&lt;/code&gt; モードでのみ意味があります。可能な場合はオプションを長い形式で出力し、引数はスタックしたままにします。</target>
        </trans-unit>
        <trans-unit id="6000fe90599266e72e627572d6cdbc969916ee02" translate="yes" xml:space="preserve">
          <source>Only meaningful in &lt;code&gt;--parseopt&lt;/code&gt; mode. Tells the option parser to echo out the first &lt;code&gt;--&lt;/code&gt; met instead of skipping it.</source>
          <target state="translated">&lt;code&gt;--parseopt&lt;/code&gt; モードでのみ意味があります。オプションパーサーに最初のメッセージをエコーするように指示します &lt;code&gt;--&lt;/code&gt; スキップする代わりに一致します。</target>
        </trans-unit>
        <trans-unit id="fd3f5d99fba63ca8e5d281298074650f7e9548b0" translate="yes" xml:space="preserve">
          <source>Only meaningful in &lt;code&gt;--verify&lt;/code&gt; mode. Do not output an error message if the first argument is not a valid object name; instead exit with non-zero status silently. SHA-1s for valid object names are printed to stdout on success.</source>
          <target state="translated">&lt;code&gt;--verify&lt;/code&gt; モードでのみ意味があります。最初の引数が有効なオブジェクト名でない場合、エラーメッセージを出力しません。代わりに、ゼロ以外のステータスで静かに終了します。有効なオブジェクト名のSHA-1は、成功するとstdoutに出力されます。</target>
        </trans-unit>
        <trans-unit id="94590902338d0f64df58223a7c9238b6579f4aae" translate="yes" xml:space="preserve">
          <source>Only meaningful with &lt;code&gt;--pathspec-from-file&lt;/code&gt;. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes).</source>
          <target state="translated">&lt;code&gt;--pathspec-from-file&lt;/code&gt; でのみ意味があります。Pathspec要素はNUL文字で区切られ、他のすべての文字は文字どおりに解釈されます（改行と引用符を含む）。</target>
        </trans-unit>
        <trans-unit id="0ecebefb0a1162c42954005e600970eacea40ab1" translate="yes" xml:space="preserve">
          <source>Only meaningful with &lt;code&gt;--stdin&lt;/code&gt; or &lt;code&gt;--index-info&lt;/code&gt;; paths are separated with NUL character instead of LF.</source>
          <target state="translated">&lt;code&gt;--stdin&lt;/code&gt; または &lt;code&gt;--index-info&lt;/code&gt; でのみ意味があります。パスはLFではなくNUL文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="6ad4315a7f6c11660aa6c643c4b95eaab7a8d728" translate="yes" xml:space="preserve">
          <source>Only meaningful with &lt;code&gt;--stdin&lt;/code&gt;; paths are separated with NUL character instead of LF.</source>
          <target state="translated">&lt;code&gt;--stdin&lt;/code&gt; でのみ意味があります。パスはLFではなくNUL文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="2ebb91d27792ee23446f1d49f12e2e8cf850fef7" translate="yes" xml:space="preserve">
          <source>Only necessary if --compose is also set. If --compose is not set, this will be prompted for.</source>
          <target state="translated">compose が設定されている場合にのみ必要です。composeが設定されていない場合は、プロンプトが表示されます。</target>
        </trans-unit>
        <trans-unit id="3a2cfa8e4dfa7576e427c217c4a335798a141827" translate="yes" xml:space="preserve">
          <source>Only one parameter should be set to &quot;1&quot; when the hook runs. The hook running passing &quot;1&quot;, &quot;1&quot; should not be possible.</source>
          <target state="translated">フックが走るときのパラメータは1つだけ「1」にしてください。&quot;1&quot;、&quot;1 &quot;を渡してのフック実行はできないはずです。</target>
        </trans-unit>
        <trans-unit id="bf7e12b67481a70907ee19a1cd34bdb9c2cfbcbb" translate="yes" xml:space="preserve">
          <source>Only output exact matches (a tag directly references the supplied commit). This is a synonym for --candidates=0.</source>
          <target state="translated">完全に一致するものだけを出力します (タグは指定されたコミットを直接参照します)。これは --candidates=0 と同義です。</target>
        </trans-unit>
        <trans-unit id="16dbfb260245eaec3998212f13b1a52e2d286e0a" translate="yes" xml:space="preserve">
          <source>Only p4 labels matching this regular expression will be exported. The default value is &lt;code&gt;[a-zA-Z0-9_\-.]+$&lt;/code&gt;.</source>
          <target state="translated">この正規表現に一致するp4ラベルのみがエクスポートされます。デフォルト値は &lt;code&gt;[a-zA-Z0-9_\-.]+$&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eeb8bb30ea7ba21536e78e1ff49007a02268174b" translate="yes" xml:space="preserve">
          <source>Only p4 labels matching this regular expression will be imported. The default value is &lt;code&gt;[a-zA-Z0-9_\-.]+$&lt;/code&gt;.</source>
          <target state="translated">この正規表現に一致するp4ラベルのみがインポートされます。デフォルト値は &lt;code&gt;[a-zA-Z0-9_\-.]+$&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e2fdb861f4cc24f6e2448e8ab0d3c248ec24997f" translate="yes" xml:space="preserve">
          <source>Only perform tests on the working directory to make sure untracked cache can be used. You have to manually enable untracked cache using &lt;code&gt;--untracked-cache&lt;/code&gt; or &lt;code&gt;--force-untracked-cache&lt;/code&gt; or the &lt;code&gt;core.untrackedCache&lt;/code&gt; configuration variable afterwards if you really want to use it. If a test fails the exit code is 1 and a message explains what is not working as needed, otherwise the exit code is 0 and OK is printed.</source>
          <target state="translated">作業ディレクトリでのみテストを実行して、追跡されていないキャッシュを使用できることを確認してください。本当に使用したい場合は、 &lt;code&gt;core.untrackedCache&lt;/code&gt; &lt;code&gt;--untracked-cache&lt;/code&gt; または &lt;code&gt;--force-untracked-cache&lt;/code&gt; untracked-cacheまたはcore.untrackedCache構成変数を使用して、追跡されていないキャッシュを手動で有効にする必要があります。テストが失敗した場合、終了コードは1であり、必要に応じて何が機能していないかを説明するメッセージが表示されます。それ以外の場合、終了コードは0でOKが出力されます。</target>
        </trans-unit>
        <trans-unit id="9b88e48a96d98ad3b76de8b5d274db692fc6b29c" translate="yes" xml:space="preserve">
          <source>Only print error and warning messages; all other output will be suppressed.</source>
          <target state="translated">エラーメッセージと警告メッセージのみを表示し、それ以外の出力はすべて抑制されます。</target>
        </trans-unit>
        <trans-unit id="3791d8648f923430d0795b4e9f5031ac211bf7f1" translate="yes" xml:space="preserve">
          <source>Only print error messages.</source>
          <target state="translated">エラーメッセージのみを印刷します。</target>
        </trans-unit>
        <trans-unit id="affbeb73b1dd267a08167d9ea74afe477ad3529f" translate="yes" xml:space="preserve">
          <source>Only show the SHA-1 hash, not the reference name. When combined with --dereference the dereferenced tag will still be shown after the SHA-1.</source>
          <target state="translated">参照名ではなく、SHA-1 ハッシュのみを表示します。参照先タグは、--dereferenceと組み合わせても、SHA-1の後に表示されます。</target>
        </trans-unit>
        <trans-unit id="74a12c610ac9d71beb7074574ccb847224f9f712" translate="yes" xml:space="preserve">
          <source>Only show the given commits, but do not traverse their ancestors. This has no effect if a range is specified. If the argument &lt;code&gt;unsorted&lt;/code&gt; is given, the commits are shown in the order they were given on the command line. Otherwise (if &lt;code&gt;sorted&lt;/code&gt; or no argument was given), the commits are shown in reverse chronological order by commit time. Cannot be combined with &lt;code&gt;--graph&lt;/code&gt;.</source>
          <target state="translated">指定されたコミットのみを表示し、祖先をトラバースしないでください。範囲が指定されている場合、これは効果がありません。 &lt;code&gt;unsorted&lt;/code&gt; 引数が指定された場合、コミットはコマンドラインで指定された順序で表示されます。それ以外の場合（ &lt;code&gt;sorted&lt;/code&gt; か、引数が指定されていない場合）、コミットはコミット時間の新しい順に表示されます。 &lt;code&gt;--graph&lt;/code&gt; と組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="6ed956e65db38a49fac1dac50248e7edb1c43fb7" translate="yes" xml:space="preserve">
          <source>Only submodules using a gitfile (which means they were cloned with a Git version 1.7.8 or newer) will be removed from the work tree, as their repository lives inside the .git directory of the superproject. If a submodule (or one of those nested inside it) still uses a .git directory, &lt;code&gt;git rm&lt;/code&gt; will move the submodules git directory into the superprojects git directory to protect the submodule&amp;rsquo;s history. If it exists the submodule.&amp;lt;name&amp;gt; section in the &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; file will also be removed and that file will be staged (unless --cached or -n are used).</source>
          <target state="translated">gitfileを使用するサブモジュール（つまり、Gitバージョン1.7.8以降で複製されたもの）のみが、スーパープロジェクトの.gitディレクトリ内にリポジトリが存在するため、ワークツリーから削除されます。サブモジュール（またはその中にネストされたモジュール）が.gitディレクトリを使用している場合、 &lt;code&gt;git rm&lt;/code&gt; はサブモジュールの履歴を保護するために、サブモジュールのgitディレクトリをスーパープロジェクトのgitディレクトリに移動します。存在する場合、&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;ファイルのsubmodule。&amp;lt;name&amp;gt;セクションも削除され、そのファイルがステージングされます（--cachedまたは-nが使用されている場合を除く）。</target>
        </trans-unit>
        <trans-unit id="f3b6918bb732fd2722633a305233dd0ec34bff15" translate="yes" xml:space="preserve">
          <source>Only takes effect for dates shown in human-readable format, such as when using &lt;code&gt;--pretty&lt;/code&gt;. &lt;code&gt;log.date&lt;/code&gt; config variable sets a default value for the log command&amp;rsquo;s &lt;code&gt;--date&lt;/code&gt; option. By default, dates are shown in the original time zone (either committer&amp;rsquo;s or author&amp;rsquo;s). If &lt;code&gt;-local&lt;/code&gt; is appended to the format (e.g., &lt;code&gt;iso-local&lt;/code&gt;), the user&amp;rsquo;s local time zone is used instead.</source>
          <target state="translated">&lt;code&gt;--pretty&lt;/code&gt; を使用する場合など、人間が読める形式で表示される日付に対してのみ有効です。 &lt;code&gt;log.date&lt;/code&gt; 構成変数は、logコマンドの &lt;code&gt;--date&lt;/code&gt; オプションのデフォルト値を設定します。デフォルトでは、日付は元のタイムゾーン（コミッターまたは作成者のいずれか）で表示されます。場合 &lt;code&gt;-local&lt;/code&gt; をフォーマットに追加された（例えば、 &lt;code&gt;iso-local&lt;/code&gt; ）、ユーザーのローカルタイムゾーンが代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="28227446e42814d459bad1017137f194a3d411bf" translate="yes" xml:space="preserve">
          <source>Only the initial ref advertisement is output, and the program exits immediately. This fits with the HTTP GET request model, where no request content is received but a response must be produced.</source>
          <target state="translated">最初の ref アドバタイズメントのみが出力され、プログラムはすぐに終了します。これはHTTP GETリクエストモデルに適合しています。</target>
        </trans-unit>
        <trans-unit id="d70e32ee66c9f176a2ec41ee4464e248b98de054" translate="yes" xml:space="preserve">
          <source>Only the rev_map and refs/remotes/git-svn are changed (see &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; in the FILES section below for details). Follow &lt;code&gt;reset&lt;/code&gt; with a &lt;code&gt;fetch&lt;/code&gt; and then &lt;code&gt;git reset&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt; to move local branches onto the new tree.</source>
          <target state="translated">変更されるのはrev_mapとrefs / remotes / git-svnだけです（詳細については、以下の「ファイル」セクションの &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; を参照してください）。フォロー &lt;code&gt;reset&lt;/code&gt; して &lt;code&gt;fetch&lt;/code&gt; して、 &lt;code&gt;git reset&lt;/code&gt; や &lt;code&gt;git rebase&lt;/code&gt; 新しい木の上に移動するために、ローカルのブランチを。</target>
        </trans-unit>
        <trans-unit id="32e7b8a674c1b57420afbf6e783864cc587eae94" translate="yes" xml:space="preserve">
          <source>Only the selected commits are shown, plus some to have a meaningful history.</source>
          <target state="translated">選択されたコミットのみが表示され、それに加えて意味のある履歴を持ついくつかのコミットが表示されます。</target>
        </trans-unit>
        <trans-unit id="5988bcb17bfff8bdefbf4f11c653c30a84ac354c" translate="yes" xml:space="preserve">
          <source>Only untracked files in submodules will be ignored. Committed differences and modifications to tracked files will show up.</source>
          <target state="translated">サブモジュール内の追跡されていないファイルだけが無視されます。コミットされた差分や追跡されたファイルへの修正は表示されます。</target>
        </trans-unit>
        <trans-unit id="a35d5f8b7ffccc1327ae3b4b170fadaf17be62a8" translate="yes" xml:space="preserve">
          <source>Only update and add files to the working directory, but don&amp;rsquo;t delete them, similar to how 'cp -R' would update the contents in the destination directory. This is the default mode in a &lt;a href=&quot;#def_checkout&quot;&gt;checkout&lt;/a&gt; when checking out files from the &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt; or a &lt;a href=&quot;#def_tree-ish&quot;&gt;tree-ish&lt;/a&gt;. In contrast, no-overlay mode also deletes tracked files not present in the source, similar to 'rsync --delete'.</source>
          <target state="translated">「cp -R」が宛先ディレクトリーの内容を更新する方法と同様に、ファイルのみを更新して作業ディレクトリーに追加しますが、削除はしません。これは、&lt;a href=&quot;#def_index&quot;&gt;インデックス&lt;/a&gt;または&lt;a href=&quot;#def_tree-ish&quot;&gt;ツリー風の&lt;/a&gt;ファイルからファイルをチェックアウトするときのチェック&lt;a href=&quot;#def_checkout&quot;&gt;アウトの&lt;/a&gt;デフォルトモードです。対照的に、オーバーレイなしモードでは、「rsync --delete」と同様に、ソースに存在しない追跡ファイルも削除されます。</target>
        </trans-unit>
        <trans-unit id="a09a6feef23c1bf8bf8489c07fa754b0e3467e64" translate="yes" xml:space="preserve">
          <source>Only update and add files to the working directory, but don&amp;rsquo;t delete them, similar to how &lt;code&gt;cp -R&lt;/code&gt; would update the contents in the destination directory. This is the default mode in a &lt;a href=&quot;#def_checkout&quot;&gt;checkout&lt;/a&gt; when checking out files from the &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt; or a &lt;a href=&quot;#def_tree-ish&quot;&gt;tree-ish&lt;/a&gt;. In contrast, no-overlay mode also deletes tracked files not present in the source, similar to &lt;code&gt;rsync --delete&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cp -R&lt;/code&gt; が宛先ディレクトリーの内容を更新する方法と同様に、ファイルを更新して作業ディレクトリーに追加するだけで、削除はしません。これは、&lt;a href=&quot;#def_index&quot;&gt;インデックス&lt;/a&gt;または&lt;a href=&quot;#def_tree-ish&quot;&gt;ツリー風の&lt;/a&gt;ファイルからファイルをチェックアウトするときのチェック&lt;a href=&quot;#def_checkout&quot;&gt;アウトの&lt;/a&gt;デフォルトモードです。対照的に、非オーバーレイモードでは、 &lt;code&gt;rsync --delete&lt;/code&gt; と同様に、ソースに存在しない追跡ファイルも削除されます。</target>
        </trans-unit>
        <trans-unit id="cd6ac5160ec46e3d1df2371d183d50a5e06ffdbe" translate="yes" xml:space="preserve">
          <source>Only use refs whose names match a given shell pattern. The pattern can be one of branch name, tag name or fully qualified ref name. If given multiple times, use refs whose names match any of the given shell patterns. Use &lt;code&gt;--no-refs&lt;/code&gt; to clear any previous ref patterns given.</source>
          <target state="translated">名前が特定のシェルパターンに一致する参照のみを使用します。パターンは、ブランチ名、タグ名、または完全修飾参照名のいずれかです。複数回指定する場合は、指定したシェルパターンのいずれかに名前が一致する参照を使用します。 &lt;code&gt;--no-refs&lt;/code&gt; を使用して、指定された以前の参照パターンをクリアします。</target>
        </trans-unit>
        <trans-unit id="2d533153e7612cafa4bc7b83b50dd3abb697af0e" translate="yes" xml:space="preserve">
          <source>Only used with the &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;set-tree&lt;/code&gt; and &lt;code&gt;commit-diff&lt;/code&gt; commands.</source>
          <target state="translated">&lt;code&gt;dcommit&lt;/code&gt; 、 &lt;code&gt;set-tree&lt;/code&gt; 、および &lt;code&gt;commit-diff&lt;/code&gt; コマンドでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="901e1e4a237282bb48e582bb5bf0599881cd0084" translate="yes" xml:space="preserve">
          <source>Only used with the &lt;code&gt;init&lt;/code&gt; command. These are passed directly to &lt;code&gt;git init&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; コマンドでのみ使用されます。これらは &lt;code&gt;git init&lt;/code&gt; に直接渡されます。</target>
        </trans-unit>
        <trans-unit id="f5e61001de0ada8f2eb5dc9bbc0a16644112482b" translate="yes" xml:space="preserve">
          <source>Only used with the &lt;code&gt;set-tree&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;set-tree&lt;/code&gt; コマンドでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="e227b5617ca7c2b377054ab1d12644a8cc591504" translate="yes" xml:space="preserve">
          <source>Only useful with &lt;code&gt;--filter=&lt;/code&gt;; prints a list of the objects omitted by the filter. Object IDs are prefixed with a &amp;ldquo;~&amp;rdquo; character.</source>
          <target state="translated">&lt;code&gt;--filter=&lt;/code&gt; でのみ役立ちます。フィルターによって除外されたオブジェクトのリストを出力します。オブジェクトIDの前には「〜」文字が付いています。</target>
        </trans-unit>
        <trans-unit id="c898c5ecedbff05a6572c10f50d4d5872a590271" translate="yes" xml:space="preserve">
          <source>Only useful with &lt;code&gt;--objects&lt;/code&gt;; does not print the names of the object IDs that are found. This inverts &lt;code&gt;--object-names&lt;/code&gt;. This flag allows the output to be more easily parsed by commands such as &lt;a href=&quot;git-cat-file&quot;&gt;git-cat-file[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--objects&lt;/code&gt; でのみ役立ちます。見つかったオブジェクトIDの名前は出力しません。 &lt;code&gt;--object-names&lt;/code&gt; を逆にします。このフラグを使用すると、&lt;a href=&quot;git-cat-file&quot;&gt;git-cat-file [1]&lt;/a&gt;などのコマンドで出力をより簡単に解析できます。</target>
        </trans-unit>
        <trans-unit id="cbbf115261d96b04c5005e948b7d150b4779f83e" translate="yes" xml:space="preserve">
          <source>Only useful with &lt;code&gt;--objects&lt;/code&gt;; print the names of the object IDs that are found. This is the default behavior.</source>
          <target state="translated">&lt;code&gt;--objects&lt;/code&gt; でのみ役立ちます。見つかったオブジェクトIDの名前を出力します。これがデフォルトの動作です。</target>
        </trans-unit>
        <trans-unit id="96aa4c0ed29b4ff25b67f82110d672c478c9f0a4" translate="yes" xml:space="preserve">
          <source>Only useful with &lt;code&gt;--objects&lt;/code&gt;; print the object IDs that are not in packs.</source>
          <target state="translated">&lt;code&gt;--objects&lt;/code&gt; でのみ役立ちます。パックにないオブジェクトIDを出力します。</target>
        </trans-unit>
        <trans-unit id="395c9938b3e2e6eaf4d1417f6499451782d5fa84" translate="yes" xml:space="preserve">
          <source>Only useful with one of the &lt;code&gt;--objects*&lt;/code&gt;; omits objects (usually blobs) from the list of printed objects. The &lt;code&gt;&amp;lt;filter-spec&amp;gt;&lt;/code&gt; may be one of the following:</source>
          <target state="translated">&lt;code&gt;--objects*&lt;/code&gt; いずれかでのみ役立ちます。印刷されたオブジェクトのリストからオブジェクト（通常はblob）を省略します。 &lt;code&gt;&amp;lt;filter-spec&amp;gt;&lt;/code&gt; 以下のいずれかであってもよいです。</target>
        </trans-unit>
        <trans-unit id="c55263ee2e693cf4a68e8c688a3aeedef8c016f1" translate="yes" xml:space="preserve">
          <source>Only valid setting is &quot;--unified=??&quot; or &quot;-u??&quot; to set the number of context lines shown when a unified diff is created. This takes precedence over any &quot;-U&quot; or &quot;--unified&quot; option value passed on the Git diff command line.</source>
          <target state="translated">有効な設定は、&quot;--unified=???&quot; あるいは &quot;-u???&quot; のみです。これは、Git diff コマンドラインで指定した &quot;-U&quot; や &quot;--unified&quot; オプションよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="77fb8a535dafe4973135cbd89eaf06e8f07b4529" translate="yes" xml:space="preserve">
          <source>Only works if the changes (patch IDs based on the diff contents) on &lt;code&gt;subsystem&lt;/code&gt; are literally the same before and after the rebase &lt;code&gt;subsystem&lt;/code&gt; did.</source>
          <target state="translated">&lt;code&gt;subsystem&lt;/code&gt; の変更（diffの内容に基づくパッチID）がリベース &lt;code&gt;subsystem&lt;/code&gt; 前後で文字通り同じである場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="5a64b44f8d7042d0b4832141c36a7e5d8d6c4434" translate="yes" xml:space="preserve">
          <source>Oops. That wasn&amp;rsquo;t very readable. It just spit out its own internal version of a &lt;code&gt;diff&lt;/code&gt;, but that internal version really just tells you that it has noticed that &quot;hello&quot; has been modified, and that the old object contents it had have been replaced with something else.</source>
          <target state="translated">おっとっと。それはあまり読みやすかったです。独自の内部バージョンの &lt;code&gt;diff&lt;/code&gt; を出力するだけですが、その内部バージョンは、「hello」が変更されたこと、および古いオブジェクトの内容が別のものに置き換えられたことに気づいたことを本当に伝えています。</target>
        </trans-unit>
        <trans-unit id="0e55d62611877e337f8aa065fb0b3d20e9fe0e5a" translate="yes" xml:space="preserve">
          <source>Open a compose window and click the external editor icon.</source>
          <target state="translated">コンポーズウィンドウを開き、外部エディタのアイコンをクリックします。</target>
        </trans-unit>
        <trans-unit id="db4ff8c108e7b94773be0de613a7b629cb1df8fa" translate="yes" xml:space="preserve">
          <source>Open an editor and edit the text to explain what the branch is for, to be used by various other commands (e.g. &lt;code&gt;format-patch&lt;/code&gt;, &lt;code&gt;request-pull&lt;/code&gt;, and &lt;code&gt;merge&lt;/code&gt; (if enabled)). Multi-line explanations may be used.</source>
          <target state="translated">エディターを開き、テキストを編集して、ブランチの目的を説明し、他のさまざまなコマンド（たとえば、 &lt;code&gt;format-patch&lt;/code&gt; 、 &lt;code&gt;request-pull&lt;/code&gt; 、および &lt;code&gt;merge&lt;/code&gt; （有効な場合））で使用します。複数行の説明が使用される場合があります。</target>
        </trans-unit>
        <trans-unit id="577c09c011d74bfddaa145d1c3817d3d9900cb19" translate="yes" xml:space="preserve">
          <source>Open the diff vs. the index in an editor and let the user edit it. After the editor was closed, adjust the hunk headers and apply the patch to the index.</source>
          <target state="translated">エディタでdiff対indexを開き、編集させる。エディタを閉じた後、ハンクヘッダを調整し、インデックスにパッチを適用しました。</target>
        </trans-unit>
        <trans-unit id="1e40bc8b6fc685aae183dd5f07e4256cd3e46abe" translate="yes" xml:space="preserve">
          <source>Open the matching files in the pager (not the output of &lt;code&gt;grep&lt;/code&gt;). If the pager happens to be &quot;less&quot; or &quot;vi&quot;, and the user specified only one pattern, the first file is positioned at the first match automatically. The &lt;code&gt;pager&lt;/code&gt; argument is optional; if specified, it must be stuck to the option without a space. If &lt;code&gt;pager&lt;/code&gt; is unspecified, the default pager will be used (see &lt;code&gt;core.pager&lt;/code&gt; in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">ポケットベルで一致するファイルを開きます（ &lt;code&gt;grep&lt;/code&gt; の出力ではありません）。ポケットベルが「少ない」または「vi」で、ユーザーがパターンを1つだけ指定した場合、最初のファイルは最初に一致した場所に自動的に配置されます。 &lt;code&gt;pager&lt;/code&gt; 引数はオプションです。指定する場合は、スペースなしでオプションに固執する必要があります。場合 &lt;code&gt;pager&lt;/code&gt; 指定されていない、デフォルトページャは（参照に使用される &lt;code&gt;core.pager&lt;/code&gt; で&lt;a href=&quot;git-config&quot;&gt;のgit-configと[1] &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="8ab75f225f79420c5b860ca24bd40f7491c784f1" translate="yes" xml:space="preserve">
          <source>Opens an editor to modify the specified config file; either &lt;code&gt;--system&lt;/code&gt;, &lt;code&gt;--global&lt;/code&gt;, or repository (default).</source>
          <target state="translated">エディターを開いて、指定された構成ファイルを変更します。どちらか &lt;code&gt;--system&lt;/code&gt; 、 &lt;code&gt;--global&lt;/code&gt; 、またはリポジトリ（デフォルト）。</target>
        </trans-unit>
        <trans-unit id="869e0439c9b6be4fa4547f64fcc46a677445443d" translate="yes" xml:space="preserve">
          <source>Operate quietly. Implies --no-progress.</source>
          <target state="translated">静かに操作してください。no-progressを意味します。</target>
        </trans-unit>
        <trans-unit id="976297b1ff380abe9b067b3a1569ff64fe97ece7" translate="yes" xml:space="preserve">
          <source>Operate quietly. Progress is not reported to the standard error stream.</source>
          <target state="translated">静かに操作してください。進捗状況は標準エラーストリームには報告されません。</target>
        </trans-unit>
        <trans-unit id="09f22e6b29a644f35840ab8527beed58937c2452" translate="yes" xml:space="preserve">
          <source>Operating modes</source>
          <target state="translated">動作モード</target>
        </trans-unit>
        <trans-unit id="b5ddf3c63568d76ebc23d453be7fdb731eb8db1b" translate="yes" xml:space="preserve">
          <source>Operation Modes</source>
          <target state="translated">操作モード</target>
        </trans-unit>
        <trans-unit id="7196d0b4f156df0cb7286af7737967727f46300d" translate="yes" xml:space="preserve">
          <source>Operation modes</source>
          <target state="translated">操作モード</target>
        </trans-unit>
        <trans-unit id="1bc69d57cbb59ff5bdbc63f455c23bce178e5e54" translate="yes" xml:space="preserve">
          <source>Operations supported</source>
          <target state="translated">対応業務</target>
        </trans-unit>
        <trans-unit id="573db325843d7fd90adea414c1ffec090ab48249" translate="yes" xml:space="preserve">
          <source>Optimize a pack that will be provided to a client with a shallow repository. This option, combined with --thin, can result in a smaller pack at the cost of speed.</source>
          <target state="translated">リポジトリが浅いクライアントに提供されるパックを最適化します。このオプションを --thin と組み合わせることで、速度を犠牲にしてパックを小さくすることができます。</target>
        </trans-unit>
        <trans-unit id="4679da9817f2d593d1926870257534b31ee86cfa" translate="yes" xml:space="preserve">
          <source>Option commands must be the first commands on the input (not counting feature commands), to give an option command after any non-option command is an error.</source>
          <target state="translated">オプションコマンドは入力の最初のコマンドでなければなりません(機能コマンドはカウントされません)。</target>
        </trans-unit>
        <trans-unit id="da44303dd559700c5ce39d2667eb27c2885407ef" translate="yes" xml:space="preserve">
          <source>Optional &amp;lt;path&amp;gt; arguments limit which submodules will be initialized. If no path is specified and submodule.active has been configured, submodules configured to be active will be initialized, otherwise all submodules are initialized.</source>
          <target state="translated">オプションの&amp;lt;path&amp;gt;引数は、初期化されるサブモジュールを制限します。パスが指定されておらず、submodule.activeが構成されている場合、アクティブになるように構成されたサブモジュールが初期化されます。それ以外の場合は、すべてのサブモジュールが初期化されます。</target>
        </trans-unit>
        <trans-unit id="be215efb6b35fec1e17ea79655a45bba1595ca40" translate="yes" xml:space="preserve">
          <source>Optionally a new branch could be created with either &lt;code&gt;-c&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt;, automatically from a remote branch of same name (see &lt;code&gt;--guess&lt;/code&gt;), or detach the working tree from any branch with &lt;code&gt;--detach&lt;/code&gt;, along with switching.</source>
          <target state="translated">必要に応じて新しいブランチのいずれかを使用して作成することができ &lt;code&gt;-c&lt;/code&gt; 、 &lt;code&gt;-C&lt;/code&gt; （参照自動的に同じ名前のリモートブランチから、 &lt;code&gt;--guess&lt;/code&gt; ）、またはを持つ任意の枝から作業ツリーを切り離し &lt;code&gt;--detach&lt;/code&gt; 、スイッチングと一緒に。</target>
        </trans-unit>
        <trans-unit id="d773dc6382eb3328de30b1c7224e0be840082992" translate="yes" xml:space="preserve">
          <source>Optionally may output a &lt;code&gt;lock &amp;lt;file&amp;gt;&lt;/code&gt; line indicating the full path of a file under &lt;code&gt;$GIT_DIR/objects/pack&lt;/code&gt; which is keeping a pack until refs can be suitably updated. The path must end with &lt;code&gt;.keep&lt;/code&gt;. This is a mechanism to name a &amp;lt;pack,idx,keep&amp;gt; tuple by giving only the keep component. The kept pack will not be deleted by a concurrent repack, even though its objects may not be referenced until the fetch completes. The &lt;code&gt;.keep&lt;/code&gt; file will be deleted at the conclusion of the fetch.</source>
          <target state="translated">オプションで、refが適切に更新されるまで &lt;code&gt;$GIT_DIR/objects/pack&lt;/code&gt; を保持している$ GIT_DIR / objects / packの下のファイルの完全パスを示す &lt;code&gt;lock &amp;lt;file&amp;gt;&lt;/code&gt; 行を出力できます。パスは &lt;code&gt;.keep&lt;/code&gt; で終わる必要があります。これは、keepコンポーネントのみを指定して&amp;lt;pack、idx、keep&amp;gt;タプルに名前を付けるメカニズムです。フェッチが完了するまでオブジェクトが参照されない場合でも、保持されたパックは、同時再パックによって削除されません。 &lt;code&gt;.keep&lt;/code&gt; ファイルは、フェッチの終了時に削除されます。</target>
        </trans-unit>
        <trans-unit id="66770b44a484bf62b3beb74f057263164da82747" translate="yes" xml:space="preserve">
          <source>Optionally with -m:</source>
          <target state="translated">オプションで-mを使用します。</target>
        </trans-unit>
        <trans-unit id="3e5a4f0fcbf7c88862ec022584d8faedebb202bf" translate="yes" xml:space="preserve">
          <source>Optionally, a &amp;lt;ref&amp;gt; parameter can be prefixed with a plus &lt;code&gt;+&lt;/code&gt; sign to disable the fast-forward check only on that ref.</source>
          <target state="translated">必要に応じて、&amp;lt;ref&amp;gt;パラメータの前にプラス &lt;code&gt;+&lt;/code&gt; 記号を付けて、その参照でのみ早送りチェックを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="5ad18880dec3737f40f1be35d71296de89bc6175" translate="yes" xml:space="preserve">
          <source>Optionally, it can merge a tree into the index, perform a fast-forward (i.e. 2-way) merge, or a 3-way merge, with the &lt;code&gt;-m&lt;/code&gt; flag. When used with &lt;code&gt;-m&lt;/code&gt;, the &lt;code&gt;-u&lt;/code&gt; flag causes it to also update the files in the work tree with the result of the merge.</source>
          <target state="translated">オプションで、 &lt;code&gt;-m&lt;/code&gt; フラグを使用して、ツリーを索引にマージし、早送り（つまり、2方向）マージ、または3方向マージを実行できます。 &lt;code&gt;-m&lt;/code&gt; と一緒に使用すると、 &lt;code&gt;-u&lt;/code&gt; フラグは、マージの結果で作業ツリー内のファイルも更新します。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="c844411e7897e1475e2bbc7e1cd47d6ca3b70b75" translate="yes" xml:space="preserve">
          <source>Options for --parseopt</source>
          <target state="translated">parseopt のオプション</target>
        </trans-unit>
        <trans-unit id="9c25d7f1531501faea711b1933ac2734dd8f1324" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;delete&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; オプション</target>
        </trans-unit>
        <trans-unit id="7eec6c07b2d8ff28d282e8d3918c0430dfd638ff" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;expire&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;expire&lt;/code&gt; オプション</target>
        </trans-unit>
        <trans-unit id="e73b9df34672d383e318c543fe1ed5467baa2316" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;show&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;show&lt;/code&gt; オプション</target>
        </trans-unit>
        <trans-unit id="fcc02e852676cd8c1162b2b42e5759f86fcae990" translate="yes" xml:space="preserve">
          <source>Options for Files</source>
          <target state="translated">ファイルのオプション</target>
        </trans-unit>
        <trans-unit id="fd6ce8b428a235dff74127968e45c8e950a3e68b" translate="yes" xml:space="preserve">
          <source>Options for Filtering</source>
          <target state="translated">フィルタリングのオプション</target>
        </trans-unit>
        <trans-unit id="f0e43560a9524e814096613f5d3adbb780ab9547" translate="yes" xml:space="preserve">
          <source>Options for Frontends</source>
          <target state="translated">フロントエンドのオプション</target>
        </trans-unit>
        <trans-unit id="6de07b5e7d3355f1ee784587e4e9b9310ce89167" translate="yes" xml:space="preserve">
          <source>Options for Objects</source>
          <target state="translated">オブジェクトのオプション</target>
        </trans-unit>
        <trans-unit id="7bba8ce1354b61b02f672f2468b0b0f0c600077c" translate="yes" xml:space="preserve">
          <source>Options for Output</source>
          <target state="translated">出力のオプション</target>
        </trans-unit>
        <trans-unit id="b8bceb2d83c081f4f5d71559b2d0f07edc9ee034" translate="yes" xml:space="preserve">
          <source>Options for a credential context can be configured either in &lt;code&gt;credential.*&lt;/code&gt; (which applies to all credentials), or &lt;code&gt;credential.&amp;lt;url&amp;gt;.*&lt;/code&gt;, where &amp;lt;url&amp;gt; matches the context as described above.</source>
          <target state="translated">資格情報コンテキストのオプションは、credential &lt;code&gt;credential.*&lt;/code&gt; （すべての資格情報に適用されます）または &lt;code&gt;credential.&amp;lt;url&amp;gt;.*&lt;/code&gt; いずれかで構成できます。ここで、&amp;lt;url&amp;gt;は上記のコンテキストに一致します。</target>
        </trans-unit>
        <trans-unit id="99e5139a65bfab6cb84777a431cb5c7403976793" translate="yes" xml:space="preserve">
          <source>Options related to fetching</source>
          <target state="translated">フェッチに関連するオプション</target>
        </trans-unit>
        <trans-unit id="d96532d12a36cc4bb8cc0dcd0b87def47cb21823" translate="yes" xml:space="preserve">
          <source>Options related to merging</source>
          <target state="translated">合併に関連するオプション</target>
        </trans-unit>
        <trans-unit id="d2ce95980d5d4dcb8790725834688357cc504679" translate="yes" xml:space="preserve">
          <source>Options with long option names can be negated by prefixing &lt;code&gt;--no-&lt;/code&gt;. For example, &lt;code&gt;git branch&lt;/code&gt; has the option &lt;code&gt;--track&lt;/code&gt; which is &lt;code&gt;on&lt;/code&gt; by default. You can use &lt;code&gt;--no-track&lt;/code&gt; to override that behaviour. The same goes for &lt;code&gt;--color&lt;/code&gt; and &lt;code&gt;--no-color&lt;/code&gt;.</source>
          <target state="translated">長いオプション名を持つオプションは、接頭辞 &lt;code&gt;--no-&lt;/code&gt; を付けることで無効にできます。たとえば、 &lt;code&gt;git branch&lt;/code&gt; は &lt;code&gt;--track&lt;/code&gt; オプションがあり、これはデフォルトで &lt;code&gt;on&lt;/code&gt; ています。 &lt;code&gt;--no-track&lt;/code&gt; を使用して、その動作をオーバーライドできます。 &lt;code&gt;--color&lt;/code&gt; と &lt;code&gt;--no-color&lt;/code&gt; についても同様です。</target>
        </trans-unit>
        <trans-unit id="28e5f716aa8e690cf7323a0d5515626aac785807" translate="yes" xml:space="preserve">
          <source>Or if you are looking for the commit that fixed a bug, you might use</source>
          <target state="translated">また、バグを修正したコミットを探している場合は</target>
        </trans-unit>
        <trans-unit id="9bcee5b07c3eb51996fe06466cb572259d48e74e" translate="yes" xml:space="preserve">
          <source>Or if you want more control, you can inspect the current state using for example &quot;git bisect visualize&quot;. It will launch gitk (or &quot;git log&quot; if the &lt;code&gt;DISPLAY&lt;/code&gt; environment variable is not set) to help you find a better bisection point.</source>
          <target state="translated">または、より詳細な制御が必要な場合は、たとえば「git bisect visualize」を使用して現在の状態を検査できます。gitk（または &lt;code&gt;DISPLAY&lt;/code&gt; 環境変数が設定されていない場合は「git log」）を起動して、より適切な二分ポイントを見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="ee046ba1657a42f0c8096ff30555d679415a486a" translate="yes" xml:space="preserve">
          <source>Or you could recall that the &lt;code&gt;&amp;hellip;​&lt;/code&gt; operator selects all commits reachable from either one reference or the other but not both; so</source>
          <target state="translated">それとも、ことを思い出すことができ &lt;code&gt;&amp;hellip;​&lt;/code&gt; オペレータが一つの基準や他のではなく、両方のいずれかから到達可能なすべてのコミットを選択します。そう</target>
        </trans-unit>
        <trans-unit id="d85642c3d553b535f4731e23589126805881407c" translate="yes" xml:space="preserve">
          <source>Or, if you&amp;rsquo;ve already committed the merge that you want to throw away,</source>
          <target state="translated">または、破棄したいマージをすでにコミットしている場合は、</target>
        </trans-unit>
        <trans-unit id="7ec7c556c34b1673fc7046a255bf7eb40c6a1622" translate="yes" xml:space="preserve">
          <source>Or, prepare and create the commit in one step:</source>
          <target state="translated">または、コミットの準備と作成をワンステップで行う。</target>
        </trans-unit>
        <trans-unit id="6d9770079506b18bb9154a95e976f54ab47a2b44" translate="yes" xml:space="preserve">
          <source>Ordinary changed entries have the following format:</source>
          <target state="translated">通常の変更されたエントリは、以下のような形式になっています。</target>
        </trans-unit>
        <trans-unit id="789d55cf79d409acbcc0305ff19dbfa36d82a93d" translate="yes" xml:space="preserve">
          <source>Ordinary commits are only included if they are !TREESAME (though this can be changed, see &lt;code&gt;--sparse&lt;/code&gt; below).</source>
          <target state="translated">通常のコミットは、！TREESAMEである場合にのみ含まれます（これは変更できますが、以下の &lt;code&gt;--sparse&lt;/code&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="3b945495727bab8a02c63542fdf26a485a2839f4" translate="yes" xml:space="preserve">
          <source>Original (version 1) pack-*.idx files have the following format:</source>
          <target state="translated">オリジナル(バージョン1)のpack-*.idxファイルの形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="cd07568ac3f8fe8b9f1ca323e6aea33ce69f4d0c" translate="yes" xml:space="preserve">
          <source>Originally, &lt;code&gt;git svn&lt;/code&gt; recommended that developers pulled or merged from the &lt;code&gt;git svn&lt;/code&gt; branch. This was because the author favored &lt;code&gt;git svn set-tree B&lt;/code&gt; to commit a single head rather than the &lt;code&gt;git svn set-tree A..B&lt;/code&gt; notation to commit multiple commits. Use of &lt;code&gt;git pull&lt;/code&gt; or &lt;code&gt;git merge&lt;/code&gt; with &lt;code&gt;git svn set-tree A..B&lt;/code&gt; will cause non-linear history to be flattened when committing into SVN and this can lead to merge commits unexpectedly reversing previous commits in SVN.</source>
          <target state="translated">当初、 &lt;code&gt;git svn&lt;/code&gt; は、開発者が &lt;code&gt;git svn&lt;/code&gt; ブランチからプルまたはマージすることを推奨していました。これは、複数のコミットをコミットする &lt;code&gt;git svn set-tree A..B&lt;/code&gt; 表記ではなく、 &lt;code&gt;git svn set-tree B&lt;/code&gt; が単一のヘッドをコミットすることを好んだためです。 &lt;code&gt;git pull&lt;/code&gt; または &lt;code&gt;git merge&lt;/code&gt; を &lt;code&gt;git svn set-tree A..B&lt;/code&gt; と一緒に使用すると、SVNにコミットするときに非線形履歴がフラット化され、これによりマージコミットが予期せずSVNの以前のコミットを元に戻す可能性があります。</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="14bc34cb5d8d9f5a1986c4b4ced74a089ed31e83" translate="yes" xml:space="preserve">
          <source>Other &amp;lt;rev&amp;gt;^ Parent Shorthand Notations</source>
          <target state="translated">その他の&amp;lt;rev&amp;gt; ^親の省略表記</target>
        </trans-unit>
        <trans-unit id="a3c040aeed88ddd482d5dec178bd5bb0b940738f" translate="yes" xml:space="preserve">
          <source>Other Items</source>
          <target state="translated">その他の項目</target>
        </trans-unit>
        <trans-unit id="9cb6f2fb01dfa81e12bc1e11f0e7b676e54669fd" translate="yes" xml:space="preserve">
          <source>Other Options</source>
          <target state="translated">その他のオプション</target>
        </trans-unit>
        <trans-unit id="b66b145fc26fc91268f852efc133debcedca1335" translate="yes" xml:space="preserve">
          <source>Other ambiguity resolutions might be added in the future, but for now any other cases will error out with an error indicating what we tried, and depending on the &lt;code&gt;advice.pushUnqualifiedRefname&lt;/code&gt; configuration (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;) suggest what refs/ namespace you may have wanted to push to.</source>
          <target state="translated">その他のあいまいさの解像度は、将来追加されるかもしれないが、今のところそれ以外の場合はエラー、我々がしようとしたものを示す、とに依存してエラーになります &lt;code&gt;advice.pushUnqualifiedRefname&lt;/code&gt; の設定（参照&lt;a href=&quot;git-config&quot;&gt;[1]のgit-config設定を&lt;/a&gt;）何レフリー/名前空間を提案しますプッシュしたかったかもしれません。</target>
        </trans-unit>
        <trans-unit id="0d7c9916d5a97cfdd8b058afc3d1bac1c0a81b1f" translate="yes" xml:space="preserve">
          <source>Other arbitrary characters can also be encoded. For instance, &lt;code&gt;combine:tree:3+blob:none&lt;/code&gt; and &lt;code&gt;combine:tree%3A3+blob%3Anone&lt;/code&gt; are equivalent.</source>
          <target state="translated">他の任意の文字もエンコードできます。たとえば、 &lt;code&gt;combine:tree:3+blob:none&lt;/code&gt; と &lt;code&gt;combine:tree%3A3+blob%3Anone&lt;/code&gt; は同等です。</target>
        </trans-unit>
        <trans-unit id="fca088ce123c6c3692799642c2a4b46b5050ca1e" translate="yes" xml:space="preserve">
          <source>Other consecutive asterisks are considered invalid.</source>
          <target state="translated">それ以外の連続したアスタリスクは無効です。</target>
        </trans-unit>
        <trans-unit id="060f4f2bc2ee9b99f69af6360a0055db64443a39" translate="yes" xml:space="preserve">
          <source>Other consecutive asterisks are considered regular asterisks and will match according to the previous rules.</source>
          <target state="translated">それ以外の連続したアスタリスクは通常のアスタリスクとみなされ、前のルールに従ってマッチします。</target>
        </trans-unit>
        <trans-unit id="3c7b99f717eee9f16429ca9a79551f060c8f8236" translate="yes" xml:space="preserve">
          <source>Other diff formats</source>
          <target state="translated">その他の差分フォーマット</target>
        </trans-unit>
        <trans-unit id="81458045196e38ce4846b13cecf95d14abe58433" translate="yes" xml:space="preserve">
          <source>Other git-related tools may and do use their own variables. When inventing new variables for use in your own tool, make sure their names do not conflict with those that are used by Git itself and other popular tools, and describe them in your documentation.</source>
          <target state="translated">git 関連の他のツールでは、独自の変数を使用している場合もありますし、使用している場合もあります。独自のツールで使用するために新しい変数を作成する場合は、その名前が Git 自体やその他の一般的なツールで使用されているものと衝突しないように注意し、ドキュメントに記述します。</target>
        </trans-unit>
        <trans-unit id="97855915001e4fe7ef5deb1c023c4697931e633c" translate="yes" xml:space="preserve">
          <source>Other options are available to control how the manual page is displayed. See &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt; for more information, because &lt;code&gt;git --help ...&lt;/code&gt; is converted internally into &lt;code&gt;git
help ...&lt;/code&gt;.</source>
          <target state="translated">マニュアルページの表示方法を制御する他のオプションが利用可能です。参照してください&lt;a href=&quot;git-help&quot;&gt;gitのヘルプ[1]&lt;/a&gt;ので、より多くの情報のために &lt;code&gt;git --help ...&lt;/code&gt; に内部的に変換され、 &lt;code&gt;git help ...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9c8373137a028157f66c53c01b431d29c570146" translate="yes" xml:space="preserve">
          <source>Other tools</source>
          <target state="translated">その他のツール</target>
        </trans-unit>
        <trans-unit id="89cbbb5c1b80969d7050a561dcd36c87c0241792" translate="yes" xml:space="preserve">
          <source>Other tools to fight regressions</source>
          <target state="translated">退行と戦うための他のツール</target>
        </trans-unit>
        <trans-unit id="15219db000aadb43433107a930098d54a12a2bf5" translate="yes" xml:space="preserve">
          <source>Other types of dangling objects (blobs and trees) are also possible, and dangling objects can arise in other situations.</source>
          <target state="translated">他の種類のぶら下がり物(ブロブや木)も可能で、他の状況でもぶら下がり物が発生することがあります。</target>
        </trans-unit>
        <trans-unit id="a8ad1c87f168347a129392343ff35eecf4e32d0a" translate="yes" xml:space="preserve">
          <source>Other variables</source>
          <target state="translated">その他の変数</target>
        </trans-unit>
        <trans-unit id="dd705eff4c453915d022538452adca45ea549424" translate="yes" xml:space="preserve">
          <source>Other ways</source>
          <target state="translated">その他の方法</target>
        </trans-unit>
        <trans-unit id="cf96d288cbee7ebb53d0ff80a9f63e5beaf8b0b4" translate="yes" xml:space="preserve">
          <source>Otherwise the remote branch of the first refspec is merged.</source>
          <target state="translated">それ以外の場合は、最初の refspec のリモートブランチがマージされます。</target>
        </trans-unit>
        <trans-unit id="32a9647b920b895ad400011726c72473bb775600" translate="yes" xml:space="preserve">
          <source>Otherwise, a tag reference that points directly at the given object (i.e., a lightweight tag) is created.</source>
          <target state="translated">そうでない場合は、与えられたオブジェクトを直接指すタグ参照(つまり軽量タグ)が作成されます。</target>
        </trans-unit>
        <trans-unit id="4b4eb603a71c26301f006805965a2bb224fe1a8d" translate="yes" xml:space="preserve">
          <source>Otherwise, all you need to do is start &lt;a href=&quot;git-daemon&quot;&gt;git-daemon[1]&lt;/a&gt;; it will listen on port 9418. By default, it will allow access to any directory that looks like a Git directory and contains the magic file git-daemon-export-ok. Passing some directory paths as &lt;code&gt;git daemon&lt;/code&gt; arguments will further restrict the exports to those paths.</source>
          <target state="translated">それ以外の場合は、&lt;a href=&quot;git-daemon&quot;&gt;git-daemon [1]を&lt;/a&gt;起動するだけです。これはポート9418でリッスンします。デフォルトでは、Gitディレクトリのように見え、マジックファイルgit-daemon-export-okが含まれている任意のディレクトリへのアクセスを許可します。 &lt;code&gt;git daemon&lt;/code&gt; 引数として一部のディレクトリパスを渡すと、それらのパスへのエクスポートがさらに制限されます。</target>
        </trans-unit>
        <trans-unit id="83933e66c19657c277855328b7212d55be330b69" translate="yes" xml:space="preserve">
          <source>Otherwise, if the &lt;code&gt;SSH_ASKPASS&lt;/code&gt; environment variable is set, its value is used as above.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;SSH_ASKPASS&lt;/code&gt; 環境変数が設定されていれば、その値が上記のように使用されます。</target>
        </trans-unit>
        <trans-unit id="06aca3f538987dd4baec5bd30c2c8ddce8b7736e" translate="yes" xml:space="preserve">
          <source>Otherwise, if the &lt;code&gt;core.askPass&lt;/code&gt; configuration variable is set, its value is used as above.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;core.askPass&lt;/code&gt; 構成変数が設定されていれば、その値が上記のように使用されます。</target>
        </trans-unit>
        <trans-unit id="4215362e197715214628992e14b639b7a98dbd7a" translate="yes" xml:space="preserve">
          <source>Otherwise, show the index format.</source>
          <target state="translated">それ以外の場合は、インデックス形式を表示します。</target>
        </trans-unit>
        <trans-unit id="1bddd3a0b4a752779f115c3518d3c2b277475b51" translate="yes" xml:space="preserve">
          <source>Otherwise, success is indicated the Unix way, i.e. by simply exiting with a zero exit status.</source>
          <target state="translated">それ以外の場合は、Unix の方法、つまり単にゼロの終了ステータスで終了することで成功を示します。</target>
        </trans-unit>
        <trans-unit id="adf9fb3bc458cf17571d90a6a9fffeaa1b715a6a" translate="yes" xml:space="preserve">
          <source>Otherwise, the merge proceeds in the usual way.</source>
          <target state="translated">それ以外の場合は、通常の方法でマージが行われます。</target>
        </trans-unit>
        <trans-unit id="0d438a86f2545e54eff98d96612fdf5bccb833ed" translate="yes" xml:space="preserve">
          <source>Otherwise, the topic that was merged to suddenly contains more than a single (well-separated) change. The many resulting small merges will greatly clutter up history. Anyone who later investigates the history of a file will have to find out whether that merge affected the topic in development. An upstream might even inadvertently be merged into a &quot;more stable&quot; branch. And so on.</source>
          <target state="translated">そうでなければ、マージされたトピックには、突然、単一の (よく分離された)変更以上のものが含まれています。結果として生じる多くの小さなマージは、履歴を大きく乱雑にしてしまいます。後でファイルの履歴を調査する人は、そのマージが開発中のトピックに影響を与えたかどうかを調べる必要があります。上流のブランチがうっかり「より安定した」ブランチにマージされてしまうこともあるかもしれません。このようなこともあります。</target>
        </trans-unit>
        <trans-unit id="9aea25a9a0905a830a51359c1723b329df787dff" translate="yes" xml:space="preserve">
          <source>Otherwise, the user is prompted on the terminal.</source>
          <target state="translated">それ以外の場合は、端末上でプロンプトが表示されます。</target>
        </trans-unit>
        <trans-unit id="38c6fc8779b3b84c1e5bc6184edd3674dd536e89" translate="yes" xml:space="preserve">
          <source>Otherwise, this command applies the arguments passed using the &lt;code&gt;--trailer&lt;/code&gt; option, if any, to the commit message part of each input file. The result is emitted on the standard output.</source>
          <target state="translated">それ以外の場合、このコマンドは &lt;code&gt;--trailer&lt;/code&gt; オプションを使用して渡された引数があれば、それを各入力ファイルのコミットメッセージ部分に適用します。結果は標準出力に出力されます。</target>
        </trans-unit>
        <trans-unit id="7befa93bf7555efa6c53836dd2ebb58604474c19" translate="yes" xml:space="preserve">
          <source>Otherwise, you need more information. How do you tell which version of the file has been lost?</source>
          <target state="translated">そうでない場合は、より多くの情報が必要です。どのバージョンのファイルが失われたか、どのようにして見分けることができますか?</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="bfba9983f4010a4e13ddf1f4da6c4d9462a74630" translate="yes" xml:space="preserve">
          <source>Output &quot;connectivity-ok&quot; if the received pack is self-contained and connected.</source>
          <target state="translated">受信したパックが自己完結して接続されている場合は「connectivity-ok」を出力します。</target>
        </trans-unit>
        <trans-unit id="14d787baf83270b720015688dc1b0d825f139765" translate="yes" xml:space="preserve">
          <source>Output \0 instead of the character that normally follows a file name.</source>
          <target state="translated">ファイル名の後に続く文字の代わりに、「0」を出力します。</target>
        </trans-unit>
        <trans-unit id="02b83bf95635a4c88bd0634054e0b05541ae55d4" translate="yes" xml:space="preserve">
          <source>Output a condensed summary of extended header information such as creations, renames and mode changes.</source>
          <target state="translated">作成、リネーム、モード変更などの拡張ヘッダ情報の要約を出力します。</target>
        </trans-unit>
        <trans-unit id="6dbea2796f7c2da05dc872fbc20cb3b286f106fd" translate="yes" xml:space="preserve">
          <source>Output a condensed summary of extended header information such as file creations or deletions (&quot;new&quot; or &quot;gone&quot;, optionally &quot;+l&quot; if it&amp;rsquo;s a symlink) and mode changes (&quot;+x&quot; or &quot;-x&quot; for adding or removing executable bit respectively) in diffstat. The information is put between the filename part and the graph part. Implies &lt;code&gt;--stat&lt;/code&gt;.</source>
          <target state="translated">ファイルの作成や削除（「新規」または「削除」、シンボリックリンクの場合はオプションで「+ l」）およびモードの変更（「+ x」または「-x」で追加または削除）などの拡張ヘッダー情報の要約を出力しますdiffstatの実行可能ビット）。情報は、ファイル名部分とグラフ部分の間に置かれます。意味 &lt;code&gt;--stat&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86b8e4f6e5044ecf1fc221aacfd89b826aa45a4b" translate="yes" xml:space="preserve">
          <source>Output all merge bases for the commits, instead of just one.</source>
          <target state="translated">コミットのすべてのマージベースを出力します。</target>
        </trans-unit>
        <trans-unit id="c4fd496863f1ea4adcfb9e1e5209189d8bcbae5b" translate="yes" xml:space="preserve">
          <source>Output an all-zero hash in each patch&amp;rsquo;s From header instead of the hash of the commit.</source>
          <target state="translated">コミットのハッシュではなく、各パッチのFromヘッダーにすべてゼロのハッシュを出力します。</target>
        </trans-unit>
        <trans-unit id="646a42919af7ad3c76023f798af12df793449561" translate="yes" xml:space="preserve">
          <source>Output diff in reverse.</source>
          <target state="translated">出力差分を逆にしています。</target>
        </trans-unit>
        <trans-unit id="973b33dc2cc053fd8a3739d3b278f90232b34e64" translate="yes" xml:space="preserve">
          <source>Output excluded boundary commits. Boundary commits are prefixed with &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="translated">除外された境界コミットを出力します。境界コミットには接頭辞 &lt;code&gt;-&lt;/code&gt; が付きます。</target>
        </trans-unit>
        <trans-unit id="c3872ebaf63738dccf26222059fb06a34ea9a53d" translate="yes" xml:space="preserve">
          <source>Output file names will be a simple number sequence without the default first line of the commit appended.</source>
          <target state="translated">出力ファイル名は、コミットのデフォルトの最初の行を付加しない単純な数字のシーケンスになります。</target>
        </trans-unit>
        <trans-unit id="c03f08a8f205e4568e916e3cfaa50c6a48749706" translate="yes" xml:space="preserve">
          <source>Output format</source>
          <target state="translated">出力形式</target>
        </trans-unit>
        <trans-unit id="d018168db6adc860beb206930bf9272bcf4432cb" translate="yes" xml:space="preserve">
          <source>Output from &lt;code&gt;git describe&lt;/code&gt;; i.e. a closest tag, optionally followed by a dash and a number of commits, followed by a dash, a &lt;code&gt;g&lt;/code&gt;, and an abbreviated object name.</source>
          <target state="translated">&lt;code&gt;git describe&lt;/code&gt; からの出力。つまり、最も近いタグで、オプションでダッシュといくつかのコミットが続き、その後にダッシュ、 &lt;code&gt;g&lt;/code&gt; 、および省略されたオブジェクト名が続きます。</target>
        </trans-unit>
        <trans-unit id="57be6fd315ed7958a6a11b416634cb9af54c1202" translate="yes" xml:space="preserve">
          <source>Output information on each ref</source>
          <target state="translated">各レフの出力情報</target>
        </trans-unit>
        <trans-unit id="a471d58e2fcbf4f373e5dd800df97d7ecddc4b2a" translate="yes" xml:space="preserve">
          <source>Output only the last line of the &lt;code&gt;--stat&lt;/code&gt; format containing total number of modified files, as well as number of added and deleted lines.</source>
          <target state="translated">変更されたファイルの総数と追加および削除された行の数を含む &lt;code&gt;--stat&lt;/code&gt; 形式の最後の行のみを出力します。</target>
        </trans-unit>
        <trans-unit id="09afa8b7712ce7db5d67e850045b13df59d4e1ae" translate="yes" xml:space="preserve">
          <source>Output only the names of config variables for &lt;code&gt;--list&lt;/code&gt; or &lt;code&gt;--get-regexp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--list&lt;/code&gt; または &lt;code&gt;--get-regexp&lt;/code&gt; の構成変数の名前のみを出力します。</target>
        </trans-unit>
        <trans-unit id="86aa1f4dbf3c69df52c4dcdcb3513ddaac888349" translate="yes" xml:space="preserve">
          <source>Output only the trailers, not any other parts of the input.</source>
          <target state="translated">入力の他の部分は出力せず、トレーラのみを出力します。</target>
        </trans-unit>
        <trans-unit id="db37f07e7f23e51cc792b3b6ff625f7fbb6a099c" translate="yes" xml:space="preserve">
          <source>Output only trailers that exist in the input; do not add any from the command-line or by following configured &lt;code&gt;trailer.*&lt;/code&gt; rules.</source>
          <target state="translated">入力に存在するトレーラーのみを出力します。コマンドラインから、または構成された &lt;code&gt;trailer.*&lt;/code&gt; ルールに従って追加しないでください。</target>
        </trans-unit>
        <trans-unit id="9f94a54620a30e7ce03e12a657369e604dddd0ea" translate="yes" xml:space="preserve">
          <source>Output stability</source>
          <target state="translated">出力安定性</target>
        </trans-unit>
        <trans-unit id="eec068e91917644b4f85137aa6730536687188c8" translate="yes" xml:space="preserve">
          <source>Output the commits chosen to be shown (see Commit Limiting section above) in reverse order. Cannot be combined with &lt;code&gt;--walk-reflogs&lt;/code&gt;.</source>
          <target state="translated">表示するように選択したコミット（上記のコミット制限のセクションを参照）を逆の順序で出力します。 &lt;code&gt;--walk-reflogs&lt;/code&gt; と組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="b5f16fa854dad4b03b2649c62b3407ce506ca41f" translate="yes" xml:space="preserve">
          <source>Output the distribution of relative amount of changes for each sub-directory. The behavior of &lt;code&gt;--dirstat&lt;/code&gt; can be customized by passing it a comma separated list of parameters. The defaults are controlled by the &lt;code&gt;diff.dirstat&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). The following parameters are available:</source>
          <target state="translated">各サブディレクトリの相対的な変更量の分布を出力します。 &lt;code&gt;--dirstat&lt;/code&gt; の動作は、パラメーターのコンマ区切りリストを渡すことでカスタマイズできます。デフォルトは、 &lt;code&gt;diff.dirstat&lt;/code&gt; 構成変数によって制御されます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。次のパラメータを使用できます。</target>
        </trans-unit>
        <trans-unit id="f44ba9d91e7de35dadf965ce7b9f83b740777703" translate="yes" xml:space="preserve">
          <source>Output to a specific file instead of stdout.</source>
          <target state="translated">stdoutの代わりに特定のファイルに出力します。</target>
        </trans-unit>
        <trans-unit id="1374322e99ee5a882a272ee284ec9ea86e209683" translate="yes" xml:space="preserve">
          <source>Output uses the same format as &lt;code&gt;git cat-file --batch&lt;/code&gt;:</source>
          <target state="translated">出力は &lt;code&gt;git cat-file --batch&lt;/code&gt; と同じ形式を使用します。</target>
        </trans-unit>
        <trans-unit id="50880c18d623e2367f83a87791b3da910b72fa81" translate="yes" xml:space="preserve">
          <source>Output uses the same format as &lt;code&gt;git ls-tree &amp;lt;tree&amp;gt; -- &amp;lt;path&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">出力は &lt;code&gt;git ls-tree &amp;lt;tree&amp;gt; -- &amp;lt;path&amp;gt;&lt;/code&gt; と同じ形式を使用します：</target>
        </trans-unit>
        <trans-unit id="12aec147318e848c7d54969418eb1ab7603e65c0" translate="yes" xml:space="preserve">
          <source>Outputs some statistics to stderr. Has a small performance penalty.</source>
          <target state="translated">いくつかの統計情報を標準エラーに出力します。パフォーマンスに若干のペナルティがあります。</target>
        </trans-unit>
        <trans-unit id="bb044abda9deb6fdc3e0634ed0f85ce258bcc5dc" translate="yes" xml:space="preserve">
          <source>Outputs the SHA1 of every commit in &lt;code&gt;&amp;lt;limit&amp;gt;..&amp;lt;head&amp;gt;&lt;/code&gt;, prefixed with &lt;code&gt;-&lt;/code&gt; for commits that have an equivalent in &amp;lt;upstream&amp;gt;, and &lt;code&gt;+&lt;/code&gt; for commits that do not.</source>
          <target state="translated">&lt;code&gt;&amp;lt;limit&amp;gt;..&amp;lt;head&amp;gt;&lt;/code&gt; 内のすべてのコミットのSHA1を出力します。 &amp;lt;upstream&amp;gt;に対応するコミットがある場合は &lt;code&gt;-&lt;/code&gt; を、ない場合は &lt;code&gt;+&lt;/code&gt; を前に付けて出力します。</target>
        </trans-unit>
        <trans-unit id="27115802f1c296a1dfb4ce768084e3e086e70c8c" translate="yes" xml:space="preserve">
          <source>Override &lt;code&gt;tag.gpgSign&lt;/code&gt; configuration variable that is set to force each and every tag to be signed.</source>
          <target state="translated">すべてのタグに強制的に署名するように設定されている &lt;code&gt;tag.gpgSign&lt;/code&gt; 構成変数をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="f98c38feba04de33a87daf02cddb4bc0af45f925" translate="yes" xml:space="preserve">
          <source>Override earlier --rebase.</source>
          <target state="translated">以前の --rebase をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="bf7cdfd38925dba890e8c6c44d76b710ca912a26" translate="yes" xml:space="preserve">
          <source>Override the HTTP proxy, normally configured using the &lt;code&gt;http_proxy&lt;/code&gt;, &lt;code&gt;https_proxy&lt;/code&gt;, and &lt;code&gt;all_proxy&lt;/code&gt; environment variables (see &lt;code&gt;curl(1)&lt;/code&gt;). In addition to the syntax understood by curl, it is possible to specify a proxy string with a user name but no password, in which case git will attempt to acquire one in the same way it does for other credentials. See &lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials[7]&lt;/a&gt; for more information. The syntax thus is &lt;code&gt;[protocol://][user[:password]@]proxyhost[:port]&lt;/code&gt;. This can be overridden on a per-remote basis; see remote.&amp;lt;name&amp;gt;.proxy</source>
          <target state="translated">通常は &lt;code&gt;http_proxy&lt;/code&gt; 、 &lt;code&gt;https_proxy&lt;/code&gt; 、および &lt;code&gt;all_proxy&lt;/code&gt; 環境変数を使用して構成されたHTTPプロキシーをオーバーライドします（ &lt;code&gt;curl(1)&lt;/code&gt; を参照）。curlが理解する構文に加えて、ユーザー名でパスワードなしでプロキシ文字列を指定することができます。その場合、gitは他の資格情報と同じ方法でプロキシ文字列を取得しようとします。詳細については、&lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials [7]&lt;/a&gt;を参照してください。したがって、構文は &lt;code&gt;[protocol://][user[:password]@]proxyhost[:port]&lt;/code&gt; です。これは、リモートごとにオーバーライドできます。remote。&amp;lt;name&amp;gt; .proxyを参照してください</target>
        </trans-unit>
        <trans-unit id="ca2a7d0ade908f47d0a242141742817435033d82" translate="yes" xml:space="preserve">
          <source>Override the author date used in the commit.</source>
          <target state="translated">コミットで使用した作者の日付を上書きします。</target>
        </trans-unit>
        <trans-unit id="afbb46ef37a88110fa3c814b4440b9bab3c588ca" translate="yes" xml:space="preserve">
          <source>Override the commit author. Specify an explicit author using the standard &lt;code&gt;A U Thor &amp;lt;author@example.com&amp;gt;&lt;/code&gt; format. Otherwise &amp;lt;author&amp;gt; is assumed to be a pattern and is used to search for an existing commit by that author (i.e. rev-list --all -i --author=&amp;lt;author&amp;gt;); the commit author is then copied from the first such commit found.</source>
          <target state="translated">コミット作者を上書きします。標準の &lt;code&gt;A U Thor &amp;lt;author@example.com&amp;gt;&lt;/code&gt; 形式を使用して、明示的な作成者を指定します。それ以外の場合、&amp;lt;author&amp;gt;はパターンと見なされ、その作成者による既存のコミットの検索に使用されます（つまり、rev-list --all -i --author = &amp;lt;author&amp;gt;）。コミットの作者は、最初に見つかったそのようなコミットからコピーされます。</target>
        </trans-unit>
        <trans-unit id="e3aa6564c96bc2c1fa2d64bc52314ce125c2e1b2" translate="yes" xml:space="preserve">
          <source>Override the default help format used by &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt;. Values &lt;code&gt;man&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;web&lt;/code&gt; and &lt;code&gt;html&lt;/code&gt; are supported. &lt;code&gt;man&lt;/code&gt; is the default. &lt;code&gt;web&lt;/code&gt; and &lt;code&gt;html&lt;/code&gt; are the same.</source>
          <target state="translated">&lt;a href=&quot;git-help&quot;&gt;git-help [1]が&lt;/a&gt;使用するデフォルトのヘルプ形式を上書きします。値 &lt;code&gt;man&lt;/code&gt; 、 &lt;code&gt;info&lt;/code&gt; 、 &lt;code&gt;web&lt;/code&gt; および &lt;code&gt;html&lt;/code&gt; がサポートされています。 &lt;code&gt;man&lt;/code&gt; がデフォルトです。 &lt;code&gt;web&lt;/code&gt; と &lt;code&gt;html&lt;/code&gt; は同じです。</target>
        </trans-unit>
        <trans-unit id="90af133b98db5fc195076e23392ec3cd67c3e89c" translate="yes" xml:space="preserve">
          <source>Override the default tempdir.</source>
          <target state="translated">デフォルトの tempdir を上書きします。</target>
        </trans-unit>
        <trans-unit id="5b51681506c224a8c47f1343a9ecd64433151e38" translate="yes" xml:space="preserve">
          <source>Override the executable bit of the added files. The executable bit is only changed in the index, the files on disk are left unchanged.</source>
          <target state="translated">追加したファイルの実行可能ビットを上書きします。実行可能ビットが変更されるのはインデックスのみで、ディスク上のファイルは変更されません。</target>
        </trans-unit>
        <trans-unit id="2478241e90c06d40d8344e2c734cc9e34ffd0d73" translate="yes" xml:space="preserve">
          <source>Override the path for the given tool that may be used to browse HTML help (see &lt;code&gt;-w&lt;/code&gt; option in &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt;) or a working repository in gitweb (see &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt;).</source>
          <target state="translated">HTMLヘルプ（&lt;a href=&quot;git-help&quot;&gt;git-help [1]の&lt;/a&gt; &lt;code&gt;-w&lt;/code&gt; オプションを参照）またはgitwebの作業リポジトリ（&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]&lt;/a&gt;を参照）の参照に使用できる特定のツールのパスをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="eeb1b59c781a411c8a2ade9041a0a224d6888a83" translate="yes" xml:space="preserve">
          <source>Override the path for the given tool that may be used to display help in the &lt;code&gt;man&lt;/code&gt; format. See &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;man&lt;/code&gt; 形式でヘルプを表示するために使用できる特定のツールのパスをオーバーライドします。&lt;a href=&quot;git-help&quot;&gt;git-help [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="adf75a51b2ad5d1ae80303fa7c85676af23cae71" translate="yes" xml:space="preserve">
          <source>Override the path for the given tool. This is useful in case your tool is not in the PATH.</source>
          <target state="translated">与えられたツールのパスを上書きします。これは、ツールがPATHにない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="d7b3947bcc6a75423b4dad1a16da833c821be77f" translate="yes" xml:space="preserve">
          <source>Override the up-to-date check.</source>
          <target state="translated">最新のチェックを上書きします。</target>
        </trans-unit>
        <trans-unit id="4f22a960f4dfa712696d5fbbb0afb1a8a1360ea3" translate="yes" xml:space="preserve">
          <source>Overrides a previous &lt;code&gt;--no-walk&lt;/code&gt;.</source>
          <target state="translated">以前の &lt;code&gt;--no-walk&lt;/code&gt; を上書きします。</target>
        </trans-unit>
        <trans-unit id="dcd0bd07179d4dab7adf6735a6d8e2d1ef6bb9e3" translate="yes" xml:space="preserve">
          <source>Overwrite the contents of the files that match the pathspec. When the &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; (most often a commit) is not given, overwrite working tree with the contents in the index. When the &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; is given, overwrite both the index and the working tree with the contents at the &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">pathspecに一致するファイルの内容を上書きします。とき &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; （ほとんどの場合、コミット）、指数の内容を上書き作業ツリーを与えられていません。とき &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; 与えられ、インデックスとの内容で作業ツリーの両方上書き &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bdd66a641be22e4e3d7b30653f72f1e5443e834b" translate="yes" xml:space="preserve">
          <source>P4 does not have the same concept of a branch as Git. Instead, p4 organizes its content as a directory tree, where by convention different logical branches are in different locations in the tree. The &lt;code&gt;p4 branch&lt;/code&gt; command is used to maintain mappings between different areas in the tree, and indicate related content. &lt;code&gt;git p4&lt;/code&gt; can use these mappings to determine branch relationships.</source>
          <target state="translated">P4には、Gitと同じブランチの概念はありません。代わりに、p4はその内容をディレクトリツリーとして編成します。慣例により、異なる論理ブランチはツリー内の異なる場所にあります。 &lt;code&gt;p4 branch&lt;/code&gt; 命令は、ツリー内の異なる領域間のマッピングを維持するために使用、および関連コンテンツを示しています。 &lt;code&gt;git p4&lt;/code&gt; はこれらのマッピングを使用してブランチの関係を決定できます。</target>
        </trans-unit>
        <trans-unit id="c377e9687b993a1d0b2786f798f75e99668d5825" translate="yes" xml:space="preserve">
          <source>P4 repositories can be added to an existing Git repository using &lt;code&gt;git p4 sync&lt;/code&gt; too:</source>
          <target state="translated">&lt;code&gt;git p4 sync&lt;/code&gt; を使用して、P4リポジトリを既存のGitリポジトリに追加することもできます。</target>
        </trans-unit>
        <trans-unit id="899e81641132daf9598824927775cf00c10d02f7" translate="yes" xml:space="preserve">
          <source>PATH_INFO (if GIT_PROJECT_ROOT is set, otherwise PATH_TRANSLATED)</source>
          <target state="translated">PATH_INFO (GIT_PROJECT_ROOTが設定されている場合、そうでない場合はPATH_TRANSLATED)</target>
        </trans-unit>
        <trans-unit id="6decffd0412eaf2f154545c6af90e7d695d8d0f2" translate="yes" xml:space="preserve">
          <source>PATH_INFO usage</source>
          <target state="translated">PATH_INFO の使い方</target>
        </trans-unit>
        <trans-unit id="4a9500dfda14165da62b0d759d4f7a0a1828ddac" translate="yes" xml:space="preserve">
          <source>PERF Format</source>
          <target state="translated">PERFフォーマット</target>
        </trans-unit>
        <trans-unit id="ac3820bb690c0e4f8afb899d021a87e2215d9f6c" translate="yes" xml:space="preserve">
          <source>Pack Idx file:</source>
          <target state="translated">Idxファイルをパックします。</target>
        </trans-unit>
        <trans-unit id="8e5bd2c516c0b64c7a093133ad05311d5aa715dd" translate="yes" xml:space="preserve">
          <source>Pack heads and tags for efficient repository access</source>
          <target state="translated">リポジトリへの効率的なアクセスのためのヘッドとタグのパック</target>
        </trans-unit>
        <trans-unit id="916c15851c2e9c9482b6f7ae827a2ef3628cc3b5" translate="yes" xml:space="preserve">
          <source>Pack unpacked objects in a repository</source>
          <target state="translated">リポジトリ内でアンパックされたオブジェクトをパックする</target>
        </trans-unit>
        <trans-unit id="fd708a7f9f7d413af09614d69248d6ad385118ff" translate="yes" xml:space="preserve">
          <source>Pack unreachable loose objects (and their loose counterparts removed). This implies &lt;code&gt;--revs&lt;/code&gt;.</source>
          <target state="translated">到達できないゆるいオブジェクトを梱包します（そして、それらのゆるい対応物を取り外します）。これは &lt;code&gt;--revs&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="eee993c07c74282866f868d204d9cb338384817b" translate="yes" xml:space="preserve">
          <source>Pack-*.pack files have the following format:</source>
          <target state="translated">Pack-*.packファイルの形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f066589e1e591fe2ae534900eb4066417a728dbe" translate="yes" xml:space="preserve">
          <source>Packet-line framing</source>
          <target state="translated">パケット回線のフレーミング</target>
        </trans-unit>
        <trans-unit id="df55d31d287518a9be7d4b1795862cdf2fc41470" translate="yes" xml:space="preserve">
          <source>Packfile optimization</source>
          <target state="translated">パックファイルの最適化</target>
        </trans-unit>
        <trans-unit id="64fd302d4a38d46210fcac733698d9d782d1ce2e" translate="yes" xml:space="preserve">
          <source>Packfiles can be marked as &quot;special&quot; using empty files that share the initial name but replace &quot;.pack&quot; with &quot;.keep&quot; or &quot;.promisor&quot;. We can add an optional chunk of data to the multi-pack-index that records flags of information about the packfiles. This allows new states, such as &lt;code&gt;repacked&lt;/code&gt; or &lt;code&gt;redeltified&lt;/code&gt;, that can help with pack maintenance in a multi-pack environment. It may also be helpful to organize packfiles by object type (commit, tree, blob, etc.) and use this metadata to help that maintenance.</source>
          <target state="translated">Packfileは、初期名を共有するが「.pack」を「.keep」または「.promisor」で置き換える空のファイルを使用して、「特別」としてマークできます。パックファイルに関する情報のフラグを記録するオプションのデータチャンクをmulti-pack-indexに追加できます。これは、次のような新しい状態、可能に &lt;code&gt;repacked&lt;/code&gt; または &lt;code&gt;redeltified&lt;/code&gt; 、マルチパック環境でのパックのメンテナンスでその缶の助けを。オブジェクトタイプ（コミット、ツリー、ブロブなど）でパックファイルを整理し、このメタデータを使用してメンテナンスを行うことも役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="31a1b2f09e14954b347560b78870b7472ffa3669" translate="yes" xml:space="preserve">
          <source>Packing objects</source>
          <target state="translated">オブジェクトのパッキング</target>
        </trans-unit>
        <trans-unit id="128ae9baa6dfe921179664d6c2722a23816ef24b" translate="yes" xml:space="preserve">
          <source>Packing your repository</source>
          <target state="translated">リポジトリのパッキング</target>
        </trans-unit>
        <trans-unit id="1b3cc3c53ffc64e43edbae102e2fbe605f6c35c2" translate="yes" xml:space="preserve">
          <source>Packs (files that store many objects in compressed form, along with index files to allow them to be randomly accessed) are found in this directory.</source>
          <target state="translated">パック(多くのオブジェクトを圧縮して保存するファイルと、ランダムにアクセスできるようにするためのインデックスファイル)は、このディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="5e77e9eb9a9ac23524177c29c90fcfbb2bbc9d8d" translate="yes" xml:space="preserve">
          <source>Packs are used to reduce the load on mirror systems, backup engines, disk storage, etc.</source>
          <target state="translated">パックは、ミラーシステム、バックアップエンジン、ディスクストレージなどの負荷を軽減するために使用されます。</target>
        </trans-unit>
        <trans-unit id="62f32a40a6ada609c72de752933f4d26ac1e6bb8" translate="yes" xml:space="preserve">
          <source>Parallel operation</source>
          <target state="translated">並列運転</target>
        </trans-unit>
        <trans-unit id="669184806db1339e6c6beee1ab38494c4529dab6" translate="yes" xml:space="preserve">
          <source>Parent/child relations are only visible with &lt;code&gt;--parents&lt;/code&gt;, but that does not affect the commits selected in default mode, so we have shown the parent lines.</source>
          <target state="translated">親子関係は &lt;code&gt;--parents&lt;/code&gt; でのみ表示されますが、デフォルトモードで選択されたコミットには影響しないため、親行を表示しています。</target>
        </trans-unit>
        <trans-unit id="2efa637ebfd57586deb686233e5bd089abfab182" translate="yes" xml:space="preserve">
          <source>Parse the date string, and output the corresponding --max-age= parameter for &lt;code&gt;git rev-list&lt;/code&gt;.</source>
          <target state="translated">日付文字列を解析し、対応する--max-age =パラメータを &lt;code&gt;git rev-list&lt;/code&gt; に出力します。</target>
        </trans-unit>
        <trans-unit id="26f771d12548577279103a59da15ea4fd6835ad3" translate="yes" xml:space="preserve">
          <source>Parse the date string, and output the corresponding --min-age= parameter for &lt;code&gt;git rev-list&lt;/code&gt;.</source>
          <target state="translated">日付文字列を解析し、対応する--min-age =パラメータを &lt;code&gt;git rev-list&lt;/code&gt; に出力します。</target>
        </trans-unit>
        <trans-unit id="868df803566ac09bf6f4d16dac1cc6f9e22a2eb9" translate="yes" xml:space="preserve">
          <source>Parseopt</source>
          <target state="translated">Parseopt</target>
        </trans-unit>
        <trans-unit id="2f58caf00da93e9d39ff1263d9c88686c41f1f30" translate="yes" xml:space="preserve">
          <source>Part two of this tutorial explains the object database, the index file, and a few other odds and ends that you&amp;rsquo;ll need to make the most of Git. You can find it at &lt;a href=&quot;gittutorial-2&quot;&gt;gittutorial-2[7]&lt;/a&gt;.</source>
          <target state="translated">このチュートリアルのパート2では、オブジェクトデータベース、インデックスファイル、およびGitを最大限に活用するために必要なその他のいくつかのオッズとエンドについて説明します。あなたはでそれを見つけることができ&lt;a href=&quot;gittutorial-2&quot;&gt;gittutorial-2 [7] &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8fc0213ea3567cb4b4477ecb78349de8a29f1b86" translate="yes" xml:space="preserve">
          <source>Partly for this reason, many experienced Git users, even when working on an otherwise merge-heavy project, keep the history linear by rebasing against the latest upstream version before publishing.</source>
          <target state="translated">この理由もあって、経験豊富な Git ユーザーの多くは、マージの多いプロジェクトで作業をしていても、公開前に最新のアップストリームバージョンにリベースすることで履歴を直線的に保つようにしています。</target>
        </trans-unit>
        <trans-unit id="18fd2ef3833f23df7a3b9f0464ed57cacda16deb" translate="yes" xml:space="preserve">
          <source>Pass --quiet to git-fetch-pack and silence any other internally used git commands. Progress is not reported to the standard error stream.</source>
          <target state="translated">git-fetch-pack に --quiet を渡し、その他の内部的に使われている git コマンドを停止させます。進捗状況は標準のエラーストリームには報告されません。</target>
        </trans-unit>
        <trans-unit id="c1e733f5e8ef91bfe63a917a4d6fc9ec48d03354" translate="yes" xml:space="preserve">
          <source>Pass --verbose to git-fetch and git-merge.</source>
          <target state="translated">git-fetch と git-merge に --verbose を渡します。</target>
        </trans-unit>
        <trans-unit id="5a8b2c7c1f37cd374533e299d8006c239b39cc94" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;-b&lt;/code&gt; flag to &lt;code&gt;git mailinfo&lt;/code&gt; (see &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;).</source>
          <target state="translated">通過 &lt;code&gt;-b&lt;/code&gt; にフラグを &lt;code&gt;git mailinfo&lt;/code&gt; （参照&lt;a href=&quot;git-mailinfo&quot;&gt;[1]のgit-mailinfoを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="6ad058b096d5d940b830a4807c658be882c3c4ae" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;-k&lt;/code&gt; flag to &lt;code&gt;git mailinfo&lt;/code&gt; (see &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;).</source>
          <target state="translated">通過 &lt;code&gt;-k&lt;/code&gt; にフラグを &lt;code&gt;git mailinfo&lt;/code&gt; （参照&lt;a href=&quot;git-mailinfo&quot;&gt;[1]のgit-mailinfoを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="08d9a4e291a48ec7e7744c9392f211c7729e475b" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;-n&lt;/code&gt; flag to &lt;code&gt;git mailinfo&lt;/code&gt; (see &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;).</source>
          <target state="translated">通過 &lt;code&gt;-n&lt;/code&gt; にフラグを &lt;code&gt;git mailinfo&lt;/code&gt; （参照&lt;a href=&quot;git-mailinfo&quot;&gt;[1]のgit-mailinfoを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c6c9ef8d9eb1e67c7d3dd624c5619505c72d0bcb" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;-q&lt;/code&gt; flag to &lt;code&gt;git unpack-objects&lt;/code&gt;; this makes the cloning process less verbose.</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; フラグを &lt;code&gt;git unpack-objects&lt;/code&gt; に渡します。これにより、複製プロセスの冗長性が低下します。</target>
        </trans-unit>
        <trans-unit id="844d7ccb03cd6ed89f98fadab62d2737a8e85be6" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;-u&lt;/code&gt; flag to &lt;code&gt;git mailinfo&lt;/code&gt; (see &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;). The proposed commit log message taken from the e-mail is re-coded into UTF-8 encoding (configuration variable &lt;code&gt;i18n.commitencoding&lt;/code&gt; can be used to specify project&amp;rsquo;s preferred encoding if it is not UTF-8).</source>
          <target state="translated">パス &lt;code&gt;-u&lt;/code&gt; にフラグ &lt;code&gt;git mailinfo&lt;/code&gt; （参照&lt;a href=&quot;git-mailinfo&quot;&gt;[1]のgit-mailinfoを&lt;/a&gt;）。電子メールから取得した提案されたコミットログメッセージは、UTF-8エンコーディングに再コード化されます（構成変数 &lt;code&gt;i18n.commitencoding&lt;/code&gt; を使用して、プロジェクトの優先エンコーディングがUTF-8でない場合に指定できます）。</target>
        </trans-unit>
        <trans-unit id="2bc55f5c25108364f3a39ef8fcf3a15e05538a97" translate="yes" xml:space="preserve">
          <source>Pass a configuration parameter to the command. The value given will override values from configuration files. The &amp;lt;name&amp;gt; is expected in the same format as listed by &lt;code&gt;git config&lt;/code&gt; (subkeys separated by dots).</source>
          <target state="translated">コマンドに構成パラメーターを渡します。指定された値は、構成ファイルの値をオーバーライドします。&amp;lt;name&amp;gt;は、 &lt;code&gt;git config&lt;/code&gt; （ドットで区切られたサブキー）でリストされているのと同じ形式であることが期待されています。</target>
        </trans-unit>
        <trans-unit id="53c6f0ea05fb13c74273eb0b4d13e04b5e8a0db8" translate="yes" xml:space="preserve">
          <source>Pass an additional HTTP header when communicating with a server. If more than one such entry exists, all of them are added as extra headers. To allow overriding the settings inherited from the system config, an empty value will reset the extra headers to the empty list.</source>
          <target state="translated">サーバと通信する際に追加の HTTP ヘッダを渡します。このようなエントリが複数存在する場合は、すべてのエントリが追加ヘッダとして追加されます。システム設定から継承された設定を上書きできるようにするために、空の値を指定すると余分なヘッダは空のリストにリセットされます。</target>
        </trans-unit>
        <trans-unit id="88461608ee691de1cd814b8c5a12a7fe39a53808" translate="yes" xml:space="preserve">
          <source>Pass merge strategy specific option through to the merge strategy.</source>
          <target state="translated">マージ戦略固有のオプションをマージ戦略に渡します。</target>
        </trans-unit>
        <trans-unit id="6972c66b8402bd099c21ba9d94ae803550d21e77" translate="yes" xml:space="preserve">
          <source>Pass the &amp;lt;strategy-option&amp;gt; through to the merge strategy. This implies &lt;code&gt;--merge&lt;/code&gt; and, if no strategy has been specified, &lt;code&gt;-s recursive&lt;/code&gt;. Note the reversal of &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; as noted above for the &lt;code&gt;-m&lt;/code&gt; option.</source>
          <target state="translated">&amp;lt;strategy-option&amp;gt;をマージ戦略に渡します。これは &lt;code&gt;--merge&lt;/code&gt; を意味し、戦略が指定されていない場合は &lt;code&gt;-s recursive&lt;/code&gt; になります。 &lt;code&gt;-m&lt;/code&gt; オプションについて上記で説明したように、 &lt;code&gt;ours&lt;/code&gt; と &lt;code&gt;theirs&lt;/code&gt; のものの逆転に注意してください。</target>
        </trans-unit>
        <trans-unit id="471cf94bd65fc727b56b2f8e18afb269faa46e42" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;--delta-islands&lt;/code&gt; option to &lt;code&gt;git-pack-objects&lt;/code&gt;, see &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">パス &lt;code&gt;--delta-islands&lt;/code&gt; へのオプション &lt;code&gt;git-pack-objects&lt;/code&gt; 参照してください&lt;a href=&quot;git-pack-objects&quot;&gt;gitのパック-オブジェクト[1] &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6a1683fce9ff86fab10219f3cc0bfdfabc8f2cdd" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;--local&lt;/code&gt; option to &lt;code&gt;git pack-objects&lt;/code&gt;. See &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">渡し &lt;code&gt;--local&lt;/code&gt; にオプション &lt;code&gt;git pack-objects&lt;/code&gt; 。&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a642deef0312e0c6bd0a5561d0fd768ee8a59b73" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;--no-reuse-delta&lt;/code&gt; option to &lt;code&gt;git-pack-objects&lt;/code&gt;, see &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--no-reuse-delta&lt;/code&gt; オプションを &lt;code&gt;git-pack-objects&lt;/code&gt; に渡します&lt;a href=&quot;git-pack-objects&quot;&gt;。git-pack-objects[1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d901d31c7644af40691b80c7d63e45696f17b53b" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;--no-reuse-object&lt;/code&gt; option to &lt;code&gt;git-pack-objects&lt;/code&gt;, see &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--no-reuse-object&lt;/code&gt; オプションを &lt;code&gt;git-pack-objects&lt;/code&gt; に渡します&lt;a href=&quot;git-pack-objects&quot;&gt;。git-pack-objects[1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3ee5cba414a5270880e2aa4a80f865762fee87e9" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;-m&lt;/code&gt; flag to &lt;code&gt;git mailinfo&lt;/code&gt; (see &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;), so that the Message-ID header is added to the commit message. The &lt;code&gt;am.messageid&lt;/code&gt; configuration variable can be used to specify the default behaviour.</source>
          <target state="translated">Message-IDヘッダーがコミットメッセージに追加されるように、 &lt;code&gt;-m&lt;/code&gt; フラグを &lt;code&gt;git mailinfo&lt;/code&gt; （&lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo [1]を&lt;/a&gt;参照）に渡します。 &lt;code&gt;am.messageid&lt;/code&gt; の設定変数は、デフォルトの動作を指定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="e26add554b4352375b32406b09e1002baf88696f" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;-q&lt;/code&gt; option to &lt;code&gt;git pack-objects&lt;/code&gt;. See &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; オプションを &lt;code&gt;git pack-objects&lt;/code&gt; に渡します。&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d89c69fc0d489e2189a0abb8c756572cba9d279c" translate="yes" xml:space="preserve">
          <source>Pass the merge strategy-specific option through to the merge strategy. See &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt; for details.</source>
          <target state="translated">マージ戦略固有のオプションをマージ戦略に渡します。詳細については、&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aae9caba3efe1e125b04992ec6689cc466bc71b8" translate="yes" xml:space="preserve">
          <source>Pass the specified string as a push option for consumption by hooks on the server side. If the server doesn&amp;rsquo;t support push options, error out. See &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; and &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for details.</source>
          <target state="translated">指定された文字列をサーバー側のフックによる消費のためのプッシュオプションとして渡します。サーバーがプッシュオプションをサポートしていない場合は、エラーになります。詳細については、&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;および&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3802841770affa53645333dabda9772d509a4944" translate="yes" xml:space="preserve">
          <source>Pass the timestamp fuzz factor to cvsps, in seconds. If unset, cvsps defaults to 300s.</source>
          <target state="translated">タイムスタンプのファズファクタを秒単位で cvsps に渡します.設定されていない場合,cvsps のデフォルトは 300 秒です.</target>
        </trans-unit>
        <trans-unit id="b62f7fb7ee127d211118f2c56411ed681d4dc9a8" translate="yes" xml:space="preserve">
          <source>Passed directly to &lt;code&gt;git rebase&lt;/code&gt; when using &lt;code&gt;dcommit&lt;/code&gt; if a &lt;code&gt;git reset&lt;/code&gt; cannot be used (see &lt;code&gt;dcommit&lt;/code&gt;).</source>
          <target state="translated">直接渡さ &lt;code&gt;git rebase&lt;/code&gt; 使用時 &lt;code&gt;dcommit&lt;/code&gt; を場合 &lt;code&gt;git reset&lt;/code&gt; 使用することができない（参照 &lt;code&gt;dcommit&lt;/code&gt; します）。</target>
        </trans-unit>
        <trans-unit id="e0a119c584f6be9edb9c41e31b2e495e1678cbc8" translate="yes" xml:space="preserve">
          <source>Passes the objects in the bundle to &lt;code&gt;git index-pack&lt;/code&gt; for storage in the repository, then prints the names of all defined references. If a list of references is given, only references matching those in the list are printed. This command is really plumbing, intended to be called only by &lt;code&gt;git fetch&lt;/code&gt;.</source>
          <target state="translated">バンドル内のオブジェクトをリポジトリに保存するために &lt;code&gt;git index-pack&lt;/code&gt; に渡し、定義されているすべての参照の名前を出力します。参照のリストが指定されている場合、リスト内の参照と一致する参照のみが印刷されます。このコマンドは実際に配管であり、 &lt;code&gt;git fetch&lt;/code&gt; によってのみ呼び出されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="76a10ff11a1c062361e6cf9a600e31448471fa51" translate="yes" xml:space="preserve">
          <source>Passing sh -c &quot;some commands&quot; to &quot;git bisect run&quot;</source>
          <target state="translated">sh -c &quot;some commands&quot; を &quot;git bisect run&quot; に渡します。</target>
        </trans-unit>
        <trans-unit id="5323220d01673f917e0cf25de9b3b16456b54e2a" translate="yes" xml:space="preserve">
          <source>Passing the pattern via &amp;lt;file&amp;gt; allows for providing a search pattern containing a \0.</source>
          <target state="translated">&amp;lt;file&amp;gt;を介してパターンを渡すと、\ 0を含む検索パターンを提供できます。</target>
        </trans-unit>
        <trans-unit id="dc25b509070cc72f2f466576d5f86386a7b13eca" translate="yes" xml:space="preserve">
          <source>Password for SMTP-AUTH. The argument is optional: If no argument is specified, then the empty string is used as the password. Default is the value of &lt;code&gt;sendemail.smtpPass&lt;/code&gt;, however &lt;code&gt;--smtp-pass&lt;/code&gt; always overrides this value.</source>
          <target state="translated">SMTP-AUTHのパスワード。引数はオプションです。引数を指定しない場合、空の文字列がパスワードとして使用されます。デフォルトはの値である &lt;code&gt;sendemail.smtpPass&lt;/code&gt; しかし、 &lt;code&gt;--smtp-pass&lt;/code&gt; 、常にこの値を上書きします。</target>
        </trans-unit>
        <trans-unit id="bdca924d25420c3b18edd188df0ec914b14515eb" translate="yes" xml:space="preserve">
          <source>Password specified as an option to all p4 commands, with &lt;code&gt;-P &amp;lt;password&amp;gt;&lt;/code&gt;. The environment variable &lt;code&gt;P4PASS&lt;/code&gt; can be used instead.</source>
          <target state="translated">&lt;code&gt;-P &amp;lt;password&amp;gt;&lt;/code&gt; を使用して、すべてのp4コマンドのオプションとして指定されたパスワード。代わりに、環境変数 &lt;code&gt;P4PASS&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="d3420ceeebad33fa39495a8a02933956bb0a3a55" translate="yes" xml:space="preserve">
          <source>Patch merge data from Arch is used to mark merges in Git as well. Git does not care much about tracking patches, and only considers a merge when a branch incorporates all the commits since the point they forked. The end result is that Git will have a good idea of how far branches have diverged. So the import process does lose some patch-trading metadata.</source>
          <target state="translated">Arch のパッチマージデータは Git でもマージのマークに使われます。Git はパッチの追跡にはあまり関心がなく、ブランチがフォークした時点からすべてのコミットを組み込んだ場合のみマージとみなします。最終的には、ブランチがどこまで分岐したのかを Git が把握できるようになります。そのため、インポート処理ではパッチ追跡のメタデータが失われてしまうことになります。</target>
        </trans-unit>
        <trans-unit id="31c42bf1738e25a658115f73ad50091aa9060241" translate="yes" xml:space="preserve">
          <source>Patch workflow</source>
          <target state="translated">パッチワークフロー</target>
        </trans-unit>
        <trans-unit id="b1f5662dd2e222629919ebbe45b58d0f89867f94" translate="yes" xml:space="preserve">
          <source>Patch workflows</source>
          <target state="translated">パッチワークフロー</target>
        </trans-unit>
        <trans-unit id="27352b2b463b7c072417a02bbdfc4fc80c3a786d" translate="yes" xml:space="preserve">
          <source>Patching</source>
          <target state="translated">Patching</target>
        </trans-unit>
        <trans-unit id="b560ead99e5ad114e3f8a677bf699dbd3c20bb23" translate="yes" xml:space="preserve">
          <source>Path (e.g., &lt;code&gt;repo.git&lt;/code&gt; in &lt;code&gt;https://example.com/repo.git&lt;/code&gt;). The path field of the config key must match the path field of the URL either exactly or as a prefix of slash-delimited path elements. This means a config key with path &lt;code&gt;foo/&lt;/code&gt; matches URL path &lt;code&gt;foo/bar&lt;/code&gt;. A prefix can only match on a slash (&lt;code&gt;/&lt;/code&gt;) boundary. Longer matches take precedence (so a config key with path &lt;code&gt;foo/bar&lt;/code&gt; is a better match to URL path &lt;code&gt;foo/bar&lt;/code&gt; than a config key with just path &lt;code&gt;foo/&lt;/code&gt;).</source>
          <target state="translated">パス（例えば、 &lt;code&gt;repo.git&lt;/code&gt; で &lt;code&gt;https://example.com/repo.git&lt;/code&gt; ）。構成キーのパスフィールドは、URLのパスフィールドと完全に一致するか、スラッシュで区切られたパス要素のプレフィックスとして一致する必要があります。これは、パス &lt;code&gt;foo/&lt;/code&gt; 設定キーがURLパス &lt;code&gt;foo/bar&lt;/code&gt; と一致することを意味します。接頭辞はスラッシュ（ &lt;code&gt;/&lt;/code&gt; ）境界でのみ一致します。より長いマッチが優先されます（パスと設定キーので、 &lt;code&gt;foo/bar&lt;/code&gt; URLパスに良く一致している &lt;code&gt;foo/bar&lt;/code&gt; だけのパスと設定キー以外 &lt;code&gt;foo/&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="21d3e318bf1a1b4158750af5acdb00744a4b43b1" translate="yes" xml:space="preserve">
          <source>Path containing files with the CA certificates to verify the peer with when fetching or pushing over HTTPS. Can be overridden by the &lt;code&gt;GIT_SSL_CAPATH&lt;/code&gt; environment variable.</source>
          <target state="translated">HTTPS経由でフェッチまたはプッシュするときにピアを確認するためのCA証明書が含まれるファイルを含むパス。 &lt;code&gt;GIT_SSL_CAPATH&lt;/code&gt; 環境変数によってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="fa0b12f866af9cc606a1a97e00f59d3f70f76032" translate="yes" xml:space="preserve">
          <source>Path names are encoded in UTF-8 normalization form C. This applies to tree objects, the index file, ref names, as well as path names in command line arguments, environment variables and config files (&lt;code&gt;.git/config&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;), &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;, &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt;).</source>
          <target state="translated">パス名はCのUTF-8正規化形式でエンコードされます。これは、ツリーオブジェクト、インデックスファイル、参照名、コマンドライン引数、環境変数、構成ファイル（ &lt;code&gt;.git/config&lt;/code&gt; （&lt;a href=&quot;git-config&quot;&gt;git-configを&lt;/a&gt;参照）のパス名に適用されます[1]）、&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]&lt;/a&gt;、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;および&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9dbaaebd4a9c17d56a6b23f6ab97e6dcfee1c1d1" translate="yes" xml:space="preserve">
          <source>Path names in extended headers do not include the &lt;code&gt;a/&lt;/code&gt; and &lt;code&gt;b/&lt;/code&gt; prefixes.</source>
          <target state="translated">拡張ヘッダーのパス名には、 &lt;code&gt;a/&lt;/code&gt; および &lt;code&gt;b/&lt;/code&gt; プレフィックスは含まれません。</target>
        </trans-unit>
        <trans-unit id="398482aa4d5dc2ffcdb7a8eb1faf09763e2f1990" translate="yes" xml:space="preserve">
          <source>Path resolution via &lt;code&gt;git rev-parse --git-path&lt;/code&gt; uses either $GIT_DIR or $GIT_COMMON_DIR depending on the path. For example, in the linked working tree &lt;code&gt;git rev-parse --git-path HEAD&lt;/code&gt; returns &lt;code&gt;/path/main/.git/worktrees/test-next/HEAD&lt;/code&gt; (not &lt;code&gt;/path/other/test-next/.git/HEAD&lt;/code&gt; or &lt;code&gt;/path/main/.git/HEAD&lt;/code&gt;) while &lt;code&gt;git
rev-parse --git-path refs/heads/master&lt;/code&gt; uses $GIT_COMMON_DIR and returns &lt;code&gt;/path/main/.git/refs/heads/master&lt;/code&gt;, since refs are shared across all working trees, except refs/bisect and refs/worktree.</source>
          <target state="translated">&lt;code&gt;git rev-parse --git-path&lt;/code&gt; によるパス解決は、パスに応じて$ GIT_DIRまたは$ GIT_COMMON_DIRを使用します。たとえば、リンクされた作業ツリーでは、 &lt;code&gt;git rev-parse --git-path HEAD&lt;/code&gt; は &lt;code&gt;/path/main/.git/worktrees/test-next/HEAD&lt;/code&gt; を返します（ &lt;code&gt;/path/other/test-next/.git/HEAD&lt;/code&gt; または &lt;code&gt;/path/main/.git/HEAD&lt;/code&gt; ）一方 &lt;code&gt;git rev-parse --git-path refs/heads/master&lt;/code&gt; 使用$ GIT_COMMON_DIR戻る &lt;code&gt;/path/main/.git/refs/heads/master&lt;/code&gt; 参考文献は、すべての間で共有されているので、 refs / bisectおよびrefs / worktreeを除く、作業ツリー。</target>
        </trans-unit>
        <trans-unit id="27ac1ba438abc8442b44c3b65ed4fee5e1af6eae" translate="yes" xml:space="preserve">
          <source>Path to a log file where the CVS server interface well&amp;hellip;​ logs various stuff. See &lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver[1]&lt;/a&gt;.</source>
          <target state="translated">CVSサーバーインターフェイスのログファイルへのパス...さまざまなものをログに記録します。&lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ad9a8cd142a486ee9476680d4a1bf638f8db23fe" translate="yes" xml:space="preserve">
          <source>Path to a store of trusted CA certificates for SMTP SSL/TLS certificate validation (either a directory that has been processed by &lt;code&gt;c_rehash&lt;/code&gt;, or a single file containing one or more PEM format certificates concatenated together: see verify(1) -CAfile and -CApath for more information on these). Set it to an empty string to disable certificate verification. Defaults to the value of the &lt;code&gt;sendemail.smtpsslcertpath&lt;/code&gt; configuration variable, if set, or the backing SSL library&amp;rsquo;s compiled-in default otherwise (which should be the best choice on most platforms).</source>
          <target state="translated">SMTP SSL / TLS証明書検証用の信頼できるCA証明書のストアへのパス（ &lt;code&gt;c_rehash&lt;/code&gt; によって処理されたディレクトリ、または1つ以上のPEM形式の証明書が連結された単一のファイル：verify（1）-CAfileおよび-CApathを参照）これらの詳細については）。空の文字列に設定して、証明書の検証を無効にします。デフォルトは、 &lt;code&gt;sendemail.smtpsslcertpath&lt;/code&gt; 構成変数の値（設定されている場合）、またはバッキングSSLライブラリのコンパイル済みのデフォルト値（それ以外の場合は、ほとんどのプラットフォームで最良の選択です）の値です。</target>
        </trans-unit>
        <trans-unit id="b2ea00581c7262d0f351e52900685cd26b5cdc9c" translate="yes" xml:space="preserve">
          <source>Path to ca-certificates (either a directory or a single file). Set it to an empty string to disable certificate verification.</source>
          <target state="translated">ca-certificates へのパス (ディレクトリまたは単一ファイル)。証明書の検証を無効にするには、空の文字列を指定します。</target>
        </trans-unit>
        <trans-unit id="59a42b0b47a7f9a3da70b7db0b79cb16c677b919" translate="yes" xml:space="preserve">
          <source>Path to the &lt;code&gt;git-receive-pack&lt;/code&gt; program on the remote end. Sometimes useful when pushing to a remote repository over ssh, and you do not have the program in a directory on the default $PATH.</source>
          <target state="translated">リモートエンドの &lt;code&gt;git-receive-pack&lt;/code&gt; プログラムへのパス。ssh経由でリモートリポジトリにpushするときに、デフォルトの$ PATHのディレクトリにプログラムがない場合に役立つことがあります。</target>
        </trans-unit>
        <trans-unit id="3b50759eb40ac2cfa3120816f612ac8999c3b60c" translate="yes" xml:space="preserve">
          <source>Path to the highlight executable to use (it must be the one from &lt;a href=&quot;http://www.andre-simon.de&quot;&gt;http://www.andre-simon.de&lt;/a&gt; due to assumptions about parameters and output). By default set to &lt;code&gt;highlight&lt;/code&gt;; set it to full path to highlight executable if it is not installed on your web server&amp;rsquo;s PATH. Note that &lt;code&gt;highlight&lt;/code&gt; feature must be set for gitweb to actually use syntax highlighting.</source>
          <target state="translated">使用するハイライト実行可能ファイルへのパス（パラメーターと出力に関する想定により、&lt;a href=&quot;http://www.andre-simon.de&quot;&gt;http：&lt;/a&gt; //www.andre-simon.deからのパスでなければなりません）。デフォルトでは &lt;code&gt;highlight&lt;/code&gt; 設定されています。実行可能ファイルがWebサーバーのPATHにインストールされていない場合は、フルパスに設定して実行可能ファイルを強調表示します。gitwebが実際に構文強調表示を使用するには、 &lt;code&gt;highlight&lt;/code&gt; 機能を設定する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="11df29eff55bbaa504f93c347ee5438c05683eb4" translate="yes" xml:space="preserve">
          <source>Path to wherever your core Git programs are installed. This can also be controlled by setting the GIT_EXEC_PATH environment variable. If no path is given, &lt;code&gt;git&lt;/code&gt; will print the current setting and then exit.</source>
          <target state="translated">コアGitプログラムがインストールされている場所へのパス。これは、GIT_EXEC_PATH環境変数を設定して制御することもできます。パスが指定されていない場合、 &lt;code&gt;git&lt;/code&gt; は現在の設定を出力して終了します。</target>
        </trans-unit>
        <trans-unit id="8bee226624e5e35cc1c649560301ce6a88341f60" translate="yes" xml:space="preserve">
          <source>Pathname Format Notes and -z</source>
          <target state="translated">パス名フォーマットの注意事項と -z</target>
        </trans-unit>
        <trans-unit id="baad7e07c2b2e1eb7a0f4231584855cba490b25b" translate="yes" xml:space="preserve">
          <source>Pathnames with &quot;unusual&quot; characters are quoted as explained for the configuration variable &lt;code&gt;core.quotePath&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">「異常な」文字を含むパス名は、設定変数 &lt;code&gt;core.quotePath&lt;/code&gt; で説明されているように引用符で囲まれます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="faafd85683bf6f5bc5b49f23461483144ba14fdc" translate="yes" xml:space="preserve">
          <source>Paths in which the change applied cleanly are updated both in the index file and in your working tree.</source>
          <target state="translated">変更がクリーンに適用されたパスは、インデックスファイルと作業ツリーの両方で更新されます。</target>
        </trans-unit>
        <trans-unit id="02f71c6b4a6bff00e221f1c59f788c05e9bf57ff" translate="yes" xml:space="preserve">
          <source>Paths may need to be prefixed with &lt;code&gt;--&lt;/code&gt; to separate them from options or the revision range, when confusion arises.</source>
          <target state="translated">混乱が生じた場合、パスの前に &lt;code&gt;--&lt;/code&gt; を付けて、オプションまたはリビジョン範囲と区別する必要があります。</target>
        </trans-unit>
        <trans-unit id="72d92e139b6d6167634cfbe91ec0c2ba1cace91a" translate="yes" xml:space="preserve">
          <source>Paths that merged cleanly are updated both in the index file and in your working tree.</source>
          <target state="translated">クリーンにマージされたパスは、インデックスファイルと作業ツリーの両方で更新されます。</target>
        </trans-unit>
        <trans-unit id="4d8223b3c254f584e9779f7d614adb9369021888" translate="yes" xml:space="preserve">
          <source>Paths to submodule(s). When specified this will restrict the command to only operate on the submodules found at the specified paths. (This argument is required with add).</source>
          <target state="translated">サブモジュールへのパス。これを指定すると、指定したパスで見つかったサブモジュールに対してのみコマンドが動作するように制限されます。(addではこの引数が必要です)。</target>
        </trans-unit>
        <trans-unit id="d837befa2a08a2d2c5de9a52f9ba8092713b988b" translate="yes" xml:space="preserve">
          <source>Pathspec is passed in &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; instead of commandline args. If &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; is exactly &lt;code&gt;-&lt;/code&gt; then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable &lt;code&gt;core.quotePath&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). See also &lt;code&gt;--pathspec-file-nul&lt;/code&gt; and global &lt;code&gt;--literal-pathspecs&lt;/code&gt;.</source>
          <target state="translated">pathspecは、コマンドライン引数の代わりに &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; で渡されます。 &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; が正確な場合 &lt;code&gt;-&lt;/code&gt; 標準入力が使用されます。Pathspec要素は、LFまたはCR / LFで区切られます。pathspec要素は、構成変数 &lt;code&gt;core.quotePath&lt;/code&gt; （&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）で説明したように引用できます。 &lt;code&gt;--pathspec-file-nul&lt;/code&gt; およびglobal &lt;code&gt;--literal-pathspecs&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="3c3fe95fefb92e7001401ae2dddbe0254cb07692" translate="yes" xml:space="preserve">
          <source>Pathspecs are used on the command line of &quot;git ls-files&quot;, &quot;git ls-tree&quot;, &quot;git add&quot;, &quot;git grep&quot;, &quot;git diff&quot;, &quot;git checkout&quot;, and many other commands to limit the scope of operations to some subset of the tree or worktree. See the documentation of each command for whether paths are relative to the current directory or toplevel. The pathspec syntax is as follows:</source>
          <target state="translated">Pathspecs は、&quot;git ls-files&quot;、&quot;git ls-tree&quot;、&quot;git add&quot;、&quot;git grep&quot;、&quot;git diff&quot;、&quot;git checkout&quot; などのコマンドラインで使用され、ツリーやワークツリーの一部に操作範囲を限定するために使用されます。パスがカレントディレクトリからの相対パスかトップレベルからの相対パスかについては、各コマンドのドキュメントを参照してください。pathspecの構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="3edd060b9dbe00aa0b104e48e6298fa38d5e841a" translate="yes" xml:space="preserve">
          <source>Pattern format</source>
          <target state="translated">パターン形式</target>
        </trans-unit>
        <trans-unit id="fcba9b37f153a6df141f56c87f41e26ebdda34ce" translate="yes" xml:space="preserve">
          <source>Pattern used to limit paths in Git commands.</source>
          <target state="translated">Git コマンドでパスを制限するためのパターン。</target>
        </trans-unit>
        <trans-unit id="eb7b848d74da9a813e33fe644876b71e9e6bcaa4" translate="yes" xml:space="preserve">
          <source>Patterns have the same syntax and semantics as patterns used for fnmatch(3) without the FNM_PATHNAME flag, except a pathname also matches a pattern if removing any number of the final pathname components matches the pattern. For example, the pattern &quot;&lt;code&gt;foo*bar&lt;/code&gt;&quot; matches &quot;&lt;code&gt;fooasdfbar&lt;/code&gt;&quot; and &quot;&lt;code&gt;foo/bar/baz/asdf&lt;/code&gt;&quot; but not &quot;&lt;code&gt;foobarx&lt;/code&gt;&quot;.</source>
          <target state="translated">パターンは、FNM_PATHNAMEフラグなしでfnmatch（3）に使用されるパターンと同じ構文とセマンティクスを持っていますが、最終パス名コンポーネントをいくつでも削除するとパターンが一致する場合は、パス名もパターンと一致します。例えば、パターン「 &lt;code&gt;foo*bar&lt;/code&gt; 」マッチ「 &lt;code&gt;fooasdfbar&lt;/code&gt; 」と「 &lt;code&gt;foo/bar/baz/asdf&lt;/code&gt; 」ではなく「 &lt;code&gt;foobarx&lt;/code&gt; 」。</target>
        </trans-unit>
        <trans-unit id="fb013761be8ab363fba21719f323aaadcbd3ba0f" translate="yes" xml:space="preserve">
          <source>Patterns read from &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; から読み取ったパターン。</target>
        </trans-unit>
        <trans-unit id="6698f9ee7644a05337be6a499b35a3dc93d5c62b" translate="yes" xml:space="preserve">
          <source>Patterns read from a &lt;code&gt;.gitignore&lt;/code&gt; file in the same directory as the path, or in any parent directory, with patterns in the higher level files (up to the toplevel of the work tree) being overridden by those in lower level files down to the directory containing the file. These patterns match relative to the location of the &lt;code&gt;.gitignore&lt;/code&gt; file. A project normally includes such &lt;code&gt;.gitignore&lt;/code&gt; files in its repository, containing patterns for files generated as part of the project build.</source>
          <target state="translated">パスと同じディレクトリまたは任意の親ディレクトリにある &lt;code&gt;.gitignore&lt;/code&gt; ファイルから読み取られたパターン。上位レベルのファイル（作業ツリーの最上位レベルまで）のパターンは、下位のディレクトリのファイルにあるパターンによって上書きされます。ファイルを含みます。これらのパターンは、 &lt;code&gt;.gitignore&lt;/code&gt; ファイルの場所に対して相対的に一致します。プロジェクトは通常、リポジトリにそのような &lt;code&gt;.gitignore&lt;/code&gt; ファイルを含み、プロジェクトビルドの一部として生成されたファイルのパターンを含みます。</target>
        </trans-unit>
        <trans-unit id="36ee091d7bc3859a1b36e4f946f23e3881e4ee18" translate="yes" xml:space="preserve">
          <source>Patterns read from the command line for those commands that support them.</source>
          <target state="translated">サポートしているコマンドのためにコマンドラインから読み込んだパターン。</target>
        </trans-unit>
        <trans-unit id="eafc03d17e54d88cb802971c79de6de883bd2e33" translate="yes" xml:space="preserve">
          <source>Patterns read from the file specified by the configuration variable &lt;code&gt;core.excludesFile&lt;/code&gt;.</source>
          <target state="translated">構成変数 &lt;code&gt;core.excludesFile&lt;/code&gt; で指定されたファイルから読み取られたパターン。</target>
        </trans-unit>
        <trans-unit id="3d5b457ce32a5c844bdd2578141f772cb2dfe28f" translate="yes" xml:space="preserve">
          <source>Patterns which a user wants Git to ignore in all situations (e.g., backup or temporary files generated by the user&amp;rsquo;s editor of choice) generally go into a file specified by &lt;code&gt;core.excludesFile&lt;/code&gt; in the user&amp;rsquo;s &lt;code&gt;~/.gitconfig&lt;/code&gt;. Its default value is $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore is used instead.</source>
          <target state="translated">ユーザーがGitにすべての状況で無視してほしいパターン（たとえば、ユーザーの選択したエディターによって生成されたバックアップファイルまたは一時ファイル）は、通常、ユーザーの &lt;code&gt;~/.gitconfig&lt;/code&gt; の &lt;code&gt;core.excludesFile&lt;/code&gt; で指定されたファイルに入ります。そのデフォルト値は$ XDG_CONFIG_HOME / git / ignoreです。$ XDG_CONFIG_HOMEが設定されていないか空の場合、代わりに$ HOME / .config / git / ignoreが使用されます。</target>
        </trans-unit>
        <trans-unit id="5587255035843df5d5295452dbedab67822586cc" translate="yes" xml:space="preserve">
          <source>Patterns which are specific to a particular repository but which do not need to be shared with other related repositories (e.g., auxiliary files that live inside the repository but are specific to one user&amp;rsquo;s workflow) should go into the &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; file.</source>
          <target state="translated">特定のリポジトリに固有であるが、他の関連リポジトリと共有する必要がないパターン（たとえば、リポジトリ内に存在するが、1人のユーザーのワークフローに固有である補助ファイル）は、 &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; ファイルに入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="97235836632b1fb86b67505c96cba9f6f391329a" translate="yes" xml:space="preserve">
          <source>Patterns which should be version-controlled and distributed to other repositories via clone (i.e., files that all developers will want to ignore) should go into a &lt;code&gt;.gitignore&lt;/code&gt; file.</source>
          <target state="translated">バージョン管理され、クローンを介して他のリポジトリに配布されるパターン（つまり、すべての開発者が無視するファイル）は、 &lt;code&gt;.gitignore&lt;/code&gt; ファイルに入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="74e957861d59dc180f4938a7e5cbcccc25f5a3ea" translate="yes" xml:space="preserve">
          <source>Patterns will normally need quoting.</source>
          <target state="translated">パターンは通常引用が必要です。</target>
        </trans-unit>
        <trans-unit id="df5e4a7c782200671a0c551a8ae8bde4cbfd4554" translate="yes" xml:space="preserve">
          <source>Peek at a remote&amp;rsquo;s branch, without configuring the remote in your local repository:</source>
          <target state="translated">ローカルリポジトリでリモートを構成せずに、リモートのブランチを覗く：</target>
        </trans-unit>
        <trans-unit id="2eee9784312fca59a15483a1887af3e9d7aeb47b" translate="yes" xml:space="preserve">
          <source>People needing to do actual development will also want to read &lt;a href=&quot;#Developing-With-git&quot;&gt;Developing with Git&lt;/a&gt; and &lt;a href=&quot;#sharing-development&quot;&gt;Sharing development with others&lt;/a&gt;.</source>
          <target state="translated">実際の開発を行う必要がある人は&lt;a href=&quot;#Developing-With-git&quot;&gt;、「Git&lt;/a&gt;を使用した&lt;a href=&quot;#sharing-development&quot;&gt;開発」&lt;/a&gt;および「他の人との開発の共有」も読んでください。</target>
        </trans-unit>
        <trans-unit id="d16acfd9d0006fc21d168918fe3efc81d8650072" translate="yes" xml:space="preserve">
          <source>People who play the &lt;a href=&quot;#INTEGRATOR&quot;&gt;Integrator&lt;/a&gt; role need to learn some more commands in addition to the above.</source>
          <target state="translated">&lt;a href=&quot;#INTEGRATOR&quot;&gt;インテグレーターの&lt;/a&gt;役割を果たしている人々は、上記に加えていくつかのより多くのコマンドを学ぶ必要があります。</target>
        </trans-unit>
        <trans-unit id="48b4677fc2e9a16153ae455818d81437374385ab" translate="yes" xml:space="preserve">
          <source>Per-repository gitweb configuration</source>
          <target state="translated">リポジトリごとの gitweb の設定</target>
        </trans-unit>
        <trans-unit id="a457d6f200ccaae5acadefc147a0317025017a2f" translate="yes" xml:space="preserve">
          <source>Perforce keeps the encoding of a path as given by the originating OS. Git expects paths encoded as UTF-8. Use this config to tell git-p4 what encoding Perforce had used for the paths. This encoding is used to transcode the paths to UTF-8. As an example, Perforce on Windows often uses &quot;cp1252&quot; to encode path names.</source>
          <target state="translated">Perforce は、パスのエンコーディングを元の OS から与えられたものとして保持します。Git は UTF-8 でエンコードされたパスを想定しています。この config を使用して、Perforce がパスに使用したエンコーディングを git-p4 に伝えます。このエンコーディングは、パスを UTF-8 にトランスコードするために使われます。たとえば、Windows 上の Perforce はよく &quot;cp1252&quot; を使ってパス名をエンコードしています。</target>
        </trans-unit>
        <trans-unit id="03b8553af827c912cedc4f1a54e56b3f62407825" translate="yes" xml:space="preserve">
          <source>Perform a bare clone. See &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt;.</source>
          <target state="translated">ベアクローンを実行します。&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4d72b7a492b7bd341e81ed1aa91cf43a8cb1b23e" translate="yes" xml:space="preserve">
          <source>Perform a merge, not just a read. The command will refuse to run if your index file has unmerged entries, indicating that you have not finished previous merge you started.</source>
          <target state="translated">単なる読み込みではなく、マージを実行してください。インデックスファイルにマージされていないエントリがある場合、このコマンドは実行を拒否します。</target>
        </trans-unit>
        <trans-unit id="eccacfa088a41a325854fbfce829a88ff14b78ec" translate="yes" xml:space="preserve">
          <source>Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt;) in the log message before showing it in the output. &lt;code&gt;--expand-tabs&lt;/code&gt; is a short-hand for &lt;code&gt;--expand-tabs=8&lt;/code&gt;, and &lt;code&gt;--no-expand-tabs&lt;/code&gt; is a short-hand for &lt;code&gt;--expand-tabs=0&lt;/code&gt;, which disables tab expansion.</source>
          <target state="translated">出力に表示する前に、ログメッセージでタブ展開（各タブを &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; の倍数である次の表示列に入力するのに十分なスペースで置き換えます）を実行します。 &lt;code&gt;--expand-tabs&lt;/code&gt; ショートハンドで &lt;code&gt;--expand-tabs=8&lt;/code&gt; 、及び &lt;code&gt;--no-expand-tabs&lt;/code&gt; ショートハンドで &lt;code&gt;--expand-tabs=0&lt;/code&gt; タブ拡張を無効にし、。</target>
        </trans-unit>
        <trans-unit id="6fe3dd23120fae0b6c8f1955f52c35dc123f3355" translate="yes" xml:space="preserve">
          <source>Perform move and/or copy detection, as described in the &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt; manual page, and use it to generate rename and copy commands in the output dump.</source>
          <target state="translated">&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]の&lt;/a&gt;マニュアルページで説明されているように、移動および/またはコピーの検出を実行し、それを使用して出力ダンプに名前変更およびコピーコマンドを生成します。</target>
        </trans-unit>
        <trans-unit id="567ab62415c3403908dcc89e62181367d58a1292" translate="yes" xml:space="preserve">
          <source>Perform only a single read-write cycle with stdin and stdout. This fits with the HTTP POST request processing model where a program may read the request, write a response, and must exit.</source>
          <target state="translated">stdin と stdout を使用して、単一の読み書きサイクルのみを実行します。これは、プログラムがリクエストを読み込んでレスポンスを書き、終了しなければならない HTTP POST リクエスト処理モデルに適合します。</target>
        </trans-unit>
        <trans-unit id="41e22f08445cd4ffeacb1dbe66209f768caca3d4" translate="yes" xml:space="preserve">
          <source>Perform sanity checks on patches. Currently, validation means the following:</source>
          <target state="translated">パッチのサニティチェックを行う。現在のところ、バリデーションとは以下のことを意味します。</target>
        </trans-unit>
        <trans-unit id="5dd19cbcd38d018175e7d4b32fed6afd6bedcbe4" translate="yes" xml:space="preserve">
          <source>Perform the merge and commit the result. This option can be used to override --no-commit.</source>
          <target state="translated">マージを実行し、結果をコミットします。このオプションは --no-commit をオーバーライドするために使用できます。</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="7b942adfd148d1f49e5f455e2928985f17ee890d" translate="yes" xml:space="preserve">
          <source>Performance and Compression Tuning</source>
          <target state="translated">パフォーマンスとコンプレッションのチューニング</target>
        </trans-unit>
        <trans-unit id="9848b9866799244495cf3924e3205cf2b3c1519c" translate="yes" xml:space="preserve">
          <source>Performing a three-way merge</source>
          <target state="translated">3 者間マージの実行</target>
        </trans-unit>
        <trans-unit id="c7a1bc80737fe18d499952e507805c3eb4a06cbb" translate="yes" xml:space="preserve">
          <source>Performing text diffs of binary files</source>
          <target state="translated">バイナリファイルのテキスト差分の実行</target>
        </trans-unit>
        <trans-unit id="eefd6fa4d473259c02ba61e1f0886b5b36cd638b" translate="yes" xml:space="preserve">
          <source>Pick &lt;code&gt;HEAD&lt;/code&gt; when it asks what branch/tag to check out. Untick the &quot;launch commit wizard&quot; to avoid committing the .project file.</source>
          <target state="translated">チェックアウトするブランチ/タグを尋ねられたら、 &lt;code&gt;HEAD&lt;/code&gt; を選択します。.projectファイルをコミットしないようにするには、「起動コミットウィザード」のチェックを外します。</target>
        </trans-unit>
        <trans-unit id="84307347f945f7519a1053bc099c7c72668957a6" translate="yes" xml:space="preserve">
          <source>Pick out and massage parameters</source>
          <target state="translated">ピックアップとマッサージパラメータ</target>
        </trans-unit>
        <trans-unit id="6fcb3939990224a308d3440baf7b583ff2b6b3d4" translate="yes" xml:space="preserve">
          <source>Pipe all output into &lt;code&gt;less&lt;/code&gt; (or if set, $PAGER) if standard output is a terminal. This overrides the &lt;code&gt;pager.&amp;lt;cmd&amp;gt;&lt;/code&gt; configuration options (see the &quot;Configuration Mechanism&quot; section below).</source>
          <target state="translated">標準出力が端末の場合、すべての出力を &lt;code&gt;less&lt;/code&gt; （または設定されている場合は$ PAGER）にパイプします。これは、 &lt;code&gt;pager.&amp;lt;cmd&amp;gt;&lt;/code&gt; 構成オプションをオーバーライドします（以下の「構成メカニズム」セクションを参照）。</target>
        </trans-unit>
        <trans-unit id="cbb76042b365f8d09d0e51150e4e490e9d51908c" translate="yes" xml:space="preserve">
          <source>Pitfalls with submodules</source>
          <target state="translated">サブモジュールの落とし穴</target>
        </trans-unit>
        <trans-unit id="9bdaaf18e8d137e15a223b206babd14884c750c4" translate="yes" xml:space="preserve">
          <source>Placeholders that affect formatting of later placeholders:</source>
          <target state="translated">後のプレースホルダの書式設定に影響を与えるプレースホルダ。</target>
        </trans-unit>
        <trans-unit id="ac211ac96ed9534ab58287056fd17e14f5f3e99f" translate="yes" xml:space="preserve">
          <source>Placeholders that expand to a single literal character:</source>
          <target state="translated">1文字のリテラルに展開するプレースホルダ。</target>
        </trans-unit>
        <trans-unit id="d70cc19bb51191879a6f88620cd832b063255806" translate="yes" xml:space="preserve">
          <source>Placeholders that expand to information extracted from the commit:</source>
          <target state="translated">コミットから抽出した情報に展開するプレースホルダ。</target>
        </trans-unit>
        <trans-unit id="a17341864ca5844ed689cbcc0e99aa3136fe86e9" translate="yes" xml:space="preserve">
          <source>Placing a &lt;code&gt;progress&lt;/code&gt; command immediately after a &lt;code&gt;checkpoint&lt;/code&gt; will inform the reader when the &lt;code&gt;checkpoint&lt;/code&gt; has been completed and it can safely access the refs that fast-import updated.</source>
          <target state="translated">&lt;code&gt;checkpoint&lt;/code&gt; 直後に &lt;code&gt;progress&lt;/code&gt; コマンドを配置すると、 &lt;code&gt;checkpoint&lt;/code&gt; が完了したときにリーダーに通知され、高速インポートが更新した参照に安全にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="29d132c8dca94eedc4761b19f4e56a63b7eb3b41" translate="yes" xml:space="preserve">
          <source>Please note that these range notation can be used with both gitk and &quot;git log&quot;.</source>
          <target state="translated">これらの範囲表記はgitkでも「git log」でも使えますのでご注意ください。</target>
        </trans-unit>
        <trans-unit id="a872f84e7510205bc273ea7f3487281d6e0b57f1" translate="yes" xml:space="preserve">
          <source>Please note that using the &lt;code&gt;working-tree-encoding&lt;/code&gt; attribute may have a number of pitfalls:</source>
          <target state="translated">&lt;code&gt;working-tree-encoding&lt;/code&gt; 属性を使用すると、いくつかの落とし穴がある可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="cddad527343fcd5e5d11ccf1bbf7e571af789394" translate="yes" xml:space="preserve">
          <source>Please note that you cannot use an existing &lt;code&gt;filter.&amp;lt;driver&amp;gt;.clean&lt;/code&gt; or &lt;code&gt;filter.&amp;lt;driver&amp;gt;.smudge&lt;/code&gt; command with &lt;code&gt;filter.&amp;lt;driver&amp;gt;.process&lt;/code&gt; because the former two use a different inter process communication protocol than the latter one.</source>
          <target state="translated">前者の2つは後者のものとは異なるプロセス間通信プロトコルを使用するため、既存の &lt;code&gt;filter.&amp;lt;driver&amp;gt;.clean&lt;/code&gt; または &lt;code&gt;filter.&amp;lt;driver&amp;gt;.smudge&lt;/code&gt; コマンドと &lt;code&gt;filter.&amp;lt;driver&amp;gt;.process&lt;/code&gt; は使用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c888d4a15197bdd365e37f0125b6b805c57d4e97" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;a href=&quot;mailto:git@vger.kernel.org&quot;&gt;git@vger.kernel.org&lt;/a&gt;, putting &quot;gitweb&quot; in the subject of email.</source>
          <target state="translated">バグや機能のリクエストは&lt;a href=&quot;mailto:git@vger.kernel.org&quot;&gt;git@vger.kernel.org&lt;/a&gt;に報告し、電子メールの件名に「gitweb」を入れてください。</target>
        </trans-unit>
        <trans-unit id="f21025df43e0479e4864841eab47e70f94cac837" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for alternative ways to add content to a commit.</source>
          <target state="translated">&lt;a href=&quot;git-commit&quot;&gt;コミット&lt;/a&gt;にコンテンツを追加する別の方法については、git-commit [1]を参照してください。</target>
        </trans-unit>
        <trans-unit id="0aae3fa8eecc17be69c8d9ed6207c5a978bd3a01" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;gitglossary&quot;&gt;gitglossary[7]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;gitglossary&quot;&gt;gitglossary [7]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3f7f1dd4c4366b63a145049cec2f6258fda24d83" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout[5]&lt;/a&gt; document.</source>
          <target state="translated">&lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout [5]&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="9a1b79b9af4861f2750548663461bdd94c841127" translate="yes" xml:space="preserve">
          <source>Plumbing Commands</source>
          <target state="translated">配管コマンド</target>
        </trans-unit>
        <trans-unit id="dec39f942885f611a23f70c734d12d63a6e011e1" translate="yes" xml:space="preserve">
          <source>Points to the location where you put &lt;code&gt;git-favicon.png&lt;/code&gt; on your web server, or to be more the generic URI of favicon, which will be served as &quot;image/png&quot; type. Web browsers that support favicons (website icons) may display them in the browser&amp;rsquo;s URL bar and next to the site name in bookmarks. Relative to the base URI of gitweb. Can be adjusted at build time using &lt;code&gt;GITWEB_FAVICON&lt;/code&gt; variable. By default set to &lt;code&gt;static/git-favicon.png&lt;/code&gt;.</source>
          <target state="translated">ウェブサーバー上で &lt;code&gt;git-favicon.png&lt;/code&gt; を配置する場所、または「image / png」タイプとして提供されるファビコンの汎用URIを指します。ファビコン（Webサイトアイコン）をサポートするWebブラウザは、ブラウザのURLバーとブックマークのサイト名の横にそれらを表示する場合があります。 gitwebのベースURIを基準にしています。ビルド時に &lt;code&gt;GITWEB_FAVICON&lt;/code&gt; 変数を使用して調整できます。デフォルトでは &lt;code&gt;static/git-favicon.png&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="2a40c85c88d228670d36d1d2ec3cd1298a4f0842" translate="yes" xml:space="preserve">
          <source>Points to the location where you put &lt;code&gt;git-logo.png&lt;/code&gt; on your web server, or to be more the generic URI of logo, 72x27 size). This image is displayed in the top right corner of each gitweb page and used as a logo for the Atom feed. Relative to the base URI of gitweb (as a path). Can be adjusted when building gitweb using &lt;code&gt;GITWEB_LOGO&lt;/code&gt; variable By default set to &lt;code&gt;static/git-logo.png&lt;/code&gt;.</source>
          <target state="translated">ウェブサーバー上で &lt;code&gt;git-logo.png&lt;/code&gt; を配置する場所を指すか、ロゴの汎用URI（72x27サイズ）を指します）。この画像は各gitwebページの右上隅に表示され、Atomフィードのロゴとして使用されます。gitwebのベースURIを基準にして（パスとして）。 &lt;code&gt;GITWEB_LOGO&lt;/code&gt; 変数を使用してgitwebをビルドするときに調整できます。デフォルトでは &lt;code&gt;static/git-logo.png&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="9efd93f849deab28e0c41b0eba10b16f24a27c09" translate="yes" xml:space="preserve">
          <source>Points to the location where you put &lt;code&gt;gitweb.js&lt;/code&gt; on your web server, or to be more generic the URI of JavaScript code used by gitweb. Relative to the base URI of gitweb. Can be set at build time using the &lt;code&gt;GITWEB_JS&lt;/code&gt; build-time configuration variable.</source>
          <target state="translated">&lt;code&gt;gitweb.js&lt;/code&gt; をWebサーバーに配置する場所、またはより一般的にはgitwebで使用されるJavaScriptコードのURIを指します。gitwebのベースURIを基準にしています。ビルド時に &lt;code&gt;GITWEB_JS&lt;/code&gt; ビルド時構成変数を使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="dd1dad0df44ac8f0bb40744bffd4b05eb8a096a6" translate="yes" xml:space="preserve">
          <source>Populating a git repository</source>
          <target state="translated">git リポジトリを投入する</target>
        </trans-unit>
        <trans-unit id="4cbb689daa97a321dd935e9f85d305871f823e3a" translate="yes" xml:space="preserve">
          <source>Porcelain Format</source>
          <target state="translated">磁器の形式</target>
        </trans-unit>
        <trans-unit id="7ed7cead662f9f179a2456c29bfdc5633f939f7a" translate="yes" xml:space="preserve">
          <source>Porcelain Format Version 1</source>
          <target state="translated">ポーセリンフォーマットバージョン1</target>
        </trans-unit>
        <trans-unit id="10c9d2c56f0a79c71fe3af29b00f0a78804206c5" translate="yes" xml:space="preserve">
          <source>Porcelain Format Version 2</source>
          <target state="translated">ポーセリンフォーマットバージョン2</target>
        </trans-unit>
        <trans-unit id="f0ec9d0a213551004afb541fee3084e09f53878a" translate="yes" xml:space="preserve">
          <source>Port number (e.g., &lt;code&gt;8080&lt;/code&gt; in &lt;code&gt;http://example.com:8080/&lt;/code&gt;). This field must match exactly between the config key and the URL. Omitted port numbers are automatically converted to the correct default for the scheme before matching.</source>
          <target state="translated">（例えば、ポート番号 &lt;code&gt;8080&lt;/code&gt; で &lt;code&gt;http://example.com:8080/&lt;/code&gt; ）。このフィールドは、構成キーとURLの間で正確に一致する必要があります。省略されたポート番号は、照合する前にスキームの正しいデフォルトに自動的に変換されます。</target>
        </trans-unit>
        <trans-unit id="75288f00d3cca5affbead93289ac710b7d804777" translate="yes" xml:space="preserve">
          <source>Port specified as an option to all p4 commands, with &lt;code&gt;-p &amp;lt;port&amp;gt;&lt;/code&gt;. The environment variable &lt;code&gt;P4PORT&lt;/code&gt; can be used instead.</source>
          <target state="translated">&lt;code&gt;-p &amp;lt;port&amp;gt;&lt;/code&gt; を使用して、すべてのp4コマンドのオプションとして指定されたポート。代わりに、環境変数 &lt;code&gt;P4PORT&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="d03006f15a6deece98761a569d6fb9a550c11064" translate="yes" xml:space="preserve">
          <source>Possible status letters are:</source>
          <target state="translated">考えられるステータスレターは</target>
        </trans-unit>
        <trans-unit id="2e4db4c63c7f46787206b1d1234a6ef557d7a11f" translate="yes" xml:space="preserve">
          <source>Post-receive hook</source>
          <target state="translated">ポストレシーブフック</target>
        </trans-unit>
        <trans-unit id="bfc66b933494b39d9139ca2f875fbedec7e5e101" translate="yes" xml:space="preserve">
          <source>Post-update hook</source>
          <target state="translated">更新後のフック</target>
        </trans-unit>
        <trans-unit id="f94b267b37a51057882021d23cd86eedc7aa6025" translate="yes" xml:space="preserve">
          <source>Pre-merge checks</source>
          <target state="translated">プレマージチェック</target>
        </trans-unit>
        <trans-unit id="b3efe66caa7433d78cc0ca460492b30524a4fffe" translate="yes" xml:space="preserve">
          <source>Pre-receive hook</source>
          <target state="translated">プリレシーブフック</target>
        </trans-unit>
        <trans-unit id="78240cc944ed7959bc15c94695f728eafb8fe296" translate="yes" xml:space="preserve">
          <source>Prefer to use &lt;code&gt;git svn rebase&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt;, rather than &lt;code&gt;git pull&lt;/code&gt; or &lt;code&gt;git merge&lt;/code&gt; to synchronize unintegrated commits with a &lt;code&gt;git svn&lt;/code&gt; branch. Doing so will keep the history of unintegrated commits linear with respect to the upstream SVN repository and allow the use of the preferred &lt;code&gt;git svn dcommit&lt;/code&gt; subcommand to push unintegrated commits back into SVN.</source>
          <target state="translated">統合されていないコミットを &lt;code&gt;git svn&lt;/code&gt; ブランチと同期するには、 &lt;code&gt;git pull&lt;/code&gt; または &lt;code&gt;git merge&lt;/code&gt; ではなく、 &lt;code&gt;git svn rebase&lt;/code&gt; または &lt;code&gt;git rebase&lt;/code&gt; を使用することをお勧めします。そうすることで、統合されていないコミットの履歴を上流のSVNリポジトリに対して線形に保ち、優先される &lt;code&gt;git svn dcommit&lt;/code&gt; サブコマンドを使用して、統合されていないコミットをSVNに戻すことができます。</target>
        </trans-unit>
        <trans-unit id="7858ef8a3e54ce180319d79ebe56992e0e058c1d" translate="yes" xml:space="preserve">
          <source>Prefix the 1-indexed byte-offset of the first match from the start of the matching line.</source>
          <target state="translated">マッチング行の先頭から最初のマッチの1インデックスのバイトオフセットを接頭辞にします。</target>
        </trans-unit>
        <trans-unit id="f98eece57f5c0c3847ca98d0dc9e3916d907af8e" translate="yes" xml:space="preserve">
          <source>Prefix the line number to matching lines.</source>
          <target state="translated">一致する行には行番号を先頭に付けます。</target>
        </trans-unit>
        <trans-unit id="cba9c5d09c8d367bd67d9492c7466ff20503c458" translate="yes" xml:space="preserve">
          <source>Prepare a public repository accessible to others, just like the &quot;project lead&quot; person does.</source>
          <target state="translated">プロジェクトリーダー」の人がするように、他の人がアクセスできる公開リポジトリを用意しましょう。</target>
        </trans-unit>
        <trans-unit id="2a7490f3f599e93e81fac551095363496940e575" translate="yes" xml:space="preserve">
          <source>Prepare a public repository accessible to others.</source>
          <target state="translated">他の人がアクセスできる公開リポジトリを用意する。</target>
        </trans-unit>
        <trans-unit id="f3c2eb8e7f45787546457741123fe87f7a0f8282" translate="yes" xml:space="preserve">
          <source>Prepare each commit with its patch in one file per commit, formatted to resemble UNIX mailbox format. The output of this command is convenient for e-mail submission or for use with &lt;code&gt;git am&lt;/code&gt;.</source>
          <target state="translated">UNIXメールボックス形式に似たフォーマットの、コミットごとに1つのファイルにパッチを含む各コミットを準備します。このコマンドの出力は、電子メールの送信や &lt;code&gt;git am&lt;/code&gt; での使用に便利です。</target>
        </trans-unit>
        <trans-unit id="5bf024f30d7d353a4bfdcd90569f916ebb19100a" translate="yes" xml:space="preserve">
          <source>Prepare patches for e-mail submission</source>
          <target state="translated">メール送信用のパッチを準備する</target>
        </trans-unit>
        <trans-unit id="a8276d8a28067c8245d05a67d9e202424a88780d" translate="yes" xml:space="preserve">
          <source>Prepare patches from the topmost &amp;lt;n&amp;gt; commits.</source>
          <target state="translated">最上位の&amp;lt;n&amp;gt;コミットからパッチを準備します。</target>
        </trans-unit>
        <trans-unit id="99740b269904a01f8762ffe4e520b6b559ecd506" translate="yes" xml:space="preserve">
          <source>Prepare the patch as a text file using your method of choice.</source>
          <target state="translated">お好みの方法でパッチをテキストファイルとして準備します。</target>
        </trans-unit>
        <trans-unit id="f5c02726894a93a50b6991465d16de430338896a" translate="yes" xml:space="preserve">
          <source>Prepare the patch as a text file.</source>
          <target state="translated">パッチをテキストファイルとして用意します。</target>
        </trans-unit>
        <trans-unit id="5fdffb29f622a40bb487926aa05bf2c00b010193" translate="yes" xml:space="preserve">
          <source>Prepare to work on top of &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;, by detaching &lt;code&gt;HEAD&lt;/code&gt; at it (see &quot;DETACHED HEAD&quot; section), and updating the index and the files in the working tree. Local modifications to the files in the working tree are kept, so that the resulting working tree will be the state recorded in the commit plus the local modifications.</source>
          <target state="translated">&lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; の上で &lt;code&gt;HEAD&lt;/code&gt; を切り離し（「デタッチされたヘッド」のセクションを参照）、作業ツリーのインデックスとファイルを更新することで、作業の準備をします。作業ツリー内のファイルへのローカル変更は保持されるため、結果の作業ツリーは、コミットに記録された状態に加えてローカル変更になります。</target>
        </trans-unit>
        <trans-unit id="f2f7b858e8531ffd309df8bd0107db9d4a088dc3" translate="yes" xml:space="preserve">
          <source>Prepare your primary repository on your local machine. Your work is done there.</source>
          <target state="translated">ローカルマシンにプライマリリポジトリを準備します。あなたの作業はそこで行われます。</target>
        </trans-unit>
        <trans-unit id="6351b7119828a745613d6b91f6668ddb5c9afa30" translate="yes" xml:space="preserve">
          <source>Prepare your work repository, by &lt;code&gt;git clone&lt;/code&gt; the public repository of the &quot;project lead&quot; (or a &quot;subsystem maintainer&quot;, if you work on a subsystem). The URL used for the initial cloning is stored in the remote.origin.url configuration variable.</source>
          <target state="translated">「プロジェクトリーダー」（またはサブシステムで作業している場合は「サブシステムメンテナ」）のパブリックリポジトリを &lt;code&gt;git clone&lt;/code&gt; して、作業リポジトリを準備します。最初の複製に使用されるURLは、remote.origin.url構成変数に保管されます。</target>
        </trans-unit>
        <trans-unit id="ab02c2194a1b4abbc5e110578e0e0c5797b11598" translate="yes" xml:space="preserve">
          <source>Prepare your work repository, by running &lt;code&gt;git clone&lt;/code&gt; on the public repository of the &quot;project lead&quot;. The URL used for the initial cloning is stored in the remote.origin.url configuration variable.</source>
          <target state="translated">「プロジェクトリーダー」のパブリックリポジトリで &lt;code&gt;git clone&lt;/code&gt; を実行して、作業リポジトリを準備します。最初の複製に使用されるURLは、remote.origin.url構成変数に保管されます。</target>
        </trans-unit>
        <trans-unit id="8d8f6ddbe39b836164638d60534dc0f8ce8c98b4" translate="yes" xml:space="preserve">
          <source>Prepend &amp;lt;path&amp;gt; to paths printed in informative messages such as &quot;Fetching submodule foo&quot;. This option is used internally when recursing over submodules.</source>
          <target state="translated">「Fetching submodule foo」などの情報メッセージで出力されるパスの前に&amp;lt;path&amp;gt;を追加します。このオプションは、サブモジュールを再帰的に実行するときに内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="0d9e5ac62ee99d055177c6a4f95d4b7fe25a63a3" translate="yes" xml:space="preserve">
          <source>Prepend &amp;lt;prefix&amp;gt;/ to each filename in the archive.</source>
          <target state="translated">アーカイブの各ファイル名に&amp;lt;prefix&amp;gt; /を付加します。</target>
        </trans-unit>
        <trans-unit id="a1528f0aff1e31c1f36c8998ca335269e9595dd6" translate="yes" xml:space="preserve">
          <source>Prepend &amp;lt;root&amp;gt; to all filenames. If a &quot;-p&quot; argument was also passed, it is applied before prepending the new root.</source>
          <target state="translated">すべてのファイル名の前に&amp;lt;root&amp;gt;を付加します。「-p」引数も渡された場合は、新しいルートを付加する前に適用されます。</target>
        </trans-unit>
        <trans-unit id="04fbe49467d421955780154f308daccbf9dcf57a" translate="yes" xml:space="preserve">
          <source>Prepend &lt;code&gt;path&lt;/code&gt; to requested CVSROOT</source>
          <target state="translated">前に付加 &lt;code&gt;path&lt;/code&gt; 要求されたCVSROOTへ</target>
        </trans-unit>
        <trans-unit id="0347b26685846c1b1d2b4efcd87239056762e453" translate="yes" xml:space="preserve">
          <source>Prepend an additional prefix to every line of output.</source>
          <target state="translated">出力の各行に追加の接頭辞を付加します。</target>
        </trans-unit>
        <trans-unit id="965630002ec8181b6c5811ecd432fedf5278178d" translate="yes" xml:space="preserve">
          <source>Prepend comment character and blank to each line. Lines will automatically be terminated with a newline. On empty lines, only the comment character will be prepended.</source>
          <target state="translated">各行にコメント文字とブランクを前置してください。行は自動的に改行で終了します。空行には、コメント文字のみが付加されます。</target>
        </trans-unit>
        <trans-unit id="f16c17f5481a4b7eaab0eba6f32fe3b9bdb77e0a" translate="yes" xml:space="preserve">
          <source>Prepend the commit message with the provided prefix. Useful for patch series and the like.</source>
          <target state="translated">コミットメッセージに指定された接頭辞を付加します。パッチシリーズなどに便利です。</target>
        </trans-unit>
        <trans-unit id="1cb847e80ec2973659a3bc43c24ba721cccfc0b9" translate="yes" xml:space="preserve">
          <source>Pretend as if all objects mentioned as ref tips of alternate repositories were listed on the command line. An alternate repository is any repository whose object directory is specified in &lt;code&gt;objects/info/alternates&lt;/code&gt;. The set of included objects may be modified by &lt;code&gt;core.alternateRefsCommand&lt;/code&gt;, etc. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">代替リポジトリーの参照ヒントとして言及されたすべてのオブジェクトがコマンドラインにリストされているかのように見せかけます。代替リポジトリは、オブジェクトディレクトリが &lt;code&gt;objects/info/alternates&lt;/code&gt; で指定されているリポジトリです。含まれるオブジェクトのセットは、 &lt;code&gt;core.alternateRefsCommand&lt;/code&gt; などによって変更できます。git &lt;a href=&quot;git-config&quot;&gt;-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d8790db7464ad43dc2580493a3a2b7fe9009b3b8" translate="yes" xml:space="preserve">
          <source>Pretend as if all objects mentioned by reflogs are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">reflogsによって言及されたすべてのオブジェクトがコマンドラインに &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; としてリストされているかのように見せかけます。</target>
        </trans-unit>
        <trans-unit id="1bc40db9cd0077507e159c30d2cc8ff273e4cf52" translate="yes" xml:space="preserve">
          <source>Pretend as if all the branches (tags, remote branches, resp.) are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; is given, limit refs to ones matching given shell glob. If pattern lacks &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;/*&lt;/code&gt; at the end is implied.</source>
          <target state="translated">すべてのブランチ（タグ、リモートブランチなど）がコマンドラインに &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; としてリストされているかのように見せかけます。 &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; が指定されている場合、参照を指定のシェルグロブに一致するものに制限します。パターンが足りない場合は &lt;code&gt;?&lt;/code&gt; 末尾の、 &lt;code&gt;*&lt;/code&gt; 、または &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;/*&lt;/code&gt; は暗示されます。</target>
        </trans-unit>
        <trans-unit id="a40d3b9ce3a70471c04394220cc5bbfab2baa7f5" translate="yes" xml:space="preserve">
          <source>Pretend as if all the refs in &lt;code&gt;refs/&lt;/code&gt;, along with &lt;code&gt;HEAD&lt;/code&gt;, are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HEAD&lt;/code&gt; とともに、 &lt;code&gt;refs/&lt;/code&gt; 内のすべての参照がコマンドラインに &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; としてリストされているかのように見せかけます。</target>
        </trans-unit>
        <trans-unit id="1435ebeededb24db5ecef4374cafc152c655d0c5" translate="yes" xml:space="preserve">
          <source>Pretend as if all the refs in &lt;code&gt;refs/heads&lt;/code&gt; are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; is given, limit branches to ones matching given shell glob. If pattern lacks &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;/*&lt;/code&gt; at the end is implied.</source>
          <target state="translated">&lt;code&gt;refs/heads&lt;/code&gt; 内のすべての参照がコマンドラインに &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; としてリストされているかのように見せかけます。 &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; が指定されている場合、指定されたシェルグロブに一致するブランチに分岐を制限します。パターンが足りない場合は &lt;code&gt;?&lt;/code&gt; 末尾の、 &lt;code&gt;*&lt;/code&gt; 、または &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;/*&lt;/code&gt; は暗示されます。</target>
        </trans-unit>
        <trans-unit id="873bc395593997376453ce378c315180f9e8037d" translate="yes" xml:space="preserve">
          <source>Pretend as if all the refs in &lt;code&gt;refs/remotes&lt;/code&gt; are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; is given, limit remote-tracking branches to ones matching given shell glob. If pattern lacks &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;/*&lt;/code&gt; at the end is implied.</source>
          <target state="translated">&lt;code&gt;refs/remotes&lt;/code&gt; 内のすべての参照がコマンドラインに &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; としてリストされているかのように見せかけます。 &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; が指定されている場合、リモート追跡ブランチを、指定されたシェルグロブに一致するブランチに制限します。パターンが足りない場合は &lt;code&gt;?&lt;/code&gt; 末尾の、 &lt;code&gt;*&lt;/code&gt; 、または &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;/*&lt;/code&gt; は暗示されます。</target>
        </trans-unit>
        <trans-unit id="779811bec709e50bc3c2986dda8163a1984c59e0" translate="yes" xml:space="preserve">
          <source>Pretend as if all the refs in &lt;code&gt;refs/tags&lt;/code&gt; are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; is given, limit tags to ones matching given shell glob. If pattern lacks &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;/*&lt;/code&gt; at the end is implied.</source>
          <target state="translated">&lt;code&gt;refs/tags&lt;/code&gt; 内のすべてのrefがコマンドラインに &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; としてリストされているかのように見せかけます。 &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; が指定されている場合、タグを指定のシェルグロブに一致するものに制限します。パターンが足りない場合は &lt;code&gt;?&lt;/code&gt; 末尾の、 &lt;code&gt;*&lt;/code&gt; 、または &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;/*&lt;/code&gt; は暗示されます。</target>
        </trans-unit>
        <trans-unit id="fd8bdbdeb72b98a3e7d8a71774e4228e25fd4361" translate="yes" xml:space="preserve">
          <source>Pretend as if all the refs matching shell glob &lt;code&gt;&amp;lt;glob-pattern&amp;gt;&lt;/code&gt; are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;. Leading &lt;code&gt;refs/&lt;/code&gt;, is automatically prepended if missing. If pattern lacks &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;/*&lt;/code&gt; at the end is implied.</source>
          <target state="translated">シェルglob &lt;code&gt;&amp;lt;glob-pattern&amp;gt;&lt;/code&gt; に一致するすべての参照がコマンドラインに &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; としてリストされているかのように見せかけます。先頭の &lt;code&gt;refs/&lt;/code&gt; 、欠落している場合は自動的に付加されます。パターンが足りない場合は &lt;code&gt;?&lt;/code&gt; 末尾の、 &lt;code&gt;*&lt;/code&gt; 、または &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;/*&lt;/code&gt; は暗示されます。</target>
        </trans-unit>
        <trans-unit id="46b1cc7966c168f121c45715956556d8413ae7ad" translate="yes" xml:space="preserve">
          <source>Pretend as if all trees and blobs used by the index are listed on the command line. Note that you probably want to use &lt;code&gt;--objects&lt;/code&gt;, too.</source>
          <target state="translated">インデックスによって使用されるすべてのツリーとBLOBがコマンドラインにリストされているかのように見せかけます。おそらく &lt;code&gt;--objects&lt;/code&gt; も使用したいことに注意してください。</target>
        </trans-unit>
        <trans-unit id="cc70d02297620c66f8bef755f564908a1a4698d8" translate="yes" xml:space="preserve">
          <source>Pretend as if the bad bisection ref &lt;code&gt;refs/bisect/bad&lt;/code&gt; was listed and as if it was followed by &lt;code&gt;--not&lt;/code&gt; and the good bisection refs &lt;code&gt;refs/bisect/good-*&lt;/code&gt; on the command line. Cannot be combined with --first-parent.</source>
          <target state="translated">コマンドラインで、不正な二分参照 &lt;code&gt;refs/bisect/bad&lt;/code&gt; がリストされているように &lt;code&gt;--not&lt;/code&gt; 、その後に--notと良好な二分参照 &lt;code&gt;refs/bisect/good-*&lt;/code&gt; good- *が続いているかのように見せかけます。--first-parentと組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="0a3604cb0b2f73cd8456355c098a4f83f14d6060" translate="yes" xml:space="preserve">
          <source>Pretty formats</source>
          <target state="translated">プリティフォーマット</target>
        </trans-unit>
        <trans-unit id="1b76ed128a23a5286f4a7e2538cc00e5737e0416" translate="yes" xml:space="preserve">
          <source>Pretty-print the contents of &amp;lt;object&amp;gt; based on its type.</source>
          <target state="translated">タイプに基づいて&amp;lt;object&amp;gt;の内容をプリティプリントします。</target>
        </trans-unit>
        <trans-unit id="a741501b13f29bc4f4975a183857a345cfe33bda" translate="yes" xml:space="preserve">
          <source>Pretty-print the contents of the commit logs in a given format, where &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; can be one of &lt;code&gt;oneline&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, &lt;code&gt;fuller&lt;/code&gt;, &lt;code&gt;reference&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;raw&lt;/code&gt;, &lt;code&gt;format:&amp;lt;string&amp;gt;&lt;/code&gt; and &lt;code&gt;tformat:&amp;lt;string&amp;gt;&lt;/code&gt;. When &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; is none of the above, and has &lt;code&gt;%placeholder&lt;/code&gt; in it, it acts as if &lt;code&gt;--pretty=tformat:&amp;lt;format&amp;gt;&lt;/code&gt; were given.</source>
          <target state="translated">コミットログの内容を所定の形式できれいに出力します。 &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; は、 &lt;code&gt;oneline&lt;/code&gt; 、 &lt;code&gt;short&lt;/code&gt; 、 &lt;code&gt;medium&lt;/code&gt; 、 &lt;code&gt;full&lt;/code&gt; 、 &lt;code&gt;fuller&lt;/code&gt; 、 &lt;code&gt;reference&lt;/code&gt; 、 &lt;code&gt;email&lt;/code&gt; 、 &lt;code&gt;raw&lt;/code&gt; 、 &lt;code&gt;format:&amp;lt;string&amp;gt;&lt;/code&gt; および &lt;code&gt;tformat:&amp;lt;string&amp;gt;&lt;/code&gt; のいずれかです。場合 &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; 上記のいずれでもない、と有し &lt;code&gt;%placeholder&lt;/code&gt; その中に、それが作用するような場合 &lt;code&gt;--pretty=tformat:&amp;lt;format&amp;gt;&lt;/code&gt; 与えました。</target>
        </trans-unit>
        <trans-unit id="7bd89feebefa381d47a4005ee3e7a70495146fc2" translate="yes" xml:space="preserve">
          <source>Print a list of diff tools that may be used with &lt;code&gt;--tool&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--tool&lt;/code&gt; で使用できるdiffツールのリストを出力します。</target>
        </trans-unit>
        <trans-unit id="4427ae28c9b6c7b34bdd7b24aed9e7c7d30f57b8" translate="yes" xml:space="preserve">
          <source>Print a list of merge tools that may be used with &lt;code&gt;--tool&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--tool&lt;/code&gt; で使用できるマージツールのリストを出力します。</target>
        </trans-unit>
        <trans-unit id="66756bdfb6c604999780ed06815c6e483a2bcdd8" translate="yes" xml:space="preserve">
          <source>Print a log message describing a merge of the &quot;master&quot; branch from the &quot;origin&quot; remote.</source>
          <target state="translated">リモートの &quot;origin&quot; から &quot;master&quot; ブランチのマージを記述したログメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="e170a2249107ead5e4f805939d3f7ece45fff682" translate="yes" xml:space="preserve">
          <source>Print a message to the terminal whenever Git is waiting for editor input from the user.</source>
          <target state="translated">Git がユーザーからのエディタ入力を待っているときに、ターミナルにメッセージを出力します。</target>
        </trans-unit>
        <trans-unit id="8080962c8d32b2cabab8eb19868e6e497af4f4fb" translate="yes" xml:space="preserve">
          <source>Print a number stating how many commits would have been listed, and suppress all other output. When used together with &lt;code&gt;--left-right&lt;/code&gt;, instead print the counts for left and right commits, separated by a tab. When used together with &lt;code&gt;--cherry-mark&lt;/code&gt;, omit patch equivalent commits from these counts and print the count for equivalent commits separated by a tab.</source>
          <target state="translated">リストされたコミットの数を示す数値を出力し、他のすべての出力を抑制します。 &lt;code&gt;--left-right&lt;/code&gt; と一緒に使用すると、代わりに、タブで区切られた左と右のコミットのカウントが出力されます。 &lt;code&gt;--cherry-mark&lt;/code&gt; と一緒に使用すると、パッチの同等のコミットがこれらのカウントから除外され、同等のコミットのカウントがタブで区切られて出力されます。</target>
        </trans-unit>
        <trans-unit id="5c8fe4e870e195a4e0e71c8a37d1ceb1bdba9faa" translate="yes" xml:space="preserve">
          <source>Print a short usage message and exit.</source>
          <target state="translated">短い使用方法のメッセージを印刷して終了します。</target>
        </trans-unit>
        <trans-unit id="1605c83b597410df01a57b6af3b5c08c7935c987" translate="yes" xml:space="preserve">
          <source>Print all commits to the standard output in mbox format, instead of creating a file for each one.</source>
          <target state="translated">それぞれのファイルを作成するのではなく、すべてのコミットをmbox形式で標準出力に出力します。</target>
        </trans-unit>
        <trans-unit id="bb80930a87afbf3e0cd1b6dbc46ac66a79700ef9" translate="yes" xml:space="preserve">
          <source>Print also the children of the commit (in the form &quot;commit child&amp;hellip;​&quot;). Also enables parent rewriting, see &lt;code&gt;History Simplification&lt;/code&gt; above.</source>
          <target state="translated">コミットの子も出力します（「commit child&amp;hellip;」の形式で）。また、親の書き換えを有効にします。上記の &lt;code&gt;History Simplification&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="cd486c8f7fa4f0862a9438df255d9ef58e4cce2f" translate="yes" xml:space="preserve">
          <source>Print also the parents of the commit (in the form &quot;commit parent&amp;hellip;​&quot;). Also enables parent rewriting, see &lt;code&gt;History Simplification&lt;/code&gt; above.</source>
          <target state="translated">コミットの親も出力します（「commit parent&amp;hellip;」の形式で）。また、親の書き換えを有効にします。上記の &lt;code&gt;History Simplification&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="f770a9ba11cec50c667f92df6a9581699d1c849f" translate="yes" xml:space="preserve">
          <source>Print an empty line between matches from different files.</source>
          <target state="translated">異なるファイルからのマッチの間に空行を表示します。</target>
        </trans-unit>
        <trans-unit id="dc6bbcf836701f45b1b031bc09ccba6ceff978b1" translate="yes" xml:space="preserve">
          <source>Print extra information on screen.</source>
          <target state="translated">余分な情報を画面に印刷します。</target>
        </trans-unit>
        <trans-unit id="f77fc6854808124fa4634165848ea2138881c54f" translate="yes" xml:space="preserve">
          <source>Print lines matching a pattern</source>
          <target state="translated">パターンにマッチしたラインを印刷する</target>
        </trans-unit>
        <trans-unit id="6fe4856d75dfab579fe9349a68cc2bed1d0dadcc" translate="yes" xml:space="preserve">
          <source>Print object information and contents for each object provided on stdin. May not be combined with any other options or arguments except &lt;code&gt;--textconv&lt;/code&gt; or &lt;code&gt;--filters&lt;/code&gt;, in which case the input lines also need to specify the path, separated by whitespace. See the section &lt;code&gt;BATCH OUTPUT&lt;/code&gt; below for details.</source>
          <target state="translated">stdinで提供される各オブジェクトのオブジェクト情報と内容を出力します。 &lt;code&gt;--textconv&lt;/code&gt; または &lt;code&gt;--filters&lt;/code&gt; を除く他のオプションや引数と組み合わせることはできません。その場合、入力行でも空白で区切られたパスを指定する必要があります。詳細については、以下の「 &lt;code&gt;BATCH OUTPUT&lt;/code&gt; 」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="ca4d7c5adc217a6aa2342c6778492ad7113796ff" translate="yes" xml:space="preserve">
          <source>Print object information for each object provided on stdin. May not be combined with any other options or arguments except &lt;code&gt;--textconv&lt;/code&gt; or &lt;code&gt;--filters&lt;/code&gt;, in which case the input lines also need to specify the path, separated by whitespace. See the section &lt;code&gt;BATCH OUTPUT&lt;/code&gt; below for details.</source>
          <target state="translated">stdinで提供される各オブジェクトのオブジェクト情報を出力します。 &lt;code&gt;--textconv&lt;/code&gt; または &lt;code&gt;--filters&lt;/code&gt; を除く他のオプションや引数と組み合わせることはできません。その場合、入力行でも空白で区切られたパスを指定する必要があります。詳細については、以下の「 &lt;code&gt;BATCH OUTPUT&lt;/code&gt; 」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="355c9197a67577b10c87d266b1fadda4f338ce43" translate="yes" xml:space="preserve">
          <source>Print objects that exist but that are never &lt;code&gt;directly&lt;/code&gt; used (default). &lt;code&gt;--no-dangling&lt;/code&gt; can be used to omit this information from the output.</source>
          <target state="translated">存在するが &lt;code&gt;directly&lt;/code&gt; 使用されないオブジェクトを印刷します（デフォルト）。 &lt;code&gt;--no-dangling&lt;/code&gt; を使用すると、この情報を出力から除外できます。</target>
        </trans-unit>
        <trans-unit id="2b45348ee53d58a25f5424ead463a255068c26a3" translate="yes" xml:space="preserve">
          <source>Print only merge commits. This is exactly the same as &lt;code&gt;--min-parents=2&lt;/code&gt;.</source>
          <target state="translated">マージコミットのみを出力します。これは &lt;code&gt;--min-parents=2&lt;/code&gt; とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="fba7bfcdde0d986db48ca498619d9372ecc7d2c2" translate="yes" xml:space="preserve">
          <source>Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line.</source>
          <target state="translated">マッチした行のマッチした (空ではない)部分だけを印刷し、そのような部分はそれぞれ別の出力行に出力します。</target>
        </trans-unit>
        <trans-unit id="a0fc3f1d0d97da65e736eae410fad9ae12d5c7be" translate="yes" xml:space="preserve">
          <source>Print out objects that exist but that aren&amp;rsquo;t reachable from any of the reference nodes.</source>
          <target state="translated">存在するが、どの参照ノードからも到達できないオブジェクトを出力します。</target>
        </trans-unit>
        <trans-unit id="e099bc42258fcb131e0b9e1b48df8c89349bb7b8" translate="yes" xml:space="preserve">
          <source>Print out the ref name given on the command line by which each commit was reached.</source>
          <target state="translated">コマンドラインで与えられた ref 名を出力します。</target>
        </trans-unit>
        <trans-unit id="dcb3dcb3ba78d15754773caa5f744c3c4effdf42" translate="yes" xml:space="preserve">
          <source>Print out the ref names of any commits that are shown by the log command. If &lt;code&gt;short&lt;/code&gt; is specified, the ref name prefixes &lt;code&gt;refs/heads/&lt;/code&gt;, &lt;code&gt;refs/tags/&lt;/code&gt; and &lt;code&gt;refs/remotes/&lt;/code&gt; will not be printed. If &lt;code&gt;full&lt;/code&gt; is specified, the full ref name (including prefix) will be printed. If &lt;code&gt;auto&lt;/code&gt; is specified, then if the output is going to a terminal, the ref names are shown as if &lt;code&gt;short&lt;/code&gt; were given, otherwise no ref names are shown. This is the same as the &lt;code&gt;--decorate&lt;/code&gt; option of the &lt;code&gt;git log&lt;/code&gt;.</source>
          <target state="translated">logコマンドで表示されるコミットの参照名を出力します。場合は &lt;code&gt;short&lt;/code&gt; 指定され、参照名は、接頭辞 &lt;code&gt;refs/heads/&lt;/code&gt; 、 &lt;code&gt;refs/tags/&lt;/code&gt; 及び &lt;code&gt;refs/remotes/&lt;/code&gt; 印刷されません。場合は &lt;code&gt;full&lt;/code&gt; 指定されている、（プレフィックスを含む）完全なrefの名前が印刷されます。場合は &lt;code&gt;auto&lt;/code&gt; が指定されている出力が端末に起こっている場合、参照名が表示されているかのように、その後、 &lt;code&gt;short&lt;/code&gt; 与えられた、そうでなければrefの名前が表示されません。これは &lt;code&gt;git log&lt;/code&gt; の &lt;code&gt;--decorate&lt;/code&gt; オプションと同じです。</target>
        </trans-unit>
        <trans-unit id="53ce43f1821ebff917f188f20f204c3e06f211d4" translate="yes" xml:space="preserve">
          <source>Print out the ref names of any commits that are shown. If &lt;code&gt;short&lt;/code&gt; is specified, the ref name prefixes &lt;code&gt;refs/heads/&lt;/code&gt;, &lt;code&gt;refs/tags/&lt;/code&gt; and &lt;code&gt;refs/remotes/&lt;/code&gt; will not be printed. If &lt;code&gt;full&lt;/code&gt; is specified, the full ref name (including prefix) will be printed. If &lt;code&gt;auto&lt;/code&gt; is specified, then if the output is going to a terminal, the ref names are shown as if &lt;code&gt;short&lt;/code&gt; were given, otherwise no ref names are shown. The default option is &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">表示されているコミットの参照名を出力します。場合は &lt;code&gt;short&lt;/code&gt; 指定され、参照名は、接頭辞 &lt;code&gt;refs/heads/&lt;/code&gt; 、 &lt;code&gt;refs/tags/&lt;/code&gt; 及び &lt;code&gt;refs/remotes/&lt;/code&gt; 印刷されません。場合は &lt;code&gt;full&lt;/code&gt; 指定されている、（プレフィックスを含む）完全なrefの名前が印刷されます。場合は &lt;code&gt;auto&lt;/code&gt; が指定されている出力が端末に起こっている場合、参照名が表示されているかのように、その後、 &lt;code&gt;short&lt;/code&gt; 与えられた、そうでなければrefの名前が表示されません。デフォルトのオプションは &lt;code&gt;short&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2011b0d7f946e8a76de0461151323ce8a5c0f935" translate="yes" xml:space="preserve">
          <source>Print paths with conflicts that have not been autoresolved by rerere. This includes paths whose resolutions cannot be tracked by rerere, such as conflicting submodules.</source>
          <target state="translated">rerere で自動解決されていない競合のあるパスを表示します。これには、競合するサブモジュールのように、 rerere によって解決が追跡できないパスも含まれます。</target>
        </trans-unit>
        <trans-unit id="2cba919653a32310570084639bfa9ccc09fb9fa2" translate="yes" xml:space="preserve">
          <source>Print paths with conflicts whose merge resolution rerere will record.</source>
          <target state="translated">マージ解決の再試行が記録されるコンフリクトのあるパスを表示します。</target>
        </trans-unit>
        <trans-unit id="71b60883716e5c9ed5e8d89999bad00a8a7a60a2" translate="yes" xml:space="preserve">
          <source>Print sizes in human readable format</source>
          <target state="translated">人が読める印刷サイズ</target>
        </trans-unit>
        <trans-unit id="7acdcc1d8a4a904a279ce2f15ace2f46f09a0e30" translate="yes" xml:space="preserve">
          <source>Print the commit object name from the revision in the $REV shell variable:</source>
          <target state="translated">シェル変数 $REV にリビジョンからのコミットオブジェクト名を表示します。</target>
        </trans-unit>
        <trans-unit id="395b30ff424b495b247b1df9486e5529542c8ab4" translate="yes" xml:space="preserve">
          <source>Print the contents of the commit in raw-format; each record is separated with a NUL character.</source>
          <target state="translated">各レコードは NUL 文字で区切られています。</target>
        </trans-unit>
        <trans-unit id="a77cbdea967e7bc1835e082ef3a9add5606ab710" translate="yes" xml:space="preserve">
          <source>Print the contents of the commit object before validating it.</source>
          <target state="translated">コミットオブジェクトを検証する前に、コミットオブジェクトの内容を表示します。</target>
        </trans-unit>
        <trans-unit id="31d513cdd4715b4e34b1efb48c41837ed2726bf9" translate="yes" xml:space="preserve">
          <source>Print the contents of the tag object before validating it.</source>
          <target state="translated">タグオブジェクトを検証する前に、タグオブジェクトの内容を表示します。</target>
        </trans-unit>
        <trans-unit id="87753483ea6cbbd041325490c8537b3b3cada35c" translate="yes" xml:space="preserve">
          <source>Print the current notes ref. This provides an easy way to retrieve the current notes ref (e.g. from scripts).</source>
          <target state="translated">現在のノート ref を印刷します。これは、現在のノート ref を簡単に取得する方法を提供します (スクリプトなどから)。</target>
        </trans-unit>
        <trans-unit id="e336397774a866fc04e04e67418c962536311ce3" translate="yes" xml:space="preserve">
          <source>Print the manpath (see &lt;code&gt;man(1)&lt;/code&gt;) for the man pages for this version of Git and exit.</source>
          <target state="translated">このバージョンのGitのマニュアルページのマンパス（ &lt;code&gt;man(1)&lt;/code&gt; を参照）を出力して終了します。</target>
        </trans-unit>
        <trans-unit id="390fcf6665394474a4208236397a723ae5bbd841" translate="yes" xml:space="preserve">
          <source>Print the name of the current branch. In detached HEAD state, nothing is printed.</source>
          <target state="translated">現在のブランチの名前を印刷します。デタッチドHEAD状態では、何も表示されません。</target>
        </trans-unit>
        <trans-unit id="727d2c972108087f617ca9a52e1404312cb08db7" translate="yes" xml:space="preserve">
          <source>Print the name of the previous thing checked out:</source>
          <target state="translated">チェックアウトした前のものの名前を印刷します。</target>
        </trans-unit>
        <trans-unit id="3642aa2b7cf9b2dae48578e1bdc6f3fea172cd09" translate="yes" xml:space="preserve">
          <source>Print the object IDs of any object referenced by the listed commits. &lt;code&gt;--objects foo ^bar&lt;/code&gt; thus means &amp;ldquo;send me all object IDs which I need to download if I have the commit object &lt;code&gt;bar&lt;/code&gt; but not &lt;code&gt;foo&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">リストされたコミットによって参照されているオブジェクトのオブジェクトIDを出力します。 &lt;code&gt;--objects foo ^bar&lt;/code&gt; は、「コミットオブジェクト &lt;code&gt;bar&lt;/code&gt; が &lt;code&gt;foo&lt;/code&gt; がない場合、ダウンロードする必要があるすべてのオブジェクトIDを送信する」を意味します。</target>
        </trans-unit>
        <trans-unit id="38fa474c9535276a4f6e33490b7ff8dcbbdc81f4" translate="yes" xml:space="preserve">
          <source>Print the object name of the current commit:</source>
          <target state="translated">現在のコミットのオブジェクト名を表示します。</target>
        </trans-unit>
        <trans-unit id="ee021a7e92899d06aae374f43dcf779c8609f3ff" translate="yes" xml:space="preserve">
          <source>Print the path where the Info files documenting this version of Git are installed and exit.</source>
          <target state="translated">このバージョンの Git を文書化した Info ファイルがインストールされているパスを印刷して終了します。</target>
        </trans-unit>
        <trans-unit id="f91d6d93e8468421a09b4a14a734bbd616d1eaec" translate="yes" xml:space="preserve">
          <source>Print the path, without trailing slash, where Git&amp;rsquo;s HTML documentation is installed and exit.</source>
          <target state="translated">末尾にスラッシュを付けずに、GitのHTMLドキュメントがインストールされているパスを印刷して終了します。</target>
        </trans-unit>
        <trans-unit id="c416409aca85a3200dcaeb96638cdf0bb7fd9f1e" translate="yes" xml:space="preserve">
          <source>Print the raw commit timestamp.</source>
          <target state="translated">生のコミットタイムスタンプを表示します。</target>
        </trans-unit>
        <trans-unit id="a639de23ccd7b17d5228ed28b0950d8dd10397fd" translate="yes" xml:space="preserve">
          <source>Print the raw gpg status output to standard error instead of the normal human-readable output.</source>
          <target state="translated">生の gpg ステータス出力を、通常の人間が読める出力ではなく、標準エラーに出力します。</target>
        </trans-unit>
        <trans-unit id="99ac22b00f0c79de0ff529dde835b6047cf02100" translate="yes" xml:space="preserve">
          <source>Print tree and blob ids in order of the commits. The tree and blob ids are printed after they are first referenced by a commit.</source>
          <target state="translated">ツリーとブロブの ID をコミット順に印刷します。ツリーとブロブの ID は、コミットで最初に参照された後に表示されます。</target>
        </trans-unit>
        <trans-unit id="3b22396fd69e4727d40157cf2f987d6e09d1fcff" translate="yes" xml:space="preserve">
          <source>Print usage information and exit</source>
          <target state="translated">利用情報を印刷して終了</target>
        </trans-unit>
        <trans-unit id="8b0271d848c59df8398c3108bdeba41e38e8636a" translate="yes" xml:space="preserve">
          <source>Print version information and exit</source>
          <target state="translated">バージョン情報を印刷して終了</target>
        </trans-unit>
        <trans-unit id="85ec1b3fb97897b6ced8a489e132839db30e011a" translate="yes" xml:space="preserve">
          <source>Prints a Git logical variable.</source>
          <target state="translated">Git の論理変数を表示します。</target>
        </trans-unit>
        <trans-unit id="401d02aaba20f08ba2e39483d254996af7aae137" translate="yes" xml:space="preserve">
          <source>Prints a list of useful guides on the standard output. This option overrides any given command or guide name.</source>
          <target state="translated">便利なガイドのリストを標準出力に出力します。このオプションは、指定されたコマンドやガイド名を上書きします。</target>
        </trans-unit>
        <trans-unit id="fb51737d6bf1a9b6afa9ffc69b82cbde8918bef7" translate="yes" xml:space="preserve">
          <source>Prints all the available commands on the standard output. This option overrides any given command or guide name.</source>
          <target state="translated">利用可能なすべてのコマンドを標準出力に出力します。このオプションは、指定されたコマンドやガイド名を上書きします。</target>
        </trans-unit>
        <trans-unit id="f5aac771b999435096d722ba3e59e6103d7d4c50" translate="yes" xml:space="preserve">
          <source>Prints information about the object at a path to a file descriptor previously arranged with the &lt;code&gt;--cat-blob-fd&lt;/code&gt; argument. This allows printing a blob from the active commit (with &lt;code&gt;cat-blob&lt;/code&gt;) or copying a blob or tree from a previous commit for use in the current one (with &lt;code&gt;filemodify&lt;/code&gt;).</source>
          <target state="translated">以前に &lt;code&gt;--cat-blob-fd&lt;/code&gt; 引数で調整されたファイル記述子へのパスにあるオブジェクトに関する情報を出力します。これにより、アクティブなコミットからのBLOBの印刷（ &lt;code&gt;cat-blob&lt;/code&gt; を使用）、または現在のコミットで使用するための以前のコミットからのBLOBまたはツリーのコピー（ &lt;code&gt;filemodify&lt;/code&gt; を使用）が可能になります。</target>
        </trans-unit>
        <trans-unit id="67f72d83deebf87ad84204db25d15bef66391fa1" translate="yes" xml:space="preserve">
          <source>Prints the Git suite version that the &lt;code&gt;git&lt;/code&gt; program came from.</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; プログラムの元のGitスイートバージョンを出力します。</target>
        </trans-unit>
        <trans-unit id="31cffb4ffe2a30a3dd8ff5b977f393cbba618dfd" translate="yes" xml:space="preserve">
          <source>Prints the synopsis and a list of the most commonly used commands. If the option &lt;code&gt;--all&lt;/code&gt; or &lt;code&gt;-a&lt;/code&gt; is given then all available commands are printed. If a Git command is named this option will bring up the manual page for that command.</source>
          <target state="translated">概要および最も一般的に使用されるコマンドのリストを出力します。オプション &lt;code&gt;--all&lt;/code&gt; または &lt;code&gt;-a&lt;/code&gt; を指定すると、使用可能なすべてのコマンドが出力されます。Gitコマンドに名前が付けられている場合、このオプションはそのコマンドのマニュアルページを表示します。</target>
        </trans-unit>
        <trans-unit id="866254572e1e21a744b0d521a136d91326c823cd" translate="yes" xml:space="preserve">
          <source>Problems related to branches:</source>
          <target state="translated">支店に関する問題。</target>
        </trans-unit>
        <trans-unit id="ca677c6e0873752e051f5b6dc5cfbc5f3713a96f" translate="yes" xml:space="preserve">
          <source>Problems related to tags:</source>
          <target state="translated">タグに関連する問題。</target>
        </trans-unit>
        <trans-unit id="704eb4f9500e5abbbd40e21ecae0dbc6632f17d7" translate="yes" xml:space="preserve">
          <source>Problems related to timestamps:</source>
          <target state="translated">タイムスタンプに関する問題。</target>
        </trans-unit>
        <trans-unit id="face2a8f1265d0d2162b3bb8d6cc8c2e4f00bd1a" translate="yes" xml:space="preserve">
          <source>Problems with rewriting history</source>
          <target state="translated">歴史の書き換えの問題点</target>
        </trans-unit>
        <trans-unit id="cb8ad1a0606d68ac22c37138a82e9dcd94bd7b47" translate="yes" xml:space="preserve">
          <source>Proceed even if the index or the working tree differs from &lt;code&gt;HEAD&lt;/code&gt;. Both the index and working tree are restored to match the switching target. If &lt;code&gt;--recurse-submodules&lt;/code&gt; is specified, submodule content is also restored to match the switching target. This is used to throw away local changes.</source>
          <target state="translated">インデックスまたは作業ツリーが &lt;code&gt;HEAD&lt;/code&gt; と異なっていても続行します。インデックスと作業ツリーの両方が切り替えターゲットと一致するように復元されます。 &lt;code&gt;--recurse-submodules&lt;/code&gt; が指定されている場合、サブモジュールの内容も切り替えターゲットと一致するように復元されます。これは、ローカルの変更を破棄するために使用されます。</target>
        </trans-unit>
        <trans-unit id="81635a56ae860db0a8d1fccf460faed330395977" translate="yes" xml:space="preserve">
          <source>Process binary files as if they were text.</source>
          <target state="translated">バイナリファイルをテキストのように処理します。</target>
        </trans-unit>
        <trans-unit id="c13073a8e5c76f53a6790b53a64799c267eda4e9" translate="yes" xml:space="preserve">
          <source>Process files in the order specified in the &amp;lt;orderfile&amp;gt;, which has one shell glob pattern per line. This overrides the &lt;code&gt;diff.orderFile&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). To cancel &lt;code&gt;diff.orderFile&lt;/code&gt;, use &lt;code&gt;-O/dev/null&lt;/code&gt;.</source>
          <target state="translated">&amp;lt;orderfile&amp;gt;で指定された順序でファイルを処理します。これには、1行に1つのシェルglobパターンがあります。これにより、 &lt;code&gt;diff.orderFile&lt;/code&gt; 構成変数がオーバーライドされます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。 &lt;code&gt;diff.orderFile&lt;/code&gt; をキャンセルするには、 &lt;code&gt;-O/dev/null&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="efe0d70966f95f77c3e86b43812298f2ec9b000a" translate="yes" xml:space="preserve">
          <source>Process the reflogs of all references.</source>
          <target state="translated">すべての参照のリフローを処理します。</target>
        </trans-unit>
        <trans-unit id="0782c5b7801790281dc0fb4b01651b8bfdcbc4f5" translate="yes" xml:space="preserve">
          <source>Processes all packs. Any filenames on the command line are ignored.</source>
          <target state="translated">すべてのパックを処理します。コマンドライン上のファイル名は無視されます。</target>
        </trans-unit>
        <trans-unit id="3c46a3f16a2a32b7eba71a8379b8360472d65d8d" translate="yes" xml:space="preserve">
          <source>Processes the specified option so that git fast-import behaves in a way that suits the frontend&amp;rsquo;s needs. Note that options specified by the frontend are overridden by any options the user may specify to git fast-import itself.</source>
          <target state="translated">指定されたオプションを処理して、git fast-importがフロントエンドのニーズに適した方法で動作するようにします。フロントエンドによって指定されたオプションは、ユーザーがそれ自体をgit fast-importするために指定するオプションによって上書きされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2de3013c8cd324e1d7d27384810d30bdbff48678" translate="yes" xml:space="preserve">
          <source>Produce a merge commit message</source>
          <target state="translated">マージコミットメッセージを生成する</target>
        </trans-unit>
        <trans-unit id="221bd606329bfae672e0ecc9594988658e144e37" translate="yes" xml:space="preserve">
          <source>Produce machine-readable output. The output status line for each ref will be tab-separated and sent to stdout instead of stderr. The full symbolic names of the refs will be given.</source>
          <target state="translated">機械で読める出力を生成します。各参照の出力ステータス行はタブで区切られ、stderrの代わりにstdoutに送られます。参照先の完全なシンボリック名が与えられます。</target>
        </trans-unit>
        <trans-unit id="fa20429458d99d060783732e4d2e8bf497560d29" translate="yes" xml:space="preserve">
          <source>Produce output in the same format as &lt;code&gt;git blame&lt;/code&gt;, but with SVN revision numbers instead of Git commit hashes. In this mode, changes that haven&amp;rsquo;t been committed to SVN (including local working-copy edits) are shown as revision 0.</source>
          <target state="translated">&lt;code&gt;git blame&lt;/code&gt; と同じ形式で出力を生成しますが、Gitコミットハッシュの代わりにSVNリビジョン番号を使用します。このモードでは、SVNにコミットされていない変更（ローカルの作業コピーの編集を含む）はリビジョン0として表示されます。</target>
        </trans-unit>
        <trans-unit id="cb195c53f13c5c90951762ba09047296d46995e9" translate="yes" xml:space="preserve">
          <source>Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the &lt;code&gt;HEAD&lt;/code&gt;, or record &lt;code&gt;$GIT_DIR/MERGE_HEAD&lt;/code&gt; (to cause the next &lt;code&gt;git commit&lt;/code&gt; command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).</source>
          <target state="translated">実際のマージが発生したかのように（マージ情報を除いて）作業ツリーとインデックスの状態を生成しますが、実際にはコミットせず、 &lt;code&gt;HEAD&lt;/code&gt; を移動するか、 &lt;code&gt;$GIT_DIR/MERGE_HEAD&lt;/code&gt; 記録します（次の &lt;code&gt;git commit&lt;/code&gt; コマンドで、マージコミット）。これにより、現在のブランチの上に単一のコミットを作成できます。その効果は、別のブランチをマージするのと同じです（タコの場合はさらに多く）。</target>
        </trans-unit>
        <trans-unit id="465a8ba2d1fbe9de5dbb0d6da6e9b4fc2bd5f63f" translate="yes" xml:space="preserve">
          <source>Produces a fast-import stream which imports the current value of the named ref. It may additionally import other refs as needed to construct the history efficiently. The script writes to a helper-specific private namespace. The value of the named ref should be written to a location in this namespace derived by applying the refspecs from the &quot;refspec&quot; capability to the name of the ref.</source>
          <target state="translated">指定された ref の現在の値をインポートする高速インポートストリームを生成します。履歴を効率的に構築するために、必要に応じて他の ref を追加でインポートすることもできます。スクリプトはヘルパー固有のプライベートな名前空間に書き込みます。指定されたrefの値は、&quot;refspec &quot;ケイパビリティのrefspecsをrefの名前に適用することで、この名前空間内の場所に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="c940155095e7923b03e52693b949145b33288361" translate="yes" xml:space="preserve">
          <source>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --no-progress or --verbose is specified. --progress forces progress status even if the standard error stream is not directed to a terminal.</source>
          <target state="translated">標準エラーストリームが端末に接続されている場合、--no-progress または --verbose が指定されていない限り、標準エラーストリームの進捗状況はデフォルトで報告されます。-progress は、標準エラーストリームが端末に接続されていない場合でも、進行状況を強制的に表示します。</target>
        </trans-unit>
        <trans-unit id="2dcc9cf9e59b81f490159a20a52344236fd5a3dc" translate="yes" xml:space="preserve">
          <source>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.</source>
          <target state="translated">q が指定されていない限り、標準エラーストリームが端末に接続されている場合、標準エラーストリームの進行状況はデフォルトで報告される。このフラグは、標準エラーストリームが端末に接続されていない場合でも、進行状況を強制的に報告する。</target>
        </trans-unit>
        <trans-unit id="e5cc82042c92eacaa55f040bd35ecdec7afbf1c3" translate="yes" xml:space="preserve">
          <source>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless &lt;code&gt;--quiet&lt;/code&gt; is specified. This flag enables progress reporting even if not attached to a terminal, regardless of &lt;code&gt;--quiet&lt;/code&gt;.</source>
          <target state="translated">進行状況は、 &lt;code&gt;--quiet&lt;/code&gt; が指定されていない限り、端末に接続されているときにデフォルトで標準エラーストリームで報告されます。このフラグは、-- &lt;code&gt;--quiet&lt;/code&gt; に関係なく、端末に接続されていなくても進行状況レポートを有効にします。</target>
        </trans-unit>
        <trans-unit id="84082a3e9b3738ac2cad5de1d40208e556f0b5a9" translate="yes" xml:space="preserve">
          <source>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless &lt;code&gt;--quiet&lt;/code&gt; is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.</source>
          <target state="translated">進行状況は、 &lt;code&gt;--quiet&lt;/code&gt; が指定されていない限り、端末に接続されているときにデフォルトで標準エラーストリームで報告されます。このフラグは、標準エラーストリームが端末に送信されない場合でも、進行状況を強制します。</target>
        </trans-unit>
        <trans-unit id="8942c3e281f4b4272bf2fa19690b7dbfeb0da954" translate="yes" xml:space="preserve">
          <source>Progress status is reported on the standard error stream by default when it is attached to a terminal. This flag enables progress reporting even if not attached to a terminal. Can&amp;rsquo;t use &lt;code&gt;--progress&lt;/code&gt; together with &lt;code&gt;--porcelain&lt;/code&gt; or &lt;code&gt;--incremental&lt;/code&gt;.</source>
          <target state="translated">端末に接続されている場合、進行状況はデフォルトで標準エラーストリームで報告されます。このフラグは、端末に接続されていない場合でも進行状況レポートを有効にします。 &lt;code&gt;--progress&lt;/code&gt; を &lt;code&gt;--porcelain&lt;/code&gt; または &lt;code&gt;--incremental&lt;/code&gt; と一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="a4a80ecee0b21f76717158fcc872d2fe8c9f70c9" translate="yes" xml:space="preserve">
          <source>Project list files should list one project per line, with each line having the following format</source>
          <target state="translated">プロジェクトリストファイルは、1行に1つのプロジェクトをリストアップし、各行は以下のフォーマットになっていなければなりません。</target>
        </trans-unit>
        <trans-unit id="64ddeaf66879746d77d52edba9fc6b51c3b5494f" translate="yes" xml:space="preserve">
          <source>Project specific override is not supported.</source>
          <target state="translated">プロジェクト固有のオーバーライドはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="38cb6b6f38fc49666443f39245952417f433b632" translate="yes" xml:space="preserve">
          <source>Projects list file format</source>
          <target state="translated">プロジェクト一覧ファイル形式</target>
        </trans-unit>
        <trans-unit id="99a6cf116ac91087c7f440f3f894b1353453be3c" translate="yes" xml:space="preserve">
          <source>Promisor packfiles are repacked separately: if there are packfiles that have an associated &quot;.promisor&quot; file, these packfiles will be repacked into another separate pack, and an empty &quot;.promisor&quot; file corresponding to the new separate pack will be written.</source>
          <target state="translated">プロバイザパックファイルは別々にリパックされます:もし関連する &quot;.promisor&quot; ファイルがあるパックファイルがあれば、それらのパックファイルは別の別のパックにリパックされ、新しい別のパックに対応する空の &quot;.promisor&quot; ファイルが書き込まれます。</target>
        </trans-unit>
        <trans-unit id="1e3e6d8a5678027c372d639c7caa1ae762739111" translate="yes" xml:space="preserve">
          <source>Prompt before each invocation of the diff tool.</source>
          <target state="translated">diff ツールを起動するたびにプロンプトを表示します。</target>
        </trans-unit>
        <trans-unit id="011847e8f4535310d3585f3561b850f5eaa68bd2" translate="yes" xml:space="preserve">
          <source>Prompt before each invocation of the diff tool. This is the default behaviour; the option is provided to override any configuration settings.</source>
          <target state="translated">diffツールを起動するたびにプロンプトを表示します。これはデフォルトの動作で、設定を上書きするためのオプションが用意されています。</target>
        </trans-unit>
        <trans-unit id="60f48217749656a50ce363c78d14fe3fba58b27e" translate="yes" xml:space="preserve">
          <source>Prompt before each invocation of the merge resolution program to give the user a chance to skip the path.</source>
          <target state="translated">マージ解決プログラムを起動するたびにプロンプトを表示し、パスをスキップする機会をユーザに与えます。</target>
        </trans-unit>
        <trans-unit id="1bd1cfd1155b4114e14d09a7c37c4a191ca7ac30" translate="yes" xml:space="preserve">
          <source>Prompt before each invocation of the merge resolution program.</source>
          <target state="translated">マージ解決プログラムを起動するたびにプロンプトを表示します。</target>
        </trans-unit>
        <trans-unit id="353a353b6eb50b67e795967c32fb24f9eeb5d549" translate="yes" xml:space="preserve">
          <source>Protocol notes: If you are using anonymous access via pserver, just select that. Those using SSH access should choose the &lt;code&gt;ext&lt;/code&gt; protocol, and configure &lt;code&gt;ext&lt;/code&gt; access on the Preferences&amp;rarr;Team&amp;rarr;CVS&amp;rarr;ExtConnection pane. Set CVS_SERVER to &quot;&lt;code&gt;git cvsserver&lt;/code&gt;&quot;. Note that password support is not good when using &lt;code&gt;ext&lt;/code&gt;, you will definitely want to have SSH keys setup.</source>
          <target state="translated">プロトコルに関する注意：pserver経由の匿名アクセスを使用している場合は、それを選択してください。 SSHアクセスを使用するユーザーは、 &lt;code&gt;ext&lt;/code&gt; プロトコルを選択し、[設定]&amp;rarr;[チーム]&amp;rarr;[CVS]&amp;rarr;[ExtConnection]ペインで &lt;code&gt;ext&lt;/code&gt; アクセスを構成する必要があります。 CVS_SERVERを「 &lt;code&gt;git cvsserver&lt;/code&gt; 」に設定します。 &lt;code&gt;ext&lt;/code&gt; を使用する場合、パスワードのサポートは適切ではないことに注意してください。SSHキーを設定することは間違いありません。</target>
        </trans-unit>
        <trans-unit id="4e8bf93a6f67bf7687593a7faf3fef64759fa4d3" translate="yes" xml:space="preserve">
          <source>Protocol version 2 is stateless by default. This means that all commands must only last a single round and be stateless from the perspective of the server side, unless the client has requested a capability indicating that state should be maintained by the server. Clients MUST NOT require state management on the server side in order to function correctly. This permits simple round-robin load-balancing on the server side, without needing to worry about state management.</source>
          <target state="translated">プロトコルバージョン2はデフォルトでステートレスである。これは、クライアントがサーバーがステートを維持すべきであることを示すケイパビリティを要求しない限り、すべてのコマンドは1ラウンドのみ持続し、サーバー側から見ればステートレスでなければならないことを意味する。クライアントが正しく機能するためには、サーバ側でステート管理を必要としてはならない[MUST NOT]。これにより、ステート管理を気にすることなく、サーバー側で単純なラウンドロビンのロードバランシングが可能になります。</target>
        </trans-unit>
        <trans-unit id="a457f44dce93162338e37dcadcb5a7e148a161e8" translate="yes" xml:space="preserve">
          <source>Provide content or type and size information for repository objects</source>
          <target state="translated">リポジトリオブジェクトのコンテンツまたはタイプとサイズの情報を提供する</target>
        </trans-unit>
        <trans-unit id="ce1130d2639274732ace3560e1b161a1f25e1593" translate="yes" xml:space="preserve">
          <source>Provide more progress information.</source>
          <target state="translated">より多くの進捗情報を提供する。</target>
        </trans-unit>
        <trans-unit id="ddd6c4f93ce8e6500d931f94e6b50cb8556ece89" translate="yes" xml:space="preserve">
          <source>Provides the default value for the &lt;code&gt;--from&lt;/code&gt; option to format-patch. Accepts a boolean value, or a name and email address. If false, format-patch defaults to &lt;code&gt;--no-from&lt;/code&gt;, using commit authors directly in the &quot;From:&quot; field of patch mails. If true, format-patch defaults to &lt;code&gt;--from&lt;/code&gt;, using your committer identity in the &quot;From:&quot; field of patch mails and including a &quot;From:&quot; field in the body of the patch mail if different. If set to a non-boolean value, format-patch uses that value instead of your committer identity. Defaults to false.</source>
          <target state="translated">&lt;code&gt;--from&lt;/code&gt; オプションのデフォルト値をformat-patchに提供します。ブール値、または名前と電子メールアドレスを受け入れます。 falseの場合、format-patchはデフォルトで &lt;code&gt;--no-from&lt;/code&gt; になり、パッチメールの「From：」フィールドで直接コミット作成者を使用します。 trueの場合、format-patchはデフォルトで &lt;code&gt;--from&lt;/code&gt; になり、パッチメールの「From：」フィールドにコミッターIDを使用し、異なる場合はパッチメールの本文に「From：」フィールドを含めます。非ブール値に設定した場合、format-patchはコミッターIDの代わりにその値を使用します。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="07e705dc3eb04b1cd0e9d868ce2fbabc5a7b23e9" translate="yes" xml:space="preserve">
          <source>Provides the default value for the &lt;code&gt;--notes&lt;/code&gt; option to format-patch. Accepts a boolean value, or a ref which specifies where to get notes. If false, format-patch defaults to &lt;code&gt;--no-notes&lt;/code&gt;. If true, format-patch defaults to &lt;code&gt;--notes&lt;/code&gt;. If set to a non-boolean value, format-patch defaults to &lt;code&gt;--notes=&amp;lt;ref&amp;gt;&lt;/code&gt;, where &lt;code&gt;ref&lt;/code&gt; is the non-boolean value. Defaults to false.</source>
          <target state="translated">&lt;code&gt;--notes&lt;/code&gt; オプションのデフォルト値をformat-patchに提供します。ブール値、またはメモを取得する場所を指定する参照を受け入れます。 falseの場合、format-patchのデフォルトは &lt;code&gt;--no-notes&lt;/code&gt; です。 trueの場合、format-patchのデフォルトは &lt;code&gt;--notes&lt;/code&gt; です。非ブール値に設定した場合、format-patchはデフォルトで &lt;code&gt;--notes=&amp;lt;ref&amp;gt;&lt;/code&gt; になり、 &lt;code&gt;ref&lt;/code&gt; は非ブール値になります。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="dae8413448109f25f13d1230fdfd21a6427a0a34" translate="yes" xml:space="preserve">
          <source>Provides the name of the object in the original source control system. fast-import will simply ignore this directive, but filter processes which operate on and modify the stream before feeding to fast-import may have uses for this information</source>
          <target state="translated">fast-import はこのディレクティブを単に無視しますが、 fast-import に供給する前にストリームを操作したり変更したりするフィルタプロセスは、 この情報を利用することがあります。</target>
        </trans-unit>
        <trans-unit id="354f719eac7091e1c38104be699d2a68f56df045" translate="yes" xml:space="preserve">
          <source>Providing cvs access to a git repository</source>
          <target state="translated">git リポジトリへの cvs アクセスを提供する</target>
        </trans-unit>
        <trans-unit id="05a28ca41ca8e50984ed01529e7df3e3335567dc" translate="yes" xml:space="preserve">
          <source>Prune all unreachable objects from the object database</source>
          <target state="translated">オブジェクトデータベースからすべての到達不可能なオブジェクトを刈り取る</target>
        </trans-unit>
        <trans-unit id="347c95991436ac84fd290ccf1ebe7a72eadc41e7" translate="yes" xml:space="preserve">
          <source>Prune any reflog entries that point to &quot;broken commits&quot;. A broken commit is a commit that is not reachable from any of the reference tips and that refers, directly or indirectly, to a missing commit, tree, or blob object.</source>
          <target state="translated">壊れたコミット」を指す reflog エントリをすべて削除します。壊れたコミットとは、どの参照チップからも到達できないコミットのことで、直接、間接を問わず、欠落したコミット、ツリー、ブロブオブジェクトを参照しているコミットのことです。</target>
        </trans-unit>
        <trans-unit id="a7eae2a7a6ec9df449cef235306188bcb1fafe15" translate="yes" xml:space="preserve">
          <source>Prune entries older than &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; that are not reachable from the current tip of the branch. If this option is not specified, the expiration time is taken from the configuration setting &lt;code&gt;gc.reflogExpireUnreachable&lt;/code&gt;, which in turn defaults to 30 days. &lt;code&gt;--expire-unreachable=all&lt;/code&gt; prunes unreachable entries regardless of their age; &lt;code&gt;--expire-unreachable=never&lt;/code&gt; turns off early pruning of unreachable entries (but see &lt;code&gt;--expire&lt;/code&gt;).</source>
          <target state="translated">ブランチの現在の先端から到達できない &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; より古いエントリを削除します。このオプションが指定されていない場合、有効期限は構成設定 &lt;code&gt;gc.reflogExpireUnreachable&lt;/code&gt; から取得され、デフォルトでは30日になります。 &lt;code&gt;--expire-unreachable=all&lt;/code&gt; 年齢に関係なく、到達できないエントリを削除します。 &lt;code&gt;--expire-unreachable=never&lt;/code&gt; は到達できないエントリの早期プルーニングをオフにしません（ただし &lt;code&gt;--expire&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="f510204b241f9f833d70b40e365b78ba855d5d73" translate="yes" xml:space="preserve">
          <source>Prune entries older than the specified time. If this option is not specified, the expiration time is taken from the configuration setting &lt;code&gt;gc.reflogExpire&lt;/code&gt;, which in turn defaults to 90 days. &lt;code&gt;--expire=all&lt;/code&gt; prunes entries regardless of their age; &lt;code&gt;--expire=never&lt;/code&gt; turns off pruning of reachable entries (but see &lt;code&gt;--expire-unreachable&lt;/code&gt;).</source>
          <target state="translated">指定された時間より古いエントリを削除します。このオプションが指定されていない場合、有効期限は構成設定 &lt;code&gt;gc.reflogExpire&lt;/code&gt; から取得され、デフォルトでは90日になります。 &lt;code&gt;--expire=all&lt;/code&gt; は、年齢に関係なくエントリをプルーニングします。 &lt;code&gt;--expire=never&lt;/code&gt; は到達可能なエントリのプルーニングをオフにします（ただし、 &lt;code&gt;--expire-unreachable&lt;/code&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="9ca76117e69104a0e4e81d319f878c7014bb3c8a" translate="yes" xml:space="preserve">
          <source>Prune loose objects older than date (default is 2 weeks ago, overridable by the config variable &lt;code&gt;gc.pruneExpire&lt;/code&gt;). --prune=now prunes loose objects regardless of their age and increases the risk of corruption if another process is writing to the repository concurrently; see &quot;NOTES&quot; below. --prune is on by default.</source>
          <target state="translated">日付より古いルーズオブジェクトを &lt;code&gt;gc.pruneExpire&lt;/code&gt; ます（デフォルトは2週間前で、設定変数gc.pruneExpireでオーバーライドできます）。--prune = nowは、古くなったオブジェクトを古さに関係なく枝刈りし、別のプロセスがリポジトリに同時に書き込みを行っている場合に破損のリスクを高めます。以下の「注意事項」を参照してください。--pruneはデフォルトでオンです。</target>
        </trans-unit>
        <trans-unit id="ad1903147c3980cb00334e6e57ade6c895b0d197" translate="yes" xml:space="preserve">
          <source>Prune records of conflicted merges that occurred a long time ago. By default, unresolved conflicts older than 15 days and resolved conflicts older than 60 days are pruned. These defaults are controlled via the &lt;code&gt;gc.rerereUnresolved&lt;/code&gt; and &lt;code&gt;gc.rerereResolved&lt;/code&gt; configuration variables respectively.</source>
          <target state="translated">ずっと前に発生した競合するマージのレコードを整理します。デフォルトでは、15日以上経過した未解決の競合と60日以上経過した解決済みの競合が整理されます。これらのデフォルトは、それぞれ &lt;code&gt;gc.rerereUnresolved&lt;/code&gt; および &lt;code&gt;gc.rerereResolved&lt;/code&gt; 構成変数によって制御されます。</target>
        </trans-unit>
        <trans-unit id="9ae5dc95253bd1047251fe2f0130ef53d935cb16" translate="yes" xml:space="preserve">
          <source>Prune working tree information in $GIT_DIR/worktrees.</source>
          <target state="translated">git_dir/worktreesにある作業木の情報を剪定します。</target>
        </trans-unit>
        <trans-unit id="1daa62e08ce5be741f0f9512af6fe6aea569309c" translate="yes" xml:space="preserve">
          <source>Pruning</source>
          <target state="translated">Pruning</target>
        </trans-unit>
        <trans-unit id="9780740ad9404eab5bef283300816b2d37b6c371" translate="yes" xml:space="preserve">
          <source>Pruning tags with &lt;code&gt;--prune-tags&lt;/code&gt; also works when fetching a URL instead of a named remote. These will all prune tags not found on origin:</source>
          <target state="translated">&lt;code&gt;--prune-tags&lt;/code&gt; tagsを使用したタグのプルーニングは、名前付きリモートの代わりにURLをフェッチするときにも機能します。これらはすべて、起点にないタグを除去します。</target>
        </trans-unit>
        <trans-unit id="5d67c6362cb385f7b2fd7440df4474229e4ced1c" translate="yes" xml:space="preserve">
          <source>Pseudorefs are a class of files under &lt;code&gt;$GIT_DIR&lt;/code&gt; which behave like refs for the purposes of rev-parse, but which are treated specially by git. Pseudorefs both have names that are all-caps, and always start with a line consisting of a &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; followed by whitespace. So, HEAD is not a pseudoref, because it is sometimes a symbolic ref. They might optionally contain some additional data. &lt;code&gt;MERGE_HEAD&lt;/code&gt; and &lt;code&gt;CHERRY_PICK_HEAD&lt;/code&gt; are examples. Unlike &lt;a href=&quot;#def_per_worktree_ref&quot;&gt;per-worktree refs&lt;/a&gt;, these files cannot be symbolic refs, and never have reflogs. They also cannot be updated through the normal ref update machinery. Instead, they are updated by directly writing to the files. However, they can be read as if they were refs, so &lt;code&gt;git rev-parse
MERGE_HEAD&lt;/code&gt; will work.</source>
          <target state="translated">&lt;code&gt;$GIT_DIR&lt;/code&gt; 参照は、$ GIT_DIRの下のファイルのクラスで、rev-parseの目的では参照のように動作しますが、gitによって特別に処理されます。疑似参照はどちらもすべて大文字の名前で、常に&lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1と&lt;/a&gt;それに続く空白で構成される行で始まります。したがって、HEADは擬似参照ではない場合があるため、擬似参照ではありません。オプションで、いくつかの追加データが含まれる場合があります。 &lt;code&gt;MERGE_HEAD&lt;/code&gt; および &lt;code&gt;CHERRY_PICK_HEAD&lt;/code&gt; は例です。&lt;a href=&quot;#def_per_worktree_ref&quot;&gt;ワークツリーごとの参照&lt;/a&gt;とは異なり、これらのファイルはシンボリック参照にすることはできず、参照ログはありません。また、通常のref更新機構では更新できません。代わりに、ファイルに直接書き込むことで更新されます。ただし、参照であるかのように読み取ることができるため、 &lt;code&gt;git rev-parse MERGE_HEAD&lt;/code&gt; が機能します。</target>
        </trans-unit>
        <trans-unit id="b7a4dc2e6290047f1f86721c32ae669785e9b742" translate="yes" xml:space="preserve">
          <source>Public Git repositories</source>
          <target state="translated">公開されている Git リポジトリ</target>
        </trans-unit>
        <trans-unit id="8f3f20e99361b4469a543cafe71c660d905701e0" translate="yes" xml:space="preserve">
          <source>Public api</source>
          <target state="translated">パブリックAPI</target>
        </trans-unit>
        <trans-unit id="661a1caa924e6377c910ab84f021b879aa1f3688" translate="yes" xml:space="preserve">
          <source>Public key of the https service. It may either be the filename of a PEM or DER encoded public key file or a string starting with &lt;code&gt;sha256//&lt;/code&gt; followed by the base64 encoded sha256 hash of the public key. See also libcurl &lt;code&gt;CURLOPT_PINNEDPUBLICKEY&lt;/code&gt;. git will exit with an error if this option is set but not supported by cURL.</source>
          <target state="translated">httpsサービスの公開鍵。PEMまたはDERでエンコードされた公開鍵ファイルのファイル名か、 &lt;code&gt;sha256//&lt;/code&gt; 始まり、公開鍵のbase64エンコードされたsha256ハッシュが後に続く文字列のいずれかになります。libcurl &lt;code&gt;CURLOPT_PINNEDPUBLICKEY&lt;/code&gt; も参照してください。このオプションが設定されているがcURLでサポートされていない場合、gitはエラーで終了します。</target>
        </trans-unit>
        <trans-unit id="fcd79d77a075207d5bb03627d6390daac4adccdf" translate="yes" xml:space="preserve">
          <source>Publishing the changes from your local (private) repository to your remote (public) repository requires a write privilege on the remote machine. You need to have an SSH account there to run a single command, &lt;code&gt;git-receive-pack&lt;/code&gt;.</source>
          <target state="translated">ローカル（プライベート）リポジトリからリモート（パブリック）リポジトリに変更を公開するには、リモートマシンに対する書き込み権限が必要です。単一のコマンド &lt;code&gt;git-receive-pack&lt;/code&gt; を実行するには、そこにSSHアカウントが必要です。</target>
        </trans-unit>
        <trans-unit id="9d5654eba7f3fb26678d0b33453ea83f3704835b" translate="yes" xml:space="preserve">
          <source>Publishing your work</source>
          <target state="translated">作品の出版</target>
        </trans-unit>
        <trans-unit id="5225d106493e2d5cee97f92acd212fcbe8379cc8" translate="yes" xml:space="preserve">
          <source>Pulling a &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt; means to &lt;a href=&quot;#def_fetch&quot;&gt;fetch&lt;/a&gt; it and &lt;a href=&quot;#def_merge&quot;&gt;merge&lt;/a&gt; it. See also &lt;a href=&quot;git-pull&quot;&gt;git-pull[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;を&lt;a href=&quot;#def_fetch&quot;&gt;プル&lt;/a&gt;するとは、ブランチをフェッチして&lt;a href=&quot;#def_merge&quot;&gt;マージ&lt;/a&gt;することです。&lt;a href=&quot;git-pull&quot;&gt;git-pull [1]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="6ba996099ee22cf557dfd858fcdfe9998a7d87a8" translate="yes" xml:space="preserve">
          <source>Pulling down the submodules is a two-step process. First run &lt;code&gt;git submodule
init&lt;/code&gt; to add the submodule repository URLs to &lt;code&gt;.git/config&lt;/code&gt;:</source>
          <target state="translated">サブモジュールのプルダウンは2段階のプロセスです。最初に &lt;code&gt;git submodule init&lt;/code&gt; を実行して、サブモジュールリポジトリのURLを &lt;code&gt;.git/config&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="67689e297cd4fdd92ebe641f7b6ed9bc63361f6b" translate="yes" xml:space="preserve">
          <source>Pulling into a dirty tree</source>
          <target state="translated">汚れた木に引っ込む</target>
        </trans-unit>
        <trans-unit id="678a9bfb35ce5da855b86526d846cbdc7583b760" translate="yes" xml:space="preserve">
          <source>Push &quot;matching&quot; branches to &lt;code&gt;origin&lt;/code&gt;. See &amp;lt;refspec&amp;gt; in the &lt;a href=&quot;#OPTIONS&quot;&gt;OPTIONS&lt;/a&gt; section above for a description of &quot;matching&quot; branches.</source>
          <target state="translated">「マッチング」ブランチを &lt;code&gt;origin&lt;/code&gt; にプッシュします。「一致する」ブランチの説明については、上記の「&lt;a href=&quot;#OPTIONS&quot;&gt;オプション」&lt;/a&gt;セクションの&amp;lt;refspec&amp;gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e3d386bb2b306b430b8f1443632bcddb41f7fbbb" translate="yes" xml:space="preserve">
          <source>Push all branches (i.e. refs under &lt;code&gt;refs/heads/&lt;/code&gt;); cannot be used with other &amp;lt;refspec&amp;gt;.</source>
          <target state="translated">すべてのブランチ（つまり、 &lt;code&gt;refs/heads/&lt;/code&gt; 下のrefs）をプッシュします。他の&amp;lt;refspec&amp;gt;と一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="7ed05cac5fbf2fe13d768ad8d52cf3e6b3326c39" translate="yes" xml:space="preserve">
          <source>Push all the refs that would be pushed without this option, and also push annotated tags in &lt;code&gt;refs/tags&lt;/code&gt; that are missing from the remote but are pointing at commit-ish that are reachable from the refs being pushed. This can also be specified with configuration variable &lt;code&gt;push.followTags&lt;/code&gt;. For more information, see &lt;code&gt;push.followTags&lt;/code&gt; in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">このオプションなしでプッシュされるすべての参照をプッシュします。また、リモートから欠落しているがプッシュされている参照から到達可能なcommit-ishを指している &lt;code&gt;refs/tags&lt;/code&gt; 内の注釈付きタグもプッシュします。これは、設定変数 &lt;code&gt;push.followTags&lt;/code&gt; でも指定できます。詳細については、&lt;a href=&quot;git-config&quot;&gt;git-config [1]の&lt;/a&gt; &lt;code&gt;push.followTags&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="640e91962e4a94024fb44763555198cb451cbb5d" translate="yes" xml:space="preserve">
          <source>Push into another repository.</source>
          <target state="translated">別のリポジトリにプッシュします。</target>
        </trans-unit>
        <trans-unit id="fc1129a549e46f5ee09d052c0e625db078207268" translate="yes" xml:space="preserve">
          <source>Push into the public repository from your primary repository.</source>
          <target state="translated">プライマリリポジトリからパブリックリポジトリにプッシュします。</target>
        </trans-unit>
        <trans-unit id="a011ac29541d686365501a5376539fc2a54082f8" translate="yes" xml:space="preserve">
          <source>Push into the public repository from your primary repository. Run &lt;code&gt;git repack&lt;/code&gt;, and possibly &lt;code&gt;git prune&lt;/code&gt; if the transport used for pulling from your repository supports packed repositories.</source>
          <target state="translated">プライマリリポジトリからパブリックリポジトリにプッシュします。 &lt;code&gt;git repack&lt;/code&gt; を実行します。リポジトリからのプルに使用されるトランスポートがパックされたリポジトリをサポートしている場合は、可能であれば &lt;code&gt;git prune&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="a8251f9563aa908db5da52a9527e9f939a118d16" translate="yes" xml:space="preserve">
          <source>Push master, using file descriptor #7 to read data from git-receive-pack and file descriptor #8 to write data to same service.</source>
          <target state="translated">マスターをプッシュし、ファイルディスクリプター #7 を使って git-receive-pack からデータを読み込み、ファイルディスクリプター #8 を使って同じサービスにデータを書き込みます。</target>
        </trans-unit>
        <trans-unit id="db6a77b6524cf46e0155fc78cb84e6ef6e8d26d4" translate="yes" xml:space="preserve">
          <source>Push objects over Git protocol to another repository</source>
          <target state="translated">Git プロトコルを使ってオブジェクトを別のリポジトリにプッシュ</target>
        </trans-unit>
        <trans-unit id="e328f2dc0a129ee52c24984713b8e3e05193f873" translate="yes" xml:space="preserve">
          <source>Push objects over HTTP/DAV to another repository</source>
          <target state="translated">HTTP/DAVを介してオブジェクトを別のリポジトリにプッシュする</target>
        </trans-unit>
        <trans-unit id="93e6fc3901865e79bc1dfa6c467266c7822bf760" translate="yes" xml:space="preserve">
          <source>Push the current branch to the remote ref matching &lt;code&gt;master&lt;/code&gt; in the &lt;code&gt;origin&lt;/code&gt; repository. This form is convenient to push the current branch without thinking about its local name.</source>
          <target state="translated">現在のブランチを、 &lt;code&gt;origin&lt;/code&gt; リポジトリのリモート参照マッチング &lt;code&gt;master&lt;/code&gt; にプッシュします。このフォームは、ローカル名を意識せずに現在のブランチをプッシュするのに便利です。</target>
        </trans-unit>
        <trans-unit id="7221b3bad2db1abe78fb6e7112e947ec9066c484" translate="yes" xml:space="preserve">
          <source>Push your changes to the public repository, and announce it to the public.</source>
          <target state="translated">変更内容を公開リポジトリにプッシュして、公開します。</target>
        </trans-unit>
        <trans-unit id="44e2374abe889d292378278a32f8732ae3d0723a" translate="yes" xml:space="preserve">
          <source>Push your changes to your public repository, and ask your &quot;project lead&quot; and possibly your &quot;sub-subsystem maintainers&quot; to pull from it.</source>
          <target state="translated">変更した内容を公開リポジトリにプッシュし、&quot;プロジェクトリーダー &quot;や &quot;サブサブシステムメンテナ &quot;にそこから引っ張ってくるように依頼してください。</target>
        </trans-unit>
        <trans-unit id="64c3ecd283374b8e31c77b37f0b37ed07f7e3e67" translate="yes" xml:space="preserve">
          <source>Pushes the given local &amp;lt;src&amp;gt; commit or branch to the remote branch described by &amp;lt;dst&amp;gt;. A batch sequence of one or more &lt;code&gt;push&lt;/code&gt; commands is terminated with a blank line (if there is only one reference to push, a single &lt;code&gt;push&lt;/code&gt; command is followed by a blank line). For example, the following would be two batches of &lt;code&gt;push&lt;/code&gt;, the first asking the remote-helper to push the local ref &lt;code&gt;master&lt;/code&gt; to the remote ref &lt;code&gt;master&lt;/code&gt; and the local &lt;code&gt;HEAD&lt;/code&gt; to the remote &lt;code&gt;branch&lt;/code&gt;, and the second asking to push ref &lt;code&gt;foo&lt;/code&gt; to ref &lt;code&gt;bar&lt;/code&gt; (forced update requested by the &lt;code&gt;+&lt;/code&gt;).</source>
          <target state="translated">指定されたローカルの&amp;lt;src&amp;gt;コミットまたはブランチを、&amp;lt;dst&amp;gt;で記述されたリモートブランチにプッシュします。 1つ以上の &lt;code&gt;push&lt;/code&gt; コマンドのバッチシーケンスは、空白行で終了します（プッシュへの参照が1つしかない場合は、1つの &lt;code&gt;push&lt;/code&gt; コマンドの後に空白行が続きます）。たとえば、次は &lt;code&gt;push&lt;/code&gt; の 2つのバッチです。最初のバッチは、リモートヘルパーにローカル参照 &lt;code&gt;master&lt;/code&gt; をリモート参照 &lt;code&gt;master&lt;/code&gt; にプッシュし、ローカル &lt;code&gt;HEAD&lt;/code&gt; をリモート &lt;code&gt;branch&lt;/code&gt; にプッシュするよう要求し、2番目は、参照 &lt;code&gt;foo&lt;/code&gt; を参照 &lt;code&gt;bar&lt;/code&gt; にプッシュするよう要求します。（ &lt;code&gt;+&lt;/code&gt; によって要求された強制更新）。</target>
        </trans-unit>
        <trans-unit id="ca5456a5df7b11e9ef0d22090b33d4f3bd62ba82" translate="yes" xml:space="preserve">
          <source>Pushes which fail due to problems with the incoming pack, missing objects, or due to the &lt;code&gt;pre-receive&lt;/code&gt; hook will not leave any on-disk data. This is usually helpful to prevent repeated failed pushes from filling up your disk, but can make debugging more challenging.</source>
          <target state="translated">着信パックの問題、オブジェクトの欠落、または &lt;code&gt;pre-receive&lt;/code&gt; フックが原因で失敗したプッシュは、ディスク上のデータを残しません。これは通常、失敗したプッシュが繰り返されてディスクがいっぱいになるのを防ぐのに役立ちますが、デバッグがより困難になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="bd3f47195169191b06e6fb59aa660030c03d8082" translate="yes" xml:space="preserve">
          <source>Pushing a &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt; means to get the branch&amp;rsquo;s &lt;a href=&quot;#def_head_ref&quot;&gt;head ref&lt;/a&gt; from a remote &lt;a href=&quot;#def_repository&quot;&gt;repository&lt;/a&gt;, find out if it is an ancestor to the branch&amp;rsquo;s local head ref, and in that case, putting all objects, which are &lt;a href=&quot;#def_reachable&quot;&gt;reachable&lt;/a&gt; from the local head ref, and which are missing from the remote repository, into the remote &lt;a href=&quot;#def_object_database&quot;&gt;object database&lt;/a&gt;, and updating the remote head ref. If the remote &lt;a href=&quot;#def_head&quot;&gt;head&lt;/a&gt; is not an ancestor to the local head, the push fails.</source>
          <target state="translated">&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;をプッシュするということは、リモート&lt;a href=&quot;#def_repository&quot;&gt;リポジトリ&lt;/a&gt;からブランチの&lt;a href=&quot;#def_head_ref&quot;&gt;ヘッド参照&lt;/a&gt;を取得し、それがブランチのローカルヘッド参照の祖先であるかどうかを確認し、その場合、ローカルヘッド参照から&lt;a href=&quot;#def_reachable&quot;&gt;到達可能な&lt;/a&gt;すべてのオブジェクトを配置することを意味します。リモートリポジトリからリモート&lt;a href=&quot;#def_object_database&quot;&gt;オブジェクトデータベース&lt;/a&gt;に欠落しており、リモートヘッド参照を更新しています。リモート&lt;a href=&quot;#def_head&quot;&gt;ヘッド&lt;/a&gt;がローカルヘッドの祖先でない場合、プッシュは失敗します。</target>
        </trans-unit>
        <trans-unit id="a1b201ad98b52436e58805968e041862b0e44b88" translate="yes" xml:space="preserve">
          <source>Pushing an empty &amp;lt;src&amp;gt; allows you to delete the &amp;lt;dst&amp;gt; ref from the remote repository. Deletions are always accepted without a leading &lt;code&gt;+&lt;/code&gt; in the refspec (or &lt;code&gt;--force&lt;/code&gt;), except when forbidden by configuration or hooks. See &lt;code&gt;receive.denyDeletes&lt;/code&gt; in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; and &lt;code&gt;pre-receive&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; in &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;.</source>
          <target state="translated">空の&amp;lt;src&amp;gt;をプッシュすると、リモートリポジトリから&amp;lt;dst&amp;gt;参照を削除できます。削除は、構成またはフックによって禁止されている場合を除いて、refspec（または &lt;code&gt;--force&lt;/code&gt; ）の先頭に &lt;code&gt;+&lt;/code&gt; を付けずに常に受け入れられます。参照 &lt;code&gt;receive.denyDeletes&lt;/code&gt; で&lt;a href=&quot;git-config&quot;&gt;のgit-設定[1]&lt;/a&gt;及び &lt;code&gt;pre-receive&lt;/code&gt; 及び &lt;code&gt;update&lt;/code&gt; に&lt;a href=&quot;githooks&quot;&gt;githooks [5] &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1b554604b5dbdc966cb242c709d8d9564fd3f48c" translate="yes" xml:space="preserve">
          <source>Pushing changes to a public repository</source>
          <target state="translated">変更を公開リポジトリにプッシュする</target>
        </trans-unit>
        <trans-unit id="eedfa4fe862b4ad2f2d3d15f8505bb4e78d4fc1a" translate="yes" xml:space="preserve">
          <source>Put all the committers in the same group, and make the repository writable by that group:</source>
          <target state="translated">すべてのコミット者を同じグループに入れ、そのグループからリポジトリに書き込み可能な状態にします。</target>
        </trans-unit>
        <trans-unit id="c26397c67704ec958580d89b3087bf7a34700351" translate="yes" xml:space="preserve">
          <source>Put everything in the current head&amp;rsquo;s Documentation/ directory into &lt;code&gt;git-1.4.0-docs.zip&lt;/code&gt;, with the prefix &lt;code&gt;git-docs/&lt;/code&gt;.</source>
          <target state="translated">現在のヘッドのDocumentation /ディレクトリ内の &lt;code&gt;git-1.4.0-docs.zip&lt;/code&gt; に、接頭辞 &lt;code&gt;git-docs/&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="ea705b3a47d1cdf9261daf67230a93968f6edd0b" translate="yes" xml:space="preserve">
          <source>QUERY_STRING</source>
          <target state="translated">QUERY_STRING</target>
        </trans-unit>
        <trans-unit id="c3149be9220a8ce116523f671437212f69f45ea5" translate="yes" xml:space="preserve">
          <source>Quarantine environment</source>
          <target state="translated">検疫環境</target>
        </trans-unit>
        <trans-unit id="ec85d37cf9d9f3d10289231d732a03bb25cc011c" translate="yes" xml:space="preserve">
          <source>Query p4 for labels associated with the depot paths, and add them as tags in Git. Limited usefulness as only imports labels associated with new changelists. Deprecated.</source>
          <target state="translated">デポのパスに関連付けられたラベルを p4 に問い合わせ、それを Git のタグとして追加します。新しい変更リストに関連付けられたラベルをインポートするだけなので、有用性は限られています。非推奨。</target>
        </trans-unit>
        <trans-unit id="ce8d2336bc85bc6e5b624295904c32b955dda594" translate="yes" xml:space="preserve">
          <source>Quick reference guides: &lt;a href=&quot;https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf&quot;&gt;GitHub Cheat Sheet&lt;/a&gt;&lt;small&gt;(PDF)&lt;/small&gt; | &lt;a href=&quot;https://ndpsoftware.com/git-cheatsheet.html&quot;&gt;Visual Git Cheat Sheet&lt;/a&gt;&lt;small&gt;(SVG | PNG)&lt;/small&gt;</source>
          <target state="translated">クイックリファレンスガイド：&lt;a href=&quot;https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf&quot;&gt;GitHubチートシート&lt;/a&gt;&lt;small&gt;（PDF）&lt;/small&gt; | &lt;a href=&quot;https://ndpsoftware.com/git-cheatsheet.html&quot;&gt;Visual Gitチートシート&lt;/a&gt;&lt;small&gt;（SVG | PNG）&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3a11ac4a816649c90b2a876b8ed365a4f747816e" translate="yes" xml:space="preserve">
          <source>Quiet, suppress feedback messages.</source>
          <target state="translated">静かに、フィードバックメッセージを抑制する。</target>
        </trans-unit>
        <trans-unit id="2ac9102b0a2f3eb9abc09cf4e1c41ec0575ff1e1" translate="yes" xml:space="preserve">
          <source>Quiet, suppress feedback messages. Implies &lt;code&gt;--no-progress&lt;/code&gt;.</source>
          <target state="translated">静かに、フィードバックメッセージを抑制します。 &lt;code&gt;--no-progress&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="de1dab6bd571badbfbb3ddaa6f495be909332129" translate="yes" xml:space="preserve">
          <source>Quiet. If --refresh finds that the index needs an update, the default behavior is to error out. This option makes &lt;code&gt;git update-index&lt;/code&gt; continue anyway.</source>
          <target state="translated">静か。--refreshがインデックスの更新を必要とする場合、デフォルトの動作はエラーになります。このオプションを使用すると、 &lt;code&gt;git update-index&lt;/code&gt; が続行されます。</target>
        </trans-unit>
        <trans-unit id="e1baedfd2936afaf34298be8c53a6f3520c17d3e" translate="yes" xml:space="preserve">
          <source>Quiet; do not warn about conflicts.</source>
          <target state="translated">静かに、紛争について警告しないでください。</target>
        </trans-unit>
        <trans-unit id="e9770de83f70890562d92f9477d5315581d69261" translate="yes" xml:space="preserve">
          <source>Quite similarly, if &lt;code&gt;core.symlinks&lt;/code&gt; configuration variable is set to &lt;code&gt;false&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;), symbolic links are checked out as plain files, and this command does not modify a recorded file mode from symbolic link to regular file.</source>
          <target state="translated">同様に、 &lt;code&gt;core.symlinks&lt;/code&gt; 構成変数が &lt;code&gt;false&lt;/code&gt; に設定されている場合（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）、シンボリックリンクはプレーンファイルとしてチェックアウトされ、このコマンドは記録されたファイルモードをシンボリックリンクから通常のファイルに変更しません。</target>
        </trans-unit>
        <trans-unit id="f0f61d9660842b035df0296041289cbf85b3ae28" translate="yes" xml:space="preserve">
          <source>Quote fields containing whitespace as if they were strings in C source code; i.e., surrounded by double-quotes and with backslash escapes. Use 40 &quot;0&quot; characters or the empty string to specify a zero value. To specify a missing value, omit the value and its preceding SP entirely.</source>
          <target state="translated">ホワイトスペースを含むフィールドは、C のソースコードでは文字列であるかのように引用します。ゼロ値を指定するには、40文字の「0」または空文字列を使用します。欠落した値を指定するには、その値とその前のSPを完全に省略します。</target>
        </trans-unit>
        <trans-unit id="0550aeb8801a3ad8332244f3d277c748ecb56080" translate="yes" xml:space="preserve">
          <source>Quoted aliases and quoted addresses are not supported: lines that contain a &lt;code&gt;&quot;&lt;/code&gt; symbol are ignored.</source>
          <target state="translated">引用符で囲まれたエイリアスと引用符で囲まれたアドレスはサポートされていません。 &lt;code&gt;&quot;&lt;/code&gt; 記号を含む行は無視されます。</target>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="38354f3564dc690008158ec27147b7718eef20da" translate="yes" xml:space="preserve">
          <source>R: renaming of a file</source>
          <target state="translated">R:ファイルの名前変更</target>
        </trans-unit>
        <trans-unit id="73ff05a9f629bff633fa7a0499495556f0f1a07f" translate="yes" xml:space="preserve">
          <source>README.html</source>
          <target state="translated">README.html</target>
        </trans-unit>
        <trans-unit id="986c96108f4514e08f8de60c616ff1d0727fd986" translate="yes" xml:space="preserve">
          <source>REMOTE_ADDR</source>
          <target state="translated">REMOTE_ADDR</target>
        </trans-unit>
        <trans-unit id="613cec3f00ac4a24def4b10bec39e10198b8d82e" translate="yes" xml:space="preserve">
          <source>REMOTE_USER</source>
          <target state="translated">REMOTE_USER</target>
        </trans-unit>
        <trans-unit id="a16e10b928e7c21c5b4ae3d47f9db3c0b6c782c3" translate="yes" xml:space="preserve">
          <source>REQUEST_METHOD</source>
          <target state="translated">REQUEST_METHOD</target>
        </trans-unit>
        <trans-unit id="697070f17a70b2490138caae401415ac7b401fbd" translate="yes" xml:space="preserve">
          <source>RFC 2822</source>
          <target state="translated">RFC2822号</target>
        </trans-unit>
        <trans-unit id="b34db1f303fd91c6e7039f452d5097c789b26cf1" translate="yes" xml:space="preserve">
          <source>Rather than checking out a branch to work on it, check out a commit for inspection and discardable experiments. This is the default behavior of &lt;code&gt;git checkout &amp;lt;commit&amp;gt;&lt;/code&gt; when &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; is not a branch name. See the &quot;DETACHED HEAD&quot; section below for details.</source>
          <target state="translated">ブランチをチェックアウトして作業するのではなく、検査と破棄可能な実験のコミットをチェックアウトします。これは、 &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; がブランチ名でない場合の &lt;code&gt;git checkout &amp;lt;commit&amp;gt;&lt;/code&gt; のデフォルトの動作です。詳細については、以下の「デタッチヘッド」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4e4bfd7d1a0190903bc19000a40525c987ff7008" translate="yes" xml:space="preserve">
          <source>Raw output format</source>
          <target state="translated">生の出力形式</target>
        </trans-unit>
        <trans-unit id="7b0a88cf0ceef9e929b45fca40ecfa70b119395a" translate="yes" xml:space="preserve">
          <source>Re-author p4 changes before submitting to p4. This option requires p4 admin privileges.</source>
          <target state="translated">p4に提出する前に、p4の変更を再オーサリングします。このオプションには p4 の管理者権限が必要です。</target>
        </trans-unit>
        <trans-unit id="a3d5287f4feb36f53be9e482bea0b4f69488906a" translate="yes" xml:space="preserve">
          <source>Read &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for more details about each hook.</source>
          <target state="translated">読み取り&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;各フックの詳細については。</target>
        </trans-unit>
        <trans-unit id="3c99ae2389e194940d6e9dae44358b0f59db22c3" translate="yes" xml:space="preserve">
          <source>Read a list of commits from stdin and commit them in reverse order. Only the leading sha1 is read from each line, so &lt;code&gt;git rev-list --pretty=oneline&lt;/code&gt; output can be used.</source>
          <target state="translated">stdinからコミットのリストを読み取り、逆の順序でコミットします。各行から先頭のsha1のみが読み取られるため、 &lt;code&gt;git rev-list --pretty=oneline&lt;/code&gt; 出力を使用できます。</target>
        </trans-unit>
        <trans-unit id="9a81bd113ea455376c0709dc2b5dec2fbcc3eae4" translate="yes" xml:space="preserve">
          <source>Read a packed archive (.pack) from the standard input, expanding the objects contained within and writing them into the repository in &quot;loose&quot; (one object per file) format.</source>
          <target state="translated">標準入力からパックされたアーカイブ(.pack)を読み込み、その中に含まれるオブジェクトを展開して、&quot;loose&quot; (1ファイルに1つのオブジェクト)形式でリポジトリに書き出します。</target>
        </trans-unit>
        <trans-unit id="cf4f210605880935e907e739e930d70c6c05f393" translate="yes" xml:space="preserve">
          <source>Read a patch from the standard input and compute the patch ID for it.</source>
          <target state="translated">標準入力からパッチを読み込み、そのパッチのパッチIDを計算します。</target>
        </trans-unit>
        <trans-unit id="118b284f547f2475f4692a5a06eacb1fa689da5d" translate="yes" xml:space="preserve">
          <source>Read a tar archive created by &lt;code&gt;git archive&lt;/code&gt; from the standard input and extract the commit ID stored in it. It reads only the first 1024 bytes of input, thus its runtime is not influenced by the size of the tar archive very much.</source>
          <target state="translated">&lt;code&gt;git archive&lt;/code&gt; archiveで作成されたtarアーカイブを標準入力から読み取り、そこに格納されているコミットIDを抽出します。入力の最初の1024バイトのみを読み取るため、ランタイムはtarアーカイブのサイズにあまり影響されません。</target>
        </trans-unit>
        <trans-unit id="8323be41a83f5e8edd45cebf33794d8211b9a65a" translate="yes" xml:space="preserve">
          <source>Read additional exclude patterns that apply only to the directory and its subdirectories in &amp;lt;file&amp;gt;.</source>
          <target state="translated">&amp;lt;file&amp;gt;のディレクトリとそのサブディレクトリにのみ適用される追加の除外パターンを読み取ります。</target>
        </trans-unit>
        <trans-unit id="ec538abd0ecb84f4afa31116a9fde4a7bfbfc841" translate="yes" xml:space="preserve">
          <source>Read contacts, one per line, from the standard input after exhausting contacts provided on the command-line.</source>
          <target state="translated">コマンドラインで提供されているコンタクトを使い切った後、標準入力から1行に1つのコンタクトを読み込みます。</target>
        </trans-unit>
        <trans-unit id="cc8be265c5565879cb19acef5a95bb650b329807" translate="yes" xml:space="preserve">
          <source>Read description of &lt;code&gt;%feature&lt;/code&gt; hash for detailed list, and descriptions. See also &quot;Configuring gitweb features&quot; section in &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf[5]&lt;/a&gt;</source>
          <target state="translated">詳細なリストと説明については、 &lt;code&gt;%feature&lt;/code&gt; ハッシュの説明をお読みください。&lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf [5]の&lt;/a&gt;「gitweb機能の構成」セクションもご覧ください。</target>
        </trans-unit>
        <trans-unit id="15ad57eb2da16d3087f86e421c960f711d5a7f97" translate="yes" xml:space="preserve">
          <source>Read exclude patterns from &amp;lt;file&amp;gt;; 1 per line.</source>
          <target state="translated">&amp;lt;file&amp;gt;から除外パターンを読み取ります。1行に1つ。</target>
        </trans-unit>
        <trans-unit id="f6c76b424f91b25c9b13ee14e1604c5d3fa96f28" translate="yes" xml:space="preserve">
          <source>Read file names from the standard input, one per line, instead of from the command-line.</source>
          <target state="translated">コマンドラインからではなく、標準入力から1行に1つずつファイル名を読み込みます。</target>
        </trans-unit>
        <trans-unit id="d0b5b313182b086a1f9af39ecd4467e46faca9cf" translate="yes" xml:space="preserve">
          <source>Read index information from stdin.</source>
          <target state="translated">stdinからインデックス情報を読み込みます。</target>
        </trans-unit>
        <trans-unit id="80670c79001d8f8c9a5be5d38404bf833dac649e" translate="yes" xml:space="preserve">
          <source>Read its description.</source>
          <target state="translated">その説明を読む。</target>
        </trans-unit>
        <trans-unit id="46ab10e675175e0e453c98d42b078fb4b46c2856" translate="yes" xml:space="preserve">
          <source>Read pathnames from the standard input, one per line, instead of from the command-line.</source>
          <target state="translated">コマンドラインからではなく、標準入力から1行に1つずつパス名を読み込みます。</target>
        </trans-unit>
        <trans-unit id="e51b79a68429169e8d905bac10a875d5d0bc0bbc" translate="yes" xml:space="preserve">
          <source>Read patterns from &amp;lt;file&amp;gt;, one per line.</source>
          <target state="translated">1行に1つずつ、&amp;lt;file&amp;gt;からパターンを読み取ります。</target>
        </trans-unit>
        <trans-unit id="fed49b353bd2e8ef2071f098ea90e8175a16e2cc" translate="yes" xml:space="preserve">
          <source>Read text, such as commit messages, notes, tags and branch descriptions, from the standard input and clean it in the manner used by Git.</source>
          <target state="translated">コミットメッセージやノート、タグ、ブランチの説明などのテキストを標準入力から読み込んで、Gitで使われている方法でクリーンアップします。</target>
        </trans-unit>
        <trans-unit id="eceb0ad0aa215d85bc1cfa0886bd096a3daed30d" translate="yes" xml:space="preserve">
          <source>Read the &lt;code&gt;.idx&lt;/code&gt; file for a Git packfile (created with &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; or &lt;a href=&quot;git-index-pack&quot;&gt;git-index-pack[1]&lt;/a&gt;) from the standard input, and dump its contents. The output consists of one object per line, with each line containing two or three space-separated columns:</source>
          <target state="translated">標準入力からGit packfile（&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]&lt;/a&gt;または&lt;a href=&quot;git-index-pack&quot;&gt;git-index-pack [1]で作成&lt;/a&gt;）の &lt;code&gt;.idx&lt;/code&gt; ファイルを読み取り、その内容をダンプします。出力は行ごとに1つのオブジェクトで構成され、各行にはスペースで区切られた2つまたは3つの列が含まれます。</target>
        </trans-unit>
        <trans-unit id="ddd6a34883963a795d5ebc22563eef2cf30acd2b" translate="yes" xml:space="preserve">
          <source>Read the NUL-terminated &lt;code&gt;ls-tree -z&lt;/code&gt; output instead.</source>
          <target state="translated">代わりに、NULで終了する &lt;code&gt;ls-tree -z&lt;/code&gt; 出力を読んでください。</target>
        </trans-unit>
        <trans-unit id="3ea8fc0021add956f340de030bf6e8165a69896f" translate="yes" xml:space="preserve">
          <source>Read the commit log message from the given file. Use &lt;code&gt;-&lt;/code&gt; to read from the standard input. This can be given more than once and the content of each file becomes its own paragraph.</source>
          <target state="translated">指定されたファイルからコミットログメッセージを読み取ります。 &lt;code&gt;-&lt;/code&gt; を使用して、標準入力から読み取ります。これは複数回指定でき、各ファイルの内容は独自の段落になります。</target>
        </trans-unit>
        <trans-unit id="507fdedba9f69c5efbd0e8cf829abe30d4a7a120" translate="yes" xml:space="preserve">
          <source>Read the commit message to be used for the merge commit (in case one is created).</source>
          <target state="translated">マージコミットに使用するコミットメッセージを読み込みます (コミットが作成された場合)。</target>
        </trans-unit>
        <trans-unit id="9362ea89cc38e10989edc212ebc0bf489cc001f5" translate="yes" xml:space="preserve">
          <source>Read the commit-graph file and verify its contents against the object database. Used to check for corrupted data.</source>
          <target state="translated">コミットグラフファイルを読み込んで、その内容をオブジェクトデータベースと照合します。破損したデータのチェックに使用します。</target>
        </trans-unit>
        <trans-unit id="9e4092c6ffe69dbb6a8bf7641feea7e173111c93" translate="yes" xml:space="preserve">
          <source>Read the object from standard input instead of from a file.</source>
          <target state="translated">ファイルからではなく、標準入力からオブジェクトを読み込みます。</target>
        </trans-unit>
        <trans-unit id="16a5e93c91809d39b015e5b24abf65dd6438e038" translate="yes" xml:space="preserve">
          <source>Read the revision arguments from the standard input, instead of individual object names. The revision arguments are processed the same way as &lt;code&gt;git rev-list&lt;/code&gt; with the &lt;code&gt;--objects&lt;/code&gt; flag uses its &lt;code&gt;commit&lt;/code&gt; arguments to build the list of objects it outputs. The objects on the resulting list are packed. Besides revisions, &lt;code&gt;--not&lt;/code&gt; or &lt;code&gt;--shallow &amp;lt;SHA-1&amp;gt;&lt;/code&gt; lines are also accepted.</source>
          <target state="translated">個々のオブジェクト名ではなく、標準入力からリビジョン引数を読み取ります。リビジョン引数は、 &lt;code&gt;git rev-list&lt;/code&gt; &lt;code&gt;--objects&lt;/code&gt; フラグ &lt;code&gt;commit&lt;/code&gt; 指定したgit rev-listがコミット引数を使用して出力するオブジェクトのリストを作成するのと同じ方法で処理されます。結果のリストのオブジェクトはパックされます。リビジョンのほかに、 &lt;code&gt;--not&lt;/code&gt; または &lt;code&gt;--shallow &amp;lt;SHA-1&amp;gt;&lt;/code&gt; 行も受け入れられます。</target>
        </trans-unit>
        <trans-unit id="7f840070f6a18eee1c3de888e1eec475edd1cfa4" translate="yes" xml:space="preserve">
          <source>Read, modify and delete symbolic refs</source>
          <target state="translated">シンボリック参照の読み取り、変更、削除</target>
        </trans-unit>
        <trans-unit id="356b6782c6512845fae8c2da14d692d4da174e8d" translate="yes" xml:space="preserve">
          <source>Reading from a named tree</source>
          <target state="translated">名前のついた木から読み取る</target>
        </trans-unit>
        <trans-unit id="7405316147ea4906cae4c658957705537066053b" translate="yes" xml:space="preserve">
          <source>Reading from the active commit</source>
          <target state="translated">アクティブなコミットからの読み込み</target>
        </trans-unit>
        <trans-unit id="d5df5dafb2331c4e6af80c2f8a0c26176a288dab" translate="yes" xml:space="preserve">
          <source>Reads a packed archive (.pack) from the specified file, and builds a pack index file (.idx) for it. The packed archive together with the pack index can then be placed in the objects/pack/ directory of a Git repository.</source>
          <target state="translated">指定したファイルからパックされたアーカイブ (.pack)を読み込み、パックインデックスファイル (.idx)を作成します。パックされたアーカイブをパックインデックスとともに Git リポジトリの objects/pack/ディレクトリに配置することができます。</target>
        </trans-unit>
        <trans-unit id="db9526754c129c75f60022c8e34e8db9d6855fac" translate="yes" xml:space="preserve">
          <source>Reads a single e-mail message from the standard input, and writes the commit log message in &amp;lt;msg&amp;gt; file, and the patches in &amp;lt;patch&amp;gt; file. The author name, e-mail and e-mail subject are written out to the standard output to be used by &lt;code&gt;git am&lt;/code&gt; to create a commit. It is usually not necessary to use this command directly. See &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt; instead.</source>
          <target state="translated">標準入力から単一の電子メールメッセージを読み取り、コミットログメッセージを&amp;lt;msg&amp;gt;ファイルに、パッチを&amp;lt;patch&amp;gt;ファイルに書き込みます。著者名、電子メール、電子メールの件名は標準出力に書き出され、 &lt;code&gt;git am&lt;/code&gt; がコミットを作成するために使用されます。通常、このコマンドを直接使用する必要はありません。代わりに&lt;a href=&quot;git-am&quot;&gt;git-am [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="91a54b1043f609f02e31617fc1ed3b549e2a4394" translate="yes" xml:space="preserve">
          <source>Reads a tag contents on standard input and creates a tag object that can also be used to sign other objects.</source>
          <target state="translated">標準入力でタグの内容を読み込み、他のオブジェクトへの署名にも使用できるタグオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="1988117fbbba1a52186c7874f472ad690b235ffc" translate="yes" xml:space="preserve">
          <source>Reads given idx file for packed Git archive created with the &lt;code&gt;git pack-objects&lt;/code&gt; command and verifies idx file and the corresponding pack file.</source>
          <target state="translated">&lt;code&gt;git pack-objects&lt;/code&gt; コマンドで作成されたパックされたGitアーカイブの指定されたidxファイルを読み取り、idxファイルと対応するパックファイルを確認します。</target>
        </trans-unit>
        <trans-unit id="befcf9896fcbea450fd9bee257995fb96286ee5a" translate="yes" xml:space="preserve">
          <source>Reads list of objects from the standard input, and writes either one or more packed archives with the specified base-name to disk, or a packed archive to the standard output.</source>
          <target state="translated">標準入力からオブジェクトのリストを読み込み、指定されたベース名を持つ1つ以上のパックされたアーカイブをディスクに書き込むか、パックされたアーカイブを標準出力に書き出します。</target>
        </trans-unit>
        <trans-unit id="d7a9d36099b1ff6ac5bd15dd14e16c269b0389b8" translate="yes" xml:space="preserve">
          <source>Reads standard input in non-recursive &lt;code&gt;ls-tree&lt;/code&gt; output format, and creates a tree object. The order of the tree entries is normalized by mktree so pre-sorting the input is not required. The object name of the tree object built is written to the standard output.</source>
          <target state="translated">非再帰 &lt;code&gt;ls-tree&lt;/code&gt; 出力形式で標準入力を読み取り、ツリーオブジェクトを作成します。ツリーエントリの順序はmktreeによって正規化されるため、入力を事前にソートする必要はありません。構築されたツリーオブジェクトのオブジェクト名が標準出力に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="768de97d393241af581368bdb5b60add6bc4daa9" translate="yes" xml:space="preserve">
          <source>Reads the supplied diff output (i.e. &quot;a patch&quot;) and applies it to files. When running from a subdirectory in a repository, patched paths outside the directory are ignored. With the &lt;code&gt;--index&lt;/code&gt; option the patch is also applied to the index, and with the &lt;code&gt;--cached&lt;/code&gt; option the patch is only applied to the index. Without these options, the command applies the patch only to files, and does not require them to be in a Git repository.</source>
          <target state="translated">提供されたdiff出力（つまり「パッチ」）を読み取り、それをファイルに適用します。リポジトリ内のサブディレクトリから実行する場合、ディレクトリ外のパッチが適用されたパスは無視されます。 &lt;code&gt;--index&lt;/code&gt; オプションのパッチは、インデックスに適用され、及びで &lt;code&gt;--cached&lt;/code&gt; オプションのパッチは、インデックスのみに適用されます。これらのオプションがない場合、コマンドはパッチをファイルにのみ適用し、それらがGitリポジトリーにある必要はありません。</target>
        </trans-unit>
        <trans-unit id="e5173f184d3064943fb31ef4b9c751d1119e1685" translate="yes" xml:space="preserve">
          <source>Reads the tree information given by &amp;lt;tree-ish&amp;gt; into the index, but does not actually &lt;strong&gt;update&lt;/strong&gt; any of the files it &quot;caches&quot;. (see: &lt;a href=&quot;git-checkout-index&quot;&gt;git-checkout-index[1]&lt;/a&gt;)</source>
          <target state="translated">&amp;lt;tree-ish&amp;gt;によって与えられたツリー情報をインデックスに読み込みますが、実際に「キャッシュ」するファイルは&lt;strong&gt;更新&lt;/strong&gt;しません。（参照：&lt;a href=&quot;git-checkout-index&quot;&gt;git-checkout-index [1]&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="e432986c9c0bf1c0563c54e4546289b72e2b8f05" translate="yes" xml:space="preserve">
          <source>Reads three tree-ish, and output trivial merge results and conflicting stages to the standard output. This is similar to what three-way &lt;code&gt;git read-tree -m&lt;/code&gt; does, but instead of storing the results in the index, the command outputs the entries to the standard output.</source>
          <target state="translated">3つのツリーのような結果を読み取り、些細なマージ結果と競合するステージを標準出力に出力します。これは、3方向の &lt;code&gt;git read-tree -m&lt;/code&gt; と同じですが、結果をインデックスに保存する代わりに、コマンドはエントリを標準出力に出力します。</target>
        </trans-unit>
        <trans-unit id="47a594db00e7ab66962cb542d6f07d66a982ad3f" translate="yes" xml:space="preserve">
          <source>Reads tree information into the index</source>
          <target state="translated">ツリー情報をインデックスに読み込みます。</target>
        </trans-unit>
        <trans-unit id="209b43abaea4b5ac5dbb8b759ed99ebfaf6f9172" translate="yes" xml:space="preserve">
          <source>Reapply commits on top of another base tip</source>
          <target state="translated">コミットを別のベースチップの上に再適用する</target>
        </trans-unit>
        <trans-unit id="95695a29b19740f8f73c24fedd25acfa8a46012d" translate="yes" xml:space="preserve">
          <source>Rebase</source>
          <target state="translated">Rebase</target>
        </trans-unit>
        <trans-unit id="f805426f874c522ca8e3397a261d025324269dce" translate="yes" xml:space="preserve">
          <source>Rebase all commits reachable from &amp;lt;branch&amp;gt;, instead of limiting them with an &amp;lt;upstream&amp;gt;. This allows you to rebase the root commit(s) on a branch. When used with --onto, it will skip changes already contained in &amp;lt;newbase&amp;gt; (instead of &amp;lt;upstream&amp;gt;) whereas without --onto it will operate on every change. When used together with both --onto and --preserve-merges, &lt;code&gt;all&lt;/code&gt; root commits will be rewritten to have &amp;lt;newbase&amp;gt; as parent instead.</source>
          <target state="translated">&amp;lt;upstream&amp;gt;で制限するのではなく、&amp;lt;branch&amp;gt;から到達可能なすべてのコミットをリベースします。これにより、ブランチのルートコミットをリベースできます。--ontoと一緒に使用すると、（&amp;lt;upstream&amp;gt;ではなく）&amp;lt;newbase&amp;gt;に既に含まれている変更がスキップされますが、-ontoを使用しないと、すべての変更に対して動作します。--ontoと--preserve-mergesの両方と一緒に使用すると、 &lt;code&gt;all&lt;/code&gt; ルートコミットが書き直され、代わりに&amp;lt;newbase&amp;gt;が親になります。</target>
        </trans-unit>
        <trans-unit id="e5565e2c078bf46f769d916c78f2140677ea9bef" translate="yes" xml:space="preserve">
          <source>Rebase options</source>
          <target state="translated">リベースオプション</target>
        </trans-unit>
        <trans-unit id="716069514beaa612afd8a844f284c8d0a6aabce4" translate="yes" xml:space="preserve">
          <source>Rebase vs. pull/merge</source>
          <target state="translated">リベースとプル/マージ</target>
        </trans-unit>
        <trans-unit id="5e20f7eeaec14e3dc573b7394eb6cd8341f1bca1" translate="yes" xml:space="preserve">
          <source>Rebase your current HEAD on the last commit you want to retain as-is. For example, if you want to reorder the last 5 commits, use:</source>
          <target state="translated">現在の HEAD を、そのまま保持したい最後のコミットにリベースします。例えば、最後の5つのコミットを並べ替えたい場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="7170c51391b558eaee43fbe3f7e40861483475fb" translate="yes" xml:space="preserve">
          <source>Rebasing (or any other form of rewriting) a branch that others have based work on is a bad idea: anyone downstream of it is forced to manually fix their history. This section explains how to do the fix from the downstream&amp;rsquo;s point of view. The real fix, however, would be to avoid rebasing the upstream in the first place.</source>
          <target state="translated">他の人が作業に基づいて作成したブランチのリベース（または他の形式の書き換え）は悪い考えです。その下流の誰もが手動で履歴を修正する必要があります。このセクションでは、ダウンストリームの観点からの修正方法を説明します。ただし、本当の解決策は、そもそもアップストリームのリベースを回避することです。</target>
        </trans-unit>
        <trans-unit id="8f0767f1f4e33ddf301ed23c7f2cab0332acde8d" translate="yes" xml:space="preserve">
          <source>Rebasing interactively means that you have a chance to edit the commits which are rebased. You can reorder the commits, and you can remove them (weeding out bad or otherwise unwanted patches).</source>
          <target state="translated">対話的にリベースするということは、リベースされたコミットを編集する機会があるということです。コミットを並べ替えたり、削除したり (悪いパッチや不要なパッチを取り除く)することができます。</target>
        </trans-unit>
        <trans-unit id="451ba45ef5ba504d79efe1ccb8ef4e6b541d4b90" translate="yes" xml:space="preserve">
          <source>Rebasing merges</source>
          <target state="translated">リベースマージ</target>
        </trans-unit>
        <trans-unit id="f41810dd94a2ab482398f10cf85665624d62733a" translate="yes" xml:space="preserve">
          <source>Recall that merge commits may have more than one parent; by default, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; follow the first parent listed in the commit, but you can also choose:</source>
          <target state="translated">マージコミットには複数の親が含まれる場合があることを思い出してください。デフォルトでは、 &lt;code&gt;^&lt;/code&gt; と &lt;code&gt;~&lt;/code&gt; は、コミットにリストされている最初の親の後に続きますが、以下を選択することもできます。</target>
        </trans-unit>
        <trans-unit id="b37c74948935714b7fd73afa3de16cd064ee51d6" translate="yes" xml:space="preserve">
          <source>Recall that the commit which will be committed after we resolve this conflict will have two parents instead of the usual one: one parent will be HEAD, the tip of the current branch; the other will be the tip of the other branch, which is stored temporarily in MERGE_HEAD.</source>
          <target state="translated">この衝突を解決した後にコミットされるコミットは、通常の親の代わりに二つの親を持つことを覚えておいてください:一つの親は現在のブランチの先端である HEAD になり、もう一つの親は他のブランチの先端になります。</target>
        </trans-unit>
        <trans-unit id="9f6cd666ff59558e35fc1e4987f55228a4aa839c" translate="yes" xml:space="preserve">
          <source>Receive missing objects from another repository</source>
          <target state="translated">他のリポジトリから欠落しているオブジェクトを受け取る</target>
        </trans-unit>
        <trans-unit id="3a1414f04e5ec5736bdcd32788841a475c616871" translate="yes" xml:space="preserve">
          <source>Receive what is pushed into the repository</source>
          <target state="translated">リポジトリにプッシュされたものを受け取る</target>
        </trans-unit>
        <trans-unit id="ca8f48326e259b3e6bb0b952b7bb30d324f93b41" translate="yes" xml:space="preserve">
          <source>Recipe: Copy maint</source>
          <target state="translated">レシピです。コピーメイン</target>
        </trans-unit>
        <trans-unit id="53d4283d5e8f18dd173ab180112f372c62ec5838" translate="yes" xml:space="preserve">
          <source>Recipe: Push/pull: Merging remote topics</source>
          <target state="translated">レシピです。プッシュ/プル。リモートのトピックをマージする</target>
        </trans-unit>
        <trans-unit id="1f8640f7861cc46b56a1e4b42e9ca596b559f6db" translate="yes" xml:space="preserve">
          <source>Recipe: Push/pull: Publishing branches/topics</source>
          <target state="translated">レシピです。プッシュ/プル。出版のブランチ/トピック</target>
        </trans-unit>
        <trans-unit id="3a17d2c389fe13fb57af10dbacfb6b3db024c7c4" translate="yes" xml:space="preserve">
          <source>Recipe: Push/pull: Staying up to date</source>
          <target state="translated">レシピです。プッシュ/プル。最新の状態を維持する</target>
        </trans-unit>
        <trans-unit id="02b6d43b8510b59229854c014a4620861f29d737" translate="yes" xml:space="preserve">
          <source>Recipe: Release tagging</source>
          <target state="translated">レシピです。タグの解除</target>
        </trans-unit>
        <trans-unit id="9d28e02794d321eb00b6d5b97832a596837552b2" translate="yes" xml:space="preserve">
          <source>Recipe: Rewind and rebuild next</source>
          <target state="translated">レシピ。巻き戻しと次の再構築</target>
        </trans-unit>
        <trans-unit id="f8152ab6d8ec6437faa103dde674cb065aa68613" translate="yes" xml:space="preserve">
          <source>Recipe: Update maint to new release</source>
          <target state="translated">レシピを紹介します。メインを新しいリリースに更新します。</target>
        </trans-unit>
        <trans-unit id="29ee8bda8dd5e0f017624c7f75aa875a53804d32" translate="yes" xml:space="preserve">
          <source>Recipe: Verify &lt;em&gt;master&lt;/em&gt; is a superset of &lt;em&gt;maint&lt;/em&gt;</source>
          <target state="translated">レシピ：&lt;em&gt;マスター&lt;/em&gt;が&lt;em&gt;メイントの&lt;/em&gt;スーパーセットであることを&lt;em&gt;確認する&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ffd09f97e74a882a55504c37b0826f564e6b1346" translate="yes" xml:space="preserve">
          <source>Recipe: format-patch/am: Importing patches</source>
          <target state="translated">レシピ:format-patch/am.パッチのインポート</target>
        </trans-unit>
        <trans-unit id="363c9c30e4fafba7e8fc9192a52c83213c41b8ac" translate="yes" xml:space="preserve">
          <source>Recipe: format-patch/am: Keeping topics up to date</source>
          <target state="translated">レシピ:format-patch/am.トピックを最新の状態に保つ</target>
        </trans-unit>
        <trans-unit id="677a69c96c088fbfbe55531cae388f0a94e79290" translate="yes" xml:space="preserve">
          <source>Recipe: format-patch/am: Publishing branches/topics</source>
          <target state="translated">レシピ:format-patch/am.出版ブランチ/トピック</target>
        </trans-unit>
        <trans-unit id="7c405acad54185184a3b50d9aee58d7a13bab6ed" translate="yes" xml:space="preserve">
          <source>Recompress, remove unused cruft:</source>
          <target state="translated">再圧縮して、使われていないゴミを取り除きます。</target>
        </trans-unit>
        <trans-unit id="257831ab2bd13a64966a7f962a9574ea39ef3108" translate="yes" xml:space="preserve">
          <source>Record changes to the repository</source>
          <target state="translated">リポジトリへの変更を記録する</target>
        </trans-unit>
        <trans-unit id="13168b3a0cbb28fba7cf06c3c640480d4de874bc" translate="yes" xml:space="preserve">
          <source>Record only the fact that the path will be added later. An entry for the path is placed in the index with no content. This is useful for, among other things, showing the unstaged content of such files with &lt;code&gt;git diff&lt;/code&gt; and committing them with &lt;code&gt;git commit
-a&lt;/code&gt;.</source>
          <target state="translated">パスが後で追加されることだけを記録します。パスのエントリがコンテンツなしでインデックスに配置されます。これは、とりわけ、そのようなファイルのステージされていないコンテンツを &lt;code&gt;git diff&lt;/code&gt; で表示し、 &lt;code&gt;git commit -a&lt;/code&gt; 役立ちます。</target>
        </trans-unit>
        <trans-unit id="908f8c6524a9d1fb52d4fa427c4917cc570c6355" translate="yes" xml:space="preserve">
          <source>Record that a mark refers to a given object without first creating any new object.</source>
          <target state="translated">最初に新しいオブジェクトを作成することなく、マークが与えられたオブジェクトを参照していることを記録します。</target>
        </trans-unit>
        <trans-unit id="59ee078874bbbc459021c0c530f38bc7aaf471b2" translate="yes" xml:space="preserve">
          <source>Record that a mark refers to a given object without first creating any new object. Using --import-marks and referring to missing marks will cause fast-import to fail, so aliases can provide a way to set otherwise pruned commits to a valid value (e.g. the nearest non-pruned ancestor).</source>
          <target state="translated">マークが与えられたオブジェクトを参照していることを記録します。そのため、エイリアスを使うことで、剪定されていないコミットを有効な値に設定する方法を提供することができます (例えば、剪定されていない一番近い先祖の値など)。</target>
        </trans-unit>
        <trans-unit id="d6adcb873ab9c7cd434052b29bbda78059575713" translate="yes" xml:space="preserve">
          <source>Record the base tree information to identify the state the patch series applies to. See the BASE TREE INFORMATION section below for details. If &amp;lt;commit&amp;gt; is &quot;auto&quot;, a base commit is automatically chosen. The &lt;code&gt;--no-base&lt;/code&gt; option overrides a &lt;code&gt;format.useAutoBase&lt;/code&gt; configuration.</source>
          <target state="translated">ベースツリー情報を記録して、パッチシリーズが適用される状態を特定します。詳細については、以下の「基本ツリー情報」セクションを参照してください。&amp;lt;commit&amp;gt;が &quot;auto&quot;の場合、ベースコミットが自動的に選択されます。 &lt;code&gt;--no-base&lt;/code&gt; オプションが優先されます &lt;code&gt;format.useAutoBase&lt;/code&gt; の設定を。</target>
        </trans-unit>
        <trans-unit id="1df60f45066883b70333fa04c8ca0ea0ac9a963e" translate="yes" xml:space="preserve">
          <source>Record the pristine state as the first commit in the history.</source>
          <target state="translated">原始状態を史上初のコミットとして記録する。</target>
        </trans-unit>
        <trans-unit id="2779532bfc36fb35edea59aae8e6a7c58766f0fd" translate="yes" xml:space="preserve">
          <source>Records all changes made to the branch tip named &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; という名前のブランチチップに加えられたすべての変更を記録します。</target>
        </trans-unit>
        <trans-unit id="e26cb9a4392a1984a3c8c89ac8ba4d1939bfa972" translate="yes" xml:space="preserve">
          <source>Records all changes made to the tag named &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; という名前のタグに加えられたすべての変更を記録します。</target>
        </trans-unit>
        <trans-unit id="b4426300ccfff51ab94cf09d14eb70cb666bb2d4" translate="yes" xml:space="preserve">
          <source>Records of changes made to refs are stored in this directory. See &lt;a href=&quot;git-update-ref&quot;&gt;git-update-ref[1]&lt;/a&gt; for more information. This directory is ignored (except logs/HEAD) if $GIT_COMMON_DIR is set and &quot;$GIT_COMMON_DIR/logs&quot; will be used instead.</source>
          <target state="translated">refに加えられた変更の記録は、このディレクトリに格納されます。詳細については、&lt;a href=&quot;git-update-ref&quot;&gt;git-update-ref [1]&lt;/a&gt;を参照してください。$ GIT_COMMON_DIRが設定されており、代わりに &quot;$ GIT_COMMON_DIR / logs&quot;が使用される場合、このディレクトリは無視されます（logs / HEADを除く）。</target>
        </trans-unit>
        <trans-unit id="4dfb1dccefe8c5960e96ace8700ff3694a2adfa8" translate="yes" xml:space="preserve">
          <source>Records of conflicted merge you have not resolved are kept for this many days when &lt;code&gt;git rerere gc&lt;/code&gt; is run. You can also use more human-readable &quot;1.month.ago&quot;, etc. The default is 15 days. See &lt;a href=&quot;git-rerere&quot;&gt;git-rerere[1]&lt;/a&gt;.</source>
          <target state="translated">解決していない競合したマージの記録は、 &lt;code&gt;git rerere gc&lt;/code&gt; が実行されるこの数日間保持されます。人間が読める「1.month.ago」などを使用することもできます。デフォルトは15日です。&lt;a href=&quot;git-rerere&quot;&gt;git-rerere [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0041a23358783dc658fb86af817bd1e3c4818754" translate="yes" xml:space="preserve">
          <source>Records of conflicted merge you resolved earlier are kept for this many days when &lt;code&gt;git rerere gc&lt;/code&gt; is run. You can also use more human-readable &quot;1.month.ago&quot;, etc. The default is 60 days. See &lt;a href=&quot;git-rerere&quot;&gt;git-rerere[1]&lt;/a&gt;.</source>
          <target state="translated">以前に解決した競合するマージの記録は、 &lt;code&gt;git rerere gc&lt;/code&gt; が実行されるこの数日間保持されます。人間が読める「1.month.ago」などを使用することもできます。デフォルトは60日です。&lt;a href=&quot;git-rerere&quot;&gt;git-rerere [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6f27ef1289a3377cd529d96e1d59f394c9d2e51b" translate="yes" xml:space="preserve">
          <source>Recovering from repository corruption</source>
          <target state="translated">リポジトリの破損からの復旧</target>
        </trans-unit>
        <trans-unit id="45b084fa0ec2bcf4d8887dcc1ed74808ce39dd65" translate="yes" xml:space="preserve">
          <source>Recovering from upstream rebase</source>
          <target state="translated">上流のリベースからの回復</target>
        </trans-unit>
        <trans-unit id="a2b2e17c2700a078248ea4a8793fdeb963f1e774" translate="yes" xml:space="preserve">
          <source>Recovering lost changes</source>
          <target state="translated">失われた変化を回復する</target>
        </trans-unit>
        <trans-unit id="c9f9ed2d4080ff53397fc95e602ba0c0a8018150" translate="yes" xml:space="preserve">
          <source>Recovering stash entries that were cleared/dropped erroneously</source>
          <target state="translated">誤ってクリア/ドロップされたスタッシュエントリの復元</target>
        </trans-unit>
        <trans-unit id="07417b29bf5742eeb9def793a7c341803a4ae6cf" translate="yes" xml:space="preserve">
          <source>Recurse into sub-trees.</source>
          <target state="translated">サブツリーに再帰する。</target>
        </trans-unit>
        <trans-unit id="b71ca4a78b12182052bd243bd7fb2b5a8710c342" translate="yes" xml:space="preserve">
          <source>Recursively calls ls-files on each submodule in the repository. Currently there is only support for the --cached mode.</source>
          <target state="translated">リポジトリ内の各サブモジュール上で ls-file を再帰的に呼び出します。現在は --cached モードしかサポートされていません。</target>
        </trans-unit>
        <trans-unit id="9594ad54e61dba1e097011c1262a0e12523ac73c" translate="yes" xml:space="preserve">
          <source>Recursively copies an existing file or subdirectory to a different location within the branch. The existing file or directory must exist. If the destination exists it will be completely replaced by the content copied from the source.</source>
          <target state="translated">既存のファイルやサブディレクトリを、ブランチ内の別の場所に再帰的にコピーします。既存のファイルまたはディレクトリが存在しなければなりません。コピー先が存在する場合は、コピー元からコピーした内容で完全に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="784c487e0b0ebf6146a806df2269e12c1733d014" translate="yes" xml:space="preserve">
          <source>Recursively finds and lists the svn:ignore property on directories. The output is suitable for appending to the $GIT_DIR/info/exclude file.</source>
          <target state="translated">ディレクトリの svn:ignore プロパティを再帰的に検索し、リストアップします。出力は $GIT_DIR/info/exclude ファイルに追加するのに適しています。</target>
        </trans-unit>
        <trans-unit id="8a1182cccab09515529f5c8d920459a7ff2c3ff2" translate="yes" xml:space="preserve">
          <source>Recursively finds the svn:ignore property on directories and creates matching .gitignore files. The resulting files are staged to be committed, but are not committed. Use -r/--revision to refer to a specific revision.</source>
          <target state="translated">ディレクトリの svn:ignore プロパティを再帰的に見つけ、一致する .gitignore ファイルを作成します。作成されたファイルはコミットされるようにステージングされますが、コミットされることはありません。特定のリビジョンを参照するには -r/--revision を使用します。</target>
        </trans-unit>
        <trans-unit id="8cf2dd32a75d92cd5c31b8e357091014ef76d06b" translate="yes" xml:space="preserve">
          <source>Recursively search in each submodule that has been initialized and checked out in the repository. When used in combination with the &amp;lt;tree&amp;gt; option the prefix of all submodule output will be the name of the parent project&amp;rsquo;s &amp;lt;tree&amp;gt; object.</source>
          <target state="translated">初期化され、リポジトリでチェックアウトされた各サブモジュールを再帰的に検索します。&amp;lt;tree&amp;gt;オプションと組み合わせて使用​​すると、すべてのサブモジュール出力のプレフィックスは、親プロジェクトの&amp;lt;tree&amp;gt;オブジェクトの名前になります。</target>
        </trans-unit>
        <trans-unit id="c70c81b356beafd0eeca89b16d9fdcb5f7371848" translate="yes" xml:space="preserve">
          <source>Redirection to a file (&lt;code&gt;/path/name&lt;/code&gt;) or pipe (&lt;code&gt;|command&lt;/code&gt;) is not supported.</source>
          <target state="translated">ファイル（ &lt;code&gt;/path/name&lt;/code&gt; ）またはパイプ（ &lt;code&gt;|command&lt;/code&gt; ）へのリダイレクトはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="89381280eddd66ed8601a4438d83804ded19d6ef" translate="yes" xml:space="preserve">
          <source>Reencoding content requires resources that might slow down certain Git operations (e.g &lt;code&gt;git checkout&lt;/code&gt; or &lt;code&gt;git add&lt;/code&gt;).</source>
          <target state="translated">コンテンツを再エンコードするには、特定のGit操作を遅くする可能性のあるリソースが必要です（例： &lt;code&gt;git checkout&lt;/code&gt; や &lt;code&gt;git add&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4d5f4726578da60b5802012abfa0452d24f12476" translate="yes" xml:space="preserve">
          <source>Reencoding content to non-UTF encodings can cause errors as the conversion might not be UTF-8 round trip safe. If you suspect your encoding to not be round trip safe, then add it to &lt;code&gt;core.checkRoundtripEncoding&lt;/code&gt; to make Git check the round trip encoding (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). SHIFT-JIS (Japanese character set) is known to have round trip issues with UTF-8 and is checked by default.</source>
          <target state="translated">コンテンツを非UTFエンコーディングに再エンコードすると、変換がUTF-8ラウンドセーフではない可能性があるため、エラーが発生する可能性があります。エンコーディングがラウンドトリップセーフではないと思われる場合は、それを &lt;code&gt;core.checkRoundtripEncoding&lt;/code&gt; に追加して、Gitにラウンドトリップエンコーディングをチェックさせます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。 SHIFT-JIS（日本語文字セット）には、UTF-8での往復の問題があることが知られており、デフォルトでチェックされています。</target>
        </trans-unit>
        <trans-unit id="f60624f9fc2a82abf8497341d9d81b9d0824e3d8" translate="yes" xml:space="preserve">
          <source>Ref list attributes</source>
          <target state="translated">参照リスト属性</target>
        </trans-unit>
        <trans-unit id="042501eba486c2a8fe3dfeebed7e6a526acc65b2" translate="yes" xml:space="preserve">
          <source>Refer to trace2.h for details about all trace2 functions.</source>
          <target state="translated">すべての trace2 関数の詳細については trace2.h を参照してください。</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="8189e74b00341c8128de1c9b04b6630dfed40f88" translate="yes" xml:space="preserve">
          <source>Reference advertisement will be omitted unless explicitly requested</source>
          <target state="translated">参照広告は、明示的に要請がない限り省略します。</target>
        </trans-unit>
        <trans-unit id="219616f872f3c1f3f7c63db96c4bad5707f937ab" translate="yes" xml:space="preserve">
          <source>Reference logs, or &quot;reflogs&quot;, record when the tips of branches and other references were updated in the local repository. Reflogs are useful in various Git commands, to specify the old value of a reference. For example, &lt;code&gt;HEAD@{2}&lt;/code&gt; means &quot;where HEAD used to be two moves ago&quot;, &lt;code&gt;master@{one.week.ago}&lt;/code&gt; means &quot;where master used to point to one week ago in this local repository&quot;, and so on. See &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; for more details.</source>
          <target state="translated">参照ログ、つまり「reflogs」は、ブランチのヒントやその他の参照がローカルリポジトリで更新された日時を記録します。 Reflogは、参照の古い値を指定するために、さまざまなGitコマンドで役立ちます。たとえば、 &lt;code&gt;HEAD@{2}&lt;/code&gt; は「HEADが2移動前に使用されていた場所」を意味し、 &lt;code&gt;master@{one.week.ago}&lt;/code&gt; @ { one.week.ago}は「マスターがこのローカルリポジトリで1週間前を指していた場所」を意味します。詳細については、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="fdc0add895cb5f66656ac926ee760b1a52ebfc92" translate="yes" xml:space="preserve">
          <source>References are stored in subdirectories of this directory. The &lt;code&gt;git prune&lt;/code&gt; command knows to preserve objects reachable from refs found in this directory and its subdirectories. This directory is ignored (except refs/bisect, refs/rewritten and refs/worktree) if $GIT_COMMON_DIR is set and &quot;$GIT_COMMON_DIR/refs&quot; will be used instead.</source>
          <target state="translated">参照は、このディレクトリのサブディレクトリに保存されます。 &lt;code&gt;git prune&lt;/code&gt; コマンドは、このディレクトリとそのサブディレクトリで見つかった参照文献から到達可能なオブジェクトを保持するために知っています。 $ GIT_COMMON_DIRが設定され、代わりに「$ GIT_COMMON_DIR / refs」が使用される場合、このディレクトリは無視されます（refs / bisect、refs / rewrittenおよびrefs / worktreeを除く）。</target>
        </trans-unit>
        <trans-unit id="a774e5bc9f4a8942d74474f466fea367c3f9fc07" translate="yes" xml:space="preserve">
          <source>References to commit objects at the head of each branch are stored in files under .git/refs/heads/.</source>
          <target state="translated">各ブランチの先頭にあるコミットオブジェクトへの参照は .git/refs/heads/以下のファイルに格納されます。</target>
        </trans-unit>
        <trans-unit id="586454a22a42afbc6e2564872cf76fa552b4a1a3" translate="yes" xml:space="preserve">
          <source>Reflogs</source>
          <target state="translated">Reflogs</target>
        </trans-unit>
        <trans-unit id="701486a68f3896a8a5368aead277807a6847151f" translate="yes" xml:space="preserve">
          <source>Refs</source>
          <target state="translated">Refs</target>
        </trans-unit>
        <trans-unit id="80074f188ddb96f7955691b6a7210a31a672772d" translate="yes" xml:space="preserve">
          <source>Refs are grouped into islands based on their &quot;names&quot;, and two regexes that produce the same name are considered to be in the same island. The names are computed from the regexes by concatenating any capture groups from the regex, with a &lt;code&gt;-&lt;/code&gt; dash in between. (And if there are no capture groups, then the name is the empty string, as in the above example.) This allows you to create arbitrary numbers of islands. Only up to 14 such capture groups are supported though.</source>
          <target state="translated">参照は「名前」に基づいてアイランドにグループ化され、同じ名前を生成する2つの正規表現は同じアイランドにあると見なされます。名前は、正規表現からのキャプチャグループを &lt;code&gt;-&lt;/code&gt; ダッシュで連結して、正規表現から計算されます。（そして、キャプチャグループがない場合、名前は上記の例のように空の文字列になります。）これにより、任意の数のアイランドを作成できます。ただし、このようなキャプチャグループは14までしかサポートされていません。</target>
        </trans-unit>
        <trans-unit id="2bb2083cc2f447acfd0f5d16022129235ca5b2cc" translate="yes" xml:space="preserve">
          <source>Refs that are per working tree can still be accessed from another working tree via two special paths, main-worktree and worktrees. The former gives access to per-worktree refs of the main working tree, while the latter to all linked working trees.</source>
          <target state="translated">ワーキングツリーごとの参照は、メインワークツリーとワークツリーの2つの特別なパスを経由して、別のワーキングツリーからアクセスすることができます。前者はメイン作業木の作業木単位の参照にアクセスでき、後者はリンクされたすべての作業木にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="05e5994fa9181b6fad85ee509538c0ad6a6bc5c4" translate="yes" xml:space="preserve">
          <source>Refs that are per-&lt;a href=&quot;#def_working_tree&quot;&gt;worktree&lt;/a&gt;, rather than global. This is presently only &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; and any refs that start with &lt;code&gt;refs/bisect/&lt;/code&gt;, but might later include other unusual refs.</source>
          <target state="translated">パーいる参考文献&lt;a href=&quot;#def_working_tree&quot;&gt;worktree&lt;/a&gt;ではなくグローバルに比べ、。現在、これは&lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt;および &lt;code&gt;refs/bisect/&lt;/code&gt; で始まるすべての参照のみですが、後で他の異常な参照が含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="338d2a0e12d851337309cef01e7fe887153b0f55" translate="yes" xml:space="preserve">
          <source>Regardless of object type, all objects share the following characteristics: they are all deflated with zlib, and have a header that not only specifies their type, but also provides size information about the data in the object. It&amp;rsquo;s worth noting that the SHA-1 hash that is used to name the object is the hash of the original data plus this header, so &lt;code&gt;sha1sum&lt;/code&gt; 'file' does not match the object name for 'file'.</source>
          <target state="translated">オブジェクトタイプに関係なく、すべてのオブジェクトは次の特性を共有します。すべてのオブジェクトはzlibで圧縮されており、ヘッダーにはオブジェクトのタイプを指定するだけでなく、オブジェクト内のデータに関するサイズ情報も含まれています。オブジェクトの名前に使用されるSHA-1ハッシュは、元のデータとこのヘッダーを加えたハッシュであるため、 &lt;code&gt;sha1sum&lt;/code&gt; 'file'は 'file'のオブジェクト名と一致しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="710a95e624a3349545888a56ed2557d883a0ebee" translate="yes" xml:space="preserve">
          <source>Region and Data Messages</source>
          <target state="translated">地域とデータメッセージ</target>
        </trans-unit>
        <trans-unit id="039711232507cd9753ddba093da2350b27e67dca" translate="yes" xml:space="preserve">
          <source>Regions</source>
          <target state="translated">Regions</target>
        </trans-unit>
        <trans-unit id="f60734f6521040c876486255fe253adea3ef4364" translate="yes" xml:space="preserve">
          <source>Regions can be use to time an interesting section of code.</source>
          <target state="translated">リージョンは、コードの興味深いセクションの時間を設定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="e6931aebd376c6a517eae391382acbc891d72f65" translate="yes" xml:space="preserve">
          <source>Regions may be nested. This causes messages to be indented in the PERF target, for example. Elapsed times are relative to the start of the corresponding nesting level as expected. For example, if we add region message to:</source>
          <target state="translated">リージョンは入れ子にすることができます。これにより、例えばPERFターゲットではメッセージがインデントされます。経過時間は、予想通り、対応する入れ子レベルの開始時刻からの相対的なものです。例えば、リージョンメッセージを</target>
        </trans-unit>
        <trans-unit id="1595f1bb6d790a7a3e5eb6fb03765aabf279806d" translate="yes" xml:space="preserve">
          <source>Register file contents in the working tree to the index</source>
          <target state="translated">作業ツリー内のファイルの内容をインデックスに登録する</target>
        </trans-unit>
        <trans-unit id="8a6eb409adc691aa11f00dc05c7a129c2f833328" translate="yes" xml:space="preserve">
          <source>Regressions are a big problem in the software industry. But it&amp;rsquo;s difficult to put some real numbers behind that claim.</source>
          <target state="translated">ソフトウェア業界では、回帰は大きな問題です。しかし、その主張の背後にいくつかの実数を置くことは困難です。</target>
        </trans-unit>
        <trans-unit id="4ab9d6c175961a8739069a73845c7f8b21150d86" translate="yes" xml:space="preserve">
          <source>Regressions: a big problem</source>
          <target state="translated">回帰:大きな問題</target>
        </trans-unit>
        <trans-unit id="2256cc6ee2a5d077491a8a63ef76ac743c25d2d2" translate="yes" xml:space="preserve">
          <source>Related links</source>
          <target state="translated">関連リンク</target>
        </trans-unit>
        <trans-unit id="b61e20d1d031c57060b03654349b1ab448029094" translate="yes" xml:space="preserve">
          <source>Relationship to the Existing Trace Api (api-trace.txt)</source>
          <target state="translated">既存のトレース API との関係 (api-trace.txt)</target>
        </trans-unit>
        <trans-unit id="a5807b40eca9f80054603fbc4a7d22e009d2c415" translate="yes" xml:space="preserve">
          <source>Relative and non-relative marks may be combined by interweaving --(no-)-relative-marks with the --(import|export)-marks= options.</source>
          <target state="translated">相対マークと非相対マークは、--(no-)-相対マークを--(import|export)-mark=オプションで織り交ぜることで組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="31bc43768c6a353840de5e162fcf9b5cce4d9437" translate="yes" xml:space="preserve">
          <source>Relative to the tip of &lt;code&gt;topic&lt;/code&gt;: knowing that your &lt;code&gt;topic&lt;/code&gt; has three commits, the old tip of &lt;code&gt;subsystem&lt;/code&gt; must be &lt;code&gt;topic~3&lt;/code&gt;.</source>
          <target state="translated">先端に相対 &lt;code&gt;topic&lt;/code&gt; ：あなたのことを知っている &lt;code&gt;topic&lt;/code&gt; 3つのコミットを持っている、古い先端 &lt;code&gt;subsystem&lt;/code&gt; なければなりません &lt;code&gt;topic~3&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98786341673b229d09cd6bac6df5f38262cac094" translate="yes" xml:space="preserve">
          <source>Remain silent even on nonexistent files</source>
          <target state="translated">存在しないファイルでも沈黙を保つ</target>
        </trans-unit>
        <trans-unit id="cad2c2939c304ff819eff58f792783f6747c93cf" translate="yes" xml:space="preserve">
          <source>Remap all the path requests as relative to the given path. This is sort of &quot;Git root&quot; - if you run &lt;code&gt;git daemon&lt;/code&gt; with &lt;code&gt;--base-path=/srv/git&lt;/code&gt; on example.com, then if you later try to pull &lt;code&gt;git://example.com/hello.git&lt;/code&gt;, &lt;code&gt;git daemon&lt;/code&gt; will interpret the path as &lt;code&gt;/srv/git/hello.git&lt;/code&gt;.</source>
          <target state="translated">指定されたパスを基準にして、すべてのパス要求を再マップします。これは一種の「Gitルート」です &lt;code&gt;--base-path=/srv/git&lt;/code&gt; で--base-path = / srv / gitを指定して &lt;code&gt;git daemon&lt;/code&gt; を実行した場合、後で &lt;code&gt;git://example.com/hello.git&lt;/code&gt; をプルしようとすると、 &lt;code&gt;git daemon&lt;/code&gt; はパスを &lt;code&gt;/srv/git/hello.git&lt;/code&gt; と解釈します。</target>
        </trans-unit>
        <trans-unit id="4a5c393fce9fb8dc0d691f13288d22c0e7f1b235" translate="yes" xml:space="preserve">
          <source>Remap to ancestor</source>
          <target state="translated">先祖へのリマップ</target>
        </trans-unit>
        <trans-unit id="8d0121936c456fcf3d222b828ee9077e2cc34843" translate="yes" xml:space="preserve">
          <source>Remember how we did the &lt;code&gt;git update-index&lt;/code&gt; on file &lt;code&gt;hello&lt;/code&gt; and then we changed &lt;code&gt;hello&lt;/code&gt; afterward, and could compare the new state of &lt;code&gt;hello&lt;/code&gt; with the state we saved in the index file?</source>
          <target state="translated">私たちがやったか覚えている &lt;code&gt;git update-index&lt;/code&gt; ファイルに &lt;code&gt;hello&lt;/code&gt; して、私たちは変わっ &lt;code&gt;hello&lt;/code&gt; その後、との新しい状態を比較でき &lt;code&gt;hello&lt;/code&gt; 私たちはインデックスファイルに保存された状態で？</target>
        </trans-unit>
        <trans-unit id="2cc52de1f31f7df8236151d526db4f676cdfb905" translate="yes" xml:space="preserve">
          <source>Remember, before running &lt;code&gt;git merge&lt;/code&gt;, our &lt;code&gt;master&lt;/code&gt; head was at &quot;Some fun.&quot; commit, while our &lt;code&gt;mybranch&lt;/code&gt; head was at &quot;Some work.&quot; commit.</source>
          <target state="translated">&lt;code&gt;git merge&lt;/code&gt; を実行する前は、 &lt;code&gt;master&lt;/code&gt; ヘッドが「Some fun」にあったことを覚えておいてください。 &lt;code&gt;mybranch&lt;/code&gt; の頭が &quot;Some work&quot; にある間、コミットします。コミット。</target>
        </trans-unit>
        <trans-unit id="3e534e3639a4dd02297fd7fd07ede8a71c71535e" translate="yes" xml:space="preserve">
          <source>Remote HEAD must resolve to an object that exists locally</source>
          <target state="translated">リモートHEADは、ローカルに存在するオブジェクトに解決しなければなりません。</target>
        </trans-unit>
        <trans-unit id="2033891925fe29daa47f6c451af0f18a87529563" translate="yes" xml:space="preserve">
          <source>Remote helper programs are invoked with one or (optionally) two arguments. The first argument specifies a remote repository as in Git; it is either the name of a configured remote or a URL. The second argument specifies a URL; it is usually of the form &lt;code&gt;&amp;lt;transport&amp;gt;://&amp;lt;address&amp;gt;&lt;/code&gt;, but any arbitrary string is possible. The &lt;code&gt;GIT_DIR&lt;/code&gt; environment variable is set up for the remote helper and can be used to determine where to store additional data or from which directory to invoke auxiliary Git commands.</source>
          <target state="translated">リモートヘルパープログラムは、1つまたは（オプションで）2つの引数で呼び出されます。最初の引数は、Gitのようにリモートリポジトリを指定します。これは、構成されたリモートの名前またはURLのいずれかです。2番目の引数はURLを指定します。通常は &lt;code&gt;&amp;lt;transport&amp;gt;://&amp;lt;address&amp;gt;&lt;/code&gt; の形式ですが、任意の文字列が可能です。 &lt;code&gt;GIT_DIR&lt;/code&gt; の環境変数は、リモート・ヘルパー用に設定されており、ここで補助Gitのコマンドを起動するための追加データまたはディレクトリからを格納するかを決定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="8ee4f73d380c3c99d59209a069206bbd667c2977" translate="yes" xml:space="preserve">
          <source>Remote helper programs are normally not used directly by end users, but they are invoked by Git when it needs to interact with remote repositories Git does not support natively. A given helper will implement a subset of the capabilities documented here. When Git needs to interact with a repository using a remote helper, it spawns the helper as an independent process, sends commands to the helper&amp;rsquo;s standard input, and expects results from the helper&amp;rsquo;s standard output. Because a remote helper runs as an independent process from Git, there is no need to re-link Git to add a new helper, nor any need to link the helper with the implementation of Git.</source>
          <target state="translated">リモートヘルパープログラムは通常、エンドユーザーが直接使用することはありませんが、リモートリポジトリとやり取りする必要があるときにGitによって呼び出されます。Gitはネイティブでサポートしていません。特定のヘルパーは、ここで説明されている機能のサブセットを実装します。 Gitがリモートヘルパーを使用してリポジトリと対話する必要がある場合、Gitはヘルパーを独立したプロセスとして起動し、ヘルパーの標準入力にコマンドを送信し、ヘルパーの標準出力からの結果を期待します。リモートヘルパーはGitから独立したプロセスとして実行されるため、Gitを再リンクして新しいヘルパーを追加する必要はなく、ヘルパーをGitの実装にリンクする必要もありません。</target>
        </trans-unit>
        <trans-unit id="7f9d958435b39dd5e8519bc9a5ca0b414455c52e" translate="yes" xml:space="preserve">
          <source>Remotes</source>
          <target state="translated">Remotes</target>
        </trans-unit>
        <trans-unit id="1d36d5e98f5289fdb40f6238091d921b16cd3d1b" translate="yes" xml:space="preserve">
          <source>Remove &amp;lt;n&amp;gt; leading path components (separated by slashes) from traditional diff paths. E.g., with &lt;code&gt;-p2&lt;/code&gt;, a patch against &lt;code&gt;a/dir/file&lt;/code&gt; will be applied directly to &lt;code&gt;file&lt;/code&gt;. The default is 1.</source>
          <target state="translated">従来の差分パスから&amp;lt;n&amp;gt;の先行パスコンポーネント（スラッシュで区切られた）を削除します。たとえば、 &lt;code&gt;-p2&lt;/code&gt; を使用すると &lt;code&gt;a/dir/file&lt;/code&gt; に対するパッチが &lt;code&gt;file&lt;/code&gt; に直接適用されます。デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="536f22b2b28f4e056331357f5ffb90610418f296" translate="yes" xml:space="preserve">
          <source>Remove &amp;lt;ref&amp;gt; from remote repository. The specified branch cannot be the remote HEAD. If -d is specified the following other conditions must also be met:</source>
          <target state="translated">リモートリポジトリから&amp;lt;ref&amp;gt;を削除します。指定されたブランチをリモートHEADにすることはできません。-dが指定されている場合、以下の他の条件も満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="9a577cbb08edd5d9773523cfc5cfe43dc9b03f45" translate="yes" xml:space="preserve">
          <source>Remove a single stash entry from the list of stash entries. When no &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; is given, it removes the latest one. i.e. &lt;code&gt;stash@{0}&lt;/code&gt;, otherwise &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; must be a valid stash log reference of the form &lt;code&gt;stash@{&amp;lt;revision&amp;gt;}&lt;/code&gt;.</source>
          <target state="translated">stashエントリーのリストから単一のstashエントリーを削除します。 &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; が指定されていない場合は、最新のものを削除します。つまり、 &lt;code&gt;stash@{0}&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; は &lt;code&gt;stash@{&amp;lt;revision&amp;gt;}&lt;/code&gt; 形式の有効なstashログ参照である必要があります。</target>
        </trans-unit>
        <trans-unit id="729e5fd8775c30c358fedf9e611fd4f6f670b5e7" translate="yes" xml:space="preserve">
          <source>Remove a single stashed state from the stash list and apply it on top of the current working tree state, i.e., do the inverse operation of &lt;code&gt;git stash push&lt;/code&gt;. The working directory must match the index.</source>
          <target state="translated">stashリストから1つのstash状態を削除し、それを現在の作業ツリー状態の上に適用します。つまり、 &lt;code&gt;git stash push&lt;/code&gt; の逆の操作を行います。作業ディレクトリはインデックスと一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="d34ae9e19d54c7604c479f4c5964ccef00bd4a98" translate="yes" xml:space="preserve">
          <source>Remove a working tree. Only clean working trees (no untracked files and no modification in tracked files) can be removed. Unclean working trees or ones with submodules can be removed with &lt;code&gt;--force&lt;/code&gt;. The main working tree cannot be removed.</source>
          <target state="translated">作業ツリーを削除します。削除できるのは、クリーンな作業ツリーのみ（追跡されていないファイルや追跡されているファイルの変更はありません）です。クリーンでない作業ツリーまたはサブモジュールを持つ作業ツリーは、-- &lt;code&gt;--force&lt;/code&gt; で削除できます。メインの作業ツリーは削除できません。</target>
        </trans-unit>
        <trans-unit id="df5a8d70d2380181bdc059d7c2ddc0a78e9d1412" translate="yes" xml:space="preserve">
          <source>Remove all lines matching the key from config file.</source>
          <target state="translated">設定ファイルからキーに一致する行をすべて削除します。</target>
        </trans-unit>
        <trans-unit id="9fc0230ddf082dc45699878be1634350de11665f" translate="yes" xml:space="preserve">
          <source>Remove all notes for non-existing/unreachable objects.</source>
          <target state="translated">存在しない/到達不可能なオブジェクトのノートをすべて削除します。</target>
        </trans-unit>
        <trans-unit id="fc1b4600e49f3115828b9f3463a6567fd85094fb" translate="yes" xml:space="preserve">
          <source>Remove all the stash entries. Note that those entries will then be subject to pruning, and may be impossible to recover (see &lt;code&gt;Examples&lt;/code&gt; below for a possible strategy).</source>
          <target state="translated">すべてのstashエントリーを削除します。これらのエントリーはプルーニングの対象となり、リカバリーできない可能性があることに注意してください（可能な戦略については、以下の &lt;code&gt;Examples&lt;/code&gt; 参照してください）。</target>
        </trans-unit>
        <trans-unit id="353e52e76ff6a9350e8485da73b547859aa497ce" translate="yes" xml:space="preserve">
          <source>Remove any whitespace-continuation in trailers, so that each trailer appears on a line by itself with its full content.</source>
          <target state="translated">予告編の空白-続きを削除して、各予告編がその内容の完全な内容と一緒に一行に表示されるようにします。</target>
        </trans-unit>
        <trans-unit id="de112945ec414c57cddaca5199f29ee2fc05a979" translate="yes" xml:space="preserve">
          <source>Remove directories from the SVN tree if there are no files left behind. SVN can version empty directories, and they are not removed by default if there are no files left in them. Git cannot version empty directories. Enabling this flag will make the commit to SVN act like Git.</source>
          <target state="translated">ファイルが残っていない場合、SVN ツリーからディレクトリを削除します。SVN は空のディレクトリのバージョン管理を行うことができ、ファイルが残っていない場合はデフォルトでは削除されません。Git は空のディレクトリをバージョン管理することはできません。このフラグを有効にすると、SVN へのコミットが Git のように動作するようになります。</target>
        </trans-unit>
        <trans-unit id="7e6c07487aafd5a1b8bbc132d0eb9f70eb39a580" translate="yes" xml:space="preserve">
          <source>Remove everything in body before a scissors line (see &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;). Can be activated by default using the &lt;code&gt;mailinfo.scissors&lt;/code&gt; configuration variable.</source>
          <target state="translated">はさみの行の前にある本文のすべてを削除します（&lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo [1]を&lt;/a&gt;参照）。 &lt;code&gt;mailinfo.scissors&lt;/code&gt; 構成変数を使用して、デフォルトでアクティブ化できます。</target>
        </trans-unit>
        <trans-unit id="399fc61abd5e53e0ff9fe12417324d78f931368d" translate="yes" xml:space="preserve">
          <source>Remove everything in body before a scissors line. A line that mainly consists of scissors (either &quot;&amp;gt;8&quot; or &quot;8&amp;lt;&quot;) and perforation (dash &quot;-&quot;) marks is called a scissors line, and is used to request the reader to cut the message at that line. If such a line appears in the body of the message before the patch, everything before it (including the scissors line itself) is ignored when this option is used.</source>
          <target state="translated">はさみラインの前に体のすべてを削除します。はさみ（ &quot;&amp;gt; 8&quot;または &quot;8 &amp;lt;&quot;）とミシン目（ダッシュ &quot;-&quot;）のマークで主に構成される線は、はさみ線と呼ばれ、その行でメッセージを切り取るようにリーダーに要求するために使用されます。このような行がパッチの前のメッセージの本文に表示される場合、このオプションを使用すると、その前のすべて（はさみの行自体を含む）は無視されます。</target>
        </trans-unit>
        <trans-unit id="3b6a842b7003d3eacad12733ce8974d4d54219eb" translate="yes" xml:space="preserve">
          <source>Remove extra objects that are already in pack files</source>
          <target state="translated">既にパックファイルに入っている余分なオブジェクトを削除する</target>
        </trans-unit>
        <trans-unit id="17839ee8fd6b46f8390b41c3ab4800fda5ea86c3" translate="yes" xml:space="preserve">
          <source>Remove files from the index, or from the working tree and the index. &lt;code&gt;git rm&lt;/code&gt; will not remove a file from just your working directory. (There is no option to remove a file only from the working tree and yet keep it in the index; use &lt;code&gt;/bin/rm&lt;/code&gt; if you want to do that.) The files being removed have to be identical to the tip of the branch, and no updates to their contents can be staged in the index, though that default behavior can be overridden with the &lt;code&gt;-f&lt;/code&gt; option. When &lt;code&gt;--cached&lt;/code&gt; is given, the staged content has to match either the tip of the branch or the file on disk, allowing the file to be removed from just the index.</source>
          <target state="translated">インデックスから、または作業ツリーとインデックスからファイルを削除します。 &lt;code&gt;git rm&lt;/code&gt; は作業ディレクトリからのみファイルを削除しません。 （作業ツリーからのみファイルを削除し、それをインデックスに保持するオプションはありません。削除する場合は、 &lt;code&gt;/bin/rm&lt;/code&gt; を使用してください。）削除するファイルは、ブランチの先端と同一である必要があります。また、その内容の更新はインデックスでステージングできませんが、デフォルトの動作は &lt;code&gt;-f&lt;/code&gt; オプションでオーバーライドできます。場合は &lt;code&gt;--cached&lt;/code&gt; が与えられ、段階的な内容は、ファイルがちょうどインデックスから削除することができるように、枝の先端またはディスク上のファイルのいずれかと一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="3cb238ca5adf89378484ddf4d733eeac1d7298bc" translate="yes" xml:space="preserve">
          <source>Remove files from the working tree and from the index</source>
          <target state="translated">作業ツリーとインデックスからファイルを削除します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
