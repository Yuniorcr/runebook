<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="a8fe9598336f37cb9328ca8052e59b151a7933de" translate="yes" xml:space="preserve">
          <source>Text viewer for use by Git commands (e.g., &lt;code&gt;less&lt;/code&gt;). The value is meant to be interpreted by the shell. The order of preference is the &lt;code&gt;$GIT_PAGER&lt;/code&gt; environment variable, then &lt;code&gt;core.pager&lt;/code&gt; configuration, then &lt;code&gt;$PAGER&lt;/code&gt;, and then the default chosen at compile time (usually &lt;code&gt;less&lt;/code&gt;).</source>
          <target state="translated">Gitコマンド（ &lt;code&gt;less&lt;/code&gt; など）で使用するテキストビューア。この値は、シェルによって解釈されることを意図しています。優先順位は、 &lt;code&gt;$GIT_PAGER&lt;/code&gt; 環境変数、次に &lt;code&gt;core.pager&lt;/code&gt; 構成、次に &lt;code&gt;$PAGER&lt;/code&gt; 、そしてコンパイル時に選択されたデフォルト（通常 &lt;code&gt;less&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="0bd1b0b7ad0ea4fe7d508b463e4e610ef00887b1" translate="yes" xml:space="preserve">
          <source>That is, a pattern followed by an attributes list, separated by whitespaces. Leading and trailing whitespaces are ignored. Lines that begin with &lt;code&gt;#&lt;/code&gt; are ignored. Patterns that begin with a double quote are quoted in C style. When the pattern matches the path in question, the attributes listed on the line are given to the path.</source>
          <target state="translated">つまり、パターンの後に空白で区切られた属性リストが続きます。先頭と末尾の空白は無視されます。 &lt;code&gt;#&lt;/code&gt; で始まる行は無視されます。二重引用符で始まるパターンは、Cスタイルで引用されます。パターンが問題のパスと一致すると、行にリストされている属性がパスに与えられます。</target>
        </trans-unit>
        <trans-unit id="a2ed6bb3b9b6e451ccc6f660ef58cfb1d5aab73c" translate="yes" xml:space="preserve">
          <source>That is, from left to right:</source>
          <target state="translated">つまり、左から右へ。</target>
        </trans-unit>
        <trans-unit id="8f093c96f9e4fd62eb55be18fd622f6079c4aad2" translate="yes" xml:space="preserve">
          <source>That is, from the left to the right:</source>
          <target state="translated">つまり、左から右へ。</target>
        </trans-unit>
        <trans-unit id="11e8a09abfceb997eddb8423e1781ebd95db28e7" translate="yes" xml:space="preserve">
          <source>That is:</source>
          <target state="translated">それは</target>
        </trans-unit>
        <trans-unit id="aa54aa26ef67ef77a7b5a4203a2f21478483f336" translate="yes" xml:space="preserve">
          <source>That means that even if you offer only read access (e.g. by using the pserver method), &lt;code&gt;git-cvsserver&lt;/code&gt; should have write access to the database to work reliably (otherwise you need to make sure that the database is up to date any time &lt;code&gt;git-cvsserver&lt;/code&gt; is executed).</source>
          <target state="translated">つまり、（pserverメソッドを使用するなどして）読み取りアクセスのみを提供した場合でも、 &lt;code&gt;git-cvsserver&lt;/code&gt; は確実に機能するためにデータベースへの書き込みアクセス権を持っている必要があります（それ以外の場合は、データベースが &lt;code&gt;git-cvsserver&lt;/code&gt; 最新であることを確認する必要がありますgit- cvsserverが実行されます）。</target>
        </trans-unit>
        <trans-unit id="452813997abf32b7a81b495ef3287ae8cfa66246" translate="yes" xml:space="preserve">
          <source>That means that if you do a &lt;code&gt;git read-tree -m &amp;lt;newtree&amp;gt;&lt;/code&gt; followed by a &lt;code&gt;git checkout-index -f -u -a&lt;/code&gt;, the &lt;code&gt;git checkout-index&lt;/code&gt; only checks out the stuff that really changed.</source>
          <target state="translated">つまり、 &lt;code&gt;git read-tree -m &amp;lt;newtree&amp;gt;&lt;/code&gt; に続けて &lt;code&gt;git checkout-index -f -u -a&lt;/code&gt; を実行すると、 &lt;code&gt;git checkout-index&lt;/code&gt; は実際に変更されたものだけをチェックアウトします。</target>
        </trans-unit>
        <trans-unit id="a1aaaec20914cfb53973b0431f384394f0c406ca" translate="yes" xml:space="preserve">
          <source>That puts the heads and tags for each fork in their own island (named &quot;1234&quot; or similar), and the pull refs for each go into their own &quot;1234-pull&quot;.</source>
          <target state="translated">これにより、各フォークのヘッドとタグはそれぞれの島(&quot;1234 &quot;などの名前)に置かれ、それぞれのプルリファレンスはそれぞれの &quot;1234-pull &quot;に置かれます。</target>
        </trans-unit>
        <trans-unit id="767670eb6ab18d660b358046eb00166f0a64fef3" translate="yes" xml:space="preserve">
          <source>That will produce the diff between the tips of the two branches. If you&amp;rsquo;d prefer to find the diff from their common ancestor to test, you can use three dots instead of two:</source>
          <target state="translated">これにより、2つのブランチの先端の間に差異が生じます。テストする共通の祖先との違いを見つけたい場合は、2つではなく3つのドットを使用できます。</target>
        </trans-unit>
        <trans-unit id="2ab4548e0b841bbace5e0a92c23778ab654224e3" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why the &quot;git replace&quot; command was created. Technically it stores replacements &quot;refs&quot; in the &quot;refs/replace/&quot; hierarchy. These &quot;refs&quot; are like branches (that are stored in &quot;refs/heads/&quot;) or tags (that are stored in &quot;refs/tags&quot;), and that means that they can automatically be shared like branches or tags among developers.</source>
          <target state="translated">そのため、「git replace」コマンドが作成されました。技術的には、「refs / replace /」階層に置換「refs」を格納します。これらの「参照」は、ブランチ（「参照/ヘッド/」に格納されている）またはタグ（「参照/タグ」に格納されている）のようなものであり、開発者間でブランチまたはタグのように自動的に共有できることを意味します。</target>
        </trans-unit>
        <trans-unit id="e7f78784e12fead6a14f302d919d7dfe2a02b05b" translate="yes" xml:space="preserve">
          <source>The &quot;child_class&quot; field is a rough classification, such as &quot;editor&quot;, &quot;pager&quot;, &quot;transport/*&quot;, and &quot;hook&quot;. Unclassified children are classified with &quot;?&quot;.</source>
          <target state="translated">child_class」欄は、「エディタ」「ページャー」「トランスポート/*」「フック」などの大まかな分類です。未分類の子は「?</target>
        </trans-unit>
        <trans-unit id="fe5496d60fae83b54bfa30bb265cd284e395a597" translate="yes" xml:space="preserve">
          <source>The &quot;child_id&quot; field can be used to match this child_start with the corresponding child_exit event.</source>
          <target state="translated">child_id &quot;フィールドは、このchild_startと対応するchild_exitイベントを一致させるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="2ee1a593683be8a9c62bf7139373ea713a6461c3" translate="yes" xml:space="preserve">
          <source>The &quot;commit&quot; object links a physical state of a tree with a description of how we got there and why. Use the &lt;code&gt;--pretty=raw&lt;/code&gt; option to &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt; or &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; to examine your favorite commit:</source>
          <target state="translated">「コミット」オブジェクトは、ツリーの物理的な状態と、そこに到達した方法とその理由の説明をリンクします。使用 &lt;code&gt;--pretty=raw&lt;/code&gt; にオプションを&lt;a href=&quot;git-show&quot;&gt;[1]にgit-ショー&lt;/a&gt;や&lt;a href=&quot;git-log&quot;&gt;[1] gitのログ&lt;/a&gt;あなたのお気に入りはコミット検討します：</target>
        </trans-unit>
        <trans-unit id="6db6601ce62b96f9f8fba54efac9ee5967a731f4" translate="yes" xml:space="preserve">
          <source>The &quot;default&quot; value consists of a list of triplets in the form &lt;code&gt;(&quot;&amp;lt;label&amp;gt;&quot;, &quot;&amp;lt;link&amp;gt;&quot;, &quot;&amp;lt;position&amp;gt;&quot;)&lt;/code&gt; where &quot;position&quot; is the label after which to insert the link, &quot;link&quot; is a format string where &lt;code&gt;%n&lt;/code&gt; expands to the project name, &lt;code&gt;%f&lt;/code&gt; to the project path within the filesystem (i.e. &quot;$projectroot/$project&quot;), &lt;code&gt;%h&lt;/code&gt; to the current hash ('h' gitweb parameter) and &lt;code&gt;%b&lt;/code&gt; to the current hash base ('hb' gitweb parameter); &lt;code&gt;%%&lt;/code&gt; expands to '%'.</source>
          <target state="translated">「デフォルト」の値は、 &lt;code&gt;(&quot;&amp;lt;label&amp;gt;&quot;, &quot;&amp;lt;link&amp;gt;&quot;, &quot;&amp;lt;position&amp;gt;&quot;)&lt;/code&gt; という形式のトリプレットのリストで構成されます。ここで、 &quot;position&quot;は、リンクを挿入するためのラベル &quot;link&quot;です。書式文字列であり、 &lt;code&gt;%n&lt;/code&gt; プロジェクト名に展開され、 &lt;code&gt;%f&lt;/code&gt; ファイルシステム内のプロジェクトパスに（すなわち、「$ projectroot / $プロジェクト」）、 &lt;code&gt;%h&lt;/code&gt; の現在のハッシュ（「H」gitwebパラメータ）及び &lt;code&gt;%b&lt;/code&gt; へ現在のハッシュベース（ 'hb' gitwebパラメーター）; &lt;code&gt;%%&lt;/code&gt; は「％」に展開されます。</target>
        </trans-unit>
        <trans-unit id="a92a8477d5d97d17f1c481b90522235992b0aec5" translate="yes" xml:space="preserve">
          <source>The &quot;delete&quot; subcommand deletes single entries from the reflog. Its argument must be an &lt;code&gt;exact&lt;/code&gt; entry (e.g. &quot;&lt;code&gt;git reflog delete
master@{2}&lt;/code&gt;&quot;). This subcommand is also typically not used directly by end users.</source>
          <target state="translated">&quot;delete&quot;サブコマンドは、reflogから単一のエントリを削除します。引数は &lt;code&gt;exact&lt;/code&gt; エントリでなければなりません（例： &quot; &lt;code&gt;git reflog delete master@{2}&lt;/code&gt; &quot;）。このサブコマンドは、通常、エンドユーザーが直接使用することもありません。</target>
        </trans-unit>
        <trans-unit id="15cc724d6cfbdaca681c81ec6b39527ea7ba3e75" translate="yes" xml:space="preserve">
          <source>The &quot;downwards graduation&quot; discussed above cannot be done by actually merging downwards, however, since that would merge &lt;code&gt;all&lt;/code&gt; changes on the unstable branch into the stable one. Hence the following:</source>
          <target state="translated">上で説明した「下向きの卒業」は、不安定なブランチの &lt;code&gt;all&lt;/code&gt; 変更を安定したブランチにマージするため、実際には下向きにマージすることでは実行できません。したがって、次のようになります。</target>
        </trans-unit>
        <trans-unit id="4b681909e4d1085f8faa13044f43a355b4e9ca0a" translate="yes" xml:space="preserve">
          <source>The &quot;exec&quot; command launches the command in a shell (the one specified in &lt;code&gt;$SHELL&lt;/code&gt;, or the default shell if &lt;code&gt;$SHELL&lt;/code&gt; is not set), so you can use shell features (like &quot;cd&quot;, &quot;&amp;gt;&quot;, &quot;;&quot; &amp;hellip;​). The command is run from the root of the working tree.</source>
          <target state="translated">「exec」コマンドは、シェル（ &lt;code&gt;$SHELL&lt;/code&gt; で指定されたもの、または &lt;code&gt;$SHELL&lt;/code&gt; が設定されていない場合はデフォルトのシェル）でコマンドを起動するため、シェル機能（「cd」、「&amp;gt;」、「;」など）を使用できます。 &amp;hellip;）。コマンドは作業ツリーのルートから実行されます。</target>
        </trans-unit>
        <trans-unit id="3e27bb28ac33a3ed0da91ec19b0543d1741f2754" translate="yes" xml:space="preserve">
          <source>The &quot;exec_id&quot; field is a command-unique id and is only useful if the &lt;code&gt;exec()&lt;/code&gt; fails and a corresponding exec_result event is generated.</source>
          <target state="translated">「exec_id」フィールドはコマンド固有のIDであり、 &lt;code&gt;exec()&lt;/code&gt; が失敗し、対応するexec_resultイベントが生成された場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="111dec81403753e6a7d49025386f92b4f5a7ce80" translate="yes" xml:space="preserve">
          <source>The &quot;exists&quot; subcommand checks whether a ref has a reflog. It exits with zero status if the reflog exists, and non-zero status if it does not.</source>
          <target state="translated">exists &quot;サブコマンドは、refがreflogを持っているかどうかをチェックします。reflogが存在する場合は0の状態で終了し、存在しない場合は0以外の状態で終了します。</target>
        </trans-unit>
        <trans-unit id="b084a3a2964fff409a1c4bd5eaf3ff2af985bb46" translate="yes" xml:space="preserve">
          <source>The &quot;experimental&quot; branch is the one you just created, and the &quot;master&quot; branch is a default branch that was created for you automatically. The asterisk marks the branch you are currently on; type</source>
          <target state="translated">experimental&quot; ブランチは作成したばかりのブランチで、&quot;master&quot; ブランチは自動的に作成されたデフォルトのブランチです。アスタリスクは現在のブランチを示しています。</target>
        </trans-unit>
        <trans-unit id="8a5c55e5646a8a6620c2e2207d5f34af5eadc4f2" translate="yes" xml:space="preserve">
          <source>The &quot;expire&quot; subcommand prunes older reflog entries. Entries older than &lt;code&gt;expire&lt;/code&gt; time, or entries older than &lt;code&gt;expire-unreachable&lt;/code&gt; time and not reachable from the current tip, are removed from the reflog. This is typically not used directly by end users &amp;mdash; instead, see &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;.</source>
          <target state="translated">「expire」サブコマンドは、古いreflogエントリーを整理します。 &lt;code&gt;expire&lt;/code&gt; より古いエントリ、または &lt;code&gt;expire-unreachable&lt;/code&gt; 時間より古いエントリで現在のヒントから到達できないエントリは、reflogから削除されます。これは通常、エンドユーザーが直接使用することはありません。代わりに&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="51ddfbdb206861a134ce9d36a0cd6f8dcb912a92" translate="yes" xml:space="preserve">
          <source>The &quot;extent of changes&quot; parameter can be tweaked from the default 80% (that is, unless more than 80% of the original material is deleted, the broken pairs are merged back into a single modification) by giving a second number to -B option, like these:</source>
          <target state="translated">変更の範囲」パラメータは、デフォルトの80%から微調整することができます (つまり、元の素材の80%以上が削除されない限り、壊れたペアは1つの変更にマージされます)-Bオプションに2つ目の数値を与えることで、以下のように変更することができます。</target>
        </trans-unit>
        <trans-unit id="4be913eb74285fc0f11c845775de3706d8e8ac4f" translate="yes" xml:space="preserve">
          <source>The &quot;git-diff-tree&quot; command begins its output by printing the hash of what is being compared. After that, all the commands print one output line per changed file.</source>
          <target state="translated">git-diff-tree&quot; コマンドは、比較対象のハッシュを出力することで出力を開始します。その後、すべてのコマンドは変更されたファイルごとに一行ずつ出力します。</target>
        </trans-unit>
        <trans-unit id="14e841537fdff67ebd6d58e11774065ab0f0ebfa" translate="yes" xml:space="preserve">
          <source>The &quot;indent&quot; filter is well-behaved in this regard: it will not modify input that is already correctly indented. In this case, the lack of a smudge filter means that the clean filter &lt;code&gt;must&lt;/code&gt; accept its own output without modifying it.</source>
          <target state="translated">「インデント」フィルターはこの点で適切に動作します。すでに正しくインデントされている入力は変更されません。この場合、スマッジフィルターがないということは、クリーンフィルターが独自の出力を変更せずに受け入れる &lt;code&gt;must&lt;/code&gt; ことを意味します。</target>
        </trans-unit>
        <trans-unit id="2a9f18fc49cc181471bfbc97a47a88e9bcc1179f" translate="yes" xml:space="preserve">
          <source>The &quot;index&quot; holds a snapshot of the content of the working tree, and it is this snapshot that is taken as the contents of the next commit. Thus after making any changes to the working tree, and before running the commit command, you must use the &lt;code&gt;add&lt;/code&gt; command to add any new or modified files to the index.</source>
          <target state="translated">「インデックス」は作業ツリーのコンテンツのスナップショットを保持し、次のコミットのコンテンツとして取得されるのはこのスナップショットです。したがって、作業ツリーに変更を加えた後、commitコマンドを実行する前に、 &lt;code&gt;add&lt;/code&gt; コマンドを使用して、新しいファイルまたは変更されたファイルをインデックスに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="6b5b86b50febe55839cf4e73fade50a78b6b0a0e" translate="yes" xml:space="preserve">
          <source>The &quot;master&quot; branch that was created at the time you cloned is a copy of the HEAD in the repository that you cloned from. That repository may also have had other branches, though, and your local repository keeps branches which track each of those remote branches, called remote-tracking branches, which you can view using the &lt;code&gt;-r&lt;/code&gt; option to &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt;:</source>
          <target state="translated">クローンを作成したときに作成された「マスター」ブランチは、クローンを作成したリポジトリ内のHEADのコピーです。ただし、そのリポジトリには他のブランチもある可能性があります。ローカルリポジトリには、リモートトラッキングブランチと呼ばれるそれらのリモートブランチのそれぞれを追跡するブランチが保持されます。これは、&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]の&lt;/a&gt; &lt;code&gt;-r&lt;/code&gt; オプションを使用して表示できます。</target>
        </trans-unit>
        <trans-unit id="b0e05ae2162ea2794c2d7383fd67bd0eb622aa45" translate="yes" xml:space="preserve">
          <source>The &quot;name&quot; field is an arbitrary string to describe the command mode. For example, checkout can checkout a branch or an individual file. And these variations typically have different performance characteristics that are not comparable.</source>
          <target state="translated">name」フィールドは、コマンドモードを記述するための任意の文字列である。例えば、checkoutはブランチをチェックアウトしたり、個々のファイルをチェックアウトしたりすることができます。そして、これらのバリエーションは、一般的には比較できない異なるパフォーマンス特性を持っています。</target>
        </trans-unit>
        <trans-unit id="dd5002fa5ace7f79f3506e0a4b77fdeff5bda038" translate="yes" xml:space="preserve">
          <source>The &quot;non-cached&quot; mode takes a different approach, and is potentially the more useful of the two in that what it does can&amp;rsquo;t be emulated with a &lt;code&gt;git write-tree&lt;/code&gt; + &lt;code&gt;git diff-tree&lt;/code&gt;. Thus that&amp;rsquo;s the default mode. The non-cached version asks the question:</source>
          <target state="translated">「非キャッシュ」モードは異なるアプローチをとり、2つの方法のうち、 &lt;code&gt;git write-tree&lt;/code&gt; + &lt;code&gt;git diff-tree&lt;/code&gt; ではエミュレートできないという点で、2つの方法の中でより有用な可能性があります。したがって、これがデフォルトのモードです。キャッシュされていないバージョンは質問をします：</target>
        </trans-unit>
        <trans-unit id="fb600e178320a3e93fbf20a6c6f69b12e2843e17" translate="yes" xml:space="preserve">
          <source>The &quot;pull&quot; command thus performs two operations: it fetches changes from a remote branch, then merges them into the current branch.</source>
          <target state="translated">つまり、リモートブランチから変更を取得し、現在のブランチにマージします。</target>
        </trans-unit>
        <trans-unit id="70b3edc9504f2665b7793306c4b0a620ef20dadb" translate="yes" xml:space="preserve">
          <source>The &quot;remote&quot; repository that is destination of a push operation. This parameter can be either a URL (see the section &lt;a href=&quot;#URLS&quot;&gt;GIT URLS&lt;/a&gt; below) or the name of a remote (see the section &lt;a href=&quot;#REMOTES&quot;&gt;REMOTES&lt;/a&gt; below).</source>
          <target state="translated">プッシュ操作の宛先である「リモート」リポジトリ。このパラメータは、のいずれかとすることができるURL（セクションを参照&lt;a href=&quot;#URLS&quot;&gt;GITのURL&lt;/a&gt;またはリモートの名前（セクションは下記参照）を&lt;a href=&quot;#REMOTES&quot;&gt;リモコン&lt;/a&gt;以下）。</target>
        </trans-unit>
        <trans-unit id="0610be2d46404a8f9561c2512c45bc2650bc2b77" translate="yes" xml:space="preserve">
          <source>The &quot;remote&quot; repository that is the source of a fetch or pull operation. This parameter can be either a URL (see the section &lt;a href=&quot;#URLS&quot;&gt;GIT URLS&lt;/a&gt; below) or the name of a remote (see the section &lt;a href=&quot;#REMOTES&quot;&gt;REMOTES&lt;/a&gt; below).</source>
          <target state="translated">フェッチまたはプル操作のソースである「リモート」リポジトリ。このパラメータは、のいずれかとすることができるURL（セクションを参照&lt;a href=&quot;#URLS&quot;&gt;GITのURL&lt;/a&gt;またはリモートの名前（セクションは下記参照）を&lt;a href=&quot;#REMOTES&quot;&gt;リモコン&lt;/a&gt;以下）。</target>
        </trans-unit>
        <trans-unit id="672e385879e10047919cb534a388204453fa9b9b" translate="yes" xml:space="preserve">
          <source>The &quot;remote&quot; repository to query. This parameter can be either a URL or the name of a remote (see the GIT URLS and REMOTES sections of &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;).</source>
          <target state="translated">照会する「リモート」リポジトリ。このパラメーターは、URLまたはリモートの名前のいずれかです（&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt;のGIT URLSおよびREMOTESセクションを参照）。</target>
        </trans-unit>
        <trans-unit id="c6967bbb137406cb4cb1860aeca604a66e63b551" translate="yes" xml:space="preserve">
          <source>The &quot;show&quot; subcommand (which is also the default, in the absence of any subcommands) shows the log of the reference provided in the command-line (or &lt;code&gt;HEAD&lt;/code&gt;, by default). The reflog covers all recent actions, and in addition the &lt;code&gt;HEAD&lt;/code&gt; reflog records branch switching. &lt;code&gt;git reflog show&lt;/code&gt; is an alias for &lt;code&gt;git log -g --abbrev-commit
--pretty=oneline&lt;/code&gt;; see &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; for more information.</source>
          <target state="translated">「show」サブコマンド（サブコマンドがない場合はデフォルトでもあります）は、コマンドライン（またはデフォルトでは &lt;code&gt;HEAD&lt;/code&gt; ）で提供された参照のログを表示します。reflogは最近のすべてのアクションをカバーし、さらに &lt;code&gt;HEAD&lt;/code&gt; reflogはブランチの切り替えを記録します。 &lt;code&gt;git reflog show&lt;/code&gt; は &lt;code&gt;git log -g --abbrev-commit --pretty=oneline&lt;/code&gt; です。詳細については、&lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9f44e4ac17ec1a545f86623659c266196a2646a2" translate="yes" xml:space="preserve">
          <source>The &quot;status&quot; command is a useful way to get a quick summary of the situation:</source>
          <target state="translated">&quot;status &quot;コマンドは、状況を簡単にまとめるのに便利なコマンドです。</target>
        </trans-unit>
        <trans-unit id="97877392fd9cfcae446bf7fdee6a5be7af0d7e1e" translate="yes" xml:space="preserve">
          <source>The &quot;tar.gz&quot; and &quot;tgz&quot; formats are defined automatically and default to &lt;code&gt;gzip -cn&lt;/code&gt;. You may override them with custom commands.</source>
          <target state="translated">「tar.gz」および「tgz」形式は自動的に定義され、デフォルトは &lt;code&gt;gzip -cn&lt;/code&gt; です。カスタムコマンドでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="de5a671425f0a835fc1aa7cc9c82d529d93b1856" translate="yes" xml:space="preserve">
          <source>The &quot;tree&quot; object here refers to the new state of the tree:</source>
          <target state="translated">ここでいう「木」オブジェクトとは、木の新しい状態を指します。</target>
        </trans-unit>
        <trans-unit id="e01253337b76bf7642cbcef035c48eb0188a2f7d" translate="yes" xml:space="preserve">
          <source>The &quot;value&quot; field may be an integer or a string.</source>
          <target state="translated">値」フィールドは整数または文字列である。</target>
        </trans-unit>
        <trans-unit id="38b8f4a1de6f86897b3e2a50acc4b0dda41fe280" translate="yes" xml:space="preserve">
          <source>The &amp;lt;dataref&amp;gt; represents the blob, tree, or commit object at &amp;lt;path&amp;gt; and can be used in later &lt;code&gt;get-mark&lt;/code&gt;, &lt;code&gt;cat-blob&lt;/code&gt;, &lt;code&gt;filemodify&lt;/code&gt;, or &lt;code&gt;ls&lt;/code&gt; commands.</source>
          <target state="translated">&amp;lt;dataref&amp;gt;は、&amp;lt;path&amp;gt;のblob、tree、またはcommitオブジェクトを表し、後の &lt;code&gt;get-mark&lt;/code&gt; 、 &lt;code&gt;cat-blob&lt;/code&gt; 、 &lt;code&gt;filemodify&lt;/code&gt; 、または &lt;code&gt;ls&lt;/code&gt; コマンドで使用できます。</target>
        </trans-unit>
        <trans-unit id="118ecd88d0a05a5c1cb4a877b8fac543b0b9ad8d" translate="yes" xml:space="preserve">
          <source>The &amp;lt;dst&amp;gt; tells which ref on the remote side is updated with this push. Arbitrary expressions cannot be used here, an actual ref must be named. If &lt;code&gt;git push [&amp;lt;repository&amp;gt;]&lt;/code&gt; without any &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; argument is set to update some ref at the destination with &lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt; with &lt;code&gt;remote.&amp;lt;repository&amp;gt;.push&lt;/code&gt; configuration variable, &lt;code&gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; part can be omitted&amp;mdash;​such a push will update a ref that &lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt; normally updates without any &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; on the command line. Otherwise, missing &lt;code&gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; means to update the same ref as the &lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&amp;lt;dst&amp;gt;は、リモート側のどの参照がこのプッシュで更新されるかを示します。ここでは任意の式は使用できません。実際の参照を指定する必要があります。もし &lt;code&gt;git push [&amp;lt;repository&amp;gt;]&lt;/code&gt; 任意なし &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; 引数を持つ先にいくつかの参考文献を更新するように設定されている &lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt; と &lt;code&gt;remote.&amp;lt;repository&amp;gt;.push&lt;/code&gt; コンフィグレーション変数、 &lt;code&gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; 部分はomitted-可能なA pushは、コマンドラインで &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; なしで &lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt; が通常更新する参照を更新します。それ以外の場合、 &lt;code&gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; がないと、 &lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt; と同じ参照が更新されます。</target>
        </trans-unit>
        <trans-unit id="a11f746174b65907575be3c7e94b2869a6db53ed" translate="yes" xml:space="preserve">
          <source>The &amp;lt;feature&amp;gt; part of the command may be any one of the following:</source>
          <target state="translated">コマンドの&amp;lt;feature&amp;gt;部分は、次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="12c10723a00c71e41369dc4ab439f9bc656fc9a7" translate="yes" xml:space="preserve">
          <source>The &amp;lt;file&amp;gt; list given to the command can be exact pathnames, file glob patterns, or leading directory names. The command removes only the paths that are known to Git. Giving the name of a file that you have not told Git about does not remove that file.</source>
          <target state="translated">コマンドに指定する&amp;lt;file&amp;gt;リストには、正確なパス名、ファイルグロブパターン、または先頭のディレクトリ名を指定できます。このコマンドは、Gitが認識しているパスのみを削除します。Gitについて知らせていないファイルの名前を指定しても、そのファイルは削除されません。</target>
        </trans-unit>
        <trans-unit id="d9a9d78d51370431396c79c2da7d525a4215ec53" translate="yes" xml:space="preserve">
          <source>The &amp;lt;paths&amp;gt; parameters, when given, are used to limit the diff to the named paths (you can give directory names and get diff for all files under them).</source>
          <target state="translated">&amp;lt;paths&amp;gt;パラメータを指定すると、diffを名前付きパスに制限するために使用されます（ディレクトリ名を指定して、その下のすべてのファイルのdiffを取得できます）。</target>
        </trans-unit>
        <trans-unit id="be0e9224a3c31468000ef31d0ee2d41289501c7f" translate="yes" xml:space="preserve">
          <source>The &amp;lt;src&amp;gt; is often the name of the branch you would want to push, but it can be any arbitrary &quot;SHA-1 expression&quot;, such as &lt;code&gt;master~4&lt;/code&gt; or &lt;code&gt;HEAD&lt;/code&gt; (see &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;).</source>
          <target state="translated">&amp;lt;SRC&amp;gt;多くの場合、あなたがプッシュしたいブランチの名前ですが、それは以下のような任意の「SHA-1の発現」とすることができる &lt;code&gt;master~4&lt;/code&gt; または &lt;code&gt;HEAD&lt;/code&gt; （参照&lt;a href=&quot;gitrevisions&quot;&gt;[7] gitrevisionsを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="94b79c58bc3ec3bceec3b732165a2a52f94063c6" translate="yes" xml:space="preserve">
          <source>The &amp;lt;type&amp;gt; object &amp;lt;object&amp;gt;, is present in the database but never &lt;code&gt;directly&lt;/code&gt; used. A dangling commit could be a root node.</source>
          <target state="translated">&amp;lt;type&amp;gt;オブジェクト&amp;lt;object&amp;gt;はデータベースに存在しますが、 &lt;code&gt;directly&lt;/code&gt; 使用されることはありません。ダングリングコミットはルートノードになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="c165697ba8df58634f80c6f82752d5afcdee5578" translate="yes" xml:space="preserve">
          <source>The &amp;lt;type&amp;gt; object &amp;lt;object&amp;gt;, is referred to but isn&amp;rsquo;t present in the database.</source>
          <target state="translated">&amp;lt;type&amp;gt;オブジェクト&amp;lt;object&amp;gt;が参照されていますが、データベースに存在しません。</target>
        </trans-unit>
        <trans-unit id="5e6573bf54036812f2655d363c6262b69c0dca40" translate="yes" xml:space="preserve">
          <source>The &amp;lt;type&amp;gt; object &amp;lt;object&amp;gt;, isn&amp;rsquo;t actually referred to directly or indirectly in any of the trees or commits seen. This can mean that there&amp;rsquo;s another root node that you&amp;rsquo;re not specifying or that the tree is corrupt. If you haven&amp;rsquo;t missed a root node then you might as well delete unreachable nodes since they can&amp;rsquo;t be used.</source>
          <target state="translated">&amp;lt;type&amp;gt;オブジェクト&amp;lt;object&amp;gt;は、実際には、ツリーやコミットで直接または間接的に参照されることはありません。これは、指定していない別のルートノードがあるか、ツリーが壊れていることを意味します。ルートノードを見逃していない場合は、到達できないノードは使用できないため、削除することもできます。</target>
        </trans-unit>
        <trans-unit id="afa0888330a84b7e0fff615f1c9b8a57ecf94505" translate="yes" xml:space="preserve">
          <source>The 'git sh-i18n scriptlet is designed to be sourced (using &lt;code&gt;.&lt;/code&gt;) by Git&amp;rsquo;s porcelain programs implemented in shell script. It provides wrappers for the GNU &lt;code&gt;gettext&lt;/code&gt; and &lt;code&gt;eval_gettext&lt;/code&gt; functions accessible through the &lt;code&gt;gettext.sh&lt;/code&gt; script, and provides pass-through fallbacks on systems without GNU gettext.</source>
          <target state="translated">'git sh-i18nスクリプトレットは、シェルスクリプトで実装されたGitの磁器プログラムによって（ &lt;code&gt;.&lt;/code&gt; を使用して）供給されるように設計されています。これは、 &lt;code&gt;gettext.sh&lt;/code&gt; スクリプトを介してアクセス可能なGNU &lt;code&gt;gettext&lt;/code&gt; および &lt;code&gt;eval_gettext&lt;/code&gt; 関数のラッパーを提供し、GNU gettextのないシステムでのパススルーフォールバックを提供します。</target>
        </trans-unit>
        <trans-unit id="75c51ca5866a2731f86888419b9fb61d16567aec" translate="yes" xml:space="preserve">
          <source>The (fully qualified) refname from which to show notes when showing commit messages. The value of this variable can be set to a glob, in which case notes from all matching refs will be shown. You may also specify this configuration variable several times. A warning will be issued for refs that do not exist, but a glob that does not match any refs is silently ignored.</source>
          <target state="translated">コミットメッセージを表示する際にノートを表示するための (完全修飾された)refname。この変数の値は glob に設定することができ、その場合、マッチするすべての refs のノートが表示されます。この設定変数を複数回指定することもできます。存在しない refs に対しては警告が発行されますが、どの refs にもマッチしない glob は静かに無視されます。</target>
        </trans-unit>
        <trans-unit id="1e4ce979f13cefaaddaddc6c3ce47e1170286daa" translate="yes" xml:space="preserve">
          <source>The (possibly remote) repository to clone from. See the &lt;a href=&quot;#URLS&quot;&gt;GIT URLS&lt;/a&gt; section below for more information on specifying repositories.</source>
          <target state="translated">クローン元（おそらくリモート）のリポジトリ。リポジトリの指定の詳細については、下記の&lt;a href=&quot;#URLS&quot;&gt;GIT URLの&lt;/a&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="0958323d0ba18cc1a0d938e257756d1659d52ec9" translate="yes" xml:space="preserve">
          <source>The --exclude-existing form is a filter that does the inverse. It reads refs from stdin, one ref per line, and shows those that don&amp;rsquo;t exist in the local repository.</source>
          <target state="translated">--exclude-existing形式は、その逆を行うフィルターです。stdinからrefを1行に1つ読み取り、ローカルリポジトリに存在しないものを表示します。</target>
        </trans-unit>
        <trans-unit id="a043107d8410def266c54e81fdffaefcdaf6dd4c" translate="yes" xml:space="preserve">
          <source>The --smtp-server-option option must be repeated for each option you want to pass to the server. Likewise, different lines in the configuration files must be used for each option.</source>
          <target state="translated">smtp-server-option オプションは、サーバに渡したいオプションごとに繰り返し指定する必要があります。同様に、設定ファイルの中ではオプションごとに異なる行を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="b478196a2fb02489b622996c5ea9b31713647e4d" translate="yes" xml:space="preserve">
          <source>The .git location may be auto-discovered, or come from &lt;code&gt;$GIT_DIR&lt;/code&gt; environment variable. If the repository is auto discovered via a .git file (e.g. from submodules, or a linked worktree), the .git location would be the final location where the .git directory is, not where the .git file is.</source>
          <target state="translated">.gitの場所は自動検出されるか、 &lt;code&gt;$GIT_DIR&lt;/code&gt; 環境変数から取得されます。リポジトリが.gitファイルを介して自動検出される場合（サブモジュールやリンクされたワークツリーなどから）、. gitの場所は.gitファイルがある場所ではなく、.gitディレクトリがある最終的な場所になります。</target>
        </trans-unit>
        <trans-unit id="489d70f8c8831a28cdf6bb81a4079dab3fec8b7e" translate="yes" xml:space="preserve">
          <source>The 40-hex object name of the object.</source>
          <target state="translated">40 ヘックスのオブジェクト名。</target>
        </trans-unit>
        <trans-unit id="edba0bac58d4604af8b0ccc3234ca39328b25c20" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-archive&quot;&gt;git-archive[1]&lt;/a&gt; command can create a tar or zip archive from any version of a project; for example:</source>
          <target state="translated">&lt;a href=&quot;git-archive&quot;&gt;gitのアーカイブ[1]&lt;/a&gt;コマンドプロジェクトのいずれかのバージョンからtarやzipアーカイブを作成することができます。例えば：</target>
        </trans-unit>
        <trans-unit id="8ff01ddb94fa5e45588517f77b5eb76be2068bf4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-bisect&quot;&gt;git-bisect[1]&lt;/a&gt; command correctly handles history that includes merge commits. However, when the commit that it finds is a merge commit, the user may need to work harder than usual to figure out why that commit introduced a problem.</source>
          <target state="translated">&lt;a href=&quot;git-bisect&quot;&gt;git -二分[1]&lt;/a&gt;コマンドが正しくマージコミットを含んで歴史を扱います。ただし、検出されたコミットがマージコミットである場合、ユーザーは、そのコミットが問題を引き起こした理由を理解するために、通常よりも一生懸命作業する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="a1047413b5c194a852bce97f1a7a5b5c064c8f0a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-cat-file&quot;&gt;git-cat-file[1]&lt;/a&gt; command can show the contents of any object, though the higher-level &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt; is usually more useful.</source>
          <target state="translated">&lt;a href=&quot;git-cat-file&quot;&gt;gitの-CAT-ファイル[1]&lt;/a&gt;コマンドは、上位も、任意のオブジェクトの内容を表示することができる&lt;a href=&quot;git-show&quot;&gt;のgit -ショー[1]&lt;/a&gt;通常、より有用です。</target>
        </trans-unit>
        <trans-unit id="0ea75322cb21a3c3c8fac48d1e6228de3fae3cce" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt; command allows constructing commits with arbitrary parents and trees.</source>
          <target state="translated">&lt;a href=&quot;git-commit-tree&quot;&gt;gitのコミットツリーは、[1]&lt;/a&gt;コマンドは、任意の両親や木でコミットを構築することができます。</target>
        </trans-unit>
        <trans-unit id="efc26cd7227657520a6926ebb23db38544c357a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-describe&quot;&gt;git-describe[1]&lt;/a&gt; command does the opposite, naming the revision using a tag on which the given commit is based:</source>
          <target state="translated">&lt;a href=&quot;git-describe&quot;&gt;Gitは、記述[1]&lt;/a&gt;コマンドは、所与のベースコミットれたタグを使用してリビジョンを命名、反対のことを行います。</target>
        </trans-unit>
        <trans-unit id="9903942bbbf43f525c7cf036d25898c86f9d9d7c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-fsck&quot;&gt;git-fsck[1]&lt;/a&gt; command runs a number of self-consistency checks on the repository, and reports on any problems. This may take some time.</source>
          <target state="translated">&lt;a href=&quot;git-fsck&quot;&gt;git - fsckは[1]&lt;/a&gt;コマンドは、リポジトリ上の自己整合性チェックの数を実行し、任意の問題に関するレポート。これには時間がかかる場合があります。</target>
        </trans-unit>
        <trans-unit id="ff835519b77a7ea3e8c99474cee535ec38ab3bd6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-fsck&quot;&gt;git-fsck[1]&lt;/a&gt; command will sometimes complain about dangling objects. They are not a problem.</source>
          <target state="translated">&lt;a href=&quot;git-fsck&quot;&gt;git -のfsck [1]&lt;/a&gt;コマンド時にはオブジェクトをダングリング文句を言うでしょう。それらは問題ではありません。</target>
        </trans-unit>
        <trans-unit id="d818a9097a56e35195bf0f4a41317be4c1298cc7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt; command performs packing, pruning, and more for you, so is normally the only high-level command you need.</source>
          <target state="translated">&lt;a href=&quot;git-gc&quot;&gt;git-gcが[1]&lt;/a&gt;コマンドを実行するには、梱包剪定、そしてより多くのあなたのために、あなたが必要とするだけで、高レベルのコマンドは、通常です。</target>
        </trans-unit>
        <trans-unit id="7674cbc9fda493edc257e040882a4d3b2fee5da7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt; command provides a simple way to start browsing the repository using gitweb. The default server when using instaweb is lighttpd.</source>
          <target state="translated">&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]&lt;/a&gt;コマンドgitwebを使用してリポジトリをブラウズ開始する簡単な方法を提供します。instawebを使用する場合のデフォルトのサーバーはlighttpdです。</target>
        </trans-unit>
        <trans-unit id="3d865565a2d1aab8d65d5524c33990e3ecd5eee4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; and &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; commands also provide special help for merges:</source>
          <target state="translated">&lt;a href=&quot;git-log&quot;&gt;gitのログ[1]&lt;/a&gt;と&lt;a href=&quot;gitk&quot;&gt;gitkは、[1]&lt;/a&gt;コマンドは、マージのための特別な支援を提供します。</target>
        </trans-unit>
        <trans-unit id="869571e8bf360d23843fed69fde509a99aec51ce" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; command can show lists of commits. On its own, it shows all commits reachable from the parent commit; but you can also make more specific requests:</source>
          <target state="translated">&lt;a href=&quot;git-log&quot;&gt;gitのログ[1]&lt;/a&gt;コマンドはコミットの一覧を表示することができます。単独では、親コミットから到達可能なすべてのコミットが表示されます。ただし、より具体的なリクエストを行うこともできます。</target>
        </trans-unit>
        <trans-unit id="49730fd39b9c73a554b2cce254c7d8e26a1047e1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-rev-parse&quot;&gt;git-rev-parse[1]&lt;/a&gt; command is a low-level command that is occasionally useful for translating some name for a commit to the object name for that commit:</source>
          <target state="translated">&lt;a href=&quot;git-rev-parse&quot;&gt;gitの-REV-解析[1]&lt;/a&gt;コマンドコミットそのため、オブジェクト名にコミットするためのいくつかの名前を変換する時々有用である低レベルのコマンドです。</target>
        </trans-unit>
        <trans-unit id="d0ac1c8438cdf91fddee2ad5a2dd381f720a6756" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt; command is available since Git 1.5.3. Users with Git 1.5.2 can look up the submodule commits in the repository and manually check them out; earlier versions won&amp;rsquo;t recognize the submodules at all.</source>
          <target state="translated">&lt;a href=&quot;git-submodule&quot;&gt;git -サブモジュール[1]&lt;/a&gt;コマンドのGit 1.5.3以降で使用可能です。Git 1.5.2を使用しているユーザーは、リポジトリでサブモジュールのコミットを検索し、手動でチェックアウトできます。以前のバージョンはサブモジュールをまったく認識しません。</target>
        </trans-unit>
        <trans-unit id="8ffc16af4f4197ccdbaaceb3fe6721dcc4562d83" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt; command updates the index with information from the working directory. You generally update the index information by just specifying the filename you want to update, like so:</source>
          <target state="translated">&lt;a href=&quot;git-update-index&quot;&gt;gitの更新インデックス[1]&lt;/a&gt;コマンドは、作業ディレクトリからの情報を用いてインデックスを更新します。通常、次のように、更新するファイル名を指定するだけでインデックス情報を更新します。</target>
        </trans-unit>
        <trans-unit id="20874526426e66810d4174f5227a378a8de7e91c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/newren/git-filter-repo/&quot;&gt;git filter-repo&lt;/a&gt; tool is an alternative to git-filter-branch which does not suffer from these performance problems or the safety problems (mentioned below). For those with existing tooling which relies upon git-filter-branch, &lt;code&gt;git repo-filter&lt;/code&gt; also provides &lt;a href=&quot;https://github.com/newren/git-filter-repo/blob/master/contrib/filter-repo-demos/filter-lamely&quot;&gt;filter-lamely&lt;/a&gt;, a drop-in git-filter-branch replacement (with a few caveats). While filter-lamely suffers from all the same safety issues as git-filter-branch, it at least ameliorates the performance issues a little.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/newren/git-filter-repo/&quot;&gt;gitのフィルタ-レポ&lt;/a&gt;ツールは、これらのパフォーマンスの問題や安全性の問題（下記）に罹患していないgitのフィルタ分岐に代わるものです。git-filter-branchに依存している既存のツールを使用しているユーザーのために、 &lt;code&gt;git repo-filter&lt;/code&gt; は&lt;a href=&quot;https://github.com/newren/git-filter-repo/blob/master/contrib/filter-repo-demos/filter-lamely&quot;&gt;filter-lamely&lt;/a&gt;、ドロップインgit-filter-branchの置き換えも提供します（いくつかの注意事項があります）。filter-lamelyはgit-filter-branchと同じ安全性の問題をすべて抱えていますが、少なくともパフォーマンスの問題は少しは改善されます。</target>
        </trans-unit>
        <trans-unit id="ad21d56fce6cdd39ef4f92ed0708902d059eaafc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;user-manual&quot;&gt;Git User&amp;rsquo;s Manual&lt;/a&gt; provides a more comprehensive introduction to Git.</source>
          <target state="translated">&lt;a href=&quot;user-manual&quot;&gt;Gitのユーザーズマニュアルには、&lt;/a&gt; Gitリポジトリへのより包括的な紹介しています。</target>
        </trans-unit>
        <trans-unit id="89c784f1b1d17488cfe361d4581fd69d6d34303d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;user-manual#git-concepts&quot;&gt;Git concepts chapter of the user-manual&lt;/a&gt; and &lt;a href=&quot;gitcore-tutorial&quot;&gt;gitcore-tutorial[7]&lt;/a&gt; both provide introductions to the underlying Git architecture.</source>
          <target state="translated">&lt;a href=&quot;user-manual#git-concepts&quot;&gt;user-manual&lt;/a&gt;と&lt;a href=&quot;gitcore-tutorial&quot;&gt;gitcore-tutorial [7]&lt;/a&gt;のGitコンセプトの章はどちらも、基礎となるGitアーキテクチャの概要を提供しています。</target>
        </trans-unit>
        <trans-unit id="5f7a0a0ce9975de955e97678d53d0386ebf8b091" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$GIT_DIR/info/sparse-checkout&lt;/code&gt; file is used to define the skip-worktree reference bitmap. When Git updates the working directory, it updates the skip-worktree bits in the index based on this file. The files matching the patterns in the file will appear in the working directory, and the rest will not.</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/info/sparse-checkout&lt;/code&gt; ファイルはスキップworktree基準ビットマップを定義するために使用されます。Gitが作業ディレクトリを更新すると、このファイルに基づいて、インデックス内のskip-worktreeビットが更新されます。ファイル内のパターンに一致するファイルは作業ディレクトリに表示され、残りは表示されません。</target>
        </trans-unit>
        <trans-unit id="18927ccc4077efc9fa00280f487bf7ea52068011" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;any&amp;gt;&lt;/code&gt; part of the command may contain any sequence of bytes that does not contain &lt;code&gt;LF&lt;/code&gt;. The &lt;code&gt;LF&lt;/code&gt; after the command is optional. Callers may wish to process the output through a tool such as sed to remove the leading part of the line, for example:</source>
          <target state="translated">コマンドの &lt;code&gt;&amp;lt;any&amp;gt;&lt;/code&gt; 部分には、 &lt;code&gt;LF&lt;/code&gt; を含まないバイトシーケンスを含めることができます。コマンドの後の &lt;code&gt;LF&lt;/code&gt; はオプションです。呼び出し側は、sedなどのツールで出力を処理して、行の先頭部分を削除することができます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="38ecaff497a30523addb0d68ac2f3ff7d62121ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;dataref&amp;gt;&lt;/code&gt; can be a mark reference (&lt;code&gt;:&amp;lt;idnum&amp;gt;&lt;/code&gt;) or the full 40-byte SHA-1 of a Git tag, commit, or tree object, preexisting or waiting to be written. The path is relative to the top level of the tree named by &lt;code&gt;&amp;lt;dataref&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;dataref&amp;gt;&lt;/code&gt; （マーク基準とすることができる &lt;code&gt;:&amp;lt;idnum&amp;gt;&lt;/code&gt; 既存または書き込まれるのを待っている）、または完全なGitのタグの40バイトのSHA-1、コミット、またはツリーオブジェクト。パスは、 &lt;code&gt;&amp;lt;dataref&amp;gt;&lt;/code&gt; で指定されたツリーの最上位に相対的です。</target>
        </trans-unit>
        <trans-unit id="df9429d81584e26f1a55e7eff78d6952383c6adf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;dataref&amp;gt;&lt;/code&gt; can be either a mark reference (&lt;code&gt;:&amp;lt;idnum&amp;gt;&lt;/code&gt;) set previously or a full 40-byte SHA-1 of a Git blob, preexisting or ready to be written.</source>
          <target state="translated">&lt;code&gt;&amp;lt;dataref&amp;gt;&lt;/code&gt; （マーク基準のいずれかとすることができる &lt;code&gt;:&amp;lt;idnum&amp;gt;&lt;/code&gt; ）セット以前に又は完全40バイトのSHA-1 Gitのブロブの、既存または書き込みの準備ができ。</target>
        </trans-unit>
        <trans-unit id="d38490ce2af2d9b14b21e7e25c13d2a1c79c408e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; part of the command may contain any of the options listed in the OPTIONS section that do not change import semantics, without the leading &lt;code&gt;--&lt;/code&gt; and is treated in the same way.</source>
          <target state="translated">&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; コマンドの一部を招くことなく、インポートの意味を変更しないOPTIONS]セクションに記載されているオプションのいずれかを含むことができ &lt;code&gt;--&lt;/code&gt; と同じように扱われます。</target>
        </trans-unit>
        <trans-unit id="73cfe0e2f7b7cccff976b7e355044194793ceedb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;pushurl&amp;gt;&lt;/code&gt; is used for pushes only. It is optional and defaults to &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;pushurl&amp;gt;&lt;/code&gt; だけプッシュするために使用されています。これはオプションであり、デフォルトは &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="226bf97de37dae89426f4bcaf2c8464c2aaac4ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;rev&amp;gt;^-[&amp;lt;n&amp;gt;]&lt;/code&gt; notation includes &lt;code&gt;&amp;lt;rev&amp;gt;&lt;/code&gt; but excludes the &amp;lt;n&amp;gt;th parent (i.e. a shorthand for &lt;code&gt;&amp;lt;rev&amp;gt;^&amp;lt;n&amp;gt;..&amp;lt;rev&amp;gt;&lt;/code&gt;), with &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; = 1 if not given. This is typically useful for merge commits where you can just pass &lt;code&gt;&amp;lt;commit&amp;gt;^-&lt;/code&gt; to get all the commits in the branch that was merged in merge commit &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; (including &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; itself).</source>
          <target state="translated">&lt;code&gt;&amp;lt;rev&amp;gt;^-[&amp;lt;n&amp;gt;]&lt;/code&gt; の表記は &lt;code&gt;&amp;lt;rev&amp;gt;&lt;/code&gt; しかし除外&amp;lt;N&amp;gt;番目の親（すなわちA速記のための &lt;code&gt;&amp;lt;rev&amp;gt;^&amp;lt;n&amp;gt;..&amp;lt;rev&amp;gt;&lt;/code&gt; で &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; = 1の場合与えられていません。これは通常、 &lt;code&gt;&amp;lt;commit&amp;gt;^-&lt;/code&gt; を渡してマージコミット &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; でマージされたブランチ内のすべてのコミット（ &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; 自体を含む）を取得できるマージコミットに役立ちます。</target>
        </trans-unit>
        <trans-unit id="382c52b269a126869d3f5e611e50db349c01a555" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; is just a good idea when you know the rest will be filenames; it will prevent problems with a filename of, for example, &lt;code&gt;-a&lt;/code&gt;. Using &lt;code&gt;--&lt;/code&gt; is probably a good policy in scripts.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; あなたは残りの部分は、ファイル名になります知っているときだけで良いアイデアです。 &lt;code&gt;-a&lt;/code&gt; などのファイル名の問題を防ぎます。 &lt;code&gt;--&lt;/code&gt; を使用することは、おそらくスクリプトでは適切なポリシーです。</target>
        </trans-unit>
        <trans-unit id="1a7c2f7d5b7ec8386e86076d812d974232af3082" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--cached&lt;/code&gt; option is used to ask a command that usually works on files in the working tree to &lt;strong&gt;only&lt;/strong&gt; work with the index. For example, &lt;code&gt;git grep&lt;/code&gt;, when used without a commit to specify from which commit to look for strings in, usually works on files in the working tree, but with the &lt;code&gt;--cached&lt;/code&gt; option, it looks for strings in the index.</source>
          <target state="translated">&lt;code&gt;--cached&lt;/code&gt; オプションは、通常の作業ツリーのファイル上で動作コマンド尋ねるために使用される&lt;strong&gt;唯一の&lt;/strong&gt;インデックスに仕事を。たとえば、 &lt;code&gt;git grep&lt;/code&gt; は、コミットなしで使用して文字列を検索するコミットを指定すると、通常は作業ツリー内のファイルに対して機能しますが、-- &lt;code&gt;--cached&lt;/code&gt; オプションを使用すると、インデックス内の文字列を検索します。</target>
        </trans-unit>
        <trans-unit id="93eb90d6c0bfdb16dcadbf4c72d38d80f8bf4451" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--dry-run&lt;/code&gt; option can be used to obtain a summary of what is included by any of the above for the next commit by giving the same set of parameters (options and paths).</source>
          <target state="translated">&lt;code&gt;--dry-run&lt;/code&gt; オプションは、次のパラメータ（オプションとパス）の同じセットを与えることによって、コミットするための上記のいずれかに含まれているものの概要を得るために使用することができます。</target>
        </trans-unit>
        <trans-unit id="45e26263ba79c46b47e35a4fe67d4d8f33b37e0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--env-filter&lt;/code&gt; option can be used to modify committer and/or author identity. For example, if you found out that your commits have the wrong identity due to a misconfigured user.email, you can make a correction, before publishing the project, like this:</source>
          <target state="translated">&lt;code&gt;--env-filter&lt;/code&gt; オプションは、コミッター、および/または著者のIDを変更するために使用することができます。たとえば、user.emailの設定が誤っているためにコミットのIDが間違っていることがわかった場合は、プロジェクトを公開する前に次のように修正できます。</target>
        </trans-unit>
        <trans-unit id="b4b7635118d0a90fb277012f2d96d5181b61e4f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--index&lt;/code&gt; option is used to ask a command that usually works on files in the working tree to &lt;strong&gt;also&lt;/strong&gt; affect the index. For example, &lt;code&gt;git stash apply&lt;/code&gt; usually merges changes recorded in a stash entry to the working tree, but with the &lt;code&gt;--index&lt;/code&gt; option, it also merges changes to the index as well.</source>
          <target state="translated">&lt;code&gt;--index&lt;/code&gt; オプションは通常する作業ツリーのファイル上で動作するコマンド尋ねるために使用されて&lt;strong&gt;も&lt;/strong&gt;、インデックスに影響を及ぼします。たとえば、 &lt;code&gt;git stash apply&lt;/code&gt; は通常、stashエントリに記録された変更を作業ツリーに &lt;code&gt;--index&lt;/code&gt; ますが、-indexオプションを使用すると、変更もインデックスにマージされます。</target>
        </trans-unit>
        <trans-unit id="f5e672ca7275921f27bc57abfee8498efa38d837" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--numstat&lt;/code&gt; option gives the diffstat(1) information but is designed for easier machine consumption. An entry in &lt;code&gt;--numstat&lt;/code&gt; output looks like this:</source>
          <target state="translated">&lt;code&gt;--numstat&lt;/code&gt; オプションはdiffstat（1）情報を提供しますが、簡単に機械の消費のために設計されています。 &lt;code&gt;--numstat&lt;/code&gt; 出力のエントリは次のようになります。</target>
        </trans-unit>
        <trans-unit id="824224d8413c92cfa07b10a7d5f109653a254225" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--patch&lt;/code&gt; option implies &lt;code&gt;--keep-index&lt;/code&gt;. You can use &lt;code&gt;--no-keep-index&lt;/code&gt; to override this.</source>
          <target state="translated">&lt;code&gt;--patch&lt;/code&gt; オプションは意味 &lt;code&gt;--keep-index&lt;/code&gt; 。 &lt;code&gt;--no-keep-index&lt;/code&gt; を使用してこれを上書きできます。</target>
        </trans-unit>
        <trans-unit id="cd53bf0606653a9e38fc2f67928f722d519b8437" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--prune-tags&lt;/code&gt; option is equivalent to having &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt; declared in the refspecs of the remote. This can lead to some seemingly strange interactions:</source>
          <target state="translated">&lt;code&gt;--prune-tags&lt;/code&gt; オプションが持つと同等です &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt; リモートのrefspecsで宣言されました。これにより、一見奇妙に見える相互作用が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="eedbb7a82985c4671f5041c09553972a9225fc17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--rebase-merges&lt;/code&gt; mode is similar in spirit to the deprecated &lt;code&gt;--preserve-merges&lt;/code&gt; but works with interactive rebases, where commits can be reordered, inserted and dropped at will.</source>
          <target state="translated">&lt;code&gt;--rebase-merges&lt;/code&gt; モードは、非推奨と精神に類似している &lt;code&gt;--preserve-merges&lt;/code&gt; が、コミットは、並べ替え挿入及び随意にドロップできるインタラクティブリベース、で動作します。</target>
        </trans-unit>
        <trans-unit id="8061f1189be4b513311a10997c4e6fc449baeaf4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--simplify-by-decoration&lt;/code&gt; option allows you to view only the big picture of the topology of the history, by omitting commits that are not referenced by tags. Commits are marked as !TREESAME (in other words, kept after history simplification rules described above) if (1) they are referenced by tags, or (2) they change the contents of the paths given on the command line. All other commits are marked as TREESAME (subject to be simplified away).</source>
          <target state="translated">&lt;code&gt;--simplify-by-decoration&lt;/code&gt; オプションを使用すると、タグによって参照されていないコミットを省略することにより、歴史のトポロジーの唯一の全体像を表示することができます。コミットは、（1）それらがタグによって参照されている場合、または（2）コマンドラインで指定されたパスの内容が変更されている場合、！TREESAME（つまり、上記の履歴簡略化ルールの後に保持される）としてマークされます。他のすべてのコミットはTREESAMEとしてマークされます（簡略化される可能性があります）。</target>
        </trans-unit>
        <trans-unit id="16b8753fdc735c82bb8e4b4e3197e33fe132b018" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--summary&lt;/code&gt; option describes newly added, deleted, renamed and copied files. The &lt;code&gt;--stat&lt;/code&gt; option adds diffstat(1) graph to the output. These options can be combined with other options, such as &lt;code&gt;-p&lt;/code&gt;, and are meant for human consumption.</source>
          <target state="translated">&lt;code&gt;--summary&lt;/code&gt; オプションが新たに追加、削除、ファイルの名前を変更してコピーについて説明します。 &lt;code&gt;--stat&lt;/code&gt; オプションは、出力にdiffstat（1）グラフが追加されます。これらのオプションは、 &lt;code&gt;-p&lt;/code&gt; などの他のオプションと組み合わせることができ、人間が使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="2fb3a538afbb18a8ca912f0cecf9a31cb6701775" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; option instructs &lt;code&gt;git config&lt;/code&gt; to ensure that incoming and outgoing values are canonicalize-able under the given &amp;lt;type&amp;gt;. If no &lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; is given, no canonicalization will be performed. Callers may unset an existing &lt;code&gt;--type&lt;/code&gt; specifier with &lt;code&gt;--no-type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; オプションを指示 &lt;code&gt;git config&lt;/code&gt; 着信および発信の値が与えられた&amp;lt;タイプ&amp;gt;下カノニカル化-できることを確実にします。何場合 &lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; 与えられていない、何の正規化は行われません。呼び出し元は、既存の &lt;code&gt;--type&lt;/code&gt; 指定子を &lt;code&gt;--no-type&lt;/code&gt; で設定解除できます。</target>
        </trans-unit>
        <trans-unit id="0c9422891d35819a54a8ef0ba6d7016d122547ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-M&lt;/code&gt; and &lt;code&gt;-C&lt;/code&gt; options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.</source>
          <target state="translated">&lt;code&gt;-M&lt;/code&gt; および &lt;code&gt;-C&lt;/code&gt; オプションは、ターゲットコピー/ N電位リネームの数である処理時間はO（n ^ 2）を必要とします。このオプションは、名前変更/コピーターゲットの数が指定した数を超えた場合に、名前変更/コピー検出が実行されないようにします。</target>
        </trans-unit>
        <trans-unit id="73fff0c26b859dbfe915afb814a50fa7bc541c41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-C&lt;/code&gt; options have the exact same semantics as &lt;code&gt;-m&lt;/code&gt; and &lt;code&gt;-M&lt;/code&gt;, except instead of the branch being renamed it along with its config and reflog will be copied to a new name.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; および &lt;code&gt;-C&lt;/code&gt; オプションはまったく同じ意味論持ち &lt;code&gt;-m&lt;/code&gt; と &lt;code&gt;-M&lt;/code&gt; を新しい名前にコピーされますその設定とREFLOGと一緒にそれを名前を変更した分岐されるのではなく、場合を除き、。</target>
        </trans-unit>
        <trans-unit id="89a7df63322c3f15984d17c0e2db0a5d71e95aa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-m&lt;/code&gt; and &lt;code&gt;-F&lt;/code&gt; options can be given any number of times, in any order. The commit log message will be composed in the order in which the options are given.</source>
          <target state="translated">&lt;code&gt;-m&lt;/code&gt; と &lt;code&gt;-F&lt;/code&gt; オプションは任意の順序で、任意の回数を与えることができます。コミットログメッセージは、オプションが指定された順序で作成されます。</target>
        </trans-unit>
        <trans-unit id="f4502e6a26132411ed2e9fd1c43849a487e5e5a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-m&lt;/code&gt; option is mutually exclusive with &lt;code&gt;-c&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt;, and &lt;code&gt;-F&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-m&lt;/code&gt; オプションは相互に排他的である &lt;code&gt;-c&lt;/code&gt; 、 &lt;code&gt;-C&lt;/code&gt; 、および &lt;code&gt;-F&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="38779d2c15d6e090718b82e6af2f8c359ec976d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.git-credentials&lt;/code&gt; file is stored in plaintext. Each credential is stored on its own line as a URL like:</source>
          <target state="translated">&lt;code&gt;.git-credentials&lt;/code&gt; ファイルが平文で保存されています。各資格情報は、次のようなURLとして独自の行に保存されます。</target>
        </trans-unit>
        <trans-unit id="905c63d14654cde00625cb5e82c7038bc34ea94e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.gitmodules&lt;/code&gt; file inside the superproject. A project usually uses this file to suggest defaults for the upstream collection of repositories for the mapping that is required between a submodule&amp;rsquo;s name and its path.</source>
          <target state="translated">スーパー &lt;code&gt;.gitmodules&lt;/code&gt; 内の.gitmodulesファイル。プロジェクトは通常、このファイルを使用して、サブモジュールの名前とそのパスの間に必要なマッピングのために、リポジトリの上流コレクションのデフォルトを提案します。</target>
        </trans-unit>
        <trans-unit id="0bb4fdb786947245a90430b5697a0e9422df1d21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.gitmodules&lt;/code&gt; file, located in the top-level directory of a Git working tree, is a text file with a syntax matching the requirements of &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; の Gitの作業ツリーの最上位ディレクトリにあるファイルは、要件に一致する構文を使用してテキストファイルで&lt;a href=&quot;git-config&quot;&gt;のgit-configと[1] &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d5324d8792f18dd9ac59490b336e09b1bd43353e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.mailmap&lt;/code&gt; feature is used to coalesce together commits by the same person in the shortlog, where their name and/or email address was spelled differently.</source>
          <target state="translated">&lt;code&gt;.mailmap&lt;/code&gt; 機能は、自分の名前および/または電子メールアドレスが異なって綴られたshortlogで同じ人によって合体一緒にコミットするために使用されます。</target>
        </trans-unit>
        <trans-unit id="73c3a5a96a8a6a48d412facd438733454a4a63a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CHERRY_PICK_HEAD&lt;/code&gt; ref is set to point at the commit that introduced the change that is difficult to apply.</source>
          <target state="translated">&lt;code&gt;CHERRY_PICK_HEAD&lt;/code&gt; の refは適用することは困難であるの変化を導入することをコミット時点に設定されています。</target>
        </trans-unit>
        <trans-unit id="df208c183263acdaf73c0a978db9f5c35380bc6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GIT_AUTHOR_DATE&lt;/code&gt;, &lt;code&gt;GIT_COMMITTER_DATE&lt;/code&gt; environment variables and the &lt;code&gt;--date&lt;/code&gt; option support the following date formats:</source>
          <target state="translated">&lt;code&gt;GIT_AUTHOR_DATE&lt;/code&gt; 、 &lt;code&gt;GIT_COMMITTER_DATE&lt;/code&gt; の環境変数と &lt;code&gt;--date&lt;/code&gt; オプションのサポート次の日付形式：</target>
        </trans-unit>
        <trans-unit id="ad08232602558aa9979e8ccc7bf4df9612b12ec8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GIT_AUTHOR_DATE&lt;/code&gt;, &lt;code&gt;GIT_COMMITTER_DATE&lt;/code&gt; environment variables support the following date formats:</source>
          <target state="translated">&lt;code&gt;GIT_AUTHOR_DATE&lt;/code&gt; 、 &lt;code&gt;GIT_COMMITTER_DATE&lt;/code&gt; の環境変数は次の日付形式をサポートしています。</target>
        </trans-unit>
        <trans-unit id="9c24e5e1da9f8726ec7abe4516a017b9495c2fe3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GIT_HTTP_EXPORT_ALL&lt;/code&gt; environmental variable may be passed to &lt;code&gt;git-http-backend&lt;/code&gt; to bypass the check for the &quot;git-daemon-export-ok&quot; file in each repository before allowing export of that repository.</source>
          <target state="translated">&lt;code&gt;GIT_HTTP_EXPORT_ALL&lt;/code&gt; 環境変数をに渡すことができる &lt;code&gt;git-http-backend&lt;/code&gt; そのリポジトリのエクスポートを許可する前に、各リポジトリに「gitのデーモン・輸出-OK」ファイルのチェックのバイパスへ。</target>
        </trans-unit>
        <trans-unit id="387cfeb550226cfd9e601b1b72a83920c3f36040" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GIT_HTTP_MAX_REQUEST_BUFFER&lt;/code&gt; environment variable (or the &lt;code&gt;http.maxRequestBuffer&lt;/code&gt; config variable) may be set to change the largest ref negotiation request that git will handle during a fetch; any fetch requiring a larger buffer will not succeed. This value should not normally need to be changed, but may be helpful if you are fetching from a repository with an extremely large number of refs. The value can be specified with a unit (e.g., &lt;code&gt;100M&lt;/code&gt; for 100 megabytes). The default is 10 megabytes.</source>
          <target state="translated">&lt;code&gt;GIT_HTTP_MAX_REQUEST_BUFFER&lt;/code&gt; の環境変数（または &lt;code&gt;http.maxRequestBuffer&lt;/code&gt; 設定変数）はgitのフェッチ中に処理することを最大のrefのネゴシエーション要求を変更するように設定することができます。より大きなバッファを必要とするフェッチは成功しません。この値は通常変更する必要はありませんが、非常に多数の参照を持つリポジトリからフェッチしている場合に役立つことがあります。値は単位で指定できます（100 MBの場合は &lt;code&gt;100M&lt;/code&gt; など）。デフォルトは10メガバイトです。</target>
        </trans-unit>
        <trans-unit id="166eca4501cd90cd3b21f8df969c5ee397d12242" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GIT_NO_REPLACE_OBJECTS&lt;/code&gt; environment variable can be set to achieve the same effect as the &lt;code&gt;--no-replace-objects&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;GIT_NO_REPLACE_OBJECTS&lt;/code&gt; の環境変数は、同じ効果を達成するように設定することができ &lt;code&gt;--no-replace-objects&lt;/code&gt; オプションを選択します。</target>
        </trans-unit>
        <trans-unit id="8bee9745a8d6377da5f35089625008b4042f0f35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GIT_PUSH_CERT*&lt;/code&gt; environment variables can be inspected, just as in &lt;code&gt;pre-receive&lt;/code&gt; hook, after accepting a signed push.</source>
          <target state="translated">&lt;code&gt;GIT_PUSH_CERT*&lt;/code&gt; 環境変数は、ちょうどのように、検査することができる &lt;code&gt;pre-receive&lt;/code&gt; 署名プッシュを受け入れた後、フック。</target>
        </trans-unit>
        <trans-unit id="8bc6550bd201f7a8ce8611abf35f278e4b89d03c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HEAD&lt;/code&gt; pointer stays the same.</source>
          <target state="translated">&lt;code&gt;HEAD&lt;/code&gt; のポインタは同じままです。</target>
        </trans-unit>
        <trans-unit id="652c0cf20ffd72216eb399a1f559569365b85933" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LF&lt;/code&gt; after &lt;code&gt;&amp;lt;delim&amp;gt; LF&lt;/code&gt; is optional (it used to be required).</source>
          <target state="translated">&lt;code&gt;LF&lt;/code&gt; 後 &lt;code&gt;&amp;lt;delim&amp;gt; LF&lt;/code&gt; （それが必要とされるために使用される）は任意です。</target>
        </trans-unit>
        <trans-unit id="c1bff9f88ec1fe482fd273291dfad27de492749b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LF&lt;/code&gt; after &lt;code&gt;&amp;lt;raw&amp;gt;&lt;/code&gt; is optional (it used to be required) but recommended. Always including it makes debugging a fast-import stream easier as the next command always starts in column 0 of the next line, even if &lt;code&gt;&amp;lt;raw&amp;gt;&lt;/code&gt; did not end with an &lt;code&gt;LF&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;raw&amp;gt;&lt;/code&gt; の後の &lt;code&gt;LF&lt;/code&gt; はオプションです（以前は必須でした）が推奨されます。 &lt;code&gt;&amp;lt;raw&amp;gt;&lt;/code&gt; が &lt;code&gt;LF&lt;/code&gt; で終わっていなくても、次のコマンドは常に次の行の列0から始まるため、常に含めることで、高速インポートストリームのデバッグが容易になります。</target>
        </trans-unit>
        <trans-unit id="ec7a854b1a4c70ca562f0584186eed412906ec8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LF&lt;/code&gt; after the command is optional (it used to be required).</source>
          <target state="translated">コマンドの後の &lt;code&gt;LF&lt;/code&gt; はオプションです（以前は必須でした）。</target>
        </trans-unit>
        <trans-unit id="9a136595a2c2895a25e4571b5fe242dd49c2174e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LF&lt;/code&gt; after the command is optional (it used to be required). Note that for reasons of backward compatibility, if the commit ends with a &lt;code&gt;data&lt;/code&gt; command (i.e. it has no &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;filemodify&lt;/code&gt;, &lt;code&gt;filedelete&lt;/code&gt;, &lt;code&gt;filecopy&lt;/code&gt;, &lt;code&gt;filerename&lt;/code&gt;, &lt;code&gt;filedeleteall&lt;/code&gt; or &lt;code&gt;notemodify&lt;/code&gt; commands) then two &lt;code&gt;LF&lt;/code&gt; commands may appear at the end of the command instead of just one.</source>
          <target state="translated">コマンドの後の &lt;code&gt;LF&lt;/code&gt; はオプションです（以前は必須でした）。下位互換性の理由から、コミットが &lt;code&gt;data&lt;/code&gt; コマンドで終了する場合（つまり、 &lt;code&gt;from&lt;/code&gt; 、 &lt;code&gt;merge&lt;/code&gt; 、 &lt;code&gt;filemodify&lt;/code&gt; 、 &lt;code&gt;filedelete&lt;/code&gt; 、 &lt;code&gt;filecopy&lt;/code&gt; 、 &lt;code&gt;filerename&lt;/code&gt; 、 &lt;code&gt;filedeleteall&lt;/code&gt; または &lt;code&gt;notemodify&lt;/code&gt; コマンドがない場合）、コマンドの最後に2つの &lt;code&gt;LF&lt;/code&gt; コマンドが表示される場合があることに注意してください。 1つだけではなく。</target>
        </trans-unit>
        <trans-unit id="6afb1837ee3e8f65249dcb4905156711b603dd19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MERGE_HEAD&lt;/code&gt; ref is set to point to the other branch head.</source>
          <target state="translated">&lt;code&gt;MERGE_HEAD&lt;/code&gt; の refは、他のブランチヘッドを指すように設定されています。</target>
        </trans-unit>
        <trans-unit id="4dcd07a8427d3cae73e7340717a2be5da78b122e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;^0&lt;/code&gt; suffix is necessary as fast-import does not permit a branch to start from itself, and the branch is created in memory before the &lt;code&gt;from&lt;/code&gt; command is even read from the input. Adding &lt;code&gt;^0&lt;/code&gt; will force fast-import to resolve the commit through Git&amp;rsquo;s revision parsing library, rather than its internal branch table, thereby loading in the existing value of the branch.</source>
          <target state="translated">&lt;code&gt;^0&lt;/code&gt; 高速インポートは、それ自体から開始する枝を許可しない、と分岐が前にメモリ内に作成されるようサフィックスが必要です &lt;code&gt;from&lt;/code&gt; 、コマンドも、入力から読み込まれます。 &lt;code&gt;^0&lt;/code&gt; を追加すると、内部インポートテーブルではなく、Gitのリビジョン解析ライブラリを使用して、高速インポートでコミットを解決し、ブランチの既存の値をロードします。</target>
        </trans-unit>
        <trans-unit id="675155c0bc0c9682b02ea7dc72c6fe717f8d57df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;^r1 r2&lt;/code&gt; set operation appears so often that there is a shorthand for it. When you have two commits &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; (named according to the syntax explained in SPECIFYING REVISIONS above), you can ask for commits that are reachable from r2 excluding those that are reachable from r1 by &lt;code&gt;^r1 r2&lt;/code&gt; and it can be written as &lt;code&gt;r1..r2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;^r1 r2&lt;/code&gt; 集合演算は、それほど頻繁にそれのための速記があることが表示されます。2つのコミット &lt;code&gt;r1&lt;/code&gt; と &lt;code&gt;r2&lt;/code&gt; （上記の改訂の説明で説明されている構文に従って名前が付けられている）がある場合、 &lt;code&gt;^r1 r2&lt;/code&gt; によってr1から到達可能なコミットを除いて、r2から到達可能なコミットを要求でき、 &lt;code&gt;r1..r2&lt;/code&gt; として書き込むことができます。 .r2。</target>
        </trans-unit>
        <trans-unit id="c300333c575f956c2060e4236a825e5a15abf118" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;a/&lt;/code&gt; and &lt;code&gt;b/&lt;/code&gt; filenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion, &lt;code&gt;/dev/null&lt;/code&gt; is &lt;code&gt;not&lt;/code&gt; used in place of the &lt;code&gt;a/&lt;/code&gt; or &lt;code&gt;b/&lt;/code&gt; filenames.</source>
          <target state="translated">&lt;code&gt;a/&lt;/code&gt; 及び &lt;code&gt;b/&lt;/code&gt; 名前変更/コピーが関与しなければ、ファイル名は同じです。特に、作成または削除の場合でも、 &lt;code&gt;a/&lt;/code&gt; または &lt;code&gt;b/&lt;/code&gt; ファイル名の代わりに &lt;code&gt;/dev/null&lt;/code&gt; は使用され &lt;code&gt;not&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eab33dae66d0744b7d6024e6ba0526d3cbdb099d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;base commit&lt;/code&gt; is shown as &quot;base-commit: &quot; followed by the 40-hex of the commit object name. A &lt;code&gt;prerequisite patch&lt;/code&gt; is shown as &quot;prerequisite-patch-id: &quot; followed by the 40-hex &lt;code&gt;patch id&lt;/code&gt;, which can be obtained by passing the patch through the &lt;code&gt;git patch-id --stable&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;base commit&lt;/code&gt; コミットオブジェクト名の40進続く：「ベースコミット」として示されています。 &lt;code&gt;prerequisite patch&lt;/code&gt; 40進続く：「前提パッチ-ID」として示されている &lt;code&gt;patch id&lt;/code&gt; を介してパッチを通過させることによって得ることができ、 &lt;code&gt;git patch-id --stable&lt;/code&gt; コマンド。</target>
        </trans-unit>
        <trans-unit id="4310c66d08d5e3db5f29a0976c449ecfedbc1c27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;category&lt;/code&gt; field may be used in a future enhancement to do category-based filtering.</source>
          <target state="translated">&lt;code&gt;category&lt;/code&gt; フィールドは、カテゴリベースのフィルタリングを行うために、将来の拡張に使用することができます。</target>
        </trans-unit>
        <trans-unit id="957c03f80393df2f84f209da8b3d5d5b6c66e351" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;commit walkers&lt;/code&gt; are sometimes also called &lt;code&gt;dumb transports&lt;/code&gt;, because they do not require any Git aware smart server like Git Native transport does. Any stock HTTP server that does not even support directory index would suffice. But you must prepare your repository with &lt;code&gt;git update-server-info&lt;/code&gt; to help dumb transport downloaders.</source>
          <target state="translated">&lt;code&gt;commit walkers&lt;/code&gt; 時々も呼ばれている &lt;code&gt;dumb transports&lt;/code&gt; Gitのネイティブトランスポートがないように、彼らは任意のGitの意識スマートサーバーを必要としないので、。ディレクトリインデックスさえもサポートしていない標準のHTTPサーバーで十分です。しかし、トランスポートダウンローダーを &lt;code&gt;git update-server-info&lt;/code&gt; 、git update-server-infoを使用してリポジトリを準備する必要があります。</target>
        </trans-unit>
        <trans-unit id="16292719b3497b67052d324a828a5bf607c10cb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;committer&lt;/code&gt; command indicates who made this commit, and when they made it.</source>
          <target state="translated">&lt;code&gt;committer&lt;/code&gt; コマンドは、このコミット作られ、そして、彼らはそれを作ったとき、誰を示しています。</target>
        </trans-unit>
        <trans-unit id="7e0ffba56fb259ff8ccb9999d0c02587815b0675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;core.whitespace&lt;/code&gt; configuration variable allows you to define what &lt;code&gt;diff&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; should consider whitespace errors for all paths in the project (See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). This attribute gives you finer control per path.</source>
          <target state="translated">&lt;code&gt;core.whitespace&lt;/code&gt; の設定変数は、あなたは何を定義することを可能にする &lt;code&gt;diff&lt;/code&gt; と &lt;code&gt;apply&lt;/code&gt; （参照プロジェクト内のすべてのパスのための空白の誤差を考慮すべきで&lt;a href=&quot;git-config&quot;&gt;はgit-config設定[1] &lt;/a&gt;）。この属性により、パスごとに細かく制御できます。</target>
        </trans-unit>
        <trans-unit id="c4cf312c5837f50305786c4fff7bd921da0df1e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; command following &lt;code&gt;committer&lt;/code&gt; must supply the commit message (see below for &lt;code&gt;data&lt;/code&gt; command syntax). To import an empty commit message use a 0 length data. Commit messages are free-form and are not interpreted by Git. Currently they must be encoded in UTF-8, as fast-import does not permit other encodings to be specified.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 次のコマンド &lt;code&gt;committer&lt;/code&gt; メッセージ（下記参照コミット供給しなければならない &lt;code&gt;data&lt;/code&gt; コマンドの構文を）。空のコミットメッセージをインポートするには、長さ0のデータを使用します。コミットメッセージは自由形式であり、Gitによって解釈されません。現在、高速インポートでは他のエンコーディングを指定できないため、UTF-8でエンコードする必要があります。</target>
        </trans-unit>
        <trans-unit id="fe1dcaff1f205cb554cce0caa7f556f5b3750431" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; command following &lt;code&gt;tagger&lt;/code&gt; must supply the annotated tag message (see below for &lt;code&gt;data&lt;/code&gt; command syntax). To import an empty tag message use a 0 length data. Tag messages are free-form and are not interpreted by Git. Currently they must be encoded in UTF-8, as fast-import does not permit other encodings to be specified.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 次のコマンド &lt;code&gt;tagger&lt;/code&gt; （下記参照注釈付きタグ・メッセージを供給しなければならない &lt;code&gt;data&lt;/code&gt; コマンド構文）。空のタグメッセージをインポートするには、長さ0のデータを使用します。タグメッセージは自由形式で、Gitによって解釈されません。現在、高速インポートでは他のエンコーディングを指定できないため、UTF-8でエンコードする必要があります。</target>
        </trans-unit>
        <trans-unit id="463a929e2c19b7bbf028008ad9aa5a5763e6cf66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;export-marks&lt;/code&gt; and &lt;code&gt;import-marks&lt;/code&gt; capabilities, if specified, affect this command in so far as they are passed on to &lt;code&gt;git fast-export&lt;/code&gt;, which then will load/store a table of marks for local objects. This can be used to implement for incremental operations.</source>
          <target state="translated">&lt;code&gt;export-marks&lt;/code&gt; および &lt;code&gt;import-marks&lt;/code&gt; する上での機能は、指定された場合、これまでのところ、彼らが渡されるように、このコマンドには影響を与え &lt;code&gt;git fast-export&lt;/code&gt; その後、ロード/ローカル・オブジェクトのためのマークのテーブルを格納します。これは、増分操作の実装に使用できます。</target>
        </trans-unit>
        <trans-unit id="b29369cc7c91f799f3a98b04ce067ccee4eaff48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extra-info&lt;/code&gt; is again command-dependent. If it is empty, the preceding SP is also omitted. Currently, no commands pass any &lt;code&gt;extra-info&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extra-info&lt;/code&gt; 再度コマンドに依存します。空の場合、先行するSPも省略されます。現在、 &lt;code&gt;extra-info&lt;/code&gt; 渡すコマンドはありません。</target>
        </trans-unit>
        <trans-unit id="42c3cfeeb6fb7d3b809e4b2424ab05b633a62a10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format:&amp;lt;string&amp;gt;&lt;/code&gt; format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you get a newline with &lt;code&gt;%n&lt;/code&gt; instead of &lt;code&gt;\n&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;format:&amp;lt;string&amp;gt;&lt;/code&gt; の形式は、あなたが示ししたい情報を指定することができます。これは、 &lt;code&gt;\n&lt;/code&gt; ではなく &lt;code&gt;%n&lt;/code&gt; を使用して改行を取得することを除いて、printf形式と少し似ています。</target>
        </trans-unit>
        <trans-unit id="6d12446e6ba50613ffa6591e4d86ab902d5b116f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from&lt;/code&gt; command is the same as in the &lt;code&gt;commit&lt;/code&gt; command; see above for details.</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; コマンドは同様である &lt;code&gt;commit&lt;/code&gt; コマンド。詳細は上記をご覧ください。</target>
        </trans-unit>
        <trans-unit id="d9bc1ff5b134d7635edcea3cd4e631a291483167" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from&lt;/code&gt; command is used to specify the commit to initialize this branch from. This revision will be the first ancestor of the new commit. The state of the tree built at this commit will begin with the state at the &lt;code&gt;from&lt;/code&gt; commit, and be altered by the content modifications in this commit.</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; コマンドがからこのブランチを初期化するためにコミットを指定するために使用されます。このリビジョンは、新しいコミットの最初の祖先になります。このコミットで構築されたツリーの状態は、 &lt;code&gt;from&lt;/code&gt; コミットの状態から始まり、このコミットの内容変更によって変更されます。</target>
        </trans-unit>
        <trans-unit id="75dab416c6ca16533650ccb3bdbb6f1c8c80e31e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git add&lt;/code&gt; command will not add ignored files by default. If any ignored files were explicitly specified on the command line, &lt;code&gt;git add&lt;/code&gt; will fail with a list of ignored files. Ignored files reached by directory recursion or filename globbing performed by Git (quote your globs before the shell) will be silently ignored. The &lt;code&gt;git add&lt;/code&gt; command can be used to add ignored files with the &lt;code&gt;-f&lt;/code&gt; (force) option.</source>
          <target state="translated">&lt;code&gt;git add&lt;/code&gt; コマンドは、デフォルトで無視されたファイルを追加しません。無視されたファイルがコマンドラインで明示的に指定された場合、 &lt;code&gt;git add&lt;/code&gt; は無視されたファイルのリストで失敗します。ディレクトリの再帰またはGitによって実行されたファイル名のグロビング（シェルの前にグロブを引用）によって到達された無視されたファイルは、黙って無視されます。 &lt;code&gt;git add&lt;/code&gt; コマンドは無視してファイルを追加するために使用することができ &lt;code&gt;-f&lt;/code&gt; （force）オプション。</target>
        </trans-unit>
        <trans-unit id="9bd7293224a598d82d7fb9b059bf233156e9f91a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git bundle&lt;/code&gt; command packages objects and references in an archive at the originating machine, which can then be imported into another repository using &lt;code&gt;git fetch&lt;/code&gt;, &lt;code&gt;git pull&lt;/code&gt;, or &lt;code&gt;git clone&lt;/code&gt;, after moving the archive by some means (e.g., by sneakernet).</source>
          <target state="translated">&lt;code&gt;git bundle&lt;/code&gt; し、別の使用してリポジトリにインポートすることができ、発信機でアーカイブ内のコマンドパッケージオブジェクトと参照、 &lt;code&gt;git fetch&lt;/code&gt; 、 &lt;code&gt;git pull&lt;/code&gt; 、または &lt;code&gt;git clone&lt;/code&gt; （スニーカーネットによって、例えば）何らかの手段でアーカイブを移動した後、。</target>
        </trans-unit>
        <trans-unit id="3d9620664b0c9d56c3287a812c3ff6b6d1c8717f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git diff-*&lt;/code&gt; family works by first comparing two sets of files:</source>
          <target state="translated">&lt;code&gt;git diff-*&lt;/code&gt; 最初のファイルの2セットを比較することにより、家族の作品：</target>
        </trans-unit>
        <trans-unit id="597ca1f538bf6e2f60b9e6f9e15d7129efb080fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git fetch&lt;/code&gt; operation always stores the head of the last fetched branch in FETCH_HEAD. For example, if you run &lt;code&gt;git fetch&lt;/code&gt; without specifying a local branch as the target of the operation</source>
          <target state="translated">&lt;code&gt;git fetch&lt;/code&gt; 操作が常にFETCH_HEADの最後のフェッチされた枝の頭を格納します。たとえば、ローカルブランチを操作のターゲットとして指定せずに &lt;code&gt;git fetch&lt;/code&gt; を実行した場合</target>
        </trans-unit>
        <trans-unit id="f809c0db2fabe1b716a044f1ae315c3eafe27e59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git fmt-merge-msg&lt;/code&gt; command can be used to give a good default for automated &lt;code&gt;git merge&lt;/code&gt; invocations. The automated message can include the branch description.</source>
          <target state="translated">&lt;code&gt;git fmt-merge-msg&lt;/code&gt; コマンドは、自動化のための適切なデフォルト与えるために使用することができます &lt;code&gt;git merge&lt;/code&gt; 呼び出しを。自動メッセージには、ブランチの説明を含めることができます。</target>
        </trans-unit>
        <trans-unit id="dae50540309298598631c32bc4ba09615f81ee1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git gc --auto&lt;/code&gt; command will run the &lt;code&gt;pre-auto-gc&lt;/code&gt; hook. See &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;git gc --auto&lt;/code&gt; コマンドが実行され &lt;code&gt;pre-auto-gc&lt;/code&gt; フックを。詳細については、&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="cfc7fc175318cd6dff60f69f9572984dc7656815" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git grep&lt;/code&gt; command can search for strings in any version of your project, so</source>
          <target state="translated">&lt;code&gt;git grep&lt;/code&gt; ののコマンドは、そう、あなたのプロジェクトのいずれかのバージョンの文字列を検索することができます</target>
        </trans-unit>
        <trans-unit id="10370106ed757f0fcfa619078db112558b3f4b4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git log&lt;/code&gt; command has a weakness: it must present commits in a list. When the history has lines of development that diverged and then merged back together, the order in which &lt;code&gt;git log&lt;/code&gt; presents those commits is meaningless.</source>
          <target state="translated">&lt;code&gt;git log&lt;/code&gt; コマンドは弱点があります。それは、リスト内のコミットを提示しなければなりません。履歴に分岐してから再びマージされた開発ラインがある場合、 &lt;code&gt;git log&lt;/code&gt; それらのコミットを提示する順序は意味がありません。</target>
        </trans-unit>
        <trans-unit id="2918fcbf92a1ba7da67f920488e3f1571c6c776d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git pull&lt;/code&gt; command can also be given &lt;code&gt;.&lt;/code&gt; as the &quot;remote&quot; repository, in which case it just merges in a branch from the current repository; so the commands</source>
          <target state="translated">&lt;code&gt;git pull&lt;/code&gt; コマンドも与えることができます &lt;code&gt;.&lt;/code&gt; 「リモート」リポジトリとして。この場合、現在のリポジトリからのブランチにマージされます。だからコマンド</target>
        </trans-unit>
        <trans-unit id="ae6be494d942d11be1fef84bf75e14340e42ba70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git sh-setup&lt;/code&gt; scriptlet is designed to be sourced (using &lt;code&gt;.&lt;/code&gt;) by other shell scripts to set up some variables pointing at the normal Git directories and a few helper shell functions.</source>
          <target state="translated">&lt;code&gt;git sh-setup&lt;/code&gt; スクリプトレットは、（使用して供給されるように設計されている &lt;code&gt;.&lt;/code&gt; 通常のGitのディレクトリといくつかのヘルパーシェル関数を指していくつかの変数を設定するには、他のシェルスクリプトによって）。</target>
        </trans-unit>
        <trans-unit id="b8d00251834fb59fdb3aac3b6b6d2fd6617d8c54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git status&lt;/code&gt; command can be used to obtain a summary of which files have changes that are staged for the next commit.</source>
          <target state="translated">&lt;code&gt;git status&lt;/code&gt; コマンドは、ファイルは次のコミットのために上演された変更を持っているの概要を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="1114dd8f20b27292636eee44dbca10b695a7e192" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git submodule add &amp;lt;repo&amp;gt; &amp;lt;path&amp;gt;&lt;/code&gt; command does a couple of things:</source>
          <target state="translated">&lt;code&gt;git submodule add &amp;lt;repo&amp;gt; &amp;lt;path&amp;gt;&lt;/code&gt; コマンドを物事のカップルを行います。</target>
        </trans-unit>
        <trans-unit id="851ad3692f8ce86e89fabf82d757953cfb293665" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git svn log&lt;/code&gt; command will not work on repositories using this, either. Using this conflicts with the &lt;code&gt;useSvmProps&lt;/code&gt; option for (hopefully) obvious reasons.</source>
          <target state="translated">&lt;code&gt;git svn log&lt;/code&gt; コマンドはどちらか、これを使用してリポジトリでは動作しません。これを使用すると、（おそらく）明らかな理由により、 &lt;code&gt;useSvmProps&lt;/code&gt; オプションと競合します。</target>
        </trans-unit>
        <trans-unit id="54f2e5960f99dce6a894019f61b5f183cfaf541a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git switch&lt;/code&gt; command normally expects a branch head, but will also accept an arbitrary commit when invoked with --detach; for example, you can check out the commit referenced by a tag:</source>
          <target state="translated">&lt;code&gt;git switch&lt;/code&gt; コマンドが正常に分岐頭を期待するだけでなく、--detachで呼び出されたときに、任意のコミットを受け付けます。たとえば、タグで参照されているコミットをチェックアウトできます。</target>
        </trans-unit>
        <trans-unit id="5df4353714e03396f22186d308b555d9fc45aa0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git unpack-objects&lt;/code&gt; command can read the packed archive and expand the objects contained in the pack into &quot;one-file one-object&quot; format; this is typically done by the smart-pull commands when a pack is created on-the-fly for efficient network transport by their peers.</source>
          <target state="translated">&lt;code&gt;git unpack-objects&lt;/code&gt; コマンドがパックされたアーカイブを読んで、オブジェクトは「1ファイル1 -オブジェクト」形式にパックに含まれている拡張することができます。これは通常、ピアによる効率的なネットワーク転送のためにオンザフライでパックが作成されるときに、スマートプルコマンドによって実行されます。</target>
        </trans-unit>
        <trans-unit id="472b18d3af19081ec08acbffb4a8b9828ded3de3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git write-tree&lt;/code&gt; command refuses to write a nonsensical tree, and it will complain about unmerged entries if it sees a single entry that is not stage 0.</source>
          <target state="translated">&lt;code&gt;git write-tree&lt;/code&gt; コマンドは、無意味な木を書くことを拒否し、それがステージ0ではない単一のエントリを見ればそれがマージされていないエントリが文句を言うでしょう。</target>
        </trans-unit>
        <trans-unit id="57ed6fd41631cf164adf8f1a5f87022b80e95155" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git-fetch&lt;/code&gt; command, with no arguments, will update all of the remote-tracking branches to the latest version found in the original repository. It will not touch any of your own branches&amp;mdash;​not even the &quot;master&quot; branch that was created for you on clone.</source>
          <target state="translated">引数なしの &lt;code&gt;git-fetch&lt;/code&gt; コマンドは、すべてのリモート追跡ブランチを元のリポジトリにある最新バージョンに更新します。クローンで作成された「マスター」ブランチでさえ、独自のブランチには影響しません。</target>
        </trans-unit>
        <trans-unit id="b7a1f970e8485b643b6fd9d3ee5bf5ec87b44b17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gitlink&lt;/code&gt; entry contains the object name of the commit that the superproject expects the submodule&amp;rsquo;s working directory to be at.</source>
          <target state="translated">&lt;code&gt;gitlink&lt;/code&gt; エントリは、親プロジェクトは、サブモジュールの作業ディレクトリがであることを期待しているコミットのオブジェクト名が含まれています。</target>
        </trans-unit>
        <trans-unit id="20a22a2e8dd656430183eebd26fcd541802b3980" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;help.browser&lt;/code&gt;, &lt;code&gt;web.browser&lt;/code&gt; and &lt;code&gt;browser.&amp;lt;tool&amp;gt;.path&lt;/code&gt; will also be checked if the &lt;code&gt;web&lt;/code&gt; format is chosen (either by command-line option or configuration variable). See &lt;code&gt;-w|--web&lt;/code&gt; in the OPTIONS section above and git-web{litdd}browse[1].</source>
          <target state="translated">&lt;code&gt;help.browser&lt;/code&gt; 、 &lt;code&gt;web.browser&lt;/code&gt; および &lt;code&gt;browser.&amp;lt;tool&amp;gt;.path&lt;/code&gt; 場合もチェックされる &lt;code&gt;web&lt;/code&gt; フォーマットは（コマンドラインオプションまたは構成変数のいずれかによって）選択されています。参照 &lt;code&gt;-w|--web&lt;/code&gt; とgitのウェブ{litdd}参照]上記[1] OPTIONSセクションです。</target>
        </trans-unit>
        <trans-unit id="d643b3df461bdc6854f7d047b7c0264699b4e1d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;includeIf&lt;/code&gt; sections allow you to include config directives from another source. These sections behave identically to each other with the exception that &lt;code&gt;includeIf&lt;/code&gt; sections may be ignored if their condition does not evaluate to true; see &quot;Conditional includes&quot; below.</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; と &lt;code&gt;includeIf&lt;/code&gt; のセクションでは、別のソースからの設定ディレクティブを含めることができます。これらのセクションは、条件がtrueと評価されない場合に &lt;code&gt;includeIf&lt;/code&gt; セクションが無視されることを除いて、互いに同じように動作します。以下の「条件付きインクルード」を参照してください。</target>
        </trans-unit>
        <trans-unit id="25df8c5531688eabec317d8bad065a9bd5755f39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;label&lt;/code&gt; command associates a label with the current HEAD when that command is executed. These labels are created as worktree-local refs (&lt;code&gt;refs/rewritten/&amp;lt;label&amp;gt;&lt;/code&gt;) that will be deleted when the rebase finishes. That way, rebase operations in multiple worktrees linked to the same repository do not interfere with one another. If the &lt;code&gt;label&lt;/code&gt; command fails, it is rescheduled immediately, with a helpful message how to proceed.</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; そのコマンドが実行されたときにコマンドを実行すると、現在のHEADとラベルを関連付けます。これらのラベルは、リベースが完了すると削除されるワークツリーローカル参照（ &lt;code&gt;refs/rewritten/&amp;lt;label&amp;gt;&lt;/code&gt; ）として作成されます。このように、同じリポジトリにリンクされた複数のワークツリーでのリベース操作は、互いに干渉しません。場合は &lt;code&gt;label&lt;/code&gt; コマンドが失敗し、処理方法、それは有用なメッセージで、すぐに再スケジュールされます。</target>
        </trans-unit>
        <trans-unit id="a21f07c748b4f824d325c5d844a166616c79a19e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list&lt;/code&gt; command produces a list of refs in which each ref may be followed by a list of attributes. The following ref list attributes are defined.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; コマンドは、各REF属性のリストが続いてもよいした参考文献のリストを生成します。次の参照リスト属性が定義されています。</target>
        </trans-unit>
        <trans-unit id="a1948673e2dc6e9b36baf9466260194608388c73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ls&lt;/code&gt; command can also be used where a &lt;code&gt;filemodify&lt;/code&gt; directive can appear, allowing it to be used in the middle of a commit.</source>
          <target state="translated">&lt;code&gt;ls&lt;/code&gt; コマンドも場合に使用することができます &lt;code&gt;filemodify&lt;/code&gt; ディレクティブは、それがコミットの途中で使用することができるように、表示されます。</target>
        </trans-unit>
        <trans-unit id="9f751fdc4139000f76be8c4b7f0362d024d6ccd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maint&lt;/code&gt; branch should now be fast-forwarded to the newly released code so that maintenance fixes can be tracked for the current release:</source>
          <target state="translated">&lt;code&gt;maint&lt;/code&gt; メンテナンスフィックスは現在のリリースのために追跡できるように枝は、新しくリリースされたコードを早送りする必要があります：</target>
        </trans-unit>
        <trans-unit id="3d08be0d91fe4ba76005ea415ec8dd980a19baaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;man.viewer&lt;/code&gt; configuration variable will be checked if the &lt;code&gt;man&lt;/code&gt; format is chosen. The following values are currently supported:</source>
          <target state="translated">&lt;code&gt;man.viewer&lt;/code&gt; の場合は設定変数がチェックされます &lt;code&gt;man&lt;/code&gt; 形式が選択されています。現在、次の値がサポートされています。</target>
        </trans-unit>
        <trans-unit id="4d99fda454f21ad231a7b020da5a33fbc1590dfe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;master&lt;/code&gt; branch is supposed to be a superset of &lt;code&gt;maint&lt;/code&gt;. If this condition does not hold, then &lt;code&gt;maint&lt;/code&gt; contains some commits that are not included on &lt;code&gt;master&lt;/code&gt;. The fixes represented by those commits will therefore not be included in your feature release.</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; ブランチはのスーパーセットであると考えられる &lt;code&gt;maint&lt;/code&gt; 。この条件が満たされない場合、 &lt;code&gt;maint&lt;/code&gt; には、 &lt;code&gt;master&lt;/code&gt; に含まれていないいくつかのコミットが含まれています。したがって、これらのコミットで表される修正は、機能リリースに含まれません。</target>
        </trans-unit>
        <trans-unit id="60a9438818e32daade34327aac8510a028d0a280" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;merge.*.driver&lt;/code&gt; variable&amp;rsquo;s value is used to construct a command to run to merge ancestor&amp;rsquo;s version (&lt;code&gt;%O&lt;/code&gt;), current version (&lt;code&gt;%A&lt;/code&gt;) and the other branches' version (&lt;code&gt;%B&lt;/code&gt;). These three tokens are replaced with the names of temporary files that hold the contents of these versions when the command line is built. Additionally, %L will be replaced with the conflict marker size (see below).</source>
          <target state="translated">&lt;code&gt;merge.*.driver&lt;/code&gt; 変数の値は、先祖のバージョン（マージするために実行するコマンド構築するために使用され &lt;code&gt;%O&lt;/code&gt; ）、現在のバージョン（ &lt;code&gt;%A&lt;/code&gt; ）と他のブランチバージョン（ &lt;code&gt;%B&lt;/code&gt; を）。これらの3つのトークンは、コマンドラインのビルド時にこれらのバージョンの内容を保持する一時ファイルの名前に置き換えられます。さらに、％Lは競合マーカーのサイズに置き換えられます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="8135860bcb3c213dc65a79f9d59c1c4cf76a9b52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;merge.*.name&lt;/code&gt; variable gives the driver a human-readable name.</source>
          <target state="translated">&lt;code&gt;merge.*.name&lt;/code&gt; 変数には、ドライバーに人間可読な名前を与えます。</target>
        </trans-unit>
        <trans-unit id="531f58358e8d95bd1e04306b8f06edec09e06aba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;merge.*.recursive&lt;/code&gt; variable specifies what other merge driver to use when the merge driver is called for an internal merge between common ancestors, when there are more than one. When left unspecified, the driver itself is used for both internal merge and the final merge.</source>
          <target state="translated">&lt;code&gt;merge.*.recursive&lt;/code&gt; マージドライバが1個以下がある場合には、共通の祖先との間の内部のマージのために呼び出されたときに、マージ・ドライバが使用するために、他のどのような変数を指定します。指定しない場合、ドライバー自体が内部マージと最終マージの両方に使用されます。</target>
        </trans-unit>
        <trans-unit id="0e9e9f9df980dcf05008ee310843fafb365f76e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;merge&lt;/code&gt; command will merge the specified revision(s) into whatever is HEAD at that time. With &lt;code&gt;-C &amp;lt;original-commit&amp;gt;&lt;/code&gt;, the commit message of the specified merge commit will be used. When the &lt;code&gt;-C&lt;/code&gt; is changed to a lower-case &lt;code&gt;-c&lt;/code&gt;, the message will be opened in an editor after a successful merge so that the user can edit the message.</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; コマンドは、その時点でHEADが何であれに指定されたリビジョン（複数可）をマージします。 &lt;code&gt;-C &amp;lt;original-commit&amp;gt;&lt;/code&gt; 、指定されたマージのコミットメッセージをコミット使用されます。とき &lt;code&gt;-C&lt;/code&gt; が小文字に変更され &lt;code&gt;-c&lt;/code&gt; ユーザーがメッセージを編集できるように、メッセージが成功し、マージした後、エディタで開かれます。</target>
        </trans-unit>
        <trans-unit id="103d9db55b62f87264ea4e2293c619e5e886c09f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode &amp;lt;mode&amp;gt;,&amp;lt;mode&amp;gt;..&amp;lt;mode&amp;gt;&lt;/code&gt; line appears only if at least one of the &amp;lt;mode&amp;gt; is different from the rest. Extended headers with information about detected contents movement (renames and copying detection) are designed to work with diff of two &amp;lt;tree-ish&amp;gt; and are not used by combined diff format.</source>
          <target state="translated">&lt;code&gt;mode &amp;lt;mode&amp;gt;,&amp;lt;mode&amp;gt;..&amp;lt;mode&amp;gt;&lt;/code&gt; の行は、&amp;lt;モード&amp;gt;の少なくとも一方が休みと異なっている場合にのみ表示されます。検出されたコンテンツの移動（名前の変更とコピーの検出）に関する情報を含む拡張ヘッダーは、2つの&amp;lt;tree-ish&amp;gt;のdiffで機能するように設計されており、diff形式の組み合わせでは使用されません。</target>
        </trans-unit>
        <trans-unit id="245bf1c27c1e24c16ea60d971116c678983044e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p4-pre-submit&lt;/code&gt; hook is executed if it exists and is executable. The hook takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevents &lt;code&gt;git-p4 submit&lt;/code&gt; from launching.</source>
          <target state="translated">&lt;code&gt;p4-pre-submit&lt;/code&gt; 、それが存在し、実行可能な場合フックが実行されます。フックはパラメーターを取りませんが、標準入力からは何も取りません。このスクリプトからゼロ以外のステータスで終了すると、 &lt;code&gt;git-p4 submit&lt;/code&gt; が起動しなくなります。</target>
        </trans-unit>
        <trans-unit id="55ac82e7ce6eab5b9d775518541be1b358e64d26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;post-update&lt;/code&gt; hook can tell what are the heads that were pushed, but it does not know what their original and updated values are, so it is a poor place to do log old..new. The &lt;a href=&quot;#post-receive&quot;&gt;&lt;em&gt;post-receive&lt;/em&gt;&lt;/a&gt; hook does get both original and updated values of the refs. You might consider it instead if you need them.</source>
          <target state="translated">&lt;code&gt;post-update&lt;/code&gt; それはold..newログインを行うために貧しい場所で、フックがプッシュされたヘッドで何を伝えることができますが、それは彼らの元と更新された値が何であるかを知りません。&lt;a href=&quot;#post-receive&quot;&gt;&lt;em&gt;ポスト受ける&lt;/em&gt;&lt;/a&gt;フックは、引用文献の両方の元と更新された値を取得ありません。それらが必要な場合は、代わりに検討することができます。</target>
        </trans-unit>
        <trans-unit id="7b1878af31d43f94d962552d8195f8f92835c4ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pre-receive&lt;/code&gt; hook MUST NOT update any refs to point to quarantined objects. Other programs accessing the repository will not be able to see the objects (and if the pre-receive hook fails, those refs would become corrupted). For safety, any ref updates from within &lt;code&gt;pre-receive&lt;/code&gt; are automatically rejected.</source>
          <target state="translated">&lt;code&gt;pre-receive&lt;/code&gt; フックは、隔離されたオブジェクトを指すようにすべての引用文献をアップデートしてはいけません。リポジトリにアクセスする他のプログラムはオブジェクトを見ることができません（事前受信フックが失敗した場合、それらの参照は破損します）。安全のため、 &lt;code&gt;pre-receive&lt;/code&gt; 内からの参照更新はすべて自動的に拒否されます。</target>
        </trans-unit>
        <trans-unit id="eb98cabc50bf16dce560817c25a1c4d64601cce6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pu&lt;/code&gt; branch will be updated even if it does not fast-forward, because it is prefixed with a plus sign; &lt;code&gt;tmp&lt;/code&gt; will not be.</source>
          <target state="translated">&lt;code&gt;pu&lt;/code&gt; それはプラス記号が付いているので、ブランチは、それは早送りしない場合であっても更新されます。 &lt;code&gt;tmp&lt;/code&gt; はありません。</target>
        </trans-unit>
        <trans-unit id="d5f7235d0f9a5c833ca324eff7dc4ec19b6e7285" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pull&lt;/code&gt; command knows where to get updates from because of certain configuration variables that were set by the first &lt;code&gt;git clone&lt;/code&gt; command; see &lt;code&gt;git config -l&lt;/code&gt; and the &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; man page for details.</source>
          <target state="translated">&lt;code&gt;pull&lt;/code&gt; コマンドがあるため最初で設定された特定の構成変数のから更新プログラムを取得する場所を知っている &lt;code&gt;git clone&lt;/code&gt; コマンド。詳細については、 &lt;code&gt;git config -l&lt;/code&gt; および&lt;a href=&quot;git-config&quot;&gt;git-config [1]の&lt;/a&gt;マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="9716ab4c9bb8eabfdb4d2f2052c2761838dfc4ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;r1^!&lt;/code&gt; notation includes commit &lt;code&gt;r1&lt;/code&gt; but excludes all of its parents. By itself, this notation denotes the single commit &lt;code&gt;r1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r1^!&lt;/code&gt; 表記にはコミット &lt;code&gt;r1&lt;/code&gt; が含まれますが、その親はすべて除外されます。この表記自体は、単一のコミット &lt;code&gt;r1&lt;/code&gt; を示します。</target>
        </trans-unit>
        <trans-unit id="ec7b0d87246117fbc7ede1e9fb5e445953432dc9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;r1^@&lt;/code&gt; notation means all parents of &lt;code&gt;r1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r1^@&lt;/code&gt; 表記は、すべての親を意味 &lt;code&gt;r1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="906a6c33616cfaeeffbd4277ee44152fa9cd28f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raw&lt;/code&gt; format shows the entire commit exactly as stored in the commit object. Notably, the hashes are displayed in full, regardless of whether --abbrev or --no-abbrev are used, and &lt;code&gt;parents&lt;/code&gt; information show the true parent commits, without taking grafts or history simplification into account. Note that this format affects the way commits are displayed, but not the way the diff is shown e.g. with &lt;code&gt;git log --raw&lt;/code&gt;. To get full object names in a raw diff format, use &lt;code&gt;--no-abbrev&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;raw&lt;/code&gt; フォーマットショー全体はコミットオブジェクトに格納されているとおりにコミット。特に、ハッシュは--abbrevまたは--no-abbrevが使用されているかどうかに関係なく完全に表示され、 &lt;code&gt;parents&lt;/code&gt; 情報は接木または履歴の簡略化を考慮せずに、真の親コミットを示します。この形式はコミットの表示方法に影響しますが、たとえば &lt;code&gt;git log --raw&lt;/code&gt; を使用して差分を表示する方法には影響しないことに注意してください。完全なオブジェクト名を未加工のdiff形式で取得するには、 &lt;code&gt;--no-abbrev&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3e2ae08cd51826a72547a4936e1fee7033d540d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recursive&lt;/code&gt; strategy can take the following options:</source>
          <target state="translated">&lt;code&gt;recursive&lt;/code&gt; 戦略は、次のオプションを取ることができます。</target>
        </trans-unit>
        <trans-unit id="2274cd304e0d47984767afeee4d877ca51fbdd54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;refs/heads/*&lt;/code&gt; namespace will only accept commit objects, and updates only if they can be fast-forwarded.</source>
          <target state="translated">&lt;code&gt;refs/heads/*&lt;/code&gt; 名前空間には、オブジェクトのみをコミット受け入れ、彼らは早送りすることができた場合にのみ更新されます。</target>
        </trans-unit>
        <trans-unit id="73d202d810478ee27aec0a92a74e6cf7efe8db45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;refs/tags/*&lt;/code&gt; namespace will accept any kind of object (as commits, trees and blobs can be tagged), and any updates to them will be rejected.</source>
          <target state="translated">&lt;code&gt;refs/tags/*&lt;/code&gt; （コミット、木々や塊をタグ付けすることができますように）名前空間には、任意の種類のオブジェクトを受け入れますし、それらへの更新は拒否されます。</target>
        </trans-unit>
        <trans-unit id="8f1fa8b6ca43d585bbef39f492a9db57e9ecc9a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reset&lt;/code&gt; command can also be used to create lightweight (non-annotated) tags. For example:</source>
          <target state="translated">また、 &lt;code&gt;reset&lt;/code&gt; コマンドを使用して、軽量（注釈なし）タグを作成することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="bd2e909f258c6aa58fa07c5acaee67caeb1da10e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reset&lt;/code&gt; command resets the HEAD, index and worktree to the specified revision. It is similar to an &lt;code&gt;exec git reset --hard &amp;lt;label&amp;gt;&lt;/code&gt;, but refuses to overwrite untracked files. If the &lt;code&gt;reset&lt;/code&gt; command fails, it is rescheduled immediately, with a helpful message how to edit the todo list (this typically happens when a &lt;code&gt;reset&lt;/code&gt; command was inserted into the todo list manually and contains a typo).</source>
          <target state="translated">&lt;code&gt;reset&lt;/code&gt; コマンドは、指定されたリビジョンにHEAD、インデックスとworktreeをリセットします。 &lt;code&gt;exec git reset --hard &amp;lt;label&amp;gt;&lt;/code&gt; に似ていますが、追跡されていないファイルの上書きを拒否します。場合は &lt;code&gt;reset&lt;/code&gt; コマンドが失敗し、それは（これは通常時に起こるToDoリストを編集する方法役立つメッセージを表示して、すぐに再スケジュールされた &lt;code&gt;reset&lt;/code&gt; コマンドを手動でToDoリストに挿入し、タイプミスが含まれています）。</target>
        </trans-unit>
        <trans-unit id="06cca2918a8a255dfff1d384369e4d4195e47f51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shortlog&lt;/code&gt; view is more compact; it shows one commit per line.</source>
          <target state="translated">&lt;code&gt;shortlog&lt;/code&gt; ビューは、よりコンパクトです。1行に1つのコミットが表示されます。</target>
        </trans-unit>
        <trans-unit id="49d7635e517e74681985e2d5acfe0d3faa2b57eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tagger&lt;/code&gt; command uses the same format as &lt;code&gt;committer&lt;/code&gt; within &lt;code&gt;commit&lt;/code&gt;; again see above for details.</source>
          <target state="translated">&lt;code&gt;tagger&lt;/code&gt; コマンドと同じフォーマットを使用 &lt;code&gt;committer&lt;/code&gt; 以内に &lt;code&gt;commit&lt;/code&gt; 。詳細については、上記を再度参照してください。</target>
        </trans-unit>
        <trans-unit id="c5d1574573f9cb9deb3517e06eb81c31c726f5b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;textconv&lt;/code&gt; config option is used to define a program for performing such a conversion. The program should take a single argument, the name of a file to convert, and produce the resulting text on stdout.</source>
          <target state="translated">&lt;code&gt;textconv&lt;/code&gt; 設定オプションは、A変換を行うためのプログラムを定義するために使用されます。プログラムは単一の引数（変換するファイルの名前）を取り、結果のテキストをstdoutに生成します。</target>
        </trans-unit>
        <trans-unit id="5a024de933cb7ecb7f2684cd23c20dd59cced4c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tformat:&lt;/code&gt; format works exactly like &lt;code&gt;format:&lt;/code&gt;, except that it provides &quot;terminator&quot; semantics instead of &quot;separator&quot; semantics. In other words, each commit has the message terminator character (usually a newline) appended, rather than a separator placed between entries. This means that the final entry of a single-line format will be properly terminated with a new line, just as the &quot;oneline&quot; format does. For example:</source>
          <target state="translated">&lt;code&gt;tformat:&lt;/code&gt; フォーマットは、正確に同じように動作し &lt;code&gt;format:&lt;/code&gt; 、それは代わりに「区切り」の意味の「ターミネーター」のセマンティクスを提供することを除いて。つまり、各コミットには、エントリの間に置かれたセパレータではなく、メッセージターミネータ文字（通常は改行）が追加されます。これは、「1行」形式と同様に、1行形式の最後のエントリが新しい行で適切に終了することを意味します。例えば：</target>
        </trans-unit>
        <trans-unit id="52696bbc1bd35a1c1c6d78b6535a11990db3bb34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; variables determine what ends up in the &lt;code&gt;author&lt;/code&gt; and &lt;code&gt;committer&lt;/code&gt; field of commit objects. If you need the &lt;code&gt;author&lt;/code&gt; or &lt;code&gt;committer&lt;/code&gt; to be different, the &lt;code&gt;author.name&lt;/code&gt;, &lt;code&gt;author.email&lt;/code&gt;, &lt;code&gt;committer.name&lt;/code&gt; or &lt;code&gt;committer.email&lt;/code&gt; variables can be set. Also, all of these can be overridden by the &lt;code&gt;GIT_AUTHOR_NAME&lt;/code&gt;, &lt;code&gt;GIT_AUTHOR_EMAIL&lt;/code&gt;, &lt;code&gt;GIT_COMMITTER_NAME&lt;/code&gt;, &lt;code&gt;GIT_COMMITTER_EMAIL&lt;/code&gt; and &lt;code&gt;EMAIL&lt;/code&gt; environment variables. See &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;user.name&lt;/code&gt; と &lt;code&gt;user.email&lt;/code&gt; 変数は、で終わるかを判断 &lt;code&gt;author&lt;/code&gt; と &lt;code&gt;committer&lt;/code&gt; コミットオブジェクトのフィールドです。 &lt;code&gt;author&lt;/code&gt; または &lt;code&gt;committer&lt;/code&gt; を異なるものにする必要がある場合は、 &lt;code&gt;author.name&lt;/code&gt; 、 &lt;code&gt;author.email&lt;/code&gt; 、 &lt;code&gt;committer.name&lt;/code&gt; 、または &lt;code&gt;committer.email&lt;/code&gt; 変数を設定できます。また、これらすべては、 &lt;code&gt;GIT_AUTHOR_NAME&lt;/code&gt; 、 &lt;code&gt;GIT_AUTHOR_EMAIL&lt;/code&gt; 、 &lt;code&gt;GIT_COMMITTER_NAME&lt;/code&gt; 、 &lt;code&gt;GIT_COMMITTER_EMAIL&lt;/code&gt; 、および &lt;code&gt;EMAIL&lt;/code&gt; 環境変数によってオーバーライドできます。&lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree [1]を&lt;/a&gt;参照してください 詳細については。</target>
        </trans-unit>
        <trans-unit id="16ffcc56d5f44fe2ccdfd792b9ad74a964b837f9" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&amp;hellip;​&lt;/em&gt; (three-dot) Symmetric Difference Notation</source>
          <target state="translated">&lt;em&gt;...&lt;/em&gt;（3ドット）対称差表記</target>
        </trans-unit>
        <trans-unit id="3ca01d997f3f16d56fc54554bfe9b469c32c5dff" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;..&lt;/em&gt; (two-dot) Range Notation</source>
          <target state="translated">&lt;em&gt;...&lt;/em&gt;（2点）範囲表記</target>
        </trans-unit>
        <trans-unit id="28292c9406d9116658f021a9e7e686e22523649d" translate="yes" xml:space="preserve">
          <source>The C rewrite is first included with Git version 2.22 (and Git for Windows version 2.19). This option serves as an escape hatch to re-enable the legacy version in case any bugs are found in the rewrite. This option and the shell script version of &lt;a href=&quot;git-stash&quot;&gt;git-stash[1]&lt;/a&gt; will be removed in some future release.</source>
          <target state="translated">Cリライトは、最初にGitバージョン2.22（およびGit for Windowsバージョン2.19）に含まれています。このオプションは、書き換えでバグが見つかった場合にレガシーバージョンを再度有効にするエスケープハッチとして機能します。このオプションと&lt;a href=&quot;git-stash&quot;&gt;git-stash [1]&lt;/a&gt;のシェルスクリプトバージョンは、将来のリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="dbe462d7e2f126482bf0dec3d004def2c9c89bb6" translate="yes" xml:space="preserve">
          <source>The CVS module you want to import. Relative to &amp;lt;CVSROOT&amp;gt;. If not given, &lt;code&gt;git cvsimport&lt;/code&gt; tries to read it from &lt;code&gt;CVS/Repository&lt;/code&gt;.</source>
          <target state="translated">インポートするCVSモジュール。&amp;lt;CVSROOT&amp;gt;に対して。与えられない場合、 &lt;code&gt;git cvsimport&lt;/code&gt; は &lt;code&gt;CVS/Repository&lt;/code&gt; からそれを読み込もうとします。</target>
        </trans-unit>
        <trans-unit id="d9fdb00c7bf3f2937ed399ea5a7eb5783533387f" translate="yes" xml:space="preserve">
          <source>The Event Format Target</source>
          <target state="translated">イベントフォーマットのターゲット</target>
        </trans-unit>
        <trans-unit id="91f31eeacecff37ec38db2aff37269235d7422bb" translate="yes" xml:space="preserve">
          <source>The GIT_TRACE_&amp;lt;key&amp;gt; mechanism allows each &amp;lt;key&amp;gt; to write to a different file (in addition to just stderr).</source>
          <target state="translated">GIT_TRACE_ &amp;lt;key&amp;gt;メカニズムにより、各&amp;lt;key&amp;gt;が（stderrだけでなく）異なるファイルに書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="eb9c24f633d0777727caf33c8ede260c0246d232" translate="yes" xml:space="preserve">
          <source>The GPG key ID of the key that signed the push certificate.</source>
          <target state="translated">プッシュ証明書に署名した鍵のGPG鍵ID。</target>
        </trans-unit>
        <trans-unit id="7fd047e9e0dcddc0ec24d2bfa4a8d0b4477b60c4" translate="yes" xml:space="preserve">
          <source>The Git Repository</source>
          <target state="translated">Git リポジトリ</target>
        </trans-unit>
        <trans-unit id="ec69c4a3fd32f0743df23ab218ec13475fdae8cc" translate="yes" xml:space="preserve">
          <source>The Git configuration file contains a number of variables that affect the Git commands' behavior. The files &lt;code&gt;.git/config&lt;/code&gt; and optionally &lt;code&gt;config.worktree&lt;/code&gt; (see &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; below) in each repository are used to store the configuration for that repository, and &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; is used to store a per-user configuration as fallback values for the &lt;code&gt;.git/config&lt;/code&gt; file. The file &lt;code&gt;/etc/gitconfig&lt;/code&gt; can be used to store a system-wide default configuration.</source>
          <target state="translated">Git構成ファイルには、Gitコマンドの動作に影響を与えるいくつかの変数が含まれています。各リポジトリのファイル &lt;code&gt;.git/config&lt;/code&gt; およびオプションで &lt;code&gt;config.worktree&lt;/code&gt; （ &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; を参照）は、そのリポジトリの構成を保存するために使用され、 &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; は、ユーザーごとの構成をフォールバック値として保存するために使用されます &lt;code&gt;.git/config&lt;/code&gt; ファイル。ファイル &lt;code&gt;/etc/gitconfig&lt;/code&gt; を使用して、システム全体のデフォルト設定を保存できます。</target>
        </trans-unit>
        <trans-unit id="c4676de1f2b8af7673ad60d0d802fc7e29d8da30" translate="yes" xml:space="preserve">
          <source>The Git object directory contains a &lt;code&gt;pack&lt;/code&gt; directory containing packfiles (with suffix &quot;.pack&quot;) and pack-indexes (with suffix &quot;.idx&quot;). The pack-indexes provide a way to lookup objects and navigate to their offset within the pack, but these must come in pairs with the packfiles. This pairing depends on the file names, as the pack-index differs only in suffix with its pack- file. While the pack-indexes provide fast lookup per packfile, this performance degrades as the number of packfiles increases, because abbreviations need to inspect every packfile and we are more likely to have a miss on our most-recently-used packfile. For some large repositories, repacking into a single packfile is not feasible due to storage space or excessive repack times.</source>
          <target state="translated">Gitオブジェクトディレクトリには、packfiles（サフィックス「.pack」）とpack-indexes（サフィックス「.idx」）を含む &lt;code&gt;pack&lt;/code&gt; ディレクトリが含まれています。 pack-indexesは、オブジェクトを検索してパック内のオブジェクトのオフセットに移動する方法を提供しますが、これらはパックファイルとペアで使用する必要があります。 pack-indexは、pack-ファイルのサフィックスのみが異なるため、このペアリングはファイル名に依存します。 pack-indexはpackfileごとの高速ルックアップを提供しますが、省略形はすべてのpackfileを検査する必要があり、最も最近使用されたpackfileを見逃す可能性が高いため、packfileの数が増えると、このパフォーマンスは低下します。大規模なリポジトリーの場合、単一のpackfileに再パックすることは、ストレージ・スペースまたは過度の再パック時間のために実行できません。</target>
        </trans-unit>
        <trans-unit id="a2329c4ac9f08d776040ac221ffa562b7323c3f6" translate="yes" xml:space="preserve">
          <source>The Git protocol gives better performance and reliability, but on a host with a web server set up, HTTP exports may be simpler to set up.</source>
          <target state="translated">Git プロトコルはパフォーマンスと信頼性を向上させますが、ウェブサーバーが設定されているホストでは、HTTP エクスポートの方が簡単に設定できるかもしれません。</target>
        </trans-unit>
        <trans-unit id="1179b23d825b14c0a26acd1779bd21e4b7a2880e" translate="yes" xml:space="preserve">
          <source>The Git remote to import this CVS repository into. Moves all CVS branches into remotes/&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt; akin to the way &lt;code&gt;git clone&lt;/code&gt; uses &lt;code&gt;origin&lt;/code&gt; by default.</source>
          <target state="translated">このCVSリポジトリをインポートするGitリモート。すべてのCVSブランチを、 &lt;code&gt;git clone&lt;/code&gt; がデフォルトで &lt;code&gt;origin&lt;/code&gt; を使用する方法と同じように、remotes / &amp;lt;remote&amp;gt; / &amp;lt;branch&amp;gt;に移動します。</target>
        </trans-unit>
        <trans-unit id="bd47eb27f30e04cbdc75cd21789edadd8836d3bb" translate="yes" xml:space="preserve">
          <source>The Git repository browser</source>
          <target state="translated">Git リポジトリブラウザ</target>
        </trans-unit>
        <trans-unit id="076055123196294023f50dc3852a8243be06956f" translate="yes" xml:space="preserve">
          <source>The Git repository browser. Shows branches, commit history and file differences. gitk is the utility started by &lt;code&gt;git gui&lt;/code&gt;'s Repository Visualize actions.</source>
          <target state="translated">Gitリポジトリブラウザー。ブランチ、コミット履歴、ファイルの違いを表示します。gitkは、 &lt;code&gt;git gui&lt;/code&gt; のリポジトリの視覚化アクションによって起動されるユーティリティです。</target>
        </trans-unit>
        <trans-unit id="703dfd23887a83d4329e915dd0bcbd7608c6b6a7" translate="yes" xml:space="preserve">
          <source>The Git repository to import to. If the directory doesn&amp;rsquo;t exist, it will be created. Default is the current directory.</source>
          <target state="translated">インポートするGitリポジトリ。ディレクトリが存在しない場合は作成されます。デフォルトは現在のディレクトリです。</target>
        </trans-unit>
        <trans-unit id="6970e04ce98d2b4a3b2c6e8de2880e4a745e2c4f" translate="yes" xml:space="preserve">
          <source>The HEAD then refers to the SHA-1 of the commit instead of to a branch, and git branch shows that you are no longer on a branch:</source>
          <target state="translated">そしてheadはブランチではなくコミットのSHA-1を参照し、git branchはあなたがブランチではなくなったことを示しています。</target>
        </trans-unit>
        <trans-unit id="895d60d2bce01273de11df4a950c78fe3184bcf0" translate="yes" xml:space="preserve">
          <source>The HTTP USER_AGENT string presented to an HTTP server. The default value represents the version of the client Git such as git/1.7.1. This option allows you to override this value to a more common value such as Mozilla/4.0. This may be necessary, for instance, if connecting through a firewall that restricts HTTP connections to a set of common USER_AGENT strings (but not including those like git/1.7.1). Can be overridden by the &lt;code&gt;GIT_HTTP_USER_AGENT&lt;/code&gt; environment variable.</source>
          <target state="translated">HTTPサーバーに提示されるHTTP USER_AGENT文字列。デフォルト値はgit / 1.7.1などのクライアントGitのバージョンを表します。このオプションを使用すると、この値をMozilla / 4.0などのより一般的な値に上書きできます。これは、たとえば、HTTP接続を一連の一般的なUSER_AGENT文字列（ただし、git / 1.7.1などは含まない）に制限するファイアウォールを介して接続する場合に必要になることがあります。 &lt;code&gt;GIT_HTTP_USER_AGENT&lt;/code&gt; 環境変数によってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="00aa9820c66c0255936f6c8707aec2ad36a5c140" translate="yes" xml:space="preserve">
          <source>The HTTP daemon command-line that will be executed. Command-line options may be specified here, and the configuration file will be added at the end of the command-line. Currently apache2, lighttpd, mongoose, plackup, python and webrick are supported. (Default: lighttpd)</source>
          <target state="translated">実行される HTTP デーモンのコマンドライン。ここにコマンドラインオプションを指定すると、コマンドラインの最後に設定ファイルが追加されます。現在のところ apache2,lighttpd,mongoose,plackup,python,webrick がサポートされています。(デフォルト:lighttpd)</target>
        </trans-unit>
        <trans-unit id="adee6c32cf5372a9cc214e1cabc3f604f4a421cf" translate="yes" xml:space="preserve">
          <source>The HTTP daemon command-line to start gitweb on your working repository. See &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt;.</source>
          <target state="translated">作業リポジトリでgitwebを起動するためのHTTPデーモンコマンドライン。&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a20118bebd861685578a19065b0fb24ab670ec89" translate="yes" xml:space="preserve">
          <source>The MIDX file format uses a chunk-based approach (similar to the commit-graph file) that allows optional data to be added.</source>
          <target state="translated">MIDXファイルフォーマットは、チャンクベースのアプローチ(commit-graphファイルに似ています)を使用しており、オプションのデータを追加することができます。</target>
        </trans-unit>
        <trans-unit id="64e372cd9f501c41226d338629f4adfe7884c507" translate="yes" xml:space="preserve">
          <source>The MIDX is stored in a file named &lt;code&gt;multi-pack-index&lt;/code&gt; in the .git/objects/pack directory. This could be stored in the pack directory of an alternate. It refers only to packfiles in that same directory.</source>
          <target state="translated">MIDXは、.git / objects / packディレクトリの &lt;code&gt;multi-pack-index&lt;/code&gt; という名前のファイルに保存されます。これは、代替のパックディレクトリに保存できます。同じディレクトリ内のパックファイルのみを参照します。</target>
        </trans-unit>
        <trans-unit id="be240040a2b303919e9f8b3f8c55bd2d4b871823" translate="yes" xml:space="preserve">
          <source>The MIDX keeps only one record per object ID. If an object appears in multiple packfiles, then the MIDX selects the copy in the most- recently modified packfile.</source>
          <target state="translated">MIDX はオブジェクト ID あたりのレコードを一つだけ保持します。あるオブジェクトが複数のパックファイルに含まれている場合、MIDX は最近変更されたパックファイルのコピーを選択します。</target>
        </trans-unit>
        <trans-unit id="d248ab48f510e2fbd4b16391dc71868ce2bb9eb7" translate="yes" xml:space="preserve">
          <source>The MUA corrupted your patch; &quot;am&quot; would complain that the patch does not apply. Look in the .git/rebase-apply/ subdirectory and see what &lt;code&gt;patch&lt;/code&gt; file contains and check for the common corruption patterns mentioned above.</source>
          <target state="translated">MUAがパッチを破壊しました。「am」はパッチが適用されないことを訴えます。.git / rebase-apply /サブディレクトリを見て、 &lt;code&gt;patch&lt;/code&gt; ファイルに含まれるものを確認し、上記の一般的な破損パターンを確認します。</target>
        </trans-unit>
        <trans-unit id="dcfedffa2e791a211c838c6711816e41fded8f05" translate="yes" xml:space="preserve">
          <source>The Normal Format Target</source>
          <target state="translated">通常のフォーマットターゲット</target>
        </trans-unit>
        <trans-unit id="500d32200a061b0c3eb8acb59a37b1ba3087273e" translate="yes" xml:space="preserve">
          <source>The Object Database</source>
          <target state="translated">オブジェクトデータベース</target>
        </trans-unit>
        <trans-unit id="b3b387e6e23160b9001074a3b231e88c333277a0" translate="yes" xml:space="preserve">
          <source>The PERF target is intended for interactive performance analysis during development and is quite noisy.</source>
          <target state="translated">PERFターゲットは、開発中のインタラクティブなパフォーマンス解析を目的としており、かなりノイズが多いです。</target>
        </trans-unit>
        <trans-unit id="716ba6c2a540215443944eab8349af10087e97bb" translate="yes" xml:space="preserve">
          <source>The Performance Format Target</source>
          <target state="translated">パフォーマンスフォーマットのターゲット</target>
        </trans-unit>
        <trans-unit id="ca04878afc5a61720c26b830b963e827e884a4f1" translate="yes" xml:space="preserve">
          <source>The SSL version to use when negotiating an SSL connection, if you want to force the default. The available and default version depend on whether libcurl was built against NSS or OpenSSL and the particular configuration of the crypto library in use. Internally this sets the &lt;code&gt;CURLOPT_SSL_VERSION&lt;/code&gt; option; see the libcurl documentation for more details on the format of this option and for the ssl version supported. Actually the possible values of this option are:</source>
          <target state="translated">デフォルトを強制したい場合に、SSL接続をネゴシエートするときに使用するSSLバージョン。使用可能なデフォルトのバージョンは、libcurlがNSSとOpenSSLのどちらに対して構築されたか、および使用中の暗号ライブラリの特定の構成によって異なります。内部的には、これは &lt;code&gt;CURLOPT_SSL_VERSION&lt;/code&gt; オプションを設定します。このオプションの形式とサポートされているsslバージョンの詳細については、libcurlのドキュメントを参照してください。実際には、このオプションの可能な値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6c8d77384dcf5927fceefc0c82e6aa35599c0a0b" translate="yes" xml:space="preserve">
          <source>The Trace2 API can be used to print debug, performance, and telemetry information to stderr or a file. The Trace2 feature is inactive unless explicitly enabled by enabling one or more Trace2 Targets.</source>
          <target state="translated">Trace2 API を使用して、デバッグ、パフォーマンス、テレメトリ情報を stderr またはファイルに出力することができます。Trace2 機能は、1 つ以上の Trace2 Targets を有効にして明示的に有効にしない限り、非アクティブです。</target>
        </trans-unit>
        <trans-unit id="6bdbd91221731e97e635f28174406bd894d81047" translate="yes" xml:space="preserve">
          <source>The Trace2 API defines a set of high-level messages with known fields, such as (&lt;code&gt;start&lt;/code&gt;: &lt;code&gt;argv&lt;/code&gt;) and (&lt;code&gt;exit&lt;/code&gt;: {&lt;code&gt;exit-code&lt;/code&gt;, &lt;code&gt;elapsed-time&lt;/code&gt;}).</source>
          <target state="translated">Trace2 APIは、（ &lt;code&gt;start&lt;/code&gt; ： &lt;code&gt;argv&lt;/code&gt; ）や（ &lt;code&gt;exit&lt;/code&gt; ：{ &lt;code&gt;exit-code&lt;/code&gt; 、 &lt;code&gt;elapsed-time&lt;/code&gt; }）などの既知のフィールドを持つ一連の高レベルメッセージを定義します。</target>
        </trans-unit>
        <trans-unit id="c8d932fd39b46f7d652bfdd2be6511ab09fc4671" translate="yes" xml:space="preserve">
          <source>The Trace2 API is intended to replace the existing (Trace1) printf-style tracing provided by the existing &lt;code&gt;GIT_TRACE&lt;/code&gt; and &lt;code&gt;GIT_TRACE_PERFORMANCE&lt;/code&gt; facilities. During initial implementation, Trace2 and Trace1 may operate in parallel.</source>
          <target state="translated">Trace2 APIは、既存の &lt;code&gt;GIT_TRACE&lt;/code&gt; および &lt;code&gt;GIT_TRACE_PERFORMANCE&lt;/code&gt; 機能によって提供される既存の（Trace1）printfスタイルのトレースを置き換えることを目的としています。初期実装中、Trace2とTrace1は並行して動作します。</target>
        </trans-unit>
        <trans-unit id="a5397d7e9698d7ad87ff097450bf8a8e1a772416" translate="yes" xml:space="preserve">
          <source>The Trace2 code also defines a set of private functions and data types in the &lt;code&gt;trace2/&lt;/code&gt; directory. These symbols are prefixed with &lt;code&gt;tr2_&lt;/code&gt; and should only be used by functions in &lt;code&gt;trace2.c&lt;/code&gt;.</source>
          <target state="translated">Trace2コードは、 &lt;code&gt;trace2/&lt;/code&gt; ディレクトリにプライベート関数とデータ型のセットも定義します。これらのシンボルの先頭には &lt;code&gt;tr2_&lt;/code&gt; が付いており、trace2.cの関数でのみ使用する必要が &lt;code&gt;trace2.c&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="8e231fe7d9a0eb53151c1a418399ded2fd9db9e8" translate="yes" xml:space="preserve">
          <source>The URL for a submodule. This variable is copied from the .gitmodules file to the git config via &lt;code&gt;git submodule init&lt;/code&gt;. The user can change the configured URL before obtaining the submodule via &lt;code&gt;git submodule update&lt;/code&gt;. If neither submodule.&amp;lt;name&amp;gt;.active or submodule.active are set, the presence of this variable is used as a fallback to indicate whether the submodule is of interest to git commands. See &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; for details.</source>
          <target state="translated">サブモジュールのURL。この変数は、.gitmodulesファイルから &lt;code&gt;git submodule init&lt;/code&gt; 介してgit configにコピーされます。ユーザーは、 &lt;code&gt;git submodule update&lt;/code&gt; を介してサブモジュールを取得する前に、構成されたURLを変更できます。submodule。&amp;lt;name&amp;gt; .activeもsubmodule.activeも設定されていない場合、この変数の存在はフォールバックとして使用され、サブモジュールがgitコマンドの対象であるかどうかを示します。詳細については、&lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1]&lt;/a&gt;および&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="307f8458b88cd1196dc3047eb250fdb8e3348b46" translate="yes" xml:space="preserve">
          <source>The URL of a remote repository. See &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt; or &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;.</source>
          <target state="translated">リモートリポジトリのURL。&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt;または&lt;a href=&quot;git-push&quot;&gt;git-push [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="92c06c873fe7803ddcdb456ba837dbd24d10b389" translate="yes" xml:space="preserve">
          <source>The URL to the remote repository.</source>
          <target state="translated">リモートリポジトリへのURLです。</target>
        </trans-unit>
        <trans-unit id="846d99295948de526a5621f0a520c5a9a78af747" translate="yes" xml:space="preserve">
          <source>The Workflow</source>
          <target state="translated">ワークフロー</target>
        </trans-unit>
        <trans-unit id="91d8165377483e9123ecf4a3d5455b3b1999d185" translate="yes" xml:space="preserve">
          <source>The above can also be written as simply</source>
          <target state="translated">上記のように単純に書くこともできます。</target>
        </trans-unit>
        <trans-unit id="13c712cb6756cc53fb3407886d0503d18cb537c0" translate="yes" xml:space="preserve">
          <source>The above command copies all branches from the remote refs/heads/ namespace and stores them to the local refs/remotes/origin/ namespace, unless the branch.&amp;lt;name&amp;gt;.fetch option is used to specify a non-default refspec.</source>
          <target state="translated">上記のコマンドは、branch。&amp;lt;name&amp;gt; .fetchオプションを使用してデフォルト以外のrefspecを指定しない限り、リモートrefs / heads /ネームスペースからすべてのブランチをコピーし、ローカルrefs / remotes / origin /ネームスペースに保存します。</target>
        </trans-unit>
        <trans-unit id="61e1efd32cbb415eea7b734b98558317a6d1aac3" translate="yes" xml:space="preserve">
          <source>The above command would change the origin repository to</source>
          <target state="translated">上記のコマンドは、オリジンのリポジトリを</target>
        </trans-unit>
        <trans-unit id="cc504649b9359e7717badcdf0f10e04d6127c3a0" translate="yes" xml:space="preserve">
          <source>The above configuration expects your public repositories to live under &lt;code&gt;/pub/git&lt;/code&gt; and will serve them as &lt;code&gt;http://git.domain.org/dir-under-pub-git&lt;/code&gt;, both as clonable Git URL and as browseable gitweb interface. If you then start your &lt;a href=&quot;git-daemon&quot;&gt;git-daemon[1]&lt;/a&gt; with &lt;code&gt;--base-path=/pub/git --export-all&lt;/code&gt; then you can even use the &lt;code&gt;git://&lt;/code&gt; URL with exactly the same path.</source>
          <target state="translated">上記の構成では、パブリックリポジトリが &lt;code&gt;/pub/git&lt;/code&gt; の下にあることが想定されており、 &lt;code&gt;http://git.domain.org/dir-under-pub-git&lt;/code&gt; ：//git.domain.org/dir-under-pub-gitとして、クローン可能なGit URLとブラウズ可能なgitwebインターフェースの両方として機能します。次に&lt;a href=&quot;git-daemon&quot;&gt;git-daemon [1]&lt;/a&gt;を &lt;code&gt;--base-path=/pub/git --export-all&lt;/code&gt; で開始すると、 &lt;code&gt;git://&lt;/code&gt; URLをまったく同じパスで使用することもできます。</target>
        </trans-unit>
        <trans-unit id="baa5f35656f9b3f3ba646932132fa97233a197b9" translate="yes" xml:space="preserve">
          <source>The above is all you need to know to resolve a simple merge. But Git also provides more information to help resolve conflicts:</source>
          <target state="translated">単純なマージを解決するために知っておくべきことは以上です。しかし、Git は競合の解決に役立つ情報も提供しています。</target>
        </trans-unit>
        <trans-unit id="70fce3bc08ea4ed40bcc99c52f88c26bd24f0b87" translate="yes" xml:space="preserve">
          <source>The above is the description of a Git merge at the lowest level, to help you understand what conceptually happens under the hood. In practice, nobody, not even Git itself, runs &lt;code&gt;git cat-file&lt;/code&gt; three times for this. There is a &lt;code&gt;git merge-index&lt;/code&gt; program that extracts the stages to temporary files and calls a &quot;merge&quot; script on it:</source>
          <target state="translated">上記は、最下位レベルでのGitマージの説明であり、概念的に内部で何が起こるかを理解するのに役立ちます。実際には、Git自体でさえも、誰も &lt;code&gt;git cat-file&lt;/code&gt; を 3回実行してこれを実行していません。あり &lt;code&gt;git merge-index&lt;/code&gt; プログラムは、一時ファイルに抽出段階ということと、その上に「マージ」のスクリプトを呼び出します。</target>
        </trans-unit>
        <trans-unit id="eb77c0d462477bf4637c28037a03befbbf605c33" translate="yes" xml:space="preserve">
          <source>The absolute path to the worktree in which the ref is checked out, if it is checked out in any linked worktree. Empty string otherwise.</source>
          <target state="translated">リンクされたワークツリーでチェックアウトされている場合、参照がチェックアウトされているワークツリーへの絶対パスを指定します。それ以外の場合は空文字列。</target>
        </trans-unit>
        <trans-unit id="76cd9fb4bfcc53cf44ccfea4ed1923acc958405e" translate="yes" xml:space="preserve">
          <source>The accepted attributes are &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;dim&lt;/code&gt;, &lt;code&gt;ul&lt;/code&gt;, &lt;code&gt;blink&lt;/code&gt;, &lt;code&gt;reverse&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;, and &lt;code&gt;strike&lt;/code&gt; (for crossed-out or &quot;strikethrough&quot; letters). The position of any attributes with respect to the colors (before, after, or in between), doesn&amp;rsquo;t matter. Specific attributes may be turned off by prefixing them with &lt;code&gt;no&lt;/code&gt; or &lt;code&gt;no-&lt;/code&gt; (e.g., &lt;code&gt;noreverse&lt;/code&gt;, &lt;code&gt;no-ul&lt;/code&gt;, etc).</source>
          <target state="translated">受け入れられた属性は、 &lt;code&gt;bold&lt;/code&gt; 、 &lt;code&gt;dim&lt;/code&gt; 、 &lt;code&gt;ul&lt;/code&gt; 、 &lt;code&gt;blink&lt;/code&gt; 、 &lt;code&gt;reverse&lt;/code&gt; 、 &lt;code&gt;italic&lt;/code&gt; 、および &lt;code&gt;strike&lt;/code&gt; （アウト交差または「取り消し線」の文字のため）。色（前、後、または中間）に対する属性の位置は関係ありません。特定の属性は、それらに接頭辞 &lt;code&gt;no&lt;/code&gt; または &lt;code&gt;no-&lt;/code&gt; を付けてオフにすることができます（たとえば、 &lt;code&gt;noreverse&lt;/code&gt; 、 &lt;code&gt;no-ul&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="0bb8a69a5cde6b982a60a95e4956ebdf1a59fa5f" translate="yes" xml:space="preserve">
          <source>The accepted patterns in the cone pattern set are:</source>
          <target state="translated">コーンパターンセットで受け入れられているパターンは、以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ec26e1bb6d1ddd903fea6ea4b1aec39f9a4bdff7" translate="yes" xml:space="preserve">
          <source>The action of fixing up manually what a failed automatic &lt;a href=&quot;#def_merge&quot;&gt;merge&lt;/a&gt; left behind.</source>
          <target state="translated">失敗した自動&lt;a href=&quot;#def_merge&quot;&gt;マージが&lt;/a&gt;残したものを手動で修正するアクション。</target>
        </trans-unit>
        <trans-unit id="91929f919cdca3ddad9711d4446a1108e24ab05c" translate="yes" xml:space="preserve">
          <source>The action of updating all or part of the &lt;a href=&quot;#def_working_tree&quot;&gt;working tree&lt;/a&gt; with a &lt;a href=&quot;#def_tree_object&quot;&gt;tree object&lt;/a&gt; or &lt;a href=&quot;#def_blob_object&quot;&gt;blob&lt;/a&gt; from the &lt;a href=&quot;#def_object_database&quot;&gt;object database&lt;/a&gt;, and updating the &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt; and &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; if the whole working tree has been pointed at a new &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt;.</source>
          <target state="translated">全部または一部の更新のアクション&lt;a href=&quot;#def_working_tree&quot;&gt;作業ツリー&lt;/a&gt;と&lt;a href=&quot;#def_tree_object&quot;&gt;ツリーオブジェクト&lt;/a&gt;または&lt;a href=&quot;#def_blob_object&quot;&gt;BLOB&lt;/a&gt;から&lt;a href=&quot;#def_object_database&quot;&gt;オブジェクトデータベース&lt;/a&gt;、および更新&lt;a href=&quot;#def_index&quot;&gt;インデックス&lt;/a&gt;と&lt;a href=&quot;#def_HEAD&quot;&gt;HEADの&lt;/a&gt;全作業ツリーが新しいで指摘されている場合は&lt;a href=&quot;#def_branch&quot;&gt;、分岐&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bf91c6dac7e4978798d8310657f124dd799f4bf4" translate="yes" xml:space="preserve">
          <source>The action that will be run. Defaults to &lt;code&gt;projects_list&lt;/code&gt; if repo is not set, and to &lt;code&gt;summary&lt;/code&gt; otherwise.</source>
          <target state="translated">実行されるアクション。リポジトリが設定されていない場合、デフォルトで &lt;code&gt;projects_list&lt;/code&gt; になり、それ以外の場合は &lt;code&gt;summary&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="e262b52287502541a33fa85d5cf2fdae897da448" translate="yes" xml:space="preserve">
          <source>The active branch LRU, when coupled with the filename string pool and lazy loading of subtrees, allows fast-import to efficiently import projects with 2,000+ branches and 45,114+ files in a very limited memory footprint (less than 2.7 MiB per active branch).</source>
          <target state="translated">アクティブブランチの LRU は、ファイル名の文字列プールとサブツリーの遅延ロードと組み合わせることで、2,000 以上のブランチと 45,114 以上のファイルを持つプロジェクトを、非常に限られたメモリフットプリント(アクティブブランチあたり 2.7 MiB 以下)で効率的に高速インポートすることができます。</target>
        </trans-unit>
        <trans-unit id="5b37048d4139b83b97c29aa7a22d2da66c283ae2" translate="yes" xml:space="preserve">
          <source>The actual configuration line should be on one line.</source>
          <target state="translated">実際の設定行は1行にしてください。</target>
        </trans-unit>
        <trans-unit id="b70c0ba474f3173fff896ac2745af10a69e6cc3b" translate="yes" xml:space="preserve">
          <source>The additional AliasMatch makes it so that</source>
          <target state="translated">エイリアスマッチを追加することで</target>
        </trans-unit>
        <trans-unit id="d6139a3bd26979c3a7767519a48aa9c385b73634" translate="yes" xml:space="preserve">
          <source>The advantage of doing this is that the history of &lt;code&gt;next&lt;/code&gt; will be clean. For example, some topics merged into &lt;code&gt;next&lt;/code&gt; may have initially looked promising, but were later found to be undesirable or premature. In such a case, the topic is reverted out of &lt;code&gt;next&lt;/code&gt; but the fact remains in the history that it was once merged and reverted. By recreating &lt;code&gt;next&lt;/code&gt;, you give another incarnation of such topics a clean slate to retry, and a feature release is a good point in history to do so.</source>
          <target state="translated">これを行う利点は、 &lt;code&gt;next&lt;/code&gt; の履歴がクリーンになることです。たとえば、 &lt;code&gt;next&lt;/code&gt; トピックにマージされた一部のトピックは、最初は有望に見えたかもしれませんが、後で望ましくないか、時期尚早であることが判明しました。そのような場合、トピックは &lt;code&gt;next&lt;/code&gt; トピックに戻されますが、一度マージされて戻されたという事実は履歴に残ります。 &lt;code&gt;next&lt;/code&gt; を再作成することにより、そのようなトピックの別の具体化を再試行するための白紙の状態にして、機能リリースはそうするための歴史の良いポイントです。</target>
        </trans-unit>
        <trans-unit id="2f1746fed6139a8489ee3d916322bdcbeb17e684" translate="yes" xml:space="preserve">
          <source>The advantage of using an external diff command is flexibility. You are not bound to find line-oriented changes, nor is it necessary for the output to resemble unified diff. You are free to locate and report changes in the most appropriate way for your data format.</source>
          <target state="translated">外部の diff コマンドを使用する利点は柔軟性です。ライン指向の変更を見つける必要はありませんし、出力が統一されたdiffに似ている必要もありません。データ形式に最も適した方法で変更を見つけて報告することができます。</target>
        </trans-unit>
        <trans-unit id="37f935f00ace4f7aca8e441adbbf1abe0704a83a" translate="yes" xml:space="preserve">
          <source>The am backend drops any &quot;empty&quot; commits, regardless of whether the commit started empty (had no changes relative to its parent to start with) or ended empty (all changes were already applied upstream in other commits).</source>
          <target state="translated">am バックエンドは、そのコミットが空の状態で始まった (親からの相対的な変更がない)か、空の状態で終わった (すべての変更が他のコミットで上流に適用されていた)かに関わらず、&quot;空の&quot; コミットを削除します。</target>
        </trans-unit>
        <trans-unit id="013053835d145f0cc494db8211a188c9999bae09" translate="yes" xml:space="preserve">
          <source>The area where a pair of conflicting changes happened is marked with markers &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;=======&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. The part before the &lt;code&gt;=======&lt;/code&gt; is typically your side, and the part afterwards is typically their side.</source>
          <target state="translated">競合する変更のペアが起こった領域は、マーカーでマークされ &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;=======&lt;/code&gt; 、そして &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 。 &lt;code&gt;=======&lt;/code&gt; の前の部分は通常あなたの側であり、その後の部分は通常彼らの側です。</target>
        </trans-unit>
        <trans-unit id="bbce7a566319a0fa5122538fad84df16b94a33f3" translate="yes" xml:space="preserve">
          <source>The argument to this option may be a glob on ref names, a ref, or the (possibly abbreviated) SHA-1 of a commit. Specifying a glob is equivalent to specifying this option multiple times, one for each matching ref name.</source>
          <target state="translated">このオプションの引数には、ref 名のグロブ、ref、またはコミットの (省略された)SHA-1 を指定することができます。glob を指定することは、このオプションを複数回指定することと同等です。</target>
        </trans-unit>
        <trans-unit id="6083c463b2a8fa637d23cd99c59e9746cb6a7539" translate="yes" xml:space="preserve">
          <source>The attribute &lt;code&gt;diff&lt;/code&gt; affects how Git generates diffs for particular files. It can tell Git whether to generate a textual patch for the path or to treat the path as a binary file. It can also affect what line is shown on the hunk header &lt;code&gt;@@ -k,l +n,m @@&lt;/code&gt; line, tell Git to use an external command to generate the diff, or ask Git to convert binary files to a text format before generating the diff.</source>
          <target state="translated">属性 &lt;code&gt;diff&lt;/code&gt; は、Gitが特定のファイルのdiffを生成する方法に影響します。パスのテキストパッチを生成するか、パスをバイナリファイルとして扱うかをGitに指示できます。また、ハンクヘッダー &lt;code&gt;@@ -k,l +n,m @@&lt;/code&gt; 行に表示される行に影響を与える、Gitに外部コマンドを使用してdiffを生成する、またはバイナリファイルをテキスト形式に変換するようにGitに要求する差分を生成します。</target>
        </trans-unit>
        <trans-unit id="e3fef41e3a691b83ea57e915fd492f173e96b0ec" translate="yes" xml:space="preserve">
          <source>The attribute &lt;code&gt;merge&lt;/code&gt; affects how three versions of a file are merged when a file-level merge is necessary during &lt;code&gt;git merge&lt;/code&gt;, and other commands such as &lt;code&gt;git revert&lt;/code&gt; and &lt;code&gt;git cherry-pick&lt;/code&gt;.</source>
          <target state="translated">属性の &lt;code&gt;merge&lt;/code&gt; は、 &lt;code&gt;git merge&lt;/code&gt; 、および &lt;code&gt;git revert&lt;/code&gt; や &lt;code&gt;git cherry-pick&lt;/code&gt; などの他のコマンド中にファイルレベルのマージが必要な場合に、ファイルの3つのバージョンがどのようにマージされるかに影響します。</target>
        </trans-unit>
        <trans-unit id="2fe7b4a122d21c0258f6159b6aeead7d915c58b4" translate="yes" xml:space="preserve">
          <source>The attributes allow a fine-grained control, how the line endings are converted. Here is an example that will make Git normalize .txt, .vcproj and .sh files, ensure that .vcproj files have CRLF and .sh files have LF in the working directory, and prevent .jpg files from being normalized regardless of their content.</source>
          <target state="translated">属性は、行末をどのように変換するかを細かく制御することができます。次の例は、Git が .txt、.vcproj、.sh ファイルを正規化し、.vcproj ファイルが CRLF、.sh ファイルが作業ディレクトリに LF を持つようにし、.jpg ファイルが内容に関係なく正規化されないようにするものです。</target>
        </trans-unit>
        <trans-unit id="0849ab3d36b0ce6d3f6183dc21f6e83ad1520176" translate="yes" xml:space="preserve">
          <source>The author name and email address to use when no author information can be found in the patch description.</source>
          <target state="translated">パッチの説明に作者情報がない場合に使用する作者名とメールアドレス。</target>
        </trans-unit>
        <trans-unit id="b012a2641006f12bad01716515743698d7deabe2" translate="yes" xml:space="preserve">
          <source>The author of a piece of code.</source>
          <target state="translated">コードの一部の作者。</target>
        </trans-unit>
        <trans-unit id="147440e8e5aa984c82659720dc655a2dca5add95" translate="yes" xml:space="preserve">
          <source>The backend process sets GIT_COMMITTER_NAME to &lt;code&gt;$REMOTE_USER&lt;/code&gt; and GIT_COMMITTER_EMAIL to &lt;code&gt;${REMOTE_USER}@http.${REMOTE_ADDR}&lt;/code&gt;, ensuring that any reflogs created by &lt;code&gt;git-receive-pack&lt;/code&gt; contain some identifying information of the remote user who performed the push.</source>
          <target state="translated">バックエンドプロセスでは、GIT_COMMITTER_NAMEを &lt;code&gt;$REMOTE_USER&lt;/code&gt; 設定し、GIT_COMMITTER_EMAILを &lt;code&gt;${REMOTE_USER}@http.${REMOTE_ADDR}&lt;/code&gt; に設定して、 &lt;code&gt;git-receive-pack&lt;/code&gt; によって作成されたreflogに、プッシュを実行したリモートユーザーの識別情報が含まれるようにします。</target>
        </trans-unit>
        <trans-unit id="21e5e59ef58a1f64125adda00de18248644f6705" translate="yes" xml:space="preserve">
          <source>The base object could also be deltified if it&amp;rsquo;s in the same pack. Ref-delta can also refer to an object outside the pack (i.e. the so-called &quot;thin pack&quot;). When stored on disk however, the pack should be self contained to avoid cyclic dependency.</source>
          <target state="translated">同じオブジェクトに含まれている場合、ベースオブジェクトもデリティファイされる可能性があります。Ref-deltaは、パック外のオブジェクト（つまり、いわゆる「シンパック」）を参照することもできます。ただし、ディスクに格納する場合、循環依存を避けるためにパックは自己完結型である必要があります。</target>
        </trans-unit>
        <trans-unit id="1877d075d52f12eee201f2607da0c072a35f24bc" translate="yes" xml:space="preserve">
          <source>The base tree information block is used for maintainers or third party testers to know the exact state the patch series applies to. It consists of the &lt;code&gt;base commit&lt;/code&gt;, which is a well-known commit that is part of the stable part of the project history everybody else works off of, and zero or more &lt;code&gt;prerequisite patches&lt;/code&gt;, which are well-known patches in flight that is not yet part of the &lt;code&gt;base commit&lt;/code&gt; that need to be applied on top of &lt;code&gt;base commit&lt;/code&gt; in topological order before the patches can be applied.</source>
          <target state="translated">ベースツリー情報ブロックは、メンテナーまたはサードパーティのテスターがパッチシリーズが適用される正確な状態を知るために使用されます。それは、他の誰もが作業するプロジェクト履歴の安定した部分の一部であるよく知られた &lt;code&gt;base commit&lt;/code&gt; であるベースコミットと、まだ実行されていない進行中のよく知られたパッチであるゼロ以上の &lt;code&gt;prerequisite patches&lt;/code&gt; で構成されますパッチを適用する前に、トポロジー順に &lt;code&gt;base commit&lt;/code&gt; 上に適用する必要がある &lt;code&gt;base commit&lt;/code&gt; 一部。</target>
        </trans-unit>
        <trans-unit id="dc39b1b9637026dfb15dfa743421fbe1dc2277e7" translate="yes" xml:space="preserve">
          <source>The basic colors accepted are &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt; and &lt;code&gt;white&lt;/code&gt;. The first color given is the foreground; the second is the background.</source>
          <target state="translated">受け入れられる基本色は、 &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;black&lt;/code&gt; 、 &lt;code&gt;red&lt;/code&gt; 、 &lt;code&gt;green&lt;/code&gt; 、 &lt;code&gt;yellow&lt;/code&gt; 、 &lt;code&gt;blue&lt;/code&gt; 、 &lt;code&gt;magenta&lt;/code&gt; 、 &lt;code&gt;cyan&lt;/code&gt; 、 &lt;code&gt;white&lt;/code&gt; です。指定された最初の色は前景です。2番目は背景です。</target>
        </trans-unit>
        <trans-unit id="d4e1b119ab89bbecfc6f0f5d854268dcecbb088f" translate="yes" xml:space="preserve">
          <source>The basic form described in DESCRIPTION with a Git directory, a working directory, a &lt;code&gt;gitlink&lt;/code&gt;, and a &lt;code&gt;.gitmodules&lt;/code&gt; entry.</source>
          <target state="translated">「Gitディレクトリ」、「作業ディレクトリ」、「 &lt;code&gt;gitlink&lt;/code&gt; 」、および「 &lt;code&gt;.gitmodules&lt;/code&gt; 」エントリを含む「説明」で説明されている基本的な形式。</target>
        </trans-unit>
        <trans-unit id="b21f7863c055f0aa6938a038ffa25acf7017fe84" translate="yes" xml:space="preserve">
          <source>The basic greedy diff algorithm. Currently, this is the default.</source>
          <target state="translated">基本的な貪欲な差分アルゴリズムです。現在のところ、これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="ebbd31d9dd00322abaa4bb83a8b03f787c70d43c" translate="yes" xml:space="preserve">
          <source>The basic requirements:</source>
          <target state="translated">基本的な要件です。</target>
        </trans-unit>
        <trans-unit id="675f96a5f033def81701bda4e874ec2fbad8a388" translate="yes" xml:space="preserve">
          <source>The below documentation is the same as what&amp;rsquo;s found in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;:</source>
          <target state="translated">以下のドキュメントは&lt;a href=&quot;git-config&quot;&gt;git-config [1]にある&lt;/a&gt;ものと同じです：</target>
        </trans-unit>
        <trans-unit id="f55762f9996c39bda184001319965b733714f313" translate="yes" xml:space="preserve">
          <source>The best way to get one is by using the &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; command to download a copy of an existing repository. If you don&amp;rsquo;t already have a project in mind, here are some interesting examples:</source>
          <target state="translated">これを取得する最良の方法は、&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;コマンドを使用して既存のリポジトリのコピーをダウンロードすることです。まだプロジェクトを考えていない場合は、興味深い例をいくつか示します。</target>
        </trans-unit>
        <trans-unit id="e2b6c88cac94cf24687d4ba9657759c1ab28582a" translate="yes" xml:space="preserve">
          <source>The best way to see how this works is using the &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; command; running gitk now on a Git repository and looking for merge commits will help understand how Git organizes history.</source>
          <target state="translated">これがどのように機能するかを確認する最良の方法は、&lt;a href=&quot;gitk&quot;&gt;gitk [1]&lt;/a&gt;コマンドを使用することです。Gitリポジトリでgitkを実行してマージコミットを探すと、Gitが履歴を整理する方法を理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="8130ad227eb2e1ffe8f116dc4280c5919bb4cd97" translate="yes" xml:space="preserve">
          <source>The branch &lt;code&gt;test&lt;/code&gt; is short for &lt;code&gt;refs/heads/test&lt;/code&gt;.</source>
          <target state="translated">ブランチ &lt;code&gt;test&lt;/code&gt; は &lt;code&gt;refs/heads/test&lt;/code&gt; の略です。</target>
        </trans-unit>
        <trans-unit id="420b2dd61e4562065a5bd273fcdbaecde70d1742" translate="yes" xml:space="preserve">
          <source>The branch LRU builtin to fast-import tends to behave very well, and the cost of activating an inactive branch is so low that bouncing around between branches has virtually no impact on import performance.</source>
          <target state="translated">fast-import に組み込まれたブランチ LRU は非常にうまく動作する傾向があり、非アクティブなブランチをアクティブにするコストは非常に低く、ブランチ間を行き来してもインポートのパフォーマンスにはほとんど影響を与えません。</target>
        </trans-unit>
        <trans-unit id="58be5b6cbe7d7c0a923608fe1415c68702e2aa84" translate="yes" xml:space="preserve">
          <source>The chain of operation</source>
          <target state="translated">動作の連鎖</target>
        </trans-unit>
        <trans-unit id="cb0b83bdafd60672fc0fb681d6c09ff33adfb7dc" translate="yes" xml:space="preserve">
          <source>The changes are still visible in the submodule&amp;rsquo;s reflog.</source>
          <target state="translated">変更はサブモジュールのreflogに引き続き表示されます。</target>
        </trans-unit>
        <trans-unit id="e18a17400a7fdeb34351715eb209f43bb56b69d6" translate="yes" xml:space="preserve">
          <source>The clone command creates a new directory named after the project (&lt;code&gt;git&lt;/code&gt; or &lt;code&gt;linux&lt;/code&gt; in the examples above). After you cd into this directory, you will see that it contains a copy of the project files, called the &lt;a href=&quot;#def_working_tree&quot;&gt;working tree&lt;/a&gt;, together with a special top-level directory named &lt;code&gt;.git&lt;/code&gt;, which contains all the information about the history of the project.</source>
          <target state="translated">cloneコマンドは、プロジェクト（上記の例では &lt;code&gt;git&lt;/code&gt; または &lt;code&gt;linux&lt;/code&gt; )にちなんだ名前の新しいディレクトリを作成します。このディレクトリにcd すると、「&lt;a href=&quot;#def_working_tree&quot;&gt;ワーキングツリー&lt;/a&gt;」と呼ばれるプロジェクトファイルのコピーと、プロジェクトの履歴に関するすべての情報を含む &lt;code&gt;.git&lt;/code&gt; という名前の特別な最上位ディレクトリが含まれていることがわかります。</target>
        </trans-unit>
        <trans-unit id="9b1ff6b6614bf65ff7cf18fa7ac8ca0c73c31da4" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;git commit -a&lt;/code&gt; first looks at your working tree, notices that you have modified hello.c and removed goodbye.c, and performs necessary &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git rm&lt;/code&gt; for you.</source>
          <target state="translated">コマンド &lt;code&gt;git commit -a&lt;/code&gt; は最初に作業ツリーを調べ、hello.cを変更してgoodbye.cを削除したことを確認し、必要な &lt;code&gt;git add&lt;/code&gt; と &lt;code&gt;git rm&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="95cb34ce247ae47a8a7d5a122ee875bb99decb40" translate="yes" xml:space="preserve">
          <source>The command allows for creation and fast-forwarding of sha1 refs (heads/tags) on the remote end (strictly speaking, it is the local end &lt;code&gt;git-receive-pack&lt;/code&gt; runs, but to the user who is sitting at the send-pack end, it is updating the remote. Confused?)</source>
          <target state="translated">このコマンドを使用すると、リモートエンド（厳密に言えば、ローカルエンド &lt;code&gt;git-receive-pack&lt;/code&gt; が実行されますが、送信パックエンドに座っているユーザー）でsha1参照（ヘッド/タグ）を作成して早送りできます、リモートを更新しています。混乱していますか？）</target>
        </trans-unit>
        <trans-unit id="2b42e9d45bef456324952e5870d272017a1a991c" translate="yes" xml:space="preserve">
          <source>The command also looks at &lt;code&gt;core.trustctime&lt;/code&gt; configuration variable. It can be useful when the inode change time is regularly modified by something outside Git (file system crawlers and backup systems use ctime for marking files processed) (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">このコマンドは、 &lt;code&gt;core.trustctime&lt;/code&gt; 構成変数も調べます。iノードの変更時刻がGit外の何かによって定期的に変更される場合に役立ちます（ファイルシステムクローラーとバックアップシステムは、処理されたファイルをマークするためにctimeを使用します）（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b2d2a0a5d3ee3b745ff8e27d667799782d3fee27" translate="yes" xml:space="preserve">
          <source>The command by default does not allow an update that is not a fast-forward to prevent such loss of history.</source>
          <target state="translated">このような履歴の消失を防ぐために、デフォルトでは早送りではない更新を許可していません。</target>
        </trans-unit>
        <trans-unit id="57bd298a9fbda93bedda739fa9a93ffd1fbe53dd" translate="yes" xml:space="preserve">
          <source>The command by default packs all tags and refs that are already packed, and leaves other refs alone. This is because branches are expected to be actively developed and packing their tips does not help performance. This option causes branch tips to be packed as well. Useful for a repository with many branches of historical interests.</source>
          <target state="translated">このコマンドはデフォルトでは、すでにパックされているすべてのタグと ref をパックし、他の ref は放置します。これは、ブランチが積極的に開発されることが期待されているため、ブランチのヒントをパックしてもパフォーマンスを向上させることができないからです。このオプションを指定すると、ブランチのヒントもパックされます。歴史的に興味のあるブランチがたくさんあるリポジトリに便利です。</target>
        </trans-unit>
        <trans-unit id="affc62639786f9435bc3e40b781bdaefab9bf88f" translate="yes" xml:space="preserve">
          <source>The command can also be used to restore the content in the index with &lt;code&gt;--staged&lt;/code&gt;, or restore both the working tree and the index with &lt;code&gt;--staged --worktree&lt;/code&gt;.</source>
          <target state="translated">このコマンドを使用して、-- &lt;code&gt;--staged&lt;/code&gt; 使用してインデックスのコンテンツを復元したり、-- staged --worktreeを使用し て作業ツリーとインデックスの両方を復元したりすることも &lt;code&gt;--staged --worktree&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="033264e01f6eaf7651e64aee25dc83cea3397f0e" translate="yes" xml:space="preserve">
          <source>The command finds the most recent tag that is reachable from a commit. If the tag points to the commit, then only the tag is shown. Otherwise, it suffixes the tag name with the number of additional commits on top of the tagged object and the abbreviated object name of the most recent commit. The result is a &quot;human-readable&quot; object name which can also be used to identify the commit to other git commands.</source>
          <target state="translated">このコマンドは、コミットから到達可能な最新のタグを見つけます。タグがコミットを指している場合は、そのタグのみを表示します。そうでない場合は、タグ名にタグ付きオブジェクトの上に追加のコミット数と、最新のコミットの省略形のオブジェクト名を付加します。この結果、「人間が読める」オブジェクト名となり、他の git コマンドでそのコミットを識別するために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="3ab56fbe7068ffbc29e1e09d644dcd93a3d4ced5" translate="yes" xml:space="preserve">
          <source>The command honors &lt;code&gt;color.status&lt;/code&gt; (or &lt;code&gt;status.color&lt;/code&gt; &amp;mdash; they mean the same thing and the latter is kept for backward compatibility) and &lt;code&gt;color.status.&amp;lt;slot&amp;gt;&lt;/code&gt; configuration variables to colorize its output.</source>
          <target state="translated">コマンドは &lt;code&gt;color.status&lt;/code&gt; （または &lt;code&gt;status.color&lt;/code&gt; &amp;mdash;同じことを意味し、後者は下位互換性のために保持されます）と &lt;code&gt;color.status.&amp;lt;slot&amp;gt;&lt;/code&gt; 構成変数を尊重して出力を色分けします。</target>
        </trans-unit>
        <trans-unit id="426f574eb4223ad0c1806f2471b371a9ce2ce62b" translate="yes" xml:space="preserve">
          <source>The command honors &lt;code&gt;core.filemode&lt;/code&gt; configuration variable. If your repository is on a filesystem whose executable bits are unreliable, this should be set to &lt;code&gt;false&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). This causes the command to ignore differences in file modes recorded in the index and the file mode on the filesystem if they differ only on executable bit. On such an unfortunate filesystem, you may need to use &lt;code&gt;git update-index --chmod=&lt;/code&gt;.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;core.filemode&lt;/code&gt; 構成変数を受け入れます。リポジトリが実行可能ビットが信頼できないファイルシステム上にある場合は、これを &lt;code&gt;false&lt;/code&gt; に設定する必要があります（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。これにより、コマンドは、インデックスに記録されたファイルモードとファイルシステムのファイルモードの違いが実行可能ビットでのみ異なる場合、それらを無視します。そのような不幸なファイルシステムでは、 &lt;code&gt;git update-index --chmod=&lt;/code&gt; を使用する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="1c1fbeab69cdf1a35e381ef7eff39e0ef873ae8e" translate="yes" xml:space="preserve">
          <source>The command is kept primarily for historical reasons; fingers of many people who learned Git long before &lt;code&gt;git log&lt;/code&gt; was invented by reading Linux kernel mailing list are trained to type it.</source>
          <target state="translated">コマンドは主に歴史的な理由で保持されます。Linuxカーネルのメーリングリストを読んで &lt;code&gt;git log&lt;/code&gt; が発明されるずっと前にGitを学んだ多くの人の指は、それを入力するように訓練されています。</target>
        </trans-unit>
        <trans-unit id="078766939aed50311c1dcee68ff982a08734592e" translate="yes" xml:space="preserve">
          <source>The command line for those commands that support taking submodules as part of their pathspecs. Most commands have a boolean flag &lt;code&gt;--recurse-submodules&lt;/code&gt; which specify whether to recurse into submodules. Examples are &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;checkout&lt;/code&gt;. Some commands take enums, such as &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt;, where you can specify how submodules are affected.</source>
          <target state="translated">パス指定の一部としてサブモジュールを取得することをサポートするコマンドのコマンドライン。ほとんどのコマンドには、 &lt;code&gt;--recurse-submodules&lt;/code&gt; に再帰するかどうかを指定するブールフラグ--recurse-submodulesがあります。例としては、 &lt;code&gt;grep&lt;/code&gt; と &lt;code&gt;checkout&lt;/code&gt; があります。 &lt;code&gt;fetch&lt;/code&gt; や &lt;code&gt;push&lt;/code&gt; などの一部のコマンドは列挙型を取り、サブモジュールへの影響を指定できます。</target>
        </trans-unit>
        <trans-unit id="0c67f633874ba0fbe1af2a193c1c589167c2ab4d" translate="yes" xml:space="preserve">
          <source>The command looks at &lt;code&gt;core.ignorestat&lt;/code&gt; configuration variable. See &lt;code&gt;Using &quot;assume unchanged&quot; bit&lt;/code&gt; section above.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;core.ignorestat&lt;/code&gt; 構成変数を調べます。上記の &lt;code&gt;Using &quot;assume unchanged&quot; bit&lt;/code&gt; セクションの使用を参照してください。</target>
        </trans-unit>
        <trans-unit id="5f7f0d79e587cabe73eebce8a6424fb5cae3c144" translate="yes" xml:space="preserve">
          <source>The command looks at &lt;code&gt;core.ignorestat&lt;/code&gt; configuration variable. When this is true, paths updated with &lt;code&gt;git update-index paths...&lt;/code&gt; and paths updated with other Git commands that update both index and working tree (e.g. &lt;code&gt;git apply --index&lt;/code&gt;, &lt;code&gt;git checkout-index -u&lt;/code&gt;, and &lt;code&gt;git read-tree -u&lt;/code&gt;) are automatically marked as &quot;assume unchanged&quot;. Note that &quot;assume unchanged&quot; bit is &lt;strong&gt;not&lt;/strong&gt; set if &lt;code&gt;git update-index --refresh&lt;/code&gt; finds the working tree file matches the index (use &lt;code&gt;git update-index --really-refresh&lt;/code&gt; if you want to mark them as &quot;assume unchanged&quot;).</source>
          <target state="translated">このコマンドは、 &lt;code&gt;core.ignorestat&lt;/code&gt; 構成変数を調べます。これが当てはまる場合、 &lt;code&gt;git update-index paths...&lt;/code&gt; で更新されたパスと、インデックスと作業ツリーの両方を更新する他のGitコマンドで更新されたパス（例： &lt;code&gt;git apply --index&lt;/code&gt; 、 &lt;code&gt;git checkout-index -u&lt;/code&gt; 、および &lt;code&gt;git read-tree -u&lt;/code&gt; ）は自動的に「変更されていない」とマークされます。 &lt;code&gt;git update-index --refresh&lt;/code&gt; が作業ツリーファイルがインデックスと一致する場合、「変更しない」ビットは設定され&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください（「変更しない」とマークしたい場合は、 &lt;code&gt;git update-index --really-refresh&lt;/code&gt; を使用してください）。</target>
        </trans-unit>
        <trans-unit id="719021beca97cba355f40567331ed4531fab91cd" translate="yes" xml:space="preserve">
          <source>The command loop shows the list of subcommands available, and gives a prompt &quot;What now&amp;gt; &quot;. In general, when the prompt ends with a single &lt;code&gt;&amp;gt;&lt;/code&gt;, you can pick only one of the choices given and type return, like this:</source>
          <target state="translated">コマンドループは、使用可能なサブコマンドのリストを表示し、プロンプト「What now&amp;gt;」を表示します。一般に、プロンプトが単一の &lt;code&gt;&amp;gt;&lt;/code&gt; で終了する場合、次のように、指定された選択肢の1つだけを選択してreturnを入力できます。</target>
        </trans-unit>
        <trans-unit id="653e31d7d7203bdc451cd54eed957012f41434d3" translate="yes" xml:space="preserve">
          <source>The command refuses to process new mailboxes until the current operation is finished, so if you decide to start over from scratch, run &lt;code&gt;git am --abort&lt;/code&gt; before running the command with mailbox names.</source>
          <target state="translated">コマンドは現在の操作が完了するまで新しいメールボックスの処理を拒否するため、最初からやり直す場合は、メールボックス名を指定してコマンドを実行する前に &lt;code&gt;git am --abort&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="ddc41d8aed51eb71b1c7af7000815eb2a4b359d3" translate="yes" xml:space="preserve">
          <source>The command stream is terminated by a blank line. In some cases (indicated in the documentation of the relevant commands), this blank line is followed by a payload in some other protocol (e.g., the pack protocol), while in others it indicates the end of input.</source>
          <target state="translated">コマンドストリームは空行で終了します。いくつかの場合(関連するコマンドのドキュメントで示されている)では、この空白行の後に他のプロトコル(例えば、パックプロトコル)のペイロードが続くが、他の場合は入力の終了を示す。</target>
        </trans-unit>
        <trans-unit id="d1cdce0d3b2e7df2146074a7208b9f02c1bab1a7" translate="yes" xml:space="preserve">
          <source>The command takes options applicable to the &lt;code&gt;git diff-tree&lt;/code&gt; command to control how the changes the commit introduces are shown.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;git diff-tree&lt;/code&gt; コマンドに適用可能なオプションを使用して、コミットによって導入される変更の表示方法を制御します。</target>
        </trans-unit>
        <trans-unit id="35fc48f2de1638c3a16917e24656f5cccec37735" translate="yes" xml:space="preserve">
          <source>The command takes options applicable to the &lt;code&gt;git log&lt;/code&gt; command to control what is shown and how. See &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;git log&lt;/code&gt; コマンドに適用可能なオプションを使用して、表示される内容と方法を制御します。&lt;a href=&quot;git-log&quot;&gt;git-log [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="704cfc598be528aca39957bda30b48a4e32947ac" translate="yes" xml:space="preserve">
          <source>The command takes options applicable to the &lt;code&gt;git rev-list&lt;/code&gt; command to control what is shown and how, and options applicable to the &lt;code&gt;git diff-*&lt;/code&gt; commands to control how the changes each commit introduces are shown.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;git rev-list&lt;/code&gt; コマンドに適用可能なオプションを使用して、表示内容と方法を制御し、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドに適用可能なオプションを使用して、各コミットが導入する変更の表示方法を制御します。</target>
        </trans-unit>
        <trans-unit id="05dd6533643357a7eb4c0a33aa8aafdf86be046c" translate="yes" xml:space="preserve">
          <source>The command takes various subcommands, and different options depending on the subcommand:</source>
          <target state="translated">コマンドは様々なサブコマンドを取り、サブコマンドによって異なるオプションを取ります。</target>
        </trans-unit>
        <trans-unit id="5dfb0879d1b00c6726b4c473489aecee6c7360c1" translate="yes" xml:space="preserve">
          <source>The command that the diff driver should call to generate the text-converted version of a file. The result of the conversion is used to generate a human-readable diff. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">ファイルのテキスト変換されたバージョンを生成するためにdiffドライバーが呼び出すコマンド。変換の結果は、人間が読める差分を生成するために使用されます。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="76561fd073c2b7875043b506e4a6c918bbf27fef" translate="yes" xml:space="preserve">
          <source>The command usually removes loose refs under &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; hierarchy after packing them. This option tells it not to.</source>
          <target state="translated">コマンドは通常、それらをパックした後に &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; 階層の下にある緩い参照を削除します。このオプションはそうしないように指示します。</target>
        </trans-unit>
        <trans-unit id="77170493947dd63f2044149c05ae4eb27dc0d118" translate="yes" xml:space="preserve">
          <source>The command usually shows percentage progress. This flag suppresses it.</source>
          <target state="translated">このコマンドは通常、進捗状況をパーセンテージで表示します。このフラグはそれを抑制します。</target>
        </trans-unit>
        <trans-unit id="3df5350b5d92a4c7df677ed19aeefaf4fd05338a" translate="yes" xml:space="preserve">
          <source>The command which is used to convert the content of a blob object to a worktree file upon checkout. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">チェックアウト時にblobオブジェクトのコンテンツをワークツリーファイルに変換するために使用されるコマンド。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e78c7e2042e4de22f48dc29ab38867e1c8242106" translate="yes" xml:space="preserve">
          <source>The command which is used to convert the content of a worktree file to a blob upon checkin. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">チェックイン時にワークツリーファイルのコンテンツをblobに変換するために使用されるコマンド。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a6711f072ffccd6a7948d8fcfc289d0284bd97d1" translate="yes" xml:space="preserve">
          <source>The command will only rewrite the &lt;code&gt;positive&lt;/code&gt; refs mentioned in the command line (e.g. if you pass &lt;code&gt;a..b&lt;/code&gt;, only &lt;code&gt;b&lt;/code&gt; will be rewritten). If you specify no filters, the commits will be recommitted without any changes, which would normally have no effect. Nevertheless, this may be useful in the future for compensating for some Git bugs or such, therefore such a usage is permitted.</source>
          <target state="translated">コマンドは、コマンドラインで指定された &lt;code&gt;positive&lt;/code&gt; 参照のみを書き換えます（たとえば、 &lt;code&gt;a..b&lt;/code&gt; を渡した場合、 &lt;code&gt;b&lt;/code&gt; のみが書き換えられます）。フィルターを指定しない場合、コミットは変更なしで再コミットされますが、通常は効果がありません。それにもかかわらず、これは将来、いくつかのGitバグなどを補うために役立つ可能性があるため、そのような使用が許可されます。</target>
        </trans-unit>
        <trans-unit id="6c1d44a42d537aa236fa8b0c18f8ebc1e0d665b8" translate="yes" xml:space="preserve">
          <source>The command writes the commit object name of the common ancestor to the standard output, so we captured its output to a variable, because we will be using it in the next step. By the way, the common ancestor commit is the &quot;Initial commit&quot; commit in this case. You can tell it by:</source>
          <target state="translated">コマンドは共通祖先のコミットオブジェクト名を標準出力に書き出していますので、次のステップで使うことになるので、その出力を変数に取り込んでいます。ちなみに、共通の先祖のコミットは、この場合は「イニシャルコミット」のコミットになります。でわかるようになっています。</target>
        </trans-unit>
        <trans-unit id="277f50b8984fb8f1e24e58a015e232c719b0136b" translate="yes" xml:space="preserve">
          <source>The command&amp;rsquo;s second form creates a new branch head named &amp;lt;branchname&amp;gt; which points to the current &lt;code&gt;HEAD&lt;/code&gt;, or &amp;lt;start-point&amp;gt; if given. As a special case, for &amp;lt;start-point&amp;gt;, you may use &lt;code&gt;&quot;A...B&quot;&lt;/code&gt; as a shortcut for the merge base of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; if there is exactly one merge base. You can leave out at most one of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, in which case it defaults to &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">コマンドの2番目の形式は、現在の &lt;code&gt;HEAD&lt;/code&gt; または指定されている場合は&amp;lt;start-point&amp;gt; を指す&amp;lt;branchname&amp;gt;という名前の新しいブランチヘッドを作成します。特殊なケースとして、&amp;lt;start-point&amp;gt;の場合、マージベースが1つしかない場合は、 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; のマージベースのショートカットとして &lt;code&gt;&quot;A...B&quot;&lt;/code&gt; を使用できます。 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; の最大1つを &lt;code&gt;HEAD&lt;/code&gt; ます。その場合、デフォルトでHEADになります。</target>
        </trans-unit>
        <trans-unit id="0384db43c537c0cba33bbce02fa39c058435bd6c" translate="yes" xml:space="preserve">
          <source>The command-line flag --exclude-from=&amp;lt;file&amp;gt; specifies a file containing a list of patterns. Patterns are ordered in the same order they appear in the file.</source>
          <target state="translated">コマンドラインフラグ--exclude-from = &amp;lt;file&amp;gt;は、パターンのリストを含むファイルを指定します。パターンは、ファイルに表示されるのと同じ順序で並べられます。</target>
        </trans-unit>
        <trans-unit id="84de3c7a7b3ba54b91bb57a464ea60b526231897" translate="yes" xml:space="preserve">
          <source>The command-line flag --exclude-per-directory=&amp;lt;name&amp;gt; specifies a name of the file in each directory &lt;code&gt;git ls-files&lt;/code&gt; examines, normally &lt;code&gt;.gitignore&lt;/code&gt;. Files in deeper directories take precedence. Patterns are ordered in the same order they appear in the files.</source>
          <target state="translated">コマンドラインフラグ--exclude-per-directory = &amp;lt;name&amp;gt;は、 &lt;code&gt;git ls-files&lt;/code&gt; が検査する各ディレクトリ内のファイルの名前を指定します。通常は &lt;code&gt;.gitignore&lt;/code&gt; です。深いディレクトリにあるファイルが優先されます。パターンは、ファイルに表示されるのと同じ順序で並べられます。</target>
        </trans-unit>
        <trans-unit id="de25d36c95ea6a374c3001c57d5c8bbae6052f57" translate="yes" xml:space="preserve">
          <source>The command-line flag --exclude=&amp;lt;pattern&amp;gt; specifies a single pattern. Patterns are ordered in the same order they appear in the command line.</source>
          <target state="translated">コマンドラインフラグ--exclude = &amp;lt;pattern&amp;gt;は、単一のパターンを指定します。パターンは、コマンドラインに表示されるのと同じ順序で並べられます。</target>
        </trans-unit>
        <trans-unit id="57163e2560363b464673a4a43dc95a7ad9f9ef3b" translate="yes" xml:space="preserve">
          <source>The commit &quot;D&quot; is called a &quot;merge base&quot; for branch &quot;main&quot; and &quot;dev&quot; because it&amp;rsquo;s the best common ancestor for these branches for a merge.</source>
          <target state="translated">コミット「D」は、ブランチ「main」と「dev」の「マージベース」と呼ばれます。これは、マージのこれらのブランチの最も一般的な祖先であるためです。</target>
        </trans-unit>
        <trans-unit id="f185c14cbc82f3e4dae044b7f66a7608424887fa" translate="yes" xml:space="preserve">
          <source>The commit author name is taken from the &quot;From: &quot; line of the message, and commit author date is taken from the &quot;Date: &quot; line of the message. The &quot;Subject: &quot; line is used as the title of the commit, after stripping common prefix &quot;[PATCH &amp;lt;anything&amp;gt;]&quot;. The &quot;Subject: &quot; line is supposed to concisely describe what the commit is about in one line of text.</source>
          <target state="translated">コミット作成者名はメッセージの「From：」行から取得され、コミット作成者の日付はメッセージの「Date：」行から取得されます。&quot;Subject：&quot;行は、共通の接頭辞 &quot;[PATCH &amp;lt;anything&amp;gt;]&quot;を取り除いた後、コミットのタイトルとして使用されます。「件名：」行は、1行のテキストでコミットの内容を簡潔に説明するものです。</target>
        </trans-unit>
        <trans-unit id="2f12acdb07fb960bc2fd1e07b27cc4a2b35ad054" translate="yes" xml:space="preserve">
          <source>The commit list format can be changed by setting the configuration option rebase.instructionFormat. A customized instruction format will automatically have the long commit hash prepended to the format.</source>
          <target state="translated">コミットリストのフォーマットは、設定オプション rebase.instructionFormat を設定することで変更できます。カスタマイズされた命令フォーマットは、フォーマットの前に長いコミットハッシュが自動的に付加されます。</target>
        </trans-unit>
        <trans-unit id="56b4186deed0365516ca63a760921d1d85d5abd6" translate="yes" xml:space="preserve">
          <source>The commit log message extracted from e-mail, usually except the title line which comes from e-mail Subject.</source>
          <target state="translated">電子メールから抽出されたコミットログメッセージで、通常は電子メールの件名から来るタイトル行を除いたものです。</target>
        </trans-unit>
        <trans-unit id="448543278984728d32d400e55fc12701ecc9668d" translate="yes" xml:space="preserve">
          <source>The commit log message, author name and author email are taken from the e-mail, and after minimally decoding MIME transfer encoding, re-coded in the charset specified by i18n.commitencoding (defaulting to UTF-8) by transliterating them. This used to be optional but now it is the default.</source>
          <target state="translated">コミットログメッセージ、著者名、著者メールアドレスをメールから取り出し、MIME転送エンコーディングを最小にデコードした後、i18n.commitencodingで指定された文字セットで再エンコードします(デフォルトはUTF-8)。これは以前はオプションでしたが、現在はデフォルトになっています。</target>
        </trans-unit>
        <trans-unit id="682ec5a16062666d3ac4c15995f4c320f0569ce3" translate="yes" xml:space="preserve">
          <source>The commit message is formed by the title taken from the &quot;Subject: &quot;, a blank line and the body of the message up to where the patch begins. Excess whitespace at the end of each line is automatically stripped.</source>
          <target state="translated">コミットメッセージは &quot;Subject.&quot;から取ったタイトル、空白行、そしてパッチが始まるところまでの本文で構成されます。各行の最後にある過剰な空白は自動的に取り除かれます。</target>
        </trans-unit>
        <trans-unit id="9d14a63335261988fcede52b815289c8a87983a5" translate="yes" xml:space="preserve">
          <source>The commit message is supplied either directly with the &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;-F&lt;/code&gt; option, or indirectly from the tag or commit when the second tree-ish denotes such an object, or it is requested by invoking an editor (see &lt;code&gt;--edit&lt;/code&gt; option below).</source>
          <target state="translated">コミットメッセージは、 &lt;code&gt;-m&lt;/code&gt; または &lt;code&gt;-F&lt;/code&gt; オプションを使用して直接提供されるか、2番目のツリーがそのようなオブジェクトを示す場合、タグまたはコミットから間接的に提供されるか、エディターの呼び出しによって要求されます（以下の &lt;code&gt;--edit&lt;/code&gt; オプションを参照）。 。</target>
        </trans-unit>
        <trans-unit id="50413d61f19e8e0d39eb4098c01c599c7c407f25" translate="yes" xml:space="preserve">
          <source>The commit object names shown above would be different for you, but they should match the HEAD commit object names of your repositories. You can check it by running &lt;code&gt;git ls-remote ../a&lt;/code&gt;.</source>
          <target state="translated">上記のコミットオブジェクト名は異なる場合がありますが、リポジトリのHEADコミットオブジェクト名と一致する必要があります。 &lt;code&gt;git ls-remote ../a&lt;/code&gt; を実行して確認できます。</target>
        </trans-unit>
        <trans-unit id="8b7bb35b4ae403135d95400938252724b91ca0d2" translate="yes" xml:space="preserve">
          <source>The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in &lt;code&gt;X&lt;/code&gt; and we are outputting in &lt;code&gt;X&lt;/code&gt;, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output.</source>
          <target state="translated">commitオブジェクトは、ログメッセージに使用されたエンコードをエンコードヘッダーに記録します。このオプションを使用して、ユーザーが希望するエンコーディングでコミットログメッセージを再コーディングするようにコマンドに指示できます。非配管コマンドの場合、これはデフォルトでUTF-8になります。オブジェクトが &lt;code&gt;X&lt;/code&gt; でエンコードされていると主張し、 &lt;code&gt;X&lt;/code&gt; で出力している場合、オブジェクトをそのまま出力することに注意してください。つまり、元のコミットの無効なシーケンスが出力にコピーされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8a40378090f508382eab3e21e0b4382b3bab0ad4" translate="yes" xml:space="preserve">
          <source>The commit, equivalent to what other systems call a &quot;changeset&quot; or &quot;version&quot;, represents a step in the project&amp;rsquo;s history, and each parent represents an immediately preceding step. Commits with more than one parent represent merges of independent lines of development.</source>
          <target state="translated">他のシステムが「変更セット」または「バージョン」と呼ぶものと同等のコミットは、プロジェクトの履歴のステップを表し、各親は直前のステップを表します。複数の親を持つコミットは、独立した開発ラインのマージを表します。</target>
        </trans-unit>
        <trans-unit id="7d3d64efc4f4511458592fa6c8a58dcfb8579da7" translate="yes" xml:space="preserve">
          <source>The commits are guaranteed to be listed in the order that they were processed by rebase.</source>
          <target state="translated">コミットは rebase で処理された順に表示されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="00a94582df69c83885533dbdc944c957c3a549e0" translate="yes" xml:space="preserve">
          <source>The commits marked with &lt;code&gt;*&lt;/code&gt; touch the same area in the same file; you need to resolve the conflicts when creating the commit marked with &lt;code&gt;+&lt;/code&gt;. Then you can test the result to make sure your work-in-progress still works with what is in the latest master.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; でマークされたコミットは、同じファイルの同じ領域をタッチします。 &lt;code&gt;+&lt;/code&gt; でマークされたコミットを作成するときに競合を解決する必要があります。次に、結果をテストして、進行中の作業が最新のマスターにあるもので引き続き機能することを確認できます。</target>
        </trans-unit>
        <trans-unit id="a3fd88845d0ae86224cb7a800b3122f1cf56cb03" translate="yes" xml:space="preserve">
          <source>The commits that were previously saved into the temporary area are then reapplied to the current branch, one by one, in order. Note that any commits in HEAD which introduce the same textual changes as a commit in HEAD..&amp;lt;upstream&amp;gt; are omitted (i.e., a patch already accepted upstream with a different commit message or timestamp will be skipped).</source>
          <target state="translated">以前に一時領域に保存されたコミットは、現在のブランチに1つずつ順番に再適用されます。 HEAD .. &amp;lt;upstream&amp;gt;でのコミットと同じテキストの変更を導入するHEADでのコミットは省略されることに注意してください（つまり、別のコミットメッセージまたはタイムスタンプですでに上流で受け入れられているパッチはスキップされます）。</target>
        </trans-unit>
        <trans-unit id="18d247bf08e46b2d89a403ce14a86d7b99503646" translate="yes" xml:space="preserve">
          <source>The complete message in a commit and tag object is &lt;code&gt;contents&lt;/code&gt;. Its first line is &lt;code&gt;contents:subject&lt;/code&gt;, where subject is the concatenation of all lines of the commit message up to the first blank line. The next line is &lt;code&gt;contents:body&lt;/code&gt;, where body is all of the lines after the first blank line. The optional GPG signature is &lt;code&gt;contents:signature&lt;/code&gt;. The first &lt;code&gt;N&lt;/code&gt; lines of the message is obtained using &lt;code&gt;contents:lines=N&lt;/code&gt;. Additionally, the trailers as interpreted by &lt;a href=&quot;git-interpret-trailers&quot;&gt;git-interpret-trailers[1]&lt;/a&gt; are obtained as &lt;code&gt;trailers&lt;/code&gt; (or by using the historical alias &lt;code&gt;contents:trailers&lt;/code&gt;). Non-trailer lines from the trailer block can be omitted with &lt;code&gt;trailers:only&lt;/code&gt;. Whitespace-continuations can be removed from trailers so that each trailer appears on a line by itself with its full content with &lt;code&gt;trailers:unfold&lt;/code&gt;. Both can be used together as &lt;code&gt;trailers:unfold,only&lt;/code&gt;.</source>
          <target state="translated">commitおよびtagオブジェクトの完全なメッセージは、 &lt;code&gt;contents&lt;/code&gt; です。その最初の行は &lt;code&gt;contents:subject&lt;/code&gt; で、subjectは最初の空白行までのコミットメッセージのすべての行の連結です。次の行は &lt;code&gt;contents:body&lt;/code&gt; で、bodyは最初の空白行の後のすべての行です。オプションのGPG署名は、 &lt;code&gt;contents:signature&lt;/code&gt; です。メッセージの最初の &lt;code&gt;N&lt;/code&gt; 行は、 &lt;code&gt;contents:lines=N&lt;/code&gt; を使用して取得されます。また、トレーラーはによって解釈されるよう&lt;a href=&quot;git-interpret-trailers&quot;&gt;にgit-解釈トレイラー[1]&lt;/a&gt;として得られる &lt;code&gt;trailers&lt;/code&gt; （または履歴別名使用して &lt;code&gt;contents:trailers&lt;/code&gt; ）。トレーラーブロックからの非トレーラー行は、 &lt;code&gt;trailers:only&lt;/code&gt; で省略できます。空白の継続はトレーラーから削除できるので、各トレーラーは単独で1行に表示され、 &lt;code&gt;trailers:unfold&lt;/code&gt; で完全なコンテンツが表示されます。両方を &lt;code&gt;trailers:unfold,only&lt;/code&gt; として一緒に使用できます：unfold、only。</target>
        </trans-unit>
        <trans-unit id="0cfefd9783776d68186cc88921bf5543257f8ee9" translate="yes" xml:space="preserve">
          <source>The complete series produces the same end result as your own (probably much messier!) development process did.</source>
          <target state="translated">このシリーズは、あなた自身の開発プロセスと同じ結果をもたらします(おそらく、より多くのメッシーな!)。</target>
        </trans-unit>
        <trans-unit id="94ed81b46eb91e159691e77d6f1f3c669ea0f93b" translate="yes" xml:space="preserve">
          <source>The condition starts with a keyword followed by a colon and some data whose format and meaning depends on the keyword. Supported keywords are:</source>
          <target state="translated">条件は、キーワードから始まり、その後にコロンと、キーワードに依存した形式と意味を持つデータが続きます。サポートされているキーワードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b796e8b15faa41177d638a7b320c951a662a1b91" translate="yes" xml:space="preserve">
          <source>The config settings that start with &lt;code&gt;feature.&lt;/code&gt; modify the defaults of a group of other config settings. These groups are created by the Git developer community as recommended defaults and are subject to change. In particular, new config options may be added with different defaults.</source>
          <target state="translated">&lt;code&gt;feature.&lt;/code&gt; で始まる構成設定。他の構成設定のグループのデフォルトを変更します。これらのグループは、推奨されるデフォルトとしてGit開発者コミュニティによって作成され、変更される可能性があります。特に、新しい設定オプションが異なるデフォルトで追加される場合があります。</target>
        </trans-unit>
        <trans-unit id="0fd18e355006d4a8cb0ab9547d6ae9db29a772ac" translate="yes" xml:space="preserve">
          <source>The config variable &lt;code&gt;ssh.variant&lt;/code&gt; can be set to override this detection. Valid values are &lt;code&gt;ssh&lt;/code&gt; (to use OpenSSH options), &lt;code&gt;plink&lt;/code&gt;, &lt;code&gt;putty&lt;/code&gt;, &lt;code&gt;tortoiseplink&lt;/code&gt;, &lt;code&gt;simple&lt;/code&gt; (no options except the host and remote command). The default auto-detection can be explicitly requested using the value &lt;code&gt;auto&lt;/code&gt;. Any other value is treated as &lt;code&gt;ssh&lt;/code&gt;. This setting can also be overridden via the environment variable &lt;code&gt;GIT_SSH_VARIANT&lt;/code&gt;.</source>
          <target state="translated">構成変数 &lt;code&gt;ssh.variant&lt;/code&gt; を設定して、この検出をオーバーライドできます。有効な値は、 &lt;code&gt;ssh&lt;/code&gt; （OpenSSHオプションを使用）、 &lt;code&gt;plink&lt;/code&gt; 、 &lt;code&gt;putty&lt;/code&gt; 、 &lt;code&gt;tortoiseplink&lt;/code&gt; 、 &lt;code&gt;simple&lt;/code&gt; （ホストとリモートコマンド以外のオプションなし）です。デフォルトの自動検出は、値 &lt;code&gt;auto&lt;/code&gt; を使用して明示的に要求できます。その他の値は &lt;code&gt;ssh&lt;/code&gt; として扱われます。この設定は、環境変数 &lt;code&gt;GIT_SSH_VARIANT&lt;/code&gt; を使用してオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="82dcb1f42fdd78b7a73229a297c6923dd8af63df" translate="yes" xml:space="preserve">
          <source>The configuration file &lt;code&gt;$GIT_DIR/config&lt;/code&gt; in the superproject. Git only recurses into active submodules (see &quot;ACTIVE SUBMODULES&quot; section below).</source>
          <target state="translated">スーパー &lt;code&gt;$GIT_DIR/config&lt;/code&gt; の構成ファイル$ GIT_DIR / config。Gitはアクティブなサブモジュールにのみ再帰します（以下の「アクティブなサブモジュール」セクションを参照）。</target>
        </trans-unit>
        <trans-unit id="774734ca6d9570e50bffe1b21770dfa34405f67a" translate="yes" xml:space="preserve">
          <source>The configuration file is used to override the default settings that were built into gitweb at the time the &lt;code&gt;gitweb.cgi&lt;/code&gt; script was generated.</source>
          <target state="translated">構成ファイルは、 &lt;code&gt;gitweb.cgi&lt;/code&gt; スクリプトの生成時にgitwebに組み込まれたデフォルト設定を上書きするために使用されます。</target>
        </trans-unit>
        <trans-unit id="b47107ae705aecdb184ade3561dff30a01436bf4" translate="yes" xml:space="preserve">
          <source>The configuration inside the submodule. This includes &lt;code&gt;$GIT_DIR/config&lt;/code&gt; in the submodule, but also settings in the tree such as a &lt;code&gt;.gitattributes&lt;/code&gt; or &lt;code&gt;.gitignore&lt;/code&gt; files that specify behavior of commands inside the submodule.</source>
          <target state="translated">サブモジュール内の構成。これには、 &lt;code&gt;$GIT_DIR/config&lt;/code&gt; サブモジュールではなく、のようなツリーの設定 &lt;code&gt;.gitattributes&lt;/code&gt; または &lt;code&gt;.gitignore&lt;/code&gt; サブモジュール内のコマンドの動作を指定したファイルを。</target>
        </trans-unit>
        <trans-unit id="9f6d6d393008f1bcb3935ac97c688c0c97bcd837" translate="yes" xml:space="preserve">
          <source>The configuration of submodules</source>
          <target state="translated">サブモジュールの構成</target>
        </trans-unit>
        <trans-unit id="386a88f6456b2a92a88834767dd0b8e7846f5609" translate="yes" xml:space="preserve">
          <source>The configuration variables &lt;code&gt;$projects_list_group_categories&lt;/code&gt; and &lt;code&gt;$project_list_default_category&lt;/code&gt; are described in &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf[5]&lt;/a&gt;</source>
          <target state="translated">構成変数 &lt;code&gt;$projects_list_group_categories&lt;/code&gt; および &lt;code&gt;$project_list_default_category&lt;/code&gt; は&lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf [5]に&lt;/a&gt;記述されています</target>
        </trans-unit>
        <trans-unit id="7bf08d06e6b6627f964eab6068d66314f0702240" translate="yes" xml:space="preserve">
          <source>The configuration variables are used by both the Git plumbing and the porcelains. The variables are divided into sections, wherein the fully qualified variable name of the variable itself is the last dot-separated segment and the section name is everything before the last dot. The variable names are case-insensitive, allow only alphanumeric characters and &lt;code&gt;-&lt;/code&gt;, and must start with an alphabetic character. Some variables may appear multiple times; we say then that the variable is multivalued.</source>
          <target state="translated">構成変数は、Git配管と磁器の両方で使用されます。変数はセクションに分割されます。変数自体の完全修飾変数名は最後のドット区切りのセグメントであり、セクション名は最後のドットの前のすべてです。変数名は大文字と小文字を区別せず、英数字と &lt;code&gt;-&lt;/code&gt; のみを使用でき、アルファベット文字で始まる必要があります。一部の変数は複数回現れることがあります。その場合、変数は多値であると言います。</target>
        </trans-unit>
        <trans-unit id="9ba005fddfd40c1aca4a3afcc24f0bfe0be0d141" translate="yes" xml:space="preserve">
          <source>The configuration variables described below configure some of gitweb links: their target and their look (text or image), and where to find page prerequisites (stylesheet, favicon, images, scripts). Usually they are left at their default values, with the possible exception of &lt;code&gt;@stylesheets&lt;/code&gt; variable.</source>
          <target state="translated">以下で説明する構成変数は、いくつかのgitwebリンクを構成します：ターゲットとその外観（テキストまたは画像）、およびページの前提条件を見つける場所（スタイルシート、ファビコン、画像、スクリプト）。通常、 &lt;code&gt;@stylesheets&lt;/code&gt; 変数を除いて、デフォルト値のままにします。</target>
        </trans-unit>
        <trans-unit id="352cabf788111a2af3c96521f974380812252a38" translate="yes" xml:space="preserve">
          <source>The configuration variables described below control how gitweb finds Git repositories, and how repositories are displayed and accessed.</source>
          <target state="translated">以下に説明する設定変数は、gitweb が Git リポジトリを見つける方法や、リポジトリの表示やアクセス方法を制御します。</target>
        </trans-unit>
        <trans-unit id="3f43fd6b4f50ff73ead39001e9e7b24eaf91129d" translate="yes" xml:space="preserve">
          <source>The construct &lt;code&gt;@{-&amp;lt;n&amp;gt;}&lt;/code&gt; means the &amp;lt;n&amp;gt;th branch/commit checked out before the current one.</source>
          <target state="translated">構成要素 &lt;code&gt;@{-&amp;lt;n&amp;gt;}&lt;/code&gt; は、現在のブランチ/コミットの前にチェックアウトされた&amp;lt;n&amp;gt;番目のブランチ/コミットを意味します。</target>
        </trans-unit>
        <trans-unit id="532c17d263ea0447251201d507a716aaf6f28f2e" translate="yes" xml:space="preserve">
          <source>The content to be committed can be specified in several ways:</source>
          <target state="translated">コミットする内容はいくつかの方法で指定できます。</target>
        </trans-unit>
        <trans-unit id="a3c1db69a05b050bddfd156a5df9e51b55df4af8" translate="yes" xml:space="preserve">
          <source>The contents of the actual line is output after the above header, prefixed by a TAB. This is to allow adding more header elements later.</source>
          <target state="translated">実際の行の内容は、上記のヘッダの後にTABを先頭にして出力されます。これは、後からさらにヘッダ要素を追加できるようにするためです。</target>
        </trans-unit>
        <trans-unit id="07ff8c430a66890255703acd59c46fb9590b9dc8" translate="yes" xml:space="preserve">
          <source>The contents of the blob objects are uninterpreted sequences of bytes. There is no encoding translation at the core level.</source>
          <target state="translated">blob オブジェクトの内容は、解釈されないバイト列です。コアレベルでのエンコーディング変換はありません。</target>
        </trans-unit>
        <trans-unit id="1b5efb2fc6b2c2f5d21112887ebec33fa1322cd1" translate="yes" xml:space="preserve">
          <source>The contents of the included file are inserted immediately, as if they had been found at the location of the include directive. If the value of the variable is a relative path, the path is considered to be relative to the configuration file in which the include directive was found. See below for examples.</source>
          <target state="translated">インクルードされたファイルの内容は、あたかもインクルード指示文の場所で見つかったかのように、すぐに挿入されます。変数の値が相対パスの場合、そのパスは include ディレクティブが見つかった設定ファイルからの相対パスとみなされます。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="8e2acace54c1bc95e05b068c1615156bf7369b0d" translate="yes" xml:space="preserve">
          <source>The core Git is often called &quot;plumbing&quot;, with the prettier user interfaces on top of it called &quot;porcelain&quot;. You may not want to use the plumbing directly very often, but it can be good to know what the plumbing does when the porcelain isn&amp;rsquo;t flushing.</source>
          <target state="translated">コアGitはしばしば「配管」と呼ばれ、その上に「磁器」と呼ばれるよりきれいなユーザーインターフェイスがあります。配管を直接頻繁に使用する必要はないかもしれませんが、磁器が洗い流されていないときに配管が何をするかを知ることは良いことです。</target>
        </trans-unit>
        <trans-unit id="bdff9728a51893f686262a6a471251953f8ca49c" translate="yes" xml:space="preserve">
          <source>The core.multiPackIndex config setting must be on to consume MIDX files.</source>
          <target state="translated">MIDXファイルを消費するためには、core.multiPackIndex設定がオンになっている必要があります。</target>
        </trans-unit>
        <trans-unit id="4fd34d18ba310e6b91e875c3fcf517fe13b68829" translate="yes" xml:space="preserve">
          <source>The cost matrix is populated thusly: for each pair of commits, both diffs are generated and the &quot;diff of diffs&quot; is generated, with 3 context lines, then the number of lines in that diff is used as cost.</source>
          <target state="translated">コスト行列は次のようにして生成されます:コミットの各ペアに対して、両方の diff が生成され、3 つのコンテキスト行を持つ「diff の diff」が生成され、その diff の行数がコストとして使用されます。</target>
        </trans-unit>
        <trans-unit id="588bd7a488f6b8b596aae7dca46a3809b4412eb0" translate="yes" xml:space="preserve">
          <source>The cost of an edge &lt;code&gt;o--C&lt;/code&gt; is the size of &lt;code&gt;C&lt;/code&gt;'s diff, modified by a fudge factor that should be smaller than 100%. The cost of an edge &lt;code&gt;o--o&lt;/code&gt; is free. The fudge factor is necessary because even if &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; have nothing in common, they may still share a few empty lines and such, possibly making the assignment &lt;code&gt;1--C&lt;/code&gt;, &lt;code&gt;o--o&lt;/code&gt; slightly cheaper than &lt;code&gt;1--o&lt;/code&gt;, &lt;code&gt;o--C&lt;/code&gt; even if &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; have nothing in common. With the fudge factor we require a much larger common part to consider patches as corresponding.</source>
          <target state="translated">エッジ &lt;code&gt;o--C&lt;/code&gt; のコストは &lt;code&gt;C&lt;/code&gt; の差分のサイズであり、ファッジファクターによって100％より小さくする必要があります。エッジ &lt;code&gt;o--o&lt;/code&gt; のコストは無料です。 &lt;code&gt;1&lt;/code&gt; と &lt;code&gt;C&lt;/code&gt; に共通点がない場合でも、ファッジファクターが必要です。これらの行は数行の空行などを共有している可能性があるため、割り当てが &lt;code&gt;1--C&lt;/code&gt; 、 &lt;code&gt;o--o&lt;/code&gt; の方が &lt;code&gt;1--o&lt;/code&gt; 、 &lt;code&gt;o--C&lt;/code&gt; よりも少し安くなります。-C &lt;code&gt;1&lt;/code&gt; と &lt;code&gt;C&lt;/code&gt; に共通点がない場合でも。ファッジファクターでは、パッチを対応するものと見なすために、より大きな共通部分が必要です。</target>
        </trans-unit>
        <trans-unit id="1995b336f91a29b5d0cf1cb6bf6d7c2407fa802c" translate="yes" xml:space="preserve">
          <source>The credential is split into a set of named attributes, with one attribute per line. Each attribute is specified by a key-value pair, separated by an &lt;code&gt;=&lt;/code&gt; (equals) sign, followed by a newline. The key may contain any bytes except &lt;code&gt;=&lt;/code&gt;, newline, or NUL. The value may contain any bytes except newline or NUL. In both cases, all bytes are treated as-is (i.e., there is no quoting, and one cannot transmit a value with newline or NUL in it). The list of attributes is terminated by a blank line or end-of-file. Git understands the following attributes:</source>
          <target state="translated">資格情報は、名前付き属性のセットに分割され、1行に1つの属性があります。各属性は、 &lt;code&gt;=&lt;/code&gt; （等号）記号で区切られたキーと値のペアで指定され、その後に改行が続きます。キーには、 &lt;code&gt;=&lt;/code&gt; 、改行、NUL 以外のバイトを含めることができます。値には、改行またはNUL以外のバイトを含めることができます。どちらの場合も、すべてのバイトはそのまま扱われます（つまり、引用符はなく、改行またはNULを含む値を送信することはできません）。属性のリストは、空白行またはファイルの終わりで終了します。Gitは次の属性を理解します。</target>
        </trans-unit>
        <trans-unit id="332163de0b53725f6a8fdbb5dfbee2d72f5e952f" translate="yes" xml:space="preserve">
          <source>The credential&amp;rsquo;s password, if we are asking it to be stored.</source>
          <target state="translated">資格情報のパスワード（保存するように要求されている場合）。</target>
        </trans-unit>
        <trans-unit id="b2af82f2f4002bb109eae365a3025f169b56089c" translate="yes" xml:space="preserve">
          <source>The credential&amp;rsquo;s username, if we already have one (e.g., from a URL, from the user, or from a previously run helper).</source>
          <target state="translated">クレデンシャルのユーザー名（すでに持っている場合）（たとえば、URLから、ユーザーから、または以前に実行されたヘルパーから）。</target>
        </trans-unit>
        <trans-unit id="327d8af868005c380ff04a569542ec1ad381deca" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt;. In more detail: Your &lt;a href=&quot;#def_working_tree&quot;&gt;working tree&lt;/a&gt; is normally derived from the state of the tree referred to by HEAD. HEAD is a reference to one of the &lt;a href=&quot;#def_head&quot;&gt;heads&lt;/a&gt; in your repository, except when using a &lt;a href=&quot;#def_detached_HEAD&quot;&gt;detached HEAD&lt;/a&gt;, in which case it directly references an arbitrary commit.</source>
          <target state="translated">現在の&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;。詳細：&lt;a href=&quot;#def_working_tree&quot;&gt;作業ツリー&lt;/a&gt;は通常、HEADによって参照されるツリーの状態から派生します。HEADは、リポジトリ内の&lt;a href=&quot;#def_head&quot;&gt;ヘッドの&lt;/a&gt; 1つへの参照です。ただし、&lt;a href=&quot;#def_detached_HEAD&quot;&gt;分離されたHEAD&lt;/a&gt;を使用する場合は除きます。この場合、任意のコミットを直接参照します。</target>
        </trans-unit>
        <trans-unit id="6a22129f9e2c1c598b41ac7718060a19c57ba2df" translate="yes" xml:space="preserve">
          <source>The current branch and &lt;code&gt;HEAD&lt;/code&gt; pointer stay at the last commit successfully made.</source>
          <target state="translated">現在のブランチと &lt;code&gt;HEAD&lt;/code&gt; ポインターは、正常に行われた最後のコミットに留まります。</target>
        </trans-unit>
        <trans-unit id="0f49d1c21e2564ca60f22933641a619ec1965bd6" translate="yes" xml:space="preserve">
          <source>The current branch is reset to &amp;lt;upstream&amp;gt;, or &amp;lt;newbase&amp;gt; if the --onto option was supplied. This has the exact same effect as &lt;code&gt;git reset --hard &amp;lt;upstream&amp;gt;&lt;/code&gt; (or &amp;lt;newbase&amp;gt;). ORIG_HEAD is set to point at the tip of the branch before the reset.</source>
          <target state="translated">現在のブランチは、&amp;lt;upstream&amp;gt;、または--ontoオプションが指定されている場合は&amp;lt;newbase&amp;gt;にリセットされます。これは &lt;code&gt;git reset --hard &amp;lt;upstream&amp;gt;&lt;/code&gt; （または&amp;lt;newbase&amp;gt;）とまったく同じ効果があります。ORIG_HEADは、リセット前にブランチの先端を指すように設定されています。</target>
        </trans-unit>
        <trans-unit id="485fe33a04a6d00e71aec5bce139a108011107ac" translate="yes" xml:space="preserve">
          <source>The current command-line parameters used for each variant are as follows:</source>
          <target state="translated">各バリアントで使用されている現在のコマンドラインパラメータは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f1d20a076d93bfe14eb345a4d54fe76b72904bc4" translate="yes" xml:space="preserve">
          <source>The current index and work tree is derived from $H, but the user may have local changes in them since $H.</source>
          <target state="translated">現在のインデックスとワークツリーは $H から派生していますが、ユーザーは $H 以降でローカルに変更を加えている可能性があります。</target>
        </trans-unit>
        <trans-unit id="7bc299cda3bedfdcbabc4a6883d29c81bf74d5df" translate="yes" xml:space="preserve">
          <source>The current index file for the repository. It is usually not found in a bare repository.</source>
          <target state="translated">リポジトリの現在のインデックスファイル。通常、むき出しのリポジトリにはありません。</target>
        </trans-unit>
        <trans-unit id="6561295b83003ebae9a9c6ca19e06cdfe7bf9b70" translate="yes" xml:space="preserve">
          <source>The currently defined format versions are:</source>
          <target state="translated">現在定義されているフォーマットのバージョンは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="66a8472981ef80b1cce56bd59cf5f4d97c11f9f9" translate="yes" xml:space="preserve">
          <source>The currently supported hooks are described below.</source>
          <target state="translated">現在サポートされているフックは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="8715361e5840de7b556e67eacf990927a206b328" translate="yes" xml:space="preserve">
          <source>The custom diff driver command. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">カスタムdiffドライバーコマンド。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1e530b24daf8e53e45f57000d6a6174670a1f6d2" translate="yes" xml:space="preserve">
          <source>The data content for the file has not been supplied yet. The frontend wants to supply it as part of this modify command.</source>
          <target state="translated">ファイルのデータ内容はまだ提供されていません。フロントエンドはこの修正コマンドの一部として提供したいと考えています。</target>
        </trans-unit>
        <trans-unit id="f92713104ec45ad60b839fa902e6ffedd1e05a41" translate="yes" xml:space="preserve">
          <source>The data content for the file was already supplied by a prior &lt;code&gt;blob&lt;/code&gt; command. The frontend just needs to connect it.</source>
          <target state="translated">ファイルのデータコンテンツは、以前の &lt;code&gt;blob&lt;/code&gt; コマンドによって既に提供されています。フロントエンドはそれを接続する必要があるだけです。</target>
        </trans-unit>
        <trans-unit id="abeb69d3d4bae2cc1a5a16e58850f1c93c17369b" translate="yes" xml:space="preserve">
          <source>The data content for the note has not been supplied yet. The frontend wants to supply it as part of this modify command.</source>
          <target state="translated">ノートのデータ内容はまだ提供されていません。フロントエンドはこの修正コマンドの一部として提供したいと考えています。</target>
        </trans-unit>
        <trans-unit id="81c47d0a0bfa5328ac109608aa42a36ac0ca6a45" translate="yes" xml:space="preserve">
          <source>The data content for the note was already supplied by a prior &lt;code&gt;blob&lt;/code&gt; command. The frontend just needs to connect it to the commit that is to be annotated.</source>
          <target state="translated">メモのデータコンテンツは、以前の &lt;code&gt;blob&lt;/code&gt; コマンドによって既に提供されています。フロントエンドは、注釈を付けるコミットに接続するだけです。</target>
        </trans-unit>
        <trans-unit id="d1c68865b9a230a071410342b903f7a0e48271ba" translate="yes" xml:space="preserve">
          <source>The data that follows the keyword &lt;code&gt;gitdir:&lt;/code&gt; is used as a glob pattern. If the location of the .git directory matches the pattern, the include condition is met.</source>
          <target state="translated">キーワード &lt;code&gt;gitdir:&lt;/code&gt; に続くデータは、グロブパターンとして使用されます。.gitディレクトリの場所がパターンと一致する場合、インクルード条件が満たされます。</target>
        </trans-unit>
        <trans-unit id="c1597312d460a92e79d09c37c305ec85acdf7d09" translate="yes" xml:space="preserve">
          <source>The data that follows the keyword &lt;code&gt;onbranch:&lt;/code&gt; is taken to be a pattern with standard globbing wildcards and two additional ones, &lt;code&gt;**/&lt;/code&gt; and &lt;code&gt;/**&lt;/code&gt;, that can match multiple path components. If we are in a worktree where the name of the branch that is currently checked out matches the pattern, the include condition is met.</source>
          <target state="translated">キーワード &lt;code&gt;onbranch:&lt;/code&gt; に続くデータは、標準のグロビングワイルドカードと、複数のパスコンポーネントに一致する &lt;code&gt;**/&lt;/code&gt; および &lt;code&gt;/**&lt;/code&gt; の 2つの追加のワイルドカードを含むパターンと見なされます。現在チェックアウトされているブランチの名前がパターンに一致するワークツリーにいる場合、包含条件が満たされます。</target>
        </trans-unit>
        <trans-unit id="7c053d7b296d35ca64db938819dea858103dc6da" translate="yes" xml:space="preserve">
          <source>The data transfer of the packfile is always multiplexed, using the same semantics of the &lt;code&gt;side-band-64k&lt;/code&gt; capability from protocol version 1. This means that each packet, during the packfile data stream, is made up of a leading 4-byte pkt-line length (typical of the pkt-line format), followed by a 1-byte stream code, followed by the actual data.</source>
          <target state="translated">packfileのデータ転送は、プロトコルバージョン1 の &lt;code&gt;side-band-64k&lt;/code&gt; 機能と同じセマンティクスを使用して常に多重化されます。つまり、packfileデータストリーム中の各パケットは、先頭の4バイトのパケットから構成されます。行の長さ（通常、pkt-line形式）、1バイトのストリームコード、実際のデータが続きます。</target>
        </trans-unit>
        <trans-unit id="c2900c14cd751c2ba06b33eb8d53cbdb905b94a4" translate="yes" xml:space="preserve">
          <source>The database cannot be reliably regenerated in a consistent form after the branch it is tracking has changed. Example: For merged branches, &lt;code&gt;git-cvsserver&lt;/code&gt; only tracks one branch of development, and after a &lt;code&gt;git merge&lt;/code&gt; an incrementally updated database may track a different branch than a database regenerated from scratch, causing inconsistent CVS revision numbers. &lt;code&gt;git-cvsserver&lt;/code&gt; has no way of knowing which branch it would have picked if it had been run incrementally pre-merge. So if you have to fully or partially (from old backup) regenerate the database, you should be suspicious of pre-existing CVS sandboxes.</source>
          <target state="translated">追跡しているブランチが変更された後、データベースを一貫した形式で確実に再生成することはできません。例：マージされたブランチの場合、 &lt;code&gt;git-cvsserver&lt;/code&gt; は開発の1つのブランチのみを追跡します。git &lt;code&gt;git merge&lt;/code&gt; 後、増分更新されたデータベースは最初から再生成されたデータベースとは異なるブランチを追跡し、一貫性のないCVSリビジョン番号を引き起こす可能性があります。 &lt;code&gt;git-cvsserver&lt;/code&gt; は、マージ前に段階的に実行された場合にどのブランチを選択するかを知る方法がありません。そのため、データベースを完全または部分的に（古いバックアップから）再生成する必要がある場合は、既存のCVSサンドボックスに疑いを持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="44d2a77b29a1133933d2693560e181324cc0bf34" translate="yes" xml:space="preserve">
          <source>The database has an object whose hash doesn&amp;rsquo;t match the object database value. This indicates a serious data integrity problem.</source>
          <target state="translated">データベースには、ハッシュがオブジェクトデータベースの値と一致しないオブジェクトがあります。これは、深刻なデータ整合性の問題を示しています。</target>
        </trans-unit>
        <trans-unit id="28234e35fb4524e90d740d3154dc66c02cb1f7a2" translate="yes" xml:space="preserve">
          <source>The default &amp;lt;ref&amp;gt; is &quot;master&quot;.</source>
          <target state="translated">デフォルトの&amp;lt;ref&amp;gt;は「マスター」です。</target>
        </trans-unit>
        <trans-unit id="c033f0ddddff0b7a496ef058316bfe1c29b59dcb" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt; that is merged into the branch in question (or the branch in question is rebased onto). It is configured via branch.&amp;lt;name&amp;gt;.remote and branch.&amp;lt;name&amp;gt;.merge. If the upstream branch of 'A' is 'origin/B' sometimes we say &quot;'A' is tracking 'origin/B'&quot;.</source>
          <target state="translated">問題のブランチにマージされる（または問題のブランチがリベースされる）デフォルトの&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;。これは、branch。&amp;lt;name&amp;gt; .remoteおよびbranch。&amp;lt;name&amp;gt; .mergeを介して構成されます。'A'の上流ブランチが 'origin / B'の場合、「 'A'は 'origin / B'を追跡している」と言うことがあります。</target>
        </trans-unit>
        <trans-unit id="0e2c938aad423666052c9b862a31c7bd282b15cb" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt; that is merged into the branch in question (or the branch in question is rebased onto). It is configured via branch.&amp;lt;name&amp;gt;.remote and branch.&amp;lt;name&amp;gt;.merge. If the upstream branch of &lt;code&gt;A&lt;/code&gt; is &lt;code&gt;origin/B&lt;/code&gt; sometimes we say &quot;&lt;code&gt;A&lt;/code&gt; is tracking &lt;code&gt;origin/B&lt;/code&gt;&quot;.</source>
          <target state="translated">問題のブランチにマージされる（または問題のブランチがリベースされる）デフォルトの&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;。これは、branch。&amp;lt;name&amp;gt; .remoteおよびbranch。&amp;lt;name&amp;gt; .mergeを介して構成されます。 &lt;code&gt;A&lt;/code&gt; の上流ブランチが &lt;code&gt;origin/B&lt;/code&gt; である場合、「 &lt;code&gt;A&lt;/code&gt; は &lt;code&gt;origin/B&lt;/code&gt; を追跡している」と言うことがあります。</target>
        </trans-unit>
        <trans-unit id="2a57474834373f0012a2eee4dc03542456f6b683" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;applypatch-msg&lt;/code&gt; hook, when enabled, runs the &lt;code&gt;commit-msg&lt;/code&gt; hook, if the latter is enabled.</source>
          <target state="translated">デフォルトの &lt;code&gt;applypatch-msg&lt;/code&gt; フックを有効にすると、後者が有効になっている場合に &lt;code&gt;commit-msg&lt;/code&gt; フックが実行されます。</target>
        </trans-unit>
        <trans-unit id="1004092b458b148233da1997202a081689268a8e" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;commit-msg&lt;/code&gt; hook, when enabled, detects duplicate &quot;Signed-off-by&quot; lines, and aborts the commit if one is found.</source>
          <target state="translated">デフォルトの &lt;code&gt;commit-msg&lt;/code&gt; フックが有効になっている場合、重複する「Signed-off-by」行を検出し、見つかった場合はコミットを中止します。</target>
        </trans-unit>
        <trans-unit id="54e7a2ab7a7ead4c100931e31ff4408636c3868d" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;post-receive&lt;/code&gt; hook is empty, but there is a sample script &lt;code&gt;post-receive-email&lt;/code&gt; provided in the &lt;code&gt;contrib/hooks&lt;/code&gt; directory in Git distribution, which implements sending commit emails.</source>
          <target state="translated">デフォルトの &lt;code&gt;post-receive&lt;/code&gt; フックは空ですが、サンプルスクリプトがあり &lt;code&gt;post-receive-email&lt;/code&gt; で提供 &lt;code&gt;contrib/hooks&lt;/code&gt; コミットメールを送信した道具、Gitの配布ディレクトリを。</target>
        </trans-unit>
        <trans-unit id="a71e842d9eb90ca6731ba585809c1f8c19eb80f6" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;pre-applypatch&lt;/code&gt; hook, when enabled, runs the &lt;code&gt;pre-commit&lt;/code&gt; hook, if the latter is enabled.</source>
          <target state="translated">デフォルトの &lt;code&gt;pre-applypatch&lt;/code&gt; フックは、有効になっている場合、 &lt;code&gt;pre-commit&lt;/code&gt; フックを実行します（後者が有効になっている場合）。</target>
        </trans-unit>
        <trans-unit id="b4266565542333c335464dc9285134a4a9b31011" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;pre-commit&lt;/code&gt; hook, when enabled&amp;mdash;​and with the &lt;code&gt;hooks.allownonascii&lt;/code&gt; config option unset or set to false&amp;mdash;​prevents the use of non-ASCII filenames.</source>
          <target state="translated">デフォルトの &lt;code&gt;pre-commit&lt;/code&gt; フックが有効になっている場合（および &lt;code&gt;hooks.allownonascii&lt;/code&gt; 構成オプションが設定されていないかfalseに設定されている場合）は、非ASCIIファイル名の使用を防止します。</target>
        </trans-unit>
        <trans-unit id="c591fe93d0021a0c7991225b1a062c31f35ddd16" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;pre-commit&lt;/code&gt; hook, when enabled, catches introduction of lines with trailing whitespaces and aborts the commit when such a line is found.</source>
          <target state="translated">デフォルトの &lt;code&gt;pre-commit&lt;/code&gt; フックは、有効になっている場合、末尾に空白がある行の導入をキャッチし、そのような行が見つかるとコミットを中止します。</target>
        </trans-unit>
        <trans-unit id="5c24125124251d23fec260bbe8f20bf4ce1ae496" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;pre-merge-commit&lt;/code&gt; hook, when enabled, runs the &lt;code&gt;pre-commit&lt;/code&gt; hook, if the latter is enabled.</source>
          <target state="translated">デフォルトの &lt;code&gt;pre-merge-commit&lt;/code&gt; フックが有効になっている場合、後者が有効になっていると、 &lt;code&gt;pre-commit&lt;/code&gt; フックが実行されます。</target>
        </trans-unit>
        <trans-unit id="c0f0841a2790ebd8e4684a32dafde265e2735139" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;update&lt;/code&gt; hook, when enabled&amp;mdash;​and with &lt;code&gt;hooks.allowunannotated&lt;/code&gt; config option unset or set to false&amp;mdash;​prevents unannotated tags to be pushed.</source>
          <target state="translated">デフォルトの &lt;code&gt;update&lt;/code&gt; フックが有効になっている場合（および &lt;code&gt;hooks.allowunannotated&lt;/code&gt; 構成オプションが設定されていないかfalseに設定されている場合）は、注釈が付けられていないタグがプッシュされないようにします。</target>
        </trans-unit>
        <trans-unit id="e99caaee535fa5770d85355802dd91eb002c650f" translate="yes" xml:space="preserve">
          <source>The default behavior of this command when no &amp;lt;refspec&amp;gt; is given can be configured by setting the &lt;code&gt;push&lt;/code&gt; option of the remote, or the &lt;code&gt;push.default&lt;/code&gt; configuration variable.</source>
          <target state="translated">&amp;lt;refspec&amp;gt;が指定されていない場合のこのコマンドのデフォルトの動作は、リモートの &lt;code&gt;push&lt;/code&gt; オプションまたは &lt;code&gt;push.default&lt;/code&gt; 構成変数を設定することで構成できます。</target>
        </trans-unit>
        <trans-unit id="04fb2222b71daf513a74198926f20b6eb1c65e53" translate="yes" xml:space="preserve">
          <source>The default can be changed by the &lt;code&gt;commit.cleanup&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">デフォルトは &lt;code&gt;commit.cleanup&lt;/code&gt; 設定変数で変更できます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="6d2b951210087bf6a12979c879cea7654da192ce" translate="yes" xml:space="preserve">
          <source>The default can be changed using the status.showUntrackedFiles configuration variable documented in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">デフォルトは、&lt;a href=&quot;git-config&quot;&gt;git-config [1]に&lt;/a&gt;記載されているstatus.showUntrackedFiles構成変数を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="f4804356dda86c0d39019920e2a204580a3348e0" translate="yes" xml:space="preserve">
          <source>The default configuration with no configuration file at all may work perfectly well for some installations. Still, a configuration file is useful for customizing or tweaking the behavior of gitweb in many ways, and some optional features will not be present unless explicitly enabled using the configurable &lt;code&gt;%features&lt;/code&gt; variable (see also &quot;Configuring gitweb features&quot; section below).</source>
          <target state="translated">構成ファイルがまったくないデフォルト構成は、一部のインストールで完全に機能する場合があります。それでも、構成ファイルはgitwebの動作をさまざまな方法でカスタマイズまたは微調整するのに役立ちます。構成可能な &lt;code&gt;%features&lt;/code&gt; 変数を使用して明示的に有効にしない限り、一部のオプション機能は表示されません（以下の「gitweb機能の構成」セクションも参照）。</target>
        </trans-unit>
        <trans-unit id="ba35598baf99b4759b4ac8e8e152046ad84f4f70" translate="yes" xml:space="preserve">
          <source>The default destination is &lt;code&gt;syslog&lt;/code&gt; if &lt;code&gt;--inetd&lt;/code&gt; or &lt;code&gt;--detach&lt;/code&gt; is specified, otherwise &lt;code&gt;stderr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--inetd&lt;/code&gt; または &lt;code&gt;--detach&lt;/code&gt; が指定されている場合のデフォルトの宛先は &lt;code&gt;syslog&lt;/code&gt; で、それ以外の場合は &lt;code&gt;stderr&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="08a91820da4ab8ff0557091a83e78baf95e62cbc" translate="yes" xml:space="preserve">
          <source>The default development &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt;. Whenever you create a Git &lt;a href=&quot;#def_repository&quot;&gt;repository&lt;/a&gt;, a branch named &quot;master&quot; is created, and becomes the active branch. In most cases, this contains the local development, though that is purely by convention and is not required.</source>
          <target state="translated">デフォルトの開発&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;。Git &lt;a href=&quot;#def_repository&quot;&gt;リポジトリ&lt;/a&gt;を作成すると、「マスター」という名前のブランチが作成され、アクティブなブランチになります。ほとんどの場合、これにはローカル開発が含まれますが、これは純粋に慣例によるものであり、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="9cfb0587d78b80316db2bf990e0689e616d2c4e9" translate="yes" xml:space="preserve">
          <source>The default diff tool to use when &lt;code&gt;--gui&lt;/code&gt; is specified.</source>
          <target state="translated">&lt;code&gt;--gui&lt;/code&gt; が指定されている場合に使用するデフォルトのdiffツール。</target>
        </trans-unit>
        <trans-unit id="2106f60990b064f5f08c291bb6d584e30eb4aef6" translate="yes" xml:space="preserve">
          <source>The default diff tool to use.</source>
          <target state="translated">使用するデフォルトの差分ツール。</target>
        </trans-unit>
        <trans-unit id="ef7818a768aaedb1852c90af2f69c6d87d81a9be" translate="yes" xml:space="preserve">
          <source>The default for format-patch is to output a signature containing the Git version number. Use this variable to change that default. Set this variable to the empty string (&quot;&quot;) to suppress signature generation.</source>
          <target state="translated">format-patch のデフォルトでは、Git のバージョン番号を含むシグネチャを出力します。この変数を使用してデフォルトを変更します。この変数に空文字列 (&quot;&quot;)を設定すると、シグネチャの生成を抑制します。</target>
        </trans-unit>
        <trans-unit id="04f69f6bfbe685cc6892bfe73707b968c4b7e627" translate="yes" xml:space="preserve">
          <source>The default for format-patch is to output files with the &lt;code&gt;[PATCH]&lt;/code&gt; subject prefix. Use this variable to change that prefix.</source>
          <target state="translated">format-patchのデフォルトは、 &lt;code&gt;[PATCH]&lt;/code&gt; 件名接頭辞が付いたファイルを出力することです。この変数を使用して、その接頭辞を変更します。</target>
        </trans-unit>
        <trans-unit id="9305a301a407a477c0982cd809ad589540305e9b" translate="yes" xml:space="preserve">
          <source>The default for format-patch is to output files with the suffix &lt;code&gt;.patch&lt;/code&gt;. Use this variable to change that suffix (make sure to include the dot if you want it).</source>
          <target state="translated">format-patchのデフォルトでは、拡張子が &lt;code&gt;.patch&lt;/code&gt; のファイルが出力されます。この変数を使用して、そのサフィックスを変更します（必要に応じて、必ずドットを含めてください）。</target>
        </trans-unit>
        <trans-unit id="82f6ff06915abbfaa5bafadf3e71c6515eea8a49" translate="yes" xml:space="preserve">
          <source>The default for the patch directory is patches or the value of the &lt;code&gt;$QUILT_PATCHES&lt;/code&gt; environment variable.</source>
          <target state="translated">パッチディレクトリのデフォルトは、 &lt;code&gt;$QUILT_PATCHES&lt;/code&gt; または$ QUILT_PATCHES環境変数の値です。</target>
        </trans-unit>
        <trans-unit id="63e417c4ba57abb65259188be896bb91267bad84" translate="yes" xml:space="preserve">
          <source>The default for the series file is &amp;lt;patches&amp;gt;/series or the value of the &lt;code&gt;$QUILT_SERIES&lt;/code&gt; environment variable.</source>
          <target state="translated">シリーズファイルのデフォルトは、&amp;lt;patches&amp;gt; / seriesまたは &lt;code&gt;$QUILT_SERIES&lt;/code&gt; 環境変数の値です。</target>
        </trans-unit>
        <trans-unit id="43b413a4d69c795f1a4cc6e5069d43aa254cba9e" translate="yes" xml:space="preserve">
          <source>The default format does not show what the original said in the conflicting area. You cannot tell how many lines are deleted and replaced with Barbie&amp;rsquo;s remark on your side. The only thing you can tell is that your side wants to say it is hard and you&amp;rsquo;d prefer to go shopping, while the other side wants to claim it is easy.</source>
          <target state="translated">デフォルトの形式では、競合する領域でオリジナルが言ったことを示していません。何行削除され、あなたの側のバービーの発言に置き換えられたかはわかりません。あなたが言える唯一のことは、あなたの側が難しいと言いたいのであなたは買い物に行きたいと思っているのに対して、反対側はそれが簡単だと主張したいということです。</target>
        </trans-unit>
        <trans-unit id="2c9ac4b5e02925d5a2242fa228d32b0af91d581b" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;--no-notes&lt;/code&gt;, unless the &lt;code&gt;format.notes&lt;/code&gt; configuration is set.</source>
          <target state="translated">&lt;code&gt;format.notes&lt;/code&gt; 構成が設定されていない限り、デフォルトは &lt;code&gt;--no-notes&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e210eb7dbec89858b8e72d64e2d379a9aada6a48" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;--no-thread&lt;/code&gt;, unless the &lt;code&gt;format.thread&lt;/code&gt; configuration is set. If &lt;code&gt;--thread&lt;/code&gt; is specified without a style, it defaults to the style specified by &lt;code&gt;format.thread&lt;/code&gt; if any, or else &lt;code&gt;shallow&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;format.thread&lt;/code&gt; 構成が設定されていない限り、デフォルトは &lt;code&gt;--no-thread&lt;/code&gt; です。場合 &lt;code&gt;--thread&lt;/code&gt; がで指定されたスタイルにスタイルなしで指定され、それがデフォルト &lt;code&gt;format.thread&lt;/code&gt; あれば、または他の &lt;code&gt;shallow&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9abe1131612b105426f13be17707662aa8662d23" translate="yes" xml:space="preserve">
          <source>The default is false, except &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; or &lt;a href=&quot;git-init&quot;&gt;git-init[1]&lt;/a&gt; will probe and set core.ignoreCase true if appropriate when the repository is created.</source>
          <target state="translated">デフォルトはfalseです。ただし、&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;または&lt;a href=&quot;git-init&quot;&gt;git-init [1]&lt;/a&gt;は、リポジトリの作成時に適切な場合にcore.ignoreCaseをプローブしてtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="fcf73b7882b6e3d265136d0071b137412decce56" translate="yes" xml:space="preserve">
          <source>The default is not to print any annotation lines. If no number is given to &lt;code&gt;-n&lt;/code&gt;, only the first line is printed. If the tag is not annotated, the commit message is displayed instead.</source>
          <target state="translated">デフォルトでは、注釈行は印刷されません。 &lt;code&gt;-n&lt;/code&gt; に番号が指定されていない場合、最初の行のみが出力されます。タグに注釈が付けられていない場合は、代わりにコミットメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="19baf950afb8f746e54b7299adf6fbd6966f659a" translate="yes" xml:space="preserve">
          <source>The default is to diff against our branch (-2) and the cleanly resolved paths. The option -0 can be given to omit diff output for unmerged entries and just show &quot;Unmerged&quot;.</source>
          <target state="translated">デフォルトでは、ブランチ (-2)とクリーンに解決されたパスに対して diff を出力します。オプション -0 を指定すると、マージされていないエントリの diff 出力を省略し、&quot;Unmerged&quot; のみを表示することができます。</target>
        </trans-unit>
        <trans-unit id="70f152ab57d660d365ae81763277f72b2d86f307" translate="yes" xml:space="preserve">
          <source>The default is true (when core.filemode is not specified in the config file).</source>
          <target state="translated">デフォルトは true です (設定ファイルに core.filemode が指定されていない場合)。</target>
        </trans-unit>
        <trans-unit id="03228e9bc81b32ffbccac2430f1d794dd7591d2a" translate="yes" xml:space="preserve">
          <source>The default is true, except &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; or &lt;a href=&quot;git-init&quot;&gt;git-init[1]&lt;/a&gt; will probe and set core.symlinks false if appropriate when the repository is created.</source>
          <target state="translated">デフォルトはtrueですが、リポジトリの作成時に&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;または&lt;a href=&quot;git-init&quot;&gt;git-init [1]&lt;/a&gt;が適切な場合にcore.symlinksをプローブしてfalseを設定します。</target>
        </trans-unit>
        <trans-unit id="72445c1104c1c11ef748913a9c6e570e5a73c947" translate="yes" xml:space="preserve">
          <source>The default location of the CVS checkout to use for the export.</source>
          <target state="translated">エクスポートに使用するCVSチェックアウトのデフォルトの場所です。</target>
        </trans-unit>
        <trans-unit id="116262510e324641581bf8e5fe54c44cc1ec58f5" translate="yes" xml:space="preserve">
          <source>The default merge strategy to use when pulling a single branch.</source>
          <target state="translated">単一のブランチをプルする際に使用するデフォルトのマージ戦略。</target>
        </trans-unit>
        <trans-unit id="a808540aa8de08b00cb350dbc14ab54e33fa8faf" translate="yes" xml:space="preserve">
          <source>The default merge strategy to use when pulling multiple branches at once.</source>
          <target state="translated">複数のブランチを一度に引っ張る際に使用するデフォルトのマージ戦略。</target>
        </trans-unit>
        <trans-unit id="e2e648395119cc70a2e9e998b6f3d4c60294fc12" translate="yes" xml:space="preserve">
          <source>The default mode for format-patch to determine which parts of the cover letter will be populated using the branch&amp;rsquo;s description. See the &lt;code&gt;--cover-from-description&lt;/code&gt; option in &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt;.</source>
          <target state="translated">ブランチの説明を使用してカバーレターのどの部分に入力するかを決定するformat-patchのデフォルトモード。&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt;の &lt;code&gt;--cover-from-description&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="063faead523251f77be0529092965c3429cc8003" translate="yes" xml:space="preserve">
          <source>The default module path for &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt; to use instead of /usr/lib/apache2/modules. Only used if httpd is Apache.</source>
          <target state="translated">/ usr / lib / apache2 / modulesの代わりに使用する&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]&lt;/a&gt;のデフォルトのモジュールパス。httpdがApacheの場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="91f8aff2bf27bb7f60525104a4a75d78c7ffe52b" translate="yes" xml:space="preserve">
          <source>The default notes merge strategy is &quot;manual&quot;, which checks out conflicting notes in a special work tree for resolving notes conflicts (&lt;code&gt;.git/NOTES_MERGE_WORKTREE&lt;/code&gt;), and instructs the user to resolve the conflicts in that work tree. When done, the user can either finalize the merge with &lt;code&gt;git notes merge --commit&lt;/code&gt;, or abort the merge with &lt;code&gt;git notes merge --abort&lt;/code&gt;.</source>
          <target state="translated">デフォルトのメモ結合戦略は「手動」で、メモの競合を解決するための特別な作業ツリー（ &lt;code&gt;.git/NOTES_MERGE_WORKTREE&lt;/code&gt; ）で競合するメモをチェックアウトし、ユーザーにその作業ツリーの競合を解決するように指示します。完了したら、ユーザーは &lt;code&gt;git notes merge --commit&lt;/code&gt; を使用してマージを終了するか、git notes merge --abortを使用してマージを中止 &lt;code&gt;git notes merge --abort&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d49acb565d9b642605b0a997d7ebc3213ecdde25" translate="yes" xml:space="preserve">
          <source>The default pretty format for log/show/whatchanged command, See &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;, &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt;, &lt;a href=&quot;git-whatchanged&quot;&gt;git-whatchanged[1]&lt;/a&gt;.</source>
          <target state="translated">log / show / whatchangedコマンドのデフォルトのprettyフォーマット。git &lt;a href=&quot;git-log&quot;&gt;-log [1]&lt;/a&gt;、&lt;a href=&quot;git-show&quot;&gt;git-show [1]&lt;/a&gt;、&lt;a href=&quot;git-whatchanged&quot;&gt;git-whatchanged [1]を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c642123af45071133c151f29614b42c5bfc1ffac" translate="yes" xml:space="preserve">
          <source>The default program to execute on the remote side when fetching. See option --upload-pack of &lt;a href=&quot;git-fetch-pack&quot;&gt;git-fetch-pack[1]&lt;/a&gt;.</source>
          <target state="translated">フェッチ時にリモート側で実行するデフォルトのプログラム。&lt;a href=&quot;git-fetch-pack&quot;&gt;git-fetch-pack [1]の&lt;/a&gt;オプション--upload-packを参照してください。</target>
        </trans-unit>
        <trans-unit id="02bc1378d0d05db5e7ff2ca7062e80f4098e5579" translate="yes" xml:space="preserve">
          <source>The default program to execute on the remote side when pushing. See option --receive-pack of &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;.</source>
          <target state="translated">プッシュ時にリモート側で実行するデフォルトのプログラム。&lt;a href=&quot;git-push&quot;&gt;git-push [1]の&lt;/a&gt;オプション--receive-packを参照してください。</target>
        </trans-unit>
        <trans-unit id="1520b8813a02e6817b17665a2200c8c1eb73489c" translate="yes" xml:space="preserve">
          <source>The default remote is the remote of the remote-tracking branch of the current branch. If no such remote-tracking branch exists or the HEAD is detached, &quot;origin&quot; is assumed to be the default remote. If the superproject doesn&amp;rsquo;t have a default remote configured the superproject is its own authoritative upstream and the current working directory is used instead.</source>
          <target state="translated">デフォルトのリモートは、現在のブランチのリモート追跡ブランチのリモートです。そのようなリモート追跡ブランチが存在しないか、HEADが切り離されている場合、「origin」がデフォルトのリモートであると見なされます。スーパープロジェクトにデフォルトのリモートが設定されていない場合、スーパープロジェクトはそれ自体が権威のある上流であり、代わりに現在の作業ディレクトリが使用されます。</target>
        </trans-unit>
        <trans-unit id="0d78370864f4fde80869e4efb080139612c8d161" translate="yes" xml:space="preserve">
          <source>The default set of &quot;refspec&quot; for &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;. See &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt;の「refspec」のデフォルトセット。&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6e7461b63dbe3a9bd4be74e77260f6121d70becf" translate="yes" xml:space="preserve">
          <source>The default set of &quot;refspec&quot; for &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;. See &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;の「refspec」のデフォルトセット。&lt;a href=&quot;git-push&quot;&gt;git-push [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9b1d55965a766c32086046542d13a0c5cafb5d20" translate="yes" xml:space="preserve">
          <source>The default set of branches for &lt;a href=&quot;git-show-branch&quot;&gt;git-show-branch[1]&lt;/a&gt;. See &lt;a href=&quot;git-show-branch&quot;&gt;git-show-branch[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;git-show-branch&quot;&gt;git-show-branch [1]&lt;/a&gt;のデフォルトのブランチセット。&lt;a href=&quot;git-show-branch&quot;&gt;git-show-branch [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8f8a6ecfdcb232e0e35afa31c75a9bb76e3ba014" translate="yes" xml:space="preserve">
          <source>The default template directory includes some directory structure, suggested &quot;exclude patterns&quot; (see &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;), and sample hook files.</source>
          <target state="translated">デフォルトのテンプレートディレクトリには、いくつかのディレクトリ構造、推奨される「除外パターン」（&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]を&lt;/a&gt;参照）、およびサンプルフックファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="5c5dda91be7317473d73b4f4f28156d762d8905f" translate="yes" xml:space="preserve">
          <source>The default threading style for &lt;code&gt;git format-patch&lt;/code&gt;. Can be a boolean value, or &lt;code&gt;shallow&lt;/code&gt; or &lt;code&gt;deep&lt;/code&gt;. &lt;code&gt;shallow&lt;/code&gt; threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the &lt;code&gt;--in-reply-to&lt;/code&gt;, and the first patch mail, in this order. &lt;code&gt;deep&lt;/code&gt; threading makes every mail a reply to the previous one. A true boolean value is the same as &lt;code&gt;shallow&lt;/code&gt;, and a false value disables threading.</source>
          <target state="translated">&lt;code&gt;git format-patch&lt;/code&gt; のデフォルトのスレッドスタイル。ブール値、または &lt;code&gt;shallow&lt;/code&gt; または &lt;code&gt;deep&lt;/code&gt; ことができます。 &lt;code&gt;shallow&lt;/code&gt; スレッドは、すべてのメールをシリーズの先頭への返信にします。先頭は、カバーレター、 &lt;code&gt;--in-reply-to&lt;/code&gt; in -reply-to、および最初のパッチメールからこの順序で選択されます。 &lt;code&gt;deep&lt;/code&gt; スレッドは、すべてのメールを前のメールへの返信にします。 trueのブール値は、 &lt;code&gt;shallow&lt;/code&gt; と同じであり、falseの値はスレッド化を無効にします。</target>
        </trans-unit>
        <trans-unit id="0eb7f832f6b33a6020eb8629fee287c4b15b4801" translate="yes" xml:space="preserve">
          <source>The default upstream &lt;a href=&quot;#def_repository&quot;&gt;repository&lt;/a&gt;. Most projects have at least one upstream project which they track. By default 'origin' is used for that purpose. New upstream updates will be fetched into &lt;a href=&quot;#def_remote_tracking_branch&quot;&gt;remote-tracking branches&lt;/a&gt; named origin/name-of-upstream-branch, which you can see using &lt;code&gt;git branch -r&lt;/code&gt;.</source>
          <target state="translated">デフォルトの上流&lt;a href=&quot;#def_repository&quot;&gt;リポジトリ&lt;/a&gt;。ほとんどのプロジェクトには、追跡する上流プロジェクトが少なくとも1つあります。デフォルトでは、そのために「origin」が使用されます。新しいアップストリーム更新は、origin / name-of-upstream-branchという名前の&lt;a href=&quot;#def_remote_tracking_branch&quot;&gt;リモート追跡ブランチに&lt;/a&gt;フェッチされます。これは &lt;code&gt;git branch -r&lt;/code&gt; を使用して確認できます。</target>
        </trans-unit>
        <trans-unit id="4f838be44da45fd1828d0b46b391485ccd56187e" translate="yes" xml:space="preserve">
          <source>The default upstream &lt;a href=&quot;#def_repository&quot;&gt;repository&lt;/a&gt;. Most projects have at least one upstream project which they track. By default &lt;code&gt;origin&lt;/code&gt; is used for that purpose. New upstream updates will be fetched into &lt;a href=&quot;#def_remote_tracking_branch&quot;&gt;remote-tracking branches&lt;/a&gt; named origin/name-of-upstream-branch, which you can see using &lt;code&gt;git branch -r&lt;/code&gt;.</source>
          <target state="translated">デフォルトの上流&lt;a href=&quot;#def_repository&quot;&gt;リポジトリ&lt;/a&gt;。ほとんどのプロジェクトには、追跡する上流プロジェクトが少なくとも1つあります。デフォルトでは、そのために &lt;code&gt;origin&lt;/code&gt; が使用されます。新しいアップストリーム更新は、origin / name-of-upstream-branchという名前の&lt;a href=&quot;#def_remote_tracking_branch&quot;&gt;リモート追跡ブランチに&lt;/a&gt;フェッチされます。これは &lt;code&gt;git branch -r&lt;/code&gt; を使用して確認できます。</target>
        </trans-unit>
        <trans-unit id="66087a54aa582dff2f539d6f92ec2461ac3012fd" translate="yes" xml:space="preserve">
          <source>The default value for --window is 10 and --depth is 50. The maximum depth is 4095.</source>
          <target state="translated">windowのデフォルト値は10、--depthは50です。最大深度は4095です。</target>
        </trans-unit>
        <trans-unit id="90d3816cdd271ff4f563d74700f0c34c9ae7702c" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;$projectroot&lt;/code&gt; is &lt;code&gt;/pub/git&lt;/code&gt;. You can change it during building gitweb via &lt;code&gt;GITWEB_PROJECTROOT&lt;/code&gt; build configuration variable.</source>
          <target state="translated">&lt;code&gt;$projectroot&lt;/code&gt; のデフォルト値は &lt;code&gt;/pub/git&lt;/code&gt; です。 &lt;code&gt;GITWEB_PROJECTROOT&lt;/code&gt; ビルド構成変数を使用して、gitwebのビルド中に変更できます。</target>
        </trans-unit>
        <trans-unit id="78bcbc1a976cbafa1db494161487aec966c7436d" translate="yes" xml:space="preserve">
          <source>The default value is either &lt;code&gt;static/gitweb.js&lt;/code&gt;, or &lt;code&gt;static/gitweb.min.js&lt;/code&gt; if the &lt;code&gt;JSMIN&lt;/code&gt; build variable was defined, i.e. if JavaScript minifier was used at build time. &lt;strong&gt;Note&lt;/strong&gt; that this single file is generated from multiple individual JavaScript &quot;modules&quot;.</source>
          <target state="translated">&lt;code&gt;JSMIN&lt;/code&gt; ビルド変数が定義されている場合、つまりビルド時にJavaScriptミニファイアが使用されている場合、デフォルト値は &lt;code&gt;static/gitweb.js&lt;/code&gt; または &lt;code&gt;static/gitweb.min.js&lt;/code&gt; のいずれかです。この単一のファイルは、複数の個別のJavaScript「モジュール」から生成されることに&lt;strong&gt;注意し&lt;/strong&gt;て&lt;strong&gt;ください&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="88fcf9aad2af8490af6dabfabbb5732019a6c8e1" translate="yes" xml:space="preserve">
          <source>The default value of this variable is determined by the &lt;code&gt;GITWEB_LIST&lt;/code&gt; makefile variable at installation time. If this variable is empty, gitweb will fall back to scanning the &lt;code&gt;$projectroot&lt;/code&gt; directory for repositories.</source>
          <target state="translated">この変数のデフォルト値は、インストール時に &lt;code&gt;GITWEB_LIST&lt;/code&gt; makefile変数によって決定されます。この変数が空の場合、gitwebは &lt;code&gt;$projectroot&lt;/code&gt; projectroot ディレクトリのリポジトリのスキャンにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="da622b41696b803144c5254aad9443c84211d515" translate="yes" xml:space="preserve">
          <source>The default value of this variable is determined by the build-time configuration variable &lt;code&gt;GITWEB_PROJECT_MAXDEPTH&lt;/code&gt;, which defaults to 2007.</source>
          <target state="translated">この変数のデフォルト値は、ビルド時の構成変数 &lt;code&gt;GITWEB_PROJECT_MAXDEPTH&lt;/code&gt; によって決定されます。デフォルトは2007です。</target>
        </trans-unit>
        <trans-unit id="777a0a86855d35a436d0a0e990f3b787a636cb43" translate="yes" xml:space="preserve">
          <source>The defined extensions are:</source>
          <target state="translated">定義された拡張子は</target>
        </trans-unit>
        <trans-unit id="2309a4e043845fb6e7e786e69af3d5ed57221f3f" translate="yes" xml:space="preserve">
          <source>The definition of a diff driver is done in &lt;code&gt;gitconfig&lt;/code&gt;, not &lt;code&gt;gitattributes&lt;/code&gt; file, so strictly speaking this manual page is a wrong place to talk about it. However&amp;hellip;​</source>
          <target state="translated">差分ドライバの定義がで行われ &lt;code&gt;gitconfig&lt;/code&gt; ない、 &lt;code&gt;gitattributes&lt;/code&gt; ので、厳密には、このマニュアルページを言えば、ファイルは、それについての話に間違った場所です。しかし&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="05fbc211f0bbdc85a5cbba915fe02006f8119e9e" translate="yes" xml:space="preserve">
          <source>The definition of a merge driver is done in the &lt;code&gt;.git/config&lt;/code&gt; file, not in the &lt;code&gt;gitattributes&lt;/code&gt; file, so strictly speaking this manual page is a wrong place to talk about it. However&amp;hellip;​</source>
          <target state="translated">マージドライバーの定義は &lt;code&gt;gitattributes&lt;/code&gt; ファイルではなく &lt;code&gt;.git/config&lt;/code&gt; ファイルで行われるため、厳密に言えば、このマニュアルページはそれについて話すのに間違った場所です。しかし&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="096c7fcd9c9053c9edd8c72ca9c95b04e65c3409" translate="yes" xml:space="preserve">
          <source>The deletion removes the superproject&amp;rsquo;s tracking data, which are both the &lt;code&gt;gitlink&lt;/code&gt; entry and the section in the &lt;code&gt;.gitmodules&lt;/code&gt; file. The submodule&amp;rsquo;s working directory is removed from the file system, but the Git directory is kept around as it to make it possible to checkout past commits without requiring fetching from another repository.</source>
          <target state="translated">削除すると、スーパー &lt;code&gt;gitlink&lt;/code&gt; の追跡データが削除されます。これは、gitlinkエントリと &lt;code&gt;.gitmodules&lt;/code&gt; ファイルのセクションの両方です。サブモジュールの作業ディレクトリはファイルシステムから削除されますが、Gitディレクトリは別のリポジトリからフェッチすることなく過去のコミットをチェックアウトできるようにするために残されています。</target>
        </trans-unit>
        <trans-unit id="c4fe2a741691af413a8b078592b8e6a937844e84" translate="yes" xml:space="preserve">
          <source>The delta data is a sequence of instructions to reconstruct an object from the base object. If the base object is deltified, it must be converted to canonical form first. Each instruction appends more and more data to the target object until it&amp;rsquo;s complete. There are two supported instructions so far: one for copy a byte range from the source object and one for inserting new data embedded in the instruction itself.</source>
          <target state="translated">デルタデータは、ベースオブジェクトからオブジェクトを再構築するための一連の命令です。基本オブジェクトがデリート化されている場合は、最初に標準形式に変換する必要があります。各命令は、完了するまで、より多くのデータをターゲットオブジェクトに追加します。これまでにサポートされている命令は2つあります。1つはソースオブジェクトからバイト範囲をコピーするためのもので、もう1つは命令自体に埋め込まれた新しいデータを挿入するためのものです。</target>
        </trans-unit>
        <trans-unit id="892bc72de2972bd5305c51b8962327a3cfb2518f" translate="yes" xml:space="preserve">
          <source>The depth parameter used in the delta compression algorithm used by &lt;code&gt;git gc --aggressive&lt;/code&gt;. This defaults to 50, which is the default for the &lt;code&gt;--depth&lt;/code&gt; option when &lt;code&gt;--aggressive&lt;/code&gt; isn&amp;rsquo;t in use.</source>
          <target state="translated">&lt;code&gt;git gc --aggressive&lt;/code&gt; で使用されるデルタ圧縮アルゴリズムで使用される深度パラメーター。これはデフォルトで50です。これは、 &lt;code&gt;--aggressive&lt;/code&gt; が使用されていない場合の &lt;code&gt;--depth&lt;/code&gt; オプションのデフォルトです。</target>
        </trans-unit>
        <trans-unit id="71588492154c20723b86643e523c1d2b33771cc9" translate="yes" xml:space="preserve">
          <source>The design of fast-import allows it to import large projects in a minimum amount of memory usage and processing time. Assuming the frontend is able to keep up with fast-import and feed it a constant stream of data, import times for projects holding 10+ years of history and containing 100,000+ individual commits are generally completed in just 1-2 hours on quite modest (~$2,000 USD) hardware.</source>
          <target state="translated">fast-import の設計により、大規模なプロジェクトを最小限のメモリ使用量と処理時間でインポートすることができます。フロントエンドが fast-import に追いつき、一定のデータストリームを供給することができると仮定すると、10年以上の歴史を持ち、10万以上の個別のコミットを含むプロジェクトのインポート時間は、通常、非常に控えめな (~2,000ドル)ハードウェアでは、わずか1-2時間で完了します。</target>
        </trans-unit>
        <trans-unit id="c420d947d2d5939e423cde725977f1dbb1cf946b" translate="yes" xml:space="preserve">
          <source>The developer might want to rebase those commits to a newer &lt;code&gt;master&lt;/code&gt; while keeping the branch topology, for example when the first topic branch is expected to be integrated into &lt;code&gt;master&lt;/code&gt; much earlier than the second one, say, to resolve merge conflicts with changes to the DownloadButton class that made it into &lt;code&gt;master&lt;/code&gt;.</source>
          <target state="translated">開発者は、ブランチトポロジを維持しながら、これらのコミットを新しい &lt;code&gt;master&lt;/code&gt; にリベースしたい場合があります。たとえば、最初のトピックブランチが2番目のものよりはるかに早く &lt;code&gt;master&lt;/code&gt; に統合されることが予想される場合、たとえば、DownloadButtonへの変更によるマージの競合を解決します。それを &lt;code&gt;master&lt;/code&gt; にしたクラス。</target>
        </trans-unit>
        <trans-unit id="38adb1a4eb1052b4c27e8f4f4a52ae35ba0619ad" translate="yes" xml:space="preserve">
          <source>The diff above shows the differences between the working-tree version of file.txt and the stage 2 and stage 3 versions. So instead of preceding each line by a single &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;, it now uses two columns: the first column is used for differences between the first parent and the working directory copy, and the second for differences between the second parent and the working directory copy. (See the &quot;COMBINED DIFF FORMAT&quot; section of &lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files[1]&lt;/a&gt; for a details of the format.)</source>
          <target state="translated">上記の差分は、file.txtの作業ツリーバージョンとステージ2およびステージ3バージョンの違いを示しています。したがって、各行の前に単一の &lt;code&gt;+&lt;/code&gt; または &lt;code&gt;-&lt;/code&gt; を付ける代わりに、2つの列を使用します。最初の列は、最初の親と作業ディレクトリのコピーの違いに使用され、2番目の列は2番目の親と作業ディレクトリのコピーの違いに使用されます。 （フォーマットの詳細については、&lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files [1]&lt;/a&gt;の「COMBINED DIFF FORMAT」セクションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="330f16adb7b4cb162abae538c3471400c6f3dfa4" translate="yes" xml:space="preserve">
          <source>The diff commands &lt;code&gt;git diff-index&lt;/code&gt;, &lt;code&gt;git diff-files&lt;/code&gt;, and &lt;code&gt;git diff-tree&lt;/code&gt; can be told to manipulate differences they find in unconventional ways before showing &lt;code&gt;diff&lt;/code&gt; output. The manipulation is collectively called &quot;diffcore transformation&quot;. This short note describes what they are and how to use them to produce &lt;code&gt;diff&lt;/code&gt; output that is easier to understand than the conventional kind.</source>
          <target state="translated">diffコマンド &lt;code&gt;git diff-index&lt;/code&gt; 、 &lt;code&gt;git diff-files&lt;/code&gt; 、および &lt;code&gt;git diff-tree&lt;/code&gt; は、 &lt;code&gt;diff&lt;/code&gt; 出力を表示する前に、従来とは異なる方法で見つけた違いを操作するように指示できます。この操作を総称して「diffcore変換」と呼びます。この短いメモでは、それらの概要と、それらを使用して、従来の種類よりも理解しやすい &lt;code&gt;diff&lt;/code&gt; 出力を生成する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="4e50a3e21215031cd44c450ab91735643c2d6198" translate="yes" xml:space="preserve">
          <source>The diffcore mechanism is fed a list of such comparison results (each of which is called &quot;filepair&quot;, although at this point each of them talks about a single file), and transforms such a list into another list. There are currently 5 such transformations:</source>
          <target state="translated">diffcore メカニズムは、このような比較結果のリスト (それぞれを &quot;filepair&quot; と呼びますが、この時点ではそれぞれが単一のファイルについて話しています)を与えられ、そのようなリストを別のリストに変換します。現在、このような変換は5つあります。</target>
        </trans-unit>
        <trans-unit id="5ccc68add0025f283e287a514f59373a91910067" translate="yes" xml:space="preserve">
          <source>The directory holding the sha1 objects is missing.</source>
          <target state="translated">sha1 オブジェクトを格納しているディレクトリがありません。</target>
        </trans-unit>
        <trans-unit id="3e56ce3070b6d1fe8bc11b5262f83540c8411c39" translate="yes" xml:space="preserve">
          <source>The directory to find the quilt patches.</source>
          <target state="translated">キルトパッチを探すディレクトリ。</target>
        </trans-unit>
        <trans-unit id="0bb0f16c4fefb50922eb2b1990a8580cecff19f2" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is with:</source>
          <target state="translated">一番簡単なのはwithです。</target>
        </trans-unit>
        <trans-unit id="114ebd710b84299f5cb327f93e8be01e979eae23" translate="yes" xml:space="preserve">
          <source>The easy case</source>
          <target state="translated">簡単なケース</target>
        </trans-unit>
        <trans-unit id="ae6685a0ed898fdf61a802d261028cc9079a0958" translate="yes" xml:space="preserve">
          <source>The editor used to edit the commit log message will be chosen from the &lt;code&gt;GIT_EDITOR&lt;/code&gt; environment variable, the core.editor configuration variable, the &lt;code&gt;VISUAL&lt;/code&gt; environment variable, or the &lt;code&gt;EDITOR&lt;/code&gt; environment variable (in that order). See &lt;a href=&quot;git-var&quot;&gt;git-var[1]&lt;/a&gt; for details.</source>
          <target state="translated">コミットログメッセージの編集に使用されるエディターは、 &lt;code&gt;GIT_EDITOR&lt;/code&gt; 環境変数、core.editor構成変数、 &lt;code&gt;VISUAL&lt;/code&gt; 環境変数、または &lt;code&gt;EDITOR&lt;/code&gt; 環境変数（この順序で）から選択されます。詳細については、&lt;a href=&quot;git-var&quot;&gt;git-var [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0e4dbd523803a96213d55b1fc234d8888f00a89f" translate="yes" xml:space="preserve">
          <source>The effect of the &lt;code&gt;git add&lt;/code&gt; was to add one entry to the index file:</source>
          <target state="translated">&lt;code&gt;git add&lt;/code&gt; の効果は、インデックスファイルに1つのエントリを追加することでした。</target>
        </trans-unit>
        <trans-unit id="8c668b981ec948c02063906a293d8a4332dec951" translate="yes" xml:space="preserve">
          <source>The effect of this is best shown by way of comparing to &lt;code&gt;--full-history&lt;/code&gt; with parent rewriting. The example turns into:</source>
          <target state="translated">この効果は、親の書き換えを &lt;code&gt;--full-history&lt;/code&gt; と比較することで最もよく示されます。例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="f01b79da1b24a8459870505ceabc7acd5dc253cb" translate="yes" xml:space="preserve">
          <source>The effective value of &quot;core.notesRef&quot; (possibly overridden by GIT_NOTES_REF) is also implicitly added to the list of refs to be displayed.</source>
          <target state="translated">また、&quot;core.notesRef &quot;の有効な値(おそらくGIT_NOTES_REFでオーバーライドされる)は、暗黙のうちに表示されるリファレンスのリストに追加されています。</target>
        </trans-unit>
        <trans-unit id="47170c140110158e7cecc3842f11a773c4cf2ae7" translate="yes" xml:space="preserve">
          <source>The effects of this are mostly persistent, e.g. when packs and loose objects are coalesced into one another pack the existing deltas in that pack might get re-used, but there are also various cases where we might pick a sub-optimal delta from a newer pack instead.</source>
          <target state="translated">例えば、パックとルーズオブジェクトを別のパックに合体させると、そのパックの既存のデルタが再利用されるかもしれませんが、代わりに新しいパックの中から最適でないデルタを選択する場合もあります。</target>
        </trans-unit>
        <trans-unit id="e05ce4cdee1f111bdf6e1a5c14e6220d9920c4e2" translate="yes" xml:space="preserve">
          <source>The equivalence test is based on the diff, after removing whitespace and line numbers. git-cherry therefore detects when commits have been &quot;copied&quot; by means of &lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick[1]&lt;/a&gt;, &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt; or &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;.</source>
          <target state="translated">等価性テストは、空白と行番号を削除した後のdiffに基づいています。したがって、git-cherryは、コミットが&lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick [1]&lt;/a&gt;、&lt;a href=&quot;git-am&quot;&gt;git-am [1]、&lt;/a&gt;または&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;によって「コピー」されたことを検出します。</target>
        </trans-unit>
        <trans-unit id="1c5c570f3616a5224dd6e91327ceb211453e9ddc" translate="yes" xml:space="preserve">
          <source>The error event may be emitted more than once. The format string allows post-processors to group errors by type without worrying about specific error arguments.</source>
          <target state="translated">エラーイベントは、複数回放出される可能性があります。このフォーマット文字列は、ポストプロセッサが特定のエラー引数を気にすることなく、エラーをタイプ別にグループ化することを可能にします。</target>
        </trans-unit>
        <trans-unit id="2c5c3dbbaebe5825bdfa9c22deed2d10f337e86e" translate="yes" xml:space="preserve">
          <source>The event format target is a JSON-based format of event data suitable for telemetry analysis. This format is enabled with the &lt;code&gt;GIT_TRACE2_EVENT&lt;/code&gt; environment variable or the &lt;code&gt;trace2.eventTarget&lt;/code&gt; system or global config setting.</source>
          <target state="translated">イベント形式のターゲットは、テレメトリ分析に適したJSONベースのイベントデータ形式です。このフォーマットは、 &lt;code&gt;GIT_TRACE2_EVENT&lt;/code&gt; 環境変数または &lt;code&gt;trace2.eventTarget&lt;/code&gt; システムまたはグローバル構成設定で有効になります。</target>
        </trans-unit>
        <trans-unit id="bb53cc945a6f48ddfeb31dcd9983e9640d488cf9" translate="yes" xml:space="preserve">
          <source>The ever-versatile &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt; command can also be used to examine tree objects, but &lt;a href=&quot;git-ls-tree&quot;&gt;git-ls-tree[1]&lt;/a&gt; will give you more details:</source>
          <target state="translated">汎用性の高い&lt;a href=&quot;git-show&quot;&gt;git-show [1]&lt;/a&gt;コマンドを使用してツリーオブジェクトを調べることもできますが、&lt;a href=&quot;git-ls-tree&quot;&gt;git-ls-tree [1]で&lt;/a&gt;詳細を確認できます。</target>
        </trans-unit>
        <trans-unit id="2cae5c144ae6a6f552f7dcee7bbaf0209258a3bd" translate="yes" xml:space="preserve">
          <source>The example configuration presented here is guaranteed to be backwards and forward compatible.</source>
          <target state="translated">ここで紹介する構成例は、前後互換性が保証されています。</target>
        </trans-unit>
        <trans-unit id="77578078110fe9093d1036dd58aeebc2db7df1b8" translate="yes" xml:space="preserve">
          <source>The exit code from this hook invocation is ignored, however a non-zero exit code will generate an error message.</source>
          <target state="translated">このフック呼び出しの終了コードは無視されますが、0 以外の終了コードはエラーメッセージを生成します。</target>
        </trans-unit>
        <trans-unit id="1e405cb397afa437170eea29059b03dcf97426f6" translate="yes" xml:space="preserve">
          <source>The exit code from this hook invocation is ignored; the only thing left for &lt;code&gt;git-receive-pack&lt;/code&gt; to do at that point is to exit itself anyway.</source>
          <target state="translated">このフック呼び出しからの終了コードは無視されます。その時点で &lt;code&gt;git-receive-pack&lt;/code&gt; に残された唯一のことは、とにかくそれ自体を終了することです。</target>
        </trans-unit>
        <trans-unit id="5a81c04e486b5c66b0be7554a6e91773cfd1a9a9" translate="yes" xml:space="preserve">
          <source>The exit status determines whether git will use the data from the hook to limit its search. On error, it will fall back to verifying all files and folders.</source>
          <target state="translated">exit status は、git がフックのデータを使って検索を制限するかどうかを決定します。エラーの場合は、すべてのファイルやフォルダの検証に戻ります。</target>
        </trans-unit>
        <trans-unit id="863cf74b97781c15eaa4bf39c81be105821817bd" translate="yes" xml:space="preserve">
          <source>The exit value of this program is negative on error, and the number of conflicts otherwise (truncated to 127 if there are more than that many conflicts). If the merge was clean, the exit value is 0.</source>
          <target state="translated">このプログラムの終了値は、エラーの場合は負の値、それ以外の場合はコンフリクトの数を表します (コンフリクトがそれ以上ある場合は 127 に切り捨てられます)。マージがクリーンな場合、終了値は 0 です。</target>
        </trans-unit>
        <trans-unit id="600e0ed5040d09634bf101b6adc431e3349d2258" translate="yes" xml:space="preserve">
          <source>The expected use case of this is to write supporting explanation for the commit that does not belong to the commit log message proper, and include it with the patch submission. While one can simply write these explanations after &lt;code&gt;format-patch&lt;/code&gt; has run but before sending, keeping them as Git notes allows them to be maintained between versions of the patch series (but see the discussion of the &lt;code&gt;notes.rewrite&lt;/code&gt; configuration options in &lt;a href=&quot;git-notes&quot;&gt;git-notes[1]&lt;/a&gt; to use this workflow).</source>
          <target state="translated">これの予想される使用例は、適切なコミットログメッセージに属さないコミットのサポート説明を記述し、パッチサブミッションに含めることです。一つは、単に後にこれらの説明を書くことができますが &lt;code&gt;format-patch&lt;/code&gt; 実行しているが、送信Gitのノートとして、それらを維持する前に、パッチシリーズのバージョン間で維持することができます（ただし、の議論を参照 &lt;code&gt;notes.rewrite&lt;/code&gt; に設定オプションを&lt;a href=&quot;git-notes&quot;&gt;[gitの-ノート1]&lt;/a&gt;このワークフローを使用します）。</target>
        </trans-unit>
        <trans-unit id="7c7921a0c6ea4cec42a427f589011997d35e15f9" translate="yes" xml:space="preserve">
          <source>The external command can optionally write a single line to its standard output to be sent to the requestor as an error message when it declines the service.</source>
          <target state="translated">外部コマンドは、サービスを拒否するときにエラーメッセージとしてリクエスト側に送信されるように、標準出力に1行書くことができます。</target>
        </trans-unit>
        <trans-unit id="34c4f9db557882c9df4177a31e00a543de8934c9" translate="yes" xml:space="preserve">
          <source>The extra &lt;code&gt;NUL&lt;/code&gt; before the preimage path in renamed case is to allow scripts that read the output to tell if the current record being read is a single-path record or a rename/copy record without reading ahead. After reading added and deleted lines, reading up to &lt;code&gt;NUL&lt;/code&gt; would yield the pathname, but if that is &lt;code&gt;NUL&lt;/code&gt;, the record will show two paths.</source>
          <target state="translated">名前が変更された場合のプリイメージパスの前の追加の &lt;code&gt;NUL&lt;/code&gt; は、出力を読み取るスクリプトが、読み取られている現在のレコードが単一パスレコードであるか、先読みせずに名前変更/コピーレコードであるかを通知できるようにするためです。追加および削除された行を読み取った後、 &lt;code&gt;NUL&lt;/code&gt; まで読み取るとパス名が生成されますが、それが &lt;code&gt;NUL&lt;/code&gt; の場合、レコードには2つのパスが表示されます。</target>
        </trans-unit>
        <trans-unit id="1b54438722ed3844a0702f9ed09c56d6aef28ee2" translate="yes" xml:space="preserve">
          <source>The fast-import backend itself can import into an empty repository (one that has already been initialized by &lt;code&gt;git init&lt;/code&gt;) or incrementally update an existing populated repository. Whether or not incremental imports are supported from a particular foreign source depends on the frontend program in use.</source>
          <target state="translated">高速インポートバックエンド自体は、空のリポジトリ（すでに &lt;code&gt;git init&lt;/code&gt; によって初期化されているもの）にインポートするか、既存の設定済みリポジトリを段階的に更新できます。特定の外部ソースからの増分インポートがサポートされているかどうかは、使用しているフロントエンドプログラムによって異なります。</target>
        </trans-unit>
        <trans-unit id="3dfacf796b68e98a60c628fed43445479dc82ce1" translate="yes" xml:space="preserve">
          <source>The fast-import mechanism used by &lt;code&gt;git p4&lt;/code&gt; creates one pack file for each invocation of &lt;code&gt;git p4 sync&lt;/code&gt;. Normally, Git garbage compression (&lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;) automatically compresses these to fewer pack files, but explicit invocation of &lt;code&gt;git repack -adf&lt;/code&gt; may improve performance.</source>
          <target state="translated">&lt;code&gt;git p4&lt;/code&gt; で使用される高速インポートメカニズムは、 &lt;code&gt;git p4 sync&lt;/code&gt; の呼び出しごとに1つのパックファイルを作成します。通常、Gitガーベッジ圧縮（&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]&lt;/a&gt;）はこれらを自動的に圧縮してパックファイルを減らしますが、 &lt;code&gt;git repack -adf&lt;/code&gt; を明示的に呼び出すとパフォーマンスが向上する場合があります。</target>
        </trans-unit>
        <trans-unit id="53e903dc94674f5b365dd31d16a6c2e334c714e3" translate="yes" xml:space="preserve">
          <source>The fetch and push protocols are not designed to prevent one side from stealing data from the other repository that was not intended to be shared. If you have private data that you need to protect from a malicious peer, your best option is to store it in another repository. This applies to both clients and servers. In particular, namespaces on a server are not effective for read access control; you should only grant read access to a namespace to clients that you would trust with read access to the entire repository.</source>
          <target state="translated">フェッチとプッシュのプロトコルは、一方の側が共有することを意図していない他方のリポジトリからデータを盗むことを防ぐために設計されたものではありません。悪意のあるピアから保護する必要のあるプライベートデータがある場合、最善の選択肢は別のリポジトリに保存することです。これはクライアントとサーバの両方に当てはまります。特に、サーバー上のネームスペースは読み取りアクセス制御には効果的ではありません。リポジトリ全体への読み取りアクセスを信頼できるクライアントにのみ、ネームスペースへの読み取りアクセスを許可すべきです。</target>
        </trans-unit>
        <trans-unit id="648bf821f46e9909499e1fbac0dd96a1ab871eb7" translate="yes" xml:space="preserve">
          <source>The fields (including the &lt;code&gt;-&amp;gt;&lt;/code&gt;) are separated from each other by a single space. If a filename contains whitespace or other nonprintable characters, that field will be quoted in the manner of a C string literal: surrounded by ASCII double quote (34) characters, and with interior special characters backslash-escaped.</source>
          <target state="translated">フィールド（ &lt;code&gt;-&amp;gt;&lt;/code&gt; を含む）は、単一のスペースで互いに分離されています。ファイル名に空白またはその他の印刷不可能な文字が含まれている場合、そのフィールドはC文字列リテラルのように引用符で囲まれます。ASCII二重引用符（34）文字で囲まれ、内部の特殊文字はバックスラッシュでエスケープされます。</target>
        </trans-unit>
        <trans-unit id="3994e582754827987cb1dab035b29a73b90c4b3e" translate="yes" xml:space="preserve">
          <source>The file consists of sections and variables. A section begins with the name of the section in square brackets and continues until the next section begins. Section names are case-insensitive. Only alphanumeric characters, &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; are allowed in section names. Each variable must belong to some section, which means that there must be a section header before the first setting of a variable.</source>
          <target state="translated">ファイルはセクションと変数で構成されています。セクションは角括弧で囲まれたセクション名で始まり、次のセクションが始まるまで続きます。セクション名は大文字と小文字を区別しません。英数字のみ &lt;code&gt;-&lt;/code&gt; および &lt;code&gt;.&lt;/code&gt; セクション名で使用できます。各変数はいくつかのセクションに属している必要があります。つまり、変数の最初の設定の前にセクションヘッダーが必要です。</target>
        </trans-unit>
        <trans-unit id="b77694751b662ffffe51a33dc2cd7f9b8be897f4" translate="yes" xml:space="preserve">
          <source>The file contains one subsection per submodule, and the subsection value is the name of the submodule. The name is set to the path where the submodule has been added unless it was customized with the &lt;code&gt;--name&lt;/code&gt; option of &lt;code&gt;git submodule add&lt;/code&gt;. Each submodule section also contains the following required keys:</source>
          <target state="translated">ファイルにはサブモジュールごとに1つのサブセクションが含まれ、サブセクションの値はサブモジュールの名前です。 &lt;code&gt;git submodule add&lt;/code&gt; の &lt;code&gt;--name&lt;/code&gt; オプションでカスタマイズされていない限り、名前はサブモジュールが追加されたパスに設定されます。各サブモジュールセクションには、次の必須キーも含まれています。</target>
        </trans-unit>
        <trans-unit id="d7d8ebbce919f993c68a8bac80b9fbb16d92024e" translate="yes" xml:space="preserve">
          <source>The file format includes parameters for the object ID hash function, so a future change of hash algorithm does not require a change in format.</source>
          <target state="translated">ファイル形式にはオブジェクトIDハッシュ関数のパラメータが含まれているため、将来的にハッシュアルゴリズムを変更しても形式を変更する必要はありません。</target>
        </trans-unit>
        <trans-unit id="1bb6e340dc566db02505e0c4003761a9d85c40c1" translate="yes" xml:space="preserve">
          <source>The file is concluded with a trailer:</source>
          <target state="translated">ファイルは予告編で締めくくられています。</target>
        </trans-unit>
        <trans-unit id="996f5fbcdb16f7d7ee85c3a6ae77d46a1781884a" translate="yes" xml:space="preserve">
          <source>The file parameters can point at the user&amp;rsquo;s working file (e.g. &lt;code&gt;new-file&lt;/code&gt; in &quot;git-diff-files&quot;), &lt;code&gt;/dev/null&lt;/code&gt; (e.g. &lt;code&gt;old-file&lt;/code&gt; when a new file is added), or a temporary file (e.g. &lt;code&gt;old-file&lt;/code&gt; in the index). &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; should not worry about unlinking the temporary file --- it is removed when &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; exits.</source>
          <target state="translated">ファイルパラメータは、ユーザーの作業ファイル（たとえば、「git-diff-files」の &lt;code&gt;new-file&lt;/code&gt; ）、 &lt;code&gt;/dev/null&lt;/code&gt; （たとえば、新しいファイルが追加されたときの &lt;code&gt;old-file&lt;/code&gt; ）、または一時ファイル（たとえば、 &lt;code&gt;old-file&lt;/code&gt; インデックス内のファイル）。 &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; は、一時ファイルのリンク解除について心配する必要はありません--- &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; が終了すると削除されます。</target>
        </trans-unit>
        <trans-unit id="b979e5d416845ad4db7c29ab613bf67d05d7d448" translate="yes" xml:space="preserve">
          <source>The files are read in the order given above, with last value found taking precedence over values read earlier. When multiple values are taken then all values of a key from all files will be used.</source>
          <target state="translated">ファイルは上記の順序で読み込まれ、最後に見つかった値が以前に読み込まれた値よりも優先されます。複数の値を取得した場合は、すべてのファイルからキーのすべての値が使用されます。</target>
        </trans-unit>
        <trans-unit id="22cd650e22be9431ebec70f16e27f0954b25a243" translate="yes" xml:space="preserve">
          <source>The files to read the patch from. &lt;code&gt;-&lt;/code&gt; can be used to read from the standard input.</source>
          <target state="translated">パッチを読み取るファイル。 &lt;code&gt;-&lt;/code&gt; 標準入力から読み取るために使用できます。</target>
        </trans-unit>
        <trans-unit id="fc839d554b73db3187cb52551b31c221d5647965" translate="yes" xml:space="preserve">
          <source>The filter is expected to respond with a list of &quot;key=value&quot; pairs terminated with a flush packet. If the filter does not experience problems then the list must contain a &quot;success&quot; status. Right after these packets the filter is expected to send the content in zero or more pkt-line packets and a flush packet at the end. Finally, a second list of &quot;key=value&quot; pairs terminated with a flush packet is expected. The filter can change the status in the second list or keep the status as is with an empty list. Please note that the empty list must be terminated with a flush packet regardless.</source>
          <target state="translated">フィルタはフラッシュパケットで終わる &quot;key=value&quot; ペアのリストで応答することが期待されます。もしフィルタに問題がなければ、リストには &quot;success&quot; ステータスが含まれていなければなりません。これらのパケットの直後に、フィルタは 0 個以上の pkt-line パケットで内容を送り、最後にフラッシュパケットを送ることが期待されます。最後に、フラッシュパケットで終わる &quot;key=value&quot; ペアの二番目のリストが期待されます。フィルタは 2 番目のリストの状態を変更したり、 空のリストで状態を維持したりすることができます。空のリストは、どのような場合でもフラッシュパケットで終了しなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="48c7b9e769ad1a8ac7a03d8a91befba4e1dc75d4" translate="yes" xml:space="preserve">
          <source>The filter that will be applied when fetching from this promisor remote.</source>
          <target state="translated">このプロミスリモートからの取得時に適用されるフィルタ。</target>
        </trans-unit>
        <trans-unit id="67e1cbcd0bc26ca591869ec55e18981d4a05f31d" translate="yes" xml:space="preserve">
          <source>The filters are applied in the order as listed below. The &amp;lt;command&amp;gt; argument is always evaluated in the shell context using the &lt;code&gt;eval&lt;/code&gt; command (with the notable exception of the commit filter, for technical reasons). Prior to that, the &lt;code&gt;$GIT_COMMIT&lt;/code&gt; environment variable will be set to contain the id of the commit being rewritten. Also, GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL, and GIT_COMMITTER_DATE are taken from the current commit and exported to the environment, in order to affect the author and committer identities of the replacement commit created by &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt; after the filters have run.</source>
          <target state="translated">フィルターは、以下にリストされている順序で適用されます。 &amp;lt;command&amp;gt;引数は、常に &lt;code&gt;eval&lt;/code&gt; コマンドを使用してシェルコンテキストで評価されます（技術的な理由から、コミットフィルターの注目すべき例外を除きます）。その前に、 &lt;code&gt;$GIT_COMMIT&lt;/code&gt; 環境変数は、書き換えられるコミットのIDを含むように設定されます。また、GIT_AUTHOR_NAME、GIT_AUTHOR_EMAIL、GIT_AUTHOR_DATE、GIT_COMMITTER_NAME、GIT_COMMITTER_EMAIL、およびGIT_COMMITTER_DATEは、現在からコミット取られ、環境にエクスポート、交換の作者とコミッタのアイデンティティに影響を与えるためにによって作成されたコミットされている&lt;a href=&quot;git-commit-tree&quot;&gt;gitのコミットツリー[1]&lt;/a&gt;後フィルターが実行されました。</target>
        </trans-unit>
        <trans-unit id="96e6a8e11c595c66ed126e7ed94498b41b8ef74c" translate="yes" xml:space="preserve">
          <source>The final &quot;/&quot; is important. The exported name is literally just prefixed with the specified string. Contrast this with the following example.</source>
          <target state="translated">最後の「/」は重要です。エクスポートされた名前は文字通り、指定された文字列の前に付けられているだけです。これを次の例と対比してみましょう。</target>
        </trans-unit>
        <trans-unit id="5e71083855686454b686d549c1aa754044d9c24f" translate="yes" xml:space="preserve">
          <source>The final result will be a series of commits, one for each patch in the original mailbox, with authorship and commit log message each taken from the message containing each patch.</source>
          <target state="translated">最終的な結果は、元のメールボックスにある各パッチごとにコミットが行われ、それぞれのパッチを含むメッセージから作者とコミットログメッセージが取得されます。</target>
        </trans-unit>
        <trans-unit id="d06dc79919ba8d7d4e32bae22586b9e61ea6ab90" translate="yes" xml:space="preserve">
          <source>The first &quot;git bisect&quot; subcommand to use is &quot;git bisect start&quot; to start the search. Then bounds must be set to limit the commit space. This is done usually by giving one &quot;bad&quot; and at least one &quot;good&quot; commit. They can be passed in the initial call to &quot;git bisect start&quot; like this:</source>
          <target state="translated">最初に使う &quot;git bisect &quot;サブコマンドは &quot;git bisect start &quot;で検索を開始します。次に、コミットスペースを制限するために境界線を設定しなければなりません。これは通常 &quot;bad&quot; コミットと &quot;good&quot; コミットを少なくともひとつずつ与えることで行われます。これらは、&quot;git bisect start&quot; の最初のコールで次のように渡すことができます。</target>
        </trans-unit>
        <trans-unit id="3dd96cc8c67fe6f3794e1faadfc16d4e75778490" translate="yes" xml:space="preserve">
          <source>The first argument, &lt;code&gt;origin&lt;/code&gt;, just tells Git to fetch from the repository you originally cloned from. The second argument tells Git to fetch the branch named &lt;code&gt;todo&lt;/code&gt; from the remote repository, and to store it locally under the name &lt;code&gt;refs/heads/my-todo-work&lt;/code&gt;.</source>
          <target state="translated">最初の引数 &lt;code&gt;origin&lt;/code&gt; は、最初にクローンを作成したリポジトリからフェッチするようにGitに指示するだけです。2番目の引数は、リモートリポジトリから &lt;code&gt;todo&lt;/code&gt; という名前のブランチをフェッチし、 &lt;code&gt;refs/heads/my-todo-work&lt;/code&gt; という名前でローカルに保存するようにGitに指示します。</target>
        </trans-unit>
        <trans-unit id="81bbac8df429c9294b949507806676c0327c9227" translate="yes" xml:space="preserve">
          <source>The first character given by this option will be the default character used when another separator is not specified in the config for this trailer.</source>
          <target state="translated">このオプションで与えられた最初の文字は、このトレイラーの設定で他の区切り文字が指定されていない場合に使用されるデフォルトの文字となります。</target>
        </trans-unit>
        <trans-unit id="39b9ae2f52daae0742c9cd959c54a342268035c6" translate="yes" xml:space="preserve">
          <source>The first command fetches the &lt;code&gt;maint&lt;/code&gt; branch from the repository at &lt;code&gt;git://git.kernel.org/pub/scm/git/git.git&lt;/code&gt; and the second command uses &lt;code&gt;FETCH_HEAD&lt;/code&gt; to examine the branch with &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;. The fetched objects will eventually be removed by git&amp;rsquo;s built-in housekeeping (see &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;).</source>
          <target state="translated">最初のコマンドは &lt;code&gt;git://git.kernel.org/pub/scm/git/git.git&lt;/code&gt; のリポジトリから &lt;code&gt;maint&lt;/code&gt; ブランチをフェッチし、2番目のコマンドは &lt;code&gt;FETCH_HEAD&lt;/code&gt; を使用して&lt;a href=&quot;git-log&quot;&gt;git-log [1]で&lt;/a&gt;ブランチを調べます。フェッチされたオブジェクトは、最終的にgitの組み込みのハウスキーピングによって削除されます（&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="fc54aa6f7f46c36afb224191ab9ce02506aa2fd9" translate="yes" xml:space="preserve">
          <source>The first defense against such problems is backups. You can back up a Git directory using clone, or just using cp, tar, or any other backup mechanism.</source>
          <target state="translated">このような問題に対する最初の防御策はバックアップです。cloneを使ってGitディレクトリをバックアップしたり、cpやtarなどのバックアップ機構を使ってバックアップしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="eb17679ed2c14d3eecb0f1bd83c98beea1f4bea4" translate="yes" xml:space="preserve">
          <source>The first format is what gets used when &lt;code&gt;--stage&lt;/code&gt; is omitted or is not &lt;code&gt;--stage=all&lt;/code&gt;. The field tempname is the temporary file name holding the file content and path is the tracked path name in the index. Only the requested entries are output.</source>
          <target state="translated">最初の形式は、-- &lt;code&gt;--stage&lt;/code&gt; が省略されているか、-- &lt;code&gt;--stage=all&lt;/code&gt; ない場合に使用される形式です。tempnameフィールドはファイルの内容を保持する一時ファイル名で、pathはインデックス内の追跡されたパス名です。要求されたエントリのみが出力されます。</target>
        </trans-unit>
        <trans-unit id="e7e26fcb00a95d796be86027e9776fd349443123" translate="yes" xml:space="preserve">
          <source>The first is simple and appropriate if you do not have secure storage available for a password. It is generally configured by adding this to your config:</source>
          <target state="translated">最初のものはシンプルで、パスワードのために利用可能なセキュアなストレージがない場合には適切です。これは一般的には設定にこれを追加することで設定されます。</target>
        </trans-unit>
        <trans-unit id="561e4f0c34cc864db97b2078e570c6b7cf2ee83d" translate="yes" xml:space="preserve">
          <source>The first line of the input feeds 0 as the mode to remove the path; the SHA-1 does not matter as long as it is well formatted. Then the second and third line feeds stage 1 and stage 2 entries for that path. After the above, we would end up with this:</source>
          <target state="translated">入力の最初の行は、パスを削除するモードとして 0 をフィードします。そして2行目と3行目には、そのパスのステージ1とステージ2のエントリが入力されます。以上のようにすると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="d7a467221d570ce5d2e2454d168c252049fa7e64" translate="yes" xml:space="preserve">
          <source>The first number is the number of objects which are kept in individual files. The second is the amount of space taken up by those &quot;loose&quot; objects.</source>
          <target state="translated">最初の数字は、個々のファイルに保存されているオブジェクトの数です。2 番目は、それらの「ゆるい」オブジェクトによって占有されるスペースの量です。</target>
        </trans-unit>
        <trans-unit id="1517f019c895db91a3158888218e464c0e667ed4" translate="yes" xml:space="preserve">
          <source>The first parameter passed to the hook is the indicator for the working directory being updated. &quot;1&quot; meaning working directory was updated or &quot;0&quot; when the working directory was not updated.</source>
          <target state="translated">フックに渡される最初のパラメータは、作業ディレクトリが更新されたかどうかの指標です。&quot;1&quot; は作業ディレクトリが更新されたことを意味し、&quot;0&quot; は作業ディレクトリが更新されなかったことを意味します。</target>
        </trans-unit>
        <trans-unit id="69f4b05a4b19ebccc10062a19a78b72d37ff6b60" translate="yes" xml:space="preserve">
          <source>The first rule takes precedence in the case of a single &amp;lt;commit&amp;gt;. To apply the second rule, i.e., format everything since the beginning of history up until &amp;lt;commit&amp;gt;, use the &lt;code&gt;--root&lt;/code&gt; option: &lt;code&gt;git format-patch
--root &amp;lt;commit&amp;gt;&lt;/code&gt;. If you want to format only &amp;lt;commit&amp;gt; itself, you can do this with &lt;code&gt;git format-patch -1 &amp;lt;commit&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">1つの&amp;lt;commit&amp;gt;の場合、最初のルールが優先されます。2番目のルールを適用するには、つまり、履歴の最初から&amp;lt;commit&amp;gt;までのすべてをフォーマットするには、-- &lt;code&gt;--root&lt;/code&gt; オプションを使用します： &lt;code&gt;git format-patch --root &amp;lt;commit&amp;gt;&lt;/code&gt; 。&amp;lt;commit&amp;gt;のみをフォーマットする場合は、 &lt;code&gt;git format-patch -1 &amp;lt;commit&amp;gt;&lt;/code&gt; を使用してこれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="088dfc95ab36375e45956a12e0a84d20b54cd1e3" translate="yes" xml:space="preserve">
          <source>The first step is trivial: when you want to tell Git about any changes to your working tree, you use the &lt;code&gt;git update-index&lt;/code&gt; program. That program normally just takes a list of filenames you want to update, but to avoid trivial mistakes, it refuses to add new entries to the index (or remove existing ones) unless you explicitly tell it that you&amp;rsquo;re adding a new entry with the &lt;code&gt;--add&lt;/code&gt; flag (or removing an entry with the &lt;code&gt;--remove&lt;/code&gt;) flag.</source>
          <target state="translated">最初のステップは簡単です。作業ツリーの変更についてGitに伝えたい場合は、 &lt;code&gt;git update-index&lt;/code&gt; プログラムを使用します。そのプログラムは通常、更新するファイル名のリストを取得しますが、些細な間違いを避けるために、新しいエントリを追加することを明示的に指定しない限り、インデックスへの新しいエントリの追加（または既存のエントリの削除）を拒否します。 &lt;code&gt;--add&lt;/code&gt; フラグ（または &lt;code&gt;--remove&lt;/code&gt; を使用してエントリを削除）フラグ。</target>
        </trans-unit>
        <trans-unit id="a1763915dd6826ebefd6dfcb3fd9fb79e61ff2f7" translate="yes" xml:space="preserve">
          <source>The first time that a commit shows up in the stream, it has various other information about it printed out with a one-word tag at the beginning of each line describing the extra commit information (author, email, committer, dates, summary, etc.).</source>
          <target state="translated">コミットが最初にストリームに表示されたときには、そのコミットに関するさまざまな情報が印刷され、各行の先頭には、追加のコミット情報 (作者、メールアドレス、コミット者、日付、サマリーなど)を記述したワンワードのタグが付けられます。</target>
        </trans-unit>
        <trans-unit id="33e2d00ff1c333999b37d340bc5ae3e8a3bfd826" translate="yes" xml:space="preserve">
          <source>The first time you run it, you will be prompted for your credentials. Enter the app-specific or your regular password as appropriate. If you have credential helper configured (see &lt;a href=&quot;git-credential&quot;&gt;git-credential[1]&lt;/a&gt;), the password will be saved in the credential store so you won&amp;rsquo;t have to type it the next time.</source>
          <target state="translated">初めて実行すると、資格情報の入力を求められます。必要に応じて、アプリ固有のパスワードまたは通常のパスワードを入力します。資格情報ヘルパーを構成している場合（&lt;a href=&quot;git-credential&quot;&gt;git-credential [1]を&lt;/a&gt;参照）、パスワードは資格情報ストアに保存されるため、次回入力する必要はありません。</target>
        </trans-unit>
        <trans-unit id="1c77b9db9c00c5ba7e83e0fb24758e48237c23ee" translate="yes" xml:space="preserve">
          <source>The first two lines indicate that it is showing the two branches with the titles of their top-of-the-tree commits, you are currently on &lt;code&gt;master&lt;/code&gt; branch (notice the asterisk &lt;code&gt;*&lt;/code&gt; character), and the first column for the later output lines is used to show commits contained in the &lt;code&gt;master&lt;/code&gt; branch, and the second column for the &lt;code&gt;mybranch&lt;/code&gt; branch. Three commits are shown along with their titles. All of them have non blank characters in the first column (&lt;code&gt;*&lt;/code&gt; shows an ordinary commit on the current branch, &lt;code&gt;-&lt;/code&gt; is a merge commit), which means they are now part of the &lt;code&gt;master&lt;/code&gt; branch. Only the &quot;Some work&quot; commit has the plus &lt;code&gt;+&lt;/code&gt; character in the second column, because &lt;code&gt;mybranch&lt;/code&gt; has not been merged to incorporate these commits from the master branch. The string inside brackets before the commit log message is a short name you can use to name the commit. In the above example, &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;mybranch&lt;/code&gt; are branch heads. &lt;code&gt;master^&lt;/code&gt; is the first parent of &lt;code&gt;master&lt;/code&gt; branch head. Please see &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; if you want to see more complex cases.</source>
          <target state="translated">最初の2行は、ツリーの最上位のコミットのタイトルが付いた2つのブランチが表示されており、現在 &lt;code&gt;master&lt;/code&gt; ブランチ（アスタリスク &lt;code&gt;*&lt;/code&gt; 文字に注意）にあり、以降の出力行の最初の列が &lt;code&gt;master&lt;/code&gt; ブランチに含まれるコミットと、 &lt;code&gt;mybranch&lt;/code&gt; ブランチの2列目を表示するために使用されます。 3つのコミットとそのタイトルが表示されます。それらすべての最初の列に空白以外の文字が含まれています（ &lt;code&gt;*&lt;/code&gt; は現在のブランチでの通常のコミットを示し、 &lt;code&gt;-&lt;/code&gt; マージコミットです）。つまり、これらは現在 &lt;code&gt;master&lt;/code&gt; ブランチの一部です。 「一部の作業」のコミットのみにプラス &lt;code&gt;+&lt;/code&gt; &lt;code&gt;mybranch&lt;/code&gt; は、masterブランチからのこれらのコミットを組み込むためにマージされていないため、2番目の列の文字。コミットログメッセージの前の括弧内の文字列は、コミットに名前を付けるために使用できる短い名前です。上記の例では、 &lt;code&gt;master&lt;/code&gt; と &lt;code&gt;mybranch&lt;/code&gt; はブランチヘッドです。 &lt;code&gt;master^&lt;/code&gt; は &lt;code&gt;master&lt;/code&gt; ブランチヘッドの最初の親です。より複雑なケースを見たい場合は、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="6b2c923c8cb34a6329089d3ed63e2b76d6f7ceed" translate="yes" xml:space="preserve">
          <source>The folder to drop the mails into, which is typically the Drafts folder. For example: &quot;INBOX.Drafts&quot;, &quot;INBOX/Drafts&quot; or &quot;[Gmail]/Drafts&quot;. Required.</source>
          <target state="translated">メールをドロップするフォルダ、通常は Drafts フォルダです。例:&quot;INBOX.Drafts&quot;、&quot;INBOX/Drafts&quot;、または&quot;[Gmail]/Drafts&quot;。&quot;INBOX.Drafts&quot;、&quot;INBOX/Drafts&quot;、または&quot;[Gmail]/Drafts&quot;。必須。</target>
        </trans-unit>
        <trans-unit id="396ef1fe12b6dc07f4e5a4f66f87333df9fb56e3" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;update&lt;/code&gt; procedures are only available via the &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; configuration variable:</source>
          <target state="translated">以下の &lt;code&gt;update&lt;/code&gt; 手順は、 &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; 構成変数を介してのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="109e44e80a38f6553ddae4455bbabc5ec0d98180" translate="yes" xml:space="preserve">
          <source>The following Thunderbird extensions are needed: AboutConfig from &lt;a href=&quot;http://aboutconfig.mozdev.org/&quot;&gt;http://aboutconfig.mozdev.org/&lt;/a&gt; and External Editor from &lt;a href=&quot;http://globs.org/articles.php?lng=en&amp;amp;pg=8&quot;&gt;http://globs.org/articles.php?lng=en&amp;amp;pg=8&lt;/a&gt;</source>
          <target state="translated">次のThunderbird拡張機能が必要です：&lt;a href=&quot;http://aboutconfig.mozdev.org/&quot;&gt;http&lt;/a&gt; ://aboutconfig.mozdev.org/のAboutConfig および&lt;a href=&quot;http://globs.org/articles.php?lng=en&amp;amp;pg=8&quot;&gt;http://globs.org/articles.php?lng=en&amp;amp;pg=8の&lt;/a&gt; External Editor</target>
        </trans-unit>
        <trans-unit id="f6722fafbaf6d78a6b809eec36e0605e28b20857" translate="yes" xml:space="preserve">
          <source>The following are helper commands used by the above; end users typically do not use them directly.</source>
          <target state="translated">以下は上記で使用されるヘルパーコマンドであり、エンドユーザは通常直接使用しません。</target>
        </trans-unit>
        <trans-unit id="7e10909a1942dd56a826033bd880f2f38314517d" translate="yes" xml:space="preserve">
          <source>The following command switches to the &quot;master&quot; branch:</source>
          <target state="translated">以下のコマンドで「master」ブランチに切り替えます。</target>
        </trans-unit>
        <trans-unit id="7a4f4c25f3029fcde1d4a38239fa9b13c5887156" translate="yes" xml:space="preserve">
          <source>The following command-line options change import semantics and may therefore not be passed as option:</source>
          <target state="translated">以下のコマンドラインオプションは、インポートのセマンティクスを変更するので、オプションとして渡せない場合があります。</target>
        </trans-unit>
        <trans-unit id="932cde1c301ce345d40b274a1f81ff3e5be711e6" translate="yes" xml:space="preserve">
          <source>The following command-specific comments apply:</source>
          <target state="translated">以下のコマンド固有のコメントが適用されます。</target>
        </trans-unit>
        <trans-unit id="d6f2de10386ef19748ad0fa0931b3359b3969227" translate="yes" xml:space="preserve">
          <source>The following config settings can be used to modify &lt;code&gt;git p4&lt;/code&gt; behavior. They all are in the &lt;code&gt;git-p4&lt;/code&gt; section.</source>
          <target state="translated">次の構成設定を使用して、 &lt;code&gt;git p4&lt;/code&gt; の動作を変更できます。それらはすべて &lt;code&gt;git-p4&lt;/code&gt; セクションにあります。</target>
        </trans-unit>
        <trans-unit id="f68ee79cc1f0c0e26a0c766d89a6823644298bab" translate="yes" xml:space="preserve">
          <source>The following configuration variables tell gitweb where to find files. The values of these variables are paths on the filesystem.</source>
          <target state="translated">以下の設定変数は、gitweb がどこでファイルを見つけるかを指定します。これらの変数の値は、ファイルシステム上のパスとなります。</target>
        </trans-unit>
        <trans-unit id="446ebc694e2441273405a78869483ed3506272c8" translate="yes" xml:space="preserve">
          <source>The following date formats are supported. A frontend should select the format it will use for this import by passing the format name in the --date-format=&amp;lt;fmt&amp;gt; command-line option.</source>
          <target state="translated">次の日付形式がサポートされています。フロントエンドは、-date-format = &amp;lt;fmt&amp;gt;コマンドラインオプションでフォーマット名を渡すことにより、このインポートに使用するフォーマットを選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="e77a52167245e31f57d9305063355588365e98e5" translate="yes" xml:space="preserve">
          <source>The following description divides the low-level commands into commands that manipulate objects (in the repository, index, and working tree), commands that interrogate and compare objects, and commands that move objects and references between repositories.</source>
          <target state="translated">以下の説明では、低レベルのコマンドを、オブジェクトを操作するコマンド(リポジトリ、インデックス、作業ツリー内)、オブジェクトを照会したり比較したりするコマンド、オブジェクトや参照をリポジトリ間で移動するコマンドに分けて説明します。</target>
        </trans-unit>
        <trans-unit id="8ce90b7b29314319d9c33a8b52e106d84ec9670f" translate="yes" xml:space="preserve">
          <source>The following escape sequences (beside &lt;code&gt;\&quot;&lt;/code&gt; and &lt;code&gt;\\&lt;/code&gt;) are recognized: &lt;code&gt;\n&lt;/code&gt; for newline character (NL), &lt;code&gt;\t&lt;/code&gt; for horizontal tabulation (HT, TAB) and &lt;code&gt;\b&lt;/code&gt; for backspace (BS). Other char escape sequences (including octal escape sequences) are invalid.</source>
          <target state="translated">次のエスケープシーケンス（ &lt;code&gt;\&quot;&lt;/code&gt; と &lt;code&gt;\\&lt;/code&gt; の横）が認識されます： &lt;code&gt;\n&lt;/code&gt; は改行文字（NL）、 &lt;code&gt;\t&lt;/code&gt; は水平集計（HT、TAB）、 &lt;code&gt;\b&lt;/code&gt; はバックスペース（BS）。その他の文字エスケープシーケンス（8進数を含む）エスケープシーケンス）は無効です。</target>
        </trans-unit>
        <trans-unit id="11e92a0ce8b123a34278f747bf61153deb05c5a4" translate="yes" xml:space="preserve">
          <source>The following example shows three branches, &quot;master&quot;, &quot;fixes&quot; and &quot;mhf&quot;:</source>
          <target state="translated">以下の例では、&quot;master&quot;、&quot;fixs&quot;、&quot;mhf &quot;の3つのブランチを表示しています。</target>
        </trans-unit>
        <trans-unit id="4297ab330b843af6f1af2259ff9a055a87b6bf37" translate="yes" xml:space="preserve">
          <source>The following features from &amp;lsquo;svn log&amp;rsquo; are supported:</source>
          <target state="translated">「svn log」の以下の機能がサポートされています。</target>
        </trans-unit>
        <trans-unit id="9b96392c24cd31061920293e2fd2511a8543969f" translate="yes" xml:space="preserve">
          <source>The following flags further affect the behavior when comparing commits (but not trees).</source>
          <target state="translated">以下のフラグは、コミットを比較する際の動作にさらに影響を与えます (ツリーではありません)。</target>
        </trans-unit>
        <trans-unit id="c98119f1eba9806e1383e47ef0aa9d751dbdff13" translate="yes" xml:space="preserve">
          <source>The following format are available:</source>
          <target state="translated">以下のような形式があります。</target>
        </trans-unit>
        <trans-unit id="5f08fc55d496958a337ddcb6a67febfb89f85554" translate="yes" xml:space="preserve">
          <source>The following key/value pairs are common to all events:</source>
          <target state="translated">以下のキー/値のペアは、すべてのイベントで共通です。</target>
        </trans-unit>
        <trans-unit id="0a5e5ff367236dbd6bf5580d5af5e71ae090b770" translate="yes" xml:space="preserve">
          <source>The following options affect the way the simplification is performed:</source>
          <target state="translated">以下のオプションは、単純化の実行方法に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="d99d5d2882d3fb95fadc56a0416699f5b886386d" translate="yes" xml:space="preserve">
          <source>The following options are available in either location:</source>
          <target state="translated">どちらの場所でも以下のようなオプションがあります。</target>
        </trans-unit>
        <trans-unit id="6e9dd1ef0925dcf9e09b1e6e501e8d0360e77eba" translate="yes" xml:space="preserve">
          <source>The following options are defined and (under suitable circumstances) set by Git if the remote helper has the &lt;code&gt;option&lt;/code&gt; capability.</source>
          <target state="translated">リモートヘルパーに &lt;code&gt;option&lt;/code&gt; 機能がある場合、次のオプションが定義され、（適切な状況下で）Gitによって設定されます。</target>
        </trans-unit>
        <trans-unit id="ad97d4ffb6c58a93bf3193a5402926d11d214aa1" translate="yes" xml:space="preserve">
          <source>The following options select the commits to be shown:</source>
          <target state="translated">次のオプションは、表示するコミットを選択します。</target>
        </trans-unit>
        <trans-unit id="04bd1c24e8e494894e5123ce96e6c123a135b194" translate="yes" xml:space="preserve">
          <source>The following options:</source>
          <target state="translated">以下の選択肢があります。</target>
        </trans-unit>
        <trans-unit id="7b3b3b2ba3a3d71942fecd2cbccdbee3fd847246" translate="yes" xml:space="preserve">
          <source>The following sequence attempts to backport a patch, bails out because the code the patch applies to has changed too much, and then tries again, this time exercising more care about matching up context lines.</source>
          <target state="translated">以下のシーケンスは、パッチをバックポートしようとし、パッチが適用されたコードがあまりにも変更されたために失敗し、その後、再度、コンテキスト行のマッチングに注意を払って試しています。</target>
        </trans-unit>
        <trans-unit id="0fb6c7c3c1a2e6361aa6d0f3ddafd309ebc6378c" translate="yes" xml:space="preserve">
          <source>The following sequence checks out the &lt;code&gt;master&lt;/code&gt; branch, reverts the &lt;code&gt;Makefile&lt;/code&gt; to two revisions back, deletes &lt;code&gt;hello.c&lt;/code&gt; by mistake, and gets it back from the index.</source>
          <target state="translated">次のシーケンスは、 &lt;code&gt;master&lt;/code&gt; ブランチをチェックアウトし、 &lt;code&gt;Makefile&lt;/code&gt; を2つのリビジョンに戻し、誤って &lt;code&gt;hello.c&lt;/code&gt; を削除し、インデックスから取得します。</target>
        </trans-unit>
        <trans-unit id="b8a40037f7e020ad1f156eb7f08942ca8112c080" translate="yes" xml:space="preserve">
          <source>The following sequence switches to the &lt;code&gt;master&lt;/code&gt; branch, reverts the &lt;code&gt;Makefile&lt;/code&gt; to two revisions back, deletes hello.c by mistake, and gets it back from the index.</source>
          <target state="translated">次のシーケンスは、 &lt;code&gt;master&lt;/code&gt; ブランチに切り替え、 &lt;code&gt;Makefile&lt;/code&gt; を2つのリビジョンに戻し、誤ってhello.cを削除し、インデックスから取得します。</target>
        </trans-unit>
        <trans-unit id="75477915a08ed3777518303fe3302c5a880167a8" translate="yes" xml:space="preserve">
          <source>The following sequences have a special meaning:</source>
          <target state="translated">以下のシーケンスには特別な意味があります。</target>
        </trans-unit>
        <trans-unit id="b07d72a39fdd44876a293ab8f917fa6a1014bd8c" translate="yes" xml:space="preserve">
          <source>The following subcommands are available:</source>
          <target state="translated">以下のサブコマンドが利用できます。</target>
        </trans-unit>
        <trans-unit id="55332124e1bbf00265c49abce68b19cb8696bb39" translate="yes" xml:space="preserve">
          <source>The following syntaxes may be used with them:</source>
          <target state="translated">以下の構文を使用することができます。</target>
        </trans-unit>
        <trans-unit id="f9c489d8b69bf82a63ff4a237dd2bd772b8fb351" translate="yes" xml:space="preserve">
          <source>The following tables show what happens when there are unmerged entries:</source>
          <target state="translated">以下の表は、マージされていないエントリがある場合に何が起こるかを示しています。</target>
        </trans-unit>
        <trans-unit id="3cc98c85c7406728df501340aea8c7fdc3f04d78" translate="yes" xml:space="preserve">
          <source>The following tips and tricks have been collected from various users of fast-import, and are offered here as suggestions.</source>
          <target state="translated">以下のヒントは、ファストインポートの様々なユーザーから集められたもので、ここでは提案として提供されています。</target>
        </trans-unit>
        <trans-unit id="177a564b8e3982405afb3b516ab4bbb5063d1ee7" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=blob:limit=&amp;lt;n&amp;gt;[kmg]&lt;/code&gt; omits blobs larger than n bytes or units. n may be zero. The suffixes k, m, and g can be used to name units in KiB, MiB, or GiB. For example, &lt;code&gt;blob:limit=1k&lt;/code&gt; is the same as &lt;code&gt;blob:limit=1024&lt;/code&gt;.</source>
          <target state="translated">フォーム &lt;code&gt;--filter=blob:limit=&amp;lt;n&amp;gt;[kmg]&lt;/code&gt; 省いブロブバイト単位Nより大きい。nはゼロでもかまいません。サフィックスk、m、およびgを使用して、KiB、MiB、またはGiBの単位を指定できます。たとえば、 &lt;code&gt;blob:limit=1k&lt;/code&gt; は &lt;code&gt;blob:limit=1024&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="94349f8d4383b34d05a696da3b05af67f12eec03" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=blob:none&lt;/code&gt; omits all blobs.</source>
          <target state="translated">&lt;code&gt;--filter=blob:none&lt;/code&gt; の形式では、すべてのblobが省略されます。</target>
        </trans-unit>
        <trans-unit id="39c705af761382dd23f074438f9b0e646bf492af" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=combine:&amp;lt;filter1&amp;gt;+&amp;lt;filter2&amp;gt;+&amp;hellip;​&amp;lt;filterN&amp;gt;&lt;/code&gt; can also be used to combined several filters, but this is harder than just repeating the &lt;code&gt;--filter&lt;/code&gt; flag and is usually not necessary. Filters are joined by &lt;code&gt;+&lt;/code&gt; and individual filters are %-encoded (i.e. URL-encoded). Besides the &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;%&lt;/code&gt; characters, the following characters are reserved and also must be encoded: &lt;code&gt;~!@#$^&amp;amp;*()[]{}\;&quot;,&amp;lt;&amp;gt;?&lt;/code&gt;&lt;code&gt;'`&lt;/code&gt; as well as all characters with ASCII code &amp;lt;= &lt;code&gt;0x20&lt;/code&gt;, which includes space and newline.</source>
          <target state="translated">フォーム &lt;code&gt;--filter=combine:&amp;lt;filter1&amp;gt;+&amp;lt;filter2&amp;gt;+&amp;hellip;​&amp;lt;filterN&amp;gt;&lt;/code&gt; もを組み合わせたいくつかのフィルタに使用されるが、これは難しい単なる繰り返し以上であることができる &lt;code&gt;--filter&lt;/code&gt; フラグを、通常は必要ありません。フィルターは &lt;code&gt;+&lt;/code&gt; で結合され、個々のフィルターは％エンコード（つまり、URLエンコード）されます。 &lt;code&gt;+&lt;/code&gt; および &lt;code&gt;%&lt;/code&gt; 文字の他に、次の文字は予約されており、エンコードする必要があります： &lt;code&gt;~!@#$^&amp;amp;*()[]{}\;&quot;,&amp;lt;&amp;gt;?&lt;/code&gt; &lt;code&gt;'`&lt;/code&gt; およびASCIIコード&amp;lt;のすべての文字= &lt;code&gt;0x20&lt;/code&gt; 。スペースと改行を含みます。</target>
        </trans-unit>
        <trans-unit id="d52505ec75878146eb9054dceb4728d58b485513" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=sparse:oid=&amp;lt;blob-ish&amp;gt;&lt;/code&gt; uses a sparse-checkout specification contained in the blob (or blob-expression) &lt;code&gt;&amp;lt;blob-ish&amp;gt;&lt;/code&gt; to omit blobs that would not be not required for a sparse checkout on the requested refs.</source>
          <target state="translated">&lt;code&gt;--filter=sparse:oid=&amp;lt;blob-ish&amp;gt;&lt;/code&gt; の形式は、blob（またはblob-expression） &lt;code&gt;&amp;lt;blob-ish&amp;gt;&lt;/code&gt; に含まれるスパースチェックアウト仕様を使用して、スパースチェックアウトに不要なblobを省略します要求された参照。</target>
        </trans-unit>
        <trans-unit id="ef46a11218e9457b2745a05e86c211527bd23b7c" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=tree:&amp;lt;depth&amp;gt;&lt;/code&gt; omits all blobs and trees whose depth from the root tree is &amp;gt;= &amp;lt;depth&amp;gt; (minimum depth if an object is located at multiple depths in the commits traversed). &amp;lt;depth&amp;gt;=0 will not include any trees or blobs unless included explicitly in the command-line (or standard input when --stdin is used). &amp;lt;depth&amp;gt;=1 will include only the tree and blobs which are referenced directly by a commit reachable from &amp;lt;commit&amp;gt; or an explicitly-given object. &amp;lt;depth&amp;gt;=2 is like &amp;lt;depth&amp;gt;=1 while also including trees and blobs one more level removed from an explicitly-given commit or tree.</source>
          <target state="translated">&lt;code&gt;--filter=tree:&amp;lt;depth&amp;gt;&lt;/code&gt; の形式では、ルートツリーからの深度が&amp;gt; = &amp;lt;depth&amp;gt;であるすべてのblobとツリーが省略されます（オブジェクトがトラバースされたコミットの複数の深度にある場合の最小深度）。 &amp;lt;depth&amp;gt; = 0には、コマンドライン（または--stdinが使用されている場合は標準入力）に明示的に含まれていない限り、ツリーやブロブは含まれません。 &amp;lt;depth&amp;gt; = 1には、&amp;lt;commit&amp;gt;から到達可能なコミットまたは明示的に指定されたオブジェクトによって直接参照されるツリーとblobのみが含まれます。 &amp;lt;depth&amp;gt; = 2は&amp;lt;depth&amp;gt; = 1に似ていますが、明示的に与えられたコミットまたはツリーから1レベル削除されたツリーおよびブロブも含まれます。</target>
        </trans-unit>
        <trans-unit id="143c72f9a0abe1adb065cd1c00c0271a08c274c4" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-any&lt;/code&gt; will allow object traversal to continue if a missing object is encountered. Missing objects will silently be omitted from the results.</source>
          <target state="translated">&lt;code&gt;--missing=allow-any&lt;/code&gt; の形式を使用すると、見つからないオブジェクトが検出された場合でもオブジェクトトラバーサルを続行できます。欠落しているオブジェクトは、通知なしで結果から除外されます。</target>
        </trans-unit>
        <trans-unit id="280716e3ccf86616960848b089fdadef81ba797d" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-promisor&lt;/code&gt; is like &lt;code&gt;allow-any&lt;/code&gt;, but will only allow object traversal to continue for EXPECTED promisor missing objects. Unexpected missing object will raise an error.</source>
          <target state="translated">&lt;code&gt;--missing=allow-promisor&lt;/code&gt; の形式は &lt;code&gt;allow-any&lt;/code&gt; に似ていますが、EXPECTED promisor行方不明オブジェクトに対してのみオブジェクトトラバーサルを続行できます。予期しないオブジェクトがないと、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="563d9e750d01dbe920d57035d16bed3d91b9aea6" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-promisor&lt;/code&gt; is like &lt;code&gt;allow-any&lt;/code&gt;, but will only allow object traversal to continue for EXPECTED promisor missing objects. Unexpected missing objects will raise an error.</source>
          <target state="translated">&lt;code&gt;--missing=allow-promisor&lt;/code&gt; の形式は &lt;code&gt;allow-any&lt;/code&gt; に似ていますが、EXPECTED promisor行方不明オブジェクトに対してのみオブジェクトトラバーサルを続行できます。予期しない欠落オブジェクトがあると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="28c618ed732782b866de4c7dcf716daa2ac64119" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=error&lt;/code&gt; requests that pack-objects stop with an error if a missing object is encountered. This is the default action.</source>
          <target state="translated">&lt;code&gt;--missing=error&lt;/code&gt; の形式は、見つからないオブジェクトが検出された場合にpack-objectsをエラーで停止するように要求します。これがデフォルトのアクションです。</target>
        </trans-unit>
        <trans-unit id="2ed32158adb2f2f236ac5307d5ba7c30f0630796" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=error&lt;/code&gt; requests that rev-list stop with an error if a missing object is encountered. This is the default action.</source>
          <target state="translated">&lt;code&gt;--missing=error&lt;/code&gt; の形式は、見つからないオブジェクトが検出された場合にrev-listがエラーで停止することを要求します。これがデフォルトのアクションです。</target>
        </trans-unit>
        <trans-unit id="67e4b67693941fe412533d5210bde2a413de8fb1" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=print&lt;/code&gt; is like &lt;code&gt;allow-any&lt;/code&gt;, but will also print a list of the missing objects. Object IDs are prefixed with a &amp;ldquo;?&amp;rdquo; character.</source>
          <target state="translated">&lt;code&gt;--missing=print&lt;/code&gt; の形式は &lt;code&gt;allow-any&lt;/code&gt; に似ていますが、欠落しているオブジェクトのリストも出力します。オブジェクトIDの前には「？」キャラクター。</target>
        </trans-unit>
        <trans-unit id="09994cb2384da5eddbe0ae0a9a1ceca76d8c8bcc" translate="yes" xml:space="preserve">
          <source>The format of a &amp;lt;refspec&amp;gt; parameter is an optional plus &lt;code&gt;+&lt;/code&gt;, followed by the source &amp;lt;src&amp;gt;, followed by a colon &lt;code&gt;:&lt;/code&gt;, followed by the destination ref &amp;lt;dst&amp;gt;. The colon can be omitted when &amp;lt;dst&amp;gt; is empty. &amp;lt;src&amp;gt; is typically a ref, but it can also be a fully spelled hex object name.</source>
          <target state="translated">&amp;lt;refspec&amp;gt;パラメータの形式は、オプションのプラス &lt;code&gt;+&lt;/code&gt; 、ソース&amp;lt;src&amp;gt;、コロン &lt;code&gt;:&lt;/code&gt; 、宛先ref &amp;lt;dst&amp;gt;の順です。&amp;lt;dst&amp;gt;が空の場合は、コロンを省略できます。&amp;lt;src&amp;gt;は通常refですが、完全なスペルの16進数オブジェクト名にすることもできます。</target>
        </trans-unit>
        <trans-unit id="05c09db4c870e826391cf6ebde5a8cc33d2791f6" translate="yes" xml:space="preserve">
          <source>The format of these files is username followed by the encrypted password, for example:</source>
          <target state="translated">これらのファイルの形式は、例えば、ユーザ名の後に暗号化されたパスワードが続きます。</target>
        </trans-unit>
        <trans-unit id="65670970ee487305077ce344ca1fb6c36a889cee" translate="yes" xml:space="preserve">
          <source>The former lets your shell expand the fileglob, and you are asking the dot-C files in your working tree to be overwritten with the version in the index. The latter passes the &lt;code&gt;*.c&lt;/code&gt; to Git, and you are asking the paths in the index that match the pattern to be checked out to your working tree. After running &lt;code&gt;git add hello.c; rm hello.c&lt;/code&gt;, you will &lt;code&gt;not&lt;/code&gt; see &lt;code&gt;hello.c&lt;/code&gt; in your working tree with the former, but with the latter you will.</source>
          <target state="translated">前者はシェルがfileglobを拡張できるようにし、作業ツリー内のドットCファイルをインデックス内のバージョンで上書きするように要求しています。後者は &lt;code&gt;*.c&lt;/code&gt; をGitに渡し、チェックアウトするパターンに一致するインデックス内のパスを作業ツリーに要求します。 &lt;code&gt;git add hello.c; rm hello.c&lt;/code&gt; 実行した後、hello.cを追加します。 rm hello.cの場合、前者では作業ツリーに &lt;code&gt;hello.c&lt;/code&gt; &lt;code&gt;not&lt;/code&gt; 表示されませんが、後者では表示されます。</target>
        </trans-unit>
        <trans-unit id="b363974f459c2a2b237a919650aa9dc9f75161d2" translate="yes" xml:space="preserve">
          <source>The frontend must specify the number of bytes of data.</source>
          <target state="translated">フロントエンドでは、データのバイト数を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="23957db0f038e6b4263285c2923ad6ce72a805ca" translate="yes" xml:space="preserve">
          <source>The full SHA-1 object name (40-byte hexadecimal string), or a leading substring that is unique within the repository. E.g. dae86e1950b1277e545cee180551750029cfe735 and dae86e both name the same commit object if there is no other object in your repository whose object name starts with dae86e.</source>
          <target state="translated">完全な SHA-1 オブジェクト名 (40 バイトの 16 進数文字列)、またはリポジトリ内で一意な先頭の部分文字列。例えば dae86e1950b1277e545cee180551750029cfe735 と dae86e は、リポジトリ内に dae86e で始まるオブジェクト名を持つ他のオブジェクトが存在しない場合、同じコミットオブジェクトの名前を付けます。</target>
        </trans-unit>
        <trans-unit id="ce332106cb9361add9aaf31aea030a425aeed7be" translate="yes" xml:space="preserve">
          <source>The full name is occasionally useful if, for example, there ever exists a tag and a branch with the same name.</source>
          <target state="translated">フルネームは、例えばタグとブランチが同じ名前で存在する場合などに便利です。</target>
        </trans-unit>
        <trans-unit id="d24187cae372eb76b2a26570ccfd9def8c8abdf6" translate="yes" xml:space="preserve">
          <source>The full pattern set allows for arbitrary pattern matches and complicated inclusion/exclusion rules. These can result in O(N*M) pattern matches when updating the index, where N is the number of patterns and M is the number of paths in the index. To combat this performance issue, a more restricted pattern set is allowed when &lt;code&gt;core.spareCheckoutCone&lt;/code&gt; is enabled.</source>
          <target state="translated">完全なパターンセットにより、任意のパターンマッチと複雑な包含/除外ルールが可能になります。これらにより、インデックスの更新時にO（N * M）パターンが一致する可能性があります。Nはパターンの数、Mはインデックス内のパスの数です。このパフォーマンスの問題に対処するために、 &lt;code&gt;core.spareCheckoutCone&lt;/code&gt; が有効になっている場合は、より制限されたパターンセットを使用できます。</target>
        </trans-unit>
        <trans-unit id="6d3e98918a57498bee35c9ef416c5932bb448c1f" translate="yes" xml:space="preserve">
          <source>The full syntax for a p4 view is documented in &lt;code&gt;p4 help views&lt;/code&gt;. &lt;code&gt;git p4&lt;/code&gt; knows only a subset of the view syntax. It understands multi-line mappings, overlays with &lt;code&gt;+&lt;/code&gt;, exclusions with &lt;code&gt;-&lt;/code&gt; and double-quotes around whitespace. Of the possible wildcards, &lt;code&gt;git p4&lt;/code&gt; only handles &lt;code&gt;&amp;hellip;​&lt;/code&gt;, and only when it is at the end of the path. &lt;code&gt;git p4&lt;/code&gt; will complain if it encounters an unhandled wildcard.</source>
          <target state="translated">p4ビューの完全な構文は、 &lt;code&gt;p4 help views&lt;/code&gt; 記載されています。 &lt;code&gt;git p4&lt;/code&gt; はビュー構文のサブセットのみを認識します。複数行のマッピング、 &lt;code&gt;+&lt;/code&gt; を使用したオーバーレイ、 &lt;code&gt;-&lt;/code&gt; を使用した除外、および空白を囲む二重引用符を認識します。可能なワイルドカードの、 &lt;code&gt;git p4&lt;/code&gt; だけハンドル &lt;code&gt;&amp;hellip;​&lt;/code&gt; 、それはパスの最後にある場合にのみ。 &lt;code&gt;git p4&lt;/code&gt; は、未処理のワイルドカードに遭遇すると文句を言います。</target>
        </trans-unit>
        <trans-unit id="18d1519c9cf5420b92be3f082cd6f0aa89c3d260" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;skip_commit&lt;/code&gt; is defined as follows:</source>
          <target state="translated">関数 &lt;code&gt;skip_commit&lt;/code&gt; は次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="af7dd50b5e9b3d3ec2ae519f399794527002dc23" translate="yes" xml:space="preserve">
          <source>The functions defined by the Trace2 API are declared and documented in &lt;code&gt;trace2.h&lt;/code&gt;. It defines the API functions and wrapper macros for Trace2.</source>
          <target state="translated">Trace2 APIによって定義された関数は、trace2.hで宣言および文書化されてい &lt;code&gt;trace2.h&lt;/code&gt; 。Trace2のAPI関数とラッパーマクロを定義します。</target>
        </trans-unit>
        <trans-unit id="e5521fd46bed9d589b56b651d5f3ef04e9a3b2a8" translate="yes" xml:space="preserve">
          <source>The future of bisecting</source>
          <target state="translated">二分法の未来</target>
        </trans-unit>
        <trans-unit id="2aa4427c10c7d5c13ef7bbb9898f5fea28090dd1" translate="yes" xml:space="preserve">
          <source>The general idea is this: we generate a cost matrix between the commits in both commit ranges, then solve the least-cost assignment.</source>
          <target state="translated">一般的な考え方は次のとおりです:両コミット範囲のコミット間のコスト行列を生成し、最小コスト代入を解きます。</target>
        </trans-unit>
        <trans-unit id="0339eef2339eb8367ea8564b9ff6721cd9dea407" translate="yes" xml:space="preserve">
          <source>The git commit is created relative to the current origin revision (HEAD by default). A parent commit is created based on the origin, and then the unshelve commit is created based on that.</source>
          <target state="translated">git コミットは、現在のオリジンリビジョン (デフォルトでは HEAD)からの相対的なものとして作成されます。親コミットはオリジンをもとに作成され、それをもとに unshelve コミットが作成されます。</target>
        </trans-unit>
        <trans-unit id="a5bbcd1beb35762403be84a14e62e0a4eb5d5226" translate="yes" xml:space="preserve">
          <source>The git object database</source>
          <target state="translated">git オブジェクトデータベース</target>
        </trans-unit>
        <trans-unit id="80d403b9b878573aec88e9c705123dc6feedf769" translate="yes" xml:space="preserve">
          <source>The gitweb CGI script for viewing Git repositories over the web uses a perl script fragment as its configuration file. You can set variables using &quot;&lt;code&gt;our $variable = value&lt;/code&gt;&quot;; text from a &quot;#&quot; character until the end of a line is ignored. See &lt;strong&gt;perlsyn&lt;/strong&gt;(1) for details.</source>
          <target state="translated">ウェブ上でGitリポジトリを表示するためのgitweb CGIスクリプトは、設定ファイルとしてperlスクリプトフラグメントを使用します。&quot; &lt;code&gt;our $variable = value&lt;/code&gt; &quot;; を使用して変数を設定できます。「＃」文字から行末までのテキストは無視されます。詳細は&lt;strong&gt;perlsyn&lt;/strong&gt;（1）を参照してください。</target>
        </trans-unit>
        <trans-unit id="a1a6c42c76028a67bf39dd75b77a2307812be731" translate="yes" xml:space="preserve">
          <source>The gitweb cgi script provides users an easy way to browse your project&amp;rsquo;s revisions, file contents and logs without having to install Git. Features like RSS/Atom feeds and blame/annotation details may optionally be enabled.</source>
          <target state="translated">gitweb cgiスクリプトを使用すると、Gitをインストールしなくても、プロジェクトのリビジョン、ファイルの内容、ログを簡単に参照できます。RSS / Atomフィードや非難/注釈の詳細などの機能は、オプションで有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="eefcb42be74db518327d9c82beb9a165d884846e" translate="yes" xml:space="preserve">
          <source>The gitweb features that are configurable via &lt;code&gt;%feature&lt;/code&gt; hash are listed below. This should be a complete list, but ultimately the authoritative and complete list is in gitweb.cgi source code, with features described in the comments.</source>
          <target state="translated">&lt;code&gt;%feature&lt;/code&gt; ハッシュを介して構成可能なgitweb機能を以下に示します。これは完全なリストである必要がありますが、最終的には信頼できる完全なリストがgitweb.cgiソースコードにあり、コメントで機能が説明されています。</target>
        </trans-unit>
        <trans-unit id="bee84a897df9efb668b9aee969a1e660ed8af0a4" translate="yes" xml:space="preserve">
          <source>The gitweb.extraBranchRefs is actually a multi-valued configuration variable, so following example is also correct and the result is the same as of the snippet above:</source>
          <target state="translated">gitweb.extraBranchRefsは実際には多値の設定変数なので、以下の例も正しく、上のスニペットと同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="ab9a5e4603e46ba18e0a4c5efe881c7ac8def35b" translate="yes" xml:space="preserve">
          <source>The given URL is recorded into &lt;code&gt;.gitmodules&lt;/code&gt; for use by subsequent users cloning the superproject. If the URL is given relative to the superproject&amp;rsquo;s repository, the presumption is the superproject and submodule repositories will be kept together in the same relative location, and only the superproject&amp;rsquo;s URL needs to be provided. git-submodule will correctly locate the submodule using the relative URL in &lt;code&gt;.gitmodules&lt;/code&gt;.</source>
          <target state="translated">指定されたURLは、スーパー &lt;code&gt;.gitmodules&lt;/code&gt; を複製する後続のユーザーが使用するために.gitmodulesに記録されます。スーパープロジェクトのリポジトリを基準にURLが指定されている場合、推定はスーパープロジェクトであり、サブモジュールリポジトリは同じ相対ロケーションにまとめられ、スーパープロジェクトのURLのみを指定する必要があります。git-submoduleは &lt;code&gt;.gitmodules&lt;/code&gt; の相対URLを使用してサブモジュールを正しく配置します。</target>
        </trans-unit>
        <trans-unit id="1190edfebfe2406cf333713a0e461379865b033f" translate="yes" xml:space="preserve">
          <source>The goal of this tutorial is to introduce two fundamental pieces of Git&amp;rsquo;s architecture&amp;mdash;​the object database and the index file&amp;mdash;​and to provide the reader with everything necessary to understand the rest of the Git documentation.</source>
          <target state="translated">このチュートリアルの目的は、Gitのアーキテクチャの2つの基本部分、つまりオブジェクトデータベースとインデックスファイルを紹介し、Gitの残りのドキュメントを理解するために必要なすべてを読者に提供することです。</target>
        </trans-unit>
        <trans-unit id="880a291c14c1099392ebdd9b73ec08c93b7220d1" translate="yes" xml:space="preserve">
          <source>The hard case</source>
          <target state="translated">ハードケース</target>
        </trans-unit>
        <trans-unit id="7d2a187748caf680c0e66173f60176ec60ea02ab" translate="yes" xml:space="preserve">
          <source>The header consists of 256 4-byte network byte order integers. N-th entry of this table records the number of objects in the corresponding pack, the first byte of whose object name is less than or equal to N. This is called the &lt;code&gt;first-level fan-out&lt;/code&gt; table.</source>
          <target state="translated">ヘッダーは、256の4バイトネットワークバイトオーダー整数で構成されます。このテーブルのN番目のエントリは、対応するパック内のオブジェクトの数を記録します。そのオブジェクトの最初のバイトはN以下です。これは、 &lt;code&gt;first-level fan-out&lt;/code&gt; テーブルと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="0e2dd021a6a8dc94bfb40a62a04904f17b8f1dab" translate="yes" xml:space="preserve">
          <source>The header is followed by number of object entries, each of which looks like this:</source>
          <target state="translated">ヘッダの後にはオブジェクトエントリの数が続き、それぞれが以下のようになります。</target>
        </trans-unit>
        <trans-unit id="10743ced5c1563e940127b440ba806235a399ac8" translate="yes" xml:space="preserve">
          <source>The header is followed by sorted 24-byte entries, one entry per object in the pack. Each entry is:</source>
          <target state="translated">ヘッダの後には、ソートされた24バイトのエントリが続き、パック内のオブジェクトごとに1つのエントリが続きます。各エントリは</target>
        </trans-unit>
        <trans-unit id="03910dca7f1c0af7f3d0e6986f455aceaec86f05" translate="yes" xml:space="preserve">
          <source>The header of the email is configurable via command-line options. If not specified on the command line, the user will be prompted with a ReadLine enabled interface to provide the necessary information.</source>
          <target state="translated">電子メールのヘッダーは、コマンドラインオプションで設定できます。コマンドラインで指定されていない場合、ユーザーは必要な情報を提供するために、ReadLineを有効にしたインターフェイスでプロンプトを表示します。</target>
        </trans-unit>
        <trans-unit id="53d28fdf80ee055eff1005765033449c285d4f79" translate="yes" xml:space="preserve">
          <source>The hook always runs after the automatic note copying (see &quot;notes.rewrite.&amp;lt;command&amp;gt;&quot; in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;) has happened, and thus has access to these notes.</source>
          <target state="translated">フックは、ノートの自動コピー（&lt;a href=&quot;git-config&quot;&gt;git-config [1]の&lt;/a&gt;「notes.rewrite。&amp;lt;command&amp;gt;」を参照）が発生した後に常に実行されるため、これらのノートにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="55997df4465d2b793292e1300e70ff2f9e1a3588" translate="yes" xml:space="preserve">
          <source>The hook executes once for each ref to be updated, and takes three parameters:</source>
          <target state="translated">フックは更新される各参照に対して1回実行され、3つのパラメータを取ります。</target>
        </trans-unit>
        <trans-unit id="6422fdbff7a8b80abf6e11b9c756369981239875" translate="yes" xml:space="preserve">
          <source>The hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.</source>
          <target state="translated">このフックは、メッセージファイルをその場で編集することを許可しており、メッセージを何らかのプロジェクト標準のフォーマットに正規化するために使うことができます。また、メッセージファイルを検査した後にコミットを拒否するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="7dd8785c8f6fdd3a8a45999afa9f773631b556f1" translate="yes" xml:space="preserve">
          <source>The hook receives a list of the rewritten commits on stdin, in the format</source>
          <target state="translated">フックは書き換えられたコミットのリストを標準入力で受け取ります。</target>
        </trans-unit>
        <trans-unit id="ffb0d43685532aa46e893849969758ab23367451" translate="yes" xml:space="preserve">
          <source>The hook receives the commit with which the tip of the current branch is going to be updated. It can exit with a non-zero status to refuse the push (when it does so, it must not modify the index or the working tree). Or it can make any necessary changes to the working tree and to the index to bring them to the desired state when the tip of the current branch is updated to the new commit, and exit with a zero status.</source>
          <target state="translated">フックは、現在のブランチの先端が更新されるコミットを受け取ります。このプッシュを拒否するために、0 以外のステータスで終了することができます (その場合、インデックスや作業ツリーを変更してはいけません)。あるいは、現在のブランチの先端が新しいコミットに更新されたときに、作業ツリーとインデックスに必要な変更を加えて、それらを望ましい状態にすることができます。</target>
        </trans-unit>
        <trans-unit id="6e0236cadc345b5114c4c6984e7438ed153e1f2f" translate="yes" xml:space="preserve">
          <source>The hook should exit with non-zero status if it wants to disallow updating the named ref. Otherwise it should exit with zero.</source>
          <target state="translated">指定された ref の更新を許可しないようにしたい場合は、フックは 0 以外のステータスで終了しなければなりません。そうでない場合はゼロで終了しなければなりません。</target>
        </trans-unit>
        <trans-unit id="9739d79c49b82b53238e48aeefee9c342d93a499" translate="yes" xml:space="preserve">
          <source>The hook should output to stdout the list of all files in the working directory that may have changed since the requested time. The logic should be inclusive so that it does not miss any potential changes. The paths should be relative to the root of the working directory and be separated by a single NUL.</source>
          <target state="translated">このフックは、要求された時刻以降に変更された可能性のある作業ディレクトリ内のすべてのファイルのリストを標準出力に出力しなければなりません。潜在的な変更を見逃さないように、ロジックは包括的でなければなりません。パスは作業ディレクトリのルートからの相対パスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="022998a9843b7be307eb2d587f13704cf2ce86bd" translate="yes" xml:space="preserve">
          <source>The horizontal line of history A---Q is taken to be the first parent of each merge. The commits are:</source>
          <target state="translated">履歴A---Qの水平線を各マージの最初の親とします。コミットは</target>
        </trans-unit>
        <trans-unit id="bdf0ebdfb4273a6fce7952dfa28834b6e411cd7f" translate="yes" xml:space="preserve">
          <source>The hypothetical proxy command entries actually have a postfix to discern what URL they apply to. Here is how to change the entry for kernel.org to &quot;ssh&quot;.</source>
          <target state="translated">仮想的なプロキシコマンドのエントリは、実際にはどの URL に適用されるかを識別するために接頭辞を持っています。以下は kernel.org のエントリを &quot;ssh&quot; に変更する方法です。</target>
        </trans-unit>
        <trans-unit id="4399284bfb632a08cce3f3533db563320f49af23" translate="yes" xml:space="preserve">
          <source>The id of a tree object to diff against.</source>
          <target state="translated">対抗するツリーオブジェクトのID。</target>
        </trans-unit>
        <trans-unit id="0505b9e9f78e78efa1c8b76bc422638cba05b1b7" translate="yes" xml:space="preserve">
          <source>The id of a tree object.</source>
          <target state="translated">ツリーオブジェクトのid。</target>
        </trans-unit>
        <trans-unit id="2e60e84271eec03fd28b067b32c84bb5fbe76999" translate="yes" xml:space="preserve">
          <source>The id of the tree object(s) to be read/merged.</source>
          <target state="translated">読み込んだりマージしたりするツリーオブジェクトのID。</target>
        </trans-unit>
        <trans-unit id="fb9074ec22bab96e3e97d4855db9bfaed224187c" translate="yes" xml:space="preserve">
          <source>The idea is that every 3 test for example, &quot;git bisect&quot; could ask the user to test a commit that has already been found to be &quot;good&quot; or &quot;bad&quot; (because one of its descendants or one of its ancestors has been found to be &quot;good&quot; or &quot;bad&quot; respectively). If it happens that a commit has been previously incorrectly classified then the bisection can be aborted early, hopefully before too many mistakes have been made. Then the user will have to look at what happened and then restart the bisection using a fixed bisect log.</source>
          <target state="translated">これは、たとえば &quot;git bisect&quot; は、3 回のテストごとに &quot;good&quot; あるいは &quot;bad&quot; と判定されたコミットをテストするようにユーザーに依頼するというものです (子孫や先祖の誰かがそれぞれ &quot;good&quot; あるいは &quot;bad&quot; と判定されているからです)。もし、あるコミットが以前に誤って分類されていた場合は、うまくいけば多くの間違いが起こる前に、早い段階でバイセクションを中止することができます。そうすれば、ユーザは何が起こったのかを確認してから、固定されたバイセクションログを使ってバイセクションを再起動しなければなりません。</target>
        </trans-unit>
        <trans-unit id="b3a07b8c786a1b03697e9ded467b22cd2ece1ab4" translate="yes" xml:space="preserve">
          <source>The idea is to manually tell &lt;code&gt;git rebase&lt;/code&gt; &quot;where the old &lt;code&gt;subsystem&lt;/code&gt; ended and your &lt;code&gt;topic&lt;/code&gt; began&quot;, that is, what the old merge base between them was. You will have to find a way to name the last commit of the old &lt;code&gt;subsystem&lt;/code&gt;, for example:</source>
          <target state="translated">アイデアは &lt;code&gt;git rebase&lt;/code&gt; に「古い &lt;code&gt;subsystem&lt;/code&gt; 終了して &lt;code&gt;topic&lt;/code&gt; が始まった場所」、つまりそれらの間の古いマージベースが何であったかを手動で伝えることです。古い &lt;code&gt;subsystem&lt;/code&gt; 最後のコミットに名前を付ける方法を見つける必要があります。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="1ff2a3a30d68d12ef6b058f357f43e3bd9cd4f0f" translate="yes" xml:space="preserve">
          <source>The idx files to verify.</source>
          <target state="translated">検証するidxファイル。</target>
        </trans-unit>
        <trans-unit id="fd29bd486dc43b124e6d98a808e18b86c2905ae4" translate="yes" xml:space="preserve">
          <source>The import checks out from CVS every revision of every file. Reportedly cvsimport can average some twenty revisions per second, so for a medium-sized project this should not take more than a couple of minutes. Larger projects or remote repositories may take longer.</source>
          <target state="translated">インポートは、すべてのファイルのすべてのリビジョンを CVS からチェックアウトします。報告によると、cvsimport は毎秒平均 20 件のリビジョンをチェックしますので、中規模のプロジェクトでは数分もかかりません。大規模なプロジェクトやリモートリポジトリでは、もっと時間がかかるかもしれません。</target>
        </trans-unit>
        <trans-unit id="69f04e00f7076b8b130e67c7134e53f7f1076bf2" translate="yes" xml:space="preserve">
          <source>The import is incremental, so if you call it again next month it will fetch any CVS updates that have been made in the meantime. For this to work, you must not modify the imported branches; instead, create new branches for your own changes, and merge in the imported branches as necessary.</source>
          <target state="translated">インポートは増分的に行われますので、来月もう一度呼び出せば、その間に行われた CVS の更新があればそれを取得します。その代わり、あなた自身の変更のために新しいブランチを作成し、必要に応じてインポートされたブランチをマージしてください。</target>
        </trans-unit>
        <trans-unit id="807035ab1f5be4f0cb3563dc9b49740571ca0fa4" translate="yes" xml:space="preserve">
          <source>The index</source>
          <target state="translated">インデックス</target>
        </trans-unit>
        <trans-unit id="4284ed429265f3c1afc30e4fc09197d88352698c" translate="yes" xml:space="preserve">
          <source>The index and the working tree are adjusted as if you had previously run &lt;code&gt;git checkout &amp;lt;start_point&amp;gt;&lt;/code&gt;. This allows you to start a new history that records a set of paths similar to &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt; by easily running &lt;code&gt;git commit -a&lt;/code&gt; to make the root commit.</source>
          <target state="translated">以前に &lt;code&gt;git checkout &amp;lt;start_point&amp;gt;&lt;/code&gt; を実行した場合と同様に、インデックスと作業ツリーが調整されます。これにより、簡単に &lt;code&gt;git commit -a&lt;/code&gt; を実行してルートをコミットすることにより、 &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt; と同様のパスのセットを記録する新しい履歴を開始できます。</target>
        </trans-unit>
        <trans-unit id="0818281aa21612fb5fa362015c64c5645d861084" translate="yes" xml:space="preserve">
          <source>The index contains all the information necessary to generate a single (uniquely determined) tree object.</source>
          <target state="translated">インデックスには、単一の(一意に決定された)ツリーオブジェクトを生成するために必要なすべての情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="3d9fb9e020c0d003a42d72f87f16ba2ba38226e6" translate="yes" xml:space="preserve">
          <source>The index enables fast comparisons between the tree object it defines and the working tree.</source>
          <target state="translated">このインデックスは、定義したツリーオブジェクトと作業ツリーとの高速な比較を可能にします。</target>
        </trans-unit>
        <trans-unit id="eb65460c6179ccddcd4479166e9da44d8f5c40d8" translate="yes" xml:space="preserve">
          <source>The index file</source>
          <target state="translated">インデックスファイル</target>
        </trans-unit>
        <trans-unit id="181ab401ce7a15640077d5cb413c24fc6eb6a97e" translate="yes" xml:space="preserve">
          <source>The index file is a cache of the state of a directory tree, used to create commits, check out working directories, and hold the various trees involved in a merge.</source>
          <target state="translated">インデックスファイルはディレクトリツリーの状態をキャッシュしたもので、コミットを作成したり、作業ディレクトリをチェックアウトしたり、マージに関わる様々なツリーを保持したりするために使用されます。</target>
        </trans-unit>
        <trans-unit id="a98935eae61bfe66b9928e790965f624bf2f8b5b" translate="yes" xml:space="preserve">
          <source>The index file is initialized with a list of all paths and, for each path, a blob object and a set of attributes. The blob object represents the contents of the file as of the head of the current branch. The attributes (last modified time, size, etc.) are taken from the corresponding file in the working tree. Subsequent changes to the working tree can be found by comparing these attributes. The index may be updated with new content, and new commits may be created from the content stored in the index.</source>
          <target state="translated">インデックスファイルは、すべてのパスのリストと、パスごとに blob オブジェクトと属性のセットで初期化されます。blob オブジェクトは、現在のブランチの先頭のファイルの内容を表します。属性 (最終更新時刻、サイズなど)は、作業ツリー内の対応するファイルから取得します。作業ツリーのその後の変更点は、これらの属性を比較することで見つけることができます。インデックスは新しいコンテンツで更新され、インデックスに格納されたコンテンツから新しいコミットが作成されます。</target>
        </trans-unit>
        <trans-unit id="803387e9a63472a3287bdc2446032cf6e023e1d9" translate="yes" xml:space="preserve">
          <source>The index is a binary file (generally kept in &lt;code&gt;.git/index&lt;/code&gt;) containing a sorted list of path names, each with permissions and the SHA-1 of a blob object; &lt;a href=&quot;git-ls-files&quot;&gt;git-ls-files[1]&lt;/a&gt; can show you the contents of the index:</source>
          <target state="translated">インデックスは、パス名のソートされたリストを含むバイナリファイル（通常は &lt;code&gt;.git/index&lt;/code&gt; に保持されます）であり、それぞれに権限とblobオブジェクトのSHA-1が付いています。&lt;a href=&quot;git-ls-files&quot;&gt;git-ls-files [1]&lt;/a&gt;はインデックスの内容を表示できます：</target>
        </trans-unit>
        <trans-unit id="a9316182499a37d7c3626ac01aa8aab4c013b473" translate="yes" xml:space="preserve">
          <source>The index is also capable of storing multiple entries (called &quot;stages&quot;) for a given pathname. These stages are used to hold the various unmerged version of a file when a merge is in progress.</source>
          <target state="translated">インデックスは、与えられたパス名に対して複数のエントリ (「ステージ」と呼ばれる)を格納することもできます。これらのステージは、マージが行われているときに、マージされていないファイルの様々なバージョンを保持するために使用されます。</target>
        </trans-unit>
        <trans-unit id="188f5a2d7cb942916f4771a1884b995e88b4142c" translate="yes" xml:space="preserve">
          <source>The index is thus a sort of temporary staging area, which is filled with a tree which you are in the process of working on.</source>
          <target state="translated">インデックスはこのように、作業中のツリーで埋め尽くされた一時的な演出エリアのようなものです。</target>
        </trans-unit>
        <trans-unit id="272f4c7f98ef3d0d8ac3fea3ee0b1455507c7b6c" translate="yes" xml:space="preserve">
          <source>The index is updated after successful completion, but the change must still be committed.</source>
          <target state="translated">インデックスは正常終了後に更新されますが、変更はまだコミットされていなければなりません。</target>
        </trans-unit>
        <trans-unit id="aaf3f3d73cad6f7ed8d83d0912688100fa696756" translate="yes" xml:space="preserve">
          <source>The index line includes the blob object names before and after the change. The &amp;lt;mode&amp;gt; is included if the file mode does not change; otherwise, separate lines indicate the old and the new mode.</source>
          <target state="translated">インデックス行には、変更前と変更後のblobオブジェクト名が含まれています。&amp;lt;mode&amp;gt;は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。</target>
        </trans-unit>
        <trans-unit id="0c2192b5aebec33a414387c35e4e32f7ffc2561e" translate="yes" xml:space="preserve">
          <source>The index may contain unmerged entries because of a previous failed merge. By default, if you try to check out such an entry from the index, the checkout operation will fail and nothing will be checked out. Using &lt;code&gt;-f&lt;/code&gt; will ignore these unmerged entries. The contents from a specific side of the merge can be checked out of the index by using &lt;code&gt;--ours&lt;/code&gt; or &lt;code&gt;--theirs&lt;/code&gt;. With &lt;code&gt;-m&lt;/code&gt;, changes made to the working tree file can be discarded to re-create the original conflicted merge result.</source>
          <target state="translated">以前にマージが失敗したため、インデックスにはマージされていないエントリが含まれている可能性があります。デフォルトでは、インデックスからそのようなエントリをチェックアウトしようとすると、チェックアウト操作は失敗し、何もチェックアウトされません。 &lt;code&gt;-f&lt;/code&gt; を使用すると、これらのマージされていないエントリは無視されます。 &lt;code&gt;--ours&lt;/code&gt; または &lt;code&gt;--theirs&lt;/code&gt; を使用して、マージの特定の側のコンテンツをインデックスからチェックアウトできます。 &lt;code&gt;-m&lt;/code&gt; 、ワーキングツリーのファイルに加えられた変更は、再作成し、元の競合のマージ結果を破棄することができます。</target>
        </trans-unit>
        <trans-unit id="4d0d51f29d49355316c3cef38c96a8eb5dfc2a8a" translate="yes" xml:space="preserve">
          <source>The index must be in a fully merged state.</source>
          <target state="translated">インデックスは完全にマージされた状態でなければなりません。</target>
        </trans-unit>
        <trans-unit id="76af7fc7918327fcfae98949c1f8a57aa6273691" translate="yes" xml:space="preserve">
          <source>The information &lt;code&gt;git rerere&lt;/code&gt; records is also used when running &lt;code&gt;git rebase&lt;/code&gt;. After blowing away the test merge and continuing development on the topic branch:</source>
          <target state="translated">&lt;code&gt;git rerere&lt;/code&gt; レコードの情報は、 &lt;code&gt;git rebase&lt;/code&gt; の実行時にも使用されます。テストマージを吹き飛ばし、トピックブランチで開発を続けた後：</target>
        </trans-unit>
        <trans-unit id="15901a24c7f8cf8a87522005a6e5af387df87a55" translate="yes" xml:space="preserve">
          <source>The information regarding a particular file, stored in the &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt;. An index entry can be unmerged, if a &lt;a href=&quot;#def_merge&quot;&gt;merge&lt;/a&gt; was started, but not yet finished (i.e. if the index contains multiple versions of that file).</source>
          <target state="translated">&lt;a href=&quot;#def_index&quot;&gt;インデックス&lt;/a&gt;に保存されている特定のファイルに関する情報。&lt;a href=&quot;#def_merge&quot;&gt;マージ&lt;/a&gt;が開始されたが、まだ完了していない場合（つまり、インデックスにそのファイルの複数のバージョンが含まれている場合）、インデックスエントリをマージ解除できます。</target>
        </trans-unit>
        <trans-unit id="e1b41d54924f3d005ef481db0b83a44bcb5b9a26" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;git svn clone&lt;/code&gt; can be quite time-consuming (especially for large Subversion repositories). If multiple people (or one person with multiple machines) want to use &lt;code&gt;git svn&lt;/code&gt; to interact with the same Subversion repository, you can do the initial &lt;code&gt;git svn clone&lt;/code&gt; to a repository on a server and have each person clone that repository with &lt;code&gt;git clone&lt;/code&gt;:</source>
          <target state="translated">最初の &lt;code&gt;git svn clone&lt;/code&gt; は非常に時間がかかる可能性があります（特に大規模なSubversionリポジトリの場合）。複数の人（または複数のマシンを持つ1人）が &lt;code&gt;git svn&lt;/code&gt; を使用して同じSubversionリポジトリとやり取りしたい場合は、最初の &lt;code&gt;git svn clone&lt;/code&gt; をサーバー上のリポジトリに行い、各人に &lt;code&gt;git clone&lt;/code&gt; を使用してそのリポジトリをクローンさせることができます。</target>
        </trans-unit>
        <trans-unit id="086eba2d4da1f4350d7506d860bddbb6a3656718" translate="yes" xml:space="preserve">
          <source>The initial clone may be time-consuming for a large project, but you will only need to clone once.</source>
          <target state="translated">大きなプロジェクトの場合、最初のクローンは時間がかかるかもしれませんが、クローンは1回で済みます。</target>
        </trans-unit>
        <trans-unit id="de40e4660568a286f9924fcf84aa107b9295fcd9" translate="yes" xml:space="preserve">
          <source>The initial revision lays the foundation for almost everything Git has today, but is small enough to read in one sitting.</source>
          <target state="translated">初版は現在のGitのほぼすべての基礎を築いていますが、一度に読むには十分な大きさです。</target>
        </trans-unit>
        <trans-unit id="c62040180edff3420ed3a70f2f1e520bccaa26ac" translate="yes" xml:space="preserve">
          <source>The insane thing. You really want to call the new version &quot;X&quot; too, &lt;code&gt;even though&lt;/code&gt; others have already seen the old one. So just use &lt;code&gt;git tag -f&lt;/code&gt; again, as if you hadn&amp;rsquo;t already published the old one.</source>
          <target state="translated">非常識なこと。他の人がすでに古いバージョンを見ているに &lt;code&gt;even though&lt;/code&gt; 、あなたは本当に新しいバージョンも &quot;X&quot;と呼びたいと思っています。したがって、古い &lt;code&gt;git tag -f&lt;/code&gt; まだ公開していないかのように、もう一度git tag -fを使用します。</target>
        </trans-unit>
        <trans-unit id="861707a12241605e66eb9230fb32f3c54a08448e" translate="yes" xml:space="preserve">
          <source>The intent of this option is to pick and choose lines of the patch to apply, or even to modify the contents of lines to be staged. This can be quicker and more flexible than using the interactive hunk selector. However, it is easy to confuse oneself and create a patch that does not apply to the index. See EDITING PATCHES below.</source>
          <target state="translated">このオプションの意図は、適用するパッチの行を選んで選択したり、ステージングする行の内容を変更したりすることです。これは、対話的なハンクセレクタを使うよりも素早く、より柔軟にできます。しかし、自分自身を混乱させ、インデックスに適用されないパッチを作成することは簡単です。以下のパッチの編集を参照してください。</target>
        </trans-unit>
        <trans-unit id="44c76b656c6ccb35aba2b96c920b5e782121a3bc" translate="yes" xml:space="preserve">
          <source>The interactive backend drops commits by default that started empty and halts if it hits a commit that ended up empty. The &lt;code&gt;--keep-empty&lt;/code&gt; option exists for the interactive backend to allow it to keep commits that started empty.</source>
          <target state="translated">インタラクティブなバックエンドは、デフォルトでは空で始まったコミットを削除し、空になったコミットにヒットすると停止します。 &lt;code&gt;--keep-empty&lt;/code&gt; オプションは、それが空の開始コミットを維持できるようにするために、対話型バックエンドのために存在します。</target>
        </trans-unit>
        <trans-unit id="c4d1b3aab1a5f39909af0bdb9766437575ff6138" translate="yes" xml:space="preserve">
          <source>The interactive mode is meant for this type of workflow:</source>
          <target state="translated">インタラクティブモードは、このタイプのワークフローのためのものです。</target>
        </trans-unit>
        <trans-unit id="bed5d62a356c4ef72d5d10899b110555c8810a69" translate="yes" xml:space="preserve">
          <source>The interactive rebase command was originally designed to handle individual patch series. As such, it makes sense to exclude merge commits from the todo list, as the developer may have merged the then-current &lt;code&gt;master&lt;/code&gt; while working on the branch, only to rebase all the commits onto &lt;code&gt;master&lt;/code&gt; eventually (skipping the merge commits).</source>
          <target state="translated">インタラクティブなrebaseコマンドは元々、個々のパッチシリーズを処理するために設計されました。そのため、開発者がブランチで作業中に当時の &lt;code&gt;master&lt;/code&gt; をマージし、最終的にすべてのコミットを &lt;code&gt;master&lt;/code&gt; にリベースする（マージコミットをスキップする）ため、マージコミットをtodoリストから除外することは理にかなっています。</target>
        </trans-unit>
        <trans-unit id="54aff08446e09f30da133e329eb3f3646033c66c" translate="yes" xml:space="preserve">
          <source>The interactive rebase will stop when a command fails (i.e. exits with non-0 status) to give you an opportunity to fix the problem. You can continue with &lt;code&gt;git rebase --continue&lt;/code&gt;.</source>
          <target state="translated">コマンドが失敗すると（つまり0以外のステータスで終了すると）、インタラクティブなリベースは停止し、問題を修正する機会が与えられます。 &lt;code&gt;git rebase --continue&lt;/code&gt; を続行できます。</target>
        </trans-unit>
        <trans-unit id="5a7f537099e4a0d8d8faba9c5e743d565b88b9dd" translate="yes" xml:space="preserve">
          <source>The interface (input, output, set of options and the semantics) to these low-level commands are meant to be a lot more stable than Porcelain level commands, because these commands are primarily for scripted use. The interface to Porcelain commands on the other hand are subject to change in order to improve the end user experience.</source>
          <target state="translated">これらの低レベルコマンドのインターフェイス(入力、出力、オプションのセット、セマンティクス)は、Porcelain レベルのコマンドよりもはるかに安定しています。一方、Porcelain コマンドのインターフェイスは、エンドユーザエクスペリエンスを向上させるために変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="bf907bc1bbd0905aa866d8781057341315704641" translate="yes" xml:space="preserve">
          <source>The internal block size to use when converting a revision specifier such as &lt;code&gt;@all&lt;/code&gt; into a list of specific change numbers. Instead of using a single call to &lt;code&gt;p4 changes&lt;/code&gt; to find the full list of changes for the conversion, there are a sequence of calls to &lt;code&gt;p4 changes -m&lt;/code&gt;, each of which requests one block of changes of the given size. The default block size is 500, which should usually be suitable.</source>
          <target state="translated">&lt;code&gt;@all&lt;/code&gt; などのリビジョン指定子を特定の変更番号のリストに変換するときに使用する内部ブロックサイズ。変換の変更の完全なリストを見つけるために &lt;code&gt;p4 changes&lt;/code&gt; への単一の呼び出しを使用する代わりに、それぞれが指定されたサイズの変更の1つのブロックを要求する &lt;code&gt;p4 changes -m&lt;/code&gt; への呼び出しのシーケンスがあります。デフォルトのブロックサイズは500で、通常はこれで十分です。</target>
        </trans-unit>
        <trans-unit id="b58ee91a98701b75ecd0edc6713c67b3efbc3330" translate="yes" xml:space="preserve">
          <source>The internals are documented in the &lt;a href=&quot;api-index&quot;&gt;Git API documentation&lt;/a&gt;.</source>
          <target state="translated">内部については、&lt;a href=&quot;api-index&quot;&gt;Git APIドキュメントに&lt;/a&gt;記載されています。</target>
        </trans-unit>
        <trans-unit id="051387312310d89e1f2cd1a7644ba37793a94a7c" translate="yes" xml:space="preserve">
          <source>The known attack vectors are as follows:</source>
          <target state="translated">既知の攻撃ベクトルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d0880a7ce92ec68d75b7997f1b8b330766294029" translate="yes" xml:space="preserve">
          <source>The lack of a central group of &quot;committers&quot; means there is less need for formal decisions about who is &quot;in&quot; and who is &quot;out&quot;.</source>
          <target state="translated">コミッター」という中心的なグループがないということは、誰が「入っている」のか、誰が「出ている」のかを正式に決定する必要性が少ないということです。</target>
        </trans-unit>
        <trans-unit id="d217f82f775261a888c8090d4fd57de90a2943db" translate="yes" xml:space="preserve">
          <source>The last diff is empty, but no new commits have been made, and the head still doesn&amp;rsquo;t contain the new line:</source>
          <target state="translated">最後の差分は空ですが、新しいコミットは行われておらず、ヘッドにはまだ新しい行が含まれていません。</target>
        </trans-unit>
        <trans-unit id="fc6ae42476a6037281df209d5a37adfb042c084d" translate="yes" xml:space="preserve">
          <source>The last three commits (&lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;HEAD^&lt;/code&gt;, and &lt;code&gt;HEAD~2&lt;/code&gt;) were bad and you do not want to ever see them again. Do &lt;strong&gt;not&lt;/strong&gt; do this if you have already given these commits to somebody else. (See the &quot;RECOVERING FROM UPSTREAM REBASE&quot; section in &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; for the implications of doing so.)</source>
          <target state="translated">最後の3つのコミット（ &lt;code&gt;HEAD&lt;/code&gt; 、 &lt;code&gt;HEAD^&lt;/code&gt; 、および &lt;code&gt;HEAD~2&lt;/code&gt; ）は悪かったので、二度と見たくありません。ん&lt;strong&gt;ではない&lt;/strong&gt;すでに他の誰かにこれらのコミットを与えている場合は、これを行います。 （その影響については、&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]の&lt;/a&gt;「UPSREAM REBASEからの復旧」セクションをご覧ください。）</target>
        </trans-unit>
        <trans-unit id="9b2685798225cd4befed46a027cdbd30eb245ee2" translate="yes" xml:space="preserve">
          <source>The latest stash you created is stored in &lt;code&gt;refs/stash&lt;/code&gt;; older stashes are found in the reflog of this reference and can be named using the usual reflog syntax (e.g. &lt;code&gt;stash@{0}&lt;/code&gt; is the most recently created stash, &lt;code&gt;stash@{1}&lt;/code&gt; is the one before it, &lt;code&gt;stash@{2.hours.ago}&lt;/code&gt; is also possible). Stashes may also be referenced by specifying just the stash index (e.g. the integer &lt;code&gt;n&lt;/code&gt; is equivalent to &lt;code&gt;stash@{n}&lt;/code&gt;).</source>
          <target state="translated">作成した最新のスタッシュは &lt;code&gt;refs/stash&lt;/code&gt; に保存されます。古いスタッシュは、この参照のreflogにあり、通常のreflog構文を使用して名前を付けることができます（たとえば、 &lt;code&gt;stash@{0}&lt;/code&gt; は最も新しく作成されたスタッシュ、 &lt;code&gt;stash@{1}&lt;/code&gt; はその前の &lt;code&gt;stash@{2.hours.ago}&lt;/code&gt; 、stash @ { 2.hours .ago}も可能です）。スタッシュはスタッシュインデックスのみを指定して参照することもできます（たとえば、整数 &lt;code&gt;n&lt;/code&gt; は &lt;code&gt;stash@{n}&lt;/code&gt; と同等です）。</target>
        </trans-unit>
        <trans-unit id="8bb7601b8118e6905d96f76a29452df6bc2ae98e" translate="yes" xml:space="preserve">
          <source>The latter is not available by default, unless configured.</source>
          <target state="translated">後者は、設定されていない限り、デフォルトでは利用できません。</target>
        </trans-unit>
        <trans-unit id="9096be046e467fbce79d2a6fe63b310a7a8be174" translate="yes" xml:space="preserve">
          <source>The latter use of the &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; values can be overridden by giving the &lt;code&gt;--refmap=&amp;lt;refspec&amp;gt;&lt;/code&gt; parameter(s) on the command line.</source>
          <target state="translated">後者の &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; 値の使用は、コマンドラインで &lt;code&gt;--refmap=&amp;lt;refspec&amp;gt;&lt;/code&gt; パラメータを指定することによりオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="55ffd562f6b8b4abf7958d261df418cb81ead100" translate="yes" xml:space="preserve">
          <source>The length of time, in milliseconds, to retry when trying to lock an individual reference. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 100 (i.e., retry for 100ms).</source>
          <target state="translated">個々の参照をロックしようとするときに再試行する時間をミリ秒単位で指定します。値 0 はリトライしないことを意味し、-1 は無期限にリトライすることを意味します。デフォルトは 100 です (つまり、100ms の間リトライします)。</target>
        </trans-unit>
        <trans-unit id="68a6d4f84896f5fe182696f59cffd1c668106a0a" translate="yes" xml:space="preserve">
          <source>The length of time, in milliseconds, to retry when trying to lock the &lt;code&gt;packed-refs&lt;/code&gt; file. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 1000 (i.e., retry for 1 second).</source>
          <target state="translated">&lt;code&gt;packed-refs&lt;/code&gt; ファイルをロックしようとしたときに再試行する時間（ミリ秒単位）。値0は、再試行しないことを意味します。-1は無期限に試行することを意味します。デフォルトは1000です（つまり、1秒間再試行します）。</target>
        </trans-unit>
        <trans-unit id="fff6cc41c6311b04938a1f36a103054a2f1d2e11" translate="yes" xml:space="preserve">
          <source>The list above is ordered by decreasing precedence; a URL that matches a config key&amp;rsquo;s path is preferred to one that matches its user name. For example, if the URL is &lt;code&gt;https://user@example.com/foo/bar&lt;/code&gt; a config key match of &lt;code&gt;https://example.com/foo&lt;/code&gt; will be preferred over a config key match of &lt;code&gt;https://user@example.com&lt;/code&gt;.</source>
          <target state="translated">上記のリストは、優先順位が高い順に並べられています。構成キーのパスと一致するURLは、ユーザー名と一致するURLよりも優先されます。例えば、URLがある場合 &lt;code&gt;https://user@example.com/foo/bar&lt;/code&gt; のA設定キーマッチ &lt;code&gt;https://example.com/foo&lt;/code&gt; はの設定キーの一致よりも優先されます &lt;code&gt;https://user@example.com&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34cf6a4a25da733f5b8366288a8f31ad385fa0ee" translate="yes" xml:space="preserve">
          <source>The list of identifiers, and other information, of the objects in a &lt;a href=&quot;#def_pack&quot;&gt;pack&lt;/a&gt;, to assist in efficiently accessing the contents of a pack.</source>
          <target state="translated">&lt;a href=&quot;#def_pack&quot;&gt;パック&lt;/a&gt;のオブジェクトへの効率的なアクセスを支援するための、パック内のオブジェクトの識別子とその他の情報のリスト。</target>
        </trans-unit>
        <trans-unit id="58413b6422259538de8b3cfc5351841a4fb3ade2" translate="yes" xml:space="preserve">
          <source>The list of mailbox files to read patches from. If you do not supply this argument, the command reads from the standard input. If you supply directories, they will be treated as Maildirs.</source>
          <target state="translated">パッチを読み込むメールボックスファイルのリスト。この引数を指定しなかった場合、コマンドは標準入力から読み込みます。ディレクトリを指定した場合、それらは Maildirs として扱われます。</target>
        </trans-unit>
        <trans-unit id="811a0eecf6c6689902c9fc1e00fe667f20b10132" translate="yes" xml:space="preserve">
          <source>The list of remotes which are fetched by &quot;git remote update &amp;lt;group&amp;gt;&quot;. See &lt;a href=&quot;git-remote&quot;&gt;git-remote[1]&lt;/a&gt;.</source>
          <target state="translated">「git remote update &amp;lt;group&amp;gt;」によって取得されるリモートのリスト。&lt;a href=&quot;git-remote&quot;&gt;git-remote [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3aadf5969931435dfd81a576572d271c1b7df1e4" translate="yes" xml:space="preserve">
          <source>The list you get with &quot;ls&quot; :-)</source>
          <target state="translated">ls&quot; で取得したリスト :-)</target>
        </trans-unit>
        <trans-unit id="2d5bfecbee3eeb5c71f69bd43de88bc34222a07d" translate="yes" xml:space="preserve">
          <source>The local offset is specified by &lt;code&gt;&amp;lt;offutc&amp;gt;&lt;/code&gt; as a positive or negative offset from UTC. For example EST (which is 5 hours behind UTC) would be expressed in &lt;code&gt;&amp;lt;tz&amp;gt;&lt;/code&gt; by &amp;ldquo;-0500&amp;rdquo; while UTC is &amp;ldquo;+0000&amp;rdquo;. The local offset does not affect &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;; it is used only as an advisement to help formatting routines display the timestamp.</source>
          <target state="translated">ローカルオフセットは、UTCからの正または負のオフセットとして &lt;code&gt;&amp;lt;offutc&amp;gt;&lt;/code&gt; で指定されます。たとえば、EST（UTCより5時間遅い）は、UTCが「+0000」であるのに対して、「 &lt;code&gt;&amp;lt;tz&amp;gt;&lt;/code&gt; 」では「-0500」で表されます。ローカルオフセットは &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; に影響しません。これは、フォーマットルーチンがタイムスタンプを表示するのに役立つアドバイスとしてのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="ab508d82c7d8a4545e2bb32ec9ec4fb2386a14cb" translate="yes" xml:space="preserve">
          <source>The location of an augmenting mailmap file. The default mailmap, located in the root of the repository, is loaded first, then the mailmap file pointed to by this variable. The location of the mailmap file may be in a repository subdirectory, or somewhere outside of the repository itself. See &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt; and &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;.</source>
          <target state="translated">拡張メールマップファイルの場所。リポジトリのルートにあるデフォルトのメールマップが最初にロードされ、次にこの変数が指すメールマップファイルがロードされます。メールマップファイルの場所は、リポジトリサブディレクトリか、リポジトリ自体の外のどこかにあります。&lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog [1]&lt;/a&gt;と&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="d3bb0979c637e06c575b3f731f106ded5d4b916f" translate="yes" xml:space="preserve">
          <source>The location of per-instance and system-wide configuration files can be overridden using the following environment variables:</source>
          <target state="translated">インスタンス単位の設定ファイルとシステム全体の設定ファイルの場所は、以下の環境変数を使用して上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="9446c1e5cce4b2ece4fc10ff79540962e21c6551" translate="yes" xml:space="preserve">
          <source>The magic word &lt;code&gt;top&lt;/code&gt; (magic signature: &lt;code&gt;/&lt;/code&gt;) makes the pattern match from the root of the working tree, even when you are running the command from inside a subdirectory.</source>
          <target state="translated">マジックワード &lt;code&gt;top&lt;/code&gt; （マジックシグネチャ： &lt;code&gt;/&lt;/code&gt; ）は、サブディレクトリ内からコマンドを実行している場合でも、作業ツリーのルートからパターンを一致させます。</target>
        </trans-unit>
        <trans-unit id="64ba77ac0581cbecc6b691422d0c5681817b2387" translate="yes" xml:space="preserve">
          <source>The main command loop has 6 subcommands (plus help and quit).</source>
          <target state="translated">メインコマンドループには、6つのサブコマンド(+ヘルプと終了)があります。</target>
        </trans-unit>
        <trans-unit id="0b0bee129956915b1cb776d4190a01b55932ed3c" translate="yes" xml:space="preserve">
          <source>The main command loop has 6 subcommands.</source>
          <target state="translated">メインコマンドループには6つのサブコマンドがあります。</target>
        </trans-unit>
        <trans-unit id="821ddd85eba2b4bc6e95a82521b10b32287622db" translate="yes" xml:space="preserve">
          <source>The main trunk is stored in the Git branch named &lt;code&gt;origin&lt;/code&gt;, and additional CVS branches are stored in Git branches with the same names. The most recent version of the main trunk is also left checked out on the &lt;code&gt;master&lt;/code&gt; branch, so you can start adding your own changes right away.</source>
          <target state="translated">メイントランクは &lt;code&gt;origin&lt;/code&gt; という名前のGitブランチに保存され、追加のCVSブランチは同じ名前のGitブランチに保存されます。メイントランクの最新バージョンも &lt;code&gt;master&lt;/code&gt; ブランチでチェックアウトされたままなので、すぐに独自の変更を追加できます。</target>
        </trans-unit>
        <trans-unit id="f31023370321849385c22bc8ae521136bfffac45" translate="yes" xml:space="preserve">
          <source>The mapping of file names from the p4 depot path to Git, by default, involves removing the entire depot path. With this option, the full p4 depot path is retained in Git. For example, path &lt;code&gt;//depot/main/foo/bar.c&lt;/code&gt;, when imported from &lt;code&gt;//depot/main/&lt;/code&gt;, becomes &lt;code&gt;foo/bar.c&lt;/code&gt;. With &lt;code&gt;--keep-path&lt;/code&gt;, the Git path is instead &lt;code&gt;depot/main/foo/bar.c&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、p4デポパスからGitへのファイル名のマッピングには、デポパス全体の削除が含まれます。このオプションを使用すると、完全なp4デポパスがGitに保持されます。たとえば、パス &lt;code&gt;//depot/main/foo/bar.c&lt;/code&gt; は、 &lt;code&gt;//depot/main/&lt;/code&gt; からインポートされると、 &lt;code&gt;foo/bar.c&lt;/code&gt; になります。 &lt;code&gt;--keep-path&lt;/code&gt; 、Gitのパスではなく、ある &lt;code&gt;depot/main/foo/bar.c&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="696795b724c116f40755fe0ffd2f815f95c8f529" translate="yes" xml:space="preserve">
          <source>The mark command is optional here as some frontends have chosen to generate the Git SHA-1 for the blob on their own, and feed that directly to &lt;code&gt;commit&lt;/code&gt;. This is typically more work than it&amp;rsquo;s worth however, as marks are inexpensive to store and easy to use.</source>
          <target state="translated">一部のフロントエンドが独自にBLOBのGit SHA-1を生成し、直接フィードして &lt;code&gt;commit&lt;/code&gt; することを選択しているため、ここではmarkコマンドはオプションです。マークは保存するのに費用がかからず、使いやすいので、通常、これは価値があるよりも多くの作業です。</target>
        </trans-unit>
        <trans-unit id="154d6f76415eae422478f55f25c1ddb853a4e1ab" translate="yes" xml:space="preserve">
          <source>The maximum delta depth used by &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; when no maximum depth is given on the command line. Defaults to 50. Maximum value is 4095.</source>
          <target state="translated">コマンドラインで最大深度が指定されていない場合に&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]が&lt;/a&gt;使用する最大デルタ深度。デフォルトは50です。最大値は4095です。</target>
        </trans-unit>
        <trans-unit id="9325da9117f9b4afd884e4f7e837bf9ca641172e" translate="yes" xml:space="preserve">
          <source>The maximum memory in bytes used for caching deltas in &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; before writing them out to a pack. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Repacking large repositories on machines which are tight with memory might be badly impacted by this though, especially if this cache pushes the system into swapping. A value of 0 means no limit. The smallest size of 1 byte may be used to virtually disable this cache. Defaults to 256 MiB.</source>
          <target state="translated">&lt;a href=&quot;git-pack-objects&quot;&gt;パック&lt;/a&gt;に書き込む前にgit-pack-objects [1]でデルタをキャッシュするために使用される最大メモリ（バイト単位）。このキャッシュは、すべてのオブジェクトに最適な一致が見つかると、最終的なデルタ結果を再計算する必要がないため、オブジェクトの書き込みフェーズを高速化するために使用されます。ただし、メモリが不足しているマシンで大規模なリポジトリを再パックすると、特にこのキャッシュがシステムをスワッピングにプッシュする場合、これによって悪影響を受ける可能性があります。値0は、制限がないことを意味します。最小サイズの1バイトを使用して、このキャッシュを実質的に無効にすることができます。デフォルトは256 MiBです。</target>
        </trans-unit>
        <trans-unit id="a0015a1c1a155cb39bc99dd58a785f6e45fb6909" translate="yes" xml:space="preserve">
          <source>The maximum size of a delta, that is cached in &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Defaults to 1000. Maximum value is 65535.</source>
          <target state="translated">&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]に&lt;/a&gt;キャッシュされるデルタの最大サイズ。このキャッシュは、すべてのオブジェクトに最適な一致が見つかると、最終的なデルタ結果を再計算する必要がないため、オブジェクトの書き込みフェーズを高速化するために使用されます。デフォルトは1000です。最大値は65535です。</target>
        </trans-unit>
        <trans-unit id="d2696797b76aad16406d56dd354feaf085869327" translate="yes" xml:space="preserve">
          <source>The maximum size of a pack. This setting only affects packing to a file when repacking, i.e. the git:// protocol is unaffected. It can be overridden by the &lt;code&gt;--max-pack-size&lt;/code&gt; option of &lt;a href=&quot;git-repack&quot;&gt;git-repack[1]&lt;/a&gt;. Reaching this limit results in the creation of multiple packfiles; which in turn prevents bitmaps from being created. The minimum size allowed is limited to 1 MiB. The default is unlimited. Common unit suffixes of &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, or &lt;code&gt;g&lt;/code&gt; are supported.</source>
          <target state="translated">パックの最大サイズ。この設定は、再パッキング時のファイルへのパッキングにのみ影響します。つまり、git：//プロトコルは影響を受けません。&lt;a href=&quot;git-repack&quot;&gt;git- &lt;/a&gt; &lt;code&gt;--max-pack-size&lt;/code&gt; [1]の--max-pack-sizeオプションでオーバーライドできます。この制限に達すると、複数のパックファイルが作成されます。これにより、ビットマップが作成されなくなります。許可される最小サイズは1 MiBに制限されています。デフォルトは無制限です。 &lt;code&gt;k&lt;/code&gt; 、 &lt;code&gt;m&lt;/code&gt; 、または &lt;code&gt;g&lt;/code&gt; の共通の単位サフィックスがサポートされています。</target>
        </trans-unit>
        <trans-unit id="bb8ed32c533714ca4a8bb85ec574c3c5791f3a2f" translate="yes" xml:space="preserve">
          <source>The maximum size of memory that is consumed by each thread in &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; for pack window memory when no limit is given on the command line. The value can be suffixed with &quot;k&quot;, &quot;m&quot;, or &quot;g&quot;. When left unconfigured (or set explicitly to 0), there will be no limit.</source>
          <target state="translated">コマンドラインで制限が指定されていない場合にパックウィンドウメモリ用に&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]の&lt;/a&gt;各スレッドによって消費されるメモリの最大サイズ。値の末尾には、「k」、「m」、または「g」を付けることができます。未構成のままにした場合（または明示的に0に設定した場合）、制限はありません。</target>
        </trans-unit>
        <trans-unit id="565cc584b68c5b675a716ec7daae7fd9f3343784" translate="yes" xml:space="preserve">
          <source>The meaning of each part of feature configuration is described below:</source>
          <target state="translated">以下、機能構成の各部の意味を説明する。</target>
        </trans-unit>
        <trans-unit id="657f593653b8985b76ea363799992d9ccd8552d1" translate="yes" xml:space="preserve">
          <source>The merge driver can learn the pathname in which the merged result will be stored via placeholder &lt;code&gt;%P&lt;/code&gt;.</source>
          <target state="translated">マージドライバーは、マージされた結果がプレースホルダー &lt;code&gt;%P&lt;/code&gt; を介して格納されるパス名を学習できます。</target>
        </trans-unit>
        <trans-unit id="3a4ee88dc1fd419e5903b5a6b97383e8c2a1fab9" translate="yes" xml:space="preserve">
          <source>The merge driver is expected to leave the result of the merge in the file named with &lt;code&gt;%A&lt;/code&gt; by overwriting it, and exit with zero status if it managed to merge them cleanly, or non-zero if there were conflicts.</source>
          <target state="translated">マージドライバは、 &lt;code&gt;%A&lt;/code&gt; という名前のファイルに上書きすることでマージの結果を残し、正常にマージできた場合はゼロステータスで終了し、競合があった場合はゼロ以外で終了すると予想されます。</target>
        </trans-unit>
        <trans-unit id="d39522f0982abae4a359335f63ed088d0f4a4c4e" translate="yes" xml:space="preserve">
          <source>The merge mechanism (&lt;code&gt;git merge&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt; commands) allows the backend &lt;code&gt;merge strategies&lt;/code&gt; to be chosen with &lt;code&gt;-s&lt;/code&gt; option. Some strategies can also take their own options, which can be passed by giving &lt;code&gt;-X&amp;lt;option&amp;gt;&lt;/code&gt; arguments to &lt;code&gt;git merge&lt;/code&gt; and/or &lt;code&gt;git pull&lt;/code&gt;.</source>
          <target state="translated">マージメカニズム（ &lt;code&gt;git merge&lt;/code&gt; および &lt;code&gt;git pull&lt;/code&gt; コマンド）では、 &lt;code&gt;-s&lt;/code&gt; オプションを使用してバックエンド &lt;code&gt;merge strategies&lt;/code&gt; を選択できます。一部の戦略では独自のオプションを使用することもできます。これは、 &lt;code&gt;-X&amp;lt;option&amp;gt;&lt;/code&gt; 引数を &lt;code&gt;git merge&lt;/code&gt; や &lt;code&gt;git pull&lt;/code&gt; に渡すことで渡すことができます。</target>
        </trans-unit>
        <trans-unit id="fa594438c3581495b74bb79c047cb66382bd8b0d" translate="yes" xml:space="preserve">
          <source>The merge workflow works by copying branches between upstream and downstream. Upstream can merge contributions into the official history; downstream base their work on the official history.</source>
          <target state="translated">マージワークフローは、上流と下流の間でブランチをコピーすることで動作します。上流では投稿を公式の履歴にマージすることができ、下流では公式の履歴に基づいて作業を行います。</target>
        </trans-unit>
        <trans-unit id="1df107645dfce75dc8613a8a0f6007cf8381d780" translate="yes" xml:space="preserve">
          <source>The merge-base command finds a common ancestor of the given commits, and always returns one or the other in the case where one is a descendant of the other; so the above output shows that e05db0fd actually is an ancestor of v1.5.0-rc1.</source>
          <target state="translated">merge-base コマンドは、与えられたコミットの共通の祖先を見つけ、一方が他方の子孫である場合は常に一方か他方を返します。</target>
        </trans-unit>
        <trans-unit id="19f5c4372c6fc154ead993a9f4b5a82da922524d" translate="yes" xml:space="preserve">
          <source>The message taken from file with &lt;code&gt;-F&lt;/code&gt; and command line with &lt;code&gt;-m&lt;/code&gt; are usually used as the tag message unmodified. This option lets you further edit the message taken from these sources.</source>
          <target state="translated">&lt;code&gt;-F&lt;/code&gt; を使用してファイルから取得されたメッセージと &lt;code&gt;-m&lt;/code&gt; を使用してコマンドラインが取得されたメッセージは、通常、変更されていないタグメッセージとして使用されます。このオプションを使用すると、これらのソースから取得したメッセージをさらに編集できます。</target>
        </trans-unit>
        <trans-unit id="1e2b72f6afed427d21f4e345d320e470730d82f9" translate="yes" xml:space="preserve">
          <source>The message taken from file with &lt;code&gt;-F&lt;/code&gt;, command line with &lt;code&gt;-m&lt;/code&gt;, and from commit object with &lt;code&gt;-C&lt;/code&gt; are usually used as the commit log message unmodified. This option lets you further edit the message taken from these sources.</source>
          <target state="translated">&lt;code&gt;-F&lt;/code&gt; を使用してファイルから、 &lt;code&gt;-m&lt;/code&gt; を使用してコマンドラインから、および &lt;code&gt;-C&lt;/code&gt; を使用してコミットオブジェクトから取得したメッセージは、通常、変更されていないコミットログメッセージとして使用されます。このオプションを使用すると、これらのソースから取得したメッセージをさらに編集できます。</target>
        </trans-unit>
        <trans-unit id="ae16f65784862fd6e529b736650355763df13327" translate="yes" xml:space="preserve">
          <source>The method by which a submodule is updated by &lt;code&gt;git submodule update&lt;/code&gt;, which is the only affected command, others such as &lt;code&gt;git checkout --recurse-submodules&lt;/code&gt; are unaffected. It exists for historical reasons, when &lt;code&gt;git submodule&lt;/code&gt; was the only command to interact with submodules; settings like &lt;code&gt;submodule.active&lt;/code&gt; and &lt;code&gt;pull.rebase&lt;/code&gt; are more specific. It is populated by &lt;code&gt;git submodule init&lt;/code&gt; from the &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; file. See description of &lt;code&gt;update&lt;/code&gt; command in &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;.</source>
          <target state="translated">影響を受ける唯一のコマンドである &lt;code&gt;git submodule update&lt;/code&gt; によってサブモジュールが更新される方法。他の &lt;code&gt;git checkout --recurse-submodules&lt;/code&gt; などは影響を受けません。これは、 &lt;code&gt;git submodule&lt;/code&gt; がサブモジュールと対話する唯一のコマンドだった歴史的な理由で存在しています。 &lt;code&gt;submodule.active&lt;/code&gt; や &lt;code&gt;pull.rebase&lt;/code&gt; などの設定はより具体的です。&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;ファイルから &lt;code&gt;git submodule init&lt;/code&gt; によって読み込まれます。&lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1]&lt;/a&gt;の &lt;code&gt;update&lt;/code&gt; コマンドの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="04ef06b50b9899f38b1e5f5c81eb00396b6d2328" translate="yes" xml:space="preserve">
          <source>The mode parameter is optional (defaults to &lt;code&gt;all&lt;/code&gt;), and is used to specify the handling of untracked files; when -u is not used, the default is &lt;code&gt;normal&lt;/code&gt;, i.e. show untracked files and directories.</source>
          <target state="translated">modeパラメータはオプションであり（デフォルトは &lt;code&gt;all&lt;/code&gt; ）、追跡されていないファイルの処理を指定するために使用されます。-uを使用しない場合、デフォルトは &lt;code&gt;normal&lt;/code&gt; です。つまり、追跡されていないファイルとディレクトリが表示されます。</target>
        </trans-unit>
        <trans-unit id="daee71f2e966cf5f390a0401b9f0381f1242178c" translate="yes" xml:space="preserve">
          <source>The mode parameter is used to specify the handling of ignored files. It is optional: it defaults to &lt;code&gt;traditional&lt;/code&gt;.</source>
          <target state="translated">modeパラメータは、無視されたファイルの処理を指定するために使用されます。これはオプションである：それはデフォルト &lt;code&gt;traditional&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="789771a80f50eaf70002a855307c4e88ea3d25bd" translate="yes" xml:space="preserve">
          <source>The mode parameter is used to specify the handling of untracked files. It is optional: it defaults to &lt;code&gt;all&lt;/code&gt;, and if specified, it must be stuck to the option (e.g. &lt;code&gt;-uno&lt;/code&gt;, but not &lt;code&gt;-u no&lt;/code&gt;).</source>
          <target state="translated">modeパラメータは、追跡されていないファイルの処理を指定するために使用されます。これはオプションです。デフォルトは &lt;code&gt;all&lt;/code&gt; で、指定する場合はオプションに &lt;code&gt;-uno&lt;/code&gt; する必要があります（例：-uno、ただし &lt;code&gt;-u no&lt;/code&gt; ではない）。</target>
        </trans-unit>
        <trans-unit id="d56062b3fd6eee94e49e5896b7d127ee25df01a1" translate="yes" xml:space="preserve">
          <source>The modifications stashed away by this command can be listed with &lt;code&gt;git stash list&lt;/code&gt;, inspected with &lt;code&gt;git stash show&lt;/code&gt;, and restored (potentially on top of a different commit) with &lt;code&gt;git stash apply&lt;/code&gt;. Calling &lt;code&gt;git stash&lt;/code&gt; without any arguments is equivalent to &lt;code&gt;git stash push&lt;/code&gt;. A stash is by default listed as &quot;WIP on &lt;code&gt;branchname&lt;/code&gt; &amp;hellip;​&quot;, but you can give a more descriptive message on the command line when you create one.</source>
          <target state="translated">このコマンドによって隠された変更は、 &lt;code&gt;git stash list&lt;/code&gt; で一覧 &lt;code&gt;git stash show&lt;/code&gt; 、git stash showで検査され、 &lt;code&gt;git stash apply&lt;/code&gt; で復元される可能性があります（別のコミットの上にある）。引数なしで &lt;code&gt;git stash&lt;/code&gt; を呼び出すことは、 &lt;code&gt;git stash push&lt;/code&gt; と同等です。 stashはデフォルトでは「WIP on &lt;code&gt;branchname&lt;/code&gt; &amp;hellip;」と表示されますが、作成時にコマンドラインでより詳細なメッセージを表示できます。</target>
        </trans-unit>
        <trans-unit id="e06fa83026ee56ec3b62a659fa5a44c6e4e4728d" translate="yes" xml:space="preserve">
          <source>The module path (only needed if httpd is Apache). (Default: /usr/lib/apache2/modules)</source>
          <target state="translated">モジュールのパス (httpd が Apache の場合のみ必要)。(デフォルト:/usr/lib/apache2/modules)</target>
        </trans-unit>
        <trans-unit id="08ed4170506fa174e84f549a0e3f26086c486529" translate="yes" xml:space="preserve">
          <source>The more complex forms are:</source>
          <target state="translated">より複雑な形になっています。</target>
        </trans-unit>
        <trans-unit id="7d735293dee944ca58932a7261110828d307c793" translate="yes" xml:space="preserve">
          <source>The most common cause of dangling objects is that you&amp;rsquo;ve rebased a branch, or you have pulled from somebody else who rebased a branch&amp;mdash;​see &lt;a href=&quot;#cleaning-up-history&quot;&gt;Rewriting history and maintaining patch series&lt;/a&gt;. In that case, the old head of the original branch still exists, as does everything it pointed to. The branch pointer itself just doesn&amp;rsquo;t, since you replaced it with another one.</source>
          <target state="translated">ぶら下がっているオブジェクトの最も一般的な原因は、ブランチをリベースしたか、ブランチをリベースした他の誰かからプルしたことです。&lt;a href=&quot;#cleaning-up-history&quot;&gt;履歴の書き換えとパッチシリーズの維持を&lt;/a&gt;参照してください。その場合、元のブランチの古いヘッドが存在し、それが指しているすべてのものが存在します。ブランチポインター自体は、別のものに置き換えたため、実際には機能しません。</target>
        </trans-unit>
        <trans-unit id="8bc143dd44c89f63596943262174b04211332773" translate="yes" xml:space="preserve">
          <source>The multi-pack-index (MIDX for short) stores a list of objects and their offsets into multiple packfiles. It contains:</source>
          <target state="translated">multi-pack-index (略して MIDX)は、オブジェクトのリストとそのオフセットを複数のパックファイルに格納します。これには以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="4ca15f678a55a1443f2d701a54958e45ad8a0235" translate="yes" xml:space="preserve">
          <source>The multi-pack-index allows many packfiles, especially in a context where repacking is expensive (such as a very large repo), or unexpected maintenance time is unacceptable (such as a high-demand build machine). However, the multi-pack-index needs to be rewritten in full every time. We can extend the format to be incremental, so writes are fast. By storing a small &quot;tip&quot; multi-pack-index that points to large &quot;base&quot; MIDX files, we can keep writes fast while still reducing the number of binary searches required for object lookups.</source>
          <target state="translated">multi-pack-indexを使うと、特にリパックにコストがかかるような文脈(非常に大きなレポなど)や、予期せぬメンテナンス時間が許容できないような文脈(需要の高いビルドマシンなど)では、多くのパックファイルを使用することができます。しかし、マルチパックインデックスは毎回フルに書き換える必要があります。そこで、フォーマットをインクリメンタルに拡張することで、書き込みが高速になります。大きな &quot;ベース &quot;MIDXファイルを指す小さな &quot;tip &quot;マルチパックインデックスを格納することで、オブジェクトの検索に必要なバイナリ検索の数を減らしつつ、書き込みを高速に保つことができます。</target>
        </trans-unit>
        <trans-unit id="d98c840529f1ab7c2fa3df48a823219f4ff9a17e" translate="yes" xml:space="preserve">
          <source>The multi-pack-index files refer to multiple pack-files and loose objects.</source>
          <target state="translated">マルチパックインデックスファイルは、複数のパックファイルとルーズオブジェクトを参照しています。</target>
        </trans-unit>
        <trans-unit id="1e0c8af9211e361d1a35789c37df84247f7ae9ac" translate="yes" xml:space="preserve">
          <source>The name and the e-mail address of the owner of the key that signed the push certificate.</source>
          <target state="translated">プッシュ証明書に署名した鍵の所有者の名前とメールアドレス。</target>
        </trans-unit>
        <trans-unit id="2551d22d5e60fb51293e5ef827d3f2d640624d55" translate="yes" xml:space="preserve">
          <source>The name of a commit at which to start the new branch; see &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; for details. Defaults to &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">新しいブランチを開始するコミットの名前。詳細は&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;をご覧ください。デフォルトは &lt;code&gt;HEAD&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0efd5464958e1be85e38672256be6f6e17bc462a" translate="yes" xml:space="preserve">
          <source>The name of a local ref which can be considered &amp;ldquo;upstream&amp;rdquo; from the displayed ref. Respects &lt;code&gt;:short&lt;/code&gt;, &lt;code&gt;:lstrip&lt;/code&gt; and &lt;code&gt;:rstrip&lt;/code&gt; in the same way as &lt;code&gt;refname&lt;/code&gt; above. Additionally respects &lt;code&gt;:track&lt;/code&gt; to show &quot;[ahead N, behind M]&quot; and &lt;code&gt;:trackshort&lt;/code&gt; to show the terse version: &quot;&amp;gt;&quot; (ahead), &quot;&amp;lt;&quot; (behind), &quot;&amp;lt;&amp;gt;&quot; (ahead and behind), or &quot;=&quot; (in sync). &lt;code&gt;:track&lt;/code&gt; also prints &quot;[gone]&quot; whenever unknown upstream ref is encountered. Append &lt;code&gt;:track,nobracket&lt;/code&gt; to show tracking information without brackets (i.e &quot;ahead N, behind M&quot;).</source>
          <target state="translated">表示された参照の「上流」と見なすことができるローカル参照の名前。点 &lt;code&gt;:short&lt;/code&gt; 、 &lt;code&gt;:lstrip&lt;/code&gt; と &lt;code&gt;:rstrip&lt;/code&gt; と同様に &lt;code&gt;refname&lt;/code&gt; 上記。さらに &lt;code&gt;:track&lt;/code&gt; は &quot;[ahead N、behind M]&quot; を表示し、 &lt;code&gt;:trackshort&lt;/code&gt; は簡潔なバージョンを表示します： &quot;&amp;gt;&quot;（ahead）、 &quot;&amp;lt;&quot;（behind）、 &quot;&amp;lt;&amp;gt;&quot;（ahead and behind）、または &quot; = &quot;（同期中）。 &lt;code&gt;:track&lt;/code&gt; はまた、不明なアップストリーム参照に遭遇するたびに &quot;[gone]&quot;を出力します。追加 &lt;code&gt;:track,nobracket&lt;/code&gt; 括弧なしで追跡情報を表示する（すなわち、「先にM背後N」）。</target>
        </trans-unit>
        <trans-unit id="285243cf13ade280f7038dfb92bbdaa7d26dec36" translate="yes" xml:space="preserve">
          <source>The name of a local ref which represents the &lt;code&gt;@{push}&lt;/code&gt; location for the displayed ref. Respects &lt;code&gt;:short&lt;/code&gt;, &lt;code&gt;:lstrip&lt;/code&gt;, &lt;code&gt;:rstrip&lt;/code&gt;, &lt;code&gt;:track&lt;/code&gt;, &lt;code&gt;:trackshort&lt;/code&gt;, &lt;code&gt;:remotename&lt;/code&gt;, and &lt;code&gt;:remoteref&lt;/code&gt; options as &lt;code&gt;upstream&lt;/code&gt; does. Produces an empty string if no &lt;code&gt;@{push}&lt;/code&gt; ref is configured.</source>
          <target state="translated">表示された参照の &lt;code&gt;@{push}&lt;/code&gt; 位置を表すローカル参照の名前。尊重 &lt;code&gt;:short&lt;/code&gt; 、 &lt;code&gt;:lstrip&lt;/code&gt; 、 &lt;code&gt;:rstrip&lt;/code&gt; 、 &lt;code&gt;:track&lt;/code&gt; 、 &lt;code&gt;:trackshort&lt;/code&gt; 、 &lt;code&gt;:remotename&lt;/code&gt; 、および &lt;code&gt;:remoteref&lt;/code&gt; オプションとして &lt;code&gt;upstream&lt;/code&gt; ありません。 &lt;code&gt;@{push}&lt;/code&gt; 参照が構成されていない場合、空の文字列を生成します。</target>
        </trans-unit>
        <trans-unit id="25973fbcb02049e23787d52ffa23363b0665166c" translate="yes" xml:space="preserve">
          <source>The name of a new directory to clone into. The &quot;humanish&quot; part of the source repository is used if no directory is explicitly given (&lt;code&gt;repo&lt;/code&gt; for &lt;code&gt;/path/to/repo.git&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt; for &lt;code&gt;host.xz:foo/.git&lt;/code&gt;). Cloning into an existing directory is only allowed if the directory is empty.</source>
          <target state="translated">クローンを作成する新しいディレクトリの名前。ディレクトリが明示的に指定されていない場合、ソース・リポジトリの「humanish」部分が使用される（ &lt;code&gt;repo&lt;/code&gt; 用 &lt;code&gt;/path/to/repo.git&lt;/code&gt; および &lt;code&gt;foo&lt;/code&gt; のため &lt;code&gt;host.xz:foo/.git&lt;/code&gt; ）。既存のディレクトリへのクローン作成は、ディレクトリが空の場合にのみ許可されます。</target>
        </trans-unit>
        <trans-unit id="3c836d4cc86fbcc3a897aa8fab973465c40a1899" translate="yes" xml:space="preserve">
          <source>The name of an existing branch already in fast-import&amp;rsquo;s internal branch table. If fast-import doesn&amp;rsquo;t know the name, it&amp;rsquo;s treated as a SHA-1 expression.</source>
          <target state="translated">高速インポートの内部ブランチテーブルに既に存在する既存のブランチの名前。高速インポートで名前がわからない場合は、SHA-1式として扱われます。</target>
        </trans-unit>
        <trans-unit id="c21a579b2f8550495cd7f286a4f77b45b3df2f6e" translate="yes" xml:space="preserve">
          <source>The name of an existing branch to rename.</source>
          <target state="translated">名前を変更する既存のブランチの名前。</target>
        </trans-unit>
        <trans-unit id="b35cfa9e6735c6918643ac8769ab4e5dd81020f0" translate="yes" xml:space="preserve">
          <source>The name of an external credential helper, and any associated options. If the helper name is not an absolute path, then the string &lt;code&gt;git
credential-&lt;/code&gt; is prepended. The resulting string is executed by the shell (so, for example, setting this to &lt;code&gt;foo --option=bar&lt;/code&gt; will execute &lt;code&gt;git credential-foo --option=bar&lt;/code&gt; via the shell. See the manual of specific helpers for examples of their use.</source>
          <target state="translated">外部資格情報ヘルパーの名前、および関連するオプション。ヘルパー名が絶対パスでない場合、文字列 &lt;code&gt;git credential-&lt;/code&gt; が先頭に追加されます。結果の文字列はシェルによって実行されます（たとえば、これを &lt;code&gt;foo --option=bar&lt;/code&gt; に設定すると、シェルを介して &lt;code&gt;git credential-foo --option=bar&lt;/code&gt; が実行されます。使用例については、特定のヘルパーのマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="7efaaad02f8c0d5eaaddaa5b6f8a8113410c8ef1" translate="yes" xml:space="preserve">
          <source>The name of one of the following can be used instead of a URL as &lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; 引数として、URLの代わりに次のいずれかの名前を使用できます。</target>
        </trans-unit>
        <trans-unit id="f54520854ea19fafb55997c9840c558f7f80fed9" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;replace&lt;/code&gt; reference is the SHA-1 of the object that is replaced. The content of the &lt;code&gt;replace&lt;/code&gt; reference is the SHA-1 of the replacement object.</source>
          <target state="translated">&lt;code&gt;replace&lt;/code&gt; 参照の名前は、置換されるオブジェクトのSHA-1です。 &lt;code&gt;replace&lt;/code&gt; 参照の内容は、置換オブジェクトのSHA-1です。</target>
        </trans-unit>
        <trans-unit id="117daad0c937bbfd67b26eaa98382dde664a6203" translate="yes" xml:space="preserve">
          <source>The name of the branch to create or delete. The new branch name must pass all checks defined by &lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format[1]&lt;/a&gt;. Some of these checks may restrict the characters allowed in a branch name.</source>
          <target state="translated">作成または削除するブランチの名前。新しいブランチ名は、&lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format [1]で&lt;/a&gt;定義されたすべてのチェックに合格する必要があります。これらのチェックの一部は、ブランチ名で許可される文字を制限する場合があります。</target>
        </trans-unit>
        <trans-unit id="f40b450a4e1f94bf798289a960712dae0a6f632b" translate="yes" xml:space="preserve">
          <source>The name of the client can be given to &lt;code&gt;git p4&lt;/code&gt; in multiple ways. The variable &lt;code&gt;git-p4.client&lt;/code&gt; takes precedence if it exists. Otherwise, normal p4 mechanisms of determining the client are used: environment variable &lt;code&gt;P4CLIENT&lt;/code&gt;, a file referenced by &lt;code&gt;P4CONFIG&lt;/code&gt;, or the local host name.</source>
          <target state="translated">クライアントの名前は &lt;code&gt;git p4&lt;/code&gt; に複数の方法で指定できます。変数 &lt;code&gt;git-p4.client&lt;/code&gt; が存在する場合は、それが優先されます。それ以外の場合は、クライアントを決定する通常のp4メカニズムが使用されます：環境変数 &lt;code&gt;P4CLIENT&lt;/code&gt; 、 &lt;code&gt;P4CONFIG&lt;/code&gt; によって参照されるファイル、またはローカルホスト名。</target>
        </trans-unit>
        <trans-unit id="d25f4900ca4ac26428c337fc8a49a0fffaa87baa" translate="yes" xml:space="preserve">
          <source>The name of the current branch is stored in .git/HEAD.</source>
          <target state="translated">現在のブランチの名前は.git/headに格納されています。</target>
        </trans-unit>
        <trans-unit id="9192c74ec25457f29baaadaeb1d2b767ba20ddac" translate="yes" xml:space="preserve">
          <source>The name of the local ref being pushed, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix. In the case of deletion, the name of the local ref is omitted.</source>
          <target state="translated">プッシュされるローカル参照の名前から、その &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; プレフィックスを除いたもの。削除の場合、ローカル参照の名前は省略されます。</target>
        </trans-unit>
        <trans-unit id="61c75d700127b0c70d569d247bca51622e343006" translate="yes" xml:space="preserve">
          <source>The name of the local ref being updated, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix.</source>
          <target state="translated">更新されるローカルrefの名前から &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; プレフィックスを除いたもの。</target>
        </trans-unit>
        <trans-unit id="40299b8374a45bc90296f421fddf5763cb8c6908" translate="yes" xml:space="preserve">
          <source>The name of the object to show. For a more complete list of ways to spell object names, see the &quot;SPECIFYING REVISIONS&quot; section in &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;.</source>
          <target state="translated">表示するオブジェクトの名前。オブジェクト名を綴る方法のより完全なリストについては、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]&lt;/a&gt;の「リビジョンの指定」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="15cfdda92a704493f44c3f6bda85fdb4fe25cc87" translate="yes" xml:space="preserve">
          <source>The name of the ref (the part after $GIT_DIR/). For a non-ambiguous short name of the ref append &lt;code&gt;:short&lt;/code&gt;. The option core.warnAmbiguousRefs is used to select the strict abbreviation mode. If &lt;code&gt;lstrip=&amp;lt;N&amp;gt;&lt;/code&gt; (&lt;code&gt;rstrip=&amp;lt;N&amp;gt;&lt;/code&gt;) is appended, strips &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; slash-separated path components from the front (back) of the refname (e.g. &lt;code&gt;%(refname:lstrip=2)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;%(refname:rstrip=2)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;refs&lt;/code&gt;). If &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; is a negative number, strip as many path components as necessary from the specified end to leave &lt;code&gt;-&amp;lt;N&amp;gt;&lt;/code&gt; path components (e.g. &lt;code&gt;%(refname:lstrip=-2)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;tags/foo&lt;/code&gt; and &lt;code&gt;%(refname:rstrip=-1)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;refs&lt;/code&gt;). When the ref does not have enough components, the result becomes an empty string if stripping with positive &amp;lt;N&amp;gt;, or it becomes the full refname if stripping with negative &amp;lt;N&amp;gt;. Neither is an error.</source>
          <target state="translated">参照の名前（$ GIT_DIR /の後の部分）。 refの明確な短い名前の場合は、 &lt;code&gt;:short&lt;/code&gt; を追加します。オプションcore.warnAmbiguousRefsは、厳密な略語モードを選択するために使用されます。もし &lt;code&gt;lstrip=&amp;lt;N&amp;gt;&lt;/code&gt; （ &lt;code&gt;rstrip=&amp;lt;N&amp;gt;&lt;/code&gt; ）追加され、ストリップ &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; もしrefnameの前面（背面）からスラッシュで区切られたパスの成分（例えば &lt;code&gt;%(refname:lstrip=2)&lt;/code&gt; オン &lt;code&gt;refs/tags/foo&lt;/code&gt; &lt;code&gt;foo&lt;/code&gt; および &lt;code&gt;%(refname:rstrip=2)&lt;/code&gt; オン &lt;code&gt;refs/tags/foo&lt;/code&gt; に &lt;code&gt;refs&lt;/code&gt; ）。場合 &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; は残すために、指定された端部から必要な数のパス成分として負の数、ストリップである &lt;code&gt;-&amp;lt;N&amp;gt;&lt;/code&gt; パスコンポーネント（たとえば、 &lt;code&gt;%(refname:lstrip=-2)&lt;/code&gt; は &lt;code&gt;refs/tags/foo&lt;/code&gt; を &lt;code&gt;tags/foo&lt;/code&gt; に &lt;code&gt;%(refname:rstrip=-1)&lt;/code&gt; 、％（refname：rstrip = -1）は &lt;code&gt;refs/tags/foo&lt;/code&gt; を &lt;code&gt;refs&lt;/code&gt; に変換します）。refに十分なコンポーネントがない場合、正の&amp;lt;N&amp;gt;で削除すると結果は空の文字列になり、負の&amp;lt;N&amp;gt;で削除すると完全なrefnameになります。どちらもエラーではありません。</target>
        </trans-unit>
        <trans-unit id="d3667dc69f3d60260150d30873ae903291e9c610" translate="yes" xml:space="preserve">
          <source>The name of the remote ref being fetched from, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix. In the case of deletion, the name of the remote ref is &quot;(none)&quot;.</source>
          <target state="translated">フェッチ元のリモート参照の名前から、その &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; プレフィックスを除いた名前。削除の場合、リモート参照の名前は「（なし）」です。</target>
        </trans-unit>
        <trans-unit id="f1e1380262032f81dbdd04e4a724dd0dac2f66a0" translate="yes" xml:space="preserve">
          <source>The name of the remote ref being updated, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix.</source>
          <target state="translated">更新されるリモート参照の名前から、その &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; 接頭辞を除いたもの。</target>
        </trans-unit>
        <trans-unit id="cf1208454bdf4c7c5a0ab602103e6dd838ca212a" translate="yes" xml:space="preserve">
          <source>The name of the repository in gitweb is the path to its &lt;code&gt;$GIT_DIR&lt;/code&gt; (its object database) relative to &lt;code&gt;$projectroot&lt;/code&gt;. Therefore the repository $repo can be found at &quot;$projectroot/$repo&quot;.</source>
          <target state="translated">gitwebでリポジトリの名前は、そのパスである &lt;code&gt;$GIT_DIR&lt;/code&gt; に対して（そのオブジェクトデータベース） &lt;code&gt;$projectroot&lt;/code&gt; 。したがって、リポジトリ$ repoは &quot;$ projectroot / $ repo&quot;にあります。</target>
        </trans-unit>
        <trans-unit id="1b6cc45302b6351d18e813818cde0845c0a5a22a" translate="yes" xml:space="preserve">
          <source>The name of the tag to create, delete, or describe. The new tag name must pass all checks defined by &lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format[1]&lt;/a&gt;. Some of these checks may restrict the characters allowed in a tag name.</source>
          <target state="translated">作成、削除、または説明するタグの名前。新しいタグ名は、&lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format [1]で&lt;/a&gt;定義されたすべてのチェックに合格する必要があります。これらのチェックの一部は、タグ名で許可される文字を制限する場合があります。</target>
        </trans-unit>
        <trans-unit id="964fd80a7ebc3b646125e059ac3c7f8c3a22061f" translate="yes" xml:space="preserve">
          <source>The named branches will be interpreted as if specified with the &lt;code&gt;-t&lt;/code&gt; option on the &lt;code&gt;git remote add&lt;/code&gt; command line.</source>
          <target state="translated">名前付きブランチは、 &lt;code&gt;git remote add&lt;/code&gt; コマンドラインの &lt;code&gt;-t&lt;/code&gt; オプションで指定されているかのように解釈されます。</target>
        </trans-unit>
        <trans-unit id="a7226417649eb7c8f42ca4934a290033c08aad1c" translate="yes" xml:space="preserve">
          <source>The names of objects to show (defaults to &lt;code&gt;HEAD&lt;/code&gt;). For a more complete list of ways to spell object names, see &quot;SPECIFYING REVISIONS&quot; section in &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;.</source>
          <target state="translated">表示するオブジェクトの名前（デフォルトは &lt;code&gt;HEAD&lt;/code&gt; ）。オブジェクト名を綴る方法のより完全なリストについては、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]の&lt;/a&gt;「改訂の指定」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="df439b2df93c9264d2652e8aa379f62f3b6ab5ac" translate="yes" xml:space="preserve">
          <source>The names of refs that are fetched, together with the object names they point at, are written to &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt;. This information may be used by scripts or other git commands, such as &lt;a href=&quot;git-pull&quot;&gt;git-pull[1]&lt;/a&gt;.</source>
          <target state="translated">フェッチされた参照の名前は、参照先のオブジェクト名とともに、 &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt; に書き込まれます。この情報は、スクリプトまたは他のgitコマンド（&lt;a href=&quot;git-pull&quot;&gt;git-pull [1]&lt;/a&gt;など）で使用できます。</target>
        </trans-unit>
        <trans-unit id="1b9c4b549f992b26edb42d00411780a65661d81d" translate="yes" xml:space="preserve">
          <source>The native transport (i.e. git:// URL) does no authentication and should be used with caution on unsecured networks.</source>
          <target state="translated">ネイティブトランスポート (つまり git://URL)は認証を行わないので、安全ではないネットワーク上では注意して使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="86d32cda4c46d201605240981feec896fb3daceb" translate="yes" xml:space="preserve">
          <source>The new branch head will point to this commit. It may be given as a branch name, a commit-id, or a tag. If this option is omitted, the current HEAD will be used instead.</source>
          <target state="translated">新しいブランチの先頭はこのコミットを指します。ブランチ名、commit-id、タグのいずれかを指定します。このオプションを省略した場合は、現在の HEAD が代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="597e47a48a8bd8b3528838dd5cebedeb7b241f60" translate="yes" xml:space="preserve">
          <source>The new name for an existing branch. The same restrictions as for &amp;lt;branchname&amp;gt; apply.</source>
          <target state="translated">既存のブランチの新しい名前。&amp;lt;branchname&amp;gt;と同じ制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="ade318097a09c67b5bdaa6c1344cf2a281d7cac8" translate="yes" xml:space="preserve">
          <source>The next parameter is the pattern. This option has to be used for patterns starting with &lt;code&gt;-&lt;/code&gt; and should be used in scripts passing user input to grep. Multiple patterns are combined by &lt;code&gt;or&lt;/code&gt;.</source>
          <target state="translated">次のパラメーターはパターンです。このオプションは &lt;code&gt;-&lt;/code&gt; で始まるパターンに使用する必要があり、ユーザー入力をgrepに渡すスクリプトで使用する必要があります。 &lt;code&gt;or&lt;/code&gt; 複数のパターンを組み合わせます。</target>
        </trans-unit>
        <trans-unit id="00f28e3b882b5553d45ceeb08082d3dcda522dd0" translate="yes" xml:space="preserve">
          <source>The next step of merging is to merge these three versions of the file, using 3-way merge. This is done by giving &lt;code&gt;git merge-one-file&lt;/code&gt; command as one of the arguments to &lt;code&gt;git merge-index&lt;/code&gt; command:</source>
          <target state="translated">マージの次のステップは、3方向マージを使用して、これらの3つのバージョンのファイルをマージすることです。これを行うには、 &lt;code&gt;git merge-one-file&lt;/code&gt; コマンドを &lt;code&gt;git merge-index&lt;/code&gt; コマンドの引数の1つとして指定します。</target>
        </trans-unit>
        <trans-unit id="c203649e7405cacf1f66f3229b4d864ccf1b5f34" translate="yes" xml:space="preserve">
          <source>The nonce string the process asked the signer to include in the push certificate. If this does not match the value recorded on the &quot;nonce&quot; header in the push certificate, it may indicate that the certificate is a valid one that is being replayed from a separate &quot;git push&quot; session.</source>
          <target state="translated">プロセスが署名者にプッシュ証明書に含めるよう求めた nonce 文字列。これがプッシュ証明書の &quot;nonce&quot; ヘッダに記録された値と一致しない場合は、その証明書が別の &quot;git push&quot; セッションで再生されたものであることを示している可能性があります。</target>
        </trans-unit>
        <trans-unit id="a81eae6f204563324e9f0299e6e5a18af11339c2" translate="yes" xml:space="preserve">
          <source>The normal format target is a tradition printf format and similar to GIT_TRACE format. This format is enabled with the &lt;code&gt;GIT_TRACE2&lt;/code&gt; environment variable or the &lt;code&gt;trace2.normalTarget&lt;/code&gt; system or global config setting.</source>
          <target state="translated">通常のフォーマットターゲットは従来のprintfフォーマットであり、GIT_TRACEフォーマットに似ています。このフォーマットは、 &lt;code&gt;GIT_TRACE2&lt;/code&gt; 環境変数または &lt;code&gt;trace2.normalTarget&lt;/code&gt; システムまたはグローバル構成設定で有効になります。</target>
        </trans-unit>
        <trans-unit id="08867837836724d3f4c3cfbd7d03fa5d964eec62" translate="yes" xml:space="preserve">
          <source>The number of additional commits is the number of commits which would be displayed by &quot;git log v1.0.4..parent&quot;. The hash suffix is &quot;-g&quot; + unambiguous abbreviation for the tip commit of parent (which was &lt;code&gt;2414721b194453f058079d897d13c4e377f92dc6&lt;/code&gt;). The &quot;g&quot; prefix stands for &quot;git&quot; and is used to allow describing the version of a software depending on the SCM the software is managed with. This is useful in an environment where people may use different SCMs.</source>
          <target state="translated">追加のコミットの数は、「git log v1.0.4..parent」によって表示されるコミットの数です。ハッシュサフィックスは、 &quot;-g&quot; +親のチップコミットの明確な略語（ &lt;code&gt;2414721b194453f058079d897d13c4e377f92dc6&lt;/code&gt; でした）です。&quot;g&quot;プレフィックスは &quot;git&quot;を表し、ソフトウェアが管理されているSCMに応じてソフトウェアのバージョンを説明するために使用されます。これは、人々が異なるSCMを使用する可能性がある環境で役立ちます。</target>
        </trans-unit>
        <trans-unit id="83386653d6009935020ea78a4c28a793cc5fa198" translate="yes" xml:space="preserve">
          <source>The number of curl sessions (counted across slots) to be kept across requests. They will not be ended with curl_easy_cleanup() until http_cleanup() is invoked. If USE_CURL_MULTI is not defined, this value will be capped at 1. Defaults to 1.</source>
          <target state="translated">リクエストにまたがって保持する curl セッションの数 (スロットにまたがってカウントされる)。http_cleanup()が起動されるまでは、curl_easy_cleanup()で終了しません。USE_CURL_MULTI が定義されていない場合、この値は 1 に制限されます。 デフォルトは 1 です。</target>
        </trans-unit>
        <trans-unit id="eb593ed0188a165abaa2fc9b58825ac993fcfa11" translate="yes" xml:space="preserve">
          <source>The number of files to consider when performing rename detection during a merge; if not specified, defaults to the value of diff.renameLimit. This setting has no effect if rename detection is turned off.</source>
          <target state="translated">指定しない場合のデフォルトは diff.renameLimit の値です。この設定は、リネーム検出をオフにした場合には何の影響もありません。</target>
        </trans-unit>
        <trans-unit id="b49ca7e6ecad75b8cf0b0ec3dcf469e017a13140" translate="yes" xml:space="preserve">
          <source>The number of files to consider when performing rename detection in &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt; and &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;. Defaults to the value of diff.renameLimit.</source>
          <target state="translated">&lt;a href=&quot;git-status&quot;&gt;git-status [1]&lt;/a&gt;および&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]で&lt;/a&gt;名前変更の検出を実行するときに考慮するファイルの数。デフォルトはdiff.renameLimitの値です。</target>
        </trans-unit>
        <trans-unit id="62caddb975571c60931b3e5e41910f9ec3dfea6e" translate="yes" xml:space="preserve">
          <source>The number of files to consider when performing the copy/rename detection; equivalent to the &lt;code&gt;git diff&lt;/code&gt; option &lt;code&gt;-l&lt;/code&gt;. This setting has no effect if rename detection is turned off.</source>
          <target state="translated">コピー/名前変更の検出を実行するときに考慮するファイルの数。 &lt;code&gt;git diff&lt;/code&gt; オプション &lt;code&gt;-l&lt;/code&gt; と同等です。この設定は、名前の変更の検出がオフになっている場合は効果がありません。</target>
        </trans-unit>
        <trans-unit id="f40a726880d5eda55c8da498a0add02c8ea2a7b1" translate="yes" xml:space="preserve">
          <source>The number of push options given on the command line of &lt;code&gt;git push --push-option=...&lt;/code&gt; can be read from the environment variable &lt;code&gt;GIT_PUSH_OPTION_COUNT&lt;/code&gt;, and the options themselves are found in &lt;code&gt;GIT_PUSH_OPTION_0&lt;/code&gt;, &lt;code&gt;GIT_PUSH_OPTION_1&lt;/code&gt;,&amp;hellip;​ If it is negotiated to not use the push options phase, the environment variables will not be set. If the client selects to use push options, but doesn&amp;rsquo;t transmit any, the count variable will be set to zero, &lt;code&gt;GIT_PUSH_OPTION_COUNT=0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git push --push-option=...&lt;/code&gt; のコマンドラインで指定されたプッシュオプションの数は、環境変数 &lt;code&gt;GIT_PUSH_OPTION_COUNT&lt;/code&gt; から読み取ることができ、オプション自体は &lt;code&gt;GIT_PUSH_OPTION_0&lt;/code&gt; 、 &lt;code&gt;GIT_PUSH_OPTION_1&lt;/code&gt; 、...交渉されていない場合プッシュオプションフェーズを使用すると、環境変数は設定されません。クライアントがプッシュオプションを使用することを選択したが、何も送信しない場合、カウント変数はゼロ（ &lt;code&gt;GIT_PUSH_OPTION_COUNT=0&lt;/code&gt; )に設定されます。</target>
        </trans-unit>
        <trans-unit id="c5ad10bd3ab58adc794f2122271c46d58529bef4" translate="yes" xml:space="preserve">
          <source>The number of spaces between columns. One space by default.</source>
          <target state="translated">列と列の間のスペースの数。デフォルトではスペースは1つです。</target>
        </trans-unit>
        <trans-unit id="911462b0802b22317c5a57a0a0510dbf0c397a66" translate="yes" xml:space="preserve">
          <source>The number of submodules fetched at the same time. Defaults to the &lt;code&gt;submodule.fetchJobs&lt;/code&gt; option.</source>
          <target state="translated">同時にフェッチされたサブモジュールの数。デフォルトは &lt;code&gt;submodule.fetchJobs&lt;/code&gt; オプションです。</target>
        </trans-unit>
        <trans-unit id="34de3b8749bfae0c14ff8d34783f05c9920748b5" translate="yes" xml:space="preserve">
          <source>The object can be a blob or a submodule commit. It implies the &lt;code&gt;-t&lt;/code&gt; option in &lt;code&gt;git-log&lt;/code&gt; to also find trees.</source>
          <target state="translated">オブジェクトはblobまたはサブモジュールコミットにすることができます。これは、 &lt;code&gt;git-log&lt;/code&gt; の &lt;code&gt;-t&lt;/code&gt; オプションがツリーを検索することも意味します。</target>
        </trans-unit>
        <trans-unit id="2794f5933199b4937a09c41b8d049f6b88620c25" translate="yes" xml:space="preserve">
          <source>The object database contains objects of three main types: blobs, which hold file data; trees, which point to blobs and other trees to build up directory hierarchies; and commits, which each reference a single tree and some number of parent commits.</source>
          <target state="translated">オブジェクトデータベースには、主に 3 つのタイプのオブジェクトが含まれています。ファイルデータを保持する blob、ディレクトリ階層を構築するために blob や他のツリーを指す tree、そしてそれぞれが 1 つのツリーといくつかの数の親コミットを参照する commits です。</target>
        </trans-unit>
        <trans-unit id="b5ea163b65a2243d9fc238d7c50700c517adc350" translate="yes" xml:space="preserve">
          <source>The object database is the rather elegant system used to store the history of your project&amp;mdash;​files, directories, and commits.</source>
          <target state="translated">オブジェクトデータベースは、プロジェクトの履歴（ファイル、ディレクトリ、コミット）を保存するために使用されるかなり洗練されたシステムです。</target>
        </trans-unit>
        <trans-unit id="db080c7937810b605e4381605a2e18077b89e3c0" translate="yes" xml:space="preserve">
          <source>The object name (aka SHA-1). For a non-ambiguous abbreviation of the object name append &lt;code&gt;:short&lt;/code&gt;. For an abbreviation of the object name with desired length append &lt;code&gt;:short=&amp;lt;length&amp;gt;&lt;/code&gt;, where the minimum length is MINIMUM_ABBREV. The length may be exceeded to ensure unique object names.</source>
          <target state="translated">オブジェクト名（別名SHA-1）。オブジェクト名の明確な省略形の場合は、 &lt;code&gt;:short&lt;/code&gt; を追加します。必要な長さのオブジェクト名の省略形の場合、append &lt;code&gt;:short=&amp;lt;length&amp;gt;&lt;/code&gt; 。最小長はMINIMUM_ABBREVです。固有のオブジェクト名を確保するために、長さを超える場合があります。</target>
        </trans-unit>
        <trans-unit id="b335d1a75376848bee9affb50a6203b316fcc02d" translate="yes" xml:space="preserve">
          <source>The object referenced by &amp;lt;src&amp;gt; is used to update the &amp;lt;dst&amp;gt; reference on the remote side. Whether this is allowed depends on where in &lt;code&gt;refs/*&lt;/code&gt; the &amp;lt;dst&amp;gt; reference lives as described in detail below, in those sections &quot;update&quot; means any modifications except deletes, which as noted after the next few sections are treated differently.</source>
          <target state="translated">&amp;lt;src&amp;gt;によって参照されるオブジェクトは、リモート側の&amp;lt;dst&amp;gt;参照を更新するために使用されます。これが許可されるかどうかは、 &lt;code&gt;refs/*&lt;/code&gt; のどこに&amp;lt;dst&amp;gt;参照が存在するかによって異なります。これらのセクションでは、「更新」とは、削除以外のすべての変更を意味します。</target>
        </trans-unit>
        <trans-unit id="afdbad7acf93ca3457880eb431fd58ab07141e11" translate="yes" xml:space="preserve">
          <source>The object table is actually a hashtable keyed on the object name (the unique SHA-1). This storage configuration allows fast-import to reuse an existing or already written object and avoid writing duplicates to the output packfile. Duplicate blobs are surprisingly common in an import, typically due to branch merges in the source.</source>
          <target state="translated">オブジェクトテーブルは、実際にはオブジェクト名(一意のSHA-1)をキーにしたハッシュテーブルです。このストレージ構成により、fast-importでは既存または既に書き込まれたオブジェクトを再利用し、出力パックファイルへの重複書き込みを回避することができます。重複したブロブはインポートでは驚くほどよく見られますが、これは一般的にソースのブランチマージが原因です。</target>
        </trans-unit>
        <trans-unit id="0b16e9c4d73790474d293fcd4d96547c235d7d1f" translate="yes" xml:space="preserve">
          <source>The object that the new tag will refer to, usually a commit. Defaults to HEAD.</source>
          <target state="translated">新しいタグが参照するオブジェクト、通常はコミット。デフォルトは HEAD です。</target>
        </trans-unit>
        <trans-unit id="5468420c6f62137502c6bb00574138b237765047" translate="yes" xml:space="preserve">
          <source>The object type may be a blob, representing the contents of a file, or another tree, representing the contents of a subdirectory. Since trees and blobs, like all other objects, are named by the SHA-1 hash of their contents, two trees have the same SHA-1 name if and only if their contents (including, recursively, the contents of all subdirectories) are identical. This allows Git to quickly determine the differences between two related tree objects, since it can ignore any entries with identical object names.</source>
          <target state="translated">オブジェクトタイプは、ファイルの内容を表すブロブであったり、サブディレクトリの内容を表す別のツリーであったりします。ツリーや blob は、他のすべてのオブジェクトと同様に内容の SHA-1 ハッシュによって名前が付けられるので、二つのツリーが同じ SHA-1 名を持つのは、その内容 (再帰的に、すべてのサブディレクトリの内容を含む)が同一である場合に限られます。これにより、Git は同じオブジェクト名のエントリを無視することができるので、関連する二つのツリーオブジェクト間の違いを素早く判断することができます。</target>
        </trans-unit>
        <trans-unit id="abf9c48e6cb6157bcc4ecdd7fbfd1167ee2a4bc5" translate="yes" xml:space="preserve">
          <source>The object types in some more detail:</source>
          <target state="translated">オブジェクトの種類をもう少し詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="1aa11fdf087f0d8d0d32eb67b923b0efa29ecf46" translate="yes" xml:space="preserve">
          <source>The objects are output in the order in which they are found in the index file, which should be (in a correctly constructed file) sorted by object id.</source>
          <target state="translated">オブジェクトはインデックスファイルの中で見つかった順番で出力されますが、これは(正しく構築されたファイルでは)オブジェクトIDでソートされているはずです。</target>
        </trans-unit>
        <trans-unit id="113c9617d3615ff46d1de3788621403d384bc970" translate="yes" xml:space="preserve">
          <source>The official repository of the &lt;code&gt;git gui&lt;/code&gt; project can be found at:</source>
          <target state="translated">&lt;code&gt;git gui&lt;/code&gt; プロジェクトの公式リポジトリは次の場所にあります。</target>
        </trans-unit>
        <trans-unit id="d2925f4342d92a06228b4eeddfbffd0ada540f91" translate="yes" xml:space="preserve">
          <source>The one commit in this list that is not related to CMake may very well have been motivated by working on fixing all those bugs introduced by switching to CMake, but it addresses a different concern. To split this branch into two topic branches, the todo list could be edited like this:</source>
          <target state="translated">このリストの中で CMake に関連していないコミットは、CMake への切り替えによって導入されたすべてのバグを修正する作業をすることによって動機づけられたものかもしれませんが、それは別の懸念事項に対応しています。このブランチを 2 つのトピックブランチに分割するには、todo リストを次のように編集します。</target>
        </trans-unit>
        <trans-unit id="680930999bd0e3bf9880124c135a89bca3a329f3" translate="yes" xml:space="preserve">
          <source>The oneline descriptions are purely for your pleasure; &lt;code&gt;git rebase&lt;/code&gt; will not look at them but at the commit names (&quot;deadbee&quot; and &quot;fa1afe1&quot; in this example), so do not delete or edit the names.</source>
          <target state="translated">onelineの説明は、純粋にあなたの喜びのためのものです。 &lt;code&gt;git rebase&lt;/code&gt; はそれらを調べませんが、コミット名（この例では「deadbee」と「fa1afe1」）を見るので、名前を削除または編集しないでください。</target>
        </trans-unit>
        <trans-unit id="b174b5f513a45da66bee660cec63368b38af2a1f" translate="yes" xml:space="preserve">
          <source>The only difference between this command and &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt; is that they use slightly different output formats, and this command exists only for backward compatibility to support existing scripts, and provide a more familiar command name for people coming from other SCM systems.</source>
          <target state="translated">このコマンドと&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]&lt;/a&gt;の唯一の違いは、わずかに異なる出力形式を使用することです。このコマンドは、既存のスクリプトをサポートするための下位互換性のためにのみ存在し、他のSCMシステムから来た人々により馴染みのあるコマンド名を提供します。</target>
        </trans-unit>
        <trans-unit id="90482aceb580582ec33d188b8fb1bca29f8136a1" translate="yes" xml:space="preserve">
          <source>The option can have the following values, defaulting to &lt;code&gt;group&lt;/code&gt; if no value is given:</source>
          <target state="translated">オプションには次の値を指定でき、値が指定されていない場合はデフォルトで &lt;code&gt;group&lt;/code&gt; れます。</target>
        </trans-unit>
        <trans-unit id="72a352b7174eb63582b749d1295b267e0dae9887" translate="yes" xml:space="preserve">
          <source>The optional &amp;lt;limit&amp;gt; is useful in cases where your topic is based on other work that is not in upstream. Expanding on the previous example, this might look like:</source>
          <target state="translated">オプションの&amp;lt;limit&amp;gt;は、トピックが上流にない他の作業に基づいている場合に役立ちます。前の例を拡張すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="4136e1c0c625091f77db10ec0b76e55e39fdb1b6" translate="yes" xml:space="preserve">
          <source>The optional &amp;lt;style&amp;gt; argument can be either &lt;code&gt;shallow&lt;/code&gt; or &lt;code&gt;deep&lt;/code&gt;. &lt;code&gt;shallow&lt;/code&gt; threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the &lt;code&gt;--in-reply-to&lt;/code&gt;, and the first patch mail, in this order. &lt;code&gt;deep&lt;/code&gt; threading makes every mail a reply to the previous one.</source>
          <target state="translated">オプションの&amp;lt;style&amp;gt;引数は、 &lt;code&gt;shallow&lt;/code&gt; または &lt;code&gt;deep&lt;/code&gt; のいずれかです。 &lt;code&gt;shallow&lt;/code&gt; スレッドは、すべてのメールをシリーズの先頭への返信にします。先頭は、カバーレター、 &lt;code&gt;--in-reply-to&lt;/code&gt; in -reply-to、および最初のパッチメールからこの順序で選択されます。 &lt;code&gt;deep&lt;/code&gt; スレッドは、すべてのメールを前のメールへの返信にします。</target>
        </trans-unit>
        <trans-unit id="3dd98bdacd886ba292b303baaba2ecefebed8bab" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;encoding&lt;/code&gt; command indicates the encoding of the commit message. Most commits are UTF-8 and the encoding is omitted, but this allows importing commit messages into git without first reencoding them.</source>
          <target state="translated">オプションの &lt;code&gt;encoding&lt;/code&gt; コマンドは、コミットメッセージのエンコーディングを示します。ほとんどのコミットはUTF-8であり、エンコードは省略されていますが、これにより、コミットメッセージを最初に再エンコードせずにgitにインポートできます。</target>
        </trans-unit>
        <trans-unit id="b0ae75c1b10bf71d7e20ef9926e29585fa74a2e0" translate="yes" xml:space="preserve">
          <source>The optional argument &amp;lt;path&amp;gt; is the relative location for the cloned submodule to exist in the superproject. If &amp;lt;path&amp;gt; is not given, the canonical part of the source repository is used (&quot;repo&quot; for &quot;/path/to/repo.git&quot; and &quot;foo&quot; for &quot;host.xz:foo/.git&quot;). If &amp;lt;path&amp;gt; exists and is already a valid Git repository, then it is staged for commit without cloning. The &amp;lt;path&amp;gt; is also used as the submodule&amp;rsquo;s logical name in its configuration entries unless &lt;code&gt;--name&lt;/code&gt; is used to specify a logical name.</source>
          <target state="translated">オプションの引数&amp;lt;path&amp;gt;は、スーパープロジェクトに存在するクローンサブモジュールの相対位置です。&amp;lt;path&amp;gt;を指定しない場合、ソースリポジトリの正規部分が使用されます（ &quot;/path/to/repo.git&quot;の場合は &quot;repo&quot;、 &quot;host.xz：foo / .git&quot;の場合は &quot;foo&quot;）。&amp;lt;path&amp;gt;が存在し、すでに有効なGitリポジトリである場合は、複製せずにコミットするためにステージングされます。 &lt;code&gt;--name&lt;/code&gt; を使用して論理名を指定しない限り、&amp;lt;path&amp;gt;は、その構成エントリでサブモジュールの論理名としても使用されます。</target>
        </trans-unit>
        <trans-unit id="476c5c2c4870d6be72c4d31b42e1450136c51807" translate="yes" xml:space="preserve">
          <source>The optional configuration variable &lt;code&gt;core.excludesFile&lt;/code&gt; indicates a path to a file containing patterns of file names to exclude, similar to &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;. Patterns in the exclude file are used in addition to those in &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;.</source>
          <target state="translated">オプションの構成変数 &lt;code&gt;core.excludesFile&lt;/code&gt; は、 &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; と同様に、除外するファイル名のパターンを含むファイルへのパスを示します。 &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; パターンに加えて、除外ファイルのパターンが使用されます。</target>
        </trans-unit>
        <trans-unit id="ad80c43bd988ae6e6061dfab8a056d2afaee7691" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;--contains&lt;/code&gt;, &lt;code&gt;--no-contains&lt;/code&gt;, &lt;code&gt;--merged&lt;/code&gt; and &lt;code&gt;--no-merged&lt;/code&gt; serve four related but different purposes:</source>
          <target state="translated">オプション &lt;code&gt;--contains&lt;/code&gt; 、 &lt;code&gt;--no-contains&lt;/code&gt; no -contains、-- &lt;code&gt;--merged&lt;/code&gt; 、および &lt;code&gt;--no-merged&lt;/code&gt; は、4つの関連するが異なる目的を果たします。</target>
        </trans-unit>
        <trans-unit id="081a3bdc8213b4774c97cebf32978af69c3476cb" translate="yes" xml:space="preserve">
          <source>The order of stages 1, 2 and 3 (hence the order of three &amp;lt;tree-ish&amp;gt; command-line arguments) are significant when you start a 3-way merge with an index file that is already populated. Here is an outline of how the algorithm works:</source>
          <target state="translated">ステージ1、2、3の順序（したがって、3つの&amp;lt;tree-ish&amp;gt;コマンドライン引数の順序）は、すでに入力されているインデックスファイルで3方向マージを開始するときに重要です。アルゴリズムの仕組みの概要は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3fb57cf5101f783ba73fc6eba17ed42ef2940627" translate="yes" xml:space="preserve">
          <source>The order of the flags used to matter, but not anymore.</source>
          <target state="translated">以前は旗の順番が重要だったが、今は違う。</target>
        </trans-unit>
        <trans-unit id="32a54a6aa8ff67e3d76c47c6fabd2affc1e5cbb5" translate="yes" xml:space="preserve">
          <source>The origin of lines is automatically followed across whole-file renames (currently there is no option to turn the rename-following off). To follow lines moved from one file to another, or to follow lines that were copied and pasted from another file, etc., see the &lt;code&gt;-C&lt;/code&gt; and &lt;code&gt;-M&lt;/code&gt; options.</source>
          <target state="translated">行の起点は、ファイル全体の名前変更全体で自動的に追跡されます（現在、名前変更フォローをオフにするオプションはありません）。あるファイルから別のファイルに移動した行を追跡したり、別のファイルからコピーして貼り付けた行を追跡したりするには、 &lt;code&gt;-C&lt;/code&gt; および &lt;code&gt;-M&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b66619a4ae8f145d6aac4431781b08d6ac86597a" translate="yes" xml:space="preserve">
          <source>The origin revision can be changed with the &quot;--origin&quot; option.</source>
          <target state="translated">オリジンリビジョンは&quot;--origin &quot;オプションで変更できます。</target>
        </trans-unit>
        <trans-unit id="617fe8d1d55cfe9ccc09f76fcfa190410b239da3" translate="yes" xml:space="preserve">
          <source>The original format used by Greg Kroah-Hartman&amp;rsquo;s &lt;code&gt;send_lots_of_email.pl&lt;/code&gt; script</source>
          <target state="translated">Greg Kroah-Hartmanの &lt;code&gt;send_lots_of_email.pl&lt;/code&gt; スクリプトで使用される元の形式</target>
        </trans-unit>
        <trans-unit id="a7a5cdcdcd4d6fcaaf02e53acebd8443c9b015da" translate="yes" xml:space="preserve">
          <source>The original job of &lt;code&gt;git rev-parse&lt;/code&gt; is now taken by the function &lt;code&gt;setup_revisions()&lt;/code&gt;, which parses the revisions and the common command-line options for the revision walker. This information is stored in the struct &lt;code&gt;rev_info&lt;/code&gt; for later consumption. You can do your own command-line option parsing after calling &lt;code&gt;setup_revisions()&lt;/code&gt;. After that, you have to call &lt;code&gt;prepare_revision_walk()&lt;/code&gt; for initialization, and then you can get the commits one by one with the function &lt;code&gt;get_revision()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git rev-parse&lt;/code&gt; の元のジョブは現在、関数 &lt;code&gt;setup_revisions()&lt;/code&gt; によって行われ、リビジョンとリビジョンウォーカーの一般的なコマンドラインオプションを解析します。この情報は、後で使用できるように &lt;code&gt;rev_info&lt;/code&gt; に格納されます。 &lt;code&gt;setup_revisions()&lt;/code&gt; を呼び出した後、独自のコマンドラインオプション解析を行うことができます。その後、初期化のために &lt;code&gt;prepare_revision_walk()&lt;/code&gt; を呼び出す必要があります。その後、関数 &lt;code&gt;get_revision()&lt;/code&gt; を使用してコミットを1つずつ取得できます。</target>
        </trans-unit>
        <trans-unit id="4c9da327e28b59015cec84abd98a33aec635328d" translate="yes" xml:space="preserve">
          <source>The original tags are not deleted, but can be overwritten; use &quot;--tag-name-filter cat&quot; to simply update the tags. In this case, be very careful and make sure you have the old tags backed up in case the conversion has run afoul.</source>
          <target state="translated">元のタグは削除されませんが、上書きすることができます;&quot;--tag-name-filter cat &quot;を使用して、単純にタグを更新します。この場合、非常に注意して、変換が失敗した場合に備えて古いタグをバックアップしておくことを確認してください。</target>
        </trans-unit>
        <trans-unit id="6c2cf73d4477ea65ac2368f08dedbcc07c9eafb4" translate="yes" xml:space="preserve">
          <source>The other nice thing with test suites, is that when you have one, you already know how to test for bad behavior. So you can use this knowledge to create a new test case for &quot;git bisect&quot; when it appears that there is a regression. So it will be easier to bisect the bug and fix it. And then you can add the test case you just created to your test suite.</source>
          <target state="translated">テストスイートのもうひとつの良いところは、テストスイートを持っているときには、悪い動作をテストする方法をすでに知っているということです。その知識を使って、リグレッションが発生したときに &quot;git bisect&quot; 用の新しいテストケースを作成することができます。そうすれば、バグをbisectして修正するのが簡単になります。そして、作成したテストケースをテストスイートに追加することができます。</target>
        </trans-unit>
        <trans-unit id="94bda500b4b5c47f0218909469e6ab7f1eee52b6" translate="yes" xml:space="preserve">
          <source>The other way to drive the bisection process is to tell &quot;git bisect&quot; to launch a script or command at each bisection step to know if the current commit is &quot;good&quot; or &quot;bad&quot;. To do that, we use the &quot;git bisect run&quot; command. For example:</source>
          <target state="translated">もうひとつのバイセクション処理を駆動させる方法は、&quot;git bisect&quot; にバイセクションの各ステップでスクリプトやコマンドを起動させ、現在のコミットが &quot;good&quot; か &quot;bad&quot; かを知るように指示することです。そのためには、&quot;git bisect run&quot; コマンドを使います。例えば、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="013b9f528101f55f667633859403afae697697c4" translate="yes" xml:space="preserve">
          <source>The output format is modified to be machine-parsable (see below). If &lt;code&gt;--stdin&lt;/code&gt; is also given, input paths are separated with a NUL character instead of a linefeed character.</source>
          <target state="translated">出力形式は、マシンが解析できるように変更されています（以下を参照）。 &lt;code&gt;--stdin&lt;/code&gt; も指定されている場合、入力パスは改行文字ではなくNUL文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="4ebdc78d172a0b82e38a898aa2ae716344def4d5" translate="yes" xml:space="preserve">
          <source>The output format is modified to be machine-parsable. If &lt;code&gt;--stdin&lt;/code&gt; is also given, input paths are separated with a NUL character instead of a linefeed character.</source>
          <target state="translated">出力形式は、マシンが解析できるように変更されています。 &lt;code&gt;--stdin&lt;/code&gt; も指定されている場合、入力パスは改行文字ではなくNUL文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="885a3d9b027501a3f7ddd2554d827f984cacfcf5" translate="yes" xml:space="preserve">
          <source>The output format is similar to the Porcelain format, but it does not contain the actual lines from the file that is being annotated.</source>
          <target state="translated">出力フォーマットは Porcelain フォーマットに似ていますが、注釈を付けようとしているファイルの実際の行は含まれていません。</target>
        </trans-unit>
        <trans-unit id="16ca2e6d144e9c4d47f91cfe57ded6c4b6f874af" translate="yes" xml:space="preserve">
          <source>The output from this command is designed to be used as a commit template comment. The default, long format, is designed to be human readable, verbose and descriptive. Its contents and format are subject to change at any time.</source>
          <target state="translated">このコマンドの出力は、コミットテンプレートのコメントとして使用するように設計されています。デフォルトの長いフォーマットは、人間が読みやすく、冗長で説明的なものになるように設計されています。その内容と形式はいつでも変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="467b04ab4f0f42e5eb4db50995625d7a06a04bbc" translate="yes" xml:space="preserve">
          <source>The output is in the format: &lt;code&gt;&amp;lt;SHA-1 ID&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;reference name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">出力は次の形式です： &lt;code&gt;&amp;lt;SHA-1 ID&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;reference name&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="297e105083265b9b5df9c784faa30006468bc5fd" translate="yes" xml:space="preserve">
          <source>The output is of the form: &amp;lt;path&amp;gt; COLON SP &amp;lt;attribute&amp;gt; COLON SP &amp;lt;info&amp;gt; LF</source>
          <target state="translated">出力の形式は次のとおりです。&amp;lt;path&amp;gt; COLON SP &amp;lt;attribute&amp;gt; COLON SP &amp;lt;info&amp;gt; LF</target>
        </trans-unit>
        <trans-unit id="00d47eecfb8e7c432b9a2a4461da0aa0b0a14445" translate="yes" xml:space="preserve">
          <source>The output is the new tag&amp;rsquo;s &amp;lt;object&amp;gt; identifier.</source>
          <target state="translated">出力は、新しいタグの&amp;lt;object&amp;gt;識別子です。</target>
        </trans-unit>
        <trans-unit id="c209f5f99a30592095be06f60778bfc6143218e8" translate="yes" xml:space="preserve">
          <source>The output of &quot;git fetch&quot; depends on the transport method used; this section describes the output when fetching over the Git protocol (either locally or via ssh) and Smart HTTP protocol.</source>
          <target state="translated">ここでは、Git プロトコル (ローカルまたは ssh 経由)および Smart HTTP プロトコルでフェッチした場合の出力について説明します。</target>
        </trans-unit>
        <trans-unit id="249df455a76d6d8a4ee813f24ba8c68836888f67" translate="yes" xml:space="preserve">
          <source>The output of &quot;git push&quot; depends on the transport method used; this section describes the output when pushing over the Git protocol (either locally or via ssh).</source>
          <target state="translated">git push&quot; の出力は、使用するトランスポート方法に依存します。ここでは、Git プロトコルでプッシュしたときの出力について説明します (ローカルでも ssh 経由でも)。</target>
        </trans-unit>
        <trans-unit id="2012a50a7ce95c41c81b087cc42352c50e07741b" translate="yes" xml:space="preserve">
          <source>The output of ls-refs is as follows:</source>
          <target state="translated">ls-refs の出力は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c9897264787fe814346af61567793268dae2ec95" translate="yes" xml:space="preserve">
          <source>The output of the &lt;code&gt;range-diff&lt;/code&gt; command is subject to change. It is intended to be human-readable porcelain output, not something that can be used across versions of Git to get a textually stable &lt;code&gt;range-diff&lt;/code&gt; (as opposed to something like the &lt;code&gt;--stable&lt;/code&gt; option to &lt;a href=&quot;git-patch-id&quot;&gt;git-patch-id[1]&lt;/a&gt;). There&amp;rsquo;s also no equivalent of &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt; for &lt;code&gt;range-diff&lt;/code&gt;, the output is not intended to be machine-readable.</source>
          <target state="translated">&lt;code&gt;range-diff&lt;/code&gt; コマンドの出力は変更される可能性があります。人間が読める磁器の出力を意図したものであり、Gitのバージョン間で使用して、テキスト的に安定した &lt;code&gt;range-diff&lt;/code&gt; を取得できるものではありません（&lt;a href=&quot;git-patch-id&quot;&gt;git-patch-id [1]&lt;/a&gt;の &lt;code&gt;--stable&lt;/code&gt; オプションのようなものではありません）。 。のは同等もありません&lt;a href=&quot;git-apply&quot;&gt;[1]-適用のgit&lt;/a&gt;のための &lt;code&gt;range-diff&lt;/code&gt; 、出力は機械可読であることを意図したものではありません。</target>
        </trans-unit>
        <trans-unit id="acccdb81223db3ebfe60a727e12d9a4ed87719fe" translate="yes" xml:space="preserve">
          <source>The output order is determined by the order of glob patterns in &amp;lt;orderfile&amp;gt;. All files with pathnames that match the first pattern are output first, all files with pathnames that match the second pattern (but not the first) are output next, and so on. All files with pathnames that do not match any pattern are output last, as if there was an implicit match-all pattern at the end of the file. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order relative to each other is the normal order.</source>
          <target state="translated">出力順序は、&amp;lt;orderfile&amp;gt;内のglobパターンの順序によって決まります。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターンに一致する（最初ではない）パス名を持つすべてのファイルが次に出力されます。すべてのパターンに一致しないパス名を持つすべてのファイルは、ファイルの最後に暗黙的なすべて一致パターンがあるかのように、最後に出力されます。複数のパス名が同じランクである場合（それらは同じパターンに一致しますが、以前のパターンには一致しません）、互いに対するそれらの出力順序は通常の順序です。</target>
        </trans-unit>
        <trans-unit id="70ec2e58d64c53608a589a3f892a41e430e23c0e" translate="yes" xml:space="preserve">
          <source>The overall time needed to compute this algorithm is the time needed to compute n+m commit diffs and then n*m diffs of patches, plus the time needed to compute the least-cost assignment between n and m diffs. Git uses an implementation of the Jonker-Volgenant algorithm to solve the assignment problem, which has cubic runtime complexity. The matching found in this case will look like this:</source>
          <target state="translated">このアルゴリズムを計算するのに必要な全体的な時間は、n+m 個のコミット差分を計算してから n*m 個のパッチ差分を計算するのに必要な時間に加えて、n 個の差分と m 個の差分の間で最小コストの代入を計算するのに必要な時間を加えたものです。Git はこの代入問題を解くために Jonker-Volgenant アルゴリズムの実装を使用しています。この場合に見つかったマッチングは次のようになります。</target>
        </trans-unit>
        <trans-unit id="f8c05a901b25f6434301621f82a267dcb0caae54" translate="yes" xml:space="preserve">
          <source>The p4 changes will be created as the user invoking &lt;code&gt;git p4 submit&lt;/code&gt;. The &lt;code&gt;--preserve-user&lt;/code&gt; option will cause ownership to be modified according to the author of the Git commit. This option requires admin privileges in p4, which can be granted using &lt;code&gt;p4 protect&lt;/code&gt;.</source>
          <target state="translated">ユーザーが &lt;code&gt;git p4 submit&lt;/code&gt; を呼び出すと、p4の変更が作成されます。 &lt;code&gt;--preserve-user&lt;/code&gt; オプションは、コミットのGitの作者によると、所有権が変更されます。このオプションには、p4での管理者権限が必要です。これは、 &lt;code&gt;p4 protect&lt;/code&gt; を使用して付与できます。</target>
        </trans-unit>
        <trans-unit id="bc53387773cbb38b899a330a03a788e5288eab48" translate="yes" xml:space="preserve">
          <source>The p4 client specification is maintained with the &lt;code&gt;p4 client&lt;/code&gt; command and contains among other fields, a View that specifies how the depot is mapped into the client repository. The &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;sync&lt;/code&gt; commands can consult the client spec when given the &lt;code&gt;--use-client-spec&lt;/code&gt; option or when the useClientSpec variable is true. After &lt;code&gt;git p4 clone&lt;/code&gt;, the useClientSpec variable is automatically set in the repository configuration file. This allows future &lt;code&gt;git p4 submit&lt;/code&gt; commands to work properly; the submit command looks only at the variable and does not have a command-line option.</source>
          <target state="translated">p4 client仕様は &lt;code&gt;p4 client&lt;/code&gt; コマンドで維持され、他のフィールドの中でも、デポがクライアントリポジトリにマップされる方法を指定するビューが含まれています。 &lt;code&gt;clone&lt;/code&gt; と &lt;code&gt;sync&lt;/code&gt; 与えられたときのコマンドは、クライアントの仕様に相談することができます &lt;code&gt;--use-client-spec&lt;/code&gt; オプションまたはときuseClientSpec変数が真であるが。後 &lt;code&gt;git p4 clone&lt;/code&gt; 、useClientSpec変数は自動的にリポジトリの設定ファイルに設定されています。これにより、将来の &lt;code&gt;git p4 submit&lt;/code&gt; コマンドが正しく機能するようになります。 submitコマンドは変数のみを調べ、コマンドラインオプションはありません。</target>
        </trans-unit>
        <trans-unit id="9fec68b06723905b09b9270262e6a13c1b490876" translate="yes" xml:space="preserve">
          <source>The p4 depot path argument to &lt;code&gt;git p4 sync&lt;/code&gt; and &lt;code&gt;git p4 clone&lt;/code&gt; can be one or more space-separated p4 depot paths, with an optional p4 revision specifier on the end:</source>
          <target state="translated">&lt;code&gt;git p4 sync&lt;/code&gt; および &lt;code&gt;git p4 clone&lt;/code&gt; のp4デポパス引数は、末尾にオプションのp4リビジョン指定子を付けて、1つ以上のスペースで区切られたp4デポパスにすることができます。</target>
        </trans-unit>
        <trans-unit id="d877dea1de89fdb5a15efd47a5debfe5403b96f4" translate="yes" xml:space="preserve">
          <source>The pack-indexes (.idx files) remain in the pack directory so we can delete the MIDX file, set core.midx to false, or downgrade without any loss of information.</source>
          <target state="translated">パックディレクトリにはパックインデックス(.idxファイル)が残っているので、MIDXファイルを削除したり、core.midxをfalseにしたり、ダウングレードしても情報を失うことはありません。</target>
        </trans-unit>
        <trans-unit id="933f30be1e83e4fe09dc8528b693f5b5a75f065d" translate="yes" xml:space="preserve">
          <source>The packed archive format (.pack) is designed to be self-contained so that it can be unpacked without any further information. Therefore, each object that a delta depends upon must be present within the pack.</source>
          <target state="translated">パックされたアーカイブフォーマット(.pack)は、それ以上の情報がなくても解凍できるように、自己完結型に設計されています。したがって、デルタが依存する各オブジェクトはパック内に存在しなければなりません。</target>
        </trans-unit>
        <trans-unit id="75cd7427877d4a48fded775aaaba114771e37304" translate="yes" xml:space="preserve">
          <source>The packfile(s) created by fast-import do not encourage good disk access patterns. This is caused by fast-import writing the data in the order it is received on standard input, while Git typically organizes data within packfiles to make the most recent (current tip) data appear before historical data. Git also clusters commits together, speeding up revision traversal through better cache locality.</source>
          <target state="translated">fast-import で作成されたパックファイルは、ディスクアクセスのパターンが良くありません。これは、fast-import が標準入力で受け取った順にデータを書き込むのに対し、Git は一般的にパックファイル内でデータを整理し、最新の (現在の)データが過去のデータの前に表示されるようにしているためです。また、Git はコミットをまとめてクラスター化し、キャッシュの位置関係を改善することでリビジョンの移動を高速化しています。</target>
        </trans-unit>
        <trans-unit id="73715b9a828b5f7ca9623cd366d376d487c8e126" translate="yes" xml:space="preserve">
          <source>The partial clone feature records special &quot;promisor&quot; packs that may point to objects that are not stored locally, but available on request to a server. The multi-pack-index does not currently track these promisor packs.</source>
          <target state="translated">パーシャルクローン機能は、ローカルに保存されていないが、サーバーへのリクエストに応じて利用可能なオブジェクトを指す可能性のある特別な「プロミザ」パックを記録します。multi-pack-indexは現在、これらのプロモーターパックを追跡していません。</target>
        </trans-unit>
        <trans-unit id="608e992a19f0287b5b2e4cbdc92416d882bd253c" translate="yes" xml:space="preserve">
          <source>The password to use when logging in to the server.</source>
          <target state="translated">サーバーにログインする際に使用するパスワードです。</target>
        </trans-unit>
        <trans-unit id="f899bc9ba76fee3c960f01f1f955c5a4bf020e98" translate="yes" xml:space="preserve">
          <source>The patch extracted from e-mail.</source>
          <target state="translated">メールから抽出したパッチ。</target>
        </trans-unit>
        <trans-unit id="621265bbad5d0651c63283720f8a5ccddfdeeb61" translate="yes" xml:space="preserve">
          <source>The patch is expected to be inline, directly following the message. Any line that is of the form:</source>
          <target state="translated">パッチは、メッセージの直後にあるインラインであることが期待されます。形式のものであれば、どの行でも</target>
        </trans-unit>
        <trans-unit id="eedf9ed2547b7a76bcd6fb69785bf954af8d224f" translate="yes" xml:space="preserve">
          <source>The patch itself does not apply cleanly. That is &lt;code&gt;bad&lt;/code&gt; but does not have much to do with your MUA. You might want to rebase the patch with &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; before regenerating it in this case.</source>
          <target state="translated">パッチ自体はきれいに適用されません。それは &lt;code&gt;bad&lt;/code&gt; ことですが、MUAとはあまり関係がありません。この場合、パッチを再生成する前に、&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]を使用&lt;/a&gt;してパッチをリベースすることができます。</target>
        </trans-unit>
        <trans-unit id="c9ecbf09d9172bac5285d567a6e1031058a01024" translate="yes" xml:space="preserve">
          <source>The patch produced by &lt;code&gt;git format-patch&lt;/code&gt; is in UNIX mailbox format, with a fixed &quot;magic&quot; time stamp to indicate that the file is output from format-patch rather than a real mailbox, like so:</source>
          <target state="translated">&lt;code&gt;git format-patch&lt;/code&gt; によって作成されたパッチはUNIXメールボックス形式であり、ファイルが実際のメールボックスではなくformat-patchから出力されることを示すために、次のように「マジック」タイムスタンプが固定されています。</target>
        </trans-unit>
        <trans-unit id="7072603eb0a607d061c366f3e4a9cba6cffbd377" translate="yes" xml:space="preserve">
          <source>The path can be either absolute or relative. A relative path is taken as relative to the directory where the hooks are run (see the &quot;DESCRIPTION&quot; section of &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;).</source>
          <target state="translated">パスは絶対パスでも相対パスでもかまいません。相対パスは、フックが実行されているディレクトリからの相対パスと見なされます（&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;の「説明」セクションを参照）。</target>
        </trans-unit>
        <trans-unit id="6ccace0f35f0f4e5cab0e8cffbdf924135579b2e" translate="yes" xml:space="preserve">
          <source>The path has the attribute with special value &quot;false&quot;; this is specified by listing the name of the attribute prefixed with a dash &lt;code&gt;-&lt;/code&gt; in the attribute list.</source>
          <target state="translated">パスには、特別な値「false」の属性があります。これは、属性リストにダッシュ &lt;code&gt;-&lt;/code&gt; が前に付いた属性の名前をリストすることによって指定されます。</target>
        </trans-unit>
        <trans-unit id="96cc920a42ed7b296307f756480841c1366430ee" translate="yes" xml:space="preserve">
          <source>The path has the attribute with special value &quot;true&quot;; this is specified by listing only the name of the attribute in the attribute list.</source>
          <target state="translated">パスは特別な値 &quot;true &quot;を持つ属性を持っています;これは、属性リストに属性名のみをリストアップすることで指定されます。</target>
        </trans-unit>
        <trans-unit id="f3d259c7dde8e69cba5e131da2dcac58054c5102" translate="yes" xml:space="preserve">
          <source>The path has the attribute with specified string value; this is specified by listing the name of the attribute followed by an equal sign &lt;code&gt;=&lt;/code&gt; and its value in the attribute list.</source>
          <target state="translated">パスには、指定された文字列値を持つ属性があります。これは、属性リストに属性名の後に等号 &lt;code&gt;=&lt;/code&gt; とその値をリストすることによって指定されます。</target>
        </trans-unit>
        <trans-unit id="9a89a340b481b20bfabef5b1bcb5482c1e173e57" translate="yes" xml:space="preserve">
          <source>The path to a list of object names (i.e. one unabbreviated SHA-1 per line) that are known to be broken in a non-fatal way and should be ignored. On versions of Git 2.20 and later comments (&lt;code&gt;#&lt;/code&gt;), empty lines, and any leading and trailing whitespace is ignored. Everything but a SHA-1 per line will error out on older versions.</source>
          <target state="translated">致命的ではない方法で壊れていることがわかっているため無視する必要があるオブジェクト名のリスト（つまり、1行に1つの省略されていないSHA-1）へのパス。Git 2.20以降のバージョンのコメント（ &lt;code&gt;#&lt;/code&gt; ）では、空の行、および先頭と末尾の空白は無視されます。古いバージョンでは、1行あたりのSHA-1以外はすべてエラーになります。</target>
        </trans-unit>
        <trans-unit id="66bacdcfb6546645ce51a1173beecea036fe198b" translate="yes" xml:space="preserve">
          <source>The path to higher software quality is significantly improved software testing.</source>
          <target state="translated">ソフトウェアの品質向上への道は、ソフトウェアのテストを大幅に改善しています。</target>
        </trans-unit>
        <trans-unit id="a62f8e77f19dbb91947274f4224d3b2000deceef" translate="yes" xml:space="preserve">
          <source>The path with which the credential will be used. E.g., for accessing a remote https repository, this will be the repository&amp;rsquo;s path on the server.</source>
          <target state="translated">資格情報が使用されるパス。たとえば、リモートhttpsリポジトリにアクセスする場合、これはサーバー上のリポジトリのパスになります。</target>
        </trans-unit>
        <trans-unit id="75a6542b84624c1ec2a2753cb02bac2dc12deb38" translate="yes" xml:space="preserve">
          <source>The path within the &amp;lt;repository&amp;gt; that the action is performed on, for those actions that require it.</source>
          <target state="translated">アクションが実行される&amp;lt;repository&amp;gt;内のパス。</target>
        </trans-unit>
        <trans-unit id="42c5355b2496aa717e00373f3c96e2614e271309" translate="yes" xml:space="preserve">
          <source>The pathname of a file containing previously stored cookie lines, which should be used in the Git http session, if they match the server. The file format of the file to read cookies from should be plain HTTP headers or the Netscape/Mozilla cookie file format (see &lt;code&gt;curl(1)&lt;/code&gt;). NOTE that the file specified with http.cookieFile is used only as input unless http.saveCookies is set.</source>
          <target state="translated">以前に保存されたcookie行を含むファイルのパス名。サーバーと一致する場合、Git httpセッションで使用する必要があります。Cookieを読み取るファイルのファイル形式は、プレーンHTTPヘッダーまたはNetscape / Mozilla Cookieファイル形式である必要があります（ &lt;code&gt;curl(1)&lt;/code&gt; を参照）。http.cookieFileで指定されたファイルは、http.saveCookiesが設定されていない限り、入力としてのみ使用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="cdb891f79fbec881d22446bf8cf74ef0a3e451e0" translate="yes" xml:space="preserve">
          <source>The paths mentioned in the output, unlike many other Git commands, are made relative to the current directory if you are working in a subdirectory (this is on purpose, to help cutting and pasting). See the status.relativePaths config option below.</source>
          <target state="translated">出力に記載されているパスは、他の多くの Git コマンドとは異なり、サブディレクトリで作業をしている場合はカレントディレクトリからの相対パスになります (これは、カットアンドペーストを容易にするためです)。以下の status.relativePaths 設定オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="ae851010ea42ad696931dec57e7a58d6d0655b81" translate="yes" xml:space="preserve">
          <source>The pathspecs are used to limit the world diff operates in. They remove the filepairs outside the specified sets of pathnames. E.g. If the input set of filepairs included:</source>
          <target state="translated">pathspecs は diff が動作する世界を制限するために使用されます。指定されたパス名のセットの外側にあるファイルペアを削除します。例えば、入力ファイルペアが含まれている場合。</target>
        </trans-unit>
        <trans-unit id="a35fe6e03b5cf8e686f61a60362e87d3cf937722" translate="yes" xml:space="preserve">
          <source>The pattern &quot;foo/*&quot;, matches &quot;foo/test.json&quot; (a regular file), &quot;foo/bar&quot; (a directory), but it does not match &quot;foo/bar/hello.c&quot; (a regular file), as the asterisk in the pattern does not match &quot;bar/hello.c&quot; which has a slash in it.</source>
          <target state="translated">パターン &quot;foo/*&quot; は、&quot;foo/test.json&quot; (通常のファイル)、&quot;foo/bar&quot; (ディレクトリ)にマッチしますが、&quot;foo/bar/hello.c&quot; (通常のファイル)にはマッチしません。</target>
        </trans-unit>
        <trans-unit id="472a6ff8d8e6e0153adf76e5ad83f89df7215b9f" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;doc/frotz&lt;/code&gt; and &lt;code&gt;/doc/frotz&lt;/code&gt; have the same effect in any &lt;code&gt;.gitignore&lt;/code&gt; file. In other words, a leading slash is not relevant if there is already a middle slash in the pattern.</source>
          <target state="translated">パターン &lt;code&gt;doc/frotz&lt;/code&gt; および &lt;code&gt;/doc/frotz&lt;/code&gt; は、どの &lt;code&gt;.gitignore&lt;/code&gt; ファイルでも同じ効果があります。つまり、パターンの途中にスラッシュがある場合は、先頭のスラッシュは関係ありません。</target>
        </trans-unit>
        <trans-unit id="7f3e3da749b8fed6cc11585c7aa5dbe77eee53ad" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;foo/&lt;/code&gt; will match a directory &lt;code&gt;foo&lt;/code&gt; and paths underneath it, but will not match a regular file or a symbolic link &lt;code&gt;foo&lt;/code&gt; (this is consistent with the way how pathspec works in general in Git)</source>
          <target state="translated">パターン &lt;code&gt;foo/&lt;/code&gt; は、ディレクトリ &lt;code&gt;foo&lt;/code&gt; およびその下のパスと一致しますが、通常のファイルまたはシンボリックリンク &lt;code&gt;foo&lt;/code&gt; とは一致しません（これは、Gitでのpathspecの一般的な動作方法と一致しています）</target>
        </trans-unit>
        <trans-unit id="32166ee916b00891724c1bd52223b5e1e2d10da0" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;hello.*&lt;/code&gt; matches any file or folder whose name begins with &lt;code&gt;hello&lt;/code&gt;. If one wants to restrict this only to the directory and not in its subdirectories, one can prepend the pattern with a slash, i.e. &lt;code&gt;/hello.*&lt;/code&gt;; the pattern now matches &lt;code&gt;hello.txt&lt;/code&gt;, &lt;code&gt;hello.c&lt;/code&gt; but not &lt;code&gt;a/hello.java&lt;/code&gt;.</source>
          <target state="translated">パターン &lt;code&gt;hello.*&lt;/code&gt; 、名前が &lt;code&gt;hello&lt;/code&gt; で始まるすべてのファイルまたはフォルダーに一致します。これをサブディレクトリではなくディレクトリのみに制限したい場合は、パターンの前にスラッシュを &lt;code&gt;/hello.*&lt;/code&gt; ことができます。つまり、/hello . *です。パターンは &lt;code&gt;hello.txt&lt;/code&gt; 、 &lt;code&gt;hello.c&lt;/code&gt; に一致しますが、 &lt;code&gt;a/hello.java&lt;/code&gt; には一致しません。</target>
        </trans-unit>
        <trans-unit id="b35cb663783a3682a66157f3dc9fd508efdfceba" translate="yes" xml:space="preserve">
          <source>The pattern can contain standard globbing wildcards and two additional ones, &lt;code&gt;**/&lt;/code&gt; and &lt;code&gt;/**&lt;/code&gt;, that can match multiple path components. Please refer to &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt; for details. For convenience:</source>
          <target state="translated">パターンには、標準のグロビングワイルドカードと、複数のパスコンポーネントと一致する2つの追加の &lt;code&gt;**/&lt;/code&gt; および &lt;code&gt;/**&lt;/code&gt; を含めることができます。詳細は&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]&lt;/a&gt;を参照してください。便宜上：</target>
        </trans-unit>
        <trans-unit id="ae88d32c3f9079756948f2fdc8ae4c4c2e834b93" translate="yes" xml:space="preserve">
          <source>The patterns given should not begin with &lt;code&gt;refs/heads&lt;/code&gt;, &lt;code&gt;refs/tags&lt;/code&gt;, or &lt;code&gt;refs/remotes&lt;/code&gt; when applied to &lt;code&gt;--branches&lt;/code&gt;, &lt;code&gt;--tags&lt;/code&gt;, or &lt;code&gt;--remotes&lt;/code&gt;, respectively, and they must begin with &lt;code&gt;refs/&lt;/code&gt; when applied to &lt;code&gt;--glob&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt;. If a trailing &lt;code&gt;/*&lt;/code&gt; is intended, it must be given explicitly.</source>
          <target state="translated">指定されたパターンは、それぞれ &lt;code&gt;--branches&lt;/code&gt; 、-- &lt;code&gt;--tags&lt;/code&gt; 、または &lt;code&gt;--remotes&lt;/code&gt; に適用される場合、 &lt;code&gt;refs/heads&lt;/code&gt; 、 &lt;code&gt;refs/tags&lt;/code&gt; 、または &lt;code&gt;refs/remotes&lt;/code&gt; で開始してはならず、-- &lt;code&gt;--glob&lt;/code&gt; に適用される場合は &lt;code&gt;refs/&lt;/code&gt; 開始する必要がありますまたは &lt;code&gt;--all&lt;/code&gt; 。末尾の &lt;code&gt;/*&lt;/code&gt; が意図されている場合は、明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="86b0de7f6b1176e8c07c5aaa523447c3abd4915b" translate="yes" xml:space="preserve">
          <source>The performance format target (PERF) is a column-based format to replace GIT_TRACE_PERFORMANCE and is suitable for development and testing, possibly to complement tools like gprof. This format is enabled with the &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; environment variable or the &lt;code&gt;trace2.perfTarget&lt;/code&gt; system or global config setting.</source>
          <target state="translated">パフォーマンスフォーマットターゲット（PERF）は、GIT_TRACE_PERFORMANCEに代わる列ベースのフォーマットであり、おそらくgprofなどのツールを補完するための開発およびテストに適しています。この形式は、 &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; 環境変数または &lt;code&gt;trace2.perfTarget&lt;/code&gt; システムまたはグローバル構成設定で有効になります。</target>
        </trans-unit>
        <trans-unit id="506071bbd9d0908b14e8f015ca1b0ff23e4ec21e" translate="yes" xml:space="preserve">
          <source>The performance of git-filter-branch is glacially slow; its design makes it impossible for a backward-compatible implementation to ever be fast:</source>
          <target state="translated">git-filter-branch のパフォーマンスは氷河のように遅く、その設計上、下位互換性のある実装を高速にすることは不可能です。</target>
        </trans-unit>
        <trans-unit id="d698b970e30734158c98cc5647b57a259a47bb36" translate="yes" xml:space="preserve">
          <source>The person who put a piece of code into Git.</source>
          <target state="translated">Gitにコードの一部を入れた人。</target>
        </trans-unit>
        <trans-unit id="81b84527afb0ae2e697e75bbd7638af25fa12741" translate="yes" xml:space="preserve">
          <source>The pickaxe search is described in &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; (the description of &lt;code&gt;-S&amp;lt;string&amp;gt;&lt;/code&gt; option, which refers to pickaxe entry in &lt;a href=&quot;gitdiffcore&quot;&gt;gitdiffcore[7]&lt;/a&gt; for more details).</source>
          <target state="translated">つるはし検索は&lt;a href=&quot;git-log&quot;&gt;git-log [1]で&lt;/a&gt;説明されています（詳細については&lt;a href=&quot;gitdiffcore&quot;&gt;gitdiffcore [7]の&lt;/a&gt;つるはしエントリを参照する &lt;code&gt;-S&amp;lt;string&amp;gt;&lt;/code&gt; オプションの説明）。</target>
        </trans-unit>
        <trans-unit id="525e6a0e6ee3d9fa31ab39c46532aa0c693111e1" translate="yes" xml:space="preserve">
          <source>The placeholders are:</source>
          <target state="translated">プレースホルダは</target>
        </trans-unit>
        <trans-unit id="1651136b42ed906ec527c0b5bb6ead2e015774c3" translate="yes" xml:space="preserve">
          <source>The point of this helper is to reduce the number of times you must type your username or password. For example:</source>
          <target state="translated">このヘルパーのポイントは、ユーザー名やパスワードを入力しなければならない回数を減らすことです。例えば</target>
        </trans-unit>
        <trans-unit id="c89cea9d29e269d3d21a2bb103d39e43b1e539d2" translate="yes" xml:space="preserve">
          <source>The porcelain format</source>
          <target state="translated">磁器の形式</target>
        </trans-unit>
        <trans-unit id="26e08a1995b67cc0010521ba6bed170106483645" translate="yes" xml:space="preserve">
          <source>The porcelain format generally suppresses commit information that has already been seen. For example, two lines that are blamed to the same commit will both be shown, but the details for that commit will be shown only once. This is more efficient, but may require more state be kept by the reader. The &lt;code&gt;--line-porcelain&lt;/code&gt; option can be used to output full commit information for each line, allowing simpler (but less efficient) usage like:</source>
          <target state="translated">磁器フォーマットは、一般に、すでに見られたコミット情報を抑制します。たとえば、同じコミットのせいである2行が両方とも表示されますが、そのコミットの詳細は1回だけ表示されます。これはより効率的ですが、より多くの状態をリーダーが保持する必要がある場合があります。 &lt;code&gt;--line-porcelain&lt;/code&gt; オプションのような単純な（しかし低効率）使用を可能にする、フルライン毎にコミット情報を出力するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="20c54b7279b5d1b2be6928d44083be1fd00dfbb8" translate="yes" xml:space="preserve">
          <source>The porcelain format has a line per attribute. Attributes are listed with a label and value separated by a single space. Boolean attributes (like &lt;code&gt;bare&lt;/code&gt; and &lt;code&gt;detached&lt;/code&gt;) are listed as a label only, and are only present if and only if the value is true. The first attribute of a worktree is always &lt;code&gt;worktree&lt;/code&gt;, an empty line indicates the end of the record. For example:</source>
          <target state="translated">磁器の形式には、属性ごとに1つの線があります。属性は、1つのスペースで区切られたラベルと値とともにリストされます。ブール属性（ &lt;code&gt;bare&lt;/code&gt; や &lt;code&gt;detached&lt;/code&gt; など）はラベルとしてのみリストされ、値がtrueの場合にのみ存在します。ワークツリーの最初の属性は常に &lt;code&gt;worktree&lt;/code&gt; で、空の行はレコードの終わりを示します。例えば：</target>
        </trans-unit>
        <trans-unit id="a362940b066b853917862099c8e9ab263cba72b1" translate="yes" xml:space="preserve">
          <source>The port number to bind the gitweb httpd to. See &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt;.</source>
          <target state="translated">gitweb httpdをバインドするポート番号。&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0cecf31c324042fa16f4839249194885b3982bae" translate="yes" xml:space="preserve">
          <source>The port number to bind the httpd to. (Default: 1234)</source>
          <target state="translated">httpd をバインドするポート番号。(デフォルト:1234)</target>
        </trans-unit>
        <trans-unit id="735bfd35b5b101e4c116696c3cd1ebf6bc58faa9" translate="yes" xml:space="preserve">
          <source>The possible options are:</source>
          <target state="translated">考えられる選択肢は</target>
        </trans-unit>
        <trans-unit id="8bc0e360ec6eefb74bc5a1aed65f13e846b6d915" translate="yes" xml:space="preserve">
          <source>The preferred strategy for rolling out a version bump (whether whole repository or for a single file) is to teach git to read the new format, and allow writing the new format with a config switch or command line option (for experimentation or for those who do not care about backwards compatibility with older gits). Then after a long period to allow the reading capability to become common, we may switch to writing the new format by default.</source>
          <target state="translated">バージョンバンプを(リポジトリ全体であろうとひとつのファイルであろうと)展開する際の好ましい方法は、git に新しいフォーマットを読み込ませることを教えて、新しいフォーマットを書き込めるようにすることです(実験用、あるいは古い gits との下位互換性を気にしない人のために)。そして、長い期間をかけて読み込み機能が一般的になるようにした後で、新しいフォーマットをデフォルトで書くように切り替えるかもしれません。</target>
        </trans-unit>
        <trans-unit id="adf8f6f66c16d1ab5dcd5c39342b75931e439ba4" translate="yes" xml:space="preserve">
          <source>The prefix ability basically makes it trivial to use &lt;code&gt;git checkout-index&lt;/code&gt; as an &quot;export as tree&quot; function. Just read the desired tree into the index, and do:</source>
          <target state="translated">プレフィックス機能により、基本的に &lt;code&gt;git checkout-index&lt;/code&gt; を「ツリーとしてエクスポート」機能として使用することは簡単になります。目的のツリーをインデックスに読み込んで、次のようにします。</target>
        </trans-unit>
        <trans-unit id="0f1fc4f35ab6b79f4468bd7525c0542dc9193da5" translate="yes" xml:space="preserve">
          <source>The previously introduced &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; is just a wrapper for &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;.</source>
          <target state="translated">以前に導入された&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;は、&lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]の&lt;/a&gt;単なるラッパーです。</target>
        </trans-unit>
        <trans-unit id="675ae216ecd575fef2e1ffa9eadeda52bdab6e90" translate="yes" xml:space="preserve">
          <source>The primary problem with rewriting the history of a branch has to do with merging. Suppose somebody fetches your branch and merges it into their branch, with a result something like this:</source>
          <target state="translated">ブランチの履歴を書き換える際の主な問題は、マージに関係しています。誰かがあなたのブランチを取得して自分のブランチにマージしたとしましょう。</target>
        </trans-unit>
        <trans-unit id="ff3dc4a94f1f540e3dd725f6eef6c2d405d85a87" translate="yes" xml:space="preserve">
          <source>The primary tool we&amp;rsquo;ve been using to create commits is &lt;code&gt;git-commit
-a&lt;/code&gt;, which creates a commit including every change you&amp;rsquo;ve made to your working tree. But what if you want to commit changes only to certain files? Or only certain changes to certain files?</source>
          <target state="translated">コミットの作成に使用している主なツールは &lt;code&gt;git-commit -a&lt;/code&gt; 、作業ツリーに加えたすべての変更を含むコミットを作成します。しかし、特定のファイルのみに変更をコミットしたい場合はどうでしょうか？または、特定のファイルに対する特定の変更のみですか？</target>
        </trans-unit>
        <trans-unit id="bc32172ebad82b3a8531284b76fc91d0e2655fc8" translate="yes" xml:space="preserve">
          <source>The protection it offers over &lt;code&gt;--force&lt;/code&gt; is ensuring that subsequent changes your work wasn&amp;rsquo;t based on aren&amp;rsquo;t clobbered, but this is trivially defeated if some background process is updating refs in the background. We don&amp;rsquo;t have anything except the remote tracking info to go by as a heuristic for refs you&amp;rsquo;re expected to have seen &amp;amp; are willing to clobber.</source>
          <target state="translated">&lt;code&gt;--force&lt;/code&gt; を介して提供される保護は、作業のベースになっていない後続の変更が破棄されないことを保証しますが、バックグラウンドプロセスがバックグラウンドで参照を更新している場合、これは簡単に無効になります。私たちは、あなたが見たはずであり、そしてより積極的に参照しようとしている参照のヒューリスティックとして、リモート追跡情報以外に何も持っていません。</target>
        </trans-unit>
        <trans-unit id="c8ef7004934ae749808b9e22322b2c11275f98e4" translate="yes" xml:space="preserve">
          <source>The protocol names currently used by git are:</source>
          <target state="translated">現在gitで使われているプロトコル名は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="19913c2c5a680884fd5ab271ea84dfe92e10bf53" translate="yes" xml:space="preserve">
          <source>The protocol over which the credential will be used (e.g., &lt;code&gt;https&lt;/code&gt;).</source>
          <target state="translated">資格情報が使用されるプロトコル（例： &lt;code&gt;https&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="27c53e4d1c63b3496c93b1976851fe0522937712" translate="yes" xml:space="preserve">
          <source>The provided options must not contain a NUL or LF character.</source>
          <target state="translated">提供されるオプションには、NUL または LF 文字を含んではいけません。</target>
        </trans-unit>
        <trans-unit id="5fb1f43ddd5fc4b8ac18d086f82e6f88c9ed5855" translate="yes" xml:space="preserve">
          <source>The purpose of gitignore files is to ensure that certain files not tracked by Git remain untracked.</source>
          <target state="translated">gitignore files の目的は、Git によって追跡されていない特定のファイルが追跡されないようにすることです。</target>
        </trans-unit>
        <trans-unit id="a2b9675d20ab3c1e80e15b296d660914f6ea2131" translate="yes" xml:space="preserve">
          <source>The purpose of the hook is to edit the message file in place, and it is not suppressed by the &lt;code&gt;--no-verify&lt;/code&gt; option. A non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit hook.</source>
          <target state="translated">フックの目的は、メッセージファイルを適切に編集することであり、 &lt;code&gt;--no-verify&lt;/code&gt; オプションによって抑制されません。ゼロ以外の終了は、フックの失敗を意味し、コミットを中止します。事前コミットフックの代わりとして使用しないでください。</target>
        </trans-unit>
        <trans-unit id="383a661ab7ffdec395082f1f22f245f53263885b" translate="yes" xml:space="preserve">
          <source>The push URL of a remote repository. See &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;.</source>
          <target state="translated">リモートリポジトリのプッシュURL。&lt;a href=&quot;git-push&quot;&gt;git-push [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e8cd29a2b80ae7f4721c7a9c69324052af609357" translate="yes" xml:space="preserve">
          <source>The push done by the other person updated the branch that used to point at commit X to point at commit A. It is a fast-forward.</source>
          <target state="translated">相手が行ったプッシュは、コミットXを指していたブランチをコミットAを指していたブランチに更新したものです。</target>
        </trans-unit>
        <trans-unit id="79a20eedac198c71849aef6d1fe1606ea1ee319f" translate="yes" xml:space="preserve">
          <source>The quilt series file.</source>
          <target state="translated">キルトシリーズのファイルです。</target>
        </trans-unit>
        <trans-unit id="eb2f9ed5ec284eab8396a9b582f3da5582d364ca" translate="yes" xml:space="preserve">
          <source>The raw output format from &quot;git-diff-index&quot;, &quot;git-diff-tree&quot;, &quot;git-diff-files&quot; and &quot;git diff --raw&quot; are very similar.</source>
          <target state="translated">git-diff-index」、「git-diff-tree」、「git-diff-files」、「git diff --raw」のraw出力形式は非常に似ています。</target>
        </trans-unit>
        <trans-unit id="a6ab1028c44c2d54846a9217b4a7ad959d178f38" translate="yes" xml:space="preserve">
          <source>The reachability bitmap is currently paired directly with a single packfile, using the pack-order as the object order to hopefully compress the bitmaps well using run-length encoding. This could be extended to pair a reachability bitmap with a multi-pack-index. If the multi-pack-index is extended to store a &quot;stable object order&quot; (a function Order(hash) = integer that is constant for a given hash, even as the multi-pack-index is updated) then a reachability bitmap could point to a multi-pack-index and be updated independently.</source>
          <target state="translated">リーチャビリティビットマップは現在、単一のパックファイルと直接ペアリングされており、パックオーダーをオブジェクトオーダーとして使用することで、ランレングスエンコーディングを使用してビットマップをうまく圧縮できることを期待している。これを拡張して、リーチャビリティ・ビットマップとマルチパックインデックスをペアにすることができる。multi-pack-index を拡張して「安定したオブジェクト順序」(関数 Order(hash)=整数で、multi-pack-index が更新されても、与えられたハッシュに対して一定である)を格納するようにすれば、リーチャビリティビットマップは multi-pack-index を指し示し、独立して更新することができるようになる。</target>
        </trans-unit>
        <trans-unit id="0aca04dff2f76e52dde4dcdd1542bfe4e1470100" translate="yes" xml:space="preserve">
          <source>The reason fast-import uses &lt;code&gt;:&lt;/code&gt; to denote a mark reference is this character is not legal in a Git branch name. The leading &lt;code&gt;:&lt;/code&gt; makes it easy to distinguish between the mark 42 (&lt;code&gt;:42&lt;/code&gt;) and the branch 42 (&lt;code&gt;42&lt;/code&gt; or &lt;code&gt;refs/heads/42&lt;/code&gt;), or an abbreviated SHA-1 which happened to consist only of base-10 digits.</source>
          <target state="translated">fast-importが使用する理由 &lt;code&gt;:&lt;/code&gt; マーク参照を示すために、この文字はGitブランチ名では無効です。先頭 &lt;code&gt;:&lt;/code&gt; マーク42（ &lt;code&gt;:42&lt;/code&gt; ）とブランチ42（ &lt;code&gt;42&lt;/code&gt; または &lt;code&gt;refs/heads/42&lt;/code&gt; ）、またはたまたま10桁のみで構成される省略されたSHA-1を簡単に区別できます。</target>
        </trans-unit>
        <trans-unit id="1aba410e8fcfe74102eea2fcf73898889acee3ed" translate="yes" xml:space="preserve">
          <source>The reason it doesn&amp;rsquo;t error out when provided without &lt;code&gt;--prune&lt;/code&gt; or its config versions is for flexibility of the configured versions, and to maintain a 1=1 mapping between what the command line flags do, and what the configuration versions do.</source>
          <target state="translated">&lt;code&gt;--prune&lt;/code&gt; またはその構成バージョンなしで提供された場合にエラーにならない理由は、構成されたバージョンの柔軟性と、コマンドラインフラグの機能と構成バージョンの機能の間の1 = 1マッピングを維持するためです。</target>
        </trans-unit>
        <trans-unit id="b2defd752d90b2a93e28eb3efe0e516f3fc264fc" translate="yes" xml:space="preserve">
          <source>The rebase will stop where &lt;code&gt;pick&lt;/code&gt; has been replaced with &lt;code&gt;edit&lt;/code&gt; or when a step in the list fails to mechanically resolve conflicts and needs your help. When you are done editing and/or resolving conflicts you can continue with &lt;code&gt;git rebase --continue&lt;/code&gt;. If you decide that things are getting too hairy, you can always bail out with &lt;code&gt;git rebase
--abort&lt;/code&gt;. Even after the rebase is complete, you can still recover the original branch by using the &lt;a href=&quot;#reflogs&quot;&gt;reflog&lt;/a&gt;.</source>
          <target state="translated">リベースは、 &lt;code&gt;pick&lt;/code&gt; が &lt;code&gt;edit&lt;/code&gt; 置き換えられた場合、またはリスト内のステップが競合を機械的に解決できず、支援が必要な場合に停止します。競合の編集や解決が完了したら、 &lt;code&gt;git rebase --continue&lt;/code&gt; を続行できます。物事が毛むくじゃらしていると判断した場合は、いつでも &lt;code&gt;git rebase --abort&lt;/code&gt; して救済できます。リベースが完了した後でも、&lt;a href=&quot;#reflogs&quot;&gt;reflog&lt;/a&gt;を使用して元のブランチを回復できます。</target>
        </trans-unit>
        <trans-unit id="939cf091c711a461fc7775d9278b48a4457f30c1" translate="yes" xml:space="preserve">
          <source>The ref namespace is hierarchical. Different subhierarchies are used for different purposes (e.g. the &lt;code&gt;refs/heads/&lt;/code&gt; hierarchy is used to represent local branches).</source>
          <target state="translated">ref名前空間は階層的です。さまざまなサブ階層がさまざまな目的で使用されます（たとえば、 &lt;code&gt;refs/heads/&lt;/code&gt; 階層はローカルブランチを表すために使用されます）。</target>
        </trans-unit>
        <trans-unit id="d11d2f57237e560f1ae2f7da112ae694568b2d78" translate="yes" xml:space="preserve">
          <source>The ref which the given symbolic ref refers to. If not a symbolic ref, nothing is printed. Respects the &lt;code&gt;:short&lt;/code&gt;, &lt;code&gt;:lstrip&lt;/code&gt; and &lt;code&gt;:rstrip&lt;/code&gt; options in the same way as &lt;code&gt;refname&lt;/code&gt; above.</source>
          <target state="translated">指定されたシンボリック参照が参照する参照。シンボリック参照でない場合、何も出力されません。上記の &lt;code&gt;refname&lt;/code&gt; と同じ方法で、 &lt;code&gt;:short&lt;/code&gt; 、 &lt;code&gt;:lstrip&lt;/code&gt; 、および &lt;code&gt;:rstrip&lt;/code&gt; オプションを尊重します。</target>
        </trans-unit>
        <trans-unit id="09256802b46aa557905f47df9fc0a1148d341199" translate="yes" xml:space="preserve">
          <source>The reflogs are kept by default for 30 days, after which they may be pruned. See &lt;a href=&quot;git-reflog&quot;&gt;git-reflog[1]&lt;/a&gt; and &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt; to learn how to control this pruning, and see the &quot;SPECIFYING REVISIONS&quot; section of &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; for details.</source>
          <target state="translated">reflogはデフォルトで30日間保持され、その後、整理されます。このプルーニングの制御方法については、&lt;a href=&quot;git-reflog&quot;&gt;git-reflog [1]&lt;/a&gt;と&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]&lt;/a&gt;を参照してください。詳細については、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]&lt;/a&gt;の「リビジョンの指定」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="29e87ce112fa8f38582e71025c0e3c162626939f" translate="yes" xml:space="preserve">
          <source>The refname parameter is relative to $GIT_DIR; e.g. for the master head this is &quot;refs/heads/master&quot;. The two sha1 arguments are the object names for the refname before and after the update. Note that the hook is called before the refname is updated, so either sha1-old is 0{40} (meaning there is no such ref yet), or it should match what is recorded in refname.</source>
          <target state="translated">refname パラメータは $GIT_DIR からの相対的なものです;例えば、マスターヘッドの場合は &quot;refs/heads/master&quot; となります。二つの sha1 引数は、更新前と更新後の refname のオブジェクト名です。フックは refname が更新される前に呼ばれることに注意してください。(まだそのような ref が存在しないことを意味します)、または refname に記録されているものと一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="21810fe3549bedbdcfb85519d93701f4c1ec8042" translate="yes" xml:space="preserve">
          <source>The refname value is relative to $GIT_DIR; e.g. for the master head this is &quot;refs/heads/master&quot;. The two sha1 values before each refname are the object names for the refname before and after the update. Refs that were created will have sha1-old equal to 0{40}, while refs that were deleted will have sha1-new equal to 0{40}, otherwise sha1-old and sha1-new should be valid objects in the repository.</source>
          <target state="translated">refname の値は $GIT_DIR からの相対的なもので、例えばマスターヘッドの場合は &quot;refs/heads/master&quot; となります。各 refname の前にある二つの sha1 値は、更新前と更新後の refname のオブジェクト名です。作成されたrefはsha1-oldが0{40}になり、削除されたrefはsha1-newが0{40}になります。</target>
        </trans-unit>
        <trans-unit id="f7cd6bb7198b77eda24e90f3bdabb1a4fb56aeb0" translate="yes" xml:space="preserve">
          <source>The refname value is relative to $GIT_DIR; e.g. for the master head this is &quot;refs/heads/master&quot;. The two sha1 values before each refname are the object names for the refname before and after the update. Refs to be created will have sha1-old equal to 0{40}, while refs to be deleted will have sha1-new equal to 0{40}, otherwise sha1-old and sha1-new should be valid objects in the repository.</source>
          <target state="translated">refname の値は $GIT_DIR からの相対的なもので、例えばマスターヘッドの場合は &quot;refs/heads/master&quot; となります。各 refname の前にある二つの sha1 値は、更新前と更新後の refname のオブジェクト名です。作成されるRefはsha1-oldが0{40}で、削除されるRefはsha1-newが0{40}で、それ以外の場合はsha1-oldとsha1-newがリポジトリ内で有効なオブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ce26e3499eea5a4c24942a8e072b3a9539557d0b" translate="yes" xml:space="preserve">
          <source>The regex can also be set via a diff driver or configuration option, see &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; or &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings.</source>
          <target state="translated">正規表現は、diffドライバーまたは構成オプションを介して設定することもできます&lt;a href=&quot;gitattributes&quot;&gt;。gitattributes [5]&lt;/a&gt;または&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。明示的に指定すると、すべてのdiffドライバーまたは構成設定がオーバーライドされます。差分ドライバーは構成設定をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="db9cbae31eee7dd0453a2f75d2431a49c7ce5a43" translate="yes" xml:space="preserve">
          <source>The regex must capture the source branch name in $1.</source>
          <target state="translated">正規表現は、ソースブランチ名を$1でキャプチャする必要があります。</target>
        </trans-unit>
        <trans-unit id="2f22e3781909efae9d373f9fa46942441b8a264c" translate="yes" xml:space="preserve">
          <source>The regular expression that the diff driver should use to recognize the hunk header. A built-in pattern may also be used. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">差分ドライバーがハンクヘッダーを認識するために使用する正規表現。組み込みパターンを使用することもできます。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4211f7342bdc098f581fc9d7939f84dc24cd9689" translate="yes" xml:space="preserve">
          <source>The regular expression that the diff driver should use to split words in a line. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">diffドライバが単語を行に分割するために使用する正規表現。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f0619f2eb83a7faf485cba23bd4bbef8fb0cb4dd" translate="yes" xml:space="preserve">
          <source>The remainder of the line, after stripping the spaces, is used as the help associated to the option.</source>
          <target state="translated">行の残りの部分は、空白を取り除いた後に、 そのオプションに関連するヘルプとして使われます。</target>
        </trans-unit>
        <trans-unit id="19c5350e9da63f63a8abbccc7168a03dfd13ebac" translate="yes" xml:space="preserve">
          <source>The remaining features cannot be overridden on a per project basis.</source>
          <target state="translated">残りの機能は、プロジェクトごとに上書きすることはできません。</target>
        </trans-unit>
        <trans-unit id="303228bfc99fc67a561e0782dc3e0ceb08c259bb" translate="yes" xml:space="preserve">
          <source>The remote branch name for a submodule, used by &lt;code&gt;git submodule
update --remote&lt;/code&gt;. Set this option to override the value found in the &lt;code&gt;.gitmodules&lt;/code&gt; file. See &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;git submodule update --remote&lt;/code&gt; で使用されるサブモジュールのリモートブランチ名。このオプションを設定して、 &lt;code&gt;.gitmodules&lt;/code&gt; ファイルにある値をオーバーライドします。詳細については、&lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1]&lt;/a&gt;および&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4fdf928f1cd746e7574e5e26895f63052b9e3300" translate="yes" xml:space="preserve">
          <source>The remote configuration is achieved using the &lt;code&gt;remote.origin.url&lt;/code&gt; and &lt;code&gt;remote.origin.fetch&lt;/code&gt; configuration variables. (See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">リモート構成は、 &lt;code&gt;remote.origin.url&lt;/code&gt; および &lt;code&gt;remote.origin.fetch&lt;/code&gt; 構成変数を使用して実現されます。（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e7b65b070cfabceee72964f903404025034f8258" translate="yes" xml:space="preserve">
          <source>The remote end did not report the successful update of the ref, perhaps because of a temporary error on the remote side, a break in the network connection, or other transient error.</source>
          <target state="translated">リモート側での一時的なエラー、ネットワーク接続の切断、またはその他の過渡的なエラーのためか、リモート側が ref の更新に成功したことを報告しませんでした。</target>
        </trans-unit>
        <trans-unit id="53c927a78ca0c11dc61a2c100f0e02c446d49374" translate="yes" xml:space="preserve">
          <source>The remote end refused the update. Usually caused by a hook on the remote side, or because the remote repository has one of the following safety options in effect: &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; (for pushes to the checked out branch), &lt;code&gt;receive.denyNonFastForwards&lt;/code&gt; (for forced non-fast-forward updates), &lt;code&gt;receive.denyDeletes&lt;/code&gt; or &lt;code&gt;receive.denyDeleteCurrent&lt;/code&gt;. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">リモートエンドは更新を拒否しました。通常、リモート側のフックによって引き起こされる、またはリモートリポジトリには、有効な以下の安全のいずれかのオプションを持っているので： &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; （へのプッシュがブランチをチェックアウトしたため）、 &lt;code&gt;receive.denyNonFastForwards&lt;/code&gt; 強制非早送り更新のため（ ）、 &lt;code&gt;receive.denyDeletes&lt;/code&gt; または &lt;code&gt;receive.denyDeleteCurrent&lt;/code&gt; 。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c9422d899b3eadda77c8387091e37d96facb6c2f" translate="yes" xml:space="preserve">
          <source>The remote heads to update from. This is relative to $GIT_DIR (e.g. &quot;HEAD&quot;, &quot;refs/heads/master&quot;). When unspecified, update from all heads the remote side has.</source>
          <target state="translated">更新元となるリモートのヘッド。これは $GIT_DIR からの相対的なものです (例:&quot;HEAD&quot;,&quot;refs/heads/master&quot;)。指定しない場合は、リモート側が持っているすべてのヘッドから更新します。</target>
        </trans-unit>
        <trans-unit id="0419c5b470511fe246bdc207ab1f44978b5929c7" translate="yes" xml:space="preserve">
          <source>The remote hostname for a network credential.</source>
          <target state="translated">ネットワーク クレデンシャルのリモート ホスト名。</target>
        </trans-unit>
        <trans-unit id="a7632b9807699f7e6cd146f3dd66e0428b068933" translate="yes" xml:space="preserve">
          <source>The remote ref that matches &amp;lt;src&amp;gt; is fetched, and if &amp;lt;dst&amp;gt; is not an empty string, an attempt is made to update the local ref that matches it.</source>
          <target state="translated">&amp;lt;src&amp;gt;に一致するリモート参照がフェッチされ、&amp;lt;dst&amp;gt;が空の文字列でない場合は、それに一致するローカル参照を更新しようとします。</target>
        </trans-unit>
        <trans-unit id="282ef7eedc5a5bdee9740e04ed8375ea205f3da3" translate="yes" xml:space="preserve">
          <source>The remote refs to update.</source>
          <target state="translated">更新するリモートレファレンス。</target>
        </trans-unit>
        <trans-unit id="1126548b6dd0a73d0e4b3cf8a47f765ced5296ec" translate="yes" xml:space="preserve">
          <source>The remote to push to by default. Overrides &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; for all branches, and is overridden by &lt;code&gt;branch.&amp;lt;name&amp;gt;.pushRemote&lt;/code&gt; for specific branches.</source>
          <target state="translated">デフォルトでプッシュするリモート。オーバーライドの &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; すべての分岐のための、およびによって上書きされる &lt;code&gt;branch.&amp;lt;name&amp;gt;.pushRemote&lt;/code&gt; 特定の分岐のため。</target>
        </trans-unit>
        <trans-unit id="69cc315a656a6408b19c28c1250214347094ab33" translate="yes" xml:space="preserve">
          <source>The replaced object and the replacement object must be of the same type. This restriction can be bypassed using &lt;code&gt;-f&lt;/code&gt;.</source>
          <target state="translated">置換されるオブジェクトと置換オブジェクトは同じタイプでなければなりません。この制限は、 &lt;code&gt;-f&lt;/code&gt; を使用して回避できます。</target>
        </trans-unit>
        <trans-unit id="1ad56792b1c232c0733d7ad92a2a6edfcbfd7d1e" translate="yes" xml:space="preserve">
          <source>The report does not tell you anything about lines which have been deleted or replaced; you need to use a tool such as &lt;code&gt;git diff&lt;/code&gt; or the &quot;pickaxe&quot; interface briefly mentioned in the following paragraph.</source>
          <target state="translated">レポートは、削除または置換された行については何も通知しません。 &lt;code&gt;git diff&lt;/code&gt; や次の段落で簡単に説明する「pickaxe」インターフェースなどのツールを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2c986c29f6ffa22f2a8c706bbb75b7aeb4461294" translate="yes" xml:space="preserve">
          <source>The repository URL to be pulled from.</source>
          <target state="translated">プルアウトするリポジトリのURL。</target>
        </trans-unit>
        <trans-unit id="944d2d5ccd37faa608b4a3dce165543a5adf2fbf" translate="yes" xml:space="preserve">
          <source>The repository the action will be performed on.</source>
          <target state="translated">アクションが実行されるリポジトリ。</target>
        </trans-unit>
        <trans-unit id="0e7c4601cfd7634812fd5318d08d4f529fb59bef" translate="yes" xml:space="preserve">
          <source>The repository to get a tar archive from.</source>
          <target state="translated">tar アーカイブを取得するリポジトリ。</target>
        </trans-unit>
        <trans-unit id="bc81f7623489d466e462d3597d8dc6ebd3c462a1" translate="yes" xml:space="preserve">
          <source>The repository to sync from.</source>
          <target state="translated">同期するリポジトリ。</target>
        </trans-unit>
        <trans-unit id="3d7b45c15d44961366710f29c0592cfbaf8293a2" translate="yes" xml:space="preserve">
          <source>The repository to sync into.</source>
          <target state="translated">同期するリポジトリ。</target>
        </trans-unit>
        <trans-unit id="85a32286326310d42bba4488de0fbceb84f9845b" translate="yes" xml:space="preserve">
          <source>The repository to update.</source>
          <target state="translated">更新するリポジトリ。</target>
        </trans-unit>
        <trans-unit id="15ea4cb9c0b7ca59bf54604e4e274c258d2ab5d8" translate="yes" xml:space="preserve">
          <source>The response of &lt;code&gt;fetch&lt;/code&gt; is broken into a number of sections separated by delimiter packets (0001), with each section beginning with its section header.</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; の応答は、区切りパケット（0001）で区切られたいくつかのセクションに分割され、各セクションはセクションヘッダーで始まります。</target>
        </trans-unit>
        <trans-unit id="4f1a001f6b3f7c16917c0e0241e976b8717f870a" translate="yes" xml:space="preserve">
          <source>The rest of the documentation discusses &lt;code&gt;fsck.*&lt;/code&gt; for brevity, but the same applies for the corresponding &lt;code&gt;receive.fsck.*&lt;/code&gt; and &lt;code&gt;fetch.&amp;lt;msg-id&amp;gt;.*&lt;/code&gt;. variables.</source>
          <target state="translated">ドキュメントの残りの部分では、簡潔にするために &lt;code&gt;fsck.*&lt;/code&gt; について説明しますが、対応する &lt;code&gt;receive.fsck.*&lt;/code&gt; および &lt;code&gt;fetch.&amp;lt;msg-id&amp;gt;.*&lt;/code&gt; も同じことが当てはまります。変数。</target>
        </trans-unit>
        <trans-unit id="ac10b74ced74e00c661f52e9250a42f47fd6add4" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;git merge-base --octopus A B C&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, because &lt;code&gt;2&lt;/code&gt; is the best common ancestor of all commits.</source>
          <target state="translated">&lt;code&gt;git merge-base --octopus A B C&lt;/code&gt; の結果は &lt;code&gt;2&lt;/code&gt; です。これは、 &lt;code&gt;2&lt;/code&gt; がすべてのコミットの最も一般的な祖先であるためです。</target>
        </trans-unit>
        <trans-unit id="1e8fa948e18ddfaa21178042cd566eaada7aae80" translate="yes" xml:space="preserve">
          <source>The result of comparison is passed from these commands to what is internally called &quot;diffcore&quot;, in a format similar to what is output when the -p option is not used. E.g.</source>
          <target state="translated">比較結果は、これらのコマンドから内部的に &quot;diffcore&quot; と呼ばれるものに渡されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d6478eddd3e6be6e1f0703d8450a597d1ea3dfe6" translate="yes" xml:space="preserve">
          <source>The result of such a bisection would be that we would find that H is the first bad commit, when in fact it&amp;rsquo;s B. So that would be wrong!</source>
          <target state="translated">そのような二等分の結果、実際にはBであるのに、Hが最初の不良コミットであることがわかります。</target>
        </trans-unit>
        <trans-unit id="baad8b31b0f95aa1296c5c88ad34816424f2926e" translate="yes" xml:space="preserve">
          <source>The resulting directory proj.git contains a &quot;bare&quot; git repository&amp;mdash;​it is just the contents of the &lt;code&gt;.git&lt;/code&gt; directory, without any files checked out around it.</source>
          <target state="translated">結果のディレクトリproj.gitには「ベア」gitリポジトリが含まれています。それは &lt;code&gt;.git&lt;/code&gt; ディレクトリの内容にすぎず、周りにチェックアウトされているファイルはありません。</target>
        </trans-unit>
        <trans-unit id="31dc4b206e7be8ca9a78c4871cc58f03a5340e5b" translate="yes" xml:space="preserve">
          <source>The revision data is appended to the file if it already exists, for use when doing incremental imports.</source>
          <target state="translated">リビジョンデータは、インクリメンタルインポートを行う際に使用するために、ファイルが既に存在する場合にはそのファイルに追加されます。</target>
        </trans-unit>
        <trans-unit id="0ca811b30547ebe29846859e95a6c9147e8141b4" translate="yes" xml:space="preserve">
          <source>The rewrite rule guarantees that existing static files will be properly served, whereas any other URL will be passed to gitweb as PATH_INFO parameter.</source>
          <target state="translated">この書き換えルールは、既存の静的ファイルが適切に処理されることを保証します。</target>
        </trans-unit>
        <trans-unit id="7511d9248c0671ec876d283606ae9df0bea2f6b2" translate="yes" xml:space="preserve">
          <source>The ripple effect of a &quot;hard case&quot; recovery is especially bad: &lt;code&gt;everyone&lt;/code&gt; downstream from &lt;code&gt;topic&lt;/code&gt; will now have to perform a &quot;hard case&quot; recovery too!</source>
          <target state="translated">「ハードケース」回復の波及効果は特に悪いです。 &lt;code&gt;topic&lt;/code&gt; 下流にいる &lt;code&gt;everyone&lt;/code&gt; が「ハードケース」回復も実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="93d5c7537e241865d860131eb6d72edc95c9d772" translate="yes" xml:space="preserve">
          <source>The root of the CVS archive. May be local (a simple path) or remote; currently, only the :local:, :ext: and :pserver: access methods are supported. If not given, &lt;code&gt;git cvsimport&lt;/code&gt; will try to read it from &lt;code&gt;CVS/Root&lt;/code&gt;. If no such file exists, it checks for the &lt;code&gt;CVSROOT&lt;/code&gt; environment variable.</source>
          <target state="translated">CVSアーカイブのルート。ローカル（単純なパス）またはリモートの場合があります。現在、：local：、：ext：、：pserver：アクセスメソッドのみがサポートされています。指定しない場合、 &lt;code&gt;git cvsimport&lt;/code&gt; は &lt;code&gt;CVS/Root&lt;/code&gt; から読み取ろうとします。そのようなファイルが存在しない場合は、 &lt;code&gt;CVSROOT&lt;/code&gt; 環境変数をチェックします。</target>
        </trans-unit>
        <trans-unit id="df41fdf293aec02e3dee1ead27003284471a1181" translate="yes" xml:space="preserve">
          <source>The root of the tree can be represented by an empty string as &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">ツリーのルートは、 &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; のように空の文字列で表すことができます。</target>
        </trans-unit>
        <trans-unit id="557dc21e01559e09224bc25bcbd6a672b4e3d883" translate="yes" xml:space="preserve">
          <source>The rule to determine which remote branch to merge after fetching is a bit involved, in order not to break backward compatibility.</source>
          <target state="translated">フェッチ後にどのリモートブランチをマージするかを決めるルールは、下位互換性を壊さないようにするために少し複雑です。</target>
        </trans-unit>
        <trans-unit id="bbff5506f0bff9eed6d1a29f80ce8f838449bb56" translate="yes" xml:space="preserve">
          <source>The rules by which the pattern matches paths are the same as in &lt;code&gt;.gitignore&lt;/code&gt; files (see &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;), with a few exceptions:</source>
          <target state="translated">パターンがパスに一致するルールは、いくつかの例外を除いて、 &lt;code&gt;.gitignore&lt;/code&gt; ファイル（&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]を&lt;/a&gt;参照）と同じです。</target>
        </trans-unit>
        <trans-unit id="579e7c08387accae89723ba13e3ec53145837232" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;--merge&lt;/code&gt; option above, but changes the way the conflicting hunks are presented, overriding the &lt;code&gt;merge.conflictStyle&lt;/code&gt; configuration variable. Possible values are &quot;merge&quot; (default) and &quot;diff3&quot; (in addition to what is shown by &quot;merge&quot; style, shows the original contents).</source>
          <target state="translated">上記の &lt;code&gt;--merge&lt;/code&gt; オプションと同じですが、競合するハンクの表示方法を変更し、 &lt;code&gt;merge.conflictStyle&lt;/code&gt; 構成変数を上書きします。可能な値は「merge」（デフォルト）と「diff3」です（「merge」スタイルで表示されるものに加えて、元のコンテンツを表示します）。</target>
        </trans-unit>
        <trans-unit id="1a11cc7f94381fe2de07d484775d2914bf62d241" translate="yes" xml:space="preserve">
          <source>The same as the previous one:</source>
          <target state="translated">と同じです。</target>
        </trans-unit>
        <trans-unit id="ebdfbbadd1b4e3e4d3c390aed297730072348592" translate="yes" xml:space="preserve">
          <source>The same rewind and rebuild process may be followed for &lt;code&gt;pu&lt;/code&gt;. A public announcement is not necessary since &lt;code&gt;pu&lt;/code&gt; is a throw-away branch, as described above.</source>
          <target state="translated">&lt;code&gt;pu&lt;/code&gt; についても、同じ巻き戻しと再構築のプロセスを実行できます。上記のように、 &lt;code&gt;pu&lt;/code&gt; は使い捨てのブランチであるため、公表は必要ありません。</target>
        </trans-unit>
        <trans-unit id="30d931302d20c8d2d3f4d29cdb99720d08f56244" translate="yes" xml:space="preserve">
          <source>The same trailer as a v1 pack file:</source>
          <target state="translated">v1パックファイルと同じトレーラー。</target>
        </trans-unit>
        <trans-unit id="ef6e4cd5de79a2002e4df69090fc16d7024fe532" translate="yes" xml:space="preserve">
          <source>The sample &lt;code&gt;prepare-commit-msg&lt;/code&gt; hook that comes with Git removes the help message found in the commented portion of the commit template.</source>
          <target state="translated">Gitに付属 &lt;code&gt;prepare-commit-msg&lt;/code&gt; サンプルのprepare-commit-msgフックは、コミットテンプレートのコメント部分にあるヘルプメッセージを削除します。</target>
        </trans-unit>
        <trans-unit id="0814a224cf6ffffca90b05b46ffd264f8d62f600" translate="yes" xml:space="preserve">
          <source>The sample hooks are all disabled by default. To enable one of the sample hooks rename it by removing its &lt;code&gt;.sample&lt;/code&gt; suffix.</source>
          <target state="translated">デフォルトでは、サンプルフックはすべて無効になっています。サンプルフックの1つを有効にするには、 &lt;code&gt;.sample&lt;/code&gt; サフィックスを削除して名前を変更します。</target>
        </trans-unit>
        <trans-unit id="ee2f5fb52849fdcd69a62a399938c4c71ec4e36c" translate="yes" xml:space="preserve">
          <source>The sane thing. Just admit you screwed up, and use a different name. Others have already seen one tag-name, and if you keep the same name, you may be in the situation that two people both have &quot;version X&quot;, but they actually have &lt;code&gt;different&lt;/code&gt; &quot;X&quot;'s. So just call it &quot;X.1&quot; and be done with it.</source>
          <target state="translated">正気なこと。失敗したことを認め、別の名前を使用してください。他の人はすでに1つのタグ名を見たことがあります。同じ名前を保持している場合、2人のユーザーが両方とも「バージョンX」を持っているが、実際には「X」が &lt;code&gt;different&lt;/code&gt; という状況にあるかもしれません。だからそれを「X.1」と呼んでそれで終わりです。</target>
        </trans-unit>
        <trans-unit id="16a78cd21b6c709f016f4a17d2a1069e970db97c" translate="yes" xml:space="preserve">
          <source>The script expects you to provide the key roots where it can start the import from an &lt;code&gt;initial import&lt;/code&gt; or &lt;code&gt;tag&lt;/code&gt; type of Arch commit. It will follow and import new branches within the provided roots.</source>
          <target state="translated">スクリプトは、 &lt;code&gt;initial import&lt;/code&gt; またはArchタイプの &lt;code&gt;tag&lt;/code&gt; タイプからインポートを開始できるキールートを提供することを期待しています。提供されたルート内の新しいブランチをフォローしてインポートします。</target>
        </trans-unit>
        <trans-unit id="793ca81ee99913a2e3edc7ca33209f79549422e8" translate="yes" xml:space="preserve">
          <source>The scriptlet sets &lt;code&gt;GIT_DIR&lt;/code&gt; and &lt;code&gt;GIT_OBJECT_DIRECTORY&lt;/code&gt; shell variables, but does &lt;strong&gt;not&lt;/strong&gt; export them to the environment.</source>
          <target state="translated">スクリプトレットは、 &lt;code&gt;GIT_DIR&lt;/code&gt; および &lt;code&gt;GIT_OBJECT_DIRECTORY&lt;/code&gt; シェル変数を設定しますが、環境にエクスポートしませ&lt;strong&gt;ん&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8b53f7beee61a37b0174ea389f5f36080ff3c1b7" translate="yes" xml:space="preserve">
          <source>The second .gitignore prevents Git from ignoring &lt;code&gt;arch/foo/kernel/vmlinux.lds.S&lt;/code&gt;.</source>
          <target state="translated">2番目の.gitignoreは、Gitが &lt;code&gt;arch/foo/kernel/vmlinux.lds.S&lt;/code&gt; を無視しないようにします。</target>
        </trans-unit>
        <trans-unit id="fc737587a80c0c07a4fffd3646c479ff0f86cddd" translate="yes" xml:space="preserve">
          <source>The second example demonstrates that you can abbreviate the object name to only the first several hexadecimal digits in most places.</source>
          <target state="translated">2 番目の例は、ほとんどの場所でオブジェクト名を最初の数桁の 16 進数だけに省略できることを示しています。</target>
        </trans-unit>
        <trans-unit id="2890a9def3fff903603dee47b68cd9b5af108707" translate="yes" xml:space="preserve">
          <source>The second format is what gets used when &lt;code&gt;--stage=all&lt;/code&gt;. The three stage temporary fields (stage1temp, stage2temp, stage3temp) list the name of the temporary file if there is a stage entry in the index or &lt;code&gt;.&lt;/code&gt; if there is no stage entry. Paths which only have a stage 0 entry will always be omitted from the output.</source>
          <target state="translated">2番目の形式は、-- &lt;code&gt;--stage=all&lt;/code&gt; 場合に使用される形式です。3つのステージの一時フィールド（stage1temp、stage2temp、stage3temp）には、インデックスまたはにステージエントリがある場合、一時ファイルの名前がリストされます &lt;code&gt;.&lt;/code&gt; ステージエントリがない場合。ステージ0エントリのみを持つパスは、常に出力から除外されます。</target>
        </trans-unit>
        <trans-unit id="86b87f951d8d8be1a02da6e062a3489256945d73" translate="yes" xml:space="preserve">
          <source>The second parameter passed to the hook is the indicator for whether or not the index was updated and the skip-worktree bit could have changed. &quot;1&quot; meaning skip-worktree bits could have been updated and &quot;0&quot; meaning they were not.</source>
          <target state="translated">フックに渡される 2 番目のパラメータは、インデックスが更新されたかどうかとスキップワークツリービットが変更されたかどうかの指標です。&quot;1&quot; はスキップワークツリービットが更新された可能性があることを意味し、&quot;0&quot; は更新されなかったことを意味します。</target>
        </trans-unit>
        <trans-unit id="b730007914036d9f0fb3ba6052d64853bae216ae" translate="yes" xml:space="preserve">
          <source>The second syntax (&quot;&lt;code&gt;git merge --abort&lt;/code&gt;&quot;) can only be run after the merge has resulted in conflicts. &lt;code&gt;git merge --abort&lt;/code&gt; will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes when the merge started (and especially if those changes were further modified after the merge was started), &lt;code&gt;git merge --abort&lt;/code&gt; will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:</source>
          <target state="translated">2番目の構文（ &quot; &lt;code&gt;git merge --abort&lt;/code&gt; &quot;）は、マージによって競合が発生した後にのみ実行できます。 &lt;code&gt;git merge --abort&lt;/code&gt; は、マージプロセスを中止し、マージ前の状態を再構築しようとします。ただし、マージの開始時にコミットされていない変更があった場合（特に、マージの開始後にこれらの変更がさらに変更された場合）、 &lt;code&gt;git merge --abort&lt;/code&gt; は、元の（マージ前の）変更を再構築できない場合があります。したがって：</target>
        </trans-unit>
        <trans-unit id="1f7dcee78b5872602756cd0d868ad6253db301fe" translate="yes" xml:space="preserve">
          <source>The second transformation in the chain is diffcore-break, and is controlled by the -B option to the &lt;code&gt;git diff-*&lt;/code&gt; commands. This is used to detect a filepair that represents &quot;complete rewrite&quot; and break such filepair into two filepairs that represent delete and create. E.g. If the input contained this filepair:</source>
          <target state="translated">チェーンの2番目の変換はdiffcore-breakであり、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドの-Bオプションによって制御されます。これは、「完全な書き換え」を表すファイルペアを検出し、そのようなファイルペアを、削除と作成を表す2つのファイルペアに分割するために使用されます。たとえば、入力にこのファイルペアが含まれていた場合：</target>
        </trans-unit>
        <trans-unit id="5aa738048a0181b9705365955bd04c18156f9d33" translate="yes" xml:space="preserve">
          <source>The section &lt;code&gt;submodule.foo.*&lt;/code&gt; in the &lt;code&gt;.gitmodules&lt;/code&gt; file gives additional hints to Git&amp;rsquo;s porcelain layer. For example, the &lt;code&gt;submodule.foo.url&lt;/code&gt; setting specifies where to obtain the submodule.</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; ファイルのセクション &lt;code&gt;submodule.foo.*&lt;/code&gt; は、Gitの磁器層に追加のヒントを与えます。たとえば、 &lt;code&gt;submodule.foo.url&lt;/code&gt; 設定は、サブモジュールを取得する場所を指定します。</target>
        </trans-unit>
        <trans-unit id="addff8a92e5ddb901ae8a38330bc2dcce4be9fbb" translate="yes" xml:space="preserve">
          <source>The section or key is invalid (ret=1),</source>
          <target state="translated">セクションまたはキーが無効です(ret=1)。</target>
        </trans-unit>
        <trans-unit id="463ba2454fad2719570e32271a038c3acce699a7" translate="yes" xml:space="preserve">
          <source>The server MUST NOT send any &quot;unshallow&quot; lines for anything which the client has not indicated was shallow as a part of its request.</source>
          <target state="translated">サーバーは、クライアントがリクエストの一部として浅いことを示さなかったものに 対して、「浅くない」行を送ってはならない[MUST NOT]。</target>
        </trans-unit>
        <trans-unit id="d868af4cbdec034778f61defdf53e9a4307fd341" translate="yes" xml:space="preserve">
          <source>The server MUST NOT send any refs which were not requested using &lt;code&gt;want-ref&lt;/code&gt; lines.</source>
          <target state="translated">サーバーは、 &lt;code&gt;want-ref&lt;/code&gt; 行を使用して要求されなかった参照を送信してはなりません（MUST NOT）。</target>
        </trans-unit>
        <trans-unit id="446930d87bed0e82e29e329dd081708ba37057c2" translate="yes" xml:space="preserve">
          <source>The server can advertise the &lt;code&gt;agent&lt;/code&gt; capability with a value &lt;code&gt;X&lt;/code&gt; (in the form &lt;code&gt;agent=X&lt;/code&gt;) to notify the client that the server is running version &lt;code&gt;X&lt;/code&gt;. The client may optionally send its own agent string by including the &lt;code&gt;agent&lt;/code&gt; capability with a value &lt;code&gt;Y&lt;/code&gt; (in the form &lt;code&gt;agent=Y&lt;/code&gt;) in its request to the server (but it MUST NOT do so if the server did not advertise the agent capability). The &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; strings may contain any printable ASCII characters except space (i.e., the byte range 32 &amp;lt; x &amp;lt; 127), and are typically of the form &quot;package/version&quot; (e.g., &quot;git/1.8.3.1&quot;). The agent strings are purely informative for statistics and debugging purposes, and MUST NOT be used to programmatically assume the presence or absence of particular features.</source>
          <target state="translated">サーバーは、値 &lt;code&gt;X&lt;/code&gt; （ &lt;code&gt;agent=X&lt;/code&gt; の形式）を使用して &lt;code&gt;agent&lt;/code&gt; 機能を通知し、サーバーがバージョン &lt;code&gt;X&lt;/code&gt; を実行していることをクライアントに通知できます。クライアントは、オプションで、サーバーへのリクエストに値 &lt;code&gt;Y&lt;/code&gt; （ &lt;code&gt;agent=Y&lt;/code&gt; の形式）の &lt;code&gt;agent&lt;/code&gt; 機能を含めることにより、独自のエージェント文字列を送信できます（ただし、サーバーがエージェント機能をアドバタイズしなかった場合は送信しないでください）。 &lt;code&gt;X&lt;/code&gt; と &lt;code&gt;Y&lt;/code&gt; 文字列には、スペース以外の印刷可能なASCII文字（つまり、バイト範囲32 &amp;lt;x &amp;lt;127）を含めることができ、通常は「package / version」の形式（たとえば、「git / 1.8.3.1」）です。エージェント文字列は、統計とデバッグの目的で純粋に情報を提供するものであり、特定の機能の有無をプログラムで仮定するために使用してはなりません。</target>
        </trans-unit>
        <trans-unit id="5dbb8fc2dd2ef1317864e26b0a2f75da26a1d7f0" translate="yes" xml:space="preserve">
          <source>The server sends a &quot;shallow obj-id&quot; line for each commit whose parents will not be sent in the following packfile.</source>
          <target state="translated">サーバは、以下のpackfileで親が送信されないコミットごとに「浅いobj-id」の行を送信します。</target>
        </trans-unit>
        <trans-unit id="15cbc52acb55c8a437e7a9fc2cb2ebb8c994afc3" translate="yes" xml:space="preserve">
          <source>The server sends an &quot;unshallow obj-id&quot; line for each commit which the client has indicated is shallow, but is no longer shallow as a result of the fetch (due to its parents being sent in the following packfile).</source>
          <target state="translated">サーバは、クライアントが浅いと指摘した各コミットに対して、&quot;unshallow obj-id&quot; 行を送信します。</target>
        </trans-unit>
        <trans-unit id="3f482eecb5e3fca563243c0419eece540e0582ac" translate="yes" xml:space="preserve">
          <source>The server will respond with &quot;ACK obj-id&quot; for all of the object ids sent as have lines which are common.</source>
          <target state="translated">サーバは、共通の行を持つように送信された全てのオブジェクトIDに対して、&quot;ACK obj-id &quot;で応答します。</target>
        </trans-unit>
        <trans-unit id="543a974b0aa8c62d541ca2830198235b945cc003" translate="yes" xml:space="preserve">
          <source>The server will respond with &quot;NAK&quot; if none of the object ids sent as have lines were common.</source>
          <target state="translated">have行として送られたオブジェクトIDが共通のものがなかった場合、サーバは &quot;NAK &quot;で応答します。</target>
        </trans-unit>
        <trans-unit id="568256da628f1737b5310a22de9a07629ce73e0d" translate="yes" xml:space="preserve">
          <source>The server will respond with a &quot;ready&quot; line indicating that the server has found an acceptable common base and is ready to make and send a packfile (which will be found in the packfile section of the same response)</source>
          <target state="translated">サーバは &quot;ready&quot; という行で応答し、サーバが許容可能な共通ベースを見つけたことを示し、パックファイルを作成して送信する準備ができていることを示します (これは同じ応答の packfile セクションにあります)。</target>
        </trans-unit>
        <trans-unit id="69ff3eec8c55e5a8095ea13f51e31e429dc845d6" translate="yes" xml:space="preserve">
          <source>The server will send a ref listing (&quot;&amp;lt;oid&amp;gt; &amp;lt;refname&amp;gt;&quot;) for each reference requested using &lt;code&gt;want-ref&lt;/code&gt; lines.</source>
          <target state="translated">サーバーは、 &lt;code&gt;want-ref&lt;/code&gt; 行を使用して要求された各参照の参照リスト（ &quot;&amp;lt;oid&amp;gt; &amp;lt;refname&amp;gt;&quot;）を送信します。</target>
        </trans-unit>
        <trans-unit id="afb7e2ac1ca268d29d3dabe65a1485bc3c99ebf1" translate="yes" xml:space="preserve">
          <source>The server will then check to ensure that the client&amp;rsquo;s request is comprised of a valid command as well as valid capabilities which were advertised. If the request is valid the server will then execute the command. A server MUST wait till it has received the client&amp;rsquo;s entire request before issuing a response. The format of the response is determined by the command being executed, but in all cases a flush-pkt indicates the end of the response.</source>
          <target state="translated">次に、サーバーは、クライアントのリクエストが、アドバタイズされた有効なコマンドと有効な機能で構成されていることを確認します。リクエストが有効な場合、サーバーはコマンドを実行します。サーバーは、クライアントのリクエスト全体を受信して​​から応答を発行するまで待機する必要があります。応答の形式は実行されるコマンドによって決まりますが、すべての場合において、flush-pktは応答の終わりを示します。</target>
        </trans-unit>
        <trans-unit id="537b1e0777fad4eaaafbf4ccf5940ab37b1e2ed6" translate="yes" xml:space="preserve">
          <source>The shared index part, to be referenced by $GIT_DIR/index and other temporary index files. Only valid in split index mode.</source>
          <target state="translated">共有インデックス部分で、$GIT_DIR/index や他の一時インデックスファイルから参照されます。スプリットインデックスモードでのみ有効です。</target>
        </trans-unit>
        <trans-unit id="d11a14c0103fd18e1ebb96bcb7251e0f8abbce80" translate="yes" xml:space="preserve">
          <source>The shift magic first throws away the tree id and then the -p parameters. Note that this handles merges properly! In case Darl committed a merge between P1 and P2, it will be propagated properly and all children of the merge will become merge commits with P1,P2 as their parents instead of the merge commit.</source>
          <target state="translated">シフトマジックでは、最初にツリー ID を捨て、次に -p パラメータを捨てます。これはマージを適切に処理することに注意してください! Darl が P1 と P2 の間でマージをコミットした場合、それは適切に伝搬され、すべてのマージの子はマージコミットの代わりに P1,P2 を親としてマージコミットになります。</target>
        </trans-unit>
        <trans-unit id="e33b2d8b27401f604cb70ad4d214df90a2abf20c" translate="yes" xml:space="preserve">
          <source>The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one.</source>
          <target state="translated">類似度指数は変更されていない行の割合、非類似度指数は変更された行の割合です。これは切り捨てられた整数で、その後にパーセント記号が続きます。このように、類似度インデックスの値100%は、2つの等しいファイルのために予約されており、100%の非類似度は、古いファイルの行が新しいファイルに入っていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="09f0c715250f8ac9e78727d6768d66502facff83" translate="yes" xml:space="preserve">
          <source>The simplest commit to find is the HEAD commit, which we can find from .git/HEAD:</source>
          <target state="translated">最も簡単なコミットは HEAD コミットで、.git/HEAD から見つけることができます。</target>
        </trans-unit>
        <trans-unit id="938f800e1b465bd0f07eb377492ba2456bfbed2c" translate="yes" xml:space="preserve">
          <source>The simplest way to do this is using &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; and ssh; to update the remote branch named &lt;code&gt;master&lt;/code&gt; with the latest state of your branch named &lt;code&gt;master&lt;/code&gt;, run</source>
          <target state="translated">これを行う最も簡単な方法は、&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;とsshを使用することです。名前のリモートブランチ更新する &lt;code&gt;master&lt;/code&gt; 名前付きブランチの最新の状態を持つ &lt;code&gt;master&lt;/code&gt; 、実行を</target>
        </trans-unit>
        <trans-unit id="a5eba655ac4b55a1106bdc6c6dbf2b0d1ad04c8a" translate="yes" xml:space="preserve">
          <source>The simplest way to mark a file as binary is to unset the diff attribute in the &lt;code&gt;.gitattributes&lt;/code&gt; file:</source>
          <target state="translated">ファイルをバイナリとしてマークする最も簡単な方法は、 &lt;code&gt;.gitattributes&lt;/code&gt; ファイルのdiff属性を設定解除することです。</target>
        </trans-unit>
        <trans-unit id="99bb329f9f9a76ae9c81982693e8d5911709e87c" translate="yes" xml:space="preserve">
          <source>The size of the object (the same as &lt;code&gt;git cat-file -s&lt;/code&gt; reports). Append &lt;code&gt;:disk&lt;/code&gt; to get the size, in bytes, that the object takes up on disk. See the note about on-disk sizes in the &lt;code&gt;CAVEATS&lt;/code&gt; section below.</source>
          <target state="translated">オブジェクトのサイズ（ &lt;code&gt;git cat-file -s&lt;/code&gt; reports と同じ）。 &lt;code&gt;:disk&lt;/code&gt; を追加して、オブジェクトがディスク上で占めるサイズをバイト単位で取得します。下記の &lt;code&gt;CAVEATS&lt;/code&gt; セクションにあるディスク上のサイズに関する注意を参照してください。</target>
        </trans-unit>
        <trans-unit id="3527fa64b6fd749102c379b2fd96b0df5cd454cb" translate="yes" xml:space="preserve">
          <source>The size of the window used by &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; when no window size is given on the command line. Defaults to 10.</source>
          <target state="translated">使用されるウィンドウのサイズ&lt;a href=&quot;git-pack-objects&quot;&gt;のgit-パックオブジェクト[1]&lt;/a&gt;ないウィンドウサイズはコマンドラインで与えられていない場合。デフォルトは10です。</target>
        </trans-unit>
        <trans-unit id="2372575566ae8c805d7580bdcbad6da1c4463611" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the object (the same as &lt;code&gt;cat-file -s&lt;/code&gt; reports).</source>
          <target state="translated">オブジェクトのサイズ（バイト単位）（ &lt;code&gt;cat-file -s&lt;/code&gt; レポートと同じ）。</target>
        </trans-unit>
        <trans-unit id="43c333a5a6bd3bca8b34d5163a7aa7b6d79d2d40" translate="yes" xml:space="preserve">
          <source>The size, in bytes, that the object takes up on disk. See the note about on-disk sizes in the &lt;code&gt;CAVEATS&lt;/code&gt; section below.</source>
          <target state="translated">オブジェクトがディスク上で占めるサイズ（バイト単位）。下記の &lt;code&gt;CAVEATS&lt;/code&gt; セクションにあるディスク上のサイズに関する注意を参照してください。</target>
        </trans-unit>
        <trans-unit id="7d544171c06a9cb39c4059f830c0a8558d3922c9" translate="yes" xml:space="preserve">
          <source>The slash &lt;code&gt;/&lt;/code&gt; is used as the directory separator. Separators may occur at the beginning, middle or end of the &lt;code&gt;.gitignore&lt;/code&gt; search pattern.</source>
          <target state="translated">スラッシュ &lt;code&gt;/&lt;/code&gt; は、ディレクトリー区切り文字として使用されます。区切り &lt;code&gt;.gitignore&lt;/code&gt; は、.gitignore検索パターンの最初、中間、または最後に出現する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e18b2266f1b1b9062e466bd05dd697dc8d44c68f" translate="yes" xml:space="preserve">
          <source>The smaller the changes in your commit, the most effective &quot;git bisect&quot; will be. And you will probably need &quot;git bisect&quot; less in the first place, as small changes are easier to review even if they are only reviewed by the committer.</source>
          <target state="translated">コミットの変更点が小さければ小さいほど、&quot;git bisect&quot; は最も効果的です。また、小さな変更はコミット者だけがレビューしてもレビューしやすいので、そもそも &quot;git bisect &quot;の必要性は低くなるでしょう。</target>
        </trans-unit>
        <trans-unit id="0dab2fe7462a5d0c0b797d08e789dbaaf7bfa1df" translate="yes" xml:space="preserve">
          <source>The smart HTTP server, &lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend[1]&lt;/a&gt;, will pass GIT_NAMESPACE through to the backend programs; see &lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend[1]&lt;/a&gt; for sample configuration to expose repository namespaces as repositories.</source>
          <target state="translated">スマートHTTPサーバー&lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend [1]は&lt;/a&gt;、GIT_NAMESPACEをバックエンドプログラムに渡します。リポジトリの名前空間をリポジトリとして公開するための設定例については、&lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9ee3be6f644f850e9ae409b580b74ced862493f8" translate="yes" xml:space="preserve">
          <source>The solution, of course, is to make a merge that we can undo: merge into a throw-away branch.</source>
          <target state="translated">解決策は、もちろん、元に戻せるようなマージをすることです。</target>
        </trans-unit>
        <trans-unit id="8a1117f540255f9a5dcffa1baa25558f77657b0e" translate="yes" xml:space="preserve">
          <source>The special case of restarting an incremental import from the current branch value should be written as:</source>
          <target state="translated">現在のブランチ値からインクリメンタルインポートを再開する場合の特殊なケースは、次のように書くべきです。</target>
        </trans-unit>
        <trans-unit id="3599d1b8b89ee48d0b633dcff9041c57284c3251" translate="yes" xml:space="preserve">
          <source>The special exit code 125 should be used when the current source code cannot be tested. If the script exits with this code, the current revision will be skipped (see &lt;code&gt;git bisect skip&lt;/code&gt; above). 125 was chosen as the highest sensible value to use for this purpose, because 126 and 127 are used by POSIX shells to signal specific error status (127 is for command not found, 126 is for command found but not executable&amp;mdash;​these details do not matter, as they are normal errors in the script, as far as &lt;code&gt;bisect run&lt;/code&gt; is concerned).</source>
          <target state="translated">現在のソースコードをテストできない場合は、特別な終了コード125を使用する必要があります。スクリプトがこのコードで終了した場合、現在のリビジョンはスキップされます（上記の &lt;code&gt;git bisect skip&lt;/code&gt; を参照）。 126と127はPOSIXシェルによって特定のエラーステータスを通知するために使用されるため、125がこの目的で使用する最高の賢明な値として選択されました（127はコマンドが見つからないため、126はコマンドが見つかりましたが実行可能ではないため、これらの詳細はありません）問題は、 &lt;code&gt;bisect run&lt;/code&gt; に関する限り、スクリプトの通常のエラーであるためです）。</target>
        </trans-unit>
        <trans-unit id="60ac8fe2a99f998c150bb7d9adc8dfbeed95a10d" translate="yes" xml:space="preserve">
          <source>The special null SHA-1 (40 zeros) specifies that the branch is to be removed.</source>
          <target state="translated">特殊なヌル SHA-1 (40 ゼロ)は、ブランチが削除されることを指定します。</target>
        </trans-unit>
        <trans-unit id="a4c2fa6682338e4d7c45557107add1984be0213c" translate="yes" xml:space="preserve">
          <source>The special refspec &lt;code&gt;:&lt;/code&gt; (or &lt;code&gt;+:&lt;/code&gt; to allow non-fast-forward updates) directs Git to push &quot;matching&quot; branches: for every branch that exists on the local side, the remote side is updated if a branch of the same name already exists on the remote side.</source>
          <target state="translated">特別なrefspec &lt;code&gt;:&lt;/code&gt; (または &lt;code&gt;+:&lt;/code&gt; 早送り以外の更新を可能にする）は、Gitに「一致する」ブランチをプッシュするように指示します。ローカル側に存在するすべてのブランチについて、同じ名前のブランチがすでに存在する場合、リモート側が更新されますリモート側。</target>
        </trans-unit>
        <trans-unit id="f2f702d2704e1b64279419d712ca4460c3b7f78e" translate="yes" xml:space="preserve">
          <source>The special string &lt;code&gt;none&lt;/code&gt; can be used as the proxy command to specify that no proxy be used for a given domain pattern. This is useful for excluding servers inside a firewall from proxy use, while defaulting to a common proxy for external domains.</source>
          <target state="translated">特別な文字列 &lt;code&gt;none&lt;/code&gt; をプロキシコマンドとして使用して、特定のドメインパターンにプロキシを使用しないことを指定できます。これは、ファイアウォールの内側にあるサーバーをプロキシの使用から除外するのに役立ちますが、デフォルトでは外部ドメインの共通プロキシを使用します。</target>
        </trans-unit>
        <trans-unit id="65b859a3a4528b4a1eebafeebe9d2d28ac0eb085" translate="yes" xml:space="preserve">
          <source>The special symbol &quot;HEAD&quot; can always be used to refer to the current branch. In fact, Git uses a file named &lt;code&gt;HEAD&lt;/code&gt; in the &lt;code&gt;.git&lt;/code&gt; directory to remember which branch is current:</source>
          <target state="translated">特殊記号「HEAD」は、常に現在のブランチを参照するために使用できます。実際には、Gitは使用していますという名前のファイル &lt;code&gt;HEAD&lt;/code&gt; 内 &lt;code&gt;.git&lt;/code&gt; 電流である枝を覚えておくディレクトリを：</target>
        </trans-unit>
        <trans-unit id="54b91d851f1b23aa70b29c0e74d2c28879b6de30" translate="yes" xml:space="preserve">
          <source>The ssh and git protocols additionally support ~username expansion:</source>
          <target state="translated">ssh と git プロトコルはさらに ~username の拡張をサポートしています。</target>
        </trans-unit>
        <trans-unit id="ac6c6d73b5f6b7c3cef28dfe32da61495601bd7c" translate="yes" xml:space="preserve">
          <source>The standard actions are:</source>
          <target state="translated">標準的な行動です。</target>
        </trans-unit>
        <trans-unit id="a72f515f06e2719cd062e161d9ed80a61b68c92f" translate="yes" xml:space="preserve">
          <source>The standard email format as described by RFC 2822, for example &lt;code&gt;Thu, 07 Apr 2005 22:13:13 +0200&lt;/code&gt;.</source>
          <target state="translated">RFC 2822で規定されている標準の電子メール形式（例： &lt;code&gt;Thu, 07 Apr 2005 22:13:13 +0200&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8128f4cfe82d86e129a0094608260664c3bb1ba3" translate="yes" xml:space="preserve">
          <source>The standard helper program to use with git-merge-index</source>
          <target state="translated">git-merge-index で使う標準のヘルパープログラム。</target>
        </trans-unit>
        <trans-unit id="4d34b021b617aa2bf3f93982ac428b041f085fbe" translate="yes" xml:space="preserve">
          <source>The starting point for the new branch. Specifying a &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; allows you to create a branch based on some other point in history than where HEAD currently points. (Or, in the case of &lt;code&gt;--detach&lt;/code&gt;, allows you to inspect and detach from some other point.)</source>
          <target state="translated">新しいブランチの開始点。 &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; を指定すると、HEADが現在指している場所以外の、履歴の別のポイントに基づいてブランチを作成できます。（または、ある場合には &lt;code&gt;--detach&lt;/code&gt; 、あなたが検査し、他のいくつかのポイントから切り離すことができます。）</target>
        </trans-unit>
        <trans-unit id="ca9ba47b83a1def4d8a6c769f2e642f061d5236a" translate="yes" xml:space="preserve">
          <source>The status of GPG verification of the push certificate, using the same mnemonic as used in &lt;code&gt;%G?&lt;/code&gt; format of &lt;code&gt;git log&lt;/code&gt; family of commands (see &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;%G?&lt;/code&gt; 使用されているのと同じニーモニックを使用した、プッシュ証明書のGPG検証のステータス？コマンドの &lt;code&gt;git log&lt;/code&gt; ファミリの形式（&lt;a href=&quot;git-log&quot;&gt;git-log [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c902748a09ab505851b0b39809c60f3db2027be9" translate="yes" xml:space="preserve">
          <source>The status of the fetch is output in tabular form, with each line representing the status of a single ref. Each line is of the form:</source>
          <target state="translated">フェッチのステータスは表形式で出力され、各行は単一の ref のステータスを表します。各行の形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7729563c964ef73ba71f39abfa320766ac0cea33" translate="yes" xml:space="preserve">
          <source>The status of the push is output in tabular form, with each line representing the status of a single ref. Each line is of the form:</source>
          <target state="translated">プッシュのステータスは表形式で出力され、各行は 1 つの ref のステータスを表します。各行の形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e939f21e3282d453b1398071feb25115360b90b4" translate="yes" xml:space="preserve">
          <source>The status of up-to-date refs is shown only if --porcelain or --verbose option is used.</source>
          <target state="translated">最新のリファレンスの状態は --porcelain または --verbose オプションが使用されている場合にのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="0ebfa7ce02ec5605e425e0cd98062f5bbd8f2510" translate="yes" xml:space="preserve">
          <source>The status of up-to-date refs is shown only if the --verbose option is used.</source>
          <target state="translated">verboseオプションが使用されている場合にのみ、最新のRefの状態が表示されます。</target>
        </trans-unit>
        <trans-unit id="a97643bd561fabe3d136679e4752cb73667ec062" translate="yes" xml:space="preserve">
          <source>The structured objects can further have their structure and connectivity to other objects verified. This is generally done with the &lt;code&gt;git fsck&lt;/code&gt; program, which generates a full dependency graph of all objects, and verifies their internal consistency (in addition to just verifying their superficial consistency through the hash).</source>
          <target state="translated">構造化オブジェクトはさらに、その構造と他のオブジェクトへの接続を検証することができます。これは一般的に &lt;code&gt;git fsck&lt;/code&gt; プログラムで行われ、すべてのオブジェクトの完全な依存関係グラフを生成し、内部の一貫性を検証します（ハッシュによる表面的な一貫性の検証に加えて）。</target>
        </trans-unit>
        <trans-unit id="af4ab93b8907c3bc82033e90c4bc6eedaac09e1c" translate="yes" xml:space="preserve">
          <source>The submit process invokes the editor before each p4 change is submitted. If this setting is true, though, the editing step is skipped.</source>
          <target state="translated">送信処理は、p4 の各変更が送信される前にエディタを起動します。しかし、この設定がtrueの場合、編集ステップはスキップされます。</target>
        </trans-unit>
        <trans-unit id="72386229ffdfc0f6ba847ccdd7620fcafabeae30" translate="yes" xml:space="preserve">
          <source>The submodule directories are there, but they&amp;rsquo;re empty:</source>
          <target state="translated">サブモジュールディレクトリはありますが、空です。</target>
        </trans-unit>
        <trans-unit id="802b1c9a36cac97c548242e11fe5baa3275576f0" translate="yes" xml:space="preserve">
          <source>The submodule will never be considered modified (but will nonetheless show up in the output of status and commit when it has been staged).</source>
          <target state="translated">このサブモジュールが変更されたとみなされることはありません (ただし、ステージされたときには status や commit の出力に表示されます)。</target>
        </trans-unit>
        <trans-unit id="7180d60887d97b6ca57dd91c2b86681f019ca631" translate="yes" xml:space="preserve">
          <source>The submodule&amp;rsquo;s &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file would come into play when running &lt;code&gt;git push --recurse-submodules=check&lt;/code&gt; in the superproject, as this would check if the submodule has any changes not published to any remote. The remotes are configured in the submodule as usual in the &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file.</source>
          <target state="translated">スーパー &lt;code&gt;git push --recurse-submodules=check&lt;/code&gt; を実行すると、サブモジュールの &lt;code&gt;$GIT_DIR/config&lt;/code&gt; ファイルが機能します。これにより、サブモジュールにリモートに公開されていない変更があるかどうかが確認されます。 &lt;code&gt;$GIT_DIR/config&lt;/code&gt; は、通常どおり$ GIT_DIR / configファイルのサブモジュールで構成されます。</target>
        </trans-unit>
        <trans-unit id="2a87578b15befa74b2d27eca3216884ceb35493c" translate="yes" xml:space="preserve">
          <source>The suffix &lt;code&gt;@{push}&lt;/code&gt; reports the branch &quot;where we would push to&quot; if &lt;code&gt;git push&lt;/code&gt; were run while &lt;code&gt;branchname&lt;/code&gt; was checked out (or the current &lt;code&gt;HEAD&lt;/code&gt; if no branchname is specified). Since our push destination is in a remote repository, of course, we report the local tracking branch that corresponds to that branch (i.e., something in &lt;code&gt;refs/remotes/&lt;/code&gt;).</source>
          <target state="translated">サフィックス &lt;code&gt;@{push}&lt;/code&gt; は、ブランチ &lt;code&gt;branchname&lt;/code&gt; がチェックアウトされているときに &lt;code&gt;git push&lt;/code&gt; が実行された場合（「ブランチ名が指定されていない場合は現在の &lt;code&gt;HEAD&lt;/code&gt; 」）、「プッシュ先」のブランチを報告します。プッシュ先はリモートリポジトリにあるため、もちろん、そのブランチに対応するローカルトラッキングブランチ（つまり、 &lt;code&gt;refs/remotes/&lt;/code&gt; ）を報告します。</target>
        </trans-unit>
        <trans-unit id="c10fd9c6c93e1de11dbe32978aa15d853b4103fb" translate="yes" xml:space="preserve">
          <source>The suffix &lt;code&gt;@{upstream}&lt;/code&gt; to a branchname (short form &lt;code&gt;&amp;lt;branchname&amp;gt;@{u}&lt;/code&gt;) refers to the branch that the branch specified by branchname is set to build on top of (configured with &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; and &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt;). A missing branchname defaults to the current one. These suffixes are also accepted when spelled in uppercase, and they mean the same thing no matter the case.</source>
          <target state="translated">ブランチ名のサフィックス &lt;code&gt;@{upstream}&lt;/code&gt; （省略形 &lt;code&gt;&amp;lt;branchname&amp;gt;@{u}&lt;/code&gt; ）は、branchnameで指定されたブランチが（ &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; および &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; 構成されて）構築するように設定されているブランチを指します。 &amp;lt;name&amp;gt; .merge）。ブランチ名がない場合は、デフォルトで現在の名前になります。これらのサフィックスは、大文字でつづられたときにも受け入れられ、大文字と小文字が同じであることを意味します。</target>
        </trans-unit>
        <trans-unit id="35fca7d90e0c51050df5863335fd96cb674d847a" translate="yes" xml:space="preserve">
          <source>The symlink will either be absolute (beginning with a /), or relative to the tree root. For instance, if dir/link points to ../../foo, then &amp;lt;symlink&amp;gt; will be ../foo. &amp;lt;size&amp;gt; is the size of the symlink in bytes.</source>
          <target state="translated">シンボリックリンクは、絶対（/で始まる）、またはツリーのルートに対して相対的です。たとえば、dir / linkが../../fooを指している場合、&amp;lt;symlink&amp;gt;は../fooになります。&amp;lt;size&amp;gt;は、バイト単位のシンボリックリンクのサイズです。</target>
        </trans-unit>
        <trans-unit id="1e32c77f2578ce3c979cd217827d9aa3c6897be9" translate="yes" xml:space="preserve">
          <source>The syntax is fairly flexible and permissive; whitespaces are mostly ignored. The &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;;&lt;/code&gt; characters begin comments to the end of line, blank lines are ignored.</source>
          <target state="translated">構文はかなり柔軟で寛容です。空白はほとんど無視されます。 &lt;code&gt;#&lt;/code&gt; と &lt;code&gt;;&lt;/code&gt; 文字はコメントを行末まで開始し、空白行は無視されます。</target>
        </trans-unit>
        <trans-unit id="e9a240786337cb206c43c416821000b9a6721022" translate="yes" xml:space="preserve">
          <source>The syntax of the configuration files is that of Perl, since these files are handled by sourcing them as fragments of Perl code (the language that gitweb itself is written in). Variables are typically set using the &lt;code&gt;our&lt;/code&gt; qualifier (as in &quot;&lt;code&gt;our $variable = &amp;lt;value&amp;gt;;&lt;/code&gt;&quot;) to avoid syntax errors if a new version of gitweb no longer uses a variable and therefore stops declaring it.</source>
          <target state="translated">構成ファイルの構文はPerlの構文です。これらのファイルは、Perlコード（gitweb自体が記述されている言語）のフラグメントとしてそれらを調達することによって処理されるためです。変数は通常 &lt;code&gt;our&lt;/code&gt; 修飾子を使用して設定され（「 &lt;code&gt;our $variable = &amp;lt;value&amp;gt;;&lt;/code&gt; 」のように）、新しいバージョンのgitwebが変数を使用しなくなったために宣言を停止した場合の構文エラーを回避します。</target>
        </trans-unit>
        <trans-unit id="85d5722bf15562fb833fe3c8f580a92fe2e2d3db" translate="yes" xml:space="preserve">
          <source>The tables below show what happens when running:</source>
          <target state="translated">以下の表は、実行時に何が起こるかを示しています。</target>
        </trans-unit>
        <trans-unit id="0ab961c529e0da6916842ede03d74fc7b0e0f90e" translate="yes" xml:space="preserve">
          <source>The tag &lt;code&gt;v2.6.18&lt;/code&gt; is short for &lt;code&gt;refs/tags/v2.6.18&lt;/code&gt;.</source>
          <target state="translated">タグ &lt;code&gt;v2.6.18&lt;/code&gt; は &lt;code&gt;refs/tags/v2.6.18&lt;/code&gt; の略です。</target>
        </trans-unit>
        <trans-unit id="e5173af0305c1d6df2de24b7ea317c256f65109e" translate="yes" xml:space="preserve">
          <source>The template directory will be one of the following (in order):</source>
          <target state="translated">テンプレートディレクトリは以下のいずれかになります(順不同)。</target>
        </trans-unit>
        <trans-unit id="45d4fdaf8fe9ac583ec50051c8f5eb8c944a1ec1" translate="yes" xml:space="preserve">
          <source>The term &lt;a href=&quot;#def_pickaxe&quot;&gt;pickaxe&lt;/a&gt; refers to an option to the diffcore routines that help select changes that add or delete a given text string. With the &lt;code&gt;--pickaxe-all&lt;/code&gt; option, it can be used to view the full &lt;a href=&quot;#def_changeset&quot;&gt;changeset&lt;/a&gt; that introduced or removed, say, a particular line of text. See &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#def_pickaxe&quot;&gt;ピッケル&lt;/a&gt;という用語は、指定されたテキスト文字列を追加または削除する変更を選択するのに役立つdiffcoreルーチンのオプションを指します。 &lt;code&gt;--pickaxe-all&lt;/code&gt; オプション、完全な表示するために使用することができ&lt;a href=&quot;#def_changeset&quot;&gt;チェンジ&lt;/a&gt;導入または削除、と言うことを、テキストの特定の行を。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d2ba0595fa8d197d8c3640c03007e070ceba5b47" translate="yes" xml:space="preserve">
          <source>The text conversion is generally a one-way conversion; in this example, we lose the actual image contents and focus just on the text data. This means that diffs generated by textconv are &lt;em&gt;not&lt;/em&gt; suitable for applying. For this reason, only &lt;code&gt;git diff&lt;/code&gt; and the &lt;code&gt;git log&lt;/code&gt; family of commands (i.e., log, whatchanged, show) will perform text conversion. &lt;code&gt;git
format-patch&lt;/code&gt; will never generate this output. If you want to send somebody a text-converted diff of a binary file (e.g., because it quickly conveys the changes you have made), you should generate it separately and send it as a comment &lt;em&gt;in addition to&lt;/em&gt; the usual binary diff that you might send.</source>
          <target state="translated">テキスト変換は通常、一方向の変換です。この例では、実際の画像コンテンツが失われ、テキストデータだけに焦点が当てられます。つまり、textconvによって生成されたdiffは適用に適して&lt;em&gt;いません&lt;/em&gt;。このため、テキスト変換を実行するのは、 &lt;code&gt;git diff&lt;/code&gt; および &lt;code&gt;git log&lt;/code&gt; ファミリーのコマンド（つまり、log、whatchanged、show）だけです。 &lt;code&gt;git format-patch&lt;/code&gt; がこの出力を生成することはありません。バイナリファイルのテキスト変換された差分を誰かに送信する場合（たとえば、行った変更がすぐに伝えられるため）、それを個別に生成&lt;em&gt;し&lt;/em&gt;、通常のバイナリ差分&lt;em&gt;に加えて&lt;/em&gt;コメントとして送信する必要があります。送信します。</target>
        </trans-unit>
        <trans-unit id="eb234a21c48fd769b7576108683d04bf29f253cb" translate="yes" xml:space="preserve">
          <source>The third syntax (&quot;&lt;code&gt;git merge --continue&lt;/code&gt;&quot;) can only be run after the merge has resulted in conflicts.</source>
          <target state="translated">3番目の構文（ &quot; &lt;code&gt;git merge --continue&lt;/code&gt; &quot;）は、マージによって競合が発生した後にのみ実行できます。</target>
        </trans-unit>
        <trans-unit id="a25be90a41e318ce76ddb9737f9c1a04e1e950e3" translate="yes" xml:space="preserve">
          <source>The time between the first rc release and the final release is supposed to be used to test rc versions and fight bugs and especially regressions. And this time is more than 80% of the release cycle time. But this is not the end of the fight yet, as of course it continues after the release.</source>
          <target state="translated">最初の rc リリースから最終リリースまでの時間は、rc のバージョンをテストし、バグと戦い、特にリグレッションと戦うために使われることになっています。そして、この時間はリリースサイクル時間の80%以上を占めています。しかし、リリース後ももちろん続いているので、これでまだ戦いが終わったわけではありません。</target>
        </trans-unit>
        <trans-unit id="75271c1b7d85cdfdc3bad04249d4464b9c292a44" translate="yes" xml:space="preserve">
          <source>The time of the change is specified by &lt;code&gt;&amp;lt;when&amp;gt;&lt;/code&gt; using the date format that was selected by the --date-format=&amp;lt;fmt&amp;gt; command-line option. See &amp;ldquo;Date Formats&amp;rdquo; above for the set of supported formats, and their syntax.</source>
          <target state="translated">変更の時刻は、-date-format = &amp;lt;fmt&amp;gt;コマンドラインオプションで選択された日付形式を使用して、 &lt;code&gt;&amp;lt;when&amp;gt;&lt;/code&gt; で指定されます。サポートされている形式のセットとその構文については、上記の「日付形式」を参照してください。</target>
        </trans-unit>
        <trans-unit id="05b9a4ac37ff05623171d65150ac27013efa2fa0" translate="yes" xml:space="preserve">
          <source>The time of the event is specified by &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; as the number of seconds since the UNIX epoch (midnight, Jan 1, 1970, UTC) and is written as an ASCII decimal integer.</source>
          <target state="translated">イベントの時間は、UNIXエポック（1970年1月1日午前0時）からの秒数として &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; で指定され、ASCII 10進整数として書き込まれます。</target>
        </trans-unit>
        <trans-unit id="e85bdfa8e02113c7aa36696add629ec632f05440" translate="yes" xml:space="preserve">
          <source>The todo list presented by the deprecated &lt;code&gt;--preserve-merges --interactive&lt;/code&gt; does not represent the topology of the revision graph (use &lt;code&gt;--rebase-merges&lt;/code&gt; instead). Editing commits and rewording their commit messages should work fine, but attempts to reorder commits tend to produce counterintuitive results. Use &lt;code&gt;--rebase-merges&lt;/code&gt; in such scenarios instead.</source>
          <target state="translated">非推奨の &lt;code&gt;--preserve-merges --interactive&lt;/code&gt; によって表示されるtodoリストは、リビジョングラフのトポロジを表していません（代わりに &lt;code&gt;--rebase-merges&lt;/code&gt; を使用してください）。コミットの編集とコミットメッセージの言い換えは問題なく機能するはずですが、コミットの順序を変更しようとすると、直感に反する結果が生じる傾向があります。代わりに、そのようなシナリオでは &lt;code&gt;--rebase-merges&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="0f8166907df228eb9266d7566c3cde991d9d39bd" translate="yes" xml:space="preserve">
          <source>The total number of paths.</source>
          <target state="translated">パスの総数です。</target>
        </trans-unit>
        <trans-unit id="46c0269533706ef03961ed4548e480cdcfd7a84a" translate="yes" xml:space="preserve">
          <source>The trailer records 20-byte SHA-1 checksum of all of the above.</source>
          <target state="translated">トレーラーには、上記のすべての20バイトのSHA-1チェックサムが記録されています。</target>
        </trans-unit>
        <trans-unit id="9380254df0eb0e126f55d72177d625190ab23928" translate="yes" xml:space="preserve">
          <source>The transmission of the packfile begins immediately after the section header</source>
          <target state="translated">パックファイルの送信は、セクションヘッダの直後に開始されます。</target>
        </trans-unit>
        <trans-unit id="de285c430d2e1f897693d7ccc23434e1a3a5c103" translate="yes" xml:space="preserve">
          <source>The tree object is the tree we examined first, and this commit is unusual in that it lacks any parent.</source>
          <target state="translated">ツリーオブジェクトは最初に調べたツリーであり、このコミットは親がいないという珍しいものです。</target>
        </trans-unit>
        <trans-unit id="9178b43dc9b2907a6afd7a3693f2c6894ec0ecd9" translate="yes" xml:space="preserve">
          <source>The tree of actual checked out files. The working tree normally contains the contents of the &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; commit&amp;rsquo;s tree, plus any local changes that you have made but not yet committed.</source>
          <target state="translated">実際にチェックアウトされたファイルのツリー。作業ツリーには通常、&lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt;コミットのツリーの内容と、加えたがまだコミットされていないローカル変更が含まれます。</target>
        </trans-unit>
        <trans-unit id="26b5c7d70f82997ceabb111adeeb911e4d89a340" translate="yes" xml:space="preserve">
          <source>The tree or commit to produce an archive for.</source>
          <target state="translated">アーカイブを生成するためのツリーまたはコミット。</target>
        </trans-unit>
        <trans-unit id="90f78952a054862b4ed6d79982e2eab2fc081a24" translate="yes" xml:space="preserve">
          <source>The twist is that if some file doesn&amp;rsquo;t match the index, we don&amp;rsquo;t have a backing store thing for it, and we use the magic &quot;all-zero&quot; sha1 to show that. So let&amp;rsquo;s say that you have edited &lt;code&gt;kernel/sched.c&lt;/code&gt;, but have not actually done a &lt;code&gt;git update-index&lt;/code&gt; on it yet - there is no &quot;object&quot; associated with the new state, and you get:</source>
          <target state="translated">ツイストは、一部のファイルがインデックスに一致しない場合、そのバッキングストアがないため、魔法の「すべてゼロ」のsha1を使用してそれを示すことです。では、 &lt;code&gt;kernel/sched.c&lt;/code&gt; を編集したが、実際には &lt;code&gt;git update-index&lt;/code&gt; をまだ実行していないとします。新しい状態に関連付けられた「オブジェクト」はなく、次のようになります。</target>
        </trans-unit>
        <trans-unit id="43d0ee9ad50c1c3c133c4c2ff3f216463ab119aa" translate="yes" xml:space="preserve">
          <source>The two options can be specified together to ask a command to work on both the index and the working tree.</source>
          <target state="translated">この2つのオプションを一緒に指定すると、インデックスと作業ツリーの両方で動作するようにコマンドを指定することができます。</target>
        </trans-unit>
        <trans-unit id="293c342524c5d665ec090c34f37c73d153be74d5" translate="yes" xml:space="preserve">
          <source>The type of the object (&lt;code&gt;blob&lt;/code&gt;, &lt;code&gt;tree&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;).</source>
          <target state="translated">オブジェクトのタイプ（ &lt;code&gt;blob&lt;/code&gt; 、 &lt;code&gt;tree&lt;/code&gt; 、 &lt;code&gt;commit&lt;/code&gt; 、 &lt;code&gt;tag&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="35ca6d49608b210b7cf8be4b86261fa4bd55e249" translate="yes" xml:space="preserve">
          <source>The type of the object (the same as &lt;code&gt;cat-file -t&lt;/code&gt; reports).</source>
          <target state="translated">オブジェクトのタイプ（ &lt;code&gt;cat-file -t&lt;/code&gt; レポートと同じ）。</target>
        </trans-unit>
        <trans-unit id="4785efb96aaa5561500dccbb8420f79e52290b85" translate="yes" xml:space="preserve">
          <source>The underlying Git plumbing tools, such as &lt;code&gt;git ls-files&lt;/code&gt; and &lt;code&gt;git read-tree&lt;/code&gt;, read &lt;code&gt;gitignore&lt;/code&gt; patterns specified by command-line options, or from files specified by command-line options. Higher-level Git tools, such as &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git add&lt;/code&gt;, use patterns from the sources specified above.</source>
          <target state="translated">&lt;code&gt;git ls-files&lt;/code&gt; や &lt;code&gt;git read-tree&lt;/code&gt; などの基盤となるGit配管ツールは、コマンドラインオプションで指定された &lt;code&gt;gitignore&lt;/code&gt; パターンを読み取るか、コマンドラインオプションで指定されたファイルから読み取ります。 &lt;code&gt;git status&lt;/code&gt; や &lt;code&gt;git add&lt;/code&gt; などの高レベルのGitツールは、上記で指定されたソースからのパターンを使用します。</target>
        </trans-unit>
        <trans-unit id="c7717dd458d0c51efaa12d77d8ac91e6b1b7952a" translate="yes" xml:space="preserve">
          <source>The unique identifier of an &lt;a href=&quot;#def_object&quot;&gt;object&lt;/a&gt;. The object name is usually represented by a 40 character hexadecimal string. Also colloquially called &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#def_object&quot;&gt;オブジェクト&lt;/a&gt;の一意の識別子。オブジェクト名は通常、40文字の16進数文字列で表されます。口語的に&lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt;とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="190c2fffcaa0444f677f39ee7f8533684a0964b1" translate="yes" xml:space="preserve">
          <source>The unit of storage in Git. It is uniquely identified by the &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; of its contents. Consequently, an object cannot be changed.</source>
          <target state="translated">Gitでのストレージの単位。コンテンツの&lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt;によって一意に識別されます。したがって、オブジェクトは変更できません。</target>
        </trans-unit>
        <trans-unit id="39871fae2a5575ced5627a5aed0eb792e4c6cc2e" translate="yes" xml:space="preserve">
          <source>The untracked cache extension can be enabled by the &lt;code&gt;core.untrackedCache&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">追跡されないキャッシュ拡張機能は、 &lt;code&gt;core.untrackedCache&lt;/code&gt; 構成変数（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）によって有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="cc7260429a75073116cdc4eb67dbd95326cbd29d" translate="yes" xml:space="preserve">
          <source>The upstream project is expected to have the commit named by &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; and the output asks it to integrate the changes you made since that commit, up to the commit named by &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt;, by visiting the repository named by &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">上流のプロジェクトには &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; という名前のコミットがあることが想定されており、出力では、 &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; という名前のリポジトリにアクセスして、そのコミット以降に &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; という名前のコミットまでに加えた変更を統合するよう求められます。</target>
        </trans-unit>
        <trans-unit id="90c1df21766dd92e926e4168cc9d516f756c7832" translate="yes" xml:space="preserve">
          <source>The upstream reference is generally &lt;code&gt;refs/remotes/p4/master&lt;/code&gt;, but can be overridden using the &lt;code&gt;--origin=&lt;/code&gt; command-line option.</source>
          <target state="translated">アップストリーム参照は通常 &lt;code&gt;refs/remotes/p4/master&lt;/code&gt; ですが、-- &lt;code&gt;--origin=&lt;/code&gt; コマンドラインオプションを使用してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="26e6d639f86a47deca57ab3911edaae9c5141f38" translate="yes" xml:space="preserve">
          <source>The user wants to fast-forward to $M.</source>
          <target state="translated">ユーザーは$Mに早送りしたいと思っています。</target>
        </trans-unit>
        <trans-unit id="6df61c6f9e257fdbf1ce4a60fb1d73b618d329ca" translate="yes" xml:space="preserve">
          <source>The user&amp;rsquo;s color.status configuration is not respected; color will always be off.</source>
          <target state="translated">ユーザーのcolor.status設定は尊重されません。色は常にオフになります。</target>
        </trans-unit>
        <trans-unit id="ab6a20b222f27dba657bc91ae7970effd7a690ca" translate="yes" xml:space="preserve">
          <source>The user&amp;rsquo;s status.relativePaths configuration is not respected; paths shown will always be relative to the repository root.</source>
          <target state="translated">ユーザーのstatus.relativePaths構成は考慮されません。表示されるパスは、常にリポジトリルートからの相対パスです。</target>
        </trans-unit>
        <trans-unit id="20126eaca194f3ace1deaba2aaa4133e6326b674" translate="yes" xml:space="preserve">
          <source>The user-provided shell commands will likely involve a pipeline of commands, resulting in the creation of many processes per commit. Creating and running another process takes a widely varying amount of time between operating systems, but on any platform it is very slow relative to invoking a function.</source>
          <target state="translated">ユーザーが提供するシェルコマンドには、コマンドのパイプラインが含まれている可能性が高く、その結果、コミットごとに多くのプロセスが作成されることになります。別のプロセスを作成して実行するのにかかる時間はオペレーティングシステムによって大きく異なりますが、どのプラットフォームでも関数を呼び出すのに比べて非常に遅くなります。</target>
        </trans-unit>
        <trans-unit id="b70cc2efdcbaf68bada34e0550746a0012d52bae" translate="yes" xml:space="preserve">
          <source>The username to use when logging in to the server.</source>
          <target state="translated">サーバーにログインする際に使用するユーザー名。</target>
        </trans-unit>
        <trans-unit id="46c33e134557b27ccb1a85349808f80ba518bd84" translate="yes" xml:space="preserve">
          <source>The valid values for this option are: &lt;code&gt;add&lt;/code&gt; (this is the default) and &lt;code&gt;doNothing&lt;/code&gt;.</source>
          <target state="translated">このオプションの有効な値は、 &lt;code&gt;add&lt;/code&gt; （これがデフォルトです）と &lt;code&gt;doNothing&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="17a990c606d2e2e22a8f755a1f843b57ef2f5ef2" translate="yes" xml:space="preserve">
          <source>The valid values for this option are: &lt;code&gt;addIfDifferentNeighbor&lt;/code&gt; (this is the default), &lt;code&gt;addIfDifferent&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt; or &lt;code&gt;doNothing&lt;/code&gt;.</source>
          <target state="translated">このオプションの有効な値は、 &lt;code&gt;addIfDifferentNeighbor&lt;/code&gt; （これがデフォルトです）、 &lt;code&gt;addIfDifferent&lt;/code&gt; 、 &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;replace&lt;/code&gt; 、または &lt;code&gt;doNothing&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="505e929c5c3b27eed17b03a2625718de5c7f7031" translate="yes" xml:space="preserve">
          <source>The value for a variable that takes a color is a list of colors (at most two, one for foreground and one for background) and attributes (as many as you want), separated by spaces.</source>
          <target state="translated">色を取る変数の値は、スペースで区切られた色(最大でも2つ、1つは前景用、もう1つは背景用)と属性(好きなだけ)のリストです。</target>
        </trans-unit>
        <trans-unit id="e1d242fc18797a443a86ba553d48e3f3cae01e9a" translate="yes" xml:space="preserve">
          <source>The value for many variables that specify various sizes can be suffixed with &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;M&lt;/code&gt;,&amp;hellip;​ to mean &quot;scale the number by 1024&quot;, &quot;by 1024x1024&quot;, etc.</source>
          <target state="translated">さまざまなサイズを指定する多くの変数の値の末尾に &lt;code&gt;k&lt;/code&gt; 、 &lt;code&gt;M&lt;/code&gt; 、&amp;hellip;を付けて、「1024で数値をスケーリング」、「1024x1024で」などの意味になります。</target>
        </trans-unit>
        <trans-unit id="f1dedc58ec3c676ad597a786553123421e517365" translate="yes" xml:space="preserve">
          <source>The value is a list of three values: a default time zone (for if the client hasn&amp;rsquo;t selected some other time zone and saved it in a cookie), a name of cookie where to store selected time zone, and a CSS class used to mark up dates for manipulation. If you want to turn this feature off, set &quot;default&quot; to empty list: &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">値は3つの値のリストです。デフォルトのタイムゾーン（クライアントが他のタイムゾーンを選択しておらず、Cookieに保存していない場合）、選択したタイムゾーンを保存するCookieの名前、使用するCSSクラス操作の日付をマークアップします。この機能をオフにする場合は、「デフォルト」を空のリストに設定します： &lt;code&gt;[]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0462ada8e80b752f4ecad69fb2563ec0b8b930aa" translate="yes" xml:space="preserve">
          <source>The value of 'default' is a list of names of snapshot formats, defined in &lt;code&gt;%known_snapshot_formats&lt;/code&gt; hash, that you wish to offer. Supported formats include &quot;tgz&quot;, &quot;tbz2&quot;, &quot;txz&quot; (gzip/bzip2/xz compressed tar archive) and &quot;zip&quot;; please consult gitweb sources for a definitive list. By default only &quot;tgz&quot; is offered.</source>
          <target state="translated">'default'の値は、 &lt;code&gt;%known_snapshot_formats&lt;/code&gt; ハッシュで定義された、提供するスナップショット形式の名前のリストです。サポートされる形式には、「tgz」、「tbz2」、「txz」（gzip / bzip2 / xz圧縮tarアーカイブ）、「zip」が含まれます。明確なリストについては、gitwebソースを参照してください。デフォルトでは「tgz」のみが提供されます。</target>
        </trans-unit>
        <trans-unit id="c34b53e9a12553098df9adad4c30762484ffde18" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; must be a valid refname in Git and therefore may contain forward slashes. As &lt;code&gt;LF&lt;/code&gt; is not valid in a Git refname, no quoting or escaping syntax is supported here.</source>
          <target state="translated">&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; の値はGitで有効なrefnameである必要があるため、スラッシュを含めることができます。 &lt;code&gt;LF&lt;/code&gt; は、 Gitのもしrefnameでは有効ではありません、何の引用またはエスケープ構文は、ここでサポートされていません。</target>
        </trans-unit>
        <trans-unit id="8b5a30f586808b1827fdb8f433a15c6c9d49f6ba" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; must be in canonical form. That is it must not:</source>
          <target state="translated">&lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; の値は、正規の形式でなければなりません。それはそれであってはなりません：</target>
        </trans-unit>
        <trans-unit id="dfb2ec984e9987b1b930824861a3abbf3e4aa29f" translate="yes" xml:space="preserve">
          <source>The value of this attribute specifies the character encoding that should be used by GUI tools (e.g. &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; and &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt;) to display the contents of the relevant file. Note that due to performance considerations &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; does not use this attribute unless you manually enable per-file encodings in its options.</source>
          <target state="translated">この属性の値は、関連ファイルのコンテンツを表示するためにGUIツール（たとえば&lt;a href=&quot;gitk&quot;&gt;gitk [1]&lt;/a&gt;や&lt;a href=&quot;git-gui&quot;&gt;git-gui [1]&lt;/a&gt;）が使用する文字エンコーディングを指定します。オプションでファイルごとのエンコーディングを手動で有効にしない限り、パフォーマンスの考慮により、&lt;a href=&quot;gitk&quot;&gt;gitk [1]&lt;/a&gt;はこの属性を使用しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4bdcd2a8dee01aee6c5f0f23e7e10ac25985aae6" translate="yes" xml:space="preserve">
          <source>The value of this key is the name of the promisor remote.</source>
          <target state="translated">このキーの値は、プロバイザリモートの名前です。</target>
        </trans-unit>
        <trans-unit id="49e3be97b83e2e2d47823db7b33592c5066364cc" translate="yes" xml:space="preserve">
          <source>The version parameter is used to specify the format version. This is optional and defaults to the original version &lt;code&gt;v1&lt;/code&gt; format.</source>
          <target state="translated">versionパラメータは、フォーマットバージョンを指定するために使用されます。これはオプションであり、デフォルトで元のバージョン &lt;code&gt;v1&lt;/code&gt; 形式になります。</target>
        </trans-unit>
        <trans-unit id="a720bc9826a296e909d26ea1e1addd2076945090" translate="yes" xml:space="preserve">
          <source>The victim sends &quot;have&quot; lines advertising the IDs of objects it has that are not explicitly intended to be shared but can be used to optimize the transfer if the peer also has them. The attacker chooses an object ID X to steal and sends a ref to X, but isn&amp;rsquo;t required to send the content of X because the victim already has it. Now the victim believes that the attacker has X, and it sends the content of X back to the attacker later. (This attack is most straightforward for a client to perform on a server, by creating a ref to X in the namespace the client has access to and then fetching it. The most likely way for a server to perform it on a client is to &quot;merge&quot; X into a public branch and hope that the user does additional work on this branch and pushes it back to the server without noticing the merge.)</source>
          <target state="translated">犠牲者は、明示的に共有することを意図していないオブジェクトのIDをアドバタイズする「have」行を送信しますが、ピアがそれらを持っている場合は転送を最適化するために使用できます。攻撃者はXを盗むオブジェクトID Xを選択し、Xに参照を送信しますが、Xのコンテンツを送信する必要はありません。これで被害者は攻撃者がXを持っていると信じ、Xのコンテンツを後で攻撃者に送り返します。 （この攻撃は、クライアントがアクセスできるネームスペースにXへの参照を作成し、それをフェッチすることにより、クライアントがサーバーで実行するのが最も簡単です。サーバーがクライアントで実行する可能性が最も高い方法は、 &quot;マージ」Xをパブリックブランチにマージし、ユーザーがこのブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュすることを期待します。）</target>
        </trans-unit>
        <trans-unit id="bad569f9e07003c7e9ba90b91ff6d5e2d3ebab92" translate="yes" xml:space="preserve">
          <source>The virtual host configuration (in Apache configuration file) should look like this:</source>
          <target state="translated">(Apache の設定ファイルの)バーチャルホストの設定は以下のようになっているはずです。</target>
        </trans-unit>
        <trans-unit id="6258db9fdd3beac891e6dcfd7dedb19764ce413e" translate="yes" xml:space="preserve">
          <source>The way &lt;code&gt;git update-index&lt;/code&gt; handles files it is told about can be modified using the various options:</source>
          <target state="translated">道 &lt;code&gt;git update-index&lt;/code&gt; ハンドルファイルは、それが様々なオプションを使用して変更することができますについて語られています：</target>
        </trans-unit>
        <trans-unit id="dc2adc08265063993fb836b81a622f1e26249d55" translate="yes" xml:space="preserve">
          <source>The web browser can be specified using the configuration variable &lt;code&gt;help.browser&lt;/code&gt;, or &lt;code&gt;web.browser&lt;/code&gt; if the former is not set. If none of these config variables is set, the &lt;code&gt;git web{litdd}browse&lt;/code&gt; helper script (called by &lt;code&gt;git help&lt;/code&gt;) will pick a suitable default. See git-web{litdd}browse[1] for more information about this.</source>
          <target state="translated">Webブラウザは、構成変数の使用して指定することができ &lt;code&gt;help.browser&lt;/code&gt; 、または &lt;code&gt;web.browser&lt;/code&gt; を前者が設定されていない場合。これらの設定変数が設定されていない場合、 &lt;code&gt;git web{litdd}browse&lt;/code&gt; ヘルパースクリプト（ &lt;code&gt;git help&lt;/code&gt; によって呼び出されます）が適切なデフォルトを選択します。これについての詳細は、git-web {litdd} browse [1]を参照してください。</target>
        </trans-unit>
        <trans-unit id="c38f40c77930468f76ac59e3f127231f37c11803" translate="yes" xml:space="preserve">
          <source>The web browser that should be used to view the gitweb page. This will be passed to the &lt;code&gt;git web{litdd}browse&lt;/code&gt; helper script along with the URL of the gitweb instance. See git-web{litdd}browse[1] for more information about this. If the script fails, the URL will be printed to stdout.</source>
          <target state="translated">gitwebページの表示に使用する必要があるWebブラウザー。これは、gitwebインスタンスのURLとともに &lt;code&gt;git web{litdd}browse&lt;/code&gt; ヘルパースクリプトに渡されます。これについての詳細は、git-web {litdd} browse [1]を参照してください。スクリプトが失敗した場合、URLはstdoutに出力されます。</target>
        </trans-unit>
        <trans-unit id="c7492cc5fa9e9927a227312bd1f1ea85a3766cb5" translate="yes" xml:space="preserve">
          <source>The width (in characters) of the &quot;Description&quot; column of the projects list. Longer descriptions will be truncated (trying to cut at word boundary); the full description is available in the &lt;code&gt;title&lt;/code&gt; attribute (usually shown on mouseover). The default is 25, which might be too small if you use long project descriptions.</source>
          <target state="translated">プロジェクトリストの[説明]列の幅（文字数）。長い説明は切り捨てられます（単語の境界でカットしようとします）。完全な説明は、 &lt;code&gt;title&lt;/code&gt; 属性で利用できます（通常はマウスオーバーで表示されます）。デフォルトは25ですが、長いプロジェクトの説明を使用する場合は小さすぎる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2a9553b8b798d28f6c8fd9f09980f5b7959498e9" translate="yes" xml:space="preserve">
          <source>The window size parameter used in the delta compression algorithm used by &lt;code&gt;git gc --aggressive&lt;/code&gt;. This defaults to 250, which is a much more aggressive window size than the default &lt;code&gt;--window&lt;/code&gt; of 10.</source>
          <target state="translated">&lt;code&gt;git gc --aggressive&lt;/code&gt; で使用されるデルタ圧縮アルゴリズムで使用されるウィンドウサイズパラメータ。デフォルトは250です。これは、デフォルトの &lt;code&gt;--window&lt;/code&gt; である10 よりもはるかに積極的なウィンドウサイズです。</target>
        </trans-unit>
        <trans-unit id="046739930d5e8946cdceaf820a70c4ac9ebc8d51" translate="yes" xml:space="preserve">
          <source>The working directory then reflects the contents that the project had when it was tagged v2.6.13, and &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; shows two branches, with an asterisk marking the currently checked-out branch:</source>
          <target state="translated">作業ディレクトリは、v2.6.13のタグが付けられたときにプロジェクトが持っていた内容を反映し、&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;は2つのブランチを示し、アスタリスクは現在チェックアウトされているブランチを示します。</target>
        </trans-unit>
        <trans-unit id="c76d23bfcb6d4a63fd96acda23f8bee068090518" translate="yes" xml:space="preserve">
          <source>The worktree list command has two output formats. The default format shows the details on a single line with columns. For example:</source>
          <target state="translated">ワークツリーリストコマンドには2つの出力フォーマットがあります。デフォルトのフォーマットでは、詳細を1行に列で表示します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ecaf7c5f30215b083ffbd406549425a7d1040c7d" translate="yes" xml:space="preserve">
          <source>Then &quot;&lt;code&gt;git merge topic&lt;/code&gt;&quot; will replay the changes made on the &lt;code&gt;topic&lt;/code&gt; branch since it diverged from &lt;code&gt;master&lt;/code&gt; (i.e., &lt;code&gt;E&lt;/code&gt;) until its current commit (&lt;code&gt;C&lt;/code&gt;) on top of &lt;code&gt;master&lt;/code&gt;, and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes.</source>
          <target state="translated">そして、「 &lt;code&gt;git merge topic&lt;/code&gt; 」上行われた変更再生します &lt;code&gt;topic&lt;/code&gt; それはから分岐するので、分岐 &lt;code&gt;master&lt;/code&gt; （すなわち、 &lt;code&gt;E&lt;/code&gt; その電流は（コミットまで） &lt;code&gt;C&lt;/code&gt; の上に） &lt;code&gt;master&lt;/code&gt; の名前と一緒にコミットし、新しい中に結果を記録します2つの親コミットと、変更を説明するユーザーからのログメッセージ。</target>
        </trans-unit>
        <trans-unit id="f3bf49c80f1bf671798b336ee7a6337eb982b2bc" translate="yes" xml:space="preserve">
          <source>Then &quot;&lt;code&gt;git pull&lt;/code&gt;&quot; will fetch and replay the changes from the remote &lt;code&gt;master&lt;/code&gt; branch since it diverged from the local &lt;code&gt;master&lt;/code&gt; (i.e., &lt;code&gt;E&lt;/code&gt;) until its current commit (&lt;code&gt;C&lt;/code&gt;) on top of &lt;code&gt;master&lt;/code&gt; and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes.</source>
          <target state="translated">そして、「 &lt;code&gt;git pull&lt;/code&gt; 」リモートからの変更フェッチし、再生します &lt;code&gt;master&lt;/code&gt; は、ローカルから分岐するので枝を &lt;code&gt;master&lt;/code&gt; （すなわち、 &lt;code&gt;E&lt;/code&gt; ）の電流が（コミットするまで &lt;code&gt;C&lt;/code&gt; の上に） &lt;code&gt;master&lt;/code&gt; と新しい一緒にコミットして結果を記録します2つの親コミットの名前と、変更を説明するユーザーからのログメッセージ。</target>
        </trans-unit>
        <trans-unit id="44f92500b7ae9560ae64e2f2fc4f1af900d3ff26" translate="yes" xml:space="preserve">
          <source>Then &quot;git bisect&quot; will checkout a commit of its choosing and ask the user to test it, like this:</source>
          <target state="translated">そうすると、&quot;git bisect&quot; は自分で選んだコミットをチェックアウトして、次のようにユーザーにテストを依頼します。</target>
        </trans-unit>
        <trans-unit id="e1ef052a3cd59f805d0ae45d1b9033a6a2faaa95" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;git bisect&lt;/code&gt; will respond with something like</source>
          <target state="translated">その後、 &lt;code&gt;git bisect&lt;/code&gt; は次のような応答を返します</target>
        </trans-unit>
        <trans-unit id="307236a389d15c9e88cc574f3c2b3a0314992840" translate="yes" xml:space="preserve">
          <source>Then compile and test the chosen revision, and afterwards mark the revision as good or bad in the usual manner.</source>
          <target state="translated">その後、選択したリビジョンをコンパイルしてテストし、その後、通常の方法でリビジョンの良し悪しをマークします。</target>
        </trans-unit>
        <trans-unit id="876e252bd62eb2a97f748800c6625b2b00ccfdec" translate="yes" xml:space="preserve">
          <source>Then confirm that the bug persists in a repository created from that stream (many bugs will not, as they really do depend on the exact repository contents):</source>
          <target state="translated">そして、そのストリームから作成されたリポジトリにバグが残っていることを確認してください (多くのバグは、実際には正確なリポジトリの内容に依存しているため、バグが残っていないことが多いです)。</target>
        </trans-unit>
        <trans-unit id="87463a5d117dae6022935ddfd68f09bfbb9b0943" translate="yes" xml:space="preserve">
          <source>Then create the following script to get list of project in the format suitable for GITWEB_LIST build configuration variable (or &lt;code&gt;$projects_list&lt;/code&gt; variable in gitweb config):</source>
          <target state="translated">次に、次のスクリプトを作成して、GITWEB_LISTビルド構成変数（またはgitweb configの &lt;code&gt;$projects_list&lt;/code&gt; 変数）に適した形式でプロジェクトのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="b5a742d8577423cd13ed5705b5290de27ff73949" translate="yes" xml:space="preserve">
          <source>Then fixup &quot;master&quot; with &lt;code&gt;git rebase&lt;/code&gt;. Do NOT use &lt;code&gt;git merge&lt;/code&gt; or your history will not be compatible with a future &lt;code&gt;dcommit&lt;/code&gt;!</source>
          <target state="translated">次に &lt;code&gt;git rebase&lt;/code&gt; で「マスター」を修正します。 &lt;code&gt;git merge&lt;/code&gt; を使用しないでください。使用すると、履歴が将来の &lt;code&gt;dcommit&lt;/code&gt; と互換性がなくなります。</target>
        </trans-unit>
        <trans-unit id="78318329e21f0014f75ba54a708b1f46ad0d023c" translate="yes" xml:space="preserve">
          <source>Then it compares the new skip-worktree value with the previous one. If skip-worktree turns from set to unset, it will add the corresponding file back. If it turns from unset to set, that file will be removed.</source>
          <target state="translated">そして、新しいskip-worktreeの値を以前の値と比較します。skip-worktreeがセットからアンセットになった場合は、対応するファイルを元に戻します。セットされていない状態からセットされている状態になった場合、そのファイルは削除されます。</target>
        </trans-unit>
        <trans-unit id="5e9c59419a3e5d8568740259a39319d49129c624" translate="yes" xml:space="preserve">
          <source>Then it examines &lt;code&gt;.gitattributes&lt;/code&gt; (which is in the parent directory), and finds that the first line matches, but &lt;code&gt;t/.gitattributes&lt;/code&gt; file already decided how &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; attributes should be given to this path, so it leaves &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; unset. Attribute &lt;code&gt;baz&lt;/code&gt; is set.</source>
          <target state="translated">次に、それは（親ディレクトリにある） &lt;code&gt;.gitattributes&lt;/code&gt; を調べ、最初の行が一致することを &lt;code&gt;t/.gitattributes&lt;/code&gt; ますが、t / .gitattributesファイルは、このパスに &lt;code&gt;merge&lt;/code&gt; 、 &lt;code&gt;foo&lt;/code&gt; 、および &lt;code&gt;bar&lt;/code&gt; 属性をどのように指定するかをすでに決定しているため、 &lt;code&gt;foo&lt;/code&gt; および &lt;code&gt;bar&lt;/code&gt; を残します未設定。属性 &lt;code&gt;baz&lt;/code&gt; が設定されています。</target>
        </trans-unit>
        <trans-unit id="1100f313a3d209e54bf3bc725a364711886dbfc4" translate="yes" xml:space="preserve">
          <source>Then modify, reorder, or eliminate patches as needed before applying them again with &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;:</source>
          <target state="translated">次に、必要に応じてパッチを変更、並べ替え、または削除してから、&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;を使用して再度適用します。</target>
        </trans-unit>
        <trans-unit id="cd43ef848f2d3c4afb2a44ae28c2a413397c1d96" translate="yes" xml:space="preserve">
          <source>Then provide your password via the pserver method, for example:</source>
          <target state="translated">次に、pserver メソッドを使ってパスワードを入力します。</target>
        </trans-unit>
        <trans-unit id="a774f276f116b48d127c0c1418ef7aa2fe46b49b" translate="yes" xml:space="preserve">
          <source>Then simplify each commit &lt;code&gt;C&lt;/code&gt; to its replacement &lt;code&gt;C'&lt;/code&gt; in the final history according to the following rules:</source>
          <target state="translated">次に、次のルールに従って、各コミット &lt;code&gt;C&lt;/code&gt; を最終履歴の置換 &lt;code&gt;C'&lt;/code&gt; に簡略化します。</target>
        </trans-unit>
        <trans-unit id="2f5d7fdcf8fcb013dcf3c597507de91a5cb0f77d" translate="yes" xml:space="preserve">
          <source>Then simply fork your topic branches from the stable remotes as explained earlier.</source>
          <target state="translated">次に、先ほど説明したように、安定したリモートからトピックのブランチをフォークします。</target>
        </trans-unit>
        <trans-unit id="b19a7b2e2b2e2252f0564256c9b87915d5db46d3" translate="yes" xml:space="preserve">
          <source>Then suppose you modify the last three commits:</source>
          <target state="translated">そして、最後の3つのコミットを修正したとします。</target>
        </trans-unit>
        <trans-unit id="e69e2e34d497710c4127a780d2a5ed5c7d7fac83" translate="yes" xml:space="preserve">
          <source>Then there are two ways to get a smaller repository. A safer way is to clone, that keeps your original intact.</source>
          <target state="translated">小さいリポジトリを手に入れるには2つの方法があります。より安全な方法はクローンを作ることです。</target>
        </trans-unit>
        <trans-unit id="5c871054b486e3acaf28dc409c1ab3e693b4fc90" translate="yes" xml:space="preserve">
          <source>Then this &lt;code&gt;git p4 clone&lt;/code&gt; command:</source>
          <target state="translated">次に、この &lt;code&gt;git p4 clone&lt;/code&gt; コマンド：</target>
        </trans-unit>
        <trans-unit id="db9b57b987ef397bc0b191d278e31ed2d827cb0a" translate="yes" xml:space="preserve">
          <source>Then you can disable sparse checkout. Sparse checkout support in &lt;code&gt;git read-tree&lt;/code&gt; and similar commands is disabled by default. You need to turn &lt;code&gt;core.sparseCheckout&lt;/code&gt; on in order to have sparse checkout support.</source>
          <target state="translated">次に、スパースチェックアウトを無効にできます。 &lt;code&gt;git read-tree&lt;/code&gt; および類似のコマンドでのスパースチェックアウトのサポートは、デフォルトでは無効になっています。スパースチェックアウトをサポートするには、 &lt;code&gt;core.sparseCheckout&lt;/code&gt; をオンにする必要があります。</target>
        </trans-unit>
        <trans-unit id="87a33f516a8ffec885e906dbb29e388a5f30ada0" translate="yes" xml:space="preserve">
          <source>Then you can pull and merge, leaving &lt;code&gt;frotz.c&lt;/code&gt; and &lt;code&gt;filfre.c&lt;/code&gt; changes still in the working tree.</source>
          <target state="translated">次に、プルしてマージし、作業ツリーに &lt;code&gt;frotz.c&lt;/code&gt; と &lt;code&gt;filfre.c&lt;/code&gt; の変更を残します。</target>
        </trans-unit>
        <trans-unit id="fa280cd97c17d646b4ce0e60bbbcb27953b34fb3" translate="yes" xml:space="preserve">
          <source>Then you can push both the test and release trees using &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;:</source>
          <target state="translated">次に、&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;を使用して、テストツリーとリリースツリーの両方をプッシュできます。</target>
        </trans-unit>
        <trans-unit id="9015e54306232b9477b76c544780cb6cb29e184c" translate="yes" xml:space="preserve">
          <source>Then you might want a &lt;code&gt;.mailmap&lt;/code&gt; file that looks like:</source>
          <target state="translated">次に、次のような &lt;code&gt;.mailmap&lt;/code&gt; ファイルが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="bdefcc2b7f4d341c71ca424367a0164c209ac375" translate="yes" xml:space="preserve">
          <source>Then you transfer file.bundle to the target machine B. Because this bundle does not require any existing object to be extracted, you can create a new repository on machine B by cloning from it:</source>
          <target state="translated">そして、対象のマシンBにfile.bundleを転送します。このbundleは既存のオブジェクトを抽出する必要がないので、マシンBにクローンして新しいリポジトリを作成することができます。</target>
        </trans-unit>
        <trans-unit id="e826c3727c0c79aa7b30f2352881ef1c5a35f171" translate="yes" xml:space="preserve">
          <source>Then you would define a &quot;filter.indent.clean&quot; and &quot;filter.indent.smudge&quot; configuration in your .git/config to specify a pair of commands to modify the contents of C programs when the source files are checked in (&quot;clean&quot; is run) and checked out (no change is made because the command is &quot;cat&quot;).</source>
          <target state="translated">そして、.git/config で &quot;filter.indent.clean&quot; と &quot;filter.indent.smudge&quot; の設定を定義し、ソースファイルがチェックインされたとき(&quot;clean&quot; を実行したとき)とチェックアウトされたとき (コマンドが &quot;cat&quot; なので変更はありません)に C プログラムの内容を変更するコマンドのペアを指定します。</target>
        </trans-unit>
        <trans-unit id="c6308f4c83137c8ddf705f0b33927bc3a2a2d3bf" translate="yes" xml:space="preserve">
          <source>Then, make that directory into a Git repository by running &lt;code&gt;git init&lt;/code&gt;, but this time, since its name is not the usual &lt;code&gt;.git&lt;/code&gt;, we do things slightly differently:</source>
          <target state="translated">次に、 &lt;code&gt;git init&lt;/code&gt; を実行して、そのディレクトリをGitリポジトリーに作成しますが、今回は、その名前が通常の &lt;code&gt;.git&lt;/code&gt; ではないため、処理が少し異なります。</target>
        </trans-unit>
        <trans-unit id="4d45e0228f3dfbda52666260c02f45c435d7f13c" translate="yes" xml:space="preserve">
          <source>Then, use &lt;code&gt;git bisect &amp;lt;term-old&amp;gt;&lt;/code&gt; and &lt;code&gt;git bisect &amp;lt;term-new&amp;gt;&lt;/code&gt; instead of &lt;code&gt;git bisect good&lt;/code&gt; and &lt;code&gt;git bisect bad&lt;/code&gt; to mark commits.</source>
          <target state="translated">次に、 &lt;code&gt;git bisect good&lt;/code&gt; および &lt;code&gt;git bisect bad&lt;/code&gt; の代わりに &lt;code&gt;git bisect &amp;lt;term-old&amp;gt;&lt;/code&gt; および &lt;code&gt;git bisect &amp;lt;term-new&amp;gt;&lt;/code&gt; を使用してコミットをマークします。</target>
        </trans-unit>
        <trans-unit id="b100177b4f5d14520d5631ccbd2bc2ff52393e78" translate="yes" xml:space="preserve">
          <source>Then, you run this command:</source>
          <target state="translated">そして、このコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="ebbdc2314a6104dc9178c4c9ed7835ad78f84727" translate="yes" xml:space="preserve">
          <source>Then, you would define a &quot;diff.tex.xfuncname&quot; configuration to specify a regular expression that matches a line that you would want to appear as the hunk header &quot;TEXT&quot;. Add a section to your &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file (or &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; file) like this:</source>
          <target state="translated">次に、「diff.tex.xfuncname」構成を定義して、ハンクヘッダー「TEXT」として表示する行に一致する正規表現を指定します。次のように、セクションを &lt;code&gt;$GIT_DIR/config&lt;/code&gt; ファイル（または &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ファイル）に追加します。</target>
        </trans-unit>
        <trans-unit id="8d94c9456285c171a8f18dcac7b76fd1fccc9ff4" translate="yes" xml:space="preserve">
          <source>There are (number of parents + 1) &lt;code&gt;@&lt;/code&gt; characters in the chunk header for combined diff format.</source>
          <target state="translated">結合されたdiff形式のチャンクヘッダーには（親の数+ 1） &lt;code&gt;@&lt;/code&gt; 文字があります。</target>
        </trans-unit>
        <trans-unit id="f7e9cf96a6ce9ed5c513750352c4736c076b5145" translate="yes" xml:space="preserve">
          <source>There are CPP wrapper macros and ifdefs to hide most of these details. See &lt;code&gt;trace2.h&lt;/code&gt; for more details. The following discussion will only describe the simplified forms.</source>
          <target state="translated">これらの詳細のほとんどを非表示にするCPPラッパーマクロとifdefsがあります。詳細については、 &lt;code&gt;trace2.h&lt;/code&gt; を参照してください。以下の説明では、簡略化された形式についてのみ説明します。</target>
        </trans-unit>
        <trans-unit id="e4287f1e47cb2bfc1b9e5f25165aef43ceec9d6c" translate="yes" xml:space="preserve">
          <source>There are a few built-in low-level merge drivers defined that can be asked for via the &lt;code&gt;merge&lt;/code&gt; attribute.</source>
          <target state="translated">いくつかの組み込みの低レベルマージドライバーが定義されており、それらは &lt;code&gt;merge&lt;/code&gt; 属性を介して要求できます。</target>
        </trans-unit>
        <trans-unit id="12f3989319ea3c0cba3d029a62ee2c306fd0616b" translate="yes" xml:space="preserve">
          <source>There are a few built-in patterns to make this easier, and &lt;code&gt;tex&lt;/code&gt; is one of them, so you do not have to write the above in your configuration file (you still need to enable this with the attribute mechanism, via &lt;code&gt;.gitattributes&lt;/code&gt;). The following built in patterns are available:</source>
          <target state="translated">これを簡単にするためにいくつかの組み込みパターンがあり、 &lt;code&gt;tex&lt;/code&gt; はその1つなので、構成ファイルに上記を書き込む必要はありません（ &lt;code&gt;.gitattributes&lt;/code&gt; を介して属性メカニズムでこれを有効にする必要があります）。次の組み込みパターンを使用できます。</target>
        </trans-unit>
        <trans-unit id="336d04ab3583042f88f12edf2d051324b94f62a0" translate="yes" xml:space="preserve">
          <source>There are a few issues to resolve before we can completely switch to Trace2.</source>
          <target state="translated">Trace2に完全に切り替える前に、いくつかの問題を解決する必要があります。</target>
        </trans-unit>
        <trans-unit id="f553cccafe9fdfa62552e6e1af4be573be245c47" translate="yes" xml:space="preserve">
          <source>There are a few special-purpose refs that do not begin with &lt;code&gt;refs/&lt;/code&gt;. The most notable example is &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;refs/&lt;/code&gt; 始まらない特殊用途の参照がいくつかあります。最も注目すべき例は &lt;code&gt;HEAD&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cc9f53378dabd08666f7e5c5af2a717dbbd37e28" translate="yes" xml:space="preserve">
          <source>There are a number of factors which affect how much memory fast-import requires to perform an import. Like critical sections of core Git, fast-import uses its own memory allocators to amortize any overheads associated with malloc. In practice fast-import tends to amortize any malloc overheads to 0, due to its use of large block allocations.</source>
          <target state="translated">fast-import がインポートを実行するために必要なメモリ量には、いくつかの要因があります。コアとなる Git の重要な部分と同様に、fast-import は独自のメモリアロケータを使用して malloc に関連するオーバーヘッドを償却します。実際のところ、fast-import は大規模なブロックアロケーションを使用しているため、malloc のオーバーヘッドはすべて 0 になる傾向にあります。</target>
        </trans-unit>
        <trans-unit id="e0b2b532209e8b05d8ee20f67e782301986fd65a" translate="yes" xml:space="preserve">
          <source>There are also cases where existing indexes written by git versions before 2.17 will reference directories that don&amp;rsquo;t exist anymore, potentially causing many &quot;could not open directory&quot; warnings to be printed on &quot;git status&quot;. These are new warnings for existing issues that were previously silently discarded.</source>
          <target state="translated">2.17より前のバージョンのgitで作成された既存のインデックスが、存在しないディレクトリを参照する場合もあり、「git status」に多くの「ディレクトリを開けません」という警告が表示される可能性があります。これらは、以前は黙って破棄されていた既存の問題に対する新しい警告です。</target>
        </trans-unit>
        <trans-unit id="aec0acb7fb7522f7c5da2df9b13975842cb9d1be" translate="yes" xml:space="preserve">
          <source>There are also more complex operations that can be performed. But beware that because the patch is applied only to the index and not the working tree, the working tree will appear to &quot;undo&quot; the change in the index. For example, introducing a new line into the index that is in neither the HEAD nor the working tree will stage the new line for commit, but the line will appear to be reverted in the working tree.</source>
          <target state="translated">もっと複雑な操作を行うこともできます。しかし、パッチはインデックスにのみ適用され、作業ツリーには適用されないので、作業ツリーはインデックスの変更を「元に戻す」ように見えることに注意してください。例えば、HEAD にも作業ツリーにもない新しい行をインデックスに導入すると、その行はコミットのためにステージされますが、その行は作業ツリーでは元に戻されているように見えます。</target>
        </trans-unit>
        <trans-unit id="a266660a35cd18470141c43d8a3ffa2b3074c06a" translate="yes" xml:space="preserve">
          <source>There are also other situations that cause dangling objects. For example, a &quot;dangling blob&quot; may arise because you did a &lt;code&gt;git add&lt;/code&gt; of a file, but then, before you actually committed it and made it part of the bigger picture, you changed something else in that file and committed that &lt;strong&gt;updated&lt;/strong&gt; thing&amp;mdash;​the old state that you added originally ends up not being pointed to by any commit or tree, so it&amp;rsquo;s now a dangling blob object.</source>
          <target state="translated">ぶら下がりオブジェクトを引き起こす他の状況もあります。例えば、「ダングリングブロブは、」あなたがしたので、発生する可能性 &lt;code&gt;git add&lt;/code&gt; あなたが実際にそれをコミットし、それより大きな絵の一部なさ前に、そのファイルのを、しかし、あなたはそのファイルに何かを変更していることをコミット&lt;strong&gt;更新します&lt;/strong&gt; thing-元々追加した古い状態は、コミットまたはツリーによってポイントされないため、ぶら下がっているblobオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="232088d916b340ecad3098c72c2ebccbe30b76e5" translate="yes" xml:space="preserve">
          <source>There are also several operations which should be avoided entirely, as they will make the patch impossible to apply:</source>
          <target state="translated">また、パッチを貼ることが不可能になるので、完全に避けるべき操作もいくつかあります。</target>
        </trans-unit>
        <trans-unit id="eeb0752be9462c9bd2e54575f2023419e06b3d3b" translate="yes" xml:space="preserve">
          <source>There are also ways to automate the bisecting process if you have a test script that can tell a good from a bad commit. See &lt;a href=&quot;git-bisect&quot;&gt;git-bisect[1]&lt;/a&gt; for more information about this and other &lt;code&gt;git
bisect&lt;/code&gt; features.</source>
          <target state="translated">悪いコミットから良いことを伝えることができるテストスクリプトがある場合、二分するプロセスを自動化する方法もあります。これと他の &lt;code&gt;git bisect&lt;/code&gt; 機能の詳細については、&lt;a href=&quot;git-bisect&quot;&gt;git-bisect [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="753d0dde7d0dbacd496fb113e3e96e5ea6d9494d" translate="yes" xml:space="preserve">
          <source>There are four different types of objects: &quot;blob&quot;, &quot;tree&quot;, &quot;commit&quot;, and &quot;tag&quot;.</source>
          <target state="translated">オブジェクトには4つの種類があります。&quot;blob」「tree」「commit」「tag」です。</target>
        </trans-unit>
        <trans-unit id="a3d0232ce28c94288cf502f722ca216e09b8c5b1" translate="yes" xml:space="preserve">
          <source>There are implementations of Git that do not leave usable values in some fields (e.g. JGit); by excluding these fields from the comparison, the &lt;code&gt;minimal&lt;/code&gt; mode may help interoperability when the same repository is used by these other systems at the same time.</source>
          <target state="translated">一部のフィールド（JGitなど）に使用可能な値を残さないGitの実装があります。これらのフィールドを比較から除外することにより、 &lt;code&gt;minimal&lt;/code&gt; モードは、同じリポジトリがこれらの他のシステムによって同時に使用される場合の相互運用性に役立ちます。</target>
        </trans-unit>
        <trans-unit id="ac26d523869587e187089ca0cfe8dfa88bde0428" translate="yes" xml:space="preserve">
          <source>There are many more; see the &quot;SPECIFYING REVISIONS&quot; section of the &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; man page for the complete list of ways to name revisions. Some examples:</source>
          <target state="translated">他にもたくさんあります。リビジョンに名前を付ける方法の完全なリストについては、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]の&lt;/a&gt; manページの「SPECIFYING REVISIONS」セクションを参照してください。いくつかの例：</target>
        </trans-unit>
        <trans-unit id="caa64d4f477bb9cc6ae8b8763c8d93ec4bfb0cef" translate="yes" xml:space="preserve">
          <source>There are no facilities for helping users find what unwanted crud they should delete, which means they are much more likely to have incomplete or partial cleanups that sometimes result in confusion and people wasting time trying to understand. (For example, folks tend to just look for big files to delete instead of big directories or extensions, and once they do so, then sometime later folks using the new repository who are going through history will notice a build artifact directory that has some files but not others, or a cache of dependencies (node_modules or similar) which couldn&amp;rsquo;t have ever been functional since it&amp;rsquo;s missing some files.)</source>
          <target state="translated">ユーザーが削除する必要のある不要なクラッドを見つけるための機能はありません。つまり、不完全または部分的なクリーンアップが行われる可能性が高く、混乱を招き、理解しようとする時間が無駄になる可能性があります。（たとえば、人々は大きなディレクトリや拡張機能の代わりに削除する大きなファイルを探す傾向があり、そうすると、いつか新しいリポジトリを使用して履歴を調べている人々は、いくつかのファイルを持つビルドアーティファクトディレクトリに気付くでしょうしかし、他のファイル、またはいくつかのファイルが欠落しているため機能することができなかった依存関係のキャッシュ（node_modulesなど）ではありません。）</target>
        </trans-unit>
        <trans-unit id="ce4a9f9a1026ea763732ff998a2bcfb7b60f26ca" translate="yes" xml:space="preserve">
          <source>There are no public Trace2 data structures.</source>
          <target state="translated">公開されているTrace2のデータ構造はありません。</target>
        </trans-unit>
        <trans-unit id="5a1dbdef2a9d4fcde2fec24ad984bfc7ec6f3aa2" translate="yes" xml:space="preserve">
          <source>There are numerous other tools, such as StGit, which exist for the purpose of maintaining a patch series. These are outside of the scope of this manual.</source>
          <target state="translated">StGit のような、パッチシリーズを維持するためのツールは他にも数多く存在します。これらはこのマニュアルの範囲外です。</target>
        </trans-unit>
        <trans-unit id="306721e74c73edf4b4a1c2554be600724c25d3f0" translate="yes" xml:space="preserve">
          <source>There are other estimates saying that 80% of the cost related to software is about maintenance &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;.</source>
          <target state="translated">ソフトウェアに関連するコストの80％はメンテナンスに関するものであるという他の見積もりもあります&lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7eccee0caa41472aded0ea349d3d3fa4831b32ab" translate="yes" xml:space="preserve">
          <source>There are other real-world examples of using update and post-update hooks found in the Documentation/howto directory.</source>
          <target state="translated">他にも、Documentation/howtoディレクトリにある更新フックや更新後フックを使用する実例があります。</target>
        </trans-unit>
        <trans-unit id="ddc4304f0c733f93eaa36c71971b210be6c86baa" translate="yes" xml:space="preserve">
          <source>There are several built-in formats, and you can define additional formats by setting a pretty.&amp;lt;name&amp;gt; config option to either another format name, or a &lt;code&gt;format:&lt;/code&gt; string, as described below (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). Here are the details of the built-in formats:</source>
          <target state="translated">いくつかの組み込みフォーマットがあり、pretty。&amp;lt;name&amp;gt;構成オプションを別のフォーマット名または &lt;code&gt;format:&lt;/code&gt; 文字列に設定することで、追加のフォーマットを定義できます（以下で説明します（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。組み込みフォーマットの詳細は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="172e083c83bf7e6cbde177805c61722f6bdc0777" translate="yes" xml:space="preserve">
          <source>There are some numbers about bugs in general, like a NIST study in 2002 &lt;a href=&quot;#1&quot;&gt;[1]&lt;/a&gt; that said:</source>
          <target state="translated">2002年のNIST調査&lt;a href=&quot;#1&quot;&gt;[1]の&lt;/a&gt;ように、一般的にバグについていくつかの数値があります。</target>
        </trans-unit>
        <trans-unit id="1a73feb2f257a54073e6e874ef78ceeefd47d29e" translate="yes" xml:space="preserve">
          <source>There are some subtle differences how the backends behave.</source>
          <target state="translated">バックエンドの挙動には微妙な違いがあります。</target>
        </trans-unit>
        <trans-unit id="a41ebe77f2eb54fbd4f30714a2e14c8c1d436ea0" translate="yes" xml:space="preserve">
          <source>There are three commands with similar names: &lt;code&gt;git reset&lt;/code&gt;, &lt;code&gt;git restore&lt;/code&gt; and &lt;code&gt;git revert&lt;/code&gt;.</source>
          <target state="translated">同じような名前の3つのコマンドがあります： &lt;code&gt;git reset&lt;/code&gt; 、 &lt;code&gt;git restore&lt;/code&gt; 、 &lt;code&gt;git revert&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="27e17ed315eeb27fa67bd10d3870c4d2deb8a92d" translate="yes" xml:space="preserve">
          <source>There are three different approaches: use an add-on to turn off line wraps, configure Thunderbird to not mangle patches, or use an external editor to keep Thunderbird from mangling the patches.</source>
          <target state="translated">3つの異なるアプローチがあります:アドオンを使用してラインラップをオフにする、Thunderbird がパッチをつぶさないように設定する、外部エディタを使用して Thunderbird がパッチをつぶさないようにする、です。</target>
        </trans-unit>
        <trans-unit id="8c553f5839a8296a42918c5ea6f6a2fcca19fa49" translate="yes" xml:space="preserve">
          <source>There are three main tools that can be used for this:</source>
          <target state="translated">そのためのツールは大きく分けて3つあります。</target>
        </trans-unit>
        <trans-unit id="86e24f426735724adb9ab7ea59c461905251e8e9" translate="yes" xml:space="preserve">
          <source>There are three ways to specify which refs to update on the remote end.</source>
          <target state="translated">リモート側で更新する参照を指定する方法は3つあります。</target>
        </trans-unit>
        <trans-unit id="5544b2d42620b4375dbc730230171fe04b9f972b" translate="yes" xml:space="preserve">
          <source>There are two different types of capabilities: normal capabilities, which can be used to convey information or alter the behavior of a request, and commands, which are the core actions that a client wants to perform (fetch, push, etc).</source>
          <target state="translated">能力には2つの異なるタイプがあります:情報を伝えたりリクエストの動作を変更したりするために使われる通常の能力と、クライアントが実行したいコアアクション(フェッチやプッシュなど)であるコマンドです。</target>
        </trans-unit>
        <trans-unit id="c2015c03c4c8786233c499c7815e06c17100a16b" translate="yes" xml:space="preserve">
          <source>There are two formats accepted for patch files:</source>
          <target state="translated">パッチファイルには2つのフォーマットがあります。</target>
        </trans-unit>
        <trans-unit id="9b5e9b84c7e0cf0cc62bfad7ffc7f5a42847bbc1" translate="yes" xml:space="preserve">
          <source>There are two kinds of fixes, discussed in the following subsections:</source>
          <target state="translated">修正には2種類あり、以下のサブセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="afe3df249e404830655fd820b0b8e96397ac9183" translate="yes" xml:space="preserve">
          <source>There are two main tools that can be used to include changes from one branch on another: &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt; and &lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick[1]&lt;/a&gt;.</source>
          <target state="translated">あるブランチから別のブランチへの変更を含めるために使用できる2つの主要なツールがあります：&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;と&lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick [1]&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="1432c9def859812f2dcccb492cbe2b422538cffb" translate="yes" xml:space="preserve">
          <source>There are two ways to specify which commits to operate on.</source>
          <target state="translated">どのコミットを操作するかを指定するには、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="04a6eae6f43fc050171fa2270096884eaba0fee3" translate="yes" xml:space="preserve">
          <source>There is a difference between listing multiple &amp;lt;refspec&amp;gt; directly on &lt;em&gt;git pull&lt;/em&gt; command line and having multiple &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; entries in your configuration for a &amp;lt;repository&amp;gt; and running a &lt;em&gt;git pull&lt;/em&gt; command without any explicit &amp;lt;refspec&amp;gt; parameters. &amp;lt;refspec&amp;gt;s listed explicitly on the command line are always merged into the current branch after fetching. In other words, if you list more than one remote ref, &lt;em&gt;git pull&lt;/em&gt; will create an Octopus merge. On the other hand, if you do not list any explicit &amp;lt;refspec&amp;gt; parameter on the command line, &lt;em&gt;git pull&lt;/em&gt; will fetch all the &amp;lt;refspec&amp;gt;s it finds in the &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; configuration and merge only the first &amp;lt;refspec&amp;gt; found into the current branch. This is because making an Octopus from remote refs is rarely done, while keeping track of multiple remote heads in one-go by fetching more than one is often useful.</source>
          <target state="translated">&lt;em&gt;git pull&lt;/em&gt;コマンドラインで複数の&amp;lt;refspec&amp;gt;を直接一覧表示することと、&amp;lt;repository&amp;gt;の構成に複数の &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; エントリを含めることと、明示的な&amp;lt;refspec&amp;gt;パラメーターなしで&lt;em&gt;git pull&lt;/em&gt;コマンドを実行することには違いがあります。コマンドラインで明示的にリストされた&amp;lt;refspec&amp;gt;は、フェッチ後に常に現在のブランチにマージされます。言い換えると、複数のリモート参照をリストすると、&lt;em&gt;git pull&lt;/em&gt;はOctopusマージを作成します。一方、コマンドラインで明示的な&amp;lt;refspec&amp;gt;パラメーターを指定しない場合、&lt;em&gt;git pull&lt;/em&gt;は、 &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; で見つかったすべての&amp;lt;refspec&amp;gt;をフェッチします。&amp;lt;repository&amp;gt; .fetch構成し、最初の&amp;lt;refspec&amp;gt;のみを現在のブランチにマージします。これは、リモート参照からタコを作成することはめったにないため、複数をフェッチして複数のリモートヘッドを1回で追跡することは、多くの場合便利です。</target>
        </trans-unit>
        <trans-unit id="08d27e369ae02f07111163548604defe0fd7ba02" translate="yes" xml:space="preserve">
          <source>There is a fourth official branch that is used slightly differently:</source>
          <target state="translated">4つ目の公式支部があり、少しずつ使い分けています。</target>
        </trans-unit>
        <trans-unit id="3ab0818052937d36eff9b5a2767bc99b339b1151" translate="yes" xml:space="preserve">
          <source>There is a script in contrib/thunderbird-patch-inline which can help you include patches with Thunderbird in an easy way. To use it, do the steps above and then use the script as the external editor.</source>
          <target state="translated">contrib/thunderbird-patch-inlineにスクリプトがあり、Thunderbirdのパッチを簡単な方法で含めるのに役立ちます。これを使用するには、上記の手順を行い、スクリプトを外部エディタとして使用してください。</target>
        </trans-unit>
        <trans-unit id="1232149fc68bcd969b013f8dcdb8f804dc24a0d6" translate="yes" xml:space="preserve">
          <source>There is a tradeoff of course: merges require a more careful branch management. The following subsections discuss the important points.</source>
          <target state="translated">もちろんトレードオフもあります:合併には、より慎重な支店管理が必要です。以下のサブセクションでは、重要なポイントについて説明します。</target>
        </trans-unit>
        <trans-unit id="dad64266cc32a47cdf74ec10317455f91f86159c" translate="yes" xml:space="preserve">
          <source>There is already a project called BBChop created by Ealdwulf Wuffinga on Github that does something like that using Bayesian Search Theory &lt;a href=&quot;#9&quot;&gt;[9]&lt;/a&gt;:</source>
          <target state="translated">Eitwulf WuffingaによってGithubに作成されたBBChopと呼ばれるプロジェクトがすでにあり、ベイジアン検索理論&lt;a href=&quot;#9&quot;&gt;[9]&lt;/a&gt;を使用してそのようなことをしています。</target>
        </trans-unit>
        <trans-unit id="72c8cb7314c2d9e687a4188f4607320887a3abaf" translate="yes" xml:space="preserve">
          <source>There is also a deprecated &lt;code&gt;[section.subsection]&lt;/code&gt; syntax. With this syntax, the subsection name is converted to lower-case and is also compared case sensitively. These subsection names follow the same restrictions as section names.</source>
          <target state="translated">非推奨の &lt;code&gt;[section.subsection]&lt;/code&gt; 構文もあります。この構文では、サブセクション名は小文字に変換され、大文字と小文字を区別して比較されます。これらのサブセクション名は、セクション名と同じ制限に従います。</target>
        </trans-unit>
        <trans-unit id="562a7aac41f0a6a2b8bd94c80ba1df49ae8c2861" translate="yes" xml:space="preserve">
          <source>There is also an alternate -z format recommended for machine parsing. In that format, the status field is the same, but some other things change. First, the &lt;code&gt;-&amp;gt;&lt;/code&gt; is omitted from rename entries and the field order is reversed (e.g &lt;code&gt;from -&amp;gt; to&lt;/code&gt; becomes &lt;code&gt;to from&lt;/code&gt;). Second, a NUL (ASCII 0) follows each filename, replacing space as a field separator and the terminating newline (but a space still separates the status field from the first filename). Third, filenames containing special characters are not specially formatted; no quoting or backslash-escaping is performed.</source>
          <target state="translated">マシンの解析に推奨される代替の-z形式もあります。その形式では、ステータスフィールドは同じですが、他のいくつかが変更されます。まず、 &lt;code&gt;-&amp;gt;&lt;/code&gt; （例えば名前変更エントリから省略され、フィールドの順序を逆にする &lt;code&gt;from -&amp;gt; to&lt;/code&gt; なり &lt;code&gt;to from&lt;/code&gt; ）。次に、NUL（ASCII 0）が各ファイル名の後に続き、フィールドセパレータとしてのスペースと終了改行を置き換えます（ただし、スペースは最初のファイル名からステータスフィールドを分離します）。3番目に、特殊文字を含むファイル名は特別にフォーマットされていません。引用やバックスラッシュエスケープは実行されません。</target>
        </trans-unit>
        <trans-unit id="23b53316aea0dd64f8f21ea0eae539235bf45a74" translate="yes" xml:space="preserve">
          <source>There is also an option to sort by versions, this can be done by using the fieldname &lt;code&gt;version:refname&lt;/code&gt; or its alias &lt;code&gt;v:refname&lt;/code&gt;.</source>
          <target state="translated">バージョンでソートするオプションもあります。これは、フィールド名 &lt;code&gt;version:refname&lt;/code&gt; またはそのエイリアス &lt;code&gt;v:refname&lt;/code&gt; を使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="490f0c7223e032436f3ed74187899d6766a21bb5" translate="yes" xml:space="preserve">
          <source>There is another common situation where you may encounter non-fast-forward rejection when you try to push, and it is possible even when you are pushing into a repository nobody else pushes into. After you push commit A yourself (in the first picture in this section), replace it with &quot;git commit --amend&quot; to produce commit B, and you try to push it out, because forgot that you have pushed A out already. In such a case, and only if you are certain that nobody in the meantime fetched your earlier commit A (and started building on top of it), you can run &quot;git push --force&quot; to overwrite it. In other words, &quot;git push --force&quot; is a method reserved for a case where you do mean to lose history.</source>
          <target state="translated">もうひとつ、プッシュしようとすると非フォワード拒否に遭遇するというよくある状況がありますが、これは誰もプッシュしていないリポジトリにプッシュしている場合でも起こりうることです。コミット A を自分でプッシュした後 (このセクションの最初の画像)、それを &quot;git commit --amend&quot; に置き換えてコミット B を生成し、プッシュしようとしたときに、すでに A をプッシュしたことを忘れていたためにプッシュアウトしようとしたとしましょう。このような場合、そしてその間に誰もあなたの以前のコミット A をフェッチしていない (そしてその上でビルドを開始している)という確信がある場合に限り、&quot;git push --force&quot; を実行してそれを上書きすることができます。言い換えれば、&quot;git push --force&quot; は履歴をなくしたいときのために予約されたメソッドです。</target>
        </trans-unit>
        <trans-unit id="76938def2c927fda8d1c815e17291d57380d4a8a" translate="yes" xml:space="preserve">
          <source>There is another tweak in the bisection algorithm that has not been described in the &quot;bisection algorithm&quot; above.</source>
          <target state="translated">上の「二分法アルゴリズム」では説明されていないもう一つの微調整があります。</target>
        </trans-unit>
        <trans-unit id="6cd697be600e420b39bb68cc6d967c4ceca70af4" translate="yes" xml:space="preserve">
          <source>There is no option for &lt;code&gt;git rm&lt;/code&gt; to remove from the index only the paths that have disappeared from the filesystem. However, depending on the use case, there are several ways that can be done.</source>
          <target state="translated">&lt;code&gt;git rm&lt;/code&gt; がファイルシステムから消えたパスのみをインデックスから削除するオプションはありません。ただし、ユースケースに応じて、実行できるいくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="60bcaa98facce6fa9b4916fcb4556840549eaf70" translate="yes" xml:space="preserve">
          <source>There is no other restriction on the replaced and replacement objects. Merge commits can be replaced by non-merge commits and vice versa.</source>
          <target state="translated">置換オブジェクトと置換オブジェクトには他に制限はありません。マージコミットは非マージコミットで置き換えることができ、その逆も可能です。</target>
        </trans-unit>
        <trans-unit id="5b920fe2651a1acef3f4de11b5f87d418bf37e32" translate="yes" xml:space="preserve">
          <source>There is now a new commit &lt;code&gt;e&lt;/code&gt;, but it is referenced only by &lt;code&gt;HEAD&lt;/code&gt;. We can of course add yet another commit in this state:</source>
          <target state="translated">現在、新しいコミット &lt;code&gt;e&lt;/code&gt; がありますが、それは &lt;code&gt;HEAD&lt;/code&gt; によってのみ参照されます。もちろん、この状態でさらに別のコミットを追加できます。</target>
        </trans-unit>
        <trans-unit id="e84a3494173a3e4e1765afc114a7bb8588db5e4e" translate="yes" xml:space="preserve">
          <source>There is one special case not mentioned above, which is treated differently. Normally, a merge results in a merge commit, with two parents, one pointing at each of the two lines of development that were merged.</source>
          <target state="translated">上記では触れられていない特別なケースがありますが、これは別の扱いになります。通常、マージの結果はマージコミットとなります。</target>
        </trans-unit>
        <trans-unit id="9c233ac02212216497063926a3cd425b73c1b106" translate="yes" xml:space="preserve">
          <source>There may be other problems when using &lt;code&gt;git rev-list&lt;/code&gt; related to pending objects.</source>
          <target state="translated">保留中のオブジェクトに関連する &lt;code&gt;git rev-list&lt;/code&gt; を使用すると、他の問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3cc97d3b58e95d007d294ed252208117b7ea36ad" translate="yes" xml:space="preserve">
          <source>There was a discussion at one point on the linux kernel mailing list of whether it was ok to always ask end user to bisect, and very good points were made to support the point of view that it is ok.</source>
          <target state="translated">linuxカーネルのメーリングリストでは、エンドユーザに常に二分するように頼んでもいいのかという議論がありました。</target>
        </trans-unit>
        <trans-unit id="e31f2056d77b9761665b1e39804c963e7c7e3f73" translate="yes" xml:space="preserve">
          <source>Therefore if the refspec for the remote includes e.g. &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt;, or you manually run e.g. &lt;code&gt;git fetch
--prune &amp;lt;name&amp;gt; &quot;refs/tags/*:refs/tags/*&quot;&lt;/code&gt; it won&amp;rsquo;t be stale remote tracking branches that are deleted, but any local tag that doesn&amp;rsquo;t exist on the remote.</source>
          <target state="translated">したがって、リモートのrefspecに &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt; が含まれている場合、または手動で実行した場合（例： &lt;code&gt;git fetch --prune &amp;lt;name&amp;gt; &quot;refs/tags/*:refs/tags/*&quot;&lt;/code&gt; 、 '削除された古いリモートトラッキングブランチであること。ただし、リモートに存在しないローカルタグ。</target>
        </trans-unit>
        <trans-unit id="22e33781a4f63d74c967572b3d2d5742f6f5b3cf" translate="yes" xml:space="preserve">
          <source>These are applied in sequence. The set of filepairs &lt;code&gt;git diff-*&lt;/code&gt; commands find are used as the input to diffcore-break, and the output from diffcore-break is used as the input to the next transformation. The final result is then passed to the output routine and generates either diff-raw format (see Output format sections of the manual for &lt;code&gt;git diff-*&lt;/code&gt; commands) or diff-patch format.</source>
          <target state="translated">これらは順番に適用されます。 &lt;code&gt;git diff-*&lt;/code&gt; コマンドが見つけるファイルペアのセットはdiffcore -breakへの入力として使用され、diffcore-breakからの出力は次の変換への入力として使用されます。その後、最終結果は出力ルーチンに渡され、diff-raw形式（ &lt;code&gt;git diff-*&lt;/code&gt; コマンドのマニュアルの出力形式のセクションを参照）またはdiff-patch形式のいずれかを生成します。</target>
        </trans-unit>
        <trans-unit id="5e4c5d2d8cb413a7bc102a12d4b32266eb5dffbd" translate="yes" xml:space="preserve">
          <source>These are concerned with describing the specific Git command after the command line, config, and environment are inspected. e.g: &lt;code&gt;void trace2_cmd_name(const char *name)&lt;/code&gt;, &lt;code&gt;void trace2_cmd_mode(const char *mode)&lt;/code&gt;.</source>
          <target state="translated">これらは、コマンドライン、構成、および環境が検査された後の特定のGitコマンドの説明に関係しています。例： &lt;code&gt;void trace2_cmd_name(const char *name)&lt;/code&gt; 、 &lt;code&gt;void trace2_cmd_mode(const char *mode)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd918e1aed68e545e545890a5d457bd39124acbb" translate="yes" xml:space="preserve">
          <source>These are concerned with recording performance data over regions or spans of code. e.g: &lt;code&gt;void trace2_region_enter(const char *category, const char *label, const struct repository *repo)&lt;/code&gt;.</source>
          <target state="translated">これらは、リージョンまたはコードのスパンにわたるパフォーマンスデータの記録に関係しています。例： &lt;code&gt;void trace2_region_enter(const char *category, const char *label, const struct repository *repo)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="10ea7c6e4b3ea51596f6b19ba236a57b5e812041" translate="yes" xml:space="preserve">
          <source>These are concerned with the lifetime of the overall git process. e.g: &lt;code&gt;void trace2_initialize_clock()&lt;/code&gt;, &lt;code&gt;void trace2_initialize()&lt;/code&gt;, &lt;code&gt;int trace2_is_enabled()&lt;/code&gt;, &lt;code&gt;void trace2_cmd_start(int argc, const char **argv)&lt;/code&gt;.</source>
          <target state="translated">これらは、gitプロセス全体の存続期間に関係しています。例： &lt;code&gt;void trace2_initialize_clock()&lt;/code&gt; 、 &lt;code&gt;void trace2_initialize()&lt;/code&gt; 、 &lt;code&gt;int trace2_is_enabled()&lt;/code&gt; 、 &lt;code&gt;void trace2_cmd_start(int argc, const char **argv)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3dce3473c941e3b3b27a31ac8449a2f1991a75d0" translate="yes" xml:space="preserve">
          <source>These are concerned with the various spawned child processes, including shell scripts, git commands, editors, pagers, and hooks.</source>
          <target state="translated">これらは、シェルスクリプト、git コマンド、エディタ、ページャー、フックなど、さまざまな子プロセスをスポーンすることに関係しています。</target>
        </trans-unit>
        <trans-unit id="64d6caf87f558c78a882445d71ea9cd47be32d78" translate="yes" xml:space="preserve">
          <source>These are internal helper commands used by other commands; end users typically do not use them directly.</source>
          <target state="translated">これらは他のコマンドで使用される内部ヘルパーコマンドです。</target>
        </trans-unit>
        <trans-unit id="14e40973cf60a547a4fee511ff95c4f84a31a06f" translate="yes" xml:space="preserve">
          <source>These are only used with the &lt;code&gt;dcommit&lt;/code&gt; and &lt;code&gt;rebase&lt;/code&gt; commands.</source>
          <target state="translated">これらは、 &lt;code&gt;dcommit&lt;/code&gt; コマンドと &lt;code&gt;rebase&lt;/code&gt; コマンドでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="1f4226446a769c76931ca392e2a09f31777b3654" translate="yes" xml:space="preserve">
          <source>These are optional command-line options for init. Each of these flags can point to a relative repository path (--tags=project/tags) or a full url (--tags=https://foo.org/project/tags). You can specify more than one --tags and/or --branches options, in case your Subversion repository places tags or branches under multiple paths. The option --stdlayout is a shorthand way of setting trunk,tags,branches as the relative paths, which is the Subversion default. If any of the other options are given as well, they take precedence.</source>
          <target state="translated">これらはinitのオプションのコマンドラインオプションです。これらのフラグはそれぞれ、相対的なリポジトリのパス (--tags=project/tags)または完全な URL (--tags=https://foo.org/project/tags)を指すことができます。タグやブランチを複数のパスの下に配置している Subversion リポジトリの場合に備えて、--tags や --branches オプションを複数指定することができます。オプション --stdlayout は、トランク、タグ、ブランチを相対パスとして設定する略式な方法で、これは Subversion のデフォルトです。他のオプションを指定した場合は、それらが優先されます。</target>
        </trans-unit>
        <trans-unit id="ef89fe03d8c6b725e4e01a5ddca75169500d3912" translate="yes" xml:space="preserve">
          <source>These attributes affect how the contents stored in the repository are copied to the working tree files when commands such as &lt;code&gt;git switch&lt;/code&gt;, &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git merge&lt;/code&gt; run. They also affect how Git stores the contents you prepare in the working tree in the repository upon &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">これらの属性は、 &lt;code&gt;git switch&lt;/code&gt; 、 &lt;code&gt;git checkout&lt;/code&gt; 、 &lt;code&gt;git merge&lt;/code&gt; などのコマンドを実行したときに、リポジトリに保存されているコンテンツが作業ツリーファイルにコピーされる方法に影響を与えます。また、 &lt;code&gt;git add&lt;/code&gt; および &lt;code&gt;git commit&lt;/code&gt; の際に、リポジトリの作業ツリーに準備したコンテンツをGitがどのように格納するかも影響します。</target>
        </trans-unit>
        <trans-unit id="1e36f59cc4fba5296689c97860f8ef3c808cbf54" translate="yes" xml:space="preserve">
          <source>These can be easily kept up to date using &lt;a href=&quot;git-pull&quot;&gt;git-pull[1]&lt;/a&gt;.</source>
          <target state="translated">これらは&lt;a href=&quot;git-pull&quot;&gt;git-pull [1]&lt;/a&gt;を使用して簡単に最新に保つことができます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
