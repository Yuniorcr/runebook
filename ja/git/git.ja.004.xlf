<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="21c90195abdd4404631a1dbe99e365dc5749da75" translate="yes" xml:space="preserve">
          <source>Before any ref is updated, if $GIT_DIR/hooks/pre-receive file exists and is executable, it will be invoked once with no parameters. The standard input of the hook will be one line per ref to be updated:</source>
          <target state="translated">いずれかの ref が更新される前に、 $GIT_DIR/hooks/pre-receive ファイルが存在し、実行可能であれば、パラメータなしで一度だけ呼び出されます。フックの標準入力は、更新されるrefごとに1行となります。</target>
        </trans-unit>
        <trans-unit id="add64b4c118b3f9ba1a8f5777c12299edaee08fe" translate="yes" xml:space="preserve">
          <source>Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be clobbered if there are conflicts. See also &lt;a href=&quot;git-stash&quot;&gt;git-stash[1]&lt;/a&gt;. &lt;code&gt;git pull&lt;/code&gt; and &lt;code&gt;git merge&lt;/code&gt; will stop without doing anything when local uncommitted changes overlap with files that &lt;code&gt;git pull&lt;/code&gt;/&lt;code&gt;git merge&lt;/code&gt; may need to update.</source>
          <target state="translated">外部の変更を適用する前に、自分の作業を適切な形で取得し、ローカルでコミットする必要があります。これにより、競合が発生した場合でも問題が発生しません。&lt;a href=&quot;git-stash&quot;&gt;git-stash [1]&lt;/a&gt;も参照してください。ローカルのコミットされていない変更が、 &lt;code&gt;git pull&lt;/code&gt; / &lt;code&gt;git merge&lt;/code&gt; が更新する必要があるファイルと重複する場合、 &lt;code&gt;git pull&lt;/code&gt; と &lt;code&gt;git merge&lt;/code&gt; は何もせずに停止します。</target>
        </trans-unit>
        <trans-unit id="5b4786a5cabe8cc8e9d6176c7a8f4c8ac1126f56" translate="yes" xml:space="preserve">
          <source>Before creating any commits, you should introduce yourself to Git. The easiest way to do so is to use &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;:</source>
          <target state="translated">コミットを作成する前に、Gitを紹介する必要があります。これを行う最も簡単な方法は、&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="0407957d0e82cce71a4172b7606149052dc8e0c6" translate="yes" xml:space="preserve">
          <source>Before each ref is updated, if $GIT_DIR/hooks/update file exists and is executable, it is invoked once per ref, with three parameters:</source>
          <target state="translated">各 ref が更新される前に、$GIT_DIR/hooks/update ファイルが存在し、実行可能であれば、3 つのパラメータを指定して、1 つの ref ごとに 1 回呼び出されます。</target>
        </trans-unit>
        <trans-unit id="19ac0c97c048cb907215a798a4fb3cdaff4d9a6f" translate="yes" xml:space="preserve">
          <source>Before fetching, remove any local tags that no longer exist on the remote if &lt;code&gt;--prune&lt;/code&gt; is enabled. This option should be used more carefully, unlike &lt;code&gt;--prune&lt;/code&gt; it will remove any local references (local tags) that have been created. This option is a shorthand for providing the explicit tag refspec along with &lt;code&gt;--prune&lt;/code&gt;, see the discussion about that in its documentation.</source>
          <target state="translated">&lt;code&gt;--prune&lt;/code&gt; が有効になっている場合は、フェッチする前に、リモートに存在しないローカルタグをすべて削除してください。 &lt;code&gt;--prune&lt;/code&gt; とは異なり、このオプションはより慎重に使用する必要があります。作成されたローカル参照（ローカルタグ）は削除されます。このオプションは、一緒に明示的なタグrefspecを提供するための速記である &lt;code&gt;--prune&lt;/code&gt; 、そのドキュメントでそのことについての議論を参照してください。</target>
        </trans-unit>
        <trans-unit id="8e73bf59416129baf4984229453394f0315b226d" translate="yes" xml:space="preserve">
          <source>Before fetching, remove any remote-tracking references that no longer exist on the remote. Tags are not subject to pruning if they are fetched only because of the default tag auto-following or due to a --tags option. However, if tags are fetched due to an explicit refspec (either on the command line or in the remote configuration, for example if the remote was cloned with the --mirror option), then they are also subject to pruning. Supplying &lt;code&gt;--prune-tags&lt;/code&gt; is a shorthand for providing the tag refspec.</source>
          <target state="translated">フェッチする前に、リモートに存在しなくなったリモート追跡参照を削除してください。デフォルトのタグの自動フォローまたは--tagsオプションが原因でタグがフェッチされた場合、タグはプルーニングの対象になりません。ただし、明示的なrefspecによってタグがフェッチされた場合（コマンドラインまたはリモート構成で、たとえば、リモートが--mirrorオプションで複製された場合など）、タグもプルーニングの対象になります。供給 &lt;code&gt;--prune-tags&lt;/code&gt; タグrefspecを提供するための省略形です。</target>
        </trans-unit>
        <trans-unit id="0a0fe23adf5213b01d47b6f6f762c51483096baa" translate="yes" xml:space="preserve">
          <source>Before making a commit out of staged contents so far, stage the contents of paths given on the command line as well. This is usually not what you want unless you are concluding a conflicted merge.</source>
          <target state="translated">これまでにステージされた内容をコミットする前に、コマンドラインで与えられたパスの内容もステージさせてください。これは、競合するマージの結論を出している場合を除いては、通常は望んでいないことです。</target>
        </trans-unit>
        <trans-unit id="c77aea15ac35dd0f59cc96b6055cd1857904fd59" translate="yes" xml:space="preserve">
          <source>Before moving the index into its final destination create an empty .keep file for the associated pack file. This option is usually necessary with --stdin to prevent a simultaneous &lt;code&gt;git repack&lt;/code&gt; process from deleting the newly constructed pack and index before refs can be updated to use objects contained in the pack.</source>
          <target state="translated">インデックスを最終的な宛先に移動する前に、関連するパックファイル用の空の.keepファイルを作成します。このオプションは通常、-stdinとともに使用して、同時 &lt;code&gt;git repack&lt;/code&gt; プロセスが、パックに含まれるオブジェクトを使用するように参照を更新する前に、新しく構築されたパックとインデックスを削除しないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="1684b3761b33822ae0ce64e85db5417e09a004a4" translate="yes" xml:space="preserve">
          <source>Before opening a compose window, use Edit&amp;rarr;Account Settings to uncheck the &quot;Compose messages in HTML format&quot; setting in the &quot;Composition &amp;amp; Addressing&quot; panel of the account to be used to send the patch.</source>
          <target state="translated">作成ウィンドウを開く前に、[編集]&amp;rarr;[アカウント設定]を使用して、パッチの送信に使用するアカウントの[構成とアドレス指定]パネルの[HTML形式でメッセージを作成]設定をオフにします。</target>
        </trans-unit>
        <trans-unit id="4236fe92cbd33fabad183244090db7c652c48ab2" translate="yes" xml:space="preserve">
          <source>Before processing any input, load the marks specified in &amp;lt;file&amp;gt;. The input file must exist, must be readable, and must use the same format as produced by --export-marks.</source>
          <target state="translated">入力を処理する前に、&amp;lt;file&amp;gt;で指定されたマークをロードします。入力ファイルは存在し、読み取り可能で、-export-marksによって生成されるのと同じ形式を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="293840b5790c8dfe363015950d52920cf320165c" translate="yes" xml:space="preserve">
          <source>Before processing any input, load the marks specified in &amp;lt;file&amp;gt;. The input file must exist, must be readable, and must use the same format as produced by --export-marks. Multiple options may be supplied to import more than one set of marks. If a mark is defined to different values, the last file wins.</source>
          <target state="translated">入力を処理する前に、&amp;lt;file&amp;gt;で指定されたマークをロードします。入力ファイルは存在し、読み取り可能で、-export-marksによって生成されるのと同じ形式を使用する必要があります。複数のマークセットをインポートするために、複数のオプションを指定できます。マークが異なる値に定義されている場合、最後のファイルが優先されます。</target>
        </trans-unit>
        <trans-unit id="6ec1c5712ad3f679b2da84284672de74a981a5d9" translate="yes" xml:space="preserve">
          <source>Before sourcing it, your script should set up a few variables; &lt;code&gt;USAGE&lt;/code&gt; (and &lt;code&gt;LONG_USAGE&lt;/code&gt;, if any) is used to define message given by &lt;code&gt;usage()&lt;/code&gt; shell function. &lt;code&gt;SUBDIRECTORY_OK&lt;/code&gt; can be set if the script can run from a subdirectory of the working tree (some commands do not).</source>
          <target state="translated">ソースを作成する前に、スクリプトでいくつかの変数を設定する必要があります。 &lt;code&gt;USAGE&lt;/code&gt; （および &lt;code&gt;LONG_USAGE&lt;/code&gt; する場合はLONG_USAGE）は、 &lt;code&gt;usage()&lt;/code&gt; シェル関数によって提供されるメッセージを定義するために使用されます。作業ツリーのサブディレクトリからスクリプトを実行できる場合は、 &lt;code&gt;SUBDIRECTORY_OK&lt;/code&gt; を設定できます（一部のコマンドでは実行できません）。</target>
        </trans-unit>
        <trans-unit id="c54227fb5e450fcf91fd096bb9f0a84e555b6148" translate="yes" xml:space="preserve">
          <source>Before starting rebase, stash local modifications away (see &lt;a href=&quot;git-stash&quot;&gt;git-stash[1]&lt;/a&gt;) if needed, and apply the stash entry when done. &lt;code&gt;--no-autostash&lt;/code&gt; is useful to override the &lt;code&gt;rebase.autoStash&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">リベースを開始する前に、必要に応じてローカルの変更を隠しておき（&lt;a href=&quot;git-stash&quot;&gt;git-stash [1]を&lt;/a&gt;参照）、完了したらstashエントリを適用します。 &lt;code&gt;--no-autostash&lt;/code&gt; は、 &lt;code&gt;rebase.autoStash&lt;/code&gt; 構成変数をオーバーライドするのに役立ちます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="20a98eb8f5ae5eb6921d2e55163fa9540eded227" translate="yes" xml:space="preserve">
          <source>Before starting, verify that there is corruption, and figure out where it is with &lt;a href=&quot;git-fsck&quot;&gt;git-fsck[1]&lt;/a&gt;; this may be time-consuming.</source>
          <target state="translated">開始する前に、破損があることを確認し、それが&lt;a href=&quot;git-fsck&quot;&gt;git-fsck [1]&lt;/a&gt;でどこにあるかを把握します。これには時間がかかる場合があります。</target>
        </trans-unit>
        <trans-unit id="197ebbc21bdf962ed1c382324d4f3dcec04005ba" translate="yes" xml:space="preserve">
          <source>Before the colon may be anything that names a commit, and after it may be any path to a file tracked by Git.</source>
          <target state="translated">コロンの前にはコミット名を、後には Git で追跡したファイルへのパスを指定します。</target>
        </trans-unit>
        <trans-unit id="0b4c2c97b5d492d26987ff45d09af0bb0c545781" translate="yes" xml:space="preserve">
          <source>Behave as if &lt;code&gt;git rev-parse&lt;/code&gt; was invoked from the &lt;code&gt;&amp;lt;arg&amp;gt;&lt;/code&gt; subdirectory of the working tree. Any relative filenames are resolved as if they are prefixed by &lt;code&gt;&amp;lt;arg&amp;gt;&lt;/code&gt; and will be printed in that form.</source>
          <target state="translated">&lt;code&gt;git rev-parse&lt;/code&gt; が作業ツリーの &lt;code&gt;&amp;lt;arg&amp;gt;&lt;/code&gt; サブディレクトリから呼び出されたかのように動作します。相対ファイル名は、 &lt;code&gt;&amp;lt;arg&amp;gt;&lt;/code&gt; が前に付いているかのように解決され、その形式で印刷されます。</target>
        </trans-unit>
        <trans-unit id="d02e70ae5f9ffc8904b317a23e079b2151794572" translate="yes" xml:space="preserve">
          <source>Behave as normal citool, but instead of making a commit simply terminate with a zero exit code. It still checks that the index does not contain any unmerged entries, so you can use it as a GUI version of &lt;a href=&quot;git-mergetool&quot;&gt;git-mergetool[1]&lt;/a&gt;</source>
          <target state="translated">通常のcitoolと同じように動作しますが、コミットを実行する代わりに、ゼロの終了コードで終了します。それでも、インデックスにマージされていないエントリが含まれていないことを確認するため、&lt;a href=&quot;git-mergetool&quot;&gt;git-mergetool [1]の&lt;/a&gt; GUIバージョンとして使用できます。</target>
        </trans-unit>
        <trans-unit id="1e338425ed36637ba6fc8582364ec79dbafaa8d3" translate="yes" xml:space="preserve">
          <source>Behavioral differences</source>
          <target state="translated">行動の違い</target>
        </trans-unit>
        <trans-unit id="f0f0d8dfa2a076d1fea883054912f530ebc927c2" translate="yes" xml:space="preserve">
          <source>Besides blobs, trees, and commits, the only remaining type of object is a &quot;tag&quot;, which we won&amp;rsquo;t discuss here; refer to &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt; for details.</source>
          <target state="translated">blob、tree、commitの他に、残っているオブジェクトのタイプは「タグ」だけです。ここでは説明しません。参照&lt;a href=&quot;git-tag&quot;&gt;のgitタグ[1]&lt;/a&gt;詳細については。</target>
        </trans-unit>
        <trans-unit id="6077f120aaceb5046721fb58c100f8432db9b449" translate="yes" xml:space="preserve">
          <source>Besides specifying a range of commits that should be listed using the special notations explained in the description, additional commit limiting may be applied.</source>
          <target state="translated">この説明で説明した特別な記法を用いて一覧表示すべきコミットの範囲を指定することに加えて、追加のコミット制限を適用することができます。</target>
        </trans-unit>
        <trans-unit id="5d284c47fc77be8e46a6b104d3f25aff12fd50b7" translate="yes" xml:space="preserve">
          <source>Best bisecting practices</source>
          <target state="translated">最適な二分法の実践</target>
        </trans-unit>
        <trans-unit id="6bc3ae89d4cbb3ba42878fb25652862ae42aa5fe" translate="yes" xml:space="preserve">
          <source>Beware that the default for &lt;code&gt;git send-email&lt;/code&gt; is to thread emails itself. If you want &lt;code&gt;git format-patch&lt;/code&gt; to take care of threading, you will want to ensure that threading is disabled for &lt;code&gt;git send-email&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git send-email&lt;/code&gt; のデフォルトはメール自体をスレッド化することに注意してください。あなたがしたい場合は &lt;code&gt;git format-patch&lt;/code&gt; スレッドの世話をするために、あなたはそのスレッドが無効になっていることを確認したいと思うでしょう &lt;code&gt;git send-email&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="945fefcb0d1953c9bddf033fe3e99288cf86cd4d" translate="yes" xml:space="preserve">
          <source>Bidirectional operation between a Subversion repository and Git</source>
          <target state="translated">Subversion リポジトリと Git との間で双方向の操作を行う</target>
        </trans-unit>
        <trans-unit id="6f22ed9717123d2ce9d3d667f975fb97ec48ef54" translate="yes" xml:space="preserve">
          <source>Binary files are searched as well.</source>
          <target state="translated">バイナリファイルも検索されます。</target>
        </trans-unit>
        <trans-unit id="8e08702a04bb0e3631c0db1c03ac41d9b78e02c9" translate="yes" xml:space="preserve">
          <source>Bisect log and bisect replay</source>
          <target state="translated">バイセクトログとバイセクトリプレイ</target>
        </trans-unit>
        <trans-unit id="caafd94a0cc48f8af98290661863ae3463dcd188" translate="yes" xml:space="preserve">
          <source>Bisect reset</source>
          <target state="translated">バイセクトリセット</target>
        </trans-unit>
        <trans-unit id="cfe9732e61ea56b98e10d88f828ff42f6e52d08e" translate="yes" xml:space="preserve">
          <source>Bisect run</source>
          <target state="translated">バイセクトラン</target>
        </trans-unit>
        <trans-unit id="e7eb00dc48d63079c3871fc0a679fc1160511d2f" translate="yes" xml:space="preserve">
          <source>Bisect skip</source>
          <target state="translated">ビセクトスキップ</target>
        </trans-unit>
        <trans-unit id="5887bb0558b5608c8166ca0492b459bf81b4ac9e" translate="yes" xml:space="preserve">
          <source>Bisect visualize/view</source>
          <target state="translated">ビジュアライズ/ビュー</target>
        </trans-unit>
        <trans-unit id="5adebf631a26d512accb5dd4088829dcb8650be4" translate="yes" xml:space="preserve">
          <source>Bisecting between Z and D* would hit a single culprit commit Y*, and understanding why Y* was broken would probably be easier.</source>
          <target state="translated">ZとD*の間の二分法は、単一の犯人コミットY*を打つだろうし、Y*が壊れた理由を理解することはおそらく簡単だろう。</target>
        </trans-unit>
        <trans-unit id="e52337c43cc4b33ac0d524be43e0ee7aabfe896f" translate="yes" xml:space="preserve">
          <source>Bisecting build failures</source>
          <target state="translated">ビルドの失敗を二分する</target>
        </trans-unit>
        <trans-unit id="247595ab20eacd2b287d2671e0cd44ffe5d63f96" translate="yes" xml:space="preserve">
          <source>Bisecting sporadic bugs</source>
          <target state="translated">散発的なバグを二分する</target>
        </trans-unit>
        <trans-unit id="c849a8d6d5f17f13126d2a3ffa47e78949cbd571" translate="yes" xml:space="preserve">
          <source>Bisection Helpers</source>
          <target state="translated">ビセクションヘルパー</target>
        </trans-unit>
        <trans-unit id="81ab75db6833dc6c35d461635f7c0fa8e4339b5c" translate="yes" xml:space="preserve">
          <source>Bisection algorithm</source>
          <target state="translated">二分法</target>
        </trans-unit>
        <trans-unit id="1073b9bc85c670179e7dcf4cfd5cd0b022c46d78" translate="yes" xml:space="preserve">
          <source>Bisection algorithm debugging</source>
          <target state="translated">二分法アルゴリズムデバッグ</target>
        </trans-unit>
        <trans-unit id="2146a76855ff13537405bb4dc1d3e621b6d2530e" translate="yes" xml:space="preserve">
          <source>Bisection algorithm discussed</source>
          <target state="translated">議論されている二分法アルゴリズム</target>
        </trans-unit>
        <trans-unit id="3e65a55a7b3fcaab5f39381d806f63fcab2ecabb" translate="yes" xml:space="preserve">
          <source>BitKeeper/cvsps speak for &quot;&lt;a href=&quot;#def_commit&quot;&gt;commit&lt;/a&gt;&quot;. Since Git does not store changes, but states, it really does not make sense to use the term &quot;changesets&quot; with Git.</source>
          <target state="translated">BitKeeper / cvspsは「&lt;a href=&quot;#def_commit&quot;&gt;コミット&lt;/a&gt;」を代弁します。Gitは変更を保存せずに状態を保存するので、Gitで「変更セット」という用語を使用しても意味がありません。</target>
        </trans-unit>
        <trans-unit id="57bd2a9f31bd11a6f563b358aadd2a286592b86a" translate="yes" xml:space="preserve">
          <source>Blank lines are ignored, and lines that don&amp;rsquo;t match this specification are used as option group headers (start the line with a space to create such lines on purpose).</source>
          <target state="translated">空白行は無視され、この仕様に一致しない行はオプショングループヘッダーとして使用されます（そのような行を意図的に作成するには、行をスペースで始めます）。</target>
        </trans-unit>
        <trans-unit id="5327cbfdb1bf8f5a47bca233a1bde391d44b215a" translate="yes" xml:space="preserve">
          <source>Blank lines are ignored, so they can be used as separators for readability.</source>
          <target state="translated">空白行は無視されるので、読みやすさのための区切り文字として使うことができます。</target>
        </trans-unit>
        <trans-unit id="d7077b7354ef7afaa6b1de41b77813742be4c707" translate="yes" xml:space="preserve">
          <source>Blob Object</source>
          <target state="translated">ブロブオブジェクト</target>
        </trans-unit>
        <trans-unit id="f04feb5337017d625e39e5a69c692bf6273fb704" translate="yes" xml:space="preserve">
          <source>Blocks of moved text are detected as in &lt;code&gt;blocks&lt;/code&gt; mode. The blocks are painted using either the &lt;code&gt;color.diff.{old,new}Moved&lt;/code&gt; color or &lt;code&gt;color.diff.{old,new}MovedAlternative&lt;/code&gt;. The change between the two colors indicates that a new block was detected.</source>
          <target state="translated">移動したテキストのブロックは、 &lt;code&gt;blocks&lt;/code&gt; モードと同様に検出されます。ブロックは、 &lt;code&gt;color.diff.{old,new}Moved&lt;/code&gt; colorまたは &lt;code&gt;color.diff.{old,new}MovedAlternative&lt;/code&gt; いずれかを使用してペイントされます。2つの色の変化は、新しいブロックが検出されたことを示します。</target>
        </trans-unit>
        <trans-unit id="f42755e1f80735be0fde7ac7e2cbeb956df2c96e" translate="yes" xml:space="preserve">
          <source>Blocks of moved text of at least 20 alphanumeric characters are detected greedily. The detected blocks are painted using either the &lt;code&gt;color.diff.{old,new}Moved&lt;/code&gt; color. Adjacent blocks cannot be told apart.</source>
          <target state="translated">少なくとも20文字の英数字の移動テキストのブロックが貪欲に検出されます。検出されたブロックは、 &lt;code&gt;color.diff.{old,new}Moved&lt;/code&gt; color を使用してペイントされます。隣接するブロックを区別することはできません。</target>
        </trans-unit>
        <trans-unit id="66547f4a0e63cd4ad00756855db6ddba1142e4d3" translate="yes" xml:space="preserve">
          <source>Bob begins with:</source>
          <target state="translated">ボブから始まります。</target>
        </trans-unit>
        <trans-unit id="bcf42567e6f70a4579bf8687eb5f4e62c5870c89" translate="yes" xml:space="preserve">
          <source>Bob then makes some changes and commits them:</source>
          <target state="translated">ボブはその後、いくつかの変更を加えてコミットします。</target>
        </trans-unit>
        <trans-unit id="d0685c88b15694d30796d8493ed6c8ce3e6b4b74" translate="yes" xml:space="preserve">
          <source>Boolean false literals are &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; and the empty string.</source>
          <target state="translated">ブール値の偽リテラルは、 &lt;code&gt;no&lt;/code&gt; 、 &lt;code&gt;off&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; および空の文字列です。</target>
        </trans-unit>
        <trans-unit id="c8e93181a2c2334cd611c796a9d2346e913aadda" translate="yes" xml:space="preserve">
          <source>Boolean true literals are &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;on&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, and &lt;code&gt;1&lt;/code&gt;. Also, a variable defined without &lt;code&gt;= &amp;lt;value&amp;gt;&lt;/code&gt; is taken as true.</source>
          <target state="translated">ブールtrueリテラルは、 &lt;code&gt;yes&lt;/code&gt; 、 &lt;code&gt;on&lt;/code&gt; 、 &lt;code&gt;true&lt;/code&gt; 、および &lt;code&gt;1&lt;/code&gt; です。また、 &lt;code&gt;= &amp;lt;value&amp;gt;&lt;/code&gt; なしで定義された変数はtrueと見なされます。</target>
        </trans-unit>
        <trans-unit id="f03ce708ae8563bbe292f147105bcbebd35fdd1f" translate="yes" xml:space="preserve">
          <source>Boolean value indicating if the submodule is of interest to git commands. This config option takes precedence over the submodule.active config option. See &lt;a href=&quot;gitsubmodules&quot;&gt;gitsubmodules[7]&lt;/a&gt; for details.</source>
          <target state="translated">サブモジュールがgitコマンドの対象であるかどうかを示すブール値。この構成オプションは、submodule.active構成オプションよりも優先されます。詳細については、&lt;a href=&quot;gitsubmodules&quot;&gt;gitsubmodules [7]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="40de397dbe4a181644b13a510b500ba0dfa90dc8" translate="yes" xml:space="preserve">
          <source>Boolean variable which defines if large files are automatically pushed to a server.</source>
          <target state="translated">大きなファイルを自動的にサーバにプッシュするかどうかを定義するブール値。</target>
        </trans-unit>
        <trans-unit id="edb8137a3de82e7f1ab7c05bad252ac0da09a46a" translate="yes" xml:space="preserve">
          <source>Boolean. When true &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;filename&lt;/code&gt;, and &lt;code&gt;line&lt;/code&gt; fields are omitted from PERF output. May be overridden by the &lt;code&gt;GIT_TRACE2_PERF_BRIEF&lt;/code&gt; environment variable. Defaults to false.</source>
          <target state="translated">ブール。true &lt;code&gt;time&lt;/code&gt; 、 &lt;code&gt;filename&lt;/code&gt; 、および &lt;code&gt;line&lt;/code&gt; フィールドは、PERF出力から省略されます。 &lt;code&gt;GIT_TRACE2_PERF_BRIEF&lt;/code&gt; 環境変数によってオーバーライドされる場合があります。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="e7da8527471f3ea2c3faf910dfb4b6accdd8c262" translate="yes" xml:space="preserve">
          <source>Boolean. When true &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;filename&lt;/code&gt;, and &lt;code&gt;line&lt;/code&gt; fields are omitted from event output. May be overridden by the &lt;code&gt;GIT_TRACE2_EVENT_BRIEF&lt;/code&gt; environment variable. Defaults to false.</source>
          <target state="translated">ブール。true &lt;code&gt;time&lt;/code&gt; 、 &lt;code&gt;filename&lt;/code&gt; 、および &lt;code&gt;line&lt;/code&gt; フィールドは、イベント出力から省略されます。 &lt;code&gt;GIT_TRACE2_EVENT_BRIEF&lt;/code&gt; 環境変数によってオーバーライドされる場合があります。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="d6cb13ebbd3c085c01cd755d0c697831e337b51f" translate="yes" xml:space="preserve">
          <source>Boolean. When true &lt;code&gt;time&lt;/code&gt;, &lt;code&gt;filename&lt;/code&gt;, and &lt;code&gt;line&lt;/code&gt; fields are omitted from normal output. May be overridden by the &lt;code&gt;GIT_TRACE2_BRIEF&lt;/code&gt; environment variable. Defaults to false.</source>
          <target state="translated">ブール。true &lt;code&gt;time&lt;/code&gt; 、 &lt;code&gt;filename&lt;/code&gt; 、および &lt;code&gt;line&lt;/code&gt; フィールドは、通常の出力から省略されます。 &lt;code&gt;GIT_TRACE2_BRIEF&lt;/code&gt; 環境変数によってオーバーライドされる場合があります。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="2c3dcfd71724f2fb257997b8beb70ed9ac8363b1" translate="yes" xml:space="preserve">
          <source>Boolean. When true Git will print error messages when a trace target destination cannot be opened for writing. By default, these errors are suppressed and tracing is silently disabled. May be overridden by the &lt;code&gt;GIT_TRACE2_DST_DEBUG&lt;/code&gt; environment variable.</source>
          <target state="translated">ブール。trueの場合、トレースターゲットの宛先を書き込み用に開くことができない場合、Gitはエラーメッセージを出力します。デフォルトでは、これらのエラーは抑制され、トレースはサイレントに無効になります。 &lt;code&gt;GIT_TRACE2_DST_DEBUG&lt;/code&gt; 環境変数によってオーバーライドされる場合があります。</target>
        </trans-unit>
        <trans-unit id="e5522e55cd06bc09c2f312c8e91e3e9369d6fed7" translate="yes" xml:space="preserve">
          <source>Borrow the objects from reference repositories specified with the &lt;code&gt;--reference&lt;/code&gt; options only to reduce network transfer, and stop borrowing from them after a clone is made by making necessary local copies of borrowed objects. This option can also be used when cloning locally from a repository that already borrows objects from another repository&amp;mdash;​the new repository will borrow objects from the same repository, and this option can be used to stop the borrowing.</source>
          <target state="translated">&lt;code&gt;--reference&lt;/code&gt; オプションで指定された参照リポジトリからオブジェクトを借用して、ネットワーク転送を削減し、借用オブジェクトの必要なローカルコピーを作成してクローンが作成された後に、オブジェクトからの借用を停止します。このオプションは、すでに別のリポジトリからオブジェクトを借用しているリポジトリからローカルにクローンを作成するときにも使用できます。新しいリポジトリは同じリポジトリからオブジェクトを借用し、このオプションを使用して借用を停止できます。</target>
        </trans-unit>
        <trans-unit id="5694355a4e9f21af75bfd457be1c695646467936" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;--cacheinfo&lt;/code&gt; and &lt;code&gt;--info-only&lt;/code&gt; behave similarly: the index is updated but the object database isn&amp;rsquo;t. &lt;code&gt;--cacheinfo&lt;/code&gt; is useful when the object is in the database but the file isn&amp;rsquo;t available locally. &lt;code&gt;--info-only&lt;/code&gt; is useful when the file is available, but you do not wish to update the object database.</source>
          <target state="translated">&lt;code&gt;--cacheinfo&lt;/code&gt; と &lt;code&gt;--info-only&lt;/code&gt; はどちらも同様に動作します。インデックスは更新されますが、オブジェクトデータベースは更新されません。 &lt;code&gt;--cacheinfo&lt;/code&gt; は、オブジェクトがデータベース内にあるが、ファイルがローカルで利用できない場合に役立ちます。 &lt;code&gt;--info-only&lt;/code&gt; は、ファイルが使用可能であるがオブジェクトデータベースを更新したくない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="210e82ac599d9d8944e3c5eb9d03d4a4abcf7207" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;plink&lt;/code&gt; and &lt;code&gt;alink&lt;/code&gt; point outside the tree, so they would respectively print:</source>
          <target state="translated">&lt;code&gt;plink&lt;/code&gt; と &lt;code&gt;alink&lt;/code&gt; はどちらもツリーの外側を指しているため、それぞれ次のように出力されます。</target>
        </trans-unit>
        <trans-unit id="9a953a9b4782d5c56832edbe239c8ec4aaa470f8" translate="yes" xml:space="preserve">
          <source>Both fixes are tested well, and at this point, you want to merge in both of them. You could merge in &lt;code&gt;diff-fix&lt;/code&gt; first and then &lt;code&gt;commit-fix&lt;/code&gt; next, like this:</source>
          <target state="translated">両方の修正は十分にテストされており、この時点で、両方にマージする必要があります。次のように、最初に &lt;code&gt;diff-fix&lt;/code&gt; をマージしてから、次に &lt;code&gt;commit-fix&lt;/code&gt; をマージできます。</target>
        </trans-unit>
        <trans-unit id="9af6db9f29dd4e151f33497260a5a0b8ba4e0513" translate="yes" xml:space="preserve">
          <source>Both ofs-delta and ref-delta store the &quot;delta&quot; to be applied to another object (called &lt;code&gt;base object&lt;/code&gt;) to reconstruct the object. The difference between them is, ref-delta directly encodes 20-byte base object name. If the base object is in the same pack, ofs-delta encodes the offset of the base object in the pack instead.</source>
          <target state="translated">ofs-deltaとref-deltaはどちらも、別のオブジェクト（ &lt;code&gt;base object&lt;/code&gt; と呼ばれる）に適用される「デルタ」を格納して、オブジェクトを再構築します。それらの違いは、ref-deltaが20バイトの基本オブジェクト名を直接エンコードすることです。ベースオブジェクトが同じパックにある場合、ofs-deltaは代わりにパックのベースオブジェクトのオフセットをエンコードします。</target>
        </trans-unit>
        <trans-unit id="b68fc1d55d49e0827f78d9949a9c5a2eecaf05eb" translate="yes" xml:space="preserve">
          <source>Both settings can be overridden on the command line by using the &quot;--ignore-submodules&quot; option. The &lt;code&gt;git submodule&lt;/code&gt; commands are not affected by this setting.</source>
          <target state="translated">両方の設定は、「-ignore-submodules」オプションを使用してコマンドラインで上書きできます。 &lt;code&gt;git submodule&lt;/code&gt; コマンドは、この設定の影響を受けません。</target>
        </trans-unit>
        <trans-unit id="2bb1e035fa86f5b4222d3ab1eb33c1658eed9a23" translate="yes" xml:space="preserve">
          <source>Both standard output and standard error output are forwarded to &lt;code&gt;git send-pack&lt;/code&gt; on the other end, so you can simply &lt;code&gt;echo&lt;/code&gt; messages for the user.</source>
          <target state="translated">標準出力と標準エラー出力の両方が相手側の &lt;code&gt;git send-pack&lt;/code&gt; に転送されるため、ユーザーにメッセージを &lt;code&gt;echo&lt;/code&gt; することができます。</target>
        </trans-unit>
        <trans-unit id="7c76084a5f517b3242aa149971fbcce3ceb62c61" translate="yes" xml:space="preserve">
          <source>Both the &amp;lt;eolinfo&amp;gt; in the index (&quot;i/&amp;lt;eolinfo&amp;gt;&quot;) and in the working tree (&quot;w/&amp;lt;eolinfo&amp;gt;&quot;) are shown for regular files, followed by the (&quot;attr/&amp;lt;eolattr&amp;gt;&quot;).</source>
          <target state="translated">インデックス（ &quot;i / &amp;lt;eolinfo&amp;gt;&quot;）と作業ツリー（ &quot;w / &amp;lt;eolinfo&amp;gt;&quot;）の両方の&amp;lt;eolinfo&amp;gt;が通常のファイルに対して表示され、その後に（ &quot;attr / &amp;lt;eolattr&amp;gt;&quot;）が表示されます。</target>
        </trans-unit>
        <trans-unit id="c634179a023801afb75e60cfb7d88f35c1e83a21" translate="yes" xml:space="preserve">
          <source>Both the symlink &amp;amp; realpath versions of paths will be matched outside of &lt;code&gt;$GIT_DIR&lt;/code&gt;. E.g. if ~/git is a symlink to /mnt/storage/git, both &lt;code&gt;gitdir:~/git&lt;/code&gt; and &lt;code&gt;gitdir:/mnt/storage/git&lt;/code&gt; will match.</source>
          <target state="translated">パスのシンボリックリンクと &lt;code&gt;$GIT_DIR&lt;/code&gt; パスバージョンの両方が$ GIT_DIR外で一致します。たとえば〜/ gitが/ mnt / storage / gitへのシンボリックリンクである場合、 &lt;code&gt;gitdir:~/git&lt;/code&gt; と &lt;code&gt;gitdir:/mnt/storage/git&lt;/code&gt; の両方が一致します。</target>
        </trans-unit>
        <trans-unit id="fb26b800dd56fd61a55a4281547b9e60ac65a113" translate="yes" xml:space="preserve">
          <source>Branch Headers</source>
          <target state="translated">ブランチヘッダ</target>
        </trans-unit>
        <trans-unit id="6e15a503d2a4c17b67a8c3c7f34c58a07a49a276" translate="yes" xml:space="preserve">
          <source>Branch description, can be edited with &lt;code&gt;git branch --edit-description&lt;/code&gt;. Branch description is automatically added in the format-patch cover letter or request-pull summary.</source>
          <target state="translated">ブランチの説明 &lt;code&gt;git branch --edit-description&lt;/code&gt; で編集できます。ブランチの説明は、フォーマットパッチカバーレターまたはリクエストプルサマリーに自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="5bec4527e15afa13a84c736e3c723988984e6324" translate="yes" xml:space="preserve">
          <source>Branch detection</source>
          <target state="translated">分岐検出</target>
        </trans-unit>
        <trans-unit id="f63ceca75fd06c6b871dea1a79cac70839c63882" translate="yes" xml:space="preserve">
          <source>Branch management for a release</source>
          <target state="translated">リリースに向けたブランチ管理</target>
        </trans-unit>
        <trans-unit id="50637014a89740451f5074b5c0e9645bb5f5e1e3" translate="yes" xml:space="preserve">
          <source>Branch management for next and pu after a feature release</source>
          <target state="translated">フィーチャーリリース後のネクストとプのブランチ管理</target>
        </trans-unit>
        <trans-unit id="cbca9c5458a752e67c3b22c7754c8dd03612ff9c" translate="yes" xml:space="preserve">
          <source>Branch of repository to add as submodule. The name of the branch is recorded as &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; in &lt;code&gt;.gitmodules&lt;/code&gt; for &lt;code&gt;update --remote&lt;/code&gt;. A special value of &lt;code&gt;.&lt;/code&gt; is used to indicate that the name of the branch in the submodule should be the same name as the current branch in the current repository. If the option is not specified, it defaults to &lt;code&gt;master&lt;/code&gt;.</source>
          <target state="translated">サブモジュールとして追加するリポジトリのブランチ。ブランチの名前は次のように記録されている &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; で &lt;code&gt;.gitmodules&lt;/code&gt; 用 &lt;code&gt;update --remote&lt;/code&gt; 。特別な値 &lt;code&gt;.&lt;/code&gt; サブモジュールのブランチの名前が、現在のリポジトリの現在のブランチと同じ名前であることを示すために使用されます。このオプションが指定されていない場合、デフォルトで &lt;code&gt;master&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="e3db6088987588160d14194fc92edec728f16ab3" translate="yes" xml:space="preserve">
          <source>Branch off of a specific tag.</source>
          <target state="translated">特定のタグから分岐します。</target>
        </trans-unit>
        <trans-unit id="a41d6fc58b77cd15fdc95f9b8068f3bedb454bc6" translate="yes" xml:space="preserve">
          <source>Branch to checkout; if it refers to a branch (i.e., a name that, when prepended with &quot;refs/heads/&quot;, is a valid ref), then that branch is checked out. Otherwise, if it refers to a valid commit, your &lt;code&gt;HEAD&lt;/code&gt; becomes &quot;detached&quot; and you are no longer on any branch (see below for details).</source>
          <target state="translated">チェックアウトへの分岐。ブランチ（つまり、「refs / heads /」を前に付けたときに有効なリファレンスである名前）を参照している場合、そのブランチがチェックアウトされます。それ以外の場合、有効なコミットを参照していると、 &lt;code&gt;HEAD&lt;/code&gt; は「切り離され」、ブランチから外れます（詳細は以下を参照）。</target>
        </trans-unit>
        <trans-unit id="8b21526e9a7ba9f6110db09d1bb17e93bbda77fa" translate="yes" xml:space="preserve">
          <source>Branch to switch to.</source>
          <target state="translated">切り替えるブランチ。</target>
        </trans-unit>
        <trans-unit id="79cd2f09f7574ee3c255526cc9dfc53740a35d6b" translate="yes" xml:space="preserve">
          <source>Branch updates can be forced with --force, but it&amp;rsquo;s recommended that this only be used on an otherwise quiet repository. Using --force is not necessary for an initial import into an empty repository.</source>
          <target state="translated">ブランチの更新は--forceを使用して強制できますが、これは他の点では静かなリポジトリでのみ使用することをお勧めします。空のリポジトリへの最初のインポートでは、-forceを使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="e985dfb396afc27ce07bbb1b298aa21e35e0ea0d" translate="yes" xml:space="preserve">
          <source>Branches are cheap and easy, so this is a good way to try something out.</source>
          <target state="translated">枝は安くて手軽なので、何か試してみるにはいいかもしれません。</target>
        </trans-unit>
        <trans-unit id="879b754d99bf64defbd79d89d51b97c6e52dfbf4" translate="yes" xml:space="preserve">
          <source>Branches are classified as active and inactive. The memory usage of the two classes is significantly different.</source>
          <target state="translated">ブランチはアクティブとインアクティブに分類されます。この2つのクラスのメモリ使用量は大きく異なります。</target>
        </trans-unit>
        <trans-unit id="19038dfa38a59c4f1be05e3d92e0f1bca8b5557f" translate="yes" xml:space="preserve">
          <source>Branches in Git are really nothing more than pointers into the Git object database from within the &lt;code&gt;.git/refs/&lt;/code&gt; subdirectory, and as we already discussed, the &lt;code&gt;HEAD&lt;/code&gt; branch is nothing but a symlink to one of these object pointers.</source>
          <target state="translated">Gitのブランチは、実際には &lt;code&gt;.git/refs/&lt;/code&gt; サブディレクトリ内からGitオブジェクトデータベースへのポインターにすぎません。すでに説明したように、 &lt;code&gt;HEAD&lt;/code&gt; ブランチは、これらのオブジェクトポインターの1つへのシンボリックリンクにすぎません。</target>
        </trans-unit>
        <trans-unit id="125404877d39f029f0e27e0fb84f104c52bd667b" translate="yes" xml:space="preserve">
          <source>Branches on which no commits have been made are not imported.</source>
          <target state="translated">コミットが行われていないブランチはインポートされません。</target>
        </trans-unit>
        <trans-unit id="415a16be057cec5701bb9e0fd3bff5400f270979" translate="yes" xml:space="preserve">
          <source>Branches, remote-tracking branches, and tags are all references to commits. All references are named with a slash-separated path name starting with &lt;code&gt;refs&lt;/code&gt;; the names we&amp;rsquo;ve been using so far are actually shorthand:</source>
          <target state="translated">ブランチ、リモート追跡ブランチ、タグはすべてコミットへの参照です。すべての参照には、 &lt;code&gt;refs&lt;/code&gt; で始まるスラッシュで区切られたパス名が付けられます。これまで使用してきた名前は、実際には省略形です。</target>
        </trans-unit>
        <trans-unit id="b3d9b26ec0345692adbda512336186fddd0ce297" translate="yes" xml:space="preserve">
          <source>Branching and Merging</source>
          <target state="translated">分岐と合流</target>
        </trans-unit>
        <trans-unit id="15e01902c81d07c3b90042ff2531422b8b3d1b86" translate="yes" xml:space="preserve">
          <source>Break complete rewrite changes into pairs of delete and create. This serves two purposes:</source>
          <target state="translated">完全な書き換え変更を削除と作成のペアにブレークします。これは2つの目的を果たします。</target>
        </trans-unit>
        <trans-unit id="672fc0738ea8c1007bcaceee5284378a52766797" translate="yes" xml:space="preserve">
          <source>Browse the &lt;code&gt;modules&lt;/code&gt; available. It will give you a list of the heads in the repository. You will not be able to browse the tree from there. Only the heads.</source>
          <target state="translated">利用可能な &lt;code&gt;modules&lt;/code&gt; 閲覧します。リポジトリ内のヘッドのリストが表示されます。そこからツリーを閲覧することはできません。頭だけ。</target>
        </trans-unit>
        <trans-unit id="abb2e552cc2091e364809101c300cc4143caaa39" translate="yes" xml:space="preserve">
          <source>Browsing every revision of the repository.</source>
          <target state="translated">リポジトリのすべてのリビジョンを閲覧する</target>
        </trans-unit>
        <trans-unit id="f92f422e95f0fd94e3584d36660177eaf6c3a90d" translate="yes" xml:space="preserve">
          <source>Browsing revisions</source>
          <target state="translated">リビジョンの閲覧</target>
        </trans-unit>
        <trans-unit id="6d55509876929eae63b680c2015c0e8dcd714d8d" translate="yes" xml:space="preserve">
          <source>Buffering happens as documented under the &lt;code&gt;GIT_FLUSH&lt;/code&gt; option in &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt;. The caller is responsible for avoiding deadlocks caused by overfilling an input buffer or reading from an empty output buffer.</source>
          <target state="translated">バッファリングは、&lt;a href=&quot;git&quot;&gt;git [1]の&lt;/a&gt; &lt;code&gt;GIT_FLUSH&lt;/code&gt; オプションで説明されているように発生します。呼び出し元は、入力バッファーの過充填または空の出力バッファーからの読み取りによって引き起こされるデッドロックを回避する責任があります。</target>
        </trans-unit>
        <trans-unit id="c8eea1b80ba437eb2c7d9d8e4a7a1c0c36ddce4e" translate="yes" xml:space="preserve">
          <source>Bugs</source>
          <target state="translated">Bugs</target>
        </trans-unit>
        <trans-unit id="30410812dc9752c13886986132ffab9500651b55" translate="yes" xml:space="preserve">
          <source>Bugs in the implementation of overlap mappings exist. If multiple depot paths map through overlays to the same location in the repository, &lt;code&gt;git p4&lt;/code&gt; can choose the wrong one. This is hard to solve without dedicating a client spec just for &lt;code&gt;git p4&lt;/code&gt;.</source>
          <target state="translated">オーバーラップマッピングの実装にバグがあります。複数のデポパスがオーバーレイを介してリポジトリ内の同じ場所にマッピングされている場合、 &lt;code&gt;git p4&lt;/code&gt; が間違ったパスを選択する可能性があります。これは、 &lt;code&gt;git p4&lt;/code&gt; 専用のクライアント仕様を使わずに解決するのは困難です。</target>
        </trans-unit>
        <trans-unit id="8c875875a4eba5d2b4104ba5b53fe3484e74b27e" translate="yes" xml:space="preserve">
          <source>Build a tree-object from ls-tree formatted text</source>
          <target state="translated">ls-tree フォーマットされたテキストからツリーオブジェクトを構築する</target>
        </trans-unit>
        <trans-unit id="043dc36933914b47740e7f5065ce440656dbe0ca" translate="yes" xml:space="preserve">
          <source>Build pack index file for an existing packed archive</source>
          <target state="translated">既存のパックされたアーカイブのためのパックインデックスファイルをビルド</target>
        </trans-unit>
        <trans-unit id="8dd0ad60c49a72540d98588b5b0558fd314e85ee" translate="yes" xml:space="preserve">
          <source>Built-in 3-way merge driver is used to merge the contents in a way similar to &lt;code&gt;merge&lt;/code&gt; command of &lt;code&gt;RCS&lt;/code&gt; suite. This is suitable for ordinary text files.</source>
          <target state="translated">組み込みの3ウェイマージドライバーを使用して、 &lt;code&gt;RCS&lt;/code&gt; スイートの &lt;code&gt;merge&lt;/code&gt; コマンドと同様の方法でコンテンツをマージします。これは通常のテキストファイルに適しています。</target>
        </trans-unit>
        <trans-unit id="0829c07e98ca5098038c31cb2a5b51c3902a8814" translate="yes" xml:space="preserve">
          <source>Built-in merge drivers</source>
          <target state="translated">組み込みのマージドライバ</target>
        </trans-unit>
        <trans-unit id="fe507ac4ab5d31826c1b03d804bf3ff265bad65b" translate="yes" xml:space="preserve">
          <source>Bundling your work together</source>
          <target state="translated">仕事を一緒に束ねる</target>
        </trans-unit>
        <trans-unit id="25fde7a2ceaafceba047201a41d303d6c07bd23d" translate="yes" xml:space="preserve">
          <source>But BBChop is independent of any VCS and it would be easier for Git users to have something integrated in Git.</source>
          <target state="translated">しかし、BBChopはどのVCSからも独立しているので、Gitに統合されているものがあった方がGitユーザーにとっては楽なのではないでしょうか。</target>
        </trans-unit>
        <trans-unit id="f7eefc5fb4183d567fceb246626226ef9afb8bf2" translate="yes" xml:space="preserve">
          <source>But Ingo Molnar and H. Peter Anvin (another well known linux kernel developer) both complained that sometimes the best bisection points all happened to be in an area where all the commits are untestable. And in this case the user was asked to test many untestable commits, which could be very inefficient.</source>
          <target state="translated">しかし、Ingo Molnar と H.Peter Anvin (もう一人の有名な linux カーネル開発者)は、最高の二等分点がたまたますべてのコミットがテスト不可能な領域にあることに不満を持っていました。そして、この場合、ユーザは多くのテスト不可能なコミットをテストするように求められます。</target>
        </trans-unit>
        <trans-unit id="74140d3773084e209fc43c63f870a2ce5abd4ea1" translate="yes" xml:space="preserve">
          <source>But if you have pushed things out (or others could just read your repository directly), then others will have already seen the old tag. In that case you can do one of two things:</source>
          <target state="translated">しかし、もしあなたがプッシュアウトしている場合 (あるいは他の人があなたのリポジトリを直接読むことができる場合)、他の人はすでに古いタグを見てしまっているでしょう。その場合は、2つのうちの1つを行うことができます。</target>
        </trans-unit>
        <trans-unit id="66013f3cefed95fb73f834fded3820e6a1071c28" translate="yes" xml:space="preserve">
          <source>But if you try to push, you will attempt to update the branch (that now points at A) with commit B. This does &lt;code&gt;not&lt;/code&gt; fast-forward. If you did so, the changes introduced by commit A will be lost, because everybody will now start building on top of B.</source>
          <target state="translated">しかし、プッシュしようとすると、コミットBでブランチ（現在はAを指す）を更新しようとします。これは早送りしませ &lt;code&gt;not&lt;/code&gt; 。そうした場合、全員がBの上に構築を開始するため、コミットAによって導入された変更は失われます。</target>
        </trans-unit>
        <trans-unit id="fd8e45cbd58877735e25105978c0aca9791da6ee" translate="yes" xml:space="preserve">
          <source>But in some repository setups, you may have several related but separate groups of ref tips, with clients tending to fetch those groups independently. For example, imagine that you are hosting several &quot;forks&quot; of a repository in a single shared object store, and letting clients view them as separate repositories through &lt;code&gt;GIT_NAMESPACE&lt;/code&gt; or separate repos using the alternates mechanism. A naive repack may find that the optimal delta for an object is against a base that is only found in another fork. But when a client fetches, they will not have the base object, and we&amp;rsquo;ll have to find a new delta on the fly.</source>
          <target state="translated">しかし、一部のリポジトリ設定では、クライアントが個別にそれらのグループをフェッチする傾向がある、いくつかの関連するが別個の参照ヒントのグループがある場合があります。たとえば、単一の共有オブジェクトストアでリポジトリのいくつかの「フォーク」をホストし、クライアントが &lt;code&gt;GIT_NAMESPACE&lt;/code&gt; を介してそれらを別個のリポジトリとして、または代替メカニズムを使用して別個のリポジトリとして表示できるようにするとします。ナイーブなリパックでは、オブジェクトの最適なデルタが、別のフォークでのみ見つかるベースに反している場合があります。しかし、クライアントがフェッチするとき、それらには基本オブジェクトがなく、その場で新しいデルタを見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="a02a23b585c823168e0aade261aba54b02ee9df4" translate="yes" xml:space="preserve">
          <source>But now we can do</source>
          <target state="translated">でも今ならできる</target>
        </trans-unit>
        <trans-unit id="d83b34d996269d86f487bc1b1bf210759565be26" translate="yes" xml:space="preserve">
          <source>But the above ways to work around untestable areas are a little bit clunky. Using special branches is nice because these branches can be shared by developers like usual branches, but the risk is that people will get many such branches. And it disrupts the normal &quot;git bisect&quot; work-flow. So, if you want to use &quot;git bisect run&quot; completely automatically, you have to add special code in your script to restart bisection in the special branches.</source>
          <target state="translated">しかし、テスト不可能な領域を回避するための上記の方法は、少し不便です。特別なブランチを使うのは、通常のブランチのように開発者同士で共有することができるので良いことですが、そのリスクは多くの人がそのようなブランチを手に入れてしまうことになります。そして、通常の &quot;git bisect&quot; のワークフローを混乱させてしまいます。ですから、&quot;git bisect run&quot; を完全に自動的に使いたい場合は、特別なブランチで bisection を再開するための特別なコードをスクリプトに追加しなければなりません。</target>
        </trans-unit>
        <trans-unit id="d51bf10c62a548cc7f488f7d7c601612ef19bfbf" translate="yes" xml:space="preserve">
          <source>But there are other ways to refer to commits. You can use any initial part of the name that is long enough to uniquely identify the commit:</source>
          <target state="translated">しかし、コミットを参照する方法は他にもあります。コミットを一意に識別するのに十分な長さの名前の最初の部分を使うことができます。</target>
        </trans-unit>
        <trans-unit id="7cbb3ccd9eb2da169028fcad03ea4127b40731fc" translate="yes" xml:space="preserve">
          <source>But this is wrong because at step 1) a) we keep only the ancestors of the bad commit. So we get more information when a commit is marked as &quot;bad&quot;, because we also know that the ancestors of the previous &quot;bad&quot; commit that are not ancestors of the new &quot;bad&quot; commit are not the first bad commit. We don&amp;rsquo;t know if they are good or bad, but we know that they are not the first bad commit because they are not ancestor of the new &quot;bad&quot; commit.</source>
          <target state="translated">しかし、これは間違っています。なぜなら、ステップ1）a）では、不良コミットの祖先のみを保持しているからです。つまり、コミットが「不良」としてマークされている場合は、より多くの情報を取得します。これは、新しい「不良」コミットの祖先ではない前の「不良」コミットの祖先が最初の不良コミットではないこともわかっているためです。それらが良いか悪いかはわかりませんが、新しい「悪い」コミットの祖先ではないため、最初の悪いコミットではないことがわかります。</target>
        </trans-unit>
        <trans-unit id="e9cd8c15ffc7ac156f5f412fb85c3db80183014e" translate="yes" xml:space="preserve">
          <source>But we can guess that improving on existing software is very costly because you have to watch out for regressions. At least this would make the above studies consistent among themselves.</source>
          <target state="translated">しかし、既存のソフトウェアを改善することは、回帰に気をつけなければならないため、非常にコストがかかることが推測できます。少なくとも、これは上記の研究の間で一貫性を持たせることになるでしょう。</target>
        </trans-unit>
        <trans-unit id="01400b0b75aa93032834530c59a576c885a202c7" translate="yes" xml:space="preserve">
          <source>But what happens if the first bad commit is &quot;B&quot; and if it has been fixed in the &quot;main&quot; branch by commit &quot;F&quot;?</source>
          <target state="translated">しかし、最初の不良コミットが「B」で、それが「F」のコミットで「main」ブランチに修正されていた場合はどうなるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="2333cc37236068d07ee88795051fd2e9ba955821" translate="yes" xml:space="preserve">
          <source>But you can use &lt;code&gt;reset --keep&lt;/code&gt; to remove the unwanted commit after you switched to &lt;code&gt;branch2&lt;/code&gt;.</source>
          <target state="translated">しかし、あなたは使用することができます &lt;code&gt;reset --keep&lt;/code&gt; あなたに切り替わった後、不要なコミットを削除する &lt;code&gt;branch2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d0b3a86464faedd1c461b3e2ac63fc4ba06661b" translate="yes" xml:space="preserve">
          <source>But you decided that the topic branch is not ready for public consumption yet. &quot;pull&quot; or &quot;merge&quot; always leaves the original tip of the current branch in &lt;code&gt;ORIG_HEAD&lt;/code&gt;, so resetting hard to it brings your index file and the working tree back to that state, and resets the tip of the branch to that commit.</source>
          <target state="translated">しかし、トピックブランチはまだ一般消費の準備ができていないと判断しました。&quot;pull&quot;または &quot;merge&quot;は常に現在のブランチの元の先端を &lt;code&gt;ORIG_HEAD&lt;/code&gt; に残すため、ハードリセットするとインデックスファイルと作業ツリーがその状態に戻り、ブランチの先端がそのコミットにリセットされます。</target>
        </trans-unit>
        <trans-unit id="18ba832b59818b9d406aeb54ba66e145b5697021" translate="yes" xml:space="preserve">
          <source>By default (without --all or --tags) &lt;code&gt;git describe&lt;/code&gt; only shows annotated tags. For more information about creating annotated tags see the -a and -s options to &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは（--allまたは--tagsなしで） &lt;code&gt;git describe&lt;/code&gt; は注釈付きタグのみを表示します。注釈付きタグの作成の詳細については、&lt;a href=&quot;git-tag&quot;&gt;git-tag [1]&lt;/a&gt;の-aおよび-sオプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2aacef9af72c222fb1b6acf47a0fa851e92d4733" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;git fetch&lt;/code&gt; refuses to update the head which corresponds to the current branch. This flag disables the check. This is purely for the internal use for &lt;code&gt;git pull&lt;/code&gt; to communicate with &lt;code&gt;git fetch&lt;/code&gt;, and unless you are implementing your own Porcelain you are not supposed to use it.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;git fetch&lt;/code&gt; は現在のブランチに対応するヘッドの更新を拒否します。このフラグはチェックを無効にします。これは純粋に &lt;code&gt;git pull&lt;/code&gt; が &lt;code&gt;git fetch&lt;/code&gt; と通信するための内部使用のためのものであり、独自の磁器を実装しない限り、それを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="1d408902dc303f6c00a1b0f596a5c28e377e82f7" translate="yes" xml:space="preserve">
          <source>By default Git will look for your hooks in the &lt;code&gt;$GIT_DIR/hooks&lt;/code&gt; directory. Set this to different path, e.g. &lt;code&gt;/etc/git/hooks&lt;/code&gt;, and Git will try to find your hooks in that directory, e.g. &lt;code&gt;/etc/git/hooks/pre-receive&lt;/code&gt; instead of in &lt;code&gt;$GIT_DIR/hooks/pre-receive&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Gitは &lt;code&gt;$GIT_DIR/hooks&lt;/code&gt; ディレクトリでフックを探します。これを &lt;code&gt;/etc/git/hooks&lt;/code&gt; などの別のパスに設定すると、Gitはそのディレクトリ（ &lt;code&gt;$GIT_DIR/hooks/pre-receive&lt;/code&gt; ではなく &lt;code&gt;/etc/git/hooks/pre-receive&lt;/code&gt; など)でフックを見つけようとします。</target>
        </trans-unit>
        <trans-unit id="2707cacda66e328227d997bd98a14207b5d80af5" translate="yes" xml:space="preserve">
          <source>By default a &amp;lt;ref&amp;gt; not starting with refs/ is treated as the name of a remote-tracking branch (under refs/remotes/). This behavior can be modified using the --import-local option.</source>
          <target state="translated">デフォルトでは、refs /で始まらない&amp;lt;ref&amp;gt;は、（refs / remotes /の下の）リモート追跡ブランチの名前として扱われます。この動作は--import-localオプションを使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="9fda6ea140eac0d5f03c38d0b89c06bf6c01dbaa" translate="yes" xml:space="preserve">
          <source>By default all Git repositories under &lt;code&gt;$projectroot&lt;/code&gt; are visible and available to gitweb. The list of projects is generated by default by scanning the &lt;code&gt;$projectroot&lt;/code&gt; directory for Git repositories (for object databases to be more exact; gitweb is not interested in a working area, and is best suited to showing &quot;bare&quot; repositories).</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;$projectroot&lt;/code&gt; projectrootの下のすべてのGitリポジトリが表示され、gitwebで使用できます。プロジェクトのリストは、デフォルトで &lt;code&gt;$projectroot&lt;/code&gt; ディレクトリをスキャンしてGitリポジトリを検索することで生成されます（オブジェクトデータベースの方が正確です。gitwebは作業領域に関心がなく、「ベア」リポジトリの表示に最適です）。</target>
        </trans-unit>
        <trans-unit id="7d4dbfd64b78e6eb7460def3863c1e38e1d55fa2" translate="yes" xml:space="preserve">
          <source>By default all Git repositories under &lt;code&gt;$projectroot&lt;/code&gt; are visible and available to gitweb. You can however configure how gitweb controls access to repositories.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;$projectroot&lt;/code&gt; projectrootの下のすべてのGitリポジトリが表示され、gitwebで使用できます。ただし、gitwebがリポジトリへのアクセスを制御する方法を設定できます。</target>
        </trans-unit>
        <trans-unit id="6b749c474f0e8be473f5227adae69d6b82e99699" translate="yes" xml:space="preserve">
          <source>By default entries added by &quot;git add -N&quot; appear as an existing empty file in &quot;git diff&quot; and a new file in &quot;git diff --cached&quot;. This option makes the entry appear as a new file in &quot;git diff&quot; and non-existent in &quot;git diff --cached&quot;. This option could be reverted with &lt;code&gt;--ita-visible-in-index&lt;/code&gt;. Both options are experimental and could be removed in future.</source>
          <target state="translated">デフォルトでは、「git add -N」によって追加されたエントリは、「git diff」では既存の空のファイルとして、「git diff --cached」では新しいファイルとして表示されます。このオプションは、エントリを「git diff」では新しいファイルとして表示し、「git diff --cached」では存在しないようにします。このオプションは &lt;code&gt;--ita-visible-in-index&lt;/code&gt; で元に戻すことができます。どちらのオプションも実験的なものであり、将来削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f92479038911d91ec691ca1995b6f59bbf4d3495" translate="yes" xml:space="preserve">
          <source>By default it uses SQLite databases in the Git directory, named &lt;code&gt;gitcvs.&amp;lt;module_name&amp;gt;.sqlite&lt;/code&gt;. Note that the SQLite backend creates temporary files in the same directory as the database file on write so it might not be enough to grant the users using &lt;code&gt;git-cvsserver&lt;/code&gt; write access to the database file without granting them write access to the directory, too.</source>
          <target state="translated">デフォルトでは、Gitディレクトリ内の &lt;code&gt;gitcvs.&amp;lt;module_name&amp;gt;.sqlite&lt;/code&gt; という名前のSQLiteデータベースを使用します。SQLiteバックエンドは、書き込み時にデータベースファイルと同じディレクトリに一時ファイルを作成するため、 &lt;code&gt;git-cvsserver&lt;/code&gt; を使用するユーザーに、ディレクトリへの書き込みアクセス権を付与せずに、データベースファイルへの書き込みアクセス権を付与するだけでは不十分な場合があります。</target>
        </trans-unit>
        <trans-unit id="c6b06e8b566ecf1a19a23c408ec4ad0c91c68502" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;man&lt;/code&gt; program will be used to display the manual page, but the &lt;code&gt;man.viewer&lt;/code&gt; configuration variable may be used to choose other display programs (see below).</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;man&lt;/code&gt; プログラムを使用してマニュアルページを表示しますが、 &lt;code&gt;man.viewer&lt;/code&gt; 構成変数を使用して他の表示プログラムを選択することもできます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="2e5b50ac3c7c5c555c2ca84f458ac39569a0ee21" translate="yes" xml:space="preserve">
          <source>By default the command records the date from the e-mail message as the commit author date, and uses the time of commit creation as the committer date. This allows the user to lie about the author date by using the same value as the committer date.</source>
          <target state="translated">デフォルトでは、このコマンドは電子メールメッセージの日付をコミット作成者の日付として記録し、コミット作成時刻をコミット者の日付として使用します。これにより、コミット作成者の日付と同じ値を使用することで、作成者の日付を偽ることができます。</target>
        </trans-unit>
        <trans-unit id="eb47d162dbfc8bcd3a02f766bf35ff994d86e7f7" translate="yes" xml:space="preserve">
          <source>By default the command records the date from the e-mail message as the commit author date, and uses the time of commit creation as the committer date. This allows the user to lie about the committer date by using the same value as the author date.</source>
          <target state="translated">デフォルトでは、このコマンドは電子メールメッセージの日付をコミット作成者の日付として記録し、コミット作成時刻をコミット者の日付として使用します。これにより、コミット作成者の日付と同じ値を使用することで、コミット者の日付を偽ることができます。</target>
        </trans-unit>
        <trans-unit id="6aeb14014b871b17a9d4f0da107bb610e5ea0157" translate="yes" xml:space="preserve">
          <source>By default the command shows all refs that match &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt;. This option makes it stop after showing that many refs.</source>
          <target state="translated">デフォルトでは、コマンドは &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; に一致するすべての参照を表示します。このオプションは、その多くの参照を表示した後に停止します。</target>
        </trans-unit>
        <trans-unit id="7d63d3915d070cca4c5d36e324ecb4a7f6a0679f" translate="yes" xml:space="preserve">
          <source>By default the command will try to detect the patch format automatically. This option allows the user to bypass the automatic detection and specify the patch format that the patch(es) should be interpreted as. Valid formats are mbox, mboxrd, stgit, stgit-series and hg.</source>
          <target state="translated">デフォルトでは、このコマンドはパッチフォーマットを自動的に検出しようとします。このオプションを指定すると、自動検出をバイパスして、パッチが解釈されるパッチフォーマットを指定することができます。有効なフォーマットは mbox,mboxrd,stgit,stgit-series,hg です。</target>
        </trans-unit>
        <trans-unit id="ee6799585dabe2a3016ffbe61452694b948c3ff6" translate="yes" xml:space="preserve">
          <source>By default the hooks directory is &lt;code&gt;$GIT_DIR/hooks&lt;/code&gt;, but that can be changed via the &lt;code&gt;core.hooksPath&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">デフォルトでは、フックディレクトリは &lt;code&gt;$GIT_DIR/hooks&lt;/code&gt; ですが、 &lt;code&gt;core.hooksPath&lt;/code&gt; 構成変数（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="1e420d062677a0d01238cac1bc0b0f93a32eaab8" translate="yes" xml:space="preserve">
          <source>By default the new trailer will appear at the end of all the existing trailers. If there is no existing trailer, the new trailer will appear after the commit message part of the output, and, if there is no line with only spaces at the end of the commit message part, one blank line will be added before the new trailer.</source>
          <target state="translated">デフォルトでは、新しいトレーラは既存のすべてのトレーラの最後に表示されます。既存のトレーラがない場合は、出力のコミットメッセージ部分の後に新しいトレーラが表示され、コミットメッセージ部分の最後にスペースだけの行がない場合は、新しいトレーラの前に空白の行が1行追加されます。</target>
        </trans-unit>
        <trans-unit id="64ba0ec6c1bed38e21fc7f4f4a0aef9c8ebe7286" translate="yes" xml:space="preserve">
          <source>By default the server leaves the &lt;code&gt;-k&lt;/code&gt; mode blank for all files, which causes the CVS client to treat them as a text files, subject to end-of-line conversion on some platforms.</source>
          <target state="translated">デフォルトでは、サーバーはすべてのファイルに対して &lt;code&gt;-k&lt;/code&gt; モードを空白のままにします。これにより、CVSクライアントはそれらをテキストファイルとして扱い、一部のプラットフォームでは行末変換の対象となります。</target>
        </trans-unit>
        <trans-unit id="54dcb4758211c9d2e362cc73ee7a92ca62d914ac" translate="yes" xml:space="preserve">
          <source>By default this file controls only which projects are &lt;strong&gt;visible&lt;/strong&gt; on projects list page (note that entries that do not point to correctly recognized Git repositories won&amp;rsquo;t be displayed by gitweb). Even if a project is not visible on projects list page, you can view it nevertheless by hand-crafting a gitweb URL. By setting &lt;code&gt;$strict_export&lt;/code&gt; configuration variable (see &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf[5]&lt;/a&gt;) to true value you can allow viewing only of repositories also shown on the overview page (i.e. only projects explicitly listed in projects list file will be accessible).</source>
          <target state="translated">デフォルトでは、このファイルはプロジェクトリストページに&lt;strong&gt;表示&lt;/strong&gt;されるプロジェクトのみを制御します（正しく認識されたGitリポジトリをポイントしていないエントリはgitwebによって表示されないことに注意してください）。プロジェクトがプロジェクトリストページに表示されない場合でも、gitweb URLを手作りすることで表示できます。設定することで &lt;code&gt;$strict_export&lt;/code&gt; （参照設定変数を&lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf [5]を&lt;/a&gt;真の値に）あなたは（明示的なプロジェクトのリストに記載されている、すなわち唯一のプロジェクトは、ファイルがアクセス可能になる）だけでも、概要ページに表示されるリポジトリの閲覧許可することができます。</target>
        </trans-unit>
        <trans-unit id="eff6e029914fd799d6a59537c15d9f46e8d635a6" translate="yes" xml:space="preserve">
          <source>By default when &lt;code&gt;--all&lt;/code&gt; is specified, reflogs from all working trees are processed. This option limits the processing to reflogs from the current working tree only.</source>
          <target state="translated">&lt;code&gt;--all&lt;/code&gt; が指定されている場合、デフォルトでは、すべての作業ツリーからのreflogが処理されます。このオプションは、処理を現在の作業ツリーからのreflogsのみに制限します。</target>
        </trans-unit>
        <trans-unit id="898aa5511bdcc79b6cc36a9d8f0c7e7e9ffc1277" translate="yes" xml:space="preserve">
          <source>By default when fetching from a shallow repository, &lt;code&gt;git fetch&lt;/code&gt; refuses refs that require updating .git/shallow. This option updates .git/shallow and accept such refs.</source>
          <target state="translated">デフォルトでは、浅いリポジトリからフェッチする場合、 &lt;code&gt;git fetch&lt;/code&gt; は .git / shallowの更新が必要な参照を拒否します。このオプションは.git / shallowを更新し、そのような参照を受け入れます。</target>
        </trans-unit>
        <trans-unit id="8a946900900b0969e5566670798dfa0b25059b02" translate="yes" xml:space="preserve">
          <source>By default, &quot;updateInstead&quot; will refuse the push if the working tree or the index have any difference from the HEAD, but the &lt;code&gt;push-to-checkout&lt;/code&gt; hook can be used to customize this. See &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、作業ツリーまたはインデックスにHEADとの違いがある場合、「updateInstead」はプッシュを拒否しますが、 &lt;code&gt;push-to-checkout&lt;/code&gt; フックを使用してこれをカスタマイズできます。&lt;a href=&quot;githooks&quot;&gt;githooks [5]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ccc06ea9e45b9e60a670cf461c22563d24643639" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;git-repack&quot;&gt;git-repack[1]&lt;/a&gt; creates packs that use delta-base offset. If you need to share your repository with Git older than version 1.4.4, either directly or via a dumb protocol such as http, then you need to set this option to &quot;false&quot; and repack. Access from old Git versions over the native protocol are unaffected by this option.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;git-repack&quot;&gt;git-repack [1]&lt;/a&gt;はデルタベースオフセットを使用するパックを作成します。リポジトリをバージョン1.4.4より前のGitと直接、またはhttpなどのダムプロトコルを介して共有する必要がある場合は、このオプションを「false」に設定して再パックする必要があります。ネイティブプロトコルを介した古いGitバージョンからのアクセスは、このオプションの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="207b9ec4a7354c6cbc08217ef08c22e3683c8d13" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt; and &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; show files which are not currently tracked by Git. Directories which contain only untracked files, are shown with the directory name only. Showing untracked files means that Git needs to lstat() all the files in the whole repository, which might be slow on some systems. So, this variable controls how the commands displays the untracked files. Possible values are:</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;git-status&quot;&gt;git-status [1]&lt;/a&gt;と&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;は、現在Gitによって追跡されていないファイルを表示します。追跡されていないファイルのみを含むディレクトリは、ディレクトリ名のみで表示されます。追跡されていないファイルを表示するということは、Gitがリポジトリ全体のすべてのファイルをlstat（）する必要があることを意味します。したがって、この変数は、コマンドが追跡されていないファイルを表示する方法を制御します。可能な値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0594913527635a38d7d1da1f58cf2049e0d81ae9" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt; shows paths relative to the current directory. Setting this variable to &lt;code&gt;false&lt;/code&gt; shows paths relative to the repository root (this was the default for Git prior to v1.5.4).</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;git-status&quot;&gt;git-status [1]&lt;/a&gt;は現在のディレクトリからの相対パスを表示します。この変数を &lt;code&gt;false&lt;/code&gt; に設定すると、リポジトリルートからの相対パスが表示されます（これはv1.5.4より前のGitのデフォルトでした）。</target>
        </trans-unit>
        <trans-unit id="93044cb17b41f6ff0ab9ae102eca02ce8d5cdb16" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;add&lt;/code&gt; checks out &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt;, however, &lt;code&gt;--no-checkout&lt;/code&gt; can be used to suppress checkout in order to make customizations, such as configuring sparse-checkout. See &quot;Sparse checkout&quot; in &lt;a href=&quot;git-read-tree&quot;&gt;git-read-tree[1]&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは &lt;code&gt;add&lt;/code&gt; チェックアウト &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; を追加しますが、-- &lt;code&gt;--no-checkout&lt;/code&gt; を使用して、スパースチェックアウトの構成などのカスタマイズを行うためにチェックアウトを抑制することができます。&lt;a href=&quot;git-read-tree&quot;&gt;git-read-tree [1]の&lt;/a&gt;「スパースチェックアウト」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d6911782a1bf788b96e52d6283b9603906afd385" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;add&lt;/code&gt; refuses to create a new working tree when &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; is a branch name and is already checked out by another working tree, or if &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; is already assigned to some working tree but is missing (for instance, if &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; was deleted manually). This option overrides these safeguards. To add a missing but locked working tree path, specify &lt;code&gt;--force&lt;/code&gt; twice.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;add&lt;/code&gt; 新しい作業ツリーを作成することを拒否したときに &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; 支店名で、すでに別の作業ツリーによってチェックアウトされた場合、または &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; は、すでにいくつかの作業ツリーに割り当てられているが、例えば（不足しています、 &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; が手動で削除された場合）。このオプションは、これらの保護手段を上書きします。見つからないがロックされた作業 &lt;code&gt;--force&lt;/code&gt; を追加するには、-forceを 2回指定します。</target>
        </trans-unit>
        <trans-unit id="c6808cb2e8497f1a21da404e6487ab0df6e47fd0" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;git add&lt;/code&gt; will warn when adding an embedded repository to the index without using &lt;code&gt;git submodule add&lt;/code&gt; to create an entry in &lt;code&gt;.gitmodules&lt;/code&gt;. This option will suppress the warning (e.g., if you are manually performing operations on submodules).</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;git add&lt;/code&gt; &lt;code&gt;git submodule add&lt;/code&gt; を使用して &lt;code&gt;.gitmodules&lt;/code&gt; にエントリを作成せずに埋め込みリポジトリをインデックスに追加すると、git addが警告します。このオプションは警告を抑制します（たとえば、サブモジュールで手動で操作を実行している場合）。</target>
        </trans-unit>
        <trans-unit id="9f7a911ab745fcc1ecc2d75cf5b4666d5616a0f2" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;git am&lt;/code&gt; will fail if the patch does not apply cleanly. When set to true, this setting tells &lt;code&gt;git am&lt;/code&gt; to fall back on 3-way merge if the patch records the identity of blobs it is supposed to apply to and we have those blobs available locally (equivalent to giving the &lt;code&gt;--3way&lt;/code&gt; option from the command line). Defaults to &lt;code&gt;false&lt;/code&gt;. See &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;.</source>
          <target state="translated">デフォルトで &lt;code&gt;git am&lt;/code&gt; 、パッチが正しく適用されない場合、git amは失敗します。trueに設定すると、パッチが適用されるはずのblobのIDをパッチが記録し、それらのblobをローカルで使用できる場合、この設定は &lt;code&gt;git am&lt;/code&gt; に3ウェイマージにフォールバックするように &lt;code&gt;--3way&lt;/code&gt; ます（これらのblobをローカルで使用できるのと同じです- コマンドライン）。デフォルトは &lt;code&gt;false&lt;/code&gt; です。&lt;a href=&quot;git-am&quot;&gt;git-am [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="04d5b79eb2c1cc00ec23b84308367755078f2519" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;git apply&lt;/code&gt; expects that the patch being applied is a unified diff with at least one line of context. This provides good safety measures, but breaks down when applying a diff generated with &lt;code&gt;--unified=0&lt;/code&gt;. To bypass these checks use &lt;code&gt;--unidiff-zero&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;git apply&lt;/code&gt; は、適用されるパッチが少なくとも1行のコンテキストを持つ統合されたdiffであることを想定しています。これは優れた安全対策を提供しますが、-- &lt;code&gt;--unified=0&lt;/code&gt; 生成された差分を適用すると失敗します。これらのチェックをバイパスするには、-- &lt;code&gt;--unidiff-zero&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="cc5e77409adaefd524775157d3aa209b06e80ef9" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;git diff-tree --stdin&lt;/code&gt; does not show differences for merge commits. With this flag, it shows differences to that commit from all of its parents. See also &lt;code&gt;-c&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;git diff-tree --stdin&lt;/code&gt; はマージコミットの違いを表示しません。このフラグを使用すると、すべての親からのコミットとの違いが表示されます。 &lt;code&gt;-c&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="44f438a687f3c8843b562164d423119ef0393e39" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;git diff-tree --stdin&lt;/code&gt; shows differences, either in machine-readable form (without &lt;code&gt;-p&lt;/code&gt;) or in patch form (with &lt;code&gt;-p&lt;/code&gt;). This output can be suppressed. It is only useful with &lt;code&gt;-v&lt;/code&gt; flag.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;git diff-tree --stdin&lt;/code&gt; は、機械可読形式（ &lt;code&gt;-p&lt;/code&gt; なし）またはパッチ形式（ &lt;code&gt;-p&lt;/code&gt; 付き）で違いを示します。この出力は抑制できます。 &lt;code&gt;-v&lt;/code&gt; フラグを指定した場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="41ecfd2369ab83f2851da4837d8f55ae828a688b" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;git merge&lt;/code&gt; command refuses to merge histories that do not share a common ancestor. This option can be used to override this safety when merging histories of two projects that started their lives independently. As that is a very rare occasion, no configuration variable to enable this by default exists and will not be added.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;git merge&lt;/code&gt; コマンドは、共通の祖先を共有しない履歴のマージを拒否します。このオプションを使用すると、独立して開始した2つのプロジェクトの履歴をマージするときに、この安全性をオーバーライドできます。これは非常にまれなケースであるため、デフォルトでこれを有効にする構成変数が存在せず、追加されません。</target>
        </trans-unit>
        <trans-unit id="c206e08a568b5af4b242b43f3b62e41c9c2a00a0" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;git status&lt;/code&gt; will automatically refresh the index, updating the cached stat information from the working tree and writing out the result. Writing out the updated index is an optimization that isn&amp;rsquo;t strictly necessary (&lt;code&gt;status&lt;/code&gt; computes the values for itself, but writing them out is just to save subsequent programs from repeating our computation). When &lt;code&gt;status&lt;/code&gt; is run in the background, the lock held during the write may conflict with other simultaneous processes, causing them to fail. Scripts running &lt;code&gt;status&lt;/code&gt; in the background should consider using &lt;code&gt;git --no-optional-locks status&lt;/code&gt; (see &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt; for details).</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;git status&lt;/code&gt; は自動的にインデックスを更新し、作業ツリーからキャッシュされた統計情報を更新して結果を書き出します。更新されたインデックスを書き出すことは、必ずしも必要ではない最適化です（ &lt;code&gt;status&lt;/code&gt; はそれ自体の値を計算しますが、それらを書き出すことは、後続のプログラムが計算を繰り返すのを防ぐためです）。ときに &lt;code&gt;status&lt;/code&gt; バックグラウンドで実行され、書き込み時に開催されたロックは、彼らが失敗し、他の同時プロセスと競合する可能性があります。バックグラウンドで &lt;code&gt;status&lt;/code&gt; を実行するスクリプトは、 &lt;code&gt;git --no-optional-locks status&lt;/code&gt; の使用を検討する必要があります（詳細は&lt;a href=&quot;git&quot;&gt;git [1]&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="0166a80c7cb65bd63925a576fc16b6b5666a6f97" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;git tag&lt;/code&gt; in sign-with-default mode (-s) will use your committer identity (of the form &lt;code&gt;Your Name &amp;lt;your@email.address&amp;gt;&lt;/code&gt;) to find a key. If you want to use a different default key, you can specify it in the repository configuration as follows:</source>
          <target state="translated">デフォルトでは、デフォルトの署名モード（-s）の &lt;code&gt;git tag&lt;/code&gt; は、コミッターID（ &lt;code&gt;Your Name &amp;lt;your@email.address&amp;gt;&lt;/code&gt; の形式）を使用してキーを検索します。別のデフォルトキーを使用する場合は、次のようにリポジトリ設定で指定できます。</target>
        </trans-unit>
        <trans-unit id="ab2e2876fa31ec281a3a2c1b794b7dec91ae3790" translate="yes" xml:space="preserve">
          <source>By default, Git determines the command line arguments to use based on the basename of the configured SSH command (configured using the environment variable &lt;code&gt;GIT_SSH&lt;/code&gt; or &lt;code&gt;GIT_SSH_COMMAND&lt;/code&gt; or the config setting &lt;code&gt;core.sshCommand&lt;/code&gt;). If the basename is unrecognized, Git will attempt to detect support of OpenSSH options by first invoking the configured SSH command with the &lt;code&gt;-G&lt;/code&gt; (print configuration) option and will subsequently use OpenSSH options (if that is successful) or no options besides the host and remote command (if it fails).</source>
          <target state="translated">デフォルトでは、Gitは、コマンドライン引数は、（環境変数を使用して構成構成SSHコマンドのベース名に基づいて、使用することを決定 &lt;code&gt;GIT_SSH&lt;/code&gt; 又は &lt;code&gt;GIT_SSH_COMMAND&lt;/code&gt; または設定コンフィグ &lt;code&gt;core.sshCommand&lt;/code&gt; を）。ベース名が認識されない場合、Gitは最初に &lt;code&gt;-G&lt;/code&gt; （印刷構成）オプションを使用して構成済みのSSHコマンドを呼び出し、OpenSSHオプションのサポートを検出しようとします。その後、OpenSSHオプション（成功した場合）またはホスト以外のオプションを使用します。リモートコマンド（失敗した場合）。</target>
        </trans-unit>
        <trans-unit id="b85b0c2bab173615caaf4bbe66c1c28d30e786cc" translate="yes" xml:space="preserve">
          <source>By default, Git does not consider the &quot;path&quot; component of an http URL to be worth matching via external helpers. This means that a credential stored for &lt;code&gt;https://example.com/foo.git&lt;/code&gt; will also be used for &lt;code&gt;https://example.com/bar.git&lt;/code&gt;. If you do want to distinguish these cases, set this option to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、Gitはhttp URLの「パス」コンポーネントを外部ヘルパー経由で照合する価値があるとは見なしません。つまり、 &lt;code&gt;https://example.com/foo.git&lt;/code&gt; //example.com/foo.gitに保存された認証情報は、https：//example.com/bar.gitにも使用され &lt;code&gt;https://example.com/bar.git&lt;/code&gt; 。これらのケースを区別したい場合は、このオプションを &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="ffe1eaf4d1c9cc64df80a6b16dfbf1fa771b52c9" translate="yes" xml:space="preserve">
          <source>By default, Git does not create an extra merge commit when merging a commit that is a descendant of the current commit. Instead, the tip of the current branch is fast-forwarded. When set to &lt;code&gt;false&lt;/code&gt;, this variable tells Git to create an extra merge commit in such a case (equivalent to giving the &lt;code&gt;--no-ff&lt;/code&gt; option from the command line). When set to &lt;code&gt;only&lt;/code&gt;, only such fast-forward merges are allowed (equivalent to giving the &lt;code&gt;--ff-only&lt;/code&gt; option from the command line).</source>
          <target state="translated">デフォルトでは、Gitは、現在のコミットの子孫であるコミットをマージするときに、追加のマージコミットを作成しません。代わりに、現在のブランチの先端が早送りされます。 &lt;code&gt;false&lt;/code&gt; に設定すると、この変数はそのような場合に追加のマージコミットを作成するようにGitに指示します（コマンドラインから &lt;code&gt;--no-ff&lt;/code&gt; オプションを指定することと同等）。 &lt;code&gt;only&lt;/code&gt; に設定すると、そのような早送りマージのみが許可されます（コマンドラインから &lt;code&gt;--ff-only&lt;/code&gt; オプションを指定することと同等）。</target>
        </trans-unit>
        <trans-unit id="32c0486f322ae0e4678fa0824298d7c086e9ee4f" translate="yes" xml:space="preserve">
          <source>By default, Git does not create an extra merge commit when merging a commit that is a descendant of the current commit. Instead, the tip of the current branch is fast-forwarded. When set to &lt;code&gt;false&lt;/code&gt;, this variable tells Git to create an extra merge commit in such a case (equivalent to giving the &lt;code&gt;--no-ff&lt;/code&gt; option from the command line). When set to &lt;code&gt;only&lt;/code&gt;, only such fast-forward merges are allowed (equivalent to giving the &lt;code&gt;--ff-only&lt;/code&gt; option from the command line). This setting overrides &lt;code&gt;merge.ff&lt;/code&gt; when pulling.</source>
          <target state="translated">デフォルトでは、Gitは、現在のコミットの子孫であるコミットをマージするときに、追加のマージコミットを作成しません。代わりに、現在のブランチの先端が早送りされます。 &lt;code&gt;false&lt;/code&gt; に設定すると、この変数はそのような場合に追加のマージコミットを作成するようにGitに指示します（コマンドラインから &lt;code&gt;--no-ff&lt;/code&gt; オプションを指定することと同等）。 &lt;code&gt;only&lt;/code&gt; に設定すると、そのような早送りマージのみが許可されます（コマンドラインから &lt;code&gt;--ff-only&lt;/code&gt; オプションを指定することと同等）。この設定は、プルするときに &lt;code&gt;merge.ff&lt;/code&gt; をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="e39ec591fb076f73ed5744e6cef724be12b06bb7" translate="yes" xml:space="preserve">
          <source>By default, Git uses the same style as the one used by the &quot;merge&quot; program from the RCS suite to present such a conflicted hunk, like this:</source>
          <target state="translated">デフォルトでは、Git は RCS スイートの &quot;merge&quot; プログラムで使用されているものと同じスタイルを使用して、このような衝突している塊を表現しています。</target>
        </trans-unit>
        <trans-unit id="632bd7b7934c758c995d70fcf0643a53a17ef93c" translate="yes" xml:space="preserve">
          <source>By default, Git will report, to the server, commits reachable from all local refs to find common commits in an attempt to reduce the size of the to-be-received packfile. If specified, Git will only report commits reachable from the given tips. This is useful to speed up fetches when the user knows which local ref is likely to have commits in common with the upstream ref being fetched.</source>
          <target state="translated">デフォルトでは、Git はすべてのローカルリファレンスから到達可能なコミットをサーバーに報告します。指定した場合、Git は指定した tips から到達可能なコミットのみを報告します。これは、取得する上流の参照と共通のコミットを持つ可能性の高いローカル参照がわかっている場合に、取得を高速化するのに便利です。</target>
        </trans-unit>
        <trans-unit id="ec00d75621e8cccd0e732ba6afc6d14548cb8a4e" translate="yes" xml:space="preserve">
          <source>By default, Thunderbird will both wrap emails as well as flag them as being &lt;code&gt;format=flowed&lt;/code&gt;, both of which will make the resulting email unusable by Git.</source>
          <target state="translated">デフォルトでは、Thunderbirdはメールをラップするだけでなく、それらを &lt;code&gt;format=flowed&lt;/code&gt; としてフラグ付けします。どちらの場合も、結果のメールはGitで使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="cb931511b378f47ed0453a8a3e156978cca15ca4" translate="yes" xml:space="preserve">
          <source>By default, a &lt;code&gt;&amp;lt;token&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;token&amp;gt;:&amp;lt;value&amp;gt;&lt;/code&gt; argument given using &lt;code&gt;--trailer&lt;/code&gt; will be appended after the existing trailers only if the last trailer has a different (&amp;lt;token&amp;gt;, &amp;lt;value&amp;gt;) pair (or if there is no existing trailer). The &amp;lt;token&amp;gt; and &amp;lt;value&amp;gt; parts will be trimmed to remove starting and trailing whitespace, and the resulting trimmed &amp;lt;token&amp;gt; and &amp;lt;value&amp;gt; will appear in the message like this:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;--trailer&lt;/code&gt; を使用して指定された &lt;code&gt;&amp;lt;token&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;token&amp;gt;:&amp;lt;value&amp;gt;&lt;/code&gt; 引数は、最後のトレーラーに異なる（&amp;lt;token&amp;gt;、&amp;lt;value&amp;gt;）ペアがある場合にのみ、既存のトレーラーの後に追加されます（または、既存のトレーラーがない場合）。 &amp;lt;token&amp;gt;と&amp;lt;value&amp;gt;の部分はトリミングされて開始と末尾の空白が削除され、結果のトリミングされた&amp;lt;token&amp;gt;と&amp;lt;value&amp;gt;は次のようなメッセージに表示されます。</target>
        </trans-unit>
        <trans-unit id="434e3c7441379e0ab27bf268d6dee72f73412814" translate="yes" xml:space="preserve">
          <source>By default, a patch that affects outside the working area (either a Git controlled working tree, or the current working directory when &quot;git apply&quot; is used as a replacement of GNU patch) is rejected as a mistake (or a mischief).</source>
          <target state="translated">デフォルトでは、作業領域外 (Git が管理する作業ツリーか、GNU パッチの代わりに &quot;git apply&quot; を使用した場合のカレント作業ディレクトリのいずれか)に影響を与えるパッチは、ミス (またはいたずら)として却下されます。</target>
        </trans-unit>
        <trans-unit id="ea0000563105721871c07339b879614c007bc152" translate="yes" xml:space="preserve">
          <source>By default, a rebase will simply drop merge commits from the todo list, and put the rebased commits into a single, linear branch. With &lt;code&gt;--rebase-merges&lt;/code&gt;, the rebase will instead try to preserve the branching structure within the commits that are to be rebased, by recreating the merge commits. Any resolved merge conflicts or manual amendments in these merge commits will have to be resolved/re-applied manually.</source>
          <target state="translated">デフォルトでは、リベースは単純にマージコミットをtodoリストから削除し、リベースされたコミットを単一の線形ブランチに配置します。 &lt;code&gt;--rebase-merges&lt;/code&gt; を使用すると、リベースは、マージコミットを再作成することにより、リベースされるコミット内の分岐構造を保持しようとします。これらのマージコミットで解決されたマージの競合または手動の修正は、手動で解決または再適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="92f108d472fe60a4c0a9d93474bd0154c5c0a9e2" translate="yes" xml:space="preserve">
          <source>By default, all working trees will be examined by the following options when there are more than one (see &lt;a href=&quot;git-worktree&quot;&gt;git-worktree[1]&lt;/a&gt;): &lt;code&gt;--all&lt;/code&gt;, &lt;code&gt;--reflog&lt;/code&gt; and &lt;code&gt;--indexed-objects&lt;/code&gt;. This option forces them to examine the current working tree only.</source>
          <target state="translated">デフォルトで存在する場合、すべての作業ツリーは、次のオプションによって検査される複数の（参照&lt;a href=&quot;git-worktree&quot;&gt;のgit-worktree [1] &lt;/a&gt;）： &lt;code&gt;--all&lt;/code&gt; 、 &lt;code&gt;--reflog&lt;/code&gt; と &lt;code&gt;--indexed-objects&lt;/code&gt; 。このオプションは、現在の作業ツリーのみを調べるように強制します。</target>
        </trans-unit>
        <trans-unit id="1feea061cb833e84202a29cce6b0929662b79ff4" translate="yes" xml:space="preserve">
          <source>By default, any branch can be used as the source for a &lt;code&gt;git p4 submit&lt;/code&gt; operation. This configuration variable, if set, permits only the named branches to be used as submit sources. Branch names must be the short names (no &quot;refs/heads/&quot;), and should be separated by commas (&quot;,&quot;), with no spaces.</source>
          <target state="translated">デフォルトでは、任意のブランチを &lt;code&gt;git p4 submit&lt;/code&gt; 操作のソースとして使用できます。この構成変数が設定されている場合、指定されたブランチのみが送信元として使用されることを許可します。ブランチ名は短い名前（ &quot;refs / heads /&quot;ではなく）である必要があり、スペースなしでコンマ（ &quot;、&quot;）で区切る必要があります。</target>
        </trans-unit>
        <trans-unit id="cb82df8bc2b9bbd18ae6db77878aee5f1360ef3d" translate="yes" xml:space="preserve">
          <source>By default, any of the given pathnames which match an ignore pattern will be output, one per line. If no pattern matches a given path, nothing will be output for that path; this means that path will not be ignored.</source>
          <target state="translated">デフォルトでは、無視パターンにマッチしたパス名のいずれかが、1 行に 1 つずつ出力されます。パターンが与えられたパスにマッチしない場合、そのパスに対しては何も出力されません;これは、そのパスが無視されないことを意味します。</target>
        </trans-unit>
        <trans-unit id="9840f412411908e4167e9b89fe91af90f41421dd" translate="yes" xml:space="preserve">
          <source>By default, any tag that points into the histories being fetched is also fetched; the effect is to fetch tags that point at branches that you are interested in. This default behavior can be changed by using the --tags or --no-tags options or by configuring remote.&amp;lt;name&amp;gt;.tagOpt. By using a refspec that fetches tags explicitly, you can fetch tags that do not point into branches you are interested in as well.</source>
          <target state="translated">デフォルトでは、フェッチされている履歴を指すタグもすべてフェッチされます。その効果は、関心のあるブランチを指すタグをフェッチすることです。このデフォルトの動作は、-tagsまたは--no-tagsオプションを使用するか、remote。&amp;lt;name&amp;gt; .tagOpt。タグを明示的にフェッチするrefspecを使用することで、関心のあるブランチを指さないタグもフェッチできます。</target>
        </trans-unit>
        <trans-unit id="859edf72ede027900910837f2758e52dd7b73b08" translate="yes" xml:space="preserve">
          <source>By default, cherry-picking a commit with an empty message will fail. This option overrides that behavior, allowing commits with empty messages to be cherry picked.</source>
          <target state="translated">デフォルトでは、空のメッセージを含むコミットのチェリーピックは失敗します。このオプションはこの動作を無効にし、空のメッセージを持つコミットをチェリーピックすることを可能にします。</target>
        </trans-unit>
        <trans-unit id="c2ea9611dc2821c1e170c93c6a453dad2dd69c2d" translate="yes" xml:space="preserve">
          <source>By default, cherry-picking an empty commit will fail, indicating that an explicit invocation of &lt;code&gt;git commit
--allow-empty&lt;/code&gt; is required. This option overrides that behavior, allowing empty commits to be preserved automatically in a cherry-pick. Note that when &quot;--ff&quot; is in effect, empty commits that meet the &quot;fast-forward&quot; requirement will be kept even without this option. Note also, that use of this option only keeps commits that were initially empty (i.e. the commit recorded the same tree as its parent). Commits which are made empty due to a previous commit are dropped. To force the inclusion of those commits use &lt;code&gt;--keep-redundant-commits&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、空のコミットのチェリーピックは失敗し、 &lt;code&gt;git commit --allow-empty&lt;/code&gt; 明示的な呼び出しが必要であることを示します。このオプションはその動作を上書きし、空のコミットをチェリーピックで自動的に保持できるようにします。 「--ff」が有効な場合、「fast-forward」要件を満たす空のコミットは、このオプションがなくても保持されることに注意してください。また、このオプションを使用すると、最初は空だったコミットのみが保持されることにも注意してください（つまり、コミットはその親と同じツリーを記録しました）。以前のコミットのために空になったコミットは削除されます。これらのコミットを強制的に含めるには、 &lt;code&gt;--keep-redundant-commits&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="99709c182dff4928785c30a9c26112a6276f34d2" translate="yes" xml:space="preserve">
          <source>By default, each output file is numbered sequentially from 1, and uses the first line of the commit message (massaged for pathname safety) as the filename. With the &lt;code&gt;--numbered-files&lt;/code&gt; option, the output file names will only be numbers, without the first line of the commit appended. The names of the output files are printed to standard output, unless the &lt;code&gt;--stdout&lt;/code&gt; option is specified.</source>
          <target state="translated">デフォルトでは、各出力ファイルには1から順番に番号が付けられ、ファイル名として（パス名の安全性のために管理される）コミットメッセージの最初の行を使用します。 &lt;code&gt;--numbered-files&lt;/code&gt; オプション、出力ファイル名は、添付のコミットの最初の行せずに、数字になります。 &lt;code&gt;--stdout&lt;/code&gt; オプションが指定されていない限り、出力ファイルの名前は標準出力に出力されます。</target>
        </trans-unit>
        <trans-unit id="3d27fcf4c77eeb925cb728d43582e85b263ea253" translate="yes" xml:space="preserve">
          <source>By default, files recorded in the index but not checked out are reported as deleted. This flag makes &lt;code&gt;git diff-index&lt;/code&gt; say that all non-checked-out files are up to date.</source>
          <target state="translated">デフォルトでは、インデックスに記録されているがチェックアウトされていないファイルは、削除されたものとして報告されます。このフラグにより​​、 &lt;code&gt;git diff-index&lt;/code&gt; は、チェックアウトされていないすべてのファイルが最新であることを通知します。</target>
        </trans-unit>
        <trans-unit id="96d263210b58deac758523391a09d64f715778b1" translate="yes" xml:space="preserve">
          <source>By default, git checks if a branch is force-updated during fetch. Pass --no-show-forced-updates or set fetch.showForcedUpdates to false to skip this check for performance reasons. If used during &lt;code&gt;git-pull&lt;/code&gt; the --ff-only option will still check for forced updates before attempting a fast-forward update. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、gitはフェッチ中にブランチが強制的に更新されているかどうかを確認します。--no-show-forced-updatesを渡すか、fetch.showForcedUpdatesをfalseに設定して、パフォーマンス上の理由からこのチェックをスキップします。 &lt;code&gt;git-pull&lt;/code&gt; 中に使用された場合、-ff-onlyオプションは、早送り更新を試みる前に、強制更新をチェックします。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bcd22a0eaa98a42d194f3bb1ae51915a7ffdb1a6" translate="yes" xml:space="preserve">
          <source>By default, git checks if a branch is force-updated during fetch. This can be disabled through fetch.showForcedUpdates, but the --show-forced-updates option guarantees this check occurs. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、gitはフェッチ中にブランチが強制的に更新されているかどうかを確認します。これはfetch.showForcedUpdatesで無効にできますが、-show-forced-updatesオプションはこのチェックが行われることを保証します。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dd1e0c76aa334eb061df6d08bfae08afe6a12c47" translate="yes" xml:space="preserve">
          <source>By default, git-receive-pack will advertise the atomic push capability to its clients. If you don&amp;rsquo;t want to advertise this capability, set this variable to false.</source>
          <target state="translated">デフォルトでは、git-receive-packはアトミックプッシュ機能をクライアントにアドバタイズします。この機能を宣伝したくない場合は、この変数をfalseに設定します。</target>
        </trans-unit>
        <trans-unit id="1a975a4b5c6ec62cbf8bcd46f9c353ac381aea16" translate="yes" xml:space="preserve">
          <source>By default, git-receive-pack will run &quot;git-gc --auto&quot; after receiving data from git-push and updating refs. You can stop it by setting this variable to false.</source>
          <target state="translated">デフォルトでは、git-receive-packはgit-pushからデータを受け取ってrefを更新した後に &quot;git-gc --auto &quot;を実行します。この変数に false を設定することで停止させることができます。</target>
        </trans-unit>
        <trans-unit id="a70c8c423de4cae10f96eacc568cc485314e2875" translate="yes" xml:space="preserve">
          <source>By default, notes are saved to and read from &lt;code&gt;refs/notes/commits&lt;/code&gt;, but this default can be overridden. See the OPTIONS, CONFIGURATION, and ENVIRONMENT sections below. If this ref does not exist, it will be quietly created when it is first needed to store a note.</source>
          <target state="translated">デフォルトでは、メモは &lt;code&gt;refs/notes/commits&lt;/code&gt; に保存され、そこから読み取られますが、このデフォルトは上書きできます。以下の「オプション」、「構成」、および「環境」のセクションを参照してください。この参照が存在しない場合、最初にメモを保存する必要があるときに静かに作成されます。</target>
        </trans-unit>
        <trans-unit id="7db5a2446c4341c306923f095d2e7f8486b88ca6" translate="yes" xml:space="preserve">
          <source>By default, only &lt;code&gt;upload-pack&lt;/code&gt; service is enabled, which serves &lt;code&gt;git fetch-pack&lt;/code&gt; and &lt;code&gt;git ls-remote&lt;/code&gt; clients, which are invoked from &lt;code&gt;git fetch&lt;/code&gt;, &lt;code&gt;git pull&lt;/code&gt;, and &lt;code&gt;git clone&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;upload-pack&lt;/code&gt; サービスのみが有効になっており、 &lt;code&gt;git fetch-pack&lt;/code&gt; および &lt;code&gt;git ls-remote&lt;/code&gt; クライアントにサービスを提供します。これらのクライアントは、 &lt;code&gt;git fetch&lt;/code&gt; 、 &lt;code&gt;git pull&lt;/code&gt; 、および &lt;code&gt;git clone&lt;/code&gt; から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d1846d634d738a19049ad205d84e7a2d6c7d9843" translate="yes" xml:space="preserve">
          <source>By default, only tags on fetched branches are imported (see &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;).</source>
          <target state="translated">デフォルトでは、フェッチされたブランチのタグのみがインポートされます（&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="330929bfac5b0158d7117057a21f395479839e07" translate="yes" xml:space="preserve">
          <source>By default, only the &lt;code&gt;upload-pack&lt;/code&gt; service is enabled, which serves &lt;code&gt;git fetch-pack&lt;/code&gt; and &lt;code&gt;git ls-remote&lt;/code&gt; clients, which are invoked from &lt;code&gt;git fetch&lt;/code&gt;, &lt;code&gt;git pull&lt;/code&gt;, and &lt;code&gt;git clone&lt;/code&gt;. If the client is authenticated, the &lt;code&gt;receive-pack&lt;/code&gt; service is enabled, which serves &lt;code&gt;git send-pack&lt;/code&gt; clients, which is invoked from &lt;code&gt;git push&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、唯一の &lt;code&gt;upload-pack&lt;/code&gt; サービスが提供され、有効になっている &lt;code&gt;git fetch-pack&lt;/code&gt; と &lt;code&gt;git ls-remote&lt;/code&gt; から起動されているクライアント、 &lt;code&gt;git fetch&lt;/code&gt; 、 &lt;code&gt;git pull&lt;/code&gt; 、および &lt;code&gt;git clone&lt;/code&gt; 。クライアントが認証されると、 &lt;code&gt;receive-pack&lt;/code&gt; &lt;code&gt;git push&lt;/code&gt; サービスが有効になり、git push &lt;code&gt;git send-pack&lt;/code&gt; から呼び出されるgit send-packクライアントにサービスを提供します。</target>
        </trans-unit>
        <trans-unit id="0265af70a38c5e98df8aec91888bb8ebd90e0b3b" translate="yes" xml:space="preserve">
          <source>By default, or when &lt;code&gt;no-rebase-cousins&lt;/code&gt; was specified, commits which do not have &lt;code&gt;&amp;lt;upstream&amp;gt;&lt;/code&gt; as direct ancestor will keep their original branch point, i.e. commits that would be excluded by &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;'s &lt;code&gt;--ancestry-path&lt;/code&gt; option will keep their original ancestry by default. If the &lt;code&gt;rebase-cousins&lt;/code&gt; mode is turned on, such commits are instead rebased onto &lt;code&gt;&amp;lt;upstream&amp;gt;&lt;/code&gt; (or &lt;code&gt;&amp;lt;onto&amp;gt;&lt;/code&gt;, if specified).</source>
          <target state="translated">デフォルト、または &lt;code&gt;no-rebase-cousins&lt;/code&gt; が指定された場合、直接の祖先として &lt;code&gt;&amp;lt;upstream&amp;gt;&lt;/code&gt; を持たないコミットは、元のブランチポイントを維持します。つまり、&lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt;の &lt;code&gt;--ancestry-path&lt;/code&gt; によって除外されるコミットパスオプションは、デフォルトで元の祖先を保持します。場合 &lt;code&gt;rebase-cousins&lt;/code&gt; モードがオンになっている、そのようなコミットは、代わりにリベースされている &lt;code&gt;&amp;lt;upstream&amp;gt;&lt;/code&gt; （または &lt;code&gt;&amp;lt;onto&amp;gt;&lt;/code&gt; 、指定されている場合）。</target>
        </trans-unit>
        <trans-unit id="37d300d0f44033465a93b6aee94bab48b54dbf53" translate="yes" xml:space="preserve">
          <source>By default, p4 branches are stored in &lt;code&gt;refs/remotes/p4/&lt;/code&gt;, where they will be treated as remote-tracking branches by &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; and other commands. This option instead puts p4 branches in &lt;code&gt;refs/heads/p4/&lt;/code&gt;. Note that future sync operations must specify &lt;code&gt;--import-local&lt;/code&gt; as well so that they can find the p4 branches in refs/heads.</source>
          <target state="translated">デフォルトでは、p4ブランチは &lt;code&gt;refs/remotes/p4/&lt;/code&gt; に格納され、&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;およびその他のコマンドによってリモート追跡ブランチとして扱われます。このオプションは、代わりにp4ブランチを &lt;code&gt;refs/heads/p4/&lt;/code&gt; ます。将来の同期操作では、ref / headsでp4ブランチを見つけることができるように &lt;code&gt;--import-local&lt;/code&gt; も指定する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="52600650ec12082f5a2bcdafd01bd7a6322055cf" translate="yes" xml:space="preserve">
          <source>By default, rebasing commits with an empty message will fail. This option overrides that behavior, allowing commits with empty messages to be rebased.</source>
          <target state="translated">デフォルトでは、空のメッセージを含むコミットのリベースは失敗します。このオプションはこの動作を無効にし、空のメッセージを持つコミットをリベースできるようにします。</target>
        </trans-unit>
        <trans-unit id="aab8804804be7a1049e7aa89e2807caa0461793c" translate="yes" xml:space="preserve">
          <source>By default, running a command such as &lt;code&gt;git fast-export
master~5..master&lt;/code&gt; will not include the commit master~5 and will make master~4 no longer have master~5 as a parent (though both the old master~4 and new master~4 will have all the same files). Use --reference-excluded-parents to instead have the stream refer to commits in the excluded range of history by their sha1sum. Note that the resulting stream can only be used by a repository which already contains the necessary parent commits.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;git fast-export master~5..master&lt;/code&gt; などのコマンドを実行すると、コミットmaster〜5が含まれず、master〜4は親としてmaster〜5を持たなくなります（ただし、古いmaster〜4と新しいマスター〜4にはすべて同じファイルが含まれます）。代わりに--reference-excluded-parentsを使用して、ストリームがsha1sumによって履歴の除外された範囲内のコミットを参照するようにします。結果のストリームは、必要な親コミットがすでに含まれているリポジトリでのみ使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d83beffd98b552e4707fcc4f203041336c446345" translate="yes" xml:space="preserve">
          <source>By default, shows the tags, heads, and remote refs.</source>
          <target state="translated">デフォルトでは、タグ、ヘッド、リモート参照を表示します。</target>
        </trans-unit>
        <trans-unit id="9534d3a85e2055ad7b75dcf81f0ec911d150730a" translate="yes" xml:space="preserve">
          <source>By default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. &lt;code&gt;medium&lt;/code&gt;, which is the default, &lt;code&gt;full&lt;/code&gt;, and &lt;code&gt;fuller&lt;/code&gt;).</source>
          <target state="translated">デフォルトでは、タブはかなりの形式で展開され、ログメッセージは4つのスペースでインデントされます（つまり、デフォルトである &lt;code&gt;medium&lt;/code&gt; 、 &lt;code&gt;full&lt;/code&gt; 、および &lt;code&gt;fuller&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f8c576d24c20a06a3fa3293a553efd1880bf67bd" translate="yes" xml:space="preserve">
          <source>By default, tags that point at objects that are downloaded from the remote repository are fetched and stored locally. This option disables this automatic tag following. The default behavior for a remote may be specified with the remote.&amp;lt;name&amp;gt;.tagOpt setting. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、リモートリポジトリからダウンロードされたオブジェクトを指すタグがフェッチされ、ローカルに保存されます。このオプションは、この自動タグ追跡を無効にします。リモートのデフォルトの動作は、remote。&amp;lt;name&amp;gt; .tagOpt設定で指定できます。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ffdb9a1efc1700312a38f928a2009acf370d9974" translate="yes" xml:space="preserve">
          <source>By default, the branches and their commits are shown in reverse chronological order. This option makes them appear in topological order (i.e., descendant commits are shown before their parents).</source>
          <target state="translated">デフォルトでは、ブランチとそのコミットは逆の時系列で表示されます。このオプションを指定すると、ブランチとそのコミットがトポロジカルな順序で表示されます (つまり、子孫のコミットは親の前に表示されます)。</target>
        </trans-unit>
        <trans-unit id="7d6c7baaf0bf9e427c6cfd338efdec2fba7e7759" translate="yes" xml:space="preserve">
          <source>By default, the command outputs warning messages but applies the patch. When &lt;code&gt;git-apply&lt;/code&gt; is used for statistics and not applying a patch, it defaults to &lt;code&gt;nowarn&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、コマンドは警告メッセージを出力しますが、パッチを適用します。とき &lt;code&gt;git-apply&lt;/code&gt; 統計に使用され、パッチには、デフォルトを適用していない &lt;code&gt;nowarn&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a611e350871da16559e274274576dfaf4df893f3" translate="yes" xml:space="preserve">
          <source>By default, the command passes &lt;code&gt;--delta-base-offset&lt;/code&gt; option to &lt;code&gt;git pack-objects&lt;/code&gt;; this typically results in slightly smaller packs, but the generated packs are incompatible with versions of Git older than version 1.4.4. If you need to share your repository with such ancient Git versions, either directly or via the dumb http protocol, then you need to set the configuration variable &lt;code&gt;repack.UseDeltaBaseOffset&lt;/code&gt; to &quot;false&quot; and repack. Access from old Git versions over the native protocol is unaffected by this option as the conversion is performed on the fly as needed in that case.</source>
          <target state="translated">デフォルトでは、コマンドは &lt;code&gt;--delta-base-offset&lt;/code&gt; オプションを &lt;code&gt;git pack-objects&lt;/code&gt; に渡します。通常、これにより、パックはわずかに小さくなりますが、生成されたパックは、バージョン1.4.4より前のバージョンのGitと互換性がありません。このような古いGitバージョンと直接またはダムのhttpプロトコルを介してリポジトリを共有する必要がある場合は、構成変数 &lt;code&gt;repack.UseDeltaBaseOffset&lt;/code&gt; を &quot;false&quot;に設定して再パックする必要があります。ネイティブプロトコルを介した古いGitバージョンからのアクセスは、このオプションの影響を受けません。その場合、必要に応じてオンザフライで変換が実行されるためです。</target>
        </trans-unit>
        <trans-unit id="4f861a2e54471285f5e27b71719f8d0cdb51509e" translate="yes" xml:space="preserve">
          <source>By default, the command shows the filename for each match. &lt;code&gt;-h&lt;/code&gt; option is used to suppress this output. &lt;code&gt;-H&lt;/code&gt; is there for completeness and does not do anything except it overrides &lt;code&gt;-h&lt;/code&gt; given earlier on the command line.</source>
          <target state="translated">デフォルトでは、コマンドは一致ごとにファイル名を表示します。 &lt;code&gt;-h&lt;/code&gt; オプションは、この出力を抑制するために使用されます。 &lt;code&gt;-H&lt;/code&gt; は完全を &lt;code&gt;-h&lt;/code&gt; ためにあり、コマンドラインで前に指定した-hを上書きする以外は何もしません。</target>
        </trans-unit>
        <trans-unit id="13a9b6e24e13c9eb4f96f597a6a5cd1c71b0690a" translate="yes" xml:space="preserve">
          <source>By default, the commands above can be executed only with the &lt;code&gt;-c&lt;/code&gt; option; the shell is not interactive.</source>
          <target state="translated">デフォルトでは、上記のコマンドは &lt;code&gt;-c&lt;/code&gt; オプションでのみ実行できます。シェルはインタラクティブではありません。</target>
        </trans-unit>
        <trans-unit id="96284dfd9f407661b68729a78fcd24af10b360fa" translate="yes" xml:space="preserve">
          <source>By default, the commits are shown in reverse chronological order.</source>
          <target state="translated">デフォルトでは、コミットは逆の時系列で表示されます。</target>
        </trans-unit>
        <trans-unit id="41e61e3f14f2f076835cbd248b96763ec755aaf1" translate="yes" xml:space="preserve">
          <source>By default, the configuration flag &lt;code&gt;receive.denyNonFastForwards&lt;/code&gt; is enabled in shared repositories, so that you cannot force a non fast-forwarding push into it.</source>
          <target state="translated">デフォルトでは、共有リポジトリーで構成フラグ &lt;code&gt;receive.denyNonFastForwards&lt;/code&gt; が有効になっているため、非早送りプッシュを強制することはできません。</target>
        </trans-unit>
        <trans-unit id="96f5a0af42c4430da235fb8eb151d52244069b6f" translate="yes" xml:space="preserve">
          <source>By default, the notes shown are from the notes refs listed in the &lt;code&gt;core.notesRef&lt;/code&gt; and &lt;code&gt;notes.displayRef&lt;/code&gt; variables (or corresponding environment overrides). See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for more details.</source>
          <target state="translated">デフォルトでは、表示されるノートは、 &lt;code&gt;core.notesRef&lt;/code&gt; および &lt;code&gt;notes.displayRef&lt;/code&gt; 変数（または対応する環境のオーバーライド）にリストされているノート参照からのものです。詳細については、&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="720f82840fb154598c30c373c9317d22846223a4" translate="yes" xml:space="preserve">
          <source>By default, the output omits merges that are reachable from only one tip being shown. This option makes them visible.</source>
          <target state="translated">既定では、表示されている1つのチップのみから到達可能なマージは出力されません。このオプションは、それらを表示します。</target>
        </trans-unit>
        <trans-unit id="5af8b38407e84c0cf68e927bffe60812fcb3c4e9" translate="yes" xml:space="preserve">
          <source>By default, the repository &quot;config&quot; file is shared across all working trees. If the config variables &lt;code&gt;core.bare&lt;/code&gt; or &lt;code&gt;core.worktree&lt;/code&gt; are already present in the config file, they will be applied to the main working trees only.</source>
          <target state="translated">デフォルトでは、リポジトリの「設定」ファイルはすべての作業ツリーで共有されます。構成変数 &lt;code&gt;core.bare&lt;/code&gt; または &lt;code&gt;core.worktree&lt;/code&gt; が構成ファイルにすでに存在する場合、それらはメインの作業ツリーにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="973434bf7e817a557d276186c33c139503bc7733" translate="yes" xml:space="preserve">
          <source>By default, the restore sources for working tree and the index are the index and &lt;code&gt;HEAD&lt;/code&gt; respectively. &lt;code&gt;--source&lt;/code&gt; could be used to specify a commit as the restore source.</source>
          <target state="translated">デフォルトでは、作業ツリーとインデックスの復元ソースはそれぞれインデックスと &lt;code&gt;HEAD&lt;/code&gt; です。 &lt;code&gt;--source&lt;/code&gt; を使用して、コミットを復元ソースとして指定できます。</target>
        </trans-unit>
        <trans-unit id="6198a2f3a4209e82ce868cd683f2d31abc69a314" translate="yes" xml:space="preserve">
          <source>By default, the sparse-checkout file uses the same syntax as &lt;code&gt;.gitignore&lt;/code&gt; files.</source>
          <target state="translated">デフォルトでは、sparse-checkoutファイルは &lt;code&gt;.gitignore&lt;/code&gt; ファイルと同じ構文を使用します。</target>
        </trans-unit>
        <trans-unit id="22a25d0b8a2e5ce87fbc59e939918c48f09b2958" translate="yes" xml:space="preserve">
          <source>By default, the subject of a single patch is &quot;[PATCH] &quot; followed by the concatenation of lines from the commit message up to the first blank line (see the DISCUSSION section of &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;).</source>
          <target state="translated">デフォルトでは、単一のパッチの件名は &quot;[PATCH]&quot;で、その後にコミットメッセージから最初の空白行までの行が連結されます（&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;のDISCUSSIONセクションを参照）。</target>
        </trans-unit>
        <trans-unit id="9704a5c766445678507f7af7f587edd379d84cf0" translate="yes" xml:space="preserve">
          <source>By default, this uses the same built-in 3-way merge driver as is the case when the &lt;code&gt;merge&lt;/code&gt; attribute is set. However, the &lt;code&gt;merge.default&lt;/code&gt; configuration variable can name different merge driver to be used with paths for which the &lt;code&gt;merge&lt;/code&gt; attribute is unspecified.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;merge&lt;/code&gt; 属性が設定されている場合と同じ組み込みの3ウェイマージドライバーが使用されます。ただし、 &lt;code&gt;merge.default&lt;/code&gt; 構成変数は、 &lt;code&gt;merge&lt;/code&gt; 属性が指定されていないパスで使用される別のマージドライバーに名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="fb719865937ac64c446567c5ed40eaa328116bc6" translate="yes" xml:space="preserve">
          <source>By default, this will return your tree to the commit that was checked out before &lt;code&gt;git bisect start&lt;/code&gt;. (A new &lt;code&gt;git bisect start&lt;/code&gt; will also do that, as it cleans up the old bisection state.)</source>
          <target state="translated">デフォルトでは、これは &lt;code&gt;git bisect start&lt;/code&gt; の前にチェックアウトされたコミットにツリーを戻します。（新しい &lt;code&gt;git bisect start&lt;/code&gt; も古い二等分状態をクリーンアップするのでそれを行います。）</target>
        </trans-unit>
        <trans-unit id="d0131180d6acb72b151d5763656b5ee5ec67d9f6" translate="yes" xml:space="preserve">
          <source>By default, tracked files are not shown at all since they are not subject to exclude rules; but see &amp;lsquo;--no-index&amp;rsquo;.</source>
          <target state="translated">デフォルトでは、追跡されたファイルは除外ルールの対象ではないため、表示されません。ただし、「-no-index」を参照してください。</target>
        </trans-unit>
        <trans-unit id="055c65bfcac14882dd3e00e849a98c92a82c1b80" translate="yes" xml:space="preserve">
          <source>By default, when a file &lt;code&gt;path&lt;/code&gt; exists in the index, &lt;code&gt;git update-index&lt;/code&gt; refuses an attempt to add &lt;code&gt;path/file&lt;/code&gt;. Similarly if a file &lt;code&gt;path/file&lt;/code&gt; exists, a file &lt;code&gt;path&lt;/code&gt; cannot be added. With --replace flag, existing entries that conflict with the entry being added are automatically removed with warning messages.</source>
          <target state="translated">デフォルトでは、ファイル &lt;code&gt;path&lt;/code&gt; がインデックスに存在する場合、 &lt;code&gt;git update-index&lt;/code&gt; は &lt;code&gt;path/file&lt;/code&gt; を追加する試みを拒否します。同様に、ファイル &lt;code&gt;path/file&lt;/code&gt; が存在する場合、ファイル &lt;code&gt;path&lt;/code&gt; を追加できません。--replaceフラグを使用すると、追加されるエントリと競合する既存のエントリは自動的に削除され、警告メッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="299147d01326bdbf4534148e9d9d3fd6c07e2d71" translate="yes" xml:space="preserve">
          <source>By default, when running &lt;code&gt;git sparse-checkout init&lt;/code&gt;, the root directory is added as a parent pattern. At this point, the sparse-checkout file contains the following patterns:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;git sparse-checkout init&lt;/code&gt; を実行すると、ルートディレクトリが親パターンとして追加されます。この時点で、sparse-checkoutファイルには次のパターンが含まれています。</target>
        </trans-unit>
        <trans-unit id="93102cd6e4e7e1fd617df0a6116a6e8dabe44d67" translate="yes" xml:space="preserve">
          <source>By design, Git treats data trusted to it with caution. However, even in the absence of bugs in Git itself, it is still possible that hardware or operating system errors could corrupt data.</source>
          <target state="translated">設計上、Git は信頼されたデータを慎重に扱います。しかし、Git自体にバグがなかったとしても、ハードウェアやオペレーティングシステムのエラーでデータが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0405b4cdacdc12c8e141d09b19a221661400dcb6" translate="yes" xml:space="preserve">
          <source>By examining &lt;code&gt;t/.gitattributes&lt;/code&gt; (which is in the same directory as the path in question), Git finds that the first line matches. &lt;code&gt;merge&lt;/code&gt; attribute is set. It also finds that the second line matches, and attributes &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; are unset.</source>
          <target state="translated">（問題のパスと同じディレクトリにある） &lt;code&gt;t/.gitattributes&lt;/code&gt; を調べると、Gitは最初の行が一致することを検出します。 &lt;code&gt;merge&lt;/code&gt; 属性が設定されています。また、2行目が一致し、属性 &lt;code&gt;foo&lt;/code&gt; と &lt;code&gt;bar&lt;/code&gt; が設定されていないこともわかります。</target>
        </trans-unit>
        <trans-unit id="6019b6edc3f8183a9650b814f1e96d2397d6c92e" translate="yes" xml:space="preserve">
          <source>By now, you know what the index is (and find the corresponding data structures in &lt;code&gt;cache.h&lt;/code&gt;), and that there are just a couple of object types (blobs, trees, commits and tags) which inherit their common structure from &lt;code&gt;struct object&lt;/code&gt;, which is their first member (and thus, you can cast e.g. &lt;code&gt;(struct object *)commit&lt;/code&gt; to achieve the &lt;code&gt;same&lt;/code&gt; as &lt;code&gt;&amp;amp;commit&amp;rarr;object&lt;/code&gt;, i.e. get at the object name and flags).</source>
          <target state="translated">ここまでで、インデックスとは何か（そして &lt;code&gt;cache.h&lt;/code&gt; で対応するデータ構造を見つけること）、そして &lt;code&gt;struct object&lt;/code&gt; から共通の構造を継承するオブジェクトタイプ（ブロブ、ツリー、コミット、タグ）がいくつかあることがわかります。これは最初のメンバーです（したがって、たとえば &lt;code&gt;(struct object *)commit&lt;/code&gt; をキャストして &lt;code&gt;&amp;amp;commit&amp;rarr;object&lt;/code&gt; &lt;code&gt;same&lt;/code&gt; ように、つまりオブジェクト名とフラグを取得できます）。</target>
        </trans-unit>
        <trans-unit id="7fc0a0343ad2fdcba9cb4eccfe4e06a4bbef7383" translate="yes" xml:space="preserve">
          <source>By replacing the command &quot;pick&quot; with the command &quot;edit&quot;, you can tell &lt;code&gt;git rebase&lt;/code&gt; to stop after applying that commit, so that you can edit the files and/or the commit message, amend the commit, and continue rebasing.</source>
          <target state="translated">コマンド「pick」をコマンド「edit」で置き換えることにより、そのコミットの適用後に停止するように &lt;code&gt;git rebase&lt;/code&gt; に指示できるため、ファイルやコミットメッセージを編集し、コミットを修正して、リベースを続行できます。</target>
        </trans-unit>
        <trans-unit id="38723ef3d6552eb371410d9afcccdbb440b0f54e" translate="yes" xml:space="preserve">
          <source>By setting this variable to a string, &lt;code&gt;git receive-pack&lt;/code&gt; will accept a &lt;code&gt;git push --signed&lt;/code&gt; and verifies it by using a &quot;nonce&quot; protected by HMAC using this string as a secret key.</source>
          <target state="translated">この変数を文字列に設定すると、 &lt;code&gt;git receive-pack&lt;/code&gt; は &lt;code&gt;git push --signed&lt;/code&gt; を受け入れ、この文字列を秘密鍵として使用してHMACで保護された「ナンス」を使用して検証します。</target>
        </trans-unit>
        <trans-unit id="b0ec84a28e8863d61bfe49155bbc56f1b080a18a" translate="yes" xml:space="preserve">
          <source>By specifying &lt;code&gt;base&lt;/code&gt; as the limit, you can avoid listing commits between &lt;code&gt;base&lt;/code&gt; and &lt;code&gt;topic&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;base&lt;/code&gt; を制限として指定することにより、 &lt;code&gt;base&lt;/code&gt; と &lt;code&gt;topic&lt;/code&gt; の間のコミットのリストを回避できます。</target>
        </trans-unit>
        <trans-unit id="bac0dcb4a691d6bbb7adf78bc3225e969e991ed2" translate="yes" xml:space="preserve">
          <source>By specifying a single suffix in this variable, any tagname containing that suffix will appear before the corresponding main release. E.g. if the variable is set to &quot;-rc&quot;, then all &quot;1.0-rcX&quot; tags will appear before &quot;1.0&quot;. If specified multiple times, once per suffix, then the order of suffixes in the configuration will determine the sorting order of tagnames with those suffixes. E.g. if &quot;-pre&quot; appears before &quot;-rc&quot; in the configuration, then all &quot;1.0-preX&quot; tags will be listed before any &quot;1.0-rcX&quot; tags. The placement of the main release tag relative to tags with various suffixes can be determined by specifying the empty suffix among those other suffixes. E.g. if the suffixes &quot;-rc&quot;, &quot;&quot;, &quot;-ck&quot; and &quot;-bfs&quot; appear in the configuration in this order, then all &quot;v4.8-rcX&quot; tags are listed first, followed by &quot;v4.8&quot;, then &quot;v4.8-ckX&quot; and finally &quot;v4.8-bfsX&quot;.</source>
          <target state="translated">この変数に単一のサフィックスを指定すると、そのサフィックスを含むタグ名は、対応するメインリリースの前に表示されます。例えば、この変数に &quot;-rc&quot; を指定すると、すべての &quot;1.0-rcX&quot; タグは &quot;1.0&quot; の前に表示されます。サフィックスごとに複数回指定した場合、設定のサフィックスの順番によって、そのサフィックスを持つタグ名のソート順が決定されます。例えば、設定で&quot;-rc &quot;の前に&quot;-pre &quot;が指定されている場合、すべての &quot;1.0-preX &quot;タグが &quot;1.0-rcX &quot;タグの前にリストアップされます。様々なサフィックスを持つタグに対するメインリリースタグの相対的な配置は、他のサフィックスの中から空のサフィックスを指定することで決定することができます。例えば、&quot;-rc&quot;,&quot;&quot;,&quot;-ck&quot;,&quot;-bfs&quot; の順に表示された場合、&quot;v4.8-rcX&quot; タグが最初に表示され、&quot;v4.8&quot;、&quot;v4.8-ckX&quot;、&quot;v4.8-bfsX&quot; の順に表示されます。</target>
        </trans-unit>
        <trans-unit id="73d10606466530ea834324e2af3cd4f5fdf3b7ef" translate="yes" xml:space="preserve">
          <source>By using &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt; arguments, e.g., path limiters, you can limit the set of revisions which get rewritten. However, positive refs on the command line are distinguished: we don&amp;rsquo;t let them be excluded by such limiters. For this purpose, they are instead rewritten to point at the nearest ancestor that was not excluded.</source>
          <target state="translated">使用すると&lt;a href=&quot;git-rev-list&quot;&gt;、[1]のgit-REV-リストを&lt;/a&gt;、例えば、引数のパスリミッタを、あなたはリライトリビジョンのセットを制限することができます。ただし、コマンドラインでの正の参照は区別されます。このようなリミッターによって除外されることはありません。この目的のために、除外されなかった最も近い祖先を指すように書き換えられます。</target>
        </trans-unit>
        <trans-unit id="2fbc7b3eb43b76b2746e664c28cb9ad054eb9a86" translate="yes" xml:space="preserve">
          <source>Bypass the post-rewrite hook.</source>
          <target state="translated">リライト後のフックをバイパスします。</target>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="2b7976aa8c8ee62577557b0faf6cd45c7d87d599" translate="yes" xml:space="preserve">
          <source>C: copy of a file into a new one</source>
          <target state="translated">C:ファイルを新しいものにコピーする</target>
        </trans-unit>
        <trans-unit id="8cb2e80198d1a22ece7b2150ad287e7b39ba33cd" translate="yes" xml:space="preserve">
          <source>CHUNK DATA:</source>
          <target state="translated">チャンクデータ。</target>
        </trans-unit>
        <trans-unit id="9da2b59eccc71e5c2791bd9f721e6de7f9e4a527" translate="yes" xml:space="preserve">
          <source>CHUNK LOOKUP:</source>
          <target state="translated">CHUNK LOOKUP。</target>
        </trans-unit>
        <trans-unit id="025c408a5504f0e808d096b14c696e6a19ee3cbf" translate="yes" xml:space="preserve">
          <source>CONTENT_TYPE</source>
          <target state="translated">CONTENT_TYPE</target>
        </trans-unit>
        <trans-unit id="45649b220c5ae097eced7a136897aeb49a47599c" translate="yes" xml:space="preserve">
          <source>CRLF Line Ending Conversions</source>
          <target state="translated">CRLFラインエンディング変換</target>
        </trans-unit>
        <trans-unit id="4d982ea44c2ace64324fd7fbacbc4c4d91f3e200" translate="yes" xml:space="preserve">
          <source>CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only LF line endings in the repository. But for binary files that are accidentally classified as text the conversion can corrupt data.</source>
          <target state="translated">CRLF 変換はデータが破損する可能性がわずかにあります。これを有効にすると、Git はコミット時に CRLF を LF に、チェックアウト時に LF を CRLF に変換します。コミット前にLFとCRLFが混在していたファイルは、Gitによって再作成できません。テキストファイルの場合は、これは正しいことです。しかし、誤ってテキストとして分類されてしまったバイナリファイルの場合は、変換によってデータが破損してしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="b2dadeb076c332a230cd3f419ccce73fc473e9b1" translate="yes" xml:space="preserve">
          <source>CVS 1.11.17 on MacOSX (from Fink package)</source>
          <target state="translated">MacOSX での CVS 1.11.17 (Fink パッケージから)</target>
        </trans-unit>
        <trans-unit id="31ba0d2766dea7911d9b0133542d1dae7c40d21b" translate="yes" xml:space="preserve">
          <source>CVS 1.12.9 on Debian</source>
          <target state="translated">CVS 1.12.9 on Debian</target>
        </trans-unit>
        <trans-unit id="c10230da83b7ef151899f83d727ffc465e699ce7" translate="yes" xml:space="preserve">
          <source>CVS by default uses the Unix username when writing its commit logs. Using this option and an author-conv-file maps the name recorded in CVS to author name, e-mail and optional time zone:</source>
          <target state="translated">CVS はデフォルトでは、コミットログを書くときに Unix のユーザ名を使用します。このオプションと author-conv-file を使用すると、CVS に記録された名前を著者名、電子メール、オプションのタイムゾーンにマップします。</target>
        </trans-unit>
        <trans-unit id="edcdc296b2872a295927e706b64b0873d75bd7e8" translate="yes" xml:space="preserve">
          <source>CVS clients cannot tag, branch or perform Git merges.</source>
          <target state="translated">CVS クライアントでは、タグ付けやブランチ、Git のマージはできません。</target>
        </trans-unit>
        <trans-unit id="98b46c65d5bf63821f6ce6bd595bdc32473d951c" translate="yes" xml:space="preserve">
          <source>CVS module/Git head name</source>
          <target state="translated">CVSモジュール/Gitヘッド名</target>
        </trans-unit>
        <trans-unit id="49adb1e8c5b17953ca229c40061a8d1bb5bb8b5e" translate="yes" xml:space="preserve">
          <source>CVS users are accustomed to giving a group of developers commit access to a common repository. As we&amp;rsquo;ve seen, this is also possible with Git. However, the distributed nature of Git allows other development models, and you may want to first consider whether one of them might be a better fit for your project.</source>
          <target state="translated">CVSユーザーは、開発者のグループに共通のリポジトリへのコミットアクセスを与えることに慣れています。これまで見てきたように、これはGitでも可能です。ただし、Gitの分散された性質により他の開発モデルが許可されるため、最初にそれらの1つがプロジェクトにより適しているかどうかを検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="aed153eb92fac6b914dbc191a216beb300201f66" translate="yes" xml:space="preserve">
          <source>CVS-style shared repository.</source>
          <target state="translated">CVSスタイルの共有リポジトリ。</target>
        </trans-unit>
        <trans-unit id="f52ad32f29f6847c4f98f4be5fc01986743d4aae" translate="yes" xml:space="preserve">
          <source>Cache credentials in memory for a short period of time. See &lt;a href=&quot;git-credential-cache&quot;&gt;git-credential-cache[1]&lt;/a&gt; for details.</source>
          <target state="translated">資格情報をメモリに短時間キャッシュします。詳細は&lt;a href=&quot;git-credential-cache&quot;&gt;git-credential-cache [1]&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="68d01495331ef3ec55abb430492aa431fb98900b" translate="yes" xml:space="preserve">
          <source>Cached mode</source>
          <target state="translated">キャッシュモード</target>
        </trans-unit>
        <trans-unit id="bc41c881675379eb55dc52ac754cd0a47e293c0b" translate="yes" xml:space="preserve">
          <source>Caching. Textconv caching can speed up repeated diffs, such as those you might trigger by running &lt;code&gt;git log -p&lt;/code&gt;.</source>
          <target state="translated">キャッシング。Textconvキャッシングは、 &lt;code&gt;git log -p&lt;/code&gt; を実行することでトリガーされる可能性のある差分など、繰り返される差分を高速化できます。</target>
        </trans-unit>
        <trans-unit id="b3bd71fe43527e264035373707bb05e34bacabd4" translate="yes" xml:space="preserve">
          <source>Call the corresponding server-side command to support the client&amp;rsquo;s &lt;code&gt;git push&lt;/code&gt;, &lt;code&gt;git fetch&lt;/code&gt;, or &lt;code&gt;git archive --remote&lt;/code&gt; request.</source>
          <target state="translated">対応するサーバー側コマンドを呼び出して、クライアントの &lt;code&gt;git push&lt;/code&gt; 、 &lt;code&gt;git fetch&lt;/code&gt; 、または &lt;code&gt;git archive --remote&lt;/code&gt; リクエストをサポートします。</target>
        </trans-unit>
        <trans-unit id="3907fb8eaa84bdb8f3cc45ad006023c90615ad1f" translate="yes" xml:space="preserve">
          <source>Can attempt to connect to &lt;code&gt;git receive-pack&lt;/code&gt; (for pushing), &lt;code&gt;git upload-pack&lt;/code&gt;, etc for communication using git&amp;rsquo;s native packfile protocol. This requires a bidirectional, full-duplex connection.</source>
          <target state="translated">gitのネイティブpackfileプロトコルを使用して通信するために、 &lt;code&gt;git receive-pack&lt;/code&gt; （プッシュ用）、 &lt;code&gt;git upload-pack&lt;/code&gt; などへの接続を試みることができます。これには、双方向の全二重接続が必要です。</target>
        </trans-unit>
        <trans-unit id="0c6fd80a7557d1e5d2aaff98df3b675a4f3e3e9e" translate="yes" xml:space="preserve">
          <source>Can be overridden by the &lt;code&gt;GIT_PROXY_COMMAND&lt;/code&gt; environment variable (which always applies universally, without the special &quot;for&quot; handling).</source>
          <target state="translated">&lt;code&gt;GIT_PROXY_COMMAND&lt;/code&gt; 環境変数によってオーバーライドできます（これは、特別な「for」処理なしで常に普遍的に適用されます）。</target>
        </trans-unit>
        <trans-unit id="0f39962decf24e67df63f769ebf7a91027019ae1" translate="yes" xml:space="preserve">
          <source>Can be overridden by the &lt;code&gt;GIT_SSL_CIPHER_LIST&lt;/code&gt; environment variable. To force git to use libcurl&amp;rsquo;s default cipher list and ignore any explicit http.sslCipherList option, set &lt;code&gt;GIT_SSL_CIPHER_LIST&lt;/code&gt; to the empty string.</source>
          <target state="translated">&lt;code&gt;GIT_SSL_CIPHER_LIST&lt;/code&gt; 環境変数によってオーバーライドできます。gitにlibcurlのデフォルトの暗号リストを使用させ、明示的なhttp.sslCipherListオプションを無視するには、 &lt;code&gt;GIT_SSL_CIPHER_LIST&lt;/code&gt; を空の文字列に設定します。</target>
        </trans-unit>
        <trans-unit id="29d57ff400cc012cacf16bd510a83a1f80c69dcf" translate="yes" xml:space="preserve">
          <source>Can be overridden by the &lt;code&gt;GIT_SSL_VERSION&lt;/code&gt; environment variable. To force git to use libcurl&amp;rsquo;s default ssl version and ignore any explicit http.sslversion option, set &lt;code&gt;GIT_SSL_VERSION&lt;/code&gt; to the empty string.</source>
          <target state="translated">&lt;code&gt;GIT_SSL_VERSION&lt;/code&gt; 環境変数によってオーバーライドできます。gitにlibcurlのデフォルトのsslバージョンを使用させ、明示的なhttp.sslversionオプションを無視するには、 &lt;code&gt;GIT_SSL_VERSION&lt;/code&gt; を空の文字列に設定します。</target>
        </trans-unit>
        <trans-unit id="8710d5603018e270e9135bc9b07e18583e6e40b7" translate="yes" xml:space="preserve">
          <source>Can be overridden with the &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; environment variable.</source>
          <target state="translated">&lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; 環境変数で上書きできます。</target>
        </trans-unit>
        <trans-unit id="f3ab6f60ab10fc57456b8912494e28284fd290bc" translate="yes" xml:space="preserve">
          <source>Can be set using the &lt;code&gt;GITWEB_SITENAME&lt;/code&gt; at build time. Unset by default.</source>
          <target state="translated">ビルド時に &lt;code&gt;GITWEB_SITENAME&lt;/code&gt; を使用して設定できます。デフォルトでは設定解除されています。</target>
        </trans-unit>
        <trans-unit id="217827b02c2eeb06477e279b6b6efc5d7d10ed39" translate="yes" xml:space="preserve">
          <source>Can be used in conjunction with &lt;code&gt;--single-branch&lt;/code&gt; to clone and maintain a branch with no references other than a single cloned branch. This is useful e.g. to maintain minimal clones of the default branch of some repository for search indexing.</source>
          <target state="translated">&lt;code&gt;--single-branch&lt;/code&gt; と組み合わせて使用​​すると、単一の複製されたブランチ以外の参照のないブランチを複製して維持できます。これは、たとえば、検索インデックス作成用のリポジトリのデフォルトブランチの最小限のクローンを維持する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="a9691ee782e933498eb75769eeec906fc37e3a47" translate="yes" xml:space="preserve">
          <source>Can discover remote refs and output objects reachable from them as a stream in fast-import format.</source>
          <target state="translated">リモートの参照を検出し、そこから到達可能なオブジェクトをストリームとして高速インポート形式で出力することができます。</target>
        </trans-unit>
        <trans-unit id="90035edf92bee77fbf7fe329bbc961839dc96080" translate="yes" xml:space="preserve">
          <source>Can discover remote refs and push local commits and the history leading up to them to new or existing remote refs.</source>
          <target state="translated">リモートリファレンスを発見し、ローカルのコミットとそれに至るまでの履歴を新規または既存のリモートリファレンスにプッシュすることができます。</target>
        </trans-unit>
        <trans-unit id="138c5e6b546882127de4e82d6394ea6b4a6a09ca" translate="yes" xml:space="preserve">
          <source>Can discover remote refs and push specified objects from a fast-import stream to remote refs.</source>
          <target state="translated">リモート参照を発見し、高速インポートストリームから指定されたオブジェクトをリモート参照にプッシュすることができます。</target>
        </trans-unit>
        <trans-unit id="b4530b46452bf0ddccff90b10194b6dc8dee0aff" translate="yes" xml:space="preserve">
          <source>Can discover remote refs and transfer objects reachable from them to the local object store.</source>
          <target state="translated">リモートの参照を発見し、そこから到達可能なオブジェクトをローカルのオブジェクトストアに転送することができます。</target>
        </trans-unit>
        <trans-unit id="7decaa19c2a5956f9383448e881b3336964a5bef" translate="yes" xml:space="preserve">
          <source>Can guarantee that when a clone is requested, the received pack is self contained and is connected.</source>
          <target state="translated">クローンが要求されたときに、受信したパックが自己完結して接続されていることを保証することができます。</target>
        </trans-unit>
        <trans-unit id="b7ebace43478348d6004d061ea665f140df1bb53" translate="yes" xml:space="preserve">
          <source>Can try to connect to &lt;code&gt;git upload-pack&lt;/code&gt; (for fetching), &lt;code&gt;git receive-pack&lt;/code&gt;, etc for communication using the Git&amp;rsquo;s native packfile protocol. This requires a bidirectional, full-duplex connection.</source>
          <target state="translated">Gitのネイティブpackfileプロトコルを使用して通信するために、 &lt;code&gt;git upload-pack&lt;/code&gt; （フェッチ用）、 &lt;code&gt;git receive-pack&lt;/code&gt; などへの接続を試みることができます。これには、双方向の全二重接続が必要です。</target>
        </trans-unit>
        <trans-unit id="4cb14361f0a5ad881a24c94d8c006e5f643d8a87" translate="yes" xml:space="preserve">
          <source>Cancel the operation and return to the pre-sequence state.</source>
          <target state="translated">操作をキャンセルして、シーケンス前の状態に戻ります。</target>
        </trans-unit>
        <trans-unit id="ca09c54bff74a82bae543ebe259f7452ee8c5293" translate="yes" xml:space="preserve">
          <source>Capabilities</source>
          <target state="translated">Capabilities</target>
        </trans-unit>
        <trans-unit id="20243c460d0e899aa2ea919e5a33ddf3fc3c28ee" translate="yes" xml:space="preserve">
          <source>Capabilities for Fetching</source>
          <target state="translated">フェッチ機能</target>
        </trans-unit>
        <trans-unit id="2cf429aa6c517aac8e25fa8619402627623a5d1f" translate="yes" xml:space="preserve">
          <source>Capabilities for Pushing</source>
          <target state="translated">プッシュ機能</target>
        </trans-unit>
        <trans-unit id="a02cd245f4a5359f48f45e974d4d2aeb3f737ec2" translate="yes" xml:space="preserve">
          <source>Capability advertisement</source>
          <target state="translated">能力広告</target>
        </trans-unit>
        <trans-unit id="fbb741f1d3fe925738bd52e124aa5bcdfaec72b5" translate="yes" xml:space="preserve">
          <source>Case 3 is slightly tricky and needs explanation. The result from this rule logically should be to remove the path if the user staged the removal of the path and then switching to a new branch. That however will prevent the initial checkout from happening, so the rule is modified to use M (new tree) only when the content of the index is empty. Otherwise the removal of the path is kept as long as $H and $M are the same.</source>
          <target state="translated">ケース 3 は少しトリッキーで、説明が必要です。このルールの結果は論理的には、ユーザがパスを削除した後に新しいブランチに切り替えた場合、パスを削除するはずです。しかし、そうすると最初のチェックアウトができなくなるので、インデックスの内容が空の場合にのみ M (新しいツリー)を使用するようにルールを修正します。それ以外の場合は、$H と $M が同じである限り、パスの削除は維持されます。</target>
        </trans-unit>
        <trans-unit id="e09c27f67e4fbebb877a3f28eee7f79c8bd9d162" translate="yes" xml:space="preserve">
          <source>Case insensitive match.</source>
          <target state="translated">大文字小文字を区別しないマッチ。</target>
        </trans-unit>
        <trans-unit id="3ba6868684fb15f285ba371e8f8692f5e6c1b769" translate="yes" xml:space="preserve">
          <source>Cause the logical variables to be listed. In addition, all the variables of the Git configuration file .git/config are listed as well. (However, the configuration variables listing functionality is deprecated in favor of &lt;code&gt;git config -l&lt;/code&gt;.)</source>
          <target state="translated">論理変数をリストします。さらに、Git構成ファイル.git / configのすべての変数もリストされます。（ただし、機能を一覧表示する構成変数は &lt;code&gt;git config -l&lt;/code&gt; に置き換えられて非推奨になりました。）</target>
        </trans-unit>
        <trans-unit id="b783ff5188b18ab4ca3191c5116581bc5ecb01a2" translate="yes" xml:space="preserve">
          <source>Causes fast-import to echo the entire line to its own standard output. This command is optional and is not needed to perform an import.</source>
          <target state="translated">fast-import で、行全体をそれ自身の標準出力にエコーします。このコマンドはオプションであり、インポートを実行するためには必要ありません。</target>
        </trans-unit>
        <trans-unit id="12b02e08644454fc1547d338b5de4943ef66f77b" translate="yes" xml:space="preserve">
          <source>Causes fast-import to print a blob in &lt;code&gt;cat-file --batch&lt;/code&gt; format to the file descriptor set with &lt;code&gt;--cat-blob-fd&lt;/code&gt; or &lt;code&gt;stdout&lt;/code&gt; if unspecified.</source>
          <target state="translated">高速インポートで、BLOBを &lt;code&gt;cat-file --batch&lt;/code&gt; 形式で、 &lt;code&gt;--cat-blob-fd&lt;/code&gt; または指定されていない場合は &lt;code&gt;stdout&lt;/code&gt; で設定されたファイル記述子に出力します。</target>
        </trans-unit>
        <trans-unit id="b8e75699b5276c39faaefd045a6a5b904b73ada6" translate="yes" xml:space="preserve">
          <source>Causes fast-import to print a blob to a file descriptor previously arranged with the &lt;code&gt;--cat-blob-fd&lt;/code&gt; argument. The command otherwise has no impact on the current import; its main purpose is to retrieve blobs that may be in fast-import&amp;rsquo;s memory but not accessible from the target repository.</source>
          <target state="translated">高速インポートで、以前に &lt;code&gt;--cat-blob-fd&lt;/code&gt; 引数を使用して配置されたファイル記述子にblobを出力します。それ以外の場合、コマンドは現在のインポートに影響を与えません。その主な目的は、高速インポートのメモリにあるがターゲットリポジトリからアクセスできない可能性があるblobを取得することです。</target>
        </trans-unit>
        <trans-unit id="7ec5756843c97a7c2f1df63914ede6a2099f489a" translate="yes" xml:space="preserve">
          <source>Causes fast-import to print a line describing a directory entry in &lt;code&gt;ls-tree&lt;/code&gt; format to the file descriptor set with &lt;code&gt;--cat-blob-fd&lt;/code&gt; or &lt;code&gt;stdout&lt;/code&gt; if unspecified.</source>
          <target state="translated">fast-importは、ディレクトリエントリを説明する行を &lt;code&gt;ls-tree&lt;/code&gt; 形式で &lt;code&gt;--cat-blob-fd&lt;/code&gt; または指定されていない場合は &lt;code&gt;stdout&lt;/code&gt; で設定されたファイル記述子に出力します。</target>
        </trans-unit>
        <trans-unit id="886958bd2ea3f9b4ef6490b2b36e023c05b21b29" translate="yes" xml:space="preserve">
          <source>Causes fast-import to print the SHA-1 corresponding to a mark to stdout or to the file descriptor previously arranged with the &lt;code&gt;--cat-blob-fd&lt;/code&gt; argument. The command otherwise has no impact on the current import; its purpose is to retrieve SHA-1s that later commits might want to refer to in their commit messages.</source>
          <target state="translated">高速インポートで、マークに対応するSHA-1をstdoutに出力するか、または &lt;code&gt;--cat-blob-fd&lt;/code&gt; 引数で以前に配置されたファイル記述子に出力します。それ以外の場合、コマンドは現在のインポートに影響を与えません。その目的は、後でコミットがコミットメッセージで参照する可能性があるSHA-1を取得することです。</target>
        </trans-unit>
        <trans-unit id="a62399ea6471f58f0ac3e20d903be4ac533d6d4e" translate="yes" xml:space="preserve">
          <source>Causes fast-import to print the SHA-1 corresponding to a mark to the file descriptor set with &lt;code&gt;--cat-blob-fd&lt;/code&gt;, or &lt;code&gt;stdout&lt;/code&gt; if unspecified.</source>
          <target state="translated">高速インポートで、マークに対応するSHA-1を &lt;code&gt;--cat-blob-fd&lt;/code&gt; で設定されたファイル記述子に指定 &lt;code&gt;stdout&lt;/code&gt; か、指定されていない場合はstdoutに出力します。</target>
        </trans-unit>
        <trans-unit id="b482598ddd71627c6a7b2ff32a0b59803f8fd34f" translate="yes" xml:space="preserve">
          <source>Causes fast-import to print the entire &lt;code&gt;progress&lt;/code&gt; line unmodified to its standard output channel (file descriptor 1) when the command is processed from the input stream. The command otherwise has no impact on the current import, or on any of fast-import&amp;rsquo;s internal state.</source>
          <target state="translated">コマンドが入力ストリームから処理されるときに、高速インポートで &lt;code&gt;progress&lt;/code&gt; 行全体を変更せずに標準出力チャネル（ファイル記述子1）に出力します。それ以外の場合、コマンドは現在のインポート、または高速インポートの内部状態に影響を与えません。</target>
        </trans-unit>
        <trans-unit id="55a89527100d7affacb785a535913eceec75eda6" translate="yes" xml:space="preserve">
          <source>Caution</source>
          <target state="translated">Caution</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="62c56e9140b73b971227c6e095597a6888ab6f0b" translate="yes" xml:space="preserve">
          <source>Certain operations by Git can be influenced by assigning particular attributes to a path. Currently, the following operations are attributes-aware.</source>
          <target state="translated">Git による特定の操作は、パスに特定の属性を割り当てることで影響を受けることができます。現在のところ、以下の操作が属性を意識したものとなっています。</target>
        </trans-unit>
        <trans-unit id="ce89ebfc7c6f30e38c61f750189a14aac995df3f" translate="yes" xml:space="preserve">
          <source>Change daemon&amp;rsquo;s uid and gid before entering the service loop. When only &lt;code&gt;--user&lt;/code&gt; is given without &lt;code&gt;--group&lt;/code&gt;, the primary group ID for the user is used. The values of the option are given to &lt;code&gt;getpwnam(3)&lt;/code&gt; and &lt;code&gt;getgrnam(3)&lt;/code&gt; and numeric IDs are not supported.</source>
          <target state="translated">サービスループに入る前に、デーモンのuidとgidを変更します。 &lt;code&gt;--group&lt;/code&gt; なしで &lt;code&gt;--user&lt;/code&gt; のみを指定すると、ユーザーのプライマリグループIDが使用されます。オプションの値は &lt;code&gt;getpwnam(3)&lt;/code&gt; および &lt;code&gt;getgrnam(3)&lt;/code&gt; に与えられ、数値IDはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="f8d5e6dcdbe26b10de586e21b98816e7aa3c05a4" translate="yes" xml:space="preserve">
          <source>Change output color. Followed by &lt;code&gt;:&amp;lt;colorname&amp;gt;&lt;/code&gt;, where color names are described under Values in the &quot;CONFIGURATION FILE&quot; section of &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;. For example, &lt;code&gt;%(color:bold red)&lt;/code&gt;.</source>
          <target state="translated">出力色を変更します。続いて &lt;code&gt;:&amp;lt;colorname&amp;gt;&lt;/code&gt; 、色名が「設定ファイル」のセクションでの値の下に記載されている場合&lt;a href=&quot;git-config&quot;&gt;のgit-設定[1] &lt;/a&gt;。たとえば、 &lt;code&gt;%(color:bold red)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4e718f5f36cc4b622f94d06a68422a543373288f" translate="yes" xml:space="preserve">
          <source>Changed Tracked Entries</source>
          <target state="translated">変更された追跡されたエントリ</target>
        </trans-unit>
        <trans-unit id="a838ac0a12d74a72136f3630d86af0c9b1c990e6" translate="yes" xml:space="preserve">
          <source>Changes URLs for the remote. Sets first URL for remote &amp;lt;name&amp;gt; that matches regex &amp;lt;oldurl&amp;gt; (first URL if no &amp;lt;oldurl&amp;gt; is given) to &amp;lt;newurl&amp;gt;. If &amp;lt;oldurl&amp;gt; doesn&amp;rsquo;t match any URL, an error occurs and nothing is changed.</source>
          <target state="translated">リモートのURLを変更します。正規表現&amp;lt;oldurl&amp;gt;に一致するリモート&amp;lt;name&amp;gt;の最初のURL（&amp;lt;oldurl&amp;gt;が指定されていない場合は最初のURL）を&amp;lt;newurl&amp;gt;に設定します。&amp;lt;oldurl&amp;gt;がどのURLとも一致しない場合、エラーが発生し、何も変更されません。</target>
        </trans-unit>
        <trans-unit id="5f81b14c458a3f96e356b0db1d9a8184d3aa46df" translate="yes" xml:space="preserve">
          <source>Changes between the index and your last commit; what you would be committing if you run &quot;git commit&quot; without &quot;-a&quot; option.</source>
          <target state="translated">インデックスと最後のコミットの間の変更点。</target>
        </trans-unit>
        <trans-unit id="c2b554b2b0f0318db4bfdd8caad455aa5f11a835" translate="yes" xml:space="preserve">
          <source>Changes between the tips of the topic and the master branches.</source>
          <target state="translated">話題のヒントとマスターブランチの間で変更します。</target>
        </trans-unit>
        <trans-unit id="bb16f58635d0a49bf7d13f03eb1b1023bc073b68" translate="yes" xml:space="preserve">
          <source>Changes in the working tree not yet staged for the next commit.</source>
          <target state="translated">作業ツリーの変更は、次のコミットのためにまだステージングされていません。</target>
        </trans-unit>
        <trans-unit id="7ac9e8718cf2c5d1390484c758626a70c63f62f2" translate="yes" xml:space="preserve">
          <source>Changes in the working tree since your last commit; what you would be committing if you run &quot;git commit -a&quot;</source>
          <target state="translated">前回のコミットからの作業ツリーの変更点。</target>
        </trans-unit>
        <trans-unit id="959e8030a92b92d7979097ada92148067be55d31" translate="yes" xml:space="preserve">
          <source>Changes that occurred on the master branch since when the topic branch was started off it.</source>
          <target state="translated">トピックブランチがそのトピックブランチから開始されたときから、マスターブランチで発生した変更。</target>
        </trans-unit>
        <trans-unit id="dcc9e0a603da36a49c01908e321b093eae90c8fa" translate="yes" xml:space="preserve">
          <source>Changes the list of branches tracked by the named remote. This can be used to track a subset of the available remote branches after the initial setup for a remote.</source>
          <target state="translated">指定したリモートが追跡するブランチのリストを変更します。これは、リモートの初期設定後に、利用可能なリモートブランチのサブセットを追跡するために使用できます。</target>
        </trans-unit>
        <trans-unit id="0bccb8c649445d0e9e5ceb6a829109a7f170728f" translate="yes" xml:space="preserve">
          <source>Changes the verbosity of messages displayed by the helper. A value of 0 for &amp;lt;n&amp;gt; means that processes operate quietly, and the helper produces only error output. 1 is the default level of verbosity, and higher values of &amp;lt;n&amp;gt; correspond to the number of -v flags passed on the command line.</source>
          <target state="translated">ヘルパーによって表示されるメッセージの詳細度を変更します。&amp;lt;n&amp;gt;の値が0の場合、プロセスは静かに動作し、ヘルパーはエラー出力のみを生成します。1は冗長性のデフォルトレベルであり、&amp;lt;n&amp;gt;のより高い値は、コマンドラインで渡される-vフラグの数に対応します。</target>
        </trans-unit>
        <trans-unit id="dd3116927a9e7dd7238b571d53ce2cf77fe23ee1" translate="yes" xml:space="preserve">
          <source>Changesets from p4 are imported using Git fast-import.</source>
          <target state="translated">p4 からのチェンジセットは Git fast-import を使ってインポートします。</target>
        </trans-unit>
        <trans-unit id="cab94268d38355d76ce36a45e9bc285de9460c51" translate="yes" xml:space="preserve">
          <source>Changing gitweb&amp;rsquo;s behavior</source>
          <target state="translated">gitwebの動作を変更する</target>
        </trans-unit>
        <trans-unit id="1e7847382a16c8079c307e0f617f25cfce7cb965" translate="yes" xml:space="preserve">
          <source>Changing gitweb&amp;rsquo;s look</source>
          <target state="translated">gitwebの外観を変更する</target>
        </trans-unit>
        <trans-unit id="5812a54bc86041329c11b2c54c0ad4f0c8785223" translate="yes" xml:space="preserve">
          <source>Character encoding the commit messages are converted to when running &lt;code&gt;git log&lt;/code&gt; and friends.</source>
          <target state="translated">コミットメッセージの文字エンコーディングは、 &lt;code&gt;git log&lt;/code&gt; やその仲間を実行するときに変換されます。</target>
        </trans-unit>
        <trans-unit id="1ae63f6ea8b36d3c621f3c26e7c68c400e2fdc6f" translate="yes" xml:space="preserve">
          <source>Character encoding the commit messages are stored in; Git itself does not care per se, but this information is necessary e.g. when importing commits from emails or in the gitk graphical history browser (and possibly at other places in the future or in other porcelains). See e.g. &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;. Defaults to &lt;code&gt;utf-8&lt;/code&gt;.</source>
          <target state="translated">コミットメッセージが格納される文字エンコーディング。Git自体はそれ自体は問題になりませんが、この情報は、たとえばメールから、またはgitkのグラフィカルな履歴ブラウザーで（そしておそらく将来の他の場所や他の磁器で）コミットをインポートするときに必要です。例えば&lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo [1]を&lt;/a&gt;ご覧ください。デフォルトは &lt;code&gt;utf-8&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0d76545473270b409d5ad4bb0d1fe44d81e97f58" translate="yes" xml:space="preserve">
          <source>Check for corruption:</source>
          <target state="translated">腐敗していないか確認してください。</target>
        </trans-unit>
        <trans-unit id="b7d8cdc518631e2251ad5f880bdb559475d2d3c6" translate="yes" xml:space="preserve">
          <source>Check if &amp;lt;path&amp;gt; is a valid repository or a gitfile that points at a valid repository, and print the location of the repository. If &amp;lt;path&amp;gt; is a gitfile then the resolved path to the real repository is printed.</source>
          <target state="translated">&amp;lt;path&amp;gt;が有効なリポジトリまたは有効なリポジトリを指すgitfileであるかどうかを確認し、リポジトリの場所を出力します。&amp;lt;path&amp;gt;がgitfileの場合、実際のリポジトリへの解決されたパスが出力されます。</target>
        </trans-unit>
        <trans-unit id="e60019605e61c29f438d2140b618df2fa7a2cf81" translate="yes" xml:space="preserve">
          <source>Check if the command would error out, without updating the index or the files in the working tree for real.</source>
          <target state="translated">インデックスや作業ツリー内のファイルを実際に更新せずに、コマンドがエラーアウトするかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="03d22f18e900d425734c737c0518f14811d19a56" translate="yes" xml:space="preserve">
          <source>Check if the first &amp;lt;commit&amp;gt; is an ancestor of the second &amp;lt;commit&amp;gt;, and exit with status 0 if true, or with status 1 if not. Errors are signaled by a non-zero status that is not 1.</source>
          <target state="translated">最初の&amp;lt;commit&amp;gt;が2番目の&amp;lt;commit&amp;gt;の祖先であるかどうかを確認し、trueの場合はステータス0で終了し、そうでない場合はステータス1で終了します。エラーは、1以外のゼロ以外のステータスによって通知されます。</target>
        </trans-unit>
        <trans-unit id="83e838c1d2166b2d88caf18328aef0c7567d558a" translate="yes" xml:space="preserve">
          <source>Check not just objects in GIT_OBJECT_DIRECTORY ($GIT_DIR/objects), but also the ones found in alternate object pools listed in GIT_ALTERNATE_OBJECT_DIRECTORIES or $GIT_DIR/objects/info/alternates, and in packed Git archives found in $GIT_DIR/objects/pack and corresponding pack subdirectories in alternate object pools. This is now default; you can turn it off with --no-full.</source>
          <target state="translated">GIT_OBJECT_DIRECTORY ($GIT_DIR/objects)にあるオブジェクトだけでなく、GIT_ALTERNATE_OBJECT_DIRECTORIES や $GIT_DIR/objects/info/alternates にある代替オブジェクトプールにあるものや、$GIT_DIR/objects/pack にあるパックされた Git アーカイブ、そして代替オブジェクトプールにある対応するパックサブディレクトリもチェックします。この設定はデフォルトで、--no-full で無効にできます。</target>
        </trans-unit>
        <trans-unit id="e79b0680caa2ca1906fd2adf6eaff8974f4a2257" translate="yes" xml:space="preserve">
          <source>Check only the connectivity of reachable objects, making sure that any objects referenced by a reachable tag, commit, or tree is present. This speeds up the operation by avoiding reading blobs entirely (though it does still check that referenced blobs exist). This will detect corruption in commits and trees, but not do any semantic checks (e.g., for format errors). Corruption in blob objects will not be detected at all.</source>
          <target state="translated">到達可能なオブジェクトの接続性のみをチェックし、到達可能なタグ、コミット、またはツリーによって参照されるオブジェクトが存在することを確認します。これにより、ブロブの読み込みを完全に避けることができ、処理が高速化されます(ただし、参照されているブロブが存在するかどうかはチェックされます)。これは、コミットやツリーの破損を検出しますが、意味的なチェックは行いません(フォーマットエラーなど)。ブロブオブジェクトの破損は全く検出されません。</target>
        </trans-unit>
        <trans-unit id="1059c6a2d1e02e3f2100e501993e9695ffee2a93" translate="yes" xml:space="preserve">
          <source>Check that the change you made is no longer visible, since it was made on the experimental branch and you&amp;rsquo;re back on the master branch.</source>
          <target state="translated">実験的なブランチで行われた変更とマスターブランチに戻ったため、加えた変更が表示されなくなったことを確認します。</target>
        </trans-unit>
        <trans-unit id="283494db1332f5a5bdeebb22027e88d6ecd9fccd" translate="yes" xml:space="preserve">
          <source>Check the GPG signature of commits</source>
          <target state="translated">コミットのGPG署名を確認する</target>
        </trans-unit>
        <trans-unit id="9942c8361d672deabca4bf9b4378db88e5831693" translate="yes" xml:space="preserve">
          <source>Check the GPG signature of tags</source>
          <target state="translated">タグのGPG署名を確認する</target>
        </trans-unit>
        <trans-unit id="06577cf94f38a79b885fc18bdd8c2be1bcd96e2b" translate="yes" xml:space="preserve">
          <source>Check the validity of a signed commit object by passing the signature to &lt;code&gt;gpg --verify&lt;/code&gt; and show the output.</source>
          <target state="translated">署名を &lt;code&gt;gpg --verify&lt;/code&gt; に渡して、署名されたコミットオブジェクトの有効性を確認し、出力を表示します。</target>
        </trans-unit>
        <trans-unit id="73422e6d03195802a17e28660f8c31a3d87204d7" translate="yes" xml:space="preserve">
          <source>Check whether two branches point at the same history</source>
          <target state="translated">2つのブランチが同じ履歴を指しているかどうかをチェック</target>
        </trans-unit>
        <trans-unit id="7a3ffea957d19415bf259687b6fc87b1ce4c0522" translate="yes" xml:space="preserve">
          <source>Check your xinetd(8) documentation and setup, this is from a Fedora system. Others might be different.</source>
          <target state="translated">xinetd(8)のドキュメントとセットアップを確認してください。他のシステムとは違うかもしれません。</target>
        </trans-unit>
        <trans-unit id="6515762734c69625b8244e79b73529d8fd67b97e" translate="yes" xml:space="preserve">
          <source>Checking for patch corruption</source>
          <target state="translated">パッチ破損のチェック</target>
        </trans-unit>
        <trans-unit id="c722b668af2290a67a3950339daf5303bf70266c" translate="yes" xml:space="preserve">
          <source>Checking merge bases</source>
          <target state="translated">マージ拠点の確認</target>
        </trans-unit>
        <trans-unit id="fa7ccb17065ab13f50e5f4aa48f888b7f36943e2" translate="yes" xml:space="preserve">
          <source>Checking out an old version of a file</source>
          <target state="translated">古いバージョンのファイルをチェックアウトする</target>
        </trans-unit>
        <trans-unit id="4285903ce1710560050a0803b330dcd049bfbfef" translate="yes" xml:space="preserve">
          <source>Checking the repository for corruption</source>
          <target state="translated">リポジトリが破損していないかチェックする</target>
        </trans-unit>
        <trans-unit id="2ac84684aef52ff693250170ef43a76e48af3284" translate="yes" xml:space="preserve">
          <source>Checking whitespace errors</source>
          <target state="translated">空白エラーのチェック</target>
        </trans-unit>
        <trans-unit id="527933c1f680ec617db3dd975f754535f385100b" translate="yes" xml:space="preserve">
          <source>Checking-out and checking-in</source>
          <target state="translated">チェックアウトとチェックイン</target>
        </trans-unit>
        <trans-unit id="49265102fbdeaea303ebc0238044241c00c923d0" translate="yes" xml:space="preserve">
          <source>Checklist for shrinking a repository</source>
          <target state="translated">リポジトリを縮小するためのチェックリスト</target>
        </trans-unit>
        <trans-unit id="ce166f9433a0a0acaace5836679192e776275599" translate="yes" xml:space="preserve">
          <source>Checks if a given &lt;code&gt;refname&lt;/code&gt; is acceptable, and exits with a non-zero status if it is not.</source>
          <target state="translated">指定された &lt;code&gt;refname&lt;/code&gt; が受け入れ可能かどうかをチェックし、受け入れ可能でない場合はゼロ以外のステータスで終了します。</target>
        </trans-unit>
        <trans-unit id="d8021a065c8c671df3a58cb63e7469b8167a446a" translate="yes" xml:space="preserve">
          <source>Child Process Messages</source>
          <target state="translated">子プロセスメッセージ</target>
        </trans-unit>
        <trans-unit id="5091e72502f618e2b372fcb37e80054927942ac3" translate="yes" xml:space="preserve">
          <source>Child Processes</source>
          <target state="translated">チャイルドプロセス</target>
        </trans-unit>
        <trans-unit id="c8895429bfc3ae045740a98bd7892c21d37107b3" translate="yes" xml:space="preserve">
          <source>Choose a diff algorithm. The variants are as follows:</source>
          <target state="translated">diffアルゴリズムを選択します。バリアントは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="59db2d4b9fea86d4c731a426cb932a15c94c9596" translate="yes" xml:space="preserve">
          <source>Choosing textconv versus external diff</source>
          <target state="translated">textconv と外部 diff の選択</target>
        </trans-unit>
        <trans-unit id="613b7dff145eefd66d417456a88da290b004ada8" translate="yes" xml:space="preserve">
          <source>Chunk header format is modified to prevent people from accidentally feeding it to &lt;code&gt;patch -p1&lt;/code&gt;. Combined diff format was created for review of merge commit changes, and was not meant to be applied. The change is similar to the change in the extended &lt;code&gt;index&lt;/code&gt; header:</source>
          <target state="translated">チャンクヘッダーの形式が変更され、誤って &lt;code&gt;patch -p1&lt;/code&gt; フィードされるのを防ぎます。結合されたdiff形式は、マージコミットの変更を確認するために作成されたもので、適用することを意図していませんでした。この変更は、拡張 &lt;code&gt;index&lt;/code&gt; ヘッダーの変更に似ています。</target>
        </trans-unit>
        <trans-unit id="42dcbc11ebcca8013128e188e07a667fd189817d" translate="yes" xml:space="preserve">
          <source>Cleans the working tree by recursively removing files that are not under version control, starting from the current directory.</source>
          <target state="translated">バージョン管理下にないファイルをカレントディレクトリから再帰的に削除することで、作業ツリーをクリーンアップします。</target>
        </trans-unit>
        <trans-unit id="f2d831c9f71cd3ff7b3b6c7c49408fcedc1e2e96" translate="yes" xml:space="preserve">
          <source>Cleanup unnecessary files and optimize the local repository</source>
          <target state="translated">不要なファイルのクリーンアップとローカルリポジトリの最適化</target>
        </trans-unit>
        <trans-unit id="94f8adfaa49f4f08c745b4d0d2c62d9ba66072a5" translate="yes" xml:space="preserve">
          <source>Clearly this work-flow uses the virtuous circle between test suites and &quot;git bisect&quot;. In fact it makes it the standard procedure to deal with regression.</source>
          <target state="translated">明らかにこのワークフローでは、test suites と &quot;git bisect&quot; の間の好循環を利用しています。実際、これはリグレッションを処理するための標準的な手順となっています。</target>
        </trans-unit>
        <trans-unit id="119db12fc152f2f55488f08da986c3c46bdf64a9" translate="yes" xml:space="preserve">
          <source>Clears any list of &quot;To:&quot;, &quot;Cc:&quot;, &quot;Bcc:&quot; addresses previously set via config.</source>
          <target state="translated">設定で設定した「To:」、「Cc:」、「Bcc:」アドレスのリストをクリアします。</target>
        </trans-unit>
        <trans-unit id="cf4a0e26c9f93f0530be9fa71dab1af1cbaa231f" translate="yes" xml:space="preserve">
          <source>Clears the previously read value of &lt;code&gt;sendemail.identity&lt;/code&gt; set via config, if any.</source>
          <target state="translated">以前に読み取った、設定を介して設定された &lt;code&gt;sendemail.identity&lt;/code&gt; の値があれば、それをクリアします。</target>
        </trans-unit>
        <trans-unit id="90944cef36d3464ed0283d5129626cf4ab8fc85b" translate="yes" xml:space="preserve">
          <source>Click on New Mail.</source>
          <target state="translated">新規メールをクリックします。</target>
        </trans-unit>
        <trans-unit id="89585875df151078ae7b77d81e2bd1b067e7d065" translate="yes" xml:space="preserve">
          <source>Client spec</source>
          <target state="translated">クライアント仕様</target>
        </trans-unit>
        <trans-unit id="55e7359e50be70477f290b070978067b2a01b4d1" translate="yes" xml:space="preserve">
          <source>Client specified as an option to all p4 commands, with &lt;code&gt;-c &amp;lt;client&amp;gt;&lt;/code&gt;, including the client spec.</source>
          <target state="translated">&lt;code&gt;-c &amp;lt;client&amp;gt;&lt;/code&gt; を使用して、クライアント仕様を含むすべてのp4コマンドのオプションとして指定されたクライアント。</target>
        </trans-unit>
        <trans-unit id="80c2bc0ea4027c7a64da85db4dd1237d395876ca" translate="yes" xml:space="preserve">
          <source>Clients known to work</source>
          <target state="translated">働くことが知られているクライアント</target>
        </trans-unit>
        <trans-unit id="74d55b5e93bc1fa20e1ae7e006b74220ee6a2f8c" translate="yes" xml:space="preserve">
          <source>Clients may &lt;code&gt;not&lt;/code&gt; use other sha1 expressions, even if the end result is reachable. E.g., neither a relative commit like &lt;code&gt;master^&lt;/code&gt; nor a literal sha1 like &lt;code&gt;abcd1234&lt;/code&gt; is allowed, even if the result is reachable from the refs.</source>
          <target state="translated">最終結果が到達可能であっても、クライアントは他のsha1式を使用でき &lt;code&gt;not&lt;/code&gt; 。たとえば、refから結果に到達できる場合でも、 &lt;code&gt;master^&lt;/code&gt; ような相対コミットも、 &lt;code&gt;abcd1234&lt;/code&gt; のようなリテラルsha1 も許可されません。</target>
        </trans-unit>
        <trans-unit id="5c33076e8c658be1dfe63e1df1ac676b47602d66" translate="yes" xml:space="preserve">
          <source>Clients may request a commit or tree that is pointed to directly by a ref. E.g., &lt;code&gt;git archive --remote=origin v1.0&lt;/code&gt;.</source>
          <target state="translated">クライアントは、refが直接指すコミットまたはツリーを要求できます。例： &lt;code&gt;git archive --remote=origin v1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbed12af7936ed3ad4075cea19b034f51ea55c2c" translate="yes" xml:space="preserve">
          <source>Clients may request a sub-tree within a commit or tree using the &lt;code&gt;ref:path&lt;/code&gt; syntax. E.g., &lt;code&gt;git archive --remote=origin v1.0:Documentation&lt;/code&gt;.</source>
          <target state="translated">クライアントは、 &lt;code&gt;ref:path&lt;/code&gt; 構文を使用して、コミットまたはツリー内のサブツリーを要求できます。例： &lt;code&gt;git archive --remote=origin v1.0:Documentation&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9839e8d4aa3c14e4b54e191e51eb2179e4fdaa19" translate="yes" xml:space="preserve">
          <source>Clients should now be able to check out the project. Use the CVS &lt;code&gt;module&lt;/code&gt; name to indicate what Git &lt;code&gt;head&lt;/code&gt; you want to check out. This also sets the name of your newly checked-out directory, unless you tell it otherwise with &lt;code&gt;-d &amp;lt;dir_name&amp;gt;&lt;/code&gt;. For example, this checks out &lt;code&gt;master&lt;/code&gt; branch to the &lt;code&gt;project-master&lt;/code&gt; directory:</source>
          <target state="translated">これで、クライアントはプロジェクトをチェックアウトできるようになります。CVS &lt;code&gt;module&lt;/code&gt; 名を使用して、チェックアウトするGit &lt;code&gt;head&lt;/code&gt; を指定します。 &lt;code&gt;-d &amp;lt;dir_name&amp;gt;&lt;/code&gt; を使用して別の方法で指示しない限り、これにより、新しくチェックアウトされたディレクトリの名前も設定されます。たとえば、これは &lt;code&gt;project-master&lt;/code&gt; ディレクトリへの &lt;code&gt;master&lt;/code&gt; ブランチをチェックアウトします。</target>
        </trans-unit>
        <trans-unit id="d8cdb573350de78596e4852bc9cacfc94e8d17ed" translate="yes" xml:space="preserve">
          <source>Clone</source>
          <target state="translated">Clone</target>
        </trans-unit>
        <trans-unit id="d69c0c434d503834765604d22b28037bee413bfc" translate="yes" xml:space="preserve">
          <source>Clone a repository into a new directory</source>
          <target state="translated">リポジトリを新しいディレクトリにクローンする</target>
        </trans-unit>
        <trans-unit id="8b7342cb68e63a734e787beefc74dd4c8bf74d08" translate="yes" xml:space="preserve">
          <source>Clone a repository:</source>
          <target state="translated">リポジトリをクローンします。</target>
        </trans-unit>
        <trans-unit id="e3bdbcd4fc3a4b615a5be68aca4686a1e8d61dd3" translate="yes" xml:space="preserve">
          <source>Clone and sync variables</source>
          <target state="translated">変数のクローンと同期</target>
        </trans-unit>
        <trans-unit id="fc5a57d2c10be47f020b40eb294f6e546edcb1fb" translate="yes" xml:space="preserve">
          <source>Clone from upstream while borrowing from an existing local directory:</source>
          <target state="translated">既存のローカルディレクトリから借りている間に、上流からクローンを作成します。</target>
        </trans-unit>
        <trans-unit id="31427bc4154831dc13e03739efd0e5c8ceee16ff" translate="yes" xml:space="preserve">
          <source>Clone from upstream:</source>
          <target state="translated">上流からのクローン。</target>
        </trans-unit>
        <trans-unit id="40d0639c1781d7a9c100ef0a6d2c0dcfcc6b282c" translate="yes" xml:space="preserve">
          <source>Clone it with &lt;code&gt;git clone file:///path/to/repo&lt;/code&gt;. The clone will not have the removed objects. See &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt;. (Note that cloning with a plain path just hardlinks everything!)</source>
          <target state="translated">&lt;code&gt;git clone file:///path/to/repo&lt;/code&gt; でそれを複製します。クローンには削除されたオブジェクトはありません。&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]を&lt;/a&gt;参照してください。（単純なパスを使用した複製は、すべてをハードリンクするだけです！）</target>
        </trans-unit>
        <trans-unit id="25701c0360e9d04455f2222c02f2b66094990098" translate="yes" xml:space="preserve">
          <source>Clone only the history leading to the tip of a single branch, either specified by the &lt;code&gt;--branch&lt;/code&gt; option or the primary branch remote&amp;rsquo;s &lt;code&gt;HEAD&lt;/code&gt; points at. Further fetches into the resulting repository will only update the remote-tracking branch for the branch this option was used for the initial cloning. If the HEAD at the remote did not point at any branch when &lt;code&gt;--single-branch&lt;/code&gt; clone was made, no remote-tracking branch is created.</source>
          <target state="translated">&lt;code&gt;--branch&lt;/code&gt; オプションで指定された、またはリモートのプライマリブランチの &lt;code&gt;HEAD&lt;/code&gt; が指している単一ブランチの先端に至る履歴のみを複製します。結果のリポジトリにさらにフェッチすると、このオプションが最初のクローン作成に使用されたブランチのリモート追跡ブランチのみが更新されます。 &lt;code&gt;--single-branch&lt;/code&gt; cloneが作成されたときにリモートのHEADがどのブランチも指していない場合、リモート追跡ブランチは作成されません。</target>
        </trans-unit>
        <trans-unit id="7a471e90dac3e294ddb7787043d7eb11c0e7a242" translate="yes" xml:space="preserve">
          <source>Clone options</source>
          <target state="translated">クローンオプション</target>
        </trans-unit>
        <trans-unit id="0befa381e0a34bfc395f53162eefbad3dae21f70" translate="yes" xml:space="preserve">
          <source>Clone the upstream and work on it. Feed changes to upstream.</source>
          <target state="translated">上流をクローンして作業する。上流への変更をフィードします。</target>
        </trans-unit>
        <trans-unit id="4b6b25b2b84758722a0670042a124566ce1d193f" translate="yes" xml:space="preserve">
          <source>Clones a repository into a newly created directory, creates remote-tracking branches for each branch in the cloned repository (visible using &lt;code&gt;git branch --remotes&lt;/code&gt;), and creates and checks out an initial branch that is forked from the cloned repository&amp;rsquo;s currently active branch.</source>
          <target state="translated">リポジトリを新しく作成されたディレクトリに複製し、複製されたリポジトリ（ &lt;code&gt;git branch --remotes&lt;/code&gt; を使用して表示可能）内の各ブランチのリモート追跡ブランチを作成し、複製されたリポジトリの現在アクティブなブランチからフォークされた初期ブランチを作成してチェックアウトします。</target>
        </trans-unit>
        <trans-unit id="df1a2527d982b2181fc5936a0c039535ce1accdb" translate="yes" xml:space="preserve">
          <source>Cloning or syncing does not require a p4 client; file contents are collected using &lt;code&gt;p4 print&lt;/code&gt;.</source>
          <target state="translated">クローンや同期にはp4クライアントは必要ありません。ファイルの内容は &lt;code&gt;p4 print&lt;/code&gt; を使用して収集されます。</target>
        </trans-unit>
        <trans-unit id="53e412082749509777418e5cdc87503adeb4bf14" translate="yes" xml:space="preserve">
          <source>Collect and show committer identities instead of authors.</source>
          <target state="translated">著者の代わりにコミッターのIDを収集して表示します。</target>
        </trans-unit>
        <trans-unit id="fccaafaced7e706bc2bd06241362e04977c0cd36" translate="yes" xml:space="preserve">
          <source>Colon-delimited list of refs or globs indicating which refs, in addition to the default from &lt;code&gt;core.notesRef&lt;/code&gt; or &lt;code&gt;GIT_NOTES_REF&lt;/code&gt;, to read notes from when showing commit messages. This overrides the &lt;code&gt;notes.displayRef&lt;/code&gt; setting.</source>
          <target state="translated">&lt;code&gt;core.notesRef&lt;/code&gt; または &lt;code&gt;GIT_NOTES_REF&lt;/code&gt; からのデフォルトに加えて、コミットメッセージを表示するときにメモを読み取るための参照を示す、コロンで区切られた参照またはグロブのリスト。これは &lt;code&gt;notes.displayRef&lt;/code&gt; 設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="b13a61ccbe64b645a15179edff14e97b6ecd8c00" translate="yes" xml:space="preserve">
          <source>Color branches to highlight current, local, and remote-tracking branches. The value must be always (the default), never, or auto.</source>
          <target state="translated">現在のブランチ、ローカルブランチ、およびリモートトラッキングブランチをハイライトするためにブランチに色を付けます。値は always (デフォルト)、never、auto のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="b15070a1530d4c810f05017f7f35501b365479b6" translate="yes" xml:space="preserve">
          <source>Color the status sign (one of these: &lt;code&gt;*&lt;/code&gt;&lt;code&gt;!&lt;/code&gt;&lt;code&gt;+&lt;/code&gt;&lt;code&gt;-&lt;/code&gt;) of each commit corresponding to the branch it&amp;rsquo;s in. The value must be always (the default), never, or auto.</source>
          <target state="translated">コミット先のブランチに対応する各コミットのステータス記号（次のいずれか： &lt;code&gt;*&lt;/code&gt; &lt;code&gt;!&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;-&lt;/code&gt; ）に色を付けます。値は、常に（デフォルト）、なし、または自動でなければなりません。</target>
        </trans-unit>
        <trans-unit id="51d8265f4f18e755692a71f862affd712731021e" translate="yes" xml:space="preserve">
          <source>Colors may also be given as numbers between 0 and 255; these use ANSI 256-color mode (but note that not all terminals may support this). If your terminal supports it, you may also specify 24-bit RGB values as hex, like &lt;code&gt;#ff0ab3&lt;/code&gt;.</source>
          <target state="translated">色は0から255までの数値で指定することもできます。これらはANSI 256色モードを使用します（ただし、すべての端末がこれをサポートしているわけではないことに注意してください）。端末がサポートしている場合は、 &lt;code&gt;#ff0ab3&lt;/code&gt; のように24ビットRGB値を16進数として指定することもできます。</target>
        </trans-unit>
        <trans-unit id="39ae0d23566f06a8646ef3abdd586851a9e465cd" translate="yes" xml:space="preserve">
          <source>Combined diff format</source>
          <target state="translated">組み合わせた差分フォーマット</target>
        </trans-unit>
        <trans-unit id="5bb60f78b33e9a4f091db8f97f338043390512bd" translate="yes" xml:space="preserve">
          <source>Combining test suites, git bisect and other systems together</source>
          <target state="translated">テストスイートやgit bisectなどのシステムを組み合わせる</target>
        </trans-unit>
        <trans-unit id="4a4a4bb517ec5013313be130afe65f9c77f0eaea" translate="yes" xml:space="preserve">
          <source>Coming from a system such as Perforce or Subversion this should be quite simple, as the fast-import mark can also be the Perforce changeset number or the Subversion revision number.</source>
          <target state="translated">Perforce や Subversion のようなシステムから来た場合は、高速インポートマークは Perforce のチェンジセット番号や Subversion のリビジョン番号にもなるので、これは非常に簡単です。</target>
        </trans-unit>
        <trans-unit id="b894fab4f168cef475b1c68a083475614077b1e5" translate="yes" xml:space="preserve">
          <source>Coming up with the correct shell snippet to do the filtering you want is sometimes difficult unless you&amp;rsquo;re just doing a trivial modification such as deleting a couple files. Unfortunately, people often learn if the snippet is right or wrong by trying it out, but the rightness or wrongness can vary depending on special circumstances (spaces in filenames, non-ascii filenames, funny author names or emails, invalid timezones, presence of grafts or replace objects, etc.), meaning they may have to wait a long time, hit an error, then restart. The performance of git-filter-branch is so bad that this cycle is painful, reducing the time available to carefully re-check (to say nothing about what it does to the patience of the person doing the rewrite even if they do technically have more time available). This problem is extra compounded because errors from broken filters may not be shown for a long time and/or get lost in a sea of output. Even worse, broken filters often just result in silent incorrect rewrites.</source>
          <target state="translated">いくつかのファイルを削除するなどの簡単な変更を行わない限り、必要なフィルタリングを行うための正しいシェルスニペットを思い付くのは難しい場合があります。残念ながら、人々はスニペットを試すことによって正しいか間違っているかをよく学びますが、正しいか間違っているかは、特別な状況（ファイル名のスペース、ASCII以外のファイル名、おかしな作者名または電子メール、無効なタイムゾーン、移植片の存在）によって異なりますまたはオブジェクトを置き換えるなど）、つまり、オブジェクトが長時間待機し、エラーが発生してから再起動する必要がある場合があります。 git-filter-branchのパフォーマンスは非常に悪いので、このサイクルは苦痛であり、慎重に再チェックするために利用できる時間を短縮します（技術的にもっと多くのことを行っている場合でも、書き換えを行う人の忍耐力について何も言わない）利用可能な時間）。壊れたフィルターからのエラーが長時間表示されなかったり、出力の海で失われたりする可能性があるため、この問題はさらに複雑になります。さらに悪いことに、フィルターが壊れていると、無言で誤った書き換えが発生することがよくあります。</target>
        </trans-unit>
        <trans-unit id="8fb52c1564722a1fe5f6cf4e3d44bce48182e716" translate="yes" xml:space="preserve">
          <source>Command Detail Messages</source>
          <target state="translated">コマンド詳細メッセージ</target>
        </trans-unit>
        <trans-unit id="f7e08456d089a047ccd465ae00e5bf2544bfdac7" translate="yes" xml:space="preserve">
          <source>Command Details</source>
          <target state="translated">コマンドの詳細</target>
        </trans-unit>
        <trans-unit id="84cf71d717103c00cc33f4f16f173970104ae46e" translate="yes" xml:space="preserve">
          <source>Command aliases for the &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt; command wrapper - e.g. after defining &lt;code&gt;alias.last = cat-file commit HEAD&lt;/code&gt;, the invocation &lt;code&gt;git last&lt;/code&gt; is equivalent to &lt;code&gt;git cat-file commit HEAD&lt;/code&gt;. To avoid confusion and troubles with script usage, aliases that hide existing Git commands are ignored. Arguments are split by spaces, the usual shell quoting and escaping is supported. A quote pair or a backslash can be used to quote them.</source>
          <target state="translated">&lt;a href=&quot;git&quot;&gt;git [1]&lt;/a&gt;コマンドラッパーのコマンドエイリアス-たとえば、 &lt;code&gt;alias.last = cat-file commit HEAD&lt;/code&gt; 定義した後、呼び出し &lt;code&gt;git last&lt;/code&gt; は &lt;code&gt;git cat-file commit HEAD&lt;/code&gt; と同等です。スクリプトの使用に関する混乱とトラブルを回避するために、既存のGitコマンドを隠すエイリアスは無視されます。引数はスペースで区切られ、通常のシェルの引用とエスケープがサポートされています。引用符のペアまたはバックスラッシュを使用して、それらを引用できます。</target>
        </trans-unit>
        <trans-unit id="bb334d175dc8351e4e643438be75bf5083df9523" translate="yes" xml:space="preserve">
          <source>Command and arguments are separated by an unescaped space.</source>
          <target state="translated">コマンドと引数は、エスケープされていないスペースで区切られています。</target>
        </trans-unit>
        <trans-unit id="bd186454b9919f30925b251fcf7e4e52ca77972c" translate="yes" xml:space="preserve">
          <source>Command request</source>
          <target state="translated">コマンド要求</target>
        </trans-unit>
        <trans-unit id="fa701362a88f56992e33094194fa924ccdfa36dc" translate="yes" xml:space="preserve">
          <source>Command to be run each time gitk has to determine the revision range to show. The command is expected to print on its standard output a list of additional revisions to be shown, one per line. Use this instead of explicitly specifying a &lt;code&gt;&amp;lt;revision range&amp;gt;&lt;/code&gt; if the set of commits to show may vary between refreshes.</source>
          <target state="translated">表示するリビジョン範囲をgitkが決定する必要があるたびに実行されるコマンド。コマンドは、標準出力に、表示される追加のリビジョンのリストを1行に1つずつ出力することが期待されています。表示するコミットのセットが更新ごとに異なる場合は、 &lt;code&gt;&amp;lt;revision range&amp;gt;&lt;/code&gt; を明示的に指定する代わりにこれを使用してください。</target>
        </trans-unit>
        <trans-unit id="d073f0ac32697a8093342645a8234491e985e6ff" translate="yes" xml:space="preserve">
          <source>Command used to setup a tunnel to the IMAP server through which commands will be piped instead of using a direct network connection to the server. Required when imap.host is not set.</source>
          <target state="translated">IMAPサーバーへのトンネルを設定するために使用されるコマンドで、サーバーへの直接のネットワーク接続を使用する代わりに、コマンドがパイプされます。imap.hostが設定されていない場合に必要です。</target>
        </trans-unit>
        <trans-unit id="5fbae08a3e549b8259aa734268f8fc50962c7173" translate="yes" xml:space="preserve">
          <source>Command-line interface conventions</source>
          <target state="translated">コマンドラインインタフェースの規約</target>
        </trans-unit>
        <trans-unit id="45e5f3f72e961cb70134ba35f7a27a9620e515f7" translate="yes" xml:space="preserve">
          <source>Commands</source>
          <target state="translated">Commands</target>
        </trans-unit>
        <trans-unit id="5415f180d40029f0ddfc48b35f157e8ad10f48bc" translate="yes" xml:space="preserve">
          <source>Commands are given by the caller on the helper&amp;rsquo;s standard input, one per line.</source>
          <target state="translated">コマンドは、呼び出し側によってヘルパーの標準入力で1行に1つずつ与えられます。</target>
        </trans-unit>
        <trans-unit id="03880aa7f8436e082afca33e516cbcd9355d3554" translate="yes" xml:space="preserve">
          <source>Commands such as &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt; that let you edit messages by launching an editor use the value of this variable when it is set, and the environment variable &lt;code&gt;GIT_EDITOR&lt;/code&gt; is not set. See &lt;a href=&quot;git-var&quot;&gt;git-var[1]&lt;/a&gt;.</source>
          <target state="translated">エディターを起動してメッセージを編集できるように &lt;code&gt;commit&lt;/code&gt; や &lt;code&gt;tag&lt;/code&gt; などのコマンドは、この変数の値が設定されていて、環境変数 &lt;code&gt;GIT_EDITOR&lt;/code&gt; が設定されていない場合に使用します。&lt;a href=&quot;git-var&quot;&gt;git-var [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0abcd0747bb8576b597002ab49f39285f1f4ef29" translate="yes" xml:space="preserve">
          <source>Commands such as &lt;code&gt;commit&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt; that let you edit messages consider a line that begins with this character commented, and removes them after the editor returns (default &lt;code&gt;#&lt;/code&gt;).</source>
          <target state="translated">メッセージの編集を可能に &lt;code&gt;commit&lt;/code&gt; や &lt;code&gt;tag&lt;/code&gt; などのコマンドは、この文字で始まる行がコメント化されていると見なし、エディターが戻った後にそれらを削除します（デフォルト &lt;code&gt;#&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6030cf68b2071379f06ab06312828ccb10c46868" translate="yes" xml:space="preserve">
          <source>Commands that output paths (e.g. &lt;code&gt;ls-files&lt;/code&gt;, &lt;code&gt;diff&lt;/code&gt;), will quote &quot;unusual&quot; characters in the pathname by enclosing the pathname in double-quotes and escaping those characters with backslashes in the same way C escapes control characters (e.g. &lt;code&gt;\t&lt;/code&gt; for TAB, &lt;code&gt;\n&lt;/code&gt; for LF, &lt;code&gt;\\&lt;/code&gt; for backslash) or bytes with values larger than 0x80 (e.g. octal &lt;code&gt;\302\265&lt;/code&gt; for &quot;micro&quot; in UTF-8). If this variable is set to false, bytes higher than 0x80 are not considered &quot;unusual&quot; any more. Double-quotes, backslash and control characters are always escaped regardless of the setting of this variable. A simple space character is not considered &quot;unusual&quot;. Many commands can output pathnames completely verbatim using the &lt;code&gt;-z&lt;/code&gt; option. The default value is true.</source>
          <target state="translated">パスを出力するコマンド（例： &lt;code&gt;ls-files&lt;/code&gt; 、 &lt;code&gt;diff&lt;/code&gt; ）は、パス名を二重引用符で囲み、Cが制御文字をエスケープするのと同じ方法でバックスラッシュでそれらの文字をエスケープすることにより、パス名の「異常な」文字を引用します（例：TABの &lt;code&gt;\t&lt;/code&gt; 、 &lt;code&gt;\n&lt;/code&gt; （LFの場合は &lt;code&gt;\\&lt;/code&gt; 、円記号の場合は\\）または0x80より大きい値のバイト（たとえば、UTF-8の「マイクロ」の場合は8進数の &lt;code&gt;\302\265&lt;/code&gt; ）。この変数がfalseに設定されている場合、0x80より大きいバイトは「異常」と見なされなくなります。この変数の設定に関係なく、二重引用符、バックスラッシュ、および制御文字は常にエスケープされます。単純なスペース文字は「異常」とは見なされません。多くのコマンドは、パス名を完全に逐語的に出力できます。 &lt;code&gt;-z&lt;/code&gt; オプション。デフォルト値はtrueです。</target>
        </trans-unit>
        <trans-unit id="240a8b9ba4498383936942814599bad7b6fd9115" translate="yes" xml:space="preserve">
          <source>Commands that support the enhanced option parser accepts unique prefix of a long option as if it is fully spelled out, but use this with a caution. For example, &lt;code&gt;git commit --amen&lt;/code&gt; behaves as if you typed &lt;code&gt;git commit --amend&lt;/code&gt;, but that is true only until a later version of Git introduces another option that shares the same prefix, e.g. &lt;code&gt;git commit --amenity&lt;/code&gt; option.</source>
          <target state="translated">拡張オプションパーサーをサポートするコマンドは、長いオプションの一意のプレフィックスを、完全に綴られているかのように受け入れますが、注意して使用してください。たとえば、 &lt;code&gt;git commit --amen&lt;/code&gt; はgit commit --amendと入力した場合と同じように動作しますが、これは、 &lt;code&gt;git commit --amend&lt;/code&gt; バージョンのGitが同じ接頭辞を共有する別のオプション（ &lt;code&gt;git commit --amenity&lt;/code&gt; オプションなど）を導入するまでのみ当てはまります。</target>
        </trans-unit>
        <trans-unit id="40539e4d461e31ee218fa661fb2b14e246e5b1ba" translate="yes" xml:space="preserve">
          <source>Commands that support the enhanced option parser allow you to aggregate short options. This means that you can for example use &lt;code&gt;git rm -rf&lt;/code&gt; or &lt;code&gt;git clean -fdx&lt;/code&gt;.</source>
          <target state="translated">拡張オプションパーサーをサポートするコマンドを使用すると、短いオプションを集約できます。つまり、たとえば &lt;code&gt;git rm -rf&lt;/code&gt; または &lt;code&gt;git clean -fdx&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="d3f5763bea669fa755ce44d52b210df9afaf62df" translate="yes" xml:space="preserve">
          <source>Commands which have the enhanced option parser activated all understand a couple of magic command-line options:</source>
          <target state="translated">拡張オプションパーサを有効にしたコマンドはすべて、いくつかの魔法のコマンドラインオプションを理解しています。</target>
        </trans-unit>
        <trans-unit id="1164e5e23a09019a23028b34e0716555534c7c84" translate="yes" xml:space="preserve">
          <source>Comment lines appearing within the &lt;code&gt;&amp;lt;raw&amp;gt;&lt;/code&gt; part of &lt;code&gt;data&lt;/code&gt; commands are always taken to be part of the body of the data and are therefore never ignored by fast-import. This makes it safe to import any file/message content whose lines might start with &lt;code&gt;#&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; コマンドの &lt;code&gt;&amp;lt;raw&amp;gt;&lt;/code&gt; 部分内に表示されるコメント行は、常にデータの本文の一部と見なされるため、高速インポートでは無視されません。これにより、行が &lt;code&gt;#&lt;/code&gt; で始まる可能性のあるファイル/メッセージコンテンツを安全にインポートできます。</target>
        </trans-unit>
        <trans-unit id="a91a1b2d9c14de30d84e97a50ebe0d84ec870d0d" translate="yes" xml:space="preserve">
          <source>Commit Exclusions</source>
          <target state="translated">コミット除外</target>
        </trans-unit>
        <trans-unit id="d05672f731c8973c38856897c1597b273795a8b8" translate="yes" xml:space="preserve">
          <source>Commit Formatting</source>
          <target state="translated">コミットフォーマット</target>
        </trans-unit>
        <trans-unit id="dd5ce850ad942688eb2a5bc300a25747c87232f5" translate="yes" xml:space="preserve">
          <source>Commit Limiting</source>
          <target state="translated">コミット制限</target>
        </trans-unit>
        <trans-unit id="b518afb06183e6dd261846ce6b7c3883dfb90753" translate="yes" xml:space="preserve">
          <source>Commit Object</source>
          <target state="translated">コミットオブジェクト</target>
        </trans-unit>
        <trans-unit id="d0a18b5ae3a3d7dd2d18ac07312a3fb851663f8e" translate="yes" xml:space="preserve">
          <source>Commit Ordering</source>
          <target state="translated">コミット順序</target>
        </trans-unit>
        <trans-unit id="cf42eef97d741d8fac1d744839ed812ca253ade6" translate="yes" xml:space="preserve">
          <source>Commit automatically if the patch applied cleanly. It will not commit if any hunks fail to apply or there were other problems.</source>
          <target state="translated">パッチがきれいに適用された場合は自動的にコミットされます。ハンクの適用に失敗した場合やその他の問題があった場合はコミットされません。</target>
        </trans-unit>
        <trans-unit id="d6fc46793322e7555ef7eec902c3baf2d380d288" translate="yes" xml:space="preserve">
          <source>Commit each diff from the current branch directly to the SVN repository, and then rebase or reset (depending on whether or not there is a diff between SVN and head). This will create a revision in SVN for each commit in Git.</source>
          <target state="translated">現在のブランチの各 diff を直接 SVN リポジトリにコミットし、リベースまたはリセットします (SVN と head の間に diff があるかどうかによって異なります)。これにより、Git でのコミットごとに SVN にリビジョンが作成されます。</target>
        </trans-unit>
        <trans-unit id="32d864cf4da09ae0ccb717144326eeb4d87e8ec8" translate="yes" xml:space="preserve">
          <source>Commit information</source>
          <target state="translated">コミット情報</target>
        </trans-unit>
        <trans-unit id="cdf751d893db0a24e80b369d44da2bfa908750cb" translate="yes" xml:space="preserve">
          <source>Commit log messages are typically encoded in UTF-8, but other extended ASCII encodings are also supported. This includes ISO-8859-x, CP125x and many others, but &lt;code&gt;not&lt;/code&gt; UTF-16/32, EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5, EUC-x, CP9xx etc.).</source>
          <target state="translated">コミットログメッセージは通常UTF-8でエンコードされますが、他の拡張ASCIIエンコードもサポートされています。これには、ISO-8859-x、CP125x、その他多くのものが含まれますが &lt;code&gt;not&lt;/code&gt; UTF-16 / 32、EBCDIC、CJKマルチバイトエンコーディング（GBK、Shift-JIS、Big5、EUC-x、CP9xxなど）は含まれません。</target>
        </trans-unit>
        <trans-unit id="a8ef9cdaba51b8bab239b7175f652bb22d7bc77a" translate="yes" xml:space="preserve">
          <source>Commit messages (even if they are all UTF-8) by default become corrupted due to not being updated &amp;mdash; any references to other commit hashes in commit messages will now refer to no-longer-extant commits.</source>
          <target state="translated">コミットメッセージ（すべてUTF-8であっても）は、更新されていないためにデフォルトで破損します。コミットメッセージ内の他のコミットハッシュへの参照は、もはや長くないコミットを参照します。</target>
        </trans-unit>
        <trans-unit id="a0d43ade6a679ebd3be023e33c0ed655845a2385" translate="yes" xml:space="preserve">
          <source>Commit notes are blobs containing extra information about an object (usually information to supplement a commit&amp;rsquo;s message). These blobs are taken from notes refs. A notes ref is usually a branch which contains &quot;files&quot; whose paths are the object names for the objects they describe, with some directory separators included for performance reasons &lt;sup&gt;[&lt;a href=&quot;#_footnote_1&quot; id=&quot;_footnoteref_1&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;.</source>
          <target state="translated">コミットノートは、オブジェクトに関する追加情報（通常はコミットのメッセージを補足する情報）を含むblobです。これらのblobは、ノート参照から取得されます。notes refは通常、それらが記述するオブジェクトのオブジェクト名をパスとする「ファイル」を含むブランチであり、パフォーマンス上の理由で一部のディレクトリ区切り文字が含まれています&lt;sup&gt;[ &lt;a href=&quot;#_footnote_1&quot; id=&quot;_footnoteref_1&quot;&gt;1&lt;/a&gt; ]&lt;/sup&gt;。</target>
        </trans-unit>
        <trans-unit id="340dec00f8e27e530fc4429d17a96a5706fe14b1" translate="yes" xml:space="preserve">
          <source>Commit objects created with the above setting record the value of &lt;code&gt;i18n.commitEncoding&lt;/code&gt; in its &lt;code&gt;encoding&lt;/code&gt; header. This is to help other people who look at them later. Lack of this header implies that the commit log message is encoded in UTF-8.</source>
          <target state="translated">上記の設定で作成されたコミットオブジェクトは、 &lt;code&gt;encoding&lt;/code&gt; ヘッダーに &lt;code&gt;i18n.commitEncoding&lt;/code&gt; の値を記録します。これは後で見る人を助けるためです。このヘッダーがないことは、コミットログメッセージがUTF-8でエンコードされていることを意味します。</target>
        </trans-unit>
        <trans-unit id="3e636bd205abbae562ddd3b2c8e7ad0ad71d57b9" translate="yes" xml:space="preserve">
          <source>Commit the now-current index with whatever commit message is appropriate now.</source>
          <target state="translated">現在のインデックスを、現在適切なコミットメッセージでコミットします。</target>
        </trans-unit>
        <trans-unit id="0d30e12bd35c1bbb537786b722f71f7710203505" translate="yes" xml:space="preserve">
          <source>Commit the superproject:</source>
          <target state="translated">スーパープロジェクトをコミットします。</target>
        </trans-unit>
        <trans-unit id="c2ba6e6758d4e077ba6384de032e88b129ac1452" translate="yes" xml:space="preserve">
          <source>Commit to end at (defaults to HEAD). This names the commit at the tip of the history you are asking to be pulled.</source>
          <target state="translated">終了するコミットを指定します (デフォルトは HEAD)。これは、引っ張ってもらいたい履歴の先端にあるコミットの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="5d83b220e2a717b4332302a14b01dfcf38b82250" translate="yes" xml:space="preserve">
          <source>Commit to start at. This names a commit that is already in the upstream history.</source>
          <target state="translated">開始するコミットを指定します。すでに上流の履歴にあるコミットに名前を付けます。</target>
        </trans-unit>
        <trans-unit id="58a3fb0fa9151eaf5eb44aad642ac139bbd8d0a3" translate="yes" xml:space="preserve">
          <source>Commit to this SVN URL (the full path). This is intended to allow existing &lt;code&gt;git svn&lt;/code&gt; repositories created with one transport method (e.g. &lt;code&gt;svn://&lt;/code&gt; or &lt;code&gt;http://&lt;/code&gt; for anonymous read) to be reused if a user is later given access to an alternate transport method (e.g. &lt;code&gt;svn+ssh://&lt;/code&gt; or &lt;code&gt;https://&lt;/code&gt;) for commit.</source>
          <target state="translated">このSVN URL（絶対パス）にコミットします。これは、ユーザーが後で別のトランスポートメソッド（ &lt;code&gt;svn+ssh://&lt;/code&gt; へのアクセス権を与えられた場合に、1つのトランスポートメソッド（たとえば、匿名読み取りの場合は &lt;code&gt;svn://&lt;/code&gt; または &lt;code&gt;http://&lt;/code&gt; ）で作成された既存の &lt;code&gt;git svn&lt;/code&gt; リポジトリを再利用できるようにするためです。 //または &lt;code&gt;https://&lt;/code&gt; ）でコミットします。</target>
        </trans-unit>
        <trans-unit id="5d95f392f7b327e450a5cff3a7d0d778dd7bb17a" translate="yes" xml:space="preserve">
          <source>Commit-ish object names to describe. Defaults to HEAD if omitted.</source>
          <target state="translated">記述するコミット的なオブジェクト名。省略した場合のデフォルトは HEAD です。</target>
        </trans-unit>
        <trans-unit id="806d7e617bf08278640b3918df6eb314e00c91ba" translate="yes" xml:space="preserve">
          <source>Commits A and B would no longer belong to a branch with a symbolic name, and so would be unreachable. As such, these commits would be removed by a &lt;code&gt;git gc&lt;/code&gt; command on the origin repository.</source>
          <target state="translated">コミットAとBは、シンボル名を持つブランチに属さなくなり、到達できなくなります。そのため、これらのコミットは、オリジンリポジトリの &lt;code&gt;git gc&lt;/code&gt; コマンドによって削除されます。</target>
        </trans-unit>
        <trans-unit id="cd34e82ef88e8c2479cf92c1c7e01e1f9402380d" translate="yes" xml:space="preserve">
          <source>Commits are included if they are not TREESAME to any parent (though this can be changed, see &lt;code&gt;--sparse&lt;/code&gt; below). If the commit was a merge, and it was TREESAME to one parent, follow only that parent. (Even if there are several TREESAME parents, follow only one of them.) Otherwise, follow all parents.</source>
          <target state="translated">コミットは、どの親にもTREESAMEでない場合に含まれます（これは変更できますが、以下の &lt;code&gt;--sparse&lt;/code&gt; を参照してください）。コミットがマージで、1つの親へのTREESAMEであった場合、その親のみを追跡します。（TREESAMEの親が複数ある場合でも、そのうちの1つだけを実行します。）そうでない場合は、すべての親を実行します。</target>
        </trans-unit>
        <trans-unit id="639abedb72340eed90c014868e55014692d325d7" translate="yes" xml:space="preserve">
          <source>Commits modifying the given &amp;lt;paths&amp;gt; are selected.</source>
          <target state="translated">指定された&amp;lt;paths&amp;gt;を変更するコミットが選択されます。</target>
        </trans-unit>
        <trans-unit id="e092c6ca44bf3dcd26785c6425ee818e873ea1fd" translate="yes" xml:space="preserve">
          <source>Commits that are referred by some branch or tag are selected.</source>
          <target state="translated">何らかのブランチやタグで参照されているコミットが選択されます。</target>
        </trans-unit>
        <trans-unit id="6d094219b19302ca10342a1d1eec0568558c2bd8" translate="yes" xml:space="preserve">
          <source>Commits that are walked are included if they are not TREESAME to any parent.</source>
          <target state="translated">歩いているコミットは、どの親にもTREESAMEでなければ含まれています。</target>
        </trans-unit>
        <trans-unit id="ef7e9aac4d19855b4ef3c8efc0ae0f7c81184b39" translate="yes" xml:space="preserve">
          <source>Commits the diff of two tree-ish arguments from the command-line. This command does not rely on being inside a &lt;code&gt;git svn
init&lt;/code&gt;-ed repository. This command takes three arguments, (a) the original tree to diff against, (b) the new tree result, (c) the URL of the target Subversion repository. The final argument (URL) may be omitted if you are working from a &lt;code&gt;git svn&lt;/code&gt;-aware repository (that has been &lt;code&gt;init&lt;/code&gt;-ed with &lt;code&gt;git svn&lt;/code&gt;). The -r&amp;lt;revision&amp;gt; option is required for this.</source>
          <target state="translated">コマンドラインからの2つのツリーのような引数の差分をコミットします。このコマンドは、 &lt;code&gt;git svn init&lt;/code&gt; -edリポジトリ内にあることには依存しません。このコマンドは、（a）比較対象の元のツリー、（b）新しいツリーの結果、（c）ターゲットのSubversionリポジトリのURLの3つの引数を取ります。あなたから作業している場合は最後の引数（URL）を省略することができる &lt;code&gt;git svn&lt;/code&gt; -awareリポジトリ（それがされている &lt;code&gt;init&lt;/code&gt; -edと &lt;code&gt;git svn&lt;/code&gt; ）。これには-r &amp;lt;revision&amp;gt;オプションが必要です。</target>
        </trans-unit>
        <trans-unit id="958e7e955e68b84d191b41f660f0af907a1a26e7" translate="yes" xml:space="preserve">
          <source>Commits to cherry-pick. For a more complete list of ways to spell commits, see &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;. Sets of commits can be passed but no traversal is done by default, as if the &lt;code&gt;--no-walk&lt;/code&gt; option was specified, see &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt;. Note that specifying a range will feed all &amp;lt;commit&amp;gt;&amp;hellip;​ arguments to a single revision walk (see a later example that uses &lt;code&gt;maint master..next&lt;/code&gt;).</source>
          <target state="translated">チェリーピックをお約束します。コミットを綴る方法のより完全なリストについては、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]を&lt;/a&gt;参照してください。 &lt;code&gt;--no-walk&lt;/code&gt; オプションが指定されたかのように、コミットのセットを渡すことはできますが、デフォルトではトラバーサルは行われません&lt;a href=&quot;git-rev-list&quot;&gt;。git-rev-list [1]を&lt;/a&gt;参照してください。範囲を指定すると、すべての&amp;lt;commit&amp;gt;&amp;hellip;引数が単一のリビジョンウォークに &lt;code&gt;maint master..next&lt;/code&gt; てください（maint master..nextを使用する後の例を参照）。</target>
        </trans-unit>
        <trans-unit id="dbab89c03eabe421a0f756d1774250a10ff8a483" translate="yes" xml:space="preserve">
          <source>Commits to revert. For a more complete list of ways to spell commit names, see &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;. Sets of commits can also be given but no traversal is done by default, see &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt; and its &lt;code&gt;--no-walk&lt;/code&gt; option.</source>
          <target state="translated">元に戻すことを約束します。コミット名を綴る方法のより完全なリストについては、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]を&lt;/a&gt;参照してください。コミットのセットを指定することもできますが、デフォルトではトラバーサルは行われません&lt;a href=&quot;git-rev-list&quot;&gt;。git-rev-list[1]&lt;/a&gt;とその &lt;code&gt;--no-walk&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="49656a8c34bd2a56ea7b1c4c19ee41def8e375e6" translate="yes" xml:space="preserve">
          <source>Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a merge with more than two parents (affectionately called an Octopus merge).</source>
          <target state="translated">私たちのブランチにマージするコミット (通常は他のブランチヘッド)。複数のコミットを指定すると、2 つ以上の親を持つマージが作成されます (愛称:Octopus マージ)。</target>
        </trans-unit>
        <trans-unit id="c73e3ca2125dd6b66724a23fd1d9404dae439c7b" translate="yes" xml:space="preserve">
          <source>Committing everything directly on the integration branches leads to many problems: Bad commits cannot be undone, so they must be reverted one by one, which creates confusing histories and further error potential when you forget to revert part of a group of changes. Working in parallel mixes up the changes, creating further confusion.</source>
          <target state="translated">すべてを統合ブランチに直接コミットすると、多くの問題が発生します。悪いコミットは元に戻すことができないので、一つ一つ元に戻さなければなりません。並行して作業すると変更が混ざってしまい、さらに混乱を招くことになります。</target>
        </trans-unit>
        <trans-unit id="fe3255bd451d3471e881939414843a91c1360c6e" translate="yes" xml:space="preserve">
          <source>Committing git state</source>
          <target state="translated">git の状態をコミットする</target>
        </trans-unit>
        <trans-unit id="429882fbdbb00bcd134816d89830eb4242096534" translate="yes" xml:space="preserve">
          <source>Common Git shell script setup code</source>
          <target state="translated">一般的な Git シェルスクリプトの設定コード</target>
        </trans-unit>
        <trans-unit id="8a9ecfa5494a6336bbbe04b6056604a3b2505855" translate="yes" xml:space="preserve">
          <source>Common Key/Value Pairs</source>
          <target state="translated">共通キー/値のペア</target>
        </trans-unit>
        <trans-unit id="1af5706ae88f10b9ead3cfff1d78f59757380eca" translate="yes" xml:space="preserve">
          <source>Common diff options</source>
          <target state="translated">共通の差分オプション</target>
        </trans-unit>
        <trans-unit id="17cfc9441a242e68c384e9b5b8cf9a0e4a24fffd" translate="yes" xml:space="preserve">
          <source>Common unit suffixes of &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, or &lt;code&gt;g&lt;/code&gt; are supported.</source>
          <target state="translated">&lt;code&gt;k&lt;/code&gt; 、 &lt;code&gt;m&lt;/code&gt; 、または &lt;code&gt;g&lt;/code&gt; の共通の単位サフィックスがサポートされています。</target>
        </trans-unit>
        <trans-unit id="2d454855d2445672da925706dc840080c654c187" translate="yes" xml:space="preserve">
          <source>Compare a tree to the working tree or index</source>
          <target state="translated">ツリーを作業ツリーまたはインデックスと比較する</target>
        </trans-unit>
        <trans-unit id="b052eee7a70522f76de64441f0532b8b978732a8" translate="yes" xml:space="preserve">
          <source>Compare the commits specified by the two ranges, where &lt;code&gt;&amp;lt;range1&amp;gt;&lt;/code&gt; is considered an older version of &lt;code&gt;&amp;lt;range2&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">2つの範囲で指定されたコミットを比較します。ここで、 &lt;code&gt;&amp;lt;range1&amp;gt;&lt;/code&gt; は&amp;lt;range2&amp;gt;の古いバージョンと &lt;code&gt;&amp;lt;range2&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbedfc6f6fea6e33a27f5f1a33053dbff1a37614" translate="yes" xml:space="preserve">
          <source>Compare the version before the last commit and the last commit.</source>
          <target state="translated">最後にコミットする前のバージョンと、最後にコミットする前のバージョンを比較します。</target>
        </trans-unit>
        <trans-unit id="108964900757319250c09d41bf5206fee17fbebf" translate="yes" xml:space="preserve">
          <source>Compare the working tree with the &quot;base&quot; version (stage #1), &quot;our branch&quot; (stage #2) or &quot;their branch&quot; (stage #3). The index contains these stages only for unmerged entries i.e. while resolving conflicts. See &lt;a href=&quot;git-read-tree&quot;&gt;git-read-tree[1]&lt;/a&gt; section &quot;3-Way Merge&quot; for detailed information.</source>
          <target state="translated">作業ツリーを「ベース」バージョン（ステージ＃1）、「私たちのブランチ」（ステージ＃2）、または「自分のブランチ」（ステージ＃3）と比較します。インデックスには、マージされていないエントリ（競合の解決中）の場合のみこれらのステージが含まれます。詳細については、&lt;a href=&quot;git-read-tree&quot;&gt;git-read-tree [1]&lt;/a&gt;セクションの「3方向のマージ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="417383ec38892ec59642ec5eded68ccdbddd54d0" translate="yes" xml:space="preserve">
          <source>Compare to &lt;code&gt;--full-history&lt;/code&gt; without rewriting above. Note that &lt;code&gt;E&lt;/code&gt; was pruned away because it is TREESAME, but the parent list of P was rewritten to contain &lt;code&gt;E&lt;/code&gt;'s parent &lt;code&gt;I&lt;/code&gt;. The same happened for &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt;, and &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;Y&lt;/code&gt; and &lt;code&gt;Q&lt;/code&gt;.</source>
          <target state="translated">上記を書き換えずに &lt;code&gt;--full-history&lt;/code&gt; と比較してください。TはTREESAMEであるため、 &lt;code&gt;E&lt;/code&gt; は削除されましたが、Pの親リストは &lt;code&gt;E&lt;/code&gt; の親 &lt;code&gt;I&lt;/code&gt; を含むように書き直されました。 &lt;code&gt;C&lt;/code&gt; と &lt;code&gt;N&lt;/code&gt; 、および &lt;code&gt;X&lt;/code&gt; 、 &lt;code&gt;Y&lt;/code&gt; 、 &lt;code&gt;Q&lt;/code&gt; でも同じことが起こりました。</target>
        </trans-unit>
        <trans-unit id="4186f0f14c1670feb8e3a98bffba021e85440c5e" translate="yes" xml:space="preserve">
          <source>Compare two commit ranges (e.g. two versions of a branch)</source>
          <target state="translated">2 つのコミット範囲を比較する (例:ブランチの 2 つのバージョンを比較する)</target>
        </trans-unit>
        <trans-unit id="efcf6f2f0a57938476e9e49afce7ef20662e5045" translate="yes" xml:space="preserve">
          <source>Compares files in the working tree and the index</source>
          <target state="translated">作業ツリーとインデックスのファイルを比較します。</target>
        </trans-unit>
        <trans-unit id="b51a5025d034c563fd7e4cf2f1781edb403c8a61" translate="yes" xml:space="preserve">
          <source>Compares the content and mode of blobs found via two tree objects</source>
          <target state="translated">2つのツリーオブジェクトを介して検出されたブロブの内容とモードを比較します。</target>
        </trans-unit>
        <trans-unit id="4bed9c3374f6538cd59dc69ff688ff3c6921c3b0" translate="yes" xml:space="preserve">
          <source>Compares the content and mode of the blobs found in a tree object with the corresponding tracked files in the working tree, or with the corresponding paths in the index. When &amp;lt;path&amp;gt; arguments are present, compares only paths matching those patterns. Otherwise all tracked files are compared.</source>
          <target state="translated">ツリーオブジェクトで見つかったblobのコンテンツとモードを、作業ツリー内の対応する追跡ファイル、またはインデックス内の対応するパスと比較します。&amp;lt;path&amp;gt;引数が存在する場合、それらのパターンに一致するパスのみを比較します。それ以外の場合は、すべての追跡ファイルが比較されます。</target>
        </trans-unit>
        <trans-unit id="37c34b145e3b8ab67ff7b61ff3d11d3a3ac26e63" translate="yes" xml:space="preserve">
          <source>Compares the content and mode of the blobs found via two tree objects.</source>
          <target state="translated">2 つのツリーオブジェクトを介して検出された blob の内容とモードを比較します。</target>
        </trans-unit>
        <trans-unit id="7bbeb5d1d5d86904df9d33155d8ac31a0ac700db" translate="yes" xml:space="preserve">
          <source>Compares the files in the working tree and the index. When paths are specified, compares only those named paths. Otherwise all entries in the index are compared. The output format is the same as for &lt;code&gt;git diff-index&lt;/code&gt; and &lt;code&gt;git diff-tree&lt;/code&gt;.</source>
          <target state="translated">作業ツリー内のファイルとインデックスを比較します。パスが指定されている場合、それらの名前付きパスのみを比較します。それ以外の場合、インデックス内のすべてのエントリが比較されます。出力形式は &lt;code&gt;git diff-index&lt;/code&gt; および &lt;code&gt;git diff-tree&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="f362db0c69868c1d491d62f5976e73dedfebf2ca" translate="yes" xml:space="preserve">
          <source>Comparing blobs or trees that have been replaced with those that replace them will not work properly. And using &lt;code&gt;git reset --hard&lt;/code&gt; to go back to a replaced commit will move the branch to the replacement commit instead of the replaced commit.</source>
          <target state="translated">置き換えられたブロブまたはツリーをそれらを置き換えるものと比較すると、正しく機能しません。そして、 &lt;code&gt;git reset --hard&lt;/code&gt; を使用して置換されたコミットに戻ると、置換されたコミットではなく置換されたコミットにブランチが移動します。</target>
        </trans-unit>
        <trans-unit id="e0150129e57bff1f18c9fdecdc5f6497b9177eb2" translate="yes" xml:space="preserve">
          <source>Comparing branches</source>
          <target state="translated">枝の比較</target>
        </trans-unit>
        <trans-unit id="275ba455480c0eb203a002756ce88295e425384f" translate="yes" xml:space="preserve">
          <source>Comparing with arbitrary commits</source>
          <target state="translated">任意のコミットとの比較</target>
        </trans-unit>
        <trans-unit id="0623cdc962e5b3ec3734b834b479126f0b30d78b" translate="yes" xml:space="preserve">
          <source>Complete list of all commands</source>
          <target state="translated">全コマンドの完全なリスト</target>
        </trans-unit>
        <trans-unit id="678bc9ada07c728ccee1f48de02cb28152653f42" translate="yes" xml:space="preserve">
          <source>Composing</source>
          <target state="translated">Composing</target>
        </trans-unit>
        <trans-unit id="3a4b462b90ad947c014f566102a2e5a0dd92671e" translate="yes" xml:space="preserve">
          <source>Comprehensive reference documentation is available through the man pages, or &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt; command. For example, for the command &lt;code&gt;git clone &amp;lt;repo&amp;gt;&lt;/code&gt;, you can either use:</source>
          <target state="translated">包括的なリファレンスドキュメントは、manページまたは&lt;a href=&quot;git-help&quot;&gt;git-help [1]&lt;/a&gt;コマンドから入手できます。たとえば、コマンド &lt;code&gt;git clone &amp;lt;repo&amp;gt;&lt;/code&gt; の場合、次のいずれかを使用できます。</target>
        </trans-unit>
        <trans-unit id="90ae7930698f6a9514e277afc75b1efe24fb78ff" translate="yes" xml:space="preserve">
          <source>Compress $GIT_DIR/svn/&amp;lt;refname&amp;gt;/unhandled.log files and remove $GIT_DIR/svn/&amp;lt;refname&amp;gt;/index files.</source>
          <target state="translated">$ GIT_DIR / svn / &amp;lt;refname&amp;gt; /unhandled.logファイルを圧縮し、$ GIT_DIR / svn / &amp;lt;refname&amp;gt; / indexファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="af5758a107c963e9444cff5454d146835b9b660b" translate="yes" xml:space="preserve">
          <source>Compute object ID and optionally creates a blob from a file</source>
          <target state="translated">オブジェクトIDを計算し、オプションでファイルからブロブを作成します。</target>
        </trans-unit>
        <trans-unit id="01c4a7d17645c800690175029629fd7aeb958298" translate="yes" xml:space="preserve">
          <source>Compute the best common ancestors of all supplied commits, in preparation for an n-way merge. This mimics the behavior of &lt;code&gt;git show-branch --merge-base&lt;/code&gt;.</source>
          <target state="translated">n-wayマージの準備として、提供されたすべてのコミットの最も一般的な祖先を計算します。これは &lt;code&gt;git show-branch --merge-base&lt;/code&gt; の動作を模倣しています。</target>
        </trans-unit>
        <trans-unit id="9bde35c0f2dc15b67baddfc39466c5eba5799786" translate="yes" xml:space="preserve">
          <source>Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.</source>
          <target state="translated">ソースから削除された行、または宛先に追加された行をカウントすることで、dirstatの数値を計算します。これはファイル内の純粋なコードの動きを無視します。言い換えれば、ファイル内の行の並び替えは、他の変更と同様にカウントされません。これは、パラメータが与えられていない場合のデフォルトの動作です。</target>
        </trans-unit>
        <trans-unit id="d5135b971c817889635eeca2e7a1431f33e06f37" translate="yes" xml:space="preserve">
          <source>Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest &lt;code&gt;--dirstat&lt;/code&gt; behavior, since it does not have to look at the file contents at all.</source>
          <target state="translated">変更されたファイルの数をカウントして、dirstatの数を計算します。dirstat分析では、変更された各ファイルが等しくカウントされます。これは、ファイルの内容をまったく見る必要がないため、計算上最も安価な &lt;code&gt;--dirstat&lt;/code&gt; の動作です。</target>
        </trans-unit>
        <trans-unit id="3058cd552896436a63e7fe6f202c943042969930" translate="yes" xml:space="preserve">
          <source>Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive &lt;code&gt;--dirstat&lt;/code&gt; behavior than the &lt;code&gt;changes&lt;/code&gt; behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other &lt;code&gt;--*stat&lt;/code&gt; options.</source>
          <target state="translated">通常の行ベースの差分分析を行い、削除/追加された行数を合計することにより、dirstat番号を計算します。（バイナリファイルには、行の自然な概念がないため、代わりに64バイトのチャンクをカウントしてください）。これは、 &lt;code&gt;changes&lt;/code&gt; 動作よりも &lt;code&gt;--dirstat&lt;/code&gt; 動作の方が負荷が高くなりますが、ファイル内の再配置された行を他の変更と同様に数えます。結果の出力は、他の &lt;code&gt;--*stat&lt;/code&gt; オプションから得られるものと一致しています。</target>
        </trans-unit>
        <trans-unit id="6a0b0a16b974bf1fed36c439dfbdefde29d32d7c" translate="yes" xml:space="preserve">
          <source>Compute unique ID for a patch</source>
          <target state="translated">パッチの一意のIDを計算する</target>
        </trans-unit>
        <trans-unit id="8998103614864fe1630f3c6a0063c614dbc4eadb" translate="yes" xml:space="preserve">
          <source>Computes the object ID value for an object with specified type with the contents of the named file (which can be outside of the work tree), and optionally writes the resulting object into the object database. Reports its object ID to its standard output. When &amp;lt;type&amp;gt; is not specified, it defaults to &quot;blob&quot;.</source>
          <target state="translated">指定されたタイプのオブジェクトのオブジェクトID値を、指定されたファイル（作業ツリーの外にある可能性があります）の内容で計算し、オプションで結果のオブジェクトをオブジェクトデータベースに書き込みます。オブジェクトIDを標準出力に報告します。&amp;lt;type&amp;gt;を指定しない場合、デフォルトで「blob」になります。</target>
        </trans-unit>
        <trans-unit id="937949a3d933696c9d4185384073018afe774033" translate="yes" xml:space="preserve">
          <source>Concatenates the contents of said Makefiles in the head of the branch &lt;code&gt;master&lt;/code&gt;.</source>
          <target state="translated">ブランチ &lt;code&gt;master&lt;/code&gt; ヘッドにあるMakefileの内容を連結します。</target>
        </trans-unit>
        <trans-unit id="7d484eb61cfd5469110c2312d1ec91512fe53e6a" translate="yes" xml:space="preserve">
          <source>Conceptually there are only four object types: commit, tree, tag and blob. However to save space, an object could be stored as a &quot;delta&quot; of another &quot;base&quot; object. These representations are assigned new types ofs-delta and ref-delta, which is only valid in a pack file.</source>
          <target state="translated">概念的には、コミット、ツリー、タグ、ブロブの4つのオブジェクトタイプしかありません。しかし、スペースを節約するために、オブジェクトは別の &quot;ベース &quot;オブジェクトの &quot;デルタ &quot;として格納することができます。これらの表現には新しいタイプの ofs-delta と ref-delta が割り当てられ、パックファイル内でのみ有効です。</target>
        </trans-unit>
        <trans-unit id="f9ce6c77a92950f557622abcc328a5c52bc5ce16" translate="yes" xml:space="preserve">
          <source>Conceptually, &lt;code&gt;git write-tree&lt;/code&gt; sync()s the current index contents into a set of tree files. In order to have that match what is actually in your directory right now, you need to have done a &lt;code&gt;git update-index&lt;/code&gt; phase before you did the &lt;code&gt;git write-tree&lt;/code&gt;.</source>
          <target state="translated">概念的には、 &lt;code&gt;git write-tree&lt;/code&gt; sync（）は、現在のインデックスの内容を一連のツリーファイルに書き込みます。現在ディレクトリに実際にあるものと一致させるには、 &lt;code&gt;git write-tree&lt;/code&gt; を実行する前に &lt;code&gt;git update-index&lt;/code&gt; フェーズを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="9ca3e3f6198d8db66027f645ef57e4ac30e9a37f" translate="yes" xml:space="preserve">
          <source>Conceptually, the feature enters at an unstable branch (usually &lt;code&gt;next&lt;/code&gt; or &lt;code&gt;pu&lt;/code&gt;), and &quot;graduates&quot; to &lt;code&gt;master&lt;/code&gt; for the next release once it is considered stable enough.</source>
          <target state="translated">概念的には、機能は不安定なブランチ（通常は &lt;code&gt;next&lt;/code&gt; または &lt;code&gt;pu&lt;/code&gt; ）に入り、十分に安定していると見なされると、次のリリースを &lt;code&gt;master&lt;/code&gt; ために&quot;卒業&quot;します。</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="c144db8f4732a9347031a1b40f149e52d91f565f" translate="yes" xml:space="preserve">
          <source>Concrete example</source>
          <target state="translated">具体的な例</target>
        </trans-unit>
        <trans-unit id="1805d25f90c97785232c09de6be3d92c9bae4482" translate="yes" xml:space="preserve">
          <source>Conditional includes</source>
          <target state="translated">条件には以下のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="1eca678ae2103e84056e13fabe651ada3207805a" translate="yes" xml:space="preserve">
          <source>Cone pattern set</source>
          <target state="translated">コーンパターンセット</target>
        </trans-unit>
        <trans-unit id="eb7272ff2c451e4d56ff0b5035c89e6773552a2b" translate="yes" xml:space="preserve">
          <source>Config file-only options</source>
          <target state="translated">ファイルのみのオプションを設定する</target>
        </trans-unit>
        <trans-unit id="422fb4b2c323c56fc618406ee76b1fefb87edd1b" translate="yes" xml:space="preserve">
          <source>Config variables</source>
          <target state="translated">設定変数</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="acdba8395423767de730ee1b75436df3a0ebc87e" translate="yes" xml:space="preserve">
          <source>Configuration file</source>
          <target state="translated">設定ファイル</target>
        </trans-unit>
        <trans-unit id="70c34b77eccd45b690bac76f834e5695507ca571" translate="yes" xml:space="preserve">
          <source>Configuration mechanism</source>
          <target state="translated">構成機構</target>
        </trans-unit>
        <trans-unit id="f4d40d6c54ed064cd5675e2b020be36dc38807c6" translate="yes" xml:space="preserve">
          <source>Configuration options</source>
          <target state="translated">設定オプション</target>
        </trans-unit>
        <trans-unit id="38b23d1375544f4a68ea9228188041f47459e054" translate="yes" xml:space="preserve">
          <source>Configuration variables</source>
          <target state="translated">設定変数</target>
        </trans-unit>
        <trans-unit id="8a66ea31ab3d6b079e67d729ad34365bb857146f" translate="yes" xml:space="preserve">
          <source>Configure a &quot;tar.xz&quot; format for making LZMA-compressed tarfiles. You can use it specifying &lt;code&gt;--format=tar.xz&lt;/code&gt;, or by creating an output file like &lt;code&gt;-o foo.tar.xz&lt;/code&gt;.</source>
          <target state="translated">LZMA圧縮tarfileを作成するための「tar.xz」形式を構成します。 &lt;code&gt;--format=tar.xz&lt;/code&gt; を指定するか、 &lt;code&gt;-o foo.tar.xz&lt;/code&gt; のような出力ファイルを作成して使用できます。</target>
        </trans-unit>
        <trans-unit id="f6a6815a7f24dfffdb1d929dd323aaec05a9ab47" translate="yes" xml:space="preserve">
          <source>Configure a &lt;code&gt;fix&lt;/code&gt; trailer with a key that contains a &lt;code&gt;#&lt;/code&gt; and no space after this character, and show how it works:</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; を含み、この文字の後にスペースを含まないキーを使用して &lt;code&gt;fix&lt;/code&gt; トレーラーを構成し、それがどのように機能するかを示します。</target>
        </trans-unit>
        <trans-unit id="ce90c0bc932e5f1df9b68ee7ec6c0da58d747ea5" translate="yes" xml:space="preserve">
          <source>Configure a &lt;code&gt;see&lt;/code&gt; trailer with a command to show the subject of a commit that is related, and show how it works:</source>
          <target state="translated">関連するコミットの件名を表示し、それがどのように機能するかを示すコマンドを使用して、予告編を構成し &lt;code&gt;see&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c9ccaafdcef74174cf7734bdb6a6d7caabe83888" translate="yes" xml:space="preserve">
          <source>Configure a &lt;code&gt;sign&lt;/code&gt; trailer with a &lt;code&gt;Signed-off-by&lt;/code&gt; key, and then add two of these trailers to a message:</source>
          <target state="translated">設定し &lt;code&gt;sign&lt;/code&gt; 付きトレーラー &lt;code&gt;Signed-off-by&lt;/code&gt; 、キー、およびそのメッセージにこれらのトレーラーのうち2つを追加します。</target>
        </trans-unit>
        <trans-unit id="e0f5abc21cdfc10087712a4df06b45d6f1ed9b35" translate="yes" xml:space="preserve">
          <source>Configure a &lt;code&gt;sign&lt;/code&gt; trailer with a command to automatically add a 'Signed-off-by: ' with the author information only if there is no 'Signed-off-by: ' already, and show how it works:</source>
          <target state="translated">「Signed-off-by：」が既に存在しない場合にのみ作成者情報を含む「Signed-off-by：」を自動的に追加し、その動作を示すコマンドを使用して、 &lt;code&gt;sign&lt;/code&gt; トレーラーを構成します。</target>
        </trans-unit>
        <trans-unit id="f50c440d2f6f9060cd052adb1632feec1a0c614d" translate="yes" xml:space="preserve">
          <source>Configure a commit template with some trailers with empty values (using sed to show and keep the trailing spaces at the end of the trailers), then configure a commit-msg hook that uses &lt;code&gt;git interpret-trailers&lt;/code&gt; to remove trailers with empty values and to add a &lt;code&gt;git-version&lt;/code&gt; trailer:</source>
          <target state="translated">空の値を持ついくつかのトレーラーでコミットテンプレートを構成し（sedを使用してトレーラーの末尾に末尾のスペースを表示および保持）、次に &lt;code&gt;git interpret-trailers&lt;/code&gt; を使用して空の値を持つトレーラーを削除し、追加するcommit-msgフックを構成します &lt;code&gt;git-version&lt;/code&gt; トレーラー：</target>
        </trans-unit>
        <trans-unit id="3f6c615a6da0f7262f6f2dbcc08ecf276b931a9e" translate="yes" xml:space="preserve">
          <source>Configure your general composition window to not wrap.</source>
          <target state="translated">一般的な構図ウィンドウをラップしないように設定します。</target>
        </trans-unit>
        <trans-unit id="3551290f2193aa1e636343f0cbcbc633f639f8c4" translate="yes" xml:space="preserve">
          <source>Configure your mail server composition as plain text: Edit&amp;hellip;​Account Settings&amp;hellip;​Composition &amp;amp; Addressing, uncheck &quot;Compose Messages in HTML&quot;.</source>
          <target state="translated">メールサーバーの構成をプレーンテキストとして構成します。編集&amp;hellip;アカウント設定&amp;hellip;構成とアドレス指定で、[HTMLでメッセージを作成]をオフにします。</target>
        </trans-unit>
        <trans-unit id="3e29b2ee31b493715ce39183ea79ba9aca718b3b" translate="yes" xml:space="preserve">
          <source>Configured remote-tracking branches</source>
          <target state="translated">リモートトラッキングブランチの設定</target>
        </trans-unit>
        <trans-unit id="4976060b350e89ec5dfdb2a1c1950efb45f52bc3" translate="yes" xml:space="preserve">
          <source>Configuring database backend</source>
          <target state="translated">データベースバックエンドの設定</target>
        </trans-unit>
        <trans-unit id="c983b7934801a3688ed66b5498ab09519448fc97" translate="yes" xml:space="preserve">
          <source>Configuring gitweb features</source>
          <target state="translated">gitweb の機能を設定する</target>
        </trans-unit>
        <trans-unit id="40e0a19569f8f1844d5a471098cc89ca36d5ca64" translate="yes" xml:space="preserve">
          <source>Configuring remote-tracking branches</source>
          <target state="translated">リモートトラッキングブランチの設定</target>
        </trans-unit>
        <trans-unit id="9e40cad468539cb8231b63b11fdb5df741e2d14b" translate="yes" xml:space="preserve">
          <source>Confirm just before sending:</source>
          <target state="translated">送信直前に確認します。</target>
        </trans-unit>
        <trans-unit id="ecda02ba517320c0b15d176b3e447e83063fff66" translate="yes" xml:space="preserve">
          <source>Conflict markers are left in the problematic files, and after you resolve the conflicts manually, you can update the index with the contents and run Git commit, as you normally would when creating a new file.</source>
          <target state="translated">問題のあるファイルにはコンフリクトマーカーが残されており、手動でコンフリクトを解決した後は、通常の新規ファイル作成時と同じように、インデックスを内容で更新してGit commitを実行することができます。</target>
        </trans-unit>
        <trans-unit id="b82d334ed6758888e34c8a34df72370a5d90993b" translate="yes" xml:space="preserve">
          <source>Conflicts can occur when applying a commit to p4. When this happens, the default behavior (&quot;ask&quot;) is to prompt whether to skip this commit and continue, or quit. This option can be used to bypass the prompt, causing conflicting commits to be automatically skipped, or to quit trying to apply commits, without prompting.</source>
          <target state="translated">p4 へのコミットを適用する際にコンフリクトが発生することがあります。このような場合、デフォルトの動作(&quot;ask&quot;)では、このコミットをスキップして続行するか、終了するかのプロンプトが表示されます。このオプションを使用すると、プロンプトを回避して競合するコミットを自動的にスキップしたり、プロンプトを出さずにコミットの適用を終了したりすることができます。</target>
        </trans-unit>
        <trans-unit id="d9246582c40c7034c419d5e149871effa77f01da" translate="yes" xml:space="preserve">
          <source>Connects to given service. Standard input and standard output of helper are connected to specified service (git prefix is included in service name so e.g. fetching uses &lt;code&gt;git-upload-pack&lt;/code&gt; as service) on remote side. Valid replies to this command are empty line (connection established), &lt;code&gt;fallback&lt;/code&gt; (no smart transport support, fall back to dumb transports) and just exiting with error message printed (can&amp;rsquo;t connect, don&amp;rsquo;t bother trying to fall back). After line feed terminating the positive (empty) response, the output of service starts. After the connection ends, the remote helper exits.</source>
          <target state="translated">指定されたサービスに接続します。ヘルパーの標準入力と標準出力は、リモート側の指定されたサービス（gitプレフィックスがサービス名に含まれているため、フェッチにはサービスとして &lt;code&gt;git-upload-pack&lt;/code&gt; が使用されます）に接続されます。このコマンドへの有効な応答は、空の行（接続が確立されている）、 &lt;code&gt;fallback&lt;/code&gt; （スマートトランスポートサポートなし、ダムトランスポートにフォールバック）、エラーメッセージが表示されて終了する（接続できない、フォールバックしようとしない）です。肯定（空）応答を終了する改行後、サービスの出力が開始されます。接続が終了すると、リモートヘルパーが終了します。</target>
        </trans-unit>
        <trans-unit id="ab69689298b341c622fdf07baf6d7935162cc21e" translate="yes" xml:space="preserve">
          <source>Consider &lt;code&gt;.gitattributes&lt;/code&gt; in the index only, ignoring the working tree.</source>
          <target state="translated">作業ツリーを無視して、インデックスのみの &lt;code&gt;.gitattributes&lt;/code&gt; を検討してください。</target>
        </trans-unit>
        <trans-unit id="2e9b2aca01cec344e42ddb2f6c4d43d446641ec6" translate="yes" xml:space="preserve">
          <source>Consider any object recorded in the index also as a head node for an unreachability trace.</source>
          <target state="translated">インデックスに記録されている任意のオブジェクトを、到達不能トレースのヘッドノードとしても考慮してください。</target>
        </trans-unit>
        <trans-unit id="5dd8963c37ba70016cc97181d1437d9d279837cb" translate="yes" xml:space="preserve">
          <source>Consider only commits that are enough to explain how the files that match the specified paths came to be.</source>
          <target state="translated">指定したパスにマッチするファイルがどのようにしてできたのかを説明するのに十分なコミットのみを考慮してください。</target>
        </trans-unit>
        <trans-unit id="ba0254d514d0f2ca6e4ebd12fd91b2a48fa85b1d" translate="yes" xml:space="preserve">
          <source>Consider the following .gitmodules file:</source>
          <target state="translated">次のような .gitmodules ファイルを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="8a3a2dda249f0930d1314682106ca1561464766d" translate="yes" xml:space="preserve">
          <source>Consider the limiting patterns to be Perl-compatible regular expressions.</source>
          <target state="translated">Perl互換の正規表現になるように制限パターンを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="d3cbcdfc580ee16544a677fdcaea7364f6ffede7" translate="yes" xml:space="preserve">
          <source>Consider the limiting patterns to be basic regular expressions; this is the default.</source>
          <target state="translated">制限パターンを基本的な正規表現と考えてください。</target>
        </trans-unit>
        <trans-unit id="cc80930760a8dae17ccff09b94b94b8c2a73e3d6" translate="yes" xml:space="preserve">
          <source>Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions.</source>
          <target state="translated">リミッターパターンをデフォルトの基本正規表現ではなく、拡張正規表現にすることを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="0bd0c2e95b3ce3558e3f029a387e02dcaec9fc10" translate="yes" xml:space="preserve">
          <source>Consider the limiting patterns to be fixed strings (don&amp;rsquo;t interpret pattern as a regular expression).</source>
          <target state="translated">制限パターンを固定文字列と見なします（パターンを正規表現として解釈しないでください）。</target>
        </trans-unit>
        <trans-unit id="ce08a982fc80bf880f9e5e7fbbc19290d0e13642" translate="yes" xml:space="preserve">
          <source>Consider this history:</source>
          <target state="translated">この歴史を考えてみてください。</target>
        </trans-unit>
        <trans-unit id="6e0518d23c6b434e11a17284519d985d575f8d5b" translate="yes" xml:space="preserve">
          <source>Considers adding content from all git-*.sh scripts:</source>
          <target state="translated">すべての git-*.sh スクリプトからコンテンツを追加することを検討します。</target>
        </trans-unit>
        <trans-unit id="aa183b32e2469308bcac751961ddf4f45522d312" translate="yes" xml:space="preserve">
          <source>Construct a commit message for use with &lt;code&gt;rebase --autosquash&lt;/code&gt;. The commit message subject line is taken from the specified commit with a prefix of &quot;squash! &quot;. Can be used with additional commit message options (&lt;code&gt;-m&lt;/code&gt;/&lt;code&gt;-c&lt;/code&gt;/&lt;code&gt;-C&lt;/code&gt;/&lt;code&gt;-F&lt;/code&gt;). See &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;rebase --autosquash&lt;/code&gt; で使用するコミットメッセージを作成します。コミットメッセージの件名は、「squash！」というプレフィックスが付いた指定されたコミットから取得されます。追加のコミットメッセージオプション（ &lt;code&gt;-m&lt;/code&gt; / &lt;code&gt;-c&lt;/code&gt; / &lt;code&gt;-C&lt;/code&gt; / &lt;code&gt;-F&lt;/code&gt; ）と共に使用できます。詳細については、&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="613af883ed6da1442ba9d47b0f082fab42f334c7" translate="yes" xml:space="preserve">
          <source>Construct a commit message for use with &lt;code&gt;rebase --autosquash&lt;/code&gt;. The commit message will be the subject line from the specified commit with a prefix of &quot;fixup! &quot;. See &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;rebase --autosquash&lt;/code&gt; で使用するコミットメッセージを作成します。コミットメッセージは、「fixup！」のプレフィックスが付いた、指定されたコミットの件名行になります。詳細については、&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="26410cb72d41a741e69a55d63cb8badf7f0b0bd2" translate="yes" xml:space="preserve">
          <source>Contains administrative data for linked working trees. Each subdirectory contains the working tree-related part of a linked working tree. This directory is ignored if $GIT_COMMON_DIR is set, in which case &quot;$GIT_COMMON_DIR/worktrees&quot; will be used instead.</source>
          <target state="translated">リンクされた作業木の管理データが含まれています。各サブディレクトリには、リンクされた作業木の作業木関連の部分が含まれています。GIT_COMMON_DIRが設定されている場合、このディレクトリは無視され、代わりに&quot;$GIT_COMMON_DIR/worktrees &quot;が使用されます。</target>
        </trans-unit>
        <trans-unit id="926bb57bf277ea775a3bccb0602b810a03d08da9" translate="yes" xml:space="preserve">
          <source>Contains the git-repositories of the submodules.</source>
          <target state="translated">サブモジュールのgit-repositoriesが含まれています。</target>
        </trans-unit>
        <trans-unit id="2017a3b0e62c7744478a46c444d4d27cb868b22a" translate="yes" xml:space="preserve">
          <source>Content which does not differ between the index and working tree may be shown on context lines, beginning with a &quot; &quot; (space). You can stage context lines for removal by converting the space to a &quot;-&quot;. The resulting working tree file will appear to re-add the content.</source>
          <target state="translated">インデックスツリーと作業ツリーの間で相違しないコンテンツは、&quot; &quot; (スペース)で始まるコンテキスト行に表示されることがあります。スペースを&quot;-&quot;に変換することで、コンテキスト行の削除を段階的に行うことができます。結果として得られる作業木ファイルは、コンテンツを再追加したように表示されます。</target>
        </trans-unit>
        <trans-unit id="475c13751eb255f66e4aec9a66a81a56d379a598" translate="yes" xml:space="preserve">
          <source>Continue listing the history of a file beyond renames (works only for a single file).</source>
          <target state="translated">リネームを超えてファイルの履歴をリストアップし続けます(単一のファイルに対してのみ機能します)。</target>
        </trans-unit>
        <trans-unit id="4798719de8c426782f7160e2b872b0281bb19c57" translate="yes" xml:space="preserve">
          <source>Continue the operation in progress using the information in &lt;code&gt;.git/sequencer&lt;/code&gt;. Can be used to continue after resolving conflicts in a failed cherry-pick or revert.</source>
          <target state="translated">&lt;code&gt;.git/sequencer&lt;/code&gt; の情報を使用して、進行中の操作を続行します。失敗したチェリーピックまたはリバートでの競合を解決した後に続行するために使用できます。</target>
        </trans-unit>
        <trans-unit id="75e8c6f43c030fe85b04f600a5aefef84d4215ca" translate="yes" xml:space="preserve">
          <source>Continue the rebase with &lt;code&gt;git rebase --continue&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git rebase --continue&lt;/code&gt; を使用してリベースを続行します。</target>
        </trans-unit>
        <trans-unit id="fbb3e402bf66bc40e025c029cebd9e3786831d84" translate="yes" xml:space="preserve">
          <source>Continuing with our test-project, let&amp;rsquo;s modify file.txt again:</source>
          <target state="translated">テストプロジェクトを続行して、file.txtをもう一度変更します。</target>
        </trans-unit>
        <trans-unit id="6f930d8a34d56a441268a0623f0c037df7494b75" translate="yes" xml:space="preserve">
          <source>Control GSSAPI credential delegation. The delegation is disabled by default in libcurl since version 7.21.7. Set parameter to tell the server what it is allowed to delegate when it comes to user credentials. Used with GSS/kerberos. Possible values are:</source>
          <target state="translated">GSSAPI クレデンシャルの委任を制御します。委任は、バージョン 7.21.7 以降、libcurl ではデフォルトで無効になっています。パラメータを設定して、ユーザーの資格情報に関して委任が許可されていることをサーバに伝えます。GSS/kerberos と共に使用されます。可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="732c632643ca337cd77cc6d082dfc0d1c8e3c9e5" translate="yes" xml:space="preserve">
          <source>Control how information about the commits in the local repository is sent when negotiating the contents of the packfile to be sent by the server. Set to &quot;skipping&quot; to use an algorithm that skips commits in an effort to converge faster, but may result in a larger-than-necessary packfile; The default is &quot;default&quot; which instructs Git to use the default algorithm that never skips commits (unless the server has acknowledged it or one of its descendants). If &lt;code&gt;feature.experimental&lt;/code&gt; is enabled, then this setting defaults to &quot;skipping&quot;. Unknown values will cause &lt;code&gt;git fetch&lt;/code&gt; to error out.</source>
          <target state="translated">サーバーが送信するパックファイルの内容をネゴシエートするときに、ローカルリポジトリ内のコミットに関する情報を送信する方法を制御します。高速に収束するためにコミットをスキップするアルゴリズムを使用するには、「スキップ」に設定しますが、必要以上に大きなパックファイルになる可能性があります。デフォルトは「デフォルト」で、これはGitにコミットをスキップしないデフォルトのアルゴリズムを使用するように指示します（サーバーがそれまたはその子孫のいずれかを確認していない場合）。場合 &lt;code&gt;feature.experimental&lt;/code&gt; は、「スキップ」に、この設定はデフォルトで有効になっています。不明な値を指定すると、 &lt;code&gt;git fetch&lt;/code&gt; でエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="aa2d757e789e92329feff3e9e393ffe1cf9826bc" translate="yes" xml:space="preserve">
          <source>Control how ref update status is printed. Valid values are &lt;code&gt;full&lt;/code&gt; and &lt;code&gt;compact&lt;/code&gt;. Default value is &lt;code&gt;full&lt;/code&gt;. See section OUTPUT in &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt; for detail.</source>
          <target state="translated">参照更新ステータスの出力方法を制御します。有効な値は &lt;code&gt;full&lt;/code&gt; および &lt;code&gt;compact&lt;/code&gt; です。デフォルト値は &lt;code&gt;full&lt;/code&gt; です。詳細については、&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]の&lt;/a&gt;セクションOUTPUTを参照してください。</target>
        </trans-unit>
        <trans-unit id="8e05cd92bb18e6dbe129763361ebf98f054218bc" translate="yes" xml:space="preserve">
          <source>Control the order in which files appear in the output. This overrides the &lt;code&gt;diff.orderFile&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). To cancel &lt;code&gt;diff.orderFile&lt;/code&gt;, use &lt;code&gt;-O/dev/null&lt;/code&gt;.</source>
          <target state="translated">ファイルが出力に表示される順序を制御します。これにより、 &lt;code&gt;diff.orderFile&lt;/code&gt; 構成変数がオーバーライドされます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。 &lt;code&gt;diff.orderFile&lt;/code&gt; をキャンセルするには、 &lt;code&gt;-O/dev/null&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="95cfa5bd9ed3c9eff692bd91fe02de0af906819b" translate="yes" xml:space="preserve">
          <source>Controlling access to Git repositories</source>
          <target state="translated">Git リポジトリへのアクセスを制御する</target>
        </trans-unit>
        <trans-unit id="302680d7e637a6c4d28c5bc8380af3a8487a3fd0" translate="yes" xml:space="preserve">
          <source>Controlling the daemon</source>
          <target state="translated">デーモンの制御</target>
        </trans-unit>
        <trans-unit id="5f8b43605d2bc36ca036762a54d85472bbaf393e" translate="yes" xml:space="preserve">
          <source>Controls addition of &lt;code&gt;In-Reply-To&lt;/code&gt; and &lt;code&gt;References&lt;/code&gt; headers to make the second and subsequent mails appear as replies to the first. Also controls generation of the &lt;code&gt;Message-Id&lt;/code&gt; header to reference.</source>
          <target state="translated">&lt;code&gt;In-Reply-To&lt;/code&gt; および &lt;code&gt;References&lt;/code&gt; ヘッダーの追加を制御して、2番目以降のメールを最初のメールへの返信として表示します。参照する &lt;code&gt;Message-Id&lt;/code&gt; ヘッダーの生成も制御します。</target>
        </trans-unit>
        <trans-unit id="2d73e883baf4d5a02fe3808167b349dacd41e248" translate="yes" xml:space="preserve">
          <source>Controls the amount of output shown by the recursive merge strategy. Level 0 outputs nothing except a final error message if conflicts were detected. Level 1 outputs only conflicts, 2 outputs conflicts and file changes. Level 5 and above outputs debugging information. The default is level 2. Can be overridden by the &lt;code&gt;GIT_MERGE_VERBOSITY&lt;/code&gt; environment variable.</source>
          <target state="translated">再帰的マージ戦略によって示される出力の量を制御します。レベル0は、競合が検出された場合、最後のエラーメッセージ以外は何も出力しません。レベル1は競合のみを出力し、2は競合とファイル変更を出力します。レベル5以上では、デバッグ情報が出力されます。デフォルトはレベル2です &lt;code&gt;GIT_MERGE_VERBOSITY&lt;/code&gt; 環境変数によってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="d76ea066512503130cc69199cf2d62634818fae1" translate="yes" xml:space="preserve">
          <source>Controls whether one-level refnames are accepted (i.e., refnames that do not contain multiple &lt;code&gt;/&lt;/code&gt;-separated components). The default is &lt;code&gt;--no-allow-onelevel&lt;/code&gt;.</source>
          <target state="translated">1レベルの参照名を受け入れるかどうかを制御します（つまり、複数の &lt;code&gt;/&lt;/code&gt; で区切られたコンポーネントを含まない参照名）。デフォルトは &lt;code&gt;--no-allow-onelevel&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="65d9a75f19717f80d02990ede6313f9c8dc92c2a" translate="yes" xml:space="preserve">
          <source>Controls which diff tool is used by &lt;a href=&quot;git-difftool&quot;&gt;git-difftool[1]&lt;/a&gt; when the -g/--gui flag is specified. This variable overrides the value configured in &lt;code&gt;merge.guitool&lt;/code&gt;. The list below shows the valid built-in values. Any other value is treated as a custom diff tool and requires that a corresponding difftool.&amp;lt;guitool&amp;gt;.cmd variable is defined.</source>
          <target state="translated">-g / &lt;a href=&quot;git-difftool&quot;&gt;-gui&lt;/a&gt;フラグが指定されている場合、git-difftool [1]が使用するdiffツールを制御します。この変数は、 &lt;code&gt;merge.guitool&lt;/code&gt; で構成された値をオーバーライドします。以下のリストは、有効な組み込み値を示しています。その他の値はカスタムdiffツールとして扱われ、対応するdifftool。&amp;lt;guitool&amp;gt; .cmd変数が定義されている必要があります。</target>
        </trans-unit>
        <trans-unit id="866c417f86e708b803c2ccd6543f9e30d5664def" translate="yes" xml:space="preserve">
          <source>Controls which diff tool is used by &lt;a href=&quot;git-difftool&quot;&gt;git-difftool[1]&lt;/a&gt;. This variable overrides the value configured in &lt;code&gt;merge.tool&lt;/code&gt;. The list below shows the valid built-in values. Any other value is treated as a custom diff tool and requires that a corresponding difftool.&amp;lt;tool&amp;gt;.cmd variable is defined.</source>
          <target state="translated">&lt;a href=&quot;git-difftool&quot;&gt;git-difftool [1]&lt;/a&gt;が使用するdiffツールを制御します。この変数は、 &lt;code&gt;merge.tool&lt;/code&gt; で構成された値をオーバーライドします。以下のリストは、有効な組み込み値を示しています。その他の値はカスタムdiffツールとして扱われ、対応するdifftool。&amp;lt;tool&amp;gt; .cmd変数が定義されている必要があります。</target>
        </trans-unit>
        <trans-unit id="5cb013e070a3b4cddc50474dc321b1da7ea13759" translate="yes" xml:space="preserve">
          <source>Controls which merge tool is used by &lt;a href=&quot;git-mergetool&quot;&gt;git-mergetool[1]&lt;/a&gt; when the -g/--gui flag is specified. The list below shows the valid built-in values. Any other value is treated as a custom merge tool and requires that a corresponding mergetool.&amp;lt;guitool&amp;gt;.cmd variable is defined.</source>
          <target state="translated">-g /-guiフラグが指定されている場合、&lt;a href=&quot;git-mergetool&quot;&gt;git-mergetool [1]&lt;/a&gt;が使用するマージツールを制御します。以下のリストは、有効な組み込み値を示しています。その他の値はカスタムマージツールとして扱われ、対応するmergetool。&amp;lt;guitool&amp;gt; .cmd変数が定義されている必要があります。</target>
        </trans-unit>
        <trans-unit id="18ee15c4e31cbcbd84b87172e325dafb065adff0" translate="yes" xml:space="preserve">
          <source>Controls which merge tool is used by &lt;a href=&quot;git-mergetool&quot;&gt;git-mergetool[1]&lt;/a&gt;. The list below shows the valid built-in values. Any other value is treated as a custom merge tool and requires that a corresponding mergetool.&amp;lt;tool&amp;gt;.cmd variable is defined.</source>
          <target state="translated">&lt;a href=&quot;git-mergetool&quot;&gt;git-mergetool [1]&lt;/a&gt;が使用するマージツールを制御します。以下のリストは、有効な組み込み値を示しています。その他の値はすべてカスタムマージツールとして扱われ、対応するmergetool。&amp;lt;tool&amp;gt; .cmd変数が定義されている必要があります。</target>
        </trans-unit>
        <trans-unit id="474792f82dd9247329dbb1b3dcfbbed1c865f4c2" translate="yes" xml:space="preserve">
          <source>Controls which parts of the cover letter will be automatically populated using the branch&amp;rsquo;s description.</source>
          <target state="translated">ブランチの説明を使用して、カバーレターのどの部分が自動的に入力されるかを制御します。</target>
        </trans-unit>
        <trans-unit id="c3102343a37aa52f6a069dc8bc5f12c9420d06d2" translate="yes" xml:space="preserve">
          <source>Conventions for public functions and macros</source>
          <target state="translated">公開関数とマクロの規約</target>
        </trans-unit>
        <trans-unit id="24ce25558484789421068a0f3fdf9552add6eb44" translate="yes" xml:space="preserve">
          <source>Conversely, text files that Git does not detect can have normalization enabled manually.</source>
          <target state="translated">逆に、Git が検出しないテキストファイルは、手動で正規化を有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="e49f6aaa8529aed7e4294b528b8e93971284c07e" translate="yes" xml:space="preserve">
          <source>Convert raw file data into a blob, for future use in a &lt;code&gt;commit&lt;/code&gt; command. This command is optional and is not needed to perform an import.</source>
          <target state="translated">生のファイルデータをblobに変換し、将来 &lt;code&gt;commit&lt;/code&gt; コマンドで使用できるようにします。このコマンドはオプションであり、インポートの実行には必要ありません。</target>
        </trans-unit>
        <trans-unit id="30c15e3645b0a2e6438456f892ca0f7bb2ab425e" translate="yes" xml:space="preserve">
          <source>Convert underscores in tag and branch names to dots.</source>
          <target state="translated">タグ名やブランチ名のアンダースコアをドットに変換します。</target>
        </trans-unit>
        <trans-unit id="717ec262f5a03d7fab61894de5327ed8b2dce9d6" translate="yes" xml:space="preserve">
          <source>Copy a branch and the corresponding reflog.</source>
          <target state="translated">ブランチとそれに対応する reflog をコピーします。</target>
        </trans-unit>
        <trans-unit id="d010ed84eae444d5db43ea15cd0c22cd88feae0f" translate="yes" xml:space="preserve">
          <source>Copy files from the index to the working tree</source>
          <target state="translated">インデックスから作業ツリーにファイルをコピー</target>
        </trans-unit>
        <trans-unit id="c76ee4ad9dd156a08ecfefcfcb1c22de051a4c57" translate="yes" xml:space="preserve">
          <source>Copy over the packed files from &quot;project lead&quot; public repository to your public repository, unless the &quot;project lead&quot; repository lives on the same machine as yours. In the latter case, you can use &lt;code&gt;objects/info/alternates&lt;/code&gt; file to point at the repository you are borrowing from.</source>
          <target state="translated">「プロジェクトリード」リポジトリが自分のマシンと同じマシン上にない限り、パックされたファイルを「プロジェクトリード」公開リポジトリからパブリックリポジトリにコピーします。後者の場合、 &lt;code&gt;objects/info/alternates&lt;/code&gt; ファイルを使用して、借用元のリポジトリを指定できます。</target>
        </trans-unit>
        <trans-unit id="d8b3dca28c0ddf8873f77c43f29755622d908cce" translate="yes" xml:space="preserve">
          <source>Copy the Message-ID header at the end of the commit message. This is useful in order to associate commits with mailing list discussions.</source>
          <target state="translated">コミットメッセージの最後にある Message-ID ヘッダをコピーします。これはコミットをメーリングリストの議論に関連付けるのに便利です。</target>
        </trans-unit>
        <trans-unit id="5a3f70a82898c2a8456ad61672927bc441665238" translate="yes" xml:space="preserve">
          <source>Copy the modified files to a temporary location and perform a directory diff on them. This mode never prompts before launching the diff tool.</source>
          <target state="translated">変更したファイルを一時的な場所にコピーして、その上でディレクトリの差分を実行します。このモードでは、差分ツールを起動する前にプロンプトが表示されることはありません。</target>
        </trans-unit>
        <trans-unit id="c190e9af114c74dc1cae547f652783f706162e52" translate="yes" xml:space="preserve">
          <source>Copy the notes for the first object onto the second object (defaults to HEAD). Abort if the second object already has notes, or if the first object has none (use -f to overwrite existing notes to the second object). This subcommand is equivalent to: &lt;code&gt;git notes add [-f] -C $(git notes list &amp;lt;from-object&amp;gt;) &amp;lt;to-object&amp;gt;&lt;/code&gt;</source>
          <target state="translated">最初のオブジェクトのノートを2番目のオブジェクトにコピーします（デフォルトはHEADです）。2番目のオブジェクトにすでにノートがある場合、または最初のオブジェクトにノートがない場合は中止します（既存のノートを2番目のオブジェクトに上書きするには、-fを使用します）。このサブコマンドは次と同等です &lt;code&gt;git notes add [-f] -C $(git notes list &amp;lt;from-object&amp;gt;) &amp;lt;to-object&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f67d1ba5e94aaa446c4cd38a50c12bd9c63d60dc" translate="yes" xml:space="preserve">
          <source>Copying repositories</source>
          <target state="translated">リポジトリのコピー</target>
        </trans-unit>
        <trans-unit id="36e54cbb8f2eeebb702575f30e1a34b2297f308c" translate="yes" xml:space="preserve">
          <source>Core git executable to use. By default set to &lt;code&gt;$GIT_BINDIR/git&lt;/code&gt;, which in turn is by default set to &lt;code&gt;$(bindir)/git&lt;/code&gt;. If you use Git installed from a binary package, you should usually set this to &quot;/usr/bin/git&quot;. This can just be &quot;git&quot; if your web server has a sensible PATH; from security point of view it is better to use absolute path to git binary. If you have multiple Git versions installed it can be used to choose which one to use. Must be (correctly) set for gitweb to be able to work.</source>
          <target state="translated">使用するコアgit実行可能ファイル。デフォルトでは &lt;code&gt;$GIT_BINDIR/git&lt;/code&gt; 設定されており、これはデフォルトで &lt;code&gt;$(bindir)/git&lt;/code&gt; に設定されています。バイナリパッケージからインストールされたGitを使用する場合は、通常、これを「/ usr / bin / git」に設定する必要があります。 Webサーバーに適切なPATHがある場合、これは単に「git」になります。セキュリティの観点からは、gitバイナリへの絶対パスを使用することをお勧めします。複数のGitバージョンがインストールされている場合、それを使用して使用するバージョンを選択できます。 gitwebが機能するためには（正しく）設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="85a8806cd8d64571a9c2262e310bf038f08a1274" translate="yes" xml:space="preserve">
          <source>Count changes in a child directory for the parent directory as well. Note that when using &lt;code&gt;cumulative&lt;/code&gt;, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the &lt;code&gt;noncumulative&lt;/code&gt; parameter.</source>
          <target state="translated">親ディレクトリの子ディレクトリの変更もカウントします。 &lt;code&gt;cumulative&lt;/code&gt; を使用する場合、報告されるパーセンテージの合計が100％を超える場合があることに注意してください。デフォルト（非累積）の挙動をして指定することができる &lt;code&gt;noncumulative&lt;/code&gt; パラメータ。</target>
        </trans-unit>
        <trans-unit id="492f2e2be05a1aa8d8af437be99e7dacb8d4f9d0" translate="yes" xml:space="preserve">
          <source>Count unpacked number of objects and their disk consumption</source>
          <target state="translated">アンパックされたオブジェクトの数とディスク消費量のカウント</target>
        </trans-unit>
        <trans-unit id="763b234fba543bb2523cf09d67150c10446b45b7" translate="yes" xml:space="preserve">
          <source>Countermand &lt;code&gt;commit.gpgSign&lt;/code&gt; configuration variable that is set to force each and every commit to be signed.</source>
          <target state="translated">Countermand &lt;code&gt;commit.gpgSign&lt;/code&gt; 構成変数。すべてのコミットに強制的に署名するように設定されています。</target>
        </trans-unit>
        <trans-unit id="6096cddc00ec928df60a796e3d4cfb0bb68acdbe" translate="yes" xml:space="preserve">
          <source>Counting the number of commits on a branch</source>
          <target state="translated">ブランチのコミット数をカウントする</target>
        </trans-unit>
        <trans-unit id="5c28a68396ec48f8ddfeca624f27118d20e2f2ea" translate="yes" xml:space="preserve">
          <source>Crash reports</source>
          <target state="translated">クラッシュレポート</target>
        </trans-unit>
        <trans-unit id="97b6cc167e6a90cd26177184d37208b481756eef" translate="yes" xml:space="preserve">
          <source>Create &amp;lt;ref&amp;gt; with &amp;lt;newvalue&amp;gt; after verifying it does not exist. The given &amp;lt;newvalue&amp;gt; may not be zero.</source>
          <target state="translated">存在しないことを確認してから、&amp;lt;ref&amp;gt;を&amp;lt;newvalue&amp;gt;で作成します。指定された&amp;lt;newvalue&amp;gt;はゼロではありません。</target>
        </trans-unit>
        <trans-unit id="5d3e6679c48a19f8a3804fc16c43252c9d4a1106" translate="yes" xml:space="preserve">
          <source>Create &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; and checkout &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; into it. The new working directory is linked to the current repository, sharing everything except working directory specific files such as HEAD, index, etc. &lt;code&gt;-&lt;/code&gt; may also be specified as &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt;; it is synonymous with &lt;code&gt;@{-1}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; を作成し、それに &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; をチェックアウトします。新しい作業ディレクトリは現在のリポジトリにリンクされ、HEAD、インデックスなどの作業ディレクトリ固有のファイルを除くすべてを共有します &lt;code&gt;-&lt;/code&gt; &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; として指定することもできます。 &lt;code&gt;@{-1}&lt;/code&gt; と同義です。</target>
        </trans-unit>
        <trans-unit id="918c3c2a066586184896c329601a42f88338b5c6" translate="yes" xml:space="preserve">
          <source>Create a &quot;thin&quot; pack by omitting the common objects between a sender and a receiver in order to reduce network transfer. This option only makes sense in conjunction with --stdout.</source>
          <target state="translated">ネットワーク転送を減らすために、送信者と受信者間の共通オブジェクトを省略して「薄い」パックを作成します。このオプションは --stdout と組み合わせてのみ意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="ec9cb277fe09464e753dba1a9c058b6a9566ff6f" translate="yes" xml:space="preserve">
          <source>Create a /path/to/my/codebase/.git directory.</source>
          <target state="translated">/path/to/my/codebase/.git ディレクトリを作成します。</target>
        </trans-unit>
        <trans-unit id="c0a6d61d3fd0fcaf6c684be3f4ae17d7a1fadcb9" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;shallow&lt;/code&gt; clone with a history truncated to the specified number of commits. Implies &lt;code&gt;--single-branch&lt;/code&gt; unless &lt;code&gt;--no-single-branch&lt;/code&gt; is given to fetch the histories near the tips of all branches. If you want to clone submodules shallowly, also pass &lt;code&gt;--shallow-submodules&lt;/code&gt;.</source>
          <target state="translated">指定したコミット数に切り捨てられた履歴を持つ &lt;code&gt;shallow&lt;/code&gt; クローンを作成します。意味 &lt;code&gt;--single-branch&lt;/code&gt; しない限り、 &lt;code&gt;--no-single-branch&lt;/code&gt; すべての枝の先端近くの履歴を取得するために与えられています。サブモジュールを浅くクローンしたい場合は、 &lt;code&gt;--shallow-submodules&lt;/code&gt; も渡してください。</target>
        </trans-unit>
        <trans-unit id="efb2e81b939b9a77d43ecb93b07dc1f2ed7276af" translate="yes" xml:space="preserve">
          <source>Create a Zip archive that contains the contents of the latest commit on the current branch. Note that the output format is inferred by the extension of the output file.</source>
          <target state="translated">現在のブランチの最新のコミットの内容を含む Zip アーカイブを作成します。出力形式は出力ファイルの拡張子から推測されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="98ed6a63ab53ebc7b5cb53eddb5b05ee6e17c097" translate="yes" xml:space="preserve">
          <source>Create a bare repository to publish your changes to the public:</source>
          <target state="translated">ベアリポジトリを作成して、変更内容を公開します。</target>
        </trans-unit>
        <trans-unit id="8ecd6ae5a1546c899c5e4d339f3b41e08bfa5878" translate="yes" xml:space="preserve">
          <source>Create a bare repository. If &lt;code&gt;GIT_DIR&lt;/code&gt; environment is not set, it is set to the current working directory.</source>
          <target state="translated">ベアリポジトリを作成します。 &lt;code&gt;GIT_DIR&lt;/code&gt; 環境が設定されていない場合は、現在の作業ディレクトリに設定されます。</target>
        </trans-unit>
        <trans-unit id="8d2657b83c3c9eabb4154adbe14301af394e1de8" translate="yes" xml:space="preserve">
          <source>Create a branch in the SVN repository.</source>
          <target state="translated">SVN リポジトリにブランチを作成します。</target>
        </trans-unit>
        <trans-unit id="9535ca3b3bba3d55a9a78d2e5a327a9df5b9b7ac" translate="yes" xml:space="preserve">
          <source>Create a compressed tarball for v1.4.0 release, but without a global extended pax header.</source>
          <target state="translated">v1.4.0 リリース用に圧縮された tarball を作成しますが、グローバルな拡張 pax ヘッダはありません。</target>
        </trans-unit>
        <trans-unit id="b5319dfc6eb9dc4a079ba2789cc4bdb586f57276" translate="yes" xml:space="preserve">
          <source>Create a compressed tarball for v1.4.0 release.</source>
          <target state="translated">v1.4.0リリース用に圧縮されたtarballを作成します。</target>
        </trans-unit>
        <trans-unit id="faa66e3a606f56a97105d3be717d6c143b22dab2" translate="yes" xml:space="preserve">
          <source>Create a graft commit. A new commit is created with the same content as &amp;lt;commit&amp;gt; except that its parents will be [&amp;lt;parent&amp;gt;&amp;hellip;​] instead of &amp;lt;commit&amp;gt;'s parents. A replacement ref is then created to replace &amp;lt;commit&amp;gt; with the newly created commit. Use &lt;code&gt;--convert-graft-file&lt;/code&gt; to convert a &lt;code&gt;$GIT_DIR/info/grafts&lt;/code&gt; file and use replace refs instead.</source>
          <target state="translated">接ぎ木コミットを作成します。親が&amp;lt;commit&amp;gt;の親ではなく[&amp;lt;parent&amp;gt;&amp;hellip;]になることを除いて、&amp;lt;commit&amp;gt;と同じ内容で新しいコミットが作成されます。次に、置換参照が作成され、&amp;lt;commit&amp;gt;が新しく作成されたコミットに置き換えられます。使用 &lt;code&gt;--convert-graft-file&lt;/code&gt; 変換するには &lt;code&gt;$GIT_DIR/info/grafts&lt;/code&gt; ファイルや使用ではなく、参考文献を交換してください。</target>
        </trans-unit>
        <trans-unit id="571580d25d73e20010dd7b861b6579499c2d2548" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;orphan&lt;/code&gt; branch, named &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt;. All tracked files are removed.</source>
          <target state="translated">&lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; という名前の新しい &lt;code&gt;orphan&lt;/code&gt; ブランチを作成します。追跡されたファイルはすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="4e15c57fd9f8556efdaf616337a8d6e6219013e8" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;orphan&lt;/code&gt; branch, named &lt;code&gt;&amp;lt;new_branch&amp;gt;&lt;/code&gt;, started from &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt; and switch to it. The first commit made on this new branch will have no parents and it will be the root of a new history totally disconnected from all the other branches and commits.</source>
          <target state="translated">&lt;code&gt;&amp;lt;new_branch&amp;gt;&lt;/code&gt; という名前の新しい &lt;code&gt;orphan&lt;/code&gt; ブランチを作成し、 &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt; から開始してそれに切り替えます。この新しいブランチで行われた最初のコミットには親がなく、他のすべてのブランチとコミットから完全に切り離された新しい履歴のルートになります。</target>
        </trans-unit>
        <trans-unit id="74397bf89a3d7366727db29fa6dec88cf03174e1" translate="yes" xml:space="preserve">
          <source>Create a new Git repository from an existing p4 repository using &lt;code&gt;git p4 clone&lt;/code&gt;, giving it one or more p4 depot paths. Incorporate new commits from p4 changes with &lt;code&gt;git p4 sync&lt;/code&gt;. The &lt;code&gt;sync&lt;/code&gt; command is also used to include new branches from other p4 depot paths. Submit Git changes back to p4 using &lt;code&gt;git p4 submit&lt;/code&gt;. The command &lt;code&gt;git p4 rebase&lt;/code&gt; does a sync plus rebases the current branch onto the updated p4 remote branch.</source>
          <target state="translated">&lt;code&gt;git p4 clone&lt;/code&gt; を使用して既存のp4リポジトリから新しいGitリポジトリを作成し、1つ以上のp4デポパスを指定します。 &lt;code&gt;git p4 sync&lt;/code&gt; を使用して、p4の変更からの新しいコミットを組み込みます。 &lt;code&gt;sync&lt;/code&gt; コマンドは、他のp4デポ・パスから新しい枝を含めるために使用されます。 &lt;code&gt;git p4 submit&lt;/code&gt; を使用してGitの変更をp4に送信します。コマンド &lt;code&gt;git p4 rebase&lt;/code&gt; は同期を実行し、現在のブランチを更新されたp4リモートブランチにリベースします。</target>
        </trans-unit>
        <trans-unit id="32283e2eb1bd521d20f1290e2eaa64ee550622d7" translate="yes" xml:space="preserve">
          <source>Create a new branch head pointing to one of these versions and check it out using &lt;a href=&quot;git-switch&quot;&gt;git-switch[1]&lt;/a&gt;:</source>
          <target state="translated">これらのバージョンのいずれかを指す新しいブランチヘッドを作成し、&lt;a href=&quot;git-switch&quot;&gt;git-switch [1]&lt;/a&gt;を使用してチェックアウトします。</target>
        </trans-unit>
        <trans-unit id="4de51286c04f5ea0c9795b4b604e6322cb3596eb" translate="yes" xml:space="preserve">
          <source>Create a new branch named &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; starting at &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; before switching to the branch. This is a convenient shortcut for:</source>
          <target state="translated">ブランチに切り替える前に、 &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; から始まる &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; という名前の新しいブランチを作成します。これは、次の場合の便利なショートカットです。</target>
        </trans-unit>
        <trans-unit id="adb753b3b1e8742e8dfb04c8a3bbb9df0384a74c" translate="yes" xml:space="preserve">
          <source>Create a new branch named &lt;code&gt;&amp;lt;new_branch&amp;gt;&lt;/code&gt; and start it at &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt;; see &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;&amp;lt;new_branch&amp;gt;&lt;/code&gt; という名前の新しいブランチを作成し、 &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt; で開始します。詳細は&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="f67db00a28beeae8e81324408bce6703c7ea6026" translate="yes" xml:space="preserve">
          <source>Create a new commit containing the current contents of the index and the given log message describing the changes. The new commit is a direct child of HEAD, usually the tip of the current branch, and the branch is updated to point to it (unless no branch is associated with the working tree, in which case HEAD is &quot;detached&quot; as described in &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt;).</source>
          <target state="translated">インデックスの現在の内容と変更を説明する特定のログメッセージを含む新しいコミットを作成します。新しいコミットはHEAD、現在のブランチの通常先端の直接の子であり、そしてブランチはブランチが作業ツリーに関連付けられていないされていない限り、（それを指すように更新されるで説明したように、その場合HEADに「デタッチ」され&lt;a href=&quot;git-checkout&quot;&gt;gitの-checkout [1]&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="775d2ff1f35d4b43a574ee93495db02f2d8cbc5e" translate="yes" xml:space="preserve">
          <source>Create a new commit object</source>
          <target state="translated">新しいコミットオブジェクトの作成</target>
        </trans-unit>
        <trans-unit id="ed82c0a774a3c01694b195d2170f6d11389fd2c2" translate="yes" xml:space="preserve">
          <source>Create a new location. See the notes below for details on how to choose the right protocol.</source>
          <target state="translated">新しい場所を作成します。正しいプロトコルの選択方法については、以下の注意事項を参照してください。</target>
        </trans-unit>
        <trans-unit id="8524608a0d692976af91ac05836567c4a22e40c7" translate="yes" xml:space="preserve">
          <source>Create a new pack-file containing objects in small pack-files referenced by the multi-pack-index. If the size given by the &lt;code&gt;--batch-size=&amp;lt;size&amp;gt;&lt;/code&gt; argument is zero, then create a pack containing all objects referenced by the multi-pack-index. For a non-zero batch size, Select the pack-files by examining packs from oldest-to-newest, computing the &quot;expected size&quot; by counting the number of objects in the pack referenced by the multi-pack-index, then divide by the total number of objects in the pack and multiply by the pack size. We select packs with expected size below the batch size until the set of packs have total expected size at least the batch size. If the total size does not reach the batch size, then do nothing. If a new pack- file is created, rewrite the multi-pack-index to reference the new pack-file. A later run of &lt;code&gt;git multi-pack-index expire&lt;/code&gt; will delete the pack-files that were part of this batch.</source>
          <target state="translated">multi-pack-indexによって参照される小さなpack-fileにオブジェクトを含む新しいpack-fileを作成します。 &lt;code&gt;--batch-size=&amp;lt;size&amp;gt;&lt;/code&gt; で指定されたサイズの場合引数がゼロの場合、multi-pack-indexによって参照されるすべてのオブジェクトを含むパックを作成します。ゼロ以外のバッチサイズの場合、最も古いものから新しいものへとパックを調べ、multi-pack-indexによって参照されているパック内のオブジェクトの数をカウントして「予想サイズ」を計算し、次にパック内のオブジェクトの総数とパックサイズを掛けます。一連のパックの予想される合計サイズが少なくともバッチサイズになるまで、予想されるサイズがバッチサイズを下回るパックを選択します。合計サイズがバッチサイズに達しない場合は、何もしません。新しいパックファイルが作成された場合、新しいパックファイルを参照するようにmulti-pack-indexを書き換えます。後で &lt;code&gt;git multi-pack-index expire&lt;/code&gt; を実行すると、このバッチに含まれていたパックファイルが削除されます。</target>
        </trans-unit>
        <trans-unit id="9c41169f0fcbee00370950fd445a3c201d3fc72d" translate="yes" xml:space="preserve">
          <source>Create a packed archive of objects</source>
          <target state="translated">オブジェクトのパックされたアーカイブを作成する</target>
        </trans-unit>
        <trans-unit id="aeccdf3a7f8e818b38876ba10e91ea37e1459401" translate="yes" xml:space="preserve">
          <source>Create a placeholder file in the local Git repository for each empty directory fetched from Subversion. This includes directories that become empty by removing all entries in the Subversion repository (but not the directory itself). The placeholder files are also tracked and removed when no longer necessary.</source>
          <target state="translated">Subversion から取得した空のディレクトリごとに、ローカルの Git リポジトリにプレースホルダファイルを作成します。これには、Subversion リポジトリ内のすべてのエントリを削除して空になったディレクトリも含まれます(ディレクトリ自体は含まれません)。プレースホルダファイルも追跡され、必要がなくなったら削除されます。</target>
        </trans-unit>
        <trans-unit id="b0b2f30f73f128bf11ff805dcea18e4929006e9b" translate="yes" xml:space="preserve">
          <source>Create a reflog for the tag. To globally enable reflogs for tags, see &lt;code&gt;core.logAllRefUpdates&lt;/code&gt; in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;. The negated form &lt;code&gt;--no-create-reflog&lt;/code&gt; only overrides an earlier &lt;code&gt;--create-reflog&lt;/code&gt;, but currently does not negate the setting of &lt;code&gt;core.logAllRefUpdates&lt;/code&gt;.</source>
          <target state="translated">タグのreflogを作成します。タグの参照 &lt;code&gt;core.logAllRefUpdates&lt;/code&gt; をグローバルに有効にするには、&lt;a href=&quot;git-config&quot;&gt;git-config [1]の&lt;/a&gt;core.logAllRefUpdatesを参照してください。否定形式 &lt;code&gt;--no-create-reflog&lt;/code&gt; は以前の &lt;code&gt;--create-reflog&lt;/code&gt; をオーバーライドするだけですが、現在は &lt;code&gt;core.logAllRefUpdates&lt;/code&gt; の設定を否定していません。</target>
        </trans-unit>
        <trans-unit id="1c95e8dd01a1c19533d3be2260c095f09f00ed3d" translate="yes" xml:space="preserve">
          <source>Create a shallow clone with a history after the specified time.</source>
          <target state="translated">指定した時間以降の履歴を持つ浅いクローンを作成します。</target>
        </trans-unit>
        <trans-unit id="81a994e450296531fc46153834310318c564b7aa" translate="yes" xml:space="preserve">
          <source>Create a shallow clone with a history, excluding commits reachable from a specified remote branch or tag. This option can be specified multiple times.</source>
          <target state="translated">指定したリモートブランチやタグから到達可能なコミットを除いた履歴を持つ浅いクローンを作成します。このオプションは複数回指定できます。</target>
        </trans-unit>
        <trans-unit id="543a21269e742ae7ebc9058bf397ba34f632562d" translate="yes" xml:space="preserve">
          <source>Create a stash entry (which is a regular commit object) and return its object name, without storing it anywhere in the ref namespace. This is intended to be useful for scripts. It is probably not the command you want to use; see &quot;push&quot; above.</source>
          <target state="translated">スタッシュエントリ(これは通常のコミットオブジェクトです)を作成し、そのオブジェクト名を返します。これはスクリプトのために有用であることを意図しています。おそらく使いたいコマンドではないでしょう。</target>
        </trans-unit>
        <trans-unit id="b36a0ee3d907a9108a54a206fff8047195a2242d" translate="yes" xml:space="preserve">
          <source>Create a tag by using the tags_subdir instead of the branches_subdir specified during git svn init.</source>
          <target state="translated">git svn init で指定した branches_subdir の代わりに tags_subdir を使ってタグを作成します。</target>
        </trans-unit>
        <trans-unit id="d1e89b6bf885576f5776e13a6adbdccbb0c64b51" translate="yes" xml:space="preserve">
          <source>Create a tag in the SVN repository. This is a shorthand for &lt;code&gt;branch -t&lt;/code&gt;.</source>
          <target state="translated">SVNリポジトリにタグを作成します。これは、 &lt;code&gt;branch -t&lt;/code&gt; 省略形です。</target>
        </trans-unit>
        <trans-unit id="f83eaaff0df7b915922dc3a5427d0b2485d874b0" translate="yes" xml:space="preserve">
          <source>Create a tar archive that contains the contents of the latest commit on the current branch, and extract it in the &lt;code&gt;/var/tmp/junk&lt;/code&gt; directory.</source>
          <target state="translated">現在のブランチの最新のコミットの内容を含むtarアーカイブを作成し、 &lt;code&gt;/var/tmp/junk&lt;/code&gt; ディレクトリに抽出します。</target>
        </trans-unit>
        <trans-unit id="79432159892c99c66a4b92db80f46b317928f9e7" translate="yes" xml:space="preserve">
          <source>Create a topic branch and develop.</source>
          <target state="translated">トピックブランチを作成して開発します。</target>
        </trans-unit>
        <trans-unit id="3c6e23e4bafb619b381ac21bdc202b4da275dceb" translate="yes" xml:space="preserve">
          <source>Create a tree object from the current index</source>
          <target state="translated">現在のインデックスからツリーオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="199cc87a17f205a9debb1daf10f2cfd04f927e64" translate="yes" xml:space="preserve">
          <source>Create an archive of files from a named tree</source>
          <target state="translated">名前付きツリーからファイルのアーカイブを作成</target>
        </trans-unit>
        <trans-unit id="11842098ab38c4b23c00972df92c03d934dd00f4" translate="yes" xml:space="preserve">
          <source>Create an empty Git repository or reinitialize an existing one</source>
          <target state="translated">空の Git リポジトリを作成したり、既存の Git リポジトリを再初期化したりします。</target>
        </trans-unit>
        <trans-unit id="4bf9b028076fc8c72d20bdece3ec7191ce92cd0a" translate="yes" xml:space="preserve">
          <source>Create and switch to a new branch at the same time:</source>
          <target state="translated">新しいブランチの作成と切り替えを同時に行います。</target>
        </trans-unit>
        <trans-unit id="e2fd9501d48be0c26b22e7150b7353eff7148f41" translate="yes" xml:space="preserve">
          <source>Create multipart/mixed attachment, the first part of which is the commit message and the patch itself in the second part, with &lt;code&gt;Content-Disposition: attachment&lt;/code&gt;.</source>
          <target state="translated">マルチパート/混合の添付ファイルを作成します。最初の部分はコミットメッセージで、2番目の部分はパッチ自体で、 &lt;code&gt;Content-Disposition: attachment&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="09cc7488a79d34bbf5d70e088375c60a2a44d3fc" translate="yes" xml:space="preserve">
          <source>Create multipart/mixed attachment, the first part of which is the commit message and the patch itself in the second part, with &lt;code&gt;Content-Disposition: inline&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Content-Disposition: inline&lt;/code&gt; 、マルチパート/混合の添付ファイルを作成します。最初のパートはコミットメッセージで、2番目のパートはパッチ自体です。</target>
        </trans-unit>
        <trans-unit id="1fbaabd2de6436a9809de570bfef7e43943388cb" translate="yes" xml:space="preserve">
          <source>Create or update a branch with a new commit, recording one logical change to the project.</source>
          <target state="translated">新しいコミットでブランチを作成または更新し、プロジェクトへの論理的な変更を記録します。</target>
        </trans-unit>
        <trans-unit id="b926e4f1bd2c9ddbabaf20296d6e0bdae2102d0d" translate="yes" xml:space="preserve">
          <source>Create parent folders. This parameter is equivalent to the parameter --parents on svn cp commands and is useful for non-standard repository layouts.</source>
          <target state="translated">親フォルダを作成します。このパラメータは svn cp コマンドの --parents パラメータと同等であり、非標準のリポジトリレイアウトの場合に便利です。</target>
        </trans-unit>
        <trans-unit id="008d223ce25dddb7eb7d24c361668074bbed6dad" translate="yes" xml:space="preserve">
          <source>Create the branch &lt;code&gt;experimental&lt;/code&gt; in the &lt;code&gt;origin&lt;/code&gt; repository by copying the current &lt;code&gt;master&lt;/code&gt; branch. This form is only needed to create a new branch or tag in the remote repository when the local name and the remote name are different; otherwise, the ref name on its own will work.</source>
          <target state="translated">現在の &lt;code&gt;master&lt;/code&gt; ブランチをコピーして、 &lt;code&gt;origin&lt;/code&gt; リポジトリに &lt;code&gt;experimental&lt;/code&gt; ブランチを作成します。このフォームは、ローカル名とリモート名が異なる場合にリモートリポジトリに新しいブランチまたはタグを作成する場合にのみ必要です。それ以外の場合は、ref名だけで機能します。</target>
        </trans-unit>
        <trans-unit id="157f2dfeff99612ce2fdbdc6f8123dc09aa74a0b" translate="yes" xml:space="preserve">
          <source>Create the branch&amp;rsquo;s reflog. This activates recording of all changes made to the branch ref, enabling use of date based sha1 expressions such as &quot;&amp;lt;branchname&amp;gt;@{yesterday}&quot;. Note that in non-bare repositories, reflogs are usually enabled by default by the &lt;code&gt;core.logAllRefUpdates&lt;/code&gt; config option. The negated form &lt;code&gt;--no-create-reflog&lt;/code&gt; only overrides an earlier &lt;code&gt;--create-reflog&lt;/code&gt;, but currently does not negate the setting of &lt;code&gt;core.logAllRefUpdates&lt;/code&gt;.</source>
          <target state="translated">ブランチのreflogを作成します。これにより、ブランチ参照に加えられたすべての変更の記録がアクティブになり、「&amp;lt;branchname&amp;gt; @ {yesterday}」などの日付ベースのsha1式を使用できるようになります。非ベアリポジトリでは、reflogは通常、 &lt;code&gt;core.logAllRefUpdates&lt;/code&gt; 構成オプションによってデフォルトで有効になっていることに注意してください。否定形式 &lt;code&gt;--no-create-reflog&lt;/code&gt; は以前の &lt;code&gt;--create-reflog&lt;/code&gt; をオーバーライドするだけですが、現在は &lt;code&gt;core.logAllRefUpdates&lt;/code&gt; の設定を否定していません。</target>
        </trans-unit>
        <trans-unit id="6e2b0a6de869fa2e1ebef49223a669515c01db9f" translate="yes" xml:space="preserve">
          <source>Create the new branch&amp;rsquo;s reflog; see &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; for details.</source>
          <target state="translated">新しいブランチのreflogを作成します。詳細は&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="770931923d2f84baa80a7c6281d4bb0c7e7ff5dc" translate="yes" xml:space="preserve">
          <source>Create, list, delete or verify a tag object signed with GPG</source>
          <target state="translated">GPGで署名されたタグオブジェクトの作成、一覧表示、削除、検証</target>
        </trans-unit>
        <trans-unit id="884d013fa41e619bec3679b144edae3781c7f0c5" translate="yes" xml:space="preserve">
          <source>Create, list, delete refs to replace objects</source>
          <target state="translated">オブジェクトを置き換えるための参照の作成、リスト化、削除</target>
        </trans-unit>
        <trans-unit id="b126e5a5d6c912b3969ba9d70dcd92e7124db848" translate="yes" xml:space="preserve">
          <source>Creates (or recreates) the named branch, optionally starting from a specific revision. The reset command allows a frontend to issue a new &lt;code&gt;from&lt;/code&gt; command for an existing branch, or to create a new branch from an existing commit without creating a new commit.</source>
          <target state="translated">名前付きブランチを作成（または再作成）します（オプションで特定のリビジョンから開始）。resetコマンドを使用すると、フロントエンドは既存のブランチに対して新しい &lt;code&gt;from&lt;/code&gt; コマンドを発行したり、新しいコミットを作成せずに既存のコミットから新しいブランチを作成したりできます。</target>
        </trans-unit>
        <trans-unit id="999e99d0bbec6ceb96391dfde9cf6cc8fcd81661" translate="yes" xml:space="preserve">
          <source>Creates a file holding the contents of the blob specified by sha1. It returns the name of the temporary file in the following format: .merge_file_XXXXX</source>
          <target state="translated">sha1 で指定した blob の内容を保持するファイルを作成します。.merge_file_XXXXX という形式のテンポラリファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="09d3cd201fc386ccac2ad9f5c22bafbf8bdbb2f4" translate="yes" xml:space="preserve">
          <source>Creates a local branch, &lt;code&gt;master&lt;/code&gt; from this remote and checks it out.</source>
          <target state="translated">ローカルブランチを作成し、このリモートから &lt;code&gt;master&lt;/code&gt; し、チェックアウトします。</target>
        </trans-unit>
        <trans-unit id="7f64654581811c2b404b1b8dce4e1e1130a9678f" translate="yes" xml:space="preserve">
          <source>Creates a new branch or updates an existing branch by creating a new commit and updating the branch to point at the newly created commit.</source>
          <target state="translated">新しいコミットを作成し、新しく作成したコミットを指すようにブランチを更新することで、新しいブランチを作成したり、既存のブランチを更新したりします。</target>
        </trans-unit>
        <trans-unit id="1d59a731f68874f36286c257dc8063d7c2d003c5" translate="yes" xml:space="preserve">
          <source>Creates a new commit object based on the provided tree object and emits the new commit object id on stdout. The log message is read from the standard input, unless &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;-F&lt;/code&gt; options are given.</source>
          <target state="translated">指定されたツリーオブジェクトに基づいて新しいコミットオブジェクトを作成し、新しいコミットオブジェクトIDをstdoutに出力します。ログメッセージは、 &lt;code&gt;-m&lt;/code&gt; または &lt;code&gt;-F&lt;/code&gt; オプションが指定されていない限り、標準入力から読み取られます。</target>
        </trans-unit>
        <trans-unit id="47450bdc6c156b7e9d8dff8eb5153c36f0034363" translate="yes" xml:space="preserve">
          <source>Creates a tag object</source>
          <target state="translated">タグオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="befea765dea04bdbe90515b52ec037d05fcd654f" translate="yes" xml:space="preserve">
          <source>Creates a temporary file with a blob&amp;rsquo;s contents</source>
          <target state="translated">blobのコンテンツを含む一時ファイルを作成します</target>
        </trans-unit>
        <trans-unit id="352027cd4f1050e7a8d58f4759fd4887117240f0" translate="yes" xml:space="preserve">
          <source>Creates a tree object using the current index. The name of the new tree object is printed to standard output.</source>
          <target state="translated">現在のインデックスを使用してツリーオブジェクトを作成します。新しいツリーオブジェクトの名前が標準出力に出力されます。</target>
        </trans-unit>
        <trans-unit id="7652dba54710524ad06e288b0394d9ec8f781534" translate="yes" xml:space="preserve">
          <source>Creates an annotated tag object from an existing commit or branch. Lightweight tags are not supported by this command, as they are not recommended for recording meaningful points in time.</source>
          <target state="translated">既存のコミットやブランチから注釈付きタグオブジェクトを作成します。軽量なタグは、意味のあるポイントを記録するためには推奨されないため、このコマンドではサポートされません。</target>
        </trans-unit>
        <trans-unit id="94955619715d4d7ab1e29b4a0777170b742991c7" translate="yes" xml:space="preserve">
          <source>Creates an annotated tag referring to a specific commit. To create lightweight (non-annotated) tags see the &lt;code&gt;reset&lt;/code&gt; command below.</source>
          <target state="translated">特定のコミットを参照する注釈付きタグを作成します。軽量（注釈なし）タグを作成するには、以下の &lt;code&gt;reset&lt;/code&gt; コマンドを参照してください。</target>
        </trans-unit>
        <trans-unit id="1c5caa9b586b6725b423618f01dee45981d01339" translate="yes" xml:space="preserve">
          <source>Creates an archive of the specified format containing the tree structure for the named tree, and writes it out to the standard output. If &amp;lt;prefix&amp;gt; is specified it is prepended to the filenames in the archive.</source>
          <target state="translated">名前付きツリーのツリー構造を含む指定された形式のアーカイブを作成し、それを標準出力に書き出します。&amp;lt;prefix&amp;gt;が指定されている場合は、アーカイブのファイル名の前に付加されます。</target>
        </trans-unit>
        <trans-unit id="902be57432c35cdc5fd0ebc974090ec5fe10886f" translate="yes" xml:space="preserve">
          <source>Creates an empty Git repository in a subdirectory called &lt;code&gt;project&lt;/code&gt;.</source>
          <target state="translated">空のGitリポジトリを &lt;code&gt;project&lt;/code&gt; というサブディレクトリに作成します。</target>
        </trans-unit>
        <trans-unit id="cdbbe8fe0fb510b54456d0e5f7552d0ff50cdb17" translate="yes" xml:space="preserve">
          <source>Creates and checks out a new branch named &lt;code&gt;&amp;lt;branchname&amp;gt;&lt;/code&gt; starting from the commit at which the &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; was originally created, applies the changes recorded in &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; to the new working tree and index. If that succeeds, and &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; is a reference of the form &lt;code&gt;stash@{&amp;lt;revision&amp;gt;}&lt;/code&gt;, it then drops the &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt;. When no &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; is given, applies the latest one.</source>
          <target state="translated">作成し、という名前の新しいブランチをチェックアウト &lt;code&gt;&amp;lt;branchname&amp;gt;&lt;/code&gt; これでコミットから始まる &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; 最初に作成された、中に記録された変更適用 &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; 新しいワーキングツリーとインデックスにします。これが成功し、 &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; が &lt;code&gt;stash@{&amp;lt;revision&amp;gt;}&lt;/code&gt; 形式の参照である場合、 &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; を削除します。 &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; が指定されていない場合は、最新のものを適用します。</target>
        </trans-unit>
        <trans-unit id="817de4fcd985997655ed18eb9db24df013f605f3" translate="yes" xml:space="preserve">
          <source>Creates graft commits for all entries in &lt;code&gt;$GIT_DIR/info/grafts&lt;/code&gt; and deletes that file upon success. The purpose is to help users with transitioning off of the now-deprecated graft file.</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/info/grafts&lt;/code&gt; 内のすべてのエントリのグラフトコミットを作成し、成功するとそのファイルを削除します。この目的は、現在非推奨のグラフトファイルからの移行を支援することです。</target>
        </trans-unit>
        <trans-unit id="dffa1bc89fe4773c581e2bab0e59b1fe8148dfd2" translate="yes" xml:space="preserve">
          <source>Creates the branch &lt;code&gt;&amp;lt;new_branch&amp;gt;&lt;/code&gt; and start it at &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt;; if it already exists, then reset it to &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt;. This is equivalent to running &quot;git branch&quot; with &quot;-f&quot;; see &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; for details.</source>
          <target state="translated">ブランチ &lt;code&gt;&amp;lt;new_branch&amp;gt;&lt;/code&gt; を作成し、 &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt; で開始します。すでに存在する場合は、 &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt; にリセットします。これは、「-f」を指定して「gitブランチ」を実行するのと同じです。詳細は&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="051c90bf7349afef9519ebfd754be98e47ed9dee" translate="yes" xml:space="preserve">
          <source>Creating a branch in such a configuration requires disambiguating which location to use using the -d or --destination flag:</source>
          <target state="translated">このような設定でブランチを作成するには、-d または --destination フラグを使ってどの場所を使うかを明確にする必要があります。</target>
        </trans-unit>
        <trans-unit id="e6bedfd34ce489d63a7de42dd785dfdc0700c1e9" translate="yes" xml:space="preserve">
          <source>Creating a changelog and tarball for a software release</source>
          <target state="translated">ソフトウェアリリースの変更履歴とtarballを作成する</target>
        </trans-unit>
        <trans-unit id="c40a17b4008177323999b06c207c30d124e6c258" translate="yes" xml:space="preserve">
          <source>Creating a git repository</source>
          <target state="translated">gitリポジトリの作成</target>
        </trans-unit>
        <trans-unit id="040db03d97cbb631e8d9e6687acd4b2ef2582aa9" translate="yes" xml:space="preserve">
          <source>Creating a new Git repository couldn&amp;rsquo;t be easier: all Git repositories start out empty, and the only thing you need to do is find yourself a subdirectory that you want to use as a working tree - either an empty one for a totally new project, or an existing working tree that you want to import into Git.</source>
          <target state="translated">新しいGitリポジトリを作成するのは簡単なことではありません。すべてのGitリポジトリは空から始まり、作業ツリーとして使用するサブディレクトリを見つけるだけです-まったく新しいプロジェクトでは空のサブディレクトリ、またはGitにインポートする既存の作業ツリー。</target>
        </trans-unit>
        <trans-unit id="00e49b6089f98df76d1261d9c963ee126709d119" translate="yes" xml:space="preserve">
          <source>Creating a new branch</source>
          <target state="translated">新規ブランチの作成</target>
        </trans-unit>
        <trans-unit id="c39cd6567c9d07f33e0b16412b2e647902776ceb" translate="yes" xml:space="preserve">
          <source>Creating a new commit takes three steps:</source>
          <target state="translated">新しいコミットを作成するには、3つのステップが必要です。</target>
        </trans-unit>
        <trans-unit id="8ab78a3735f73dea4916eb1431c8608a2d083ad2" translate="yes" xml:space="preserve">
          <source>Creating a new commit that reverts an earlier change is very easy; just pass the &lt;a href=&quot;git-revert&quot;&gt;git-revert[1]&lt;/a&gt; command a reference to the bad commit; for example, to revert the most recent commit:</source>
          <target state="translated">以前の変更を元に戻す新しいコミットの作成は非常に簡単です。&lt;a href=&quot;git-revert&quot;&gt;git-revert [1]&lt;/a&gt;コマンドに不正なコミットへの参照を渡すだけです。たとえば、最新のコミットを元に戻すには：</target>
        </trans-unit>
        <trans-unit id="324b268505a0bd944ee2d5d30c8a3d50fc28d90f" translate="yes" xml:space="preserve">
          <source>Creating a new repository</source>
          <target state="translated">新しいリポジトリの作成</target>
        </trans-unit>
        <trans-unit id="36dbdbb03a117f7df33bdb409d5809a8b5ea5e6e" translate="yes" xml:space="preserve">
          <source>Creating a new repository from scratch is very easy:</source>
          <target state="translated">ゼロから新しいリポジトリを作成するのはとても簡単です。</target>
        </trans-unit>
        <trans-unit id="88eec46a3edc17fddca4fd44d28bb64f8780df72" translate="yes" xml:space="preserve">
          <source>Creating a tree object is trivial, and is done with &lt;code&gt;git write-tree&lt;/code&gt;. There are no options or other input: &lt;code&gt;git write-tree&lt;/code&gt; will take the current index state, and write an object that describes that whole index. In other words, we&amp;rsquo;re now tying together all the different filenames with their contents (and their permissions), and we&amp;rsquo;re creating the equivalent of a Git &quot;directory&quot; object:</source>
          <target state="translated">ツリーオブジェクトの作成は簡単で、 &lt;code&gt;git write-tree&lt;/code&gt; を使用して行います。オプションやその他の入力はありません &lt;code&gt;git write-tree&lt;/code&gt; は現在のインデックスの状態を取得し、そのインデックス全体を表すオブジェクトを書き込みます。つまり、すべての異なるファイル名とその内容（およびその権限）を結び付け、Gitの「ディレクトリ」オブジェクトに相当するものを作成しています。</target>
        </trans-unit>
        <trans-unit id="719e91bca781d7da4469d32275de7f00e97366b0" translate="yes" xml:space="preserve">
          <source>Creating an archive</source>
          <target state="translated">アーカイブの作成</target>
        </trans-unit>
        <trans-unit id="57d940de5ca0935e018fd03ec556851a3258029c" translate="yes" xml:space="preserve">
          <source>Creating good commit messages</source>
          <target state="translated">良いコミットメッセージの作成</target>
        </trans-unit>
        <trans-unit id="d793460efe87481af6fc2a69bf4007ae5b376697" translate="yes" xml:space="preserve">
          <source>Creating replacement objects</source>
          <target state="translated">置換オブジェクトの作成</target>
        </trans-unit>
        <trans-unit id="ab3dc2ecc52838a3e77a21918b25403d09705634" translate="yes" xml:space="preserve">
          <source>Creating tags</source>
          <target state="translated">タグの作成</target>
        </trans-unit>
        <trans-unit id="b0acbd1aa53ddfa814233d47e25a83dac45b77c7" translate="yes" xml:space="preserve">
          <source>Creating the commit using the content you told Git about in step 2.</source>
          <target state="translated">ステップ 2 で Git に伝えた内容を使ってコミットを作成します。</target>
        </trans-unit>
        <trans-unit id="4d969b5791f8a038b7f947a6c2bb33127dd04018" translate="yes" xml:space="preserve">
          <source>Creating the perfect patch series</source>
          <target state="translated">完璧なパッチシリーズの作成</target>
        </trans-unit>
        <trans-unit id="a2955539fd234d4e940b20d8a9e91ef656e850f2" translate="yes" xml:space="preserve">
          <source>Creating, deleting, and modifying branches is quick and easy; here&amp;rsquo;s a summary of the commands:</source>
          <target state="translated">ブランチの作成、削除、変更はすばやく簡単です。コマンドの要約は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3c7835c41262e0651be74f2c3160cc75a963df48" translate="yes" xml:space="preserve">
          <source>Credential contexts</source>
          <target state="translated">クレデンシャルのコンテキスト</target>
        </trans-unit>
        <trans-unit id="458543c678ae3dd16b97b21c03b00e9eaaddd45b" translate="yes" xml:space="preserve">
          <source>Credential helpers to cache or store passwords, or to interact with a system password wallet or keychain.</source>
          <target state="translated">パスワードをキャッシュしたり保存したり、システムのパスワードウォレットやキーチェーンと対話するためのクレデンシャルヘルパー。</target>
        </trans-unit>
        <trans-unit id="2fe8ef32f03f0033712fed8d5429cd4799dc6471" translate="yes" xml:space="preserve">
          <source>Credential helpers, on the other hand, are external programs from which Git can request both usernames and passwords; they typically interface with secure storage provided by the OS or other programs.</source>
          <target state="translated">一方、クレデンシャルヘルパーは、Git がユーザー名とパスワードの両方を要求するための外部プログラムで、通常は OS や他のプログラムが提供する安全なストレージと連携します。</target>
        </trans-unit>
        <trans-unit id="d62300d6222786cbbaa983d6e9106aadd99d8d3d" translate="yes" xml:space="preserve">
          <source>Credential storage will by default write to the first existing file in the list. If none of these files exist, &lt;code&gt;~/.git-credentials&lt;/code&gt; will be created and written to.</source>
          <target state="translated">資格情報ストレージは、デフォルトでリストの最初の既存ファイルに書き込みます。これらのファイルが存在しない場合は、 &lt;code&gt;~/.git-credentials&lt;/code&gt; が作成されて書き込まれます。</target>
        </trans-unit>
        <trans-unit id="70e47cc9d61ac64c248d54da47cefec3c90e34c9" translate="yes" xml:space="preserve">
          <source>Currently a dummy fall-through function implemented as a wrapper around &lt;code&gt;printf(1)&lt;/code&gt; with variables expanded by the git-sh-i18n{litdd}envsubst[1] helper. Will be replaced by a real gettext implementation in a later version.</source>
          <target state="translated">現在、gitfsh-i18n {litdd} envsubst [1]ヘルパーによって展開された変数を持つ &lt;code&gt;printf(1)&lt;/code&gt; のラッパーとして実装されたダミーのフォールスルー関数。今後のバージョンでは、実際のgettext実装に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="87c8476a8fe8246e9cc89649a2d435a7d613617a" translate="yes" xml:space="preserve">
          <source>Currently a dummy fall-through function implemented as a wrapper around &lt;code&gt;printf(1)&lt;/code&gt;. Will be replaced by a real gettext implementation in a later version.</source>
          <target state="translated">現在、 &lt;code&gt;printf(1)&lt;/code&gt; のラッパーとして実装されているダミーのフォールスルー関数。今後のバージョンでは、実際のgettext実装に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="d0a323c8531b99ccfcb3b5693dd52db2df3f23ff" translate="yes" xml:space="preserve">
          <source>Currently available providers are &lt;strong&gt;&quot;gravatar&quot;&lt;/strong&gt; and &lt;strong&gt;&quot;picon&quot;&lt;/strong&gt;. Only one provider at a time can be selected (&lt;code&gt;default&lt;/code&gt; is one element list). If an unknown provider is specified, the feature is disabled. &lt;strong&gt;Note&lt;/strong&gt; that some providers might require extra Perl packages to be installed; see &lt;code&gt;gitweb/INSTALL&lt;/code&gt; for more details.</source>
          <target state="translated">現在使用可能なプロバイダは、&lt;strong&gt;「グラバター」&lt;/strong&gt;と&lt;strong&gt;「のpicon」&lt;/strong&gt;。一度に選択できるプロバイダーは1つだけです（ &lt;code&gt;default&lt;/code&gt; は1つのエレメントリストです）。不明なプロバイダーが指定されている場合、機能は無効になります。&lt;strong&gt;注&lt;/strong&gt;一部のプロバイダがインストールされるように、余分なPerlのパッケージが必要になる場合がありますことを。詳細は &lt;code&gt;gitweb/INSTALL&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="717fdd8a8fe2000b9c0c629f6c5d467ecf014cfe" translate="yes" xml:space="preserve">
          <source>Currently for internal use only. Set a prefix which gives a path from above a repository down to its root. One use is to give submodules context about the superproject that invoked it.</source>
          <target state="translated">現在は内部でのみ使用しています。リポジトリの上からルートまでのパスを与えるプレフィックスを設定します。一つの使い方は、サブモジュールにそれを呼び出したスーパープロジェクトのコンテキストを与えることです。</target>
        </trans-unit>
        <trans-unit id="44c98bf149dc1ad4ae7705ea185729a070e4f82e" translate="yes" xml:space="preserve">
          <source>Currently recognized fields are:</source>
          <target state="translated">現在認識されている分野は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="96e2ac5c1dd546ca41ecd7f60aa78cd7c4c66ca3" translate="yes" xml:space="preserve">
          <source>Currently the command updates the following files. Please see &lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout[5]&lt;/a&gt; for description of what they are for:</source>
          <target state="translated">現在、このコマンドは次のファイルを更新します。それらの目的の説明については、&lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="58cad17f651d6b9e5474187d9de4ce3c98aebe87" translate="yes" xml:space="preserve">
          <source>Currently this is used by &lt;a href=&quot;git-switch&quot;&gt;git-switch[1]&lt;/a&gt; and &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt; when &lt;code&gt;git checkout &amp;lt;something&amp;gt;&lt;/code&gt; or &lt;code&gt;git switch &amp;lt;something&amp;gt;&lt;/code&gt; will checkout the &lt;code&gt;&amp;lt;something&amp;gt;&lt;/code&gt; branch on another remote, and by &lt;a href=&quot;git-worktree&quot;&gt;git-worktree[1]&lt;/a&gt; when &lt;code&gt;git worktree add&lt;/code&gt; refers to a remote branch. This setting might be used for other checkout-like commands or functionality in the future.</source>
          <target state="translated">現在、これはで使用されている&lt;a href=&quot;git-switch&quot;&gt;[1]のgit-スイッチ&lt;/a&gt;と&lt;a href=&quot;git-checkout&quot;&gt;gitのチェックアウト[1] &lt;/a&gt; &lt;code&gt;git checkout &amp;lt;something&amp;gt;&lt;/code&gt; または &lt;code&gt;git switch &amp;lt;something&amp;gt;&lt;/code&gt; チェックアウトします &lt;code&gt;&amp;lt;something&amp;gt;&lt;/code&gt; 別のリモートのブランチを、そしてによって&lt;a href=&quot;git-worktree&quot;&gt;はgit-worktree [1]&lt;/a&gt;とき &lt;code&gt;git worktree add&lt;/code&gt; はリモートブランチを指します。この設定は、将来、他のチェックアウトのようなコマンドや機能に使用される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5c5b7b525cb2eea52baefaf69e3b28ebe43a1b5d" translate="yes" xml:space="preserve">
          <source>Currently, this is always &quot;r1&quot; for the main repository. This field is in anticipation of in-proc submodules in the future.</source>
          <target state="translated">現在、メインリポジトリでは常に &quot;r1 &quot;です。このフィールドは将来のインプロックサブモジュールを想定したものです。</target>
        </trans-unit>
        <trans-unit id="071b814c810acef4a305418b7617eb91825385c2" translate="yes" xml:space="preserve">
          <source>Custom helpers</source>
          <target state="translated">カスタムヘルパー</target>
        </trans-unit>
        <trans-unit id="441c592e043641e18ffb271284d516b14fe37bc0" translate="yes" xml:space="preserve">
          <source>Custom macro attributes can be defined only in top-level gitattributes files (&lt;code&gt;$GIT_DIR/info/attributes&lt;/code&gt;, the &lt;code&gt;.gitattributes&lt;/code&gt; file at the top level of the working tree, or the global or system-wide gitattributes files), not in &lt;code&gt;.gitattributes&lt;/code&gt; files in working tree subdirectories. The built-in macro attribute &quot;binary&quot; is equivalent to:</source>
          <target state="translated">カスタムマクロ属性は、最上位のgitattributesファイル（ &lt;code&gt;$GIT_DIR/info/attributes&lt;/code&gt; 、作業ツリーの最上位にある &lt;code&gt;.gitattributes&lt;/code&gt; ファイル、またはグローバルまたはシステム全体のgitattributesファイル）で &lt;code&gt;.gitattributes&lt;/code&gt; でき、.gitattributesファイルでは定義できません作業ツリーのサブディレクトリ。組み込みマクロ属性「binary」は、以下と同等です。</target>
        </trans-unit>
        <trans-unit id="3e39087b89619b8882da1dce388a569a8e549573" translate="yes" xml:space="preserve">
          <source>Customizing word diff</source>
          <target state="translated">単語の差分をカスタマイズする</target>
        </trans-unit>
        <trans-unit id="a28effa0c8276898e045b96b9d1ba0f760229cf5" translate="yes" xml:space="preserve">
          <source>Cute name for &lt;a href=&quot;#def_core_git&quot;&gt;core Git&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#def_core_git&quot;&gt;コアGitの&lt;/a&gt;かわいい名前。</target>
        </trans-unit>
        <trans-unit id="7033e3578a96d1e9400e567b4c0c23cd21d2c6e2" translate="yes" xml:space="preserve">
          <source>Cute name for programs and program suites depending on &lt;a href=&quot;#def_core_git&quot;&gt;core Git&lt;/a&gt;, presenting a high level access to core Git. Porcelains expose more of a &lt;a href=&quot;#def_SCM&quot;&gt;SCM&lt;/a&gt; interface than the &lt;a href=&quot;#def_plumbing&quot;&gt;plumbing&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#def_core_git&quot;&gt;コアGit&lt;/a&gt;に依存するプログラムとプログラムスイートのかわいい名前。コアGitへの高レベルのアクセスを提供します。磁器は、&lt;a href=&quot;#def_plumbing&quot;&gt;配管&lt;/a&gt;よりも&lt;a href=&quot;#def_SCM&quot;&gt;SCM&lt;/a&gt;インターフェースを多く公開します。</target>
        </trans-unit>
        <trans-unit id="c276dc0072d6e81f335296db56eec5a1bdc2bed9" translate="yes" xml:space="preserve">
          <source>Cutting down bisection by giving more parameters to bisect start</source>
          <target state="translated">二等分開始時のパラメータを増やして二等分を削減</target>
        </trans-unit>
        <trans-unit id="9e78b27ca0bc764cd94adfc012f3ea2c4c32e8ff" translate="yes" xml:space="preserve">
          <source>D: deletion of a file</source>
          <target state="translated">D:ファイルの削除</target>
        </trans-unit>
        <trans-unit id="4ecdb0fd037d3dafe4f4e2a354bcfe9ed6b3a537" translate="yes" xml:space="preserve">
          <source>DAG</source>
          <target state="translated">DAG</target>
        </trans-unit>
        <trans-unit id="5a7759c99cc9f0c4d7897147bc310328ba1b2ac4" translate="yes" xml:space="preserve">
          <source>Dangling objects</source>
          <target state="translated">ぶら下がり物</target>
        </trans-unit>
        <trans-unit id="d8788504c151968602d8ccc8fc1d2150b059a336" translate="yes" xml:space="preserve">
          <source>Data Messages</source>
          <target state="translated">データメッセージ</target>
        </trans-unit>
        <trans-unit id="4b1f2d8717c44b631b95852544cce5392a548364" translate="yes" xml:space="preserve">
          <source>Data events are tagged with the active thread name. They are used to report the per-thread parameters.</source>
          <target state="translated">データイベントは、アクティブなスレッド名でタグ付けされます。これらはスレッドごとのパラメータを報告するために使用されます。</target>
        </trans-unit>
        <trans-unit id="4bee01a9236d0c6bfb9a9c78d868c75e8d0aa93e" translate="yes" xml:space="preserve">
          <source>Data messages added to a region.</source>
          <target state="translated">リージョンに追加されたデータメッセージ。</target>
        </trans-unit>
        <trans-unit id="e5169e0ca17e29bbdf784cf8e268aafa8934e51d" translate="yes" xml:space="preserve">
          <source>Data written to stdin of the specified &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; is assumed to be sent to a git:// server, git-upload-pack, git-receive-pack or git-upload-archive (depending on situation), and data read from stdout of &amp;lt;command&amp;gt; is assumed to be received from the same service.</source>
          <target state="translated">指定された &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; の stdinに書き込まれたデータは、git：//サーバー、git-upload-pack、git-receive-packまたはgit-upload-archive（状況に応じて）に送信され、データは&amp;lt;command&amp;gt;のstdoutは、同じサービスから受信されると想定されます。</target>
        </trans-unit>
        <trans-unit id="ce4b9abd8c39b6edc1077cdc5fbd525d6784cc17" translate="yes" xml:space="preserve">
          <source>Database backend</source>
          <target state="translated">データベースバックエンド</target>
        </trans-unit>
        <trans-unit id="88e3b202bead5498b3c26df9a24b06dbb71997e1" translate="yes" xml:space="preserve">
          <source>Database name. The exact meaning depends on the selected database driver, for SQLite this is a filename. Supports variable substitution (see below). May not contain semicolons (&lt;code&gt;;&lt;/code&gt;). Default: &lt;code&gt;%Ggitcvs.%m.sqlite&lt;/code&gt;</source>
          <target state="translated">データベース名。正確な意味は、選択したデータベースドライバによって異なります。SQLiteの場合、これはファイル名です。変数置換をサポートします（以下を参照）。セミコロン（ &lt;code&gt;;&lt;/code&gt; ）を含めることはできません。デフォルト： &lt;code&gt;%Ggitcvs.%m.sqlite&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec7281a9f03369f6fca87bc704dcd61eb8d42fc2" translate="yes" xml:space="preserve">
          <source>Database password. Only useful if setting &lt;code&gt;dbDriver&lt;/code&gt;, since SQLite has no concept of database passwords.</source>
          <target state="translated">データベースのパスワード。SQLiteにはデータベースパスワードの概念がないため、 &lt;code&gt;dbDriver&lt;/code&gt; を設定する場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="6cb047cae02c9bba7b0e3391be2c746d7c4c4487" translate="yes" xml:space="preserve">
          <source>Database table name prefix. Prepended to the names of any database tables used, allowing a single database to be used for several repositories. Supports variable substitution (see &lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver[1]&lt;/a&gt; for details). Any non-alphabetic characters will be replaced with underscores.</source>
          <target state="translated">データベーステーブル名のプレフィックス。使用されるデータベーステーブルの名前の前に付加され、単一のデータベースを複数のリポジトリに使用できるようにします。変数置換をサポートします（詳細については、&lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver [1]&lt;/a&gt;を参照してください）。アルファベット以外の文字はすべてアンダースコアに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="ba01b17d3115051f1a477d09b8cec632c83f89d1" translate="yes" xml:space="preserve">
          <source>Database table name prefix. Supports variable substitution (see below). Any non-alphabetic characters will be replaced with underscores.</source>
          <target state="translated">データベーステーブル名の接頭辞。変数の置換をサポートします(下記参照)。アルファベット以外の文字はアンダースコアに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="a13030629fc1c33a937c268b335dcb627627128f" translate="yes" xml:space="preserve">
          <source>Database used by git-cvsserver to cache revision information derived from the Git repository. The exact meaning depends on the used database driver, for SQLite (which is the default driver) this is a filename. Supports variable substitution (see &lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver[1]&lt;/a&gt; for details). May not contain semicolons (&lt;code&gt;;&lt;/code&gt;). Default: &lt;code&gt;%Ggitcvs.%m.sqlite&lt;/code&gt;</source>
          <target state="translated">Gitリポジトリから派生したリビジョン情報をキャッシュするためにgit-cvsserverが使用するデータベース。正確な意味は、使用するデータベースドライバーによって異なります。SQLite（デフォルトのドライバー）の場合、これはファイル名です。変数置換をサポートします（詳細については、&lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver [1]&lt;/a&gt;を参照してください）。セミコロン（ &lt;code&gt;;&lt;/code&gt; ）を含めることはできません。デフォルト： &lt;code&gt;%Ggitcvs.%m.sqlite&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fb3915ed16cfcd6e4965fc92e19dfdb3f354cb3d" translate="yes" xml:space="preserve">
          <source>Database user and password. Only useful if setting &lt;code&gt;gitcvs.dbDriver&lt;/code&gt;, since SQLite has no concept of database users and/or passwords. &lt;code&gt;gitcvs.dbUser&lt;/code&gt; supports variable substitution (see &lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver[1]&lt;/a&gt; for details).</source>
          <target state="translated">データベースのユーザーとパスワード。SQLiteにはデータベースユーザーやパスワードの概念がないため、 &lt;code&gt;gitcvs.dbDriver&lt;/code&gt; を設定する場合にのみ役立ちます。 &lt;code&gt;gitcvs.dbUser&lt;/code&gt; は変数置換をサポートしています（詳細は&lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver [1]&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="161446d05bce5c35b9bb58271e5e12dbad31f437" translate="yes" xml:space="preserve">
          <source>Database user. Only useful if setting &lt;code&gt;dbDriver&lt;/code&gt;, since SQLite has no concept of database users. Supports variable substitution (see below).</source>
          <target state="translated">データベースユーザー。SQLiteにはデータベースユーザーの概念がないため、 &lt;code&gt;dbDriver&lt;/code&gt; を設定する場合にのみ役立ちます。変数置換をサポートします（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="3fcd7b7ae338d342a7674f84f0c1f730e65ba9c0" translate="yes" xml:space="preserve">
          <source>Date Formats</source>
          <target state="translated">日付のフォーマット</target>
        </trans-unit>
        <trans-unit id="adf2309d1c810bb87f6dbfe62284445270cc7ea8" translate="yes" xml:space="preserve">
          <source>Date formats</source>
          <target state="translated">日付のフォーマット</target>
        </trans-unit>
        <trans-unit id="8dd9c41bb94ad9101ba89e79d1af605fb457f638" translate="yes" xml:space="preserve">
          <source>Debug gitignore / exclude files</source>
          <target state="translated">デバッグ gitignore/ファイルを除外する</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="49a655454d59f6253c27bfd18c23a18e1916a070" translate="yes" xml:space="preserve">
          <source>Debugging would be easier if the fallback configuration file (&lt;code&gt;/etc/gitweb.conf&lt;/code&gt;) and environment variable to override its location (&lt;code&gt;GITWEB_CONFIG_SYSTEM&lt;/code&gt;) had names reflecting their &quot;fallback&quot; role. The current names are kept to avoid breaking working setups.</source>
          <target state="translated">フォールバック構成ファイル（ &lt;code&gt;/etc/gitweb.conf&lt;/code&gt; ）とその場所をオーバーライドする環境変数（ &lt;code&gt;GITWEB_CONFIG_SYSTEM&lt;/code&gt; ）に「フォールバック」ロールを反映した名前が付いていると、デバッグが容易になります。現在の名前は、動作中の設定を壊さないように保持されています。</target>
        </trans-unit>
        <trans-unit id="25623d3d6597110b3dc53adcb06a990460c0bdc2" translate="yes" xml:space="preserve">
          <source>Decide not to merge. The only clean-ups you need are to reset the index file to the &lt;code&gt;HEAD&lt;/code&gt; commit to reverse 2. and to clean up working tree changes made by 2. and 3.; &lt;code&gt;git merge --abort&lt;/code&gt; can be used for this.</source>
          <target state="translated">マージしないことを決定します。必要なクリーンアップは、インデックスファイルを &lt;code&gt;HEAD&lt;/code&gt; コミットにリセットして2を元に戻し、2と3によって行われた作業ツリーの変更をクリーンアップすることだけです。 &lt;code&gt;git merge --abort&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="461dd8f77b9a26481c7b52783d8ce19864c00a87" translate="yes" xml:space="preserve">
          <source>Deepen or shorten the history of a shallow repository to exclude commits reachable from a specified remote branch or tag. This option can be specified multiple times.</source>
          <target state="translated">指定したリモートブランチやタグから到達可能なコミットを除外するために、浅いリポジトリの履歴を深くしたり短くしたりします。このオプションは複数回指定できます。</target>
        </trans-unit>
        <trans-unit id="fc0ba6fe75550f8aa46ad04018df5509f99a82b6" translate="yes" xml:space="preserve">
          <source>Deepen or shorten the history of a shallow repository to include all reachable commits after &amp;lt;date&amp;gt;.</source>
          <target state="translated">浅いリポジトリの履歴を深くするか短くして、&amp;lt;date&amp;gt;以降のすべての到達可能なコミットを含めます。</target>
        </trans-unit>
        <trans-unit id="b85c21ce1c36df4fd97d8d980d2975325f47caee" translate="yes" xml:space="preserve">
          <source>Deepens the history of a shallow repository based on time.</source>
          <target state="translated">時間を元に浅いリポジトリの歴史を深める。</target>
        </trans-unit>
        <trans-unit id="0b2ab70fb2f23273e2c8d92c10b43dfc891dac12" translate="yes" xml:space="preserve">
          <source>Deepens the history of a shallow repository excluding ref. Multiple options add up.</source>
          <target state="translated">refを除いた浅いリポジトリの履歴を深めます。複数のオプションが加算されます。</target>
        </trans-unit>
        <trans-unit id="e87814f404c8c230e2c89d6eeca5b7883036cc70" translate="yes" xml:space="preserve">
          <source>Deepens the history of a shallow repository relative to current boundary. Only valid when used with &quot;option depth&quot;.</source>
          <target state="translated">浅いリポジトリの履歴を現在の境界を基準にして深くします。option depth &quot;と併用した場合のみ有効。</target>
        </trans-unit>
        <trans-unit id="919906ebf6455d2b9a3b4a65ed3f4d4732631f26" translate="yes" xml:space="preserve">
          <source>Deepens the history of a shallow repository.</source>
          <target state="translated">浅い処分場の歴史を深める。</target>
        </trans-unit>
        <trans-unit id="3a0a0372c4178042ae74a7b526723e3fc6d8263f" translate="yes" xml:space="preserve">
          <source>Deeper technical details are often marked as Notes, which you can skip on your first reading.</source>
          <target state="translated">より深い技術的な詳細は「ノート」と表記されていることが多く、最初の読み物では読み飛ばすことができます。</target>
        </trans-unit>
        <trans-unit id="d20e487318f9399c04b2a3d79bfe7af0545b07ad" translate="yes" xml:space="preserve">
          <source>Default behavior is to replace at most one line. This replaces all lines matching the key (and optionally the value_regex).</source>
          <target state="translated">デフォルトの動作は、最大でも 1 行を置き換えます。これは、キー (およびオプションで value_regex)にマッチするすべての行を置き換えます。</target>
        </trans-unit>
        <trans-unit id="749b51b1c09b9f840f85503ac08122dc83ca64a1" translate="yes" xml:space="preserve">
          <source>Default behaviour</source>
          <target state="translated">デフォルトの動作</target>
        </trans-unit>
        <trans-unit id="169920c54a1f81ff4c7f4ea2f9bc3ec52999c692" translate="yes" xml:space="preserve">
          <source>Default category for projects for which none is specified. If this is set to the empty string, such projects will remain uncategorized and listed at the top, above categorized projects. Used only if project categories are enabled, which means if &lt;code&gt;$projects_list_group_categories&lt;/code&gt; is true. By default set to &quot;&quot; (empty string).</source>
          <target state="translated">何も指定されていないプロジェクトのデフォルトのカテゴリ。これが空の文字列に設定されている場合、そのようなプロジェクトは分類されないままで、分類されたプロジェクトの上部に表示されます。プロジェクトカテゴリが有効な場合にのみ使用されます。つまり、 &lt;code&gt;$projects_list_group_categories&lt;/code&gt; がtrueの場合です。デフォルトでは &quot;&quot;（空の文字列）に設定されています。</target>
        </trans-unit>
        <trans-unit id="9a7724b74acb9022ccf2c23f91703070df10d1ad" translate="yes" xml:space="preserve">
          <source>Default charset for text files. If this is not set, the web server configuration will be used. Unset by default.</source>
          <target state="translated">テキストファイルのデフォルトの文字セット。これが設定されていない場合、ウェブサーバの設定が使用されます。デフォルトでは設定されていません。</target>
        </trans-unit>
        <trans-unit id="f158e700b844e38a0dc931109afe37923be30e86" translate="yes" xml:space="preserve">
          <source>Default for the &lt;code&gt;--format&lt;/code&gt; option. (See &lt;code&gt;Pretty Formats&lt;/code&gt; above.) Defaults to &lt;code&gt;medium&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--format&lt;/code&gt; オプションのデフォルト。（上記の &lt;code&gt;Pretty Formats&lt;/code&gt; を参照してください。）デフォルトは &lt;code&gt;medium&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="218b9a84e8b1c5c4d3bddc9fdedc0acd32221314" translate="yes" xml:space="preserve">
          <source>Default format for human-readable dates. (Compare the &lt;code&gt;--date&lt;/code&gt; option.) Defaults to &quot;default&quot;, which means to write dates like &lt;code&gt;Sat May 8 19:35:34 2010 -0500&lt;/code&gt;.</source>
          <target state="translated">人間が読める日付のデフォルト形式。（ &lt;code&gt;--date&lt;/code&gt; オプションと比較してください。）デフォルトは &quot;default&quot;です。これは、 &lt;code&gt;Sat May 8 19:35:34 2010 -0500&lt;/code&gt; のような日付を書き込むことを意味します。</target>
        </trans-unit>
        <trans-unit id="ba0eb309e5345eec5c3b84841217719e93588d00" translate="yes" xml:space="preserve">
          <source>Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32 MiB on 32 bit platforms and 1 GiB on 64 bit platforms. This should be reasonable for all users/operating systems. You probably do not need to adjust this value.</source>
          <target state="translated">デフォルトはコンパイル時に NO_MMAP が設定されている場合は 1 MiB、そうでない場合は 32 ビットプラットフォームで 32 MiB、64 ビットプラットフォームで 1 GiB です。これはすべてのユーザ/オペレーティングシステムにとって妥当な値であるはずです。おそらくこの値を調整する必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="d9147e34112ee790abb9f9db27d98b411473bac1" translate="yes" xml:space="preserve">
          <source>Default is 256 MiB on 32 bit platforms and 32 TiB (effectively unlimited) on 64 bit platforms. This should be reasonable for all users/operating systems, except on the largest projects. You probably do not need to adjust this value.</source>
          <target state="translated">デフォルトは32ビットプラットフォームでは256MiB、64ビットプラットフォームでは32TiB(事実上無制限)です。これは、大規模なプロジェクトを除いて、すべてのユーザー/オペレーティングシステムにとって妥当な値です。おそらくこの値を調整する必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="4e49064ea050150a0f08182ce6ea67e133f00a9b" translate="yes" xml:space="preserve">
          <source>Default is 512 MiB on all platforms. This should be reasonable for most projects as source code and other text files can still be delta compressed, but larger binary media files won&amp;rsquo;t be.</source>
          <target state="translated">すべてのプラットフォームで、デフォルトは512 MiBです。ソースコードやその他のテキストファイルは依然としてデルタ圧縮できるため、これはほとんどのプロジェクトにとって妥当なはずですが、より大きなバイナリメディアファイルはそうではありません。</target>
        </trans-unit>
        <trans-unit id="dda4dcbc7195d800c473af9dc2bffe5e2a28d17c" translate="yes" xml:space="preserve">
          <source>Default is 96 MiB on all platforms. This should be reasonable for all users/operating systems, except on the largest projects. You probably do not need to adjust this value.</source>
          <target state="translated">デフォルトはすべてのプラットフォームで96MBです。これは、大規模なプロジェクトを除いて、すべてのユーザー/オペレーティングシステムにとって妥当な値です。おそらくこの値を調整する必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="41aaa0897fbd85df874ab9d046a41b0b5b6fcbb7" translate="yes" xml:space="preserve">
          <source>Default is the value of &lt;code&gt;sendemail.confirm&lt;/code&gt; configuration value; if that is unspecified, default to &lt;code&gt;auto&lt;/code&gt; unless any of the suppress options have been specified, in which case default to &lt;code&gt;compose&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;sendemail.confirm&lt;/code&gt; 構成値の値です。それが指定されていない場合、抑制オプションが指定されていない限り、デフォルトで &lt;code&gt;auto&lt;/code&gt; になり、その場合はデフォルトで &lt;code&gt;compose&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="3569c1c552117db58dc989b670cc81e2f0b5eea8" translate="yes" xml:space="preserve">
          <source>Default is the value of &lt;code&gt;sendemail.suppresscc&lt;/code&gt; configuration value; if that is unspecified, default to &lt;code&gt;self&lt;/code&gt; if --suppress-from is specified, as well as &lt;code&gt;body&lt;/code&gt; if --no-signed-off-cc is specified.</source>
          <target state="translated">デフォルトは &lt;code&gt;sendemail.suppresscc&lt;/code&gt; 構成値の値です。これが指定されていない場合、-suppress-fromが指定されている場合はデフォルトで &lt;code&gt;self&lt;/code&gt; になり、-no -signed-off-ccが指定されて &lt;code&gt;body&lt;/code&gt; 場合はbodyになります。</target>
        </trans-unit>
        <trans-unit id="3d9cf7354837a1e6f3330509773c724888f83eee" translate="yes" xml:space="preserve">
          <source>Default is the value of &lt;code&gt;sendemail.validate&lt;/code&gt;; if this is not set, default to &lt;code&gt;--validate&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;sendemail.validate&lt;/code&gt; の値です。これが設定されていない場合、デフォルトは &lt;code&gt;--validate&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="56e75db08a7bfbfa3cf0e2da2dfaa6006039a1d9" translate="yes" xml:space="preserve">
          <source>Default is the value of the &lt;code&gt;sendemail.transferEncoding&lt;/code&gt; configuration value; if that is unspecified, default to &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;sendemail.transferEncoding&lt;/code&gt; 構成値の値です。それが指定されていない場合、デフォルトは &lt;code&gt;auto&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="64e9c61ef316384afc27b43382c7032d837b6c45" translate="yes" xml:space="preserve">
          <source>Default mimetype for the blob_plain (raw) view, if mimetype checking doesn&amp;rsquo;t result in some other type; by default &quot;text/plain&quot;. Gitweb guesses mimetype of a file to display based on extension of its filename, using &lt;code&gt;$mimetypes_file&lt;/code&gt; (if set and file exists) and &lt;code&gt;/etc/mime.types&lt;/code&gt; files (see &lt;strong&gt;mime.types&lt;/strong&gt;(5) manpage; only filename extension rules are supported by gitweb).</source>
          <target state="translated">blob_plain（raw）ビューのデフォルトのmimetype（mimetypeチェックの結果、他のタイプにならない場合）。デフォルトでは「text / plain」。Gitwebの推測が使用して、そのファイル名の拡張子に基づいて表示するには、ファイルのMIME &lt;code&gt;$mimetypes_file&lt;/code&gt; （セットとファイルが存在する場合）と &lt;code&gt;/etc/mime.types&lt;/code&gt; ファイルを（参照&lt;strong&gt;のmime.types&lt;/strong&gt;ファイル名のみ拡張ルールがによってサポートされています;（5）マニュアルページをgitweb）。</target>
        </trans-unit>
        <trans-unit id="a652e3e440b54f22526cd10c4e33c94f21d2c36b" translate="yes" xml:space="preserve">
          <source>Default mode</source>
          <target state="translated">デフォルトモード</target>
        </trans-unit>
        <trans-unit id="acfd9cc6edb5212a1b417bbccf2370d2aa946d1d" translate="yes" xml:space="preserve">
          <source>Default value is &quot;project&quot;. Unknown value means unsorted.</source>
          <target state="translated">デフォルト値は &quot;project &quot;です。不明な値はソートされていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="d13eeb854d667ceefdf012fc9e848fc81153988f" translate="yes" xml:space="preserve">
          <source>Default value of ordering of projects on projects list page, which means the ordering used if you don&amp;rsquo;t explicitly sort projects list (if there is no &quot;o&quot; CGI query parameter in the URL). Valid values are &quot;none&quot; (unsorted), &quot;project&quot; (projects are by project name, i.e. path to repository relative to &lt;code&gt;$projectroot&lt;/code&gt;), &quot;descr&quot; (project description), &quot;owner&quot;, and &quot;age&quot; (by date of most current commit).</source>
          <target state="translated">プロジェクトリストページでのプロジェクトの順序付けのデフォルト値。つまり、プロジェクトリストを明示的にソートしない場合（URLに &quot;o&quot; CGIクエリパラメーターがない場合）に使用される順序付けを意味します。有効な値は、「なし」（ソートされていない）、「プロジェクト」（プロジェクトはプロジェクト名、つまり &lt;code&gt;$projectroot&lt;/code&gt; からのリポジトリへのパス）、「descr」（プロジェクトの説明）、「所有者」、および「年齢」（日付順）です。最新のコミット）。</target>
        </trans-unit>
        <trans-unit id="8ac357056e8ed36929d1a15c1654ca84f035985a" translate="yes" xml:space="preserve">
          <source>Default values for &amp;lt;repository&amp;gt; and &amp;lt;branch&amp;gt; are read from the &quot;remote&quot; and &quot;merge&quot; configuration for the current branch as set by &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt;&lt;code&gt;--track&lt;/code&gt;.</source>
          <target state="translated">&amp;lt;repository&amp;gt;および&amp;lt;branch&amp;gt;のデフォルト値は、&lt;a href=&quot;git-branch&quot;&gt;git-branch [1] &lt;/a&gt; &lt;code&gt;--track&lt;/code&gt; で設定された現在のブランチの「リモート」および「マージ」構成から読み取られます。</target>
        </trans-unit>
        <trans-unit id="83771af0d9e990cfd4209b40879c5dd720b86a4b" translate="yes" xml:space="preserve">
          <source>Defaults to false.</source>
          <target state="translated">デフォルトは false です。</target>
        </trans-unit>
        <trans-unit id="6daf684c4aa7d6effe6c46260cf795487441628a" translate="yes" xml:space="preserve">
          <source>Defaults to false. If this is set to a non zero number or true (identical to -1 or an unlimited number), the submodule summary will be enabled and a summary of commits for modified submodules will be shown (see --summary-limit option of &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;). Please note that the summary output command will be suppressed for all submodules when &lt;code&gt;diff.ignoreSubmodules&lt;/code&gt; is set to &lt;code&gt;all&lt;/code&gt; or only for those submodules where &lt;code&gt;submodule.&amp;lt;name&amp;gt;.ignore=all&lt;/code&gt;. The only exception to that rule is that status and commit will show staged submodule changes. To also view the summary for ignored submodules you can either use the --ignore-submodules=dirty command-line option or the &lt;code&gt;git submodule summary&lt;/code&gt; command, which shows a similar output but does not honor these settings.</source>
          <target state="translated">デフォルトはfalseです。これがゼロ以外の数値またはtrue（-1または無制限の数値と同じ）に設定されている場合、サブモジュールの要約が有効になり、変更されたサブモジュールのコミットの要約が表示されます（git-の--summary-limitオプションを&lt;a href=&quot;git-submodule&quot;&gt;参照） submodule [1]&lt;/a&gt;）。 &lt;code&gt;diff.ignoreSubmodules&lt;/code&gt; が &lt;code&gt;all&lt;/code&gt; に設定されている場合、または &lt;code&gt;submodule.&amp;lt;name&amp;gt;.ignore=all&lt;/code&gt; であるサブモジュールに対してのみ、サマリー出力コマンドが抑制されることに注意してください。そのルールの唯一の例外は、ステータスとコミットがステージングされたサブモジュールの変更を示すことです。無視されたサブモジュールの要約も表示するには、-ignore-submodules = dirtyコマンドラインオプションまたは &lt;code&gt;git submodule summary&lt;/code&gt; 使用できます。 コマンドは、同様の出力を表示しますが、これらの設定を尊重しません。</target>
        </trans-unit>
        <trans-unit id="c1010884442d5e06536e1ee0f4d961539164dc8e" translate="yes" xml:space="preserve">
          <source>Defines a URL from which the submodule repository can be cloned. This may be either an absolute URL ready to be passed to &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; or (if it begins with ./ or ../) a location relative to the superproject&amp;rsquo;s origin repository.</source>
          <target state="translated">サブモジュールリポジトリを複製できるURLを定義します。これは、&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]に&lt;/a&gt;渡す準備ができている絶対URLか、（./または../で始まる場合）スーパープロジェクトの元のリポジトリからの相対位置のいずれかです。</target>
        </trans-unit>
        <trans-unit id="7eec12b7977eefefa22fa2534e2c96073288e53c" translate="yes" xml:space="preserve">
          <source>Defines a human-readable name for a custom low-level merge driver. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">カスタムの低レベルマージドライバーの人間が読める名前を定義します。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e3e9ca6f11c09da4d43e81ad293147f43b5584aa" translate="yes" xml:space="preserve">
          <source>Defines how wide the commit message window is in the &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt;. &quot;75&quot; is the default.</source>
          <target state="translated">&lt;a href=&quot;git-gui&quot;&gt;git-gui [1]で&lt;/a&gt;のコミットメッセージウィンドウの幅を定義します。「75」がデフォルトです。</target>
        </trans-unit>
        <trans-unit id="8f256827cbc850fb3bdad834aa2364767d096745" translate="yes" xml:space="preserve">
          <source>Defines the action &lt;code&gt;git push&lt;/code&gt; should take if no refspec is explicitly given. Different values are well-suited for specific workflows; for instance, in a purely central workflow (i.e. the fetch source is equal to the push destination), &lt;code&gt;upstream&lt;/code&gt; is probably what you want. Possible values are:</source>
          <target state="translated">refspecが明示的に指定されていない場合に &lt;code&gt;git push&lt;/code&gt; が実行するアクションを定義します。さまざまな値が特定のワークフローに適しています。たとえば、純粋に中央のワークフロー（つまり、フェッチソースがプッシュ宛先と等しい）では、おそらく &lt;code&gt;upstream&lt;/code&gt; が必要です。可能な値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4188e24ee4c51e0130a50e687a2164cdec0105c9" translate="yes" xml:space="preserve">
          <source>Defines the command that implements a custom low-level merge driver. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">カスタムの低レベルマージドライバーを実装するコマンドを定義します。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="70c9d97cb193a6213d042cd9cd1b6638dde57f03" translate="yes" xml:space="preserve">
          <source>Defines the default update procedure for the named submodule, i.e. how the submodule is updated by &quot;git submodule update&quot; command in the superproject. This is only used by &lt;code&gt;git
submodule init&lt;/code&gt; to initialize the configuration variable of the same name. Allowed values here are &lt;code&gt;checkout&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;. See description of &lt;code&gt;update&lt;/code&gt; command in &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt; for their meaning. For security reasons, the &lt;code&gt;!command&lt;/code&gt; form is not accepted here.</source>
          <target state="translated">名前付きサブモジュールのデフォルトの更新手順、つまりスーパープロジェクトの「git submodule update」コマンドでサブモジュールを更新する方法を定義します。これは、同じ名前の構成変数を初期化するために &lt;code&gt;git submodule init&lt;/code&gt; のみ使用されます。ここで使用できる値は &lt;code&gt;checkout&lt;/code&gt; 、 &lt;code&gt;rebase&lt;/code&gt; 、 &lt;code&gt;merge&lt;/code&gt; または &lt;code&gt;none&lt;/code&gt; 。意味については、&lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1]&lt;/a&gt;の &lt;code&gt;update&lt;/code&gt; コマンドの説明を参照してください。セキュリティ上の理由から、ここでは &lt;code&gt;!command&lt;/code&gt; 形式は使用できません。</target>
        </trans-unit>
        <trans-unit id="90471e779c375b0a1c4452c6d06b08a0b6dc6757" translate="yes" xml:space="preserve">
          <source>Defines the path, relative to the top-level directory of the Git working tree, where the submodule is expected to be checked out. The path name must not end with a &lt;code&gt;/&lt;/code&gt;. All submodule paths must be unique within the .gitmodules file.</source>
          <target state="translated">サブモジュールがチェックアウトされると予想される、Git作業ツリーの最上位ディレクトリからの相対パスを定義します。パス名の末尾を &lt;code&gt;/&lt;/code&gt; にすることはできません。すべてのサブモジュールパスは、.gitmodulesファイル内で一意である必要があります。</target>
        </trans-unit>
        <trans-unit id="b4ca29387dcb9b04d487429eaa7be9fc96326e7a" translate="yes" xml:space="preserve">
          <source>Defines under what circumstances &quot;git status&quot; and the diff family show a submodule as modified. The following values are supported:</source>
          <target state="translated">git status&quot; と diff ファミリがどのような状況でサブモジュールを変更したと表示するかを定義します。以下の値がサポートされています。</target>
        </trans-unit>
        <trans-unit id="7943cfcce8d9f75d29b4fa34e3b6ac1f1de5b3ae" translate="yes" xml:space="preserve">
          <source>Defines under what circumstances &quot;git status&quot; and the diff family show a submodule as modified. When set to &quot;all&quot;, it will never be considered modified (but it will nonetheless show up in the output of status and commit when it has been staged), &quot;dirty&quot; will ignore all changes to the submodules work tree and takes only differences between the HEAD of the submodule and the commit recorded in the superproject into account. &quot;untracked&quot; will additionally let submodules with modified tracked files in their work tree show up. Using &quot;none&quot; (the default when this option is not set) also shows submodules that have untracked files in their work tree as changed. This setting overrides any setting made in .gitmodules for this submodule, both settings can be overridden on the command line by using the &quot;--ignore-submodules&quot; option. The &lt;code&gt;git submodule&lt;/code&gt; commands are not affected by this setting.</source>
          <target state="translated">「git status」とdiffファミリーがサブモジュールを変更済みとして表示する状況を定義します。 「すべて」に設定すると、変更されたとは見なされません（ただし、ステータスの出力に表示され、ステージングされたときにコミットされます）。サブモジュールのHEADとスーパープロジェクトに記録されたコミットの間。 「untracked」を使用すると、変更された追跡ファイルを含むサブモジュールが作業ツリーに表示されます。 &quot;none&quot;（このオプションが設定されていない場合のデフォルト）を使用すると、変更された作業ツリーに追跡されていないファイルがあるサブモジュールも表示されます。この設定は、このサブモジュールの.gitmodulesで行われた設定を上書きします。両方の設定は、コマンドラインで「--ignore-submodules &quot;オプション。 &lt;code&gt;git submodule&lt;/code&gt; コマンドは、この設定の影響を受けません。</target>
        </trans-unit>
        <trans-unit id="e1fef4851ecba56a95f304dccae2b919c9e6d073" translate="yes" xml:space="preserve">
          <source>Defines which attributes to assign to a path, similar to per-directory &lt;code&gt;.gitattributes&lt;/code&gt; files. See also: &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt;.</source>
          <target state="translated">ディレクトリ &lt;code&gt;.gitattributes&lt;/code&gt; ファイルと同様に、パスに割り当てる属性を定義します。&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="7011f57e8da17dd35f52484933047dc4fb201acb" translate="yes" xml:space="preserve">
          <source>Defines, together with branch.&amp;lt;name&amp;gt;.remote, the upstream branch for the given branch. It tells &lt;code&gt;git fetch&lt;/code&gt;/&lt;code&gt;git pull&lt;/code&gt;/&lt;code&gt;git rebase&lt;/code&gt; which branch to merge and can also affect &lt;code&gt;git push&lt;/code&gt; (see push.default). When in branch &amp;lt;name&amp;gt;, it tells &lt;code&gt;git fetch&lt;/code&gt; the default refspec to be marked for merging in FETCH_HEAD. The value is handled like the remote part of a refspec, and must match a ref which is fetched from the remote given by &quot;branch.&amp;lt;name&amp;gt;.remote&quot;. The merge information is used by &lt;code&gt;git pull&lt;/code&gt; (which at first calls &lt;code&gt;git fetch&lt;/code&gt;) to lookup the default branch for merging. Without this option, &lt;code&gt;git pull&lt;/code&gt; defaults to merge the first refspec fetched. Specify multiple values to get an octopus merge. If you wish to setup &lt;code&gt;git pull&lt;/code&gt; so that it merges into &amp;lt;name&amp;gt; from another branch in the local repository, you can point branch.&amp;lt;name&amp;gt;.merge to the desired branch, and use the relative path setting &lt;code&gt;.&lt;/code&gt; (a period) for branch.&amp;lt;name&amp;gt;.remote.</source>
          <target state="translated">指定されたブランチの上流ブランチを、branch。&amp;lt;name&amp;gt; .remoteとともに定義します。マージするブランチを &lt;code&gt;git fetch&lt;/code&gt; / &lt;code&gt;git pull&lt;/code&gt; / &lt;code&gt;git rebase&lt;/code&gt; に指示し、 &lt;code&gt;git push&lt;/code&gt; にも影響を与えることができます（push.defaultを参照）。ブランチ&amp;lt;name&amp;gt;にあるとき、それは &lt;code&gt;git fetch&lt;/code&gt; にFETCH_HEADでマージするためにマークされるデフォルトのrefspecを伝えます。値はrefspecのリモート部分のように処理され、 &quot;branch。&amp;lt;name&amp;gt; .remote&quot;で指定されたリモートからフェッチされる参照と一致する必要があります。マージ情報は、 &lt;code&gt;git pull&lt;/code&gt; （最初は &lt;code&gt;git fetch&lt;/code&gt; を呼び出す）によって使用され、マージ用のデフォルトのブランチを検索します。このオプションがない場合、 &lt;code&gt;git pull&lt;/code&gt; デフォルトでは、最初にフェッチされたrefspecをマージします。タコのマージを取得するには、複数の値を指定します。ローカルリポジトリの別のブランチから&amp;lt;name&amp;gt;にマ​​ージするように &lt;code&gt;git pull&lt;/code&gt; を設定する場合は、branch。&amp;lt;name&amp;gt; .mergeに目的のブランチをポイントし、相対パス設定を使用できます &lt;code&gt;.&lt;/code&gt; （ピリオド）for branch。&amp;lt;name&amp;gt; .remote。</target>
        </trans-unit>
        <trans-unit id="f11af95383d16d6bd1e7925886e81b428b4cbfea" translate="yes" xml:space="preserve">
          <source>Defining a custom hunk-header</source>
          <target state="translated">カスタムハンクヘッダの定義</target>
        </trans-unit>
        <trans-unit id="ca3594ffd9ab11c72c2e8d78b4c8b59973682e4f" translate="yes" xml:space="preserve">
          <source>Defining a custom merge driver</source>
          <target state="translated">カスタム マージ ドライバの定義</target>
        </trans-unit>
        <trans-unit id="9708d6426545c2cece09aff33765fae2b095ca8b" translate="yes" xml:space="preserve">
          <source>Defining an external diff driver</source>
          <target state="translated">外部差分ドライバの定義</target>
        </trans-unit>
        <trans-unit id="c0c022d1a19819ea36656f34517c46cf40cc0616" translate="yes" xml:space="preserve">
          <source>Defining macro attributes</source>
          <target state="translated">マクロ属性の定義</target>
        </trans-unit>
        <trans-unit id="b40047a3b93162ae49d16e0fd58c1fcd8942970b" translate="yes" xml:space="preserve">
          <source>Deinitialized submodule: A &lt;code&gt;gitlink&lt;/code&gt;, and a &lt;code&gt;.gitmodules&lt;/code&gt; entry, but no submodule working directory. The submodule&amp;rsquo;s Git directory may be there as after deinitializing the Git directory is kept around. The directory which is supposed to be the working directory is empty instead.</source>
          <target state="translated">非初期化されたサブモジュール： &lt;code&gt;gitlink&lt;/code&gt; と &lt;code&gt;.gitmodules&lt;/code&gt; エントリ。ただし、サブモジュールの作業ディレクトリはありません。サブモジュールのGitディレクトリは、Gitディレクトリを初期化解除した後も保持されるため、そこにある可能性があります。代わりに、作業ディレクトリになるはずのディレクトリが空です。</target>
        </trans-unit>
        <trans-unit id="b4c200bb0d1f7ba2b7c3e166470a4cb39be0daab" translate="yes" xml:space="preserve">
          <source>Delay</source>
          <target state="translated">Delay</target>
        </trans-unit>
        <trans-unit id="ce169dc044a35b855e4edb1b1a97682afa804f83" translate="yes" xml:space="preserve">
          <source>Delete &amp;lt;ref&amp;gt; after verifying it exists with &amp;lt;oldvalue&amp;gt;, if given. If given, &amp;lt;oldvalue&amp;gt; may not be zero.</source>
          <target state="translated">&amp;lt;ref&amp;gt;が指定されている場合は、&amp;lt;oldvalue&amp;gt;で存在を確認してから削除します。指定されている場合、&amp;lt;oldvalue&amp;gt;はゼロであってはなりません。</target>
        </trans-unit>
        <trans-unit id="4a38bab2ae9dd8b2cb4a0dc3ff8ff31445d9e605" translate="yes" xml:space="preserve">
          <source>Delete a branch. The branch must be fully merged in its upstream branch, or in &lt;code&gt;HEAD&lt;/code&gt; if no upstream was set with &lt;code&gt;--track&lt;/code&gt; or &lt;code&gt;--set-upstream-to&lt;/code&gt;.</source>
          <target state="translated">ブランチを削除します。ブランチは、上流のブランチ、または &lt;code&gt;--track&lt;/code&gt; または &lt;code&gt;--set-upstream-to&lt;/code&gt; で上流が設定されていない場合は &lt;code&gt;HEAD&lt;/code&gt; で完全にマージする必要があります。</target>
        </trans-unit>
        <trans-unit id="e9f3df8cb2d062f0173b4dadd305c9e0eadc7f1f" translate="yes" xml:space="preserve">
          <source>Delete an unneeded branch</source>
          <target state="translated">不要なブランチを削除する</target>
        </trans-unit>
        <trans-unit id="3627df6f5c316b48c9a0e828b45ee4b23f9a149d" translate="yes" xml:space="preserve">
          <source>Delete existing replace refs for the given objects.</source>
          <target state="translated">与えられたオブジェクトの既存の置換参照を削除します。</target>
        </trans-unit>
        <trans-unit id="6b8d128c004ee953175f88ab766106d4cfa01d06" translate="yes" xml:space="preserve">
          <source>Delete existing tags with the given names.</source>
          <target state="translated">与えられた名前で既存のタグを削除します。</target>
        </trans-unit>
        <trans-unit id="ec34ecd3e43b7835223d180bb5b62d7a1f50ff85" translate="yes" xml:space="preserve">
          <source>Delete the &quot;test&quot; branch even if the &quot;master&quot; branch (or whichever branch is currently checked out) does not have all commits from the test branch.</source>
          <target state="translated">master&quot; ブランチ (または現在チェックアウトされているブランチ)に test ブランチからのすべてのコミットがない場合でも、&quot;test&quot; ブランチを削除します。</target>
        </trans-unit>
        <trans-unit id="5060fa25753a50b8acf6be2071a5d6f5afc4acd3" translate="yes" xml:space="preserve">
          <source>Delete the pack-files that are tracked by the MIDX file, but have no objects referenced by the MIDX. Rewrite the MIDX file afterward to remove all references to these pack-files.</source>
          <target state="translated">MIDXファイルによって追跡されているが、MIDXによって参照されているオブジェクトを持たないパック・ファイルを削除します。これらのパック・ファイルへのすべての参照を削除するために、MIDXファイルを書き換えてください。</target>
        </trans-unit>
        <trans-unit id="34a0e7fb9687c81637f401d26cc5a141535336e8" translate="yes" xml:space="preserve">
          <source>Delete the remote-tracking branches &quot;todo&quot;, &quot;html&quot; and &quot;man&quot;. The next &lt;code&gt;fetch&lt;/code&gt; or &lt;code&gt;pull&lt;/code&gt; will create them again unless you configure them not to. See &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;.</source>
          <target state="translated">リモート追跡ブランチ「todo」、「html」、および「man」を削除します。それらを構成しない限り、次の &lt;code&gt;fetch&lt;/code&gt; または &lt;code&gt;pull&lt;/code&gt; 再度作成されます。&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="48060c17f13289e334a3727f4f1de95de800b004" translate="yes" xml:space="preserve">
          <source>Delete the symbolic ref &amp;lt;name&amp;gt;.</source>
          <target state="translated">シンボリック参照&amp;lt;name&amp;gt;を削除します。</target>
        </trans-unit>
        <trans-unit id="0b8a7c3943e03f2a2e8f697e98962af3bfbc2534" translate="yes" xml:space="preserve">
          <source>Deleted submodule: A submodule can be deleted by running &lt;code&gt;git rm &amp;lt;submodule path&amp;gt; &amp;amp;&amp;amp; git commit&lt;/code&gt;. This can be undone using &lt;code&gt;git revert&lt;/code&gt;.</source>
          <target state="translated">削除されたサブモジュール： &lt;code&gt;git rm &amp;lt;submodule path&amp;gt; &amp;amp;&amp;amp; git commit&lt;/code&gt; 実行すると、サブモジュールを削除できます。これは &lt;code&gt;git revert&lt;/code&gt; を使用して元に戻すことができます。</target>
        </trans-unit>
        <trans-unit id="bbae550cd78e8e22873a526e5dae0892e13b85e4" translate="yes" xml:space="preserve">
          <source>Deletes stale references associated with &amp;lt;name&amp;gt;. By default, stale remote-tracking branches under &amp;lt;name&amp;gt; are deleted, but depending on global configuration and the configuration of the remote we might even prune local tags that haven&amp;rsquo;t been pushed there. Equivalent to &lt;code&gt;git
fetch --prune &amp;lt;name&amp;gt;&lt;/code&gt;, except that no new references will be fetched.</source>
          <target state="translated">&amp;lt;name&amp;gt;に関連付けられた古い参照を削除します。デフォルトでは、&amp;lt;name&amp;gt;の下にある古いリモート追跡ブランチは削除されますが、グローバル構成とリモートの構成によっては、そこにプッシュされていないローカルタグをプルーニングすることもあります。同等の &lt;code&gt;git fetch --prune &amp;lt;name&amp;gt;&lt;/code&gt; 、新しい参照がフェッチされないことを除いて。</target>
        </trans-unit>
        <trans-unit id="24d8888ac9265ebf12b5751431da3b3a66a3bc35" translate="yes" xml:space="preserve">
          <source>Delimited format</source>
          <target state="translated">区切りのある形式</target>
        </trans-unit>
        <trans-unit id="b2cf66f0df0d42ad5ab4aaeb19f2b65bda3f8e44" translate="yes" xml:space="preserve">
          <source>Delta compression will not be attempted for blobs for paths with the attribute &lt;code&gt;delta&lt;/code&gt; set to false.</source>
          <target state="translated">属性 &lt;code&gt;delta&lt;/code&gt; がfalseに設定されているパスのblobに対して、デルタ圧縮は試行されません。</target>
        </trans-unit>
        <trans-unit id="06d8459b781df550338ff8874296d04e07653551" translate="yes" xml:space="preserve">
          <source>Delta islands</source>
          <target state="translated">デルタ諸島</target>
        </trans-unit>
        <trans-unit id="1c00a92357090dcc2a4a087a5faeaa3dd4ef60a6" translate="yes" xml:space="preserve">
          <source>Delta islands solve this problem by allowing you to group your refs into distinct &quot;islands&quot;. Pack-objects computes which objects are reachable from which islands, and refuses to make a delta from an object &lt;code&gt;A&lt;/code&gt; against a base which is not present in all of &lt;code&gt;A&lt;/code&gt;'s islands. This results in slightly larger packs (because we miss some delta opportunities), but guarantees that a fetch of one island will not have to recompute deltas on the fly due to crossing island boundaries.</source>
          <target state="translated">デルタアイランドは、参照を個別の「アイランド」にグループ化できるようにすることで、この問題を解決します。Pack-objectsは、どのオブジェクトがどのアイランドから到達可能かを計算し、すべての &lt;code&gt;A&lt;/code&gt; のアイランドに存在しないベースに対して、オブジェクト &lt;code&gt;A&lt;/code&gt; からのデルタの作成を拒否します。これにより、パックが若干大きくなります（デルタの機会を逃しているため）。ただし、アイランドの境界を超えているため、1つのアイランドのフェッチでデルタをその場で再計算する必要がないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="89e6ba5af92c1476da557467d420cb383ed75bc2" translate="yes" xml:space="preserve">
          <source>Deltified representation</source>
          <target state="translated">ディルト化された表現</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="fcd6a0d5490f96a9ee2d3abff638da71da537fbf" translate="yes" xml:space="preserve">
          <source>Depending on the operation, git will use one of the following refspecs, if you don&amp;rsquo;t provide one on the command line. &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; is the name of this file in &lt;code&gt;$GIT_DIR/branches&lt;/code&gt; and &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; defaults to &lt;code&gt;master&lt;/code&gt;.</source>
          <target state="translated">コマンドラインで指定しない場合、操作に応じて、gitは次のrefspecのいずれかを使用します。 &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; は &lt;code&gt;$GIT_DIR/branches&lt;/code&gt; 内のこのファイルの名前で、 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; はデフォルトで &lt;code&gt;master&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ea16e3702c686bd547a284907194ee7b4ffac191" translate="yes" xml:space="preserve">
          <source>Depot path syntax</source>
          <target state="translated">デポパス構文</target>
        </trans-unit>
        <trans-unit id="1983f893b78285086fe35838f9f2f81d38d4d745" translate="yes" xml:space="preserve">
          <source>Deprecated alias for &lt;code&gt;sendemail.signedoffbycc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sendemail.signedoffbycc&lt;/code&gt; の非推奨のエイリアス。</target>
        </trans-unit>
        <trans-unit id="05b4a62238617bb5a4be973f552dc324fff173a4" translate="yes" xml:space="preserve">
          <source>Deprecated alias for &lt;code&gt;sendemail.smtpEncryption = ssl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sendemail.smtpEncryption = ssl&lt;/code&gt; 推奨のエイリアス。</target>
        </trans-unit>
        <trans-unit id="a4db2bebc38aa1316eeea066286d1da6378d7b28" translate="yes" xml:space="preserve">
          <source>Deprecated alias for &lt;code&gt;versionsort.suffix&lt;/code&gt;. Ignored if &lt;code&gt;versionsort.suffix&lt;/code&gt; is set.</source>
          <target state="translated">&lt;code&gt;versionsort.suffix&lt;/code&gt; の非推奨のエイリアス。 &lt;code&gt;versionsort.suffix&lt;/code&gt; が設定されている場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="d156ce209204264f931768dbe9676b2798b77199" translate="yes" xml:space="preserve">
          <source>Deprecated synonym for &lt;code&gt;find-renames=&amp;lt;n&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;find-renames=&amp;lt;n&amp;gt;&lt;/code&gt; の非推奨の同義語。</target>
        </trans-unit>
        <trans-unit id="f08e2766ccb54250d4b3556b2590b15bf5d66a82" translate="yes" xml:space="preserve">
          <source>Dereference tags into object IDs as well. They will be shown with &quot;^{}&quot; appended.</source>
          <target state="translated">タグをオブジェクトIDにも参照解除します。これらは&quot;^{}&quot;を付加して表示されます。</target>
        </trans-unit>
        <trans-unit id="19ab5a2b07f917835d2a43707ceb85ed7b98a04e" translate="yes" xml:space="preserve">
          <source>Describe the patterns in the sparse-checkout file.</source>
          <target state="translated">スパースチェックアウトファイルのパターンを記述してください。</target>
        </trans-unit>
        <trans-unit id="3adaea2f7c94d999c480c31a9d97431cd4a29972" translate="yes" xml:space="preserve">
          <source>Describe the state of the working tree. When the working tree matches HEAD, the output is the same as &quot;git describe HEAD&quot;. If the working tree has local modification &quot;-dirty&quot; is appended to it. If a repository is corrupt and Git cannot determine if there is local modification, Git will error out, unless &amp;lsquo;--broken&amp;rsquo; is given, which appends the suffix &quot;-broken&quot; instead.</source>
          <target state="translated">作業ツリーの状態を説明します。作業ツリーがHEADに一致する場合、出力は「git describe HEAD」と同じです。作業ツリーにローカル変更がある場合は、「-dirty」が追加されます。リポジトリが破損していて、Gitがローカルの変更があるかどうかを判断できない場合、「-broken」が指定されていない限り、Gitはエラーになります。代わりに「-broken」というサフィックスが追加されます。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="d6cee108138bd9a1ce855b1d73c719745374ce44" translate="yes" xml:space="preserve">
          <source>Design details</source>
          <target state="translated">設計内容</target>
        </trans-unit>
        <trans-unit id="7e2d8329f700e85ec6f60947dd853588b3fee1c7" translate="yes" xml:space="preserve">
          <source>Designed with http and stateless-rpc in mind. With clear flush semantics the http remote helper can simply act as a proxy</source>
          <target state="translated">http と stateless-rpc を念頭に置いて設計されています。明確なフラッシュセマンティクスにより、http リモートヘルパーは単にプロキシとして振る舞うことができます。</target>
        </trans-unit>
        <trans-unit id="a30dd6eb385d802e85851897aa84247984d6f5fe" translate="yes" xml:space="preserve">
          <source>Detach from the shell. Implies --syslog.</source>
          <target state="translated">シェルから切り離します。syslogを意味します。</target>
        </trans-unit>
        <trans-unit id="e5497c96dfd8b989db42ae40a552822ac0beda8b" translate="yes" xml:space="preserve">
          <source>Detached head</source>
          <target state="translated">分離ヘッド</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="67aa19cf55a723bbb26944cac78345fab055b208" translate="yes" xml:space="preserve">
          <source>Detect copies as well as renames. See also &lt;code&gt;--find-copies-harder&lt;/code&gt;. If &lt;code&gt;n&lt;/code&gt; is specified, it has the same meaning as for &lt;code&gt;-M&amp;lt;n&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">コピーと名前の変更を検出します。 &lt;code&gt;--find-copies-harder&lt;/code&gt; も参照してください。もし &lt;code&gt;n&lt;/code&gt; は指定されて、それがためのものと同じ意味を持つ &lt;code&gt;-M&amp;lt;n&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01c2501577dd3675d86bed17ffb08591c732fcb7" translate="yes" xml:space="preserve">
          <source>Detect copies harder. See &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;. A boolean.</source>
          <target state="translated">より強力にコピーを検出します。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]を&lt;/a&gt;参照してください。ブール。</target>
        </trans-unit>
        <trans-unit id="1b3059b4d74c2df5e3146bf7b20891041e88ba9a" translate="yes" xml:space="preserve">
          <source>Detect copies. See &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;. This can be true, false, or a score as expected by &lt;code&gt;git diff -C&lt;/code&gt;.</source>
          <target state="translated">コピーを検出します。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]を&lt;/a&gt;参照してください。これは、true、false、または &lt;code&gt;git diff -C&lt;/code&gt; で予想されるスコアになります。</target>
        </trans-unit>
        <trans-unit id="1070111ce881d033aa11a2603f524ec35d0cf5af" translate="yes" xml:space="preserve">
          <source>Detect moved or copied lines within a file. When a commit moves or copies a block of lines (e.g. the original file has A and then B, and the commit changes it to B and then A), the traditional &lt;code&gt;blame&lt;/code&gt; algorithm notices only half of the movement and typically blames the lines that were moved up (i.e. B) to the parent and assigns blame to the lines that were moved down (i.e. A) to the child commit. With this option, both groups of lines are blamed on the parent by running extra passes of inspection.</source>
          <target state="translated">ファイル内で移動またはコピーされた行を検出します。コミットが行のブロックを移動またはコピーする場合（たとえば、元のファイルにAとBがあり、コミットがそれをBとAに変更した場合）、従来の &lt;code&gt;blame&lt;/code&gt; アルゴリズムは移動の半分のみを認識し、通常は親に移動（つまりB）し、子コミットに下に移動（つまりA）した行に非難を割り当てます。このオプションを使用すると、追加の検査パスを実行することにより、両方の行グループが親を非難します。</target>
        </trans-unit>
        <trans-unit id="1b96566ef127f8d019345c2f29a72c790e874b75" translate="yes" xml:space="preserve">
          <source>Detect renames. If &lt;code&gt;n&lt;/code&gt; is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file&amp;rsquo;s size). For example, &lt;code&gt;-M90%&lt;/code&gt; means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn&amp;rsquo;t changed. Without a &lt;code&gt;%&lt;/code&gt; sign, the number is to be read as a fraction, with a decimal point before it. I.e., &lt;code&gt;-M5&lt;/code&gt; becomes 0.5, and is thus the same as &lt;code&gt;-M50%&lt;/code&gt;. Similarly, &lt;code&gt;-M05&lt;/code&gt; is the same as &lt;code&gt;-M5%&lt;/code&gt;. To limit detection to exact renames, use &lt;code&gt;-M100%&lt;/code&gt;. The default similarity index is 50%.</source>
          <target state="translated">名前の変更を検出します。 &lt;code&gt;n&lt;/code&gt; が指定されている場合、それは類似性インデックス（つまり、ファイルのサイズと比較した追加/削除の量）のしきい値です。たとえば、 &lt;code&gt;-M90%&lt;/code&gt; は、ファイルの90％以上が変更されていない場合、Gitが削除/追加ペアを名前変更と見なす必要があることを意味します。 &lt;code&gt;%&lt;/code&gt; 記号を使用しない場合、数値は小数部として読み取られ、その前に小数点が付きます。 &lt;code&gt;-M5&lt;/code&gt; 、-M5は0.5になるため、 &lt;code&gt;-M50%&lt;/code&gt; と同じです。同様に、 &lt;code&gt;-M05&lt;/code&gt; は &lt;code&gt;-M5%&lt;/code&gt; と同じです。検出を完全な名前変更に制限するには、 &lt;code&gt;-M100%&lt;/code&gt; を使用します。デフォルトの類似性インデックスは50％です。</target>
        </trans-unit>
        <trans-unit id="6d7e84e2caa06e6a8098c62271376428c6e7bd4b" translate="yes" xml:space="preserve">
          <source>Detect renames. See &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;. Renames will be represented in p4 using explicit &lt;code&gt;move&lt;/code&gt; operations. There is no corresponding option to detect copies, but there are variables for both moves and copies.</source>
          <target state="translated">名前の変更を検出します。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]を&lt;/a&gt;参照してください。名前の変更は、明示的な &lt;code&gt;move&lt;/code&gt; 操作を使用してp4で表されます。コピーを検出するための対応するオプションはありませんが、移動とコピーの両方に変数があります。</target>
        </trans-unit>
        <trans-unit id="5ffd73e1a52e577bf08689eed36f6c4de2377e40" translate="yes" xml:space="preserve">
          <source>Detect renames. See &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;. This can be true, false, or a score as expected by &lt;code&gt;git diff -M&lt;/code&gt;.</source>
          <target state="translated">名前の変更を検出します。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]を&lt;/a&gt;参照してください。これは、true、false、または &lt;code&gt;git diff -M&lt;/code&gt; で予想されるスコアになります。</target>
        </trans-unit>
        <trans-unit id="4eef9174ad5648c91981effc420fca59fc15dfb0" translate="yes" xml:space="preserve">
          <source>Determine the reference name to use for a new branch:</source>
          <target state="translated">新しいブランチに使用する参照名を決定します。</target>
        </trans-unit>
        <trans-unit id="2fd1f63eeed6a134512b420d9c8a0d335169ab6d" translate="yes" xml:space="preserve">
          <source>Determine whether there are commits in &lt;code&gt;&amp;lt;head&amp;gt;..&amp;lt;upstream&amp;gt;&lt;/code&gt; that are equivalent to those in the range &lt;code&gt;&amp;lt;limit&amp;gt;..&amp;lt;head&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;limit&amp;gt;..&amp;lt;head&amp;gt;&lt;/code&gt; の範囲のコミットと同等のコミットが &lt;code&gt;&amp;lt;head&amp;gt;..&amp;lt;upstream&amp;gt;&lt;/code&gt; にあるかどうかを判別します。</target>
        </trans-unit>
        <trans-unit id="c3dd19e2791ee2ded730804490298d3d980bfa4d" translate="yes" xml:space="preserve">
          <source>Determines if &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt; should trust the file modification timestamp or not. By default the timestamps are not trusted.</source>
          <target state="translated">&lt;a href=&quot;git-gui&quot;&gt;git-gui [1]&lt;/a&gt;がファイル変更タイムスタンプを信頼するかどうかを決定します。デフォルトでは、タイムスタンプは信頼されていません。</target>
        </trans-unit>
        <trans-unit id="e154fe8e767c839e2059b235fd308381f6d8cea3" translate="yes" xml:space="preserve">
          <source>Determines if &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt; shows untracked files in the file list. The default is &quot;true&quot;.</source>
          <target state="translated">&lt;a href=&quot;git-gui&quot;&gt;git-gui [1]&lt;/a&gt;が追跡されていないファイルをファイルリストに表示するかどうかを決定します。デフォルトは「true」です。</target>
        </trans-unit>
        <trans-unit id="3f3ff5df4fcb4c5f3c82bb56b168b10367f53dcc" translate="yes" xml:space="preserve">
          <source>Determines if new branches created with &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt; should default to tracking remote branches with matching names or not. Default: &quot;false&quot;.</source>
          <target state="translated">&lt;a href=&quot;git-gui&quot;&gt;git-gui [1]で&lt;/a&gt;作成された新しいブランチが、デフォルトで一致する名前のリモートブランチを追跡するかどうかを決定します。デフォルト： &quot;false&quot;。</target>
        </trans-unit>
        <trans-unit id="2f06095b37712166bde39a43d96d1f0785678946" translate="yes" xml:space="preserve">
          <source>Determines what to do about the untracked cache feature of the index. It will be kept, if this variable is unset or set to &lt;code&gt;keep&lt;/code&gt;. It will automatically be added if set to &lt;code&gt;true&lt;/code&gt;. And it will automatically be removed, if set to &lt;code&gt;false&lt;/code&gt;. Before setting it to &lt;code&gt;true&lt;/code&gt;, you should check that mtime is working properly on your system. See &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;. &lt;code&gt;keep&lt;/code&gt; by default, unless &lt;code&gt;feature.manyFiles&lt;/code&gt; is enabled which sets this setting to &lt;code&gt;true&lt;/code&gt; by default.</source>
          <target state="translated">インデックスの追跡されていないキャッシュ機能をどうするかを決定します。この変数が未設定または &lt;code&gt;keep&lt;/code&gt; に設定されている場合は、保持されます。 &lt;code&gt;true&lt;/code&gt; に設定すると、自動的に追加されます。また、 &lt;code&gt;false&lt;/code&gt; に設定すると、自動的に削除されます。 &lt;code&gt;true&lt;/code&gt; に設定する前に、mtimeがシステムで適切に動作していることを確認する必要があります。&lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]を&lt;/a&gt;参照してください。この設定をデフォルトで &lt;code&gt;true&lt;/code&gt; に設定する &lt;code&gt;feature.manyFiles&lt;/code&gt; が有効になっていない限り、デフォルトで &lt;code&gt;keep&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="64ca3fdabc3574a39df154eb5758766a9b3dabde" translate="yes" xml:space="preserve">
          <source>Developing against a shared repository</source>
          <target state="translated">共有リポジトリに対する開発</target>
        </trans-unit>
        <trans-unit id="4359a6a8e374a18f2b4c156842b9c3a0fec4c744" translate="yes" xml:space="preserve">
          <source>Developing with git</source>
          <target state="translated">git での開発</target>
        </trans-unit>
        <trans-unit id="a7a451f70e401e1b204facb3a3e4f97e68c2b291" translate="yes" xml:space="preserve">
          <source>Development cost</source>
          <target state="translated">開発費</target>
        </trans-unit>
        <trans-unit id="a2efcf35d137bb5a7503ecfbad3617a7e3a45807" translate="yes" xml:space="preserve">
          <source>Die if the pack contains broken links. For internal use only.</source>
          <target state="translated">パックにリンク切れが含まれていると死ぬ。内部での使用に限ります。</target>
        </trans-unit>
        <trans-unit id="c1ab34d973a0a532c231ce665c73c7ea8acc0a78" translate="yes" xml:space="preserve">
          <source>Die if the pack contains broken objects. For internal use only.</source>
          <target state="translated">パックに壊れたオブジェクトが含まれている場合は死亡します。内部でのみ使用します。</target>
        </trans-unit>
        <trans-unit id="d986c34724963dfe3d695e6191fc573a97f2025e" translate="yes" xml:space="preserve">
          <source>Die with error code != 0 when a reference is undefined, instead of printing &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">エラーコードで死ぬ！参照が定義されていない= 0、代わりに印刷 &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78795c9d90cdad9316079a8696dae908d814a635" translate="yes" xml:space="preserve">
          <source>Die, if the pack contains broken objects or links.</source>
          <target state="translated">パックに壊れたオブジェクトやリンクが含まれている場合は死亡します。</target>
        </trans-unit>
        <trans-unit id="98ae64918b361ad15c4c43eb611e71c996a3c9bc" translate="yes" xml:space="preserve">
          <source>Die, if the pack is larger than &amp;lt;size&amp;gt;.</source>
          <target state="translated">パックが&amp;lt;size&amp;gt;より大きい場合は死にます。</target>
        </trans-unit>
        <trans-unit id="cd98a991a043eaea48f8e37b61339dac2bfa9ec4" translate="yes" xml:space="preserve">
          <source>Diff Formatting</source>
          <target state="translated">デフフォーマット</target>
        </trans-unit>
        <trans-unit id="de7932e0191749b8b9963fe2d05250ad20e02e5f" translate="yes" xml:space="preserve">
          <source>Diff against the &quot;base&quot; version, &quot;our branch&quot; or &quot;their branch&quot; respectively. With these options, diffs for merged entries are not shown.</source>
          <target state="translated">それぞれ &quot;ベース&quot; バージョン、&quot;私たちのブランチ&quot; または &quot;彼らのブランチ&quot; との差分を表示します。これらのオプションを指定した場合、マージされたエントリの差分は表示されません。</target>
        </trans-unit>
        <trans-unit id="d39943b940373b977991e15fc719e23de47c6ceb" translate="yes" xml:space="preserve">
          <source>Diff format for merges</source>
          <target state="translated">マージのための Diff フォーマット</target>
        </trans-unit>
        <trans-unit id="654f69ec27f8d4e0f2ecb2d08ba20e4caaa5cbd4" translate="yes" xml:space="preserve">
          <source>Diff is shown using the specified diff driver. Each driver may specify one or more options, as described in the following section. The options for the diff driver &quot;foo&quot; are defined by the configuration variables in the &quot;diff.foo&quot; section of the Git config file.</source>
          <target state="translated">Diff は、指定された diff ドライバを使用して表示されます。それぞれのドライバには、次のセクションで説明するようにひとつ以上のオプションを指定することができます。diff ドライバ &quot;foo&quot; のオプションは、Git 設定ファイルの &quot;diff.foo&quot; セクションの設定変数で定義します。</target>
        </trans-unit>
        <trans-unit id="e9752af49676495496d54c49d4451c932889ab3e" translate="yes" xml:space="preserve">
          <source>Diffcore-break: for splitting up complete rewrites</source>
          <target state="translated">Diffcore-break:完全なリライトを分割するために</target>
        </trans-unit>
        <trans-unit id="f8cbeab8828f936b2faf8e2c773445ac763403ab" translate="yes" xml:space="preserve">
          <source>Diffcore-merge-broken: for putting complete rewrites back together</source>
          <target state="translated">Diffcor-merge-broken:完全なリライトを元に戻すために</target>
        </trans-unit>
        <trans-unit id="037fc9af4089dca681837ff54ffb59e13b625177" translate="yes" xml:space="preserve">
          <source>Diffcore-order: for sorting the output based on filenames</source>
          <target state="translated">Diffcore-order:ファイル名に基づいて出力をソートします。</target>
        </trans-unit>
        <trans-unit id="93ec538cb6f31f250a629fbfef107579093c9275" translate="yes" xml:space="preserve">
          <source>Diffcore-pickaxe: for detecting addition/deletion of specified string</source>
          <target state="translated">Diffcore-pickaxe:指定された文字列の追加/削除を検出するためのもの</target>
        </trans-unit>
        <trans-unit id="be51b7621711d155d6251fd428e07de999420e36" translate="yes" xml:space="preserve">
          <source>Diffcore-rename: for detecting renames and copies</source>
          <target state="translated">Diffcore-rename:リネームやコピーを検出するための</target>
        </trans-unit>
        <trans-unit id="339450e1f1c9c473dd2ab70ee2a31028e8f96d6e" translate="yes" xml:space="preserve">
          <source>Directed acyclic graph. The &lt;a href=&quot;#def_commit_object&quot;&gt;commit objects&lt;/a&gt; form a directed acyclic graph, because they have parents (directed), and the graph of commit objects is acyclic (there is no &lt;a href=&quot;#def_chain&quot;&gt;chain&lt;/a&gt; which begins and ends with the same &lt;a href=&quot;#def_object&quot;&gt;object&lt;/a&gt;).</source>
          <target state="translated">有向非循環グラフ。&lt;a href=&quot;#def_commit_object&quot;&gt;オブジェクトがコミット&lt;/a&gt;それらは親（有向）を有し、及びコミットオブジェクトのグラフは、（全く存在しない非環式であるため、非循環有向グラフを形成する&lt;a href=&quot;#def_chain&quot;&gt;鎖&lt;/a&gt;と同じで始まり、終了&lt;a href=&quot;#def_object&quot;&gt;オブジェクトが&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="c625315e724838d98d1c1aabd8894d579826b898" translate="yes" xml:space="preserve">
          <source>Directly insert the specified info into the index. For backward compatibility, you can also give these three arguments as three separate parameters, but new users are encouraged to use a single-parameter form.</source>
          <target state="translated">指定した情報を直接インデックスに挿入します。後方互換性のために、これら3つの引数を3つの別々のパラメータとして指定することもできますが、新規ユーザはシングルパラメータ形式を使用することを推奨します。</target>
        </trans-unit>
        <trans-unit id="9885bf10483d3b24cb6bcd826a7eb7299ae266e3" translate="yes" xml:space="preserve">
          <source>Directory in which to place the individual messages.</source>
          <target state="translated">個々のメッセージを配置するディレクトリ。</target>
        </trans-unit>
        <trans-unit id="bdcdfee6c90a03fd94f3c634dadb758ff39de642" translate="yes" xml:space="preserve">
          <source>Directory rename detection</source>
          <target state="translated">ディレクトリ名の変更検出</target>
        </trans-unit>
        <trans-unit id="0c0e7bc3f2d3ebf022d4ca57e3f30fa5aada7044" translate="yes" xml:space="preserve">
          <source>Directory rename heuristics are enabled in the merge and interactive backends. Due to the lack of accurate tree information, directory rename detection is disabled in the am backend.</source>
          <target state="translated">マージバックエンドとインタラクティブバックエンドでディレクトリ名変更ヒューリスティックが有効になりました。正確なツリー情報がないため、 am バックエンドではディレクトリ名変更の検出が無効になっています。</target>
        </trans-unit>
        <trans-unit id="8016592b1dadffa6a4ff10aa4ea912d754ba679a" translate="yes" xml:space="preserve">
          <source>Disable SMTP authentication. Short hand for &lt;code&gt;--smtp-auth=none&lt;/code&gt;</source>
          <target state="translated">SMTP認証を無効にします。以下のための短い手 &lt;code&gt;--smtp-auth=none&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8effb38233ed8f993bad8ba7def3e4c7198d5381" translate="yes" xml:space="preserve">
          <source>Disable all charset re-coding of the metadata.</source>
          <target state="translated">メタデータのすべての文字セット再符号化を無効にします。</target>
        </trans-unit>
        <trans-unit id="bff793fc9150fa9cc2d296006f1d7ecf24724c75" translate="yes" xml:space="preserve">
          <source>Disable all logging.</source>
          <target state="translated">すべてのログを無効にします。</target>
        </trans-unit>
        <trans-unit id="6a02367b3dfa3269f43aabd8b369dc39498517bc" translate="yes" xml:space="preserve">
          <source>Disable all output of the program. Implies &lt;code&gt;--exit-code&lt;/code&gt;.</source>
          <target state="translated">プログラムのすべての出力を無効にします。意味 &lt;code&gt;--exit-code&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65ffdeb8d93ba1775007aefed8ede380f65dc5fc" translate="yes" xml:space="preserve">
          <source>Disable recursive fetching of submodules (this has the same effect as using the &lt;code&gt;--recurse-submodules=no&lt;/code&gt; option).</source>
          <target state="translated">サブモジュールの再帰的なフェッチを無効にします（これは &lt;code&gt;--recurse-submodules=no&lt;/code&gt; オプションを使用するのと同じ効果があります）。</target>
        </trans-unit>
        <trans-unit id="9197fea967c3dddcae2815fd5c61af7013500ac4" translate="yes" xml:space="preserve">
          <source>Disable sparse checkout support even if &lt;code&gt;core.sparseCheckout&lt;/code&gt; is true.</source>
          <target state="translated">&lt;code&gt;core.sparseCheckout&lt;/code&gt; がtrueの場合でも、スパースチェックアウトサポートを無効にします。</target>
        </trans-unit>
        <trans-unit id="90bc67ccb52fc4f00ea5bb7d3ea677b5d866b7a3" translate="yes" xml:space="preserve">
          <source>Disable the &lt;code&gt;core.sparseCheckout&lt;/code&gt; config setting, and restore the working directory to include all files. Leaves the sparse-checkout file intact so a later &lt;code&gt;git sparse-checkout init&lt;/code&gt; command may return the working directory to the same state.</source>
          <target state="translated">&lt;code&gt;core.sparseCheckout&lt;/code&gt; 構成設定を無効にし、作業ディレクトリを復元してすべてのファイルを含めます。sparse-checkoutファイルをそのまま残しておくため、後の &lt;code&gt;git sparse-checkout init&lt;/code&gt; コマンドで作業ディレクトリを同じ状態に戻すことができます。</target>
        </trans-unit>
        <trans-unit id="850c7ae0114510cb68dad1845148d77f171826d0" translate="yes" xml:space="preserve">
          <source>Disable the automatic rebase after all commits have been successfully submitted. Can also be set with git-p4.disableRebase.</source>
          <target state="translated">すべてのコミットが正常に投稿された後に自動リベースを無効にします。git-p4.disableRebase で設定することもできます。</target>
        </trans-unit>
        <trans-unit id="70abb355de69ea1d7f24feac052795b5a3ce287a" translate="yes" xml:space="preserve">
          <source>Disable the automatic sync of p4/master from Perforce after commits have been submitted. Implies --disable-rebase. Can also be set with git-p4.disableP4Sync. Sync with origin/master still goes ahead if possible.</source>
          <target state="translated">コミット後のPerforceからのp4/masterの自動同期を無効にします。disable-rebase が必要です。git-p4.disableP4Sync で設定することもできます。可能であれば、origin/master との同期は引き続き行われます。</target>
        </trans-unit>
        <trans-unit id="81f65186f299582e8d75d06c846cd0089af76798" translate="yes" xml:space="preserve">
          <source>Disable the creation of an attachment, overriding the configuration setting.</source>
          <target state="translated">設定を上書きして、添付ファイルの作成を無効にします。</target>
        </trans-unit>
        <trans-unit id="bf4cee356cf7010ff2baed05e8bfe18333a1862b" translate="yes" xml:space="preserve">
          <source>Disable the indent heuristic.</source>
          <target state="translated">インデントヒューリスティックを無効にします。</target>
        </trans-unit>
        <trans-unit id="ca23a42f95c7adc909029c511091f97b9f4f227c" translate="yes" xml:space="preserve">
          <source>Disable the output shown by --stats, making fast-import usually be silent when it is successful. However, if the import stream has directives intended to show user output (e.g. &lt;code&gt;progress&lt;/code&gt; directives), the corresponding messages will still be shown.</source>
          <target state="translated">--statsで表示される出力を無効にし、通常、高速インポートが成功したときにサイレントモードにします。ただし、インポートストリームにユーザー出力を表示するためのディレクティブ（ &lt;code&gt;progress&lt;/code&gt; ディレクティブなど）がある場合でも、対応するメッセージは表示されます。</target>
        </trans-unit>
        <trans-unit id="10ad29909e3f37bb2f27c987f74a4679173f8135" translate="yes" xml:space="preserve">
          <source>Disable the use of format=flowed: Edit..Preferences..Advanced..Config Editor. Search for &quot;mailnews.send_plaintext_flowed&quot;. Toggle it to make sure it is set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">format = flowed：Edit..Preferences..Advanced..Config Editorの使用を無効にします。「mailnews.send_plaintext_flowed」を検索します。切り替えて、 &lt;code&gt;false&lt;/code&gt; に設定されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="858dc1d60e7e85d31f91783e5cf3256c04a8098e" translate="yes" xml:space="preserve">
          <source>Disable word diff again.</source>
          <target state="translated">単語の差分を再度無効にします。</target>
        </trans-unit>
        <trans-unit id="52c6bf677e030bd9b9c77d01d12b29e894c5d472" translate="yes" xml:space="preserve">
          <source>Disables the &lt;code&gt;renormalize&lt;/code&gt; option. This overrides the &lt;code&gt;merge.renormalize&lt;/code&gt; configuration variable.</source>
          <target state="translated">&lt;code&gt;renormalize&lt;/code&gt; オプションを無効にします。これは、 &lt;code&gt;merge.renormalize&lt;/code&gt; 構成変数をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="493a0332cb486f682d77bc8e837afda65d0ed478" translate="yes" xml:space="preserve">
          <source>Disallow external diff drivers.</source>
          <target state="translated">外部の差分ドライバを許可しない。</target>
        </trans-unit>
        <trans-unit id="ede3a1ef0a8990ff80cb58919eb8be7140b4f5fa" translate="yes" xml:space="preserve">
          <source>Discard the specified revision as well, keeping the nearest parent instead.</source>
          <target state="translated">指定したリビジョンも同様に破棄し、代わりに最も近い親を保持します。</target>
        </trans-unit>
        <trans-unit id="8fb937b602b4f2ef21c7fab00ac15de3b3ba49ea" translate="yes" xml:space="preserve">
          <source>Discussion</source>
          <target state="translated">Discussion</target>
        </trans-unit>
        <trans-unit id="f1c3b4b6756e9452cf8283101c3b08d9ce1ba40d" translate="yes" xml:space="preserve">
          <source>Discussion on fork-point mode</source>
          <target state="translated">フォークポイントモードについての議論</target>
        </trans-unit>
        <trans-unit id="cb8eae11c31d8b3c1e7747fe036d2ab3b1d1b780" translate="yes" xml:space="preserve">
          <source>Display branch listing in columns. See configuration variable column.branch for option syntax.&lt;code&gt;--column&lt;/code&gt; and &lt;code&gt;--no-column&lt;/code&gt; without options are equivalent to &lt;code&gt;always&lt;/code&gt; and &lt;code&gt;never&lt;/code&gt; respectively.</source>
          <target state="translated">列にブランチリストを表示します。オプションの構文については、構成変数column.branchを参照してください。オプションなしの &lt;code&gt;--column&lt;/code&gt; と &lt;code&gt;--no-column&lt;/code&gt; &lt;code&gt;never&lt;/code&gt; それぞれ &lt;code&gt;always&lt;/code&gt; とneverにそれぞれ相当します。</target>
        </trans-unit>
        <trans-unit id="25deb208645941865b584087b241dc58f16bb18f" translate="yes" xml:space="preserve">
          <source>Display data in columns</source>
          <target state="translated">データを列で表示する</target>
        </trans-unit>
        <trans-unit id="00fa8df96d22edc1ad7e63a08b37f36b16a61d74" translate="yes" xml:space="preserve">
          <source>Display diffs for the current state of the resolution. It is useful for tracking what has changed while the user is resolving conflicts. Additional arguments are passed directly to the system &lt;code&gt;diff&lt;/code&gt; command installed in PATH.</source>
          <target state="translated">解像度の現在の状態の差分を表示します。これは、ユーザーが競合を解決している間に何が変更されたかを追跡するのに役立ちます。追加の引数は、PATHにインストールされているシステムの &lt;code&gt;diff&lt;/code&gt; コマンドに直接渡されます。</target>
        </trans-unit>
        <trans-unit id="a0cdcc7c7b07a8e4a90c3d5151fd195fb7223cf9" translate="yes" xml:space="preserve">
          <source>Display gitattributes information</source>
          <target state="translated">gitattributes の情報を表示する</target>
        </trans-unit>
        <trans-unit id="941f2ea6c160e300fb40d6a55431420274d37d56" translate="yes" xml:space="preserve">
          <source>Display help information about Git</source>
          <target state="translated">Gitに関するヘルプ情報を表示する</target>
        </trans-unit>
        <trans-unit id="5a9a3798add08be0e1f47ed8edfc2983b20e1a95" translate="yes" xml:space="preserve">
          <source>Display manual page for the command in the &lt;code&gt;info&lt;/code&gt; format. The &lt;code&gt;info&lt;/code&gt; program will be used for that purpose.</source>
          <target state="translated">コマンドのマニュアルページを &lt;code&gt;info&lt;/code&gt; 形式で表示します。 &lt;code&gt;info&lt;/code&gt; プログラムは、その目的のために使用されます。</target>
        </trans-unit>
        <trans-unit id="e1ec38994d3bd8f0be2469bcb050567ebcdb5526" translate="yes" xml:space="preserve">
          <source>Display manual page for the command in the &lt;code&gt;man&lt;/code&gt; format. This option may be used to override a value set in the &lt;code&gt;help.format&lt;/code&gt; configuration variable.</source>
          <target state="translated">コマンドのマニュアルページを &lt;code&gt;man&lt;/code&gt; 形式で表示します。このオプションは、 &lt;code&gt;help.format&lt;/code&gt; 構成変数で設定された値をオーバーライドするために使用できます。</target>
        </trans-unit>
        <trans-unit id="92ffa56daac223805fbe702e38ef997d8109fbdd" translate="yes" xml:space="preserve">
          <source>Display manual page for the command in the &lt;code&gt;web&lt;/code&gt; (HTML) format. A web browser will be used for that purpose.</source>
          <target state="translated">コマンドのマニュアルページを &lt;code&gt;web&lt;/code&gt; （HTML）形式で表示します。そのためにウェブブラウザが使用されます。</target>
        </trans-unit>
        <trans-unit id="f3b82a6e6a357a0bf9773d3a79c96ba1e61e31cb" translate="yes" xml:space="preserve">
          <source>Display or do not display detailed ahead/behind counts for the branch relative to its upstream branch. Defaults to true.</source>
          <target state="translated">ブランチの上流ブランチに対する詳細な先行/後続カウントを表示するかどうかを指定します。デフォルトは true です。</target>
        </trans-unit>
        <trans-unit id="f65810bba6d242e31829fe1b50da76b80381c4b9" translate="yes" xml:space="preserve">
          <source>Display some basic statistics about the objects fast-import has created, the packfiles they were stored into, and the memory used by fast-import during this run. Showing this output is currently the default, but can be disabled with --quiet.</source>
          <target state="translated">fast-import が作成したオブジェクト、それらが保存された packfile、実行中に fast-import が使用したメモリに関する基本的な統計情報を表示します。この出力は現在のところデフォルトですが、 --quiet で無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="64158f1a0a1ec112852f04c5185015874a0e4c81" translate="yes" xml:space="preserve">
          <source>Display specific annotated tag (tag object).</source>
          <target state="translated">特定の注釈付きタグ(タグオブジェクト)を表示します。</target>
        </trans-unit>
        <trans-unit id="c6c2de616f34899ad73b615717fbe54f7ad5df4c" translate="yes" xml:space="preserve">
          <source>Display tag listing in columns. See configuration variable column.tag for option syntax.&lt;code&gt;--column&lt;/code&gt; and &lt;code&gt;--no-column&lt;/code&gt; without options are equivalent to &lt;code&gt;always&lt;/code&gt; and &lt;code&gt;never&lt;/code&gt; respectively.</source>
          <target state="translated">列にタグリストを表示します。オプションの構文については、構成変数column.tagを参照してください。オプションなしの &lt;code&gt;--column&lt;/code&gt; と &lt;code&gt;--no-column&lt;/code&gt; &lt;code&gt;never&lt;/code&gt; それぞれ &lt;code&gt;always&lt;/code&gt; とneverにそれぞれ相当します。</target>
        </trans-unit>
        <trans-unit id="1a3622cde828191996e0ecf195f03d03b3ec44d7" translate="yes" xml:space="preserve">
          <source>Display the currently running version of &lt;code&gt;git gui&lt;/code&gt;.</source>
          <target state="translated">現在実行中の &lt;code&gt;git gui&lt;/code&gt; のバージョンを表示します。</target>
        </trans-unit>
        <trans-unit id="93da4437ffd9aa5715f14a3f0dacdb3439b3cf81" translate="yes" xml:space="preserve">
          <source>Display the full sha1s in the output listing rather than abbreviating them.</source>
          <target state="translated">sha1 を省略するのではなく、完全な sha1 を出力リストに表示します。</target>
        </trans-unit>
        <trans-unit id="9f1c97cf9d8e74c2fc80265ab817ac9d7b832aa6" translate="yes" xml:space="preserve">
          <source>Display untracked files in columns. See configuration variable column.status for option syntax.&lt;code&gt;--column&lt;/code&gt; and &lt;code&gt;--no-column&lt;/code&gt; without options are equivalent to &lt;code&gt;always&lt;/code&gt; and &lt;code&gt;never&lt;/code&gt; respectively.</source>
          <target state="translated">追跡されていないファイルを列に表示します。オプションの構文については、構成変数column.statusを参照してください。オプションなしの &lt;code&gt;--column&lt;/code&gt; と &lt;code&gt;--no-column&lt;/code&gt; &lt;code&gt;never&lt;/code&gt; それぞれ &lt;code&gt;always&lt;/code&gt; とneverにそれぞれ相当します。</target>
        </trans-unit>
        <trans-unit id="7092e241896d60ac87e32bb3193290cccc38af84" translate="yes" xml:space="preserve">
          <source>Display usage.</source>
          <target state="translated">使用方法を表示します。</target>
        </trans-unit>
        <trans-unit id="7079ee902153dd291ddf916bbe088b722407f696" translate="yes" xml:space="preserve">
          <source>Displays changes in a repository or a selected set of commits. This includes visualizing the commit graph, showing information related to each commit, and the files in the trees of each revision.</source>
          <target state="translated">リポジトリまたは選択したコミットのセットの変更を表示します。これには、コミットグラフの可視化、各コミットに関連する情報の表示、各リビジョンのツリー内のファイルの表示が含まれます。</target>
        </trans-unit>
        <trans-unit id="298c129f2e50c144c7e71d42c00becc8dea6a583" translate="yes" xml:space="preserve">
          <source>Displays paths that have differences between the index file and the current HEAD commit, paths that have differences between the working tree and the index file, and paths in the working tree that are not tracked by Git (and are not ignored by &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;). The first are what you &lt;code&gt;would&lt;/code&gt; commit by running &lt;code&gt;git commit&lt;/code&gt;; the second and third are what you &lt;code&gt;could&lt;/code&gt; commit by running &lt;code&gt;git add&lt;/code&gt; before running &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">インデックスファイルと現在のHEADコミットの間に相違があるパス、作業ツリーとインデックスファイルの間に相違があるパス、およびGitによって追跡されない（そして&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]&lt;/a&gt;によって無視されない作業ツリーのパスを表示します。）。まず、あなたが何をしている &lt;code&gt;would&lt;/code&gt; 実行してコミット &lt;code&gt;git commit&lt;/code&gt; 。第二と第三は、あなたが何をしている &lt;code&gt;could&lt;/code&gt; 実行してコミット &lt;code&gt;git add&lt;/code&gt; 実行する前に &lt;code&gt;git commit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a629570fab6639c414ba6b626507dad99fc801af" translate="yes" xml:space="preserve">
          <source>Displays references available in a local repository along with the associated commit IDs. Results can be filtered using a pattern and tags can be dereferenced into object IDs. Additionally, it can be used to test whether a particular ref exists.</source>
          <target state="translated">ローカルリポジトリで利用可能な参照を、関連するコミットIDと一緒に表示します。結果はパターンを使ってフィルタリングすることができ、タグはオブジェクトIDに派生させることができます。さらに、特定の参照が存在するかどうかをテストするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="552e170818d4ff73bae847a17956173c4cb34b11" translate="yes" xml:space="preserve">
          <source>Displays references available in a remote repository along with the associated commit IDs.</source>
          <target state="translated">リモートリポジトリで利用可能な参照を、関連するコミットIDとともに表示します。</target>
        </trans-unit>
        <trans-unit id="96528dc0170b433d5bf734338e53f84118e8892f" translate="yes" xml:space="preserve">
          <source>Displays summary about given repository. This is the default command if no action is specified in URL, and only repository is specified.</source>
          <target state="translated">指定したリポジトリの概要を表示します。URLにアクションを指定せず、リポジトリのみを指定した場合のデフォルトコマンドです。</target>
        </trans-unit>
        <trans-unit id="a0bdba2bfb43b133e65f6e75b6b8767f5a655c4d" translate="yes" xml:space="preserve">
          <source>Distributed workflows</source>
          <target state="translated">分散ワークフロー</target>
        </trans-unit>
        <trans-unit id="862f8a0b24f2fede02b5c7614fea634d5e3205d5" translate="yes" xml:space="preserve">
          <source>Do everything except actually send the emails.</source>
          <target state="translated">実際にメールを送る以外のことはすべて行う。</target>
        </trans-unit>
        <trans-unit id="c0cf7c46b6d09d46245bbf190b286bb681387914" translate="yes" xml:space="preserve">
          <source>Do everything except actually send the updates.</source>
          <target state="translated">実際にアップデートを送信する以外のことはすべて行いましょう。</target>
        </trans-unit>
        <trans-unit id="2391ab0a15e29de8c553f138bc9a5e5e1eff2f5d" translate="yes" xml:space="preserve">
          <source>Do not GPG-sign commit, to countermand a &lt;code&gt;--gpg-sign&lt;/code&gt; option given earlier on the command line.</source>
          <target state="translated">コマンドラインで前に指定された &lt;code&gt;--gpg-sign&lt;/code&gt; オプションに対抗するために、コミットにGPG署名しないでください。</target>
        </trans-unit>
        <trans-unit id="e60712f9f236c24928017c46a4121b75b37250b5" translate="yes" xml:space="preserve">
          <source>Do not actually prune any entries; just show what would have been pruned.</source>
          <target state="translated">実際にはどのエントリも剪定しないで、剪定されたであろうものだけを表示してください。</target>
        </trans-unit>
        <trans-unit id="c1e5372fe0faa123824db425165ec2fea2793861" translate="yes" xml:space="preserve">
          <source>Do not add the Message-ID header to the commit message. &lt;code&gt;no-message-id&lt;/code&gt; is useful to override &lt;code&gt;am.messageid&lt;/code&gt;.</source>
          <target state="translated">コミットメッセージにMessage-IDヘッダーを追加しないでください。 &lt;code&gt;no-message-id&lt;/code&gt; は、 &lt;code&gt;am.messageid&lt;/code&gt; をオーバーライドするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="57e3f3ba3ed0b684d610d78f35decbf2d82cbdb0" translate="yes" xml:space="preserve">
          <source>Do not assume that the remote repository is complete in its current state, and verify all objects in the entire local ref&amp;rsquo;s history exist in the remote repository.</source>
          <target state="translated">リモートリポジトリが現在の状態で完全であると想定せず、ローカル参照全体の履歴にあるすべてのオブジェクトがリモートリポジトリに存在することを確認してください。</target>
        </trans-unit>
        <trans-unit id="90fec1270ba2d2b20ae4223418ef68e2bfdd8b58" translate="yes" xml:space="preserve">
          <source>Do not change the message at all.</source>
          <target state="translated">メッセージは一切変更しないでください。</target>
        </trans-unit>
        <trans-unit id="08226113a8a9e7f80d0cdebc9507aad8bbcea024" translate="yes" xml:space="preserve">
          <source>Do not checkout the new working tree at each iteration of the bisection process. Instead just update a special reference named &lt;code&gt;BISECT_HEAD&lt;/code&gt; to make it point to the commit that should be tested.</source>
          <target state="translated">二分プロセスの各反復で新しい作業ツリーをチェックアウトしないでください。代わりに、 &lt;code&gt;BISECT_HEAD&lt;/code&gt; という名前の特別な参照を更新して、テストする必要があるコミットを指すようにします。</target>
        </trans-unit>
        <trans-unit id="032bbf4a51cb5f8b4c87bc5a87ccbf7ce7d9972e" translate="yes" xml:space="preserve">
          <source>Do not complain about a failed merge program (a merge program failure usually indicates conflicts during the merge). This is for porcelains which might want to emit custom messages.</source>
          <target state="translated">マージプログラムが失敗しても文句を言わないようにしてください(マージプログラムの失敗は通常、マージ中に競合が発生したことを示します)。これは、カスタムメッセージを表示したい場合に使用します。</target>
        </trans-unit>
        <trans-unit id="828652d2b0b568421d6c7e9bbf13386dea23e106" translate="yes" xml:space="preserve">
          <source>Do not consider commits that are referenced only by an entry in a reflog to be reachable. This option is meant only to search for commits that used to be in a ref, but now aren&amp;rsquo;t, but are still in that corresponding reflog.</source>
          <target state="translated">reflogのエントリによってのみ参照されるコミットは到達可能であると見なさないでください。このオプションは、以前は参照に含まれていたコミットを検索することのみを目的としていますが、現在はそうではありませんが、対応する参照ログにはまだ含まれています。</target>
        </trans-unit>
        <trans-unit id="e869fbf733c283b771007d82b91f9b0969cfb747" translate="yes" xml:space="preserve">
          <source>Do not consider it an error to request removing notes from an object that does not have notes attached to it.</source>
          <target state="translated">ノートが添付されていないオブジェクトからノートの削除を要求するのは誤りと考えないでください。</target>
        </trans-unit>
        <trans-unit id="1ecb147f602b4581f87540a29b063aa61604b712" translate="yes" xml:space="preserve">
          <source>Do not consider tags matching the given &lt;code&gt;glob(7)&lt;/code&gt; pattern, excluding the &quot;refs/tags/&quot; prefix. If used with &lt;code&gt;--all&lt;/code&gt;, it also does not consider local branches and remote-tracking references matching the pattern, excluding respectively &quot;refs/heads/&quot; and &quot;refs/remotes/&quot; prefix; references of other types are never considered. If given multiple times, a list of patterns will be accumulated and tags matching any of the patterns will be excluded. When combined with --match a tag will be considered when it matches at least one --match pattern and does not match any of the --exclude patterns. Use &lt;code&gt;--no-exclude&lt;/code&gt; to clear and reset the list of patterns.</source>
          <target state="translated">「refs / tags /」接頭辞を除いて、指定された &lt;code&gt;glob(7)&lt;/code&gt; パターンに一致するタグを考慮しません。 &lt;code&gt;--all&lt;/code&gt; と一緒に使用すると、パターンに一致するローカルブランチとリモートトラッキング参照も考慮されません。それぞれ「refs / heads /」と「refs / remotes /」プレフィックスは除外されます。他のタイプの参照は考慮されません。複数回指定すると、パターンのリストが蓄積され、いずれかのパターンに一致するタグが除外されます。 --matchと組み合わせると、タグが少なくとも1つの--matchパターンに一致し、-excludeパターンのいずれにも一致しない場合にタグが考慮されます。パターンのリストをクリアしてリセットするには、 &lt;code&gt;--no-exclude&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="037f30ef5e84974359cf44c16519221f2879783e" translate="yes" xml:space="preserve">
          <source>Do not create a commit, but show a list of paths that are to be committed, paths with local changes that will be left uncommitted and paths that are untracked.</source>
          <target state="translated">コミットを作成するのではなく、コミットされるパス、コミットされずに放置されるローカル変更のあるパス、追跡されないパスのリストを表示します。</target>
        </trans-unit>
        <trans-unit id="8cc46cc75e4001540bdd6b36d05862e218e46c47" translate="yes" xml:space="preserve">
          <source>Do not create objects in the object database for all &amp;lt;file&amp;gt; arguments that follow this flag; just insert their object IDs into the index.</source>
          <target state="translated">このフラグに続くすべての&amp;lt;file&amp;gt;引数について、オブジェクトデータベースにオブジェクトを作成しないでください。オブジェクトIDをインデックスに挿入するだけです。</target>
        </trans-unit>
        <trans-unit id="7cb5295efb5286a379b8d83e6238db5f1ea1b2fa" translate="yes" xml:space="preserve">
          <source>Do not fetch remotely; only run &lt;code&gt;git rebase&lt;/code&gt; against the last fetched commit from the upstream SVN.</source>
          <target state="translated">リモートでフェッチしないでください。上流のSVNから最後にフェッチされたコミットに対してのみ &lt;code&gt;git rebase&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="97bf9439cf9070cedb99b3389632fc0fbbcf9edf" translate="yes" xml:space="preserve">
          <source>Do not honor textconv filter settings. This is the default.</source>
          <target state="translated">textconv フィルタの設定を無視します。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="642b94f1b0f16f8086c6d9b3c2a88d58a07a371f" translate="yes" xml:space="preserve">
          <source>Do not ignore whitespace when performing move detection.</source>
          <target state="translated">手の検出を行う際には、空白を無視しないでください。</target>
        </trans-unit>
        <trans-unit id="59383a29c043832ab98b518f841a638207c2a6f4" translate="yes" xml:space="preserve">
          <source>Do not ignore whitespace when performing move detection. This can be used to override configuration settings. It is the same as &lt;code&gt;--color-moved-ws=no&lt;/code&gt;.</source>
          <target state="translated">移動検出を実行するときに空白を無視しないでください。これは、構成設定をオーバーライドするために使用できます。 &lt;code&gt;--color-moved-ws=no&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="f9b8ad508a1efad0691851330497788c20711761" translate="yes" xml:space="preserve">
          <source>Do not include a patch that matches a commit in &amp;lt;until&amp;gt;..&amp;lt;since&amp;gt;. This will examine all patches reachable from &amp;lt;since&amp;gt; but not from &amp;lt;until&amp;gt; and compare them with the patches being generated, and any patch that matches is ignored.</source>
          <target state="translated">&amp;lt;until&amp;gt; .. &amp;lt;since&amp;gt;のコミットに一致するパッチを含めないでください。これにより、&amp;lt;since&amp;gt;からは到達可能であるが&amp;lt;until&amp;gt;からは到達可能でないすべてのパッチが検査され、生成中のパッチと比較されます。一致するパッチはすべて無視されます。</target>
        </trans-unit>
        <trans-unit id="06c89fdde45df9764a8423e7bd3a2334bae4fdd3" translate="yes" xml:space="preserve">
          <source>Do not include refs matching &lt;code&gt;&amp;lt;glob-pattern&amp;gt;&lt;/code&gt; that the next &lt;code&gt;--all&lt;/code&gt;, &lt;code&gt;--branches&lt;/code&gt;, &lt;code&gt;--tags&lt;/code&gt;, &lt;code&gt;--remotes&lt;/code&gt;, or &lt;code&gt;--glob&lt;/code&gt; would otherwise consider. Repetitions of this option accumulate exclusion patterns up to the next &lt;code&gt;--all&lt;/code&gt;, &lt;code&gt;--branches&lt;/code&gt;, &lt;code&gt;--tags&lt;/code&gt;, &lt;code&gt;--remotes&lt;/code&gt;, or &lt;code&gt;--glob&lt;/code&gt; option (other options or arguments do not clear accumulated patterns).</source>
          <target state="translated">レフリーが一致含めないでください &lt;code&gt;&amp;lt;glob-pattern&amp;gt;&lt;/code&gt; 次のことを &lt;code&gt;--all&lt;/code&gt; 、 &lt;code&gt;--branches&lt;/code&gt; 、 &lt;code&gt;--tags&lt;/code&gt; 、 &lt;code&gt;--remotes&lt;/code&gt; 、または &lt;code&gt;--glob&lt;/code&gt; はそう考えるだろう。次回まで、このオプションは累積除外パターンの繰り返し &lt;code&gt;--all&lt;/code&gt; は、 &lt;code&gt;--branches&lt;/code&gt; 、 &lt;code&gt;--tags&lt;/code&gt; 、 &lt;code&gt;--remotes&lt;/code&gt; 、または &lt;code&gt;--glob&lt;/code&gt; オプション（他のオプションや引数は、蓄積したパターンをクリアしないでください）。</target>
        </trans-unit>
        <trans-unit id="56a32ccb3c1f1c18304a762968ab21163044c5c3" translate="yes" xml:space="preserve">
          <source>Do not include the output of &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt; in the commit message template when using an editor to prepare the default commit message.</source>
          <target state="translated">エディターを使用してデフォルトのコミットメッセージを準備するときは、&lt;a href=&quot;git-status&quot;&gt;git-status [1]&lt;/a&gt;の出力をコミットメッセージテンプレートに含めないでください。</target>
        </trans-unit>
        <trans-unit id="6b5bd4195c1d74a2912285d2c4eb0c2dba4c1afa" translate="yes" xml:space="preserve">
          <source>Do not interpret any more arguments as options.</source>
          <target state="translated">これ以上の引数をオプションと解釈しないでください。</target>
        </trans-unit>
        <trans-unit id="e5da1b4ac510b79eb35b9d691f72663928bb7698" translate="yes" xml:space="preserve">
          <source>Do not invoke &lt;code&gt;git unpack-objects&lt;/code&gt; on received data, but create a single packfile out of it instead, and store it in the object database. If provided twice then the pack is locked against repacking.</source>
          <target state="translated">ない呼び出しています &lt;code&gt;git unpack-objects&lt;/code&gt; 受信したデータに、代わりにそれのうち、単一のパックファイルを作成して、オブジェクトデータベースに保存します。2回提供すると、パックは再梱包できないようにロックされます。</target>
        </trans-unit>
        <trans-unit id="beae705e0d7e9c4e2c66edfac5f5628c8ca8684b" translate="yes" xml:space="preserve">
          <source>Do not issue an error message if the &amp;lt;name&amp;gt; is not a symbolic ref but a detached HEAD; instead exit with non-zero status silently.</source>
          <target state="translated">&amp;lt;name&amp;gt;がシンボリック参照ではなく、切り離されたHEADである場合、エラーメッセージを発行しないでください。代わりに、ゼロ以外のステータスで静かに終了します。</target>
        </trans-unit>
        <trans-unit id="d96f65c98da537beaa0a86a4d3aea2125b47b691" translate="yes" xml:space="preserve">
          <source>Do not limit the listing to the current working directory. Implies --full-name.</source>
          <target state="translated">リストを現在の作業ディレクトリに限定しないでください。フルネームを意味します。</target>
        </trans-unit>
        <trans-unit id="0ec876803cf466a9324414e97bc9d68e8edc56a9" translate="yes" xml:space="preserve">
          <source>Do not list empty directories. Has no effect without --directory.</source>
          <target state="translated">空のディレクトリをリストアップしない。ディレクトリなしでは効果がありません。</target>
        </trans-unit>
        <trans-unit id="96b8b2c721697c15e0778ab602142e2343cf1855" translate="yes" xml:space="preserve">
          <source>Do not list one-line descriptions from the actual commits being merged.</source>
          <target state="translated">マージされる実際のコミットから一行の説明をリストアップしないようにしてください。</target>
        </trans-unit>
        <trans-unit id="50c8933f0d365d96e0aba5401a78a6eff6e0fcc0" translate="yes" xml:space="preserve">
          <source>Do not merge to downstream except with a good reason: upstream API changes affect your branch; your branch no longer merges to upstream cleanly; etc.</source>
          <target state="translated">上流側の API の変更がブランチに影響を与える、ブランチが上流側にクリーンにマージされなくなる、などの正当な理由がある場合を除き、下流側にマージしないでください。</target>
        </trans-unit>
        <trans-unit id="20453559ed97130ebcc8684bdfc96d4e211050a6" translate="yes" xml:space="preserve">
          <source>Do not notice anything as error.</source>
          <target state="translated">エラーとして何も気づかない。</target>
        </trans-unit>
        <trans-unit id="6c8215f8ad086bc4c804beee0595714130addff4" translate="yes" xml:space="preserve">
          <source>Do not output contents of changes in binary files, instead display a notice that those files changed. Patches generated using this option cannot be applied properly, but they are still useful for code review.</source>
          <target state="translated">バイナリファイルの変更内容を出力せず、その代わりに変更されたことの通知を表示します。このオプションを使用して生成されたパッチは正しく適用できませんが、コードレビューには有用です。</target>
        </trans-unit>
        <trans-unit id="2523ea10fe468312c71da3f45d33ec2f934186fc" translate="yes" xml:space="preserve">
          <source>Do not output flag parameters.</source>
          <target state="translated">フラグパラメータを出力しないでください。</target>
        </trans-unit>
        <trans-unit id="97d9ab4b88ae45778b7b3d001e321ad0dc14c371" translate="yes" xml:space="preserve">
          <source>Do not output flags and parameters meant for &lt;code&gt;git rev-list&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;git rev-list&lt;/code&gt; コマンド用のフラグとパラメーターを出力しません。</target>
        </trans-unit>
        <trans-unit id="f763f44ab0f0b262c4086b5b655e472e8e1fbc54" translate="yes" xml:space="preserve">
          <source>Do not output flags and parameters not meant for &lt;code&gt;git rev-list&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;git rev-list&lt;/code&gt; コマンド用ではないフラグとパラメーターを出力しません。</target>
        </trans-unit>
        <trans-unit id="08b6c73b9a5b9ae8b10db84ed02aa9ff12c3dacb" translate="yes" xml:space="preserve">
          <source>Do not output matched lines; instead, exit with status 0 when there is a match and with non-zero status when there isn&amp;rsquo;t.</source>
          <target state="translated">一致した行を出力しません。代わりに、一致する場合はステータス0で終了し、一致しない場合はゼロ以外のステータスで終了します。</target>
        </trans-unit>
        <trans-unit id="ee712c84633a2927c1551bcb0103dc0873b40235" translate="yes" xml:space="preserve">
          <source>Do not output non-flag parameters.</source>
          <target state="translated">フラグ以外のパラメータは出力しないでください。</target>
        </trans-unit>
        <trans-unit id="803c0ba19a9790046951938b8c5d1389018a1cc7" translate="yes" xml:space="preserve">
          <source>Do not pay attention to ignored files specified via the &lt;code&gt;.gitignore&lt;/code&gt; mechanism. Only useful when searching files in the current directory with &lt;code&gt;--no-index&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.gitignore&lt;/code&gt; メカニズムで指定された無視されたファイルに注意を払わないでください。 &lt;code&gt;--no-index&lt;/code&gt; を使用して現在のディレクトリでファイルを検索する場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="ac83dbcf3d4693958a0fe122034c7cc31b273fa9" translate="yes" xml:space="preserve">
          <source>Do not perform optional operations that require locks. This is equivalent to setting the &lt;code&gt;GIT_OPTIONAL_LOCKS&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">ロックを必要とするオプションの操作を実行しないでください。これは、 &lt;code&gt;GIT_OPTIONAL_LOCKS&lt;/code&gt; を &lt;code&gt;0&lt;/code&gt; に設定することと同じです。</target>
        </trans-unit>
        <trans-unit id="3857914d38ac6fc1cf3a0581728d470a65e02771" translate="yes" xml:space="preserve">
          <source>Do not pipe Git output into a pager.</source>
          <target state="translated">Git の出力をページャーにパイプしてはいけません。</target>
        </trans-unit>
        <trans-unit id="d083af3d8a98a88b0736219c9a712ace923e74ce" translate="yes" xml:space="preserve">
          <source>Do not print any progress information.</source>
          <target state="translated">進捗情報は印刷しないでください。</target>
        </trans-unit>
        <trans-unit id="4f306796a802facf6a3ec8eb763307ebdfcd6b65" translate="yes" xml:space="preserve">
          <source>Do not print any results to stdout. When combined with &lt;code&gt;--verify&lt;/code&gt; this can be used to silently check if a reference exists.</source>
          <target state="translated">結果をstdoutに出力しません。 &lt;code&gt;--verify&lt;/code&gt; と組み合わせると、参照が存在するかどうかを静かに確認するために使用できます。</target>
        </trans-unit>
        <trans-unit id="d36888af86796f130618636768f7e10c682f8ef3" translate="yes" xml:space="preserve">
          <source>Do not print commits with more than one parent. This is exactly the same as &lt;code&gt;--max-parents=1&lt;/code&gt;.</source>
          <target state="translated">複数の親を持つコミットを出力しないでください。これは &lt;code&gt;--max-parents=1&lt;/code&gt; とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="ca4c10c14f4ba2f9f3e2f89755711c5fc9a52157" translate="yes" xml:space="preserve">
          <source>Do not print remote URL to stderr.</source>
          <target state="translated">リモートURLを標準エラーに印刷しない。</target>
        </trans-unit>
        <trans-unit id="808049e7ffec5b6e655b6a9d9ae72d8ecb3de856" translate="yes" xml:space="preserve">
          <source>Do not print the names of the generated files to standard output.</source>
          <target state="translated">生成されたファイル名を標準出力に出力しないでください。</target>
        </trans-unit>
        <trans-unit id="bc87e43a7d98a5c7571b51e67897a36a4ca8ab2b" translate="yes" xml:space="preserve">
          <source>Do not prompt before launching a diff tool.</source>
          <target state="translated">diffツールを起動する前にプロンプトを出さないでください。</target>
        </trans-unit>
        <trans-unit id="2138cd0cdb77e09db32e703a72fd51381cd4185f" translate="yes" xml:space="preserve">
          <source>Do not prune any loose objects.</source>
          <target state="translated">ゆるいものは剪定しないでください。</target>
        </trans-unit>
        <trans-unit id="4ab3f3b957170dab775cfb00bbc8606872c3ea09" translate="yes" xml:space="preserve">
          <source>Do not rebase the tree against p4/master following a submit.</source>
          <target state="translated">送信後に p4/master に対してツリーをリベースしないでください。</target>
        </trans-unit>
        <trans-unit id="ee64f5e74349135c206f878ac8dae99d11617c4a" translate="yes" xml:space="preserve">
          <source>Do not remove &lt;code&gt;\r&lt;/code&gt; from lines ending with &lt;code&gt;\r\n&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;\r\n&lt;/code&gt; 終わる行から &lt;code&gt;\r&lt;/code&gt; を削除しないでください。</target>
        </trans-unit>
        <trans-unit id="5f6ac36312ee3d608ed232e28cf93ff206d0103e" translate="yes" xml:space="preserve">
          <source>Do not remove anything; just report the object names whose notes would be removed.</source>
          <target state="translated">何も削除しないで、ノートが削除されるオブジェクト名だけを報告してください。</target>
        </trans-unit>
        <trans-unit id="e1b8d19002620396e3e17ca0d394f58c32270c15" translate="yes" xml:space="preserve">
          <source>Do not remove anything; just report what it would remove.</source>
          <target state="translated">何も削除しないでください。</target>
        </trans-unit>
        <trans-unit id="04f9e0c42631154ae3b06c4af5993cc618a97379" translate="yes" xml:space="preserve">
          <source>Do not remove skip-worktree (AKA &quot;index-only&quot;) entries even when the &lt;code&gt;--remove&lt;/code&gt; option was specified.</source>
          <target state="translated">&lt;code&gt;--remove&lt;/code&gt; オプションが指定されていても、skip-worktree（別名 &quot;index-only&quot;）エントリを削除しないでください。</target>
        </trans-unit>
        <trans-unit id="4b9504bc1ba7b31d1b6d4966504b5b4e06f71072" translate="yes" xml:space="preserve">
          <source>Do not report commits up to (and including) limit.</source>
          <target state="translated">コミットを(含む)上限まで報告しないでください。</target>
        </trans-unit>
        <trans-unit id="01c55be9743ceb727e1460223caf6f63698fc951" translate="yes" xml:space="preserve">
          <source>Do not set up &quot;upstream&quot; configuration, even if the &lt;code&gt;branch.autoSetupMerge&lt;/code&gt; configuration variable is true.</source>
          <target state="translated">&lt;code&gt;branch.autoSetupMerge&lt;/code&gt; 構成変数がtrue であっても、「上流」構成をセットアップしないでください。</target>
        </trans-unit>
        <trans-unit id="1128ceb9ee850f084ee9c90bbc32c35e1a0677f6" translate="yes" xml:space="preserve">
          <source>Do not set up &quot;upstream&quot; configuration, even if the branch.autoSetupMerge configuration variable is true.</source>
          <target state="translated">branch.autoSetupMerge設定変数がtrueであっても、「上流」の設定をしない。</target>
        </trans-unit>
        <trans-unit id="040575d6c90a48f5c39a665aeb7044e9eb43b684" translate="yes" xml:space="preserve">
          <source>Do not show a diffstat as part of the rebase process.</source>
          <target state="translated">リベース処理の一部として diffstat を表示しないでください。</target>
        </trans-unit>
        <trans-unit id="6441f1c36e56fb2fa459a5f0796f9c305a9cf68e" translate="yes" xml:space="preserve">
          <source>Do not show any source or destination prefix.</source>
          <target state="translated">送信元または送信先のプレフィックスを表示しない。</target>
        </trans-unit>
        <trans-unit id="c24868a69fc39c6ac2b9ca770ce8aa6841828fe0" translate="yes" xml:space="preserve">
          <source>Do not show naming strings for each commit.</source>
          <target state="translated">コミットごとに命名文字列を表示しない。</target>
        </trans-unit>
        <trans-unit id="8fa5b27db8fcf759f01b0280edfd6b3431051bf3" translate="yes" xml:space="preserve">
          <source>Do not show notes. This negates the above &lt;code&gt;--notes&lt;/code&gt; option, by resetting the list of notes refs from which notes are shown. Options are parsed in the order given on the command line, so e.g. &quot;--notes --notes=foo --no-notes --notes=bar&quot; will only show notes from &quot;refs/notes/bar&quot;.</source>
          <target state="translated">メモを表示しません。これは、ノートが表示されるノート参照のリストをリセットすることにより、上記の &lt;code&gt;--notes&lt;/code&gt; オプションを無効にします。オプションはコマンドラインで指定された順序で解析されるため、たとえば「--notes --notes = foo --no-notes --notes = bar」は「refs / notes / bar」のノートのみを表示します。</target>
        </trans-unit>
        <trans-unit id="9b02c841f1914bb7e6442db5b21cd8ed24132388" translate="yes" xml:space="preserve">
          <source>Do not show peeled tags or pseudorefs like &lt;code&gt;HEAD&lt;/code&gt; in the output.</source>
          <target state="translated">剥離したタグや &lt;code&gt;HEAD&lt;/code&gt; などの疑似参照を出力に表示しないでください。</target>
        </trans-unit>
        <trans-unit id="2e0add30bcab4fc1d372892ee84a569922f89e58" translate="yes" xml:space="preserve">
          <source>Do not show the progress.</source>
          <target state="translated">進行状況を表示しないでください。</target>
        </trans-unit>
        <trans-unit id="bb40d4a42e4bfb4ff33aaa6fa93d55da54d2c4f4" translate="yes" xml:space="preserve">
          <source>Do not strip/add &lt;code&gt;[PATCH]&lt;/code&gt; from the first line of the commit log message.</source>
          <target state="translated">コミットログメッセージの最初の行から &lt;code&gt;[PATCH]&lt;/code&gt; を削除/追加しないでください。</target>
        </trans-unit>
        <trans-unit id="aa99438dbaa0b24c2ee497186eaab642c50dd94c" translate="yes" xml:space="preserve">
          <source>Do not sync p4/master with Perforce following a submit. Implies git-p4.disableRebase.</source>
          <target state="translated">p4/master を Perforce と同期させないようにします。git-p4.disableRebase を暗示しています。</target>
        </trans-unit>
        <trans-unit id="7b33c8101974f45df18e3e02278464887692318a" translate="yes" xml:space="preserve">
          <source>Do not treat &lt;code&gt;---&lt;/code&gt; as the end of the commit message. Use this when you know your input contains just the commit message itself (and not an email or the output of &lt;code&gt;git format-patch&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;---&lt;/code&gt; をコミットメッセージの終わりとして扱わないでください。入力にコミットメッセージ自体のみが含まれていることがわかっている場合に使用します（電子メールや &lt;code&gt;git format-patch&lt;/code&gt; の出力は含まれません）。</target>
        </trans-unit>
        <trans-unit id="be1e8c28e0eca20ad17d3a007d8e373df410066a" translate="yes" xml:space="preserve">
          <source>Do not treat root commits as boundaries in &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;. This option defaults to false.</source>
          <target state="translated">rootコミットを&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]の&lt;/a&gt;境界として扱わないでください。このオプションのデフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="1ff1f1d3f9c5e718776c8b3b20fdd0d08c30cdae" translate="yes" xml:space="preserve">
          <source>Do not treat root commits as boundaries. This can also be controlled via the &lt;code&gt;blame.showRoot&lt;/code&gt; config option.</source>
          <target state="translated">ルートコミットを境界として扱わないでください。これは、 &lt;code&gt;blame.showRoot&lt;/code&gt; 構成オプションを使用して制御することもできます。</target>
        </trans-unit>
        <trans-unit id="24a9efa9a70e1fda7e6a923e07fce62a5dfc6f39" translate="yes" xml:space="preserve">
          <source>Do not trust the line counts in the hunk headers, but infer them by inspecting the patch (e.g. after editing the patch without adjusting the hunk headers appropriately).</source>
          <target state="translated">ハンクヘッダの行数を信用せず、パッチを検査して推測してください(例えば、ハンクヘッダを適切に調整せずにパッチを編集した後など)。</target>
        </trans-unit>
        <trans-unit id="ab779b8d99fe56229fa093a46cdef1a09efa24ca" translate="yes" xml:space="preserve">
          <source>Do not try &amp;lt;directory&amp;gt;/.git/ if &amp;lt;directory&amp;gt; is no Git directory.</source>
          <target state="translated">&amp;lt;directory&amp;gt;がGitディレクトリでない場合は、&amp;lt;directory&amp;gt; /。git /を試さないでください。</target>
        </trans-unit>
        <trans-unit id="5c47444dc7f2fc014cd4e67acdf260f62a7c8e62" translate="yes" xml:space="preserve">
          <source>Do not try to update submodules. This option is only respected when passed before --refresh.</source>
          <target state="translated">サブモジュールを更新しようとしない。このオプションは --refresh の前に渡された場合にのみ尊重されます。</target>
        </trans-unit>
        <trans-unit id="2177408392188ae81b2d122883b73ab471a2d934" translate="yes" xml:space="preserve">
          <source>Do not update the server information with &lt;code&gt;git update-server-info&lt;/code&gt;. This option skips updating local catalog files needed to publish this repository (or a direct copy of it) over HTTP or FTP. See &lt;a href=&quot;git-update-server-info&quot;&gt;git-update-server-info[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;git update-server-info&lt;/code&gt; でサーバー情報を更新しないでください。このオプションでは、このリポジトリ（またはその直接のコピー）をHTTPまたはFTP経由で公開するために必要なローカルカタログファイルの更新をスキップします。&lt;a href=&quot;git-update-server-info&quot;&gt;git-update-server-info [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5053c19fad3601db22669a9dc4a1e312a5878c5e" translate="yes" xml:space="preserve">
          <source>Do not use any ref whose name matches a given shell pattern. The pattern can be one of branch name, tag name or fully qualified ref name. If given multiple times, a ref will be excluded when it matches any of the given patterns. When used together with --refs, a ref will be used as a match only when it matches at least one --refs pattern and does not match any --exclude patterns. Use &lt;code&gt;--no-exclude&lt;/code&gt; to clear the list of exclude patterns.</source>
          <target state="translated">名前が特定のシェルパターンと一致する参照を使用しないでください。パターンは、ブランチ名、タグ名、または完全修飾参照名のいずれかです。複数回指定した場合、指定したパターンのいずれかに一致する参照は除外されます。--refsと一緒に使用すると、refは、少なくとも1つの--refsパターンに一致し、どの--excludeパターンにも一致しない場合にのみ、一致として使用されます。除外パターンのリストをクリアするには、 &lt;code&gt;--no-exclude&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="267f50c7506b016b112f51819982f3c9ad863c01" translate="yes" xml:space="preserve">
          <source>Do not use branch names, but only tags to name the commits</source>
          <target state="translated">ブランチ名は使用せず、コミット名にはタグのみを使用します。</target>
        </trans-unit>
        <trans-unit id="5e1b9e0ae819ac2e51b8b3ec6d4f3a636596bd47" translate="yes" xml:space="preserve">
          <source>Do not use local URLs here if you plan to publish your superproject!</source>
          <target state="translated">スーパープロジェクトを公開する予定の方は、ここでローカルURLを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="2120668c1016ed8353ecc179a2be3de457f3b18c" translate="yes" xml:space="preserve">
          <source>Do not use replacement refs to replace Git objects. See &lt;a href=&quot;git-replace&quot;&gt;git-replace[1]&lt;/a&gt; for more information.</source>
          <target state="translated">Gitオブジェクトを置き換えるために置換参照を使用しないでください。詳細については、&lt;a href=&quot;git-replace&quot;&gt;git-replace [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="46609390af561170d35a55596a89f9a47d125a47" translate="yes" xml:space="preserve">
          <source>Do not use the --amend option of &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; on a change you&amp;rsquo;ve already dcommitted. It is considered bad practice to --amend commits you&amp;rsquo;ve already pushed to a remote repository for other users, and dcommit with SVN is analogous to that.</source>
          <target state="translated">すでに&lt;a href=&quot;git-commit&quot;&gt;コミット&lt;/a&gt;した変更に対してgit-commit [1]の--amendオプションを使用しないでください。他のユーザーのリモートリポジトリに既にプッシュしたコミットを--amendすることは悪い習慣と考えられており、SVNでのdcommitはそれに類似しています。</target>
        </trans-unit>
        <trans-unit id="6b2f85cff30ddf16b20f53be5327aa0354418c7a" translate="yes" xml:space="preserve">
          <source>Do not verify the pack contents; only show the histogram of delta chain length. With &lt;code&gt;--verbose&lt;/code&gt;, list of objects is also shown.</source>
          <target state="translated">パックの内容を確認しないでください。デルタチェーンの長さのヒストグラムのみを表示します。 &lt;code&gt;--verbose&lt;/code&gt; 、オブジェクトの一覧も示されています。</target>
        </trans-unit>
        <trans-unit id="a72712d97eed5eb258082e78ab4de395a4c06778" translate="yes" xml:space="preserve">
          <source>Do nothing; only show what would happen</source>
          <target state="translated">何もしないで、何が起こるかを示すだけ</target>
        </trans-unit>
        <trans-unit id="c577d001dfd39377917177f9d18813c77808015f" translate="yes" xml:space="preserve">
          <source>Do some work in the newly created Git repository:</source>
          <target state="translated">新しく作成したGitリポジトリで作業をします。</target>
        </trans-unit>
        <trans-unit id="d54d62a688502dd57d02a2d25bcfc45fa6646725" translate="yes" xml:space="preserve">
          <source>Do we want to maintain that ability or simply write to the existing Trace2 targets (and convert &amp;lt;key&amp;gt; to a &quot;category&quot;).</source>
          <target state="translated">その機能を維持したいですか、それとも単に既存のTrace2ターゲットに書き込みますか（そして&amp;lt;key&amp;gt;を「カテゴリ」に変換しますか）。</target>
        </trans-unit>
        <trans-unit id="93e5f9e78ae780b1443364c8b7bf637aab6beb2e" translate="yes" xml:space="preserve">
          <source>Do your work in your repository on &lt;code&gt;master&lt;/code&gt; branch.</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; ブランチのリポジトリで作業を行います。</target>
        </trans-unit>
        <trans-unit id="5732ac98ebf7d9e51cffa639f3f3c4cdaefb04a8" translate="yes" xml:space="preserve">
          <source>Does not have a default value; you must configure this variable to enable note rewriting.</source>
          <target state="translated">ノートの書き換えを有効にするには、この変数を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2a5f7374d914462e8df26d1af49c06790c2a1cc2" translate="yes" xml:space="preserve">
          <source>Does not have a default value; you must configure this variable to enable note rewriting. Set it to &lt;code&gt;refs/notes/commits&lt;/code&gt; to enable rewriting for the default commit notes.</source>
          <target state="translated">デフォルト値はありません。メモの書き換えを有効にするには、この変数を構成する必要があります。 &lt;code&gt;refs/notes/commits&lt;/code&gt; に設定して、デフォルトのコミットノートの書き換えを有効にします。</target>
        </trans-unit>
        <trans-unit id="42b7d5032e74e82b8de24d902e036f1902672dbe" translate="yes" xml:space="preserve">
          <source>Does not touch the index file or the working tree at all (but resets the head to &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;, just like all modes do). This leaves all your changed files &quot;Changes to be committed&quot;, as &lt;code&gt;git status&lt;/code&gt; would put it.</source>
          <target state="translated">インデックスファイルや作業ツリーにはまったく触れません（ただし、すべてのモードと同様に、ヘッドを &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; にリセットします）。これ葉、すべての変更されたファイル「の変更にコミットする」、 &lt;code&gt;git status&lt;/code&gt; それを置くでしょう。</target>
        </trans-unit>
        <trans-unit id="b8aff1882bc4744bec2ac3cf958c11aa9673615c" translate="yes" xml:space="preserve">
          <source>Does this seem a bit complicated? It &lt;strong&gt;should&lt;/strong&gt; be. There is no way that it would be correct to just &quot;fix&quot; it automatically. People need to know that their tags might have been changed.</source>
          <target state="translated">これは少し複雑に見えますか？ある&lt;strong&gt;べきだ&lt;/strong&gt;。自動的に「修正」するだけでは正しい方法はありません。タグが変更された可能性があることを知っておく必要があります。</target>
        </trans-unit>
        <trans-unit id="61f5489636e8756fab43669da94d9c6eb1552eb4" translate="yes" xml:space="preserve">
          <source>Doing a &lt;code&gt;git describe&lt;/code&gt; on a tag-name will just show the tag name:</source>
          <target state="translated">タグ名に対して &lt;code&gt;git describe&lt;/code&gt; を実行すると、タグ名が表示されます。</target>
        </trans-unit>
        <trans-unit id="4b69a1e19eb2053bb173df0509ff0e4b7b042821" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t actually add the file(s), just show if they exist and/or will be ignored.</source>
          <target state="translated">実際にはファイルを追加せず、ファイルが存在するかどうか、および/または無視されるかどうかだけを表示します。</target>
        </trans-unit>
        <trans-unit id="f54d87f7c2ff7fc56cad12eba47750dc91bee0b4" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t actually remove any file(s). Instead, just show if they exist in the index and would otherwise be removed by the command.</source>
          <target state="translated">実際にはファイルを削除しないでください。代わりに、それらがインデックスに存在するかどうかを表示し、それ以外の場合はコマンドによって削除されます。</target>
        </trans-unit>
        <trans-unit id="3c2e4a22e8795c4f8e08b8be88d75867a6768a7f" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t actually remove any objects, only show those that would have been removed.</source>
          <target state="translated">実際にはオブジェクトを削除せず、削除されるオブジェクトのみを表示します。</target>
        </trans-unit>
        <trans-unit id="8a190a462c45d47d231a38f49fbd7f2f651bc199" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t actually remove anything, just show what would be done.</source>
          <target state="translated">実際には何も削除せず、何が行われるかを示します。</target>
        </trans-unit>
        <trans-unit id="788dd7013c132044903c150a0852f5a8328a9d58" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t add the file(s), but only refresh their stat() information in the index.</source>
          <target state="translated">ファイルを追加せず、インデックス内のstat（）情報のみを更新します。</target>
        </trans-unit>
        <trans-unit id="f4886df5278511a526465d27599221df6718296c" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t allow recursing into subdirectories</source>
          <target state="translated">サブディレクトリへの再帰を許可しない</target>
        </trans-unit>
        <trans-unit id="2b7948ae75b37ecb202b98940fbd260554ad9c60" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t apply changes to files matching the given path pattern. This can be useful when importing patchsets, where you want to exclude certain files or directories.</source>
          <target state="translated">指定されたパスパターンに一致するファイルに変更を適用しないでください。これは、特定のファイルまたはディレクトリを除外するパッチセットをインポートするときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="2f2b3b379c55090808ba7e10cb915259f5f77fb1" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t bother trying to optimize the frontend to stick to one branch at a time during an import. Although doing so might be slightly faster for fast-import, it tends to increase the complexity of the frontend code considerably.</source>
          <target state="translated">インポート中にフロントエンドを一度に1つのブランチに固執するように最適化しようとしないでください。これを行うと、高速インポートの場合はわずかに速くなる可能性がありますが、フロントエンドコードの複雑さが大幅に増加する傾向があります。</target>
        </trans-unit>
        <trans-unit id="9fcb0638343c39672840bc9fb655ac9cf336ccdb" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t check for &lt;code&gt;gitcvs.enabled&lt;/code&gt; in config. You also have to specify a list of allowed directories (see below) if you want to use this option.</source>
          <target state="translated">設定で &lt;code&gt;gitcvs.enabled&lt;/code&gt; をチェックしないでください。このオプションを使用する場合は、許可されたディレクトリのリスト（以下を参照）も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f17e0ba24864a0b6291f2e5b252834a0764b0842" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t checkout new files, only refresh files already checked out.</source>
          <target state="translated">新しいファイルをチェックアウトせず、チェックアウト済みのファイルのみを更新します。</target>
        </trans-unit>
        <trans-unit id="22dcca7d230068e332b541f07dc3e71c28dc5b04" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t clone any tags, and set &lt;code&gt;remote.&amp;lt;remote&amp;gt;.tagOpt=--no-tags&lt;/code&gt; in the config, ensuring that future &lt;code&gt;git pull&lt;/code&gt; and &lt;code&gt;git fetch&lt;/code&gt; operations won&amp;rsquo;t follow any tags. Subsequent explicit tag fetches will still work, (see &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;).</source>
          <target state="translated">タグを複製しないで、 &lt;code&gt;remote.&amp;lt;remote&amp;gt;.tagOpt=--no-tags&lt;/code&gt; をconfigに設定して、将来の &lt;code&gt;git pull&lt;/code&gt; および &lt;code&gt;git fetch&lt;/code&gt; 操作がタグに追従しないようにします。後続の明示的なタグフェッチは引き続き機能します（&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="3928941c430ea9498986b54cb54f9b256c71e581" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t confuse that object with the file &lt;code&gt;hello&lt;/code&gt; itself. The object is literally just those specific &lt;strong&gt;contents&lt;/strong&gt; of the file, and however much you later change the contents in file &lt;code&gt;hello&lt;/code&gt;, the object we just looked at will never change. Objects are immutable.</source>
          <target state="translated">そのオブジェクトをファイル &lt;code&gt;hello&lt;/code&gt; 自体と混同しないでください。オブジェクトは文字通り、ファイルの特定の&lt;strong&gt;内容&lt;/strong&gt;にすぎませんが、後でファイル &lt;code&gt;hello&lt;/code&gt; の内容を変更しても、今見たオブジェクトは決して変更されません。オブジェクトは不変です。</target>
        </trans-unit>
        <trans-unit id="cf554901f1ba37dc7b685eec286604a92a0846c0" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t look in the index when undertaking the checks. This can be used to debug why a path became tracked by e.g. &lt;code&gt;git add .&lt;/code&gt; and was not ignored by the rules as expected by the user or when developing patterns including negation to match a path previously added with &lt;code&gt;git add -f&lt;/code&gt;.</source>
          <target state="translated">チェックを行うときにインデックスを調べないでください。これは、パスが &lt;code&gt;git add .&lt;/code&gt; によって追跡された理由をデバッグするために使用できます。また、ユーザーが予期したとおり、または以前に &lt;code&gt;git add -f&lt;/code&gt; で追加されたパスと一致する否定を含むパターンを開発する際に、ルールによって無視されませんでした。</target>
        </trans-unit>
        <trans-unit id="5a869b3f77007c08fe64b3ee7ff33b9bfbbe7c94" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t match the pattern in binary files.</source>
          <target state="translated">バイナリファイルのパターンと一致させないでください。</target>
        </trans-unit>
        <trans-unit id="5a5ec41a36a96759ae5f2ddb0abb3aacee88e9b9" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t output anything, just set exit status. This is only valid with a single pathname.</source>
          <target state="translated">何も出力せず、終了ステータスを設定します。これは、単一のパス名でのみ有効です。</target>
        </trans-unit>
        <trans-unit id="c7bdd135c2e86877ecc2a31a6eaa651f0cae6dc5" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t print anything to standard output. This form is primarily meant to allow the caller to test the exit status to see if a range of objects is fully connected (or not). It is faster than redirecting stdout to &lt;code&gt;/dev/null&lt;/code&gt; as the output does not have to be formatted.</source>
          <target state="translated">標準出力には何も出力しません。このフォームの主な目的は、呼び出し側が終了ステータスをテストして、オブジェクトの範囲が完全に接続されているかどうかを確認できるようにすることです。出力をフォーマットする必要がないため、stdoutを &lt;code&gt;/dev/null&lt;/code&gt; にリダイレクトするよりも高速です。</target>
        </trans-unit>
        <trans-unit id="0fe178924f571848754ae3ca5c4cf62bf5caeff8" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t prompt before each invocation of the merge resolution program. This is the default if the merge resolution program is explicitly specified with the &lt;code&gt;--tool&lt;/code&gt; option or with the &lt;code&gt;merge.tool&lt;/code&gt; configuration variable.</source>
          <target state="translated">マージ解決プログラムを呼び出す前にプロンプ​​トを表示しないでください。マージ解決プログラムが &lt;code&gt;--tool&lt;/code&gt; オプションまたは &lt;code&gt;merge.tool&lt;/code&gt; 構成変数で明示的に指定されている場合、これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="aa836ce110cb6ce4b0a545e26c40cb721f663696" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t require an exact match if given an SVN revision, instead find the commit corresponding to the state of the SVN repository (on the current branch) at the specified revision.</source>
          <target state="translated">SVNリビジョンが指定されている場合、完全一致は必要ありません。代わりに、指定されたリビジョンの（現在のブランチ上の）SVNリポジトリの状態に対応するコミットを見つけます。</target>
        </trans-unit>
        <trans-unit id="30faa3ecbc3ccb0ab260167231bedadc40f9ae9d" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t require an exact match if given an SVN revision; if there is not an exact match return the closest match searching forward in the history.</source>
          <target state="translated">SVNリビジョンが指定されている場合、完全一致は必要ありません。完全に一致するものがない場合は、履歴を順方向に検索して最も近い一致を返します。</target>
        </trans-unit>
        <trans-unit id="ef2daf7d2683c0bf520ff3f8d38713d17a81ee22" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t require objects present in packs from alternate object directories to be present in local packs.</source>
          <target state="translated">代替オブジェクトディレクトリのパックにあるオブジェクトがローカルパックにある必要はありません。</target>
        </trans-unit>
        <trans-unit id="e1e770659b3cd4fc8fd1b8c1f885e57fa2890f04" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t rescan the working directory for changes after the tool finishes execution.</source>
          <target state="translated">ツールの実行終了後、変更がないか作業ディレクトリを再スキャンしないでください。</target>
        </trans-unit>
        <trans-unit id="1955458ea299c15696f62795bf10129efdff9000" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t use the standard ignore rules (see &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;), but still use the ignore rules given with &lt;code&gt;-e&lt;/code&gt; options from the command line. This allows removing all untracked files, including build products. This can be used (possibly in conjunction with &lt;code&gt;git restore&lt;/code&gt; or &lt;code&gt;git reset&lt;/code&gt;) to create a pristine working directory to test a clean build.</source>
          <target state="translated">標準の無視ルール（&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]を&lt;/a&gt;参照）を使用しないでください。ただし、コマンドラインの &lt;code&gt;-e&lt;/code&gt; オプションで指定された無視ルールを使用してください。これにより、ビルド製品を含むすべての追跡されていないファイルを削除できます。これを（おそらく &lt;code&gt;git restore&lt;/code&gt; または &lt;code&gt;git reset&lt;/code&gt; と組み合わせて）使用して、クリーンビルドをテストするための初期の作業ディレクトリを作成できます。</target>
        </trans-unit>
        <trans-unit id="95e3ebfd9dfe40579e0e7bb35d42c2f1d1029d68" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t worry about the fact that the file that the &lt;code&gt;HEAD&lt;/code&gt; link points to doesn&amp;rsquo;t even exist yet &amp;mdash; you haven&amp;rsquo;t created the commit that will start your &lt;code&gt;HEAD&lt;/code&gt; development branch yet.</source>
          <target state="translated">&lt;code&gt;HEAD&lt;/code&gt; リンクが指すファイルがまだ存在しないという事実を心配する必要はありません &lt;code&gt;HEAD&lt;/code&gt; 開発ブランチを開始するコミットをまだ作成していません。</target>
        </trans-unit>
        <trans-unit id="1da5527fefac2ac016e63872cd219c0c8262438e" translate="yes" xml:space="preserve">
          <source>Don&amp;rsquo;t write objects with broken content or links.</source>
          <target state="translated">コンテンツやリンクが壊れているオブジェクトを作成しないでください。</target>
        </trans-unit>
        <trans-unit id="e7a1a9f0e0a5a192e64b7762fcd9606f05d43ef7" translate="yes" xml:space="preserve">
          <source>Dotted Range Notations</source>
          <target state="translated">点線の範囲表記</target>
        </trans-unit>
        <trans-unit id="fe1f0cdd2295f0fc3d04581839d09ed55a16a282" translate="yes" xml:space="preserve">
          <source>Download from a remote Git repository via HTTP</source>
          <target state="translated">リモートの Git リポジトリから HTTP 経由でダウンロード</target>
        </trans-unit>
        <trans-unit id="836b914c612e9d15306b7c7c51825eb694378b40" translate="yes" xml:space="preserve">
          <source>Download objects and refs from another repository</source>
          <target state="translated">他のリポジトリからオブジェクトや参照をダウンロードする</target>
        </trans-unit>
        <trans-unit id="8d0359221c31b38a499fab5fd3539fb10094e3f5" translate="yes" xml:space="preserve">
          <source>Downloader from http and https URL first obtains the topmost commit object name from the remote site by looking at the specified refname under &lt;code&gt;repo.git/refs/&lt;/code&gt; directory, and then tries to obtain the commit object by downloading from &lt;code&gt;repo.git/objects/xx/xxx...&lt;/code&gt; using the object name of that commit object. Then it reads the commit object to find out its parent commits and the associate tree object; it repeats this process until it gets all the necessary objects. Because of this behavior, they are sometimes also called &lt;code&gt;commit walkers&lt;/code&gt;.</source>
          <target state="translated">httpおよびhttpsのURLからのダウンローダーは、最初に &lt;code&gt;repo.git/refs/&lt;/code&gt; ディレクトリーの下の指定されたrefnameを調べてリモートサイトから最上位のコミットオブジェクト名を取得し、次に &lt;code&gt;repo.git/objects/xx/xxx...&lt;/code&gt; からダウンロードしてコミットオブジェクトを取得しようとします。 / xxx ...そのコミットオブジェクトのオブジェクト名を使用します。次に、コミットオブジェクトを読み取り、その親コミットと関連するツリーオブジェクトを見つけます。必要なオブジェクトをすべて取得するまで、このプロセスを繰り返します。この動作のため、それらは「 &lt;code&gt;commit walkers&lt;/code&gt; とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="412ca0a4593b6bb25e0ce340f46f24955e9564f1" translate="yes" xml:space="preserve">
          <source>Downloads a remote Git repository via HTTP.</source>
          <target state="translated">リモートの Git リポジトリを HTTP でダウンロードします。</target>
        </trans-unit>
        <trans-unit id="d85415280c4796b4419737c81adcd5229edbb60b" translate="yes" xml:space="preserve">
          <source>Draw a text-based graphical representation of the commit history on the left hand side of the output. This may cause extra lines to be printed in between commits, in order for the graph history to be drawn properly. Cannot be combined with &lt;code&gt;--no-walk&lt;/code&gt;.</source>
          <target state="translated">出力の左側に、コミット履歴のテキストベースのグラフィック表現を描画します。これにより、グラフ履歴を適切に描画するために、コミットの間に余分な行が印刷される可能性があります。 &lt;code&gt;--no-walk&lt;/code&gt; と組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="b9a3e66d069ffbfcdae00ac848d80a3d7117cd5f" translate="yes" xml:space="preserve">
          <source>Driving a bisection automatically</source>
          <target state="translated">二等分線を自動運転</target>
        </trans-unit>
        <trans-unit id="8c3114460a846e0f3462ade2fcc59d06117961f0" translate="yes" xml:space="preserve">
          <source>Driving a bisection manually</source>
          <target state="translated">二等分線を手動で運転する</target>
        </trans-unit>
        <trans-unit id="cae458d58531d4d41393b21599b7e5c5946ef1f2" translate="yes" xml:space="preserve">
          <source>Dry run. Check the pack file without actually unpacking the objects.</source>
          <target state="translated">ドライラン。実際にオブジェクトを解凍せずにパックファイルをチェックします。</target>
        </trans-unit>
        <trans-unit id="5c890eaf0d21c06618fd87da2696a29e291c6564" translate="yes" xml:space="preserve">
          <source>Due to historical reasons a relative &lt;code&gt;filename&lt;/code&gt; is first searched relative to the current directory for &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;clone&lt;/code&gt; and relative to the root of the working tree for &lt;code&gt;fetch&lt;/code&gt;. If &lt;code&gt;filename&lt;/code&gt; is not found, it is searched like any other command in &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="translated">歴史的な理由により、相対 &lt;code&gt;filename&lt;/code&gt; は最初に &lt;code&gt;init&lt;/code&gt; と &lt;code&gt;clone&lt;/code&gt; の場合は現在のディレクトリに関連して検索され、 &lt;code&gt;fetch&lt;/code&gt; の場合は作業ツリーのルートに関連して検索されます。 &lt;code&gt;filename&lt;/code&gt; が見つからない場合は、 &lt;code&gt;$PATH&lt;/code&gt; 他のコマンドと同様に検索されます。</target>
        </trans-unit>
        <trans-unit id="7ad95c4fe8f7afde6130611f6d6b430e519d5657" translate="yes" xml:space="preserve">
          <source>Due to limitations of the current implementation, some configuration variables do not take effect until after the initial fetch and checkout. Configuration variables known to not take effect are: &lt;code&gt;remote.&amp;lt;name&amp;gt;.mirror&lt;/code&gt; and &lt;code&gt;remote.&amp;lt;name&amp;gt;.tagOpt&lt;/code&gt;. Use the corresponding &lt;code&gt;--mirror&lt;/code&gt; and &lt;code&gt;--no-tags&lt;/code&gt; options instead.</source>
          <target state="translated">現在の実装の制限により、一部の構成変数は、最初のフェッチとチェックアウトが完了するまで有効になりません。効果がないことがわかっている構成変数は、 &lt;code&gt;remote.&amp;lt;name&amp;gt;.mirror&lt;/code&gt; および &lt;code&gt;remote.&amp;lt;name&amp;gt;.tagOpt&lt;/code&gt; です。代わりに、対応する &lt;code&gt;--mirror&lt;/code&gt; および &lt;code&gt;--no-tags&lt;/code&gt; オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="d45f204a58b5658a36a8173fede6b8a78f6ae4f4" translate="yes" xml:space="preserve">
          <source>Due to the immutable nature of Git objects, old objects can be archived into shared, read-only directories. This variable specifies a &quot;:&quot; separated (on Windows &quot;;&quot; separated) list of Git object directories which can be used to search for Git objects. New objects will not be written to these directories.</source>
          <target state="translated">Git オブジェクトは不変の性質を持っているため、古いオブジェクトを共有の読み取り専用ディレクトリにアーカイブすることができます。この変数は、&quot;:&quot; で区切られた (Windows では &quot;;&quot; で区切られた)Git オブジェクトディレクトリのリストを指定します。新しいオブジェクトは、これらのディレクトリには書き込まれません。</target>
        </trans-unit>
        <trans-unit id="23b7a95dc6b5470754cb8fce020cce7d3aab1ac0" translate="yes" xml:space="preserve">
          <source>Due to the non-quarantine nature of the &lt;code&gt;fetch.fsckObjects&lt;/code&gt; implementation it cannot be relied upon to leave the object store clean like &lt;code&gt;receive.fsckObjects&lt;/code&gt; can.</source>
          <target state="translated">原因の非検疫自然に &lt;code&gt;fetch.fsckObjects&lt;/code&gt; の実装、のようなきれいなオブジェクトストアを残すために依存することはできません &lt;code&gt;receive.fsckObjects&lt;/code&gt; ことができます。</target>
        </trans-unit>
        <trans-unit id="68e19d88dc6eefe7753376e94bb2d970e8771158" translate="yes" xml:space="preserve">
          <source>Dumps the internal marks table to &amp;lt;file&amp;gt; when complete. Marks are written one per line as &lt;code&gt;:markid SHA-1&lt;/code&gt;. Frontends can use this file to validate imports after they have been completed, or to save the marks table across incremental runs. As &amp;lt;file&amp;gt; is only opened and truncated at checkpoint (or completion) the same path can also be safely given to --import-marks.</source>
          <target state="translated">完了時に内部マークテーブルを&amp;lt;file&amp;gt;にダンプします。マークは &lt;code&gt;:markid SHA-1&lt;/code&gt; として1行に1つ書き込まれます。フロントエンドはこのファイルを使用して、インポートが完了した後にインポートを検証したり、増分実行でマークテーブルを保存したりできます。 &amp;lt;file&amp;gt;はチェックポイント（または完了）でのみ開かれ、切り捨てられるため、同じパスを--import-marksに安全に指定することもできます。</target>
        </trans-unit>
        <trans-unit id="d5f9d9df34707e95a5d4be8e3705f8049d385295" translate="yes" xml:space="preserve">
          <source>Dumps the internal marks table to &amp;lt;file&amp;gt; when complete. Marks are written one per line as &lt;code&gt;:markid SHA-1&lt;/code&gt;. Only marks for revisions are dumped; marks for blobs are ignored. Backends can use this file to validate imports after they have been completed, or to save the marks table across incremental runs. As &amp;lt;file&amp;gt; is only opened and truncated at completion, the same path can also be safely given to --import-marks. The file will not be written if no new object has been marked/exported.</source>
          <target state="translated">完了時に内部マークテーブルを&amp;lt;file&amp;gt;にダンプします。マークは &lt;code&gt;:markid SHA-1&lt;/code&gt; として1行に1つ書き込まれます。リビジョンのマークのみがダンプされます。 blobのマークは無視されます。バックエンドは、このファイルを使用して、インポートが完了した後にインポートを検証したり、増分実行にわたってマークテーブルを保存したりできます。 &amp;lt;file&amp;gt;は開いて完了時にのみ切り捨てられるため、同じパスを--import-marksに安全に指定することもできます。新しいオブジェクトがマーク/エクスポートされていない場合、ファイルは書き込まれません。</target>
        </trans-unit>
        <trans-unit id="aec3ad9b971b7ff8255345b154c94258f560f0d2" translate="yes" xml:space="preserve">
          <source>During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the common ancestor&amp;rsquo;s version, non-overlapping ones (that is, you changed an area of the file while the other side left that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what both sides did to that area.</source>
          <target state="translated">マージ中、作業ツリーファイルはマージの結果を反映するように更新されます。共通の祖先のバージョンに加えられた変更のうち、重複しないもの（つまり、ファイルの領域を変更し、反対側がその領域をそのまま残した、またはその逆）は、最終的な結果にそのまま組み込まれます。ただし、両側が同じ領域に変更を加えた場合、Gitは片側をもう片方にランダムに選択することはできず、両側がその領域に行ったことを残して解決するように求めます。</target>
        </trans-unit>
        <trans-unit id="d0b0f9a14f12b4d06a31ddb153754d3c653f1bb2" translate="yes" xml:space="preserve">
          <source>During fsck git may find issues with legacy data which wouldn&amp;rsquo;t be generated by current versions of git, and which wouldn&amp;rsquo;t be sent over the wire if &lt;code&gt;transfer.fsckObjects&lt;/code&gt; was set. This feature is intended to support working with legacy repositories containing such data.</source>
          <target state="translated">fsckの実行中に、gitはレガシーデータの問題を検出する場合があります。これは、現在のバージョンのgitでは生成されず、 &lt;code&gt;transfer.fsckObjects&lt;/code&gt; が設定されている場合はネットワーク経由で送信されません。この機能は、そのようなデータを含むレガシーリポジトリの操作をサポートすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="0eedfc5c015b233e6082e4e46ded41bc5da25b25" translate="yes" xml:space="preserve">
          <source>During the merge, the index holds three versions of each file. Each of these three &quot;file stages&quot; represents a different version of the file:</source>
          <target state="translated">マージの間、インデックスは各ファイルの3つのバージョンを保持します。これら3つの &quot;ファイルステージ &quot;はそれぞれ異なるバージョンのファイルを表します。</target>
        </trans-unit>
        <trans-unit id="338f11841fc746012903e84c16b88356c6508da5" translate="yes" xml:space="preserve">
          <source>During the normal execution of several Git commands, call-outs are made to optional scripts that allow a developer to add functionality or checking. Typically, the hooks allow for a command to be pre-verified and potentially aborted, and allow for a post-notification after the operation is done. The hook scripts are found in the &lt;code&gt;$GIT_DIR/hooks/&lt;/code&gt; directory, and are enabled by simply removing the &lt;code&gt;.sample&lt;/code&gt; suffix from the filename. In earlier versions of Git you had to make them executable.</source>
          <target state="translated">複数のGitコマンドの通常の実行中に、開発者が機能を追加したりチェックしたりできるオプションのスクリプトが呼び出されます。通常、フックを使用すると、コマンドを事前に検証して中止できる可能性があり、操作の完了後に通知を行うことができます。フックスクリプトは &lt;code&gt;$GIT_DIR/hooks/&lt;/code&gt; ディレクトリにあり、ファイル名から &lt;code&gt;.sample&lt;/code&gt; サフィックスを削除するだけで有効になります。以前のバージョンのGitでは、それらを実行可能にする必要がありました。</target>
        </trans-unit>
        <trans-unit id="0c9afe2970bcd3db38ea14d913886ce00bad52d6" translate="yes" xml:space="preserve">
          <source>E.g, &lt;code&gt;format:&quot;The author of %h was %an, %ar%nThe title was &amp;gt;&amp;gt;%s&amp;lt;&amp;lt;%n&quot;&lt;/code&gt; would show something like this:</source>
          <target state="translated">例： &lt;code&gt;format:&quot;The author of %h was %an, %ar%nThe title was &amp;gt;&amp;gt;%s&amp;lt;&amp;lt;%n&quot;&lt;/code&gt; は次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="f48496348ce670a87dfe7a89fce6efc7850de45b" translate="yes" xml:space="preserve">
          <source>EVENT Format</source>
          <target state="translated">イベントフォーマット</target>
        </trans-unit>
        <trans-unit id="6c7b6f5f1d21b52d57339a7396d0f52ff8e6b468" translate="yes" xml:space="preserve">
          <source>Each &quot;index&quot; entry has two bits worth of &quot;stage&quot; state. stage 0 is the normal one, and is the only one you&amp;rsquo;d see in any kind of normal use.</source>
          <target state="translated">各「インデックス」エントリには、2ビット分の「ステージ」状態があります。ステージ0は通常のステージであり、あらゆる種類の通常の使用で見られる唯一のステージです。</target>
        </trans-unit>
        <trans-unit id="81f54a7f6a9b658757fad1b0dd5d1a9971c93ea4" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;%feature&lt;/code&gt; hash element is a hash reference and has the following structure:</source>
          <target state="translated">各 &lt;code&gt;%feature&lt;/code&gt; ハッシュ要素はハッシュ参照であり、次の構造を持っています：</target>
        </trans-unit>
        <trans-unit id="b26592933b83f1f492565be647afc2706b49b317" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;-p&lt;/code&gt; indicates the id of a parent commit object.</source>
          <target state="translated">各 &lt;code&gt;-p&lt;/code&gt; は、親コミットオブジェクトのIDを示します。</target>
        </trans-unit>
        <trans-unit id="e2a09fd45cc17448d565b97a290193dc0600d3ce" translate="yes" xml:space="preserve">
          <source>Each action is implemented as a subroutine, and must be present in %actions hash. Some actions are disabled by default, and must be turned on via feature mechanism. For example to enable &lt;code&gt;blame&lt;/code&gt; view add the following to gitweb configuration file:</source>
          <target state="translated">各アクションはサブルーチンとして実装され、％actionsハッシュに存在する必要があります。一部のアクションはデフォルトで無効になっており、機能メカニズムを介してオンにする必要があります。たとえば、 &lt;code&gt;blame&lt;/code&gt; ビューを有効にするには、gitweb構成ファイルに以下を追加します。</target>
        </trans-unit>
        <trans-unit id="4a431caa46e2fb6d34e98615d6339148b9977f86" translate="yes" xml:space="preserve">
          <source>Each attribute can be in one of these states for a given path:</source>
          <target state="translated">各属性は、与えられたパスに対して、これらの状態のいずれかになることができます。</target>
        </trans-unit>
        <trans-unit id="80fa6b90c4af909cefe5f1fba5144ae109300923" translate="yes" xml:space="preserve">
          <source>Each blame entry always starts with a line of:</source>
          <target state="translated">それぞれの非難エントリは常に行から始まります。</target>
        </trans-unit>
        <trans-unit id="890525cbde82d7616c57fdec079512ee27038efd" translate="yes" xml:space="preserve">
          <source>Each commit imported by &lt;code&gt;git p4&lt;/code&gt; has a line at the end of the log message indicating the p4 depot location and change number. This line is used by later &lt;code&gt;git p4 sync&lt;/code&gt; operations to know which p4 changes are new.</source>
          <target state="translated">&lt;code&gt;git p4&lt;/code&gt; によってインポートされた各コミットには、ログメッセージの最後にp4デポの場所と変更番号を示す行があります。この行は、どのp4の変更が新しいかを知るために、後の &lt;code&gt;git p4 sync&lt;/code&gt; 操作で使用されます。</target>
        </trans-unit>
        <trans-unit id="0d7aba1c95771e1fa299e8f177a2cb8fdb72c0d3" translate="yes" xml:space="preserve">
          <source>Each event is a JSON-object containing multiple key/value pairs written as a single line and followed by a LF.</source>
          <target state="translated">各イベントは、複数のキー/値のペアを含むJSONオブジェクトで、1行で記述され、その後にLFが続きます。</target>
        </trans-unit>
        <trans-unit id="93024a055d9225f66feed1627e9698b1aeced23b" translate="yes" xml:space="preserve">
          <source>Each group of changes (called a &quot;hunk&quot;) in the textual diff output is prefixed with a line of the form:</source>
          <target state="translated">テキスト diff 出力の各変更グループ(「ハンク」と呼ばれる)の前には、形式の行が付けられています。</target>
        </trans-unit>
        <trans-unit id="82afba91b0fbc1511d9d66475a7a1226634e3792" translate="yes" xml:space="preserve">
          <source>Each instruction has variable length. Instruction type is determined by the seventh bit of the first octet. The following diagrams follow the convention in RFC 1951 (Deflate compressed data format).</source>
          <target state="translated">各命令は可変長です。命令の種類は、最初のオクテットの7番目のビットによって決定されます。以下の図は、RFC 1951 (Deflate compressed data format)の規約に従っています。</target>
        </trans-unit>
        <trans-unit id="e70c1e613f5f534aeea8db8eaf0d4059228f6833" translate="yes" xml:space="preserve">
          <source>Each line in &lt;code&gt;gitattributes&lt;/code&gt; file is of form:</source>
          <target state="translated">各行 &lt;code&gt;gitattributes&lt;/code&gt; のファイルの形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1c072d6c2cdd76489a2967b2e7ee81381c672ff3" translate="yes" xml:space="preserve">
          <source>Each line in a &lt;code&gt;gitignore&lt;/code&gt; file specifies a pattern. When deciding whether to ignore a path, Git normally checks &lt;code&gt;gitignore&lt;/code&gt; patterns from multiple sources, with the following order of precedence, from highest to lowest (within one level of precedence, the last matching pattern decides the outcome):</source>
          <target state="translated">各行 &lt;code&gt;gitignore&lt;/code&gt; のファイルには、パターンを指定します。パスを無視するかどうかを決定するとき、Gitは通常、複数のソースからの &lt;code&gt;gitignore&lt;/code&gt; パターンを次の優先順位で最高から最低まで（1レベルの優先順位内で、最後に一致するパターンが結果を決定します）確認します。</target>
        </trans-unit>
        <trans-unit id="d043aa624315c625b39f19b7c5a71a08d0fbefd2" translate="yes" xml:space="preserve">
          <source>Each line of options has this format:</source>
          <target state="translated">オプションの各行には、この形式があります。</target>
        </trans-unit>
        <trans-unit id="ce263659ab1a0135f8fda2a68c8ecc96cb2e4b52" translate="yes" xml:space="preserve">
          <source>Each line of the &lt;code&gt;git ls-files --unmerged&lt;/code&gt; output begins with the blob mode bits, blob SHA-1, 'stage number', and the filename. The 'stage number' is Git&amp;rsquo;s way to say which tree it came from: stage 1 corresponds to the &lt;code&gt;$orig&lt;/code&gt; tree, stage 2 to the &lt;code&gt;HEAD&lt;/code&gt; tree, and stage 3 to the &lt;code&gt;$target&lt;/code&gt; tree.</source>
          <target state="translated">各ライン &lt;code&gt;git ls-files --unmerged&lt;/code&gt; 出力BLOBモードビット、BLOBのSHA-1、「段数」、およびファイル名で始まります。「ステージ番号」は、Gitがどのツリーから来たかを示す方法です。ステージ1は &lt;code&gt;$orig&lt;/code&gt; ツリーに対応し、ステージ2は &lt;code&gt;HEAD&lt;/code&gt; ツリーに対応し、ステージ3は &lt;code&gt;$target&lt;/code&gt; ツリーに対応します。</target>
        </trans-unit>
        <trans-unit id="ac1b4287ed9a44af81d40c798f15ea7666d1fc7e" translate="yes" xml:space="preserve">
          <source>Each linked working tree has a private sub-directory in the repository&amp;rsquo;s $GIT_DIR/worktrees directory. The private sub-directory&amp;rsquo;s name is usually the base name of the linked working tree&amp;rsquo;s path, possibly appended with a number to make it unique. For example, when &lt;code&gt;$GIT_DIR=/path/main/.git&lt;/code&gt; the command &lt;code&gt;git worktree add /path/other/test-next next&lt;/code&gt; creates the linked working tree in &lt;code&gt;/path/other/test-next&lt;/code&gt; and also creates a &lt;code&gt;$GIT_DIR/worktrees/test-next&lt;/code&gt; directory (or &lt;code&gt;$GIT_DIR/worktrees/test-next1&lt;/code&gt; if &lt;code&gt;test-next&lt;/code&gt; is already taken).</source>
          <target state="translated">リンクされた各作業ツリーには、リポジトリの$ GIT_DIR / worktreesディレクトリにプライベートサブディレクトリがあります。プライベートサブディレクトリの名前は通常、リンクされた作業ツリーのパスのベース名であり、一意にするために番号が追加されている可能性があります。たとえば、 &lt;code&gt;$GIT_DIR=/path/main/.git&lt;/code&gt; コマンド &lt;code&gt;git worktree add /path/other/test-next next&lt;/code&gt; は、リンクされた作業ツリーを &lt;code&gt;/path/other/test-next&lt;/code&gt; に作成し、さらに &lt;code&gt;$GIT_DIR/worktrees/test-next&lt;/code&gt; 作成します。/ test-nextディレクトリ（ &lt;code&gt;test-next&lt;/code&gt; がすでに取得されている場合は &lt;code&gt;$GIT_DIR/worktrees/test-next1&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0e13434b85bdba9c36937ef9acd2f33c427adfe8" translate="yes" xml:space="preserve">
          <source>Each of the attribute requirements for the path takes one of these forms:</source>
          <target state="translated">パスの各属性要件は、以下のいずれかの形式をとります。</target>
        </trans-unit>
        <trans-unit id="58398b8104bc9622bb9865f6e7c9793546a9471d" translate="yes" xml:space="preserve">
          <source>Each of the four branches is usually a direct descendant of the one above it.</source>
          <target state="translated">4つの枝のそれぞれは、通常、その上の枝の直系の子孫です。</target>
        </trans-unit>
        <trans-unit id="dfc2dc1cc1f2e4f6e3d7ce6e6191c01415d0880b" translate="yes" xml:space="preserve">
          <source>Each of these options must appear first on the command line.</source>
          <target state="translated">これらのオプションのそれぞれは、コマンドラインで最初に表示される必要があります。</target>
        </trans-unit>
        <trans-unit id="79d9036a8f3f011f6caea432d8fa6198deb15d8c" translate="yes" xml:space="preserve">
          <source>Each other line contains a single pattern.</source>
          <target state="translated">他の各行には1つのパターンが含まれています。</target>
        </trans-unit>
        <trans-unit id="36e6db0cb81d09d2c644d8a7c4b702648cc38f78" translate="yes" xml:space="preserve">
          <source>Each patch can be applied in order.</source>
          <target state="translated">それぞれのパッチは順番に貼ることができます。</target>
        </trans-unit>
        <trans-unit id="6d39c2ae5926cd9b5a6631ab32e0430d3e598f09" translate="yes" xml:space="preserve">
          <source>Each patch includes a single logical change, together with a message explaining the change.</source>
          <target state="translated">それぞれのパッチには、論理的な変更点が1つと、その変更点を説明するメッセージが含まれています。</target>
        </trans-unit>
        <trans-unit id="493d693b4f2b5ea37d0460dc9ff9f76e6d401041" translate="yes" xml:space="preserve">
          <source>Each pattern pair consists of the source side (before the colon) and the destination side (after the colon). The ref to be pushed is determined by finding a match that matches the source side, and where it is pushed is determined by using the destination side.</source>
          <target state="translated">各パターンペアは、ソース側(コロンの前)とデスティネーション側(コロンの後)で構成されています。押されるRefは、ソース側に一致するマッチを見つけることで決定され、どこに押されるかは、デスティネーション側を利用して決定されます。</target>
        </trans-unit>
        <trans-unit id="b313cea753099ce8f3968fb8a5c9e65e86c611ac" translate="yes" xml:space="preserve">
          <source>Each pattern pair consists of the source side (before the colon) and the destination side (after the colon). The ref to be pushed is determined by finding a match that matches the source side, and where it is pushed is determined by using the destination side. The rules used to match a ref are the same rules used by &lt;code&gt;git rev-parse&lt;/code&gt; to resolve a symbolic ref name. See &lt;a href=&quot;git-rev-parse&quot;&gt;git-rev-parse[1]&lt;/a&gt;.</source>
          <target state="translated">各パターンのペアは、ソース側（コロンの前）と宛先側（コロンの後）で構成されます。プッシュされる参照は、ソース側と一致する一致を見つけることによって決定され、プッシュされる場所は宛先側を使用して決定されます。refの照合に使用されるルールは、シンボリックref名を解決するために &lt;code&gt;git rev-parse&lt;/code&gt; で使用されるルールと同じです。&lt;a href=&quot;git-rev-parse&quot;&gt;git-rev-parse [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b2aa7f4f33bfb7b26b4af691cb7e2c6d52612b8b" translate="yes" xml:space="preserve">
          <source>Each remote helper is expected to support only a subset of commands. The operations a helper supports are declared to Git in the response to the &lt;code&gt;capabilities&lt;/code&gt; command (see COMMANDS, below).</source>
          <target state="translated">各リモートヘルパーは、コマンドのサブセットのみをサポートすることが期待されています。ヘルパーがサポートする操作は、 &lt;code&gt;capabilities&lt;/code&gt; コマンドへの応答でGitに宣言されます（以下のコマンドを参照）。</target>
        </trans-unit>
        <trans-unit id="640db855296fc622a8934e713d8f1835acdff3f5" translate="yes" xml:space="preserve">
          <source>Each time a new shared index file is created, the old shared index files are deleted if their modification time is older than what is specified by the splitIndex.sharedIndexExpire config variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">新しい共有インデックスファイルが作成されるたびに、変更時刻がsplitIndex.sharedIndexExpire構成変数で指定されたものよりも古い場合、古い共有インデックスファイルは削除されます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="6b67247d73793e579b74a9b09ccf935b5a398f89" translate="yes" xml:space="preserve">
          <source>Each time a superproject update moves a populated submodule (e.g. when switching between commits before and after the move) a stale submodule checkout will remain in the old location and an empty directory will appear in the new location. To populate the submodule again in the new location the user will have to run &quot;git submodule update&quot; afterwards. Removing the old directory is only safe when it uses a gitfile, as otherwise the history of the submodule will be deleted too. Both steps will be obsolete when recursive submodule update has been implemented.</source>
          <target state="translated">スーパープロジェクトの更新がサブモジュールを移動するたびに (移動の前後でコミットを切り替えるときなど)、古いサブモジュールのチェックアウトが古い場所に残ってしまい、新しい場所には空のディレクトリが表示されます。新しい場所に再びサブモジュールを配置するには、その後で &quot;git submodule update&quot; を実行しなければなりません。古いディレクトリを削除するのが安全なのは、gitfile を使っているときだけです。再帰的なサブモジュールの更新が実装された後では、どちらの手順も廃止されるでしょう。</target>
        </trans-unit>
        <trans-unit id="70398d4e57fc6de31488380bf7caac1138d58530" translate="yes" xml:space="preserve">
          <source>Each time a superproject update removes a populated submodule (e.g. when switching between commits before and after the removal) a stale submodule checkout will remain in the old location. Removing the old directory is only safe when it uses a gitfile, as otherwise the history of the submodule will be deleted too. This step will be obsolete when recursive submodule update has been implemented.</source>
          <target state="translated">スーパープロジェクトの更新のたびに (たとえば、削除の前後でコミットを切り替えるときなど)、古いサブモジュールのチェックアウトが古い場所に残ってしまいます。古いディレクトリを削除するのが安全なのは、gitfile を使っているときだけです。再帰的なサブモジュールの更新が実装されたときには、このステップは廃止されるでしょう。</target>
        </trans-unit>
        <trans-unit id="49035126eea24f612f322a34d235d8eeac55e17a" translate="yes" xml:space="preserve">
          <source>Each time you resolve the conflicts in a file and update the index:</source>
          <target state="translated">ファイル内の競合を解決してインデックスを更新するたびに</target>
        </trans-unit>
        <trans-unit id="91df855bba63011edb2c56419d0fb8efa1e50e11" translate="yes" xml:space="preserve">
          <source>Earlier we said that trivial merges are done inside &lt;code&gt;git read-tree -m&lt;/code&gt;. For example, if the file did not change from &lt;code&gt;$orig&lt;/code&gt; to &lt;code&gt;HEAD&lt;/code&gt; or &lt;code&gt;$target&lt;/code&gt;, or if the file changed from &lt;code&gt;$orig&lt;/code&gt; to &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;$orig&lt;/code&gt; to &lt;code&gt;$target&lt;/code&gt; the same way, obviously the final outcome is what is in &lt;code&gt;HEAD&lt;/code&gt;. What the above example shows is that file &lt;code&gt;hello.c&lt;/code&gt; was changed from &lt;code&gt;$orig&lt;/code&gt; to &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;$orig&lt;/code&gt; to &lt;code&gt;$target&lt;/code&gt; in a different way. You could resolve this by running your favorite 3-way merge program, e.g. &lt;code&gt;diff3&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, or Git&amp;rsquo;s own merge-file, on the blob objects from these three stages yourself, like this:</source>
          <target state="translated">以前、ささいなマージは &lt;code&gt;git read-tree -m&lt;/code&gt; 内で行われると述べました。たとえば、ファイルが &lt;code&gt;$orig&lt;/code&gt; から &lt;code&gt;HEAD&lt;/code&gt; または &lt;code&gt;$target&lt;/code&gt; に変更されなかった場合、またはファイルが &lt;code&gt;$orig&lt;/code&gt; から &lt;code&gt;HEAD&lt;/code&gt; および &lt;code&gt;$orig&lt;/code&gt; から &lt;code&gt;$target&lt;/code&gt; に同じように変更された場合、最終的な結果は &lt;code&gt;HEAD&lt;/code&gt; にあるものになります。上記の例は、ファイル &lt;code&gt;hello.c&lt;/code&gt; が &lt;code&gt;$orig&lt;/code&gt; から &lt;code&gt;HEAD&lt;/code&gt; に、 &lt;code&gt;$orig&lt;/code&gt; から &lt;code&gt;$target&lt;/code&gt; に別の方法で変更されたことを示しています。これを解決するには、お気に入りの3者間マージプログラム（ &lt;code&gt;diff3&lt;/code&gt; など)を実行します。、 &lt;code&gt;merge&lt;/code&gt; 、またはGit独自のmerge-fileで、次のように、これら3つのステージのblobオブジェクトを自分で作成します。</target>
        </trans-unit>
        <trans-unit id="cf0ee6adeaeadff98f7e216b0d8eb81b31226098" translate="yes" xml:space="preserve">
          <source>Earlier, we saw that one file under &lt;code&gt;.git/objects/??/&lt;/code&gt; directory is stored for each Git object you create. This representation is efficient to create atomically and safely, but not so convenient to transport over the network. Since Git objects are immutable once they are created, there is a way to optimize the storage by &quot;packing them together&quot;. The command</source>
          <target state="translated">以前に、作成したGitオブジェクトごとに、 &lt;code&gt;.git/objects/??/&lt;/code&gt; ディレクトリの下に1つのファイルが保存されていることを確認しました。この表現は、アトミックかつ安全に作成するのに効率的ですが、ネットワークを介した転送にはそれほど便利ではありません。Gitオブジェクトは一度作成すると不変であるため、「それらをまとめてパックする」ことでストレージを最適化する方法があります。コマンド</target>
        </trans-unit>
        <trans-unit id="b4c8a83331a00582f4030fa5296077717cda7730" translate="yes" xml:space="preserve">
          <source>Ease of use. It is often much simpler to write a binary to text transformation than it is to perform your own diff. In many cases, existing programs can be used as textconv filters (e.g., exif, odt2txt).</source>
          <target state="translated">使いやすさ。バイナリからテキストへの変換は、自分でdiffを実行するよりも、バイナリからテキストへの変換を書いた方がはるかに簡単であることが多いです。多くの場合、既存のプログラムをtextconvフィルタ(exif、odt2txtなど)として使用することができます。</target>
        </trans-unit>
        <trans-unit id="b4d52eb229c8c557c44ab0035085b989953060f9" translate="yes" xml:space="preserve">
          <source>Easily extendable as capabilities are moved into their own section of the protocol, no longer being hidden behind a NUL byte and limited by the size of a pkt-line</source>
          <target state="translated">能力がプロトコルの独自のセクションに移動し、NULバイトの後ろに隠されたり、pkt-lineのサイズに制限されたりすることがなくなり、容易に拡張可能になります。</target>
        </trans-unit>
        <trans-unit id="c0ecd6c3f25fc4cb4d76566a21fece2ca48f95ab" translate="yes" xml:space="preserve">
          <source>Easy case: The changes are literally the same.</source>
          <target state="translated">簡単なケース。変更点は文字通り同じです。</target>
        </trans-unit>
        <trans-unit id="d4f35a5d52e75e1ab425158dcb45339db600d3f4" translate="yes" xml:space="preserve">
          <source>Eclipse 3.0, 3.1.2 on MacOSX (see Eclipse CVS Client Notes)</source>
          <target state="translated">Eclipse 3.0,3.1.2 on MacOSX (Eclipse CVS クライアントノートを参照)</target>
        </trans-unit>
        <trans-unit id="f5e176bd2c2df731632b9ca0ee7983e84b3d8517" translate="yes" xml:space="preserve">
          <source>Eclipse cvs client notes</source>
          <target state="translated">Eclipse の cvs クライアントノート</target>
        </trans-unit>
        <trans-unit id="ea0675157801730c96e515d20a6ad02ac765e6d4" translate="yes" xml:space="preserve">
          <source>Edit an object&amp;rsquo;s content interactively. The existing content for &amp;lt;object&amp;gt; is pretty-printed into a temporary file, an editor is launched on the file, and the result is parsed to create a new object of the same type as &amp;lt;object&amp;gt;. A replacement ref is then created to replace &amp;lt;object&amp;gt; with the newly created object. See &lt;a href=&quot;git-var&quot;&gt;git-var[1]&lt;/a&gt; for details about how the editor will be chosen.</source>
          <target state="translated">オブジェクトのコンテンツをインタラクティブに編集します。&amp;lt;object&amp;gt;の既存のコンテンツが一時ファイルにきれいに出力され、エディターがそのファイルで起動され、結果が解析されて、&amp;lt;object&amp;gt;と同じタイプの新しいオブジェクトが作成されます。次に、置換参照が作成され、&amp;lt;object&amp;gt;が新しく作成されたオブジェクトに置き換えられます。参照&lt;a href=&quot;git-var&quot;&gt;のgit-VAR [1]&lt;/a&gt;エディタが選択される方法の詳細については。</target>
        </trans-unit>
        <trans-unit id="0f76fc2a41a48ffbf729f7fe389bfe3f0b08de68" translate="yes" xml:space="preserve">
          <source>Edit the commit message before committing to SVN. This is off by default for objects that are commits, and forced on when committing tree objects.</source>
          <target state="translated">SVN にコミットする前にコミットメッセージを編集します。これはコミットするオブジェクトに対してはデフォルトではオフになっており、ツリーオブジェクトをコミットする際には強制的にオンになります。</target>
        </trans-unit>
        <trans-unit id="c92b0955a7a67e8bc1f5f7afd177ec4ed55d0e4c" translate="yes" xml:space="preserve">
          <source>Edit the files in place.</source>
          <target state="translated">その場で編集します。</target>
        </trans-unit>
        <trans-unit id="b87cea5cffa31e45fd50bcd7540894242796f029" translate="yes" xml:space="preserve">
          <source>Edit the notes for a given object (defaults to HEAD).</source>
          <target state="translated">指定されたオブジェクトのノートを編集します(デフォルトは HEAD)。</target>
        </trans-unit>
        <trans-unit id="81933d4e997d5f22262236af308c480381855b0f" translate="yes" xml:space="preserve">
          <source>Edit the todo list during an interactive rebase.</source>
          <target state="translated">インタラクティブなリベース中に TODO リストを編集します。</target>
        </trans-unit>
        <trans-unit id="f392476dbdf7968fc4726a7173f15cf238dddd46" translate="yes" xml:space="preserve">
          <source>Editing patches</source>
          <target state="translated">パッチの編集</target>
        </trans-unit>
        <trans-unit id="8f25a859269ca51039632dd6bba28fb061cfb8d4" translate="yes" xml:space="preserve">
          <source>Effects</source>
          <target state="translated">Effects</target>
        </trans-unit>
        <trans-unit id="7002bc1d2bcb94f212817ade973f1baffe1d4266" translate="yes" xml:space="preserve">
          <source>Either a &lt;a href=&quot;#def_working_tree&quot;&gt;working tree&lt;/a&gt;, or a &lt;a href=&quot;#def_tree_object&quot;&gt;tree object&lt;/a&gt; together with the dependent &lt;a href=&quot;#def_blob_object&quot;&gt;blob&lt;/a&gt; and tree objects (i.e. a stored representation of a working tree).</source>
          <target state="translated">いずれかの&lt;a href=&quot;#def_working_tree&quot;&gt;作業ツリー&lt;/a&gt;または&lt;a href=&quot;#def_tree_object&quot;&gt;ツリーオブジェクト&lt;/a&gt;依存と共に&lt;a href=&quot;#def_blob_object&quot;&gt;ブロブ&lt;/a&gt;とツリーオブジェクト（作業ツリーの、すなわちA格納された表現）。</target>
        </trans-unit>
        <trans-unit id="bc0851580574fafe647ac3b5e7bd049ba47eee8d" translate="yes" xml:space="preserve">
          <source>Either the hash or the filename under [URL]/refs/ to pull.</source>
          <target state="translated">URL]/refs/以下のハッシュかファイル名のどちらかを指定してください。</target>
        </trans-unit>
        <trans-unit id="3c055884457fa0453683ceee26bbe41d08beb912" translate="yes" xml:space="preserve">
          <source>Either way, if you have a string of untestable commits, it might happen that the regression you are looking for has been introduced by one of these untestable commits. In this case it&amp;rsquo;s not possible to tell for sure which commit introduced the regression.</source>
          <target state="translated">どちらの方法でも、テスト不可能なコミットの文字列がある場合、探している回帰がこれらのテスト不可能なコミットのいずれかによって引き起こされた可能性があります。この場合、どのコミットがリグレッションを引き起こしたかを確実に判断することはできません。</target>
        </trans-unit>
        <trans-unit id="84add5b2952787581cb9a8851eef63d1ec75d22b" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="translated">Email</target>
        </trans-unit>
        <trans-unit id="727400f70d8ff4dd021cd3b46cd8407431accd18" translate="yes" xml:space="preserve">
          <source>Empty commits</source>
          <target state="translated">空のコミット</target>
        </trans-unit>
        <trans-unit id="64c856db8d7087653e88ddbd52d985c5029c26f3" translate="yes" xml:space="preserve">
          <source>Empty context lines that do not have &lt;code&gt;any&lt;/code&gt; whitespace.</source>
          <target state="translated">持っていない空のコンテキスト行 &lt;code&gt;any&lt;/code&gt; の空白を。</target>
        </trans-unit>
        <trans-unit id="bc35de4b332414e34ea66c4e2722d1b3c677ee26" translate="yes" xml:space="preserve">
          <source>Enable &quot;sparse checkout&quot; feature. See &lt;a href=&quot;git-sparse-checkout&quot;&gt;git-sparse-checkout[1]&lt;/a&gt; for more information.</source>
          <target state="translated">「スパースチェックアウト」機能を有効にします。詳細については、&lt;a href=&quot;git-sparse-checkout&quot;&gt;git-sparse-checkout [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b1506b425dd0a659b4e3f7dbaad1db76c1920ca2" translate="yes" xml:space="preserve">
          <source>Enable (1) or disable (0) debug output. If enabled, SMTP commands and replies will be printed. Useful to debug TLS connection and authentication problems.</source>
          <target state="translated">デバッグ出力を有効(1)または無効(0)にします。有効にすると、SMTP コマンドと返信が出力されます。TLS 接続や認証の問題をデバッグするのに便利です。</target>
        </trans-unit>
        <trans-unit id="5ca5f9ffb4eef636571b0732ca8e82f4b117bf57" translate="yes" xml:space="preserve">
          <source>Enable Git&amp;rsquo;s password prompt for the SSL certificate. Otherwise OpenSSL will prompt the user, possibly many times, if the certificate or private key is encrypted. Can be overridden by the &lt;code&gt;GIT_SSL_CERT_PASSWORD_PROTECTED&lt;/code&gt; environment variable.</source>
          <target state="translated">SSL証明書のGitのパスワードプロンプトを有効にします。そうでない場合、証明書または秘密鍵が暗号化されている場合、OpenSSLはユーザーにおそらく何回もプロンプトを出します。 &lt;code&gt;GIT_SSL_CERT_PASSWORD_PROTECTED&lt;/code&gt; 環境変数によってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="202cfbf6c643ccf61c3e6855fb4942a959d7c88c" translate="yes" xml:space="preserve">
          <source>Enable and configure &quot;patches&quot; view, which displays list of commits in email (plain text) output format; see also &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt;. The value is the maximum number of patches in a patchset generated in &quot;patches&quot; view. Set the &lt;code&gt;default&lt;/code&gt; field to a list containing single item of or to an empty list to disable patch view, or to a list containing a single negative number to remove any limit. Default value is 16.</source>
          <target state="translated">コミットのリストを電子メール（プレーンテキスト）出力形式で表示する「パッチ」ビューを有効にして構成します。&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt;も参照してください。この値は、「パッチ」ビューで生成されるパッチセット内のパッチの最大数です。設定 &lt;code&gt;default&lt;/code&gt; のまたは無効パッチビューに、または任意の制限を除去するために、単一の負の数を含むリストに空のリストへの単一のアイテムを含むリストにフィールドを。デフォルト値は16です。</target>
        </trans-unit>
        <trans-unit id="3ec940cc58a7e0a3ca8323d3832e04ecb527aead" translate="yes" xml:space="preserve">
          <source>Enable and configure the &quot;snapshot&quot; action, which allows user to download a compressed archive of any tree or commit, as produced by &lt;a href=&quot;git-archive&quot;&gt;git-archive[1]&lt;/a&gt; and possibly additionally compressed. This can potentially generate high traffic if you have large project.</source>
          <target state="translated">「スナップショット」アクションを有効にして構成します。これにより、&lt;a href=&quot;git-archive&quot;&gt;git-archive [1]&lt;/a&gt;によって生成され、場合によってはさらに圧縮された、ツリーまたはコミットの圧縮アーカイブをダウンロードできます。大規模なプロジェクトの場合、これは潜在的に高いトラフィックを生成する可能性があります。</target>
        </trans-unit>
        <trans-unit id="875ff7ca114490b100a4ae7597d23eb505e57466" translate="yes" xml:space="preserve">
          <source>Enable and configure the ability to change a common time zone for dates in gitweb output via JavaScript. Dates in gitweb output include authordate and committerdate in &quot;commit&quot;, &quot;commitdiff&quot; and &quot;log&quot; views, and taggerdate in &quot;tag&quot; view. Enabled by default.</source>
          <target state="translated">gitweb 出力の日付の共通タイムゾーンを JavaScript で変更する機能を有効にし、設定します。gitweb 出力の日付には、&quot;commit&quot; ビュー、&quot;commitdiff&quot; ビュー、&quot;log&quot; ビューの authordate および committerdate、そして &quot;tag&quot; ビューの taggerdate が含まれます。デフォルトでは有効になっています。</target>
        </trans-unit>
        <trans-unit id="e1b8a656580e419265edb3d93e7fbf612f88122b" translate="yes" xml:space="preserve">
          <source>Enable config options that are new to Git, and are being considered for future defaults. Config settings included here may be added or removed with each release, including minor version updates. These settings may have unintended interactions since they are so new. Please enable this setting if you are interested in providing feedback on experimental features. The new default values are:</source>
          <target state="translated">Git にとって新しい設定オプションで、将来のデフォルト設定として検討されているものを有効にします。ここに含まれる設定は、マイナーバージョンの更新を含め、リリースのたびに追加されたり削除されたりする可能性があります。これらの設定は非常に新しいものなので、意図しない相互作用を起こす可能性があります。実験的な機能についてフィードバックを提供したい場合は、この設定を有効にしてください。新しいデフォルト値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="8740fb3b16d2502b6a07330a252227f128574417" translate="yes" xml:space="preserve">
          <source>Enable config options that optimize for repos with many files in the working directory. With many files, commands such as &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git checkout&lt;/code&gt; may be slow and these new defaults improve performance:</source>
          <target state="translated">作業ディレクトリに多くのファイルがあるリポジトリを最適化する構成オプションを有効にします。多くのファイルでは、 &lt;code&gt;git status&lt;/code&gt; や &lt;code&gt;git checkout&lt;/code&gt; などのコマンドが遅くなる可能性があり、これらの新しいデフォルトによりパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="b62688a948f16b8896e24589781ecaee64693ffd" translate="yes" xml:space="preserve">
          <source>Enable displaying how much time and how many Git commands it took to generate and display each page in the page footer (at the bottom of page). For example the footer might contain: &quot;This page took 6.53325 seconds and 13 Git commands to generate.&quot; Disabled by default.</source>
          <target state="translated">各ページの生成にかかった時間と Git コマンドの数を表示し、各ページのフッター (ページの下部)に表示することを有効にします。たとえば、フッターには &quot;This page took 6.53325 seconds and 13 Git commands to generate.&quot; といった内容が表示されます。デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="c9bd131fb11e7d8a575c789c619c56115c835cfc" translate="yes" xml:space="preserve">
          <source>Enable displaying remote heads (remote-tracking branches) in the &quot;heads&quot; list. In most cases the list of remote-tracking branches is an unnecessary internal private detail, and this feature is therefore disabled by default. &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt;, which is usually used to browse local repositories, enables and uses this feature.</source>
          <target state="translated">「ヘッド」リストにリモートヘッド（リモートトラッキングブランチ）を表示できるようにします。ほとんどの場合、リモート追跡ブランチのリストは不必要な内部プライベート詳細であるため、この機能はデフォルトで無効になっています。&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]&lt;/a&gt;は、通常ローカルリポジトリの参照に使用され、この機能を有効にして使用します。</target>
        </trans-unit>
        <trans-unit id="39da6c4d119e094eeb647ff45a2f63bf34d04c9c" translate="yes" xml:space="preserve">
          <source>Enable grep search, which lists the files in currently selected tree (directory) containing the given string; see &lt;a href=&quot;git-grep&quot;&gt;git-grep[1]&lt;/a&gt;. This can be potentially CPU-intensive, of course. Enabled by default.</source>
          <target state="translated">指定された文字列を含む現在選択されているツリー（ディレクトリ）内のファイルを一覧表示するgrep検索を有効にします。&lt;a href=&quot;git-grep&quot;&gt;git-grep [1]を&lt;/a&gt;参照してください。もちろん、これは潜在的にCPUに負荷がかかる可能性があります。デフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="393e4a210cdfd96d50c3abf9958899d9c77b22c9" translate="yes" xml:space="preserve">
          <source>Enable more strict checking, namely to catch a file mode recorded with g+w bit set, which was created by older versions of Git. Existing repositories, including the Linux kernel, Git itself, and sparse repository have old objects that triggers this check, but it is recommended to check new projects with this flag.</source>
          <target state="translated">より厳密なチェック、すなわち古いバージョンの Git で作成された g+w ビットがセットされた状態で記録されたファイルモードをキャッチすることを有効にします。Linuxカーネル、Git自体、スパースリポジトリなどの既存のリポジトリには、このチェックをトリガーする古いオブジェクトがありますが、新しいプロジェクトをチェックする際には、このフラグを立ててチェックすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8081f1426d8047f2f5c9039fb2b3187c4aed51ad" translate="yes" xml:space="preserve">
          <source>Enable multipart/mixed attachments as the default for &lt;code&gt;format-patch&lt;/code&gt;. The value can also be a double quoted string which will enable attachments as the default and set the value as the boundary. See the --attach option in &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;format-patch&lt;/code&gt; のデフォルトとしてmultipart / mixed添付ファイルを有効にします。値は、デフォルトで添付ファイルを有効にし、境界として値を設定する二重引用符付き文字列にすることもできます。&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt;の--attachオプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="d973b021f64131371542864785f310ed020b9e66" translate="yes" xml:space="preserve">
          <source>Enable or disable files system monitor feature. These options take effect whatever the value of the &lt;code&gt;core.fsmonitor&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option.</source>
          <target state="translated">ファイルシステムモニター機能を有効または無効にします。これらのオプションは、 &lt;code&gt;core.fsmonitor&lt;/code&gt; 構成変数の値が何であっても有効です（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。ただし、変更が構成された値に対して行われると警告が発行されます。構成された値は次にインデックスが読み取られたときに有効になり、これによりオプションの意図した効果が削除されます。</target>
        </trans-unit>
        <trans-unit id="d83423bb73684fa975c3f77aeba009920792cf88" translate="yes" xml:space="preserve">
          <source>Enable or disable split index mode. If split-index mode is already enabled and &lt;code&gt;--split-index&lt;/code&gt; is given again, all changes in $GIT_DIR/index are pushed back to the shared index file.</source>
          <target state="translated">分割インデックスモードを有効または無効にします。分割インデックスモードがすでに有効で、 &lt;code&gt;--split-index&lt;/code&gt; が再度指定されている場合、$ GIT_DIR / indexのすべての変更が共有インデックスファイルにプッシュバックされます。</target>
        </trans-unit>
        <trans-unit id="f8b0173e3fdc03c4e03595346f1584e741b798c1" translate="yes" xml:space="preserve">
          <source>Enable or disable untracked cache feature. Please use &lt;code&gt;--test-untracked-cache&lt;/code&gt; before enabling it.</source>
          <target state="translated">追跡されないキャッシュ機能を有効または無効にします。有効にする前に &lt;code&gt;--test-untracked-cache&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="5d058dbf876c4efd16b9ed5eae486a10be79bb86" translate="yes" xml:space="preserve">
          <source>Enable parallel index preload for operations like &lt;code&gt;git diff&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git diff&lt;/code&gt; などの操作で並列インデックスのプリロードを有効にする</target>
        </trans-unit>
        <trans-unit id="1aa8a755e195170094ad7c0108b7874b637b96b6" translate="yes" xml:space="preserve">
          <source>Enable showing size of blobs (ordinary files) in a &quot;tree&quot; view, in a separate column, similar to what &lt;code&gt;ls -l&lt;/code&gt; does; see description of &lt;code&gt;-l&lt;/code&gt; option in &lt;a href=&quot;git-ls-tree&quot;&gt;git-ls-tree[1]&lt;/a&gt; manpage. This costs a bit of I/O. Enabled by default.</source>
          <target state="translated">&lt;code&gt;ls -l&lt;/code&gt; と同じように、「ツリー」ビューの別の列にBLOB（通常のファイル）のサイズを表示できるようにします。&lt;a href=&quot;git-ls-tree&quot;&gt;git-ls-tree [1]&lt;/a&gt;マンページの &lt;code&gt;-l&lt;/code&gt; オプションの説明を参照してください。これには少しI / Oがかかります。デフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="72fa50bb7bb0362a9a5efa2aa6f34941c4906089" translate="yes" xml:space="preserve">
          <source>Enable stricter reference checking by requiring an exact ref path. Aside from returning an error code of 1, it will also print an error message if &lt;code&gt;--quiet&lt;/code&gt; was not specified.</source>
          <target state="translated">正確な参照パスを要求することにより、より厳密な参照チェックを有効にします。 &lt;code&gt;--quiet&lt;/code&gt; が指定されていない場合は、エラーコード1を返すだけでなく、エラーメッセージも出力されます。</target>
        </trans-unit>
        <trans-unit id="48730f76cba5f67862630837d3f93d8ce9288066" translate="yes" xml:space="preserve">
          <source>Enable text search, which will list the commits which match author, committer or commit text to a given string; see the description of &lt;code&gt;--author&lt;/code&gt;, &lt;code&gt;--committer&lt;/code&gt; and &lt;code&gt;--grep&lt;/code&gt; options in &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; manpage. Enabled by default.</source>
          <target state="translated">テキスト検索を有効にします。これにより、作成者、コミッター、またはテキストを特定の文字列に一致させるコミットが一覧表示されます。&lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt;マンページの &lt;code&gt;--author&lt;/code&gt; 、-- &lt;code&gt;--committer&lt;/code&gt; 、-- &lt;code&gt;--grep&lt;/code&gt; オプションの説明を参照してください。デフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="5bf942f17a0adbd66d5dff03794ede7ed6ce3a03" translate="yes" xml:space="preserve">
          <source>Enable the &quot;blame&quot; and &quot;blame_incremental&quot; blob views, showing for each line the last commit that modified it; see &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;. This can be very CPU-intensive and is therefore disabled by default.</source>
          <target state="translated">「blame」および「blame_incremental」ブロブビューを有効にして、各行について、それを変更した最後のコミットを表示します。&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]を&lt;/a&gt;参照してください。これは非常にCPUを集中的に使用する可能性があるため、デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="d7fc03efc211d064bf3be01f125339a0be59fcba" translate="yes" xml:space="preserve">
          <source>Enable the &lt;code&gt;core.sparseCheckout&lt;/code&gt; setting. If the sparse-checkout file does not exist, then populate it with patterns that match every file in the root directory and no other directories, then will remove all directories tracked by Git. Add patterns to the sparse-checkout file to repopulate the working directory.</source>
          <target state="translated">&lt;code&gt;core.sparseCheckout&lt;/code&gt; 設定を有効にします。 sparse-checkoutファイルが存在しない場合は、ルートディレクトリ内のすべてのファイルに一致し、他のディレクトリには一致しないパターンを設定して、Gitが追跡するすべてのディレクトリを削除します。疎チェックアウトファイルにパターンを追加して、作業ディレクトリを再設定します。</target>
        </trans-unit>
        <trans-unit id="388296e4f7d314018094f8c18fc5c6de39a494b4" translate="yes" xml:space="preserve">
          <source>Enable the heuristic that shifts diff hunk boundaries to make patches easier to read. This is the default.</source>
          <target state="translated">パッチを読みやすくするために diff ハンクの境界をシフトするヒューリスティックを有効にします。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="01f1f887420f77509dbb30a6ca88007ca92eded6" translate="yes" xml:space="preserve">
          <source>Enable the reflog. Updates to a ref &amp;lt;ref&amp;gt; is logged to the file &quot;&lt;code&gt;$GIT_DIR/logs/&amp;lt;ref&amp;gt;&lt;/code&gt;&quot;, by appending the new and old SHA-1, the date/time and the reason of the update, but only when the file exists. If this configuration variable is set to &lt;code&gt;true&lt;/code&gt;, missing &quot;&lt;code&gt;$GIT_DIR/logs/&amp;lt;ref&amp;gt;&lt;/code&gt;&quot; file is automatically created for branch heads (i.e. under &lt;code&gt;refs/heads/&lt;/code&gt;), remote refs (i.e. under &lt;code&gt;refs/remotes/&lt;/code&gt;), note refs (i.e. under &lt;code&gt;refs/notes/&lt;/code&gt;), and the symbolic ref &lt;code&gt;HEAD&lt;/code&gt;. If it is set to &lt;code&gt;always&lt;/code&gt;, then a missing reflog is automatically created for any ref under &lt;code&gt;refs/&lt;/code&gt;.</source>
          <target state="translated">reflogを有効にします。参照&amp;lt;ref&amp;gt;への更新は、ファイル「 &lt;code&gt;$GIT_DIR/logs/&amp;lt;ref&amp;gt;&lt;/code&gt; 」に記録されます。これには、新旧のSHA-1、日付/時刻、および更新の理由が追加されますが、ファイルが存在する場合のみです。 。この構成変数が &lt;code&gt;true&lt;/code&gt; に設定されている場合、欠落している「 &lt;code&gt;$GIT_DIR/logs/&amp;lt;ref&amp;gt;&lt;/code&gt; 」ファイルは、ブランチヘッド（つまり &lt;code&gt;refs/heads/&lt;/code&gt; 下）、リモートリファレンス（つまり &lt;code&gt;refs/remotes/&lt;/code&gt; 下）、メモrefs（つまり、 &lt;code&gt;refs/notes/&lt;/code&gt; ）の下、およびシンボリックref &lt;code&gt;HEAD&lt;/code&gt; です。 &lt;code&gt;always&lt;/code&gt; に設定されている場合、 &lt;code&gt;refs/&lt;/code&gt; 下のすべての参照に対して欠落している参照ログが自動的に作成されます。</target>
        </trans-unit>
        <trans-unit id="b50a25e099857665aa0b9ce95777350330756bcc" translate="yes" xml:space="preserve">
          <source>Enable the so called pickaxe search, which will list the commits that introduced or removed a given string in a file. This can be practical and quite faster alternative to &quot;blame&quot; action, but it is still potentially CPU-intensive. Enabled by default.</source>
          <target state="translated">いわゆる pickaxe 検索を有効にします。これは、ファイル内の特定の文字列を導入したり削除したりしたコミットをリストアップします。これは実用的で、&quot;blame &quot;アクションの代わりに非常に高速になりますが、CPU負荷が高くなる可能性があります。デフォルトでは有効になっています。</target>
        </trans-unit>
        <trans-unit id="e8928096a1d83fe75290fee4b17a3faa5d2c2864" translate="yes" xml:space="preserve">
          <source>Enable the specified feature. This requires that fast-import supports the specified feature, and aborts if it does not.</source>
          <target state="translated">指定された機能を有効にします。これはfast-importが指定された機能をサポートしている必要があり、サポートしていない場合はアボートします。</target>
        </trans-unit>
        <trans-unit id="cb33ed4fbb60981dda9e34bad99e8fe5205271b1" translate="yes" xml:space="preserve">
          <source>Enable/disable the service site-wide per default. Note that a service disabled site-wide can still be enabled per repository if it is marked overridable and the repository enables the service with a configuration item.</source>
          <target state="translated">デフォルトでサイト全体でサービスを有効化/無効化します。サイト全体で無効になっているサービスがオーバーライド可能とマークされていて、リポジトリが設定項目でサービスを有効にしている場合は、リポジトリごとに有効にすることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="35a563959614f6c71c72cc0395ec6a9ebde3235d" translate="yes" xml:space="preserve">
          <source>Enables (or disables) progress messages displayed by the transport helper during a command.</source>
          <target state="translated">コマンド中にトランスポートヘルパーが表示するプログレスメッセージを有効(または無効)にする。</target>
        </trans-unit>
        <trans-unit id="55ef71c7bfb2fa4d7687d0c6a055c6d9acec70dd" translate="yes" xml:space="preserve">
          <source>Enables a curl full trace dump of all incoming and outgoing data, including descriptive information, of the git transport protocol. This is similar to doing curl &lt;code&gt;--trace-ascii&lt;/code&gt; on the command line. This option overrides setting the &lt;code&gt;GIT_CURL_VERBOSE&lt;/code&gt; environment variable. See &lt;code&gt;GIT_TRACE&lt;/code&gt; for available trace output options.</source>
          <target state="translated">gitトランスポートプロトコルのすべての送受信データ（説明情報を含む）のカールフルトレースダンプを有効にします。これは、コマンドラインでcurl &lt;code&gt;--trace-ascii&lt;/code&gt; を実行するのと似ています。このオプションは、 &lt;code&gt;GIT_CURL_VERBOSE&lt;/code&gt; 環境変数の設定をオーバーライドします。使用可能なトレース出力オプションについては、 &lt;code&gt;GIT_TRACE&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="6691f775d187ea6f64d054b6823e9e86f9c085bf" translate="yes" xml:space="preserve">
          <source>Enables general trace messages, e.g. alias expansion, built-in command execution and external command execution.</source>
          <target state="translated">一般的なトレースメッセージ(エイリアス展開、組み込みコマンド実行、外部コマンド実行など)を有効にします。</target>
        </trans-unit>
        <trans-unit id="e48905b14288617c8ceaa87834665d923c04c051" translate="yes" xml:space="preserve">
          <source>Enables more detailed trace messages from the &quot;trace2&quot; library. Output from &lt;code&gt;GIT_TRACE2&lt;/code&gt; is a simple text-based format for human readability.</source>
          <target state="translated">「trace2」ライブラリからのより詳細なトレースメッセージを有効にします。 &lt;code&gt;GIT_TRACE2&lt;/code&gt; からの出力は、人間が読みやすいように単純なテキストベースの形式です。</target>
        </trans-unit>
        <trans-unit id="660988c86be3da054f2d2df3321eefbdd55b0999" translate="yes" xml:space="preserve">
          <source>Enables performance related trace messages, e.g. total execution time of each Git command. See &lt;code&gt;GIT_TRACE&lt;/code&gt; for available trace output options.</source>
          <target state="translated">各Gitコマンドの合計実行時間など、パフォーマンス関連のトレースメッセージを有効にします。使用可能なトレース出力オプションについては、 &lt;code&gt;GIT_TRACE&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="dc7b8ed816ac9633bd1375cea1e49bf11b8f4cfe" translate="yes" xml:space="preserve">
          <source>Enables the &quot;cone mode&quot; of the sparse checkout feature. When the sparse-checkout file contains a limited set of patterns, then this mode provides significant performance advantages. See &lt;a href=&quot;git-sparse-checkout&quot;&gt;git-sparse-checkout[1]&lt;/a&gt; for more information.</source>
          <target state="translated">スパースチェックアウト機能の「コーンモード」を有効にします。スパースチェックアウトファイルに含まれるパターンのセットが限られている場合、このモードではパフォーマンスが大幅に向上します。詳細については、&lt;a href=&quot;git-sparse-checkout&quot;&gt;git-sparse-checkout [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="69a28feccce4c72bcadfb900d39f7f184847d39a" translate="yes" xml:space="preserve">
          <source>Enables trace messages for all accesses to any packs. For each access, the pack file name and an offset in the pack is recorded. This may be helpful for troubleshooting some pack-related performance problems. See &lt;code&gt;GIT_TRACE&lt;/code&gt; for available trace output options.</source>
          <target state="translated">任意のパックへのすべてのアクセスのトレースメッセージを有効にします。アクセスごとに、パックファイル名とパック内のオフセットが記録されます。これは、いくつかのパック関連のパフォーマンス問題のトラブルシューティングに役立つ場合があります。使用可能なトレース出力オプションについては、 &lt;code&gt;GIT_TRACE&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="facc11ad57d6672e51f919b154eb028564e3944e" translate="yes" xml:space="preserve">
          <source>Enables trace messages for all packets coming in or out of a given program. This can help with debugging object negotiation or other protocol issues. Tracing is turned off at a packet starting with &quot;PACK&quot; (but see &lt;code&gt;GIT_TRACE_PACKFILE&lt;/code&gt; below). See &lt;code&gt;GIT_TRACE&lt;/code&gt; for available trace output options.</source>
          <target state="translated">特定のプログラムに出入りするすべてのパケットのトレースメッセージを有効にします。これは、オブジェクトネゴシエーションまたはその他のプロトコルの問題のデバッグに役立ちます。「PACK」で始まるパケットでトレースがオフになります（ただし、以下の &lt;code&gt;GIT_TRACE_PACKFILE&lt;/code&gt; を参照）。使用可能なトレース出力オプションについては、 &lt;code&gt;GIT_TRACE&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3a96e0b90f936140e14c4f59157281584502b280" translate="yes" xml:space="preserve">
          <source>Enables trace messages for the filesystem monitor extension. See &lt;code&gt;GIT_TRACE&lt;/code&gt; for available trace output options.</source>
          <target state="translated">ファイルシステムモニター拡張のトレースメッセージを有効にします。使用可能なトレース出力オプションについては、 &lt;code&gt;GIT_TRACE&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="226b098ac2b03df2efedb4d6f3177d8a53d1323d" translate="yes" xml:space="preserve">
          <source>Enables trace messages printing the .git, working tree and current working directory after Git has completed its setup phase. See &lt;code&gt;GIT_TRACE&lt;/code&gt; for available trace output options.</source>
          <target state="translated">Gitがセットアップフェーズを完了した後、.git、作業ツリー、現在の作業ディレクトリを出力するトレースメッセージを有効にします。使用可能なトレース出力オプションについては、 &lt;code&gt;GIT_TRACE&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="0876ec8b14060e46110f6e776b65e26631e1613f" translate="yes" xml:space="preserve">
          <source>Enables trace messages that can help debugging fetching / cloning of shallow repositories. See &lt;code&gt;GIT_TRACE&lt;/code&gt; for available trace output options.</source>
          <target state="translated">浅いリポジトリのフェッチ/クローンのデバッグに役立つトレースメッセージを有効にします。使用可能なトレース出力オプションについては、 &lt;code&gt;GIT_TRACE&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d9d84b12f1c34508f5365e4fa51faae6983f4d76" translate="yes" xml:space="preserve">
          <source>Enables tracing of packfiles sent or received by a given program. Unlike other trace output, this trace is verbatim: no headers, and no quoting of binary data. You almost certainly want to direct into a file (e.g., &lt;code&gt;GIT_TRACE_PACKFILE=/tmp/my.pack&lt;/code&gt;) rather than displaying it on the terminal or mixing it with other trace output.</source>
          <target state="translated">特定のプログラムによって送信または受信されたパックファイルのトレースを有効にします。他のトレース出力とは異なり、このトレースは逐語的です。ヘッダーもバイナリデータの引用もありません。ほとんどの場合、ファイルをターミナルに表示したり、他のトレース出力と混合したりするのではなく、ファイル（ &lt;code&gt;GIT_TRACE_PACKFILE=/tmp/my.pack&lt;/code&gt; など）に送ります。</target>
        </trans-unit>
        <trans-unit id="e7a1430764d62a995667824305a6bb53b99cb2fa" translate="yes" xml:space="preserve">
          <source>Enabling a Target</source>
          <target state="translated">ターゲットを有効にする</target>
        </trans-unit>
        <trans-unit id="3ff218bfdfe647deb6f8afd9e1fb8602500fad3a" translate="yes" xml:space="preserve">
          <source>Encoding to use when displaying logs. (See &lt;code&gt;Discussion&lt;/code&gt; above.) Defaults to the value of &lt;code&gt;i18n.commitEncoding&lt;/code&gt; if set, and UTF-8 otherwise.</source>
          <target state="translated">ログを表示するときに使用するエンコーディング。（参照 &lt;code&gt;Discussion&lt;/code&gt; 上記。）の値にデフォルト &lt;code&gt;i18n.commitEncoding&lt;/code&gt; 設定されている場合、及びUTF-8さもなければ。</target>
        </trans-unit>
        <trans-unit id="89269a8275f94980b4ffe877e221e0d466987782" translate="yes" xml:space="preserve">
          <source>End-of-line conversion</source>
          <target state="translated">エンドオブライン変換</target>
        </trans-unit>
        <trans-unit id="ab7c0d7ed2b514b7971808ab6a9cdbd8fa7e7be5" translate="yes" xml:space="preserve">
          <source>Enhanced option parser</source>
          <target state="translated">強化されたオプションパーサー</target>
        </trans-unit>
        <trans-unit id="d48b2fd91c06d512d371b7025cd11deeb23b34ad" translate="yes" xml:space="preserve">
          <source>Ensure at least &amp;lt;n&amp;gt; lines of surrounding context match before and after each change. When fewer lines of surrounding context exist they all must match. By default no context is ever ignored.</source>
          <target state="translated">各変更の前後で、前後のコンテキストの少なくとも&amp;lt;n&amp;gt;行が一致することを確認してください。周囲のコンテキストの行が少ない場合、それらはすべて一致する必要があります。デフォルトでは、コンテキストは無視されません。</target>
        </trans-unit>
        <trans-unit id="6825ec27b2b654ed999d31628f8e31396467a23b" translate="yes" xml:space="preserve">
          <source>Ensure mod_cgi, mod_alias, and mod_env are enabled, set GIT_PROJECT_ROOT (or DocumentRoot) appropriately, and create a ScriptAlias to the CGI:</source>
          <target state="translated">mod_cgi、mod_alias、mod_envが有効になっていることを確認し、GIT_PROJECT_ROOT(またはDocumentRoot)を適切に設定し、CGIへのScriptAliasを作成します。</target>
        </trans-unit>
        <trans-unit id="136727d71b4774df6f61241cd1f96329e996c416" translate="yes" xml:space="preserve">
          <source>Ensure that &lt;code&gt;mod_cgi&lt;/code&gt;, &lt;code&gt;mod_alias&lt;/code&gt;, &lt;code&gt;mod_auth&lt;/code&gt;, &lt;code&gt;mod_setenv&lt;/code&gt; are loaded, then set &lt;code&gt;GIT_PROJECT_ROOT&lt;/code&gt; appropriately and redirect all requests to the CGI:</source>
          <target state="translated">ていることを確認し &lt;code&gt;mod_cgi&lt;/code&gt; の、 &lt;code&gt;mod_alias&lt;/code&gt; 、 &lt;code&gt;mod_auth&lt;/code&gt; 、 &lt;code&gt;mod_setenv&lt;/code&gt; ロードされ、その後、設定 &lt;code&gt;GIT_PROJECT_ROOT&lt;/code&gt; を適切にし、CGIへのすべての要求をリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="05b99bf62f144f697a8ee2786cac4dbb9ea1f0fb" translate="yes" xml:space="preserve">
          <source>Ensures that a reference name is well formed</source>
          <target state="translated">参照名がしっかりと形成されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="ced8b1d7750a47c0481b135a1b95578c79b545a4" translate="yes" xml:space="preserve">
          <source>Ensuring good performance</source>
          <target state="translated">パフォーマンスの確保</target>
        </trans-unit>
        <trans-unit id="bbdd824923a22a7ee366da56344be9b791387ca5" translate="yes" xml:space="preserve">
          <source>Ensuring reliability</source>
          <target state="translated">信頼性の確保</target>
        </trans-unit>
        <trans-unit id="35254b488f033ee2fce6cea7c360bd0f51157448" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;git name-rev&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;git name-rev&lt;/code&gt; と入力します。</target>
        </trans-unit>
        <trans-unit id="35cd2b0a8df7f89252ec5f994efe80c34ae3bb81" translate="yes" xml:space="preserve">
          <source>Entries that begin with &lt;code&gt;&quot;&lt;/code&gt; (double-quote) will be interpreted as C-style quoted paths, removing leading and trailing double-quotes and respecting backslash escapes. E.g., the value &lt;code&gt;&quot;path-with-\&quot;-and-:-in-it&quot;:vanilla-path&lt;/code&gt; has two paths: &lt;code&gt;path-with-&quot;-and-:-in-it&lt;/code&gt; and &lt;code&gt;vanilla-path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&lt;/code&gt; （二重引用符）で始まるエントリは、Cスタイルの引用符付きパスとして解釈され、先頭と末尾の二重引用符が削除され、バックスラッシュエスケープが考慮されます。たとえば、値 &lt;code&gt;&quot;path-with-\&quot;-and-:-in-it&quot;:vanilla-path&lt;/code&gt; with- \ &quot;-and-：-in- it &quot;：vanilla-pathには、 &lt;code&gt;path-with-&quot;-and-:-in-it&lt;/code&gt; と &lt;code&gt;vanilla-path&lt;/code&gt; の 2つのパスがあります。</target>
        </trans-unit>
        <trans-unit id="d443a1185575c125d61e0af393b044d7b06ef572" translate="yes" xml:space="preserve">
          <source>Environment</source>
          <target state="translated">Environment</target>
        </trans-unit>
        <trans-unit id="8403ba2a4a5aa9baffc30d3d46a39f555141e42f" translate="yes" xml:space="preserve">
          <source>Environment and configuration variables</source>
          <target state="translated">環境変数と設定変数</target>
        </trans-unit>
        <trans-unit id="1173b2e11bd16e5dc36c119a4b84f02be11626b5" translate="yes" xml:space="preserve">
          <source>Environment variables</source>
          <target state="translated">環境変数</target>
        </trans-unit>
        <trans-unit id="2e9c1d645028b692809462da156b1ceab497759c" translate="yes" xml:space="preserve">
          <source>Environment variables passed to command</source>
          <target state="translated">コマンドに渡される環境変数</target>
        </trans-unit>
        <trans-unit id="0939f663868ba2e69e812a3d630f787f9c5cfc8e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&amp;lt;rev&amp;gt;^&amp;lt;n&amp;gt;..&amp;lt;rev&amp;gt;&lt;/code&gt;, with &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; = 1 if not given.</source>
          <target state="translated">&lt;code&gt;&amp;lt;rev&amp;gt;^&amp;lt;n&amp;gt;..&amp;lt;rev&amp;gt;&lt;/code&gt; と同等で、指定されていない場合は &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; = 1です。</target>
        </trans-unit>
        <trans-unit id="0c3185db11169cc7a29ed7dd80f79aa18ce0f759" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;--word-diff=color&lt;/code&gt; plus (if a regex was specified) &lt;code&gt;--word-diff-regex=&amp;lt;regex&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">相当 &lt;code&gt;--word-diff=color&lt;/code&gt; （正規表現が指定されている場合）に加え &lt;code&gt;--word-diff-regex=&amp;lt;regex&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fce804cbafec5e50fdfe3953fee8d48f776185de" translate="yes" xml:space="preserve">
          <source>Equivalent to passing &lt;code&gt;&amp;lt;base&amp;gt;..&amp;lt;rev1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;base&amp;gt;..&amp;lt;rev2&amp;gt;&lt;/code&gt;. Note that &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; does not need to be the exact branch point of the branches. Example: after rebasing a branch &lt;code&gt;my-topic&lt;/code&gt;, &lt;code&gt;git range-diff my-topic@{u} my-topic@{1} my-topic&lt;/code&gt; would show the differences introduced by the rebase.</source>
          <target state="translated">&lt;code&gt;&amp;lt;base&amp;gt;..&amp;lt;rev1&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;base&amp;gt;..&amp;lt;rev2&amp;gt;&lt;/code&gt; を渡すことと同等です。 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; は、ブランチの正確なブランチポイントである必要はないことに注意してください。例：ブランチ &lt;code&gt;my-topic&lt;/code&gt; をリベースした後、 &lt;code&gt;git range-diff my-topic@{u} my-topic@{1} my-topic&lt;/code&gt; は、リベースによって導入された違いを示します。</target>
        </trans-unit>
        <trans-unit id="fee223c131ae45dd7f0054cc61edf8587521b104" translate="yes" xml:space="preserve">
          <source>Equivalent to passing &lt;code&gt;&amp;lt;rev2&amp;gt;..&amp;lt;rev1&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;rev1&amp;gt;..&amp;lt;rev2&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;rev2&amp;gt;..&amp;lt;rev1&amp;gt;&lt;/code&gt; および &lt;code&gt;&amp;lt;rev1&amp;gt;..&amp;lt;rev2&amp;gt;&lt;/code&gt; を渡すことと同等です。</target>
        </trans-unit>
        <trans-unit id="d9b3a0b879a412ed7b377d180ca1727a3b8f2d6d" translate="yes" xml:space="preserve">
          <source>Error out if the stream ends without a &lt;code&gt;done&lt;/code&gt; command. Without this feature, errors causing the frontend to end abruptly at a convenient point in the stream can go undetected. This may occur, for example, if an import front end dies in mid-operation without emitting SIGTERM or SIGKILL at its subordinate git fast-import instance.</source>
          <target state="translated">ストリームが &lt;code&gt;done&lt;/code&gt; コマンドなしで終了した場合、エラーになります。この機能がないと、ストリームの都合のよい時点でフロントエンドが突然終了するエラーが検出されない可能性があります。これは、たとえば、下位フロントエンドのgit高速インポートインスタンスでSIGTERMまたはSIGKILLを発行せずにインポートフロントエンドが動作中に停止した場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="137e434092ea32c83e7a34f0c9bc0aa62d172e84" translate="yes" xml:space="preserve">
          <source>Especially useful for interoperability with a foreign versioning system.</source>
          <target state="translated">特に海外のバージョニングシステムとの相互運用性を高めるのに便利です。</target>
        </trans-unit>
        <trans-unit id="058d99599bd9d3348c2826266e98651571ad20e7" translate="yes" xml:space="preserve">
          <source>Evaluates an arbitrary shell command in each checked out submodule. The command has access to the variables $name, $sm_path, $displaypath, $sha1 and $toplevel: $name is the name of the relevant submodule section in &lt;code&gt;.gitmodules&lt;/code&gt;, $sm_path is the path of the submodule as recorded in the immediate superproject, $displaypath contains the relative path from the current working directory to the submodules root directory, $sha1 is the commit as recorded in the immediate superproject, and $toplevel is the absolute path to the top-level of the immediate superproject. Note that to avoid conflicts with &lt;code&gt;$PATH&lt;/code&gt; on Windows, the &lt;code&gt;$path&lt;/code&gt; variable is now a deprecated synonym of &lt;code&gt;$sm_path&lt;/code&gt; variable. Any submodules defined in the superproject but not checked out are ignored by this command. Unless given &lt;code&gt;--quiet&lt;/code&gt;, foreach prints the name of each submodule before evaluating the command. If &lt;code&gt;--recursive&lt;/code&gt; is given, submodules are traversed recursively (i.e. the given shell command is evaluated in nested submodules as well). A non-zero return from the command in any submodule causes the processing to terminate. This can be overridden by adding &lt;code&gt;|| :&lt;/code&gt; to the end of the command.</source>
          <target state="translated">チェックアウトした各サブモジュールで任意のシェルコマンドを評価します。コマンドは変数$ name、$ sm_path、$ displaypath、$ sha1、および$ toplevelにアクセスできます。$ nameは &lt;code&gt;.gitmodules&lt;/code&gt; の関連するサブモジュールセクションの名前、$ sm_pathは直接のスーパープロジェクトに記録されているサブモジュールのパスです、$ displaypathには現在の作業ディレクトリからサブモジュールのルートディレクトリへの相対パスが含まれ、$ sha1は直接のスーパープロジェクトに記録されたコミット、$ toplevelは直接のスーパープロジェクトのトップレベルへの絶対パスです。Windows上の &lt;code&gt;$PATH&lt;/code&gt; との競合を回避するため、 &lt;code&gt;$path&lt;/code&gt; 変数は &lt;code&gt;$sm_path&lt;/code&gt; 非推奨の同義語になりました。変数。スーパープロジェクトで定義されているがチェックアウトされていないサブモジュールは、このコマンドでは無視されます。 &lt;code&gt;--quiet&lt;/code&gt; を指定しない限り、foreachはコマンドを評価する前に各サブモジュールの名前を出力します。 &lt;code&gt;--recursive&lt;/code&gt; が指定されている場合、サブモジュールは再帰的にトラバースされます（つまり、指定されたシェルコマンドはネストされたサブモジュールでも評価されます）。サブモジュール内のコマンドからゼロ以外の戻り値があると、処理が終了します。 &lt;code&gt;|| :&lt;/code&gt; を追加することでこれを上書きできます。：コマンドの最後まで。</target>
        </trans-unit>
        <trans-unit id="3346640c72369c22dbe8ece1ce186df75f62b7da" translate="yes" xml:space="preserve">
          <source>Even if you don&amp;rsquo;t need to edit files but only want to e.g. rename or remove some and thus can avoid checking out each file (i.e. you can use --index-filter), you still are passing shell snippets for your filters. This means that for every commit, you have to have a prepared git repo where those filters can be run. That&amp;rsquo;s a significant setup.</source>
          <target state="translated">ファイルを編集する必要はなく、名前の変更や削除などを行い、各ファイルのチェックアウトを回避できる場合（つまり--index-filterを使用できる場合）でも、フィルターのシェルスニペットを渡します。つまり、すべてのコミットに対して、これらのフィルターを実行できるgitリポジトリを準備する必要があります。これは重要な設定です。</target>
        </trans-unit>
        <trans-unit id="5eb6ad0af0ebc64a82d836be8d647670a50936f8" translate="yes" xml:space="preserve">
          <source>Even if you hide refs, a client may still be able to steal the target objects via the techniques described in the &quot;SECURITY&quot; section of the &lt;a href=&quot;gitnamespaces&quot;&gt;gitnamespaces[7]&lt;/a&gt; man page; it&amp;rsquo;s best to keep private data in a separate repository.</source>
          <target state="translated">refsを非表示にしても、&lt;a href=&quot;gitnamespaces&quot;&gt;gitnamespaces [7]の&lt;/a&gt; manページの「SECURITY」セクションで説明されている手法を使用して、クライアントがターゲットオブジェクトを盗む可能性があります。プライベートデータは別のリポジトリに保存することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="631b3a432b8ec594fabc393b96af10483ed3b9bf" translate="yes" xml:space="preserve">
          <source>Even if you may have local modifications in your working tree, you can safely say &lt;code&gt;git pull&lt;/code&gt; when you know that the change in the other branch does not overlap with them.</source>
          <target state="translated">作業ツリーにローカルの変更がある場合でも、他のブランチの変更がそれらと重複しないことがわかっている場合は、 &lt;code&gt;git pull&lt;/code&gt; と安全に言うことができます。</target>
        </trans-unit>
        <trans-unit id="e9dc426299074d12c83589e674bb08692f265116" translate="yes" xml:space="preserve">
          <source>Even when version sort is used in &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt;, tagnames with the same base version but different suffixes are still sorted lexicographically, resulting e.g. in prerelease tags appearing after the main release (e.g. &quot;1.0-rc1&quot; after &quot;1.0&quot;). This variable can be specified to determine the sorting order of tags with different suffixes.</source>
          <target state="translated">バージョンの並べ替えが&lt;a href=&quot;git-tag&quot;&gt;git-tag [1]&lt;/a&gt;で使用されている場合でも、ベースバージョンは同じであるがサフィックスが異なるタグ名は辞書順に並べ替えられるため、たとえばメインリリースの後にプレリリースタグが表示されます（たとえば「1.0」の後に「1.0-rc1」）。 。この変数を指定して、サフィックスが異なるタグのソート順を決定できます。</target>
        </trans-unit>
        <trans-unit id="9e079d1f744d65307fba536fb55c673ed5690ed3" translate="yes" xml:space="preserve">
          <source>Event-Specific Key/Value Pairs</source>
          <target state="translated">イベント固有のキー/値のペア</target>
        </trans-unit>
        <trans-unit id="574b5ade849d92dcfbdbf5ca26c3f1b37761f49f" translate="yes" xml:space="preserve">
          <source>Events are written as lines of the form:</source>
          <target state="translated">イベントは形式の行として書かれています。</target>
        </trans-unit>
        <trans-unit id="af0aec79a3d13a4c4b91dbf7a8bc02d48eb692d6" translate="yes" xml:space="preserve">
          <source>Eventually the conclusion started with:</source>
          <target state="translated">最終的には結論から始まりました。</target>
        </trans-unit>
        <trans-unit id="e1529d50cc2b2be76fa87bc3d3169dd428571183" translate="yes" xml:space="preserve">
          <source>Eventually there will be no more revisions left to inspect, and the command will print out a description of the first bad commit. The reference &lt;code&gt;refs/bisect/bad&lt;/code&gt; will be left pointing at that commit.</source>
          <target state="translated">最終的には検査するリビジョンがなくなり、コマンドは最初の不良コミットの説明を出力します。参照 &lt;code&gt;refs/bisect/bad&lt;/code&gt; は、そのコミットを指したままになります。</target>
        </trans-unit>
        <trans-unit id="33494a61e10c94c6a655dac5cf7ce556eb778f1d" translate="yes" xml:space="preserve">
          <source>Every change in the history of a project is represented by a commit. The &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt; command shows the most recent commit on the current branch:</source>
          <target state="translated">プロジェクトの履歴のすべての変更は、コミットによって表されます。&lt;a href=&quot;git-show&quot;&gt;gitのショー[1]&lt;/a&gt;最新のが現在のブランチにコミットコマンドショー：</target>
        </trans-unit>
        <trans-unit id="c0294fb403c28f35bf86f99624f936e70c163f9d" translate="yes" xml:space="preserve">
          <source>Every commit (except the very first commit in a project) also has a parent commit which shows what happened before this commit. Following the chain of parents will eventually take you back to the beginning of the project.</source>
          <target state="translated">すべてのコミット(プロジェクトの最初のコミットを除く)には、このコミットの前に何があったかを示す親コミットがあります。親コミットの連鎖をたどることで、最終的にはプロジェクトの最初に戻ることができます。</target>
        </trans-unit>
        <trans-unit id="2fd9540af511da41e4e859d7e772df1cd2e0716c" translate="yes" xml:space="preserve">
          <source>Every commit has a 40-hexdigit id, sometimes called the &quot;object name&quot; or the &quot;SHA-1 id&quot;, shown on the first line of the &lt;code&gt;git show&lt;/code&gt; output. You can usually refer to a commit by a shorter name, such as a tag or a branch name, but this longer name can also be useful. Most importantly, it is a globally unique name for this commit: so if you tell somebody else the object name (for example in email), then you are guaranteed that name will refer to the same commit in their repository that it does in yours (assuming their repository has that commit at all). Since the object name is computed as a hash over the contents of the commit, you are guaranteed that the commit can never change without its name also changing.</source>
          <target state="translated">すべてのコミットには40桁の16進数のIDがあり、「オブジェクト名」または「SHA-1 ID」と呼ばれることもあり、 &lt;code&gt;git show&lt;/code&gt; 出力の最初の行に表示されます。通常、タグやブランチ名などの短い名前でコミットを参照できますが、この長い名前も役立ちます。最も重要なのは、それがこのコミットのグローバルに一意の名前であることです。そのため、他の人にオブジェクト名（たとえば電子メールで）を伝えると、その名前がリポジトリ内のコミットと同じコミットを参照することが保証されます（彼らのリポジトリにそのコミットがあると仮定します）。オブジェクト名はコミットの内容のハッシュとして計算されるため、名前も変更しない限り、コミットは変更できないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="2c58cc3c4a4eeeefba12cfd52db7d6b22833ae51" translate="yes" xml:space="preserve">
          <source>Every commit usually has one &quot;parent&quot; commit which points to the previous state of the project:</source>
          <target state="translated">すべてのコミットには通常、プロジェクトの前の状態を指す &quot;親 &quot;コミットがあります。</target>
        </trans-unit>
        <trans-unit id="1a873d3296fdc5740fd2d57065300557ff50e9de" translate="yes" xml:space="preserve">
          <source>Every git repository is marked with a numeric version in the &lt;code&gt;core.repositoryformatversion&lt;/code&gt; key of its &lt;code&gt;config&lt;/code&gt; file. This version specifies the rules for operating on the on-disk repository data. An implementation of git which does not understand a particular version advertised by an on-disk repository MUST NOT operate on that repository; doing so risks not only producing wrong results, but actually losing data.</source>
          <target state="translated">すべてのgitリポジトリは、 &lt;code&gt;config&lt;/code&gt; ファイルの &lt;code&gt;core.repositoryformatversion&lt;/code&gt; キーで数値バージョンでマークされています。このバージョンは、ディスク上のリポジトリデータを操作するためのルールを指定します。ディスク上のリポジトリによってアドバタイズされた特定のバージョンを理解しないgitの実装は、そのリポジトリで動作してはなりません（MUST NOT）。これを行うと、間違った結果が生成されるだけでなく、実際にデータが失われる危険があります。</target>
        </trans-unit>
        <trans-unit id="62d7b4b8755b9c58dc64c45f9e43e9a1848ebae6" translate="yes" xml:space="preserve">
          <source>Every helper must support the &quot;capabilities&quot; command, which Git uses to determine what other commands the helper will accept. Those other commands can be used to discover and update remote refs, transport objects between the object database and the remote repository, and update the local object store.</source>
          <target state="translated">すべてのヘルパーは &quot;capabilities&quot; コマンドをサポートしなければなりません。これらのコマンドは、リモート参照の発見や更新、オブジェクトデータベースとリモートリポジトリの間でのオブジェクトの転送、ローカルのオブジェクトストアの更新などに使用できます。</target>
        </trans-unit>
        <trans-unit id="a5adcecab706a9dd84c1d3eebe8cd1a4069a04b5" translate="yes" xml:space="preserve">
          <source>Every non-overlapping match of the &amp;lt;regex&amp;gt; is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences. You may want to append &lt;code&gt;|[^[:space:]]&lt;/code&gt; to your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is silently truncated(!) at the newline.</source>
          <target state="translated">&amp;lt;regex&amp;gt;の重複しない一致はすべて単語と見なされます。これらの一致の間にあるものはすべて空白と見なされ、違いを見つけるために無視されます（！）。正規表現に &lt;code&gt;|[^[:space:]]&lt;/code&gt; を追加して、空白以外のすべての文字と一致することを確認できます。改行を含む一致は、改行でサイレントに切り捨てられます（！）。</target>
        </trans-unit>
        <trans-unit id="ca9e8deab33d39332d7b528ab194c9573c58ac97" translate="yes" xml:space="preserve">
          <source>Every notes change creates a new commit at the specified notes ref. You can therefore inspect the history of the notes by invoking, e.g., &lt;code&gt;git log -p notes/commits&lt;/code&gt;. Currently the commit message only records which operation triggered the update, and the commit authorship is determined according to the usual rules (see &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;). These details may change in the future.</source>
          <target state="translated">ノートが変更されるたびに、指定されたノート参照に新しいコミットが作成されます。したがって、たとえば &lt;code&gt;git log -p notes/commits&lt;/code&gt; を呼び出すことにより、メモの履歴を調べることができます。現在、コミットメッセージは更新をトリガーした操作のみを記録し、コミットの作成者は通常のルールに従って決定されます（&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]を&lt;/a&gt;参照）。これらの詳細は将来変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5bfad9a034d5ed29730f0b4fba66efb6b1249b9d" translate="yes" xml:space="preserve">
          <source>Every once in a while have your frontend emit a &lt;code&gt;progress&lt;/code&gt; message to fast-import. The contents of the messages are entirely free-form, so one suggestion would be to output the current month and year each time the current commit date moves into the next month. Your users will feel better knowing how much of the data stream has been processed.</source>
          <target state="translated">時々、フロントエンドに &lt;code&gt;progress&lt;/code&gt; メッセージを出力させて高速インポートします。メッセージの内容は完全に自由形式であるため、現在のコミット日付が翌月に移動するたびに現在の月と年を出力することをお勧めします。ユーザーは、データストリームのどの程度が処理されたかをよく理解できます。</target>
        </trans-unit>
        <trans-unit id="cda48ad1074123130b527f02f3f1db8c4fd5c129" translate="yes" xml:space="preserve">
          <source>Every once in a while, &lt;code&gt;git repack&lt;/code&gt; the public repository. Go back to step 5. and continue working.</source>
          <target state="translated">&lt;code&gt;git repack&lt;/code&gt; 、gitは公開リポジトリを再パックします。手順5に戻り、作業を続けます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
