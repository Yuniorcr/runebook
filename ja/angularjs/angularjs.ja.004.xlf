<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angularjs">
    <body>
      <group id="angularjs">
        <trans-unit id="20dd27ac14a6636e950bb55c4e920c64e3cfa0d1" translate="yes" xml:space="preserve">
          <source>It is recommended to use &lt;a href=&quot;%24verifynopendingtasks&quot;&gt;&lt;code&gt;$verifyNoPendingTasks&lt;/code&gt;&lt;/a&gt; instead, which additionally supports verifying a specific type of tasks. For example, you can verify there are no pending timeouts with &lt;code&gt;$verifyNoPendingTasks('$timeout')&lt;/code&gt;.</source>
          <target state="translated">代わりに&lt;a href=&quot;%24verifynopendingtasks&quot;&gt; &lt;code&gt;$verifyNoPendingTasks&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。これは、特定のタイプのタスクの検証をさらにサポートします。たとえば、 &lt;code&gt;$verifyNoPendingTasks('$timeout')&lt;/code&gt; て、保留中のタイムアウトがないことを確認できます。</target>
        </trans-unit>
        <trans-unit id="5f45818ee9136dc6dadbc2fa5e5ca2b49e58cb3e" translate="yes" xml:space="preserve">
          <source>It is safe to do DOM transformation in the post-linking function on elements that are not waiting for their async templates to be resolved.</source>
          <target state="translated">非同期テンプレートが解決されるのを待っていない要素に対して、ポストリンク機能でDOM変換を行っても安全です。</target>
        </trans-unit>
        <trans-unit id="5cd79d0b11c62c96f4bc727951641d2d5341dda9" translate="yes" xml:space="preserve">
          <source>It is strongly discouraged to write filters that are stateful, because the execution of those can't be optimized by AngularJS, which often leads to performance issues. Many stateful filters can be converted into stateless filters just by exposing the hidden state as a model and turning it into an argument for the filter.</source>
          <target state="translated">ステートフルなフィルタを書くことは強くお勧めできません。多くのステートフルフィルタは、隠れた状態をモデルとして公開し、それをフィルタの引数にするだけでステートレスフィルタに変換することができます。</target>
        </trans-unit>
        <trans-unit id="6c70092309a32e4d1a0bcae4da2f3f0c325e2cf9" translate="yes" xml:space="preserve">
          <source>It is very helpful indeed if the framework guides developers through the entire journey of building an app: From designing the UI, through writing the business logic, to testing.</source>
          <target state="translated">フレームワークがアプリ構築の全行程を通して開発者をガイドしてくれるのであれば、本当に助かります。UI の設計から、ビジネスロジックの記述、テストに至るまで、開発者をガイドしてくれるのであれば、本当に助かります。</target>
        </trans-unit>
        <trans-unit id="a8e33bee9be3d901e4da72984e940ec4a7e8a400" translate="yes" xml:space="preserve">
          <source>It is worth noting that &lt;code&gt;.forEach&lt;/code&gt; does not iterate over inherited properties because it filters using the &lt;code&gt;hasOwnProperty&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;.forEach&lt;/code&gt; は、 &lt;code&gt;hasOwnProperty&lt;/code&gt; メソッドを使用してフィルタリングするため、継承されたプロパティを反復処理しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="611cdb339d280f84c55eabf4024dabc2e5e34ff2" translate="yes" xml:space="preserve">
          <source>It makes more sense to show nothing than to throw an exception if &lt;code&gt;a&lt;/code&gt; is undefined (perhaps we are waiting for the server response, and it will become defined soon). If expression evaluation wasn't forgiving we'd have to write bindings that clutter the code, for example: &lt;code&gt;{{((a||{}).b||{}).c}}&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; が未定義の場合は例外をスローするよりも何も表示しない方が理にかなっています（おそらく、サーバーの応答を待っているので、すぐに定義されます）。式の評価が許されなかった場合、コードを乱雑にするバインディングを作成する必要があります。例： &lt;code&gt;{{((a||{}).b||{}).c}}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3741e91b84dec124290a25fd27ad2bd88202ce9" translate="yes" xml:space="preserve">
          <source>It needs to be able to clone new &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements for every &lt;code&gt;action&lt;/code&gt; in &lt;code&gt;user.actions&lt;/code&gt;. This initially seems trivial, but it becomes more complicated when you consider that &lt;code&gt;user.actions&lt;/code&gt; might have items added to it later. This means that it needs to save a clean copy of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element for cloning purposes.</source>
          <target state="translated">これは、新しいクローンできるようにする必要があります &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; すべてのための要素 &lt;code&gt;action&lt;/code&gt; で &lt;code&gt;user.actions&lt;/code&gt; を。これは最初は些細なことのように見えますが、 &lt;code&gt;user.actions&lt;/code&gt; 項目が追加される可能性があると考えると、さらに複雑になります。つまり、クローン作成のために &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素のクリーンなコピーを保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="044534907de0e3d02f1d6dcf3bd09783d0a7ce1a" translate="yes" xml:space="preserve">
          <source>It will not be evaluated:</source>
          <target state="translated">評価されることはありません。</target>
        </trans-unit>
        <trans-unit id="51d3504ce322f478d04b175eb950e68a8c86c2ed" translate="yes" xml:space="preserve">
          <source>It will not insert undefined values into the cache.</source>
          <target state="translated">未定義の値をキャッシュに挿入しません。</target>
        </trans-unit>
        <trans-unit id="647a38d6c647676338b60b9a322ac3dc18d5d2e4" translate="yes" xml:space="preserve">
          <source>It's also possible to add components via &lt;a href=&quot;../api/ng/provider/%24compileprovider#component.html&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt; in a module's config phase.</source>
          <target state="translated">モジュールの設定フェーズで&lt;a href=&quot;../api/ng/provider/%24compileprovider#component.html&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt;を介してコンポーネントを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="22f4771591ad7899072f54bc41e4b386849c26e5" translate="yes" xml:space="preserve">
          <source>It's important to note that AngularJS operates on DOM nodes rather than strings. Usually, you don't notice this restriction because when a page loads, the web browser parses HTML into the DOM automatically.</source>
          <target state="translated">AngularJSは文字列ではなくDOMノードで動作することに注意してください。通常、ページが読み込まれるとブラウザが自動的にHTMLをDOMに解析するので、この制限に気づくことはありません。</target>
        </trans-unit>
        <trans-unit id="63749726fcc574a51f6aa95ccfbd08fbb78f8122" translate="yes" xml:space="preserve">
          <source>It's important to remember that SCE only applies to interpolation expressions.</source>
          <target state="translated">SCEは補間式にしか適用されないことを覚えておきましょう。</target>
        </trans-unit>
        <trans-unit id="97fe1b00d73664eb3be824469d6bc43514c62a58" translate="yes" xml:space="preserve">
          <source>It's just a simple call to &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;, but extracted into a service, so that one can override this service with &lt;a href=&quot;https://gist.github.com/1649788&quot;&gt;BC version&lt;/a&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injectorの&lt;/a&gt;単なる呼び出しですが、サービスに抽出されるため、このサービスを&lt;a href=&quot;https://gist.github.com/1649788&quot;&gt;BCバージョンで&lt;/a&gt;オーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="8e7cdaffe82fa8054dcd10304a4d6e6e817934e7" translate="yes" xml:space="preserve">
          <source>It's rare for directives to have a &lt;strong&gt;compile function&lt;/strong&gt;, since most directives are concerned with working with a specific DOM element instance rather than changing its overall structure.</source>
          <target state="translated">ほとんどのディレクティブは、全体的な構造を変更するのではなく、特定のDOM要素のインスタンスを操作することに関係しているため、ディレクティブが&lt;strong&gt;コンパイル関数&lt;/strong&gt;を持つことはまれです。</target>
        </trans-unit>
        <trans-unit id="d8f50a90fa099f10e64b9bd1dc9869f5899151a0" translate="yes" xml:space="preserve">
          <source>It's worth noting that the success callback for &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and other methods gets called with the resource instance (populated with the data that came from the server) as well as an &lt;code&gt;$http&lt;/code&gt; header getter function, the HTTP status code and the response status text. So one could rewrite the above example and get access to HTTP headers as follows:</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;query&lt;/code&gt; 、およびその他のメソッドの成功コールバックは、リソースインスタンス（サーバーから取得したデータが入力されている）と &lt;code&gt;$http&lt;/code&gt; ヘッダーのgetter関数、HTTPステータスコード、および応答ステータステキストで呼び出されることに注意してください。。したがって、上記の例を書き換えて、次のようにHTTPヘッダーにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="b5c6b93cece7b56e6dd78ac2666ff04806c02f52" translate="yes" xml:space="preserve">
          <source>Iterating over object properties</source>
          <target state="translated">オブジェクトのプロパティを繰り返し処理する</target>
        </trans-unit>
        <trans-unit id="d168d1da3e52bad6c8a376a1d89c87495a6d115b" translate="yes" xml:space="preserve">
          <source>Iterator function.</source>
          <target state="translated">イテレータ関数。</target>
        </trans-unit>
        <trans-unit id="92529e5e57daf03b5c7563eb34fd6f6925c58ee2" translate="yes" xml:space="preserve">
          <source>Its name (&lt;code&gt;customerInfo&lt;/code&gt;) corresponds to the directive's &lt;strong&gt;isolate scope&lt;/strong&gt; property, &lt;code&gt;customerInfo&lt;/code&gt;.</source>
          <target state="translated">その名前（ &lt;code&gt;customerInfo&lt;/code&gt; ）は、ディレクティブの&lt;strong&gt;分離スコープ&lt;/strong&gt;プロパティ &lt;code&gt;customerInfo&lt;/code&gt; に対応しています。</target>
        </trans-unit>
        <trans-unit id="e18ffa2ef59d4b87123bc4116b7fecfc6e23eb76" translate="yes" xml:space="preserve">
          <source>Its value (&lt;code&gt;=info&lt;/code&gt;) tells &lt;code&gt;$compile&lt;/code&gt; to bind to the &lt;code&gt;info&lt;/code&gt; attribute.</source>
          <target state="translated">その値（ &lt;code&gt;=info&lt;/code&gt; ）は、 &lt;code&gt;$compile&lt;/code&gt; に &lt;code&gt;info&lt;/code&gt; 属性にバインドするように指示します。</target>
        </trans-unit>
        <trans-unit id="e2109f35483e028183630e81dec66527c27fcb3c" translate="yes" xml:space="preserve">
          <source>JSON Hijacking Protection</source>
          <target state="translated">JSON ハイジャック対策</target>
        </trans-unit>
        <trans-unit id="a73f31364f316869a18b10faeec2662cc4789dca" translate="yes" xml:space="preserve">
          <source>JSON Vulnerability Protection</source>
          <target state="translated">JSON 脆弱性対策</target>
        </trans-unit>
        <trans-unit id="1a3f795e84cd2bbb65926a8a582d42403b1d5c7a" translate="yes" xml:space="preserve">
          <source>JSON string to deserialize.</source>
          <target state="translated">デシリアライズするJSON文字列。</target>
        </trans-unit>
        <trans-unit id="e7310488497f531f2e417022cb940817561304d1" translate="yes" xml:space="preserve">
          <source>JSON string.</source>
          <target state="translated">JSON文字列。</target>
        </trans-unit>
        <trans-unit id="cd109ddd9abf44c82c6e482563ac9c2d1dab6b46" translate="yes" xml:space="preserve">
          <source>JSON vulnerability</source>
          <target state="translated">JSON脆弱性</target>
        </trans-unit>
        <trans-unit id="f3231f4d14fc745f083c6fc41fdecc2a60618120" translate="yes" xml:space="preserve">
          <source>JSON-ified string representing &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; を表すJSON化された文字列。</target>
        </trans-unit>
        <trans-unit id="df2d62a7c9d7c1a7fdd0de39b8a9f3b75d1b3fe4" translate="yes" xml:space="preserve">
          <source>JSONP requests must specify a callback to be used in the response from the server. This callback is passed as a query parameter in the request. You must specify the name of this parameter by setting the &lt;code&gt;jsonpCallbackParam&lt;/code&gt; property on the request config object.</source>
          <target state="translated">JSONPリクエストは、サーバーからの応答で使用されるコールバックを指定する必要があります。このコールバックは、リクエストのクエリパラメータとして渡されます。リクエスト設定オブジェクトの &lt;code&gt;jsonpCallbackParam&lt;/code&gt; プロパティを設定して、このパラメーターの名前を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="3755f3f206953314cab133719791d70c7c568127" translate="yes" xml:space="preserve">
          <source>Jasmine</source>
          <target state="translated">Jasmine</target>
        </trans-unit>
        <trans-unit id="ec4307a3b7c7279b22900f7258d244467b4170ca" translate="yes" xml:space="preserve">
          <source>Jasmine comes with a number of matchers that help you make a variety of assertions. You should &lt;a href=&quot;http://jasmine.github.io/1.3/introduction.html#section-Matchers&quot;&gt;read the Jasmine documentation&lt;/a&gt; to see what they are. To use Jasmine with Karma, we use the &lt;a href=&quot;https://github.com/karma-runner/karma-jasmine&quot;&gt;karma-jasmine&lt;/a&gt; test runner.</source>
          <target state="translated">Jasmineには、さまざまなアサーションを作成するのに役立つ多数のマッチャーが付属しています。あなたはすべきである&lt;a href=&quot;http://jasmine.github.io/1.3/introduction.html#section-Matchers&quot;&gt;ジャスミンのドキュメントを読んで&lt;/a&gt;、彼らが何であるかを見るために。KarmaでJasmineを使用するには、&lt;a href=&quot;https://github.com/karma-runner/karma-jasmine&quot;&gt;karma-jasmine&lt;/a&gt;テストランナーを使用します。</target>
        </trans-unit>
        <trans-unit id="06353eaa73f71ca7f32f2abd2d524ecc102f0f53" translate="yes" xml:space="preserve">
          <source>Jasmine's &lt;code&gt;beforeAll()&lt;/code&gt; and mocha's &lt;code&gt;before()&lt;/code&gt; hooks are often useful for sharing test setup - either to reduce test run-time or simply to make for more focused test cases.</source>
          <target state="translated">Jasmineの &lt;code&gt;beforeAll()&lt;/code&gt; およびmochaの &lt;code&gt;before()&lt;/code&gt; フックは、テストの実行時間を短縮するため、または単により集中したテストケースを作成するために、テストセットアップを共有するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="cd26eab17c125b6d4053a3b51afa63e0255f89fb" translate="yes" xml:space="preserve">
          <source>JavaScript developers often use custom types to write object-oriented code. Let's explore how we could launch a unicorn into space via our &lt;code&gt;unicornLauncher&lt;/code&gt; service which is an instance of a custom type:</source>
          <target state="translated">JavaScript開発者は、カスタム型を使用してオブジェクト指向コードを作成することがよくあります。カスタムタイプのインスタンスである &lt;code&gt;unicornLauncher&lt;/code&gt; サービスを介してユニコーンを空間に起動する方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="ee93c12cc73a4b3357dead9e3073e9c84333533a" translate="yes" xml:space="preserve">
          <source>JavaScript does not have annotations, and annotations are needed for dependency injection. The following are all valid ways of annotating function with injection arguments and are equivalent.</source>
          <target state="translated">JavaScriptにはアノテーションがなく、依存性注入にはアノテーションが必要です。以下は、インジェクション引数を持つ関数にアノテーションを付ける有効な方法であり、すべて同等です。</target>
        </trans-unit>
        <trans-unit id="f87f3f5a13f550d2b612f32c40eed8fdfb04d4d7" translate="yes" xml:space="preserve">
          <source>JavaScript is a dynamically typed language which comes with great power of expression, but it also comes with almost no help from the compiler. For this reason we feel very strongly that any code written in JavaScript needs to come with a strong set of tests. We have built many features into AngularJS which make testing your AngularJS applications easy. With AngularJS, there is no excuse for not testing.</source>
          <target state="translated">JavaScript は動的型付けされた言語であり、非常に強力な表現力を持っていますが、コンパイラの助けをほとんど必要としません。そのため、JavaScriptで書かれたコードには強力なテストが必要だと強く感じています。私たちはAngularJSに多くの機能を組み込み、AngularJSアプリケーションのテストを簡単にしています。AngularJSがあれば、テストをしない言い訳はありません。</target>
        </trans-unit>
        <trans-unit id="4fadc60e22e889ef4a5db8d9566fc1f75d1e1fc3" translate="yes" xml:space="preserve">
          <source>JavaScript-based Animations</source>
          <target state="translated">JavaScriptベースのアニメーション</target>
        </trans-unit>
        <trans-unit id="f0c95a02174fcae881d51cda5ca7ab7183d9d05f" translate="yes" xml:space="preserve">
          <source>Just before a scope is destroyed, a &lt;code&gt;$destroy&lt;/code&gt; event is broadcasted on this scope. Application code can register a &lt;code&gt;$destroy&lt;/code&gt; event handler that will give it a chance to perform any necessary cleanup.</source>
          <target state="translated">スコープが破棄される直前に、 &lt;code&gt;$destroy&lt;/code&gt; イベントがこのスコープでブロードキャストされます。アプリケーションコードは、必要なクリーンアップを実行する機会を与える &lt;code&gt;$destroy&lt;/code&gt; イベントハンドラーを登録できます。</target>
        </trans-unit>
        <trans-unit id="446df7317547fafc6781146fe724896a641a6589" translate="yes" xml:space="preserve">
          <source>Just like with the Value recipe, the Factory recipe can create a service of any type, whether it be a primitive, object literal, function, or even an instance of a custom type.</source>
          <target state="translated">Valueレシピと同じように、Factoryレシピは、プリミティブ、オブジェクトリテラル、関数、カスタムタイプのインスタンスであっても、任意のタイプのサービスを作成することができます。</target>
        </trans-unit>
        <trans-unit id="6f3bad15c258125fed5359f408174ac231480f45" translate="yes" xml:space="preserve">
          <source>Just like with the array annotation, you'll need to take care to keep the &lt;code&gt;$inject&lt;/code&gt; in sync with the parameters in the function declaration.</source>
          <target state="translated">配列注釈の場合と同様に、 &lt;code&gt;$inject&lt;/code&gt; が関数宣言のパラメーターと同期するように注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="83b97c0c14f5a90f7cfc308d350169d4502ed064" translate="yes" xml:space="preserve">
          <source>Just starting out with AngularJS? Try working through our step by step tutorial or try building on our seed project.</source>
          <target state="translated">AngularJSを使い始めたばかりですか?ステップバイステップのチュートリアルで作業してみたり、シードプロジェクトで構築してみたりしてください。</target>
        </trans-unit>
        <trans-unit id="835db6cf74c39f78cc6a89ccd0b07490be2e3f7d" translate="yes" xml:space="preserve">
          <source>Karma</source>
          <target state="translated">Karma</target>
        </trans-unit>
        <trans-unit id="796757c2eef12e78a1cedcfc4dd244620a421fe3" translate="yes" xml:space="preserve">
          <source>Karma is a NodeJS application, and should be installed through npm/yarn. Full installation instructions are available on &lt;a href=&quot;http://karma-runner.github.io/0.12/intro/installation.html&quot;&gt;the Karma website&lt;/a&gt;.</source>
          <target state="translated">KarmaはNodeJSアプリケーションであり、npm / yarnを介してインストールする必要があります。完全なインストール手順は&lt;a href=&quot;http://karma-runner.github.io/0.12/intro/installation.html&quot;&gt;、Karma Webサイトで&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="b3f05628aa30b14f4028806e1eb5cdfe5f20cc24" translate="yes" xml:space="preserve">
          <source>Keep in mind that extending the built-in list of attributes may expose your app to XSS or other vulnerabilities. Be very mindful of the attributes you add.</source>
          <target state="translated">ビルトインの属性リストを拡張すると、アプリがXSSやその他の脆弱性にさらされる可能性があることに注意してください。追加する属性には十分に注意してください。</target>
        </trans-unit>
        <trans-unit id="a92f7b09ee83168618ccf21bf5c35dba619424e7" translate="yes" xml:space="preserve">
          <source>Keep in mind that extending the built-in lists of elements may expose your app to XSS or other vulnerabilities. Be very mindful of the elements you add.</source>
          <target state="translated">組み込みの要素リストを拡張すると、アプリが XSS やその他の脆弱性にさらされる可能性があることに注意してください。追加する要素には十分に注意してください。</target>
        </trans-unit>
        <trans-unit id="0b7234c93db939ba9dc42512dc4a50d3d5fc5e8d" translate="yes" xml:space="preserve">
          <source>Keep in mind that ngAnimate can detect each of these classes when added and removed.</source>
          <target state="translated">これらのクラスが追加されたり削除されたりした場合、ngAnimate はそれぞれのクラスを検出できることを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="c7b11c7d42b4f9176649a2805e7a06ba3998ac5d" translate="yes" xml:space="preserve">
          <source>Keep in mind that, as of AngularJS version 1.3, there is no need to change the display property to block during animation states - ngAnimate will automatically handle the style toggling for you.</source>
          <target state="translated">AngularJSバージョン1.3では、アニメーションの状態でdisplayプロパティをブロックするように変更する必要はありません。</target>
        </trans-unit>
        <trans-unit id="8f7f42cad636bff6a772bcf1eda4ec9fe24b543e" translate="yes" xml:space="preserve">
          <source>Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss (so there is no need to call &lt;code&gt;runner.done(doneFn)&lt;/code&gt; inside of your JavaScript animation code). Check the &lt;a href=&quot;%24animatecss#usage.html&quot;&gt;animation code above&lt;/a&gt; to see how this works.</source>
          <target state="translated">これを簡単にするために、ngAnimateはJSアニメーションAPIを微調整して、ランナーインスタンスが$ animateCssから返されたときを認識するようにしています &lt;code&gt;runner.done(doneFn)&lt;/code&gt; 、JavaScriptアニメーションコード内でrunner.done（doneFn）を呼び出す必要はありません）。&lt;a href=&quot;%24animatecss#usage.html&quot;&gt;上記&lt;/a&gt;のアニメーションコードをチェックして、これがどのように機能するかを確認してください。</target>
        </trans-unit>
        <trans-unit id="f6da5d91090ed7c6d5814b2991a120259c7d9e93" translate="yes" xml:space="preserve">
          <source>Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).</source>
          <target state="translated">コントロールの状態(validinvalid、dirtypristine、toucheduntouched、バリデーションエラー)を維持する。</target>
        </trans-unit>
        <trans-unit id="249603dc1891319661212764d6ba00d514a14c84" translate="yes" xml:space="preserve">
          <source>KendoUI</source>
          <target state="translated">KendoUI</target>
        </trans-unit>
        <trans-unit id="f5025143a89e9b224781aa62468c0e2c91c66496" translate="yes" xml:space="preserve">
          <source>Known Issues</source>
          <target state="translated">既知の問題</target>
        </trans-unit>
        <trans-unit id="5b0c7a2bd6ffad5686bfa5559eb7d1db15d82077" translate="yes" xml:space="preserve">
          <source>Later, if you want to remove the transcluded content from your DOM then you should also destroy the associated transclusion scope:</source>
          <target state="translated">後日、トランスクルージョンされたコンテンツを DOM から削除したい場合は、関連するトランスクルージョンスコープも破棄しなければなりません。</target>
        </trans-unit>
        <trans-unit id="80de8be3b722879c53efa51624711a0b6a01add8" translate="yes" xml:space="preserve">
          <source>Lazily instantiated &amp;ndash; AngularJS only instantiates a service when an application component depends on it.</source>
          <target state="translated">遅延インスタンス化&amp;ndash; AngularJSは、アプリケーションコンポーネントが依存しているサービスのみをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="b048378ee8f5a0297ca090e6904d0ccf8b77cd20" translate="yes" xml:space="preserve">
          <source>Learn</source>
          <target state="translated">Learn</target>
        </trans-unit>
        <trans-unit id="dbeb304ace39b2772a333789790e10087fec101d" translate="yes" xml:space="preserve">
          <source>Let's add some more logic to the example that allows us to enter and calculate the costs in different currencies and also pay the invoice.</source>
          <target state="translated">異なる通貨でコストを入力して計算し、請求書の支払いもできるようにする例にロジックを追加してみましょう。</target>
        </trans-unit>
        <trans-unit id="90ea8d67278fa3e22b77b8cc09d3a394d5450b4e" translate="yes" xml:space="preserve">
          <source>Let's change our directive to use &lt;code&gt;restrict: 'E'&lt;/code&gt;:</source>
          <target state="translated">ディレクティブを &lt;code&gt;restrict: 'E'&lt;/code&gt; を使用するように変更してみましょう： 'E'：</target>
        </trans-unit>
        <trans-unit id="d91be5ddf9ad7a7db54de0a3590a672352083fa1" translate="yes" xml:space="preserve">
          <source>Let's create a directive that simply replaces its contents with a static template:</source>
          <target state="translated">内容を静的なテンプレートに置き換えるだけのディレクティブを作ってみましょう。</target>
        </trans-unit>
        <trans-unit id="e3b2a3b462354632d09f1e671f1d24fa08274712" translate="yes" xml:space="preserve">
          <source>Let's finish our example by fetching the exchange rates from the &lt;a href=&quot;https://exchangeratesapi.io&quot;&gt;exchangeratesapi.io&lt;/a&gt; exchange rate API. The following example shows how this is done with AngularJS:</source>
          <target state="translated">&lt;a href=&quot;https://exchangeratesapi.io&quot;&gt;Exchangeatesatesapi.io&lt;/a&gt;為替レートAPI から為替レートをフェッチして、例を完成させましょう。次の例は、AngularJSでこれを行う方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a2d73fe9e2675c4a6e225d3286eff53e81aab313" translate="yes" xml:space="preserve">
          <source>Let's refactor our example and move the currency conversion into a service in another file:</source>
          <target state="translated">この例をリファクタリングして、通貨変換を別のファイルのサービスに移動してみましょう。</target>
        </trans-unit>
        <trans-unit id="e33ef1ad31a993b44b167589b8164ec89e801fcb" translate="yes" xml:space="preserve">
          <source>Let's say for example we have two views that are managed by &lt;code&gt;ng-view&lt;/code&gt; and we want to show that there is a relationship between two components situated in within these views. By using the &lt;code&gt;ng-animate-ref&lt;/code&gt; attribute we can identify that the two components are paired together and we can then attach an animation, which is triggered when the view changes.</source>
          <target state="translated">たとえば、 &lt;code&gt;ng-view&lt;/code&gt; によって管理される2つのビューがあり、これらのビュー内にある2つのコンポーネント間に関係があることを示したいとしましょう。使用して、 &lt;code&gt;ng-animate-ref&lt;/code&gt; 属性を我々は2つの成分が一緒に対になっていることを識別することができると我々は、ビューが変更されたときにトリガされたアニメーションを、取り付けることができます。</target>
        </trans-unit>
        <trans-unit id="298a3adba79b2a136a068e0087e224c280869e40" translate="yes" xml:space="preserve">
          <source>Let's say that our &lt;code&gt;unicornLauncher&lt;/code&gt; service can stamp a unicorn with the planet name it's being launched from if this name was provided during the configuration phase. The planet name is application specific and is used also by various controllers during the runtime of the application. We can then define the planet name as a constant like this:</source>
          <target state="translated">ユニコーン &lt;code&gt;unicornLauncher&lt;/code&gt; サービスが、構成フェーズ中にこの名前が提供された場合、起動元の惑星の名前でユニコーンにスタンプを付けることができるとしましょう。惑星名はアプリケーション固有であり、アプリケーションの実行中にさまざまなコントローラーによっても使用されます。次に、惑星名を次のような定数として定義できます。</target>
        </trans-unit>
        <trans-unit id="9f0321f70aa92a49f56c96150c79e4cd2b88e227" translate="yes" xml:space="preserve">
          <source>Let's say that our &lt;code&gt;unicornLauncher&lt;/code&gt; service is so awesome that many apps use it. By default the launcher shoots unicorns into space without any protective shielding. But on some planets the atmosphere is so thick that we must wrap every unicorn in tinfoil before sending it on its intergalactic trip, otherwise they would burn while passing through the atmosphere. It would then be great if we could configure the launcher to use the tinfoil shielding for each launch in apps that need it. We can make it configurable like so:</source>
          <target state="translated">私たちの &lt;code&gt;unicornLauncher&lt;/code&gt; サービスが非常に素晴らしく、多くのアプリがそれを使用しているとしましょう。デフォルトでは、ランチャーはユニコーンを保護シールドなしで宇宙に発射します。しかし、一部の惑星では大気が非常に厚いため、銀河間旅行に送る前にすべてのユニコーンをアルミホイルで包まなければなりません。それから、それを必要とするアプリでの起動ごとにアルミ箔のシールドを使用するようにランチャーを構成できればすばらしいでしょう。次のように構成可能にすることができます。</target>
        </trans-unit>
        <trans-unit id="7d4554d27f3ea48a7db947cce4f856a4b1a611a8" translate="yes" xml:space="preserve">
          <source>Let's say that our HTML code for our messages container looks like so:</source>
          <target state="translated">メッセージコンテナのHTMLコードが以下のようになっているとしましょう。</target>
        </trans-unit>
        <trans-unit id="f866ae3fd006fdb24ccbab98934a0c21ceee6ca1" translate="yes" xml:space="preserve">
          <source>Let's say that we want to have a very simple service called &quot;clientId&quot; that provides a string representing an authentication id used for some remote API. You would define it like this:</source>
          <target state="translated">例えば、リモート API で使用する認証 ID を表す文字列を提供する &quot;clientId&quot; という非常にシンプルなサービスが欲しいとしましょう。このサービスは次のように定義します。</target>
        </trans-unit>
        <trans-unit id="6b8a3e62938bff7b32e460edfe415d213c9c307c" translate="yes" xml:space="preserve">
          <source>Let's say we have created an app that uses the default format for many of our &lt;code&gt;Date&lt;/code&gt; filters. Suddenly requirements have changed (that never happens) and we need all of our default dates to be &lt;code&gt;'shortDate'&lt;/code&gt; instead of &lt;code&gt;'mediumDate'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; フィルターの多くにデフォルト形式を使用するアプリを作成したとしましょう。突然の要件は（起こらないことを）変更されていると、私たちはあることを私たちのデフォルトの日付のすべてを必要とする &lt;code&gt;'shortDate'&lt;/code&gt; の代わりに &lt;code&gt;'mediumDate'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a869f2b1dc009607a199a9b62ccec65eadcb3a2" translate="yes" xml:space="preserve">
          <source>Let's say you are writing a banking app and you want to display an account balance of 1000 dollars. You write the following binding using the currency filter:</source>
          <target state="translated">銀行アプリを書いていて、1000ドルの口座残高を表示したいとします。通貨フィルターを使って以下のようなバインディングを書きます。</target>
        </trans-unit>
        <trans-unit id="c628b1fd2c31e5e7025394209d765b5f5e59eda2" translate="yes" xml:space="preserve">
          <source>Let's say you have a chunk of your template that represents a customer's information. This template is repeated many times in your code. When you change it in one place, you have to change it in several others. This is a good opportunity to use a directive to simplify your template.</source>
          <target state="translated">顧客情報を表すテンプレートの塊があるとしましょう。このテンプレートはコードの中で何度も繰り返されます。ある場所で変更すると、他の場所でも変更しなければなりません。これはテンプレートを単純化するためにディレクティブを使う良い機会です。</target>
        </trans-unit>
        <trans-unit id="c8c58cb6d56f10eb4cc5271ca81a0f4260534c05" translate="yes" xml:space="preserve">
          <source>Let's say, however, that we would also like to create a service that computes a token used for authentication against a remote API. This token will be called &lt;code&gt;apiToken&lt;/code&gt; and will be computed based on the &lt;code&gt;clientId&lt;/code&gt; value and a secret stored in the browser's local storage:</source>
          <target state="translated">ただし、リモートAPIに対する認証に使用されるトークンを計算するサービスも作成したいとします。このトークンは &lt;code&gt;apiToken&lt;/code&gt; と呼ばれ、 &lt;code&gt;clientId&lt;/code&gt; 値とブラウザーのローカルストレージに格納されているシークレットに基づいて計算されます。</target>
        </trans-unit>
        <trans-unit id="ebb2113b148155b9fb3e678b86a1b6292b725041" translate="yes" xml:space="preserve">
          <source>Let's see an example of a enter/leave animation using &lt;code&gt;ngRepeat&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ngRepeat&lt;/code&gt; を使用したEnter / Leaveアニメーションの例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="dd679a2e36289a34afcd1847fbd10d9cfe7cf0a5" translate="yes" xml:space="preserve">
          <source>Let's start with an AngularJS app with no dependencies.</source>
          <target state="translated">まずは依存関係のないAngularJSアプリから始めてみましょう。</target>
        </trans-unit>
        <trans-unit id="853b64b22116270e945534edd7f9f969ae039277" translate="yes" xml:space="preserve">
          <source>Let's start with input fields for quantity and cost whose values are multiplied to produce the total of the invoice:</source>
          <target state="translated">まず、請求書の合計を生成するために、その値を乗算する数量とコストの入力フィールドから始めましょう。</target>
        </trans-unit>
        <trans-unit id="3a87426a46ae3a1bd831c83a8ac22a86b6a2ddc6" translate="yes" xml:space="preserve">
          <source>Let's take a closer look at the scope option:</source>
          <target state="translated">スコープオプションについて詳しく見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="ad6f98d49bcc332ad093324b782e6e8ec7a31f24" translate="yes" xml:space="preserve">
          <source>Let's take a look at how we would create a very simple component via the directive api that depends on the &lt;code&gt;planetName&lt;/code&gt; constant we've just defined and displays the planet name, in our case: &quot;Planet Name: Greasy Giant&quot;.</source>
          <target state="translated">先ほど定義した &lt;code&gt;planetName&lt;/code&gt; 定数に依存するディレクティブapiを介して非常にシンプルなコンポーネントを作成し、惑星名を表示する方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="02630abdf06f034279a0636877f3aa1fce289330" translate="yes" xml:space="preserve">
          <source>Let's take a look at the different scenarios for creating and using services via various recipe types. We'll start with the simplest case possible where various places in your code need a shared string and we'll accomplish this via Value recipe.</source>
          <target state="translated">さまざまなレシピタイプを介してサービスを作成して使用するためのさまざまなシナリオを見てみましょう。コードの様々な場所で共有文字列を必要とする最も単純なケースから始め、Valueレシピを介してこれを達成します。</target>
        </trans-unit>
        <trans-unit id="65084febdc505a3aedac5a7c194b2efa216e2144" translate="yes" xml:space="preserve">
          <source>Let's write some tests to show how to override configuration in tests.</source>
          <target state="translated">テストで設定を上書きする方法を示すために、いくつかのテストを書いてみましょう。</target>
        </trans-unit>
        <trans-unit id="e91f6ba4ec02c67a796600daa345b1a2b526d763" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution License 4.0.</source>
          <target state="translated">クリエイティブ・コモンズ表示ライセンス4.0の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="d3911533e30bd2745884e44a33dc2841ba42a193" translate="yes" xml:space="preserve">
          <source>Life-cycle hook examples</source>
          <target state="translated">ライフサイクルフックの例</target>
        </trans-unit>
        <trans-unit id="72d665ddd236e21d4dba142cf80503414b7be118" translate="yes" xml:space="preserve">
          <source>Life-cycle hooks</source>
          <target state="translated">ライフサイクルフック</target>
        </trans-unit>
        <trans-unit id="ad7b72d8ff408e1dcf3b167cf8de1b0af89c8cd1" translate="yes" xml:space="preserve">
          <source>Like any software library, it is critical to keep AngularJS up to date. Please track the &lt;a href=&quot;https://github.com/angular/angular.js/blob/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; and make sure you are aware of upcoming security patches and other updates.</source>
          <target state="translated">他のソフトウェアライブラリと同様に、AngularJSを最新の状態に保つことが重要です。&lt;a href=&quot;https://github.com/angular/angular.js/blob/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;を追跡し、今後のセキュリティパッチやその他の更新を確実に把握してください。</target>
        </trans-unit>
        <trans-unit id="4aff2bb0aea69064ecfe10bde17f80bcd00b4eab" translate="yes" xml:space="preserve">
          <source>Like with &lt;code&gt;$provide.decorator&lt;/code&gt;, the &lt;code&gt;module.decorator&lt;/code&gt; function runs during the config phase of the app. That means you can define a &lt;code&gt;module.decorator&lt;/code&gt; before the decorated service is defined.</source>
          <target state="translated">同じように &lt;code&gt;$provide.decorator&lt;/code&gt; 、 &lt;code&gt;module.decorator&lt;/code&gt; の機能は、アプリの設定の段階で実行されます。つまり、装飾されたサービスを定義する前に &lt;code&gt;module.decorator&lt;/code&gt; を定義できます。</target>
        </trans-unit>
        <trans-unit id="a33352096ab23bfe64b61b04f4606de68cb10c82" translate="yes" xml:space="preserve">
          <source>Links starting with '/' that lead to a different base path</source>
          <target state="translated">''で始まるリンクは、別のベースパスにつながります。</target>
        </trans-unit>
        <trans-unit id="6c73374c914b151e896711eea2feec173d938d57" translate="yes" xml:space="preserve">
          <source>Links that contain &lt;code&gt;target&lt;/code&gt; element</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; 要素を含むリンク</target>
        </trans-unit>
        <trans-unit id="82538d88e9ab837cce2872605a50080ea1374920" translate="yes" xml:space="preserve">
          <source>Listener directives, such as &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;ng-click&lt;/a&gt;, register a listener with the DOM. When the DOM listener fires, the directive executes the associated expression and updates the view using the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply()&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;ng-click&lt;/a&gt;などのリスナーディレクティブは、リスナーをDOMに登録します。DOMリスナーが起動すると、ディレクティブは関連付けられた式を実行し、&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply（）&lt;/a&gt;メソッドを使用してビューを更新します。</target>
        </trans-unit>
        <trans-unit id="cd36de4b8e171b9332630e621a9c668d36e80403" translate="yes" xml:space="preserve">
          <source>Listens on events of a given type. See &lt;a href=&quot;%24rootscope.scope#%24emit.html&quot;&gt;$emit&lt;/a&gt; for discussion of event life cycle.</source>
          <target state="translated">指定されたタイプのイベントをリッスンします。イベントのライフサイクルについては、&lt;a href=&quot;%24rootscope.scope#%24emit.html&quot;&gt;$ emit&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d5f227fbe66da636f154d7a55f6e58ac8bc7df94" translate="yes" xml:space="preserve">
          <source>Load the content of a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element into &lt;a href=&quot;../service/%24templatecache&quot;&gt;&lt;code&gt;$templateCache&lt;/code&gt;&lt;/a&gt;, so that the template can be used by &lt;a href=&quot;nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../../guide/directive&quot;&gt;directives&lt;/a&gt;. The type of the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element must be specified as &lt;code&gt;text/ng-template&lt;/code&gt;, and a cache name for the template must be assigned through the element's &lt;code&gt;id&lt;/code&gt;, which can then be used as a directive's &lt;code&gt;templateUrl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素のコンテンツを&lt;a href=&quot;../service/%24templatecache&quot;&gt; &lt;code&gt;$templateCache&lt;/code&gt; &lt;/a&gt;にロードして、テンプレートを&lt;a href=&quot;nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../../../guide/directive&quot;&gt;ディレクティブ&lt;/a&gt;で使用できるようにします。 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素のタイプは &lt;code&gt;text/ng-template&lt;/code&gt; として指定する必要があり、テンプレートのキャッシュ名は要素の &lt;code&gt;id&lt;/code&gt; を通じて割り当てる必要があります。これは、ディレクティブの &lt;code&gt;templateUrl&lt;/code&gt; として使用できます。</target>
        </trans-unit>
        <trans-unit id="d2682f5818fdf3a2c34a3d670292ba36031d8c26" translate="yes" xml:space="preserve">
          <source>Load the content of a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element into &lt;a href=&quot;service/%24templatecache&quot;&gt;&lt;code&gt;$templateCache&lt;/code&gt;&lt;/a&gt;, so that the template can be used by &lt;a href=&quot;directive/nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../guide/directive&quot;&gt;directives&lt;/a&gt;. The type of the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; element must be specified as &lt;code&gt;text/ng-template&lt;/code&gt;, and a cache name for the template must be assigned through the element's &lt;code&gt;id&lt;/code&gt;, which can then be used as a directive's &lt;code&gt;templateUrl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素のコンテンツを&lt;a href=&quot;service/%24templatecache&quot;&gt; &lt;code&gt;$templateCache&lt;/code&gt; &lt;/a&gt;にロードして、テンプレートを&lt;a href=&quot;directive/nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../../guide/directive&quot;&gt;ディレクティブ&lt;/a&gt;で使用できるようにします。 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 要素のタイプは &lt;code&gt;text/ng-template&lt;/code&gt; として指定する必要があり、テンプレートのキャッシュ名は要素の &lt;code&gt;id&lt;/code&gt; を通じて割り当てる必要があります。これは、ディレクティブの &lt;code&gt;templateUrl&lt;/code&gt; として使用できます。</target>
        </trans-unit>
        <trans-unit id="386bb84f82a8ccd818e6513db565d7414d459020" translate="yes" xml:space="preserve">
          <source>Loading &amp;hellip;</source>
          <target state="translated">読み込み中&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="92daf596f9c7373f5742e7adea3239594ef098ac" translate="yes" xml:space="preserve">
          <source>Local Storage and session: &lt;a href=&quot;https://github.com/gsklee/ngStorage&quot;&gt;ngStorage&lt;/a&gt;</source>
          <target state="translated">ローカルストレージとセッション：&lt;a href=&quot;https://github.com/gsklee/ngStorage&quot;&gt;ngStorage&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f197bc8d0c1a5832b3ddd1cbb680e16792aa794b" translate="yes" xml:space="preserve">
          <source>Local variables object, useful for overriding values in scope.</source>
          <target state="translated">スコープ内の値をオーバーライドするのに便利なローカル変数オブジェクト。</target>
        </trans-unit>
        <trans-unit id="9e2b5c22af01ee07caf3e1b6e0e50b119b72a276" translate="yes" xml:space="preserve">
          <source>Localizable pluralization is supported via the &lt;a href=&quot;../api/ng/directive/ngpluralize&quot;&gt;&lt;code&gt;ngPluralize&lt;/code&gt; directive&lt;/a&gt;. Additionally, you can use &lt;a href=&quot;i18n#messageformat-extensions.html&quot;&gt;MessageFormat extensions&lt;/a&gt; to &lt;code&gt;$interpolate&lt;/code&gt; for localizable pluralization and gender support in all interpolations via the &lt;code&gt;ngMessageFormat&lt;/code&gt; module.</source>
          <target state="translated">ローカライズ可能な複数化は、&lt;a href=&quot;../api/ng/directive/ngpluralize&quot;&gt; &lt;code&gt;ngPluralize&lt;/code&gt; ディレクティブ&lt;/a&gt;を介してサポートされます。さらに、 &lt;code&gt;ngMessageFormat&lt;/code&gt; モジュールを介して、すべての補間でローカライズ可能な複数化と性別サポートのために &lt;code&gt;$interpolate&lt;/code&gt; への&lt;a href=&quot;i18n#messageformat-extensions.html&quot;&gt;MessageFormat拡張&lt;/a&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="3c38c9e8280edd6b4b9e66ce981d790b329a5986" translate="yes" xml:space="preserve">
          <source>Logically the rendering of &lt;code&gt;{{greeting}}&lt;/code&gt; involves:</source>
          <target state="translated">論理的には、 &lt;code&gt;{{greeting}}&lt;/code&gt; のレンダリングには以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="88c1ecf02babeb5ad2e55e9263728fa80f7464a9" translate="yes" xml:space="preserve">
          <source>Looking at &lt;code&gt;index.html&lt;/code&gt;, the first &lt;code&gt;&amp;lt;my-customer&amp;gt;&lt;/code&gt; element binds the &lt;code&gt;info&lt;/code&gt; attribute to &lt;code&gt;naomi&lt;/code&gt;, which we have exposed on our controller's scope. The second binds &lt;code&gt;info&lt;/code&gt; to &lt;code&gt;igor&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; を見ると、最初の &lt;code&gt;&amp;lt;my-customer&amp;gt;&lt;/code&gt; 要素が &lt;code&gt;info&lt;/code&gt; 属性を &lt;code&gt;naomi&lt;/code&gt; にバインドしています。これは、コントローラーのスコープで公開しています。2番目は &lt;code&gt;info&lt;/code&gt; を &lt;code&gt;igor&lt;/code&gt; にバインドします。</target>
        </trans-unit>
        <trans-unit id="e62713f092f6126d14c257b1a2ea3e1321cd8698" translate="yes" xml:space="preserve">
          <source>Looking back at &lt;code&gt;myPane&lt;/code&gt;'s definition, notice the last argument in its &lt;code&gt;link&lt;/code&gt; function: &lt;code&gt;tabsCtrl&lt;/code&gt;. When a directive requires a controller, it receives that controller as the fourth argument of its &lt;code&gt;link&lt;/code&gt; function. Taking advantage of this, &lt;code&gt;myPane&lt;/code&gt; can call the &lt;code&gt;addPane&lt;/code&gt; function of &lt;code&gt;myTabs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;myPane&lt;/code&gt; の定義を振り返ると、 &lt;code&gt;link&lt;/code&gt; 関数の最後の引数 &lt;code&gt;tabsCtrl&lt;/code&gt; に注目してください。ディレクティブがコントローラーを必要とする場合、そのコントローラーは &lt;code&gt;link&lt;/code&gt; 関数の4番目の引数としてそのコントローラーを受け取ります。このことの利点を生かし、 &lt;code&gt;myPane&lt;/code&gt; を呼び出すことができ &lt;code&gt;addPane&lt;/code&gt; の機能 &lt;code&gt;myTabs&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="84817f41d25fc5b19c9eb66508717663ce503692" translate="yes" xml:space="preserve">
          <source>MVC components in angular:</source>
          <target state="translated">アングラーのMVCコンポーネント。</target>
        </trans-unit>
        <trans-unit id="c4c061d266032ace287629ddef3b630f9da95456" translate="yes" xml:space="preserve">
          <source>Mailing List</source>
          <target state="translated">メーリングリスト</target>
        </trans-unit>
        <trans-unit id="2aed1946399b485ebf0139306da8f10efbf28a7d" translate="yes" xml:space="preserve">
          <source>Maintains synchronization between itself and the browser's URL when the user</source>
          <target state="translated">ユーザーが</target>
        </trans-unit>
        <trans-unit id="f4e937da2bde1d6d0cfc0d02a86baa0ee73041b8" translate="yes" xml:space="preserve">
          <source>Make sure to trigger the &lt;code&gt;doneFunction&lt;/code&gt; once the animation is fully complete.</source>
          <target state="translated">アニメーションが完全に完了したら、必ず &lt;code&gt;doneFunction&lt;/code&gt; をトリガーしてください。</target>
        </trans-unit>
        <trans-unit id="85f50f3c3504cad9a5153e8c3e0188d355cdd4c4" translate="yes" xml:space="preserve">
          <source>Manage the life-cycle of other components (for example, to create service instances).</source>
          <target state="translated">他のコンポーネントのライフサイクルを管理する(例えば、サービスインスタンスを作成する)。</target>
        </trans-unit>
        <trans-unit id="1849bd470e0a02c13c2a2ddb02f3758c9affbd6a" translate="yes" xml:space="preserve">
          <source>Manipulate DOM &amp;mdash; Controllers should contain only business logic. Putting any presentation logic into Controllers significantly affects its testability. AngularJS has &lt;a href=&quot;databinding&quot;&gt;databinding&lt;/a&gt; for most cases and &lt;a href=&quot;directive&quot;&gt;directives&lt;/a&gt; to encapsulate manual DOM manipulation.</source>
          <target state="translated">DOMの操作&amp;mdash;コントローラーにはビジネスロジックのみを含める必要があります。プレゼンテーションロジックをコントローラーに配置すると、そのテスト容易性に大きく影響します。AngularJSには、ほとんどの場合の&lt;a href=&quot;databinding&quot;&gt;データバインディングと&lt;/a&gt;、手動DOM操作をカプセル化する&lt;a href=&quot;directive&quot;&gt;ディレクティブ&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="9af5b7cc102e62cfc978a4d85d9c90ff03b0df28" translate="yes" xml:space="preserve">
          <source>Manual Initialization</source>
          <target state="translated">手動での初期化</target>
        </trans-unit>
        <trans-unit id="90f5e60e65fca1294553bf2cd139697a3ef29d83" translate="yes" xml:space="preserve">
          <source>Map of service factory which need to be provided for the current scope. Defaults to &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;&lt;code&gt;ng&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在のスコープに提供する必要があるサービスファクトリのマップ。デフォルトは&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt; &lt;code&gt;ng&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="5269958ad384de42d0b63bacb9f5157d606dc742" translate="yes" xml:space="preserve">
          <source>Mapping information to be assigned to &lt;code&gt;$route.current&lt;/code&gt; on route match.</source>
          <target state="translated">ルートの一致時に &lt;code&gt;$route.current&lt;/code&gt; に割り当てられるマッピング情報。</target>
        </trans-unit>
        <trans-unit id="da3d8cef85e180466f01ff233815f53e0dd3ef41" translate="yes" xml:space="preserve">
          <source>Mapping information to be assigned to &lt;code&gt;$route.current&lt;/code&gt;. If called with a string, the value maps to &lt;code&gt;redirectTo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$route.current&lt;/code&gt; 割り当てられるマッピング情報。文字列で呼び出された場合、値は &lt;code&gt;redirectTo&lt;/code&gt; にマッピングされます。</target>
        </trans-unit>
        <trans-unit id="44a921d79f06891bfc2ef6533b9ad081d31ae1c1" translate="yes" xml:space="preserve">
          <source>Matching Directives</source>
          <target state="translated">マッチングディレクティブ</target>
        </trans-unit>
        <trans-unit id="3e5d7daf956c2a40411ad8f2caaffa9353d8e9cb" translate="yes" xml:space="preserve">
          <source>Matching model and option values</source>
          <target state="translated">モデルとオプション値のマッチング</target>
        </trans-unit>
        <trans-unit id="ce55e08fd61078003560d3df48ca614d3ef433a6" translate="yes" xml:space="preserve">
          <source>Matching route requests</source>
          <target state="translated">ルートリクエストのマッチング</target>
        </trans-unit>
        <trans-unit id="a5beb361a1706e9b51cb40edde5a3ab468f07e34" translate="yes" xml:space="preserve">
          <source>Message order</source>
          <target state="translated">メッセージの順序</target>
        </trans-unit>
        <trans-unit id="9344efa286fd5e9da95be089754f4d314f0c308d" translate="yes" xml:space="preserve">
          <source>MessageFormat extensions</source>
          <target state="translated">メッセージフォーマット拡張機能</target>
        </trans-unit>
        <trans-unit id="f1702b4686278becffc88baabe6f4b7a8355532c" translate="yes" xml:space="preserve">
          <source>Messages</source>
          <target state="translated">Messages</target>
        </trans-unit>
        <trans-unit id="218cc71b2cafc9fcbd7fceeec963d55a35fec45c" translate="yes" xml:space="preserve">
          <source>Messages immediately follow a selection keyword and are optionally preceded by whitespace. They are written in single curly braces (&lt;code&gt;{}&lt;/code&gt;). They may contain AngularJS interpolation syntax inside them.</source>
          <target state="translated">メッセージは選択キーワードの直後に続き、オプションで空白が前に付きます。それらは単一の中括弧（ &lt;code&gt;{}&lt;/code&gt; ）で書かれています。それらの中にAngularJS補間構文が含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="22617e3b4156662ce4d8bd4830be681f85178aee" translate="yes" xml:space="preserve">
          <source>Messages immediately follow a selection keyword and are optionally preceded by whitespace. They are written in single curly braces (&lt;code&gt;{}&lt;/code&gt;). They may contain AngularJS interpolation syntax inside them. In addition, the &lt;code&gt;#&lt;/code&gt; symbol is a placeholder for the actual numeric value of the expression.</source>
          <target state="translated">メッセージは選択キーワードの直後に続き、オプションで空白が前に付きます。それらは単一の中括弧（ &lt;code&gt;{}&lt;/code&gt; ）で書かれています。それらの中にAngularJS補間構文が含まれている場合があります。さらに、 &lt;code&gt;#&lt;/code&gt; 記号は、式の実際の数値のプレースホルダーです。</target>
        </trans-unit>
        <trans-unit id="4360339f6ba188dfc1f3a475e862ec2c0d68ad84" translate="yes" xml:space="preserve">
          <source>Method for serializing common AngularJS objects (scope, elements, etc..) into strings. It is useful for logging objects to the console when debugging.</source>
          <target state="translated">一般的なAngularJSオブジェクト(スコープ、エレメントなど)を文字列にシリアライズするメソッド。デバッグ時にオブジェクトをコンソールにロギングするのに便利です。</target>
        </trans-unit>
        <trans-unit id="43639e3b7d3b45a703fcba77c83b24edff6ec4cf" translate="yes" xml:space="preserve">
          <source>Method's `this`</source>
          <target state="translated">メソッドの `this` の</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="b1d702459399a2512fba5a402d4d5f26aee34693" translate="yes" xml:space="preserve">
          <source>Mobile</source>
          <target state="translated">Mobile</target>
        </trans-unit>
        <trans-unit id="d724e7ec1e548df829cecc5ca677f6410b0ee24d" translate="yes" xml:space="preserve">
          <source>Mock implementation of &lt;a href=&quot;../../ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; that rethrows or logs errors passed to it. See &lt;a href=&quot;../provider/%24exceptionhandlerprovider&quot;&gt;$exceptionHandlerProvider&lt;/a&gt; for configuration information.</source>
          <target state="translated">渡されたエラーを再スローまたはログに記録する&lt;a href=&quot;../../ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;モック実装。構成情報については、&lt;a href=&quot;../provider/%24exceptionhandlerprovider&quot;&gt;$ exceptionHandlerProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="95690efafa1aec8a5967e5ca97f434409e9cbdee" translate="yes" xml:space="preserve">
          <source>Mock implementation of &lt;a href=&quot;../../ng/service/%24log&quot;&gt;&lt;code&gt;$log&lt;/code&gt;&lt;/a&gt; that gathers all logged messages in arrays (one array per logging level). These arrays are exposed as &lt;code&gt;logs&lt;/code&gt; property of each of the level-specific log function, e.g. for level &lt;code&gt;error&lt;/code&gt; the array is exposed as &lt;code&gt;$log.error.logs&lt;/code&gt;.</source>
          <target state="translated">すべてのログメッセージを配列に収集する&lt;a href=&quot;../../ng/service/%24log&quot;&gt; &lt;code&gt;$log&lt;/code&gt; &lt;/a&gt;モック実装（ログレベルごとに1つの配列）。これらの配列は、レベル固有の各ログ関数の &lt;code&gt;logs&lt;/code&gt; プロパティとして公開されます。たとえば、レベル &lt;code&gt;error&lt;/code&gt; 、配列は &lt;code&gt;$log.error.logs&lt;/code&gt; として公開されます。</target>
        </trans-unit>
        <trans-unit id="c792a9824ded906f50da531e1c45870b67a1a1f1" translate="yes" xml:space="preserve">
          <source>Mock implementation of &lt;a href=&quot;../ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; that rethrows or logs errors passed to it. See &lt;a href=&quot;provider/%24exceptionhandlerprovider&quot;&gt;$exceptionHandlerProvider&lt;/a&gt; for configuration information.</source>
          <target state="translated">渡されたエラーを再スローまたはログに記録する&lt;a href=&quot;../ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;モック実装。構成情報については、&lt;a href=&quot;provider/%24exceptionhandlerprovider&quot;&gt;$ exceptionHandlerProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="68cd4a92c7e27b6bb0d8d5d52580a952d3a23598" translate="yes" xml:space="preserve">
          <source>Mock implementation of &lt;a href=&quot;../ng/service/%24log&quot;&gt;&lt;code&gt;$log&lt;/code&gt;&lt;/a&gt; that gathers all logged messages in arrays (one array per logging level). These arrays are exposed as &lt;code&gt;logs&lt;/code&gt; property of each of the level-specific log function, e.g. for level &lt;code&gt;error&lt;/code&gt; the array is exposed as &lt;code&gt;$log.error.logs&lt;/code&gt;.</source>
          <target state="translated">すべてのログメッセージを配列に収集する&lt;a href=&quot;../ng/service/%24log&quot;&gt; &lt;code&gt;$log&lt;/code&gt; &lt;/a&gt;モック実装（ログレベルごとに1つの配列）。これらの配列は、レベル固有の各ログ関数の &lt;code&gt;logs&lt;/code&gt; プロパティとして公開されます。たとえば、レベル &lt;code&gt;error&lt;/code&gt; 、配列は &lt;code&gt;$log.error.logs&lt;/code&gt; として公開されます。</target>
        </trans-unit>
        <trans-unit id="752de6efdd11fb76bababaaf2aeeed8daf63a62a" translate="yes" xml:space="preserve">
          <source>Mock implementation of &lt;a href=&quot;ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; that rethrows or logs errors passed to it. See &lt;a href=&quot;ngmock/provider/%24exceptionhandlerprovider&quot;&gt;$exceptionHandlerProvider&lt;/a&gt; for configuration information.</source>
          <target state="translated">渡されたエラーを再スローまたはログに記録する&lt;a href=&quot;ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;モック実装。構成情報については、&lt;a href=&quot;ngmock/provider/%24exceptionhandlerprovider&quot;&gt;$ exceptionHandlerProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6663abd0c82d9922ac001aab44db50268d035bb7" translate="yes" xml:space="preserve">
          <source>Mock implementation of &lt;a href=&quot;ng/service/%24log&quot;&gt;&lt;code&gt;$log&lt;/code&gt;&lt;/a&gt; that gathers all logged messages in arrays (one array per logging level). These arrays are exposed as &lt;code&gt;logs&lt;/code&gt; property of each of the level-specific log function, e.g. for level &lt;code&gt;error&lt;/code&gt; the array is exposed as &lt;code&gt;$log.error.logs&lt;/code&gt;.</source>
          <target state="translated">すべてのログメッセージを配列に収集する&lt;a href=&quot;ng/service/%24log&quot;&gt; &lt;code&gt;$log&lt;/code&gt; &lt;/a&gt;モック実装（ログレベルごとに1つの配列）。これらの配列は、レベル固有の各ログ関数の &lt;code&gt;logs&lt;/code&gt; プロパティとして公開されます。たとえば、レベル &lt;code&gt;error&lt;/code&gt; 、配列は &lt;code&gt;$log.error.logs&lt;/code&gt; として公開されます。</target>
        </trans-unit>
        <trans-unit id="9a4f99f800b8c2a3c8606af42b64ef2f40a52496" translate="yes" xml:space="preserve">
          <source>Mock implementation of the $interval service.</source>
          <target state="translated">インターバルサービスのモック実装。</target>
        </trans-unit>
        <trans-unit id="17e556de84f8d6be56cb0a460b4ed4cfe2347048" translate="yes" xml:space="preserve">
          <source>Mock implementation of the &lt;a href=&quot;../../ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt;&lt;/a&gt; service. Exposes two additional methods for testing animations.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; &lt;/a&gt;サービスのモック実装。アニメーションをテストするための2つの追加メソッドを公開します。</target>
        </trans-unit>
        <trans-unit id="a5cb86aae12fa34c71428443e8ea53d839ee3299" translate="yes" xml:space="preserve">
          <source>Mock implementation of the &lt;a href=&quot;../ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt;&lt;/a&gt; service. Exposes two additional methods for testing animations.</source>
          <target state="translated">&lt;a href=&quot;../ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; &lt;/a&gt;サービスのモック実装。アニメーションをテストするための2つの追加メソッドを公開します。</target>
        </trans-unit>
        <trans-unit id="50e36573f2e41d3b17e543c2e8cd625f0cb46dd2" translate="yes" xml:space="preserve">
          <source>Mock implementation of the &lt;a href=&quot;ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt;&lt;/a&gt; service. Exposes two additional methods for testing animations.</source>
          <target state="translated">&lt;a href=&quot;ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; &lt;/a&gt;サービスのモック実装。アニメーションをテストするための2つの追加メソッドを公開します。</target>
        </trans-unit>
        <trans-unit id="2283a4fa911cb4d414dca0de238334e1c9113cf1" translate="yes" xml:space="preserve">
          <source>Mock of the Date type which has its timezone specified via constructor arg.</source>
          <target state="translated">コンストラクタ arg でタイムゾーンを指定した Date 型のモック。</target>
        </trans-unit>
        <trans-unit id="2103a63a9856b3815fb037adeec81b1f3b88e8c7" translate="yes" xml:space="preserve">
          <source>Mode of operation, defaults to &lt;code&gt;rethrow&lt;/code&gt;.</source>
          <target state="translated">操作のモード。デフォルトは &lt;code&gt;rethrow&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="68c2cc7f0ceaa3e499ecb4db331feb4debbbcc23" translate="yes" xml:space="preserve">
          <source>Model</source>
          <target state="translated">Model</target>
        </trans-unit>
        <trans-unit id="d10c1d6ff062accb0017a7a34ed190f79cc9dc67" translate="yes" xml:space="preserve">
          <source>Model &amp;mdash; Models are the properties of a scope; scopes are attached to the DOM where scope properties are accessed through bindings.</source>
          <target state="translated">モデル&amp;mdash;モデルはスコープのプロパティです。スコープは、バインディングを通じてスコーププロパティにアクセスするDOMにアタッチされます。</target>
        </trans-unit>
        <trans-unit id="a0babb0f360230e95d42d97a77bd9a2ca869ead1" translate="yes" xml:space="preserve">
          <source>Model updates and validation</source>
          <target state="translated">モデルの更新と検証</target>
        </trans-unit>
        <trans-unit id="11d8a9f1a171b04d6657a278d94d71665b02f7f3" translate="yes" xml:space="preserve">
          <source>ModelOptions</source>
          <target state="translated">ModelOptions</target>
        </trans-unit>
        <trans-unit id="45054a7aa80d7c8287ad5c465dc0e7de6ba32a41" translate="yes" xml:space="preserve">
          <source>Modern browser will rewrite hashbang URLs to regular URLs.</source>
          <target state="translated">最近のブラウザはハッシュバングのURLを通常のURLに書き換えます。</target>
        </trans-unit>
        <trans-unit id="820d0a285c630d7723527339445562c6186a70c3" translate="yes" xml:space="preserve">
          <source>Modifies the default behavior of the html a tag so that the default action is prevented when the href attribute is empty.</source>
          <target state="translated">href属性が空の場合にデフォルトの動作が行われないように、html aタグのデフォルトの動作を変更します。</target>
        </trans-unit>
        <trans-unit id="60affe2a59dff1baf449afaa8e69c15e4a1a2bd0" translate="yes" xml:space="preserve">
          <source>Modifying built-in validators</source>
          <target state="translated">組み込みバリデータの変更</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="b4e47c4a8861a9aac47d0d5b25ff49b2077eaa5b" translate="yes" xml:space="preserve">
          <source>Module Components</source>
          <target state="translated">モジュールコンポーネント</target>
        </trans-unit>
        <trans-unit id="d81b6c3fe7d7f3ded3174d2cd156b032d228112b" translate="yes" xml:space="preserve">
          <source>Module Loading</source>
          <target state="translated">モジュールの読み込み</target>
        </trans-unit>
        <trans-unit id="b3c0d8ccd032afe728bc7677d8f1b82146252c2e" translate="yes" xml:space="preserve">
          <source>Module Methods</source>
          <target state="translated">モジュールメソッド</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="f5676031d7eb7334f1e212a85e0629bf21c4a263" translate="yes" xml:space="preserve">
          <source>Modules are a way of managing $injector configuration, and have nothing to do with loading of scripts into a VM. There are existing projects which deal with script loading, which may be used with AngularJS. Because modules do nothing at load time they can be loaded into the VM in any order and thus script loaders can take advantage of this property and parallelize the loading process.</source>
          <target state="translated">モジュールは$injectorの設定を管理する方法であり、VMへのスクリプトのロードとは何の関係もありません。スクリプトのロードを扱う既存のプロジェクトがあり、AngularJSと一緒に使うことができます。モジュールはロード時には何もしないので、任意の順番でVMにロードすることができ、スクリプトローダーはこの特性を利用してロードプロセスを並列化することができます。</target>
        </trans-unit>
        <trans-unit id="ddf8a006e80c713702e5a7c272966dd2af4a2f36" translate="yes" xml:space="preserve">
          <source>Modules can list other modules as their dependencies. Depending on a module implies that the required module will be loaded before the requiring module is loaded.</source>
          <target state="translated">モジュールは、他のモジュールを依存関係としてリストアップすることができます。モジュールに依存するということは、必要なモジュールがロードされる前に、 必要なモジュールがロードされることを意味します。</target>
        </trans-unit>
        <trans-unit id="c5c5ac536e9458ce6b1c893d8a9eed0ef866164a" translate="yes" xml:space="preserve">
          <source>Modules cannot be unloaded.</source>
          <target state="translated">モジュールのアンロードはできません。</target>
        </trans-unit>
        <trans-unit id="d3eef75b2abb3353ef96fa4c958b29a3b973ad79" translate="yes" xml:space="preserve">
          <source>More Advanced Uses</source>
          <target state="translated">より高度な用途</target>
        </trans-unit>
        <trans-unit id="418d11009885a828d7747f211903e923c55650a8" translate="yes" xml:space="preserve">
          <source>More Topics</source>
          <target state="translated">その他のトピック</target>
        </trans-unit>
        <trans-unit id="9e1aceda0913803b7af1cbac40b818d7b4e0a493" translate="yes" xml:space="preserve">
          <source>More about animations</source>
          <target state="translated">アニメーションの詳細</target>
        </trans-unit>
        <trans-unit id="ff1c8d0ffd1a8365adbfecdf5260da4ce1225fe0" translate="yes" xml:space="preserve">
          <source>More information about using &lt;code&gt;ngMessage&lt;/code&gt; can be found in the &lt;a href=&quot;../../ngmessages&quot;&gt;&lt;code&gt;ngMessages&lt;/code&gt; module documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ngMessage&lt;/code&gt; の使用に関する詳細は、&lt;a href=&quot;../../ngmessages&quot;&gt; &lt;code&gt;ngMessages&lt;/code&gt; モジュールのドキュメントに記載&lt;/a&gt;されています。</target>
        </trans-unit>
        <trans-unit id="6b67e8753649b7d6d8714798e1353c9a36bc83e4" translate="yes" xml:space="preserve">
          <source>More information about using &lt;code&gt;ngMessageDefault&lt;/code&gt; can be found in the &lt;a href=&quot;../../ngmessages&quot;&gt;&lt;code&gt;ngMessages&lt;/code&gt; module documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ngMessageDefault&lt;/code&gt; の使用の詳細については、&lt;a href=&quot;../../ngmessages&quot;&gt; &lt;code&gt;ngMessages&lt;/code&gt; モジュールのドキュメントを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="86538f30d68e13efb3ce4ea2e7bb61bbd3bdb2ef" translate="yes" xml:space="preserve">
          <source>More specifically, it follows these steps to determine the relative order of items:</source>
          <target state="translated">より具体的には、以下の手順に従って、項目の相対的な順序を決定する。</target>
        </trans-unit>
        <trans-unit id="7d5c68a394c71124c6fcf54230d4eeb10dd1d33a" translate="yes" xml:space="preserve">
          <source>Moreover, additional dependencies are made available to Controllers:</source>
          <target state="translated">さらに、コントローラは追加の依存関係を利用できるようになっています。</target>
        </trans-unit>
        <trans-unit id="712827c0d97b4d3b4a04a5896cfe1915383ddc14" translate="yes" xml:space="preserve">
          <source>Most applications have a main method that instantiates and wires together the different parts of the application.</source>
          <target state="translated">ほとんどのアプリケーションには、アプリケーションのさまざまな部分をインスタンス化して配線するメインメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="51bcbe4ed0c2178dc07e3908a9fd0bee0ee90626" translate="yes" xml:space="preserve">
          <source>Most modern search engines are able to crawl AJAX applications with dynamic content, provided all included resources are available to the crawler bots.</source>
          <target state="translated">ほとんどの最新の検索エンジンは、すべての含まれているリソースがクローラーボットに利用可能であれば、動的なコンテンツを持つAJAXアプリケーションをクロールすることができます。</target>
        </trans-unit>
        <trans-unit id="747ba7435637638bbd15e8ae21703dcf856ff388" translate="yes" xml:space="preserve">
          <source>Most of what ngAria does is only visible &quot;under the hood&quot;. To see the module in action, once you've added it as a dependency, you can test a few things:</source>
          <target state="translated">ngAriaが行うことのほとんどは、&quot;フードの下 &quot;でしか見ることができません。モジュールの動作を見るには、一度依存関係として追加した後、いくつかのことをテストすることができます。</target>
        </trans-unit>
        <trans-unit id="19f501e7075bf76219f10ebfc5ad08e05b72506c" translate="yes" xml:space="preserve">
          <source>Most other templating systems consume a static string template and combine it with data, resulting in a new string. The resulting text is then &lt;code&gt;innerHTML&lt;/code&gt;ed into an element.</source>
          <target state="translated">他のほとんどのテンプレートシステムは、静的な文字列テンプレートを使用してデータと結合し、新しい文字列を生成します。結果のテキストは、 &lt;code&gt;innerHTML&lt;/code&gt; で要素に変換されます。</target>
        </trans-unit>
        <trans-unit id="086508416bb179789c4bccdcedba3ca8939c6c3f" translate="yes" xml:space="preserve">
          <source>Most templating systems bind data in only one direction: they merge template and model components together into a view. After the merge occurs, changes to the model or related sections of the view are NOT automatically reflected in the view. Worse, any changes that the user makes to the view are not reflected in the model. This means that the developer has to write code that constantly syncs the view with the model and the model with the view.</source>
          <target state="translated">ほとんどのテンプレートシステムは、1つの方向にのみデータをバインドします:テンプレートとモデルのコンポーネントをビューにマージします。マージが発生した後、モデルやビューの関連セクションへの変更は自動的にビューに反映されません。さらに悪いことに、ユーザーがビューに加えた変更はモデルに反映されません。これは、開発者がビューとモデル、モデルとビューを常に同期させるコードを書かなければならないことを意味します。</target>
        </trans-unit>
        <trans-unit id="d52bae3c10aff36233610ff3bdec1bf84f987e77" translate="yes" xml:space="preserve">
          <source>Much of ngAria's heavy lifting happens in the &lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; directive. For elements using ngModel, special attention is paid by ngAria if that element also has a role or type of &lt;code&gt;checkbox&lt;/code&gt;, &lt;code&gt;radio&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt; or &lt;code&gt;textbox&lt;/code&gt;.</source>
          <target state="translated">ngAriaの重労働の多くは、&lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt;ディレクティブで発生します。ngModelを使用する要素の場合、その要素にも &lt;code&gt;checkbox&lt;/code&gt; 、 &lt;code&gt;radio&lt;/code&gt; 、 &lt;code&gt;range&lt;/code&gt; または &lt;code&gt;textbox&lt;/code&gt; ボックスの役割またはタイプがある場合、ngAriaは特別な注意を払います。</target>
        </trans-unit>
        <trans-unit id="41d3f0ba4eb4a4f6a8f2357e3f45a9724879b4b6" translate="yes" xml:space="preserve">
          <source>Much simpler!</source>
          <target state="translated">もっとシンプルに!</target>
        </trans-unit>
        <trans-unit id="8c836dc52529f23f775aa7226aae8e07d35fcd7a" translate="yes" xml:space="preserve">
          <source>Multi-slot transclusion</source>
          <target state="translated">マルチスロットトランスクルージョン</target>
        </trans-unit>
        <trans-unit id="65cb2723f95ca2511451a3da1b3266635717e52a" translate="yes" xml:space="preserve">
          <source>Multiple directives trying to manage the suspended status of a scope can confuse each other:</source>
          <target state="translated">スコープのサスペンドされた状態を管理しようとする複数のディレクティブは、お互いを混乱させる可能性があります。</target>
        </trans-unit>
        <trans-unit id="43ee7b873340c29badb35669536547e420b30242" translate="yes" xml:space="preserve">
          <source>Must be set to &lt;code&gt;'text/ng-template'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'text/ng-template'&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="a0509b7780628bd9d9abc7eb8a2163477341053a" translate="yes" xml:space="preserve">
          <source>NO</source>
          <target state="translated">NO</target>
        </trans-unit>
        <trans-unit id="6482d00c26b4ecb8dd78f5db3674319bacb19283" translate="yes" xml:space="preserve">
          <source>NOTE: This method is supported only in HTML5 mode and only in browsers supporting the HTML5 History API (i.e. methods &lt;code&gt;pushState&lt;/code&gt; and &lt;code&gt;replaceState&lt;/code&gt;). If you need to support older browsers (like IE9 or Android &amp;lt; 4.0), don't use this method.</source>
          <target state="translated">注：このメソッドは、HTML5モードで、HTML5 History APIをサポートするブラウザーでのみサポートされます（つまり、 &lt;code&gt;pushState&lt;/code&gt; および &lt;code&gt;replaceState&lt;/code&gt; メソッド）。古いブラウザ（IE9やAndroid &amp;lt;4.0など）をサポートする必要がある場合は、この方法を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="9407fb27f323515c53fff87ba47269667f06a0ad" translate="yes" xml:space="preserve">
          <source>Name of a constructor function registered with the current &lt;a href=&quot;../provider/%24controllerprovider&quot;&gt;$controllerProvider&lt;/a&gt; or an &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; that on the current scope evaluates to a constructor function.</source>
          <target state="translated">現在の&lt;a href=&quot;../provider/%24controllerprovider&quot;&gt;$ controllerProviderに&lt;/a&gt;登録されているコンストラクター関数の名前、または現在のスコープでコンストラクター関数に評価される&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="06124546cb53397fd0c1fe917a2d06c9730752d5" translate="yes" xml:space="preserve">
          <source>Name of the component in camelCase (i.e. &lt;code&gt;myComp&lt;/code&gt; which will match &lt;code&gt;&amp;lt;my-comp&amp;gt;&lt;/code&gt;), or an object map of components where the keys are the names and the values are the component definition objects.</source>
          <target state="translated">camelCase内のコンポーネントの名前（つまり &lt;code&gt;&amp;lt;my-comp&amp;gt;&lt;/code&gt; 一致する &lt;code&gt;myComp&lt;/code&gt; ）、またはキーが名前で値がコンポーネント定義オブジェクトであるコンポーネントのオブジェクトマップ。</target>
        </trans-unit>
        <trans-unit id="072d5c784d720162e01f22fc1db2129c7f844161" translate="yes" xml:space="preserve">
          <source>Name of the directive in camel-case (i.e. &lt;code&gt;ngBind&lt;/code&gt; which will match as &lt;code&gt;ng-bind&lt;/code&gt;), or an object map of directives where the keys are the names and the values are the factories.</source>
          <target state="translated">キャメルケースのディレクティブの名前（つまり、 &lt;code&gt;ng-bind&lt;/code&gt; として一致する &lt;code&gt;ngBind&lt;/code&gt; ）、またはキーが名前で値がファクトリであるディレクティブのオブジェクトマップ。</target>
        </trans-unit>
        <trans-unit id="e6a914b6fb9551d259b79ae1dbd0cd9ae591131f" translate="yes" xml:space="preserve">
          <source>Name of the filter function to retrieve</source>
          <target state="translated">取得するフィルタ関数の名前</target>
        </trans-unit>
        <trans-unit id="48fe49bedf694afeeba33df340c5f5206f900829" translate="yes" xml:space="preserve">
          <source>Name of the filter function, or an object map of filters where the keys are the filter names and the values are the filter factories.</source>
          <target state="translated">フィルタ関数の名前、またはフィルタのオブジェクトマップで、キーはフィルタ名、値はフィルタ工場です。</target>
        </trans-unit>
        <trans-unit id="548763f0d3866204ba6e7b35db5d3f96ad31cf16" translate="yes" xml:space="preserve">
          <source>Name of the form. If specified, the form controller will be published into related scope, under this name.</source>
          <target state="translated">フォームの名前。指定された場合、フォームコントローラはこの名前で関連スコープに公開されます。</target>
        </trans-unit>
        <trans-unit id="9e53ab7e7738ab49a15d16836113abe4d510b286" translate="yes" xml:space="preserve">
          <source>Name of the form. If specified, the form controller will be published into the related scope, under this name.</source>
          <target state="translated">フォームの名前。指定された場合、フォームコントローラはこの名前で関連スコープに公開されます。</target>
        </trans-unit>
        <trans-unit id="2b0878caaba3e3087d38d9fa863cec474456870b" translate="yes" xml:space="preserve">
          <source>Name of the module.</source>
          <target state="translated">モジュールの名前。</target>
        </trans-unit>
        <trans-unit id="18fd8b70f87ab6b31b561c63ec64d92c5698eb18" translate="yes" xml:space="preserve">
          <source>Name of the service to query.</source>
          <target state="translated">クエリするサービスの名前。</target>
        </trans-unit>
        <trans-unit id="82cb2408f4510676ea3921c7dc32b0ed22111b44" translate="yes" xml:space="preserve">
          <source>Name of the validator. The &lt;code&gt;validationErrorKey&lt;/code&gt; will be assigned to either &lt;code&gt;$error[validationErrorKey]&lt;/code&gt; or &lt;code&gt;$pending[validationErrorKey]&lt;/code&gt; (for unfulfilled &lt;code&gt;$asyncValidators&lt;/code&gt;), so that it is available for data-binding. The &lt;code&gt;validationErrorKey&lt;/code&gt; should be in camelCase and will get converted into dash-case for class name. Example: &lt;code&gt;myError&lt;/code&gt; will result in &lt;code&gt;ng-valid-my-error&lt;/code&gt; and &lt;code&gt;ng-invalid-my-error&lt;/code&gt; classes and can be bound to as &lt;code&gt;{{ someForm.$error.myError }}&lt;/code&gt;.</source>
          <target state="translated">バリデーターの名前。 &lt;code&gt;validationErrorKey&lt;/code&gt; のいずれかに割り当てられる &lt;code&gt;$error[validationErrorKey]&lt;/code&gt; または &lt;code&gt;$pending[validationErrorKey]&lt;/code&gt; （満たされていないため &lt;code&gt;$asyncValidators&lt;/code&gt; ）ので、データバインディングのために利用可能であること。 &lt;code&gt;validationErrorKey&lt;/code&gt; はキャメルケースであるべきとクラス名のダッシュケースに変換されます。例： &lt;code&gt;myError&lt;/code&gt; は &lt;code&gt;ng-valid-my-error&lt;/code&gt; および &lt;code&gt;ng-invalid-my-error&lt;/code&gt; クラスを &lt;code&gt;{{ someForm.$error.myError }}&lt;/code&gt; 、{{someForm。$ error.myError}}としてバインドできます。</target>
        </trans-unit>
        <trans-unit id="85289b1ba972a7f24ee7623acf7573ae60b50a4a" translate="yes" xml:space="preserve">
          <source>Name of the validator. The &lt;code&gt;validationErrorKey&lt;/code&gt; will be assigned to either &lt;code&gt;$error[validationErrorKey]&lt;/code&gt; or &lt;code&gt;$pending[validationErrorKey]&lt;/code&gt; (for unfulfilled &lt;code&gt;$asyncValidators&lt;/code&gt;), so that it is available for data-binding. The &lt;code&gt;validationErrorKey&lt;/code&gt; should be in camelCase and will get converted into dash-case for class name. Example: &lt;code&gt;myError&lt;/code&gt; will result in &lt;code&gt;ng-valid-my-error&lt;/code&gt; and &lt;code&gt;ng-invalid-my-error&lt;/code&gt; classes and can be bound to as &lt;code&gt;{{ someForm.someControl.$error.myError }}&lt;/code&gt;.</source>
          <target state="translated">バリデーターの名前。 &lt;code&gt;validationErrorKey&lt;/code&gt; のいずれかに割り当てられる &lt;code&gt;$error[validationErrorKey]&lt;/code&gt; または &lt;code&gt;$pending[validationErrorKey]&lt;/code&gt; （満たされていないため &lt;code&gt;$asyncValidators&lt;/code&gt; ）ので、データバインディングのために利用可能であること。 &lt;code&gt;validationErrorKey&lt;/code&gt; はキャメルケースであるべきとクラス名のダッシュケースに変換されます。例： &lt;code&gt;myError&lt;/code&gt; は &lt;code&gt;ng-valid-my-error&lt;/code&gt; および &lt;code&gt;ng-invalid-my-error&lt;/code&gt; クラスを &lt;code&gt;{{ someForm.someControl.$error.myError }}&lt;/code&gt; 、{{someForm.someControl。$ error.myError}}としてバインドできます。</target>
        </trans-unit>
        <trans-unit id="c6dadcd7b87a8d68370b138a9b117a7ab56bec1f" translate="yes" xml:space="preserve">
          <source>Name or id of a cache to access.</source>
          <target state="translated">アクセスするキャッシュの名前または ID。</target>
        </trans-unit>
        <trans-unit id="1cc839cd419511980445e1dd8371a817f1b64734" translate="yes" xml:space="preserve">
          <source>Name or id of the newly created cache.</source>
          <target state="translated">新しく作成されたキャッシュの名前または ID。</target>
        </trans-unit>
        <trans-unit id="0de929bec5077041e37d818b7a7097719fecd549" translate="yes" xml:space="preserve">
          <source>Name to normalize</source>
          <target state="translated">正規化する名前</target>
        </trans-unit>
        <trans-unit id="07487ab347f8a5946bbf4a7ce75a38afca586f21" translate="yes" xml:space="preserve">
          <source>Namespace from 'angular-mocks.js' which contains testing related code.</source>
          <target state="translated">テスト関連のコードを含む'angular-mocks.js'の名前空間。</target>
        </trans-unit>
        <trans-unit id="f06563daf6842a8e082fd4615e320fc869bb69d9" translate="yes" xml:space="preserve">
          <source>Nesting</source>
          <target state="translated">Nesting</target>
        </trans-unit>
        <trans-unit id="309c7dfccaca7701bd78f84e8b381d4d0275d9db" translate="yes" xml:space="preserve">
          <source>New URL</source>
          <target state="translated">新しいURL</target>
        </trans-unit>
        <trans-unit id="a014f3cd7850f6e9c71c46467e552b11d3de79a6" translate="yes" xml:space="preserve">
          <source>New URL without base prefix (e.g. &lt;code&gt;/path?a=b#hash&lt;/code&gt;)</source>
          <target state="translated">ベースプレフィックスのない新しいURL（例 &lt;code&gt;/path?a=b#hash&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="6165acb81f2917de772cffb70b019703cffc138d" translate="yes" xml:space="preserve">
          <source>New hash fragment</source>
          <target state="translated">新しいハッシュフラグメント</target>
        </trans-unit>
        <trans-unit id="5a73ca3fba6bb247c517d68e0cd4de0f73708ffb" translate="yes" xml:space="preserve">
          <source>New history state object</source>
          <target state="translated">新しい歴史状態のオブジェクト</target>
        </trans-unit>
        <trans-unit id="1523c8acdb2ee4d7786ae768261d0c785a7a6dd4" translate="yes" xml:space="preserve">
          <source>New path</source>
          <target state="translated">新しいパス</target>
        </trans-unit>
        <trans-unit id="20f8323c20517bd9bedeb523464666a743f37eca" translate="yes" xml:space="preserve">
          <source>New regexp to whitelist urls with.</source>
          <target state="translated">新しい正規表現を使用して、URLをホワイトリスト化するようにしました。</target>
        </trans-unit>
        <trans-unit id="dad34ec1ee8bacd2e9041cd0903b5c9069ff92f6" translate="yes" xml:space="preserve">
          <source>New search params - string or hash object.</source>
          <target state="translated">新しい検索パラメータ-文字列またはハッシュオブジェクト。</target>
        </trans-unit>
        <trans-unit id="b804c31a8623f2816dbf7f69ecf28929e801a795" translate="yes" xml:space="preserve">
          <source>Newly created cache object with the following set of methods:</source>
          <target state="translated">以下のメソッドのセットを持つ新規に作成されたキャッシュオブジェクト。</target>
        </trans-unit>
        <trans-unit id="329a1c91ff3f72a700f6b29e306ae7d1fe09310b" translate="yes" xml:space="preserve">
          <source>Newly created scope.</source>
          <target state="translated">新たに作成されたスコープ。</target>
        </trans-unit>
        <trans-unit id="61456090d5fe7bf739399fed88265d12f9613af2" translate="yes" xml:space="preserve">
          <source>Next, we want to add buttons to this dialog box, and allow someone using the directive to bind their own behavior to it.</source>
          <target state="translated">次に、このダイアログボックスにボタンを追加して、ディレクティブを使っている人が自分の動作をこのダイアログボックスにバインドできるようにしたいと思います。</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="c4d55e8a99a370ad4de49aff15c4c44511823de9" translate="yes" xml:space="preserve">
          <source>No (restricted to elements only)</source>
          <target state="translated">なし(要素のみに限定</target>
        </trans-unit>
        <trans-unit id="109595eb5dc1869fbf21a971f7aa0f381c49f943" translate="yes" xml:space="preserve">
          <source>No (scope is always isolate)</source>
          <target state="translated">いいえ (スコープは常に分離されています)</target>
        </trans-unit>
        <trans-unit id="2f486ce8e2e4c561b4a09d4b910696530061716a" translate="yes" xml:space="preserve">
          <source>No (use bindings instead)</source>
          <target state="translated">いいえ(代わりにバインディングを使用してください</target>
        </trans-unit>
        <trans-unit id="680a8d06076faf3861dc12dd6c01bc3981abc532" translate="yes" xml:space="preserve">
          <source>No Control Flow Statements</source>
          <target state="translated">制御フロー文なし</target>
        </trans-unit>
        <trans-unit id="62ba91f2c31ef5c4a122749bdddf7004b57597ab" translate="yes" xml:space="preserve">
          <source>No conversion; the object itself is used.</source>
          <target state="translated">変換はせず、オブジェクト自体を使用します。</target>
        </trans-unit>
        <trans-unit id="b477c2fb0db2220aabe25a86981bcf26c5b788ac" translate="yes" xml:space="preserve">
          <source>No declaration means that AngularJS will assume that you can do inline styles, but it will do a runtime check for unsafe-eval. E.g. &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. This is backwardly compatible with previous versions of AngularJS.</source>
          <target state="translated">宣言がなければ、AngularJSはインラインスタイルを実行できると想定しますが、unsafe-evalのランタイムチェックを実行します。例： &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 。これは、AngularJSの以前のバージョンとの下位互換性があります。</target>
        </trans-unit>
        <trans-unit id="6eb8bd5e680e864c50300934b57de696d6282a04" translate="yes" xml:space="preserve">
          <source>No function declarations or RegExp creation with literal notation</source>
          <target state="translated">リテラル表記での関数宣言やRegExpの作成ができない</target>
        </trans-unit>
        <trans-unit id="3ddeaa27a6c6629f743c53a762ac439d7628c772" translate="yes" xml:space="preserve">
          <source>Non-immediate (debounced) model updates</source>
          <target state="translated">非即効性のある(デバウンスされた)モデルの更新</target>
        </trans-unit>
        <trans-unit id="b8c54e5e1e867a54e9d75697c450f4be835f910e" translate="yes" xml:space="preserve">
          <source>Normalization</source>
          <target state="translated">Normalization</target>
        </trans-unit>
        <trans-unit id="0538f85d0c3c3f8fa12699be15d0d496f65654b6" translate="yes" xml:space="preserve">
          <source>Normalized element attribute name of the property to modify. The name is reverse-translated using the &lt;a href=&quot;%24compile.directive.attributes#%24attr.html&quot;&gt;$attr&lt;/a&gt; property to the original name.</source>
          <target state="translated">変更するプロパティの正規化された要素属性名。名前は、&lt;a href=&quot;%24compile.directive.attributes#%24attr.html&quot;&gt;$ attr&lt;/a&gt;プロパティを使用して元の名前に逆変換されます。</target>
        </trans-unit>
        <trans-unit id="42edd323f35213654eaf5568a5b6ad2beea08650" translate="yes" xml:space="preserve">
          <source>Normalized key. (ie ngAttribute) .</source>
          <target state="translated">正規化されたキー。(すなわち ngAttribute).</target>
        </trans-unit>
        <trans-unit id="ed68fc07c0bcd36453eb89a7b1304551a073ed7f" translate="yes" xml:space="preserve">
          <source>Note also that component directives, which are created with the &lt;a href=&quot;../api/ng/type/angular.module#component.html&quot;&gt;.component()&lt;/a&gt; helper always create an isolate scope.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module#component.html&quot;&gt;.component（）&lt;/a&gt;ヘルパーで作成されたコンポーネントディレクティブは常に分離スコープを作成することにも注意してください。</target>
        </trans-unit>
        <trans-unit id="8aa993a00ba6dab2bd4ba7c5837f5d462e2f62de" translate="yes" xml:space="preserve">
          <source>Note however that the &lt;code&gt;$animate.enabled()&lt;/code&gt; state for individual elements does not overwrite disabling rules that have been set in the &lt;a href=&quot;../api/ng/provider/%24animateprovider#classNameFilter.html&quot;&gt;classNameFilter&lt;/a&gt;.</source>
          <target state="translated">ただし、個々の要素の &lt;code&gt;$animate.enabled()&lt;/code&gt; 状態は、&lt;a href=&quot;../api/ng/provider/%24animateprovider#classNameFilter.html&quot;&gt;classNameFilterで&lt;/a&gt;設定された無効化ルールを上書きしないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="5ee9f05a205194a145267c81de693fc4c5f07a17" translate="yes" xml:space="preserve">
          <source>Note in the example above how we can pass in &lt;code&gt;$event&lt;/code&gt; to &lt;code&gt;clickMe&lt;/code&gt;, but how it does not show up in &lt;code&gt;{{$event}}&lt;/code&gt;. This is because &lt;code&gt;$event&lt;/code&gt; is outside the scope of that binding.</source>
          <target state="translated">上記の例では、 &lt;code&gt;$event&lt;/code&gt; を &lt;code&gt;clickMe&lt;/code&gt; に渡す方法に注意してください。ただし、 &lt;code&gt;{{$event}}&lt;/code&gt; は表示されません。これは、 &lt;code&gt;$event&lt;/code&gt; がそのバインディングのスコープ外にあるためです。</target>
        </trans-unit>
        <trans-unit id="cb458ac4c395d1b568721519300e24a944cc46d1" translate="yes" xml:space="preserve">
          <source>Note that &quot;=1&quot; takes precedence over &quot;one&quot;.</source>
          <target state="translated">1」よりも「=1」が優先されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="434bc4aa7a04baed5fd5937b7268a8d770b70508" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;directive#normalization.html&quot;&gt;attribute name normalization&lt;/a&gt; does not apply here, so &lt;code&gt;'internalLink'&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; match &lt;code&gt;'internal-link'&lt;/code&gt;.</source>
          <target state="translated">注ことを&lt;a href=&quot;directive#normalization.html&quot;&gt;属性名の正規化は、&lt;/a&gt;ここでは適用されませんので、 &lt;code&gt;'internalLink'&lt;/code&gt; う&lt;strong&gt;ではない&lt;/strong&gt;一致 &lt;code&gt;'internal-link'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a1a58c3fbcaa18d57812a2d20a3557e11472cb2" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;nganimate/directive/nganimateswap&quot;&gt;&lt;code&gt;ngAnimateSwap&lt;/code&gt;&lt;/a&gt; is a &lt;em&gt;structural directive&lt;/em&gt;, which means it creates a new instance of the element (including any other/child directives it may have) and links it to a new scope every time &lt;em&gt;swap&lt;/em&gt; happens. In some cases this might not be desirable (e.g. for performance reasons, or when you wish to retain internal state on the original element instance).</source>
          <target state="translated">&lt;a href=&quot;nganimate/directive/nganimateswap&quot;&gt; &lt;code&gt;ngAnimateSwap&lt;/code&gt; &lt;/a&gt;は&lt;em&gt;構造ディレクティブ&lt;/em&gt;であることに注意してください。つまり、要素の新しいインスタンス（他の/​​子ディレクティブを含む）を作成し、&lt;em&gt;スワップ&lt;/em&gt;が発生するたびに新しいスコープにリンクします。場合によっては、これは望ましくないことがあります（パフォーマンス上の理由から、または元の要素インスタンスの内部状態を保持したい場合など）。</target>
        </trans-unit>
        <trans-unit id="a0b460923b8c2ebd1c623d370f0b9ad6d939ad9c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; makes a stronger statement about the URL than &lt;code&gt;$sce.URL&lt;/code&gt; or &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; do and therefore contexts requiring values trusted for &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; can be used anywhere that values trusted for &lt;code&gt;$sce.URL&lt;/code&gt; or &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; are required.</source>
          <target state="translated">なお、 &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; よりURLについての強い声明ます &lt;code&gt;$sce.URL&lt;/code&gt; または &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; んし、値を必要とするため、コンテキストは、信頼のために &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; 値がために、信頼できる場所であればどこでも使用することができます &lt;code&gt;$sce.URL&lt;/code&gt; または &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; は必須です。</target>
        </trans-unit>
        <trans-unit id="cc1bf3983b1102710be771517de48e27fd68d37a" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;$watchCollection&lt;/code&gt; does a shallow comparison of the properties of the object (or the items in the collection if the model is an array). This means that changing a property deeper than the first level inside the object/collection will not trigger a re-rendering.</source>
          <target state="translated">&lt;code&gt;$watchCollection&lt;/code&gt; は、オブジェクト（またはモデルが配列の場合はコレクション内の項目）のプロパティの浅い比較を行うことに注意してください。つまり、オブジェクト/コレクション内の最初のレベルよりも深いプロパティを変更しても、再レンダリングはトリガーされません。</target>
        </trans-unit>
        <trans-unit id="9d27b908b7897290c16b7b7bb8b9495950a6a26e" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;novalidate&lt;/code&gt; is used to disable browser's native form validation.</source>
          <target state="translated">&lt;code&gt;novalidate&lt;/code&gt; は、ブラウザのネイティブフォーム検証を無効にするために使用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="03cc51fc0228dd8abc334f43fcb44d8105df0c96" translate="yes" xml:space="preserve">
          <source>Note that a named property will match properties on the same level only, while the special &lt;code&gt;$&lt;/code&gt; property will match properties on the same level or deeper. E.g. an array item like &lt;code&gt;{name: {first: 'John', last: 'Doe'}}&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; be matched by &lt;code&gt;{name: 'John'}&lt;/code&gt;, but &lt;strong&gt;will&lt;/strong&gt; be matched by &lt;code&gt;{$: 'John'}&lt;/code&gt;.</source>
          <target state="translated">名前付きプロパティは同じレベルのプロパティにのみ一致し、特別な &lt;code&gt;$&lt;/code&gt; プロパティは同じレベル以上のプロパティに一致することに注意してください。例えば配列項目のように &lt;code&gt;{name: {first: 'John', last: 'Doe'}}&lt;/code&gt; なり&lt;strong&gt;ません&lt;/strong&gt;でマッチする &lt;code&gt;{name: 'John'}&lt;/code&gt; 、しかし&lt;strong&gt;ます&lt;/strong&gt;によって一致する &lt;code&gt;{$: 'John'}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f9ecf6346c2070b6c0ab4c14bc7c542fb88a7f2d" translate="yes" xml:space="preserve">
          <source>Note that an empty whitelist will block every resource URL from being loaded, and will require you to manually mark each one as trusted with &lt;code&gt;$sce.trustAsResourceUrl&lt;/code&gt;. However, templates requested by &lt;a href=&quot;../service/%24templaterequest&quot;&gt;$templateRequest&lt;/a&gt; that are present in &lt;a href=&quot;../service/%24templatecache&quot;&gt;$templateCache&lt;/a&gt; will not go through this check. If you have a mechanism to populate your templates in that cache at config time, then it is a good idea to remove 'self' from that whitelist. This helps to mitigate the security impact of certain types of issues, like for instance attacker-controlled &lt;code&gt;ng-includes&lt;/code&gt;.</source>
          <target state="translated">空のホワイトリストは、すべてのリソースURLのロードをブロックし、 &lt;code&gt;$sce.trustAsResourceUrl&lt;/code&gt; 各リソースを信頼できるものとして手動でマークする必要があることに注意してください。ただし、&lt;a href=&quot;../service/%24templaterequest&quot;&gt;$ templateCacheに&lt;/a&gt;ある$ templateRequestによって要求された&lt;a href=&quot;../service/%24templatecache&quot;&gt;テンプレート&lt;/a&gt;は、このチェックを受けません。設定時にテンプレートをキャッシュに追加するメカニズムがある場合は、そのホワイトリストから「自分」を削除することをお勧めします。これは、たとえば攻撃者が制御する &lt;code&gt;ng-includes&lt;/code&gt; など、特定の種類の問題によるセキュリティへの影響を軽減するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="7060fae7453c3d445c4f38cba4bd21dedf19b39d" translate="yes" xml:space="preserve">
          <source>Note that child elements that contain &lt;code&gt;templateUrl&lt;/code&gt; directives will not have been compiled and linked since they are waiting for their template to load asynchronously and their own compilation and linking has been suspended until that occurs.</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; ディレクティブを含む子要素は、テンプレートが非同期に読み込まれるのを待っており、独自のコンパイルとリンクが発生するまで中断されているため、コンパイルおよびリンクされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c99053b76829524b72c418b0f4b8f9dc7e529792" translate="yes" xml:space="preserve">
          <source>Note that different from config methods on providers, &lt;code&gt;matchLatestDefinitionEnabled()&lt;/code&gt; can be changed even when the application is already running.</source>
          <target state="translated">プロバイダのconfigメソッドとは異なり、 &lt;code&gt;matchLatestDefinitionEnabled()&lt;/code&gt; は、アプリケーションがすでに実行されている場合でも変更できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c4e1e4289fbf35f5faf80c5307adaaad54b9551d" translate="yes" xml:space="preserve">
          <source>Note that even if &lt;code&gt;ngAnimateChildren&lt;/code&gt; is set, no child animations will run when the parent element is removed from the DOM (&lt;code&gt;leave&lt;/code&gt; animation).</source>
          <target state="translated">&lt;code&gt;ngAnimateChildren&lt;/code&gt; が設定されている場合でも、親要素がDOMから削除されると子アニメーションは実行されないことに注意してください（アニメーションを &lt;code&gt;leave&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c7c140cbe8e284d7d91b2523d922769f21bf4f4b" translate="yes" xml:space="preserve">
          <source>Note that if the directive did not create its own scope, then &lt;code&gt;scope&lt;/code&gt; in &lt;code&gt;scope.name = 'Jeff'&lt;/code&gt; would reference the outside scope and we would see &lt;code&gt;Jeff&lt;/code&gt; in the output.</source>
          <target state="translated">ディレクティブは、独自のスコープを作成しなかった場合は、その &lt;code&gt;scope&lt;/code&gt; 内 &lt;code&gt;scope.name = 'Jeff'&lt;/code&gt; 外のスコープを参照しますと、私たちは見ることが &lt;code&gt;Jeff&lt;/code&gt; 出力に。</target>
        </trans-unit>
        <trans-unit id="b69d7fb66d4f2706680e48a28fa8422bbf4e8619" translate="yes" xml:space="preserve">
          <source>Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning that the outcome (success or error) will be determined by the final response status code.</source>
          <target state="translated">レスポンスがリダイレクトの場合、XMLHttpRequest は透過的にそれに従うことに注意してください。つまり、結果 (成功かエラーか)は最終的なレスポンスのステータスコードによって決定されます。</target>
        </trans-unit>
        <trans-unit id="52178123f14ee320297cad57648610e144298b96" translate="yes" xml:space="preserve">
          <source>Note that if the root element is on the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element then the cloned node will be placed inside of body.</source>
          <target state="translated">ルート要素が &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 要素上にある場合、複製されたノードはbodyの内部に配置されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7c6dba9ed0e82c79a5e7151ec5feb744119ce28b" translate="yes" xml:space="preserve">
          <source>Note that if you provide these properties on the config object the default transformations will be overwritten. If you wish to augment the default transformations then you must include them in your local transformation array.</source>
          <target state="translated">これらのプロパティを config オブジェクト上で指定すると、デフォルトの変換は上書きされることに注意してください。デフォルトの変換を拡張したい場合は、ローカルの変換配列に含める必要があります。</target>
        </trans-unit>
        <trans-unit id="00812766716b60ebac71cd394d6a7fe6f3350e0c" translate="yes" xml:space="preserve">
          <source>Note that if you want to assign from a child into the parent scope, you must initialize the target property on the parent scope, otherwise &lt;code&gt;ngRef&lt;/code&gt; will assign on the child scope. This commonly happens when assigning elements or components wrapped in &lt;a href=&quot;ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt;. See the second example below.</source>
          <target state="translated">子から親スコープに割り当てる場合は、親スコープのターゲットプロパティを初期化する必要があります。それ以外の場合、 &lt;code&gt;ngRef&lt;/code&gt; は子スコープに割り当てます。これは通常、&lt;a href=&quot;ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; で&lt;/a&gt;ラップされた要素またはコンポーネントを割り当てるときに発生します。以下の2番目の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="5f0fa4368d83b81bf923d569ddb949c70bea7f44" translate="yes" xml:space="preserve">
          <source>Note that in this mode, AngularJS intercepts all links (subject to the &quot;Html link rewriting&quot; rules below) and updates the url in a way that never performs a full page reload.</source>
          <target state="translated">このモードでは、AngularJSはすべてのリンクを遮断し(下記の「Htmlリンクの書き換え」ルールに従います)、ページ全体のリロードを行わない方法でURLを更新することに注意してください。</target>
        </trans-unit>
        <trans-unit id="c08cd1bfbb11534ce5e7fae83491bc8949dbc417" translate="yes" xml:space="preserve">
          <source>Note that only browsers that support CSS transitions and/or keyframe animations are capable of rendering animations triggered via &lt;code&gt;$animateCss&lt;/code&gt; (bad news for IE9 and lower).</source>
          <target state="translated">CSSトランジションやキーフレームアニメーションをサポートするブラウザのみが、 &lt;code&gt;$animateCss&lt;/code&gt; を介してトリガーされたアニメーションをレンダリングできることに注意してください（IE9以下では悪いニュースです）。</target>
        </trans-unit>
        <trans-unit id="86e2e236826b266700273a74ec0d099fb253557f" translate="yes" xml:space="preserve">
          <source>Note that only the removed control's validation state (&lt;code&gt;$errors&lt;/code&gt;etc.) will be removed from the form. &lt;code&gt;$dirty&lt;/code&gt;, &lt;code&gt;$submitted&lt;/code&gt; states will not be changed, because the expected behavior can be different from case to case. For example, removing the only &lt;code&gt;$dirty&lt;/code&gt; control from a form may or may not mean that the form is still &lt;code&gt;$dirty&lt;/code&gt;.</source>
          <target state="translated">削除されたコントロールの検証状態（ &lt;code&gt;$errors&lt;/code&gt; など）のみがフォームから削除されることに注意してください。 &lt;code&gt;$dirty&lt;/code&gt; 、 &lt;code&gt;$submitted&lt;/code&gt; 状態は変更されません。これは、予想される動作がケースごとに異なる可能性があるためです。たとえば、フォームから唯一の &lt;code&gt;$dirty&lt;/code&gt; コントロールを削除しても、フォームが &lt;code&gt;$dirty&lt;/code&gt; あることを意味する場合とそうでない場合があります。</target>
        </trans-unit>
        <trans-unit id="ba3b53de509e58a62730e40c650af0e249cde701" translate="yes" xml:space="preserve">
          <source>Note that serializer will sort the request parameters alphabetically.</source>
          <target state="translated">シリアライザはリクエストパラメータをアルファベット順に並べ替えることに注意してください。</target>
        </trans-unit>
        <trans-unit id="361cd364814ae208a63b23f1fe54b88cb0b4da83" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;!&lt;/code&gt; prefix in the hashbang mode is not part of &lt;code&gt;$location.path()&lt;/code&gt;; it is actually &lt;code&gt;hashPrefix&lt;/code&gt;.</source>
          <target state="translated">なお &lt;code&gt;!&lt;/code&gt; hashbangモードのプレフィックスは &lt;code&gt;$location.path()&lt;/code&gt; 一部ではありません。実際には &lt;code&gt;hashPrefix&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="255b65aefef25adace72fa2d5ba49a9bb01df7db" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;$routeParams&lt;/code&gt; are only updated &lt;em&gt;after&lt;/em&gt; a route change completes successfully. This means that you cannot rely on &lt;code&gt;$routeParams&lt;/code&gt; being correct in route resolve functions. Instead you can use &lt;code&gt;$route.current.params&lt;/code&gt; to access the new route's parameters.</source>
          <target state="translated">&lt;code&gt;$routeParams&lt;/code&gt; は、ルート変更が正常に完了した&lt;em&gt;後に&lt;/em&gt;のみ更新されることに注意してください。つまり、ルート解決関数で &lt;code&gt;$routeParams&lt;/code&gt; が正しいことを信頼することはできません。代わりに、 &lt;code&gt;$route.current.params&lt;/code&gt; を使用して、新しいルートのパラメーターにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="8ed0048fcbcf6b9f1d9c9796273aa944cdd8c09d" translate="yes" xml:space="preserve">
          <source>Note that the callback does not trigger a scope digest. Wrap your call into a &lt;a href=&quot;../type/%24rootscope.scope#%24apply.html&quot;&gt;scope.$apply&lt;/a&gt; to propagate changes to the scope.</source>
          <target state="translated">コールバックはスコープダイジェストをトリガーしないことに注意してください。呼び出しを&lt;a href=&quot;../type/%24rootscope.scope#%24apply.html&quot;&gt;scope。$ apply&lt;/a&gt;にラップして、変更をスコープに伝播します。</target>
        </trans-unit>
        <trans-unit id="88e8f90425456fee890aba473cd13936b00c42f7" translate="yes" xml:space="preserve">
          <source>Note that the current state of the control will not be reflected on the new parent form. This is not an issue with normal use, as freshly compiled and linked controls are in a &lt;code&gt;$pristine&lt;/code&gt; state.</source>
          <target state="translated">コントロールの現在の状態は新しい親フォームに反映されないことに注意してください。新しくコンパイルおよびリンクされたコントロールは &lt;code&gt;$pristine&lt;/code&gt; 状態であるため、これは通常の使用に関する問題ではありません。</target>
        </trans-unit>
        <trans-unit id="bc392f2c46cf2ff9d24ffab306a297a902ca69ec" translate="yes" xml:space="preserve">
          <source>Note that the interpolateDirective has a priority of 100 and sets up the watch in the preLink function.</source>
          <target state="translated">interpolateDirectiveの優先度は100で、preLink機能で時計を設定していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1e7a8adb55af74b5da7969da9a3763d122026199" translate="yes" xml:space="preserve">
          <source>Note that the required controllers will not be available during the instantiation of the controller, but they are guaranteed to be available just before the &lt;code&gt;$onInit&lt;/code&gt; method is executed!</source>
          <target state="translated">必要なコントローラーは、コントローラーのインスタンス化中は使用できませんが、 &lt;code&gt;$onInit&lt;/code&gt; メソッドが実行される直前に使用できることが保証されています。</target>
        </trans-unit>
        <trans-unit id="8c34ae91c81cc9b2d0be6d7e1934c17d8776d6a7" translate="yes" xml:space="preserve">
          <source>Note that the setters don't update &lt;code&gt;window.location&lt;/code&gt; immediately. Instead, the &lt;code&gt;$location&lt;/code&gt; service is aware of the &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt; life-cycle and coalesces multiple &lt;code&gt;$location&lt;/code&gt; mutations into one &quot;commit&quot; to the &lt;code&gt;window.location&lt;/code&gt; object during the scope &lt;code&gt;$digest&lt;/code&gt; phase. Since multiple changes to the $location's state will be pushed to the browser as a single change, it's enough to call the &lt;code&gt;replace()&lt;/code&gt; method just once to make the entire &quot;commit&quot; a replace operation rather than an addition to the browser history. Once the browser is updated, the $location service resets the flag set by &lt;code&gt;replace()&lt;/code&gt; method and future mutations will create new history records, unless &lt;code&gt;replace()&lt;/code&gt; is called again.</source>
          <target state="translated">セッターは &lt;code&gt;window.location&lt;/code&gt; をすぐに更新しないことに注意してください。代わりに、 &lt;code&gt;$location&lt;/code&gt; サービスは&lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;スコープの&lt;/a&gt;ライフサイクルを認識し、スコープの &lt;code&gt;$digest&lt;/code&gt; フェーズ中に、複数の &lt;code&gt;$location&lt;/code&gt; ミュー &lt;code&gt;window.location&lt;/code&gt; オブジェクトへの1つの「コミット」に統合します。 $ locationの状態に対する複数の変更は単一の変更としてブラウザーにプッシュされる &lt;code&gt;replace()&lt;/code&gt; 、replace（）メソッドを1回呼び出すだけで、ブラウザーの履歴に追加するのではなく、「コミット」して全体の置換操作を行うだけで十分です。ブラウザーが更新されると、$ locationサービスは &lt;code&gt;replace()&lt;/code&gt; によって設定されたフラグをリセットしますメソッドと将来のミューテーションは、 &lt;code&gt;replace()&lt;/code&gt; が再度呼び出されない限り、新しい履歴レコードを作成します。</target>
        </trans-unit>
        <trans-unit id="23e7bfea25426540eb64b363a42574d6fb731133" translate="yes" xml:space="preserve">
          <source>Note that this directive should not be used together with &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt;, as this can lead to unexpected behavior.</source>
          <target state="translated">このディレクティブは&lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;と一緒に使用しないでください。予期しない動作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="a113d4b03841c78edec91e5f83c98fd737fcdc85" translate="yes" xml:space="preserve">
          <source>Note that this feature is only active when the &lt;code&gt;ngAnimate&lt;/code&gt; module is used.</source>
          <target state="translated">この機能は、 &lt;code&gt;ngAnimate&lt;/code&gt; モジュールが使用されている場合にのみアクティブになることに注意してください。</target>
        </trans-unit>
        <trans-unit id="533bf055a177afefc469a9231695b1feea4c317e" translate="yes" xml:space="preserve">
          <source>Note that we have used non-prefixed CSS transition properties in our examples as the major browsers now support non-prefixed properties. If you intend to support older browsers or certain mobile browsers then you will need to include prefixed versions of the transition properties. Take a look at &lt;a href=&quot;http://caniuse.com/#feat=css-transitions&quot;&gt;http://caniuse.com/#feat=css-transitions&lt;/a&gt; for what browsers require prefixes, and &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;https://github.com/postcss/autoprefixer&lt;/a&gt; for a tool that can automatically generate the prefixes for you.</source>
          <target state="translated">主要なブラウザーが非プレフィックスプロパティをサポートするようになったため、例ではプレフィックスなしのCSS遷移プロパティを使用していることに注意してください。古いブラウザーまたは特定のモバイルブラウザーをサポートする場合は、遷移プロパティのプレフィックスバージョンを含める必要があります。プレフィックスを必要とするブラウザーについては&lt;a href=&quot;http://caniuse.com/#feat=css-transitions&quot;&gt;http://caniuse.com/#feat=css-transitions&lt;/a&gt;を、プレフィックスを自動的に生成できるツールについては&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;https://github.com/postcss/autoprefixer&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="9c3e1cc0ee20d7a72fe1a7d291a53df28e47882d" translate="yes" xml:space="preserve">
          <source>Note that we provided the name of our application module to be loaded into the injector as the second parameter of the &lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; function. Notice that &lt;code&gt;angular.bootstrap&lt;/code&gt; will not create modules on the fly. You must create any custom &lt;a href=&quot;module&quot;&gt;modules&lt;/a&gt; before you pass them as a parameter.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt;関数の2番目のパラメーターとして、インジェクターにロードするアプリケーションモジュールの名前を指定したことに注意してください。 &lt;code&gt;angular.bootstrap&lt;/code&gt; がその場でモジュールを作成しないことに注意してください。パラメータとして渡す前に、カスタム&lt;a href=&quot;module&quot;&gt;モジュールを&lt;/a&gt;作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="9ead3bf4970f104fb56e684eaff167f7cdae7eea" translate="yes" xml:space="preserve">
          <source>Note that whatever is returned by the decorator function will replace that which is being decorated. For example, a missing return statement will wipe out the entire object being decorated.</source>
          <target state="translated">decorator 関数が返すものは何であれ、装飾されているものを置き換えることに注意してください。例えば、return文がないと、デコレーションされているオブジェクト全体が一掃されてしまいます。</target>
        </trans-unit>
        <trans-unit id="fa3e23fba7c51ee609d4ecc4d18b8ad2d0d55f3e" translate="yes" xml:space="preserve">
          <source>Note that when an element is removed using &lt;code&gt;ngIf&lt;/code&gt; its scope is destroyed and a new scope is created when the element is restored. The scope created within &lt;code&gt;ngIf&lt;/code&gt; inherits from its parent scope using &lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance&quot;&gt;prototypal inheritance&lt;/a&gt;. An important implication of this is if &lt;code&gt;ngModel&lt;/code&gt; is used within &lt;code&gt;ngIf&lt;/code&gt; to bind to a javascript primitive defined in the parent scope. In this case any modifications made to the variable within the child scope will override (hide) the value in the parent scope.</source>
          <target state="translated">&lt;code&gt;ngIf&lt;/code&gt; を使用して要素が削除されると、そのスコープが破棄され、要素が復元されるときに新しいスコープが作成されることに注意してください。 &lt;code&gt;ngIf&lt;/code&gt; 内で作成されたスコープは、&lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance&quot;&gt;プロトタイプ継承&lt;/a&gt;を使用して親スコープから継承します。場合は、この重要な含意はある &lt;code&gt;ngModel&lt;/code&gt; が内で使用されて &lt;code&gt;ngIf&lt;/code&gt; 親スコープで定義されたJavaScriptのプリミティブにバインドします。この場合、子スコープ内の変数に加えられた変更は、親スコープの値をオーバーライド（非表示）します。</target>
        </trans-unit>
        <trans-unit id="ec430e54b4e4cb65b0f886e7a9ce1cc6897310e8" translate="yes" xml:space="preserve">
          <source>Note that when you specify offsets, you must provide explicit number rules for numbers from 0 up to and including the offset. If you use an offset of 3, for example, you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for plural categories &quot;one&quot; and &quot;other&quot;.</source>
          <target state="translated">オフセットを指定する場合は、0 からオフセットまでの数値に対して明示的な数値規則を指定する必要があることに注意してください。例えば、3 のオフセットを使用する場合は、0、1、2、および 3 の明示的な数値規則を指定する必要があります。また、複数のカテゴリ &quot;one&quot; と &quot;other&quot; には、複数の文字列を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="7bb502c46c9a90c606dcc935a89c49887979e77d" translate="yes" xml:space="preserve">
          <source>Note that when you type hashbang url into the first browser (or vice versa) it doesn't rewrite / redirect to regular / hashbang url, as this conversion happens only during parsing the initial URL = on page reload.</source>
          <target state="translated">あなたが最初のブラウザ(またはその逆)にhashbang urlを入力すると、この変換は、最初のURLを解析中にのみ発生するように、それは、通常のhashbang urlへのリダイレクトを書き換えないことに注意してください=ページのリロード上の最初のURL。</target>
        </trans-unit>
        <trans-unit id="b178156524e6cb72a5162e49e917632f00765f48" translate="yes" xml:space="preserve">
          <source>Note that you are not registering a &lt;strong&gt;service instance&lt;/strong&gt;, but rather a &lt;strong&gt;factory function&lt;/strong&gt; that will create this instance when called.</source>
          <target state="translated">&lt;strong&gt;サービスインスタンスを&lt;/strong&gt;登録するのではなく、呼び出されたときにこのインスタンスを作成する&lt;strong&gt;ファクトリ関数&lt;/strong&gt;を登録することに注意してください。</target>
        </trans-unit>
        <trans-unit id="426af06ec89b5b89375d353f1e16d2216df4049e" translate="yes" xml:space="preserve">
          <source>Note that you can also attach controllers to the DOM by declaring it in a route definition via the &lt;a href=&quot;../../ngroute/service/%24route&quot;&gt;$route&lt;/a&gt; service. A common mistake is to declare the controller again using &lt;code&gt;ng-controller&lt;/code&gt; in the template itself. This will cause the controller to be attached and executed twice.</source>
          <target state="translated">&lt;a href=&quot;../../ngroute/service/%24route&quot;&gt;$ route&lt;/a&gt;サービスを介してルート定義で宣言することにより、DOMにコントローラーをアタッチすることもできます。よくある間違いは、テンプレート自体で &lt;code&gt;ng-controller&lt;/code&gt; を使用してコントローラーを再度宣言することです。これにより、コントローラーが接続され、2回実行されます。</target>
        </trans-unit>
        <trans-unit id="768387cfb355f78bebd7f61156633279bb4ef574" translate="yes" xml:space="preserve">
          <source>Note that you can also require the directive's own controller - it will be made available like any other controller.</source>
          <target state="translated">ディレクティブ自身のコントローラを要求することもできることに注意してください-他のコントローラと同じように利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="0856f9e27bd71605496c72bdce7db828215d5caa" translate="yes" xml:space="preserve">
          <source>Note that you can only inject &lt;a href=&quot;angular.module#provider.html&quot;&gt;&lt;code&gt;providers&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;angular.module#constant.html&quot;&gt;&lt;code&gt;constants&lt;/code&gt;&lt;/a&gt; into this function.</source>
          <target state="translated">この関数に挿入できるのは&lt;a href=&quot;angular.module#provider.html&quot;&gt; &lt;code&gt;providers&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;angular.module#constant.html&quot;&gt; &lt;code&gt;constants&lt;/code&gt; &lt;/a&gt;だけであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7fca268533ad52bcf0c065e75a8a1bda0b9ae178" translate="yes" xml:space="preserve">
          <source>Note that, in AngularJS, there is also a &lt;code&gt;$destroy&lt;/code&gt; jQuery event, which can be used to clean up DOM bindings before an element is removed from the DOM.</source>
          <target state="translated">AngularJSには、要素がDOMから削除される前にDOMバインディングをクリーンアップするために使用できる &lt;code&gt;$destroy&lt;/code&gt; jQueryイベントもあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="28eeae6418e548c9d53253ae27de441a4197d400" translate="yes" xml:space="preserve">
          <source>Note that, since JSONP requests are sensitive because the response is given full access to the browser, the url must be declared, via &lt;a href=&quot;%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt; as a trusted resource URL. You can trust a URL by adding it to the whitelist via &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;&lt;code&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/code&gt;&lt;/a&gt; or by explicitly trusting the URL via &lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt;&lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">応答にはブラウザーへの完全なアクセス権が与えられているため、JSONP要求は機密であるため、URLは、&lt;a href=&quot;%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;を介して信頼できるリソースURLとして宣言する必要があります。&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt; &lt;code&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/code&gt; &lt;/a&gt;を介してホワイトリストにURLを追加するか、&lt;a href=&quot;%24sce#trustAsResourceUrl.html&quot;&gt; &lt;code&gt;$sce.trustAsResourceUrl(url)&lt;/code&gt; &lt;/a&gt;介してURLを明示的に信頼することで、URLを信頼できます。</target>
        </trans-unit>
        <trans-unit id="c149229cd726688ef5b9a6babd1d42d388052bde" translate="yes" xml:space="preserve">
          <source>Note, that code executed in event-listeners (even those registered using jqLite's &lt;code&gt;on&lt;/code&gt;/&lt;code&gt;bind&lt;/code&gt; methods) does not delegate exceptions to the &lt;a href=&quot;%24exceptionhandler&quot;&gt;$exceptionHandler&lt;/a&gt; (unless executed during a digest).</source>
          <target state="translated">イベントリスナーで実行されるコード（jqLit​​eの &lt;code&gt;on&lt;/code&gt; / &lt;code&gt;bind&lt;/code&gt; メソッドを使用して登録されたコードでも）は、例外を&lt;a href=&quot;%24exceptionhandler&quot;&gt;$ exceptionHandlerに&lt;/a&gt;委譲しないことに注意してください（ダイジェスト中に実行されない限り）。</target>
        </trans-unit>
        <trans-unit id="9e38d74b6819f720cd61a7094b0d049052abbf0b" translate="yes" xml:space="preserve">
          <source>Note, this directive requires &lt;code&gt;ngModel&lt;/code&gt; to be present.</source>
          <target state="translated">このディレクティブには &lt;code&gt;ngModel&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="b59520eea72ca86bfd70bf545fa47501473c8a9a" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;ngModel&lt;/code&gt; will try to bind to the property given by evaluating the expression on the current scope. If the property doesn't already exist on this scope, it will be created implicitly and added to the scope.</source>
          <target state="translated">注： &lt;code&gt;ngModel&lt;/code&gt; は、現在のスコープで式を評価することによって指定されたプロパティにバインドしようとします。プロパティがこのスコープに存在しない場合は、暗黙的に作成され、スコープに追加されます。</target>
        </trans-unit>
        <trans-unit id="c67b04ea81758d7b804ada0ab90cd4b709045975" translate="yes" xml:space="preserve">
          <source>Note: A Word on Modules</source>
          <target state="translated">注意:モジュールについての一言</target>
        </trans-unit>
        <trans-unit id="ded91630c0d7419f8e1e784dda3b45c381bb9947" translate="yes" xml:space="preserve">
          <source>Note: All services in AngularJS are singletons. That means that the injector uses each recipe at most once to create the object. The injector then caches the reference for all future needs.</source>
          <target state="translated">注意:AngularJSのすべてのサービスはシングルトンです。つまり、インジェクターはオブジェクトを作成するためにそれぞれのレシピを最大一度だけ使用します。その後、インジェクターは将来の必要性のために参照をキャッシュします。</target>
        </trans-unit>
        <trans-unit id="9e323b77fe9b73f870ed3df7c5fd2a58db5399d7" translate="yes" xml:space="preserve">
          <source>Note: As the &lt;code&gt;blur&lt;/code&gt; event is executed synchronously also during DOM manipulations (e.g. removing a focussed input), AngularJS executes the expression using &lt;code&gt;scope.$evalAsync&lt;/code&gt; if the event is fired during an &lt;code&gt;$apply&lt;/code&gt; to ensure a consistent state.</source>
          <target state="translated">注： &lt;code&gt;blur&lt;/code&gt; イベントは、DOM操作（フォーカスされた入力の削除など）中にも同期的に実行 &lt;code&gt;$apply&lt;/code&gt; れるため、$ apply中にイベントが発生すると、一貫した状態を保証するために、AngularJSは &lt;code&gt;scope.$evalAsync&lt;/code&gt; を使用して式を実行します。</target>
        </trans-unit>
        <trans-unit id="c280156fbac945785329bf6b2c4598680af419de" translate="yes" xml:space="preserve">
          <source>Note: As the &lt;code&gt;focus&lt;/code&gt; event is executed synchronously when calling &lt;code&gt;input.focus()&lt;/code&gt; AngularJS executes the expression using &lt;code&gt;scope.$evalAsync&lt;/code&gt; if the event is fired during an &lt;code&gt;$apply&lt;/code&gt; to ensure a consistent state.</source>
          <target state="translated">注： &lt;code&gt;input.focus()&lt;/code&gt; の呼び出し時に &lt;code&gt;focus&lt;/code&gt; イベントが同期的に実行 &lt;code&gt;$apply&lt;/code&gt; れるため、一貫性のある状態を確保するために$ apply中にイベントが &lt;code&gt;scope.$evalAsync&lt;/code&gt; 場合、AngularJSはscope。$ evalAsyncを使用して式を実行します。</target>
        </trans-unit>
        <trans-unit id="389de76ccd42531e06d862c273bd31729b8ac968" translate="yes" xml:space="preserve">
          <source>Note: By default, the address that appears in your &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag will be used as the path. This is important so that cookies will be visible for all routes when html5mode is enabled.</source>
          <target state="translated">注：デフォルトでは、 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; タグに表示されるアドレスがパスとして使用されます。これは、html5modeが有効なときにすべてのルートでCookieが表示されるようにするために重要です。</target>
        </trans-unit>
        <trans-unit id="e31495007ee5e25b71e93337695e741041bb6b41" translate="yes" xml:space="preserve">
          <source>Note: If a &lt;code&gt;$sanitize&lt;/code&gt; service is unavailable and the bound value isn't explicitly trusted, you will have an exception (instead of an exploit.)</source>
          <target state="translated">注： &lt;code&gt;$sanitize&lt;/code&gt; サービスが利用できず、バインドされた値が明示的に信頼されていない場合、（エクスプロイトではなく）例外が発生します。</target>
        </trans-unit>
        <trans-unit id="377131b4062957e0cd54324140e9b1862488c89c" translate="yes" xml:space="preserve">
          <source>Note: Not all browsers support blackboxing.</source>
          <target state="translated">注意:すべてのブラウザがブラックボックスをサポートしているわけではありません。</target>
        </trans-unit>
        <trans-unit id="a089d7d30df3e20d1229e11d2f529063219abf86" translate="yes" xml:space="preserve">
          <source>Note: Path should always begin with forward slash (/), this method will add the forward slash if it is missing.</source>
          <target state="translated">注意:パスは常にフォワードスラッシュ()で始まる必要があり、このメソッドはフォワードスラッシュがない場合にフォワードスラッシュを追加します。</target>
        </trans-unit>
        <trans-unit id="eb8c13038a41fd0eff7f4877829e9fd98a3545b0" translate="yes" xml:space="preserve">
          <source>Note: Service recipes follow a design pattern called &lt;a href=&quot;http://www.martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer&quot;&gt;constructor injection&lt;/a&gt;.</source>
          <target state="translated">注：サービスレシピは、&lt;a href=&quot;http://www.martinfowler.com/articles/injection.html#ConstructorInjectionWithPicocontainer&quot;&gt;コンストラクターインジェクション&lt;/a&gt;と呼ばれる設計パターンに従います。</target>
        </trans-unit>
        <trans-unit id="475834278a9624d0a055bc9effed019c3ae7d13c" translate="yes" xml:space="preserve">
          <source>Note: compared to the non-AngularJS version &lt;code&gt;location.host&lt;/code&gt; which returns &lt;code&gt;hostname:port&lt;/code&gt;, this returns the &lt;code&gt;hostname&lt;/code&gt; portion only.</source>
          <target state="translated">注： &lt;code&gt;hostname:port&lt;/code&gt; を返す非AngularJSバージョンの &lt;code&gt;location.host&lt;/code&gt; と比較すると、これは &lt;code&gt;hostname&lt;/code&gt; 部分のみを返します。</target>
        </trans-unit>
        <trans-unit id="29b3409bac783620b70260279692f3e46f1b409c" translate="yes" xml:space="preserve">
          <source>Note: each module is only loaded once, even if multiple other modules require it. Note: the factory function for &quot;values&quot; and &quot;services&quot; is called lazily when the value/service is injected for the first time.</source>
          <target state="translated">注意:他の複数のモジュールが必要な場合でも、各モジュールは一度しかロードされません。注意:&quot;values&quot; と &quot;services&quot; のファクトリ関数は、valueservice が初めて注入されたときに怠惰に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="097deab2d3194da828c79a657f91e42bb7760b81" translate="yes" xml:space="preserve">
          <source>Note: progress/notify callbacks are not currently supported via the ES6-style interface.</source>
          <target state="translated">注意:progressnotify コールバックは、現在のところ ES6 スタイルのインターフェイスではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="5db2b0e614cd03b6d341dbe39badf2f8a3c6edee" translate="yes" xml:space="preserve">
          <source>Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.</source>
          <target state="translated">注意:ES6 の動作とは異なり、コンストラクタ関数で例外がスローされても、暗黙のうちにプロミスを拒否することはありません。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="c54075f533215ab50d0fd7cf38a3eeb8c23fc08c" translate="yes" xml:space="preserve">
          <source>Notice how by nesting the &lt;code&gt;describe&lt;/code&gt; calls and being descriptive when calling them with strings, the test is very clear. It documents exactly what it is testing, and at a glance you can quickly see what is happening. Now let's add the test for when the password is less than three characters, which should see &lt;code&gt;$scope.strength&lt;/code&gt; set to &quot;weak&quot;:</source>
          <target state="translated">&lt;code&gt;describe&lt;/code&gt; 呼び出しをネストし、文字列を使用して呼び出すときに記述的であることによって、テストが非常に明確になることに注意してください。何がテストされているかを正確に文書化し、一目で何が起こっているのかをすばやく確認できます。次に、パスワードが3文字未満の場合のテストを追加してみましょう。 &lt;code&gt;$scope.strength&lt;/code&gt; が「弱い」に設定されているはずです。</target>
        </trans-unit>
        <trans-unit id="ea973d032cbe0e4a3acb5cd3fd8438e47c464d8c" translate="yes" xml:space="preserve">
          <source>Notice how we created an AngularJS module called &lt;code&gt;myApp&lt;/code&gt;, and specified that this module definition contains a &quot;recipe&quot; for constructing the &lt;code&gt;clientId&lt;/code&gt; service, which is a simple string in this case.</source>
          <target state="translated">&lt;code&gt;myApp&lt;/code&gt; というAngularJSモジュールを作成し、このモジュール定義に &lt;code&gt;clientId&lt;/code&gt; サービスを構築するための「レシピ」が含まれていることを指定したことに注意してください。これは、この場合は単純な文字列です。</target>
        </trans-unit>
        <trans-unit id="6e1c89c353e0b2bfa617e6200563c1f70f6b36b2" translate="yes" xml:space="preserve">
          <source>Notice how we nested three &lt;code&gt;ng-controller&lt;/code&gt; directives in our template. This will result in four scopes being created for our view:</source>
          <target state="translated">テンプレートで3つの &lt;code&gt;ng-controller&lt;/code&gt; ディレクティブをネストしていることに注目してください。これにより、ビュー用に4つのスコープが作成されます。</target>
        </trans-unit>
        <trans-unit id="866554109e207e68affe8a1878fa43779923f1b4" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;ng-bind-html&lt;/code&gt; is bound to &lt;code&gt;userHtml&lt;/code&gt; controlled by the user. With SCE disabled, this application allows the user to render arbitrary HTML into the DIV, which would be an XSS security bug. In a more realistic example, one may be rendering user comments, blog articles, etc. via bindings. (HTML is just one example of a context where rendering user controlled input creates security vulnerabilities.)</source>
          <target state="translated">&lt;code&gt;ng-bind-html&lt;/code&gt; は、ユーザーが制御する &lt;code&gt;userHtml&lt;/code&gt; にバインドされていることに注意してください。SCEを無効にすると、このアプリケーションにより、ユーザーは任意のHTMLをDIVにレンダリングできますが、これはXSSのセキュリティバグになります。より現実的な例では、バインディングを介してユーザーのコメント、ブログ記事などをレンダリングする場合があります。（HTMLは、ユーザー制御の入力をレンダリングするとセキュリティの脆弱性が発生する状況のほんの一例です。）</target>
        </trans-unit>
        <trans-unit id="73b624fb6abc400437a5b17f43dc406ad4cba089" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;{{vojta.name}}&lt;/code&gt; and &lt;code&gt;{{vojta.address}}&lt;/code&gt; are empty, meaning they are undefined. Although we defined &lt;code&gt;vojta&lt;/code&gt; in the controller, it's not available within the directive.</source>
          <target state="translated">ことに注意してください &lt;code&gt;{{vojta.name}}&lt;/code&gt; と &lt;code&gt;{{vojta.address}}&lt;/code&gt; それらは不定ですつまり、空です。コントローラーで &lt;code&gt;vojta&lt;/code&gt; を定義しましたが、ディレクティブ内では使用できません。</target>
        </trans-unit>
        <trans-unit id="0298da2c4dfd3a77cc9d26ed5cd330121c43f588" translate="yes" xml:space="preserve">
          <source>Notice that AngularJS automatically places &lt;code&gt;ng-scope&lt;/code&gt; class on elements where scopes are attached. The &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; definition in this example highlights in red the new scope locations. The child scopes are necessary because the repeater evaluates &lt;code&gt;{{name}}&lt;/code&gt; expression, but depending on which scope the expression is evaluated it produces different result. Similarly the evaluation of &lt;code&gt;{{department}}&lt;/code&gt; prototypically inherits from root scope, as it is the only place where the &lt;code&gt;department&lt;/code&gt; property is defined.</source>
          <target state="translated">AngularJS は、スコープがアタッチされている要素に &lt;code&gt;ng-scope&lt;/code&gt; クラスを自動的に配置することに注意してください。この例の &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 定義は、新しいスコープの場所を赤で強調表示しています。リピーターは &lt;code&gt;{{name}}&lt;/code&gt; 式を評価するため、子スコープが必要ですが、式が評価されるスコープに応じて、結果は異なります。同様に、 &lt;code&gt;{{department}}&lt;/code&gt; の評価は、プロトタイプとしてルートスコープから継承されます。これは、 &lt;code&gt;department&lt;/code&gt; プロパティが定義されている唯一の場所だからです。</target>
        </trans-unit>
        <trans-unit id="3839958f8944ea1c22c3c00974493cea51d7518b" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;SpicyController&lt;/code&gt; Controller now defines just one method called &lt;code&gt;spicy&lt;/code&gt;, which takes one argument called &lt;code&gt;spice&lt;/code&gt;. The template then refers to this Controller method and passes in a string constant &lt;code&gt;'chili'&lt;/code&gt; in the binding for the first button and a model property &lt;code&gt;customSpice&lt;/code&gt; (bound to an input box) in the second button.</source>
          <target state="translated">&lt;code&gt;SpicyController&lt;/code&gt; コントローラーが &lt;code&gt;spicy&lt;/code&gt; と呼ばれるメソッドを1つだけ定義することに注意してください。このメソッドは、 &lt;code&gt;spice&lt;/code&gt; と呼ばれる1つの引数を取ります。次に、テンプレートはこのControllerメソッドを参照し、最初のボタンのバインディングで文字列定数 &lt;code&gt;'chili'&lt;/code&gt; を &lt;code&gt;customSpice&lt;/code&gt; 、2番目のボタンで（入力ボックスにバインドされた）モデルプロパティcustomSpiceを渡します。</target>
        </trans-unit>
        <trans-unit id="fcafb839ae2e19c3003dbe181ab743c7da4deb5d" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;debounce&lt;/code&gt; setting now inherits the value from the outer &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">&lt;code&gt;debounce&lt;/code&gt; 設定が外側の &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 要素から値を継承することに注意してください。</target>
        </trans-unit>
        <trans-unit id="11c8b074765da89c55e8bddbf88d6d735cedb6db" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;debounce&lt;/code&gt; setting was not inherited and used the default value instead.</source>
          <target state="translated">&lt;code&gt;debounce&lt;/code&gt; 設定は継承されず、代わりにデフォルト値を使用したことに注意してください。</target>
        </trans-unit>
        <trans-unit id="84e33f4c42c94171ec70e888a6080924ce7f9f08" translate="yes" xml:space="preserve">
          <source>Notice that the unicorn provider is injected into the config function. This injection is done by a provider injector which is different from the regular instance injector, in that it instantiates and wires (injects) all provider instances only.</source>
          <target state="translated">ユニコーン・プロバイダが config 関数に注入されていることに注目してください。このインジェクションは、通常のインスタンスインジェクタとは異なり、すべてのプロバイダインスタンスのみをインスタンス化して配線する (インジェクションする)プロバイダインジェクタによって行われます。</target>
        </trans-unit>
        <trans-unit id="199e1ec52bd8dfa3947e323243561950569a2371" translate="yes" xml:space="preserve">
          <source>Notice that we are still using two plural categories(one, other), but we added three explicit number rules 0, 1 and 2. When one person, perhaps John, views the document, &quot;John is viewing&quot; will be shown. When three people view the document, no explicit number rule is found, so an offset of 2 is taken off 3, and AngularJS uses 1 to decide the plural category. In this case, plural category 'one' is matched and &quot;John, Mary and one other person are viewing&quot; is shown.</source>
          <target state="translated">2つの複数のカテゴリ(one,other)を使用していますが、0,1,2の3つの明示的な数の規則を追加しています。1人、おそらくJohnがドキュメントを閲覧した場合、&quot;John is viewing &quot;と表示されます。3人がドキュメントを閲覧した場合は、明示的な数値ルールが見つからないので、3から2のオフセットを取り、AngularJSは1を使って複数のカテゴリを決定します。この場合、複数のカテゴリ「1」がマッチし、「ジョン、メアリー、もう一人が閲覧中」と表示されます。</target>
        </trans-unit>
        <trans-unit id="1994c2630a8638f99ab205cb6033d30163f18599" translate="yes" xml:space="preserve">
          <source>Notice that we have bindings in this directive. After &lt;code&gt;$compile&lt;/code&gt; compiles and links &lt;code&gt;&amp;lt;div my-customer&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;, it will try to match directives on the element's children. This means you can compose directives of other directives. We'll see how to do that in &lt;a href=&quot;directive#creating-directives-that-communicate.html&quot;&gt;an example&lt;/a&gt; below.</source>
          <target state="translated">このディレクティブにはバインディングがあることに注意してください。 &lt;code&gt;$compile&lt;/code&gt; &lt;code&gt;&amp;lt;div my-customer&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; をコンパイルしてリンクした後、要素の子のディレクティブに一致させようとします。これは、他のディレクティブのディレクティブを作成できることを意味します。以下&lt;a href=&quot;directive#creating-directives-that-communicate.html&quot;&gt;の例で&lt;/a&gt;その方法を説明します。</target>
        </trans-unit>
        <trans-unit id="81bd7a0e3da58bfc17640a279f9a5cbc48aaad4b" translate="yes" xml:space="preserve">
          <source>Notice the CSS class &lt;strong&gt;fade&lt;/strong&gt;? We can now create the CSS transition code that references this class:</source>
          <target state="translated">CSSクラスの&lt;strong&gt;フェードに&lt;/strong&gt;注意してください。これで、このクラスを参照するCSS遷移コードを作成できます。</target>
        </trans-unit>
        <trans-unit id="8e5507629b5d2276102b44fefc2c3db40187c151" translate="yes" xml:space="preserve">
          <source>Now that AngularJS knows of all the parts of the application, it needs to create them. In the previous section we saw that controllers are created using a constructor function. For services, there are multiple ways to specify how they are created (see the &lt;a href=&quot;services&quot;&gt;service guide&lt;/a&gt;). In the example above, we are using an anonymous function as the factory function for the &lt;code&gt;currencyConverter&lt;/code&gt; service. This function should return the &lt;code&gt;currencyConverter&lt;/code&gt; service instance.</source>
          <target state="translated">AngularJSがアプリケーションのすべての部分を認識したので、それらを作成する必要があります。前のセクションで、コンストラクター関数を使用してコントローラーが作成されることを確認しました。サービスの場合、作成方法を指定する方法は複数あります（&lt;a href=&quot;services&quot;&gt;サービスガイドを&lt;/a&gt;参照）。上記の例では、 &lt;code&gt;currencyConverter&lt;/code&gt; サービスのファクトリ関数として匿名関数を使用しています。この関数は、 &lt;code&gt;currencyConverter&lt;/code&gt; サービスインスタンスを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="3023743de3fc166f2614a5025a30366a01a0be40" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;on&lt;/code&gt; CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element in our HTML code then we can trigger a CSS or JS animation to happen.</source>
          <target state="translated">これで、 &lt;code&gt;on&lt;/code&gt; CSSクラスがグリーティングボックスコンポーネントに追加および削除されます。次に、HTMLコードのグリーティングボックス要素の上にCSSクラスを追加すると、CSSまたはJSアニメーションをトリガーできます。</target>
        </trans-unit>
        <trans-unit id="5a9c4611e97cb75f64fecd19f3bf1eb542109c4a" translate="yes" xml:space="preserve">
          <source>Now we can add a directive to our app.</source>
          <target state="translated">これで、アプリにディレクティブを追加することができます。</target>
        </trans-unit>
        <trans-unit id="6ddd006ee96483952150cc966e2ccc3310f3a60b" translate="yes" xml:space="preserve">
          <source>Now we can fill in the rest via our transition CSS code:</source>
          <target state="translated">あとは、遷移用のCSSコードを使って埋めていきましょう。</target>
        </trans-unit>
        <trans-unit id="1dd4db9a4bc3a4df724b8949105cc438f10d21ff" translate="yes" xml:space="preserve">
          <source>Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur: an &lt;code&gt;out&lt;/code&gt; and an &lt;code&gt;in&lt;/code&gt; stage. The &lt;code&gt;out&lt;/code&gt; stage happens first and that is when the element is animated away from its origin. Once that animation is over then the &lt;code&gt;in&lt;/code&gt; stage occurs which animates the element to its destination. The reason why there are two animations is to give enough time for the enter animation on the new element to be ready.</source>
          <target state="translated">これで、アンカーアニメーションに戻ることができます。アニメーションが発生 &lt;code&gt;out&lt;/code&gt; と、アウトと &lt;code&gt;in&lt;/code&gt; 2つのステージが発生します。 &lt;code&gt;out&lt;/code&gt; ステージは、最初に、その要素は、その原点から離れてアニメーション化されたときであるが起こります。アニメーションが終了すると、要素を目的地までアニメーション化する &lt;code&gt;in&lt;/code&gt; ステージが発生します。アニメーションが2つあるのは、新しい要素のEnterアニメーションを準備するのに十分な時間を与えるためです。</target>
        </trans-unit>
        <trans-unit id="85942980bd72608eb2e7385f2bd59154033057d3" translate="yes" xml:space="preserve">
          <source>Now we create the &lt;strong&gt;JavaScript animation&lt;/strong&gt; that will trigger the CSS transition:</source>
          <target state="translated">次に、CSSの移行をトリガーする&lt;strong&gt;JavaScriptアニメーション&lt;/strong&gt;を作成し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b6aea76798fd7c993834e12f5affe0d762a73898" translate="yes" xml:space="preserve">
          <source>Now we have two tests, but notice the duplication between the tests. Both have to create the &lt;code&gt;$scope&lt;/code&gt; variable and create the controller. As we add new tests, this duplication is only going to get worse. Thankfully, Jasmine provides &lt;code&gt;beforeEach&lt;/code&gt;, which lets us run a function before each individual test. Let's see how that would tidy up our tests:</source>
          <target state="translated">これで2つのテストがありますが、テスト間の重複に注意してください。どちらも &lt;code&gt;$scope&lt;/code&gt; 変数を作成し、コントローラーを作成する必要があります。新しいテストを追加すると、この重複はさらに悪化します。ありがたいことに、Jasmineは &lt;code&gt;beforeEach&lt;/code&gt; を提供します。これにより、個々のテストの前に関数を実行できます。それがテストを整理する方法を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="01bc994e095baae01166aef817062cc1507de306" translate="yes" xml:space="preserve">
          <source>Now we setup the mock backend and create the test specs:</source>
          <target state="translated">ここでは、モックバックエンドを設定し、テスト仕様を作成します。</target>
        </trans-unit>
        <trans-unit id="e2b8c1c02a592bac26655509f0d4ef8342a63dc4" translate="yes" xml:space="preserve">
          <source>Now what do the contents of our &lt;code&gt;animator&lt;/code&gt; variable look like:</source>
          <target state="translated">&lt;code&gt;animator&lt;/code&gt; 変数の内容は次のようになります。</target>
        </trans-unit>
        <trans-unit id="c69de682241b16fef357ef55cb7730c3f9464cc0" translate="yes" xml:space="preserve">
          <source>Now, when the &lt;code&gt;ngIf&lt;/code&gt; expression changes, &lt;code&gt;ngAnimate&lt;/code&gt; will see the spinner animation and use it to animate the &lt;code&gt;enter&lt;/code&gt;/&lt;code&gt;leave&lt;/code&gt; event, which doesn't work because the animation is infinite. The element will still be added / removed after a timeout, but there will be a noticeable delay.</source>
          <target state="translated">これで、 &lt;code&gt;ngIf&lt;/code&gt; 式が変更されると、 &lt;code&gt;ngAnimate&lt;/code&gt; はスピナーアニメーションを表示し、それを使用して &lt;code&gt;enter&lt;/code&gt; / &lt;code&gt;leave&lt;/code&gt; イベントをアニメーション化します。アニメーションは無限であるため機能しません。タイムアウト後も要素は追加/削除されますが、顕著な遅延が発生します。</target>
        </trans-unit>
        <trans-unit id="7d0d5f99a37ee70edab031267785cec623ef0119" translate="yes" xml:space="preserve">
          <source>Now, when the view changes (once the link is clicked), ngAnimate will examine the HTML contents to see if there is a match reference between any components in the view that is leaving and the view that is entering. It will scan both the view which is being removed (leave) and inserted (enter) to see if there are any paired DOM elements that contain a matching ref value.</source>
          <target state="translated">これで、ビューが変更されると(リンクがクリックされると)、ngAnimate は HTML コンテンツを検査して、退出するビューと入室するビューのコンポーネント間に一致する参照があるかどうかを確認します。これにより、削除されるビュー(退出)と挿入されるビュー(入室)の両方をスキャンして、一致する参照値を含むペアの DOM 要素があるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="f95dbfde74296ed5d57d3a973b8c06886fc00be8" translate="yes" xml:space="preserve">
          <source>Nowadays most of the AngularJS projects are using only element and attribute directives, and in such projects there is no need to compile comments and classes.</source>
          <target state="translated">現在ではAngularJSのプロジェクトのほとんどが要素と属性のディレクティブのみを使用しており、そのようなプロジェクトではコメントやクラスをコンパイルする必要はありません。</target>
        </trans-unit>
        <trans-unit id="c05a46d489572fe209bbfcd6fd0cae15d381835c" translate="yes" xml:space="preserve">
          <source>Number of decimal places to round the amount to, defaults to default max fraction size for current locale</source>
          <target state="translated">金額を四捨五入する小数点以下の桁数、デフォルトは現在のロケールでの最大端数サイズ</target>
        </trans-unit>
        <trans-unit id="2de873c3c8c40a30dc87a6efdf6c6b6b808f8957" translate="yes" xml:space="preserve">
          <source>Number of decimal places to round the number to. If this is not provided then the fraction size is computed from the current locale's number formatting pattern. In the case of the default locale, it will be 3.</source>
          <target state="translated">数値を四捨五入する小数点以下の桁数。これを指定しなかった場合は、現在のロケールの数値書式パターンから端数の大きさを計算します。デフォルトのロケールの場合は 3 となります。</target>
        </trans-unit>
        <trans-unit id="1cab7d05ea962fa769885ebf77b5f10eb16d0782" translate="yes" xml:space="preserve">
          <source>Number of milliseconds between each function call.</source>
          <target state="translated">各関数の呼び出し間のミリ秒数。</target>
        </trans-unit>
        <trans-unit id="7344ecd696099cafba5489c27372c57dd66d2a02" translate="yes" xml:space="preserve">
          <source>Number of pending requests to skip. For example, a value of &lt;code&gt;5&lt;/code&gt; would skip the first 5 pending requests and start flushing from the 6th onwards.</source>
          <target state="translated">スキップする保留中のリクエストの数。たとえば、値 &lt;code&gt;5&lt;/code&gt; は、保留中の最初の5つのリクエストをスキップし、6番目以降のフラッシュを開始します。</target>
        </trans-unit>
        <trans-unit id="8eac9b329b2c580c8d444a64eb6fd91be474f30c" translate="yes" xml:space="preserve">
          <source>Number of responses to flush. If undefined/null, all pending requests (starting after &lt;code&gt;skip&lt;/code&gt;) will be flushed.</source>
          <target state="translated">フラッシュする応答の数。未定義/ nullの場合、（ &lt;code&gt;skip&lt;/code&gt; の後に開始する）保留中のすべての要求がフラッシュされます。</target>
        </trans-unit>
        <trans-unit id="f68b421f294e9b31cc2b54567e284f63c5469db0" translate="yes" xml:space="preserve">
          <source>Number of times to repeat. If not set, or 0, will repeat indefinitely.</source>
          <target state="translated">繰り返し回数を設定します。設定されていない場合、または0の場合は無期限に繰り返します。</target>
        </trans-unit>
        <trans-unit id="e8550249d090d9100ad4508016e764db78774af3" translate="yes" xml:space="preserve">
          <source>Number rounded to &lt;code&gt;fractionSize&lt;/code&gt; appropriately formatted based on the current locale (e.g., in the en_US locale it will have &quot;.&quot; as the decimal separator and include &quot;,&quot; group separators after each third digit).</source>
          <target state="translated">現在のロケールに基づいて適切にフォーマットされた &lt;code&gt;fractionSize&lt;/code&gt; に丸められた数値（たとえば、en_USロケールでは、小数点として「。」があり、3番目の各桁の後に「、」グループ区切りが含まれます）。</target>
        </trans-unit>
        <trans-unit id="bcd00e774ff736ecae6ca4c95d8c126b66654ba9" translate="yes" xml:space="preserve">
          <source>Number to format.</source>
          <target state="translated">番号をフォーマットに</target>
        </trans-unit>
        <trans-unit id="2883f191bc5ebfdc16c0813eff659b35363ea69b" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="translated">Object</target>
        </trans-unit>
        <trans-unit id="5d0d0d8ab6d5d3a672af3a8d509722442303836e" translate="yes" xml:space="preserve">
          <source>Object components in ng</source>
          <target state="translated">ngのオブジェクトコンポーネント</target>
        </trans-unit>
        <trans-unit id="e11c5730b47cb2ae0f3be1f4242cef69f0b5793c" translate="yes" xml:space="preserve">
          <source>Object components in ngMock</source>
          <target state="translated">ngMock のオブジェクトコンポーネント</target>
        </trans-unit>
        <trans-unit id="0c7088859ca13e9dfdbb54c021c04f3e6cd0c7cb" translate="yes" xml:space="preserve">
          <source>Object containing default options to pass when setting cookies.</source>
          <target state="translated">クッキーを設定する際に渡すデフォルトのオプションを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="995d78c863aed54dbb876e5ea4c402cae1dd9572" translate="yes" xml:space="preserve">
          <source>Object containing default options used when creating &lt;code&gt;$resource&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;$resource&lt;/code&gt; インスタンスの作成時に使用されるデフォルトのオプションを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="657930111284b6f69526339fc342bb6150cc6a1b" translate="yes" xml:space="preserve">
          <source>Object containing default values for all &lt;a href=&quot;../service/%24http&quot;&gt;$http&lt;/a&gt; requests.</source>
          <target state="translated">すべての&lt;a href=&quot;../service/%24http&quot;&gt;$ http&lt;/a&gt;リクエストのデフォルト値を含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="759fd0d572c4011472fed205eac43611faa1366f" translate="yes" xml:space="preserve">
          <source>Object describing the request to be made and how it should be processed. The object has following properties:</source>
          <target state="translated">行われるリクエストとその処理方法を記述したオブジェクト。オブジェクトは以下のプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="49310707de14d25a2b81072b3f31cead565e8a0a" translate="yes" xml:space="preserve">
          <source>Object or value to compare.</source>
          <target state="translated">比較するオブジェクトまたは値。</target>
        </trans-unit>
        <trans-unit id="dd24b197b8c1db2163e1ac796ff37f51ee66294a" translate="yes" xml:space="preserve">
          <source>Object properties:</source>
          <target state="translated">オブジェクトのプロパティです。</target>
        </trans-unit>
        <trans-unit id="661911c1c58762c1a751a12e82b587ad0734d14f" translate="yes" xml:space="preserve">
          <source>Object to become context (&lt;code&gt;this&lt;/code&gt;) for the iterator function.</source>
          <target state="translated">反復関数のコンテキスト（ &lt;code&gt;this&lt;/code&gt; ）になるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="28a82450c0a24a36b7195543cddb1b53d9eb4603" translate="yes" xml:space="preserve">
          <source>Object to iterate over.</source>
          <target state="translated">反復処理を行うオブジェクト。</target>
        </trans-unit>
        <trans-unit id="fa827302c104f3c03bab5c1912db8174154c1c51" translate="yes" xml:space="preserve">
          <source>Object with all route configuration Objects as its properties.</source>
          <target state="translated">すべてのルート構成オブジェクトをプロパティとして持つオブジェクト。</target>
        </trans-unit>
        <trans-unit id="19569f4887493f227cb304cc348f8b757202b03d" translate="yes" xml:space="preserve">
          <source>Observes an interpolated attribute.</source>
          <target state="translated">補間された属性を観測します。</target>
        </trans-unit>
        <trans-unit id="5d89917fa7619007c94c10f147a56a81bbebfd52" translate="yes" xml:space="preserve">
          <source>Observing &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt;, such as double-curly expressions &lt;code&gt;{{expression}}&lt;/code&gt;, register listeners using the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch()&lt;/a&gt; method. This type of directive needs to be notified whenever the expression changes so that it can update the view.</source>
          <target state="translated">二重カーリー式 &lt;code&gt;{{expression}}&lt;/code&gt; などの監視&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;ディレクティブ&lt;/a&gt;は、&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$ watch（）&lt;/a&gt;メソッドを使用してリスナーを登録します。このタイプのディレクティブは、ビューが更新されるように、式が変更されるたびに通知を受ける必要があります。</target>
        </trans-unit>
        <trans-unit id="fa8994e94ae63340255decacb1a40a4119cd94c0" translate="yes" xml:space="preserve">
          <source>Occurs</source>
          <target state="translated">Occurs</target>
        </trans-unit>
        <trans-unit id="942e0589c947be65474a002d509b097c5723a042" translate="yes" xml:space="preserve">
          <source>Official AngularJS Tutorial</source>
          <target state="translated">AngularJS公式チュートリアル</target>
        </trans-unit>
        <trans-unit id="5211024b2c932653139044bde2ef35e801bc766a" translate="yes" xml:space="preserve">
          <source>Official Communications</source>
          <target state="translated">公式通信</target>
        </trans-unit>
        <trans-unit id="3dbb82784f4ceea929a606b795d9c5a9fff56ccd" translate="yes" xml:space="preserve">
          <source>Official announcements, news and releases are posted to our blog, G+ and Twitter:</source>
          <target state="translated">公式発表、ニュース、リリースはブログ、G+、Twitterに掲載しています。</target>
        </trans-unit>
        <trans-unit id="aee2a58d9d00b28c3d6357134f216912f4105e7f" translate="yes" xml:space="preserve">
          <source>Offset of the &lt;em&gt;desired&lt;/em&gt; timezone in hours (fractions will be honored)</source>
          <target state="translated">時間単位での&lt;em&gt;希望の&lt;/em&gt;タイムゾーンのオフセット（端数は順守されます）</target>
        </trans-unit>
        <trans-unit id="45919291790453a621a3d3ca6cb3d2791302bb6c" translate="yes" xml:space="preserve">
          <source>Offset to deduct from the total number.</source>
          <target state="translated">合計数から差し引くためのオフセット。</target>
        </trans-unit>
        <trans-unit id="3397619639d18ef70105382abc79e8b41ababef1" translate="yes" xml:space="preserve">
          <source>Often it's desirable to pass data from the isolate scope via an expression to the parent scope, this can be done by passing a map of local variable names and values into the expression wrapper function. For example, the &lt;code&gt;hideDialog&lt;/code&gt; function takes a message to display when the dialog is hidden. This is specified in the directive by calling &lt;code&gt;close({message: 'closing for now'})&lt;/code&gt;. Then the local variable &lt;code&gt;message&lt;/code&gt; will be available within the &lt;code&gt;on-close&lt;/code&gt; expression.</source>
          <target state="translated">分離スコープから式を介して親スコープにデータを渡すことが望ましい場合がよくあります。これは、ローカル変数名と値のマップを式ラッパー関数に渡すことで実行できます。たとえば、 &lt;code&gt;hideDialog&lt;/code&gt; 関数は、ダイアログが非表示のときに表示するメッセージを受け取ります。これは、 &lt;code&gt;close({message: 'closing for now'})&lt;/code&gt; 呼び出すことにより、ディレクティブで指定されます。次に、ローカル変数 &lt;code&gt;message&lt;/code&gt; が &lt;code&gt;on-close&lt;/code&gt; 式内で使用可能になります。</target>
        </trans-unit>
        <trans-unit id="fc10f6b83c02595fc0e689a6e9a864045ddab25f" translate="yes" xml:space="preserve">
          <source>Often services have no configuration options and there is no need to add methods to the service provider. The provider will be no more than a constructor function with a &lt;code&gt;$get&lt;/code&gt; property. For these cases the &lt;a href=&quot;%24provide&quot;&gt;$provide&lt;/a&gt; service has additional helper methods to register services without specifying a provider.</source>
          <target state="translated">多くの場合、サービスには構成オプションがなく、サービスプロバイダーにメソッドを追加する必要はありません。プロバイダーは、 &lt;code&gt;$get&lt;/code&gt; プロパティを持つコンストラクター関数にすぎません。これらの場合、&lt;a href=&quot;%24provide&quot;&gt;$ provide&lt;/a&gt;サービスには、プロバイダーを指定せずにサービスを登録するための追加のヘルパーメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="5ea29abb9e633dfb97ed5c1299fc4f4bd33508a9" translate="yes" xml:space="preserve">
          <source>Often, we would like to inject a reference once, in a &lt;code&gt;beforeEach()&lt;/code&gt; block and reuse this in multiple &lt;code&gt;it()&lt;/code&gt; clauses. To be able to do this we must assign the reference to a variable that is declared in the scope of the &lt;code&gt;describe()&lt;/code&gt; block. Since we would, most likely, want the variable to have the same name of the reference we have a problem, since the parameter to the &lt;code&gt;inject()&lt;/code&gt; function would hide the outer variable.</source>
          <target state="translated">多くの場合、参照を &lt;code&gt;beforeEach()&lt;/code&gt; ブロックに1回挿入し、これを複数の &lt;code&gt;it()&lt;/code&gt; 句で再利用します。これを行うには、 &lt;code&gt;describe()&lt;/code&gt; ブロックのスコープで宣言されている変数に参照を割り当てる必要があります。 &lt;code&gt;inject()&lt;/code&gt; 関数のパラメーターが外部変数を非表示にするため、ほとんどの場合、変数に参照と同じ名前を付ける必要があるため、問題があります。</target>
        </trans-unit>
        <trans-unit id="55cc916839b43a01a85adc73fa724a6b9294ff71" translate="yes" xml:space="preserve">
          <source>Older browsers will redirect regular URLs to hashbang URLs.</source>
          <target state="translated">古いブラウザでは、通常のURLはハッシュバングURLにリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="730fe0b7474bfd48c7cbf76d43e5e9fcaa819084" translate="yes" xml:space="preserve">
          <source>Omitted or undefined options will leave the corresponding configuration values unchanged.</source>
          <target state="translated">オプションを省略した場合や未定義の場合は、対応する構成値は変更されません。</target>
        </trans-unit>
        <trans-unit id="3d94300e6072360828bff66e63d1c6eb5a9039e5" translate="yes" xml:space="preserve">
          <source>On failure, the promise is rejected with the &lt;a href=&quot;../../ng/service/%24http&quot;&gt;http response&lt;/a&gt; object.</source>
          <target state="translated">失敗すると、&lt;a href=&quot;../../ng/service/%24http&quot;&gt;http応答&lt;/a&gt;オブジェクトでpromiseが拒否されます。</target>
        </trans-unit>
        <trans-unit id="3150ca64068eaff88aaa9f32a3f98bf979b1b891" translate="yes" xml:space="preserve">
          <source>On success, the promise is resolved with the same resource instance or collection object, updated with data from server. This makes it easy to use in the &lt;a href=&quot;../../ngroute/provider/%24routeprovider&quot;&gt;&lt;code&gt;resolve&lt;/code&gt; section of &lt;code&gt;$routeProvider.when()&lt;/code&gt;&lt;/a&gt; to defer view rendering until the resource(s) are loaded.</source>
          <target state="translated">成功すると、promiseは同じリソースインスタンスまたはコレクションオブジェクトで解決され、サーバーのデータで更新されます。これにより&lt;a href=&quot;../../ngroute/provider/%24routeprovider&quot;&gt;、&lt;/a&gt; &lt;code&gt;$routeProvider.when()&lt;/code&gt; &lt;code&gt;resolve&lt;/code&gt; セクションでリソースをロードするまでビューのレンダリングを延期するのが簡単になります。</target>
        </trans-unit>
        <trans-unit id="03e6a8fff8ee4ceb9f5d6a1cede49118cf8c5e9d" translate="yes" xml:space="preserve">
          <source>On this page, you will find a list of official AngularJS resources on various topics.</source>
          <target state="translated">このページでは、様々なトピックに関する公式のAngularJSリソースの一覧を見ることができます。</target>
        </trans-unit>
        <trans-unit id="7f0b69c7df5f5044072412f7dcb0c295c8f63c40" translate="yes" xml:space="preserve">
          <source>On to more complex examples!</source>
          <target state="translated">もっと複雑な例を見てみましょう!</target>
        </trans-unit>
        <trans-unit id="a20c241950bf7f4ec7065c9cedf5f5b4df396af2" translate="yes" xml:space="preserve">
          <source>Once again, &lt;code&gt;$animateCss&lt;/code&gt; is designed to be used inside of a registered JavaScript animation that is powered by ngAnimate. It is possible to use &lt;code&gt;$animateCss&lt;/code&gt; directly inside of a directive, however, any automatic control over cancelling animations and/or preventing animations from being run on child elements will not be handled by AngularJS. For this to work as expected, please use &lt;code&gt;$animate&lt;/code&gt; to trigger the animation and then setup a JavaScript animation that injects &lt;code&gt;$animateCss&lt;/code&gt; to trigger the CSS animation.</source>
          <target state="translated">繰り返しになりますが、 &lt;code&gt;$animateCss&lt;/code&gt; は、ngAnimateを使用して登録されたJavaScriptアニメーション内で使用するように設計されています。 &lt;code&gt;$animateCss&lt;/code&gt; をディレクティブ内で直接使用することは可能ですが、アニメーションのキャンセルおよび/またはアニメーションが子要素で実行されるのを防止する自動制御は、AngularJSでは処理されません。これが期待どおりに機能するようにするには、 &lt;code&gt;$animate&lt;/code&gt; を使用して &lt;code&gt;$animateCss&lt;/code&gt; をトリガーしてから、$ animateCssを挿入してCSS アニメーションをトリガーするJavaScriptアニメーションを設定してください。</target>
        </trans-unit>
        <trans-unit id="832079f71980ce1bf7e842ef4695d9a39eb9d0c3" translate="yes" xml:space="preserve">
          <source>Once all directives matching a DOM element have been identified, the compiler sorts the directives by their &lt;code&gt;priority&lt;/code&gt;.</source>
          <target state="translated">DOM要素に一致するすべてのディレクティブが特定されると、コンパイラーはディレクティブを &lt;code&gt;priority&lt;/code&gt; ソートします。</target>
        </trans-unit>
        <trans-unit id="a5f730f0b3ca3a229d8d79e42506be6dbbf141ef" translate="yes" xml:space="preserve">
          <source>Once the &lt;code&gt;$location&lt;/code&gt; service is instantiated, you can interact with it via jQuery-style getter and setter methods that allow you to get or change the current URL in the browser.</source>
          <target state="translated">いったん &lt;code&gt;$location&lt;/code&gt; サービスがインスタンス化され、あなたがブラウザで現在のURLを取得したり、変更することができるようにjQueryスタイルのgetterメソッドとsetterメソッド経由で相互作用することができます。</target>
        </trans-unit>
        <trans-unit id="a6e75b43c6e8a6eaaaf021b30cd3620a33cd3961" translate="yes" xml:space="preserve">
          <source>Once the AngularJS &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; loop finishes, the execution leaves the AngularJS and JavaScript context. This is followed by the browser re-rendering the DOM to reflect any changes.</source>
          <target state="translated">AngularJS &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;ループが終了すると、実行はAngularJSとJavaScriptコンテキストを離れます。これに続いて、ブラウザがDOMを再レンダリングして変更を反映します。</target>
        </trans-unit>
        <trans-unit id="e021990af4a5931d2b41ef6a3af610ec4c360b79" translate="yes" xml:space="preserve">
          <source>Once the Controller has been attached to the DOM, the &lt;code&gt;double&lt;/code&gt; method can be invoked in an AngularJS expression in the template:</source>
          <target state="translated">コントローラーがDOMにアタッチされると、テンプレートのAngularJS式で &lt;code&gt;double&lt;/code&gt; メソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="539e0ec3e60f15ed5b3ffd14cdc4bf07b3d5f281" translate="yes" xml:space="preserve">
          <source>Once the callback executes, the browser leaves the JavaScript context and re-renders the view based on DOM changes.</source>
          <target state="translated">コールバックが実行されると、ブラウザは JavaScript のコンテキストを離れ、DOM の変更に基づいてビューを再レンダリングします。</target>
        </trans-unit>
        <trans-unit id="c42a629e99e7a6cb394fb6dd8cda3b8c140669fe" translate="yes" xml:space="preserve">
          <source>Once the configuration phase is over, interaction with providers is disallowed and the process of creating services starts. We call this part of the application life-cycle the run phase.</source>
          <target state="translated">設定フェーズが終わると、プロバイダとのやりとりは禁止され、サービスを作成するプロセスが始まります。アプリケーションのライフサイクルのこの部分をランフェーズと呼んでいます。</target>
        </trans-unit>
        <trans-unit id="4f503d8cfa1aefbfebbf220fc051e38e94c15149" translate="yes" xml:space="preserve">
          <source>Once this threshold is exceeded, either the horizontal or vertical delta is greater.</source>
          <target state="translated">このしきい値を超えると、水平または垂直方向のデルタのどちらかが大きくなります。</target>
        </trans-unit>
        <trans-unit id="ee5e5d4a8e33c0f18fe55ea3714b42beb7574f24" translate="yes" xml:space="preserve">
          <source>One advantage of this approach is that there's no array of names to keep in sync with the function parameters. You can also freely reorder dependencies.</source>
          <target state="translated">このアプローチの利点の一つは、関数のパラメータと同期させるための名前の配列がないことです。また、依存関係を自由に並べ替えることもできます。</target>
        </trans-unit>
        <trans-unit id="e81236156cec40b8f929730878ed25e4592cd246" translate="yes" xml:space="preserve">
          <source>One caveat with this combination of CSS and &lt;code&gt;aria-hidden&lt;/code&gt;: you must also remove links and other interactive child elements from the tab order using &lt;code&gt;tabIndex=&amp;ldquo;-1&amp;rdquo;&lt;/code&gt; on each control. This ensures screen reader users won't accidentally focus on &quot;mystery elements&quot;. Managing tab index on every child control can be complex and affect performance, so it&amp;rsquo;s best to just stick with the default &lt;code&gt;display: none&lt;/code&gt; CSS. See the &lt;a href=&quot;http://www.w3.org/TR/aria-in-html/#fourth-rule-of-aria-use&quot;&gt;fourth rule of ARIA use&lt;/a&gt;.</source>
          <target state="translated">このCSSと &lt;code&gt;aria-hidden&lt;/code&gt; の組み合わせに関する1つの注意点：各コントロールで &lt;code&gt;tabIndex=&amp;ldquo;-1&amp;rdquo;&lt;/code&gt; を使用して、リンクやその他のインタラクティブな子要素をタブオーダーから削除する必要があります。これにより、スクリーンリーダーのユーザーが誤って「ミステリー要素」に集中することがなくなります。すべての子コントロールのタブインデックスの管理は複雑でパフォーマンスに影響を与える可能性があるため、デフォルトの &lt;code&gt;display: none&lt;/code&gt; CSSを使用しないことをお勧めします。&lt;a href=&quot;http://www.w3.org/TR/aria-in-html/#fourth-rule-of-aria-use&quot;&gt;ARIA使用の4番目のルールを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4801ac26d4a643695f54dd7f69d290e1fed765ee" translate="yes" xml:space="preserve">
          <source>One example of such a context is rendering arbitrary content via the &lt;a href=&quot;../api/ng/directive/ngbindhtml&quot;&gt;&lt;code&gt;ngBindHtml&lt;/code&gt;&lt;/a&gt; directive. If the content is provided by a user there is a chance of Cross Site Scripting (XSS) attacks. The &lt;a href=&quot;../api/ng/directive/ngbindhtml&quot;&gt;&lt;code&gt;ngBindHtml&lt;/code&gt;&lt;/a&gt; directive will not render content that is not marked as safe by &lt;a href=&quot;../api/ng/service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;../api/ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; module can be used to clean such user provided content and mark the content as safe.</source>
          <target state="translated">そのようなコンテキストの一例は、&lt;a href=&quot;../api/ng/directive/ngbindhtml&quot;&gt; &lt;code&gt;ngBindHtml&lt;/code&gt; &lt;/a&gt;ディレクティブを介して任意のコンテンツをレンダリングすることです。コンテンツがユーザーによって提供された場合、クロスサイトスクリプティング（XSS）攻撃の可能性があります。&lt;a href=&quot;../api/ng/directive/ngbindhtml&quot;&gt; &lt;code&gt;ngBindHtml&lt;/code&gt; の&lt;/a&gt;ディレクティブは、によって安全であるとマークされていないコンテンツ表示されません&lt;a href=&quot;../api/ng/service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;../api/ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; の&lt;/a&gt;モジュールは、クリーン、ユーザ提供内容に使用され、安全であるとコンテンツをマークすることができます。</target>
        </trans-unit>
        <trans-unit id="8da34b97a8ac7368cf4a952a5049271759ff499d" translate="yes" xml:space="preserve">
          <source>One issue occurs if you want to preselect an option. For example, if you set the model to an object that is equal to an object in your collection, &lt;code&gt;ngOptions&lt;/code&gt; won't be able to set the selection, because the objects are not identical. So by default, you should always reference the item in your collection for preselections, e.g.: &lt;code&gt;$scope.selected = $scope.collection[3]&lt;/code&gt;.</source>
          <target state="translated">オプションを事前に選択する場合、1つの問題が発生します。たとえば、モデルをコレクション内のオブジェクトと等しいオブジェクトに設定した場合、オブジェクトが同一でないため、 &lt;code&gt;ngOptions&lt;/code&gt; は選択を設定できません。したがって、デフォルトでは、事前選択のために常にコレクション内のアイテムを参照する必要があります。例： &lt;code&gt;$scope.selected = $scope.collection[3]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03cf224c49b28630f423eb00b170a96952f63750" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;template&lt;/code&gt; or &lt;code&gt;templateUrl&lt;/code&gt; is required.</source>
          <target state="translated">一つ &lt;code&gt;template&lt;/code&gt; や &lt;code&gt;templateUrl&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="1e0b15fa92a730eefc11a4f041fe211c93f8a77f" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;templateUrl&lt;/code&gt; or &lt;code&gt;template&lt;/code&gt; is required.</source>
          <target state="translated">一つ &lt;code&gt;templateUrl&lt;/code&gt; または &lt;code&gt;template&lt;/code&gt; 必要です。</target>
        </trans-unit>
        <trans-unit id="854c677d0ec17d170fc8ceb1283231687845a9df" translate="yes" xml:space="preserve">
          <source>One of the most common use cases for directives is to create reusable components.</source>
          <target state="translated">ディレクティブの最も一般的なユースケースの一つは、再利用可能なコンポーネントを作成することです。</target>
        </trans-unit>
        <trans-unit id="0a1e704a493b53f759675b1a40b45e4e787bc094" translate="yes" xml:space="preserve">
          <source>One-time binding</source>
          <target state="translated">ワンタイムバインディング</target>
        </trans-unit>
        <trans-unit id="d835907bfc4fb4d1c778ab9ea9cff8835777aba5" translate="yes" xml:space="preserve">
          <source>One-time binding expressions will retain the value of the expression at the end of the digest cycle as long as that value is not undefined. If the value of the expression is set within the digest loop and later, within the same digest loop, it is set to undefined, then the expression is not fulfilled and will remain watched.</source>
          <target state="translated">一回限りのバインディング式は、その値が未定義でない限り、ダイジェストサイクルの終了時に式の値を保持します。式の値がダイジェストループ内で設定され、その後、同じダイジェストループ内で未定義に設定された場合、その式は満たされず、監視されたままになります。</target>
        </trans-unit>
        <trans-unit id="96499287e9d0872201af20706453570303a19464" translate="yes" xml:space="preserve">
          <source>One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings back to the parent. However, it does not make this completely impossible.</source>
          <target state="translated">一方向バインディングは、分離されたスコープバインディングへの変更を親に伝搬させる予定がない場合に便利です。しかし、これを完全に不可能にするわけではありません。</target>
        </trans-unit>
        <trans-unit id="dccdcd12500ea529350f72fe2d3b19576485f9d7" translate="yes" xml:space="preserve">
          <source>Only GET and JSONP requests are cached.</source>
          <target state="translated">GETリクエストとJSONPリクエストのみキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="cdbf524cafe4d97e9aa889d4e8172073d5ad8692" translate="yes" xml:space="preserve">
          <source>Only enumerable properties are taken into account. Non-enumerable properties (both on &lt;code&gt;source&lt;/code&gt; and on &lt;code&gt;destination&lt;/code&gt;) will be ignored.</source>
          <target state="translated">列挙可能なプロパティのみが考慮されます。列挙できないプロパティ（ &lt;code&gt;source&lt;/code&gt; と &lt;code&gt;destination&lt;/code&gt; の両方）は無視されます。</target>
        </trans-unit>
        <trans-unit id="fd014ff097e63e654d665440447b5e12e4b2ada5" translate="yes" xml:space="preserve">
          <source>Only whitelist origins that you have control over and make sure you understand the implications of doing so.</source>
          <target state="translated">自分がコントロールできるオリジンだけをホワイトリスト化して、その意味合いを理解しているか確認してください。</target>
        </trans-unit>
        <trans-unit id="a8bfc2e5f51edb5b85fb55866f0e43ef5e595160" translate="yes" xml:space="preserve">
          <source>Opening a regular URL in a legacy browser -&amp;gt; redirects to a hashbang URL</source>
          <target state="translated">レガシーブラウザで通常のURLを開く-&amp;gt;ハッシュバングURLにリダイレクトする</target>
        </trans-unit>
        <trans-unit id="eac6c8960165a7f26749c618d7083ac4d241844c" translate="yes" xml:space="preserve">
          <source>Opening hashbang URL in a modern browser -&amp;gt; rewrites to a regular URL</source>
          <target state="translated">最新のブラウザーでハッシュバングURLを開く-&amp;gt;通常のURLに書き換える</target>
        </trans-unit>
        <trans-unit id="4cb67181c995794bf3233189f17b34d6d6217d98" translate="yes" xml:space="preserve">
          <source>Optional arguments to be prebound to the &lt;code&gt;fn&lt;/code&gt; function call.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; 関数呼び出しに事前バインドされるオプションの引数。</target>
        </trans-unit>
        <trans-unit id="ac0d0c08de325f31e275247f3679a58b231c7aae" translate="yes" xml:space="preserve">
          <source>Optional configuration function for the module. Same as &lt;a href=&quot;../type/angular.module#config.html&quot;&gt;Module#config()&lt;/a&gt;.</source>
          <target state="translated">モジュールのオプション設定機能。&lt;a href=&quot;../type/angular.module#config.html&quot;&gt;Module＃config（）と&lt;/a&gt;同じです。</target>
        </trans-unit>
        <trans-unit id="b0e8d88ea45891039fc896a3cf76fcc8a6285b7f" translate="yes" xml:space="preserve">
          <source>Optional configuration object. See &lt;a href=&quot;%24http#%24http-arguments.html&quot;&gt;&lt;code&gt;$http()&lt;/code&gt; arguments&lt;/a&gt;.</source>
          <target state="translated">オプションの構成オブジェクト。&lt;a href=&quot;%24http#%24http-arguments.html&quot;&gt; &lt;code&gt;$http()&lt;/code&gt; 引数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ef8683e6e87ff851919c02dfa80a3465f8201585" translate="yes" xml:space="preserve">
          <source>Optional event type. If none is specified, the function tries to determine the right event type for the element, e.g. &lt;code&gt;change&lt;/code&gt; for &lt;code&gt;input[text]&lt;/code&gt;.</source>
          <target state="translated">オプションのイベントタイプ。何も指定されていない場合、関数は要素の正しいイベントタイプを決定しようとします（たとえば、 &lt;code&gt;input[text]&lt;/code&gt; &lt;code&gt;change&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d9e2a88dac526935cb244eb3725881ffa83069f2" translate="yes" xml:space="preserve">
          <source>Optional information about the context in which the error was thrown.</source>
          <target state="translated">エラーがスローされたコンテキストに関するオプション情報。</target>
        </trans-unit>
        <trans-unit id="1a8192981f2869d35df047f536371348437dfb99" translate="yes" xml:space="preserve">
          <source>Optional object. If preset then any argument names are read from this object first, before the &lt;code&gt;$injector&lt;/code&gt; is consulted.</source>
          <target state="translated">オプションのオブジェクト。事前設定されている場合、 &lt;code&gt;$injector&lt;/code&gt; が調べられる前に、引数名がこのオブジェクトから最初に読み取られます。</target>
        </trans-unit>
        <trans-unit id="5308b40f28c97e7121b60297dbc6d959146a267f" translate="yes" xml:space="preserve">
          <source>Optional one or more arguments which will be passed onto the event listeners.</source>
          <target state="translated">イベントリスナーに渡される1つ以上の引数。</target>
        </trans-unit>
        <trans-unit id="ffb1a7ca3375dfcc6ea76b0ae3ce4b9bb97b4432" translate="yes" xml:space="preserve">
          <source>Optionally, a single hard-coded &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; element, with the value set to an empty string, can be nested into the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element. This element will then represent the &lt;code&gt;null&lt;/code&gt; or &quot;not selected&quot; option. See example below for demonstration.</source>
          <target state="translated">オプションで、値が空の文字列に設定された単一のハードコードされた &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 要素を &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 要素にネストできます。この要素は、 &lt;code&gt;null&lt;/code&gt; または「選択されていない」オプションを表します。デモについては、以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="be30a36044b515fd6383450db5f35c6cd47f0ba2" translate="yes" xml:space="preserve">
          <source>Optionally, you can also pass a &lt;code&gt;delay&lt;/code&gt; argument to only flush tasks that are scheduled to be executed within &lt;code&gt;delay&lt;/code&gt; milliseconds. Currently, &lt;code&gt;delay&lt;/code&gt; only applies to timeouts, since all other tasks have a delay of 0 (i.e. they are scheduled to be executed as soon as possible, but still asynchronously).</source>
          <target state="translated">オプションで、 &lt;code&gt;delay&lt;/code&gt; 引数を渡して、 &lt;code&gt;delay&lt;/code&gt; ミリ秒以内に実行されるようにスケジュールされているタスクのみをフラッシュすることもできます。現在、 &lt;code&gt;delay&lt;/code&gt; はタイムアウトにのみ適用されます。これは、他のすべてのタスクの遅延が0であるためです（つまり、できるだけ早く実行されるようにスケジュールされていますが、非同期的に実行されます）。</target>
        </trans-unit>
        <trans-unit id="4b5f9957c039daa83cf25452707710c1e43b965d" translate="yes" xml:space="preserve">
          <source>Options object that specifies the cache behavior. Properties:</source>
          <target state="translated">キャッシュの動作を指定するオプションオブジェクト。プロパティを指定します。</target>
        </trans-unit>
        <trans-unit id="0dfe73319c3612f8a3b2d0b40ebbd05b380be0ec" translate="yes" xml:space="preserve">
          <source>Options object. See &lt;a href=&quot;../provider/%24cookiesprovider#defaults.html&quot;&gt;$cookiesProvider.defaults&lt;/a&gt;</source>
          <target state="translated">オプションオブジェクト。&lt;a href=&quot;../provider/%24cookiesprovider#defaults.html&quot;&gt;$ cookiesProvider.defaultsを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="b1a0580f34c8e279c5382e2d17c2d33fd81d807e" translate="yes" xml:space="preserve">
          <source>Or you can even overwrite the whole &lt;code&gt;actions&lt;/code&gt; list and specify your own:</source>
          <target state="translated">または、 &lt;code&gt;actions&lt;/code&gt; リスト全体を上書きして、独自のアクションリストを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="53ea91d4f8d828842a74887526a654e8ed22c0de" translate="yes" xml:space="preserve">
          <source>Order of requests matters</source>
          <target state="translated">依頼の順番に関する事項</target>
        </trans-unit>
        <trans-unit id="545aec36915e5edaf380fe6995274a74ca310fc5" translate="yes" xml:space="preserve">
          <source>Ordering a table with ngRepeat</source>
          <target state="translated">ngRepeatでテーブルを注文する</target>
        </trans-unit>
        <trans-unit id="b328f238cd54c5675a77847bfa732f0014d578b3" translate="yes" xml:space="preserve">
          <source>Ordering the specified &lt;code&gt;collection&lt;/code&gt; happens in two phases:</source>
          <target state="translated">指定された &lt;code&gt;collection&lt;/code&gt; 順序付けは、2つのフェーズで行われます。</target>
        </trans-unit>
        <trans-unit id="ab286f64bf8ad2bdaf9ba29734918078d2434ff7" translate="yes" xml:space="preserve">
          <source>Ordinarily, we would expect that &lt;code&gt;{{name}}&lt;/code&gt; would be &lt;code&gt;Jeff&lt;/code&gt;. However, we see in this example that the &lt;code&gt;{{name}}&lt;/code&gt; binding is still &lt;code&gt;Tobias&lt;/code&gt;.</source>
          <target state="translated">通常、 &lt;code&gt;{{name}}&lt;/code&gt; は &lt;code&gt;Jeff&lt;/code&gt; になると予想されます。ただし、この例では、 &lt;code&gt;{{name}}&lt;/code&gt; バインディングがまだ &lt;code&gt;Tobias&lt;/code&gt; であることがわかります。</target>
        </trans-unit>
        <trans-unit id="1167c4f1730b003f23191dfd48807c264f48a17b" translate="yes" xml:space="preserve">
          <source>Other Features</source>
          <target state="translated">その他の特徴</target>
        </trans-unit>
        <trans-unit id="456d2677e518e26ef0d24a4e5e0c50a00c1e8bbd" translate="yes" xml:space="preserve">
          <source>Other Languages</source>
          <target state="translated">その他の言語</target>
        </trans-unit>
        <trans-unit id="020a1308bcbd2b8d869bb1b5c21560f23a1fa146" translate="yes" xml:space="preserve">
          <source>Other attributes may also not work as expected when they contain interpolation markup, and can be used with &lt;code&gt;ngAttr&lt;/code&gt; instead. The following is a list of known problematic attributes:</source>
          <target state="translated">他の属性も、補間マークアップが含まれていると期待どおりに &lt;code&gt;ngAttr&lt;/code&gt; ず、代わりにngAttrで使用できます。以下は、既知の問題のある属性のリストです。</target>
        </trans-unit>
        <trans-unit id="e4dd7ab1c0e39f0f88a1797f64ef4a8003416e45" translate="yes" xml:space="preserve">
          <source>Otherwise whitespace around the delimiter is ignored when splitting (although it is respected when joining the list items back together) and whitespace around each list item is stripped before it is added to the model.</source>
          <target state="translated">それ以外の場合、デリミタの周りの空白は分割時に無視され(リスト項目を結合する際には尊重されますが)、各リスト項目の周りの空白はモデルに追加される前に取り除かれます。</target>
        </trans-unit>
        <trans-unit id="a0675534b64e196386b94e2804a59bd1bc23fa8e" translate="yes" xml:space="preserve">
          <source>Otherwise, return:</source>
          <target state="translated">そうでなければ戻ります。</target>
        </trans-unit>
        <trans-unit id="072eb9bf03eeb09cbe67d59dcba2963501dc97e5" translate="yes" xml:space="preserve">
          <source>Our &lt;code&gt;myCustomer&lt;/code&gt; directive above is great, but it has a fatal flaw. We can only use it once within a given scope.</source>
          <target state="translated">私たちの &lt;code&gt;myCustomer&lt;/code&gt; ディレクティブは、上記素晴らしいですが、それは致命的な欠陥を持っています。特定のスコープ内で1回だけ使用できます。</target>
        </trans-unit>
        <trans-unit id="558209072aafaacde0c7cdb5a66cdfe66c0d2c5d" translate="yes" xml:space="preserve">
          <source>Outputs are realized with &lt;code&gt;&amp;amp;&lt;/code&gt; bindings, which function as callbacks to component events.</source>
          <target state="translated">出力は、コンポーネントイベントへのコールバックとして機能する &lt;code&gt;&amp;amp;&lt;/code&gt; バインディングで実現されます。</target>
        </trans-unit>
        <trans-unit id="22ba9ea1494be6e8782c0e21dbbf76a0b41e8a62" translate="yes" xml:space="preserve">
          <source>Override the current model options settings programmatically.</source>
          <target state="translated">現在のモデルオプション設定をプログラムで上書きします。</target>
        </trans-unit>
        <trans-unit id="ef041aeb92c07c1a85fa7fdac09f3f7219358b54" translate="yes" xml:space="preserve">
          <source>Override the property name to use when attaching the controller to the scope.</source>
          <target state="translated">コントローラをスコープにアタッチする際に使用するプロパティ名をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="22b14e1048bf2a3d5b605204778ea44f9663ce36" translate="yes" xml:space="preserve">
          <source>Overriding .ng-hide</source>
          <target state="translated">.ng-hideをオーバーライドする</target>
        </trans-unit>
        <trans-unit id="9a7fbfe01d220ff7f0962d309017a2ffc384f7fe" translate="yes" xml:space="preserve">
          <source>Overriding immediate updates</source>
          <target state="translated">即時更新を上書きする</target>
        </trans-unit>
        <trans-unit id="fa09aea495028381f0827010d76af2aac843fe48" translate="yes" xml:space="preserve">
          <source>Overriding the Default Transformations Per Request</source>
          <target state="translated">リクエストごとのデフォルトの変換を上書きする</target>
        </trans-unit>
        <trans-unit id="0efc2e6be4c23b9a513d7ce0dcff8ed80e8912e7" translate="yes" xml:space="preserve">
          <source>Overview</source>
          <target state="translated">Overview</target>
        </trans-unit>
        <trans-unit id="b4524ad64470cfefa0e6ef5ccaabb2ecf125384c" translate="yes" xml:space="preserve">
          <source>Page reload navigation</source>
          <target state="translated">ページのリロードナビゲーション</target>
        </trans-unit>
        <trans-unit id="0f332eeefd007bb0043ccb46738196508c6a602b" translate="yes" xml:space="preserve">
          <source>Param</source>
          <target state="translated">Param</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="6cf3b6abb1b4f5ccecfcf57f0c3af07ef7fb83d1" translate="yes" xml:space="preserve">
          <source>Parse all your application element classes.</source>
          <target state="translated">すべてのアプリケーション要素クラスを解析します。</target>
        </trans-unit>
        <trans-unit id="8ca73572c8320134a2008b43c3b43eeb683a50e5" translate="yes" xml:space="preserve">
          <source>Parse all your application html comments.</source>
          <target state="translated">すべてのアプリケーションのhtmlコメントを解析します。</target>
        </trans-unit>
        <trans-unit id="3f4af19a0d34ae188e13ee7ba944ba662612d7e9" translate="yes" xml:space="preserve">
          <source>Parsers are used to sanitize / convert the &lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;$viewValue&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パーサーは&lt;a href=&quot;ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;$viewValue&lt;/code&gt; &lt;/a&gt; /変換するために使用されます。</target>
        </trans-unit>
        <trans-unit id="d7cd56f2a2a3f47830760edfb89946eb7b9e2cd1" translate="yes" xml:space="preserve">
          <source>Pass</source>
          <target state="translated">Pass</target>
        </trans-unit>
        <trans-unit id="3724e4e357a62c0e307b4b1ff0955749ca8faa98" translate="yes" xml:space="preserve">
          <source>Passing an array (&lt;code&gt;[...]&lt;/code&gt;) is equivalent to passing &lt;code&gt;{htmlElements: [...]}&lt;/code&gt;.</source>
          <target state="translated">配列（ &lt;code&gt;[...]&lt;/code&gt; ）を渡すことは、 &lt;code&gt;{htmlElements: [...]}&lt;/code&gt; を渡すことと同じです。</target>
        </trans-unit>
        <trans-unit id="f7ca9f03a097ecb064033e0b20fd57b688e73b06" translate="yes" xml:space="preserve">
          <source>Passing one argument retrieves an existing &lt;a href=&quot;../type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;, whereas passing more than one argument creates a new &lt;a href=&quot;../type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">1つの引数を渡すと、既存の&lt;a href=&quot;../type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; が&lt;/a&gt;取得されますが、複数の引数を渡すと、新しい&lt;a href=&quot;../type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; が&lt;/a&gt;作成されます。</target>
        </trans-unit>
        <trans-unit id="5ee5be4397673c7b0cfcf05f36fb561ca4a2f795" translate="yes" xml:space="preserve">
          <source>Patch the $delegate</source>
          <target state="translated">代議員にパッチを当てる</target>
        </trans-unit>
        <trans-unit id="c24b1eabafb92c695a49765eb3856c47bb2e3c5e" translate="yes" xml:space="preserve">
          <source>Pending tasks scheduled via &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$applyAsync&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ applyAsync&lt;/a&gt;を介してスケジュールされた保留中のタスク。</target>
        </trans-unit>
        <trans-unit id="949f1fe22a6e90a316f8a5355573c25a0073893c" translate="yes" xml:space="preserve">
          <source>Pending tasks scheduled via &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt;. These include tasks scheduled via &lt;code&gt;$evalAsync()&lt;/code&gt; indirectly (such as &lt;a href=&quot;../../ng/service/%24q&quot;&gt;&lt;code&gt;$q&lt;/code&gt;&lt;/a&gt; promises).</source>
          <target state="translated">&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsync&lt;/a&gt;を介してスケジュールされた保留中のタスク。これらには、 &lt;code&gt;$evalAsync()&lt;/code&gt; を介して間接的にスケジュールされたタスク（&lt;a href=&quot;../../ng/service/%24q&quot;&gt; &lt;code&gt;$q&lt;/code&gt; &lt;/a&gt; promiseなど）が含まれます。</target>
        </trans-unit>
        <trans-unit id="37a92dc5c98d97bbf900c4f6991b8aac335f50fc" translate="yes" xml:space="preserve">
          <source>Pending timeouts (via &lt;a href=&quot;%24timeout&quot;&gt;&lt;code&gt;$timeout&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">保留中のタイムアウト（&lt;a href=&quot;%24timeout&quot;&gt; &lt;code&gt;$timeout&lt;/code&gt; &lt;/a&gt;経由）。</target>
        </trans-unit>
        <trans-unit id="c7c922ddec77e6492fd9602470ecd3c278ff489f" translate="yes" xml:space="preserve">
          <source>Performs an inline animation on the element which applies the provided to and from CSS styles to the element. If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take on the provided styles. For example, if a transition animation is set for the given className, then the provided &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; styles will be applied alongside the given transition. If the CSS style provided in &lt;code&gt;from&lt;/code&gt; does not have a corresponding style in &lt;code&gt;to&lt;/code&gt;, the style in &lt;code&gt;from&lt;/code&gt; is applied immediately, and no animation is run. If a JavaScript animation is detected then the provided styles will be given in as function parameters into the &lt;code&gt;animate&lt;/code&gt; method (or as part of the &lt;code&gt;options&lt;/code&gt; parameter):</source>
          <target state="translated">要素にインラインアニメーションを実行し、CSSスタイルとの間で提供されるCSSスタイルを要素に適用します。検出されたCSS遷移、キーフレーム、またはJavaScriptが提供されたclassName値と一致する場合、アニメーションは提供されたスタイルを引き継ぎます。たとえば、トランジションアニメーションが特定のclassNameに設定されている場合、提供さ &lt;code&gt;from&lt;/code&gt; および &lt;code&gt;to&lt;/code&gt; スタイルは、特定のトランジションと一緒に適用されます。で提供CSSスタイル場合 &lt;code&gt;from&lt;/code&gt; 、対応するスタイルを持っていない &lt;code&gt;to&lt;/code&gt; 、中のスタイル &lt;code&gt;from&lt;/code&gt; すぐに適用され、何のアニメーションは実行されません。 JavaScriptアニメーションが検出されると、提供されたスタイルが関数パラメーターとして &lt;code&gt;animate&lt;/code&gt; 渡されます。メソッド（または &lt;code&gt;options&lt;/code&gt; パラメータの一部として）：</target>
        </trans-unit>
        <trans-unit id="0fe8ef331e3e18dd6d6ee2e94ecd618e64625c03" translate="yes" xml:space="preserve">
          <source>Performs both the addition and removal of a CSS classes on an element and (during the process) triggers an animation surrounding the class addition/removal. Much like &lt;code&gt;$animate.addClass&lt;/code&gt; and &lt;code&gt;$animate.removeClass&lt;/code&gt;, &lt;code&gt;setClass&lt;/code&gt; will only evaluate the classes being added/removed once a digest has passed. Note that class-based animations are treated differently compared to structural animations (like enter, move and leave) since the CSS classes may be added/removed at different points depending if CSS or JavaScript animations are used.</source>
          <target state="translated">要素のCSSクラスの追加と削除の両方を実行し、（プロセス中に）クラスの追加/削除を取り巻くアニメーションをトリガーします。多くのように &lt;code&gt;$animate.addClass&lt;/code&gt; と &lt;code&gt;$animate.removeClass&lt;/code&gt; 、 &lt;code&gt;setClass&lt;/code&gt; はダイジェストが経過した後のクラスが追加/削除されるのみを評価します。CSSまたはJavaScriptアニメーションが使用されているかどうかに応じて、CSSクラスが異なるポイントで追加/削除される可能性があるため、クラスベースのアニメーションは、構造アニメーション（入力、移動、終了など）とは異なる方法で処理されます。</target>
        </trans-unit>
        <trans-unit id="fde22c44087196711ccbb71078d1ff22cb70d919" translate="yes" xml:space="preserve">
          <source>Periodic tasks scheduled via &lt;a href=&quot;%24interval&quot;&gt;&lt;code&gt;$interval&lt;/code&gt;&lt;/a&gt; use a different queue and are not flushed by &lt;code&gt;$flushPendingTasks()&lt;/code&gt;. Use &lt;a href=&quot;%24interval#flush.html&quot;&gt;$interval.flush(millis)&lt;/a&gt; instead.</source>
          <target state="translated">&lt;a href=&quot;%24interval&quot;&gt; &lt;code&gt;$interval&lt;/code&gt; &lt;/a&gt;を介してスケジュールされた定期的なタスクは別のキューを使用し、 &lt;code&gt;$flushPendingTasks()&lt;/code&gt; によってフラッシュされません。代わりに&lt;a href=&quot;%24interval#flush.html&quot;&gt;$ interval.flush（millis）を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="ccb639561dbe9976233905fa4c560e41d0cddf85" translate="yes" xml:space="preserve">
          <source>Periodic tasks scheduled via &lt;a href=&quot;%24interval&quot;&gt;&lt;code&gt;$interval&lt;/code&gt;&lt;/a&gt; use a different queue and are not taken into account by &lt;code&gt;$verifyNoPendingTasks()&lt;/code&gt;. There is currently no way to verify that there are no pending &lt;a href=&quot;%24interval&quot;&gt;&lt;code&gt;$interval&lt;/code&gt;&lt;/a&gt; tasks.</source>
          <target state="translated">&lt;a href=&quot;%24interval&quot;&gt; &lt;code&gt;$interval&lt;/code&gt; &lt;/a&gt;を介してスケジュールされた定期的なタスクは別のキューを使用し、 &lt;code&gt;$verifyNoPendingTasks()&lt;/code&gt; によって考慮されません。現在、保留中の&lt;a href=&quot;%24interval&quot;&gt; &lt;code&gt;$interval&lt;/code&gt; &lt;/a&gt;タスクがないことを確認する方法はありません。</target>
        </trans-unit>
        <trans-unit id="9175845018286100e8c4dd426601703543b596bf" translate="yes" xml:space="preserve">
          <source>Place &lt;code&gt;ng-app&lt;/code&gt; to the root of your application, typically on the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag if you want AngularJS to auto-bootstrap your application.</source>
          <target state="translated">場所 &lt;code&gt;ng-app&lt;/code&gt; 、アプリケーションのルートには、一般的に &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; タグを使用するには、自動ブートストラップにAngularJSアプリケーションをしたい場合。</target>
        </trans-unit>
        <trans-unit id="b78ac8ca34cd41564ccb9b7e0ba05721f3cb269f" translate="yes" xml:space="preserve">
          <source>Place the &lt;code&gt;script&lt;/code&gt; tag at the bottom of the page. Placing script tags at the end of the page improves app load time because the HTML loading is not blocked by loading of the &lt;code&gt;angular.js&lt;/code&gt; script. You can get the latest bits from &lt;a href=&quot;http://code.angularjs.org&quot;&gt;http://code.angularjs.org&lt;/a&gt;. Please don't link your production code to this URL, as it will expose a security hole on your site. For experimental development linking to our site is fine.</source>
          <target state="translated">ページの下部に &lt;code&gt;script&lt;/code&gt; タグを配置します。ページの最後にスクリプトタグを配置すると、 &lt;code&gt;angular.js&lt;/code&gt; スクリプトの読み込みによってHTMLの読み込みがブロックされないため、アプリの読み込み時間が短縮されます。最新のビットは&lt;a href=&quot;http://code.angularjs.org&quot;&gt;http://code.angularjs.org&lt;/a&gt;から入手できます。本番コードをこのURLにリンクしないでください。サイトにセキュリティホールが露呈します。私たちのサイトにリンクする実験的な開発のために結構です。</target>
        </trans-unit>
        <trans-unit id="d41f5191f36242fba26edcab7cdae2ac55f00a60" translate="yes" xml:space="preserve">
          <source>Placeholder comments for structural directives will contain information about what directive and binding caused the placeholder. E.g. &lt;code&gt;&amp;lt;!-- ngIf: shouldShow() --&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">構造ディレクティブのプレースホルダーコメントには、プレースホルダーの原因となったディレクティブとバインディングに関する情報が含まれます。例： &lt;code&gt;&amp;lt;!-- ngIf: shouldShow() --&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6d23dce11abfc04d22b576b279be0582a4674d8" translate="yes" xml:space="preserve">
          <source>Placeholder comments will contain information about what directive and binding caused the placeholder. E.g. &lt;code&gt;&amp;lt;!-- ngIf: shouldShow() --&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">プレースホルダーのコメントには、プレースホルダーの原因となったディレクティブとバインディングに関する情報が含まれます。例： &lt;code&gt;&amp;lt;!-- ngIf: shouldShow() --&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba144cb01be20139ef167effe8a39441ca2909ab" translate="yes" xml:space="preserve">
          <source>Please keep in mind the points below about AngularJS's expression language.</source>
          <target state="translated">AngularJSの表現言語については、以下の点に留意してください。</target>
        </trans-unit>
        <trans-unit id="8fb457fc228fdb314328599f4f48cd78fc2cb244" translate="yes" xml:space="preserve">
          <source>Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only after all filters (and not as operator, inside an expression).</source>
          <target state="translated">as [変数名]は演算子ではなく ngRepeat マイクロシンタックスの一部なので、すべてのフィルタの後にのみ使用できることに注意してください (式の中の演算子としてではなく)。</target>
        </trans-unit>
        <trans-unit id="5864ee00ebaaffa52efb0e40ba7741e0c1980903" translate="yes" xml:space="preserve">
          <source>Please note that if $http is used then it is important that the server returns a success HTTP response code in order to fulfill the validation and a status level of &lt;code&gt;4xx&lt;/code&gt; in order to reject the validation.</source>
          <target state="translated">$ httpを使用する場合、検証を満たすためにサーバーが成功HTTP応答コードを返し、検証を拒否するためにステータスレベル &lt;code&gt;4xx&lt;/code&gt; を返すことが重要です。</target>
        </trans-unit>
        <trans-unit id="402875a9ef4cbfb33f456a217bbc17d01b959a8a" translate="yes" xml:space="preserve">
          <source>Please note that if these are intended to reach a translator and be translated, it is recommended that the messages appear as a whole and not be split up.</source>
          <target state="translated">これらが翻訳者に届いて翻訳されることを目的としている場合は、メッセージは全体として表示され、分割されないことをお勧めしますのでご注意ください。</target>
        </trans-unit>
        <trans-unit id="634d576f91a735237019985afbde7d8d151fc66d" translate="yes" xml:space="preserve">
          <source>Please note that whitespace (including newline) is generally insignificant except as part of the actual message text that occurs in curly braces. Whitespace is generally used to aid readability.</source>
          <target state="translated">空白(改行を含む)は、中括弧で囲まれた実際のメッセージテキストの一部を除いて、一般的には重要ではないことに注意してください。空白は一般的に読みやすくするために使用されます。</target>
        </trans-unit>
        <trans-unit id="4ef8776654a5598bd9bf8265ea86a4a13f90f500" translate="yes" xml:space="preserve">
          <source>Plural</source>
          <target state="translated">Plural</target>
        </trans-unit>
        <trans-unit id="be452558ab8a9d90c33c6ce5d76a1fb64db222cf" translate="yes" xml:space="preserve">
          <source>Plural Syntax</source>
          <target state="translated">複数形構文</target>
        </trans-unit>
        <trans-unit id="677291ce1832a3291ebfefdce4206c36b5695d5c" translate="yes" xml:space="preserve">
          <source>Plural and Gender together</source>
          <target state="translated">複数形と性別を一緒に</target>
        </trans-unit>
        <trans-unit id="30ea53b5f87201afcd442579a963613a5bfcf069" translate="yes" xml:space="preserve">
          <source>Plural categories and explicit number rules</source>
          <target state="translated">複数のカテゴリと明示的な数の規則</target>
        </trans-unit>
        <trans-unit id="179566a6a07c07bfd96129c294fa82e9392f11c5" translate="yes" xml:space="preserve">
          <source>Plural category matches are single words corresponding to the &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;plural categories&lt;/a&gt; of the CLDR plural category spec. These categories vary by locale. The &quot;en&quot; (English) locale, for example, defines just &quot;one&quot; and &quot;other&quot; while the &quot;ga&quot; (Irish) locale defines &quot;one&quot;, &quot;two&quot;, &quot;few&quot;, &quot;many&quot; and &quot;other&quot;. Typically, you would just write the categories for your language. During translation, the translators will add or remove more categories depending on the target locale.</source>
          <target state="translated">複数のカテゴリの一致はに対応する単一の単語で&lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;複数のカテゴリー&lt;/a&gt; CLDR複数のカテゴリ仕様の。これらのカテゴリはロケールによって異なります。たとえば、「en」（英語）ロケールは「1つ」と「その他」だけを定義し、「ga」（アイルランド）ロケールは「1つ」、「2つ」、「少数」、「多く」と「その他」を定義します。 。通常は、言語のカテゴリを記述します。翻訳中、翻訳者はターゲットロケールに応じて、カテゴリを追加または削除します。</target>
        </trans-unit>
        <trans-unit id="cd288f230e5e528cd142ef52cbb884894ff3ac60" translate="yes" xml:space="preserve">
          <source>Plural syntax with optional offset</source>
          <target state="translated">オプションのオフセットを含む複数形構文</target>
        </trans-unit>
        <trans-unit id="af1d180211f1fc8c7b2d6c46daa5db30af6e55bc" translate="yes" xml:space="preserve">
          <source>Post-linking function</source>
          <target state="translated">ポストリンキング機能</target>
        </trans-unit>
        <trans-unit id="5c90cf7f41a8da16012e1f3fcd7e3e25047730d5" translate="yes" xml:space="preserve">
          <source>Pre-linking function</source>
          <target state="translated">プリリンク機能</target>
        </trans-unit>
        <trans-unit id="9ec3d53b91c1e1f2ab71a67e94e59a4e5b149247" translate="yes" xml:space="preserve">
          <source>Prefix for hash part (containing path and search)</source>
          <target state="translated">ハッシュ部分の接頭辞 (パスと検索を含む)</target>
        </trans-unit>
        <trans-unit id="a6966604f1f1b212381bad520d36ae4193da4261" translate="yes" xml:space="preserve">
          <source>Prefix used for Hashbang URLs (used in Hashbang mode or in legacy browsers in HTML5 mode).</source>
          <target state="translated">Hashbang URL で使用されるプレフィックス (Hashbang モードや HTML5 モードのレガシーブラウザで使用されます)。</target>
        </trans-unit>
        <trans-unit id="60d63afbc58e76c10cdc1e0426f8ae18cd1a3642" translate="yes" xml:space="preserve">
          <source>Pressing an '&lt;code&gt;X&lt;/code&gt;' key causes the browser to emit a &lt;code&gt;keydown&lt;/code&gt; event on the input control.</source>
          <target state="translated">' &lt;code&gt;X&lt;/code&gt; 'キーを押すと、ブラウザーは入力コントロールで &lt;code&gt;keydown&lt;/code&gt; イベントを発行します。</target>
        </trans-unit>
        <trans-unit id="af8404ddcb19d0ee7bb4e3ada0c8ab29709d3381" translate="yes" xml:space="preserve">
          <source>Preventing collisions with existing animations and third-party libraries</source>
          <target state="translated">既存のアニメーションやサードパーティ製ライブラリとの衝突を防ぐ</target>
        </trans-unit>
        <trans-unit id="db2be9312367b0f1226840803e164f31490ec678" translate="yes" xml:space="preserve">
          <source>Preventing flicker before an animation starts</source>
          <target state="translated">アニメーション開始前のフリッカー防止</target>
        </trans-unit>
        <trans-unit id="f11dc6c496b3bea9136c75e36fb573c80908b9bf" translate="yes" xml:space="preserve">
          <source>Previous route information, or undefined if current is first route entered.</source>
          <target state="translated">前のルート情報、または現在のルートが最初に入力されたルートの場合は未定義。</target>
        </trans-unit>
        <trans-unit id="c853815d467b47e8ed78315578dd45ccb8c7d2ec" translate="yes" xml:space="preserve">
          <source>Previous route information.</source>
          <target state="translated">前回のルート情報です。</target>
        </trans-unit>
        <trans-unit id="6c2d988f12e64b7e45565826d807a919907ae496" translate="yes" xml:space="preserve">
          <source>Previously compiled HTML will not be affected by newly loaded directives, filters and components.</source>
          <target state="translated">以前にコンパイルされた HTML は、新たにロードされたディレクティブ、フィルタ、コンポーネントの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="cd339205264cf6840eb650823d064e5a8b67fcfd" translate="yes" xml:space="preserve">
          <source>Previously, we used the &lt;code&gt;link&lt;/code&gt; function to create a directive that manipulated its DOM elements. Building upon that example, let's make a directive that reacts to events on its elements.</source>
          <target state="translated">以前は、 &lt;code&gt;link&lt;/code&gt; 関数を使用して、DOM要素を操作するディレクティブを作成しました。その例を基に、その要素のイベントに反応するディレクティブを作成しましょう。</target>
        </trans-unit>
        <trans-unit id="c9e51fc63f08ba85c648b29ea8ba3f3e3bb81df0" translate="yes" xml:space="preserve">
          <source>Problems arise when the application is bootstrapped on a different element, and animations are attempted on elements that are outside the application tree, e.g. when libraries append popup or modal elements to the body tag.</source>
          <target state="translated">問題は、アプリケーションが別の要素でブートストラップされ、アプリケーションツリーの外にある要素でアニメーションを試みた場合に発生します。</target>
        </trans-unit>
        <trans-unit id="4fb08e5643a533ad7c05b134e9e747b584dc75f7" translate="yes" xml:space="preserve">
          <source>Process the digest loop as normal</source>
          <target state="translated">通常通りダイジェストループを処理する</target>
        </trans-unit>
        <trans-unit id="3b0fe78c753fdde32ba8bad6bdf5db38803ba21b" translate="yes" xml:space="preserve">
          <source>Processes all of the &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;watchers&lt;/a&gt; of the current scope and its children. Because a &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;watcher&lt;/a&gt;'s listener can change the model, the &lt;code&gt;$digest()&lt;/code&gt; keeps calling the &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;watchers&lt;/a&gt; until no more listeners are firing. This means that it is possible to get into an infinite loop. This function will throw &lt;code&gt;'Maximum iteration limit exceeded.'&lt;/code&gt; if the number of iterations exceeds 10.</source>
          <target state="translated">現在のスコープのすべての&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;ウォッチャー&lt;/a&gt;とその子を処理します。&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;ウォッチャー&lt;/a&gt;のリスナーはモデルを変更できるため、 &lt;code&gt;$digest()&lt;/code&gt; は、リスナーが&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;起動&lt;/a&gt;しなくなるまでウォッチャーを呼び出し続けます。これは、無限ループに入る可能性があることを意味します。この関数は、 &lt;code&gt;'Maximum iteration limit exceeded.'&lt;/code&gt; をスローします。反復回数が10を超える場合</target>
        </trans-unit>
        <trans-unit id="75965b4edaaa41b0b73d45b63157b2b38036c091" translate="yes" xml:space="preserve">
          <source>Professional AngularJS</source>
          <target state="translated">プロフェッショナル AngularJS</target>
        </trans-unit>
        <trans-unit id="80a2b88f2f6d0fed4bc5bba789ac7b216657a3a4" translate="yes" xml:space="preserve">
          <source>Programmatically changing options</source>
          <target state="translated">プログラムでオプションを変更</target>
        </trans-unit>
        <trans-unit id="3956d65e997700fbbe6962701c6c46976d9eae6b" translate="yes" xml:space="preserve">
          <source>Promise returned by the &lt;code&gt;$timeout&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;$timeout&lt;/code&gt; 関数によって返されるPromise 。</target>
        </trans-unit>
        <trans-unit id="8a59aafa09d6e49c77e62ffcdc6d53d10993c4e6" translate="yes" xml:space="preserve">
          <source>Promise that will be resolved when the timeout is reached. The promise will be resolved with the return value of the &lt;code&gt;fn&lt;/code&gt; function.</source>
          <target state="translated">タイムアウトに達したときに解決されることを約束します。promiseは、 &lt;code&gt;fn&lt;/code&gt; 関数の戻り値で解決されます。</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="bc9c3590c4b80616037b44fc342b9db9dab484bc" translate="yes" xml:space="preserve">
          <source>Properties to add to the controller before invoking the constructor. This is used to simulate the &lt;code&gt;bindToController&lt;/code&gt; feature and simplify certain kinds of tests.</source>
          <target state="translated">コンストラクターを呼び出す前にコントローラーに追加するプロパティ。これは、 &lt;code&gt;bindToController&lt;/code&gt; 機能をシミュレートし、特定の種類のテストを簡略化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="f8bd5483ecc0eeaa299f08dfff7f347a4fe2fec5" translate="yes" xml:space="preserve">
          <source>Properties to add to the controller instance. This is used to simulate the &lt;code&gt;bindToController&lt;/code&gt; feature and simplify certain kinds of tests.</source>
          <target state="translated">コントローラーインスタンスに追加するプロパティ。これは、 &lt;code&gt;bindToController&lt;/code&gt; 機能をシミュレートし、特定の種類のテストを簡略化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c0ec888619fe8d4c92ba83e3a1d78dab13efeb93" translate="yes" xml:space="preserve">
          <source>Property name of the form under which the control is published.</source>
          <target state="translated">制御を公開している形態のプロパティ名。</target>
        </trans-unit>
        <trans-unit id="1e8b2a7060963cf04221774fa7b7b5a02b0e287b" translate="yes" xml:space="preserve">
          <source>Protection from JSON Hijacking is provided if the server prefixes all JSON requests with following string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt;. AngularJS will automatically strip the prefix before processing it as JSON. For more information please visit &lt;a href=&quot;../api/ng/service/%24http#json-vulnerability-protection.html&quot;&gt;JSON Hijacking Protection&lt;/a&gt;.</source>
          <target state="translated">サーバーがすべてのJSONリクエストに次の文字列 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; プレフィックスする場合、JSONハイジャックからの保護が提供されます。AngularJSは、プレフィックスをJSONとして処理する前に自動的に削除します。詳細については、&lt;a href=&quot;../api/ng/service/%24http#json-vulnerability-protection.html&quot;&gt;JSONハイジャック保護&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="f9390e0ef5f71d138bc596eddbe51b8e38d4521a" translate="yes" xml:space="preserve">
          <source>Protection from XSRF is provided by using the double-submit cookie defense pattern. For more information please visit &lt;a href=&quot;../api/ng/service/%24http#cross-site-request-forgery-xsrf-protection.html&quot;&gt;XSRF protection&lt;/a&gt;.</source>
          <target state="translated">XSRFからの保護は、二重送信Cookie防御パターンを使用して提供されます。詳細については、&lt;a href=&quot;../api/ng/service/%24http#cross-site-request-forgery-xsrf-protection.html&quot;&gt;XSRF保護に&lt;/a&gt;アクセスしてください。</target>
        </trans-unit>
        <trans-unit id="90f86c4a0449e7e5adb2fe6a2e9e1a00e1f16c40" translate="yes" xml:space="preserve">
          <source>Protractor does not work out-of-the-box with apps that bootstrap manually using &lt;code&gt;angular.bootstrap&lt;/code&gt;. You must use the &lt;code&gt;ng-app&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;angular.bootstrap&lt;/code&gt; を使用して手動でブートストラップするアプリでは、Protractorはそのままでは機能しません。 &lt;code&gt;ng-app&lt;/code&gt; ディレクティブを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb5d793ecb6593e91414a3b5b89cbf50a0df7252" translate="yes" xml:space="preserve">
          <source>Protractor is a &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt; program, and runs end-to-end tests that are also written in JavaScript and run with node. Protractor uses &lt;a href=&quot;https://code.google.com/p/selenium/wiki/GettingStarted&quot;&gt;WebDriver&lt;/a&gt; to control browsers and simulate user actions.</source>
          <target state="translated">Protractorは&lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt;プログラムであり、JavaScriptで記述され、ノードで実行されるエンドツーエンドのテストを実行します。Protractorは&lt;a href=&quot;https://code.google.com/p/selenium/wiki/GettingStarted&quot;&gt;WebDriver&lt;/a&gt;を使用してブラウザーを制御し、ユーザーアクションをシミュレートします。</target>
        </trans-unit>
        <trans-unit id="bb3f0ccf64c0877d614e1a06bb00e1452bd032c9" translate="yes" xml:space="preserve">
          <source>Protractor uses &lt;a href=&quot;http://jasmine.github.io/1.3/introduction.html&quot;&gt;Jasmine&lt;/a&gt; for its test syntax. As in unit testing, a test file is comprised of one or more &lt;code&gt;it&lt;/code&gt; blocks that describe the requirements of your application. &lt;code&gt;it&lt;/code&gt; blocks are made of &lt;strong&gt;commands&lt;/strong&gt; and &lt;strong&gt;expectations&lt;/strong&gt;. Commands tell Protractor to do something with the application such as navigate to a page or click on a button. Expectations tell Protractor to assert something about the application's state, such as the value of a field or the current URL.</source>
          <target state="translated">分度器はテスト構文に&lt;a href=&quot;http://jasmine.github.io/1.3/introduction.html&quot;&gt;Jasmine&lt;/a&gt;を使用します。単体テストと同様に、テストファイルは、アプリケーションの要件を記述した1つ以上の &lt;code&gt;it&lt;/code&gt; ブロックで構成されます。ブロックは&lt;strong&gt;コマンド&lt;/strong&gt;と&lt;strong&gt;期待&lt;/strong&gt; &lt;code&gt;it&lt;/code&gt; 構成されてい&lt;strong&gt;ます&lt;/strong&gt;。コマンドは、ページに移動したり、ボタンをクリックしたりするなど、アプリケーションで何かを行うようにProtractorに指示します。期待は、フィールドの値や現在のURLなど、アプリケーションの状態について何かをアサートするようにProtractorに指示します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ceee3f3615a2bbe4ce0ac5a269a311e4821daf4" translate="yes" xml:space="preserve">
          <source>Provider</source>
          <target state="translated">Provider</target>
        </trans-unit>
        <trans-unit id="d1ee5ed53bb0014f222cf9a775404d40f04a276f" translate="yes" xml:space="preserve">
          <source>Provider Recipe</source>
          <target state="translated">プロバイダレシピ</target>
        </trans-unit>
        <trans-unit id="faeb91f343caefcfbfb0f7ef0ebef566e9f808d2" translate="yes" xml:space="preserve">
          <source>Provider components in ng</source>
          <target state="translated">プロバイダの構成要素をNG</target>
        </trans-unit>
        <trans-unit id="aac6643460d97ee9f664d62a35a270349841cf75" translate="yes" xml:space="preserve">
          <source>Provider components in ngAria</source>
          <target state="translated">ngAriaのプロバイダコンポーネント</target>
        </trans-unit>
        <trans-unit id="3697f23641b772bbaabfc5f9418598d9a7d11a6f" translate="yes" xml:space="preserve">
          <source>Provider components in ngCookies</source>
          <target state="translated">ngCookiesのプロバイダコンポーネント</target>
        </trans-unit>
        <trans-unit id="607b375320386821b2b91b0abb605d476671a991" translate="yes" xml:space="preserve">
          <source>Provider components in ngMock</source>
          <target state="translated">ngMock のプロバイダコンポーネント</target>
        </trans-unit>
        <trans-unit id="27f092cf1e72b65217dc348f8fb9eef609ef0f86" translate="yes" xml:space="preserve">
          <source>Provider components in ngResource</source>
          <target state="translated">ngResourceのプロバイダコンポーネント</target>
        </trans-unit>
        <trans-unit id="82fa91bef1fcd6b27dcb61546d819b59f500cbf9" translate="yes" xml:space="preserve">
          <source>Provider components in ngRoute</source>
          <target state="translated">ngRoute のプロバイダコンポーネント</target>
        </trans-unit>
        <trans-unit id="64e454af2188dee8d60382135ae30ceba7b9fb7b" translate="yes" xml:space="preserve">
          <source>Provider components in ngSanitize</source>
          <target state="translated">ngSanitize のプロバイダコンポーネント</target>
        </trans-unit>
        <trans-unit id="0b7f95fe00b27ad60f556fe51d59a14ae33eea20" translate="yes" xml:space="preserve">
          <source>Provider for the $rootScope service.</source>
          <target state="translated">rootScope サービスのプロバイダ。</target>
        </trans-unit>
        <trans-unit id="53d2419e2fad27c745ab7837fb34c5b4cb3b5535" translate="yes" xml:space="preserve">
          <source>Provider is the most complex recipe type. You don't need it unless you are building a reusable piece of code that needs global configuration.</source>
          <target state="translated">プロバイダーは最も複雑なレシピタイプです。グローバルな設定を必要とする再利用可能なコードを構築しているのでなければ、必要ありません。</target>
        </trans-unit>
        <trans-unit id="87b7c08baed1c8e93db95b79bcdca55b631dd7bb" translate="yes" xml:space="preserve">
          <source>Providers</source>
          <target state="translated">Providers</target>
        </trans-unit>
        <trans-unit id="3c19717766308f184231292bb4ec1e53f9ff7873" translate="yes" xml:space="preserve">
          <source>Provides pre-instantiated services which should append/override services provided by &lt;code&gt;providers&lt;/code&gt;. This is handy when unit-testing and having the need to override a default service.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; によって提供されるサービスを追加/オーバーライドする、事前にインスタンス化されたサービスを提供します。これは、単体テストを行い、デフォルトのサービスをオーバーライドする必要がある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="8eae5c3fc815670c73fa3a65878af6b41fec633e" translate="yes" xml:space="preserve">
          <source>Provides read/write access to browser's cookies.</source>
          <target state="translated">ブラウザのクッキーへの読み書きアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="1a023f9aad6dc377039a1b87b20af53972b89720" translate="yes" xml:space="preserve">
          <source>Providing locale rules to AngularJS</source>
          <target state="translated">AngularJSにロケールルールを提供する</target>
        </trans-unit>
        <trans-unit id="ddd8ad56b330bca54c9be9804edc93d69e2dea69" translate="yes" xml:space="preserve">
          <source>Providing validation behavior (i.e. required, number, email, url).</source>
          <target state="translated">バリデーション動作を提供します(必須、番号、電子メール、URLなど)。</target>
        </trans-unit>
        <trans-unit id="b73be446095cb68833313fd87ebc08cef7cbc028" translate="yes" xml:space="preserve">
          <source>Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains all the important functionality needed for common async tasks.</source>
          <target state="translated">Q は $q よりも多くの機能を持っていますが、バイト数を犠牲にしています。q は小さいですが、一般的な非同期タスクに必要な重要な機能をすべて含んでいます。</target>
        </trans-unit>
        <trans-unit id="a17b9bb70264b6c8d6ecde29f85b3a88abcad433" translate="yes" xml:space="preserve">
          <source>Query parameters</source>
          <target state="translated">クエリパラメータ</target>
        </trans-unit>
        <trans-unit id="aa28402b349eaa855997074022329eee97704df9" translate="yes" xml:space="preserve">
          <source>Raw cookie value.</source>
          <target state="translated">生のクッキーの値。</target>
        </trans-unit>
        <trans-unit id="1618100fea13078aa76080795808feb6be857d99" translate="yes" xml:space="preserve">
          <source>Raw value to be stored.</source>
          <target state="translated">保存する生の値。</target>
        </trans-unit>
        <trans-unit id="2b86c80b3e4094ce9a3d04d4536abffffbad8e90" translate="yes" xml:space="preserve">
          <source>Read and write custom information about this module. For example you could put the version of the module in here.</source>
          <target state="translated">このモジュールについてのカスタム情報を読み書きします。例えば、ここにモジュールのバージョンを入れることができます。</target>
        </trans-unit>
        <trans-unit id="4d7732dd14cd9ae15d39f4a1ba98522f1578cf57" translate="yes" xml:space="preserve">
          <source>Read more about &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping（SCE）の&lt;/a&gt;詳細をご覧ください。</target>
        </trans-unit>
        <trans-unit id="354d2d712f48b41905c006f1295a07a5166ec835" translate="yes" xml:space="preserve">
          <source>Ready to find out more about AngularJS?</source>
          <target state="translated">AngularJSについてもっと知りたいですか?</target>
        </trans-unit>
        <trans-unit id="434f7fd2e7fbbeb863bbeb23079429e58d437bae" translate="yes" xml:space="preserve">
          <source>Reasons for using one-time binding</source>
          <target state="translated">ワンタイムバインディングを利用する理由</target>
        </trans-unit>
        <trans-unit id="c400f997011216a042b977f816c836e8b9842bfe" translate="yes" xml:space="preserve">
          <source>Recommended Setup</source>
          <target state="translated">推奨設定</target>
        </trans-unit>
        <trans-unit id="4a36b4af5afa45bcf158d1716fdc3677a5e0a895" translate="yes" xml:space="preserve">
          <source>Refer &lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$sceDelegateProvider&lt;/a&gt; for an example.</source>
          <target state="translated">例として&lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$ sceDelegateProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b5b195da530d0efe734a7d53c8b68080b3cc3c7f" translate="yes" xml:space="preserve">
          <source>Refer &lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$sceDelegateProvider&lt;/a&gt; to configure this service.</source>
          <target state="translated">このサービスを構成するには、&lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$ sceDelegateProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4b627a0fb853040d3e0434dbbefd5809d93b210f" translate="yes" xml:space="preserve">
          <source>Reference to &lt;code&gt;dst&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dst&lt;/code&gt; への参照。</target>
        </trans-unit>
        <trans-unit id="acd87679cf893a1dd2dca79c61d0e9d748b5026f" translate="yes" xml:space="preserve">
          <source>Reference to &lt;code&gt;obj&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; への参照。</target>
        </trans-unit>
        <trans-unit id="b671addffac0b2e853bfb7228e292c171a7d6ed5" translate="yes" xml:space="preserve">
          <source>Reference to check.</source>
          <target state="translated">チェックするための参考にしてください。</target>
        </trans-unit>
        <trans-unit id="3b633a4c1143db3741cc3f064fe12f9828a781e6" translate="yes" xml:space="preserve">
          <source>Reference to the current route definition. The route definition contains:</source>
          <target state="translated">現在のルート定義への参照。経路定義には以下が含まれています。</target>
        </trans-unit>
        <trans-unit id="bb91dbe53666db180aa57161eb36d124fa150320" translate="yes" xml:space="preserve">
          <source>Reference to the parent scope.</source>
          <target state="translated">親スコープへの参照。</target>
        </trans-unit>
        <trans-unit id="bed990515ae3cd84556c4d6208760d018bf3b353" translate="yes" xml:space="preserve">
          <source>Reference to the root scope.</source>
          <target state="translated">ルートスコープへの参照。</target>
        </trans-unit>
        <trans-unit id="b8d49172c668642e2f62c37bc331faa62a3e1ab5" translate="yes" xml:space="preserve">
          <source>Regex parameter matching</source>
          <target state="translated">正規表現パラメータのマッチング</target>
        </trans-unit>
        <trans-unit id="fc0504148c30c6097df7cfb4174da0f1a4cbd9e0" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;component definition&lt;/strong&gt; with the compiler. This is a shorthand for registering a special type of directive, which represents a self-contained UI component in your application. Such components are always isolated (i.e. &lt;code&gt;scope: {}&lt;/code&gt;) and are always restricted to elements (i.e. &lt;code&gt;restrict: 'E'&lt;/code&gt;).</source>
          <target state="translated">コンパイラに&lt;strong&gt;コンポーネント定義&lt;/strong&gt;を登録し&lt;strong&gt;ます&lt;/strong&gt;。これは、アプリケーションの自己完結型UIコンポーネントを表す、特別なタイプのディレクティブを登録するための省略形です。このようなコンポーネントは常に隔離され（つまり、 &lt;code&gt;scope: {}&lt;/code&gt; ）、常に要素に制限されます（つまり、 &lt;code&gt;restrict: 'E'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e65f3ece273368fd8433f2cdcda7c960e1f6572d" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;constant service&lt;/strong&gt; with the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt;, such as a string, a number, an array, an object or a function. Like the &lt;a href=&quot;%24provide#value.html&quot;&gt;value&lt;/a&gt;, it is not possible to inject other services into a constant.</source>
          <target state="translated">文字列、数値、配列、オブジェクト、関数などの&lt;strong&gt;定数サービス&lt;/strong&gt;を&lt;a href=&quot;%24injector&quot;&gt;$ injector&lt;/a&gt;に登録します。&lt;a href=&quot;%24provide#value.html&quot;&gt;値の&lt;/a&gt;ように、他のサービスを定数に注入することはできません。</target>
        </trans-unit>
        <trans-unit id="45524c2eb035d8e9328d31f7bed278f90e7c83fc" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;decorator function&lt;/strong&gt; with the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt;. A decorator function intercepts the creation of a service, allowing it to override or modify the behavior of the service. The return value of the decorator function may be the original service, or a new service that replaces (or wraps and delegates to) the original service.</source>
          <target state="translated">&lt;a href=&quot;%24injector&quot;&gt;$ injectorで&lt;/a&gt;&lt;strong&gt;デコレータ関数&lt;/strong&gt;を登録します。デコレーター関数はサービスの作成をインターセプトし、サービスの動作をオーバーライドまたは変更できるようにします。デコレータ関数の戻り値は、元のサービス、または元のサービスを置き換える（またはラップしてデリゲートする）新しいサービスの場合があります。</target>
        </trans-unit>
        <trans-unit id="ea020b086a634153190597650e70f48a24258953" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;provider function&lt;/strong&gt; with the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt;. Provider functions are constructor functions, whose instances are responsible for &quot;providing&quot; a factory for a service.</source>
          <target state="translated">&lt;a href=&quot;%24injector&quot;&gt;$ injectorで&lt;/a&gt;&lt;strong&gt;プロバイダー関数&lt;/strong&gt;を登録し&lt;strong&gt;ます&lt;/strong&gt;。プロバイダー関数はコンストラクター関数であり、そのインスタンスはサービスのファクトリーを「提供」する責任があります。</target>
        </trans-unit>
        <trans-unit id="45783c066e03d8c03ea0efb06a359bae85613169" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;service constructor&lt;/strong&gt;, which will be invoked with &lt;code&gt;new&lt;/code&gt; to create the service instance. This is short for registering a service where its provider's &lt;code&gt;$get&lt;/code&gt; property is a factory function that returns an instance instantiated by the injector from the service constructor function.</source>
          <target state="translated">&lt;strong&gt;サービスコンストラクターを&lt;/strong&gt;登録し&lt;strong&gt;ます。サービスコンストラクター&lt;/strong&gt;は、サービスインスタンスを作成するために &lt;code&gt;new&lt;/code&gt; で呼び出されます。これは、プロバイダーの &lt;code&gt;$get&lt;/code&gt; プロパティが、サービスコンストラクター関数からインジェクターによってインスタンス化されたインスタンスを返すファクトリ関数であるサービスを登録するための略語です。</target>
        </trans-unit>
        <trans-unit id="eed2257ce18cce4c83839c3ad49253c60a762e9c" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;service factory&lt;/strong&gt;, which will be called to return the service instance. This is short for registering a service where its provider consists of only a &lt;code&gt;$get&lt;/code&gt; property, which is the given service factory function. You should use &lt;a href=&quot;%24provide#factory.html&quot;&gt;$provide.factory(getFn)&lt;/a&gt; if you do not need to configure your service in a provider.</source>
          <target state="translated">サービスインスタンスを返すために呼び出される&lt;strong&gt;サービスファクトリを&lt;/strong&gt;登録します。これは、プロバイダーが &lt;code&gt;$get&lt;/code&gt; プロパティのみで構成されているサービスを登録することを意味します。これは、特定のサービスファクトリ関数です。プロバイダーでサービスを構成する必要がない場合は、&lt;a href=&quot;%24provide#factory.html&quot;&gt;$ provide.factory（getFn）&lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="635024287d83106675ce8f580b6af894b0ca524f" translate="yes" xml:space="preserve">
          <source>Register a &lt;strong&gt;value service&lt;/strong&gt; with the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt;, such as a string, a number, an array, an object or a function. This is short for registering a service where its provider's &lt;code&gt;$get&lt;/code&gt; property is a factory function that takes no arguments and returns the &lt;strong&gt;value service&lt;/strong&gt;. That also means it is not possible to inject other services into a value service.</source>
          <target state="translated">文字列、数値、配列、オブジェクト、関数などの&lt;strong&gt;値サービス&lt;/strong&gt;を&lt;a href=&quot;%24injector&quot;&gt;$ injector&lt;/a&gt;に登録し&lt;strong&gt;ます&lt;/strong&gt;。これは、プロバイダーの &lt;code&gt;$get&lt;/code&gt; プロパティが引数を取らずに&lt;strong&gt;値service&lt;/strong&gt;を返すファクトリー関数であるサービスを登録するための略語です。つまり、他のサービスをバリューサービスに挿入することはできません。</target>
        </trans-unit>
        <trans-unit id="b87eb97a1c3c8baad3cdae5ff8ff853d06484051" translate="yes" xml:space="preserve">
          <source>Register a control with the form. Input elements using ngModelController do this automatically when they are linked.</source>
          <target state="translated">フォームにコントロールを登録します。ngModelController を使用した入力要素がリンクされると自動的にこれを行います。</target>
        </trans-unit>
        <trans-unit id="eb48cfa4c810ae8c4bb96fcfdc6c3eb349e97e1e" translate="yes" xml:space="preserve">
          <source>Register a new directive with the compiler.</source>
          <target state="translated">コンパイラに新しいディレクティブを登録します。</target>
        </trans-unit>
        <trans-unit id="d51fd0243e0e86d898e850537c07b7bc17d03dc4" translate="yes" xml:space="preserve">
          <source>Registered filter instance, or if a map of filters was provided then a map of the registered filter instances.</source>
          <target state="translated">登録されたフィルタインスタンス、またはフィルタのマップが提供された場合は登録されたフィルタインスタンスのマップ。</target>
        </trans-unit>
        <trans-unit id="e34c75266465d4da9d7310c64a01438305b252b5" translate="yes" xml:space="preserve">
          <source>Registering Services</source>
          <target state="translated">登録サービス</target>
        </trans-unit>
        <trans-unit id="d1260ea7fdb8f8f1a5f99c1e31524881fab210aa" translate="yes" xml:space="preserve">
          <source>Registering a Service with $provide</source>
          <target state="translated">サービスを$provideで登録する</target>
        </trans-unit>
        <trans-unit id="48d1928dfaff8d1fc38b25397535b4cf15cf8700" translate="yes" xml:space="preserve">
          <source>Registering the control with its parent &lt;a href=&quot;form&quot;&gt;form&lt;/a&gt;.</source>
          <target state="translated">コントロールをその親&lt;a href=&quot;form&quot;&gt;フォームに&lt;/a&gt;登録します。</target>
        </trans-unit>
        <trans-unit id="ce3b34d6f14031683c49fcb0996fc9a2287467ec" translate="yes" xml:space="preserve">
          <source>Registers a &lt;code&gt;listener&lt;/code&gt; callback to be executed whenever the &lt;code&gt;watchExpression&lt;/code&gt; changes.</source>
          <target state="translated">&lt;code&gt;watchExpression&lt;/code&gt; が変更されるたびに実行される &lt;code&gt;listener&lt;/code&gt; コールバックを登録します。</target>
        </trans-unit>
        <trans-unit id="e755ff9b4f19ef2d1c7dc5cbea80131344b000f0" translate="yes" xml:space="preserve">
          <source>Registers a new injectable animation factory function. The factory function produces the animation object which contains callback functions for each event that is expected to be animated.</source>
          <target state="translated">新しいインジェクト可能なアニメーション ファクトリー関数を登録します。ファクトリー関数は、アニメーションされると予想される各イベントのコールバック関数を含むアニメーションオブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="40aec920014d2862cafad66b448612b687f31308" translate="yes" xml:space="preserve">
          <source>Registration in the config block</source>
          <target state="translated">設定ブロックへの登録</target>
        </trans-unit>
        <trans-unit id="98fdd77196db1b5bf3eb22caffc45a13dfad7a74" translate="yes" xml:space="preserve">
          <source>Related API</source>
          <target state="translated">関連API</target>
        </trans-unit>
        <trans-unit id="cfbc9e10239e3aa2884b26233bd2772c8b87a636" translate="yes" xml:space="preserve">
          <source>Related Topics</source>
          <target state="translated">関連トピック</target>
        </trans-unit>
        <trans-unit id="8f7bfe2a8726123d4d57d9e3cb41a80d80eefbfc" translate="yes" xml:space="preserve">
          <source>Relative links</source>
          <target state="translated">関連リンク</target>
        </trans-unit>
        <trans-unit id="98eb2443ddb19e4af9222b182551b238c57fffed" translate="yes" xml:space="preserve">
          <source>Relative or absolute URL specifying the destination of the request</source>
          <target state="translated">リクエストの送信先を指定する相対 URL または絶対 URL</target>
        </trans-unit>
        <trans-unit id="e6e7b36b90301e1149d1fd8dbda9f15e4b6881b3" translate="yes" xml:space="preserve">
          <source>Remove given cookie</source>
          <target state="translated">与えられたクッキーを取り除く</target>
        </trans-unit>
        <trans-unit id="ee2741c4b98105f982c53a03fff032d207b158a9" translate="yes" xml:space="preserve">
          <source>Removes an entry from the &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;オブジェクトからエントリを削除します。</target>
        </trans-unit>
        <trans-unit id="8920f5ca9f0566bd4a9f1e7b0ee0099b999aa651" translate="yes" xml:space="preserve">
          <source>Removes the CSS class value specified by the classVal parameter from the element. If animations are enabled then an animation will be triggered for the class removal.</source>
          <target state="translated">classVal パラメータで指定された CSS クラスの値を要素から削除します。アニメーションが有効になっている場合は、クラスの削除のためにアニメーションが起動されます。</target>
        </trans-unit>
        <trans-unit id="04b5e728a8d34f70ce59d4ce19242f609cb92274" translate="yes" xml:space="preserve">
          <source>Removes the current scope (and all of its children) from the parent scope. Removal implies that calls to &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt; will no longer propagate to the current scope and its children. Removal also implies that the current scope is eligible for garbage collection.</source>
          <target state="translated">現在のスコープ（およびそのすべての子）を親スコープから削除します。削除は、&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest（）の&lt;/a&gt;呼び出しが現在のスコープとその子に伝播しないことを意味します。削除は、現在のスコープがガベージコレクションの対象であることも意味します。</target>
        </trans-unit>
        <trans-unit id="f5cfe4b8875850cebab31b8ae5ebdb0f01a98015" translate="yes" xml:space="preserve">
          <source>Replace method</source>
          <target state="translated">メソッドの置き換え</target>
        </trans-unit>
        <trans-unit id="abed80d59c3cc2cdfd2934eac8defa722471a0e8" translate="yes" xml:space="preserve">
          <source>Replace or decorate this service to create your own custom XMLHttpRequest objects.</source>
          <target state="translated">このサービスを置き換えたり、装飾したりして、独自のカスタム XMLHttpRequest オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="7fdab89988ce8fbbc75820a42b26b98ef91641e9" translate="yes" xml:space="preserve">
          <source>Replace the contents of the directive's element (default).</source>
          <target state="translated">ディレクティブの要素の内容を置き換えます(デフォルト)。</target>
        </trans-unit>
        <trans-unit id="8d8db9b8f187119d598467a295084104278dca63" translate="yes" xml:space="preserve">
          <source>Replace the directive's element itself (if &lt;code&gt;replace&lt;/code&gt; is true - DEPRECATED).</source>
          <target state="translated">ディレクティブの要素自体を &lt;code&gt;replace&lt;/code&gt; ます（replaceがtrueの場合-非推奨）。</target>
        </trans-unit>
        <trans-unit id="1b74ba244acc5851ea1e932d4c6f319a815eeff5" translate="yes" xml:space="preserve">
          <source>Reporting a security issue</source>
          <target state="translated">セキュリティ問題の報告</target>
        </trans-unit>
        <trans-unit id="c922eca42e3d5120a6bfc72bcad1d30519cb4e28" translate="yes" xml:space="preserve">
          <source>Represents the URL object as a set of methods (protocol, host, port, path, search, hash).</source>
          <target state="translated">URLオブジェクトをメソッド(プロトコル、ホスト、ポート、パス、検索、ハッシュ)のセットとして表現します。</target>
        </trans-unit>
        <trans-unit id="44275cc926494215c0dd8c311f508c08138ab44c" translate="yes" xml:space="preserve">
          <source>Request Expectations vs Backend Definitions</source>
          <target state="translated">リクエストの期待値とバックエンドの定義</target>
        </trans-unit>
        <trans-unit id="fb7dc677c72c08388ac26aa5b3b8bf37f74b4a0b" translate="yes" xml:space="preserve">
          <source>Request content</source>
          <target state="translated">コンテンツのリクエスト</target>
        </trans-unit>
        <trans-unit id="4e9c03db567af687cbcde897eb8e4e49684606e8" translate="yes" xml:space="preserve">
          <source>Request expectations</source>
          <target state="translated">期待値を要求する</target>
        </trans-unit>
        <trans-unit id="7c76d91bc3fe714b2e19d415024bc0ce817ca932" translate="yes" xml:space="preserve">
          <source>Request expectations provide a way to make assertions about requests made by the application and to define responses for those requests. The test will fail if the expected requests are not made or they are made in the wrong order.</source>
          <target state="translated">期待されるリクエストは、アプリケーションが行うリクエストについてアサーションを行い、それらのリクエストに対するレスポンスを定義する方法を提供します。期待されるリクエストが実行されなかったり、間違った順番で実行されたりするとテストは失敗します。</target>
        </trans-unit>
        <trans-unit id="c3d3aaf0c7d684713b0e633e09eb2de9d118d464" translate="yes" xml:space="preserve">
          <source>Request required</source>
          <target state="translated">要リクエスト</target>
        </trans-unit>
        <trans-unit id="2ef4b562f29645c2c4f2482326315042cb223eaa" translate="yes" xml:space="preserve">
          <source>Request transformations (&lt;code&gt;$httpProvider.defaults.transformRequest&lt;/code&gt; and &lt;code&gt;$http.defaults.transformRequest&lt;/code&gt;) is an array with one function that does the following:</source>
          <target state="translated">要求変換（ &lt;code&gt;$httpProvider.defaults.transformRequest&lt;/code&gt; および &lt;code&gt;$http.defaults.transformRequest&lt;/code&gt; ）は、次のことを行う1つの関数を持つ配列です。</target>
        </trans-unit>
        <trans-unit id="90f650d7162ff6af24a4492b8baa19c6caca946c" translate="yes" xml:space="preserve">
          <source>Require another directive and inject its controller as the fourth argument to the linking function. The &lt;code&gt;require&lt;/code&gt; property can be a string, an array or an object:</source>
          <target state="translated">別のディレクティブを必要とし、そのコントローラーをリンク関数の4番目の引数として挿入します。 &lt;code&gt;require&lt;/code&gt; プロパティは、文字列、配列またはオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="e1d5e0b06dfa562e69981647c63bd3b86e664409" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;../../ngaria&quot;&gt;&lt;code&gt;ngAria&lt;/code&gt;&lt;/a&gt; module to be installed.</source>
          <target state="translated">&lt;a href=&quot;../../ngaria&quot;&gt; &lt;code&gt;ngAria&lt;/code&gt; &lt;/a&gt;モジュールをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="7ec0099c504303c4c9c48e96dc4609ad55904f4a" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;../../ngcookies&quot;&gt;&lt;code&gt;ngCookies&lt;/code&gt;&lt;/a&gt; module to be installed.</source>
          <target state="translated">&lt;a href=&quot;../../ngcookies&quot;&gt; &lt;code&gt;ngCookies&lt;/code&gt; &lt;/a&gt;モジュールをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="c5862a5cb0ec6abe952c905b15a9f3429f373234" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;../../ngresource&quot;&gt;&lt;code&gt;ngResource&lt;/code&gt;&lt;/a&gt; module to be installed.</source>
          <target state="translated">&lt;a href=&quot;../../ngresource&quot;&gt; &lt;code&gt;ngResource&lt;/code&gt; &lt;/a&gt;モジュールがインストールされている必要があります。</target>
        </trans-unit>
        <trans-unit id="928e58682d0c86f23af73ec08890f10c14e4c472" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;../../ngroute&quot;&gt;&lt;code&gt;ngRoute&lt;/code&gt;&lt;/a&gt; module to be installed.</source>
          <target state="translated">&lt;a href=&quot;../../ngroute&quot;&gt; &lt;code&gt;ngRoute&lt;/code&gt; &lt;/a&gt;モジュールをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="537fea66db726eae9da189c87f27644f84ba9348" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; module to be installed.</source>
          <target state="translated">&lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;モジュールをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="1a11c4501de6ba56e5400e26238d9a6bec494d4b" translate="yes" xml:space="preserve">
          <source>Requires the &lt;a href=&quot;../../ngtouch&quot;&gt;&lt;code&gt;ngTouch&lt;/code&gt;&lt;/a&gt; module to be installed.</source>
          <target state="translated">&lt;a href=&quot;../../ngtouch&quot;&gt; &lt;code&gt;ngTouch&lt;/code&gt; &lt;/a&gt;モジュールをインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="4dc1287fe5b5d1c6b627f7a7a956e26221d21611" translate="yes" xml:space="preserve">
          <source>Reset all of the logging arrays to empty.</source>
          <target state="translated">すべてのロギングアレイを空にリセットします。</target>
        </trans-unit>
        <trans-unit id="2b0b4d40965cbdcf2bc7f1639bd05a9faab1c19d" translate="yes" xml:space="preserve">
          <source>Resets all request expectations, but preserves all backend definitions. Typically, you would call resetExpectations during a multiple-phase test when you want to reuse the same instance of $httpBackend mock.</source>
          <target state="translated">すべてのリクエストの期待値をリセットしますが、 バックエンドの定義はすべて保持します。通常、複数のフェーズのテスト中に resetExpectations をコールするのは、 $httpBackend モックの同じインスタンスを再利用したい場合です。</target>
        </trans-unit>
        <trans-unit id="9b1627a90ba7fe159014541f613675e06126b296" translate="yes" xml:space="preserve">
          <source>Resolved promises, e.g. from explicit &lt;code&gt;$q&lt;/code&gt; deferreds and &lt;code&gt;$http&lt;/code&gt; calls, trigger &lt;code&gt;$apply()&lt;/code&gt; against the &lt;code&gt;$rootScope&lt;/code&gt; and so will still trigger a global digest even if the promise was initiated by a component that lives on a suspended scope.</source>
          <target state="translated">解決されたプロミス（明示的な &lt;code&gt;$q&lt;/code&gt; 遅延や &lt;code&gt;$http&lt;/code&gt; 呼び出しなど &lt;code&gt;$apply()&lt;/code&gt; は、 &lt;code&gt;$rootScope&lt;/code&gt; に対して$ apply（）をトリガーするため、中断されたスコープに存在するコンポーネントによってプロミスが開始された場合でも、グローバルダイジェストをトリガーします。</target>
        </trans-unit>
        <trans-unit id="5171c896616adb2c3ae9357c2a11116e0ab2aa7b" translate="yes" xml:space="preserve">
          <source>Resolving References (Underscore Wrapping)</source>
          <target state="translated">参考文献の解決(アンダースコアのラッピング</target>
        </trans-unit>
        <trans-unit id="1fdbddda0698a34f465a4a76d405fca85c2bc495" translate="yes" xml:space="preserve">
          <source>Response required</source>
          <target state="translated">必要な対応</target>
        </trans-unit>
        <trans-unit id="4279f5f3a3f43e3e9697fcb9701f9133954216d8" translate="yes" xml:space="preserve">
          <source>Response transformations (&lt;code&gt;$httpProvider.defaults.transformResponse&lt;/code&gt; and &lt;code&gt;$http.defaults.transformResponse&lt;/code&gt;) is an array with one function that does the following:</source>
          <target state="translated">応答変換（ &lt;code&gt;$httpProvider.defaults.transformResponse&lt;/code&gt; および &lt;code&gt;$http.defaults.transformResponse&lt;/code&gt; ）は、以下を実行する1つの関数を持つ配列です。</target>
        </trans-unit>
        <trans-unit id="71af08d07b3e60fd452cd1d0a14b65208dec62a8" translate="yes" xml:space="preserve">
          <source>Resume watchers of this scope subtree in case it was suspended.</source>
          <target state="translated">サスペンドされた場合に備えて、このスコープサブツリーのウォッチャーを再開します。</target>
        </trans-unit>
        <trans-unit id="c3cc9b89d7252c496c37f0adc038b1ff7352e328" translate="yes" xml:space="preserve">
          <source>Retrieve information regarding a particular &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;.</source>
          <target state="translated">特定の&lt;a href=&quot;%24cachefactory.cache&quot;&gt;キャッシュ&lt;/a&gt;に関する情報を取得します。</target>
        </trans-unit>
        <trans-unit id="029ee2c69a33b0a01589d3072b7fe14eb14fae75" translate="yes" xml:space="preserve">
          <source>Retrieves named data stored in the &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;オブジェクトに格納されている名前付きデータを取得します。</target>
        </trans-unit>
        <trans-unit id="b79d873410e3c147f2393994b51801ea7b9e7971" translate="yes" xml:space="preserve">
          <source>Retrieves or overrides the default regular expression that is used for whitelisting of safe urls during a[href] sanitization.</source>
          <target state="translated">a[href]サニタイズ時に安全なURLのホワイトリスト化に使用されるデフォルトの正規表現を取得またはオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="0f87729394a5fbe13e20ab17fd7dfea291758f33" translate="yes" xml:space="preserve">
          <source>Retrieves or overrides the default regular expression that is used for whitelisting of safe urls during img[src] sanitization.</source>
          <target state="translated">img[src]のサニタイズ時に安全なURLのホワイトリスト化に使用されるデフォルトの正規表現を取得またはオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="56c2ae0bea288f2deb96af027ca9db1c1e0b88dc" translate="yes" xml:space="preserve">
          <source>Retrieves or overrides whether to generate an error when a rejected promise is not handled. This feature is enabled by default.</source>
          <target state="translated">拒否されたプロミスが処理されなかった場合にエラーを生成するかどうかを取得または上書きします。この機能はデフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="c185b622ce0745aa94f9eb7657d6eb237ec2b1fa" translate="yes" xml:space="preserve">
          <source>Retrieving Scopes from the DOM.</source>
          <target state="translated">DOM からスコープを取得します。</target>
        </trans-unit>
        <trans-unit id="b94fccf633ef32d6a7adbbcb71ca77e3795f319f" translate="yes" xml:space="preserve">
          <source>Return URL (e.g. &lt;code&gt;/path?a=b#hash&lt;/code&gt;) when called without any parameter.</source>
          <target state="translated">パラメータなしで呼び出された場合 &lt;code&gt;/path?a=b#hash&lt;/code&gt; URL（例/ path？a = b＃hash）を返します。</target>
        </trans-unit>
        <trans-unit id="140d46868b4d533c15312ce7397910001cda166b" translate="yes" xml:space="preserve">
          <source>Return an instance of the service.</source>
          <target state="translated">サービスのインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="52c77045e19f27ad9c42170b240a88aba2880086" translate="yes" xml:space="preserve">
          <source>Return full URL representation with all segments encoded according to rules specified in &lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986で&lt;/a&gt;指定された規則に従ってエンコードされたすべてのセグメントを含む完全なURL表現を返します。</target>
        </trans-unit>
        <trans-unit id="a84b48c4bccbb0cc57fe52888fad2de77796bd94" translate="yes" xml:space="preserve">
          <source>Return host of current URL.</source>
          <target state="translated">現在のURLのホストを返します。</target>
        </trans-unit>
        <trans-unit id="d9571c514202bc742683b59fda7b96fff7838c64" translate="yes" xml:space="preserve">
          <source>Return path of current URL when called without any parameter.</source>
          <target state="translated">パラメータを指定せずに呼び出された場合、現在のURLのパスを返します。</target>
        </trans-unit>
        <trans-unit id="1fa7a4a66728b565c4e07673c76f2345202fcefb" translate="yes" xml:space="preserve">
          <source>Return port of current URL.</source>
          <target state="translated">現在のURLのポートを返します。</target>
        </trans-unit>
        <trans-unit id="1d7c6f2975be06cdce751120c8ce17812edf9714" translate="yes" xml:space="preserve">
          <source>Return protocol of current URL.</source>
          <target state="translated">現在のURLのプロトコルを返します。</target>
        </trans-unit>
        <trans-unit id="18b8fbc14549d13332fe634d60cd64acc7bbf234" translate="yes" xml:space="preserve">
          <source>Return search part (as object) of current URL when called without any parameter.</source>
          <target state="translated">パラメータを指定せずに呼び出された場合、現在のURLの検索部分(オブジェクト)を返します。</target>
        </trans-unit>
        <trans-unit id="9e2043f80bfdb23de9427764cc68baf2ef7904c2" translate="yes" xml:space="preserve">
          <source>Return the history state object when called without any parameter.</source>
          <target state="translated">パラメータなしで呼び出された場合、履歴状態オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="110ff013828ec54e25bfc2b37603def46e139ae4" translate="yes" xml:space="preserve">
          <source>Returning &lt;code&gt;undefined&lt;/code&gt; from a parser means a parse error occurred. In that case, no &lt;a href=&quot;ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;&lt;code&gt;$validators&lt;/code&gt;&lt;/a&gt; will run and the &lt;code&gt;ngModel&lt;/code&gt; will be set to &lt;code&gt;undefined&lt;/code&gt; unless &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions.allowInvalid&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;true&lt;/code&gt;. The parse error is stored in &lt;code&gt;ngModel.$error.parse&lt;/code&gt;.</source>
          <target state="translated">パーサーから &lt;code&gt;undefined&lt;/code&gt; を返すと、解析エラーが発生しました。その場合、&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions.allowInvalid&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; に設定されて &lt;code&gt;undefined&lt;/code&gt; ない限り、&lt;a href=&quot;ngmodel.ngmodelcontroller#%24validators.html&quot;&gt; &lt;code&gt;$validators&lt;/code&gt; &lt;/a&gt;は実行されず、 &lt;code&gt;ngModel&lt;/code&gt; はundefinedに設定されます。解析エラーは &lt;code&gt;ngModel.$error.parse&lt;/code&gt; 保存されます。</target>
        </trans-unit>
        <trans-unit id="9582a02f141fc4b345b2936eba691cd0654efebc" translate="yes" xml:space="preserve">
          <source>Returns</source>
          <target state="translated">Returns</target>
        </trans-unit>
        <trans-unit id="6322592f617b52f15e691f0664eb67413ed6b4d9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the select element currently has an empty option element, i.e. an option that signifies that the select is empty / the selection is null.</source>
          <target state="translated">select要素に現在空のoption要素がある場合、つまり選択が空であることを示すオプション/選択がnullの場合、 &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2be820c292c48c220766945900a106842fe92493" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the select element has an empty option and this empty option is currently selected. Returns &lt;code&gt;false&lt;/code&gt; if the select element has no empty option or it is not selected.</source>
          <target state="translated">select要素に空のオプションがあり、この空のオプションが現在選択されている場合は、 &lt;code&gt;true&lt;/code&gt; を返します。select要素に空のオプションがないか、選択されていない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="84bd2e384f903fbc16707ec0fe6ebfd47faeb625" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the select element's unknown option is selected. The unknown option is added and automatically selected whenever the select model doesn't match any option.</source>
          <target state="translated">select要素の不明なオプションが選択されている場合は &lt;code&gt;true&lt;/code&gt; を返します。不明なオプションが追加され、選択したモデルがどのオプションとも一致しない場合は常に自動的に選択されます。</target>
        </trans-unit>
        <trans-unit id="181f1c7690856bcb7fcf6731a0fb5201a6ccccc9" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the task hasn't executed yet and was successfully canceled.</source>
          <target state="translated">タスクがまだ実行されておらず、正常にキャンセルされた場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="96717e8f9258537bda3c42a8756552de8cced4c1" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the task was successfully canceled.</source>
          <target state="translated">タスクが正常にキャンセルされた場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="867a62db9c23f0997b39841b28f2e59ddad2bb16" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the task was successfully cancelled.</source>
          <target state="translated">タスクが正常にキャンセルされた場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="15f8467fdef401d96fd8e32cecf9dae076fe71cc" translate="yes" xml:space="preserve">
          <source>Returns a boolean indicating if SCE is enabled.</source>
          <target state="translated">SCEが有効かどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="6a4b36d75da9780449e67995a0c9d8f2357adca9" translate="yes" xml:space="preserve">
          <source>Returns a de-registration function for all listeners.</source>
          <target state="translated">すべてのリスナーの登録解除関数を返します。</target>
        </trans-unit>
        <trans-unit id="b3199c479081525ca17de9a88b742996c4d4425b" translate="yes" xml:space="preserve">
          <source>Returns a de-registration function for this listener. When the de-registration function is executed, the internal watch operation is terminated.</source>
          <target state="translated">このリスナーの登録解除関数を返します。登録解除関数が実行されると、内部監視動作を終了します。</target>
        </trans-unit>
        <trans-unit id="da8b706e428495422b325816f68f7d9fb0924119" translate="yes" xml:space="preserve">
          <source>Returns a deregistration function for this listener.</source>
          <target state="translated">このリスナーの登録解除関数を返します。</target>
        </trans-unit>
        <trans-unit id="a62e22e5f831bc88dd6a0a893e8a44c0774a1e17" translate="yes" xml:space="preserve">
          <source>Returns a deregistration function for this observer.</source>
          <target state="translated">このオブザーバの登録解除関数を返します。</target>
        </trans-unit>
        <trans-unit id="70a6eca6b0045b166ed0f2aa0ff409c9e7abdd47" translate="yes" xml:space="preserve">
          <source>Returns a function which calls function &lt;code&gt;fn&lt;/code&gt; bound to &lt;code&gt;self&lt;/code&gt; (&lt;code&gt;self&lt;/code&gt; becomes the &lt;code&gt;this&lt;/code&gt; for &lt;code&gt;fn&lt;/code&gt;). You can supply optional &lt;code&gt;args&lt;/code&gt; that are prebound to the function. This feature is also known as &lt;a href=&quot;http://en.wikipedia.org/wiki/Partial_application&quot;&gt;partial application&lt;/a&gt;, as distinguished from &lt;a href=&quot;http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application&quot;&gt;function currying&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; バインドされた関数 &lt;code&gt;fn&lt;/code&gt; を呼び出す関数を返します（ &lt;code&gt;self&lt;/code&gt; が &lt;code&gt;fn&lt;/code&gt; の &lt;code&gt;this&lt;/code&gt; になります）。関数に事前バインドされているオプションの &lt;code&gt;args&lt;/code&gt; を指定できます。この機能は、&lt;a href=&quot;http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application&quot;&gt;関数のカリー化とは異なり&lt;/a&gt;、&lt;a href=&quot;http://en.wikipedia.org/wiki/Partial_application&quot;&gt;部分適用&lt;/a&gt;とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="76eaba577560004aed48cfdfe1aa3c8424fd0aa9" translate="yes" xml:space="preserve">
          <source>Returns a key value object with all the cookies</source>
          <target state="translated">すべての Cookie を含むキー値オブジェクトを返します</target>
        </trans-unit>
        <trans-unit id="0a52a1fd016452a1dacdc288a006e2e537121c87" translate="yes" xml:space="preserve">
          <source>Returns a new instance of deferred.</source>
          <target state="translated">deferredの新しいインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="136a5149676161a6fd098efcaeeef0ff90a14b7a" translate="yes" xml:space="preserve">
          <source>Returns a promise of the passed value or promise</source>
          <target state="translated">渡された値のプロミス、またはプロミスを返します。</target>
        </trans-unit>
        <trans-unit id="53f41d95873bd14bb41b9b13964b73702f270a5c" translate="yes" xml:space="preserve">
          <source>Returns a promise that resolves or rejects as soon as one of those promises resolves or rejects, with the value or reason from that promise.</source>
          <target state="translated">いずれかの約束が解決または拒否されるとすぐに解決または拒否される約束を、その約束の値または理由とともに返します。</target>
        </trans-unit>
        <trans-unit id="ef857672d8e5bb92df878c0cd409b4cd4a641e9f" translate="yes" xml:space="preserve">
          <source>Returns a promise that was already resolved as rejected with the &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;reason&lt;/code&gt; 拒否されたものとしてすでに解決されたプロミスを返します。</target>
        </trans-unit>
        <trans-unit id="0f1de3ceadfe205063fa5015ea7133427f3c14e4" translate="yes" xml:space="preserve">
          <source>Returns a single promise that will be resolved with an array/hash of values, each value corresponding to the promise at the same index/key in the &lt;code&gt;promises&lt;/code&gt; array/hash. If any of the promises is resolved with a rejection, this resulting promise will be rejected with the same rejection value.</source>
          <target state="translated">戻り値の配列/ハッシュで解決される単一の約束で同じインデックス/キーでの約束に対応する各値 &lt;code&gt;promises&lt;/code&gt; 配列/ハッシュ。いずれかの約束が拒否によって解決された場合、この結果の約束は同じ拒否値で拒否されます。</target>
        </trans-unit>
        <trans-unit id="2b7aae4d3bb18f409e3f426b3c452cfcca7d02e8" translate="yes" xml:space="preserve">
          <source>Returns a trusted representation of the parameter for the specified context. This trusted object will later on be used as-is, without any security check, by bindings or directives that require this security context. For instance, marking a string as trusted for the &lt;code&gt;$sce.HTML&lt;/code&gt; context will entirely bypass the potential &lt;code&gt;$sanitize&lt;/code&gt; call in corresponding &lt;code&gt;$sce.HTML&lt;/code&gt; bindings or directives, such as &lt;code&gt;ng-bind-html&lt;/code&gt;. Note that in most cases you won't need to call this function: if you have the sanitizer loaded, passing the value itself will render all the HTML that does not pose a security risk.</source>
          <target state="translated">指定されたコンテキストのパラメーターの信頼できる表現を返します。この信頼されたオブジェクトは、後でこのセキュリティコンテキストを必要とするバインディングまたはディレクティブによって、セキュリティチェックなしでそのまま使用されます。たとえば、文字列を &lt;code&gt;$sce.HTML&lt;/code&gt; コンテキストに対して信頼できるものとしてマークすると、対応する &lt;code&gt;$sce.HTML&lt;/code&gt; バインディングまたはディレクティブ（ &lt;code&gt;ng-bind-html&lt;/code&gt; など）での潜在的な &lt;code&gt;$sanitize&lt;/code&gt; 呼び出しが完全にバイパスされます。ほとんどの場合、この関数を呼び出す必要がないことに注意してください。サニタイザーをロードしている場合、値自体を渡すと、セキュリティリスクを引き起こさないすべてのHTMLがレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="e63ee47d380d94c7114daa75d9a484cd818b0895" translate="yes" xml:space="preserve">
          <source>Returns an array containing the items from the specified &lt;code&gt;collection&lt;/code&gt;, ordered by a &lt;code&gt;comparator&lt;/code&gt; function based on the values computed using the &lt;code&gt;expression&lt;/code&gt; predicate.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; 述語を使用して計算された値に基づいて &lt;code&gt;comparator&lt;/code&gt; 関数によって順序付けされた、指定された &lt;code&gt;collection&lt;/code&gt; 項目を含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="c7812902dff27c75deda49f81fee7823d71feecf" translate="yes" xml:space="preserve">
          <source>Returns an array of service names which the function is requesting for injection. This API is used by the injector to determine which services need to be injected into the function when the function is invoked. There are three ways in which the function can be annotated with the needed dependencies.</source>
          <target state="translated">関数が注入を要求しているサービス名の配列を返します。この API は、関数が起動された際にどのサービスが関数に注入される必要があるかを判断するためにインジェクタによって使用されます。関数に必要な依存関係をアノテーションするには、3 つの方法があります。</target>
        </trans-unit>
        <trans-unit id="92130a2ac23bc3fb5d32303cc360ae1afb6c8f1e" translate="yes" xml:space="preserve">
          <source>Returns an object with &lt;code&gt;respond&lt;/code&gt; and &lt;code&gt;passThrough&lt;/code&gt; methods that control how a matched request is handled. You can save this object for later use and invoke &lt;code&gt;respond&lt;/code&gt; or &lt;code&gt;passThrough&lt;/code&gt; again in order to change how a matched request is handled.</source>
          <target state="translated">一致した要求の処理方法を制御 &lt;code&gt;respond&lt;/code&gt; および &lt;code&gt;passThrough&lt;/code&gt; メソッドを持つオブジェクトを返します。このオブジェクトを後で使用するために保存し、一致したリクエストの処理方法を変更するために、 &lt;code&gt;respond&lt;/code&gt; または &lt;code&gt;passThrough&lt;/code&gt; を再度呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b12454311ab476fb55e3d251419c65cd614f0f0d" translate="yes" xml:space="preserve">
          <source>Returns an object with &lt;code&gt;respond&lt;/code&gt; method that controls how a matched request is handled. You can save this object for later use and invoke &lt;code&gt;respond&lt;/code&gt; again in order to change how a matched request is handled.</source>
          <target state="translated">一致した要求の処理方法を制御する &lt;code&gt;respond&lt;/code&gt; メソッドを持つオブジェクトを返します。このオブジェクトを後で使用するために保存し、一致した要求の処理方法を変更するために &lt;code&gt;respond&lt;/code&gt; 再度呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="8f047416d0b927febeecefb5e718bd2f9a2df1b6" translate="yes" xml:space="preserve">
          <source>Returns an object with &lt;code&gt;respond&lt;/code&gt; method that controls how a matched request is handled. You can save this object for later use and invoke &lt;code&gt;respond&lt;/code&gt; again in order to change how a matched request is handled. See #expect for more info.</source>
          <target state="translated">一致した要求の処理方法を制御する &lt;code&gt;respond&lt;/code&gt; メソッドを持つオブジェクトを返します。このオブジェクトを後で使用するために保存し、一致した要求の処理方法を変更するために &lt;code&gt;respond&lt;/code&gt; 再度呼び出すことができます。詳細は#expectを参照してください。</target>
        </trans-unit>
        <trans-unit id="febb41850b2ea1bde8532f9d32840c151719f31c" translate="yes" xml:space="preserve">
          <source>Returns an object with &lt;code&gt;respond&lt;/code&gt; method that controls how a matched request is handled. You can save this object for later use and invoke &lt;code&gt;respond&lt;/code&gt; again in order to change how a matched request is handled. See &lt;a href=&quot;%24httpbackend#expect.html&quot;&gt;&lt;code&gt;expect&lt;/code&gt;&lt;/a&gt; for more info.</source>
          <target state="translated">一致した要求の処理方法を制御する &lt;code&gt;respond&lt;/code&gt; メソッドを持つオブジェクトを返します。このオブジェクトを後で使用するために保存し、一致した要求の処理方法を変更するために &lt;code&gt;respond&lt;/code&gt; 再度呼び出すことができます。詳細について&lt;a href=&quot;%24httpbackend#expect.html&quot;&gt; &lt;code&gt;expect&lt;/code&gt; &lt;/a&gt;、expectを参照してください。</target>
        </trans-unit>
        <trans-unit id="02fb6420d8c8e60003b530a7c0b9efa52506b950" translate="yes" xml:space="preserve">
          <source>Returns an object with &lt;code&gt;respond&lt;/code&gt; method that controls how a matched request is handled. You can save this object for later use and invoke &lt;code&gt;respond&lt;/code&gt; again in order to change how a matched request is handled. See &lt;a href=&quot;%24httpbackend#when.html&quot;&gt;&lt;code&gt;when&lt;/code&gt;&lt;/a&gt; for more info.</source>
          <target state="translated">一致した要求の処理方法を制御する &lt;code&gt;respond&lt;/code&gt; メソッドを持つオブジェクトを返します。このオブジェクトを後で使用するために保存し、一致した要求の処理方法を変更するために &lt;code&gt;respond&lt;/code&gt; 再度呼び出すことができます。詳細については&lt;a href=&quot;%24httpbackend#when.html&quot;&gt; &lt;code&gt;when&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fbcad89ebd6ebd347f43b569c186847060998b49" translate="yes" xml:space="preserve">
          <source>Returns self for chaining.</source>
          <target state="translated">連鎖のための self を返します。</target>
        </trans-unit>
        <trans-unit id="c1a2a6fe4c577bdba410ad77f0ccde833e7c1887" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;../service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; options when used as getter and self if used as setter.</source>
          <target state="translated">ゲッターとして使用した場合は&lt;a href=&quot;../service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;オプションを、セッターとして使用した場合はselfを返します。</target>
        </trans-unit>
        <trans-unit id="7a0b054676e6ac8ef163680f448b297979e55786" translate="yes" xml:space="preserve">
          <source>Returns the currently configured value if called without an argument or self for chaining otherwise.</source>
          <target state="translated">引数なしで呼び出された場合は現在設定されている値を返し、そうでない場合は連結のためにselfを返します。</target>
        </trans-unit>
        <trans-unit id="7566a0737921da5fa5699819d77a23be22ebc138" translate="yes" xml:space="preserve">
          <source>Returns the deserialized value of given cookie key</source>
          <target state="translated">与えられたクッキーキーのデシリアライズされた値を返します。</target>
        </trans-unit>
        <trans-unit id="ac1fa2af0777e89e79281d48c66da8366cebd038" translate="yes" xml:space="preserve">
          <source>Returns the hash fragment when called without any parameters.</source>
          <target state="translated">パラメータを指定せずに呼び出された場合、ハッシュフラグメントを返します。</target>
        </trans-unit>
        <trans-unit id="bc4c7aa6bc7052877ba14c90df407adc10fbbf79" translate="yes" xml:space="preserve">
          <source>Returns the newly created injector for this app.</source>
          <target state="translated">このアプリのために新しく作成されたインジェクタを返します。</target>
        </trans-unit>
        <trans-unit id="b123de86d068011c16640c3bb3f09ea32bf5b046" translate="yes" xml:space="preserve">
          <source>Returns the symbol when used as getter and self if used as setter.</source>
          <target state="translated">ゲッターとして使用した場合はシンボルを、セッターとして使用した場合はselfを返します。</target>
        </trans-unit>
        <trans-unit id="1c26a024ab2a1085285618d5276acb4f34dbdaba" translate="yes" xml:space="preserve">
          <source>Returns the value of given cookie key</source>
          <target state="translated">指定したクッキーキーの値を返します。</target>
        </trans-unit>
        <trans-unit id="4b0f507f707432410cc232ce8c8391aa310c2b61" translate="yes" xml:space="preserve">
          <source>Returns the value of the given option</source>
          <target state="translated">指定したオプションの値を返します。</target>
        </trans-unit>
        <trans-unit id="f2ef6265c021653aef5295a30225ad8ccd92d4d1" translate="yes" xml:space="preserve">
          <source>Reusing and Overriding Messages</source>
          <target state="translated">メッセージの再利用とオーバーライド</target>
        </trans-unit>
        <trans-unit id="3cf34505e224585e164828aeb4eda4ea440ca96d" translate="yes" xml:space="preserve">
          <source>Right click on the element of interest in your browser and select 'inspect element'. You should see the browser debugger with the element you clicked on highlighted.</source>
          <target state="translated">ブラウザで興味のある要素を右クリックし、「要素の検査」を選択します。クリックした要素がハイライトされたブラウザデバッガが表示されます。</target>
        </trans-unit>
        <trans-unit id="b1282afa099110ef5bab27cf0d0743ad34ccd017" translate="yes" xml:space="preserve">
          <source>Right now, the &lt;code&gt;InvoiceController&lt;/code&gt; contains all logic of our example. When the application grows it is a good practice to move view-independent logic from the controller into a &lt;a href=&quot;services&quot;&gt;service&lt;/a&gt;, so it can be reused by other parts of the application as well. Later on, we could also change that service to load the exchange rates from the web, e.g. by calling the &lt;a href=&quot;https://exchangeratesapi.io&quot;&gt;exchangeratesapi.io&lt;/a&gt; exchange rate API, without changing the controller.</source>
          <target state="translated">現在、 &lt;code&gt;InvoiceController&lt;/code&gt; には例のすべてのロジックが含まれています。アプリケーションが大きくなったときは、ビューに依存しないロジックをコントローラーから&lt;a href=&quot;services&quot;&gt;サービス&lt;/a&gt;に移動して、アプリケーションの他の部分でも再利用できるようにすることをお勧めします。後で、コントローラーを変更せずに、&lt;a href=&quot;https://exchangeratesapi.io&quot;&gt;exchangerateatesapi.io&lt;/a&gt;為替レートAPIを呼び出すなどして、ウェブから為替レートを読み込むようにそのサービスを変更することもできます。</target>
        </trans-unit>
        <trans-unit id="388dc3a13e7c2df62a7d0113aee4bc60c22fb08f" translate="yes" xml:space="preserve">
          <source>Rollback all form controls pending updates to the &lt;code&gt;$modelValue&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$modelValue&lt;/code&gt; への更新を保留しているすべてのフォームコントロールをロールバックします。</target>
        </trans-unit>
        <trans-unit id="5996cf7c4ec8a2ea89e5c3d6b6268347017db8ab" translate="yes" xml:space="preserve">
          <source>RootRouter</source>
          <target state="translated">RootRouter</target>
        </trans-unit>
        <trans-unit id="a8b9a80d5b6fe314ec0617a6cf219163ebb328aa" translate="yes" xml:space="preserve">
          <source>Route path (matched against &lt;code&gt;$location.path&lt;/code&gt;). If &lt;code&gt;$location.path&lt;/code&gt; contains redundant trailing slash or is missing one, the route will still match and the &lt;code&gt;$location.path&lt;/code&gt; will be updated to add or drop the trailing slash to exactly match the route definition.</source>
          <target state="translated">ルートパス（ &lt;code&gt;$location.path&lt;/code&gt; と照合）。場合は &lt;code&gt;$location.path&lt;/code&gt; 冗長末尾にスラッシュが含まれているか、1が欠落している、ルートはまだ一致し、 &lt;code&gt;$location.path&lt;/code&gt; 正確にルート定義に一致するように末尾のスラッシュを追加または削除するように更新されます。</target>
        </trans-unit>
        <trans-unit id="8dcd12c669cda5e58092102e97cb8d8dd360a58b" translate="yes" xml:space="preserve">
          <source>RouteDefinition</source>
          <target state="translated">RouteDefinition</target>
        </trans-unit>
        <trans-unit id="76a5f5f22494bf6a3c36afbf4839eb11b038893c" translate="yes" xml:space="preserve">
          <source>RouteParams</source>
          <target state="translated">RouteParams</target>
        </trans-unit>
        <trans-unit id="6dcf16e1c5d3e9fd2ae4a4d54c174448fe43e1b6" translate="yes" xml:space="preserve">
          <source>Router</source>
          <target state="translated">Router</target>
        </trans-unit>
        <trans-unit id="8183a5a123ef606156a7236c70c6654dd427ccb8" translate="yes" xml:space="preserve">
          <source>Routers and &quot;Routing Component&quot; instances have a 1:1 correspondence.</source>
          <target state="translated">ルータと「ルーティングコンポーネント」インスタンスは、1:1の対応をしています。</target>
        </trans-unit>
        <trans-unit id="83fdf92a177cbfa66587a728de0b8ede57b01242" translate="yes" xml:space="preserve">
          <source>Routes that specify &lt;code&gt;redirectTo&lt;/code&gt; will not have their controllers, template functions or resolves called, the &lt;code&gt;$location&lt;/code&gt; will be changed to the redirect url and route processing will stop. The exception to this is if the &lt;code&gt;redirectTo&lt;/code&gt; is a function that returns &lt;code&gt;undefined&lt;/code&gt;. In this case the route transition occurs as though there was no redirection.</source>
          <target state="translated">&lt;code&gt;redirectTo&lt;/code&gt; を指定するルートでは、コントローラー、テンプレート関数、またはresolvesが呼び出されず、 &lt;code&gt;$location&lt;/code&gt; がリダイレクトURLに変更され、ルート処理が停止します。これの例外は、 &lt;code&gt;redirectTo&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; を返す関数である場合です。この場合、リダイレクションがないかのようにルート遷移が発生します。</target>
        </trans-unit>
        <trans-unit id="e7b1153512a20069add6781cd8603848df2e4812" translate="yes" xml:space="preserve">
          <source>Run Blocks</source>
          <target state="translated">ランブロック</target>
        </trans-unit>
        <trans-unit id="6722ce3ddf6850ce91e5f88f346e10e3149acc4e" translate="yes" xml:space="preserve">
          <source>Run blocks are the closest thing in AngularJS to the main method. A run block is the code which needs to run to kickstart the application. It is executed after all of the services have been configured and the injector has been created. Run blocks typically contain code which is hard to unit-test, and for this reason should be declared in isolated modules, so that they can be ignored in the unit-tests.</source>
          <target state="translated">ランブロックはAngularJSではメインメソッドに最も近いものです。ランブロックはアプリケーションをキックスタートさせるために実行する必要があるコードです。すべてのサービスが設定され、インジェクタが作成された後に実行されます。ランブロックには通常ユニットテストが難しいコードが含まれており、ユニットテストで無視できるように隔離されたモジュールで宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="1c8d88336270bc857b4196cfd5d242d75f0df581" translate="yes" xml:space="preserve">
          <source>Running in Production</source>
          <target state="translated">製造中の走行</target>
        </trans-unit>
        <trans-unit id="6bf708b8b6443fe6b3516682e7295e2172a361cc" translate="yes" xml:space="preserve">
          <source>Runs each of the registered validators (first synchronous validators and then asynchronous validators). If the validity changes to invalid, the model will be set to &lt;code&gt;undefined&lt;/code&gt;, unless &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions.allowInvalid&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;true&lt;/code&gt;. If the validity changes to valid, it will set the model to the last available valid &lt;code&gt;$modelValue&lt;/code&gt;, i.e. either the last parsed value or the last value set from the scope.</source>
          <target state="translated">登録された各バリデーターを実行します（最初に同期バリデーター、次に非同期バリデーター）。有効性が無効に変更された場合、&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions.allowInvalid&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; でない限り、モデルは &lt;code&gt;undefined&lt;/code&gt; に設定されます。有効性が有効に変更されると、モデルは最後に使用可能な有効な &lt;code&gt;$modelValue&lt;/code&gt; に設定されます。つまり、最後に解析された値またはスコープから設定された最後の値のいずれかです。</target>
        </trans-unit>
        <trans-unit id="51a25d271cdba006eac5b5ccdf053324c5952492" translate="yes" xml:space="preserve">
          <source>Runs interval tasks scheduled to be run in the next &lt;code&gt;millis&lt;/code&gt; milliseconds.</source>
          <target state="translated">次の中で実行されるようにスケジュールされた間隔たタスク実行します &lt;code&gt;millis&lt;/code&gt; ミリ秒。</target>
        </trans-unit>
        <trans-unit id="4d98cf965492ebc44005e85cab154fe7869e024c" translate="yes" xml:space="preserve">
          <source>Runs the model -&amp;gt; view pipeline on the current &lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt;$modelValue&lt;/a&gt;.</source>
          <target state="translated">現在の&lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt;$ modelValueで&lt;/a&gt;モデル-&amp;gt;ビューパイプラインを実行します。</target>
        </trans-unit>
        <trans-unit id="2694e7251db3dfe3d11328de106646d2159d761d" translate="yes" xml:space="preserve">
          <source>Runtime equivalent of the &lt;code&gt;$httpProvider.defaults&lt;/code&gt; property. Allows configuration of default headers, withCredentials as well as request and response transformations.</source>
          <target state="translated">&lt;code&gt;$httpProvider.defaults&lt;/code&gt; プロパティに相当するランタイム。デフォルトヘッダー、withCredentials、およびリクエストとレスポンスの変換を設定できます。</target>
        </trans-unit>
        <trans-unit id="14edc209d09ed27caa061a338e4aa18cb1b36a06" translate="yes" xml:space="preserve">
          <source>Sample project</source>
          <target state="translated">サンプルプロジェクト</target>
        </trans-unit>
        <trans-unit id="3344d56affca2f26f3349fbdd450598c93585333" translate="yes" xml:space="preserve">
          <source>Sandbox removal</source>
          <target state="translated">サンドボックスの除去</target>
        </trans-unit>
        <trans-unit id="0f3d939de1df71ef2e1f63f17842b0611b8ef64d" translate="yes" xml:space="preserve">
          <source>Sanitized HTML.</source>
          <target state="translated">サニタイズされたHTML。</target>
        </trans-unit>
        <trans-unit id="580aa4cc01f79a6c59249fb583ca11e7ec51d9fe" translate="yes" xml:space="preserve">
          <source>Sanitizes an html string by stripping all potentially dangerous tokens.</source>
          <target state="translated">潜在的に危険なトークンをすべて取り除くことで、HTML文字列をサニタイズします。</target>
        </trans-unit>
        <trans-unit id="9e175993438b3e28876508d6f59beb5b4a306211" translate="yes" xml:space="preserve">
          <source>Savvy readers may be wondering what the difference is between &lt;code&gt;link&lt;/code&gt; and &lt;code&gt;controller&lt;/code&gt;. The basic difference is that &lt;code&gt;controller&lt;/code&gt; can expose an API, and &lt;code&gt;link&lt;/code&gt; functions can interact with controllers using &lt;code&gt;require&lt;/code&gt;.</source>
          <target state="translated">知識の豊富な読者は、 &lt;code&gt;link&lt;/code&gt; と &lt;code&gt;controller&lt;/code&gt; 違いは何か疑問に思うかもしれません。基本的な違いは、 &lt;code&gt;controller&lt;/code&gt; がAPIを公開できることと、 &lt;code&gt;link&lt;/code&gt; 関数が &lt;code&gt;require&lt;/code&gt; を使用してコントローラーとやり取りできることです。</target>
        </trans-unit>
        <trans-unit id="0026a1fa21295bd980ca8124863ef3160c0b9ac7" translate="yes" xml:space="preserve">
          <source>Say for example we have the following template code:</source>
          <target state="translated">例えば、次のようなテンプレートコードがあるとします。</target>
        </trans-unit>
        <trans-unit id="c722c123fc2fd2bee33be1a4dd76341ecd74052f" translate="yes" xml:space="preserve">
          <source>Schedule the invocation of $apply to occur at a later time. The actual time difference varies across browsers, but is typically around ~10 milliseconds.</source>
          <target state="translated">後日、$apply の呼び出しを実行するようにスケジュールします。実際の時間差はブラウザによって異なりますが、通常は約10ミリ秒程度です。</target>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="translated">Scope</target>
        </trans-unit>
        <trans-unit id="d62f8def19ab323ad10bffef70588ee9540fc2d6" translate="yes" xml:space="preserve">
          <source>Scope $watch Depths</source>
          <target state="translated">スコープ $watch Depths</target>
        </trans-unit>
        <trans-unit id="a0d0cff31594de76eaec1ced0bc0427022b195e7" translate="yes" xml:space="preserve">
          <source>Scope $watch Performance Considerations</source>
          <target state="translated">スコープ $watch パフォーマンスに関する考察</target>
        </trans-unit>
        <trans-unit id="302b65ae6f117c3e38e7c18bfe45c77b70add9db" translate="yes" xml:space="preserve">
          <source>Scope Events Propagation</source>
          <target state="translated">スコープイベント伝搬</target>
        </trans-unit>
        <trans-unit id="14241b753df73c19b8820274254a2c60ac0f3554" translate="yes" xml:space="preserve">
          <source>Scope Hierarchies</source>
          <target state="translated">スコープ階層</target>
        </trans-unit>
        <trans-unit id="235fb31c091c88a3fb9489274d806ccefa3ab9aa" translate="yes" xml:space="preserve">
          <source>Scope Life Cycle</source>
          <target state="translated">スコープのライフサイクル</target>
        </trans-unit>
        <trans-unit id="d0976b956d6be8d6a8545b0183535a72f8ebf106" translate="yes" xml:space="preserve">
          <source>Scope and DOMWindow objects are being compared only by identify (&lt;code&gt;===&lt;/code&gt;).</source>
          <target state="translated">スコープとDOMWindowオブジェクトは、識別（ &lt;code&gt;===&lt;/code&gt; ）によってのみ比較されます。</target>
        </trans-unit>
        <trans-unit id="916a87217731f57973f048683cb4e97fb8e65898" translate="yes" xml:space="preserve">
          <source>Scope as Data-Model</source>
          <target state="translated">データモデルとしてのスコープ</target>
        </trans-unit>
        <trans-unit id="bc212604b2d7699ce510ae90a60dff8c0da3bd01" translate="yes" xml:space="preserve">
          <source>Scope characteristics</source>
          <target state="translated">スコープ特性</target>
        </trans-unit>
        <trans-unit id="439fa51120c7e99613ab6ed03151eda647cd3102" translate="yes" xml:space="preserve">
          <source>Scope is the glue between application controller and the view. During the template &lt;a href=&quot;compiler&quot;&gt;linking&lt;/a&gt; phase the &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt; set up &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;&lt;code&gt;$watch&lt;/code&gt;&lt;/a&gt; expressions on the scope. The &lt;code&gt;$watch&lt;/code&gt; allows the directives to be notified of property changes, which allows the directive to render the updated value to the DOM.</source>
          <target state="translated">スコープは、アプリケーションコントローラとビューの間の接着剤です。テンプレートの&lt;a href=&quot;compiler&quot;&gt;リンク&lt;/a&gt;段階で、&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;ディレクティブ&lt;/a&gt;はスコープに&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt; &lt;code&gt;$watch&lt;/code&gt; &lt;/a&gt;式を設定します。 &lt;code&gt;$watch&lt;/code&gt; ディレクティブは、ディレクティブはDOMに更新された値をレンダリングすることを可能にするプロパティの変更の通知を受けることができます。</target>
        </trans-unit>
        <trans-unit id="bd3e0ec8cb2c6725e8aebcf009d5a5f0c7046543" translate="yes" xml:space="preserve">
          <source>Scope's &lt;code&gt;$apply()&lt;/code&gt; method transitions through the following stages:</source>
          <target state="translated">スコープの &lt;code&gt;$apply()&lt;/code&gt; メソッドは、次の段階を経て遷移します。</target>
        </trans-unit>
        <trans-unit id="c23540e5fb551edff0ac95649a1d551f9736d55e" translate="yes" xml:space="preserve">
          <source>Scopes</source>
          <target state="translated">Scopes</target>
        </trans-unit>
        <trans-unit id="e3c4eecb101b53837a98d4900e291d21207bd54b" translate="yes" xml:space="preserve">
          <source>Scopes and Directives</source>
          <target state="translated">スコープとディレクティブ</target>
        </trans-unit>
        <trans-unit id="b0f972ffeb44595b9c559cde18f280bbcdb9f0ed" translate="yes" xml:space="preserve">
          <source>Scopes and controllers interact with each other in the following situations:</source>
          <target state="translated">スコープとコントローラは、次のような状況で相互に作用します。</target>
        </trans-unit>
        <trans-unit id="e2e9569b987d972c9628df7d29a9a7916ae77fe8" translate="yes" xml:space="preserve">
          <source>Scopes are attached to the DOM as &lt;code&gt;$scope&lt;/code&gt; data property, and can be retrieved for debugging purposes. (It is unlikely that one would need to retrieve scopes in this way inside the application.) The location where the root scope is attached to the DOM is defined by the location of &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ng-app&lt;/code&gt;&lt;/a&gt; directive. Typically &lt;code&gt;ng-app&lt;/code&gt; is placed on the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element, but it can be placed on other elements as well, if, for example, only a portion of the view needs to be controlled by AngularJS.</source>
          <target state="translated">スコープは &lt;code&gt;$scope&lt;/code&gt; dataプロパティとしてDOMにアタッチされ、デバッグ目的で取得できます。 （アプリケーション内でこの方法でスコープを取得する必要があることはほとんどありません。）ルートスコープがDOMにアタッチされる場所は、&lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ng-app&lt;/code&gt; &lt;/a&gt;ディレクティブの場所によって定義されます。通常、 &lt;code&gt;ng-app&lt;/code&gt; は &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 要素に配置されますが、たとえばビューの一部のみをAngularJSで制御する必要がある場合は、他の要素にも配置できます。</target>
        </trans-unit>
        <trans-unit id="4d7b2296b8556dc8d3127680a232536b62a2e88a" translate="yes" xml:space="preserve">
          <source>Scopes can be nested to limit access to the properties of application components while providing access to shared model properties. Nested scopes are either &quot;child scopes&quot; or &quot;isolate scopes&quot;. A &quot;child scope&quot; (prototypically) inherits properties from its parent scope. An &quot;isolate scope&quot; does not. See &lt;a href=&quot;directive#isolating-the-scope-of-a-directive.html&quot;&gt;isolated scopes&lt;/a&gt; for more information.</source>
          <target state="translated">スコープをネストして、共有コンポーネントのプロパティへのアクセスを提供しながら、アプリケーションコンポーネントのプロパティへのアクセスを制限できます。ネストされたスコープは、「子スコープ」または「分離スコープ」のいずれかです。「子スコープ」は（典型的には）親スコープからプロパティを継承します。「分離スコープ」にはありません。詳細については、&lt;a href=&quot;directive#isolating-the-scope-of-a-directive.html&quot;&gt;分離スコープ&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="305cd57d6f32dc5f9b280f00159d0df0f3023e4e" translate="yes" xml:space="preserve">
          <source>Scopes can propagate events in similar fashion to DOM events. The event can be &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24broadcast.html&quot;&gt;broadcasted&lt;/a&gt; to the scope children or &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24emit.html&quot;&gt;emitted&lt;/a&gt; to scope parents.</source>
          <target state="translated">スコープは、DOMイベントと同様の方法でイベントを伝播できます。イベントが可能な&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24broadcast.html&quot;&gt;放送&lt;/a&gt;範囲の子供にまたは&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24emit.html&quot;&gt;放出された&lt;/a&gt;スコープの親に。</target>
        </trans-unit>
        <trans-unit id="d1a3bd31aed7d75d260f08509418244324e8a207" translate="yes" xml:space="preserve">
          <source>Scopes provide APIs (&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt;) to propagate any model changes through the system into the view from outside of the &quot;AngularJS realm&quot; (controllers, services, AngularJS event handlers).</source>
          <target state="translated">スコープは、システムを介して「AngularJSレルム」の外部（コントローラー、サービス、AngularJSイベントハンドラー）からビューにモデルの変更を伝達するためのAPI（&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply&lt;/a&gt;）を提供します。</target>
        </trans-unit>
        <trans-unit id="11ac5700c534742d0e8c9053281de57235e54557" translate="yes" xml:space="preserve">
          <source>Scopes provide APIs (&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt;) to observe model mutations.</source>
          <target state="translated">スコープは、モデルの変更を&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;監視&lt;/a&gt;するためのAPI（$ watch）を提供します。</target>
        </trans-unit>
        <trans-unit id="ce449a4334e989d4805feb6f59bfbc096fd1d3f1" translate="yes" xml:space="preserve">
          <source>Scopes provide context against which &lt;a href=&quot;expression&quot;&gt;expressions&lt;/a&gt; are evaluated. For example &lt;code&gt;{{username}}&lt;/code&gt; expression is meaningless, unless it is evaluated against a specific scope which defines the &lt;code&gt;username&lt;/code&gt; property.</source>
          <target state="translated">スコープは、&lt;a href=&quot;expression&quot;&gt;式&lt;/a&gt;が評価されるコンテキストを提供します。たとえば、 &lt;code&gt;{{username}}&lt;/code&gt; 式は、 &lt;code&gt;username&lt;/code&gt; プロパティを定義する特定のスコープに対して評価されない限り、意味がありません。</target>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">Security</target>
        </trans-unit>
        <trans-unit id="402cc3b6686cd294cb10dd3f5bccbebd0edd8a9b" translate="yes" xml:space="preserve">
          <source>Security Considerations</source>
          <target state="translated">セキュリティへの配慮</target>
        </trans-unit>
        <trans-unit id="c656e13929f42b006319c02054f25a66cda15f73" translate="yes" xml:space="preserve">
          <source>See &quot;Setting HTTP Headers&quot; and &quot;Transforming Requests and Responses&quot; sections above.</source>
          <target state="translated">上記の「HTTPヘッダの設定」と「リクエストとレスポンスの変換」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2ce580465f075a927c26bd792f620faeb08178d8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;%24resource#using-interceptors.html&quot;&gt;below&lt;/a&gt; for an example of using interceptors in &lt;code&gt;$resource&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$resource&lt;/code&gt; インターセプターを使用する例については、&lt;a href=&quot;%24resource#using-interceptors.html&quot;&gt;以下&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9a0f7cdb05f0d1da3c48719d367b1b98eaed811b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;%24rootscope.scope#%24suspend.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; for information about the dangers of using this approach.</source>
          <target state="translated">このアプローチを使用することの危険性については、&lt;a href=&quot;%24rootscope.scope#%24suspend.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9ab6e9c3878b3b65c683ceec3e46af03e5068396" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;getTrusted&lt;/a&gt; for the function that will consume those trusted values, and &lt;a href=&quot;%24sce&quot;&gt;$sce&lt;/a&gt; for general documentation about strict contextual escaping.</source>
          <target state="translated">これらの信頼できる値を消費する関数については&lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;getTrusted&lt;/a&gt;を、厳密なコンテキストエスケープに関する一般的なドキュメントについては&lt;a href=&quot;%24sce&quot;&gt;$ &lt;/a&gt;sceを参照してください。</target>
        </trans-unit>
        <trans-unit id="08a2abfd00cc89b00d13557bd045d8a7fc819d20" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../auto/service/%24provide#decorator.html&quot;&gt;$provide.decorator()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../auto/service/%24provide#decorator.html&quot;&gt;$ provide.decorator（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4881e6ea68349cef48089f2f637bc14482f49cf0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../auto/service/%24provide#factory.html&quot;&gt;$provide.factory()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../auto/service/%24provide#factory.html&quot;&gt;$ provide.factory（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bc816366c830b4ded4b6885c7268a758294924b3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../auto/service/%24provide#provider.html&quot;&gt;$provide.provider()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../auto/service/%24provide#provider.html&quot;&gt;$ provide.provider（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="802e7e1e8c14b1ed28b14aaa7fe5ba0c8a8729a5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../auto/service/%24provide#service.html&quot;&gt;$provide.service()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../auto/service/%24provide#service.html&quot;&gt;$ provide.service（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1492fdd835886f46960aff4b15c1ea7527996eee" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../auto/service/%24provide#value.html&quot;&gt;$provide.value()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../auto/service/%24provide#value.html&quot;&gt;$ provide.value（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d4702c3d54b709af87dc2b647ec20769598ffc5d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions&lt;/code&gt;&lt;/a&gt; for information about what options can be specified and how model option inheritance works.</source>
          <target state="translated">指定できるオプションとモデルオプションの継承のしくみについては、&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="45e9c3ebaad21216152aaedcba8b19ad6f025f8c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../provider/%24animateprovider#register.html&quot;&gt;$animateProvider.register()&lt;/a&gt; and &lt;a href=&quot;../../nganimate&quot;&gt;ngAnimate module&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../provider/%24animateprovider#register.html&quot;&gt;$ animateProvider.register（）&lt;/a&gt;および&lt;a href=&quot;../../nganimate&quot;&gt;ngAnimateモジュール&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="658501b0548d68515ff6b170517e8aa37a8f25fc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../provider/%24compileprovider#component.html&quot;&gt;$compileProvider.component()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24compileprovider#component.html&quot;&gt;$ compileProvider.component（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="33da85697433ddb423abb205cb0071fc01ab0c67" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../provider/%24compileprovider#debugInfoEnabled.html&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt; for more.</source>
          <target state="translated">詳細は&lt;a href=&quot;../provider/%24compileprovider#debugInfoEnabled.html&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="8e7660c1158870c4e303c6c71117d715a3757a1a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;$compileProvider.directive()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;$ compileProvider.directive（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3680a0f086330aee3870b424d3ec342433ba7964" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../provider/%24controllerprovider#register.html&quot;&gt;$controllerProvider.register()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24controllerprovider#register.html&quot;&gt;$ controllerProvider.register（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="24b5bfecbf9bb5014e4c2c79d7ace634c3181572" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../provider/%24filterprovider#register.html&quot;&gt;$filterProvider.register()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24filterprovider#register.html&quot;&gt;$ filterProvider.register（）を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d993d3401264eac8064f38c18942944ab3315a88" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../service/%24route#examples.html&quot;&gt;$route&lt;/a&gt; for an example of configuring and using &lt;code&gt;ngRoute&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngRoute&lt;/code&gt; の構成と使用の例については、&lt;a href=&quot;../service/%24route#examples.html&quot;&gt;$ route&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="078f7235c75d6b9194ec298e0b95e74d1ffd82cc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;angular.mock.inject&quot;&gt;inject&lt;/a&gt; for usage example</source>
          <target state="translated">使用例については、&lt;a href=&quot;angular.mock.inject&quot;&gt;inject&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="913150b7af43d4803c12014f2495d922c6f53ce1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;di#using-dependency-injection.html&quot;&gt;Using Dependency Injection&lt;/a&gt; to find out which dependencies can be injected in each method.</source>
          <target state="translated">各メソッドで注入できる依存関係を確認するには、依存&lt;a href=&quot;di#using-dependency-injection.html&quot;&gt;関係注入の使用を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="34a10d5c19333054e6759e18c71a55e84a1b5185" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;directive&quot;&gt;&lt;code&gt;$compileProvider.directive&lt;/code&gt;&lt;/a&gt; for more info.</source>
          <target state="translated">詳細については、&lt;a href=&quot;directive&quot;&gt; &lt;code&gt;$compileProvider.directive&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="788b9222c3928afb09f4b7e9ad07a03aa9ce0a97" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;form.formcontroller#%24error.html&quot;&gt;$error&lt;/a&gt; for a list of built-in validation tokens.</source>
          <target state="translated">組み込みの検証トークンのリストについては、&lt;a href=&quot;form.formcontroller#%24error.html&quot;&gt;$ error&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d368454c2e9095f2ee9538a7b3902eef5c5e921e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit&quot;&gt;the design doc&lt;/a&gt; for more information.</source>
          <target state="translated">詳細について&lt;a href=&quot;https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit&quot;&gt;は、設計ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6c9dadfccbd374155d0b83905fbf6db42471eb01" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/angular/angular.js/issues/14018&quot;&gt;https://github.com/angular/angular.js/issues/14018&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/angular/angular.js/issues/14018&quot;&gt;https：//github.com/angular/angular.js/issues/14018&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="965fb29fc499cec553ef8ae9cda41d3773f4c576" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/angular/angular.js/pull/14221&quot;&gt;https://github.com/angular/angular.js/pull/14221&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/angular/angular.js/pull/14221&quot;&gt;https：//github.com/angular/angular.js/pull/14221&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="98bc08e70cdb8a19e8f8ebd22122e19a9f54a166" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/angular/angular.js/pull/14610#issuecomment-219401099&quot;&gt;https://github.com/angular/angular.js/pull/14610#issuecomment-219401099&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/angular/angular.js/pull/14610#issuecomment-219401099&quot;&gt;https：//github.com/angular/angular.js/pull/14610#issuecomment-219401099&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1c0e9938efdfba23465cbe6b8ab60e447cad7f63" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;module#module-loading.html&quot;&gt;Modules&lt;/a&gt; for more details about &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; blocks and &lt;a href=&quot;providers&quot;&gt;Providers&lt;/a&gt; for more information about the different provider types.</source>
          <target state="translated">参照&lt;a href=&quot;module#module-loading.html&quot;&gt;モジュールの&lt;/a&gt;詳細については &lt;code&gt;run&lt;/code&gt; し、 &lt;code&gt;config&lt;/code&gt; ブロックと&lt;a href=&quot;providers&quot;&gt;プロバイダ&lt;/a&gt;別のプロバイダの種類の詳細については。</target>
        </trans-unit>
        <trans-unit id="3bc920667f9c77737168e5d37cbdaf815ee9f2e4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngclick&quot;&gt;ngClick&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ngclick&quot;&gt;ngClickを&lt;/a&gt;参照</target>
        </trans-unit>
        <trans-unit id="4c8ebb4aa13aea65763e9630efc734b8dacab942" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngcookies/service/%24cookies&quot;&gt;&lt;code&gt;$cookies&lt;/code&gt;&lt;/a&gt; for usage.</source>
          <target state="translated">使用法については&lt;a href=&quot;ngcookies/service/%24cookies&quot;&gt; &lt;code&gt;$cookies&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0b00bd75d710a9877128c13b28d66fe558262c35" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngresource/provider/%24resourceprovider&quot;&gt;&lt;code&gt;$resourceProvider&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;ngresource/service/%24resource&quot;&gt;&lt;code&gt;$resource&lt;/code&gt;&lt;/a&gt; for usage.</source>
          <target state="translated">使用方法については、&lt;a href=&quot;ngresource/provider/%24resourceprovider&quot;&gt; &lt;code&gt;$resourceProvider&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;ngresource/service/%24resource&quot;&gt; &lt;code&gt;$resource&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9abd4a1fe19f2348c740c086f1fff0376f8e4ee1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngroute/service/%24route#examples.html&quot;&gt;$route&lt;/a&gt; for an example of configuring and using &lt;code&gt;ngRoute&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngRoute&lt;/code&gt; の構成と使用の例については、&lt;a href=&quot;ngroute/service/%24route#examples.html&quot;&gt;$ route&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fe5ebe5579c1ff1fb6425c15ca757267ab25d0f1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; for usage.</source>
          <target state="translated">使用法については&lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7b77962b1216fdb1070cf25eb9261359639bd5c8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngtouch/service/%24swipe&quot;&gt;&lt;code&gt;$swipe&lt;/code&gt;&lt;/a&gt; for usage.</source>
          <target state="translated">使用法については&lt;a href=&quot;ngtouch/service/%24swipe&quot;&gt; &lt;code&gt;$swipe&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">参照</target>
        </trans-unit>
        <trans-unit id="78c3f2286b3fda189f510bf130cb1cba700dbf32" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;$compileProvider.directive()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;$ compileProvider.directive（）&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="695bf02cec46c2f164a6c7f21e6ef9aba935626c" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;angular.mock.module&quot;&gt;angular.mock.module&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;angular.mock.module&quot;&gt;angular.mock.module&lt;/a&gt;も参照してください</target>
        </trans-unit>
        <trans-unit id="cd3f9d3a288e4edfd08f32cdd1bff967082410f8" translate="yes" xml:space="preserve">
          <source>See also the &lt;code&gt;directive.templateNamespace&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;directive.templateNamespace&lt;/code&gt; プロパティも参照してください。</target>
        </trans-unit>
        <trans-unit id="7d9c5af2f6c5167826b7ec17bb16740907b4b38f" translate="yes" xml:space="preserve">
          <source>See also the section &lt;a href=&quot;ngmodeloptions#triggering-and-debouncing-model-updates.html&quot;&gt;Triggering and debouncing model updates&lt;/a&gt;.</source>
          <target state="translated">「&lt;a href=&quot;ngmodeloptions#triggering-and-debouncing-model-updates.html&quot;&gt;モデル更新のトリガーとデバウンス」&lt;/a&gt;セクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="0f37f7a74aab87f2d11b0d459293de0e44b0e806" translate="yes" xml:space="preserve">
          <source>See also the section on &lt;a href=&quot;../../../guide/component#unit-testing-component-controllers.html&quot;&gt;unit-testing component controllers&lt;/a&gt; in the guide.</source>
          <target state="translated">ガイドの&lt;a href=&quot;../../../guide/component#unit-testing-component-controllers.html&quot;&gt;コンポーネントテストのユニットテスト&lt;/a&gt;に関するセクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="12880cab413a482aa6873d2df0c5a842044fb490" translate="yes" xml:space="preserve">
          <source>See issue &lt;a href=&quot;https://github.com/angular/angular.js/issues/2573&quot;&gt;#2573&lt;/a&gt;.</source>
          <target state="translated">問題&lt;a href=&quot;https://github.com/angular/angular.js/issues/2573&quot;&gt;＃2573を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6c7426cfb869fb1c7d073ad5ed6bbc028b648f91" translate="yes" xml:space="preserve">
          <source>See issue &lt;a href=&quot;https://github.com/angular/angular.js/issues/5695&quot;&gt;#5695&lt;/a&gt;.</source>
          <target state="translated">問題&lt;a href=&quot;https://github.com/angular/angular.js/issues/5695&quot;&gt;＃5695を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ea55e8498372eb1f024f52d96101f8fb71faaf3d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../ngtouch&quot;&gt;module&lt;/a&gt; documentation for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../ngtouch&quot;&gt;モジュールの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9577d47cd8e376d70b5f7b81428401efa96d1c58" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="52635c86d5cf5e4f60fbff484d0717b60887bca1" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../api/nganimate&quot;&gt;API docs for &lt;code&gt;ngAnimate&lt;/code&gt;&lt;/a&gt; for instructions on installing the module.</source>
          <target state="translated">モジュールのインストール手順については&lt;a href=&quot;../api/nganimate&quot;&gt;、 &lt;code&gt;ngAnimate&lt;/code&gt; &lt;/a&gt;のAPIドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="cbc2aedb974bc24d1a1d0fe5601fb4355ef0880c" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://docs.angularjs.org/tutorial/step_11#testing&quot;&gt;phonecat tutorial&lt;/a&gt; for an example.</source>
          <target state="translated">例については、&lt;a href=&quot;http://docs.angularjs.org/tutorial/step_11#testing&quot;&gt;phonecatチュートリアル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e96b1274bd6c727dce216a1b5acee68ec84c0ca0" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/angular/angular-seed&quot;&gt;angular-seed&lt;/a&gt; project for an example.</source>
          <target state="translated">例については、&lt;a href=&quot;https://github.com/angular/angular-seed&quot;&gt;angular-seed&lt;/a&gt;プロジェクトを参照してください。</target>
        </trans-unit>
        <trans-unit id="ecbca68833ed80713fcaa64526c17fb2e9a100f9" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/angular/angular-seed&quot;&gt;angular-seed&lt;/a&gt; project for more examples, or look at the embedded examples in the AngularJS documentation (For example, &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$http&lt;/a&gt; has an end-to-end test in the example under the &lt;code&gt;protractor.js&lt;/code&gt; tag).</source>
          <target state="translated">その他の例については、&lt;a href=&quot;https://github.com/angular/angular-seed&quot;&gt;angular-seed&lt;/a&gt;プロジェクトを参照するか、AngularJSのドキュメントに埋め込まれた例をご覧ください（たとえば、&lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$ httpに&lt;/a&gt;は、 &lt;code&gt;protractor.js&lt;/code&gt; タグの下の例でエンドツーエンドのテストがあります）。</target>
        </trans-unit>
        <trans-unit id="a0ac40f43c65be1e3b12dcd86bffd6396395ed77" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;ngoptions&quot;&gt;ngOptions documentation&lt;/a&gt; for more &lt;code&gt;ngOptions&lt;/code&gt; usage examples.</source>
          <target state="translated">&lt;code&gt;ngOptions&lt;/code&gt; の使用例については、&lt;a href=&quot;ngoptions&quot;&gt;ngOptionsのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="03e009db4d43734ae27201bff8730d827beb301f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;uppercase&quot;&gt;uppercase filter documentation&lt;/a&gt; for a functionally identical example.</source>
          <target state="translated">機能的に同一の例については、&lt;a href=&quot;uppercase&quot;&gt;大文字のフィルターのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bc206a7f0c07635a54d0ca822bcfd4363363fb84" translate="yes" xml:space="preserve">
          <source>See the &lt;strong&gt;slide&lt;/strong&gt; CSS class? Let's use that class to define an animation that we'll structure in our module code by using &lt;code&gt;module.animation&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;スライドの&lt;/strong&gt; CSSクラスをご覧ください。そのクラスを使用して、 &lt;code&gt;module.animation&lt;/code&gt; を使用してモジュールコードで構造化するアニメーションを定義します。</target>
        </trans-unit>
        <trans-unit id="762e1d695b4823d06070273412a16dd54a01941e" translate="yes" xml:space="preserve">
          <source>See the example below for defining CSS animations with ngRepeat.</source>
          <target state="translated">ngRepeatを使ってCSSアニメーションを定義する方法は以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="38e7a99ee9904d4a3ca99f81d4ea33b739210ca9" translate="yes" xml:space="preserve">
          <source>See the individual methods for more information and examples.</source>
          <target state="translated">詳細や事例については、個別の方法を参照してください。</target>
        </trans-unit>
        <trans-unit id="9b3d99daed982770005e723c4b9d03993ce65aa3" translate="yes" xml:space="preserve">
          <source>Seed App project template</source>
          <target state="translated">シードアプリプロジェクトテンプレート</target>
        </trans-unit>
        <trans-unit id="b5e9867f9c9fb18570b4889cb5ba94603532720d" translate="yes" xml:space="preserve">
          <source>Seed application with directory layout and test scripts as a starting point.</source>
          <target state="translated">ディレクトリレイアウトとテストスクリプトを出発点としたシードアプリケーション。</target>
        </trans-unit>
        <trans-unit id="c0b0079380b481f580b80b102f99f264e29300e9" translate="yes" xml:space="preserve">
          <source>Selection Keywords</source>
          <target state="translated">選択キーワード</target>
        </trans-unit>
        <trans-unit id="3cc82bb8092a6e32b7d5991c4002b66633c4d1a1" translate="yes" xml:space="preserve">
          <source>Selection keywords are simple words like &quot;male&quot; and &quot;female&quot;. The keyword, &quot;other&quot;, and its corresponding message are required while others are optional. It is used when the AngularJS expression does not match (case-insensitively) any of the other keywords specified.</source>
          <target state="translated">選択キーワードは「男性」「女性」などの簡単な言葉です。キーワード &quot;other &quot;とそれに対応するメッセージは必須ですが、その他はオプションです。これは、AngularJSの式が指定された他のキーワードと(大文字小文字を区別せずに)一致しない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="b240d04328a96aac53d166b5299cca81675589d4" translate="yes" xml:space="preserve">
          <source>Selector</source>
          <target state="translated">Selector</target>
        </trans-unit>
        <trans-unit id="453fe4cf0f44957ceadddad3ad82b8d24441bc5c" translate="yes" xml:space="preserve">
          <source>Selects a subset of items from &lt;code&gt;array&lt;/code&gt; and returns it as a new array.</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; から項目のサブセットを選択し、それを新しい配列として返します。</target>
        </trans-unit>
        <trans-unit id="70fa919b37728a67741bcb7de4d4f2cbf49a9644" translate="yes" xml:space="preserve">
          <source>Self for chaining.</source>
          <target state="translated">鎖を繋ぐためのセルフ。</target>
        </trans-unit>
        <trans-unit id="0d96db08ad1c08844aadb4911cf17b34a5194067" translate="yes" xml:space="preserve">
          <source>Sending links among different browsers</source>
          <target state="translated">異なるブラウザ間でのリンクの送信</target>
        </trans-unit>
        <trans-unit id="e61c30e14ad5323669cf2e66c324a47f65e65e5b" translate="yes" xml:space="preserve">
          <source>Separation of Concerns</source>
          <target state="translated">懸念事項の分離</target>
        </trans-unit>
        <trans-unit id="19d21afe1a379e6586329fb405c968df49d2f7f3" translate="yes" xml:space="preserve">
          <source>Serializes and sets a value for given cookie key</source>
          <target state="translated">指定されたクッキーキーの値をシリアライズして設定します。</target>
        </trans-unit>
        <trans-unit id="26190591db24a6a79c2d1ffe033434cf28e66535" translate="yes" xml:space="preserve">
          <source>Serializes input into a JSON-formatted string. Properties with leading $$ characters will be stripped since AngularJS uses this notation internally.</source>
          <target state="translated">入力をJSON形式の文字列にシリアライズします。AngularJSは内部的にこの表記法を使用しているため、先頭の$$文字を含むプロパティは削除されます。</target>
        </trans-unit>
        <trans-unit id="ca7646045bd114335a4473cb2df4fbc234ba73cb" translate="yes" xml:space="preserve">
          <source>Server side</source>
          <target state="translated">サーバー側</target>
        </trans-unit>
        <trans-unit id="657dec6d9dd77fb2ceb1d1b38c7ffe17f33b168d" translate="yes" xml:space="preserve">
          <source>Server-Specific</source>
          <target state="translated">Server-Specific</target>
        </trans-unit>
        <trans-unit id="329cb8b6ba8c427be7c09b298295c655415c7ac9" translate="yes" xml:space="preserve">
          <source>Service</source>
          <target state="translated">Service</target>
        </trans-unit>
        <trans-unit id="bf72267dd99d909ed5df067cc726ef7155c6d854" translate="yes" xml:space="preserve">
          <source>Service Recipe</source>
          <target state="translated">サービスレシピ</target>
        </trans-unit>
        <trans-unit id="8941e9f98c519e0d286557e21cfb4e0c0de17a20" translate="yes" xml:space="preserve">
          <source>Service Type</source>
          <target state="translated">サービスの種類</target>
        </trans-unit>
        <trans-unit id="5a5f6c0274940063e399d3946bd3ae49d442c0ff" translate="yes" xml:space="preserve">
          <source>Service components in auto</source>
          <target state="translated">自動車のサービス部品</target>
        </trans-unit>
        <trans-unit id="fcebb0a024198276992ada4dbb480721bb3e0f64" translate="yes" xml:space="preserve">
          <source>Service components in ng</source>
          <target state="translated">サービスの内容はNG</target>
        </trans-unit>
        <trans-unit id="09c48cf4ffd74297617899c30e1bba806a4773cf" translate="yes" xml:space="preserve">
          <source>Service components in ngAnimate</source>
          <target state="translated">ngAnimateのサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="941158836f6e9fe94ae316ee9c323959baae61ad" translate="yes" xml:space="preserve">
          <source>Service components in ngAria</source>
          <target state="translated">ngAriaのサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="32c26b48edde3b80c434980acb12e669bd2b93ab" translate="yes" xml:space="preserve">
          <source>Service components in ngComponentRouter</source>
          <target state="translated">ngComponentRouter のサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="a3fca5601631e00648b89298c06d29e4b69f5fb2" translate="yes" xml:space="preserve">
          <source>Service components in ngCookies</source>
          <target state="translated">ngCookiesのサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="2a9e9867bcb9b11bd3ee9f53a4a820cbbb948291" translate="yes" xml:space="preserve">
          <source>Service components in ngMock</source>
          <target state="translated">ngMock のサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="2b3406d3d296f3b15db73360e223b513501ebc46" translate="yes" xml:space="preserve">
          <source>Service components in ngMockE2E</source>
          <target state="translated">ngMockE2Eのサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="665c83ec475bf1c3dfa6e446e3a1706d040945a7" translate="yes" xml:space="preserve">
          <source>Service components in ngResource</source>
          <target state="translated">ngResourceのサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="5a2a586611d056bdd1386c772b665fa21edbdbd9" translate="yes" xml:space="preserve">
          <source>Service components in ngRoute</source>
          <target state="translated">ngRoute のサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="a2478a17991c8ce33653609be29f656e3efdd561" translate="yes" xml:space="preserve">
          <source>Service components in ngSanitize</source>
          <target state="translated">ngSanitize のサービスコンポーネント</target>
        </trans-unit>
        <trans-unit id="5084bf79af04c50fa80607d773f3bdac80e62479" translate="yes" xml:space="preserve">
          <source>Service components in ngTouch</source>
          <target state="translated">ngTouch のサービス・コンポーネント</target>
        </trans-unit>
        <trans-unit id="d54887f3349556c2f12ee7ba270d6bd56b4b3fcb" translate="yes" xml:space="preserve">
          <source>Service instance object.</source>
          <target state="translated">サービスのインスタンスオブジェクト。</target>
        </trans-unit>
        <trans-unit id="b41d874b42ed9e2cbb2ee48532479463e46f60d6" translate="yes" xml:space="preserve">
          <source>Service provider names start with the name of the service they provide followed by &lt;code&gt;Provider&lt;/code&gt;. For example, the &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$log&lt;/a&gt; service has a provider called &lt;a href=&quot;../../ng/provider/%24logprovider&quot;&gt;$logProvider&lt;/a&gt;.</source>
          <target state="translated">サービスプロバイダー名は、提供するサービスの名前で始まり、その後に &lt;code&gt;Provider&lt;/code&gt; が続きます。たとえば、&lt;a href=&quot;../../ng/service/%24log&quot;&gt;$ log&lt;/a&gt;サービスには&lt;a href=&quot;../../ng/provider/%24logprovider&quot;&gt;$ logProvider&lt;/a&gt;というプロバイダーがあります。</target>
        </trans-unit>
        <trans-unit id="952222f0e3de1e4052da5b327ee9d39b9d455a7c" translate="yes" xml:space="preserve">
          <source>Service provider objects can have additional methods which allow configuration of the provider and its service. Importantly, you can configure what kind of service is created by the &lt;code&gt;$get&lt;/code&gt; method, or how that service will act. For example, the &lt;a href=&quot;../../ng/provider/%24logprovider&quot;&gt;$logProvider&lt;/a&gt; has a method &lt;a href=&quot;../../ng/provider/%24logprovider#debugEnabled.html&quot;&gt;debugEnabled&lt;/a&gt; which lets you specify whether the &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$log&lt;/a&gt; service will log debug messages to the console or not.</source>
          <target state="translated">サービスプロバイダーオブジェクトには、プロバイダーとそのサービスの構成を可能にする追加のメソッドを含めることができます。重要なのは、 &lt;code&gt;$get&lt;/code&gt; メソッドによって作成されるサービスの種類、またはそのサービスの動作を構成できることです。例えば、&lt;a href=&quot;../../ng/provider/%24logprovider&quot;&gt;$ logProviderは&lt;/a&gt;方法がいる&lt;a href=&quot;../../ng/provider/%24logprovider#debugEnabled.html&quot;&gt;debugEnabled&lt;/a&gt;あなたがするかどうかを指定することができますどの&lt;a href=&quot;../../ng/service/%24log&quot;&gt;$ログ&lt;/a&gt;サービスは、コンソールにデバッグメッセージをログに記録したりしません。</target>
        </trans-unit>
        <trans-unit id="0d2b4d42fe2b710998d810b0e4e1cf1b4de34480" translate="yes" xml:space="preserve">
          <source>Service vs Factory</source>
          <target state="translated">サービスと工場</target>
        </trans-unit>
        <trans-unit id="5cbd584046863bc7b753e57e8681a98a87f36f0f" translate="yes" xml:space="preserve">
          <source>Services</source>
          <target state="translated">Services</target>
        </trans-unit>
        <trans-unit id="4b6d0d4999e71cef617ce73b369d4cb1158a482a" translate="yes" xml:space="preserve">
          <source>Services are objects whose API is defined by the developer writing the service.</source>
          <target state="translated">サービスとは、サービスを書く開発者によってAPIが定義されているオブジェクトのことです。</target>
        </trans-unit>
        <trans-unit id="525d27448e42507fcffe428f6bbdacdf06c2b08a" translate="yes" xml:space="preserve">
          <source>Services are registered to modules via the &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;Module API&lt;/a&gt;. Typically you use the &lt;a href=&quot;../api/ng/type/angular.module#factory.html&quot;&gt;Module factory&lt;/a&gt; API to register a service:</source>
          <target state="translated">サービスは、&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;モジュールAPI&lt;/a&gt;を介してモジュールに登録されます。通常、&lt;a href=&quot;../api/ng/type/angular.module#factory.html&quot;&gt;モジュールファクトリ&lt;/a&gt; APIを使用してサービスを登録します。</target>
        </trans-unit>
        <trans-unit id="4833132fc4c899fee8d34eaa64ff5a98c4f288cd" translate="yes" xml:space="preserve">
          <source>Services can have their own dependencies. Just like declaring dependencies in a controller, you declare dependencies by specifying them in the service's factory function signature.</source>
          <target state="translated">サービスは独自の依存関係を持つことができます。コントローラで依存関係を宣言するのと同じように、 サービスのファクトリ関数のシグネチャで依存関係を指定して宣言します。</target>
        </trans-unit>
        <trans-unit id="a789f25acb702b4e658b9657b679e824eb2b9d67" translate="yes" xml:space="preserve">
          <source>Set DOM element attribute value.</source>
          <target state="translated">DOM 要素の属性値を設定します。</target>
        </trans-unit>
        <trans-unit id="94b8b9a9904cbc044a493b9000523b46087495ae" translate="yes" xml:space="preserve">
          <source>Set a custom error when the unknown option is selected</source>
          <target state="translated">不明なオプションが選択された場合のカスタムエラーを設定する</target>
        </trans-unit>
        <trans-unit id="f48ee2d0db513f849bc3a687f193acaff12bf0a8" translate="yes" xml:space="preserve">
          <source>Set the &quot;required&quot; error when the unknown option is selected.</source>
          <target state="translated">不明なオプションを選択した場合の「必須」エラーを設定します。</target>
        </trans-unit>
        <trans-unit id="b8b76efca5914891c846b9591b11c415cdec0179" translate="yes" xml:space="preserve">
          <source>Set up the initial state of the &lt;code&gt;$scope&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;$scope&lt;/code&gt; オブジェクトの初期状態を設定します。</target>
        </trans-unit>
        <trans-unit id="32a934c3e8358dca34c040197808a0f980d47635" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;maxlength&lt;/code&gt; validation error key if the value is longer than maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any length.</source>
          <target state="translated">値がmaxlengthより長い場合、 &lt;code&gt;maxlength&lt;/code&gt; 検証エラーキーを設定します。属性を負または非数値に設定すると、任意の長さのビュー値が許可されます。</target>
        </trans-unit>
        <trans-unit id="547bb7088e70130cb7f5489e9adfa8a661612808" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;minlength&lt;/code&gt; validation error key if the value is shorter than minlength.</source>
          <target state="translated">値がminlengthより短い場合、 &lt;code&gt;minlength&lt;/code&gt; 検証エラーキーを設定します。</target>
        </trans-unit>
        <trans-unit id="10560bdef7511146ccdde4c1d4eb0b3d418a69fc" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;pattern&lt;/code&gt; validation error key if the ngModel &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;$viewValue&lt;/a&gt; does not match a RegExp found by evaluating the AngularJS expression given in the attribute value. If the expression evaluates to a RegExp object, then this is used directly. If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it in &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; characters. For instance, &lt;code&gt;&quot;abc&quot;&lt;/code&gt; will be converted to &lt;code&gt;new RegExp('^abc$')&lt;/code&gt;.</source>
          <target state="translated">ngModel &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;$ viewValue&lt;/a&gt;が、属性値で指定されたAngularJS式を評価して見つかったRegExpと一致しない場合、 &lt;code&gt;pattern&lt;/code&gt; 検証エラーキーを設定します。式がRegExpオブジェクトに評価される場合、これは直接使用されます。式が文字列に評価される場合、 &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;$&lt;/code&gt; 文字でラップした後、正規表現に変換されます。たとえば、 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; は &lt;code&gt;new RegExp('^abc$')&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="e3e8752f2ba54f28880c07ca6160f51e6dcbce12" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;pattern&lt;/code&gt; validation error key if the ngModel &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;$viewValue&lt;/a&gt; value does not match a RegExp found by evaluating the AngularJS expression given in the attribute value. If the expression evaluates to a RegExp object, then this is used directly. If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it in &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; characters. For instance, &lt;code&gt;&quot;abc&quot;&lt;/code&gt; will be converted to &lt;code&gt;new RegExp('^abc$')&lt;/code&gt;.</source>
          <target state="translated">ngModel &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;$ viewValue&lt;/a&gt;値が、属性値で指定されたAngularJS式を評価することで見つかったRegExpと一致しない場合、 &lt;code&gt;pattern&lt;/code&gt; 検証エラーキーを設定します。式がRegExpオブジェクトに評価される場合、これは直接使用されます。式が文字列に評価される場合、 &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;$&lt;/code&gt; 文字でラップした後、正規表現に変換されます。たとえば、 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; は &lt;code&gt;new RegExp('^abc$')&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="fa71f45381b24c79c20b2240ce099d6f0d446c1e" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;required&lt;/code&gt; attribute if set to true</source>
          <target state="translated">セットが &lt;code&gt;required&lt;/code&gt; trueに設定する属性を</target>
        </trans-unit>
        <trans-unit id="6b636dc2386c068323a89c825f926210e65c3fb7" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;required&lt;/code&gt; validation error key if the value is not entered.</source>
          <target state="translated">値が入力されていない場合に &lt;code&gt;required&lt;/code&gt; 検証エラーキーを設定します。</target>
        </trans-unit>
        <trans-unit id="7ebf47298a75f80321a25301b9796faaacaf5e69" translate="yes" xml:space="preserve">
          <source>Sets a value for given cookie key</source>
          <target state="translated">指定されたクッキーキーの値を設定します。</target>
        </trans-unit>
        <trans-unit id="3eb34af4b4c9bdef7b75e97d99a9be4d8f20504b" translate="yes" xml:space="preserve">
          <source>Sets and/or returns the CSS class regular expression that is checked when performing an animation. Upon bootstrap the classNameFilter value is not set at all and will therefore enable $animate to attempt to perform an animation on any element that is triggered. When setting the &lt;code&gt;classNameFilter&lt;/code&gt; value, animations will only be performed on elements that successfully match the filter expression. This in turn can boost performance for low-powered devices as well as applications containing a lot of structural operations.</source>
          <target state="translated">アニメーションの実行時にチェックされるCSSクラスの正規表現を設定または返します。ブートストラップ時にclassNameFilter値はまったく設定されないため、$ animateはトリガーされた任意の要素でアニメーションを実行できるようになります。 &lt;code&gt;classNameFilter&lt;/code&gt; 値を設定すると、フィルター式に正常に一致する要素でのみアニメーションが実行されます。これにより、低電力のデバイスや、多くの構造操作を含むアプリケーションのパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="a3718a94f7b96f6b2b46917cfc688eefd896d791" translate="yes" xml:space="preserve">
          <source>Sets and/or returns the custom filter function that is used to &quot;filter&quot; animations, i.e. determine if an animation is allowed or not. When no filter is specified (the default), no animation will be blocked. Setting the &lt;code&gt;customFilter&lt;/code&gt; value will only allow animations for which the filter function's return value is truthy.</source>
          <target state="translated">アニメーションを「フィルタリング」するために使用されるカスタムフィルター関数を設定または返します。つまり、アニメーションが許可されるかどうかを決定します。フィルターが指定されていない場合（デフォルト）、アニメーションはブロックされません。 &lt;code&gt;customFilter&lt;/code&gt; 値を設定すると、フィルター関数の戻り値が真であるアニメーションのみが許可されます。</target>
        </trans-unit>
        <trans-unit id="39c997ee50a558fa22571f260f262fe465f1bc3e" translate="yes" xml:space="preserve">
          <source>Sets route definition that will be used on route change when no other route definition is matched.</source>
          <target state="translated">他の経路定義と一致しない場合に、経路変更時に使用する経路定義を設定します。</target>
        </trans-unit>
        <trans-unit id="fe509b1e70a37ac612ec68d5f9d1967360db9085" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;checked&lt;/code&gt; attribute on the element, if the expression inside &lt;code&gt;ngChecked&lt;/code&gt; is truthy.</source>
          <target state="translated">&lt;code&gt;ngChecked&lt;/code&gt; 内の式が真である場合、要素に &lt;code&gt;checked&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
        <trans-unit id="5c99570524bdc8216da2b5396247486451cab54f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;open&lt;/code&gt; attribute on the element, if the expression inside &lt;code&gt;ngOpen&lt;/code&gt; is truthy.</source>
          <target state="translated">&lt;code&gt;ngOpen&lt;/code&gt; 内の式が真である場合、要素に &lt;code&gt;open&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
        <trans-unit id="6f565b5b574f15f6ae5ad19f06794dc2c944e8f2" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;readonly&lt;/code&gt; attribute on the element, if the expression inside &lt;code&gt;ngReadonly&lt;/code&gt; is truthy. Note that &lt;code&gt;readonly&lt;/code&gt; applies only to &lt;code&gt;input&lt;/code&gt; elements with specific types. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly&quot;&gt;See the input docs on MDN&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;ngReadonly&lt;/code&gt; 内の式が真である場合、要素に &lt;code&gt;readonly&lt;/code&gt; 属性を設定します。 &lt;code&gt;readonly&lt;/code&gt; は特定のタイプの &lt;code&gt;input&lt;/code&gt; 要素にのみ適用されることに注意してください。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly&quot;&gt;詳細については、MDNの入力ドキュメントを参照して&lt;/a&gt;ください。</target>
        </trans-unit>
        <trans-unit id="37e13f7cb285022e632b2143b226eca3914cb348" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;selected&lt;/code&gt; attribute on the element, if the expression inside &lt;code&gt;ngSelected&lt;/code&gt; is truthy.</source>
          <target state="translated">&lt;code&gt;ngSelected&lt;/code&gt; 内の式が真である場合、要素に &lt;code&gt;selected&lt;/code&gt; 属性を設定します。</target>
        </trans-unit>
        <trans-unit id="9f4cb7bf52331e65ac69941f041ac363a81a3b12" translate="yes" xml:space="preserve">
          <source>Sets the control to its dirty state.</source>
          <target state="translated">コントロールをダーティ状態に設定します。</target>
        </trans-unit>
        <trans-unit id="e3bf3b958a072b69e62408d924915fb8a179eaff" translate="yes" xml:space="preserve">
          <source>Sets the control to its pristine state.</source>
          <target state="translated">コントロールを原始状態に設定します。</target>
        </trans-unit>
        <trans-unit id="e4a131591ff87bb79feac231f451d7031148843a" translate="yes" xml:space="preserve">
          <source>Sets the control to its touched state.</source>
          <target state="translated">コントロールをタッチ状態に設定します。</target>
        </trans-unit>
        <trans-unit id="a5b267b9a5cc9a25b454ab1eae10051e806b3f01" translate="yes" xml:space="preserve">
          <source>Sets the control to its untouched state.</source>
          <target state="translated">コントロールを手付かずの状態にします。</target>
        </trans-unit>
        <trans-unit id="4447a6517c090edca6f974fba3922639b9e1e12e" translate="yes" xml:space="preserve">
          <source>Sets the form to a dirty state.</source>
          <target state="translated">フォームをダーティな状態に設定します。</target>
        </trans-unit>
        <trans-unit id="9350ec632ab5fec79f1f724eae353ac0165bb757" translate="yes" xml:space="preserve">
          <source>Sets the form to its &lt;code&gt;$submitted&lt;/code&gt; state. This will also set &lt;code&gt;$submitted&lt;/code&gt; on all child and parent forms of the form.</source>
          <target state="translated">フォームを &lt;code&gt;$submitted&lt;/code&gt; 状態に設定します。これにより、フォームのすべての子フォームと親フォームにも &lt;code&gt;$submitted&lt;/code&gt; が設定されます。</target>
        </trans-unit>
        <trans-unit id="7156388b7b1c6dc2e561c432025ee7840bcba522" translate="yes" xml:space="preserve">
          <source>Sets the form to its pristine state.</source>
          <target state="translated">フォームを原始状態に設定します。</target>
        </trans-unit>
        <trans-unit id="1bbab8786ad564dbebdb85217e4d437d9e57c99f" translate="yes" xml:space="preserve">
          <source>Sets the form to its untouched state.</source>
          <target state="translated">フォームを未処理の状態に設定します。</target>
        </trans-unit>
        <trans-unit id="925ac2c1e142b8f6831a46079d6b7d2faf4683d7" translate="yes" xml:space="preserve">
          <source>Sets the logging mode.</source>
          <target state="translated">ロギングモードを設定します。</target>
        </trans-unit>
        <trans-unit id="cc873a3ed61980bb62b3d8cb1fad2b7dbd3bbd9c" translate="yes" xml:space="preserve">
          <source>Sets the number of &lt;code&gt;$digest&lt;/code&gt; iterations the scope should attempt to execute before giving up and assuming that the model is unstable.</source>
          <target state="translated">モデルが不安定であるとあきらめて想定する前に、スコープが実行を試みる &lt;code&gt;$digest&lt;/code&gt; 反復の数を設定します。</target>
        </trans-unit>
        <trans-unit id="39ffbd76050afade95c03c6f563e7fe6698cdffe" translate="yes" xml:space="preserve">
          <source>Sets the number of times &lt;code&gt;$onChanges&lt;/code&gt; hooks can trigger new changes before giving up and assuming that the model is unstable.</source>
          <target state="translated">&lt;code&gt;$onChanges&lt;/code&gt; フックが新しい変更をトリガーできる回数を設定します。この回数を過ぎると、モデルが不安定であると断念します。</target>
        </trans-unit>
        <trans-unit id="a0927437f1fcf14017c5e36fbcfc48793c5fd4cd" translate="yes" xml:space="preserve">
          <source>Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...) has fired on the given element or among any of its children. Once the listener is fired, the provided callback is fired with the following params:</source>
          <target state="translated">与えられた要素またはその子要素の中のいずれかでアニメーションイベント (enter,leave,move,etc...)が発生したときに発生するイベントリスナーを設定します。リスナーが実行されると、以下のパラメータを指定してコールバックが実行されます。</target>
        </trans-unit>
        <trans-unit id="03431d02a61f42ebfbfef0fc744f1f69c2aa6fa2" translate="yes" xml:space="preserve">
          <source>Sets/Gets the blacklist of trusted resource URLs.</source>
          <target state="translated">Sets信頼できるリソース URL のブラックリストを取得します。</target>
        </trans-unit>
        <trans-unit id="7d47f57707cf336befa5e43696e950bc75ae7ac4" translate="yes" xml:space="preserve">
          <source>Sets/Gets the whitelist of trusted resource URLs.</source>
          <target state="translated">信頼できるリソース URL のホワイトリストを設定します。</target>
        </trans-unit>
        <trans-unit id="a4645a9bbcf8b0818a04f3d1e82f24a50d0fbb16" translate="yes" xml:space="preserve">
          <source>Setters and character encoding</source>
          <target state="translated">セッターと文字エンコーディング</target>
        </trans-unit>
        <trans-unit id="931d21b44fadaeb291fbdf83ce432278265cb3a4" translate="yes" xml:space="preserve">
          <source>Setting HTTP Headers</source>
          <target state="translated">HTTPヘッダの設定</target>
        </trans-unit>
        <trans-unit id="f77d1dec6bba3973c39fb19b56136fe4ae5c3468" translate="yes" xml:space="preserve">
          <source>Setting a form back to a pristine state is often useful when we want to 'reuse' a form after saving or resetting it.</source>
          <target state="translated">フォームを原始状態に戻す設定は、保存やリセット後にフォームを「再利用」したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="8c6c2a7659542590f7cf49657b164806adad134c" translate="yes" xml:space="preserve">
          <source>Setting a form controls back to their untouched state is often useful when setting the form back to its pristine state.</source>
          <target state="translated">フォームコントロールを手つかずの状態に戻すことは、フォームを原始的な状態に戻すときに便利です。</target>
        </trans-unit>
        <trans-unit id="942eaaad186f1e9ad5700be9b0380f06a6b4a71b" translate="yes" xml:space="preserve">
          <source>Setting related css classes on the element (&lt;code&gt;ng-valid&lt;/code&gt;, &lt;code&gt;ng-invalid&lt;/code&gt;, &lt;code&gt;ng-dirty&lt;/code&gt;, &lt;code&gt;ng-pristine&lt;/code&gt;, &lt;code&gt;ng-touched&lt;/code&gt;, &lt;code&gt;ng-untouched&lt;/code&gt;, &lt;code&gt;ng-empty&lt;/code&gt;, &lt;code&gt;ng-not-empty&lt;/code&gt;) including animations.</source>
          <target state="translated">アニメーションを含む要素（ &lt;code&gt;ng-valid&lt;/code&gt; 、 &lt;code&gt;ng-invalid&lt;/code&gt; 、 &lt;code&gt;ng-dirty&lt;/code&gt; 、 &lt;code&gt;ng-pristine&lt;/code&gt; 、 &lt;code&gt;ng-touched&lt;/code&gt; 、 &lt;code&gt;ng-untouched&lt;/code&gt; 、 &lt;code&gt;ng-empty&lt;/code&gt; 、 &lt;code&gt;ng-not-empty&lt;/code&gt; ）に関連するCSSクラスを設定します。</target>
        </trans-unit>
        <trans-unit id="277f5f922447d11f1148440e274ee0c10496fee1" translate="yes" xml:space="preserve">
          <source>Setting up the initial state of a $scope object</source>
          <target state="translated">スコープオブジェクトの初期状態を設定する</target>
        </trans-unit>
        <trans-unit id="125fbd7f10dab7394cfc5048a85cdfbd854dbe5e" translate="yes" xml:space="preserve">
          <source>Shallow watches the properties of an object and fires whenever any of the properties change (for arrays, this implies watching the array items; for object maps, this implies watching the properties). If a change is detected, the &lt;code&gt;listener&lt;/code&gt; callback is fired.</source>
          <target state="translated">Shallowはオブジェクトのプロパティを監視し、プロパティが変更されると起動します（配列の場合、これは配列項目を監視することを意味します。オブジェクトマップの場合、これはプロパティを監視することを意味します）。変更が検出されると、 &lt;code&gt;listener&lt;/code&gt; コールバックが発生します。</target>
        </trans-unit>
        <trans-unit id="380e38945f7671e000cf05944b1ad2d0e741efa4" translate="yes" xml:space="preserve">
          <source>Share code or state across controllers &amp;mdash; Use &lt;a href=&quot;services&quot;&gt;AngularJS services&lt;/a&gt; instead.</source>
          <target state="translated">コントローラー間でコードまたは状態を共有する&amp;mdash; 代わりに&lt;a href=&quot;services&quot;&gt;AngularJSサービス&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="eeb5aa3705435324f9a5bad77066c4f0603ff2ac" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;DELETE&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;DELETE&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="632f1e0986a1ac579bc340ca9bb74040c8b7cb13" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;GET&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="37dbba8a58190de1ad30febf6bae4610d1046015" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;HEAD&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;HEAD&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="f6519910ce1599fa85bedb60905d3494f744c8df" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;JSONP&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;JSONP&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="6eb1e4826d823c6b71cc1239ada1b4b018a1769d" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;PATCH&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;PATCH&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="4405ba4487cb7f0695953efdc04c5e771da5626e" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;POST&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="640cf1d6b1646eecd287defcded6b181e69acbab" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;PUT&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;PUT&lt;/code&gt; リクエストを実行するためのショートカットメソッド。</target>
        </trans-unit>
        <trans-unit id="e653854343ba72f7dfa236141ce0b3a4406ea1ab" translate="yes" xml:space="preserve">
          <source>Shortcut methods</source>
          <target state="translated">ショートカットの方法</target>
        </trans-unit>
        <trans-unit id="31798d7cfef4747fc3cb36381de4537963cb762a" translate="yes" xml:space="preserve">
          <source>Shortcut methods are also available. All shortcut methods require passing in the URL, and request data must be passed in for POST/PUT requests. An optional config can be passed as the last argument.</source>
          <target state="translated">ショートカットメソッドも用意されています。すべてのショートカットメソッドはURLを渡す必要があり、POSTPUTリクエストの場合はリクエストデータを渡す必要があります。オプションの config を最後の引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="991d7adb474623baf0e224580d1166d72616994d" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.CSS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.getTrustedCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.CSS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3f5066c6a161e53270e1d456af3c9dc058c98f5" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedHtml(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.HTML, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.getTrustedHtml(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.HTML, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7c12375f2444862456736917fe52c5dda61f0c40" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.JS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.getTrustedJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.JS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5a41650ca4ad0851b345f9ce1b1fa4dc13e0f829" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.RESOURCE_URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.getTrustedResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.RESOURCE_URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b33f0daae6cb6c1a84f39046e25569499b069f8a" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.getTrustedUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="46de0e5ba4dd5238608c0e20228a228dea8e97c8" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.CSS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.parseAsCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.CSS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="acd8a216e26619bc4475238fcd266c75b856e72b" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsHtml(expression string)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.HTML, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.parseAsHtml(expression string)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.HTML, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="078d1ee5a55f2b5471440925757193e9a8a1180a" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.JS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.parseAsJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.JS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7443f5740c3808a5956caa9c740d58d830b2749d" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.RESOURCE_URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.parseAsResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.RESOURCE_URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="56b3a286669e172b604de34085d3681bf69c9d9a" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.parseAsUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c80ffad619c88a6d2fcc06d6b44928164a655a51" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.CSS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.trustAsCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.CSS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f21f7bf64a73cd038d1ac38d2cbe3c19e0570c14" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsHtml(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.HTML, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.trustAsHtml(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.HTML, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f8adcfcd8ce136be4af5a2fb15479ed63d6a06d0" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.JS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.trustAsJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.JS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1c138911b8cec498130d3f5b57c5f37667fb15b8" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.RESOURCE_URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.trustAsResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.RESOURCE_URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1120b4bcf5907d682846212855e4a465c5eef826" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">速記法。 &lt;code&gt;$sce.trustAsUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="43517b93f15b2e55b043359578fa0518911485bb" translate="yes" xml:space="preserve">
          <source>Show / Hide Table of Contents</source>
          <target state="translated">目次を非表示にする</target>
        </trans-unit>
        <trans-unit id="7ff68a0ea37d6679788b11ca9d5b4cdd7f8e0e60" translate="yes" xml:space="preserve">
          <source>Show me an example using SCE.</source>
          <target state="translated">SCEを使った例を見せてくれ</target>
        </trans-unit>
        <trans-unit id="5fbf095d64e8fe5aa6275f0d8781c810841a89da" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;redirectTo&lt;/code&gt;, if the return value is &lt;code&gt;undefined&lt;/code&gt; (or a promise that gets resolved to &lt;code&gt;undefined&lt;/code&gt;), no redirection takes place and the route transition occurs as though there was no redirection.</source>
          <target state="translated">同様 &lt;code&gt;redirectTo&lt;/code&gt; 、戻り値である場合には &lt;code&gt;undefined&lt;/code&gt; （またはに解決さ約束 &lt;code&gt;undefined&lt;/code&gt; ）、何リダイレクションが行われず、何らリダイレクションがなかったかのように経路遷移が起こります。</target>
        </trans-unit>
        <trans-unit id="b7900b7d5d07f82727f76c13818f1f10bae67ac1" translate="yes" xml:space="preserve">
          <source>Similar to the terminology used when an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element.matches&quot;&gt;element &lt;strong&gt;matches&lt;/strong&gt; a selector&lt;/a&gt;, we say an element &lt;strong&gt;matches&lt;/strong&gt; a directive when the directive is part of its declaration.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element.matches&quot;&gt;要素がセレクタ&lt;strong&gt;&lt;/strong&gt;&lt;/a&gt;と&lt;strong&gt;一致&lt;/strong&gt;する場合に使用される用語と同様に、ディレクティブが宣言の一部である場合、要素はディレクティブと&lt;strong&gt;一致&lt;/strong&gt;すると言います。</target>
        </trans-unit>
        <trans-unit id="3877c491e6e23214903668db4f8f615dd271abe2" translate="yes" xml:space="preserve">
          <source>Similarly the browser itself offers &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; objects for caching data.</source>
          <target state="translated">同様に、ブラウザ自体は、データをキャッシュするための &lt;code&gt;localStorage&lt;/code&gt; および &lt;code&gt;sessionStorage&lt;/code&gt; オブジェクトを提供します。</target>
        </trans-unit>
        <trans-unit id="55fef1971466e90ac788430cdc912228b5b7171d" translate="yes" xml:space="preserve">
          <source>Similarly the controller can assign behavior to scope as seen by the &lt;code&gt;sayHello&lt;/code&gt; method, which is invoked when the user clicks on the 'greet' button. The &lt;code&gt;sayHello&lt;/code&gt; method can read the &lt;code&gt;username&lt;/code&gt; property and create a &lt;code&gt;greeting&lt;/code&gt; property. This demonstrates that the properties on scope update automatically when they are bound to HTML input widgets.</source>
          <target state="translated">同様に、コントローラーは、 &lt;code&gt;sayHello&lt;/code&gt; メソッドで表示される動作をスコープに割り当てることができます。このメソッドは、ユーザーが「挨拶」ボタンをクリックしたときに呼び出されます。 &lt;code&gt;sayHello&lt;/code&gt; の方法が読むことができる &lt;code&gt;username&lt;/code&gt; プロパティを作成し、 &lt;code&gt;greeting&lt;/code&gt; プロパティを。これは、スコープのプロパティがHTML入力ウィジェットにバインドされたときに自動的に更新されることを示しています。</target>
        </trans-unit>
        <trans-unit id="d96f9c5aaa25fbbb68757a349b61a3f9639f41c3" translate="yes" xml:space="preserve">
          <source>Similarly, an input control that has the &lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; directive holds an instance of &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController&lt;/a&gt;. Such a control instance can be published as a property of the form instance using the &lt;code&gt;name&lt;/code&gt; attribute on the input control. The name attribute specifies the name of the property on the form instance.</source>
          <target state="translated">同様に、有する入力制御&lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModelの&lt;/a&gt;ディレクティブはのインスタンス保持&lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt;NgModelControllerを&lt;/a&gt;。このようなコントロールインスタンスは、入力コントロールの &lt;code&gt;name&lt;/code&gt; 属性を使用して、フォームインスタンスのプロパティとして公開できます。name属性は、フォームインスタンスのプロパティの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="670d0736a092699228ee118fa27e4f1c075ba154" translate="yes" xml:space="preserve">
          <source>Similarly, invoking a function &lt;code&gt;a.b.c()&lt;/code&gt; on &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; simply returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">同様に、関数呼び出し &lt;code&gt;a.b.c()&lt;/code&gt; に &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; 単に戻る &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c88e131d548a3fcff63bbf97a9bf04e46be5233b" translate="yes" xml:space="preserve">
          <source>Simple HTML Element Directive</source>
          <target state="translated">シンプルな HTML 要素ディレクティブ</target>
        </trans-unit>
        <trans-unit id="d0c008ebf252b57d3dc089a4c5acee7f6e38bd98" translate="yes" xml:space="preserve">
          <source>Simple Usage</source>
          <target state="translated">シンプルな使い方</target>
        </trans-unit>
        <trans-unit id="84235c3cb3765eb50f195086225d801f2599517d" translate="yes" xml:space="preserve">
          <source>Simple form</source>
          <target state="translated">シンプルなフォーム</target>
        </trans-unit>
        <trans-unit id="a3cd4572b9d73188ee77a0e54ea25e4d608d9782" translate="yes" xml:space="preserve">
          <source>Simple select elements with static options</source>
          <target state="translated">静的なオプションを持つシンプルなセレクト要素</target>
        </trans-unit>
        <trans-unit id="03827a3f2a9c693e42982a518640a7eee54b2ec0" translate="yes" xml:space="preserve">
          <source>Simple service for logging. Default implementation safely writes the message into the browser's console (if present).</source>
          <target state="translated">ロギングのためのシンプルなサービス。デフォルトの実装では、ブラウザのコンソールにメッセージを安全に書き込みます (存在する場合)。</target>
        </trans-unit>
        <trans-unit id="ff7e4e9f9f31d98044b04d3c21cff29557191384" translate="yes" xml:space="preserve">
          <source>Simple toggle</source>
          <target state="translated">シンプルなトグル</target>
        </trans-unit>
        <trans-unit id="f59ba66ace97653b45c7cb9fa1f58b221143f9b5" translate="yes" xml:space="preserve">
          <source>Simply put, there are two ways to make use of animations when ngAnimate is used: by using &lt;strong&gt;CSS&lt;/strong&gt; and &lt;strong&gt;JavaScript&lt;/strong&gt;. The former works purely based using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via &lt;code&gt;module.animation()&lt;/code&gt;. For both CSS and JS animations the sole requirement is to have a matching &lt;code&gt;CSS class&lt;/code&gt; that exists both in the registered animation and within the HTML element that the animation will be triggered on.</source>
          <target state="translated">簡単に言うと、ngAnimateを使用するときにアニメーションを使用するには、&lt;strong&gt;CSS&lt;/strong&gt;と&lt;strong&gt;JavaScript&lt;/strong&gt;を使用する2つの方法があり&lt;strong&gt;ます&lt;/strong&gt;。前者はCSSを使用して（一致するCSSセレクター/スタイルを使用して）純粋に基づいて動作し、後者は &lt;code&gt;module.animation()&lt;/code&gt; を介して登録されたアニメーションをトリガーします。 CSSアニメーションとJSアニメーションの両方について、唯一の要件は、登録されたアニメーションと、アニメーションがトリガーされるHTML要素内の両方に存在する一致する &lt;code&gt;CSS class&lt;/code&gt; を持つことです。</target>
        </trans-unit>
        <trans-unit id="8d4859bf7eff37bdd85712fbd099ff7698bacb58" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;ng-model&lt;/code&gt; does not do a deep watch, &lt;code&gt;$render()&lt;/code&gt; is only invoked if the values of &lt;code&gt;$modelValue&lt;/code&gt; and &lt;code&gt;$viewValue&lt;/code&gt; are actually different from their previous values. If &lt;code&gt;$modelValue&lt;/code&gt; or &lt;code&gt;$viewValue&lt;/code&gt; are objects (rather than a string or number) then &lt;code&gt;$render()&lt;/code&gt; will not be invoked if you only change a property on the objects.</source>
          <target state="translated">以来 &lt;code&gt;ng-model&lt;/code&gt; 深い時計をしない、 &lt;code&gt;$render()&lt;/code&gt; の値場合にのみ呼び出され、 &lt;code&gt;$modelValue&lt;/code&gt; と &lt;code&gt;$viewValue&lt;/code&gt; 、実際に、以前の値とは異なります。場合は &lt;code&gt;$modelValue&lt;/code&gt; または &lt;code&gt;$viewValue&lt;/code&gt; オブジェクト（というよりも、文字列または数値）ですその後、 &lt;code&gt;$render()&lt;/code&gt; あなただけのオブジェクトのプロパティを変更した場合に呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="aa0c4812062cb47a1f9de3c2cbc70c493f89f950" translate="yes" xml:space="preserve">
          <source>Since AngularJS itself uses &lt;code&gt;$validators&lt;/code&gt;, you can easily replace or remove built-in validators, should you find it necessary. The following example shows you how to overwrite the email validator in &lt;code&gt;input[email]&lt;/code&gt; from a custom directive so that it requires a specific top-level domain, &lt;code&gt;example.com&lt;/code&gt; to be present. Note that you can alternatively use &lt;code&gt;ng-pattern&lt;/code&gt; to further restrict the validation.</source>
          <target state="translated">AngularJS自体は &lt;code&gt;$validators&lt;/code&gt; 使用しているため、必要に応じて組み込みのバリデーターを簡単に置き換えたり削除したりできます。次の例は、特定のトップレベルドメイン &lt;code&gt;example.com&lt;/code&gt; が存在する必要があるように、カスタムディレクティブから &lt;code&gt;input[email]&lt;/code&gt; メールバリデーターを上書きする方法を示しています。別の方法として、 &lt;code&gt;ng-pattern&lt;/code&gt; を使用して検証をさらに制限できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5430e2f20e1f12ecf42559b930c20902825a9b60" translate="yes" xml:space="preserve">
          <source>Since AngularJS looks for this directive when it is loaded (doesn't wait for the DOMContentLoaded event), it must be placed on an element that comes before the script which loads angular. Also, only the first instance of &lt;code&gt;ng-jq&lt;/code&gt; will be used and all others ignored.</source>
          <target state="translated">AngularJSは、読み込まれたときにこのディレクティブを検索するため（DOMContentLoadedイベントを待機しないため）、angularを読み込むスクリプトの前にある要素に配置する必要があります。また、 &lt;code&gt;ng-jq&lt;/code&gt; の最初のインスタンスのみが使用され、他のすべては無視されます。</target>
        </trans-unit>
        <trans-unit id="28e56abe07923e1d07be0d87d2c7be61d8d34f6f" translate="yes" xml:space="preserve">
          <source>Since HTML attributes are case-insensitive, camelCase properties like &lt;code&gt;innerHTML&lt;/code&gt; must be escaped. AngularJS uses the underscore (_) in front of a character to indicate that it is uppercase, so &lt;code&gt;innerHTML&lt;/code&gt; must be written as &lt;code&gt;ng-prop-inner_h_t_m_l=&quot;expression&quot;&lt;/code&gt; (Note that this is just an example, and for binding HTML &lt;a href=&quot;ngbindhtml&quot;&gt;&lt;code&gt;ngBindHtml&lt;/code&gt;&lt;/a&gt; should be used.</source>
          <target state="translated">HTML属性は大文字と小文字を区別しないため、 &lt;code&gt;innerHTML&lt;/code&gt; などのcamelCase プロパティはエスケープする必要があります。AngularJSは、文字の前にあるアンダースコア（_）を使用して大文字であることを示します。したがって、 &lt;code&gt;innerHTML&lt;/code&gt; は &lt;code&gt;ng-prop-inner_h_t_m_l=&quot;expression&quot;&lt;/code&gt; （これは単なる例であり、HTMLをバインドするために&lt;a href=&quot;ngbindhtml&quot;&gt; &lt;code&gt;ngBindHtml&lt;/code&gt; &lt;/a&gt;は中古。</target>
        </trans-unit>
        <trans-unit id="6180f52ac744623bfbc50d4e6893b9f447288926" translate="yes" xml:space="preserve">
          <source>Since HTML attributes are case-insensitive, camelCase properties like &lt;code&gt;myEvent&lt;/code&gt; must be escaped. AngularJS uses the underscore (_) in front of a character to indicate that it is uppercase, so &lt;code&gt;myEvent&lt;/code&gt; must be written as &lt;code&gt;ng-on-my_event=&quot;expression&quot;&lt;/code&gt;.</source>
          <target state="translated">HTML属性では大文字と小文字が区別されないため、 &lt;code&gt;myEvent&lt;/code&gt; などのcamelCaseプロパティはエスケープする必要があります。AngularJSは、文字の前にあるアンダースコア（_）を使用して大文字であることを示すため、 &lt;code&gt;myEvent&lt;/code&gt; は &lt;code&gt;ng-on-my_event=&quot;expression&quot;&lt;/code&gt; として記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="e5f8c4edd14e615a9529c236970c4b73e5a525f6" translate="yes" xml:space="preserve">
          <source>Since a Factory is a more powerful version of the Value recipe, the same service can be constructed with it. Using our previous &lt;code&gt;clientId&lt;/code&gt; Value recipe example, we can rewrite it as a Factory recipe like this:</source>
          <target state="translated">FactoryはValueレシピのより強力なバージョンであるため、同じサービスをそれで構築できます。前の &lt;code&gt;clientId&lt;/code&gt; Valueレシピの例を使用して、次のようなFactoryレシピとして書き直すことができます。</target>
        </trans-unit>
        <trans-unit id="6d6470589666e0247f95db4453af06bba535fd66" translate="yes" xml:space="preserve">
          <source>Since simple values, like URL prefixes, don't have dependencies or configuration, it's often handy to make them available in both the configuration and run phases. This is what the Constant recipe is for.</source>
          <target state="translated">URL接頭辞のような単純な値は依存関係や設定を持たないので、設定と実行の両方のフェーズで利用できるようにしておくと便利です。これが Constant のレシピです。</target>
        </trans-unit>
        <trans-unit id="ad773d9c369a2cbf2a3edcbfbb3bda586bbb4fa9" translate="yes" xml:space="preserve">
          <source>Since some CSS style names are not valid keys for an object, they must be quoted. See the 'background-color' style in the example below.</source>
          <target state="translated">いくつかのCSSスタイル名はオブジェクトの有効なキーではないので、それらは引用符で囲まれなければなりません。以下の例の 'background-color' スタイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="aee86cd3da47d151256d0ba9d57166d31b584bac" translate="yes" xml:space="preserve">
          <source>Since the directives are registered via the Factory recipe, we can use the same syntax as with factories.</source>
          <target state="translated">ディレクティブはFactoryレシピ経由で登録されているので、factoryと同じ構文を使うことができます。</target>
        </trans-unit>
        <trans-unit id="de2656cf829a163f90dcbaec4f540852bc0adf82" translate="yes" xml:space="preserve">
          <source>Since the role of forms in client-side AngularJS applications is different than in classical roundtrip apps, it is desirable for the browser not to translate the form submission into a full page reload that sends the data to the server. Instead some javascript logic should be triggered to handle the form submission in an application-specific way.</source>
          <target state="translated">クライアントサイドのAngularJSアプリケーションにおけるフォームの役割は従来のラウンドトリップアプリとは異なるので、ブラウザはフォーム送信をサーバーにデータを送るフルページリロードに変換しないことが望ましいです。その代わりに、アプリケーション固有の方法でフォーム送信を処理するためにjavascriptのロジックをトリガーする必要があります。</target>
        </trans-unit>
        <trans-unit id="0f8d61a46a9e62b0ab9b1fbc5b8b9b1845db6541" translate="yes" xml:space="preserve">
          <source>Since there is always a &lt;code&gt;.&lt;/code&gt; in the bindings, you don't have to worry about prototypal inheritance masking primitives.</source>
          <target state="translated">常にあるので &lt;code&gt;.&lt;/code&gt; バインディングでは、プロトタイプの継承マスキングプリミティブについて心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="a49e716395a6fcc1d3c1224721ec121ecfc0eeaf" translate="yes" xml:space="preserve">
          <source>Since this function will be called extensively, keep the implementation of these functions fast, as the performance of these functions have a direct impact on the expressions parsing speed.</source>
          <target state="translated">この関数は広範囲に呼び出されるので、これらの関数の性能は式の解析速度に直接影響するので、実装は高速にしておきましょう。</target>
        </trans-unit>
        <trans-unit id="59722304fd011d17850e8a3823c58300ef1d80f6" translate="yes" xml:space="preserve">
          <source>Since this is not recommended usage, we do not test for this, and changes to AngularJS core may break your code.</source>
          <target state="translated">これは推奨される使い方ではないので、テストはしておらず、AngularJSコアへの変更はコードを壊す可能性があります。</target>
        </trans-unit>
        <trans-unit id="917832a239f3fd99dcae4d93657df711ad5f5d8f" translate="yes" xml:space="preserve">
          <source>Since we already have a constructor for our UnicornLauncher type, we can replace the Factory recipe above with a Service recipe like this:</source>
          <target state="translated">すでにUnicornLauncherタイプのコンストラクタを持っているので、上記のFactoryレシピを以下のようなServiceレシピに置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="3b0eccf81fb8808c4fb4ac778066a0a4996cfb53" translate="yes" xml:space="preserve">
          <source>Since we're adding/removing CSS classes then the CSS transition will also pick those up:</source>
          <target state="translated">CSS クラスを追加したり削除したりしているので、CSS トランジションでもそれらのクラスをピックアップします。</target>
        </trans-unit>
        <trans-unit id="9790252dd3fcd976ceaf1905ffedbaea284d3197" translate="yes" xml:space="preserve">
          <source>Since you can apply multiple decorators, it is noteworthy that decorator application always follows order of declaration:</source>
          <target state="translated">複数のデコレータを適用することができるので、デコレータの適用は常に宣言の順番に従うことに注目してください。</target>
        </trans-unit>
        <trans-unit id="221e7f46589fb8b5c943fabe0a90906e727a990e" translate="yes" xml:space="preserve">
          <source>Singletons &amp;ndash; Each component dependent on a service gets a reference to the single instance generated by the service factory.</source>
          <target state="translated">シングルトン&amp;ndash;サービスに依存する各コンポーネントは、サービスファクトリによって生成された単一のインスタンスへの参照を取得します。</target>
        </trans-unit>
        <trans-unit id="edf9f9f4ae8d57a352e36949269c63714ff489d8" translate="yes" xml:space="preserve">
          <source>Slots that are not marked as optional (&lt;code&gt;?&lt;/code&gt;) will trigger a compile time error if there are no matching elements in the transclude content. If you wish to know if an optional slot was filled with content, then you can call &lt;code&gt;$transclude.isSlotFilled(slotName)&lt;/code&gt; on the transclude function passed to the directive's link function and injectable into the directive's controller.</source>
          <target state="translated">オプションとしてマークされていないスロット（ &lt;code&gt;?&lt;/code&gt; ）は、transcludeコンテンツに一致する要素がない場合、コンパイル時エラーをトリガーします。オプションのスロットがコンテンツで満たされているかどうかを知りたい場合は、ディレクティブのリンク関数に渡され、ディレクティブのコントローラーに注入可能な &lt;code&gt;$transclude.isSlotFilled(slotName)&lt;/code&gt; 関数で$ transclude.isSlotFilled（slotName）を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="1304e57395edce04375141065cec7a2b8aaaf6ee" translate="yes" xml:space="preserve">
          <source>So far we've explored how to feed in animations into an AngularJS application, but how do we trigger animations within our own directives in our application? By injecting the &lt;code&gt;$animate&lt;/code&gt; service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's imagine we have a greeting box that shows and hides itself when the data changes</source>
          <target state="translated">これまで、AngularJSアプリケーションにアニメーションをフィードする方法を検討してきましたが、アプリケーションの独自のディレクティブ内でアニメーションをトリガーするにはどうすればよいですか？注入することにより &lt;code&gt;$animate&lt;/code&gt; 私たちのディレクティブコードにサービスを、私たちは、その後、アニメーションによって消費することができ、構造とクラスベースのフックをトリガすることができます。データが変更されたときに表示と非表示を切り替えるグリーティングボックスがあるとします。</target>
        </trans-unit>
        <trans-unit id="b9b91374d2524cbd476e32f3e00d6bc93d1cf372" translate="yes" xml:space="preserve">
          <source>So where does this &lt;code&gt;myTabs&lt;/code&gt; controller come from? Directives can specify controllers using the unsurprisingly named &lt;code&gt;controller&lt;/code&gt; option. As you can see, the &lt;code&gt;myTabs&lt;/code&gt; directive uses this option. Just like &lt;code&gt;ngController&lt;/code&gt;, this option attaches a controller to the template of the directive.</source>
          <target state="translated">では、この &lt;code&gt;myTabs&lt;/code&gt; コントローラはどこから来たのでしょうか。ディレクティブは、驚くほど名前の付いていない &lt;code&gt;controller&lt;/code&gt; オプションを使用してコントローラーを指定できます。ご覧のとおり、 &lt;code&gt;myTabs&lt;/code&gt; ディレクティブはこのオプションを使用しています。 &lt;code&gt;ngController&lt;/code&gt; と同様に、このオプションはディレクティブのテンプレートにコントローラーをアタッチします。</target>
        </trans-unit>
        <trans-unit id="57f42d3af4e66a8c4d6f60a13630a4233309c21e" translate="yes" xml:space="preserve">
          <source>Some directives have options that will cause them to use a custom &lt;code&gt;$watchCollection&lt;/code&gt; on the model expression</source>
          <target state="translated">一部のディレクティブには、モデル式でカスタム &lt;code&gt;$watchCollection&lt;/code&gt; を使用させるオプションがあります</target>
        </trans-unit>
        <trans-unit id="7c01d13578172cd43fe55634eb54a9376d0ff04b" translate="yes" xml:space="preserve">
          <source>Some directives such as &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ng-repeat&lt;/code&gt;&lt;/a&gt; clone DOM elements once for each item in a collection. Having a compile and link phase improves performance since the cloned template only needs to be compiled once, and then linked once for each clone instance.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ng-repeat&lt;/code&gt; &lt;/a&gt;などの一部のディレクティブは、コレクション内のアイテムごとに1回ずつDOM要素を複製します。コンパイルおよびリンクフェーズを使用すると、クローンテンプレートを1回だけコンパイルし、各クローンインスタンスに対して1回リンクするだけでよいため、パフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="abbc5f6e9931e1cf9c3b6a86facb217df53278e5" translate="yes" xml:space="preserve">
          <source>Some of the things to consider are:</source>
          <target state="translated">考慮すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="d096867d249bc9020052a71ba018f7a10b3ca19c" translate="yes" xml:space="preserve">
          <source>Something Missing?</source>
          <target state="translated">何か欠けていますか?</target>
        </trans-unit>
        <trans-unit id="cbbc1430e2b49afa7433be0a07729194e8717264" translate="yes" xml:space="preserve">
          <source>Sometimes it's helpful to bind &lt;code&gt;ngModel&lt;/code&gt; to a getter/setter function. A getter/setter is a function that returns a representation of the model when called with zero arguments, and sets the internal state of a model when called with an argument. It's sometimes useful to use this for models that have an internal representation that's different from what the model exposes to the view.</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; をゲッター/セッター関数にバインドすると便利な場合があります。ゲッター/セッターは、引数なしで呼び出されるとモデルの表現を返し、引数付きで呼び出されるとモデルの内部状態を設定する関数です。モデルがビューに公開するものとは異なる内部表現を持つモデルにこれを使用すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="664a4aedf99dd7e1979fed0833f705180138c60a" translate="yes" xml:space="preserve">
          <source>Sometimes you need to animate between different expression states, whose values don't necessary need to be known or referenced in CSS styles. Unless possible with another &lt;a href=&quot;nganimate#directive-support.html&quot;&gt;&quot;animation aware&quot; directive&lt;/a&gt;, that specific use case can always be covered with &lt;a href=&quot;nganimate/directive/nganimateswap&quot;&gt;&lt;code&gt;ngAnimateSwap&lt;/code&gt;&lt;/a&gt; as can be seen in &lt;a href=&quot;nganimate/directive/nganimateswap#examples.html&quot;&gt;this example&lt;/a&gt;.</source>
          <target state="translated">場合によっては、CSSスタイルでその値を認識したり参照したりする必要のない、異なる式の状態間をアニメーション化する必要があります。別の&lt;a href=&quot;nganimate#directive-support.html&quot;&gt;「アニメーション対応」ディレクティブ&lt;/a&gt;で可能でない限り、この特定のユースケースは、&lt;a href=&quot;nganimate/directive/nganimateswap#examples.html&quot;&gt;この例&lt;/a&gt;でわかるように、常に&lt;a href=&quot;nganimate/directive/nganimateswap&quot;&gt; &lt;code&gt;ngAnimateSwap&lt;/code&gt; &lt;/a&gt;でカバーできます。</target>
        </trans-unit>
        <trans-unit id="af888588d45874add63c6945bb37c6a42beb5dcf" translate="yes" xml:space="preserve">
          <source>Sometimes you want to get access to the injector of a currently running AngularJS app from outside AngularJS. Perhaps, you want to inject and compile some markup after the application has been bootstrapped. You can do this using the extra &lt;code&gt;injector()&lt;/code&gt; added to JQuery/jqLite elements. See &lt;a href=&quot;angular.element&quot;&gt;&lt;code&gt;angular.element&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">AngularJSの外部から現在実行中のAngularJSアプリのインジェクターにアクセスしたい場合があります。おそらく、アプリケーションがブートストラップされた後で、いくつかのマークアップを挿入してコンパイルする必要があります。これを行うには、JQuery / jqLit​​e要素に追加された追加のInjector &lt;code&gt;injector()&lt;/code&gt; を使用します。&lt;a href=&quot;angular.element&quot;&gt; &lt;code&gt;angular.element&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c70a3bbba0ad9cffadf0a0295881020387c4bed2" translate="yes" xml:space="preserve">
          <source>Sometimes, you want a component that's built from a combination of directives.</source>
          <target state="translated">時には、ディレクティブを組み合わせて構築されたコンポーネントが必要になることもあります。</target>
        </trans-unit>
        <trans-unit id="421892e3b6987a4ab2662bd41f03a6db11410f1c" translate="yes" xml:space="preserve">
          <source>Source object(s).</source>
          <target state="translated">ソースオブジェクト。</target>
        </trans-unit>
        <trans-unit id="9d05b94407a845105e7d6912f2247f1fb5aedd40" translate="yes" xml:space="preserve">
          <source>Special Purpose Objects</source>
          <target state="translated">特殊用途オブジェクト</target>
        </trans-unit>
        <trans-unit id="b96ffd57764048c51c1bcf11257b309102be467e" translate="yes" xml:space="preserve">
          <source>Special case for object literals</source>
          <target state="translated">オブジェクトリテラルの特殊なケース</target>
        </trans-unit>
        <trans-unit id="0a8b23d3b38015cbdb0fb39f4fd51ce69124721c" translate="yes" xml:space="preserve">
          <source>Special properties are exposed on the local scope of each template instance, including:</source>
          <target state="translated">特別なプロパティは、以下のように各テンプレートインスタンスのローカルスコープで公開されます。</target>
        </trans-unit>
        <trans-unit id="a078a6274605136ba821d917e9eea575f76690d4" translate="yes" xml:space="preserve">
          <source>Special repeat start and end points</source>
          <target state="translated">特別なリピートの開始点と終了点</target>
        </trans-unit>
        <trans-unit id="57b7760bda7b4380592b5737a6a82c6ccba48801" translate="yes" xml:space="preserve">
          <source>Specialized objects conform to a specific AngularJS framework API. These objects are one of controllers, directives, filters or animations.</source>
          <target state="translated">特殊なオブジェクトは特定のAngularJSフレームワークのAPIに準拠しています。これらのオブジェクトはコントローラ、ディレクティブ、フィルタ、アニメーションのいずれかです。</target>
        </trans-unit>
        <trans-unit id="04c5112c22bab611b8969bac11e09ff8b1803c53" translate="yes" xml:space="preserve">
          <source>Specific Topics</source>
          <target state="translated">特定のトピック</target>
        </trans-unit>
        <trans-unit id="5111401f8ca4570e9c5c87b00d803bc9e5949a8f" translate="yes" xml:space="preserve">
          <source>Specifically, select with repeated options slows down significantly starting at 2000 options in Chrome and Internet Explorer / Edge.</source>
          <target state="translated">具体的には、ChromeやInternet Explorer Edgeでは、オプションを繰り返し選択すると、2000個のオプションから大幅に遅くなります。</target>
        </trans-unit>
        <trans-unit id="ee5be6a3c404fec10a846b912d2167e79d9eb9d4" translate="yes" xml:space="preserve">
          <source>Specifies what the template should replace. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">テンプレートで置き換えるものを指定します。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ebe7a17abd0db8768c02337625977fab8c51abe5" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on blur event.</source>
          <target state="translated">ぼかしイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="0fdd24bba9560ba7f15628258d8c85038b456928" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on copy event.</source>
          <target state="translated">コピーイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="45774185dbd7972d0db9bbbe77aed1f54b1dc5fe" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on cut event.</source>
          <target state="translated">カットイベント時のカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="69ee0cf954ecc6be76292ac30523261180946c32" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on focus event.</source>
          <target state="translated">フォーカスイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="2635e69da87a75b4a328ff60a4a617ced9b9ab84" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on keydown event.</source>
          <target state="translated">キーダウンイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="364cf45ef5402fe8a77cfe94298efc046a399d5e" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on keypress event.</source>
          <target state="translated">キープレスイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="d2fbffdaf1f164dd87a0d7306222c286addb62c2" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on keyup event.</source>
          <target state="translated">キーアップイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="66046b450c8ca10135ebc76e12b5d56f6bd71fcf" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mouseenter event.</source>
          <target state="translated">マウス入力イベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="dc4396794528c548db1abf00c9509c4b1640d305" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mouseleave event.</source>
          <target state="translated">mouseleave イベントでのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="6f7dc3f5a81beb83b7f91c0492d6dd61c997efa8" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mousemove event.</source>
          <target state="translated">マウス移動イベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="2ecc906801a3e6a9462c1e80878ac4cb68a8a04b" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mouseover event.</source>
          <target state="translated">マウスオーバーイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="c9957119c462925749108fa90e18e12f28fbbf99" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mouseup event.</source>
          <target state="translated">マウスアップイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="9e739ba9d9452b11d6950ec065ccba6f29b0281e" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on paste event.</source>
          <target state="translated">ペーストイベントのカスタム動作を指定します。</target>
        </trans-unit>
        <trans-unit id="62ae044c38e8eea1750700749fdf95cb26a771d3" translate="yes" xml:space="preserve">
          <source>Specify custom behavior when an element is swiped to the left on a touchscreen device. A leftward swipe is a quick, right-to-left slide of the finger. Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag too.</source>
          <target state="translated">タッチスクリーンデバイス上で要素が左にスワイプされたときのカスタム動作を指定します。左方向へのスワイプとは、指を素早く右から左にスライドさせることです。ngSwipeLeft はタッチベースのデバイス向けに設計されていますが、マウスのクリックやドラッグでも動作します。</target>
        </trans-unit>
        <trans-unit id="ed5277106fc86f53ceb18f5891b049962ec8e692" translate="yes" xml:space="preserve">
          <source>Specify custom behavior when an element is swiped to the right on a touchscreen device. A rightward swipe is a quick, left-to-right slide of the finger. Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag too.</source>
          <target state="translated">タッチスクリーンデバイス上で要素が右にスワイプされたときのカスタム動作を指定します。右方向へのスワイプとは、指を左から右に素早くスライドさせることです。ngSwipeRight はタッチベースのデバイス向けに設計されていますが、マウスのクリックやドラッグでも動作します。</target>
        </trans-unit>
        <trans-unit id="e383a8d6c6a65b95bb3d6da162b3171ba830f168" translate="yes" xml:space="preserve">
          <source>Specifying both &lt;code&gt;no-unsafe-eval&lt;/code&gt; and &lt;code&gt;no-inline-style&lt;/code&gt; tells AngularJS that we must not inject styles nor use eval, which is the same as an empty: ng-csp. E.g.&lt;code&gt;&amp;lt;body ng-csp=&quot;no-inline-style;no-unsafe-eval&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;no-unsafe-eval&lt;/code&gt; と &lt;code&gt;no-inline-style&lt;/code&gt; の両方を指定すると、スタイルを挿入したり、evalを使用したりしてはならないことをAngularJSに伝えます。これは、空のng-cspと同じです。例： &lt;code&gt;&amp;lt;body ng-csp=&quot;no-inline-style;no-unsafe-eval&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a48590887dc5ac3e1df0a031837fc5c9dd8ba17b" translate="yes" xml:space="preserve">
          <source>Specifying only &lt;code&gt;no-inline-style&lt;/code&gt; tells AngularJS that we must not inject styles, but that we can run eval - no automatic check for unsafe eval will occur. E.g. &lt;code&gt;&amp;lt;body ng-csp=&quot;no-inline-style&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;no-inline-style&lt;/code&gt; のみを指定すると、スタイルを挿入してはならないが、evalを実行できることをAngularJSに伝えます-安全でないevalの自動チェックは行われません。例： &lt;code&gt;&amp;lt;body ng-csp=&quot;no-inline-style&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9595e653885c174c53ed5a17c46760fe9aa2b31" translate="yes" xml:space="preserve">
          <source>Specifying only &lt;code&gt;no-unsafe-eval&lt;/code&gt; tells AngularJS that we must not use eval, but that we can inject inline styles. E.g. &lt;code&gt;&amp;lt;body ng-csp=&quot;no-unsafe-eval&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;no-unsafe-eval&lt;/code&gt; だけを指定すると、AngularJSにevalを使用してはならないが、インラインスタイルを挿入できることが通知されます。例： &lt;code&gt;&amp;lt;body ng-csp=&quot;no-unsafe-eval&quot;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b399f97c3ae5f107e746baac5c2d19b1a8d42cc9" translate="yes" xml:space="preserve">
          <source>Specifying timezones</source>
          <target state="translated">タイムゾーンの指定</target>
        </trans-unit>
        <trans-unit id="a54d839afff90b786485fc552138537ed9fe8312" translate="yes" xml:space="preserve">
          <source>Splitting on newline</source>
          <target state="translated">改行での分割</target>
        </trans-unit>
        <trans-unit id="bd460706c33e700b49c8ae9c041be0f8c0b2338d" translate="yes" xml:space="preserve">
          <source>Stackoverflow.com</source>
          <target state="translated">Stackoverflow.com</target>
        </trans-unit>
        <trans-unit id="01d799bca2a69a007158bc0e7affb53b76bb12cb" translate="yes" xml:space="preserve">
          <source>Stagger animations are currently only supported within CSS-defined animations.</source>
          <target state="translated">千鳥アニメーションは、現在のところCSSで定義されたアニメーション内でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="6dc5055d926eba0a5a0d1b7f405534e8dbc2e929" translate="yes" xml:space="preserve">
          <source>Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation will also be reset if one or more animation frames have passed since the multiple calls to &lt;code&gt;$animate&lt;/code&gt; were fired.</source>
          <target state="translated">ngRepeatでは、CSSクラスが定義されている限り、スタッガリングアニメーションがデフォルトで機能します。ngRepeatの外で、驚異的なアニメーションを自分で使用するには、$ animateで同じイベントへの複数の呼び出しを起動することでトリガーできます。ただし、これを取り巻く制限は、各要素が同じCSS className値と同じ親要素を持つ必要があることです。 &lt;code&gt;$animate&lt;/code&gt; への複数の呼び出しが発生してから1つ以上のアニメーションフレームが渡された場合も、時間差操作はリセットされます。</target>
        </trans-unit>
        <trans-unit id="1f1e7eba09c2ce4b9e9136f1a569e0232894be52" translate="yes" xml:space="preserve">
          <source>State object for pushState or replaceState</source>
          <target state="translated">pushStateまたはreplaceStateのためのステートオブジェクト</target>
        </trans-unit>
        <trans-unit id="7cf0be0a9e2a8d99b8c4759b4af56f29e76aa7ee" translate="yes" xml:space="preserve">
          <source>Stateful filters</source>
          <target state="translated">ステートフルフィルタ</target>
        </trans-unit>
        <trans-unit id="5e96a873a72243db5cb2df269e0f0d2cbf0c7b9d" translate="yes" xml:space="preserve">
          <source>Strict Contextual Escaping</source>
          <target state="translated">厳密な文脈上のエスケープ</target>
        </trans-unit>
        <trans-unit id="3775eeb949b1fb2fd1955bcb420db6eb7b25e4a7" translate="yes" xml:space="preserve">
          <source>Strict Contextual Escaping (SCE) is a mode in which AngularJS constrains bindings to only render trusted values. Its goal is to assist in writing code in a way that (a) is secure by default, and (b) makes auditing for security vulnerabilities such as XSS, clickjacking, etc. a lot easier.</source>
          <target state="translated">Strict Contextual Escaping (SCE)はAngularJSがバインディングを拘束して信頼された値のみをレンダリングするモードです。その目的は、(a)デフォルトで安全で、(b)XSSやクリックジャッキングなどのセキュリティ脆弱性の監査をより簡単にするようなコードを書くことを支援することです。</target>
        </trans-unit>
        <trans-unit id="1f5a49130979c6fca3781fbd1b1aaf18d84c7ba1" translate="yes" xml:space="preserve">
          <source>Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain contexts to require a value that is marked as safe to use for that context.</source>
          <target state="translated">Strict Contextual Escaping (SCE)とは、AngularJSが特定のコンテキストでバインディングに、そのコンテキストで使用しても安全であるとマークされた値を要求するモードのことです。</target>
        </trans-unit>
        <trans-unit id="1c659f2d7b3b50a0d6469f82f986c1ebaf9b0d3d" translate="yes" xml:space="preserve">
          <source>Strict DI Mode</source>
          <target state="translated">厳格なDIモード</target>
        </trans-unit>
        <trans-unit id="2bfb8e4ab7ad26987612ed241301df64e4a5e6c8" translate="yes" xml:space="preserve">
          <source>Strict mode throws an error whenever a service tries to use implicit annotations.</source>
          <target state="translated">Strict モードは、サービスが暗黙のアノテーションを使用しようとするとエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="88d32ee4ea8feed876a112599c55110bdd530427" translate="yes" xml:space="preserve">
          <source>String expression to compile.</source>
          <target state="translated">コンパイルする文字列式。</target>
        </trans-unit>
        <trans-unit id="e12b4d937b999dc5172d2e40f3ebbc44d819487d" translate="yes" xml:space="preserve">
          <source>String of subset of &lt;code&gt;EACM&lt;/code&gt; which restricts the directive to a specific directive declaration style. If omitted, the defaults (elements and attributes) are used.</source>
          <target state="translated">ディレクティブを特定のディレクティブ宣言スタイルに制限する &lt;code&gt;EACM&lt;/code&gt; のサブセットの文字列。省略した場合、デフォルト（要素と属性）が使用されます。</target>
        </trans-unit>
        <trans-unit id="872c64e82c40b2d1cd4b6a9e18bb1db22bb67a26" translate="yes" xml:space="preserve">
          <source>String representing the document type used by the markup in the template. AngularJS needs this information as those elements need to be created and cloned in a special way when they are defined outside their usual containers like &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">テンプレートのマークアップで使用されるドキュメントタイプを表す文字列。AngularJSは、 &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt; のような通常のコンテナーの外部で定義されている場合、これらの要素を特別な方法で作成および複製する必要があるため、この情報が必要です。</target>
        </trans-unit>
        <trans-unit id="88074187af21b77e29c2c3fb7338c2bfed9d4dc7" translate="yes" xml:space="preserve">
          <source>Strip &lt;code&gt;x-&lt;/code&gt; and &lt;code&gt;data-&lt;/code&gt; from the front of the element/attributes.</source>
          <target state="translated">ストリップは、 &lt;code&gt;x-&lt;/code&gt; と &lt;code&gt;data-&lt;/code&gt; 要素/属性の正面から。</target>
        </trans-unit>
        <trans-unit id="7ba69fbec00fde56296717c9d98342680ce6437e" translate="yes" xml:space="preserve">
          <source>Submitting a form and preventing the default action</source>
          <target state="translated">フォームの送信とデフォルトアクションの防止</target>
        </trans-unit>
        <trans-unit id="1776bd536ae1b98776c73edc90a250f79697f232" translate="yes" xml:space="preserve">
          <source>Success callback is called with (value (Object|Array), responseHeaders (Function), status (number), statusText (string)) arguments, where &lt;code&gt;value&lt;/code&gt; is the populated resource instance or collection object. The error callback is called with (httpResponse) argument.</source>
          <target state="translated">（値（オブジェクト|配列）、responseHeaders（関数）、ステータス（数値）、ステータステキスト（文字列））引数を使用して成功コールバックが呼び出されます。 &lt;code&gt;value&lt;/code&gt; は、入力されたリソースインスタンスまたはコレクションオブジェクトです。エラーコールバックは（httpResponse）引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="651a1eef515aca30b90f14ef4396087abadd6816" translate="yes" xml:space="preserve">
          <source>Super-powered by Google &amp;copy;2010-2018 ()</source>
          <target state="translated">Google&amp;copy;2010-2018（）を搭載</target>
        </trans-unit>
        <trans-unit id="128ad4886b58c56808262e16c97c1fefa3d0364b" translate="yes" xml:space="preserve">
          <source>Support for forms and form validation.</source>
          <target state="translated">フォームとフォームの検証をサポートします。</target>
        </trans-unit>
        <trans-unit id="533c3fe8a11280b09049baeef1d18f1e2c66b251" translate="yes" xml:space="preserve">
          <source>Supported Animations</source>
          <target state="translated">サポートされているアニメーション</target>
        </trans-unit>
        <trans-unit id="61f41951ba384b168a3fd044153d2a0d7437a779" translate="yes" xml:space="preserve">
          <source>Supported Attributes</source>
          <target state="translated">サポートされている属性</target>
        </trans-unit>
        <trans-unit id="9e850d56a52a0f4a76ab102f64af3c41ced5ebbc" translate="yes" xml:space="preserve">
          <source>Supported directives</source>
          <target state="translated">サポートされているディレクティブ</target>
        </trans-unit>
        <trans-unit id="b844ebf9107f313b705243ff6e3c0e29c537e7bb" translate="yes" xml:space="preserve">
          <source>Supported locales in AngularJS</source>
          <target state="translated">AngularJSでサポートされているロケール</target>
        </trans-unit>
        <trans-unit id="d67aa352a36cef88c13b259bd33561d90b0365b1" translate="yes" xml:space="preserve">
          <source>Suspend watchers of this scope subtree so that they will not be invoked during digest.</source>
          <target state="translated">このスコープサブツリーのウォッチャーをサスペンドして、ダイジェスト中に呼び出されないようにします。</target>
        </trans-unit>
        <trans-unit id="0613e8d33b88eb5f715df8657a9f46a63b77c7cf" translate="yes" xml:space="preserve">
          <source>Suspending scopes from the digest cycle can have unwanted and difficult to debug results. Only use this approach if you are confident that you know what you are doing and have ample tests to ensure that bindings get updated as you expect.</source>
          <target state="translated">スコープをダイジェストサイクルからサスペンドすると、望ましくない結果になったりデバッグが困難になったりすることがあります。自分が何をしているのか分かっていて、バインディングが期待通りに更新されるように十分なテストを行っていると確信している場合にのみ、この方法を使用してください。</target>
        </trans-unit>
        <trans-unit id="32e904303ff61f5b2a1250947786bac2775a479c" translate="yes" xml:space="preserve">
          <source>Symbol to denote start of expression in the interpolated string. Defaults to &lt;code&gt;{{&lt;/code&gt;.</source>
          <target state="translated">補間された文字列の式の開始を示す記号。デフォルトは &lt;code&gt;{{&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="010df4acd78408b0b90ae7e93dc3b612e04db36a" translate="yes" xml:space="preserve">
          <source>Symbol to denote the end of expression in the interpolated string. Defaults to &lt;code&gt;}}&lt;/code&gt;.</source>
          <target state="translated">補間された文字列の式の終わりを示す記号。デフォルトは &lt;code&gt;}}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6a5f18031d695445e63d4578e75564ff86e9c008" translate="yes" xml:space="preserve">
          <source>Symbol to denote the start of expression in the interpolated string. Defaults to &lt;code&gt;{{&lt;/code&gt;.</source>
          <target state="translated">補間された文字列の式の開始を示す記号。デフォルトは &lt;code&gt;{{&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="24c5fe305312dc2c4ffb8fb7b9eb84e1aca41b7f" translate="yes" xml:space="preserve">
          <source>Synchronizes the URL with the browser when the user</source>
          <target state="translated">ユーザーが</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="0ffd830453cb1543a236124ebfabc6b09e44c420" translate="yes" xml:space="preserve">
          <source>Synthetic event object</source>
          <target state="translated">合成イベントオブジェクト</target>
        </trans-unit>
        <trans-unit id="ef0c9c3ef9a9101037c044968d4ec8561862d66d" translate="yes" xml:space="preserve">
          <source>Synthetic event object.</source>
          <target state="translated">合成イベントオブジェクト。</target>
        </trans-unit>
        <trans-unit id="11208e323cd2d68ee6883f284ffb9391f1597c5e" translate="yes" xml:space="preserve">
          <source>Take note that:</source>
          <target state="translated">注意してください。</target>
        </trans-unit>
        <trans-unit id="68b7d169a5352c6fcac93577ccebfe033038e7f9" translate="yes" xml:space="preserve">
          <source>Taking a look at the following CSS code, we can see some transition and keyframe animation code set up for each of those events that occur when &lt;code&gt;ngRepeat&lt;/code&gt; triggers them:</source>
          <target state="translated">次のCSSコードを見ると、 &lt;code&gt;ngRepeat&lt;/code&gt; がトリガーしたときに発生するこれらの各イベントに設定されたトランジションおよびキーフレームアニメーションコードがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="652ac2cbbafccc62d55637f20bfa949ef565ffbd" translate="yes" xml:space="preserve">
          <source>Target:</source>
          <target state="translated">Target:</target>
        </trans-unit>
        <trans-unit id="122160c9a1a352e0c305c1636f954067859be86c" translate="yes" xml:space="preserve">
          <source>Teach the injector how to build a &lt;code&gt;greeter&lt;/code&gt; service, which is just an object that contains a &lt;code&gt;greet&lt;/code&gt; method. Notice that &lt;code&gt;greeter&lt;/code&gt; is dependent on the &lt;code&gt;$window&lt;/code&gt; service, which will be provided (injected into &lt;code&gt;greeter&lt;/code&gt;) by the injector.</source>
          <target state="translated">&lt;code&gt;greeter&lt;/code&gt; サービスを構築する方法をインジェクターに教えます。これは、 &lt;code&gt;greet&lt;/code&gt; メソッドを含むオブジェクトにすぎません。 &lt;code&gt;greeter&lt;/code&gt; は &lt;code&gt;$window&lt;/code&gt; サービスに依存していることに注意してください。このサービスは、インジェクターによって提供されます（ &lt;code&gt;greeter&lt;/code&gt; に注入されます）。</target>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="translated">Template</target>
        </trans-unit>
        <trans-unit id="efc74e06342f32d51bb6a68ec7bbc43d16692908" translate="yes" xml:space="preserve">
          <source>Template loading is asynchronous even if the template has been preloaded into the &lt;a href=&quot;%24templatecache&quot;&gt;&lt;code&gt;$templateCache&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">テンプレートが&lt;a href=&quot;%24templatecache&quot;&gt; &lt;code&gt;$templateCache&lt;/code&gt; &lt;/a&gt;プリロードされていても、テンプレートの読み込みは非同期です</target>
        </trans-unit>
        <trans-unit id="a288f6778aa522b317f30186b6639810acb48145" translate="yes" xml:space="preserve">
          <source>Template-expanding directive</source>
          <target state="translated">テンプレート拡張ディレクティブ</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="2846e2f8a5a3678dc3d156fda667b93314a7bc49" translate="yes" xml:space="preserve">
          <source>Test files may also have &lt;code&gt;beforeEach&lt;/code&gt; and &lt;code&gt;afterEach&lt;/code&gt; blocks, which will be run before or after each &lt;code&gt;it&lt;/code&gt; block regardless of whether the block passes or fails.</source>
          <target state="translated">テストファイルも持っているかもしれ &lt;code&gt;beforeEach&lt;/code&gt; と &lt;code&gt;afterEach&lt;/code&gt; 前に実行されるブロックを、またはそれぞれの後に &lt;code&gt;it&lt;/code&gt; 関係なく、ブロックが成功したか失敗したかのブロック。</target>
        </trans-unit>
        <trans-unit id="96975959ea5e2bafaba38be5453d1411f8d89f35" translate="yes" xml:space="preserve">
          <source>Test using your keyboard to ensure &lt;code&gt;tabindex&lt;/code&gt; is used correctly.</source>
          <target state="translated">キーボードを使用してテストし、 &lt;code&gt;tabindex&lt;/code&gt; が正しく使用されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="1b0fcdbdca53eb09810029462dfa1eb106aa1e6a" translate="yes" xml:space="preserve">
          <source>Testability story: Unit-testing, end-to-end testing, mocks and test harnesses.</source>
          <target state="translated">テスト可能性の話。ユニットテスト、エンドツーエンドテスト、モック、テストハーネス。</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="a3634a65dd330502bee5446e899329476bf7ded2" translate="yes" xml:space="preserve">
          <source>Testing Controllers</source>
          <target state="translated">テストコントローラ</target>
        </trans-unit>
        <trans-unit id="489b1748777814ce6ed91bbe7be089fedb156bb8" translate="yes" xml:space="preserve">
          <source>Testing Directives</source>
          <target state="translated">テストディレクティブ</target>
        </trans-unit>
        <trans-unit id="0ca51773188a324ba6500b945a5b499260a7faf7" translate="yes" xml:space="preserve">
          <source>Testing Directives With External Templates</source>
          <target state="translated">外部テンプレートを使用したディレクティブのテスト</target>
        </trans-unit>
        <trans-unit id="30e8834d5ca8918b8670c01a844e8692c7dd9722" translate="yes" xml:space="preserve">
          <source>Testing Filters</source>
          <target state="translated">テストフィルタ</target>
        </trans-unit>
        <trans-unit id="d231a55e7832988803b4830706f5cb4b4b35b05a" translate="yes" xml:space="preserve">
          <source>Testing Promises</source>
          <target state="translated">テストの約束</target>
        </trans-unit>
        <trans-unit id="33850105e908659abbaf812bf8e3ec66054d9c44" translate="yes" xml:space="preserve">
          <source>Testing Transclusion Directives</source>
          <target state="translated">封入指令のテスト</target>
        </trans-unit>
        <trans-unit id="49e5ae7dd39e7997ba6bd0d5dbbae1d459e3b000" translate="yes" xml:space="preserve">
          <source>Testing a Controller</source>
          <target state="translated">コントローラのテスト</target>
        </trans-unit>
        <trans-unit id="973cdd8387cb5fb2726eb68f3d034d82d78bcdc9" translate="yes" xml:space="preserve">
          <source>Testing custom filters</source>
          <target state="translated">カスタムフィルタのテスト</target>
        </trans-unit>
        <trans-unit id="d598eb7ac32708a825be100c99438a02348d3b2c" translate="yes" xml:space="preserve">
          <source>Testing with Screen Readers</source>
          <target state="translated">スクリーンリーダーでのテスト</target>
        </trans-unit>
        <trans-unit id="b685209d970c5dca203550b5a554b7a8f8925e69" translate="yes" xml:space="preserve">
          <source>Testing with the $location service</source>
          <target state="translated">ロケーションサービスでのテスト</target>
        </trans-unit>
        <trans-unit id="9df5706daf3eb9fa0be21aa54c6b83ea15bfa489" translate="yes" xml:space="preserve">
          <source>Text input that converts between a delimited string and an array of strings. The default delimiter is a comma followed by a space - equivalent to &lt;code&gt;ng-list=&quot;, &quot;&lt;/code&gt;. You can specify a custom delimiter as the value of the &lt;code&gt;ngList&lt;/code&gt; attribute - for example, &lt;code&gt;ng-list=&quot; | &quot;&lt;/code&gt;.</source>
          <target state="translated">区切られた文字列と文字列の配列の間で変換するテキスト入力。デフォルトの区切り文字は、カンマとそれに続くスペースです &lt;code&gt;ng-list=&quot;, &quot;&lt;/code&gt; と同等です。 &lt;code&gt;ng-list=&quot; | &quot;&lt;/code&gt; ように、 &lt;code&gt;ngList&lt;/code&gt; 属性の値としてカスタム区切り文字を指定できます。</target>
        </trans-unit>
        <trans-unit id="1de6246c79ca810bc64260eac8505e55ffa2a6d4" translate="yes" xml:space="preserve">
          <source>That means attributes that contain AngularJS expressions will not be merged correctly, e.g. &lt;a href=&quot;../directive/ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../directive/ngclass&quot;&gt;&lt;code&gt;ngClass&lt;/code&gt;&lt;/a&gt; will cause a &lt;a href=&quot;%24parse&quot;&gt;&lt;code&gt;$parse&lt;/code&gt;&lt;/a&gt; error:</source>
          <target state="translated">つまり、AngularJS式を含む属性は正しくマージされません。たとえば、&lt;a href=&quot;../directive/ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../directive/ngclass&quot;&gt; &lt;code&gt;ngClass&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;%24parse&quot;&gt; &lt;code&gt;$parse&lt;/code&gt; &lt;/a&gt;エラーを引き起こします。</target>
        </trans-unit>
        <trans-unit id="63ff583fb8237c8281eac9d6f606315184bc7596" translate="yes" xml:space="preserve">
          <source>That said, here's how you can completely disable SCE:</source>
          <target state="translated">そうは言っても、SCEを完全に無効にする方法は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f81198efd6db57b92b02b30cb7fceaac517d9ab6" translate="yes" xml:space="preserve">
          <source>That way, the parent component can decide what to do with the event (e.g. delete an item or update the properties)</source>
          <target state="translated">このようにして、親コンポーネントはイベントをどうするかを決めることができます (例:アイテムを削除したり、プロパティを更新したり)。</target>
        </trans-unit>
        <trans-unit id="6d3eac5bdaa666af92d76d51293ca60310104f3a" translate="yes" xml:space="preserve">
          <source>The $animate service exposes a series of DOM utility methods that provide support for animation hooks. The default behavior is the application of DOM operations, however, when an animation is detected (and animations are enabled), $animate will do the heavy lifting to ensure that animation runs with the triggered DOM operation.</source>
          <target state="translated">animate サービスは、アニメーションフックをサポートする一連の DOM ユーティリティメソッドを公開しています。デフォルトの動作は DOM 操作の適用ですが、アニメーションが検出されると (そしてアニメーションが有効になると)、$animate は DOM 操作をトリガーにしてアニメーションが実行されるように力仕事をします。</target>
        </trans-unit>
        <trans-unit id="e57c4d3a5ab359e3a229c47a0ef2546a3f21789d" translate="yes" xml:space="preserve">
          <source>The $http API is based on the &lt;a href=&quot;%24q&quot;&gt;deferred/promise APIs&lt;/a&gt; exposed by the $q service. While for simple usage patterns this doesn't matter much, for advanced usage it is important to familiarize yourself with these APIs and the guarantees they provide.</source>
          <target state="translated">$ http APIは、$ qサービスによって公開された&lt;a href=&quot;%24q&quot;&gt;遅延/約束APIに&lt;/a&gt;基づいています。単純な使用パターンではこれはそれほど重要ではありませんが、高度な使用ではこれらのAPIとそれらが提供する保証について理解することが重要です。</target>
        </trans-unit>
        <trans-unit id="2b2c3423145ce27da91640721fecef8829429447" translate="yes" xml:space="preserve">
          <source>The $http service will automatically add certain HTTP headers to all requests. These defaults can be fully configured by accessing the &lt;code&gt;$httpProvider.defaults.headers&lt;/code&gt; configuration object, which currently contains this default configuration:</source>
          <target state="translated">$ httpサービスは、すべてのリクエストに特定のHTTPヘッダーを自動的に追加します。これらのデフォルトは、現在このデフォルトの構成が含まれている &lt;code&gt;$httpProvider.defaults.headers&lt;/code&gt; 構成オブジェクトにアクセスすることで完全に構成できます。</target>
        </trans-unit>
        <trans-unit id="45025861cb09f44ceaf83405ae60d5eb6215c5e2" translate="yes" xml:space="preserve">
          <source>The $httpBackend used in production always responds to requests asynchronously. If we preserved this behavior in unit testing, we'd have to create async unit tests, which are hard to write, to follow and to maintain. But neither can the testing mock respond synchronously; that would change the execution of the code under test. For this reason, the mock $httpBackend has a &lt;code&gt;flush()&lt;/code&gt; method, which allows the test to explicitly flush pending requests. This preserves the async api of the backend, while allowing the test to execute synchronously.</source>
          <target state="translated">本番環境で使用される$ httpBackendは、常に非同期でリクエストに応答します。ユニットテストでこの動作を維持する場合、非同期ユニットテストを作成する必要があります。非同期ユニットテストは、記述、追跡、維持が困難です。しかし、テストモックは同期的に応答できません。テスト中のコードの実行を変更します。このため、モックの$ httpBackendには、テストで保留中の要求を明示的にフラッシュできる &lt;code&gt;flush()&lt;/code&gt; メソッドがあります。これにより、バックエンドの非同期APIが保持され、同時にテストを同期的に実行できます。</target>
        </trans-unit>
        <trans-unit id="c1ea52ec168329f434923efb4ce5bc2ed84b4d58" translate="yes" xml:space="preserve">
          <source>The $inject property</source>
          <target state="translated">インジェクションプロパティ</target>
        </trans-unit>
        <trans-unit id="0503642384b0b90b167ab28e9af91eadecde392c" translate="yes" xml:space="preserve">
          <source>The $location service parses the URL in the browser address bar (based on the &lt;a href=&quot;https://developer.mozilla.org/en/window.location&quot;&gt;window.location&lt;/a&gt;) and makes the URL available to your application. Changes to the URL in the address bar are reflected into $location service and changes to $location are reflected into the browser address bar.</source>
          <target state="translated">$ locationサービスは（&lt;a href=&quot;https://developer.mozilla.org/en/window.location&quot;&gt;window.locationに&lt;/a&gt;基づいて）ブラウザーのアドレスバーのURLを解析し、アプリケーションでURLを利用できるようにします。アドレスバーのURLへの変更は$ locationサービスに反映され、$ locationへの変更はブラウザーのアドレスバーに反映されます。</target>
        </trans-unit>
        <trans-unit id="b6de8f379ab401c8464aeb1b0f6a5f2ef4eea6d3" translate="yes" xml:space="preserve">
          <source>The $sceProvider provider allows developers to configure the &lt;a href=&quot;../service/%24sce&quot;&gt;$sce&lt;/a&gt; service.</source>
          <target state="translated">$ sceProviderプロバイダは、開発者が設定することができます&lt;a href=&quot;../service/%24sce&quot;&gt;$のSCEの&lt;/a&gt;サービスを。</target>
        </trans-unit>
        <trans-unit id="42ac23357ad542fec9521b16840bf6f2a84458b8" translate="yes" xml:space="preserve">
          <source>The $sceProvider provider allows developers to configure the &lt;a href=&quot;service/%24sce&quot;&gt;$sce&lt;/a&gt; service.</source>
          <target state="translated">$ sceProviderプロバイダは、開発者が設定することができます&lt;a href=&quot;service/%24sce&quot;&gt;$のSCEの&lt;/a&gt;サービスを。</target>
        </trans-unit>
        <trans-unit id="7103c027a5428b05f3dc7b063e771e4fb90302b6" translate="yes" xml:space="preserve">
          <source>The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the directive's element. These local properties are useful for aliasing values for templates. The keys in the object hash map to the name of the property on the isolate scope; the values define how the property is bound to the parent scope, via matching attributes on the directive's element:</source>
          <target state="translated">isolate' スコープオブジェクトハッシュは、ディレクティブの要素の属性から派生したローカルなスコーププロパティのセットを定義します。これらのローカルプロパティは、テンプレートの値をエイリアス化するのに便利です。オブジェクトハッシュのキーはアイソレートスコープのプロパティの名前に対応し、値はディレクティブの要素の属性にマッチすることで、 プロパティがどのように親スコープにバインドされるかを定義します。</target>
        </trans-unit>
        <trans-unit id="b481cf5410b28b29fd4afeb84f24ebbec4ae8d39" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;%24provide&quot;&gt;$provide&lt;/a&gt; service has a number of methods for registering components with the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt;. Many of these functions are also exposed on &lt;a href=&quot;../../ng/type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;%24provide&quot;&gt;$提供&lt;/a&gt;サービスとコンポーネントを登録するための多くの方法がある&lt;a href=&quot;%24injector&quot;&gt;$インジェクタを&lt;/a&gt;。これらの関数の多くは、&lt;a href=&quot;../../ng/type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; &lt;/a&gt;でも公開されています。</target>
        </trans-unit>
        <trans-unit id="c958fdaf4a8310848ce8c43ab113c9e38a864741" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;%24rootscope.scope&quot;&gt;&lt;code&gt;Scope&lt;/code&gt;&lt;/a&gt; that will be the &lt;code&gt;$parent&lt;/code&gt; of the newly created scope. Defaults to &lt;code&gt;this&lt;/code&gt; scope if not provided. This is used when creating a transclude scope to correctly place it in the scope hierarchy while maintaining the correct prototypical inheritance.</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope&quot;&gt; &lt;code&gt;Scope&lt;/code&gt; &lt;/a&gt;となります &lt;code&gt;$parent&lt;/code&gt; 新しく作成されたスコープの。指定しない場合、デフォルトで &lt;code&gt;this&lt;/code&gt; スコープになります。これは、トランスクルードスコープを作成して、正しいプロトタイプの継承を維持しながらスコープ階層に正しく配置するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="5088c796c076c5afc03301480e93c045f4daa1f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;watch&lt;/a&gt; listeners are fired immediately after the expression was executed using the &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;ウォッチ&lt;/a&gt;式が使用して実行された後にリスナーがすぐに解雇されている&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ダイジェスト（）&lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="e4efeed9dc1586cac88ab933a39d0104121705c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is executed using the &lt;a href=&quot;%24rootscope.scope#%24eval.html&quot;&gt;$eval()&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../../../guide/expression&quot;&gt;式が&lt;/a&gt;使用して実行された&lt;a href=&quot;%24rootscope.scope#%24eval.html&quot;&gt;の$のeval（）&lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="3ba3a2e2a0f8ebb24ca8e23616e9111644536337" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/auto/service/%24provide#decorator.html&quot;&gt;decorator function&lt;/a&gt; allows access to a $delegate of the service once it has been instantiated. For example:</source>
          <target state="translated">&lt;a href=&quot;../api/auto/service/%24provide#decorator.html&quot;&gt;デコレータ機能は&lt;/a&gt;、それがインスタンス化された後のサービスの$デリゲートへのアクセスを可能にします。例えば：</target>
        </trans-unit>
        <trans-unit id="7eca4eaa295e01dc7c0723c82ed981b7f3a91d32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/directive/input&quot;&gt;input&lt;/a&gt; directive captures the change to the input's value and calls &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt;&lt;code&gt;(&quot;name = 'X';&quot;)&lt;/code&gt; to update the application model inside the AngularJS execution context.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/input&quot;&gt;入力&lt;/a&gt;ディレクティブキャプチャ入力の値に変更し、呼び出します&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$が適用されます&lt;/a&gt; &lt;code&gt;(&quot;name = 'X';&quot;)&lt;/code&gt; AngularJSの実行コンテキスト内のアプリケーション・モデルを更新します。</target>
        </trans-unit>
        <trans-unit id="daeecc13c816cd15919cf3da0b745b55933dea25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/directive/nghide&quot;&gt;ngHide&lt;/a&gt; directive shows or hides the given HTML element based on the expression provided to the &lt;code&gt;ngHide&lt;/code&gt; attribute. The element is shown or hidden by removing or adding the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class onto the element.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/nghide&quot;&gt;ngHide&lt;/a&gt;ディレクティブ表示または非表示に提供される発現に基づいて、指定されたHTML要素 &lt;code&gt;ngHide&lt;/code&gt; の属性。要素は、 &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスを要素から削除または追加することによって表示または非表示になります。</target>
        </trans-unit>
        <trans-unit id="099b35bc2962fc88ae182201bfacdefb00ca7545" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/directive/ngshow&quot;&gt;ngShow&lt;/a&gt; directive shows or hides the given HTML element based on the expression provided to the &lt;code&gt;ngShow&lt;/code&gt; attribute. The element is shown or hidden by removing or adding the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class onto the element.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngshow&quot;&gt;ngShow&lt;/a&gt;ディレクティブ表示または非表示に提供される発現に基づいて、指定されたHTML要素 &lt;code&gt;ngShow&lt;/code&gt; の属性。要素は、 &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスを要素から削除または追加することによって表示または非表示になります。</target>
        </trans-unit>
        <trans-unit id="023460bb941f1035ef2c9715c8324ebe5039ac36" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt; API&lt;/a&gt; page has a comprehensive list of directive options for reference.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; APIの&lt;/a&gt;ページには、参照用のディレクティブのオプションの包括的なリストを持っています。</target>
        </trans-unit>
        <trans-unit id="17a7fe7a9777db0b00b17b0cd4aa74010089b038" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;root scope&lt;/a&gt; is created during the application bootstrap by the &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;. During template linking, some directives create new child scopes.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;ルートスコープを&lt;/a&gt;して、アプリケーションのブートストラップ中に作成された&lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;$インジェクタ&lt;/a&gt;。テンプレートのリンク中に、いくつかのディレクティブは新しい子スコープを作成します。</target>
        </trans-unit>
        <trans-unit id="31494439d03e42dc5ca98a549ea110584d3df564" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; loop begins</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ダイジェスト&lt;/a&gt;ループが始まります</target>
        </trans-unit>
        <trans-unit id="380271a2fc3493b42bb9da3a0d80b696156b42a1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt; queue is used to schedule work which needs to occur outside of current stack frame, but before the browser's view render. This is usually done with &lt;code&gt;setTimeout(0)&lt;/code&gt;, but the &lt;code&gt;setTimeout(0)&lt;/code&gt; approach suffers from slowness and may cause view flickering since the browser renders the view after each event.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsyncの&lt;/a&gt;キューは、現在のスタックフレームの外側に発生する必要があるスケジュールの作業に使用されるが、ブラウザの表示の前にレンダリングされます。通常、これは &lt;code&gt;setTimeout(0)&lt;/code&gt; を使用して行われますが、 &lt;code&gt;setTimeout(0)&lt;/code&gt; のアプローチは速度が低下し、各イベントの後にブラウザーがビューをレンダリングするため、ビューがちらつく可能性があります。</target>
        </trans-unit>
        <trans-unit id="459cfb582917d3376b9b43d01c4c6cb22284ba08" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt; list detects a change on the &lt;code&gt;name&lt;/code&gt; property and notifies the &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;interpolation&lt;/a&gt;, which in turn updates the DOM.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$のウォッチ&lt;/a&gt;リストには、上の変化を検知 &lt;code&gt;name&lt;/code&gt; プロパティと通知&lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;補間&lt;/a&gt;順番にDOMを更新し、。</target>
        </trans-unit>
        <trans-unit id="547ef40c765ee6d2de24aad2fe611a70120f6eb2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt; list is a set of expressions which may have changed since last iteration. If a change is detected then the &lt;code&gt;$watch&lt;/code&gt; function is called which typically updates the DOM with the new value.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$のウォッチ&lt;/a&gt;リストには、最後の繰り返し以降に変更されたかもしれ式のセットです。変更が検出されると、 &lt;code&gt;$watch&lt;/code&gt; 関数が呼び出され、通常は新しい値でDOMを更新します。</target>
        </trans-unit>
        <trans-unit id="cb49f0f51e19995f158a11d48d6f7dc556ba8c2a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;Module&lt;/a&gt; API</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;モジュールの&lt;/a&gt; API</target>
        </trans-unit>
        <trans-unit id="41a35f6d62c6e21e8506f4e777c40bbfb88db54d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;module API&lt;/a&gt; describes all the available methods and how they can be used.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;モジュールのAPIは&lt;/a&gt;、すべての利用可能な方法を説明し、それらがどのように使用することができます。</target>
        </trans-unit>
        <trans-unit id="10eea8f5fb8fe932631820e37257ff6183f4e46e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;&lt;code&gt;config&lt;/code&gt;&lt;/a&gt; method accepts a function, which can be injected with &quot;providers&quot; and &quot;constants&quot; as dependencies. Note that you cannot inject &quot;services&quot; or &quot;values&quot; into configuration.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt; &lt;code&gt;config&lt;/code&gt; &lt;/a&gt;方法は、「プロバイダ」と依存関係として「定数」を注入することができる機能を受け付けます。「サービス」または「値」を構成に挿入できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="0116235f6dcddbbe9019dacd62ffd604839fb3d6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module#provider.html&quot;&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/a&gt; method can only be injected with other &quot;providers&quot;. However, only those that have been &lt;strong&gt;registered beforehand&lt;/strong&gt; can be injected. This is different from services, where the order of registration does not matter.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module#provider.html&quot;&gt; &lt;code&gt;provider&lt;/code&gt; &lt;/a&gt;方法は、他の唯一の「プロバイダ」を注入することができます。ただし、&lt;strong&gt;事前に登録&lt;/strong&gt;さ&lt;strong&gt;れ&lt;/strong&gt;ているもののみ注入できます。これは、登録の順序が重要ではないサービスとは異なります。</target>
        </trans-unit>
        <trans-unit id="6f4613cc7644c093ce085f5bce14a14217368e32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;&lt;code&gt;run&lt;/code&gt;&lt;/a&gt; method accepts a function, which can be injected with &quot;services&quot;, &quot;values&quot; and, &quot;constants&quot; as dependencies. Note that you cannot inject &quot;providers&quot; into &lt;code&gt;run&lt;/code&gt; blocks.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt; &lt;code&gt;run&lt;/code&gt; &lt;/a&gt;方法は、依存関係として、「サービス」、「値」と、「定数」を注入することができる機能を受け付けます。「プロバイダー」を &lt;code&gt;run&lt;/code&gt; ブロックに挿入できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f60093769cb487082aa81cbfc58344c3fdafd53b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$sceDelegateProvider#resourceUrlWhitelist()&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$sceDelegateProvider#resourceUrlBlacklist()&lt;/a&gt; can be used to restrict trusted origins for &lt;code&gt;RESOURCE_URL&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$ sceDelegateProvider＃resourceUrlWhitelist（）&lt;/a&gt;と&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$ sceDelegateProvider＃resourceUrlBlacklist（）&lt;/a&gt;のための信頼できる起源を制限するために使用することができ &lt;code&gt;RESOURCE_URL&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="e57e36fbb37332cf011f553838650abc7402b8fb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../service/%24controller&quot;&gt;$controller service&lt;/a&gt; is used by AngularJS to create new controllers.</source>
          <target state="translated">&lt;a href=&quot;../service/%24controller&quot;&gt;$コントローラサービスは、&lt;/a&gt;新しいコントローラを作成するためにAngularJSで使用されています。</target>
        </trans-unit>
        <trans-unit id="1ccfed984f77c3facd3ea386d04c4a3fa1113f93" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt; security context in which this value is safe for use, e.g. &lt;code&gt;$sce.URL&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;../service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;この値は、使用しても安全であるセキュリティコンテキスト、例えば &lt;code&gt;$sce.URL&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fddcb39aa4dd12d545d29507700d006bc1fa117" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../service/%24templaterequest&quot;&gt;&lt;code&gt;$templateRequest&lt;/code&gt;&lt;/a&gt; will set the &lt;code&gt;cache&lt;/code&gt; and the &lt;code&gt;transformResponse&lt;/code&gt; properties of the options if not overridden here.</source>
          <target state="translated">&lt;a href=&quot;../service/%24templaterequest&quot;&gt; &lt;code&gt;$templateRequest&lt;/code&gt; &lt;/a&gt;設定されます &lt;code&gt;cache&lt;/code&gt; と &lt;code&gt;transformResponse&lt;/code&gt; のここでオーバーライドされない場合のオプションのプロパティを。</target>
        </trans-unit>
        <trans-unit id="3b52d2c0db8ddb52d6065d6884d9ec3ff16c1a2d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../type/%24compile.directive.attributes&quot;&gt;Attributes&lt;/a&gt; object - passed as a parameter in the &lt;code&gt;link()&lt;/code&gt; or &lt;code&gt;compile()&lt;/code&gt; functions. It has a variety of uses.</source>
          <target state="translated">&lt;a href=&quot;../type/%24compile.directive.attributes&quot;&gt;属性&lt;/a&gt;オブジェクト-パラメータとして渡された &lt;code&gt;link()&lt;/code&gt; または &lt;code&gt;compile()&lt;/code&gt; 関数。さまざまな用途があります。</target>
        </trans-unit>
        <trans-unit id="1c2882ae56c5aa4de1a459527df88cd51d7a6ebc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../type/select.selectcontroller&quot;&gt;select controller&lt;/a&gt; exposes utility functions that can be used to manipulate the select's behavior.</source>
          <target state="translated">&lt;a href=&quot;../type/select.selectcontroller&quot;&gt;選択コントローラは、&lt;/a&gt;の選択行動を操作するために使用することができるユーティリティ機能を公開します。</target>
        </trans-unit>
        <trans-unit id="a54d6f95f373a13b94118214c60e9abb5b97f0fa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;auto/service/%24provide&quot;&gt;$provide&lt;/a&gt; service has a number of methods for registering components with the &lt;a href=&quot;auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;. Many of these functions are also exposed on &lt;a href=&quot;ng/type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;auto/service/%24provide&quot;&gt;$提供&lt;/a&gt;サービスとコンポーネントを登録するための多くの方法がある&lt;a href=&quot;auto/service/%24injector&quot;&gt;$インジェクタを&lt;/a&gt;。これらの関数の多くは、&lt;a href=&quot;ng/type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; &lt;/a&gt;でも公開されています。</target>
        </trans-unit>
        <trans-unit id="8d8ecbb875bfc81cc1d784ea21af391f75efbeda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;service/%24controller&quot;&gt;$controller service&lt;/a&gt; is used by AngularJS to create new controllers.</source>
          <target state="translated">&lt;a href=&quot;service/%24controller&quot;&gt;$コントローラサービスは、&lt;/a&gt;新しいコントローラを作成するためにAngularJSで使用されています。</target>
        </trans-unit>
        <trans-unit id="c6adbd4ea5d389ae62682a2aaa97a7e0b9ee7f80" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;service/%24provide&quot;&gt;$provide&lt;/a&gt; service has a number of methods for registering components with the &lt;a href=&quot;service/%24injector&quot;&gt;$injector&lt;/a&gt;. Many of these functions are also exposed on &lt;a href=&quot;../ng/type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;service/%24provide&quot;&gt;$提供&lt;/a&gt;サービスとコンポーネントを登録するための多くの方法がある&lt;a href=&quot;service/%24injector&quot;&gt;$インジェクタを&lt;/a&gt;。これらの関数の多くは、&lt;a href=&quot;../ng/type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; &lt;/a&gt;でも公開されています。</target>
        </trans-unit>
        <trans-unit id="a51ae40b8d9116e59242ac1c80711016fb25393e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$animate&lt;/code&gt; service contains a variety of other methods like &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;leave&lt;/code&gt;, &lt;code&gt;animate&lt;/code&gt; and &lt;code&gt;setClass&lt;/code&gt;. To learn more about what's possible be sure to visit the &lt;a href=&quot;ng/service/%24animate&quot;&gt;$animate service API page&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$animate&lt;/code&gt; サービスのような他の様々な方法が含ま &lt;code&gt;enter&lt;/code&gt; 、 &lt;code&gt;leave&lt;/code&gt; 、 &lt;code&gt;animate&lt;/code&gt; や &lt;code&gt;setClass&lt;/code&gt; を。可能なことの詳細については、&lt;a href=&quot;ng/service/%24animate&quot;&gt;$ animateサービスAPIページ&lt;/a&gt;にアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="c0bea680af2ac70347d61de64353e3076449e907" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$animateCss&lt;/code&gt; service is a useful utility to trigger customized CSS-based transitions/keyframes from a JavaScript-based animation or directly from a directive. The purpose of &lt;code&gt;$animateCss&lt;/code&gt; is NOT to side-step how &lt;code&gt;$animate&lt;/code&gt; and ngAnimate work, but the goal is to allow pre-existing animations or directives to create more complex animations that can be purely driven using CSS code.</source>
          <target state="translated">&lt;code&gt;$animateCss&lt;/code&gt; サービスは、JavaScriptベースのアニメーションから、または直接指令からのトリガーにカスタマイズCSSベースのトランジション/キーフレームに便利なユーティリティです。 &lt;code&gt;$animateCss&lt;/code&gt; の目的は$ &lt;code&gt;$animate&lt;/code&gt; とngAnimateの動作を回避することではありませんが、既存のアニメーションまたはディレクティブがCSSコードを使用して純粋に駆動できるより複雑なアニメーションを作成できるようにすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="a03d56b080753b701e1c124e274f1ac0aef66661" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$animateCss&lt;/code&gt; service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that data into &lt;code&gt;$animateCss&lt;/code&gt; directly:</source>
          <target state="translated">&lt;code&gt;$animateCss&lt;/code&gt; 我々はCSSトランジションやキーフレームアニメーションに評価され、供給される余分な性質のすべての種類にフィードすることができますので、サービスは非常に強力です。たとえば、クラスを追加および削除するときに要素の高さをアニメーション化したい場合は、そのデータを &lt;code&gt;$animateCss&lt;/code&gt; 直接提供することで実行できます。</target>
        </trans-unit>
        <trans-unit id="c565a783926b4bfbda231d32dea91b35841ba214" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$delegate&lt;/code&gt; may be either modified or completely replaced. Given a service &lt;code&gt;myService&lt;/code&gt; with a method &lt;code&gt;someFn&lt;/code&gt;, the following could all be viable solutions:</source>
          <target state="translated">&lt;code&gt;$delegate&lt;/code&gt; いずれかの変更または完全に置き換えることができます。 &lt;code&gt;someFn&lt;/code&gt; メソッドを持つサービス &lt;code&gt;myService&lt;/code&gt; が与えられた場合、以下はすべて実行可能なソリューションになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="7fa11b953380784747a398f9fa8e3b039546e90d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$destroy()&lt;/code&gt; is usually used by directives such as &lt;a href=&quot;../directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt; for managing the unrolling of the loop.</source>
          <target state="translated">&lt;code&gt;$destroy()&lt;/code&gt; 通常のようなディレクティブで使用されている&lt;a href=&quot;../directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;ループの展開を管理するため。</target>
        </trans-unit>
        <trans-unit id="e8334db42df3d0d08b39dade993ce0000f4dc06c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$evalAsync&lt;/code&gt; makes no guarantees as to when the &lt;code&gt;expression&lt;/code&gt; will be executed, only that:</source>
          <target state="translated">&lt;code&gt;$evalAsync&lt;/code&gt; ときに保証しません &lt;code&gt;expression&lt;/code&gt; 、唯一のことを実行されます。</target>
        </trans-unit>
        <trans-unit id="6b4e06ea9ef5ed5d40f568dbe2841a85a3b6fe3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$http&lt;/code&gt; service is a core AngularJS service that facilitates communication with the remote HTTP servers via the browser's &lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XMLHttpRequest&lt;/a&gt; object or via &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$http&lt;/code&gt; サービスは、ブラウザのHTTP経由でリモートサーバとの通信を容易にコアAngularJSサービスで&lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;のXMLHttpRequest&lt;/a&gt;オブジェクトまたは経由&lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7211e0b83ff36dcc386a0602ced9ab19495d96ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$http&lt;/code&gt; service is a function which takes a single argument &amp;mdash; a &lt;a href=&quot;%24http#usage.html&quot;&gt;configuration object&lt;/a&gt; &amp;mdash; that is used to generate an HTTP request and returns a &lt;a href=&quot;%24q&quot;&gt;promise&lt;/a&gt; that is resolved (request success) or rejected (request failure) with a &lt;a href=&quot;%24http#%24http-returns.html&quot;&gt;response&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;$http&lt;/code&gt; -サービスは、単一の引数を取る関数である&lt;a href=&quot;%24http#usage.html&quot;&gt;構成オブジェクト&lt;/a&gt; - HTTPリクエストとリターンを生成するために使用される&lt;a href=&quot;%24q&quot;&gt;約束&lt;/a&gt;で解決される（要求成功）または拒否（リクエストの失敗）&lt;a href=&quot;%24http#%24http-returns.html&quot;&gt;応答&lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="dd9167ac243a709e0bca1e4df418f519c2a08ed4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$httpProvider&lt;/code&gt; provider and &lt;code&gt;$http&lt;/code&gt; service expose &lt;code&gt;defaults.transformRequest&lt;/code&gt; and &lt;code&gt;defaults.transformResponse&lt;/code&gt; properties. If a request does not provide its own transformations then these will be applied.</source>
          <target state="translated">&lt;code&gt;$httpProvider&lt;/code&gt; プロバイダと &lt;code&gt;$http&lt;/code&gt; サービスが公開 &lt;code&gt;defaults.transformRequest&lt;/code&gt; と &lt;code&gt;defaults.transformResponse&lt;/code&gt; プロパティを。リクエストが独自の変換を提供しない場合、これらが適用されます。</target>
        </trans-unit>
        <trans-unit id="1bc7ca8fb85381885e5cddb9a6542ad259fdb423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$location&lt;/code&gt; service allows you to change only the URL; it does not allow you to reload the page. When you need to change the URL and reload the page or navigate to a different page, please use a lower level API, &lt;a href=&quot;../api/ng/service/%24window&quot;&gt;$window.location.href&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; サービスは、あなただけのURLを変更することができます。ページをリロードすることはできません。URLを変更してページを再読み込みするか、別のページに移動する必要がある場合は、低レベルのAPI &lt;a href=&quot;../api/ng/service/%24window&quot;&gt;$ window.location.href&lt;/a&gt;を使用してください。</target>
        </trans-unit>
        <trans-unit id="e98eb9ca822cf6facd0f8798305a215baf8cc63e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$location&lt;/code&gt; service can behave differently, depending on the configuration that was provided to it when it was instantiated. The default configuration is suitable for many applications, for others customizing the configuration can enable new features.</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; サービスは、それがインスタンス化されたとき、それに提供された構成に応じて、異なる動作をすることができます。デフォルトの構成は多くのアプリケーションに適しています。他の構成をカスタマイズすると、新しい機能を有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="1273172a4500d8d59c8a6787804ebe07e03ca23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$location&lt;/code&gt; service is not able to function properly if the current URL is outside the URL given as the base href. This can have subtle confusing consequences...</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; 現在のURLはベースのhrefとして与えられたURLの外にある場合、サービスが正常に機能することができません。これは微妙な混乱を招く結果になる可能性があります...</target>
        </trans-unit>
        <trans-unit id="a111a55f88592010648b78ca18b5cbbe04a7fd2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$location&lt;/code&gt; service parses the URL in the browser address bar (based on &lt;a href=&quot;https://developer.mozilla.org/en/window.location&quot;&gt;&lt;code&gt;window.location&lt;/code&gt;&lt;/a&gt;) and makes the URL available to your application. Changes to the URL in the address bar are reflected into the &lt;code&gt;$location&lt;/code&gt; service and changes to &lt;code&gt;$location&lt;/code&gt; are reflected into the browser address bar.</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; サービスは、（に基づいて、ブラウザのアドレスバーにURLを解析し&lt;a href=&quot;https://developer.mozilla.org/en/window.location&quot;&gt; &lt;code&gt;window.location&lt;/code&gt; の&lt;/a&gt;）とアプリケーションへのURLが利用できるようになります。アドレスバーのURLの変更はに反映されている &lt;code&gt;$location&lt;/code&gt; サービスとの変更 &lt;code&gt;$location&lt;/code&gt; 、ブラウザのアドレスバーに反映されます。</target>
        </trans-unit>
        <trans-unit id="f3824a56f15e043a5ac5fc5b11da473e44a6bfcc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$parent&lt;/code&gt; scope hierarchy will look like this:</source>
          <target state="translated">&lt;code&gt;$parent&lt;/code&gt; スコープの階層は次のようになります。</target>
        </trans-unit>
        <trans-unit id="74392e585ce418fdbe387023a7bc76feedbc98eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$render()&lt;/code&gt; method is invoked in the following situations:</source>
          <target state="translated">&lt;code&gt;$render()&lt;/code&gt; メソッドは、以下の状況で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="748473c254c46349d9420cbf71f6c951b161be97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$rollbackViewValue()&lt;/code&gt; method should be called before programmatically changing the model of an input which may have such events pending. This is important in order to make sure that the input field will be updated with the new model value and any pending operations are cancelled.</source>
          <target state="translated">&lt;code&gt;$rollbackViewValue()&lt;/code&gt; メソッドは、プログラム保留中のそのようなイベントを有していてもよい入力のモデルを変更する前に呼び出されるべきです。これは、入力フィールドが新しいモデル値で更新され、保留中の操作がキャンセルされるようにするために重要です。</target>
        </trans-unit>
        <trans-unit id="00575ac4870897520049b0cd931bb9fc73db40f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$route&lt;/code&gt; service is typically used in conjunction with the &lt;a href=&quot;../directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt; directive and the &lt;a href=&quot;%24routeparams&quot;&gt;&lt;code&gt;$routeParams&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$route&lt;/code&gt; サービスは、一般的に関連して使用される&lt;a href=&quot;../directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; の&lt;/a&gt;指令と&lt;a href=&quot;%24routeparams&quot;&gt; &lt;code&gt;$routeParams&lt;/code&gt; &lt;/a&gt;サービス。</target>
        </trans-unit>
        <trans-unit id="fee32557765392ce5aee69704d74ba53c1edb4c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$routeParams&lt;/code&gt; service allows you to retrieve the current set of route parameters.</source>
          <target state="translated">&lt;code&gt;$routeParams&lt;/code&gt; サービスを使用すると、ルート・パラメータの現在のセットを取得することができます。</target>
        </trans-unit>
        <trans-unit id="8781071a65d92453570f44077b23cbc8a7036841" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$sceDelegateProvider&lt;/code&gt; allows one to get/set the whitelists and blacklists used to ensure that the URLs used for sourcing AngularJS templates and other script-running URLs are safe (all places that use the &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; context). See &lt;a href=&quot;%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/a&gt; and &lt;a href=&quot;%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$sceDelegateProvider.resourceUrlBlacklist&lt;/a&gt;,</source>
          <target state="translated">&lt;code&gt;$sceDelegateProvider&lt;/code&gt; 可能にするもので取得する/ AngularJSテンプレートと他のスクリプト実行されているURLを調達するために使用されるURLは、（使用しているすべての場所で安全であることを確認するために使用ホワイトリストとブラックリスト設定 &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; コンテキストを）。&lt;a href=&quot;%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$ sceDelegateProvider.resourceUrlWhitelist&lt;/a&gt;および&lt;a href=&quot;%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$ sceDelegateProvider.resourceUrlBlacklistを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3cb7f040cc4a7a870371a7f21b9d9290406c26e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$sceDelegateProvider&lt;/code&gt; provider allows developers to configure the &lt;a href=&quot;../service/%24scedelegate&quot;&gt;$sceDelegate service&lt;/a&gt;, used as a delegate for &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$sceDelegateProvider&lt;/code&gt; プロバイダは、開発者が設定することができます&lt;a href=&quot;../service/%24scedelegate&quot;&gt;$ sceDelegateサービス&lt;/a&gt;のための代理人として使用する、&lt;a href=&quot;../service/%24sce&quot;&gt;厳格なコンテキストエスケープ（SCE）を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2828ee5c9feb24539f91bb197e1ea8986016182b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$sceDelegateProvider&lt;/code&gt; provider allows developers to configure the &lt;a href=&quot;service/%24scedelegate&quot;&gt;$sceDelegate service&lt;/a&gt;, used as a delegate for &lt;a href=&quot;service/%24sce&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$sceDelegateProvider&lt;/code&gt; プロバイダは、開発者が設定することができます&lt;a href=&quot;service/%24scedelegate&quot;&gt;$ sceDelegateサービス&lt;/a&gt;のための代理人として使用する、&lt;a href=&quot;service/%24sce&quot;&gt;厳格なコンテキストエスケープ（SCE）を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e445a092071434cfc79d2388fc50b3e9f36f160c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$swipe&lt;/code&gt; service is a service that abstracts the messier details of hold-and-drag swipe behavior, to make implementing swipe-related directives more convenient.</source>
          <target state="translated">&lt;code&gt;$swipe&lt;/code&gt; サービスが実装スワイプ関連のディレクティブをより便利にするために、ホールドアンドドラッグスワイプ動作のメシエ詳細を抽象化するサービスです。</target>
        </trans-unit>
        <trans-unit id="f91a72fa68c6440c52aac8a9f497ac80aeed6564" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$swipe&lt;/code&gt; service is an object with a single method: &lt;code&gt;bind&lt;/code&gt;. &lt;code&gt;bind&lt;/code&gt; takes an element which is to be watched for swipes, and an object with four handler functions. See the documentation for &lt;code&gt;bind&lt;/code&gt; below.</source>
          <target state="translated">&lt;code&gt;$swipe&lt;/code&gt; サービスは、単一のメソッドを持つオブジェクトです： &lt;code&gt;bind&lt;/code&gt; 。 &lt;code&gt;bind&lt;/code&gt; は、スワイプを監視する要素と、4つのハンドラー関数を持つオブジェクトを取ります。以下の &lt;code&gt;bind&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b5319952640d19c5acb759330531d620f329eabf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$templateRequest&lt;/code&gt; service runs security checks then downloads the provided template using &lt;code&gt;$http&lt;/code&gt; and, upon success, stores the contents inside of &lt;code&gt;$templateCache&lt;/code&gt;. If the HTTP request fails or the response data of the HTTP request is empty, a &lt;code&gt;$compile&lt;/code&gt; error will be thrown (the exception can be thwarted by setting the 2nd parameter of the function to true). Note that the contents of &lt;code&gt;$templateCache&lt;/code&gt; are trusted, so the call to &lt;code&gt;$sce.getTrustedUrl(tpl)&lt;/code&gt; is omitted when &lt;code&gt;tpl&lt;/code&gt; is of type string and &lt;code&gt;$templateCache&lt;/code&gt; has the matching entry.</source>
          <target state="translated">&lt;code&gt;$templateRequest&lt;/code&gt; サービスを使用して提供されるテンプレートをダウンロードし、セキュリティチェックを実行します &lt;code&gt;$http&lt;/code&gt; して、成功すると、内部の内容を保存する &lt;code&gt;$templateCache&lt;/code&gt; 。 HTTP要求が失敗するか、HTTP要求の応答データが空の場合、 &lt;code&gt;$compile&lt;/code&gt; エラーがスローされます（関数の2番目のパラメーターをtrueに設定することで、例外を阻止できます）。 &lt;code&gt;$templateCache&lt;/code&gt; の内容は信頼できるため、 &lt;code&gt;tpl&lt;/code&gt; が文字列型で、 &lt;code&gt;$templateCache&lt;/code&gt; に一致するエントリがある場合、 &lt;code&gt;$sce.getTrustedUrl(tpl)&lt;/code&gt; 呼び出しは省略されます。</target>
        </trans-unit>
        <trans-unit id="712bd1e1acaf74fe7cbf90ecba87fe6face76244" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$watchCollection()&lt;/code&gt; method only does a shallow comparison, meaning that changing properties deeper than the first level of the object (or only changing the properties of an item in the collection if it's an array) will still not trigger a re-rendering of the model.</source>
          <target state="translated">&lt;code&gt;$watchCollection()&lt;/code&gt; メソッドは、オブジェクトの最初のレベルよりも深いプロパティを変更（または唯一のそれは配列だ場合は、コレクション内の項目のプロパティを変更すると）まだの再レンダリングを誘発しないことを意味し、浅い比較を行いますモデル。</target>
        </trans-unit>
        <trans-unit id="8fa620e1ea873250c0c6536085a6a95fbd5119d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChildController&lt;/code&gt; scope, which inherits the &lt;code&gt;timeOfDay&lt;/code&gt; property but overrides (shadows) the &lt;code&gt;name&lt;/code&gt; property from the previous scope</source>
          <target state="translated">&lt;code&gt;ChildController&lt;/code&gt; の継承スコープ、 &lt;code&gt;timeOfDay&lt;/code&gt; プロパティが、オーバーライド（影） &lt;code&gt;name&lt;/code&gt; 前範囲からプロパティを</target>
        </trans-unit>
        <trans-unit id="232bc31c989247be45c7d4ec698e7a3006c2d43e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GrandChildController&lt;/code&gt; scope, which overrides (shadows) both the &lt;code&gt;timeOfDay&lt;/code&gt; property defined in &lt;code&gt;MainController&lt;/code&gt; and the &lt;code&gt;name&lt;/code&gt; property defined in &lt;code&gt;ChildController&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;GrandChildController&lt;/code&gt; の範囲、オーバーライド（影）の両方 &lt;code&gt;timeOfDay&lt;/code&gt; に定義されたプロパティ &lt;code&gt;MainController&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; で定義されたプロパティ &lt;code&gt;ChildController&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1fce0d1067b76b0bfc8b85d495db07116c8dec3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MainController&lt;/code&gt; scope, which contains &lt;code&gt;timeOfDay&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; properties</source>
          <target state="translated">&lt;code&gt;MainController&lt;/code&gt; 含まれているスコープ、 &lt;code&gt;timeOfDay&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; プロパティを</target>
        </trans-unit>
        <trans-unit id="b82674350733edf566c9e2b672ef64af568aedc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;angular.module&lt;/code&gt; is a global place for creating, registering and retrieving AngularJS modules. All modules (AngularJS core or 3rd party) that should be available to an application must be registered using this mechanism.</source>
          <target state="translated">&lt;code&gt;angular.module&lt;/code&gt; は AngularJSモジュールを作成、登録および取得するための世界的な場所です。アプリケーションで使用できるすべてのモジュール（AngularJSコアまたはサードパーティ）は、このメカニズムを使用して登録する必要があります。</target>
        </trans-unit>
        <trans-unit id="5dd144d30c65ccfb0a381886f3f857204784293d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;batchLog&lt;/code&gt; service depends on the built-in &lt;a href=&quot;../api/ng/service/%24interval&quot;&gt;&lt;code&gt;$interval&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/service/%24log&quot;&gt;&lt;code&gt;$log&lt;/code&gt;&lt;/a&gt; services.</source>
          <target state="translated">&lt;code&gt;batchLog&lt;/code&gt; のサービスは、ビルトインに依存&lt;a href=&quot;../api/ng/service/%24interval&quot;&gt; &lt;code&gt;$interval&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../api/ng/service/%24log&quot;&gt; &lt;code&gt;$log&lt;/code&gt; &lt;/a&gt;サービス。</target>
        </trans-unit>
        <trans-unit id="9acc1d82e771c84e56a2cc9cc13cac46b6160703" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function should be of the form &lt;code&gt;function(method, url, data, headers, params)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 関数は、フォームでなければならない &lt;code&gt;function(method, url, data, headers, params)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="893ff87e78144aa5e991cba13601bae634bf2bea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;classNameFilter&lt;/code&gt; approach generally gives a big speed boost compared to other strategies, because the matching is done before other animation disabling strategies are checked. However, that also means it is not possible to override class name matching with the two following strategies. It's of course still possible to enable / disable animations by changing an element's class name at runtime.</source>
          <target state="translated">&lt;code&gt;classNameFilter&lt;/code&gt; の他のアニメーション無効にする戦略がチェックされる前に、マッチングが行われるためのアプローチは、一般的に、他の戦略に比べて大きな速度向上を提供します。ただし、これは、次の2つの方法でクラス名の一致をオーバーライドすることができないことも意味します。もちろん、実行時に要素のクラス名を変更することで、アニメーションを有効/無効にすることも可能です。</target>
        </trans-unit>
        <trans-unit id="e7b52fad4bbb0c12479cdb97dacb16c5cb6f4aa8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;collection&lt;/code&gt; can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray, String, etc).</source>
          <target state="translated">&lt;code&gt;collection&lt;/code&gt; あってもよい配列または配列のようなオブジェクト（例えばのNodeList、jQueryオブジェクト、TypedArray、文字列など）。</target>
        </trans-unit>
        <trans-unit id="b98e8dbeb02a19a783fedcd70d85dd392c902b6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;customFilter&lt;/code&gt; approach generally gives a big speed boost compared to other strategies, because the matching is done before other animation disabling strategies are checked.</source>
          <target state="translated">&lt;code&gt;customFilter&lt;/code&gt; 他のアニメーション無効にする戦略がチェックされる前に、マッチングが行われるためのアプローチは、一般的に、他の戦略に比べて大きな速度向上を提供します。</target>
        </trans-unit>
        <trans-unit id="c80e31bf8e54fc961845669be04ec6fa510022fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disabled&lt;/code&gt; attribute is only valid for certain elements such as &lt;code&gt;button&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;. To properly disable custom element directives such as &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;taco-tab&amp;gt;&lt;/code&gt;, using ngAria with &lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt;ngDisabled&lt;/a&gt; will also add &lt;code&gt;aria-disabled&lt;/code&gt;. This tells assistive technologies when a non-native input is disabled, helping custom controls to be more accessible.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; 属性は、以下のような特定の要素に対してのみ有効で &lt;code&gt;button&lt;/code&gt; 、 &lt;code&gt;input&lt;/code&gt; および &lt;code&gt;textarea&lt;/code&gt; 。 &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; や &lt;code&gt;&amp;lt;taco-tab&amp;gt;&lt;/code&gt; などのカスタム要素ディレクティブを適切に無効にするには、ngAriaと&lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt;ngDisabled&lt;/a&gt;を併用すると &lt;code&gt;aria-disabled&lt;/code&gt; も追加されます。これは、非ネイティブ入力が無効になったときに支援技術に通知し、カスタムコントロールへのアクセスを容易にします。</target>
        </trans-unit>
        <trans-unit id="73a17df2bf22fb6c2ce21c05fcc1b44e34b6fe00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errorMessage.type&lt;/code&gt; expression can be a string value or it can be an array so that multiple errors can be associated with a single error message:</source>
          <target state="translated">&lt;code&gt;errorMessage.type&lt;/code&gt; の発現は、文字列の値であってもよく、またはそれは複数のエラーが単一のエラー・メッセージに関連付けることができるように配列することができます。</target>
        </trans-unit>
        <trans-unit id="3a084d6f8e7f8661441da4af1ad1123d1cab079d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expression&lt;/code&gt; can be a single predicate, or a list of predicates each serving as a tie-breaker for the preceding one. The &lt;code&gt;expression&lt;/code&gt; is evaluated against each item and the output is used for comparing with other items.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; 、単一の述語、又は前述のいずれかのタイブレーカとして述語それぞれのリストとすることができます。 &lt;code&gt;expression&lt;/code&gt; 各項目に対して評価され、出力は、他のアイテムとの比較のために使用されます。</target>
        </trans-unit>
        <trans-unit id="4827e6198b9fbd54046fee18d3735c7ce7869d32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; returned by the filter</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; フィルタによって返されました</target>
        </trans-unit>
        <trans-unit id="b31dfae45c6272a242eb94f18bc49a0cd37a7b29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; is called only when the value from the current &lt;code&gt;watchExpression&lt;/code&gt; and the previous call to &lt;code&gt;watchExpression&lt;/code&gt; are not equal (with the exception of the initial run, see below). Inequality is determined according to reference inequality, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators&quot;&gt;strict comparison&lt;/a&gt; via the &lt;code&gt;!==&lt;/code&gt; Javascript operator, unless &lt;code&gt;objectEquality == true&lt;/code&gt; (see next point)</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 現在の値場合にのみ呼び出され &lt;code&gt;watchExpression&lt;/code&gt; と前回の呼び出し &lt;code&gt;watchExpression&lt;/code&gt; が等しくない（最初のランを除いて、以下を参照のこと）。不等式は、 &lt;code&gt;objectEquality == true&lt;/code&gt; でない限り、参照の不等式、 &lt;code&gt;!==&lt;/code&gt; Javascript演算子による&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators&quot;&gt;厳密な比較&lt;/a&gt;に従って決定されます（次のポイントを参照）</target>
        </trans-unit>
        <trans-unit id="8807537fbb401dd1e629d897344c84de2f17464f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; is called whenever any expression in the &lt;code&gt;watchExpressions&lt;/code&gt; array changes.</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 呼び出されるたびにある任意の式 &lt;code&gt;watchExpressions&lt;/code&gt; の配列が変化します。</target>
        </trans-unit>
        <trans-unit id="0b25c0075e8777fbd279f21bd0bf438be12f4f71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; is called whenever anything within the &lt;code&gt;obj&lt;/code&gt; has changed. Examples include adding, removing, and moving items belonging to an object or array.</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 内の何でもいつでも呼ばれる &lt;code&gt;obj&lt;/code&gt; が変更されました。例には、オブジェクトまたは配列に属するアイテムの追加、削除、および移動が含まれます。</target>
        </trans-unit>
        <trans-unit id="3707cb673ad1f5c4676860cc0d76731209d56e8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locals&lt;/code&gt; will be assigned to the route scope's &lt;code&gt;$resolve&lt;/code&gt; property. You can override the property name, using &lt;code&gt;resolveAs&lt;/code&gt; in the route definition. See &lt;a href=&quot;../provider/%24routeprovider&quot;&gt;$routeProvider&lt;/a&gt; for more info.</source>
          <target state="translated">&lt;code&gt;locals&lt;/code&gt; 、ルートスコープのに割り当てられます &lt;code&gt;$resolve&lt;/code&gt; プロパティ。ルート定義で &lt;code&gt;resolveAs&lt;/code&gt; を使用して、プロパティ名をオーバーライドできます。詳細は&lt;a href=&quot;../provider/%24routeprovider&quot;&gt;$ routeProvider&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2de812b5c2a400526a9f2d7e6d5c07f7a7a6b8b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;myField&lt;/code&gt; field is a required input of type &lt;code&gt;email&lt;/code&gt; with a maximum length of 15 characters.</source>
          <target state="translated">&lt;code&gt;myField&lt;/code&gt; でのフィールドは、タイプの必須入力され &lt;code&gt;email&lt;/code&gt; 15文字の最大長。</target>
        </trans-unit>
        <trans-unit id="df09b75bb835a6f8dbfc3b5c620a1f2831ad4c30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;myPane&lt;/code&gt; directive has a &lt;code&gt;require&lt;/code&gt; option with value &lt;code&gt;^^myTabs&lt;/code&gt;. When a directive uses this option, &lt;code&gt;$compile&lt;/code&gt; will throw an error unless the specified controller is found. The &lt;code&gt;^^&lt;/code&gt; prefix means that this directive searches for the controller on its parents. (A &lt;code&gt;^&lt;/code&gt; prefix would make the directive look for the controller on its own element or its parents; without any prefix, the directive would look on its own element only.)</source>
          <target state="translated">&lt;code&gt;myPane&lt;/code&gt; のディレクティブは、持っている &lt;code&gt;require&lt;/code&gt; 値とオプションを &lt;code&gt;^^myTabs&lt;/code&gt; 。ディレクティブがこのオプションを使用する場合、指定されたコントローラーが見つからない限り、 &lt;code&gt;$compile&lt;/code&gt; はエラーをスローします。 &lt;code&gt;^^&lt;/code&gt; プレフィックス手段その親のコントローラについて、このディレクティブを検索しています。（接頭辞 &lt;code&gt;^&lt;/code&gt; を使用すると、ディレクティブはそれ自体の要素またはその親でコントローラーを検索します。接頭辞がない場合、ディレクティブはそれ自体の要素のみを検索します。）</target>
        </trans-unit>
        <trans-unit id="5f266c73961bf941532ed2e38f387525a710231e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newCollection&lt;/code&gt; object is the newly modified data obtained from the &lt;code&gt;obj&lt;/code&gt; expression</source>
          <target state="translated">&lt;code&gt;newCollection&lt;/code&gt; の対象から得られた新たに修正されたデータである &lt;code&gt;obj&lt;/code&gt; 式</target>
        </trans-unit>
        <trans-unit id="8256d15e8434b47b4f6b90d7e29c8ddf53567463" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newState&lt;/code&gt; and &lt;code&gt;oldState&lt;/code&gt; parameters may be defined only in HTML5 mode and when the browser supports the HTML5 History API.</source>
          <target state="translated">&lt;code&gt;newState&lt;/code&gt; と &lt;code&gt;oldState&lt;/code&gt; パラメータは唯一のHTML5モードで定義することができ、ブラウザがHTML5履歴APIをサポートしている場合。</target>
        </trans-unit>
        <trans-unit id="ff9e70b2fe50b302f4f792c8e818eff77a6b534d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng-controller&lt;/code&gt; directive is used to (implicitly) create a scope for our template, and the scope is augmented (managed) by the &lt;code&gt;SpicyController&lt;/code&gt; Controller.</source>
          <target state="translated">&lt;code&gt;ng-controller&lt;/code&gt; ディレクティブは（暗黙的に）私たちのテンプレートのスコープを作成するために使用され、その範囲はで（管理）強化されて &lt;code&gt;SpicyController&lt;/code&gt; コントローラ。</target>
        </trans-unit>
        <trans-unit id="e032bbd650a410d166e41a9966e6526f7d12c83e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngAnimate&lt;/code&gt; module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via callback hooks. Animations are not enabled by default, however, by including &lt;code&gt;ngAnimate&lt;/code&gt; the animation hooks are enabled for an AngularJS app.</source>
          <target state="translated">&lt;code&gt;ngAnimate&lt;/code&gt; のモジュールは、コールバックフックを介してCSSベースのアニメーション（キーフレーム及び遷移）のサポート、ならびにJavaScriptベースのアニメーションを提供します。アニメーションはデフォルトでは有効になっていませんが、 &lt;code&gt;ngAnimate&lt;/code&gt; を含めると、AngularJSアプリでアニメーションフックが有効になります。</target>
        </trans-unit>
        <trans-unit id="e61f4e26cb454ca0b7dbd192ab2951d7e905b82e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngAria&lt;/code&gt; module provides support for common &lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt;&lt;/a&gt; attributes that convey state or semantic information about the application for users of assistive technologies, such as screen readers.</source>
          <target state="translated">&lt;code&gt;ngAria&lt;/code&gt; のモジュールは、共通のサポートを提供する&lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;&lt;abbr&gt;ARIAの&lt;/abbr&gt;&lt;/a&gt;スクリーンリーダーなどの支援技術のユーザーのためのアプリケーションに関する状態又は意味論的情報を伝える属性。</target>
        </trans-unit>
        <trans-unit id="a6ff906752a266b796309bea388504a040cbe49c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngBind&lt;/code&gt; attribute tells AngularJS to replace the text content of the specified HTML element with the value of a given expression, and to update the text content when the value of that expression changes.</source>
          <target state="translated">&lt;code&gt;ngBind&lt;/code&gt; の属性が与えられた式の値で指定されたHTML要素のテキストの内容を置き換えるために、テキストの内容を更新するために、AngularJSを伝えるときに式の値が変化。</target>
        </trans-unit>
        <trans-unit id="4b045de9b1cc381e1d099c085b650a6eae4bee16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngBindTemplate&lt;/code&gt; directive specifies that the element text content should be replaced with the interpolation of the template in the &lt;code&gt;ngBindTemplate&lt;/code&gt; attribute. Unlike &lt;code&gt;ngBind&lt;/code&gt;, the &lt;code&gt;ngBindTemplate&lt;/code&gt; can contain multiple &lt;code&gt;{{&lt;/code&gt;&lt;code&gt;}}&lt;/code&gt; expressions. This directive is needed since some HTML elements (such as TITLE and OPTION) cannot contain SPAN elements.</source>
          <target state="translated">&lt;code&gt;ngBindTemplate&lt;/code&gt; 要素のテキストコンテンツは、テンプレートの補間に置き換えるべきことを指示指定 &lt;code&gt;ngBindTemplate&lt;/code&gt; の属性。 &lt;code&gt;ngBind&lt;/code&gt; とは異なり、 &lt;code&gt;ngBindTemplate&lt;/code&gt; には複数の &lt;code&gt;{{&lt;/code&gt; &lt;code&gt;}}&lt;/code&gt; 式を含めることができます。一部のHTML要素（TITLEやOPTIONなど）にSPAN要素を含めることができないため、このディレクティブが必要です。</target>
        </trans-unit>
        <trans-unit id="85c4b39c89de8c839e2ae1224d9251c645f48e7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngChange&lt;/code&gt; expression is only evaluated when a change in the input value causes a new value to be committed to the model.</source>
          <target state="translated">&lt;code&gt;ngChange&lt;/code&gt; の入力値の変化がモデルにコミットする新しい値を起こしたときの式にのみ評価されます。</target>
        </trans-unit>
        <trans-unit id="cd2d9be630e6f5ed0b76a70a6f720d3aef6159f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngClass&lt;/code&gt; directive allows you to dynamically set CSS classes on an HTML element by databinding an expression that represents all classes to be added.</source>
          <target state="translated">&lt;code&gt;ngClass&lt;/code&gt; のディレクティブを使用すると、動的に追加されるすべてのクラスを表す式をデータバインディングによって、HTML要素のCSSクラスを設定することができます。</target>
        </trans-unit>
        <trans-unit id="eb143e7bbec7a51e2702ec0c2b659b98c872ffe6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngClassOdd&lt;/code&gt; and &lt;code&gt;ngClassEven&lt;/code&gt; directives work exactly as &lt;a href=&quot;directive/ngclass&quot;&gt;ngClass&lt;/a&gt;, except they work in conjunction with &lt;code&gt;ngRepeat&lt;/code&gt; and take effect only on odd (even) rows.</source>
          <target state="translated">&lt;code&gt;ngClassOdd&lt;/code&gt; と &lt;code&gt;ngClassEven&lt;/code&gt; ディレクティブはまったく同じように動作&lt;a href=&quot;directive/ngclass&quot;&gt;ngClass&lt;/a&gt;彼らはと連携して動作を除いて、 &lt;code&gt;ngRepeat&lt;/code&gt; のみ奇数（偶数）行に有効になります。</target>
        </trans-unit>
        <trans-unit id="2822cc93e2d22ae5e829a8ed84a58be4d8de9b90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngClassOdd&lt;/code&gt; and &lt;code&gt;ngClassEven&lt;/code&gt; directives work exactly as &lt;a href=&quot;ngclass&quot;&gt;ngClass&lt;/a&gt;, except they work in conjunction with &lt;code&gt;ngRepeat&lt;/code&gt; and take effect only on odd (even) rows.</source>
          <target state="translated">&lt;code&gt;ngClassOdd&lt;/code&gt; と &lt;code&gt;ngClassEven&lt;/code&gt; ディレクティブはまったく同じように動作&lt;a href=&quot;ngclass&quot;&gt;ngClass&lt;/a&gt;彼らはと連携して動作を除いて、 &lt;code&gt;ngRepeat&lt;/code&gt; のみ奇数（偶数）行に有効になります。</target>
        </trans-unit>
        <trans-unit id="4c4a87e8244d4148c2c2f2d43d94a91ad7be7087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngCloak&lt;/code&gt; directive is used to prevent the AngularJS html template from being briefly displayed by the browser in its raw (uncompiled) form while your application is loading. Use this directive to avoid the undesirable flicker effect caused by the html template display.</source>
          <target state="translated">&lt;code&gt;ngCloak&lt;/code&gt; のディレクティブは、アプリケーションがロードされている間にその生（コンパイルされていない）形式でブラウザに表示、簡単であることからAngularJS HTMLテンプレートを防ぐために使用されます。このディレクティブを使用して、htmlテンプレートの表示によって引き起こされる望ましくないフリッカー効果を回避します。</target>
        </trans-unit>
        <trans-unit id="b36a150166cdfa6a15928e9e8ef2e9326745f7ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngController&lt;/code&gt; directive attaches a controller class to the view. This is a key aspect of how angular supports the principles behind the Model-View-Controller design pattern.</source>
          <target state="translated">&lt;code&gt;ngController&lt;/code&gt; のディレクティブは、ビューにコントローラクラスを添付する。これは、angularがModel-View-Controller設計パターンの背後にある原則をどのようにサポートするかの重要な側面です。</target>
        </trans-unit>
        <trans-unit id="6bcc648246709c280b3b0364de36047cd3c0b90a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngCookies&lt;/code&gt; module provides a convenient wrapper for reading and writing browser cookies.</source>
          <target state="translated">&lt;code&gt;ngCookies&lt;/code&gt; モジュールは、ブラウザのクッキーを読み書きするための便利なラッパーを提供します。</target>
        </trans-unit>
        <trans-unit id="5a9c86f81072ed3420a40ead53377e5bc6d1bc76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngDblclick&lt;/code&gt; directive allows you to specify custom behavior on a dblclick event.</source>
          <target state="translated">&lt;code&gt;ngDblclick&lt;/code&gt; のディレクティブを使用すると、DBLCLICKイベントにカスタム動作を指定することができます。</target>
        </trans-unit>
        <trans-unit id="eac48f1e893ad5864f090789b466b632767c4206" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngHide&lt;/code&gt; directive shows or hides the given HTML element based on the expression provided to the &lt;code&gt;ngHide&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;ngHide&lt;/code&gt; ディレクティブ表示または非表示に提供される発現に基づいて、指定されたHTML要素 &lt;code&gt;ngHide&lt;/code&gt; の属性。</target>
        </trans-unit>
        <trans-unit id="d381776a806006bc86dcce569e5adc2ebd5f055c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngIf&lt;/code&gt; directive removes or recreates a portion of the DOM tree based on an {expression}. If the expression assigned to &lt;code&gt;ngIf&lt;/code&gt; evaluates to a false value then the element is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.</source>
          <target state="translated">&lt;code&gt;ngIf&lt;/code&gt; 指令削除し又は{式}に基づいて、DOMツリーの部分を再現。 &lt;code&gt;ngIf&lt;/code&gt; に割り当てられた式がfalse値に評価される場合、要素はDOMから削除されます。そうでない場合、要素のクローンがDOMに再挿入されます。</target>
        </trans-unit>
        <trans-unit id="a9d3c704979843b97982c647f1da581d30fd4d27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngInit&lt;/code&gt; directive allows you to evaluate an expression in the current scope.</source>
          <target state="translated">&lt;code&gt;ngInit&lt;/code&gt; のディレクティブを使用すると、現在のスコープ内での発現を評価することができます。</target>
        </trans-unit>
        <trans-unit id="417a61e212c49154942fb721510044da379c7254" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMaxlength&lt;/code&gt; attribute must be an expression, while the &lt;code&gt;maxlength&lt;/code&gt; value must be interpolated.</source>
          <target state="translated">&lt;code&gt;ngMaxlength&lt;/code&gt; の間、属性は、式でなければなりません &lt;code&gt;maxlength&lt;/code&gt; 値を補間する必要があります。</target>
        </trans-unit>
        <trans-unit id="45c4265c4dbb1f2d586ef768e0851c8578c7667b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMessages&lt;/code&gt; directive allows keys in a key/value collection to be associated with a child element (or 'message') that will show or hide based on the truthiness of that key's value in the collection. A common use case for &lt;code&gt;ngMessages&lt;/code&gt; is to display error messages for inputs using the &lt;code&gt;$error&lt;/code&gt; object exposed by the &lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; directive.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; のディレクティブは、キー/値のコレクション内のキーは、コレクション内のそのキーの値のtruthinessに基づいて表示または非表示になる子要素（または「メッセージ」）に関連付けることができます。 &lt;code&gt;ngMessages&lt;/code&gt; の一般的な使用例は、&lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt;ディレクティブによって公開された &lt;code&gt;$error&lt;/code&gt; オブジェクトを使用して入力のエラーメッセージを表示することです。</target>
        </trans-unit>
        <trans-unit id="0d18c34180a240483d53674cf68de91b9894484a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMessages&lt;/code&gt; module provides enhanced support for displaying messages within templates (typically within forms or when rendering message objects that return key/value data). Instead of relying on JavaScript code and/or complex ng-if statements within your form template to show and hide error messages specific to the state of an input field, the &lt;code&gt;ngMessages&lt;/code&gt; and &lt;code&gt;ngMessage&lt;/code&gt; directives are designed to handle the complexity, inheritance and priority sequencing based on the order of how the messages are defined in the template.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; モジュールは、（通常はフォーム内またはメッセージをレンダリングすると、そのリターンキー/値データオブジェクトの場合）、テンプレート内のメッセージを表示するための拡張サポートを提供します。JavaScriptコードやフォームテンプレート内の複雑なng-ifステートメントに依存して入力フィールドの状態に固有のエラーメッセージを表示および非表示にする &lt;code&gt;ngMessages&lt;/code&gt; に、ngMessagesおよび &lt;code&gt;ngMessage&lt;/code&gt; ディレクティブは、複雑さ、継承、および優先順位付けに基づいて処理するように設計されていますテンプレートでのメッセージの定義順。</target>
        </trans-unit>
        <trans-unit id="b4f8fedc33954693b5bb572d1d7f500187e5e788" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMinlength&lt;/code&gt; value must be an expression, while the &lt;code&gt;minlength&lt;/code&gt; value must be interpolated.</source>
          <target state="translated">&lt;code&gt;ngMinlength&lt;/code&gt; の間、値は、式でなければなりません &lt;code&gt;minlength&lt;/code&gt; 値を補間する必要があります。</target>
        </trans-unit>
        <trans-unit id="33dab09372104d4a4d45b7aa078905f409929cf1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMock&lt;/code&gt; module provides support to inject and mock AngularJS services into unit tests. In addition, ngMock also extends various core AngularJS services such that they can be inspected and controlled in a synchronous manner within test code.</source>
          <target state="translated">&lt;code&gt;ngMock&lt;/code&gt; のモジュールは、ユニットテストに注入し、モックAngularJSサービスへのサポートを提供します。さらに、ngMockはさまざまなコアAngularJSサービスを拡張し、テストコード内で同期的に検査および制御できるようにします。</target>
        </trans-unit>
        <trans-unit id="a1d1654b9cd04adec1909e895c88e508f9a0a9a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMockE2E&lt;/code&gt; is an AngularJS module which contains mocks suitable for end-to-end testing. Currently there is only one mock present in this module - the &lt;a href=&quot;ngmocke2e/service/%24httpbackend&quot;&gt;e2e $httpBackend&lt;/a&gt; mock.</source>
          <target state="translated">&lt;code&gt;ngMockE2E&lt;/code&gt; は、エンド・ツー・エンドのテストに適したモックを含有AngularJSモジュールです。現在、このモジュールにはモックが1つだけあります&lt;a href=&quot;ngmocke2e/service/%24httpbackend&quot;&gt;-e2e $ httpBackend&lt;/a&gt;モックです。</target>
        </trans-unit>
        <trans-unit id="a03456cf81ef1e81f30d53477f5db6541362dabe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngModel&lt;/code&gt; directive binds an &lt;code&gt;input&lt;/code&gt;,&lt;code&gt;select&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt; (or custom form control) to a property on the scope using &lt;a href=&quot;../type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController&lt;/a&gt;, which is created and exposed by this directive.</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 指令結合 &lt;code&gt;input&lt;/code&gt; 、 &lt;code&gt;select&lt;/code&gt; 、 &lt;code&gt;textarea&lt;/code&gt; （またはカスタムフォームコントロール）を使用してスコープのプロパティに&lt;a href=&quot;../type/ngmodel.ngmodelcontroller&quot;&gt;NgModelControllerを&lt;/a&gt;この指令によって作成され、露出されています、。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
