<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="angularjs">
    <body>
      <group id="angularjs">
        <trans-unit id="78347206801a061c0decedac37c91767431b4537" translate="yes" xml:space="preserve">
          <source>Complex Models (objects or collections)</source>
          <target state="translated">複雑なモデル(オブジェクトまたはコレクション</target>
        </trans-unit>
        <trans-unit id="c92c529e0731c57efd7550480196484040b33c3e" translate="yes" xml:space="preserve">
          <source>Component</source>
          <target state="translated">Component</target>
        </trans-unit>
        <trans-unit id="a85196f04b4052b5f8e757116e9ed52d626cea29" translate="yes" xml:space="preserve">
          <source>Component definition object (a simplified &lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;directive definition object&lt;/a&gt;)</source>
          <target state="translated">コンポーネント定義オブジェクト（簡略化された&lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;ディレクティブ定義オブジェクト&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="52b1bdba92bb54788ab2cdeee061c0e16d336346" translate="yes" xml:space="preserve">
          <source>Component definition object (a simplified &lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;directive definition object&lt;/a&gt;), with the following properties (all optional):</source>
          <target state="translated">コンポーネント定義オブジェクト（簡略化された&lt;a href=&quot;../service/%24compile#directive-definition-object.html&quot;&gt;ディレクティブ定義オブジェクト&lt;/a&gt;）。次のプロパティがあります（すべてオプション）。</target>
        </trans-unit>
        <trans-unit id="77dc9cfc7cb3b52a950028db1a5820bbb36a0ff5" translate="yes" xml:space="preserve">
          <source>Component definitions are very simple and do not require as much configuration as defining general directives. Component definitions usually consist only of a template and a controller backing it.</source>
          <target state="translated">コンポーネントの定義は非常にシンプルで、一般的なディレクティブを定義するほどの設定は必要ありません。コンポーネントの定義は通常、テンプレートとそれを支えるコントローラだけで構成されています。</target>
        </trans-unit>
        <trans-unit id="4fe71f615894962f769e3b09ee4b063dd3104c07" translate="yes" xml:space="preserve">
          <source>Component-based application architecture</source>
          <target state="translated">コンポーネントベースのアプリケーションアーキテクチャ</target>
        </trans-unit>
        <trans-unit id="412108d00dc3d78512b7f514b082a1dc5a2a25c0" translate="yes" xml:space="preserve">
          <source>ComponentInstruction</source>
          <target state="translated">ComponentInstruction</target>
        </trans-unit>
        <trans-unit id="9289473eeedaee09d76c8cf1b6994d8550debf46" translate="yes" xml:space="preserve">
          <source>Components</source>
          <target state="translated">Components</target>
        </trans-unit>
        <trans-unit id="052de9b4663f1da6b0dad6763f0e84f04970f1d5" translate="yes" xml:space="preserve">
          <source>Components are also useful as route templates (e.g. when using &lt;a href=&quot;../api/ngroute&quot;&gt;ngRoute&lt;/a&gt;). In a component-based application, every view is a component:</source>
          <target state="translated">コンポーネントは、ルートテンプレートとしても役立ちます（たとえば、&lt;a href=&quot;../api/ngroute&quot;&gt;ngRoute&lt;/a&gt;を使用する場合）。コンポーネントベースのアプリケーションでは、すべてのビューがコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="8baa065a5cba8d6c52c78a61ff9c9163ba5e3d7e" translate="yes" xml:space="preserve">
          <source>Components as route templates</source>
          <target state="translated">ルートテンプレートとしてのコンポーネント</target>
        </trans-unit>
        <trans-unit id="bf44683e2124b402afd1667eddfc51003f631e51" translate="yes" xml:space="preserve">
          <source>Components can be registered using the &lt;a href=&quot;../api/ng/provider/%24compileprovider#component.html&quot;&gt;&lt;code&gt;.component()&lt;/code&gt;&lt;/a&gt; method of an AngularJS module (returned by &lt;a href=&quot;module&quot;&gt;&lt;code&gt;angular.module()&lt;/code&gt;&lt;/a&gt;). The method takes two arguments:</source>
          <target state="translated">コンポーネントは、AngularJSモジュールの&lt;a href=&quot;../api/ng/provider/%24compileprovider#component.html&quot;&gt; &lt;code&gt;.component()&lt;/code&gt; &lt;/a&gt;メソッドを使用して登録できます（&lt;a href=&quot;module&quot;&gt; &lt;code&gt;angular.module()&lt;/code&gt; &lt;/a&gt;によって返されます）。このメソッドは2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="1ede4134b45566bbb53a326a5ba30ed2337d4b16" translate="yes" xml:space="preserve">
          <source>Components that have their dependencies injected allow them to be easily mocked on a test by test basis, without having to mess with any global variables that could inadvertently affect another test.</source>
          <target state="translated">依存関係が注入されているコンポーネントは、不注意で他のテストに影響を与える可能性のあるグローバル変数をいじらなくても、テストごとに簡単にモックすることができます。</target>
        </trans-unit>
        <trans-unit id="db2bb3f2d36cc8fea7cbf33806f6b7360ab29060" translate="yes" xml:space="preserve">
          <source>Comprehensive Directive API</source>
          <target state="translated">包括的な指令API</target>
        </trans-unit>
        <trans-unit id="c05bafdb56031bb64da1f1d1861f60118932c605" translate="yes" xml:space="preserve">
          <source>Concept</source>
          <target state="translated">Concept</target>
        </trans-unit>
        <trans-unit id="cc8d5c03c91b4ff4e34ca056bb24f3fb67fdffdd" translate="yes" xml:space="preserve">
          <source>Conceptual Overview</source>
          <target state="translated">概念的な概要</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="71c2b150a06049925dc940ff0b7ba9b28de4537b" translate="yes" xml:space="preserve">
          <source>Configure $http service to combine processing of multiple http responses received at around the same time via &lt;a href=&quot;../type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$rootScope.$applyAsync&lt;/a&gt;. This can result in significant performance improvement for bigger applications that make many HTTP requests concurrently (common during application bootstrap).</source>
          <target state="translated">$ httpサービスを構成して、&lt;a href=&quot;../type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ rootScope。$ applyAsyncを&lt;/a&gt;介してほぼ同時に受信した複数のhttp応答の処理を結合します。これにより、多数のHTTPリクエストを同時に実行する大規模なアプリケーションのパフォーマンスが大幅に向上する可能性があります（アプリケーションのブートストラップ中に一般的です）。</target>
        </trans-unit>
        <trans-unit id="7896d76d615866e43aa8573a41f4d68ecbe909a3" translate="yes" xml:space="preserve">
          <source>Configure $parse service to add literal values that will be present as literal at expressions.</source>
          <target state="translated">式の際にリテラルとして存在する値を追加するように$parseサービスを設定します。</target>
        </trans-unit>
        <trans-unit id="401014f049aff69ca01aa4c69560adc72e65a93d" translate="yes" xml:space="preserve">
          <source>Configure several aspects of error handling in AngularJS if used as a setter or return the current configuration if used as a getter. The following options are supported:</source>
          <target state="translated">セッターとして使用した場合はAngularJSのエラー処理のいくつかの側面を設定し、ゲッターとして使用した場合は現在の設定を返します。以下のオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="7ed62ca7d00be1bd9be3f6f28effdd940c0a125d" translate="yes" xml:space="preserve">
          <source>Configures the mock implementation of &lt;a href=&quot;../../ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; to rethrow or to log errors passed to the &lt;code&gt;$exceptionHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;モック実装を構成して、 &lt;code&gt;$exceptionHandler&lt;/code&gt; 渡されたエラーを再スローまたはログに記録します。</target>
        </trans-unit>
        <trans-unit id="fa7b44a578c9b66e6eac734e95b3a649678bb56b" translate="yes" xml:space="preserve">
          <source>Configures the mock implementation of &lt;a href=&quot;../ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; to rethrow or to log errors passed to the &lt;code&gt;$exceptionHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;モック実装を構成して、 &lt;code&gt;$exceptionHandler&lt;/code&gt; 渡されたエラーを再スローまたはログに記録します。</target>
        </trans-unit>
        <trans-unit id="ab33277d4bc70753dadfe4b4b47939a3bafacc65" translate="yes" xml:space="preserve">
          <source>Configures the mock implementation of &lt;a href=&quot;ng/service/%24exceptionhandler&quot;&gt;&lt;code&gt;$exceptionHandler&lt;/code&gt;&lt;/a&gt; to rethrow or to log errors passed to the &lt;code&gt;$exceptionHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;ng/service/%24exceptionhandler&quot;&gt; &lt;code&gt;$exceptionHandler&lt;/code&gt; &lt;/a&gt;モック実装を構成して、 &lt;code&gt;$exceptionHandler&lt;/code&gt; 渡されたエラーを再スローまたはログに記録します。</target>
        </trans-unit>
        <trans-unit id="ef688c3bf06b49c7583d5229b5b135310e872abe" translate="yes" xml:space="preserve">
          <source>Configuring ngPluralize</source>
          <target state="translated">ngPluralize の設定</target>
        </trans-unit>
        <trans-unit id="25493fa5f58d0b23af0328cbcc8d72f1b7096ef8" translate="yes" xml:space="preserve">
          <source>Configuring ngPluralize with offset</source>
          <target state="translated">オフセットで ngPluralize を設定する</target>
        </trans-unit>
        <trans-unit id="614cb97d5550e6a973dc4d4e5e71bacf0e254a0a" translate="yes" xml:space="preserve">
          <source>Connecting to the scope</source>
          <target state="translated">スコープへの接続</target>
        </trans-unit>
        <trans-unit id="bd1ca2146ad14cf9d26b89eef58c53c8846544f1" translate="yes" xml:space="preserve">
          <source>Consider a base href set as follows: &lt;code&gt;&amp;lt;base href=&quot;/base/&quot;&amp;gt;&lt;/code&gt; (i.e. the application exists in the &quot;folder&quot; called &lt;code&gt;/base&lt;/code&gt;). The URL &lt;code&gt;/base&lt;/code&gt; is actually outside the application (it refers to the &lt;code&gt;base&lt;/code&gt; file found in the root &lt;code&gt;/&lt;/code&gt; folder).</source>
          <target state="translated">次のようにbase hrefセットを検討してください： &lt;code&gt;&amp;lt;base href=&quot;/base/&quot;&amp;gt;&lt;/code&gt; （つまり、アプリケーションは &lt;code&gt;/base&lt;/code&gt; という「フォルダー」に存在します）。URL &lt;code&gt;/base&lt;/code&gt; は実際にはアプリケーションの外部にあります（ルート &lt;code&gt;/&lt;/code&gt; フォルダーにある &lt;code&gt;base&lt;/code&gt; ファイルを指します）。</target>
        </trans-unit>
        <trans-unit id="b75dc57f6ba4e3ce850116dfdcb6fffec204312d" translate="yes" xml:space="preserve">
          <source>Consider a text input with an autocomplete list (for fruit), where the items are objects with a name and an id. A user enters &lt;code&gt;ap&lt;/code&gt; and then selects &lt;code&gt;Apricot&lt;/code&gt; from the list. Based on this, the autocomplete widget will call &lt;code&gt;$setViewValue({name: 'Apricot', id: 443})&lt;/code&gt;, but the rendered value will still be &lt;code&gt;ap&lt;/code&gt;. The widget can then call &lt;code&gt;ctrl.$processModelValue()&lt;/code&gt; to run the model -&amp;gt; view pipeline again, which formats the object to the string &lt;code&gt;Apricot&lt;/code&gt;, then updates the &lt;code&gt;$viewValue&lt;/code&gt;, and finally renders it in the DOM.</source>
          <target state="translated">アイテムが名前とIDを持つオブジェクトである、オートコンプリートリスト（フルーツ用）を使用したテキスト入力を考えます。ユーザーは &lt;code&gt;ap&lt;/code&gt; を入力し、リストから &lt;code&gt;Apricot&lt;/code&gt; を選択します。これに基づいて、オートコンプリートウィジェットは &lt;code&gt;$setViewValue({name: 'Apricot', id: 443})&lt;/code&gt; を呼び出しますが、レンダリングされた値は引き続き &lt;code&gt;ap&lt;/code&gt; になります。次に、ウィジェットは &lt;code&gt;ctrl.$processModelValue()&lt;/code&gt; を呼び出してモデルを表示し、パイプラインを再び表示します。これにより、オブジェクトが文字列 &lt;code&gt;Apricot&lt;/code&gt; にフォーマットされ、 &lt;code&gt;$viewValue&lt;/code&gt; 更新され、最後にDOMにレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="a18df99124cdd530d7ee713a96afbde420b4e68f" translate="yes" xml:space="preserve">
          <source>Consider the following example, which illustrates a typical use case of &lt;code&gt;ngMessages&lt;/code&gt;. Within the form &lt;code&gt;myForm&lt;/code&gt; we have a text input named &lt;code&gt;myField&lt;/code&gt; which is bound to the scope variable &lt;code&gt;field&lt;/code&gt; using the &lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; directive.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; の一般的な使用例を示す次の例を検討してください。フォーム &lt;code&gt;myForm&lt;/code&gt; 内に、&lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt;ディレクティブを使用してスコープ変数 &lt;code&gt;field&lt;/code&gt; バインドされる &lt;code&gt;myField&lt;/code&gt; という名前のテキスト入力があります。</target>
        </trans-unit>
        <trans-unit id="067758acc9cf591a779af4e3d644186dd0af02ba" translate="yes" xml:space="preserve">
          <source>Consider this module, which includes a &lt;code&gt;willBreak&lt;/code&gt; service that uses implicit DI:</source>
          <target state="translated">暗黙のDIを使用する &lt;code&gt;willBreak&lt;/code&gt; サービスを含むこのモジュールを考えてみます。</target>
        </trans-unit>
        <trans-unit id="8067f2d7407363afa44d0fb08f79e6b26296396e" translate="yes" xml:space="preserve">
          <source>Consider using &lt;a href=&quot;../api/ng/directive/ngcsp&quot;&gt;CSP&lt;/a&gt; (but don't rely only on CSP)</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngcsp&quot;&gt;CSPの&lt;/a&gt;使用を検討してください（ただし、CSPのみに依存しないでください）</target>
        </trans-unit>
        <trans-unit id="733fd2b4c4e1bca4c7d0e3c2e1c341bcd1d34269" translate="yes" xml:space="preserve">
          <source>Constant</source>
          <target state="translated">Constant</target>
        </trans-unit>
        <trans-unit id="d694aced80a769dd56d5ff19d56f4662c3bdd367" translate="yes" xml:space="preserve">
          <source>Constant Recipe</source>
          <target state="translated">定番レシピ</target>
        </trans-unit>
        <trans-unit id="baf6a951c27a9234a81559df8b9c866456740fa7" translate="yes" xml:space="preserve">
          <source>Constant value.</source>
          <target state="translated">定数値。</target>
        </trans-unit>
        <trans-unit id="b99e72117469b9970f18ba5d75fe3d0de1866186" translate="yes" xml:space="preserve">
          <source>Constant, message, exception or an object representing the rejection reason.</source>
          <target state="translated">定数、メッセージ、例外、または拒絶理由を表すオブジェクト。</target>
        </trans-unit>
        <trans-unit id="64d5e2c2aff5afc784db4e0bcb2cdc6862d0f0f0" translate="yes" xml:space="preserve">
          <source>Construction function for creating new instance of the service.</source>
          <target state="translated">サービスのインスタンスを新規作成するための構築関数です。</target>
        </trans-unit>
        <trans-unit id="e4b290eee7ee9eca877a7e01bf49e3ec181e017e" translate="yes" xml:space="preserve">
          <source>Content Security Policy</source>
          <target state="translated">コンテンツセキュリティポリシー</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="802338f12e55179b2d6cd860935bf05175261d07" translate="yes" xml:space="preserve">
          <source>Context which &lt;code&gt;fn&lt;/code&gt; should be evaluated in.</source>
          <target state="translated">&lt;code&gt;fn&lt;/code&gt; が評価されるコンテキスト。</target>
        </trans-unit>
        <trans-unit id="18b017e5b4b89d6ff684844a26fb098545f160cf" translate="yes" xml:space="preserve">
          <source>Contribute</source>
          <target state="translated">Contribute</target>
        </trans-unit>
        <trans-unit id="4e9871e0a8defabedbf3524a3226fa9d74385b59" translate="yes" xml:space="preserve">
          <source>Contributing to AngularJS</source>
          <target state="translated">AngularJSへの貢献</target>
        </trans-unit>
        <trans-unit id="86cf9b9a051872b3598a096da04f48dd25d0af73" translate="yes" xml:space="preserve">
          <source>Control of the AngularJS templates makes applications vulnerable even if there was a completely secure sandbox:</source>
          <target state="translated">AngularJSのテンプレートを制御すると、完全に安全なサンドボックスがあったとしてもアプリケーションが脆弱になります。</target>
        </trans-unit>
        <trans-unit id="a36a5ffa6e0dcfb64fac1b2b3d6fb176de9689de" translate="yes" xml:space="preserve">
          <source>Controller</source>
          <target state="translated">Controller</target>
        </trans-unit>
        <trans-unit id="99ffd59ebbf0e37afa0e0d929b94eba513e392bc" translate="yes" xml:space="preserve">
          <source>Controller &amp;mdash; The &lt;code&gt;ngController&lt;/code&gt; directive specifies a Controller class; the class contains business logic behind the application to decorate the scope with functions and values</source>
          <target state="translated">Controller &amp;mdash; &lt;code&gt;ngController&lt;/code&gt; ディレクティブはControllerクラスを指定します。クラスには、アプリケーションの背後にビジネスロジックが含まれ、スコープを関数と値で装飾します</target>
        </trans-unit>
        <trans-unit id="ccb3847c75d985adc6744eb79ac9c9cee18abe79" translate="yes" xml:space="preserve">
          <source>Controller constructor fn (optionally decorated with DI annotations in the array notation).</source>
          <target state="translated">コントローラのコンストラクタ fn (オプションで配列表記のDIアノテーションで装飾されます).</target>
        </trans-unit>
        <trans-unit id="c27dec249f237841f7387d65d26a7c0ce88c6c18" translate="yes" xml:space="preserve">
          <source>Controller constructor function.</source>
          <target state="translated">コントローラのコンストラクタ関数です。</target>
        </trans-unit>
        <trans-unit id="9d19a84c7ff095475b0ae33d1170893261391e4f" translate="yes" xml:space="preserve">
          <source>Controller constructor function. The controller is instantiated before the pre-linking phase and can be accessed by other directives (see &lt;code&gt;require&lt;/code&gt; attribute). This allows the directives to communicate with each other and augment each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:</source>
          <target state="translated">コントローラーコンストラクター関数。コントローラは、事前リンクフェーズの前にインスタンス化され、他のディレクティブからアクセスできます（ &lt;code&gt;require&lt;/code&gt; 属性を参照）。これにより、ディレクティブが相互に通信し、相互の動作を強化できます。コントローラは、次のローカルで注入可能（およびブラケット表記をサポート）です。</target>
        </trans-unit>
        <trans-unit id="a9aaeb41d0885b4404238f900eeab9f49522f6e5" translate="yes" xml:space="preserve">
          <source>Controller methods can also take arguments, as demonstrated in the following variation of the previous example.</source>
          <target state="translated">コントローラ・メソッドは引数を取ることもできます。</target>
        </trans-unit>
        <trans-unit id="e71925aefd89c1562fed9afbd32f746da1e7c9c5" translate="yes" xml:space="preserve">
          <source>Controller methods can be created through direct assignment to scope (see the &lt;code&gt;chiliSpicy&lt;/code&gt; method)</source>
          <target state="translated">スコープに直接割り当てることでコントローラーメソッドを作成できます（ &lt;code&gt;chiliSpicy&lt;/code&gt; メソッドを参照）</target>
        </trans-unit>
        <trans-unit id="abab164d91275a7c27f69b9901af5a808932f134" translate="yes" xml:space="preserve">
          <source>Controller name to check.</source>
          <target state="translated">チェックするコントローラー名</target>
        </trans-unit>
        <trans-unit id="d164658172a7f4d47214d163beff14e7b08173e9" translate="yes" xml:space="preserve">
          <source>Controller name, or an object map of controllers where the keys are the names and the values are the constructors.</source>
          <target state="translated">コントローラ名、またはコントローラのオブジェクトマップで、キーが名前、値がコンストラクタとなります。</target>
        </trans-unit>
        <trans-unit id="fd28161568c4e8e181bf8b34d2eb64190067fd07" translate="yes" xml:space="preserve">
          <source>Controllers</source>
          <target state="translated">Controllers</target>
        </trans-unit>
        <trans-unit id="fbc681066b21fc1c3641cf2f3c220b9b2bb08d7e" translate="yes" xml:space="preserve">
          <source>Controllers and Scopes</source>
          <target state="translated">コントローラとスコープ</target>
        </trans-unit>
        <trans-unit id="911140cd3f21770764dea61bf3752956262c1067" translate="yes" xml:space="preserve">
          <source>Controllers are &quot;classes&quot; or &quot;constructor functions&quot; that are responsible for providing the application behavior that supports the declarative markup in the template. The recommended way of declaring Controllers is using the array notation:</source>
          <target state="translated">コントローラは「クラス」または「コンストラクタ関数」であり、テンプレート内の宣言的なマークアップをサポートするアプリケーションの動作を提供する責任があります。推奨されるコントローラの宣言方法は配列表記法を使うことです。</target>
        </trans-unit>
        <trans-unit id="5b5d98f528a42620b2cc0825785014474de8791d" translate="yes" xml:space="preserve">
          <source>Controllers can be attached to the DOM in different ways. For each of them, AngularJS will instantiate a new Controller object, using the specified Controller's &lt;strong&gt;constructor function&lt;/strong&gt;:</source>
          <target state="translated">コントローラは、さまざまな方法でDOMに接続できます。それらのそれぞれについて、AngularJSは、指定されたControllerの&lt;strong&gt;コンストラクター関数&lt;/strong&gt;を使用して、新しいControllerオブジェクトをインスタンス化し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1c6d830a012a42e0e3e98e8d7391642d69b5f9c0" translate="yes" xml:space="preserve">
          <source>Controllers define methods (behavior) that can mutate the model (properties on the scope).</source>
          <target state="translated">コントローラは、モデルを変異させることができるメソッド(動作)を定義します(スコープ上のプロパティ)。</target>
        </trans-unit>
        <trans-unit id="70c782bc574579d2517b6cec8967686212a0d454" translate="yes" xml:space="preserve">
          <source>Controllers may register &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;watches&lt;/a&gt; on the model. These watches execute immediately after the controller behavior executes.</source>
          <target state="translated">コントローラはモデルに&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;ウォッチ&lt;/a&gt;を登録できます。これらの監視は、コントローラーの動作が実行された直後に実行されます。</target>
        </trans-unit>
        <trans-unit id="058997bd1ff2c8ff837142c06062cc669ac555e1" translate="yes" xml:space="preserve">
          <source>Controllers use scopes to expose controller methods to templates (see &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt;).</source>
          <target state="translated">コントローラーはスコープを使用して、コントローラーメソッドをテンプレートに公開します（&lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controllerを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="7dd94c9d2ce116f0c4c53ed1b007067b7b712d4c" translate="yes" xml:space="preserve">
          <source>Controls (&lt;code&gt;input&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;) are ways for a user to enter data. A Form is a collection of controls for the purpose of grouping related controls together.</source>
          <target state="translated">コントロール（ &lt;code&gt;input&lt;/code&gt; 、 &lt;code&gt;select&lt;/code&gt; 、 &lt;code&gt;textarea&lt;/code&gt; ）は、ユーザーがデータを入力する方法です。フォームは、関連するコントロールをグループ化するためのコントロールのコレクションです。</target>
        </trans-unit>
        <trans-unit id="e170fcf2efd35c14b97e47909e1264edfdda6632" translate="yes" xml:space="preserve">
          <source>Convert the &lt;code&gt;:&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, or &lt;code&gt;_&lt;/code&gt;-delimited name to &lt;code&gt;camelCase&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、または &lt;code&gt;_&lt;/code&gt; で区切られた名前を &lt;code&gt;camelCase&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="933184608bdac4f3c6c004f83098137beaa3d86f" translate="yes" xml:space="preserve">
          <source>Converts AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; into a function.</source>
          <target state="translated">AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;を関数に変換します。</target>
        </trans-unit>
        <trans-unit id="2eea8ad796d2916c4ebaeca90af5bde7b4d8a77a" translate="yes" xml:space="preserve">
          <source>Converts AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; into a function. This is like &lt;a href=&quot;%24parse&quot;&gt;$parse&lt;/a&gt; and is identical when the expression is a literal constant. Otherwise, it wraps the expression in a call to &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$sce.getTrusted(&lt;em&gt;type&lt;/em&gt;, &lt;em&gt;result&lt;/em&gt;)&lt;/a&gt;</source>
          <target state="translated">AngularJS &lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;を関数に変換します。これは&lt;a href=&quot;%24parse&quot;&gt;$ parseに&lt;/a&gt;似ており、式がリテラル定数の場合と同じです。それ以外の場合は、式を&lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$ sce.getTrusted（&lt;/a&gt;&lt;em&gt;type&lt;/em&gt;、&lt;em&gt;result&lt;/em&gt;）の呼び出しにラップします&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f52436d3294322d69775a94b63db34d958c64e34" translate="yes" xml:space="preserve">
          <source>Converts AngularJS &lt;a href=&quot;../../guide/expression&quot;&gt;expression&lt;/a&gt; into a function.</source>
          <target state="translated">AngularJS &lt;a href=&quot;../../guide/expression&quot;&gt;式&lt;/a&gt;を関数に変換します。</target>
        </trans-unit>
        <trans-unit id="241b70e1e8de1ff6cda970c4d284ff5a349664ae" translate="yes" xml:space="preserve">
          <source>Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with &lt;code&gt;x-&lt;/code&gt; or &lt;code&gt;data-&lt;/code&gt;) to its normalized, camelCase form.</source>
          <target state="translated">属性名（たとえば、ダッシュ/コロン/アンダースコアで区切られた文字列、オプションで接頭辞 &lt;code&gt;x-&lt;/code&gt; または &lt;code&gt;data-&lt;/code&gt; が付いている）を、正規化されたキャメルケース形式に変換します。</target>
        </trans-unit>
        <trans-unit id="0849392d519f4aa3fac0a65873ae6d050016e1fe" translate="yes" xml:space="preserve">
          <source>Converts string to lowercase.</source>
          <target state="translated">文字列を小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="b79ed60a960e0da09dfacee4601fd97afa217eb9" translate="yes" xml:space="preserve">
          <source>Converts string to uppercase.</source>
          <target state="translated">文字列を大文字に変換します。</target>
        </trans-unit>
        <trans-unit id="c872753511d558c4ce512746cf585786dd025a3c" translate="yes" xml:space="preserve">
          <source>Core Concepts</source>
          <target state="translated">コアコンセプト</target>
        </trans-unit>
        <trans-unit id="2e84aab6976a7309d079e90c2b70df72a431d11c" translate="yes" xml:space="preserve">
          <source>Counts all the direct and indirect child scopes of the current scope.</source>
          <target state="translated">現在のスコープの直接および間接的な子スコープをすべて数えます。</target>
        </trans-unit>
        <trans-unit id="443961121af9afe27d68ec052ba843a27eaf31a0" translate="yes" xml:space="preserve">
          <source>Counts all the watchers of direct and indirect child scopes of the current scope.</source>
          <target state="translated">現在のスコープの直接・間接子スコープのウォッチャーをすべてカウントします。</target>
        </trans-unit>
        <trans-unit id="a16536d78dc34897436003938234d72482a1d526" translate="yes" xml:space="preserve">
          <source>Courses</source>
          <target state="translated">Courses</target>
        </trans-unit>
        <trans-unit id="389e36945902ac4da978f24ea80f3d5bbd64c891" translate="yes" xml:space="preserve">
          <source>Crawling your app</source>
          <target state="translated">あなたのアプリをクロール</target>
        </trans-unit>
        <trans-unit id="45608ebdcb44d27d42f32d60acd39e85de71b39c" translate="yes" xml:space="preserve">
          <source>Create a new injector that can provide components defined in our &lt;code&gt;myModule&lt;/code&gt; module and request our &lt;code&gt;greeter&lt;/code&gt; service from the injector. (This is usually done automatically by AngularJS bootstrap).</source>
          <target state="translated">私たちの中で定義されたコンポーネントを提供することができ、新たなインジェクター作成 &lt;code&gt;myModule&lt;/code&gt; モジュールを、私たちの要求 &lt;code&gt;greeter&lt;/code&gt; インジェクタからのサービスを。（これは通常、AngularJSブートストラップによって自動的に行われます）。</target>
        </trans-unit>
        <trans-unit id="971013bc0a9711b010a8dd9b707cb3697b7f4d5f" translate="yes" xml:space="preserve">
          <source>Create a new instance of JS type. The method takes a constructor function, invokes the new operator, and supplies all of the arguments to the constructor function as specified by the constructor annotation.</source>
          <target state="translated">JS 型の新しいインスタンスを作成します。このメソッドはコンストラクタ関数を受け取り、new 演算子を呼び出し、コンストラクタ注釈で指定されたコンストラクタ関数へのすべての引数を供給します。</target>
        </trans-unit>
        <trans-unit id="9cc6657b1652167630bc2a55c743f36c28dcc171" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;Deferred&lt;/code&gt; object which represents a task which will finish in the future.</source>
          <target state="translated">将来終了するタスクを表す &lt;code&gt;Deferred&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="d11bba0687af96cbd2d8bb53eeba0343f2e22377" translate="yes" xml:space="preserve">
          <source>Creates a deep copy of &lt;code&gt;source&lt;/code&gt;, which should be an object or an array. This functions is used internally, mostly in the change-detection code. It is not intended as an all-purpose copy function, and has several limitations (see below).</source>
          <target state="translated">オブジェクトまたは配列である &lt;code&gt;source&lt;/code&gt; のディープコピーを作成します。この関数は、主に変更検出コードで内部的に使用されます。これは、多目的コピー機能を意図したものではなく、いくつかの制限があります（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="afa1484b840a9ffabd1ceb69c929659784229740" translate="yes" xml:space="preserve">
          <source>Creates a new array or string containing only a specified number of elements. The elements are taken from either the beginning or the end of the source array, string or number, as specified by the value and sign (positive or negative) of &lt;code&gt;limit&lt;/code&gt;. Other array-like objects are also supported (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input, it is converted to a string.</source>
          <target state="translated">指定された数の要素のみを含む新しい配列または文字列を作成します。要素は、 &lt;code&gt;limit&lt;/code&gt; の値と符号（正または負）で指定されたソース配列、文字列、または数値の最初または最後から取得されます。その他の配列のようなオブジェクトもサポートされています（例：配列サブクラス、NodeLists、jqLit​​e / jQueryコレクションなど）。数値を入力として使用すると、文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="be3c2e6c2da6bbf270113921436fdebc0aadccf9" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for DELETE requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">DELETEリクエストの新しいバックエンド定義を作成します。詳細は &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e535501af031225c35fb51be3e57cd8b30dbbd81" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for GET requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">GETリクエストの新しいバックエンド定義を作成します。詳細は &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="356cc2f1fc79ace6115ff3114750774f5192302f" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for HEAD requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">HEADリクエストの新しいバックエンド定義を作成します。詳細は &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="049cbbc849e59668c71cc30e7a114207708c87cf" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for JSONP requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">JSONPリクエストの新しいバックエンド定義を作成します。詳細は &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="6a1e3e71e874615b87146e6893453eeadfaf6659" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for PATCH requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">PATCHリクエストの新しいバックエンド定義を作成します。詳細は &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="eda4d8b9cd6e902637dd9ad1e48fec7c8bb7cd5c" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for POST requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">POSTリクエストの新しいバックエンド定義を作成します。詳細は &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="25a82e38306940d53cc0431c2027b19ad9784508" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition for PUT requests. For more info see &lt;code&gt;when()&lt;/code&gt;.</source>
          <target state="translated">PUTリクエストの新しいバックエンド定義を作成します。詳細は &lt;code&gt;when()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="15f03f22d3c9680dc729ef2ccf8e1606ba4e48fa" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition that compares only with the requested route.</source>
          <target state="translated">要求されたルートとのみ比較する新しいバックエンド定義を作成します。</target>
        </trans-unit>
        <trans-unit id="f48cdf8dae7db1d48c0c6ef4dea9caf8360e67d3" translate="yes" xml:space="preserve">
          <source>Creates a new backend definition.</source>
          <target state="translated">新しいバックエンド定義を作成します。</target>
        </trans-unit>
        <trans-unit id="e4122c824ad9684d95a45783de97719b5e6982d9" translate="yes" xml:space="preserve">
          <source>Creates a new child &lt;a href=&quot;%24rootscope.scope&quot;&gt;scope&lt;/a&gt;.</source>
          <target state="translated">新しい子&lt;a href=&quot;%24rootscope.scope&quot;&gt;スコープを&lt;/a&gt;作成します。</target>
        </trans-unit>
        <trans-unit id="de053e738e592f1089fb9a006cc3b78b9a9bb916" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for DELETE requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">DELETE要求に対する新しい要求の期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e36dcfb22e2a05490dc118fb61c929695cfc0cd2" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for GET requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">GETリクエストに対する新しいリクエストの期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="caa7758c7686ac3d104ccfccb9c7de838c640b7d" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for HEAD requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">HEADリクエストの新しいリクエスト期待値を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="dbdab2ed8f022128732b490b699f2be275275bdd" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for JSONP requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">JSONPリクエストに対する新しいリクエストの期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9a3d06136b6563a9d9eca8d2c71cc5612b1d724c" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for PATCH requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">PATCHリクエストに対する新しいリクエストの期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ee017574d4a1cc6b2b83a364ba45ecf9253c34cd" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for POST requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">POSTリクエストに対する新しいリクエストの期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="5406609dce34fb161e5e19a023b5cd524a033c97" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation for PUT requests. For more info see &lt;code&gt;expect()&lt;/code&gt;.</source>
          <target state="translated">PUTリクエストに対する新しいリクエストの期待を作成します。詳細については、 &lt;code&gt;expect()&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="0be9180abbbad424813f1fc95de7b10c2c836e34" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation that compares only with the requested route.</source>
          <target state="translated">要求されたルートとのみ比較する新しいリクエスト期待値を作成します。</target>
        </trans-unit>
        <trans-unit id="a30b5b3ceb57067554cf2b1480796fa683e821bd" translate="yes" xml:space="preserve">
          <source>Creates a new request expectation.</source>
          <target state="translated">新しいリクエスト期待値を作成します。</target>
        </trans-unit>
        <trans-unit id="b87ac50e12a922afd057ef55f3f8b4babfd88906" translate="yes" xml:space="preserve">
          <source>Creates a promise that is resolved as rejected with the specified &lt;code&gt;reason&lt;/code&gt;. This api should be used to forward rejection in a chain of promises. If you are dealing with the last promise in a promise chain, you don't need to worry about it.</source>
          <target state="translated">指定された &lt;code&gt;reason&lt;/code&gt; 拒否されたものとして解決されるpromiseを作成します。このAPIは、一連の約束の中で拒否を転送するために使用する必要があります。プロミスチェーンの最後のプロミスを処理する場合は、心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="2d3b67b5019f3d6a71328d9460125c9c206f73df" translate="yes" xml:space="preserve">
          <source>Creates an injector object that can be used for retrieving services as well as for dependency injection (see &lt;a href=&quot;../../../guide/di&quot;&gt;dependency injection&lt;/a&gt;).</source>
          <target state="translated">サービスの取得と依存関係の注入に使用できるインジェクターオブジェクトを作成します（&lt;a href=&quot;../../../guide/di&quot;&gt;依存関係の注入を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="7356a349c1f5567bb5bd540f22f1fb39ae0a858c" translate="yes" xml:space="preserve">
          <source>Creates an injector object that can be used for retrieving services as well as for dependency injection (see &lt;a href=&quot;../../guide/di&quot;&gt;dependency injection&lt;/a&gt;).</source>
          <target state="translated">サービスの取得と依存関係の注入に使用できるインジェクターオブジェクトを作成します（&lt;a href=&quot;../../guide/di&quot;&gt;依存関係の注入を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8695fdeaecdde9d69786b268e43f9db9c6275ac8" translate="yes" xml:space="preserve">
          <source>Creates and configures &lt;a href=&quot;../service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;../service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;インスタンスを作成して構成します。</target>
        </trans-unit>
        <trans-unit id="02881b14df84f6433db6e90021eea6be086eb518" translate="yes" xml:space="preserve">
          <source>Creates and configures &lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;インスタンスを作成して構成します。</target>
        </trans-unit>
        <trans-unit id="7b5cfadde58f93508e998389a777198ca3f108c0" translate="yes" xml:space="preserve">
          <source>Creates and configures &lt;a href=&quot;service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;インスタンスを作成して構成します。</target>
        </trans-unit>
        <trans-unit id="edbda21e00ea49fe435ceaf70927ac4e177701c4" translate="yes" xml:space="preserve">
          <source>Creates and wires objects and functions</source>
          <target state="translated">オブジェクトと機能の作成と配線</target>
        </trans-unit>
        <trans-unit id="ffcaf8830fe68d1b1f68ba57b8709c9d5b6199de" translate="yes" xml:space="preserve">
          <source>Creating Directives</source>
          <target state="translated">ディレクティブの作成</target>
        </trans-unit>
        <trans-unit id="a700dae1bd51c2c95667196a1753a5f50b43b0b7" translate="yes" xml:space="preserve">
          <source>Creating Directives that Communicate</source>
          <target state="translated">伝える指示書の作成</target>
        </trans-unit>
        <trans-unit id="8fbe66dd12a5b3a3552d7672f77f9a38a3123301" translate="yes" xml:space="preserve">
          <source>Creating Services</source>
          <target state="translated">サービスの作成</target>
        </trans-unit>
        <trans-unit id="c10c8a9d5669bca0e2013728d5dfd0cb881a0713" translate="yes" xml:space="preserve">
          <source>Creating a Directive that Adds Event Listeners</source>
          <target state="translated">イベントリスナーを追加するディレクティブの作成</target>
        </trans-unit>
        <trans-unit id="f13dcfd72af44ef370551b4c95c6f4d5f8e82c46" translate="yes" xml:space="preserve">
          <source>Creating a Directive that Manipulates the DOM</source>
          <target state="translated">DOM を操作するディレクティブの作成</target>
        </trans-unit>
        <trans-unit id="4908e625ec5c3fbe3253cd44e110565c0a03e356" translate="yes" xml:space="preserve">
          <source>Creating a Directive that Wraps Other Elements</source>
          <target state="translated">他の要素をラップするディレクティブを作成する</target>
        </trans-unit>
        <trans-unit id="00480fa3f76205fbcff45fe1d9ab6fe1895c433a" translate="yes" xml:space="preserve">
          <source>Creating aliases for these properties is possible with &lt;a href=&quot;nginit&quot;&gt;&lt;code&gt;ngInit&lt;/code&gt;&lt;/a&gt;. This may be useful when, for instance, nesting ngRepeats.</source>
          <target state="translated">これらのプロパティのエイリアスを作成するには、&lt;a href=&quot;nginit&quot;&gt; &lt;code&gt;ngInit&lt;/code&gt; を使用し&lt;/a&gt;ます。これは、たとえば、ngRepeatをネストする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="4273e44c3ccf98604f4bbe4a2ea0575d5e6e7b94" translate="yes" xml:space="preserve">
          <source>Creating and configuring a Component</source>
          <target state="translated">コンポーネントの作成と設定</target>
        </trans-unit>
        <trans-unit id="d2c811c7456325eb8da1fc874215e55532d587bd" translate="yes" xml:space="preserve">
          <source>Creating custom actions</source>
          <target state="translated">カスタムアクションの作成</target>
        </trans-unit>
        <trans-unit id="b9844587b0d135a1f842558883719b722f871819" translate="yes" xml:space="preserve">
          <source>Creating custom filters</source>
          <target state="translated">カスタムフィルタの作成</target>
        </trans-unit>
        <trans-unit id="b5746d62259c2e464d484d43c4e1554d32d064d9" translate="yes" xml:space="preserve">
          <source>Creating local properties on widget scope creates two problems:</source>
          <target state="translated">ウィジェットスコープにローカルプロパティを作成すると、2つの問題が発生します。</target>
        </trans-unit>
        <trans-unit id="e2a4b56bb483692f538a3505e58481eb966e8ce9" translate="yes" xml:space="preserve">
          <source>Creation versus Retrieval</source>
          <target state="translated">作成と検索</target>
        </trans-unit>
        <trans-unit id="5af074006d430540128f3bf6a44cb8c6f303320b" translate="yes" xml:space="preserve">
          <source>Cross Site Request Forgery (XSRF) Protection</source>
          <target state="translated">クロスサイトリクエストフォージェリ(XSRF)の保護</target>
        </trans-unit>
        <trans-unit id="c8673739ea7c8a0f8b25ce9b61f288f6a98b1451" translate="yes" xml:space="preserve">
          <source>Cross Site Request Forgery (XSRF/CSRF)</source>
          <target state="translated">クロスサイトリクエストフォージェリ(XSRFCSRF</target>
        </trans-unit>
        <trans-unit id="7fef8120d67245c18d2d3c23d1ec55c168fe972d" translate="yes" xml:space="preserve">
          <source>Currency symbol</source>
          <target state="translated">通貨記号</target>
        </trans-unit>
        <trans-unit id="3dd4bbd8be3d3584f64ec9d144ad17acc82acc08" translate="yes" xml:space="preserve">
          <source>Currency symbol or identifier to be displayed.</source>
          <target state="translated">表示される通貨記号または識別子。</target>
        </trans-unit>
        <trans-unit id="8fc66fe26d9d8793cd1000496300cf9f2f548b32" translate="yes" xml:space="preserve">
          <source>Current RegExp if called without value or self for chaining otherwise.</source>
          <target state="translated">値なしで呼び出された場合は現在のRegExp、そうでない場合はチェーン化のためにselfを使用します。</target>
        </trans-unit>
        <trans-unit id="f226ae8b1558106c8adc6746637c3dbe2b31d834" translate="yes" xml:space="preserve">
          <source>Current route information.</source>
          <target state="translated">現在のルート情報。</target>
        </trans-unit>
        <trans-unit id="1c94bf3985b8bccc15be49b6d0743db478a47075" translate="yes" xml:space="preserve">
          <source>Current value when called without a new value or self for chaining otherwise.</source>
          <target state="translated">新しい値なしで呼び出されたときの現在の値、またはそれ以外の場合はチェーン化のためのself。</target>
        </trans-unit>
        <trans-unit id="6334d13a652b9fde3f48f69b6ce9c655418ee599" translate="yes" xml:space="preserve">
          <source>Current/previous route information.</source>
          <target state="translated">現在の前のルート情報です。</target>
        </trans-unit>
        <trans-unit id="0c6c0c1904e8345998b07d175a1de44245761ead" translate="yes" xml:space="preserve">
          <source>Currently, ngAria interfaces with the following directives:</source>
          <target state="translated">現在のところ、ngAriaは以下のディレクティブとのインターフェースを持っています。</target>
        </trans-unit>
        <trans-unit id="4edef8165e277d94077897e6b7f0af7494905313" translate="yes" xml:space="preserve">
          <source>Currently, the &lt;strong&gt;Component Router&lt;/strong&gt; module must be installed via &lt;code&gt;npm&lt;/code&gt;/&lt;code&gt;yarn&lt;/code&gt;, it is not available on Bower or the Google CDN.</source>
          <target state="translated">現在、&lt;strong&gt;コンポーネントルーター&lt;/strong&gt;モジュールは &lt;code&gt;npm&lt;/code&gt; / &lt;code&gt;yarn&lt;/code&gt; を介してインストールする必要があります。BowerまたはGoogle CDNでは使用できません。</target>
        </trans-unit>
        <trans-unit id="11e09346e5e227c0f25baf70a4c23438004527d4" translate="yes" xml:space="preserve">
          <source>Currently, the ngMessages module only contains the code for the &lt;code&gt;ngMessages&lt;/code&gt;, &lt;code&gt;ngMessagesInclude&lt;/code&gt;&lt;code&gt;ngMessage&lt;/code&gt;, &lt;code&gt;ngMessageExp&lt;/code&gt; and &lt;code&gt;ngMessageDefault&lt;/code&gt; directives.</source>
          <target state="translated">現在、ngMessagesモジュールには、 &lt;code&gt;ngMessages&lt;/code&gt; 、 &lt;code&gt;ngMessagesInclude&lt;/code&gt; &lt;code&gt;ngMessage&lt;/code&gt; 、 &lt;code&gt;ngMessageExp&lt;/code&gt; および &lt;code&gt;ngMessageDefault&lt;/code&gt; ディレクティブのコードのみが含まれています。</target>
        </trans-unit>
        <trans-unit id="74d5d1b5bbf2644cec8eb6da6dea035b822c7813" translate="yes" xml:space="preserve">
          <source>Custom Validation</source>
          <target state="translated">カスタムバリデーション</target>
        </trans-unit>
        <trans-unit id="9b15bde65e9d230027d2d89ae778a8a3108d5df6" translate="yes" xml:space="preserve">
          <source>Custom error message displayed after the user interacted with a control (i.e. when &lt;code&gt;$touched&lt;/code&gt; is set)</source>
          <target state="translated">ユーザーがコントロールを操作した後に表示されるカスタムエラーメッセージ（つまり、 &lt;code&gt;$touched&lt;/code&gt; が設定されている場合）</target>
        </trans-unit>
        <trans-unit id="b78660829b757d40d1cf02c5a67f5153479dc66e" translate="yes" xml:space="preserve">
          <source>Custom error message displayed upon submitting the form (&lt;code&gt;$submitted&lt;/code&gt; is set), even if the user didn't interact with a control</source>
          <target state="translated">ユーザーがコントロールを操作しなかった場合でも、フォームの送信時に表示されるカスタムエラーメッセージ（ &lt;code&gt;$submitted&lt;/code&gt; が設定されています）</target>
        </trans-unit>
        <trans-unit id="d33be98b55db6c87b9f4e29aaa56cfc52eb74725" translate="yes" xml:space="preserve">
          <source>Custom model update triggers</source>
          <target state="translated">カスタムモデルの更新トリガー</target>
        </trans-unit>
        <trans-unit id="7a16736ffe7d57250d06a87b758621a6d4a77ba3" translate="yes" xml:space="preserve">
          <source>DOM control structures for repeating, showing and hiding DOM fragments.</source>
          <target state="translated">DOM フラグメントを繰り返し、表示、非表示にするための DOM 制御構造体。</target>
        </trans-unit>
        <trans-unit id="9a03bb780a978fe1bf04b76b90365ca5e1cd807d" translate="yes" xml:space="preserve">
          <source>DOM element which is the root of AngularJS application.</source>
          <target state="translated">AngularJSアプリケーションのルートとなるDOM要素。</target>
        </trans-unit>
        <trans-unit id="854d235e232e068ef083bf90af82bc89c9fe562d" translate="yes" xml:space="preserve">
          <source>Dart</source>
          <target state="translated">Dart</target>
        </trans-unit>
        <trans-unit id="f20dcbd9b08fb9703f8879bef939587ab26fc293" translate="yes" xml:space="preserve">
          <source>Data Binding</source>
          <target state="translated">データバインディング</target>
        </trans-unit>
        <trans-unit id="7865e224a6bf57800137c76704b7833654f7c47d" translate="yes" xml:space="preserve">
          <source>Data Binding in AngularJS Templates</source>
          <target state="translated">AngularJSテンプレートでのデータバインディング</target>
        </trans-unit>
        <trans-unit id="1ab20277bfa22894e79f0856de3b27a40d577c50" translate="yes" xml:space="preserve">
          <source>Data Binding in Classical Template Systems</source>
          <target state="translated">古典的なテンプレートシステムにおけるデータバインディング</target>
        </trans-unit>
        <trans-unit id="ac99f5c112abda52d4e6d7eedc74c9f89d12480b" translate="yes" xml:space="preserve">
          <source>Data Modeling &lt;a href=&quot;https://github.com/js-data/js-data-angular&quot;&gt;JS-Data-Angular&lt;/a&gt;</source>
          <target state="translated">データモデリング&lt;a href=&quot;https://github.com/js-data/js-data-angular&quot;&gt;JS-Data-Angular&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d38cca5da9c7df446a12182ab09218cd420e4017" translate="yes" xml:space="preserve">
          <source>Data binding</source>
          <target state="translated">データバインディング</target>
        </trans-unit>
        <trans-unit id="156ab9c87cd161d279876149b77acd0b58d8fe2b" translate="yes" xml:space="preserve">
          <source>Data binding, as in &lt;code&gt;{{}}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{{}}&lt;/code&gt; のようなデータバインディング。</target>
        </trans-unit>
        <trans-unit id="e6ebec9e3c5afe4e96b7b5d0a2b400ca889458eb" translate="yes" xml:space="preserve">
          <source>Data properties used by the &lt;a href=&quot;../function/angular.element#methods.html&quot;&gt;&lt;code&gt;scope()&lt;/code&gt;/&lt;code&gt;isolateScope()&lt;/code&gt; methods&lt;/a&gt; to return the element's scope.</source>
          <target state="translated">要素のスコープを返すために&lt;a href=&quot;../function/angular.element#methods.html&quot;&gt; &lt;code&gt;scope()&lt;/code&gt; / &lt;code&gt;isolateScope()&lt;/code&gt; メソッドで&lt;/a&gt;使用されるデータプロパティ。</target>
        </trans-unit>
        <trans-unit id="f722ccac00c1317dd3e7eb7f3ac23bac8fb4eb14" translate="yes" xml:space="preserve">
          <source>Data-binding in AngularJS apps is the automatic synchronization of data between the model and view components. The way that AngularJS implements data-binding lets you treat the model as the single-source-of-truth in your application. The view is a projection of the model at all times. When the model changes, the view reflects the change, and vice versa.</source>
          <target state="translated">AngularJSアプリのデータバインディングとは、モデルとビューコンポーネントの間でデータを自動的に同期させることです。AngularJSがデータバインディングを実装する方法では、モデルをアプリケーションの唯一の真実のソースとして扱うことができます。ビューは常にモデルの投影です。モデルが変更されると、ビューはその変更を反映し、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="77a57d575cbd23f1439b67b6fdff07165e77bcc2" translate="yes" xml:space="preserve">
          <source>Date to format either as Date object, milliseconds (string or number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is specified in the string input, the time is considered to be in the local timezone.</source>
          <target state="translated">Date オブジェクト、ミリ秒(文字列または数値)、または様々な ISO 8601 datetime 文字列形式(例:yyyyy-MM-ddTHH:mm:ss.sssZ、およびyyy-MM-ddTHH:mmZ、yyy-MM-dd、yyyMMddTHHmmssZ などの短縮版)のいずれかでフォーマットする Date。文字列入力にタイムゾーンが指定されていない場合、時刻はローカルタイムゾーンにあるとみなされます。</target>
        </trans-unit>
        <trans-unit id="1ebe58a75d08e8dfda58bd2413fc709aa1379c08" translate="yes" xml:space="preserve">
          <source>Debouncing updates</source>
          <target state="translated">デバウンスのアップデート</target>
        </trans-unit>
        <trans-unit id="a2e23b650a15e5c693ca1445133d5ee60d9d20b4" translate="yes" xml:space="preserve">
          <source>Decorators</source>
          <target state="translated">Decorators</target>
        </trans-unit>
        <trans-unit id="5e42ebfd421aa36ad532cb84814016fb095d849b" translate="yes" xml:space="preserve">
          <source>Decorators are a design pattern that is used to separate modification or &lt;em&gt;decoration&lt;/em&gt; of a class without modifying the original source code. In AngularJS, decorators are functions that allow a service, directive or filter to be modified prior to its usage.</source>
          <target state="translated">デコレータは、元のソースコードを変更せずにクラスの変更または&lt;em&gt;装飾&lt;/em&gt;を分離するために使用されるデザインパターンです。AngularJSでは、デコレーターはサービス、ディレクティブ、またはフィルターを使用前に変更できるようにする関数です。</target>
        </trans-unit>
        <trans-unit id="a7868dadf07f1c7850edc7089cb77140b698014a" translate="yes" xml:space="preserve">
          <source>Decorators have different rules for different services. This is because services are registered in different ways. Services are selected by name, however filters and directives are selected by appending &lt;code&gt;&quot;Filter&quot;&lt;/code&gt; or &lt;code&gt;&quot;Directive&quot;&lt;/code&gt; to the end of the name. The &lt;code&gt;$delegate&lt;/code&gt; provided is dictated by the type of service.</source>
          <target state="translated">デコレータには、サービスごとに異なるルールがあります。これは、サービスがさまざまな方法で登録されているためです。サービスは名前で選択されますが、フィルターとディレクティブは、名前の最後に &lt;code&gt;&quot;Filter&quot;&lt;/code&gt; または &lt;code&gt;&quot;Directive&quot;&lt;/code&gt; を追加することで選択されます。 &lt;code&gt;$delegate&lt;/code&gt; 提供は、サービスの種類によって決定されます。</target>
        </trans-unit>
        <trans-unit id="09211fe2da464fdb5a53e646de8838c5aaa9ef4f" translate="yes" xml:space="preserve">
          <source>Deeply extends the destination object &lt;code&gt;dst&lt;/code&gt; by copying own enumerable properties from the &lt;code&gt;src&lt;/code&gt; object(s) to &lt;code&gt;dst&lt;/code&gt;. You can specify multiple &lt;code&gt;src&lt;/code&gt; objects. If you want to preserve original objects, you can do so by passing an empty object as the target: &lt;code&gt;var object = angular.merge({}, object1, object2)&lt;/code&gt;.</source>
          <target state="translated">深く先オブジェクト延び &lt;code&gt;dst&lt;/code&gt; から自分の列挙プロパティをコピーすることによって、 &lt;code&gt;src&lt;/code&gt; にオブジェクト（複数可） &lt;code&gt;dst&lt;/code&gt; 。複数の &lt;code&gt;src&lt;/code&gt; オブジェクトを指定できます。元のオブジェクトを保持したい場合は、空のオブジェクトをターゲットとして渡すことにより、オブジェクトを保存できます： &lt;code&gt;var object = angular.merge({}, object1, object2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48d349eb48cca72baf0fba3472796293caf10dff" translate="yes" xml:space="preserve">
          <source>Default &lt;a href=&quot;%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that converts objects to strings according to the following rules:</source>
          <target state="translated">次のルールに従ってオブジェクトを文字列に変換するデフォルトの&lt;a href=&quot;%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; paramsシリアライザ：</target>
        </trans-unit>
        <trans-unit id="e18582a087571d146a0e46c24129165fcade2bbe" translate="yes" xml:space="preserve">
          <source>Default &lt;a href=&quot;service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; params serializer that converts objects to strings according to the following rules:</source>
          <target state="translated">次のルールに従ってオブジェクトを文字列に変換するデフォルトの&lt;a href=&quot;service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; paramsシリアライザ：</target>
        </trans-unit>
        <trans-unit id="272d05ca374dc5c4d632482aeb433788c4ec30ec" translate="yes" xml:space="preserve">
          <source>Default Transformations</source>
          <target state="translated">デフォルトの変換</target>
        </trans-unit>
        <trans-unit id="e5f063eb61d4592c613ead4c13dd985673caf4ef" translate="yes" xml:space="preserve">
          <source>Default events, extra triggers, and catch-all debounce values</source>
          <target state="translated">デフォルトイベント、追加トリガー、キャッチオールデバウンス値</target>
        </trans-unit>
        <trans-unit id="31d4d566cb937a1de4b2420380b5397c1828e7ea" translate="yes" xml:space="preserve">
          <source>Default implementation of $animate that doesn't perform any animations, instead just synchronously performs DOM updates and resolves the returned runner promise.</source>
          <target state="translated">animate のデフォルトの実装では、アニメーションを実行せず、ただ同期的に DOM の更新を行い、返されたランナープラムを解決します。</target>
        </trans-unit>
        <trans-unit id="2c5bb4ffb680656f0530a451ee96703523ca759b" translate="yes" xml:space="preserve">
          <source>Default values for &lt;code&gt;url&lt;/code&gt; parameters. These can be overridden in &lt;code&gt;actions&lt;/code&gt; methods. If a parameter value is a function, it will be called every time a param value needs to be obtained for a request (unless the param was overridden). The function will be passed the current data value as an argument.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; パラメータのデフォルト値。これらは &lt;code&gt;actions&lt;/code&gt; メソッドでオーバーライドできます。パラメータ値が関数の場合、（paramがオーバーライドされない限り）リクエストに対してparam値を取得する必要があるたびに呼び出されます。関数には、現在のデータ値が引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="317bbd656753a9dd8ea52dce97e89a2822b25653" translate="yes" xml:space="preserve">
          <source>Default:</source>
          <target state="translated">Default:</target>
        </trans-unit>
        <trans-unit id="1edc1c012a2ea4113df21912c28c7ea3c9ec3a61" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;'!'&lt;/code&gt;</source>
          <target state="translated">デフォルト： &lt;code&gt;'!'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f38409cbc5f1ef34d4d1682cfb27697f30ae623" translate="yes" xml:space="preserve">
          <source>Default: true. When used without argument, it returns the current value.</source>
          <target state="translated">デフォルト:true。引数なしで使用された場合、現在の値を返します。</target>
        </trans-unit>
        <trans-unit id="f8652ebd1a1875dc842cac2cb6d36ca46a049174" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="797eed95d0237127f8eda8c263a529ceb7fafcb9" translate="yes" xml:space="preserve">
          <source>Defaults to false. If no value is specified, returns the current configured value.</source>
          <target state="translated">既定値は false です。値を指定しない場合は、現在の設定値を返します。</target>
        </trans-unit>
        <trans-unit id="fcabacc99098c666fe2451c159c66618bff14d10" translate="yes" xml:space="preserve">
          <source>Deferred Bootstrap</source>
          <target state="translated">繰延ブートストラップ</target>
        </trans-unit>
        <trans-unit id="74c52f18a0d6437fe8a1f390cd629d4d1f6fb607" translate="yes" xml:space="preserve">
          <source>Define an animation on the affected elements.</source>
          <target state="translated">影響を受ける要素にアニメーションを定義します。</target>
        </trans-unit>
        <trans-unit id="0d1872060c4b7a4227a5bb96f09173f2a080f3cf" translate="yes" xml:space="preserve">
          <source>Defines an animation hook that can be later used with &lt;a href=&quot;../service/%24animate&quot;&gt;$animate&lt;/a&gt; service and directives that use this service.</source>
          <target state="translated">&lt;a href=&quot;../service/%24animate&quot;&gt;$ animate&lt;/a&gt;サービスおよびこのサービスを使用するディレクティブで後で使用できるアニメーションフックを定義します。</target>
        </trans-unit>
        <trans-unit id="6cbc7c52232bf21d30296e7e147625b5fda618ff" translate="yes" xml:space="preserve">
          <source>Defines the security context for DOM properties bound by ng-prop-*.</source>
          <target state="translated">ng-prop-*によってバインドされる DOM プロパティのセキュリティコンテキストを定義します。</target>
        </trans-unit>
        <trans-unit id="32989cdf0067cee754e3070b85d64e05afb480b3" translate="yes" xml:space="preserve">
          <source>Delay in milliseconds.</source>
          <target state="translated">ミリ秒単位の遅延。</target>
        </trans-unit>
        <trans-unit id="3302581e2ec4f0f6eeb35f27969f476b33fc5b38" translate="yes" xml:space="preserve">
          <source>Delegates to &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted&lt;/code&gt;&lt;/a&gt;. As such, takes any input, and either returns a value that's safe to use in the specified context, or throws an exception. This function is aware of trusted values created by the &lt;code&gt;trustAs&lt;/code&gt; function and its shorthands, and when contexts are appropriate, returns the unwrapped value as-is. Finally, this function can also throw when there is no way to turn &lt;code&gt;maybeTrusted&lt;/code&gt; in a safe value (e.g., no sanitization is available or possible.)</source>
          <target state="translated">&lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted&lt;/code&gt; &lt;/a&gt;へのデリゲート。そのため、任意の入力を受け取り、指定されたコンテキストで安全に使用できる値を返すか、例外をスローします。この関数は、 &lt;code&gt;trustAs&lt;/code&gt; 関数とその省略形によって作成された信頼できる値を認識し、コンテキストが適切な場合は、ラップされていない値をそのまま返します。最後に、この関数は、 &lt;code&gt;maybeTrusted&lt;/code&gt; を安全な値に変更する方法がない場合にもスローできます（たとえば、サニタイズが利用できないか、可能ではありません）。</target>
        </trans-unit>
        <trans-unit id="f25baa776bc468f235f2d35f9972a7ad7ed42aa2" translate="yes" xml:space="preserve">
          <source>Delegates to &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;. As such, returns a wrapped object that represents your value, and the trust you have in its safety for the given context. AngularJS can then use that value as-is in bindings of the specified secure context. This is used in bindings for &lt;code&gt;ng-bind-html&lt;/code&gt;, &lt;code&gt;ng-include&lt;/code&gt;, and most &lt;code&gt;src&lt;/code&gt; attribute interpolations. See &lt;a href=&quot;%24sce&quot;&gt;$sce&lt;/a&gt; for strict contextual escaping.</source>
          <target state="translated">&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;へのデリゲート。そのため、値を表すラップされたオブジェクトと、指定されたコンテキストに対するその安全性に対する信頼を返します。AngularJSは、指定された安全なコンテキストのバインディングでその値をそのまま使用できます。これは、 &lt;code&gt;ng-bind-html&lt;/code&gt; 、 &lt;code&gt;ng-include&lt;/code&gt; 、およびほとんどの &lt;code&gt;src&lt;/code&gt; 属性補間のバインディングで使用されます。厳密なコンテキストエスケープについては、&lt;a href=&quot;%24sce&quot;&gt;$ sce&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="37499fbdb55b6f4f8b4ca5691cd7ea820e28edff" translate="yes" xml:space="preserve">
          <source>Demonstration of nesting</source>
          <target state="translated">ネスティングのデモンストレーション</target>
        </trans-unit>
        <trans-unit id="0562f32dc56f5c702810cbe010068ddd38dbd69a" translate="yes" xml:space="preserve">
          <source>Dependencies</source>
          <target state="translated">Dependencies</target>
        </trans-unit>
        <trans-unit id="6e0ef472d186db187fa4eb4f242e7f5f04004e20" translate="yes" xml:space="preserve">
          <source>Dependencies and Order of execution</source>
          <target state="translated">依存関係と実行順序</target>
        </trans-unit>
        <trans-unit id="83a3432efddfe802976a8d09a38d176492fb9172" translate="yes" xml:space="preserve">
          <source>Dependency Annotation</source>
          <target state="translated">依存関係のアノテーション</target>
        </trans-unit>
        <trans-unit id="3aefbe2f210572802298b2ad0347dc9e423d2690" translate="yes" xml:space="preserve">
          <source>Dependency Injection</source>
          <target state="translated">依存性注入</target>
        </trans-unit>
        <trans-unit id="bac2d51482e3737a082e50bda9cc403b422810db" translate="yes" xml:space="preserve">
          <source>Dependency Injection (DI) is a software design pattern that deals with how components get hold of their dependencies.</source>
          <target state="translated">依存性インジェクション(DI)は、コンポーネントがその依存性をどのように把握するかを扱うソフトウェア設計パターンです。</target>
        </trans-unit>
        <trans-unit id="6a2482ebf1a4a0d728e1de1670f37f634d9570f4" translate="yes" xml:space="preserve">
          <source>Dependency Injection in AngularJS</source>
          <target state="translated">AngularJSでの依存性インジェクション</target>
        </trans-unit>
        <trans-unit id="4047c105d9cf170d730f33a2033d59df30b22746" translate="yes" xml:space="preserve">
          <source>Dependency Injection is pervasive throughout AngularJS. You can use it when defining components or when providing &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt; blocks for a module.</source>
          <target state="translated">依存性注入は、AngularJS全体に行き渡っています。コンポーネントを定義するとき、または提供するときは、それを使用することができ &lt;code&gt;run&lt;/code&gt; し、 &lt;code&gt;config&lt;/code&gt; モジュールのブロックを。</target>
        </trans-unit>
        <trans-unit id="327a55f82dc6818877a68e37b722bb7f2360b633" translate="yes" xml:space="preserve">
          <source>Deployment</source>
          <target state="translated">Deployment</target>
        </trans-unit>
        <trans-unit id="8201f6ff0e5004a4bfccdbd8144af27f2013f8eb" translate="yes" xml:space="preserve">
          <source>Deregister a control from the form.</source>
          <target state="translated">フォームからコントロールの登録を解除します。</target>
        </trans-unit>
        <trans-unit id="2af89a89cef15b822c0d0acc729909c302781d81" translate="yes" xml:space="preserve">
          <source>Deregisters an event listener based on the event which has been associated with the provided element. This method can be used in three different ways depending on the arguments:</source>
          <target state="translated">指定された要素に関連付けられたイベントに基づいてイベントリスナーの登録を解除します。このメソッドは、引数に応じて3つの異なる方法で使用することができます。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="e3f132e020453df1a9acbebf0586c70543cd8c33" translate="yes" xml:space="preserve">
          <source>Deserialized JSON string.</source>
          <target state="translated">デシリアライズされたJSON文字列。</target>
        </trans-unit>
        <trans-unit id="4cd052d554151d1dc02fd9731f9a485e9108a179" translate="yes" xml:space="preserve">
          <source>Deserialized cookie value.</source>
          <target state="translated">デシリアライズされたクッキーの値。</target>
        </trans-unit>
        <trans-unit id="1a80bbcd8ea1a814fe2e5d77c9178e1038921990" translate="yes" xml:space="preserve">
          <source>Deserializes a JSON string.</source>
          <target state="translated">JSON 文字列をデシリアライズします。</target>
        </trans-unit>
        <trans-unit id="c27667616e652be84cc2c1b6b99515c219d63d79" translate="yes" xml:space="preserve">
          <source>Design Principles of AngularJS (video)</source>
          <target state="translated">AngularJSの設計原理(動画</target>
        </trans-unit>
        <trans-unit id="dfc06cd40e8bbe5fdfe5911a99ffee939388a01e" translate="yes" xml:space="preserve">
          <source>Destination into which the source is copied. If provided, must be of the same type as &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">ソースのコピー先の宛先。指定する場合は、 &lt;code&gt;source&lt;/code&gt; と同じタイプである必要があります。</target>
        </trans-unit>
        <trans-unit id="888c51c1c5c27c5b36b8738901ae380a900d1853" translate="yes" xml:space="preserve">
          <source>Destination object.</source>
          <target state="translated">宛先オブジェクト。</target>
        </trans-unit>
        <trans-unit id="a1e2c0b92bdd88f0fcb0c37a3c357ef7f0dfaccb" translate="yes" xml:space="preserve">
          <source>Destroys the &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; object entirely, removing it from the &lt;a href=&quot;../service/%24cachefactory&quot;&gt;$cacheFactory&lt;/a&gt; set.</source>
          <target state="translated">&lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;オブジェクトを完全に破棄し、&lt;a href=&quot;../service/%24cachefactory&quot;&gt;$ cacheFactory&lt;/a&gt;セットから削除します。</target>
        </trans-unit>
        <trans-unit id="dc3decbb93847518f1a049dcf49d0d7c6560bcc6" translate="yes" xml:space="preserve">
          <source>Details</source>
          <target state="translated">Details</target>
        </trans-unit>
        <trans-unit id="3d2a0d7f87ba443d5d9d80e16047385ccffb8fd6" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a &lt;code&gt;Function&lt;/code&gt;.</source>
          <target state="translated">参照が &lt;code&gt;Function&lt;/code&gt; かどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="4113c903a447369d1069839fa1070f046a4c3170" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">参照が &lt;code&gt;Number&lt;/code&gt; かどうかを判別します。</target>
        </trans-unit>
        <trans-unit id="e163b7686cbd75d6ac0afa43f59a2a1afdecef9a" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">参照が &lt;code&gt;String&lt;/code&gt; かどうかを判別します。</target>
        </trans-unit>
        <trans-unit id="1cf350f5a8069497935175567e278f51b713aa42" translate="yes" xml:space="preserve">
          <source>Determines if a reference is a DOM element (or wrapped jQuery element).</source>
          <target state="translated">参照が DOM 要素 (またはラップされた jQuery 要素)であるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="d525fdf8b5a9d0d2c0f715b9068dd493ccd6f25b" translate="yes" xml:space="preserve">
          <source>Determines if a reference is an &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">参照が &lt;code&gt;Array&lt;/code&gt; かどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="b2be2458af6292b2bcac1469ec435b958dd083b5" translate="yes" xml:space="preserve">
          <source>Determines if a reference is an &lt;code&gt;Object&lt;/code&gt;. Unlike &lt;code&gt;typeof&lt;/code&gt; in JavaScript, &lt;code&gt;null&lt;/code&gt;s are not considered to be objects. Note that JavaScript arrays are objects.</source>
          <target state="translated">参照が &lt;code&gt;Object&lt;/code&gt; かどうかを判別します。JavaScriptの &lt;code&gt;typeof&lt;/code&gt; とは異なり、 &lt;code&gt;null&lt;/code&gt; はオブジェクトとは見なされません。JavaScript配列はオブジェクトであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f1973ee38e2820392df6987b25ac623a3df111fa" translate="yes" xml:space="preserve">
          <source>Determines if a reference is defined.</source>
          <target state="translated">参照が定義されているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="5acbddde98e2e5498cdcbbd393b69655ebfab3fd" translate="yes" xml:space="preserve">
          <source>Determines if a reference is undefined.</source>
          <target state="translated">参照が未定義かどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="f3d374285cfc5534564499c4ffd11134b73c0553" translate="yes" xml:space="preserve">
          <source>Determines if a value is a date.</source>
          <target state="translated">値が日付であるかどうかを判定します。</target>
        </trans-unit>
        <trans-unit id="03fe2f186b89e2d26eec4a0369aec723c0e6b2e2" translate="yes" xml:space="preserve">
          <source>Determines if two objects or two values are equivalent. Supports value types, regular expressions, arrays and objects.</source>
          <target state="translated">2つのオブジェクトまたは2つの値が等価かどうかを判定します。値の型、正規表現、配列、オブジェクトをサポートします。</target>
        </trans-unit>
        <trans-unit id="9e4bd027f55486bc01eb5c3e7f889479826c89f5" translate="yes" xml:space="preserve">
          <source>Develop</source>
          <target state="translated">Develop</target>
        </trans-unit>
        <trans-unit id="45e199c34f2e47d26bd6cf3b0bc418229f9353d7" translate="yes" xml:space="preserve">
          <source>Developer Guide</source>
          <target state="translated">開発者ガイド</target>
        </trans-unit>
        <trans-unit id="8b51dbd8f299bc7c073294b641b3f766d5ad2466" translate="yes" xml:space="preserve">
          <source>Didn't find what you're looking for here? Check out the &lt;a href=&quot;guide/external-resources&quot;&gt;External AngularJS resources guide&lt;/a&gt;.</source>
          <target state="translated">ここで探しているものが見つかりませんでしたか？チェックアウト&lt;a href=&quot;guide/external-resources&quot;&gt;外部AngularJSのリソースガイドを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2886baaf05b749277028afeb9b687e96ffae3fa3" translate="yes" xml:space="preserve">
          <source>Differences between Kris Kowal's Q and $q</source>
          <target state="translated">クリス・コワルのQと$qの違い</target>
        </trans-unit>
        <trans-unit id="0a4e32e999a601265a21ab8df0f84e0f0c01e628" translate="yes" xml:space="preserve">
          <source>Differences from the ICU MessageFormat syntax</source>
          <target state="translated">ICU MessageFormat構文との違い</target>
        </trans-unit>
        <trans-unit id="82ee6eee6c53c6516212864425aaba8fdf0037c2" translate="yes" xml:space="preserve">
          <source>Different DOM between &lt;code&gt;template&lt;/code&gt; and &lt;code&gt;templateUrl&lt;/code&gt;: &lt;a href=&quot;https://github.com/angular/angular.js/issues/14326&quot;&gt;#10612&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; と &lt;code&gt;templateUrl&lt;/code&gt; の DOMが異なる：&lt;a href=&quot;https://github.com/angular/angular.js/issues/14326&quot;&gt;＃10612&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="164e0b79063f11a2936cf830fb48b8c7054cc118" translate="yes" xml:space="preserve">
          <source>Directive</source>
          <target state="translated">Directive</target>
        </trans-unit>
        <trans-unit id="fda754562558210f994489b54b2697a96dc73fa2" translate="yes" xml:space="preserve">
          <source>Directive Definition Object</source>
          <target state="translated">ディレクティブ定義オブジェクト</target>
        </trans-unit>
        <trans-unit id="e9cd5ca17a7c95f80bd097f0322c1ccdcc4c3d5b" translate="yes" xml:space="preserve">
          <source>Directive Info</source>
          <target state="translated">指令情報</target>
        </trans-unit>
        <trans-unit id="67e1beffb6df3ce747606244ee286332d2ea20a6" translate="yes" xml:space="preserve">
          <source>Directive Support</source>
          <target state="translated">ディレクティブサポート</target>
        </trans-unit>
        <trans-unit id="1f833a7af0a6aaa31ef34696128cfbeafe3eed41" translate="yes" xml:space="preserve">
          <source>Directive components in ng</source>
          <target state="translated">ngにおける指令成分</target>
        </trans-unit>
        <trans-unit id="4cc0bdd0eee78ccef5ca412ee771d3f81c05f4a4" translate="yes" xml:space="preserve">
          <source>Directive components in ngAnimate</source>
          <target state="translated">ngAnimate のディレクティブコンポーネント</target>
        </trans-unit>
        <trans-unit id="844df4f4bdaa7d4d1ccd12b056cbe1adfcc021cb" translate="yes" xml:space="preserve">
          <source>Directive components in ngComponentRouter</source>
          <target state="translated">ngComponentRouter のディレクティブコンポーネント</target>
        </trans-unit>
        <trans-unit id="de98d7620ad6306ead111be196ed86e3671c7290" translate="yes" xml:space="preserve">
          <source>Directive components in ngMessages</source>
          <target state="translated">ngMessages のディレクティブコンポーネント</target>
        </trans-unit>
        <trans-unit id="3e59659ae9dccbcaae81c53c6bc245083968f924" translate="yes" xml:space="preserve">
          <source>Directive components in ngRoute</source>
          <target state="translated">ngRoute のディレクティブコンポーネント</target>
        </trans-unit>
        <trans-unit id="91447be933b3e2599ebeeeffc119c8212eeed0af" translate="yes" xml:space="preserve">
          <source>Directive components in ngTouch</source>
          <target state="translated">ngTouch のディレクティブコンポーネント</target>
        </trans-unit>
        <trans-unit id="d6115f4adc06b0e052bc4ff5724424c7b78aeddd" translate="yes" xml:space="preserve">
          <source>Directive controllers can provide the following methods that are called by AngularJS at points in the life-cycle of the directive:</source>
          <target state="translated">ディレクティブコントローラは、ディレクティブのライフサイクルの中でAngularJSによって呼び出される以下のメソッドを提供することができます。</target>
        </trans-unit>
        <trans-unit id="302daa750770cb865e5e869c5d3fb8ea941e26e5" translate="yes" xml:space="preserve">
          <source>Directive name, or an object map of directives where the keys are the names and the values are the factories.</source>
          <target state="translated">ディレクティブ名、または、キーが名前、値がファクトリであるディレクティブのオブジェクトマップ。</target>
        </trans-unit>
        <trans-unit id="7490be6dee2947f333e03a7200032b150a8f8592" translate="yes" xml:space="preserve">
          <source>Directive that instantiates &lt;a href=&quot;../type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;をインスタンス化するディレクティブ。</target>
        </trans-unit>
        <trans-unit id="d24b0ceb64605261d7559cd1d1e867e4d882600f" translate="yes" xml:space="preserve">
          <source>Directive that instantiates &lt;a href=&quot;type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;type/form.formcontroller&quot;&gt;FormController&lt;/a&gt;をインスタンス化するディレクティブ。</target>
        </trans-unit>
        <trans-unit id="8735ba9d320dcda668a0816d217511ecea07ecf0" translate="yes" xml:space="preserve">
          <source>Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.</source>
          <target state="translated">トランスクルージョンを使用する最も近い親ディレクティブのトランスクルージョンされたDOMの挿入点をマークするディレクティブ。</target>
        </trans-unit>
        <trans-unit id="746cc62cda06834c2b42e5ffe56a1badbb306cd7" translate="yes" xml:space="preserve">
          <source>Directive types</source>
          <target state="translated">ディレクティブの種類</target>
        </trans-unit>
        <trans-unit id="28c82071e940360118b0611d5c912a71c32a0100" translate="yes" xml:space="preserve">
          <source>Directives</source>
          <target state="translated">Directives</target>
        </trans-unit>
        <trans-unit id="336c7042caff79e8e52e079db85c30958078de48" translate="yes" xml:space="preserve">
          <source>Directives are not deduplicated before compilation</source>
          <target state="translated">コンパイル前にディレクティブが重複排除されない</target>
        </trans-unit>
        <trans-unit id="0050d5ca31968a90a87b0b2b5fe12a4a6f033632" translate="yes" xml:space="preserve">
          <source>Directives are not re-compiled</source>
          <target state="translated">ディレクティブは再コンパイルされません</target>
        </trans-unit>
        <trans-unit id="8d67d16379fb0c5fb472d4b6392bed6f0a88bbfa" translate="yes" xml:space="preserve">
          <source>Directives can require the controllers of other directives to enable communication between each other. This can be achieved in a component by providing an object mapping for the &lt;code&gt;require&lt;/code&gt; property. The object keys specify the property names under which the required controllers (object values) will be bound to the requiring component's controller.</source>
          <target state="translated">ディレクティブは、相互間の通信を可能にするために、他のディレクティブのコントローラーを必要とする場合があります。これは、 &lt;code&gt;require&lt;/code&gt; プロパティにオブジェクトマッピングを提供することにより、コンポーネントで実現できます。オブジェクトキーは、必要なコントローラー（オブジェクト値）が必要なコンポーネントのコントローラーにバインドされるプロパティ名を指定します。</target>
        </trans-unit>
        <trans-unit id="b5ec19ceda57dbf701f9e59456ca25e9c7b1a674" translate="yes" xml:space="preserve">
          <source>Directives in AngularJS are responsible for encapsulating complex functionality within custom HTML tags, attributes, classes or comments. Unit tests are very important for directives because the components you create with directives may be used throughout your application and in many different contexts.</source>
          <target state="translated">AngularJSのディレクティブは複雑な機能をカスタムHTMLタグ、属性、クラス、コメントの中にカプセル化する役割を果たします。ディレクティブで作成したコンポーネントはアプリケーション全体や様々なコンテキストで使用される可能性があるため、ユニットテストはディレクティブにとって非常に重要です。</target>
        </trans-unit>
        <trans-unit id="bdc211594d3e011463f460b1b6ff16a3553721bd" translate="yes" xml:space="preserve">
          <source>Directives like &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;&lt;code&gt;ngClick&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/directive/ngfocus&quot;&gt;&lt;code&gt;ngFocus&lt;/code&gt;&lt;/a&gt; expose a &lt;code&gt;$event&lt;/code&gt; object within the scope of that expression. The object is an instance of a &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;jQuery Event Object&lt;/a&gt; when jQuery is present or a similar jqLite object.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt; &lt;code&gt;ngClick&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../api/ng/directive/ngfocus&quot;&gt; &lt;code&gt;ngFocus&lt;/code&gt; &lt;/a&gt;などのディレクティブは、その式のスコープ内で &lt;code&gt;$event&lt;/code&gt; オブジェクトを公開します。オブジェクトは、jQueryが存在する場合のjQuery &lt;a href=&quot;http://api.jquery.com/category/events/event-object/&quot;&gt;イベントオブジェクト&lt;/a&gt;または同様のjqLit​​eオブジェクトのインスタンスです。</target>
        </trans-unit>
        <trans-unit id="6434913d2a02f2df51c8dfef0163eab8e24c7df1" translate="yes" xml:space="preserve">
          <source>Directives often have a &lt;strong&gt;link function&lt;/strong&gt;. A link function allows the directive to register listeners to the specific cloned DOM element instance as well as to copy content into the DOM from the scope.</source>
          <target state="translated">多くの場合、ディレクティブには&lt;strong&gt;リンク機能があります&lt;/strong&gt;。リンク関数を使用すると、特定の複製されたDOM要素インスタンスにリスナーを登録したり、スコープからDOMにコンテンツをコピーしたりできます。</target>
        </trans-unit>
        <trans-unit id="033d63aa44ddfb57d03dea3272e0203cf62b3238" translate="yes" xml:space="preserve">
          <source>Directives that Create Scopes</source>
          <target state="translated">スコープを作成するディレクティブ</target>
        </trans-unit>
        <trans-unit id="a74321a33161090e50af4b36d898258f47549ad8" translate="yes" xml:space="preserve">
          <source>Directives that use transclusion are treated specially by the compiler. Before their compile function is called, the contents of the directive's element are removed from the element and provided via a transclusion function. The directive's template is then appended to the directive's element, to which it can then insert the transcluded content into its template.</source>
          <target state="translated">トランスクルージョンを使用するディレクティブはコンパイラによって特別に扱われます。コンパイル関数が呼ばれる前に、ディレクティブの要素の内容が要素から取り除かれて、 トランスクルージョン関数によって提供されます。その後、ディレクティブのテンプレートがディレクティブの要素に追加され、そのテンプレートにトランスクルージョンされた内容を挿入することができます。</target>
        </trans-unit>
        <trans-unit id="4bdab4ccc71e22e8ec90abeea9ccfd1df46ff179" translate="yes" xml:space="preserve">
          <source>Directives that want to modify the DOM typically use the &lt;code&gt;link&lt;/code&gt; option to register DOM listeners as well as update the DOM. It is executed after the template has been cloned and is where directive logic will be put.</source>
          <target state="translated">DOMを変更するディレクティブは通常、 &lt;code&gt;link&lt;/code&gt; オプションを使用してDOMリスナーを登録し、DOMを更新します。テンプレートが複製された後で実行され、ディレクティブロジックが配置されます。</target>
        </trans-unit>
        <trans-unit id="e5140a8ef3a9bc2683f73052c7fd79865733a8ce" translate="yes" xml:space="preserve">
          <source>Dirty checking can be done with three strategies: By reference, by collection contents, and by value. The strategies differ in the kinds of changes they detect, and in their performance characteristics.</source>
          <target state="translated">ダーティチェックは3つの戦略で行うことができます。参照によるもの、コレクションの内容によるもの、および値によるものです。これらのストラテジーは、検出する変更の種類とパフォーマンスの特徴が異なります。</target>
        </trans-unit>
        <trans-unit id="f7eed9ee6c74c9630f8e771d832431d6115feaf3" translate="yes" xml:space="preserve">
          <source>Dirty checking the scope for property changes is a common operation in AngularJS and for this reason the dirty checking function must be efficient. Care should be taken that the dirty checking function does not do any DOM access, as DOM access is orders of magnitude slower than property access on JavaScript object.</source>
          <target state="translated">プロパティ変更のスコープをダーティチェックすることはAngularJSでは一般的な操作であり、そのためダーティチェック関数は効率的でなければなりません。ダーティチェック関数はDOMアクセスを行わないように注意しなければなりません。DOMアクセスはJavaScriptオブジェクトのプロパティアクセスよりも桁違いに遅いからです。</target>
        </trans-unit>
        <trans-unit id="14f2ccf9e7d630a13a9a51eb1a154be01aba9e61" translate="yes" xml:space="preserve">
          <source>Disable comment and css class directives</source>
          <target state="translated">コメントと css クラスのディレクティブを無効にする</target>
        </trans-unit>
        <trans-unit id="17f67c438b25665408ced77a0f973ff152910ec2" translate="yes" xml:space="preserve">
          <source>Disabling Debug Data</source>
          <target state="translated">デバッグデータの無効化</target>
        </trans-unit>
        <trans-unit id="4c52842f01d8ff2a00e9728305157459d5a938ec" translate="yes" xml:space="preserve">
          <source>Disabling Specific Attributes</source>
          <target state="translated">特定の属性を無効にする</target>
        </trans-unit>
        <trans-unit id="de84716cee60c5cb4c6d2f6f25d3ac55ddcd7e00" translate="yes" xml:space="preserve">
          <source>Disabling attributes</source>
          <target state="translated">属性を無効にする</target>
        </trans-unit>
        <trans-unit id="20ef6ef888eb023c4461090d2f38a7acea56c9fa" translate="yes" xml:space="preserve">
          <source>Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting (XSS) vulnerability in your application.</source>
          <target state="translated">自動エスケープを無効にすることは非常に危険であり、通常、アプリケーションにクロスサイトスクリプティング(XSS)の脆弱性が発生します。</target>
        </trans-unit>
        <trans-unit id="1f51a2a3fb5aa9f0b2bf05d11e6cc36721611e66" translate="yes" xml:space="preserve">
          <source>Disabling ngAria on Specific Elements</source>
          <target state="translated">特定の要素でngAriaを無効にする</target>
        </trans-unit>
        <trans-unit id="e408de586a7e2622fd333d5e79f8788540adc05a" translate="yes" xml:space="preserve">
          <source>Disallow argument name annotation inference.</source>
          <target state="translated">引数名のアノテーション推論を許可しない。</target>
        </trans-unit>
        <trans-unit id="85016ac7fabd0f269f3323d663fd847b3d8b64a4" translate="yes" xml:space="preserve">
          <source>Discuss</source>
          <target state="translated">Discuss</target>
        </trans-unit>
        <trans-unit id="22d9c848e577ae1fec59456eee03bc9ea644ba34" translate="yes" xml:space="preserve">
          <source>Dispatches an event &lt;code&gt;name&lt;/code&gt; downwards to all child scopes (and their children) notifying the registered &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; listeners.</source>
          <target state="translated">登録された&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;リスナーに通知するすべての子スコープ（およびその子）にイベント &lt;code&gt;name&lt;/code&gt; 下方にディスパッチします。</target>
        </trans-unit>
        <trans-unit id="522ab92da5006452539dc8ace74860c58110db39" translate="yes" xml:space="preserve">
          <source>Dispatches an event &lt;code&gt;name&lt;/code&gt; upwards through the scope hierarchy notifying the registered &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; listeners.</source>
          <target state="translated">登録された&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;リスナーに通知するスコープ階層を介してイベント &lt;code&gt;name&lt;/code&gt; 上方にディスパッチします。</target>
        </trans-unit>
        <trans-unit id="d77fffba57484870bc54fe43094d3c654c48c5c8" translate="yes" xml:space="preserve">
          <source>Displaying a default message</source>
          <target state="translated">デフォルトのメッセージを表示する</target>
        </trans-unit>
        <trans-unit id="6a1d6df1044462482aefb148d802e6a902833016" translate="yes" xml:space="preserve">
          <source>Displaying multiple messages at the same time</source>
          <target state="translated">複数のメッセージを同時に表示する</target>
        </trans-unit>
        <trans-unit id="8fcd11662cedbe647c35df6e222817acbf87bac8" translate="yes" xml:space="preserve">
          <source>Do not bootstrap your app on an element with a directive that uses &lt;a href=&quot;../api/ng/service/%24compile#transclusion.html&quot;&gt;transclusion&lt;/a&gt;, such as &lt;a href=&quot;../api/ng/directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;. Doing this misplaces the app &lt;a href=&quot;../api/ng/service/%24rootelement&quot;&gt;&lt;code&gt;$rootElement&lt;/code&gt;&lt;/a&gt; and the app's &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;injector&lt;/a&gt;, causing animations to stop working and making the injector inaccessible from outside the app.</source>
          <target state="translated">使用するディレクティブを持つ要素の上にアプリをブートストラップしない&lt;a href=&quot;../api/ng/service/%24compile#transclusion.html&quot;&gt;トランスクルーを&lt;/a&gt;など、&lt;a href=&quot;../api/ng/directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; &lt;/a&gt;。これを行うと、アプリの&lt;a href=&quot;../api/ng/service/%24rootelement&quot;&gt; &lt;code&gt;$rootElement&lt;/code&gt; &lt;/a&gt;とアプリの&lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;インジェクターが&lt;/a&gt;誤って配置され、アニメーションが機能しなくなり、アプリの外部からインジェクターにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="734e169c6f35eeaf3a86656e7f1c0d72ba2de6cc" translate="yes" xml:space="preserve">
          <source>Do not mix client and server templates</source>
          <target state="translated">クライアントテンプレートとサーバーテンプレートを混在させない</target>
        </trans-unit>
        <trans-unit id="19e892e136c9dc029952e0d0040cde8bbcc0893d" translate="yes" xml:space="preserve">
          <source>Do not run user input through &lt;code&gt;$scope.$eval&lt;/code&gt; (or any of the other expression parsing functions listed above)</source>
          <target state="translated">&lt;code&gt;$scope.$eval&lt;/code&gt; （または上記の他の式解析関数）を介してユーザー入力を実行しないでください</target>
        </trans-unit>
        <trans-unit id="a1222a753c501c7c58fabe9476767ef0ea0a4fda" translate="yes" xml:space="preserve">
          <source>Do not use a directive that uses &lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;transclusion&lt;/a&gt; on the same element as &lt;code&gt;ngApp&lt;/code&gt;. This includes directives such as &lt;a href=&quot;ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt;. Doing this misplaces the app &lt;a href=&quot;../service/%24rootelement&quot;&gt;&lt;code&gt;$rootElement&lt;/code&gt;&lt;/a&gt; and the app's &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;injector&lt;/a&gt;, causing animations to stop working and making the injector inaccessible from outside the app.</source>
          <target state="translated">&lt;code&gt;ngApp&lt;/code&gt; と同じ要素で&lt;a href=&quot;../service/%24compile#transclusion.html&quot;&gt;トランスクルージョン&lt;/a&gt;を使用するディレクティブを使用しないでください。これは、次のようなディレクティブが含ま&lt;a href=&quot;ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../ngroute/directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; を&lt;/a&gt;。これを行うと、アプリの&lt;a href=&quot;../service/%24rootelement&quot;&gt; &lt;code&gt;$rootElement&lt;/code&gt; &lt;/a&gt;とアプリの&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;インジェクターが&lt;/a&gt;誤って配置され、アニメーションが機能しなくなり、アプリの外部からインジェクターにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="a6b92442e50d6cf9ef2638015c4dcbb08c6765ea" translate="yes" xml:space="preserve">
          <source>Do not use controllers to:</source>
          <target state="translated">コントローラを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="c4e0abe2eab7806b524f5f539063aa767372787f" translate="yes" xml:space="preserve">
          <source>Do not use user input to generate templates dynamically</source>
          <target state="translated">テンプレートを動的に生成するためにユーザー入力を使用しない</target>
        </trans-unit>
        <trans-unit id="cd9568f76d3ffc3f4943b3b399abc721db51ae70" translate="yes" xml:space="preserve">
          <source>Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the lack of CSS animations by using the &lt;code&gt;$animateCss&lt;/code&gt; service to trigger our own tweaked-out, CSS-based animations directly from our own JS-based animation code:</source>
          <target state="translated">これは、CSSアニメーションとJSアニメーションを一緒に使用できないことを意味しますか？JSベースのアニメーションは常に優先度が高くなりますか？ &lt;code&gt;$animateCss&lt;/code&gt; サービスを使用して、CSSベースのアニメーションを独自のJSベースのアニメーションコードから直接トリガーすることで、CSSアニメーションの不足を補うことができます。</target>
        </trans-unit>
        <trans-unit id="13dee9f67e174a94349cf987cddd8a72fc3af4b8" translate="yes" xml:space="preserve">
          <source>Double Compilation</source>
          <target state="translated">ダブルコンパイル</target>
        </trans-unit>
        <trans-unit id="46cf9c3355e52010c4d12ff1852420f2537d0b53" translate="yes" xml:space="preserve">
          <source>Double Compilation, and how to avoid it</source>
          <target state="translated">二重コンパイルとそれを回避する方法</target>
        </trans-unit>
        <trans-unit id="c28ddab1c668724f14783f5d982dad57dfddbb6f" translate="yes" xml:space="preserve">
          <source>Double compilation occurs when an already compiled part of the DOM gets compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues, and memory leaks. A common scenario where this happens is a directive that calls &lt;code&gt;$compile&lt;/code&gt; in a directive link function on the directive element. In the following &lt;strong&gt;faulty example&lt;/strong&gt;, a directive adds a mouseover behavior to a button with &lt;code&gt;ngClick&lt;/code&gt; on it:</source>
          <target state="translated">ダブルコンパイルは、DOMのすでにコンパイルされた部分が再度コンパイルされるときに発生します。これは望ましくない影響であり、不正なディレクティブ、パフォーマンスの問題、およびメモリリークにつながる可能性があります。これが発生する一般的なシナリオは、ディレクティブ要素のディレクティブリンク関数で &lt;code&gt;$compile&lt;/code&gt; を呼び出すディレクティブです。次の&lt;strong&gt;誤った例&lt;/strong&gt;では、ディレクティブにより、 &lt;code&gt;ngClick&lt;/code&gt; が設定されたボタンにマウスオーバー動作が追加されます。</target>
        </trans-unit>
        <trans-unit id="2fe3ba6f7aec148d2830c036bfffa7e3396f913f" translate="yes" xml:space="preserve">
          <source>Double compilation occurs when an already compiled part of the DOM gets compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues, and memory leaks. Refer to the Compiler Guide &lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;section on double compilation&lt;/a&gt; for an in-depth explanation and ways to avoid it.</source>
          <target state="translated">ダブルコンパイルは、DOMのすでにコンパイルされた部分が再度コンパイルされるときに発生します。これは望ましくない影響であり、不正なディレクティブ、パフォーマンスの問題、およびメモリリークにつながる可能性があります。詳細な説明とそれを回避する方法については、&lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;ダブルコンパイルに関する&lt;/a&gt;コンパイラガイドのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b56ef3a0351d8185f34ae1615da191674f9fba40" translate="yes" xml:space="preserve">
          <source>Double compilation should therefore be avoided. In the above example, only the new element should be compiled:</source>
          <target state="translated">したがって、二重コンパイルは避けなければなりません。上記の例では、新しい要素のみをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="a479c9c34e878d07b4d67a73a48f432ad7dc53c8" translate="yes" xml:space="preserve">
          <source>Download</source>
          <target state="translated">Download</target>
        </trans-unit>
        <trans-unit id="6591272ff03229f7f47a34cd608993dac9711a87" translate="yes" xml:space="preserve">
          <source>Due to the differences in change-detection, you may get many more calls to &lt;code&gt;$doCheck&lt;/code&gt; in AngularJS than you would to &lt;code&gt;ngDoCheck&lt;/code&gt; in Angular.</source>
          <target state="translated">変更検出の違いにより、Angularで &lt;code&gt;ngDoCheck&lt;/code&gt; を実行するよりも、AngularJSで &lt;code&gt;$doCheck&lt;/code&gt; を呼び出すほうが多くなる場合があります。</target>
        </trans-unit>
        <trans-unit id="690ee2fd00601f8dae9435fe866cd934f63d5b6f" translate="yes" xml:space="preserve">
          <source>During a property comparison, properties of &lt;code&gt;function&lt;/code&gt; type and properties with names that begin with &lt;code&gt;$&lt;/code&gt; are ignored.</source>
          <target state="translated">プロパティの比較中、 &lt;code&gt;function&lt;/code&gt; タイプのプロパティと &lt;code&gt;$&lt;/code&gt; で始まる名前のプロパティは無視されます。</target>
        </trans-unit>
        <trans-unit id="d17774f2703ffb3b3466892ed055619a54364b52" translate="yes" xml:space="preserve">
          <source>During application bootstrap, before AngularJS goes off creating all services, it configures and instantiates all providers. We call this the configuration phase of the application life-cycle. During this phase, services aren't accessible because they haven't been created yet.</source>
          <target state="translated">アプリケーションの起動時には、AngularJSがすべてのサービスを作成する前に、すべてのプロバイダを設定してインスタンス化します。これをアプリケーションライフサイクルの設定フェーズと呼んでいます。このフェーズでは、サービスはまだ作成されていないのでアクセスできません。</target>
        </trans-unit>
        <trans-unit id="291ab189948f99ffa87d61aff0be223080b9841a" translate="yes" xml:space="preserve">
          <source>During template linking, directives register &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;watches&lt;/a&gt; on the scope. These watches will be used to propagate model values to the DOM.</source>
          <target state="translated">テンプレートのリンク中に、ディレクティブはスコープに&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;監視&lt;/a&gt;を登録します。これらのウォッチは、モデル値をDOMに伝達するために使用されます。</target>
        </trans-unit>
        <trans-unit id="45531da9cbed4e6e4ee65fe4cf35c23297ce9dea" translate="yes" xml:space="preserve">
          <source>During testing this implementation is swapped with &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;mock $httpBackend&lt;/a&gt; which can be trained with responses.</source>
          <target state="translated">テスト中、この実装は&lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;モック$ httpBackend&lt;/a&gt;と交換され、応答でトレーニングできます。</target>
        </trans-unit>
        <trans-unit id="84cba5a8d27805fd2532e7744606781e2d24ef87" translate="yes" xml:space="preserve">
          <source>During the compilation phase, the &lt;a href=&quot;compiler&quot;&gt;compiler&lt;/a&gt; matches &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt; against the DOM template. The directives usually fall into one of two categories:</source>
          <target state="translated">コンパイル・フェーズで、&lt;a href=&quot;compiler&quot;&gt;コンパイラが&lt;/a&gt;一致する&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;ディレクティブ&lt;/a&gt; DOMテンプレートに対しては。ディレクティブは通常、次の2つのカテゴリのいずれかに分類されます。</target>
        </trans-unit>
        <trans-unit id="552c6c3ebea05d341417ee364fae8ea2af019067" translate="yes" xml:space="preserve">
          <source>During the compilation phase:</source>
          <target state="translated">コンパイルの段階で。</target>
        </trans-unit>
        <trans-unit id="a493125bd9c880c4ca97eb29a7017d3a9e3e64ce" translate="yes" xml:space="preserve">
          <source>During the compilation process the &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;compiler&lt;/a&gt; uses the &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;$interpolate&lt;/a&gt; service to see if text nodes and element attributes contain interpolation markup with embedded expressions.</source>
          <target state="translated">コンパイルプロセス中に、&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;コンパイラー&lt;/a&gt;は&lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;$ interpolate&lt;/a&gt;サービスを使用して、テキストノードと要素の属性に式が埋め込まれた補間マークアップが含まれているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="6439c34c3206ba861da0f9bf5fc84e0b928b58c7" translate="yes" xml:space="preserve">
          <source>During the config: &lt;a href=&quot;../api/ng/provider/%24animateprovider#classNameFilter.html&quot;&gt;$animateProvider.classNameFilter()&lt;/a&gt;</source>
          <target state="translated">構成中：&lt;a href=&quot;../api/ng/provider/%24animateprovider#classNameFilter.html&quot;&gt;$ animateProvider.classNameFilter（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="60166faf8b960cb144a5a5dfe16f5efce800297f" translate="yes" xml:space="preserve">
          <source>During the config: &lt;a href=&quot;../api/ng/provider/%24animateprovider#customFilter.html&quot;&gt;$animateProvider.customFilter()&lt;/a&gt;</source>
          <target state="translated">構成中：&lt;a href=&quot;../api/ng/provider/%24animateprovider#customFilter.html&quot;&gt;$ animateProvider.customFilter（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="88d16957e61a3abc0b2789679717c815f5765897" translate="yes" xml:space="preserve">
          <source>During the runtime phase:</source>
          <target state="translated">ランタイムの段階で。</target>
        </trans-unit>
        <trans-unit id="ac637ea8f1b2151f1dfdc40a4954ea8a48a7d7d3" translate="yes" xml:space="preserve">
          <source>During unit testing, we want our unit tests to run quickly and have no external dependencies so we don&amp;rsquo;t want to send &lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XHR&lt;/a&gt; or &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; requests to a real server. All we really need is to verify whether a certain request has been sent or not, or alternatively just let the application make requests, respond with pre-trained responses and assert that the end result is what we expect it to be.</source>
          <target state="translated">ユニットテストでは、ユニットテストをすばやく実行し、外部依存関係がないようにするため、&lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XHR&lt;/a&gt;または&lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;リクエストを実際のサーバーに送信しないようにします。実際に必要なのは、特定の要求が送信されたかどうかを確認すること、またはアプリケーションに要求を送信させ、事前トレーニング済みの応答で応答させ、最終結果が期待どおりであることを表明することだけです。</target>
        </trans-unit>
        <trans-unit id="871ea4da49e00d79d13d56d3eec2853372598b41" translate="yes" xml:space="preserve">
          <source>Dynamic Messaging</source>
          <target state="translated">ダイナミックメッセージング</target>
        </trans-unit>
        <trans-unit id="bac036281464cca8457fab7f160594b9b956bffb" translate="yes" xml:space="preserve">
          <source>Dynamic responses</source>
          <target state="translated">動的応答</target>
        </trans-unit>
        <trans-unit id="ddfdb597e007e1dc4eda14345e693ee956382336" translate="yes" xml:space="preserve">
          <source>Dynamically changing an interpolated value</source>
          <target state="translated">補間された値を動的に変更する</target>
        </trans-unit>
        <trans-unit id="7ffa068184121937557c12ca97fdaa8b198c8c8e" translate="yes" xml:space="preserve">
          <source>E.g. the markup &lt;code&gt;{{ 12 | currency }}&lt;/code&gt; formats the number 12 as a currency using the &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;&lt;code&gt;currency&lt;/code&gt;&lt;/a&gt; filter. The resulting value is &lt;code&gt;$12.00&lt;/code&gt;.</source>
          <target state="translated">たとえば、マークアップ &lt;code&gt;{{ 12 | currency }}&lt;/code&gt; は、&lt;a href=&quot;../api/ng/filter/currency&quot;&gt; &lt;code&gt;currency&lt;/code&gt; &lt;/a&gt;フィルターを使用して、数値12を通貨としてフォーマットします。結果の値は &lt;code&gt;$12.00&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="706f3f2c466550baf6f8cff74045985c0b276d2f" translate="yes" xml:space="preserve">
          <source>E.g. the markup &lt;code&gt;{{ 1234 | number:2 }}&lt;/code&gt; formats the number 1234 with 2 decimal points using the &lt;a href=&quot;../api/ng/filter/number&quot;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/a&gt; filter. The resulting value is &lt;code&gt;1,234.00&lt;/code&gt;.</source>
          <target state="translated">例：マークアップ &lt;code&gt;{{ 1234 | number:2 }}&lt;/code&gt; は、&lt;a href=&quot;../api/ng/filter/number&quot;&gt; &lt;code&gt;number&lt;/code&gt; &lt;/a&gt;フィルターを使用して、数値1234を2つの小数点でフォーマットします。結果の値は &lt;code&gt;1,234.00&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a2a94632ee79f879ff70c670fc140a79667aac46" translate="yes" xml:space="preserve">
          <source>E2E Testing</source>
          <target state="translated">E2Eテスト</target>
        </trans-unit>
        <trans-unit id="46cb077541331f9a16fef73d47f33279ef781780" translate="yes" xml:space="preserve">
          <source>ES6, Webpack, and JSPM Starter Project</source>
          <target state="translated">ES6、Webpack、JSPMスタータープロジェクト</target>
        </trans-unit>
        <trans-unit id="ba63fe9fd9974e102c02ef7d910d4b8dddc1fa17" translate="yes" xml:space="preserve">
          <source>ES6/Typescript Best Practices</source>
          <target state="translated">ES6Typescriptのベストプラクティス</target>
        </trans-unit>
        <trans-unit id="648a21d0cd9f5c2567ffd87e39c8a17cf279fb77" translate="yes" xml:space="preserve">
          <source>Each &lt;a href=&quot;../directive/form&quot;&gt;form&lt;/a&gt; directive creates an instance of &lt;code&gt;FormController&lt;/code&gt;.</source>
          <target state="translated">各&lt;a href=&quot;../directive/form&quot;&gt;フォーム&lt;/a&gt;ディレクティブは、 &lt;code&gt;FormController&lt;/code&gt; のインスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="d1c0d67675138588c0dc00ee3cda517b7f653e50" translate="yes" xml:space="preserve">
          <source>Each AngularJS application has exactly one &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;root scope&lt;/a&gt;, but may have any number of child scopes.</source>
          <target state="translated">各AngularJSアプリケーションには&lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;ルートスコープ&lt;/a&gt;が1つだけありますが、子スコープはいくつでも含めることができます。</target>
        </trans-unit>
        <trans-unit id="829715aa8f2829bcf5c7f7ab2b1d5e696bd672e1" translate="yes" xml:space="preserve">
          <source>Each directive's &lt;code&gt;compile&lt;/code&gt; functions are executed. Each &lt;code&gt;compile&lt;/code&gt; function has a chance to modify the DOM. Each &lt;code&gt;compile&lt;/code&gt; function returns a &lt;code&gt;link&lt;/code&gt; function. These functions are composed into a &quot;combined&quot; link function, which invokes each directive's returned &lt;code&gt;link&lt;/code&gt; function.</source>
          <target state="translated">各ディレクティブの &lt;code&gt;compile&lt;/code&gt; 関数が実行されます。各 &lt;code&gt;compile&lt;/code&gt; 関数は、DOMを変更する機会があります。各 &lt;code&gt;compile&lt;/code&gt; 関数は &lt;code&gt;link&lt;/code&gt; 関数を返します。これらの関数は「結合された」リンク関数にまとめられ、各ディレクティブから返された &lt;code&gt;link&lt;/code&gt; 関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="03ce87fe012858dd28022ce0344110a91c5c56e7" translate="yes" xml:space="preserve">
          <source>Each element in these arrays must be one of the following:</source>
          <target state="translated">これらの配列の各要素は、以下のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="0788a57602c88bc63b92f1ea44577c3c1372677f" translate="yes" xml:space="preserve">
          <source>Each function in the &lt;code&gt;$validators&lt;/code&gt; object receives the &lt;code&gt;modelValue&lt;/code&gt; and the &lt;code&gt;viewValue&lt;/code&gt; as parameters. AngularJS will then call &lt;code&gt;$setValidity&lt;/code&gt; internally with the function's return value (&lt;code&gt;true&lt;/code&gt;: valid, &lt;code&gt;false&lt;/code&gt;: invalid). The validation functions are executed every time an input is changed (&lt;code&gt;$setViewValue&lt;/code&gt; is called) or whenever the bound &lt;code&gt;model&lt;/code&gt; changes. Validation happens after successfully running &lt;code&gt;$parsers&lt;/code&gt; and &lt;code&gt;$formatters&lt;/code&gt;, respectively. Failed validators are stored by key in &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24error&quot;&gt;&lt;code&gt;ngModelController.$error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$validators&lt;/code&gt; オブジェクトの各関数は、 &lt;code&gt;modelValue&lt;/code&gt; および &lt;code&gt;viewValue&lt;/code&gt; をパラメーターとして受け取ります。 AngularJSは、関数の戻り値を使用して内部的に &lt;code&gt;$setValidity&lt;/code&gt; を呼び出します（ &lt;code&gt;true&lt;/code&gt; ：有効、 &lt;code&gt;false&lt;/code&gt; ：無効）。検証関数は、入力が変更されるたび（ &lt;code&gt;$setViewValue&lt;/code&gt; が呼び出されるたび）、またはバインドされた &lt;code&gt;model&lt;/code&gt; が変更されるたびに実行されます。検証は、それぞれ &lt;code&gt;$parsers&lt;/code&gt; および &lt;code&gt;$formatters&lt;/code&gt; 正常に実行した後に行われます。失敗したバリデーターは&lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24error&quot;&gt; &lt;code&gt;ngModelController.$error&lt;/code&gt; &lt;/a&gt;キーによって保存されます。</target>
        </trans-unit>
        <trans-unit id="1a059e84dcbee7d4310b371af5bf3f354749be0d" translate="yes" xml:space="preserve">
          <source>Each item in the &lt;strong&gt;RouteConfig&lt;/strong&gt; for a &lt;strong&gt;Routing Component&lt;/strong&gt; is an instance of this type. It can have the following properties:</source>
          <target state="translated">各項目&lt;strong&gt;RouteConfig&lt;/strong&gt;ための&lt;strong&gt;ルーティングコンポーネントは、&lt;/strong&gt;このタイプのインスタンスです。次のプロパティを持つことができます。</target>
        </trans-unit>
        <trans-unit id="72b188f1d17688bd4f986f5bc1d938df3660b4a5" translate="yes" xml:space="preserve">
          <source>Each key value in the parameter object is first bound to url template if present and then any excess keys are appended to the url search query after the &lt;code&gt;?&lt;/code&gt;.</source>
          <target state="translated">パラメータオブジェクトの各キー値は、存在する場合は最初にURLテンプレートにバインドされ、次に &lt;code&gt;?&lt;/code&gt; の後に余分なキーがURL検索クエリに追加されます。。</target>
        </trans-unit>
        <trans-unit id="c4db4dc45436f4f1a0c0c82c0e2621975a9bac1c" translate="yes" xml:space="preserve">
          <source>Each module can only be loaded once per injector. Usually an AngularJS app has only one injector and modules are only loaded once. Each test has its own injector and modules are loaded multiple times.</source>
          <target state="translated">各モジュールはインジェクタごとに一度しかロードできません。通常、AngularJSアプリはインジェクターが1つしかなく、モジュールは1回しかロードされません。各テストにはそれぞれ独自のインジェクターがあり、モジュールは複数回ロードされます。</target>
        </trans-unit>
        <trans-unit id="b8c6e4ddcbc08750f981caaf013164d265bbf24d" translate="yes" xml:space="preserve">
          <source>Each provide access to a &lt;code&gt;$delegate&lt;/code&gt;, which is the instantiated service/directive/filter, prior to being passed to the service that required it.</source>
          <target state="translated">それぞれが、それを必要とするサービスに渡される前に、インスタンス化されたサービス/ディレクティブ/フィルターである &lt;code&gt;$delegate&lt;/code&gt; へのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="dda93b9c00ecb491f2d026174b8fa5dbb60e68ea" translate="yes" xml:space="preserve">
          <source>Each recipe belongs to an &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;AngularJS module&lt;/a&gt;. An AngularJS module is a bag that holds one or more recipes. And since manually keeping track of module dependencies is no fun, a module can contain information about dependencies on other modules as well.</source>
          <target state="translated">各レシピは&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;AngularJSモジュールに&lt;/a&gt;属しています。AngularJSモジュールは、1つ以上のレシピを保持するバッグです。また、モジュールの依存関係を手動で追跡することは面白くないので、モジュールには他のモジュールへの依存関係に関する情報も含めることができます。</target>
        </trans-unit>
        <trans-unit id="9f3ae98a5b0c131a547a93b487b4c98012168788" translate="yes" xml:space="preserve">
          <source>Each version of AngularJS 1 up to, but not including 1.6, contained an expression sandbox, which reduced the surface area of the vulnerability but never removed it. &lt;strong&gt;In AngularJS 1.6 we removed this sandbox as developers kept relying upon it as a security feature even though it was always possible to access arbitrary JavaScript code if one could control the AngularJS templates or expressions of applications.&lt;/strong&gt;</source>
          <target state="translated">AngularJS 1の各バージョン（1.6を含まない）には式のサンドボックスが含まれていました。これにより、脆弱性の影響範囲が減少しましたが、削除されませんでした。&lt;strong&gt;AngularJS 1.6では、このサンドボックスを削除しました。これは、開発者がAngularJSテンプレートまたはアプリケーションの式を制御できれば、常に任意のJavaScriptコードにアクセスできるにもかかわらず、セキュリティ機能としてこのサンドボックスに依存し続けたためです。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b51b7017f03b60f98505f01afc9017f64fb597b6" translate="yes" xml:space="preserve">
          <source>Each web application you build is composed of objects that collaborate to get stuff done. These objects need to be instantiated and wired together for the app to work. In AngularJS apps most of these objects are instantiated and wired together automatically by the &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;injector service&lt;/a&gt;.</source>
          <target state="translated">構築する各Webアプリケーションは、共同作業を行うオブジェクトで構成されています。アプリを機能させるには、これらのオブジェクトをインスタンス化して相互に接続する必要があります。AngularJSアプリでは、これらのオブジェクトのほとんどが&lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;インジェクターサービス&lt;/a&gt;によって自動的にインスタンス化され、一緒に配線されます。</target>
        </trans-unit>
        <trans-unit id="e08245380fe45ed1dc1a39461e8430df197a0e09" translate="yes" xml:space="preserve">
          <source>Earlier we mentioned that we also have special purpose objects that are different from services. These objects extend the framework as plugins and therefore must implement interfaces specified by AngularJS. These interfaces are Controller, Directive, Filter and Animation.</source>
          <target state="translated">先ほど、サービスとは異なる特別な目的のオブジェクトも存在することを述べました。これらのオブジェクトはプラグインとしてフレームワークを拡張するため、AngularJSで指定されたインターフェースを実装しなければなりません。これらのインターフェースはController,Directive,Filter,Animationです。</target>
        </trans-unit>
        <trans-unit id="dca48544769c52bf3b58c672f5cd3b5c747bc2f2" translate="yes" xml:space="preserve">
          <source>Effects of DOM Element re-use</source>
          <target state="translated">DOM要素の再利用の効果</target>
        </trans-unit>
        <trans-unit id="c199d835c658f8ab6c23a79e307ea446a630dc73" translate="yes" xml:space="preserve">
          <source>Either a wrapped jQuery/jqLite node or a DOMElement</source>
          <target state="translated">ラップされた jQueryjqLite ノードまたは DOMElement のいずれか。</target>
        </trans-unit>
        <trans-unit id="c5dbec72523ae614966440682a91c6aefb466e1e" translate="yes" xml:space="preserve">
          <source>Element or HTML string to compile into a template function.</source>
          <target state="translated">テンプレート関数にコンパイルするための要素またはHTML文字列。</target>
        </trans-unit>
        <trans-unit id="9cbfd00aa5e38787a6022e42110687cd2450a209" translate="yes" xml:space="preserve">
          <source>Else compare the types themselves alphabetically.</source>
          <target state="translated">アルファベット順にタイプを比較します。</target>
        </trans-unit>
        <trans-unit id="92f004dc1ae3f95af43091d25f176aad7eb1a397" translate="yes" xml:space="preserve">
          <source>Else if one of the values is null, consider it &quot;greater than&quot; the other.</source>
          <target state="translated">一方の値がnullの場合は、他方の値よりも大きいとみなします。</target>
        </trans-unit>
        <trans-unit id="55716b221770b19d94c322e504ec2f031d1a376c" translate="yes" xml:space="preserve">
          <source>Email us at &lt;a href=&quot;mailto:security@angularjs.org&quot;&gt;security@angularjs.org&lt;/a&gt; to report any potential security issues in AngularJS.</source>
          <target state="translated">AngularJSの潜在的なセキュリティ問題を報告するには、&lt;a href=&quot;mailto:security@angularjs.org&quot;&gt;security&lt;/a&gt; @ angularjs.orgにメールを送信してください。</target>
        </trans-unit>
        <trans-unit id="099bc2374fc25e458767acd089b2e0b4bbe06521" translate="yes" xml:space="preserve">
          <source>Embedding interpolation markup inside expressions</source>
          <target state="translated">式の内部に補間マークアップを埋め込む</target>
        </trans-unit>
        <trans-unit id="b2d9626fab94fe46dbc23e11d5145543e8c891df" translate="yes" xml:space="preserve">
          <source>Emitted every time the ngInclude content is reloaded.</source>
          <target state="translated">ngIncludeコンテンツがリロードされるたびに発行されます。</target>
        </trans-unit>
        <trans-unit id="d69747c18e6a7823e2827479f46edbc548e716c8" translate="yes" xml:space="preserve">
          <source>Emitted every time the ngInclude content is requested.</source>
          <target state="translated">ngIncludeコンテンツが要求されるたびに発行されます。</target>
        </trans-unit>
        <trans-unit id="ccb5524240b958659fec098886cb27f13b421044" translate="yes" xml:space="preserve">
          <source>Emitted every time the ngView content is reloaded.</source>
          <target state="translated">ngViewの内容がリロードされるたびに出力されます。</target>
        </trans-unit>
        <trans-unit id="5352199744d0f4dd2b1904c169630303a8240bd4" translate="yes" xml:space="preserve">
          <source>Emitted when a template HTTP request yields an erroneous response (status &amp;lt; 200 || status &amp;gt; 299)</source>
          <target state="translated">テンプレートHTTPリクエストが誤った応答を返したときに発生します（ステータス&amp;lt;200 ||ステータス&amp;gt; 299）</target>
        </trans-unit>
        <trans-unit id="faf2ad99147d30fa634f5fda5836e1dedfa19477" translate="yes" xml:space="preserve">
          <source>Enable animations outside of the application DOM tree: &lt;a href=&quot;../api/ng/service/%24animate#pin.html&quot;&gt;$animate.pin()&lt;/a&gt;</source>
          <target state="translated">アプリケーションDOMツリーの外部でアニメーションを有効にします：&lt;a href=&quot;../api/ng/service/%24animate#pin.html&quot;&gt;$ animate.pin（）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a2ab88d7ccb6db7d12a00ccd002d5025b4173f0a" translate="yes" xml:space="preserve">
          <source>Enable or disable SVG support in the sanitizer.</source>
          <target state="translated">サニタイザーでの SVG サポートを有効または無効にします。</target>
        </trans-unit>
        <trans-unit id="f1d9379845b51d7e57e166ae34919d84964f1127" translate="yes" xml:space="preserve">
          <source>Enables a subset of svg to be supported by the sanitizer.</source>
          <target state="translated">サニタイザーがサポートする svg のサブセットを有効にします。</target>
        </trans-unit>
        <trans-unit id="143c725b84ea6f36aaaba38361a8a7f2268adbf9" translate="yes" xml:space="preserve">
          <source>Enables binding AngularJS expressions to onsubmit events.</source>
          <target state="translated">AngularJSの式をonsubmitイベントにバインドできるようにします。</target>
        </trans-unit>
        <trans-unit id="c80853334b84e1e011526ce6f6d2efcbb632d3b2" translate="yes" xml:space="preserve">
          <source>Enables/disables SCE and returns the current value.</source>
          <target state="translated">Enables SCE を無効にし、現在の値を返します。</target>
        </trans-unit>
        <trans-unit id="1bfefb111e5dac345b0aa3b3c4a4f406e1870b9d" translate="yes" xml:space="preserve">
          <source>Enables/disables various ARIA attributes</source>
          <target state="translated">様々なARIA属性を有効・無効にする</target>
        </trans-unit>
        <trans-unit id="7abd6ccf643ae77e58fc651912d7d14afe3ed6be" translate="yes" xml:space="preserve">
          <source>End-to-end tests can use modules to override configuration.</source>
          <target state="translated">エンドツーエンドのテストでは、モジュールを使用して設定を上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="fe10676ae39073acdfb80a439f4190fce12dba21" translate="yes" xml:space="preserve">
          <source>Enter a name in the Live Preview text box; the greeting below the text box changes instantly.</source>
          <target state="translated">ライブプレビューのテキストボックスに名前を入力すると、テキストボックスの下に表示される挨拶が瞬時に変わります。</target>
        </trans-unit>
        <trans-unit id="205fcd69afe3a8ebda34fa883e6cd9e9b086948b" translate="yes" xml:space="preserve">
          <source>Enter the AngularJS execution context by calling &lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt;&lt;code&gt;.&lt;/code&gt;&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt;&lt;code&gt;(stimulusFn)&lt;/code&gt;, where &lt;code&gt;stimulusFn&lt;/code&gt; is the work you wish to do in the AngularJS execution context.</source>
          <target state="translated">&lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt;を呼び出して、AngularJS実行コンテキストに入ります &lt;code&gt;.&lt;/code&gt; &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply &lt;/a&gt; &lt;code&gt;(stimulusFn)&lt;/code&gt; 、ここで &lt;code&gt;stimulusFn&lt;/code&gt; は、AngularJS実行コンテキストで実行する作業です。</target>
        </trans-unit>
        <trans-unit id="a5a37a82bd01c55087378b21c459ede66319d8f7" translate="yes" xml:space="preserve">
          <source>Error Reference</source>
          <target state="translated">エラーリファレンス</target>
        </trans-unit>
        <trans-unit id="a25c35bd8f4f9cad8579a43221ea776b2a563e82" translate="yes" xml:space="preserve">
          <source>Escaped Interpolation</source>
          <target state="translated">エスケープ補間</target>
        </trans-unit>
        <trans-unit id="218d2e528de2ed5dec55ef5059999f6d6c7e1a86" translate="yes" xml:space="preserve">
          <source>Escaped interpolation markers are only replaced with the actual interpolation markers in rendered output when the $interpolate service processes the text. So, for HTML elements interpolated by &lt;a href=&quot;%24compile&quot;&gt;$compile&lt;/a&gt;, or otherwise interpolated with the &lt;code&gt;mustHaveExpression&lt;/code&gt; parameter set to &lt;code&gt;true&lt;/code&gt;, the interpolated text must contain an unescaped interpolation expression. As such, this is typically useful only when user-data is used in rendering a template from the server, or when otherwise untrusted data is used by a directive.</source>
          <target state="translated">エスケープされた補間マーカーは、$ interpolateサービスがテキストを処理するときに、レンダリングされた出力で実際の補間マーカーにのみ置き換えられます。したがって、&lt;a href=&quot;%24compile&quot;&gt;$ compile&lt;/a&gt;によって補間された、または &lt;code&gt;mustHaveExpression&lt;/code&gt; パラメータを &lt;code&gt;true&lt;/code&gt; に設定して補間されたHTML要素の場合、補間されたテキストにはエスケープされていない補間式が含まれている必要があります。そのため、これは通常、サーバーからのテンプレートのレンダリングにユーザーデータが使用されている場合、またはディレクティブによって信頼されていないデータが使用されている場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="4d57d4ba2f3a7f358a90f37c48fff5bd229f3431" translate="yes" xml:space="preserve">
          <source>Escaping / Quoting</source>
          <target state="translated">エスケープ・クォーティング</target>
        </trans-unit>
        <trans-unit id="fea6dd1103565fa6cc8bae9d51b299f77b6e645c" translate="yes" xml:space="preserve">
          <source>Evaluate the &lt;code&gt;greeting&lt;/code&gt;&lt;a href=&quot;expression&quot;&gt;expression&lt;/a&gt; against the scope retrieved above, and assign the result to the text of the enclosing DOM element.</source>
          <target state="translated">上記で取得したスコープに対して &lt;code&gt;greeting&lt;/code&gt; &lt;a href=&quot;expression&quot;&gt;式を&lt;/a&gt;評価し、結果を囲んでいるDOM要素のテキストに割り当てます。</target>
        </trans-unit>
        <trans-unit id="cda22f8a7b7689be1d88d76ef009399f12f6bf88" translate="yes" xml:space="preserve">
          <source>Evaluate the given expression when the user changes the input. The expression is evaluated immediately, unlike the JavaScript onchange event which only triggers at the end of a change (usually, when the user leaves the form element or presses the return key).</source>
          <target state="translated">ユーザーが入力を変更したときに、与えられた式を評価します。JavaScript の onchange イベントが変更の最後にのみトリガーされるのとは異なり、式は即座に評価されます (通常、ユーザーがフォーム要素から離れるかリターンキーを押したときにトリガーされます)。</target>
        </trans-unit>
        <trans-unit id="f056dd1c6d8bd104d6ba75bafcd760d12a08ca72" translate="yes" xml:space="preserve">
          <source>Evaluated as &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt;. The expression value should evaluate to an object or an array which is observed on each &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle. Any shallow change within the collection will trigger a call to the &lt;code&gt;listener&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;として評価されます。式の値は、各&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;サイクルで観察されるオブジェクトまたは配列に評価される必要があります。コレクション内の浅い変更は、 &lt;code&gt;listener&lt;/code&gt; 呼び出しをトリガーします。</target>
        </trans-unit>
        <trans-unit id="a86c33fdabaa7b7c9f6110edee9f0ffd2acc28e1" translate="yes" xml:space="preserve">
          <source>Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default, the resulting HTML content will be sanitized using the &lt;a href=&quot;../../ngsanitize/service/%24sanitize&quot;&gt;$sanitize&lt;/a&gt; service. To utilize this functionality, ensure that &lt;code&gt;$sanitize&lt;/code&gt; is available, for example, by including &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies (not in core AngularJS). In order to use &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies, you need to include &quot;angular-sanitize.js&quot; in your application.</source>
          <target state="translated">式を評価し、結果のHTMLを安全な方法で要素に挿入します。デフォルトでは、結果のHTMLコンテンツは&lt;a href=&quot;../../ngsanitize/service/%24sanitize&quot;&gt;$ sanitize&lt;/a&gt;サービスを使用してサニタイズされます。この機能を利用するには、たとえば、モジュールの依存関係（コアAngularJSではない）に&lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;を含めるなどして、 &lt;code&gt;$sanitize&lt;/code&gt; が利用可能であることを確認します。モジュールの依存関係で&lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;を使用するには、アプリケーションに「angular-sanitize.js」を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="9076a3c6b5f726943b0322ab3cf79864f11e9902" translate="yes" xml:space="preserve">
          <source>Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default, the resulting HTML content will be sanitized using the &lt;a href=&quot;../ngsanitize/service/%24sanitize&quot;&gt;$sanitize&lt;/a&gt; service. To utilize this functionality, ensure that &lt;code&gt;$sanitize&lt;/code&gt; is available, for example, by including &lt;a href=&quot;../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies (not in core AngularJS). In order to use &lt;a href=&quot;../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; in your module's dependencies, you need to include &quot;angular-sanitize.js&quot; in your application.</source>
          <target state="translated">式を評価し、結果のHTMLを安全な方法で要素に挿入します。デフォルトでは、結果のHTMLコンテンツは&lt;a href=&quot;../ngsanitize/service/%24sanitize&quot;&gt;$ sanitize&lt;/a&gt;サービスを使用してサニタイズされます。この機能を利用するには、たとえば、モジュールの依存関係（コアAngularJSではない）に&lt;a href=&quot;../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;を含めるなどして、 &lt;code&gt;$sanitize&lt;/code&gt; が利用可能であることを確認します。モジュールの依存関係で&lt;a href=&quot;../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;を使用するには、アプリケーションに「angular-sanitize.js」を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="4fae0324b81717cfd0179935deb08738f4958c28" translate="yes" xml:space="preserve">
          <source>Event name to broadcast.</source>
          <target state="translated">放送するイベント名。</target>
        </trans-unit>
        <trans-unit id="9ae944309054d536d760fa0eef00f071c6363b43" translate="yes" xml:space="preserve">
          <source>Event name to emit.</source>
          <target state="translated">排出するイベント名を指定します。</target>
        </trans-unit>
        <trans-unit id="9a3b19e98675ab2f955bd6ef73c0dffd2dc79c70" translate="yes" xml:space="preserve">
          <source>Event name to listen on.</source>
          <target state="translated">リッスンするイベント名。</target>
        </trans-unit>
        <trans-unit id="efd8912106134f28159a082b13ebc510cdb36ce0" translate="yes" xml:space="preserve">
          <source>Event object (see &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">イベントオブジェクト（&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="5256cf2d05f2a2afff96813dfafbe9056fe17f54" translate="yes" xml:space="preserve">
          <source>Event object, see &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">イベントオブジェクト。&lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt;参照</target>
        </trans-unit>
        <trans-unit id="89991e609ea2e58df8701321c81f1c2b67ca16f0" translate="yes" xml:space="preserve">
          <source>Event that triggered the update.</source>
          <target state="translated">更新のきっかけとなったイベント。</target>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="dc6ee5b710b84a06b1994d13c09750db60be49d9" translate="yes" xml:space="preserve">
          <source>Every application has a single root &lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt;. All other scopes are descendant scopes of the root scope. Scopes provide separation between the model and the view, via a mechanism for watching the model for changes. They also provide event emission/broadcast and subscription facility. See the &lt;a href=&quot;../../../guide/scope&quot;&gt;developer guide on scopes&lt;/a&gt;.</source>
          <target state="translated">すべてのアプリケーションには、1つのルート&lt;a href=&quot;../type/%24rootscope.scope&quot;&gt;スコープがあり&lt;/a&gt;ます。他のすべてのスコープは、ルートスコープの子孫スコープです。スコープは、モデルの変更を監視するメカニズムを介して、モデルとビューを分離します。また、イベントの発信/放送およびサブスクリプション機能も提供します。&lt;a href=&quot;../../../guide/scope&quot;&gt;スコープ&lt;/a&gt;の開発者ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="c6fed10186b9a7e4a176e17c80c83b6d2a93e97a" translate="yes" xml:space="preserve">
          <source>Every application has a single root &lt;a href=&quot;type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt;. All other scopes are descendant scopes of the root scope. Scopes provide separation between the model and the view, via a mechanism for watching the model for changes. They also provide event emission/broadcast and subscription facility. See the &lt;a href=&quot;../../guide/scope&quot;&gt;developer guide on scopes&lt;/a&gt;.</source>
          <target state="translated">すべてのアプリケーションには、1つのルート&lt;a href=&quot;type/%24rootscope.scope&quot;&gt;スコープがあり&lt;/a&gt;ます。他のすべてのスコープは、ルートスコープの子孫スコープです。スコープは、モデルの変更を監視するメカニズムを介して、モデルとビューを分離します。また、イベントの発信/放送およびサブスクリプション機能も提供します。&lt;a href=&quot;../../guide/scope&quot;&gt;スコープ&lt;/a&gt;の開発者ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="8932161648474502d4579225b7a5010ba4feeb3a" translate="yes" xml:space="preserve">
          <source>Everything you need to build a CRUD app in a cohesive set: Data-binding, basic templating directives, form validation, routing, deep-linking, reusable components and dependency injection.</source>
          <target state="translated">CRUDアプリを構築するために必要なすべてがまとまったセットになっています。データバインディング、基本的なテンプレート化ディレクティブ、フォームバリデーション、ルーティング、ディープリンク、再利用可能なコンポーネント、依存性インジェクション。</target>
        </trans-unit>
        <trans-unit id="9eed938865a4ca53d208e8ce6cf848543e153677" translate="yes" xml:space="preserve">
          <source>Exact matches always win over keyword matches. Therefore, if you define both &lt;code&gt;=0&lt;/code&gt; and &lt;code&gt;zero&lt;/code&gt;, when the value of the expression is zero, the &lt;code&gt;=0&lt;/code&gt; message is the one that will be selected. (The duplicate keyword categories are helpful when used with the optional &lt;code&gt;offset&lt;/code&gt; syntax described later.)</source>
          <target state="translated">完全一致は常にキーワード一致よりも優先されます。したがって、 &lt;code&gt;=0&lt;/code&gt; と &lt;code&gt;zero&lt;/code&gt; 両方を定義すると、式の値が0のときに &lt;code&gt;=0&lt;/code&gt; メッセージが選択されます。（重複するキーワードカテゴリは、後で説明するオプションの &lt;code&gt;offset&lt;/code&gt; 構文とともに使用すると便利です。）</target>
        </trans-unit>
        <trans-unit id="1b2e441413acb202181b009a7cb2e30e8082e0bf" translate="yes" xml:space="preserve">
          <source>Exact matches are written as the equal sign followed by the exact value. &lt;code&gt;=0&lt;/code&gt;, &lt;code&gt;=1&lt;/code&gt;, &lt;code&gt;=2&lt;/code&gt; and &lt;code&gt;=123&lt;/code&gt; are all examples of exact matches. Note that there should be no space between the equal sign and the numeric value.</source>
          <target state="translated">完全一致は、等号とそれに続く正確な値として記述されます。 &lt;code&gt;=0&lt;/code&gt; 、 &lt;code&gt;=1&lt;/code&gt; 、 &lt;code&gt;=2&lt;/code&gt; および &lt;code&gt;=123&lt;/code&gt; はすべて完全一致の例です。等号と数値の間にはスペースを入れないでください。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="17aeb04f751fae1ae3f4ad0b2a7c8e59cbb96c5e" translate="yes" xml:space="preserve">
          <source>Example Applications</source>
          <target state="translated">応用例</target>
        </trans-unit>
        <trans-unit id="7c784376e50e16848980dbe227261dcf8fd3cd3c" translate="yes" xml:space="preserve">
          <source>Example configuration</source>
          <target state="translated">設定例</target>
        </trans-unit>
        <trans-unit id="916ba94adedad329829de9e3198135460b08ea09" translate="yes" xml:space="preserve">
          <source>Example of a component tree</source>
          <target state="translated">コンポーネントツリーの例</target>
        </trans-unit>
        <trans-unit id="1ee0a88badf0098cd9392d2a3a772e37baa2fda5" translate="yes" xml:space="preserve">
          <source>Example of what a typical jasmine tests looks like with the inject method.</source>
          <target state="translated">代表的なジャスミンのテストが注入法でどのように見えるかの例。</target>
        </trans-unit>
        <trans-unit id="07f064f0c6b85d5dffb3101177b89f9992c1c9c7" translate="yes" xml:space="preserve">
          <source>Example test:</source>
          <target state="translated">例題テスト。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="62dfa7f10882e77a87092f507d379f2402d87987" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&amp;lt;a href=&quot;/ext/link?a=b&quot; target=&quot;_self&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&amp;lt;a href=&quot;/ext/link?a=b&quot; target=&quot;_self&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c32374b44f69dd61e35af260b06e3345095cb0e9" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&amp;lt;a href=&quot;/not-my-base/link&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&amp;lt;a href=&quot;/not-my-base/link&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5706b247d2f0a121689f2b656388525706d03e11" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;&amp;lt;a href=&quot;http://angularjs.org/&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;&amp;lt;a href=&quot;http://angularjs.org/&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="7bb6af775c57b33034454a0b76f9d211912e7f56" translate="yes" xml:space="preserve">
          <source>Exception associated with the error.</source>
          <target state="translated">エラーに関連する例外。</target>
        </trans-unit>
        <trans-unit id="3c931b480d9d9bfc8842e1d02f1f24126be988bc" translate="yes" xml:space="preserve">
          <source>Execute this function after injector creation. Useful for application initialization.</source>
          <target state="translated">インジェクタ作成後にこの関数を実行します。アプリケーションの初期化に便利です。</target>
        </trans-unit>
        <trans-unit id="086045d75cb70d0de25ecacb2e252ee609998080" translate="yes" xml:space="preserve">
          <source>Execute this function on module load. Useful for service configuration.</source>
          <target state="translated">モジュールロード時にこの関数を実行します。サービスの設定に便利です。</target>
        </trans-unit>
        <trans-unit id="60db8af3d71e63425912639e5639bd857a345c69" translate="yes" xml:space="preserve">
          <source>Executed after the child elements are linked.</source>
          <target state="translated">子要素がリンクされた後に実行されます。</target>
        </trans-unit>
        <trans-unit id="2f8e9afcb55d879e3172b4ff3edb0f541f0a203d" translate="yes" xml:space="preserve">
          <source>Executed before the child elements are linked. Not safe to do DOM transformation since the compiler linking function will fail to locate the correct elements for linking.</source>
          <target state="translated">子要素がリンクされる前に実行されます。コンパイラのリンク関数がリンクのための正しい要素を見つけるのに失敗するので、DOM 変換を行うのは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="a474756a35892f6f1337f53303e90f0d73ff2f19" translate="yes" xml:space="preserve">
          <source>Executes the &lt;code&gt;expression&lt;/code&gt; on the current scope and returns the result. Any exceptions in the expression are propagated (uncaught). This is useful when evaluating AngularJS expressions.</source>
          <target state="translated">現在のスコープで &lt;code&gt;expression&lt;/code&gt; を実行し、結果を返します。式内の例外はすべて伝播されます（キャッチされません）。これは、AngularJS式を評価するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="4d7dabbbb9314a685e95e955e06bc8dd0125cef5" translate="yes" xml:space="preserve">
          <source>Executes the expression on the current scope at a later point in time.</source>
          <target state="translated">後日、現在のスコープで式を実行します。</target>
        </trans-unit>
        <trans-unit id="9df4399b6f3ff9926ed5500724ef427c968e367d" translate="yes" xml:space="preserve">
          <source>Exposes the current URL in the browser address bar, so you can</source>
          <target state="translated">ブラウザのアドレスバーに現在の URL を表示します。</target>
        </trans-unit>
        <trans-unit id="628cde53fd14624d568dab4d3637fdef86c20b64" translate="yes" xml:space="preserve">
          <source>Expression evaluation is forgiving to undefined and null. In JavaScript, evaluating &lt;code&gt;a.b.c&lt;/code&gt; throws an exception if &lt;code&gt;a&lt;/code&gt; is not an object. While this makes sense for a general purpose language, the expression evaluations are primarily used for data binding, which often look like this:</source>
          <target state="translated">式の評価は、未定義およびnullを許容します。JavaScriptでは、 &lt;code&gt;a&lt;/code&gt; がオブジェクトでない場合、 &lt;code&gt;a.b.c&lt;/code&gt; を評価すると例外がスローされます。これは汎用言語では理にかなっていますが、式の評価は主にデータバインディングで主に使用されます。</target>
        </trans-unit>
        <trans-unit id="0accf77dcec253c18fdfdc78fc6ec09ea004edfb" translate="yes" xml:space="preserve">
          <source>Expression that is evaluated on each &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle. A change in the return value triggers a call to the &lt;code&gt;listener&lt;/code&gt;.</source>
          <target state="translated">各&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;サイクルで評価される式。戻り値が変化すると、 &lt;code&gt;listener&lt;/code&gt; 呼び出されます。</target>
        </trans-unit>
        <trans-unit id="85ae6863e6e6040f384b4b6dc569f9eb4a64e58c" translate="yes" xml:space="preserve">
          <source>Expression to evaluate when a new partial is loaded.</source>
          <target state="translated">新しいパーシャルがロードされたときに評価する式。</target>
        </trans-unit>
        <trans-unit id="77456688d291ad4f5b4e8d91f041eeb7a5e2de52" translate="yes" xml:space="preserve">
          <source>Expression to evaluate whenever the view updates.</source>
          <target state="translated">ビューが更新されるたびに評価する式。</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="cf78f62fb7990fb89d458935ffb1846f90b586a1" translate="yes" xml:space="preserve">
          <source>Expressions, like the one defined for the &lt;code&gt;ngClick&lt;/code&gt; directive in the example below, are evaluated with respect to the current scope. Therefore, there is no risk of inadvertently coding in a dependency on a global value in such an expression.</source>
          <target state="translated">以下の例で &lt;code&gt;ngClick&lt;/code&gt; ディレクティブに定義されているような式は、現在のスコープに関して評価されます。したがって、そのような式のグローバル値への依存関係を誤ってコーディングするリスクはありません。</target>
        </trans-unit>
        <trans-unit id="7baf9e4023c205c51428907b8b5f7094a18f4b9f" translate="yes" xml:space="preserve">
          <source>Extends the built-in list of valid attributes, i.e. attributes that are considered safe and are not stripped off during sanitization.</source>
          <target state="translated">有効な属性の組み込みリストを拡張します。</target>
        </trans-unit>
        <trans-unit id="c966928e5c88a4a9f1ab15febec0c95a059f8e2a" translate="yes" xml:space="preserve">
          <source>Extends the built-in lists of valid HTML/SVG elements, i.e. elements that are considered safe and are not stripped off during sanitization. You can extend the following lists of elements:</source>
          <target state="translated">有効な HTMLSVG 要素の組み込みリストを拡張します。以下の要素のリストを拡張することができます。</target>
        </trans-unit>
        <trans-unit id="2b14b339ebedbd999c77e9b9f5c7d22127b40d2f" translate="yes" xml:space="preserve">
          <source>Extends the destination object &lt;code&gt;dst&lt;/code&gt; by copying own enumerable properties from the &lt;code&gt;src&lt;/code&gt; object(s) to &lt;code&gt;dst&lt;/code&gt;. You can specify multiple &lt;code&gt;src&lt;/code&gt; objects. If you want to preserve original objects, you can do so by passing an empty object as the target: &lt;code&gt;var object = angular.extend({}, object1, object2)&lt;/code&gt;.</source>
          <target state="translated">先オブジェクト延び &lt;code&gt;dst&lt;/code&gt; から自分の列挙プロパティをコピーすることによって、 &lt;code&gt;src&lt;/code&gt; にオブジェクト（複数可） &lt;code&gt;dst&lt;/code&gt; 。複数の &lt;code&gt;src&lt;/code&gt; オブジェクトを指定できます。元のオブジェクトを保持したい場合は、空のオブジェクトをターゲットとして渡すことにより、オブジェクトを保持できます： &lt;code&gt;var object = angular.extend({}, object1, object2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed06ca00010de70fa6e3ffdb999c3f9e5c99bcb6" translate="yes" xml:space="preserve">
          <source>External AngularJS resources</source>
          <target state="translated">外部のAngularJSリソース</target>
        </trans-unit>
        <trans-unit id="be313f8149a2d30f8327ee70864cf3d4946285a6" translate="yes" xml:space="preserve">
          <source>External Resources</source>
          <target state="translated">外部リソース</target>
        </trans-unit>
        <trans-unit id="39ad1c4756a089e469b5ec792fe50629bec8336f" translate="yes" xml:space="preserve">
          <source>Extract the contents of the element where the directive appears and make it available to the directive. The contents are compiled and provided to the directive as a &lt;strong&gt;transclusion function&lt;/strong&gt;. See the &lt;a href=&quot;%24compile#transclusion.html&quot;&gt;Transclusion&lt;/a&gt; section below.</source>
          <target state="translated">ディレクティブが出現する要素のコンテンツを抽出し、ディレクティブで使用できるようにします。内容はコンパイルされ、&lt;strong&gt;トランスクルージョン関数&lt;/strong&gt;としてディレクティブに提供され&lt;strong&gt;ます&lt;/strong&gt;。下記の&lt;a href=&quot;%24compile#transclusion.html&quot;&gt;トランスクルージョンの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="e47b9b1021034a56b7d5f70d92d0481524e78f69" translate="yes" xml:space="preserve">
          <source>Factory</source>
          <target state="translated">Factory</target>
        </trans-unit>
        <trans-unit id="3156b346a064c1db3b4dfdc8e539af534a00f477" translate="yes" xml:space="preserve">
          <source>Factory Methods</source>
          <target state="translated">ファクトリーメソッド</target>
        </trans-unit>
        <trans-unit id="ef4319d2d02cf8972a8e4e597c5b497d7352cc3d" translate="yes" xml:space="preserve">
          <source>Factory Recipe</source>
          <target state="translated">ファクトリーレシピ</target>
        </trans-unit>
        <trans-unit id="c8e6696140d2e75575a027e3db926b81e7fa86b8" translate="yes" xml:space="preserve">
          <source>Factory and Service are the most commonly used recipes. The only difference between them is that the Service recipe works better for objects of a custom type, while the Factory can produce JavaScript primitives and functions.</source>
          <target state="translated">Factory と Service は最も一般的に使用されるレシピです。これらの間の唯一の違いは、FactoryがJavaScriptのプリミティブや関数を生成できるのに対し、Serviceレシピはカスタムタイプのオブジェクトに対してよりよく機能するということです。</target>
        </trans-unit>
        <trans-unit id="028dd1450ba58561838de3f298fd05498d14e273" translate="yes" xml:space="preserve">
          <source>Factory function for creating new instance of an animation.</source>
          <target state="translated">アニメーションの新しいインスタンスを作成するためのファクトリー関数です。</target>
        </trans-unit>
        <trans-unit id="3ee6fd00a202d032c40a78907b76870f53db49dc" translate="yes" xml:space="preserve">
          <source>Factory function for creating new instance of directives.</source>
          <target state="translated">ディレクティブの新しいインスタンスを作成するためのファクトリー関数です。</target>
        </trans-unit>
        <trans-unit id="00b5e72ae89de1590849f21e6c25c0567db4d3f8" translate="yes" xml:space="preserve">
          <source>Factory function for creating new instance of filter.</source>
          <target state="translated">フィルタの新規インスタンスを作成するためのファクトリ関数です。</target>
        </trans-unit>
        <trans-unit id="cc3812a493330e545d9923589baae8e606e23d7f" translate="yes" xml:space="preserve">
          <source>Factory function used to create XMLHttpRequest objects.</source>
          <target state="translated">XMLHttpRequestオブジェクトを作成するためのファクトリー関数です。</target>
        </trans-unit>
        <trans-unit id="66507c8df90678391bccbb22d7912a1e54a7b768" translate="yes" xml:space="preserve">
          <source>Factory that constructs &lt;a href=&quot;../type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; objects and gives access to them.</source>
          <target state="translated">&lt;a href=&quot;../type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;オブジェクトを構築し、それらにアクセスできるようにするファクトリ。</target>
        </trans-unit>
        <trans-unit id="6a2e0291c6da34749a8ac6df7b544977c583fc48" translate="yes" xml:space="preserve">
          <source>Factory that constructs &lt;a href=&quot;type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; objects and gives access to them.</source>
          <target state="translated">&lt;a href=&quot;type/%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;オブジェクトを構築し、それらにアクセスできるようにするファクトリ。</target>
        </trans-unit>
        <trans-unit id="33ad5a927dac4ab275ae4ea2e1b605163a18a5a6" translate="yes" xml:space="preserve">
          <source>Failed interpolated expressions in &lt;code&gt;ng-href&lt;/code&gt; attributes can easily go unnoticed. We can decorate &lt;code&gt;ngHref&lt;/code&gt; to warn us of those conditions.</source>
          <target state="translated">&lt;code&gt;ng-href&lt;/code&gt; 属性の補間式が失敗すると、簡単に気付かれなくなる可能性があります。 &lt;code&gt;ngHref&lt;/code&gt; を装飾して、これらの条件を警告することができます。</target>
        </trans-unit>
        <trans-unit id="022a478813680131790030507e1c1390d5280b3b" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the &lt;a href=&quot;../../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24http&quot;&gt;$ httpサービス&lt;/a&gt;を使用するアプリケーションのエンドツーエンドのテストまたはバックエンドなしの開発に適した偽のHTTPバックエンド実装。</target>
        </trans-unit>
        <trans-unit id="576115681ace0f2ae10133aafeaa28843f3bceae" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the &lt;a href=&quot;../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ng/service/%24http&quot;&gt;$ httpサービス&lt;/a&gt;を使用するアプリケーションのエンドツーエンドのテストまたはバックエンドなしの開発に適した偽のHTTPバックエンド実装。</target>
        </trans-unit>
        <trans-unit id="b961aa07954a84612068135eb6d91115ca7b9b12" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for end-to-end testing or backend-less development of applications that use the &lt;a href=&quot;ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ng/service/%24http&quot;&gt;$ httpサービス&lt;/a&gt;を使用するアプリケーションのエンドツーエンドのテストまたはバックエンドなしの開発に適した偽のHTTPバックエンド実装。</target>
        </trans-unit>
        <trans-unit id="2bea11d5d7c3b57fb31b4af107d8e23ff5f192ac" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for unit testing applications that use the &lt;a href=&quot;../../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../ng/service/%24http&quot;&gt;$ httpサービス&lt;/a&gt;を使用する単体テストアプリケーションに適した偽のHTTPバックエンド実装。</target>
        </trans-unit>
        <trans-unit id="dc58c413dd761b834fc17ee464cbf2c2b1de608e" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for unit testing applications that use the &lt;a href=&quot;../ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../ng/service/%24http&quot;&gt;$ httpサービス&lt;/a&gt;を使用する単体テストアプリケーションに適した偽のHTTPバックエンド実装。</target>
        </trans-unit>
        <trans-unit id="0f28b305a959cfe601c149a9dfacea0ea1a23943" translate="yes" xml:space="preserve">
          <source>Fake HTTP backend implementation suitable for unit testing applications that use the &lt;a href=&quot;ng/service/%24http&quot;&gt;$http service&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ng/service/%24http&quot;&gt;$ httpサービス&lt;/a&gt;を使用する単体テストアプリケーションに適した偽のHTTPバックエンド実装。</target>
        </trans-unit>
        <trans-unit id="2b6546af28f173c1cc2dec94a741c3e78cbdbce9" translate="yes" xml:space="preserve">
          <source>Fallback for legacy browsers</source>
          <target state="translated">レガシーブラウザのフォールバック</target>
        </trans-unit>
        <trans-unit id="28db5b5a50621fb409af99bca4f8b752427e4a5c" translate="yes" xml:space="preserve">
          <source>Feature &amp;amp; Bug Tracker</source>
          <target state="translated">機能とバグ追跡</target>
        </trans-unit>
        <trans-unit id="37565aacce4ed29b047384a80a69fe751d32457a" translate="yes" xml:space="preserve">
          <source>Features / Recipe type</source>
          <target state="translated">特徴 レシピの種類</target>
        </trans-unit>
        <trans-unit id="04e7c6a718bae0ab2d3f26efc985083798ff0736" translate="yes" xml:space="preserve">
          <source>Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.</source>
          <target state="translated">また、トランジションとキーフレームを組み合わせたり、同じ要素に他のCSSクラスを適用したりすることも可能です。</target>
        </trans-unit>
        <trans-unit id="5c17b605508aeec026cd4b0eba633087d6e85345" translate="yes" xml:space="preserve">
          <source>Feel free to use other structural directives such as ng-if and ng-switch to further control what messages are active and when. Be careful, if you place ng-message on the same element as these structural directives, AngularJS may not be able to determine if a message is active or not. Therefore it is best to place the ng-message on a child element of the structural directive.</source>
          <target state="translated">ng-ifやng-switchのような他の構造ディレクティブを自由に使って、いつどのメッセージがアクティブかをさらに制御してください。注意してほしいのは、ng-messageをこれらの構造ディレクティブと同じ要素に配置すると、AngularJSはメッセージがアクティブかどうかを判断できなくなる可能性があるということです。そのため、構造ディレクティブの子要素にng-messageを配置するのがベストです。</target>
        </trans-unit>
        <trans-unit id="b5c660cb22aa8077dd6a3d7e39e98d1eba6cd24e" translate="yes" xml:space="preserve">
          <source>Fetches, compiles and includes an external HTML fragment.</source>
          <target state="translated">外部の HTML フラグメントを取得、コンパイル、インクルードします。</target>
        </trans-unit>
        <trans-unit id="d7decf1aa22b02ae8abf9a96849ee423eee838e4" translate="yes" xml:space="preserve">
          <source>Filter</source>
          <target state="translated">Filter</target>
        </trans-unit>
        <trans-unit id="958cb2148933330b690b4c6657039b40197736c4" translate="yes" xml:space="preserve">
          <source>Filter components in ng</source>
          <target state="translated">ngのフィルタ成分</target>
        </trans-unit>
        <trans-unit id="313a96c8d6aa3fcf071911deb5c09c4a10f87451" translate="yes" xml:space="preserve">
          <source>Filter components in ngSanitize</source>
          <target state="translated">ngSanitize のフィルタコンポーネント</target>
        </trans-unit>
        <trans-unit id="0fa8c3951ddd4bf377d1a463b75966dd0eab1fcd" translate="yes" xml:space="preserve">
          <source>Filter name - this must be a valid AngularJS expression identifier</source>
          <target state="translated">フィルタ名-有効なAngularJS式の識別子でなければなりません。</target>
        </trans-unit>
        <trans-unit id="590dca26d3697ff206c7510b4a1ea098ac9d1127" translate="yes" xml:space="preserve">
          <source>Filter output &amp;mdash; Use &lt;a href=&quot;filter&quot;&gt;AngularJS filters&lt;/a&gt; instead.</source>
          <target state="translated">出力のフィルター&amp;mdash; 代わりに&lt;a href=&quot;filter&quot;&gt;AngularJSフィルターを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="96e578211aa295317cf257310712fa28ccd8f6c6" translate="yes" xml:space="preserve">
          <source>Filters</source>
          <target state="translated">Filters</target>
        </trans-unit>
        <trans-unit id="699dd39da1d524706c0ac40e80676a65a7ee3d75" translate="yes" xml:space="preserve">
          <source>Filters are just functions which transform input to an output. However filters need to be Dependency Injected. To achieve this a filter definition consists of a factory function which is annotated with dependencies and is responsible for creating a filter function.</source>
          <target state="translated">フィルタは入力を出力に変換する関数にすぎません。しかし、フィルタは依存関係を注入する必要があります。これを実現するためには、フィルタの定義は依存関係でアノテーションされたファクトリ関数で構成され、フィルタ関数の作成を担当します。</target>
        </trans-unit>
        <trans-unit id="4f123f5fc885990f073d8e875ec587859f544592" translate="yes" xml:space="preserve">
          <source>Filters are used for formatting data displayed to the user.</source>
          <target state="translated">フィルタは、ユーザーに表示されるデータをフォーマットするために使用されます。</target>
        </trans-unit>
        <trans-unit id="529dad0d0ff38bfbf459af3aac0d7bf3af26d043" translate="yes" xml:space="preserve">
          <source>Filters can be applied to expressions in view templates using the following syntax:</source>
          <target state="translated">フィルタは、以下の構文を使用してビューテンプレートの式に適用することができます。</target>
        </trans-unit>
        <trans-unit id="b0c6a437ea6f5579b59312d1da2316b3e28c48c6" translate="yes" xml:space="preserve">
          <source>Filters can be applied to the result of another filter. This is called &quot;chaining&quot; and uses the following syntax:</source>
          <target state="translated">フィルタは、別のフィルタの結果に適用することができます。これは「連鎖」と呼ばれ、次のような構文を使用します。</target>
        </trans-unit>
        <trans-unit id="55335aa85bcb3866e73d19fd2d724a8e66a43b7f" translate="yes" xml:space="preserve">
          <source>Filters format the value of an expression for display to the user. They can be used in view templates, controllers or services. AngularJS comes with a collection of &lt;a href=&quot;../api/ng/filter&quot;&gt;built-in filters&lt;/a&gt;, but it is easy to define your own as well.</source>
          <target state="translated">フィルターは、ユーザーに表示する式の値をフォーマットします。ビューテンプレート、コントローラー、またはサービスで使用できます。AngularJSには&lt;a href=&quot;../api/ng/filter&quot;&gt;組み込みのフィルターの&lt;/a&gt;コレクションが付属していますが、独自のフィルターを定義することも簡単です。</target>
        </trans-unit>
        <trans-unit id="682562f1b49ae6b0a648c1ac925de5d406869964" translate="yes" xml:space="preserve">
          <source>Filters may have arguments. The syntax for this is</source>
          <target state="translated">フィルタは引数を持つことができます。そのための構文は</target>
        </trans-unit>
        <trans-unit id="30c736d62b49c588e1fe0f61717e96ddba143772" translate="yes" xml:space="preserve">
          <source>Filters that are marked as &lt;code&gt;$stateful&lt;/code&gt; are also executed on each $digest. See &lt;a href=&quot;filter#stateful-filters.html&quot;&gt;Stateful filters&lt;/a&gt; for more information. Note that no AngularJS core filters are $stateful.</source>
          <target state="translated">&lt;code&gt;$stateful&lt;/code&gt; としてマークされているフィルターは、各$ digestでも実行されます。詳細については、&lt;a href=&quot;filter#stateful-filters.html&quot;&gt;ステートフルフィルター&lt;/a&gt;を参照してください。AngularJSコアフィルターは$ statefulではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="66c30abd8d699d84caba4d7a205c80691b2213c7" translate="yes" xml:space="preserve">
          <source>Finally, &lt;strong&gt;the blacklist overrides the whitelist&lt;/strong&gt; and has the final say.</source>
          <target state="translated">最後に&lt;strong&gt;、ブラックリストはホワイトリストをオーバーライドし&lt;/strong&gt;、最終決定権を持っています。</target>
        </trans-unit>
        <trans-unit id="3b6d818fbadda9b37e12f8c2201c1880d5bffeaf" translate="yes" xml:space="preserve">
          <source>Finally, Jasmine provides matchers which let you make assertions:</source>
          <target state="translated">最後に、Jasmineはアサーションを行うためのマッターを提供しています。</target>
        </trans-unit>
        <trans-unit id="b20b914a19775c7d6d718aa11a19eb2c2aea25c1" translate="yes" xml:space="preserve">
          <source>Finally, in an attempt to simplify things, if a predicate returns an object as the extracted value for an item, &lt;code&gt;orderBy&lt;/code&gt; will try to convert that object to a primitive value, before passing it to the comparator. The following rules govern the conversion:</source>
          <target state="translated">最後に、物事を簡略化するために、述語がオブジェクトの抽出された値としてオブジェクトを返す場合、 &lt;code&gt;orderBy&lt;/code&gt; はそのオブジェクトをプリミティブ値に変換してから、コンパレータに渡します。次のルールが変換を管理します。</target>
        </trans-unit>
        <trans-unit id="07f4fb01f5ca9fb0f54a74c5ff4ac147e27960d5" translate="yes" xml:space="preserve">
          <source>Finally, load the module in your application by adding it as a dependent module:</source>
          <target state="translated">最後に、依存モジュールとして追加することで、アプリケーションにモジュールをロードします。</target>
        </trans-unit>
        <trans-unit id="fdccbab2920c960c12560765b2c4dd6408e9e441" translate="yes" xml:space="preserve">
          <source>Find out more information about each directive by reading the &lt;a href=&quot;../guide/accessibility&quot;&gt;ngAria Developer Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../guide/accessibility&quot;&gt;ngAria開発者ガイドを&lt;/a&gt;読んで、各ディレクティブの詳細を確認してください。</target>
        </trans-unit>
        <trans-unit id="ffa9aa79cbd2923d9b3db7b608c702e52b23423e" translate="yes" xml:space="preserve">
          <source>Finds links in text input and turns them into html links. Supports &lt;code&gt;http/https/ftp/sftp/mailto&lt;/code&gt; and plain email address links.</source>
          <target state="translated">テキスト入力でリンクを検索し、それらをHTMLリンクに変換します。 &lt;code&gt;http/https/ftp/sftp/mailto&lt;/code&gt; およびプレーンな電子メールアドレスリンクをサポートします。</target>
        </trans-unit>
        <trans-unit id="b477acda5b9a9fa11e6ec90588718df5fca3ceb9" translate="yes" xml:space="preserve">
          <source>Fire up a screen reader such as VoiceOver or NVDA to check for ARIA support. &lt;a href=&quot;http://webaim.org/articles/screenreader_testing/&quot;&gt;Helpful screen reader tips.&lt;/a&gt;</source>
          <target state="translated">VoiceOverやNVDAなどのスクリーンリーダーを起動して、ARIAサポートを確認します。&lt;a href=&quot;http://webaim.org/articles/screenreader_testing/&quot;&gt;役立つスクリーンリーダーのヒント。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="255e96fff7006defdcfa0768091004d2cadf02d1" translate="yes" xml:space="preserve">
          <source>First create an AngularJS module that will hold the service definition. (The empty array passed as the second parameter means that this module does not depend on any other modules.)</source>
          <target state="translated">まず、サービス定義を保持するAngularJSモジュールを作成します。(2番目のパラメータとして渡される空の配列は、このモジュールが他のモジュールに依存しないことを意味します)。</target>
        </trans-unit>
        <trans-unit id="d323989dc2db49f0060887626146a6c49dae68b2" translate="yes" xml:space="preserve">
          <source>First let's talk about the &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;API for registering directives&lt;/a&gt;. Much like controllers, directives are registered on modules. To register a directive, you use the &lt;code&gt;module.directive&lt;/code&gt; API. &lt;code&gt;module.directive&lt;/code&gt; takes the &lt;a href=&quot;directive#matching-directives.html&quot;&gt;normalized&lt;/a&gt; directive name followed by a &lt;strong&gt;factory function.&lt;/strong&gt; This factory function should return an object with the different options to tell &lt;code&gt;$compile&lt;/code&gt; how the directive should behave when matched.</source>
          <target state="translated">まず、&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;ディレクティブを登録するため&lt;/a&gt;のAPIについて説明します。コントローラーのように、ディレクティブはモジュールに登録されます。ディレクティブを登録するには、 &lt;code&gt;module.directive&lt;/code&gt; API を使用します。 &lt;code&gt;module.directive&lt;/code&gt; は、&lt;a href=&quot;directive#matching-directives.html&quot;&gt;正規化された&lt;/a&gt;ディレクティブ名に続いて&lt;strong&gt;ファクトリ関数を&lt;/strong&gt;取り&lt;strong&gt;ます。&lt;/strong&gt;このファクトリー関数は、ディレクティブが一致したときのディレクティブの動作を &lt;code&gt;$compile&lt;/code&gt; に指示するために、さまざまなオプションを持つオブジェクトを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="ae0317278d634cdf9897fb0dfd8c37d7e85a15db" translate="yes" xml:space="preserve">
          <source>First, download the file:</source>
          <target state="translated">まず、ファイルをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="4eed0a516dc6dad6334d232395f61bdc71c7a4f5" translate="yes" xml:space="preserve">
          <source>First, get the file:</source>
          <target state="translated">まず、ファイルを取得します。</target>
        </trans-unit>
        <trans-unit id="9c40c3b47461dae52bbb2ce1715c3e7c4122872e" translate="yes" xml:space="preserve">
          <source>First, there is a new JavaScript file that contains a &lt;a href=&quot;controller&quot;&gt;controller&lt;/a&gt;. More accurately, the file specifies a constructor function that will be used to create the actual controller instance. The purpose of controllers is to expose variables and functionality to expressions and directives.</source>
          <target state="translated">まず、&lt;a href=&quot;controller&quot;&gt;コントローラー&lt;/a&gt;を含む新しいJavaScriptファイルがあります。より正確には、ファイルは実際のコントローラーインスタンスの作成に使用されるコンストラクター関数を指定します。コントローラーの目的は、変数と機能を式とディレクティブに公開することです。</target>
        </trans-unit>
        <trans-unit id="77d9204eade0f099f5e0ab2bbd55d4646d3a83bf" translate="yes" xml:space="preserve">
          <source>Flickering when using ngHide to toggle between elements</source>
          <target state="translated">ngHide を使用して要素間の切り替えを行う際にちらつきが発生する</target>
        </trans-unit>
        <trans-unit id="b5ab32c1bf51cc481c9ab3c08fe93a1b77113b2e" translate="yes" xml:space="preserve">
          <source>Flickering when using ngShow to toggle between elements</source>
          <target state="translated">ngShow を使用して要素間の切り替えを行うとフリッカーが発生する</target>
        </trans-unit>
        <trans-unit id="dd43887b63ddf9f9facc6f00c39c0b0cb59061d5" translate="yes" xml:space="preserve">
          <source>Flushes all currently pending tasks and executes the corresponding callbacks.</source>
          <target state="translated">現在保留中のすべてのタスクをフラッシュし、対応するコールバックを実行します。</target>
        </trans-unit>
        <trans-unit id="a90504300f4ff98f08eb7ca5fb07f8b7ddb64a04" translate="yes" xml:space="preserve">
          <source>Flushes pending requests using the trained responses. Requests are flushed in the order they were made, but it is also possible to skip one or more requests (for example to have them flushed later). This is useful for simulating scenarios where responses arrive from the server in any order.</source>
          <target state="translated">訓練されたレスポンスを使用して、保留中のリクエストをフラッシュします。リクエストは実行された順にフラッシュされますが、1つ以上のリクエストをスキップすることも可能です (例えば、後でフラッシュさせるなど)。これは、サーバからのレスポンスが任意の順番で届くシナリオをシミュレートするのに便利です。</target>
        </trans-unit>
        <trans-unit id="638b971934a555c5935d2b23812b0728737ef511" translate="yes" xml:space="preserve">
          <source>Flushes the queue of pending tasks.</source>
          <target state="translated">保留中のタスクのキューをフラッシュします。</target>
        </trans-unit>
        <trans-unit id="8fccbd9b557140b0032b7f8e325d55f44d855fc4" translate="yes" xml:space="preserve">
          <source>Flushing HTTP requests</source>
          <target state="translated">HTTP リクエストをフラッシュする</target>
        </trans-unit>
        <trans-unit id="a9fc15bcc3e40c2b04001a849fdf3aa1b08d270c" translate="yes" xml:space="preserve">
          <source>Follow &lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;this link&lt;/a&gt; for a description of the items allowed in this array.</source>
          <target state="translated">この配列で許可されている項目の説明については、&lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;このリンク&lt;/a&gt;をクリックしてください。</target>
        </trans-unit>
        <trans-unit id="094d6476ce6c9b2413458a029d80353731b269a4" translate="yes" xml:space="preserve">
          <source>Following the AngularJS expression, you would denote the plural extension syntax by the &lt;code&gt;, plural,&lt;/code&gt; syntax element. The spaces there are optional.</source>
          <target state="translated">AngularJS式に続いて &lt;code&gt;, plural,&lt;/code&gt; 構文要素で複数形拡張構文を示します。スペースはオプションです。</target>
        </trans-unit>
        <trans-unit id="77b5d91136a3bc63a58e377a55c5cfbbe4b179c4" translate="yes" xml:space="preserve">
          <source>For CSS that's safe to source into the application. Currently unused. Feel free to use it in your own directives.</source>
          <target state="translated">アプリケーションにソースを出しても大丈夫なCSSの場合。現在は未使用です。独自のディレクティブで自由に使ってください。</target>
        </trans-unit>
        <trans-unit id="93453f79c27232e1015010a01e85d73371266175" translate="yes" xml:space="preserve">
          <source>For HTML that's safe to source into the application. The &lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtml&lt;/a&gt; directive uses this context for bindings. If an unsafe value is encountered and the &lt;a href=&quot;../../ngsanitize&quot;&gt;$sanitize&lt;/a&gt; module is present this will sanitize the value instead of throwing an error.</source>
          <target state="translated">アプリケーションへのソースとして安全なHTMLの場合。&lt;a href=&quot;../directive/ngbindhtml&quot;&gt;ngBindHtmlの&lt;/a&gt;ディレクティブは、バインディングのために、このコンテキストを使用しています。安全でない値が検出され、&lt;a href=&quot;../../ngsanitize&quot;&gt;$ sanitize&lt;/a&gt;モジュールが存在する場合、これはエラーをスローする代わりに値を無害化します。</target>
        </trans-unit>
        <trans-unit id="26c9ca3b2c358ad13d5820190c1ba8d9939ab41e" translate="yes" xml:space="preserve">
          <source>For JavaScript that is safe to execute in your application's context. Currently unused. Feel free to use it in your own directives.</source>
          <target state="translated">アプリケーションのコンテキストで実行しても安全なJavaScriptの場合。現在は未使用です。独自のディレクティブで自由に使ってください。</target>
        </trans-unit>
        <trans-unit id="c53dc4f36928109e16191d24a777b2f91435bd6c" translate="yes" xml:space="preserve">
          <source>For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application. Examples include &lt;code&gt;ng-include&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; / &lt;code&gt;ngSrc&lt;/code&gt; bindings for tags other than &lt;code&gt;IMG&lt;/code&gt; (e.g. &lt;code&gt;IFRAME&lt;/code&gt;, &lt;code&gt;OBJECT&lt;/code&gt;, etc.)</source>
          <target state="translated">リンクとしてたどることが安全であるだけでなく、そのコンテンツもアプリケーションに含めることが安全であるURLの場合。例には、 &lt;code&gt;IMG&lt;/code&gt; 以外のタグの &lt;code&gt;ng-include&lt;/code&gt; 、 &lt;code&gt;src&lt;/code&gt; / &lt;code&gt;ngSrc&lt;/code&gt; バインディングが含まれます（例： &lt;code&gt;IFRAME&lt;/code&gt; 、 &lt;code&gt;OBJECT&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="679d8901367dd69ff1b551c6d19359134975c76f" translate="yes" xml:space="preserve">
          <source>For URLs that are safe to follow as links. Is automatically converted from string by sanitizing when needed. Note that &lt;code&gt;$sce.URL&lt;/code&gt; makes a stronger statement about the URL than &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; does and therefore contexts requiring values trusted for &lt;code&gt;$sce.URL&lt;/code&gt; can be used anywhere that values trusted for &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; are required.</source>
          <target state="translated">リンクとして安全にたどることができるURLの場合。必要に応じてサニタイズすることにより、文字列から自動的に変換されます。なお、 &lt;code&gt;$sce.URL&lt;/code&gt; よりURLについての強い声明ます &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; 値を必要とするため、コンテキストがために信頼されないと、 &lt;code&gt;$sce.URL&lt;/code&gt; 値がために、信頼できる場所であればどこでも使用することができます &lt;code&gt;$sce.MEDIA_URL&lt;/code&gt; 必要とされているが。</target>
        </trans-unit>
        <trans-unit id="460be5bd6859be623406a9b95efc4d427c933c3d" translate="yes" xml:space="preserve">
          <source>For URLs that are safe to render as media. Is automatically converted from string by sanitizing when needed.</source>
          <target state="translated">メディアとしてレンダリングしても安全なURLの場合。必要に応じてサニタイズすることで自動的に文字列から変換されます。</target>
        </trans-unit>
        <trans-unit id="56a3631774eba60c1d32538706994f443230d184" translate="yes" xml:space="preserve">
          <source>For a full breakdown of each method available on &lt;code&gt;$animate&lt;/code&gt;, see the &lt;a href=&quot;../api/ng/service/%24animate&quot;&gt;API documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$animate&lt;/code&gt; で使用できる各メソッドの詳細については、&lt;a href=&quot;../api/ng/service/%24animate&quot;&gt;APIドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ee537291a987f36791c6713c21d3132becf867bb" translate="yes" xml:space="preserve">
          <source>For a full breakdown of the steps involved during each animation event, refer to the &lt;a href=&quot;../api/ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt; API docs&lt;/a&gt;.</source>
          <target state="translated">各アニメーションイベント中に含まれる手順の詳細については、&lt;a href=&quot;../api/ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; API docsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0c2ee5a6e688447faa7359cb736c719caeff0771" translate="yes" xml:space="preserve">
          <source>For a full breakdown of the steps involved during each animation event, refer to the &lt;a href=&quot;ng/service/%24animate&quot;&gt;&lt;code&gt;$animate&lt;/code&gt; API docs&lt;/a&gt;.</source>
          <target state="translated">各アニメーションイベント中に含まれる手順の詳細については、&lt;a href=&quot;ng/service/%24animate&quot;&gt; &lt;code&gt;$animate&lt;/code&gt; API docsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9eb4e7bb485c4f2c498bc194e7c524491dc3a750" translate="yes" xml:space="preserve">
          <source>For a higher level of abstraction, please check out the &lt;a href=&quot;../../ngresource/service/%24resource&quot;&gt;$resource&lt;/a&gt; service.</source>
          <target state="translated">より高度な抽象化については、&lt;a href=&quot;../../ngresource/service/%24resource&quot;&gt;$ resource&lt;/a&gt;サービスをご覧ください。</target>
        </trans-unit>
        <trans-unit id="d076559b1af0412b2156be6fe715805d27e234d9" translate="yes" xml:space="preserve">
          <source>For an overview of this service and the functionnality it provides in AngularJS, see the main page for &lt;a href=&quot;%24sce&quot;&gt;SCE&lt;/a&gt;. The current page is targeted for developers who need to alter how SCE works in their application, which shouldn't be needed in most cases.</source>
          <target state="translated">このサービスの概要と、AngularJSで提供される機能については、&lt;a href=&quot;%24sce&quot;&gt;SCEの&lt;/a&gt;メインページを参照してください。現在のページは、アプリケーションでのSCEの動作を変更する必要がある開発者を対象としています。これは、ほとんどの場合必要ありません。</target>
        </trans-unit>
        <trans-unit id="b35f9509f0816b491b39c105cf33a4c232d76568" translate="yes" xml:space="preserve">
          <source>For basic examples, how to use &lt;code&gt;ngModel&lt;/code&gt;, see:</source>
          <target state="translated">基本的な例、 &lt;code&gt;ngModel&lt;/code&gt; の使用方法については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="18cb02d5b2d6faa6bcd2abc7c6cf94b02170c3a3" translate="yes" xml:space="preserve">
          <source>For best practices on using &lt;code&gt;ngModel&lt;/code&gt;, see:</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; の使用に関するベストプラクティスについては、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="77d34f60b8e72f532f193ec3320fc033253270d4" translate="yes" xml:space="preserve">
          <source>For browsers that support the HTML5 history API, &lt;code&gt;$location&lt;/code&gt; uses the HTML5 history API to write path and search. If the history API is not supported by a browser, &lt;code&gt;$location&lt;/code&gt; supplies a Hashbang URL. This frees you from having to worry about whether the browser viewing your app supports the history API or not; the &lt;code&gt;$location&lt;/code&gt; service makes this transparent to you.</source>
          <target state="translated">HTML5履歴APIをサポートするブラウザーの場合、 &lt;code&gt;$location&lt;/code&gt; はHTML5履歴APIを使用してパスと検索を記述します。ブラウザで履歴APIがサポートされていない場合、 &lt;code&gt;$location&lt;/code&gt; はハッシュバングURLを提供します。これにより、アプリを表示しているブラウザーが履歴APIをサポートしているかどうかを心配する必要がなくなります。 &lt;code&gt;$location&lt;/code&gt; サービスはあなたに、この透明になります。</target>
        </trans-unit>
        <trans-unit id="667b86f65118c83e9387d50ae6fab23e51925cb5" translate="yes" xml:space="preserve">
          <source>For cases where the attribute name is the same as the value you want to bind to inside the directive's scope, you can use this shorthand syntax:</source>
          <target state="translated">属性名がディレクティブのスコープ内でバインドしたい値と同じである場合には、この短縮構文を使うことができます。</target>
        </trans-unit>
        <trans-unit id="214f9ccc5f52486bf94285f84eb26c0f1f87ae2a" translate="yes" xml:space="preserve">
          <source>For dynamically creating &lt;code&gt;href&lt;/code&gt; attributes for a tags, see the &lt;a href=&quot;nghref&quot;&gt;&lt;code&gt;ngHref&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">タグの &lt;code&gt;href&lt;/code&gt; 属性を動的に作成する方法については、&lt;a href=&quot;nghref&quot;&gt; &lt;code&gt;ngHref&lt;/code&gt; &lt;/a&gt;ディレクティブを参照してください。</target>
        </trans-unit>
        <trans-unit id="d2cb21c62c7124bee8beb4118b76b5e301e11b61" translate="yes" xml:space="preserve">
          <source>For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look like this:</source>
          <target state="translated">例えば、トランスクルージョンとアイソレーテッドスコープを使うディレクティブを考えてみましょう。DOM の階層は次のようになります。</target>
        </trans-unit>
        <trans-unit id="37c999fd77efd0888b9cb38aaca6a3de81ed8a47" translate="yes" xml:space="preserve">
          <source>For example given the following fragment of HTML</source>
          <target state="translated">例えば、次のような HTML の断片があります。</target>
        </trans-unit>
        <trans-unit id="7928c96ad76339cd8a1a495f2757512494975f25" translate="yes" xml:space="preserve">
          <source>For example if we wanted to do a CSS animation for &lt;code&gt;ngHide&lt;/code&gt; then we place an animation on the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class:</source>
          <target state="translated">たとえば、 &lt;code&gt;ngHide&lt;/code&gt; の CSSアニメーションを実行する場合は、 &lt;code&gt;.ng-hide&lt;/code&gt; CSSクラスにアニメーションを配置します。</target>
        </trans-unit>
        <trans-unit id="68db25a901df945b32772fe453b1fa47d47a8252" translate="yes" xml:space="preserve">
          <source>For example if your server needs to return:</source>
          <target state="translated">例えば、サーバーが戻る必要がある場合。</target>
        </trans-unit>
        <trans-unit id="da9cd80863fc9d60fc99be6bca25f3975ab8cf3f" translate="yes" xml:space="preserve">
          <source>For example on *nix, to create an angular.js file that contains localization rules for german locale, you can do the following:</source>
          <target state="translated">例えば、*nixの場合、ドイツ語ロケールのローカライズルールを含むangular.jsファイルを作成するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="e64d608c66f058026befe85feab000c0e8eb56f7" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'&lt;/code&gt; would result in &lt;code&gt;[{id: 'bar'}, {id: 'foo'}]&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'&lt;/code&gt; は &lt;code&gt;[{id: 'bar'}, {id: 'foo'}]&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="8dd342ed97c8f1fdb9f8a8fbf2799eee0ccdcc8c" translate="yes" xml:space="preserve">
          <source>For example, an element acts as a loading spinner. It has an infinite css animation on it, and also an &lt;a href=&quot;../api/ng/directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; directive, for which no animations are defined:</source>
          <target state="translated">たとえば、要素は読み込みスピナーとして機能します。それには無限のcssアニメーションがあり、アニメーションが定義されていない&lt;a href=&quot;../api/ng/directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;ディレクティブもあります。</target>
        </trans-unit>
        <trans-unit id="7cf18d17856b16f1490eddc7ee8f166885da6706" translate="yes" xml:space="preserve">
          <source>For example, considering this template:</source>
          <target state="translated">例えば、このテンプレートを考えてみます。</target>
        </trans-unit>
        <trans-unit id="5c917b642410469c8ea7e90f8a294d625b0e2286" translate="yes" xml:space="preserve">
          <source>For example, given &lt;code&gt;&amp;lt;my-component my-attr=&quot;parentModel&quot;&amp;gt;&lt;/code&gt; and directive definition of &lt;code&gt;scope: { localModel:'&amp;lt;myAttr' }&lt;/code&gt;, then the isolated scope property &lt;code&gt;localModel&lt;/code&gt; will reflect the value of &lt;code&gt;parentModel&lt;/code&gt; on the parent scope. Any changes to &lt;code&gt;parentModel&lt;/code&gt; will be reflected in &lt;code&gt;localModel&lt;/code&gt;, but changes in &lt;code&gt;localModel&lt;/code&gt; will not reflect in &lt;code&gt;parentModel&lt;/code&gt;. There are however two caveats:</source>
          <target state="translated">たとえば、 &lt;code&gt;&amp;lt;my-component my-attr=&quot;parentModel&quot;&amp;gt;&lt;/code&gt; と &lt;code&gt;scope: { localModel:'&amp;lt;myAttr' }&lt;/code&gt; ディレクティブ定義：{localModel： '&amp;lt;myAttr'}を &lt;code&gt;localModel&lt;/code&gt; すると、分離されたスコーププロパティlocalModelは、親スコープの &lt;code&gt;parentModel&lt;/code&gt; の値を反映します。変更 &lt;code&gt;parentModel&lt;/code&gt; はに反映されます &lt;code&gt;localModel&lt;/code&gt; が、変動 &lt;code&gt;localModel&lt;/code&gt; はに反映されません &lt;code&gt;parentModel&lt;/code&gt; 。ただし、2つの注意点があります。</target>
        </trans-unit>
        <trans-unit id="f49496495571ad1faf93be95dab230558d27e175" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;mode.rewriteLinks&lt;/code&gt; is set to &lt;code&gt;'internal-link'&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;mode.rewriteLinks&lt;/code&gt; が &lt;code&gt;'internal-link'&lt;/code&gt; に設定されている場合：</target>
        </trans-unit>
        <trans-unit id="c8160364ec09deefcb004bae9314f54d4f6ba323" translate="yes" xml:space="preserve">
          <source>For example, if an input control is added that is already &lt;code&gt;$dirty&lt;/code&gt; and has &lt;code&gt;$error&lt;/code&gt; properties, calling &lt;code&gt;$setDirty()&lt;/code&gt; and &lt;code&gt;$validate()&lt;/code&gt; afterwards will propagate the state to the parent form.</source>
          <target state="translated">たとえば、すでに &lt;code&gt;$dirty&lt;/code&gt; 、 &lt;code&gt;$error&lt;/code&gt; プロパティを持つ入力コントロールが追加された場合、 &lt;code&gt;$setDirty()&lt;/code&gt; および &lt;code&gt;$validate()&lt;/code&gt; 呼び出すと、状態が親フォームに伝達されます。</target>
        </trans-unit>
        <trans-unit id="4100a3af8d122712b1181599580e9e97e167970c" translate="yes" xml:space="preserve">
          <source>For example, it can be used for specifying the &quot;Accept&quot; header that is sent to the server, when requesting a template.</source>
          <target state="translated">例えば、テンプレートをリクエストする際に、サーバに送信する &quot;Accept &quot;ヘッダを指定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="b6c81880bfa28e2a7d53ec485327343074412001" translate="yes" xml:space="preserve">
          <source>For example, routes like &lt;code&gt;/color/:color/largecode/:largecode*\/edit&lt;/code&gt; will match &lt;code&gt;/color/brown/largecode/code/with/slashes/edit&lt;/code&gt; and extract:</source>
          <target state="translated">たとえば、 &lt;code&gt;/color/:color/largecode/:largecode*\/edit&lt;/code&gt; ようなルートは、 &lt;code&gt;/color/brown/largecode/code/with/slashes/edit&lt;/code&gt; editと一致して抽出します。</target>
        </trans-unit>
        <trans-unit id="1b54425e1ee99911055acc84ab0ce4f407e3493d" translate="yes" xml:space="preserve">
          <source>For example, the following forms are all equivalent and match the &lt;a href=&quot;../api/ng/directive/ngbind&quot;&gt;&lt;code&gt;ngBind&lt;/code&gt;&lt;/a&gt; directive:</source>
          <target state="translated">たとえば、次の形式はすべて同等であり、&lt;a href=&quot;../api/ng/directive/ngbind&quot;&gt; &lt;code&gt;ngBind&lt;/code&gt; &lt;/a&gt;ディレクティブと一致します。</target>
        </trans-unit>
        <trans-unit id="8a1d556c82b4cdccf6ac8ff718e0e8e16f73d570" translate="yes" xml:space="preserve">
          <source>For example, the parameter &lt;code&gt;_myService_&lt;/code&gt; would be resolved as the reference &lt;code&gt;myService&lt;/code&gt;. Since it is available in the function body as &lt;code&gt;_myService_&lt;/code&gt;, we can then assign it to a variable defined in an outer scope.</source>
          <target state="translated">たとえば、パラメーター &lt;code&gt;_myService_&lt;/code&gt; は、参照 &lt;code&gt;myService&lt;/code&gt; として解決されます。関数本体で &lt;code&gt;_myService_&lt;/code&gt; として使用できるため、外部スコープで定義された変数に割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="0c9ab0c654c0f4dd1405a9253a4855d8cd4a37ec" translate="yes" xml:space="preserve">
          <source>For example, the transclude object &lt;code&gt;{ slotA: '?myCustomElement' }&lt;/code&gt; maps &lt;code&gt;&amp;lt;my-custom-element&amp;gt;&lt;/code&gt; elements to the &lt;code&gt;slotA&lt;/code&gt; slot, which can be accessed via the &lt;code&gt;$transclude&lt;/code&gt; function or via the &lt;a href=&quot;../directive/ngtransclude&quot;&gt;&lt;code&gt;ngTransclude&lt;/code&gt;&lt;/a&gt; directive.</source>
          <target state="translated">たとえば、 &lt;code&gt;{ slotA: '?myCustomElement' }&lt;/code&gt; オブジェクト{slotA： '？myCustomElement'}は、 &lt;code&gt;&amp;lt;my-custom-element&amp;gt;&lt;/code&gt; 要素を &lt;code&gt;slotA&lt;/code&gt; スロットにマップします。これは、 &lt;code&gt;$transclude&lt;/code&gt; &lt;a href=&quot;../directive/ngtransclude&quot;&gt; &lt;code&gt;ngTransclude&lt;/code&gt; &lt;/a&gt;関数またはngTranscludeディレクティブを介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="63e8ba7e3633e731a37f59a5f71a0246863d5260" translate="yes" xml:space="preserve">
          <source>For example, these are valid expressions in AngularJS:</source>
          <target state="translated">例えば、これらはAngularJSで有効な式です。</target>
        </trans-unit>
        <trans-unit id="96705da955a8375dd1945d20693b46a51ee66c61" translate="yes" xml:space="preserve">
          <source>For example, to bind to &lt;code&gt;viewBox&lt;/code&gt;, we can write:</source>
          <target state="translated">たとえば、 &lt;code&gt;viewBox&lt;/code&gt; にバインドするには、次のように記述します。</target>
        </trans-unit>
        <trans-unit id="0ccfc76b489a9482967cab3c080c55bf14ba5ead" translate="yes" xml:space="preserve">
          <source>For example, we could fix the example above by instead writing:</source>
          <target state="translated">例えば、上記の例を、代わりに書くことで修正することができます。</target>
        </trans-unit>
        <trans-unit id="e7d01ec6314e26035b376c51a5d51073e752c597" translate="yes" xml:space="preserve">
          <source>For example, you can specify a new &lt;code&gt;update&lt;/code&gt; action that uses the &lt;code&gt;PUT&lt;/code&gt; HTTP verb:</source>
          <target state="translated">たとえば、 &lt;code&gt;PUT&lt;/code&gt; HTTP動詞を使用する新しい &lt;code&gt;update&lt;/code&gt; アクションを指定できます。</target>
        </trans-unit>
        <trans-unit id="24b9b4933809e915effa8985612fb6a246c52bde" translate="yes" xml:space="preserve">
          <source>For example, you should not use interpolation in the value of the &lt;code&gt;style&lt;/code&gt; attribute (e.g. &lt;code&gt;style=&quot;color: {{ 'orange' }}; font-weight: {{ 'bold' }};&quot;&lt;/code&gt;) &lt;strong&gt;and&lt;/strong&gt; at the same time use a directive that changes the content of that attribute, such as &lt;code&gt;ngStyle&lt;/code&gt;.</source>
          <target state="translated">たとえば、あなたがの値で補間を使用すべきではありません &lt;code&gt;style&lt;/code&gt; 属性（例： &lt;code&gt;style=&quot;color: {{ 'orange' }}; font-weight: {{ 'bold' }};&quot;&lt;/code&gt; ）&lt;strong&gt;と&lt;/strong&gt;同じ時間の使用で、 &lt;code&gt;ngStyle&lt;/code&gt; など、その属性のコンテンツを変更するディレクティブ。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="3d34c040e0936e358901f3aa689af5cf27ff974b" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;(name, age) in {'adam':10, 'amalie':12}&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;(name, age) in {'adam':10, 'amalie':12}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed802f940e232dd5f65c3ca8779aee1a29358982" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;album in artist.albums&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;album in artist.albums&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="681d399129810dbe00c67bb783ff5c6fc3cb9abd" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;item in items | filter : x | orderBy : order | limitTo : limit as results track by item.id&lt;/code&gt; .</source>
          <target state="translated">次に例を示し &lt;code&gt;item in items | filter : x | orderBy : order | limitTo : limit as results track by item.id&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3361e3ce4a7b68bb7099adb908017c58b77d7659" translate="yes" xml:space="preserve">
          <source>For example: &lt;code&gt;item in items | filter:x as results&lt;/code&gt; will store the fragment of the repeated items as &lt;code&gt;results&lt;/code&gt;, but only after the items have been processed through the filter.</source>
          <target state="translated">次に例を示し &lt;code&gt;item in items | filter:x as results&lt;/code&gt; 繰り返すアイテムの断片格納する &lt;code&gt;results&lt;/code&gt; 、のみアイテム後フィルタを通して処理されています。</target>
        </trans-unit>
        <trans-unit id="94485d1a8b6086205e13bc75af843d115c8cdeb9" translate="yes" xml:space="preserve">
          <source>For extra convenience, &lt;code&gt;whenRoute&lt;/code&gt; and &lt;code&gt;expectRoute&lt;/code&gt; shortcuts are available. These methods offer colon delimited matching of the url path, ignoring the query string and trailing slashes. This allows declarations similar to how application routes are configured with &lt;code&gt;$routeProvider&lt;/code&gt;. Because these methods convert the definition url to regex, declaration order is important. Combined with query parameter parsing, the following is possible:</source>
          <target state="translated">利便性を &lt;code&gt;whenRoute&lt;/code&gt; ため、whenRouteおよび &lt;code&gt;expectRoute&lt;/code&gt; ショートカットを使用できます。これらのメソッドは、クエリ文字列と末尾のスラッシュを無視して、URLパスのコロン区切りのマッチングを提供します。これにより、 &lt;code&gt;$routeProvider&lt;/code&gt; 使用してアプリケーションルートを構成する方法と同様の宣言が可能になります。これらのメソッドは定義URLを正規表現に変換するため、宣言の順序が重要です。クエリパラメータの解析と組み合わせると、次のことが可能になります。</target>
        </trans-unit>
        <trans-unit id="072be915c36eea0008ba664485e0bec787e012a1" translate="yes" xml:space="preserve">
          <source>For folks with a jQuery background</source>
          <target state="translated">jQueryのバックグラウンドをお持ちの方へ</target>
        </trans-unit>
        <trans-unit id="d4be5a755dc40ef55c3ed316c05fba77165d707c" translate="yes" xml:space="preserve">
          <source>For further information check out the guide on &lt;a href=&quot;../../../guide/directive#matching-directives.html&quot;&gt;Matching Directives&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../guide/directive#matching-directives.html&quot;&gt;マッチングディレクティブに関する&lt;/a&gt;ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="4b43ddc504c929290eacba4d8a365ed1210996ec" translate="yes" xml:space="preserve">
          <source>For historical reasons, this method will also flush non-&lt;code&gt;$timeout&lt;/code&gt; pending tasks, such as &lt;a href=&quot;../../ng/service/%24q&quot;&gt;&lt;code&gt;$q&lt;/code&gt;&lt;/a&gt; promises and tasks scheduled via &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$applyAsync&lt;/a&gt; and &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt;.</source>
          <target state="translated">歴史的な理由により、このメソッドは&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ applyAsync&lt;/a&gt;および&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsyncを&lt;/a&gt;介してスケジュールされた&lt;a href=&quot;../../ng/service/%24q&quot;&gt; &lt;code&gt;$q&lt;/code&gt; &lt;/a&gt; promiseやタスクなど、 &lt;code&gt;$timeout&lt;/code&gt; 保留中のタスクもフラッシュします。</target>
        </trans-unit>
        <trans-unit id="96d5709584b09a9673009d4b874368aa832eb8de" translate="yes" xml:space="preserve">
          <source>For historical reasons, this method will also verify non-&lt;code&gt;$timeout&lt;/code&gt; pending tasks, such as pending &lt;a href=&quot;../../ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; requests, in-progress &lt;a href=&quot;../../ngroute/service/%24route&quot;&gt;&lt;code&gt;$route&lt;/code&gt;&lt;/a&gt; transitions, unresolved &lt;a href=&quot;../../ng/service/%24q&quot;&gt;&lt;code&gt;$q&lt;/code&gt;&lt;/a&gt; promises and tasks scheduled via &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$applyAsync&lt;/a&gt; and &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt;.</source>
          <target state="translated">歴史的な理由により、このメソッドは、&lt;a href=&quot;../../ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt;リクエストの保留、進行中の&lt;a href=&quot;../../ngroute/service/%24route&quot;&gt; &lt;code&gt;$route&lt;/code&gt; &lt;/a&gt;遷移、未解決の&lt;a href=&quot;../../ng/service/%24q&quot;&gt; &lt;code&gt;$q&lt;/code&gt; &lt;/a&gt;プロミス、および&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24applyAsync.html&quot;&gt;$ applyAsync&lt;/a&gt;と&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsyncを&lt;/a&gt;介してスケジュールされたタスクなど、 &lt;code&gt;$timeout&lt;/code&gt; 保留中のタスクも検証します。</target>
        </trans-unit>
        <trans-unit id="e79547ae737496ef4b830c418e98203529ffd5b3" translate="yes" xml:space="preserve">
          <source>For in-depth discussion about DI, see &lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt; at Wikipedia, &lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;Inversion of Control&lt;/a&gt; by Martin Fowler, or read about DI in your favorite software design pattern book.</source>
          <target state="translated">DIの詳細については、Wikipediaの&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt;、Martin Fowlerによる&lt;a href=&quot;http://martinfowler.com/articles/injection.html&quot;&gt;Inversion of Controlを参照&lt;/a&gt;するか、お気に入りのソフトウェア設計パターンブックでDIについて読んでください。</target>
        </trans-unit>
        <trans-unit id="4c4430f0a9c683776764888172731ad0be5f3a21" translate="yes" xml:space="preserve">
          <source>For information on how the compiler works, see the &lt;a href=&quot;../../../guide/compiler&quot;&gt;AngularJS HTML Compiler&lt;/a&gt; section of the Developer Guide.</source>
          <target state="translated">コンパイラーの動作については、開発者ガイドの&lt;a href=&quot;../../../guide/compiler&quot;&gt;AngularJS HTMLコンパイラーの&lt;/a&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="fcbd9cf327acae20f4980fb68635ba5be10e8a9e" translate="yes" xml:space="preserve">
          <source>For instance in a long running Single Page Application (SPA), one user may &quot;log out&quot;, but then another user may access the application without refreshing, in which case all the cached data is still available.</source>
          <target state="translated">例えば、長時間稼働しているシングルページアプリケーション(SPA)では、あるユーザが「ログアウト」しても、別のユーザがリフレッシュせずにアプリケーションにアクセスしても、キャッシュされたデータはすべて利用可能です。</target>
        </trans-unit>
        <trans-unit id="9c5ae6d931fb112afe199ee277a04174d9d1b69e" translate="yes" xml:space="preserve">
          <source>For instance, the required directive does this to work out if the input has data or not.</source>
          <target state="translated">例えば、入力がデータを持っているかどうかを調べるために、 required ディレクティブはこのようにしています。</target>
        </trans-unit>
        <trans-unit id="1ed68e337042bafa1e8676ab786bd6c545ca56f2" translate="yes" xml:space="preserve">
          <source>For instance, what if we wanted to create a directive that lets a user drag an element?</source>
          <target state="translated">例えば、ユーザが要素をドラッグできるようなディレクティブを作りたいとしたらどうでしょうか?</target>
        </trans-unit>
        <trans-unit id="83e081f1429ea35f9cc98daf2caa2c7900084512" translate="yes" xml:space="preserve">
          <source>For more about how to configure services, see &lt;a href=&quot;../../../guide/providers#provider-recipe.html&quot;&gt;Provider Recipe&lt;/a&gt;.</source>
          <target state="translated">サービスの構成方法の詳細については、&lt;a href=&quot;../../../guide/providers#provider-recipe.html&quot;&gt;プロバイダーのレシピを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3c9f8258461de9d031c72dc478ab759f9f3d6a71" translate="yes" xml:space="preserve">
          <source>For more details on the &lt;code&gt;link&lt;/code&gt; option refer to the &lt;a href=&quot;../api/ng/service/%24compile#-link-.html&quot;&gt;&lt;code&gt;$compile&lt;/code&gt; API&lt;/a&gt; page.</source>
          <target state="translated">&lt;code&gt;link&lt;/code&gt; オプションの詳細については、&lt;a href=&quot;../api/ng/service/%24compile#-link-.html&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; API&lt;/a&gt;ページを参照してください。</target>
        </trans-unit>
        <trans-unit id="03fb612774d8f4c26b5bffdddde2f8da0d09c268" translate="yes" xml:space="preserve">
          <source>For more details, please refer to our &lt;a href=&quot;https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit&quot;&gt;design doc&lt;/a&gt;. You can read more about the ICU MessageFormat syntax at &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat&quot;&gt;Formatting Messages | ICU User Guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://docs.google.com/a/google.com/document/d/1pbtW2yvtmFBikfRrJd8VAsabiFkKezmYZ_PbgdjQOVU/edit&quot;&gt;設計ドキュメント&lt;/a&gt;を参照してください。ICU MessageFormat構文の詳細については、&lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat&quot;&gt;メッセージのフォーマット| ICUユーザーガイド&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f6b5d56555aab13e3ab69162ff339401d9009f51" translate="yes" xml:space="preserve">
          <source>For more examples, and an in-depth guide, see the &lt;a href=&quot;../../../guide/component&quot;&gt;component guide&lt;/a&gt;.</source>
          <target state="translated">その他の例と詳細なガイドについては、&lt;a href=&quot;../../../guide/component&quot;&gt;コンポーネントガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="e45ef233283f4eb561fb40a1c85a858803109abf" translate="yes" xml:space="preserve">
          <source>For more information about how AngularJS filters work, and how to create your own filters, see &lt;a href=&quot;../../../guide/filter&quot;&gt;Filters&lt;/a&gt; in the AngularJS Developer Guide.</source>
          <target state="translated">AngularJSが作業をフィルタリングし、独自のフィルタを作成する方法方法の詳細については、&lt;a href=&quot;../../../guide/filter&quot;&gt;フィルタ&lt;/a&gt; AngularJS開発者ガイドを。</target>
        </trans-unit>
        <trans-unit id="b5c7cb088f3bf1b4252226980a33761384c56cfe" translate="yes" xml:space="preserve">
          <source>For more information on Protractor, view &lt;a href=&quot;http://angular.github.io/protractor/#/getting-started&quot;&gt;getting started&lt;/a&gt; or the &lt;a href=&quot;http://angular.github.io/protractor/#/api&quot;&gt;api docs&lt;/a&gt;.</source>
          <target state="translated">分度器の詳細について&lt;a href=&quot;http://angular.github.io/protractor/#/getting-started&quot;&gt;は&lt;/a&gt;、「はじめに」または&lt;a href=&quot;http://angular.github.io/protractor/#/api&quot;&gt;APIドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="f7d9777dd9e23921be5e65fe03cbf4547e45948c" translate="yes" xml:space="preserve">
          <source>For more information please visit &lt;a href=&quot;../api/ng/service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ngsanitize/service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../api/ng/service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../api/ngsanitize/service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt;アクセスしてください。</target>
        </trans-unit>
        <trans-unit id="5007e5f43b46ae511f7cfe86c43883e38fb85306" translate="yes" xml:space="preserve">
          <source>For more information please visit &lt;a href=&quot;https://www.whitehatsec.com/blog/web-storage-security/&quot;&gt;Web Storage Security&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://www.whitehatsec.com/blog/web-storage-security/&quot;&gt;Web Storage Security&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="17050d011e437da353406dbb3de303d540a80ce8" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;../../../guide/%24location&quot;&gt;Developer Guide: Using $location&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../guide/%24location&quot;&gt;開発者ガイド：$ locationの使用を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="d42a33c1c8d9f173d6a9033c03f236de6cab9c91" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;../../../guide/bootstrap&quot;&gt;Bootstrap guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../../../guide/bootstrap&quot;&gt;ブートストラップガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="84f28113af9b7c7d485ded6f76a10650aebf1bfa" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;di#using-strict-dependency-injection.html&quot;&gt;DI Guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;di#using-strict-dependency-injection.html&quot;&gt;DIガイドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9ec0f18a27efe3a5bbaaa7c9a76fdead7442a493" translate="yes" xml:space="preserve">
          <source>For more on dependencies, see the &lt;a href=&quot;di&quot;&gt;dependency injection&lt;/a&gt; docs.</source>
          <target state="translated">依存関係の詳細については、&lt;a href=&quot;di&quot;&gt;依存関係注入の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ae1dd7c814f6a02ea749e951d697e01de287e16d" translate="yes" xml:space="preserve">
          <source>For more on the &lt;code&gt;restrict&lt;/code&gt; property, see the &lt;a href=&quot;../api/ng/service/%24compile#directive-definition-object.html&quot;&gt;API docs&lt;/a&gt;.</source>
          <target state="translated">詳細については &lt;code&gt;restrict&lt;/code&gt; プロパティを参照してください&lt;a href=&quot;../api/ng/service/%24compile#directive-definition-object.html&quot;&gt;APIドキュメントを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="08deef231a5f13117b873e36e123085e74358098" translate="yes" xml:space="preserve">
          <source>For more see the docs pages on &lt;a href=&quot;../api/ng/provider/%24compileprovider#commentDirectivesEnabled.html&quot;&gt;&lt;code&gt;$compileProvider.commentDirectivesEnabled&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/provider/%24compileprovider#cssClassDirectivesEnabled.html&quot;&gt;&lt;code&gt;$compileProvider.cssClassDirectivesEnabled&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../api/ng/provider/%24compileprovider#commentDirectivesEnabled.html&quot;&gt; &lt;code&gt;$compileProvider.commentDirectivesEnabled&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../api/ng/provider/%24compileprovider#cssClassDirectivesEnabled.html&quot;&gt; &lt;code&gt;$compileProvider.cssClassDirectivesEnabled&lt;/code&gt; &lt;/a&gt;ドキュメントページを参照してください。</target>
        </trans-unit>
        <trans-unit id="1b9e3aa3cc39fa5b8b3356d069b3b85b223b9d68" translate="yes" xml:space="preserve">
          <source>For more see the docs pages on &lt;a href=&quot;../api/ng/provider/%24compileprovider#debugInfoEnabled.html&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/function/angular.reloadwithdebuginfo&quot;&gt;&lt;code&gt;angular.reloadWithDebugInfo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../api/ng/provider/%24compileprovider#debugInfoEnabled.html&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../api/ng/function/angular.reloadwithdebuginfo&quot;&gt; &lt;code&gt;angular.reloadWithDebugInfo&lt;/code&gt; の&lt;/a&gt;ドキュメントページを参照してください。</target>
        </trans-unit>
        <trans-unit id="fb0970fb80040dd5e4119122a4b3d870ad0ab13b" translate="yes" xml:space="preserve">
          <source>For mutations to be properly observed, you should make them only within the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;scope.$apply()&lt;/a&gt;. AngularJS APIs do this implicitly, so no extra &lt;code&gt;$apply&lt;/code&gt; call is needed when doing synchronous work in controllers, or asynchronous work with &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$http&lt;/a&gt;, &lt;a href=&quot;../api/ng/service/%24timeout&quot;&gt;$timeout&lt;/a&gt; or &lt;a href=&quot;../api/ng/service/%24interval&quot;&gt;$interval&lt;/a&gt; services.</source>
          <target state="translated">変異が正しく観察されるようにするには、&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;scope。$ apply（）&lt;/a&gt;内でのみ変異を作成する必要があります。AngularJS APIはこれを暗黙的に行うため、コントローラーで同期作業を行う場合、または&lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$ http&lt;/a&gt;、&lt;a href=&quot;../api/ng/service/%24timeout&quot;&gt;$ timeout、&lt;/a&gt;または&lt;a href=&quot;../api/ng/service/%24interval&quot;&gt;$ interval&lt;/a&gt;サービスで非同期作業を行う場合、追加の &lt;code&gt;$apply&lt;/code&gt; 呼び出しは必要ありません。</target>
        </trans-unit>
        <trans-unit id="70cabd8c2e94395b437f880992a54a0646b1ec62" translate="yes" xml:space="preserve">
          <source>For ngAria to do its magic, simply include the module &lt;code&gt;ngAria&lt;/code&gt; as a dependency. The following directives are supported: &lt;code&gt;ngModel&lt;/code&gt;, &lt;code&gt;ngChecked&lt;/code&gt;, &lt;code&gt;ngReadonly&lt;/code&gt;, &lt;code&gt;ngRequired&lt;/code&gt;, &lt;code&gt;ngValue&lt;/code&gt;, &lt;code&gt;ngDisabled&lt;/code&gt;, &lt;code&gt;ngShow&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt;, &lt;code&gt;ngClick&lt;/code&gt;, &lt;code&gt;ngDblClick&lt;/code&gt;, and &lt;code&gt;ngMessages&lt;/code&gt;.</source>
          <target state="translated">ngAriaが魔法をかけるには、依存関係としてモジュール &lt;code&gt;ngAria&lt;/code&gt; を含めるだけです。次のディレクティブがサポートされています： &lt;code&gt;ngModel&lt;/code&gt; 、 &lt;code&gt;ngChecked&lt;/code&gt; 、 &lt;code&gt;ngReadonly&lt;/code&gt; 、 &lt;code&gt;ngRequired&lt;/code&gt; 、 &lt;code&gt;ngValue&lt;/code&gt; 、 &lt;code&gt;ngDisabled&lt;/code&gt; 、 &lt;code&gt;ngShow&lt;/code&gt; 、 &lt;code&gt;ngHide&lt;/code&gt; 、 &lt;code&gt;ngClick&lt;/code&gt; 、 &lt;code&gt;ngDblClick&lt;/code&gt; 、および &lt;code&gt;ngMessages&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7935b6948cbce976a835b91d5bd505582812c0c4" translate="yes" xml:space="preserve">
          <source>For purposes of global error handling, authentication, or any kind of synchronous or asynchronous pre-processing of request or postprocessing of responses, it is desirable to be able to intercept requests before they are handed to the server and responses before they are handed over to the application code that initiated these requests. The interceptors leverage the &lt;a href=&quot;%24q&quot;&gt;promise APIs&lt;/a&gt; to fulfill this need for both synchronous and asynchronous pre-processing.</source>
          <target state="translated">グローバルエラー処理、認証、または要求の同期または非同期の前処理または応答の後処理の目的で、サーバーに渡される前に要求を、渡される前に応答をインターセプトできることが望ましいこれらの要求を開始したアプリケーションコード。インターセプターは、&lt;a href=&quot;%24q&quot;&gt;Promise API&lt;/a&gt;を利用して、同期および非同期の両方の前処理に対するこのニーズを満たします。</target>
        </trans-unit>
        <trans-unit id="b64ebc99af83053596191ba8428a4a73a05f9e05" translate="yes" xml:space="preserve">
          <source>For testing AngularJS applications there are certain tools that you should use that will make testing much easier to set up and run.</source>
          <target state="translated">AngularJSアプリケーションのテストには、テストのセットアップと実行をより簡単にするツールがあります。</target>
        </trans-unit>
        <trans-unit id="a0981365eff2fc36be0abaf1d7aab40944bee960" translate="yes" xml:space="preserve">
          <source>For the best result, the &lt;code&gt;angular.js&lt;/code&gt; script must be loaded in the head section of the html document; alternatively, the css rule above must be included in the external stylesheet of the application.</source>
          <target state="translated">最良の結果を得るには、htmlドキュメントのheadセクションに &lt;code&gt;angular.js&lt;/code&gt; スクリプトをロードする必要があります。または、上記のcssルールをアプリケーションの外部スタイルシートに含める必要があります。</target>
        </trans-unit>
        <trans-unit id="1cbfa677b41097f6715ec9bae88d486586566c4e" translate="yes" xml:space="preserve">
          <source>For the case of HTML, you might use a library, either on the client side, or on the server side, to sanitize unsafe HTML before binding to the value and rendering it in the document.</source>
          <target state="translated">HTMLの場合は、クライアント側でもサーバ側でもライブラリを使って、安全でないHTMLを値にバインドしてドキュメントでレンダリングする前にサニタイズすることがあります。</target>
        </trans-unit>
        <trans-unit id="807df2e76c7472af78eccb593edb0cfe6ff5aaf1" translate="yes" xml:space="preserve">
          <source>For the following examples, we'll use the prefix &lt;code&gt;my&lt;/code&gt; (e.g. &lt;code&gt;myCustomer&lt;/code&gt;).</source>
          <target state="translated">次の例では、接頭辞 &lt;code&gt;my&lt;/code&gt; （例： &lt;code&gt;myCustomer&lt;/code&gt; ）を使用します。</target>
        </trans-unit>
        <trans-unit id="960d746344ec6d94fdf45b4493cec7cf2ec6fcad" translate="yes" xml:space="preserve">
          <source>For the general details about this service in AngularJS, read the main page for &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">AngularJSでのこのサービスの一般的な詳細については、&lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping（SCE）の&lt;/a&gt;メインページを参照してください。</target>
        </trans-unit>
        <trans-unit id="18276b32129c935a3f68b3699c65cc3ed663b628" translate="yes" xml:space="preserve">
          <source>For this reason, AngularJS prevents the default action (form submission to the server) unless the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element has an &lt;code&gt;action&lt;/code&gt; attribute specified.</source>
          <target state="translated">このため、AngularJSは、 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 要素に &lt;code&gt;action&lt;/code&gt; 属性が指定されていない限り、デフォルトのアクション（サーバーへのフォーム送信）を防止します。</target>
        </trans-unit>
        <trans-unit id="59a0dc0f6babb8c929909c5324c52ffba8f70e1b" translate="yes" xml:space="preserve">
          <source>For this reason, AngularJS provides special &lt;code&gt;ng&lt;/code&gt;-prefixed directives for the following boolean attributes: &lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt;&lt;code&gt;disabled&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngrequired&quot;&gt;&lt;code&gt;required&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngselected&quot;&gt;&lt;code&gt;selected&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngchecked&quot;&gt;&lt;code&gt;checked&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/ng/directive/ngreadonly&quot;&gt;&lt;code&gt;readOnly&lt;/code&gt;&lt;/a&gt; , and &lt;a href=&quot;../api/ng/directive/ngopen&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このため、AngularJSは、次のブール属性に対して特別な &lt;code&gt;ng&lt;/code&gt; -prefixedディレクティブを提供しています：&lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt; &lt;code&gt;disabled&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/ngrequired&quot;&gt; &lt;code&gt;required&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/ngselected&quot;&gt; &lt;code&gt;selected&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/ngchecked&quot;&gt; &lt;code&gt;checked&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/ngreadonly&quot;&gt; &lt;code&gt;readOnly&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/ng/directive/ngopen&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3230a2f947a8018219006b3929f539fd927003d2" translate="yes" xml:space="preserve">
          <source>For this, inject a dependency with the name &lt;code&gt;&amp;lt;filterName&amp;gt;Filter&lt;/code&gt; into your controller/service/directive. E.g. a filter called &lt;code&gt;number&lt;/code&gt; is injected by using the dependency &lt;code&gt;numberFilter&lt;/code&gt;. The injected argument is a function that takes the value to format as first argument, and filter parameters starting with the second argument.</source>
          <target state="translated">このため、 &lt;code&gt;&amp;lt;filterName&amp;gt;Filter&lt;/code&gt; という名前の依存関係をコントローラー/サービス/ディレクティブに挿入します。たとえば、依存関係 &lt;code&gt;numberFilter&lt;/code&gt; を使用して、 &lt;code&gt;number&lt;/code&gt; というフィルターを挿入します。注入された引数は、最初の引数としてフォーマットする値を取り、2番目の引数で始まるパラメーターをフィルター処理する関数です。</target>
        </trans-unit>
        <trans-unit id="79c0422145c2571f4818e372784001318ee45548" translate="yes" xml:space="preserve">
          <source>For those elements using ngModel, ngAria will dynamically bind and update the following ARIA attributes (if they have not been explicitly specified by the developer):</source>
          <target state="translated">ngModel を使用している要素に対して、ngAria は以下の ARIA 属性を動的にバインドして更新します(開発者によって明示的に指定されていない場合)。</target>
        </trans-unit>
        <trans-unit id="5364d19c24f92cd90b7c73685bff662a0a4cfa1a" translate="yes" xml:space="preserve">
          <source>For unit testing applications that use &lt;code&gt;$http&lt;/code&gt; service, see &lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$httpBackend mock&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$http&lt;/code&gt; サービスを使用する単体テストアプリケーションについては、&lt;a href=&quot;../../ngmock/service/%24httpbackend&quot;&gt;$ httpBackend mockを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="052fb3b37ae2bbf010c88dd3bc6c08df91652edd" translate="yes" xml:space="preserve">
          <source>Forgiving</source>
          <target state="translated">Forgiving</target>
        </trans-unit>
        <trans-unit id="abc67155e14921e60c9bacfaf13e79f8e7ecfc81" translate="yes" xml:space="preserve">
          <source>Form and controls provide validation services, so that the user can be notified of invalid input before submitting a form. This provides a better user experience than server-side validation alone because the user gets instant feedback on how to correct the error. Keep in mind that while client-side validation plays an important role in providing good user experience, it can easily be circumvented and thus can not be trusted. Server-side validation is still necessary for a secure application.</source>
          <target state="translated">フォームとコントロールは検証サービスを提供し、フォームを送信する前に無効な入力をユーザーに通知することができます。ユーザーはエラーを修正する方法について即座にフィードバックを得ることができるので、サーバーサイドのバリデーションだけで行うよりも優れたユーザーエクスペリエンスを提供します。クライアントサイドバリデーションは良いユーザーエクスペリエンスを提供する上で重要な役割を果たしていますが、簡単に回避することができるため、信頼できないことを覚えておいてください。サーバーサイドの検証は、安全なアプリケーションにはまだ必要です。</target>
        </trans-unit>
        <trans-unit id="1eedca47903886a532d39ee2257b013bc5c557cd" translate="yes" xml:space="preserve">
          <source>Format input &amp;mdash; Use &lt;a href=&quot;forms&quot;&gt;AngularJS form controls&lt;/a&gt; instead.</source>
          <target state="translated">フォーマット入力&amp;mdash; 代わりに&lt;a href=&quot;forms&quot;&gt;AngularJSフォームコントロールを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b9fd294ed8b67f7239254353f7b9ddfee62002f1" translate="yes" xml:space="preserve">
          <source>Format of items in &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist&lt;/a&gt;/&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;Blacklist&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;resourceUrlWhitelist&lt;/a&gt; / &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;Blacklistの&lt;/a&gt;アイテムの形式</target>
        </trans-unit>
        <trans-unit id="8e17b9df66528716e814be197136b7a326516c1c" translate="yes" xml:space="preserve">
          <source>Formats &lt;code&gt;date&lt;/code&gt; to a string based on the requested &lt;code&gt;format&lt;/code&gt;.</source>
          <target state="translated">フォーマットの &lt;code&gt;date&lt;/code&gt; 、要求に基づいて、文字列に &lt;code&gt;format&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb856525f448d550db676ecb20ddcdce2f9183a5" translate="yes" xml:space="preserve">
          <source>Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default symbol for current locale is used.</source>
          <target state="translated">数値を通貨としてフォーマットします (例:$1,234.56)。通貨記号を指定しない場合は、現在のロケールのデフォルト記号を使用します。</target>
        </trans-unit>
        <trans-unit id="69675ca3093ae5e95c7f23454bbb0ec2a3e3a132" translate="yes" xml:space="preserve">
          <source>Formats a number as text.</source>
          <target state="translated">数値をテキストとしてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="43567c9dea743d47cb7123053dbe369243a548e8" translate="yes" xml:space="preserve">
          <source>Formatted number.</source>
          <target state="translated">フォーマットされた番号。</target>
        </trans-unit>
        <trans-unit id="a511d54043ebc3e9c36c28add78796a0f3f9f424" translate="yes" xml:space="preserve">
          <source>Formatted string or the input if input is not recognized as date/millis.</source>
          <target state="translated">入力がdatemillisとして認識されない場合は、フォーマットされた文字列または入力。</target>
        </trans-unit>
        <trans-unit id="feaca5c695540ca4a17380a6775827911844a0ef" translate="yes" xml:space="preserve">
          <source>Formatters are used to format / convert the &lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt;&lt;code&gt;$modelValue&lt;/code&gt;&lt;/a&gt; for display in the control.</source>
          <target state="translated">フォーマッターは、コントロールに表示する&lt;a href=&quot;ngmodel.ngmodelcontroller#%24modelValue.html&quot;&gt; &lt;code&gt;$modelValue&lt;/code&gt; &lt;/a&gt;をフォーマット/変換するために使用されます。</target>
        </trans-unit>
        <trans-unit id="e6e18ee88ca6b32cea05d0e3080d8f655d9521b6" translate="yes" xml:space="preserve">
          <source>Formatting rules (see Description). If not specified, &lt;code&gt;mediumDate&lt;/code&gt; is used.</source>
          <target state="translated">書式設定ルール（説明を参照）。指定しない場合は、 &lt;code&gt;mediumDate&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="3f0b06a027f8381260596b559c5a0e8d57007109" translate="yes" xml:space="preserve">
          <source>Formatting the value of time and datetime-local</source>
          <target state="translated">時刻とdatetime-localの値の書式設定</target>
        </trans-unit>
        <trans-unit id="4bec9575721b2739ed1e7c56eb6c8471084fcbcf" translate="yes" xml:space="preserve">
          <source>Forms</source>
          <target state="translated">Forms</target>
        </trans-unit>
        <trans-unit id="34e426cd3274227d580489998337e732030d7d3c" translate="yes" xml:space="preserve">
          <source>Free Course</source>
          <target state="translated">フリーコース</target>
        </trans-unit>
        <trans-unit id="b1cc7a14b45bb59084312de228fdaae722b439c3" translate="yes" xml:space="preserve">
          <source>From a testability point of view, the separation of the controller and the view is desirable, because it allows us to test the behavior without being distracted by the rendering details.</source>
          <target state="translated">テスト性の観点からは、コントローラとビューを分離することが望ましいです。</target>
        </trans-unit>
        <trans-unit id="ff161838502e7c8b317b65fb969c906dab1f4586" translate="yes" xml:space="preserve">
          <source>From the perspective of dealing with error handling, deferred and promise APIs are to asynchronous programming what &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;throw&lt;/code&gt; keywords are to synchronous programming.</source>
          <target state="translated">エラー処理を処理する観点から見ると、据え置きAPIとプロミスAPIは非同期プログラミングであり、 &lt;code&gt;try&lt;/code&gt; 、 &lt;code&gt;catch&lt;/code&gt; 、 &lt;code&gt;throw&lt;/code&gt; キーワードは同期プログラミングです。</target>
        </trans-unit>
        <trans-unit id="d73e691376909588e8dda5cc25ad70145db6e2ea" translate="yes" xml:space="preserve">
          <source>Fulfills multiple requests</source>
          <target state="translated">複数のリクエストに対応</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="7e9e8ac7651cc9a1d61043f76ffdf8a16490138a" translate="yes" xml:space="preserve">
          <source>Function components in ng</source>
          <target state="translated">ngの機能構成要素</target>
        </trans-unit>
        <trans-unit id="299be8740244752c39ca3ccf8a970cee133c25c2" translate="yes" xml:space="preserve">
          <source>Function components in ngMock</source>
          <target state="translated">ngMockの関数コンポーネント</target>
        </trans-unit>
        <trans-unit id="c76a84b175d34bf214149af2c9e8f9e13e2e4fcc" translate="yes" xml:space="preserve">
          <source>Function for creating new instance of the service.</source>
          <target state="translated">サービスのインスタンスを新規作成するための関数です。</target>
        </trans-unit>
        <trans-unit id="7090d50b6c70bb19d3d516b59283dff809cdae61" translate="yes" xml:space="preserve">
          <source>Function for which dependent service names need to be retrieved as described above.</source>
          <target state="translated">上記のように依存するサービス名を取得する必要がある関数。</target>
        </trans-unit>
        <trans-unit id="c4ac49e1d1511eed6fbb89bab7baa0e4b33a477d" translate="yes" xml:space="preserve">
          <source>Function that will be called whenever the interpolated value of the attribute changes. See the &lt;a href=&quot;../../../guide/interpolation#how-text-and-attribute-bindings-work.html&quot;&gt;Interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">属性の補間値が変更されるたびに呼び出される関数。詳細については、&lt;a href=&quot;../../../guide/interpolation#how-text-and-attribute-bindings-work.html&quot;&gt;補間ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b463c12a5f308c5c4aafc3e574eff48f177aef97" translate="yes" xml:space="preserve">
          <source>Function that wraps the &lt;code&gt;fn&lt;/code&gt; with all the specified bindings.</source>
          <target state="translated">指定されたすべてのバインディングで &lt;code&gt;fn&lt;/code&gt; をラップする関数。</target>
        </trans-unit>
        <trans-unit id="fca9f3655fbd49d7d73e9fc899dae1611e2d1e66" translate="yes" xml:space="preserve">
          <source>Function to be bound.</source>
          <target state="translated">拘束される関数。</target>
        </trans-unit>
        <trans-unit id="719583f650cbb51ca93d209fd7733efacca091e6" translate="yes" xml:space="preserve">
          <source>Function to call when the event is emitted.</source>
          <target state="translated">イベントが発生したときに呼び出す関数です。</target>
        </trans-unit>
        <trans-unit id="195099197fbc90af0bf8f3534cf2c2ffbe52076f" translate="yes" xml:space="preserve">
          <source>Function which is responsible for resolving or rejecting the newly created promise. The first parameter is a function which resolves the promise, the second parameter is a function which rejects the promise.</source>
          <target state="translated">新しく作成されたプロミスの解決または拒否を行う関数。最初のパラメータはプロミスを解決する関数で、2番目のパラメータはプロミスを拒否する関数です。</target>
        </trans-unit>
        <trans-unit id="dbcc17581b648df6a6e5ecca84fd052cd7f998ad" translate="yes" xml:space="preserve">
          <source>Fundamentals in 60 Minutes (video)</source>
          <target state="translated">60分でわかる基礎知識(ビデオ</target>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="translated">続きを読む</target>
        </trans-unit>
        <trans-unit id="03be4828bd04065e742a929df12bd3febf535195" translate="yes" xml:space="preserve">
          <source>Future route information.</source>
          <target state="translated">今後のルート情報。</target>
        </trans-unit>
        <trans-unit id="4f00f495f1b31beea48aec4250e15a8cb8f378e0" translate="yes" xml:space="preserve">
          <source>Games and GUI editors are examples of applications with intensive and tricky DOM manipulation. These kinds of apps are different from CRUD apps, and as a result are probably not a good fit for AngularJS. In these cases it may be better to use a library with a lower level of abstraction, such as &lt;code&gt;jQuery&lt;/code&gt;.</source>
          <target state="translated">ゲームおよびGUIエディターは、集中的でトリッキーなDOM操作を行うアプリケーションの例です。これらの種類のアプリはCRUDアプリとは異なり、その結果、おそらくAngularJSには適していません。このような場合は、 &lt;code&gt;jQuery&lt;/code&gt; など、抽象度の低いライブラリを使用する方がよい場合があります。</target>
        </trans-unit>
        <trans-unit id="8a754c61c2ced0c5ff79a1827e02c9d643d6d926" translate="yes" xml:space="preserve">
          <source>Gender</source>
          <target state="translated">Gender</target>
        </trans-unit>
        <trans-unit id="022ad2aec8e03d3aeffcc6353469c736894859fc" translate="yes" xml:space="preserve">
          <source>Gender (aka select) Syntax</source>
          <target state="translated">性別(別名セレクト)構文</target>
        </trans-unit>
        <trans-unit id="9239ee2cda84eca4c3440e2a7b50148af67da3d4" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">General</target>
        </trans-unit>
        <trans-unit id="37a13a917db9fd6aaad1b1420d262dd85b0845b4" translate="yes" xml:space="preserve">
          <source>General Learning Resources</source>
          <target state="translated">一般的な学習リソース</target>
        </trans-unit>
        <trans-unit id="fbfff011ffdaef489b35073be8fbf243896fd8d0" translate="yes" xml:space="preserve">
          <source>General Use</source>
          <target state="translated">一般的な使用</target>
        </trans-unit>
        <trans-unit id="ed7feb5b4fe5b0b70af5a852a8c4193e523ae7ea" translate="yes" xml:space="preserve">
          <source>General overview of the API</source>
          <target state="translated">APIの概要</target>
        </trans-unit>
        <trans-unit id="098a776c18aed363a9dd217893658630e8cd72e8" translate="yes" xml:space="preserve">
          <source>General usage</source>
          <target state="translated">一般的な使用法</target>
        </trans-unit>
        <trans-unit id="8245f1469399dc21184c708cfafeb02fe22720e6" translate="yes" xml:space="preserve">
          <source>Get access to a cache object by the &lt;code&gt;cacheId&lt;/code&gt; used when it was created.</source>
          <target state="translated">作成時に使用された &lt;code&gt;cacheId&lt;/code&gt; によってキャッシュオブジェクトへのアクセスを取得します。</target>
        </trans-unit>
        <trans-unit id="e2634d2ab675dfb52782612c8c407712d90ab4ae" translate="yes" xml:space="preserve">
          <source>Get information about all the caches that have been created</source>
          <target state="translated">作成されたすべてのキャッシュの情報を取得する</target>
        </trans-unit>
        <trans-unit id="b7660cf3196f07e0a3ec7d200a945203c052a995" translate="yes" xml:space="preserve">
          <source>Getter and setter methods</source>
          <target state="translated">ゲッターとセッターのメソッド</target>
        </trans-unit>
        <trans-unit id="9633645141a566c014c4723a2e74a10b5b9548d9" translate="yes" xml:space="preserve">
          <source>Getters (calls to methods without parameters) return decoded values for the following methods &lt;code&gt;path()&lt;/code&gt;, &lt;code&gt;search()&lt;/code&gt;, &lt;code&gt;hash()&lt;/code&gt;.</source>
          <target state="translated">ゲッター（パラメーターなしのメソッドの呼び出し）は、次のメソッドのデコードされた値を返します &lt;code&gt;path()&lt;/code&gt; 、 &lt;code&gt;search()&lt;/code&gt; 、 &lt;code&gt;hash()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9a0f73ca6aa746ede1e77153dd3bf5bb16e841ab" translate="yes" xml:space="preserve">
          <source>Getting Help</source>
          <target state="translated">助けを求める</target>
        </trans-unit>
        <trans-unit id="5442e2b64fa09764b9f593867e59a97292c84059" translate="yes" xml:space="preserve">
          <source>GitHub</source>
          <target state="translated">GitHub</target>
        </trans-unit>
        <trans-unit id="125fce7f6e4e46718b4324a9e531f51dac5b5239" translate="yes" xml:space="preserve">
          <source>Gitter</source>
          <target state="translated">Gitter</target>
        </trans-unit>
        <trans-unit id="8f89c3a7b049617c085d0669638c1304642c269d" translate="yes" xml:space="preserve">
          <source>Give your directive the &lt;code&gt;terminal&lt;/code&gt; property and a higher priority than directives that should not be compiled twice. In the example, the compiler will only compile directives which have a priority of 100 or higher.</source>
          <target state="translated">ディレクティブに &lt;code&gt;terminal&lt;/code&gt; プロパティを指定し、2回コンパイルしないでください。この例では、コンパイラーは、優先順位が100以上のディレクティブのみをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="a4944830e9ab64a911c6a61e799488b1d408b662" translate="yes" xml:space="preserve">
          <source>Given a function, the injector can infer the names of the services to inject by examining the function declaration and extracting the parameter names. In the above example, &lt;code&gt;$scope&lt;/code&gt; and &lt;code&gt;greeter&lt;/code&gt; are two services which need to be injected into the function.</source>
          <target state="translated">関数を指定すると、インジェクターは、関数宣言を調べてパラメーター名を抽出することにより、注入するサービスの名前を推測できます。上記の例では、 &lt;code&gt;$scope&lt;/code&gt; と &lt;code&gt;greeter&lt;/code&gt; は、関数に注入する必要がある2つのサービスです。</target>
        </trans-unit>
        <trans-unit id="8e22639ca85295c0d8a371689da6f4b5266c177d" translate="yes" xml:space="preserve">
          <source>Given a template &lt;code&gt;/path/:verb&lt;/code&gt; and parameter &lt;code&gt;{verb: 'greet', salutation: 'Hello'}&lt;/code&gt; results in URL &lt;code&gt;/path/greet?salutation=Hello&lt;/code&gt;.</source>
          <target state="translated">テンプレート &lt;code&gt;/path/:verb&lt;/code&gt; とパラメーター &lt;code&gt;{verb: 'greet', salutation: 'Hello'}&lt;/code&gt; を指定すると、URL &lt;code&gt;/path/greet?salutation=Hello&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="da53969ab67a277a2236b7677eabc9291e416b28" translate="yes" xml:space="preserve">
          <source>Given an expression that starts with &lt;code&gt;::&lt;/code&gt;, when a digest loop is entered and expression is dirty-checked, store the value as V</source>
          <target state="translated">&lt;code&gt;::&lt;/code&gt; で始まる式が指定されている場合、ダイジェストループに入って式がダーティチェックされると、値をVとして保存します。</target>
        </trans-unit>
        <trans-unit id="fd29881d160148e4919339fe869d1ba4998c6ef7" translate="yes" xml:space="preserve">
          <source>Given an object and a security context in which to assign it, returns a value that's safe to use in this context, which was represented by the parameter. To do so, this function either unwraps the safe type it has been given (for instance, a &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt; result), or it might try to sanitize the value given, depending on the context and sanitizer availablility.</source>
          <target state="translated">オブジェクトとそれを割り当てるセキュリティコンテキストを指定すると、このコンテキストで安全に使用できる値を返します。この値はパラメーターで表されていました。そのために、この関数は、指定された安全なタイプ（たとえば、&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;結果）をラップ解除するか、コンテキストとサニタイザーの可用性に応じて、指定された値をサニタイズしようとする場合があります。</target>
        </trans-unit>
        <trans-unit id="9a257da8c321c097fe8fe5cc955c19057fa2bffc" translate="yes" xml:space="preserve">
          <source>Given the following error object for our example (which informs us that the field &lt;code&gt;myField&lt;/code&gt; currently has both the &lt;code&gt;required&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; errors):</source>
          <target state="translated">この例の次のエラーオブジェクトがあるとします（これにより、フィールド &lt;code&gt;myField&lt;/code&gt; には現在、 &lt;code&gt;required&lt;/code&gt; エラーと &lt;code&gt;email&lt;/code&gt; エラーの両方があることが通知されます）。</target>
        </trans-unit>
        <trans-unit id="f9f18e9100167b3cbe391107f9b9896237d584ce" translate="yes" xml:space="preserve">
          <source>Given the nature of &lt;code&gt;ngModelOptions&lt;/code&gt;, the value displayed inside input fields in the view might be different from the value in the actual model. This means that if you update the model you should also invoke &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24rollbackViewValue.html&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt; on the relevant input field in order to make sure it is synchronized with the model and that any debounced action is canceled.</source>
          <target state="translated">&lt;code&gt;ngModelOptions&lt;/code&gt; の性質上、ビューの入力フィールド内に表示される値は、実際のモデルの値と異なる場合があります。これは、モデルを更新する場合、モデルと確実に同期し、デバウンスされたアクションがキャンセルされるように、関連する入力フィールドで&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24rollbackViewValue.html&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt;も呼び出す必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="120a32f853f560c1d2bd012c26941580cd618e1e" translate="yes" xml:space="preserve">
          <source>Given this array of items on the $scope:</source>
          <target state="translated">この配列が$scope上の項目であることを考えると、このようになります。</target>
        </trans-unit>
        <trans-unit id="660a89b0fbdf53826bcc57234ddbd04675201f3d" translate="yes" xml:space="preserve">
          <source>Given this complex combination of CSS classes, styles and options, &lt;code&gt;$animateCss&lt;/code&gt; will figure everything out and make the animation happen.</source>
          <target state="translated">CSSクラス、スタイル、オプションのこの複雑な組み合わせを考えると、 &lt;code&gt;$animateCss&lt;/code&gt; はすべてを理解し、アニメーションを実行します。</target>
        </trans-unit>
        <trans-unit id="f77562ae0f3df5f61f357418891b85a82b5f1b10" translate="yes" xml:space="preserve">
          <source>Google+</source>
          <target state="translated">Google+</target>
        </trans-unit>
        <trans-unit id="99e8c59f379e7741fc044ae1510082583a27eb98" translate="yes" xml:space="preserve">
          <source>Grouping of HTML into reusable components.</source>
          <target state="translated">HTMLを再利用可能なコンポーネントにグループ化する。</target>
        </trans-unit>
        <trans-unit id="3ba448f1c251a3f30a4894252c910f2f06e1790f" translate="yes" xml:space="preserve">
          <source>Grouping related tests within &lt;code&gt;describe&lt;/code&gt; blocks and describing each individual test within an &lt;code&gt;it&lt;/code&gt; call keeps your tests self documenting.</source>
          <target state="translated">関連するテストを &lt;code&gt;describe&lt;/code&gt; ブロック内でグループ化し、 &lt;code&gt;it&lt;/code&gt; 呼び出し内の個々のテストを記述することで、テストを自己文書化できます。</target>
        </trans-unit>
        <trans-unit id="bf073fae640ded81eeb7a4cee70faff4a623c16c" translate="yes" xml:space="preserve">
          <source>Guide</source>
          <target state="translated">Guide</target>
        </trans-unit>
        <trans-unit id="4857fab7166afc1434fd0e5b087340d9d836a21f" translate="yes" xml:space="preserve">
          <source>Guide: Forms</source>
          <target state="translated">ご利用案内 フォーム</target>
        </trans-unit>
        <trans-unit id="082638bfa9b018580d30a942ed8e17ec72bfee8f" translate="yes" xml:space="preserve">
          <source>HTML &lt;code&gt;select&lt;/code&gt; element with AngularJS data-binding.</source>
          <target state="translated">AngularJSデータバインディングを使用したHTML &lt;code&gt;select&lt;/code&gt; 要素。</target>
        </trans-unit>
        <trans-unit id="1ed7cdfdbf49bfaa13fce98fe7cec3a1c300e160" translate="yes" xml:space="preserve">
          <source>HTML Compiler</source>
          <target state="translated">HTML コンパイラ</target>
        </trans-unit>
        <trans-unit id="8103e94886ef5d4fe535735e02a17a98d0a0dda5" translate="yes" xml:space="preserve">
          <source>HTML Sanitization</source>
          <target state="translated">HTMLサニタイズ</target>
        </trans-unit>
        <trans-unit id="956dfc4aa08de7e5a58a5878e750adab8be1a7a5" translate="yes" xml:space="preserve">
          <source>HTML compilation happens in three phases:</source>
          <target state="translated">HTMLのコンパイルは3つのフェーズで行われます。</target>
        </trans-unit>
        <trans-unit id="365711f3aa530a2399266a71af0d94bbd34fb790" translate="yes" xml:space="preserve">
          <source>HTML compiler</source>
          <target state="translated">HTMLコンパイラ</target>
        </trans-unit>
        <trans-unit id="9eb40b7d07d13c87ed32d2291d04e9ac3fc3ab1c" translate="yes" xml:space="preserve">
          <source>HTML has a lot of constructs for formatting the HTML for static documents in a declarative fashion. For example if something needs to be centered, there is no need to provide instructions to the browser how the window size needs to be divided in half so that the center is found, and that this center needs to be aligned with the text's center. Simply add an &lt;code&gt;align=&quot;center&quot;&lt;/code&gt; attribute to any element to achieve the desired behavior. Such is the power of declarative language.</source>
          <target state="translated">HTMLには、静的ドキュメントのHTMLを宣言的な方法でフォーマットするための多くの構成要素があります。たとえば、何かを中央に配置する必要がある場合は、ウィンドウのサイズを半分に分割して中央を見つけ、この中央をテキストの中央に揃える方法をブラウザに指示する必要はありません。要素に &lt;code&gt;align=&quot;center&quot;&lt;/code&gt; 属性を追加するだけで、目的の動作を実現できます。これが宣言型言語の力です。</target>
        </trans-unit>
        <trans-unit id="bd11a5d2ff3115a84c7177fab98a96885225b6f0" translate="yes" xml:space="preserve">
          <source>HTML input element control. When used together with &lt;a href=&quot;directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt;, it provides data-binding, input state control, and validation. Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.</source>
          <target state="translated">HTML入力要素コントロール。&lt;a href=&quot;directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;と一緒に使用すると、データバインディング、入力状態制御、および検証が提供されます。入力コントロールは、HTML5入力タイプに従い、古いブラウザのHTML5検証動作をポリフィルします。</target>
        </trans-unit>
        <trans-unit id="75cd325edf2be9c413b3f9e3b95e9fce9dfbe8ca" translate="yes" xml:space="preserve">
          <source>HTML input element control. When used together with &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt;, it provides data-binding, input state control, and validation. Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.</source>
          <target state="translated">HTML入力要素コントロール。&lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;と一緒に使用すると、データバインディング、入力状態制御、および検証が提供されます。入力コントロールは、HTML5入力タイプに従い、古いブラウザのHTML5検証動作をポリフィルします。</target>
        </trans-unit>
        <trans-unit id="b52ce58ede873fa3ffe8c4f4b95938da98b79e53" translate="yes" xml:space="preserve">
          <source>HTML input.</source>
          <target state="translated">HTMLを入力します。</target>
        </trans-unit>
        <trans-unit id="3002c557c6e602f4fc52a7ef3b7fe2ffd052cecd" translate="yes" xml:space="preserve">
          <source>HTML link rewriting</source>
          <target state="translated">HTMLリンク書き換え</target>
        </trans-unit>
        <trans-unit id="0e0f1476dcc9c91e2471380aac237c3c16762a4f" translate="yes" xml:space="preserve">
          <source>HTML markup that may:</source>
          <target state="translated">可能性のあるHTMLマークアップ。</target>
        </trans-unit>
        <trans-unit id="673e4be38003649fd68400ae693d19b8570e48ea" translate="yes" xml:space="preserve">
          <source>HTML string or DOMElement to be wrapped into jQuery.</source>
          <target state="translated">jQueryにラップするHTML文字列またはDOMElement。</target>
        </trans-unit>
        <trans-unit id="28dfba92f8df7dc9094d96723e46d403afe9cf5f" translate="yes" xml:space="preserve">
          <source>HTML textarea element control with AngularJS data-binding. The data-binding and validation properties of this element are exactly the same as those of the &lt;a href=&quot;directive/input&quot;&gt;input element&lt;/a&gt;.</source>
          <target state="translated">AngularJSデータバインディングによるHTML textarea要素コントロール。この要素のデータバインディングプロパティと検証プロパティは、&lt;a href=&quot;directive/input&quot;&gt;input要素の&lt;/a&gt;プロパティとまったく同じです。</target>
        </trans-unit>
        <trans-unit id="90fae27fbf7cecfb835c5ded77341c01b96b78d4" translate="yes" xml:space="preserve">
          <source>HTML textarea element control with AngularJS data-binding. The data-binding and validation properties of this element are exactly the same as those of the &lt;a href=&quot;input&quot;&gt;input element&lt;/a&gt;.</source>
          <target state="translated">AngularJSデータバインディングによるHTML textarea要素コントロール。この要素のデータバインディングプロパティと検証プロパティは、&lt;a href=&quot;input&quot;&gt;input要素の&lt;/a&gt;プロパティとまったく同じです。</target>
        </trans-unit>
        <trans-unit id="380dca5d29ff8bcbe21b89ea209d96e274ac2a42" translate="yes" xml:space="preserve">
          <source>HTML with additional markup</source>
          <target state="translated">マークアップを追加したHTML</target>
        </trans-unit>
        <trans-unit id="919928d7bcf7b5802913b51423e1f3fc331681f0" translate="yes" xml:space="preserve">
          <source>HTML5 mode</source>
          <target state="translated">HTML5モード</target>
        </trans-unit>
        <trans-unit id="147cce8975179e5500fc1bb079891e026beac7f0" translate="yes" xml:space="preserve">
          <source>HTTP Requests</source>
          <target state="translated">HTTPリクエスト</target>
        </trans-unit>
        <trans-unit id="6e5a031619e754e2aaded2be7edff5361ccb3202" translate="yes" xml:space="preserve">
          <source>HTTP backend used by the &lt;a href=&quot;%24http&quot;&gt;service&lt;/a&gt; that delegates to XMLHttpRequest object or JSONP and deals with browser incompatibilities.</source>
          <target state="translated">XMLHttpRequestオブジェクトまたはJSONPに委任し、ブラウザの非互換性を処理する&lt;a href=&quot;%24http&quot;&gt;サービス&lt;/a&gt;によって使用されるHTTPバックエンド。</target>
        </trans-unit>
        <trans-unit id="0843ce217fdeb5d4a43dd425f0f9a5e92422e97d" translate="yes" xml:space="preserve">
          <source>HTTP backend used by the &lt;a href=&quot;service/%24http&quot;&gt;service&lt;/a&gt; that delegates to XMLHttpRequest object or JSONP and deals with browser incompatibilities.</source>
          <target state="translated">XMLHttpRequestオブジェクトまたはJSONPに委任し、ブラウザの非互換性を処理する&lt;a href=&quot;service/%24http&quot;&gt;サービス&lt;/a&gt;によって使用されるHTTPバックエンド。</target>
        </trans-unit>
        <trans-unit id="11ed26cd0ecb017842889c5368f7817eb65b4c04" translate="yes" xml:space="preserve">
          <source>HTTP headers or function that receives http header object and returns true if the headers match the current definition.</source>
          <target state="translated">HTTP ヘッダまたは http ヘッダオブジェクトを受け取り、現在の定義と一致した場合に真を返す関数。</target>
        </trans-unit>
        <trans-unit id="e9f0ada937e7482930d25244a71bfc57dc18e31b" translate="yes" xml:space="preserve">
          <source>HTTP headers or function that receives http header object and returns true if the headers match the current expectation.</source>
          <target state="translated">HTTP ヘッダまたは http ヘッダオブジェクトを受け取り、ヘッダが現在の期待値と一致した場合に真を返す関数。</target>
        </trans-unit>
        <trans-unit id="4da8efbb95087f4efaddd53fa5a5d02998d8073e" translate="yes" xml:space="preserve">
          <source>HTTP headers.</source>
          <target state="translated">HTTPヘッダ。</target>
        </trans-unit>
        <trans-unit id="69dcbdcaea66e534100430f491b74862af6545a6" translate="yes" xml:space="preserve">
          <source>HTTP method of the request (GET, POST, PUT, ..)</source>
          <target state="translated">リクエストの HTTP メソッド (GET,POST,PUT,...)</target>
        </trans-unit>
        <trans-unit id="e7f701abbb4892632f63163af61f703f4d792e54" translate="yes" xml:space="preserve">
          <source>HTTP method.</source>
          <target state="translated">HTTPメソッドを使用しています。</target>
        </trans-unit>
        <trans-unit id="739b34082ae180864afd2da55be339a290e09a21" translate="yes" xml:space="preserve">
          <source>HTTP request body or function that receives data string and returns true if the data is as expected, or Object if request body is in JSON format.</source>
          <target state="translated">データ文字列を受信し、データが期待通りであればtrueを返すHTTPリクエストボディまたは関数、リクエストボディがJSON形式であればObjectを返します。</target>
        </trans-unit>
        <trans-unit id="d86c6c3cef60e8657176cf9663c203f4df35ae7e" translate="yes" xml:space="preserve">
          <source>HTTP request body or function that receives data string and returns true if the data is as expected.</source>
          <target state="translated">データ文字列を受け取り、データが期待通りであれば真を返すHTTPリクエストボディまたは関数。</target>
        </trans-unit>
        <trans-unit id="b3becea06d0acfa7255eb772d6dcbbb225cf0343" translate="yes" xml:space="preserve">
          <source>HTTP url or function that receives a url and returns true if the url matches the current definition.</source>
          <target state="translated">HTTP url または url を受け取り、url が現在の定義と一致した場合に true を返す関数。</target>
        </trans-unit>
        <trans-unit id="f52106e31df4471f850e4bc7609166aea45564e9" translate="yes" xml:space="preserve">
          <source>HTTP url or function that receives a url and returns true if the url matches the current expectation.</source>
          <target state="translated">HTTP url あるいは url を受け取り、url が現在の期待値と一致した場合に true を返す関数。</target>
        </trans-unit>
        <trans-unit id="99507adf96330288819643c1bf1b9641131bf84a" translate="yes" xml:space="preserve">
          <source>HTTP url or function that receives an url and returns true if the url matches the current expectation.</source>
          <target state="translated">HTTP url あるいは url を受け取り、url が現在の期待値と一致した場合に true を返す関数。</target>
        </trans-unit>
        <trans-unit id="ce3a987c846205d185fc2edc4fe91e7d5c5a336c" translate="yes" xml:space="preserve">
          <source>HTTP url string that supports colon param matching.</source>
          <target state="translated">コロンパラメータのマッチングをサポートする HTTP url 文字列。</target>
        </trans-unit>
        <trans-unit id="f9d5d6116a9799462a571a9c71dd9f844beb5ac1" translate="yes" xml:space="preserve">
          <source>Hash with custom settings that should extend the default &lt;code&gt;$resourceProvider&lt;/code&gt; behavior. The supported options are:</source>
          <target state="translated">デフォルトの &lt;code&gt;$resourceProvider&lt;/code&gt; 動作を拡張するカスタム設定のハッシュ。サポートされているオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="23feba264c938cd5a816b433a94ce03d183ea1f6" translate="yes" xml:space="preserve">
          <source>Hash with declaration of custom actions that will be available in addition to the default set of resource actions (see below). If a custom action has the same key as a default action (e.g. &lt;code&gt;save&lt;/code&gt;), then the default action will be &lt;em&gt;overwritten&lt;/em&gt;, and not extended.</source>
          <target state="translated">デフォルトのリソースアクションのセットに加えて利用できるカスタムアクションの宣言を含むハッシュ（以下を参照）。カスタムアクションがデフォルトアクションと同じキーを持っている場合（例： &lt;code&gt;save&lt;/code&gt; ）、デフォルトアクションは&lt;em&gt;上書きされ&lt;/em&gt;、拡張されません。</target>
        </trans-unit>
        <trans-unit id="cfaff8179045261bcc9e2cdcac0ab24460c6b352" translate="yes" xml:space="preserve">
          <source>Hashbang and HTML5 Modes</source>
          <target state="translated">ハッシュバングと HTML5 モード</target>
        </trans-unit>
        <trans-unit id="1b0dd8a962c1421c7d52d29272d65b7f22a06a41" translate="yes" xml:space="preserve">
          <source>Hashbang mode</source>
          <target state="translated">ハッシュバングモード</target>
        </trans-unit>
        <trans-unit id="152790ca6a4f5a814b879804ca53c1db52354436" translate="yes" xml:space="preserve">
          <source>Hashbang mode (default mode)</source>
          <target state="translated">ハッシュバングモード(デフォルトモード</target>
        </trans-unit>
        <trans-unit id="dc65de69cf1204a0d8f6a65f23b5cbdc59c7f6f2" translate="yes" xml:space="preserve">
          <source>Helper directive that makes it possible to create control groups inside a &lt;a href=&quot;directive/form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; directive. These &quot;child forms&quot; can be used, for example, to determine the validity of a sub-group of controls.</source>
          <target state="translated">&lt;a href=&quot;directive/form&quot;&gt; &lt;code&gt;form&lt;/code&gt; &lt;/a&gt;ディレクティブ内にコントロールグループを作成できるようにするヘルパーディレクティブ。これらの「子フォーム」は、たとえば、コントロールのサブグループの有効性を判断するために使用できます。</target>
        </trans-unit>
        <trans-unit id="15d728397a26dc6b863f20082f5868fb493c86c9" translate="yes" xml:space="preserve">
          <source>Helper directive that makes it possible to create control groups inside a &lt;a href=&quot;form&quot;&gt;&lt;code&gt;form&lt;/code&gt;&lt;/a&gt; directive. These &quot;child forms&quot; can be used, for example, to determine the validity of a sub-group of controls.</source>
          <target state="translated">&lt;a href=&quot;form&quot;&gt; &lt;code&gt;form&lt;/code&gt; &lt;/a&gt;ディレクティブ内にコントロールグループを作成できるようにするヘルパーディレクティブ。これらの「子フォーム」は、たとえば、コントロールのサブグループの有効性を判断するために使用できます。</target>
        </trans-unit>
        <trans-unit id="eace3f9f2323bbf0fc546742d11cd0621ca25ee4" translate="yes" xml:space="preserve">
          <source>Here a some examples of creating constants:</source>
          <target state="translated">定数の作成例を紹介します。</target>
        </trans-unit>
        <trans-unit id="5e4c893051b4707f0e5b1249e7e81bc432fd4fb1" translate="yes" xml:space="preserve">
          <source>Here are a few examples of how you would usually define components:</source>
          <target state="translated">ここでは、通常コンポーネントを定義する方法の例をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="22cfeeec8cbcab5dc8c92c408c3caa8cfedfcb3d" translate="yes" xml:space="preserve">
          <source>Here are some examples of creating value services.</source>
          <target state="translated">ここでは、価値あるサービスを生み出すための事例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="2572f0dbd83dbe653e314f42e4e17d11e1e31488" translate="yes" xml:space="preserve">
          <source>Here is a directive which makes any element draggable. Notice the &lt;code&gt;draggable&lt;/code&gt; attribute on the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">以下は、要素をドラッグ可能にするディレクティブです。 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 要素の &lt;code&gt;draggable&lt;/code&gt; 属性に注意してください。</target>
        </trans-unit>
        <trans-unit id="62a4417e4f911e91ec77edfd2357c79ffed4f432" translate="yes" xml:space="preserve">
          <source>Here is a simple form for editing user contact information. Adding, removing, clearing, and greeting are methods declared on the controller (see source tab). These methods can easily be called from the AngularJS markup. Any changes to the data are automatically reflected in the View without the need for a manual update.</source>
          <target state="translated">ユーザーの連絡先情報を編集するための簡単なフォームです。追加、削除、クリア、挨拶はコントローラ上で宣言されたメソッドです(ソースタブ参照)。これらのメソッドはAngularJSのマークアップから簡単に呼び出すことができます。データに変更があった場合、手動で更新しなくても自動的にViewに反映されます。</target>
        </trans-unit>
        <trans-unit id="34352a17a8a9151e3590aa194b3aa02094f7b560" translate="yes" xml:space="preserve">
          <source>Here is a tab pane example built from components:</source>
          <target state="translated">ここでは、コンポーネントから構築されたタブペインの例を示します。</target>
        </trans-unit>
        <trans-unit id="1d069503fae353633f357af5e3a2b89070c3ed31" translate="yes" xml:space="preserve">
          <source>Here is an example of a simple test:</source>
          <target state="translated">簡単なテストの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="50474d9c5b7e0f79dfee63bb5d1c04123879a0cc" translate="yes" xml:space="preserve">
          <source>Here is an example of loading a bundle of modules, with a utility method called &lt;code&gt;getScript&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;getScript&lt;/code&gt; というユーティリティメソッドを使用して、モジュールのバンドルをロードする例を示します。</target>
        </trans-unit>
        <trans-unit id="5880ff63c8f632463ae878d297d5b56bfbfbdc24" translate="yes" xml:space="preserve">
          <source>Here is an example of manually initializing AngularJS:</source>
          <target state="translated">AngularJSを手動で初期化する例です。</target>
        </trans-unit>
        <trans-unit id="8c04abad1ef15232b7d33e41e2d2c33485dde663" translate="yes" xml:space="preserve">
          <source>Here is an example of registering a service</source>
          <target state="translated">サービスの登録例です。</target>
        </trans-unit>
        <trans-unit id="5e759d842c3481da215b710834ed2ca1a95f87df" translate="yes" xml:space="preserve">
          <source>Here is an example of registering a service using &lt;a href=&quot;%24provide#service.html&quot;&gt;$provide.service(class)&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;%24provide#service.html&quot;&gt;$ provide.service（class）&lt;/a&gt;を使用してサービスを登録する例を次に示します。</target>
        </trans-unit>
        <trans-unit id="1a29f24b6a2342f727b445e40478dc68dee15260" translate="yes" xml:space="preserve">
          <source>Here is an example of using the injector service:</source>
          <target state="translated">インジェクタサービスの利用例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="c6658c30a573eda1a06af398c5b3162bb3669f48" translate="yes" xml:space="preserve">
          <source>Here is an example of what the template definition for the &lt;code&gt;dialog&lt;/code&gt; widget may look like.</source>
          <target state="translated">以下は、 &lt;code&gt;dialog&lt;/code&gt; ウィジェットのテンプレート定義がどのように見えるかの例です。</target>
        </trans-unit>
        <trans-unit id="efb89522d8e99553f459d6f83b6cca9501f43b08" translate="yes" xml:space="preserve">
          <source>Here is the explanation of how the &lt;code&gt;Hello world&lt;/code&gt; example achieves the data-binding effect when the user enters text into the text field.</source>
          <target state="translated">ここでは、ユーザーがテキストフィールドにテキストを入力したときに、 &lt;code&gt;Hello world&lt;/code&gt; の例がデータバインディング効果をどのように実現するかについて説明します。</target>
        </trans-unit>
        <trans-unit id="dddbe54fb40a9da471f8ece2fdb9b87dab4acbf1" translate="yes" xml:space="preserve">
          <source>Here is what a secure configuration for this scenario might look like:</source>
          <target state="translated">このシナリオの安全な設定は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e3c1dfdb750e0373bfa4303b6efe8294d9bfd88d" translate="yes" xml:space="preserve">
          <source>Here we decorate the &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$log&lt;/a&gt; service to convert warnings to errors by intercepting calls to &lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt;$log.warn()&lt;/a&gt;.</source>
          <target state="translated">ここでは、&lt;a href=&quot;../../ng/service/%24log#error.html&quot;&gt;$ log.warn（）の&lt;/a&gt;呼び出しをインターセプトすることにより、警告をエラーに変換する&lt;a href=&quot;../../ng/service/%24log&quot;&gt;$ log&lt;/a&gt;サービスを装飾します。</target>
        </trans-unit>
        <trans-unit id="e815a124520499322845f10059e60c7b540cfceb" translate="yes" xml:space="preserve">
          <source>Here we pass an array whose elements consist of a list of strings (the names of the dependencies) followed by the function itself.</source>
          <target state="translated">ここでは、要素が文字列のリスト (依存関係の名前)の後に関数自身が続く配列を渡します。</target>
        </trans-unit>
        <trans-unit id="68c7479252208403902f6aa1ed6ea1da9bebafb9" translate="yes" xml:space="preserve">
          <source>Here we've seen the main use cases for directives. Each of these samples acts as a good starting point for creating your own directives.</source>
          <target state="translated">ここでは、ディレクティブの主な使用例を見てきました。これらのサンプルはそれぞれ、独自のディレクティブを作成するための良い出発点となります。</target>
        </trans-unit>
        <trans-unit id="60e05935ab8bb78195f78bcb2800807eccda1fc0" translate="yes" xml:space="preserve">
          <source>Here you can see two &lt;code&gt;$location&lt;/code&gt; instances that show the difference between &lt;strong&gt;Html5 mode&lt;/strong&gt; and &lt;strong&gt;Html5 Fallback mode&lt;/strong&gt;. Note that to simulate different levels of browser support, the &lt;code&gt;$location&lt;/code&gt; instances are connected to a fakeBrowser service, which you don't have to set up in actual projects.</source>
          <target state="translated">ここでは、&lt;strong&gt;Html5モード&lt;/strong&gt;と&lt;strong&gt;Html5フォールバックモードの&lt;/strong&gt;違いを示す2つの &lt;code&gt;$location&lt;/code&gt; インスタンスを確認でき&lt;strong&gt;ます&lt;/strong&gt;。ブラウザーサポートのさまざまなレベルをシミュレートするために、 &lt;code&gt;$location&lt;/code&gt; インスタンスは、実際のプロジェクトで設定する必要のないfakeBrowserサービスに接続されていることに注意してください。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="85689592e66dcddab07a025f0a7c7fa876676daf" translate="yes" xml:space="preserve">
          <source>Here's an example directive declared with a Directive Definition Object:</source>
          <target state="translated">ここでは、ディレクティブ定義オブジェクトで宣言されたディレクティブの例を示します。</target>
        </trans-unit>
        <trans-unit id="98ab52376054b0ae6a09ea8fc36acb184a3cb5d2" translate="yes" xml:space="preserve">
          <source>Here's an example of a binding in a privileged context:</source>
          <target state="translated">ここでは、特権的なコンテキストでのバインディングの例を示します。</target>
        </trans-unit>
        <trans-unit id="bc027285afdb7e2491e24d412648e4821006ff8a" translate="yes" xml:space="preserve">
          <source>Here's an example where you might see flickering:</source>
          <target state="translated">ちらつきが見られる例を挙げてみます。</target>
        </trans-unit>
        <trans-unit id="7c311fcba1d54c9fe55032b814cda6cb881db5cd" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;EXPRESSION&lt;/code&gt; is an AngularJS expression that evaluates to the gender of the person that is used to select the message that should be displayed.</source>
          <target state="translated">ここで、 &lt;code&gt;EXPRESSION&lt;/code&gt; はAngularJS式であり、表示するメッセージの選択に使用される人の性別を評価します。</target>
        </trans-unit>
        <trans-unit id="e23108d1c2e1059fd8d1e90bb0a080a1d96f5b9d" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;NUMERIC_EXPRESSION&lt;/code&gt; is an expression that evaluates to a numeric value based on which the displayed message should change based on pluralization rules.</source>
          <target state="translated">ここで、 &lt;code&gt;NUMERIC_EXPRESSION&lt;/code&gt; は、複数の規則に基づいて、表示されるメッセージがどのように変化するかに基づいて評価される数値です。</target>
        </trans-unit>
        <trans-unit id="73eb7dfae55511c85ac87046d8ad655d3b07d514" translate="yes" xml:space="preserve">
          <source>History state object that was before it was changed.</source>
          <target state="translated">変更前の履歴状態オブジェクト。</target>
        </trans-unit>
        <trans-unit id="b5c1c159a3e483ad357e69c27c87a0816f3f5eba" translate="yes" xml:space="preserve">
          <source>Holds the list of modules which the injector will load before the current module is loaded.</source>
          <target state="translated">現在のモジュールがロードされる前にインジェクタがロードするモジュールのリストを保持します。</target>
        </trans-unit>
        <trans-unit id="c20a5f818418ae5d1d96d68d2a880b61a688edbd" translate="yes" xml:space="preserve">
          <source>How directives are compiled</source>
          <target state="translated">ディレクティブのコンパイル方法</target>
        </trans-unit>
        <trans-unit id="b4be41c74e5a460177988dde73728bedd08a211a" translate="yes" xml:space="preserve">
          <source>How do I use animations in my own directives?</source>
          <target state="translated">自分のディレクティブでアニメーションを使うにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="683b2a3eb2b6d989ff0fc60d2e062d97e39208a2" translate="yes" xml:space="preserve">
          <source>How does AngularJS support i18n/l10n?</source>
          <target state="translated">AngularJSはどのようにi18nl10nをサポートしていますか?</target>
        </trans-unit>
        <trans-unit id="e21860bf37328b97ebb0ddd904694c78e4a7b382" translate="yes" xml:space="preserve">
          <source>How does it work?</source>
          <target state="translated">どうやって使うのか?</target>
        </trans-unit>
        <trans-unit id="88ed97b08c81463ee06f53f3b6c1779c600aa1c6" translate="yes" xml:space="preserve">
          <source>How is the element transported?</source>
          <target state="translated">元素はどのようにして運ばれるのですか?</target>
        </trans-unit>
        <trans-unit id="8faafbf047891a8907eb94c858a2397c59b48b6b" translate="yes" xml:space="preserve">
          <source>How is the morphing handled?</source>
          <target state="translated">モーフィングはどのように処理されているのでしょうか?</target>
        </trans-unit>
        <trans-unit id="f0b1fc1ac088c2160c01191d7d56a0bae6f8e3aa" translate="yes" xml:space="preserve">
          <source>How text and attribute bindings work</source>
          <target state="translated">テキストと属性バインディングの仕組み</target>
        </trans-unit>
        <trans-unit id="6348c07b83ad0bb6dae1ec6cd1b77c21662b9a62" translate="yes" xml:space="preserve">
          <source>How the Options are handled</source>
          <target state="translated">オプションの取り扱い方法</target>
        </trans-unit>
        <trans-unit id="2a6cb3a378b1a04b05ce40f114a5850c30af8933" translate="yes" xml:space="preserve">
          <source>How the string representation is computed</source>
          <target state="translated">文字列表現の計算方法</target>
        </trans-unit>
        <trans-unit id="4aa425ac030122afe10e7f53638d920844d71819" translate="yes" xml:space="preserve">
          <source>How they work</source>
          <target state="translated">どのように動作するか</target>
        </trans-unit>
        <trans-unit id="6e13b2dba241833a9f148d24533b2b4f0e74bb53" translate="yes" xml:space="preserve">
          <source>How to (selectively) enable, disable and skip animations</source>
          <target state="translated">アニメーションの有効化、無効化、スキップを(選択的に)行う方法</target>
        </trans-unit>
        <trans-unit id="a25fb8be7987e971198c72036edd9325e925e49a" translate="yes" xml:space="preserve">
          <source>How to benefit from one-time binding</source>
          <target state="translated">ワンタイムバインディングの恩恵を受ける方法</target>
        </trans-unit>
        <trans-unit id="cd8d1af145e22f4071b3803ea34db2257342448d" translate="yes" xml:space="preserve">
          <source>How to use decorators</source>
          <target state="translated">デコレーターの使い方</target>
        </trans-unit>
        <trans-unit id="c2a2f74412612724a85fc7c3904fcb3d54c23855" translate="yes" xml:space="preserve">
          <source>How would you ensure that every place that used these types of bindings was bound to a value that was sanitized by your library (or returned as safe for rendering by your server?) How can you ensure that you didn't accidentally delete the line that sanitized the value, or renamed some properties/fields and forgot to update the binding to the sanitized value?</source>
          <target state="translated">このようなタイプのバインディングを使用するすべての場所が、ライブラリによってサニタイズされた値にバインドされていることをどのようにして保証しますか (あるいは、サーバによってレンダリングに安全な値として返されていることを保証しますか)?</target>
        </trans-unit>
        <trans-unit id="69e8e5e39cfe987166eee61d96837365193ccc8b" translate="yes" xml:space="preserve">
          <source>However &lt;code&gt;isolated&lt;/code&gt; scope creates a new problem: if a transcluded DOM is a child of the widget isolated scope then it will not be able to bind to anything. For this reason the transcluded scope is a child of the original scope, before the widget created an isolated scope for its local variables. This makes the transcluded and widget isolated scope siblings.</source>
          <target state="translated">ただし、 &lt;code&gt;isolated&lt;/code&gt; スコープは新しい問題を作成します。トランスクルードされたDOMがウィジェットの分離されたスコープの子である場合、何にもバインドできなくなります。このため、ウィジェットがローカル変数の分離スコープを作成する前は、変換されたスコープは元のスコープの子です。これにより、トランスクルードされたウィジェットとウィジェットがスコープの兄弟に分離されます。</target>
        </trans-unit>
        <trans-unit id="60975c6582a2823450029e613dcd8a25e14ebad5" translate="yes" xml:space="preserve">
          <source>However it's more likely that you'll just use &lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt; or &lt;a href=&quot;angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; to simplify this process for you.</source>
          <target state="translated">ただし、このプロセスを簡略化するには、&lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt;または&lt;a href=&quot;angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt;を使用する可能性が高くなります。</target>
        </trans-unit>
        <trans-unit id="999f598a92635af8c6759e6c95a25535ddb1aa15" translate="yes" xml:space="preserve">
          <source>However this method will not work with JavaScript minifiers/obfuscators because of how they rename parameters.</source>
          <target state="translated">しかし、このメソッドはJavaScriptのminifiersobfuscatorsではパラメータの名前を変更するため、動作しません。</target>
        </trans-unit>
        <trans-unit id="74b78a2717429ba3b6055f58ec7371c056ceb4fc" translate="yes" xml:space="preserve">
          <source>However, &lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;custom elements&lt;/a&gt; often use custom properties to hold data, and &lt;code&gt;ngProp&lt;/code&gt; can be used to provide input to these custom elements.</source>
          <target state="translated">ただし、&lt;a href=&quot;https://developer.mozilla.org/docs/Web/Web_Components/Using_custom_elements&quot;&gt;カスタム要素は&lt;/a&gt;データを保持するためにカスタムプロパティを使用することが多く、 &lt;code&gt;ngProp&lt;/code&gt; を使用してこれらのカスタム要素に入力を提供できます。</target>
        </trans-unit>
        <trans-unit id="9ef1218d8c362088f0bcdd7920f20b4f50be4419" translate="yes" xml:space="preserve">
          <source>However, if the method is used programmatically, for example by adding dynamically created controls, or controls that have been previously removed without destroying their corresponding DOM element, it's the developers responsibility to make sure the current state propagates to the parent form.</source>
          <target state="translated">しかし、動的に作成されたコントロールを追加したり、対応する DOM 要素を破棄せずに以前に削除されたコントロールを追加したりするなど、プログラム的にこのメソッドが使われる場合、現在の状態が親フォームに伝搬することを確認するのは開発者の責任です。</target>
        </trans-unit>
        <trans-unit id="7833f0d3d950db315e3b6d2099d681792715c7c0" translate="yes" xml:space="preserve">
          <source>However, including generic messages may not be useful enough to match all input fields, therefore, &lt;code&gt;ngMessages&lt;/code&gt; provides the ability to override messages defined in the remote template by redefining them within the directive container.</source>
          <target state="translated">ただし、一般的なメッセージを含めることは、すべての入力フィールドを照合するには十分でない場合があるため、 &lt;code&gt;ngMessages&lt;/code&gt; は、ディレクティブコンテナー内でメッセージを再定義することにより、リモートテンプレートで定義されたメッセージをオーバーライドする機能を提供します。</target>
        </trans-unit>
        <trans-unit id="877ce4a445ea5e831a4f4c27b0f0efa155233b3c" translate="yes" xml:space="preserve">
          <source>However, the declarative language is also limited, as it does not allow you to teach the browser new syntax. For example, there is no easy way to get the browser to align the text at 1/3 the position instead of 1/2. What is needed is a way to teach the browser new HTML syntax.</source>
          <target state="translated">しかし、宣言型言語では、ブラウザに新しい構文を教えることができないため、宣言型言語にも限界があります。例えば、ブラウザにテキストを12ではなく13の位置に整列させる簡単な方法はありません。必要なのは、ブラウザに新しいHTML構文を教える方法です。</target>
        </trans-unit>
        <trans-unit id="3c9c0adee926699e18a27b00b88771ce6b3e9fc7" translate="yes" xml:space="preserve">
          <source>However, the more traditional CommonJS-style usage is still available, and documented below.</source>
          <target state="translated">しかし、より伝統的なCommonJSスタイルの使用法はまだ利用可能であり、以下に文書化されています。</target>
        </trans-unit>
        <trans-unit id="00996f9232afaff711c6ebfe08928b5cfb6f6845" translate="yes" xml:space="preserve">
          <source>However, there are a few limitations compared to array iteration:</source>
          <target state="translated">ただし、配列の反復に比べていくつかの制限があります。</target>
        </trans-unit>
        <trans-unit id="9641eba78bfe582ed3a2749197725f94c33dd851" translate="yes" xml:space="preserve">
          <source>Html-linkified and &lt;a href=&quot;../service/%24sanitize&quot;&gt;sanitized&lt;/a&gt; text.</source>
          <target state="translated">HTMLリンクされ、サニタイズ&lt;a href=&quot;../service/%24sanitize&quot;&gt;された&lt;/a&gt;テキスト。</target>
        </trans-unit>
        <trans-unit id="c65236654eb6a81fbfab2170b0857f54bfc87642" translate="yes" xml:space="preserve">
          <source>I'm in a hurry. How do I get a Hello World module working?</source>
          <target state="translated">焦っています。ハローワールドのモジュールを動かすには?</target>
        </trans-unit>
        <trans-unit id="28163d85350de7d518abda78cb07443850692d4d" translate="yes" xml:space="preserve">
          <source>I.e. &lt;code&gt;ng-model-options=&quot;{ debounce: 500 }&quot;&lt;/code&gt; will wait for half a second since the last content change before triggering the model update and form validation.</source>
          <target state="translated">つまり、 &lt;code&gt;ng-model-options=&quot;{ debounce: 500 }&quot;&lt;/code&gt; は、最後のコンテンツ変更から0.5秒待ってから、モデルの更新とフォームの検証をトリガーします。</target>
        </trans-unit>
        <trans-unit id="9ede6c3f478034a42df63b47c4dc0ad321990f8a" translate="yes" xml:space="preserve">
          <source>I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur' }&quot;&lt;/code&gt;</source>
          <target state="translated">すなわち &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur' }&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4129e8cbc1ebb2a2fb072b2b3daaef96575a5cc8" translate="yes" xml:space="preserve">
          <source>I.e. &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }&quot;&lt;/code&gt;</source>
          <target state="translated">すなわち、 &lt;code&gt;ng-model-options=&quot;{ updateOn: 'default blur', debounce: { default: 500, blur: 0 } }&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a68fa8efe4a09d8c0c63ae60426d9366434bccb2" translate="yes" xml:space="preserve">
          <source>IRC</source>
          <target state="translated">IRC</target>
        </trans-unit>
        <trans-unit id="d7b1a1f2be81b4fe52f63eaaeeb40a859c845e0f" translate="yes" xml:space="preserve">
          <source>Id for the &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; ID 。</target>
        </trans-unit>
        <trans-unit id="ec130e4d2cb91fe9bf063ea20a216bdcc71a84d6" translate="yes" xml:space="preserve">
          <source>Id of the key-value pair to delete.</source>
          <target state="translated">削除するキーと値のペアのID。</target>
        </trans-unit>
        <trans-unit id="7db857bacad045bd1f61b8fda21770e9d10e3b24" translate="yes" xml:space="preserve">
          <source>Id to use for lookup.</source>
          <target state="translated">検索に使用するID。</target>
        </trans-unit>
        <trans-unit id="4f2fb5d7f9da16cbc1d14fa704825b095fc9c79b" translate="yes" xml:space="preserve">
          <source>Identifier name for a reference to the controller in the directive's scope. This allows the controller to be referenced from the directive template. This is especially useful when a directive is used as component, i.e. with an &lt;code&gt;isolate&lt;/code&gt; scope. It's also possible to use it in a directive without an &lt;code&gt;isolate&lt;/code&gt; / &lt;code&gt;new&lt;/code&gt; scope, but you need to be aware that the &lt;code&gt;controllerAs&lt;/code&gt; reference might overwrite a property that already exists on the parent scope.</source>
          <target state="translated">ディレクティブのスコープ内のコントローラーへの参照の識別子名。これにより、ディレクティブテンプレートからコントローラーを参照できます。これは、ディレクティブがコンポーネントとして、つまり &lt;code&gt;isolate&lt;/code&gt; スコープで使用される場合に特に役立ちます。 &lt;code&gt;isolate&lt;/code&gt; / &lt;code&gt;new&lt;/code&gt; スコープなしのディレクティブで使用することもできますが、 &lt;code&gt;controllerAs&lt;/code&gt; 参照が親スコープに既に存在するプロパティを上書きする可能性があることに注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="79983926c885cfae871f9f76c7c14c825447c715" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;mode.rewriteLinks&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; in the &lt;code&gt;mode&lt;/code&gt; configuration object passed to &lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt;, the browser will perform a full page reload for every link. &lt;code&gt;mode.rewriteLinks&lt;/code&gt; can also be set to a string, which will enable link rewriting only on anchor elements that have the given attribute.</source>
          <target state="translated">&lt;code&gt;$locationProvider.html5Mode()&lt;/code&gt; 渡された &lt;code&gt;mode&lt;/code&gt; 設定オブジェクトで &lt;code&gt;mode.rewriteLinks&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されている場合、ブラウザーはすべてのリンクに対してページ全体の再読み込みを実行します。 &lt;code&gt;mode.rewriteLinks&lt;/code&gt; を文字列に設定することもできます。これにより、特定の属性を持つアンカー要素でのみリンクの書き換えが有効になります。</target>
        </trans-unit>
        <trans-unit id="613bfcabdb198dcf4290d1a13f26a43dcfef57c7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ng-click&lt;/code&gt; or &lt;code&gt;ng-dblclick&lt;/code&gt; is encountered, ngAria will add &lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt; to any element not in a node blacklist: &lt;em&gt; Button &lt;/em&gt; Anchor &lt;em&gt; Input &lt;/em&gt; Textarea &lt;em&gt; Select &lt;/em&gt; Details/Summary To fix widespread accessibility problems with &lt;code&gt;ng-click&lt;/code&gt; on &lt;code&gt;div&lt;/code&gt; elements, ngAria will dynamically bind a keypress event by default as long as the element isn't in the node blacklist. You can turn this functionality on or off with the &lt;code&gt;bindKeypress&lt;/code&gt; configuration option. ngAria will also add the &lt;code&gt;button&lt;/code&gt; role to communicate to users of assistive technologies. This can be disabled with the &lt;code&gt;bindRoleForClick&lt;/code&gt; configuration option. For &lt;code&gt;ng-dblclick&lt;/code&gt;, you must still manually add &lt;code&gt;ng-keypress&lt;/code&gt; and a role to non-interactive elements such as &lt;code&gt;div&lt;/code&gt; or &lt;code&gt;taco-button&lt;/code&gt; to enable keyboard access.</source>
          <target state="translated">場合は &lt;code&gt;ng-click&lt;/code&gt; または &lt;code&gt;ng-dblclick&lt;/code&gt; 検出され、ngAriaが追加されます &lt;code&gt;tabindex=&quot;0&quot;&lt;/code&gt; ノードブラックリスト内の任意の要素ではないに：&lt;em&gt;ボタン&lt;/em&gt;のアンカー&lt;em&gt;入力&lt;/em&gt;テキストエリア&lt;em&gt;を選択&lt;/em&gt;して広範なアクセシビリティの問題を解決するには詳細/概要 &lt;code&gt;ng-click&lt;/code&gt; 上 &lt;code&gt;div&lt;/code&gt; 要素を、ngAriaを要素がノードのブラックリストにない限り、デフォルトでキープレスイベントを動的にバインドします。 &lt;code&gt;bindKeypress&lt;/code&gt; 構成オプションを使用して、この機能をオンまたはオフにできます。 ngAriaは、支援技術のユーザーと通信する &lt;code&gt;button&lt;/code&gt; 役割も追加します。これは &lt;code&gt;bindRoleForClick&lt;/code&gt; で無効にできます構成オプション。以下のために &lt;code&gt;ng-dblclick&lt;/code&gt; 、あなたはまだ手動で追加する必要があり &lt;code&gt;ng-keypress&lt;/code&gt; とのような非インタラクティブな要素に役割 &lt;code&gt;div&lt;/code&gt; や &lt;code&gt;taco-button&lt;/code&gt; キーボードアクセスを可能にするために。</target>
        </trans-unit>
        <trans-unit id="c95cf37a17f0d52871a2a1d59d4540b01148df2b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ngTrim&lt;/code&gt; is set to &lt;code&gt;&quot;false&quot;&lt;/code&gt; then whitespace around both the separator and each list item is respected. This implies that the user of the directive is responsible for dealing with whitespace but also allows you to use whitespace as a delimiter, such as a tab or newline character.</source>
          <target state="translated">&lt;code&gt;ngTrim&lt;/code&gt; が &lt;code&gt;&quot;false&quot;&lt;/code&gt; に設定されている場合、セパレーターと各リスト項目の両方の周囲の空白が考慮されます。これは、ディレクティブのユーザーが空白を処理する責任があることを意味しますが、タブや改行文字などの区切り文字として空白を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="0829e8f931b8f25cd2b158be8e0b6def23ee7c6e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paramValue&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the property specified via the first argument will be deleted.</source>
          <target state="translated">&lt;code&gt;paramValue&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; の場合、最初の引数で指定されたプロパティは削除されます。</target>
        </trans-unit>
        <trans-unit id="5e5b3c116b7e282c2308f6ef1608442867791f58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paramValue&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the property specified via the first argument will be added with no value nor trailing equal sign.</source>
          <target state="translated">&lt;code&gt;paramValue&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、最初の引数で指定されたプロパティは、値も末尾の等号も付けずに追加されます。</target>
        </trans-unit>
        <trans-unit id="5f8a14370aff7380ce331b7293fef1918515ff58" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;paramValue&lt;/code&gt; is an array, it will override the property of the &lt;code&gt;search&lt;/code&gt; component of &lt;code&gt;$location&lt;/code&gt; specified via the first argument.</source>
          <target state="translated">&lt;code&gt;paramValue&lt;/code&gt; が配列の場合、最初の引数で指定された &lt;code&gt;$location&lt;/code&gt; &lt;code&gt;search&lt;/code&gt; コンポーネントのプロパティをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="743650dbdbf5002c9eecb5f7379f1f0d2090bf89" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;redirectTo&lt;/code&gt; is a function, it will be called with the following parameters:</source>
          <target state="translated">&lt;code&gt;redirectTo&lt;/code&gt; が関数の場合、次のパラメーターで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="777d9335c56dfe211081978a0fbb3906b4202502" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;search&lt;/code&gt; is a string or number, then &lt;code&gt;paramValue&lt;/code&gt; will override only a single search property.</source>
          <target state="translated">場合は &lt;code&gt;search&lt;/code&gt; 、文字列または数値で、その後、 &lt;code&gt;paramValue&lt;/code&gt; は、単一の検索プロパティをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="8201c46ffa0db4f644f5e56359950eb7fb2a8045" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;source&lt;/code&gt; is identical to &lt;code&gt;destination&lt;/code&gt; an exception will be thrown.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; が &lt;code&gt;destination&lt;/code&gt; と同一の場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="8ed2725402e420ab1c414cd2715251710a33f8e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;source&lt;/code&gt; is not an object or array (inc. &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;), &lt;code&gt;source&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; がオブジェクトでも配列でもない場合（ &lt;code&gt;null&lt;/code&gt; および &lt;code&gt;undefined&lt;/code&gt; を含む）、 &lt;code&gt;source&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="a624c93008a0a64091b974be67c1370e20df5fd0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;template&lt;/code&gt; is a function, it will be called with the following parameters:</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; が関数の場合、次のパラメーターで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9f1b3360d3b66afd04318f5feac73437fb4929da" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;template&lt;/code&gt; is a function, then it is &lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;injected&lt;/a&gt; with the following locals:</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; が関数の場合、次のローカルが&lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;注入さ&lt;/a&gt;れます。</target>
        </trans-unit>
        <trans-unit id="b743c62930c10b8e90047d6d33a622a656d9a6ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;templateUrl&lt;/code&gt; is a function, it will be called with the following parameters:</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; が関数の場合、次のパラメーターで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="33c8b5674d0af42566982cc240093a252e34747e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;templateUrl&lt;/code&gt; is a function, then it is &lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;injected&lt;/a&gt; with the following locals:</source>
          <target state="translated">&lt;code&gt;templateUrl&lt;/code&gt; が関数の場合、次のローカルが&lt;a href=&quot;../../auto/service/%24injector#invoke.html&quot;&gt;注入さ&lt;/a&gt;れます。</target>
        </trans-unit>
        <trans-unit id="72f42dc0c99690482b2dac1ed67fcce01c622d32" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, reverse the sorting order.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; の場合、ソート順を逆にします。</target>
        </trans-unit>
        <trans-unit id="e5e1755ef85cb15eebe562cc36b63807bafca0ca" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;window.name&lt;/code&gt; contains prefix &lt;code&gt;NG_DEFER_BOOTSTRAP!&lt;/code&gt; when &lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt; is called, the bootstrap process will be paused until &lt;code&gt;angular.resumeBootstrap()&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;window.name&lt;/code&gt; に接頭辞 &lt;code&gt;NG_DEFER_BOOTSTRAP!&lt;/code&gt; が含まれている場合！場合&lt;a href=&quot;../api/ng/function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; が&lt;/a&gt;呼び出され、ブートストラッププロセスがされるまで一時停止される &lt;code&gt;angular.resumeBootstrap()&lt;/code&gt; と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="a7fff279b5c9622029c122de3c8da07fa6ebeda1" translate="yes" xml:space="preserve">
          <source>If V is not undefined, mark the result of the expression as stable and schedule a task to deregister the watch for this expression when we exit the digest loop</source>
          <target state="translated">Vが未定義でない場合、式の結果を安定したものとしてマークし、ダイジェストループを終了するときにこの式のウォッチの登録を解除するタスクをスケジュールします。</target>
        </trans-unit>
        <trans-unit id="345464413875ecc47aaed72ea3eeb05292b2706f" translate="yes" xml:space="preserve">
          <source>If XSRF prefix is detected, strip it (see &lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;Security Considerations in the $http docs&lt;/a&gt;).</source>
          <target state="translated">XSRFプレフィックスが検出された場合は、それを取り除きます（&lt;a href=&quot;../service/%24http#security-considerations.html&quot;&gt;$ http docsのセキュリティに関する考慮事項を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="99e0d1f20619d41f43e4adbe88a0fc055defdf60" translate="yes" xml:space="preserve">
          <source>If XSRF prefix is detected, strip it (see Security Considerations section below).</source>
          <target state="translated">XSRF接頭辞が検出された場合は、それを削除します(後述の「セキュリティに関する注意事項」を参照)。</target>
        </trans-unit>
        <trans-unit id="52b7eeb7ca086390168cbaa4c3ea07248c32233b" translate="yes" xml:space="preserve">
          <source>If a custom comparator still can't distinguish between two items, then they will be sorted based on their index using the built-in comparator.</source>
          <target state="translated">カスタムコンパレータでも2つの項目を区別できない場合は、組み込みコンパレータを使用してインデックスに基づいてソートされます。</target>
        </trans-unit>
        <trans-unit id="022ac35ee6ebafd19f7c4c717fbf1ccf2712e7bc" translate="yes" xml:space="preserve">
          <source>If a destination is provided, all of its elements (for arrays) or properties (for objects) are deleted and then all elements/properties from the source are copied to it.</source>
          <target state="translated">宛先が指定されている場合、その要素(配列の場合)またはプロパティ(オブジェクトの場合)はすべて削除され、その後、ソースからのすべての要素プロパティがコピーされます。</target>
        </trans-unit>
        <trans-unit id="502bbbf8d84c6abdf7c8fd468936fe84d3df6d5a" translate="yes" xml:space="preserve">
          <source>If a form has only one input field then hitting enter in this field triggers form submit (&lt;code&gt;ngSubmit&lt;/code&gt;)</source>
          <target state="translated">フォームに入力フィールドが1つしかない場合、このフィールドで &lt;code&gt;ngSubmit&lt;/code&gt; フォーム送信（ngSubmit）がトリガーされます</target>
        </trans-unit>
        <trans-unit id="adb660bb29eb456fd541995beb9da63bcee77be2" translate="yes" xml:space="preserve">
          <source>If a function has an &lt;code&gt;$inject&lt;/code&gt; property and its value is an array of strings, then the strings represent names of services to be injected into the function.</source>
          <target state="translated">関数に &lt;code&gt;$inject&lt;/code&gt; プロパティがあり、その値が文字列の配列である場合、文字列は関数に注入されるサービスの名前を表します。</target>
        </trans-unit>
        <trans-unit id="cd412985992305562d7e70ff27e4c810956645c3" translate="yes" xml:space="preserve">
          <source>If a module has already been loaded into the injector then it will not be loaded again.</source>
          <target state="translated">モジュールが既にインジェクターにロードされている場合は、再度ロードされることはありません。</target>
        </trans-unit>
        <trans-unit id="26dc0654df6e7e0d396bfd5ad28c4b667f98d931" translate="yes" xml:space="preserve">
          <source>If a parent scope is suspended then all its descendants will be also excluded from future digests whether or not they have been suspended themselves. Note that this also applies to isolate child scopes.</source>
          <target state="translated">親スコープが一時停止されている場合は、その子孫もすべて、それ自体が一時停止されているかどうかにかかわらず、将来のダイジェストから除外されます。これは子スコープを分離する場合にも適用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f325902be8527e0c6ea4b6c889b0905040354cc2" translate="yes" xml:space="preserve">
          <source>If a request didn't match any expectation or if the expectation doesn't have the response defined, the backend definitions are evaluated in sequential order to see if any of them match the request. The response from the first matched definition is returned.</source>
          <target state="translated">リクエストが期待値にマッチしなかったり、期待値にレスポンスが定義されていない場合、 バックエンドの定義が順に評価され、リクエストにマッチするものがあるかどうかを確認します。最初にマッチした定義からのレスポンスが返されます。</target>
        </trans-unit>
        <trans-unit id="0fd04e9e5b96e85cca8613d8294a4a6de3b25a55" translate="yes" xml:space="preserve">
          <source>If a request expectation has no response specified, the algorithm will search your backend definitions for an appropriate response.</source>
          <target state="translated">リクエストの期待値にレスポンスが指定されていない場合、アルゴリズムは適切なレスポンスを求めてバックエンドの定義を検索します。</target>
        </trans-unit>
        <trans-unit id="3c34b3f9a2baeaea1921d5fa87951146f390ffe3" translate="yes" xml:space="preserve">
          <source>If a required controller cannot be found, and it is optional, the instance is &lt;code&gt;null&lt;/code&gt;, otherwise the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/service/error/%24compile/ctreq&quot;&gt;Missing Required Controller&lt;/a&gt; error is thrown.</source>
          <target state="translated">必要なコントローラーが見つからず、それがオプションの場合、インスタンスは &lt;code&gt;null&lt;/code&gt; です。それ以外の場合は、&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng/service/error/%24compile/ctreq&quot;&gt;Missing Required Controller&lt;/a&gt;エラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="3062c2d3fcf43cdcf6dc09ea8da967844fcf796b" translate="yes" xml:space="preserve">
          <source>If a service is decorated by both &lt;code&gt;$provide.decorator&lt;/code&gt; and &lt;code&gt;module.decorator&lt;/code&gt;, the decorators are applied in order:</source>
          <target state="translated">サービスは両方によって装飾された場合 &lt;code&gt;$provide.decorator&lt;/code&gt; と &lt;code&gt;module.decorator&lt;/code&gt; 、デコレータは順番に適用されます。</target>
        </trans-unit>
        <trans-unit id="8065da6f118dbd267964e5dadd97dd3d9850fb06" translate="yes" xml:space="preserve">
          <source>If a value is specified, returns the $httpProvider for chaining. otherwise, returns the current configured value.</source>
          <target state="translated">値を指定した場合は、チェーン接続用の $httpProvider を返します。</target>
        </trans-unit>
        <trans-unit id="1f41bc8f62e166a66fdd0b00ba6f38f10a023aad" translate="yes" xml:space="preserve">
          <source>If an action's configuration specifies that it is cancellable, you can cancel the request related to an instance or collection (as long as it is a result of a &quot;non-instance&quot; call):</source>
          <target state="translated">アクションの設定がキャンセル可能であることを指定している場合、インスタンスまたはコレクションに関連するリクエストをキャンセルすることができます(それが &quot;非インスタンス &quot;呼び出しの結果である限り)。</target>
        </trans-unit>
        <trans-unit id="cc7cda513ad242dc0410921f7e4d7987e45e3c2b" translate="yes" xml:space="preserve">
          <source>If an attribute with a binding is prefixed with the &lt;code&gt;ngAttr&lt;/code&gt; prefix (denormalized as &lt;code&gt;ng-attr-&lt;/code&gt;) then during the binding it will be applied to the corresponding unprefixed attribute. This allows you to bind to attributes that would otherwise be eagerly processed by browsers (e.g. an SVG element's &lt;code&gt;circle[cx]&lt;/code&gt; attributes). When using &lt;code&gt;ngAttr&lt;/code&gt;, the &lt;code&gt;allOrNothing&lt;/code&gt; flag of &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;$interpolate&lt;/a&gt; is used, so if any expression in the interpolated string results in &lt;code&gt;undefined&lt;/code&gt;, the attribute is removed and not added to the element.</source>
          <target state="translated">バインディングを持つ属性の前に &lt;code&gt;ngAttr&lt;/code&gt; プレフィックス（ &lt;code&gt;ng-attr-&lt;/code&gt; として非正規化）が付いている場合、バインディング中に、対応するプレフィックスのない属性に適用されます。これにより、他の方法ではブラウザーによって積極的に処理される属性（SVG要素の &lt;code&gt;circle[cx]&lt;/code&gt; 属性など）にバインドできます。使用する場合 &lt;code&gt;ngAttr&lt;/code&gt; を、 &lt;code&gt;allOrNothing&lt;/code&gt; 用のフラグ&lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;補間$が&lt;/a&gt;使用されているように補間された文字列結果の任意の式場合、 &lt;code&gt;undefined&lt;/code&gt; 属性を除去し、要素に追加されません。</target>
        </trans-unit>
        <trans-unit id="3c897c9ef737c27fdd08857ed2716fb1b8f4d9a5" translate="yes" xml:space="preserve">
          <source>If an expectation or definition uses a &lt;strong&gt;regex&lt;/strong&gt; to match the URL, you can provide an array of &lt;strong&gt;keys&lt;/strong&gt; via a &lt;code&gt;params&lt;/code&gt; argument. The index of each &lt;strong&gt;key&lt;/strong&gt; in the array will match the index of a &lt;strong&gt;group&lt;/strong&gt; in the &lt;strong&gt;regex&lt;/strong&gt;.</source>
          <target state="translated">期待値または定義が&lt;strong&gt;正規表現&lt;/strong&gt;を使用してURLと一致する場合、 &lt;code&gt;params&lt;/code&gt; 引数を介して&lt;strong&gt;キーの&lt;/strong&gt;配列を提供できます。配列の各&lt;strong&gt;キー&lt;/strong&gt;のインデックスは、&lt;strong&gt;正規表現の&lt;/strong&gt;&lt;strong&gt;グループ&lt;/strong&gt;のインデックスと一致します。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e464595e0a743e0020b60c55e500247b0faf2671" translate="yes" xml:space="preserve">
          <source>If an interceptor object was provided, the promise will instead be resolved with the value returned by the response interceptor (on success) or responceError interceptor (on failure).</source>
          <target state="translated">インターセプターオブジェクトが提供された場合は、代わりにレスポンスインターセプター(成功時)または responceError インターセプター(失敗時)によって返される値でプロミスが解決されます。</target>
        </trans-unit>
        <trans-unit id="7550c3d4cbd675d41d3da8b71e0e2ec2f8a2fd48" translate="yes" xml:space="preserve">
          <source>If any expectation within an &lt;code&gt;it&lt;/code&gt; block fails, the runner marks the &lt;code&gt;it&lt;/code&gt; as &quot;failed&quot; and continues on to the next block.</source>
          <target state="translated">&lt;code&gt;it&lt;/code&gt; ブロック内のいずれかの期待が失敗した場合、ランナーは &lt;code&gt;it&lt;/code&gt; を「失敗」としてマークし、次のブロックに進みます。</target>
        </trans-unit>
        <trans-unit id="1352dc692bed1cbf1f5076fcaeba257174fe28f2" translate="yes" xml:space="preserve">
          <source>If automatic scrolling is disabled, one must explicitly call &lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$anchorScroll()&lt;/a&gt; in order to scroll to the element related to the current hash.</source>
          <target state="translated">自動スクロールが無効になっている場合、現在のハッシュに関連する要素にスクロールするには、&lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$ anchorScroll（）を&lt;/a&gt;明示的に呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="3b4e24e7eaa2ca32436552a01221de60832d916b" translate="yes" xml:space="preserve">
          <source>If boolean, sets &lt;code&gt;html5Mode.enabled&lt;/code&gt; to value. If object, sets &lt;code&gt;enabled&lt;/code&gt;, &lt;code&gt;requireBase&lt;/code&gt; and &lt;code&gt;rewriteLinks&lt;/code&gt; to respective values. Supported properties:</source>
          <target state="translated">ブール値の場合、 &lt;code&gt;html5Mode.enabled&lt;/code&gt; を値に設定します。オブジェクトの場合、 &lt;code&gt;enabled&lt;/code&gt; 、 &lt;code&gt;requireBase&lt;/code&gt; 、および &lt;code&gt;rewriteLinks&lt;/code&gt; をそれぞれの値に設定します。サポートされているプロパティ：</target>
        </trans-unit>
        <trans-unit id="7148e4e9bfb3ae0f9035089b0911fcd382c40701" translate="yes" xml:space="preserve">
          <source>If both &lt;code&gt;bindToController&lt;/code&gt; and &lt;code&gt;scope&lt;/code&gt; are defined and have object hashes, &lt;code&gt;bindToController&lt;/code&gt; overrides &lt;code&gt;scope&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bindToController&lt;/code&gt; と &lt;code&gt;scope&lt;/code&gt; の両方が定義され、オブジェクトハッシュがある場合、 &lt;code&gt;bindToController&lt;/code&gt; はscopeをオーバーライドし &lt;code&gt;scope&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1cabef013ace4e4c9c00e6712ac1e83f19c28fc9" translate="yes" xml:space="preserve">
          <source>If both values are objects, compare their indices instead.</source>
          <target state="translated">両方の値がオブジェクトの場合は、そのインデックスを比較します。</target>
        </trans-unit>
        <trans-unit id="e0f58fb3edabd2bfd4c52120891ecad3c7f08490" translate="yes" xml:space="preserve">
          <source>If both values are of type &lt;code&gt;string&lt;/code&gt;, compare them alphabetically in a case- and locale-insensitive way.</source>
          <target state="translated">両方の値が &lt;code&gt;string&lt;/code&gt; 型の場合は、大文字と小文字およびロケールを区別しない方法でそれらをアルファベット順に比較します。</target>
        </trans-unit>
        <trans-unit id="a3acd0c125665e994f5cc5d87ff32bae58ae7519" translate="yes" xml:space="preserve">
          <source>If caching is enabled, but neither the default cache nor config.cache are set to a cache object, then the default &lt;code&gt;$cacheFactory(&quot;$http&quot;)&lt;/code&gt; object is used.</source>
          <target state="translated">キャッシュが有効になっているが、デフォルトのキャッシュもconfig.cacheもキャッシュオブジェクトに設定されていない場合、デフォルトの &lt;code&gt;$cacheFactory(&quot;$http&quot;)&lt;/code&gt; オブジェクトが使用されます。</target>
        </trans-unit>
        <trans-unit id="6be3243cff2b9606141e7d8a8288624cc35fdc41" translate="yes" xml:space="preserve">
          <source>If called with a function then it's considered to be the controller constructor function. Otherwise it's considered to be a string which is used to retrieve the controller constructor using the following steps:</source>
          <target state="translated">関数で呼ばれた場合は、コントローラのコンストラクタ関数とみなされます。そうでない場合は文字列とみなされ、以下の手順でコントローラのコンストラクタを取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="eca4a0606f2e890d1b99bf344fe5c04e4c526a90" translate="yes" xml:space="preserve">
          <source>If called with no arguments returns the parsed &lt;code&gt;search&lt;/code&gt; object. If called with one or more arguments returns &lt;code&gt;$location&lt;/code&gt; object itself.</source>
          <target state="translated">引数なしで呼び出された場合、解析された &lt;code&gt;search&lt;/code&gt; オブジェクトを返します。1つ以上の引数を指定して呼び出すと、 &lt;code&gt;$location&lt;/code&gt; オブジェクト自体が返されます。</target>
        </trans-unit>
        <trans-unit id="c24fb87cdf6ae1778bbb557cc0ff10b76544fa3c" translate="yes" xml:space="preserve">
          <source>If called, all changes to $location during the current &lt;code&gt;$digest&lt;/code&gt; will replace the current history record, instead of adding a new one.</source>
          <target state="translated">呼び出された場合、現在の &lt;code&gt;$digest&lt;/code&gt; 中に$ locationを変更すると、新しい履歴レコードが追加されるのではなく、現在の履歴レコードが置き換えられます。</target>
        </trans-unit>
        <trans-unit id="b025c8c144cafc2941eab97705006674236a7463" translate="yes" xml:space="preserve">
          <source>If custom triggers are used, custom debouncing timeouts can be set for each event using an object in &lt;code&gt;debounce&lt;/code&gt;. This can be useful to force immediate updates on some specific circumstances (like blur events).</source>
          <target state="translated">カスタムトリガーを使用する場合、 &lt;code&gt;debounce&lt;/code&gt; のオブジェクトを使用して、イベントごとにカスタムデバウンスタイムアウトを設定できます。これは、特定の状況（ブラーイベントなど）で即時更新を強制するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="50eecbd017e410f336fd4a83ba00bd8c53ebc392" translate="yes" xml:space="preserve">
          <source>If for example we wanted to create animations for &lt;code&gt;leave&lt;/code&gt; and &lt;code&gt;move&lt;/code&gt; (ngRepeat triggers move) then we can do so using the same CSS naming conventions:</source>
          <target state="translated">たとえば、 &lt;code&gt;leave&lt;/code&gt; と &lt;code&gt;move&lt;/code&gt; （ngRepeatトリガーの移動）のアニメーションを作成する場合は、同じCSS命名規則を使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="107509b3211b546d6aa398c5cd00116593d484cf" translate="yes" xml:space="preserve">
          <source>If it is necessary to reference the controller or any functions bound to the controller from the template, you can use the option &lt;code&gt;controllerAs&lt;/code&gt; to specify the name of the controller as an alias. The directive needs to define a scope for this configuration to be used. This is particularly useful in the case when the directive is used as a component.</source>
          <target state="translated">コントローラー、またはテンプレートからコントローラーにバインドされた関数を参照する必要がある場合は、controllerAsオプションを使用して、 &lt;code&gt;controllerAs&lt;/code&gt; の名前をエイリアスとして指定できます。ディレクティブは、使用されるこの構成のスコープを定義する必要があります。これは、ディレクティブがコンポーネントとして使用される場合に特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="9a307e66a98c3ebe2ff88b0c79288c8c10c4b570" translate="yes" xml:space="preserve">
          <source>If jQuery is available, &lt;code&gt;angular.element&lt;/code&gt; is an alias for the &lt;a href=&quot;http://api.jquery.com/jQuery/&quot;&gt;jQuery&lt;/a&gt; function. If jQuery is not available, &lt;code&gt;angular.element&lt;/code&gt; delegates to AngularJS's built-in subset of jQuery, called &quot;jQuery lite&quot; or &lt;strong&gt;jqLite&lt;/strong&gt;.</source>
          <target state="translated">jQueryが使用可能な場合、 &lt;code&gt;angular.element&lt;/code&gt; は&lt;a href=&quot;http://api.jquery.com/jQuery/&quot;&gt;jQuery&lt;/a&gt;関数のエイリアスです。jQueryが使用できない場合、 &lt;code&gt;angular.element&lt;/code&gt; は、「jQuery lite」または&lt;strong&gt;jqLit​​e&lt;/strong&gt;と呼ばれるAngularJSの組み込みjQueryサブセットに&lt;strong&gt;委任し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="c701fc2f8dc85147ea98151e5bf3322bcac3aaee" translate="yes" xml:space="preserve">
          <source>If multiple controllers are required, the &lt;code&gt;require&lt;/code&gt; option of the directive can take an array argument. The corresponding parameter being sent to the &lt;code&gt;link&lt;/code&gt; function will also be an array.</source>
          <target state="translated">複数のコントローラーが必要な場合、ディレクティブの &lt;code&gt;require&lt;/code&gt; オプションは配列引数を取ることができます。 &lt;code&gt;link&lt;/code&gt; 関数に送信される対応するパラメーターも配列になります。</target>
        </trans-unit>
        <trans-unit id="9131087c07a27ae54bb5cb150194e99e5b9ded60" translate="yes" xml:space="preserve">
          <source>If multiple identical requests are made using the same cache, which is not yet populated, one request will be made to the server and remaining requests will return the same response.</source>
          <target state="translated">同じキャッシュを使用して複数の同一のリクエストが行われた場合は、まだキャッシュが存在していないため、1つのリクエストがサーバに行われ、残りのリクエストは同じレスポンスを返すことになります。</target>
        </trans-unit>
        <trans-unit id="5099fba28286973badadf5e09f2c704804e0e9a4" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;templateNamespace&lt;/code&gt; is specified, then the namespace is considered to be &lt;code&gt;html&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;templateNamespace&lt;/code&gt; が指定されていない場合、名前空間は &lt;code&gt;html&lt;/code&gt; と見なされます。</target>
        </trans-unit>
        <trans-unit id="565e32b222f018c04759a0915c1eafd46c68d0e3" translate="yes" xml:space="preserve">
          <source>If no delay is specified, it uses a delay such that all currently pending tasks are flushed.</source>
          <target state="translated">遅延が指定されていない場合は、現在保留中のすべてのタスクがフラッシュされるような遅延を使用します。</target>
        </trans-unit>
        <trans-unit id="a343b02429ad2a626c45c677fe2309fc8eb6e9af" translate="yes" xml:space="preserve">
          <source>If no destination is supplied, a copy of the object or array is created.</source>
          <target state="translated">宛先を指定しない場合は、オブジェクトまたは配列のコピーが作成されます。</target>
        </trans-unit>
        <trans-unit id="613c17fb4d65c58a50bf306d9be2b19d42f72bd3" translate="yes" xml:space="preserve">
          <source>If no rule is defined for a category, then an empty string is displayed and a warning is generated. Note that some locales define more categories than &lt;code&gt;one&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;. For example, fr-fr defines &lt;code&gt;few&lt;/code&gt; and &lt;code&gt;many&lt;/code&gt;.</source>
          <target state="translated">カテゴリにルールが定義されていない場合、空の文字列が表示され、警告が生成されます。一部のロケールは、より多くのカテゴリを定義することを注記 &lt;code&gt;one&lt;/code&gt; および &lt;code&gt;other&lt;/code&gt; 。たとえば、fr-frは &lt;code&gt;few&lt;/code&gt; と &lt;code&gt;many&lt;/code&gt; 定義します。</target>
        </trans-unit>
        <trans-unit id="68fc3fa08dbab4451ff79de79c9fc1a49cba71b3" translate="yes" xml:space="preserve">
          <source>If one of the values is undefined, consider it &quot;greater than&quot; the other.</source>
          <target state="translated">一方の値が未定義の場合は、他方の値よりも &quot;大きい &quot;と考えてください。</target>
        </trans-unit>
        <trans-unit id="be847ed107cfee41deb9115ce6a8c35e338521f0" translate="yes" xml:space="preserve">
          <source>If one wants to modify a camelcased attribute (SVG elements have valid camelcased attributes), such as &lt;code&gt;viewBox&lt;/code&gt; on the &lt;code&gt;svg&lt;/code&gt; element, one can use underscores to denote that the attribute to bind to is naturally camelcased.</source>
          <target state="translated">1のような、（SVG要素が有効なキャメル記法属性を持つ）キャメル記法属性を変更したい場合は &lt;code&gt;viewBox&lt;/code&gt; 上 &lt;code&gt;svg&lt;/code&gt; 要素、1は、バインドの属性が自然キャメル記法されたことを示すためにアンダースコアを使用することができます。</target>
        </trans-unit>
        <trans-unit id="fa3a550f7e49feb35b5c38e18a628e43579977d7" translate="yes" xml:space="preserve">
          <source>If our animation code class-based (meaning that something like &lt;code&gt;ngClass&lt;/code&gt;, &lt;code&gt;ngHide&lt;/code&gt; and &lt;code&gt;ngShow&lt;/code&gt; triggers it) then we can still define our animations inside of the same registered animation, however, the function input arguments are a bit different:</source>
          <target state="translated">アニメーションコードがクラスベースの場合（つまり、 &lt;code&gt;ngClass&lt;/code&gt; 、 &lt;code&gt;ngHide&lt;/code&gt; 、 &lt;code&gt;ngShow&lt;/code&gt; などがトリガーする場合）、同じ登録済みアニメーション内でアニメーションを定義できますが、関数の入力引数は少し異なります。</target>
        </trans-unit>
        <trans-unit id="3929b62e0e7741d149c634de5223054eef38f614" translate="yes" xml:space="preserve">
          <source>If provided, then enables/disables SCE application-wide.</source>
          <target state="translated">指定された場合、SCE アプリケーション全体を有効にし、無効にします。</target>
        </trans-unit>
        <trans-unit id="420de9532a9310bd61b98d99b3e5431883df58a7" translate="yes" xml:space="preserve">
          <source>If provided, update the internal &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; flag.</source>
          <target state="translated">提供されている場合は、内部の &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; フラグを更新します。</target>
        </trans-unit>
        <trans-unit id="f6c236207f5e15b8cfb41e7366e363e30acf5b95" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;false&lt;/code&gt; skips model dirty checking, otherwise will invoke &lt;code&gt;fn&lt;/code&gt; within the &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt; block.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; に設定すると、モデルのダーティチェックがスキップされます。それ以外の場合、&lt;a href=&quot;../../ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply&lt;/a&gt;ブロック内で &lt;code&gt;fn&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="35a5cf1a0eea8e136f5c4728cf9e80e86d58aa15" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;false&lt;/code&gt; skips model dirty checking, otherwise will invoke &lt;code&gt;fn&lt;/code&gt; within the &lt;a href=&quot;../type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt; block.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; に設定すると、モデルのダーティチェックがスキップされます。それ以外の場合、&lt;a href=&quot;../type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply&lt;/a&gt;ブロック内で &lt;code&gt;fn&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6d79cbe97b0cba018fd80c72312c2caecd191843" translate="yes" xml:space="preserve">
          <source>If set to false AngularJS will not automatically trim the input.</source>
          <target state="translated">falseに設定すると、AngularJSは入力を自動的にトリミングしません。</target>
        </trans-unit>
        <trans-unit id="99f750122c635a9c79ac25ba8a258a265ea9d70d" translate="yes" xml:space="preserve">
          <source>If set to false AngularJS will not automatically trim the input. This parameter is ignored for input[type=password] controls, which will never trim the input.</source>
          <target state="translated">falseに設定すると、AngularJSは自動的に入力をトリミングしません。このパラメータはinput[type=password]コントロールでは無視され、入力がトリムされることはありません。</target>
        </trans-unit>
        <trans-unit id="d365bd222f8aac61ea4ce4cf5f583497a646e6c8" translate="yes" xml:space="preserve">
          <source>If set to true then the current &lt;code&gt;priority&lt;/code&gt; will be the last set of directives which will execute (any directives at the current priority will still execute as the order of execution on same &lt;code&gt;priority&lt;/code&gt; is undefined). Note that expressions and other directives used in the directive's template will also be excluded from execution.</source>
          <target state="translated">trueに設定すると、現在の &lt;code&gt;priority&lt;/code&gt; は、実行される最後のディレクティブセットになります（同じ &lt;code&gt;priority&lt;/code&gt; での実行順序が定義されていないため、現在の優先順位のディレクティブは引き続き実行されます）。ディレクティブのテンプレートで使用されている式やその他のディレクティブも実行から除外されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8198e6aef6aaac2f45ebacc8a1aa2d4b63f0fc33" translate="yes" xml:space="preserve">
          <source>If set to true, the JSON output will contain newlines and whitespace. If set to an integer, the JSON output will contain that many spaces per indentation.</source>
          <target state="translated">true に設定すると、JSON 出力には改行と空白が含まれます。整数に設定すると、JSON 出力にはインデントごとに多くのスペースが含まれます。</target>
        </trans-unit>
        <trans-unit id="cd63bbd500f85b0aa9f3f57a50ef372022a6763d" translate="yes" xml:space="preserve">
          <source>If set, specifies a vertical scroll-offset. This is often useful when there are fixed positioned elements at the top of the page, such as navbars, headers etc.</source>
          <target state="translated">設定した場合、垂直スクロールオフセットを指定します。これは、ナビバーやヘッダーなど、ページの上部に固定された要素がある場合に便利です。</target>
        </trans-unit>
        <trans-unit id="fe6333e8f42c68100e28d8d911a3367f20054d75" translate="yes" xml:space="preserve">
          <source>If specified then new module is being created. If unspecified then the module is being retrieved for further configuration.</source>
          <target state="translated">指定された場合、新しいモジュールが作成されています。指定されていない場合は、設定を進めるためにモジュールを取得しています。</target>
        </trans-unit>
        <trans-unit id="27aeb59cad0b804c6ef2d86a1dfa615624970c38" translate="yes" xml:space="preserve">
          <source>If that is the case, the compiler adds an interpolateDirective to the node and registers &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;watches&lt;/a&gt; on the computed interpolation function, which will update the corresponding text nodes or attribute values as part of the normal &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;digest&lt;/a&gt; cycle.</source>
          <target state="translated">その場合、コンパイラーはノードにinterpolateDirectiveを追加し、計算された補間関数に&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;監視&lt;/a&gt;を登録します。これにより、対応するテキストノードまたは属性値が通常の&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;ダイジェスト&lt;/a&gt;サイクルの一部として更新されます。</target>
        </trans-unit>
        <trans-unit id="06ebcf108a89a946fe69e686a9111125f0f020a4" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is falsy then the element is removed from the DOM tree. If it is truthy a copy of the compiled element is added to the DOM tree.</source>
          <target state="translated">場合&lt;a href=&quot;../../../guide/expression&quot;&gt;式が&lt;/a&gt; falsyで、その要素は、DOMツリーから削除されます。正しい場合は、コンパイルされた要素のコピーがDOMツリーに追加されます。</target>
        </trans-unit>
        <trans-unit id="92018ed26fa3598f627e4578ebf49a3b9ed44b1b" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then special attribute &quot;open&quot; will be set on the element</source>
          <target state="translated">&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;が真実である場合、要素に特別な属性「オープン」が設定されます</target>
        </trans-unit>
        <trans-unit id="431632c12958fee7c8e13e21d996c9067cd8b138" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then special attribute &quot;readonly&quot; will be set on the element</source>
          <target state="translated">&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;が真実である場合、要素に特別な属性「読み取り専用」が設定されます</target>
        </trans-unit>
        <trans-unit id="705b7850ed3cc932f2a8560a14e97c372e2c1a26" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then special attribute &quot;selected&quot; will be set on the element</source>
          <target state="translated">&lt;a href=&quot;../../../guide/expression&quot;&gt;式&lt;/a&gt;が真実である場合、要素に特別な属性「selected」が設定されます</target>
        </trans-unit>
        <trans-unit id="a2e2565ac63611a2ee4218e5debd4028869e44fa" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then the &lt;code&gt;checked&lt;/code&gt; attribute will be set on the element</source>
          <target state="translated">場合&lt;a href=&quot;../../../guide/expression&quot;&gt;式が&lt;/a&gt; truthyで、その後 &lt;code&gt;checked&lt;/code&gt; 属性が要素に設定されます</target>
        </trans-unit>
        <trans-unit id="0fa6eb7b7fd73a6c228cab8613440b5f26fe154c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy, then the &lt;code&gt;disabled&lt;/code&gt; attribute will be set on the element</source>
          <target state="translated">場合&lt;a href=&quot;../../../guide/expression&quot;&gt;式が&lt;/a&gt; truthyあり、その後、 &lt;code&gt;disabled&lt;/code&gt; 属性が要素に設定されます</target>
        </trans-unit>
        <trans-unit id="c8f2e6672bb03dd7bddaac75918cc6f50c5be88c" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy/falsy then the element is hidden/shown respectively.</source>
          <target state="translated">場合&lt;a href=&quot;../../../guide/expression&quot;&gt;、発現は&lt;/a&gt; truthy / falsyその要素が隠れている/それぞれ示されています。</target>
        </trans-unit>
        <trans-unit id="1328e9d07bc981d3a2f225632334634a909a47c7" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is truthy/falsy then the element is shown/hidden respectively.</source>
          <target state="translated">場合&lt;a href=&quot;../../../guide/expression&quot;&gt;、発現は&lt;/a&gt; truthy / falsyその要素は、それぞれ表示/非表示です。</target>
        </trans-unit>
        <trans-unit id="57f738c91082e8b25cb1fa3c8475f9812310ab4e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Content-Type&lt;/code&gt; is &lt;code&gt;application/json&lt;/code&gt; or the response looks like JSON, deserialize it using a JSON parser.</source>
          <target state="translated">場合 &lt;code&gt;Content-Type&lt;/code&gt; ある &lt;code&gt;application/json&lt;/code&gt; またはJSONのような応答ルックス、JSONパーサーを使用して、それをデシリアライズ。</target>
        </trans-unit>
        <trans-unit id="569213aa4cfaa4bcb8cb504d5cc5158f580f2ef7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;data&lt;/code&gt; property of the request configuration object contains an object, serialize it into JSON format.</source>
          <target state="translated">リクエスト設定オブジェクトの &lt;code&gt;data&lt;/code&gt; プロパティにオブジェクトが含まれている場合は、それをJSON形式にシリアル化します。</target>
        </trans-unit>
        <trans-unit id="a575ef21797e38c6a9636004fb3da88ae0f427fb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;name&lt;/code&gt; attribute is specified, the form controller is published onto the current scope under this name.</source>
          <target state="translated">場合は &lt;code&gt;name&lt;/code&gt; 属性が指定されている、フォームコントローラは、この名前の下にある現在のスコープ上に公開されています。</target>
        </trans-unit>
        <trans-unit id="26b0e12a78f6677dac08ad73f6c6c9206d29a49b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ngAnimate&lt;/code&gt; module is active within the application then the &lt;code&gt;ngMessages&lt;/code&gt;, &lt;code&gt;ngMessage&lt;/code&gt; and &lt;code&gt;ngMessageExp&lt;/code&gt; directives will trigger animations whenever any messages are added and removed from the DOM by the &lt;code&gt;ngMessages&lt;/code&gt; directive.</source>
          <target state="translated">場合 &lt;code&gt;ngAnimate&lt;/code&gt; のモジュールは、アプリケーション内でアクティブであり、その後 &lt;code&gt;ngMessages&lt;/code&gt; 、 &lt;code&gt;ngMessage&lt;/code&gt; と &lt;code&gt;ngMessageExp&lt;/code&gt; 任意のメッセージがによってDOMから追加及び削除されるたびに指示がアニメーションをトリガする &lt;code&gt;ngMessages&lt;/code&gt; ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="7620b6d1e4671d235ceba2b3eb50bbc8af56dbac" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;require&lt;/code&gt; property is an object and &lt;code&gt;bindToController&lt;/code&gt; is truthy, then the required controllers are bound to the controller using the keys of the &lt;code&gt;require&lt;/code&gt; property. This binding occurs after all the controllers have been constructed but before &lt;code&gt;$onInit&lt;/code&gt; is called. If the name of the required controller is the same as the local name (the key), the name can be omitted. For example, &lt;code&gt;{parentDir: '^^'}&lt;/code&gt; is equivalent to &lt;code&gt;{parentDir: '^^parentDir'}&lt;/code&gt;. See the &lt;a href=&quot;../provider/%24compileprovider#component.html&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt; helper for an example of how this can be used. If no such required directive(s) can be found, or if the directive does not have a controller, then an error is raised (unless no link function is specified and the required controllers are not being bound to the directive controller, in which case error checking is skipped). The name can be prefixed with:</source>
          <target state="translated">場合は &lt;code&gt;require&lt;/code&gt; プロパティがオブジェクトであり、 &lt;code&gt;bindToController&lt;/code&gt; が truthyあり、その後、必要なコントローラは、キーの使用してコントローラにバインドされている &lt;code&gt;require&lt;/code&gt; 性が。このバインディングは、すべてのコントローラーが構築された後、 &lt;code&gt;$onInit&lt;/code&gt; が呼び出される前に発生します。必要なコントローラーの名前がローカル名（キー）と同じ場合は、名前を省略できます。たとえば、 &lt;code&gt;{parentDir: '^^'}&lt;/code&gt; は &lt;code&gt;{parentDir: '^^parentDir'}&lt;/code&gt; と同等です。&lt;a href=&quot;../provider/%24compileprovider#component.html&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt;参照してくださいこれがどのように使用されるかの例のヘルパー。そのような必要なディレクティブが見つからない場合、またはディレクティブにコントローラーがない場合は、エラーが発生します（リンク関数が指定されておらず、必要なコントローラーがディレクティブコントローラーにバインドされていない場合）。エラーチェックはスキップされます）。名前の前に次を付けることができます。</target>
        </trans-unit>
        <trans-unit id="e9084553ff9f6768e27df6a51cf00d07607970ba" translate="yes" xml:space="preserve">
          <source>If the argument is a hash object containing an array of values, these values will be encoded as duplicate search parameters in the URL.</source>
          <target state="translated">引数が値の配列を含むハッシュオブジェクトの場合、これらの値はURL内の重複検索パラメータとしてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="bcb61a9e955126eaa26ea942a4627e94e63e44a6" translate="yes" xml:space="preserve">
          <source>If the compared values are of different types:</source>
          <target state="translated">比較された値が異なるタイプの場合。</target>
        </trans-unit>
        <trans-unit id="a6ebb8e7acaaad05ba88ba630bbcf4bb474a27c9" translate="yes" xml:space="preserve">
          <source>If the compiler finds that an element matches a directive, then the directive is added to the list of directives that match the DOM element. A single element may match multiple directives.</source>
          <target state="translated">コンパイラがある要素がディレクティブにマッチすることを発見した場合、そのディレクティブは DOM 要素にマッチするディレクティブのリストに追加されます。一つの要素が複数のディレクティブにマッチすることもあります。</target>
        </trans-unit>
        <trans-unit id="dba304c82bd0b93a1d184175d2e32a6154fed02c" translate="yes" xml:space="preserve">
          <source>If the controller has been attached using the &lt;code&gt;controller as&lt;/code&gt; syntax then the controller instance will be assigned to a property on the scope.</source>
          <target state="translated">構文 &lt;code&gt;controller as&lt;/code&gt; 使用してコントローラーが接続されている場合、コントローラーインスタンスはスコープのプロパティに割り当てられます。</target>
        </trans-unit>
        <trans-unit id="6cd88d003715e1438f37dc2797bc52968605194f" translate="yes" xml:space="preserve">
          <source>If the directive is using 'element' transclusion, the compiler will actually remove the directive's entire element from the DOM and replace it with a comment node. The compiler then inserts the directive's template &quot;after&quot; this comment node, as a sibling.</source>
          <target state="translated">ディレクティブが 'element' トランスクルージョンを使っている場合、コンパイラは実際にはディレクティブの要素全体を DOM から削除し、コメントノードに置き換えます。コンパイラはこのコメントノードの &quot;後 &quot;にディレクティブのテンプレートを兄弟として挿入します。</target>
        </trans-unit>
        <trans-unit id="ccc0a0551436812b070e6ede527ae76f73bef649" translate="yes" xml:space="preserve">
          <source>If the element selector is prefixed with a &lt;code&gt;?&lt;/code&gt; then that slot is optional.</source>
          <target state="translated">要素セレクターの前に &lt;code&gt;?&lt;/code&gt; そのスロットはオプションです。</target>
        </trans-unit>
        <trans-unit id="539951d39c2b051017250ec693df08f36d0a8f58" translate="yes" xml:space="preserve">
          <source>If the element with &lt;code&gt;ngRef&lt;/code&gt; is destroyed &lt;code&gt;null&lt;/code&gt; is assigned to the property.</source>
          <target state="translated">&lt;code&gt;ngRef&lt;/code&gt; を持つ要素が破棄されると、 &lt;code&gt;null&lt;/code&gt; がプロパティに割り当てられます。</target>
        </trans-unit>
        <trans-unit id="8c51b91039912156c6ef5160d6f7caa8d6f1e32c" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a RegExp object, then this is used directly.</source>
          <target state="translated">式が RegExp オブジェクトに対して評価される場合は、これが直接使用されます。</target>
        </trans-unit>
        <trans-unit id="8fb5cd62dfec3bda2d681b5166adcc87bc454767" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a string, the string should be one or more space-delimited class names.</source>
          <target state="translated">式が文字列として評価される場合、その文字列は 1 つ以上のスペースで区切られたクラス名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="bb3c8751b0c61a411cfd191d56c199c86cb9d8a9" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it in &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; characters. For instance, &lt;code&gt;&quot;abc&quot;&lt;/code&gt; will be converted to &lt;code&gt;new RegExp('^abc$')&lt;/code&gt;.</source>
          <target state="translated">式が文字列に評価される場合、 &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;$&lt;/code&gt; 文字でラップした後、正規表現に変換されます。たとえば、 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; は &lt;code&gt;new RegExp('^abc$')&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="0a90d5734dbd86cb9e55270bd3a9ec2a471d3da2" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to an array, each element of the array should either be a string as in type 1 or an object as in type 2. This means that you can mix strings and objects together in an array to give you more control over what CSS classes appear. See the code below for an example of this.</source>
          <target state="translated">式が配列として評価される場合、配列の各要素はタイプ 1 のように文字列か、タイプ 2 のようにオブジェクトでなければなりません。これは、配列の中で文字列とオブジェクトを混在させることで、どのCSSクラスを表示するかをより自由にコントロールできることを意味します。その例として、以下のコードを参照してください。</target>
        </trans-unit>
        <trans-unit id="9f28d2244e2fc42662b32132ed29fd1499d1d52b" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to an object, then for each key-value pair of the object with a truthy value the corresponding key is used as a class name.</source>
          <target state="translated">式がオブジェクトに対して評価される場合、真偽値を持つオブジェクトの各キーと値のペアに対して、対応するキーがクラス名として使用されます。</target>
        </trans-unit>
        <trans-unit id="4f8a5c1d790a45cf8480b55c2ec6d0e8c83e21ad" translate="yes" xml:space="preserve">
          <source>If the expression will not change once set, it is a candidate for one-time binding. Here are three example cases.</source>
          <target state="translated">一度設定した式が変わらない場合は、ワンタイムバインディングの候補になります。以下に3つの例を示します。</target>
        </trans-unit>
        <trans-unit id="8a619d19d7445d7e347bec6f9960436c9602b51f" translate="yes" xml:space="preserve">
          <source>If the first argument was a string, a factory function for the filter to be registered.</source>
          <target state="translated">第一引数が文字列の場合は、登録するフィルタのファクトリ関数。</target>
        </trans-unit>
        <trans-unit id="361c8831315e17339674f0ae2feca36f02b8ac8a" translate="yes" xml:space="preserve">
          <source>If the function throws an error or the returned promise gets rejected, no further processing will take place and the &lt;a href=&quot;../service/%24route#%24routeChangeError.html&quot;&gt;$routeChangeError&lt;/a&gt; event will be fired.</source>
          <target state="translated">関数がエラーをスローした場合、または返されたpromiseが拒否された場合、それ以上の処理は行われず、&lt;a href=&quot;../service/%24route#%24routeChangeError.html&quot;&gt;$ routeChangeError&lt;/a&gt;イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="801344aef470ca55925f85d5fc988659687084e2" translate="yes" xml:space="preserve">
          <source>If the horizontal distance is greater, this is a swipe and &lt;code&gt;move&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; events follow.</source>
          <target state="translated">水平距離が長い場合、これはスワイプであり、 &lt;code&gt;move&lt;/code&gt; して &lt;code&gt;end&lt;/code&gt; イベントが続きます。</target>
        </trans-unit>
        <trans-unit id="a956873d372528560c2d21f9517980780e587b81" translate="yes" xml:space="preserve">
          <source>If the input is null or undefined, it will just be returned. If the input is infinite (Infinity or -Infinity), the Infinity symbol '&amp;infin;' or '-&amp;infin;' is returned, respectively. If the input is not a number an empty string is returned.</source>
          <target state="translated">入力がnullまたは未定義の場合は、単に返されます。入力が無限（Infinityまたは-Infinity）の場合、Infinityシンボル '&amp;infin;'または '-&amp;infin;'がそれぞれ返されます。入力が数値でない場合は、空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="3c59983d990ab2fd7484efe71b9e5bc2142d0391" translate="yes" xml:space="preserve">
          <source>If the interpolated value is not a &lt;code&gt;String&lt;/code&gt;, it is computed as follows:</source>
          <target state="translated">補間された値が &lt;code&gt;String&lt;/code&gt; でない場合、次のように計算されます。</target>
        </trans-unit>
        <trans-unit id="5201fb064f6147470f00f21dea4bab9f47241e2f" translate="yes" xml:space="preserve">
          <source>If the map of attributes contains a value for &lt;code&gt;target&lt;/code&gt;, it overrides the value of the target parameter.</source>
          <target state="translated">属性のマップに &lt;code&gt;target&lt;/code&gt; の値が含まれている場合、それはtargetパラメーターの値をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="fbd620b139e2c7c9068fe0980b84af6bdfabe8c0" translate="yes" xml:space="preserve">
          <source>If the ngMessages renders no inner ngMessage directive (i.e. when none of the truthy keys are matched by a defined message), then it will render a default message using the &lt;a href=&quot;ngmessages/directive/ngmessagedefault&quot;&gt;&lt;code&gt;ngMessageDefault&lt;/code&gt;&lt;/a&gt; directive. Note that matched messages will always take precedence over unmatched messages. That means the default message will not be displayed when another message is matched. This is also true for &lt;code&gt;ng-messages-multiple&lt;/code&gt;.</source>
          <target state="translated">ngMessagesが内部のngMessageディレクティブをレンダリングしない場合（つまり、定義されたメッセージと一致する真のキーがない場合）、&lt;a href=&quot;ngmessages/directive/ngmessagedefault&quot;&gt; &lt;code&gt;ngMessageDefault&lt;/code&gt; &lt;/a&gt;ディレクティブを使用してデフォルトのメッセージをレンダリングします。一致したメッセージは常に、一致しないメッセージよりも優先されることに注意してください。つまり、別のメッセージが一致した場合、デフォルトのメッセージは表示されません。これは &lt;code&gt;ng-messages-multiple&lt;/code&gt; にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="b16925af72a4fed089f605a5771aa7712c7c7fd8" translate="yes" xml:space="preserve">
          <source>If the object has a &lt;code&gt;valueOf()&lt;/code&gt; method that returns a primitive, its return value will be used instead.</source>
          <target state="translated">オブジェクトにプリミティブを返す &lt;code&gt;valueOf()&lt;/code&gt; メソッドがある場合、その戻り値が代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="3f1a13de46e7e46a68d029c7a50e792f652a12e1" translate="yes" xml:space="preserve">
          <source>If the object has a custom &lt;code&gt;toString()&lt;/code&gt; method (i.e. not the one inherited from &lt;code&gt;Object&lt;/code&gt;) that returns a primitive, its return value will be used instead.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 、プリミティブを返すカスタムの &lt;code&gt;toString()&lt;/code&gt; メソッド（つまり、Objectから継承したメソッドではない）がある場合、代わりにその戻り値が使用されます。</target>
        </trans-unit>
        <trans-unit id="b4070dda3da26b7789461241d4d6a2028444a334" translate="yes" xml:space="preserve">
          <source>If the option is set to &lt;code&gt;false&lt;/code&gt; and the URL in the browser changes, but the new URL maps to the same route, then a &lt;code&gt;$routeUpdate&lt;/code&gt; event is broadcasted on the root scope (without reloading the route).</source>
          <target state="translated">オプションが &lt;code&gt;false&lt;/code&gt; に設定されていて、ブラウザーのURLが変更されても、新しいURLが同じルートにマップされている場合、 &lt;code&gt;$routeUpdate&lt;/code&gt; イベントがルートスコープでブロードキャストされます（ルートを再読み込みしません）。</target>
        </trans-unit>
        <trans-unit id="4f675d1330a06aa7e73c29dee26c8f270d3431c5" translate="yes" xml:space="preserve">
          <source>If the option is set to &lt;code&gt;false&lt;/code&gt; and the URL in the browser changes, then a &lt;code&gt;$routeUpdate&lt;/code&gt; event is broadcasted on the root scope (without reloading the route).</source>
          <target state="translated">オプションが &lt;code&gt;false&lt;/code&gt; に設定されていて、ブラウザーのURLが変更されている場合、 &lt;code&gt;$routeUpdate&lt;/code&gt; イベントがルートスコープでブロードキャストされます（ルートを再読み込みしません）。</target>
        </trans-unit>
        <trans-unit id="667711c7d75a7f70cf4b59c7711f0e8c0ddf7c8c" translate="yes" xml:space="preserve">
          <source>If the option is set to &lt;code&gt;true&lt;/code&gt;, then the particular route can be matched without being case sensitive</source>
          <target state="translated">このオプションが &lt;code&gt;true&lt;/code&gt; に設定されている場合、大文字と小文字を区別せずに特定のルートを照合できます</target>
        </trans-unit>
        <trans-unit id="2fa05f4335e8c37af4609e2cbfa503116352d3ed" translate="yes" xml:space="preserve">
          <source>If the parameter value is prefixed with &lt;code&gt;@&lt;/code&gt;, then the value for that parameter will be extracted from the corresponding property on the &lt;code&gt;data&lt;/code&gt; object (provided when calling actions with a request body). For example, if the &lt;code&gt;defaultParam&lt;/code&gt; object is &lt;code&gt;{someParam: '@someProp'}&lt;/code&gt; then the value of &lt;code&gt;someParam&lt;/code&gt; will be &lt;code&gt;data.someProp&lt;/code&gt;. Note that the parameter will be ignored, when calling a &quot;GET&quot; action method (i.e. an action method that does not accept a request body).</source>
          <target state="translated">パラメータ値の前に &lt;code&gt;@&lt;/code&gt; が付いている場合、そのパラメータの値は、 &lt;code&gt;data&lt;/code&gt; オブジェクトの対応するプロパティから抽出されます（リクエスト本文でアクションを呼び出すときに提供されます）。たとえば、 &lt;code&gt;defaultParam&lt;/code&gt; オブジェクトが &lt;code&gt;{someParam: '@someProp'}&lt;/code&gt; の場合、 &lt;code&gt;someParam&lt;/code&gt; の値はdata.somePropになり &lt;code&gt;data.someProp&lt;/code&gt; 。「GET」アクションメソッド（リクエストボディを受け付けないアクションメソッド）を呼び出す場合、パラメータは無視されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="748507705e8b73f2f2de5777914e00ac0057102d" translate="yes" xml:space="preserve">
          <source>If the passed parameter had been returned by a prior call to &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;, returns the value that had been passed to &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">渡されたパラメータが前の呼び出しによって返された場合は&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;に渡された値を返します&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="34bdf8299f97f8ef59f74107df302ae6779e17bc" translate="yes" xml:space="preserve">
          <source>If the passed parameter is not a value that had been returned by &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt;, it must be returned as-is.</source>
          <target state="translated">渡されたパラメーターが&lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt;によって返された値でない場合は、そのまま返される必要があります。</target>
        </trans-unit>
        <trans-unit id="eba391f315a45facb41d9100a63641fbf14c5c21" translate="yes" xml:space="preserve">
          <source>If the provider is:</source>
          <target state="translated">プロバイダの場合。</target>
        </trans-unit>
        <trans-unit id="8fb90fddde351c69618ca1d22a26145a9faddc79" translate="yes" xml:space="preserve">
          <source>If the service has been declared multiple times, a decorator will decorate the service that has been declared last:</source>
          <target state="translated">サービスが複数回宣言されている場合、デコレータは最後に宣言されたサービスをデコレーションします。</target>
        </trans-unit>
        <trans-unit id="073e1a6fd73d36907ed730dd5649eee40ed506d0" translate="yes" xml:space="preserve">
          <source>If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing content of this element will be removed before the transcluded content is inserted. If the transcluded content is empty (or only whitespace), the existing content is left intact. This lets you provide fallback content in the case that no transcluded content is provided.</source>
          <target state="translated">除外されたコンテンツが空でない場合(すなわち、空白のテキストノードを含む一つ以上のDOMノードを含む場合)、この要素の既存のコンテンツは、除外されたコンテンツが挿入される前に削除されます。除外されたコンテンツが空(またはホワイトスペースのみ)の場合、既存のコンテンツはそのまま残されます。これにより、トランスクロードされたコンテンツが提供されない場合に、フォールバックコンテンツを提供することができます。</target>
        </trans-unit>
        <trans-unit id="d9ff46f623d6f00d105132061348b4f635bc911c" translate="yes" xml:space="preserve">
          <source>If the value is a RegExp literal, e.g. &lt;code&gt;ngPattern=&quot;/^\d+$/&quot;&lt;/code&gt;, it is used directly.</source>
          <target state="translated">値がRegExpリテラルの場合（例： &lt;code&gt;ngPattern=&quot;/^\d+$/&quot;&lt;/code&gt; 、それは直接使用されます。</target>
        </trans-unit>
        <trans-unit id="691fa80c49c3faa2138cb82838f938dea193adbf" translate="yes" xml:space="preserve">
          <source>If the value is empty, &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;on&lt;/code&gt;, then child animations are allowed. If the value is &lt;code&gt;false&lt;/code&gt;, child animations are not allowed.</source>
          <target state="translated">値が空、 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;on&lt;/code&gt; の場合、子アニメーションが許可されます。値が &lt;code&gt;false&lt;/code&gt; の場合、子アニメーションは許可されません。</target>
        </trans-unit>
        <trans-unit id="34f1578079504e9d3dc1f5f790637a829842cb7f" translate="yes" xml:space="preserve">
          <source>If the vertical distance is greater, this is a scroll, and we let the browser take over. A &lt;code&gt;cancel&lt;/code&gt; event is sent.</source>
          <target state="translated">垂直方向の距離が大きい場合、これはスクロールであり、ブラウザーに引き継がせます。Aは &lt;code&gt;cancel&lt;/code&gt; イベントが送信されます。</target>
        </trans-unit>
        <trans-unit id="2d6b619ad1758255d1b68794d39d43746c76cfac" translate="yes" xml:space="preserve">
          <source>If the viewValue of &lt;code&gt;ngModel&lt;/code&gt; does not match any of the options, then the control will automatically add an &quot;unknown&quot; option, which it then removes when the mismatch is resolved.</source>
          <target state="translated">ngModelの &lt;code&gt;ngModel&lt;/code&gt; がどのオプションとも一致しない場合、コントロールは自動的に「不明」オプションを追加し、不一致が解決されたときに削除されます。</target>
        </trans-unit>
        <trans-unit id="9a9455b461bd0ed851b0a2e20ee353139e41bf20" translate="yes" xml:space="preserve">
          <source>If there are no pending requests to flush when the method is called, an exception is thrown (as this is typically a sign of programming error).</source>
          <target state="translated">メソッドが呼ばれたときにフラッシュするための保留中のリクエストがない場合、例外がスローされます (これは一般的にプログラミングエラーの兆候であるため)。</target>
        </trans-unit>
        <trans-unit id="060ea5570e9b3727e1af7089f2eeb073f6d7b905" translate="yes" xml:space="preserve">
          <source>If those attributes are added to an element, they will be applied to all the child elements and controls that inherit from it unless they are overridden.</source>
          <target state="translated">これらの属性が要素に追加された場合、それらの属性はオーバーライドされない限り、その要素を継承するすべての子要素とコントロールに適用されます。</target>
        </trans-unit>
        <trans-unit id="a0c1cfe0ec558e25c8faaad7729d14ba017c6c40" translate="yes" xml:space="preserve">
          <source>If true, then the scope does not prototypically inherit from the parent scope. The scope is isolated, as it can not see parent scope properties. When creating widgets, it is useful for the widget to not accidentally read parent state.</source>
          <target state="translated">true の場合、スコープは親スコープをプロトタイピング的に継承しません。スコープは親スコープのプロパティを見ることができないので、隔離されます。ウィジェットを作成する際に、誤って親の状態を読み込まないようにしておくと便利です。</target>
        </trans-unit>
        <trans-unit id="1a1eda02417fef4dacf554c54592d8c5e31f4371" translate="yes" xml:space="preserve">
          <source>If true, when requests are loaded, they will schedule a deferred &quot;apply&quot; on the next tick, giving time for subsequent requests in a roughly ~10ms window to load and share the same digest cycle.</source>
          <target state="translated">true の場合、リクエストがロードされたときに、次のティックで &quot;apply&quot; を遅延させ、後続のリクエストが約 10ms のウィンドウでロードされ、同じダイジェストサイクルを共有する時間を与えます。</target>
        </trans-unit>
        <trans-unit id="6f15cbe99032410d5987084ecc33f306be94d6db" translate="yes" xml:space="preserve">
          <source>If two directives suspend a scope, then one of them resumes the scope, the scope will no longer be suspended. This could result in the other directive believing a scope to be suspended when it is not.</source>
          <target state="translated">二つのディレクティブがスコープを一時停止した後、一方のディレクティブがスコープを再開した場合、 スコープはもう一時停止されません。これは、スコープが中断されていないのに、もう一方のディレクティブが スコープが中断されていると思い込んでしまうことになります。</target>
        </trans-unit>
        <trans-unit id="62a2ab806aea83a4f315e6a0440d6fa1d95f6028" translate="yes" xml:space="preserve">
          <source>If we change the above to &lt;code&gt;{{ 1000 | currency:&quot;USD$&quot;}}&lt;/code&gt;, AngularJS will always show a balance of &lt;code&gt;USD$1000&lt;/code&gt; regardless of locale.</source>
          <target state="translated">上記を &lt;code&gt;{{ 1000 | currency:&quot;USD$&quot;}}&lt;/code&gt; 、AngularJSはロケールに関係なく常に &lt;code&gt;USD$1000&lt;/code&gt; 残高を表示します。</target>
        </trans-unit>
        <trans-unit id="8182958d3c9e9a8a4566ae6109e758f0624b87f7" translate="yes" xml:space="preserve">
          <source>If you are creating a reusable component then you should be careful when using &lt;code&gt;&quot;*&quot;: &quot;$inherit&quot;&lt;/code&gt; since you may inadvertently inherit a setting in the future that changes the behavior of your component.</source>
          <target state="translated">再利用可能なコンポーネントを作成する場合、 &lt;code&gt;&quot;*&quot;: &quot;$inherit&quot;&lt;/code&gt; を使用するときは注意が必要です。「$ inherit」は、将来、コンポーネントの動作を変更する設定を誤って継承する可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="6824fd64e915a35e23d50509c5e4bba8e51856fc" translate="yes" xml:space="preserve">
          <source>If you are familiar with &lt;code&gt;ngInclude&lt;/code&gt;, &lt;code&gt;templateUrl&lt;/code&gt; works just like it. Here's the same example using &lt;code&gt;templateUrl&lt;/code&gt; instead:</source>
          <target state="translated">&lt;code&gt;ngInclude&lt;/code&gt; に精通している場合、 &lt;code&gt;templateUrl&lt;/code&gt; は同じように機能します。代わりに &lt;code&gt;templateUrl&lt;/code&gt; を使用した同じ例を次に示します。</target>
        </trans-unit>
        <trans-unit id="77b4c3f9eed7868de1adc6770793e45e91738ff2" translate="yes" xml:space="preserve">
          <source>If you are generating your JavaScript from some other templating engine (not recommended, e.g. in issue &lt;a href=&quot;https://github.com/angular/angular.js/issues/4006&quot;&gt;#4006&lt;/a&gt;), remember to escape your regular expression (and be aware that you might need more than one level of escaping depending on your templating engine and the way you interpolated the value.) Do make use of your platform's escaping mechanism as it might be good enough before coding your own. E.g. Ruby has &lt;a href=&quot;http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape&quot;&gt;Regexp.escape(str)&lt;/a&gt; and Python has &lt;a href=&quot;http://docs.python.org/library/re.html#re.escape&quot;&gt;re.escape&lt;/a&gt;. Javascript lacks a similar built in function for escaping. Take a look at Google Closure library's &lt;a href=&quot;http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962&quot;&gt;goog.string.regExpEscape(s)&lt;/a&gt;.</source>
          <target state="translated">他のテンプレートエンジンからJavaScriptを生成している場合（非推奨、例：&lt;a href=&quot;https://github.com/angular/angular.js/issues/4006&quot;&gt;＃4006で&lt;/a&gt;）、正規表現をエスケープすることを忘れないでください（テンプレートエンジンと方法によっては、複数のレベルのエスケープが必要になる場合があることに注意してください）独自にコーディングする前に十分な場合があるので、プラットフォームのエスケープメカニズムを利用してください。たとえば、Rubyには&lt;a href=&quot;http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape&quot;&gt;Regexp.escape（str）が&lt;/a&gt;あり、Pythonには&lt;a href=&quot;http://docs.python.org/library/re.html#re.escape&quot;&gt;re.escapeがあり&lt;/a&gt;ます。 JavaScriptには、エスケープのための同様の組み込み関数がありません。 Google Closureライブラリの&lt;a href=&quot;http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962&quot;&gt;goog.string.regExpEscape（s）をご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a29cc079c5381669c7a3a9da4c7b33b8f798e95e" translate="yes" xml:space="preserve">
          <source>If you are hitting any of these limitations, the recommended workaround is to convert your object into an array that is sorted into the order that you prefer before providing it to &lt;code&gt;ngRepeat&lt;/code&gt;. You could do this with a filter such as &lt;a href=&quot;http://ngmodules.org/modules/angular-toArrayFilter&quot;&gt;toArrayFilter&lt;/a&gt; or implement a &lt;code&gt;$watch&lt;/code&gt; on the object yourself.</source>
          <target state="translated">これらの制限のいずれかに &lt;code&gt;ngRepeat&lt;/code&gt; ている場合、推奨される回避策は、オブジェクトをngRepeatに提供する前に、お好みの順序でソートされた配列に変換することです。&lt;a href=&quot;http://ngmodules.org/modules/angular-toArrayFilter&quot;&gt;toArrayFilter&lt;/a&gt;などのフィルターを使用してこれを行うか、オブジェクトに &lt;code&gt;$watch&lt;/code&gt; を自分で実装できます。</target>
        </trans-unit>
        <trans-unit id="99dd2e2dc29df4f42bc993e77fee00d09330237a" translate="yes" xml:space="preserve">
          <source>If you are just using &lt;a href=&quot;../directive/ngtransclude&quot;&gt;&lt;code&gt;ngTransclude&lt;/code&gt;&lt;/a&gt; then you don't need to worry about this function, since ngTransclude will deal with it for us.</source>
          <target state="translated">&lt;a href=&quot;../directive/ngtransclude&quot;&gt; &lt;code&gt;ngTransclude&lt;/code&gt; &lt;/a&gt;を使用しているだけの場合は、ngTranscludeが処理するため、この関数について心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="a45454eb838a97c3b99832ac7c22cb8a9f728800" translate="yes" xml:space="preserve">
          <source>If you are not asking the linking function to clone the template, create the DOM element(s) before you send them to the compiler and keep this reference around.</source>
          <target state="translated">リンク関数にテンプレートの複製を依頼していない場合は、コンパイラに送る前に DOM 要素を作成し、この参照を手元に置いておきます。</target>
        </trans-unit>
        <trans-unit id="05854a1d0c3c61abd34a6185ba88099223eaf1f6" translate="yes" xml:space="preserve">
          <source>If you are setting the option value with the option's &lt;code&gt;value&lt;/code&gt; attribute, or textContent, the value will always be a &lt;code&gt;string&lt;/code&gt; which means that the model value must also be a string. Otherwise the &lt;code&gt;select&lt;/code&gt; directive cannot match them correctly.</source>
          <target state="translated">あなたは、オプションのでオプションの値を設定している場合は &lt;code&gt;value&lt;/code&gt; 属性、またはのTextContent、値は常になり &lt;code&gt;string&lt;/code&gt; のモデル値も文字列でなければならないことを意味しています。それ以外の場合、 &lt;code&gt;select&lt;/code&gt; ディレクティブはそれらを正しく照合できません。</target>
        </trans-unit>
        <trans-unit id="8616bb7e831e9c34f5ed1c22db4f4d693acd3c1c" translate="yes" xml:space="preserve">
          <source>If you are sure that your project only uses element and attribute directives, and you are not using any 3rd party library that uses directives inside element classes or html comments, you can disable the compilation of directives on element classes and comments for the whole application. This results in a compilation performance gain, as the compiler does not have to check comments and element classes looking for directives.</source>
          <target state="translated">プロジェクトが要素と属性のディレクティブのみを使用し、要素クラスや html コメントの中でディレクティブを使用するサードパーティのライブラリを使用していないことが確実であれば、アプリケーション全体の要素クラスとコメント上のディレクティブのコンパイルを無効にすることができます。これは、コンパイラがコメントや要素クラスをチェックしてディレクティブを探す必要がないので、コンパイルのパフォーマンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="7f18d87980792564416a9131237779e5b2ab35b5" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;$element&lt;/code&gt; or &lt;code&gt;$attrs&lt;/code&gt; in the controller, make sure to provide them as &lt;code&gt;locals&lt;/code&gt;. The &lt;code&gt;$element&lt;/code&gt; must be a jqLite-wrapped DOM element, and &lt;code&gt;$attrs&lt;/code&gt; should be an object that has all properties / functions that you are using in the controller. If this is getting too complex, you should compile the component instead and access the component's controller via the &lt;a href=&quot;../../ng/function/angular.element#methods.html&quot;&gt;&lt;code&gt;controller&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">コントローラーで &lt;code&gt;$element&lt;/code&gt; または &lt;code&gt;$attrs&lt;/code&gt; を使用している場合は、それらを &lt;code&gt;locals&lt;/code&gt; として提供してください。 &lt;code&gt;$element&lt;/code&gt; jqLit​​e包まれたDOM要素でなければならない、と &lt;code&gt;$attrs&lt;/code&gt; あなたがコントローラで使用しているすべての特性/機能を持つオブジェクトでなければなりません。これが複雑になりすぎる場合は、代わりにコンポーネントをコンパイルし、&lt;a href=&quot;../../ng/function/angular.element#methods.html&quot;&gt; &lt;code&gt;controller&lt;/code&gt; &lt;/a&gt;関数を介してコンポーネントのコントローラーにアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="62ca6a2bc0e076ff23829bf151f3637b4d8d77f5" translate="yes" xml:space="preserve">
          <source>If you are using a url with a suffix, just add the suffix, like this: &lt;code&gt;$resource('http://example.com/resource.json')&lt;/code&gt; or &lt;code&gt;$resource('http://example.com/:id.json')&lt;/code&gt; or even &lt;code&gt;$resource('http://example.com/resource/:resource_id.:format')&lt;/code&gt; If the parameter before the suffix is empty, :resource_id in this case, then the &lt;code&gt;/.&lt;/code&gt; will be collapsed down to a single &lt;code&gt;.&lt;/code&gt;. If you need this sequence to appear and not collapse then you can escape it with &lt;code&gt;/\.&lt;/code&gt;.</source>
          <target state="translated">サフィックス付きのURLを使用している場合は、次のようにサフィックスを追加するだけです： &lt;code&gt;$resource('http://example.com/resource.json')&lt;/code&gt; または &lt;code&gt;$resource('http://example.com/:id.json')&lt;/code&gt; または &lt;code&gt;$resource('http://example.com/resource/:resource_id.:format')&lt;/code&gt; サフィックスの前のパラメーターが空の場合、この場合は：resource_id、次に &lt;code&gt;/.&lt;/code&gt; 単一に折りたたまれ &lt;code&gt;.&lt;/code&gt; 。このシーケンスが表示され、折りたたまれないようにする必要がある場合は、 &lt;code&gt;/\.&lt;/code&gt; エスケープできます。。</target>
        </trans-unit>
        <trans-unit id="8175243d5dd6cd4ad446324c5b107b61705e0849" translate="yes" xml:space="preserve">
          <source>If you are writing your controllers as classes you have easier access to the properties and methods, which will appear on the scope, from inside the controller code.</source>
          <target state="translated">コントローラをクラスとして書く場合は、 スコープに表示されるプロパティやメソッドにコントローラのコード内から簡単にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="579b0bfd8c97d214c17252551f1e2da79f4821e2" translate="yes" xml:space="preserve">
          <source>If you choose to use the old style directive syntax &lt;code&gt;ng:&lt;/code&gt; then include xml-namespace in &lt;code&gt;html&lt;/code&gt; when running the page in the XHTML mode. (This is here for historical reasons, and we no longer recommend use of &lt;code&gt;ng:&lt;/code&gt;.)</source>
          <target state="translated">古いスタイルディレクティブ構文 &lt;code&gt;ng:&lt;/code&gt; を使用する場合は、XHTMLモードでページを実行するときに、 &lt;code&gt;html&lt;/code&gt; にxml-namespaceを含めます。（これは歴史的な理由によりここにあり、 &lt;code&gt;ng:&lt;/code&gt; の使用はお勧めしません。）</target>
        </trans-unit>
        <trans-unit id="95ac9993d00393a11c4032cc3f53f03837212f99" translate="yes" xml:space="preserve">
          <source>If you do have CSS transitions / animations defined for the animation events, make sure they have a higher priority than any styles that are not related to &lt;code&gt;ngAnimate&lt;/code&gt;.</source>
          <target state="translated">アニメーションイベントにCSSトランジション/アニメーションを定義している場合は、 &lt;code&gt;ngAnimate&lt;/code&gt; に関連しないスタイルよりも優先されるようにしてください。</target>
        </trans-unit>
        <trans-unit id="e60f87bc71cf08bbc7d9b1d676646a6c5716f48c" translate="yes" xml:space="preserve">
          <source>If you do not provide &lt;code&gt;ngCsp&lt;/code&gt; then AngularJS tries to autodetect if CSP is blocking dynamic code creation from strings (e.g., &lt;code&gt;unsafe-eval&lt;/code&gt; not specified in CSP header) and automatically deactivates this feature in the &lt;a href=&quot;../service/%24parse&quot;&gt;&lt;code&gt;$parse&lt;/code&gt;&lt;/a&gt; service. This autodetection, however, triggers a CSP error to be logged in the console:</source>
          <target state="translated">&lt;code&gt;ngCsp&lt;/code&gt; を指定しない場合、AngularJSは、CSPが文字列からの動的コードの作成をブロックしているかどうかを自動検出しようとし（たとえば、CSPヘッダーで指定されていない &lt;code&gt;unsafe-eval&lt;/code&gt; ）、&lt;a href=&quot;../service/%24parse&quot;&gt; &lt;code&gt;$parse&lt;/code&gt; &lt;/a&gt;サービスでこの機能を自動的に無効にします。ただし、この自動検出により、CSPエラーがコンソールに記録されます。</target>
        </trans-unit>
        <trans-unit id="090e07725aef98ccf8c178d8354126ccc84bb075" translate="yes" xml:space="preserve">
          <source>If you do want your animations to play when the app bootstraps, you can enable animations globally in your main module's &lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;run&lt;/a&gt; function:</source>
          <target state="translated">アプリのブートストラップ時にアニメーションを再生したい場合は、メインモジュールの&lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;実行&lt;/a&gt;関数でアニメーションをグローバルに有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="c54acd5a1055cc95784ce1576ee1d24938a564f3" translate="yes" xml:space="preserve">
          <source>If you have an input that uses &lt;code&gt;ng-model-options&lt;/code&gt; to set up debounced updates or updates that depend on special events such as &lt;code&gt;blur&lt;/code&gt;, there can be a period when the &lt;code&gt;$viewValue&lt;/code&gt; is out of sync with the ngModel's &lt;code&gt;$modelValue&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ng-model-options&lt;/code&gt; を使用してデバウンスされた更新または &lt;code&gt;blur&lt;/code&gt; などの特別なイベントに依存する更新を設定する入力がある場合、 &lt;code&gt;$viewValue&lt;/code&gt; がngModelの &lt;code&gt;$modelValue&lt;/code&gt; と同期していない期間が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f76a6558a7d25629fa9ecb3f235d6240ed436b29" translate="yes" xml:space="preserve">
          <source>If you have awesome AngularJS resources that belong on that page, please tell us about them on &lt;a href=&quot;https://plus.google.com/u/0/+AngularJS&quot;&gt;Google+&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/angularjs&quot;&gt;Twitter&lt;/a&gt;.</source>
          <target state="translated">そのページに属する素晴らしいAngularJSリソースがある場合は、&lt;a href=&quot;https://plus.google.com/u/0/+AngularJS&quot;&gt;Google +&lt;/a&gt;または&lt;a href=&quot;https://twitter.com/angularjs&quot;&gt;Twitterで&lt;/a&gt;それらについて教えてください。</target>
        </trans-unit>
        <trans-unit id="cc605f97c4d62e22545f2f1d9d3a0d4805d17f68" translate="yes" xml:space="preserve">
          <source>If you have very specific requirements about the way items are sorted, you can pass your own comparator function. For example, you might need to compare some strings in a locale-sensitive way. (When specifying a custom comparator, you also need to pass a value for the &lt;code&gt;reverse&lt;/code&gt; argument - passing &lt;code&gt;false&lt;/code&gt; retains the default sorting order, i.e. ascending.)</source>
          <target state="translated">アイテムのソート方法について非常に具体的な要件がある場合は、独自のコンパレーター関数を渡すことができます。たとえば、ロケールに依存する方法で一部の文字列を比較する必要がある場合があります。（カスタムコンパレータを指定するとき、あなたはまたのために値を渡す必要が &lt;code&gt;reverse&lt;/code&gt; 引き-渡す &lt;code&gt;false&lt;/code&gt; 順番を並べ替え、デフォルト、すなわち上昇を保持します。）</target>
        </trans-unit>
        <trans-unit id="83df81bb997c0451e68609a38aa5876c44d17de2" translate="yes" xml:space="preserve">
          <source>If you however do need to write a stateful filter, you have to mark the filter as &lt;code&gt;$stateful&lt;/code&gt;, which means that it will be executed one or more times during the each &lt;code&gt;$digest&lt;/code&gt; cycle.</source>
          <target state="translated">ただし、ステートフルフィルターを作成する必要がある場合は、フィルターを &lt;code&gt;$stateful&lt;/code&gt; としてマークする必要があります。つまり、各 &lt;code&gt;$digest&lt;/code&gt; サイクル中に1回以上実行されます。</target>
        </trans-unit>
        <trans-unit id="207d49b848c74ffcb21da0b752a994a1ebcb5c10" translate="yes" xml:space="preserve">
          <source>If you intend to implement CSP with these rules then you must tell AngularJS not to use these features.</source>
          <target state="translated">これらのルールでCSPを実装する場合は、AngularJSにこれらの機能を使用しないように指示しなければなりません。</target>
        </trans-unit>
        <trans-unit id="870c0ac7d5968a770c3f532b92db58783f974638" translate="yes" xml:space="preserve">
          <source>If you need access to the bound view, there are two ways to do it:</source>
          <target state="translated">バウンドビューへのアクセスが必要な場合は、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="2aa27655c9b71a602d902a015fc4942f9f7944c1" translate="yes" xml:space="preserve">
          <source>If you need to have more control over the initialization process, you can use a manual bootstrapping method instead. Examples of when you'd need to do this include using script loaders or the need to perform an operation before AngularJS compiles a page.</source>
          <target state="translated">初期化プロセスをよりコントロールしたい場合は、代わりに手動のブートストラップメソッドを使うことができます。このような場合の例としては、スクリプトローダーを使用したり、AngularJSがページをコンパイルする前に操作を行う必要がある場合などがあります。</target>
        </trans-unit>
        <trans-unit id="dbca727a7864fd896ef933ac7699c9e2ca5dac44" translate="yes" xml:space="preserve">
          <source>If you need to test a nested Controller you must create the same scope hierarchy in your test that exists in the DOM:</source>
          <target state="translated">入れ子になったControllerをテストする必要がある場合は、DOM内に存在するものと同じスコープ階層をテストで作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="ecb468ce29d2f458690fba5b025b3f86a8d80c22" translate="yes" xml:space="preserve">
          <source>If you only want a promise that will be resolved after some specified delay then you can call &lt;code&gt;$timeout&lt;/code&gt; without the &lt;code&gt;fn&lt;/code&gt; function.</source>
          <target state="translated">特定の遅延後に解決されるpromiseのみが必要な場合は、 &lt;code&gt;fn&lt;/code&gt; 関数なしで &lt;code&gt;$timeout&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="a5b2fc07801a43a0c7f77b3da6fcfcbca33ad603" translate="yes" xml:space="preserve">
          <source>If you use a custom comparator, it will be called with pairs of objects of the form &lt;code&gt;{value: ..., type: '...', index: ...}&lt;/code&gt; and is expected to return &lt;code&gt;0&lt;/code&gt; if the objects are equal (as far as the comparator is concerned), &lt;code&gt;-1&lt;/code&gt; if the 1st one should be ranked higher than the second, or &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="translated">カスタムコンパレーターを使用する場合、 &lt;code&gt;{value: ..., type: '...', index: ...}&lt;/code&gt; の形式のオブジェクトのペアで呼び出され、オブジェクトが等しい場合は &lt;code&gt;0&lt;/code&gt; を返すことが期待されます（コンパレータに関する限り）、1つ目を2つ目よりも高くランク付けする場合は &lt;code&gt;-1&lt;/code&gt; 、それ以外の場合は &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58f3058d3baff2b3a073006ea03f29eefad6d04e" translate="yes" xml:space="preserve">
          <source>If you want to be notified whenever &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; is called, you can register a &lt;code&gt;watchExpression&lt;/code&gt; function with no &lt;code&gt;listener&lt;/code&gt;. (Be prepared for multiple calls to your &lt;code&gt;watchExpression&lt;/code&gt; because it will execute multiple times in a single &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; cycle if a change is detected.)</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;が呼び出されたときに常に通知を &lt;code&gt;watchExpression&lt;/code&gt; 場合は、 &lt;code&gt;listener&lt;/code&gt; なしでwatchExpression関数を登録できます。（ &lt;code&gt;watchExpression&lt;/code&gt; は、変更が検出された場合、単一の&lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;サイクルで複数回実行されるため、watchExpressionを複数回呼び出す準備をしてください。）</target>
        </trans-unit>
        <trans-unit id="6f6cc8237e6dc46dbea8035f91ef1cceb56523a5" translate="yes" xml:space="preserve">
          <source>If you want to be notified whenever &lt;code&gt;$digest()&lt;/code&gt; is called, you can register a &lt;code&gt;watchExpression&lt;/code&gt; function with &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$watch()&lt;/a&gt; with no &lt;code&gt;listener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$digest()&lt;/code&gt; が呼び出されたときに常に通知を &lt;code&gt;watchExpression&lt;/code&gt; たい場合は、 &lt;code&gt;listener&lt;/code&gt; なしで&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;$ watch（）&lt;/a&gt;でwatchExpression関数を登録できます。</target>
        </trans-unit>
        <trans-unit id="ac59abc08a6313ed9820733d9cddfe40a666fa59" translate="yes" xml:space="preserve">
          <source>If you want to keep the default behavior and just add new events that may trigger the model update and validation, add &quot;default&quot; as one of the specified events.</source>
          <target state="translated">デフォルトの動作を維持したまま、モデルの更新と検証のトリガーとなる可能性のある新しいイベントを追加するだけにしたい場合は、指定されたイベントの1つとして「default」を追加します。</target>
        </trans-unit>
        <trans-unit id="7ffb3f226f4ffeb1e0ee64801113cc17b7d6cb85" translate="yes" xml:space="preserve">
          <source>If you want to manually control the insertion and removal of the transcluded content in your directive then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery object that contains the compiled DOM, which is linked to the correct transclusion scope.</source>
          <target state="translated">ディレクティブの中でトランスクルードされたコンテンツの挿入と削除を手動で制御したい場合は、このトランスクルード関数を使用しなければなりません。transclude 関数を呼び出すと、コンパイルされた DOM を含む jqLiteJQuery オブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="350e89977f66c00f278ba622f5c870b1d11fc27e" translate="yes" xml:space="preserve">
          <source>If you want to pass custom options to the &lt;code&gt;$http&lt;/code&gt; service, such as setting the Accept header you can configure this via &lt;a href=&quot;../provider/%24templaterequestprovider#httpOptions.html&quot;&gt;&lt;code&gt;$templateRequestProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Acceptヘッダーの設定など、カスタムオプションを &lt;code&gt;$http&lt;/code&gt; サービスに渡す場合は、&lt;a href=&quot;../provider/%24templaterequestprovider#httpOptions.html&quot;&gt; &lt;code&gt;$templateRequestProvider&lt;/code&gt; &lt;/a&gt;使用してこれを構成できます。</target>
        </trans-unit>
        <trans-unit id="55cac270f43d60bf68fc09da3ef0e7d2fc46b878" translate="yes" xml:space="preserve">
          <source>If you want to run more complex JavaScript code, you should make it a controller method and call the method from your view. If you want to &lt;code&gt;eval()&lt;/code&gt; an AngularJS expression yourself, use the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24eval.html&quot;&gt;&lt;code&gt;$eval()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">より複雑なJavaScriptコードを実行する場合は、それをコントローラーメソッドにして、ビューからメソッドを呼び出す必要があります。AngularJS式を自分で &lt;code&gt;eval()&lt;/code&gt; したい場合は、&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24eval.html&quot;&gt; &lt;code&gt;$eval()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="94ef57a2b10b7fb543b9ad681272e7260b865493" translate="yes" xml:space="preserve">
          <source>If you wish to be able to navigate to the application via a URL such as &lt;code&gt;/base&lt;/code&gt; then you should ensure that your server is setup to redirect such requests to &lt;code&gt;/base/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/base&lt;/code&gt; などのURLを介してアプリケーションに移動できるようにする場合は、サーバーがそのような要求を &lt;code&gt;/base/&lt;/code&gt; にリダイレクトするように設定されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="4a461bd3d1f4cd564f100034e6f4c026c6547ba8" translate="yes" xml:space="preserve">
          <source>If you wish to debug an application with this information then you should open up a debug console in the browser then call this method directly in this console:</source>
          <target state="translated">この情報を使ってアプリケーションをデバッグしたい場合は、ブラウザでデバッグコンソールを開き、このコンソールで直接このメソッドを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="67961efc8f60d457340202b3fece6ab62a772fa8" translate="yes" xml:space="preserve">
          <source>If you wish to exclude these then you can use the native &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite&quot;&gt;`isFinite'&lt;/a&gt; method.</source>
          <target state="translated">これらを除外したい場合は、ネイティブの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite&quot;&gt;「isFinite」&lt;/a&gt;メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="febd4482ea90c369092b50e44a77405198b68c7e" translate="yes" xml:space="preserve">
          <source>If you wish to override the request/response transformations only for a single request then provide &lt;code&gt;transformRequest&lt;/code&gt; and/or &lt;code&gt;transformResponse&lt;/code&gt; properties on the configuration object passed into &lt;code&gt;$http&lt;/code&gt;.</source>
          <target state="translated">単一のリクエストに対してのみリクエスト/レスポンス変換をオーバーライドしたい場合は、 &lt;code&gt;$http&lt;/code&gt; 渡された設定オブジェクトに &lt;code&gt;transformRequest&lt;/code&gt; および/または &lt;code&gt;transformResponse&lt;/code&gt; プロパティを提供します。</target>
        </trans-unit>
        <trans-unit id="92efd56723876207dc42707b797385c44e1ed645" translate="yes" xml:space="preserve">
          <source>If you wish, you can manually delegate exceptions, e.g. &lt;code&gt;try { ... } catch(e) { $exceptionHandler(e); }&lt;/code&gt;</source>
          <target state="translated">必要に応じて、手動で例外を委任できます。たとえば、 &lt;code&gt;try { ... } catch(e) { $exceptionHandler(e); }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5dede550c88c109a7aa713ce10867aee17cad1fe" translate="yes" xml:space="preserve">
          <source>If you would like to customise where and how the callbacks are stored then try overriding or decorating the &lt;a href=&quot;%24jsonpcallbacks&quot;&gt;&lt;code&gt;$jsonpCallbacks&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">コールバックが格納される場所と方法をカスタマイズする場合は、&lt;a href=&quot;%24jsonpcallbacks&quot;&gt; &lt;code&gt;$jsonpCallbacks&lt;/code&gt; &lt;/a&gt;サービスをオーバーライドまたは装飾してみてください。</target>
        </trans-unit>
        <trans-unit id="6de6f522958da34b1dcc259678edc0cbe2c6e606" translate="yes" xml:space="preserve">
          <source>If you're using manual bootstrapping, you can also use strict DI by providing &lt;code&gt;strictDi: true&lt;/code&gt; in the optional config argument:</source>
          <target state="translated">手動ブートストラップを使用している場合は、オプションのconfig引数に &lt;code&gt;strictDi: true&lt;/code&gt; を指定することで、strict DIを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="27ab337d46310ca730ffb687877a71fd87b9ffd3" translate="yes" xml:space="preserve">
          <source>If your app is currently in the &lt;code&gt;en-US&lt;/code&gt; locale, the browser will show &lt;code&gt;$1000.00&lt;/code&gt;. If someone in the Japanese locale (&lt;code&gt;ja&lt;/code&gt;) views your app, their browser will show a balance of &lt;code&gt;&amp;yen;1000.00&lt;/code&gt; instead. This is problematic because $1000 is not the same as &amp;yen;1000.</source>
          <target state="translated">アプリが現在 &lt;code&gt;en-US&lt;/code&gt; ロケールにある場合、ブラウザーには &lt;code&gt;$1000.00&lt;/code&gt; と表示されます。日本語ロケール（ &lt;code&gt;ja&lt;/code&gt; ）の誰かがアプリを表示した場合、代わりにブラウザーの残高が &lt;code&gt;&amp;yen;1000.00&lt;/code&gt; と表示されます。$ 1000は&amp;yen;1000と同じではないので、これには問題があります。</target>
        </trans-unit>
        <trans-unit id="1430bac2eebac9bf88d3059ad02454360c8556c7" translate="yes" xml:space="preserve">
          <source>If your directive uses &lt;code&gt;templateUrl&lt;/code&gt;, consider using &lt;a href=&quot;https://github.com/karma-runner/karma-ng-html2js-preprocessor&quot;&gt;karma-ng-html2js-preprocessor&lt;/a&gt; to pre-compile HTML templates and thus avoid having to load them over HTTP during test execution. Otherwise you may run into issues if the test directory hierarchy differs from the application's.</source>
          <target state="translated">ディレクティブで &lt;code&gt;templateUrl&lt;/code&gt; を使用する場合は、&lt;a href=&quot;https://github.com/karma-runner/karma-ng-html2js-preprocessor&quot;&gt;karma-ng-html2js-preprocessor&lt;/a&gt;を使用してHTMLテンプレートをプリコンパイルすることを検討してください。これにより、テストの実行中にHTTP経由でテンプレートをロードする必要がなくなります。そうしないと、テストディレクトリの階層がアプリケーションと異なる場合に問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="93fe649037fb09c8d4e2db87fdce1cee0df7982c" translate="yes" xml:space="preserve">
          <source>If your expressions are constant literals, they're automatically trusted and you don't need to call &lt;code&gt;$sce.trustAs&lt;/code&gt; on them (e.g. &lt;code&gt;&amp;lt;div ng-bind-html=&quot;'&amp;lt;b&amp;gt;implicitly trusted&amp;lt;/b&amp;gt;'&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;) just works (remember to include the &lt;code&gt;ngSanitize&lt;/code&gt; module). The &lt;code&gt;$sceDelegate&lt;/code&gt; will also use the &lt;code&gt;$sanitize&lt;/code&gt; service if it is available when binding untrusted values to &lt;code&gt;$sce.HTML&lt;/code&gt; context. AngularJS provides an implementation in &lt;code&gt;angular-sanitize.js&lt;/code&gt;, and if you wish to use it, you will also need to depend on the &lt;a href=&quot;../../ngsanitize&quot;&gt;&lt;code&gt;ngSanitize&lt;/code&gt;&lt;/a&gt; module in your application.</source>
          <target state="translated">式が定数リテラルの場合、それらは自動的に信頼され、 &lt;code&gt;$sce.trustAs&lt;/code&gt; を呼び出す必要はありません（例 &lt;code&gt;&amp;lt;div ng-bind-html=&quot;'&amp;lt;b&amp;gt;implicitly trusted&amp;lt;/b&amp;gt;'&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; ）機能します（ &lt;code&gt;ngSanitize&lt;/code&gt; モジュールを含めることを忘れないでください）。 &lt;code&gt;$sceDelegate&lt;/code&gt; また、使用する &lt;code&gt;$sanitize&lt;/code&gt; に信頼されていない値をバインドするとき、それが利用可能な場合はサービスを &lt;code&gt;$sce.HTML&lt;/code&gt; コンテキスト。 AngularJSは &lt;code&gt;angular-sanitize.js&lt;/code&gt; の実装を提供します。これを使用したい場合は、アプリケーションの&lt;a href=&quot;../../ngsanitize&quot;&gt; &lt;code&gt;ngSanitize&lt;/code&gt; &lt;/a&gt;モジュールにも依存する必要があります。</target>
        </trans-unit>
        <trans-unit id="ab4db8d966388aab90159f0307d07fcccc35f63f" translate="yes" xml:space="preserve">
          <source>Imagine you want to have a container with tabs in which the contents of the container correspond to which tab is active.</source>
          <target state="translated">コンテナの内容がアクティブなタブに対応しているタブ付きコンテナが欲しいと想像してみてください。</target>
        </trans-unit>
        <trans-unit id="6b84004070116f71855a9922d8e631eb72f699dc" translate="yes" xml:space="preserve">
          <source>Impact on loading templates</source>
          <target state="translated">テンプレートを読み込む際の影響</target>
        </trans-unit>
        <trans-unit id="20b1bba1cb06ab8386a24bd0d8dfecea07cd7671" translate="yes" xml:space="preserve">
          <source>Implementing custom form controls (using ngModel)</source>
          <target state="translated">カスタムフォームコントロールの実装 (ngModel を使用)</target>
        </trans-unit>
        <trans-unit id="bd06cedc31ae5b22c03264197e96ab3c19ffede6" translate="yes" xml:space="preserve">
          <source>Implicit Annotation</source>
          <target state="translated">暗黙のアノテーション</target>
        </trans-unit>
        <trans-unit id="096ba44a184249033cb9a0bb4ffebe2657bba416" translate="yes" xml:space="preserve">
          <source>Implicit module which gets automatically added to each &lt;a href=&quot;auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;.</source>
          <target state="translated">各&lt;a href=&quot;auto/service/%24injector&quot;&gt;$ injectorに&lt;/a&gt;自動的に追加される暗黙的なモジュール。</target>
        </trans-unit>
        <trans-unit id="4723ddf746f3809e3b1477e490d52c8337146616" translate="yes" xml:space="preserve">
          <source>Implicitly from the function parameter names (has caveats)</source>
          <target state="translated">関数のパラメータ名から暗黙のうちに (注意点あり)</target>
        </trans-unit>
        <trans-unit id="8eecc4f94a1b1fe69acddb79e183178a9e26df1a" translate="yes" xml:space="preserve">
          <source>Important things to notice:</source>
          <target state="translated">注意すべき重要なこと</target>
        </trans-unit>
        <trans-unit id="3f98eeaab6110938e71c2879641215dabb0c66ef" translate="yes" xml:space="preserve">
          <source>In AngularJS applications, you move the job of filling page templates with data from the server to the client. The result is a system better structured for dynamic page updates. Below are the core features you'll use.</source>
          <target state="translated">AngularJSアプリケーションでは、ページテンプレートをデータで埋める作業をサーバーからクライアントに移します。その結果、動的なページ更新のためのより良い構造化されたシステムになります。以下に使用するコア機能を紹介します。</target>
        </trans-unit>
        <trans-unit id="b597dc43f8f9e0a6d2155495f4e5474be04320ca" translate="yes" xml:space="preserve">
          <source>In AngularJS, a Component is a special kind of &lt;a href=&quot;directive&quot;&gt;directive&lt;/a&gt; that uses a simpler configuration which is suitable for a component-based application structure.</source>
          <target state="translated">AngularJSでは、コンポーネントは、コンポーネントベースのアプリケーション構造に適した、より単純な構成を使用する特別な種類の&lt;a href=&quot;directive&quot;&gt;ディレクティブ&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="cbbc814b28ce35865c1e769b822e5f29dc4de827" translate="yes" xml:space="preserve">
          <source>In AngularJS, a Controller is defined by a JavaScript &lt;strong&gt;constructor function&lt;/strong&gt; that is used to augment the &lt;a href=&quot;scope&quot;&gt;AngularJS Scope&lt;/a&gt;.</source>
          <target state="translated">AngularJSでは、コントローラーは、&lt;a href=&quot;scope&quot;&gt;AngularJS Scope&lt;/a&gt;を拡張するために使用されるJavaScript &lt;strong&gt;コンストラクター関数&lt;/strong&gt;によって定義されます。</target>
        </trans-unit>
        <trans-unit id="1a5efbd64f006dff6c25bf138c6b220b436c7355" translate="yes" xml:space="preserve">
          <source>In AngularJS, forms can be nested. This means that the outer form is valid when all of the child forms are valid as well. However, browsers do not allow nesting of &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; elements, so AngularJS provides the &lt;a href=&quot;ngform&quot;&gt;&lt;code&gt;ngForm&lt;/code&gt;&lt;/a&gt; directive, which behaves identically to &lt;code&gt;form&lt;/code&gt; but can be nested. Nested forms can be useful, for example, if the validity of a sub-group of controls needs to be determined.</source>
          <target state="translated">AngularJSでは、フォームをネストできます。これは、すべての子フォームも有効である場合、外側のフォームも有効であることを意味します。ただし、ブラウザは &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 要素のネストを許可しないため、AngularJSは&lt;a href=&quot;ngform&quot;&gt; &lt;code&gt;ngForm&lt;/code&gt; &lt;/a&gt;ディレクティブを提供します。これは &lt;code&gt;form&lt;/code&gt; と同じように動作しますが、ネストすることができます。入れ子になったフォームは、たとえば、コントロールのサブグループの有効性を判断する必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="03844de6e8b1d50475106d63d0d10f3d8c611949" translate="yes" xml:space="preserve">
          <source>In AngularJS, templates are written with HTML that contains AngularJS-specific elements and attributes. AngularJS combines the template with information from the model and controller to render the dynamic view that a user sees in the browser.</source>
          <target state="translated">AngularJSでは、テンプレートはAngularJS固有の要素や属性を含むHTMLで書かれています。AngularJSはテンプレートとモデルやコントローラからの情報を組み合わせて、ユーザーがブラウザで見るダイナミックなビューをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="a1f619517bf2bbf5ed7ed5d2dc4a8bbb5b243e43" translate="yes" xml:space="preserve">
          <source>In HTML Template Binding</source>
          <target state="translated">HTMLテンプレートのバインディングで</target>
        </trans-unit>
        <trans-unit id="2e80ed003402377171ce0924403b8c90164f9832" translate="yes" xml:space="preserve">
          <source>In HTML5 mode, the &lt;code&gt;$location&lt;/code&gt; service getters and setters interact with the browser URL address through the HTML5 history API. This allows for use of regular URL path and search segments, instead of their hashbang equivalents. If the HTML5 History API is not supported by a browser, the &lt;code&gt;$location&lt;/code&gt; service will fall back to using the hashbang URLs automatically. This frees you from having to worry about whether the browser displaying your app supports the history API or not; the &lt;code&gt;$location&lt;/code&gt; service transparently uses the best available option.</source>
          <target state="translated">HTML5モードでは、 &lt;code&gt;$location&lt;/code&gt; サービスのゲッターとセッターは、HTML5履歴APIを介してブラウザーのURLアドレスとやり取りします。これにより、対応するハッシュバングの代わりに、通常のURLパスと検索セグメントを使用できます。HTML5 History APIがブラウザーでサポートされていない場合、 &lt;code&gt;$location&lt;/code&gt; サービスはハッシュバングURLを自動的に使用するようにフォールバックします。これにより、アプリを表示するブラウザーが履歴APIをサポートしているかどうかを心配する必要がなくなります。 &lt;code&gt;$location&lt;/code&gt; サービスは、透過的に利用可能な最善のオプションを使用しています。</target>
        </trans-unit>
        <trans-unit id="c291168b9231a4e5740fc0f7c7f24071d1ef1309" translate="yes" xml:space="preserve">
          <source>In Jasmine we use the &lt;code&gt;describe&lt;/code&gt; function to group our tests together:</source>
          <target state="translated">Jasmineでは、 &lt;code&gt;describe&lt;/code&gt; 関数を使用してテストをグループ化します。</target>
        </trans-unit>
        <trans-unit id="a823b45ca87464c258e471b13899cdf061f7a1d1" translate="yes" xml:space="preserve">
          <source>In JavaScript</source>
          <target state="translated">JavaScriptでは</target>
        </trans-unit>
        <trans-unit id="bbd50f6eadbfc76eda0b9ce7716de2fb5a24fcf4" translate="yes" xml:space="preserve">
          <source>In JavaScript calling &lt;code&gt;toString()&lt;/code&gt; on a function returns the function definition. The definition can then be parsed and the function arguments can be extracted. This method of discovering annotations is disallowed when the injector is in strict mode. &lt;em&gt;NOTE:&lt;/em&gt; This does not work with minification, and obfuscation tools since these tools change the argument names.</source>
          <target state="translated">JavaScriptで関数に対して &lt;code&gt;toString()&lt;/code&gt; を呼び出すと、関数定義が返されます。その後、定義を解析し、関数の引数を抽出できます。注釈を検出するこの方法は、インジェクターがストリクトモードの場合は許可されません。&lt;em&gt;注：&lt;/em&gt;これらのツールは引数名を変更するため、これは縮小化ツールと難読化ツールでは機能しません。</target>
        </trans-unit>
        <trans-unit id="1b54f06dab3f6e1ac9b946e1f4b43d7b0403e35c" translate="yes" xml:space="preserve">
          <source>In a legacy browser, the URL changes to &lt;code&gt;/index.html#!/some?foo=bar&lt;/code&gt;</source>
          <target state="translated">従来のブラウザでは、URLは &lt;code&gt;/index.html#!/some?foo=bar&lt;/code&gt; に変更されます</target>
        </trans-unit>
        <trans-unit id="1c5b58dd4eafa0d4a18da8ca18883a8ad953b136" translate="yes" xml:space="preserve">
          <source>In a modern browser, the URL changes to &lt;code&gt;/some?foo=bar&lt;/code&gt;</source>
          <target state="translated">最新のブラウザーでは、URLは &lt;code&gt;/some?foo=bar&lt;/code&gt; に変更されます</target>
        </trans-unit>
        <trans-unit id="a3a7a9d6c6de28fb043fa931b25966d7356a56f7" translate="yes" xml:space="preserve">
          <source>In a more complex app, you can display multiple views within one main page using &quot;partials&quot; &amp;ndash; segments of template located in separate HTML files. You can use the &lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;ngView&lt;/a&gt; directive to load partials based on configuration passed to the &lt;a href=&quot;../api/ngroute/service/%24route&quot;&gt;$route&lt;/a&gt; service. The &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;AngularJS tutorial&lt;/a&gt; shows this technique in steps seven and eight.</source>
          <target state="translated">より複雑なアプリでは、「パーシャル」（個別のHTMLファイルにあるテンプレートのセグメント）を使用して、1つのメインページ内に複数のビューを表示できます。&lt;a href=&quot;../api/ngroute/directive/ngview&quot;&gt;ngView&lt;/a&gt;ディレクティブを使用して、&lt;a href=&quot;../api/ngroute/service/%24route&quot;&gt;$ route&lt;/a&gt;サービスに渡された設定に基づいてパーシャルをロードできます。&lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;チュートリアルAngularJS&lt;/a&gt;手順7と8でのショーにこの技術を。</target>
        </trans-unit>
        <trans-unit id="0c0c40a1378e0d2f42f6d4f7be33566e03db6b53" translate="yes" xml:space="preserve">
          <source>In a simple app, the template consists of HTML, CSS, and AngularJS directives contained in just one HTML file (usually &lt;code&gt;index.html&lt;/code&gt;).</source>
          <target state="translated">単純なアプリでは、テンプレートはHTML、CSS、およびAngularJSディレクティブで構成され、1つのHTMLファイル（通常は &lt;code&gt;index.html&lt;/code&gt; ）に含まれています。</target>
        </trans-unit>
        <trans-unit id="e674faa938f37f1939ece405364297bb3d2958a2" translate="yes" xml:space="preserve">
          <source>In a single module the order of execution is as follows:</source>
          <target state="translated">単一のモジュールでは、実行順序は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="749307d1cbfaf16fe4aabba520b82ae1902a1b6a" translate="yes" xml:space="preserve">
          <source>In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation with CSS styles.</source>
          <target state="translated">CSS クラスの追加と削除に加えて、ngAnimate には、CSS スタイルでアニメーションをさらに装飾するために使用できる 2 つのヘルパーメソッドが用意されています。</target>
        </trans-unit>
        <trans-unit id="6321ce8bd6ac1756913a159906eecc022bf64796" translate="yes" xml:space="preserve">
          <source>In addition to all the regular &lt;code&gt;Scope&lt;/code&gt; methods, the following helper methods are available:</source>
          <target state="translated">すべての通常の &lt;code&gt;Scope&lt;/code&gt; メソッドに加えて、次のヘルパーメソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="b766677551b49d250621b2a334d198d39eec2e53" translate="yes" xml:space="preserve">
          <source>In addition to prioritization, ngMessages also allows for including messages from a remote or an inline template. This allows for generic collection of messages to be reused across multiple parts of an application.</source>
          <target state="translated">優先順位付けに加えて、 ngMessages では、リモートまたはインラインのテンプレートからのメッセージを含めることもできます。これにより、一般的なメッセージのコレクションをアプリケーションの複数の部分で再利用することができます。</target>
        </trans-unit>
        <trans-unit id="716143d7f33a871721bcf40bfd2db07a6cdb72d7" translate="yes" xml:space="preserve">
          <source>In addition to the above elements, tests may also contain helper functions to avoid duplicating code in the &lt;code&gt;it&lt;/code&gt; blocks.</source>
          <target state="translated">上記の要素に加えて、テストには、 &lt;code&gt;it&lt;/code&gt; ブロック内のコードの重複を避けるためのヘルパー関数も含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="470ea7a4e5c2fe6de7091aa6f7ec21ee51897509" translate="yes" xml:space="preserve">
          <source>In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering an event listener using the &lt;code&gt;$animate&lt;/code&gt; service. Let's say for example that an animation was triggered on our view routing controller to hook into that:</source>
          <target state="translated">アニメーションプロミスに加えて、 &lt;code&gt;$animate&lt;/code&gt; サービスを使用してイベントリスナーを登録することにより、ディレクティブとコントローラーコード内でアニメーション関連のコールバックを利用することもできます。たとえば、それをフックするためにビュールーティングコントローラーでアニメーションがトリガーされたとします。</target>
        </trans-unit>
        <trans-unit id="1699cbe96c0e4716d740c691996232ad4e5fe565" translate="yes" xml:space="preserve">
          <source>In addition, the browser's &lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;Same Origin Policy&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt; policy may further restrict whether the template is successfully loaded. For example, &lt;code&gt;ngInclude&lt;/code&gt; won't work for cross-domain requests on all browsers and for &lt;code&gt;file://&lt;/code&gt; access on some browsers.</source>
          <target state="translated">また、ブラウザの&lt;a href=&quot;https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest&quot;&gt;同一生成元ポリシー&lt;/a&gt;と&lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;クロスオリジンリソースシェアリング（CORS）&lt;/a&gt;ポリシーにより、テンプレートが正常に読み込まれるかどうかがさらに制限される場合があります。たとえば、 &lt;code&gt;ngInclude&lt;/code&gt; は、すべてのブラウザーのクロスドメインリクエストや一部のブラウザーの &lt;code&gt;file://&lt;/code&gt; アクセスでは機能しません。</target>
        </trans-unit>
        <trans-unit id="a57b0290a74b9eb78ccc15559fe648219b660cfc" translate="yes" xml:space="preserve">
          <source>In addition, you can supply a &lt;code&gt;headers&lt;/code&gt; property in the config object passed when calling &lt;code&gt;$http(config)&lt;/code&gt;, which overrides the defaults without changing them globally.</source>
          <target state="translated">さらに、 &lt;code&gt;$http(config)&lt;/code&gt; 呼び出すときに渡されるconfigオブジェクトで &lt;code&gt;headers&lt;/code&gt; プロパティを指定すると、グローバルに変更せずにデフォルトをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="589af7f1aae2e3ad6aab5df9c86b6c8e31638595" translate="yes" xml:space="preserve">
          <source>In all of these examples we are going to assume this module definition:</source>
          <target state="translated">これらの例では、すべてこのモジュール定義を前提としています。</target>
        </trans-unit>
        <trans-unit id="2ba4bd29bc7d7975c3e58c60de7ab29abd9339c6" translate="yes" xml:space="preserve">
          <source>In an effort to keep synchronized with router changes in the new Angular, this implementation of the Component Router (ngComponentRouter module) has been deprecated and will not receive further updates. We are investigating backporting the Router for the new Angular to AngularJS, but alternatively, use the &lt;a href=&quot;../../ngroute&quot;&gt;&lt;code&gt;ngRoute&lt;/code&gt;&lt;/a&gt; module or community developed projects (e.g. &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt;).</source>
          <target state="translated">新しいAngularでのルーターの変更との同期を維持するために、コンポーネントルーター（ngComponentRouterモジュール）のこの実装は非推奨になり、それ以上の更新を受け取りません。新しいAngularからAngularJSへのルーターのバックポートを調査していますが、代わりに&lt;a href=&quot;../../ngroute&quot;&gt; &lt;code&gt;ngRoute&lt;/code&gt; &lt;/a&gt;モジュールまたはコミュニティ開発プロジェクト（たとえば&lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt;）を使用します。</target>
        </trans-unit>
        <trans-unit id="667b1ad2855f853d06e0711549d307d56aa4fdca" translate="yes" xml:space="preserve">
          <source>In an effort to keep synchronized with router changes in the new Angular, this implementation of the Component Router (ngComponentRouter module) has been deprecated and will not receive further updates. We are investigating backporting the Router for the new Angular to AngularJS, but alternatively, use the &lt;a href=&quot;ngroute&quot;&gt;&lt;code&gt;ngRoute&lt;/code&gt;&lt;/a&gt; module or community developed projects (e.g. &lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt;).</source>
          <target state="translated">新しいAngularでのルーターの変更との同期を維持するために、コンポーネントルーター（ngComponentRouterモジュール）のこの実装は非推奨になり、それ以上の更新を受け取りません。新しいAngularからAngularJSへのルーターのバックポートを調査していますが、代わりに&lt;a href=&quot;ngroute&quot;&gt; &lt;code&gt;ngRoute&lt;/code&gt; &lt;/a&gt;モジュールまたはコミュニティ開発プロジェクト（たとえば&lt;a href=&quot;https://github.com/angular-ui/ui-router&quot;&gt;ui-router&lt;/a&gt;）を使用します。</target>
        </trans-unit>
        <trans-unit id="9386991172b647254fafb7d351016e610e121394" translate="yes" xml:space="preserve">
          <source>In any case, the value passed to the method should always reflect the current value of the control. For example, if you are calling &lt;code&gt;$setViewValue&lt;/code&gt; for an input element, you should pass the input DOM value. Otherwise, the control and the scope model become out of sync. It's also important to note that &lt;code&gt;$setViewValue&lt;/code&gt; does not call &lt;code&gt;$render&lt;/code&gt; or change the control's DOM value in any way. If we want to change the control's DOM value programmatically, we should update the &lt;code&gt;ngModel&lt;/code&gt; scope expression. Its new value will be picked up by the model controller, which will run it through the &lt;code&gt;$formatters&lt;/code&gt;, &lt;code&gt;$render&lt;/code&gt; it to update the DOM, and finally call &lt;code&gt;$validate&lt;/code&gt; on it.</source>
          <target state="translated">いずれの場合も、メソッドに渡される値は常にコントロールの現在の値を反映する必要があります。たとえば、入力要素に対して &lt;code&gt;$setViewValue&lt;/code&gt; を呼び出す場合は、入力DOM値を渡す必要があります。そうしないと、コントロールとスコープモデルが同期しなくなります。 &lt;code&gt;$setViewValue&lt;/code&gt; が &lt;code&gt;$render&lt;/code&gt; 呼び出したり、コントロールのDOM値を変更したりしないことに注意することも重要です。コントロールのDOM値をプログラムで変更する場合は、 &lt;code&gt;ngModel&lt;/code&gt; スコープ式を更新する必要があります。その新しい値はモデルコントローラーによって取得され、 &lt;code&gt;$formatters&lt;/code&gt; を介して実行され、 &lt;code&gt;$render&lt;/code&gt; を実行してDOMを更新し、最後に &lt;code&gt;$validate&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="68fe7d927164f0e298a884af50c62aebe47691da" translate="yes" xml:space="preserve">
          <source>In both examples, the &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression is applied successfully to each &lt;code&gt;item&lt;/code&gt; in the &lt;code&gt;items&lt;/code&gt; array. Because the selected option has been set programmatically in the controller, the &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression is also applied to the &lt;code&gt;ngModel&lt;/code&gt; value. In the first example, the &lt;code&gt;ngModel&lt;/code&gt; value is &lt;code&gt;items[0]&lt;/code&gt; and the &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression evaluates to &lt;code&gt;items[0].id&lt;/code&gt; with no issue. In the second example, the &lt;code&gt;ngModel&lt;/code&gt; value is &lt;code&gt;items[0].subItem&lt;/code&gt; and the &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression evaluates to &lt;code&gt;items[0].subItem.id&lt;/code&gt; (which is undefined). As a result, the model value is not matched against any &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; appears as having no selected value.</source>
          <target state="translated">どちらの例でも&lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt;式&lt;strong&gt;による追跡&lt;/strong&gt;は、 &lt;code&gt;items&lt;/code&gt; 配列の各 &lt;code&gt;item&lt;/code&gt; に正常に適用されます。選択したオプションはコントローラーでプログラムによって設定されているため、式&lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt;も &lt;code&gt;ngModel&lt;/code&gt; 値に適用されます。最初の例では、 &lt;code&gt;ngModel&lt;/code&gt; 値は &lt;code&gt;items[0]&lt;/code&gt; あり、式&lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt;は問題なく &lt;code&gt;items[0].id&lt;/code&gt; 評価されます。 2番目の例では、 &lt;code&gt;ngModel&lt;/code&gt; 値は &lt;code&gt;items[0].subItem&lt;/code&gt; あり、式&lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt;はitems [0] .subItem.idに評価され &lt;code&gt;items[0].subItem.id&lt;/code&gt; &lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;（これは未定義です）。その結果、モデル値はどの &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; とも照合されず、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; は選択された値がないものとして表示されます。</target>
        </trans-unit>
        <trans-unit id="e3e1a3ce31bec47d5200ef4cf60ace5abb3ccfe7" translate="yes" xml:space="preserve">
          <source>In case of parameter name collision, &lt;code&gt;path&lt;/code&gt; params take precedence over &lt;code&gt;search&lt;/code&gt; params.</source>
          <target state="translated">パラメータ名の衝突の場合、 &lt;code&gt;path&lt;/code&gt; パラメータは &lt;code&gt;search&lt;/code&gt; パラメータよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="c26867c8ed3c13342fd31b32bf994a5c01045f08" translate="yes" xml:space="preserve">
          <source>In case the &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; directive is used with &lt;code&gt;updateOn&lt;/code&gt; and the &lt;code&gt;default&lt;/code&gt; trigger is not listed, all those actions will remain pending until one of the &lt;code&gt;updateOn&lt;/code&gt; events is triggered on the DOM element. All these actions will be debounced if the &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; directive is used with a custom debounce for this particular event. Note that a &lt;code&gt;$digest&lt;/code&gt; is only triggered once the &lt;code&gt;updateOn&lt;/code&gt; events are fired, or if &lt;code&gt;debounce&lt;/code&gt; is specified, once the timer runs out.</source>
          <target state="translated">場合&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt;ディレクティブが一緒に使用され &lt;code&gt;updateOn&lt;/code&gt; と &lt;code&gt;default&lt;/code&gt; トリガーがリストされていないの1まで、すべてのこれらのアクションは、保留中のままになります &lt;code&gt;updateOn&lt;/code&gt; のイベントはDOM要素にトリガされます。&lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt;ディレクティブがこの特定のイベントのカスタムデバウンスと共に使用される場合、これらすべてのアクションはデバウンスされます。ことを注意 &lt;code&gt;$digest&lt;/code&gt; 一度のみトリガされ &lt;code&gt;updateOn&lt;/code&gt; のイベントが発生している場合、または &lt;code&gt;debounce&lt;/code&gt; タイマーが切れると、指定されています。</target>
        </trans-unit>
        <trans-unit id="dbb2128824b196014baa5c500781714a968857a4" translate="yes" xml:space="preserve">
          <source>In cases like the following, links are not rewritten; instead, the browser will perform a full page reload to the original link.</source>
          <target state="translated">以下のような場合、リンクは書き換えられず、代わりにブラウザは元のリンクへの全ページリロードを行います。</target>
        </trans-unit>
        <trans-unit id="eb1595edfe03ceecabe189afd4c1478336da4f55" translate="yes" xml:space="preserve">
          <source>In cases where both backend definitions and request expectations are specified during unit testing, the request expectations are evaluated first.</source>
          <target state="translated">単体テストでバックエンド定義とリクエスト期待値の両方が指定されている場合は、リクエスト期待値が先に評価されます。</target>
        </trans-unit>
        <trans-unit id="bf55b6216c29164cc9616d092551ba62d75a0676" translate="yes" xml:space="preserve">
          <source>In complex applications it's possible that dependencies between &lt;code&gt;$onChanges&lt;/code&gt; hooks and bindings will result in several iterations of calls to these hooks. However if an application needs more than the default 10 iterations to stabilize then you should investigate what is causing the model to continuously change during the &lt;code&gt;$onChanges&lt;/code&gt; hook execution.</source>
          <target state="translated">複雑なアプリケーションでは、 &lt;code&gt;$onChanges&lt;/code&gt; フックとバインディング間の依存関係により、これらのフックの呼び出しが数回繰り返される可能性があります。ただし、アプリケーションが安定化するためにデフォルトの10回を超える反復が必要な場合は、 &lt;code&gt;$onChanges&lt;/code&gt; フックの実行中にモデルが継続的に変化する原因を調査する必要があります。</target>
        </trans-unit>
        <trans-unit id="572607a7218cef33ac940e82902038d02ae937e5" translate="yes" xml:space="preserve">
          <source>In complex applications it's possible that the dependencies between &lt;code&gt;$watch&lt;/code&gt;s will result in several digest iterations. However if an application needs more than the default 10 digest iterations for its model to stabilize then you should investigate what is causing the model to continuously change during the digest.</source>
          <target state="translated">複雑なアプリケーションでは、 &lt;code&gt;$watch&lt;/code&gt; 間の依存関係により、複数のダイジェストが繰り返される可能性があります。ただし、アプリケーションがモデルを安定させるためにデフォルトの10を超えるダイジェスト反復を必要とする場合は、ダイジェスト中にモデルが継続的に変化する原因を調査する必要があります。</target>
        </trans-unit>
        <trans-unit id="a6327a6402c02d7879a52df32482acae297464b3" translate="yes" xml:space="preserve">
          <source>In general it's possible to apply more than one directive to one element, but there might be limitations depending on the type of scope required by the directives. The following points will help explain these limitations. For simplicity only two directives are taken into account, but it is also applicable for several directives:</source>
          <target state="translated">一般的には1つの要素に複数のディレクティブを適用することは可能ですが、ディレクティブが要求するスコープの種類によっては制限がある場合があります。以下のポイントで、これらの制限について説明します。単純化のために2つのディレクティブのみを考慮に入れていますが、複数のディレクティブに適用することも可能です。</target>
        </trans-unit>
        <trans-unit id="d65eb267b1b0354141999d7194c0a15d48c760f2" translate="yes" xml:space="preserve">
          <source>In general, a Controller shouldn't try to do too much. It should contain only the business logic needed for a single view.</source>
          <target state="translated">一般的に、コントローラはあまり多くのことをしようとするべきではありません。1つのビューに必要なビジネスロジックのみを含むべきです。</target>
        </trans-unit>
        <trans-unit id="12b68495b61d68a58ae4306b8d4fa6a9c7a5a8c9" translate="yes" xml:space="preserve">
          <source>In general, the match between the model and an option is evaluated by strictly comparing the model value against the value of the available options.</source>
          <target state="translated">一般的に、モデルとオプションの一致は、モデルの値と利用可能なオプションの値を厳密に比較することで評価されます。</target>
        </trans-unit>
        <trans-unit id="c9ab8714b380fd88731ce6a010864a6dad2a5821" translate="yes" xml:space="preserve">
          <source>In general, this applies only to filters that take &lt;a href=&quot;https://developer.mozilla.org/docs/Glossary/Primitive&quot;&gt;primitive values&lt;/a&gt; as inputs. Filters that receive &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Objects&quot;&gt;Objects&lt;/a&gt; as input are executed on each &lt;code&gt;$digest&lt;/code&gt;, as it would be too costly to track if the inputs have changed.</source>
          <target state="translated">一般に、これは&lt;a href=&quot;https://developer.mozilla.org/docs/Glossary/Primitive&quot;&gt;プリミティブ値&lt;/a&gt;を入力として受け取るフィルターにのみ適用されます。入力として&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Objects&quot;&gt;オブジェクト&lt;/a&gt;を受け取るフィルターは、各 &lt;code&gt;$digest&lt;/code&gt; で実行されます。これは、入力が変更されたかどうかを追跡するにはコストがかかりすぎるためです。</target>
        </trans-unit>
        <trans-unit id="223c150544e590c3b09b2f83432104d5c677b5fc" translate="yes" xml:space="preserve">
          <source>In its current implementation, we'd need to create a different controller each time in order to re-use such a directive:</source>
          <target state="translated">現在の実装では、このようなディレクティブを再利用するために、毎回別のコントローラを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="aaf87ac010abced2fa8d3d211eaa4cf5c460607b" translate="yes" xml:space="preserve">
          <source>In its default setup, ngAria for &lt;code&gt;ngShow&lt;/code&gt; is actually redundant. It toggles &lt;code&gt;aria-hidden&lt;/code&gt; on the directive when it is hidden or shown. However, the default CSS of &lt;code&gt;display: none !important&lt;/code&gt;, already hides child elements from a screen reader. It becomes more useful when the default CSS is overridden with properties that don&amp;rsquo;t affect assistive technologies, such as &lt;code&gt;opacity&lt;/code&gt; or &lt;code&gt;transform&lt;/code&gt;. By toggling &lt;code&gt;aria-hidden&lt;/code&gt; dynamically with ngAria, we can ensure content visually hidden with this technique will not be read aloud in a screen reader.</source>
          <target state="translated">デフォルト設定では、ngShowの &lt;code&gt;ngShow&lt;/code&gt; は実際には冗長です。ディレクティブが非表示または表示されている場合、ディレクティブで &lt;code&gt;aria-hidden&lt;/code&gt; を切り替えます。ただし、 &lt;code&gt;display: none !important&lt;/code&gt; のデフォルトCSS ：none！importantは、子要素をスクリーンリーダーから既に非表示にしています。デフォルトのCSSが、 &lt;code&gt;opacity&lt;/code&gt; や &lt;code&gt;transform&lt;/code&gt; などの支援技術に影響を及ぼさないプロパティでオーバーライドされていると、より便利になります。トグルすることによって &lt;code&gt;aria-hidden&lt;/code&gt; この技術は、スクリーンリーダーで読み上げられないだろうとngAriaで動的に、我々は視覚的に隠された内容を保証することができます。</target>
        </trans-unit>
        <trans-unit id="9ac48986b940877fd638b3f87daf87350f3cd59a" translate="yes" xml:space="preserve">
          <source>In many cases, &lt;a href=&quot;ngrepeat&quot;&gt;ngRepeat&lt;/a&gt; can be used on &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements instead of &lt;code&gt;ngOptions&lt;/code&gt; to achieve a similar result. However, &lt;code&gt;ngOptions&lt;/code&gt; provides some benefits:</source>
          <target state="translated">多くの場合、&lt;a href=&quot;ngrepeat&quot;&gt;ngOptionsの&lt;/a&gt;代わりに &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 要素で &lt;code&gt;ngOptions&lt;/code&gt; を使用して、同様の結果を得ることができます。ただし、 &lt;code&gt;ngOptions&lt;/code&gt; にはいくつかの利点があります。</target>
        </trans-unit>
        <trans-unit id="816f5a467069e8684ca6c8eac56b04421f4f9aac" translate="yes" xml:space="preserve">
          <source>In many cases, &lt;code&gt;ngRepeat&lt;/code&gt; can be used on &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements instead of &lt;a href=&quot;ngoptions&quot;&gt;ngOptions&lt;/a&gt; to achieve a similar result. However, &lt;code&gt;ngOptions&lt;/code&gt; provides some benefits:</source>
          <target state="translated">多くの場合、 &lt;code&gt;ngRepeat&lt;/code&gt; 代わりに &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 要素で&lt;a href=&quot;ngoptions&quot;&gt;ngRepeat&lt;/a&gt;を使用して、同様の結果を得ることができます。ただし、 &lt;code&gt;ngOptions&lt;/code&gt; にはいくつかの利点があります。</target>
        </trans-unit>
        <trans-unit id="23a74c3d278c8929951ba5893b635995005f8e65" translate="yes" xml:space="preserve">
          <source>In most cases, &lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt; and scopes interact but do not create new instances of scope. However, some directives, such as &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt; and &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ng-repeat&lt;/a&gt;, create new child scopes and attach the child scope to the corresponding DOM element.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;../api/ng/provider/%24compileprovider#directive.html&quot;&gt;ディレクティブ&lt;/a&gt;とスコープは相互作用しますが、スコープの新しいインスタンスを作成しません。ただし、&lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt;や&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;ng-repeat&lt;/a&gt;などの一部のディレクティブは、新しい子スコープを作成し、対応するDOM要素に子スコープをアタッチします。</target>
        </trans-unit>
        <trans-unit id="a6d61eeade717370e6792f08603d2f769bf7909b" translate="yes" xml:space="preserve">
          <source>In order for &lt;code&gt;yOffset&lt;/code&gt; to work properly, scrolling should take place on the document's root and not some child element.</source>
          <target state="translated">&lt;code&gt;yOffset&lt;/code&gt; が正しく機能するためには、スクロールは、子要素ではなくドキュメントのルートで行われる必要があります。</target>
        </trans-unit>
        <trans-unit id="43159b000f095713d7995347d0aa0418f3baf129" translate="yes" xml:space="preserve">
          <source>In order for custom control to work with &lt;code&gt;ngModel&lt;/code&gt; and to achieve two-way data-binding it needs to:</source>
          <target state="translated">カスタムコントロールが &lt;code&gt;ngModel&lt;/code&gt; と連携して双方向のデータバインディングを実現するには、次のことが必要です。</target>
        </trans-unit>
        <trans-unit id="93e76425878be6a245b2b5122baa300334e1d96a" translate="yes" xml:space="preserve">
          <source>In order for the injector to know how to create and wire together all of these objects, it needs a registry of &quot;recipes&quot;. Each recipe has an identifier of the object and the description of how to create this object.</source>
          <target state="translated">インジェクターがこれらのオブジェクトを作成して配線する方法を知るためには、&quot;レシピ &quot;のレジストリが必要です。各レシピにはオブジェクトの識別子と、このオブジェクトの作成方法の説明があります。</target>
        </trans-unit>
        <trans-unit id="41ca1c0cfc3250833efe87b946e6688542d335f0" translate="yes" xml:space="preserve">
          <source>In order to answer such a question it is very important that we can isolate the unit of code under test. That is because when we are testing the sort function we don't want to be forced into creating related pieces such as the DOM elements, or making any XHR calls to fetch the data to sort.</source>
          <target state="translated">このような質問に答えるためには、テスト中のコードの単位を分離することが非常に重要です。ソート関数をテストしているときに、DOM 要素のような関連部分を作成したり、ソートするデータを取得するために XHR 呼び出しをしたりすることを余儀なくされたくないからです。</target>
        </trans-unit>
        <trans-unit id="83939e2bc9f9e5b599175fbfb5fec4456c3a2747" translate="yes" xml:space="preserve">
          <source>In order to enable animations the &lt;code&gt;ngAnimate&lt;/code&gt; module has to be loaded.</source>
          <target state="translated">アニメーションを有効にするには、 &lt;code&gt;ngAnimate&lt;/code&gt; モジュールをロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="d6563365aaa2bf57b65af1a6e2ab56f748edc001" translate="yes" xml:space="preserve">
          <source>In order to ensure that the sorting will be deterministic across platforms, if none of the specified predicates can distinguish between two items, &lt;code&gt;orderBy&lt;/code&gt; will automatically introduce a dummy predicate that returns the item's index as &lt;code&gt;value&lt;/code&gt;. (If you are using a custom comparator, make sure it can handle this predicate as well.)</source>
          <target state="translated">指定された述語のいずれも2つの項目を区別できない場合、ソートがプラットフォーム間で確実にソートされるようにするために、 &lt;code&gt;orderBy&lt;/code&gt; は自動的に、項目のインデックスを &lt;code&gt;value&lt;/code&gt; として返すダミー述語を導入します。（カスタムコンパレーターを使用している場合は、それがこの述語も処理できることを確認してください。）</target>
        </trans-unit>
        <trans-unit id="ba07d896b98bd38aa92e1a51979d43b5762c90ac" translate="yes" xml:space="preserve">
          <source>In order to make the definition easier, components enforce best practices like use of &lt;code&gt;controllerAs&lt;/code&gt;, &lt;code&gt;bindToController&lt;/code&gt;. They always have &lt;strong&gt;isolate scope&lt;/strong&gt; and are restricted to elements.</source>
          <target state="translated">定義を容易にするために、コンポーネントは &lt;code&gt;controllerAs&lt;/code&gt; 、 &lt;code&gt;bindToController&lt;/code&gt; の使用などのベストプラクティスを適用します。それらは常に&lt;strong&gt;分離スコープ&lt;/strong&gt;を持ち、要素に制限されています。</target>
        </trans-unit>
        <trans-unit id="92f3760b5ddb703592c1c344abf1808f65b67a46" translate="yes" xml:space="preserve">
          <source>In order to prevent collisions in environments where multiple AngularJS apps share the same domain or subdomain, we recommend that each application uses a unique cookie name.</source>
          <target state="translated">複数のAngularJSアプリが同じドメインやサブドメインを共有している環境での衝突を防ぐために、それぞれのアプリで固有のクッキー名を使用することを推奨しています。</target>
        </trans-unit>
        <trans-unit id="c431fcb3d2dd29f9f6877e5863d11e1c5282ac1f" translate="yes" xml:space="preserve">
          <source>In order to react to events or execute computation in the view we must provide behavior to the scope. We add behavior to the scope by attaching methods to the &lt;code&gt;$scope&lt;/code&gt; object. These methods are then available to be called from the template/view.</source>
          <target state="translated">イベントに反応したり、ビューで計算を実行したりするには、スコープに動作を提供する必要があります。 &lt;code&gt;$scope&lt;/code&gt; オブジェクトにメソッドをアタッチすることにより、スコープに動作を追加します。これらのメソッドは、テンプレート/ビューから呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="64d69397877d61d2ffddceb4be6f794cc00dd86f" translate="yes" xml:space="preserve">
          <source>In order to show error messages corresponding to &lt;code&gt;myField&lt;/code&gt; we first create an element with an &lt;code&gt;ngMessages&lt;/code&gt; attribute set to the &lt;code&gt;$error&lt;/code&gt; object owned by the &lt;code&gt;myField&lt;/code&gt; input in our &lt;code&gt;myForm&lt;/code&gt; form.</source>
          <target state="translated">&lt;code&gt;myField&lt;/code&gt; に対応するエラーメッセージを表示するために、最初に &lt;code&gt;ngMessages&lt;/code&gt; 属性を &lt;code&gt;myForm&lt;/code&gt; フォームの &lt;code&gt;myField&lt;/code&gt; 入力が所有する &lt;code&gt;$error&lt;/code&gt; オブジェクトに設定した要素を作成します。</target>
        </trans-unit>
        <trans-unit id="38ca262d53b30c1c185b66f2480b52ad395cd555" translate="yes" xml:space="preserve">
          <source>In order to:</source>
          <target state="translated">そのためには</target>
        </trans-unit>
        <trans-unit id="cee56acce42439af4e48556eac71fd143eec3563" translate="yes" xml:space="preserve">
          <source>In our &lt;code&gt;link&lt;/code&gt; function, we want to update the displayed time once a second, or whenever a user changes the time formatting string that our directive binds to. We will use the &lt;code&gt;$interval&lt;/code&gt; service to call a handler on a regular basis. This is easier than using &lt;code&gt;$timeout&lt;/code&gt; but also works better with end-to-end testing, where we want to ensure that all &lt;code&gt;$timeout&lt;/code&gt;s have completed before completing the test. We also want to remove the &lt;code&gt;$interval&lt;/code&gt; if the directive is deleted so we don't introduce a memory leak.</source>
          <target state="translated">当社では &lt;code&gt;link&lt;/code&gt; 機能、我々は、第二一度表示された時間を更新する、またはユーザーは、当社の指示が結合することを、文字列の書式を設定時間を変更するたびに。 &lt;code&gt;$interval&lt;/code&gt; サービスを使用して、定期的にハンドラーを呼び出します。これは &lt;code&gt;$timeout&lt;/code&gt; を使用するよりも簡単ですが、エンドツーエンドのテストでもうまく機能します。テストを完了する前にすべての &lt;code&gt;$timeout&lt;/code&gt; が完了していることを確認する必要があります。また、ディレクティブが削除された場合は &lt;code&gt;$interval&lt;/code&gt; を削除して、メモリリークを導入しないようにします。</target>
        </trans-unit>
        <trans-unit id="46cfb3934a0deeee576ac8393203dd312b39eb1f" translate="yes" xml:space="preserve">
          <source>In practice</source>
          <target state="translated">実際には</target>
        </trans-unit>
        <trans-unit id="23f474e3365b6841390e2d04f8b7b183101fc5b0" translate="yes" xml:space="preserve">
          <source>In practice, flickering can appear when nesting elements with structural animations such as &lt;code&gt;ngIf&lt;/code&gt; into elements that have class-based animations such as &lt;code&gt;ngClass&lt;/code&gt;.</source>
          <target state="translated">実際には、 &lt;code&gt;ngIf&lt;/code&gt; などの構造アニメーションを持つ要素を、 &lt;code&gt;ngClass&lt;/code&gt; などのクラスベースのアニメーションを持つ要素にネストすると、ちらつきが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="4b6b3f1479d15949f893579bddd17a5c4695b028" translate="yes" xml:space="preserve">
          <source>In privileged contexts, directives and code will bind to the result of &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$sce.getTrusted(context, value)&lt;/a&gt; rather than to the value directly. Think of this function as a way to enforce the required security context in your data sink. Directives use &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;$sce.parseAs&lt;/a&gt; rather than &lt;code&gt;$parse&lt;/code&gt; to watch attribute bindings, which performs the &lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;$sce.getTrusted&lt;/a&gt; behind the scenes on non-constant literals. Also, when binding without directives, AngularJS will understand the context of your bindings automatically.</source>
          <target state="translated">特権コンテキストでは、ディレクティブとコードは、値に直接バインドするのではなく&lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;、$ sce.getTrusted（context、value）&lt;/a&gt;の結果にバインドします。この関数は、データシンクに必要なセキュリティコンテキストを適用する方法と考えてください。ディレクティブは、使用&lt;a href=&quot;%24sce#parseAs.html&quot;&gt;$ sce.parseAsを&lt;/a&gt;するのではなく &lt;code&gt;$parse&lt;/code&gt; 実行属性バインディング、見て&lt;a href=&quot;%24sce#getTrusted.html&quot;&gt;sce.getTrusted $&lt;/a&gt;非定数リテラルで舞台裏を。また、ディレクティブなしでバインドすると、AngularJSはバインドのコンテキストを自動的に理解します。</target>
        </trans-unit>
        <trans-unit id="ad0a78c7ea83ece459db4a6b9e0ec41e1d081220" translate="yes" xml:space="preserve">
          <source>In some cases you can also rely upon automatic sanitization of untrusted values - see below.</source>
          <target state="translated">場合によっては、信頼されていない値の自動サニタイズに頼ることもできます。</target>
        </trans-unit>
        <trans-unit id="ced5561a26558d4d24bd44d63f6ee1bbb96f6f9e" translate="yes" xml:space="preserve">
          <source>In templates, filters are only executed when their inputs have changed. This is more performant than executing a filter on each &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;&lt;code&gt;$digest&lt;/code&gt;&lt;/a&gt; as is the case with &lt;a href=&quot;expression&quot;&gt;expressions&lt;/a&gt;.</source>
          <target state="translated">テンプレートでは、入力が変更されたときにのみフィルターが実行されます。これは、&lt;a href=&quot;expression&quot;&gt;式&lt;/a&gt;の場合のように、各&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt; &lt;code&gt;$digest&lt;/code&gt; &lt;/a&gt;フィルターを実行するよりもパフォーマンスが高くなります。</target>
        </trans-unit>
        <trans-unit id="b3df173ca7c9246d6aeebf7b82e7ed92a41a33d7" translate="yes" xml:space="preserve">
          <source>In tests you can use &lt;a href=&quot;../../ngmock/service/%24interval#flush.html&quot;&gt;&lt;code&gt;$interval.flush(millis)&lt;/code&gt;&lt;/a&gt; to move forward by &lt;code&gt;millis&lt;/code&gt; milliseconds and trigger any functions scheduled to run in that time.</source>
          <target state="translated">テストでは、&lt;a href=&quot;../../ngmock/service/%24interval#flush.html&quot;&gt; &lt;code&gt;$interval.flush(millis)&lt;/code&gt; &lt;/a&gt;を使用してミリ秒ミリ秒だけ先に &lt;code&gt;millis&lt;/code&gt; 、その時間に実行するようにスケジュールされた関数をトリガーできます。</target>
        </trans-unit>
        <trans-unit id="e6d6b4db41ec26c414ad5cfb1ba6c62e946416d6" translate="yes" xml:space="preserve">
          <source>In tests you can use &lt;a href=&quot;../../ngmock/service/%24timeout&quot;&gt;&lt;code&gt;$timeout.flush()&lt;/code&gt;&lt;/a&gt; to synchronously flush the queue of deferred functions.</source>
          <target state="translated">テストでは、&lt;a href=&quot;../../ngmock/service/%24timeout&quot;&gt; &lt;code&gt;$timeout.flush()&lt;/code&gt; &lt;/a&gt;を使用して、遅延関数のキューを同期的にフラッシュできます。</target>
        </trans-unit>
        <trans-unit id="9afa5f460758c21238a4ac6be52ef14781fd6696" translate="yes" xml:space="preserve">
          <source>In that case, it is necessary to intercept the &lt;em&gt;initial&lt;/em&gt; compilation of the element:</source>
          <target state="translated">その場合、要素の&lt;em&gt;初期&lt;/em&gt;コンパイルをインターセプトする必要があります。</target>
        </trans-unit>
        <trans-unit id="f664cca1d4ca20781d1fa172027d128144824737" translate="yes" xml:space="preserve">
          <source>In the above example &lt;code&gt;SomeClass&lt;/code&gt; is not concerned with creating or locating the &lt;code&gt;greeter&lt;/code&gt; dependency, it is simply handed the &lt;code&gt;greeter&lt;/code&gt; when it is instantiated.</source>
          <target state="translated">上記の例では、 &lt;code&gt;SomeClass&lt;/code&gt; は &lt;code&gt;greeter&lt;/code&gt; 依存関係の作成や検索には関係がなく、インスタンス化されるときに単に &lt;code&gt;greeter&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="d6351961d5f7c7bedc28b2fb3f9404a2fa13777f" translate="yes" xml:space="preserve">
          <source>In the above example notice that the &lt;code&gt;MyController&lt;/code&gt; assigns &lt;code&gt;World&lt;/code&gt; to the &lt;code&gt;username&lt;/code&gt; property of the scope. The scope then notifies the &lt;code&gt;input&lt;/code&gt; of the assignment, which then renders the input with username pre-filled. This demonstrates how a controller can write data into the scope.</source>
          <target state="translated">上記の例では、 &lt;code&gt;MyController&lt;/code&gt; が &lt;code&gt;World&lt;/code&gt; をスコープの &lt;code&gt;username&lt;/code&gt; プロパティに割り当てていることに注意してください。次に、スコープは割り当ての &lt;code&gt;input&lt;/code&gt; を通知し、ユーザー名が事前に入力された入力をレンダリングします。これは、コントローラーがスコープにデータを書き込む方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e594bf894541dbfbfa549d5ac280e9f9712c2570" translate="yes" xml:space="preserve">
          <source>In the case of AngularJS' SCE service, one uses &lt;a href=&quot;%24sce#trustAs.html&quot;&gt;$sce.trustAs&lt;/a&gt; (and shorthand methods such as &lt;a href=&quot;%24sce#trustAsHtml.html&quot;&gt;$sce.trustAsHtml&lt;/a&gt;, etc.) to build the trusted versions of your values.</source>
          <target state="translated">AngularJS」SCEサービス、1用途の場合は&lt;a href=&quot;%24sce#trustAs.html&quot;&gt;$ sce.trustAs&lt;/a&gt;（などと速記方法&lt;a href=&quot;%24sce#trustAsHtml.html&quot;&gt;$ sce.trustAsHtml&lt;/a&gt;自分の価値観の信頼されたバージョンを構築するなど、）。</target>
        </trans-unit>
        <trans-unit id="959810922e73332af4b6023c346f0a5b1acbe45e" translate="yes" xml:space="preserve">
          <source>In the code above, we see how the &lt;code&gt;apiToken&lt;/code&gt; service is defined via the Factory recipe that depends on the &lt;code&gt;clientId&lt;/code&gt; service. The factory service then uses NSA-proof encryption to produce an authentication token.</source>
          <target state="translated">上記のコードでは、 &lt;code&gt;apiToken&lt;/code&gt; サービスに依存するFactoryレシピを介してapiTokenサービスがどのように定義されているかが &lt;code&gt;clientId&lt;/code&gt; ます。次に、ファクトリサービスはNSAに耐える暗号化を使用して認証トークンを生成します。</target>
        </trans-unit>
        <trans-unit id="84f8e46a5ef8dfd7b5fa4f69ef21284f0f989e10" translate="yes" xml:space="preserve">
          <source>In the example HTML code above the message that is set on required will override the corresponding required message defined within the remote template. Therefore, with particular input fields (such email addresses, date fields, autocomplete inputs, etc...), specialized error messages can be applied while more generic messages can be used to handle other, more general input errors.</source>
          <target state="translated">上記のHTMLコードの例では、requiredに設定されたメッセージは、リモートテンプレート内で定義された対応するrequiredメッセージを上書きします。したがって、特定の入力フィールド(メールアドレス、日付フィールド、オートコンプリート入力など)では、特殊なエラーメッセージを適用することができますが、より一般的なメッセージは他のより一般的な入力エラーを処理するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="fd65d4b7c7659da1f46b3e642c3fddcc6b9572ba" translate="yes" xml:space="preserve">
          <source>In the example above we in-lined the value of the &lt;code&gt;template&lt;/code&gt; option, but this will become annoying as the size of your template grows.</source>
          <target state="translated">上記の例では、 &lt;code&gt;template&lt;/code&gt; オプションの値をインライン化しましたが、テンプレートのサイズが大きくなると、これは面倒になります。</target>
        </trans-unit>
        <trans-unit id="4ea40c9ac185962c5537c5bf56297794190e4724" translate="yes" xml:space="preserve">
          <source>In the example above: The template contains the directive &lt;code&gt;ng-app=&quot;invoice2&quot;&lt;/code&gt;. This tells AngularJS to use the &lt;code&gt;invoice2&lt;/code&gt; module as the main module for the application. The code snippet &lt;code&gt;angular.module('invoice2', ['finance2'])&lt;/code&gt; specifies that the &lt;code&gt;invoice2&lt;/code&gt; module depends on the &lt;code&gt;finance2&lt;/code&gt; module. By this, AngularJS uses the &lt;code&gt;InvoiceController&lt;/code&gt; as well as the &lt;code&gt;currencyConverter&lt;/code&gt; service.</source>
          <target state="translated">上記の例では：テンプレートには &lt;code&gt;ng-app=&quot;invoice2&quot;&lt;/code&gt; ディレクティブが含まれています。これは、アプリケーションのメインモジュールとして &lt;code&gt;invoice2&lt;/code&gt; モジュールを使用するようにAngularJSに指示します。コードスニペット &lt;code&gt;angular.module('invoice2', ['finance2'])&lt;/code&gt; ことを指定 &lt;code&gt;invoice2&lt;/code&gt; モジュールが依存 &lt;code&gt;finance2&lt;/code&gt; モジュール。これにより、AngularJSは &lt;code&gt;InvoiceController&lt;/code&gt; と &lt;code&gt;currencyConverter&lt;/code&gt; サービスを使用します。</target>
        </trans-unit>
        <trans-unit id="06c6dacfa62f890f4ce330dacbb04a271d1a5f52" translate="yes" xml:space="preserve">
          <source>In the example below if the &lt;code&gt;ngApp&lt;/code&gt; directive were not placed on the &lt;code&gt;html&lt;/code&gt; element then the document would not be compiled, the &lt;code&gt;AppController&lt;/code&gt; would not be instantiated and the &lt;code&gt;{{ a+b }}&lt;/code&gt; would not be resolved to &lt;code&gt;3&lt;/code&gt;.</source>
          <target state="translated">以下の例では、 &lt;code&gt;ngApp&lt;/code&gt; ディレクティブが &lt;code&gt;html&lt;/code&gt; 要素に配置されていない場合、ドキュメントはコンパイルされず、 &lt;code&gt;AppController&lt;/code&gt; はインスタンス化されず、 &lt;code&gt;{{ a+b }}&lt;/code&gt; は &lt;code&gt;3&lt;/code&gt; に解決されません。</target>
        </trans-unit>
        <trans-unit id="f0733690aa73762a66daf4ab130eb29e196bfdd6" translate="yes" xml:space="preserve">
          <source>In the example below we are testing a service that takes a long time to generate its answer. To avoid having all of the assertions we want to write in a single test case, &lt;a href=&quot;../api/ngmock/function/angular.mock.module.sharedinjector&quot;&gt;module.sharedInjector()&lt;/a&gt; and Jasmine's &lt;code&gt;beforeAll()&lt;/code&gt; are used to run the service only once. The test cases then all make assertions about the properties added to the service instance.</source>
          <target state="translated">以下の例では、応答の生成に時間がかかるサービスをテストしています。単一のテストケースで記述したいすべてのアサーションを回避するために、&lt;a href=&quot;../api/ngmock/function/angular.mock.module.sharedinjector&quot;&gt;module.sharedInjector（）&lt;/a&gt;とJasmineの &lt;code&gt;beforeAll()&lt;/code&gt; を使用して、サービスを1回だけ実行します。次に、テストケースはすべて、サービスインスタンスに追加されたプロパティに関するアサーションを作成します。</target>
        </trans-unit>
        <trans-unit id="bab3c31c5347dae0fee8eb746e2e91d85348416e" translate="yes" xml:space="preserve">
          <source>In the example, &lt;code&gt;&quot;0: Nobody is viewing.&quot;&lt;/code&gt; is an explicit number rule. If you did not specify this rule, 0 would be matched to the &quot;other&quot; category and &quot;0 people are viewing&quot; would be shown instead of &quot;Nobody is viewing&quot;. You can specify an explicit number rule for other numbers, for example 12, so that instead of showing &quot;12 people are viewing&quot;, you can show &quot;a dozen people are viewing&quot;.</source>
          <target state="translated">例では、 &lt;code&gt;&quot;0: Nobody is viewing.&quot;&lt;/code&gt; 明示的な数値規則です。このルールを指定しなかった場合、0は「その他」カテゴリに一致し、「誰も表示していない」の代わりに「0人が表示中」が表示されます。他の数値（12など）に明示的な数値ルールを指定して、「12人が表示している」ではなく「12人が表示している」と表示することができます。</target>
        </trans-unit>
        <trans-unit id="9240f6b392f9f24d3f0cc0e6e9f1b6f87bdaa61f" translate="yes" xml:space="preserve">
          <source>In the example, note that:</source>
          <target state="translated">例では、そのことに注意してください。</target>
        </trans-unit>
        <trans-unit id="84ff38ef3acedf57990298f438e0044989906ff2" translate="yes" xml:space="preserve">
          <source>In the following example a new block of HTML containing a &lt;code&gt;ng-controller&lt;/code&gt; directive is added to the end of the document body by JQuery. We then compile and link it into the current AngularJS scope.</source>
          <target state="translated">次の例では、 &lt;code&gt;ng-controller&lt;/code&gt; ディレクティブを含むHTMLの新しいブロックが、JQueryによってドキュメント本文の最後に追加されます。次に、それをコンパイルして現在のAngularJSスコープにリンクします。</target>
        </trans-unit>
        <trans-unit id="e5310456ee5d9fc9becb78c6016bab204fd72bf8" translate="yes" xml:space="preserve">
          <source>In the following example we create two directives:</source>
          <target state="translated">次の例では、2つのディレクティブを作成します。</target>
        </trans-unit>
        <trans-unit id="e5133af465b2e35bb8a87b952a090800d0de494d" translate="yes" xml:space="preserve">
          <source>In the following example we will build a form to calculate the costs of an invoice in different currencies.</source>
          <target state="translated">次の例では、異なる通貨で請求書のコストを計算するフォームを作成します。</target>
        </trans-unit>
        <trans-unit id="77918f42e8ba84df32a20e6ed8fa56c3f1646559" translate="yes" xml:space="preserve">
          <source>In the following example, the interpolation information would be ignored and the browser would simply interpret the attribute as present, meaning that the button would always be disabled.</source>
          <target state="translated">次の例では、補間情報は無視され、ブラウザは単に属性が存在すると解釈し、ボタンが常に無効になることを意味します。</target>
        </trans-unit>
        <trans-unit id="efef16f2696255d51f1a599a09667ffbb53142df" translate="yes" xml:space="preserve">
          <source>In the following example, we say that the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element &lt;strong&gt;matches&lt;/strong&gt; the &lt;code&gt;ngModel&lt;/code&gt; directive</source>
          <target state="translated">次の例では、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 要素が &lt;code&gt;ngModel&lt;/code&gt; ディレクティブに&lt;strong&gt;一致&lt;/strong&gt;するとします</target>
        </trans-unit>
        <trans-unit id="79560f8749a4459cf00c1e8ac63200d2b09c35ab" translate="yes" xml:space="preserve">
          <source>In the link function, link the compiled element with the element's scope.</source>
          <target state="translated">link関数では、コンパイルされた要素とその要素のスコープをリンクします。</target>
        </trans-unit>
        <trans-unit id="cae02af11dc52e4c34dfd155a0e09f2c35b21656" translate="yes" xml:space="preserve">
          <source>In the new JavaScript file we are also creating a &lt;a href=&quot;concepts#module.html&quot;&gt;module&lt;/a&gt; at which we register the controller. We will talk about modules in the next section.</source>
          <target state="translated">新しいJavaScriptファイルでは、コントローラーを登録する&lt;a href=&quot;concepts#module.html&quot;&gt;モジュール&lt;/a&gt;も作成しています。モジュールについては次のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="ddb9bac8dbb551492f9275fbd24cd7951d7d8c0c" translate="yes" xml:space="preserve">
          <source>In these examples we use &lt;code&gt;&amp;lt;base href=&quot;/base/index.html&quot; /&amp;gt;&lt;/code&gt;. The inputs represent the address bar of the browser.</source>
          <target state="translated">これらの例では、 &lt;code&gt;&amp;lt;base href=&quot;/base/index.html&quot; /&amp;gt;&lt;/code&gt; を使用しています。入力は、ブラウザのアドレスバーを表します。</target>
        </trans-unit>
        <trans-unit id="b67dc576ed7fd6345e84f4eb6c7018ca4bfbcc4f" translate="yes" xml:space="preserve">
          <source>In this case, you can use &lt;code&gt;$rollbackViewValue()&lt;/code&gt; to manually cancel the debounced / future update and reset the input to the last committed view value.</source>
          <target state="translated">この場合、 &lt;code&gt;$rollbackViewValue()&lt;/code&gt; を使用して、デバウンスされた/将来の更新を手動でキャンセルし、入力を最後にコミットされたビューの値にリセットできます。</target>
        </trans-unit>
        <trans-unit id="6505ab30bfaaaac0b15030b3f3986050a80340d6" translate="yes" xml:space="preserve">
          <source>In this case, you need to override the default currency symbol by providing the &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;&lt;code&gt;currency&lt;/code&gt;&lt;/a&gt; currency filter with a currency symbol as a parameter.</source>
          <target state="translated">この場合、パラメーターとして通貨記号を使用して&lt;a href=&quot;../api/ng/filter/currency&quot;&gt; &lt;code&gt;currency&lt;/code&gt; &lt;/a&gt;通貨フィルターを提供することにより、デフォルトの通貨記号をオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="14e832106d47cd2398f7a2e9a5e870b31e8b80af" translate="yes" xml:space="preserve">
          <source>In this example there are two locations where a simple interpolation binding (&lt;code&gt;{{}}&lt;/code&gt;) is present, but the one wrapped in &lt;code&gt;ngNonBindable&lt;/code&gt; is left alone.</source>
          <target state="translated">この例では、単純な補間バインディング（ &lt;code&gt;{{}}&lt;/code&gt; ）が存在する場所が2つありますが、 &lt;code&gt;ngNonBindable&lt;/code&gt; でラップされた場所はそのままです。</target>
        </trans-unit>
        <trans-unit id="4d3a54eba3caaff060cebf9bc0469b28b7141602" translate="yes" xml:space="preserve">
          <source>In this example we create a custom method on our resource to make a PUT request:</source>
          <target state="translated">この例では、リソースにカスタムメソッドを作成してPUTリクエストを行います。</target>
        </trans-unit>
        <trans-unit id="6899b61e7576501948474a864710fc73cabc4d8a" translate="yes" xml:space="preserve">
          <source>In this example we will build a directive that displays the current time. Once a second, it updates the DOM to reflect the current time.</source>
          <target state="translated">この例では、現在の時刻を表示するディレクティブを作ります。一秒に一度、現在の時刻を反映するように DOM を更新します。</target>
        </trans-unit>
        <trans-unit id="4439980cd7f8e616e932b5cf07209756402b8a31" translate="yes" xml:space="preserve">
          <source>In this example, we've used the Value recipe to define the value to provide when &lt;code&gt;DemoController&lt;/code&gt; asks for the service with id &quot;clientId&quot;.</source>
          <target state="translated">この例では、Valueレシピを使用して、 &lt;code&gt;DemoController&lt;/code&gt; がID &quot;clientId&quot;のサービスを要求したときに提供する値を定義しています。</target>
        </trans-unit>
        <trans-unit id="7a7d32308b0ce66221de3ff0ef1900cca2184aa8" translate="yes" xml:space="preserve">
          <source>In this mode, &lt;code&gt;$location&lt;/code&gt; uses Hashbang URLs in all browsers. AngularJS also does not intercept and rewrite links in this mode. I.e. links work as expected and also perform full page reloads when other parts of the url than the hash fragment was changed.</source>
          <target state="translated">このモードでは、 &lt;code&gt;$location&lt;/code&gt; はすべてのブラウザーでHashbang URLを使用します。このモードでは、AngularJSはリンクのインターセプトや書き換えも行いません。つまり、リンクは期待どおりに機能し、ハッシュフラグメント以外のURLの部分が変更されたときにページ全体の再読み込みを実行します。</target>
        </trans-unit>
        <trans-unit id="5becec1b89211dd88c512f01dd020136e19e6976" translate="yes" xml:space="preserve">
          <source>In this scenario the ordering of the values in the &lt;code&gt;$inject&lt;/code&gt; array must match the ordering of the parameters in &lt;code&gt;MyController&lt;/code&gt;.</source>
          <target state="translated">このシナリオでは、 &lt;code&gt;$inject&lt;/code&gt; 配列の値の順序は、 &lt;code&gt;MyController&lt;/code&gt; のパラメーターの順序と一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="13f2a9a690a1e6a57d2a22be202ab6f40a5e27bc" translate="yes" xml:space="preserve">
          <source>In unit tests, if &lt;code&gt;angular-mocks.js&lt;/code&gt; is loaded, this service is overridden by &lt;a href=&quot;../../ngmock/service/%24exceptionhandler&quot;&gt;mock $exceptionHandler&lt;/a&gt; which aids in testing.</source>
          <target state="translated">単体テストでは、 &lt;code&gt;angular-mocks.js&lt;/code&gt; が読み込まれると、このサービスはテストを支援する&lt;a href=&quot;../../ngmock/service/%24exceptionhandler&quot;&gt;モック$ exceptionHandler&lt;/a&gt;によってオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="f65268ee4fca5a690bd7ec3d41fb1bec92988ebd" translate="yes" xml:space="preserve">
          <source>In unit tests, you may need to call &lt;code&gt;$digest()&lt;/code&gt; to simulate the scope life cycle.</source>
          <target state="translated">単体テストでは、スコープのライフサイクルをシミュレートするために &lt;code&gt;$digest()&lt;/code&gt; を呼び出す必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="1175103ab9a357b144d5afd8b6a34c7357be8f89" translate="yes" xml:space="preserve">
          <source>Include &lt;code&gt;angular_1_router.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">HTMLに &lt;code&gt;angular_1_router.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="eee121d0108cf587e09cedc45732972ef8bcd660" translate="yes" xml:space="preserve">
          <source>Including ngAria</source>
          <target state="translated">ngAriaを含む</target>
        </trans-unit>
        <trans-unit id="97ab23190c81b3035d6f0736f1e943af6dedb556" translate="yes" xml:space="preserve">
          <source>Including the &lt;code&gt;angular-mocks.js&lt;/code&gt; file automatically adds the &lt;code&gt;ngMock&lt;/code&gt; module, so your tests are ready to go!</source>
          <target state="translated">&lt;code&gt;angular-mocks.js&lt;/code&gt; ファイルを含めると、 &lt;code&gt;ngMock&lt;/code&gt; モジュールが自動的に追加されるので、テストを開始する準備が整います。</target>
        </trans-unit>
        <trans-unit id="022e67bfe4c9d31f23e277e933c1ffc2d7b2553f" translate="yes" xml:space="preserve">
          <source>Incorrect scope on replaced element: &lt;a href=&quot;https://github.com/angular/angular.js/issues/9837&quot;&gt;#9837&lt;/a&gt;</source>
          <target state="translated">置き換えられた要素の不適切なスコープ：&lt;a href=&quot;https://github.com/angular/angular.js/issues/9837&quot;&gt;＃9837&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4bc6cb47d35d34b7a2afa7d59d3ad1affaa2fd4d" translate="yes" xml:space="preserve">
          <source>Increasing the TTL could have performance implications, so you should not change it without proper justification.</source>
          <target state="translated">TTLを上げるとパフォーマンスに影響を与える可能性があるので、正当な理由なく変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="fe65a117b989a572706242b27f193dcbfe4cccb2" translate="yes" xml:space="preserve">
          <source>Index at which to begin limitation. As a negative index, &lt;code&gt;begin&lt;/code&gt; indicates an offset from the end of &lt;code&gt;input&lt;/code&gt;. Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">制限を開始するインデックス。負のインデックスとして、 &lt;code&gt;begin&lt;/code&gt; は &lt;code&gt;input&lt;/code&gt; の終わりからのオフセットを示します。デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="be561e9cda308e941f15c8f2d92167d741116500" translate="yes" xml:space="preserve">
          <source>Inference</source>
          <target state="translated">Inference</target>
        </trans-unit>
        <trans-unit id="e3429591e14050c72d5c0051bbbbd1a28af8277c" translate="yes" xml:space="preserve">
          <source>Information about the module</source>
          <target state="translated">モジュールに関する情報</target>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="5dfb1d0123ddef5f4f1709bff3cd4b6a227f90d4" translate="yes" xml:space="preserve">
          <source>Inheritance works with methods in the same way as it does with properties. So in our previous examples, all of the properties could be replaced with methods that return string values.</source>
          <target state="translated">継承はプロパティと同じようにメソッドでも動作します。ですから、先ほどの例では、すべてのプロパティを文字列の値を返すメソッドに置き換えることができました。</target>
        </trans-unit>
        <trans-unit id="0b0ccb7ae52acb2325f9958f72c6588fcb209c80" translate="yes" xml:space="preserve">
          <source>Inheriting Options</source>
          <target state="translated">オプションの継承</target>
        </trans-unit>
        <trans-unit id="96a10dd68557ab7a42e636872dcf0b6dfbfa7c5b" translate="yes" xml:space="preserve">
          <source>Injection Function Annotation</source>
          <target state="translated">注入機能アノテーション</target>
        </trans-unit>
        <trans-unit id="a9fff665a0f0f15d16e0d15e587df45688563f62" translate="yes" xml:space="preserve">
          <source>Injection locals for Controller.</source>
          <target state="translated">コントローラー用のインジェクションローカル。</target>
        </trans-unit>
        <trans-unit id="2ca8a0d344a0e19a0d77c7ff904b9681383397eb" translate="yes" xml:space="preserve">
          <source>Injector</source>
          <target state="translated">Injector</target>
        </trans-unit>
        <trans-unit id="79f0f713c81b40636682b05fc5367727bac538b1" translate="yes" xml:space="preserve">
          <source>Injector API</source>
          <target state="translated">インジェクタAPI</target>
        </trans-unit>
        <trans-unit id="14473111235c870eaff95fa0c0269e33135347df" translate="yes" xml:space="preserve">
          <source>Injector object. See &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;.</source>
          <target state="translated">インジェクターオブジェクト。&lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injectorを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2e347f4ceb23a6d8637cc8028fda9ad8c7b7c47f" translate="yes" xml:space="preserve">
          <source>Inline</source>
          <target state="translated">Inline</target>
        </trans-unit>
        <trans-unit id="925743fe777d805151236206dc7c89eab96a1877" translate="yes" xml:space="preserve">
          <source>Inline Array Annotation</source>
          <target state="translated">インライン配列アノテーション</target>
        </trans-unit>
        <trans-unit id="6b04e7cb97df1376cafddfa71719f04eb50b9a6e" translate="yes" xml:space="preserve">
          <source>Input elements using ngModelController do this automatically when they are destroyed.</source>
          <target state="translated">ngModelController を使用した入力要素は、破棄されたときに自動的にこれを行います。</target>
        </trans-unit>
        <trans-unit id="746797b58353ee493a111e047d8432803b2bf4f0" translate="yes" xml:space="preserve">
          <source>Input text.</source>
          <target state="translated">テキストを入力します。</target>
        </trans-unit>
        <trans-unit id="5e4c6a9c5fc75d66498cf6d23beea81ac1405c3b" translate="yes" xml:space="preserve">
          <source>Input to be serialized into JSON.</source>
          <target state="translated">JSONにシリアライズされる入力。</target>
        </trans-unit>
        <trans-unit id="36c92f17e709bebc8508b025911cc23c819f2bdc" translate="yes" xml:space="preserve">
          <source>Input to filter.</source>
          <target state="translated">フィルターに入力します。</target>
        </trans-unit>
        <trans-unit id="8623e06b7bf838dfcd7440cde11477a28bd943b1" translate="yes" xml:space="preserve">
          <source>Inputs should be using &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; bindings. The &lt;code&gt;&amp;lt;&lt;/code&gt; symbol denotes &lt;a href=&quot;../api/ng/service/%24compile#-scope-.html&quot;&gt;one-way bindings&lt;/a&gt; which are available since 1.5. The difference to &lt;code&gt;=&lt;/code&gt; is that the bound properties in the component scope are not watched, which means if you assign a new value to the property in the component scope, it will not update the parent scope. Note however, that both parent and component scope reference the same object, so if you are changing object properties or array elements in the component, the parent will still reflect that change. The general rule should therefore be to never change an object or array property in the component scope. &lt;code&gt;@&lt;/code&gt; bindings can be used when the input is a string, especially when the value of the binding doesn't change.</source>
          <target state="translated">入力には &lt;code&gt;&amp;lt;&lt;/code&gt; および &lt;code&gt;@&lt;/code&gt; バインディングを使用する必要があります。 &lt;code&gt;&amp;lt;&lt;/code&gt; 記号は意味&lt;a href=&quot;../api/ng/service/%24compile#-scope-.html&quot;&gt;一方向のバインディング&lt;/a&gt; 1.5以降で利用可能です。 &lt;code&gt;=&lt;/code&gt; との違いは、コンポーネントスコープのバインドされたプロパティが監視されないことです。つまり、コンポーネントスコープのプロパティに新しい値を割り当てても、親スコープは更新されません。ただし、親スコープとコンポーネントスコープの両方が同じオブジェクトを参照するため、コンポーネントのオブジェクトプロパティまたは配列要素を変更する場合でも、親はその変更を反映します。したがって、一般的な規則は、コンポーネントスコープのオブジェクトまたは配列のプロパティを変更しないことです。 &lt;code&gt;@&lt;/code&gt; バインディングは、入力が文字列の場合、特にバインディングの値が変化しない場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="9e52682fa7935f8560c99962baa2e9b2e2f695aa" translate="yes" xml:space="preserve">
          <source>Inserts (moves) the element into its new position in the DOM either after the &lt;code&gt;after&lt;/code&gt; element (if provided) or as the first child within the &lt;code&gt;parent&lt;/code&gt; element and then triggers an animation. A promise is returned that will be resolved during the next digest once the animation has completed.</source>
          <target state="translated">要素をDOMの新しい位置に、要素の &lt;code&gt;after&lt;/code&gt; （指定されている場合）または &lt;code&gt;parent&lt;/code&gt; 要素内の最初の子として挿入（移動）してから、アニメーションをトリガーします。アニメーションが完了したら、次のダイジェストで解決されるプロミスが返されます。</target>
        </trans-unit>
        <trans-unit id="9d08db8a2f848ef678473f1e8f3fc6d65efc3930" translate="yes" xml:space="preserve">
          <source>Inserts a named entry into the &lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt; object to be retrieved later, and incrementing the size of the cache if the key was not already present in the cache. If behaving like an LRU cache, it will also remove stale entries from the set.</source>
          <target state="translated">後で取得するために名前付きエントリを&lt;a href=&quot;%24cachefactory.cache&quot;&gt;Cache&lt;/a&gt;オブジェクトに挿入し、キーがまだキャッシュに存在しない場合はキャッシュのサイズを増やします。LRUキャッシュのように動作する場合は、古いエントリもセットから削除されます。</target>
        </trans-unit>
        <trans-unit id="b56347e262d3cfcb832a5204694e59add55e7c8a" translate="yes" xml:space="preserve">
          <source>Inserts the element into the DOM either after the &lt;code&gt;after&lt;/code&gt; element (if provided) or as the first child within the &lt;code&gt;parent&lt;/code&gt; element and then triggers an animation. A promise is returned that will be resolved during the next digest once the animation has completed.</source>
          <target state="translated">&lt;code&gt;after&lt;/code&gt; 要素の後に（指定されている場合）、または &lt;code&gt;parent&lt;/code&gt; 要素内の最初の子としてDOMに要素を挿入し、アニメーションをトリガーします。アニメーションが完了したら、次のダイジェストで解決されるプロミスが返されます。</target>
        </trans-unit>
        <trans-unit id="4a974602fd15a3bb043838c33a55716734438b42" translate="yes" xml:space="preserve">
          <source>Inside this directive's compile function, add any other directive attributes to the template.</source>
          <target state="translated">このディレクティブのコンパイル関数の中で、他のディレクティブの属性をテンプレートに追加します。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="8282d74914fee52414c245630944283136d0ee0c" translate="yes" xml:space="preserve">
          <source>Instance of given controller.</source>
          <target state="translated">与えられたコントローラのインスタンス。</target>
        </trans-unit>
        <trans-unit id="062b9f18d0fd09a55820ed08041572545f617364" translate="yes" xml:space="preserve">
          <source>Instance of requested controller.</source>
          <target state="translated">要求されたコントローラのインスタンス。</target>
        </trans-unit>
        <trans-unit id="211f21858ca1d5311a2538cd51c3ed72a3d7a141" translate="yes" xml:space="preserve">
          <source>Instantiating &lt;code&gt;$route&lt;/code&gt; early is necessary for capturing the initial &lt;a href=&quot;../../ng/service/%24location#%24locationChangeStart.html&quot;&gt;$locationChangeStart&lt;/a&gt; event and navigating to the appropriate route. Usually, &lt;code&gt;$route&lt;/code&gt; is instantiated in time by the &lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt; directive. Yet, in cases where &lt;code&gt;ngView&lt;/code&gt; is included in an asynchronously loaded template (e.g. in another directive's template), the directive factory might not be called soon enough for &lt;code&gt;$route&lt;/code&gt; to be instantiated &lt;em&gt;before&lt;/em&gt; the initial &lt;code&gt;$locationChangeSuccess&lt;/code&gt; event is fired. Eager instantiation ensures that &lt;code&gt;$route&lt;/code&gt; is always instantiated in time, regardless of when &lt;code&gt;ngView&lt;/code&gt; will be loaded.</source>
          <target state="translated">初期の&lt;a href=&quot;../../ng/service/%24location#%24locationChangeStart.html&quot;&gt;$ locationChangeStart&lt;/a&gt;イベントをキャプチャして適切なルートに移動するには、 &lt;code&gt;$route&lt;/code&gt; 早期にインスタンス化する必要があります。通常、 &lt;code&gt;$route&lt;/code&gt; は&lt;a href=&quot;../directive/ngview&quot;&gt;ngView&lt;/a&gt;ディレクティブによってインスタンス化されます。ただし、 &lt;code&gt;ngView&lt;/code&gt; が非同期に読み込まれたテンプレート（たとえば、別のディレクティブのテンプレート）に含まれている場合、最初の &lt;code&gt;$locationChangeSuccess&lt;/code&gt; イベントが発生する&lt;em&gt;前に&lt;/em&gt; &lt;code&gt;$route&lt;/code&gt; がインスタンス化されるのに十分早くディレクティブファクトリが呼び出されない可能性があります。熱心なインスタンス化により、 &lt;code&gt;ngView&lt;/code&gt; がいつ読み込まれるかに関係なく、 &lt;code&gt;$route&lt;/code&gt; は常に時間内にインスタンス化されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3d3a7f6588b1415794dfce3d5d197e1c86baed2d" translate="yes" xml:space="preserve">
          <source>Instead of an ngController, we now have a heroList component that holds the data of different heroes, and creates a heroDetail for each of them.</source>
          <target state="translated">ngController の代わりに、異なるヒーローのデータを保持し、それぞれのヒーローの heroDetail を作成する heroList コンポーネントを用意しました。</target>
        </trans-unit>
        <trans-unit id="6f3dfbdc7d4af7c104dfa249eb6020271af2c661" translate="yes" xml:space="preserve">
          <source>Instead of manipulating Input Data, the component calls the correct Output Event with the changed data. For a deletion, that means the component doesn't delete the &lt;code&gt;hero&lt;/code&gt; itself, but sends it back to the owner component via the correct event.</source>
          <target state="translated">コンポーネントは、入力データを操作する代わりに、変更されたデータで正しい出力イベントを呼び出します。削除の場合、これはコンポーネントが &lt;code&gt;hero&lt;/code&gt; 自体を削除するのではなく、正しいイベントを介して所有者コンポーネントに送り返すことを意味します。</target>
        </trans-unit>
        <trans-unit id="83be5bd3ffd4491816aabd2cd39c2c3b9c8878ac" translate="yes" xml:space="preserve">
          <source>Instead the &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt; directive compiles &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; separately. The result of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element compilation is a linking function which contains all of the directives contained in the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element, ready to be attached to a specific clone of the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">代わりに、&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt;ディレクティブは &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; を個別にコンパイルします。結果 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素のコンパイルは、ディレクティブのすべてに含まれている含まリンク関数である &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; の特定のクローンに取り付けられるように準備ができて、要素 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 要素。</target>
        </trans-unit>
        <trans-unit id="633968d37033cd055bb2eb774fd1e896dbbc403f" translate="yes" xml:space="preserve">
          <source>Instead use services like &lt;code&gt;$window&lt;/code&gt; and &lt;code&gt;$location&lt;/code&gt; in functions on controllers, which are then called from expressions. Such services provide mockable access to globals.</source>
          <target state="translated">代わりに、コントローラの関数で &lt;code&gt;$window&lt;/code&gt; や &lt;code&gt;$location&lt;/code&gt; などのサービスを使用します。これらは、式から呼び出されます。このようなサービスは、グローバルへのモック可能なアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="e907f4bb49fd3c2e897bc3769f08b3d04e07eddb" translate="yes" xml:space="preserve">
          <source>Integration with the browser event loop</source>
          <target state="translated">ブラウザのイベントループとの統合</target>
        </trans-unit>
        <trans-unit id="f9c3ced7a72c2e86229aee91105ee78487714dbb" translate="yes" xml:space="preserve">
          <source>Interceptors</source>
          <target state="translated">Interceptors</target>
        </trans-unit>
        <trans-unit id="9db23e6c66b8f703c4c5170aac080107d2e70814" translate="yes" xml:space="preserve">
          <source>Interceptors detailed info</source>
          <target state="translated">インターセプターの詳細情報</target>
        </trans-unit>
        <trans-unit id="9ce9437cbc666edc9eb9fcee34199bb7906c0c55" translate="yes" xml:space="preserve">
          <source>Intercomponent Communication</source>
          <target state="translated">コンポーネント間通信</target>
        </trans-unit>
        <trans-unit id="062715707c7ec1cacc1e15b12597b7e7f10f0e06" translate="yes" xml:space="preserve">
          <source>Interface for configuring AngularJS &lt;a href=&quot;../function/angular.module&quot;&gt;modules&lt;/a&gt;.</source>
          <target state="translated">AngularJS &lt;a href=&quot;../function/angular.module&quot;&gt;モジュール&lt;/a&gt;を構成するためのインターフェース。</target>
        </trans-unit>
        <trans-unit id="e4d32358862ac0edaba0242863407cf48322048c" translate="yes" xml:space="preserve">
          <source>Interface for configuring AngularJS &lt;a href=&quot;function/angular.module&quot;&gt;modules&lt;/a&gt;.</source>
          <target state="translated">AngularJS &lt;a href=&quot;function/angular.module&quot;&gt;モジュール&lt;/a&gt;を構成するためのインターフェース。</target>
        </trans-unit>
        <trans-unit id="ecd5ccdaf3148a44137ddcbe0c56ca93bd059aa4" translate="yes" xml:space="preserve">
          <source>Internally it looks a bit like this:</source>
          <target state="translated">内部的にはこんな感じです。</target>
        </trans-unit>
        <trans-unit id="7b741cdf9b58113f65f5de5d9a4967edb5170093" translate="yes" xml:space="preserve">
          <source>Internally, &lt;code&gt;ngAnimate&lt;/code&gt; waits until all template downloads that are started right after bootstrap have finished. Then, it waits for the currently running &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; and one more after that, to finish. This ensures that the whole app has been compiled fully before animations are attempted.</source>
          <target state="translated">内部的には、 &lt;code&gt;ngAnimate&lt;/code&gt; は、ブートストラップが完了した直後に開始されるすべてのテンプレートのダウンロードが完了するまで待機します。次に、現在実行中の&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ digest&lt;/a&gt;とそのあと1つが完了するまで待機します。これにより、アニメーションが試行される前に、アプリ全体が完全にコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="22c5f10ca7f996927beededd6dc71f14380c408d" translate="yes" xml:space="preserve">
          <source>Internationalization (i18n) is the process of developing products in such a way that they can be localized for languages and cultures easily. Localization (l10n), is the process of adapting applications and text to enable their usability in a particular cultural or linguistic market. For application developers, internationalizing an application means abstracting all of the strings and other locale-specific bits (such as date or currency formats) out of the application. Localizing an application means providing translations and localized formats for the abstracted bits.</source>
          <target state="translated">国際化(i18n)とは、製品を言語や文化に合わせて簡単にローカライズできるように開発するプロセスです。ローカライゼーション(l10n)とは、特定の文化や言語市場での使用を可能にするために、アプリケーションやテキストを適応させるプロセスです。アプリケーション開発者にとって、アプリケーションを国際化するということは、文字列や他の地域固有のビット(日付や通貨形式など)をすべてアプリケーションから抽象化することを意味します。アプリケーションをローカライズするとは、抽象化されたビットの翻訳とローカライズされたフォーマットを提供することを意味します。</target>
        </trans-unit>
        <trans-unit id="627598da36f0488e21c56b4623e3c3ac29134995" translate="yes" xml:space="preserve">
          <source>Internet Explorer and Edge do not support the &lt;code&gt;details&lt;/code&gt; element, it is recommended to use &lt;a href=&quot;ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">Internet ExplorerとEdgeは &lt;code&gt;details&lt;/code&gt; 要素をサポートしていません。代わりに&lt;a href=&quot;ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="3da05a3ab5e77c32bfb542c759dbb3b2f9921337" translate="yes" xml:space="preserve">
          <source>Interpolation markup with embedded &lt;a href=&quot;expression&quot;&gt;expressions&lt;/a&gt; is used by AngularJS to provide data-binding to text nodes and attribute values.</source>
          <target state="translated">&lt;a href=&quot;expression&quot;&gt;式&lt;/a&gt;が埋め込まれた補間マークアップは、テキストノードと属性値へのデータバインディングを提供するためにAngularJSによって使用されます。</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="464d6921114c284acd9c8fb8f85d8fdc2d3aa0a2" translate="yes" xml:space="preserve">
          <source>Introductory Material</source>
          <target state="translated">入門資料</target>
        </trans-unit>
        <trans-unit id="6ef14993cacdc6240416f3e705cd81fa9aedff49" translate="yes" xml:space="preserve">
          <source>Invoke the method and supply the method arguments from the &lt;code&gt;$injector&lt;/code&gt;.</source>
          <target state="translated">メソッドを呼び出し、 &lt;code&gt;$injector&lt;/code&gt; からメソッド引数を提供します。</target>
        </trans-unit>
        <trans-unit id="35b43899a3f83610ba7b4c6c1390ee4e1f1b7e31" translate="yes" xml:space="preserve">
          <source>Invokes the &lt;code&gt;iterator&lt;/code&gt; function once for each item in &lt;code&gt;obj&lt;/code&gt; collection, which can be either an object or an array. The &lt;code&gt;iterator&lt;/code&gt; function is invoked with &lt;code&gt;iterator(value, key, obj)&lt;/code&gt;, where &lt;code&gt;value&lt;/code&gt; is the value of an object property or an array element, &lt;code&gt;key&lt;/code&gt; is the object property key or array element index and obj is the &lt;code&gt;obj&lt;/code&gt; itself. Specifying a &lt;code&gt;context&lt;/code&gt; for the function is optional.</source>
          <target state="translated">オブジェクトまたは配列のいずれかである &lt;code&gt;obj&lt;/code&gt; コレクションの項目ごとに1回 &lt;code&gt;iterator&lt;/code&gt; 関数を呼び出します。 &lt;code&gt;iterator&lt;/code&gt; 関数を用いて呼び出される &lt;code&gt;iterator(value, key, obj)&lt;/code&gt; 、 &lt;code&gt;value&lt;/code&gt; オブジェクトのプロパティまたは配列要素の値であり、 &lt;code&gt;key&lt;/code&gt; オブジェクトのプロパティキーまたは配列要素のインデックスであり、objがある &lt;code&gt;obj&lt;/code&gt; 自体。関数の &lt;code&gt;context&lt;/code&gt; 指定はオプションです。</target>
        </trans-unit>
        <trans-unit id="a5ab7787ce6bc4362a9f13777edcdaf6b98998bd" translate="yes" xml:space="preserve">
          <source>Ionic Framework</source>
          <target state="translated">イオンフレームワーク</target>
        </trans-unit>
        <trans-unit id="1a782aa74f75185993195ad4bcbc102f9f427def" translate="yes" xml:space="preserve">
          <source>Isolating the Scope of a Directive</source>
          <target state="translated">指令の範囲の分離</target>
        </trans-unit>
        <trans-unit id="d20f2f6b4e6d817ba6e89b3f9673aecdf3113258" translate="yes" xml:space="preserve">
          <source>Issues with replace: true</source>
          <target state="translated">replace:true の問題</target>
        </trans-unit>
        <trans-unit id="553315737e3b34b8f0ca05c4145e5f178bea3093" translate="yes" xml:space="preserve">
          <source>It also watches the &lt;a href=&quot;%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt; and automatically scrolls to match any anchor whenever it changes. This can be disabled by calling &lt;a href=&quot;../provider/%24anchorscrollprovider#disableAutoScrolling.html&quot;&gt;$anchorScrollProvider.disableAutoScrolling()&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;%24location#hash.html&quot;&gt;$ location.hash（）&lt;/a&gt;を監視し、アンカーが変更されるたびに自動的にスクロールしてアンカーに一致させます。これは、&lt;a href=&quot;../provider/%24anchorscrollprovider#disableAutoScrolling.html&quot;&gt;$ anchorScrollProvider.disableAutoScrolling（）を&lt;/a&gt;呼び出すことで無効にできます。</target>
        </trans-unit>
        <trans-unit id="c489374ee92d89df88a69e803f218fae80bb3039" translate="yes" xml:space="preserve">
          <source>It can also be used to achieve one-way binding of a given expression to an input element such as an &lt;code&gt;input[text]&lt;/code&gt; or a &lt;code&gt;textarea&lt;/code&gt;, when that element does not use ngModel.</source>
          <target state="translated">またような入力要素に与えられた式の結合一方向を達成するために使用することができる &lt;code&gt;input[text]&lt;/code&gt; または &lt;code&gt;textarea&lt;/code&gt; その要素がngModelを使用していません。</target>
        </trans-unit>
        <trans-unit id="6ead9df0c1b0575bc0d0a33bce64a5d7d3f5aebc" translate="yes" xml:space="preserve">
          <source>It can be used like so:</source>
          <target state="translated">のように使うことができます。</target>
        </trans-unit>
        <trans-unit id="db03d0c1d6f65c6696ad45dd10b046e86fb2b5bc" translate="yes" xml:space="preserve">
          <source>It can be used to trigger a native browser event on an element, which is useful for unit testing.</source>
          <target state="translated">要素のネイティブブラウザイベントをトリガーするために使用することができ、ユニットテストに便利です。</target>
        </trans-unit>
        <trans-unit id="92cd05db0fac39e05b3a78129dbc2c13bb5d210c" translate="yes" xml:space="preserve">
          <source>It does not cause a full page reload when the browser URL is changed. To reload the page after changing the URL, use the lower-level API, &lt;code&gt;$window.location.href&lt;/code&gt;.</source>
          <target state="translated">ブラウザのURLが変更されても、ページ全体が再読み込みされることはありません。URLの変更後にページを再読み込みするには、下位レベルのAPI、 &lt;code&gt;$window.location.href&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="6dd0e3b492e0e9ddf8f072cf8217d885fc9dc93f" translate="yes" xml:space="preserve">
          <source>It impacts performance, as interpolation adds another watcher to the scope.</source>
          <target state="translated">これは、補間がスコープに別のウォッチャーを追加するため、パフォーマンスに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="4d5b67bbcac712f4a34e5aa8cfdb8f074f88c7b5" translate="yes" xml:space="preserve">
          <source>It increases the complexity of the markup</source>
          <target state="translated">マークアップの複雑さを増す</target>
        </trans-unit>
        <trans-unit id="fc05bcff5f72991e69c700ce73817afcbbb8bd13" translate="yes" xml:space="preserve">
          <source>It indicates to the compiler whether or not directives on comments should be compiled. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">コメントに関するディレクティブをコンパイルするかどうかをコンパイラーに指示します。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="906af1e36dfdfa37c091ab433fc206589b32aa37" translate="yes" xml:space="preserve">
          <source>It indicates to the compiler whether or not directives on element classes should be compiled. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">要素クラスのディレクティブをコンパイルするかどうかをコンパイラーに指示します。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a5ee5553d7a8187ba379677bf68a64abd66747eb" translate="yes" xml:space="preserve">
          <source>It is a really, &lt;em&gt;really&lt;/em&gt; good idea to regard app testing as equal in importance to app writing. Testing difficulty is dramatically affected by the way the code is structured.</source>
          <target state="translated">アプリのテストはアプリの作成と同じくらい重要であると考えるのは本当に、&lt;em&gt;本当に&lt;/em&gt;良い考えです。テストの難しさは、コードの構造化方法に大きく影響されます。</target>
        </trans-unit>
        <trans-unit id="8855a2587ecadec73d7a3421fc455403fbc8a53a" translate="yes" xml:space="preserve">
          <source>It is a very good idea to decouple DOM manipulation from app logic. This dramatically improves the testability of the code.</source>
          <target state="translated">DOM の操作をアプリのロジックから切り離すことは非常に良いアイデアです。これにより、コードのテスト性が劇的に向上します。</target>
        </trans-unit>
        <trans-unit id="727b35094155043ed303b76b370615c80c2ab5a2" translate="yes" xml:space="preserve">
          <source>It is also possible that you run into difficulties if you try to update the ngModel's &lt;code&gt;$modelValue&lt;/code&gt; programmatically before these debounced/future events have resolved/occurred, because AngularJS's dirty checking mechanism is not able to tell whether the model has actually changed or not.</source>
          <target state="translated">AngularJSのダーティーチェックメカニズムはモデルが実際に変更されたかどうかを通知できないため、これらのデバウンス/将来のイベントが解決/発生する前にngModelの &lt;code&gt;$modelValue&lt;/code&gt; プログラムで更新しようとすると、問題が発生する可能性もあります。</target>
        </trans-unit>
        <trans-unit id="80c4111be6bb24188a6a2bea325a2c92f6ed5f77" translate="yes" xml:space="preserve">
          <source>It is also possible to call the &lt;code&gt;orderBy&lt;/code&gt; filter manually, by injecting &lt;code&gt;orderByFilter&lt;/code&gt;, and calling it with the desired parameters. (Alternatively, you could inject the &lt;code&gt;$filter&lt;/code&gt; factory and retrieve the &lt;code&gt;orderBy&lt;/code&gt; filter with &lt;code&gt;$filter('orderBy')&lt;/code&gt;.)</source>
          <target state="translated">呼び出すことも可能である &lt;code&gt;orderBy&lt;/code&gt; 注入することで、手動でフィルタを &lt;code&gt;orderByFilter&lt;/code&gt; をし、必要なパラメータとそれを呼び出します。（あるいは、 &lt;code&gt;$filter&lt;/code&gt; ファクトリを注入し、 &lt;code&gt;$filter('orderBy')&lt;/code&gt; を使用して &lt;code&gt;orderBy&lt;/code&gt; フィルターを取得することもできます。）</target>
        </trans-unit>
        <trans-unit id="ca7a590d3c2d53e278b044a014b894acece3725f" translate="yes" xml:space="preserve">
          <source>It is also possible to set &lt;code&gt;bindToController&lt;/code&gt; to an object hash with the same format as the &lt;code&gt;scope&lt;/code&gt; property. This will set up the scope bindings to the controller directly. Note that &lt;code&gt;scope&lt;/code&gt; can still be used to define which kind of scope is created. By default, no scope is created. Use &lt;code&gt;scope: {}&lt;/code&gt; to create an isolate scope (useful for component directives).</source>
          <target state="translated">&lt;code&gt;bindToController&lt;/code&gt; を、 &lt;code&gt;scope&lt;/code&gt; プロパティと同じ形式のオブジェクトハッシュに設定することもできます。これにより、スコープバインディングがコントローラーに直接設定されます。ことを注意 &lt;code&gt;scope&lt;/code&gt; まだ作成されたスコープの種類を定義するために使用することができます。デフォルトでは、スコープは作成されません。使用 &lt;code&gt;scope: {}&lt;/code&gt; （成分指令するのに有用な）を単離スコープを作成します。</target>
        </trans-unit>
        <trans-unit id="25431739b654d8cc47b28b9c43eeca226e65b9a6" translate="yes" xml:space="preserve">
          <source>It is also possible to set it as the default &lt;code&gt;paramSerializer&lt;/code&gt; in the &lt;a href=&quot;../provider/%24httpprovider#defaults.html&quot;&gt;&lt;code&gt;$httpProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24httpprovider#defaults.html&quot;&gt; &lt;code&gt;$httpProvider&lt;/code&gt; &lt;/a&gt;でデフォルトの &lt;code&gt;paramSerializer&lt;/code&gt; として設定することもできます。</target>
        </trans-unit>
        <trans-unit id="1d5c13dd91385416023d0e8e5aa828224c7f5217" translate="yes" xml:space="preserve">
          <source>It is always good to make common tasks trivial and difficult tasks possible.</source>
          <target state="translated">共通の課題を些細で難しいものにするのは、いつでもいいことです。</target>
        </trans-unit>
        <trans-unit id="b3e683fad2f9309dfaa4db918783ad8289246cf8" translate="yes" xml:space="preserve">
          <source>It is an excellent idea to decouple the client side of an app from the server side. This allows development work to progress in parallel, and allows for reuse of both sides.</source>
          <target state="translated">アプリのクライアント側とサーバー側を切り離すのは素晴らしいアイデアです。これにより、開発作業を並行して進めることができ、双方の再利用が可能になります。</target>
        </trans-unit>
        <trans-unit id="0b0fa48b6950751b768005b01d414197a136d433" translate="yes" xml:space="preserve">
          <source>It is common to attach Controllers at different levels of the DOM hierarchy. Since the &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt; directive creates a new child scope, we get a hierarchy of scopes that inherit from each other. The &lt;code&gt;$scope&lt;/code&gt; that each Controller receives will have access to properties and methods defined by Controllers higher up the hierarchy. See &lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot;&gt;Understanding Scopes&lt;/a&gt; for more information about scope inheritance.</source>
          <target state="translated">DOM階層のさまざまなレベルでコントローラーを接続するのが一般的です。&lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt;ディレクティブは新しい子スコープを作成するので、互いに継承するスコープの階層を取得します。 &lt;code&gt;$scope&lt;/code&gt; 各コントローラが受信するには、階層までの上位コントローラで定義されたプロパティとメソッドにアクセスする必要があります。スコープの継承の詳細&lt;a href=&quot;https://github.com/angular/angular.js/wiki/Understanding-Scopes&quot;&gt;については、スコープ&lt;/a&gt;についてを参照してください。</target>
        </trans-unit>
        <trans-unit id="898e639ea78a3295cd345092429425a8851a4def" translate="yes" xml:space="preserve">
          <source>It is currently not possible for an interpolated expression to contain the interpolation end symbol. For example, &lt;code&gt;{{ '}}' }}&lt;/code&gt; will be incorrectly interpreted as &lt;code&gt;{{ ' }}&lt;/code&gt; + &lt;code&gt;' }}&lt;/code&gt;, i.e. an interpolated expression consisting of a single-quote (&lt;code&gt;'&lt;/code&gt;) and the &lt;code&gt;' }}&lt;/code&gt; string.</source>
          <target state="translated">現在、内挿式に内挿終了記号を含めることはできません。たとえば、 &lt;code&gt;{{ '}}' }}&lt;/code&gt; は、誤って &lt;code&gt;{{ ' }}&lt;/code&gt; + &lt;code&gt;' }}&lt;/code&gt; として解釈されます。つまり、単一引用符（ &lt;code&gt;'&lt;/code&gt; ）と &lt;code&gt;' }}&lt;/code&gt; 文字列で構成される補間式です。</target>
        </trans-unit>
        <trans-unit id="78735c155bc5c04e168b61fd0cfb26236c9dbc1c" translate="yes" xml:space="preserve">
          <source>It is documented that &lt;code&gt;animation.start()&lt;/code&gt; will return a promise object and this is true, however, there is also an additional method available on the runner called &lt;code&gt;.done(callbackFn)&lt;/code&gt;. The done method works the same as &lt;code&gt;.finally(callbackFn)&lt;/code&gt;, however, it does &lt;strong&gt;not trigger a digest to occur&lt;/strong&gt;. Therefore, for performance reasons, it's always best to use &lt;code&gt;runner.done(callback)&lt;/code&gt; instead of &lt;code&gt;runner.then()&lt;/code&gt;, &lt;code&gt;runner.catch()&lt;/code&gt; or &lt;code&gt;runner.finally()&lt;/code&gt; unless you really need a digest to kick off afterwards.</source>
          <target state="translated">&lt;code&gt;animation.start()&lt;/code&gt; がpromiseオブジェクトを返すことが記載されていますが、これはtrueですが、 &lt;code&gt;.done(callbackFn)&lt;/code&gt; と呼ばれる追加のメソッドもランナーで利用できます。 doneメソッドは &lt;code&gt;.finally(callbackFn)&lt;/code&gt; と同じように機能&lt;strong&gt;しますが、ダイジェストの発生をトリガー&lt;/strong&gt;しませ&lt;strong&gt;ん&lt;/strong&gt;。したがって、パフォーマンス上の理由から、後でダイジェストを実際に開始する必要がない限り、 &lt;code&gt;runner.catch()&lt;/code&gt; 、runner.catch（）、または &lt;code&gt;runner.finally()&lt;/code&gt; の代わりに &lt;code&gt;runner.then()&lt;/code&gt; &lt;code&gt;runner.done(callback)&lt;/code&gt; を使用することが常に最善です。</target>
        </trans-unit>
        <trans-unit id="9adf8cb48d55887fa324e58aa54a93785a13c110" translate="yes" xml:space="preserve">
          <source>It is important to be aware of this when writing tests for directives that use 'element' transclusion. If you place the directive on the root element of the DOM fragment that you pass to &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt;&lt;/a&gt;, then the DOM node returned from the linking function will be the comment node and you will lose the ability to access the template and transcluded content.</source>
          <target state="translated">「要素」トランスクルージョンを使用するディレクティブのテストを作成するときは、このことに注意することが重要です。&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; &lt;/a&gt;に渡すDOMフラグメントのルート要素にディレクティブを配置すると、リンク関数から返されたDOMノードがコメントノードになり、テンプレートおよびトランスクルードされたコンテンツにアクセスできなくなります。</target>
        </trans-unit>
        <trans-unit id="ade37c34e6742fe81576b7d98f9b8cab2717a032" translate="yes" xml:space="preserve">
          <source>It is important to realize that invoking a &lt;code&gt;$resource&lt;/code&gt; object method immediately returns an empty reference (object or array depending on &lt;code&gt;isArray&lt;/code&gt;). Once the data is returned from the server the existing reference is populated with the actual data. This is a useful trick since usually the resource is assigned to a model which is then rendered by the view. Having an empty object results in no rendering, once the data arrives from the server then the object is populated with the data and the view automatically re-renders itself showing the new data. This means that in most cases one never has to write a callback function for the action methods.</source>
          <target state="translated">&lt;code&gt;$resource&lt;/code&gt; オブジェクトメソッドを呼び出すと、空の参照（ &lt;code&gt;isArray&lt;/code&gt; に応じてオブジェクトまたは配列）がすぐに返されることを理解することが重要です。データがサーバーから返されると、既存の参照に実際のデータが入力されます。通常、リソースはモデルに割り当てられ、ビューによってレンダリングされるため、これは便利なトリックです。空のオブジェクトがあると、レンダリングは行われません。サーバーからデータが到着すると、オブジェクトにデータが入力され、ビューは自動的に再レン​​ダリングして新しいデータを表示します。つまり、ほとんどの場合、アクションメソッドのコールバック関数を記述する必要はありません。</target>
        </trans-unit>
        <trans-unit id="44e11a7a5909b52ab207ef70f4ca59576a8afb49" translate="yes" xml:space="preserve">
          <source>It is mainly used on &lt;a href=&quot;../input/input%5Bradio%5D&quot;&gt;&lt;code&gt;input[radio]&lt;/code&gt;&lt;/a&gt; and option elements, so that when the element is selected, the &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; of that element (or its &lt;a href=&quot;select&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; parent element) is set to the bound value. It is especially useful for dynamically generated lists using &lt;a href=&quot;ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt;, as shown below.</source>
          <target state="translated">これは主に&lt;a href=&quot;../input/input%5Bradio%5D&quot;&gt; &lt;code&gt;input[radio]&lt;/code&gt; &lt;/a&gt;およびoption要素で使用されるため、要素が選択されると、その要素（またはその&lt;a href=&quot;select&quot;&gt; &lt;code&gt;select&lt;/code&gt; &lt;/a&gt;親要素）の&lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt;がバインドされた値に設定されます。以下に示すように、これは&lt;a href=&quot;ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt;を使用して動的に生成されたリストに特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="dd54d32cbd1f2ba51acb0890230e9b3c8d1d18e0" translate="yes" xml:space="preserve">
          <source>It is normal practice to attach your transcluded content (&lt;code&gt;clone&lt;/code&gt;) to the DOM inside your &lt;strong&gt;clone attach function&lt;/strong&gt;:</source>
          <target state="translated">トランスアタッチされたコンテンツ（ &lt;code&gt;clone&lt;/code&gt; ）を、&lt;strong&gt;クローンattach関数&lt;/strong&gt;内のDOM に添付するのが通常の方法&lt;strong&gt;です&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="13587fb80feb5ab37440031b46d39c968c78429f" translate="yes" xml:space="preserve">
          <source>It is not possible to whitelist specific URLs/paths. The &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;fragment&lt;/code&gt; parts of a URL will be ignored. For example, &lt;code&gt;https://foo.com/path/bar?query=baz#fragment&lt;/code&gt; will be treated as &lt;code&gt;https://foo.com&lt;/code&gt;, meaning that &lt;strong&gt;all&lt;/strong&gt; requests to URLs starting with &lt;code&gt;https://foo.com/&lt;/code&gt; will include the XSRF token.</source>
          <target state="translated">特定のURL /パスをホワイトリストに登録することはできません。URL の &lt;code&gt;path&lt;/code&gt; 、 &lt;code&gt;query&lt;/code&gt; 、 &lt;code&gt;fragment&lt;/code&gt; 部分は無視されます。たとえば、 &lt;code&gt;https://foo.com/path/bar?query=baz#fragment&lt;/code&gt; はhttps://foo.comとして扱われ &lt;code&gt;https://foo.com&lt;/code&gt; 。つまり、 &lt;code&gt;https://foo.com/&lt;/code&gt; //foo.com/で始まるURLへの&lt;strong&gt;すべての&lt;/strong&gt;リクエストには、 XSRFトークン。</target>
        </trans-unit>
        <trans-unit id="f5755149536ff4c33eaf7b094db38129ae71d347" translate="yes" xml:space="preserve">
          <source>It is often desirable to inline Injected functions and that's when setting the &lt;code&gt;$inject&lt;/code&gt; property is very inconvenient. In these situations using the array notation to specify the dependencies in a way that survives minification is a better choice:</source>
          <target state="translated">多くの場合、Injected関数をインライン化することが望ましく、その場合、 &lt;code&gt;$inject&lt;/code&gt; プロパティの設定は非常に不便です。このような状況では、配列表記を使用して依存関係を指定し、縮小化後も存続する方法をお勧めします。</target>
        </trans-unit>
        <trans-unit id="ea74d8637b90b9e1696533460b703c6c41293ed9" translate="yes" xml:space="preserve">
          <source>It is possible that during the &lt;code&gt;enter&lt;/code&gt; animation, the &lt;code&gt;.message&lt;/code&gt; div will be briefly visible before it starts animating. In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:</source>
          <target state="translated">&lt;code&gt;enter&lt;/code&gt; アニメーション中に、 &lt;code&gt;.message&lt;/code&gt; divがアニメーションを開始する前に一時的に表示される可能性があります。その場合、CSSにスタイルを追加して、アニメーションが開始する前に要素が非表示のままであることを確認できます。</target>
        </trans-unit>
        <trans-unit id="f82d2b045366df68d3ac3e59440164fdc698eb46" translate="yes" xml:space="preserve">
          <source>It is possible that during the &lt;code&gt;enter&lt;/code&gt; event, the &lt;code&gt;.message&lt;/code&gt; div will be briefly visible before it starts animating. In that case, you can add styles to the CSS that make sure the element stays hidden before the animation starts:</source>
          <target state="translated">&lt;code&gt;enter&lt;/code&gt; イベントの間、アニメーションを開始する前に &lt;code&gt;.message&lt;/code&gt; divが一時的に表示される可能性があります。その場合、CSSにスタイルを追加して、アニメーションが開始する前に要素が非表示のままであることを確認できます。</target>
        </trans-unit>
        <trans-unit id="c69afb8c7919c982dfe15812d0593df59e687ac6" translate="yes" xml:space="preserve">
          <source>It is possible to access the context object using the identifier &lt;code&gt;this&lt;/code&gt; and the locals object using the identifier &lt;code&gt;$locals&lt;/code&gt;.</source>
          <target state="translated">識別子 &lt;code&gt;this&lt;/code&gt; を使用してコンテキストオブジェクトにアクセスし、識別子 &lt;code&gt;$locals&lt;/code&gt; を使用してlocalsオブジェクトにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="3066c08f5caeabdd7acdc8e45264d026b7139d6e" translate="yes" xml:space="preserve">
          <source>It is possible to create chains of any length and since a promise can be resolved with another promise (which will defer its resolution further), it is possible to pause/defer resolution of the promises at any point in the chain. This makes it possible to implement powerful APIs like $http's response interceptors.</source>
          <target state="translated">任意の長さのチェーンを作成することが可能で、あるプロミスは別のプロミスで解決することができるので (その解決をさらに遅らせることができます)、チェーン内の任意の時点でプロミスの解決を一時停止することが可能です。これにより、$http のレスポンスインターセプターのような強力な API を実装することが可能になります。</target>
        </trans-unit>
        <trans-unit id="ccda427b3a1fede3c12595f91bdd135712e54499" translate="yes" xml:space="preserve">
          <source>It is possible to disable individual attributes added by ngAria with the &lt;a href=&quot;ngaria/provider/%24ariaprovider#config.html&quot;&gt;config&lt;/a&gt; method. For more details, see the &lt;a href=&quot;../guide/accessibility&quot;&gt;Developer Guide&lt;/a&gt;.</source>
          <target state="translated">ngAriaによって追加された個々の属性を&lt;a href=&quot;ngaria/provider/%24ariaprovider#config.html&quot;&gt;config&lt;/a&gt;メソッドで無効にすることが可能です。詳しくは、&lt;a href=&quot;../guide/accessibility&quot;&gt;デベロッパーガイドを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="463de9ded47806d9b1e436ee2e11963140db8b5f" translate="yes" xml:space="preserve">
          <source>It is possible to get &lt;code&gt;ngRepeat&lt;/code&gt; to iterate over the properties of an object using the following syntax:</source>
          <target state="translated">次の構文を使用して、 &lt;code&gt;ngRepeat&lt;/code&gt; にオブジェクトのプロパティを反復させることができます。</target>
        </trans-unit>
        <trans-unit id="e6efc27732c8ebe9e9e84ddd4403a59ab8aa7bee" translate="yes" xml:space="preserve">
          <source>It is possible to inject other providers into the provider function, but the injected provider must have been defined before the one that requires it.</source>
          <target state="translated">プロバイダ機能に他のプロバイダを注入することは可能ですが、注入されたプロバイダは、それを必要とするプロバイダの前に定義されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="996e7a28852c7c4983233eb69326521205c8d521" translate="yes" xml:space="preserve">
          <source>It is possible to make &lt;code&gt;ngAria&lt;/code&gt; ignore a specific element, by adding the &lt;code&gt;ng-aria-disable&lt;/code&gt; attribute on it. Note that only the element itself (and not its child elements) will be ignored.</source>
          <target state="translated">&lt;code&gt;ngAria&lt;/code&gt; に特定の要素を無視させるには、それに &lt;code&gt;ng-aria-disable&lt;/code&gt; 属性を追加します。無視されるのは要素自体（子要素ではない）のみであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7dcf70c9223ffd381f61a6b912e2f0febfd3f458" translate="yes" xml:space="preserve">
          <source>It is preferable to use &lt;code&gt;ngBind&lt;/code&gt; instead of &lt;code&gt;{{ expression }}&lt;/code&gt; if a template is momentarily displayed by the browser in its raw state before AngularJS compiles it. Since &lt;code&gt;ngBind&lt;/code&gt; is an element attribute, it makes the bindings invisible to the user while the page is loading.</source>
          <target state="translated">AngularJSがテンプレートをコンパイルする前にテンプレートが未加工の状態でブラウザーによって一時的に表示される場合は、 &lt;code&gt;{{ expression }}&lt;/code&gt; ではなく &lt;code&gt;ngBind&lt;/code&gt; を使用することをお勧めします。以来 &lt;code&gt;ngBind&lt;/code&gt; は、要素の属性であるページがロードされている間、それは利用者へのバインディングが見えなくなります。</target>
        </trans-unit>
        <trans-unit id="e7fa93572d942a68934418e0f950bd76f13eabf5" translate="yes" xml:space="preserve">
          <source>It is recommended that the&lt;code&gt;$animate&lt;/code&gt; service is always used when executing DOM-related procedures within directives.</source>
          <target state="translated">ディレクティブ内でDOM関連のプロシージャを実行するときは、常に &lt;code&gt;$animate&lt;/code&gt; サービスを使用することをお勧めします。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
