<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="gcc">
    <body>
      <group id="gcc">
        <trans-unit id="15880a1b0f0eff460a27bab5acca7d963ababc2e" translate="yes" xml:space="preserve">
          <source>On IA-64, use this attribute to set the addressability of an object. At present, the only supported identifier for &lt;var&gt;model-name&lt;/var&gt; is &lt;code&gt;small&lt;/code&gt;, indicating addressability via &amp;ldquo;small&amp;rdquo; (22-bit) addresses (so that their addresses can be loaded with the &lt;code&gt;addl&lt;/code&gt; instruction). Caveat: such addressing is by definition not position independent and hence this attribute must not be used for objects defined by shared libraries.</source>
          <target state="translated">IA-64では、この属性を使用してオブジェクトのアドレス可能度を設定します。現在、 &lt;var&gt;model-name&lt;/var&gt; でサポートされている唯一の識別子は &lt;code&gt;small&lt;/code&gt; で、「小さい」（22ビット）アドレスを介してアドレス可能であることを示します（そのため、アドレスを &lt;code&gt;addl&lt;/code&gt; 命令でロードできます）。警告：そのようなアドレス指定は、定義上、位置に依存しないため、この属性は、共有ライブラリによって定義されたオブジェクトには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="91904759c9c2457b69a1a4e416e41e9e0be813c9" translate="yes" xml:space="preserve">
          <source>On M16C/M32C targets, the &lt;code&gt;function_vector&lt;/code&gt; attribute declares a special page subroutine call function. Use of this attribute reduces the code size by 2 bytes for each call generated to the subroutine. The argument to the attribute is the vector number entry from the special page vector table which contains the 16 low-order bits of the subroutine&amp;rsquo;s entry address. Each vector table has special page number (18 to 255) that is used in &lt;code&gt;jsrs&lt;/code&gt; instructions. Jump addresses of the routines are generated by adding 0x0F0000 (in case of M16C targets) or 0xFF0000 (in case of M32C targets), to the 2-byte addresses set in the vector table. Therefore you need to ensure that all the special page vector routines should get mapped within the address range 0x0F0000 to 0x0FFFFF (for M16C) and 0xFF0000 to 0xFFFFFF (for M32C).</source>
          <target state="translated">M16C / M32Cターゲットでは、 &lt;code&gt;function_vector&lt;/code&gt; 属性は特別なページサブルーチン呼び出し関数を宣言します。この属性を使用すると、サブルーチンに対して生成される各呼び出しのコードサイズが2バイト減少します。属性の引数は、サブルーチンのエントリアドレスの下位16ビットを含むスペシャルページのベクタテーブルからのベクタ番号エントリです。各ベクトルテーブルには、 &lt;code&gt;jsrs&lt;/code&gt; で使用される特別なページ番号（18〜255）があります。指示。ルーチンのジャンプアドレスは、ベクターテーブルに設定された2バイトのアドレスに0x0F0000（M16Cターゲットの場合）または0xFF0000（M32Cターゲットの場合）を追加することによって生成されます。したがって、すべての特殊ページベクタルーチンが0x0F0000〜0x0FFFFF（M16Cの場合）および0xFF0000〜0xFFFFFF（M32Cの場合）のアドレス範囲内でマップされるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="c2aa4af7831a376d6135535124d21f76860cca5a" translate="yes" xml:space="preserve">
          <source>On MIPS targets, you can use the &lt;code&gt;micromips&lt;/code&gt; and &lt;code&gt;nomicromips&lt;/code&gt; function attributes to locally select or turn off microMIPS code generation. A function with the &lt;code&gt;micromips&lt;/code&gt; attribute is emitted as microMIPS code, while microMIPS code generation is disabled for functions with the &lt;code&gt;nomicromips&lt;/code&gt; attribute. These attributes override the</source>
          <target state="translated">MIPSターゲットでは、 &lt;code&gt;micromips&lt;/code&gt; および &lt;code&gt;nomicromips&lt;/code&gt; 関数属性を使用して、ローカルでmicroMIPSコード生成を選択またはオフにすることができます。 &lt;code&gt;micromips&lt;/code&gt; 属性を持つ関数はmicroMIPSコードとして発行されますが、microMIPSコード生成は &lt;code&gt;nomicromips&lt;/code&gt; 属性を持つ関数に対して無効になります。これらの属性は、</target>
        </trans-unit>
        <trans-unit id="34cf824a3a810117697026d669c82b4b19acd6c0" translate="yes" xml:space="preserve">
          <source>On MIPS targets, you can use the &lt;code&gt;mips16&lt;/code&gt; and &lt;code&gt;nomips16&lt;/code&gt; function attributes to locally select or turn off MIPS16 code generation. A function with the &lt;code&gt;mips16&lt;/code&gt; attribute is emitted as MIPS16 code, while MIPS16 code generation is disabled for functions with the &lt;code&gt;nomips16&lt;/code&gt; attribute. These attributes override the</source>
          <target state="translated">MIPSターゲットでは、 &lt;code&gt;mips16&lt;/code&gt; および &lt;code&gt;nomips16&lt;/code&gt; 関数属性を使用して、MIPS16コード生成をローカルで選択またはオフにすることができます。 &lt;code&gt;mips16&lt;/code&gt; 属性を持つ関数はMIPS16コードとして出力されますが、nomips16属性を持つ関数に対してMIPS16コード生成は無効に &lt;code&gt;nomips16&lt;/code&gt; ます。これらの属性は、</target>
        </trans-unit>
        <trans-unit id="a8a3d1b20a43045b41f22872309dca3f5ba7d92b" translate="yes" xml:space="preserve">
          <source>On MIPS targets, you can use the &lt;code&gt;nocompression&lt;/code&gt; function attribute to locally turn off MIPS16 and microMIPS code generation. This attribute overrides the</source>
          <target state="translated">MIPSターゲットでは、 &lt;code&gt;nocompression&lt;/code&gt; 関数属性を使用して、MIPS16およびmicroMIPSコード生成をローカルでオフにすることができます。この属性は、</target>
        </trans-unit>
        <trans-unit id="7ac9d4ebbb07978bcf6bb5025223236429b4e534" translate="yes" xml:space="preserve">
          <source>On Mach-O (Darwin) systems, this option directs the compiler emit to the glue for every direct call, and the Darwin linker decides whether to use or discard it.</source>
          <target state="translated">Mach-O (Darwin)システムでは、このオプションは、コンパイラが直接コールするたびにグルーにエミットするように指示し、Darwin リンカがそれを使用するか破棄するかを決定します。</target>
        </trans-unit>
        <trans-unit id="0531f735384ce9846fa4fc334be67cf2e96fb3ad" translate="yes" xml:space="preserve">
          <source>On MeP targets this causes the compiler to use a calling convention that assumes the called function is too far away for the built-in addressing modes.</source>
          <target state="translated">MeP ターゲットでは、これにより、コンパイラは、呼び出された関数がビルトインのアドレッシング・モードに対して遠すぎると仮定した呼び出し規則を使用するようになります。</target>
        </trans-unit>
        <trans-unit id="e79537bf7b0989b46efa7c25d92b58021882b02f" translate="yes" xml:space="preserve">
          <source>On MeP targets, this attribute causes the compiler to emit instructions to disable interrupts for the duration of the given function.</source>
          <target state="translated">MePターゲットでは、この属性により、コンパイラは、指定された関数の間、割り込みを無効にする命令を発行します。</target>
        </trans-unit>
        <trans-unit id="45c894de73eae9ba59be235302edfc626a14232c" translate="yes" xml:space="preserve">
          <source>On Microsoft Windows and Symbian OS targets, the &lt;code&gt;dllimport&lt;/code&gt; attribute causes the compiler to reference a function or variable via a global pointer to a pointer that is set up by the DLL exporting the symbol. The attribute implies &lt;code&gt;extern&lt;/code&gt;. On Microsoft Windows targets, the pointer name is formed by combining &lt;code&gt;_imp__&lt;/code&gt; and the function or variable name.</source>
          <target state="translated">Microsoft WindowsおよびSymbian OSターゲットでは、 &lt;code&gt;dllimport&lt;/code&gt; 属性により、コンパイラーは、シンボルをエクスポートするDLLによってセットアップされたポインターへのグローバルポインターを介して関数または変数を参照します。属性は &lt;code&gt;extern&lt;/code&gt; を意味します。Microsoft Windowsターゲットでは、ポインター名は &lt;code&gt;_imp__&lt;/code&gt; と関数名または変数名を組み合わせて形成されます。</target>
        </trans-unit>
        <trans-unit id="95c50cebcae93e25a947019e55136b1c7c018144" translate="yes" xml:space="preserve">
          <source>On Microsoft Windows targets and Symbian OS targets the &lt;code&gt;dllexport&lt;/code&gt; attribute causes the compiler to provide a global pointer to a pointer in a DLL, so that it can be referenced with the &lt;code&gt;dllimport&lt;/code&gt; attribute. On Microsoft Windows targets, the pointer name is formed by combining &lt;code&gt;_imp__&lt;/code&gt; and the function or variable name.</source>
          <target state="translated">Microsoft WindowsターゲットおよびSymbian OSターゲットでは、 &lt;code&gt;dllexport&lt;/code&gt; 属性により、コンパイラーはDLL内のポインターへのグローバルポインターを提供するため、 &lt;code&gt;dllimport&lt;/code&gt; 属性で参照できます。Microsoft Windowsターゲットでは、ポインター名は &lt;code&gt;_imp__&lt;/code&gt; と関数名または変数名を組み合わせて形成されます。</target>
        </trans-unit>
        <trans-unit id="1984118bd8c75f19c94d178d119ea2bc08e6c575" translate="yes" xml:space="preserve">
          <source>On Microsoft Windows, in addition to putting variable definitions in a named section, the section can also be shared among all running copies of an executable or DLL. For example, this small program defines shared data by putting it in a named section &lt;code&gt;shared&lt;/code&gt; and marking the section shareable:</source>
          <target state="translated">Microsoft Windowsでは、名前付きセクションに変数定義を配置するだけでなく、実行可能ファイルまたはDLLの実行中のすべてのコピー間でセクションを共有することもできます。たとえば、次の小さなプログラムは、名前付きセクションに &lt;code&gt;shared&lt;/code&gt; データを入れ、そのセクションを共有可能としてマークすることにより、共有データを定義しています。</target>
        </trans-unit>
        <trans-unit id="5416b1c81895550371270a53a7a543248ee3e4be" translate="yes" xml:space="preserve">
          <source>On NDS32 target, this attribute indicates that the specified function is an interrupt handler. The compiler generates corresponding sections for use in an interrupt handler. You can use the following attributes to modify the behavior:</source>
          <target state="translated">NDS32ターゲットでは、この属性は指定された関数が割り込みハンドラであることを示します。コンパイラは割り込みハンドラで使用するための対応するセクションを生成します。以下の属性を使用して動作を変更することができます。</target>
        </trans-unit>
        <trans-unit id="31667390cc139595ccf3b4f7b2d81a14b2b279d4" translate="yes" xml:space="preserve">
          <source>On Pentium and Pentium Pro, &lt;code&gt;double&lt;/code&gt; and &lt;code&gt;long double&lt;/code&gt; values should be aligned to an 8-byte boundary (see</source>
          <target state="translated">PentiumおよびPentium Proでは、 &lt;code&gt;double&lt;/code&gt; および &lt;code&gt;long double&lt;/code&gt; 値を8バイト境界に揃える必要があります（</target>
        </trans-unit>
        <trans-unit id="5dfd06a496b9a64bdf43d3d6ad76d85cea712405" translate="yes" xml:space="preserve">
          <source>On PowerPC64 ELFv2 and 32-bit PowerPC systems with newer GNU linkers, GCC can generate long calls using an inline PLT call sequence (see</source>
          <target state="translated">PowerPC64 ELFv2および32ビットPowerPCシステムで新しいGNUリンカを使用する場合、GCCはインラインPLTコールシーケンスを使用して長いコールを生成することができます(以下を参照)。</target>
        </trans-unit>
        <trans-unit id="dd5d9087b606be47a509c0bceb5673fb7be39a05" translate="yes" xml:space="preserve">
          <source>On RX and RL78 targets, you may specify one or more vector numbers as arguments to the attribute, as well as naming an alternate table name. Parameters are handled sequentially, so one handler can be assigned to multiple entries in multiple tables. One may also pass the magic string &lt;code&gt;&quot;$default&quot;&lt;/code&gt; which causes the function to be used for any unfilled slots in the current table.</source>
          <target state="translated">RXおよびRL78ターゲットでは、属性への引数として1つ以上のベクトル番号を指定し、代替テーブル名を指定できます。パラメータは順次処理されるため、1つのハンドラを複数のテーブルの複数のエントリに割り当てることができます。マジックストリング &lt;code&gt;&quot;$default&quot;&lt;/code&gt; を渡すこともできます。これにより、現在のテーブルの未使用のスロットに関数が使用されます。</target>
        </trans-unit>
        <trans-unit id="33e99d370bf29e8aa1e2a0d04c20a669d50fbb95" translate="yes" xml:space="preserve">
          <source>On S/390 System z targets, you can use this function attribute to make GCC generate a &amp;ldquo;hot-patching&amp;rdquo; function prologue. If the</source>
          <target state="translated">S / 390 System zターゲットでは、この関数属性を使用して、GCCに「ホットパッチ」関数プロローグを生成させることができます。もし</target>
        </trans-unit>
        <trans-unit id="292e9b4ac1aef350519264c0f4c8ed4c8aaf3d4f" translate="yes" xml:space="preserve">
          <source>On S/390, the following options are supported:</source>
          <target state="translated">S/390では、以下のオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="85b6abd02277c312603a05d0dd98120279ff33b7" translate="yes" xml:space="preserve">
          <source>On SH targets this attribute specifies that the function or struct follows the Renesas ABI.</source>
          <target state="translated">SHターゲットでは、この属性は、関数または構造体がルネサスのABIに従うことを指定します。</target>
        </trans-unit>
        <trans-unit id="381b0f04662e37f2a1bc4d3eb4c1a729f1a242f9" translate="yes" xml:space="preserve">
          <source>On SH targets this function attribute is similar to &lt;code&gt;interrupt_handler&lt;/code&gt; but it does not save and restore all registers.</source>
          <target state="translated">SHターゲットでは、この関数属性は &lt;code&gt;interrupt_handler&lt;/code&gt; に似ていますが、すべてのレジスタを保存および復元するわけではありません。</target>
        </trans-unit>
        <trans-unit id="964c2422605b94c99b69e72982ea74d1a785a572" translate="yes" xml:space="preserve">
          <source>On SH2A targets, this attribute declares a function to be called using the TBR relative addressing mode. The argument to this attribute is the entry number of the same function in a vector table containing all the TBR relative addressable functions. For correct operation the TBR must be setup accordingly to point to the start of the vector table before any functions with this attribute are invoked. Usually a good place to do the initialization is the startup routine. The TBR relative vector table can have at max 256 function entries. The jumps to these functions are generated using a SH2A specific, non delayed branch instruction JSR/N @(disp8,TBR). You must use GAS and GLD from GNU binutils version 2.7 or later for this attribute to work correctly.</source>
          <target state="translated">SH2A ターゲットでは、この属性は TBR 相対アドレッシングモードを使用して呼び出される関数を宣言します。この属性の引数は、すべてのTBR相対アドレス指定可能な関数を含むベクトルテーブル内の同じ関数のエントリ番号です。正しい動作のためには、この属性を持つ関数が呼び出される前に、TBRがベクトルテーブルの先頭を指すように設定されていなければなりません。通常、初期化を行うのに適した場所はスタートアップルーチンです。TBR 相対ベクトルテーブルは最大256個の関数エントリを持つことができます。これらの関数へのジャンプは、SH2A 固有の非遅延分岐命令 JSR/N @(disp8,TBR)を使用して生成されます。この属性が正しく動作するためには、GNU binutils バージョン 2.7 以降の GAS および GLD を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="65892861359bf290a855f95e8cb6e8d95a967575" translate="yes" xml:space="preserve">
          <source>On Solaris, the &lt;code&gt;malloc&lt;/code&gt; function in the</source>
          <target state="translated">Solarisでは、 &lt;code&gt;malloc&lt;/code&gt; 関数</target>
        </trans-unit>
        <trans-unit id="a340d1c003b3b4d0d84d1d6cf6a202ae90e97190" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems assume that all calls to variable argument functions are properly prototyped. Otherwise, the compiler must insert an instruction before every non-prototyped call to set or clear bit 6 of the condition code register (&lt;code&gt;CR&lt;/code&gt;) to indicate whether floating-point values are passed in the floating-point registers in case the function takes variable arguments. With</source>
          <target state="translated">System V.4および組み込みPowerPCシステムでは、可変引数関数へのすべての呼び出しが適切にプロトタイプ化されていると想定しています。それ以外の場合、コンパイラーは、プロトタイプ化されていないすべての呼び出しの前に命令を挿入して、関数が変数引数を取る場合に、浮動小数点レジスターに浮動小数点値が渡されるかどうかを示す条件コードレジスター（ &lt;code&gt;CR&lt;/code&gt; ）のビット6を設定またはクリアする必要があります。と</target>
        </trans-unit>
        <trans-unit id="f2256a579bf82138c9c5aa41348d0b7b51d6daac" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems compile code for the AIX operating system.</source>
          <target state="translated">System V.4 および組み込み PowerPC システムでは、AIX オペレーティングシステム用のコードをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="fe315e3b5ed8d61b53e89ed3d62ff77ecfdae7c6" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems compile code for the FreeBSD operating system.</source>
          <target state="translated">System V.4 および組み込み PowerPC システム上で、FreeBSD オペレーティングシステム用のコードをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="525d2d75f8b7eee055469b18921362ebea9e4825" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems compile code for the Linux-based GNU system.</source>
          <target state="translated">System V.4および組み込みPowerPCシステムでは、LinuxベースのGNUシステム用のコードをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="5a5ee1e2d22f0ce18e3c1c320f36b9946b4c8dfc" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems compile code for the NetBSD operating system.</source>
          <target state="translated">System V.4 および組み込み PowerPC システムでは、NetBSD オペレーティングシステム用のコードをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="0051934fe318ab8cbb17fab75edbf45c96f04c11" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems compile code for the OpenBSD operating system.</source>
          <target state="translated">System V.4 および組み込みの PowerPC システムでは、OpenBSD オペレーティングシステム用のコードをコンパイルしています。</target>
        </trans-unit>
        <trans-unit id="fdb7561e353b7728421832b70506b5d4c6fa3c7e" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems compile code for the processor in big-endian mode. The</source>
          <target state="translated">システムV.4と組み込みPowerPCシステムでは、ビッグエンディアンモードでプロセッサ用のコードをコンパイルします。には</target>
        </trans-unit>
        <trans-unit id="b791b572470291e1cfd42f57a4664b61e84003db" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems compile code for the processor in little-endian mode. The</source>
          <target state="translated">システムV.4と組み込みPowerPCシステムでは、リトルエンディアンモードでプロセッサ用のコードをコンパイルします。には</target>
        </trans-unit>
        <trans-unit id="f5beb7b132104d68f4f5cbc4a0ef4c49e27d02c4" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems compile code using calling conventions that adhere to the March 1995 draft of the System V Application Binary Interface, PowerPC processor supplement. This is the default unless you configured GCC using &amp;lsquo;</source>
          <target state="translated">System V.4および組み込みPowerPCシステムでは、System VアプリケーションバイナリインターフェイスのPowerPCプロセッサ補足の1995年3月のドラフトに準拠した呼び出し規約を使用してコードをコンパイルします。'を使用してGCCを構成しない限り、これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="ab88e303b786d21b1a8f42d2e000f229f5f18585" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems do (do not) adhere to the Embedded Applications Binary Interface (EABI), which is a set of modifications to the System V.4 specifications. Selecting</source>
          <target state="translated">System V.4 および組み込み PowerPC システムでは、System V.4 仕様の修正セットである Embedded Applications Binary Interface (EABI)に準拠しています(準拠していません)。選択</target>
        </trans-unit>
        <trans-unit id="2eae16e35bc06e716334b4c7921025ccfcc826e2" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems do (do not) emit register names in the assembly language output using symbolic forms.</source>
          <target state="translated">System V.4および組み込みPowerPCシステムでは、アセンブラ言語出力でシンボリック形式を使用してレジスタ名を出力します(しません)。</target>
        </trans-unit>
        <trans-unit id="cde6038a38326e8feda1354f3d6e68cbecd2d67e" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems do not (do) assume that register 2 contains a pointer to a global area pointing to the addresses used in the program.</source>
          <target state="translated">システムV.4および組み込みPowerPCシステムでは、レジスタ2にはプログラムで使用されるアドレスを指すグローバル領域へのポインタが含まれていると仮定しないでください(しないでください)。</target>
        </trans-unit>
        <trans-unit id="39c18d263ac536d281744080aa79ad7c482f8e46" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems do not (do) assume that unaligned memory references are handled by the system.</source>
          <target state="translated">システムV.4および組み込みPowerPCシステムでは、アラインメントされていないメモリ参照がシステムによって処理されると仮定してはいけません(してはいけません)。</target>
        </trans-unit>
        <trans-unit id="8a47777ab0b1471112076b4260b638a74879ac6e" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems do not (do) force structures and unions that contain bit-fields to be aligned to the base type of the bit-field.</source>
          <target state="translated">System V.4および組み込みPowerPCシステムでは、ビットフィールドを含む構造体およびユニオンは、ビットフィールドのベースタイプにアラインメントされるように強制されません(されません)。</target>
        </trans-unit>
        <trans-unit id="ca99d7fd8feba181eeef09d32b2193d269ff1a44" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems, if</source>
          <target state="translated">システムV.4および組み込みPowerPCシステムでは、以下の場合</target>
        </trans-unit>
        <trans-unit id="2eb1b46c19eb6001e288db42a1d14f5ecbe30724" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems, put small global and static data in the &lt;code&gt;.sdata&lt;/code&gt; section, which is pointed to by register &lt;code&gt;r13&lt;/code&gt;. Put small uninitialized global and static data in the &lt;code&gt;.sbss&lt;/code&gt; section, which is adjacent to the &lt;code&gt;.sdata&lt;/code&gt; section. The</source>
          <target state="translated">System V.4および組み込みPowerPCシステムでは、小さなグローバルデータと静的データを &lt;code&gt;.sdata&lt;/code&gt; セクションに入れます。これは、レジスタ &lt;code&gt;r13&lt;/code&gt; によってポイントされます。初期化されていない小さなグローバルデータと静的データを、 &lt;code&gt;.sbss&lt;/code&gt; セクションに隣接する &lt;code&gt;.sdata&lt;/code&gt; セクションに配置します。の</target>
        </trans-unit>
        <trans-unit id="d1b5ddbe5dde4d7f82f6d4e94233e96793e7eba8" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems, put small global data in the &lt;code&gt;.sdata&lt;/code&gt; section. Put small uninitialized global data in the &lt;code&gt;.sbss&lt;/code&gt; section. Do not use register &lt;code&gt;r13&lt;/code&gt; to address small data however. This is the default behavior unless other</source>
          <target state="translated">System V.4および組み込みPowerPCシステムでは、小さなグローバルデータを &lt;code&gt;.sdata&lt;/code&gt; セクションに配置します。初期化されていない小さなグローバルデータを &lt;code&gt;.sbss&lt;/code&gt; セクションに配置します。ただし、小さなデータをアドレス指定するためにレジスタ &lt;code&gt;r13&lt;/code&gt; を使用しないでください。他の場合を除き、これはデフォルトの動作です</target>
        </trans-unit>
        <trans-unit id="b52ae7ecf68ab25b84dbbd1c090a7974e90f350c" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems, put small initialized &lt;code&gt;const&lt;/code&gt; global and static data in the &lt;code&gt;.sdata2&lt;/code&gt; section, which is pointed to by register &lt;code&gt;r2&lt;/code&gt;. Put small initialized non-&lt;code&gt;const&lt;/code&gt; global and static data in the &lt;code&gt;.sdata&lt;/code&gt; section, which is pointed to by register &lt;code&gt;r13&lt;/code&gt;. Put small uninitialized global and static data in the &lt;code&gt;.sbss&lt;/code&gt; section, which is adjacent to the &lt;code&gt;.sdata&lt;/code&gt; section. The</source>
          <target state="translated">System V.4および組み込みPowerPCシステムでは、小さな初期化された &lt;code&gt;const&lt;/code&gt; グローバルおよび静的データを &lt;code&gt;.sdata2&lt;/code&gt; セクションに配置します。これは、レジスタ &lt;code&gt;r2&lt;/code&gt; によってポイントされます。小さな初期化された非 &lt;code&gt;const&lt;/code&gt; グローバルおよび静的データを &lt;code&gt;.sdata&lt;/code&gt; セクションに配置します。これは、レジスタ &lt;code&gt;r13&lt;/code&gt; によってポイントされます。初期化されていない小さなグローバルデータと静的データを、 &lt;code&gt;.sbss&lt;/code&gt; セクションに隣接する &lt;code&gt;.sdata&lt;/code&gt; セクションに配置します。の</target>
        </trans-unit>
        <trans-unit id="31ab20eab881b18de841e0f744838f8d79533911" translate="yes" xml:space="preserve">
          <source>On System V.4 and embedded PowerPC systems, specify that you are compiling for a VxWorks system.</source>
          <target state="translated">System V.4および組み込みPowerPCシステムでは、VxWorksシステム用にコンパイルしていることを指定します。</target>
        </trans-unit>
        <trans-unit id="3b7c9e8fe9be90e5b1711df0aa43109dbeeee519" translate="yes" xml:space="preserve">
          <source>On a PowerPC, you can compile a function with &lt;code&gt;target_clones(&quot;cpu=power9,default&quot;)&lt;/code&gt;. GCC will create two function clones, one compiled with</source>
          <target state="translated">PowerPCでは、 &lt;code&gt;target_clones(&quot;cpu=power9,default&quot;)&lt;/code&gt; を使用して関数をコンパイルできます。GCCは2つの関数クローンを作成し、1つは</target>
        </trans-unit>
        <trans-unit id="2b6207218221cf5a21cb4ce70228ebd866adf3c7" translate="yes" xml:space="preserve">
          <source>On a SPARC, GCC aligns all values of type &lt;code&gt;double&lt;/code&gt; on an 8-byte boundary, and it expects every &lt;code&gt;double&lt;/code&gt; to be so aligned. The Sun compiler usually gives &lt;code&gt;double&lt;/code&gt; values 8-byte alignment, with one exception: function arguments of type &lt;code&gt;double&lt;/code&gt; may not be aligned.</source>
          <target state="translated">SPARCでは、GCCはタイプ &lt;code&gt;double&lt;/code&gt; のすべての値を8バイト境界で整列させ、すべての &lt;code&gt;double&lt;/code&gt; がそのように整列されることを期待します。Sunのコンパイラは通常与え &lt;code&gt;double&lt;/code&gt; 型の関数の引数：1つの例外を除いて、値を8バイトのアライメントを &lt;code&gt;double&lt;/code&gt; 整列されない場合があります。</target>
        </trans-unit>
        <trans-unit id="c54d5e9842efa1190de832e68ceeddd07e1b57ec" translate="yes" xml:space="preserve">
          <source>On embedded PowerPC systems, assume that the startup module is called</source>
          <target state="translated">組み込みのPowerPCシステムでは、スタートアップモジュールが</target>
        </trans-unit>
        <trans-unit id="8b133920834ad968fd5e3ad90be374421844ec08" translate="yes" xml:space="preserve">
          <source>On embedded PowerPC systems, put all initialized global and static data in the &lt;code&gt;.data&lt;/code&gt; section, and all uninitialized data in the &lt;code&gt;.bss&lt;/code&gt; section.</source>
          <target state="translated">組み込みPowerPCシステムでは、初期化されたすべてのグローバルデータと静的データを &lt;code&gt;.data&lt;/code&gt; セクションに配置し、初期化されていないすべてのデータを &lt;code&gt;.bss&lt;/code&gt; セクションに配置します。</target>
        </trans-unit>
        <trans-unit id="956164ada36cee4efdb76678bae728426fa21ad6" translate="yes" xml:space="preserve">
          <source>On embedded PowerPC systems, put global and static items less than or equal to &lt;var&gt;num&lt;/var&gt; bytes into the small data or BSS sections instead of the normal data or BSS section. By default, &lt;var&gt;num&lt;/var&gt; is 8. The</source>
          <target state="translated">組み込みPowerPCシステムでは、 &lt;var&gt;num&lt;/var&gt; バイト以下のグローバルアイテムと静的アイテムを、通常のデータまたはBSSセクションではなく、小さなデータまたはBSSセクションに配置します。デフォルトでは、 &lt;var&gt;num&lt;/var&gt; は8です。</target>
        </trans-unit>
        <trans-unit id="12a413b7674df08ad1aab1d7a97049457f7c4105" translate="yes" xml:space="preserve">
          <source>On embedded PowerPC systems, set the &lt;code&gt;PPC_EMB&lt;/code&gt; bit in the ELF flags header to indicate that &amp;lsquo;</source>
          <target state="translated">組み込みPowerPCシステムでは、ELFフラグヘッダーの &lt;code&gt;PPC_EMB&lt;/code&gt; ビットを設定して、</target>
        </trans-unit>
        <trans-unit id="276196a98c13434d4d4c303d9ed47e653a63a0a3" translate="yes" xml:space="preserve">
          <source>On machines where a function returns floating-point results in the 80387 register stack, some floating-point opcodes may be emitted even if</source>
          <target state="translated">関数が浮動小数点の結果を 80387 レジスタスタックに返すマシンでは、いくつかの浮動小数点オペコードは</target>
        </trans-unit>
        <trans-unit id="765fd445f5f79a3b6c1bf65d331a2ab62d7c09c3" translate="yes" xml:space="preserve">
          <source>On machines with register windows, be sure to choose a global register that is not affected magically by the function call mechanism.</source>
          <target state="translated">レジスタウィンドウがあるマシンでは、関数呼び出しメカニズムの影響を受けないグローバルレジスタを選択するようにしてください。</target>
        </trans-unit>
        <trans-unit id="baf0367d5874a0c5c72bd2d02e6ad6a8602da5fb" translate="yes" xml:space="preserve">
          <source>On many platforms, GCC supports a different ABI for C++ than do other compilers, so the object files compiled by GCC cannot be used with object files generated by another C++ compiler.</source>
          <target state="translated">多くのプラットフォームでは、GCCは他のコンパイラとは異なるC++用のABIをサポートしているため、GCCでコンパイルされたオブジェクトファイルを他のC++コンパイラで生成されたオブジェクトファイルと一緒に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="4d7c2fb9e12e897dbce329dee3a106daf06850a0" translate="yes" xml:space="preserve">
          <source>On most machines, &lt;code&gt;longjmp&lt;/code&gt; restores to each global register variable the value it had at the time of the &lt;code&gt;setjmp&lt;/code&gt;. On some machines, however, &lt;code&gt;longjmp&lt;/code&gt; does not change the value of global register variables. To be portable, the function that called &lt;code&gt;setjmp&lt;/code&gt; should make other arrangements to save the values of the global register variables, and to restore them in a &lt;code&gt;longjmp&lt;/code&gt;. This way, the same thing happens regardless of what &lt;code&gt;longjmp&lt;/code&gt; does.</source>
          <target state="translated">ほとんどのマシンでは、 &lt;code&gt;longjmp&lt;/code&gt; は各グローバルレジスタ変数に、 &lt;code&gt;setjmp&lt;/code&gt; の時点での値を復元します。ただし、一部のマシンでは、 &lt;code&gt;longjmp&lt;/code&gt; はグローバルレジスタ変数の値を変更しません。移植性を高めるために、 &lt;code&gt;setjmp&lt;/code&gt; を呼び出した関数は、グローバルレジスタ変数の値を保存し、それらを &lt;code&gt;longjmp&lt;/code&gt; に復元するように他の調整を行う必要があります。このように、 &lt;code&gt;longjmp&lt;/code&gt; の動作に関係なく、同じことが起こります。</target>
        </trans-unit>
        <trans-unit id="61f4155d039689baf9c247b710861ebab661061d" translate="yes" xml:space="preserve">
          <source>On most systems that use stabs format,</source>
          <target state="translated">スタブ形式を使用しているほとんどのシステムでは</target>
        </trans-unit>
        <trans-unit id="164e2d1cdab76253173fd67017576978f44922c1" translate="yes" xml:space="preserve">
          <source>On some BSD systems, including some versions of Ultrix, use of profiling causes static variable destructors (currently used only in C++) not to be run.</source>
          <target state="translated">いくつかのバージョンの Ultrix を含むいくつかの BSD システムでは、プロファイリングを使用すると、静的変数のデストラクタ (現在は C++でのみ使用されています)が実行されなくなります。</target>
        </trans-unit>
        <trans-unit id="63572090afdc3d5b19c4bea28a32908c6254289e" translate="yes" xml:space="preserve">
          <source>On some machines it may be impossible to determine the frame address of any function other than the current one; in such cases, or when the top of the stack has been reached, this function returns &lt;code&gt;0&lt;/code&gt; if the first frame pointer is properly initialized by the startup code.</source>
          <target state="translated">マシンによっては、現在の機能以外の機能のフレームアドレスを判別できない場合があります。このような場合、またはスタックの先頭に達したときに、最初のフレームポインターがスタートアップコードによって適切に初期化されている場合、この関数は &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c1c8ec9b26e1e50270902a24206b23748281f80a" translate="yes" xml:space="preserve">
          <source>On some machines it may be impossible to determine the return address of any function other than the current one; in such cases, or when the top of the stack has been reached, this function returns &lt;code&gt;0&lt;/code&gt; or a random value. In addition, &lt;code&gt;__builtin_frame_address&lt;/code&gt; may be used to determine if the top of the stack has been reached.</source>
          <target state="translated">一部のマシンでは、現在の関数以外の関数の戻りアドレスを判別できない場合があります。このような場合、またはスタックの先頭に達した場合、この関数は &lt;code&gt;0&lt;/code&gt; またはランダムな値を返します。さらに、 &lt;code&gt;__builtin_frame_address&lt;/code&gt; を使用して、スタックの最上部に到達したかどうかを判断できます。</target>
        </trans-unit>
        <trans-unit id="9459429806b19bedbc3812fd4e4235d2169468c6" translate="yes" xml:space="preserve">
          <source>On some newer machines, PCC uses a reentrant convention for all structure and union returning. GCC on most of these machines uses a compatible convention when returning structures and unions in memory, but still returns small structures and unions in registers.</source>
          <target state="translated">いくつかの新しいマシンでは、PCC はすべての構造体とユニオンを返す際にリエントラント規約を使用します。これらのマシンのほとんどのGCCでは、メモリ内の構造体とユニオンを返す際に互換性のある規約を使用していますが、レジスタ内の小さな構造体とユニオンはまだ返されます。</target>
        </trans-unit>
        <trans-unit id="e7a00be8ad71da46c5174d313f9a640c4604077b" translate="yes" xml:space="preserve">
          <source>On some processors, like Intel Atom, 8-bit unsigned integer divide is much faster than 32-bit/64-bit integer divide. This option generates a run-time check. If both dividend and divisor are within range of 0 to 255, 8-bit unsigned integer divide is used instead of 32-bit/64-bit integer divide.</source>
          <target state="translated">Intel Atom のようないくつかのプロセッサでは、8 ビット符号なし整数除算は 32 ビット/64 ビット整数除算よりもはるかに高速です。このオプションは、ランタイムチェックを生成します。配当と除数の両方が 0 ~ 255 の範囲内にある場合、32 ビット/64 ビット整数除算の代わりに 8 ビット符号なし整数除算が使用されます。</target>
        </trans-unit>
        <trans-unit id="962c05222fdb4b91f96523bd87b84e3ad46c65d1" translate="yes" xml:space="preserve">
          <source>On some rare x86 targets, &lt;code&gt;setjmp&lt;/code&gt; doesn&amp;rsquo;t save the registers in all circumstances. In those cases, GCC doesn&amp;rsquo;t allocate any variables in registers unless they are marked &lt;code&gt;register&lt;/code&gt;.</source>
          <target state="translated">一部のまれなx86ターゲットでは、 &lt;code&gt;setjmp&lt;/code&gt; がすべての状況でレジスタを保存しない場合があります。これらの場合、GCCは、registerとマーク &lt;code&gt;register&lt;/code&gt; れていない限り、レジスターに変数を割り当てません。</target>
        </trans-unit>
        <trans-unit id="50b8a98a7845b95d4eb0c4bf2a96f13e10a0e926" translate="yes" xml:space="preserve">
          <source>On some systems, &amp;lsquo;</source>
          <target state="translated">一部のシステムでは、 '</target>
        </trans-unit>
        <trans-unit id="18b57ea0d71c60c160b6870aa792c110927a6a2b" translate="yes" xml:space="preserve">
          <source>On some systems, header file directories contain machine-specific symbolic links in certain places. This makes it possible to share most of the header files among hosts running the same version of the system on different machine models.</source>
          <target state="translated">いくつかのシステムでは、ヘッダファイルディレクトリの特定の場所にマシン固有のシンボリックリンクが含まれています。これにより、異なるマシンモデルで同じバージョンのシステムを実行しているホスト間でヘッダファイルの大部分を共有することが可能になります。</target>
        </trans-unit>
        <trans-unit id="5afa05ee4c2834411c301dd21c9dd367b2afc2a4" translate="yes" xml:space="preserve">
          <source>On some target machines, GCC supports many built-in functions specific to those machines. Generally these generate calls to specific machine instructions, but allow the compiler to schedule those calls.</source>
          <target state="translated">いくつかのターゲットマシンでは、GCCはそのマシンに特有の多くの組み込み関数をサポートしています。通常、これらの関数は特定のマシン命令の呼び出しを生成しますが、コンパイラはそれらの呼び出しをスケジュールすることができます。</target>
        </trans-unit>
        <trans-unit id="98a0b32bda81ede1cd6faa721c95ce64fb072f42" translate="yes" xml:space="preserve">
          <source>On some targets the attributes also accept an integer argument to specify a priority to control the order in which constructor and destructor functions are run. A constructor with a smaller priority number runs before a constructor with a larger priority number; the opposite relationship holds for destructors. So, if you have a constructor that allocates a resource and a destructor that deallocates the same resource, both functions typically have the same priority. The priorities for constructor and destructor functions are the same as those specified for namespace-scope C++ objects (see &lt;a href=&quot;c_002b_002b-attributes#C_002b_002b-Attributes&quot;&gt;C++ Attributes&lt;/a&gt;). However, at present, the order in which constructors for C++ objects with static storage duration and functions decorated with attribute &lt;code&gt;constructor&lt;/code&gt; are invoked is unspecified. In mixed declarations, attribute &lt;code&gt;init_priority&lt;/code&gt; can be used to impose a specific ordering.</source>
          <target state="translated">一部のターゲットでは、属性は整数の引数も受け入れて、コンストラクター関数とデストラクタ関数が実行される順序を制御する優先順位を指定します。優先順位の数値が小さいコンストラクターは、優先順位の数値が大きいコンストラクターの前に実行されます。逆の関係がデストラクタにも当てはまります。したがって、リソースを割り当てるコンストラクタと、同じリソースの割り当てを解除するデストラクタがある場合、通常、両方の関数の優先順位は同じです。コンストラクター関数とデストラクタ関数の優先順位は、名前空間スコープのC ++オブジェクトに指定されているものと同じです（&lt;a href=&quot;c_002b_002b-attributes#C_002b_002b-Attributes&quot;&gt;C ++属性を&lt;/a&gt;参照）。ただし、現時点では、静的ストレージ期間と関数 &lt;code&gt;constructor&lt;/code&gt; 装飾された関数を持つC ++オブジェクトのコンストラクターの順序起動は指定されていません。混合宣言では、属性 &lt;code&gt;init_priority&lt;/code&gt; を使用して特定の順序を強制できます。</target>
        </trans-unit>
        <trans-unit id="788803b9b10d0e01cda4976ecfb5c895ad7a5b3a" translate="yes" xml:space="preserve">
          <source>On some targets this flag has no effect because the standard calling sequence always uses a frame pointer, so it cannot be omitted.</source>
          <target state="translated">いくつかのターゲットでは、標準的な呼び出しシーケンスは常にフレームポインタを使用するため、このフラグは効果がありません。</target>
        </trans-unit>
        <trans-unit id="c64fcda505cd363eeb7c02acd97bfcddc4bbd34d" translate="yes" xml:space="preserve">
          <source>On some targets,</source>
          <target state="translated">いくつかのターゲットに</target>
        </trans-unit>
        <trans-unit id="69a2029b429c1edce694be8a2285d9fe96168834" translate="yes" xml:space="preserve">
          <source>On some targets, a special form of output operand exists by which conditions in the flags register may be outputs of the asm. The set of conditions supported are target specific, but the general rule is that the output variable must be a scalar integer, and the value is boolean. When supported, the target defines the preprocessor symbol &lt;code&gt;__GCC_ASM_FLAG_OUTPUTS__&lt;/code&gt;.</source>
          <target state="translated">一部のターゲットでは、フラグレジスタの条件がasmの出力となる特殊な形式の出力オペランドが存在します。サポートされる条件のセットはターゲット固有ですが、一般的な規則は、出力変数はスカラー整数である必要があり、値はブール値です。サポートされている場合、ターゲットはプリプロセッサシンボル &lt;code&gt;__GCC_ASM_FLAG_OUTPUTS__&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="15856f8aeb189d03f7962b7a088a8da27e3b7698" translate="yes" xml:space="preserve">
          <source>On some targets, the instruction set contains SIMD vector instructions which operate on multiple values contained in one large register at the same time. For example, on the x86 the MMX, 3DNow! and SSE extensions can be used this way.</source>
          <target state="translated">いくつかのターゲットでは、命令セットには、1つの大きなレジスタに含まれる複数の値を同時に操作するSIMDベクトル命令が含まれています。例えば、x86ではMMX、3DNow!とSSE拡張がこの方法で使用できます。</target>
        </trans-unit>
        <trans-unit id="f61759f6ed3890f04c249dd91cb9dd263d93f566" translate="yes" xml:space="preserve">
          <source>On systems that provide</source>
          <target state="translated">を提供するシステムにおいて</target>
        </trans-unit>
        <trans-unit id="3224a581ef3e35f60ddcaea7c51bc1eb2a15bb26" translate="yes" xml:space="preserve">
          <source>On systems that support dynamic linking, this overrides</source>
          <target state="translated">ダイナミックリンクをサポートするシステムでは、これは</target>
        </trans-unit>
        <trans-unit id="40c0cbf9ca562d8813acfb29f55f0f2638a9538b" translate="yes" xml:space="preserve">
          <source>On systems that support the &lt;code&gt;visibility&lt;/code&gt; attribute, this attribute also implies &amp;ldquo;default&amp;rdquo; visibility. It is an error to explicitly specify any other visibility.</source>
          <target state="translated">&lt;code&gt;visibility&lt;/code&gt; 属性をサポートするシステムでは、この属性は「デフォルト」の可視性も意味します。他の可視性を明示的に指定するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="0b5a32b9b4c00b5336f23962d28d21f5785c04c6" translate="yes" xml:space="preserve">
          <source>On systems where an underscore is normally prepended to the name of a C variable, this feature allows you to define names for the linker that do not start with an underscore.</source>
          <target state="translated">通常、C 変数の名前の前にアンダースコアが付加されるシステムでは、この機能により、アンダースコアで始まらないリンカの名前を定義できます。</target>
        </trans-unit>
        <trans-unit id="212542d3f9bd9c37cf41fc83c6e569604a10e8a0" translate="yes" xml:space="preserve">
          <source>On systems with recent GNU assembler and C library, the C++ compiler uses the &lt;code&gt;STB_GNU_UNIQUE&lt;/code&gt; binding to make sure that definitions of template static data members and static local variables in inline functions are unique even in the presence of &lt;code&gt;RTLD_LOCAL&lt;/code&gt;; this is necessary to avoid problems with a library used by two different &lt;code&gt;RTLD_LOCAL&lt;/code&gt; plugins depending on a definition in one of them and therefore disagreeing with the other one about the binding of the symbol. But this causes &lt;code&gt;dlclose&lt;/code&gt; to be ignored for affected DSOs; if your program relies on reinitialization of a DSO via &lt;code&gt;dlclose&lt;/code&gt; and &lt;code&gt;dlopen&lt;/code&gt;, you can use</source>
          <target state="translated">最近のGNUアセンブラーおよびCライブラリーを備えたシステムでは、C ++コンパイラーは &lt;code&gt;STB_GNU_UNIQUE&lt;/code&gt; バインディングを使用して、インライン関数のテンプレート静的データメンバーおよび静的ローカル変数の定義が &lt;code&gt;RTLD_LOCAL&lt;/code&gt; の存在下でも一意であることを確認します。これは、2つの異なる &lt;code&gt;RTLD_LOCAL&lt;/code&gt; プラグインによって使用されるライブラリの問題を回避するために必要です。一方のプラグインの定義によっては、プラグインについてのもう一方のプラグインとの不一致があります。しかし、これにより、影響を受けるDSOに対して &lt;code&gt;dlclose&lt;/code&gt; が無視されます。プログラムが &lt;code&gt;dlclose&lt;/code&gt; および &lt;code&gt;dlopen&lt;/code&gt; による DSOの再初期化に依存している場合は、次を使用できます。</target>
        </trans-unit>
        <trans-unit id="425eb623da59637995768118b04879b74012b572" translate="yes" xml:space="preserve">
          <source>On targets such as x86 that support multiple assembler dialects, all basic &lt;code&gt;asm&lt;/code&gt; blocks use the assembler dialect specified by the</source>
          <target state="translated">複数のアセンブラダイアレクトをサポートするx86などのターゲットでは、すべての基本的な &lt;code&gt;asm&lt;/code&gt; ブロックは、</target>
        </trans-unit>
        <trans-unit id="d61cb2550f8a937ac6fdb2426039ef34d8bd79ab" translate="yes" xml:space="preserve">
          <source>On targets such as x86, GCC supports multiple assembler dialects. The</source>
          <target state="translated">x86 などのターゲットでは、GCC は複数のアセンブラ方言をサポートしています。このようなターゲットでは、GCC は複数のアセンブラ方言をサポートしています。</target>
        </trans-unit>
        <trans-unit id="58cd0cfdbd27bd5c1c85588e8db09d5e47fe7abd" translate="yes" xml:space="preserve">
          <source>On targets that don&amp;rsquo;t support COMDAT, but do support weak symbols, GCC uses them. This way one copy overrides all the others, but the unused copies still take up space in the executable.</source>
          <target state="translated">COMDATをサポートしないが弱いシンボルをサポートするターゲットでは、GCCはそれらを使用します。この方法では、1つのコピーが他のすべてのコピーを上書きしますが、未使用のコピーは実行可能ファイルのスペースを占有します。</target>
        </trans-unit>
        <trans-unit id="db6b506cf934f95ab486d96d507e199e74530808" translate="yes" xml:space="preserve">
          <source>On targets that support strong aliases, G++ works around mangling changes by creating an alias with the correct mangled name when defining a symbol with an incorrect mangled name. This switch specifies which ABI version to use for the alias.</source>
          <target state="translated">強力なエイリアスをサポートしているターゲットでは、G++は、正しくないマングルされた名前のシンボルを定義する際に、正しいマングルされた名前のエイリアスを作成することで、変更のマングルを回避しています。このスイッチは、エイリアスに使用する ABI のバージョンを指定します。</target>
        </trans-unit>
        <trans-unit id="ad2005f135085bd91be5baac596d98423c81523a" translate="yes" xml:space="preserve">
          <source>On targets that support symbol aliases, the default is</source>
          <target state="translated">シンボルエイリアスをサポートするターゲットでは、デフォルトは</target>
        </trans-unit>
        <trans-unit id="08070a532da1172ea25375415fe645b0da79ac62" translate="yes" xml:space="preserve">
          <source>On targets that use instruction scheduling, this option controls the amount of debugging output the scheduler prints to the dump files.</source>
          <target state="translated">命令スケジューリングを使用するターゲットでは、このオプションは、スケジューラがダンプファイルに出力するデバッグ出力の量を制御します。</target>
        </trans-unit>
        <trans-unit id="0357809f36796934ee518b4f582ea0c9e04da24c" translate="yes" xml:space="preserve">
          <source>On targets where the user visible pointer size is smaller than the size of an actual hardware address this function returns the extended user pointer. Targets where this is true included ILP32 mode on x86_64 or Aarch64. This function is mainly useful when writing inline assembly code.</source>
          <target state="translated">ユーザ可視ポインタのサイズが実際のハードウェアアドレスのサイズよりも小さいターゲットでは、この関数は拡張ユーザポインタを返します。これが真であるターゲットには、x86_64やAarch64上のILP32モードが含まれます。この関数は、主にインラインアセンブリコードを書く場合に便利です。</target>
        </trans-unit>
        <trans-unit id="c74599677d84a97b951cd701c929b270ae2a8f43" translate="yes" xml:space="preserve">
          <source>On the ARC, you must specify the kind of interrupt to be handled in a parameter to the interrupt attribute like this:</source>
          <target state="translated">ARCでは、以下のように割り込み属性のパラメータに処理する割り込みの種類を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8f1b9d0583dcf355892e7a5808d90a73184b57e9" translate="yes" xml:space="preserve">
          <source>On the AVR target, there are several address spaces that can be used in order to put read-only data into the flash memory and access that data by means of the special instructions &lt;code&gt;LPM&lt;/code&gt; or &lt;code&gt;ELPM&lt;/code&gt; needed to read from flash.</source>
          <target state="translated">AVRターゲットでは、読み取り専用データをフラッシュメモリに入れ、フラッシュから読み取るために必要な &lt;code&gt;LPM&lt;/code&gt; または &lt;code&gt;ELPM&lt;/code&gt; の特別な命令によってそのデータにアクセスするために使用できるアドレススペースがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="fa1a3a8be337624014eab65a011ba0cd4944578f" translate="yes" xml:space="preserve">
          <source>On the AVR, the hardware globally disables interrupts when an interrupt is executed. The first instruction of an interrupt handler declared with this attribute is a &lt;code&gt;SEI&lt;/code&gt; instruction to re-enable interrupts. See also the &lt;code&gt;signal&lt;/code&gt; function attribute that does not insert a &lt;code&gt;SEI&lt;/code&gt; instruction. If both &lt;code&gt;signal&lt;/code&gt; and &lt;code&gt;interrupt&lt;/code&gt; are specified for the same function, &lt;code&gt;signal&lt;/code&gt; is silently ignored.</source>
          <target state="translated">AVRでは、割り込みが実行されると、ハードウェアが割り込みをグローバルに無効にします。この属性で宣言された割り込みハンドラの最初の命令は、割り込みを再度有効にする &lt;code&gt;SEI&lt;/code&gt; 命令です。 &lt;code&gt;SEI&lt;/code&gt; 命令を挿入しない &lt;code&gt;signal&lt;/code&gt; 関数属性も参照してください。同じ関数に &lt;code&gt;signal&lt;/code&gt; と &lt;code&gt;interrupt&lt;/code&gt; 両方が指定されている場合、 &lt;code&gt;signal&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="5cd37ff9ade8fdf6a273265986e56386f3b6bf8a" translate="yes" xml:space="preserve">
          <source>On the H8/300H and H8S, use the same alignment rules as for the H8/300. The default for the H8/300H and H8S is to align longs and floats on 4-byte boundaries.</source>
          <target state="translated">H8/300H および H8S では、H8/300 と同じアラインメント規則を使用します。H8/300HとH8Sのデフォルトでは、ロングとフロートを4バイト境界に配置します。</target>
        </trans-unit>
        <trans-unit id="11e9b1c71b01253bfa1fdd5df13310266b613077" translate="yes" xml:space="preserve">
          <source>On the HP PA machine, ADB sometimes fails to work on functions compiled with GCC. Specifically, it fails to work on functions that use &lt;code&gt;alloca&lt;/code&gt; or variable-size arrays. This is because GCC doesn&amp;rsquo;t generate HP-UX unwind descriptors for such functions. It may even be impossible to generate them.</source>
          <target state="translated">HP PAマシンでは、ADBがGCCでコンパイルされた関数で機能しないことがあります。特に、 &lt;code&gt;alloca&lt;/code&gt; または可変サイズの配列を使用する関数では機能しません。これは、GCCがそのような関数のHP-UXアンワインド記述子を生成しないためです。それらを生成することさえ不可能かもしれません。</target>
        </trans-unit>
        <trans-unit id="a6f0c85db03b4e781c3473176ab2b4c1d6c0940b" translate="yes" xml:space="preserve">
          <source>On the M32C target, with the R8C and M16C CPU variants, variables qualified with &lt;code&gt;__far&lt;/code&gt; are accessed using 32-bit addresses in order to access memory beyond the first 64 Ki bytes. If &lt;code&gt;__far&lt;/code&gt; is used with the M32CM or M32C CPU variants, it has no effect.</source>
          <target state="translated">R8CおよびM16C CPUバリアントのM32Cターゲットでは、最初の64 Kiバイトを超えてメモリにアクセスするために、 &lt;code&gt;__far&lt;/code&gt; で修飾された変数が32ビットアドレスを使用してアクセスされます。 &lt;code&gt;__far&lt;/code&gt; がM32CMまたはM32C CPUバリアントで使用されている場合、効果はありません。</target>
        </trans-unit>
        <trans-unit id="8646819484a9f2352804185ed962b1134d1b1e37" translate="yes" xml:space="preserve">
          <source>On the M32R/D, use this attribute to set the addressability of an object, and of the code generated for a function. The identifier &lt;var&gt;model-name&lt;/var&gt; is one of &lt;code&gt;small&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, or &lt;code&gt;large&lt;/code&gt;, representing each of the code models.</source>
          <target state="translated">M32R / Dでは、この属性を使用して、オブジェクトと、関数に対して生成されたコードのアドレス可能度を設定します。識別子 &lt;var&gt;model-name&lt;/var&gt; は、各コードモデルを表す &lt;code&gt;small&lt;/code&gt; 、 &lt;code&gt;medium&lt;/code&gt; 、または &lt;code&gt;large&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="9e52ddbba667c27e2e0b8a95a8956a520ea2f402" translate="yes" xml:space="preserve">
          <source>On the MIPS platform, there is related use for local register variables with slightly different characteristics (see &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gccint/MIPS-Coprocessors.html#MIPS-Coprocessors&quot;&gt;Defining coprocessor specifics for MIPS targets&lt;/a&gt; in GNU Compiler Collection (GCC) Internals).</source>
          <target state="translated">MIPSプラットフォームでは、特性が少し異なるローカルレジスタ変数の関連する使用方法があります（GNUコンパイラコレクション（GCC）内部&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gccint/MIPS-Coprocessors.html#MIPS-Coprocessors&quot;&gt;でのMIPSターゲットのコプロセッサ仕様の定義を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="7d84cba170c40b006fde2258af21b87e67ebfb09" translate="yes" xml:space="preserve">
          <source>On the MSP430 target these attributes can be used to specify whether the function or variable should be placed into low memory, high memory, or the placement should be left to the linker to decide. The attributes are only significant if compiling for the MSP430X architecture.</source>
          <target state="translated">MSP430ターゲットでは、これらの属性を使用して、関数や変数をローメモリに配置するか、ハイメモリに配置するか、配置をリンカに任せるかを指定することができます。これらの属性は、MSP430Xアーキテクチャ用にコンパイルする場合にのみ重要です。</target>
        </trans-unit>
        <trans-unit id="d95670eabb89227c4ff1a457e8d12df37bee42fd" translate="yes" xml:space="preserve">
          <source>On the PowerPC Linux VSX targets, you can declare complex types using the corresponding internal complex type, &lt;code&gt;KCmode&lt;/code&gt; for &lt;code&gt;__float128&lt;/code&gt; type and &lt;code&gt;ICmode&lt;/code&gt; for &lt;code&gt;__ibm128&lt;/code&gt; type:</source>
          <target state="translated">PowerPCのLinuxのVSX目標では、あなたは、対応する内部複合型、使用して複雑な型を宣言することができ &lt;code&gt;KCmode&lt;/code&gt; をするために &lt;code&gt;__float128&lt;/code&gt; タイプと &lt;code&gt;ICmode&lt;/code&gt; ため &lt;code&gt;__ibm128&lt;/code&gt; タイプ：</target>
        </trans-unit>
        <trans-unit id="f6000ef0ce4e92f4ee54acf70fa8700653c71a5b" translate="yes" xml:space="preserve">
          <source>On the PowerPC, the following options are allowed:</source>
          <target state="translated">PowerPCでは、以下のオプションが許可されています。</target>
        </trans-unit>
        <trans-unit id="86940e5138753858b6a6f91addcad4105a370c7f" translate="yes" xml:space="preserve">
          <source>On the PowerPC, the inliner does not inline a function that has different target options than the caller, unless the callee has a subset of the target options of the caller.</source>
          <target state="translated">PowerPC では、着呼側が着呼側のターゲットオプションのサブセットを持っていない限り、着呼側とは異なるターゲットオプションを持つ関数をインライン化することはありません。</target>
        </trans-unit>
        <trans-unit id="45c4a00032a0dce389cc7f9c888e279c99fc2d6e" translate="yes" xml:space="preserve">
          <source>On the R8000 CPU when multiply-accumulate instructions are used, the intermediate product is calculated to infinite precision and is not subject to the FCSR Flush to Zero bit. This may be undesirable in some circumstances. On other processors the result is numerically identical to the equivalent computation using separate multiply, add, subtract and negate instructions.</source>
          <target state="translated">R8000 CPUで乗積命令を使用する場合、中間積は無限精度で計算され、FCSR Flush to Zeroビットの対象外となります。これは、状況によっては望ましくない場合があります。他のプロセッサでは、乗算、加算、減算、および否定の各命令を別々に使用した場合と同等の計算結果が数値的に同じになります。</target>
        </trans-unit>
        <trans-unit id="0c2723395c05076575d0edc1ba09dc0cbf5cf2e2" translate="yes" xml:space="preserve">
          <source>On the RL78 target, variables qualified with &lt;code&gt;__far&lt;/code&gt; are accessed with 32-bit pointers (20-bit addresses) rather than the default 16-bit addresses. Non-far variables are assumed to appear in the topmost 64 KiB of the address space.</source>
          <target state="translated">RL78ターゲットでは、 &lt;code&gt;__far&lt;/code&gt; で修飾された変数は、デフォルトの16ビットアドレスではなく、32ビットポインター（20ビットアドレス）でアクセスされます。far以外の変数は、アドレス空間の最上位64 KiBに出現すると想定されています。</target>
        </trans-unit>
        <trans-unit id="fd6f38b7027d1749320d26f46d1a28168c174ead" translate="yes" xml:space="preserve">
          <source>On the SH Symbian OS target the &lt;code&gt;dllimport&lt;/code&gt; attribute also has another affect&amp;mdash;it can cause the vtable and run-time type information for a class to be exported. This happens when the class has a dllimported constructor or a non-inline, non-pure virtual function and, for either of those two conditions, the class also has an inline constructor or destructor and has a key function that is defined in the current translation unit.</source>
          <target state="translated">SH Symbian OSターゲットでは、 &lt;code&gt;dllimport&lt;/code&gt; 属性も別の影響を及ぼします。これにより、クラスのvtableおよびランタイムタイプ情報がエクスポートされる可能性があります。これは、クラスにdllimportコンストラクターまたは非インライン、非純粋仮想関数があり、これらの2つの条件のいずれかについて、クラスにインラインコンストラクターまたはデストラクターがあり、現在の変換で定義されているキー関数がある場合に発生します単位。</target>
        </trans-unit>
        <trans-unit id="cd5e8bc41b24a03848da023d0c42ed2a7835fd49" translate="yes" xml:space="preserve">
          <source>On the SH2A target, this attribute enables the high-speed register saving and restoration using a register bank for &lt;code&gt;interrupt_handler&lt;/code&gt; routines. Saving to the bank is performed automatically after the CPU accepts an interrupt that uses a register bank.</source>
          <target state="translated">SH2Aターゲットでは、この属性により、 &lt;code&gt;interrupt_handler&lt;/code&gt; ルーチンのレジスタバンクを使用して、高速なレジスタの保存と復元が可能になります。バンクへの保存は、CPUがレジスタバンクを使用する割り込みを受け付けた後に自動的に実行されます。</target>
        </trans-unit>
        <trans-unit id="f2adbfacdc8481145065b808452ffcbbe789d6e7" translate="yes" xml:space="preserve">
          <source>On the SPU target variables may be declared as belonging to another address space by qualifying the type with the &lt;code&gt;__ea&lt;/code&gt; address space identifier:</source>
          <target state="translated">SPUでは、 &lt;code&gt;__ea&lt;/code&gt; アドレススペース識別子で型を修飾することにより、ターゲット変数を別のアドレススペースに属するものとして宣言できます。</target>
        </trans-unit>
        <trans-unit id="583c1957eff9fd54fc7ba9d8a8ce5bd6cbbb0dbc" translate="yes" xml:space="preserve">
          <source>On the i386, x86_64, IA-64, and HP-UX targets, you can declare complex types using the corresponding internal complex type, &lt;code&gt;XCmode&lt;/code&gt; for &lt;code&gt;__float80&lt;/code&gt; type and &lt;code&gt;TCmode&lt;/code&gt; for &lt;code&gt;__float128&lt;/code&gt; type:</source>
          <target state="translated">I386、x86_64版では、IA-64、およびHP-UXのターゲットは、あなたが対応する内部複合型、使用して複雑な型を宣言することができ &lt;code&gt;XCmode&lt;/code&gt; をするために &lt;code&gt;__float80&lt;/code&gt; タイプと &lt;code&gt;TCmode&lt;/code&gt; ため &lt;code&gt;__float128&lt;/code&gt; タイプ：</target>
        </trans-unit>
        <trans-unit id="c654fceb0b13e0812db2eebf6209fb23d2a4245f" translate="yes" xml:space="preserve">
          <source>On the reduced Tiny devices like ATtiny40, no address spaces are supported. Just use vanilla C / C++ code without overhead as outlined above. Attribute &lt;code&gt;progmem&lt;/code&gt; is supported but works differently, see &lt;a href=&quot;variable-attributes#AVR-Variable-Attributes&quot;&gt;AVR Variable Attributes&lt;/a&gt;.</source>
          <target state="translated">ATtiny40のような縮小されたTinyデバイスでは、アドレス空間はサポートされていません。上で概説したように、オーバーヘッドのないバニラC / C ++コードを使用するだけです。属性 &lt;code&gt;progmem&lt;/code&gt; はサポートされていますが、動作が異なります。「&lt;a href=&quot;variable-attributes#AVR-Variable-Attributes&quot;&gt;AVR変数属性&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="4951a4be95b4833eb07239f4a372cdd8f2448825" translate="yes" xml:space="preserve">
          <source>On the x86 target, variables may be declared as being relative to the &lt;code&gt;%fs&lt;/code&gt; or &lt;code&gt;%gs&lt;/code&gt; segments.</source>
          <target state="translated">x86ターゲットでは、変数は &lt;code&gt;%fs&lt;/code&gt; または &lt;code&gt;%gs&lt;/code&gt; セグメントに関連するものとして宣言できます。</target>
        </trans-unit>
        <trans-unit id="147636575199bc4c1463a6a96921cb3caf526a23" translate="yes" xml:space="preserve">
          <source>On the x86, the following options are allowed:</source>
          <target state="translated">x86では、以下のオプションが許可されています。</target>
        </trans-unit>
        <trans-unit id="04f0f8c579cd5c70473d51704cbf41abb08c9dc8" translate="yes" xml:space="preserve">
          <source>On the x86, the inliner does not inline a function that has different target options than the caller, unless the callee has a subset of the target options of the caller. For example a function declared with &lt;code&gt;target(&quot;sse3&quot;)&lt;/code&gt; can inline a function with &lt;code&gt;target(&quot;sse2&quot;)&lt;/code&gt;, since &lt;code&gt;-msse3&lt;/code&gt; implies &lt;code&gt;-msse2&lt;/code&gt;.</source>
          <target state="translated">x86では、呼び出し先のターゲットオプションのサブセットがない限り、インライナーは呼び出し元とは異なるターゲットオプションを持つ関数をインライン化しません。例えば、関数がで宣言 &lt;code&gt;target(&quot;sse3&quot;)&lt;/code&gt; との関数をインラインすることができる &lt;code&gt;target(&quot;sse2&quot;)&lt;/code&gt; ので、 &lt;code&gt;-msse3&lt;/code&gt; を意味 &lt;code&gt;-msse2&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="0c4f5a0b052b2a8060d4fded035d077e00490366" translate="yes" xml:space="preserve">
          <source>On the x86-32 targets, the &lt;code&gt;cdecl&lt;/code&gt; attribute causes the compiler to assume that the calling function pops off the stack space used to pass arguments. This is useful to override the effects of the</source>
          <target state="translated">x86-32ターゲットでは、 &lt;code&gt;cdecl&lt;/code&gt; 属性により、コンパイラーは、呼び出し元の関数が引数を渡すために使用されるスタック空間からポップするものと想定します。これは、</target>
        </trans-unit>
        <trans-unit id="ef036c2436b70e56f5d89ed3a4bd592468b97a24" translate="yes" xml:space="preserve">
          <source>On those ARM targets that support &lt;code&gt;dllimport&lt;/code&gt; (such as Symbian OS), you can use the &lt;code&gt;notshared&lt;/code&gt; attribute to indicate that the virtual table and other similar data for a class should not be exported from a DLL. For example:</source>
          <target state="translated">&lt;code&gt;dllimport&lt;/code&gt; をサポートするARMターゲット（Symbian OSなど）では、 &lt;code&gt;notshared&lt;/code&gt; 属性を使用して、クラスの仮想テーブルおよびその他の同様のデータをDLLからエクスポートしないように指定できます。例えば：</target>
        </trans-unit>
        <trans-unit id="70eb4df699149cfe34494e2a2d4a3053eec54b36" translate="yes" xml:space="preserve">
          <source>On x86 targets, the &lt;code&gt;fentry_name&lt;/code&gt; attribute sets the function to call on function entry when function instrumentation is enabled with</source>
          <target state="translated">x86ターゲットでは、関数のインストルメンテーションが有効になっている場合、 &lt;code&gt;fentry_name&lt;/code&gt; 属性は関数のエントリで呼び出す関数を設定します</target>
        </trans-unit>
        <trans-unit id="3c3e4dc55159d733bc6d8174d6c0b4b44576b30b" translate="yes" xml:space="preserve">
          <source>On x86 targets, the &lt;code&gt;fentry_section&lt;/code&gt; attribute sets the name of the section to record function entry instrumentation calls in when enabled with</source>
          <target state="translated">x86ターゲットでは、 &lt;code&gt;fentry_section&lt;/code&gt; 属性は、セクションの名前を設定して、</target>
        </trans-unit>
        <trans-unit id="13bdaf45293e8c14caaa41c024215d1502f9dedd" translate="yes" xml:space="preserve">
          <source>On x86 targets, the &lt;code&gt;force_align_arg_pointer&lt;/code&gt; attribute may be applied to individual function definitions, generating an alternate prologue and epilogue that realigns the run-time stack if necessary. This supports mixing legacy codes that run with a 4-byte aligned stack with modern codes that keep a 16-byte stack for SSE compatibility.</source>
          <target state="translated">x86ターゲットでは、 &lt;code&gt;force_align_arg_pointer&lt;/code&gt; 属性を個々の関数定義に適用して、必要に応じてランタイムスタックを再調整する代替プロローグとエピローグを生成できます。これは、4バイト境界整列スタックで実行されるレガシーコードと、SSE互換性のために16バイトスタックを保持する最新コードとの混合をサポートします。</target>
        </trans-unit>
        <trans-unit id="4b9b1df237cb48ab5b390c563b9173f28432ce30" translate="yes" xml:space="preserve">
          <source>On x86 targets, the &lt;code&gt;function_return&lt;/code&gt; attribute causes the compiler to convert function return with &lt;var&gt;choice&lt;/var&gt;. &amp;lsquo;</source>
          <target state="translated">x86ターゲットでは、 &lt;code&gt;function_return&lt;/code&gt; 属性により、コンパイラーはfunction returnを &lt;var&gt;choice&lt;/var&gt; で変換します。」</target>
        </trans-unit>
        <trans-unit id="e98109b32d764a6aa78e38267f8fd0b80deffe59" translate="yes" xml:space="preserve">
          <source>On x86 targets, the &lt;code&gt;indirect_branch&lt;/code&gt; attribute causes the compiler to convert indirect call and jump with &lt;var&gt;choice&lt;/var&gt;. &amp;lsquo;</source>
          <target state="translated">x86ターゲットでは、 &lt;code&gt;indirect_branch&lt;/code&gt; 属性により、コンパイラーは間接呼び出しを変換し、 &lt;var&gt;choice&lt;/var&gt; ジャンプします。」</target>
        </trans-unit>
        <trans-unit id="6debaf7293c72e5d4ef579b9583d9c54220aa952" translate="yes" xml:space="preserve">
          <source>On x86 targets, there are several rules on the usage of stack-like registers in the operands of an &lt;code&gt;asm&lt;/code&gt;. These rules apply only to the operands that are stack-like registers:</source>
          <target state="translated">x86ターゲットでは、 &lt;code&gt;asm&lt;/code&gt; のオペランドでのスタックのようなレジスターの使用に関するいくつかのルールがあります。これらの規則は、スタックのようなレジスターであるオペランドにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="0a9ad2d6b1a6892ed184c51d63255bdbba6feecb" translate="yes" xml:space="preserve">
          <source>On x86-32 targets with SSE support, the &lt;code&gt;sseregparm&lt;/code&gt; attribute causes the compiler to pass up to 3 floating-point arguments in SSE registers instead of on the stack. Functions that take a variable number of arguments continue to pass all of their floating-point arguments on the stack.</source>
          <target state="translated">SSEサポートのあるx86-32ターゲットでは、 &lt;code&gt;sseregparm&lt;/code&gt; 属性により、コンパイラーはスタックではなくSSEレジスターで最大3つの浮動小数点引数を渡します。可変数の引数を取る関数は、引き続きスタック上のすべての浮動小数点引数を渡します。</target>
        </trans-unit>
        <trans-unit id="b5b62a62d6592728c9f30e63c3f3d4654c7cba4c" translate="yes" xml:space="preserve">
          <source>On x86-32 targets, the &lt;code&gt;fastcall&lt;/code&gt; attribute causes the compiler to pass the first argument (if of integral type) in the register ECX and the second argument (if of integral type) in the register EDX. Subsequent and other typed arguments are passed on the stack. The called function pops the arguments off the stack. If the number of arguments is variable all arguments are pushed on the stack.</source>
          <target state="translated">x86-32ターゲットでは、 &lt;code&gt;fastcall&lt;/code&gt; 属性により、コンパイラーはレジスターECXで最初の引数（整数型の場合）とレジスターEDXで2番目の引数（整数型の場合）を渡します。以降の型付き引数はスタックに渡されます。呼び出された関数は、スタックから引数をポップします。引数の数が可変の場合、すべての引数がスタックにプッシュされます。</target>
        </trans-unit>
        <trans-unit id="cbd1fa07b20b0b27ba6acba6bf923a6e60833164" translate="yes" xml:space="preserve">
          <source>On x86-32 targets, the &lt;code&gt;regparm&lt;/code&gt; attribute causes the compiler to pass arguments number one to &lt;var&gt;number&lt;/var&gt; if they are of integral type in registers EAX, EDX, and ECX instead of on the stack. Functions that take a variable number of arguments continue to be passed all of their arguments on the stack.</source>
          <target state="translated">x86-32ターゲットでは、 &lt;code&gt;regparm&lt;/code&gt; 属性により、スタックではなくレジスターEAX、EDX、およびECXで整数型の引数である場合、コンパイラーは引数番号1から &lt;var&gt;number&lt;/var&gt; を渡します。可変数の引数を取る関数は、引き続きスタック上のすべての引数に渡されます。</target>
        </trans-unit>
        <trans-unit id="3ff7dde95e04753c9aa0506316b6827d1c04e392" translate="yes" xml:space="preserve">
          <source>On x86-32 targets, the &lt;code&gt;stdcall&lt;/code&gt; attribute causes the compiler to assume that the called function pops off the stack space used to pass arguments, unless it takes a variable number of arguments.</source>
          <target state="translated">x86-32ターゲットでは、 &lt;code&gt;stdcall&lt;/code&gt; 属性により、コンパイラーは、可変数の引数を取らない限り、呼び出された関数が引数を渡すために使用されるスタック領域からポップするものと想定します。</target>
        </trans-unit>
        <trans-unit id="7e68005038eba79aa520fa3e9f1d5a1f549a6854" translate="yes" xml:space="preserve">
          <source>On x86-32 targets, the &lt;code&gt;thiscall&lt;/code&gt; attribute causes the compiler to pass the first argument (if of integral type) in the register ECX. Subsequent and other typed arguments are passed on the stack. The called function pops the arguments off the stack. If the number of arguments is variable all arguments are pushed on the stack. The &lt;code&gt;thiscall&lt;/code&gt; attribute is intended for C++ non-static member functions. As a GCC extension, this calling convention can be used for C functions and for static member methods.</source>
          <target state="translated">x86-32ターゲットでは、 &lt;code&gt;thiscall&lt;/code&gt; 属性により、コンパイラーは最初の引数（整数型の場合）をECXレジスターに渡します。以降の型付き引数はスタックに渡されます。呼び出された関数は、スタックから引数をポップします。引数の数が可変の場合、すべての引数がスタックにプッシュされます。 &lt;code&gt;thiscall&lt;/code&gt; 属性はC ++非静的メンバ関数を対象としています。GCC拡張機能として、この呼び出し規約はC関数と静的メンバーメソッドに使用できます。</target>
        </trans-unit>
        <trans-unit id="4c75d4c9c1f7232a6ff5a36eb71f949d09c252de" translate="yes" xml:space="preserve">
          <source>On x86-32 targets, you can use this attribute to control how aggregates are returned in memory. If the caller is responsible for popping the hidden pointer together with the rest of the arguments, specify &lt;var&gt;number&lt;/var&gt; equal to zero. If callee is responsible for popping the hidden pointer, specify &lt;var&gt;number&lt;/var&gt; equal to one.</source>
          <target state="translated">x86-32ターゲットでは、この属性を使用して、メモリで集計を返す方法を制御できます。呼び出し元が残りの引数と共に隠しポインタをポップする責任がある場合は、ゼロに等しい &lt;var&gt;number&lt;/var&gt; 指定します。呼び出し先が隠しポインタをポップする責任がある場合は、1に等しい &lt;var&gt;number&lt;/var&gt; 指定します。</target>
        </trans-unit>
        <trans-unit id="4fecb03395dc1395498320fbdf3198613b4b8a60" translate="yes" xml:space="preserve">
          <source>On x86-64,</source>
          <target state="translated">x86-64で。</target>
        </trans-unit>
        <trans-unit id="42dd75ddf8dffa70aaf71424d90322dc968acd07" translate="yes" xml:space="preserve">
          <source>Once you know these things about how your code works when compiled, you can look at each module to see which modules should be optimized. &lt;code&gt;gcov&lt;/code&gt; helps you determine where to work on optimization.</source>
          <target state="translated">コンパイル時にコードがどのように機能するかについてこれらのことを理解したら、各モジュールを見て、どのモジュールを最適化する必要があるかを確認できます。 &lt;code&gt;gcov&lt;/code&gt; は、最適化に取り組む場所を決定するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="7b43238f6f78aaf633ee23a498072b63cc24feec" translate="yes" xml:space="preserve">
          <source>One 16x16 multiplier, blocking, sequential. The following instructions are additionally enabled: &lt;code&gt;mpy&lt;/code&gt;, &lt;code&gt;mpyu&lt;/code&gt;, &lt;code&gt;mpym&lt;/code&gt;, &lt;code&gt;mpymu&lt;/code&gt;, and &lt;code&gt;mpy_s&lt;/code&gt;.</source>
          <target state="translated">1つの16x16乗算器、ブロッキング、シーケンシャル。次の命令がさらに有効になります： &lt;code&gt;mpy&lt;/code&gt; 、 &lt;code&gt;mpyu&lt;/code&gt; 、 &lt;code&gt;mpym&lt;/code&gt; 、 &lt;code&gt;mpymu&lt;/code&gt; 、および &lt;code&gt;mpy_s&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="21c409760c2daeb8e7cc4e16b05141d45f49a9c8" translate="yes" xml:space="preserve">
          <source>One 32x4 multiplier, blocking, sequential. The following instructions are additionally enabled: &lt;code&gt;mpy&lt;/code&gt;, &lt;code&gt;mpyu&lt;/code&gt;, &lt;code&gt;mpym&lt;/code&gt;, &lt;code&gt;mpymu&lt;/code&gt;, and &lt;code&gt;mpy_s&lt;/code&gt;.</source>
          <target state="translated">32x4乗算器1つ、ブロッキング、シーケンシャル。次の命令がさらに有効になります： &lt;code&gt;mpy&lt;/code&gt; 、 &lt;code&gt;mpyu&lt;/code&gt; 、 &lt;code&gt;mpym&lt;/code&gt; 、 &lt;code&gt;mpymu&lt;/code&gt; 、および &lt;code&gt;mpy_s&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="849f208cf290b5367e3408ce32e8d353040bdae1" translate="yes" xml:space="preserve">
          <source>One attribute is currently defined for the M32R/D.</source>
          <target state="translated">現在、M32R/Dには1つの属性が定義されています。</target>
        </trans-unit>
        <trans-unit id="40fe184b70220276317c0b61fedbed3c3b9cb8e1" translate="yes" xml:space="preserve">
          <source>One attribute is currently defined for xstormy16 configurations: &lt;code&gt;below100&lt;/code&gt;.</source>
          <target state="translated">現在1つの属性がxstormy16構成に定義されています： &lt;code&gt;below100&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1dd2f15e1e49aa3a60aafa7cc37a3dcdf9c0a48d" translate="yes" xml:space="preserve">
          <source>One consequence is that you cannot call &lt;code&gt;mktemp&lt;/code&gt; with a string constant argument. The function &lt;code&gt;mktemp&lt;/code&gt; always alters the string its argument points to.</source>
          <target state="translated">1つの結果として、文字列定数引数を指定して &lt;code&gt;mktemp&lt;/code&gt; を呼び出すことはできません。関数 &lt;code&gt;mktemp&lt;/code&gt; は常に、その引数が指す文字列を変更します。</target>
        </trans-unit>
        <trans-unit id="44bd2c18671505607165541a387b3b6df0ee2e30" translate="yes" xml:space="preserve">
          <source>One drawback to using this attribute is that a pointer to a &lt;em&gt;variable&lt;/em&gt; marked as &lt;code&gt;dllimport&lt;/code&gt; cannot be used as a constant address. However, a pointer to a &lt;em&gt;function&lt;/em&gt; with the &lt;code&gt;dllimport&lt;/code&gt; attribute can be used as a constant initializer; in this case, the address of a stub function in the import lib is referenced. On Microsoft Windows targets, the attribute can be disabled for functions by setting the</source>
          <target state="translated">この属性を使用することの1つの欠点は、 &lt;code&gt;dllimport&lt;/code&gt; としてマークされた&lt;em&gt;変数&lt;/em&gt;へのポインターを定数アドレスとして使用できないことです。しかし、へのポインタ&lt;em&gt;機能&lt;/em&gt;付き &lt;code&gt;dllimport&lt;/code&gt; 属性は、一定の初期化子として使用することができます。この場合、インポートライブラリ内のスタブ関数のアドレスが参照されます。Microsoft Windowsターゲットでは、属性を設定することにより、機能に対して属性を無効にすることができます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="eec865ab9ca221fb872ddd30d1cd51ca9cd6aa48" translate="yes" xml:space="preserve">
          <source>One final built-in function has been added that returns the value of the 2-bit Transaction State field of the Machine Status Register (MSR) as stored in &lt;code&gt;CR0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CR0&lt;/code&gt; に格納されているマシンステータスレジスタ（MSR）の2ビットトランザクション状態フィールドの値を返す、最後の組み込み関数が1つ追加されました。</target>
        </trans-unit>
        <trans-unit id="c1bb56d3e41b8821842eef1d720c3d75aea46a37" translate="yes" xml:space="preserve">
          <source>One of the low eight SVE predicate registers (&lt;code&gt;P0&lt;/code&gt; to &lt;code&gt;P7&lt;/code&gt;)</source>
          <target state="translated">下位8つのSVE述語レジスタの1つ（ &lt;code&gt;P0&lt;/code&gt; から &lt;code&gt;P7&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="64b686b9cc394ce49f58ad2185501cf7ed15c7d0" translate="yes" xml:space="preserve">
          <source>One of the standard libraries bypassed by</source>
          <target state="translated">によってバイパスされる標準ライブラリの一つ</target>
        </trans-unit>
        <trans-unit id="02b57e3d25b1b84de7aa1ea5322739942677791f" translate="yes" xml:space="preserve">
          <source>One or more of the following option keywords can be used to describe a group of optimizations:</source>
          <target state="translated">以下のオプシ ョ ンキーワー ド の 1 つ以上を用いて、 最適化のグループを記述することができます。</target>
        </trans-unit>
        <trans-unit id="55a0fb6dad6e34221933361d3e31d20be49bd376" translate="yes" xml:space="preserve">
          <source>One or more qualifiers: &lt;code&gt;static&lt;/code&gt;, &lt;code&gt;dynamic&lt;/code&gt;, &lt;code&gt;bounded&lt;/code&gt;.</source>
          <target state="translated">1つ以上の修飾子： &lt;code&gt;static&lt;/code&gt; 、 &lt;code&gt;dynamic&lt;/code&gt; 、 &lt;code&gt;bounded&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="56bb919cccd4e254306e243c0906992cea6d6640" translate="yes" xml:space="preserve">
          <source>One such case is immediately following an &lt;code&gt;asm&lt;/code&gt; statement that either never terminates, or one that transfers control elsewhere and never returns. In this example, without the &lt;code&gt;__builtin_unreachable&lt;/code&gt;, GCC issues a warning that control reaches the end of a non-void function. It also generates code to return after the &lt;code&gt;asm&lt;/code&gt;.</source>
          <target state="translated">そのようなケースの1つは、終了することのない &lt;code&gt;asm&lt;/code&gt; ステートメントの直後、または他の場所に制御を移して決して戻らないものです。この例では、 &lt;code&gt;__builtin_unreachable&lt;/code&gt; がない場合、GCCはコントロールが非void関数の最後に到達するという警告を発行します。また、 &lt;code&gt;asm&lt;/code&gt; の後に戻るコードも生成します。</target>
        </trans-unit>
        <trans-unit id="cfb62f38764ce598607e81e73ef5564abcafbf10" translate="yes" xml:space="preserve">
          <source>One typical use case for this built-in is adjusting input and output values to non-contiguous port layouts. Some examples:</source>
          <target state="translated">このビルトインの典型的な使用例としては、連続していないポートレイアウトの入出力値を調整することが挙げられます。いくつかの例があります。</target>
        </trans-unit>
        <trans-unit id="cdc3d4316f37caecddf4da207a8a333a1f06f1e6" translate="yes" xml:space="preserve">
          <source>One way of using these constants is in initializing a static array that serves as a jump table:</source>
          <target state="translated">これらの定数を使用する方法の1つは、ジャンプテーブルとして機能する静的配列を初期化することです。</target>
        </trans-unit>
        <trans-unit id="4abf320685928f7114b2a671b0c8e5d78f023c66" translate="yes" xml:space="preserve">
          <source>One way to solve this problem is to compile your entire program with GCC. Another solution is to modify the function that is compiled with Sun CC to copy the argument into a local variable; local variables are always properly aligned. A third solution is to modify the function that uses the pointer to dereference it via the following function &lt;code&gt;access_double&lt;/code&gt; instead of directly with &amp;lsquo;</source>
          <target state="translated">この問題を解決する1つの方法は、プログラム全体をGCCでコンパイルすることです。別の解決策は、Sun CCでコンパイルされた関数を変更して、引数をローカル変数にコピーすることです。ローカル変数は常に適切に配置されます。3番目の解決策は、次の関数 &lt;code&gt;access_double&lt;/code&gt; を介して直接参照するのではなく、ポインターを使用して関数を逆参照する関数を変更することです。</target>
        </trans-unit>
        <trans-unit id="11c60f443d3a43430190f5782a8be8122d41c489" translate="yes" xml:space="preserve">
          <source>One workaround is to insert cache barrier instructions before every memory access that might be speculatively executed and that might have side effects even if aborted.</source>
          <target state="translated">回避策としては、推測的に実行される可能性があり、中止されても副作用が出る可能性があるメモリアクセスの前にキャッシュバリア命令を挿入するという方法があります。</target>
        </trans-unit>
        <trans-unit id="46fd9a138136ce012f77c2ad875a236ea7641073" translate="yes" xml:space="preserve">
          <source>One&amp;rsquo;s complement of a 6-bit unsigned integer constant.</source>
          <target state="translated">6ビットの符号なし整数定数の1の補数。</target>
        </trans-unit>
        <trans-unit id="09ff598dbd1dd52bba3a7ce58edc2ab65caf114c" translate="yes" xml:space="preserve">
          <source>One-bit boolean register</source>
          <target state="translated">1ビットのブールレジスタ</target>
        </trans-unit>
        <trans-unit id="b86152f3b7cb1fd57d0957c837b7a02e1c1edec1" translate="yes" xml:space="preserve">
          <source>Only available if either</source>
          <target state="translated">以下のいずれかの場合にのみ利用可能です。</target>
        </trans-unit>
        <trans-unit id="fa0e52cdfb683b064ba9081fec281277ab21b369" translate="yes" xml:space="preserve">
          <source>Only available with</source>
          <target state="translated">のみで利用可能です。</target>
        </trans-unit>
        <trans-unit id="d8174cb5b4a5090a1c9f6528e9032514840b01a2" translate="yes" xml:space="preserve">
          <source>Only change the lower 8 bits of the stack pointer.</source>
          <target state="translated">スタックポインタの下位8ビットのみを変更します。</target>
        </trans-unit>
        <trans-unit id="fa1093075a5bab803d61da780f973e8e456e21b9" translate="yes" xml:space="preserve">
          <source>Only enable inlining and cloning optimizations, which includes inlining, cloning, interprocedural scalar replacement of aggregates and partial inlining. As a result, when patching a function, all its callers and its clones&amp;rsquo; callers are impacted, therefore need to be patched as well.</source>
          <target state="translated">インライン化とクローン化の最適化のみを有効にします。これには、集計のインライン化、クローン化、手続き間スカラー置換、および部分的なインライン化が含まれます。その結果、関数にパッチを適用すると、そのすべての呼び出し元とそのクローンの呼び出し元が影響を受けるため、同様にパッチを適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="98cdd885ed933d2b0d71761a5e0e3218cffb4c2b" translate="yes" xml:space="preserve">
          <source>Only enable inlining of static functions. As a result, when patching a static function, all its callers are impacted and so need to be patched as well.</source>
          <target state="translated">静的関数のインライン化のみを有効にします。その結果、静的関数にパッチを当てると、その呼び出し元がすべて影響を受けるので、同様にパッチを当てる必要があります。</target>
        </trans-unit>
        <trans-unit id="a790c727dbde2c9153b76b5c8a491055c1c24680" translate="yes" xml:space="preserve">
          <source>Only generate absolute relocations on word-sized values (i.e. R_ARM_ABS32). This is enabled by default on targets (uClinux, SymbianOS) where the runtime loader imposes this restriction, and when</source>
          <target state="translated">ワードサイズの値 (すなわち R_ARM_ABS32)に対してのみ絶対再配置を生成します。これは、ランタイムローダがこの制限を課しているターゲット (uClinux,SymbianOS)ではデフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="69487605cf89b2b25fc2b6052bd8701c5c25ea67" translate="yes" xml:space="preserve">
          <source>Only meaningful in line-wrapping mode. Instructs the diagnostic messages reporter to emit source location information &lt;em&gt;once&lt;/em&gt;; that is, in case the message is too long to fit on a single physical line and has to be wrapped, the source location won&amp;rsquo;t be emitted (as prefix) again, over and over, in subsequent continuation lines. This is the default behavior.</source>
          <target state="translated">行折り返しモードでのみ意味があります。診断メッセージレポーターにソースの場所情報を&lt;em&gt;1回出力&lt;/em&gt;するように指示します。つまり、メッセージが長すぎて1つの物理行に収まらず、折り返す必要がある場合、後続の継続行でソースの場所が（接頭辞として）何度も繰り返し出力されることはありません。これがデフォルトの動作です。</target>
        </trans-unit>
        <trans-unit id="ebd505efc7bd99f753105955cdf89673e5640a71" translate="yes" xml:space="preserve">
          <source>Only meaningful in line-wrapping mode. Instructs the diagnostic messages reporter to emit the same source location information (as prefix) for physical lines that result from the process of breaking a message which is too long to fit on a single line.</source>
          <target state="translated">ラインラッピングモードでのみ意味を持ちます。診断メッセージレポーターに、長すぎて1行に収まりきらないメッセージを破棄する過程で発生する物理行に対して、同じソース位置情報を(プレフィックスとして)出力するよう指示します。</target>
        </trans-unit>
        <trans-unit id="330993f6286aa72148d14226b91455d3ac494a8c" translate="yes" xml:space="preserve">
          <source>Only one precompiled header can be used in a particular compilation.</source>
          <target state="translated">特定のコンパイルでは、プリコンパイルされたヘッダを1つだけ使用することができます。</target>
        </trans-unit>
        <trans-unit id="0c89e84df5b584e830b8d2d2e716a4ce60df935f" translate="yes" xml:space="preserve">
          <source>Only output information about source files with a relative pathname (after source prefix elision). Absolute paths are usually system header files and coverage of any inline functions therein is normally uninteresting.</source>
          <target state="translated">相対パス名(ソース接頭辞エリシオンの後)のソースファイルに関する情報のみを出力します。絶対パスは通常システムヘッダファイルであり、その中にあるインライン関数のカバレッジは通常興味をそそるものではありません。</target>
        </trans-unit>
        <trans-unit id="72274ff34b747c56a57940685e3ffdf10da20513" translate="yes" xml:space="preserve">
          <source>Only print info for hot objects/functions.</source>
          <target state="translated">ホットオブジェクト/関数の情報のみを表示します。</target>
        </trans-unit>
        <trans-unit id="8b24ee9bfdf40f46680f47de16c5081b87003895" translate="yes" xml:space="preserve">
          <source>Only use the first 32 general-purpose registers.</source>
          <target state="translated">最初の32個の汎用レジスタのみを使用します。</target>
        </trans-unit>
        <trans-unit id="338aae9daa260c2c83f7e418040b21c679f46883" translate="yes" xml:space="preserve">
          <source>Only use these options when there are significant benefits from doing so. When you specify these options, the assembler and linker create larger object and executable files and are also slower. These options affect code generation. They prevent optimizations by the compiler and assembler using relative locations inside a translation unit since the locations are unknown until link time. An example of such an optimization is relaxing calls to short call instructions.</source>
          <target state="translated">これらのオプションは、大きなメリットがある場合にのみ使用してください。これらのオプションを指定すると、アセンブラとリンカはより大きなオブジェクトファイルと実行ファイルを作成し、動作も遅くなります。これらのオプションはコード生成に影響を与えます。これらのオプションを指定すると、リンクするまで位置が不明なため、コンパイラとアセンブラが翻訳ユニット内の相対位置を使用して最適化を行うことができなくなります。このような最適化の例としては、短い呼び出し命令の呼び出しを緩和することが挙げられます。</target>
        </trans-unit>
        <trans-unit id="7b26ac27e9054975e1b8c28c749dd8e60046db26" translate="yes" xml:space="preserve">
          <source>Only valid if the &amp;lsquo;</source>
          <target state="translated">'</target>
        </trans-unit>
        <trans-unit id="a24c971c70af3e6d67c9922de68be68fd14aa925" translate="yes" xml:space="preserve">
          <source>Only valid with</source>
          <target state="translated">でのみ有効</target>
        </trans-unit>
        <trans-unit id="4f3ef120810b89335683d19761269a1b29d439b1" translate="yes" xml:space="preserve">
          <source>OpenRISC&amp;mdash;</source>
          <target state="translated">OpenRISC&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="ff04060b9cdf50d21da510eb2aee82a293b79942" translate="yes" xml:space="preserve">
          <source>Operand</source>
          <target state="translated">Operand</target>
        </trans-unit>
        <trans-unit id="96c8142487d93ded6eed966e1c94866edb7f6ce0" translate="yes" xml:space="preserve">
          <source>Operands are separated by commas. Each operand has this format:</source>
          <target state="translated">オペランドはカンマで区切られています。各オペランドには、このような形式があります。</target>
        </trans-unit>
        <trans-unit id="67c4124aaeb7fa5b37a4c13183fee8472dbd34a2" translate="yes" xml:space="preserve">
          <source>Operands that satisfy &amp;rsquo;m&amp;rsquo; when -mpcrel is in effect</source>
          <target state="translated">-mpcrelが有効なときに「m」を満たすオペランド</target>
        </trans-unit>
        <trans-unit id="f223672699f4c0fd304046c8f55c3a8a822eafba" translate="yes" xml:space="preserve">
          <source>Operands that satisfy &amp;rsquo;s&amp;rsquo; when -mpcrel is not in effect</source>
          <target state="translated">-mpcrelが有効でない場合に「s」を満たすオペランド</target>
        </trans-unit>
        <trans-unit id="a6a1e6ee77f32bbfca88fdb0ed00cdafe059d583" translate="yes" xml:space="preserve">
          <source>Operands using the &amp;lsquo;</source>
          <target state="translated">'を使用するオペランド</target>
        </trans-unit>
        <trans-unit id="dd2427f9810f7d01de4920a5fbaf944c75db0f9b" translate="yes" xml:space="preserve">
          <source>Optimization Options</source>
          <target state="translated">最適化オプション</target>
        </trans-unit>
        <trans-unit id="cab9c4fb94627ad4002c4f07a4e254f1d83181e5" translate="yes" xml:space="preserve">
          <source>Optimize debugging experience.</source>
          <target state="translated">デバッグ経験を最適化します。</target>
        </trans-unit>
        <trans-unit id="f6711b309c1e96e21f6e3fd3f0f4cca8b00ad887" translate="yes" xml:space="preserve">
          <source>Optimize even more. GCC performs nearly all supported optimizations that do not involve a space-speed tradeoff. As compared to</source>
          <target state="translated">さらに最適化します。GCCは、スペース・スピードのトレードオフを伴わない、サポートされているほぼすべての最適化を実行します。と比較すると、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="115cffa4f350df63881ca8bb33b21ff035557045" translate="yes" xml:space="preserve">
          <source>Optimize for &lt;var&gt;arch&lt;/var&gt;. Among other things, this option controls the way instructions are scheduled, and the perceived cost of arithmetic operations. The list of &lt;var&gt;arch&lt;/var&gt; values is the same as for</source>
          <target state="translated">&lt;var&gt;arch&lt;/var&gt; 用に最適化します。特に、このオプションは、命令のスケジュール方法と、算術演算の知覚コストを制御します。 &lt;var&gt;arch&lt;/var&gt; 値のリストはと同じです</target>
        </trans-unit>
        <trans-unit id="00bcbcf49330fd5cd07800c1cc402ad50059a9a8" translate="yes" xml:space="preserve">
          <source>Optimize for size.</source>
          <target state="translated">サイズを最適化します。</target>
        </trans-unit>
        <trans-unit id="b1f0ff5d58183a1211bf6345ec617611e6079a6c" translate="yes" xml:space="preserve">
          <source>Optimize sibling and tail recursive calls.</source>
          <target state="translated">兄弟と尾部の再帰呼び出しを最適化します。</target>
        </trans-unit>
        <trans-unit id="82acb86d67d8f7c979237a3f9d5995187b58bb34" translate="yes" xml:space="preserve">
          <source>Optimize the output for the given processor, specified by microarchitecture name. Permissible values for this option are: &amp;lsquo;</source>
          <target state="translated">マイクロアーキテクチャー名で指定された特定のプロセッサーの出力を最適化します。このオプションの許容値は次のとおりです： '</target>
        </trans-unit>
        <trans-unit id="beede52c02c3ccdc57d067263b0592c5c5870f64" translate="yes" xml:space="preserve">
          <source>Optimize the prologue of variadic argument functions with respect to usage of those arguments.</source>
          <target state="translated">可変引数関数のプロローグを、それらの引数の使用法に関して最適化します。</target>
        </trans-unit>
        <trans-unit id="8091cf8a7f45d51dd71bbe1a181b77efee3b92fa" translate="yes" xml:space="preserve">
          <source>Optimize various standard C string functions (e.g. &lt;code&gt;strlen&lt;/code&gt;, &lt;code&gt;strchr&lt;/code&gt; or &lt;code&gt;strcpy&lt;/code&gt;) and their &lt;code&gt;_FORTIFY_SOURCE&lt;/code&gt; counterparts into faster alternatives.</source>
          <target state="translated">さまざまな標準C文字列関数（たとえば、 &lt;code&gt;strlen&lt;/code&gt; 、 &lt;code&gt;strchr&lt;/code&gt; または &lt;code&gt;strcpy&lt;/code&gt; ）とそれらの &lt;code&gt;_FORTIFY_SOURCE&lt;/code&gt; の対応物をより高速な代替物に最適化します。</target>
        </trans-unit>
        <trans-unit id="313c197a1bf79c8cb464f9108769008bb606d983" translate="yes" xml:space="preserve">
          <source>Optimize yet more.</source>
          <target state="translated">さらに最適化する。</target>
        </trans-unit>
        <trans-unit id="913d9fd2399cdf6e86c3e975d0cc5dad07465ec2" translate="yes" xml:space="preserve">
          <source>Optimize. Optimizing compilation takes somewhat more time, and a lot more memory for a large function.</source>
          <target state="translated">最適化します。コンパイルの最適化には多少時間がかかりますし、大きな関数の場合はメモリも多くなります。</target>
        </trans-unit>
        <trans-unit id="e31d972229de381b461860014dd710856361917a" translate="yes" xml:space="preserve">
          <source>Option</source>
          <target state="translated">Option</target>
        </trans-unit>
        <trans-unit id="2c7ca22e5600046b144f3d24624f25c564332dee" translate="yes" xml:space="preserve">
          <source>Option Index</source>
          <target state="translated">オプションインデックス</target>
        </trans-unit>
        <trans-unit id="c12455d26a0da53c0d68029c9bf0819232e1f305" translate="yes" xml:space="preserve">
          <source>Options in &lt;var&gt;file&lt;/var&gt; are separated by whitespace. A whitespace character may be included in an option by surrounding the entire option in either single or double quotes. Any character (including a backslash) may be included by prefixing the character to be included with a backslash. The &lt;var&gt;file&lt;/var&gt; may itself contain additional @&lt;var&gt;file&lt;/var&gt; options; any such options will be processed recursively.</source>
          <target state="translated">&lt;var&gt;file&lt;/var&gt; オプションは空白で区切られています。オプション全体を一重引用符または二重引用符で囲むことにより、空白文字をオプションに含めることができます。含まれる文字の前にバックスラッシュを付けることにより、任意の文字（バックスラッシュを含む）を含めることができます。 &lt;var&gt;file&lt;/var&gt; 、追加の@自体含まれていてもよい &lt;var&gt;file&lt;/var&gt; オプションを、そのようなオプションは再帰的に処理されます。</target>
        </trans-unit>
        <trans-unit id="4660151a0ebf47062b565d717689e53cf9ce9103" translate="yes" xml:space="preserve">
          <source>Options of the form</source>
          <target state="translated">フォームのオプション</target>
        </trans-unit>
        <trans-unit id="23bd069950c6d99802ae19186b5b3c8a35033589" translate="yes" xml:space="preserve">
          <source>Original Intel i386 CPU.</source>
          <target state="translated">オリジナルのIntel i386 CPU。</target>
        </trans-unit>
        <trans-unit id="1a9a54bb04ec8317f6fd027b56dada4bf5eca84f" translate="yes" xml:space="preserve">
          <source>Os</source>
          <target state="translated">Os</target>
        </trans-unit>
        <trans-unit id="18bee9973a249c2e29e697cfeb7c675bf6ae3fa7" translate="yes" xml:space="preserve">
          <source>Other Alpha compilers provide the equivalent options called</source>
          <target state="translated">他のAlphaコンパイラは</target>
        </trans-unit>
        <trans-unit id="cd2bf473aa5d5250266aacf77c308456d1faabee" translate="yes" xml:space="preserve">
          <source>Other C compilers won&amp;rsquo;t accept these alternative keywords; if you want to compile with another compiler, you can define the alternate keywords as macros to replace them with the customary keywords. It looks like this:</source>
          <target state="translated">他のCコンパイラはこれらの代替キーワードを受け入れません。別のコンパイラーでコンパイルする場合は、代替キーワードをマクロとして定義して、通常のキーワードで置き換えることができます。次のようになります。</target>
        </trans-unit>
        <trans-unit id="0ffe248f8b25bb61e4c3f0c71863b1ea1b623bad" translate="yes" xml:space="preserve">
          <source>Other C++ compilers may not correctly implement the standard behavior. As a result, when you switch to &lt;code&gt;g++&lt;/code&gt; from one of these compilers, you may discover that a program that appeared to work correctly in fact does not conform to the standard: &lt;code&gt;g++&lt;/code&gt; reports as undefined symbols any static data members that lack definitions.</source>
          <target state="translated">他のC ++コンパイラは、標準の動作を正しく実装しない場合があります。その結果、これらのコンパイラの1つから &lt;code&gt;g++&lt;/code&gt; 切り替えると、実際には正しく機能しているように見えるプログラムが標準に準拠していないことがわかる場合があります &lt;code&gt;g++&lt;/code&gt; は未定義のシンボルとして、定義のない静的データメンバーを報告します。</target>
        </trans-unit>
        <trans-unit id="f7754320d0468c70e98bda0da0fe360c850f2c18" translate="yes" xml:space="preserve">
          <source>Other VR4120 errata require a NOP to be inserted between certain pairs of instructions. These errata are handled by the assembler, not by GCC itself.</source>
          <target state="translated">その他の VR4120 のエラッタでは、特定の命令ペアの間に NOP を挿入する必要があります。これらのエラッタは GCC 自体ではなくアセンブラで処理されます。</target>
        </trans-unit>
        <trans-unit id="8c84374a07e7982abd1eda236f79d01355c7610a" translate="yes" xml:space="preserve">
          <source>Other attributes are defined for functions (see &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt;), labels (see &lt;a href=&quot;label-attributes#Label-Attributes&quot;&gt;Label Attributes&lt;/a&gt;), enumerators (see &lt;a href=&quot;enumerator-attributes#Enumerator-Attributes&quot;&gt;Enumerator Attributes&lt;/a&gt;), statements (see &lt;a href=&quot;statement-attributes#Statement-Attributes&quot;&gt;Statement Attributes&lt;/a&gt;), and for variables (see &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;Variable Attributes&lt;/a&gt;).</source>
          <target state="translated">その他の属性は、関数（&lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;関数属性を&lt;/a&gt;参照）、ラベル（&lt;a href=&quot;label-attributes#Label-Attributes&quot;&gt;ラベル属性を&lt;/a&gt;参照）、列挙子（列挙子&lt;a href=&quot;enumerator-attributes#Enumerator-Attributes&quot;&gt;属性を&lt;/a&gt;参照）、ステートメント（&lt;a href=&quot;statement-attributes#Statement-Attributes&quot;&gt;ステートメント属性を&lt;/a&gt;参照）、および変数（&lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;変数属性を&lt;/a&gt;参照）に対して定義されます。</target>
        </trans-unit>
        <trans-unit id="c2a10075dec0d365de937669196a9657d9df8590" translate="yes" xml:space="preserve">
          <source>Other built-in functions.</source>
          <target state="translated">その他の機能を内蔵しています。</target>
        </trans-unit>
        <trans-unit id="71f741ac380c3a470196d38432e10beb772eddbf" translate="yes" xml:space="preserve">
          <source>Other integer types, such as &lt;code&gt;long int&lt;/code&gt;, and enumerated types are permitted even in strictly conforming mode.</source>
          <target state="translated">&lt;code&gt;long int&lt;/code&gt; などのその他の整数型と列挙型は、厳密に準拠するモードでも許可されます。</target>
        </trans-unit>
        <trans-unit id="9b6d809c6085c6515fee8105cda39c6f0c8299d6" translate="yes" xml:space="preserve">
          <source>Other letters can be defined in machine-dependent fashion to stand for particular classes of registers or other arbitrary operand types. &amp;lsquo;</source>
          <target state="translated">他の文字は、特定のクラスのレジスタまたは他の任意のオペランドタイプを表すために、マシン依存の方法で定義できます。」</target>
        </trans-unit>
        <trans-unit id="31e826484120507f81d7b01e00ba111ce50563d4" translate="yes" xml:space="preserve">
          <source>Other letters in the range &amp;lsquo;</source>
          <target state="translated">範囲内の他の文字 '</target>
        </trans-unit>
        <trans-unit id="79d2df03f3d88bfc6b34208de56c0d8f69fae24c" translate="yes" xml:space="preserve">
          <source>Other options are passed on to one or more stages of processing. Some options control the preprocessor and others the compiler itself. Yet other options control the assembler and linker; most of these are not documented here, since you rarely need to use any of them.</source>
          <target state="translated">他のオプションは、処理の1つ以上の段階に渡されます。いくつかのオプションはプリプロセッサを制御し、他のオプションはコンパイラ自体を制御します。また、アセンブラやリンカを制御するオプションもあります。</target>
        </trans-unit>
        <trans-unit id="58690e93570c04719b58436037bbfe7e9e889794" translate="yes" xml:space="preserve">
          <source>Other options such as</source>
          <target state="translated">などの他のオプションもあります。</target>
        </trans-unit>
        <trans-unit id="b54d8cbfcf04d8c6ef55524abdd897e953dd52de" translate="yes" xml:space="preserve">
          <source>Other prefixes specified with</source>
          <target state="translated">で指定された他の接頭辞</target>
        </trans-unit>
        <trans-unit id="12651a5c2964110c993acc911324809845963ccd" translate="yes" xml:space="preserve">
          <source>Otherwise, &lt;code&gt;false&lt;/code&gt; is returned and memory is affected according to &lt;var&gt;failure_memorder&lt;/var&gt;. This memory order cannot be &lt;code&gt;__ATOMIC_RELEASE&lt;/code&gt; nor &lt;code&gt;__ATOMIC_ACQ_REL&lt;/code&gt;. It also cannot be a stronger order than that specified by &lt;var&gt;success_memorder&lt;/var&gt;.</source>
          <target state="translated">それ以外の場合は、 &lt;code&gt;false&lt;/code&gt; 返され、メモリはに応じて影響され &lt;var&gt;failure_memorder&lt;/var&gt; 。このメモリ順序は、 &lt;code&gt;__ATOMIC_RELEASE&lt;/code&gt; または &lt;code&gt;__ATOMIC_ACQ_REL&lt;/code&gt; にすることはできません。また、 &lt;var&gt;success_memorder&lt;/var&gt; で指定されたものよりも強い順序にすることはできません。</target>
        </trans-unit>
        <trans-unit id="0163f25dca25dd9eb232ac96989846b2be8a2890" translate="yes" xml:space="preserve">
          <source>Otherwise, an attribute specifier appears as part of a declaration, counting declarations of unnamed parameters and type names, and relates to that declaration (which may be nested in another declaration, for example in the case of a parameter declaration), or to a particular declarator within a declaration. Where an attribute specifier is applied to a parameter declared as a function or an array, it should apply to the function or array rather than the pointer to which the parameter is implicitly converted, but this is not yet correctly implemented.</source>
          <target state="translated">そうでなければ、属性指定子は宣言の一部として現れ、名前のないパラメータや型名の宣言をカウントし、その宣言(例えばパラメータ宣言の場合は別の宣言に入れ子になっているかもしれません)や、宣言内の特定の宣言子に関連しています。属性指定子が関数や配列として宣言されたパラメータに適用される場合、パラメータが暗黙的に変換されるポインタではなく、関数や配列に適用されるべきですが、これはまだ正しく実装されていません。</target>
        </trans-unit>
        <trans-unit id="9c5c46d604645721e578d5c70ebb88f027aaf128" translate="yes" xml:space="preserve">
          <source>Output &amp;lsquo;</source>
          <target state="translated">出力 '</target>
        </trans-unit>
        <trans-unit id="647dcf3ef174bc80ea2e9689a611bd97a6a704cd" translate="yes" xml:space="preserve">
          <source>Output assembly instructions using selected &lt;var&gt;dialect&lt;/var&gt;. Also affects which dialect is used for basic &lt;code&gt;asm&lt;/code&gt; (see &lt;a href=&quot;basic-asm#Basic-Asm&quot;&gt;Basic Asm&lt;/a&gt;) and extended &lt;code&gt;asm&lt;/code&gt; (see &lt;a href=&quot;extended-asm#Extended-Asm&quot;&gt;Extended Asm&lt;/a&gt;). Supported choices (in dialect order) are &amp;lsquo;</source>
          <target state="translated">選択した &lt;var&gt;dialect&lt;/var&gt; を使用して、アセンブリの指示を出力します。また、基本 &lt;code&gt;asm&lt;/code&gt; （&lt;a href=&quot;basic-asm#Basic-Asm&quot;&gt;基本Asmを&lt;/a&gt;参照）および拡張 &lt;code&gt;asm&lt;/code&gt; （&lt;a href=&quot;extended-asm#Extended-Asm&quot;&gt;拡張Asmを&lt;/a&gt;参照）に使用される方言にも影響します。サポートされている選択肢（方言順）は '</target>
        </trans-unit>
        <trans-unit id="f8b5c88cee0a083c4b1b7974adc28656d2681e85" translate="yes" xml:space="preserve">
          <source>Output code for G-format floating-point numbers instead of D-format.</source>
          <target state="translated">D形式の代わりにG形式の浮動小数点数を出力するコード。</target>
        </trans-unit>
        <trans-unit id="e560ad077bfca12ce7d694879e9c015007ae41a0" translate="yes" xml:space="preserve">
          <source>Output constraints must begin with either &amp;lsquo;</source>
          <target state="translated">出力制約は 'で始まる必要があります</target>
        </trans-unit>
        <trans-unit id="180883c60047df12608a1941cecf8662e8d97968" translate="yes" xml:space="preserve">
          <source>Output gcov file in an easy-to-parse JSON intermediate format which does not require source code for generation. The JSON file is compressed with gzip compression algorithm and the files have</source>
          <target state="translated">生成にソースコードを必要としない、パースしやすいJSON中間形式のgcovファイルを出力します。JSONファイルはgzip圧縮アルゴリズムで圧縮され、ファイルには</target>
        </trans-unit>
        <trans-unit id="9b6fcda59898207a429e1ef091692b9398444b1f" translate="yes" xml:space="preserve">
          <source>Output operand expressions must be lvalues. The compiler cannot check whether the operands have data types that are reasonable for the instruction being executed. For output expressions that are not directly addressable (for example a bit-field), the constraint must allow a register. In that case, GCC uses the register as the output of the &lt;code&gt;asm&lt;/code&gt;, and then stores that register into the output.</source>
          <target state="translated">出力オペランド式は左辺値でなければなりません。コンパイラーは、オペランドが、実行中の命令にとって妥当なデータ型であるかどうかを確認できません。直接アドレス指定できない出力式（ビットフィールドなど）の場合、制約でレジスタを許可する必要があります。その場合、GCCはレジスタを &lt;code&gt;asm&lt;/code&gt; の出力として使用し、そのレジスタを出力に格納します。</target>
        </trans-unit>
        <trans-unit id="316859616622aa738df7e68ec92a5bb090fb360c" translate="yes" xml:space="preserve">
          <source>Output operands may not be &amp;ldquo;inserted&amp;rdquo; between existing stack registers. Since no 387 opcode uses a read/write operand, all output operands are dead before the &lt;code&gt;asm&lt;/code&gt;, and are pushed by the &lt;code&gt;asm&lt;/code&gt;. It makes no sense to push anywhere but the top of the reg-stack.</source>
          <target state="translated">出力オペランドは、既存のスタックレジスタの間に「挿入」できません。387オペコードは読み取り/書き込みオペランドを使用しないため、すべての出力オペランドは &lt;code&gt;asm&lt;/code&gt; の前に無効になり、 &lt;code&gt;asm&lt;/code&gt; によってプッシュされます。reg-stackのトップ以外にプッシュするのは意味がありません。</target>
        </trans-unit>
        <trans-unit id="43f24935d9221797dfcb78b34d6cf08d867d6284" translate="yes" xml:space="preserve">
          <source>Output operands must specifically indicate which register an output appears in after an &lt;code&gt;asm&lt;/code&gt;. &amp;lsquo;</source>
          <target state="translated">出力オペランドは、出力が &lt;code&gt;asm&lt;/code&gt; の後に現れるレジスタを具体的に示す必要があります。」</target>
        </trans-unit>
        <trans-unit id="faed737fa40fe25af4473d1b6bcfd0d0b292b68b" translate="yes" xml:space="preserve">
          <source>Output operands must start at the top of the reg-stack: output operands may not &amp;ldquo;skip&amp;rdquo; a register.</source>
          <target state="translated">出力オペランドは、reg-stackの先頭から開始する必要があります。出力オペランドはレジスタを「スキップ」できません。</target>
        </trans-unit>
        <trans-unit id="a8b51102b411c12b6e0f93eb391fa91ba24693de" translate="yes" xml:space="preserve">
          <source>Output summaries for each function in addition to the file level summary.</source>
          <target state="translated">ファイルレベルのサマリーに加えて、各関数のサマリーを出力します。</target>
        </trans-unit>
        <trans-unit id="2f6f31ff885b55e9edb44a9bbaf83bcf540cfa80" translate="yes" xml:space="preserve">
          <source>Output the accumulated assembler options specified by</source>
          <target state="translated">で指定された累積アセンブラオプションを出力します。</target>
        </trans-unit>
        <trans-unit id="bca339912e193031f5941578cba2e8013cdc4fbe" translate="yes" xml:space="preserve">
          <source>Output the accumulated linker options specified by</source>
          <target state="translated">で指定された累積リンカオプションを出力します。</target>
        </trans-unit>
        <trans-unit id="abd07145d91464d8949250e737d08ee71cd3be75" translate="yes" xml:space="preserve">
          <source>Output the accumulated preprocessor options specified by</source>
          <target state="translated">で指定された累積プリプロセッサオプションを出力します。</target>
        </trans-unit>
        <trans-unit id="b0560621f7532768e8148f5f9549c378f9566ea1" translate="yes" xml:space="preserve">
          <source>Output to standard output instead of output files.</source>
          <target state="translated">出力ファイルではなく、標準出力に出力します。</target>
        </trans-unit>
        <trans-unit id="0ec497bb07e2cf136e8af2890004bae91d0a14be" translate="yes" xml:space="preserve">
          <source>Output to the given filename prototyped declarations for all functions declared and/or defined in a translation unit, including those in header files. This option is silently ignored in any language other than C.</source>
          <target state="translated">ヘッダファイルの中のものも含めて、翻訳ユニットで宣言された、または定義されたすべての関数のプロトタイピング宣言を、指定されたファイル名に出力します。このオプションは、C言語以外の言語では無視されます。</target>
        </trans-unit>
        <trans-unit id="62fca7a249d9dca7d004d8f4915abc2b5e965646" translate="yes" xml:space="preserve">
          <source>Outputs &amp;lsquo;</source>
          <target state="translated">出力 '</target>
        </trans-unit>
        <trans-unit id="13d5c086d06fc973e45c927d40c8e059a1643032" translate="yes" xml:space="preserve">
          <source>Outputs a number that is unique to each instance of the &lt;code&gt;asm&lt;/code&gt; statement in the entire compilation. This option is useful when creating local labels and referring to them multiple times in a single template that generates multiple assembler instructions.</source>
          <target state="translated">コンパイル全体で &lt;code&gt;asm&lt;/code&gt; ステートメントの各インスタンスに固有の数値を出力します。このオプションは、ローカルラベルを作成して、複数のアセンブラー命令を生成する単一のテンプレートで複数回参照する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="b7054dde1d20d86e88a5b1e9f1914cd2a35614b4" translate="yes" xml:space="preserve">
          <source>Outputs a single &amp;lsquo;</source>
          <target state="translated">シングル 'を出力します</target>
        </trans-unit>
        <trans-unit id="0dee1166c5edc6ac11a34fc79bdb2cb27916d9db" translate="yes" xml:space="preserve">
          <source>Outside strict ISO C mode (</source>
          <target state="translated">厳密なISO Cモード以外で(</target>
        </trans-unit>
        <trans-unit id="dd7bd1ab4e4204054540331b82bdd3051fd1f8f8" translate="yes" xml:space="preserve">
          <source>Overall Options</source>
          <target state="translated">全体的なオプション</target>
        </trans-unit>
        <trans-unit id="b4cd9a287c6914a99205f05078ac2e480bd2c7a2" translate="yes" xml:space="preserve">
          <source>Override the defaults for &lt;code&gt;bool&lt;/code&gt; so that &lt;code&gt;sizeof(bool)==1&lt;/code&gt;. By default &lt;code&gt;sizeof(bool)&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt; when compiling for Darwin/PowerPC and &lt;code&gt;1&lt;/code&gt; when compiling for Darwin/x86, so this option has no effect on x86.</source>
          <target state="translated">&lt;code&gt;sizeof(bool)==1&lt;/code&gt; になるように &lt;code&gt;bool&lt;/code&gt; のデフォルトを上書きします。デフォルトでは、Darwin / PowerPC用にコンパイルする場合、 &lt;code&gt;sizeof(bool)&lt;/code&gt; は &lt;code&gt;4&lt;/code&gt; であり、Darwin / x86用にコンパイルする場合は &lt;code&gt;1&lt;/code&gt; なので、このオプションはx86には影響しません。</target>
        </trans-unit>
        <trans-unit id="a199208b37cd1f5b9a0a8191fd588411de91c2f1" translate="yes" xml:space="preserve">
          <source>Override the internal decision heuristic for the particular algorithm to use for inlining string operations. The allowed values for &lt;var&gt;alg&lt;/var&gt; are:</source>
          <target state="translated">文字列操作のインライン化に使用する特定のアルゴリズムの内部決定ヒューリスティックをオーバーライドします。 &lt;var&gt;alg&lt;/var&gt; の許容値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="725dd7b59f06dae5a8f87fd7ac1c6ed71f821187" translate="yes" xml:space="preserve">
          <source>Override the internal decision heuristic to decide if &lt;code&gt;__builtin_memcpy&lt;/code&gt; should be inlined and what inline algorithm to use when the expected size of the copy operation is known. &lt;var&gt;strategy&lt;/var&gt; is a comma-separated list of &lt;var&gt;alg&lt;/var&gt;:&lt;var&gt;max_size&lt;/var&gt;:&lt;var&gt;dest_align&lt;/var&gt; triplets. &lt;var&gt;alg&lt;/var&gt; is specified in</source>
          <target state="translated">内部決定ヒューリスティックをオーバーライドして、 &lt;code&gt;__builtin_memcpy&lt;/code&gt; をインライン化する必要があるかどうか、およびコピー操作の予想サイズがわかっている場合に使用するインラインアルゴリズムを決定します。 &lt;var&gt;strategy&lt;/var&gt; は、 &lt;var&gt;alg&lt;/var&gt; ： &lt;var&gt;max_size&lt;/var&gt; ： &lt;var&gt;dest_align&lt;/var&gt; トリプレットのコンマ区切りリストです。 &lt;var&gt;alg&lt;/var&gt; は</target>
        </trans-unit>
        <trans-unit id="9b46c3db03a238d3f5a14ace1b604afe4e45f0cd" translate="yes" xml:space="preserve">
          <source>Override the underlying type for &lt;code&gt;wchar_t&lt;/code&gt; to be &lt;code&gt;short
unsigned int&lt;/code&gt; instead of the default for the target. This option is useful for building programs to run under WINE.</source>
          <target state="translated">以下のための基本となるタイプをオーバーライド &lt;code&gt;wchar_t&lt;/code&gt; 型があることを &lt;code&gt;short unsigned int&lt;/code&gt; の代わりに、ターゲットのデフォルト。このオプションは、WINEで実行するプログラムを構築するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="48df9e72f6c8bb00c7da9fa106f8a794bf0ae66b" translate="yes" xml:space="preserve">
          <source>Override tuning decisions made by the back-end in response to a</source>
          <target state="translated">バックエンドが</target>
        </trans-unit>
        <trans-unit id="e7b14d3050ddec57bd832691acdae4f4799a4d96" translate="yes" xml:space="preserve">
          <source>Overrides the command-line option &lt;code&gt;-memregs=&lt;/code&gt; for the current file. Use with care! This pragma must be before any function in the file, and mixing different memregs values in different objects may make them incompatible. This pragma is useful when a performance-critical function uses a memreg for temporary values, as it may allow you to reduce the number of memregs used.</source>
          <target state="translated">現在のファイルのコマンドラインオプション &lt;code&gt;-memregs=&lt;/code&gt; を上書きします。注意して使用してください！このプラグマはファイル内の関数の前になければならず、異なるオブジェクトに異なるmemregs値を混在させると、それらに互換性がなくなる可能性があります。このプラグマは、パフォーマンスが重要な関数が一時値にmemregを使用する場合に役立ちます。これにより、使用されるmemregの数を減らすことができる場合があります。</target>
        </trans-unit>
        <trans-unit id="55a8f7943bb312b706050a92052877ddd19cd1fc" translate="yes" xml:space="preserve">
          <source>Overrides the command-line option &lt;code&gt;-mio-volatile&lt;/code&gt; for the current file. Note that for compatibility with future GCC releases, this option should only be used once before any &lt;code&gt;io&lt;/code&gt; variables in each file.</source>
          <target state="translated">現在のファイルのコマンドラインオプション &lt;code&gt;-mio-volatile&lt;/code&gt; を上書きします。将来のGCCリリースとの互換性のために、このオプションは各ファイルの &lt;code&gt;io&lt;/code&gt; 変数の前に一度だけ使用する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="511993d3c99719e38a6779073019dacd7178ddb9" translate="yes" xml:space="preserve">
          <source>P</source>
          <target state="translated">P</target>
        </trans-unit>
        <trans-unit id="80fce3cd5d10f70e9287dc65ad351b4cf54cdde0" translate="yes" xml:space="preserve">
          <source>P register</source>
          <target state="translated">ピーレジスタ</target>
        </trans-unit>
        <trans-unit id="a1fd3d9945606c835489fdf8c9492b256385656d" translate="yes" xml:space="preserve">
          <source>P+</source>
          <target state="translated">P+</target>
        </trans-unit>
        <trans-unit id="76803f0adcbaf98d2e1e19d699c318fa770240a3" translate="yes" xml:space="preserve">
          <source>P-</source>
          <target state="translated">P-</target>
        </trans-unit>
        <trans-unit id="2b16716bc26fa1b19f59589aec2ebef33f5db5d7" translate="yes" xml:space="preserve">
          <source>PCC allows typedef names to be used as function parameters.</source>
          <target state="translated">PCCではtypedef名を関数のパラメータとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="c246c3028d26fbb81d1a1f15dafa0622e6684f4e" translate="yes" xml:space="preserve">
          <source>PCC allows whitespace in the middle of compound assignment operators such as &amp;lsquo;</source>
          <target state="translated">PCCは、 'などの複合代入演算子の途中に空白を許可します</target>
        </trans-unit>
        <trans-unit id="0a6e19866b6bb2535a3f2c2dd0776aefd4accf5d" translate="yes" xml:space="preserve">
          <source>PCLMUL instructions.</source>
          <target state="translated">PCLMULの指示。</target>
        </trans-unit>
        <trans-unit id="6f863e0fedbf92ef4aea9ea322ccc2a547325ef5" translate="yes" xml:space="preserve">
          <source>PDP-11&amp;mdash;</source>
          <target state="translated">PDP-11&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="8c50d8866e4321b0ad859637afa10d6ead05148c" translate="yes" xml:space="preserve">
          <source>POPCNT instruction.</source>
          <target state="translated">POPCNT命令。</target>
        </trans-unit>
        <trans-unit id="e2d341dab357c92fea1cc61d3e72cb6281d41c97" translate="yes" xml:space="preserve">
          <source>PTRDIFF_MAX</source>
          <target state="translated">PTRDIFF_MAX</target>
        </trans-unit>
        <trans-unit id="7ec74130044a66b80c889b01a82126dc008750ff" translate="yes" xml:space="preserve">
          <source>Pack VLIW instructions.</source>
          <target state="translated">パックVLIWの説明書。</target>
        </trans-unit>
        <trans-unit id="dd44725ed2025ff2e1a97e1f2348c9d1ca8f2c1f" translate="yes" xml:space="preserve">
          <source>Pad with NOPs any dispatch group that has vacant issue slots, according to the scheduler&amp;rsquo;s grouping.</source>
          <target state="translated">スケジューラのグループ化に従って、空の発行スロットを持つディスパッチグループをNOPでパディングします。</target>
        </trans-unit>
        <trans-unit id="2372cf312ccb9c8b03aea17e3c79e0a1982f2394" translate="yes" xml:space="preserve">
          <source>Pair lower lower (&lt;code&gt;pll.ps&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;pll.ps&lt;/code&gt; （pll.ps）。</target>
        </trans-unit>
        <trans-unit id="f740b666193926024898bc0d930212a406bee8c8" translate="yes" xml:space="preserve">
          <source>Pair lower upper (&lt;code&gt;plu.ps&lt;/code&gt;).</source>
          <target state="translated">ペアのロワーアッパー（ &lt;code&gt;plu.ps&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9eedbb6f660ceda1616660d44dce629298a3b655" translate="yes" xml:space="preserve">
          <source>Pair upper lower (&lt;code&gt;pul.ps&lt;/code&gt;).</source>
          <target state="translated">ペアの上部と下部（ &lt;code&gt;pul.ps&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5e0770dcfd7cae26e45306dd9f097f8dbb0edbc8" translate="yes" xml:space="preserve">
          <source>Pair upper upper (&lt;code&gt;puu.ps&lt;/code&gt;).</source>
          <target state="translated">ペアアッパーアッパー（ &lt;code&gt;puu.ps&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ac1dfe5c81f3c8f3e57c17faae475d9260a62249" translate="yes" xml:space="preserve">
          <source>Parallelize loops, i.e., split their iteration space to run in n threads. This is only possible for loops whose iterations are independent and can be arbitrarily reordered. The optimization is only profitable on multiprocessor machines, for loops that are CPU-intensive, rather than constrained e.g. by memory bandwidth. This option implies</source>
          <target state="translated">ループを並列化します。つまり、ループの反復空間を分割して n 個のスレッドで実行します。これは、ループの反復が独立しており、任意の順序で並び替えが可能な場合にのみ可能です。この最適化が有効なのは、マルチプロセッサマシンで、メモリ帯域幅などの制約を受けるよりも、CPU負荷の高いループに対してのみです。このオプションは、次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="00310a3d64efc1d0ab28741454559ddf52284d4c" translate="yes" xml:space="preserve">
          <source>Parameters of this option are analogous to the</source>
          <target state="translated">このオプションのパラメータは</target>
        </trans-unit>
        <trans-unit id="ed89c3a81f547cc64d254621a2e80d0b09920687" translate="yes" xml:space="preserve">
          <source>Partial Store Order</source>
          <target state="translated">一部店舗のご注文</target>
        </trans-unit>
        <trans-unit id="26760520407ec598057e0350ad5e24f9ca068704" translate="yes" xml:space="preserve">
          <source>Pass &lt;var&gt;option&lt;/var&gt; as an option to the assembler. If &lt;var&gt;option&lt;/var&gt; contains commas, it is split into multiple options at the commas.</source>
          <target state="translated">&lt;var&gt;option&lt;/var&gt; としてアセンブラに渡します。 &lt;var&gt;option&lt;/var&gt; にカンマが含まれている場合、カンマで複数のオプションに分割されます。</target>
        </trans-unit>
        <trans-unit id="2d87e9abac2f57600cdd7d5c2efaf0f6e66f628c" translate="yes" xml:space="preserve">
          <source>Pass &lt;var&gt;option&lt;/var&gt; as an option to the assembler. You can use this to supply system-specific assembler options that GCC does not recognize.</source>
          <target state="translated">&lt;var&gt;option&lt;/var&gt; としてアセンブラに渡します。これを使用して、GCCが認識しないシステム固有のアセンブラオプションを提供できます。</target>
        </trans-unit>
        <trans-unit id="ea3ae9b22cd6a0097fe66cc5d0b0c7c77b1e7361" translate="yes" xml:space="preserve">
          <source>Pass &lt;var&gt;option&lt;/var&gt; as an option to the linker. If &lt;var&gt;option&lt;/var&gt; contains commas, it is split into multiple options at the commas. You can use this syntax to pass an argument to the option. For example,</source>
          <target state="translated">&lt;var&gt;option&lt;/var&gt; としてリンカーに渡します。 &lt;var&gt;option&lt;/var&gt; にカンマが含まれている場合、カンマで複数のオプションに分割されます。この構文を使用して、オプションに引数を渡すことができます。例えば、</target>
        </trans-unit>
        <trans-unit id="3b76a14ce88deda8b639a199af148cdc191f52bb" translate="yes" xml:space="preserve">
          <source>Pass &lt;var&gt;option&lt;/var&gt; as an option to the linker. You can use this to supply system-specific linker options that GCC does not recognize.</source>
          <target state="translated">&lt;var&gt;option&lt;/var&gt; としてリンカーに渡します。これを使用して、GCCが認識しないシステム固有のリンカーオプションを提供できます。</target>
        </trans-unit>
        <trans-unit id="2d7525a4e6f37e298e13e376428f81521ebcf0ad" translate="yes" xml:space="preserve">
          <source>Pass &lt;var&gt;option&lt;/var&gt; as an option to the preprocessor. You can use this to supply system-specific preprocessor options that GCC does not recognize.</source>
          <target state="translated">&lt;var&gt;option&lt;/var&gt; としてプリプロセッサに渡します。これを使用して、GCCが認識しないシステム固有のプリプロセッサオプションを提供できます。</target>
        </trans-unit>
        <trans-unit id="3d4c02ac25f95e4b321bd7c365e291db31eb2591" translate="yes" xml:space="preserve">
          <source>Pass on (or do not pass on) the</source>
          <target state="translated">を伝えていく(伝えない)。</target>
        </trans-unit>
        <trans-unit id="ebcca6f4e1a3875b263182927c19bae27d56304e" translate="yes" xml:space="preserve">
          <source>Pass the flag</source>
          <target state="translated">旗を渡す</target>
        </trans-unit>
        <trans-unit id="edb98a025d28cabbd69e003e051e7e9e248d058f" translate="yes" xml:space="preserve">
          <source>Passed down to the assembler to enable dual- and single-operand instructions for telephony. Also sets the preprocessor symbol &lt;code&gt;__Xtelephony&lt;/code&gt;. This option is deprecated.</source>
          <target state="translated">テレフォニー用のデュアルおよびシングルオペランド命令を有効にするためにアセンブラーに渡されます。また、プリプロセッサシンボル &lt;code&gt;__Xtelephony&lt;/code&gt; を設定します。このオプションは廃止されました。</target>
        </trans-unit>
        <trans-unit id="f90bde4ab81702f82c3a14c8f169a594acac87bc" translate="yes" xml:space="preserve">
          <source>Passed down to the assembler to enable the 64-bit time-stamp counter extension instruction. Also sets the preprocessor symbol &lt;code&gt;__Xrtsc&lt;/code&gt;. This option is deprecated.</source>
          <target state="translated">アセンブラーに渡され、64ビットのタイムスタンプカウンター拡張命令を有効にします。また、プリプロセッサシンボル &lt;code&gt;__Xrtsc&lt;/code&gt; を設定します。このオプションは廃止されました。</target>
        </trans-unit>
        <trans-unit id="4f8b46d31a4a12bcb7d5a9b4c4bc5f82313d8a46" translate="yes" xml:space="preserve">
          <source>Passed down to the assembler to enable the DSP Pack A extensions. Also sets the preprocessor symbol &lt;code&gt;__Xdsp_packa&lt;/code&gt;. This option is deprecated.</source>
          <target state="translated">DSP Pack A拡張を有効にするためにアセンブラーに渡されます。また、プリプロセッサシンボル &lt;code&gt;__Xdsp_packa&lt;/code&gt; を設定します。このオプションは廃止されました。</target>
        </trans-unit>
        <trans-unit id="437ce81938361281bc7bdc1ba1109fae98afde5d" translate="yes" xml:space="preserve">
          <source>Passed down to the assembler to enable the XY memory extension. Also sets the preprocessor symbol &lt;code&gt;__Xxy&lt;/code&gt;.</source>
          <target state="translated">XYメモリ拡張を有効にするためにアセンブラに渡されます。また、プリプロセッサシンボル &lt;code&gt;__Xxy&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="192f1963f648220379d598033602fa765954e9e1" translate="yes" xml:space="preserve">
          <source>Passed down to the assembler to enable the dual Viterbi butterfly extension. Also sets the preprocessor symbol &lt;code&gt;__Xdvbf&lt;/code&gt;. This option is deprecated.</source>
          <target state="translated">デュアルViterbiバタフライ拡張を有効にするためにアセンブラーに渡されます。また、プリプロセッサシンボル &lt;code&gt;__Xdvbf&lt;/code&gt; を設定します。このオプションは廃止されました。</target>
        </trans-unit>
        <trans-unit id="e120edac277c94aa8119101f86b7c6a0712b9fcc" translate="yes" xml:space="preserve">
          <source>Passed down to the assembler to enable the locked load/store conditional extension. Also sets the preprocessor symbol &lt;code&gt;__Xlock&lt;/code&gt;.</source>
          <target state="translated">ロックされたロード/ストア条件付き拡張を有効にするためにアセンブラに渡されます。また、プリプロセッサシンボル &lt;code&gt;__Xlock&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="2ba98472aa75cacca4b08108732162c8ba249643" translate="yes" xml:space="preserve">
          <source>Passed down to the assembler to enable the swap byte ordering extension instruction. Also sets the preprocessor symbol &lt;code&gt;__Xswape&lt;/code&gt;.</source>
          <target state="translated">アセンブラーに渡されて、バイトの順序付けをスワップする拡張命令を有効にします。また、プリプロセッサシンボル &lt;code&gt;__Xswape&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="6ad82551672605333a9c6ede433a1e6a6d571936" translate="yes" xml:space="preserve">
          <source>Passed down to the assembler. Also sets the preprocessor symbol &lt;code&gt;__Xxmac_24&lt;/code&gt;. This option is deprecated.</source>
          <target state="translated">アセンブラに受け渡されます。また、プリプロセッサシンボル &lt;code&gt;__Xxmac_24&lt;/code&gt; を設定します。このオプションは廃止されました。</target>
        </trans-unit>
        <trans-unit id="b5b5c4c5c6dc85e300e5d3da99c217798b87ef15" translate="yes" xml:space="preserve">
          <source>Passed down to the assembler. Also sets the preprocessor symbol &lt;code&gt;__Xxmac_d16&lt;/code&gt;. This option is deprecated.</source>
          <target state="translated">アセンブラに受け渡されます。また、プリプロセッサシンボル &lt;code&gt;__Xxmac_d16&lt;/code&gt; を設定します。このオプションは廃止されました。</target>
        </trans-unit>
        <trans-unit id="8e378b2ec7874c891a1160d052f02fb0e9162569" translate="yes" xml:space="preserve">
          <source>Passed through to the linker, to specify use of the &lt;code&gt;arclinux&lt;/code&gt; emulation. This option is enabled by default in tool chains built for &lt;code&gt;arc-linux-uclibc&lt;/code&gt; and &lt;code&gt;arceb-linux-uclibc&lt;/code&gt; targets when profiling is not requested.</source>
          <target state="translated">リンカーに渡され、 &lt;code&gt;arclinux&lt;/code&gt; エミュレーションの使用を指定します。このオプションは、プロファイリングが要求されていないときに、 &lt;code&gt;arc-linux-uclibc&lt;/code&gt; および &lt;code&gt;arceb-linux-uclibc&lt;/code&gt; ターゲット用にビルドされたツールチェーンでデフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="a028490f082637af1740d556712c0ce06eb5a830" translate="yes" xml:space="preserve">
          <source>Passed through to the linker, to specify use of the &lt;code&gt;arclinux_prof&lt;/code&gt; emulation. This option is enabled by default in tool chains built for &lt;code&gt;arc-linux-uclibc&lt;/code&gt; and &lt;code&gt;arceb-linux-uclibc&lt;/code&gt; targets when profiling is requested.</source>
          <target state="translated">リンカーに渡され、 &lt;code&gt;arclinux_prof&lt;/code&gt; エミュレーションの使用を指定します。このオプションは、プロファイリングが要求されたときに、 &lt;code&gt;arc-linux-uclibc&lt;/code&gt; および &lt;code&gt;arceb-linux-uclibc&lt;/code&gt; ターゲット用にビルドされたツールチェーンでデフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="fd42d8d9c3b5bd99cdf57029443caa7831c5b611" translate="yes" xml:space="preserve">
          <source>Passes that use the dataflow information are enabled independently at different optimization levels.</source>
          <target state="translated">データフロー情報を使用するパスは、異なる最適化レベルで独立して有効になります。</target>
        </trans-unit>
        <trans-unit id="df4603bbe9d05798f6607572b723fee8e9240d5c" translate="yes" xml:space="preserve">
          <source>Passing</source>
          <target state="translated">Passing</target>
        </trans-unit>
        <trans-unit id="ca1bab93bc155d4bc9f92ddda956825855fee474" translate="yes" xml:space="preserve">
          <source>Passing options to the assembler.</source>
          <target state="translated">アセンブラにオプションを渡す</target>
        </trans-unit>
        <trans-unit id="a82f31d7c90d96412082c64503f9dcd5d50cd894" translate="yes" xml:space="preserve">
          <source>Passing parameters to or from Basic &lt;code&gt;asm&lt;/code&gt;</source>
          <target state="translated">Basic &lt;code&gt;asm&lt;/code&gt; との間のパラメーターの受け渡し</target>
        </trans-unit>
        <trans-unit id="a7301fd43d902ef4b0d5fbb8c15e6456832236d7" translate="yes" xml:space="preserve">
          <source>Passing parameters to or from Extended &lt;code&gt;asm&lt;/code&gt; without using input or output operands.</source>
          <target state="translated">入力または出力オペランドを使用せずにExtended &lt;code&gt;asm&lt;/code&gt; との間でパラメーターを渡す。</target>
        </trans-unit>
        <trans-unit id="f36b9a29c6322b4f073965f6981e3c605c717562" translate="yes" xml:space="preserve">
          <source>Passing parameters to or from routines written in assembler (or other languages) using non-standard calling conventions.</source>
          <target state="translated">非標準の呼び出し規則を使用して、アセンブラ(または他の言語)で書かれたルーチンとの間でパラメータを渡します。</target>
        </trans-unit>
        <trans-unit id="2b8053a12982c8b5e19f801216dbc51afcd39aab" translate="yes" xml:space="preserve">
          <source>Pay special attention to code like this:</source>
          <target state="translated">このようなコードには特に注意してください。</target>
        </trans-unit>
        <trans-unit id="ce53b63c4327f47412072347ed7949c1656ab556" translate="yes" xml:space="preserve">
          <source>Peels loops for which there is enough information that they do not roll much (from profile feedback or static analysis). It also turns on complete loop peeling (i.e. complete removal of loops with small constant number of iterations).</source>
          <target state="translated">(プロファイルフィードバックや静的解析からの)あまりロールしない十分な情報があるループのピーリングを行います。また、完全なループの剥離(すなわち、小さな定数の反復回数でループを完全に除去すること)を有効にします。</target>
        </trans-unit>
        <trans-unit id="10555cda3fcf7df8cd08616e7d5db51df194941b" translate="yes" xml:space="preserve">
          <source>People who have contributed to GCC.</source>
          <target state="translated">GCCに貢献した人たち</target>
        </trans-unit>
        <trans-unit id="f13a48860e36bb0177b534cc2a15b3b114032ea9" translate="yes" xml:space="preserve">
          <source>Per-thread variables.</source>
          <target state="translated">スレッドごとの変数。</target>
        </trans-unit>
        <trans-unit id="73545218d23922d3a876b5c815bc65525793f423" translate="yes" xml:space="preserve">
          <source>Percentage penalty functions containing a single call to another function will receive when they are evaluated for cloning.</source>
          <target state="translated">別の関数への単一の呼び出しを含む関数がクローニングのために評価されたときに受けるペナルティの割合。</target>
        </trans-unit>
        <trans-unit id="dcfc68277a1e2c4d9091b21b46740ae70e4d5a9c" translate="yes" xml:space="preserve">
          <source>Percentage penalty the recursive functions will receive when they are evaluated for cloning.</source>
          <target state="translated">再帰関数がクローニングのために評価されたときに受けるペナルティの割合。</target>
        </trans-unit>
        <trans-unit id="b1bfacd8c51fd20af1a996d2b1c9005f74a8a0d2" translate="yes" xml:space="preserve">
          <source>Perform Identical Code Folding for functions and read-only variables. The optimization reduces code size and may disturb unwind stacks by replacing a function by equivalent one with a different name. The optimization works more effectively with link-time optimization enabled.</source>
          <target state="translated">関数と読み取り専用変数に対して、同一のコード折りたたみを実行します。この最適化はコードサイズを縮小し、関数を異なる名前の等価なものに置き換えることでスタックの巻き戻しを妨げる可能性があります。この最適化は、リンクタイム最適化を有効にすると、より効果的に動作します。</target>
        </trans-unit>
        <trans-unit id="a6a8c1431d58909bfaffe9050c8733ea996d20bc" translate="yes" xml:space="preserve">
          <source>Perform Value Range Propagation on trees. This is similar to the constant propagation pass, but instead of values, ranges of values are propagated. This allows the optimizers to remove unnecessary range checks like array bound checks and null pointer checks. This is enabled by default at</source>
          <target state="translated">ツリー上で値の範囲伝播を実行します。これは定数伝搬パスと似ていますが、値の代わりに値の範囲が伝搬されます。これにより、オプティマイザは配列結合チェックやヌルポインタチェックのような不要な範囲チェックを取り除くことができます。これはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="f11a18844b7820edfc7cfe8256d4e394a5329f58" translate="yes" xml:space="preserve">
          <source>Perform a 128-bit IEEE floating point add using round to odd as the rounding mode.</source>
          <target state="translated">丸め込みモードとして奇数への丸め込みを使用して128ビットのIEEE浮動小数点加算を実行します。</target>
        </trans-unit>
        <trans-unit id="ad630415b45adc0f11ff88c9ad397123e4ccfb1f" translate="yes" xml:space="preserve">
          <source>Perform a 128-bit IEEE floating point divide using round to odd as the rounding mode.</source>
          <target state="translated">丸めモードとして奇数への丸めを使用して128ビットのIEEE浮動小数点除算を実行します。</target>
        </trans-unit>
        <trans-unit id="21b7a42855f16a63bf420afa4550fc9d4fc080ac" translate="yes" xml:space="preserve">
          <source>Perform a 128-bit IEEE floating point fused multiply and add operation using round to odd as the rounding mode.</source>
          <target state="translated">丸め込みモードとして奇数への丸め込みを使用した128ビットのIEEE浮動小数点フュージョン乗算・加算演算を実行します。</target>
        </trans-unit>
        <trans-unit id="37ed36e9d63104743cea777f5e55fc078dfd943b" translate="yes" xml:space="preserve">
          <source>Perform a 128-bit IEEE floating point multiply using round to odd as the rounding mode.</source>
          <target state="translated">丸めモードとして奇数への丸めを使用して128ビットのIEEE浮動小数点乗算を実行します。</target>
        </trans-unit>
        <trans-unit id="737a589634f68c1da9ecbd09594b87b83ec0aa7c" translate="yes" xml:space="preserve">
          <source>Perform a 128-bit IEEE floating point square root using round to odd as the rounding mode.</source>
          <target state="translated">丸めモードとして奇数への丸めを使用して128ビットのIEEE浮動小数点平方根を実行します。</target>
        </trans-unit>
        <trans-unit id="ead0f18b8a1f24823972492647bc71a9e31e2c4a" translate="yes" xml:space="preserve">
          <source>Perform a 128-bit IEEE floating point subtract using round to odd as the rounding mode.</source>
          <target state="translated">丸めモードとして奇数への丸めを使用して128ビットのIEEE浮動小数点減算を実行します。</target>
        </trans-unit>
        <trans-unit id="68de9811e50d3937c1ad606957f9ce3a651afee7" translate="yes" xml:space="preserve">
          <source>Perform a forward propagation pass on RTL. The pass tries to combine two instructions and checks if the result can be simplified. If loop unrolling is active, two passes are performed and the second is scheduled after loop unrolling.</source>
          <target state="translated">RTLで前方伝播パスを実行します。パスは2つの命令を組み合わせようとし、結果が単純化できるかどうかをチェックします。ループアンローリングがアクティブな場合、2つのパスが実行され、2つ目はループアンローリングの後にスケジュールされます。</target>
        </trans-unit>
        <trans-unit id="6dba988e88741e74ba501068678e1ab16f88bb77" translate="yes" xml:space="preserve">
          <source>Perform a global common subexpression elimination pass. This pass also performs global constant and copy propagation.</source>
          <target state="translated">グローバル共通副表現除去パスを実行します。このパスは、グローバル定数とコピーの伝播も行います。</target>
        </trans-unit>
        <trans-unit id="d64787311f720e83d55ee7c16d5127e619d4c2d5" translate="yes" xml:space="preserve">
          <source>Perform a number of minor optimizations that are relatively expensive.</source>
          <target state="translated">比較的高価なマイナーな最適化をいくつか実行します。</target>
        </trans-unit>
        <trans-unit id="e4ef7411a4a596cce036263deed71704a6a4403d" translate="yes" xml:space="preserve">
          <source>Perform a variety of simple scalar cleanups (constant/copy propagation, redundancy elimination, range propagation and expression simplification) based on a dominator tree traversal. This also performs jump threading (to reduce jumps to jumps). This flag is enabled by default at</source>
          <target state="translated">ドミナターツリートラバーサルに基づいて、様々な単純なスカラークリーンアップ(定数/コピー伝搬、冗長性の排除、範囲伝搬、式の単純化)を実行します。また、ジャンプスレッディングも実行します(ジャンプからジャンプへのジャンプを減らすため)。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="c690704255c1ecf4d6857e6000f1190b108f7ea6" translate="yes" xml:space="preserve">
          <source>Perform basic block vectorization on trees. This flag is enabled by default at</source>
          <target state="translated">ツリー上で基本的なブロックベクトル化を行います。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="eeac5885ee87ab9527e79d1e7e4c5d0a5ab9cfee" translate="yes" xml:space="preserve">
          <source>Perform branch target register load optimization after prologue / epilogue threading.</source>
          <target state="translated">プロローグ/エピローグ・スレッディング後に分岐ターゲット・レジスタ・ロードの最適化を実行します。</target>
        </trans-unit>
        <trans-unit id="f22ee925531c470bf10c56d8ec49b3ad79443d58" translate="yes" xml:space="preserve">
          <source>Perform branch target register load optimization before prologue / epilogue threading. The use of target registers can typically be exposed only during reload, thus hoisting loads out of loops and doing inter-block scheduling needs a separate optimization pass.</source>
          <target state="translated">プロローグ/エピローグ・スレッディングの前に、分岐ターゲット・レジスタの負荷最適化を実行します。ターゲットレジスタの使用は通常、リロード時にのみ公開されるため、ループから負荷を引き上げたり、ブロック間スケジューリングを行ったりするには、別の最適化パスが必要になります。</target>
        </trans-unit>
        <trans-unit id="78ecf7dff1475297797e70aa8e37b17a7fe0ba23" translate="yes" xml:space="preserve">
          <source>Perform code hoisting. Code hoisting tries to move the evaluation of expressions executed on all paths to the function exit as early as possible. This is especially useful as a code size optimization, but it often helps for code speed as well. This flag is enabled by default at</source>
          <target state="translated">コードホイストを実行します。コードホイストは、すべてのパスで実行される式の評価を、できるだけ早く関数の出口に移動させようとします。これはコードサイズの最適化として特に有用ですが、コードの高速化にも役立つことが多いです。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="d42beff05151efc426a83c25d60382c077faa4d8" translate="yes" xml:space="preserve">
          <source>Perform conditional dead code elimination (DCE) for calls to built-in functions that may set &lt;code&gt;errno&lt;/code&gt; but are otherwise free of side effects. This flag is enabled by default at</source>
          <target state="translated">&lt;code&gt;errno&lt;/code&gt; を設定する可能性がある組み込み関数の呼び出しに対して条件付きデッドコード除去（DCE）を実行しますが、それ以外の場合は副作用はありません。このフラグはデフォルトで有効になっています</target>
        </trans-unit>
        <trans-unit id="3acf0b56088845895309ffb7ff3f62580c187452" translate="yes" xml:space="preserve">
          <source>Perform conversion of simple initializations in a switch to initializations from a scalar array. This flag is enabled by default at</source>
          <target state="translated">スイッチ内の単純な初期化をスカラ配列からの初期化に変換します。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="76903ec0550edaa382bc63ed2ba99b071ffdb752" translate="yes" xml:space="preserve">
          <source>Perform copy propagation on trees. This pass eliminates unnecessary copy operations. This flag is enabled by default at</source>
          <target state="translated">ツリー上でコピープロパゲーションを実行します。このパスは不要なコピー操作を排除します。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="6d7ec7c39be13500a07e954c10fb63594d459307" translate="yes" xml:space="preserve">
          <source>Perform cross-jumping transformation. This transformation unifies equivalent code and saves code size. The resulting code may or may not perform better than without cross-jumping.</source>
          <target state="translated">クロスジャンプ変換を実行します。この変換は、等価なコードを統一し、コードサイズを節約します。結果として得られるコードは、クロスジャンプを行わない場合と比較してパフォーマンスが向上するかもしれませんし、そうでない場合もあります。</target>
        </trans-unit>
        <trans-unit id="f21edf0cd1996b67db995a9d0465125524c66c2d" translate="yes" xml:space="preserve">
          <source>Perform dead code elimination (DCE) on RTL. Enabled by default at</source>
          <target state="translated">RTLでデッドコード除去(DCE)を実行します。デフォルトでは</target>
        </trans-unit>
        <trans-unit id="3dbd69c046baefc1f0428ff45ebf37c050ee9b35" translate="yes" xml:space="preserve">
          <source>Perform dead code elimination (DCE) on trees. This flag is enabled by default at</source>
          <target state="translated">ツリー上でデッドコード除去(DCE)を実行します。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="1fac6b62e0201c67a765b9639bb451910616441d" translate="yes" xml:space="preserve">
          <source>Perform dead store elimination (DSE) on RTL. Enabled by default at</source>
          <target state="translated">RTLでデッドストア消去(DSE)を実行します。デフォルトでは</target>
        </trans-unit>
        <trans-unit id="9c91758280f32089239ead4d20b5ec849be15a87" translate="yes" xml:space="preserve">
          <source>Perform dead store elimination (DSE) on trees. A dead store is a store into a memory location that is later overwritten by another store without any intervening loads. In this case the earlier store can be deleted. This flag is enabled by default at</source>
          <target state="translated">ツリー上でデッドストア消去(DSE)を実行します。デッドストアとは、メモリロケーションへのストアで、ロードを介在させることなく別のストアに上書きされるものです。この場合、以前のストアを削除することができます。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="753e71f3a5ff6388d6a57662208a4d8d6dc2cf2a" translate="yes" xml:space="preserve">
          <source>Perform final value replacement. If a variable is modified in a loop in such a way that its value when exiting the loop can be determined using only its initial value and the number of loop iterations, replace uses of the final value by such a computation, provided it is sufficiently cheap. This reduces data dependencies and may allow further simplifications. Enabled by default at</source>
          <target state="translated">最終値の置換を行います。ループを抜けるときの値が初期値とループの反復回数だけで決まるような方法で変数がループ内で変更された場合、十分に安価であれば、最終値の使用をそのような計算で置き換えます。これにより、データの依存性が軽減され、さらなる簡素化が可能になるかもしれません。デフォルトでは</target>
        </trans-unit>
        <trans-unit id="70b6a364a52abbfd9ee8ac29b5164966fafd5f6e" translate="yes" xml:space="preserve">
          <source>Perform forward propagation on trees. This flag is enabled by default at</source>
          <target state="translated">ツリーの順方向伝播を実行します。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="673d903cfc5f5e6d5fb3bb1eee0f4c9f6c48077e" translate="yes" xml:space="preserve">
          <source>Perform forward store motion on trees. This flag is enabled by default at</source>
          <target state="translated">ツリーでフォワードストアモーションを実行します。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="d36329f87f0281004169238a916fdfdf7420040e" translate="yes" xml:space="preserve">
          <source>Perform full redundancy elimination (FRE) on trees. The difference between FRE and PRE is that FRE only considers expressions that are computed on all paths leading to the redundant computation. This analysis is faster than PRE, though it exposes fewer redundancies. This flag is enabled by default at</source>
          <target state="translated">ツリーで完全冗長性除去(FRE)を実行します。FREとPREの違いは、FREは冗長計算につながるすべてのパスで計算された式のみを考慮することです。この解析はPREよりも高速ですが、冗長性が少なくなります。このフラグは、デフォルトでは</target>
        </trans-unit>
        <trans-unit id="3f354c46e4dde1d877eb683cb0a6100f2cbc4bca" translate="yes" xml:space="preserve">
          <source>Perform function cloning to make interprocedural constant propagation stronger. When enabled, interprocedural constant propagation performs function cloning when externally visible function can be called with constant arguments. Because this optimization can create multiple copies of functions, it may significantly increase code size (see</source>
          <target state="translated">関数クローニングを実行して、手順間定数伝搬をより強力にします。有効にすると、外部から見える関数を定数引数で呼び出すことができる場合に、手続き間定数伝播は関数のクローニングを実行します。この最適化は、関数の複数のコピーを作成することができるため、コードサイズが大幅に増加する可能性があります (</target>
        </trans-unit>
        <trans-unit id="154c76319b0c62d9b2e90e2513183f271e8cf0cd" translate="yes" xml:space="preserve">
          <source>Perform function-local points-to analysis on trees. This flag is enabled by default at</source>
          <target state="translated">ツリー上で関数ローカル点間解析を実行します。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="56af57ea7e8c24ebc43912154747d0770817c691" translate="yes" xml:space="preserve">
          <source>Perform hoisting of loads from conditional pointers on trees. This pass is enabled by default at</source>
          <target state="translated">ツリー上の条件付きポインタからのロードの巻き上げを実行します。このパスはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="4ab70db777954340ed7abb290ec401d3cad6d79c" translate="yes" xml:space="preserve">
          <source>Perform induction variable optimizations (strength reduction, induction variable merging and induction variable elimination) on trees.</source>
          <target state="translated">誘導変数最適化(強度削減、誘導変数マージ、誘導変数消去)をツリー上で実行します。</target>
        </trans-unit>
        <trans-unit id="1073eeaaee6148009c2caccc4b4d6c7d341bbb2f" translate="yes" xml:space="preserve">
          <source>Perform interprocedural constant propagation. This optimization analyzes the program to determine when values passed to functions are constants and then optimizes accordingly. This optimization can substantially increase performance if the application has constants passed to functions. This flag is enabled by default at</source>
          <target state="translated">手順間の定数伝播を実行します。この最適化は、関数に渡された値が定数であるかどうかを判断するためにプログラムを分析し、それに応じて最適化します。この最適化は、アプリケーションが関数に定数を渡している場合、パフォーマンスを大幅に向上させることができます。このフラグは、デフォルトでは</target>
        </trans-unit>
        <trans-unit id="20c997fc23010523f8221d0a92c5b9e6c4050935" translate="yes" xml:space="preserve">
          <source>Perform interprocedural pointer analysis and interprocedural modification and reference analysis. This option can cause excessive memory and compile-time usage on large compilation units. It is not enabled by default at any optimization level.</source>
          <target state="translated">プロシージャ間ポインタ解析、プロシージャ間修正・参照解析を実行します。このオプションを使用すると、大規模なコンパイル単位でメモリやコンパイル時の使用量が過剰になることがあります。このオプションは、どの最適化レベルでもデフォルトでは有効になっていません。</target>
        </trans-unit>
        <trans-unit id="4921214a12f7612e4410a372e1807efabe260fc7" translate="yes" xml:space="preserve">
          <source>Perform interprocedural profile propagation. The functions called only from cold functions are marked as cold. Also functions executed once (such as &lt;code&gt;cold&lt;/code&gt;, &lt;code&gt;noreturn&lt;/code&gt;, static constructors or destructors) are identified. Cold functions and loop less parts of functions executed once are then optimized for size. Enabled by default at</source>
          <target state="translated">手続き間のプロファイル伝達を実行します。コールド関数からのみ呼び出される関数は、コールドとしてマークされます。また、一度実行された関数（ &lt;code&gt;cold&lt;/code&gt; 、 &lt;code&gt;noreturn&lt;/code&gt; 、静的コンストラクター、またはデストラクターなど）も識別されます。コールド関数と、一度実行された関数のループの少ない部分は、サイズが最適化されます。デフォルトで有効</target>
        </trans-unit>
        <trans-unit id="fb68f0d0ee8b6c41ae81d56a47219400b71ee1b8" translate="yes" xml:space="preserve">
          <source>Perform interprocedural scalar replacement of aggregates, removal of unused parameters and replacement of parameters passed by reference by parameters passed by value.</source>
          <target state="translated">アグリゲートのスカラ置換、未使用パラメータの除去、参照で渡されたパラメータの値で渡されたパラメータの置換を実行します。</target>
        </trans-unit>
        <trans-unit id="f5a5996d13689478fbbcfefaf187644cb0bd68f3" translate="yes" xml:space="preserve">
          <source>Perform loop distribution of patterns that can be code generated with calls to a library. This flag is enabled by default at</source>
          <target state="translated">ライブラリへの呼び出しで生成されたコードに対応するパターンのループ配信を実行します。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="b51b13ca91f32e55112e18c7be23871252a6a72b" translate="yes" xml:space="preserve">
          <source>Perform loop distribution. This flag can improve cache performance on big loop bodies and allow further loop optimizations, like parallelization or vectorization, to take place. For example, the loop</source>
          <target state="translated">ループ分配を実行します。このフラグは、大きなループボディでのキャッシュ性能を向上させ、並列化やベクトル化などの更なるループ最適化を可能にします。例えば、ループ</target>
        </trans-unit>
        <trans-unit id="00772bc8e86a7b4ab6c55ba37b514b8f5f461b5a" translate="yes" xml:space="preserve">
          <source>Perform loop header copying on trees. This is beneficial since it increases effectiveness of code motion optimizations. It also saves one jump. This flag is enabled by default at</source>
          <target state="translated">ツリー上でループヘッダのコピーを実行します。これはコードの動きの最適化の効果を高めるので有益です。また、1回のジャンプを節約できます。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="6482eb095ab0106534173067ba63a63b4e772180" translate="yes" xml:space="preserve">
          <source>Perform loop interchange outside of graphite. This flag can improve cache performance on loop nest and allow further loop optimizations, like vectorization, to take place. For example, the loop</source>
          <target state="translated">グラファイトの外でループ交換を実行します。このフラグは、ループネストでのキャッシュ性能を向上させ、ベクトル化のような更なるループ最適化を行うことができます。例えば、ループ</target>
        </trans-unit>
        <trans-unit id="babeb9c2acdfb002d90adf1ca5e9065ac71e5cf8" translate="yes" xml:space="preserve">
          <source>Perform loop invariant motion on trees. This pass moves only invariants that are hard to handle at RTL level (function calls, operations that expand to nontrivial sequences of insns). With</source>
          <target state="translated">ツリー上でループ不変運動を実行します。このパスでは、RTLレベルでは処理が難しい不変量(関数呼び出し、insnsの非自明なシーケンスに展開する操作)のみを移動します。このパスを使用して</target>
        </trans-unit>
        <trans-unit id="3759039cae2d11146e7c0dfe601eacde292dd1d1" translate="yes" xml:space="preserve">
          <source>Perform loop nest optimizations. Same as</source>
          <target state="translated">ループネストの最適化を実行します。と同じ</target>
        </trans-unit>
        <trans-unit id="6a64dbc5caecc19bd9b50ef676cc69a1b212fa95" translate="yes" xml:space="preserve">
          <source>Perform loop optimizations on trees. This flag is enabled by default at</source>
          <target state="translated">ツリー上でループ最適化を実行します。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="121a475df0390f719f03e11127e3dd161d431728" translate="yes" xml:space="preserve">
          <source>Perform loop vectorization on trees. This flag is enabled by default at</source>
          <target state="translated">ツリー上でループベクトル化を実行します。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="f7516a23fd7e60004d67be66a314a10a37b3fdbd" translate="yes" xml:space="preserve">
          <source>Perform merging of narrow stores to consecutive memory addresses. This pass merges contiguous stores of immediate values narrower than a word into fewer wider stores to reduce the number of instructions. This is enabled by default at</source>
          <target state="translated">連続するメモリアドレスへの狭いストアのマージを実行します。このパスでは、ワードよりも狭い即時値の連続したストアを、より少ない幅の広いストアにマージして命令数を減らします。これはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="1807eb51aa29cd70afd6f6f94c9e10f8d8e2a87a" translate="yes" xml:space="preserve">
          <source>Perform more aggressive SMS-based modulo scheduling with register moves allowed. By setting this flag certain anti-dependences edges are deleted, which triggers the generation of reg-moves based on the life-range analysis. This option is effective only with</source>
          <target state="translated">レジスタムーブを許可して、よりアグレッシブなSMSベースのモジュロスケジューリングを実行します。このフラグを設定することで、特定の反依存性エッジが削除され、ライフレンジ解析に基づいたレジスタムーブが生成されます。このオプションは</target>
        </trans-unit>
        <trans-unit id="ebc09c6b12bc75f0257526fb06df9feb9bf5a73f" translate="yes" xml:space="preserve">
          <source>Perform optimizations that check to see if a jump branches to a location where another comparison subsumed by the first is found. If so, the first branch is redirected to either the destination of the second branch or a point immediately following it, depending on whether the condition is known to be true or false.</source>
          <target state="translated">1 番目の比較で括られた別の比較が見つかった場所にジャンプが分岐するかどうかをチェックする最適化を実行します。その場合、最初のブランチは、条件が真か偽かに応じて、2 番目のブランチの目的地またはその直後のポイントのいずれかにリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="8bd151314b28d93fbbbfc848886d1f59ee15eb4c" translate="yes" xml:space="preserve">
          <source>Perform partial redundancy elimination (PRE) on trees. This flag is enabled by default at</source>
          <target state="translated">ツリーで部分的な冗長性の除去(PRE)を実行します。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="5a687acdfae667c8ef7b171f66546043ce33e5d1" translate="yes" xml:space="preserve">
          <source>Perform pattern matching on SSA PHI nodes to optimize conditional code. This pass is enabled by default at</source>
          <target state="translated">SSA PHI ノードでパターンマッチングを実行し、条件付きコードを最適化します。このパスはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="d2e68d673229fe5ee8d59afbd3fa0d22ff809b67" translate="yes" xml:space="preserve">
          <source>Perform predictive commoning optimization, i.e., reusing computations (especially memory loads and stores) performed in previous iterations of loops.</source>
          <target state="translated">予測的な共通化最適化を実行します。つまり、ループの以前の反復で実行された計算(特にメモリロードとストア)を再利用します。</target>
        </trans-unit>
        <trans-unit id="26325618e11578248e60d5c5ff4d5018d8830e39" translate="yes" xml:space="preserve">
          <source>Perform preprocessing as a separate pass before compilation. By default, GCC performs preprocessing as an integrated part of input tokenization and parsing. If this option is provided, the appropriate language front end (&lt;code&gt;cc1&lt;/code&gt;, &lt;code&gt;cc1plus&lt;/code&gt;, or &lt;code&gt;cc1obj&lt;/code&gt; for C, C++, and Objective-C, respectively) is instead invoked twice, once for preprocessing only and once for actual compilation of the preprocessed input. This option may be useful in conjunction with the</source>
          <target state="translated">コンパイル前に前処理を別のパスとして実行します。デフォルトでは、GCCは前処理を入力のトークン化と解析の統合部分として実行します。このオプションを指定すると、適切な言語のフロントエンド（C、C ++、およびObjective-Cの場合はそれぞれ &lt;code&gt;cc1&lt;/code&gt; 、 &lt;code&gt;cc1plus&lt;/code&gt; 、または &lt;code&gt;cc1obj&lt;/code&gt; ）が2回呼び出されます。このオプションは、</target>
        </trans-unit>
        <trans-unit id="62b772c98eeb18277e47f6941de481fe39743b88" translate="yes" xml:space="preserve">
          <source>Perform reassociation on trees. This flag is enabled by default at</source>
          <target state="translated">ツリーで再関連付けを実行します。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="813a6aee318424bad47fc31e7a836620510b882c" translate="yes" xml:space="preserve">
          <source>Perform scalar replacement of aggregates. This pass replaces structure references with scalars to prevent committing structures to memory too early. This flag is enabled by default at</source>
          <target state="translated">アグリゲートのスカラー置換を実行します。このパスは、構造体のメモリへのコミットが早すぎるのを防ぐために、構造体参照をスカラで置き換えます。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="b26f36abadc06bc5e7c208db61bbe3c358c44821" translate="yes" xml:space="preserve">
          <source>Perform sparse conditional bit constant propagation on trees and propagate pointer alignment information. This pass only operates on local scalar variables and is enabled by default at</source>
          <target state="translated">ツリー上で疎な条件付きビット定数の伝播を行い、ポインタアライメント情報を伝播します。このパスはローカルのスカラー変数に対してのみ動作し、デフォルトでは</target>
        </trans-unit>
        <trans-unit id="98694aae92ae0c01003bcd09f650c827470ff6ab" translate="yes" xml:space="preserve">
          <source>Perform sparse conditional constant propagation (CCP) on trees. This pass only operates on local scalar variables and is enabled by default at</source>
          <target state="translated">木に対して疎な条件付き定数伝播(CCP)を実行します。このパスはローカルのスカラー変数でのみ動作し、デフォルトでは</target>
        </trans-unit>
        <trans-unit id="8f21fbfa919feaca891f89e479b5cefd818de1a6" translate="yes" xml:space="preserve">
          <source>Perform straight-line strength reduction on trees. This recognizes related expressions involving multiplications and replaces them by less expensive calculations when possible. This is enabled by default at</source>
          <target state="translated">木に対して直線強度削減を実行します。これは、乗算を含む関連式を認識し、可能な場合はより安価な計算で置き換えます。この機能は、デフォルトでは</target>
        </trans-unit>
        <trans-unit id="fc1747c25395001b1247e16471c4481c44d67bd9" translate="yes" xml:space="preserve">
          <source>Perform swing modulo scheduling immediately before the first scheduling pass. This pass looks at innermost loops and reorders their instructions by overlapping different iterations.</source>
          <target state="translated">最初のスケジューリングパスの直前にスイングモジュロスケジューリングを実行します。このパスは、最内層のループを見て、異なる反復を重ねて命令を並べ替えます。</target>
        </trans-unit>
        <trans-unit id="a919828d7b7d52d94d6f24adec36ae549e8a769d" translate="yes" xml:space="preserve">
          <source>Perform tail duplication to enlarge superblock size. This transformation simplifies the control flow of the function allowing other optimizations to do a better job.</source>
          <target state="translated">スーパーブロックサイズを拡大するためにテール複製を実行します。この変換は、関数の制御フローを単純化し、他の最適化がより良い仕事をすることを可能にします。</target>
        </trans-unit>
        <trans-unit id="8a7a4b7c3b7e1bdf82389ca95d6d1678d6326545" translate="yes" xml:space="preserve">
          <source>Perform temporary expression replacement during the SSA-&amp;gt;normal phase. Single use/single def temporaries are replaced at their use location with their defining expression. This results in non-GIMPLE code, but gives the expanders much more complex trees to work on resulting in better RTL generation. This is enabled by default at</source>
          <target state="translated">SSA-&amp;gt;通常フェーズで一時的な式の置換を実行します。単一使用/単一定義の一時ファイルは、使用場所でそれらの定義式に置き換えられます。これにより、GIMPLE以外のコードが生成されますが、エキスパンダーが処理するはるかに複雑なツリーが提供され、RTLの生成が向上します。これはデフォルトで有効になっています</target>
        </trans-unit>
        <trans-unit id="04e4b2d91846b5259c4027f98674900fe1e5e1ea" translate="yes" xml:space="preserve">
          <source>Perform vectorization on trees. This flag enables</source>
          <target state="translated">ツリー上でベクトル化を行います。このフラグは</target>
        </trans-unit>
        <trans-unit id="bf3de408c364e89ef2141957569f6e056a16d34e" translate="yes" xml:space="preserve">
          <source>Performs a target dependent pass over the instruction stream to schedule instructions of same type together because target machine can execute them more efficiently if they are adjacent to each other in the instruction flow.</source>
          <target state="translated">命令ストリーム上でターゲット依存パスを実行し、同じタイプの命令を一緒にスケジューリングすることで、命令フロー内で隣接している方が効率的に実行できるためです。</target>
        </trans-unit>
        <trans-unit id="0cf20e92e0ce42954a3e029ad821a60784d2e15d" translate="yes" xml:space="preserve">
          <source>Permissible names are: &amp;lsquo;</source>
          <target state="translated">許可される名前は次のとおりです： '</target>
        </trans-unit>
        <trans-unit id="af0a0da269eb7e218ba55c95eef7829d862234bb" translate="yes" xml:space="preserve">
          <source>Permissible names for this option are the same as those for</source>
          <target state="translated">このオプションで許可される名前は</target>
        </trans-unit>
        <trans-unit id="35baeb043fe816dcaf36ed0df9f003c63e8e45b3" translate="yes" xml:space="preserve">
          <source>Permissible values for these parameters are: &lt;code&gt;reset&lt;/code&gt;, &lt;code&gt;software_exception&lt;/code&gt;, &lt;code&gt;page_miss&lt;/code&gt;, &lt;code&gt;timer0&lt;/code&gt;, &lt;code&gt;timer1&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;dma0&lt;/code&gt;, &lt;code&gt;dma1&lt;/code&gt;, &lt;code&gt;wand&lt;/code&gt; and &lt;code&gt;swi&lt;/code&gt;. Multiple parameters indicate that multiple entries in the interrupt vector table should be initialized for this function, i.e. for each parameter &lt;var&gt;name&lt;/var&gt;, a jump to the function is emitted in the section ivt_entry_&lt;var&gt;name&lt;/var&gt;. The parameter(s) may be omitted entirely, in which case no interrupt vector table entry is provided.</source>
          <target state="translated">これらのパラメータの許容値は： &lt;code&gt;reset&lt;/code&gt; 、 &lt;code&gt;software_exception&lt;/code&gt; 、 &lt;code&gt;page_miss&lt;/code&gt; 、 &lt;code&gt;timer0&lt;/code&gt; 、 &lt;code&gt;timer1&lt;/code&gt; 、 &lt;code&gt;message&lt;/code&gt; 、 &lt;code&gt;dma0&lt;/code&gt; 、 &lt;code&gt;dma1&lt;/code&gt; 、 &lt;code&gt;wand&lt;/code&gt; と &lt;code&gt;swi&lt;/code&gt; 。複数のパラメーターは、割り込みベクトルテーブルの複数のエントリをこの関数に対して初期化する必要があることを示します。つまり、各パラメーター &lt;var&gt;name&lt;/var&gt; について、セクションivt_entry_ &lt;var&gt;name&lt;/var&gt; で関数へのジャンプが発行されます。パラメータは完全に省略できます。その場合、割り込みベクタテーブルエントリは提供されません。</target>
        </trans-unit>
        <trans-unit id="b9723fc078a6d12e16c3d4a9c0abd787a24129b7" translate="yes" xml:space="preserve">
          <source>Permissible values for this parameter are &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;supervisor&lt;/code&gt;, and &lt;code&gt;machine&lt;/code&gt;. If there is no parameter, then it defaults to &lt;code&gt;machine&lt;/code&gt;.</source>
          <target state="translated">このパラメーターの許容値は、 &lt;code&gt;user&lt;/code&gt; 、 &lt;code&gt;supervisor&lt;/code&gt; 、および &lt;code&gt;machine&lt;/code&gt; です。パラメータがない場合、デフォルトで &lt;code&gt;machine&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="3cc7aed9a0397bf927110c664bfb64b86eeabb19" translate="yes" xml:space="preserve">
          <source>Permissible values for this parameter are: &lt;code&gt;IRQ&lt;/code&gt;, &lt;code&gt;FIQ&lt;/code&gt;, &lt;code&gt;SWI&lt;/code&gt;, &lt;code&gt;ABORT&lt;/code&gt; and &lt;code&gt;UNDEF&lt;/code&gt;.</source>
          <target state="translated">このパラメーターの許容値は、 &lt;code&gt;IRQ&lt;/code&gt; 、 &lt;code&gt;FIQ&lt;/code&gt; 、 &lt;code&gt;SWI&lt;/code&gt; 、 &lt;code&gt;ABORT&lt;/code&gt; 、および &lt;code&gt;UNDEF&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="57d5e1c32f10448459df52f2af315ff5a35b20a7" translate="yes" xml:space="preserve">
          <source>Permissible values for this parameter are: &lt;code&gt;ilink1&lt;/code&gt; and &lt;code&gt;ilink2&lt;/code&gt;.</source>
          <target state="translated">このパラメーターの許容値は、 &lt;code&gt;ilink1&lt;/code&gt; および &lt;code&gt;ilink2&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4f3f12e5bf476c3ff221016dda60f3c7460d0647" translate="yes" xml:space="preserve">
          <source>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with the Invariant Sections being &amp;ldquo;Funding Free Software&amp;rdquo;, the Front-Cover Texts being (a) (see below), and with the Back-Cover Texts being (b) (see below). A copy of the license is included in the section entitled &amp;ldquo;GNU Free Documentation License&amp;rdquo;.</source>
          <target state="translated">GNU Free Documentation License、バージョン1.3、またはFree Software Foundationによって発行されたそれ以降のバージョンの条件に基づいて、このドキュメントをコピー、配布、および/または変更する許可が与えられます。インバリアントセクションは「フリーソフトウェアの資金調達」、フロントカバーテキストは（a）（以下を参照）、バックカバーテキストは（b）（以下を参照）です。ライセンスのコピーは、「GNU Free Documentation License」というタイトルのセクションに含まれています。</target>
        </trans-unit>
        <trans-unit id="cb303e16e1de5b240406d59f6d4950a031fdb18c" translate="yes" xml:space="preserve">
          <source>Permit scheduling of function prologue and epilogue sequences. Using this option can result in code that is not compliant with the C-SKY V2 ABI prologue requirements and that cannot be debugged or backtraced. It is disabled by default.</source>
          <target state="translated">関数プロローグおよびエピローグシーケンスのスケジューリングを許可します。このオプションを使用すると、C-SKY V2 ABIのプロローグ要件に準拠しておらず、デバッグやバックトレースができないコードになることがあります。デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="efb7f323fa4189969e284506cb84cfc7c5590b36" translate="yes" xml:space="preserve">
          <source>Place a stop bit after every cycle when scheduling. This option is on by default.</source>
          <target state="translated">スケジューリング時に、各サイクルの後にストップビットを配置します。このオプションはデフォルトでオンになっています。</target>
        </trans-unit>
        <trans-unit id="f322bfc998e9190a4bf5a7767d3d6625d8974da3" translate="yes" xml:space="preserve">
          <source>Place each function or data item into its own section in the output file if the target supports arbitrary sections. The name of the function or the name of the data item determines the section&amp;rsquo;s name in the output file.</source>
          <target state="translated">ターゲットが任意のセクションをサポートしている場合、各関数またはデータ項目を出力ファイルの独自のセクションに配置します。関数の名前またはデータ項目の名前によって、出力ファイル内のセクションの名前が決まります。</target>
        </trans-unit>
        <trans-unit id="d5dd2f33d892c7609324f2984b75dba44e198b60" translate="yes" xml:space="preserve">
          <source>Place output in file &lt;var&gt;file&lt;/var&gt;. This applies to whatever sort of output is being produced, whether it be an executable file, an object file, an assembler file or preprocessed C code.</source>
          <target state="translated">出力をファイル &lt;var&gt;file&lt;/var&gt; に配置します。これは、実行可能ファイル、オブジェクトファイル、アセンブラファイル、または前処理されたCコードなど、生成される出力の種類に適用されます。</target>
        </trans-unit>
        <trans-unit id="6702fed7fed6176a523c58b5ddd51a1d929453f7" translate="yes" xml:space="preserve">
          <source>Please note the warning under</source>
          <target state="translated">以下の警告にご注意ください。</target>
        </trans-unit>
        <trans-unit id="fa1c5292c2aed3e9e6527fac2de8fd113fa58e19" translate="yes" xml:space="preserve">
          <source>Pointer arguments to variadic functions.</source>
          <target state="translated">可変関数へのポインタ引数。</target>
        </trans-unit>
        <trans-unit id="c72a43085fa8bb37fba01322fd21a237f32d0882" translate="yes" xml:space="preserve">
          <source>Pointer register (r26&amp;ndash;r31)</source>
          <target state="translated">ポインタレジスタ（r26&amp;ndash;r31）</target>
        </trans-unit>
        <trans-unit id="548e8a6d360621f369a6ac68a9d06d3b535c4226" translate="yes" xml:space="preserve">
          <source>Pointer with long displacement.</source>
          <target state="translated">長い変位を持つポインタ。</target>
        </trans-unit>
        <trans-unit id="f829df7980df5422cdac2c36bfd4a6a0924d2a9d" translate="yes" xml:space="preserve">
          <source>Pointer with short displacement.</source>
          <target state="translated">短い変位を持つポインタ。</target>
        </trans-unit>
        <trans-unit id="221a34492903a7d75d1476fa80d265dd838ae397" translate="yes" xml:space="preserve">
          <source>Pointers in the implementation are 16 bits wide. The address of a function or label is represented as word address so that indirect jumps and calls can target any code address in the range of 64 Ki words.</source>
          <target state="translated">実装におけるポインタは16ビット幅である。関数またはラベルのアドレスは、間接的なジャンプおよび呼び出しが64Kiワードの範囲内の任意のコードアドレスを対象とすることができるように、ワードアドレスとして表される。</target>
        </trans-unit>
        <trans-unit id="b71846dbdd6d5df077c8d26dc154bb35c68e7752" translate="yes" xml:space="preserve">
          <source>Pointers to arrays with qualifiers work as expected.</source>
          <target state="translated">予言語を持つ配列へのポインタは期待通りに動作します。</target>
        </trans-unit>
        <trans-unit id="da127d1a6d3dff99efb435318078508cb04231bb" translate="yes" xml:space="preserve">
          <source>Popping the arguments after the function call can be expensive on AVR so that accumulating the stack space might lead to smaller executables because arguments need not be removed from the stack after such a function call.</source>
          <target state="translated">関数呼び出し後に引数をポップするのはAVR上では高価になることがあるので、そのような関数呼び出し後に引数がスタックから削除される必要がないので、スタック空間を蓄積することはより小さい実行可能ファイルにつながるかもしれません。</target>
        </trans-unit>
        <trans-unit id="1ec131a13f5ccb0f8a6fa30408faa2bccded3261" translate="yes" xml:space="preserve">
          <source>Position-independent code requires special support, and therefore works only on certain machines.</source>
          <target state="translated">ポジションに依存しないコードは特別なサポートを必要とするため、特定のマシンでのみ動作します。</target>
        </trans-unit>
        <trans-unit id="ff1fde2f659bcd7d20cf19e7e6dbdfb1735e0055" translate="yes" xml:space="preserve">
          <source>Position-independent code requires special support, and therefore works only on certain machines. For the x86, GCC supports PIC for System V but not for the Sun 386i. Code generated for the IBM RS/6000 is always position-independent.</source>
          <target state="translated">位置に依存しないコードは特別なサポートを必要とするため、特定のマシンでのみ動作します。x86では、GCCはSystem VのPICをサポートしていますが、Sun 386iではサポートしていません。IBM RS/6000用に生成されたコードは常に位置非依存です。</target>
        </trans-unit>
        <trans-unit id="d29deccf36aae92e4a7875b6f993d6712f4c48c0" translate="yes" xml:space="preserve">
          <source>PowerPC 405 32-bit Embedded CPU.</source>
          <target state="translated">PowerPC 405 32ビット組み込みCPU。</target>
        </trans-unit>
        <trans-unit id="b1d2fd0956b324f2b71d45c79701e634006f0998" translate="yes" xml:space="preserve">
          <source>PowerPC 440 32-bit Embedded CPU.</source>
          <target state="translated">PowerPC 440 32ビット組み込みCPU。</target>
        </trans-unit>
        <trans-unit id="8c88a5ec0bad9b2ec3a6e912ad1b84fe1cb0e913" translate="yes" xml:space="preserve">
          <source>PowerPC and IBM RS6000&amp;mdash;</source>
          <target state="translated">PowerPCおよびIBM RS6000&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="bcb9720231f4eefcc2911c6644e67562366e664a" translate="yes" xml:space="preserve">
          <source>Pragmas accepted by GCC.</source>
          <target state="translated">GCCで受け入れられたプラグマ。</target>
        </trans-unit>
        <trans-unit id="ae3be2297868a8755878b8140bb470b2659e5173" translate="yes" xml:space="preserve">
          <source>Pragmas to control overflow and rounding behaviors are not implemented.</source>
          <target state="translated">オーバーフローや丸め動作を制御するためのプラグマは実装されていません。</target>
        </trans-unit>
        <trans-unit id="8e93065e97687afdb6c2cb1807aa95de831b3446" translate="yes" xml:space="preserve">
          <source>Predefine &lt;var&gt;name&lt;/var&gt; as a macro, with definition &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;name&lt;/var&gt; をマクロとして事前定義し、定義を &lt;code&gt;1&lt;/code&gt; にします。</target>
        </trans-unit>
        <trans-unit id="e38583cb5384743db9afcc426cedec4f148c0b26" translate="yes" xml:space="preserve">
          <source>Predicate register (&amp;lsquo;</source>
          <target state="translated">述語レジスタ（ '</target>
        </trans-unit>
        <trans-unit id="f6c24206b3789713e962d5bee080397fea9809bf" translate="yes" xml:space="preserve">
          <source>Predicate registers in register file A (A0&amp;ndash;A2 on C64X and higher, A1 and A2 otherwise).</source>
          <target state="translated">レジスタファイルAの述語レジスタ（C64X以降ではA0〜A2、それ以外の場合はA1およびA2）。</target>
        </trans-unit>
        <trans-unit id="fec436f1165c01f7b8c12f56c12ec41ae48daa7c" translate="yes" xml:space="preserve">
          <source>Predicate registers in register file B (B0&amp;ndash;B2).</source>
          <target state="translated">レジスタファイルB（B0〜B2）の述語レジスタ。</target>
        </trans-unit>
        <trans-unit id="d010b8de73801ea6c16e7a693f380cb435e67997" translate="yes" xml:space="preserve">
          <source>Prefer 128-bit vector width for instructions.</source>
          <target state="translated">命令のベクトル幅は128ビットを推奨します。</target>
        </trans-unit>
        <trans-unit id="c72722357c9f06e0451f0baf6353c7d5bd987c68" translate="yes" xml:space="preserve">
          <source>Prefer 256-bit vector width for instructions.</source>
          <target state="translated">命令のベクトル幅は256ビットを推奨します。</target>
        </trans-unit>
        <trans-unit id="3d1a90957e39dc52fe3e0a5dff721af2c1533ae9" translate="yes" xml:space="preserve">
          <source>Prefer 512-bit vector width for instructions.</source>
          <target state="translated">命令のベクトル幅は512ビットを推奨します。</target>
        </trans-unit>
        <trans-unit id="55b3d6f2f24c6bd41aa8d455a302118a96706fdb" translate="yes" xml:space="preserve">
          <source>Prefer initialization to assignment in constructors.</source>
          <target state="translated">コンストラクタでは、初期化を代入よりも優先します。</target>
        </trans-unit>
        <trans-unit id="e5fe97372ea4c44c05ad1e9f80e485c5b8d2b708" translate="yes" xml:space="preserve">
          <source>Prefer word access when reading byte quantities.</source>
          <target state="translated">バイト数を読むときはワードアクセスを優先します。</target>
        </trans-unit>
        <trans-unit id="751bcd963c78ac89d226c347c0db73a5eb17519e" translate="yes" xml:space="preserve">
          <source>Prefer zero-displacement conditional branches for conditional move instruction patterns. This can result in faster code on the SH4 processor.</source>
          <target state="translated">条件付きの移動命令パターンでは、ゼロ変位の条件分岐を推奨します。これにより、SH4 プロセッサでのコードが高速化されます。</target>
        </trans-unit>
        <trans-unit id="62927f12aebe8245ca7ccbec4d045c60284016e4" translate="yes" xml:space="preserve">
          <source>Preferentially allocate registers that allow short instruction generation. This can result in increased instruction count, so this may either reduce or increase overall code size.</source>
          <target state="translated">短い命令生成を可能にするレジスタを優先的に割り当てます。その結果、命令数が増加する可能性があるので、全体のコードサイズを小さくするか、大きくするかのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="a1fdf593aa54fe21b57f9608b9af0f175a51f5bf" translate="yes" xml:space="preserve">
          <source>Prepend (do not prepend) a &amp;lsquo;</source>
          <target state="translated">前に付ける（前に付けない）a '</target>
        </trans-unit>
        <trans-unit id="7b1baabda5f4c155086c1133972437c2a11a8717" translate="yes" xml:space="preserve">
          <source>Preprocessor Options</source>
          <target state="translated">プリプロセッサオプション</target>
        </trans-unit>
        <trans-unit id="c52cfab87f1f18bc931d7a53ed6f0f346f5be727" translate="yes" xml:space="preserve">
          <source>Preserve complete path information in the names of generated</source>
          <target state="translated">生成された</target>
        </trans-unit>
        <trans-unit id="133f0b62da14d995af8aaf975f0c4e6493e01234" translate="yes" xml:space="preserve">
          <source>Pretend the symbol &lt;var&gt;symbol&lt;/var&gt; is undefined, to force linking of library modules to define it. You can use</source>
          <target state="translated">シンボル &lt;var&gt;symbol&lt;/var&gt; が未定義のふりをして、ライブラリモジュールを強制的にリンクして定義します。使用できます</target>
        </trans-unit>
        <trans-unit id="93b748cdea3b771906f02431b0afee34e97035a0" translate="yes" xml:space="preserve">
          <source>Prevent floating-point registers from being used in any manner. This is necessary for compiling kernels that perform lazy context switching of floating-point registers. If you use this option and attempt to perform floating-point operations, the compiler aborts.</source>
          <target state="translated">浮動小数点レジスタがどのような方法でも使用されないようにします。これは、浮動小数点レジスタの遅延コンテキスト切り替えを行うカーネルをコンパイルする際に必要です。このオプションを使用して浮動小数点演算を実行しようとすると、コンパイラはアボートします。</target>
        </trans-unit>
        <trans-unit id="bb7e629d281cc1130ee30ba469e70f725c11a1a9" translate="yes" xml:space="preserve">
          <source>Prevent the compiler from using indexing address modes. This avoids some rather obscure problems when compiling MIG generated code under MACH.</source>
          <target state="translated">コンパイラがインデキシングアドレスモードを使用しないようにします。これにより、MIG で生成されたコードを MACH でコンパイルする際の不明瞭な問題を回避することができます。</target>
        </trans-unit>
        <trans-unit id="a884d00641db1ef92c5861d9f7679506da26ff4e" translate="yes" xml:space="preserve">
          <source>Prevent the reordering of instructions in the function prologue, or the merging of those instruction with the instructions in the function&amp;rsquo;s body. This means that all functions start with a recognizable set of instructions (or in fact one of a choice from a small set of different function prologues), and this information can be used to locate the start of functions inside an executable piece of code. The default is</source>
          <target state="translated">関数プロローグ内の命令の並べ替え、またはそれらの命令と関数本体の命令とのマージを防止します。これは、すべての関数が認識可能な一連の命令（または実際には、さまざまな関数プロローグの小さなセットからの1つ）で始まることを意味し、この情報を使用して、実行可能なコード内の関数の開始を見つけることができます。デフォルトは</target>
        </trans-unit>
        <trans-unit id="8bee5f1a685fff3e9255748fa0a591a79f24269b" translate="yes" xml:space="preserve">
          <source>Prevents GCC from issuing a warning message if it finds more than one fast interrupt handler when it is compiling a file. The default is to issue a warning for each extra fast interrupt handler found, as the RX only supports one such interrupt.</source>
          <target state="translated">GCCがファイルをコンパイルしているときに複数の高速割り込みハンドラを見つけた場合に警告メッセージを発行しないようにします。デフォルトでは、RXは1つの高速割り込みしかサポートしていないため、余分な高速割り込みハンドラが見つかるたびに警告を出すようになっています。</target>
        </trans-unit>
        <trans-unit id="0c298d2156eb911587b91d6784586e592c266917" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;_0040encode#g_t_0040encode&quot;&gt;@encode&lt;/a&gt;, Up: &lt;a href=&quot;type-encoding#Type-encoding&quot;&gt;Type encoding&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">前：&lt;a href=&quot;_0040encode#g_t_0040encode&quot;&gt;@encode&lt;/a&gt;、上：&lt;a href=&quot;type-encoding#Type-encoding&quot;&gt;タイプエンコーディング&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;目次&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;インデックス&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="45ae7dc171d8dbf2c108f57d090926498ec01d52" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;basic-powerpc-built_002din-functions-available-on-isa-2_002e07#Basic-PowerPC-Built_002din-Functions-Available-on-ISA-2_002e07&quot;&gt;Basic PowerPC Built-in Functions Available on ISA 2.07&lt;/a&gt;, Up: &lt;a href=&quot;basic-powerpc-built_002din-functions#Basic-PowerPC-Built_002din-Functions&quot;&gt;Basic PowerPC Built-in Functions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">Previous：&lt;a href=&quot;basic-powerpc-built_002din-functions-available-on-isa-2_002e07#Basic-PowerPC-Built_002din-Functions-Available-on-ISA-2_002e07&quot;&gt;ISA 2.07&lt;/a&gt;で利用可能な基本的なPowerPC組み込み関数 Up：&lt;a href=&quot;basic-powerpc-built_002din-functions#Basic-PowerPC-Built_002din-Functions&quot;&gt;基本的なPowerPC組み込み関数&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;目次&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;索引&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="92416ecc83e7012e1b2389fd283cb8d6c4bca85a" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;c99-thread_002dlocal-edits#C99-Thread_002dLocal-Edits&quot;&gt;C99 Thread-Local Edits&lt;/a&gt;, Up: &lt;a href=&quot;thread_002dlocal#Thread_002dLocal&quot;&gt;Thread-Local&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">前：&lt;a href=&quot;c99-thread_002dlocal-edits#C99-Thread_002dLocal-Edits&quot;&gt;C99スレッドローカル編集&lt;/a&gt;、上：&lt;a href=&quot;thread_002dlocal#Thread_002dLocal&quot;&gt;スレッドローカル&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;目次&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;索引&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="095b2c8cec2a9ee9cd6a1fc1d2c2268ef5e58bb5" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;dynamically-registering-methods#Dynamically-registering-methods&quot;&gt;Dynamically registering methods&lt;/a&gt;, Up: &lt;a href=&quot;messaging-with-the-gnu-objective_002dc-runtime#Messaging-with-the-GNU-Objective_002dC-runtime&quot;&gt;Messaging with the GNU Objective-C runtime&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">前：&lt;a href=&quot;dynamically-registering-methods#Dynamically-registering-methods&quot;&gt;メソッドの動的な登録&lt;/a&gt;、上：&lt;a href=&quot;messaging-with-the-gnu-objective_002dc-runtime#Messaging-with-the-GNU-Objective_002dC-runtime&quot;&gt;GNU Objective-Cランタイムによるメッセージング&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;目次&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;索引&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="8f89899827d8a560e31e2ca14d0a8300f657be83" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;environment-variables#Environment-Variables&quot;&gt;Environment Variables&lt;/a&gt;, Up: &lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;Invoking GCC&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">前：&lt;a href=&quot;environment-variables#Environment-Variables&quot;&gt;環境変数&lt;/a&gt;、上：&lt;a href=&quot;invoking-gcc#Invoking-GCC&quot;&gt;GCCの呼び出し&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;目次&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;索引&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="3abd0fcac2246de54cbf842bcf5c2d572e95cf49" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;fast-enumeration-details#Fast-enumeration-details&quot;&gt;Fast enumeration details&lt;/a&gt;, Up: &lt;a href=&quot;fast-enumeration#Fast-enumeration&quot;&gt;Fast enumeration&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">前：&lt;a href=&quot;fast-enumeration-details#Fast-enumeration-details&quot;&gt;高速列挙の詳細&lt;/a&gt;、上：&lt;a href=&quot;fast-enumeration#Fast-enumeration&quot;&gt;高速列挙&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;目次&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;索引&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="0cd478c56630e085181033925575eebae41d495c" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;gcov_002dtool-intro#Gcov_002dtool-Intro&quot;&gt;Gcov-tool Intro&lt;/a&gt;, Up: &lt;a href=&quot;gcov_002dtool#Gcov_002dtool&quot;&gt;Gcov-tool&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">前：&lt;a href=&quot;gcov_002dtool-intro#Gcov_002dtool-Intro&quot;&gt;Gcov-toolの紹介&lt;/a&gt;、上：&lt;a href=&quot;gcov_002dtool#Gcov_002dtool&quot;&gt;Gcov-tool&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;目次&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;索引&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="2e40d48fc32253bef8628625302a0abbcde80f82" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;global-register-variables#Global-Register-Variables&quot;&gt;Global Register Variables&lt;/a&gt;, Up: &lt;a href=&quot;explicit-register-variables#Explicit-Register-Variables&quot;&gt;Explicit Register Variables&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">前：&lt;a href=&quot;global-register-variables#Global-Register-Variables&quot;&gt;グローバルレジスタ変数&lt;/a&gt;、上：&lt;a href=&quot;explicit-register-variables#Explicit-Register-Variables&quot;&gt;明示的なレジスタ変数&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;目次&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;インデックス&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="180c60ac0f109d44e10ade3943d2c55400d71f8d" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;modifiers#Modifiers&quot;&gt;Modifiers&lt;/a&gt;, Up: &lt;a href=&quot;constraints#Constraints&quot;&gt;Constraints&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">前：&lt;a href=&quot;modifiers#Modifiers&quot;&gt;モディファイヤ&lt;/a&gt;、上：&lt;a href=&quot;constraints#Constraints&quot;&gt;制約&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;目次&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;索引&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="2690cc6bd85085d1a20978cb1ff148ed57eeb42a" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;non_002dbugs#Non_002dbugs&quot;&gt;Non-bugs&lt;/a&gt;, Up: &lt;a href=&quot;trouble#Trouble&quot;&gt;Trouble&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">前：&lt;a href=&quot;non_002dbugs#Non_002dbugs&quot;&gt;バグなし&lt;/a&gt;、上：&lt;a href=&quot;trouble#Trouble&quot;&gt;トラブル&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;目次&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;索引&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="518a1b2a1a9d78ecacf627dac6376da5b9566530" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;paired_002dsingle-built_002din-functions#Paired_002dSingle-Built_002din-Functions&quot;&gt;Paired-Single Built-in Functions&lt;/a&gt;, Up: &lt;a href=&quot;mips-loongson-built_002din-functions#MIPS-Loongson-Built_002din-Functions&quot;&gt;MIPS Loongson Built-in Functions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">前：&lt;a href=&quot;paired_002dsingle-built_002din-functions#Paired_002dSingle-Built_002din-Functions&quot;&gt;対になった単一の組み込み関数&lt;/a&gt;、上：&lt;a href=&quot;mips-loongson-built_002din-functions#MIPS-Loongson-Built_002din-Functions&quot;&gt;MIPS Loongson組み込み関数&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;目次&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;索引&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="8a6424fd89847064955d1584a816d8d119f016ca" translate="yes" xml:space="preserve">
          <source>Previous: &lt;a href=&quot;powerpc-altivec-built_002din-functions-available-on-isa-2_002e07#PowerPC-AltiVec-Built_002din-Functions-Available-on-ISA-2_002e07&quot;&gt;PowerPC AltiVec Built-in Functions Available on ISA 2.07&lt;/a&gt;, Up: &lt;a href=&quot;powerpc-altivec_002fvsx-built_002din-functions#PowerPC-AltiVec_002fVSX-Built_002din-Functions&quot;&gt;PowerPC AltiVec/VSX Built-in Functions&lt;/a&gt; [&lt;a href=&quot;index#SEC_Contents&quot;&gt;Contents&lt;/a&gt;][&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Index&lt;/a&gt;]</source>
          <target state="translated">Previous：&lt;a href=&quot;powerpc-altivec-built_002din-functions-available-on-isa-2_002e07#PowerPC-AltiVec-Built_002din-Functions-Available-on-ISA-2_002e07&quot;&gt;ISA 2.07&lt;/a&gt;で利用可能なPowerPC AltiVec組み込み関数、上：&lt;a href=&quot;powerpc-altivec_002fvsx-built_002din-functions#PowerPC-AltiVec_002fVSX-Built_002din-Functions&quot;&gt;PowerPC AltiVec / VSX組み込み関数&lt;/a&gt; [ &lt;a href=&quot;index#SEC_Contents&quot;&gt;目次&lt;/a&gt; ] [ &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;索引&lt;/a&gt; ]</target>
        </trans-unit>
        <trans-unit id="5070ca712488a6295aeb93bb4b823f413e03dde1" translate="yes" xml:space="preserve">
          <source>Print (on standard error output) the commands executed to run the stages of compilation. Also print the version number of the compiler driver program and of the preprocessor and the compiler proper.</source>
          <target state="translated">コンパイルの段階を実行するために実行されたコマンドを(標準エラー出力に)表示します。また、コンパイラドライバプログラム、プリプロセッサ、コンパイラのバージョン番号も表示します。</target>
        </trans-unit>
        <trans-unit id="f0802ef33bb80e0daadac78e85825604f940dbf7" translate="yes" xml:space="preserve">
          <source>Print (on the standard output) a description of target-specific command-line options for each tool. For some targets extra target-specific information may also be printed.</source>
          <target state="translated">各ツールのターゲット固有のコマンドラインオプションの説明を(標準出力で)印刷します。ターゲットによっては、ターゲット固有の追加情報も印刷される場合があります。</target>
        </trans-unit>
        <trans-unit id="da44c4f450112c4e0f6f8b3b80edf560950a6ee6" translate="yes" xml:space="preserve">
          <source>Print (on the standard output) a description of the command-line options understood by &lt;code&gt;gcc&lt;/code&gt;. If the</source>
          <target state="translated">&lt;code&gt;gcc&lt;/code&gt; が理解するコマンドラインオプションの説明を（標準出力に）印刷します。もし</target>
        </trans-unit>
        <trans-unit id="e18b1edf66bd2215edee93ad1bfe2475848c1c40" translate="yes" xml:space="preserve">
          <source>Print (on the standard output) a description of the command-line options understood by the compiler that fit into all specified classes and qualifiers. These are the supported classes:</source>
          <target state="translated">指定されたすべてのクラスと修飾子に適合する、コンパイラが理解するコマンドライン・オプションの説明を (標準出力に)表示します。これらはサポートされているクラスです。</target>
        </trans-unit>
        <trans-unit id="36e2db25cdaf136a1b1871f7bddede044a014af0" translate="yes" xml:space="preserve">
          <source>Print (or do not print) additional debug information when compiling. The default is to not print debug information.</source>
          <target state="translated">コンパイル時に追加のデバッグ情報を表示する (または表示しない)。デフォルトではデバッグ情報を印刷しないようになっています。</target>
        </trans-unit>
        <trans-unit id="042a1c2bccf30839985d02fecb0aaa588016c586" translate="yes" xml:space="preserve">
          <source>Print &lt;var&gt;str&lt;/var&gt; as an error message. &lt;var&gt;str&lt;/var&gt; is terminated by a newline. Use this when inconsistent options are detected.</source>
          <target state="translated">印刷 &lt;var&gt;str&lt;/var&gt; エラーメッセージとして。 &lt;var&gt;str&lt;/var&gt; は改行で終了します。これは、矛盾するオプションが検出された場合に使用します。</target>
        </trans-unit>
        <trans-unit id="646c20558d20e2f30241cc9574d344b39d2a71e9" translate="yes" xml:space="preserve">
          <source>Print CPU tuning information as comment in assembler file. This is an option used only for regression testing of the compiler and not intended for ordinary use in compiling code. This option is disabled by default.</source>
          <target state="translated">CPU チューニング情報をアセンブラファイルのコメントとして表示します。このオプションはコンパイラのリグレッションテストのためだけに使用されるもので、通常のコードのコンパイルでの使用を意図したものではありません。このオプションはデフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="0c02ead981dc46c74eca673ebbadeb5775102eb4" translate="yes" xml:space="preserve">
          <source>Print a raw representation of the tree. By default, trees are pretty-printed into a C-like representation.</source>
          <target state="translated">ツリーの生の表現を印刷します。デフォルトでは、ツリーはCのような表現できれいに印刷されます。</target>
        </trans-unit>
        <trans-unit id="bee9976317d77665142eb597fb744cf4a5bc63c3" translate="yes" xml:space="preserve">
          <source>Print an absolute memory reference.</source>
          <target state="translated">絶対メモリ参照を表示します。</target>
        </trans-unit>
        <trans-unit id="c1b62ec38c8c02ce83661de096266f4e8ad36d5d" translate="yes" xml:space="preserve">
          <source>Print detailed optimization information. This includes &amp;lsquo;</source>
          <target state="translated">詳細な最適化情報を出力します。これも '</target>
        </trans-unit>
        <trans-unit id="747925ea13ebc5265845c242e39f7d5de361cc9c" translate="yes" xml:space="preserve">
          <source>Print fix-it hints to stderr in unified diff format, after any diagnostics are printed. For example:</source>
          <target state="translated">診断結果が印刷された後に、fix-it のヒントを統一された diff 形式で標準エラーに印刷します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="27e48e9709e199f67d90728d88acda8122e690ad" translate="yes" xml:space="preserve">
          <source>Print full gcda filename.</source>
          <target state="translated">完全な gcda ファイル名を印刷します。</target>
        </trans-unit>
        <trans-unit id="b3444c534ef235bd7cfb2bb1457050c5df19fa98" translate="yes" xml:space="preserve">
          <source>Print function level overlap score.</source>
          <target state="translated">機能レベルのオーバーラップスコアを印刷します。</target>
        </trans-unit>
        <trans-unit id="2259612d90015512d8565367d9b66e6d1907b7e3" translate="yes" xml:space="preserve">
          <source>Print information about missed optimizations. Individual passes control which information to include in the output.</source>
          <target state="translated">見逃した最適化に関する情報を表示します。個々のパスは、出力に含める情報を制御します。</target>
        </trans-unit>
        <trans-unit id="0e737c134e058a6b5be3c38b4d61e9060cbe2d6f" translate="yes" xml:space="preserve">
          <source>Print information when an optimization is successfully applied. It is up to a pass to decide which information is relevant. For example, the vectorizer passes print the source location of loops which are successfully vectorized.</source>
          <target state="translated">最適化が正常に適用されたときに情報を印刷します。どの情報が適切かはパス次第です。例えば、ベクター化パスは、ベクター化に成功したループのソースの位置を表示します。</target>
        </trans-unit>
        <trans-unit id="49e8d2891f1bb00bf2fce45c40fe769f980367c0" translate="yes" xml:space="preserve">
          <source>Print object level overlap score.</source>
          <target state="translated">オブジェクトレベルのオーバーラップスコアを表示します。</target>
        </trans-unit>
        <trans-unit id="3a95fbc869807d22e5b89ec0f92871dcddcd83ac" translate="yes" xml:space="preserve">
          <source>Print on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc5672b8cdd0196a1822504903f9194000cffdc" translate="yes" xml:space="preserve">
          <source>Print raw symbol name (without syntax-specific prefixes).</source>
          <target state="translated">生のシンボル名を表示します(構文固有の接頭辞なし)。</target>
        </trans-unit>
        <trans-unit id="8b3eb16e33ebf816827fd23a1d5134fcb39c5577" translate="yes" xml:space="preserve">
          <source>Print the DImode name of the register.</source>
          <target state="translated">レジスタのDImode名を印刷します。</target>
        </trans-unit>
        <trans-unit id="8cbb39fe370973258d3221791eb533a79143c1a4" translate="yes" xml:space="preserve">
          <source>Print the HImode name of the register.</source>
          <target state="translated">レジスタのHImode名を印刷します。</target>
        </trans-unit>
        <trans-unit id="5f0523fe616c1a4ec29efecc044a8b533dbfc088" translate="yes" xml:space="preserve">
          <source>Print the QImode name for a &amp;ldquo;high&amp;rdquo; register.</source>
          <target state="translated">「高」レジスタのQImode名を出力します。</target>
        </trans-unit>
        <trans-unit id="cba0544fdad24e8c71fa2998d0fc17006f470a5d" translate="yes" xml:space="preserve">
          <source>Print the QImode name of the register.</source>
          <target state="translated">レジスタのQImode名を表示します。</target>
        </trans-unit>
        <trans-unit id="415fe8734ed5c7ca7d367010aad83e19c898fcd9" translate="yes" xml:space="preserve">
          <source>Print the SImode name of the register.</source>
          <target state="translated">レジスタのSImode名を印刷します。</target>
        </trans-unit>
        <trans-unit id="7bde1647cee4db781bd592bee36a2a9579dff9ad" translate="yes" xml:space="preserve">
          <source>Print the address in Double Integer (DImode) mode (8 bytes) when the target is 64-bit. Otherwise mode is unspecified (VOIDmode).</source>
          <target state="translated">ターゲットが64ビットの場合はDouble Integer(DImode)モード(8バイト)でアドレスを出力します。それ以外のモードは指定なし(VOIDmode)です。</target>
        </trans-unit>
        <trans-unit id="0a2a748643cbf5bccb4c8b64fbb809daa63616ff" translate="yes" xml:space="preserve">
          <source>Print the address of each node. Usually this is not meaningful as it changes according to the environment and source file. Its primary use is for tying up a dump file with a debug environment.</source>
          <target state="translated">各ノードのアドレスを印刷します。通常は環境やソースファイルによって変化するので意味がありません。主な用途は、ダンプファイルをデバッグ環境に結びつけることです。</target>
        </trans-unit>
        <trans-unit id="c30bf938013bc01150cd4223148df68eeb709db3" translate="yes" xml:space="preserve">
          <source>Print the compiler version (for example, &lt;code&gt;3.0&lt;/code&gt;, &lt;code&gt;6.3.0&lt;/code&gt; or &lt;code&gt;7&lt;/code&gt;)&amp;mdash;and don&amp;rsquo;t do anything else. This is the compiler version used in filesystem paths and specs. Depending on how the compiler has been configured it can be just a single number (major version), two numbers separated by a dot (major and minor version) or three numbers separated by dots (major, minor and patchlevel version).</source>
          <target state="translated">コンパイラのバージョン（例えば、印刷 &lt;code&gt;3.0&lt;/code&gt; 、 &lt;code&gt;6.3.0&lt;/code&gt; または &lt;code&gt;7&lt;/code&gt; ） -および他に何もしません。これは、ファイルシステムのパスと仕様で使用されるコンパイラのバージョンです。コンパイラーの構成方法に応じて、単一の数値（メジャーバージョン）、ドットで区切られた2つの数値（メジャーバージョンとマイナーバージョン）、またはドットで区切られた3つの数値（メジャーバージョン、マイナーバージョンとパッチレベルバージョン）になります。</target>
        </trans-unit>
        <trans-unit id="39f02afa5381880ed9364aabcf135637b524d215" translate="yes" xml:space="preserve">
          <source>Print the compiler&amp;rsquo;s built-in specs&amp;mdash;and don&amp;rsquo;t do anything else. (This is used when GCC itself is being built.) See &lt;a href=&quot;spec-files#Spec-Files&quot;&gt;Spec Files&lt;/a&gt;.</source>
          <target state="translated">コンパイラの組み込み仕様を出力します。それ以外は何もしません。（これは、GCC自体がビルドされているときに使用されます。）&lt;a href=&quot;spec-files#Spec-Files&quot;&gt;仕様ファイルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="653f7adb65f1f84d8d88241f8ddf357af1eec6c5" translate="yes" xml:space="preserve">
          <source>Print the compiler&amp;rsquo;s target machine (for example, &amp;lsquo;</source>
          <target state="translated">コンパイラのターゲットマシンを出力します（たとえば、 '</target>
        </trans-unit>
        <trans-unit id="2ea813d3d56acd15b7aece5721398087dd287686" translate="yes" xml:space="preserve">
          <source>Print the directory name corresponding to the multilib selected by any other switches present in the command line. This directory is supposed to exist in &lt;code&gt;GCC_EXEC_PREFIX&lt;/code&gt;.</source>
          <target state="translated">コマンドラインに存在する他のスイッチによって選択されたmultilibに対応するディレクトリ名を出力します。このディレクトリは &lt;code&gt;GCC_EXEC_PREFIX&lt;/code&gt; に存在することになっています。</target>
        </trans-unit>
        <trans-unit id="ce50f8d87d282115171e0d700a3119dab66c3b68" translate="yes" xml:space="preserve">
          <source>Print the full absolute name of the library file &lt;var&gt;library&lt;/var&gt; that would be used when linking&amp;mdash;and don&amp;rsquo;t do anything else. With this option, GCC does not compile or link anything; it just prints the file name.</source>
          <target state="translated">リンク時に使用されるライブラリファイル &lt;var&gt;library&lt;/var&gt; の完全な絶対名を出力します。それ以外は何もしません。このオプションを使用すると、GCCは何もコンパイルまたはリンクしません。ファイル名を出力するだけです。</target>
        </trans-unit>
        <trans-unit id="2d08bb037870c1271f6d358ce7e39175cb5c6846" translate="yes" xml:space="preserve">
          <source>Print the full compiler version&amp;mdash;and don&amp;rsquo;t do anything else. The output is always three numbers separated by dots, major, minor and patchlevel version.</source>
          <target state="translated">コンパイラの完全版を印刷し、それ以外は何もしません。出力は常に、ドット、メジャー、マイナー、パッチレベルのバージョンで区切られた3つの数値です。</target>
        </trans-unit>
        <trans-unit id="1ca2b71a9e603f4ac7cb5b1a49646b6058026d67" translate="yes" xml:space="preserve">
          <source>Print the label name with no punctuation.</source>
          <target state="translated">ラベル名を句読点なしで印刷します。</target>
        </trans-unit>
        <trans-unit id="ed777f4d8158d9a13715e5d83bcf213db1f9294b" translate="yes" xml:space="preserve">
          <source>Print the mapping from multilib directory names to compiler switches that enable them. The directory name is separated from the switches by &amp;lsquo;</source>
          <target state="translated">multilibディレクトリ名からそれらを有効にするコンパイラスイッチへのマッピングを出力します。ディレクトリ名は 'でスイッチから区切られます</target>
        </trans-unit>
        <trans-unit id="b73d8c440e7cc936048904194d2e85dfdb15e4ef" translate="yes" xml:space="preserve">
          <source>Print the name and the counter upper bound for all debug counters.</source>
          <target state="translated">すべてのデバッグ・カウンタの名前とカウンタの上限を表示します。</target>
        </trans-unit>
        <trans-unit id="c0f3c0f3c07600ebb279734d69613c90e09b8dbd" translate="yes" xml:space="preserve">
          <source>Print the name of each header file used, in addition to other normal activities. Each name is indented to show how deep in the &amp;lsquo;</source>
          <target state="translated">他の通常のアクティビティに加えて、使用される各ヘッダーファイルの名前を出力します。それぞれの名前は、「</target>
        </trans-unit>
        <trans-unit id="6ed5656674995024e55926271a786ceb4ef7c456" translate="yes" xml:space="preserve">
          <source>Print the name of the configured installation directory and a list of program and library directories &lt;code&gt;gcc&lt;/code&gt; searches&amp;mdash;and don&amp;rsquo;t do anything else.</source>
          <target state="translated">設定されたインストールディレクトリの名前と、 &lt;code&gt;gcc&lt;/code&gt; が検索するプログラムおよびライブラリディレクトリのリストを出力します。それ以外は何もしません。</target>
        </trans-unit>
        <trans-unit id="f46fbec7a98d95993ab6d7180f46da35309a305c" translate="yes" xml:space="preserve">
          <source>Print the opcode suffix for the size of the current integer operand (one of &lt;code&gt;b&lt;/code&gt;/&lt;code&gt;w&lt;/code&gt;/&lt;code&gt;l&lt;/code&gt;/&lt;code&gt;q&lt;/code&gt;).</source>
          <target state="translated">現在の整数オペランド（ &lt;code&gt;b&lt;/code&gt; / &lt;code&gt;w&lt;/code&gt; / &lt;code&gt;l&lt;/code&gt; / &lt;code&gt;q&lt;/code&gt; のいずれか）のサイズのオペコードサフィックスを出力します。</target>
        </trans-unit>
        <trans-unit id="908b57b33b152b029092573720dba6a435ce6981" translate="yes" xml:space="preserve">
          <source>Print the path to OS libraries for the selected multiarch, relative to some</source>
          <target state="translated">選択されたマルチアーキテクチャのOSライブラリへのパスを、いくつかの</target>
        </trans-unit>
        <trans-unit id="5d7b39edfb2bb437d185c29750569c1585d1f048" translate="yes" xml:space="preserve">
          <source>Print the path to OS libraries for the selected multilib, relative to some</source>
          <target state="translated">選択されたマルチリブのOSライブラリへのパスを、いくつかの</target>
        </trans-unit>
        <trans-unit id="b628c9460b668c00eb8e6efa459a4b3817bd622d" translate="yes" xml:space="preserve">
          <source>Print the suffix added to the target sysroot when searching for headers, or give an error if the compiler is not configured with such a suffix&amp;mdash;and don&amp;rsquo;t do anything else.</source>
          <target state="translated">ヘッダーを検索するときにターゲットのsysrootに追加されたサフィックスを出力します。または、コンパイラーがそのようなサフィックスで構成されていない場合はエラーを出し、それ以外は何もしません。</target>
        </trans-unit>
        <trans-unit id="08d61da80381f2354abfcc2dc79c82da27bcfcde" translate="yes" xml:space="preserve">
          <source>Print the target sysroot directory that is used during compilation. This is the target sysroot specified either at configure time or using the</source>
          <target state="translated">コンパイル時に使用されるターゲットsysrootディレクトリを表示します。これは configure 時に指定されたターゲット sysroot であるか、あるいは</target>
        </trans-unit>
        <trans-unit id="38b6abf4c9502a0a96a0b149ec935db21970d271" translate="yes" xml:space="preserve">
          <source>Print verbose information about optimizations, such as certain transformations, more detailed messages about decisions etc.</source>
          <target state="translated">最適化に関する詳細な情報(特定の変換や決定に関するより詳細なメッセージなど)を印刷します。</target>
        </trans-unit>
        <trans-unit id="a2dcd67e0df70361f07cda6c2139ad5ffd3e3acd" translate="yes" xml:space="preserve">
          <source>Print verbose informations related to basic blocks and arcs.</source>
          <target state="translated">基本的なブロックと円弧に関連する詳細な情報を印刷します。</target>
        </trans-unit>
        <trans-unit id="14433cdcc593ba724150c5d3b1d1053f1e28730c" translate="yes" xml:space="preserve">
          <source>Print warning messages for constructs found in system header files. Warnings from system headers are normally suppressed, on the assumption that they usually do not indicate real problems and would only make the compiler output harder to read. Using this command-line option tells GCC to emit warnings from system headers as if they occurred in user code. However, note that using</source>
          <target state="translated">システム・ヘッダ・ファイルで見つかったコンストラクタの警告メッセージを表示します。システムヘッダからの警告は通常、実際の問題を示すものではなく、コンパイラの出力を読みにくくするだけであるという前提で、抑制されています。このコマンドラインオプションを使用すると、システムヘッダからの警告があたかもユーザーコードの中で発生したかのように GCC が警告を発するようになります。しかし、このコマンドラインオプションを使用すると、システムヘッダからユーザーコードの中で発生したかのように警告を出すことができます。</target>
        </trans-unit>
        <trans-unit id="483c1121bee3466e31656e5ccaa4978d23e0bae2" translate="yes" xml:space="preserve">
          <source>Printable strings which are the name of the current function.</source>
          <target state="translated">現在の関数名である印刷可能な文字列。</target>
        </trans-unit>
        <trans-unit id="b65afc72a52b24c7e17f59c175dc14fa999357ad" translate="yes" xml:space="preserve">
          <source>Printing GCC configuration info, statistics, and debugging dumps.</source>
          <target state="translated">GCCの設定情報、統計情報、デバッグ用ダンプの印刷</target>
        </trans-unit>
        <trans-unit id="223d9059a8851156459124a029c324e8d582a617" translate="yes" xml:space="preserve">
          <source>Prints &lt;var&gt;string&lt;/var&gt; as a compiler message on compilation. The message is informational only, and is neither a compilation warning nor an error. Newlines can be included in the string by using the &amp;lsquo;</source>
          <target state="translated">印刷し &lt;var&gt;string&lt;/var&gt; 編集上のコンパイラのメッセージとして。このメッセージは情報提供のみを目的としており、コンパイルの警告でもエラーでもありません。'を使用すると、改行を文字列に含めることができます</target>
        </trans-unit>
        <trans-unit id="ba052fde4908541fb5507b0c0b8fa5890f691843" translate="yes" xml:space="preserve">
          <source>Prints a report with internal details on the workings of the link-time optimizer. The contents of this report vary from version to version. It is meant to be useful to GCC developers when processing object files in LTO mode (via</source>
          <target state="translated">リンクタイムオプティマイザの動作に関する内部の詳細をまとめたレポートを出力します。このレポートの内容はバージョンによって異なります。これはGCC開発者がLTOモードでオブジェクトファイルを処理する際に役立つことを意図しています。</target>
        </trans-unit>
        <trans-unit id="356b649f8a5b2eeac75d52d3fde25687e1baf75a" translate="yes" xml:space="preserve">
          <source>PrivateHeaders</source>
          <target state="translated">PrivateHeaders</target>
        </trans-unit>
        <trans-unit id="2ad988ff4da432b2bd8d59157204ad932c4a0a31" translate="yes" xml:space="preserve">
          <source>Probability (in percent) that C++ inline function with comdat visibility are shared across multiple compilation units.</source>
          <target state="translated">comdatが可視化されたC++インライン関数が複数のコンパイルユニットで共有される確率(%)。</target>
        </trans-unit>
        <trans-unit id="850fe6834f667b77b7e2ae19ee297ae3dd8470cf" translate="yes" xml:space="preserve">
          <source>Problems using GCC with other compilers, and with certain linkers, assemblers and debuggers.</source>
          <target state="translated">他のコンパイラや特定のリンカ、アセンブラ、デバッガでGCCを使用する際の問題。</target>
        </trans-unit>
        <trans-unit id="9c6060b3674c249414e5152b2230ab7030cef431" translate="yes" xml:space="preserve">
          <source>Process &lt;var&gt;file&lt;/var&gt; after the compiler reads in the standard</source>
          <target state="translated">コンパイラが標準を読み込んだ後に &lt;var&gt;file&lt;/var&gt; を処理する</target>
        </trans-unit>
        <trans-unit id="191842ffa605d8dc7494dd7b68d3c292602796ee" translate="yes" xml:space="preserve">
          <source>Process &lt;var&gt;file&lt;/var&gt; as if &lt;code&gt;#include &quot;file&quot;&lt;/code&gt; appeared as the first line of the primary source file. However, the first directory searched for &lt;var&gt;file&lt;/var&gt; is the preprocessor&amp;rsquo;s working directory &lt;em&gt;instead of&lt;/em&gt; the directory containing the main source file. If not found there, it is searched for in the remainder of the &lt;code&gt;#include &quot;&amp;hellip;&quot;&lt;/code&gt; search chain as normal.</source>
          <target state="translated">&lt;code&gt;#include &quot;file&quot;&lt;/code&gt; がプライマリソースファイルの最初の行にあるかのように &lt;var&gt;file&lt;/var&gt; を処理します。ただし、 &lt;var&gt;file&lt;/var&gt; 検索する最初のディレクトリは、メインソースファイルを含むディレクトリでは&lt;em&gt;なく&lt;/em&gt;、プリプロセッサの作業ディレクトリです。そこで見つからない場合は、通常どおり &lt;code&gt;#include &quot;&amp;hellip;&quot;&lt;/code&gt; 検索チェーンの残りの部分で検索されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6734f891a855dd7a87c6c0bfe8fa052810c7d184" translate="yes" xml:space="preserve">
          <source>Process the &lt;code&gt;asm&lt;/code&gt; spec. This is used to compute the switches to be passed to the assembler.</source>
          <target state="translated">&lt;code&gt;asm&lt;/code&gt; 仕様を処理します。これは、アセンブラに渡されるスイッチを計算するために使用されます。</target>
        </trans-unit>
        <trans-unit id="38573e03d0821a17e48df49ff92134f08123d891" translate="yes" xml:space="preserve">
          <source>Process the &lt;code&gt;asm_final&lt;/code&gt; spec. This is a spec string for passing switches to an assembler post-processor, if such a program is needed.</source>
          <target state="translated">&lt;code&gt;asm_final&lt;/code&gt; 仕様を処理します。これは、そのようなプログラムが必要な場合に、スイッチをアセンブラポストプロセッサに渡すための仕様文字列です。</target>
        </trans-unit>
        <trans-unit id="c24b1fe466497f7be4ea4b8ebfb1c796e853db45" translate="yes" xml:space="preserve">
          <source>Process the &lt;code&gt;cc1&lt;/code&gt; spec. This is used to construct the options to be passed to the actual C compiler (&lt;code&gt;cc1&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;cc1&lt;/code&gt; 仕様を処理します。これは、実際のCコンパイラ（ &lt;code&gt;cc1&lt;/code&gt; ）に渡されるオプションを構築するために使用されます。</target>
        </trans-unit>
        <trans-unit id="d6f17bdc842d5e5f40364c825949e630921d84fa" translate="yes" xml:space="preserve">
          <source>Process the &lt;code&gt;cc1plus&lt;/code&gt; spec. This is used to construct the options to be passed to the actual C++ compiler (&lt;code&gt;cc1plus&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;cc1plus&lt;/code&gt; 仕様を処理します。これは、実際のC ++コンパイラー（ &lt;code&gt;cc1plus&lt;/code&gt; ）に渡されるオプションを構成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="d5396bf6c9ae0325ba2157fe3770f71223e19ef3" translate="yes" xml:space="preserve">
          <source>Process the &lt;code&gt;cpp&lt;/code&gt; spec. This is used to construct the arguments to be passed to the C preprocessor.</source>
          <target state="translated">&lt;code&gt;cpp&lt;/code&gt; 仕様を処理します。これは、Cプリプロセッサに渡される引数を作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="8c1edb26c6deccdbec0712ee2d8d11b418fd33df" translate="yes" xml:space="preserve">
          <source>Process the &lt;code&gt;endfile&lt;/code&gt; spec. This is a spec string that specifies the last object files that are passed to the linker.</source>
          <target state="translated">&lt;code&gt;endfile&lt;/code&gt; 仕様を処理します。これは、リンカに渡される最後のオブジェクトファイルを指定するspec文字列です。</target>
        </trans-unit>
        <trans-unit id="a2255c514c878d9f84e377c0c64a134c8dce070b" translate="yes" xml:space="preserve">
          <source>Process the &lt;code&gt;lib&lt;/code&gt; spec. This is a spec string for deciding which libraries are included on the command line to the linker.</source>
          <target state="translated">&lt;code&gt;lib&lt;/code&gt; 仕様を処理します。これは、リンカへのコマンドラインに含まれるライブラリを決定するための仕様文字列です。</target>
        </trans-unit>
        <trans-unit id="21eaf027956ca118a365869c3f14adfd31ded482" translate="yes" xml:space="preserve">
          <source>Process the &lt;code&gt;libgcc&lt;/code&gt; spec. This is a spec string for deciding which GCC support library is included on the command line to the linker.</source>
          <target state="translated">&lt;code&gt;libgcc&lt;/code&gt; 仕様を処理します。これは、リンカへのコマンドラインに含まれるGCCサポートライブラリを決定するための仕様文字列です。</target>
        </trans-unit>
        <trans-unit id="4bace10c4995ad6f02604a1283502179576e6980" translate="yes" xml:space="preserve">
          <source>Process the &lt;code&gt;link&lt;/code&gt; spec. This is the spec for computing the command line passed to the linker. Typically it makes use of the &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;link&lt;/code&gt; 仕様を処理します。これは、リンカに渡されるコマンドラインを計算するための仕様です。通常は「</target>
        </trans-unit>
        <trans-unit id="fb8c4d2ece6f487a7a0a494e47ae351215a61c64" translate="yes" xml:space="preserve">
          <source>Process the &lt;code&gt;startfile&lt;/code&gt; spec. This is a spec for deciding which object files are the first ones passed to the linker. Typically this might be a file named</source>
          <target state="translated">&lt;code&gt;startfile&lt;/code&gt; 仕様を処理します。これは、リンカーに渡される最初のオブジェクトファイルを決定するための仕様です。通常、これは</target>
        </trans-unit>
        <trans-unit id="ec518e4b3e80564c09131d1ae87879a3f6d17ed9" translate="yes" xml:space="preserve">
          <source>Processors based on the AMD K8 core with x86-64 instruction set support, including the AMD Opteron, Athlon 64, and Athlon 64 FX processors. (This supersets MMX, SSE, SSE2, 3DNow!, enhanced 3DNow! and 64-bit instruction set extensions.)</source>
          <target state="translated">AMD Opteron、Athlon 64、Athlon 64 FXプロセッサを含む、x86-64命令セットをサポートするAMD K8コアをベースとしたプロセッサ。(これは、MMX、SSE、SSE2、3DNow!)</target>
        </trans-unit>
        <trans-unit id="62590afcaa5b3d90840b2e3dacaeab111c2a8e70" translate="yes" xml:space="preserve">
          <source>Produce a Mach-o bundle format file. See man ld(1) for more information.</source>
          <target state="translated">マッハオバンドル形式のファイルを生成します。詳細は man ld(1)を参照。</target>
        </trans-unit>
        <trans-unit id="9cedce134ad1d6e39e6ac28f5ea367bb4ac3cf33" translate="yes" xml:space="preserve">
          <source>Produce a core dump whenever an error occurs.</source>
          <target state="translated">エラーが発生したときにコアダンプを生成します。</target>
        </trans-unit>
        <trans-unit id="ba338fc5c81c60c18e5763d1fadce97ad1e61e6a" translate="yes" xml:space="preserve">
          <source>Produce a dynamically linked position independent executable on targets that support it. For predictable results, you must also specify the same set of options used for compilation (</source>
          <target state="translated">それをサポートするターゲット上で、動的にリンクされた位置に依存しない実行ファイルを生成します。予測可能な結果を得るためには、コンパイルに使用されるオプションと同じセットを指定する必要があります (</target>
        </trans-unit>
        <trans-unit id="6cb3358c313e561510d03d4f43da46e9f117e2c5" translate="yes" xml:space="preserve">
          <source>Produce a notes file that the &lt;code&gt;gcov&lt;/code&gt; code-coverage utility (see &lt;a href=&quot;gcov#Gcov&quot;&gt;&lt;code&gt;gcov&lt;/code&gt;&amp;mdash;a Test Coverage Program&lt;/a&gt;) can use to show program coverage. Each source file&amp;rsquo;s note file is called</source>
          <target state="translated">&lt;code&gt;gcov&lt;/code&gt; コードカバレッジユーティリティ（&lt;a href=&quot;gcov#Gcov&quot;&gt; &lt;code&gt;gcov&lt;/code&gt; &amp;mdash;テストカバレッジプログラムを&lt;/a&gt;参照）がプログラムカバレッジを表示するために使用できるメモファイルを作成します。各ソースファイルのノートファイルが呼び出されます</target>
        </trans-unit>
        <trans-unit id="8b280710ae96a8b8d8e74aa28a812b327df111b1" translate="yes" xml:space="preserve">
          <source>Produce a relocatable object as output. This is also known as partial linking.</source>
          <target state="translated">再配置可能なオブジェクトを出力として生成します。これはパーシャルリンクとも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="26aa77097b9a063e69af15c39e1ef1623a1a0dab" translate="yes" xml:space="preserve">
          <source>Produce a shared object which can then be linked with other objects to form an executable. Not all systems support this option. For predictable results, you must also specify the same set of options used for compilation (</source>
          <target state="translated">共有オブジェクトを生成し、他のオブジェクトとリンクして実行ファイルを形成することができます。すべてのシステムがこのオプションをサポートしているわけではありません。予測可能な結果を得るためには、コンパイルに使用されるオプションと同じセットを指定する必要があります (</target>
        </trans-unit>
        <trans-unit id="82a6e20338c2d2cb9f44077a8123f0423ba29a56" translate="yes" xml:space="preserve">
          <source>Produce a static position independent executable on targets that support it. A static position independent executable is similar to a static executable, but can be loaded at any address without a dynamic linker. For predictable results, you must also specify the same set of options used for compilation (</source>
          <target state="translated">サポートされているターゲット上で、静的な位置に依存しない実行ファイルを生成します。静的位置に依存しない実行ファイルは静的実行ファイルと似ていますが、動的リンカなしで任意のアドレスでロードすることができます。予測可能な結果を得るためには、コンパイルに使用されるのと同じオプションのセットを指定する必要があります (</target>
        </trans-unit>
        <trans-unit id="229bc991f84912dbb707cad7f57cc3c00958246f" translate="yes" xml:space="preserve">
          <source>Produce all the dumps listed above.</source>
          <target state="translated">上記のすべてのダンプをプロデュースしてください。</target>
        </trans-unit>
        <trans-unit id="c830b4e289b1d603d4b29ad3603ac7fe06258efc" translate="yes" xml:space="preserve">
          <source>Produce code optimized for the most common IA32/AMD64/EM64T processors. If you know the CPU on which your code will run, then you should use the corresponding</source>
          <target state="translated">最も一般的な IA32/AMD64/EM64T プロセッサに最適化されたコードを生成します。コードが実行されるCPUがわかっている場合は、対応する</target>
        </trans-unit>
        <trans-unit id="874624fe120d74004c74672b177571000bb8d675" translate="yes" xml:space="preserve">
          <source>Produce code optimized for the most current Intel processors, which are Haswell and Silvermont for this version of GCC. If you know the CPU on which your code will run, then you should use the corresponding</source>
          <target state="translated">GCC のこのバージョンでは、Haswell と Silvermont である最新の Intel プロセッサに最適化されたコードを生成します。コードが実行される CPU がわかっている場合は、対応する</target>
        </trans-unit>
        <trans-unit id="59d6dfa4b2545178e43d697c719e6e2891444e31" translate="yes" xml:space="preserve">
          <source>Produce code that conforms more closely to IBM XL compiler semantics when using AIX-compatible ABI. Pass floating-point arguments to prototyped functions beyond the register save area (RSA) on the stack in addition to argument FPRs. Do not assume that most significant double in 128-bit long double value is properly rounded when comparing values and converting to double. Use XL symbol names for long double support routines.</source>
          <target state="translated">AIX互換のABIを使用する場合、IBM XLコンパイラのセマンティクスにより近いコードを生成します。引数FPRに加えて、スタック上のレジスタ保存領域(RSA)を超えて浮動小数点引数をプロトタイピング関数に渡す。値を比較してdoubleに変換する際に、128ビットのlong double値の最上位のdoubleが適切に丸められていると仮定しないようにしました。ロングダブルサポートルーチンにはXLシンボル名を使用してください。</target>
        </trans-unit>
        <trans-unit id="70aa8e6a5aa6f95946582de4d3eebc24892a15cb" translate="yes" xml:space="preserve">
          <source>Produce compressed debug sections in DWARF format, if that is supported. If &lt;var&gt;type&lt;/var&gt; is not given, the default type depends on the capabilities of the assembler and linker used. &lt;var&gt;type&lt;/var&gt; may be one of &amp;lsquo;</source>
          <target state="translated">サポートされている場合は、圧縮されたデバッグセクションをDWARF形式で生成します。 &lt;var&gt;type&lt;/var&gt; が指定されていない場合、デフォルトのタイプは、使用されるアセンブラーおよびリンカーの機能によって異なります。 &lt;var&gt;type&lt;/var&gt; は次のいずれかです '</target>
        </trans-unit>
        <trans-unit id="d785038635c115caba3a3a72ca445989fe650fad" translate="yes" xml:space="preserve">
          <source>Produce debugging information for use by GDB. This means to use the most expressive format available (DWARF, stabs, or the native format if neither of those are supported), including GDB extensions if at all possible.</source>
          <target state="translated">GDB で使用するためのデバッグ情報を生成する。これは、可能であればGDBの拡張を含めて、利用可能な最も表現力のあるフォーマット(DWARF、stabs、またはどちらもサポートされていない場合はネイティブフォーマット)を使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="6e76e1882b03d7c105da1aec1b4b65497ef05063" translate="yes" xml:space="preserve">
          <source>Produce debugging information in Alpha/VMS debug format (if that is supported). This is the format used by DEBUG on Alpha/VMS systems.</source>
          <target state="translated">デバッグ情報をAlpha/VMSのデバッグフォーマットで出力します(サポートされている場合)。これは、Alpha/VMS システムで DEBUG が使用するフォーマットです。</target>
        </trans-unit>
        <trans-unit id="1c89bdfbe7ff24838a86019c90957a16af275605" translate="yes" xml:space="preserve">
          <source>Produce debugging information in DWARF format (if that is supported). The value of &lt;var&gt;version&lt;/var&gt; may be either 2, 3, 4 or 5; the default version for most targets is 4. DWARF Version 5 is only experimental.</source>
          <target state="translated">デバッグ情報をDWARF形式で生成します（サポートされている場合）。 &lt;var&gt;version&lt;/var&gt; の値は、2、3、4、または5のいずれかです。ほとんどのターゲットのデフォルトバージョンは4です。DWARFバージョン5は実験的なものです。</target>
        </trans-unit>
        <trans-unit id="21dc1c45a8426cfd7ea86f0ff5efd716fb463aa3" translate="yes" xml:space="preserve">
          <source>Produce debugging information in XCOFF format (if that is supported), using GNU extensions understood only by the GNU debugger (GDB). The use of these extensions is likely to make other debuggers crash or refuse to read the program, and may cause assemblers other than the GNU assembler (GAS) to fail with an error.</source>
          <target state="translated">GNU デバッガ (GDB)のみが理解できる GNU 拡張機能を使用して、(サポートされている場合)XCOFF 形式でデバッグ情報を生成してください。これらの拡張機能を使用すると、他のデバッガがクラッシュしたり、プログラムの読み込みを拒否したりする可能性があり、GNUアセンブラ(GAS)以外のアセンブラがエラーで失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="1c31c10a8554b29470b180047c3e117a364d7374" translate="yes" xml:space="preserve">
          <source>Produce debugging information in XCOFF format (if that is supported). This is the format used by the DBX debugger on IBM RS/6000 systems.</source>
          <target state="translated">デバッグ情報を XCOFF 形式で出力します (サポートされている場合)。これは、IBM RS/6000 システムの DBX デバッガで使用されるフォーマットです。</target>
        </trans-unit>
        <trans-unit id="a8732936178c413fac329a93443e75c2a16089d0" translate="yes" xml:space="preserve">
          <source>Produce debugging information in stabs format (if that is supported), for only symbols that are actually used.</source>
          <target state="translated">実際に使用されているシンボルのみを対象に、スタブ形式(サポートされている場合)でデバッグ情報を生成します。</target>
        </trans-unit>
        <trans-unit id="798e83cefb7f6ea7ef9a535cd3ace3be5a753318" translate="yes" xml:space="preserve">
          <source>Produce debugging information in stabs format (if that is supported), using GNU extensions understood only by the GNU debugger (GDB). The use of these extensions is likely to make other debuggers crash or refuse to read the program.</source>
          <target state="translated">GNU デバッガ (GDB)のみが理解できる GNU 拡張機能を使用して、スタブ形式 (サポートされている場合)でデバッグ情報を生成します。これらの拡張機能を使用すると、他のデバッガがクラッシュしたり、プログラムの読み込みを拒否したりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="e675746f0878092c9d5ac57cb51767441496530c" translate="yes" xml:space="preserve">
          <source>Produce debugging information in stabs format (if that is supported), without GDB extensions. This is the format used by DBX on most BSD systems. On MIPS, Alpha and System V Release 4 systems this option produces stabs debugging output that is not understood by DBX. On System V Release 4 systems this option requires the GNU assembler.</source>
          <target state="translated">デバッグ情報を stabs 形式 (サポートされている場合)で、GDB 拡張を使用せずに出力します。これはほとんどの BSD システムで DBX が使用している形式です。MIPS、Alpha、System V Release 4 システムでは、このオプションは DBX が理解できない stabs デバッグ出力を生成します。System V Release 4 システムでは、このオプションは GNU アセンブラを必要とします。</target>
        </trans-unit>
        <trans-unit id="2effb462b688a145487a6f229d8da95bd056d019" translate="yes" xml:space="preserve">
          <source>Produce debugging information in the operating system&amp;rsquo;s native format (stabs, COFF, XCOFF, or DWARF). GDB can work with this debugging information.</source>
          <target state="translated">オペレーティングシステムのネイティブ形式（スタブ、COFF、XCOFF、またはDWARF）でデバッグ情報を生成します。GDBはこのデバッグ情報を処理できます。</target>
        </trans-unit>
        <trans-unit id="1c30c7a4385f1b1870365ef3b00c760d3c2db0e3" translate="yes" xml:space="preserve">
          <source>Producing an AutoFDO profile data file requires running your program with the &lt;code&gt;perf&lt;/code&gt; utility on a supported GNU/Linux target system. For more information, see &lt;a href=&quot;https://perf.wiki.kernel.org/&quot;&gt;https://perf.wiki.kernel.org/&lt;/a&gt;.</source>
          <target state="translated">AutoFDOプロファイルデータファイルを作成するには、サポートされているGNU / Linuxターゲットシステムで &lt;code&gt;perf&lt;/code&gt; ユーティリティを使用してプログラムを実行する必要があります。詳細については、&lt;a href=&quot;https://perf.wiki.kernel.org/&quot;&gt;https：//perf.wiki.kernel.org/を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d16847b11987e862bb0226a6dbf93a65cab5ec8" translate="yes" xml:space="preserve">
          <source>Producing debuggable code.</source>
          <target state="translated">デバッグ可能なコードの生成</target>
        </trans-unit>
        <trans-unit id="66065140c4bd69f9a929457e5e1f5ddcadca4b33" translate="yes" xml:space="preserve">
          <source>Profiles collected using an instrumented binary for multi-threaded programs may be inconsistent due to missed counter updates. When this option is specified, GCC uses heuristics to correct or smooth out such inconsistencies. By default, GCC emits an error message when an inconsistent profile is detected.</source>
          <target state="translated">マルチスレッドプログラム用のインスツルメンテッドバイナリを使用して収集されたプロファイルは、カウンタの更新を見逃したために一貫性がない場合があります。このオプションを指定すると、GCC はヒューリスティックを使用してこのような不整合を修正または平滑化します。既定では、一貫性のないプロファイルが検出されると、GCC はエラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="215364611f5d742bb3cf5b6bc5f45d76aedfc488" translate="yes" xml:space="preserve">
          <source>Profiling run-time library reports various errors related to profile manipulation and profile saving. Errors are printed into standard error output or &amp;lsquo;</source>
          <target state="translated">プロファイリングランタイムライブラリは、プロファイルの操作と保存に関連するさまざまなエラーを報告します。エラーは標準エラー出力または '</target>
        </trans-unit>
        <trans-unit id="6d0967a146a9cd54e7f2cfdefd92dad89185e247" translate="yes" xml:space="preserve">
          <source>Profiling tools help you analyze your code&amp;rsquo;s performance. Using a profiler such as &lt;code&gt;gcov&lt;/code&gt; or &lt;code&gt;gprof&lt;/code&gt;, you can find out some basic performance statistics, such as:</source>
          <target state="translated">プロファイリングツールは、コードのパフォーマンスの分析に役立ちます。 &lt;code&gt;gcov&lt;/code&gt; や &lt;code&gt;gprof&lt;/code&gt; などのプロファイラーを使用すると、次のような基本的なパフォーマンス統計を確認できます。</target>
        </trans-unit>
        <trans-unit id="299845fbcd8fc09058a26974d7a1694c0d922e8b" translate="yes" xml:space="preserve">
          <source>Program Instrumentation Options</source>
          <target state="translated">プログラム計装オプション</target>
        </trans-unit>
        <trans-unit id="bce0913595ade4c39c8c03d2dbf27980dd7aa2d2" translate="yes" xml:space="preserve">
          <source>Program precision. This option is the default and means a trap handler can only identify which program caused a floating-point exception.</source>
          <target state="translated">プログラムの精度。このオプションはデフォルトで、トラップハンドラはどのプログラムが浮動小数点例外を発生させたかだけを識別できることを意味します。</target>
        </trans-unit>
        <trans-unit id="2e30a8e13f6fe61be9a133d07d1e5fc7f1ccd080" translate="yes" xml:space="preserve">
          <source>Programmers normally use conditionals on &lt;code&gt;__STDC__&lt;/code&gt; to ask whether it is safe to use certain features of ISO C, such as function prototypes or ISO token concatenation. Since plain &lt;code&gt;gcc&lt;/code&gt; supports all the features of ISO C, the correct answer to these questions is &amp;ldquo;yes&amp;rdquo;.</source>
          <target state="translated">プログラマは通常、 &lt;code&gt;__STDC__&lt;/code&gt; の条件文を使用して、関数プロトタイプやISOトークン連結など、ISO Cの特定の機能を使用しても安全かどうかを尋ねます。プレーンな &lt;code&gt;gcc&lt;/code&gt; はISO Cのすべての機能をサポートしているため、これらの質問に対する正しい答えは「はい」です。</target>
        </trans-unit>
        <trans-unit id="a0bd705cf04e9357c2ea73ca926ccbac6b893041" translate="yes" xml:space="preserve">
          <source>Programs that use preprocessing directives in the middle of macro arguments do not work with GCC. For example, a program like this will not work:</source>
          <target state="translated">マクロ引数の途中で前処理ディレクティブを使用するプログラムは、GCCでは動作しません。例えば、次のようなプログラムは動作しません。</target>
        </trans-unit>
        <trans-unit id="f2ac6418060115eaba540e4ea02f9d2bc08e06a3" translate="yes" xml:space="preserve">
          <source>Programs written to compile with C++-to-C translators get the value of &lt;code&gt;__STDC__&lt;/code&gt; that goes with the C compiler that is subsequently used. These programs must test &lt;code&gt;__STDC__&lt;/code&gt; to determine what kind of C preprocessor that compiler uses: whether they should concatenate tokens in the ISO C fashion or in the traditional fashion.</source>
          <target state="translated">C ++からCへのトランスレーターでコンパイルするように作成されたプログラムは、後で使用されるCコンパイラーに対応する &lt;code&gt;__STDC__&lt;/code&gt; の値を取得します。これらのプログラムは &lt;code&gt;__STDC__&lt;/code&gt; をテストして、コンパイラーが使用するCプリプロセッサーの種類（ISO C方式または従来の方式でトークンを連結する必要があるかどうか）を判別する必要があります。</target>
        </trans-unit>
        <trans-unit id="5a9cb5a82aeec8a68235c0ced346ccbfb76bb12a" translate="yes" xml:space="preserve">
          <source>Propagate information about uses of a value up the definition chain in order to simplify the definitions. For example, this pass strips sign operations if the sign of a value never matters. The flag is enabled by default at</source>
          <target state="translated">定義を単純化するために、値の使用に関する情報を定義チェーンの上位に伝えます。例えば、値の符号が重要でない場合、このパスは符号操作を削除します。このフラグはデフォルトでは</target>
        </trans-unit>
        <trans-unit id="fa7dd81f88cb5c4139f9dbe0c73fbba733aa4a44" translate="yes" xml:space="preserve">
          <source>Protected visibility is like default visibility except that it indicates that references within the defining module bind to the definition in that module. That is, the declared entity cannot be overridden by another module.</source>
          <target state="translated">保護された可視性は、定義モジュール内の参照がそのモジュール内の定義にバインドされることを示すことを除いて、デフォルトの可視性と似ています。つまり、宣言されたエンティティは、他のモジュールによってオーバーライドすることはできません。</target>
        </trans-unit>
        <trans-unit id="af2b8481cf932700a1d1fe584409316090685bcd" translate="yes" xml:space="preserve">
          <source>Prototype declarations and old-style definitions.</source>
          <target state="translated">プロトタイプの宣言と旧式の定義。</target>
        </trans-unit>
        <trans-unit id="281df885a6152b0fc99de98c97f687a7bacdb5ad" translate="yes" xml:space="preserve">
          <source>Provide a user-defined function to handle NMI exception.</source>
          <target state="translated">NMI 例外を処理するためのユーザー定義関数を提供します。</target>
        </trans-unit>
        <trans-unit id="a507043f2b5ce9798e6d052565a1ba8fcc61bd09" translate="yes" xml:space="preserve">
          <source>Provide a user-defined function to handle warm reset exception.</source>
          <target state="translated">ウォームリセット例外を処理するためのユーザー定義関数を提供します。</target>
        </trans-unit>
        <trans-unit id="ba0e24e32262e9027ddf344b0bbb6826b30533e8" translate="yes" xml:space="preserve">
          <source>Providing multiple strings as arguments separated by commas to specify multiple options is equivalent to separating the option suffixes with a comma (&amp;lsquo;</source>
          <target state="translated">複数のオプションを指定するために、コンマで区切られた引数として複数の文字列を提供することは、オプションの接尾辞をコンマ（ '</target>
        </trans-unit>
        <trans-unit id="c6e467f9fef2c6ec37e713ef7ce97be04a79d3ee" translate="yes" xml:space="preserve">
          <source>Pseudo type</source>
          <target state="translated">擬似型</target>
        </trans-unit>
        <trans-unit id="2ec15755e92f7ec74b89a276482fe0679fe6a677" translate="yes" xml:space="preserve">
          <source>Put all data, not just small objects, into the sections reserved for small data, and use addressing relative to the &lt;code&gt;B14&lt;/code&gt; register to access them.</source>
          <target state="translated">小さなオブジェクトだけでなく、すべてのデータを小さなデータ用に予約されたセクションに入れ、 &lt;code&gt;B14&lt;/code&gt; レジスタに関連するアドレス指定を使用してそれらにアクセスします。</target>
        </trans-unit>
        <trans-unit id="14d82a1bb301488807b0804cf1d8b4aed130dcd1" translate="yes" xml:space="preserve">
          <source>Put definitions of externally-visible data in a small data section if that data is no bigger than &lt;var&gt;num&lt;/var&gt; bytes. GCC can then generate more efficient accesses to the data; see</source>
          <target state="translated">データが &lt;var&gt;num&lt;/var&gt; バイト以下の場合、外部から見えるデータの定義を小さなデータセクションに入れます。その後、GCCはデータへのより効率的なアクセスを生成できます。見る</target>
        </trans-unit>
        <trans-unit id="ee1f4e4ed1983ff05857b16e6d5463e63d52f87d" translate="yes" xml:space="preserve">
          <source>Put definitions of externally-visible data in a small data section if that data is no bigger than &lt;var&gt;num&lt;/var&gt; bytes. The default value of &lt;var&gt;num&lt;/var&gt; is 4 for any ARC configuration, or 8 when we have double load/store operations.</source>
          <target state="translated">データが &lt;var&gt;num&lt;/var&gt; バイト以下の場合、外部から見えるデータの定義を小さなデータセクションに入れます。 &lt;var&gt;num&lt;/var&gt; のデフォルト値は、ARC構成の場合は4、二重のロード/ストア操作がある場合は8です。</target>
        </trans-unit>
        <trans-unit id="dd10aa9229d46223067d4529eb087ca1d5b4bb37" translate="yes" xml:space="preserve">
          <source>Put extra commentary information in the generated assembly code to make it more readable. This option is generally only of use to those who actually need to read the generated assembly code (perhaps while debugging the compiler itself).</source>
          <target state="translated">生成されたアセンブリ・コードを読みやすくするために、余分なコメント情報を入れます。このオプションは一般的に、生成されたアセンブリコードを実際に読む必要がある人にのみ使用されます (おそらくコンパイラ自体をデバッグしている間に)。</target>
        </trans-unit>
        <trans-unit id="4efa75b425ee3379e46be03951b8fed10951f423" translate="yes" xml:space="preserve">
          <source>Put global and static data smaller than &lt;var&gt;n&lt;/var&gt; bytes into a special section (on some targets).</source>
          <target state="translated">&lt;var&gt;n&lt;/var&gt; バイト未満のグローバルデータと静的データを（一部のターゲットで）特別なセクションに配置します。</target>
        </trans-unit>
        <trans-unit id="803e4d47363b74310533dbbacf9cf5e406c33858" translate="yes" xml:space="preserve">
          <source>Put global and static objects less than or equal to &lt;var&gt;num&lt;/var&gt; bytes into the small data or BSS sections instead of the normal data or BSS sections. The default value of &lt;var&gt;num&lt;/var&gt; is 8.</source>
          <target state="translated">&lt;var&gt;num&lt;/var&gt; バイト以下のグローバルオブジェクトと静的オブジェクトを、通常のデータまたはBSSセクションではなく、小さなデータまたはBSSセクションに配置します。 &lt;var&gt;num&lt;/var&gt; のデフォルト値は8です。</target>
        </trans-unit>
        <trans-unit id="325fbb1dff6b2bc48b832b2c0837a0d4aa50c625" translate="yes" xml:space="preserve">
          <source>Put global and static objects less than or equal to &lt;var&gt;num&lt;/var&gt; bytes into the small data or BSS sections instead of the normal data or BSS sections. The default value of &lt;var&gt;num&lt;/var&gt; is 8. The</source>
          <target state="translated">&lt;var&gt;num&lt;/var&gt; バイト以下のグローバルオブジェクトと静的オブジェクトを、通常のデータまたはBSSセクションではなく、小さなデータまたはBSSセクションに配置します。 &lt;var&gt;num&lt;/var&gt; のデフォルト値は8です。</target>
        </trans-unit>
        <trans-unit id="2845f96bd365594a3cd3c2c2ff97b86e1f179d72" translate="yes" xml:space="preserve">
          <source>Put read-only objects in the &lt;code&gt;.sdata&lt;/code&gt; section as well. This is the default.</source>
          <target state="translated">読み取り専用オブジェクトも &lt;code&gt;.sdata&lt;/code&gt; セクションに配置します。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="aaee271d332c564c26a565ff260fd11119341a45" translate="yes" xml:space="preserve">
          <source>Put small global and static data in the &lt;code&gt;.neardata&lt;/code&gt; section, which is pointed to by register &lt;code&gt;B14&lt;/code&gt;. Put small uninitialized global and static data in the &lt;code&gt;.bss&lt;/code&gt; section, which is adjacent to the &lt;code&gt;.neardata&lt;/code&gt; section. Put small read-only data into the &lt;code&gt;.rodata&lt;/code&gt; section. The corresponding sections used for large pieces of data are &lt;code&gt;.fardata&lt;/code&gt;, &lt;code&gt;.far&lt;/code&gt; and &lt;code&gt;.const&lt;/code&gt;.</source>
          <target state="translated">中に小さなグローバルと静的データを入れ &lt;code&gt;.neardata&lt;/code&gt; レジスタによって指されるセクション、 &lt;code&gt;B14&lt;/code&gt; 。小さな初期化されていないグローバルデータと静的データを &lt;code&gt;.neardata&lt;/code&gt; セクションに隣接する &lt;code&gt;.bss&lt;/code&gt; セクションに配置します。小さな読み取り専用データを &lt;code&gt;.rodata&lt;/code&gt; セクションに配置します。大きなデータに使用される対応するセクションは、 &lt;code&gt;.fardata&lt;/code&gt; 、 &lt;code&gt;.far&lt;/code&gt; 、 &lt;code&gt;.const&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f2399d291f04f4ceb6a5d4d94e2129947be998a8" translate="yes" xml:space="preserve">
          <source>Put small global and static data in the small data area, and generate special instructions to reference them.</source>
          <target state="translated">小規模なグローバルデータと静的データを小データ領域に入れて、それらを参照するための特別な命令を生成します。</target>
        </trans-unit>
        <trans-unit id="d62b1c870b332795e163f0098650ca88ceaf5c00" translate="yes" xml:space="preserve">
          <source>Put small global and static data in the small data area, but do not generate special code to reference them.</source>
          <target state="translated">小規模なグローバルデータと静的データを小データ領域に入れますが、それらを参照するための特別なコードは生成しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="f427abf1ae046d699cd5f6fec41113c62676ed1b" translate="yes" xml:space="preserve">
          <source>Put static or global variables whose size is &lt;var&gt;n&lt;/var&gt; bytes or less into the first 32 kilobytes of memory.</source>
          <target state="translated">サイズが &lt;var&gt;n&lt;/var&gt; バイト以下の静的変数またはグローバル変数をメモリの最初の32キロバイトに配置します。</target>
        </trans-unit>
        <trans-unit id="c3a89106111c4929799b74f87481c16b67c9438e" translate="yes" xml:space="preserve">
          <source>Put static or global variables whose size is &lt;var&gt;n&lt;/var&gt; bytes or less into the small data area that register &lt;code&gt;gp&lt;/code&gt; points to. The small data area can hold up to 64 kilobytes.</source>
          <target state="translated">サイズが &lt;var&gt;n&lt;/var&gt; バイト以下の静的変数またはグローバル変数を、レジスタ &lt;code&gt;gp&lt;/code&gt; が指す小さなデータ領域に配置します。小さなデータ領域は、最大64キロバイトを保持できます。</target>
        </trans-unit>
        <trans-unit id="90b5e26c9c08b39bd895b34bb6ae576000e2eb1e" translate="yes" xml:space="preserve">
          <source>Put static or global variables whose size is &lt;var&gt;n&lt;/var&gt; bytes or less into the tiny data area that register &lt;code&gt;ep&lt;/code&gt; points to. The tiny data area can hold up to 256 bytes in total (128 bytes for byte references).</source>
          <target state="translated">サイズが &lt;var&gt;n&lt;/var&gt; バイト以下の静的変数またはグローバル変数を、レジスタ &lt;code&gt;ep&lt;/code&gt; が指す小さなデータ領域に配置します。小さなデータ領域には、合計で最大256バイトを保持できます（バイト参照の場合は128バイト）。</target>
        </trans-unit>
        <trans-unit id="fb78a5b9af064b32c202bfb144d8f6d597bc15ce" translate="yes" xml:space="preserve">
          <source>Put uninitialized &lt;code&gt;const&lt;/code&gt; variables in the read-only data section. This option is only meaningful in conjunction with</source>
          <target state="translated">初期化されていない &lt;code&gt;const&lt;/code&gt; 変数を読み取り専用データセクションに配置します。このオプションは、</target>
        </trans-unit>
        <trans-unit id="15266f7e96e613e475613699a09898779a9cf785" translate="yes" xml:space="preserve">
          <source>Putting statements and declarations inside expressions.</source>
          <target state="translated">ステートメントや宣言を式の中に入れる</target>
        </trans-unit>
        <trans-unit id="c3156e00d3c2588c639e0d3cf6821258b05761c7" translate="yes" xml:space="preserve">
          <source>Q</source>
          <target state="translated">Q</target>
        </trans-unit>
        <trans-unit id="2fb1858154779be9095d34bc86481decea9864b5" translate="yes" xml:space="preserve">
          <source>Qualifiers</source>
          <target state="translated">Qualifiers</target>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="51d0c108a00931316d1d9196895d716cd8591259" translate="yes" xml:space="preserve">
          <source>R10</source>
          <target state="translated">R10</target>
        </trans-unit>
        <trans-unit id="a8c8c0f94567fb54e5baecfbbe7a22ad9ffe90a8" translate="yes" xml:space="preserve">
          <source>R9</source>
          <target state="translated">R9</target>
        </trans-unit>
        <trans-unit id="4ed9df973cbf299009483fc686300ba83d456ff4" translate="yes" xml:space="preserve">
          <source>RAM larger than 64 KiB is not supported by GCC for AVR targets. If you use inline assembler to read from locations outside the 16-bit address range and change one of the &lt;code&gt;RAMP&lt;/code&gt; registers, you must reset it to zero after the access.</source>
          <target state="translated">64 KiBより大きいRAMは、AVRターゲットのGCCではサポートされていません。インラインアセンブラを使用して16ビットアドレス範囲外の場所から読み取り、 &lt;code&gt;RAMP&lt;/code&gt; レジスタの1つを変更する場合は、アクセス後にそれをゼロにリセットする必要があります。</target>
        </trans-unit>
        <trans-unit id="cdc0f19760327ced87ad8aee74afab31fe72c4fe" translate="yes" xml:space="preserve">
          <source>REG_BR_PROB</source>
          <target state="translated">REG_BR_PROB</target>
        </trans-unit>
        <trans-unit id="f440f2eda03ec65b7157428e14ccfd6f3d0babc7" translate="yes" xml:space="preserve">
          <source>RISC-V&amp;mdash;</source>
          <target state="translated">RISC-V&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="647dca504e5b45f643aed4172949afe845cda414" translate="yes" xml:space="preserve">
          <source>RL78&amp;mdash;</source>
          <target state="translated">RL78&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="575f4784d61d9c2b0ea79d87650e89f3ea480cc7" translate="yes" xml:space="preserve">
          <source>RTL if-conversion tries to remove conditional branches around a block and replace them with conditionally executed instructions. This parameter gives the maximum number of instructions in a block which should be considered for if-conversion. The compiler will also use other heuristics to decide whether if-conversion is likely to be profitable.</source>
          <target state="translated">RTL if-conversionは、ブロックの周囲の条件分岐を削除し、条件付きで実行される命令に置き換えようとします。このパラメータは、 if-conversion が考慮すべきブロック内の命令の最大数を指定します。コンパイラは他のヒューリスティックを使用して、if-conversionが有益であるかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="8ffe843fed02ef77ab2e92d415d12da14c23bcab" translate="yes" xml:space="preserve">
          <source>RTL if-conversion will try to remove conditional branches around a block and replace them with conditionally executed instructions. These parameters give the maximum permissible cost for the sequence that would be generated by if-conversion depending on whether the branch is statically determined to be predictable or not. The units for this parameter are the same as those for the GCC internal seq_cost metric. The compiler will try to provide a reasonable default for this parameter using the BRANCH_COST target macro.</source>
          <target state="translated">RTL if-conversionは、ブロックの周りの条件分岐を削除し、条件付きで実行される命令に置き換えようとします。これらのパラメータは、分岐が予測可能であると静的に決定されているかどうかに応じて、if-conversionによって生成されるシーケンスの最大許容コストを与えます。このパラメータの単位はGCC内部のseq_costメトリックと同じです。コンパイラは、BRANCH_COSTターゲットマクロを使用して、このパラメータに適切なデフォルトを提供しようとします。</target>
        </trans-unit>
        <trans-unit id="b61bd2259b081aeab3036fb11de5495fed60c76b" translate="yes" xml:space="preserve">
          <source>RTM Function: int &lt;strong id=&quot;index-_005fxtest&quot;&gt;_xtest&lt;/strong&gt; ()</source>
          <target state="translated">RTM関数：int &lt;strong id=&quot;index-_005fxtest&quot;&gt;_xtest&lt;/strong&gt;（）</target>
        </trans-unit>
        <trans-unit id="ee01945fd30707cfbb63a1376c78162c28d86d32" translate="yes" xml:space="preserve">
          <source>RTM Function: unsigned &lt;strong id=&quot;index-_005fxbegin&quot;&gt;_xbegin&lt;/strong&gt; ()</source>
          <target state="translated">RTM関数：符号なし&lt;strong id=&quot;index-_005fxbegin&quot;&gt;_xbegin&lt;/strong&gt;（）</target>
        </trans-unit>
        <trans-unit id="e8ff66f739eabb13f3e3a702095e9beb4ceb7801" translate="yes" xml:space="preserve">
          <source>RTM Function: void &lt;strong id=&quot;index-_005fxabort&quot;&gt;_xabort&lt;/strong&gt; (status)</source>
          <target state="translated">RTM関数：void &lt;strong id=&quot;index-_005fxabort&quot;&gt;_xabort&lt;/strong&gt;（ステータス）</target>
        </trans-unit>
        <trans-unit id="9b706c796609ffc332644946cbe8681890d7242e" translate="yes" xml:space="preserve">
          <source>RTM Function: void &lt;strong id=&quot;index-_005fxend&quot;&gt;_xend&lt;/strong&gt; ()</source>
          <target state="translated">RTM関数：void &lt;strong id=&quot;index-_005fxend&quot;&gt;_xend&lt;/strong&gt;（）</target>
        </trans-unit>
        <trans-unit id="828c78a41071d9949c1d88a38a7d2dcd59e5c5f3" translate="yes" xml:space="preserve">
          <source>RX&amp;mdash;</source>
          <target state="translated">RX&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="d7b79d74a6226f5fa551619ad3ed2cd4c064e1e4" translate="yes" xml:space="preserve">
          <source>RX200</source>
          <target state="translated">RX200</target>
        </trans-unit>
        <trans-unit id="6b0bdb50e97b5f7896cc50adf9568df594becf5a" translate="yes" xml:space="preserve">
          <source>RX600</source>
          <target state="translated">RX600</target>
        </trans-unit>
        <trans-unit id="e9b5640a7d2c4fd0e5ab9dc9d14a004b2b5bb4b9" translate="yes" xml:space="preserve">
          <source>RX610</source>
          <target state="translated">RX610</target>
        </trans-unit>
        <trans-unit id="75a59f2d35f8f89735f1550d0fb20ce1794b174c" translate="yes" xml:space="preserve">
          <source>Range 24 to 31, rotatert:SI 8 to 1 expressed as rotate</source>
          <target state="translated">範囲24~31、rotatert:SI 8~1はrotateで表されます。</target>
        </trans-unit>
        <trans-unit id="03a9b8383aae047c9acd6c38cefaa42394133afe" translate="yes" xml:space="preserve">
          <source>Range 8 to 15, rotatert:HI 8 to 1 expressed as rotate</source>
          <target state="translated">範囲8~15、rotatert:HI 8~1で表されます。</target>
        </trans-unit>
        <trans-unit id="b09e126e8976753eddde68fb3b2daae37eaf29a0" translate="yes" xml:space="preserve">
          <source>Range of signed numbers that don&amp;rsquo;t fit in 16 bits</source>
          <target state="translated">16ビットに収まらない符号付き数値の範囲</target>
        </trans-unit>
        <trans-unit id="3f3d7a48648a100cea8d8857ee93983cdfde6d2e" translate="yes" xml:space="preserve">
          <source>Rather than allocating fixed registers via clobbers to provide scratch registers for an &lt;code&gt;asm&lt;/code&gt; statement, an alternative is to define a variable and make it an early-clobber output as with &lt;code&gt;a2&lt;/code&gt; and &lt;code&gt;a3&lt;/code&gt; in the example below. This gives the compiler register allocator more freedom. You can also define a variable and make it an output tied to an input as with &lt;code&gt;a0&lt;/code&gt; and &lt;code&gt;a1&lt;/code&gt;, tied respectively to &lt;code&gt;ap&lt;/code&gt; and &lt;code&gt;lda&lt;/code&gt;. Of course, with tied outputs your &lt;code&gt;asm&lt;/code&gt; can&amp;rsquo;t use the input value after modifying the output register since they are one and the same register. What&amp;rsquo;s more, if you omit the early-clobber on the output, it is possible that GCC might allocate the same register to another of the inputs if GCC could prove they had the same value on entry to the &lt;code&gt;asm&lt;/code&gt;. This is why &lt;code&gt;a1&lt;/code&gt; has an early-clobber. Its tied input, &lt;code&gt;lda&lt;/code&gt; might conceivably be known to have the value 16 and without an early-clobber share the same register as &lt;code&gt;%11&lt;/code&gt;. On the other hand, &lt;code&gt;ap&lt;/code&gt; can&amp;rsquo;t be the same as any of the other inputs, so an early-clobber on &lt;code&gt;a0&lt;/code&gt; is not needed. It is also not desirable in this case. An early-clobber on &lt;code&gt;a0&lt;/code&gt; would cause GCC to allocate a separate register for the &lt;code&gt;&quot;m&quot; (*(const double (*)[]) ap)&lt;/code&gt; input. Note that tying an input to an output is the way to set up an initialized temporary register modified by an &lt;code&gt;asm&lt;/code&gt; statement. An input not tied to an output is assumed by GCC to be unchanged, for example &lt;code&gt;&quot;b&quot; (16)&lt;/code&gt; below sets up &lt;code&gt;%11&lt;/code&gt; to 16, and GCC might use that register in following code if the value 16 happened to be needed. You can even use a normal &lt;code&gt;asm&lt;/code&gt; output for a scratch if all inputs that might share the same register are consumed before the scratch is used. The VSX registers clobbered by the &lt;code&gt;asm&lt;/code&gt; statement could have used this technique except for GCC&amp;rsquo;s limit on the number of &lt;code&gt;asm&lt;/code&gt; parameters.</source>
          <target state="translated">&lt;code&gt;asm&lt;/code&gt; ステートメントにスクラッチレジスタを提供するために、クロバーを介して固定レジスターを割り当てる代わりに、以下の例の &lt;code&gt;a2&lt;/code&gt; および &lt;code&gt;a3&lt;/code&gt; のように、変数を定義して初期クローバー出力にする方法もあります。これにより、コンパイラレジスタアロケータの自由度が増します。変数を定義して、 &lt;code&gt;a0&lt;/code&gt; および &lt;code&gt;a1&lt;/code&gt; のように入力に結び付けられた出力を、それぞれ &lt;code&gt;ap&lt;/code&gt; および &lt;code&gt;lda&lt;/code&gt; に結び付けることもできます。もちろん、tieされた出力であなたの &lt;code&gt;asm&lt;/code&gt; 同一のレジスタであるため、出力レジスタを変更した後の入力値は使用できません。さらに、出力の初期クローバーを省略した場合、GCCが &lt;code&gt;asm&lt;/code&gt; へのエントリで同じ値を持っていることをGCCが証明できれば、GCCが同じレジスタを別の入力に割り当てる可能性があります。これが、 &lt;code&gt;a1&lt;/code&gt; に初期クローバーがある理由です。その関連付けられた入力である &lt;code&gt;lda&lt;/code&gt; は、値が16であることが知られている可能性があり、早期クローバーがなければ &lt;code&gt;%11&lt;/code&gt; と同じレジスタを共有します。一方、 &lt;code&gt;ap&lt;/code&gt; は他の入力と同じにすることはできないため、 &lt;code&gt;a0&lt;/code&gt; の初期クローバーは必要ありません。この場合も望ましくありません。 &lt;code&gt;a0&lt;/code&gt; の初期の強盗GCCは、 &lt;code&gt;&quot;m&quot; (*(const double (*)[]) ap)&lt;/code&gt; 入力に個別のレジスタを割り当てます。入力を出力に &lt;code&gt;asm&lt;/code&gt; ことは、asmステートメントによって変更された初期化済み一時レジスターをセットアップする方法であることに注意してください。出力に関連付けられていない入力は、GCCによって変更されないと想定されています。たとえば、以下の &lt;code&gt;&quot;b&quot; (16)&lt;/code&gt; は &lt;code&gt;%11&lt;/code&gt; を16に設定します。値16が必要になった場合、GCCは次のコードでそのレジスターを使用します。スクラッチが使用される前に同じレジスタを共有する可能性のあるすべての入力が消費される場合は、通常の &lt;code&gt;asm&lt;/code&gt; 出力をスクラッチに使用することもできます。 &lt;code&gt;asm&lt;/code&gt; ステートメントによって取り除かれたVSXレジスタは、GCCの数の制限を除いて、この手法を使用できた可能性があります。 &lt;code&gt;asm&lt;/code&gt; パラメータ。</target>
        </trans-unit>
        <trans-unit id="3d48db591bff1043a0d8039e8ccf5e783e97e6a2" translate="yes" xml:space="preserve">
          <source>Rcq</source>
          <target state="translated">Rcq</target>
        </trans-unit>
        <trans-unit id="521f78e80ba6f8863e858ff98f48391a0330829a" translate="yes" xml:space="preserve">
          <source>Rcw</source>
          <target state="translated">Rcw</target>
        </trans-unit>
        <trans-unit id="8b8331348b2521f417469192e2b07ba6bae059df" translate="yes" xml:space="preserve">
          <source>Re-run common subexpression elimination after loop optimizations are performed.</source>
          <target state="translated">ループ最適化が実行された後、共通の副表現除去を再実行します。</target>
        </trans-unit>
        <trans-unit id="47e55523da5572635c20ab856b76afcfa5225486" translate="yes" xml:space="preserve">
          <source>Read command-line options from &lt;var&gt;file&lt;/var&gt;. The options read are inserted in place of the original @&lt;var&gt;file&lt;/var&gt; option. If &lt;var&gt;file&lt;/var&gt; does not exist, or cannot be read, then the option will be treated literally, and not removed.</source>
          <target state="translated">&lt;var&gt;file&lt;/var&gt; からコマンドラインオプションを読み取ります。読み込まれたオプションは、元の@ &lt;var&gt;file&lt;/var&gt; オプションの代わりに挿入されます。場合は &lt;var&gt;file&lt;/var&gt; 存在しないか、読み取ることができない、そのオプションは文字通り扱われ、削除されません。</target>
        </trans-unit>
        <trans-unit id="ee0598dcd3bf6f16e79ad5d502ed56654313a31d" translate="yes" xml:space="preserve">
          <source>Read the most or least (respectively) significant half of X and store it in &lt;var&gt;dest&lt;/var&gt;.</source>
          <target state="translated">Xの最大または最小（それぞれ）の有効な半分を読み取り、それを &lt;var&gt;dest&lt;/var&gt; に格納します。</target>
        </trans-unit>
        <trans-unit id="7a126a185b0d0082578e19ef3a5daeade792a6f6" translate="yes" xml:space="preserve">
          <source>Read the specified profile directory and rewrite to a new directory.</source>
          <target state="translated">指定したプロファイルディレクトリを読み込み、新しいディレクトリに書き換えます。</target>
        </trans-unit>
        <trans-unit id="1324c749c5caee9deabe2d1d46a7919f7a43e96a" translate="yes" xml:space="preserve">
          <source>Read the value of Y and store it into &lt;var&gt;dest&lt;/var&gt;.</source>
          <target state="translated">Yの値を読み取り、 &lt;var&gt;dest&lt;/var&gt; に格納します。</target>
        </trans-unit>
        <trans-unit id="2e0e1585c9e916aa0dcd09633e5b74f9bffa47f5" translate="yes" xml:space="preserve">
          <source>Reading across the 64 KiB section boundary of the &lt;code&gt;__flash&lt;/code&gt; or &lt;code&gt;__flash&lt;var&gt;N&lt;/var&gt;&lt;/code&gt; address spaces shows undefined behavior. The only address space that supports reading across the 64 KiB flash segment boundaries is &lt;code&gt;__memx&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__flash&lt;/code&gt; または &lt;code&gt;__flash&lt;var&gt;N&lt;/var&gt;&lt;/code&gt; アドレス空間の64 KiBセクションの境界を越えて読み取ると、未定義の動作を示します。64 KiBフラッシュセグメントの境界を越えた読み取りをサポートする唯一のアドレス空間は、 &lt;code&gt;__memx&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cc9977fd47f39524c5c4335bb2cc07440e340402" translate="yes" xml:space="preserve">
          <source>Real C type</source>
          <target state="translated">リアルCタイプ</target>
        </trans-unit>
        <trans-unit id="b01207b1c7506846e0bfacee12ec2af4714dfc01" translate="yes" xml:space="preserve">
          <source>Realign the stack at entry. On the x86, the</source>
          <target state="translated">エントリでスタックを再配置します。x86では</target>
        </trans-unit>
        <trans-unit id="f8d3df1ed60f0155cff1c249d5d8c961d1ce5254" translate="yes" xml:space="preserve">
          <source>Recall that a compound statement is a sequence of statements surrounded by braces; in this construct, parentheses go around the braces. For example:</source>
          <target state="translated">複合文は、中括弧で囲まれた一連の文であることを思い出してください。この構文では、括弧は中括弧の周りを囲みます。この構文では、括弧が中括弧の周りを囲んでいます。</target>
        </trans-unit>
        <trans-unit id="f625feb6c1f19cc48c16f0f10876aa7bd3ff669d" translate="yes" xml:space="preserve">
          <source>Recognize EUCJP characters.</source>
          <target state="translated">EUCJPの文字を認識します。</target>
        </trans-unit>
        <trans-unit id="7c01853b77bfeb03d9b038e23e661cf8dc08fff1" translate="yes" xml:space="preserve">
          <source>Recognize JIS characters.</source>
          <target state="translated">JIS文字を認識します。</target>
        </trans-unit>
        <trans-unit id="794f97acfad850c064b040b0a84cf0cc856becc0" translate="yes" xml:space="preserve">
          <source>Recognize SJIS characters.</source>
          <target state="translated">SJISの文字を認識します。</target>
        </trans-unit>
        <trans-unit id="27cc26e0565438fda7c152cefdfd1b3f962fba55" translate="yes" xml:space="preserve">
          <source>Record the time consumed by infrastructure parts separately for each pass.</source>
          <target state="translated">インフラ部品で消費した時間をパスごとに分けて記録する。</target>
        </trans-unit>
        <trans-unit id="ecb4684dd74316d7840b5ce3326149ec45004d04" translate="yes" xml:space="preserve">
          <source>Recursive inlining is profitable only for function having deep recursion in average and can hurt for function having little recursion depth by increasing the prologue size or complexity of function body to other optimizers.</source>
          <target state="translated">再帰的なインライン化は、平均的に深い再帰を持つ関数に対してのみ有益であり、関数本体のプロローグのサイズや複雑さを他のオプティマイザーに増加させることで、再帰の深さがほとんどない関数に対して苦痛を与えることができます。</target>
        </trans-unit>
        <trans-unit id="6d1dad90db7b45d2f00d2160233fcf301ebfc624" translate="yes" xml:space="preserve">
          <source>Reduce compilation time and make debugging produce the expected results. This is the default.</source>
          <target state="translated">コンパイル時間を短縮し、デバッグで期待通りの結果が得られるようにします。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="6aec65068eeb8842d5e5c7061649e6408aeb8661" translate="yes" xml:space="preserve">
          <source>Reduce stack alignment on call sites if possible. Enabled by default.</source>
          <target state="translated">可能であれば、コールサイトのスタックアラインメントを減らします。デフォルトでは有効になっています。</target>
        </trans-unit>
        <trans-unit id="7ae7930fe556a2ec3059d5f1104e863261afd8f6" translate="yes" xml:space="preserve">
          <source>Reduce target register priority for r0..r3 / r12..r15.</source>
          <target state="translated">r0...r3/r12...r15 のターゲット・レジスタの優先度を下げます。</target>
        </trans-unit>
        <trans-unit id="1cb5fa5caf504f40df07a2cdb9428651f086d6df" translate="yes" xml:space="preserve">
          <source>Reduced-precision reciprocal (sequence step 1) (&lt;code&gt;recip1.&lt;var&gt;fmt&lt;/var&gt;&lt;/code&gt;).</source>
          <target state="translated">縮小精度逆数（シーケンスステップ1）（ &lt;code&gt;recip1.&lt;var&gt;fmt&lt;/var&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6b50a97d7c07e8e5ac702942c6a7c44137ba2c8f" translate="yes" xml:space="preserve">
          <source>Reduced-precision reciprocal (sequence step 2) (&lt;code&gt;recip2.&lt;var&gt;fmt&lt;/var&gt;&lt;/code&gt;).</source>
          <target state="translated">縮小精度逆数（シーケンスステップ2）（ &lt;code&gt;recip2.&lt;var&gt;fmt&lt;/var&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="311a85e245f0ddc53f02f904b2b964a9654bf632" translate="yes" xml:space="preserve">
          <source>Reduced-precision reciprocal square root (sequence step 1) (&lt;code&gt;rsqrt1.&lt;var&gt;fmt&lt;/var&gt;&lt;/code&gt;).</source>
          <target state="translated">縮小精度逆数平方根（シーケンスステップ1）（ &lt;code&gt;rsqrt1.&lt;var&gt;fmt&lt;/var&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c3ac4a799c5d637561c73e206b8150513e28619c" translate="yes" xml:space="preserve">
          <source>Reduced-precision reciprocal square root (sequence step 2) (&lt;code&gt;rsqrt2.&lt;var&gt;fmt&lt;/var&gt;&lt;/code&gt;).</source>
          <target state="translated">縮小精度逆数平方根（シーケンスステップ2）（ &lt;code&gt;rsqrt2.&lt;var&gt;fmt&lt;/var&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="12e0462f32071ff4845c302840bb4153c2588c2c" translate="yes" xml:space="preserve">
          <source>Reduction add (&lt;code&gt;addr.ps&lt;/code&gt;).</source>
          <target state="translated">削減加算（ &lt;code&gt;addr.ps&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e0d244d016314e418eaa174fb12395086f569f16" translate="yes" xml:space="preserve">
          <source>Reduction multiply (&lt;code&gt;mulr.ps&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;mulr.ps&lt;/code&gt; 削減（mulr.ps）。</target>
        </trans-unit>
        <trans-unit id="0bb3aef854538033314f9b9054c89b202a7a46e1" translate="yes" xml:space="preserve">
          <source>Reentrant functions disable interrupts upon entry and enable them upon exit. Reentrant functions cannot also have the &lt;code&gt;naked&lt;/code&gt; or &lt;code&gt;critical&lt;/code&gt; attributes. They can have the &lt;code&gt;interrupt&lt;/code&gt; attribute.</source>
          <target state="translated">再入可能関数は、開始時に割り込みを無効にし、終了時に割り込みを有効にします。再入可能な関数は、 &lt;code&gt;naked&lt;/code&gt; または &lt;code&gt;critical&lt;/code&gt; 属性を持つこともできません。それらは &lt;code&gt;interrupt&lt;/code&gt; 属性を持つことができます。</target>
        </trans-unit>
        <trans-unit id="572b0899e79b2675d4a7828ac0598f6989f2d4b9" translate="yes" xml:space="preserve">
          <source>References to input, output, and goto operands in the assembler template of extended &lt;code&gt;asm&lt;/code&gt; statements can use modifiers to affect the way the operands are formatted in the code output to the assembler. For example, the following code uses the &amp;lsquo;</source>
          <target state="translated">拡張 &lt;code&gt;asm&lt;/code&gt; ステートメントのアセンブラテンプレート内の入力、出力、およびgotoオペランドへの参照は、修飾子を使用して、アセンブラへのコード出力でのオペランドのフォーマット方法に影響を与えることができます。たとえば、次のコードは '</target>
        </trans-unit>
        <trans-unit id="b1fccad55d1cd1e1deefbf2127cfdfd61810f2dd" translate="yes" xml:space="preserve">
          <source>Refrain from adding &lt;code&gt;.ident&lt;/code&gt; directives to the output file (this is the default).</source>
          <target state="translated">&lt;code&gt;.ident&lt;/code&gt; ディレクティブを出力ファイルに追加しないでください（これがデフォルトです）。</target>
        </trans-unit>
        <trans-unit id="3001d626a710b17789a0092c43744394347ea069" translate="yes" xml:space="preserve">
          <source>Register &lt;code&gt;$3&lt;/code&gt;. Do not use this constraint in new code; it is retained only for compatibility with glibc.</source>
          <target state="translated">&lt;code&gt;$3&lt;/code&gt; 登録します。新しいコードではこの制約を使用しないでください。glibcとの互換性のためにのみ保持されます。</target>
        </trans-unit>
        <trans-unit id="3567485f11d416ff7283001d94e2df1c5725db16" translate="yes" xml:space="preserve">
          <source>Register &lt;code&gt;r1&lt;/code&gt;</source>
          <target state="translated">レジスタ &lt;code&gt;r1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9eb9c84600134957bc0bafd88d9264e6fe1a9153" translate="yes" xml:space="preserve">
          <source>Register &lt;code&gt;r2&lt;/code&gt;</source>
          <target state="translated">レジスター &lt;code&gt;r2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09b82e9bbfda6d5a540f8220132caa45617cfba9" translate="yes" xml:space="preserve">
          <source>Register &lt;code&gt;r3&lt;/code&gt;</source>
          <target state="translated">レジスター &lt;code&gt;r3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6bc4e57659e02dd40d1f5e77c49bbd03b18fc44" translate="yes" xml:space="preserve">
          <source>Register B14 (aka DP).</source>
          <target state="translated">レジスタB14(別名DP)。</target>
        </trans-unit>
        <trans-unit id="533a97d446a8a5b93bc162a4324dc4171fb8ddfe" translate="yes" xml:space="preserve">
          <source>Register R12.</source>
          <target state="translated">R12を登録します。</target>
        </trans-unit>
        <trans-unit id="f1c1d776b68a0b27c9825edf576eb52eaa0cc6ec" translate="yes" xml:space="preserve">
          <source>Register R13.</source>
          <target state="translated">R13を登録します。</target>
        </trans-unit>
        <trans-unit id="1052cf107720625d376ff935f6870b8efc3827a7" translate="yes" xml:space="preserve">
          <source>Register destructors for objects with static storage duration with the &lt;code&gt;__cxa_atexit&lt;/code&gt; function rather than the &lt;code&gt;atexit&lt;/code&gt; function. This option is required for fully standards-compliant handling of static destructors, but only works if your C library supports &lt;code&gt;__cxa_atexit&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;atexit&lt;/code&gt; 関数ではなく &lt;code&gt;__cxa_atexit&lt;/code&gt; 関数を使用して、静的ストレージ期間を持つオブジェクトのデストラクタを登録します。このオプションは、完全に標準に準拠した静的デストラクタの処理に必要ですが、Cライブラリが &lt;code&gt;__cxa_atexit&lt;/code&gt; をサポートしている場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="7c42270e4a24dd0bfbae7acb6e659ccc0acf3f22" translate="yes" xml:space="preserve">
          <source>Register file A (A0&amp;ndash;A31).</source>
          <target state="translated">ファイルA（A0〜A31）を登録します。</target>
        </trans-unit>
        <trans-unit id="bdb218bd85a72cf91961a4baf75015f2c537debf" translate="yes" xml:space="preserve">
          <source>Register file A, excluding predicate registers (A3&amp;ndash;A31, plus A0 if not C64X or higher).</source>
          <target state="translated">述語レジスタ（A3〜A31、およびC64X以上でない場合はA0）を除く、レジスタファイルA。</target>
        </trans-unit>
        <trans-unit id="1742f2e75d608f80fedddd8e77336383043c25ae" translate="yes" xml:space="preserve">
          <source>Register file B (B0&amp;ndash;B31).</source>
          <target state="translated">ファイルB（B0〜B31）を登録します。</target>
        </trans-unit>
        <trans-unit id="1444488f53becce76ff486bdb18d0cd8356cea74" translate="yes" xml:space="preserve">
          <source>Register file B, excluding predicate registers (B3&amp;ndash;B31).</source>
          <target state="translated">述語レジスタ（B3〜B31）を除く、レジスタファイルB。</target>
        </trans-unit>
        <trans-unit id="a59bf4be334c96a8db1601f16454148488cc2943" translate="yes" xml:space="preserve">
          <source>Register from r0 to r11 (all 16-bit registers)</source>
          <target state="translated">r0~r11までのレジスタ(全16ビットレジスタ</target>
        </trans-unit>
        <trans-unit id="480c1a3005b1f1617a3032a48dc7e43063c42c0c" translate="yes" xml:space="preserve">
          <source>Register from r12 to r15 (all 32-bit registers)</source>
          <target state="translated">r12~r15までのレジスタ(全32ビットレジスタ</target>
        </trans-unit>
        <trans-unit id="2b3c2b112d10d3044f325ab4493e523def957e04" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;ACCG_REGS&lt;/code&gt; (&lt;code&gt;accg0&lt;/code&gt; to &lt;code&gt;accg7&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;ACCG_REGS&lt;/code&gt; （ &lt;code&gt;accg0&lt;/code&gt; から &lt;code&gt;accg7&lt;/code&gt; ）に登録します。</target>
        </trans-unit>
        <trans-unit id="7da0fdc2c3630cb8c657242c1c4ac92c07fc0b4b" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;ACC_REGS&lt;/code&gt; (&lt;code&gt;acc0&lt;/code&gt; to &lt;code&gt;acc7&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;ACC_REGS&lt;/code&gt; （ &lt;code&gt;acc0&lt;/code&gt; から &lt;code&gt;acc7&lt;/code&gt; ）に登録します。</target>
        </trans-unit>
        <trans-unit id="8d01bcabe56f9176a78fd1c7f42ce5bc52571e38" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;CC_REGS&lt;/code&gt; (&lt;code&gt;fcc0&lt;/code&gt; to &lt;code&gt;fcc3&lt;/code&gt; and &lt;code&gt;icc0&lt;/code&gt; to &lt;code&gt;icc3&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;CC_REGS&lt;/code&gt; （ &lt;code&gt;fcc0&lt;/code&gt; から &lt;code&gt;fcc3&lt;/code&gt; および &lt;code&gt;icc0&lt;/code&gt; から &lt;code&gt;icc3&lt;/code&gt; ）に登録します。</target>
        </trans-unit>
        <trans-unit id="60401b0367db40fb60a9cde0e01a905072f4adce" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;CR_REGS&lt;/code&gt; (&lt;code&gt;cc0&lt;/code&gt; to &lt;code&gt;cc7&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;CR_REGS&lt;/code&gt; （ &lt;code&gt;cc0&lt;/code&gt; から &lt;code&gt;cc7&lt;/code&gt; ）に登録します。</target>
        </trans-unit>
        <trans-unit id="59a99c246bcf173869c670543e28aefb7eaef202" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;EVEN_ACC_REGS&lt;/code&gt; (&lt;code&gt;acc0&lt;/code&gt; to &lt;code&gt;acc7&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;EVEN_ACC_REGS&lt;/code&gt; （ &lt;code&gt;acc0&lt;/code&gt; から &lt;code&gt;acc7&lt;/code&gt; ）に登録します。</target>
        </trans-unit>
        <trans-unit id="dd4f2434b1ee5dd0a73e566a4353d3b841b3be02" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;EVEN_REGS&lt;/code&gt; (&lt;code&gt;gr0&lt;/code&gt; to &lt;code&gt;gr63&lt;/code&gt;). Odd registers are excluded not in the class but through the use of a machine mode larger than 4 bytes.</source>
          <target state="translated">クラス &lt;code&gt;EVEN_REGS&lt;/code&gt; （ &lt;code&gt;gr0&lt;/code&gt; から &lt;code&gt;gr63&lt;/code&gt; ）に登録します。奇数のレジスターはクラスではなく、4バイトより大きいマシンモードを使用して除外されます。</target>
        </trans-unit>
        <trans-unit id="7684a3097ebf46a01e56e039fccba7728030eae8" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;FCC_REGS&lt;/code&gt; (&lt;code&gt;fcc0&lt;/code&gt; to &lt;code&gt;fcc3&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;FCC_REGS&lt;/code&gt; （ &lt;code&gt;fcc0&lt;/code&gt; から &lt;code&gt;fcc3&lt;/code&gt; ）に登録します。</target>
        </trans-unit>
        <trans-unit id="5924427c40695e1f7e3fa17f28b85c901bb780f0" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;FCR_REGS&lt;/code&gt; (&lt;code&gt;cc0&lt;/code&gt; to &lt;code&gt;cc3&lt;/code&gt;).</source>
          <target state="translated">クラスに登録し &lt;code&gt;FCR_REGS&lt;/code&gt; （ &lt;code&gt;cc0&lt;/code&gt; に &lt;code&gt;cc3&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="65d5a8ed496d976776f700862d585c95cb234cc1" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;FEVEN_REGS&lt;/code&gt; (&lt;code&gt;fr0&lt;/code&gt; to &lt;code&gt;fr63&lt;/code&gt;). Odd registers are excluded not in the class but through the use of a machine mode larger than 4 bytes.</source>
          <target state="translated">クラス &lt;code&gt;FEVEN_REGS&lt;/code&gt; （ &lt;code&gt;fr0&lt;/code&gt; から &lt;code&gt;fr63&lt;/code&gt; ）に登録します。奇数のレジスターはクラスではなく、4バイトより大きいマシンモードを使用して除外されます。</target>
        </trans-unit>
        <trans-unit id="253b27d108e605b64087cadbee528e59c1f7a79f" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;FPR_REGS&lt;/code&gt; (&lt;code&gt;fr0&lt;/code&gt; to &lt;code&gt;fr63&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;FPR_REGS&lt;/code&gt; に登録します（ &lt;code&gt;fr0&lt;/code&gt; から &lt;code&gt;fr63&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1a9a5917a9352a9b774047a78e988238f033f90b" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;GPR_REGS&lt;/code&gt; (&lt;code&gt;gr0&lt;/code&gt; to &lt;code&gt;gr63&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;GPR_REGS&lt;/code&gt; に登録します（ &lt;code&gt;gr0&lt;/code&gt; から &lt;code&gt;gr63&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="de6724c19d1c6001733a2c683050c56b6b1affbc" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;ICC_REGS&lt;/code&gt; (&lt;code&gt;icc0&lt;/code&gt; to &lt;code&gt;icc3&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;ICC_REGS&lt;/code&gt; （ &lt;code&gt;icc0&lt;/code&gt; から &lt;code&gt;icc3&lt;/code&gt; ）に登録します。</target>
        </trans-unit>
        <trans-unit id="0ca423076130e7e6489d4f896160ff5e22f77c62" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;ICR_REGS&lt;/code&gt; (&lt;code&gt;cc4&lt;/code&gt; to &lt;code&gt;cc7&lt;/code&gt;).</source>
          <target state="translated">クラスに登録し &lt;code&gt;ICR_REGS&lt;/code&gt; （ &lt;code&gt;cc4&lt;/code&gt; に &lt;code&gt;cc7&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="148c41bd7ab7376f2591378add35d9d26efd9177" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;LR_REG&lt;/code&gt; (the &lt;code&gt;lr&lt;/code&gt; register).</source>
          <target state="translated">クラス &lt;code&gt;LR_REG&lt;/code&gt; （ &lt;code&gt;lr&lt;/code&gt; レジスタ）に登録します。</target>
        </trans-unit>
        <trans-unit id="a34d537ea831c75f947b48a3453e17d88afefaf4" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;QUAD_ACC_REGS&lt;/code&gt; (&lt;code&gt;acc0&lt;/code&gt; to &lt;code&gt;acc7&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;QUAD_ACC_REGS&lt;/code&gt; （ &lt;code&gt;acc0&lt;/code&gt; から &lt;code&gt;acc7&lt;/code&gt; ）に登録します。</target>
        </trans-unit>
        <trans-unit id="510647219824fa78b9f755cf92ce845481e8c212" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;QUAD_FPR_REGS&lt;/code&gt; (&lt;code&gt;fr0&lt;/code&gt; to &lt;code&gt;fr63&lt;/code&gt;). Register numbers not divisible by 4 are excluded not in the class but through the use of a machine mode larger than 8 bytes.</source>
          <target state="translated">クラスに登録し &lt;code&gt;QUAD_FPR_REGS&lt;/code&gt; （ &lt;code&gt;fr0&lt;/code&gt; へ &lt;code&gt;fr63&lt;/code&gt; ）。4で割り切れないレジスタ番号は、クラスではなく、8バイトより大きいマシンモードを使用して除外されます。</target>
        </trans-unit>
        <trans-unit id="b2a1adf092bc540d607f8adfe316ebd0e23d6e5f" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;QUAD_REGS&lt;/code&gt; (&lt;code&gt;gr2&lt;/code&gt; to &lt;code&gt;gr63&lt;/code&gt;). Register numbers not divisible by 4 are excluded not in the class but through the use of a machine mode larger than 8 bytes.</source>
          <target state="translated">クラス &lt;code&gt;QUAD_REGS&lt;/code&gt; （ &lt;code&gt;gr2&lt;/code&gt; から &lt;code&gt;gr63&lt;/code&gt; ）に登録します。4で割り切れないレジスタ番号は、クラスではなく、8バイトより大きいマシンモードを使用して除外されます。</target>
        </trans-unit>
        <trans-unit id="a9cbfc355864e59c43680683d72198de7278ba3e" translate="yes" xml:space="preserve">
          <source>Register in the class &lt;code&gt;SPR_REGS&lt;/code&gt; (&lt;code&gt;lcr&lt;/code&gt; and &lt;code&gt;lr&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;SPR_REGS&lt;/code&gt; （ &lt;code&gt;lcr&lt;/code&gt; および &lt;code&gt;lr&lt;/code&gt; ）に登録します。</target>
        </trans-unit>
        <trans-unit id="769f1e93ba84a3021586676ebf74ba9a35bdb862" translate="yes" xml:space="preserve">
          <source>Register offset addressing</source>
          <target state="translated">レジスタオフセットアドレッシング</target>
        </trans-unit>
        <trans-unit id="c5f75dbc07c39bcb48abaeacbb855b7e10bf33e2" translate="yes" xml:space="preserve">
          <source>Register pair X (r27:r26)</source>
          <target state="translated">レジスタペアX(r27:r26)</target>
        </trans-unit>
        <trans-unit id="3b43e753bc9f5bc9b63c0e261a0e69e87d9b370f" translate="yes" xml:space="preserve">
          <source>Register pair Y (r29:r28)</source>
          <target state="translated">レジスタペアY(r29:r28)</target>
        </trans-unit>
        <trans-unit id="8e0fa3a292eb7a9cffe0fac8e87c12161eb6cf21" translate="yes" xml:space="preserve">
          <source>Register pair Z (r31:r30)</source>
          <target state="translated">レジスタペアZ(r31:r30)</target>
        </trans-unit>
        <trans-unit id="025dbba0464975dfda3cfdcc9c21e3f5a63bca74" translate="yes" xml:space="preserve">
          <source>Register r0.</source>
          <target state="translated">レジスタr0。</target>
        </trans-unit>
        <trans-unit id="2559f54d5a47f8d70d102e65a5685a865132ce80" translate="yes" xml:space="preserve">
          <source>Register r1.</source>
          <target state="translated">レジスタr1。</target>
        </trans-unit>
        <trans-unit id="c9b7b7b870bca848747bbe900b4af27c68299883" translate="yes" xml:space="preserve">
          <source>Register r2.</source>
          <target state="translated">レジスタr2。</target>
        </trans-unit>
        <trans-unit id="c7b019e71df945fd75260cb8b739e27afabcb89d" translate="yes" xml:space="preserve">
          <source>Register r8.</source>
          <target state="translated">r8を登録します。</target>
        </trans-unit>
        <trans-unit id="cfa7fdd3bd0b34e806122b121b229661568a7a14" translate="yes" xml:space="preserve">
          <source>Registers are a scarce resource on most systems and allowing the compiler to manage their usage usually results in the best code. However, under special circumstances it can make sense to reserve some globally. For example this may be useful in programs such as programming language interpreters that have a couple of global variables that are accessed very often.</source>
          <target state="translated">レジスタはほとんどのシステムで不足しているリソースであり、コンパイラがその使用を管理することで、通常は最良のコードが得られます。しかし、特別な状況下では、グローバルにいくつかのレジスタを予約しておくことが理にかなっている場合があります。例えば、プログラミング言語のインタープリタのように、頻繁にアクセスされるグローバル変数をいくつか持っているようなプログラムでは、これは有用かもしれません。</target>
        </trans-unit>
        <trans-unit id="9258e74b890dc26f006130edaeedc1c986bbea52" translate="yes" xml:space="preserve">
          <source>Registers chat can hold 16 bit values, including all control registers.</source>
          <target state="translated">レジスタ チャットは、すべての制御レジスタを含む16ビットの値を保持することができます。</target>
        </trans-unit>
        <trans-unit id="756cb0ca2dcd3e9a9e7bd75807e28976eb525101" translate="yes" xml:space="preserve">
          <source>Registers from r0 to r14 (registers without stack pointer)</source>
          <target state="translated">r0~r14までのレジスタ(スタックポインタを持たないレジスタ)</target>
        </trans-unit>
        <trans-unit id="02e3921f37f882ea8d9c75adce25fafdbe8692d7" translate="yes" xml:space="preserve">
          <source>Registers from r0 to r15</source>
          <target state="translated">r0~r15までのレジスタ</target>
        </trans-unit>
        <trans-unit id="f9f658d92ebc98d15c63ce46e1732d5659102ede" translate="yes" xml:space="preserve">
          <source>Registers from r16 to r23</source>
          <target state="translated">r16からr23までのレジスタ</target>
        </trans-unit>
        <trans-unit id="079d6f1b242baa1c7f0618d4f05a489251d1825b" translate="yes" xml:space="preserve">
          <source>Registers from r16 to r31</source>
          <target state="translated">r16からr31までのレジスタ</target>
        </trans-unit>
        <trans-unit id="489ac96c6b638b89a7b8ba2debb3353857a6eef8" translate="yes" xml:space="preserve">
          <source>Registers from r24 to r31. These registers can be used in &amp;lsquo;</source>
          <target state="translated">r24からr31までのレジスタ。これらのレジスタは 'で使用できます。</target>
        </trans-unit>
        <trans-unit id="eeebb5d987a8e9e62e6d397774e01593c964d34f" translate="yes" xml:space="preserve">
          <source>Registers r0 and r1.</source>
          <target state="translated">レジスタ r0,r1</target>
        </trans-unit>
        <trans-unit id="8300b61d2af50cc4dabd9f53915430a576a4f4a2" translate="yes" xml:space="preserve">
          <source>Registers r0 through r7.</source>
          <target state="translated">r0~r7 のレジスタです。</target>
        </trans-unit>
        <trans-unit id="1bdabc9e342c28d99561b12e0784162f57cd5ff1" translate="yes" xml:space="preserve">
          <source>Registers r8 and r9.</source>
          <target state="translated">r8 と r9 をレジスタに登録します。</target>
        </trans-unit>
        <trans-unit id="46b53a197a4a621fbf89bc41aa1be3ce75327950" translate="yes" xml:space="preserve">
          <source>Registers that can be used with displacements ($a0, $a1, $sb).</source>
          <target state="translated">置換($a0,$a1,$sb)で使用できるレジスタ。</target>
        </trans-unit>
        <trans-unit id="d44cddb1d6b35d0af8eee84e19b037c303c54a0d" translate="yes" xml:space="preserve">
          <source>Registers that can hold 16 bit values.</source>
          <target state="translated">16 ビットの値を保持できるレジスタです。</target>
        </trans-unit>
        <trans-unit id="10c61cbba1cb11bc1f9e9cef337e27161929a237" translate="yes" xml:space="preserve">
          <source>Registers that can hold 32 bit values.</source>
          <target state="translated">32 ビットの値を保持できるレジスタです。</target>
        </trans-unit>
        <trans-unit id="55f1a6e3e272896d0899d9ea18b33ee00c7e2940" translate="yes" xml:space="preserve">
          <source>Registers that can hold QI values.</source>
          <target state="translated">QI値を保持できるレジスタ。</target>
        </trans-unit>
        <trans-unit id="cf58d717e47b85a4f429025faf79666cce971c58" translate="yes" xml:space="preserve">
          <source>Registers that can hold pointers (16 bit registers for r8c, m16c; 24 bit registers for m32cm, m32c).</source>
          <target state="translated">ポインタを保持できるレジスタ(r8c、m16cは16ビットレジスタ、m32cm、m32cは24ビットレジスタ)。</target>
        </trans-unit>
        <trans-unit id="caf84b9bb95c9665246bc340b9cdec9d8e62178c" translate="yes" xml:space="preserve">
          <source>Registers usable as base-regs of memory addresses in ARCompact 16-bit memory instructions: &lt;code&gt;r0&lt;/code&gt;-&lt;code&gt;r3&lt;/code&gt;, &lt;code&gt;r12&lt;/code&gt;-&lt;code&gt;r15&lt;/code&gt;, &lt;code&gt;sp&lt;/code&gt;. This constraint can only match when the</source>
          <target state="translated">レジスタはARCompact 16ビットのメモリ命令のメモリアドレスのベースREGSとして使用できる： &lt;code&gt;r0&lt;/code&gt; - &lt;code&gt;r3&lt;/code&gt; 、 &lt;code&gt;r12&lt;/code&gt; - &lt;code&gt;r15&lt;/code&gt; 、 &lt;code&gt;sp&lt;/code&gt; 。この制約は、</target>
        </trans-unit>
        <trans-unit id="a35caf683ee22a98f2498aca90a5baa9b5082d4e" translate="yes" xml:space="preserve">
          <source>Registers usable in ARCompact 16-bit instructions: &lt;code&gt;r0&lt;/code&gt;-&lt;code&gt;r3&lt;/code&gt;, &lt;code&gt;r12&lt;/code&gt;-&lt;code&gt;r15&lt;/code&gt;. This constraint can only match when the</source>
          <target state="translated">ARCompact 16ビット命令で使用可能なレジスタ： &lt;code&gt;r0&lt;/code&gt; - &lt;code&gt;r3&lt;/code&gt; 、 &lt;code&gt;r12&lt;/code&gt; - &lt;code&gt;r15&lt;/code&gt; 。この制約は、</target>
        </trans-unit>
        <trans-unit id="19e1e0518e942309076618fad593fdad104075c6" translate="yes" xml:space="preserve">
          <source>Registers used for circular buffering, i.e. I, B, or L registers.</source>
          <target state="translated">サーキュラーバッファリングに使用されるレジスタ、すなわちI、B、またはL レジスタ。</target>
        </trans-unit>
        <trans-unit id="77ea1d61c29764c1f5fd6dc887e5e48e1ad31364" translate="yes" xml:space="preserve">
          <source>Regrettable things we cannot change, but not quite bugs.</source>
          <target state="translated">変えられない残念なものは変えられないが、バグとまではいかない。</target>
        </trans-unit>
        <trans-unit id="d425b70c81109fac404a0fdbe25847f8affed9e1" translate="yes" xml:space="preserve">
          <source>Relaxed Memory Order</source>
          <target state="translated">緩和された記憶順序</target>
        </trans-unit>
        <trans-unit id="dcf0a37891b53a0ada46be28abcde8419a66138e" translate="yes" xml:space="preserve">
          <source>Relaxing must be turned on if linker stubs are needed, see the section on &lt;code&gt;EIND&lt;/code&gt; and linker stubs below.</source>
          <target state="translated">&lt;code&gt;EIND&lt;/code&gt; が必要な場合は、リラックスをオンにする必要があります。以下のEINDおよびリンカスタブのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="d7020f448aaf8aacc8b4d63537e375e865fff9d8" translate="yes" xml:space="preserve">
          <source>Remarks</source>
          <target state="translated">Remarks</target>
        </trans-unit>
        <trans-unit id="bd65f12268c9cd14645e3d325d57c4b3512607f7" translate="yes" xml:space="preserve">
          <source>Remove all occurrences of &lt;code&gt;-S&lt;/code&gt; from the command line. Note&amp;mdash;this command is position dependent. &amp;lsquo;</source>
          <target state="translated">コマンドラインから &lt;code&gt;-S&lt;/code&gt; をすべて削除します。注-このコマンドは位置に依存します。」</target>
        </trans-unit>
        <trans-unit id="5b528b4646554331e8a3d8f764cb6e6d2423c0b0" translate="yes" xml:space="preserve">
          <source>Remove all symbol table and relocation information from the executable.</source>
          <target state="translated">実行ファイルからすべてのシンボルテーブルとリロケーション情報を削除します。</target>
        </trans-unit>
        <trans-unit id="9042eb2108ad4333137f668f9d20f239e0364cbc" translate="yes" xml:space="preserve">
          <source>Rename the spec string &lt;var&gt;old_name&lt;/var&gt; to &lt;var&gt;new_name&lt;/var&gt;.</source>
          <target state="translated">仕様文字列 &lt;var&gt;old_name&lt;/var&gt; の名前をnew_nameに &lt;var&gt;new_name&lt;/var&gt; ます。</target>
        </trans-unit>
        <trans-unit id="a57f3dbe9a8b794ea15e657f613c3dee256ad6e3" translate="yes" xml:space="preserve">
          <source>Reorder basic blocks in the compiled function in order to reduce number of taken branches and improve code locality.</source>
          <target state="translated">コンパイルされた関数内の基本ブロックを並べ替えて、取り込まれるブランチの数を減らし、コードの局所性を向上させます。</target>
        </trans-unit>
        <trans-unit id="868b5a2b9f40116ce6cc017884431ba3599c4f2c" translate="yes" xml:space="preserve">
          <source>Reorder functions in the object file in order to improve code locality. This is implemented by using special subsections &lt;code&gt;.text.hot&lt;/code&gt; for most frequently executed functions and &lt;code&gt;.text.unlikely&lt;/code&gt; for unlikely executed functions. Reordering is done by the linker so object file format must support named sections and linker must place them in a reasonable way.</source>
          <target state="translated">コードの局所性を向上させるために、オブジェクトファイル内の関数を並べ替えます。これは、特殊なサブセクション使用して実装されて &lt;code&gt;.text.hot&lt;/code&gt; 最も頻繁に実行される機能のためにと &lt;code&gt;.text.unlikely&lt;/code&gt; そう実行される機能のために。並べ替えはリンカーによって行われるため、オブジェクトファイル形式は名前付きセクションをサポートし、リンカーはそれらを適切な方法で配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="4db98af9e39320a953bbea6bb998fe7493c40e5e" translate="yes" xml:space="preserve">
          <source>Replaced by</source>
          <target state="translated">に置き換えられています。</target>
        </trans-unit>
        <trans-unit id="66ec31a6cc491021c387eb4e55e0ad4c5a4f7424" translate="yes" xml:space="preserve">
          <source>Report the CPU time taken by each subprocess in the compilation sequence. For C source files, this is the compiler proper and assembler (plus the linker if linking is done).</source>
          <target state="translated">コンパイルシーケンスの各サブプロセスが消費したCPU時間を報告します。C ソースファイルの場合は、適切なコンパイラとアセンブラ(リンクされている場合はリンカも)です。</target>
        </trans-unit>
        <trans-unit id="886e8af128447aeefef31c794358ef6bddcacd1c" translate="yes" xml:space="preserve">
          <source>Request debugging information and also use &lt;var&gt;level&lt;/var&gt; to specify how much information. The default level is 2.</source>
          <target state="translated">デバッグ情報を要求し、 &lt;var&gt;level&lt;/var&gt; を使用して情報量を指定します。デフォルトのレベルは2です。</target>
        </trans-unit>
        <trans-unit id="50792516332342d0d1eda395f8cfbb177e04fe78" translate="yes" xml:space="preserve">
          <source>Require (do not require) that code using the standard (uncompressed) MIPS ISA be link-compatible with MIPS16 and microMIPS code, and vice versa.</source>
          <target state="translated">標準の(非圧縮の)MIPS ISAを使用するコードがMIPS16およびmicroMIPSコードとリンク互換であることを要求する(要求しない)。</target>
        </trans-unit>
        <trans-unit id="af5306e882621ffa9b4f415a4290811d77c026c0" translate="yes" xml:space="preserve">
          <source>Require a constant operand and print the constant expression with no punctuation.</source>
          <target state="translated">定数オペランドを要求し、句読点のない定数式を表示します。</target>
        </trans-unit>
        <trans-unit id="75dfdca44a05f21975d7bfe493dd698fbb1af400" translate="yes" xml:space="preserve">
          <source>Reserve space once for outgoing arguments in the function prologue rather than around each call. Generally beneficial for performance and size. Also needed for unwinding to avoid changing the stack frame around conditional code.</source>
          <target state="translated">各呼び出しの周りではなく、関数プロローグ内の発信引数のためのスペースを一度だけ確保します。一般的にパフォーマンスとサイズの面で有益です。また、条件付きコードの周りのスタックフレームの変更を避けるために、巻き戻しの際にも必要です。</target>
        </trans-unit>
        <trans-unit id="7fdab2693d6cbb613b61178d94663186d04bbeb3" translate="yes" xml:space="preserve">
          <source>Restricts generation of IT blocks to conform to the rules of ARMv8-A. IT blocks can only contain a single 16-bit instruction from a select set of instructions. This option is on by default for ARMv8-A Thumb mode.</source>
          <target state="translated">ARMv8-A のルールに準拠するように IT ブロックの生成を制限します。IT ブロックには、選択された命令セットから1つの16 ビット命令のみを含めることができます。このオプションは、ARMv8-A Thumb モードではデフォルトでオンになっています。</target>
        </trans-unit>
        <trans-unit id="e5415cb36e8b15e5a43bee566eb1a298ee341943" translate="yes" xml:space="preserve">
          <source>Return &amp;ldquo;short&amp;rdquo; &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;union&lt;/code&gt; values in memory like longer ones, rather than in registers. This convention is less efficient, but it has the advantage of allowing intercallability between GCC-compiled files and files compiled with other compilers, particularly the Portable C Compiler (pcc).</source>
          <target state="translated">レジスタではなく、より長い &lt;code&gt;struct&lt;/code&gt; ように、メモリ内の「短い」構造体と &lt;code&gt;union&lt;/code&gt; 体の値を返します。この規則は効率的ではありませんが、GCCでコンパイルされたファイルと他のコンパイラ、特にPortable C Compiler（pcc）でコンパイルされたファイルとの間の相互呼び出しを可能にするという利点があります。</target>
        </trans-unit>
        <trans-unit id="a50ab20cde7d366a67815b583ce3fa9e992f502c" translate="yes" xml:space="preserve">
          <source>Return 1 if &lt;var&gt;val&lt;/var&gt; is known to have the byte alignment given by &lt;var&gt;alignval&lt;/var&gt;, otherwise return 0. Note that this is different from</source>
          <target state="translated">&lt;var&gt;val&lt;/var&gt; が &lt;var&gt;alignval&lt;/var&gt; で指定されたバイトアライメントを持つことがわかっている場合は1を返し、そうでない場合は0を返します。これは</target>
        </trans-unit>
        <trans-unit id="f0dd2a1246825d5d496ccaf1b983d6b8565185f3" translate="yes" xml:space="preserve">
          <source>Return 8-byte vectors in memory instead of MMX registers. This is the default on Solaris 8 and 9 and VxWorks to match the ABI of the Sun Studio compilers until version 12. Later compiler versions (starting with Studio 12 Update 1) follow the ABI used by other x86 targets, which is the default on Solaris 10 and later. &lt;em&gt;Only&lt;/em&gt; use this option if you need to remain compatible with existing code produced by those previous compiler versions or older versions of GCC.</source>
          <target state="translated">MMXレジスタの代わりにメモリに8バイトのベクトルを返します。これは、Solaris 8および9とVxWorksのデフォルトであり、バージョン12までのSun StudioコンパイラのABIと一致します。以降のコンパイラバージョン（Studio 12 Update 1以降）は、他のx86ターゲットで使用されるABIに従います。これは、Solarisのデフォルトです。 10以降。このオプションは、以前のバージョンのコンパイラまたはGCCの古いバージョンで作成された既存のコードとの互換性を維持する必要がある場合に&lt;em&gt;のみ&lt;/em&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="c21aa754cb318c04fb0ee764bc873d27cf0f356a" translate="yes" xml:space="preserve">
          <source>Return &lt;code&gt;struct&lt;/code&gt; and &lt;code&gt;union&lt;/code&gt; values in registers when possible. This is more efficient for small structures than</source>
          <target state="translated">可能であれば、 &lt;code&gt;struct&lt;/code&gt; と &lt;code&gt;union&lt;/code&gt; 体の値をレジスタに返します。これは小さい構造の場合よりも効率的です</target>
        </trans-unit>
        <trans-unit id="36902af805238b98afe6ec42c8fc287d8ef121a4" translate="yes" xml:space="preserve">
          <source>Return VMS condition codes from &lt;code&gt;main&lt;/code&gt;. The default is to return POSIX-style condition (e.g. error) codes.</source>
          <target state="translated">&lt;code&gt;main&lt;/code&gt; からVMS条件コードを返します。デフォルトでは、POSIXスタイルの条件（エラーなど）コードを返します。</target>
        </trans-unit>
        <trans-unit id="4a959557662cc82b19295040cf9540ea2756207a" translate="yes" xml:space="preserve">
          <source>Return a nonzero value if a transaction is currently active, otherwise 0.</source>
          <target state="translated">トランザクションが現在アクティブな場合は0以外の値を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="e2b1c139ef70f0354479708d23d7002bd34b77b0" translate="yes" xml:space="preserve">
          <source>Return all structures in memory (as specified by the AIX ABI).</source>
          <target state="translated">(AIX ABI で指定された)メモリ内のすべての構造体を返します。</target>
        </trans-unit>
        <trans-unit id="30d548f2a666f3d2dacef41428651a854ac9ec7e" translate="yes" xml:space="preserve">
          <source>Return floating-point results in ac0 (fr0 in Unix assembler syntax).</source>
          <target state="translated">浮動小数点の結果を ac0 (Unix アセンブラ構文では fr0)で返します。</target>
        </trans-unit>
        <trans-unit id="18c78c8de7fda3409221e2eb382dd5b60425f50a" translate="yes" xml:space="preserve">
          <source>Return floating-point results in memory. This is the default.</source>
          <target state="translated">浮動小数点の結果をメモリに返します。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="b755295260a7fdcf5823a2b1f0e58a7da66e2993" translate="yes" xml:space="preserve">
          <source>Return structures smaller than 8 bytes in registers (as specified by the SVR4 ABI).</source>
          <target state="translated">SVR4 ABI で指定された)レジスタ内の 8 バイトより小さい構造体を返します。</target>
        </trans-unit>
        <trans-unit id="3d89b1dbd918009a622c075a1068bdd32199587c" translate="yes" xml:space="preserve">
          <source>Return the content of a system register which is mapped by &lt;var&gt;sr&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;sr&lt;/var&gt; によってマップされたシステムレジスタの内容を返します。</target>
        </trans-unit>
        <trans-unit id="4c8c8de6a7d4547a06d2be7861947f5101a14fa7" translate="yes" xml:space="preserve">
          <source>Return the content of a user space register which is mapped by &lt;var&gt;usr&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;usr&lt;/var&gt; によってマップされるユーザー空間レジスタの内容を返します。</target>
        </trans-unit>
        <trans-unit id="b6ef9796498d3cf9c9b3db66db0d93d9f477244a" translate="yes" xml:space="preserve">
          <source>Return the full 64-bit value of IACC0. The &lt;var&gt;reg&lt;/var&gt; argument is reserved for future expansion and must be 0.</source>
          <target state="translated">IACC0の完全な64ビット値を返します。 &lt;var&gt;reg&lt;/var&gt; 引数は、将来の拡張のために予約されており、0でなければなりません。</target>
        </trans-unit>
        <trans-unit id="d91fca12a5b708d6ecc723a264ae13bbf294ac10" translate="yes" xml:space="preserve">
          <source>Return the value of IACC0H if &lt;var&gt;reg&lt;/var&gt; is 0 and IACC0L if &lt;var&gt;reg&lt;/var&gt; is 1. Other values of &lt;var&gt;reg&lt;/var&gt; are rejected as invalid.</source>
          <target state="translated">場合IACC0Hの値を返します &lt;var&gt;reg&lt;/var&gt; あれば0であるとIACC0L &lt;var&gt;reg&lt;/var&gt; 1.他の値である &lt;var&gt;reg&lt;/var&gt; 無効として拒否されています。</target>
        </trans-unit>
        <trans-unit id="7c3c1904eaf1f7ff88cdff376d592fd0116b430c" translate="yes" xml:space="preserve">
          <source>Return using the &lt;code&gt;deret&lt;/code&gt; instruction. Interrupt handlers that don&amp;rsquo;t have this attribute return using &lt;code&gt;eret&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;deret&lt;/code&gt; 命令を使用して戻ります。この属性を持たない割り込みハンドラは、代わりに &lt;code&gt;eret&lt;/code&gt; を使用して戻ります。</target>
        </trans-unit>
        <trans-unit id="491a48cde73679c4ca1d8a8c89727d674aeaaaf5" translate="yes" xml:space="preserve">
          <source>Returning the new address in register &lt;code&gt;$31&lt;/code&gt;.</source>
          <target state="translated">レジスタ &lt;code&gt;$31&lt;/code&gt; 新しいアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="74c0a885f7ba9097f37e8734157c3ad725a829d5" translate="yes" xml:space="preserve">
          <source>Returns &lt;var&gt;x&lt;/var&gt; with the order of the bytes reversed; for example, &lt;code&gt;0xaabb&lt;/code&gt; becomes &lt;code&gt;0xbbaa&lt;/code&gt;. Byte here always means exactly 8 bits.</source>
          <target state="translated">バイトの順序を逆にして &lt;var&gt;x&lt;/var&gt; を返します。たとえば、 &lt;code&gt;0xaabb&lt;/code&gt; は0xbbaaになり &lt;code&gt;0xbbaa&lt;/code&gt; 。ここのバイトは常に正確に8ビットを意味します。</target>
        </trans-unit>
        <trans-unit id="0b996dc11180c5ec0a219a9ff967979bab82ce06" translate="yes" xml:space="preserve">
          <source>Returns a positive infinity, if supported by the floating-point format, else &lt;code&gt;DBL_MAX&lt;/code&gt;. This function is suitable for implementing the ISO C macro &lt;code&gt;HUGE_VAL&lt;/code&gt;.</source>
          <target state="translated">浮動小数点形式でサポートされている場合は正の無限大を返し、そうでない場合は &lt;code&gt;DBL_MAX&lt;/code&gt; を返します。この関数は、ISO Cマクロ &lt;code&gt;HUGE_VAL&lt;/code&gt; の実装に適しています。</target>
        </trans-unit>
        <trans-unit id="444af2bf8634b26ae9a1f1a7ad3d817e427a36b4" translate="yes" xml:space="preserve">
          <source>Returns one plus the index of the least significant 1-bit of &lt;var&gt;x&lt;/var&gt;, or if &lt;var&gt;x&lt;/var&gt; is zero, returns zero.</source>
          <target state="translated">1に &lt;var&gt;x&lt;/var&gt; の最下位1ビットのインデックスを加えた値を返すか、または &lt;var&gt;x&lt;/var&gt; がゼロの場合はゼロを返します。</target>
        </trans-unit>
        <trans-unit id="dd145587033c252d0c6c626afd75667794945e4a" translate="yes" xml:space="preserve">
          <source>Returns the first argument raised to the power of the second. Unlike the &lt;code&gt;pow&lt;/code&gt; function no guarantees about precision and rounding are made.</source>
          <target state="translated">最初の引数を2乗した値を返します。 &lt;code&gt;pow&lt;/code&gt; 関数とは異なり、精度と丸めは保証されません。</target>
        </trans-unit>
        <trans-unit id="4894d6f1b8e22494899330d0555ad8ffa8201099" translate="yes" xml:space="preserve">
          <source>Returns the number of 1-bits in &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;x&lt;/var&gt; の 1ビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="ce29b9b6bb07f313a52a112df90327683c6c87b7" translate="yes" xml:space="preserve">
          <source>Returns the number of leading 0-bits in &lt;var&gt;x&lt;/var&gt;, starting at the most significant bit position. If &lt;var&gt;x&lt;/var&gt; is 0, the result is undefined.</source>
          <target state="translated">最上位ビット位置から開始して、 &lt;var&gt;x&lt;/var&gt; の先行する0ビットの数を返します。場合は &lt;var&gt;x&lt;/var&gt; 0で、結果は定義されません。</target>
        </trans-unit>
        <trans-unit id="bafa0131b220bae62b75cbabaa4716f183d3539a" translate="yes" xml:space="preserve">
          <source>Returns the number of leading redundant sign bits in &lt;var&gt;x&lt;/var&gt;, i.e. the number of bits following the most significant bit that are identical to it. There are no special cases for 0 or other values.</source>
          <target state="translated">&lt;var&gt;x&lt;/var&gt; の先頭の冗長な符号ビットの数、つまりそれと同一である最上位ビットに続くビットの数を返します。0または他の値の特別なケースはありません。</target>
        </trans-unit>
        <trans-unit id="8891f7de90b5ed2a6bcf46eb0d0dd183cbf8e095" translate="yes" xml:space="preserve">
          <source>Returns the number of trailing 0-bits in &lt;var&gt;x&lt;/var&gt;, starting at the least significant bit position. If &lt;var&gt;x&lt;/var&gt; is 0, the result is undefined.</source>
          <target state="translated">最下位ビット位置から開始して、 &lt;var&gt;x&lt;/var&gt; の末尾の0ビットの数を返します。場合は &lt;var&gt;x&lt;/var&gt; 0で、結果は定義されません。</target>
        </trans-unit>
        <trans-unit id="683aba47e0d0f99bd0b4e45d3206d9722f1a751a" translate="yes" xml:space="preserve">
          <source>Returns the openacc gang, worker or vector id depending on whether &lt;var&gt;x&lt;/var&gt; is 0, 1 or 2.</source>
          <target state="translated">&lt;var&gt;x&lt;/var&gt; が0、1、2のいずれであるかに応じて、openaccギャング、ワーカー、またはベクターIDを返します。</target>
        </trans-unit>
        <trans-unit id="b954a6b3f64ab16c6a6435467af5731684d67694" translate="yes" xml:space="preserve">
          <source>Returns the openacc gang, worker or vector size depending on whether &lt;var&gt;x&lt;/var&gt; is 0, 1 or 2.</source>
          <target state="translated">&lt;var&gt;x&lt;/var&gt; が0、1、2のいずれであるかに応じて、openaccギャング、ワーカー、またはベクトルのサイズを返します。</target>
        </trans-unit>
        <trans-unit id="ce96cb4941a37e756412838ec82f95aa7bf28c53" translate="yes" xml:space="preserve">
          <source>Returns the parity of &lt;var&gt;x&lt;/var&gt;, i.e. the number of 1-bits in &lt;var&gt;x&lt;/var&gt; modulo 2.</source>
          <target state="translated">&lt;var&gt;x&lt;/var&gt; のパリティ、つまり &lt;var&gt;x&lt;/var&gt; の 2を法とする1ビットの数を返します。</target>
        </trans-unit>
        <trans-unit id="db0ab2a04434d84e5f96198ad75f2283577abc26" translate="yes" xml:space="preserve">
          <source>Returns the size of an object pointed to by &lt;var&gt;ptr&lt;/var&gt;. See &lt;a href=&quot;object-size-checking#Object-Size-Checking&quot;&gt;Object Size Checking&lt;/a&gt;, for a detailed description of the function.</source>
          <target state="translated">&lt;var&gt;ptr&lt;/var&gt; が指すオブジェクトのサイズを返します。関数の詳細については、「&lt;a href=&quot;object-size-checking#Object-Size-Checking&quot;&gt;オブジェクトサイズチェック&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="68a547fa5de03ac85628195326b7b381d300173e" translate="yes" xml:space="preserve">
          <source>Returns the value that is currently set in the &amp;lsquo;</source>
          <target state="translated">現在設定されている値を返します '</target>
        </trans-unit>
        <trans-unit id="662ea5f2d376e017455cb3f3b25cf7d3dcc098a2" translate="yes" xml:space="preserve">
          <source>Revision 2 of the ASE was introduced in the second half of 2006. This revision adds extra instructions to the original ASE, but is otherwise backwards-compatible with it. You can select revision 2 using the command-line option</source>
          <target state="translated">ASEのリビジョン2は2006年の後半に導入されました。このリビジョンは、元の ASE に余分な命令を追加しますが、それ以外の場合はそれと後方互換性があります。コマンドライン・オプションを使用してリビジョン 2 を選択することができます。</target>
        </trans-unit>
        <trans-unit id="0f30b33f89f9ca36be8f698bd38e6d3998be756f" translate="yes" xml:space="preserve">
          <source>Rewrite the profile after removing a subset of the gcda files, while maintaining the consistency of the summary and the histogram.</source>
          <target state="translated">サマリーとヒストグラムの一貫性を維持しながら、gcdaファイルのサブセットを削除した後にプロファイルを書き換えます。</target>
        </trans-unit>
        <trans-unit id="2fe16a196b9fb96bcf22656d266c0859479e525c" translate="yes" xml:space="preserve">
          <source>Right-shift of -1, i.e., a bit mask with a trailing block of ones, the rest being zeroes. Or to put it another way, one less than a power of two. Can only match when the</source>
          <target state="translated">1 の右シフト、つまり、ビットマスクの最後に 1 のブロックがあり、残りは 0 です。別の言い方をすれば、2 の累乗以下の 1 つ。の場合にのみマッチします。</target>
        </trans-unit>
        <trans-unit id="e687f82379bd394253bac71b24072104b029d942" translate="yes" xml:space="preserve">
          <source>Round towards minus infinity.</source>
          <target state="translated">マイナス無限大に向かって丸くなる。</target>
        </trans-unit>
        <trans-unit id="1c3cd028b5f1e6b0edc653ec95977523018f750c" translate="yes" xml:space="preserve">
          <source>Run a pass to pack branches into VLIW instructions (default).</source>
          <target state="translated">VLIW 命令にブランチをパックするためのパスを実行します(デフォルト)。</target>
        </trans-unit>
        <trans-unit id="9411013c77a06e01966ed1ee47bcab5ff91c1389" translate="yes" xml:space="preserve">
          <source>Run the program on a representative workload to generate the arc profile information. This may be repeated any number of times. You can run concurrent instances of your program, and provided that the file system supports locking, the data files will be correctly updated. Unless a strict ISO C dialect option is in effect, &lt;code&gt;fork&lt;/code&gt; calls are detected and correctly handled without double counting.</source>
          <target state="translated">代表的なワークロードでプログラムを実行して、アークプロファイル情報を生成します。これは何度でも繰り返すことができます。プログラムの同時インスタンスを実行でき、ファイルシステムがロックをサポートしている場合、データファイルは正しく更新されます。厳密なISO C方言オプションが有効になっていない限り、 &lt;code&gt;fork&lt;/code&gt; コールが検出され、二重にカウントされることなく正しく処理されます。</target>
        </trans-unit>
        <trans-unit id="750febd8962214edbdb1e987e070e09b26bed006" translate="yes" xml:space="preserve">
          <source>Run variable tracking pass. It computes where variables are stored at each position in code. Better debugging information is then generated (if the debugging information format supports this information).</source>
          <target state="translated">変数のトラッキングパスを実行します。コードの各位置で変数がどこに格納されているかを計算します。その後、より良いデバッグ情報が生成されます (デバッグ情報フォーマットがこの情報をサポートしている場合)。</target>
        </trans-unit>
        <trans-unit id="02a6d5433704778d27c91a559d1a246126ca2b03" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;gcov&lt;/code&gt; with your program&amp;rsquo;s source file names as arguments will now produce a listing of the code along with frequency of execution for each line. For example, if your program is called</source>
          <target state="translated">プログラムのソースファイル名を引数として &lt;code&gt;gcov&lt;/code&gt; を実行すると、コードのリストと各行の実行頻度が生成されます。たとえば、プログラムが呼び出された場合</target>
        </trans-unit>
        <trans-unit id="6f72aac6d9b0821f24cd11653e9e1ea61d3b8eda" translate="yes" xml:space="preserve">
          <source>Running the program will cause profile output to be generated. For each source file compiled with</source>
          <target state="translated">プログラムを実行すると、プロファイル出力が生成されます。でコンパイルされた各ソースファイルに対して</target>
        </trans-unit>
        <trans-unit id="c8eb0737c3e070d91c82da44ad778a26941751ad" translate="yes" xml:space="preserve">
          <source>S/390 and zSeries&amp;mdash;</source>
          <target state="translated">S / 390およびzSeries&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="0a939f740002d6325878635a4ecb4eff29305501" translate="yes" xml:space="preserve">
          <source>SGPR register</source>
          <target state="translated">エスジーピーアールレジスタ</target>
        </trans-unit>
        <trans-unit id="52fb4091ed310353e09517862a36800ca2c86150" translate="yes" xml:space="preserve">
          <source>SGPR registers valid as a source for scalar memory instructions (excludes M0 and EXEC)</source>
          <target state="translated">スカラーメモリ命令のソースとして有効なSGPRレジスタ(M0とEXECを除く)</target>
        </trans-unit>
        <trans-unit id="650aa12551cfc9241e1cd5e644660f68d55f375f" translate="yes" xml:space="preserve">
          <source>SGPR registers valid as a source or destination for vector instructions (excludes EXEC)</source>
          <target state="translated">ベクトル命令の送信元または送信先として有効な SGPR レジスタ (EXEC を除く)</target>
        </trans-unit>
        <trans-unit id="e7dc62b437b8a1360c1151acc32ef2d34c838e11" translate="yes" xml:space="preserve">
          <source>SGPR registers valid for instruction destinations, including VCC, M0 and EXEC</source>
          <target state="translated">VCC、M0、EXECを含む命令先で有効なSGPRレジスタ</target>
        </trans-unit>
        <trans-unit id="06d98e22c3590a0e22d3bfe590a8875bfcf62f6b" translate="yes" xml:space="preserve">
          <source>SGPR registers valid for instruction sources, including VCC, M0, EXEC and SCC</source>
          <target state="translated">VCC、M0、EXEC、SCCを含む命令ソースで有効なSGPRレジスタ</target>
        </trans-unit>
        <trans-unit id="c6b62b4cc9ebcf08c9d4f483e4f102a627e7a387" translate="yes" xml:space="preserve">
          <source>SGR substring for deleted lines within generated patches.</source>
          <target state="translated">生成されたパッチ内の削除された行のSGR部分文字列。</target>
        </trans-unit>
        <trans-unit id="4233963b1da8186d90f6982e524e354494399405" translate="yes" xml:space="preserve">
          <source>SGR substring for error: markers.</source>
          <target state="translated">エラーのためのSGRの部分文字列:markers.</target>
        </trans-unit>
        <trans-unit id="f0f2ece3f5afef3a96618fb40d9e516c0938cd83" translate="yes" xml:space="preserve">
          <source>SGR substring for filename headers within generated patches.</source>
          <target state="translated">生成されたパッチ内のファイル名ヘッダの SGR 部分文字列。</target>
        </trans-unit>
        <trans-unit id="ef3de6666e18bb1d0075a653fd3207878cc7a23b" translate="yes" xml:space="preserve">
          <source>SGR substring for first additional range.</source>
          <target state="translated">最初の追加範囲のSGR部分文字列。</target>
        </trans-unit>
        <trans-unit id="4047e51ab31499ea74aa0557270ff12e007c7adc" translate="yes" xml:space="preserve">
          <source>SGR substring for fix-it hints suggesting text to be deleted.</source>
          <target state="translated">削除すべきテキストを示唆する修正ヒントのためのSGR部分文字列。</target>
        </trans-unit>
        <trans-unit id="26c66a34977746cd4a9a18d107d2484d6baf05b6" translate="yes" xml:space="preserve">
          <source>SGR substring for fix-it hints suggesting text to be inserted or replaced.</source>
          <target state="translated">テキストの挿入や置換を示唆する修正ヒントのためのSGR部分文字列。</target>
        </trans-unit>
        <trans-unit id="a9e49a359d82dca9087414389ea6203f7d97c096" translate="yes" xml:space="preserve">
          <source>SGR substring for highlighting mismatching types within template arguments in the C++ frontend.</source>
          <target state="translated">C++フロントエンドのテンプレート引数内の不一致型を強調表示するためのSGR部分文字列。</target>
        </trans-unit>
        <trans-unit id="c2c54171666812e81afa463446e8b8c7bf07a44f" translate="yes" xml:space="preserve">
          <source>SGR substring for information printed within quotes.</source>
          <target state="translated">引用符の中に表示される情報のためのSGR部分文字列。</target>
        </trans-unit>
        <trans-unit id="21ec7b29e8556fe0733397c42965d397a384f312" translate="yes" xml:space="preserve">
          <source>SGR substring for inserted lines within generated patches.</source>
          <target state="translated">生成されたパッチ内に挿入された行のSGR部分文字列。</target>
        </trans-unit>
        <trans-unit id="631ff44ce6295a577998e0d45d27d8697542d130" translate="yes" xml:space="preserve">
          <source>SGR substring for location information, &amp;lsquo;</source>
          <target state="translated">位置情報のSGRサブストリング、 '</target>
        </trans-unit>
        <trans-unit id="13b8b196547b7c911a6008681f44695559ee3d8a" translate="yes" xml:space="preserve">
          <source>SGR substring for note: markers.</source>
          <target state="translated">ノート:マーカー用のSGR部分文字列。</target>
        </trans-unit>
        <trans-unit id="3c69ac2294e9dd81357177aa53e734578849f1b7" translate="yes" xml:space="preserve">
          <source>SGR substring for second additional range.</source>
          <target state="translated">2番目の追加範囲のSGR部分文字列。</target>
        </trans-unit>
        <trans-unit id="0836e70b794378ba99fbdf640887a055c2507059" translate="yes" xml:space="preserve">
          <source>SGR substring for the starts of hunks within generated patches.</source>
          <target state="translated">生成されたパッチ内のハントの開始点のSGR部分文字列。</target>
        </trans-unit>
        <trans-unit id="2ce0ddcf3a9872af855e6e18893f63c26237ec2f" translate="yes" xml:space="preserve">
          <source>SGR substring for warning: markers.</source>
          <target state="translated">警告のためのSGRの部分文字列:マーカー。</target>
        </trans-unit>
        <trans-unit id="4ef460c02c4bda0400a9d02a2e56bc8688eea615" translate="yes" xml:space="preserve">
          <source>SIMD builtins provided by the compiler can be used to generate the vector instructions. This section describes the available builtins and their usage in programs. With the</source>
          <target state="translated">コンパイラが提供するSIMDビルトインは、ベクター命令を生成するために使用することができます。このセクションでは、利用可能なビルトインとプログラムでの使用法について説明します。コンパイラが提供する</target>
        </trans-unit>
        <trans-unit id="ae4985ac14b1eabd45a1c1fcc429ea9f7090e85d" translate="yes" xml:space="preserve">
          <source>SIMD vector types declared using &lt;code&gt;__attribute ((vector_size))&lt;/code&gt; were mangled in a non-standard way that does not allow for overloading of functions taking vectors of different sizes.</source>
          <target state="translated">&lt;code&gt;__attribute ((vector_size))&lt;/code&gt; を使用して宣言されたSIMDベクトル型は、異なるサイズのベクトルを取る関数のオーバーロードを許可しない非標準的な方法でマングルされました。</target>
        </trans-unit>
        <trans-unit id="256c9f9a067e633db18da0ec81de7b585e074898" translate="yes" xml:space="preserve">
          <source>SIZE_MAX</source>
          <target state="translated">SIZE_MAX</target>
        </trans-unit>
        <trans-unit id="0c1688b370e73b8fab30795615287ddf0ee92cde" translate="yes" xml:space="preserve">
          <source>SPARC&amp;mdash;</source>
          <target state="translated">SPARC&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="4c33d2e33886a24479b8c7ca85ded7473e3a114a" translate="yes" xml:space="preserve">
          <source>SPU&amp;mdash;</source>
          <target state="translated">SPU&amp;mdash;</target>
        </trans-unit>
        <trans-unit id="d5ef57a9b4e24298fd79d6a4c241fc751bc397dc" translate="yes" xml:space="preserve">
          <source>SSE constant zero operand.</source>
          <target state="translated">SSE 定数ゼロオペランド。</target>
        </trans-unit>
        <trans-unit id="6b6185655c0d6d39e8477b7cf295bc855e8520de" translate="yes" xml:space="preserve">
          <source>SSE instructions.</source>
          <target state="translated">SSEの指示。</target>
        </trans-unit>
        <trans-unit id="ad670c94b7871773b33360abf956fb366993570e" translate="yes" xml:space="preserve">
          <source>SSE2 instructions.</source>
          <target state="translated">SSE2の指示。</target>
        </trans-unit>
        <trans-unit id="2369317c8b51e3b18170998e24ffa71aa0b8a0d0" translate="yes" xml:space="preserve">
          <source>SSE3 instructions.</source>
          <target state="translated">SSE3の指示。</target>
        </trans-unit>
        <trans-unit id="52027268fb40ad079dd27f174909bf61fa52b68f" translate="yes" xml:space="preserve">
          <source>SSE4.1 instructions.</source>
          <target state="translated">SSE4.1の説明書。</target>
        </trans-unit>
        <trans-unit id="1220ef87db9d2afe63d2dbbebe7cc117f311cd6d" translate="yes" xml:space="preserve">
          <source>SSE4.2 instructions.</source>
          <target state="translated">SSE4.2のインストラクション。</target>
        </trans-unit>
        <trans-unit id="14c8a208e6acf4297b13ae5c14762fb6cb87c9a5" translate="yes" xml:space="preserve">
          <source>SSE4A instructions.</source>
          <target state="translated">SSE4Aの説明書。</target>
        </trans-unit>
        <trans-unit id="a824cf2031e7a9f24844581ed281a20b09b219a7" translate="yes" xml:space="preserve">
          <source>SSSE3 instructions.</source>
          <target state="translated">SSSE3の指示。</target>
        </trans-unit>
        <trans-unit id="75f02b7e3264b6af278eeb7499231b0a15daefdb" translate="yes" xml:space="preserve">
          <source>STVX</source>
          <target state="translated">STVX</target>
        </trans-unit>
        <trans-unit id="f54d3d8da212d77cf012ec70b98f091e4df6592b" translate="yes" xml:space="preserve">
          <source>STXVD2X</source>
          <target state="translated">STXVD2X</target>
        </trans-unit>
        <trans-unit id="464ed831ffed8bdfd8130295a2edb2d9e9578400" translate="yes" xml:space="preserve">
          <source>STXVW4X</source>
          <target state="translated">STXVW4X</target>
        </trans-unit>
        <trans-unit id="b0dabbf327525cacc4497069188029fd059e7389" translate="yes" xml:space="preserve">
          <source>Safely accessing C data and calling functions from basic &lt;code&gt;asm&lt;/code&gt; is more complex than it may appear. To access C data, it is better to use extended &lt;code&gt;asm&lt;/code&gt;.</source>
          <target state="translated">Cデータへの安全なアクセスと基本的な &lt;code&gt;asm&lt;/code&gt; からの関数の呼び出しは、見た目よりも複雑です。Cデータにアクセスするには、拡張 &lt;code&gt;asm&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4e1a6674d38590faffffeb4695d9d452b5339baa" translate="yes" xml:space="preserve">
          <source>Same as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d40738c15585e5ece8390b1d9dcc4417cde63d" translate="yes" xml:space="preserve">
          <source>Same as &amp;lsquo;</source>
          <target state="translated">と同じ '</target>
        </trans-unit>
        <trans-unit id="a79ab980d305db447bee9c479d0843b84bd7f8c7" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;__builtin_tbegin&lt;/code&gt; but without FPR saves and restores. Using this variant in code making use of FPRs will leave the FPRs in undefined state when entering the transaction abort handler code.</source>
          <target state="translated">&lt;code&gt;__builtin_tbegin&lt;/code&gt; と同じですが、FPRの保存と復元はありません。FPRを使用するコードでこのバリアントを使用すると、トランザクション中止ハンドラコードを入力するときにFPRが未定義の状態のままになります。</target>
        </trans-unit>
        <trans-unit id="4de3c96aaa50bbcebfe6c154f9425492819e4fda" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;__builtin_tbegin_retry&lt;/code&gt; but without FPR saves and restores. Using this variant in code making use of FPRs will leave the FPRs in undefined state when entering the transaction abort handler code.</source>
          <target state="translated">&lt;code&gt;__builtin_tbegin_retry&lt;/code&gt; と同じですが、FPRの保存と復元がありません。FPRを使用するコードでこのバリアントを使用すると、トランザクション中止ハンドラコードを入力するときにFPRが未定義の状態のままになります。</target>
        </trans-unit>
        <trans-unit id="aac99bb488266e0b7b7ade351899535fdea6eef8" translate="yes" xml:space="preserve">
          <source>Sanitize global variables in selected user-defined sections. &lt;var&gt;si&lt;/var&gt; may contain wildcards.</source>
          <target state="translated">選択したユーザー定義セクションのグローバル変数をサニタイズします。 &lt;var&gt;si&lt;/var&gt; にはワイルドカードを含めることができます。</target>
        </trans-unit>
        <trans-unit id="9384413dcf3a99a56f6d5fb6ddd74fec9e18520d" translate="yes" xml:space="preserve">
          <source>Saturating addition. Return the result of adding &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;, storing the value 32767 if the result overflows.</source>
          <target state="translated">飽和加算。 &lt;var&gt;x&lt;/var&gt; と &lt;var&gt;y&lt;/var&gt; を加算した結果を返し、結果がオーバーフローした場合は値32767を格納します。</target>
        </trans-unit>
        <trans-unit id="504215725299cdd825dda25f0c85b38e0bd4d51e" translate="yes" xml:space="preserve">
          <source>Saturating subtraction. Return the result of subtracting &lt;var&gt;y&lt;/var&gt; from &lt;var&gt;x&lt;/var&gt;, storing the value -32768 if the result overflows.</source>
          <target state="translated">飽和減算。 &lt;var&gt;x&lt;/var&gt; から &lt;var&gt;y&lt;/var&gt; を引いた結果を返し、結果がオーバーフローした場合は値-32768を格納します。</target>
        </trans-unit>
        <trans-unit id="20ad33acfaabe4d68a4482f6776dcaa2a9be1f91" translate="yes" xml:space="preserve">
          <source>Says that .ZZ files are, in fact, C++ source files.</source>
          <target state="translated">.ZZファイルは、実際にはC++のソースファイルであることを示しています。</target>
        </trans-unit>
        <trans-unit id="b29493698792fa428aa92855b6cf7ad4a0f77c71" translate="yes" xml:space="preserve">
          <source>Says to make debugging dumps during compilation as specified by &lt;var&gt;letters&lt;/var&gt;. The flags documented here are those relevant to the preprocessor. Other &lt;var&gt;letters&lt;/var&gt; are interpreted by the compiler proper, or reserved for future versions of GCC, and so are silently ignored. If you specify &lt;var&gt;letters&lt;/var&gt; whose behavior conflicts, the result is undefined. See &lt;a href=&quot;developer-options#Developer-Options&quot;&gt;Developer Options&lt;/a&gt;, for more information.</source>
          <target state="translated">&lt;var&gt;letters&lt;/var&gt; 指定されているように、コンパイル中にデバッグダンプを作成すると言います。ここに記載されているフラグは、プリプロセッサに関連するものです。他の &lt;var&gt;letters&lt;/var&gt; は適切なコンパイラによって解釈されるか、GCCの将来のバージョンのために予約されているため、黙って無視されます。動作が競合する &lt;var&gt;letters&lt;/var&gt; を指定すると、結果は未定義になります。詳細については、&lt;a href=&quot;developer-options#Developer-Options&quot;&gt;開発者向けオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4060536ee75ab5287f71dfb97d864d7f22d2ca94" translate="yes" xml:space="preserve">
          <source>Says to make debugging dumps during compilation at times specified by &lt;var&gt;letters&lt;/var&gt;. This is used for debugging the RTL-based passes of the compiler.</source>
          <target state="translated">&lt;var&gt;letters&lt;/var&gt; 指定された時間にコンパイル中にデバッグダンプを作成すると言います。これは、コンパイラーのRTLベースのパスをデバッグするために使用されます。</target>
        </trans-unit>
        <trans-unit id="d4f20ee224e1157c9c2cb4923edd8e603ca68078" translate="yes" xml:space="preserve">
          <source>Scalar condition register: SCC</source>
          <target state="translated">スカラー条件レジスタ。SCC</target>
        </trans-unit>
        <trans-unit id="112620d6eb072a0c362e896824493987aba20f3a" translate="yes" xml:space="preserve">
          <source>Scale factor to apply to the number of blocks in a threading path when comparing to the number of (scaled) statements.</source>
          <target state="translated">(スケーリングされた)ステートメントの数と比較する際に、スレッディングパスのブロック数に適用するスケーリング係数。</target>
        </trans-unit>
        <trans-unit id="95dbc5e98d074c513e988faebfbccb22e09ae395" translate="yes" xml:space="preserve">
          <source>Scale factor to apply to the number of statements in a threading path when comparing to the number of (scaled) blocks.</source>
          <target state="translated">(スケーリングされた)ブロックの数と比較する際に、スレッディングパス内のステートメントの数に適用するスケールファクタ。</target>
        </trans-unit>
        <trans-unit id="86cf479673ca3b066e5d67cd80cb00f46a9ad376" translate="yes" xml:space="preserve">
          <source>Scale the profile counters. The specified value can be in floating point value, or simple fraction value form, such 1, 2, 2/3, and 5/3.</source>
          <target state="translated">プロファイルカウンタのスケールを設定します。指定された値は、浮動小数点値でも、1、2、2/3、5/3などの単純な分数値でもよい。</target>
        </trans-unit>
        <trans-unit id="ff4952674116ca1ef68e6dc524bc6fd65b2aa9ad" translate="yes" xml:space="preserve">
          <source>Scaling factor in calculation of maximum distance an expression can be moved by GCSE optimizations. This is currently supported only in the code hoisting pass. The bigger the ratio, the more aggressive code hoisting is with simple expressions, i.e., the expressions that have cost less than</source>
          <target state="translated">GCSEの最適化によって式を移動させることができる最大距離の計算におけるスケーリング係数。これは現在のところ、コード巻上げパスでのみサポートされています。この比率が大きいほど、単純な式、つまりコストが</target>
        </trans-unit>
        <trans-unit id="532227f59708576e594e220bb0a8588203d0536c" translate="yes" xml:space="preserve">
          <source>Schedule code according to the constraints for the machine type &lt;var&gt;cpu-type&lt;/var&gt;. The choices for &lt;var&gt;cpu-type&lt;/var&gt; are &amp;lsquo;</source>
          <target state="translated">マシンタイプ &lt;var&gt;cpu-type&lt;/var&gt; の制約に従ってコードをスケジュールします。 &lt;var&gt;cpu-type&lt;/var&gt; の選択肢は '</target>
        </trans-unit>
        <trans-unit id="512110c2a7a87680ea125d2d5070dd617326491f" translate="yes" xml:space="preserve">
          <source>Schedule instructions using selective scheduling algorithm. Selective scheduling runs instead of the first scheduler pass.</source>
          <target state="translated">選択的スケジューリングアルゴリズムを用いて命令をスケジューリングします。選択的スケジューリングは、最初のスケジューラパスの代わりに実行されます。</target>
        </trans-unit>
        <trans-unit id="a8bc58f0865e7ffaa1277982a9a30e1e6328ca0f" translate="yes" xml:space="preserve">
          <source>Schedule instructions using selective scheduling algorithm. Selective scheduling runs instead of the second scheduler pass.</source>
          <target state="translated">選択的スケジューリングアルゴリズムを用いて命令をスケジューリングします。選択的スケジューリングは、2回目のスケジューラパスの代わりに実行されます。</target>
        </trans-unit>
        <trans-unit id="b5c9dbe52234ab7adfb9709d744b3335541af679" translate="yes" xml:space="preserve">
          <source>Schedule type of omp schedule for loops parallelized by parloops (static, dynamic, guided, auto, runtime).</source>
          <target state="translated">パーループで並列化されたループ(静的、動的、ガイド付き、自動、ランタイム)のためのOMPスケジュールのタイプ。</target>
        </trans-unit>
        <trans-unit id="090706d50c1a9631674ea954b72f473248174f5c" translate="yes" xml:space="preserve">
          <source>Schedules as an EV4 and has no instruction set extensions.</source>
          <target state="translated">EV4としてスケジュールされ、命令セットの拡張機能はありません。</target>
        </trans-unit>
        <trans-unit id="e3bebf86216646d883305006d7a92a77b0a80860" translate="yes" xml:space="preserve">
          <source>Schedules as an EV5 and has no instruction set extensions.</source>
          <target state="translated">EV5としてスケジュールされ、命令セットの拡張機能はありません。</target>
        </trans-unit>
        <trans-unit id="01ff3c69f7080eed625112079f8743f5f048b2bc" translate="yes" xml:space="preserve">
          <source>Schedules as an EV5 and supports the BWX and MAX extensions.</source>
          <target state="translated">EV5としてスケジュールし、BWXとMAXの拡張機能をサポートしています。</target>
        </trans-unit>
        <trans-unit id="b44df77a439d014c7e3b18a60c36ae6be23b8bed" translate="yes" xml:space="preserve">
          <source>Schedules as an EV5 and supports the BWX extension.</source>
          <target state="translated">EV5としてスケジュールし、BWX拡張をサポートします。</target>
        </trans-unit>
        <trans-unit id="d98e18423f9732958ffea0c6bd4bd7f9f1294627" translate="yes" xml:space="preserve">
          <source>Schedules as an EV6 and supports the BWX, CIX, FIX, and MAX extensions.</source>
          <target state="translated">EV6としてスケジュールし、BWX、CIX、FIX、およびMAX拡張をサポートします。</target>
        </trans-unit>
        <trans-unit id="bbf50f85903256e541bbf3311b99e71d3918fbbc" translate="yes" xml:space="preserve">
          <source>Schedules as an EV6 and supports the BWX, FIX, and MAX extensions.</source>
          <target state="translated">EV6としてスケジュールし、BWX、FIX、およびMAXエクステンションをサポートします。</target>
        </trans-unit>
        <trans-unit id="2933ec5911ccb0e4b7c1d0f9419a5e7a7d360e81" translate="yes" xml:space="preserve">
          <source>Scoped enumerators passed as arguments to a variadic function are promoted like unscoped enumerators, causing &lt;code&gt;va_arg&lt;/code&gt; to complain. On most targets this does not actually affect the parameter passing ABI, as there is no way to pass an argument smaller than &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">可変個引数関数に引数として渡されたスコープ付き列挙子は、スコープなし列挙子のように昇格され、 &lt;code&gt;va_arg&lt;/code&gt; が不平を言います。 &lt;code&gt;int&lt;/code&gt; より小さい引数を渡す方法がないため、ほとんどのターゲットでは、これは実際にはABIを渡すパラメーターに影響しません。</target>
        </trans-unit>
        <trans-unit id="178b5f6bb9943f6de74ed00010972a24a7bb5622" translate="yes" xml:space="preserve">
          <source>Search for &lt;var&gt;file&lt;/var&gt; and insert its text at the current point in the specs file.</source>
          <target state="translated">&lt;var&gt;file&lt;/var&gt; を検索し、スペックファイルの現在の位置にそのテキストを挿入します。</target>
        </trans-unit>
        <trans-unit id="ba898c1a0a41a81bab594f983313300f956e596d" translate="yes" xml:space="preserve">
          <source>Search the directories &lt;var&gt;dirs&lt;/var&gt;, and no others, for libraries specified with</source>
          <target state="translated">で指定されたライブラリーについて、ディレクトリー &lt;var&gt;dirs&lt;/var&gt; を検索し、他のディレクトリーは検索しません</target>
        </trans-unit>
        <trans-unit id="240544ba3059ddd6fa51173abfa71bc79edad6e6" translate="yes" xml:space="preserve">
          <source>Search the library named &lt;var&gt;library&lt;/var&gt; when linking. (The second alternative with the library as a separate argument is only for POSIX compliance and is not recommended.)</source>
          <target state="translated">リンク時にlibraryという名前の &lt;var&gt;library&lt;/var&gt; 検索します。（ライブラリーを別個の引数として使用する2番目の選択肢は、POSIX準拠のためだけであり、推奨されません。）</target>
        </trans-unit>
        <trans-unit id="2f6637081eaeba40dac20edac8983d65e9c687dd" translate="yes" xml:space="preserve">
          <source>Second from top of 80387 floating-point stack (&lt;code&gt;%st(1)&lt;/code&gt;).</source>
          <target state="translated">80387浮動小数点スタックの上から2番目（ &lt;code&gt;%st(1)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="f2a9e9979a3fe235f6129e47257fa2f36d503ac5" translate="yes" xml:space="preserve">
          <source>Second, the argument is passed to the function using the calling conventions of the first member of the transparent union, not the calling conventions of the union itself. All members of the union must have the same machine representation; this is necessary for this argument passing to work properly.</source>
          <target state="translated">第二に、引数は、透明ユニオンの最初のメンバの呼び出し規則を使用して関数に渡され、ユニオン自体の呼び出し規則ではありません。ユニオンのすべてのメンバーは同じマシン表現を持っていなければなりません。</target>
        </trans-unit>
        <trans-unit id="ea3456e6bd81cdabf3c368be0bfbf5a7261e636e" translate="yes" xml:space="preserve">
          <source>Second, when the type of an anonymous field is a &lt;code&gt;typedef&lt;/code&gt; for a &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;union&lt;/code&gt;, code may refer to the field using the name of the &lt;code&gt;typedef&lt;/code&gt;.</source>
          <target state="translated">第2に、匿名フィールドの型が &lt;code&gt;struct&lt;/code&gt; または &lt;code&gt;union&lt;/code&gt; の &lt;code&gt;typedef&lt;/code&gt; である場合、コードは &lt;code&gt;typedef&lt;/code&gt; の名前を使用してフィールドを参照することがあります。</target>
        </trans-unit>
        <trans-unit id="f4677b56029d2d5a1454e15af8e873ba7843c108" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;arm-options#ARM-Options&quot;&gt;ARM Options&lt;/a&gt; and &lt;a href=&quot;aarch64-options#AArch64-Options&quot;&gt;AArch64 Options&lt;/a&gt; for more information on the availability of extensions.</source>
          <target state="translated">拡張機能の可用性の詳細については、&lt;a href=&quot;arm-options#ARM-Options&quot;&gt;ARMオプション&lt;/a&gt;および&lt;a href=&quot;aarch64-options#AArch64-Options&quot;&gt;AArch64オプション&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a3ed7b770e23a9147c81b72b94f04738551cd044" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;assembler-options#Assembler-Options&quot;&gt;Passing Options to the Assembler&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;assembler-options#Assembler-Options&quot;&gt;オプションをアセンブラに渡すを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5fa624e4b9bdd50f27ab9969ddbd05fadec90527" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;attribute-syntax#Attribute-Syntax&quot;&gt;Attribute Syntax&lt;/a&gt;, for details of the exact syntax for using attributes.</source>
          <target state="translated">&lt;a href=&quot;attribute-syntax#Attribute-Syntax&quot;&gt;属性&lt;/a&gt;を使用するための正確な構文の詳細については、「属性の構文」を参照してください。</target>
        </trans-unit>
        <trans-unit id="e7798844f22a2c2e6d35571a21bc9b88a41e9976" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;c-dialect-options#C-Dialect-Options&quot;&gt;Options Controlling C Dialect&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c-dialect-options#C-Dialect-Options&quot;&gt;C方言を制御するオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b629b8d91d57fd123b970633646d0ea0d91cd217" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;c_002b_002b-dialect-options#C_002b_002b-Dialect-Options&quot;&gt;Options Controlling C++ Dialect&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c_002b_002b-dialect-options#C_002b_002b-Dialect-Options&quot;&gt;Options Controlling C ++ Dialectを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7a9f7ae4d625bd6f1865541dd19d916bd7384014" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;c_002b_002b-interface#C_002b_002b-Interface&quot;&gt;Declarations and Definitions in One Header&lt;/a&gt;, for another way to control placement of these constructs.</source>
          <target state="translated">これらの構成要素の配置を制御する別の方法について&lt;a href=&quot;c_002b_002b-interface#C_002b_002b-Interface&quot;&gt;は、「1つのヘッダーの宣言と定義&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f65573cc9b99e9cba7846f00d5e0e8a7a8e51df7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;code-gen-options#Code-Gen-Options&quot;&gt;Options for Code Generation Conventions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;code-gen-options#Code-Gen-Options&quot;&gt;コード生成規則のオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f2c2c26650fff8c74769de012a123d508e5fd307" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;debugging-options#Debugging-Options&quot;&gt;Options for Debugging Your Program&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;debugging-options#Debugging-Options&quot;&gt;プログラムをデバッグするためのオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ed60c5c11a89d5b8997565970e20adef9aae6e73" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;developer-options#Developer-Options&quot;&gt;GCC Developer Options&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;developer-options#Developer-Options&quot;&gt;GCC開発者向けオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="068f02a10a991b8dd4c9c4d4f1176aa1f6736565" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;diagnostic-message-formatting-options#Diagnostic-Message-Formatting-Options&quot;&gt;Options to Control Diagnostic Messages Formatting&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;diagnostic-message-formatting-options#Diagnostic-Message-Formatting-Options&quot;&gt;診断メッセージのフォーマットを制御するオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="980f2aedfa176760da97d08ae0c35c00555524bc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;directory-options#Directory-Options&quot;&gt;Options for Directory Search&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;directory-options#Directory-Options&quot;&gt;ディレクトリ検索のオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b7df942c5c9bf184f3f2a89ce21ae90ce25b87ab" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Function Attributes&lt;/a&gt;, for details of the semantics of attributes applying to functions. See &lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;Variable Attributes&lt;/a&gt;, for details of the semantics of attributes applying to variables. See &lt;a href=&quot;type-attributes#Type-Attributes&quot;&gt;Type Attributes&lt;/a&gt;, for details of the semantics of attributes applying to structure, union and enumerated types. See &lt;a href=&quot;label-attributes#Label-Attributes&quot;&gt;Label Attributes&lt;/a&gt;, for details of the semantics of attributes applying to labels. See &lt;a href=&quot;enumerator-attributes#Enumerator-Attributes&quot;&gt;Enumerator Attributes&lt;/a&gt;, for details of the semantics of attributes applying to enumerators. See &lt;a href=&quot;statement-attributes#Statement-Attributes&quot;&gt;Statement Attributes&lt;/a&gt;, for details of the semantics of attributes applying to statements.</source>
          <target state="translated">参照&lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;関数の属性を&lt;/a&gt;関数に適用する属性のセマンティクスの詳細については、。参照&lt;a href=&quot;variable-attributes#Variable-Attributes&quot;&gt;変数の属性を&lt;/a&gt;変数に適用する属性のセマンティクスの詳細については、。参照&lt;a href=&quot;type-attributes#Type-Attributes&quot;&gt;タイプ属性&lt;/a&gt;構造、労働組合や列挙型に適用する属性のセマンティクスの詳細については、。ラベルに適用される属性のセマンティクスの詳細については、「&lt;a href=&quot;label-attributes#Label-Attributes&quot;&gt;ラベル属性&lt;/a&gt;」を参照してください。参照&lt;a href=&quot;enumerator-attributes#Enumerator-Attributes&quot;&gt;列挙子の属性&lt;/a&gt;列挙子に適用する属性のセマンティクスの詳細については、。参照してください&lt;a href=&quot;statement-attributes#Statement-Attributes&quot;&gt;ステートメント属性の&lt;/a&gt;ステートメントに適用される属性のセマンティクスの詳細については、。</target>
        </trans-unit>
        <trans-unit id="01ea811dd42662016230f114720fe01339ff4419" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;function-multiversioning#Function-Multiversioning&quot;&gt;Function Multiversioning&lt;/a&gt;, where it is used to specify the default function version.</source>
          <target state="translated">&lt;a href=&quot;function-multiversioning#Function-Multiversioning&quot;&gt;Function Multiversioningを&lt;/a&gt;参照してください。デフォルトの関数バージョンを指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="148b71982b9647e6d6ecafa6882d1190f5b5569f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior&quot;&gt;Implementation-defined behavior&lt;/a&gt; in The C Preprocessor, for details of these aspects of implementation-defined behavior.</source>
          <target state="translated">参照&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior&quot;&gt;処理系定義の動作&lt;/a&gt;処理系定義の動作のこれらの側面の詳細については、Cプリプロセッサでは。</target>
        </trans-unit>
        <trans-unit id="18443493189256836930c6a050f4842f9c78519f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior&quot;&gt;Implementation-defined behavior&lt;/a&gt; in The C Preprocessor.</source>
          <target state="translated">Cプリプロセッサの&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior&quot;&gt;実装定義の動作を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c7d31e8396ed3e8775b3882f9a8562adac8992e6" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior&quot;&gt;Implementation-defined behavior&lt;/a&gt; in The C Preprocessor. &lt;code&gt;char16_t&lt;/code&gt; and &lt;code&gt;char32_t&lt;/code&gt; literals are always encoded in UTF-16 and UTF-32 respectively.</source>
          <target state="translated">Cプリプロセッサの&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/cpp/Implementation_002ddefined-behavior.html#Implementation_002ddefined-behavior&quot;&gt;実装定義の動作を&lt;/a&gt;参照してください。 &lt;code&gt;char16_t&lt;/code&gt; および &lt;code&gt;char32_t&lt;/code&gt; リテラルは、常にそれぞれUTF-16およびUTF-32でエンコードされます。</target>
        </trans-unit>
        <trans-unit id="658fbadcbe7e3cfa27592bb7cc8aab369c0db247" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/cpp/Pragmas.html#Pragmas&quot;&gt;Pragmas&lt;/a&gt; in The C Preprocessor, for details of pragmas accepted by GCC on all targets. See &lt;a href=&quot;pragmas#Pragmas&quot;&gt;Pragmas Accepted by GCC&lt;/a&gt;, for details of target-specific pragmas.</source>
          <target state="translated">すべてのターゲットでGCCが受け入れるプラグマの詳細については、Cプリプロセッサの&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/cpp/Pragmas.html#Pragmas&quot;&gt;プラグマ&lt;/a&gt;を参照してください。ターゲット固有のプラグマの詳細については、「&lt;a href=&quot;pragmas#Pragmas&quot;&gt;GCCが受け入れるプラグマ&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="21007d084137c7d2ec1671d76187750384f6f2e0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gccint/Machine-Modes.html#Machine-Modes&quot;&gt;Machine Modes&lt;/a&gt; in GNU Compiler Collection (GCC) Internals, for a list of the possible keywords for &lt;var&gt;mode&lt;/var&gt;. You may also specify a mode of &lt;code&gt;byte&lt;/code&gt; or &lt;code&gt;__byte__&lt;/code&gt; to indicate the mode corresponding to a one-byte integer, &lt;code&gt;word&lt;/code&gt; or &lt;code&gt;__word__&lt;/code&gt; for the mode of a one-word integer, and &lt;code&gt;pointer&lt;/code&gt; or &lt;code&gt;__pointer__&lt;/code&gt; for the mode used to represent pointers.</source>
          <target state="translated">&lt;var&gt;mode&lt;/var&gt; に使用できるキーワードのリストについては、GNU Compiler Collection（GCC）内部の&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gccint/Machine-Modes.html#Machine-Modes&quot;&gt;マシンモード&lt;/a&gt;を参照してください。また、 &lt;code&gt;byte&lt;/code&gt; または &lt;code&gt;__byte__&lt;/code&gt; のモードを指定して、1バイト整数に対応するモード、1ワード整数のモードの場合は &lt;code&gt;word&lt;/code&gt; または &lt;code&gt;__word__&lt;/code&gt; 、および &lt;code&gt;pointer&lt;/code&gt; を表すために使用されるモードの場合はポインターまたは &lt;code&gt;__pointer__&lt;/code&gt; を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="2b73e4c61d6aa3ba91f4f3757ed312f0dea34e9a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gfortran/Standards.html#Standards&quot;&gt;Standards&lt;/a&gt; in The GNU Fortran Compiler, for details of standards supported by GNU Fortran.</source>
          <target state="translated">参照&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gfortran/Standards.html#Standards&quot;&gt;標準&lt;/a&gt; GNUのFortranがサポートする標準の詳細については、GNU Fortranコンパイラでは。</target>
        </trans-unit>
        <trans-unit id="d4544c625c9250deeb4d1b2109535476e6a41bc9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gnat_rm/index.html#Top&quot;&gt;About This Guide&lt;/a&gt; in GNAT Reference Manual, for information on standard conformance and compatibility of the Ada compiler.</source>
          <target state="translated">Adaコンパイラの標準準拠と互換性については、GNATリファレンスマニュアルの&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gnat_rm/index.html#Top&quot;&gt;このガイドについてを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="02206115a18ef138f866a5377cf36d2dcdf3f39c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;Option Index&lt;/a&gt;, for an index to GCC&amp;rsquo;s options.</source>
          <target state="translated">GCCのオプションのインデックスについては、&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-9.2.0/gcc/Option-Index.html#Option-Index&quot;&gt;オプションインデックスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f92b372afeb33fdcb2e400c22586894ceb4a8913" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.akkadia.org/drepper/tls.pdf&quot;&gt;ELF Handling For Thread-Local Storage&lt;/a&gt; for a detailed explanation of the four thread-local storage addressing models, and how the runtime is expected to function.</source>
          <target state="translated">4つのスレッドローカルストレージアドレス指定モデルの詳細な説明、およびランタイムがどのように機能することが期待されるかについては、スレッド&lt;a href=&quot;https://www.akkadia.org/drepper/tls.pdf&quot;&gt;ローカルストレージのELF処理を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8e13ff5ec63319e8432be9ffc09617dcfec5efa5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;instrumentation-options#Instrumentation-Options&quot;&gt;Program Instrumentation Options&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;instrumentation-options#Instrumentation-Options&quot;&gt;Program Instrumentation Optionsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7c45509f6f79a8b5d9dfd4c1f3557aba0312fefe" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;link-options#Link-Options&quot;&gt;Options for Linking&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;link-options#Link-Options&quot;&gt;リンクのオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e1d926ae4839442bf4ca475259e4691d6d87ea8e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;microsoft-windows-function-attributes#Microsoft-Windows-Function-Attributes&quot;&gt;Microsoft Windows Function Attributes&lt;/a&gt;, for discussion of the &lt;code&gt;dllexport&lt;/code&gt; and &lt;code&gt;dllimport&lt;/code&gt; attributes.</source>
          <target state="translated">&lt;code&gt;dllexport&lt;/code&gt; および &lt;code&gt;dllimport&lt;/code&gt; 属性の説明については、&lt;a href=&quot;microsoft-windows-function-attributes#Microsoft-Windows-Function-Attributes&quot;&gt;Microsoft Windows関数属性を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b9f06eae06e3de3e9542d05510637a475fc262bd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;objective_002dc-and-objective_002dc_002b_002b-dialect-options#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options&quot;&gt;Options Controlling Objective-C and Objective-C++ Dialects&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;objective_002dc-and-objective_002dc_002b_002b-dialect-options#Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options&quot;&gt;Options Controlling Objective-C and Objective-C ++ Dialectsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2c63c6c8e460a8cf682e66ddf66e9aa0d0e42598" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;Options that Control Optimization&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;最適化を制御するオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="85e23a477ff3ed397006f7d7b24f8677346f373f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;overall-options#Overall-Options&quot;&gt;Options Controlling the Kind of Output&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;overall-options#Overall-Options&quot;&gt;出力の種類を制御するオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e8f74f8e18121481259f5157b4129afe2078cfe1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;preprocessor-options#Preprocessor-Options&quot;&gt;Options Controlling the Preprocessor&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preprocessor-options#Preprocessor-Options&quot;&gt;Options Controlling the Preprocessorを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7419f71237f51267399c64c7786cdedb41924e54" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;rs_002f6000-and-powerpc-options#RS_002f6000-and-PowerPC-Options&quot;&gt;RS/6000 and PowerPC Options&lt;/a&gt;, for more information on whether long calls are necessary.</source>
          <target state="translated">長時間の通話が必要かどうかの詳細については、&lt;a href=&quot;rs_002f6000-and-powerpc-options#RS_002f6000-and-PowerPC-Options&quot;&gt;RS / 6000およびPowerPCオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="be6a4b97c04d8e12e6e473deb1c9a9e10689a66e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;standards#Standards&quot;&gt;Language Standards Supported by GCC&lt;/a&gt;, for details of freestanding and hosted environments.</source>
          <target state="translated">独立型およびホスト型環境の詳細については、&lt;a href=&quot;standards#Standards&quot;&gt;GCC&lt;/a&gt;でサポートされる言語標準を参照してください。</target>
        </trans-unit>
        <trans-unit id="ba9a6e9c7aff941ff05b9acae516bf8bb6d040a5" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;Machine-Dependent Options&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;submodel-options#Submodel-Options&quot;&gt;マシン依存オプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b2ef31c8cf0906842f80898060f3a9631a0e782b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;warning-options#Warning-Options&quot;&gt;Options to Request or Suppress Warnings&lt;/a&gt;, for more detail on these and related command-line options.</source>
          <target state="translated">これらおよび関連するコマンドラインオプションの詳細については、「&lt;a href=&quot;warning-options#Warning-Options&quot;&gt;警告を要求または抑制するオプション」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="434c807b2e25d15f5d415ef83533343f55fbfad1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;warning-options#Warning-Options&quot;&gt;Options to Request or Suppress Warnings&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;warning-options#Warning-Options&quot;&gt;警告を要求または抑制するオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">関連情報</target>
        </trans-unit>
        <trans-unit id="bda50b9f3b2060976d692aee1d5a5eba1e23d6ef" translate="yes" xml:space="preserve">
          <source>See also the &lt;code&gt;interrupt&lt;/code&gt; function attribute.</source>
          <target state="translated">&lt;code&gt;interrupt&lt;/code&gt; 関数属性も参照してください。</target>
        </trans-unit>
        <trans-unit id="eeb6c38f7196a47f72f632cd6967a92ae3e51f69" translate="yes" xml:space="preserve">
          <source>See also under &lt;a href=&quot;x86-options#x86-Options&quot;&gt;x86 Options&lt;/a&gt; for standard options.</source>
          <target state="translated">標準オプションについては、「&lt;a href=&quot;x86-options#x86-Options&quot;&gt;x86オプション&lt;/a&gt;」も参照してください。</target>
        </trans-unit>
        <trans-unit id="0ac2d935c64bc2be469f96342d1ea704cfe35909" translate="yes" xml:space="preserve">
          <source>See below for a documentation of the individual parameters controlling inlining and for the defaults of these parameters.</source>
          <target state="translated">インラインを制御する個々のパラメータの説明と、これらのパラメータのデフォルト値については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="2ccea17a61232afe4c2d489d47c0c9f6ac6d3602" translate="yes" xml:space="preserve">
          <source>Select a different format for printing diagnostics. &lt;var&gt;FORMAT&lt;/var&gt; is &amp;lsquo;</source>
          <target state="translated">診断の印刷に別のフォーマットを選択します。 &lt;var&gt;FORMAT&lt;/var&gt; は '</target>
        </trans-unit>
        <trans-unit id="1ce47ca4d6aa3221bdc1ff64eaa11ecfaa3bd85d" translate="yes" xml:space="preserve">
          <source>Select application model &lt;var&gt;app-model&lt;/var&gt;. Valid models are</source>
          <target state="translated">アプリケーションモデル &lt;var&gt;app-model&lt;/var&gt; を選択します。有効なモデルは</target>
        </trans-unit>
        <trans-unit id="d1e50956bbd1c0ef350e09e3963ba2a16dd200cb" translate="yes" xml:space="preserve">
          <source>Select between generating code that executes in ARM and Thumb states. The default for most configurations is to generate code that executes in ARM state, but the default can be changed by configuring GCC with the</source>
          <target state="translated">ARM状態で実行するコードを生成するか、Thumb状態で実行するコードを生成するかを選択します。ほとんどの構成では、ARM 状態で実行されるコードを生成するのがデフォルトですが、GCC を</target>
        </trans-unit>
        <trans-unit id="fbbf6e0767f80e0a0e9d40cacab1bf157a107962" translate="yes" xml:space="preserve">
          <source>Select big- or little-endian code. The default is little-endian.</source>
          <target state="translated">ビッグエンディアンまたはリトルエンディアンのコードを選択します。デフォルトはリトルエンディアンです。</target>
        </trans-unit>
        <trans-unit id="b9e930cb008c241b5c815eaa75c8616049a76f3c" translate="yes" xml:space="preserve">
          <source>Select fraction of the entry block frequency of executions of basic block in function given basic block needs to have to be considered hot.</source>
          <target state="translated">関数内の基本ブロックの実行頻度のエントリブロックの小数を選択してください基本的なブロックはホットと見なされなければならない必要があります。</target>
        </trans-unit>
        <trans-unit id="5d7f15e7b6cef89c571f030f1f45d8b85b80d1bd" translate="yes" xml:space="preserve">
          <source>Select fraction of the maximal count of repetitions of basic block in program given basic block needs to have to be considered hot (used in non-LTO mode)</source>
          <target state="translated">プログラム内の基本ブロックの繰り返し回数の最大値の小数を選択します。</target>
        </trans-unit>
        <trans-unit id="36c07223da795b37e11fd68e818cf3c38a43554f" translate="yes" xml:space="preserve">
          <source>Select fraction of the maximal frequency of executions of a basic block in a function to align the basic block.</source>
          <target state="translated">基本ブロックを整列させるための関数で、基本ブロックの実行頻度の最大値の端数を選択します。</target>
        </trans-unit>
        <trans-unit id="9dc9d80b086954c572282f72064b77416ea46446" translate="yes" xml:space="preserve">
          <source>Select hardware or software floating-point implementations. The default is soft float.</source>
          <target state="translated">ハードウェアまたはソフトウェアの浮動小数点の実装を選択します。デフォルトはソフトフロートです。</target>
        </trans-unit>
        <trans-unit id="4805085c7cdeea70b47df74e1f45155c6818e56a" translate="yes" xml:space="preserve">
          <source>Select the CPU for which code is generated. &lt;var&gt;name&lt;/var&gt; may be one of &amp;lsquo;</source>
          <target state="translated">コードが生成されるCPUを選択します。 &lt;var&gt;name&lt;/var&gt; は '</target>
        </trans-unit>
        <trans-unit id="5298db8756dae785af6835a7d749dc6e4b0e83e6" translate="yes" xml:space="preserve">
          <source>Select the FDPIC ABI, which uses function descriptors to represent pointers to functions. Without any PIC/PIE-related options, it implies</source>
          <target state="translated">関数記述子を使用して関数へのポインタを表現するFDPIC ABIを選択します。PIC/PIE関連のオプションがない場合は</target>
        </trans-unit>
        <trans-unit id="b96987a051865812581f43da2e6b76b38be2e5d6" translate="yes" xml:space="preserve">
          <source>Select the MCU to target. This is used to create a C preprocessor symbol based upon the MCU name, converted to upper case and pre- and post-fixed with &amp;lsquo;</source>
          <target state="translated">ターゲットにするMCUを選択します。これは、MCU名に基づいてCプリプロセッサシンボルを作成するために使用され、大文字に変換され、 'で前後に固定されます。</target>
        </trans-unit>
        <trans-unit id="34d05e3013dad1f7bde8dbed8f375c5a52258615" translate="yes" xml:space="preserve">
          <source>Select the branch protection features to use. &amp;lsquo;</source>
          <target state="translated">使用するブランチ保護機能を選択します。」</target>
        </trans-unit>
        <trans-unit id="2bf2cc4264a1022ff36bdedefe29b59b658dcdb3" translate="yes" xml:space="preserve">
          <source>Select the floating-point processor. This option can only be used with</source>
          <target state="translated">浮動小数点プロセッサを選択します。このオプションは</target>
        </trans-unit>
        <trans-unit id="980188b0321fba68ce5bd61028cfbc3eaef9c423" translate="yes" xml:space="preserve">
          <source>Select the function scope on which branch protection will be applied. The behavior and permissible arguments are the same as for the command-line option</source>
          <target state="translated">ブランチ保護を適用する関数スコープを選択します。動作および許容される引数は、コマンドラインオプション</target>
        </trans-unit>
        <trans-unit id="d7cbd726a83eac18e26570056a1fab4af001c14c" translate="yes" xml:space="preserve">
          <source>Select the function scope on which return address signing will be applied. Permissible values are &amp;lsquo;</source>
          <target state="translated">リターンアドレス署名が適用される関数スコープを選択します。許容値は '</target>
        </trans-unit>
        <trans-unit id="429411e25d795ae5c5e83a75cda8f5a21a98ceca" translate="yes" xml:space="preserve">
          <source>Select the function scope on which return address signing will be applied. The behavior and permissible arguments are the same as for the command-line option</source>
          <target state="translated">リターンアドレス署名を適用する関数スコープを選択します。動作および許容される引数は、コマンドラインオプション</target>
        </trans-unit>
        <trans-unit id="cad7dc1efa3eac596691110965725da6620b1019" translate="yes" xml:space="preserve">
          <source>Select the processor type for which to generate code. Possible values are &amp;lsquo;</source>
          <target state="translated">コードを生成するプロセッサタイプを選択します。可能な値は '</target>
        </trans-unit>
        <trans-unit id="8f2f44369855722542be7f026c33d280a03e5883" translate="yes" xml:space="preserve">
          <source>Select the type of traceback table. Valid values for &lt;var&gt;traceback_type&lt;/var&gt; are &amp;lsquo;</source>
          <target state="translated">トレースバックテーブルのタイプを選択します。 &lt;var&gt;traceback_type&lt;/var&gt; の有効な値は '</target>
        </trans-unit>
        <trans-unit id="7e33cf27814e6b940d30b3e1737b7c77cdf2dd07" translate="yes" xml:space="preserve">
          <source>Selects one of the built-in core configurations. Each MeP chip has one or more modules in it; each module has a core CPU and a variety of coprocessors, optional instructions, and peripherals. The &lt;code&gt;MeP-Integrator&lt;/code&gt; tool, not part of GCC, provides these configurations through this option; using this option is the same as using all the corresponding command-line options. The default configuration is &amp;lsquo;</source>
          <target state="translated">組み込みコア構成の1つを選択します。各MePチップには1つ以上のモジュールが含まれています。各モジュールには、コアCPUとさまざまなコプロセッサー、オプションの命令、およびペリフェラルがあります。 &lt;code&gt;MeP-Integrator&lt;/code&gt; ツール、GCCの一部ではないが、このオプションを使用して、これらの構成を提供します。このオプションを使用することは、対応するすべてのコマンドラインオプションを使用することと同じです。デフォルトの構成は '</target>
        </trans-unit>
        <trans-unit id="365acdbdf4035eefca1a110d44e0b136c3ce634c" translate="yes" xml:space="preserve">
          <source>Selects the IEEE rounding mode. Other Alpha compilers call this option</source>
          <target state="translated">IEEE丸めモードを選択します。他のAlphaコンパイラはこのオプションを</target>
        </trans-unit>
        <trans-unit id="994fea32157f20c5fab4acc82606581a7793a57c" translate="yes" xml:space="preserve">
          <source>Selects the type of CPU to be targeted. Currently the only supported type is &amp;lsquo;</source>
          <target state="translated">対象とするCPUの種類を選択します。現在サポートされているタイプは '</target>
        </trans-unit>
        <trans-unit id="c91d8046baa6bef1bf16fff71b19c1547c4000e2" translate="yes" xml:space="preserve">
          <source>Selects the type of RX CPU to be targeted. Currently three types are supported, the generic &amp;lsquo;</source>
          <target state="translated">ターゲットにするRX CPUのタイプを選択します。現在3つのタイプがサポートされています、一般的な '</target>
        </trans-unit>
        <trans-unit id="aaf8d2e6bd32db4a0d11443d63ebb0f809925ed1" translate="yes" xml:space="preserve">
          <source>Selects which section constant data is placed in. &lt;var&gt;name&lt;/var&gt; may be &amp;lsquo;</source>
          <target state="translated">どのセクション定数データを配置するかを選択します。 &lt;var&gt;name&lt;/var&gt; は '</target>
        </trans-unit>
        <trans-unit id="a326f0729df90ca61ebaebd51aa74199758de422" translate="yes" xml:space="preserve">
          <source>Sending a message in the GNU Objective-C runtime is composed of two separate steps. First, there is a call to the lookup function, &lt;code&gt;objc_msg_lookup ()&lt;/code&gt; (or, in the case of messages to super, &lt;code&gt;objc_msg_lookup_super ()&lt;/code&gt;). This runtime function takes as argument the receiver and the selector of the method to be called; it returns the &lt;code&gt;IMP&lt;/code&gt;, that is a pointer to the function implementing the method. The second step of method invocation consists of casting this pointer function to the appropriate function pointer type, and calling the function pointed to it with the right arguments.</source>
          <target state="translated">GNU Objective-Cランタイムでのメッセージの送信は、2つの別個のステップで構成されています。最初に、ルックアップ関数 &lt;code&gt;objc_msg_lookup ()&lt;/code&gt; （または、スーパーへのメッセージの場合は &lt;code&gt;objc_msg_lookup_super ()&lt;/code&gt; ）の呼び出しがあります。このランタイム関数は引数として、呼び出されるメソッドのレシーバーとセレクターを受け取ります。メソッドを実装する関数へのポインタである &lt;code&gt;IMP&lt;/code&gt; を返します。メソッド呼び出しの2番目のステップは、このポインター関数を適切な関数ポインター型にキャストし、正しい引数でそれを指す関数を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="b72ffc8386ea0ea78c13552225aab02558985774" translate="yes" xml:space="preserve">
          <source>Separate as much DWARF debugging information as possible into a separate output file with the extension</source>
          <target state="translated">できるだけ多くの DWARF デバッグ情報を、拡張子のある別の出力ファイルに分離してください。</target>
        </trans-unit>
        <trans-unit id="a0c8baa5021f22a8ce8d11940201cb0f1ef70ad0" translate="yes" xml:space="preserve">
          <source>Sequential Consistency</source>
          <target state="translated">逐次一貫性</target>
        </trans-unit>
        <trans-unit id="db8c4e6b85438b041d4b954b044c9acc5ea86188" translate="yes" xml:space="preserve">
          <source>Set 80387 floating-point precision to 32, 64 or 80 bits. When</source>
          <target state="translated">80387 浮動小数点精度を32、64、80ビットに設定します。設定時</target>
        </trans-unit>
        <trans-unit id="6f094549c4101d290a41a69929786b1083499073" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_dispatch_id&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;enable_sgpr_dispatch_id&lt;/code&gt; フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="e063a374a4f9b63d6fbc54a457afb454bf3dc60b" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_dispatch_ptr&lt;/code&gt; flag. Always on (required to locate the launch dimensions).</source>
          <target state="translated">&lt;code&gt;enable_sgpr_dispatch_ptr&lt;/code&gt; フラグを設定します。常にオン（起動寸法を見つけるために必要）。</target>
        </trans-unit>
        <trans-unit id="4bf6767f6db51278dce4ba489ee759bfe27ca860" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_flat_scratch_init&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;enable_sgpr_flat_scratch_init&lt;/code&gt; フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="e018c4a2413ef8651cec5e018baeed25a64535ef" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_grid_workgroup_count_x&lt;/code&gt; flag. Always on (required to use OpenACC/OpenMP).</source>
          <target state="translated">&lt;code&gt;enable_sgpr_grid_workgroup_count_x&lt;/code&gt; フラグを設定します。常にオン（OpenACC / OpenMPを使用するために必要）。</target>
        </trans-unit>
        <trans-unit id="8a3463fca2684949d657154ef95e5116320e933b" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_grid_workgroup_count_y&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;enable_sgpr_grid_workgroup_count_y&lt;/code&gt; フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="9121d61d52bfdfdb7d41c445246f7a36b8486d92" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_grid_workgroup_count_z&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;enable_sgpr_grid_workgroup_count_z&lt;/code&gt; フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="47dd861ea509bc2bed29c0b97e6909d4e6ec3ffa" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_kernarg_segment_ptr&lt;/code&gt; flag. Always on (required to locate the kernel arguments, &quot;kernargs&quot;).</source>
          <target state="translated">&lt;code&gt;enable_sgpr_kernarg_segment_ptr&lt;/code&gt; フラグを設定します。常にオン（カーネル引数「kernargs」を見つけるために必要）。</target>
        </trans-unit>
        <trans-unit id="cd7c041f21c0b317df592ef375a2d79306809a19" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_private_segment_buffer&lt;/code&gt; flag. Always on (required to locate the stack).</source>
          <target state="translated">&lt;code&gt;enable_sgpr_private_segment_buffer&lt;/code&gt; フラグを設定します。常にオン（スタックを見つけるために必要）。</target>
        </trans-unit>
        <trans-unit id="6cb3983fd9748551d692e967fc5d0571ccaac036" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_private_segment_size&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;enable_sgpr_private_segment_size&lt;/code&gt; フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="e321e30fee9a76386f96bea4dafdd22df3c58297" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_private_segment_wave_byte_offset&lt;/code&gt; flag. Always on (required to locate the stack).</source>
          <target state="translated">&lt;code&gt;enable_sgpr_private_segment_wave_byte_offset&lt;/code&gt; フラグを設定します。常にオン（スタックを見つけるために必要）。</target>
        </trans-unit>
        <trans-unit id="318a046da8f702fe1ef7095bb61e01886dd9a552" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_queue_ptr&lt;/code&gt; flag. Always on (required to convert address spaces).</source>
          <target state="translated">&lt;code&gt;enable_sgpr_queue_ptr&lt;/code&gt; フラグを設定します。常にオン（アドレススペースの変換に必要）。</target>
        </trans-unit>
        <trans-unit id="f2dea393dcbc34f57c9589ed5c20be98ac3c0bd2" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_workgroup_id_x&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;enable_sgpr_workgroup_id_x&lt;/code&gt; フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="922f6db77c2bc32594aaaea2ec14d4d827c574c4" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_workgroup_id_y&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;enable_sgpr_workgroup_id_y&lt;/code&gt; フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="14e0b73f99741e4ae34f7adcad5960d6204fcfd0" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_workgroup_id_z&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;enable_sgpr_workgroup_id_z&lt;/code&gt; フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="31293ecfe585105b73e60e083df6e0122cc62953" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_sgpr_workgroup_info&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;enable_sgpr_workgroup_info&lt;/code&gt; フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="380057a6f93584a7133cb8fb90b07c8a8cc27fc3" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_vgpr_workitem_id&lt;/code&gt; parameter. Always on (can&amp;rsquo;t be disabled).</source>
          <target state="translated">&lt;code&gt;enable_vgpr_workitem_id&lt;/code&gt; パラメータを設定します。常にオン（無効にすることはできません）。</target>
        </trans-unit>
        <trans-unit id="2399bb34bb60e0afafdf365068c0d7d3cf7ce8fd" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_vgpr_workitem_id&lt;/code&gt; parameter. Always on (required to enable vectorization.)</source>
          <target state="translated">&lt;code&gt;enable_vgpr_workitem_id&lt;/code&gt; パラメータを設定します。常にオン（ベクトル化を有効にするために必要です。）</target>
        </trans-unit>
        <trans-unit id="82aa777ac54dda2b6c22bad4293654db9c8f37c4" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;enable_vgpr_workitem_id&lt;/code&gt; parameter. Always on (required to use OpenACC/OpenMP).</source>
          <target state="translated">&lt;code&gt;enable_vgpr_workitem_id&lt;/code&gt; パラメータを設定します。常にオン（OpenACC / OpenMPを使用するために必要）。</target>
        </trans-unit>
        <trans-unit id="1105231c54783be6055a3890df5dbc54a64a890f" translate="yes" xml:space="preserve">
          <source>Set IACC0H to &lt;var&gt;x&lt;/var&gt; if &lt;var&gt;reg&lt;/var&gt; is 0 and IACC0L to &lt;var&gt;x&lt;/var&gt; if &lt;var&gt;reg&lt;/var&gt; is 1. Other values of &lt;var&gt;reg&lt;/var&gt; are rejected as invalid.</source>
          <target state="translated">セットIACC0Hへ &lt;var&gt;x&lt;/var&gt; 場合 &lt;var&gt;reg&lt;/var&gt; が 0とIACC0Lである &lt;var&gt;x&lt;/var&gt; あれば &lt;var&gt;reg&lt;/var&gt; 1.他の値である &lt;var&gt;reg&lt;/var&gt; の無効として拒否されています。</target>
        </trans-unit>
        <trans-unit id="ee53a79e935585433b8493e61ec418d3cf4dbe69" translate="yes" xml:space="preserve">
          <source>Set all subsequent functions to have the &lt;code&gt;long_call&lt;/code&gt; attribute.</source>
          <target state="translated">後続のすべての関数を &lt;code&gt;long_call&lt;/code&gt; 属性を持つように設定します。</target>
        </trans-unit>
        <trans-unit id="d60d9bf9dcc9adc753b1eb2a43c3660a75d81801" translate="yes" xml:space="preserve">
          <source>Set all subsequent functions to have the &lt;code&gt;short_call&lt;/code&gt; attribute.</source>
          <target state="translated">後続のすべての関数を &lt;code&gt;short_call&lt;/code&gt; 属性を持つように設定します。</target>
        </trans-unit>
        <trans-unit id="97836a72f6504940ee575ca631515c1b5c65d1b7" translate="yes" xml:space="preserve">
          <source>Set architecture type or tuning for &lt;var&gt;gpu&lt;/var&gt;. Supported values for &lt;var&gt;gpu&lt;/var&gt; are</source>
          <target state="translated">&lt;var&gt;gpu&lt;/var&gt; のアーキテクチャタイプまたはチューニングを設定します。 &lt;var&gt;gpu&lt;/var&gt; でサポートされている値は</target>
        </trans-unit>
        <trans-unit id="0c9ead2e0e9ad50453ecaadabc1a54be0e28b16c" translate="yes" xml:space="preserve">
          <source>Set architecture type, register usage, and instruction scheduling parameters for &lt;var&gt;cpu&lt;/var&gt;. There are also shortcut alias options available for backward compatibility and convenience. Supported values for &lt;var&gt;cpu&lt;/var&gt; are</source>
          <target state="translated">&lt;var&gt;cpu&lt;/var&gt; のアーキテクチャタイプ、レジスタ使用法、および命令スケジューリングパラメータを設定します。下位互換性と利便性のために使用できるショートカットエイリアスオプションもあります。 &lt;var&gt;cpu&lt;/var&gt; でサポートされている値は</target>
        </trans-unit>
        <trans-unit id="64a7071b5e71b31be5eb05dbe2fa3aa85d88985c" translate="yes" xml:space="preserve">
          <source>Set architecture type, register usage, and instruction scheduling parameters for machine type &lt;var&gt;cpu_type&lt;/var&gt;. Supported values for &lt;var&gt;cpu_type&lt;/var&gt; are &amp;lsquo;</source>
          <target state="translated">マシンタイプ &lt;var&gt;cpu_type&lt;/var&gt; のアーキテクチャタイプ、レジスタ使用法、および命令スケジューリングパラメータを設定します。 &lt;var&gt;cpu_type&lt;/var&gt; でサポートされている値は '</target>
        </trans-unit>
        <trans-unit id="2d8d13e552ebd3846286db451c6c5b431512dad9" translate="yes" xml:space="preserve">
          <source>Set instruction scheduling parameters for &lt;var&gt;cpu&lt;/var&gt;, overriding any implied by</source>
          <target state="translated">&lt;var&gt;cpu&lt;/var&gt; の命令スケジューリングパラメータを設定して、</target>
        </trans-unit>
        <trans-unit id="2715a46db2794f249b7a95e35f8fbd08b56ac85b" translate="yes" xml:space="preserve">
          <source>Set name of __fentry__ symbol called at function entry for -pg -mfentry functions.</source>
          <target state="translated">pg -mfentry関数の関数エントリで呼び出される__fentry__シンボルの名前を設定します。</target>
        </trans-unit>
        <trans-unit id="516912ad28df352c9af39b170d45bd0f779026e3" translate="yes" xml:space="preserve">
          <source>Set name of section to record -mrecord-mcount calls (default __mcount_loc).</source>
          <target state="translated">mrecord-mcountコールを記録するセクションの名前を設定します(デフォルトの__mcount_loc)。</target>
        </trans-unit>
        <trans-unit id="5b5c27a6d88589e59ef75449f5dd3ac676e7651f" translate="yes" xml:space="preserve">
          <source>Set only the instruction scheduling parameters for machine type &lt;var&gt;cpu_type&lt;/var&gt;. The instruction set is not changed.</source>
          <target state="translated">マシンタイプ &lt;var&gt;cpu_type&lt;/var&gt; の命令スケジューリングパラメーターのみを設定します。命令セットは変更されません。</target>
        </trans-unit>
        <trans-unit id="96d85595444fd17f8fc2c443c3589b270f0ca169" translate="yes" xml:space="preserve">
          <source>Set probability threshold for unaligning branches. When tuning for &amp;lsquo;</source>
          <target state="translated">分岐を整列しない確率のしきい値を設定します。をチューニングするとき</target>
        </trans-unit>
        <trans-unit id="0ea21e9156c401cfb3bdea0993d6be3967bad591" translate="yes" xml:space="preserve">
          <source>Set the branch costs for conditional branch instructions to &lt;var&gt;cost&lt;/var&gt;. Reasonable values for &lt;var&gt;cost&lt;/var&gt; are small, non-negative integers. The default branch cost is 0.</source>
          <target state="translated">条件付き分岐命令の分岐コストをcostに設定し &lt;var&gt;cost&lt;/var&gt; 。 &lt;var&gt;cost&lt;/var&gt; 妥当な値は、負ではない小さな整数です。デフォルトのブランチコストは0です。</target>
        </trans-unit>
        <trans-unit id="0f86bf8c6795fb942b4cb5cea169bd8c5df0318b" translate="yes" xml:space="preserve">
          <source>Set the branch costs to roughly &lt;code&gt;n&lt;/code&gt; instructions. The default is 1.</source>
          <target state="translated">分岐コストを約 &lt;code&gt;n&lt;/code&gt; 命令に設定します。デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="ff18182da94c7d99a8b4c2f28568b2d883024732" translate="yes" xml:space="preserve">
          <source>Set the code model to one of</source>
          <target state="translated">コードモデルを以下のいずれかに設定します。</target>
        </trans-unit>
        <trans-unit id="78eeaac8789a3827df0a0d0ed12693670bedcea6" translate="yes" xml:space="preserve">
          <source>Set the cost of branches to roughly &lt;var&gt;n&lt;/var&gt; instructions.</source>
          <target state="translated">ブランチのコストをおよそ &lt;var&gt;n&lt;/var&gt; 命令に設定します。</target>
        </trans-unit>
        <trans-unit id="d6c018249bccc05c5ac1fc5bfd4c0431b5934b35" translate="yes" xml:space="preserve">
          <source>Set the cost of branches to roughly &lt;var&gt;num&lt;/var&gt; &amp;ldquo;simple&amp;rdquo; instructions. This cost is only a heuristic and is not guaranteed to produce consistent results across releases.</source>
          <target state="translated">大まかに枝のコストを設定し &lt;var&gt;num&lt;/var&gt; 「シンプル」の指示。このコストはあくまでも発見的であり、リリース間で一貫した結果が得られるとは限りません。</target>
        </trans-unit>
        <trans-unit id="52c26e276ceb37a9e0ef6641f16eb200d20fd608" translate="yes" xml:space="preserve">
          <source>Set the cost of branches to roughly &lt;var&gt;num&lt;/var&gt; &amp;ldquo;simple&amp;rdquo; instructions. This cost is only a heuristic and is not guaranteed to produce consistent results across releases. A zero cost redundantly selects the default, which is based on the</source>
          <target state="translated">大まかに枝のコストを設定し &lt;var&gt;num&lt;/var&gt; 「シンプル」の指示。このコストはあくまでも発見的であり、リリース間で一貫した結果が得られるとは限りません。ゼロコストは、デフォルトに冗長的に選択します。これは、</target>
        </trans-unit>
        <trans-unit id="5a0841b373cdd65fccf05bdefa98b9359151f994" translate="yes" xml:space="preserve">
          <source>Set the cost to assume for a multiply insn.</source>
          <target state="translated">掛け合わせINNを想定したコストを設定します。</target>
        </trans-unit>
        <trans-unit id="9b5cc228ada7a61f910769476607cbb994fb6862" translate="yes" xml:space="preserve">
          <source>Set the default ELF image symbol visibility to the specified option&amp;mdash;all symbols are marked with this unless overridden within the code. Using this feature can very substantially improve linking and load times of shared object libraries, produce more optimized code, provide near-perfect API export and prevent symbol clashes. It is &lt;strong&gt;strongly&lt;/strong&gt; recommended that you use this in any shared objects you distribute.</source>
          <target state="translated">デフォルトのELFイメージシンボルの可視性を指定したオプションに設定します。コード内でオーバーライドされない限り、すべてのシンボルにこのマークが付けられます。この機能を使用すると、共有オブジェクトライブラリのリンクと読み込み時間を大幅に改善し、より最適化されたコードを生成し、ほぼ完璧なAPIエクスポートを提供し、シンボルの衝突を防ぐことができます。配布するすべての共有オブジェクトでこれを使用することを&lt;strong&gt;強く&lt;/strong&gt;お勧めします。</target>
        </trans-unit>
        <trans-unit id="ea1605288d268d2678207ef0c71d1f4525e63f8a" translate="yes" xml:space="preserve">
          <source>Set the default instance variable visibility to the specified option so that instance variables declared outside the scope of any access modifier directives default to the specified visibility.</source>
          <target state="translated">デフォルトのインスタンス変数の可視性を指定されたオプションに設定して、アクセス修飾子ディレクティブの範囲外で宣言されたインスタンス変数が指定された可視性をデフォルトにするようにします。</target>
        </trans-unit>
        <trans-unit id="2a86ab7ec489c5eb483da27838bf7e2eb9274102" translate="yes" xml:space="preserve">
          <source>Set the default scalar storage order of structures and unions to the specified endianness. The accepted values are &amp;lsquo;</source>
          <target state="translated">構造体と共用体のデフォルトのスカラー格納順序を、指定されたエンディアンに設定します。受け入れられる値は '</target>
        </trans-unit>
        <trans-unit id="f3dbc51abbb4a58e848b6c7fade12f6fc892b4eb" translate="yes" xml:space="preserve">
          <source>Set the default size of pointers. Possible options for &lt;var&gt;size&lt;/var&gt; are &amp;lsquo;</source>
          <target state="translated">ポインタのデフォルトサイズを設定します。 &lt;var&gt;size&lt;/var&gt; 可能なオプションは '</target>
        </trans-unit>
        <trans-unit id="62f2e2f7b01631d9a6515e5e155db801fef2b550" translate="yes" xml:space="preserve">
          <source>Set the directory to search for plugins that are passed by</source>
          <target state="translated">で渡されるプラグインを検索するディレクトリを設定します。</target>
        </trans-unit>
        <trans-unit id="344c767b23b4250954654e45ee61197856443517" translate="yes" xml:space="preserve">
          <source>Set the directory to search for the profile data files in to &lt;var&gt;path&lt;/var&gt;. This option affects only the profile data generated by</source>
          <target state="translated">プロファイルデータファイルを検索するディレクトリを &lt;var&gt;path&lt;/var&gt; に設定します。このオプションは、によって生成されたプロファイルデータにのみ影響します</target>
        </trans-unit>
        <trans-unit id="c88a9680382a42696b15d1fef7d2ae2621b8c420" translate="yes" xml:space="preserve">
          <source>Set the distance between tab stops. This helps the preprocessor report correct column numbers in warnings or errors, even if tabs appear on the line. If the value is less than 1 or greater than 100, the option is ignored. The default is 8.</source>
          <target state="translated">タブストップ間の距離を設定します。これは、行上にタブが表示されている場合でも、プリプロセッサが警告やエラーで正しい列番号を報告するのに役立ちます。値が1より小さいか100より大きい場合、このオプションは無視されます。デフォルトは8です。</target>
        </trans-unit>
        <trans-unit id="1d08f91e70e865b37a7c6408c62bba8aaf4795be" translate="yes" xml:space="preserve">
          <source>Set the division strategy to be used for integer division operations. &lt;var&gt;strategy&lt;/var&gt; can be one of:</source>
          <target state="translated">整数除算演算に使用する除算戦略を設定します。 &lt;var&gt;strategy&lt;/var&gt; は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="39cb7b5430317218ec8ac64bf16cfa98e3b257be" translate="yes" xml:space="preserve">
          <source>Set the execution character set, used for string and character constants. The default is UTF-8. &lt;var&gt;charset&lt;/var&gt; can be any encoding supported by the system&amp;rsquo;s &lt;code&gt;iconv&lt;/code&gt; library routine.</source>
          <target state="translated">文字列および文字定数に使用される実行文字セットを設定します。デフォルトはUTF-8です。 &lt;var&gt;charset&lt;/var&gt; は、システムの &lt;code&gt;iconv&lt;/code&gt; ライブラリルーチンでサポートされている任意のエンコーディングです。</target>
        </trans-unit>
        <trans-unit id="51202b29bb6ce9f52c2e1294c6b529a40bcf359f" translate="yes" xml:space="preserve">
          <source>Set the full 64-bit value of IACC0 to &lt;var&gt;x&lt;/var&gt;. The &lt;var&gt;reg&lt;/var&gt; argument is reserved for future expansion and must be 0.</source>
          <target state="translated">IACC0の完全な64ビット値を &lt;var&gt;x&lt;/var&gt; に設定します。 &lt;var&gt;reg&lt;/var&gt; 引数は、将来の拡張のために予約されており、0でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b310b7c6a38563bb5ac12d36d2b4fae1244b8499" translate="yes" xml:space="preserve">
          <source>Set the input character set, used for translation from the character set of the input file to the source character set used by GCC. If the locale does not specify, or GCC cannot get this information from the locale, the default is UTF-8. This can be overridden by either the locale or this command-line option. Currently the command-line option takes precedence if there&amp;rsquo;s a conflict. &lt;var&gt;charset&lt;/var&gt; can be any encoding supported by the system&amp;rsquo;s &lt;code&gt;iconv&lt;/code&gt; library routine.</source>
          <target state="translated">入力ファイルの文字セットからGCCで使用されるソース文字セットへの変換に使用される入力文字セットを設定します。ロケールが指定されていない場合、またはGCCがロケールからこの情報を取得できない場合、デフォルトはUTF-8です。これは、ロケールまたはこのコマンドラインオプションのいずれかによってオーバーライドできます。現在、競合がある場合はコマンドラインオプションが優先されます。 &lt;var&gt;charset&lt;/var&gt; は、システムの &lt;code&gt;iconv&lt;/code&gt; ライブラリルーチンでサポートされている任意のエンコーディングです。</target>
        </trans-unit>
        <trans-unit id="652927b7d54857ab31904ba55c5609207b150484" translate="yes" xml:space="preserve">
          <source>Set the instruction scheduling parameters for machine type &lt;var&gt;cpu_type&lt;/var&gt;, but do not set the architecture type or register usage, as</source>
          <target state="translated">マシンタイプ &lt;var&gt;cpu_type&lt;/var&gt; の命令スケジューリングパラメータを設定しますが、アーキテクチャタイプやレジスタの使用法は設定しないでください。</target>
        </trans-unit>
        <trans-unit id="11f00614fec90c6021e141511f6f276e35bf0cb8" translate="yes" xml:space="preserve">
          <source>Set the instruction scheduling parameters for machine type &lt;var&gt;cpu_type&lt;/var&gt;, but do not set the instruction set or register set that the option</source>
          <target state="translated">マシンタイプ &lt;var&gt;cpu_type&lt;/var&gt; の命令スケジューリングパラメータを設定しますが、オプションが設定されている命令セットまたはレジスタセットを設定しないでください</target>
        </trans-unit>
        <trans-unit id="50be1da58f5d233c63ebfa9b37341f9609727916" translate="yes" xml:space="preserve">
          <source>Set the instruction set and instruction scheduling parameters for machine type &lt;var&gt;cpu_type&lt;/var&gt;. You can specify either the &amp;lsquo;</source>
          <target state="translated">マシンタイプ &lt;var&gt;cpu_type&lt;/var&gt; の命令セットと命令スケジューリングパラメータを設定します。次のいずれかを指定できます</target>
        </trans-unit>
        <trans-unit id="3637c6b1faf044bd713cef9c135202d8f375fec1" translate="yes" xml:space="preserve">
          <source>Set the instruction set, register set, and instruction scheduling parameters for array element type &lt;var&gt;ae_type&lt;/var&gt;. Supported values for &lt;var&gt;ae_type&lt;/var&gt; are &amp;lsquo;</source>
          <target state="translated">配列要素タイプ &lt;var&gt;ae_type&lt;/var&gt; の命令セット、レジスタセット、および命令スケジューリングパラメータを設定します。 &lt;var&gt;ae_type&lt;/var&gt; でサポートされている値は '</target>
        </trans-unit>
        <trans-unit id="2130c0c09cc91a0c33f4d19aae8686d805e90ec1" translate="yes" xml:space="preserve">
          <source>Set the instruction set, register set, and instruction scheduling parameters for machine type &lt;var&gt;cpu_type&lt;/var&gt;. Supported values for &lt;var&gt;cpu_type&lt;/var&gt; are &amp;lsquo;</source>
          <target state="translated">マシンタイプ &lt;var&gt;cpu_type&lt;/var&gt; の命令セット、レジスタセット、および命令スケジューリングパラメータを設定します。 &lt;var&gt;cpu_type&lt;/var&gt; でサポートされている値は '</target>
        </trans-unit>
        <trans-unit id="4c79cc68a1f91929b96557468c86dfcad2cce72f" translate="yes" xml:space="preserve">
          <source>Set the internal debug counter lower and upper bound. &lt;var&gt;counter-value-list&lt;/var&gt; is a comma-separated list of &lt;var&gt;name&lt;/var&gt;:&lt;var&gt;lower_bound&lt;/var&gt;:&lt;var&gt;upper_bound&lt;/var&gt; tuples which sets the lower and the upper bound of each debug counter &lt;var&gt;name&lt;/var&gt;. The &lt;var&gt;lower_bound&lt;/var&gt; is optional and is zero initialized if not set. All debug counters have the initial upper bound of &lt;code&gt;UINT_MAX&lt;/code&gt;; thus &lt;code&gt;dbg_cnt&lt;/code&gt; returns true always unless the upper bound is set by this option. For example, with</source>
          <target state="translated">内部デバッグカウンターの下限と上限を設定します。 &lt;var&gt;counter-value-list&lt;/var&gt; のコンマ区切りリストである &lt;var&gt;name&lt;/var&gt; ： &lt;var&gt;lower_bound&lt;/var&gt; ： &lt;var&gt;upper_bound&lt;/var&gt; 下側及び上側各デバッグカウンタの下限設定タプル &lt;var&gt;name&lt;/var&gt; 。 &lt;var&gt;lower_bound&lt;/var&gt; オプションであり、設定されていない場合は、ゼロが初期化されています。すべてのデバッグカウンターには、 &lt;code&gt;UINT_MAX&lt;/code&gt; の初期上限があります。したがって、上限がこのオプションで設定されていない限り、 &lt;code&gt;dbg_cnt&lt;/code&gt; は常にtrueを返します。たとえば、</target>
        </trans-unit>
        <trans-unit id="6a2e63898a05f461ab31f6f83dad590dc851ec3a" translate="yes" xml:space="preserve">
          <source>Set the list of functions that are excluded from instrumentation (see the description of</source>
          <target state="translated">計装から除外される関数のリストを設定します (</target>
        </trans-unit>
        <trans-unit id="42e134132bf53619895cfe9c4d4c0a63e9ff7d7c" translate="yes" xml:space="preserve">
          <source>Set the maximum amount for a single stack increment operation. Large values can increase the speed of programs that contain functions that need a large amount of stack space, but they can also trigger a segmentation fault if the stack is extended too much. The default value is 0x1000.</source>
          <target state="translated">1 つのスタックインクリメント操作の最大量を設定します。大きな値を設定すると、大量のスタックスペースを必要とする関数を含むプログラムの速度を向上させることができますが、スタックを拡張しすぎるとセグメンテーション・フォールトを引き起こす可能性もあります。デフォルト値は 0x1000 です。</target>
        </trans-unit>
        <trans-unit id="d4f670c7bd6ab86529aad1732ecfea40af410c2b" translate="yes" xml:space="preserve">
          <source>Set the maximum instantiation depth for template classes to &lt;var&gt;n&lt;/var&gt;. A limit on the template instantiation depth is needed to detect endless recursions during template class instantiation. ANSI/ISO C++ conforming programs must not rely on a maximum depth greater than 17 (changed to 1024 in C++11). The default value is 900, as the compiler can run out of stack space before hitting 1024 in some situations.</source>
          <target state="translated">テンプレートクラスのインスタンス化の最大深度を &lt;var&gt;n&lt;/var&gt; に設定します。テンプレートクラスのインスタンス化中に無限の再帰を検出するには、テンプレートのインスタンス化の深さの制限が必要です。ANSI / ISO C ++準拠プログラムは、17を超える最大深度に依存してはなりません（C ++ 11で1024に変更）。コンパイラは状況によっては1024に到達する前にスタックスペースを使い果たす可能性があるため、デフォルト値は900です。</target>
        </trans-unit>
        <trans-unit id="f0c34cb3bf3e4cbb7843f5530d7dab6ff427a4a8" translate="yes" xml:space="preserve">
          <source>Set the maximum nested evaluation depth for C++11 constexpr functions to &lt;var&gt;n&lt;/var&gt;. A limit is needed to detect endless recursion during constant expression evaluation. The minimum specified by the standard is 512.</source>
          <target state="translated">C ++ 11 constexpr関数のネストされた評価の最大深度を &lt;var&gt;n&lt;/var&gt; に設定します。定数式の評価中に無限の再帰を検出するには、制限が必要です。標準で指定されている最小値は512です。</target>
        </trans-unit>
        <trans-unit id="b1da5be9c3391cd736caa92a61985889a98f2b05" translate="yes" xml:space="preserve">
          <source>Set the maximum number of existing candidates that are considered when seeking a basis for a new straight-line strength reduction candidate.</source>
          <target state="translated">新たな直線強度低下候補の根拠を求める際に考慮される既存候補の最大数を設定します。</target>
        </trans-unit>
        <trans-unit id="cfe13945b74f8afda07bf3e9441d08f927ed94f9" translate="yes" xml:space="preserve">
          <source>Set the maximum number of instructions executed in parallel in reassociated tree. This parameter overrides target dependent heuristics used by default if has non zero value.</source>
          <target state="translated">再関連ツリーで並列に実行される命令の最大数を設定します。このパラメータは、値が0以外の場合、デフォルトで使用されるターゲット依存ヒューリスティックをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="ad1d48dcf4aec833ed476a8c06e702825b1456b2" translate="yes" xml:space="preserve">
          <source>Set the maximum number of iterations for a loop in C++14 constexpr functions to &lt;var&gt;n&lt;/var&gt;. A limit is needed to detect infinite loops during constant expression evaluation. The default is 262144 (1&amp;lt;&amp;lt;18).</source>
          <target state="translated">C ++ 14 constexpr関数のループの最大反復回数を &lt;var&gt;n&lt;/var&gt; に設定します。定数式の評価中に無限ループを検出するには、制限が必要です。デフォルトは262144（1 &amp;lt;&amp;lt; 18）です。</target>
        </trans-unit>
        <trans-unit id="b10b01f3627d31eea1b8ecfa0a7d6381d1c99dfd" translate="yes" xml:space="preserve">
          <source>Set the maximum number of operations during a single constexpr evaluation. Even when number of iterations of a single loop is limited with the above limit, if there are several nested loops and each of them has many iterations but still smaller than the above limit, or if in a body of some loop or even outside of a loop too many expressions need to be evaluated, the resulting constexpr evaluation might take too long. The default is 33554432 (1&amp;lt;&amp;lt;25).</source>
          <target state="translated">単一のconstexpr評価中の操作の最大数を設定します。単一のループの反復数が上記の制限で制限されている場合でも、ネストされたループがいくつかあり、それらのそれぞれに多くの反復があるが、それでも上記の制限よりも小さい場合、または一部のループの本体内または外部の場合ループの評価が必要な式が多すぎると、結果のconstexpr評価に時間がかかりすぎる可能性があります。デフォルトは33554432（1 &amp;lt;&amp;lt; 25）です。</target>
        </trans-unit>
        <trans-unit id="2d5dabb85d70dc403cca1e25a382c4592a347c35" translate="yes" xml:space="preserve">
          <source>Set the maximum number of template instantiation notes for a single warning or error to &lt;var&gt;n&lt;/var&gt;. The default value is 10.</source>
          <target state="translated">1つの警告またはエラーのテンプレートインスタンス化メモの最大数を &lt;var&gt;n&lt;/var&gt; に設定します。デフォルト値は10です。</target>
        </trans-unit>
        <trans-unit id="47ea880c254638d27a922dbb4046bb1a923dc25e" translate="yes" xml:space="preserve">
          <source>Set the memory model in force on the processor to one of</source>
          <target state="translated">プロセッサに搭載されているメモリモデルを以下のいずれかに設定します。</target>
        </trans-unit>
        <trans-unit id="d8ff5750579f8eb1fad99e9d99cd9274a1f87812" translate="yes" xml:space="preserve">
          <source>Set the merge weights of the &lt;var&gt;directory1&lt;/var&gt; and &lt;var&gt;directory2&lt;/var&gt;, respectively. The default weights are 1 for both.</source>
          <target state="translated">&lt;var&gt;directory1&lt;/var&gt; と &lt;var&gt;directory2&lt;/var&gt; のマージの重みをそれぞれ設定します。デフォルトの重みはどちらも1です。</target>
        </trans-unit>
        <trans-unit id="e2cd2322187a5ecdca2024a2990e890bcbbf394b" translate="yes" xml:space="preserve">
          <source>Set the name of the library function used for 32-bit signed division to &lt;var&gt;name&lt;/var&gt;. This only affects the name used in the &amp;lsquo;</source>
          <target state="translated">32ビットの符号付き除算のために使用するライブラリ関数の名前設定 &lt;var&gt;name&lt;/var&gt; 。これは、「</target>
        </trans-unit>
        <trans-unit id="eaddd89d6c99265ee29e5fc045d536ee700140e2" translate="yes" xml:space="preserve">
          <source>Set the offset between the top of the stack and the stack pointer. E.g., a value of 8 means that the eight bytes in the range &lt;code&gt;sp+0&amp;hellip;sp+7&lt;/code&gt; can be used by leaf functions without stack allocation. Values other than &amp;lsquo;</source>
          <target state="translated">スタックの最上部とスタックポインターの間のオフセットを設定します。たとえば、値8は、 &lt;code&gt;sp+0&amp;hellip;sp+7&lt;/code&gt; の範囲の8バイトが、スタック割り当てなしでリーフ関数によって使用できることを意味します。'以外の値</target>
        </trans-unit>
        <trans-unit id="adf223dfbaa5deae634aec76651716f604f84bf4" translate="yes" xml:space="preserve">
          <source>Set the output profile directory. Default output directory name is &lt;var&gt;merged_profile&lt;/var&gt;.</source>
          <target state="translated">出力プロファイルディレクトリを設定します。デフォルトの出力ディレクトリ名は &lt;var&gt;merged_profile&lt;/var&gt; です。</target>
        </trans-unit>
        <trans-unit id="6e4acbb536ee226dd76cd7df2c462f1fe127b3f4" translate="yes" xml:space="preserve">
          <source>Set the output profile directory. Default output name is &lt;var&gt;rewrite_profile&lt;/var&gt;.</source>
          <target state="translated">出力プロファイルディレクトリを設定します。デフォルトの出力名は &lt;var&gt;rewrite_profile&lt;/var&gt; です。</target>
        </trans-unit>
        <trans-unit id="7c0d7893ab57d9f01b9082ae29d8d0f77891bc37" translate="yes" xml:space="preserve">
          <source>Set the prevailing mode of the floating-point unit. This determines the floating-point mode that is provided and expected at function call and return time. Making this mode match the mode you predominantly need at function start can make your programs smaller and faster by avoiding unnecessary mode switches.</source>
          <target state="translated">浮動小数点単位の実勢モードを設定します。これは、関数の呼び出し時と戻り時に提供され、期待される浮動小数点モードを決定します。このモードを関数開始時に主に必要とするモードと一致させることで、不要なモードの切り替えを避けることができ、プログラムの小型化と高速化を図ることができます。</target>
        </trans-unit>
        <trans-unit id="762a949ea014b3f016344afca377c6c1fd120d31" translate="yes" xml:space="preserve">
          <source>Set the threshold for hot counter value.</source>
          <target state="translated">ホットカウンタの値のしきい値を設定します。</target>
        </trans-unit>
        <trans-unit id="d1910b7ca1cbad135b71510c6caa598c927aef30" translate="yes" xml:space="preserve">
          <source>Set the verbose mode.</source>
          <target state="translated">冗長モードを設定します。</target>
        </trans-unit>
        <trans-unit id="44eafd221897534f159d32b54a0983fafc5fa037" translate="yes" xml:space="preserve">
          <source>Set the wide execution character set, used for wide string and character constants. The default is UTF-32 or UTF-16, whichever corresponds to the width of &lt;code&gt;wchar_t&lt;/code&gt;. As with</source>
          <target state="translated">ワイド文字列および文字定数に使用されるワイド実行文字セットを設定します。デフォルトは、UTF-32またはUTF-16のいずれかで、 &lt;code&gt;wchar_t&lt;/code&gt; の幅に対応します。と同じように</target>
        </trans-unit>
        <trans-unit id="bd789ae89e298186acebd68ef9887011219d47fa" translate="yes" xml:space="preserve">
          <source>Set to 1 if the prefetch hints should be issued for non-constant strides. Set to 0 if prefetch hints should be issued only for strides that are known to be constant and below</source>
          <target state="translated">プリフェッチヒントが一定ではない歩幅に対して発行されるべきである場合には1を設定します。一定であることが知られているストライドに対してのみ、プリフェッチヒントを発行する場合は0に設定します。</target>
        </trans-unit>
        <trans-unit id="dd1bb2779bea0f760b1f72945047e7f54094a87c" translate="yes" xml:space="preserve">
          <source>Sets a maximum number of hash table slots to use during variable tracking dataflow analysis of any function. If this limit is exceeded with variable tracking at assignments enabled, analysis for that function is retried without it, after removing all debug insns from the function. If the limit is exceeded even without debug insns, var tracking analysis is completely disabled for the function. Setting the parameter to zero makes it unlimited.</source>
          <target state="translated">任意の関数の変数追跡データフロー解析中に使用するハッシュテーブルスロットの最大数を設定します。割り当て時の変数追跡が有効な状態でこの制限を超えた場合、その関数の解析は、関数からすべてのデバッグ インスンを削除した後、制限なしで再試行されます。デバッグインシュンがなくても制限を超えた場合、その関数の変数追跡解析は完全に無効になります。パラメータをゼロに設定すると無制限になります。</target>
        </trans-unit>
        <trans-unit id="f4f7877852a522804eb61c6aaaac182eccebc50d" translate="yes" xml:space="preserve">
          <source>Sets a maximum number of recursion levels when attempting to map variable names or debug temporaries to value expressions. This trades compilation time for more complete debug information. If this is set too low, value expressions that are available and could be represented in debug information may end up not being used; setting this higher may enable the compiler to find more complex debug expressions, but compile time and memory use may grow.</source>
          <target state="translated">変数名やデバッグ用テンポラリを値の式にマッピングしようとするときの再帰レベルの最大数を設定します。これにより、コンパイル時間をより完全なデバッグ情報と交換します。これを低く設定しすぎると、利用可能でデバッグ情報で表現される可能性のある値式が使用されなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="08565d52b6000f5a1a238ccd0e999b10428d5194" translate="yes" xml:space="preserve">
          <source>Sets a threshold on the number of debug markers (e.g. begin stmt markers) to avoid complexity explosion at inlining or expanding to RTL. If a function has more such gimple stmts than the set limit, such stmts will be dropped from the inlined copy of a function, and from its RTL expansion.</source>
          <target state="translated">インライン化やRTLへの展開時に複雑さが爆発するのを避けるために、デバッグマーカー(例えば、Begin stmtマーカー)の数にしきい値を設定します。関数が設定された制限値よりも多くのギムプルstmtsを持っている場合、そのようなstmtsは関数のインラインコピーから、またRTLへの展開から削除されます。</target>
        </trans-unit>
        <trans-unit id="adcadd51c3ed80675dda04731a772d76952914d2" translate="yes" xml:space="preserve">
          <source>Sets the &amp;lsquo;</source>
          <target state="translated">「</target>
        </trans-unit>
        <trans-unit id="a6ae8e4718c6afa26e8b518098d3712cd253890c" translate="yes" xml:space="preserve">
          <source>Sets the latency the scheduler should assume for typical memory references as seen by the application. This number is highly dependent on the memory access patterns used by the application and the size of the external cache on the machine.</source>
          <target state="translated">スケジューラがアプリケーションから見た典型的なメモリ参照のために想定すべきレイテンシを設定します。この数値はアプリケーションが使用するメモリアクセスパターンとマシン上の外部キャッシュのサイズに大きく依存します。</target>
        </trans-unit>
        <trans-unit id="0fa1baca9f030dc5a8c265ad0c68afe11b1a04b0" translate="yes" xml:space="preserve">
          <source>Sets the model of atomic operations and additional parameters as a comma separated list. For details on the atomic built-in functions see &lt;a href=&quot;_005f_005fatomic-builtins#g_t_005f_005fatomic-Builtins&quot;&gt;__atomic Builtins&lt;/a&gt;. The following models and parameters are supported:</source>
          <target state="translated">アトミック操作のモデルと追加パラメーターをコンマ区切りリストとして設定します。&lt;a href=&quot;_005f_005fatomic-builtins#g_t_005f_005fatomic-Builtins&quot;&gt;アトミック組み込み&lt;/a&gt;関数の詳細については、__atomic Builtinsを参照してください。次のモデルとパラメータがサポートされています。</target>
        </trans-unit>
        <trans-unit id="7b750af233a34aa4bcb53aaa3706d626453eaabe" translate="yes" xml:space="preserve">
          <source>Sets the options</source>
          <target state="translated">オプションを設定します。</target>
        </trans-unit>
        <trans-unit id="fb449f71834cd30ec14d00c9d50ba85c232186d3" translate="yes" xml:space="preserve">
          <source>Setting</source>
          <target state="translated">Setting</target>
        </trans-unit>
        <trans-unit id="d6ea280156ba317ca69c3a8a9a76acf1203369c2" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;GCC_COMPARE_DEBUG&lt;/code&gt; is nearly equivalent to passing</source>
          <target state="translated">&lt;code&gt;GCC_COMPARE_DEBUG&lt;/code&gt; を設定することは、渡すこととほぼ同等です</target>
        </trans-unit>
        <trans-unit id="4baf79749a36e87ddec4441787603ea1ca97f46a" translate="yes" xml:space="preserve">
          <source>Setting the rounding of floating-point operations to less than the default 80 bits can speed some programs by 2% or more. Note that some mathematical libraries assume that extended-precision (80-bit) floating-point operations are enabled by default; routines in such libraries could suffer significant loss of accuracy, typically through so-called &amp;ldquo;catastrophic cancellation&amp;rdquo;, when this option is used to set the precision to less than extended precision.</source>
          <target state="translated">浮動小数点演算の丸めをデフォルトの80ビット未満に設定すると、一部のプログラムの速度が2％以上速くなる場合があります。一部の数学ライブラリでは、拡張精度（80ビット）浮動小数点演算がデフォルトで有効になっていると想定しています。このオプションを使用して精度を拡張精度よりも低く設定すると、このようなライブラリのルーチンは、通常、いわゆる「壊滅的なキャンセル」によって精度が大幅に低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="159856f2826a4750f12fa9fc42e4ec6a3bb1171a" translate="yes" xml:space="preserve">
          <source>Several parameters control the tree inliner used in GCC. This number sets the maximum number of instructions (counted in GCC&amp;rsquo;s internal representation) in a single function that the tree inliner considers for inlining. This only affects functions declared inline and methods implemented in a class declaration (C++).</source>
          <target state="translated">いくつかのパラメーターは、GCCで使用されるツリーインライナーを制御します。この数は、ツリーインライナーがインライン化のために考慮する単一の関数内の（GCCの内部表現でカウントされる）命令の最大数を設定します。これは、インラインで宣言された関数とクラス宣言（C ++）で実装されたメソッドにのみ影響します。</target>
        </trans-unit>
        <trans-unit id="c8709090fc808377d68cf694b1141ced48d2601f" translate="yes" xml:space="preserve">
          <source>Shift amount register</source>
          <target state="translated">シフト量レジスタ</target>
        </trans-unit>
        <trans-unit id="7fc448ecaaa6700b369be5c5a12e31cfde0d7dab" translate="yes" xml:space="preserve">
          <source>Shift count operand.</source>
          <target state="translated">シフトカウントオペランド。</target>
        </trans-unit>
        <trans-unit id="42345631131c9de97e00bb02984b6911be9a2bc4" translate="yes" xml:space="preserve">
          <source>Shift count operands are probably signed more often than unsigned. Warning about this would cause far more annoyance than good.</source>
          <target state="translated">シフトカウントのオペランドは、おそらく符号なしよりも符号付きの方が多いでしょう。これについての警告は、良いことよりもはるかに多くのイライラを引き起こすでしょう。</target>
        </trans-unit>
        <trans-unit id="dfe491f4c15e6a3a57cef7ef5658d06a18ca9681" translate="yes" xml:space="preserve">
          <source>Short Table of Contents</source>
          <target state="translated">目次の簡単なまとめ</target>
        </trans-unit>
        <trans-unit id="a3534d8b3591be1366a119ae1eea2780cd912060" translate="yes" xml:space="preserve">
          <source>Short instructions are used opportunistically.</source>
          <target state="translated">短い命令は日和見的に使用されます。</target>
        </trans-unit>
        <trans-unit id="4826dabecb65371171f46aae0549ce70f11c795f" translate="yes" xml:space="preserve">
          <source>Short structures and unions are those whose size and alignment match that of some integer type.</source>
          <target state="translated">短い構造体と結合は、サイズと整列が整数型と一致するものです。</target>
        </trans-unit>
        <trans-unit id="daad79e8ea5157946382f52ca69c7ec66d0706c4" translate="yes" xml:space="preserve">
          <source>Shorten some address references at link time, when possible; uses the linker option</source>
          <target state="translated">可能であれば、リンク時にいくつかのアドレス参照を短縮します。</target>
        </trans-unit>
        <trans-unit id="bf389fd92901d9498a4ee5b421310db154ba5af7" translate="yes" xml:space="preserve">
          <source>Shrink-wrap separate parts of the prologue and epilogue separately, so that those parts are only executed when needed. This option is on by default, but has no effect unless</source>
          <target state="translated">プロローグとエピローグの別々の部分を必要な時だけ実行するように、別々の部分をシュリンクラップします。このオプションはデフォルトではオンになっていますが</target>
        </trans-unit>
        <trans-unit id="3f90a5630eb62603c02b0eff8ce0d082b77006ba" translate="yes" xml:space="preserve">
          <source>Sign bit count. Return the number of consecutive bits in &lt;var&gt;value&lt;/var&gt; that have the same value as the sign bit. The result is the number of leading sign bits minus one, giving the number of redundant sign bits in &lt;var&gt;value&lt;/var&gt;.</source>
          <target state="translated">符号ビット数。符号ビットと同じ値を持つ &lt;var&gt;value&lt;/var&gt; の連続するビットの数を返します。結果は、先行する符号ビットの数から1を引いたものであり、 &lt;var&gt;value&lt;/var&gt; に冗長な符号ビットの数を与えます。</target>
        </trans-unit>
        <trans-unit id="e061183cc39dbc6eb9f3804e7d82ef6aa01d7857" translate="yes" xml:space="preserve">
          <source>Signed 11-bit integer constant</source>
          <target state="translated">符号付き11ビット整数定数</target>
        </trans-unit>
        <trans-unit id="17824e219e7e79f7144971183788b809379ad314" translate="yes" xml:space="preserve">
          <source>Signed 12-bit integer constant, for use in MOVI instructions</source>
          <target state="translated">MOVI 命令で使用するための符号付き 12 ビット整数定数</target>
        </trans-unit>
        <trans-unit id="2e366745a62f714ade88d7c0bd1a8931142b604e" translate="yes" xml:space="preserve">
          <source>Signed 13-bit constant</source>
          <target state="translated">符号付き13ビット定数</target>
        </trans-unit>
        <trans-unit id="4994a9f7bbfde0f98689a94230ffb2b0e3e5762e" translate="yes" xml:space="preserve">
          <source>Signed 13-bit constant, sign-extended to 32 or 64 bits</source>
          <target state="translated">符号付き13ビット定数、符号は32ビットまたは64ビットに拡張されます。</target>
        </trans-unit>
        <trans-unit id="7551ab4b6a7325d726d85dd8a288a32c7ad688ad" translate="yes" xml:space="preserve">
          <source>Signed 14-bit integer constant</source>
          <target state="translated">符号付き14ビット整数定数</target>
        </trans-unit>
        <trans-unit id="db68d6aa5c4dcc27204f228e4dfa27c519354e21" translate="yes" xml:space="preserve">
          <source>Signed 16 bit integer (in the range -32768 to 32767)</source>
          <target state="translated">符号付き16ビット整数(範囲-32768~32767)</target>
        </trans-unit>
        <trans-unit id="d6ec7293b64cddf6362ece0a6f483e55c61b7cd4" translate="yes" xml:space="preserve">
          <source>Signed 16-bit constant</source>
          <target state="translated">符号付き16ビット定数</target>
        </trans-unit>
        <trans-unit id="d5fed732c6b8716304eae31b104725b0d08b2445" translate="yes" xml:space="preserve">
          <source>Signed 16-bit constant (-32768&amp;ndash;32767)</source>
          <target state="translated">符号付き16ビット定数（-32768〜32767）</target>
        </trans-unit>
        <trans-unit id="404101bb3dac0d3736cddd146de5ec8c922d9a53" translate="yes" xml:space="preserve">
          <source>Signed 16-bit constant shifted left 16 bits</source>
          <target state="translated">符号付き 16 ビット定数を左にシフトした 16 ビット</target>
        </trans-unit>
        <trans-unit id="98375bb355d2181393a2db0e74a7f1e184e3c272" translate="yes" xml:space="preserve">
          <source>Signed 16-bit constant shifted left 16 bits. (Used with &lt;code&gt;l.movhi&lt;/code&gt;)</source>
          <target state="translated">符号付き16ビット定数は左に16ビットシフトしました。（ &lt;code&gt;l.movhi&lt;/code&gt; で使用）</target>
        </trans-unit>
        <trans-unit id="fdfaee517f78cd79192cde0e2bb40ec8bf507d88" translate="yes" xml:space="preserve">
          <source>Signed 16-bit integer constant.</source>
          <target state="translated">符号付き16ビット整数定数。</target>
        </trans-unit>
        <trans-unit id="8577a9d2f5d95e6a261403245526b07f6b430127" translate="yes" xml:space="preserve">
          <source>Signed 3 bit integer (in the range -3 to 4)</source>
          <target state="translated">符号付き 3 ビット整数 (-3 から 4 の範囲内)</target>
        </trans-unit>
        <trans-unit id="258aee98ee71baaef5cdc776f36eef32bd26c55b" translate="yes" xml:space="preserve">
          <source>Signed 4 bit integer (in the range -8 to 7)</source>
          <target state="translated">符号付き 4 ビット整数 (-8 から 7 の範囲内)</target>
        </trans-unit>
        <trans-unit id="7a883110530359bda18df559e5a279936aa50db5" translate="yes" xml:space="preserve">
          <source>Signed 5-bit constant</source>
          <target state="translated">符号付き5ビット定数</target>
        </trans-unit>
        <trans-unit id="2e5e45d0ac38a40e675de10e051b4dbe8bc4276a" translate="yes" xml:space="preserve">
          <source>Signed 5-bit constant integer that can be loaded into an altivec register.</source>
          <target state="translated">altivec レジスタにロード可能な符号付き 5 ビット定数整数。</target>
        </trans-unit>
        <trans-unit id="5f652f0cc47ab3c928aefe77d9c5b400f8c289d3" translate="yes" xml:space="preserve">
          <source>Signed 5-bit integer constant</source>
          <target state="translated">符号付き5ビット整数定数</target>
        </trans-unit>
        <trans-unit id="c9e48c645aa0b87a95100fbbeff86623f971b222" translate="yes" xml:space="preserve">
          <source>Signed 7 bit integer (in the range -64 to 63)</source>
          <target state="translated">符号付き 7 ビット整数 (-64 から 63 の範囲内)</target>
        </trans-unit>
        <trans-unit id="a86e1174fb545f9d4ebd6f20bf01348603efafe4" translate="yes" xml:space="preserve">
          <source>Signed 8-bit integer constant, for use in ADDI instructions</source>
          <target state="translated">ADDI 命令で使用するための符号付き 8 ビット整数定数</target>
        </trans-unit>
        <trans-unit id="4c94edb4279f10dbe5d95209fe71d0f96db252dc" translate="yes" xml:space="preserve">
          <source>Signed 8-bit integer constant.</source>
          <target state="translated">符号付き8ビット整数定数。</target>
        </trans-unit>
        <trans-unit id="d272c273c51624f1dfdb18228a674026c85385e3" translate="yes" xml:space="preserve">
          <source>Signed constant that fits in 32 bits</source>
          <target state="translated">32ビットに収まる符号付き定数</target>
        </trans-unit>
        <trans-unit id="f1265b4b3d2e744579f9692016435bbe3b254213" translate="yes" xml:space="preserve">
          <source>Signed constant that fits in 4 bits</source>
          <target state="translated">4ビットに収まる符号付き定数</target>
        </trans-unit>
        <trans-unit id="5fe2facf8fa221348236eecc0c22b38ad313e882" translate="yes" xml:space="preserve">
          <source>Signed constant that fits in 5 bits</source>
          <target state="translated">5ビットに収まる符号付き定数</target>
        </trans-unit>
        <trans-unit id="545b5582447a4f3516b54b2967e68fc278ea9ad8" translate="yes" xml:space="preserve">
          <source>Signed constant that fits in 6 bits</source>
          <target state="translated">6ビットに収まる符号付き定数</target>
        </trans-unit>
        <trans-unit id="fd73c4e772cdc0f6e26ab1480292e828319d76b5" translate="yes" xml:space="preserve">
          <source>Signed immediate 10-bit value.</source>
          <target state="translated">符号付きの即時10ビット値。</target>
        </trans-unit>
        <trans-unit id="c5a8dbe6ead600b15b992c7b4bcf2efdb71ef681" translate="yes" xml:space="preserve">
          <source>Signed immediate 11-bit value.</source>
          <target state="translated">符号付き即時11ビット値。</target>
        </trans-unit>
        <trans-unit id="a9356a59861e3c3eddcf1709eba030136286aebc" translate="yes" xml:space="preserve">
          <source>Signed immediate 15-bit value.</source>
          <target state="translated">符号付きの即時15ビット値。</target>
        </trans-unit>
        <trans-unit id="bd0cffbf0853e1a9f6e67fd93c760a34d836c070" translate="yes" xml:space="preserve">
          <source>Signed immediate 16-bit value.</source>
          <target state="translated">符号付きの即時16ビット値。</target>
        </trans-unit>
        <trans-unit id="a37369d99fd2a342362e9005528625a1180d725a" translate="yes" xml:space="preserve">
          <source>Signed immediate 17-bit value.</source>
          <target state="translated">符号付きの即時17ビット値。</target>
        </trans-unit>
        <trans-unit id="58ba7a0e897855d208deefd5f1aafdaebb7cbcad" translate="yes" xml:space="preserve">
          <source>Signed immediate 19-bit value.</source>
          <target state="translated">符号付き即時19ビット値。</target>
        </trans-unit>
        <trans-unit id="d83875e20f0c4256559e6ad41957f6681f0f9fa4" translate="yes" xml:space="preserve">
          <source>Signed immediate 20-bit value.</source>
          <target state="translated">符号付きの即時20ビット値。</target>
        </trans-unit>
        <trans-unit id="772df3ebaa8079e1347500ef9b5a7974d1afc6fb" translate="yes" xml:space="preserve">
          <source>Signed immediate 5-bit value.</source>
          <target state="translated">符号付き即時5ビット値。</target>
        </trans-unit>
        <trans-unit id="bed3d07e5abfe469789a6ad8fe518ca8c515cc56" translate="yes" xml:space="preserve">
          <source>Signed number whose magnitude is greater than 0x100</source>
          <target state="translated">マグニチュードが0x100より大きい符号付き数値</target>
        </trans-unit>
        <trans-unit id="7dd7717c5fdb2f197d7bb925e85ce43ecfb76df1" translate="yes" xml:space="preserve">
          <source>Signed number whose magnitude is greater than 0x80</source>
          <target state="translated">マグニチュードが0x80より大きい符号付き数値</target>
        </trans-unit>
        <trans-unit id="0939c3fe5c0d5d2bff40d1b5db20a06321bba976" translate="yes" xml:space="preserve">
          <source>Similar to</source>
          <target state="translated">に似ています。</target>
        </trans-unit>
        <trans-unit id="d539a06616b59e9c0b7a9e23630c3741a65d5d1c" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_alloca_with_align&lt;/code&gt; but takes an extra argument specifying an upper bound for &lt;var&gt;size&lt;/var&gt; in case its value cannot be computed at compile time, for use by</source>
          <target state="translated">&lt;code&gt;__builtin_alloca_with_align&lt;/code&gt; に似ていますが、コンパイル時に値を計算できない場合に備えて、 &lt;var&gt;size&lt;/var&gt; 上限を指定する追加の引数を取ります。</target>
        </trans-unit>
        <trans-unit id="ea1f6fc78d2de9307f7b88ab0282a15257495c59" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_bswap16&lt;/code&gt;, except the argument and return types are 32 bit.</source>
          <target state="translated">&lt;code&gt;__builtin_bswap16&lt;/code&gt; と同様ですが、引数と戻り値の型が32ビットであることを除きます。</target>
        </trans-unit>
        <trans-unit id="287de43f15b38812ca35a70d4d7f3e0bbc21298b" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_bswap32&lt;/code&gt;, except the argument and return types are 64 bit.</source>
          <target state="translated">&lt;code&gt;__builtin_bswap32&lt;/code&gt; と同様ですが、引数と戻り値の型が64ビットであることを除きます。</target>
        </trans-unit>
        <trans-unit id="103307679937d9d214ea5a77118584bb62226212" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_clrsb&lt;/code&gt;, except the argument type is &lt;code&gt;long long&lt;/code&gt;.</source>
          <target state="translated">引数の型が &lt;code&gt;long long&lt;/code&gt; であることを除いて、 &lt;code&gt;__builtin_clrsb&lt;/code&gt; と同様です。</target>
        </trans-unit>
        <trans-unit id="d9811f01cbffd069bcc5462448b89027d4f2ec50" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_clrsb&lt;/code&gt;, except the argument type is &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_clrsb&lt;/code&gt; に似ていますが、引数の型が &lt;code&gt;long&lt;/code&gt; である点が異なります。</target>
        </trans-unit>
        <trans-unit id="df68abde10040a09c09e6b0b67f91ab09e952842" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_clz&lt;/code&gt;, except the argument type is &lt;code&gt;unsigned long long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_clz&lt;/code&gt; に似ていますが、引数の型が &lt;code&gt;unsigned long long&lt;/code&gt; である点が異なります。</target>
        </trans-unit>
        <trans-unit id="f59576794aa7ba8bdf20faea4b1656733f7cd810" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_clz&lt;/code&gt;, except the argument type is &lt;code&gt;unsigned long&lt;/code&gt;.</source>
          <target state="translated">引数の型が &lt;code&gt;unsigned long&lt;/code&gt; であることを除いて、 &lt;code&gt;__builtin_clz&lt;/code&gt; と同様です。</target>
        </trans-unit>
        <trans-unit id="ba918034130e18befe466fce358d135c77bcf300" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_ctz&lt;/code&gt;, except the argument type is &lt;code&gt;unsigned long long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_ctz&lt;/code&gt; に似ていますが、引数の型が &lt;code&gt;unsigned long long&lt;/code&gt; である点が異なります。</target>
        </trans-unit>
        <trans-unit id="18c0fbde15c08851968dc27a9a4c9c3e731fb512" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_ctz&lt;/code&gt;, except the argument type is &lt;code&gt;unsigned long&lt;/code&gt;.</source>
          <target state="translated">引数の型が &lt;code&gt;unsigned long&lt;/code&gt; であることを除いて、 &lt;code&gt;__builtin_ctz&lt;/code&gt; と同様です。</target>
        </trans-unit>
        <trans-unit id="c02104ee06367b8a197baa2a19b2abc09a1e31d1" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_ffs&lt;/code&gt;, except the argument type is &lt;code&gt;long long&lt;/code&gt;.</source>
          <target state="translated">引数の型が &lt;code&gt;long long&lt;/code&gt; であることを除いて、 &lt;code&gt;__builtin_ffs&lt;/code&gt; と同様です。</target>
        </trans-unit>
        <trans-unit id="d1d6beb2a9ac335ca9f6e943f00f7fb214000908" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_ffs&lt;/code&gt;, except the argument type is &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_ffs&lt;/code&gt; と同様ですが、引数の型が &lt;code&gt;long&lt;/code&gt; である点が異なります。</target>
        </trans-unit>
        <trans-unit id="41c22622d956d1ffb73b5455c532f810279add42" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_huge_val&lt;/code&gt;, except a warning is generated if the target floating-point format does not support infinities.</source>
          <target state="translated">&lt;code&gt;__builtin_huge_val&lt;/code&gt; と同様ですが、ターゲットの浮動小数点形式が無限をサポートしない場合に警告が生成されます。</target>
        </trans-unit>
        <trans-unit id="a3824e629002ce80fc504751d9f1603b9da7d561" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_huge_val&lt;/code&gt;, except the return type is &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_huge_val&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="008da3964b6f0002d0e9671a9ad995b6c420ce79" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_huge_val&lt;/code&gt;, except the return type is &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_huge_val&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;x&lt;/code&gt; あることを除きます。</target>
        </trans-unit>
        <trans-unit id="e3a7adf1a6224d5bf5cb7c613e9a778b88a8c44b" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_huge_val&lt;/code&gt;, except the return type is &lt;code&gt;__float128&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_huge_val&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;__float128&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c1ffbe411a36969832b5f38087ea616365eec591" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_huge_val&lt;/code&gt;, except the return type is &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_huge_val&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;float&lt;/code&gt; である点が異なります。</target>
        </trans-unit>
        <trans-unit id="186ce490303bc44a81961f86210149a388cbfd93" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_huge_val&lt;/code&gt;, except the return type is &lt;code&gt;long double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_huge_val&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;long double&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4256a1779131be828664fbc4607bd86235fc8f63" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_inf&lt;/code&gt;, except the return type is &lt;code&gt;_Decimal128&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_inf&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;_Decimal128&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a3fc9b57c65d245ef2ebac66b67318e250147f5d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_inf&lt;/code&gt;, except the return type is &lt;code&gt;_Decimal32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_inf&lt;/code&gt; と同様ですが、戻り値の型が &lt;code&gt;_Decimal32&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ec19c1b8f5bd592906a07150f56b4d809cec3b3a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_inf&lt;/code&gt;, except the return type is &lt;code&gt;_Decimal64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_inf&lt;/code&gt; と同様ですが、戻り値の型が &lt;code&gt;_Decimal64&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="57f4cede60e9110addaf6366460fd28f55f54667" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_inf&lt;/code&gt;, except the return type is &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_inf&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="59d4025e2d73946d427adb0f6d32cc098e01d334" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_inf&lt;/code&gt;, except the return type is &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_inf&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;x&lt;/code&gt; が異なります。</target>
        </trans-unit>
        <trans-unit id="c1d67c7c6c9f71b26da8ec675376459c0921c713" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_inf&lt;/code&gt;, except the return type is &lt;code&gt;__float128&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_inf&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;__float128&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="896466811c11f3c4ee9e850f02d545950afb9b4d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_inf&lt;/code&gt;, except the return type is &lt;code&gt;float&lt;/code&gt;. This function is suitable for implementing the ISO C99 macro &lt;code&gt;INFINITY&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_inf&lt;/code&gt; に似ていますが、戻り値の型は &lt;code&gt;float&lt;/code&gt; です。この関数は、ISO C99マクロ &lt;code&gt;INFINITY&lt;/code&gt; の実装に適しています。</target>
        </trans-unit>
        <trans-unit id="76bb498c29da1b35254a143c1ace9763a1b7c3a7" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_inf&lt;/code&gt;, except the return type is &lt;code&gt;long double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_inf&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;long double&lt;/code&gt; である点が異なります。</target>
        </trans-unit>
        <trans-unit id="1d97d51092a352913796ed842ffe0791359432b2" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nan&lt;/code&gt;, except the return type is &lt;code&gt;_Decimal128&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nan&lt;/code&gt; と同様ですが、戻り値の型が &lt;code&gt;_Decimal128&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="53d0a1658ae40e15391cc06844539577593fad36" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nan&lt;/code&gt;, except the return type is &lt;code&gt;_Decimal32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nan&lt;/code&gt; と似ていますが、戻り値の型が &lt;code&gt;_Decimal32&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d0fb2196b87a982f142cbeace7c2dfa53a9a5586" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nan&lt;/code&gt;, except the return type is &lt;code&gt;_Decimal64&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nan&lt;/code&gt; と同様ですが、戻り値の型が &lt;code&gt;_Decimal64&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="972fe72faee34d4a1bafa2164a917e9478d32f29" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nan&lt;/code&gt;, except the return type is &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nan&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="517865e97371f1de64149fe1cc44de8533e7d916" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nan&lt;/code&gt;, except the return type is &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nan&lt;/code&gt; と同様ですが、戻り値の型が &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;x&lt;/code&gt; あることを除きます。</target>
        </trans-unit>
        <trans-unit id="80a4f0bb5594bf8db6aa07b69d98290c7b0cb4d2" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nan&lt;/code&gt;, except the return type is &lt;code&gt;__float128&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nan&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;__float128&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ee7af1fac130e9139e3597fcacf0ac51e23ffa68" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nan&lt;/code&gt;, except the return type is &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nan&lt;/code&gt; に似ていますが、戻り値の型は &lt;code&gt;float&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7f02308aa234b8f5dba187e0535ecce86dade187" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nan&lt;/code&gt;, except the return type is &lt;code&gt;long double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nan&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;long double&lt;/code&gt; である点が異なります。</target>
        </trans-unit>
        <trans-unit id="7c9ad9b208b6e73ec53236ae7ef08d2a9f0beabb" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nan&lt;/code&gt;, except the significand is forced to be a signaling NaN. The &lt;code&gt;nans&lt;/code&gt; function is proposed by &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n965.htm&quot;&gt;WG14 N965&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nan&lt;/code&gt; と同様ですが、仮数がシグナルNaNになることを強制されます。 &lt;code&gt;nans&lt;/code&gt; 関数は、次のように提案され&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n965.htm&quot;&gt;WG14 N965&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="25d07b665f89fcc40387d17242580a6c52085352" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nans&lt;/code&gt;, except the return type is &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nans&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="125a42543c42a9a4c876178d1cd519e3e1ac3337" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nans&lt;/code&gt;, except the return type is &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nans&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;_Float&lt;var&gt;n&lt;/var&gt;x&lt;/code&gt; あることを除きます。</target>
        </trans-unit>
        <trans-unit id="c928fffe5233a8745a6b29699edadd2bd3d1840c" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nans&lt;/code&gt;, except the return type is &lt;code&gt;__float128&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nans&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;__float128&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c71386ef3f149c7961c5dd435e803b5b814adc62" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nans&lt;/code&gt;, except the return type is &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nans&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;float&lt;/code&gt; である点が異なります。</target>
        </trans-unit>
        <trans-unit id="d3b4d3c3ce7578550309b9e1b7c63b2aeae76345" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_nans&lt;/code&gt;, except the return type is &lt;code&gt;long double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_nans&lt;/code&gt; に似ていますが、戻り値の型が &lt;code&gt;long double&lt;/code&gt; である点が異なります。</target>
        </trans-unit>
        <trans-unit id="88f8bef8cb3e9f1b7034b6cd67d536931b56ab97" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_parity&lt;/code&gt;, except the argument type is &lt;code&gt;unsigned long long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_parity&lt;/code&gt; と同様ですが、引数の型が &lt;code&gt;unsigned long long&lt;/code&gt; であることを除きます。</target>
        </trans-unit>
        <trans-unit id="7b8444edd220546f2658052bf55756594cf3d7e6" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_parity&lt;/code&gt;, except the argument type is &lt;code&gt;unsigned long&lt;/code&gt;.</source>
          <target state="translated">引数の型が &lt;code&gt;unsigned long&lt;/code&gt; であることを除いて、 &lt;code&gt;__builtin_parity&lt;/code&gt; と同様です。</target>
        </trans-unit>
        <trans-unit id="e6da5b45f1e360ae211b94e56690a0b8fa88ee21" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_popcount&lt;/code&gt;, except the argument type is &lt;code&gt;unsigned long long&lt;/code&gt;.</source>
          <target state="translated">引数の型が &lt;code&gt;unsigned long long&lt;/code&gt; であることを除いて、 &lt;code&gt;__builtin_popcount&lt;/code&gt; と同様です。</target>
        </trans-unit>
        <trans-unit id="ff3e55487db84f15ffa29a16f3d14063de2220f3" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_popcount&lt;/code&gt;, except the argument type is &lt;code&gt;unsigned long&lt;/code&gt;.</source>
          <target state="translated">引数の型が &lt;code&gt;unsigned long&lt;/code&gt; であることを除いて、 &lt;code&gt;__builtin_popcount&lt;/code&gt; と同様です。</target>
        </trans-unit>
        <trans-unit id="f6bdffa702ce1bb4acc9747edb48016c4599e76d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_powi&lt;/code&gt;, except the argument and return types are &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_powi&lt;/code&gt; に似ていますが、引数と戻り値の型が &lt;code&gt;float&lt;/code&gt; 型である点が異なります。</target>
        </trans-unit>
        <trans-unit id="c49d8fe4e2b5fa5d1e76762b1beb13a3295e5948" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;__builtin_powi&lt;/code&gt;, except the argument and return types are &lt;code&gt;long double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__builtin_powi&lt;/code&gt; に似ていますが、引数と戻り値の型が &lt;code&gt;long double&lt;/code&gt; である点が異なります。</target>
        </trans-unit>
        <trans-unit id="2c1e3e4bbd07650298754513f3e3a44bed8e82b1" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;isinf&lt;/code&gt;, except the return value is -1 for an argument of &lt;code&gt;-Inf&lt;/code&gt; and 1 for an argument of &lt;code&gt;+Inf&lt;/code&gt;. Note while the parameter list is an ellipsis, this function only accepts exactly one floating-point argument. GCC treats this parameter as type-generic, which means it does not do default promotion from float to double.</source>
          <target state="translated">&lt;code&gt;isinf&lt;/code&gt; と同様ですが、戻り値が &lt;code&gt;-Inf&lt;/code&gt; の引数の場合は-1 、 &lt;code&gt;+Inf&lt;/code&gt; の引数の場合は1になります。パラメータリストは省略記号ですが、この関数は浮動小数点引数を1つだけ受け入れます。GCCはこのパラメーターを型ジェネリックとして扱います。つまり、floatからdoubleへのデフォルトの昇格を行いません。</target>
        </trans-unit>
        <trans-unit id="f30b0c19d239509bdc4a9dccfa54aa40be3c10c1" translate="yes" xml:space="preserve">
          <source>Similar to the stack- data- and const-align options above, these options arrange for stack frame, writable data and constants to all be 32-bit, 16-bit or 8-bit aligned. The default is 32-bit alignment.</source>
          <target state="translated">上記の stack-data-および const-align オプションと同様に、これらのオプションは、スタックフレーム、書き込み可能なデータ、および定数をすべて 32 ビット、16 ビット、または 8 ビットのアラインメントに調整します。デフォルトは32ビット整列です。</target>
        </trans-unit>
        <trans-unit id="b4b6e8c3d6c60e969147af3a81dfe25b7338a216" translate="yes" xml:space="preserve">
          <source>Similarly to</source>
          <target state="translated">と同様に</target>
        </trans-unit>
        <trans-unit id="8599edec7c2ed57ef8914ff45d22cb4fe06042cc" translate="yes" xml:space="preserve">
          <source>Similarly, access by taking the address, casting the resulting pointer and dereferencing the result has undefined behavior, even if the cast uses a union type, e.g.:</source>
          <target state="translated">同様に、アドレスを取得し、その結果のポインタをキャストし、その結果を参照することによるアクセスは、たとえキャストがユニオン型を使用していたとしても、定義されていない動作をします。</target>
        </trans-unit>
        <trans-unit id="41ba9557152bce164799d0130f0eb9f9280e308f" translate="yes" xml:space="preserve">
          <source>Similarly, compiling code with G++ that must use a C++ library other than the GNU C++ library requires specifying the location of the header files for that other library.</source>
          <target state="translated">同様に、GNU C++ライブラリ以外の C++ライブラリを使用しなければならない G++でコードをコンパイルするには、その他のライブラリのヘッダファイルの場所を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="638ae03227c9ec9c0ea2e3c27a8de52a23a69e64" translate="yes" xml:space="preserve">
          <source>Similarly, it is not safe to access the global register variables from signal handlers or from more than one thread of control. Unless you recompile them specially for the task at hand, the system library routines may temporarily use the register for other things. Furthermore, since the register is not reserved exclusively for the variable, accessing it from handlers of asynchronous signals may observe unrelated temporary values residing in the register.</source>
          <target state="translated">同様に、シグナルハンドラや複数の制御スレッドからグローバルレジスタ変数にアクセスするのは安全ではありません。目下のタスクのために特別に再コンパイルしない限り、システムライブラリルーチンは一時的にレジスタを別のことに使用するかもしれません。さらに、レジスタは変数専用に予約されているわけではないので、非同期シグナルのハンドラからアクセスすると、レジスタに存在する無関係な一時的な値が観測される可能性があります。</target>
        </trans-unit>
        <trans-unit id="22a4ed66c623d273a571652cc9ae1a89577a837f" translate="yes" xml:space="preserve">
          <source>Since</source>
          <target state="translated">Since</target>
        </trans-unit>
        <trans-unit id="33c848578be7e9d6967258af62c4197dfe644969" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;spu_add&lt;/code&gt; is a macro, the vector constant in the example is treated as four separate arguments. Wrap the entire argument in parentheses for this to work.</source>
          <target state="translated">&lt;code&gt;spu_add&lt;/code&gt; はマクロなので、例のベクトル定数は4つの別々の引数として扱われます。これを機能させるには、引数全体を括弧で囲みます。</target>
        </trans-unit>
        <trans-unit id="59c049b9dd5a46fabeed926b81db03e50fbbf544" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;vec_add&lt;/code&gt; is a macro, the vector constant in the example is treated as four separate arguments. Wrap the entire argument in parentheses for this to work.</source>
          <target state="translated">&lt;code&gt;vec_add&lt;/code&gt; はマクロなので、例のベクトル定数は4つの別々の引数として扱われます。これを機能させるには、引数全体を括弧で囲みます。</target>
        </trans-unit>
        <trans-unit id="f22660df453a96c806164b9cde945b16ac8135b9" translate="yes" xml:space="preserve">
          <source>Since GCC does not parse the assembler template, it has no visibility of any symbols it references. This may result in GCC discarding those symbols as unreferenced unless they are also listed as input, output, or goto operands.</source>
          <target state="translated">GCC はアセンブラ・テンプレートを解析しないので、参照しているシンボルは見えません。これは、それらのシンボルが入力、出力、または goto オペランドとしてリストされていない限り、GCC がそれらのシンボルを参照されていないものとして破棄する結果になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="b000a8b411ebdceb551939a35ee69b160bbe25b6" translate="yes" xml:space="preserve">
          <source>Since ISO C99 defines this function in terms of &lt;code&gt;strtod&lt;/code&gt;, which we do not implement, a description of the parsing is in order. The string is parsed as by &lt;code&gt;strtol&lt;/code&gt;; that is, the base is recognized by leading &amp;lsquo;</source>
          <target state="translated">ISO C99はこの関数を &lt;code&gt;strtod&lt;/code&gt; の観点から定義していますが、これは実装していません。構文解析の説明が適切です。文字列は &lt;code&gt;strtol&lt;/code&gt; によって解析されます。つまり、ベースは先頭に「</target>
        </trans-unit>
        <trans-unit id="892917377ab8c3ffb653fb42e72d9ed1bdd00343" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;__builtin_alloca&lt;/code&gt; function doesn&amp;rsquo;t validate its argument it is the responsibility of its caller to make sure the argument doesn&amp;rsquo;t cause it to exceed the stack size limit. The &lt;code&gt;__builtin_alloca&lt;/code&gt; function is provided to make it possible to allocate on the stack arrays of bytes with an upper bound that may be computed at run time. Since C99 Variable Length Arrays offer similar functionality under a portable, more convenient, and safer interface they are recommended instead, in both C99 and C++ programs where GCC provides them as an extension. See &lt;a href=&quot;variable-length#Variable-Length&quot;&gt;Variable Length&lt;/a&gt;, for details.</source>
          <target state="translated">&lt;code&gt;__builtin_alloca&lt;/code&gt; 関数は引数を検証しないため、呼び出し元が、引数によってスタックサイズの制限を超えないようにする必要があります。 &lt;code&gt;__builtin_alloca&lt;/code&gt; の機能は、上、実行時に計算することができるその結合とバイトのスタックアレイに割り当てることを可能にするために設けられています。 C99可変長配列は、移植性が高く、より便利で安全なインターフェイスで同様の機能を提供するため、GCCが拡張機能として提供しているC99およびC ++プログラムの両方で推奨されます。詳細については、&lt;a href=&quot;variable-length#Variable-Length&quot;&gt;可変長&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4baf9c380b14381cf54e66f25724ec841c6dbbc1" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;__builtin_alloca_with_align&lt;/code&gt; function doesn&amp;rsquo;t validate its &lt;var&gt;size&lt;/var&gt; argument it is the responsibility of its caller to make sure the argument doesn&amp;rsquo;t cause it to exceed the stack size limit. The &lt;code&gt;__builtin_alloca_with_align&lt;/code&gt; function is provided to make it possible to allocate on the stack overaligned arrays of bytes with an upper bound that may be computed at run time. Since C99 Variable Length Arrays offer the same functionality under a portable, more convenient, and safer interface they are recommended instead, in both C99 and C++ programs where GCC provides them as an extension. See &lt;a href=&quot;variable-length#Variable-Length&quot;&gt;Variable Length&lt;/a&gt;, for details.</source>
          <target state="translated">以来 &lt;code&gt;__builtin_alloca_with_align&lt;/code&gt; 関数が検証されない &lt;var&gt;size&lt;/var&gt; 引数を、それは作るためにその呼び出し側の責任であることを確認してください引数は、スタックのサイズ制限を超えることがありません。 &lt;code&gt;__builtin_alloca_with_align&lt;/code&gt; 関数がスタックに割り当てることを可能にするために提供され、実行時に計算することができるその上限とバイトの配列をoveraligned。C99可変長配列は、GCCが拡張機能として提供するC99プログラムとC ++プログラムの両方で、ポータブルでより便利で安全なインターフェイスの下で同じ機能を提供するため、代わりに推奨されます。詳細については、&lt;a href=&quot;variable-length#Variable-Length&quot;&gt;可変長&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0258c9861f729a6d6a1e77969495b52ec885eef9" translate="yes" xml:space="preserve">
          <source>Since the two variable &lt;code&gt;i&lt;/code&gt; in the example above have incompatible types, enabling only</source>
          <target state="translated">上記の例の2つの変数 &lt;code&gt;i&lt;/code&gt; には互換性のない型があるため、</target>
        </trans-unit>
        <trans-unit id="d388c0730bf40209b77631102dd7aa30902cc328" translate="yes" xml:space="preserve">
          <source>Since there are occasions where a switch case fall through is desirable, GCC provides an attribute, &lt;code&gt;__attribute__ ((fallthrough))&lt;/code&gt;, that is to be used along with a null statement to suppress this warning that would normally occur:</source>
          <target state="translated">switch caseのフォールスルーが望ましい場合があるため、GCCは属性 &lt;code&gt;__attribute__ ((fallthrough))&lt;/code&gt; 提供します。これは、通常発生するこの警告を抑制するためにnullステートメントと一緒に使用されます。</target>
        </trans-unit>
        <trans-unit id="9d33bdb0c97347197e4dad14823945cd2f7cbcbd" translate="yes" xml:space="preserve">
          <source>Single functions can be exempted from inlining by marking them with the &lt;code&gt;noinline&lt;/code&gt; attribute.</source>
          <target state="translated">単一の関数を &lt;code&gt;noinline&lt;/code&gt; 属性でマークすることにより、インライン化を免除できます。</target>
        </trans-unit>
        <trans-unit id="e677e33f125717883b72d6689c2a09bd6ab65171" translate="yes" xml:space="preserve">
          <source>Single-precision floating point:</source>
          <target state="translated">単精度浮動小数点。</target>
        </trans-unit>
        <trans-unit id="76bd493ed8bb81652313a482dd8f8e1005d241c8" translate="yes" xml:space="preserve">
          <source>Size of max partition for WHOPR (in estimated instructions). to provide an upper bound for individual size of partition. Meant to be used only with balanced partitioning.</source>
          <target state="translated">WHOPRの最大パーティションサイズ(推定命令数)。バランスパーティショニングでのみ使用することを意図している。</target>
        </trans-unit>
        <trans-unit id="e240bffdb5210e2a9fb3c1ceaef0728216aabbc4" translate="yes" xml:space="preserve">
          <source>Size of minimal partition for WHOPR (in estimated instructions). This prevents expenses of splitting very small programs into too many partitions.</source>
          <target state="translated">WHOPR用の最小パーティションのサイズ(推定命令数)。これにより、非常に小さなプログラムをあまりにも多くのパーティションに分割する費用を防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="feac389ca59136d24edc664765fb58951d1a7cbe" translate="yes" xml:space="preserve">
          <source>Slightly looser rules for escaped newlines.</source>
          <target state="translated">エスケープされた改行のルールを少し緩くしました。</target>
        </trans-unit>
        <trans-unit id="6ae97113b3cf739a346d55e68c010f462fdbf99d" translate="yes" xml:space="preserve">
          <source>Small integer constants can use a shared data structure, reducing the compiler&amp;rsquo;s memory usage and increasing its speed. This sets the maximum value of a shared integer constant.</source>
          <target state="translated">小さな整数定数は共有データ構造を使用でき、コンパイラーのメモリー使用量を減らし、その速度を上げます。これは、共有整数定数の最大値を設定します。</target>
        </trans-unit>
        <trans-unit id="3c352006f28e617e3092550875bb98a37c3e499d" translate="yes" xml:space="preserve">
          <source>Small model objects live in the lower 16MB of memory (so that their addresses can be loaded with the &lt;code&gt;ld24&lt;/code&gt; instruction), and are callable with the &lt;code&gt;bl&lt;/code&gt; instruction.</source>
          <target state="translated">小さなモデルオブジェクトは下位16MBのメモリに存在し（そのアドレスは &lt;code&gt;ld24&lt;/code&gt; 命令でロードできるため）、 &lt;code&gt;bl&lt;/code&gt; 命令で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="a3714fde637fe384ead8d5eb02c1a4c25f02d146" translate="yes" xml:space="preserve">
          <source>Small model objects live in the lower 16MB of memory (so that their addresses can be loaded with the &lt;code&gt;ld24&lt;/code&gt; instruction).</source>
          <target state="translated">小さなモデルオブジェクトは下位16MBのメモリに存在します（そのため、それらのアドレスは &lt;code&gt;ld24&lt;/code&gt; 命令でロードできます）。</target>
        </trans-unit>
        <trans-unit id="87cc781515efd4b579bb2ce6bb66d4b4e6b7b78a" translate="yes" xml:space="preserve">
          <source>So the first alternative for the 68000&amp;rsquo;s logical-or could be written as &lt;code&gt;&quot;+m&quot; (output) : &quot;ir&quot; (input)&lt;/code&gt;. The second could be &lt;code&gt;&quot;+r&quot; 
(output): &quot;irm&quot; (input)&lt;/code&gt;. However, the fact that two memory locations cannot be used in a single instruction prevents simply using &lt;code&gt;&quot;+rm&quot; 
(output) : &quot;irm&quot; (input)&lt;/code&gt;. Using multi-alternatives, this might be written as &lt;code&gt;&quot;+m,r&quot; (output) : &quot;ir,irm&quot; (input)&lt;/code&gt;. This describes all the available alternatives to the compiler, allowing it to choose the most efficient one for the current conditions.</source>
          <target state="translated">したがって、68000のlogical-orの最初の選択肢は、 &lt;code&gt;&quot;+m&quot; (output) : &quot;ir&quot; (input)&lt;/code&gt; と書くことができます。2番目は &lt;code&gt;&quot;+r&quot; (output): &quot;irm&quot; (input)&lt;/code&gt; ます。ただし、1つの命令で2つのメモリロケーションを使用できないため、単に &lt;code&gt;&quot;+rm&quot; (output) : &quot;irm&quot; (input)&lt;/code&gt; 使用できません。複数の選択肢を使用すると、これは &lt;code&gt;&quot;+m,r&quot; (output) : &quot;ir,irm&quot; (input)&lt;/code&gt; ように書くことができます。これは、コンパイラーに利用可能なすべての選択肢を説明し、現在の条件に最も効率的なものを選択できるようにします。</target>
        </trans-unit>
        <trans-unit id="3274a855ec94ec43ea5e4111fdadde792b5b93db" translate="yes" xml:space="preserve">
          <source>So, for example,</source>
          <target state="translated">だから、例えば</target>
        </trans-unit>
        <trans-unit id="059987d18facbbac8112608278433db26ec67739" translate="yes" xml:space="preserve">
          <source>Software developers also use coverage testing in concert with testsuites, to make sure software is actually good enough for a release. Testsuites can verify that a program works as expected; a coverage program tests to see how much of the program is exercised by the testsuite. Developers can then determine what kinds of test cases need to be added to the testsuites to create both better testing and a better final product.</source>
          <target state="translated">ソフトウェア開発者は、リリースに向けてソフトウェアが実際に十分に良いものであることを確認するために、テストスイートと連携してカバレッジテストも使用しています。テストスイートは、プログラムが期待通りに動作するかどうかを検証することができます。カバレッジプログラムは、テストスイートによってプログラムがどれだけ実行されているかをテストします。開発者は、どのようなテストケースをテストスイートに追加する必要があるかを判断して、より良いテストとより良い最終製品の両方を作成することができます。</target>
        </trans-unit>
        <trans-unit id="3fb15357d03c25c5a9704aae9669697852ee9b79" translate="yes" xml:space="preserve">
          <source>Solaris targets support the &lt;code&gt;cmn_err&lt;/code&gt; (or &lt;code&gt;__cmn_err__&lt;/code&gt;) format check. &lt;code&gt;cmn_err&lt;/code&gt; accepts a subset of the standard &lt;code&gt;printf&lt;/code&gt; conversions, and the two-argument &lt;code&gt;%b&lt;/code&gt; conversion for displaying bit-fields. See the Solaris man page for &lt;code&gt;cmn_err&lt;/code&gt; for more information.</source>
          <target state="translated">Solarisターゲットは、 &lt;code&gt;cmn_err&lt;/code&gt; （または &lt;code&gt;__cmn_err__&lt;/code&gt; ）形式のチェックをサポートしています。 &lt;code&gt;cmn_err&lt;/code&gt; は、標準の &lt;code&gt;printf&lt;/code&gt; 変換のサブセットと、ビットフィールドを表示するための2つの引数 &lt;code&gt;%b&lt;/code&gt; 変換を受け入れます。詳細は、 &lt;code&gt;cmn_err&lt;/code&gt; の Solarisマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="00b2aad45d07b70e1b7eefea74316913901b6e42" translate="yes" xml:space="preserve">
          <source>Some</source>
          <target state="translated">Some</target>
        </trans-unit>
        <trans-unit id="50992012bdba46e4be18c1991255dee68fa34161" translate="yes" xml:space="preserve">
          <source>Some 387 emulators do not support the &lt;code&gt;sin&lt;/code&gt;, &lt;code&gt;cos&lt;/code&gt; and &lt;code&gt;sqrt&lt;/code&gt; instructions for the 387. Specify this option to avoid generating those instructions. This option is overridden when</source>
          <target state="translated">一部の387エミュレーターは、387の &lt;code&gt;sin&lt;/code&gt; 、 &lt;code&gt;cos&lt;/code&gt; 、および &lt;code&gt;sqrt&lt;/code&gt; 命令をサポートしていません。これらの命令を生成しないようにするには、このオプションを指定します。このオプションは、次の場合にオーバーライドされます</target>
        </trans-unit>
        <trans-unit id="e8e19b82266af7db1443a3fea1acad2ebf9ad814" translate="yes" xml:space="preserve">
          <source>Some &lt;code&gt;asm&lt;/code&gt; statements may need extra stack space for internal calculations. This can be guaranteed by clobbering stack registers unrelated to the inputs and outputs.</source>
          <target state="translated">一部の &lt;code&gt;asm&lt;/code&gt; ステートメントでは、内部計算のために追加のスタックスペースが必要になる場合があります。これは、入力と出力に関係のないスタックレジスタを破棄することで保証できます。</target>
        </trans-unit>
        <trans-unit id="e9932d75815f4a1da8b9c3167803247d114d4d3e" translate="yes" xml:space="preserve">
          <source>Some AVR devices (AT90S8515, ATmega103) must not skip 32-bit instructions because of a hardware erratum. Skip instructions are &lt;code&gt;SBRS&lt;/code&gt;, &lt;code&gt;SBRC&lt;/code&gt;, &lt;code&gt;SBIS&lt;/code&gt;, &lt;code&gt;SBIC&lt;/code&gt; and &lt;code&gt;CPSE&lt;/code&gt;. The second macro is only defined if &lt;code&gt;__AVR_HAVE_JMP_CALL__&lt;/code&gt; is also set.</source>
          <target state="translated">一部のAVRデバイス（AT90S8515、ATmega103）は、ハードウェアエラッタのため、32ビット命令をスキップしてはなりません。スキップ命令は、 &lt;code&gt;SBRS&lt;/code&gt; 、 &lt;code&gt;SBRC&lt;/code&gt; 、 &lt;code&gt;SBIS&lt;/code&gt; 、 &lt;code&gt;SBIC&lt;/code&gt; および &lt;code&gt;CPSE&lt;/code&gt; です。 2番目のマクロは、 &lt;code&gt;__AVR_HAVE_JMP_CALL__&lt;/code&gt; も設定されている場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="b8587f1a252be44a26b4bf83b41b8cacfabe3c53" translate="yes" xml:space="preserve">
          <source>Some AVR devices support memories larger than the 64 KiB range that can be accessed with 16-bit pointers. To access memory locations outside this 64 KiB range, the content of a &lt;code&gt;RAMP&lt;/code&gt; register is used as high part of the address: The &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;Y&lt;/code&gt;, &lt;code&gt;Z&lt;/code&gt; address register is concatenated with the &lt;code&gt;RAMPX&lt;/code&gt;, &lt;code&gt;RAMPY&lt;/code&gt;, &lt;code&gt;RAMPZ&lt;/code&gt; special function register, respectively, to get a wide address. Similarly, &lt;code&gt;RAMPD&lt;/code&gt; is used together with direct addressing.</source>
          <target state="translated">一部のAVRデバイスは、16ビットポインターでアクセスできる64 KiB範囲より大きいメモリをサポートします。この64 KiB範囲外のメモリロケーションにアクセスするには、 &lt;code&gt;RAMP&lt;/code&gt; レジスタの内容をアドレスの上位部分として使用します &lt;code&gt;X&lt;/code&gt; 、 &lt;code&gt;Y&lt;/code&gt; 、 &lt;code&gt;Z&lt;/code&gt; アドレスレジスタは、それぞれ &lt;code&gt;RAMPX&lt;/code&gt; 、 &lt;code&gt;RAMPY&lt;/code&gt; 、 &lt;code&gt;RAMPZ&lt;/code&gt; 特殊関数レジスタと連結されて、広いアドレス。同様に、 &lt;code&gt;RAMPD&lt;/code&gt; は直接アドレッシングと一緒に使用されます。</target>
        </trans-unit>
        <trans-unit id="b652248718bfad5072f0c61fa63785c614519d9b" translate="yes" xml:space="preserve">
          <source>Some Cortex-M3 cores can cause data corruption when &lt;code&gt;ldrd&lt;/code&gt; instructions with overlapping destination and base registers are used. This option avoids generating these instructions. This option is enabled by default when</source>
          <target state="translated">一部のCortex-M3コアは、オーバーラップするデスティネーションレジスタとベースレジスタを持つ &lt;code&gt;ldrd&lt;/code&gt; 命令を使用すると、データ破損を引き起こす可能性があります。このオプションは、これらの命令の生成を回避します。このオプションは、デフォルトで有効になっています。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
