<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="ansible">
    <body>
      <group id="ansible">
        <trans-unit id="3e45126d173c9f83af0c8a4d42e612d7cbdfdcc5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are supported on the TILEPro:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d4212fc8e500ed936c66f91d94bb442c281361" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options defined for M680x0 and ColdFire processors. The default settings depend on which architecture was selected when the compiler was configured; the defaults for the most common choices are given below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ed028d54d90074036536de35874efd099113cc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options defined for the Intel IA-64 architecture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9361b6e6a0248c72de91480eff99a4173461130" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options defined for the Motorola M*Core processors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d7728363a1c57b4f3fe364b1f6ae217cf26e85" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options defined for the S/390 and zSeries architecture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88146812c5c99870bce47654591da4916f1e6098" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options) arrange (eliminate arrangements) for the stack frame, individual data and constants to be aligned for the maximum single data access size for the chosen CPU model. The default is to arrange for 32-bit alignment. ABI details such as structure layout are not affected by these options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="209637ec6e6c0e100a8945dd77c54299e981870e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c051371f8937469bcb7c2e99a74ceea414f863fe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c689e2cc2e0209a8b3a065951640655d746c00" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or &lt;code&gt;$SYSROOT&lt;/code&gt; is replaced by the sysroot prefix; see</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8481e5d860c5d8e5ecdd2c50ff1cbdcb024c8a5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or &lt;code&gt;$SYSROOT&lt;/code&gt;, then the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043be17ae0f7c3d7a9c4cfb6ac1b0185fec22c5b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or &lt;var&gt;native&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cadc57fbc541ed8d0539abc5c5699327ee54af17" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or adding it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf736093218c75ec4e7cd3f976f459490e75a82e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or declared in system or compiler headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86487df2bc959d5aea33992acd350f051b6c32c0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or higher. If hardware floating point instructions are being generated then the C preprocessor symbol &lt;code&gt;__FPU_OK__&lt;/code&gt; is defined, otherwise the symbol &lt;code&gt;__NO_FPU__&lt;/code&gt; is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5132656d002ad4ce3177e193b5c68ce50e74230" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or larger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa602c893b7540ffbd1e91c955d1716a1576b57" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or later. This is the default. This option defines the preprocessor macro &lt;code&gt;__LIW__&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4dd904c5fb4fcbd7cc13e0bb383a3e3c6aa4701" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or later. This is the default. This option defines the preprocessor macro &lt;code&gt;__SETLB__&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52aec7fe31e35c40ade8a8360102a82b38ee165a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or more or by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83573bfb082de6c4b0dcb6f0417cd6cee355e722" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or similar construct can use a backslash to ignore the special meaning of the character following it, thus allowing literal matching of a character that is otherwise specially treated. For example, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beeb97ada8e276e8fa205b82d44514b8ccfab523" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or similar construct may contain other nested &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61372132dd71c601ee73c08a55327505acf9f3b9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or the special string &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda6b24116bb0d9742b26847ffae3657cecd50ae" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9f2412c49de044b897ed121f0f9ca8709a12cd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; otherwise. &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec149ba66b939f8546f4e2bdaebf6bea6a1c7fc5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; otherwise. The GCC driver automatically selects &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aad7874be07f1faef249c25cdae44bd2f76410a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pair. All lines after this directive and up to the next directive or blank line are considered to make up the spec string for the indicated suffix. When the compiler encounters an input file with the named suffix, it processes the spec string in order to work out how to compile that file. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5cd41e49b746cd8aacc2f300c1e7c9ce59a1f43" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pair. The set of call-saved registers also remains the same in that the even-numbered double-precision registers are saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2f7d31ef55c034e21e0b00c9d0c1b28e605f5a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; parameter has to be specified as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c445adefb3dc0e5666af740dcde3fc1c3feb5a32" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; parameter inserted as the first parameter indicating the size of the object being pointed to. All objects must be the same size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4d62c248b664f4f828763b22a0a69cb6809c0b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; partitioning is intended for internal testing only. The value &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d7aab219721f35503df410bd55382075bf2c9e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; performs complex conjugation when used on a value with a complex type. This is a GNU extension; for values of floating type, you should use the ISO C99 functions &lt;code&gt;conjf&lt;/code&gt;, &lt;code&gt;conj&lt;/code&gt; and &lt;code&gt;conjl&lt;/code&gt;, declared in &lt;code&gt;&amp;lt;complex.h&amp;gt;&lt;/code&gt; and also provided as built-in functions by GCC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fdb823002dc6dfd9b967615f77b498f39af6f0c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pointer, and if the function pointed to is virtual, where to find the vtable, and where in the vtable to look for the member function. If you are using PMFs in an inner loop, you should really reconsider that decision. If that is not an option, you can extract the pointer to the function that would be called for a given object/PMF pair and call it directly inside the inner loop, to save a bit of time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4563c051a6a6c66cf5ff3c3a90291d825d095381" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pragmas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a7dcbf0dc6de330b210ef05aa967c5a5670ddc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pre-processor directives, and the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5641c689cca07cacc9259cf5cbc868ef50ea405f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; preceding and following the name. This allows you to use them in header files without being concerned about a possible macro of the same name. For example, you may use the attribute name &lt;code&gt;__noreturn__&lt;/code&gt; instead of &lt;code&gt;noreturn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35189e0b3ea3ee398947b0a83eca5595687c8f18" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; prefix and also by being overloaded so that they work on multiple types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ab426a6b5a3c861e723eb2367dd608173e34fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f227e9083fdcdf835eb89a3b7e5aea560e8c746" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; prefix. Arguments to options that specify a size threshold of some sort may be arbitrarily large decimal or hexadecimal integers followed by a byte size suffix designating a multiple of bytes such as &lt;code&gt;kB&lt;/code&gt; and &lt;code&gt;KiB&lt;/code&gt; for kilobyte and kibibyte, respectively, &lt;code&gt;MB&lt;/code&gt; and &lt;code&gt;MiB&lt;/code&gt; for megabyte and mebibyte, &lt;code&gt;GB&lt;/code&gt; and &lt;code&gt;GiB&lt;/code&gt; for gigabyte and gigibyte, and so on. Such arguments are designated by &lt;var&gt;byte-size&lt;/var&gt; in the following text. Refer to the NIST, IEC, and other relevant national and international standards for the full listing and explanation of the binary and decimal byte size prefixes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50153a267c6e375eec867e2a3730edf61454105" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; prefixes. The number parsed is placed in the significand such that the least significant bit of the number is at the least significant bit of the significand. The number is truncated to fit the significand field provided. The significand is forced to be a quiet NaN.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355872b2b1a3c3bd3ba8d658ef382e09e32073a3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; preprocessor constant is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73ba346be03f7ededf629759b3e3a744322a7e4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; present for backward compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fcfb1d20306c0f703ac5ec60dac33f6fdbd9821" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pseudo target defaults to VFPv3 with 16 double-precision registers. It supports the following extension options: &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50fd8239eabc9a97d95bc4f4d278515e31bcaee2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pseudo-op). Default visibility is supported everywhere. Hidden visibility is supported on Darwin targets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defa7344a1649b93a1b43c1af97fa03cea56040a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; rather than &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3486fdf02e76707d71811fb7d79c2ba2a04a89c9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; rather than the usual &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8582e11d6dddda4b9f538d0f60eda9549f5f57ed" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; refer to processors with FPUs clocked a ratio of 3:2 with respect to the core. For compatibility reasons, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dabe2122a4b1653e8a50e28085b2b8047b7632bb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; refer to processors with FPUs clocked at half the rate of the core, names of the form &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe7c7597ca8ffa158c739f3718b9881c80ffc3f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; refer to processors with FPUs clocked at the same rate as the core, and names of the form &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600d3de7356da0b80ca6cd07490e0619b1e142c7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; refer to the formats accepted by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92b96d2b6c894c413be8d124af5dac7f82f1609" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; refers to a literal capital C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f55ba0d5f66754cf295ecfc832192516dfb2ed7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; refers to a literal capital M.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d17117b0897deb757c55ae8924e7ef2b5b9f25" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f95697e72cd24b02f414593adabf5fb04e9dd8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register (condition register)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27ddc79ec0fe4e9db1fc81b7565ee71dfb87254d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register (condition register) number 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe7571283716a455bbbea92bd21b227f87e5595" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register names for the stacked registers. This may make assembler output more readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24f843d58a90ab3ed3bce4238729c6f6a2d9b15" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register to the specified value &lt;var&gt;ptr&lt;/var&gt;. This is usually used by system code that manages threads and execution contexts. The compiler normally does not generate code that modifies the contents of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b6a8cc1ce090db804f62155ebcfe9fdfd32f43" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register to the specified value &lt;var&gt;val&lt;/var&gt;, while preserving the current values of the FR, SZ and PR bits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32b88b9c6f4ce4c1ae7fce0458bc87eef665ddf1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="794978d8b41ed92d143d12ac181aca522b22af26" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register. Memory loads and stores that use the thread pointer as a base address are turned into &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d17477141c67c1f66f16dcaf910190f1c3cc4e3f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b7acec614e26d84f44c29e6daaf9dc7fd3103e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; searches library &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef525c893fe2c7450842b9e7aea51bac5e3d29d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; selects the most compatible architecture for the selected ABI (that is, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="481f5997a73ce97b055885eccc211f2b92c9474d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; selects vector-length agnostic output. At present &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b23ede7a85c283a7ae7da9db47d3be845ba3234c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; separated fields along with program source code. The format is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c9d5f175b9ec00e30e09a9e05f50d72f5e873f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; separated option keywords to select the dump details and optimizations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e5425a69eadc821abc7b54b5f2baa8ba205522d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; separated options which control the details of the dump. Not all options are applicable to all dumps; those that are not meaningful are ignored. The following options are available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21bc80d788388475b1818d47e86cbacdf33c7152" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; sequences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74e190e05401bca34927b5278656e6d6e921333c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; series does not have a hardware floating-point unit and so</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f09dc09551560e9a45030ebd6e30695d66a5fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; series hardware and the specific &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec78580cc0226cf2394840560a7d651e6983bdb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; sets it to its standard level. &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07d079738bce040037eb1f1fd2ea5c8fff94a71" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; should be passed to the program &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6948a2dfdcbe5c825830e9f31be0f8b5635e9d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; should be relied on for producing code that is portable across different hardware SVE vector lengths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee57cff3cefff28a9da8ab2e18f679a918744aec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; sign, the type of the members and by &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6656ef212b86feb4280e0b002e306faab678402b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; sign, the type of the members followed by &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b4ad927c69486a178202aa19e5e3eef2cea0ca" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; since the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb85024f3ec55e7b20f046424d94f4a06238808" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; spec string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081e2943adf837892353eab8656e6ca9e7c091b9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specifies that exactly one partition should be used while the value &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6c33ed91a7375352c2955837851068b44100e9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specify that GCC should tune for a big.LITTLE system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d64ff9d9b4091a4c3b0888ad9aa14c25dc75e79" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stack it is. Precompiled header files are also printed, even if they are found to be invalid; an invalid precompiled header file is printed with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f77b91c30a3d55044b432a8c79262b81f7739ab" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stands for &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4f579e9779d89eea635da5e3420f9b0583a365" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stands for the character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c9d4dd0e4446cfda2d97ec7fdbd6cdd2482a57" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; style name or the corresponding chip number. GCC supports scheduling parameters for the EV4, EV5 and EV6 family of processors and chooses the default values for the instruction set from the processor you specify. If you do not specify a processor type, GCC defaults to the processor on which the compiler was built.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ad544dab08dbd46c0ae98eb0c3361e463712c3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; substitutes &lt;code&gt;X&lt;/code&gt; if the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9990d2165de1099320d97e468af32ce23f811dac" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; substitutes a single dash and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="321b67c29454d786acc2b137adecd33a765095df" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; substitutes nothing at all. These are the two most common ways to instruct a program that it should read from standard input or write to standard output. If you need something more elaborate you can use an &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4019cbfa1ecf968c67a059f9d69da825719629e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; substitutes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c28b4998a4a5763c08ba06a5a430c91622a6962" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; substitution. (See below.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4484966b786972befcd67913fd7e8210357446c9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; subtype, instead of one controlled by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16138baa8e830027f4d37afba05054893e7eb9a4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix on integer constants.) Note, these suffixes appear in macros defined in the system headers of most modern systems, e.g. the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1ee32f9ff27eda9c15d4b6f0b5915be69d929b2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix still has the GNU meaning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0aa90fa86d89bb8805ba9eee92f744e653e7869" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix) when assembling them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97dcee030c8836a2865e8ecc2f203cfd153ad2e4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix, so C++14 code that includes the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139aaebaa57ad8962a5b2ee4325f224e112ed95f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix. You can specify &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b06d5de8e85da80af8c020ff2227f4057f93e6c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; switches are supported in addition to the above on x86-64 processors in 64-bit environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8401ca4577a9a8d882babc3aea71e1a25aaa9f59" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; takes highest priority over both &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f54e26bc87a0a2fab77340b077d9aa7e37e715b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; takes priority over &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd16d9a7076736808720d07350c776f80630d493" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; target, this option implies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e92a2604d0f7fdca7e7d5ac91e19423966fc2ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6f1baebf517b27b1ba1e0f0c7818c2f92d4d56" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; targets default to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4ffd0a68cd7722edb8438d55a609340643f57f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; targets, the default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056147ad41bb52b66af9ed7beb627c0f9b4a5179" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; targets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cba9e03a9a92a6fd1bda85caf604b0dd55e559" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; the code generation is configured to produce</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9ed84575adb586ca1346600f1a87f2b54c62a5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; the code generation is configured to produce shared library. In this case</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac92faa0283305d0be528c0c722ea1eddd63670" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; the code generation is configured to produce static binary. In this case</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751dbcee70e5f93858d0abf30ebf091c78065bd6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; the compiler assumes that incremental linking is done. The sections containing intermediate code for link-time optimization are merged, pre-optimized, and output to the resulting object file. In addition, if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35eaaffc6295c79621d7febc295f4cc0cbff4c6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; the member template definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6fed6549190b0d965e5cf7e0fced517211eb29" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; through &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c96ef5db986721c2692b006a74b2645ab6ec4d7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e045794d45b41e40a15ba6b03ecbcf2cab0b14" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to all global symbols, so the assembly code can be used with the &lt;code&gt;PREFIX&lt;/code&gt; assembly directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5fd08a143b7e4c653b1c16c9d4a22c5e44257f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to an expression, throwing an object, or referring to a type in a catch clause or exception specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ba7bcaeb175b51595a5178d5d588175c55cc008" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to assign no, highest, or second-highest (respectively) priority to dispatch-slot restricted instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d610fcebfd8bd1b6f66db74974496ebfc8cee4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to be 32-bit), and that floating-point values up to 64 bits wide are passed in F registers. Contrast this with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bf81d3dc1a8984b11d4917576184cf1038fef8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to be a weak alias for &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4b68da81b75fb6eeb1e3d153c58913b646be22" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to be overridden by one returning a different pointer type. This extension to the covariant return type rules is now deprecated and will be removed from a future version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747bcf06703eb0d0d706c568a3d7c0b245716a7f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to be used as a keyword to define vector type variables and arguments. &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bcbfddd43a7864ab14d920c726549a936b1ba3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to create new partition for every symbol where possible. Specifying &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd03b9ee76c923a101cf9ae36c90388c61a93702" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to distinguish them from error messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e10686e6c0bbadc7a760bb97c53700373049cef" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to dump to standard output, and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5221e3fc33dc129b4de8fa80d8b7b8406130587f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to filter out those warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e207edb06c44e1ffee14b09d2bd576241fa09fbb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to include the header file; &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c280763e15f6827a82d3da1b06a402bc2dda96" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to invert the option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28dcd81706e9335d54173713faabbb0a53ff42ed" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to link his or her application. Applications are not required to use the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b9f008a5a0614cea796c50934c1070f0f7fcb0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to mean &amp;ldquo;any integer outside the range -128 to 127&amp;rdquo;, and then specifying &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7319c1f5fe9cd726827d4fd8725f43a46c30b5e3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to specify a nested subobject to initialize; the list is taken relative to the subobject corresponding to the closest surrounding brace pair. For example, with the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb981e4b7c234addc580de918e72cb9b746b3955" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to specify a partitioning mirroring the original source files or &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0690b069e16610f3dde8f4da1fa3b45e233474" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to specify partitioning into equally sized chunks (whenever possible) or &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96b741c5b8c6ab7fbc59d6b6f9ecbfec23495f3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the architecture name. Extension options are processed in order and capabilities accumulate. An extension will also enable any necessary base extensions upon which it depends. For example, the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e325ed7f61f460b2ad46963e7303d06823e0742" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the command recipe in the parent Makefile for this to work. This option likely only works if &lt;code&gt;MAKE&lt;/code&gt; is GNU make.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="876029c6ecf433b4603b8318f33435182f18ba71" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b553527276f98960779fb5b0a35d9e9c86b311" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the integer. To make an integer constant of type &lt;code&gt;unsigned long
long int&lt;/code&gt;, add the suffix &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e70c71b754410dd31984a69e3cab392094feb24" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c69d15f8e44a888d4bd1368919fd60293ccc2c89" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the source file name, and the file is created in the same directory as the output file. If the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ed3c9950521cf53b071d8dd20633754dbb7cc1c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to treat it like a warning (even if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c80b7645a1d854bbd17006c82f06144b4c40be4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to treat this diagnostic as an error, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bef1515c6834bc8f9c7e30752b5e04672e84850" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to turn off warnings; for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a6c2233326ca538b521ebba35c17f6f6321fff" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; toolchain, this option causes the hardware BSP provided by libgloss to be linked in if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da113e399a1a9773ce6971dff90293032832143" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; toolchain. Certain other options, such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d9fddfa8f96adddd4fef84d8627d7567c4c3c1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; tracks tokens locations completely. This value is the most memory hungry. When this option is given no argument, the default parameter value is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c937e0b6cc89a062161ae10ec3d7d4988e175f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; tracks tokens locations in a degraded mode for the sake of minimal memory overhead. In this mode all tokens resulting from the expansion of an argument of a function-like macro have the same location. Value &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e39be116fd453fb19403f3e451fbe0a4fb7794" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; tunes performance to the host system. This option has no effect if the compiler is unable to recognize the processor of the host system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a47e25cf94d29dd512a01ee7945fbe67643846" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; turns on all types of branch protection features. If a feature has additional tuning options, then &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ac0da77896e4b23930650fa879227a5fd24579" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; turns on branch target identification mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d18f91c55c591d82a20ec7351429f79b0975340" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; turns on return address signing to its standard level: signing functions that save the return address to memory (non-leaf functions will practically always do this) using the a-key. The optional argument &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6b662caf8ef50e43f9e777831f3d1e52831fb5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; uses alignment value as specified by the psABI, and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8fb1eb4d4587ebe559311c119a4e77b06ec6d9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; uses increased alignment value compatible uses GCC 4.8 and earlier, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f23d00d56c1931b522364fd1aa0e1c9e7ed44aa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; uses increased alignment value to match the cache line size. &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15400798f607d653c6916b38ea136006f4471a6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; value in user code must be done with caution, since the compiler might use &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6f876c00cb87147116ea210761a7c389fcc9ef" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; values are used to exactly determine which path is taken more often.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ca6633de11e82e2247b004389f4aa468fffbdd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; vs &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0779050ce9987f679c1038a47da66263698a9c04" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; was simply substituted with a file name chosen for the previous &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502558e63736c003256f143d104a28598f133cdb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; was simply substituted with a file name chosen once per compilation, without regard to any appended suffix (which was therefore treated just like ordinary text), making such attacks more likely to succeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f519e5816b445a4462f7c6c074b8d53555f7ae7c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4581798a42fc267b5b88d8c529c59a7d48e1ec83" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; when inverted (ones complement)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b16141646060bcac76d2f93a69ece24464912b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; when negated (twos complement)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f8cbcf9ad14072c85731a453e55d733f44faf0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; when not used together with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f1b1569a8bb4f983fcf2762d48347bd3c8a75b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; where &lt;var&gt;cond&lt;/var&gt; is one of the standard conditions defined in the ISA manual for &lt;code&gt;j&lt;var&gt;cc&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;set&lt;var&gt;cc&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224bfa989cb06395bf3f62406fb52c196c7e4a54" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; where &lt;var&gt;n&lt;/var&gt; is the size of the data type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d34efd1eefc71bdc46e1c691387ffc6d0f440a5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; which appear to be two hexadecimal constants separated by the minus operator. Actually, this string is a single &lt;em&gt;preprocessing token&lt;/em&gt;. Each such token must correspond to one token in C. Since this does not, GCC prints an error message. Although it may appear obvious that what is meant is an operator and two values, the ISO C standard specifically requires that this be treated as erroneous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce548baa3dcfd80050cebbf016ad0a342bb4bbe1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; while &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2d77e78180f9351e6cde7ef400900cba22c2ba" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; while others do not. See, for example, the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e59717a41934fe3634c5f40aca5aa391956453" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; will do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93d327d16920f7102563d1856dfddf404a0da93" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; will override the available floating-point and SIMD extension instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4ab9547533f8fc34d036f65d0098a66594fbf6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; with a new one. The new definition adds in some extra command-line options before including the text of the old definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9f1bf742bc9d084b36bd3cb92ef2565aa5bbfbe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; with no argument, it applies to an include file with the same basename&lt;a href=&quot;#FOOT4&quot; id=&quot;DOCF4&quot; name=&quot;DOCF4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; as your source file. For example, in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a3015dda596b394c38dca135d21f85aa3ebffe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; without &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc205d9bf0c9ff774def5e928c5c2881b5a3c50" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; would be transformed either to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc804106108f7bd979f6feca0e37d799668925a5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;&amp;mdash;for example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00de7c01d30f729b5e62e59bad477a85d24c72f1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;&amp;mdash;not for other compilers such as plain &lt;code&gt;gcc&lt;/code&gt;. Whatever the ISO C standard says is relevant to the design of plain &lt;code&gt;gcc&lt;/code&gt; without</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb0f5083283b8ed0056439fc5a6b003ecdf5b70" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;&amp;rsquo; is preferable for &lt;code&gt;asm&lt;/code&gt; statements)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d710ff823f1d10d2285e509ae3146f07fa57416" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;)</source>
          <target state="translated">&amp;rsquo;)</target>
        </trans-unit>
        <trans-unit id="53a06a250ae2821edd769135818cefa09c3a1422" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) can be controlled, and not all of them. Use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66a59b09899d33d90f56a9d67697d71807563efb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) followed by its (zero-based) position in &lt;var&gt;GotoLabels&lt;/var&gt; plus the number of input operands. For example, if the &lt;code&gt;asm&lt;/code&gt; has three inputs and references two labels, refer to the first label as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e475de6573c410ed9174c3f23c2d0b2c68dd6feb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) from the option name. Unless documented otherwise, an argument can be either numeric or a string. Numeric arguments must typically be small unsigned decimal or hexadecimal integers. Hexadecimal arguments must begin with the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757956e655505260d48be09c6401ced2f6616e52" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) instead of digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b40161a5ee52fced90ad21e794bbab6943bfce4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) instruct &lt;code&gt;gcc&lt;/code&gt; to do nothing at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48998525d685598cafa634dea469c07a14f8c01" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) is determined by the flags that specify the ISA that GCC is targeting, like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3b8003d677b625cc848dc562e266c1883c1bf49" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) is used. Usually they indicate a typo in the user&amp;rsquo;s code, as they have implementation-defined values, and should not be used in portable code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce679860a255116638f86cdf1bdd003a1e6221f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) or generic structs (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774731d593e5209e46f6cf8756de5fe9e5ea50e2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) or used indirectly (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55dc4d3813615932e15b8e05793ff32f4eb5bb3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) take effect in combination with other atomic operations on specific memory locations (e.g., atomic loads); operations on specific memory locations do not necessarily affect other operations in the same way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101017a161e8a4a5da8f0b61d9487a84646ffa42" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) to delimit the operand parameters after the assembler template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24500a4d6202ccddafac06900a7b0060daebcfb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) within a single string. Spaces are not permitted within the strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7de57a249813f45c8bb234a3b77cdb949b14668" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;)&amp;mdash;and don&amp;rsquo;t do anything else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920418559681c5ff8ecbd8a0896c35c865a62667" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d955da2a687bb782e3a613396d318419036d3fc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), an assembler template such as this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed22c9b62e2fac731d3fa0a84f6b34a16db9b4bf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b742c0a760f2ed8a2f4e6eff2d6ab3826154ad" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), no object is needed to obtain the address of the function. They can be converted to function pointers directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa12a264be1002a46fabd882b95b79338c094c3e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), placing the value in a register (&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4de0145c847e059e54316341fcc9c9a246eb97b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), the compiler chooses the most efficient one based on the current context. If you must use a specific register, but your Machine Constraints do not provide sufficient control to select the specific register you want, local register variables may provide a solution (see &lt;a href=&quot;local-register-variables#Local-Register-Variables&quot;&gt;Local Register Variables&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1384fe0c31b5149aeb485dfa12fc6e40b1ee80a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;).</source>
          <target state="translated">&amp;rsquo;).</target>
        </trans-unit>
        <trans-unit id="247554dea8017ceed4ebc2f0ddf4c1c56122fdae" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). A struct type is used directly when it is the type of a variable, member. Indirect uses arise through pointers to structs. That is, when use of an incomplete struct is valid, the use is indirect. An example is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241137680944e9803782618a7c6234ee4be1718b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). Generic structs are a bit complicated to explain. For C++, these are non-explicit specializations of template classes, or non-template classes within the above. Other programming languages have generics, but</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4f339ea1f6efdfdb3f1de7007ecc1e689a70f6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). ISA strings must be lower-case. Examples include &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c515e25ab72e950aedab4e643cd942c7acaaf78a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). ISA strings must be lower-case. Valid ISA strings include &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28dcb04b7cec7c1948f9a3d1e0eeb18abfddd844" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). If</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db301197128435967c7812046b072aff4533c56" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). Instead, the object files contain references to be resolved at link time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7133c2944aa60bfeb0d20f3c591dd62c46fdc22" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). Some assemblers allow semicolons as a line separator. However, note that some assembler dialects use semicolons to start a comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77387bea931c55865e91e9c6e518282a6ee31286" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). The scope of the name is the &lt;code&gt;asm&lt;/code&gt; statement that contains the definition. Any valid C variable name is acceptable, including names already defined in the surrounding code. No two operands within the same &lt;code&gt;asm&lt;/code&gt; statement can use the same symbolic name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feab9b68ab784ee007bfd9ffdaf2fcdc72d72d96" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). Typically these qualifiers are hardware dependent. The list of supported modifiers for x86 is found at &lt;a href=&quot;#x86Operandmodifiers&quot;&gt;x86 Operand modifiers&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d92a4f78d17aa1decb8d93c9e38d473afcd7d8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). Using the generic &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e06582ed3f8a32ea5ee39b25a0290e388c00c24" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, &amp;hellip; &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5539094fa0b03be2ecf5d76b2f76c3ceb8adb603" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b63c535f0550f2343414feda1dd2f0ebecc5480" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, 0&amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fb52f327e38a530b04e2b3ae2d13a53b83a7fe3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, a reference to a previously defined structure or union such as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55abc55e6306905b6823631c506fd0ec75ff0f27" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, all workarounds for the targeted processor are enabled. The &lt;code&gt;__SILICON_REVISION__&lt;/code&gt; macro is defined to two hexadecimal digits representing the major and minor numbers in the silicon revision. If &lt;var&gt;sirevision&lt;/var&gt; is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c2b924dddb74784fdc00cbc01bb9d353155e30" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="483d46fded9becc232dbdb93e3158f3f42b791e2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and &lt;code&gt;*&lt;/code&gt; sequences as well, although they have a stronger binding than the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025eab9a1b6623d94918f0efdf239940346391b4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and GNU dialects of those standards, such as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9269f03454f6ba284543f68ccb8599de5d8e5ca8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and appends the platform&amp;rsquo;s usual object suffix. The result is the target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2073c52a5a4291471a2c1778b6a5d6aa27011cd9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and each switch starts with an &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f905781c589b0e4579c81050815f957daef62254" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, as shown here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ce993e58d935c75aafba5b1fdb485a8a776db3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, because of the need for those to form complete file names. The handling is such that &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e67ee4ffd5a5984f784e0175ae5cd377da2fd5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but a function call is only used if a trap is not available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f33fe8f4938fd885f3212c8d4fcaa4cd1d82de" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but also generate GP-relative accesses for small data objects that are external, weak, or common. If you use this option, you must ensure that all parts of your program (including libraries) are compiled with the same</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2411a70f498933e6be4a4e9d0ef8e6b417a49aa8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but do not generate an error message if the include file cannot be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f242eacde5ab79e86477338531360b8ba9ecec37" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but generates a new temporary file name each time it appears instead of once per compilation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae3620a4615e0395e0b6bb2723f394be5b4513b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but include the file suffix (text after the last period).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092a366239711ab0e1774f55ad486f40925b2c39" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but inexact traps are enabled as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba30ddb7f54c0471e6b8c42e687a833e9c23aee" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but puts &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39218b3d97dc3ec712bf382cd7959367acbcf492" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but the instructions are marked to be safe for software completion (see Alpha architecture manual for details).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95b52d04a925b481ffc7ad53fe6eb07f0a4eebe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, depending on whether a basic block is reachable via non-exceptional or exceptional paths. Executed basic blocks having a statement with zero &lt;var&gt;execution_count&lt;/var&gt; end with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d00e224ec92d1c22749474d1e91e24964ab5c2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, depending on whether they are reachable by non-exceptional paths or only exceptional paths such as C++ exception handlers, respectively. Given the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136c3d628fc50dc61e6297006309885a5d8aee50" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, do not assume the location contains the existing value on entry to the &lt;code&gt;asm&lt;/code&gt;, except when the operand is tied to an input; see &lt;a href=&quot;#InputOperands&quot;&gt;Input Operands&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eebd87ad91943223aef3936c3e20f0c176f9150" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de40d739dfc6920248f5b9046b3c9b839f920f68" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, etc., with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aa5684705ecc6e2def69b7b8430a853ec505c39" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, even if they are executed earlier. The phase letter is one of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e3614efaea8eab44d2d073c727d9df85c09585" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, except if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05234cf66772b81ecd442f963fde2d9cf3f3b580" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, except that it verifies that bits that are not in the lower 32-bit range are all zero. Must be used instead of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066ab954d39195c280a98dc287f05dc34c467231" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, except they don&amp;rsquo;t share the same suffix &lt;em&gt;space&lt;/em&gt;, so &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d65587f22436a3a12d35d6fe27c3546587cef2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, for example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d4f3e8108a13ab29d4b2e0e63a1ca33c2b22454" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, generating a new one if there is no such last file name. In the absence of any &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db8be9dbf00d53f36b02e299cb40c1ccf21b3d5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, i.e., make every symbol public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9417c06d6d376990e78c94bffca4a185de5c4ea" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, in which case the &lt;code&gt;__fp16&lt;/code&gt; type is not defined. See &lt;a href=&quot;half_002dprecision#Half_002dPrecision&quot;&gt;Half-Precision&lt;/a&gt;, for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f1d4ba970d96674fdfce27113ede13dd96c83c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, in which case the rules are written to file &lt;var&gt;file&lt;/var&gt; using &lt;var&gt;target&lt;/var&gt; as the target name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c4ce616b187a8cd7e37370e7c2a4558687b5bd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, in which no floating-point arguments will be passed in registers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e7b4dd0f31f9fc49145a20fdc34f56d6192b15" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, meaning no alignment. The maximum allowed &lt;var&gt;n&lt;/var&gt; option value is 65536.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1df550e442c6ce053b25ec1d413b95d867426aa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, no workarounds are enabled. If &lt;var&gt;sirevision&lt;/var&gt; is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4638287656ac02959e2cefcae6acca031d4bd193" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, only the preprocessor macro is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f307dbc595c36b91f1275e80e0395cbaf3c6504c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3c982032ea0459140427383a85dba0acd2e1fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or (for shared template code) &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eab487e4b72d07293fe7c795f5de0ccb7970c25" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or a reference to a &lt;code&gt;typedef&lt;/code&gt; name for a previously defined structure or union type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4b0ae84ca34d4bad67d128809cab75207b33d0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or even &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1087187ab3a7e62992e275357cb57bcfa1c106" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or it might get &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aca8c8acb74e379a3304f127abf609845bc280e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or make the path absolute when generating a relative prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6358603813ed89a66fd98d2859d299f75ccce85" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, otherwise, it is turned off.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f1fda70fb0c46563a4357bb73dfbd4447b31663" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, respectively, in the following character). In the case of function definitions, a K&amp;amp;R-style list of arguments followed by their declarations is also provided, inside comments, after the declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3101771b9632d8f958f8bd2e3b3975e5bd0ed02" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, so &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b364cf3dc5ad7fb131b66cc0868f3b8543e70b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, that are defined by ISO C to stand for single characters. For example, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4931b59d68a18af6c7fbe7e255d105b5cb1219bb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the &amp;ldquo;software trace cache&amp;rdquo; algorithm, which tries to put all often executed code together, minimizing the number of branches executed by making extra copies of code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2073bc4d3052c9d45b6e4d60d51421cb09ad40d8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the &lt;code&gt;__SILICON_REVISION__&lt;/code&gt; is defined to be &lt;code&gt;0xffff&lt;/code&gt;. If this optional &lt;var&gt;sirevision&lt;/var&gt; is not used, GCC assumes the latest known silicon revision of the targeted Blackfin processor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7faca6a353f0ed8bbbd7fe58280558417f88bc1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the &lt;code&gt;__SILICON_REVISION__&lt;/code&gt; is not defined. If &lt;var&gt;sirevision&lt;/var&gt; is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c8011c2f55c0ac81c5d9ceb64477468b6c9a9e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the compiler emits code for the function itself; this defines a version of the function that can be found via pointers (or by callers compiled without inlining). If all calls to the function can be inlined, you can avoid emitting the function by compiling with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fce4bbe106b081174a0f5bef32f95cbfa790ac6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the effect on an inline function defined in that class is similar to an explicit &lt;code&gt;extern&lt;/code&gt; declaration&amp;mdash;the compiler emits no code at all to define an independent version of the function. Its definition is used only for inlining with its callers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf5bc1539de695c3b4d3767d9c103937369811c1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the last two letters must both be literally &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db79a20c00080e7d5e4b192fe6de466faac9115a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the macro names the resolved architecture (either &lt;code&gt;&quot;mips1&quot;&lt;/code&gt; or &lt;code&gt;&quot;mips3&quot;&lt;/code&gt;). It names the default architecture when no</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d83a5ecd0c633a33d12c8a0921f9d9646b8105f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the operand can have postincrement and postdecrement which require printing with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780d16f0177d79dcb186b26e4731ad4f3ff27e90" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the operand can have postincrement which requires printing with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958abf9b2ba30ada1927e0d18d675fed8d221758" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, then updates the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f80d08a483db41013d0e0117c5b88a8e8ad1bd3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, there is a corresponding &lt;em&gt;base standard&lt;/em&gt;, the version of ISO C on which the GNU extended dialect is based. Warnings from</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8483af113196f523d78cdfed023c2f13973b39e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, this contributes no text to the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d636acf24a127bc2b95b62fa251ecc17f5cc915" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, this is just like &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e894972486d8d6096ff2223f65e4a8883430900a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, this macro is not defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db9d39068e98a34cf2dbeda58f4d7c72ad17119" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, this works even when infinities, NaNs and negative zeros are involved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f6f2167738a6bc27a8918056c08bdf0ac8ac61" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, those functions may not be loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848c5ba958a75e22dba01b795952aac18411fbbf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, thus the invocation of &lt;code&gt;cc1&lt;/code&gt; is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d98c164b412ee8aa5fd4b179a66947857f9efe0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, underflow traps are enabled as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412c73084b584a3fd2f571e198882146b578aafa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, usually the letter indicating the most common immediate-constant format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2af747b468ebcf98a4ed4b7baee2a44d3c411c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, when supported by a target, or to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efda24d512ee43a5706f4bdf3be7939f7f6d247" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, when the structure field has the misaligned offset:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93aa1e264ff57887de5dc1cb5417f8dd989d1e09" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;L&lt;/var&gt; is an uppercase letter. This is for ISO C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="739a7d9d6e619ecc7399139269b374ab43d85367" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;X&lt;/var&gt; is a major version, &lt;var&gt;YY&lt;/var&gt; is the minor version, and &lt;var&gt;Z&lt;/var&gt; is compatibility code. Example values are &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d769a376fcd2331ff3efeece4ef65cc094eb46d9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where the name of the friend is an unqualified-id, could be interpreted as a particular specialization of a template function; the warning exists to diagnose compatibility problems, and is enabled by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4545941e1a456d9e76018c4df8a40b960f1b83" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which can be confusing. Use the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a9a59268985f9334c00a17967c54ff7c32a0e16" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which disables return address signing, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f652520c80de99647e10eb1ff77ab629d99978" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which does not increase code size (except sometimes due to secondary effects like alignment), or &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8659feb795576fd08fccb6d569ea2287637015e4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which enables pointer signing for all functions. The default value is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bcf01b8de353a2ead74230ef433e9b1d5c42c5f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which enables pointer signing for functions which are not leaf functions, and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919dfa4777ff858a1ffee761219e579bcc47fff2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which fetches the thread pointer from &lt;code&gt;cp15&lt;/code&gt; directly (supported in the arm6k architecture), and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0bc21f369e03da1ff0fbdfedd85fac2ceffcf5f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which generates calls to &lt;code&gt;__aeabi_read_tp&lt;/code&gt;, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7bc52286a0fa82e570dab15353ed73c224a194" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which is treated exactly as if &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8132d93b5b364fb4107d3f7f7e80d8cb8cca0a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which keeps function return unmodified. &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c0ef144ca1606cff5c2fcba721912c1bf504b40" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which keeps indirect call and jump unmodified. &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beca4baa89360933636ffbc7ac4cf4af22fdf467" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which means that no register is used for this purpose. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1101672b2c1cf966ba104538143c46f9af09e54f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which means to dump messages about successful optimizations from all the passes, omitting messages that are treated as &amp;ldquo;internals&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3faa7f76311e939879aa32607e1cbda0c78aeffc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which produces vector-length agnostic code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebb01c01a4dcc45ae8a85f860ce121ea49fd1a8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which selects the best architecture option for the host processor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13bf69f8c2ad5370a2f855e913a0eaf2e0a40255" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which should be invoked with the command-line switch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06afe658b05579d643bf49716402cd959b627012" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which specifies Chaitin-Briggs coloring. Chaitin-Briggs coloring is not implemented for all architectures, but for those targets that do support it, it is the default because it generates better code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c08f6e9afbde3eae65486c01beb0bfcedf5e50" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which specifies Chow&amp;rsquo;s priority coloring, or &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6395fd7f5367f1a12df6a010dc30044349a64d3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which specifies to use IBM&amp;rsquo;s Mathematical Acceleration Subsystem (MASS) libraries for vectorizing intrinsics using external libraries. GCC currently emits calls to &lt;code&gt;acosd2&lt;/code&gt;, &lt;code&gt;acosf4&lt;/code&gt;, &lt;code&gt;acoshd2&lt;/code&gt;, &lt;code&gt;acoshf4&lt;/code&gt;, &lt;code&gt;asind2&lt;/code&gt;, &lt;code&gt;asinf4&lt;/code&gt;, &lt;code&gt;asinhd2&lt;/code&gt;, &lt;code&gt;asinhf4&lt;/code&gt;, &lt;code&gt;atan2d2&lt;/code&gt;, &lt;code&gt;atan2f4&lt;/code&gt;, &lt;code&gt;atand2&lt;/code&gt;, &lt;code&gt;atanf4&lt;/code&gt;, &lt;code&gt;atanhd2&lt;/code&gt;, &lt;code&gt;atanhf4&lt;/code&gt;, &lt;code&gt;cbrtd2&lt;/code&gt;, &lt;code&gt;cbrtf4&lt;/code&gt;, &lt;code&gt;cosd2&lt;/code&gt;, &lt;code&gt;cosf4&lt;/code&gt;, &lt;code&gt;coshd2&lt;/code&gt;, &lt;code&gt;coshf4&lt;/code&gt;, &lt;code&gt;erfcd2&lt;/code&gt;, &lt;code&gt;erfcf4&lt;/code&gt;, &lt;code&gt;erfd2&lt;/code&gt;, &lt;code&gt;erff4&lt;/code&gt;, &lt;code&gt;exp2d2&lt;/code&gt;, &lt;code&gt;exp2f4&lt;/code&gt;, &lt;code&gt;expd2&lt;/code&gt;, &lt;code&gt;expf4&lt;/code&gt;, &lt;code&gt;expm1d2&lt;/code&gt;, &lt;code&gt;expm1f4&lt;/code&gt;, &lt;code&gt;hypotd2&lt;/code&gt;, &lt;code&gt;hypotf4&lt;/code&gt;, &lt;code&gt;lgammad2&lt;/code&gt;, &lt;code&gt;lgammaf4&lt;/code&gt;, &lt;code&gt;log10d2&lt;/code&gt;, &lt;code&gt;log10f4&lt;/code&gt;, &lt;code&gt;log1pd2&lt;/code&gt;, &lt;code&gt;log1pf4&lt;/code&gt;, &lt;code&gt;log2d2&lt;/code&gt;, &lt;code&gt;log2f4&lt;/code&gt;, &lt;code&gt;logd2&lt;/code&gt;, &lt;code&gt;logf4&lt;/code&gt;, &lt;code&gt;powd2&lt;/code&gt;, &lt;code&gt;powf4&lt;/code&gt;, &lt;code&gt;sind2&lt;/code&gt;, &lt;code&gt;sinf4&lt;/code&gt;, &lt;code&gt;sinhd2&lt;/code&gt;, &lt;code&gt;sinhf4&lt;/code&gt;, &lt;code&gt;sqrtd2&lt;/code&gt;, &lt;code&gt;sqrtf4&lt;/code&gt;, &lt;code&gt;tand2&lt;/code&gt;, &lt;code&gt;tanf4&lt;/code&gt;, &lt;code&gt;tanhd2&lt;/code&gt;, and &lt;code&gt;tanhf4&lt;/code&gt; when generating code for power7. Both</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec52c6c8b68900c9a1b37331cf41ae5885dd6c8c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which specify use of that register as a fixed register, and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa47f8504586e908692f17a17fab12ae381513a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which still allows the compiler to generate code that uses the F and D extensions but only allows floating-point values up to 32 bits long to be passed in registers; or &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d99d4b03fe4435b89eadd0e9f6c614ea297088" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which uses the best available method for the selected processor. The default setting is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e084164fbfa7bff5a69b7598f6c58a8fcd0c7b2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, without regard to any appended suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27846e206f9ebe9eb4cd3b594b0158dff325fe5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, without spaces between multiple switches. This is supposed to ease shell processing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86308658ed645552e296e3e286b374ae7fff10b1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;,&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;,&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="3525fe92d1fe943317ddfb69e6b92954c6550401" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-newline. The rule has no commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ae559764dfeb5b5e27bbbecfa78f7d761264167" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-prefixed sequences to substitute variable text or to conditionally insert text into the command line. Using these constructs it is possible to generate quite complex command lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1c5c0d2a49660e4c22ef3e1e1704e0f798a0eb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences for spec strings. Note that spaces are not generated automatically around the results of expanding these sequences. Therefore you can concatenate them together or combine them with constant text in a single argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dece5708020cd65d858b4b08e3d8683a52a6a69" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;.</source>
          <target state="translated">&amp;rsquo;.</target>
        </trans-unit>
        <trans-unit id="c07eebce021b49b4fc041471ed4831d6137b2147" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. %{o*} substitutes this text, including the space. Thus two arguments are generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d70589a69d369e7bf4347c7ccd68068ef698e63" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd99174a74b07be99af73cd2272c2a9644b883d1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (This is currently a subset of what</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebabbca2f175db2d4ffdc366591326dd41543c2b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. &lt;var&gt;SUFFIX&lt;/var&gt; is terminated by the next space or %.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb17f136b28af159a54ba2b3c86d8d1f3eca0e5d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. &lt;var&gt;suffix&lt;/var&gt; matches the regexp &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2bfbba1f4c17d6ec9876dae8da4ae1e45397993" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. All values of &lt;var&gt;model&lt;/var&gt; have the same meaning as described in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a41e2a6f327d47909ecc0aba5f40c82b05f73e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. As &lt;em&gt;earlyclobber&lt;/em&gt; operands are always written, a read-only &lt;em&gt;earlyclobber&lt;/em&gt; operand is ill-formed and will be rejected by the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0112416480771c639f69f4bcd6e44161edeb27a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Aside from that, you can use any other GCC options; but if you want to prove that every single line in your program was executed, you should not compile with optimization at the same time. On some machines the optimizer can eliminate some simple code lines by combining them with other lines. For example, code like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34668a2e06b3aadb0dbe019b921c38fc3dbab69b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Backup copies of inline member functions, debugging information, and the internal tables used to implement virtual functions are all generated in implementation files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef3f97180bfe2b9e9474f1ef401797f93dc9d108" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. ColdFire architectures are selected according to Freescale&amp;rsquo;s ISA classification and the permissible values are: &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9fac1370b0628735cce987d97cf16c0ec23915" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Darwin does not support &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="144515adfb3f2fe5defdce77d168399c9e3984b2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Disables the floating-point and SIMD instructions on &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f011d7b5d4cc55f295dd9f02d73db5853869155" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7234b5dfd962028dcfee17fd1c40d6becee595" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. GCC recognizes files with these names and compiles them as C++ programs even if you call the compiler the same way as for compiling C programs (usually with the name &lt;code&gt;gcc&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3dbb764224c436ae5269f0b14a98e9ab5220599" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. GCC, following the ISO standard, does not allow this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08bff4931e5584bd604b402499372284b96ce5ff" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If &lt;code&gt;%*&lt;/code&gt; appears in &lt;code&gt;X&lt;/code&gt;, all of the alternatives must be starred, and only the first matching alternative is substituted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7d68d3cf1754b449dca6cd9f416805cacc80a2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If a function is named that is not built-in in this version of GCC, this option is ignored. There is no corresponding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4266bea6ec9a1e6780e56907ca8d131f13801c3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If instead you write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b591f0ca58fd0c9f6c02aaebea340ca453078cbf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In C++, the mangled name for the target must be used. It is an error if &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b088c9c98ee027b033a647cf3092141c87b2c30d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In the case of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9036ed5683fc147515f005ff7457f833667588ae" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In the past, the system header files on many systems did not actually declare &lt;code&gt;time&lt;/code&gt;, so it did not matter what type your program declared it to return. But in systems with ISO C headers, &lt;code&gt;time&lt;/code&gt; is declared to return &lt;code&gt;time_t&lt;/code&gt;, and if that is not the same as &lt;code&gt;long&lt;/code&gt;, then &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71de86373b2c95a3f4d64f72180d98333b9c245b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It is used to define &lt;code&gt;struct foo&lt;/code&gt; in such a way that &lt;code&gt;struct foo&lt;/code&gt; has the same layout and the structure field &lt;code&gt;x&lt;/code&gt; has the same alignment when &lt;code&gt;__u64&lt;/code&gt; is aligned at either 4 or 8 bytes. Align &lt;code&gt;struct foo&lt;/code&gt; to 8 bytes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7b69fb74833b9999f7b2578bf27a179fd441fc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Likewise, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25ae87870095d116e612875bacad3ca68d7deb7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Not available for ARC EM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5033799763d08b021660d520078ce1d7313d968" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318b20bba0b9b6136cc75e83b5151d88416e904c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that only unnamed structs and unions are allowed, you may not have, for example, an unnamed &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2efd7a1f09ee927b7431e335115931670665373" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that the choice is subject to optimization: the compiler may use a more efficient model for symbols not visible outside of the translation unit, or if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d84fd44705faa919710e5a5a567c03be82e4e5e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Pedantic warnings are also disabled in the expression that follows &lt;code&gt;__extension__&lt;/code&gt;. However, only system header files should use these escape routes; application programs should avoid them. See &lt;a href=&quot;alternate-keywords#Alternate-Keywords&quot;&gt;Alternate Keywords&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d106126450d402defd32926b6a07b8058193e8cd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Previously, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91fec6793e91142970cbc2f94e0e2d931265d9a7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Refer to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1311df9de660e63cadb852066da316d261298d24" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;environment-variables#Environment-Variables&quot;&gt;Environment Variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf91ece2d881a3cd32c835822bcb56d2ad0243e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Some calling conventions are impossible to implement on some ISAs: for example, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a190d1fbd8df2eaeb97bf8dfebcec6e9fb64c0b2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Specifying &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b517fa930eabc5143e6a2488d57edbae11688ae8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Such a setting will name the data file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1611dd4569a88af914da509268caa5134b1296" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95987fef4e179da34ae695b2d604db02e1ef2507" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The ColdFire &lt;var&gt;cpu&lt;/var&gt;s are given by the table below, which also classifies the CPUs into families:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f26c85467bca2a86cf187cdaa1f82a92dd500b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The ColdFire microarchitectures are: &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea24288b4005507fd45c41a5bb5599705b6e6fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The compiler also issues a warning, like &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c67138f86f8bd3b4491ad0910cc95a4fc7e9b819" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The compiler gives errors for such constructs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0726de9452e52fbfdda6ff6a4218547b363e917e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The default ISA is sm_30.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984545af201446c7e2041d27d40b9dfbdfc1d480" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The default cache size is 64KB.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f007e66a67a47ccee24c846b7d52a755cea4ae" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The default depends on how the compiler has been configured, it can be any of the above &lt;var&gt;WHEN&lt;/var&gt; options or also &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f888b01addeed94f74efc8a92fbac99be06433" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The default if</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0c5ec8fd22ea6fee202ca6916c9e682ee6e7fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The default is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e259ad7b9cda818e8d39201ed478f72bec6ec5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The first one is useful for single-threaded applications, while the second one prevents profile corruption by emitting thread-safe code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7b6db71fd3de95568e7e8bb18be320b22766cf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The label must still be listed in the &lt;var&gt;GotoLabels&lt;/var&gt; section when using this approach.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509f5bcf7e8400bc0491d4aeedccc1df5fdbcc82" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The meanings are the same as for the extensions to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50a8e414947d71b3be5444f7bfdf7f9c5a0d74e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The option is needed when the program extends the lifetime of a scoped local variable or a compiler generated temporary beyond the end point defined by the language. When a lifetime of a variable ends, and if the variable lives in memory, the optimizing compiler has the freedom to reuse its stack space with other temporaries or scoped local variables whose live range does not overlap with it. Legacy code extending local lifetime is likely to break with the stack reuse optimization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e76650fa4e064c904802723a282ea409b1c512" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The processor names are: &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7ab966964d35b1d65d62764fbde6b02ce185c3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The special value &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1d5e9115273904b0d4e3217c9f9dadfb94a592" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The value has type &lt;code&gt;void *&lt;/code&gt;. This value is a constant and can be used wherever a constant of that type is valid. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a49ed6249ec64656dcc28e26855c09a1e70be82" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. These are the extensions that GCC uses for preprocessed files created by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c340165ed2781f436e620f363d28887620b552e8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. These can be used to improve optimization. Currently, they are only used in one place: in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80fa6be15a7162a6632d31e099a63ea1a1b003cc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This in turn is used by the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60a420a1dc9c2b1ba63eb51ebb8e08cd0a754a3a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This is a GNU extension. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877bd31f7e2057375c174895bb473eb44a99c3aa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This is particularly useful in environments that operate a lot on the bit level (like microcontrollers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54f292cb6286085f0e53e7d45c832d8af478541" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This is useful if sourcefiles are in several different directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea282d75128e2e55025b832d35cd242bed89773" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This option has been deprecated by -mbranch-protection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7480b51fde68ea2f5ca5289f9811faf70d22a0f8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This option is deprecated. The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef37fc6184ad856cae988d5c0a2b60736e5c1c04" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This option is only available on the 64-bit HP-UX GCC, i.e. configured with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78af1a2b0f317b8f65a1549c2905f6cec65ef3c4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This tells the compiler to generate additional information needed by gcov (basically a flow graph of the program) and also includes additional code in the object files for generating the extra profiling information needed by gcov. These additional files are placed in the directory where the object file is located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5ae572b044573aa8167cfdeb5660a51ca4f5cf3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This temporary file is not meant for communication between processes, but rather as a junk disposal mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de80f6d77c61c199645e26590cde27dc448403bc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To maintain the whole program optimization it is recommended to link such objects into static library instead. Alternatively it is possible to use H.J. Lu&amp;rsquo;s binutils with support for mixed objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d05b6029dd2a7b939fe9201df9c734ba3996a7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To reduce exposure to denial-of-service attacks, the file name is now chosen in a way that is hard to predict even when previously chosen file names are known. For example, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10bcdbe30a9c3f088aa63dfc7f0c5f6692a7ef56" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To resolve this you either need to put</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c6715f73aa5d0af712fb6134880b9fcbd79120" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. When a base standard is specified, the compiler accepts all programs following that standard plus those using GNU extensions that do not contradict it. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d141ae557c3ffdb3753a6a41a13d3a2b084753bd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. When you list more than one possible location (for example, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fe51260eb75dd9c72893e7b9b2fb9495d8b24d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. While &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b60c3edd35097ae5312da98dd3e4613c5c59db" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. With native Solaris and GNU/Linux toolchains, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa61258c1cd78b2c137d2dd13766886720e3936" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. With the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3dc366f61d8fabb2ad615ae2f691b7fc061f609" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;/&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;/&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="156309a7b165cae2860384c8bd41ff8b92b091f4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;:</source>
          <target state="translated">&amp;rsquo;:</target>
        </trans-unit>
        <trans-unit id="1eb8135cc50a6d10a9fd22ec9ddc97deda072b07" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;: these extensions disable the specified option and any other extensions that may depend on the presence of that extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10548d28e15289950fa348ee543ccdceadc64c48" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d056957801202f4b885351da27e86f96b001e71b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; C++ header files often use &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a65bdd12d63f7386ba288ffd05e53d2b1b3353" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; and any setting of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879ada406a8ceb853c0f4a2d334e5423ad141c4b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; and preprocessed C++ files use the suffix &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779783ef739406f991e6471784da6ce1c3d86b00" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; the default is &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4fbe0f7061332ebc6307b11d6557e735e43959" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="532b1a64c747914b89bd10f272d06140e5c954e4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;? Sometimes it allows better code to be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026366245e3ea8296dbdd0b1b6034424cc1ac47a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;](&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;](&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="60b0b92b2462673ed5f8cdc4eda20e78b1b728aa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;][&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;][&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="1de782ae7763bac352b0e9b09d14d7a9ac06ff61" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;|&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;|&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="eb6294d9bae2e5ca823e84066b30abc5ef143039" translate="yes" xml:space="preserve">
          <source>'??/n'</source>
          <target state="translated">'??/n'</target>
        </trans-unit>
        <trans-unit id="4262b9cfb91c51cbf3f44b62fe2a7b81e2676c78" translate="yes" xml:space="preserve">
          <source>'FOOF'</source>
          <target state="translated">'FOOF'</target>
        </trans-unit>
        <trans-unit id="caa61a56c1bf4b89298cbbce30e9181117ce2f54" translate="yes" xml:space="preserve">
          <source>(C++ only) A base class is not initialized in the copy constructor of a derived class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2291a0563b01ff7fdfe4e8efa7650f8a5b537a" translate="yes" xml:space="preserve">
          <source>(C++ only) Ambiguous virtual bases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6745c9fc96f11cdd3ca8018b2f16a7465a02cc" translate="yes" xml:space="preserve">
          <source>(C++ only) An enumerator and a non-enumerator both appear in a conditional expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9a648042433eeec71305942c0962bdaedafbb1" translate="yes" xml:space="preserve">
          <source>(C++ only) Subscripting an array that has been declared &lt;code&gt;register&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68eedac95edd544dcb28cc6aa2281a183f6f6c6a" translate="yes" xml:space="preserve">
          <source>(C++ only) Taking the address of a variable that has been declared &lt;code&gt;register&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf861b43184d4153abb4df39cb8f7fd94eb561a" translate="yes" xml:space="preserve">
          <source>(C, Objective-C, C++, Objective-C++ and Fortran only)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df280ab593af30434215cb8468898676012fc21" translate="yes" xml:space="preserve">
          <source>(Dis/En)able control speculative scheduling. This feature is available only during region scheduling (i.e. before reload). This results in generation of the &lt;code&gt;ld.s&lt;/code&gt; instructions and the corresponding check instructions &lt;code&gt;chk.s&lt;/code&gt;. The default setting is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9221df4a228447987ae95de2115c69067f514593" translate="yes" xml:space="preserve">
          <source>(Dis/En)able data speculative scheduling before reload. This results in generation of &lt;code&gt;ld.a&lt;/code&gt; instructions and the corresponding check instructions (&lt;code&gt;ld.c&lt;/code&gt; / &lt;code&gt;chk.a&lt;/code&gt;). The default setting is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4563f137d6532d80529c92294b38b94e3d50f0" translate="yes" xml:space="preserve">
          <source>(En/Dis)able data speculative scheduling after reload. This results in generation of &lt;code&gt;ld.a&lt;/code&gt; instructions and the corresponding check instructions (&lt;code&gt;ld.c&lt;/code&gt; / &lt;code&gt;chk.a&lt;/code&gt;). The default setting is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5d3dd642fecc8c54f3574ae7e4eca939a0223d" translate="yes" xml:space="preserve">
          <source>(En/Dis)able speculative scheduling of the instructions that are dependent on the control speculative loads. This is effective only with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e24e206b19deaa607df74a2a03c88ca434715e8" translate="yes" xml:space="preserve">
          <source>(En/Dis)able speculative scheduling of the instructions that are dependent on the data speculative loads after reload. This is effective only with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed5d4687734c1c08a3521f633f36f3d8b047751" translate="yes" xml:space="preserve">
          <source>(En/Dis)able speculative scheduling of the instructions that are dependent on the data speculative loads before reload. This is effective only with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65f29a10482b00bc5d910c9f1c1ebf21261bfb6" translate="yes" xml:space="preserve">
          <source>(NOTE: This manual does not describe the Objective-C and Objective-C++ languages themselves. See &lt;a href=&quot;standards#Standards&quot;&gt;Language Standards Supported by GCC&lt;/a&gt;, for references.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255cb0de41656d1d88145ac9a013fc923a373d29" translate="yes" xml:space="preserve">
          <source>(Of course, users strongly concerned about portability should indicate explicitly in each bit-field whether it is signed or not. In this way, they write programs which have the same meaning in both C dialects.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6b7736e459a50ee7bbeb56f3d58bf288b8bded" translate="yes" xml:space="preserve">
          <source>(a) The FSF&amp;rsquo;s Front-Cover Text is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e75bfc57ae0ab8bcba864cc9d8834305f57fa0d" translate="yes" xml:space="preserve">
          <source>(although &lt;code&gt;inline&lt;/code&gt; can be used in a program compiled with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d32ccfc33694fd3b9b08e15cd17089eb0baac7ce" translate="yes" xml:space="preserve">
          <source>(and</source>
          <target state="translated">(and</target>
        </trans-unit>
        <trans-unit id="e7c1e631efc5e951a858a5546de3f08168476af8" translate="yes" xml:space="preserve">
          <source>(and its suboptions except for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf05f29eaa82449ea9aa6a568e24067dd4305c19" translate="yes" xml:space="preserve">
          <source>(b) The FSF&amp;rsquo;s Back-Cover Text is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5c07cd3e0584e5f83e6eca859aaee8270b6f9f" translate="yes" xml:space="preserve">
          <source>(equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe1e95fb4f3ef08fb68e78f655aad948380249c" translate="yes" xml:space="preserve">
          <source>(for C++11 with GNU extensions), or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6749511020de741ea49c56137cabe2321f62325a" translate="yes" xml:space="preserve">
          <source>(for C++14 with GNU extensions), or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347f5b597e85d7cf2b587972a2d1be7fc90d299d" translate="yes" xml:space="preserve">
          <source>(for C++17 with GNU extensions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fddd4e75314207e7b4d93d5aeca459aee1caa67b" translate="yes" xml:space="preserve">
          <source>(for C++98 with GNU extensions), or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd73cb6eb7c3001e16e7f350d58f1e37fd35077" translate="yes" xml:space="preserve">
          <source>(for C11 with GNU extensions).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d304bbeefe2e485104adfe1c8dd44203659ea72" translate="yes" xml:space="preserve">
          <source>(for C90 with GNU extensions),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb0092b8683dbd00186e0dece89ae6c032549670" translate="yes" xml:space="preserve">
          <source>(for C99 with GNU extensions) or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="945ebd24fda58f96cbbedd3f15dfad1eeef3b869" translate="yes" xml:space="preserve">
          <source>(included in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5272e337f576fd3bc809f60d0191a6671ae86a93" translate="yes" xml:space="preserve">
          <source>(long &lt;var&gt;exp&lt;/var&gt;, long &lt;var&gt;c&lt;/var&gt;, double &lt;var&gt;probability&lt;/var&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc8504e187c996290246ad495a2cf2c1a3b31b8" translate="yes" xml:space="preserve">
          <source>(made from &lt;code&gt;COMPILER_PATH&lt;/code&gt; and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6745aa693d17e821abd67ed4aeeb14aefa9e2c8" translate="yes" xml:space="preserve">
          <source>(made from &lt;code&gt;GCC_EXEC_PREFIX&lt;/code&gt;),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682280673e3fef822f44e59e9eab0b6b94a02145" translate="yes" xml:space="preserve">
          <source>(made from &lt;code&gt;TARGET_SYSTEM_ROOT&lt;/code&gt;),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="519f5cd783a31489bdabb22db2101a6aba0c69bb" translate="yes" xml:space="preserve">
          <source>(note that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762b7473fc9b01f5f7e845131d0e7c1d72ee12cc" translate="yes" xml:space="preserve">
          <source>(note the single quote surrounding the option).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7739136dc697141cd8d76585cab6736b910f012b" translate="yes" xml:space="preserve">
          <source>(or</source>
          <target state="translated">(or</target>
        </trans-unit>
        <trans-unit id="9d3b478758763e62fffcc112311a494edb86b8e2" translate="yes" xml:space="preserve">
          <source>(or at least</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13837ddf736eb9effbcf49bb601c63831ec49562" translate="yes" xml:space="preserve">
          <source>(or filename suffixes) to tell &lt;code&gt;gcc&lt;/code&gt; where to start, and one of the options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09db8785647fde935fa1f767fe4c0bab3ab319f9" translate="yes" xml:space="preserve">
          <source>(or the above option combination), and doesn&amp;rsquo;t need</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80093bb361ef2b4667b08e10b253d923200ffc1e" translate="yes" xml:space="preserve">
          <source>(or the equivalent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590d907ceee53a6f5e07761d6444edeed40345ad" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;adapteva-epiphany-options#Adapteva-Epiphany-Options&quot;&gt;Adapteva Epiphany Options&lt;/a&gt;) command-line switch and &lt;code&gt;#pragma long_calls&lt;/code&gt; settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed4f9fc14b26a8f1cd77a672d74ba7284e93bc1" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;arc-options#ARC-Options&quot;&gt;ARC Options&lt;/a&gt;) command-line switches and &lt;code&gt;#pragma long_calls&lt;/code&gt; settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60b07f30fcef804891a61a3656e18507e9fc89c" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;arm-options#ARM-Options&quot;&gt;ARM Options&lt;/a&gt;) command-line switch and &lt;code&gt;#pragma long_calls&lt;/code&gt; settings. For ARM, the &lt;code&gt;long_call&lt;/code&gt; attribute indicates that the function might be far away from the call site and require a different (more expensive) calling sequence. The &lt;code&gt;short_call&lt;/code&gt; attribute always places the offset to the function from the call site into the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba0ed75e8c7540c11c10cb8062d5bc95aac39de" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;code-gen-options#Code-Gen-Options&quot;&gt;Code Gen Options&lt;/a&gt;) to reserve the register.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d740585c10f26409831f844bd55d5eedd751463" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;directory-options#Directory-Options&quot;&gt;Directory Options&lt;/a&gt;). These take precedence over places specified using environment variables, which in turn take precedence over those specified by the configuration of GCC. See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gccint/Driver.html#Driver&quot;&gt;Controlling the Compilation Driver &lt;samp&gt;gcc&lt;/samp&gt;&lt;/a&gt; in GNU Compiler Collection (GCC) Internals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd1e6772aba404587464a979947570da09643511" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;extended-asm#Extended-Asm&quot;&gt;Extended Asm&lt;/a&gt;) in the called function, to serve as a special side effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0938503247a790a7b4b9f4207e5e89f7a4253b1c" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;instrumentation-options#Instrumentation-Options&quot;&gt;Instrumentation Options&lt;/a&gt;), you can compile it a second time using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9cd77b4be10b663ba5f3b9cb3608966fbd644ed" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;mips-options#MIPS-Options&quot;&gt;MIPS Options&lt;/a&gt;) command-line switch. The &lt;code&gt;long_call&lt;/code&gt; and &lt;code&gt;far&lt;/code&gt; attributes are synonyms, and cause the compiler to always call the function by first loading its address into a register, and then using the contents of that register. The &lt;code&gt;short_call&lt;/code&gt; and &lt;code&gt;near&lt;/code&gt; attributes are synonyms, and have the opposite effect; they specify that non-PIC calls should be made using the more efficient &lt;code&gt;jal&lt;/code&gt; instruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3f80e361ac2552514137893b0ab9fabcabe627" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;Optimize Options&lt;/a&gt;) option for this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a18948f20eb8ae98ad70a254b90243efbc88d0d" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;Optimize Options&lt;/a&gt;) with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d571704fcdb9d5ed79e67b473e0539ffd1606ce1" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;Options that Control Optimization&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a4d90f4989adf26f774e757c32cb8c9fd263bdf" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;preprocessor-options#Preprocessor-Options&quot;&gt;Preprocessor Options&lt;/a&gt;), with an optional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d55bcbae0d9eedb8abddb17abab718a9163fc72b" translate="yes" xml:space="preserve">
          <source>(see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b70b58cd98cdafb11bf8a667440d592448e3c5" translate="yes" xml:space="preserve">
          <source>(the default), the compiler generates save/restore instructions (except for leaf functions). This is the normal operating mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af40e6cb84087d46922c5a0ffb4867733e5cd979" translate="yes" xml:space="preserve">
          <source>(the default), this defaults to 11 (GCC 7 compatibility). If another ABI version is explicitly selected, this defaults to 0. For compatibility with GCC versions 3.2 through 4.9, use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab143adbc1c1395faeaddeb77a75ce40da712c0" translate="yes" xml:space="preserve">
          <source>(the latter implies the former).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca51205aa488fda3fdecbf1f2de750f45ca42e49" translate="yes" xml:space="preserve">
          <source>(when compiling) and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175effdff8d2479be4f59b65047aecd27e3b8b4c" translate="yes" xml:space="preserve">
          <source>(when linking). See the documentation for those options for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cd831899eee396a27bb94a8bab7bfba3524de0" translate="yes" xml:space="preserve">
          <source>(which it assumes are the names of linker input library archive files) and returns a result containing all the found arguments each prepended by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73e5132b6755a2681bf9ea218d8fb5be273c29d" translate="yes" xml:space="preserve">
          <source>(which was the default from GCC 3.4 to 4.9) include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29cb22dfbd079dd15c9c9ee6ecc9e019d9f6e2b" translate="yes" xml:space="preserve">
          <source>(which will eventually be the default) or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf191089af86ec5288ab306c89094f4d0e110a0" translate="yes" xml:space="preserve">
          <source>(with no level) is the same as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b302cd20aa6ae0c1658b03d1a00c7adf9543273" translate="yes" xml:space="preserve">
          <source>(with, as for other standard versions,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c929d8cb2c9ae0178197af8deb9b389a6c64e0e" translate="yes" xml:space="preserve">
          <source>(without the version), the version from this option is used for the warning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c5daf75d33dba3c64b315f704b39ce85f4840a" translate="yes" xml:space="preserve">
          <source>) and FP64A (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563d45d6df052b34a41617f5f0d2d22fbf1bbfc5" translate="yes" xml:space="preserve">
          <source>) and a new value of &lt;code&gt;__STDC_VERSION__&lt;/code&gt;, and so is supported to the same extent as C11.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f02ab141e40e964aecd5ca279400c7bf4b18cea" translate="yes" xml:space="preserve">
          <source>) and interprocedural constant propagation (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fcef972d7d590f262c1cc874b47cd439afbe43" translate="yes" xml:space="preserve">
          <source>) and the ARM processor type for which to tune for performance (as if specified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676ea35ac4fbc9be6e247e62c7b74cdadd4458d2" translate="yes" xml:space="preserve">
          <source>) and the debug info format supports it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="959a7bd87d034ba23c5bbe122892dd9a038669b8" translate="yes" xml:space="preserve">
          <source>) and to determine the target processor for which to tune for performance (as if by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1fd71dcd9a799b64dd5ef03786633f6c950ba5" translate="yes" xml:space="preserve">
          <source>) are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff7787a85186574fddbf94130d99816fffebb35" translate="yes" xml:space="preserve">
          <source>) does not allow the use of the &lt;code&gt;icbi&lt;/code&gt; instruction. If the selected code generation option does not allow the use of the &lt;code&gt;icbi&lt;/code&gt; instruction, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66d488336d845c3e11422345df2d9abe3c655b7d" translate="yes" xml:space="preserve">
          <source>) except that they do not change any feature macros. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94ca66fe63e931f27878f6ec1bb8e784a2fccf3" translate="yes" xml:space="preserve">
          <source>) in size. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542a755b0afdbf00d8d31e36ba9bc4cd6e84a889" translate="yes" xml:space="preserve">
          <source>) is available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0553b2d9cf564cc761c6f8046ff2ebb991b33b4" translate="yes" xml:space="preserve">
          <source>) is based on the idea that when a local variable shadows another one of incompatible type, it is most likely intentional, not a bug or typo, as shown in the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d2a999f75dccc509e90809d18c6096a16a88e5" translate="yes" xml:space="preserve">
          <source>) is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2378d185f16386ef083035250a3ab4f0f7c4dd3b" translate="yes" xml:space="preserve">
          <source>) is enabled;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4d48ebc04f7eef9f0f196eb714e862d444f2d8" translate="yes" xml:space="preserve">
          <source>) is not supported on the HP PA machine, unless you use the preliminary GNU tools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de6a4c82af0028ed53010748154e492d457ccee" translate="yes" xml:space="preserve">
          <source>) on a 64-bit system, the IEEE 128-bit floating point support will also enable the generation of ISA 3.0 IEEE 128-bit floating point instructions. Otherwise, if you do not specify to generate ISA 3.0 instructions or you are targeting a 32-bit big endian system, IEEE 128-bit floating point will be done with software emulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372ab2853846c6ec09a1a55a70087f0853ac4490" translate="yes" xml:space="preserve">
          <source>) on the linker command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f87b9dafadcd5c3f21d76f5c33546bb45833f59" translate="yes" xml:space="preserve">
          <source>) or 32 bits (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88214b46b51ead2248a33b5dc3fb87a39aea5aca" translate="yes" xml:space="preserve">
          <source>) or &lt;code&gt;gprof&lt;/code&gt; (for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92223374d02859d95dcd004e6050947644805c23" translate="yes" xml:space="preserve">
          <source>) or a 16-bit boundary (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de09a263a8cf42ae108ce7d225322cce5d807572" translate="yes" xml:space="preserve">
          <source>) or disables (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c992e85f9d035d560971258dac3cd10814fe987" translate="yes" xml:space="preserve">
          <source>) or if callee&amp;rsquo;s register usage cannot be known exactly (this happens on targets that do not expose prologues and epilogues in RTL).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="665e2cbf7c203c26ee0978de2346b3d2559b1e78" translate="yes" xml:space="preserve">
          <source>) or if-conversion (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0fe0e76237f815ccac9b5973949d2128c4d25ab" translate="yes" xml:space="preserve">
          <source>) or later:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fb7a4971f7182b1d06e123c98d77026a5601b8" translate="yes" xml:space="preserve">
          <source>) or size (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61d90f715da7fa5414c6199e285572c09d6de3a" translate="yes" xml:space="preserve">
          <source>) or suffer significant run time performance penalties. On Pentium III, the Streaming SIMD Extension (SSE) data type &lt;code&gt;__m128&lt;/code&gt; may not work properly if it is not 16-byte aligned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf692b44ef780ecaea543ddcdee9cc9544aea8a5" translate="yes" xml:space="preserve">
          <source>) passes information to the compiler about used and externally visible symbols. When the linker plugin is not available,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5293f6bbeebb606bbb53bc3a56ae4ac32132f596" translate="yes" xml:space="preserve">
          <source>) plus the other libraries and startup files it needs, in the proper order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31a598c844d6a572bc984c25f00bb8bb60ffaa7" translate="yes" xml:space="preserve">
          <source>) requires a diagnostic, in some cases where there is undefined behavior at compile-time and in some other cases that do not prevent compilation of programs that are valid according to the standard. This is not equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606a6881ab81487da34e0ec67cc4569c78f1b735" translate="yes" xml:space="preserve">
          <source>) respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c651c41b3e1b6730da2636dadc62cb5aca1af853" translate="yes" xml:space="preserve">
          <source>) retain a reference to DWARF Version 2 in their names, but apply to all currently-supported versions of DWARF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d5778382dc7872cededaaa8c3f62d9e97c5db9" translate="yes" xml:space="preserve">
          <source>) that you don&amp;rsquo;t expect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096e30d6e1308807356b1a8243bd8e1c2bc7b4bc" translate="yes" xml:space="preserve">
          <source>) the actual recursion depth can be guessed from the probability that function recurses via a given call expression. This parameter limits inlining only to call expressions whose probability exceeds the given threshold (in percents).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cc56b0abbda97d9e58f8de7d0f1f4cdbeb16304" translate="yes" xml:space="preserve">
          <source>) the linker plugin will default to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a788f4704d0fa869be2f93937e1eeb5d09c8018e" translate="yes" xml:space="preserve">
          <source>) the security feature that verifies at run time, for every virtual call, that the vtable pointer through which the call is made is valid for the type of the object, and has not been corrupted or overwritten. If an invalid vtable pointer is detected at run time, an error is reported and execution of the program is immediately halted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1574f5807a54ab6b1e028d7e41ef97567b726e97" translate="yes" xml:space="preserve">
          <source>) the use of RX floating-point hardware. The default is enabled for the RX600 series and disabled for the RX200 series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21d4e93e91989fd8efa13649a6d484d18b95cd7" translate="yes" xml:space="preserve">
          <source>) together with low-level details about the analysis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1653c12d8093ecbaf09e84a2fda310d1cb9789be" translate="yes" xml:space="preserve">
          <source>) when optimizing at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7ff0a38348e09a4d3f591bcc731db366000ffd" translate="yes" xml:space="preserve">
          <source>) will diagnose such cases. They are also diagnosed where constant expressions are required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d35521355b1a26451fecea1d0fdb8e861ae1a63" translate="yes" xml:space="preserve">
          <source>),</source>
          <target state="translated">),</target>
        </trans-unit>
        <trans-unit id="a44ea070f83a2ea8c508a0d94a9ffe92f0311a7b" translate="yes" xml:space="preserve">
          <source>), GCC emits a diagnostic stating that the option is not recognized. However, if the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b3ec32632cffbf1f22cdfe57cb8374a735a269" translate="yes" xml:space="preserve">
          <source>), a left margin is printed, showing line numbers. This option suppresses this left margin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7416bd69e56d2b6037f51624d54028dd4e475dde" translate="yes" xml:space="preserve">
          <source>), a lot of functions that would otherwise not be considered for inlining by the compiler are investigated. To those functions, a different (more restrictive) limit compared to functions declared inline can be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b95b8c10c47af6db88c3c798a9c8a9008ca4712" translate="yes" xml:space="preserve">
          <source>), and disabled by default when the GCC ABI is in use. If &lt;code&gt;CALLT&lt;/code&gt; instructions are being generated then the C preprocessor symbol &lt;code&gt;__V850_CALLT__&lt;/code&gt; is defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffd387280782b84825cc54fe2e5fd6641710f278" translate="yes" xml:space="preserve">
          <source>), and the third is used when compiling C++.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9246fb085de724853f192d16ca8ae6d5505d2a" translate="yes" xml:space="preserve">
          <source>), as programmers are notoriously bad at predicting how their programs actually perform. However, there are applications in which this data is hard to collect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930d1fcc66826401b7d140d9007bf2954e451307" translate="yes" xml:space="preserve">
          <source>), diagnostics can label ranges of source code with pertinent information, such as the types of expressions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69723fbefd38a710c7dfc1692eb17c0f6c610d10" translate="yes" xml:space="preserve">
          <source>), dump a representation of the control flow graph suitable for viewing with GraphViz to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b590ade0ab221ac5e4234e6d4d4d05949c0482" translate="yes" xml:space="preserve">
          <source>), generate a __mcount_loc section that contains pointers to each profiling call. This is useful for automatically patching and out calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfdc126f96f3450b0ed80efdbbcd69285411c30e" translate="yes" xml:space="preserve">
          <source>), generate the calls to the profiling functions as NOPs. This is useful when they should be patched in later dynamically. This is likely only useful together with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfef96d377a3855452441f358e957e550d74a331" translate="yes" xml:space="preserve">
          <source>), note that floating-point operations are not generated by GCC&amp;rsquo;s auto-vectorization pass unless</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08d1f37fdd01ee828e85c675c534b9eb820d73e" translate="yes" xml:space="preserve">
          <source>), or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="365febad52ba5ae4b17e37fcd01c2774f61022fd" translate="yes" xml:space="preserve">
          <source>), or an option for a later standard version, is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70001bcdb1cc025e535a21f20ec6e5a609d02cd6" translate="yes" xml:space="preserve">
          <source>), or for test coverage analysis (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f71af6d58f5588e5885753f35af7b050e937149" translate="yes" xml:space="preserve">
          <source>), or separately specify</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c045589af9c59852e87b276d0de6f5db11fc66" translate="yes" xml:space="preserve">
          <source>), or the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b08d7982a47273210539150a95f97d162673a4" translate="yes" xml:space="preserve">
          <source>), or to use the &lt;code&gt;gcov&lt;/code&gt; tool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130bb4348d8251fa594f2be0aac3510a4118bbf1" translate="yes" xml:space="preserve">
          <source>), or when an optimization option such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68247a8af7280a00643481b52bb4ec6cbad2c43" translate="yes" xml:space="preserve">
          <source>), prologues and epilogues that have to save or restore a large number of registers are often shortened by using call to a special function in libgcc; this is referred to as a &lt;em&gt;millicode&lt;/em&gt; call. As these calls can pose performance issues, and/or cause linking issues when linking in a nonstandard way, this option is provided to turn on or off millicode call generation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a7ba7846130c7a8e45123ef7d125b09931d28b" translate="yes" xml:space="preserve">
          <source>), put the profiling counter call before the prologue. Note: On x86 architectures the attribute &lt;code&gt;ms_hook_prologue&lt;/code&gt; isn&amp;rsquo;t possible at the moment for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d86644ae2fc8bedabf27beb5cf2316aa496946c" translate="yes" xml:space="preserve">
          <source>), so it is not available everywhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775107e56917b7498a4a855146131dd87d5bd5fa" translate="yes" xml:space="preserve">
          <source>), so there is no need to modify the header file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69e7a52d8ea74d2d69c66bfa16bc63677452746" translate="yes" xml:space="preserve">
          <source>), the following additional functions are available for both 32-bit and 64-bit targets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c38b1d1acd0f20276ad32aafe94d807c81016f3" translate="yes" xml:space="preserve">
          <source>), the following builtins are enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d18e82cc2e16d79a4313376dbe885b7ba013e3c7" translate="yes" xml:space="preserve">
          <source>), the functions &lt;code&gt;_exit&lt;/code&gt;, &lt;code&gt;alloca&lt;/code&gt;, &lt;code&gt;bcmp&lt;/code&gt;, &lt;code&gt;bzero&lt;/code&gt;, &lt;code&gt;dcgettext&lt;/code&gt;, &lt;code&gt;dgettext&lt;/code&gt;, &lt;code&gt;dremf&lt;/code&gt;, &lt;code&gt;dreml&lt;/code&gt;, &lt;code&gt;drem&lt;/code&gt;, &lt;code&gt;exp10f&lt;/code&gt;, &lt;code&gt;exp10l&lt;/code&gt;, &lt;code&gt;exp10&lt;/code&gt;, &lt;code&gt;ffsll&lt;/code&gt;, &lt;code&gt;ffsl&lt;/code&gt;, &lt;code&gt;ffs&lt;/code&gt;, &lt;code&gt;fprintf_unlocked&lt;/code&gt;, &lt;code&gt;fputs_unlocked&lt;/code&gt;, &lt;code&gt;gammaf&lt;/code&gt;, &lt;code&gt;gammal&lt;/code&gt;, &lt;code&gt;gamma&lt;/code&gt;, &lt;code&gt;gammaf_r&lt;/code&gt;, &lt;code&gt;gammal_r&lt;/code&gt;, &lt;code&gt;gamma_r&lt;/code&gt;, &lt;code&gt;gettext&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;isascii&lt;/code&gt;, &lt;code&gt;j0f&lt;/code&gt;, &lt;code&gt;j0l&lt;/code&gt;, &lt;code&gt;j0&lt;/code&gt;, &lt;code&gt;j1f&lt;/code&gt;, &lt;code&gt;j1l&lt;/code&gt;, &lt;code&gt;j1&lt;/code&gt;, &lt;code&gt;jnf&lt;/code&gt;, &lt;code&gt;jnl&lt;/code&gt;, &lt;code&gt;jn&lt;/code&gt;, &lt;code&gt;lgammaf_r&lt;/code&gt;, &lt;code&gt;lgammal_r&lt;/code&gt;, &lt;code&gt;lgamma_r&lt;/code&gt;, &lt;code&gt;mempcpy&lt;/code&gt;, &lt;code&gt;pow10f&lt;/code&gt;, &lt;code&gt;pow10l&lt;/code&gt;, &lt;code&gt;pow10&lt;/code&gt;, &lt;code&gt;printf_unlocked&lt;/code&gt;, &lt;code&gt;rindex&lt;/code&gt;, &lt;code&gt;scalbf&lt;/code&gt;, &lt;code&gt;scalbl&lt;/code&gt;, &lt;code&gt;scalb&lt;/code&gt;, &lt;code&gt;signbit&lt;/code&gt;, &lt;code&gt;signbitf&lt;/code&gt;, &lt;code&gt;signbitl&lt;/code&gt;, &lt;code&gt;signbitd32&lt;/code&gt;, &lt;code&gt;signbitd64&lt;/code&gt;, &lt;code&gt;signbitd128&lt;/code&gt;, &lt;code&gt;significandf&lt;/code&gt;, &lt;code&gt;significandl&lt;/code&gt;, &lt;code&gt;significand&lt;/code&gt;, &lt;code&gt;sincosf&lt;/code&gt;, &lt;code&gt;sincosl&lt;/code&gt;, &lt;code&gt;sincos&lt;/code&gt;, &lt;code&gt;stpcpy&lt;/code&gt;, &lt;code&gt;stpncpy&lt;/code&gt;, &lt;code&gt;strcasecmp&lt;/code&gt;, &lt;code&gt;strdup&lt;/code&gt;, &lt;code&gt;strfmon&lt;/code&gt;, &lt;code&gt;strncasecmp&lt;/code&gt;, &lt;code&gt;strndup&lt;/code&gt;, &lt;code&gt;strnlen&lt;/code&gt;, &lt;code&gt;toascii&lt;/code&gt;, &lt;code&gt;y0f&lt;/code&gt;, &lt;code&gt;y0l&lt;/code&gt;, &lt;code&gt;y0&lt;/code&gt;, &lt;code&gt;y1f&lt;/code&gt;, &lt;code&gt;y1l&lt;/code&gt;, &lt;code&gt;y1&lt;/code&gt;, &lt;code&gt;ynf&lt;/code&gt;, &lt;code&gt;ynl&lt;/code&gt; and &lt;code&gt;yn&lt;/code&gt; may be handled as built-in functions. All these functions have corresponding versions prefixed with &lt;code&gt;__builtin_&lt;/code&gt;, which may be used even in strict C90 mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a50cce50d0febfb570490b6c070e49f51ddec8b" translate="yes" xml:space="preserve">
          <source>), the object file name consists of the name of the source file with any suffix replaced with object file suffix and with any leading directory parts removed. If there are many included files then the rule is split into several lines using &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be8ddc45c8138713e4ff9590a244293505edbcb" translate="yes" xml:space="preserve">
          <source>), this switch only affects the &lt;code&gt;asm&lt;/code&gt; and &lt;code&gt;typeof&lt;/code&gt; keywords, since &lt;code&gt;inline&lt;/code&gt; is a standard keyword in ISO C99.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6667c074281d3be9d0a577eef269311cbfb9cd" translate="yes" xml:space="preserve">
          <source>), this warning is enabled by default and it is made into an error by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41919407ce8f78b6cd89401353e39179fec9ab2" translate="yes" xml:space="preserve">
          <source>).</source>
          <target state="translated">).</target>
        </trans-unit>
        <trans-unit id="a8da6016236d20b9786efd699df04e211b746377" translate="yes" xml:space="preserve">
          <source>). Aligning variables on 32-bit boundaries produces code that runs somewhat faster on processors with 32-bit busses at the expense of more memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010b7cdc441046d989a9ea1b15cc97865b1b6636" translate="yes" xml:space="preserve">
          <source>). Each object file&amp;rsquo;s &lt;var&gt;auxname&lt;/var&gt; is generated from the name of the output file, if explicitly specified and it is not the final executable, otherwise it is the basename of the source file. In both cases any suffix is removed (e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6634ed39eb6b3c05c70ac15c64888e1587ddc721" translate="yes" xml:space="preserve">
          <source>). Enabled at levels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="015eb4d6e320fdcb40dde6916b75b927e7ad003c" translate="yes" xml:space="preserve">
          <source>). For example, the default is &amp;ldquo;off&amp;rdquo; for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c13df8815400fcd95d3934f417b07b1b26f46a2a" translate="yes" xml:space="preserve">
          <source>). If the file that contains a function definition matches with one of &lt;var&gt;file&lt;/var&gt;, then that function is not instrumented. The match is done on substrings: if the &lt;var&gt;file&lt;/var&gt; parameter is a substring of the file name, it is considered to be a match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f212a70a9e377734872d88e49501c0700d10f3e" translate="yes" xml:space="preserve">
          <source>). Note that while the throughput of the sequence is generally higher than the throughput of the non-reciprocal instruction, the precision of the sequence can be decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994) for reciprocal square roots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b164e85e3a5e96ef823e8a23d64cc8f7c10af4b" translate="yes" xml:space="preserve">
          <source>). Only a few systems support this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55e185f80b2ff3ddce6d7f09c20e1548417dee24" translate="yes" xml:space="preserve">
          <source>). PowerPC with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb510fceebf36036dd894fdfbce120124fc5b07" translate="yes" xml:space="preserve">
          <source>). Prefixes are optional, and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d10a247e2259eeac52b647017863fe87f5b993d" translate="yes" xml:space="preserve">
          <source>). See &lt;a href=&quot;cross_002dprofiling#Cross_002dprofiling&quot;&gt;Cross-profiling&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acde331edf16a3ec956afda9f9ff904e45d22d8e" translate="yes" xml:space="preserve">
          <source>). Similarly, Objective-C++ compilations may use C++-specific options (e.g.,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87d6a9687ee8b259d715c98478384173b51aa0b" translate="yes" xml:space="preserve">
          <source>). The FPXX extension mandates that all code must execute correctly when run using 32-bit or 64-bit registers. The code can be interlinked with either FP32 or FP64, but not both. The FP64A extension is similar to the FP64 extension but forbids the use of odd-numbered single-precision registers. This can be used in conjunction with the &lt;code&gt;FRE&lt;/code&gt; mode of FPUs in MIPS32R5 processors and allows both FP32 and FP64A code to interlink and run in the same process without changing FPU modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69623fc03f16d40bf923fc859f6aee6a12d3da3b" translate="yes" xml:space="preserve">
          <source>). The ISO C99 keyword &lt;code&gt;restrict&lt;/code&gt; is only available when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c4c654ef7ee136377ef2cafd1f5c6d8c816f58" translate="yes" xml:space="preserve">
          <source>). The number of available registers reserved for some other purposes is given by this parameter. Default of the parameter is the best found from numerous experiments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13df10237921e86399697b2a5237e0144f1e89b4" translate="yes" xml:space="preserve">
          <source>). These heuristics are based on the control flow graph. If some branch probabilities are specified by &lt;code&gt;__builtin_expect&lt;/code&gt;, then the heuristics are used to guess branch probabilities for the rest of the control flow graph, taking the &lt;code&gt;__builtin_expect&lt;/code&gt; info into account. The interactions between the heuristics and &lt;code&gt;__builtin_expect&lt;/code&gt; can be complex, and in some cases, it may be useful to disable the heuristics so that the effects of &lt;code&gt;__builtin_expect&lt;/code&gt; are easier to understand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2023f757a7ebb820a975281ad23d01e574d8eb79" translate="yes" xml:space="preserve">
          <source>). These string functions are described separately in order to group the descriptions closer to the function prototypes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751af366ba575d9d108cd1b4000d9ad97eaf52b1" translate="yes" xml:space="preserve">
          <source>). This flag is enabled by default at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389d320cf2fd3c5618d226a643e286a8173a0850" translate="yes" xml:space="preserve">
          <source>). This option implies that the sign of a zero result isn&amp;rsquo;t significant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cd47fb3faf85196691543d50eeceb26496714f" translate="yes" xml:space="preserve">
          <source>). Valid values are 0 (no compression) to 9 (maximum compression). Values outside this range are clamped to either 0 or 9. If the option is not given, a default balanced compression setting is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e275b6410662c14eec9fb78d9ba464e2a4ade618" translate="yes" xml:space="preserve">
          <source>). Where this option is used in conjunction with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df74c471c52df8eca98a9d8f78604ccd98630755" translate="yes" xml:space="preserve">
          <source>). You must use this option when compiling the source files you want data about, and you must also use it when linking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f69ef0c07d30c0476bd886f60193097cb47f3e" translate="yes" xml:space="preserve">
          <source>):</source>
          <target state="translated">):</target>
        </trans-unit>
        <trans-unit id="59f6dde452eff2a7dd073297be960fa570d00ed5" translate="yes" xml:space="preserve">
          <source>): Should have very few false positives and few false negatives. Slightly slower than levels 1 or 2 when optimization is enabled. Takes care of the common pun+dereference pattern in the front end: &lt;code&gt;*(int*)&amp;amp;some_float&lt;/code&gt;. If optimization is enabled, it also runs in the back end, where it deals with multiple statement cases using flow-sensitive points-to information. Only warns when the converted pointer is dereferenced. Does not warn about incomplete types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b94bb7c80d730c9c375c35b16cf1f64733269c" translate="yes" xml:space="preserve">
          <source>*-*-linux-*android*</source>
          <target state="translated">*-*-linux-*android*</target>
        </trans-unit>
        <trans-unit id="e2b642adbe68e3ea2f08e73036fb686d4e5ecf65" translate="yes" xml:space="preserve">
          <source>*-*-linux-*musl*</source>
          <target state="translated">*-*-linux-*musl*</target>
        </trans-unit>
        <trans-unit id="7d44bb0c460c86f6ed20b427ab87b20e89c94940" translate="yes" xml:space="preserve">
          <source>*-*-linux-*uclibc*</source>
          <target state="translated">*-*-linux-*uclibc*</target>
        </trans-unit>
        <trans-unit id="feb21874a106e7fdaf91fadac43af22b0bea36ab" translate="yes" xml:space="preserve">
          <source>+&lt;var&gt;extension&lt;/var&gt;</source>
          <target state="translated">+&lt;var&gt;extension&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="dad15bd181e6b2d074037dd769cb892a10dcffa3" translate="yes" xml:space="preserve">
          <source>+Accept TypeMismatch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0245508ac3119cf85af276774b536b3c6eb57300" translate="yes" xml:space="preserve">
          <source>+crc</source>
          <target state="translated">+crc</target>
        </trans-unit>
        <trans-unit id="172554656681a361758276db1e3c43b8560fd73f" translate="yes" xml:space="preserve">
          <source>+crypto</source>
          <target state="translated">+crypto</target>
        </trans-unit>
        <trans-unit id="f593a9cfed56aa8c5b2310dadc6602a92650e09b" translate="yes" xml:space="preserve">
          <source>+dotprod</source>
          <target state="translated">+dotprod</target>
        </trans-unit>
        <trans-unit id="c8958e48ef48898eea0aeee1b68eea46b1f26e18" translate="yes" xml:space="preserve">
          <source>+dsp</source>
          <target state="translated">+dsp</target>
        </trans-unit>
        <trans-unit id="9b8ca1a7ee75f7f450c6bed427a6d3f35d9847c6" translate="yes" xml:space="preserve">
          <source>+fp</source>
          <target state="translated">+fp</target>
        </trans-unit>
        <trans-unit id="12e90b41b5bbb85590517841a4eb99cb4b8a9251" translate="yes" xml:space="preserve">
          <source>+fp.dp</source>
          <target state="translated">+fp.dp</target>
        </trans-unit>
        <trans-unit id="61e1348f2cad78b911fccf2797471ad0d18e2b02" translate="yes" xml:space="preserve">
          <source>+fp.sp</source>
          <target state="translated">+fp.sp</target>
        </trans-unit>
        <trans-unit id="3c19a7766116f6a5d109b2fea2da2b1d277f1660" translate="yes" xml:space="preserve">
          <source>+fp16</source>
          <target state="translated">+fp16</target>
        </trans-unit>
        <trans-unit id="e36321f6f8d57d187d3bc885adca3f8e1fec74a2" translate="yes" xml:space="preserve">
          <source>+fp16fml</source>
          <target state="translated">+fp16fml</target>
        </trans-unit>
        <trans-unit id="9a28b8bd1ff670d2e1d8a6d041e8af642964b47f" translate="yes" xml:space="preserve">
          <source>+fpv5</source>
          <target state="translated">+fpv5</target>
        </trans-unit>
        <trans-unit id="6ce605d1bb51ed3fd5a75aed8a1d4c5fce2fbd02" translate="yes" xml:space="preserve">
          <source>+idiv</source>
          <target state="translated">+idiv</target>
        </trans-unit>
        <trans-unit id="298d552ef880bc40f53842de04e0129e8d4cbb7f" translate="yes" xml:space="preserve">
          <source>+k</source>
          <target state="translated">+k</target>
        </trans-unit>
        <trans-unit id="6bb6aad86a880aa66a62f4e67215e2922bf4ed3b" translate="yes" xml:space="preserve">
          <source>+lse</source>
          <target state="translated">+lse</target>
        </trans-unit>
        <trans-unit id="d3da1bfe2d64d68808b0b119209078764008b84e" translate="yes" xml:space="preserve">
          <source>+mp</source>
          <target state="translated">+mp</target>
        </trans-unit>
        <trans-unit id="c660acf5e4ec641d8c613d3f784064715b71970f" translate="yes" xml:space="preserve">
          <source>+neon</source>
          <target state="translated">+neon</target>
        </trans-unit>
        <trans-unit id="8aaddfb72d070d6159cd823fe6182666f17c4053" translate="yes" xml:space="preserve">
          <source>+neon-fp16</source>
          <target state="translated">+neon-fp16</target>
        </trans-unit>
        <trans-unit id="435f84a487ef70561af83eda3e1d7dd3d2436c1c" translate="yes" xml:space="preserve">
          <source>+neon-vfpv3</source>
          <target state="translated">+neon-vfpv3</target>
        </trans-unit>
        <trans-unit id="0ac1405d972e784cdc766f54e29dbf5ab415cbc9" translate="yes" xml:space="preserve">
          <source>+neon-vfpv4</source>
          <target state="translated">+neon-vfpv4</target>
        </trans-unit>
        <trans-unit id="718b50d5dae644e3a124de95caf9ccb46a386417" translate="yes" xml:space="preserve">
          <source>+no&amp;hellip;</source>
          <target state="translated">+no&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="ce8806c0fb02e176c7399646baa9a9c06a0ab272" translate="yes" xml:space="preserve">
          <source>+nocrypto</source>
          <target state="translated">+nocrypto</target>
        </trans-unit>
        <trans-unit id="c75685c50bbed60e49ef2d3d9ba5984a9087c460" translate="yes" xml:space="preserve">
          <source>+nodsp</source>
          <target state="translated">+nodsp</target>
        </trans-unit>
        <trans-unit id="bdad84fda97226b66790281c1f74f43e25c5dc2a" translate="yes" xml:space="preserve">
          <source>+nofp</source>
          <target state="translated">+nofp</target>
        </trans-unit>
        <trans-unit id="32d14ccb6dff53c000b7d0f3c1e570e199920277" translate="yes" xml:space="preserve">
          <source>+nofp.dp</source>
          <target state="translated">+nofp.dp</target>
        </trans-unit>
        <trans-unit id="70443bdbf953fd7737440bd1233875efade5e298" translate="yes" xml:space="preserve">
          <source>+noidiv</source>
          <target state="translated">+noidiv</target>
        </trans-unit>
        <trans-unit id="a12c1141d2021a4ae5103e34f0cb2e216132188d" translate="yes" xml:space="preserve">
          <source>+nosimd</source>
          <target state="translated">+nosimd</target>
        </trans-unit>
        <trans-unit id="4563e8723e89439d475e61672e05fb7dae35dfaf" translate="yes" xml:space="preserve">
          <source>+predres</source>
          <target state="translated">+predres</target>
        </trans-unit>
        <trans-unit id="612586060d4d1d6ca16cb6e8342ccd8cd466f161" translate="yes" xml:space="preserve">
          <source>+rdma</source>
          <target state="translated">+rdma</target>
        </trans-unit>
        <trans-unit id="50c84004301c1955521d1c5085a4e86bef9ad37a" translate="yes" xml:space="preserve">
          <source>+sb</source>
          <target state="translated">+sb</target>
        </trans-unit>
        <trans-unit id="523966f68f6b5229e9feb691969161ec915c6cc9" translate="yes" xml:space="preserve">
          <source>+sec</source>
          <target state="translated">+sec</target>
        </trans-unit>
        <trans-unit id="572761324c6cd16274d84a93b069f3f7bc8d622d" translate="yes" xml:space="preserve">
          <source>+simd</source>
          <target state="translated">+simd</target>
        </trans-unit>
        <trans-unit id="80493528a9034722885b8e9132606dd4336778f5" translate="yes" xml:space="preserve">
          <source>+vfpv2</source>
          <target state="translated">+vfpv2</target>
        </trans-unit>
        <trans-unit id="5e4ee72860cab166418a73e306a0921f5e6d4794" translate="yes" xml:space="preserve">
          <source>+vfpv3</source>
          <target state="translated">+vfpv3</target>
        </trans-unit>
        <trans-unit id="96f6116b06a306c4fe8edf91f7e6e981c085f418" translate="yes" xml:space="preserve">
          <source>+vfpv3-d16</source>
          <target state="translated">+vfpv3-d16</target>
        </trans-unit>
        <trans-unit id="efba751c5beb6a30957dc58f177e360fdd017763" translate="yes" xml:space="preserve">
          <source>+vfpv3-d16-fp16</source>
          <target state="translated">+vfpv3-d16-fp16</target>
        </trans-unit>
        <trans-unit id="2a14509c282a0dde2ff082ee3afda5e8f9d14e09" translate="yes" xml:space="preserve">
          <source>+vfpv3-fp16</source>
          <target state="translated">+vfpv3-fp16</target>
        </trans-unit>
        <trans-unit id="9b899bf3010c596d9deefcc3943f2e83ea96543a" translate="yes" xml:space="preserve">
          <source>+vfpv3xd</source>
          <target state="translated">+vfpv3xd</target>
        </trans-unit>
        <trans-unit id="e6dd5253fa77b609bac67127de01e8db18c70caa" translate="yes" xml:space="preserve">
          <source>+vfpv3xd-d16-fp16</source>
          <target state="translated">+vfpv3xd-d16-fp16</target>
        </trans-unit>
        <trans-unit id="1c9a97c629a2f14166d7a967313c8b311aaf24b4" translate="yes" xml:space="preserve">
          <source>+vfpv4</source>
          <target state="translated">+vfpv4</target>
        </trans-unit>
        <trans-unit id="f0753fa13c2da206656b61cc9e300da99d614fad" translate="yes" xml:space="preserve">
          <source>+vfpv4-d16</source>
          <target state="translated">+vfpv4-d16</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="0ed174b8649b3795e9bab6e28051e111ece3d5a1" translate="yes" xml:space="preserve">
          <source>, &amp;hellip;), and outputting DWARF 2 debug information at the normal level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e892a0963fbddbf57a2e50e77e246f310118c85" translate="yes" xml:space="preserve">
          <source>, &amp;hellip;), debugging information (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce3d91211464125b1a2c5c681940a8dbbed2997" translate="yes" xml:space="preserve">
          <source>, &amp;hellip;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3637dc66fe00abd3e693687e7b9b0ff7e487e998" translate="yes" xml:space="preserve">
          <source>, ...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8373b7b9cf04295923fb7dd353f8cd016c13806" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;dbg_cnt(dce)&lt;/code&gt; returns true only for third and fourth invocation. For &lt;code&gt;dbg_cnt(tail_call)&lt;/code&gt; true is returned for first 10 invocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d0cb298b65dc1dd5a8ad63030abc502d65e4a5" translate="yes" xml:space="preserve">
          <source>, &lt;var&gt;charset&lt;/var&gt; can be any encoding supported by the system&amp;rsquo;s &lt;code&gt;iconv&lt;/code&gt; library routine; however, you will have problems with encodings that do not fit exactly in &lt;code&gt;wchar_t&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dacad0f81d1e260f88c4393b4848193fe16ac2b7" translate="yes" xml:space="preserve">
          <source>, &lt;var&gt;max_size&lt;/var&gt; specifies the max byte size with which inline algorithm &lt;var&gt;alg&lt;/var&gt; is allowed. For the last triplet, the &lt;var&gt;max_size&lt;/var&gt; must be &lt;code&gt;-1&lt;/code&gt;. The &lt;var&gt;max_size&lt;/var&gt; of the triplets in the list must be specified in increasing order. The minimal byte size for &lt;var&gt;alg&lt;/var&gt; is &lt;code&gt;0&lt;/code&gt; for the first triplet and &lt;code&gt;&lt;var&gt;max_size&lt;/var&gt; + 1&lt;/code&gt; of the preceding range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9690121c5628f2c0341ffa6132d72efc83193d9" translate="yes" xml:space="preserve">
          <source>, GCC assumes that doubles have 8-byte alignment only if they are contained in another type, or if they have an absolute address. Otherwise, it assumes they have 4-byte alignment. Specifying this option avoids some rare compatibility problems with code generated by other compilers. It is not the default because it results in a performance loss, especially for floating-point code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d079c553ba54a17781d7096ca0de1c9399ce98" translate="yes" xml:space="preserve">
          <source>, GCC assumes that the stack pointer, and frame pointer if present, are offset by -2047 which must be added back when making stack frame references. This is the default in 64-bit mode. Otherwise, assume no such offset is present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32d107fd8d29cc4e25c76f6bc2b8616923401802" translate="yes" xml:space="preserve">
          <source>, GCC defaults to whichever convention is standard for the target. If there is no standard convention, GCC defaults to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2827008d6317586583dcd9e0510d8d39bdf6108" translate="yes" xml:space="preserve">
          <source>, GCC generates code for the GR6 variant of the Visium architecture. The only difference from GR5 code is that the compiler will generate block move instructions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682c348ce24eeeb97abc0387035df3b607a2756f" translate="yes" xml:space="preserve">
          <source>, GCC generates code for the SPARC-V8+ ABI. The difference from the V8 ABI is that the global and out registers are considered 64 bits wide. This is enabled by default on Solaris in 32-bit mode for all SPARC-V9 processors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be22faf79e798733855688a8ebf060dd61b85ec" translate="yes" xml:space="preserve">
          <source>, GCC generates code for the SPARClet variant of the SPARC architecture. This adds the integer multiply, multiply/accumulate, integer divide step and scan (&lt;code&gt;ffs&lt;/code&gt;) instructions which exist in SPARClet but not in SPARC-V7. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="246eb4b1205aee50122a8441dd133501e413f7d4" translate="yes" xml:space="preserve">
          <source>, GCC generates code for the SPARClite variant of the SPARC architecture. This adds the integer multiply, integer divide step and scan (&lt;code&gt;ffs&lt;/code&gt;) instructions which exist in SPARClite but not in SPARC-V7. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ea3b70bf876bbac6bd786d282b058e0a48e593e" translate="yes" xml:space="preserve">
          <source>, GCC generates code for the V8 variant of the SPARC architecture. The only difference from V7 code is that the compiler emits the integer multiply and integer divide instructions which exist in SPARC-V8 but not in SPARC-V7. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35cc98b9577afb980907076a54d84b7ee83c49b" translate="yes" xml:space="preserve">
          <source>, GCC generates code for the V9 variant of the SPARC architecture. This adds 64-bit integer and floating-point move instructions, 3 additional floating-point condition code registers and conditional move instructions. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f52fa8335df2d3bb842c72b269dbd31476ebe55" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of the Floating-point Multiply Single to Double (FsMULd) instruction. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1475f8fe9a2a4d3740626e73d0883412752df34d" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of the UltraSPARC Compare-and-Branch-on-Condition instructions. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d737bb2dcd98336bc50c965bd13e7436a7dd37" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of the UltraSPARC Fused Multiply-Add Floating-point instructions. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23766f73710826fb3194882a59b3abf6466a524" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of the UltraSPARC Population Count instruction. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6c463793daa79795e5bac108508d4c88d9bbdb" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of the UltraSPARC Subtract-Extended-with-Carry instruction. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca4c46815c6d5d35fbb9551d58365f816e41479" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of the UltraSPARC Visual Instruction Set extensions. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5db5aaa75f0186e12c2a3c5260dce368624e0c" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of version 2.0 of the UltraSPARC Visual Instruction Set extensions. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2806fca697379e7dde9c87801608b121305c7d2b" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of version 3.0 of the UltraSPARC Visual Instruction Set extensions. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba290b8a2744f98c0c8c96a2dd45eb3cf029cb39" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of version 4.0 of the UltraSPARC Visual Instruction Set extensions, plus the additional VIS instructions introduced in the Oracle SPARC Architecture 2017. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18714e7f456c9768e056f11bedffefc81537d103" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of version 4.0 of the UltraSPARC Visual Instruction Set extensions. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18afbe646df06ef482b90a4ea8101ba75a14fb36" translate="yes" xml:space="preserve">
          <source>, GCC links your program against startup code that assumes a C99-style interface to &lt;code&gt;main&lt;/code&gt;, including a local copy of &lt;code&gt;argv&lt;/code&gt; strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0d7b4c7ae6e8aba0c9f72af55f5d304c58fb90" translate="yes" xml:space="preserve">
          <source>, GCC puts a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb40763e80347d1210476d472706d4ce77f51a6" translate="yes" xml:space="preserve">
          <source>, GCC searches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1262a6470e2ff7634d806e9ee5903d47af8ad6" translate="yes" xml:space="preserve">
          <source>, GOT offsets are computed with 32 bits. With a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398ba4aaa11c3bac9f0e3777574e92dc704d4bf0" translate="yes" xml:space="preserve">
          <source>, a library of internal subroutines which GCC uses to overcome shortcomings of particular machines, or special needs for some languages. (See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gccint/Interface.html#Interface&quot;&gt;Interfacing to GCC Output&lt;/a&gt; in GNU Compiler Collection (GCC) Internals, for more discussion of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58f77b34e40291c68cd5f9eb195333d97f9c0b55" translate="yes" xml:space="preserve">
          <source>, a precompiled header file in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902dbfb563932162e68ce134dadacceccbcb8994" translate="yes" xml:space="preserve">
          <source>, allowing at most a 16-bit offset for pc-relative addressing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee68baaad88f470b7b533567d25dcdc3a379ac30" translate="yes" xml:space="preserve">
          <source>, allowing the exception to be raised. This option does nothing unless</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9e05e836489ac9950ec8969e19d268991d8395" translate="yes" xml:space="preserve">
          <source>, along with options to silence warnings, and omitting other options that would cause the compiler to produce output to files or to standard output as a side effect. Dump files and preserved temporary files are renamed so as to contain the &lt;code&gt;.gk&lt;/code&gt; additional extension during the second compilation, to avoid overwriting those generated by the first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7934c6ea7ba618a96b99457fbe7b3b543c732ec" translate="yes" xml:space="preserve">
          <source>, also deprecate if the class has a user-provided destructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f80346a34a1c0832eaef10e9fb85d47cd2333b2" translate="yes" xml:space="preserve">
          <source>, an accompanying</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8278d2adba7612cf98a492d21a4ac4c78acb1202" translate="yes" xml:space="preserve">
          <source>, and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f426f972d9e2e410d1cd265b7d8eb71579d193d3" translate="yes" xml:space="preserve">
          <source>, and &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23adf1a81d00b9577caedac00d8bb053cb588e55" translate="yes" xml:space="preserve">
          <source>, and &lt;var&gt;Mod&lt;/var&gt; references a variable &lt;var&gt;Var&lt;/var&gt; that is no bigger than &lt;var&gt;num&lt;/var&gt; bytes, you must make sure that &lt;var&gt;Var&lt;/var&gt; is placed in a small data section. If &lt;var&gt;Var&lt;/var&gt; is defined by another module, you must either compile that module with a high-enough</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743749c4efffebe81ffd20a194825f3fc850b511" translate="yes" xml:space="preserve">
          <source>, and add the resulting directory to the include search path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16ad3ad201ad0e9edb67f4182af2991296c2f83" translate="yes" xml:space="preserve">
          <source>, and all preprocessed C source on standard output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ed666d7d769802b6beda7c0dcee29960956ee6" translate="yes" xml:space="preserve">
          <source>, and by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71752f09e96fc62366114cf7f0e7ed6dfc15ba5" translate="yes" xml:space="preserve">
          <source>, and can be disabled with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e2ece9623c1b6de007925f8291dd7e268326a4" translate="yes" xml:space="preserve">
          <source>, and is now deprecated in favor of that option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c621a5f8adf6dadb74b46610241e3bcd04d2e32" translate="yes" xml:space="preserve">
          <source>, and is the default for GCC on most targets. On the other hand, this behavior is not required by ISO C, and on some targets may carry a speed or code size penalty on variable references.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a5ea6b58f23701d3aa4146ace54029e8823718" translate="yes" xml:space="preserve">
          <source>, and only available for ARCv1 cores. This option is deprecated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6256dac04a1e70e1c010f7986affe3cfbc4b96" translate="yes" xml:space="preserve">
          <source>, and put each precompiled header in the directory, perhaps using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c2c76da72f0a333b5ed5016704ad851d0c39af" translate="yes" xml:space="preserve">
          <source>, and suppresses warnings with an implicit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34f17ce4557bcdf5b55dbd872b85dc9b982eafa1" translate="yes" xml:space="preserve">
          <source>, and the only difference between the options is the value of &lt;code&gt;__STDC_VERSION__&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e931096776aece1fe3f0a9e4be616b683405e9" translate="yes" xml:space="preserve">
          <source>, and this one:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d139345f8f88ea2b0370b518948a4897eef2d7" translate="yes" xml:space="preserve">
          <source>, and thus is only supported on targets that have support for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b113e8bcc5e9f320f4732a36fdcbc4f0f5e0d09c" translate="yes" xml:space="preserve">
          <source>, and/or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57f45466533085df41649cdee0f603a5cb41c26" translate="yes" xml:space="preserve">
          <source>, any</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866ed9c2b2d2bad8e5d74a3106d1846d7046ccca" translate="yes" xml:space="preserve">
          <source>, are also relevant for C++ programs. See &lt;a href=&quot;c-dialect-options#C-Dialect-Options&quot;&gt;Options Controlling C Dialect&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51481c8b24c31c23ddc1a3abcf6ba83a1ef51299" translate="yes" xml:space="preserve">
          <source>, are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a943208a4fedad276a1aa123b394ce668bbff3" translate="yes" xml:space="preserve">
          <source>, are ignored. The standard startup files are used normally, unless</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6379405f41516ac12b0f4139833678105195c0a4" translate="yes" xml:space="preserve">
          <source>, as a collection of messages with source file, line number and column number, with the following additional data for each message:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb00d545d0d5607110a98e502d1a1edbbdaa2098" translate="yes" xml:space="preserve">
          <source>, as the CR16C architecture does not support the far data model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b479d70daa1736f38f38cdacfc0aca31404acb9" translate="yes" xml:space="preserve">
          <source>, as well as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d60ffd6d107c4c32d8b7981fa36d4a32ef8dab" translate="yes" xml:space="preserve">
          <source>, as well as by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="399b3f0e115711c4cd717ca3bbb79382e386fd0b" translate="yes" xml:space="preserve">
          <source>, because this passes the entire string as a single argument, which is not what the linker expects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="865e3dfce7701d87918161573fe82bb85b8c9703" translate="yes" xml:space="preserve">
          <source>, but additionally asserts that the program being compiled does not perform any floating-point operations. This option is presently supported only by some bare-metal MIPS configurations, where it may select a special set of libraries that lack all floating-point support (including, for example, the floating-point &lt;code&gt;printf&lt;/code&gt; formats). If code compiled with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44afa57519c3ebb51125bff96010b68f9e7c42e" translate="yes" xml:space="preserve">
          <source>, but after any paths given with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da29ebe06aeaf8eeb2af99d65acf35ce314f7a2d" translate="yes" xml:space="preserve">
          <source>, but causes CSE to follow jumps that conditionally skip over blocks. When CSE encounters a simple &lt;code&gt;if&lt;/code&gt; statement with no else clause,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc018337da61987ae8a9683d2e8189ee04860e67" translate="yes" xml:space="preserve">
          <source>, but debug insns may get (non-overlapping) uids above it if the reserved range is exhausted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005377f41b9be83224f58308ed6955447f64b6d1" translate="yes" xml:space="preserve">
          <source>, but does not override the pipeline info. This helps reduce code size while still giving good performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="594ba3ce9f3f33a1e11308ab98fb068b622db145" translate="yes" xml:space="preserve">
          <source>, but emit only the macro names, not their expansions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d142b0d539e9cf1b604cc78dc509f4e7229fde5" translate="yes" xml:space="preserve">
          <source>, but is enabled by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc78f584be2b6aad9e5e5043f9934d5b9b136e4" translate="yes" xml:space="preserve">
          <source>, but it quotes any characters which are special to Make. &lt;code&gt;-MQ '$(objpfx)foo.o'&lt;/code&gt; gives</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c4a33264da0720530175142264eac24f6ae7161" translate="yes" xml:space="preserve">
          <source>, but not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddcaf1db7854ec894bd29481c117d0421a3605f" translate="yes" xml:space="preserve">
          <source>, but not at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c0770373d31ca6185df409b28c1a619d6e08d53" translate="yes" xml:space="preserve">
          <source>, but not other header files. The value &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159001fe4af9e263248a6b95afa82d085080520c" translate="yes" xml:space="preserve">
          <source>, but not to skip more bytes than the size of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d958259abb765b7f6d8dcadea03974d1a2f40bf6" translate="yes" xml:space="preserve">
          <source>, but not with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b216118818bb69b17957ca8878a61bc6b92bed60" translate="yes" xml:space="preserve">
          <source>, but only print for the WPA phase of Link Time Optimization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e35d7567098d27b15b90e10171d5a8dcf120925" translate="yes" xml:space="preserve">
          <source>, but pass linker options to locate initialized data at 0x40000000 and zero-initialized data at 0x80000000.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f70c180932b6b9e56fc718a1092901e76994fec" translate="yes" xml:space="preserve">
          <source>, but requests an additional pass of instruction scheduling after register allocation has been done. This is especially useful on machines with a relatively small number of registers and where memory load instructions take more than one cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="830b9851b653de89541a42c034a463a6fc26cd47" translate="yes" xml:space="preserve">
          <source>, but searches for a program such as &lt;code&gt;cpp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d72133be23d29e86bec8e3866d2ef1a66344d808" translate="yes" xml:space="preserve">
          <source>, but the default can be overridden by configuring GCC with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387e7f946ae452eacdf73af60a95f99f5b4e63e8" translate="yes" xml:space="preserve">
          <source>, but the extension options do not affect the tuning of the generated code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9a159b4f28ed957d67b57c420c44a30c73f5f0" translate="yes" xml:space="preserve">
          <source>, but the generated position-independent code can be only linked into executables. Usually these options are used to compile code that will be linked using the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce00db4a928b7a01e2c8e7726b40ed1e61c2d0a0" translate="yes" xml:space="preserve">
          <source>, but the only useful values are those that select a particular CPU implementation. Those are &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8192753a9d1c499d01af47f83e4414507c8efbb8" translate="yes" xml:space="preserve">
          <source>, but the scheduling parameters set by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b748f41055c10d610a28ba47d6bb381220696d14" translate="yes" xml:space="preserve">
          <source>, but there are a few exceptions. GCC requires the freestanding environment provide &lt;code&gt;memcpy&lt;/code&gt;, &lt;code&gt;memmove&lt;/code&gt;, &lt;code&gt;memset&lt;/code&gt; and &lt;code&gt;memcmp&lt;/code&gt;. Finally, if &lt;code&gt;__builtin_trap&lt;/code&gt; is used, and the target does not implement the &lt;code&gt;trap&lt;/code&gt; pattern, then GCC emits a call to &lt;code&gt;abort&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e915a38ee11f159ae6606fe3c6ba38c9e85ffd1a" translate="yes" xml:space="preserve">
          <source>, but this can be overridden at configure time using</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff7f24239f93384ee139821001cb13bd9242f98" translate="yes" xml:space="preserve">
          <source>, but this option sets the list of function names to be excluded from instrumentation. The function name to be matched is its user-visible name, such as &lt;code&gt;vector&amp;lt;int&amp;gt; blah(const vector&amp;lt;int&amp;gt; &amp;amp;)&lt;/code&gt;, not the internal mangled name (e.g., &lt;code&gt;_Z4blahRSt6vectorIiSaIiEE&lt;/code&gt;). The match is done on substrings: if the &lt;var&gt;sym&lt;/var&gt; parameter is a substring of the function name, it is considered to be a match. For C99 and C++ extended identifiers, the function name must be given in UTF-8, not using universal character names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b542e5e2900b33582894496dd2fb25f7a186a1" translate="yes" xml:space="preserve">
          <source>, callers of such functions use an inlined PLT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc40ffb21955611ebc01b821b57a8fb97abe447" translate="yes" xml:space="preserve">
          <source>, causes debug versions of the runtime functions for the vtable verification feature to be called. This flag also causes the compiler to log information about which vtable pointers it finds for each class. This information is written to a file named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186899d07725833e558a3f1b37bca7595dd4ab80" translate="yes" xml:space="preserve">
          <source>, causes the compiler to tune for code size rather than execution speed, and performs further optimizations designed to reduce code size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a4aca34a1bfb27eca2f4c5b85088c452ff661a" translate="yes" xml:space="preserve">
          <source>, cold functions are automatically detected and this attribute is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f796dad3806ccc12e4efbb979242edaefd9c68ac" translate="yes" xml:space="preserve">
          <source>, debug information is generated for types declared in that file and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602f9aefc82b94f79ccc91c4e0a2d6024a300032" translate="yes" xml:space="preserve">
          <source>, defaulting to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63e7e7ca16f5d6ce188c6f1a13bb0cfb59a90f05" translate="yes" xml:space="preserve">
          <source>, depending on the other options used, so that headers may for example be found in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59850229d9fda282df9f43c3238d9cc1fe2f9ca4" translate="yes" xml:space="preserve">
          <source>, don&amp;rsquo;t generate (do generate) instruction sequences that load addresses for functions from the PLT part of the GOT rather than (traditional on other architectures) calls to the PLT. The default is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899cb9db2c2edf8462bd1866fd07b4a282dd26dc" translate="yes" xml:space="preserve">
          <source>, each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a212453865c3ae5d769c013e9814daf8f2a214a4" translate="yes" xml:space="preserve">
          <source>, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2025ee33109115d150095e4dc9fbc6cecdccc59c" translate="yes" xml:space="preserve">
          <source>, etc. GCC considers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c230b2ae171538a9903d9c6f4c54262988ff8a11" translate="yes" xml:space="preserve">
          <source>, except for that it outputs the &lt;code&gt;.code16gcc&lt;/code&gt; assembly directive at the beginning of the assembly output so that the binary can run in 16-bit mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36187c82da4acd270eb00cabfd2754e7a35d89ac" translate="yes" xml:space="preserve">
          <source>, except on targets where GCC is the principal compiler. In those cases, we can choose the standard, and we chose the more efficient register return alternative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a7bfad050613cd89b494934c041ad85c96a7f4e" translate="yes" xml:space="preserve">
          <source>, except that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="424ca99182001aa93e0255bf1521df6608849e1a" translate="yes" xml:space="preserve">
          <source>, except that any output produced by scanning &lt;var&gt;file&lt;/var&gt; is thrown away. Macros it defines remain defined. This allows you to acquire all the macros from a header without also processing its declarations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af31397d348022357555d43ae6b6602db7237c77" translate="yes" xml:space="preserve">
          <source>, except that comments contained within macros are also passed through to the output file where the macro is expanded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8293df57b65690a6a5b17ad151fb7402defdb639" translate="yes" xml:space="preserve">
          <source>, except that it implicitly passes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ee9476717ae169b601f810748e3fbaeb86e2f3" translate="yes" xml:space="preserve">
          <source>, except that it just generates any needed static data, but does not affect the generated code in any other way. You normally do not need to enable this option; instead, a language processor that needs this handling enables it on your behalf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa2d6de31b71426a7c88a1aee1560252b4b2a7d" translate="yes" xml:space="preserve">
          <source>, except when selective scheduling is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dce06a184830559e813d9f5a2f13966eb3de4b64" translate="yes" xml:space="preserve">
          <source>, expand the &lt;code&gt;__FILE__&lt;/code&gt; and &lt;code&gt;__BASE_FILE__&lt;/code&gt; macros as if the files resided in directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="537e3d3f4595296c4732ae2914f89aff5f7a7f43" translate="yes" xml:space="preserve">
          <source>, fails and prints an error if asked to create a shared library with a less restrictive subtype than its input files (for instance, trying to put a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb43e7f5581dd318ba35a4b1b7bd3f3204a8b2e" translate="yes" xml:space="preserve">
          <source>, for each function of your program GCC creates a program flow graph, then finds a spanning tree for the graph. Only arcs that are not on the spanning tree have to be instrumented: the compiler adds code to count the number of times that these arcs are executed. When an arc is the only exit or only entrance to a block, the instrumentation code can be added to the block; otherwise, a new basic block must be created to hold the instrumentation code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a62702328e51c81c8d14351efa5231be254fb50" translate="yes" xml:space="preserve">
          <source>, for which this feature is experimental.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de44d1d94e89d69c9312fa31d05de00107553327" translate="yes" xml:space="preserve">
          <source>, forcibly change the way C symbols are represented in the object file. One use is to help link with legacy assembly code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3d5d86fcab0fccd2357fb760ccfdbc87239051" translate="yes" xml:space="preserve">
          <source>, function calls with a such function as the callee or caller uses inlined PLT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73db41c359e5e1618dc5e96de50a7c0cce9c547" translate="yes" xml:space="preserve">
          <source>, generating &lt;var&gt;N&lt;/var&gt; NOPs, with the function entry point before the &lt;var&gt;M&lt;/var&gt;th NOP instruction. &lt;var&gt;M&lt;/var&gt; defaults to 0 if omitted e.g. function entry point is before the first NOP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66281c83f494cfe2e9913aed90954ff6500be7df" translate="yes" xml:space="preserve">
          <source>, giving just &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7edb54e230ef45c40c202a2070aee0bf8eea9a7f" translate="yes" xml:space="preserve">
          <source>, hot functions are automatically detected and this attribute is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd70bd4accf5ece1456ab2be03ed1e6ee41d4b1c" translate="yes" xml:space="preserve">
          <source>, however the option is disabled if generated code will be instrumented for profiling (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bce44abc1a9262df8cac0c50152864f825ccf63" translate="yes" xml:space="preserve">
          <source>, i.e. to store data in the little-endian format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5060e991a7ba759c2592a069e08cef00119e51" translate="yes" xml:space="preserve">
          <source>, i.e., do not enable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe023c621e2a7b2cf31927bbba4a961d25408a71" translate="yes" xml:space="preserve">
          <source>, i.e., pass standard Linux linking options to the linker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c940f0489137021ec5391fb7b7ac2f5ace9d8059" translate="yes" xml:space="preserve">
          <source>, if OS libraries are present in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3dd87cad0ef7982b3ab32988714c6ca54cf2f9e" translate="yes" xml:space="preserve">
          <source>, imply</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f808929dc7d65506fc3a70039f1c27ca90486ac" translate="yes" xml:space="preserve">
          <source>, in addition to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf07eced2fe9d18835b5764136236b3da619529d" translate="yes" xml:space="preserve">
          <source>, in the same way that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30d7a5cabdcb5756c85bb67b0a58b128c10f3cc" translate="yes" xml:space="preserve">
          <source>, including any libraries. This includes the system libraries and startup modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b04496200d4f3af930e39d995d950d3bfbff027" translate="yes" xml:space="preserve">
          <source>, instead of guessing which path a branch is most likely to take, the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26cdfc5e353e2972712fe3c4c6c2c7061cd6b42" translate="yes" xml:space="preserve">
          <source>, is also specified with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297f123a9478230dfaae1454a7a30d8603dbe525" translate="yes" xml:space="preserve">
          <source>, is to use assembler macros instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9865f992f80d724f0d28f2e68445911d448f9a75" translate="yes" xml:space="preserve">
          <source>, it accesses the variables from a common anchor point instead. The effect is similar to the following pseudocode (which isn&amp;rsquo;t valid C):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c7d699148009585bcbfd24104e627443f4227f" translate="yes" xml:space="preserve">
          <source>, it adds code so that some data about values of expressions in the program is gathered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb937a2afd69efa3de1fcfec93c85b21cd8d3c0" translate="yes" xml:space="preserve">
          <source>, it assumes GOT entries and small data are within a 12-bit range from the GOT base address; with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70db58101b4a4dd5508449ddae97a05be51b3c50" translate="yes" xml:space="preserve">
          <source>, it defines the macros for every architecture in the range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7334c92634fb9a0df41a81a512187c2464430d0" translate="yes" xml:space="preserve">
          <source>, it dumps debugging information about location maps. Every token in the output is preceded by the dump of the map its location belongs to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="085a445042571b2a530ccf02bdc7d3dca3e56d18" translate="yes" xml:space="preserve">
          <source>, it has the same meaning as &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7ad38301fa6cb9702cdcc46f4b9ac21cbe6bd6" translate="yes" xml:space="preserve">
          <source>, it instead searches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da805275b6a01ffed7306b21a2664c3c591d7da2" translate="yes" xml:space="preserve">
          <source>, it is possible to extract and use them in an LTO link if you are using a linker with plugin support. To create static libraries suitable for LTO, use &lt;code&gt;gcc-ar&lt;/code&gt; and &lt;code&gt;gcc-ranlib&lt;/code&gt; instead of &lt;code&gt;ar&lt;/code&gt; and &lt;code&gt;ranlib&lt;/code&gt;; to show the symbols of object files with GIMPLE bytecode, use &lt;code&gt;gcc-nm&lt;/code&gt;. Those commands require that &lt;code&gt;ar&lt;/code&gt;, &lt;code&gt;ranlib&lt;/code&gt; and &lt;code&gt;nm&lt;/code&gt; have been compiled with plugin support. At link time, use the flag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fdbc0dcc1b3d3cf0a25782f0c9d99618712795c" translate="yes" xml:space="preserve">
          <source>, it links the shared version of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d873388541d922fb56183db4bb2553adba035d5a" translate="yes" xml:space="preserve">
          <source>, it reads back the data gathered and actually performs the optimizations based on them. Currently the optimizations include specialization of division operations using the knowledge about the value of the denominator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f260537ad6dfb12892a249886247f016bc9ba2" translate="yes" xml:space="preserve">
          <source>, it reads back the data gathered from profiling values of expressions for usage in optimizations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33fdaf8607572ca9dfc5db8fb8a043fa47838f46" translate="yes" xml:space="preserve">
          <source>, it trades 3 instructions for 4, one of which may be shared by multiple symbols, and it avoids the need for a GOT entry for the referenced symbol, so it&amp;rsquo;s more likely to be a win. If it is not,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597abb8e1070ef05bc7ec2edf56f3622f0ab3d9c" translate="yes" xml:space="preserve">
          <source>, its assembler file in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5e7591ba964c2077d7342b00d00d8531ffe32b" translate="yes" xml:space="preserve">
          <source>, linking with the static version of libgcc by default. This allows exceptions to propagate through such shared libraries, without incurring relocation costs at library load time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86f918c25844c67aabc1b85407cae7e6da5fdd5" translate="yes" xml:space="preserve">
          <source>, loops containing a load/store sequence can be changed to a load before the loop and a store after the loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfaf303daa057f828f7c2dbdcc5ee00d114011c" translate="yes" xml:space="preserve">
          <source>, merges the two files into a single internal image, and compiles the result as usual. Since both</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42efed7c6b6343d536a66fe0302d3bcf2db50bff" translate="yes" xml:space="preserve">
          <source>, merges them together into a single GIMPLE representation and optimizes them as usual to produce</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de233cb30f72a91f767198fb4088b9d8434017e" translate="yes" xml:space="preserve">
          <source>, only calls to prototyped variable argument functions set or clear the bit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="500ad22c367338ded2a7f587262dff6519e20900" translate="yes" xml:space="preserve">
          <source>, only permits instructions to be used that are valid for the subtype of the file it is generating, so you cannot put 64-bit instructions in a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b366d1a229ec84d93ba42e7ecafb33db5b7b9b39" translate="yes" xml:space="preserve">
          <source>, or</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dc64f385a34f50d73ecc913e204ce42b3b016bf" translate="yes" xml:space="preserve">
          <source>, or if OS libraries are present in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b0984b332cb5904969fd0c26d2d20fdad7a2a9" translate="yes" xml:space="preserve">
          <source>, or model suboptions) when you specify this linker option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f73a9aa24d964050dc3b77a89839f46d5544c2" translate="yes" xml:space="preserve">
          <source>, or model suboptions) when you specify this linker option.&lt;a href=&quot;#FOOT1&quot; id=&quot;DOCF1&quot; name=&quot;DOCF1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df955ad07564d81affa3b0a58d1230baa30b079" translate="yes" xml:space="preserve">
          <source>, or tagged with the equivalent &lt;code&gt;arch=armv8-a+crc&lt;/code&gt; attribute, can inline a function &lt;code&gt;bar&lt;/code&gt; compiled with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0d16ff2ecb94e39dbd670079ddc6dfea8cf86c2" translate="yes" xml:space="preserve">
          <source>, or use an environment variable like &lt;code&gt;DEPENDENCIES_OUTPUT&lt;/code&gt; (see &lt;a href=&quot;environment-variables#Environment-Variables&quot;&gt;Environment Variables&lt;/a&gt;). Debug output is still sent to the regular output stream as normal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114413bb4f72c7de7da72bbb1c49201af1736906" translate="yes" xml:space="preserve">
          <source>, or use multiple</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9de57a8368cc0be9e412c8156861efc31380ddb" translate="yes" xml:space="preserve">
          <source>, or with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fd3001192750dfc840e657f931b977a68bb8c9" translate="yes" xml:space="preserve">
          <source>, otherwise GCC will allow some non-ISO C++ features as extensions. See &lt;a href=&quot;warning-options#Warning-Options&quot;&gt;Warning Options&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efb03b3f7239b259ed4938692deb4cfeedb504b" translate="yes" xml:space="preserve">
          <source>, otherwise compile code the same as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f722d4c3e2124084fb81e45309c5309f6a0001c" translate="yes" xml:space="preserve">
          <source>, otherwise it takes the name of the input file, removes any directory components and suffix, and applies a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fdbcf702ccfe5b30e705c3cbb40781443600e37" translate="yes" xml:space="preserve">
          <source>, permits passing pointers to structures with anonymous fields to functions that expect pointers to elements of the type of the field, and permits referring to anonymous fields declared using a typedef. See &lt;a href=&quot;unnamed-fields#Unnamed-Fields&quot;&gt;Unnamed struct/union fields within structs/unions&lt;/a&gt;, for details. This is only supported for C, not C++.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd6d891db77cd5a6b32757579c81c42fb30122c" translate="yes" xml:space="preserve">
          <source>, predefinition of command line and most builtin macros is disabled. Macros such as &lt;code&gt;__LINE__&lt;/code&gt;, which are contextually dependent, are handled normally. This enables compilation of files previously preprocessed with &lt;code&gt;-E -fdirectives-only&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415eb48854af3a6a56014b4f60405d06dc891dcf" translate="yes" xml:space="preserve">
          <source>, preprocessing is limited to the handling of directives such as &lt;code&gt;#define&lt;/code&gt;, &lt;code&gt;#ifdef&lt;/code&gt;, and &lt;code&gt;#error&lt;/code&gt;. Other preprocessor operations, such as macro expansion and trigraph conversion are not performed. In addition, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bfd8775564ba9a386c05bd93a1f015b33ee831" translate="yes" xml:space="preserve">
          <source>, rather than Newlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382a63ed22ee293d350fb2ac1e8963f3b5af303b" translate="yes" xml:space="preserve">
          <source>, record any references to them in the result of the compilation as if the files resided in directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5596d7a7c540b768140fc8e0589b7003ee3db084" translate="yes" xml:space="preserve">
          <source>, record debugging information describing them as if the files resided in directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a257c20cceb3376fd5c996cb7d116ca7848455c5" translate="yes" xml:space="preserve">
          <source>, regardless of the order of the options on the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12d501570d9936bde7534d9241ac0db13d604a8d" translate="yes" xml:space="preserve">
          <source>, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb4669872f9d1911aecb2ff977742a0d6c1e477" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;avr-options#AVR-Options&quot;&gt;AVR Options&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7e2fbf0415afcfbd5453b3d8148325e06b13e2" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;Optimize Options&lt;/a&gt;), and if GNU Binutils support &lt;a href=&quot;https://sourceware.org/PR21683&quot;&gt;PR21683&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23b4d8e2af9ccece653777203cc633cc8613584" translate="yes" xml:space="preserve">
          <source>, since floating-point division by zero can be a legitimate way of obtaining infinities and NaNs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48743acb3c50007ccd27cb69772fa5958efec8aa" translate="yes" xml:space="preserve">
          <source>, since it usually increases code size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1142d002e80f61cb8906ee6ff983e94d926cb47b" translate="yes" xml:space="preserve">
          <source>, since slightly larger code is generated when</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8489f86e2aa5976abda688075895e8c118642126" translate="yes" xml:space="preserve">
          <source>, since there are errors enabled by this option and not enabled by the latter and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ac58ccd302f428780f22989ed14b633a5da687" translate="yes" xml:space="preserve">
          <source>, so a lot of code can be recompiled with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7164620902b23499669819ffa895173a5aa25027" translate="yes" xml:space="preserve">
          <source>, so that the libraries leave more room for the main program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68680f64842e4482b6c97e2407b39d9d533a072a" translate="yes" xml:space="preserve">
          <source>, specifies a file to write the dependencies to. If no</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a902c43a69a00e9f2cfce60ce9290e659912859" translate="yes" xml:space="preserve">
          <source>, strip mine each loop in the loop nest by a given number of iterations. The strip length can be changed using the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9b4086b33c372adc8859729f0f2fda99df10f0" translate="yes" xml:space="preserve">
          <source>, such that it is linked with the shared</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3ab4b910db14b52efa18ff9cf025cb41c0d39a2" translate="yes" xml:space="preserve">
          <source>, tells the compiler to not pass</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bcafc2113daaac812f1518346b8bb3f4ad5920" translate="yes" xml:space="preserve">
          <source>, the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b63f3bf562cc464d10a5f414760217b5e6be781" translate="yes" xml:space="preserve">
          <source>, the &lt;code&gt;gcc&lt;/code&gt; program instead returns with the numerically highest error produced by any phase returning an error indication. The C, C++, and Fortran front ends return 4 if an internal compiler error is encountered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3ce9581fef6bdbd359e9f45a5a99604a8cf6c7" translate="yes" xml:space="preserve">
          <source>, the Pentium Pro instruction set is used, so the code runs on all i686 family chips. When used with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa194889cd144e6bbf27af39f845ba26d861d086" translate="yes" xml:space="preserve">
          <source>, the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92a035b4927c9fce1d07fc2c810360ae211e587" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for Oracle M8 chips.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a39a5fbbad7fe0ed957cc74cab0d30798133fa7" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for Oracle SPARC M7 chips. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac0c6c3a7e57517af6c1fd4d8c2f4ab55e3234b" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for Sun UltraSPARC T1 chips. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5cb47d14afa8a18feae7e3577d1c2f7f39aa3a3" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for Sun UltraSPARC T2 chips. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4372efad9448f8e7c66d51c59cc8061f932390e7" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for Sun UltraSPARC T3 chips. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04c02ac5cdda7b9f9e1bd562613ee0b12cbaa11d" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for Sun UltraSPARC T4 chips. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8343d3123cbd58bc0f4cfc4dca465aa9ceca09" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the Cypress CY7C602 chip, as used in the SPARCStation/SPARCServer 3xx series. This is also appropriate for the older SPARCStation 1, 2, IPX etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e916d47d43e0128f6a11b321665069d28bed521" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the Fujitsu MB86930 chip, which is the original SPARClite, with no FPU. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59e587eb3c489ffd26283628358ebe3722a023bf" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the Fujitsu MB86934 chip, which is the more recent SPARClite with FPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d99095dcd3228954410a8eb6f64d85dbeae0243" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the Sun UltraSPARC I/II/IIi chips. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="841fa825f3bff788d457becd582c25c57258d89d" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the Sun UltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858687102dd55ff8fc87c92e71e8832cd4e35c97" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the SuperSPARC chip, as used in the SPARCStation 10, 1000 and 2000 series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aecd3e58e2014147bddadb0ae32ec7d9dee9a11b" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the TEMIC SPARClet chip.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86eac710e38d27a598505cf74f39473202849dd" translate="yes" xml:space="preserve">
          <source>, the compiler assumes that structures should have 8-byte alignment. This enables the use of pairs of &lt;code&gt;ldd&lt;/code&gt; and &lt;code&gt;std&lt;/code&gt; instructions for copies in structure assignment, in place of twice as many &lt;code&gt;ld&lt;/code&gt; and &lt;code&gt;st&lt;/code&gt; pairs. However, the use of this changed alignment directly violates the SPARC ABI. Thus, it&amp;rsquo;s intended only for use on targets where the developer acknowledges that their resulting code is not directly in line with the rules of the ABI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e95df22d51cc97b41caac28bfc5b9326fa6b5f0" translate="yes" xml:space="preserve">
          <source>, the compiler could use the extended instruction sets even if the built-ins are not used explicitly in the program. For this reason, applications that perform run-time CPU detection must compile separate files for each supported architecture, using the appropriate flags. In particular, the file containing the CPU detection code should be compiled without these options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffdc7f53e47734d83c7e14a48d5c0f0132cfcca4" translate="yes" xml:space="preserve">
          <source>, the compiler does not generate save/restore instructions and uses a &amp;ldquo;flat&amp;rdquo; or single register window model. This model is compatible with the regular register window model. The local registers and the input registers (0&amp;ndash;5) are still treated as &amp;ldquo;call-saved&amp;rdquo; registers and are saved on the stack as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e78890820dcd7f981ed8ef33a3a8c043e8ebf1" translate="yes" xml:space="preserve">
          <source>, the compiler generates checking code in functions returning structures or unions to detect size mismatches between the two sides of function calls, as per the 32-bit ABI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428fba5d393e56eabf7998e3fc175cb944f8ad09" translate="yes" xml:space="preserve">
          <source>, the compiler tries to reduce code size and execution time, without performing any optimizations that take a great deal of compilation time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf303df50714bc573b14a3f51a8300fe4c948bd" translate="yes" xml:space="preserve">
          <source>, the declaration of the function is diagnosed as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3026241c180440d0e9f94ba76190f2ca96852cd8" translate="yes" xml:space="preserve">
          <source>, the default for GCC 5.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692722d8e42a4b8d2a2c2032a7f0a3bed13e40ff" translate="yes" xml:space="preserve">
          <source>, the default for GCC 5.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c05f1d08fd7c0969883bbc9f062051a4b0a7b0" translate="yes" xml:space="preserve">
          <source>, the default for GCC 6.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6fc73f89ebea91385b893380c45e9780bb3d84a" translate="yes" xml:space="preserve">
          <source>, the default is &amp;ldquo;on&amp;rdquo; for ColdFire architectures and &amp;ldquo;off&amp;rdquo; for M680x0 architectures. Otherwise, the default is taken from the target CPU (either the default CPU, or the one specified by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="772f6bbc0f9a324fca50c11ff8483df72f8e4584" translate="yes" xml:space="preserve">
          <source>, the default, causes the extra information to be omitted and is useful when comparing two assembler files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4cd5e116a47d28493b581dcab5dad877c0c34fd" translate="yes" xml:space="preserve">
          <source>, the files with the profile feedback can fail to match the source file and GCC cannot use the profile feedback information. By default, this warning is enabled and is treated as an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cbd8fc1988c38d8b75e8d548b8bb8d2f822f61" translate="yes" xml:space="preserve">
          <source>, the final executable will try to create the data file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815a1ce8e00e3334738617eb00c2c9266ebafe03" translate="yes" xml:space="preserve">
          <source>, the generated object file is larger than a regular object file because it contains GIMPLE bytecodes and the usual final code (see</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c87c2482200581ada6b793353d563f5ec679ac" translate="yes" xml:space="preserve">
          <source>, the library that comes with GCC, with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a1837ffa642bc6e9d87b5530ec03163e746678" translate="yes" xml:space="preserve">
          <source>, the literals are interspersed in the text section in order to keep them as close as possible to their references. This may be necessary for large assembly files. Literals for each function are placed right before that function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3874c30a889fc4550891f54d685ec72df06fd5db" translate="yes" xml:space="preserve">
          <source>, the normal function prologue and epilogue which set up the stack frame are omitted and no return instructions or return sequences are generated in the code. Use this option only together with visual inspection of the compiled code: no warnings or errors are generated when call-saved registers must be saved, or storage for local variables needs to be allocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50289040a36706f3a23d65e893eec4854af6d2e0" translate="yes" xml:space="preserve">
          <source>, the object file for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f57e72cae764cab6dfaa8a6b984d61c8fcfcea0" translate="yes" xml:space="preserve">
          <source>, the profiling code first attempts to read in an existing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a1f5530e3d7b4711a9e708a49cfd47c423f4f7" translate="yes" xml:space="preserve">
          <source>, the rules for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8699bd16ca7024ea46de08dda1f9050558b25386" translate="yes" xml:space="preserve">
          <source>, the sign of the remainder follows the sign of the dividend. Both methods are arithmetically valid, the latter being almost exclusively used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29acbd1d62bfd215ea629596b9c554886b91017d" translate="yes" xml:space="preserve">
          <source>, the single-application/dual-core programming model is used. In this model, the main function of Core B should be named as &lt;code&gt;coreb_main&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667fda1f9e48385c0210894fbc7037623d1a4111" translate="yes" xml:space="preserve">
          <source>, the structure is aligned to a 1-byte boundary and is 1 byte in size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e189049326051591313d1c5688fafbf491aeaf0f" translate="yes" xml:space="preserve">
          <source>, then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ee186a18ff42c73f0354082e8ef090089e5effc" translate="yes" xml:space="preserve">
          <source>, then running &lt;code&gt;gcov&lt;/code&gt; on the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd5514ee17d5d19d7515ba2ea9a77e61ac8a324" translate="yes" xml:space="preserve">
          <source>, then the dependencies are written to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b8fa8d9a1275fa5b175ea2e48216447ff905c8" translate="yes" xml:space="preserve">
          <source>, then the precompiled header file is used if possible, and the original header is used otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564c028c79c98b2596f511c52750e11cf8ed8aa0" translate="yes" xml:space="preserve">
          <source>, then you must disable instrumentation on all functions that are part of the instrumentation framework with the attribute &lt;code&gt;patchable_function_entry (0)&lt;/code&gt; to prevent recursion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8d64d7606f91920bd635808a8350a26f4f43160" translate="yes" xml:space="preserve">
          <source>, then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b1ddc03f8c4f7114c6642a980a4266ab4ee91d" translate="yes" xml:space="preserve">
          <source>, there is a small window between the time that the stack pointer is updated and the address of the previous frame is stored, which means code that walks the stack frame across interrupts or signals may get corrupted data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50141233a4a222a2ad6dabbea63d30e01eee8b71" translate="yes" xml:space="preserve">
          <source>, there may not be much stack space available for the latter code to run. If compiling all code, including library code, with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326afd2af91c7cd70009eaf4d8cb90f6936cddbc" translate="yes" xml:space="preserve">
          <source>, they invoke &lt;code&gt;rdval&lt;/code&gt; and &lt;code&gt;wrval&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b91ca3210bb29fc4dfea84458ae04652f30e451" translate="yes" xml:space="preserve">
          <source>, this causes the compiler to keep track of the total number of virtual calls it encounters and the number of verifications it inserts. It also counts the number of calls to certain run-time library functions that it inserts and logs this information for each compilation unit. The compiler writes this information to a file named</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01188017d3c123848733d9fd6dfb22206ff1e87" translate="yes" xml:space="preserve">
          <source>, this is what you see when you use the basic &lt;code&gt;gcov&lt;/code&gt; facility:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e5bfa587207f7380ee4c3bb705530423614bbd5" translate="yes" xml:space="preserve">
          <source>, this optimization can be performed by the assembler and the linker alone without help from the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d459e76328a6d385857ebd663c3475f17a65af0" translate="yes" xml:space="preserve">
          <source>, this option has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3c6490f4076f4eee8ed0cae6ad3221f0b61401" translate="yes" xml:space="preserve">
          <source>, this option increases both compilation time and the performance of the generated code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fd13fa8750caa49540ff0768629b8cca833a35" translate="yes" xml:space="preserve">
          <source>, this option instructs the compiler to add code to gather information about values of expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429b287e8d0f22a8e7c02112f3cd1eb77566d212" translate="yes" xml:space="preserve">
          <source>, those directories are searched for all &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d73a0b8dae23d131af59205c0f51492334fc033" translate="yes" xml:space="preserve">
          <source>, those options take precedence over the appropriate part of this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32971533b36b13d8be7306c0655e0cba1b20c8f9" translate="yes" xml:space="preserve">
          <source>, though this could be supported for 68020 and higher processors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0255e1660d4339b2ecf6c91d1ccb336078135f" translate="yes" xml:space="preserve">
          <source>, to improve optimizations based on the number of times each branch was taken. When a program compiled with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac44f21a3de295129d64b5a774011adcf28ae140" translate="yes" xml:space="preserve">
          <source>, turn on other options, such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446f5cf91d366f03eddeeaf354f183b84e577619" translate="yes" xml:space="preserve">
          <source>, type-punning is allowed, provided the memory is accessed through the union type. So, the code above works as expected. See &lt;a href=&quot;structures-unions-enumerations-and-bit_002dfields-implementation#Structures-unions-enumerations-and-bit_002dfields-implementation&quot;&gt;Structures unions enumerations and bit-fields implementation&lt;/a&gt;. However, this code might not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb3379edebd14fb24a32aa3130ec6c35394eeb8" translate="yes" xml:space="preserve">
          <source>, unless</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2274935835d1d79884f7f27c0ba51679421f90" translate="yes" xml:space="preserve">
          <source>, used in addition to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56bae807872361f6ddda9c5d7baa9d2dc802cb0" translate="yes" xml:space="preserve">
          <source>, warnings are given about format features not in the selected standard version (but not for &lt;code&gt;strfmon&lt;/code&gt; formats, since those are not in any version of the C standard). See &lt;a href=&quot;c-dialect-options#C-Dialect-Options&quot;&gt;Options Controlling C Dialect&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a2f4ea153e2f7cf779ca618429b6ec5801bf5c" translate="yes" xml:space="preserve">
          <source>, where &lt;var&gt;N&lt;/var&gt; is a number in the range 0 to 9, then it is replaced by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4756ea8500a07b5870d68c2dc4135f0e24797100" translate="yes" xml:space="preserve">
          <source>, where the &lt;var&gt;source-file&lt;/var&gt; component is the final filename part and the &lt;var&gt;md5&lt;/var&gt; component is calculated from the full mangled name that would have been used otherwise. The option is an alternative to the &lt;var&gt;&amp;ndash;preserve-paths&lt;/var&gt; on systems which have a filesystem limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230f86319e28b7455f7d53c3723a16687bfdfc57" translate="yes" xml:space="preserve">
          <source>, where the permissible values for &lt;var&gt;cpu&lt;/var&gt; are the same as those available for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2254d7466842a921ec0e93daa8a81e8d02ab2cfb" translate="yes" xml:space="preserve">
          <source>, which GCC rejects as an invalid option in any actual compilation (rather than preprocessing, assembly or linking). To get just a warning, setting &lt;code&gt;GCC_COMPARE_DEBUG&lt;/code&gt; to &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e989e4cf45165ab34bb6bb136c281cdf9203ee24" translate="yes" xml:space="preserve">
          <source>, which allows GCC to inline most constant-sized copies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46699ca278faeacb3ea5e4e0e6aa330bfab42c0d" translate="yes" xml:space="preserve">
          <source>, which applies only to functions that are declared using the &lt;code&gt;dllexport&lt;/code&gt; attribute or declspec. See &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Declaring Attributes of Functions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd54cb18e1d323986e9f863c779e1f697545e855" translate="yes" xml:space="preserve">
          <source>, which can be disabled with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b72facf8cc43915080a973ea5dda407d52591f" translate="yes" xml:space="preserve">
          <source>, which causes the compiler to recognize the same Objective-C language syntax recognized by GCC 4.0, and to produce an error if one of the new features is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de0e70e7120f7592acf3b303b06e39b57acee0c" translate="yes" xml:space="preserve">
          <source>, which disables the dumping of the final representation and the second compilation, preventing even &lt;code&gt;GCC_COMPARE_DEBUG&lt;/code&gt; from taking effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e713fcad2fa12372ddfaea05c7df9060097043" translate="yes" xml:space="preserve">
          <source>, which implies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2f82387a05712f0b55c15013dd25fcda2c6d51f" translate="yes" xml:space="preserve">
          <source>, which is also one of the effective C++ recommendations. However, the check is extended to warn about the lack of virtual destructor in accessible non-polymorphic bases classes too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d738471a73ffb8b526b91636ca0ef2885217f80" translate="yes" xml:space="preserve">
          <source>, which is enabled by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4502a0e761188e5c8233a9411a8864fc6121c93b" translate="yes" xml:space="preserve">
          <source>, which is enabled by default at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b03cadb73bdb5b121b37c664acf4102564be1aa" translate="yes" xml:space="preserve">
          <source>, which is on by default at</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e8924d8e634e11e3e3c8423a5c0bf3ec344ab3" translate="yes" xml:space="preserve">
          <source>, which is still supported, because it does not use shell special characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce4b030ad0c9a1e1625f5d28ae9b41b1de635be" translate="yes" xml:space="preserve">
          <source>, which is the negative form of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ec90d1ff3ca86f96f89ef39059823f9658e3e1e" translate="yes" xml:space="preserve">
          <source>, which may turn on further options, such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082e8aad8694962e494d7d77884c7dfe5926bb26" translate="yes" xml:space="preserve">
          <source>, which merely tunes the generated code for the specified &lt;var&gt;cpu-type&lt;/var&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59e35e5dc78b628f6809a4752d27ac48bb1f008" translate="yes" xml:space="preserve">
          <source>, which must come from a separate C library implementation. Because of this the GNU C compiler does not define macro &lt;code&gt;__STDC_DEC_FP__&lt;/code&gt; to indicate that the implementation conforms to the technical report.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9578678819c9dfdf597d5e59c8c2d0c2abbab9d6" translate="yes" xml:space="preserve">
          <source>, which places literals in a separate section in the output file unless</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883ecbd65c15c80691c67d2f907d5c7aa2ef6aac" translate="yes" xml:space="preserve">
          <source>, which places literals in a separate section in the output file. This allows the literal pool to be placed in a data RAM/ROM, and it also allows the linker to combine literal pools from separate object files to remove redundant literals and improve code size. With</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4a3cc602f61d3b174e82540c1b8773914df0766" translate="yes" xml:space="preserve">
          <source>, which selects the one-application-per-core programming model. Without</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa953aa1d2a4a6171c0b8ff19c074aba480082a9" translate="yes" xml:space="preserve">
          <source>, which serves for most needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4f2d97a4a669aa53418fe3954e59b741a6fbbdf" translate="yes" xml:space="preserve">
          <source>, which tells GCC to ignore the attribute for inlined functions unless the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a4ee6a5e86260dc3373c4048b2d477f6cfcda4" translate="yes" xml:space="preserve">
          <source>, which uses DImode as preferred SIMD mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f76a67230e5947e1c451436d1b658485d290c47" translate="yes" xml:space="preserve">
          <source>, which uses slower, but IEEE-compliant, software comparisons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556b07890fce44f6b6132283c9ed18c93acca22b" translate="yes" xml:space="preserve">
          <source>, which warns about any identifier that is not in the ISO 10646 &amp;ldquo;C&amp;rdquo; normalized form, &lt;em&gt;NFC&lt;/em&gt;. NFC is the recommended form for most uses. It is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e2fd6d52e014696dd3032ae2240c099458a6e3" translate="yes" xml:space="preserve">
          <source>, which warns for pointer argument passing or assignment with different signedness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8937da5834fe58a4195b5beccef41b08b4ec15c4" translate="yes" xml:space="preserve">
          <source>, which will turn these warnings into errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d2d73c488287ee47e9e23a7bde89fad3f5a395" translate="yes" xml:space="preserve">
          <source>, while</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c986d828f7d9c3017ba629babae8bb52ae352cf6" translate="yes" xml:space="preserve">
          <source>, while the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9eafc1b8f96cf25eb2fe2756bd682cb2dd19e7d" translate="yes" xml:space="preserve">
          <source>, with the equal sign but without &lt;var&gt;opts&lt;/var&gt;, is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1f38353679ab12cc97376ba65588d3f11963ec" translate="yes" xml:space="preserve">
          <source>, without regenerating the profiles. In these cases, the profile feedback data files do not contain any profile feedback information for the newly added function or file respectively. Also, in the case when profile count data (.gcda) files are removed, GCC cannot use any profile feedback information. In all these cases, warnings are issued to inform the user that a profile generation step is due.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a27dd7fbbb21792c986b2b6824d02997f4ba52" translate="yes" xml:space="preserve">
          <source>, you cannot successfully use &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ef02ca85f6b31d2291f491abea6f9361c6b954" translate="yes" xml:space="preserve">
          <source>, you may define macros such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a514e8bd0a877b0e43d2a6e4382e7592decbff8f" translate="yes" xml:space="preserve">
          <source>, you must write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d27805c306f9f2234b2f442e2c3ae50e7f6b738" translate="yes" xml:space="preserve">
          <source>, you should compile all source code with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d8dc37d34101f1c1384f1753d981d4a4b19c09" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;div&lt;/code&gt; and &lt;code&gt;ddiv&lt;/code&gt; do not always produce the correct result if one of the operands is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e45c9b5be01af93079947067a03297d9a5481bf" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;dmultu&lt;/code&gt; does not always produce the correct result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d877a0732ecb70d1b0d29bb8a8ac0cbdc46350" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;ll&lt;/code&gt;/&lt;code&gt;sc&lt;/code&gt; sequences may not behave atomically on revisions prior to 3.0. They may deadlock on revisions 2.6 and earlier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7a5e7633b9a3ecd053316c95969628f0544ee8" translate="yes" xml:space="preserve">
          <source>- A double-word or a variable shift may give an incorrect result if executed immediately after starting an integer division.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f449d4a2d00742e6bf85e117d9a7f43dbe3ac3" translate="yes" xml:space="preserve">
          <source>- A double-word or a variable shift may give an incorrect result if executed while an integer multiplication is in progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b5a028a0a61d0deef86c72ae21ad424fb6e2b5" translate="yes" xml:space="preserve">
          <source>- An integer division may give an incorrect result if started in a delay slot of a taken branch or a jump.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f936f979fbda07460d599549f1df49a28fec083" translate="yes" xml:space="preserve">
          <source>- C and C++ constructors/destructors called during startup/shutdown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d917511b7e91146ed81c5690753d05a01acc4a7f" translate="yes" xml:space="preserve">
          <source>- Computed goto.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d12a6b873acc6a7dc115ab6c3ad7b78003c597b" translate="yes" xml:space="preserve">
          <source>- If prologue-save function is used, see</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f404d504a2d046d8eb074ad64c1ff4564f204db6" translate="yes" xml:space="preserve">
          <source>- If the tools hit a &lt;code&gt;gs()&lt;/code&gt; modifier explained above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8544c24c038210d50588d230bbce1287f212a4a7" translate="yes" xml:space="preserve">
          <source>- Switch/case dispatch tables. If you do not want such dispatch tables you can specify the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c2c384d1ba94948e8054a096aa485c0fc12ae5" translate="yes" xml:space="preserve">
          <source>- Taking address of a function or code label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7148d1a6b1975ea9d5965578463516097e7671d" translate="yes" xml:space="preserve">
          <source>- The address of a label is taken by means of the &lt;code&gt;gs&lt;/code&gt; modifier (short for &lt;em&gt;generate stubs&lt;/em&gt;) like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b71f67f8e45a2a107c7b5baf13d693803269da" translate="yes" xml:space="preserve">
          <source>- The final location of that label is in a code segment &lt;em&gt;outside&lt;/em&gt; the segment where the stubs are located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d63ce6052f4c54b84829f0b7d6e03edecb61ff" translate="yes" xml:space="preserve">
          <source>--coverage</source>
          <target state="translated">--coverage</target>
        </trans-unit>
        <trans-unit id="dfd9358562e69140980df6448abfc0be3f647ed5" translate="yes" xml:space="preserve">
          <source>--eh-frame-hdr</source>
          <target state="translated">--eh-frame-hdr</target>
        </trans-unit>
        <trans-unit id="a0a2fefd37a87ad5d2972a5d58e4ea49ca4f3287" translate="yes" xml:space="preserve">
          <source>--enable-auto-import</source>
          <target state="translated">--enable-auto-import</target>
        </trans-unit>
        <trans-unit id="19ec31a0c9370e4ca1653c6162cf9b8a97cdc3b1" translate="yes" xml:space="preserve">
          <source>--enable-cld</source>
          <target state="translated">--enable-cld</target>
        </trans-unit>
        <trans-unit id="45d75f7f8e031e18a19b4310578eef230b726c86" translate="yes" xml:space="preserve">
          <source>--enable-secureplt</source>
          <target state="translated">--enable-secureplt</target>
        </trans-unit>
        <trans-unit id="b4e2ad8851d273611b45f3eaa2ac10287c874b49" translate="yes" xml:space="preserve">
          <source>--export-all</source>
          <target state="translated">--export-all</target>
        </trans-unit>
        <trans-unit id="b9e9f25c1c659f705184cc8a6309a762e9c03bc8" translate="yes" xml:space="preserve">
          <source>--gc-sections</source>
          <target state="translated">--gc-sections</target>
        </trans-unit>
        <trans-unit id="9a8265a5ba2c33881e2717e7581df323a5188174" translate="yes" xml:space="preserve">
          <source>--help</source>
          <target state="translated">--help</target>
        </trans-unit>
        <trans-unit id="88d3346c36ef09ed6fcd3041d7c7328e66a82c3d" translate="yes" xml:space="preserve">
          <source>--help=</source>
          <target state="translated">--help=</target>
        </trans-unit>
        <trans-unit id="83e48cc5863539edea576aba905cb078520ec230" translate="yes" xml:space="preserve">
          <source>--help=param -Q</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142fdbe422fca8e1f0ae90e0fded107cf3324105" translate="yes" xml:space="preserve">
          <source>--help=target</source>
          <target state="translated">--help=target</target>
        </trans-unit>
        <trans-unit id="f4b42adb9ab9af50964868976f43d9f709933d73" translate="yes" xml:space="preserve">
          <source>--json-format</source>
          <target state="translated">--json-format</target>
        </trans-unit>
        <trans-unit id="7ee16625a2f5c7c7f5e47fea7979ac8403afdfad" translate="yes" xml:space="preserve">
          <source>--mlink-relax</source>
          <target state="translated">--mlink-relax</target>
        </trans-unit>
        <trans-unit id="c39e62a5d2c5adeeb352ed945b13bb7e7648c763" translate="yes" xml:space="preserve">
          <source>--param</source>
          <target state="translated">--param</target>
        </trans-unit>
        <trans-unit id="a016b2a12b436dad6a4936a8b629b5250cf51ab2" translate="yes" xml:space="preserve">
          <source>--param &lt;var&gt;name&lt;/var&gt;=&lt;var&gt;value&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f053c2b9af56f4f6906583b62e669a5032f9c48" translate="yes" xml:space="preserve">
          <source>--param asan-globals=0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046d1ab314aca2f65f8567874fe4552e8783d6c2" translate="yes" xml:space="preserve">
          <source>--param asan-instrument-reads=0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e97d7ea0a0d892c251b0b7c4fe2f043e62e2970" translate="yes" xml:space="preserve">
          <source>--param asan-instrument-writes=0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad1600c2aab619b0afbc4bed8fa363a8a811bd2" translate="yes" xml:space="preserve">
          <source>--param asan-instrumentation-with-call-threshold=0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5802988b85eab2d413194fa277ff796a934b235b" translate="yes" xml:space="preserve">
          <source>--param asan-memintrin=0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a85fa50efbf436bcb5274b389e28cd4ffa16e8f6" translate="yes" xml:space="preserve">
          <source>--param asan-stack=0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3920aceaa4d0c4dbb9588dedd47f103a9721fd30" translate="yes" xml:space="preserve">
          <source>--param asan-use-after-return=0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8104705ceeecd8dca5c855b23c02129d03fd3aa" translate="yes" xml:space="preserve">
          <source>--param hsa-gen-debug-stores=1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b19ff06086c5a2903176b02fdbced7b43f5cec1" translate="yes" xml:space="preserve">
          <source>--param inline-unit-growth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac078b12b033a45803b6b1ea17aa4781ed84483" translate="yes" xml:space="preserve">
          <source>--param ipcp-unit-growth=&lt;var&gt;value&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af4ac3074fc1a44dab1c358abd5d1228d27f563" translate="yes" xml:space="preserve">
          <source>--param large-function-growth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534f801afcf7bc7c50134ff6ca99009838d8d944" translate="yes" xml:space="preserve">
          <source>--param large-unit-insns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="915ddae1eb68b21bdc842f115e64d429b3a14b72" translate="yes" xml:space="preserve">
          <source>--param max-inline-insns-auto</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a19e51c5b5d56bc48d8a8f9a2089239ebe6236a" translate="yes" xml:space="preserve">
          <source>--param max-inline-insns-recursive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9361003e3d8e46181c22efb4985b02854d7dc435" translate="yes" xml:space="preserve">
          <source>--param max-inline-insns-recursive-auto</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e4e737c314e908bf52516ae5bf889ce65ae668" translate="yes" xml:space="preserve">
          <source>--param max-inline-insns-single</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57cb16654bf412f81b669b2d34821dd4ba8b7030" translate="yes" xml:space="preserve">
          <source>--param max-inline-recursive-depth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6a76bb4d81a18fea0e7297c5fd8760d647efe2" translate="yes" xml:space="preserve">
          <source>--param max-inline-recursive-depth-auto</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ba2dbdecea126c7e23c04d6ac886321cc7733c" translate="yes" xml:space="preserve">
          <source>--param uninlined-function-insns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17eda58b27eb24c794dbf2670f811bb35cf8bb9b" translate="yes" xml:space="preserve">
          <source>--param uninlined-function-time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113c521d2174c60ad8429bab21a4d69ce45c9a47" translate="yes" xml:space="preserve">
          <source>--relax</source>
          <target state="translated">--relax</target>
        </trans-unit>
        <trans-unit id="f7c1ba277b846444ae3bd4ca793dbb934e79fdf7" translate="yes" xml:space="preserve">
          <source>--script</source>
          <target state="translated">--script</target>
        </trans-unit>
        <trans-unit id="a5ede7e0c2ae6c6fcf84131f816c957863ebd19e" translate="yes" xml:space="preserve">
          <source>--sysroot</source>
          <target state="translated">--sysroot</target>
        </trans-unit>
        <trans-unit id="03871aeb9fd58907b7f973a64c5639cb4e7185ee" translate="yes" xml:space="preserve">
          <source>--target-help</source>
          <target state="translated">--target-help</target>
        </trans-unit>
        <trans-unit id="0f1594e7e448c852207a80bcddef0a2c01be7c40" translate="yes" xml:space="preserve">
          <source>--with-avrlibc</source>
          <target state="translated">--with-avrlibc</target>
        </trans-unit>
        <trans-unit id="ce9b1aff97fde9fd43d3f25318e7f2c14d645d1a" translate="yes" xml:space="preserve">
          <source>--with-cpu=arc700</source>
          <target state="translated">--with-cpu=arc700</target>
        </trans-unit>
        <trans-unit id="43e7f9aa9f26e4a2140d9c389827315bea74b448" translate="yes" xml:space="preserve">
          <source>--with-divide=breaks</source>
          <target state="translated">--with-divide=breaks</target>
        </trans-unit>
        <trans-unit id="7f443db828f8e3d777f4a1b60d95db10836b91e6" translate="yes" xml:space="preserve">
          <source>--with-isl</source>
          <target state="translated">--with-isl</target>
        </trans-unit>
        <trans-unit id="fc41d3ef057a00c64ae7cfb6d19252d3b367b2b9" translate="yes" xml:space="preserve">
          <source>--with-ld</source>
          <target state="translated">--with-ld</target>
        </trans-unit>
        <trans-unit id="24da4df978f0b486d9ec64db5c1fe252e850e793" translate="yes" xml:space="preserve">
          <source>--with-llsc</source>
          <target state="translated">--with-llsc</target>
        </trans-unit>
        <trans-unit id="1182831e20ca3f6e430a11ff6d48f902300343ce" translate="yes" xml:space="preserve">
          <source>--with-mips-plt</source>
          <target state="translated">--with-mips-plt</target>
        </trans-unit>
        <trans-unit id="a4590555ef66878c596cf76dc3d4c90c6be76b04" translate="yes" xml:space="preserve">
          <source>--with-mode=</source>
          <target state="translated">--with-mode=</target>
        </trans-unit>
        <trans-unit id="b2fa43af3d4a14a383fec6e2351ddb4e36831862" translate="yes" xml:space="preserve">
          <source>--with-nan=2008</source>
          <target state="translated">--with-nan=2008</target>
        </trans-unit>
        <trans-unit id="4fe96070a351e01e2af2b6f7d024cdf8a1c61bd9" translate="yes" xml:space="preserve">
          <source>--with-stack-offset=&lt;var&gt;num&lt;/var&gt;</source>
          <target state="translated">--with-stack-offset=&lt;var&gt;num&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="e3ffd80c526299889fd686be4f265343646380d2" translate="yes" xml:space="preserve">
          <source>--with-synci</source>
          <target state="translated">--with-synci</target>
        </trans-unit>
        <trans-unit id="e5d3f84c56bdf1f37e55e0e34007337c1b87dd64" translate="yes" xml:space="preserve">
          <source>--without-llsc</source>
          <target state="translated">--without-llsc</target>
        </trans-unit>
        <trans-unit id="72f9a64e69c07f336c27b858328ddec628bce662" translate="yes" xml:space="preserve">
          <source>-128 &amp;hellip; 127</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c5556471c9c41b7ed8d4466077fcfe0f771ce6" translate="yes" xml:space="preserve">
          <source>-16 &amp;hellip; -1 or 1 &amp;hellip; 16</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33f307ec56ac23f4e4b4cd23eca5268e342d56c" translate="yes" xml:space="preserve">
          <source>-32 &amp;hellip; -1 or 1 &amp;hellip; 32</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062ce7901f883b6a36571195d14fb1488ff09f89" translate="yes" xml:space="preserve">
          <source>-32768 &amp;hellip; 32767</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ceb2ac9236a010c304bc55d35af577b401a0019" translate="yes" xml:space="preserve">
          <source>-65536 &amp;hellip; -1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00eb96584e50e203a95b3cbcd93bc48c817a99ec" translate="yes" xml:space="preserve">
          <source>-8 &amp;hellip; -1 or 1 &amp;hellip; 8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f0f7286a983e45fbfd1fff997afcee609f2333" translate="yes" xml:space="preserve">
          <source>-8 &amp;hellip; 7</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ed27503e75a7fd173b61c00239456e00cdb29a" translate="yes" xml:space="preserve">
          <source>-&lt;var&gt;option&lt;/var&gt;</source>
          <target state="translated">-&lt;var&gt;option&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="bd6bd9306c20157668da23673684c32891f58798" translate="yes" xml:space="preserve">
          <source>-&lt;var&gt;options&lt;/var&gt;</source>
          <target state="translated">-&lt;var&gt;options&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="2a0d6e4753e404846b3da72d44a72c18a4eee19e" translate="yes" xml:space="preserve">
          <source>-A &lt;var&gt;predicate&lt;/var&gt;(&lt;var&gt;answer&lt;/var&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07015ed8e6ee6c7fcd387da7930e1833c2e01479" translate="yes" xml:space="preserve">
          <source>-B</source>
          <target state="translated">-B</target>
        </trans-unit>
        <trans-unit id="987830b431e9134788ba712f6d0c48ea63e3891a" translate="yes" xml:space="preserve">
          <source>-Bfoo/</source>
          <target state="translated">-Bfoo/</target>
        </trans-unit>
        <trans-unit id="ee7e59e9e3033b6eb4d3599f36b9eb1d9d8f8078" translate="yes" xml:space="preserve">
          <source>-C</source>
          <target state="translated">-C</target>
        </trans-unit>
        <trans-unit id="ef7ee7cfb43b9008958829efd8d64b7848e321ab" translate="yes" xml:space="preserve">
          <source>-CC</source>
          <target state="translated">-CC</target>
        </trans-unit>
        <trans-unit id="ad9aee0e02aa7df5696f88c33c3f5b0003d54711" translate="yes" xml:space="preserve">
          <source>-D</source>
          <target state="translated">-D</target>
        </trans-unit>
        <trans-unit id="2047ccb3e8e0a61bccca0248688e755cb3f236c4" translate="yes" xml:space="preserve">
          <source>-D'&lt;var&gt;name&lt;/var&gt;(&lt;var&gt;args&amp;hellip;&lt;/var&gt;)=&lt;var&gt;definition&lt;/var&gt;'</source>
          <target state="translated">-D'&lt;var&gt;name&lt;/var&gt;(&lt;var&gt;args&amp;hellip;&lt;/var&gt;)=&lt;var&gt;definition&lt;/var&gt;'</target>
        </trans-unit>
        <trans-unit id="262528920a804b8fb5e7b87c7c093b02463ba1cd" translate="yes" xml:space="preserve">
          <source>-D_MT</source>
          <target state="translated">-D_MT</target>
        </trans-unit>
        <trans-unit id="ff8015eb2b1855f53bb4336bf8d4411ac6c84c5b" translate="yes" xml:space="preserve">
          <source>-E</source>
          <target state="translated">-E</target>
        </trans-unit>
        <trans-unit id="ccdf319fc9b8ab52413c4b1c6ce664c414d5cf27" translate="yes" xml:space="preserve">
          <source>-F</source>
          <target state="translated">-F</target>
        </trans-unit>
        <trans-unit id="1b2ad08f13af60d02a993673ad6cf8e4e6ac9e81" translate="yes" xml:space="preserve">
          <source>-G</source>
          <target state="translated">-G</target>
        </trans-unit>
        <trans-unit id="62f512c8380c514e868d4031e89e0f8d880a99c6" translate="yes" xml:space="preserve">
          <source>-G &lt;var&gt;num&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e3d2cf8ea0d633536dbd3e2533af100b37d5e7" translate="yes" xml:space="preserve">
          <source>-G0</source>
          <target state="translated">-G0</target>
        </trans-unit>
        <trans-unit id="f71e105f8a133b9bda2f781740d497e34f38d669" translate="yes" xml:space="preserve">
          <source>-I</source>
          <target state="translated">-I</target>
        </trans-unit>
        <trans-unit id="9b83cd11508a2476b5a96c6035b9a6d7d73f1bc7" translate="yes" xml:space="preserve">
          <source>-I-</source>
          <target state="translated">-I-</target>
        </trans-unit>
        <trans-unit id="9ea6fab88b8bd0f497a7d564844eba74cf1296b9" translate="yes" xml:space="preserve">
          <source>-I.-I/special/include</source>
          <target state="translated">-I.-I/special/include</target>
        </trans-unit>
        <trans-unit id="c20a39eb3af4897aa4dea2bd9a1ba1a16fa16352" translate="yes" xml:space="preserve">
          <source>-L</source>
          <target state="translated">-L</target>
        </trans-unit>
        <trans-unit id="a865f5c84febf7bb127859a28c7f9921091e23e9" translate="yes" xml:space="preserve">
          <source>-M</source>
          <target state="translated">-M</target>
        </trans-unit>
        <trans-unit id="766dfebbd99ff335150e93696f0b424fd8c884b0" translate="yes" xml:space="preserve">
          <source>-M -MF &lt;var&gt;file&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca5f6d54e9f48e990f7a171ec03e9e3fb86dc230" translate="yes" xml:space="preserve">
          <source>-MD</source>
          <target state="translated">-MD</target>
        </trans-unit>
        <trans-unit id="0c6eb383fb3a09b37160c5897c59b00a3fd4c667" translate="yes" xml:space="preserve">
          <source>-MF</source>
          <target state="translated">-MF</target>
        </trans-unit>
        <trans-unit id="a1ac59d9d86036b584dd02c67da6433d94b6b0f8" translate="yes" xml:space="preserve">
          <source>-MG</source>
          <target state="translated">-MG</target>
        </trans-unit>
        <trans-unit id="8810841d9136e2ca78adcc2ef8fd22d1eec3b60d" translate="yes" xml:space="preserve">
          <source>-MM</source>
          <target state="translated">-MM</target>
        </trans-unit>
        <trans-unit id="ac72c219f25f02f5d3d4ba7f54c6fa61185a2d4f" translate="yes" xml:space="preserve">
          <source>-MMD</source>
          <target state="translated">-MMD</target>
        </trans-unit>
        <trans-unit id="44589fb1200176e2d38b10e3ce3a48fbb5d2da13" translate="yes" xml:space="preserve">
          <source>-MQ</source>
          <target state="translated">-MQ</target>
        </trans-unit>
        <trans-unit id="49af70a99559eb861cc6d4a1f4b6ab5846f595da" translate="yes" xml:space="preserve">
          <source>-MT</source>
          <target state="translated">-MT</target>
        </trans-unit>
        <trans-unit id="6fbdbbd677a18274726c99020f0c77540e6fc0b6" translate="yes" xml:space="preserve">
          <source>-Map output.map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baef33bc876a687b961751394c8f81f05f3e79c2" translate="yes" xml:space="preserve">
          <source>-O</source>
          <target state="translated">-O</target>
        </trans-unit>
        <trans-unit id="28001261ce59788011325a3412244c444a2a24a2" translate="yes" xml:space="preserve">
          <source>-O0</source>
          <target state="translated">-O0</target>
        </trans-unit>
        <trans-unit id="3a2ea76ea5223ba5c06c330d567a466f18648faf" translate="yes" xml:space="preserve">
          <source>-O1</source>
          <target state="translated">-O1</target>
        </trans-unit>
        <trans-unit id="de7f63e37a3bbff37b896a3d357f24b36e7159e1" translate="yes" xml:space="preserve">
          <source>-O2</source>
          <target state="translated">-O2</target>
        </trans-unit>
        <trans-unit id="41db216f1b5121805a5bb23bb3b564099b2c7fec" translate="yes" xml:space="preserve">
          <source>-O3</source>
          <target state="translated">-O3</target>
        </trans-unit>
        <trans-unit id="16fca30851efb6bbe0fbe6acc177926861ea29f4" translate="yes" xml:space="preserve">
          <source>-Ofast</source>
          <target state="translated">-Ofast</target>
        </trans-unit>
        <trans-unit id="adea5820536ffc0a9b797d47ab6d3adf9d9ed815" translate="yes" xml:space="preserve">
          <source>-Og</source>
          <target state="translated">-Og</target>
        </trans-unit>
        <trans-unit id="0559338fd0e1684606077707239d6bae957b3bb3" translate="yes" xml:space="preserve">
          <source>-Os</source>
          <target state="translated">-Os</target>
        </trans-unit>
        <trans-unit id="5bb32e12d567b52d9769dd6d1b502cbafaf5b407" translate="yes" xml:space="preserve">
          <source>-P</source>
          <target state="translated">-P</target>
        </trans-unit>
        <trans-unit id="6422eedc12255e6b5d4e04ab2b26ee196c74c4c7" translate="yes" xml:space="preserve">
          <source>-Q</source>
          <target state="translated">-Q</target>
        </trans-unit>
        <trans-unit id="4710db6d0ebf661a7c7bc7c7c770a03430609ef3" translate="yes" xml:space="preserve">
          <source>-Q --help=optimizers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e0eab9f94000d4317af98881d10968930b431a1" translate="yes" xml:space="preserve">
          <source>-S</source>
          <target state="translated">-S</target>
        </trans-unit>
        <trans-unit id="332ec780f224383a9f30f4660fe42ecd1206e248" translate="yes" xml:space="preserve">
          <source>-T</source>
          <target state="translated">-T</target>
        </trans-unit>
        <trans-unit id="444a425ff4c74a2fbb3eec1cff25a92779a43296" translate="yes" xml:space="preserve">
          <source>-U</source>
          <target state="translated">-U</target>
        </trans-unit>
        <trans-unit id="561dfc356741ed4dc2784b39dba88c011c483888" translate="yes" xml:space="preserve">
          <source>-W</source>
          <target state="translated">-W</target>
        </trans-unit>
        <trans-unit id="f1db1304ad8ec2215aa07b2c6516c04dc1215726" translate="yes" xml:space="preserve">
          <source>-W&amp;hellip;</source>
          <target state="translated">-W&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="89e2891e8f37be83f9c4bbc3ad937b765c7867d7" translate="yes" xml:space="preserve">
          <source>-Wa</source>
          <target state="translated">-Wa</target>
        </trans-unit>
        <trans-unit id="78e4eeec44c73c0709f08dfe65f2539018eeb610" translate="yes" xml:space="preserve">
          <source>-Wabi</source>
          <target state="translated">-Wabi</target>
        </trans-unit>
        <trans-unit id="d58ff6fc53401d8eda6a61783ff443c03944ecdf" translate="yes" xml:space="preserve">
          <source>-Wabi-tag</source>
          <target state="translated">-Wabi-tag</target>
        </trans-unit>
        <trans-unit id="14c081a12c248967ddd5ccb1d2a8308ff6b812d8" translate="yes" xml:space="preserve">
          <source>-Wabi=2</source>
          <target state="translated">-Wabi=2</target>
        </trans-unit>
        <trans-unit id="cb87f86c75f94fb00e8f95b218c0027c524468e9" translate="yes" xml:space="preserve">
          <source>-Wabi=&lt;var&gt;n&lt;/var&gt;</source>
          <target state="translated">-Wabi=&lt;var&gt;n&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="12bc07aa073e0cde04567bf4f2d0123be6273b70" translate="yes" xml:space="preserve">
          <source>-Waligned-new=all</source>
          <target state="translated">-Waligned-new=all</target>
        </trans-unit>
        <trans-unit id="b6b6e46e1b3d43237d6e550d71cf4cf2b90c3a8a" translate="yes" xml:space="preserve">
          <source>-Wall</source>
          <target state="translated">-Wall</target>
        </trans-unit>
        <trans-unit id="8a1df80bae0bb2af66d8760bcc6aca7540345ff0" translate="yes" xml:space="preserve">
          <source>-Walloc-size-larger-than=</source>
          <target state="translated">-Walloc-size-larger-than=</target>
        </trans-unit>
        <trans-unit id="70b896f5f10e7a03de8e140d1d0164ee9a5116b9" translate="yes" xml:space="preserve">
          <source>-Walloca-larger-than</source>
          <target state="translated">-Walloca-larger-than</target>
        </trans-unit>
        <trans-unit id="2860f925943af1afcf90db4872877134ce06c7d8" translate="yes" xml:space="preserve">
          <source>-Walloca-larger-than=</source>
          <target state="translated">-Walloca-larger-than=</target>
        </trans-unit>
        <trans-unit id="203ef4e344ed1a739410037a96a4f5884e3ad233" translate="yes" xml:space="preserve">
          <source>-Walloca-larger-than=&lt;var&gt;byte-size&lt;/var&gt;</source>
          <target state="translated">-Walloca-larger-than=&lt;var&gt;byte-size&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="ecf85114b7f201d851b51f913e4be7748b3daf38" translate="yes" xml:space="preserve">
          <source>-Warray-bounds</source>
          <target state="translated">-Warray-bounds</target>
        </trans-unit>
        <trans-unit id="02eb1999df7f54d17603e0c053b76e8646947ef9" translate="yes" xml:space="preserve">
          <source>-Wattribute-alias</source>
          <target state="translated">-Wattribute-alias</target>
        </trans-unit>
        <trans-unit id="9765196f48ad96fec0d363f505ef6647f8de704a" translate="yes" xml:space="preserve">
          <source>-Wattribute-alias=0</source>
          <target state="translated">-Wattribute-alias=0</target>
        </trans-unit>
        <trans-unit id="5262f3c705c4c2a054e60db092066d5efc924685" translate="yes" xml:space="preserve">
          <source>-Wattribute-alias=1</source>
          <target state="translated">-Wattribute-alias=1</target>
        </trans-unit>
        <trans-unit id="dd676c93fb4ef29b129c7d4a0691ad65153e5461" translate="yes" xml:space="preserve">
          <source>-Wattribute-alias=2</source>
          <target state="translated">-Wattribute-alias=2</target>
        </trans-unit>
        <trans-unit id="249e9d32bb64eaa64fa45f88c041339894c5afa7" translate="yes" xml:space="preserve">
          <source>-Wattributes</source>
          <target state="translated">-Wattributes</target>
        </trans-unit>
        <trans-unit id="0565c965bfa6e13bd545739e5b8cedad7f28b624" translate="yes" xml:space="preserve">
          <source>-Wc++-compat</source>
          <target state="translated">-Wc++-compat</target>
        </trans-unit>
        <trans-unit id="cf32a3ff936d346c50f3d6e060af97d91bc935c4" translate="yes" xml:space="preserve">
          <source>-Wc++11-compat</source>
          <target state="translated">-Wc++11-compat</target>
        </trans-unit>
        <trans-unit id="09f352680749e550bb3a5012c7b09d7cc7c718b0" translate="yes" xml:space="preserve">
          <source>-Wc++17-compat</source>
          <target state="translated">-Wc++17-compat</target>
        </trans-unit>
        <trans-unit id="c6f069075c8d3297a054cce44dcb77db6345da27" translate="yes" xml:space="preserve">
          <source>-Wcatch-value</source>
          <target state="translated">-Wcatch-value</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
