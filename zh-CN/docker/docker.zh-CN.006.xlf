<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="docker">
    <body>
      <group id="docker">
        <trans-unit id="3ed9e437df4b5f70ed060a9226724b17fbf56472" translate="yes" xml:space="preserve">
          <source>Proxy configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44dfd9c9f63fa10c71579f5a99d6e4d44ae7423" translate="yes" xml:space="preserve">
          <source>Proxy received signals to the process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3892aebf769ad618aef6b39029be6941f490bb07" translate="yes" xml:space="preserve">
          <source>Proxy servers can block connections to your web app once it&amp;rsquo;s up and running. If you are behind a proxy server, add the following lines to your Dockerfile, using the &lt;code&gt;ENV&lt;/code&gt; command to specify the host and port for your proxy servers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="658d1f8b6e5741eaf7df3e0602fcc05f68465377" translate="yes" xml:space="preserve">
          <source>Prune containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d31df5bba7eb62db56409b2dd90a5063a93656" translate="yes" xml:space="preserve">
          <source>Prune services that are no longer referenced</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5d30ca0eaa958aba8d17404991acbc258767c1" translate="yes" xml:space="preserve">
          <source>Prune volumes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58cd7cc4094c37ba341c7ee7ac749b4f530b1969" translate="yes" xml:space="preserve">
          <source>Publish a container&amp;rsquo;s port(s) to the host</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c230fa04eb03dcadb508785f5287c1a0f69182c0" translate="yes" xml:space="preserve">
          <source>Publish a port as a node port</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b78bbc7c627ad3f4dcae62b51e4e5ab1e9131cac" translate="yes" xml:space="preserve">
          <source>Publish a port for TCP only or UDP only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f2307414ceae703ed0a31b19ff45f846ddf0d3" translate="yes" xml:space="preserve">
          <source>Publish a port for a service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff21f905dad8510627ec4d62ceac41a50eed3b1c" translate="yes" xml:space="preserve">
          <source>Publish a service&amp;rsquo;s ports directly on the swarm node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="effa541bb057c79fcb4c6e8c9383527721e9d6a8" translate="yes" xml:space="preserve">
          <source>Publish a service&amp;rsquo;s ports using the routing mesh</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a952bc4850f70ca1f97ae985fdb08a1dbcac36c1" translate="yes" xml:space="preserve">
          <source>Publish all exposed ports to random ports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2b9bec8a0f71b5d5981fe175dd78bc1fcccceb" translate="yes" xml:space="preserve">
          <source>Publish or expose port (-p, --expose)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf1827b7dc1bac2f7f634c84a2f8c2fdf621d13" translate="yes" xml:space="preserve">
          <source>Publish ports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcf1d6eb41534e65e453d846dca66393f15a947" translate="yes" xml:space="preserve">
          <source>Publish service ports externally to the swarm (-p, --publish)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26865da9828a3914090df49a54403e513597a339" translate="yes" xml:space="preserve">
          <source>Publish the image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4794ff82ee768cced1006542865e93f7c11d298" translate="yes" xml:space="preserve">
          <source>Publishers can choose to sign a specific tag or not. As a result, the content of an unsigned tag and that of a signed tag with the same name may not match. For example, a publisher can push a tagged image &lt;code&gt;someimage:latest&lt;/code&gt; and sign it. Later, the same publisher can push an unsigned &lt;code&gt;someimage:latest&lt;/code&gt; image. This second push replaces the last unsigned tag &lt;code&gt;latest&lt;/code&gt; but does not affect the signed &lt;code&gt;latest&lt;/code&gt; version. The ability to choose which tags they can sign, allows publishers to iterate over the unsigned version of an image before officially signing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7deafe45ac7c1b4452c948008b58834636c740" translate="yes" xml:space="preserve">
          <source>Publishing ports and linking to other containers only works with the default (bridge). The linking feature is a legacy feature. You should always prefer using Docker network drivers over linking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943422ca13c395e1e02393b2383581d9d059a6c8" translate="yes" xml:space="preserve">
          <source>Pull &lt;a href=&quot;../part2/index&quot;&gt;the image we uploaded in step 2&lt;/a&gt; from the registry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81dbc9b7ceb6b9ac6eb327e992e330dfcffc6f7f" translate="yes" xml:space="preserve">
          <source>Pull a repository with multiple images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d807caa9a86698a0d369c04da2776e468c93a6" translate="yes" xml:space="preserve">
          <source>Pull an image by digest (immutable identifier)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b6a7f20b70165a4aaa156331df07b8efa78073" translate="yes" xml:space="preserve">
          <source>Pull an image from Docker Hub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4880be4af6af86775d64666d9f0b742d09e382c1" translate="yes" xml:space="preserve">
          <source>Pull an image or a repository from a registry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9543e01f6bf8907a50eacdcceb2f6779d40a20e2" translate="yes" xml:space="preserve">
          <source>Pull and run the image from the remote repository</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb21eaf2a5a64dc89c0cb9b791dfc0654b86ebcd" translate="yes" xml:space="preserve">
          <source>Pull from a different registry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf0d04bf34b2eb18b9a4e0f3ececf2a0c4989be" translate="yes" xml:space="preserve">
          <source>Pull the image again. This downloads the image from the registry, because we don&amp;rsquo;t have it cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d045ce5db62b8707051ec4c1639ee5dc983ea492" translate="yes" xml:space="preserve">
          <source>Pull the test image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21ff7cdf04b49eb8907581f8f017e86d6b1ae1c5" translate="yes" xml:space="preserve">
          <source>Pulls an image associated with a service defined in a &lt;code&gt;docker-compose.yml&lt;/code&gt; or &lt;code&gt;docker-stack.yml&lt;/code&gt; file, but does not start containers based on those images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8244fb8336a4124338286ed65258e1f811a3dd0" translate="yes" xml:space="preserve">
          <source>Push a manifest list to a repository</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c8f9dd62b06e59df9d21bf552ae092a102705e" translate="yes" xml:space="preserve">
          <source>Push a new image to a registry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd016ebf3bb0c25c824471ed5309a8e7ed956752" translate="yes" xml:space="preserve">
          <source>Push a plugin to a registry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e10ec7485f1d94ab4a58a19055d800e9ed1f1f4" translate="yes" xml:space="preserve">
          <source>Push an image or a repository to a registry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a333658d3cdc7fd286ddc34138b5af432e164a9" translate="yes" xml:space="preserve">
          <source>Push and sign the trusted image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73c8b206da8eae8384c7fdc68613175d9221a0e" translate="yes" xml:space="preserve">
          <source>Push to an insecure registry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75676e0b9918884fbe54c5d3109d280176c2ba80" translate="yes" xml:space="preserve">
          <source>Pushes images for services to their respective &lt;code&gt;registry/repository&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a54a2cbdca4659b4a2d6500b9b9f05c00202e5" translate="yes" xml:space="preserve">
          <source>Pushing and pulling with image manifest v2 schema 1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceec675f41ce38d6e5daef2f6679aeb47e4bbbcf" translate="yes" xml:space="preserve">
          <source>Query the registry to resolve image digest and supported platforms (&amp;ldquo;always&amp;rdquo;|&amp;rdquo;changed&amp;rdquo;|&amp;rdquo;never&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47f055250bdee9ae22098bdfc1974fbbf88049c" translate="yes" xml:space="preserve">
          <source>Quick Profile Language</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c4f2a9dbc8fbaa20b2c0f344bd485109402749" translate="yes" xml:space="preserve">
          <source>Quickstart: Compose and Django</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9c77b951c41e7a3704d935932f20bca12b4205" translate="yes" xml:space="preserve">
          <source>Quickstart: Compose and Rails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8434d268e2d423c6ebd942dadaccfb3fa6f4b8ef" translate="yes" xml:space="preserve">
          <source>Quickstart: Compose and WordPress</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7817748c2e2501598be918d561189a746d1379" translate="yes" xml:space="preserve">
          <source>Quobyte Volume Plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025448779ef76dbb962f856f6e680b331638f021" translate="yes" xml:space="preserve">
          <source>Quota syscall which could let containers disable their own resource limits or process accounting. Also gated by &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a0748ea6327df1ea81bc713dbb4d3afd8c2ee5" translate="yes" xml:space="preserve">
          <source>Quoted command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85babb764d00a7cadb697ead156011ae20a8dbb2" translate="yes" xml:space="preserve">
          <source>REX-Ray plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad173e04d8ecca3dab1c425136333c79954a3f23" translate="yes" xml:space="preserve">
          <source>RUN</source>
          <target state="translated">RUN</target>
        </trans-unit>
        <trans-unit id="769be1b433ee771d47fdaa77fc06ec251655a253" translate="yes" xml:space="preserve">
          <source>RUN has 2 forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2637a04add25ca378ec74004768868e8b4d48576" translate="yes" xml:space="preserve">
          <source>Rackspace</source>
          <target state="translated">Rackspace</target>
        </trans-unit>
        <trans-unit id="0cd7d4ade6efb0732e6b09bfda5f0cda7d1e3498" translate="yes" xml:space="preserve">
          <source>Raft consensus in swarm mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d0d7b2f227ca5d159ecfc7b2ab5cdf2898ef54" translate="yes" xml:space="preserve">
          <source>Raft requires a majority of managers, also called the quorum, to agree on proposed updates to the swarm, such as node additions or removals. Membership operations are subject to the same constraints as state replication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad406d45d86eaa2efa0c9eb9a963ba6102184d4b" translate="yes" xml:space="preserve">
          <source>Raft tolerates up to &lt;code&gt;(N-1)/2&lt;/code&gt; failures and requires a majority or quorum of &lt;code&gt;(N/2)+1&lt;/code&gt; members to agree on values proposed to the cluster. This means that in a cluster of 5 Managers running Raft, if 3 nodes are unavailable, the system cannot process any more requests to schedule additional tasks. The existing tasks keep running but the scheduler cannot rebalance tasks to cope with failures if the manager set is not healthy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="279f0cd6a9f74fce0d0c5399146b03dc113fd038" translate="yes" xml:space="preserve">
          <source>Raise process nice value (nice(2), setpriority(2)) and change the nice value for arbitrary processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df41c14605ab026aa7d27d6780095ddcf00407d" translate="yes" xml:space="preserve">
          <source>RancherOS</source>
          <target state="translated">RancherOS</target>
        </trans-unit>
        <trans-unit id="03d241080696efcd4072c6bd10df5778acc251e6" translate="yes" xml:space="preserve">
          <source>Raw docker daemon response body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff4b0c771fd98c9c6a6a9788396e8b1d7eeae03" translate="yes" xml:space="preserve">
          <source>Raw request body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2091f6aa198027dba2dccd0bd6fd440c6318bc3" translate="yes" xml:space="preserve">
          <source>Re-join the node to the swarm with a fresh state using &lt;code&gt;docker swarm join&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc46734e43d31fc33c20944110c28d2b9e6f9ab" translate="yes" xml:space="preserve">
          <source>Re-run provisioning on a created machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c13ae3a89355ef33b394c7acab1c569f9e9d14" translate="yes" xml:space="preserve">
          <source>Re-run the &lt;code&gt;docker stack deploy&lt;/code&gt; command on the manager, and whatever services need updating are updated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b84dbd7a032b501b4112698a47a50bf7b63402" translate="yes" xml:space="preserve">
          <source>Read &lt;a href=&quot;https://docs.docker.com/network&quot;&gt;Get started with multi-host networking&lt;/a&gt; to see how to set up a Swarm cluster with &lt;a href=&quot;../../machine/overview/index&quot;&gt;Docker Machine&lt;/a&gt; and the overlay driver. Once you&amp;rsquo;ve got it running, deploying your app to it should be as simple as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="458f63a28dfb8f1ec7e9af33faa49e58810f0185" translate="yes" xml:space="preserve">
          <source>Read about how &lt;a href=&quot;../nodes/index&quot;&gt;nodes&lt;/a&gt; work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4777c9c801b12ea5a11813a5098c6b1347d319e" translate="yes" xml:space="preserve">
          <source>Read about how swarm mode &lt;a href=&quot;../nodes/index&quot;&gt;nodes&lt;/a&gt; work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64a1199818ac5eb0c5d36bf52dcaf4368abfe98" translate="yes" xml:space="preserve">
          <source>Read about how swarm mode &lt;a href=&quot;../services/index&quot;&gt;services&lt;/a&gt; work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e2e495a6f5f3718b601e270387abd07d05831c6" translate="yes" xml:space="preserve">
          <source>Read from tar archive file, instead of STDIN</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2806bebbeb9d91793a03b057b346c7c0f91f2ac1" translate="yes" xml:space="preserve">
          <source>Read in a file of environment variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0991692c79c99d268e8493316704d7fa8bc605e" translate="yes" xml:space="preserve">
          <source>Read in a line delimited file of labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f62dd09c5038275088f63e65f74c5b2e7486e3" translate="yes" xml:space="preserve">
          <source>Read more about &lt;code&gt;docker config&lt;/code&gt; commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386576b60948a57c96a31a74a486028c545ff387" translate="yes" xml:space="preserve">
          <source>Read more about &lt;code&gt;docker secret&lt;/code&gt; commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d24aea7136c86c51ba2da1f8285ab6b43b40bf3" translate="yes" xml:space="preserve">
          <source>Read more about the Compose/Swarm integration in the &lt;a href=&quot;../swarm/index&quot;&gt;integration guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035473811579fa89d8734edb6678647fb5d260b1" translate="yes" xml:space="preserve">
          <source>Read the &lt;a href=&quot;../index&quot;&gt;swarm mode overview&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80af7d94af7a7c998dc768cfe52749ce193625c0" translate="yes" xml:space="preserve">
          <source>Read the orientation in &lt;a href=&quot;../index&quot;&gt;Part 1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5bfa6a37fa62cab45c8815bf0b73f4067d9a99" translate="yes" xml:space="preserve">
          <source>Reboot the machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8f31e1ead73085c0b6766b23919f6ec7d234fd" translate="yes" xml:space="preserve">
          <source>Reboot your desktop system to clear out any routing table problems. Without a reboot first, &lt;code&gt;docker-machine create ...&lt;/code&gt; might get hung up on &lt;code&gt;Waiting for host to start...&lt;/code&gt;. If you are still hung on &amp;ldquo;Waiting for host to start...&amp;rdquo; after you reboot, make sure you selected the correct network in the Virtual Switch Manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9efd863ba6a6aa3b2b2b68fb4c65ed37200a23f2" translate="yes" xml:space="preserve">
          <source>Rebuild the application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e1b712e96e3ae0cedd42ba4f95247bdb3032cc" translate="yes" xml:space="preserve">
          <source>Recall the optional &lt;code&gt;COMMAND&lt;/code&gt; in the Docker commandline:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d5c2586f58eb00a260db2b2cb7dc18cd79282a" translate="yes" xml:space="preserve">
          <source>Recap (optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d326385a25ece9a041b9fdabff8b861475f9965a" translate="yes" xml:space="preserve">
          <source>Recap and cheat sheet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3715b4c2e1df856a36ed3c9325ec71071ae3585" translate="yes" xml:space="preserve">
          <source>Recap and cheat sheet (optional)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af9947e35bfbe8ad76d0be399a3e24e3fc7d033" translate="yes" xml:space="preserve">
          <source>Recommendations for deploying in production</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7841f9fe011ff88411107086c4d6033e879fea4" translate="yes" xml:space="preserve">
          <source>Recover from disaster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6f33f8cb618804196cd7ff6949042f8dee4fe7" translate="yes" xml:space="preserve">
          <source>Recover from losing the quorum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0dba450559ac1c461f0c047b8af49b7bb171d11" translate="yes" xml:space="preserve">
          <source>RedHat Enterprise Linux</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c71514df715b544847f6dbd629b3bd7a1c5f7b" translate="yes" xml:space="preserve">
          <source>Redis has an official image in the Docker library and has been granted the short &lt;code&gt;image&lt;/code&gt; name of just &lt;code&gt;redis&lt;/code&gt;, so no &lt;code&gt;username/repo&lt;/code&gt; notation here. The Redis port, 6379, has been pre-configured by Redis to be exposed from the container to the host, and here in our Compose file we expose it from the host to the world, so you can actually enter the IP for any of your nodes into Redis Desktop Manager and manage this Redis instance, if you so choose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3226c6525b976ec28d594d56ba0689f15aa5195" translate="yes" xml:space="preserve">
          <source>Redis service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c49c69a67584e687cfc202dd7ad0bf4cf0948c" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;../how-swarm-mode-works/nodes/index&quot;&gt;How nodes work&lt;/a&gt; for a brief overview of Docker Swarm mode and the difference between manager and worker nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db66e6f90b76d40c7c30d63223b245c21368c07d" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;https://docs.docker.com/v17.03/engine/tutorials/dockervolumes/#backup-restore-or-migrate-data-volumes&quot;&gt;Backup, restore, or migrate data volumes&lt;/a&gt; in the user guide for examples on exporting data in a volume.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b402a40f2335ac9c24021dba3b718c14e2a696f" translate="yes" xml:space="preserve">
          <source>Refer to &lt;a href=&quot;https://github.com/docker/docker/pull/17538&quot;&gt;#17538&lt;/a&gt; for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea417ef6026ae7a36757c16431506fa27092d42" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;a href=&quot;../../../reference/commandline/node_update/index&quot;&gt;&lt;code&gt;docker node update&lt;/code&gt;&lt;/a&gt; command line reference to see how to change node availability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14fad026e7f4e0a248c5a8dac9723099b0b0e8cf" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;a href=&quot;../../reference/commandline/dockerd/index#daemon-user-namespace-options&quot;&gt;daemon command&lt;/a&gt; in the command line reference for more information on this feature. Additional information on the implementation of User Namespaces in Docker can be found in &lt;a href=&quot;https://integratedcode.us/2015/10/13/user-namespaces-have-arrived-in-docker/&quot;&gt;this blog post&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9eeae5923ace62070364d3470a35a826ba3d8c0" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;a href=&quot;../tag/index&quot;&gt;&lt;code&gt;docker tag&lt;/code&gt;&lt;/a&gt; reference for more information about valid image and tag names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c7cc88967fb456195641694e16d22ccba0ac17" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;a href=&quot;http://man7.org/linux/man-pages/man7/signal.7.html&quot;&gt;&lt;code&gt;signal(7)&lt;/code&gt;&lt;/a&gt; man-page for a list of standard Linux signals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59153f5b058252a2a2f662c2430c33a4d57fc732" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;code&gt;docker service create&lt;/code&gt;&lt;a href=&quot;../../reference/commandline/service_create/index&quot;&gt;CLI reference&lt;/a&gt; for more information about service constraints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7185224a91d160a88b3d68854b9012c852a66a44" translate="yes" xml:space="preserve">
          <source>Refer to the &lt;code&gt;docker swarm init&lt;/code&gt;&lt;a href=&quot;../../reference/commandline/swarm_init/index&quot;&gt;CLI reference&lt;/a&gt; for more detail on the advertise address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7428f1a82cd60eb9d9362cc22078ec19f280b058" translate="yes" xml:space="preserve">
          <source>Refer to the following pages for more information:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f436ed61488f5482ea5578ceeeb3788fa91e6e" translate="yes" xml:space="preserve">
          <source>Reference and guidelines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1180bd9df6e7d679ebe74aba7b6e14798bece0" translate="yes" xml:space="preserve">
          <source>Refresh the app in your browser. The greeting should be updated, and the counter should still be incrementing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fadbfb12ae3657d300a87b0fefe383766298bba2" translate="yes" xml:space="preserve">
          <source>Refresh the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ea4a8c72b32724a97ae281af365c17d62b4c50" translate="yes" xml:space="preserve">
          <source>Regardless of the &lt;code&gt;EXPOSE&lt;/code&gt; settings, you can override them at runtime by using the &lt;code&gt;-p&lt;/code&gt; flag. For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2758b470994e8a4512f3a20b985837242a275d4" translate="yes" xml:space="preserve">
          <source>Regenerate TLS certificates and update the machine with new certs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f217179940c6d89f5cb2c7002a58d91ab7286c1" translate="yes" xml:space="preserve">
          <source>Region</source>
          <target state="translated">Region</target>
        </trans-unit>
        <trans-unit id="78256b8d79561cb42b9135c8011c5baa98de4e0d" translate="yes" xml:space="preserve">
          <source>Registry credentials are managed by &lt;a href=&quot;../login/index&quot;&gt;docker login&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806f9732c5716d8b64ffe488347994f044440d1a" translate="yes" xml:space="preserve">
          <source>Registry server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e52ae954ca645189c02dc323c526f89b4c3056f3" translate="yes" xml:space="preserve">
          <source>Reinstate your previous backup regimen on the new swarm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287931d9a743b8ddcc435292b76cffc099a67d37" translate="yes" xml:space="preserve">
          <source>Related Information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97b0faeb0aa223b01f7944075457b4fdb5c0b17" translate="yes" xml:space="preserve">
          <source>Related commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f08acc559b3522efc7db5dba837c335ae47d5270" translate="yes" xml:space="preserve">
          <source>Related information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8bb7f47276157f9f21680c42b16c199f33d4da" translate="yes" xml:space="preserve">
          <source>Related to the new automatic rollback feature, in Docker 17.04 and higher, manual rollback is handled at the server side, rather than the client, if the daemon is running Docker 17.04 or higher. This allows manually-initiated rollbacks to respect the new rollback parameters. The client is version-aware, so it still uses the old method against an older daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25bd7f41a5c48e7e2c7137f2f3a50030be0329ea" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5af7344f50420161f8f096f94794e6fe1580c6" translate="yes" xml:space="preserve">
          <source>Release notes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d16665d6b68334f13c474eff9db765ab141dfa" translate="yes" xml:space="preserve">
          <source>Remember you will have to remove the key from both the &lt;code&gt;targets/releases&lt;/code&gt; role and the role specific to that signer &lt;code&gt;targets/&amp;lt;name&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bab63bb0e826aaf2aceec83c46c95e7bbbbeebb" translate="yes" xml:space="preserve">
          <source>Remote Trust data for a tag can be removed by the &lt;code&gt;$ docker trust revoke&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8116b9b53de3ecc142f447c7eb236c04977937" translate="yes" xml:space="preserve">
          <source>Remote server example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca9705d05f0eb5c01338f2da4ce3a8da9378025" translate="yes" xml:space="preserve">
          <source>Remote trust data for a tag or a repository can be viewed by the &lt;code&gt;$ docker trust inspect&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373ec57b18fb882002ab1ab10c4fa4a156e742a9" translate="yes" xml:space="preserve">
          <source>Remote trust service example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2020a923f15c67727b33176401b6113e42b2498c" translate="yes" xml:space="preserve">
          <source>Remove a DNS option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1c3efbaf8fb57e16fef3057a35656252a17d82" translate="yes" xml:space="preserve">
          <source>Remove a DNS search domain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5691aabf80dbc190ec86dc8949a25942efcb648" translate="yes" xml:space="preserve">
          <source>Remove a Generic resource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2489fb35473f1054b3c7e66da18c47798e4f35f1" translate="yes" xml:space="preserve">
          <source>Remove a Sysctl option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1905ab63a0b59d8234dcc960b3707250d77c79ec" translate="yes" xml:space="preserve">
          <source>Remove a checkpoint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a510cea4c7856d22ac16effb927cc820ab4d44" translate="yes" xml:space="preserve">
          <source>Remove a configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e73b15207164015d01b022f997c5e03a808bce" translate="yes" xml:space="preserve">
          <source>Remove a constraint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3d6a92666ef34fa7751fb126424a63b109a81a" translate="yes" xml:space="preserve">
          <source>Remove a container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118fe180a97cc0f94beaf36658ba5d0b28a9fc44" translate="yes" xml:space="preserve">
          <source>Remove a container and its volumes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85bef3d12606429817445a16dcb36b5140ad7696" translate="yes" xml:space="preserve">
          <source>Remove a container and selectively remove volumes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ae70477ac22a7a85ea00b8281db830890f2ad5" translate="yes" xml:space="preserve">
          <source>Remove a container label by its key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1847600ca1e539c6db5c8ef7cfb97b2d247f1967" translate="yes" xml:space="preserve">
          <source>Remove a custom DNS server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b9ff6a73e9bde6a6181efaef404b4c21e27edb" translate="yes" xml:space="preserve">
          <source>Remove a custom host-to-IP mapping (host:ip)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee6ee61cc6230f9b752a617381dcab10fcfff10" translate="yes" xml:space="preserve">
          <source>Remove a label by its key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e661d140b7c5e4ad280a5cf3b39dec6674117cfe" translate="yes" xml:space="preserve">
          <source>Remove a link specified with &lt;code&gt;--link&lt;/code&gt; on the default bridge network</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2377c135f52631b376ba5efc5cf497f8197657f" translate="yes" xml:space="preserve">
          <source>Remove a machine. This removes the local reference and deletes it on the cloud provider or virtualization management platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f94543dbbd159a024dd3b183c4ee7713f5b7a1" translate="yes" xml:space="preserve">
          <source>Remove a mount by its target path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827cb4b65f258c7213d28c01a12177694e71ce91" translate="yes" xml:space="preserve">
          <source>Remove a network</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78739b262fb99309dab45d0c8633d5022870117" translate="yes" xml:space="preserve">
          <source>Remove a node label if exists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c5a408de51273dbd725e43ca2f4bccb67cd20e" translate="yes" xml:space="preserve">
          <source>Remove a placement preference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac0c399fbce214595a1ca55a1b0f0863c4c654c9" translate="yes" xml:space="preserve">
          <source>Remove a previously added supplementary user group from the container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06922cc1e80948d3699fe27598cd64f32ee066d4" translate="yes" xml:space="preserve">
          <source>Remove a published port by its target port</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde13720f07cf9db3758c15598bf223ccf88ef01" translate="yes" xml:space="preserve">
          <source>Remove a secret</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4586d6fd60335ea1ce0af6a55d8380f6f6ca5f" translate="yes" xml:space="preserve">
          <source>Remove a service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab55dc4e5ddd71a566bcd0fe47b09f86ee37cc9f" translate="yes" xml:space="preserve">
          <source>Remove a signer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a3d1ad7cdce35e472d2491173c644fcdd901097" translate="yes" xml:space="preserve">
          <source>Remove a stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc89059cd408f6bb5d74b3160b81502e50277f9e" translate="yes" xml:space="preserve">
          <source>Remove a stopped node from the swarm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="369fcf27e41c98204da2e11432afe134e6e8906d" translate="yes" xml:space="preserve">
          <source>Remove access to the config from the running &lt;code&gt;redis&lt;/code&gt; service by updating the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64f3290d6d4e2822386aca89f7484ffe828ea246" translate="yes" xml:space="preserve">
          <source>Remove access to the secret from the running &lt;code&gt;redis&lt;/code&gt; service by updating the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d988f40dbe8950f35ade12548b99d5960bf302e" translate="yes" xml:space="preserve">
          <source>Remove all dangling images. If &lt;code&gt;-a&lt;/code&gt; is specified, will also remove all images not referenced by any container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88255f02ae73563715e90db13b6311fca3066258" translate="yes" xml:space="preserve">
          <source>Remove all stopped containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01993ec5a213c9240ac20df72b744fd56f513d97" translate="yes" xml:space="preserve">
          <source>Remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e37a43b370fa4279ebcdb6e92ea3c2ed8aad75" translate="yes" xml:space="preserve">
          <source>Remove all unused images not just dangling ones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80a6e69c25c7508c4535fe5faa19a59cfc84085" translate="yes" xml:space="preserve">
          <source>Remove all unused images, not just dangling ones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d1668d473d7ed4472794329c96924112df8c19f" translate="yes" xml:space="preserve">
          <source>Remove all unused local volumes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa421448803dd2e35d30cba3db32f66ded3898e" translate="yes" xml:space="preserve">
          <source>Remove all unused local volumes. Unused local volumes are those which are not referenced by any containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b2fe966b0b3c63cc6de0afd6ec87cf64230079" translate="yes" xml:space="preserve">
          <source>Remove all unused networks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e4ce62008a2ceb087ae6527c0596da321bca53" translate="yes" xml:space="preserve">
          <source>Remove all unused networks. Unused networks are those which are not referenced by any containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e3e01e94ab97e4895596bb381c7692510f6d9d" translate="yes" xml:space="preserve">
          <source>Remove an environment variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9b861feeca1889f735a819726e1aaba928f739" translate="yes" xml:space="preserve">
          <source>Remove build cache</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ffb64c1896eb22547a7f98757e5fc282058b80" translate="yes" xml:space="preserve">
          <source>Remove intermediate containers after a successful build</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1665550bff0a134ff37e0881fe01ed82ac50be" translate="yes" xml:space="preserve">
          <source>Remove multiple networks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3715f801d85831aa4f06089e420e1ab244c381d" translate="yes" xml:space="preserve">
          <source>Remove multiple stacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f6b2554c4ee7986168fb107916115a661aece0" translate="yes" xml:space="preserve">
          <source>Remove one or more configs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a11f8e4677cc8f2c6ba39e46808f4dc1b696066" translate="yes" xml:space="preserve">
          <source>Remove one or more containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda145c174239591b0e982550bd9ac17764df355" translate="yes" xml:space="preserve">
          <source>Remove one or more contexts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ceeab1f625f4ecc52601e7c1bd44aca789623c1" translate="yes" xml:space="preserve">
          <source>Remove one or more images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566c8141be50587d66f4c50250074322feebd6df" translate="yes" xml:space="preserve">
          <source>Remove one or more networks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f893fd6e13b51147ddfdb283b02227cdbd2ca32f" translate="yes" xml:space="preserve">
          <source>Remove one or more nodes from the swarm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70e260c0f4767a78fdc1cf46f3597185159e644" translate="yes" xml:space="preserve">
          <source>Remove one or more plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69bc820b50d60687a72c057c1f10fd21b0abb8e" translate="yes" xml:space="preserve">
          <source>Remove one or more secrets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbccf90132ebfc4005ee40bea8a8276a86fcabc" translate="yes" xml:space="preserve">
          <source>Remove one or more services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db6b60c9214f1d2388fa5f31049213e905dd5e3b" translate="yes" xml:space="preserve">
          <source>Remove one or more stacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ed2a6f7890ff1f05fa4cf07aa04f7560af7ff3" translate="yes" xml:space="preserve">
          <source>Remove one or more volumes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f57bd79735a046949075fa5003aa75f29adf7b4" translate="yes" xml:space="preserve">
          <source>Remove one or more volumes. You cannot remove a volume that is in use by a container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed7c0e2ec2435f723ad79e7f522045da87dd43c8" translate="yes" xml:space="preserve">
          <source>Remove the &lt;code&gt;redis&lt;/code&gt; service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8912d3e58a52c012f3b4a0d41248fac19d32cb" translate="yes" xml:space="preserve">
          <source>Remove the &lt;code&gt;trusttest:latest&lt;/code&gt; image from our local cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3a4e49ec2d1ae367267acdcde290853660dc26" translate="yes" xml:space="preserve">
          <source>Remove the contents of the &lt;code&gt;/var/lib/docker/swarm&lt;/code&gt; directory on the new swarm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9712e16a6077686e084d947566ec4b3a185c29" translate="yes" xml:space="preserve">
          <source>Remove the executable: &lt;code&gt;rm $(which docker-machine)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b312f1aef1ecad1f57bd25107a3dce7862c6585b" translate="yes" xml:space="preserve">
          <source>Remove the local manifest list after push</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a83f49dba859600098d3aede71bbcd5bd3dc29f" translate="yes" xml:space="preserve">
          <source>Remove the old container before creating the new one. You lose any data in the volume.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baebe9fb49fc17f4567a6fc406d92f4e2494d7cf" translate="yes" xml:space="preserve">
          <source>Remove the service and the config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60904745fb609230e3071f3b5564a1695cbf15c9" translate="yes" xml:space="preserve">
          <source>Remove the service and the secret.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="760879ffd2bd6c21fc4e1efb80a603f405668507" translate="yes" xml:space="preserve">
          <source>Remove the specified link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d98b0c53b6a6a9b796d1032e269c7dd5530fd6" translate="yes" xml:space="preserve">
          <source>Remove the stack from the swarm. This command has to be run targeting a manager node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078dea24aa9689493c3c0674d17e1c6901415d9f" translate="yes" xml:space="preserve">
          <source>Remove the volume &lt;code&gt;sshvolume&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49b7016724bf1f8d1069309d0f7f4574c74f6e5a" translate="yes" xml:space="preserve">
          <source>Remove the volumes associated with the container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901079fe99872bd2d4e6bdb3c1dd2b95006eb9f9" translate="yes" xml:space="preserve">
          <source>Remove trust for an image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03fdadace3496ef7bfeac969d8a8807338ad1a15" translate="yes" xml:space="preserve">
          <source>Remove unused data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6fd2f84bc465be4265ef891ebac6b9fa6a714a5" translate="yes" xml:space="preserve">
          <source>Remove unused images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63eb4f4be668373dd672a311f2c819f45b9423ca" translate="yes" xml:space="preserve">
          <source>Removed: &lt;code&gt;volume_driver&lt;/code&gt;, &lt;code&gt;volumes_from&lt;/code&gt;, &lt;code&gt;cpu_shares&lt;/code&gt;, &lt;code&gt;cpu_quota&lt;/code&gt;, &lt;code&gt;cpuset&lt;/code&gt;, &lt;code&gt;mem_limit&lt;/code&gt;, &lt;code&gt;memswap_limit&lt;/code&gt;, &lt;code&gt;extends&lt;/code&gt;, &lt;code&gt;group_add&lt;/code&gt;. See the &lt;a href=&quot;#upgrading&quot;&gt;upgrading&lt;/a&gt; guide for how to migrate away from these. (For more information on &lt;code&gt;extends&lt;/code&gt;, see &lt;a href=&quot;../../extends/index#extending-services&quot;&gt;Extending services&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9cb897b81af3b32f66674278a58d8a1fc9c38b3" translate="yes" xml:space="preserve">
          <source>Removes (and un-tags) one or more images from the host node. If an image has multiple tags, using this command with the tag as a parameter only removes the tag. If the tag is the only one for the image, both the image and the tag are removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="541ef52d02f8d09fb2ac3513c4b8b4cf4606672b" translate="yes" xml:space="preserve">
          <source>Removes a machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb9fac7c6aaf791bb38062566c62cef701e25200" translate="yes" xml:space="preserve">
          <source>Removes a plugin. You cannot remove a plugin if it is enabled, you must disable a plugin using the &lt;a href=&quot;../plugin_disable/index&quot;&gt;&lt;code&gt;docker plugin disable&lt;/code&gt;&lt;/a&gt; before removing it (or use --force, use of force is not recommended, since it can affect functioning of running containers using the plugin).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbab8ab029d8a2e832de58f58453d61e4e6d6df2" translate="yes" xml:space="preserve">
          <source>Removes all stopped containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe2d9a7126e7efa1b89e390d547cc185c2787cf" translate="yes" xml:space="preserve">
          <source>Removes one or more networks by name or identifier. To remove a network, you must first disconnect any containers connected to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1bafa44e067970c07d6dea4056cbc6da9ef1ef4" translate="yes" xml:space="preserve">
          <source>Removes stopped service containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ac681d4a77bfebfa9ebea360e2cc8e146be8dc" translate="yes" xml:space="preserve">
          <source>Removes the specified nodes from the swarm, but only if the nodes are in the down state. If you attempt to remove an active node you will receive an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651996b92cd1d11a13908ea9d9579fae9a756781" translate="yes" xml:space="preserve">
          <source>Removes the specified secrets from the swarm. This command has to be run targeting a manager node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06d4b31e8638b5df1297183fe6558269befd817" translate="yes" xml:space="preserve">
          <source>Removes the specified services from the swarm. This command has to be run targeting a manager node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed41d7ad919e1dae962e3cc279a6db270025add" translate="yes" xml:space="preserve">
          <source>Removing a Contributor&amp;rsquo;s Key from a Delegation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786c7b0484369f6ef362b031e3a827caa574344e" translate="yes" xml:space="preserve">
          <source>Removing a Delegation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2a7478664995e474584fda63a29d0e494c3fcd" translate="yes" xml:space="preserve">
          <source>Removing a local Delegation Private Key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4516f54bccfd16efafa52862e964698b4b98ae92" translate="yes" xml:space="preserve">
          <source>Removing a target is also an offline command that requires a &lt;code&gt;notary publish example.com/collection&lt;/code&gt; to take effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d366f17eed9b8774bce5ef35ba464e22c254645d" translate="yes" xml:space="preserve">
          <source>Removing all trust data from a Repository</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9144f4b530577df8f5138e8803a2fa890996fa89" translate="yes" xml:space="preserve">
          <source>Removing any volume bindings for application code, so that code stays inside the container and can&amp;rsquo;t be changed from outside</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5260435eb43a6453f515cfb80d89abcb9a2c94c" translate="yes" xml:space="preserve">
          <source>Removing machines is an optional step because there are cases where you might want to save and migrate existing machines to a &lt;a href=&quot;https://docs.docker.com/docker-for-mac/&quot;&gt;Docker for Mac&lt;/a&gt; or &lt;a href=&quot;https://docs.docker.com/docker-for-windows/&quot;&gt;Docker Desktop for Windows&lt;/a&gt; environment, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd8a23e0e34c7b98317dcdbc0656ebda614a459" translate="yes" xml:space="preserve">
          <source>Rename a container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21d3501b7fcd1c4fb8359302d9963fc992e8b1e" translate="yes" xml:space="preserve">
          <source>Repartition (on 3 Availability zones)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038ba63a0b2d8ffc857d8f7940519eba52c2d832" translate="yes" xml:space="preserve">
          <source>Repeat steps 3 and 4 again, verifying that the service no longer has access to the config. The container ID is different, because the &lt;code&gt;service update&lt;/code&gt; command redeploys the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a36b0dc909304ac857afd13a85728115d71dca" translate="yes" xml:space="preserve">
          <source>Repeat steps 3 and 4 again, verifying that the service no longer has access to the secret. The container ID is different, because the &lt;code&gt;service update&lt;/code&gt; command redeploys the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e2c2a9c5912852c86bbccf1252ba854b8ae9ef1" translate="yes" xml:space="preserve">
          <source>Replace the &lt;code&gt;DATABASES = ...&lt;/code&gt; with the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf20c7da74aea0b81ba7f44fe51d5a28c86eb345" translate="yes" xml:space="preserve">
          <source>Replace the contents of &lt;code&gt;config/database.yml&lt;/code&gt; with the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa9fe17ef03f4f4a8306b88a4e53129158a5390" translate="yes" xml:space="preserve">
          <source>Replicated and global services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4cb5328708f0f467742e9455f42551457127b5c" translate="yes" xml:space="preserve">
          <source>Replicated or global services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3517380113cc8b46bcfa7e34c41b32c1ffc43a" translate="yes" xml:space="preserve">
          <source>Report available upgrades</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509e0d94ea59ea4f1b1198c1f04b7ab4ec3a193d" translate="yes" xml:space="preserve">
          <source>Report downgrades (default omits older versions)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22d3290b587090a383ad7e805ef81704f3e3f28" translate="yes" xml:space="preserve">
          <source>Request URI</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687bf5124aec264f22afdddad1d27fe0a3461c0c" translate="yes" xml:space="preserve">
          <source>Request authorization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943cee89464e50a8eeb04ca7c152b45101e9636a" translate="yes" xml:space="preserve">
          <source>Request body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a30742cd8b795bef0eff6f4aa3dc654b605d70b7" translate="yes" xml:space="preserve">
          <source>Request headers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e29d117b52e30a4173bbc045b0de4b3c49fa6b" translate="yes" xml:space="preserve">
          <source>Request headers as key value pairs (without the authorization header)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f9a178567871c7e28765681ef72e22c701923f" translate="yes" xml:space="preserve">
          <source>Request method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e804fd5ce486832a8b8005094a86442cfc4398" translate="yes" xml:space="preserve">
          <source>Request the path to the volume with the given &lt;code&gt;volume_name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f32ac793338c21411f1214986d3e92028b2e9f1" translate="yes" xml:space="preserve">
          <source>Requests flow &lt;em&gt;from&lt;/em&gt; the Docker daemon &lt;em&gt;to&lt;/em&gt; the plugin. So the plugin needs to implement an HTTP server and bind this to the UNIX socket mentioned in the &amp;ldquo;plugin discovery&amp;rdquo; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed6bfb41051ed5b74447340f3c2e29d11e99a7c" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="translated">Required</target>
        </trans-unit>
        <trans-unit id="d57939886670518e4b294d434d70c22a2be76ad9" translate="yes" xml:space="preserve">
          <source>Required:</source>
          <target state="translated">Required:</target>
        </trans-unit>
        <trans-unit id="f620ef50d6900304921bf8bd1df2fc416e5771f9" translate="yes" xml:space="preserve">
          <source>Reserve CPUs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f70c4e23225d8aff29b81e4e446feb6777ae2aa0" translate="yes" xml:space="preserve">
          <source>Reserve Memory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbedb2390b54cee3e49627be4b7dd5091a8ab4a" translate="yes" xml:space="preserve">
          <source>Reserve memory or CPUs for a service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6385fdc716a7d8e7e5a83a9bef503abc175104dc" translate="yes" xml:space="preserve">
          <source>Reserved namespaces in engine labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c876f94958f955135485b16495bb4307f16dff3a" translate="yes" xml:space="preserve">
          <source>Reset aws-sandbox as the active docker machine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafa66f7ba3dc55789cf86bbc1f4380ab4c42f33" translate="yes" xml:space="preserve">
          <source>Resigning the delegation file is done with the &lt;code&gt;$ notary witness&lt;/code&gt; command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7433d067667f0cdc94f9e54a56b6d52524074d09" translate="yes" xml:space="preserve">
          <source>Resources for writing profiles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf248a9fde6c6b563c678a35bf1fd6dd8479f6e" translate="yes" xml:space="preserve">
          <source>Respond with a string error if an error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1374cdf37b1e38b71ce16e04f8eafe3c465f8e07" translate="yes" xml:space="preserve">
          <source>Respond with a string error if an error occurred. &lt;code&gt;Mountpoint&lt;/code&gt; and &lt;code&gt;Status&lt;/code&gt; are optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22824d1f2f65ba5d0de8ceb625241b0b7505dd7e" translate="yes" xml:space="preserve">
          <source>Respond with a string error if an error occurred. &lt;code&gt;Mountpoint&lt;/code&gt; is optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2686157af9dd0b69aa31c830b334133f2138ce66" translate="yes" xml:space="preserve">
          <source>Respond with the path on the host (v1) or inside the plugin (v2) where the volume has been made available, and/or a string error if an error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d89529fc7c7fb45e63afc0254afa5ec05ac4b6" translate="yes" xml:space="preserve">
          <source>Responds with a list of Docker subsystems which this plugin implements. After activation, the plugin will then be sent events from this subsystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3473bbd531621dbfe1c496e5b36a68b89a4393d4" translate="yes" xml:space="preserve">
          <source>Response authorization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="176070ca20a7563bed4cef2212a9be37af09f14a" translate="yes" xml:space="preserve">
          <source>Response body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce021885c64d2d288d563f639f22779dc150513" translate="yes" xml:space="preserve">
          <source>Response headers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d700312c45ad42299cd6de1522f7e396ac595afd" translate="yes" xml:space="preserve">
          <source>Response headers as key value pairs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b8de49b76e737f6af78b9f74e0408d2c2443b1b" translate="yes" xml:space="preserve">
          <source>Response status code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d69a6bfe3e745e2db27137c6ae9d09ed31bd1f" translate="yes" xml:space="preserve">
          <source>Restart a machine. Oftentimes this is equivalent to &lt;code&gt;docker-machine stop; docker-machine start&lt;/code&gt;. But some cloud driver try to implement a clever restart which keeps the same IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee01d89bd17c61a0ed0e56d5ea246b3445c2c52e" translate="yes" xml:space="preserve">
          <source>Restart one or more containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1c16eed01b986a6dd21f40433fe1aa7e92ebd1" translate="yes" xml:space="preserve">
          <source>Restart only if the container exits with a non-zero exit status. Optionally, limit the number of restart retries the Docker daemon attempts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d41b8f9c7dfec27e74eff856a142e0c11b93060" translate="yes" xml:space="preserve">
          <source>Restart policies (--restart)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd477d8f007a0df9810e6bc1ae18b7f1fb83836" translate="yes" xml:space="preserve">
          <source>Restart policy to apply when a container exits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f9cfe482aa5a5d56a07571f42c0dacf373cbed" translate="yes" xml:space="preserve">
          <source>Restart the application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d0de88417e3545a8d40ce687a17c0447fb15a81" translate="yes" xml:space="preserve">
          <source>Restart the container unless it is explicitly stopped or Docker itself is stopped or restarted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d46c893eb0ce5bda1ce10ca165d425e8ada9021" translate="yes" xml:space="preserve">
          <source>Restart the daemon and see if the manager comes back as reachable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e1bcf109bdafe013baa7002ebed7706805ae15" translate="yes" xml:space="preserve">
          <source>Restart the manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fa8ce4ebe7bbfa1fcaacf12c4ebce3876e1c4a" translate="yes" xml:space="preserve">
          <source>Restart when condition is met (&amp;ldquo;none&amp;rdquo;|&amp;rdquo;on-failure&amp;rdquo;|&amp;rdquo;any&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a6a1e3ac9b23e6dfa91aeef0b658faf566f20ef" translate="yes" xml:space="preserve">
          <source>Restart when condition is met (&amp;ldquo;none&amp;rdquo;|&amp;rdquo;on-failure&amp;rdquo;|&amp;rdquo;any&amp;rdquo;) (default &amp;ldquo;any&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7d008c5c1a2ee7249fe00f6f00332c89c38fb5" translate="yes" xml:space="preserve">
          <source>Restarting Docker machines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782bab957e3d557bc7f1d5ae730516e7ebcdbd4a" translate="yes" xml:space="preserve">
          <source>Restarts a running machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2cc6965f23067d26e98483182d8b842101e304" translate="yes" xml:space="preserve">
          <source>Restarts all stopped and running services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d419953bd8d42b66f07a65d4d53582fb6ac42e3e" translate="yes" xml:space="preserve">
          <source>Restore from a backup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f560092011c098947efc48630041773ec7c27c" translate="yes" xml:space="preserve">
          <source>Restore from this checkpoint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed91bcff1f7a4fed5231de669d4f90d801250d28" translate="yes" xml:space="preserve">
          <source>Restore the &lt;code&gt;/var/lib/docker/swarm&lt;/code&gt; directory with the contents of the backup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43517287570b208d4291cd21131b70dff2db9cf9" translate="yes" xml:space="preserve">
          <source>Restrict external access to the network</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="132eabe7590de66644720931a21bd6ef9043a8e0" translate="yes" xml:space="preserve">
          <source>Restrict process inspection capabilities, already blocked by dropping &lt;code&gt;CAP_PTRACE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="487ee530f8f6bf7e8d3c95dad6826b093a22f618" translate="yes" xml:space="preserve">
          <source>Resulting in:</source>
          <target state="translated">结果是:</target>
        </trans-unit>
        <trans-unit id="02d55b2baf2725bcbe0634735b4de01c005aa3e5" translate="yes" xml:space="preserve">
          <source>Results in:</source>
          <target state="translated">结果是:</target>
        </trans-unit>
        <trans-unit id="83b8587f2873234b6c3cd201dc0861b8dd16b360" translate="yes" xml:space="preserve">
          <source>Retrieve logs until a specific point in time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b31d50e4dca8823d5ec10c020e47c6489e4d71" translate="yes" xml:space="preserve">
          <source>Return JSON for specified type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97aab327ed69ed96b4408331e77e6725886c64bb" translate="yes" xml:space="preserve">
          <source>Return low-level information about keys and signatures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e6bd3ff6970f0e99133cbd620b06cb219d3967" translate="yes" xml:space="preserve">
          <source>Return low-level information on Docker objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eab84d74b70914af1c85d736957cc4c3f4d9ebd" translate="yes" xml:space="preserve">
          <source>Returns information about a node. By default, this command renders all results in a JSON array. You can specify an alternate format to execute a given template for each result. Go&amp;rsquo;s &lt;a href=&quot;http://golang.org/pkg/text/template/&quot;&gt;text/template&lt;/a&gt; package describes all the details of the format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea88d79e721c9392070310009c7b72adbc00b97a" translate="yes" xml:space="preserve">
          <source>Returns information about a plugin. By default, this command renders all results in a JSON array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c6f4b4dd676c2388ee00c8b86df86681a83df9" translate="yes" xml:space="preserve">
          <source>Returns information about a volume. By default, this command renders all results in a JSON array. You can specify an alternate format to execute a given template for each result. Go&amp;rsquo;s &lt;a href=&quot;http://golang.org/pkg/text/template/&quot;&gt;text/template&lt;/a&gt; package describes all the details of the format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10a9b8129135db0f32f35222486aa2af0f103f7" translate="yes" xml:space="preserve">
          <source>Returns information about one or more networks. By default, this command renders all results in a JSON object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df59a7e0e55f9c12db385c5301fcea77cbed405" translate="yes" xml:space="preserve">
          <source>Revert changes to a service&amp;rsquo;s configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79312b32a8c0f511d33081aa2895585ee76f41d" translate="yes" xml:space="preserve">
          <source>Revoke access to the old secret from the MySQL service and remove the old secret from Docker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad2e6fbe5627a1c5368de26e400a74b6d1258f9" translate="yes" xml:space="preserve">
          <source>Revoke signatures from a signed tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf37133e780296e07b655e52893abf341265e74" translate="yes" xml:space="preserve">
          <source>Revoke signatures on all tags in a repository</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6644b640b8968635da0017d7364ad94899ed90" translate="yes" xml:space="preserve">
          <source>Role of the node (&amp;ldquo;worker&amp;rdquo;|&amp;rdquo;manager&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb5d4a97d082f722cc1bde0a68d0db1ef06dbcd" translate="yes" xml:space="preserve">
          <source>Roll back a specified service to its previous version from the swarm. This command must be run targeting a manager node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b59b2f195ba66b941a888072d87fe4aeb0821650" translate="yes" xml:space="preserve">
          <source>Roll back the &lt;code&gt;web&lt;/code&gt; service...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab631d15a1f59cd1b3fa78ab14b904e26424410d" translate="yes" xml:space="preserve">
          <source>Roll back to the previous version of a service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1085929b11ac20f4b78e7621dcf0767b18647470" translate="yes" xml:space="preserve">
          <source>Rollback order (&amp;ldquo;start-first&amp;rdquo;|&amp;rdquo;stop-first&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b84fe6bcb19dcb3b687c50e69ecce4bb1a65b567" translate="yes" xml:space="preserve">
          <source>Rollback order (&amp;ldquo;start-first&amp;rdquo;|&amp;rdquo;stop-first&amp;rdquo;) (default &amp;ldquo;stop-first&amp;rdquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64addb5b53958489d8c3e3fe8d389960a95e455e" translate="yes" xml:space="preserve">
          <source>Rollback to previous specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30e8dc98a82d08f19aa7fb62372b76231864d042" translate="yes" xml:space="preserve">
          <source>Rollback, Freeze, Mix and Match</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6bb1e47e0e364ecc04f111a79528ffef339d39" translate="yes" xml:space="preserve">
          <source>Root CA Rotation is recommended if one or more of the swarm managers have been compromised, so that those managers can no longer connect to or be trusted by any other node in the cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe6b87a23bfb1c0e73c708c8705bd0013c29c7c" translate="yes" xml:space="preserve">
          <source>Root of content trust for an image tag. When content trust is enabled, you create the root key once. Also known as the offline key, because it should be kept offline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cafb3e5145672f4753eb456043ae844ff8e9003" translate="yes" xml:space="preserve">
          <source>Root, targets, and (sometimes) snapshot metadata are generated and signed by clients, who upload the metadata to the Notary server. The server is responsible for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0922b5c450cda0ad6e481ffbbb5577acaecbaf4" translate="yes" xml:space="preserve">
          <source>Rotate join token</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52c0ada4cb6bea9227e8afb90cb2c9d431e3a385" translate="yes" xml:space="preserve">
          <source>Rotate keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="912e3ba598e91aff30aa777a9c96df44dae3df85" translate="yes" xml:space="preserve">
          <source>Rotate the swarm CA - if no certificate or key are provided, new ones will be generated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d095ce73fb2ab3830daea533666c5d6bf74885" translate="yes" xml:space="preserve">
          <source>Rotate the unlock key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038fea4f89d04511fae41082efc0740412e0866f" translate="yes" xml:space="preserve">
          <source>Rotate unlock key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e016718204b4049bf9604bf624efe2a8a869b8" translate="yes" xml:space="preserve">
          <source>Rotating the CA certificate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e1790e29a5541b6d02348fc3f45f18445709f4" translate="yes" xml:space="preserve">
          <source>Rule</source>
          <target state="translated">Rule</target>
        </trans-unit>
        <trans-unit id="522c42c0436ba8b4b6d50ba1db9508fa4b742789" translate="yes" xml:space="preserve">
          <source>Run 5 instances of that image as a service called &lt;code&gt;web&lt;/code&gt;, limiting each one to use, at most, 10% of a single core of CPU time (this could also be e.g. &amp;ldquo;1.5&amp;rdquo; to mean 1 and half core for each), and 50MB of RAM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed28753fdc6880421ee6d768b4fb596d6abc7598" translate="yes" xml:space="preserve">
          <source>Run &lt;a href=&quot;../../engine/reference/commandline/image_ls/index&quot;&gt;docker image ls&lt;/a&gt; to see your newly tagged image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae80390b9943097f209cf95056167f79a1a9962c" translate="yes" xml:space="preserve">
          <source>Run &lt;a href=&quot;../../reference/commandline/swarm_init/index&quot;&gt;&lt;code&gt;docker swarm init&lt;/code&gt;&lt;/a&gt; to create a single-node swarm on the current node. The Engine sets up the swarm as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6349e2858c010cc9f0512afef0a5f0352f0253f3" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker --version&lt;/code&gt; and ensure that you have a supported version of Docker:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0ae53475779d4274f035b7edb4a1ada6a3aad11" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker exec&lt;/code&gt; on a running container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d83c12d575ae851a2fb0673da0e79640134d74bd" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker info&lt;/code&gt; (or &lt;code&gt;docker version&lt;/code&gt; without &lt;code&gt;--&lt;/code&gt;) to view even more details about your Docker installation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4993c52360e596442556b1c09efcd8f345e0e4ab" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker info&lt;/code&gt; on Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e35ba344f7987238c81d9077f96a5461c6b4827" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker info&lt;/code&gt; to view the current state of the swarm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ec20abaa7dd5be71253f5aab80da4be8aaa317" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker inspect -f &quot;{{ .NetworkSettings.Networks.nat.IPAddress }}&quot; myapp&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a0e9ffd927e64305cb1836522c7b25dcaa2f92" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker node ls&lt;/code&gt; on the manager to view the nodes in this swarm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2369b3064da6f94f685bf0271a3057e9acca8e1" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker node update --availability active &amp;lt;NODE-ID&amp;gt;&lt;/code&gt; to return the drained node to an active state:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e257c1c56463ce73fb2faa6e797d4bdd1b218a" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker node update --availability drain &amp;lt;NODE-ID&amp;gt;&lt;/code&gt; to drain a node that had a task assigned to it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a38f22e2374b7f12588e80f5ac2e1c7f02eb57" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker node update --label-add&lt;/code&gt; on a manager node to add label metadata to a node. The &lt;code&gt;--label-add&lt;/code&gt; flag supports either a &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;key&amp;gt;=&amp;lt;value&amp;gt;&lt;/code&gt; pair.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610da237b01a78d43c83f10ff4d9b532662b40cf" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker ps&lt;/code&gt; on the node where the task is running to see details about the container for the task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389cfa3bad78fb355aa582dca5637f14b9a606b0" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker ps&lt;/code&gt; to see the containers running on the node where you&amp;rsquo;re connected. The following example shows the tasks running on &lt;code&gt;manager1&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf754f7b10d9cea9eb96f272169750cf54392953" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker service inspect &amp;lt;SERVICE-ID&amp;gt;&lt;/code&gt; to verify that the swarm manager removed the service. The CLI returns a message that the service is not found:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c949748ddc476149dda6d25fa1e0d99897bdc86" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker service inspect --pretty &amp;lt;SERVICE-ID&amp;gt;&lt;/code&gt; to display the details about a service in an easily readable format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8007095204fa2281187b93a20f6a311283192973" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker service inspect --pretty redis&lt;/code&gt; to see the new image in the desired state:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b4ddd6acdf37b8f2c565d742407628b7519a07" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker service ls&lt;/code&gt; to see the list of running services:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c66132dd228d6d3644f62e1be00bf5f09243e9" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker service ls&lt;/code&gt; to verify that the three services are running as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bd6de7b19e6f708500e8f95234d7329bf57b52b" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker service ps &amp;lt;SERVICE-ID&amp;gt;&lt;/code&gt; to see the updated task list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ab8457af46f64fd1574bd2864f75869af3c83b5" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker service ps &amp;lt;SERVICE-ID&amp;gt;&lt;/code&gt; to see which nodes are running the service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef5fc78ce63f7ba1c8ffe4bf8076304f1bc6dc0" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker service ps &amp;lt;SERVICE-ID&amp;gt;&lt;/code&gt; to watch the rolling update:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda10f8afe8391a4e6cadacdba19b02215c45574" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker service ps redis&lt;/code&gt; to see how the swarm manager assigned the tasks to different nodes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e59a9e0d672e257e0d504385e8bfe911d50005" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker service ps redis&lt;/code&gt; to see how the swarm manager updated the task assignments for the &lt;code&gt;redis&lt;/code&gt; service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42f134b54694aab08108c8b75caff2a06aad031" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker service rm helloworld&lt;/code&gt; to remove the &lt;code&gt;helloworld&lt;/code&gt; service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ed07e13f4931707ebfdbcc78a076f4f0d520e0" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker stack deploy -c docker-compose.yml getstartedlab&lt;/code&gt; to deploy the app on the cloud hosted swarm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53377075b5a6a52eb865cb3ae72ef7e94ae2620f" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker stack deploy&lt;/code&gt; one more time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b85c08a572d3a16629e9c733230880c9742f2df2" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker swarm ca --rotate&lt;/code&gt; to generate a new CA certificate and key. If you prefer, you can pass the &lt;code&gt;--ca-cert&lt;/code&gt; and &lt;code&gt;--external-ca&lt;/code&gt; flags to specify the root certificate and to use a root CA external to the swarm. Alternately, you can pass the &lt;code&gt;--ca-cert&lt;/code&gt; and &lt;code&gt;--ca-key&lt;/code&gt; flags to specify the exact certificate and key you would like the swarm to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab750f461bf4ddca691b935705b34126004f3aaf" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker swarm init&lt;/code&gt; to create a swarm on the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7556e6c6c4b29894e1f8ae1aa714e78320bb24" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker wait&lt;/code&gt;, which should block until the container exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f5bc5582f1e0c6c67b4ec8cb667ddaa527113e" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker-compose up&lt;/code&gt; and Compose starts and runs your entire app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307f21206dbc34bba66e40dfb48ea7c2fdaad0ec" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker-machine create&lt;/code&gt; with the &lt;code&gt;amazonec2&lt;/code&gt; driver, credentials, inbound port, region, and a name for the new instance. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23bfbc28885ec187ede9a072317a549d1a9e6f19" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker-machine create&lt;/code&gt; with the &lt;code&gt;digitalocean&lt;/code&gt; driver and pass your key to the &lt;code&gt;--digitalocean-access-token&lt;/code&gt; flag, along with a name for the new cloud server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35cdfeeb202847c6cbf253159e74d1837eb7a56" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker-machine env myvm1&lt;/code&gt; to get the command to configure your shell to talk to &lt;code&gt;myvm1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8923865fab6ae6085008106f5f49a11e029c5a" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker-machine ls&lt;/code&gt; to list machines and make sure you are connected to &lt;code&gt;myvm1&lt;/code&gt;, as indicated by an asterisk next to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd915bd5429d204942fd2a8f4857293d2cc2d33" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker-machine ls&lt;/code&gt; to verify that &lt;code&gt;myvm1&lt;/code&gt; is now the active machine, as indicated by the asterisk next to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc462dd27c396fbe3f2663cc1fe5f63e5e7a968d" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;docker-machine ls&lt;/code&gt; to verify that &lt;code&gt;myvm1&lt;/code&gt; is the active machine as indicated by the asterisk next to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a006e85e263693822d31bf1bca6167d91e10eb8" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;env|grep DOCKER&lt;/code&gt; to check whether DOCKER environment variables are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f4f5bb7bfe759776beba5d539c40a783ed73f52" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;eval $(docker-machine env -u)&lt;/code&gt; to unset all DOCKER variables in the current shell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4758a948c5e9a54d93c3615ba35ac6ddaf5386f8" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;sudo port install bash-completion&lt;/code&gt; to install bash completion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e89450e7651227495037fa86e0dac795c3f339" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;swarm join-token --rotate&lt;/code&gt; to invalidate the old token and generate a new token. Specify whether you want to rotate the token for &lt;code&gt;worker&lt;/code&gt; or &lt;code&gt;manager&lt;/code&gt; nodes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dae07989a5857c16754f79707d83c3064a229de" translate="yes" xml:space="preserve">
          <source>Run Docker Engine in swarm mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d763046e26e2e4ae203ab9d7e0a4385a5914bf41" translate="yes" xml:space="preserve">
          <source>Run Docker in daemon mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27eec11537d751571b69eb379c489d7284d77db8" translate="yes" xml:space="preserve">
          <source>Run a &lt;a href=&quot;https://www.nginx.com/&quot;&gt;Nginx&lt;/a&gt; webserver in a container with the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f5afd513add1455bf9c86071b03906bf4b6ebe" translate="yes" xml:space="preserve">
          <source>Run a Notary service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3f69f4d031ea4e33f70cc7a323b07f9edd482e" translate="yes" xml:space="preserve">
          <source>Run a command in a new container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecdb7b7c350aaeedaa6169a30908716cb7e6bab0" translate="yes" xml:space="preserve">
          <source>Run a command in a running container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a5907cc9647f027530e01c9e07a1ecf14ffd61" translate="yes" xml:space="preserve">
          <source>Run a container with &lt;code&gt;docker run&lt;/code&gt; to verify your set up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0341c203f79e35734b2ad6f7a1471627b00b269" translate="yes" xml:space="preserve">
          <source>Run a container with the profile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6490f252d2c3e6a5bcb76158636e2dbe15c844e6" translate="yes" xml:space="preserve">
          <source>Run a one-off command on a service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bea633c7c4438e3fef93643fb3d25d404d7fd7f" translate="yes" xml:space="preserve">
          <source>Run a service for testing or development</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4cbcdbd4c35a0a40834c65024ac8f491110936c" translate="yes" xml:space="preserve">
          <source>Run an init inside the container that forwards signals and reaps processes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ef711aa07dcbda860cb1a3f78342b8c991c158" translate="yes" xml:space="preserve">
          <source>Run an init inside the container that forwards signals and reaps processes. Set this option to &lt;code&gt;true&lt;/code&gt; to enable this feature for the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2008b88bd90753f78dd56e03710e7dba2bdd60" translate="yes" xml:space="preserve">
          <source>Run container in background and print container ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b50386daffbfa72ff17938eb63b3849b1a81021" translate="yes" xml:space="preserve">
          <source>Run containers and experiment with Machine commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed90b24cfcd661b2444eebd5722198bdbeaec74" translate="yes" xml:space="preserve">
          <source>Run docker on the active docker machine by downloading and running the hello-world image:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26057982b58d7d12054d5d389179f4de2f329d05" translate="yes" xml:space="preserve">
          <source>Run it on the client machine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52a4471464fb8b7fde977e63cafaf9fc651065e" translate="yes" xml:space="preserve">
          <source>Run manager-only nodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e9caddd20345203f90d885a1a9f1ed5e7659a1" translate="yes" xml:space="preserve">
          <source>Run multiple daemons</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223aac450b4eafecd70d31f08fdd59fc3d6aaaad" translate="yes" xml:space="preserve">
          <source>Run some &lt;code&gt;docker-machine&lt;/code&gt; commands to inspect the remote host. For example, &lt;code&gt;docker-machine ip &amp;lt;machine&amp;gt;&lt;/code&gt; gets the host IP address and &lt;code&gt;docker-machine inspect &amp;lt;machine&amp;gt;&lt;/code&gt; lists all the details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31981ce73c860fc07a3ede0a86144bb96df10aa8" translate="yes" xml:space="preserve">
          <source>Run some swarm commands to verify the deployment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07252be0b81483b33bcd11bc4429a66e8649cb5" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;../reference/up/index&quot;&gt;docker-compose up&lt;/a&gt; command from the top level directory for your project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82bffbb01d89ae2d4adcb3d32f1c6b11c594767" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;docker node ls&lt;/code&gt; command to view information about nodes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78c1ecb909e9c6913c3fca52a65003adc795f0c9" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;docker swarm ca&lt;/code&gt; command without any options to view the current root CA certificate in PEM format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57731003228957410dae8c0dce9054f8415f4598" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;docker swarm leave&lt;/code&gt; command on a node to remove it from the swarm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b7e49017fe6b7382ba9c2d31e9dcd8d50c9737" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;docker-machine create&lt;/code&gt; command, pass the appropriate driver to the &lt;code&gt;--driver&lt;/code&gt; flag and provide a machine name. If this is your first machine, name it &lt;code&gt;default&lt;/code&gt; as shown in the example. If you already have a &amp;ldquo;default&amp;rdquo; machine, choose another name for this new machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddee5255a22052b293cbae5959cf2c906ad0e2e7" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;docker-machine create&lt;/code&gt; commands to create machines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5dba423b9c65226350ceaca986d525d26cf3f97" translate="yes" xml:space="preserve">
          <source>Run the &lt;code&gt;unset&lt;/code&gt; command on the following &lt;code&gt;DOCKER&lt;/code&gt; environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d45c51947f93d6874f43e9f7c813d8fa9f4be1" translate="yes" xml:space="preserve">
          <source>Run the PostgreSQL server container (in the foreground):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a097a274167aef2a6b177a27a1004721cde84799" translate="yes" xml:space="preserve">
          <source>Run the app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe1e7360a8c74376845a3ef3b34ace33a82f127" translate="yes" xml:space="preserve">
          <source>Run the app, mapping your machine&amp;rsquo;s port 4000 to the container&amp;rsquo;s published port 80 using &lt;code&gt;-p&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9acfa7dfe042e9252b630dc5ff905979966946" translate="yes" xml:space="preserve">
          <source>Run the command from the output on the new manager node to join it to the swarm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd2f6fccba3f4c15b91bade92ef89870f4eae3b" translate="yes" xml:space="preserve">
          <source>Run the command from the output on the worker to join the swarm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f949a4de0d5412e41bfc1a2fbb7e550cceffd813" translate="yes" xml:space="preserve">
          <source>Run the command produced by the &lt;code&gt;docker swarm init&lt;/code&gt; output from the &lt;a href=&quot;../create-swarm/index&quot;&gt;Create a swarm&lt;/a&gt; tutorial step to create a second worker node joined to the existing swarm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13ad29e60f77ad5a5eebc5bc882ca013db5ac1b" translate="yes" xml:space="preserve">
          <source>Run the command produced by the &lt;code&gt;docker swarm init&lt;/code&gt; output from the &lt;a href=&quot;../create-swarm/index&quot;&gt;Create a swarm&lt;/a&gt; tutorial step to create a worker node joined to the existing swarm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab63036f62efbd97002173525987aa5328305aea" translate="yes" xml:space="preserve">
          <source>Run the containers on your local system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36464e6d60ecd79e72137a13d70bf40717d5a4d2" translate="yes" xml:space="preserve">
          <source>Run the following command (assuming you&amp;rsquo;ve already built or pulled a Notary server docker image):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b7bd451cfb5643fedcf45e2889d5b95fd99bd8" translate="yes" xml:space="preserve">
          <source>Run the following command to change the desired state of the service running in the swarm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="097d07656fff6503ed3372cd630aa1ab23cf2604" translate="yes" xml:space="preserve">
          <source>Run the following command to create a new swarm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0bc9f3b3c3bc1f4e68429d60ce154eff1b5501e" translate="yes" xml:space="preserve">
          <source>Run the following command:</source>
          <target state="translated">运行以下命令:</target>
        </trans-unit>
        <trans-unit id="5259830c35dba6d5386a1e470ca6f95b2b8f8be5" translate="yes" xml:space="preserve">
          <source>Run the given command to configure your shell to talk to &lt;code&gt;myvm1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563fe48f638ba7b333ef35e316ad89e6af9aea27" translate="yes" xml:space="preserve">
          <source>Run this command on a manager node to list the secrets in the swarm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7d5c6af002a2fdd9eeee4ec76ab49403e5508b" translate="yes" xml:space="preserve">
          <source>Run this command to download the current stable release of Docker Compose:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bacb7ef8a84d4c872b7faf97940ab47600e5ee0" translate="yes" xml:space="preserve">
          <source>Run without the default seccomp profile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1418d04c4c5363395d4916b5d984e6b479b55d" translate="yes" xml:space="preserve">
          <source>Run your new load-balanced app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabc9f41ab3ffdd0d24d1f92295865de95fa0608" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;docker ps --no-trunc&lt;/code&gt; showing 2 linked containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09db7233f8e89aca972a7ea8c79c9b46d95699a6" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;docker stats&lt;/code&gt; on all running containers against a Linux daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a24a5e76a8b268318c03225f65ee727b6d32bd" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;docker stats&lt;/code&gt; on all running containers against a Windows daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239b9491c3230fd333a35c55287b168ed6ad7d85" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;docker stats&lt;/code&gt; on multiple containers by name and id against a Linux daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7990734bacdb6f8fafe421a56b86520bc5587704" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;docker stats&lt;/code&gt; on multiple containers by name and id against a Windows daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbf6888d16d2913d68cccbdfae4734b3e9ceb4a" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;docker stats&lt;/code&gt; with customized format on all (Running and Stopped) containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704eeec1c34a57255cb4a6fa27a72224f4c90986" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;id&lt;/code&gt; inside the created container shows that the user belongs to the &lt;code&gt;mail&lt;/code&gt; group, which would not have been the case if &lt;code&gt;group_add&lt;/code&gt; were not used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710c9813e37e6209f89e904812aa24f20f103262" translate="yes" xml:space="preserve">
          <source>Running Compose on a Swarm cluster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7593c16d1315c9b3c16229c543e34cecdad73c" translate="yes" xml:space="preserve">
          <source>Running Compose on a single server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54aff642b88141df201cb37b45165ec72a30c3ab" translate="yes" xml:space="preserve">
          <source>Running Windows 10?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="314dd4ae1cc99e6cf47c7f2a3a61ddf8899117d7" translate="yes" xml:space="preserve">
          <source>Running a Docker daemon behind an HTTPS_PROXY</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa77b081b1a601d1aea06aed58159d75c8cc070" translate="yes" xml:space="preserve">
          <source>Running containers (and applications) with Docker implies running the Docker daemon. This daemon requires &lt;code&gt;root&lt;/code&gt; privileges unless you opt-in to &lt;a href=&quot;https://github.com/docker/engine/blob/v19.03.0-rc3/docs/rootless/&quot;&gt;Rootless mode&lt;/a&gt; (experimental), and you should therefore be aware of some important details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba776402bed74c115b945c585d1962d98af9500" translate="yes" xml:space="preserve">
          <source>Running the command with no options also removes one-off containers created by &lt;code&gt;docker-compose up&lt;/code&gt; or &lt;code&gt;docker-compose run&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed424f2ac14556979d5668056f9e33e17881b6d" translate="yes" xml:space="preserve">
          <source>Running with different command line arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b9b3f7c8add71c659052f2b05d4266fdf4ab3b7" translate="yes" xml:space="preserve">
          <source>Running with this variable set and a known mismatch does prevent some Docker features from working properly. The exact features that fail would depend on the Docker client and server versions. For this reason, running with this variable set is only intended as a workaround and it is not officially supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2858372f77c5eb2083641c8af531937bdb5f07c7" translate="yes" xml:space="preserve">
          <source>Runs a command or interactive ssh session on the machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f4a9f6d86235c8d98156bf2837d043ba677573" translate="yes" xml:space="preserve">
          <source>Runs a one-time command against a service. For example, the following command starts the &lt;code&gt;web&lt;/code&gt; service and runs &lt;code&gt;bash&lt;/code&gt; as its command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cbd49e76a7c65c4bdccacc7a2cdc23ac2b68324" translate="yes" xml:space="preserve">
          <source>Runtime Enforcement with Docker Content Trust</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b772dc02bff7380bef141e63c182b00e1eb6035e" translate="yes" xml:space="preserve">
          <source>Runtime constraints on resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1da52cea917fb9727f9734f83fe418c22d3022" translate="yes" xml:space="preserve">
          <source>Runtime privilege and Linux capabilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a23aeb95b037e249b30eac39833979ab5f41f0ad" translate="yes" xml:space="preserve">
          <source>Runtime to use for this container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a700c09740fbf4210fb8d5d9989e9e62c9baeb29" translate="yes" xml:space="preserve">
          <source>Runtimes can be registered with the daemon either via the configuration file or using the &lt;code&gt;--add-runtime&lt;/code&gt; command line argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e935e6d47189dea72f6979db5a839ef5c4a2a0e" translate="yes" xml:space="preserve">
          <source>SETFCAP</source>
          <target state="translated">SETFCAP</target>
        </trans-unit>
        <trans-unit id="f2e2f88a68b6121490512796a4248788b6a4713c" translate="yes" xml:space="preserve">
          <source>SETGID</source>
          <target state="translated">SETGID</target>
        </trans-unit>
        <trans-unit id="31249ac39e1ee2f878f98c34d40da26b2997d9f0" translate="yes" xml:space="preserve">
          <source>SETPCAP</source>
          <target state="translated">SETPCAP</target>
        </trans-unit>
        <trans-unit id="3277bbcbdf42af2356f1821ab4cb9e6f9ce25f17" translate="yes" xml:space="preserve">
          <source>SETUID</source>
          <target state="translated">SETUID</target>
        </trans-unit>
        <trans-unit id="095292871a28c2f2c292750f8a6313adafce4a15" translate="yes" xml:space="preserve">
          <source>SHELL</source>
          <target state="translated">SHELL</target>
        </trans-unit>
        <trans-unit id="5443c4c0061d506109a88c0189068c29efb4e59b" translate="yes" xml:space="preserve">
          <source>SSH Username</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c09a0a7c0807bef63e8781eda840393e10b58b" translate="yes" xml:space="preserve">
          <source>SSH access are typically managed by a single server running on the Docker host;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95d669dfe4ab37d01ec15c25092129d3139e042" translate="yes" xml:space="preserve">
          <source>SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91a644c96bef2e33c23134bcdc7b1ba31406aa5" translate="yes" xml:space="preserve">
          <source>SSH keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3eb0b03aaec31e55560cf65dc0dcea8c13d83e" translate="yes" xml:space="preserve">
          <source>STOPSIGNAL</source>
          <target state="translated">STOPSIGNAL</target>
        </trans-unit>
        <trans-unit id="9a0bee93e49ebac45f68a79548d099472a708007" translate="yes" xml:space="preserve">
          <source>SYSLOG</source>
          <target state="translated">SYSLOG</target>
        </trans-unit>
        <trans-unit id="bce20b0bc7070e58b946c38ebb4b7e40a68008ed" translate="yes" xml:space="preserve">
          <source>SYS_ADMIN</source>
          <target state="translated">SYS_ADMIN</target>
        </trans-unit>
        <trans-unit id="c7ca50b8f26f5323841e01b6160c647cbb4d5e90" translate="yes" xml:space="preserve">
          <source>SYS_BOOT</source>
          <target state="translated">SYS_BOOT</target>
        </trans-unit>
        <trans-unit id="474db581730a0be864d4d08559609edb3e7d710c" translate="yes" xml:space="preserve">
          <source>SYS_CHROOT</source>
          <target state="translated">SYS_CHROOT</target>
        </trans-unit>
        <trans-unit id="926252f9219fd61a8280f9148ddab2ef233fbbce" translate="yes" xml:space="preserve">
          <source>SYS_MODULE</source>
          <target state="translated">SYS_MODULE</target>
        </trans-unit>
        <trans-unit id="5d48ad71f87b1ceff8925d5b9cab09887711dd47" translate="yes" xml:space="preserve">
          <source>SYS_NICE</source>
          <target state="translated">SYS_NICE</target>
        </trans-unit>
        <trans-unit id="fedc4460c92ab6885c0fd29f08ec3390c867ad44" translate="yes" xml:space="preserve">
          <source>SYS_PACCT</source>
          <target state="translated">SYS_PACCT</target>
        </trans-unit>
        <trans-unit id="95459984a648ac479b910d7310c23f143333e891" translate="yes" xml:space="preserve">
          <source>SYS_PTRACE</source>
          <target state="translated">SYS_PTRACE</target>
        </trans-unit>
        <trans-unit id="75e32552f809ebd53a5f17c164882e256ec9859c" translate="yes" xml:space="preserve">
          <source>SYS_RAWIO</source>
          <target state="translated">SYS_RAWIO</target>
        </trans-unit>
        <trans-unit id="476772a913aa3174059a431bd3228d006b4e04ef" translate="yes" xml:space="preserve">
          <source>SYS_RESOURCE</source>
          <target state="translated">SYS_RESOURCE</target>
        </trans-unit>
        <trans-unit id="e87f748e60f34ab62c242622da9e890b4bb3b8f3" translate="yes" xml:space="preserve">
          <source>SYS_TIME</source>
          <target state="translated">SYS_TIME</target>
        </trans-unit>
        <trans-unit id="211b75c838db65f0f5ade6452876f508f8b79236" translate="yes" xml:space="preserve">
          <source>SYS_TTY_CONFIG</source>
          <target state="translated">SYS_TTY_CONFIG</target>
        </trans-unit>
        <trans-unit id="0fb59422f6006b3668253a86b09b083611a34439" translate="yes" xml:space="preserve">
          <source>Samples</source>
          <target state="translated">Samples</target>
        </trans-unit>
        <trans-unit id="2441b0c0bd2f8d4a87438cdf2c419b0c77df78bd" translate="yes" xml:space="preserve">
          <source>Save an image to a tar.gz file using gzip</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d34d1039eb5099b4a760f96410fd73d23d74213" translate="yes" xml:space="preserve">
          <source>Save and close the &lt;code&gt;Dockerfile&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7c61ce6d92bebcc1f6ab4f4c357597f9e4c58d" translate="yes" xml:space="preserve">
          <source>Save and close the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="618296dac1f7234b53fb2e60074a5590eee5ed5b" translate="yes" xml:space="preserve">
          <source>Save and close the &lt;code&gt;requirements.txt&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f96dcb7452efbb2d9795788211ab55c70ad1f9" translate="yes" xml:space="preserve">
          <source>Save and close the file.</source>
          <target state="translated">保存并关闭文件。</target>
        </trans-unit>
        <trans-unit id="0ce0ee9a6447fba37f5b64e3941d1f941ee5ba61" translate="yes" xml:space="preserve">
          <source>Save one or more images to a tar archive (streamed to STDOUT by default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44716fd37c732f6f0bbca15ad57b2ae66db28bb" translate="yes" xml:space="preserve">
          <source>Save the &lt;code&gt;index.html&lt;/code&gt; file as a swarm config named &lt;code&gt;homepage&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ed30396e5469954be8614e5b576ff1d34cc126f" translate="yes" xml:space="preserve">
          <source>Save the &lt;code&gt;index.html&lt;/code&gt; file as a swarm secret named &lt;code&gt;homepage&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee80f0afa8dd1292db6776d249bb4fc1840c5dd7" translate="yes" xml:space="preserve">
          <source>Save the &lt;code&gt;site.conf&lt;/code&gt; file in a Docker config. The first parameter is the name of the config, and the second parameter is the file to read it from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7097645d1d059e8c1248caa62019016bbfca52d3" translate="yes" xml:space="preserve">
          <source>Save the custom profile to disk in the &lt;code&gt;/etc/apparmor.d/containers/docker-nginx&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677db5fc7b82a408f4c8c23ac1668729c581a3d1" translate="yes" xml:space="preserve">
          <source>Save the file and restart Docker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b02a049312667fd50841e3e0a4d30bdd596230" translate="yes" xml:space="preserve">
          <source>Save the following into a new file &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d7e6214ce39999706bd6fd6cdd91a39bc145e6" translate="yes" xml:space="preserve">
          <source>Save this file as &lt;code&gt;docker-compose.yml&lt;/code&gt; wherever you want. Be sure you have &lt;a href=&quot;../part2/index#share-your-image&quot;&gt;pushed the image&lt;/a&gt; you created in &lt;a href=&quot;../part2/index&quot;&gt;Part 2&lt;/a&gt; to a registry, and update this &lt;code&gt;.yml&lt;/code&gt; by replacing &lt;code&gt;username/repo:tag&lt;/code&gt; with your image details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db08d8f53103bfbeaa88b428bba7d03aec439c8a" translate="yes" xml:space="preserve">
          <source>Save this new &lt;code&gt;docker-compose.yml&lt;/code&gt; file, which finally adds a Redis service. Be sure to replace &lt;code&gt;username/repo:tag&lt;/code&gt; with your image details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f8b0504d20288f64bc855d3e25210ac7d57a6a" translate="yes" xml:space="preserve">
          <source>Scalable: You can increase and automatically distribute container replicas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3ffbd5d6f2aeef9e6c661306db0167ea955fdf" translate="yes" xml:space="preserve">
          <source>Scale a single service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27657bf447c882fde27543927c26734fcf5127fd" translate="yes" xml:space="preserve">
          <source>Scale multiple services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f9a2057299be59a1b099cf99ad8fd3429c39d1" translate="yes" xml:space="preserve">
          <source>Scale one or multiple replicated services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8a482c163fa667e71e6a8d6dfb9c79c2c5d9489" translate="yes" xml:space="preserve">
          <source>Scale the app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1708be6f2cabafc0ff1f66862a2fd7a63793e1" translate="yes" xml:space="preserve">
          <source>Scale the app by changing the &lt;code&gt;docker-compose.yml&lt;/code&gt; file and redeploy on-the-fly with the &lt;code&gt;docker stack deploy&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f76898529c7a19d8f4c95c0a7d802fe39c842a4" translate="yes" xml:space="preserve">
          <source>Scale the app by changing the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa404e9cd5eb7ff6215a8759f1fef8c6148e388" translate="yes" xml:space="preserve">
          <source>Scale the service in the swarm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d93cc47c37f38b5f066f43502bd07767c5062f43" translate="yes" xml:space="preserve">
          <source>Scale your app to run multiple containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a15c3170902d3c5289291d6db3cf610d2febf7" translate="yes" xml:space="preserve">
          <source>Schedule update for the stopped task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9afd70e84d37ea9af0cfeeb6ab4d2652c4043462" translate="yes" xml:space="preserve">
          <source>Scheduling containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4651a34e4df9619783ad372f905d6d3b84e9d76d" translate="yes" xml:space="preserve">
          <source>Scope</source>
          <target state="translated">Scope</target>
        </trans-unit>
        <trans-unit id="20a332cd5c8ff3cd16be4d02fc9dd34c08d6a2b9" translate="yes" xml:space="preserve">
          <source>Search &lt;a href=&quot;https://hub.docker.com&quot;&gt;Docker Hub&lt;/a&gt; for images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d012d613e0c1252248df3bc1f471208c04676feb" translate="yes" xml:space="preserve">
          <source>Search images by name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bb76c25ac76d22c7ecb290ab776f0b118cbdcf5" translate="yes" xml:space="preserve">
          <source>Search the Docker Hub for images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2e7b3fdd9eb7d307f9c3ad7db8d917c3fe4167" translate="yes" xml:space="preserve">
          <source>Seccomp security profiles for Docker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="034fcd956ce98d6ce622c12444a6a84e9dc7db35" translate="yes" xml:space="preserve">
          <source>Seconds to wait for stop before killing it</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3438b9748e194672b6ee7148b158dde157116f45" translate="yes" xml:space="preserve">
          <source>Seconds to wait for stop before killing the container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5fe104816263de6dec69a545d0312ccd853934" translate="yes" xml:space="preserve">
          <source>Secret ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2089c38791a0397dbaf8902e3355c556087aca1c" translate="yes" xml:space="preserve">
          <source>Secret driver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2a636c529034472d7aa9a3665217d7f57775bb" translate="yes" xml:space="preserve">
          <source>Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e752ad991c4c4bf683a7f30a2fbbc8753c667ed8" translate="yes" xml:space="preserve">
          <source>Secret files with custom targets are not directly bind-mounted into Windows containers, since Windows does not support non-directory file bind-mounts. Instead, secrets for a container are all mounted in &lt;code&gt;C:\ProgramData\Docker\internal\secrets&lt;/code&gt; (an implementation detail which should not be relied upon by applications) within the container. Symbolic links are used to point from there to the desired target of the secret within the container. The default target is &lt;code&gt;C:\ProgramData\Docker\secrets&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143b8cfcbfd8dbb43c7d5c7710e15318227569a3" translate="yes" xml:space="preserve">
          <source>Secret labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3321681d4a3ec61a8d89d475c9a11d88e541458" translate="yes" xml:space="preserve">
          <source>Secret name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78b0b39d6b805e0fa1e4689afae788c6e7cd69c7" translate="yes" xml:space="preserve">
          <source>Secret value required for nodes to join the swarm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3732aec487906e739333e586f2b6ff9e9f1a96" translate="yes" xml:space="preserve">
          <source>Secrets</source>
          <target state="translated">Secrets</target>
        </trans-unit>
        <trans-unit id="b150ade2128abf0afce167cd3ed856e39946cfd5" translate="yes" xml:space="preserve">
          <source>Secrets are located in &lt;code&gt;/run/secrets&lt;/code&gt; in the container. If no target is specified, the name of the secret will be used as the in memory file in the container. If a target is specified, that will be the filename. In the example above, two files will be created: &lt;code&gt;/run/secrets/ssh&lt;/code&gt; and &lt;code&gt;/run/secrets/app&lt;/code&gt; for each of the secret targets specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7e7a566a10d373e3f99cb20dfe304b5e14fac52" translate="yes" xml:space="preserve">
          <source>Secure Engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c70c74784e791994d400f91415b349dd799ee9fc" translate="yes" xml:space="preserve">
          <source>Secure by default</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152628d6ab89d5b767fa46032b1b45bd64fd118b" translate="yes" xml:space="preserve">
          <source>Secure computing mode (&lt;code&gt;seccomp&lt;/code&gt;) is a Linux kernel feature. You can use it to restrict the actions available within the container. The &lt;code&gt;seccomp()&lt;/code&gt; system call operates on the seccomp state of the calling process. You can use this feature to restrict your application&amp;rsquo;s access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8bc6e16ef27abccf683f5ef80893be70ed926c" translate="yes" xml:space="preserve">
          <source>Security Group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f15c67cb4c51a5e8ecb9aac4d32c5b0db94bcb83" translate="yes" xml:space="preserve">
          <source>Security Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa7856c023f0cc4afa01aadfa643309a7885bfe" translate="yes" xml:space="preserve">
          <source>Security configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a94e079c6f72dd821a2916438daf4debbe798b" translate="yes" xml:space="preserve">
          <source>Security options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f413162cbdd254ed76ef024190c0b7cfcf133bf" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#list-nodes&quot;&gt;list nodes&lt;/a&gt; for descriptions of the different availability options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6cbdcd88ff793c4b8470594501086c0c8ba5f0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#recovering-from-losing-the-quorum&quot;&gt;Recovering from losing the quorum&lt;/a&gt; for troubleshooting steps if you do lose the quorum of managers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2113e6620c0086734b10e2760c045db16e1a54c2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../../../../get-started/index#searching-for-images&quot;&gt;&lt;em&gt;Find Public Images on Docker Hub&lt;/em&gt;&lt;/a&gt; for more details on finding shared images from the command line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e0ac2c5bf2b0273a4747e16e10feb11a57f32e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../drivers/index&quot;&gt;Docker Machine driver reference&lt;/a&gt; for details on the drivers, including required flags and configuration options (which vary by provider).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548e3b84ff4e95156e6c385c103415e495d6e329" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../extends/index#different-environments&quot;&gt;Using multiple compose files&lt;/a&gt; for a more complete example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f908ad4edaf2c016fcc558f79a9c26745dc127d4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../production/index&quot;&gt;production&lt;/a&gt; for more information about Compose in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c0fe3198a921c94ea117e16bebfba82c4316fc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.docker.com/storage&quot;&gt;Docker Volumes&lt;/a&gt; and &lt;a href=&quot;../../../engine/extend/plugins_volume/index&quot;&gt;Volume Plugins&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeef156159b91ca4146724f179710458ec56ac86" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://docs.docker.com/storage&quot;&gt;Use volumes&lt;/a&gt; and &lt;a href=&quot;../../engine/extend/plugins_volume/index&quot;&gt;Volume Plugins&lt;/a&gt; for general information on volumes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c59a3550d327f6c5a95d5a5422b420713752273a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/bugsnag/bugsnag-go/&quot;&gt;bugsnag-go&lt;/a&gt; for more information about these configuration parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e6df3f839f784b5b05289aacb68fd972619b6ca" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/docker/docker.github.io/blob/master/machine/AVAILABLE_DRIVER_PLUGINS/&quot;&gt;Available driver plugins&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4059a99f1b1866f19940b676deff6cc54bab70" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;docker-compose --help&lt;/code&gt; to see other available commands. You can also install &lt;a href=&quot;../completion/index&quot;&gt;command completion&lt;/a&gt; for the bash and zsh shell, which also shows you available commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d906fc1e0366942f0737f1da05124cf84911a971" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;../../reference/commandline/service_scale/index&quot;&gt;&lt;code&gt;docker service scale&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../reference/commandline/service_ps/index&quot;&gt;&lt;code&gt;docker service ps&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9c5060d4004a8b5f62c5f676dc20e78d9dd347" translate="yes" xml:space="preserve">
          <source>See also the &lt;code&gt;-f&lt;/code&gt;&lt;a href=&quot;../overview/index&quot;&gt;command-line option&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e23b9315c1b82dd47b8c00b229f1768b231455c" translate="yes" xml:space="preserve">
          <source>See how Docker compares to virtual machines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9094c0d949aba09e273653f722a57cefcc0da71" translate="yes" xml:space="preserve">
          <source>See how Docker works at a high level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1408d553b6be62a68269acb9ef411f524682cf" translate="yes" xml:space="preserve">
          <source>See some common use cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd2a16c090718a19d09338c4b4461c8282e73a0" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#bind-propagation&quot;&gt;bind propagation section&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06ff4b80ecfa47142dff8cb1fcfb48772ceb1e20" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#healthcheck&quot;&gt;healthcheck section&lt;/a&gt; for complementary information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b91502b78489f3f4e8583a2b9fb01be52f62d2f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../compose-file/compose-file-v2/index#links&quot;&gt;links reference&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a363c63e3e87a85a13a87a9a0c37a51f0ba5b540" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://docs.docker.com/develop/develop-images#/build-cache&quot;&gt;&lt;code&gt;Dockerfile&lt;/code&gt; Best Practices guide&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b459847b3871d9d7240b23f631763b46b70fed59" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/linode/docker-machine-driver-linode&quot;&gt;Linode Docker machine driver project page&lt;/a&gt; for more examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d8242d348de0bd52120ca7f26d0bd19683215f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://www.kernel.org/doc/Documentation/cgroup-v1/freezer-subsystem.txt&quot;&gt;cgroups freezer documentation&lt;/a&gt; for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7798d6756bfe484ed9afcc7f88c3d944e1e6c0d" translate="yes" xml:space="preserve">
          <source>See the AWS documentation on &lt;a href=&quot;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html&quot;&gt;Setting Up with Amazon EC2&lt;/a&gt;. Follow the steps for &amp;ldquo;Create an IAM User&amp;rdquo; and &amp;ldquo;Create a Key Pair&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d8ca572dc47f7911f7581a41fa9d74d3876eea4" translate="yes" xml:space="preserve">
          <source>See the command-line references for &lt;a href=&quot;../../reference/commandline/service_create/index&quot;&gt;&lt;code&gt;docker service create&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../reference/commandline/service_update/index&quot;&gt;&lt;code&gt;docker service update&lt;/code&gt;&lt;/a&gt;, or run one of those commands with the &lt;code&gt;--help&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facc1b0c246424d05e4d7c08347ccb8329827bef" translate="yes" xml:space="preserve">
          <source>See the docs for &lt;a href=&quot;https://github.com/docker/distribution/blob/master/docs/spec/auth/token/&quot;&gt;Docker Registry v2 authentication&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a148e324208f00292bb7c060b8820f03ec85273" translate="yes" xml:space="preserve">
          <source>See the instructions for &lt;a href=&quot;../../../reference/commandline/cli/index#notary&quot;&gt;Docker&lt;/a&gt; or for &lt;a href=&quot;https://github.com/docker/notary#using-notary&quot;&gt;Notary&lt;/a&gt; depending on which one you are using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fe3096985d9d43e4031a3b7d1b1c186adc2266" translate="yes" xml:space="preserve">
          <source>See this issue on virtualbox: &lt;a href=&quot;https://github.com/docker/machine/issues/986&quot;&gt;Hangs on Waiting for VM to start #986&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f76b5c0f49cefff54ebf32055a26435d7a0222" translate="yes" xml:space="preserve">
          <source>See which machine is &amp;ldquo;active&amp;rdquo; (a machine is considered active if the &lt;code&gt;DOCKER_HOST&lt;/code&gt; environment variable points to it).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5263e5d32e6cb06230c6636b89303c9ef300696" translate="yes" xml:space="preserve">
          <source>Select the &lt;strong&gt;Virtual Switch Manager&lt;/strong&gt; on the right-hand &lt;strong&gt;Actions&lt;/strong&gt; panel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71ac4eec00c4c2d42068a353a67a87d50cf3b23" translate="yes" xml:space="preserve">
          <source>Send a KILL signal to a container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e0e3b1163b977f5ebc442e7e1776f1a8010533" translate="yes" xml:space="preserve">
          <source>Send a custom signal to a container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5eb95013ef1b641eedc51f9b4b9cae01cb1778c" translate="yes" xml:space="preserve">
          <source>Send registry authentication details to Swarm agents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339d513c3ded1a337f8916be53d838daa2010d62" translate="yes" xml:space="preserve">
          <source>Send registry authentication details to swarm agents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0fa8472c4301bbb00d7a9f60c29043bed2854e4" translate="yes" xml:space="preserve">
          <source>Separator (&lt;code&gt;:&lt;/code&gt;) of &lt;code&gt;--security-opt&lt;/code&gt; flag on &lt;code&gt;docker run&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329cb8b6ba8c427be7c09b298295c655415c7ac9" translate="yes" xml:space="preserve">
          <source>Service</source>
          <target state="translated">Service</target>
        </trans-unit>
        <trans-unit id="49444769b99196ae53a08592ed1fd537525d82a4" translate="yes" xml:space="preserve">
          <source>Service ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf91c075d3888915d66a204824ae594bdab66dd" translate="yes" xml:space="preserve">
          <source>Service command args</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940ae61098fb4645f5f0a280ddbc9d9dcc5fa59c" translate="yes" xml:space="preserve">
          <source>Service configuration details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22bbc906d9df23680d20802a6402aa838242a33d" translate="yes" xml:space="preserve">
          <source>Service configuration reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0743e6d9d29edf9e146181729a963e9d45cf43" translate="yes" xml:space="preserve">
          <source>Service constraints let you set criteria for a node to meet before the scheduler deploys a service to the node. You can apply constraints to the service based upon node attributes and metadata or engine metadata. For more information on constraints, refer to the &lt;code&gt;docker service create&lt;/code&gt;&lt;a href=&quot;../../reference/commandline/service_create/index&quot;&gt;CLI reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca07b426659d6b982599ebbaf97b7dbcd16fb10c" translate="yes" xml:space="preserve">
          <source>Service container isolation mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c24d5774c90f5f4fde7527d101b79548bbf2744" translate="yes" xml:space="preserve">
          <source>Service image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12602c5a6667d2943a3bb900cc8701fe844ae7d" translate="yes" xml:space="preserve">
          <source>Service image tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10b5b4d8aa656b7d0b5c454b6d76c2ad5a7fbb4" translate="yes" xml:space="preserve">
          <source>Service labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b1af56e76d36ce80b5dac9c69007060294d095" translate="yes" xml:space="preserve">
          <source>Service mode (replicated or global)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e6a2d8b1d4c1ea866b55fbedf295d8fd95d247" translate="yes" xml:space="preserve">
          <source>Service mode (replicated, global)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007f0e067ab7ac42f85497dec7cc973ed9d807f5" translate="yes" xml:space="preserve">
          <source>Service name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87f15829e7cf0f19b6c8e662598e3b27cd3891e9" translate="yes" xml:space="preserve">
          <source>Service ports (composed of &lt;code&gt;Port&lt;/code&gt; (&lt;code&gt;int&lt;/code&gt;) and &lt;code&gt;Protocol&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;). A service description can only specify the container port to be exposed. These ports can be mapped on runtime hosts at the operator's discretion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53aa903abc7d9ad66c5a0543cf7e8ea5d616c238" translate="yes" xml:space="preserve">
          <source>Service ports published in ingress mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b598774f1859ce6848cc37e061e07261fb2548a" translate="yes" xml:space="preserve">
          <source>Service replicas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a845c7b22ba4cabc72e69b885af4df4fb56b7409" translate="yes" xml:space="preserve">
          <source>Service-level &lt;code&gt;networks&lt;/code&gt; key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cbd584046863bc7b753e57e8681a98a87f36f0f" translate="yes" xml:space="preserve">
          <source>Services</source>
          <target state="translated">Services</target>
        </trans-unit>
        <trans-unit id="72cb580d15d2f0f70bde46d6be95b1f77b568c7e" translate="yes" xml:space="preserve">
          <source>Services and tasks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77522b8683b49a9a0df1c5d4295a0d9099126ac2" translate="yes" xml:space="preserve">
          <source>Services are built once and then tagged, by default as &lt;code&gt;project_service&lt;/code&gt;. For example, &lt;code&gt;composetest_db&lt;/code&gt;. If the Compose file specifies an &lt;a href=&quot;../../compose-file/index#image&quot;&gt;image&lt;/a&gt; name, the image is tagged with that name, substituting any variables beforehand. See &lt;a href=&quot;../../compose-file/index#variable-substitution&quot;&gt;variable substitution&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6cfa9e4e2078badc47228d8880668f98148756" translate="yes" xml:space="preserve">
          <source>Services are really just &amp;ldquo;containers in production.&amp;rdquo; A service only runs one image, but it codifies the way that image runs&amp;mdash;what ports it should use, how many replicas of the container should run so the service has the capacity it needs, and so on. Scaling a service changes the number of container instances running that piece of software, assigning more computing resources to the service in the process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89eede2688d6d393c832c328a585c51520213407" translate="yes" xml:space="preserve">
          <source>Services can also be set up to roll back to the previous version automatically when an update fails. To set up a service for automatic rollback, use &lt;code&gt;--update-failure-action=rollback&lt;/code&gt;. A rollback will be triggered if the fraction of the tasks which failed to update successfully exceeds the value given with &lt;code&gt;--update-max-failure-ratio&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879ad44a3d93da379d5a1be7f8a8a0c1bdba19a1" translate="yes" xml:space="preserve">
          <source>Services, tasks, and containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f241c04a7619cc6d92d403e22ccb2166eb50ed27" translate="yes" xml:space="preserve">
          <source>Set DNS options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9450fe32a428e18110911b09223c416ce753ce4" translate="yes" xml:space="preserve">
          <source>Set IPAM driver specific options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c75a3e73fbf06b4453772ee3d90de370809c01" translate="yes" xml:space="preserve">
          <source>Set a custom name for this network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="870692a2e4d9ab8308a766ee7fa218a01e5db7f8" translate="yes" xml:space="preserve">
          <source>Set a custom name for this network. The name field can be used to reference networks which contain special characters. The name is used as is and will &lt;strong&gt;not&lt;/strong&gt; be scoped with the stack name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f908216d5bfa7d860197f4b3dd7cb6ada8b1870c" translate="yes" xml:space="preserve">
          <source>Set a custom name for this volume.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e1cb5030bdacdfa5dac1eb4ca786418795a634" translate="yes" xml:space="preserve">
          <source>Set a custom name for this volume. The name field can be used to reference volumes that contain special characters. The name is used as is and will &lt;strong&gt;not&lt;/strong&gt; be scoped with the stack name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3b7e5c907fc8f7b4df4d5e4944a91e1efa382d" translate="yes" xml:space="preserve">
          <source>Set a limit in bytes per second for read / write operations on a given device. Each item in the list must have two keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d96305190f3460e58de567f4f84075ed95582bc" translate="yes" xml:space="preserve">
          <source>Set a limit in operations per second for read / write operations on a given device. Each item in the list must have two keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae6739e516778276b558e21e1f4f6f076835f5a" translate="yes" xml:space="preserve">
          <source>Set an environment variable: &lt;code&gt;http_proxy=http://dockerhost:3142/&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4255fca58e55ad10a56d9efb89468e35c35c7bea" translate="yes" xml:space="preserve">
          <source>Set architecture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d9e44bae7485ed33f654342a270c3340490e03" translate="yes" xml:space="preserve">
          <source>Set architecture variant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94e1442094426fd909e8e5ef254bb4a1cae1ce4" translate="yes" xml:space="preserve">
          <source>Set based on the value of &lt;code&gt;USER&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e0db74fb91e2f81f54f7c092bf292fd8c6adcd" translate="yes" xml:space="preserve">
          <source>Set build-time variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f38b5beab64c798d8fa38a66f94bd06124e277" translate="yes" xml:space="preserve">
          <source>Set build-time variables (--build-arg)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f334d6ed267ffffdd679ca0551e6d10189f42638" translate="yes" xml:space="preserve">
          <source>Set commit message for imported image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="807c950dbfb8301b45e99a5787041f2d04345b9d" translate="yes" xml:space="preserve">
          <source>Set custom DNS search domains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd39e291f3747eaee941ce6828199b4b0eb385a5" translate="yes" xml:space="preserve">
          <source>Set custom DNS servers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5285728eedd97946fc56945e514f0906c99616fc" translate="yes" xml:space="preserve">
          <source>Set driver specific options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23bf632e5215596720d04e531a82f5435ef21663" translate="yes" xml:space="preserve">
          <source>Set environment variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a10607c518faff30649facb850f572fe1cf713" translate="yes" xml:space="preserve">
          <source>Set environment variables (-e, --env)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971c0b76ef4632f0671f39f45bffa965d75a9ba8" translate="yes" xml:space="preserve">
          <source>Set environment variables (-e, --env, --env-file)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc9d7eb4884a555aa843b625668f7fe27051b95" translate="yes" xml:space="preserve">
          <source>Set environment variables in containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd59fc2c73556bbfcf22e310dd4d0027ba0f9a7" translate="yes" xml:space="preserve">
          <source>Set environment variables to dictate that &lt;code&gt;docker&lt;/code&gt; should run a command against a particular machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d52e9310a5142a0d0bba04971c099cc6d22f9d" translate="yes" xml:space="preserve">
          <source>Set environment variables used by the &lt;code&gt;flask&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2c018ff9a50b480fe100911e4e7b02df0508b4" translate="yes" xml:space="preserve">
          <source>Set environment variables with &amp;lsquo;docker-compose run&amp;rsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023a2ad81d85bfba579b1e78db2a337c7720da06" translate="yes" xml:space="preserve">
          <source>Set file capabilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a008781adab249707a7a59472b3896ef1c511f" translate="yes" xml:space="preserve">
          <source>Set meta data on a container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce4aeeab07ce255727cdc103cd417a5c2e7d4a0" translate="yes" xml:space="preserve">
          <source>Set metadata for a volume</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b618b2653b224ab54f39e6f7b040ca4ccee762d" translate="yes" xml:space="preserve">
          <source>Set metadata for an image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45cf147d3e57f0400d06d56a897c17f6e2d625a7" translate="yes" xml:space="preserve">
          <source>Set metadata on a network</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2898050536c6519959e2c8c34bc36d93910a32d" translate="yes" xml:space="preserve">
          <source>Set metadata on a service (-l, --label)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e2c829e5262c9e6f6ea8bf91aaea949ad737fd" translate="yes" xml:space="preserve">
          <source>Set metadata on container (-l, --label, --label-file)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e97efb2a41f74aba8d95df8686f6d5df425113c3" translate="yes" xml:space="preserve">
          <source>Set one or more custom host-to-IP mappings (host:ip)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f6c56c3731df27eda04f26f43c74342c86aa24" translate="yes" xml:space="preserve">
          <source>Set one or more supplementary user groups for the container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024a51557c4362dce8279e1967847254d56dcacc" translate="yes" xml:space="preserve">
          <source>Set operating system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b29e6ffea662356ff5673992b664c6679896b328" translate="yes" xml:space="preserve">
          <source>Set operating system feature</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff56b67b8b4a3ed46952001187c3b32444bc049" translate="yes" xml:space="preserve">
          <source>Set platform if server is multi-platform capable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb59b0acf7f2a8d79a55166a4abcb3466e4f8de" translate="yes" xml:space="preserve">
          <source>Set service mode (--mode)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af37634f968b71189f3067459e6468432f8ffe8" translate="yes" xml:space="preserve">
          <source>Set storage driver options for this service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a56af66867c567dbc80be2df4062a66add1554" translate="yes" xml:space="preserve">
          <source>Set storage driver options per container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b1215002afc3882e83ec66021e2385696935a1" translate="yes" xml:space="preserve">
          <source>Set storage driver options per container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102d6aecf37fbb364a9b314821ca9992a2e2be23" translate="yes" xml:space="preserve">
          <source>Set system clock (settimeofday(2), stime(2), adjtimex(2)); set real-time (hardware) clock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68aec81094a598b2c16afcdb16300ac4b4d48f1" translate="yes" xml:space="preserve">
          <source>Set the &lt;code&gt;stop_signal&lt;/code&gt; to a signal which the application knows how to handle:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9447b21d95bf782ee145cc1f51a3373b38c1b136" translate="yes" xml:space="preserve">
          <source>Set the Docker daemon key&amp;rsquo;s extended usage attributes to be used only for server authentication:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38dff82c3319ae7bf8222db7c37900adba4ddf2" translate="yes" xml:space="preserve">
          <source>Set the FS_APPEND_FL and FS_IMMUTABLE_FL i-node flags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4706491f92d415cb3a36c79e1ada6213d5ee5be6" translate="yes" xml:space="preserve">
          <source>Set the containers network MTU</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c233b1684aebe070669f7d9571f1b49227f757bd" translate="yes" xml:space="preserve">
          <source>Set the current docker context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e116ca2e2df0c6ea1f6a8c122dc3e3cfbf620ac" translate="yes" xml:space="preserve">
          <source>Set the default command for the container to &lt;code&gt;flask run&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4e15715b74e3b5139fade1a6c352f18fbdcdb5" translate="yes" xml:space="preserve">
          <source>Set the default context to use, when &lt;code&gt;DOCKER_HOST&lt;/code&gt;, &lt;code&gt;DOCKER_CONTEXT&lt;/code&gt; environment variables and &lt;code&gt;--host&lt;/code&gt;, &lt;code&gt;--context&lt;/code&gt; global options are not set. To disable usage of contexts, you can use the special &lt;code&gt;default&lt;/code&gt; context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f893826c754570c61bbd45f2438c622979ca448" translate="yes" xml:space="preserve">
          <source>Set the hostname on the instance to the name Machine addresses it by, such as &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354385209c16f3c9aa93be04711d47e398c6e5ae" translate="yes" xml:space="preserve">
          <source>Set the network containers connect to for the &lt;code&gt;RUN&lt;/code&gt; instructions during build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e42673c1e07d81048f9192ea84c1903b14f252a" translate="yes" xml:space="preserve">
          <source>Set the networking mode for the RUN instructions during build</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8cac0d2e65c955a9db8d08fb15713bc33e95160" translate="yes" xml:space="preserve">
          <source>Set the size of the &lt;code&gt;/dev/shm&lt;/code&gt; partition for this build&amp;rsquo;s containers. Specify as an integer value representing the number of bytes or as a string expressing a &lt;a href=&quot;#specifying-byte-values&quot;&gt;byte value&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adac42ff901bb7d3bbe24394a6e961734997815a" translate="yes" xml:space="preserve">
          <source>Set the target build stage to build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5807481ec80b3b63d34564a1c9905011edee520" translate="yes" xml:space="preserve">
          <source>Set the working directory to &lt;code&gt;/code&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e14ba411bc213ace415fe82a6c2feea8d54836a" translate="yes" xml:space="preserve">
          <source>Set type of progress output (auto, plain, tty). Use plain to show container output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="228786a9ca4f57c75314deee90534abc8bf0aa7d" translate="yes" xml:space="preserve">
          <source>Set ulimits in container (--ulimit)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5041fdaa2412627cb12a86e3c21eb7b90fefd5f" translate="yes" xml:space="preserve">
          <source>Set up</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21ac4ad7bd723f2add0fbe85608685066c0f1a5" translate="yes" xml:space="preserve">
          <source>Set up a new &lt;strong&gt;external network switch&lt;/strong&gt; to use instead of DockerNAT network switch (for Moby), which is set up by default when you install Docker Desktop for Windows. If you already have another network switch set up, use that one instead but make sure it is an &lt;strong&gt;external&lt;/strong&gt; switch.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5b930a24746ff3e48b6e57504bf3a958bd187d" translate="yes" xml:space="preserve">
          <source>Set up environment variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c1d55a1151d736f0a90b01e3a036acabab45e4c" translate="yes" xml:space="preserve">
          <source>Set up the Hyper-V driver to use an external virtual network switch See the &lt;a href=&quot;../drivers/hyper-v/index&quot;&gt;Docker Machine driver for Microsoft Hyper-V&lt;/a&gt; topic, which includes an &lt;a href=&quot;../drivers/hyper-v/index#example&quot;&gt;example&lt;/a&gt; of how to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2714c4c8811e0d5426ce65bdacd6c530ed861058" translate="yes" xml:space="preserve">
          <source>Set up your Docker environment (on this page)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1b922a4b86af6b2554f926bb10a58fe4452af1" translate="yes" xml:space="preserve">
          <source>Set up your swarm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab356216ebd3cd7134bc8f159fe25801ae57cbf1" translate="yes" xml:space="preserve">
          <source>Set working directory (-w)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0e3af0ca81d48788691b36c56a61e18e070900" translate="yes" xml:space="preserve">
          <source>Set zfs filesystem under which docker will create its own datasets. By default docker will pick up the zfs filesystem where docker graph (&lt;code&gt;/var/lib/docker&lt;/code&gt;) is located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf83a86d7aa15a4788a05af91587c99f1f3a8211" translate="yes" xml:space="preserve">
          <source>Sets a limit for the number of operations Compose can execute in parallel. The default value is &lt;code&gt;64&lt;/code&gt;, and may not be set lower than &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc07e5f00b40eec8f827b2faa660e85ac18bb30" translate="yes" xml:space="preserve">
          <source>Sets an alternative signal to stop the container. By default &lt;code&gt;stop&lt;/code&gt; uses SIGTERM. Setting an alternative signal using &lt;code&gt;stop_signal&lt;/code&gt; causes &lt;code&gt;stop&lt;/code&gt; to send that signal instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6695b19a0b438d9d09b5488a12b6ae808a01288c" translate="yes" xml:space="preserve">
          <source>Sets environment variables &lt;code&gt;MYSQL_USER&lt;/code&gt; and &lt;code&gt;MYSQL_DATABASE&lt;/code&gt;. A new database called &lt;code&gt;wordpress&lt;/code&gt; is created when the container starts, and the &lt;code&gt;wordpress&lt;/code&gt; user has full permissions for this database only. This user cannot create or drop databases or change the MySQL configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f701f31f579b986bdaa1927dd13c4357a014775f" translate="yes" xml:space="preserve">
          <source>Sets the PID mode to the host PID mode. This turns on sharing between container and the host operating system the PID address space. Containers launched with this flag can access and manipulate other containers in the bare-metal machine&amp;rsquo;s namespace and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24f599717f120f40f7572af63490b3960fdafd0" translate="yes" xml:space="preserve">
          <source>Sets the URL of the &lt;code&gt;docker&lt;/code&gt; daemon. As with the Docker client, defaults to &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2971d35224f7272292abfc39491bac713029eb" translate="yes" xml:space="preserve">
          <source>Sets the default max size of the container. It is supported only when the backing fs is &lt;code&gt;xfs&lt;/code&gt; and mounted with &lt;code&gt;pquota&lt;/code&gt; mount option. Under these conditions the user can pass any size less then the backing fs size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356f68b5d1706a767b4f67c484b49ac0b56fe5ce" translate="yes" xml:space="preserve">
          <source>Sets the environment variable &lt;code&gt;WORDPRESS_DB_PASSWORD_FILE&lt;/code&gt; to the file path where the secret is mounted. The WordPress service reads the MySQL password string from that file and add it to the &lt;code&gt;wp-config.php&lt;/code&gt; configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6b63d65f0c3be93577bbba1d84d81b1dd1260e" translate="yes" xml:space="preserve">
          <source>Sets the environment variables &lt;code&gt;MYSQL_PASSWORD_FILE&lt;/code&gt; and &lt;code&gt;MYSQL_ROOT_PASSWORD_FILE&lt;/code&gt; to point to the files &lt;code&gt;/run/secrets/mysql_password&lt;/code&gt; and &lt;code&gt;/run/secrets/mysql_root_password&lt;/code&gt;. The &lt;code&gt;mysql&lt;/code&gt; image reads the password strings from those files when initializing the system database for the first time. Afterward, the passwords are stored in the MySQL system database itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da0a5d867bb9da10e5f2344911e58ebb7fce5c6" translate="yes" xml:space="preserve">
          <source>Sets the number of containers to run for a service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c097f4f00fa7a8d867da0cbcdebacb810a6edebe" translate="yes" xml:space="preserve">
          <source>Sets the percentage of passed in block device to use for storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55b8ff1b0504bb1e18166f58276db6fbe3498e54" translate="yes" xml:space="preserve">
          <source>Sets the percentage of the passed in block device to use for metadata storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aaeb61645f9bda4e65ab52b04fd34b22ca2d63d" translate="yes" xml:space="preserve">
          <source>Sets the project name. This value is prepended along with the service name to the container on start up. For example, if your project name is &lt;code&gt;myapp&lt;/code&gt; and it includes two services &lt;code&gt;db&lt;/code&gt; and &lt;code&gt;web&lt;/code&gt;, then Compose starts containers named &lt;code&gt;myapp_db_1&lt;/code&gt; and &lt;code&gt;myapp_web_1&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb79be747fc71a5b76481c970eb5cebe6fd2e0db" translate="yes" xml:space="preserve">
          <source>Sets the value of the percentage of space used before &lt;code&gt;lvm&lt;/code&gt; attempts to autoextend the available space [100 = disabled]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5d5a6d985d23aa6ecafd59527ba6ad20aa9254" translate="yes" xml:space="preserve">
          <source>Sets the value percentage value to increase the thin pool by when &lt;code&gt;lvm&lt;/code&gt; attempts to autoextend the available space [100 = disabled]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012881af9d65be98a177e78f761feb9cfa2689a6" translate="yes" xml:space="preserve">
          <source>Setting environment variables differently, such as when you need to decrease the verbosity of logging, or to enable email sending)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b2f8acb4d36ada211802b7d56fd015243e62fa" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;--memory-swappiness&lt;/code&gt; option is helpful when you want to retain the container&amp;rsquo;s working set and to avoid swapping performance penalties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35fc2b6ecf45288cfb4f854ce1f2ba8cb3e095a" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;DOCKER_TLS_VERIFY&lt;/code&gt; environment variable to any value other than the empty string is equivalent to setting the &lt;code&gt;--tlsverify&lt;/code&gt; flag. The following are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14906ec492966a923baa132af6d6cb77a329836c" translate="yes" xml:space="preserve">
          <source>Setting the escape character to &lt;code&gt;`&lt;/code&gt; is especially useful on &lt;code&gt;Windows&lt;/code&gt;, where &lt;code&gt;\&lt;/code&gt; is the directory path separator. &lt;code&gt;`&lt;/code&gt; is consistent with &lt;a href=&quot;https://technet.microsoft.com/en-us/library/hh847755.aspx&quot;&gt;Windows PowerShell&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9acbcd669eec8f0f34f0c91e70ed5efabb292628" translate="yes" xml:space="preserve">
          <source>Setting this is optional. If you do not set this, the &lt;code&gt;COMPOSE_PROJECT_NAME&lt;/code&gt; defaults to the &lt;code&gt;basename&lt;/code&gt; of the project directory. See also the &lt;code&gt;-p&lt;/code&gt;&lt;a href=&quot;../overview/index&quot;&gt;command-line option&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54886a8ba6e664fab9c0ea8f0a64f10d872dc4b" translate="yes" xml:space="preserve">
          <source>Setting this option applies to all containers the daemon launches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39dfc59ce0efb23ea90ee8f3a84cf7350917c5e" translate="yes" xml:space="preserve">
          <source>Setting this variable is intended as a workaround for situations where you need to run temporarily with a mismatch between the client and server version. For example, if you can upgrade the client but need to wait to upgrade the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d29552a693a29e704b8e8c8af4e79a67576e87d" translate="yes" xml:space="preserve">
          <source>Setting up Docker daemon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2655b49ce7c1e66c25891bd81f459a02c4958b50" translate="yes" xml:space="preserve">
          <source>Several Docker Machine driver plugins for use with other cloud platforms are available from 3rd party contributors. These are use-at-your-own-risk plugins, not maintained by or formally associated with Docker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34337d0474c85a00e35be272b2134002071bf4d" translate="yes" xml:space="preserve">
          <source>Several environment variables are available for you to configure the Docker Compose command-line behavior. They begin with &lt;code&gt;COMPOSE_&lt;/code&gt; or &lt;code&gt;DOCKER_&lt;/code&gt;, and are documented in &lt;a href=&quot;../reference/envvars/index&quot;&gt;CLI Environment Variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f722fca6d5b8740abdb12b6312fa03a39f2c33" translate="yes" xml:space="preserve">
          <source>Several environment variables are available for you to configure the Docker Compose command-line behaviour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51e2b05f08fd998c71a2227dd98ec47501841d17" translate="yes" xml:space="preserve">
          <source>Several other options were added to support networking, such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87af41edfe4d9c73823cdfbcc3c14af35898cb53" translate="yes" xml:space="preserve">
          <source>Several sub-options are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd954b15426e92e3e569283888e606d33ab7ac9d" translate="yes" xml:space="preserve">
          <source>Several things differ depending on which version you use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0372b1d9d6f0ea6ede8b23adfadde19695ad5bb8" translate="yes" xml:space="preserve">
          <source>Share Compose configurations between files and projects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46391fd5d3487c5cbe8f400eef2bca0f5c57c121" translate="yes" xml:space="preserve">
          <source>Share your image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c717298f3a35761885f1e00ddc79b5bd0a7b9505" translate="yes" xml:space="preserve">
          <source>Shared folders, volumes, and bind mounts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0effd4280947ab9c3565f8b1e397f815175d7d" translate="yes" xml:space="preserve">
          <source>Shared memory segments are used to accelerate inter-process communication at memory speed, rather than through pipes or through the network stack. Shared memory is commonly used by databases and custom-built (typically C/OpenMPI, C++/using boost libraries) high performance applications for scientific computing and financial services industries. If these types of applications are broken into multiple containers, you might need to share the IPC mechanisms of the containers, using &lt;code&gt;&quot;shareable&quot;&lt;/code&gt; mode for the main (i.e. &amp;ldquo;donor&amp;rdquo;) container, and &lt;code&gt;&quot;container:&amp;lt;donor-name-or-ID&amp;gt;&quot;&lt;/code&gt; for other containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cc7d8765bbe4eb87833e8da4746a4491e9ced50" translate="yes" xml:space="preserve">
          <source>Shared-kernel namespace isolation (not supported on Windows client operating systems older than Windows 10 1809).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9eb37d1aebf4bbdc7049b650007fc621dce6e78" translate="yes" xml:space="preserve">
          <source>Shell environment variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e40274d0e43ff440c3a50a9c5de348edfdaa54" translate="yes" xml:space="preserve">
          <source>Shell form ENTRYPOINT example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb5a924ee9a768944d8839a304bda640ca279e2" translate="yes" xml:space="preserve">
          <source>Short name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d88ae4bf2fb14213af29cd2497ed33dc1ff758" translate="yes" xml:space="preserve">
          <source>Short syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee5cc0e8e94a940dfb663933db69653f0c8ada5" translate="yes" xml:space="preserve">
          <source>Should I include my code with &lt;code&gt;COPY&lt;/code&gt;/&lt;code&gt;ADD&lt;/code&gt; or a volume?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194585569a14536daa5ddb99c700c453054cbffb" translate="yes" xml:space="preserve">
          <source>Should be a privileged operation. Also gated by &lt;code&gt;CAP_SYS_ADMIN&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85ecd1306e8343ddc7717051c769c1713fe827f" translate="yes" xml:space="preserve">
          <source>Show all containers (default shows just running)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec870e47c988f2a169bc86a738cee780cb7bd96" translate="yes" xml:space="preserve">
          <source>Show all events created since timestamp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f8f970c371c04ce42beb2ad87cd8fcbd7f8795" translate="yes" xml:space="preserve">
          <source>Show all images (default hides intermediate images)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10504efc1d6678a5783cc8192ae3a069fe1905a" translate="yes" xml:space="preserve">
          <source>Show all mapped ports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f00e73c12106c4d1a9ba5927518aebf8c134c74" translate="yes" xml:space="preserve">
          <source>Show both running and stopped containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9b7be4bdb577d0c298448b71be9849ad652893" translate="yes" xml:space="preserve">
          <source>Show debugging output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b362fd20b65751a34394599465a35c4204cd4d" translate="yes" xml:space="preserve">
          <source>Show detailed information on space usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7939b879064ed511cb4ed03a37ac52696c3f471e" translate="yes" xml:space="preserve">
          <source>Show digests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7fba8db6ffd910b7a571436cb4d268867883055" translate="yes" xml:space="preserve">
          <source>Show docker disk usage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc48b667bd050bbe694ce915b458dda2d30d0f1" translate="yes" xml:space="preserve">
          <source>Show extra details provided to logs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b644deb87c433e97a440e779b0bfd6dc3d09b3b3" translate="yes" xml:space="preserve">
          <source>Show images with a given label</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ffd54e699d667cc6b5d371edd033c6b247ed7d" translate="yes" xml:space="preserve">
          <source>Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7e29b434ee1916b064385bbde830613c58e6009" translate="yes" xml:space="preserve">
          <source>Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927905b640d7eadf0a14df5afda95ca652bc8c69" translate="yes" xml:space="preserve">
          <source>Show n last created containers (includes all states)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f604722c686f66b6b332f120d25d47be8f5ac8" translate="yes" xml:space="preserve">
          <source>Show output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505e5a602cf865aa7d0333f835cf4873d98ad23d" translate="yes" xml:space="preserve">
          <source>Show the Docker version information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853262b7a7151fca121e2edd5eceafc2d50dca01" translate="yes" xml:space="preserve">
          <source>Show the history of an image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566c791ddfaf7e71098922bd169da4b719615cf4" translate="yes" xml:space="preserve">
          <source>Show the latest created container (includes all states)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb9e123f6989f58b9d4d980b8d95b2abce3d501d" translate="yes" xml:space="preserve">
          <source>Show timestamps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ae3e5fc7abb7cb08f9ee817132bebc354391a0" translate="yes" xml:space="preserve">
          <source>Show untagged images (dangling)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc06d3d167518db26c4e0169d061ac4d68bd085e" translate="yes" xml:space="preserve">
          <source>Shut down Docker on the target host machine for the restored swarm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff266faccb353c4373bd018c1b7ef910328594d7" translate="yes" xml:space="preserve">
          <source>Shut down services and clean up by using either of these methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3ac606e538ef74ab662c38d84b68c1e5654574" translate="yes" xml:space="preserve">
          <source>Shutdown and cleanup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777c2da3ed16cc1a3165103437424f1f60831dd7" translate="yes" xml:space="preserve">
          <source>Sign a locally tagged image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73bdaa0f6012f6aca113c2a7d54d619970fd13c" translate="yes" xml:space="preserve">
          <source>Sign a new tag with &lt;code&gt;docker trust sign&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603bb4aeb2a6aa87a11cffcb3099236b4eff6a54" translate="yes" xml:space="preserve">
          <source>Sign a tag as a repo admin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4427d554e525047bf799db9b762e439281bc29dd" translate="yes" xml:space="preserve">
          <source>Sign a tag as a signer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902b0f337058dd97767016b095dc4f169d57c13c" translate="yes" xml:space="preserve">
          <source>Sign an image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780375fad29c1a9c4a04522445e55ad144cff96b" translate="yes" xml:space="preserve">
          <source>Sign the certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0f29908a6510cbe85523ba748366c1140ef3ed" translate="yes" xml:space="preserve">
          <source>Sign the site certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1870b0faacdaa7a49d5f68b0085e02a6139b54" translate="yes" xml:space="preserve">
          <source>Signal to send to the container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1738c5839b6924aed6265f8d3598c4e1e016eb8" translate="yes" xml:space="preserve">
          <source>Signal to stop a container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b4cf02e5b9ee524196c6f258cab6260f9e5a5c" translate="yes" xml:space="preserve">
          <source>Signal to stop the container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1766ae913dd0b2de7e9288628272a612d01ebee1" translate="yes" xml:space="preserve">
          <source>Significant syscalls blocked by the default profile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f4291c85ea36c7e4cc4ac6496be38340fd850f" translate="yes" xml:space="preserve">
          <source>Signing Images with Docker Content Trust</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4402124841409cc93178dba6a2bc6df616da8996" translate="yes" xml:space="preserve">
          <source>Similarly the operator can set the &lt;strong&gt;HOSTNAME&lt;/strong&gt; (Linux) or &lt;strong&gt;COMPUTERNAME&lt;/strong&gt; (Windows) with &lt;code&gt;-h&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b495c0e93960daf1bd91e7fb87214c0efe181d" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;create&lt;/code&gt; a host directory bind mounted volume container, which can then be used from the subsequent container:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a102885032423e5d9755ca0fe2e551114e3ed78f" translate="yes" xml:space="preserve">
          <source>Similarly, the Docker client can use &lt;code&gt;-H&lt;/code&gt; to connect to a custom port. The Docker client will default to connecting to &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt; on Linux, and &lt;code&gt;tcp://127.0.0.1:2376&lt;/code&gt; on Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7767cb92f9c9cd0495cdb03f4b6716938fad9b81" translate="yes" xml:space="preserve">
          <source>Similarly, the following syntax allows you to specify mandatory variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563523c7fb9aeb90cd3ca9914f9f94d5abfe8ef0" translate="yes" xml:space="preserve">
          <source>Simple example:</source>
          <target state="translated">简单的例子。</target>
        </trans-unit>
        <trans-unit id="8c6a8b10ab1ebd1359d4592b5aad1e3db1c300d2" translate="yes" xml:space="preserve">
          <source>Simple example: Get started with configs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8808d6d960fb9ca28833c4dde55624c3ab8268c2" translate="yes" xml:space="preserve">
          <source>Simple example: Get started with secrets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3523754d0ebe50a02b2dfbac53235de74babaa5" translate="yes" xml:space="preserve">
          <source>Simple example: Use configs in a Windows service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f9a24b4a1641fd874fdef9606a2be6e2430c8d" translate="yes" xml:space="preserve">
          <source>Simple example: Use secrets in a Windows service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de714ce9eef99bfc6339f1c84622e32464b8a15" translate="yes" xml:space="preserve">
          <source>Since 1.9, Docker Content Trust Offline key has been renamed to Root key and the Tagging key has been renamed to Repository key. Due to this renaming, we&amp;rsquo;re also changing the corresponding environment variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9475b624facd66c7eaef896480f343c473edbaf7" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://docs.docker.com/docker-for-windows/install/#what-to-know-before-you-install&quot;&gt;Docker Desktop for Windows is incompatible with Toolbox&lt;/a&gt;, this scenario isn&amp;rsquo;t applicable because Docker Desktop for Windows uses the Docker Engine and Docker Machine that come with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5dc90c1ba32c16953dc002a9edf770012d493f" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;aliases&lt;/code&gt; is network-scoped, the same service can have different aliases on different networks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290d646f3e4478cae2050505656a5b964111c7dd" translate="yes" xml:space="preserve">
          <source>Since Docker runs on Linux, each VM that Docker Machine provisions relies on a base operating system. For convenience, there are default base operating systems. For the Oracle Virtual Box driver, this base operating system is &lt;a href=&quot;https://github.com/boot2docker/boot2docker&quot;&gt;boot2docker&lt;/a&gt;. For drivers used to connect to cloud providers, the base operating system is Ubuntu 12.04+. You can change this default when you create a machine. The Docker Machine reference includes a complete &lt;a href=&quot;../drivers/os-base/index&quot;&gt;list of supported operating systems&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38aa37dff4e89a7e803a1952018b989400252610" translate="yes" xml:space="preserve">
          <source>Since Docker runs on so many platforms, it&amp;rsquo;s easy to move your applications around. You can easily move an application from a testing environment into the cloud and back whenever you need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2de5a07ba8674f9d7b2998d4298ba70928bbe0" translate="yes" xml:space="preserve">
          <source>Since Nginx is a web service, it works much better if you publish port 80 to clients outside the swarm. You can specify this when you create the service, using the &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--publish&lt;/code&gt; flag. When updating an existing service, the flag is &lt;code&gt;--publish-add&lt;/code&gt;. There is also a &lt;code&gt;--publish-rm&lt;/code&gt; flag to remove a port that was previously published.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e05ae80436af1313e8f7adc68946a80f734165" translate="yes" xml:space="preserve">
          <source>Since TLS connections can be made through IP address as well as DNS name, the IP addresses need to be specified when creating the certificate. For example, to allow connections using &lt;code&gt;10.10.10.20&lt;/code&gt; and &lt;code&gt;127.0.0.1&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49fe0dd9aceb80f89c3d2c4f59cffd0d4674e80" translate="yes" xml:space="preserve">
          <source>Since kernel memory charges are also fed to the user counter and reclamation is triggered for the container for both kinds of memory. This configuration gives the admin a unified view of memory. It is also useful for people who just want to track kernel memory usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a730f9ad9fca6826278120d4a77e76d36b88191" translate="yes" xml:space="preserve">
          <source>Since setting &lt;code&gt;ulimit&lt;/code&gt; settings in a container requires extra privileges not available in the default container, you can set these using the &lt;code&gt;--ulimit&lt;/code&gt; flag. &lt;code&gt;--ulimit&lt;/code&gt; is specified with a soft and hard limit as such: &lt;code&gt;&amp;lt;type&amp;gt;=&amp;lt;soft limit&amp;gt;[:&amp;lt;hard limit&amp;gt;]&lt;/code&gt;, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b07155c90cd09f323b7d30293f21f64fd1a311" translate="yes" xml:space="preserve">
          <source>Since we are spreading over the values of the &lt;code&gt;datacenter&lt;/code&gt; label and the service has 9 replicas, 3 replicas will end up in each datacenter. There are three nodes associated with the value &lt;code&gt;east&lt;/code&gt;, so each one will get one of the three replicas reserved for this value. There are two nodes with the value &lt;code&gt;south&lt;/code&gt;, and the three replicas for this value will be divided between them, with one receiving two replicas and another receiving just one. Finally, &lt;code&gt;west&lt;/code&gt; has a single node that will get all three replicas reserved for &lt;code&gt;west&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83465d32b7f9967e61c58da749e367e9a9eb4bc4" translate="yes" xml:space="preserve">
          <source>Single character command line options can be combined, so rather than typing &lt;code&gt;docker run -i -t --name test busybox sh&lt;/code&gt;, you can write &lt;code&gt;docker run -it --name test busybox sh&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bbd3528db3470a55f930118cea83b60e9e881c7" translate="yes" xml:space="preserve">
          <source>Single host deployments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="839e306d72683b6c0f347ccd866f66dc11e1e96c" translate="yes" xml:space="preserve">
          <source>Sister syscall of &lt;code&gt;kexec_load&lt;/code&gt; that does the same thing, slightly different arguments. Also gated by &lt;code&gt;CAP_SYS_BOOT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3be66f9f6502f4847e7ba6dbbc23372d70c122d" translate="yes" xml:space="preserve">
          <source>Sister syscall to &lt;code&gt;open_by_handle_at&lt;/code&gt;. Already gated by &lt;code&gt;CAP_DAC_READ_SEARCH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5960c0d98515079dfde862edba0bb8fc4336edaa" translate="yes" xml:space="preserve">
          <source>Size of /dev/shm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c5f5353d3380900ade1d46f5a4806d5bcd9146d" translate="yes" xml:space="preserve">
          <source>Size of &lt;code&gt;/dev/shm&lt;/code&gt;. The format is &lt;code&gt;&amp;lt;number&amp;gt;&amp;lt;unit&amp;gt;&lt;/code&gt;. &lt;code&gt;number&lt;/code&gt; must be greater than &lt;code&gt;0&lt;/code&gt;. Unit is optional and can be &lt;code&gt;b&lt;/code&gt; (bytes), &lt;code&gt;k&lt;/code&gt; (kilobytes), &lt;code&gt;m&lt;/code&gt; (megabytes), or &lt;code&gt;g&lt;/code&gt; (gigabytes). If you omit the unit, the system uses bytes. If you omit the size entirely, the system uses &lt;code&gt;64m&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ab53e998dc90025a3eea2db200892a349470b3" translate="yes" xml:space="preserve">
          <source>Size of the tmpfs mount in bytes. Unlimited by default in Linux.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c7c76d54d5b1f5e9f202414db7aba814984a2e" translate="yes" xml:space="preserve">
          <source>Skip image signing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca05e11fce9fd7c17547e4d2e022d63c26d4b37" translate="yes" xml:space="preserve">
          <source>Skip image verification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50485412ed3a7310cfe4d4eb80e113229a0d47a" translate="yes" xml:space="preserve">
          <source>Slow response times?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="716e27b821e2cbc667cb8d1b9a4c7efbf665d1b2" translate="yes" xml:space="preserve">
          <source>So far, you&amp;rsquo;ve been wrapping Docker commands in &lt;code&gt;docker-machine ssh&lt;/code&gt; to talk to the VMs. Another option is to run &lt;code&gt;docker-machine env &amp;lt;machine&amp;gt;&lt;/code&gt; to get and run a command that configures your current shell to talk to the Docker daemon on the VM. This method works better for the next step because it allows you to use your local &lt;code&gt;docker-compose.yml&lt;/code&gt; file to deploy the app &amp;ldquo;remotely&amp;rdquo; without having to copy it anywhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babe871af6f0559c19c954a9398aaedd5d5a3826" translate="yes" xml:space="preserve">
          <source>So far, you&amp;rsquo;ve pulled images by their name (and &amp;ldquo;tag&amp;rdquo;). Using names and tags is a convenient way to work with images. When using tags, you can &lt;code&gt;docker pull&lt;/code&gt; an image again to make sure you have the most up-to-date version of that image. For example, &lt;code&gt;docker pull ubuntu:14.04&lt;/code&gt; pulls the latest version of the Ubuntu 14.04 image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08aacaca21e46eafe488ca6e46eb99a18895f89d" translate="yes" xml:space="preserve">
          <source>So if &lt;code&gt;docker-machine&lt;/code&gt; is used from a GCE host, authentication occurs automatically via the built-in service account. Otherwise, &lt;a href=&quot;https://cloud.google.com/sdk/&quot;&gt;install gcloud&lt;/a&gt; and get through the oauth2 process with &lt;code&gt;gcloud auth login&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9d78fae3ff3c4d2b543fb4971407b5e7dca140" translate="yes" xml:space="preserve">
          <source>So while they do not play a role in preventing one container from accessing or affecting the data and processes of another container, they are essential to fend off some denial-of-service attacks. They are particularly important on multi-tenant platforms, like public and private PaaS, to guarantee a consistent uptime (and performance) even when some applications start to misbehave.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1b153074d7dd128621369b7336d8e3b4845398" translate="yes" xml:space="preserve">
          <source>Some &lt;code&gt;docker-machine&lt;/code&gt; commands assume that the given operation should be run on a machine named &lt;code&gt;default&lt;/code&gt; (if it exists) if no machine name is specified. Because using a local VM named &lt;code&gt;default&lt;/code&gt; is such a common pattern, this allows you to save some typing on the most frequently used Machine commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a753b0993a5008168e6770056fce9c38887ce259" translate="yes" xml:space="preserve">
          <source>Some commands to explore at this stage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ac201fd794fea70f3294f195b3e5a430debc12" translate="yes" xml:space="preserve">
          <source>Some configuration options result in containers being automatically scheduled on the same Swarm node to ensure that they work correctly. These are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafb0fe7374f7b18564cdc40544bf12148f8f7ee" translate="yes" xml:space="preserve">
          <source>Some configuration options, such as the &lt;code&gt;device_read_bps&lt;/code&gt; sub-option for &lt;a href=&quot;#blkioconfig&quot;&gt;&lt;code&gt;blkio_config&lt;/code&gt;&lt;/a&gt;, accept a byte value as a string in a format that looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c0a162087fd04063f931197afd3c6d7712d561" translate="yes" xml:space="preserve">
          <source>Some configuration options, such as the &lt;code&gt;interval&lt;/code&gt; and &lt;code&gt;timeout&lt;/code&gt; sub-options for &lt;a href=&quot;#healthcheck&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt;, accept a duration as a string in a format that looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46cd0796284de88ecc0aa476e6a784afa96410f1" translate="yes" xml:space="preserve">
          <source>Some configuration options, such as the &lt;code&gt;interval&lt;/code&gt; and &lt;code&gt;timeout&lt;/code&gt; sub-options for &lt;a href=&quot;#healthcheck&quot;&gt;&lt;code&gt;healthcheck&lt;/code&gt;&lt;/a&gt;, accept a duration as a string in a format that looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dee53d8d29ba6010522d2f790215c6540a78c2f" translate="yes" xml:space="preserve">
          <source>Some configuration options, such as the &lt;code&gt;shm_size&lt;/code&gt; sub-option for &lt;a href=&quot;#build&quot;&gt;&lt;code&gt;build&lt;/code&gt;&lt;/a&gt;, accept a byte value as a string in a format that looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb4d541f3968fceef700c3d4f24de08e7473292" translate="yes" xml:space="preserve">
          <source>Some flags of &lt;code&gt;service update&lt;/code&gt; support the use of templating. See &lt;a href=&quot;../service_create/index#templating&quot;&gt;&lt;code&gt;service create&lt;/code&gt;&lt;/a&gt; for the reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88658b13b924770e592ba43818196f821aa6f000" translate="yes" xml:space="preserve">
          <source>Some good news is, you have technically been working with stacks since part 3, when you created a Compose file and used &lt;code&gt;docker stack deploy&lt;/code&gt;. But that was a single service stack running on a single host, which is not usually what takes place in production. Here, you can take what you&amp;rsquo;ve learned, make multiple services relate to each other, and run them on multiple machines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c957f7e6cfbbb2d392a7658547844fdcdd57ef80" translate="yes" xml:space="preserve">
          <source>Some images (e.g., Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eaf166b4a3df973a4505c8ecd2326d5a677f4d9" translate="yes" xml:space="preserve">
          <source>Some network driver plugins are listed in &lt;a href=&quot;../legacy_plugins/index&quot;&gt;plugins&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101844b45ea0771f08622fd6812f9b39659f34fe" translate="yes" xml:space="preserve">
          <source>Some of the more advanced features of DCT require the Notary CLI. To install and configure the Notary CLI:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49d0881199ba2232caad52ec77b2febc977f01f" translate="yes" xml:space="preserve">
          <source>Some options can be reconfigured when the daemon is running without requiring to restart the process. We use the &lt;code&gt;SIGHUP&lt;/code&gt; signal in Linux to reload, and a global event in Windows with the key &lt;code&gt;Global\docker-daemon-config-$PID&lt;/code&gt;. The options can be modified in the configuration file but still will check for conflicts with the provided flags. The daemon fails to reconfigure itself if there are conflicts, but it won&amp;rsquo;t stop execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41d97624677d27241c00765db0e3f6a950b1286" translate="yes" xml:space="preserve">
          <source>Some tags represent discrete releases, such as &lt;code&gt;ubuntu:16.04&lt;/code&gt;. Tags like this almost always resolve to a stable digest over time. It is recommended that you use this kind of tag when possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6110c03a31baa3b7d8a557bd95ca6de6e469417" translate="yes" xml:space="preserve">
          <source>Some volume drivers may take options to customize the volume creation. Use the &lt;code&gt;-o&lt;/code&gt; or &lt;code&gt;--opt&lt;/code&gt; flags to pass driver options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430834a33480201fcd2331b56e2f14d17b6fc61e" translate="yes" xml:space="preserve">
          <source>Sometimes it may be helpful to re-run Machine&amp;rsquo;s provisioning process on a created machine. Reasons for doing so may include a failure during the original provisioning process, or a drift from the desired system state (including the originally specified Swarm or Engine configuration).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f7c8b1d797a622af9c451daacbb24ef9951481" translate="yes" xml:space="preserve">
          <source>Sometimes you need to connect to the Docker host from within your container. To enable this, pass the Docker host&amp;rsquo;s IP address to the container using the &lt;code&gt;--add-host&lt;/code&gt; flag. To find the host&amp;rsquo;s address, use the &lt;code&gt;ip addr show&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b2c0ba744dcd455c9e9c62f488906bbb296413" translate="yes" xml:space="preserve">
          <source>Sometimes, multiple options can call for a more complex value string as for &lt;code&gt;-v&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa5b6c7978488ed46c475c6e151be4c38661b0e" translate="yes" xml:space="preserve">
          <source>Sometimes, such as planned maintenance times, you need to set a node to &lt;code&gt;DRAIN&lt;/code&gt; availability. &lt;code&gt;DRAIN&lt;/code&gt; availability prevents a node from receiving new tasks from the swarm manager. It also means the manager stops tasks running on the node and launches replica tasks on a node with &lt;code&gt;ACTIVE&lt;/code&gt; availability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="617513d0ed9c83344cd4f4f17fb4d88bdeb0258b" translate="yes" xml:space="preserve">
          <source>Specifications of one or more certificate signing endpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69c6e278744fa409d67940ced83a3a98238dc1a" translate="yes" xml:space="preserve">
          <source>Specifics for NodeJS containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="561336af6a807321978b4fa6498b7b02dcedd362" translate="yes" xml:space="preserve">
          <source>Specifies a custom VHDX to boot a utility VM, as an alternate to kernel and initrd booting. Defaults to &lt;code&gt;uvm.vhdx&lt;/code&gt; under &lt;code&gt;lcow.kirdpath&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744af710fb59f4a0393b50d2ce578d70e1e72ce9" translate="yes" xml:space="preserve">
          <source>Specifies a custom block storage device to use for the thin pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33fdd3fbad59c6ed4c223270404d3b70666746e3" translate="yes" xml:space="preserve">
          <source>Specifies a custom blockdevice to use for data for the thin pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57da1b15b9b463f5cf1c8aaac4d69e18cf570e8" translate="yes" xml:space="preserve">
          <source>Specifies a custom blockdevice to use for metadata for the thin pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ef3809c305feeae43a3d89aae5dce09c5952ec" translate="yes" xml:space="preserve">
          <source>Specifies a custom blocksize to use for the thin pool. The default blocksize is 64K.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcfa3e73a3a6ef200bbef93b68b783dcb2c021bb" translate="yes" xml:space="preserve">
          <source>Specifies additional boot parameters for booting utility VMs when in kernel/ initrd mode. Ignored if the utility VM is booting from VHD. These settings are kernel specific.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af37b47221bf3bc564978447d6a02a074219401a" translate="yes" xml:space="preserve">
          <source>Specifies extra mkfs arguments to be used when creating the base device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f696595beb8d4919a7438dc486df04fbf7c2c39" translate="yes" xml:space="preserve">
          <source>Specifies extra mount options used when mounting the thin devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b04e78e6db0adf2a0057915a1146296479ae19da" translate="yes" xml:space="preserve">
          <source>Specifies the Linode StackScript to use to create the instance, either by numeric ID, or using the form &lt;em&gt;username&lt;/em&gt;/&lt;em&gt;label&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb6237f2c37c00c41b0d721afe3e41e56734730" translate="yes" xml:space="preserve">
          <source>Specifies the TTL (time-to-live) in seconds which is used by the discovery module to timeout a node if a valid heartbeat is not received within the configured ttl value. If not configured, the default value is 60 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d83fca9d5a8216305e5df72be9f09f83c02de45" translate="yes" xml:space="preserve">
          <source>Specifies the filename of a kernel file located in the &lt;code&gt;lcow.kirdpath&lt;/code&gt; path. Defaults to &lt;code&gt;bootx64.efi&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e360d6144617e80a394db5c873e8ca4975a071" translate="yes" xml:space="preserve">
          <source>Specifies the filename of an initrd file located in the &lt;code&gt;lcow.kirdpath&lt;/code&gt; path. Defaults to &lt;code&gt;initrd.img&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec8c906970c5cf61250aa83e1eff3ba5f4135f8d" translate="yes" xml:space="preserve">
          <source>Specifies the filesystem type to use for the base device. The supported options are &amp;ldquo;ext4&amp;rdquo; and &amp;ldquo;xfs&amp;rdquo;. The default is &amp;ldquo;xfs&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c733f3afce8fbd47b836d21c9aa313c2a4f7eeae" translate="yes" xml:space="preserve">
          <source>Specifies the folder path to the location of a pair of kernel and initrd files used for booting a utility VM. Defaults to &lt;code&gt;%ProgramFiles%\Linux Containers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec0079230c1cc2feb9dbaabcb5628559d88201f" translate="yes" xml:space="preserve">
          <source>Specifies the heartbeat timer in seconds which is used by the daemon as a &lt;code&gt;keepalive&lt;/code&gt; mechanism to make sure discovery module treats the node as alive in the cluster. If not configured, the default value is 20 seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380c9385dbeb556a8124a1d6abf514ee501b86e2" translate="yes" xml:space="preserve">
          <source>Specifies the maximum number of retries XFS should attempt to complete IO when ENOSPC (no space) error is returned by underlying storage device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852af5c9c9c5a5d0ad6b1bd626c3573cadefde9d" translate="yes" xml:space="preserve">
          <source>Specifies the maxmimum &lt;code&gt;libdm&lt;/code&gt; log level that will be forwarded to the &lt;code&gt;dockerd&lt;/code&gt; log (as specified by &lt;code&gt;--log-level&lt;/code&gt;). This option is primarily intended for debugging problems involving &lt;code&gt;libdm&lt;/code&gt;. Using values other than the defaults may cause false-positive warnings to be logged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af918c8af8deb29558516f122ca364874de3f93" translate="yes" xml:space="preserve">
          <source>Specifies the min free space percent in a thin pool require for new device creation to succeed. This check applies to both free data space as well as free metadata space. Valid values are from 0% - 99%. Value 0% disables free space checking logic. If user does not specify a value for this option, the Engine uses a default value of 10%.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf62d9af903029875f628d2c5ef703975a598e69" translate="yes" xml:space="preserve">
          <source>Specifies the minimum size to use when creating the subvolume which is used for containers. If user uses disk quota for btrfs when creating or running a container with &lt;strong&gt;--storage-opt size&lt;/strong&gt; option, docker should ensure the &lt;strong&gt;size&lt;/strong&gt; cannot be smaller than &lt;strong&gt;btrfs.min_space&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="151f982cc3bce87392fbffd2f10110788136f5b5" translate="yes" xml:space="preserve">
          <source>Specifies the path in the Key/Value store. If not configured, the default value is &amp;lsquo;docker/nodes&amp;rsquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35571905f600d1513ba6a1c623b6f6e5b80f43ec" translate="yes" xml:space="preserve">
          <source>Specifies the path to a local file with PEM encoded CA certificates to trust.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ae8e0ccba69bd7b85b47e7ca1d5041116a44569" translate="yes" xml:space="preserve">
          <source>Specifies the path to a local file with a PEM encoded certificate. This certificate is used as the client cert for communication with the Key/Value store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c51983cba95c7ae3d64aa26c73c37a1aa830bbd" translate="yes" xml:space="preserve">
          <source>Specifies the path to a local file with a PEM encoded private key. This private key is used as the client key for communication with the Key/Value store.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf9c022108d06d993eab673f568df64a6e706a8" translate="yes" xml:space="preserve">
          <source>Specifies the size in GB to use when creating the sandbox which is used for containers. Defaults to 20. Cannot be less than 20.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09f10f8520c9b65b38d919e06ccb119a026cab7" translate="yes" xml:space="preserve">
          <source>Specifies the size to use when creating the base device, which limits the size of images and containers. The default value is 10G. Note, thin devices are inherently &amp;ldquo;sparse&amp;rdquo;, so a 10G device which is mostly empty doesn&amp;rsquo;t use 10 GB of space on the pool. However, the filesystem will use more space for the empty case the larger the device is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233268107faa95a4813c03dafd13d2c3ae7c04c6" translate="yes" xml:space="preserve">
          <source>Specifies the size to use when creating the loopback file for the &amp;ldquo;data&amp;rdquo; device which is used for the thin pool. The default size is 100G. The file is sparse, so it will not initially take up this much space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda06eba4a29ac7d89c5e75178d259ee5eed38aa" translate="yes" xml:space="preserve">
          <source>Specifies the size to use when creating the loopback file for the &amp;ldquo;metadata&amp;rdquo; device which is used for the thin pool. The default size is 2G. The file is sparse, so it will not initially take up this much space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46842517a0a6a7e0231d445d942da40f2de977fd" translate="yes" xml:space="preserve">
          <source>Specifies the size to use when creating the sandbox which is used for containers. Defaults to 20G.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa513a760e279234a678035fb0fbb0530a8c327" translate="yes" xml:space="preserve">
          <source>Specifies the timeout for utility VM operations in seconds. Defaults to 300.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d793231477e210dc5dd974ed49f23d2fcd65a416" translate="yes" xml:space="preserve">
          <source>Specifies whether the daemon instantiates utility VM instances as required (recommended and default if omitted), or uses single global utility VM (better performance, but has security implications and not recommended for production deployments).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d32480b340d093c754a523623914a11d464d85" translate="yes" xml:space="preserve">
          <source>Specify a Dockerfile (-f)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf261f92155b66b1d6f67219ea47ef879365bac0" translate="yes" xml:space="preserve">
          <source>Specify a build&amp;rsquo;s container isolation technology. On Linux, the only supported value is &lt;code&gt;default&lt;/code&gt;. On Windows, acceptable values are &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;process&lt;/code&gt; and &lt;code&gt;hyperv&lt;/code&gt;. Refer to the &lt;a href=&quot;../../../engine/reference/commandline/run/index#specify-isolation-technology-for-container---isolation&quot;&gt;Docker Engine docs&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7edb9afd991f8be02dd477335c6500974f1f91d" translate="yes" xml:space="preserve">
          <source>Specify a container&amp;rsquo;s isolation technology. On Linux, the only supported value is &lt;code&gt;default&lt;/code&gt;. On Windows, acceptable values are &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;process&lt;/code&gt; and &lt;code&gt;hyperv&lt;/code&gt;. Refer to the &lt;a href=&quot;../../../engine/reference/commandline/run/index#specify-isolation-technology-for-container---isolation&quot;&gt;Docker Engine docs&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4111f7777474a5b335a0c553d93fa4c82f30f9cd" translate="yes" xml:space="preserve">
          <source>Specify a container&amp;rsquo;s isolation technology. On Linux, the only supported value is &lt;code&gt;default&lt;/code&gt;. On Windows, acceptable values are &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;process&lt;/code&gt; and &lt;code&gt;hyperv&lt;/code&gt;. Refer to the &lt;a href=&quot;../../engine/reference/commandline/run/index#specify-isolation-technology-for-container---isolation&quot;&gt;Docker Engine docs&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b31675a03ef7bc53e72b98e106eab1e695a0a3" translate="yes" xml:space="preserve">
          <source>Specify a custom container name, rather than a generated default name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0abed03f4729cf208149fed6522624d430ff8398" translate="yes" xml:space="preserve">
          <source>Specify a default volume driver to be used for all declared volumes on this service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51a0e3124020f1fb8958739f176872cdf6c4f34" translate="yes" xml:space="preserve">
          <source>Specify a list of link-local IPs. Link-local IPs are special IPs which belong to a well known subnet and are purely managed by the operator, usually dependent on the architecture where they are deployed. Therefore they are not managed by docker (IPAM driver).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d7e76a98934478b4a2ddb0d20c2e1904b71e90" translate="yes" xml:space="preserve">
          <source>Specify a list of options as key-value pairs to pass to the driver for this network. Those options are driver-dependent - consult the driver&amp;rsquo;s documentation for more information. Optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06dd3e48e9e1d50d42e9eeaaac046760d14e8efc" translate="yes" xml:space="preserve">
          <source>Specify a list of options as key-value pairs to pass to the driver for this volume. Those options are driver-dependent - consult the driver&amp;rsquo;s documentation for more information. Optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad324a3aa47ea8d9677554e263a51ae52c6c548f" translate="yes" xml:space="preserve">
          <source>Specify a log driver. The default is &lt;code&gt;json-file&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac54f799c5f3e9798a6dacb72f8c6b0d6117195d" translate="yes" xml:space="preserve">
          <source>Specify a named volume, and use a volume driver which is capable of mounting the volume into the container regardless of what node it&amp;rsquo;s scheduled on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba8f340c4c0c49fa611e436317395b2c03fed0d" translate="yes" xml:space="preserve">
          <source>Specify a priority to indicate in which order Compose should connect the service&amp;rsquo;s containers to its networks. If unspecified, the default value is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2f6c798a2908bc37e26449161494f24730a8e3" translate="yes" xml:space="preserve">
          <source>Specify a service discovery method for external clients connecting to a swarm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbab0fd584d0790b5379727e15add0cb9965bd1e" translate="yes" xml:space="preserve">
          <source>Specify a static IP address for containers for this service when joining the network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9decc05c14ab3b42e0aa40a3e5df2a8740ef9a6b" translate="yes" xml:space="preserve">
          <source>Specify additional groups (by name or number) which the user inside the container should be a member of. Groups must exist in both the container and the host system to be added. An example of where this is useful is when multiple containers (running as different users) need to all read or write the same file on the host system. That file can be owned by a group shared by all the containers, and specified in &lt;code&gt;group_add&lt;/code&gt;. See the &lt;a href=&quot;../../../engine/reference/run/index#additional-groups&quot;&gt;Docker documentation&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9fb31080be018d6765e67557f8634506c34a27a" translate="yes" xml:space="preserve">
          <source>Specify advanced options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61832c01954334e40dcfa1a23369b6591e10f587" translate="yes" xml:space="preserve">
          <source>Specify an init process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be930496ddf55ac82b9e08f2bd829578818197ea" translate="yes" xml:space="preserve">
          <source>Specify an optional parent cgroup for the container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f82e0c4d9243aafb1ece8085ad6a45a5e1675f8" translate="yes" xml:space="preserve">
          <source>Specify an output format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="999359c632a42858512517a599327084c8c43019" translate="yes" xml:space="preserve">
          <source>Specify configuration related to the deployment and running of services. This only takes effect when deploying to a &lt;a href=&quot;../../engine/swarm/index&quot;&gt;swarm&lt;/a&gt; with &lt;a href=&quot;../../engine/reference/commandline/stack_deploy/index&quot;&gt;docker stack deploy&lt;/a&gt;, and is ignored by &lt;code&gt;docker-compose up&lt;/code&gt; and &lt;code&gt;docker-compose run&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0d34539109b4d7b2c210ff01ff981a59feedc4" translate="yes" xml:space="preserve">
          <source>Specify configurations to expose to the service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1a313c0d21cd3571d49145e803e357d76a4bcc" translate="yes" xml:space="preserve">
          <source>Specify custom IPAM config. This is an object with several properties, each of which is optional:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fd4599067e81ebe4730c9c33bac4e4f4d8061e9" translate="yes" xml:space="preserve">
          <source>Specify custom cgroups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a9b7f78dd3f4411518e6e9d990a1bc4b5cb0408" translate="yes" xml:space="preserve">
          <source>Specify custom networks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="798bea3dea20310ebaf012045e6443e320884ab3" translate="yes" xml:space="preserve">
          <source>Specify engine image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7364ee8bef1ddbac359e0bb5046726f437a29c3" translate="yes" xml:space="preserve">
          <source>Specify engine image (default uses the same image as currently running)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2cfa6fcf2fe4163142c6948b1afa4871556b789" translate="yes" xml:space="preserve">
          <source>Specify engine version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06317db05b2fe8c754768b2a5b864b14918ce85d" translate="yes" xml:space="preserve">
          <source>Specify engine version (default is to use currently running version)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b833e95022c6ff724cc8d516d2adea62cc1070a" translate="yes" xml:space="preserve">
          <source>Specify hard limits on memory available to containers (-m, --memory)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df839921eb37c1566bf114cc5cfaf8e392d7329" translate="yes" xml:space="preserve">
          <source>Specify how long to wait when attempting to stop a container if it doesn&amp;rsquo;t handle SIGTERM (or whatever stop signal has been specified with &lt;a href=&quot;#stopsignal&quot;&gt;&lt;code&gt;stop_signal&lt;/code&gt;&lt;/a&gt;), before sending SIGKILL. Specified as a &lt;a href=&quot;#specifying-durations&quot;&gt;duration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca62de43b5a1921d4538c16e674f0fde29f0764" translate="yes" xml:space="preserve">
          <source>Specify isolation mode (Windows)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af5729a972dfe0dcb659e55b9138d2e6da6dd91" translate="yes" xml:space="preserve">
          <source>Specify isolation technology for container (--isolation)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3956a87558f28da851cb04654b5bfda4cc43a7" translate="yes" xml:space="preserve">
          <source>Specify labels for the service. These labels are &lt;em&gt;only&lt;/em&gt; set on the service, and &lt;em&gt;not&lt;/em&gt; on any containers for the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04820af3ff16e7010bf7add7fd72672713dc70f8" translate="yes" xml:space="preserve">
          <source>Specify logging options as key-value pairs. An example of &lt;code&gt;syslog&lt;/code&gt; options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6514d97e101b986cdde4fcc34dae51aae6e8c2c" translate="yes" xml:space="preserve">
          <source>Specify logging options for the logging driver with the &lt;code&gt;options&lt;/code&gt; key, as with the &lt;code&gt;--log-opt&lt;/code&gt; option for &lt;code&gt;docker run&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d717b36c45be3002b450fc8cd1615110252b1315" translate="yes" xml:space="preserve">
          <source>Specify maximum replicas per node (--replicas-max-per-node)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fa272949ef8a855c7088cc1906dc33ce44f159" translate="yes" xml:space="preserve">
          <source>Specify placement of constraints and preferences. See the docker service create documentation for a full description of the syntax and available types of &lt;a href=&quot;../../engine/reference/commandline/service_create/index#specify-service-constraints-constraint&quot;&gt;constraints&lt;/a&gt; and &lt;a href=&quot;../../engine/reference/commandline/service_create/index#specify-service-placement-preferences-placement-pref&quot;&gt;preferences&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5e4e386240132f49ce249eed2b20f3403a84b2" translate="yes" xml:space="preserve">
          <source>Specify secrets to expose to the service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9821752bdc257f10f58540bb9e4e8ecd8b10e30b" translate="yes" xml:space="preserve">
          <source>Specify service constraints (--constraint)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9bfab0d41bcd5f832d0a81e8964755feb7bfd17" translate="yes" xml:space="preserve">
          <source>Specify service placement preferences (--placement-pref)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582b2469cad5a90092e5dc87af8bf105ce9941fb" translate="yes" xml:space="preserve">
          <source>Specify the IP address a container will use on a given network</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233fe7a35a50c815b5143bec69f10f0b9d2109af" translate="yes" xml:space="preserve">
          <source>Specify the default number of containers to deploy for this service. Whenever you run &lt;code&gt;docker-compose up&lt;/code&gt;, Compose creates or removes containers to match the specified number. This value can be overridden using the &lt;a href=&quot;../../reference/up/index&quot;&gt;&lt;code&gt;--scale&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5af6ed86187e5b634c362c56aebdf3ce72a947" translate="yes" xml:space="preserve">
          <source>Specify the image to start the container from. Can either be a repository/tag or a partial image ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb76783e6177b7dc3c19b7532cb984c3405753d" translate="yes" xml:space="preserve">
          <source>Specify the image version a service should use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50d3721619a5399214d033576d1dd58db0c418e" translate="yes" xml:space="preserve">
          <source>Specify the path to a Compose file. If not provided, Compose looks for a file named &lt;code&gt;docker-compose.yml&lt;/code&gt; in the current directory and then each parent directory in succession until a file by that name is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3302730d615f03a511ec47f87f11817380c474a8" translate="yes" xml:space="preserve">
          <source>Specify volume driver name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37789fdfe7ed5d6f1f03e0a66e503e9b994bf891" translate="yes" xml:space="preserve">
          <source>Specify volume name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50fb935a6abbbaa6eea91749db4899e40d2757c" translate="yes" xml:space="preserve">
          <source>Specify which driver should be used for this network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a075c74cbab2f48fc8f9a6cb0cd35ebf42ea4166" translate="yes" xml:space="preserve">
          <source>Specify which runtime to use for the service&amp;rsquo;s containers. Default runtime and available runtimes are listed in the output of &lt;code&gt;docker info&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a5eadd030cb9c28b646378a55077afb758bfd8" translate="yes" xml:space="preserve">
          <source>Specify which volume driver should be used for this volume. Defaults to whatever driver the Docker Engine has been configured to use, which in most cases is &lt;code&gt;local&lt;/code&gt;. If the driver is not available, the Engine returns an error when &lt;code&gt;docker-compose up&lt;/code&gt; tries to create the volume.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111a58131d7e50859927e08afea9ef62f02aad1c" translate="yes" xml:space="preserve">
          <source>Specifying Docker Swarm options for the created machine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa83cb63a7f3d3efa5dfca4ed1d4590f5a10a93e" translate="yes" xml:space="preserve">
          <source>Specifying a &lt;code&gt;volumedriver&lt;/code&gt; in conjunction with a &lt;code&gt;volumename&lt;/code&gt; allows you to use plugins such as &lt;a href=&quot;https://github.com/ScatterHQ/flocker&quot;&gt;Flocker&lt;/a&gt; to manage volumes external to a single host, such as those on EBS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d87e4212392b8b03739d90a13bc123ae68f30a" translate="yes" xml:space="preserve">
          <source>Specifying a path to a single Compose file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7a30a3ddf082c7f99c1a83715d69101f2411502" translate="yes" xml:space="preserve">
          <source>Specifying a port is optional. If the value is a bare IP address or interface name, the default port 2377 will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e01d6b3452bb41a462606762e225e00906eeace" translate="yes" xml:space="preserve">
          <source>Specifying a port is optional. If the value is a bare IP address, or interface name, the default port 2377 will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af33864b82fafe4657206944c811117b06133d39" translate="yes" xml:space="preserve">
          <source>Specifying a restart policy like &lt;code&gt;restart: always&lt;/code&gt; to avoid downtime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb527373afbf3a2f8fc6e9cb9af2cb95bf926cef" translate="yes" xml:space="preserve">
          <source>Specifying byte values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7934a0005549b6dc0a85f846f03776a96fdc2df1" translate="yes" xml:space="preserve">
          <source>Specifying configuration options for the created Docker engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7235dd014aee3d2c6238edb7eb2318d832b1c13" translate="yes" xml:space="preserve">
          <source>Specifying durations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40b977fa2f0005ae32498a89f0f12e9593e8b11" translate="yes" xml:space="preserve">
          <source>Specifying file paths for remote deployments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97dae088d88537369e3160aebc02d7f69fc34d27" translate="yes" xml:space="preserve">
          <source>Specifying multiple Compose files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e79341474a7e17f4d88534f67538eaa95dc565d" translate="yes" xml:space="preserve">
          <source>Specifying multiple label filter produces an &amp;ldquo;and&amp;rdquo; search; all conditions should be met;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a520b825804d43a417810df193a005c3d7d7fe0" translate="yes" xml:space="preserve">
          <source>Specifying target build stage (--target)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc5cee852a6d504796afa555c4ad16393dcea186" translate="yes" xml:space="preserve">
          <source>Specifying the &lt;code&gt;--isolation&lt;/code&gt; flag without a value is the same as setting &lt;code&gt;--isolation=&quot;default&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53b9003cfa91da59a4bc9a69340ee2329ece59e" translate="yes" xml:space="preserve">
          <source>Specifying your own configuration files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1247852c635f26fbb8bdba9149447868be10e1e" translate="yes" xml:space="preserve">
          <source>Splunk logging driver for Docker. Writes log messages to &lt;code&gt;splunk&lt;/code&gt; using Event Http Collector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c64f053ffd3e54020cf2d6f34559b4144f1e75" translate="yes" xml:space="preserve">
          <source>Squash an image&amp;rsquo;s layers (--squash) (experimental)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36db51fc21b79dcf4de5db8507894d97af8fd5e" translate="yes" xml:space="preserve">
          <source>Squash newly built layers into a single new layer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76636d61e7e85851794efdd0f948bee568c70801" translate="yes" xml:space="preserve">
          <source>Squashing layers can be beneficial if your Dockerfile produces multiple layers modifying the same files, for example, files that are created in one step, and removed in another step. For other use-cases, squashing images may actually have a negative impact on performance; when pulling an image consisting of multiple layers, layers can be pulled in parallel, and allows sharing layers between images (saving space).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8343c061ba70e28158fb6e5416bb2e7f5ceb22a" translate="yes" xml:space="preserve">
          <source>Stable channel follows semantic versioning. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e5a0d3d2ef19df258412a4d3ef3f9533b0c0c1" translate="yes" xml:space="preserve">
          <source>Stack</source>
          <target state="translated">Stack</target>
        </trans-unit>
        <trans-unit id="7507e935861cbd42421bfb4f15fdddd02577ee05" translate="yes" xml:space="preserve">
          <source>Stack name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a30b81fe09c038ce4b150e63ce45f02e464faf3" translate="yes" xml:space="preserve">
          <source>Stack services by adding a backend database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f460d12fc7ce15c316a9e98f88a441979dc42ade" translate="yes" xml:space="preserve">
          <source>Stackable: You can stack services vertically and on-the-fly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed4aaaa670f63e159638e91c562cc0f51319bec4" translate="yes" xml:space="preserve">
          <source>Stacks and swarms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b82e8060b605a89a3a395a0045fde2ee4400e05" translate="yes" xml:space="preserve">
          <source>Stacks are managed using the &lt;code&gt;docker stack&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa20916e150351940562fbb40bd0248bf6ddea3" translate="yes" xml:space="preserve">
          <source>Start Docker on the new node. Unlock the swarm if necessary. Re-initialize the swarm using the following command, so that this node does not attempt to connect to nodes that were part of the old swarm, and presumably no longer exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626ac1fa3ad9114995b017f294d64632864e5a07" translate="yes" xml:space="preserve">
          <source>Start a container from the &lt;code&gt;hello-world&lt;/code&gt; image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a99cb3be4d5b3136371daf05a55b2acf270d16f" translate="yes" xml:space="preserve">
          <source>Start a container in the background.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da283f2aa0636a692bfa208a3a51dc234c966c3" translate="yes" xml:space="preserve">
          <source>Start a container running a redis server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b02daf49eaa0928ce9f64cff40c61eb9d453776" translate="yes" xml:space="preserve">
          <source>Start a container that uses the volume &lt;code&gt;sshvolume&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d90811ef4ca43724384915fe28fda157e2455c" translate="yes" xml:space="preserve">
          <source>Start an &amp;ldquo;elevated&amp;rdquo; PowerShell (run it as administrator). Search for PowerShell, right-click, and choose &lt;strong&gt;Run as administrator&lt;/strong&gt;. When asked if you want to allow this app to make changes to your device, click &lt;strong&gt;Yes&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="129fe3e37bf9dc3bc37ea0f7c92cbe6d7f9999f3" translate="yes" xml:space="preserve">
          <source>Start an &amp;ldquo;elevated&amp;rdquo; PowerShell with administrator privileges. To do this, search for PowerShell, then right click and choose &lt;strong&gt;&lt;em&gt;Run as administrator&lt;/em&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3333aa45c00822a0747a7bb5ef26da0e0503a16c" translate="yes" xml:space="preserve">
          <source>Start and stop machines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f195823eaa388f4ab5e9a9c75ef4c47f5d9400" translate="yes" xml:space="preserve">
          <source>Start by creating a new &lt;code&gt;Dockerfile&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823efc84e2fced2f32e250b12224b0a822785512" translate="yes" xml:space="preserve">
          <source>Start by setting up the files needed to build the app. App will run inside a Docker container containing its dependencies. Defining dependencies is done using a file called &lt;code&gt;Dockerfile&lt;/code&gt;. To begin with, the Dockerfile consists of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a92b35610fb091f49a89f6c006b925aeb11a90" translate="yes" xml:space="preserve">
          <source>Start local machines on startup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25c962358806e983957b384837ffeaa8e2ce7fc" translate="yes" xml:space="preserve">
          <source>Start one or more stopped containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c63a13c500db7dbab2f9726d418dc70fdc337e7" translate="yes" xml:space="preserve">
          <source>Start period for the container to initialize before counting retries towards unstable (ms|s|m|h)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9fd0add62287dd7c7a803cf1baf6a338080d92" translate="yes" xml:space="preserve">
          <source>Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc4f5892855c39d574f3f1e297a7cc1f2d49e6df" translate="yes" xml:space="preserve">
          <source>Start the container for the updated task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1db34a10f468063c739b07330673aa22b4b8240" translate="yes" xml:space="preserve">
          <source>Start with a &lt;strong&gt;docker-compose.yml&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b434f92f7c35744157efdb7d04459e6397896fc" translate="yes" xml:space="preserve">
          <source>Start with a base file that defines the canonical configuration for the services.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef1cc3e9d8b4476fd45a08b9ce44ad75b7d44de" translate="yes" xml:space="preserve">
          <source>Start with something basic like &lt;code&gt;docker run hello-world&lt;/code&gt;, or for a more interesting test, run a Dockerized webserver on your new remote machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d990c3c50eb3dc8e99b2d12efa815774a8007a1f" translate="yes" xml:space="preserve">
          <source>Start, stop, and rebuild services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239994f2a1ab618f15aa7d45be83405029c6b090" translate="yes" xml:space="preserve">
          <source>Starting in Compose file format 2.1, overlay networks are always created as &lt;code&gt;attachable&lt;/code&gt;, and this is not configurable. This means that standalone containers can connect to overlay networks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a6b96dea95cc95a6cda2c2183150b025d7b004d" translate="yes" xml:space="preserve">
          <source>Starting with Docker 17.12, new installations will not support running overlay2 on a backing filesystem without &lt;code&gt;d_type&lt;/code&gt; support. For existing installations that upgrade to 17.12, a warning will be printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b324d7f58a0a9a76d1e51739db8f4477c02956b" translate="yes" xml:space="preserve">
          <source>Starting with Docker 17.12, operations against registries supporting only the legacy v1 protocol are no longer supported. Specifically, the daemon will not attempt &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pull&lt;/code&gt; and &lt;code&gt;login&lt;/code&gt; to v1 registries. The exception to this is &lt;code&gt;search&lt;/code&gt; which can still be performed on v1 registries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202e20626aabc983d22be5ebfad40ac834351052" translate="yes" xml:space="preserve">
          <source>Starting with Docker 17.12, support for V1 registries has been removed, and the &lt;code&gt;--disable-legacy-registry&lt;/code&gt; flag can no longer be used, and &lt;code&gt;dockerd&lt;/code&gt; will fail to start when set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a1d5acca66695418d610276484ecd9818e38b1" translate="yes" xml:space="preserve">
          <source>Starting with Docker 18.09, the Docker client supports connecting to a remote daemon via SSH:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3daa08a879d0879c9476b5730f62467f433caab0" translate="yes" xml:space="preserve">
          <source>Starting with the 3.7 format (for the 3.x series) and 2.4 format (for the 2.x series), extension fields are also allowed at the root of service, volume, network, config and secret definitions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcdc62ba2e721777d0c38140afed18b3685ebfda" translate="yes" xml:space="preserve">
          <source>Starting with version 18.09, Docker supports a new backend for executing your builds that is provided by the &lt;a href=&quot;https://github.com/moby/buildkit&quot;&gt;moby/buildkit&lt;/a&gt; project. The BuildKit backend provides many benefits compared to the old implementation. For example, BuildKit can:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6920b926ba9d45cb0bd875b3cfdf1697133bf2" translate="yes" xml:space="preserve">
          <source>Starts a stopped machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d2b9361c9487610cb24d0cca8904d154dfa9ec4" translate="yes" xml:space="preserve">
          <source>Starts existing containers for a service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53f86d03e77f8e9153ee722405367011cd11327" translate="yes" xml:space="preserve">
          <source>Status code from the docker daemon</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8d10d11d34cf58fb379a86d628d620fe6b0e91" translate="yes" xml:space="preserve">
          <source>Stdout of a plugin is redirected to dockerd logs. Such entries have a &lt;code&gt;plugin=&amp;lt;ID&amp;gt;&lt;/code&gt; suffix. Here are a few examples of commands for pluginID &lt;code&gt;f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62&lt;/code&gt; and their corresponding log entries in the docker daemon logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f60cc6483c69859135c13d38dce98e911d200af" translate="yes" xml:space="preserve">
          <source>Step 1. Create a DigitalOcean account</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446e5dd851a94eba5bc5ac9afe22e8012a9bf821" translate="yes" xml:space="preserve">
          <source>Step 1. Sign up for AWS and configure credentials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a1bf5a93ef3d02049021fea5aecfe7eea8a6a1" translate="yes" xml:space="preserve">
          <source>Step 1: Setup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99bc26105f62355cd763552925ccd044adbdae92" translate="yes" xml:space="preserve">
          <source>Step 2. Generate a personal access token</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54787be28d17e12eab8777408ccb12c440df6dc4" translate="yes" xml:space="preserve">
          <source>Step 2. Use Machine to create the instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131628d7102156e24e5ef0a911ecafc5c8bd3d62" translate="yes" xml:space="preserve">
          <source>Step 2: Create a Dockerfile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75f2091b044c1eef723a39d168c7027a1a3ff44" translate="yes" xml:space="preserve">
          <source>Step 3. Run Docker commands on the new instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b013213e07f5cf2dab74104c961ff4fd3972e554" translate="yes" xml:space="preserve">
          <source>Step 3. Use Machine to create the Droplet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efbad00e418ccea01f7eb5959d8bae571f912cfc" translate="yes" xml:space="preserve">
          <source>Step 3: Define services in a Compose file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad799d6b4295a3b659d76742e3f07641fde2788" translate="yes" xml:space="preserve">
          <source>Step 4. Run Docker commands on the Droplet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71f11b381b56e7ad81eddd53b5f4f10f9a4827f" translate="yes" xml:space="preserve">
          <source>Step 4. Use Machine to remove the instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282058d6307bf105b5ddd8f02cab4d0123cfcbb9" translate="yes" xml:space="preserve">
          <source>Step 4: Build and run your app with Compose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9af7fb70cfebfdc8f349baf52c1c58e67996af6" translate="yes" xml:space="preserve">
          <source>Step 5. Use Machine to remove the Droplet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3598bccaa8174111629091efd7804116ba41d0" translate="yes" xml:space="preserve">
          <source>Step 5: Edit the Compose file to add a bind mount</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a3d4c04afaea45048c29241477da822f7b5131" translate="yes" xml:space="preserve">
          <source>Step 6: Re-build and run the app with Compose</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eba2c27c154dd50516e9e3d4e837c303c16b5f4" translate="yes" xml:space="preserve">
          <source>Step 7: Update the application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d7306c24adedc3332f5add16df20d2e2fc0165" translate="yes" xml:space="preserve">
          <source>Step 8: Experiment with some other commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045e644617996c7f2dcac803090e3bd4bc0d73ba" translate="yes" xml:space="preserve">
          <source>Stop Docker on the manager before backing up the data, so that no data is being changed during the backup. It is possible to take a backup while the manager is running (a &amp;ldquo;hot&amp;rdquo; backup), but this is not recommended and your results are less predictable when restoring. While the manager is down, other nodes continue generating swarm data that is not part of this backup.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937fec4cc739c81c59f83c8a3e6abe6851be3ca4" translate="yes" xml:space="preserve">
          <source>Stop and remove the service, and remove the config from Docker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7107a9167f8300e18db33e967f31dde68d2f18d" translate="yes" xml:space="preserve">
          <source>Stop and remove the service, and remove the secret from Docker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a816a682127758bddc5fed569b7b855689c7363" translate="yes" xml:space="preserve">
          <source>Stop container with signal (--stop-signal)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57ba07614b5ab6546e304464272d281c9f63eaf" translate="yes" xml:space="preserve">
          <source>Stop container with timeout (--stop-timeout)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6895c17762851708eb5bac03ad8ca3eb676ccfd1" translate="yes" xml:space="preserve">
          <source>Stop one or more running containers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aeaf9ef1a2e02406b9cc3ffc09255975e7a2d607" translate="yes" xml:space="preserve">
          <source>Stop the application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec504c07fa6c270d0da9e42650e14f62f0add7a" translate="yes" xml:space="preserve">
          <source>Stop the application by typing &lt;code&gt;Ctrl-C&lt;/code&gt; in the same shell in where you started it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c7757f123e0efe376b3752c69e78aa98f4ab7c" translate="yes" xml:space="preserve">
          <source>Stop the application, either by running &lt;code&gt;docker-compose down&lt;/code&gt; from within your project directory in the second terminal, or by hitting CTRL+C in the original terminal where you started the app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93290fe3ab13709b182435b8d4974e6835a74066" translate="yes" xml:space="preserve">
          <source>Stop the first task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75680d21cd14b50a9ebd570beb9a2ae0af9a0b29" translate="yes" xml:space="preserve">
          <source>Stops a running machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eea61bd4fa2a3e0a9b121d9ffa485a6809d2173" translate="yes" xml:space="preserve">
          <source>Stops containers and removes containers, networks, volumes, and images created by &lt;code&gt;up&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b951118e9948a6c3b4de37c8426d572c0fbe3fc" translate="yes" xml:space="preserve">
          <source>Stops running containers without removing them. They can be started again with &lt;code&gt;docker-compose start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63646499aa08d7423e1b2ca985c69ac86a7e0f4a" translate="yes" xml:space="preserve">
          <source>Storage driver options for the container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="884cc072208825f6f2e4754c780b281b1ba5fefd" translate="yes" xml:space="preserve">
          <source>Store configuration data using Docker Configs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b04d38df959c0e6d227818cc2547cdddae9f9e" translate="yes" xml:space="preserve">
          <source>Store the key in a safe place, such as in a password manager.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006f0ad3fbe08b80539c9c3e70750b6b950507cb" translate="yes" xml:space="preserve">
          <source>Stores its data, such as themes and plugins, in a volume called &lt;code&gt;wpdata&lt;/code&gt; so these files persist when the service restarts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed47a48d0c3c88b96af7d0fed892bf6a14e35b9a" translate="yes" xml:space="preserve">
          <source>Stream attaches to server to negotiate build context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8679968c2bf67f4a16b3bd5da7d020bcd792279f" translate="yes" xml:space="preserve">
          <source>Stream container events for every container in the project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec6b48eac0b3905e526675380a8fb4206e830ce" translate="yes" xml:space="preserve">
          <source>Stream events until this timestamp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d072cf26b939b0e1d88f14656245bbe3fa7c6609" translate="yes" xml:space="preserve">
          <source>Stream the log output of running services</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043216d9f3e00b5a223df859ceffd2315449adb4" translate="yes" xml:space="preserve">
          <source>Strings and Integers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b593997c140a731a5d59ba09ce2bd00a083909f" translate="yes" xml:space="preserve">
          <source>Stub signed notary metadata. This stages the base version of the trust metadata for the collection. It is finalized when it is published to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800dd41cc91c5b403f990f33c632d621fa91e70e" translate="yes" xml:space="preserve">
          <source>Subcommand comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f9c38f60b1ac75a78f82f0b5a74eee8146339a" translate="yes" xml:space="preserve">
          <source>Subnet for network</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2289074d9b5f7808e1a59a1da94b0fccb1750818" translate="yes" xml:space="preserve">
          <source>Subnet in CIDR format that represents a network segment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2877126c0e9c8c7e42a2d8ba9d7e4b2a39701879" translate="yes" xml:space="preserve">
          <source>Subsequent connections may be routed to the same swarm node or a different one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce0cde7d8136e06b09c4c89fb65cf1ea60607a4" translate="yes" xml:space="preserve">
          <source>Substitute environment variables in Compose files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a470207b903247d887020fc6bbc87a9418a6c0d6" translate="yes" xml:space="preserve">
          <source>Substitute the ID in the command below, or use the second variant which uses shell expansion to do it all in a single step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a015dd4d0f69cf62ed5447a5e852fdbbd0a5027" translate="yes" xml:space="preserve">
          <source>Support for extension fields at the root of service, network, and volume definitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967aeddf3a3614e61431f8096b143c71356f2252" translate="yes" xml:space="preserve">
          <source>Support for extension fields at the root of service, network, volume, secret and config definitions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19ae001069536b11c69f14d6aabfb77dfb4b4b04" translate="yes" xml:space="preserve">
          <source>Support for the &lt;code&gt;repository:shortid&lt;/code&gt; notation to reference images was removed in Docker 17.12.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01adc14c052e80a5bd62620009eec27110346735" translate="yes" xml:space="preserve">
          <source>Support for the v1 protocol to the public registry was removed in 1.13. Any mirror configurations using v1 should be updated to use a &lt;a href=&quot;https://docs.docker.com/registry/recipes/mirror/&quot;&gt;v2 registry mirror&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ee6873af9e124077db1ec930ffa0a0b57cbd09" translate="yes" xml:space="preserve">
          <source>Supported isolation modes on Windows are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4649d17b1badb25bc1777f184b75c9cb7e5cae36" translate="yes" xml:space="preserve">
          <source>Supported networks :</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08bc0a484193714777912c7d3bbe27a5022815e9" translate="yes" xml:space="preserve">
          <source>Supported scopes are &lt;code&gt;global&lt;/code&gt; and &lt;code&gt;local&lt;/code&gt;. Any other value in &lt;code&gt;Scope&lt;/code&gt; will be ignored, and &lt;code&gt;local&lt;/code&gt; is used. &lt;code&gt;Scope&lt;/code&gt; allows cluster managers to handle the volume in different ways. For instance, a scope of &lt;code&gt;global&lt;/code&gt;, signals to the cluster manager that it only needs to create the volume once instead of on each Docker host. More capabilities may be added in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3af26ad7a281052465e92fff49ddbab257bdf7fa" translate="yes" xml:space="preserve">
          <source>Suppress progress output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e334c98f9fe7f41ae1f23c9acf9873020128c5f2" translate="yes" xml:space="preserve">
          <source>Suppress the build output and print image ID on success</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3901ca907faa3864ac03ad2c97aaa363495c6a73" translate="yes" xml:space="preserve">
          <source>Suppress the load output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a532ba8ca4fd87a46e46f6d7089ecd360a814d" translate="yes" xml:space="preserve">
          <source>Suppress verbose output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741c6ce7aa0c8069cdf490e5799623fef3779e0d" translate="yes" xml:space="preserve">
          <source>Swap limit equal to memory plus swap: &amp;lsquo;-1&amp;rsquo; to enable unlimited swap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fbf0dccb4b2831b8b3adce13a1ed962a4acb1b" translate="yes" xml:space="preserve">
          <source>Swappiness constraint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7e3aec1f9179ce3325a4f7a101dca65ac905f3" translate="yes" xml:space="preserve">
          <source>Swarm</source>
          <target state="translated">Swarm</target>
        </trans-unit>
        <trans-unit id="e4ed1be1429c6e35a46aae81195c76c4b9863056" translate="yes" xml:space="preserve">
          <source>Swarm Size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7061eb23fddaf59b8559c92b20819b3be5e1ad8" translate="yes" xml:space="preserve">
          <source>Swarm This command works with the Swarm orchestrator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7300f251fbc5e3c7a467fd4d5296d2557449953" translate="yes" xml:space="preserve">
          <source>Swarm administration guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e4c96192f8509c9bb3e136e75f0e1975bcf48b" translate="yes" xml:space="preserve">
          <source>Swarm also shows you the &lt;code&gt;DESIRED STATE&lt;/code&gt; and &lt;code&gt;CURRENT STATE&lt;/code&gt; of the service task so you can see if tasks are running according to the service definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4754f16ca01958977afa898a1488267c2ef38420" translate="yes" xml:space="preserve">
          <source>Swarm can build an image from a Dockerfile just like a single-host Docker instance can, but the resulting image only lives on a single node and won&amp;rsquo;t be distributed to other nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3e524420714ddc93ac6507f1b73dce5e53afa76" translate="yes" xml:space="preserve">
          <source>Swarm is resilient to failures and the swarm can recover from any number of temporary node failures (machine reboots or crash with restart) or other transient errors. However, a swarm cannot automatically recover if it loses a quorum. Tasks on existing worker nodes continue to run, but administrative tasks are not possible, including scaling or updating services and joining or removing nodes from the swarm. The best way to recover is to bring the missing manager nodes back online. If that is not possible, continue reading for some options for recovering your swarm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6442e81af9cbf9c0b94a86a481956c86ca27fb4" translate="yes" xml:space="preserve">
          <source>Swarm management commands like &lt;code&gt;docker node ls&lt;/code&gt; only work on manager nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fcc42b37a436d0c0418bdc8015e889e482d27e1" translate="yes" xml:space="preserve">
          <source>Swarm manager nodes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddec52a50a2a2947b9ec1e6040136a4e7dbadf61" translate="yes" xml:space="preserve">
          <source>Swarm manager nodes use the &lt;a href=&quot;../raft/index&quot;&gt;Raft Consensus Algorithm&lt;/a&gt; to manage the swarm state. You only need to understand some general concepts of Raft in order to manage a swarm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd8ff7ebeb3553cbb63a670bdd2ff23e3829aa1" translate="yes" xml:space="preserve">
          <source>Swarm managers are the only machines in a swarm that can execute your commands, or authorize other machines to join the swarm as &lt;strong&gt;workers&lt;/strong&gt;. Workers are just there to provide capacity and do not have the authority to tell any other machine what it can and cannot do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f5ed8e9c500c6962cf67749ae987b4d5a23f81" translate="yes" xml:space="preserve">
          <source>Swarm managers can use several strategies to run containers, such as &amp;ldquo;emptiest node&amp;rdquo; -- which fills the least utilized machines with containers. Or &amp;ldquo;global&amp;rdquo;, which ensures that each machine gets exactly one instance of the specified container. You instruct the swarm manager to use these strategies in the Compose file, just like the one you have already been using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7fd37ae8336f9822c0a35b073355935d50afa1" translate="yes" xml:space="preserve">
          <source>Swarm mode CLI commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918f6983469d35568ae4ec77e8b87a1d9003c13a" translate="yes" xml:space="preserve">
          <source>Swarm mode has an internal DNS component that automatically assigns each service in the swarm a DNS entry. The swarm manager uses &lt;strong&gt;internal load balancing&lt;/strong&gt; to distribute requests among services within the cluster based upon the DNS name of the service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe51de46942e95d932311a2c837d60af411bfec" translate="yes" xml:space="preserve">
          <source>Swarm mode has two types of services: replicated and global. For replicated services, you specify the number of replica tasks for the swarm manager to schedule onto available nodes. For global services, the scheduler places one task on each available node that meets the service&amp;rsquo;s &lt;a href=&quot;#placement-constraints&quot;&gt;placement constraints&lt;/a&gt; and &lt;a href=&quot;#reserve-memory-or-cpus-for-a-service&quot;&gt;resource requirements&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52664559c842c57200d6a83486e779002062d938" translate="yes" xml:space="preserve">
          <source>Swarm mode key concepts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87cab292a7e70566643fc912223428d30b7b33d7" translate="yes" xml:space="preserve">
          <source>Swarm mode key concepts and tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71855985656d0464da853e4bf6c5578e593c58cc" translate="yes" xml:space="preserve">
          <source>Swarm mode overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b6def84bf7d6461365b0ffa3c581b47dbd97ce" translate="yes" xml:space="preserve">
          <source>Swarm mode supersedes Docker Machine provisioning of swarm clusters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dcd8e643a3749b7cd6361b80d5baad940e61310" translate="yes" xml:space="preserve">
          <source>Swarm mode tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931d668515d187420dd080904ee5a1dccc7a83a1" translate="yes" xml:space="preserve">
          <source>Swarm now allows using a Docker Config as a gMSA credential spec - a requirement for Active Directory-authenticated applications. This reduces the burden of distributing credential specs to the nodes they&amp;rsquo;re used on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7798faab4e743a2fe9c2cacb56f4705e77e9f531" translate="yes" xml:space="preserve">
          <source>Swarm offers a rich set of scheduling and affinity hints, enabling you to control where containers are located. They are specified via container environment variables, so you can use Compose&amp;rsquo;s &lt;code&gt;environment&lt;/code&gt; option to set them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392c530058a83e31027ede0b5bb958518ed002df" translate="yes" xml:space="preserve">
          <source>Swarm services allow you to use resource constraints, placement preferences, and labels to ensure that your service is deployed to the appropriate swarm nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64eaab32c71472ef4eeea7a1ebd43a3c3621cf13" translate="yes" xml:space="preserve">
          <source>Swarm services provide a few different ways for you to control scale and placement of services on different nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f6404672eb1740003a0d024c396dbd8da583d2c" translate="yes" xml:space="preserve">
          <source>Swarm services use a &lt;em&gt;declarative&lt;/em&gt; model, which means that you define the desired state of the service, and rely upon Docker to maintain this state. The state includes information such as (but not limited to):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e53769ea6f5e32a4fa3b19ad78b3a5217aa7c105" translate="yes" xml:space="preserve">
          <source>Swarm: not supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b031e4b5c05002c84b28088ec2d526442e5b8645" translate="yes" xml:space="preserve">
          <source>Swarm: supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180e80a2b83e0d26f7d10b4980ca3f9d0201d707" translate="yes" xml:space="preserve">
          <source>Switch to another terminal window, and type &lt;code&gt;docker image ls&lt;/code&gt; to list local images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="b2e92bcbb71100ff50767189de02dd85ba68fa62" translate="yes" xml:space="preserve">
          <source>Syntax rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf9f8d557e430b72cfa2cc3b2140b88612b9b6d" translate="yes" xml:space="preserve">
          <source>Syscall</source>
          <target state="translated">Syscall</target>
        </trans-unit>
        <trans-unit id="024a67364b7c9a387a967f246392c74b67b462e2" translate="yes" xml:space="preserve">
          <source>Syscall that modifies kernel memory and NUMA settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f11f1ccf7c2e0ae8a3f354d66dfb857276e92c" translate="yes" xml:space="preserve">
          <source>Syscall that modifies kernel memory and NUMA settings. Already gated by &lt;code&gt;CAP_SYS_NICE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446dc581b4ea42c4b164b912526c12097fd6d293" translate="yes" xml:space="preserve">
          <source>Sysctl options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253be76945695ac7115209605075cb2e5e9f9d62" translate="yes" xml:space="preserve">
          <source>Sysctls beginning with net.*</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7277e3760cc39ec1a90388028b4f1454a0b65b16" translate="yes" xml:space="preserve">
          <source>Syslog logging driver for Docker. Writes log messages to syslog.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed485395965a62b14c444109a382b0a0563e080c" translate="yes" xml:space="preserve">
          <source>Systemd socket activation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06cc5644ed782e4f7d3b9a8b7942be5fae66810" translate="yes" xml:space="preserve">
          <source>Systems using consensus algorithms to replicate logs in a distributed systems do require special care. They ensure that the cluster state stays consistent in the presence of failures by requiring a majority of nodes to agree on values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f544fb304c83e23652a63e1bb1b28f4fcc7f6ac0" translate="yes" xml:space="preserve">
          <source>TCP</source>
          <target state="translated">TCP</target>
        </trans-unit>
        <trans-unit id="b1b8358884d574dcb9686530eb522740041e2449" translate="yes" xml:space="preserve">
          <source>TCP and UDP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8629c9a40e18b9a8b2562b764bec13c8baf0e9a8" translate="yes" xml:space="preserve">
          <source>TCP only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2fa2eb2b747d24f896f4db0f0c0afa2ab25742d" translate="yes" xml:space="preserve">
          <source>TLS certificates and keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe2bb7f933e333116de075a81d985142fba0e07" translate="yes" xml:space="preserve">
          <source>TLS status of the node (&amp;ldquo;Ready&amp;rdquo;, or &amp;ldquo;Needs Rotation&amp;rdquo; has TLS certificate signed by an old CA)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bfebc76e996f494e2c5b2e69ef3079516152645" translate="yes" xml:space="preserve">
          <source>TMPFS (mount tmpfs filesystems)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a5a1e7949736964000c3a63b13b76a958d40e4" translate="yes" xml:space="preserve">
          <source>Tag an image (-t)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e1c86b3ba20c7b8a5236709ade16fd4fb4948a" translate="yes" xml:space="preserve">
          <source>Tag an image for a private repository</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0198dba4f57f19b2e905575f47e8c95ea9746af5" translate="yes" xml:space="preserve">
          <source>Tag an image referenced by ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9da2b7b431f9fe24b12854c9d402b6c14b8ac4f" translate="yes" xml:space="preserve">
          <source>Tag an image referenced by Name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2986cc619bfe26e2f09716031d7600d2db5c0c4" translate="yes" xml:space="preserve">
          <source>Tag an image referenced by Name and Tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6209ca64b094a193525de15b6cecdd8d117b7e3" translate="yes" xml:space="preserve">
          <source>Tag it to be pushed to our sandbox registry:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="356f955a0bc5edb9fef3ae657284e795f0272dda" translate="yes" xml:space="preserve">
          <source>Tag the image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c703aebb31c6df4e3d5098b871ed6b6987fd072" translate="yes" xml:space="preserve">
          <source>Take a look at the visualizer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f34682fde4be86bba0eab9fb382e9b7cf72779" translate="yes" xml:space="preserve">
          <source>Take down the app and the swarm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07664d610ca07aea0404ef442f16ba09ed5853e6" translate="yes" xml:space="preserve">
          <source>Take down the swarm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba64ff2a825bcf0328c70ad605daad3c6b3f436" translate="yes" xml:space="preserve">
          <source>Take the app down with &lt;code&gt;docker stack rm&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda1d62e96473bcae66e90481825079fa8e981a8" translate="yes" xml:space="preserve">
          <source>Take the password from stdin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6ebc57b39a33dadc963aeb6227a1676cb169a8" translate="yes" xml:space="preserve">
          <source>Tarball contexts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c35d7c76df3c375bb22d0949ac1efbbfefe6ec4" translate="yes" xml:space="preserve">
          <source>Target platform containers for this service will run on, using the &lt;code&gt;os[/arch[/variant]]&lt;/code&gt; syntax, e.g.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072a27d466873e1bf3598c6070d89752d0e83f85" translate="yes" xml:space="preserve">
          <source>Targets key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef8bbd4ea9e7de82f8a4f78929eb738694219c6" translate="yes" xml:space="preserve">
          <source>Targets key, Snapshot key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0491c6d47e2d27ca067d827ccf91ad599987ba17" translate="yes" xml:space="preserve">
          <source>Task ID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d60840e1db4f029ad0b28c511e3431d51ec12f2" translate="yes" xml:space="preserve">
          <source>Task history retention limit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe981a9ca8cb57d82492758f34e97fc571a0879" translate="yes" xml:space="preserve">
          <source>Task image</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c78d2fc3a6668b4edc8cf013ce4c6cf8c269b1bf" translate="yes" xml:space="preserve">
          <source>Task name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601f486304ac9a4c8432698f3b68de5d04c9b8a3" translate="yes" xml:space="preserve">
          <source>Task published ports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd43e47bc5a9ae453744025ffb8c9af292d1174" translate="yes" xml:space="preserve">
          <source>Task slot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd66e1617669af910853e962a58cdda57615936c" translate="yes" xml:space="preserve">
          <source>Tasks also show up if you just list all the containers on your system, though that is not filtered by service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60d860189d2158cdf542a9cbb8695de90a38307e" translate="yes" xml:space="preserve">
          <source>Tasks and scheduling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4724fbe8a48eed671df3989a1d59760d11dc9374" translate="yes" xml:space="preserve">
          <source>Template driver</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc9347d8ea27318520421a57ccb8f8fa6025618" translate="yes" xml:space="preserve">
          <source>Template example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657b1097533383d1ddb0b93f186763becffe5373" translate="yes" xml:space="preserve">
          <source>Test Docker installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7025949d5fc48e86d1eca515546b5ceccd50f755" translate="yes" xml:space="preserve">
          <source>Test Docker version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655a932ba64b06aacff6652d6aad1b05d8214c81" translate="yes" xml:space="preserve">
          <source>Test some trust operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34e7038eaa42b7dee344142134b357ad14097cb" translate="yes" xml:space="preserve">
          <source>Test that your installation works by running the simple Docker image, &lt;a href=&quot;https://hub.docker.com/_/hello-world/&quot;&gt;hello-world&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d302792e518eadee3123226b753c97b5e9f48b" translate="yes" xml:space="preserve">
          <source>Test the database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b78370a2b3bb63e40059964522de64d81df33cd" translate="yes" xml:space="preserve">
          <source>Test the image, check for &lt;code&gt;/remove_me&lt;/code&gt; being gone, make sure &lt;code&gt;hello\nworld&lt;/code&gt; is in &lt;code&gt;/hello&lt;/code&gt;, make sure the &lt;code&gt;HELLO&lt;/code&gt; envvar&amp;rsquo;s value is &lt;code&gt;world&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54d1554b9c0f1b5ea3dfc1b8000a4189c07cfd0" translate="yes" xml:space="preserve">
          <source>Test the installation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f76e912a69eb9799e911065d89e4c93378e4e0" translate="yes" xml:space="preserve">
          <source>Test with malicious images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a988a505d4f9bd1f41a57f4c2458a2423baedc7" translate="yes" xml:space="preserve">
          <source>Text files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ea8ca4b67a150bf3621e536df06ea9ea7c6131" translate="yes" xml:space="preserve">
          <source>That way, all new keys are encrypted and decrypted using the passphrase &lt;code&gt;mynewfancypassword&lt;/code&gt;, but old keys that were encrypted using the passphrase &lt;code&gt;mypassword&lt;/code&gt; can still be decrypted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44ab494894033becbc4ef28b56d983341a26a48" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;ll put your application code inside an image that builds a container with Ruby, Bundler and all your dependencies inside it. For more information on how to write Dockerfiles, see the &lt;a href=&quot;../../get-started/index#building-an-image-from-a-dockerfile&quot;&gt;Docker user guide&lt;/a&gt; and the &lt;a href=&quot;../../engine/reference/builder/index&quot;&gt;Dockerfile reference&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430585eb3dbe6bdbca1532982cb4635d1c03a556" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all for this page. In the next section, we learn how to scale our application by running this container in a &lt;strong&gt;service&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127d13646cf25b737700c8acfd62e6ec2061e547" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it! You don&amp;rsquo;t need Python or anything in &lt;code&gt;requirements.txt&lt;/code&gt; on your system, nor does building or running this image install them on your system. It doesn&amp;rsquo;t seem like you&amp;rsquo;ve really set up an environment with Python and Flask, but you have.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e7a95197709bea6ecc44d69a12ed465b3c942f" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it. Your app should now be running on port 3000 on your Docker daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14dbbc8fc7113c6b6607f3c73f3f768d6b74600d" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;.env&amp;rdquo; file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654f1dc286e9b3f410a2830d4fdbbb483a2a9ef6" translate="yes" xml:space="preserve">
          <source>The &amp;ldquo;env_file&amp;rdquo; configuration option</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
