<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="css">
    <body>
      <group id="css">
        <trans-unit id="bace8b14b47b050c91c8b48a95f2e3793f3b45cd" translate="yes" xml:space="preserve">
          <source>The Baseline alignment keywords are used to align the baselines of boxes across a group of alignment subjects. They can be used as values for content alignment with &lt;code&gt;justify-content&lt;/code&gt; and &lt;code&gt;align-content&lt;/code&gt; and also for self alignment with &lt;code&gt;justify-self&lt;/code&gt; and &lt;code&gt;align-self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8ae0c4a24a41480a67a950b71baa96955966dfd" translate="yes" xml:space="preserve">
          <source>The Basic Shapes and Box values used to create Shapes are the same as those used as values for &lt;a href=&quot;../clip-path&quot;&gt;&lt;code&gt;clip-path&lt;/code&gt;&lt;/a&gt;. Therefore if you want to create a shape using an image, and also clip away part of that image, you can use the same values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bddaeb84f1b6dae87b603b64e20a14ce51aaf176" translate="yes" xml:space="preserve">
          <source>The Block Formatting Context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33985f35198b36d1fd17de4171a2f135e7361b4d" translate="yes" xml:space="preserve">
          <source>The Box Alignment module also includes other methods of creating space between items, such as the &lt;code&gt;column-gap&lt;/code&gt; and &lt;code&gt;row-gap&lt;/code&gt; feature as seen in &lt;a href=&quot;../css_grid_layout&quot;&gt;CSS Grid Layout&lt;/a&gt;. The inclusion of these properties in Box Alignment means that in future we should be able to use &lt;code&gt;column-gap&lt;/code&gt; and &lt;code&gt;row-gap&lt;/code&gt; in flex layouts too, and in Firefox 63 you will find the first browser implementation of the gap properties in flex layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a41c24dfcbfe7324cb9e5ecc4b76893aa6282f8" translate="yes" xml:space="preserve">
          <source>The Box Model does not fully apply to items participating in an inline formatting context. In a horizontal writing mode line, horizontal padding, borders and margin will be applied to the element and push the text away left and right. However, margins above and below the element will not be applied. Vertical padding and borders will be applied but may overlap content above and below as, in the inline formatting context, the line boxes will not be pushed apart by padding and borders.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c0225942d45abaede7c38b11106176d4f2bb20" translate="yes" xml:space="preserve">
          <source>The CSS 2.1 specification notes that the CSS 2 specification described a different behavior for the &lt;code&gt;bottom&lt;/code&gt; value, which will be reintroduced by this value in a future specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca57fd8f187f86745af6ac7868bb8c2a4880493" translate="yes" xml:space="preserve">
          <source>The CSS 2.1 specification notes that the CSS 2 specification described a different behavior for the &lt;code&gt;top&lt;/code&gt; value, which will be reintroduced by this value in a future specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45dc25de8c1d3892b11e27f39e0bb84ebfced99a" translate="yes" xml:space="preserve">
          <source>The CSS 2.1 specification, which details how normal flow behaves, assumes a horizontal writing mode. &lt;a href=&quot;block_and_inline_layout_in_normal_flow&quot;&gt;Layout&lt;/a&gt; properties should work in the same way in vertical writing modes. In this guide, we look at how flow layout behaves when used with different document writing modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4daaa2f6ebe3aaec4d5de86e03cc07e8ea5f9868" translate="yes" xml:space="preserve">
          <source>The CSS &lt;a href=&quot;../color&quot;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt; property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f5845743a35da7df2b6418b2c5b7a7527370ba" translate="yes" xml:space="preserve">
          <source>The CSS &lt;a href=&quot;../color_value&quot;&gt;&lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt;&lt;/a&gt; data unit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87908523855097b5983ece988d223c033c29091d" translate="yes" xml:space="preserve">
          <source>The CSS &lt;em&gt;visual formatting model&lt;/em&gt; is an algorithm that processes a document and displays it on visual media. This model is a basic concept of CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a457db806206eef17f04e498244a9847980566c2" translate="yes" xml:space="preserve">
          <source>The CSS &lt;strong&gt;ID selector&lt;/strong&gt; matches an element based on the value of its &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-id&quot;&gt;id&lt;/a&gt;&lt;/code&gt; attribute. In order for the element to be selected, its &lt;code&gt;ID&lt;/code&gt; attribute must match exactly the value given in the selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e33011dc9b4d549d135bba5bb58ca7176ecc56de" translate="yes" xml:space="preserve">
          <source>The CSS &lt;strong&gt;attribute selector&lt;/strong&gt; matches elements based on the presence or value of a given attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00cc17bc252ef7720275810c2dfdc1f6049d8c95" translate="yes" xml:space="preserve">
          <source>The CSS &lt;strong&gt;type selector&lt;/strong&gt; matches elements by node name. In other words, it selects all elements of the given type within a document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a23f4f406fd2abe8e0274c3b45cc05cc1b89bf" translate="yes" xml:space="preserve">
          <source>The CSS &lt;strong&gt;universal selector&lt;/strong&gt; (&lt;code&gt;*&lt;/code&gt;) matches elements of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573c22fc3ac4444ad04f04b7c533151b9ad370e9" translate="yes" xml:space="preserve">
          <source>The CSS Box Alignment module specifies CSS features that relate to the alignment of boxes in the various CSS box layout models: block layout, table layout, flex layout, and grid layout. The module aims to create a consistent method of alignment across all of CSS. This document details the general concepts found in the specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa17e2b13cdabbfe781093bffd63eff0866bc9f6" translate="yes" xml:space="preserve">
          <source>The CSS Grid Layout specification details why we can overwrite the behavior of certain properties when something becomes a grid item. The key sections of the specification are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f05a9df4651f9999811e459fb25ff8a3303c66be" translate="yes" xml:space="preserve">
          <source>The CSS Grid Specification includes the ability to add gutters between column and row tracks with the &lt;a href=&quot;../grid-column-gap&quot;&gt;&lt;code&gt;grid-column-gap&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../grid-row-gap&quot;&gt;&lt;code&gt;grid-row-gap&lt;/code&gt;&lt;/a&gt; properties. These specify a gap that acts much like the &lt;a href=&quot;../column-gap&quot;&gt;&lt;code&gt;column-gap&lt;/code&gt;&lt;/a&gt; property in multi-column layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e351f9c3520c6620126d08e682d7c52e1fc77b5d" translate="yes" xml:space="preserve">
          <source>The CSS Writing Modes Level 3 Specification defines the impact a change the document writing mode has on flow layout. In the writing modes introduction, &lt;a href=&quot;https://drafts.csswg.org/css-writing-modes-3/#text-flow&quot;&gt;the specification says&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1778c969b52e40e1d1120a569d0c52f45c13886e" translate="yes" xml:space="preserve">
          <source>The CSS animation longhand values can accept multiple values, separated by commas &amp;mdash; this feature can be used when you want to apply multiple animations in a single rule, and set separate durations, iteration counts, etc. for the different animations. Let&amp;rsquo;s look at some quick examples to explain the different permutations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa66fa9012ae36808a23ce0e107de985c4ad5f2" translate="yes" xml:space="preserve">
          <source>The CSS below is nearly identical to the previous example. The only exception is that the unit has been changed to &lt;code&gt;rem&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6430b0f81854950bb70f984636550890ab4c6d" translate="yes" xml:space="preserve">
          <source>The CSS cascade algorithm's job is to select CSS declarations in order to determine the correct values for CSS properties. CSS declarations originate from different origins: the &lt;strong&gt;&lt;a href=&quot;#User-agent_stylesheets&quot;&gt;User-agent stylesheets&lt;/a&gt;&lt;/strong&gt;, the &lt;strong&gt;&lt;a href=&quot;#Author_stylesheets&quot;&gt;Author stylesheets&lt;/a&gt;&lt;/strong&gt;, and the &lt;strong&gt;&lt;a href=&quot;#User_stylesheets&quot;&gt;User stylesheets&lt;/a&gt;&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89cf9d9a29646a71ebb497c645483e67ceb737e1" translate="yes" xml:space="preserve">
          <source>The CSS declaration &lt;code&gt;column-count:4&lt;/code&gt; can be replaced by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b041a54c7428d4b014c203aabbd2b54a9ff22700" translate="yes" xml:space="preserve">
          <source>The CSS declaration &lt;code&gt;column-width:12em&lt;/code&gt; can be replaced by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7316459113959ec705a48b7b0dfe34ed3e2f19" translate="yes" xml:space="preserve">
          <source>The CSS defines one container style, then the styles for the four boxes that comprise the complete image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92a1072e7ecaad9da51deb2179e04943a3db95f" translate="yes" xml:space="preserve">
          <source>The CSS defines three classes. The first, &lt;code&gt;&quot;standard-box&quot;&lt;/code&gt;, is applied to both boxes, as seen above. It provides standard styling including the minimum and maximum block sizes, font size, and so forth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e6c5323c9caf0fb0b742a476bfc58e0ec64d34" translate="yes" xml:space="preserve">
          <source>The CSS establishes classes that can be used to set the perspective to different distances. It also includes classes for the container box and the cube itself, as well as each of its faces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f4281834b91ec5c2cb4d514d515df29063a2a87" translate="yes" xml:space="preserve">
          <source>The CSS includes default styling for the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element itself, as well as separate styles for each of the two images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072628af84f6dc946281ad454035c4ee287829d9" translate="yes" xml:space="preserve">
          <source>The CSS is pretty much just for appearances here. The class &lt;code&gt;&quot;outer&quot;&lt;/code&gt; is used for the containing box, which is intentionally too wide to show in the MDN window, to allow you to scroll it horizontally. The &lt;code&gt;&quot;inner&quot;&lt;/code&gt; box is the one that we track events in and in which we show the mouse coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be33afe8cca90e2512aabb3c72524158d64d6df" translate="yes" xml:space="preserve">
          <source>The CSS property &lt;code&gt;font-size-adjust&lt;/code&gt; was initially defined in CSS 2, but dropped in CSS 2.1. It has been newly defined in CSS 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9790a371b1f6a4caed9ba0be107e029078c06c44" translate="yes" xml:space="preserve">
          <source>The CSS property &lt;code&gt;text-shadow&lt;/code&gt; was &lt;a href=&quot;http://www.w3.org/TR/2008/REC-CSS2-20080411/text.html#text-shadow-props&quot;&gt;improperly defined in CSS2&lt;/a&gt; and dropped in CSS2 (Level 1). The CSS Text Module Level 3 spec refined the syntax. Later it was moved to &lt;a href=&quot;https://www.w3.org/TR/css-text-decor-3/&quot;&gt;CSS Text Decoration Module Level 3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3925cb689a5385151670843035f2db4ab7441e09" translate="yes" xml:space="preserve">
          <source>The CSS specification defines shorthand properties to group the definition of common properties acting on the same theme. For instance, the CSS &lt;a href=&quot;background&quot;&gt;&lt;code&gt;background&lt;/code&gt;&lt;/a&gt; property is a shorthand property that's able to define the values of &lt;a href=&quot;background-color&quot;&gt;&lt;code&gt;background-color&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;background-image&quot;&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;background-repeat&quot;&gt;&lt;code&gt;background-repeat&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;background-position&quot;&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/a&gt;. Similarly, the most common font-related properties can be defined using the shorthand &lt;a href=&quot;font&quot;&gt;&lt;code&gt;font&lt;/code&gt;&lt;/a&gt;, and the different margins around a box can be defined using the &lt;a href=&quot;margin&quot;&gt;&lt;code&gt;margin&lt;/code&gt;&lt;/a&gt; shorthand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66cf03139bf4a585074209a6b125ac0ed4d0a607" translate="yes" xml:space="preserve">
          <source>The CSS table display properties are potentially very useful as a fallback, due to the fact that they allow design patterns such as full height columns and vertical centering and work back as far as Internet Explorer 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="299ba6602ccb21c462fcc986eafbb344f1fc5b02" translate="yes" xml:space="preserve">
          <source>The CSS that adjusts the directionality of the content looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf34cd6721e78abcca5bb4b5665d2e95e80ace64" translate="yes" xml:space="preserve">
          <source>The CSS3 Column specification requires that the column heights must be balanced: that is, the browser automatically sets the maximum column height so that the heights of the content in each column are approximately equal. Firefox does this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1884bae0ac5559d058feb8fe5b5ef24f6a4649c" translate="yes" xml:space="preserve">
          <source>The CSSOM class &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule&quot;&gt;&lt;code&gt;CSSSupportsRule&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports&quot;&gt;&lt;code&gt;CSS.supports()&lt;/code&gt;&lt;/a&gt; method that allows the same check to be performed via JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2662427361ef372187d90dd7230c296e66a67857" translate="yes" xml:space="preserve">
          <source>The Complete CSS Demo for OpenType Features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964f3e118c58e2e6bc81af285ddd734f6957c527" translate="yes" xml:space="preserve">
          <source>The Cross Axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2884e1c4a2392e46b14917c76cbd9cb30772358" translate="yes" xml:space="preserve">
          <source>The Firefox Shapes Inspector helpfully shows the reference box in use when you inspect a shape. In the screenshot below I have created a circle, using &lt;code&gt;shape-outside: circle(50%)&lt;/code&gt;. The floated element has 20 pixels of padding, border and margin applied, and the Shapes Inspector highlights these reference boxes. When using a Basic Shape the reference box used by default is the margin-box. You can see in the screenshot that the shape is being defined with reference to that part of the Box Model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6171d476f95948dd58017a44f9644c72be5debc7" translate="yes" xml:space="preserve">
          <source>The Flexible Box Module, usually referred to as flexbox, was designed as a one-dimensional layout model, and as a method that could offer space distribution between items in an interface and powerful alignment capabilities. This article gives an outline of the main features of flexbox, which we will be exploring in more detail in the rest of these guides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eae46fbf33359098b89a011ff29a992371825e1" translate="yes" xml:space="preserve">
          <source>The Formatting Context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06bfd766c3f2c1b0ca7a3b14b4502d7765211e3f" translate="yes" xml:space="preserve">
          <source>The Grid container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bdb5a2fcf130245329aa6e7c2d7509887f7971a" translate="yes" xml:space="preserve">
          <source>The Grid specification originally contained the definition for the properties &lt;a href=&quot;../grid-row-gap&quot;&gt;&lt;code&gt;grid-row-gap&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../grid-column-gap&quot;&gt;&lt;code&gt;grid-column-gap&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../grid-gap&quot;&gt;&lt;code&gt;grid-gap&lt;/code&gt;&lt;/a&gt;. These have since been moved into the Box Alignment specification and renamed to &lt;a href=&quot;../row-gap&quot;&gt;&lt;code&gt;row-gap&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../column-gap&quot;&gt;&lt;code&gt;column-gap&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../gap&quot;&gt;&lt;code&gt;gap&lt;/code&gt;&lt;/a&gt;. This allows them to be used for other layout methods where a gap between items makes sense.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="436a26b839ed5df079f066fd9e83fbbde78c50df" translate="yes" xml:space="preserve">
          <source>The HSL color model defines a given color according to its hue, saturation, and lightness components. An optional alpha component represents the color's transparency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd34ad3e2da2c4a3b49d9733d22a04b865b144c5" translate="yes" xml:space="preserve">
          <source>The HTML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85073e7d1d6aa9a719bf0bb2d8ad9590eaf271ad" translate="yes" xml:space="preserve">
          <source>The HTML &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-contenteditable&quot;&gt;contenteditable&lt;/a&gt;&lt;/code&gt; attribute, which can be used to make any element's text editable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c8453f1126dbec52f1a941b0b0138b0639e75f" translate="yes" xml:space="preserve">
          <source>The HTML below creates four copies of the same box, with the perspective set at different values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad812ae70d2cbe56005307d924bf73c00ec6a7ca" translate="yes" xml:space="preserve">
          <source>The HTML code for all our examples is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a8cda244cdaa5081cb6519ad39e9eb9e2a7ca7" translate="yes" xml:space="preserve">
          <source>The HTML for our example is below. Note that within the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the ID &lt;code&gt;&quot;log&quot;&lt;/code&gt;, we have a paragraph for each coordinate system, with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Span&quot;&gt;&lt;code&gt;span&lt;/code&gt;&lt;/a&gt; used for each of the elements to receive and display the coordinates in each model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8273e71867cd62d5391cd4f088679fd017e1f433" translate="yes" xml:space="preserve">
          <source>The HTML is quite simple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92208905225b91e8426de163e70ccf38eb636b61" translate="yes" xml:space="preserve">
          <source>The HTML is simply a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table&quot;&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;&lt;/a&gt; with each writing mode in a row with a column showing text in various scripts using that writing mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539728613015ae749ae0f3adc958b06554012361" translate="yes" xml:space="preserve">
          <source>The HTML simply establishes the two &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; blocks that will be presented with their &lt;a href=&quot;writing-mode&quot;&gt;&lt;code&gt;writing-mode&lt;/code&gt;&lt;/a&gt; set using the classes &lt;code&gt;&quot;horizontal&quot;&lt;/code&gt; or &lt;code&gt;&quot;vertical&quot;&lt;/code&gt;. Both boxes share the &lt;code&gt;&quot;standard&quot;&lt;/code&gt; class, which simply establishes coloring, padding, and their respective values of &lt;code&gt;max-block-size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a631b19e95719803657a861f205b181c9859e1a0" translate="yes" xml:space="preserve">
          <source>The HTML specification requires the type attribute to be matched case-insensitively due to it primarily being used in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; element, trying to use attribute selectors to with the type attribute of an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol&quot;&gt;ordered list&lt;/a&gt; doesn't work without the &lt;a href=&quot;#case-sensitive&quot;&gt;case-sensitive&lt;/a&gt; modifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d05d75c060c45e0ee2b281ec69f7aa7c60d3426" translate="yes" xml:space="preserve">
          <source>The ID of an element to use as the background, specified using the HTML attribute #&lt;em&gt;id&lt;/em&gt; on the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b99938878b9cd63c1ad3607457e08b24dd61b8b" translate="yes" xml:space="preserve">
          <source>The IE version has additional properties not required in the new specification of &lt;code&gt;-ms-grid-column-span&lt;/code&gt; and &lt;code&gt;-ms-grid-row-span&lt;/code&gt;. This version does not include auto-placement capability, or grid template areas. Some simple grid layouts could be implemented for IE10, through to Edge 15, using the &lt;code&gt;-ms&lt;/code&gt; properties. As these properties are vendor prefixed, they will not effect any browser supporting the up to date and unprefixed specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e9e3469ce777ec59f83514d2446ef5f34e2313" translate="yes" xml:space="preserve">
          <source>The IE/Edge (&amp;le;15) version of the specification is prefixed with an &lt;code&gt;-ms&lt;/code&gt; prefix and the properties implemented in IE/Edge (&amp;le;15) are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5800ec74567cba0ca67c17eb1361242e73cad384" translate="yes" xml:space="preserve">
          <source>The IME should attempt to align the candidate window below the element (in left-to-right and right-to-left layouts).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e790fa0af49eb02a9a419f6cd37f4dbd751d93a" translate="yes" xml:space="preserve">
          <source>The IME state should be normal; this value can be used in a user style sheet to override the page's setting. &lt;em&gt;This value is not supported by Internet Explorer.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abc29e8918c8df8549d529cedc59cf90be70bab" translate="yes" xml:space="preserve">
          <source>The Internet Explorer and Edge situation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a744a82cb1bc80f66898a5932969759a35eea77" translate="yes" xml:space="preserve">
          <source>The Italic (&lt;code&gt;ital&lt;/code&gt;) axis works differently in that it is either on or off; there is no in-between. Italic designs often include dramatically different letterforms from their upright counterparts, so in the transition from upright to italic, a number of glyph (or character) substitutions usually occur. Italic and oblique are often used somewhat interchangeably, but in truth are actually quite different. Oblique is defined in this context with the term &lt;code&gt;slant&lt;/code&gt; (see the below section), and a typeface would typically have one or the other, but not both.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5631457d86e830b44ca1fb2addb2e0e0b6fd4d7" translate="yes" xml:space="preserve">
          <source>The JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Selection&quot;&gt;&lt;code&gt;Selection&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d702aca4e29be8b964baf328574de69b65f57a3" translate="yes" xml:space="preserve">
          <source>The JavaScript code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b3092626e9257c77a3d22b0e6e1247825c1ba60" translate="yes" xml:space="preserve">
          <source>The Level 3 specification details two values for the &lt;code&gt;display&lt;/code&gt; property &amp;mdash; enabling the specification of the outer and inner display type explicitly &amp;mdash; but this is not yet well-supported by browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbbdadd1ba5a9458f3d90a0d8876de31fb93ea30" translate="yes" xml:space="preserve">
          <source>The Logical Properties and Values Specification introduces flow-relative mappings for many of the properties and values in CSS. This article introduces the specification, and explains flow relative properties and values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0607fe924a2286526e3276871cb68c0e214c5a8" translate="yes" xml:space="preserve">
          <source>The Mac version of Gecko 1.9 (Firefox 3) can't recover the previous state of the IME when a field for which it is disabled loses focus, so Mac users may get grumpy when you use the &lt;code&gt;disabled&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="919a080450ed24e2982a77badf3380b6122cdf8a" translate="yes" xml:space="preserve">
          <source>The Media Queries Level 4 specification includes some syntax improvements to make media queries using features that have a &quot;range&quot; type, for example width or height, less verbose. Level 4 adds a &lt;em&gt;range context&lt;/em&gt; for writing such queries. For example, using the &lt;code&gt;max-&lt;/code&gt; functionality for width we might write the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9a8758905f8efa0626d7c377a0f298220d6c10" translate="yes" xml:space="preserve">
          <source>The RGB color model defines a given color according to its red, green, and blue components. An optional alpha component represents the color's transparency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daac2029bc0d6054444ea959a99dcfc81e4c0c6f" translate="yes" xml:space="preserve">
          <source>The Responsive Order Conflict for Keyboard Focus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1dfc97c961eb1e1b66534f8f96aacda7d0324ce" translate="yes" xml:space="preserve">
          <source>The SVG attribute &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/pointer-events&quot;&gt;pointer-events&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5483517d635c789571b1c6726b06af673e85cceb" translate="yes" xml:space="preserve">
          <source>The SVG attribute &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/visibility&quot;&gt;visibility&lt;/a&gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb7406527ae8940aca711a6a0623c5cabb49836" translate="yes" xml:space="preserve">
          <source>The Shape Path Editor will be enabled by default in Firefox 60 for shapes generated via &lt;code&gt;clip-path&lt;/code&gt;. You can also use it to edit shapes generated via &lt;code&gt;shape-outside&lt;/code&gt;, but only when you enable it via the &lt;code&gt;layout.css.shape-outside.enabled&lt;/code&gt; pref.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e50a5c312e871a0865d2a22a8d9fe2e1b8544346" translate="yes" xml:space="preserve">
          <source>The UA will determine the cursor to display based on the current context. E.g., equivalent to &lt;code&gt;text&lt;/code&gt; when hovering text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154362295ca9bf59f10806784ba24d69d213515c" translate="yes" xml:space="preserve">
          <source>The URI of the image from which to take the sub-image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ba5b5e0e4b52d42bae476e0c5f4c98bf450da20" translate="yes" xml:space="preserve">
          <source>The URL for the XBL binding (including the fragment identifier).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="468d84771b918ad3280c4346ead4a37537cbc1b6" translate="yes" xml:space="preserve">
          <source>The Web author can define which property has to be animated and in which way. This allows the creation of complex transitions. As it doesn't make sense to animate some properties, the &lt;a href=&quot;../css_animated_properties&quot;&gt;list of animatable properties&lt;/a&gt; is limited to a finite set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e38ff9a3927b77b9604e858dde2e5071451b2595" translate="yes" xml:space="preserve">
          <source>The Webkit &lt;a href=&quot;https://www.webkit.org/blog/182/css-reflections/&quot;&gt;specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8cf282b66328dbf722d6d76285a69b57c51a35c" translate="yes" xml:space="preserve">
          <source>The Writing Modes Specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5efd9faeb425871ba80c1f6e2fd0016d699c80f" translate="yes" xml:space="preserve">
          <source>The ability to list more than one selector is experimental and not yet widely supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc09bf04a9db9191608a5bfe442959451f0229f" translate="yes" xml:space="preserve">
          <source>The above HTML will output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58aa65a66a3caf057fda11c74a0c112c4624f774" translate="yes" xml:space="preserve">
          <source>The above counter style rule can be applied to lists like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa96a3c2614261061b47cbb5a851a6fa8bfe0c70" translate="yes" xml:space="preserve">
          <source>The above diagram illustrates the location of each region.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4002f1aeda887626307c7ccbbddf6c2cb277e4" translate="yes" xml:space="preserve">
          <source>The above example adds the &lt;code&gt;will-change&lt;/code&gt; property directly to the stylesheet, which will cause the browser to keep the optimization in memory for much longer than it is needed and we've already seen why that should be avoided. Below is another example showing how to apply the &lt;code&gt;will-change&lt;/code&gt; property through scripting, which is probably what you should be doing in most cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="045ed90f157aa509c61964dfc75116b30a9ba9c8" translate="yes" xml:space="preserve">
          <source>The above example is very simple, and we can get away without needing to write code that would be a problem to browsers that do not support grid, and legacy code is not an issue to our grid supporting browsers. However, things are not always so simple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a26c959a65a49f33fa6d1dc31b58acda0035bc" translate="yes" xml:space="preserve">
          <source>The above list will display as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4bf8992a52478e65eb1ec49a0284ae70a5ed19f" translate="yes" xml:space="preserve">
          <source>The above methods are all implemented based on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ParentNode&quot;&gt;&lt;code&gt;ParentNode&lt;/code&gt;&lt;/a&gt; mixin; see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/querySelector&quot;&gt;&lt;code&gt;ParentNode.querySelector()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/querySelectorAll&quot;&gt;&lt;code&gt;ParentNode.querySelectorAll()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f10e242869a935dae87a5da698df22f697f707" translate="yes" xml:space="preserve">
          <source>The ad panel is below the sidebar, so starts at grid row line 4. Then we have the content and footer starting at col-start 4 and spanning 9 tracks taking them to the end of the grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f4956066249deeca3009ce15d8a59b6ce22218d" translate="yes" xml:space="preserve">
          <source>The affected line is aligned per the value of &lt;a href=&quot;text-align&quot;&gt;&lt;code&gt;text-align&lt;/code&gt;&lt;/a&gt;, unless &lt;a href=&quot;text-align&quot;&gt;&lt;code&gt;text-align&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;justify&lt;/code&gt;, in which case the effect is the same as setting &lt;code&gt;text-align-last&lt;/code&gt; to &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53f12debea5f06ba9becae1f43ec197a29a2c02" translate="yes" xml:space="preserve">
          <source>The algorithm can for the most part be summarized by these four rules. There are some edge cases that aren't covered by these rules, but this covers the majority of cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b682e301df118b768f5e182b22bfcc8bc26ec5a6" translate="yes" xml:space="preserve">
          <source>The algorithm, in summary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243882280960302d008dc45c41770a6888fa5b7a" translate="yes" xml:space="preserve">
          <source>The alignment container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae904681f4e16a3f8ca5c6d139ca8295d65755d5" translate="yes" xml:space="preserve">
          <source>The alignment container is the positioned block, accounting for the offset values of top, left, bottom, and right. The normal keyword resolves to &lt;code&gt;stretch&lt;/code&gt;, unless the positioned item is a replaced element, in which case it resolves to &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc290023a6f45c713b191b542736eba1cbc3ecce" translate="yes" xml:space="preserve">
          <source>The alignment is done after the lengths and auto margins are applied, meaning that, if in a &lt;a href=&quot;css_flexible_box_layout&quot;&gt;Flexbox layout&lt;/a&gt; there is at least one flexible element, with &lt;a href=&quot;flex-grow&quot;&gt;&lt;code&gt;flex-grow&lt;/code&gt;&lt;/a&gt; different from &lt;code&gt;0&lt;/code&gt;, it will have no effect as there won't be any available space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be806c1bbae98296b1647e8b00381322a9960b9f" translate="yes" xml:space="preserve">
          <source>The alignment properties from the flexbox specification have been added to a new specification called &lt;a href=&quot;https://drafts.csswg.org/css-align/&quot;&gt;Box Alignment Level 3&lt;/a&gt;. This means that they can be used in other specifications, including Grid Layout. In the future, they may well apply to other layout methods as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307e15c8f4dd7a1bf04e61959b9966b37af40477" translate="yes" xml:space="preserve">
          <source>The alignment property &lt;a href=&quot;../vertical-align&quot;&gt;&lt;code&gt;vertical-align&lt;/code&gt;&lt;/a&gt; has no effect on a grid item. In layouts using &lt;code&gt;display: inline-block&lt;/code&gt; or &lt;code&gt;display: &lt;/code&gt;&lt;code&gt;table&lt;/code&gt;, you might use the vertical-align property to perform basic alignment. In your grid layout you then have the far more powerful box alignment properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e962da07bceb9f3afc8739bbb0a38fe6ad51fceb" translate="yes" xml:space="preserve">
          <source>The alignment subject</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7137d8914f13008c5bf3beaee37a737181b13084" translate="yes" xml:space="preserve">
          <source>The all value requires markup around every piece of horizontal text, but it is currently supported by more browsers than the digits value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc38c1fdcbad8617b4f05538957396e32105e80c" translate="yes" xml:space="preserve">
          <source>The allowed value for &lt;code&gt;column-gap&lt;/code&gt; is a &lt;code&gt;&amp;lt;length-percentage&amp;gt;&lt;/code&gt;, this means percentages are allowed. Percentage values for &lt;code&gt;column-gap&lt;/code&gt; are calculated as a percentage of the width of the multicol container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="980a11e0fb3200e5071060c73dc56c3239be21f7" translate="yes" xml:space="preserve">
          <source>The alpha component of the allowed styles will be ignored. The alpha component of the element's non-&lt;code&gt;:visited&lt;/code&gt; state will be used instead, except when that component is &lt;code&gt;0&lt;/code&gt;, in which case the style set in &lt;code&gt;:visited&lt;/code&gt; will be ignored entirely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcecac7b5c2300bfbded126ee6435b3803559c4d" translate="yes" xml:space="preserve">
          <source>The alpha values of the mask border image are used as the mask values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268e3d3237c194b3f42a071fded84ac3331d3835" translate="yes" xml:space="preserve">
          <source>The amount of rotation created by &lt;code&gt;rotate()&lt;/code&gt; is specified by an &lt;a href=&quot;../angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt;. If positive, the movement will be clockwise; if negative, it will be counter-clockwise. A rotation by 180&amp;deg; is called &lt;em&gt;point reflection&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30fb255ac38f53f42e4440419fc10957a775a0cd" translate="yes" xml:space="preserve">
          <source>The amount of rotation created by &lt;code&gt;rotate3d()&lt;/code&gt; is specified by three &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt;s and one &lt;a href=&quot;../angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;s represent the x-, y-, and z-coordinates of the vector denoting the axis of rotation. The &lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt; represents the angle of rotation; if positive, the movement will be clockwise; if negative, it will be counter-clockwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d58d4748f5a2a4c9f293c00443801b17874d9ea" translate="yes" xml:space="preserve">
          <source>The amount of rotation created by &lt;code&gt;rotateX()&lt;/code&gt; is specified by an &lt;a href=&quot;../angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt;. If positive, the movement will be clockwise; if negative, it will be counter-clockwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b5d293d94585a365e4e12d93d5ee29fb4dc094" translate="yes" xml:space="preserve">
          <source>The amount of rotation created by &lt;code&gt;rotateY()&lt;/code&gt; is specified by an &lt;a href=&quot;../angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt;. If positive, the movement will be clockwise; if negative, it will be counter-clockwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51304a65143f9cfca3fea43fa61b9e4de14fd2f" translate="yes" xml:space="preserve">
          <source>The amount of rotation created by &lt;code&gt;rotateZ()&lt;/code&gt; is specified by an &lt;a href=&quot;../angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt;. If positive, the movement will be clockwise; if negative, it will be counter-clockwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48addd5aa5b433ed039c551eaa4e6f7123a4bc38" translate="yes" xml:space="preserve">
          <source>The amount of the conversion, specified as a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;. A value of &lt;code&gt;0%&lt;/code&gt; is completely transparent, while a value of &lt;code&gt;100%&lt;/code&gt; leaves the input unchanged. Values between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; are linear multipliers on the effect. The lacuna value for interpolation is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724b7154e0ac7fd6464bd25b87b0531c70f568ed" translate="yes" xml:space="preserve">
          <source>The amount of the conversion, specified as a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;. A value of &lt;code&gt;100%&lt;/code&gt; is completely grayscale, while a value of &lt;code&gt;0%&lt;/code&gt; leaves the input unchanged. Values between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; are linear multipliers on the effect. The lacuna value for interpolation is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c6e07e36e234c5f4bf06e359b2917ae457e1d9" translate="yes" xml:space="preserve">
          <source>The amount of the conversion, specified as a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;. A value of &lt;code&gt;100%&lt;/code&gt; is completely inverted, while a value of &lt;code&gt;0%&lt;/code&gt; leaves the input unchanged. Values between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; are linear multipliers on the effect. The lacuna value for interpolation is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4da79954c1760b4e2a23f674069902e3c095e8f" translate="yes" xml:space="preserve">
          <source>The amount of the conversion, specified as a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;. A value of &lt;code&gt;100%&lt;/code&gt; is completely sepia, while a value of &lt;code&gt;0%&lt;/code&gt; leaves the input unchanged. Values between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; are linear multipliers on the effect. The lacuna value for interpolation is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460c4f29155256b0ef94fca86572616614125a8e" translate="yes" xml:space="preserve">
          <source>The amount of the conversion, specified as a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;. A value under &lt;code&gt;100%&lt;/code&gt; desaturates the image, while a value over &lt;code&gt;100%&lt;/code&gt; super-saturates it. A value of &lt;code&gt;0%&lt;/code&gt; is completely unsaturated, while a value of &lt;code&gt;100%&lt;/code&gt; leaves the input unchanged. The lacuna value for interpolation is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36fbc418c42423222a6e1c75af076600472a4710" translate="yes" xml:space="preserve">
          <source>The animatable properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="491e01ce6fc3b3570fa3d6ae7ac8e05da89ff997" translate="yes" xml:space="preserve">
          <source>The animation jumps immediately to its final state, where it stays until the end. This keyword represents the timing function &lt;code&gt;steps(1, start)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f3d0ce4d100c953c829efe1cb7db68f9f910a9" translate="yes" xml:space="preserve">
          <source>The animation moves from beginning to end at a constant rate. This keyword represents the timing function &lt;code&gt;cubic-bezier(0.0, 0.0, 1.0, 1.0)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5eed91079f55e95273f134eb8f5ab442b4b6b7" translate="yes" xml:space="preserve">
          <source>The animation plays &lt;em&gt;backwards&lt;/em&gt; each cycle. In other words, each time the animation cycles, the animation will reset to the end state and start over again. Animation steps are performed backwards, and timing functions are also reversed. For example, an &lt;code&gt;ease-in&lt;/code&gt; timing function becomes &lt;code&gt;ease-out&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d8fbc95c58b8f729f5b73335f13920c0aa4f8d0" translate="yes" xml:space="preserve">
          <source>The animation plays &lt;em&gt;forwards&lt;/em&gt; each cycle. In other words, each time the animation cycles, the animation will reset to the beginning state and start over again. This is the default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83c360fce3b06a72790c97b510ad73eb90ee71d" translate="yes" xml:space="preserve">
          <source>The animation reverses direction each cycle, with the first iteration being played &lt;em&gt;backwards&lt;/em&gt;. The count to determinate if a cycle is even or odd starts at one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af6c95907ef6c4a9a5bfa936ab45a7d2238130fa" translate="yes" xml:space="preserve">
          <source>The animation reverses direction each cycle, with the first iteration being played &lt;em&gt;forwards&lt;/em&gt;. The count to determine if a cycle is even or odd starts at one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5e3c908d4b401a655776f04009fda053809fc6" translate="yes" xml:space="preserve">
          <source>The animation starts abruptly, and then progressively slows down towards the end. This keyword represents the timing function &lt;code&gt;cubic-bezier(&lt;/code&gt;&lt;code&gt;0.0, 0.0, 0.58, 1.0&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03b502ca4749fd1fbe71c4a7d082d4731f428bf" translate="yes" xml:space="preserve">
          <source>The animation starts slowly, accelerates sharply, and then slows gradually towards the end. This keyword represents the timing function &lt;code&gt;cubic-bezier(0.25, 0.1, 0.25, 1.0)&lt;/code&gt;. It is similar to &lt;a href=&quot;#ease-in-out&quot;&gt;&lt;code&gt;ease-in-out&lt;/code&gt;&lt;/a&gt;, though it accelerates more sharply at the beginning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1256088df6bf7b151b90652b4e095e2be0c779" translate="yes" xml:space="preserve">
          <source>The animation starts slowly, and then progressively speeds up until the end, at which point it stops abruptly. This keyword represents the timing function &lt;code&gt;cubic-bezier(0.42, 0.0, 1.0, 1.0)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c29325bb041852d71b567fe3440180fb0d10e7" translate="yes" xml:space="preserve">
          <source>The animation starts slowly, speeds up, and then slows down towards the end. This keyword represents the timing function &lt;code&gt;cubic-bezier(0.42, 0.0, 0.58, 1.0)&lt;/code&gt;. At the beginning, it behaves like the &lt;a href=&quot;#ease-in&quot;&gt;&lt;code&gt;ease-in&lt;/code&gt;&lt;/a&gt; function; at the end, it is like the &lt;a href=&quot;#ease-out&quot;&gt;&lt;code&gt;ease-out&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2acc16e118a9f434b16a35b9148f1f51e8d28d2" translate="yes" xml:space="preserve">
          <source>The animation stays in its initial state until the end, at which point it jumps directly to its final state. This keyword represents the timing function &lt;code&gt;steps(1, end)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714f5ec5bf49816bfdfddc76f43d4b5e9e10ec4f" translate="yes" xml:space="preserve">
          <source>The animation will apply the values defined in the first relevant &lt;a href=&quot;@keyframes&quot;&gt;keyframe&lt;/a&gt; as soon as it is applied to the target, and retain this during the &lt;a href=&quot;animation-delay&quot;&gt;&lt;code&gt;animation-delay&lt;/code&gt;&lt;/a&gt; period. The first relevant keyframe depends on the value of &lt;a href=&quot;animation-direction&quot;&gt;&lt;code&gt;animation-direction&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89706d05ad9666848819ef77a559250d1110f8bc" translate="yes" xml:space="preserve">
          <source>The animation will follow the rules for both forwards and backwards, thus extending the animation properties in both directions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6927c11e29636ea79fa6e8f19d287b3b380e5bf" translate="yes" xml:space="preserve">
          <source>The animation will not apply any styles to the target when it's not executing. The element will instead be displayed using any other CSS rules applied to it. This is the default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea81ff6aad9059f5030b4f1c8dfce19c8189250a" translate="yes" xml:space="preserve">
          <source>The animation will repeat forever.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ae2c272ff1a2c1a0879616fbc7d20c3755da97" translate="yes" xml:space="preserve">
          <source>The animations run well, even under moderate system load. Simple animations can often perform poorly in JavaScript (unless they&amp;rsquo;re well made). The rendering engine can use frame-skipping and other techniques to keep the performance as smooth as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f57b08d0c9c3db2074433127c9f7009d4704cbd" translate="yes" xml:space="preserve">
          <source>The application opens in a conventional browser tab or new window, depending on the browser and platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d78934bd6f4b6a5d861b2e2adf9f89b99e1fe3f" translate="yes" xml:space="preserve">
          <source>The application will look and feel like a standalone application, but will have a minimal set of UI elements for controlling navigation. The elements will vary by browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df879a29e87bfc4b4a786d6dd935e9c5b8c8b170" translate="yes" xml:space="preserve">
          <source>The application will look and feel like a standalone application. This can include the application having a different window, its own icon in the application launcher, etc. In this mode, the user agent will exclude UI elements for controlling navigation, but can include other UI elements such as a status bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc08f6dcf479da9c2fd6cdc9a99be5ca77558a5b" translate="yes" xml:space="preserve">
          <source>The area that you create by chaining the area names must be rectangular, at this point there is no way to create an L-shaped area. The specification does note that a future level might provide this functionality. You can however span rows just as easily as columns. For example we could make our sidebar span down to the end of the footer by replacing the &lt;code&gt;.&lt;/code&gt; with &lt;code&gt;sd&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23fc777cac8dcb440618db874c3745a920f2044" translate="yes" xml:space="preserve">
          <source>The argument determines the distance over which the fade effect is applied. The &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; is resolved against the width of the line box. Values lower than &lt;code&gt;0&lt;/code&gt; are clipped to &lt;code&gt;0&lt;/code&gt;. Values greater than the width of the line box are clipped to the width of the line box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534894ce99a3994993dfdb6b699040662029d710" translate="yes" xml:space="preserve">
          <source>The arguments not defined above are defined as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0dbe8e1aaf46b82dfdf221da7bc9b7f75206f7" translate="yes" xml:space="preserve">
          <source>The arguments which are accepted vary depending on the shape that you are creating. We will cover these in the examples below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab65b73090d83ce5461735ef2f86b275843f64c2" translate="yes" xml:space="preserve">
          <source>The asterisk is optional with simple selectors. For instance, &lt;code&gt;*.warning&lt;/code&gt; and &lt;code&gt;.warning&lt;/code&gt; are equivalent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2a893c40a84066500f3e117ff5b09b8ae6e9f8" translate="yes" xml:space="preserve">
          <source>The at-rule contains a set of nested &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/descriptor_(CSS)&quot;&gt;descriptor&lt;/a&gt;s in a CSS block that is delimited by curly braces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67accae17248231fe840583700b512b047c19343" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a CSS &lt;a href=&quot;angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; dimension, that is including the unit (e.g. &lt;code&gt;30.5deg&lt;/code&gt;). If it is not valid, that is not an angle or out of the range accepted by the CSS property, the default value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f93d01c6761e25e8492ed687ba914de2066962" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a CSS &lt;a href=&quot;frequency&quot;&gt;&lt;code&gt;&amp;lt;frequency&amp;gt;&lt;/code&gt;&lt;/a&gt; dimension, that is including the unit (e.g. &lt;code&gt;30.5kHz&lt;/code&gt;). If it is not valid, that is not a frequency or out of the range accepted by the CSS property, the default value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="582f43b0cd0591dbb79c2139c57b28477e8cd7e9" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a CSS &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt;&lt;/a&gt;. If it is not valid, that is not an integer or out of the range accepted by the CSS property, the default value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c0632b1eec28cc337e33f8f0d36edf7eb1e54d6" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a CSS &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; dimension, that is including the unit (e.g. &lt;code&gt;12.5em&lt;/code&gt;). If it is not valid, that is not a length or out of the range accepted by the CSS property, the default value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96eb8c1af721e75e9648fa329e13fff2b3f292b" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a CSS &lt;a href=&quot;number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt;, that is without the unit (e.g. &lt;code&gt;12.5&lt;/code&gt;), and interpreted as a &lt;a href=&quot;frequency&quot;&gt;&lt;code&gt;&amp;lt;frequency&amp;gt;&lt;/code&gt;&lt;/a&gt; with the specified unit. If it is not valid, that is not a number or out of the range accepted by the CSS property, the default value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fc12cbc656705b40cbb824a69c64a131b402e8" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a CSS &lt;a href=&quot;number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt;, that is without the unit (e.g. &lt;code&gt;12.5&lt;/code&gt;), and interpreted as a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; with the specified unit. If it is not valid, that is not a number or out of the range accepted by the CSS property, the default value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="defaa0be6ec01a7aede196eb537320146d0971d7" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a CSS &lt;a href=&quot;number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt;, that is without the unit (e.g. &lt;code&gt;12.5&lt;/code&gt;), and interpreted as a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;. If it is not valid, that is not a number or out of the range accepted by the CSS property, the default value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00cc72f166e32e60d9870abda1ae6c8c5fc6058" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a CSS &lt;a href=&quot;number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt;, that is without the unit (e.g. &lt;code&gt;12.5&lt;/code&gt;), and interpreted as an &lt;a href=&quot;angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; with the specified unit. If it is not valid, that is not a number or out of the range accepted by the CSS property, the default value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4da374166b1bada03bf231fa84360845381515d" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a CSS &lt;a href=&quot;number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt;, that is without the unit (e.g. &lt;code&gt;12.5&lt;/code&gt;), and interpreted as an&lt;a href=&quot;time&quot;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt; with the specified unit. If it is not valid, that is not a number or out of the range accepted by the CSS property, the default value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182525133d4d7770c47c4784c4ec5ff6ed237050" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a CSS &lt;a href=&quot;number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt;. If it is not valid, that is not a number or out of the range accepted by the CSS property, the default value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad1ceab53d9ea71efe25656e781c185f3c32fb7" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a CSS &lt;a href=&quot;time&quot;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt; dimension, that is including the unit (e.g. &lt;code&gt;30.5ms&lt;/code&gt;). If it is not valid, that is not a time or out of the range accepted by the CSS property, the default value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c7c0c522f8970ff4fd60b1f2543a546bf20cab4" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a hash (3- or 6-value hash) or a keyword. It must be a valid CSS &lt;a href=&quot;string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab86559fab2e540269ecda457574c287878f639" translate="yes" xml:space="preserve">
          <source>The attribute value is parsed as a string that is used inside a CSS &lt;code&gt;url()&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030b1222e5076c2b13e0541fb0080d0abb35b278" translate="yes" xml:space="preserve">
          <source>The attribute value is treated as a CSS &lt;a href=&quot;string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;. It is NOT reparsed, and in particular the characters are used as-is instead of CSS escapes being turned into different characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30dd0a61bc66cbf9613dd86f697d74bcc9ff2c1" translate="yes" xml:space="preserve">
          <source>The available types are: &lt;code&gt;&quot;woff&quot;&lt;/code&gt;, &lt;code&gt;&quot;woff2&quot;&lt;/code&gt;, &lt;code&gt;&quot;truetype&quot;&lt;/code&gt;, &lt;code&gt;&quot;opentype&quot;&lt;/code&gt;, &lt;code&gt;&quot;embedded-opentype&quot;&lt;/code&gt;, and &lt;code&gt;&quot;svg&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ac0fa641d1159d66d86fe669a9898304f8a270" translate="yes" xml:space="preserve">
          <source>The axes and flex-direction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba76db5fd545a30d723dd59d669ae7a00c24f3b" translate="yes" xml:space="preserve">
          <source>The axis of rotation passes through an origin, defined by the &lt;a href=&quot;../transform-origin&quot;&gt;&lt;code&gt;transform-origin&lt;/code&gt;&lt;/a&gt; CSS property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5997deefe6b2979ca7678304358efc3cd5b5dcbb" translate="yes" xml:space="preserve">
          <source>The back face is hidden, effectively making the element invisible when turned away from the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="713b50bf5b0b70c89a0776e6781002d4a1c6c157" translate="yes" xml:space="preserve">
          <source>The back face is visible when turned towards the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2e4edebaac880ca1ad251f28e7224a58fa6d65" translate="yes" xml:space="preserve">
          <source>The background color is clipped at the border</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01265cd515efbf91965fcbe0118a000fa31406ea" translate="yes" xml:space="preserve">
          <source>The background color of a button that the mouse pointer is over (which would be &lt;code&gt;ThreeDFace&lt;/code&gt; or &lt;code&gt;ButtonFace&lt;/code&gt; when the mouse pointer is not over it). Should be used with the &lt;code&gt;-moz-ButtonHoverText&lt;/code&gt; foreground color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c123a3b27b512c90910286ff330db1de472fdcf2" translate="yes" xml:space="preserve">
          <source>The background extends to the outside edge of the border (but underneath the border in z-ordering).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6ff132888d85a54ff632ceff2d18b47e107320" translate="yes" xml:space="preserve">
          <source>The background extends to the outside edge of the padding. No background is drawn beneath the border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4a2bb29b5e39e1f9f110d11355682af6349a5a5" translate="yes" xml:space="preserve">
          <source>The background image is rendered at the specified size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45b62113c662ccedd39fec7a754e6d8feaca7c5" translate="yes" xml:space="preserve">
          <source>The background images are drawn on stacking context layers on top of each other. The first layer specified is drawn as if it is closest to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03fee7069c4c146181f649f2f8e22ae1faf5db5" translate="yes" xml:space="preserve">
          <source>The background is fixed relative to the element itself and does not scroll with its contents. (It is effectively attached to the element's border.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="879a614e91b7015bdb7455e27e65de74ecf877f3" translate="yes" xml:space="preserve">
          <source>The background is fixed relative to the element's contents. If the element has a scrolling mechanism, the background scrolls with the element's contents, and the background painting area and background positioning area are relative to the scrollable area of the element rather than to the border framing them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc223f3f4f8884039b1c6d635a320811e026eb5" translate="yes" xml:space="preserve">
          <source>The background is fixed relative to the viewport. Even if an element has a scrolling mechanism, the background doesn't move with the element. (This is not compatible with &lt;a href=&quot;background-clip#text&quot;&gt;&lt;code&gt;background-clip: text&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2868f7a54bc00037484ecc9bc58c41bab4e7f8de" translate="yes" xml:space="preserve">
          <source>The background is painted within (clipped to) the content box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb76e6b6dc6621a549f89b8b54d27bb42096fdf6" translate="yes" xml:space="preserve">
          <source>The background is painted within (clipped to) the foreground text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c530b70027206acb72a204fa2a858c6514764dd" translate="yes" xml:space="preserve">
          <source>The background is positioned relative to the border box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14b4bedfa14092e629b7741ddad5807f13354604" translate="yes" xml:space="preserve">
          <source>The background is positioned relative to the content box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975dc1ff5b29191fae702a428454256ca2b2f672" translate="yes" xml:space="preserve">
          <source>The background is positioned relative to the padding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f605115f255b94a4cce9fa473240d7b2e0a116d7" translate="yes" xml:space="preserve">
          <source>The base color of the main elements of a scroll bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c466c6cdbdf4df86960a332ed7556f78f3dd5ab2" translate="yes" xml:space="preserve">
          <source>The basic (CSS 2.1) syntax for this property is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6066482c10391dda5e46502f335ccc4c9b2e4325" translate="yes" xml:space="preserve">
          <source>The basic difference between CSS Grid Layout and &lt;a href=&quot;../css_flexible_box_layout&quot;&gt;CSS Flexbox Layout&lt;/a&gt; is that flexbox was designed for layout in one dimension - either a row &lt;em&gt;or&lt;/em&gt; a column. Grid was designed for two-dimensional layout - rows, and columns at the same time. The two specifications share some common features, however, and if you have already learned how to use flexbox, the similarities should help you get to grips with Grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c00dd27b12e1998d674c2a20ae7cf2255e7d888" translate="yes" xml:space="preserve">
          <source>The basic goal of the Cascading Stylesheet (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt;) language is to allow a browser engine to paint elements of the page with specific features, like colors, positioning, or decorations. The &lt;em&gt;CSS syntax&lt;/em&gt; reflects this goal and its basic building blocks are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd5d537e7557fdcdb1f80973755a248f815bb18" translate="yes" xml:space="preserve">
          <source>The basic syntax is the same, but the font technology can be specified, and allowable ranges for descriptors like &lt;code&gt;font-weight&lt;/code&gt; and &lt;code&gt;font-stretch&lt;/code&gt; can be supplied, rather than named according to the font file being loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27eb19b8549596f89613a2742f894e9dc65ad394" translate="yes" xml:space="preserve">
          <source>The behavior with &lt;code&gt;display: inline-block&lt;/code&gt; and anonymous block boxes is explicitly defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a59d442deab1c30ab38fbd5538428f737639f98" translate="yes" xml:space="preserve">
          <source>The behaviour of elements which have a block or inline formatting context is also defined in this specification. For elements with a block formatting context, the spec says:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8104c64d35e178f28fae1feda3d470195435bd7e" translate="yes" xml:space="preserve">
          <source>The below &lt;code&gt;@counter-style&lt;/code&gt; rule uses images instead of character symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143928260f09c41dde19b06c69c41eddfe86a768" translate="yes" xml:space="preserve">
          <source>The below diagram shows the inline and block directions in a horizontal writing mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398abdcf0d8323f938912c88cf44fc1e0599cba9" translate="yes" xml:space="preserve">
          <source>The below image shows an alignment container with two alignment subjects inside.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e81dc207242f62a6c343fb827f1367c71cacf4e" translate="yes" xml:space="preserve">
          <source>The best way to learn to use grid layout is to continue to build examples like the ones we have covered here. Pick something that you normally build using your framework of choice, or using floats, and see if you can build it using grid. Don&amp;rsquo;t forget to find examples that are impossible to build with current methods. That might mean taking inspiration from magazines or other non-web sources. Grid Layout opens up possibilities that we have not had before, we don&amp;rsquo;t need to be tied to the same old layouts to use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6459ef0717e0d39f58e1b8e38953299d2622ee" translate="yes" xml:space="preserve">
          <source>The blending mode that should be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e478e665cd49f40b26c0d641b1f3e16370dcda28" translate="yes" xml:space="preserve">
          <source>The blending mode to be applied. There can be several values, separated by commas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12a6dd99225b62ca9cd9b886598a09c54aeae55" translate="yes" xml:space="preserve">
          <source>The block axis crosses the inline axis in the direction that blocks are displayed down the page &amp;mdash; for example paragraphs in English are displayed one below the other vertically. This, therefore is the block dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf14fb48c04b4a0d3426f74d6bb2c886b7d6532b" translate="yes" xml:space="preserve">
          <source>The block dimension is the other dimension, and the direction in which blocks &amp;mdash; such as paragraphs &amp;mdash; display one after the other. In English and Arabic these run vertically, whereas in any vertical writing mode these run horizontally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199e5b76978a72e164515c27aaaa9a31c15cc39b" translate="yes" xml:space="preserve">
          <source>The border box is used as the reference box. The reference box of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table&quot;&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;&lt;/a&gt; is the border box of its table wrapper box, not its table box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974e7a6ef6d4bca2ea17ed163c1debff108935a3" translate="yes" xml:space="preserve">
          <source>The border color in the other dimension can be set with &lt;a href=&quot;border-block-color&quot;&gt;&lt;code&gt;border-block-color&lt;/code&gt;&lt;/a&gt; which sets &lt;a href=&quot;border-block-start-color&quot;&gt;&lt;code&gt;border-block-start-color&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-block-end-color&quot;&gt;&lt;code&gt;border-block-end-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ecf9a3853650c42217d662266410e503f41e83" translate="yes" xml:space="preserve">
          <source>The border color in the other dimension can be set with &lt;a href=&quot;border-inline-color&quot;&gt;&lt;code&gt;border-inline-color&lt;/code&gt;&lt;/a&gt; which sets &lt;a href=&quot;border-inline-start-color&quot;&gt;&lt;code&gt;border-inline-start-color&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-inline-end-color&quot;&gt;&lt;code&gt;border-inline-end-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb738f1f128ef433b3f4a686f99d65aaa1a2c0b" translate="yes" xml:space="preserve">
          <source>The border color that goes around buttons that represent the default action for a dialog box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f0834b6e91d0ae46dd121d245796d4fc53a3b8" translate="yes" xml:space="preserve">
          <source>The border properties are the main reason that Logical Properties and Values seems to have so many properties, as we have the longhands for the color, width, and style of the border on each side of a box, along with the shorthand to set all three at once for each side. As with margin and padding we have a mapped version of each physical property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f82cf83d7660c03a56c46276f42397c4028cc6a" translate="yes" xml:space="preserve">
          <source>The border style in the other dimension can be set with &lt;a href=&quot;border-block-style&quot;&gt;&lt;code&gt;border-block-style&lt;/code&gt;&lt;/a&gt;, which sets &lt;a href=&quot;border-block-start-style&quot;&gt;&lt;code&gt;border-block-start-style&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-block-end-style&quot;&gt;&lt;code&gt;border-block-end-style&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746fbce0b71618c6262f5559701682c6d583733e" translate="yes" xml:space="preserve">
          <source>The border style in the other dimension can be set with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-style&quot;&gt;&lt;code&gt;border-inline-style&lt;/code&gt;&lt;/a&gt;, which sets &lt;a href=&quot;border-inline-start-style&quot;&gt;&lt;code&gt;border-inline-start-style&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-inline-end-style&quot;&gt;&lt;code&gt;border-inline-end-style&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f39a96b5feee10dd73bcac5cf18fa5cd858e6e4" translate="yes" xml:space="preserve">
          <source>The border width in the other dimension can be set with &lt;a href=&quot;border-block-width&quot;&gt;&lt;code&gt;border-block-width&lt;/code&gt;&lt;/a&gt;, which sets &lt;a href=&quot;border-block-start-width&quot;&gt;&lt;code&gt;border-block-start-width&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-block-end-width&quot;&gt;&lt;code&gt;border-block-end-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e8f2e0e4585c4a16d3cae0582408e3a96d3177" translate="yes" xml:space="preserve">
          <source>The border width in the other dimension can be set with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-width&quot;&gt;&lt;code&gt;border-inline-width&lt;/code&gt;&lt;/a&gt;, which sets &lt;a href=&quot;border-inline-start-width&quot;&gt;&lt;code&gt;border-inline-start-width&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-inline-end-width&quot;&gt;&lt;code&gt;border-inline-end-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f11804db5114a7cc15660771e1b973f18f3f379" translate="yes" xml:space="preserve">
          <source>The border-radius-related CSS properties: the CSS shorthand &lt;a href=&quot;border-radius&quot;&gt;&lt;code&gt;border-radius&lt;/code&gt;&lt;/a&gt;, the properties for the other corners: &lt;a href=&quot;border-top-left-radius&quot;&gt;&lt;code&gt;border-top-left-radius&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom-right-radius&quot;&gt;&lt;code&gt;border-bottom-right-radius&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-bottom-left-radius&quot;&gt;&lt;code&gt;border-bottom-left-radius&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128fae40af0cb9d14b2ba264e4fd673b0912298a" translate="yes" xml:space="preserve">
          <source>The border-radius-related CSS properties: the CSS shorthand &lt;a href=&quot;border-radius&quot;&gt;&lt;code&gt;border-radius&lt;/code&gt;&lt;/a&gt;, the properties for the other corners: &lt;a href=&quot;border-top-right-radius&quot;&gt;&lt;code&gt;border-top-right-radius&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom-right-radius&quot;&gt;&lt;code&gt;border-bottom-right-radius&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-bottom-left-radius&quot;&gt;&lt;code&gt;border-bottom-left-radius&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c7409eac02e64a535ad4e288eafe2f488ec245" translate="yes" xml:space="preserve">
          <source>The border-radius-related CSS properties: the CSS shorthand &lt;a href=&quot;border-radius&quot;&gt;&lt;code&gt;border-radius&lt;/code&gt;&lt;/a&gt;, the properties for the other corners: &lt;a href=&quot;border-top-right-radius&quot;&gt;&lt;code&gt;border-top-right-radius&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom-right-radius&quot;&gt;&lt;code&gt;border-bottom-right-radius&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-top-left-radius&quot;&gt;&lt;code&gt;border-top-left-radius&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="994a37cb84f37294eb1a7d76fb6bb998cbe51f6d" translate="yes" xml:space="preserve">
          <source>The border-radius-related CSS properties: the CSS shorthand &lt;a href=&quot;border-radius&quot;&gt;&lt;code&gt;border-radius&lt;/code&gt;&lt;/a&gt;, the properties for the other corners: &lt;a href=&quot;border-top-right-radius&quot;&gt;&lt;code&gt;border-top-right-radius&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-top-left-radius&quot;&gt;&lt;code&gt;border-top-left-radius&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-bottom-left-radius&quot;&gt;&lt;code&gt;border-bottom-left-radius&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b4eac2df22c24f2ef46b09a153f0dbb73d605c" translate="yes" xml:space="preserve">
          <source>The border-related CSS shorthand properties: &lt;a href=&quot;border&quot;&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom&quot;&gt;&lt;code&gt;border-bottom&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-color&quot;&gt;&lt;code&gt;border-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9989e286210f692154230598559f3e60dea6877f" translate="yes" xml:space="preserve">
          <source>The border-related CSS shorthand properties: &lt;a href=&quot;border&quot;&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-left&quot;&gt;&lt;code&gt;border-left&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-color&quot;&gt;&lt;code&gt;border-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e664e07579e8687d0498bffc0eca0c4504ad5d5c" translate="yes" xml:space="preserve">
          <source>The border-related CSS shorthand properties: &lt;a href=&quot;border&quot;&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-right&quot;&gt;&lt;code&gt;border-right&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-color&quot;&gt;&lt;code&gt;border-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d4ce74d3abfa3c0e52ff576304802ba88c5fbf2" translate="yes" xml:space="preserve">
          <source>The border-related CSS shorthand properties: &lt;a href=&quot;border&quot;&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-top&quot;&gt;&lt;code&gt;border-top&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-color&quot;&gt;&lt;code&gt;border-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62f7510a406e01f8783c357998fb7c664dbf10e3" translate="yes" xml:space="preserve">
          <source>The border-related shorthand CSS properties: &lt;a href=&quot;border&quot;&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-width&quot;&gt;&lt;code&gt;border-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-color&quot;&gt;&lt;code&gt;border-color&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-radius&quot;&gt;&lt;code&gt;border-radius&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43bdbca88e66266c9c0f2647b03c1235e11bed9d" translate="yes" xml:space="preserve">
          <source>The border-related shorthand properties: &lt;a href=&quot;border&quot;&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-style&quot;&gt;&lt;code&gt;border-style&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-color&quot;&gt;&lt;code&gt;border-color&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc84359a3637db55becf9ae40e9ee9aaacd64c2c" translate="yes" xml:space="preserve">
          <source>The border-width-related properties: &lt;a href=&quot;border-bottom-width&quot;&gt;&lt;code&gt;border-bottom-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-left-width&quot;&gt;&lt;code&gt;border-left-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-right-width&quot;&gt;&lt;code&gt;border-right-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-top-width&quot;&gt;&lt;code&gt;border-top-width&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f68e6834ef9a7602fcdc1f6cf779cbdacf88c2" translate="yes" xml:space="preserve">
          <source>The borders in the other dimension can be set with &lt;a href=&quot;border-block&quot;&gt;&lt;code&gt;border-block&lt;/code&gt;&lt;/a&gt;, which sets &lt;a href=&quot;border-block-start&quot;&gt;&lt;code&gt;border-block-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-block-end&quot;&gt;&lt;code&gt;border-block-end&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff9ead004c29497838b1d94b2d94e043ed25384" translate="yes" xml:space="preserve">
          <source>The borders in the other dimension can be set with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline&quot;&gt;&lt;code&gt;border-inline&lt;/code&gt;&lt;/a&gt;, which sets &lt;a href=&quot;border-inline-start&quot;&gt;&lt;code&gt;border-inline-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-inline-end&quot;&gt;&lt;code&gt;border-inline-end&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b86743fdaec218f0ff7a7fc09a2523d5b40afc" translate="yes" xml:space="preserve">
          <source>The bottom edge, specified as an &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;, of the sub-image within the specified image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937fae72936ed3a5de0ecdbf641c1c3d60d10642" translate="yes" xml:space="preserve">
          <source>The box alignment module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8cfd9bf595adba7fb8a14d65857a0df6375dae" translate="yes" xml:space="preserve">
          <source>The box alignment specification also includes the &lt;code&gt;gap&lt;/code&gt;, &lt;code&gt;row-gap&lt;/code&gt;, and &lt;code&gt;column-gap&lt;/code&gt; properties. These properties enable the setting of a consistent gap between items in a row or column, in any layout method which has items arranged in this way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a4895e423d0166bb198097a080b87225ec3a3f" translate="yes" xml:space="preserve">
          <source>The box does not define a snap position in that axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fad8b12597bdbc50d6543bfcb338d896ec3de03" translate="yes" xml:space="preserve">
          <source>The box does not establish a new local stacking context. The stack level of the generated box in the current stacking context is the same as its parent's box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82e42002af2cbaab8787b01d092300a37cebcd8" translate="yes" xml:space="preserve">
          <source>The box is a square: an arc of circle is used as the border</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c9219151c10e0074253331da85148755471668" translate="yes" xml:space="preserve">
          <source>The box is not a square: an arc of ellipse is used as the border</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6845ab04dc223dfaf5d0a837f90dad0ad14b89b5" translate="yes" xml:space="preserve">
          <source>The box model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e3429afb1f38142464a6e33c731601388de372" translate="yes" xml:space="preserve">
          <source>The box's list of CSS classes is reset to simply &lt;code&gt;&quot;box&quot;&lt;/code&gt;. This has the effect of removing any other classes currently applied to the box, including the &lt;code&gt;&quot;changing&quot;&lt;/code&gt; class that handles animation. In other words, we're removing the animation effect from the box. However, changes to the class list don't take effect until the style recomputation is complete and a refresh has occurred to reflect the change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5c7eee1e73f83ad17634bc3c2aa26b34d5b3c7" translate="yes" xml:space="preserve">
          <source>The boxes around the words before the strong element and after the strong element are referred to as anonymous boxes, boxes introduced to ensure that everything is wrapped in a box, but ones that we cannot target directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="978c72a1debe7e8c02786a4f8a3d290fd3773462" translate="yes" xml:space="preserve">
          <source>The brightness of the result, specified as a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;. A value under &lt;code&gt;100%&lt;/code&gt; darkens the image, while a value over &lt;code&gt;100%&lt;/code&gt; brightens it. A value of &lt;code&gt;0%&lt;/code&gt; will create an image that is completely black, while a value of &lt;code&gt;100%&lt;/code&gt; leaves the input unchanged. The lacuna value for interpolation is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cfd269740bab7c7b126db3af841d417b8c158af" translate="yes" xml:space="preserve">
          <source>The browser chooses the best type of justification for the current situation based on a balance between performance and quality, but also on what is most appropriate for the language of the text (e.g., English, CJK languages, etc.). This is the default justification used if &lt;code&gt;text-justify&lt;/code&gt; is not set at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8157d857128308b5224dfba9712f9ca4f1950aef" translate="yes" xml:space="preserve">
          <source>The browser determines whether font kerning should be used or not. For example, some browsers will disable kerning on small fonts, since applying it could harm the readability of text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f8c86d39dd23dada2267fc996c067b3435e968" translate="yes" xml:space="preserve">
          <source>The browser emphasizes geometric precision over rendering speed and legibility. Certain aspects of fonts &amp;mdash; such as kerning &amp;mdash; don't scale linearly. So this value can make text using those fonts look good.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45db3fc9f9c55c5074ece17b9bc623e8c0b7303" translate="yes" xml:space="preserve">
          <source>The browser emphasizes legibility over rendering speed and geometric precision. This enables kerning and optional ligatures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1be41801fa0b557c619923b598823a5d2161e61" translate="yes" xml:space="preserve">
          <source>The browser emphasizes rendering speed over legibility and geometric precision when drawing text. It disables kerning and ligatures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4aa53527fddcb18e026565050c08cac4feef6a0" translate="yes" xml:space="preserve">
          <source>The browser has a basic style sheet that gives a default style to any document. These style sheets are named &lt;strong&gt;user-agent stylesheets&lt;/strong&gt;. Some browsers use actual style sheets for this purpose, while others simulate them in code, but the end result is the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed91d2f693ca98c64753154c4b3c6826c0a5d03" translate="yes" xml:space="preserve">
          <source>The browser is free to automatically break words at appropriate hyphenation points, following whatever rules it chooses to use. However, suggested line break opportunities (see &lt;a href=&quot;#Suggesting_line_break_opportunities&quot;&gt;Suggesting line break opportunities&lt;/a&gt; below) will override automatic break point selection when present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4844d53766790a6be531927f1d1569d4ad2914" translate="yes" xml:space="preserve">
          <source>The browser makes educated guesses about when to optimize for speed, legibility, and geometric precision while drawing text. For differences in how this value is interpreted by the browser, see the compatibility table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7247137bb561a497d2e8065c109044211e0e88c5" translate="yes" xml:space="preserve">
          <source>The browser makes trade-offs among speed, legibility, and geometric precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1733828bb323db728cae8b98e17405d39208d0fb" translate="yes" xml:space="preserve">
          <source>The browser selects a suitable margin to use. For example, in certain cases this value can be used to center an element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fab96a0992199ad1a8654fb936d9962eca2b92" translate="yes" xml:space="preserve">
          <source>The browser selects a suitable value to use. See &lt;a href=&quot;margin&quot;&gt;&lt;code&gt;margin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22fe8e052489ab090a29e8c54e963039733ba2b" translate="yes" xml:space="preserve">
          <source>The browser will calculate and select a height for the specified element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed926a255388349cc6f0e72f91315f74de78de4" translate="yes" xml:space="preserve">
          <source>The browser will calculate and select a width for the specified element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58e9cbbb7fa9e134bfa6c1428c961fe1191cc305" translate="yes" xml:space="preserve">
          <source>The browser will modify the shape of glyphs for optimal viewing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04f4d68fadfa64b46b47c8b10eddf14c427d6b8" translate="yes" xml:space="preserve">
          <source>The browser will not modify the shape of glyphs for optimal viewing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ee619b9b07a40c20d6e3e0a2cbc923e832a340" translate="yes" xml:space="preserve">
          <source>The browser's default spacing is used between columns. For multi-column layout this is specified as &lt;code&gt;1em&lt;/code&gt;. For all other layout types it is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc0e494456ce6c307386ae8154883cde97a28f3" translate="yes" xml:space="preserve">
          <source>The browser-defined size matching the usual cursor size on the client's system</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76279c3c68167b01dea4992ec7d0c64ca1576e1a" translate="yes" xml:space="preserve">
          <source>The callout is disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f1888a72ec3412e30053c5752d30f7138169e2" translate="yes" xml:space="preserve">
          <source>The caption box should be positioned above the table, while the width and horizontal alignment behavior are not bound to the table's horizontal layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615d3edbc53a4f8fa298c14a475fcba69252d578" translate="yes" xml:space="preserve">
          <source>The caption box should be positioned above the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05296500a3ffcc0246251d5792d80120df5990ee" translate="yes" xml:space="preserve">
          <source>The caption box should be positioned below the table, while the width and horizontal alignment behavior are not bound to the table's horizontal layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deeefb6e12fde8f15facb41a9a81648e73def0f4" translate="yes" xml:space="preserve">
          <source>The caption box should be positioned below the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86de6281f6603c26c693bc079227bfa77afac442" translate="yes" xml:space="preserve">
          <source>The caption box should be positioned on the left side of the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b14c123006a39306818894d966cf410f9a9c26a" translate="yes" xml:space="preserve">
          <source>The caption box should be positioned on the right side of the table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6492a26385d7b7c678b48efec2e3256e49c5b2" translate="yes" xml:space="preserve">
          <source>The card is going to be our flex container, with &lt;code&gt;flex-direction&lt;/code&gt; set to column. I then give the date an &lt;code&gt;order&lt;/code&gt; of &lt;code&gt;-1&lt;/code&gt;. This pulls it up above the heading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d05a6d90a4268cef072e82a060fed04834ab60" translate="yes" xml:space="preserve">
          <source>The cascading algorithm determines how to find the value to apply for each property for each document element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c6a04abcdf0fab8d72ffe2d43ef41dd1a97046" translate="yes" xml:space="preserve">
          <source>The center alignment of this box's scroll snap area, within the scroll container's snapport is a snap position in this axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c691f450e8a94fc29e7fd76cdced48844086df0" translate="yes" xml:space="preserve">
          <source>The child will influence the stack's size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b30e3ef50996bddb31b598785ee69f11c62dd2e" translate="yes" xml:space="preserve">
          <source>The classical CSS concept of validity, tied to each property, is not very useful in regard to custom properties. When the values of the custom properties are parsed, the browser doesn't know where they will be used, so must, therefore, consider nearly all values as &lt;em&gt;valid&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa6a9e35d4076a8af0dffda6ac669a395d73dbef" translate="yes" xml:space="preserve">
          <source>The color green is commonly used to indicate valid input. People who have certain types of color blindness will be unable to determine the input's state unless it is accompanied by an additional indicator that does not rely on color to convey meaning. Typically, descriptive text and/or an icon are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858c72e23cbe3d5e072291867890ebafc5963d97" translate="yes" xml:space="preserve">
          <source>The color keywords all represent plain, solid colors, without transparency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa556af9ca6a1ce926831f862dffb2aa2c44d79" translate="yes" xml:space="preserve">
          <source>The color of the border away from the light source for 3-D elements that appear 3-D due to that layer of surrounding border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a80158ba96a49f23608a252e42f9b62c83ba62e" translate="yes" xml:space="preserve">
          <source>The color of the border facing the light source for 3-D elements that appear 3-D due to that layer of surrounding border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd38635665ed70221ad017de7d64d51db3ddcb1" translate="yes" xml:space="preserve">
          <source>The color of the border. See &lt;a href=&quot;color&quot;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45768acc3aa705e0727125bc44517f93514b9fb6" translate="yes" xml:space="preserve">
          <source>The color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b5bdb66edc47f5ae918906ee5a2c52718f777a" translate="yes" xml:space="preserve">
          <source>The color of the bottom border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c5e0e03cb625771e2ef557e97cd30a06cf79b9" translate="yes" xml:space="preserve">
          <source>The color of the caret.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e77afaa8229ebffaaaf99958a17290d5c0e20cfa" translate="yes" xml:space="preserve">
          <source>The color of the darker (generally inner) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e4c0f234502e8795d5cc5c7911df67ada73278" translate="yes" xml:space="preserve">
          <source>The color of the darker (generally outer) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a4cf6490ccfed6a7bd61a1deeaef3f8d1ac7aa" translate="yes" xml:space="preserve">
          <source>The color of the left border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafdee25131aaad8d953c2cf827da2886e919d7d" translate="yes" xml:space="preserve">
          <source>The color of the lighter (generally inner) of the two borders away from the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b97f3a98e3986b167379ae10e8afd1085bf57447" translate="yes" xml:space="preserve">
          <source>The color of the lighter (generally outer) of the two borders facing the light source for 3-D elements that appear 3-D due to two concentric layers of surrounding border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e818429ce4564199b1daffcc0e5d43d4f73cd6" translate="yes" xml:space="preserve">
          <source>The color of the line decoration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174bbd56c0aba17edd8fd9f89fc5fd3377df2372" translate="yes" xml:space="preserve">
          <source>The color of the outline, specified as a &lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c201a810cad447b63cf77a8f9eb1bb9c9c3179" translate="yes" xml:space="preserve">
          <source>The color of the right border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acfef7299b07dcf084ac2ae8eabeeb9ab4c2b316" translate="yes" xml:space="preserve">
          <source>The color of the rule that separates columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a45f5b8632d03614fece5aff0fd38eb9dc9d2ed" translate="yes" xml:space="preserve">
          <source>The color of the scroll arrows of the scroll bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6cf0570683bdfbbb3499f7f57462980cfaf906" translate="yes" xml:space="preserve">
          <source>The color of the scroll bar's gutter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6135ff6c39667aae5e593d79d71de146e8f34789" translate="yes" xml:space="preserve">
          <source>The color of the scroll box and scroll arrows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b3bffa0491216d8c59e52af9f5f96efd5f4822" translate="yes" xml:space="preserve">
          <source>The color of the shadow, specified as a &lt;a href=&quot;../color_value&quot;&gt;&lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt;&lt;/a&gt;. If unspecified, the value of the &lt;a href=&quot;../color&quot;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt; property is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34059a0a7aa99aa2ab52f1df2aaf17320bdfc539" translate="yes" xml:space="preserve">
          <source>The color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7d0da0c9e7c13ba440fd6f6504897697d2862f" translate="yes" xml:space="preserve">
          <source>The color of the stroke.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2021f90a9bb01d2c3425a4b0a4c3520b73cb4e" translate="yes" xml:space="preserve">
          <source>The color of the top and left edges of the scroll box and scroll arrows of the scroll bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e106cf488af4fa2c3eddc5778d78a21964385b" translate="yes" xml:space="preserve">
          <source>The color of the top border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcc4a314753593e3243ee7428678eb1e3b26829" translate="yes" xml:space="preserve">
          <source>The color of the track element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e5b6af93c52a0fafa95a09f68c3c9523bbfa52" translate="yes" xml:space="preserve">
          <source>The color parts of the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill&quot;&gt;fill&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke&quot;&gt;stroke&lt;/a&gt;&lt;/code&gt; attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e832b6357840ade5c88f69c3a79f52212cde2c28" translate="yes" xml:space="preserve">
          <source>The color red is commonly used to indicate invalid input. People who have certain types of color blindness will be unable to determine the input's state unless it is accompanied by an additional indicator that does not rely on color to convey meaning. Typically, descriptive text and/or an icon are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4593f0bd61b3255fbe49f96806935395389139dc" translate="yes" xml:space="preserve">
          <source>The color-related CSS properties for the other borders: &lt;a href=&quot;border-left-color&quot;&gt;&lt;code&gt;border-left-color&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom-color&quot;&gt;&lt;code&gt;border-bottom-color&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-top-color&quot;&gt;&lt;code&gt;border-top-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b0e9911163e99fd31fbd6bac2f3d8d514d5adb" translate="yes" xml:space="preserve">
          <source>The color-related CSS properties for the other borders: &lt;a href=&quot;border-right-color&quot;&gt;&lt;code&gt;border-right-color&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom-color&quot;&gt;&lt;code&gt;border-bottom-color&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-left-color&quot;&gt;&lt;code&gt;border-left-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2b3b5fcf1eb87669677dd43c69e09b9599dcf8" translate="yes" xml:space="preserve">
          <source>The color-related CSS properties for the other borders: &lt;a href=&quot;border-right-color&quot;&gt;&lt;code&gt;border-right-color&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom-color&quot;&gt;&lt;code&gt;border-bottom-color&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-top-color&quot;&gt;&lt;code&gt;border-top-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23bd5d313990a1ab921c2392d95aa987dc764dbf" translate="yes" xml:space="preserve">
          <source>The color-related CSS properties for the other borders: &lt;a href=&quot;border-right-color&quot;&gt;&lt;code&gt;border-right-color&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-top-color&quot;&gt;&lt;code&gt;border-top-color&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-left-color&quot;&gt;&lt;code&gt;border-left-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a26254b427a6f27460d273e696b5ec4f6687b3a2" translate="yes" xml:space="preserve">
          <source>The column box will only shrink to be smaller than the declared column width in the case of a single column with less available width than the value of &lt;code&gt;column-width&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004c1013e89262dd3452b9ce185fd4eeeceb15ac" translate="yes" xml:space="preserve">
          <source>The column properties will just be ignored by non-columns-supporting browsers. Therefore it's relatively easy to create a layout that will display in a single column in those browsers and use multiple columns in supporting browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd6210da64cbc1583d5a43d1da416738d02626c" translate="yes" xml:space="preserve">
          <source>The complete example is available on Glitch; you can &lt;a href=&quot;https://glitch.com/edit/#!/remix/fullscreen-button-label&quot;&gt;view and remix the code&lt;/a&gt; or you can &lt;a href=&quot;https://fullscreen-button-label.glitch.me/&quot;&gt;view the working demo&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ab9d37935ce1ff7b464b4f120df50471993dbe" translate="yes" xml:space="preserve">
          <source>The computation needed to reach a property's computed value typically involves converting relative values (such as those in &lt;code&gt;em&lt;/code&gt; units or percentages) to absolute values. For example, if an element has specified values &lt;code&gt;font-size: 16px&lt;/code&gt; and &lt;code&gt;padding-top: 2em&lt;/code&gt;, then the computed value of &lt;code&gt;padding-top&lt;/code&gt; is &lt;code&gt;32px&lt;/code&gt; (double the font size).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66361f85dd4920f55fdf6ac3d7126780a099988b" translate="yes" xml:space="preserve">
          <source>The computation of values depends on the image's intrinsic dimensions (width and height) and intrinsic proportions (width-to-height ratio). These attributes are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4fd3bcff5e7f35df93aed1144e5e18b82c6c73" translate="yes" xml:space="preserve">
          <source>The computed value of auto is determined as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc514909fd26cad496c9dfe121b1da8435c755f2" translate="yes" xml:space="preserve">
          <source>The concept of visual display following document source order is detailed in the &lt;em&gt;WCAG Techniques for Success Criteria &amp;ndash; &lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/C27.html&quot;&gt;Technique C27&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c80590679f4e57983f055829a9232402119d4f" translate="yes" xml:space="preserve">
          <source>The concrete object size is calculated using the following algorithm:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d74f88fdafb3a494953bf3e9561aa988347c91" translate="yes" xml:space="preserve">
          <source>The container looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2787105481d2542dee96e84d911e2e2f188e5ae" translate="yes" xml:space="preserve">
          <source>The containing block height minus vertical margin, border and padding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2433bc969e388e3765f9fae785ee918fc4cddcd9" translate="yes" xml:space="preserve">
          <source>The containing block width minus horizontal margin, border and padding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a216b94bb243627d2864ec2ca1c8f3a77d3462" translate="yes" xml:space="preserve">
          <source>The containing block's height minus the vertical margin, border, and padding. (Note that some browsers implement an ancient name for this keyword, &lt;code&gt;available&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d99badb7ebbc8c43c7d91155c3a81f34962d1f2" translate="yes" xml:space="preserve">
          <source>The containing block's width minus the horizontal margin, border, and padding. (Note that some browsers implement an ancient name for this keyword, &lt;code&gt;available&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0233fba4c8dafe123f4d0fe88318515e76209c7c" translate="yes" xml:space="preserve">
          <source>The content goes into the box. Once it fills the box, it continues to overflow in a visible way, displaying content outside the box, potentially displaying under subsequent content. The property that controls how overflow behaves is the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs//Web/CSS/overflow&quot;&gt;overflow&lt;/a&gt;&lt;/code&gt; property which has an initial value of &lt;code&gt;visible&lt;/code&gt;. This is why we can see the overflow content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806b9b937fbce6508fdce7539cd01e80a61d3ed2" translate="yes" xml:space="preserve">
          <source>The content is sized as if &lt;code&gt;none&lt;/code&gt; or &lt;code&gt;contain&lt;/code&gt; were specified, whichever would result in a smaller concrete object size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56843bce5deb28f9c6c949e42485a91db31b568" translate="yes" xml:space="preserve">
          <source>The content moves exactly with the user's finger. This value allows for free-form panning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e266ce9d2f5dcd4764ae4a3ccd775894b44bf180" translate="yes" xml:space="preserve">
          <source>The content of a CSS declaration block, that is a list of semi-colon-separated declarations, without the initial and closing braces, can be put inside an HTML &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes#attr-style&quot;&gt;style&lt;/a&gt;&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84d046d3ffb15bc896492a0c6cf1d425ac1e05a" translate="yes" xml:space="preserve">
          <source>The content of the page is displayed in landscape mode (i.e. the longest side of the box is horizontal).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d43d5f45b9a704a105ad133bc67cd20ad357795" translate="yes" xml:space="preserve">
          <source>The content of the page is displayed in portrait mode (i.e. the longest side of the box is vertical). This is the default orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfcf7b6cc2766593ec5f8f6e7ce430b4bea823df" translate="yes" xml:space="preserve">
          <source>The content uses text and background colors that will be too similar on the output device for legibility purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16fb639b38e020d67e57bfcfb64bb0e6fe0bce2" translate="yes" xml:space="preserve">
          <source>The contrast of the result, specified as a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;. A value under &lt;code&gt;100%&lt;/code&gt; decreases the contrast, while a value over &lt;code&gt;100%&lt;/code&gt; increases it. A value of &lt;code&gt;0%&lt;/code&gt; will create an image that is completely gray, while a value of &lt;code&gt;100%&lt;/code&gt; leaves the input unchanged. The lacuna value for interpolation is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1468b533b2900d0e27aefe36450624f16604587e" translate="yes" xml:space="preserve">
          <source>The cross axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d55d2e7de1f7a2f8f973be2900fe047aa388ab" translate="yes" xml:space="preserve">
          <source>The cross axis = runs across the main axis = alignment via &lt;code&gt;align-content&lt;/code&gt;, &lt;code&gt;align-self&lt;/code&gt;/&lt;code&gt;align-items&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7519f3b3b8aefcc184b34540d6628a4a1a780970" translate="yes" xml:space="preserve">
          <source>The cross axis runs perpendicular to the main axis, therefore if your &lt;code&gt;flex-direction&lt;/code&gt; (main axis) is set to &lt;code&gt;row&lt;/code&gt; or &lt;code&gt;row-reverse&lt;/code&gt; the cross axis runs down the columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5337a23808448acf607004dfcc8f2c3ce5aa0e82" translate="yes" xml:space="preserve">
          <source>The cross-end margin edge of the flex item is flushed with the cross-end edge of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c0ddbb4aeee5fdfeec02175b9beba578f404af" translate="yes" xml:space="preserve">
          <source>The cross-end margin edges of the flex items are flushed with the cross-end edge of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938f625e21e24e6ff08ee57007e08822691a5fb8" translate="yes" xml:space="preserve">
          <source>The cross-start margin edge of the flex item is flushed with the cross-start edge of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1345843e0f9cf3bfe4ae2c04828dc49cd6eb753" translate="yes" xml:space="preserve">
          <source>The cross-start margin edges of the flex items are flushed with the cross-start edge of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67ae14570f38671c31b1601bce90f8d2ee1de6c" translate="yes" xml:space="preserve">
          <source>The cubic-bezier() class of timing functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="325a1e7cff97e7164c7c81af122b3d025cfe6ce1" translate="yes" xml:space="preserve">
          <source>The cursor is a pointer that indicates a link. Typically an image of a pointing hand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e1fff5060935666338a6dc9756e8df1f5ccd73a" translate="yes" xml:space="preserve">
          <source>The custom property's fallback value, which is used in case the custom property is invalid in the used context. This value may contain any character except some characters with special meaning like newlines, unmatched closing brackets, i.e. &lt;code&gt;)&lt;/code&gt;, &lt;code&gt;]&lt;/code&gt;, or &lt;code&gt;}&lt;/code&gt;, top-level semicolons, or exclamation marks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572758fbf099e037463e2afeb23d9e36f285599b" translate="yes" xml:space="preserve">
          <source>The default &amp;mdash; underlines and overlines are only drawn where they do not touch or closely approach a glyph. I.e. they are interrupted where they would otherwise cross over a glyph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d4a262f804ba9415e0e9a4a1e96dcdd6e5f3f5" translate="yes" xml:space="preserve">
          <source>The default CSS templates for Windows apps using JavaScript, &quot;ui-light.css&quot; and &quot;ui-dark.css&quot;, set this property to &lt;code&gt;vertical-to-horizontal&lt;/code&gt; by default on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html&quot;&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd0f9d688a46d9cdc7bec5c3178f5b3f1135e64" translate="yes" xml:space="preserve">
          <source>The default callout is displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27320fa86c1b5d9a405bf9e2a6232032db67aa1" translate="yes" xml:space="preserve">
          <source>The default for automatically created rows in the implicit grid is for them to be auto-sized. This means that they will contain the content added to them without causing an overflow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60a293c9c01ed25510ec8916cee78c3bef1ae2a" translate="yes" xml:space="preserve">
          <source>The default for this property. This keyword value will truncate the text at the limit of the &lt;a href=&quot;css_box_model/introduction_to_the_css_box_model&quot;&gt;content area&lt;/a&gt;, therefore the truncation can happen in the middle of a character. To clip at the transition between characters you can specify &lt;code&gt;text-overflow&lt;/code&gt; as an empty string, if that is supported in your target browsers: &lt;code&gt;text-overflow: '';&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412f8d83f35e13240013c46dae4a6bd4340bb390" translate="yes" xml:space="preserve">
          <source>The default minimum height for flex items, providing a more reasonable default than 0 for other layouts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca597722e4e4f0334c5d54fb3d8b230a4f62bfae" translate="yes" xml:space="preserve">
          <source>The default minimum width for flex items, providing a more reasonable default than 0 for other layouts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71bdde1c64199f353033976b8e5c3d5933c99ad6" translate="yes" xml:space="preserve">
          <source>The default scroll overflow behavior occurs as normal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38322aec16b43f0884dd8b8fcb324d9096c656d9" translate="yes" xml:space="preserve">
          <source>The default scrollbar width for the platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab85965e4e6f07fbbf834f37b3596e180a05e507" translate="yes" xml:space="preserve">
          <source>The definition syntax describes which values are allowed and the interactions between them. A component can be a &lt;em&gt;keyword&lt;/em&gt;, some characters considered as a &lt;em&gt;literal&lt;/em&gt;, or a value of a given CSS data type or of another CSS property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a49f6e6af5f0448acd4c37077bfe8312e52509" translate="yes" xml:space="preserve">
          <source>The delay may be zero, positive, or negative:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a250b6ac2220e010ecd0975a964c8c329173e0" translate="yes" xml:space="preserve">
          <source>The demo below uses some longhands and three shorthand values. As with the other demos try changing the &lt;code&gt;direction&lt;/code&gt; property to &lt;code&gt;rtl&lt;/code&gt; to cause the boxes to display in a right-to-left direction, or changing the &lt;code&gt;writing-mode&lt;/code&gt; from &lt;code&gt;horizontal-tb&lt;/code&gt; to &lt;code&gt;vertical-rl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92bb7ec27503e9d002bffaf79e33d7c916668afc" translate="yes" xml:space="preserve">
          <source>The descendant combinator is technically one or more &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/CSS&quot;&gt;CSS&lt;/a&gt; white space characters &amp;mdash; the space character and/or one of four control characters: carriage return, form feed, new line, and tab characters &amp;mdash; between two selectors in the absence of another combinator. Additionally, the white space characters of which the combinator is comprised may contain any number of CSS comments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72b163d520ab9a986fc1e34946be8e2c92083b28" translate="yes" xml:space="preserve">
          <source>The device draws all lines in sequence. All computer screens use progressive scanning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e34f774eda3e89a4bdf0a22e4cadb3883823d473" translate="yes" xml:space="preserve">
          <source>The device draws odd lines and even lines alternately. Some televisions use interlaced scanning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bce726ed554e8bb9142f4335c016a08772ca7aa" translate="yes" xml:space="preserve">
          <source>The device is used in a dim environment, where excessive contrast and brightness would be distracting or uncomfortable to the reader. For example: night time, or a dimly illuminated indoor environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46bb1765ce55683c91dccb405479179ebf636213" translate="yes" xml:space="preserve">
          <source>The device is used in a environment with a light level in the ideal range for the screen, and which does not necessitate any particular adjustment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d4688c9b607eea49e4a90ef39601b6d78a069b" translate="yes" xml:space="preserve">
          <source>The device is used in an exceptionally bright environment, causing the screen to be washed out and difficult to read. For example: bright daylight.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065e771a39e5fb63fccf0edfbbef5ac11fd7e0c8" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;visibility: hidden&lt;/code&gt; and &lt;code&gt;display: none&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd6de4479dc11dba0d9188b01bff95a85699ad8" translate="yes" xml:space="preserve">
          <source>The digits value requires less markup than the all value when digits are being combined, but it is currently not very widely supported by browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872489852bd46234dcf4845cec151c636ad19d90" translate="yes" xml:space="preserve">
          <source>The dimension parallel to the flow of text within a line, i.e., the horizontal dimension in horizontal writing modes, and the vertical dimension in vertical writing modes. For standard English text, it is the horizontal dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9cd14a247f752ceee30443b983b403de7c63b69" translate="yes" xml:space="preserve">
          <source>The dimension perpendicular to the flow of text within a line, i.e., the vertical dimension in horizontal writing modes, and the horizontal dimension in vertical writing modes. For standard English text, it is the vertical dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81a4221566b8a298d122e24e480ea9a5b74e43ed" translate="yes" xml:space="preserve">
          <source>The dimensions for slicing the source image into regions. Up to four values may be specified. See &lt;a href=&quot;border-image-slice&quot;&gt;&lt;code&gt;border-image-slice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e246ef11225b6ce5872359fbd625f765d4da4eca" translate="yes" xml:space="preserve">
          <source>The dimensions for slicing the source image into regions. Up to four values may be specified. See &lt;a href=&quot;mask-border-slice&quot;&gt;&lt;code&gt;mask-border-slice&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcf0514ebb2e9146a70424b34217655c00338c1" translate="yes" xml:space="preserve">
          <source>The dimensions of the box: precisely defined or constrained, or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45b38ae4ffcdb921514fdc3f84a2f263e68b2f5" translate="yes" xml:space="preserve">
          <source>The direction in which the animation is played. The value must be one of those available in &lt;a href=&quot;animation-direction&quot;&gt;&lt;code&gt;animation-direction&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d974b90a66f8fa7649b81544511f37958c459f63" translate="yes" xml:space="preserve">
          <source>The display mode of the application, as specified in the web app manifest's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Manifest#display&quot;&gt;&lt;code&gt;display&lt;/code&gt;&lt;/a&gt; member</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7816c6645a977c65089bcc0411e9b9fc75e45f4" translate="yes" xml:space="preserve">
          <source>The display type of an element defines the outer display type, this dictates how the box displays alongside other elements in the same formatting context. It also defines the inner display type, which dictates how boxes inside this element behave. We can see this very clearly when considering a flex layout. In the example below I have a div, which I have given &lt;code&gt;display: flex&lt;/code&gt;. The flex container behaves like a block element, it displays on a new line and takes up all of the space it can in the inline direction. This is the outer display type of &lt;code&gt;block&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dee20709206d0ec3f2fa8ca7e23bb315ec7608e" translate="yes" xml:space="preserve">
          <source>The display-legacy methods allow the same results with single keyword values, and should be favoured by developers until the two keyword values are better supported. For example, using two values you might specify an inline flex container as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbcb0a16d185dfcb0f57e69067d5d1ceca195869" translate="yes" xml:space="preserve">
          <source>The distance of the border image from the element's outside edge. Up to four values may be specified. See &lt;a href=&quot;border-image-outset&quot;&gt;&lt;code&gt;border-image-outset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1342c2da02c084c150d85dca9c4629c18dffeb75" translate="yes" xml:space="preserve">
          <source>The distance of the border mask from the element's outside edge. Up to four values may be specified. See &lt;a href=&quot;mask-border-outset&quot;&gt;&lt;code&gt;mask-border-outset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f13041b740ece608329e9ef517122ad3983403" translate="yes" xml:space="preserve">
          <source>The document element's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth&quot;&gt;&lt;code&gt;Element.clientWidth&lt;/code&gt;&lt;/a&gt; is the inner width of an document in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag#A_pixel_is_not_a_pixel&quot;&gt;CSS pixels&lt;/a&gt;, including padding (but not borders, margins, or vertical scrollbars, if present). This is the viewport width. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth&quot;&gt;&lt;code&gt;Window.innerWidth&lt;/code&gt;&lt;/a&gt; is the width, in CSS pixels, of the browser window viewport including, if rendered, the vertical scrollbar. The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth&quot;&gt;&lt;code&gt;Window.outerWidth&lt;/code&gt;&lt;/a&gt; is the width of the outside of the browser window including all the window chrome.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d910622e80f2003337f9127af489852af83c786" translate="yes" xml:space="preserve">
          <source>The document should be locked into landscape orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72eda396999a6beeefb80c190b7db901a760c954" translate="yes" xml:space="preserve">
          <source>The document should be locked into portrait orientation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6cf0ebef5b1d9fd24808df31166b5864db65620" translate="yes" xml:space="preserve">
          <source>The duration that an animation takes to complete one cycle. This may be specified in either seconds (&lt;code&gt;s&lt;/code&gt;) or milliseconds (&lt;code&gt;ms&lt;/code&gt;). The value must positive or zero and the unit is required. A value of &lt;code&gt;0s&lt;/code&gt;, which is the default value, indicates that no animation should occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c5420a1fe8f4e37b4122b94a46bb8f6987c3ae" translate="yes" xml:space="preserve">
          <source>The effect is like two images printed on transparent film overlapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a269157e1db2d27be4179d0019c35d5720de74a" translate="yes" xml:space="preserve">
          <source>The effect is like two images shone onto a projection screen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f460ff3af9bc652c6c55460e60625a05414438" translate="yes" xml:space="preserve">
          <source>The effect is like two opaque pieces of paper overlapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7c3bce696afa276d1c7df8b89d8fe0f076eced" translate="yes" xml:space="preserve">
          <source>The effect is similar to shining a &lt;em&gt;diffused&lt;/em&gt; spotlight on the backdrop&lt;em&gt;.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8b9bdac5c715fb9ca910dbab0833209f62ce31" translate="yes" xml:space="preserve">
          <source>The effect is similar to shining a &lt;em&gt;harsh&lt;/em&gt; spotlight on the backdrop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21fe62d05ffa2242bd7c9e62a0e99291b374bbe4" translate="yes" xml:space="preserve">
          <source>The effect of &lt;code&gt;bottom&lt;/code&gt; depends on how the element is positioned (i.e., the value of the &lt;a href=&quot;position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; property):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1270a2f5651fb329d8c3bc82f30c63bd860ad8" translate="yes" xml:space="preserve">
          <source>The effect of &lt;code&gt;left&lt;/code&gt; depends on how the element is positioned (i.e., the value of the &lt;a href=&quot;position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; property):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef84dd0d06a1bee48f6ea9e93f0789caa300fffe" translate="yes" xml:space="preserve">
          <source>The effect of &lt;code&gt;right&lt;/code&gt; depends on how the element is positioned (i.e., the value of the &lt;a href=&quot;position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; property):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5750bfba993203aac353d0ad224a8d39dcc273" translate="yes" xml:space="preserve">
          <source>The effect of &lt;code&gt;top&lt;/code&gt; depends on how the element is positioned (i.e., the value of the &lt;a href=&quot;position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; property):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fa6d812bfaac679046e53701ba0ecdc6a76697" translate="yes" xml:space="preserve">
          <source>The effect of this keyword is dependent of the layout mode we are in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aafad398688f443e928f1b716163e919ae355ae3" translate="yes" xml:space="preserve">
          <source>The effect of this property is dependent of the layout mode we are in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b47b6a8446f73c584e0dbf9f3a098a1fbe1fedc" translate="yes" xml:space="preserve">
          <source>The effect preserves gray levels and can be used to colorize the foreground.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6303a7525608f020a805d2fdc17e03f4ebf098e1" translate="yes" xml:space="preserve">
          <source>The element accepts user input. For textboxes, this is the default behavior. &lt;strong&gt;Please note that this value is no longer supported in Firefox 60 onwards (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1405087&quot;&gt;bug 1405087&lt;/a&gt;).&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c460179f902930c7a65164b4dddc6300b891b6b7" translate="yes" xml:space="preserve">
          <source>The element behaves as it would if the &lt;code&gt;pointer-events&lt;/code&gt; property were not specified. In SVG content, this value and the value &lt;code&gt;visiblePainted&lt;/code&gt; have the same effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d6e94d461da4e909ef1bc46d25867919a61735" translate="yes" xml:space="preserve">
          <source>The element behaves like a block element and lays out its content according to the &lt;a href=&quot;css_flexible_box_layout&quot;&gt;flexbox model&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab18df58eaac043aef909a0575ca1bce3b1f479d" translate="yes" xml:space="preserve">
          <source>The element behaves like a block element and lays out its content according to the &lt;a href=&quot;css_grid_layout/basic_concepts_of_grid_layout&quot;&gt;grid model&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3356ffd691da6ed8fa629437bebef273c54ef234" translate="yes" xml:space="preserve">
          <source>The element behaves like an inline element and lays out its content according to the flexbox model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca8131a93efae693a6ba247a78dce79933d78c6" translate="yes" xml:space="preserve">
          <source>The element behaves like an inline element and lays out its content according to the grid model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a3d492be946780f992315d7392d3c025340c2f" translate="yes" xml:space="preserve">
          <source>The element behaves like an inline element and lays out its content according to the ruby formatting model. It behaves like the corresponding HTML &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby&quot;&gt;&lt;code&gt;&amp;lt;ruby&amp;gt;&lt;/code&gt;&lt;/a&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ebba9e5091f041511f9fa846c39aba6be18e16b" translate="yes" xml:space="preserve">
          <source>The element box is invisible (not drawn), but still affects layout as normal. Descendants of the element will be visible if they have &lt;code&gt;visibility&lt;/code&gt; set to &lt;code&gt;visible&lt;/code&gt;. The element cannot receive focus (such as when navigating through &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex&quot;&gt;tab indexes&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f998fc6c3fa46539290c728a26bbdce3e16f44a" translate="yes" xml:space="preserve">
          <source>The element box is visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15a6175d0ecfaa69d5ec615e49c84a0325250bb5" translate="yes" xml:space="preserve">
          <source>The element can accept the keyboard focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f25bd1c72f72c625edf9ebddf0e1ad98507a9b" translate="yes" xml:space="preserve">
          <source>The element displays a mechanism for allowing the user to resize it in the &lt;em&gt;block&lt;/em&gt; direction (either horizontally or vertically, depending on the &lt;a href=&quot;writing-mode&quot;&gt;&lt;code&gt;writing-mode&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;direction&quot;&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/a&gt; value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a9d49750778918a0df4235ae62994838610714" translate="yes" xml:space="preserve">
          <source>The element displays a mechanism for allowing the user to resize it in the &lt;em&gt;horizontal&lt;/em&gt; direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36dcec635d55dbc816dc3957b30576eff41a9dc4" translate="yes" xml:space="preserve">
          <source>The element displays a mechanism for allowing the user to resize it in the &lt;em&gt;inline&lt;/em&gt; direction (either horizontally or vertically, depending on the &lt;a href=&quot;writing-mode&quot;&gt;&lt;code&gt;writing-mode&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;direction&quot;&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/a&gt; value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="623eb256f9ebd8ef23484035dfc25e6d5e7fc2df" translate="yes" xml:space="preserve">
          <source>The element displays a mechanism for allowing the user to resize it in the &lt;em&gt;vertical&lt;/em&gt; direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39084a02ee8d4ef35462b45f428257dcd60bf1c2" translate="yes" xml:space="preserve">
          <source>The element displays a mechanism for allowing the user to resize it, which may be resized both horizontally and vertically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a4e0e110e67cd0de2a25f1e66f09eb27722df5" translate="yes" xml:space="preserve">
          <source>The element does not accept the keyboard focus and will be skipped in the tab order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b69e1040928ba8c5c0de8bf4aea4e7f54de0fff" translate="yes" xml:space="preserve">
          <source>The element does not accept user input. However, this is not the same as setting &lt;code id=&quot;a-disabled&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/disabled&quot;&gt;disabled&lt;/a&gt;&lt;/code&gt; to true, in that the element is drawn normally. &lt;strong&gt;Please note that this value is no longer supported in Firefox 60 onwards (&lt;a href=&quot;https://bugzilla.mozilla.org/show_bug.cgi?id=1405087&quot;&gt;bug 1405087&lt;/a&gt;).&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02c37db2452be3af66997db6b44947497d77aa8" translate="yes" xml:space="preserve">
          <source>The element does not clip (default value). Note that this is distinct from &lt;code&gt;rect(auto, auto, auto, auto)&lt;/code&gt;, which does clip to the inside border edges of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab4b28dd952365d2be0ead14e357144b74aa2aa" translate="yes" xml:space="preserve">
          <source>The element does not offer an additional level of embedding with respect to the bidirectional algorithm. For inline elements, implicit reordering works across element boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9b5026e893a45f75fee7efff8d939b1c1c4726" translate="yes" xml:space="preserve">
          <source>The element does not respond to user input, and it does not become &lt;a href=&quot;:active&quot;&gt;&lt;code&gt;:active&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e1b85e96b261704975972c76c9347c026b2e53a" translate="yes" xml:space="preserve">
          <source>The element does not span multiple columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395e8680d9b4fe5e6c6e52b7955a62343f8d729a" translate="yes" xml:space="preserve">
          <source>The element generates a block box for the content and a separate list-item inline box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3dc38a92ebf3b63b725211a72ac4b1e8b32c4d" translate="yes" xml:space="preserve">
          <source>The element generates a block element box that establishes a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context&quot;&gt;block formatting context&lt;/a&gt;, defining where the formatting root lies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e378c91b7026e8a88a1c05d4555941dd77ef41" translate="yes" xml:space="preserve">
          <source>The element generates a block element box that will be flowed with surrounding content as if it were a single inline box (behaving much like a replaced element would).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40479a841cac76f8c6773e0090117de12ef9139" translate="yes" xml:space="preserve">
          <source>The element generates a block element box, generating line breaks both before and after the element when in the normal flow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cac6ff65f03bd735d9067f9c4c7dccd4a462c22" translate="yes" xml:space="preserve">
          <source>The element generates a run-in box. If the adjacent sibling of the element defined as &lt;code&gt;display: run-in&lt;/code&gt; box is a block box, the &lt;code&gt;run-in&lt;/code&gt; box becomes the first inline box of the block box that follows it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189934754c23a50ccbec66705af2d089e7a97eed" translate="yes" xml:space="preserve">
          <source>The element generates one or more inline element boxes that do not generate line breaks before or after themselves. In normal flow, the next element will be on the same line if there is space</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32bef47f6ca3f34b83052f5ceb818dde434e483" translate="yes" xml:space="preserve">
          <source>The element is drawn like a button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57c571c60aa6407fb7c0694bf718cb3370a438e" translate="yes" xml:space="preserve">
          <source>The element is drawn like a checkbox, including only the actual &quot;checkbox&quot; portion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b95595924d6e69d0b4eb9a1bc9e63344b954abe" translate="yes" xml:space="preserve">
          <source>The element is drawn like a container for a checkbox, which may include a prelighting background effect under certain platforms. Normally it would contain a label and a checkbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30d9264944a52001648957e56a010e99d9878cb" translate="yes" xml:space="preserve">
          <source>The element is drawn like a radio button, including only the actual &quot;radio button&quot; portion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af583a1d2f6f1670b2299e0d68df483a2083300" translate="yes" xml:space="preserve">
          <source>The element is fully opaque (visually solid).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07131f6439b00c065d0f27428cc95de2a9c35ce7" translate="yes" xml:space="preserve">
          <source>The element is fully transparent (that is, invisible).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c546d317a946e3aa4fcd74e63d1d52b50d2f17be" translate="yes" xml:space="preserve">
          <source>The element is initially rendered as if its box were not fragmented, after which the rendering for this hypothetical box is sliced into pieces for each line/column/page. Note that the hypothetical box can be different for each fragment since it uses its own height if the break occurs in the inline direction, and its own width if the break occurs in the block direction. See the CSS specification for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906786a33c5910b1a97f1b10af2907dc4d38d3b0" translate="yes" xml:space="preserve">
          <source>The element is never the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/event.target&quot;&gt;target&lt;/a&gt; of mouse events; however, mouse events may target its descendant elements if those descendants have &lt;code&gt;pointer-events&lt;/code&gt; set to some other value. In these circumstances, mouse events will trigger event listeners on this parent element as appropriate on their way to/from the descendant during the event capture/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/event.bubbles&quot;&gt;bubble&lt;/a&gt; phases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13540777f71511d7287f7dbaaaf0dad532757d56" translate="yes" xml:space="preserve">
          <source>The element is positioned according to the normal flow of the document, and then offset &lt;em&gt;relative to itself&lt;/em&gt; based on the values of &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, and &lt;code&gt;left&lt;/code&gt;. The offset does not affect the position of any other elements; thus, the space given for the element in the page layout is the same as if position were &lt;code&gt;static&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d969ed200ad6faf026b2dbfd910e672eb6e1fc8" translate="yes" xml:space="preserve">
          <source>The element is positioned according to the normal flow of the document, and then offset relative to its&lt;em&gt; nearest scrolling ancestor&lt;/em&gt; and &lt;a href=&quot;all_about_the_containing_block&quot;&gt;containing block&lt;/a&gt; (nearest block-level ancestor), including table-related elements, based on the values of &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, and &lt;code&gt;left&lt;/code&gt;. The offset does not affect the position of any other elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5b53fa2bfc9943b1b63956377eca1b511719dc" translate="yes" xml:space="preserve">
          <source>The element is positioned according to the normal flow of the document. The &lt;a href=&quot;top&quot;&gt;&lt;code&gt;top&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;right&quot;&gt;&lt;code&gt;right&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;bottom&quot;&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;left&quot;&gt;&lt;code&gt;left&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;z-index&quot;&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/a&gt; properties have &lt;em&gt;no effect&lt;/em&gt;. This is the default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393fcba5c00188858e7bbb47199602b055658585" translate="yes" xml:space="preserve">
          <source>The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to its closest positioned ancestor, if any; otherwise, it is placed relative to the initial &lt;a href=&quot;all_about_the_containing_block&quot;&gt;containing block&lt;/a&gt;. Its final position is determined by the values of &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, and &lt;code&gt;left&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed0793f18970688e7b1ec78b158e3c28cfc4126" translate="yes" xml:space="preserve">
          <source>The element is removed from the normal document flow, and no space is created for the element in the page layout. It is positioned relative to the initial &lt;a href=&quot;all_about_the_containing_block&quot;&gt;containing block&lt;/a&gt; established by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/viewport&quot;&gt;viewport&lt;/a&gt;, except when one of its ancestors has a &lt;code&gt;transform&lt;/code&gt;, &lt;code&gt;perspective&lt;/code&gt;, or &lt;code&gt;filter&lt;/code&gt; property set to something other than &lt;code&gt;none&lt;/code&gt; (see the &lt;a href=&quot;https://www.w3.org/TR/css-transforms-1/#propdef-transform&quot;&gt;CSS Transforms Spec&lt;/a&gt;), in which case that ancestor behaves as the containing block. (Note that there are browser inconsistencies with &lt;code&gt;perspective&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; contributing to containing block formation.) Its final position is determined by the values of &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, and &lt;code&gt;left&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a368f30cf60ec1f7db92809c8196c191dcebaf6d" translate="yes" xml:space="preserve">
          <source>The element is rendered horizontally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d31c0b217b2f28a620b4dd878b595068359d97" translate="yes" xml:space="preserve">
          <source>The element is rendered in the same direction as the axis of the text: horizontally for horizontal writing modes, vertically for vertical writing modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbb001702244de96a786d0cfa0abdebc52161ea0" translate="yes" xml:space="preserve">
          <source>The element is rendered orthogonally to the axis of the text: vertically for horizontal writing modes, horizontal for vertical writing modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679f9a5e1c0cce43d08cb2454bb296ca2f0158bc" translate="yes" xml:space="preserve">
          <source>The element is rendered vertically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2e8df1702cff21480ba68af48551221706ea11" translate="yes" xml:space="preserve">
          <source>The element is styled as a button that would indicate a menulist can be opened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e407b883624d855a8f7f682ea6d3c6d3746c0bb" translate="yes" xml:space="preserve">
          <source>The element is styled as the text field for a menulist. (Not implemented for the Windows platform)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425029eb9f5f70fa2e3b62721b1a8bbfab515793" translate="yes" xml:space="preserve">
          <source>The element is styled like a progress bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cb3260da91c321885dafd19bce64e6d4732b19" translate="yes" xml:space="preserve">
          <source>The element is translucent (that is, content behind the element can be seen).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69fc96422233b04a8dccdf62e83b151648cc8dda" translate="yes" xml:space="preserve">
          <source>The element lays out its contents using flow layout (block-and-inline layout).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2a5b714bda847a6a255f8cac9216df29594a26" translate="yes" xml:space="preserve">
          <source>The element looks like this when inserted into the page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="769203b4385cc7d624d065ee3efdf92b4f68a275" translate="yes" xml:space="preserve">
          <source>The element must float on the end side of its containing block. That is the right side with ltr scripts, and the left side with rtl scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e85a70c991f51e4db6ca202fb48397ac415fe57" translate="yes" xml:space="preserve">
          <source>The element must float on the left side of its containing block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51ae66d7f488d291c687bdf5566f586e5b8dd0d" translate="yes" xml:space="preserve">
          <source>The element must float on the right side of its containing block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459fcd9ab317a52d3a4690e8c4048dc1ee0762a5" translate="yes" xml:space="preserve">
          <source>The element must float on the start side of its containing block. That is the left side with ltr scripts, and the right side with rtl scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3d4cf19822ebd00de0a4de94f424177d012d4a" translate="yes" xml:space="preserve">
          <source>The element must not float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d72c33c3aca7f87f85b6ef47c4c388d733da788" translate="yes" xml:space="preserve">
          <source>The element offers no user-controllable method for resizing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af56fd1180ae62407d931b22a090d8193ae4c9ff" translate="yes" xml:space="preserve">
          <source>The element spans across all columns. Content in the normal flow that appears before the element is automatically balanced across all columns before the element appears. The element establishes a new block formatting context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8504dc592ecf7bb194e3bc370a2f5e458ff81b61" translate="yes" xml:space="preserve">
          <source>The element's content has been specifically and carefully crafted to use colors, images, and styles in a thoughtful and/or important way, such that being altered by the browser might actually make things worse rather than better. The appearance of the content should not be changed except by the user's request. For example, a page might include a list of information with rows whose background colors alternate between white and a light grey. Removing the background color would decrease the legibility of the content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920826671241501b3fc45423adcb033c311e5d53" translate="yes" xml:space="preserve">
          <source>The element's height is set to the value of &lt;code&gt;min-height&lt;/code&gt; whenever &lt;code&gt;min-height&lt;/code&gt; is larger than &lt;a href=&quot;max-height&quot;&gt;&lt;code&gt;max-height&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b312bf1daba582d7dff864f01983c4256da12707" translate="yes" xml:space="preserve">
          <source>The element's width is set to the value of &lt;code&gt;min-width&lt;/code&gt; whenever &lt;code&gt;min-width&lt;/code&gt; is larger than &lt;a href=&quot;max-width&quot;&gt;&lt;code&gt;max-width&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1e05ade3a77e49c7ebab0b7992d1ea21a0e87e" translate="yes" xml:space="preserve">
          <source>The em is a very useful unit in CSS, since it automatically adapts its length relative to the font that the reader chooses to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd10f7017a49eb01dd9c81dbcd6ae0432ff23c82" translate="yes" xml:space="preserve">
          <source>The end alignment of this box's scroll snap area, within the scroll container's snapport is a snap position in this axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b4ce2cf600133e0f7ceb90471deb9c03da1618" translate="yes" xml:space="preserve">
          <source>The end color, supports both opaque colors (&lt;code&gt;#RRGGBB&lt;/code&gt;) and colors with alpha opacity using the &lt;code&gt;#AARRGGBB&lt;/code&gt; notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa407c52cc890d3938b788f902cf14e4cd9b776" translate="yes" xml:space="preserve">
          <source>The end color, supports only opaque colors in the &lt;code&gt;#RRGGBB&lt;/code&gt; notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4606c36fc9dce25e14574e147eb67fb6eb4c8361" translate="yes" xml:space="preserve">
          <source>The entire margin box of the element is skipped if it is an atomic inline such as an image or inline-block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="863ed3f2d10c2356ac9c00418259c133f0336e13" translate="yes" xml:space="preserve">
          <source>The event handler is in the &lt;code&gt;update()&lt;/code&gt; method. It simply calls &lt;code&gt;setCoords()&lt;/code&gt; once for each coordinate system, passing in the event that occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c14c4bc9752717bcca683ee656f98a0de14ddf90" translate="yes" xml:space="preserve">
          <source>The events get delivered to the &lt;code&gt;listener()&lt;/code&gt; function, which is shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bbb46af37f935699f51cf205a47f937d8d64ce" translate="yes" xml:space="preserve">
          <source>The exact details are described in &lt;a href=&quot;https://www.w3.org/TR/css3-multicol/&quot;&gt;the CSS3 specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90bcc218407568ea72e9e057207e63ee56e3bd07" translate="yes" xml:space="preserve">
          <source>The example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607761fdebb59da8c6c2842455f9bb1f1385c3be" translate="yes" xml:space="preserve">
          <source>The example below is contained in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt;, which creates its own viewport. Resize the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; to see &lt;code&gt;aspect-ratio&lt;/code&gt; in action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d73bfa659d11292373ea4b4acb5252fc65d657" translate="yes" xml:space="preserve">
          <source>The example below lists two font families, the first with a &lt;code&gt;&amp;lt;family-name&amp;gt;&lt;/code&gt; and the second with a &lt;code&gt;&amp;lt;generic-name&amp;gt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca634947bc0fa50c706ce16e0b551a7f538fca2f" translate="yes" xml:space="preserve">
          <source>The example below shows a three-column track grid with new rows created at a minimum of 100 pixels and a maximum of auto. Items have been placed onto the grid using line-based placement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082fb006fb23ee279e8113cbb7d7e9feb82cf90a" translate="yes" xml:space="preserve">
          <source>The example below shows an image that has been floated left, and the &lt;code&gt;shape-outside&lt;/code&gt; property applied with a value of &lt;code&gt;circle(50%)&lt;/code&gt;. This creates a circle shape, and the content wrapping the float now wraps around that shape. This changes the length of the wrapping text's line boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb461643dbddb54f0e3750a07160f39a914bb9f" translate="yes" xml:space="preserve">
          <source>The example below shows this overflow behaviour. My multicol container has a height and there is more text than space to create columns, therefore we get columns created outside of the container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d24fe4a27bd67b0afe4cb3d609c41c4c5144d1b7" translate="yes" xml:space="preserve">
          <source>The example demonstrates the typical problem that we have with floated layouts: if additional content is added to any one card, the layout breaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002c0f11f8dcc20c29f0d24e31304c058e9c27b9" translate="yes" xml:space="preserve">
          <source>The exclusion element does not inherit its parent node's wrapping context. Its descendants are only subject to exclusion shapes defined inside the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3fc16664476e78bb7ca451d4a8c64120805187" translate="yes" xml:space="preserve">
          <source>The exclusion element inherits its parent node's wrapping context. Its descendant inline content wraps around exclusions defined outside the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e482ec8499686a8503fd51ee22691f450604cdfa" translate="yes" xml:space="preserve">
          <source>The experimental grid, or flex-box content models, also create additional types of boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b802394dcd668160f927693b707f89ade2a7429" translate="yes" xml:space="preserve">
          <source>The expression can be values combining the addition ( + ), subtraction ( - ), multiplication ( * ) and division ( / ) operators, using standard operator precedence rules. Make sure to put a space on each side of the + and - operands. The operands in the expression may be any &amp;lt;length&amp;gt; syntax value. You can use different units for each value in your expression. You may also use parentheses to establish computation order when needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6fcc3b45ec65103bc4bbfce97c01f9279aa3f16" translate="yes" xml:space="preserve">
          <source>The expression can be values combining the addition ( + ), subtraction ( - ), multiplication ( * ) and division ( / ) operators, using standard operator precedence rules. Make sure to put a space on each side of the + and - operands. The operands in the expression may be any &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; syntax value. You can use different units for each value in your expression. You may also use parentheses to establish computation order when needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6433750a3c0218c77944285b81327b1bfba83c5" translate="yes" xml:space="preserve">
          <source>The expression can be values combining the addition ( + ), subtraction ( - ), multiplication ( * ) and division ( / ) operators, using standard operator precedence rules. Make sure to put a space on each side of the + and - operands. The operands in the expression may be any &lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt; syntax value. You can use different units for each value in your expression. You may also use parentheses to establish computation order when needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292890ff940f03d70cb9a41eb6a42954992d475e" translate="yes" xml:space="preserve">
          <source>The expressions can be math functions (see &lt;a href=&quot;calc&quot;&gt;&lt;code&gt;calc()&lt;/code&gt;&lt;/a&gt; for more information), literal values, or other expressions, such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/attr&quot;&gt;&lt;code&gt;attr()&lt;/code&gt;&lt;/a&gt;, that evaluate to a valid argument type (like &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;), or nested &lt;a href=&quot;min&quot;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;max&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt; functions. As math expressions, so you can use addition, subtraction, multiplication and division without using the &lt;code&gt;calc()&lt;/code&gt; function itself. You may also use parentheses to establish computation order when needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef26c49b74b8e86ae7aa85d31cf934322e5b30e3" translate="yes" xml:space="preserve">
          <source>The expresstions can be math functions (see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/calc&quot;&gt;&lt;code&gt;calc()&lt;/code&gt;&lt;/a&gt; for more information), literal values, or other expressions, such as attr(), that evaluate to a valid argument type (like &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;), or nested &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/min&quot;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;max()&lt;/code&gt; functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afab2673fad24012a56718192364bbb75e74d9ac" translate="yes" xml:space="preserve">
          <source>The face background color for 3-D elements that appear 3-D due to two concentric layers of surrounding border. Should be used with the &lt;code&gt;ButtonText&lt;/code&gt; foreground color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32edf372067e4d4b715824353cb9364bbb6a4a03" translate="yes" xml:space="preserve">
          <source>The face selected for a given value of &lt;code&gt;font-stretch&lt;/code&gt; depends on the faces supported by the font in question. If the font does not provide a face that exactly matches the given value, then values less than 100% map to a narrower face, and values greater than or equal to 100% map to a wider face.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8697bbb24ba97dd4b59ff801b5ddde23dd39f620" translate="yes" xml:space="preserve">
          <source>The fallback alignment for &lt;code&gt;first baseline&lt;/code&gt; is &lt;code&gt;start&lt;/code&gt;, the one for &lt;code&gt;last baseline&lt;/code&gt; is &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124d03ae87a011427f1b9af99a44b07af9a2d32a" translate="yes" xml:space="preserve">
          <source>The feature of flexbox that was most exciting to many of us was that it gave us proper alignment control for the first time. It made it easy to center a box on the page. Flex items can stretch to the height of the flex container, meaning that equal height columns were possible. These were things we have wanted to do for a very long time, and have come up with all kinds of hacks to at least create the visual effect of.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c929e174729290f52a212e39f737111ddf5aa82" translate="yes" xml:space="preserve">
          <source>The filter mechanism is extensible and enables you to develop and add filters later. For more information about filters, see &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms533035&quot;&gt;Introduction to Filters and Transitions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849a345097538de2247d53800cd42dcae9895117" translate="yes" xml:space="preserve">
          <source>The final Basic Shape is the most complex and enables the creation of many side shapes by way of creating a &lt;code&gt;polygon()&lt;/code&gt;. This shape accepts three or more pairs of values (a polygon must at least draw a triangle). These values are co-ordinates drawn with reference to the reference box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71e2d2191a9e8025fcaf814f7dd0736d27a4a90" translate="yes" xml:space="preserve">
          <source>The final color has the &lt;em&gt;hue&lt;/em&gt; of the top color, while using the &lt;em&gt;saturation&lt;/em&gt; and &lt;em&gt;luminosity&lt;/em&gt; of the bottom color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d320d62c095d4c0fcfaaecda6f75368b38b1ab6e" translate="yes" xml:space="preserve">
          <source>The final color has the &lt;em&gt;luminosity&lt;/em&gt; of the top color, while using the &lt;em&gt;hue&lt;/em&gt; and &lt;em&gt;saturation&lt;/em&gt; of the bottom color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80d9f8baf283d8f412d1dea661a743f0411bbad" translate="yes" xml:space="preserve">
          <source>The final color has the &lt;em&gt;saturation&lt;/em&gt; of the top color, while using the &lt;em&gt;hue&lt;/em&gt; and &lt;em&gt;luminosity&lt;/em&gt; of the bottom color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c35954d86e01f6bb3a119b70b6379c16a0877ca9" translate="yes" xml:space="preserve">
          <source>The final color has the&lt;em&gt; &lt;em&gt;hue&lt;/em&gt;&lt;/em&gt; and &lt;em&gt;&lt;em&gt;saturation&lt;/em&gt; &lt;/em&gt;of the top color, while using the &lt;em&gt;luminosity&lt;/em&gt; of the bottom color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed5bb06fc223feeea784c8fa4264e3d585b734e" translate="yes" xml:space="preserve">
          <source>The final color is composed of the darkest values of each color channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9be4ca6d4f6ecd1ca7be92fb32f6221a1903a7" translate="yes" xml:space="preserve">
          <source>The final color is composed of the lightest values of each color channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="108f1abfc68f1a9bfa4eb91636b56f5e03b92b8e" translate="yes" xml:space="preserve">
          <source>The final color is similar to &lt;code&gt;difference,&lt;/code&gt; but with less contrast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd533138bc5d5d3ce0403cfbcf78fdb407ef97dd" translate="yes" xml:space="preserve">
          <source>The final color is similar to &lt;code&gt;hard-light&lt;/code&gt;, but softer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b52b897d049e80d15c2bb869081b82962d937249" translate="yes" xml:space="preserve">
          <source>The final color is the result of &lt;code&gt;multiply&lt;/code&gt; if the bottom color is darker, or &lt;code&gt;screen&lt;/code&gt; if the bottom color is lighter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47b913c6b03f3e01563aa3de74ef213cf818bec9" translate="yes" xml:space="preserve">
          <source>The final color is the result of &lt;code&gt;multiply&lt;/code&gt; if the top color is darker, or &lt;code&gt;screen&lt;/code&gt; if the top color is lighter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa5c936852c1902b77ff8d51ffaf793093886c8" translate="yes" xml:space="preserve">
          <source>The final color is the result of dividing the bottom color by the inverse of the top color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62e64d3a5c02ddeca496cabad84462f5a1ee820d" translate="yes" xml:space="preserve">
          <source>The final color is the result of inverting the bottom color, dividing the value by the top color, and inverting that value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e7ce449f19dad0057796541f0acfcc0034199b" translate="yes" xml:space="preserve">
          <source>The final color is the result of inverting the colors, multiplying them, and inverting that value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dacc3a47e7ab5093bb962762bab8910d74088368" translate="yes" xml:space="preserve">
          <source>The final color is the result of multiplying the top and bottom colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1a552e919214de0f37f777582d7566fb1316b1" translate="yes" xml:space="preserve">
          <source>The final color is the result of subtracting the darker of the two colors from the lighter one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2043ef6d22a7da1282a65d39d30ca85e6e8dd2df" translate="yes" xml:space="preserve">
          <source>The final color is the top color, regardless of what the bottom color is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f14c1e93b54597f3b59a0fb91f93528e5f2050" translate="yes" xml:space="preserve">
          <source>The final example demonstrates the third possible value for &lt;code&gt;writing-mode&lt;/code&gt; &amp;mdash; &lt;code&gt;vertical-lr&lt;/code&gt;. This gives you a left-to-right block flow direction and a vertical inline direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02782c4303c31afe7dbce8106fe0662a73a5b902" translate="yes" xml:space="preserve">
          <source>The first argument to the function is the name of the &lt;a href=&quot;https://www.w3.org/TR/css-variables/#custom-property&quot;&gt;custom property&lt;/a&gt; to be substituted. The second argument to the function, if provided, is a fallback value, which is used as the substitution value when the referenced &lt;a href=&quot;https://www.w3.org/TR/css-variables/#custom-property&quot;&gt;custom property&lt;/a&gt; is invalid. The function only accepts two parameters, assigning everything following the first comma as the second parameter. If that second parameter is invalid, such as if a comma-separated list is provided, the fallback will fail. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29ef43b4c135afb94a49865517dc9dc1f821e71" translate="yes" xml:space="preserve">
          <source>The first argument to the function is the name of the custom property to be substituted. An optional second argument to the function serves as a fallback value. If the custom property referenced by the first argument is invalid, the function uses the second value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe458f663e9cd146c602a5b4ff061011dffeebc" translate="yes" xml:space="preserve">
          <source>The first bar from above should look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0286beefd95225f20ec6ef52256da840f295cda" translate="yes" xml:space="preserve">
          <source>The first element to set is the &lt;a href=&quot;../perspective&quot;&gt;&lt;code&gt;perspective&lt;/code&gt;&lt;/a&gt;. The perspective is what gives us the 3D impression. The farther from the viewer the elements are, the smaller they are.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0ab87406db95d3b92a9b64988f2736f0a740d20" translate="yes" xml:space="preserve">
          <source>The first image is positioned with its left edge inset 10 pixels from the left edge of the element's box. The second image is positioned with its right edge flush against the right edge of the element's box and is located 10% of the way down the height of the element's box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b636a10668a77380d22d3f924bd9b0a81610f2" translate="yes" xml:space="preserve">
          <source>The first letter of an element is not always trivial to identify:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a00695ca09d9c0f3aa2f49621d46d2bc030e4e6" translate="yes" xml:space="preserve">
          <source>The first number is the x-coordinate, and the second number is the y-coordinate. The example will set the hotspot to be the pixel at (4,12) from the top left (0,0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157597488daa53d2c35b13cd02e90f15e056529b" translate="yes" xml:space="preserve">
          <source>The first percentage specifies where the first snap-point will be placed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632304f7eca94d087b7c0c1c388a0cb7786521ef" translate="yes" xml:space="preserve">
          <source>The first sentence also includes a span element with a blue background. This is inline level and therefore displays in place in the sentence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff81e18f6dafcfa27a9ea2e7bb6ee8df16141533" translate="yes" xml:space="preserve">
          <source>The first symbol provided in the &lt;code&gt;symbols&lt;/code&gt; descriptor is interpreted as &lt;code&gt;0&lt;/code&gt; here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14f8d87fd01b28880a127df54de348d4ca78e6f" translate="yes" xml:space="preserve">
          <source>The first thing grid will do is place any items that have a position. In the example below I have 12 grid items. Item 2 and item 5 have been placed using line based placement on the grid. You can see how those items are placed and the other items then auto-place in the spaces. The auto-placed items will place themselves before the placed items in DOM order, they don&amp;rsquo;t start after the position of a placed item that comes before them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b907f39608df1bce6e07b1a6dfd0a48bc043710" translate="yes" xml:space="preserve">
          <source>The first two values are the same as for the two-value syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f221f53fa83d75a3d50f1defeb527e86dec48d5" translate="yes" xml:space="preserve">
          <source>The first two values keep the items in the same order that they appear in the document source order and display them sequentially from the start line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e10d0b8a69f0d7ccb37e81b93cd052eaa753a4" translate="yes" xml:space="preserve">
          <source>The first value is our &lt;code&gt;grid-template-areas&lt;/code&gt; value but we also declare the size of the row at the end of each row. This is what the &lt;code&gt;minmax(100px, auto)&lt;/code&gt; is doing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f523066efd6c8fa6e22919009b2f131df7523ab" translate="yes" xml:space="preserve">
          <source>The first value is the &lt;a href=&quot;align-content&quot;&gt;&lt;code&gt;align-content&lt;/code&gt;&lt;/a&gt; property value, the second the &lt;a href=&quot;justify-content&quot;&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/a&gt; one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c00976b7b397c5c3ad9a04422b112e6f9bf535" translate="yes" xml:space="preserve">
          <source>The first value specifies where the first snap-point will be placed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77c17095f40143758ded1a515b5553e1a083d31" translate="yes" xml:space="preserve">
          <source>The fixed point that the element rotates around &amp;mdash; mentioned above &amp;mdash; is also known as the &lt;strong&gt;transform origin&lt;/strong&gt;. This defaults to the center of the element, but you can set your own custom transform origin using the &lt;a href=&quot;../transform-origin&quot;&gt;&lt;code&gt;transform-origin&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec89627ff5033eb01fa9d234f506fc2dd441eae7" translate="yes" xml:space="preserve">
          <source>The flex container</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e51dccf054bbb6094983aeab13bb562f5cab39a" translate="yes" xml:space="preserve">
          <source>The flex container's main-axis is defined to be the same as the text direction. The &lt;strong&gt;main-start&lt;/strong&gt; and &lt;strong&gt;main-end&lt;/strong&gt; points are the same as the content direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f57d75a16829f8514cea3e670795ebbed7e661e" translate="yes" xml:space="preserve">
          <source>The flex container's main-axis is the same as the block-axis. The &lt;strong&gt;main-start&lt;/strong&gt; and &lt;strong&gt;main-end&lt;/strong&gt; points are the same as the &lt;strong&gt;before&lt;/strong&gt; and &lt;strong&gt;after&lt;/strong&gt; points of the writing-mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f3242798bf5d63bb9bb32456a9f040c83ec724" translate="yes" xml:space="preserve">
          <source>The flex item's margin box is centered within the line on the cross-axis. If the cross-size of the item is larger than the flex container, it will overflow equally in both directions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b36fec2a3f734af721d06edb59c0f2059216214" translate="yes" xml:space="preserve">
          <source>The flex items are laid out in a single line which may cause the flex container to overflow. The &lt;strong&gt;cross-start&lt;/strong&gt; is either equivalent to &lt;strong&gt;start&lt;/strong&gt; or &lt;strong&gt;before&lt;/strong&gt; depending &lt;a href=&quot;flex-direction&quot;&gt;&lt;code&gt;flex-direction&lt;/code&gt;&lt;/a&gt; value. This is the default value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aff75943bf64774646dfdd569de449858f57803" translate="yes" xml:space="preserve">
          <source>The flex items break into multiple lines. The &lt;strong&gt;cross-start&lt;/strong&gt; is either equivalent to &lt;strong&gt;start&lt;/strong&gt; or &lt;strong&gt;before&lt;/strong&gt; depending &lt;code&gt;flex-direction&lt;/code&gt; value and the &lt;strong&gt;cross-end&lt;/strong&gt; is the opposite of the specified &lt;strong&gt;cross-start&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6085d2e5f9076544c9b585c381bc412b6285075f" translate="yes" xml:space="preserve">
          <source>The flex items however are participating in a flex formatting context, because their parent is the element with display: flex, which has an inner display type of flex, establishing the flex formatting context for the direct children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfed05467763d287c9ab0d73e75c842e7695e925" translate="yes" xml:space="preserve">
          <source>The flex items' margin boxes are centered within the line on the cross-axis. If the cross-size of an item is larger than the flex container, it will overflow equally in both directions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb1da94f182079e47d281d52e988bdc7218f88e" translate="yes" xml:space="preserve">
          <source>The flex-basis property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72e953f368a2ce780850339f5e81a296cbc8c29" translate="yes" xml:space="preserve">
          <source>The flex-flow shorthand</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff02db6862a24d77a82f66c208ecec02d61db751" translate="yes" xml:space="preserve">
          <source>The flex-grow property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17234630ad1a54ab52481ce904695f41c2bc197f" translate="yes" xml:space="preserve">
          <source>The flex-grow property can be used to distribute space in proportion. If we give our first item a &lt;code&gt;flex-grow&lt;/code&gt; value of 2 and the other items a value of 1, 2 parts will be given to the first item (100px out of 200px in the case of the example above), 1 part each the other two (50px each out of the 200px total).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="853b666e0dd7b1c26b2bea8e134f67b22d134569" translate="yes" xml:space="preserve">
          <source>The flexbox specification contains a &lt;a href=&quot;https://www.w3.org/TR/css-flexbox-1/#flex-containers&quot;&gt;definition of what happens&lt;/a&gt; if an item uses another layout method and then becomes a flex item. For example, if an item is floated and then its parent becomes a flex container. Or, how a flex container behaves as part of layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a33501a5ca1d00c0f6e911ac2777a0c751f5392e" translate="yes" xml:space="preserve">
          <source>The flexbox specification details what should happen if a flex item is collapsed by setting &lt;code&gt;visibility: collapse&lt;/code&gt; on an item. See the MDN documentation for the &lt;a href=&quot;../visibility&quot;&gt;&lt;code&gt;visibility&lt;/code&gt;&lt;/a&gt; property. The specification describes the behaviour as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d89b39e827ad1f266f99e865f05d39e2c0a6883" translate="yes" xml:space="preserve">
          <source>The float area is computed according to the shape of a float element's edges (as defined by the &lt;a href=&quot;box_model&quot;&gt;CSS box model&lt;/a&gt;). This can be &lt;code&gt;margin-box&lt;/code&gt;, &lt;code&gt;border-box&lt;/code&gt;, &lt;code&gt;padding-box&lt;/code&gt;, or &lt;code&gt;content-box&lt;/code&gt;. The shape includes any curvature created by the &lt;a href=&quot;border-radius&quot;&gt;&lt;code&gt;border-radius&lt;/code&gt;&lt;/a&gt; property (behavior which is similar to &lt;a href=&quot;background-clip&quot;&gt;&lt;code&gt;background-clip&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e009bc5cf7112f8e79bb6213bbe4f6668a90a90" translate="yes" xml:space="preserve">
          <source>The float area is computed based on the shape created by of one of &lt;code&gt;&lt;a href=&quot;basic-shape#inset()&quot;&gt;inset()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;basic-shape#circle()&quot;&gt;circle()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;basic-shape#ellipse()&quot;&gt;ellipse()&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;basic-shape#polygon()&quot;&gt;polygon()&lt;/a&gt;&lt;/code&gt;. If a &lt;code&gt;&amp;lt;shape-box&amp;gt;&lt;/code&gt; is also supplied, it defines the reference box for the &lt;code&gt;&amp;lt;basic-shape&amp;gt;&lt;/code&gt; function. Otherwise, the reference box defaults to &lt;code&gt;margin-box&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025d3052c0f629103c4988310af2360bf760c78d" translate="yes" xml:space="preserve">
          <source>The float area is extracted and computed based on the alpha channel of the specified &lt;a href=&quot;image&quot;&gt;&lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;&lt;/a&gt; as defined by &lt;a href=&quot;shape-image-threshold&quot;&gt;&lt;code&gt;shape-image-threshold&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7388bbe0fd21bc878edc13cfb5695ebc8426e7c6" translate="yes" xml:space="preserve">
          <source>The float area is unaffected. Inline content wraps around the element's margin box, like usual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98e4e65edd710290d92434db3e35e18a30ef2f30" translate="yes" xml:space="preserve">
          <source>The float positioning scheme for a box is selected, by setting the &lt;a href=&quot;float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; CSS property on that box to a value different than &lt;code&gt;none&lt;/code&gt; and &lt;a href=&quot;position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;relative&lt;/code&gt;. If &lt;a href=&quot;float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; is set to &lt;code&gt;left&lt;/code&gt;, the float is positioned at the beginning of the line box. If set to &lt;code&gt;right&lt;/code&gt;, the float is positioned at the end of the line box. In either case, the line box is shrunk to fit alongside the float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b36f8d80a2b24c9fb414965b3c24bcb4e55cd2" translate="yes" xml:space="preserve">
          <source>The floats that are relevant to be cleared are the earlier floats within the same &lt;a href=&quot;block_formatting_context&quot;&gt;block formatting context&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7c8dbcf1c100de9ffdab0c87a34cd2d9f85ca0" translate="yes" xml:space="preserve">
          <source>The following CSS code creates a classic two-sidebar layout surrounding a content block. The Flexible Box Layout Module automatically creates blocks of equal vertical size and uses as much horizontal space as available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54d9f22366685d4f12a6bda7b501d64f62f19bc" translate="yes" xml:space="preserve">
          <source>The following CSS sets the cue style so that the text is white and the background is a translucent black box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faad6f0e04d1281a1cc1bed2d97916e80be1c58f" translate="yes" xml:space="preserve">
          <source>The following CSS styles ...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d76ed341cfb872fee0e3a8b159b813c25b65201" translate="yes" xml:space="preserve">
          <source>The following are all ways to make a paragraph's text red:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f43847d0d51bd2f76404ad5c39608b7e1c0c040" translate="yes" xml:space="preserve">
          <source>The following code creates a layout using &lt;a href=&quot;../grid-template&quot;&gt;&lt;code&gt;grid-template&lt;/code&gt;&lt;/a&gt; that is the same as the layout created earlier in this guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3314debd1c2d137097b2889d183d89a4a8cf67ec" translate="yes" xml:space="preserve">
          <source>The following declarations ...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b3b1aaedbc2b5608e83a43a3895a68bf3812d1" translate="yes" xml:space="preserve">
          <source>The following declarations are &lt;strong&gt;invalid&lt;/strong&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e730df42b44b8bbb4d9465e58503020d787a5e6f" translate="yes" xml:space="preserve">
          <source>The following declarations will match applications that are being displayed in high contrast mode with any color variation, a black-on-white color variation, and a white-on-black color variation, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1973890d7b63519062fad4899a784b8608b0b58f" translate="yes" xml:space="preserve">
          <source>The following demo shows how you'd achieve the aforementioned JavaScript technique:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e0030c3182a9829629f191b33f8067cb503dc7" translate="yes" xml:space="preserve">
          <source>The following element would be selected by a &lt;code&gt;:target&lt;/code&gt; selector when the current URL is equal to the above:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141d0824734a9dbf4660bff78e4c973908d73b62" translate="yes" xml:space="preserve">
          <source>The following example demonstrates Block and Inline Level boxes. The two paragraph elements with a green border are Block Level, displaying one under the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc376ac39710c9c4f61f7284f34fa12e3e2860c8" translate="yes" xml:space="preserve">
          <source>The following example highlights the Branch and ID code fields with a custom style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383368f63adcce68b1b37b1995acf2edb9a9597d" translate="yes" xml:space="preserve">
          <source>The following example illustrates the &lt;code&gt;-ms-scroll-chaining&lt;/code&gt; property in use. In this case the image container has its &lt;code&gt;-ms-scroll-chaining property&lt;/code&gt; set to &lt;code&gt;chained&lt;/code&gt;, which means that when a user is scrolling through a nested scrollable element and it hits its boundary the parent scrollable element will begin to scroll in the same direction. Had the &lt;code&gt;-ms-scroll-chaining&lt;/code&gt; property been set to &lt;code&gt;none&lt;/code&gt;, the user would observe a bounce effect when the nested element reaches its boundary. For more information, see &lt;a href=&quot;https://code.msdn.microsoft.com/windowsapps/scrolling-panning-and-47d70d4c&quot;&gt;HTML scrolling, panning and zooming sample&lt;/a&gt; or Internet Explorer 10 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/hh920761(v=vs.85).aspx&quot;&gt;Scrolling, panning, and zooming with touch&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a79a976567787419c0d2b9f26299c5fde18229e" translate="yes" xml:space="preserve">
          <source>The following example is excerpted from a&lt;a href=&quot;http://codepen.io/ericwilligers/pen/bwVkNa&quot;&gt; CodePen&lt;/a&gt; example. You can edit live in supporting browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c0e347a63b6eaeafcbcba5e504a949c21eef56b" translate="yes" xml:space="preserve">
          <source>The following example makes the color of text and button &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt;s green when enabled, and gray when disabled. This helps the user understand which elements can be interacted with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a50aa9e071e96cb755c674b3d0c52236825fbc" translate="yes" xml:space="preserve">
          <source>The following example pages show two different ways to structure your CSS. The first uses the standard attributes wherever possible. The second example uses CSS Custom Properties to set values for a &lt;code&gt;font-variation-settings&lt;/code&gt; string, and shows how you can more easily update single variable values by overriding a single variable rather than rewriting the whole string. Note the hover effect on the &lt;code&gt;h2&lt;/code&gt;, which only alters the grade axis custom property value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d94b885ac979512804475113b85f89319d720b" translate="yes" xml:space="preserve">
          <source>The following example shows a simple use of basic font properties to style a paragraph of text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe979eb7e0c815215a827e27cec16344cb3cbe82" translate="yes" xml:space="preserve">
          <source>The following example shows blocks using &lt;code&gt;horizontal-tb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae34b7b2a84df01a7b1e1fe2661ebb712eedfc7" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a style rule that sets the &lt;code&gt;-ms-scrollbar-3dlight-color&lt;/code&gt; property for a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea&quot;&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708cb61d32b8697e71f602803d8ee9ca06ed06e3" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a style rule that sets the &lt;code&gt;-ms-scrollbar-darkshadow-color&lt;/code&gt; property for a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea&quot;&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fecaed7eee0985a7f828d12c905b6438f9dc3be3" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a style rule that sets the &lt;code&gt;-ms-scrollbar-shadow-color&lt;/code&gt; property for a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea&quot;&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da13c72150f7ec4b5efec51b645211d0aebc679" translate="yes" xml:space="preserve">
          <source>The following example shows how to use &lt;code&gt;-ms-scrollbar-arrow-color&lt;/code&gt; and &lt;a href=&quot;-ms-scrollbar-face-color&quot;&gt;&lt;code&gt;-ms-scrollbar-face-color&lt;/code&gt;&lt;/a&gt; to display a scroll bar with a blue scroll box and arrows, and a scroll bar with a green scroll box and arrows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cfd95f628d7c31dae59aa1b0a511f3aad5a5287" translate="yes" xml:space="preserve">
          <source>The following example shows how to use an inline style sheet to set the filter on an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c4ce3a32555c8a35ba02053146d1694987ef25" translate="yes" xml:space="preserve">
          <source>The following example shows how to use scripting to set the filter on an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="244ed7bf68dc28a0c8c7a394723c71c3cc5f4bf9" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the &lt;code&gt;-ms-filter&lt;/code&gt; attribute in Internet Explorer 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea3656f5eb55efe1016efe8bb4f520532701b10" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate how some of the Box Alignment Properties are applied in &lt;a href=&quot;css_grid_layout&quot;&gt;Grid&lt;/a&gt; and &lt;a href=&quot;css_flexible_box_layout&quot;&gt;Flexbox&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da7534d4dcd883dd75c0a9390aa8a55e11afc6d" translate="yes" xml:space="preserve">
          <source>The following image shows the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5caa4d496b1ab37e7fcbfe510746f6836c6a389d" translate="yes" xml:space="preserve">
          <source>The following image shows the result. Note that &lt;code&gt;scrollbar-base-color&lt;/code&gt; sets the scroll bar face color and highlight color to different shades of the same base color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9efd1e68a5badb189dec0267747fc8769f6e28" translate="yes" xml:space="preserve">
          <source>The following image shows the result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d20c0890aedb9cc0e2a4c438bd22cf2e45fb5e2" translate="yes" xml:space="preserve">
          <source>The following is a basic list of the most common CSS properties with the equivalent of the DOM notation which is usually accessed from JavaScript:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="049c5bd6dfc981554180b6dc12f1cb5525bc89e9" translate="yes" xml:space="preserve">
          <source>The following list of selector types increases by specificity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0819b8976e7d0f17a872eaa077219f97c742266e" translate="yes" xml:space="preserve">
          <source>The following live example's CSS can be edited to allow you to play with font grade values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b875cc2440aa4c2911bfc98de404cc124633638" translate="yes" xml:space="preserve">
          <source>The following live example's CSS can be edited to allow you to play with font italics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d575f4fc25c7eff886c9ccfc2c58d4631c7e8f" translate="yes" xml:space="preserve">
          <source>The following live example's CSS can be edited to allow you to play with font slant/oblique values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b0c7064b42d3e8b285ecc5045c8cb5e2203ebc" translate="yes" xml:space="preserve">
          <source>The following live example's CSS can be edited to allow you to play with font weight values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd7176163cc383273541ed1910a924fb711f4aa" translate="yes" xml:space="preserve">
          <source>The following live example's CSS can be edited to allow you to play with font width values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5267c411575f3c702f1833a3982c7a60b4461f" translate="yes" xml:space="preserve">
          <source>The following live example's CSS can be edited to allow you to play with optical size values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3cbadfb23811e243174cea581c2a808a002c88e" translate="yes" xml:space="preserve">
          <source>The following screenshot shows what the feature will look like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b77666de42a4277739d3f272b034748f86079a" translate="yes" xml:space="preserve">
          <source>The following selector matches &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1&quot;&gt;&lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;&lt;/a&gt; elements only if they have a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/a&gt; element directly following them:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c930916e118ed08a095c3c91e437b3e03312bed0" translate="yes" xml:space="preserve">
          <source>The following selector matches only &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; elements that directly contain an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; child:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ec1b2254580f5066e608c353cac24c3f6daa21" translate="yes" xml:space="preserve">
          <source>The following shapes are supported. All &lt;code&gt;&amp;lt;basic-shape&amp;gt;&lt;/code&gt; values use functional notation and are defined here using the &lt;a href=&quot;value_definition_syntax&quot;&gt;value definition syntax&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="628cb36b6f1fd71e7aaed69b29d18ef421b159e6" translate="yes" xml:space="preserve">
          <source>The following snippets are taken from our &lt;a href=&quot;https://github.com/mdn/web-components-examples/tree/master/host-selectors&quot;&gt;host-selectors example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/web-components-examples/host-selectors/&quot;&gt;see it live also&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80eebaeab19685a9158b86afe966dc13cd0eb6c" translate="yes" xml:space="preserve">
          <source>The following snippets are taken from our &lt;a href=&quot;https://github.com/mdn/web-components-examples/tree/master/slotted-pseudo-element&quot;&gt;slotted-pseudo-element&lt;/a&gt; demo (&lt;a href=&quot;https://mdn.github.io/web-components-examples/slotted-pseudo-element/&quot;&gt;see it live also&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494045752b4585e35ec88564092d8bbc7630ac4c" translate="yes" xml:space="preserve">
          <source>The following table lists the most popular DX Filters and their standards-based alternatives:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ef8bc4ac241473418b8e1c0ee202a25c02cf05" translate="yes" xml:space="preserve">
          <source>The following table summarizes the behavior of the various &lt;code&gt;white-space&lt;/code&gt; values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92203c1f68f879df757bddd6ad2f3fdfa59c581" translate="yes" xml:space="preserve">
          <source>The following values are accepted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0217193d979f347a630e31a418a092c600f3d615" translate="yes" xml:space="preserve">
          <source>The following values are defined for positional alignment, and can be used as values for content alignment with &lt;code&gt;justify-content&lt;/code&gt; and &lt;code&gt;align-content&lt;/code&gt; and also for self alignment with &lt;code&gt;justify-self&lt;/code&gt; and &lt;code&gt;align-self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291341861f5738ce2e8417aaec6449590738c69a" translate="yes" xml:space="preserve">
          <source>The following values vertically align the element relative to the entire line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313ba33b700cb5398c9f6932b32ee6bb296e45cc" translate="yes" xml:space="preserve">
          <source>The following would make an element look like a toolbar button in Firefox:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6716eee5c5e7a195892fdf7e0e239945129c56b5" translate="yes" xml:space="preserve">
          <source>The font features</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8816236a27a4c5c14d9b3965c35fd912ee57a8" translate="yes" xml:space="preserve">
          <source>The font-size will at minimum 2ems, or twice the size of the inherited font size. We are telling it to not go below 32px if the inherited font is small. But what if the inherited font size is huge? We are setting the upper bound and twice the root em unit, but hoping the font falls between that range when it is twice the inherited font size value. This ensure it is legible and ensures accessibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44adabd15cf805e978fcc5385234540b0d2ebb40" translate="yes" xml:space="preserve">
          <source>The font-size will at minimum be 2rems, or twice the default size of font for the page. This ensure it is legible and ensures accessibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f40b0839ebde35fa80dad87591a2aec9b13d2f7" translate="yes" xml:space="preserve">
          <source>The foreground fill color of the element's text content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eec1c4969bfa77e68acb5b6ade87087086f9655" translate="yes" xml:space="preserve">
          <source>The fr Unit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67344be9c33b00c26e2bcadc155ce2f5c3cca14e" translate="yes" xml:space="preserve">
          <source>The frames() class of timing functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c8cf93082ecfe579e41399ce595ddc713f3d1a" translate="yes" xml:space="preserve">
          <source>The function can be used as a track size in &lt;a href=&quot;css_grid_layout&quot;&gt;CSS Grid&lt;/a&gt; properties, where the maximum size is defined by &lt;code&gt;&lt;a href=&quot;grid-template-columns#max-content&quot;&gt;max-content&lt;/a&gt;&lt;/code&gt; and the minimum size by &lt;code&gt;&lt;a href=&quot;grid-template-columns#auto&quot;&gt;auto&lt;/a&gt;&lt;/code&gt;, which is calculated similar to &lt;code&gt;auto&lt;/code&gt; (i.e. &lt;code&gt;&lt;a href=&quot;minmax&quot;&gt;minmax(auto, max-content)&lt;/a&gt;&lt;/code&gt;), except that the track size is clamped at &lt;var&gt;argument&lt;/var&gt; if it is greater than the &lt;code&gt;auto&lt;/code&gt; minimum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41398d5fbb4aa383a836292f08030121eb784f2" translate="yes" xml:space="preserve">
          <source>The function is applied to an element by using matrix multiplication. Thus, each coordinate changes based on the values in the matrix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25cad440982986bfdd4b84fe0fa2f4bd5a68a742" translate="yes" xml:space="preserve">
          <source>The gap between our columns is controlled by the &lt;code&gt;column-gap&lt;/code&gt; property. This property was originally defined in the Multi-column Layout specification. However, it is now defined in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs//Web/CSS/CSS_Box_Alignment&quot;&gt;Box Alignment&lt;/a&gt; in order to unify gaps between boxes in other specifications such as &lt;a href=&quot;../css_grid_layout/box_alignment_in_css_grid_layout&quot;&gt;CSS Grid Layout&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f792a13ef301fc89886858f286464d973db43b5" translate="yes" xml:space="preserve">
          <source>The gap properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e42be0089d2f00e525961b03d276a893959165" translate="yes" xml:space="preserve">
          <source>The general syntax looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4e0d6dff9295bef95b123c130ddc99446ebc30" translate="yes" xml:space="preserve">
          <source>The generated colors you create above can be used anywhere color is used in CSS and HTML, unless otherwise noted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0804619f48c43616674e5c370d8126ca78552b1" translate="yes" xml:space="preserve">
          <source>The glyphs are positioned relative to the baseline of the font, which remains unchanged. These glyphs are typically used in &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub&quot;&gt;&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup&quot;&gt;&lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt;&lt;/a&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eede0a4e63dd8438a0cd72d6e8ecdcce51820752" translate="yes" xml:space="preserve">
          <source>The gradient line is defined by the center of the box containing the gradient image and by an angle. The colors of the gradient are determined by two or more points: the starting point, the ending point, and, in between, optional color-stop points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57f77c082edf413d5208d5385b0615d5c5daaf6" translate="yes" xml:space="preserve">
          <source>The gradient line's angle of direction. A value of &lt;code&gt;0deg&lt;/code&gt; is equivalent to &lt;code&gt;to top&lt;/code&gt;; increasing values rotate clockwise from there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="250ffc67b5424f3c523ed44830313d9e01e937fe" translate="yes" xml:space="preserve">
          <source>The gradient's ending shape is sized so that it exactly meets the closest corner of the box from its center.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ee415d7079d8a603221aa9992ac5155558517b" translate="yes" xml:space="preserve">
          <source>The gradient's ending shape is sized so that it exactly meets the farthest corner of the box from its center.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db3fe2fbc1a8be8c35ead5b24731bce223d96cc" translate="yes" xml:space="preserve">
          <source>The gradient's ending shape meets the side of the box closest to its center (for circles) or meets both the vertical and horizontal sides closest to the center (for ellipses).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22823b42cede79a032e39f53ea1f7f28a07deda7" translate="yes" xml:space="preserve">
          <source>The gradient's shape. The value can be &lt;code&gt;circle&lt;/code&gt; (meaning that the gradient's shape is a circle with constant radius) or &lt;code&gt;ellipse&lt;/code&gt; (meaning that the shape is an axis-aligned ellipse). If unspecified, it defaults to &lt;code&gt;ellipse&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8d9bab9c96fce661b56d0e01f9d533aedb9f3f" translate="yes" xml:space="preserve">
          <source>The grid container doesn&amp;rsquo;t define any named grid areas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0d62b55f19766be466d232f60ff3fa1408ff65" translate="yes" xml:space="preserve">
          <source>The grid in my next example has three columns and two row tracks. This means there are three tracks running down the block axis. In default writing mode, grid auto-places items starting at the top left, moving along to the right, filling up the three cells on the inline axis. It then moves onto the next line, creating a new Row track, and fills in more items:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e210c006519dd8f27a9011c38ccb2737a119bb3" translate="yes" xml:space="preserve">
          <source>The grid-area property can also be set to a &lt;a href=&quot;custom-ident&quot;&gt;&lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt;&lt;/a&gt; which acts as a name for the area, which can then be placed using &lt;a href=&quot;grid-template-areas&quot;&gt;&lt;code&gt;grid-template-areas&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9a62b5e15def0b1cce1fdf8ef2ad1f1a157d38" translate="yes" xml:space="preserve">
          <source>The grippers are always off and default touch selection functionality is not provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a606dea36713ddb5d7c1381ae58d7d8e54e33b4" translate="yes" xml:space="preserve">
          <source>The grippers are always on. In addition, selection will start even if an &lt;code&gt;onclick&lt;/code&gt;, &lt;code&gt;onmsgesturetap&lt;/code&gt;, or &lt;code&gt;onmouseup&lt;/code&gt; handler is present. This is the initial value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355c53491ab2c1d43f5d1a16c3e7beea4d64f566" translate="yes" xml:space="preserve">
          <source>The gutter is the space between the track and the bottom and right edges of the scroll box and scroll arrows of the scroll bar. The &lt;code&gt;-ms-scrollbar-darkshadow-color&lt;/code&gt; appears outside the &lt;a href=&quot;-ms-scrollbar-shadow-color&quot;&gt;&lt;code&gt;-ms-scrollbar-shadow-color&lt;/code&gt;&lt;/a&gt;. The track is the element of a scroll bar on which the scroll box can slide either up and down or left and right. The scroll box is the square box within a scroll bar that can be moved either up and down or left and right on a track to change the position of the content on the screen. The scroll arrows, located at each end of a scroll bar, are the square buttons containing the arrows that move the content on the screen in small increments, either up and down or left and right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f2b040df492cbc96e210b64d11c5a46ea5ced1c" translate="yes" xml:space="preserve">
          <source>The heart of the new variable fonts format is the concept of an &lt;strong&gt;axis of variation&lt;/strong&gt; describing the allowable range of that particular aspect of the typeface design. So the 'weight axis' describes how light or how bold the letterforms can be; the 'width axis' describes how narrow or how wide they can be; the 'italic axis' describes if italic letterforms are present and can be turned on or off accordingly, etc. Note that an axis can be a range or a binary choice. Weight might range from 1&amp;ndash;999, whereas italic might simply be 0 or 1 (off or on).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7b31e752ae63c6419c2a4728b084d6d7bcea89" translate="yes" xml:space="preserve">
          <source>The height and width properties include the content and padding but not the border or margin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12f387746e6ff47b5be6fce0355d03bb74a2b2b0" translate="yes" xml:space="preserve">
          <source>The height and width properties include the content, but not the padding, border or margin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33422ab3c570dc09ec4a38ef3e89678c4e8d4076" translate="yes" xml:space="preserve">
          <source>The height and width properties include the content, padding and border but not the margin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c04d54d3768737f29e19c5a67fb51486b3343c" translate="yes" xml:space="preserve">
          <source>The height and width properties include the content, padding, border and margin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfa6b8312fb9ce207080be6e206956717e8d743" translate="yes" xml:space="preserve">
          <source>The height has no maximum value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494b1d99d1f85dde216f53d42cc81f4b6c9c97bd" translate="yes" xml:space="preserve">
          <source>The height will initially be set as close as possible to the initial viewport height considering the maximum height constraint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe6d270a65a0765ea935d83ef0cdf229fb926a4" translate="yes" xml:space="preserve">
          <source>The height will initially be set as close as possible to the initial viewport height considering the minimum height constraint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43ad8f44f38ff411930605da5eafb2f711468ca" translate="yes" xml:space="preserve">
          <source>The history of flexbox</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f55551e49588935ab83775b8838f7a8c0bbb469" translate="yes" xml:space="preserve">
          <source>The hover feature is specified as a keyword value chosen from the list below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b9dd3e88250a72380b1096b9c63bf7aa8e14826" translate="yes" xml:space="preserve">
          <source>The ideal column width, defined as a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or the keyword &lt;code&gt;auto&lt;/code&gt;. The actual width may be wider or narrower to fit the available space. See &lt;a href=&quot;column-width&quot;&gt;&lt;code&gt;column-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7685bc03da834453ebeea1f7a1478ffe2b80735" translate="yes" xml:space="preserve">
          <source>The ideal number of columns into which the element's content should be flowed, defined as an &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt;&lt;/a&gt; or the keyword &lt;code&gt;auto&lt;/code&gt;. If neither this value nor the column's width are &lt;code&gt;auto&lt;/code&gt;, it merely indicates the maximum allowable number of columns. See &lt;a href=&quot;column-count&quot;&gt;&lt;code&gt;column-count&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51b3c1f66e76fca045d08745a01925bda8dbe8fb" translate="yes" xml:space="preserve">
          <source>The image below is a square image with a blue background. We have defined a shape using &lt;code&gt;shape-outside: ellipse(40% 50%);&lt;/code&gt; and also used &lt;code&gt;clip-path: ellipse(40% 50%);&lt;/code&gt; to clip away the same area that we have used to define the shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393e3924de0483feec0eac26980e18b99ef976ab" translate="yes" xml:space="preserve">
          <source>The image below shows the media object in a non-supporting browser on the left, and a supporting one on the right:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35f992c88214995870271fe1f7f427a76196127" translate="yes" xml:space="preserve">
          <source>The image is flipped horizontally (i.e., reflected) after the rotation given by the &lt;a href=&quot;angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; value is applied. If no &lt;a href=&quot;angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; is given, &lt;code&gt;0deg&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f1af6efe536c3f4849a14eb9e3790f6e605b3c" translate="yes" xml:space="preserve">
          <source>The image is not repeated (and hence the background image painting area will not necessarily be entirely covered). The position of the non-repeated background image is defined by the &lt;a href=&quot;background-position&quot;&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/a&gt; CSS property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c7835ae7269029251242145655f6de3aefcc2a" translate="yes" xml:space="preserve">
          <source>The image is not repeated (and hence the mask painting area will not necessarily be entirely covered). The position of the non-repeated mask image is defined by the &lt;a href=&quot;mask-position&quot;&gt;&lt;code&gt;mask-position&lt;/code&gt;&lt;/a&gt; CSS property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab424b97023efd5253dddde04467a9009471413" translate="yes" xml:space="preserve">
          <source>The image is rendered by preserving its intrinsic proportion at the largest size contained within or covering the mask positioning area. If the image has no intrinsic proportion, then it is rendered at the size of the mask positioning area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a0cbf4e3152108a721bc91af0310dee1de54dc" translate="yes" xml:space="preserve">
          <source>The image is repeated as much as needed to cover the whole background image painting area. The last image will be clipped if it doesn't fit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d42157140b31fd67385506a6a1ede17c15fd77" translate="yes" xml:space="preserve">
          <source>The image is repeated as much as needed to cover the whole mask painting area. The last image will be clipped if it doesn't fit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d385286cb01ba844e86f96a12ac0b9dd8cf64417" translate="yes" xml:space="preserve">
          <source>The image is repeated as much as possible without clipping. The first and last images are pinned to either side of the element, and whitespace is distributed evenly between the images. The &lt;a href=&quot;background-position&quot;&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/a&gt; property is ignored unless only one image can be displayed without clipping. The only case where clipping happens using &lt;code&gt;space&lt;/code&gt; is when there isn't enough room to display one image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5928c3c6c23d46c25c7647a7ed7b8e61e5394946" translate="yes" xml:space="preserve">
          <source>The image is repeated as much as possible without clipping. The first and last images are pinned to either side of the element, and whitespace is distributed evenly between the images. The &lt;a href=&quot;mask-position&quot;&gt;&lt;code&gt;mask-position&lt;/code&gt;&lt;/a&gt; property is ignored unless only one image can be displayed without clipping. The only case where clipping happens using &lt;code&gt;space&lt;/code&gt; is when there isn't enough room to display one image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd50023bfff28c891e49d499e72e1bceeaf25507" translate="yes" xml:space="preserve">
          <source>The image must be scaled with an algorithm that preserves contrast and edges in the image, and which does not smooth colors or introduce blur to the image in the process. Suitable algorithms include nearest-neighbor and other non-smoothing scaling algorithms such as 2&amp;times;SaI and hqx-family algorithms. This value is intended for pixel-art images, such as in browser games.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72765b9740ec929e20630c904244bc7b931f7697" translate="yes" xml:space="preserve">
          <source>The image should be scaled with an algorithm that maximizes the appearance of the image. In particular, scaling algorithms that &quot;smooth&quot; colors are acceptable, such as bilinear interpolation. This is intended for images such as photos.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e43019509b9760294b2024c72e2254bb8b86680" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt; values was buggy in Opera prior to 11.50.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20f354be49d571cbf7193217aec4c2146b6605e" translate="yes" xml:space="preserve">
          <source>The implicit and explicit grid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be5d4146d906fffb89729d89c1ef247049741dde" translate="yes" xml:space="preserve">
          <source>The in&lt;code&gt;set-inline-end&lt;/code&gt; property takes the same values as the &lt;a href=&quot;left&quot;&gt;&lt;code&gt;left&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ced8d96fd8e1115e972cc600d023fe36c19f41" translate="yes" xml:space="preserve">
          <source>The inconsistent spacing between words created by justified text can be problematic for people with cognitive concerns such as Dyslexia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670e5ec2e57a34f0931b237a9869b62fa0f193d8" translate="yes" xml:space="preserve">
          <source>The individual pages for the different types of value that &lt;code&gt;display&lt;/code&gt; can have set on it feature multiple examples of those values in action &amp;mdash; see the &lt;a href=&quot;#Syntax&quot;&gt;Syntax&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd1a22913ba86b12457d1f2326f834d8f6ad993" translate="yes" xml:space="preserve">
          <source>The individual text-decoration properties are &lt;a href=&quot;text-decoration-line&quot;&gt;&lt;code&gt;text-decoration-line&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;text-decoration-color&quot;&gt;&lt;code&gt;text-decoration-color&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;text-decoration-style&quot;&gt;&lt;code&gt;text-decoration-style&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b8424b76b7574a15a14cc4ed4142f4c868f8d9" translate="yes" xml:space="preserve">
          <source>The initial Shapes specification included a property &lt;code&gt;shape-inside&lt;/code&gt; for creating shapes inside an element. This property, along with the possibility of creating shapes on non-floated elements, has been moved to &lt;a href=&quot;https://drafts.csswg.org/css-shapes-2/&quot;&gt;level 2&lt;/a&gt; of the specification. As the &lt;code&gt;shape-inside&lt;/code&gt; property was initially in Level 1 of the specification, you may find tutorials on the web detailing both properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a58569a0c4aa6b647d8906e387d090bf9cc17a4" translate="yes" xml:space="preserve">
          <source>The initial value for &lt;code&gt;align-self&lt;/code&gt; and &lt;code&gt;justify-self&lt;/code&gt; is &lt;code&gt;stretch&lt;/code&gt; so the item will stretch over the entire grid area. The exception to this rule is where the item has an intrinsic aspect ratio, for example an image. In this case the item will be aligned to &lt;code&gt;start&lt;/code&gt; in both dimensions in order that the image is not distorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e601ac6d9e05be99f0786843e29aa18cbd5d1fe" translate="yes" xml:space="preserve">
          <source>The initial value for this property is &lt;code&gt;stretch&lt;/code&gt; and this is why flex items stretch to the height of the tallest one by default. They are in fact stretching to fill the flex container &amp;mdash; the tallest item is defining the height of that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97eb7e35a2b50538b56324ec723f97dc2fc432ce" translate="yes" xml:space="preserve">
          <source>The initial value of &lt;code&gt;column-gap&lt;/code&gt; in multicol is &lt;code&gt;1em&lt;/code&gt;. This means your columns will not run into each other. In other layout methods the initial value for &lt;code&gt;column-gap&lt;/code&gt; is 0. If you use the keyword value &amp;ldquo;normal&amp;rdquo; the gap will be set to 1em.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9b9fa36f6231a398d2c24d0ea96025a756ff14" translate="yes" xml:space="preserve">
          <source>The initial value of all elements except the top-level element. The element is not zoomable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c46fcdce47c67ed835e75a2cab6bb4f4d8acbd" translate="yes" xml:space="preserve">
          <source>The initial value of multicol for &lt;a href=&quot;../column-fill&quot;&gt;&lt;code&gt;column-fill&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;balance&lt;/code&gt;. The value of balance means all columns are as balanced as is possible. In fragmented contexts such as &lt;a href=&quot;../css_pages&quot;&gt;Paged Media&lt;/a&gt;, only the last fragment is balanced. This means that on the last page the final set of column boxes will be balanced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e445fe1d1ce5a15a6db13eecbb39a14015bb49cb" translate="yes" xml:space="preserve">
          <source>The initial value of the &lt;a href=&quot;../flex-wrap&quot;&gt;&lt;code&gt;flex-wrap&lt;/code&gt;&lt;/a&gt; property is &lt;code&gt;nowrap&lt;/code&gt;. This means that if you have a set of flex items that are too wide for their container, they will overflow it. If you want to cause them to wrap once they become too wide you must add the &lt;code&gt;flex-wrap&lt;/code&gt; property with a value of &lt;code&gt;wrap&lt;/code&gt;, or use the shorthand &lt;a href=&quot;../flex-flow&quot;&gt;&lt;code&gt;flex-flow&lt;/code&gt;&lt;/a&gt; with values of &lt;code&gt;row wrap&lt;/code&gt; or &lt;code&gt;column wrap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752015a2872c4be52dd603854e07aa0611d01018" translate="yes" xml:space="preserve">
          <source>The initial value of the top-level element. The element is zoomable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6f299cd78ff2d2ae8ccc29cc40bd61b498eb4b7" translate="yes" xml:space="preserve">
          <source>The initial value. A bounce effect is shown when the user hits a zoom limit during page manipulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17fbb9f48788110764a2ff2ed15c04320f2173e" translate="yes" xml:space="preserve">
          <source>The initial value. Same as &lt;code&gt;inherit&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37daf8e8aae99762e61c378d61529a8a8779e4a" translate="yes" xml:space="preserve">
          <source>The initial value. The value is inherited from the element's parent element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a4a10c8a9b0327c423efd6d2b020d506650552" translate="yes" xml:space="preserve">
          <source>The initial version of CSS defined a set of useful counter styles. However, although more styles were added to this set of predefined styles over the years, this system proved too restrictive to fulfill the needs of worldwide typography. The &lt;code&gt;@counter-style&lt;/code&gt; at-rule addresses this shortcoming in an open-ended manner, by allowing authors to define their own counter styles when the pre-defined styles aren't fitting their needs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca6b397ec7096833edb6a021fa6f12c561ac906" translate="yes" xml:space="preserve">
          <source>The inline axis is the axis that corresponds to the direction that words in a sentence would run in the writing mode used. Therefore, in a horizontal language such as English or Arabic the inline direction runs horizontally. Should you be in a vertical writing mode the inline axis will run vertically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdcafdc6d9c305d6d966cab41d6c4b93042e06c" translate="yes" xml:space="preserve">
          <source>The inline contents are aligned to the left edge of the line box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3e23fe52d7e4a9ad59ba3f6696d54acbbd750f" translate="yes" xml:space="preserve">
          <source>The inline contents are aligned to the right edge of the line box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba2679e7eeb694e431276b6766bb9780fa246e0" translate="yes" xml:space="preserve">
          <source>The inline contents are centered within the line box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ce23b3fcae3ae633f8c90e6e7c5802b6978f54" translate="yes" xml:space="preserve">
          <source>The inline contents are justified. Text should be spaced to line up its left and right edges to the left and right edges of the line box, except for the last line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f6f61df33d912be46323457f9c279501d71ad8" translate="yes" xml:space="preserve">
          <source>The input method editor is disabled and may not be activated by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad07f540e381ebb8bca542e5d69631513d41e19" translate="yes" xml:space="preserve">
          <source>The input method editor is initially active; text entry is performed through it unless the user specifically dismisses it. &lt;em&gt;Not supported on Linux.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd7c06df9f71cad163cef43c22600e16a25bfbbe" translate="yes" xml:space="preserve">
          <source>The input method editor is initially inactive, but the user may activate it if they wish. &lt;em&gt;Not supported on Linux.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69839fd3332824d381961d5567f75d78f58d3cf7" translate="yes" xml:space="preserve">
          <source>The interactive example below demonstrates some of the values for &lt;code&gt;align-items&lt;/code&gt; using grid layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8eabba820dc05809aad1dffb1d7068e8290c3ee" translate="yes" xml:space="preserve">
          <source>The interactive example below demonstrates some of the values using Grid Layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ee3d5d08eed787a7edec17fea5d40daf0e7c84" translate="yes" xml:space="preserve">
          <source>The interactive example below use Grid Layout to demonstrate some of the values of this property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731da34e3bf05e37ab1bf4c67143dbfee0691e08" translate="yes" xml:space="preserve">
          <source>The interpretation of possible values depends on the image's intrinsic dimensions (width and height) and intrinsic proportion (ratio of width and height). A bitmap image always has intrinsic dimensions and an intrinsic proportion. A vector image may have both intrinsic dimensions and thus it has an intrinsic proportion too. It also may have one or no intrinsic dimensions and in either case it might or might not have an intrinsic proportion. Gradients are treated as images with no intrinsic dimensions or intrinsic proportion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="162680224bc307db168dca95654ae589ed0378dd" translate="yes" xml:space="preserve">
          <source>The intrinsic minimum height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89173597a453ac4904d608b5884b040d8ee4087" translate="yes" xml:space="preserve">
          <source>The intrinsic minimum width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9efe08ce05a258fe8fa5384ff1ca54809080de" translate="yes" xml:space="preserve">
          <source>The intrinsic preferred height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539fe1dfbb07fe467153f64747bc979141037c9b" translate="yes" xml:space="preserve">
          <source>The intrinsic preferred width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0bf42225d5e74f92de3746affd0444c363412a0" translate="yes" xml:space="preserve">
          <source>The intrinsic size contributions of the track may be adjusted to the size of the grid container and increase the final size of the track by the minimum amount that would result in honoring the percentage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3987e6a9fd7609bdacff6f6e9bd9b2844160bd2" translate="yes" xml:space="preserve">
          <source>The intrinsic size contributions of the track may be adjusted to the size of the grid container, and increase the final size of the track by the minimum amount that would result in honoring the percentage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094ce4f0b363a791bb2cb6f4430b16e81f383af1" translate="yes" xml:space="preserve">
          <source>The italicized version of this text uses the same glyphs present in the unstyled version, but they are artificially sloped by a few degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b209a599f10bf357bcbd7a7ece8d1745bf048f16" translate="yes" xml:space="preserve">
          <source>The item &lt;code&gt;box2&lt;/code&gt; is now overlapping &lt;code&gt;box1&lt;/code&gt;, it displays on top as it comes later in the source order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51d479ed7c48716d8f9a822c32ef5cc75d7607f" translate="yes" xml:space="preserve">
          <source>The item is given the specified proportion of the free space in the container. This is equivalent to setting &quot;&lt;code&gt;flex: &amp;lt;positive-number&amp;gt; 1 0&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba4cced6b6f0f50d2df30e45a9202123a2a3ed4" translate="yes" xml:space="preserve">
          <source>The item is packed flush to each other toward the edge of the alignment container depending on the flex container's main-end or cross-end side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc426df22c8a2817fe0053a6fd070be68ce4f04c" translate="yes" xml:space="preserve">
          <source>The item is packed flush to each other toward the edge of the alignment container depending on the flex container's main-start or cross-start side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf717d185752b7b19a91befc9373acc9f15c5eff" translate="yes" xml:space="preserve">
          <source>The item is packed flush to each other toward the end edge of the alignment container in the appropriate axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a491cba6b91eb912030c4a7386abaedf66b0e2" translate="yes" xml:space="preserve">
          <source>The item is packed flush to each other toward the start edge of the alignment container in the appropriate axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a38f13626890fb94cce189eb091dc912379c6a91" translate="yes" xml:space="preserve">
          <source>The item is packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fcfedd5b61808bc3db5c859bc381e648d45eff" translate="yes" xml:space="preserve">
          <source>The item is packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9299219c3cb538424f7a96130cb6408d8c523d09" translate="yes" xml:space="preserve">
          <source>The item is sized according to its &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; properties, but grows to absorb any extra free space in the flex container, and shrinks to its minimum size to fit the container. This is equivalent to setting &quot;&lt;code&gt;flex: 1 1 auto&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f0fef78106090377fb666147ef5643e81dcb24" translate="yes" xml:space="preserve">
          <source>The item is sized according to its &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; properties. It is fully inflexible: it neither shrinks nor grows in relation to the flex container. This is equivalent to setting &quot;&lt;code&gt;flex: 0 0 auto&lt;/code&gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27da69ca61b01647cd88c3a95244a292d92145ab" translate="yes" xml:space="preserve">
          <source>The item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc9d5202b17068919e946af928403b5a0dbd91c" translate="yes" xml:space="preserve">
          <source>The item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4503fe2180e31339bc6260d6b1f1f68117f1344" translate="yes" xml:space="preserve">
          <source>The items are displayed in what is described in the specification as &lt;em&gt;order-modified document order&lt;/em&gt;. The value of the order property is taken into account before the items are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18db71e2f93ce2724586fe3d2d28e8810cb52692" translate="yes" xml:space="preserve">
          <source>The items are evenly distributed within the alignment container along the cross axis. The spacing between each pair of adjacent items is the same. The empty space before the first and after the last item equals half of the space between each pair of adjacent items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67c98547ca03907ea0add2f4af9c1d53b3819bc" translate="yes" xml:space="preserve">
          <source>The items are evenly distributed within the alignment container along the cross axis. The spacing between each pair of adjacent items is the same. The first item is flush with the main-start edge, and the last item is flush with the main-end edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a22b24ba22d501a087ae577d256d4c30c32f04e" translate="yes" xml:space="preserve">
          <source>The items are evenly distributed within the alignment container along the cross axis. The spacing between each pair of adjacent items, the main-start edge and the first item, and the main-end edge and the last item, are all exactly the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e246067c7a5021a80c31cdd010ff929f93a2f877" translate="yes" xml:space="preserve">
          <source>The items are evenly distributed within the alignment container along the main axis. The spacing between each pair of adjacent items is the same. The empty space before the first and after the last item equals half of the space between each pair of adjacent items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79793fcaa063e12af3412024e0568e015b09ddcd" translate="yes" xml:space="preserve">
          <source>The items are evenly distributed within the alignment container along the main axis. The spacing between each pair of adjacent items is the same. The first item is flush with the main-start edge, and the last item is flush with the main-end edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc1ac68f7b2eae3ff003c07bf427fefe9297f66" translate="yes" xml:space="preserve">
          <source>The items are evenly distributed within the alignment container along the main axis. The spacing between each pair of adjacent items, the main-start edge and the first item, and the main-end edge and the last item, are all exactly the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02588914ce44ab2891d10cce1c977933c9641831" translate="yes" xml:space="preserve">
          <source>The items are evenly distributed within the alignment container. The spacing between each pair of adjacent items is the same. The empty space before the first and after the last item equals half of the space between each pair of adjacent items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc052b5e7c84f5623f2358fdc89084bd26a57d6c" translate="yes" xml:space="preserve">
          <source>The items are evenly distributed within the alignment container. The spacing between each pair of adjacent items is the same. The first item is flush with the main-start edge, and the last item is flush with the main-end edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e25d23bf4789703227eb7fc45cb1394f4b103a4" translate="yes" xml:space="preserve">
          <source>The items are evenly distributed within the alignment container. The spacing between each pair of adjacent items, the main-start edge and the first item, and the main-end edge and the last item, are all exactly the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58be308b7e0713ca144b57c6ab8bae15d60b72cb" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the center of the alignment container along the cross axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2020d8bf81fa5b9ccb37a432f2acfb1df45411" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the center of the alignment container along the main axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c7cb36ab9de7b7bb4d2de260bfe6db68482891b" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the center of the alignment container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a6835344e65b001a9b7d08648f3544fa4fe586f" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the center of the of the alignment container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ec384e9d2d41c954d6501ba3568832d7b8e6ce" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the edge of the alignment container depending on the flex container's cross-end side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d236476cc3fffa16a2d50eee0e3aa97fd651e4" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the edge of the alignment container depending on the flex container's cross-start side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5703caba0ccb7a4b296215173bc933a9fdc71203" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the edge of the alignment container depending on the flex container's main-end or cross-end side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4328f35c59972d6f1e7974fd5bf3332110d6498a" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the edge of the alignment container depending on the flex container's main-end side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd404af9f07df2c25401af67f973c153e0275fc" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the edge of the alignment container depending on the flex container's main-start or cross-start side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f685b94ec8f90544d2cb9b302e5087ffc8f871ee" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the edge of the alignment container depending on the flex container's main-start side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2becc1a8eef9bfafdec82e527672dda31a1f92" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the end edge of the alignment container in the appropriate axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3adec1ed7b61e6badc2495bad8f0bff3a647a8" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the end edge of the alignment container in the cross axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f1c628d832166242698f411c51b58267490091" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the end edge of the alignment container in the main axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22526aa7c2b87f0da93aec4b0325fc2c93ddb813" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the left edge of the alignment container. If the property&amp;rsquo;s axis is not parallel with the inline axis, this value behaves like &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ff43ba2e8638e7df1accd5eb85be87e12ef7af" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the right edge of the alignment container in the appropriate axis. If the property&amp;rsquo;s axis is not parallel with the inline axis, this value behaves like &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293753da6dc0dedab08cdee5a53667c75bde9a45" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the start edge of the alignment container in the appropriate axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b673b58442f99371165703a1bf21b0b67ea3ab" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the start edge of the alignment container in the cross axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b286496311a7298c415655be1246901bf1f9b303" translate="yes" xml:space="preserve">
          <source>The items are packed flush to each other toward the start edge of the alignment container in the main axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47692cb8fb4127c29b5e13677a2579ca74d4021f" translate="yes" xml:space="preserve">
          <source>The items are packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e26cbf4e3764383a4948388b5b686bb5b4c6b1" translate="yes" xml:space="preserve">
          <source>The items are packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcd3ab1825adcc63704fe6dacfcd208b57806a9" translate="yes" xml:space="preserve">
          <source>The items are packed in their default position as if no &lt;code&gt;align-content&lt;/code&gt; value was set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae651f41be19ab3f1ed4163d2669c5db2804c5b" translate="yes" xml:space="preserve">
          <source>The items are packed in their default position as if no &lt;code&gt;justify-content&lt;/code&gt; value was set. This value behaves as &lt;code&gt;stretch&lt;/code&gt; in grid and flex containers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b774dcbe03aca4e8952aca185a29a81a1f4fe123" translate="yes" xml:space="preserve">
          <source>The items do not stretch on the main dimension, but can shrink.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e6a2666f2366aeea455ef230e443dd275f63da" translate="yes" xml:space="preserve">
          <source>The items start from the start edge of the main axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cec3d3170de37e72fa4fb1b6f6249ebe92d350" translate="yes" xml:space="preserve">
          <source>The items will stretch to fill the size of the cross axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce94218d55af282fb918fa2a31f28eb5382d085d" translate="yes" xml:space="preserve">
          <source>The kanjis are designed so that they can't be modified to look like another correct one</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c24032ae269dc11ab3cfe7b6064f6c2f4ce8f2f" translate="yes" xml:space="preserve">
          <source>The key thing to remember when placing items by line number, is that line 1 is the start line, no matter which writing mode you are in. Line -1 is the end line, no matter which writing mode you are in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af195f13c771b0300167b6c876dd2615a14d04b" translate="yes" xml:space="preserve">
          <source>The key to really understanding how flex item sizing works is in understanding the number of things that come into play. Consider the following aspects, which we have already discussed in these guides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1009235ce42f2e5dc6215e1ac0ea545aa95e93b" translate="yes" xml:space="preserve">
          <source>The keyframes are defined using the &lt;a href=&quot;../@keyframes&quot;&gt;&lt;code&gt;@keyframes&lt;/code&gt;&lt;/a&gt; at-rule. In this case, we have just two keyframes. The first occurs at 0% (using the alias &lt;code&gt;from&lt;/code&gt;). Here, we configure the left margin of the element to be at 100% (that is, at the far right edge of the containing element), and the width of the element to be 300% (or three times the width of the containing element). This causes the first frame of the animation to have the header drawn off the right edge of the browser window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2822c3e12d4c164021783601004b39cbf1f99860" translate="yes" xml:space="preserve">
          <source>The keyword &lt;code&gt;&lt;strong&gt;closest-side&lt;/strong&gt;&lt;/code&gt; uses the length from the center of the shape to the closest side of the reference box. For circles, this is the closest side in any dimension. For ellipses, this is the closest side in the radius dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2d9df34f7189d39af0bfad2620c320a93e1f29" translate="yes" xml:space="preserve">
          <source>The keyword &lt;code&gt;&lt;strong&gt;farthest-side&lt;/strong&gt;&lt;/code&gt; uses the length from the center of the shape to the farthest side of the reference box. For circles, this is the farthest side in any dimension. For ellipses, this is the farthest side in the radius dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc24c69aee6d5a4a9b36cc235b15dff025360f7" translate="yes" xml:space="preserve">
          <source>The keyword value &lt;code&gt;center&lt;/code&gt;, which centers the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd31aca0af99714c2e0e5b72a8c144ea872e50f" translate="yes" xml:space="preserve">
          <source>The keyword value &lt;code&gt;fixed&lt;/code&gt; along with an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8126ab41fe3b4e22d42c0d740afe2429d7fe8dc9" translate="yes" xml:space="preserve">
          <source>The keyword value &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafcb8ff5dd4aed0b4cb59f5dafeceda535f549b" translate="yes" xml:space="preserve">
          <source>The keyword value of &lt;code&gt;both&lt;/code&gt; for the resize property works whether you are thinking physically or logically. It sets both dimensions at once. Try playing with the below example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5db45919e18b9f3c5760d817ea986652b8b30f" translate="yes" xml:space="preserve">
          <source>The keyword value or &lt;code&gt;extends&lt;/code&gt; along with a &lt;a href=&quot;../@counter-style&quot;&gt;&lt;code&gt;@counter-style&lt;/code&gt;&lt;/a&gt; name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32e68f0ffee5a8c6b06b04a818c71abc632fc219" translate="yes" xml:space="preserve">
          <source>The keyword values are &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, and &lt;code&gt;left&lt;/code&gt;. Each keyword represents either an edge of the element's box or the center line between two edges. Depending on the context, &lt;code&gt;center&lt;/code&gt; represents either the center between the left and right edges, or the center between the top and bottom edges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c01268b3bdce9b2c0317adcec4b6f1eb8e62261" translate="yes" xml:space="preserve">
          <source>The keyword values of &lt;code&gt;closest-side&lt;/code&gt; and &lt;code&gt;farthest-side&lt;/code&gt; are useful to create a quick ellipse based on the size of the floated element reference box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bde36aab6a9a659c89d1cc8ee36ef356d2b33a" translate="yes" xml:space="preserve">
          <source>The keywords are convenience shorthands and match the following &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36100958d6dd4004cc8b54e3a9d2bdb24e4f5559" translate="yes" xml:space="preserve">
          <source>The language is defined by the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang&quot;&gt;lang&lt;/a&gt;&lt;/code&gt; HTML attribute or the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xml:lang&quot;&gt;xml:lang&lt;/a&gt;&lt;/code&gt; XML attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7807a543adafa17ada7db44de8418dff709d4280" translate="yes" xml:space="preserve">
          <source>The larger of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28a0b0482426fcd140cc9e1ea48ffdff1377f23" translate="yes" xml:space="preserve">
          <source>The largest allowed zoom factor. A zoom factor of 100% corresponds to no zooming. Larger values zoom in. Smaller values zoom out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd819239fa5e07daa8c746017fb0145b294deccb" translate="yes" xml:space="preserve">
          <source>The last one is ignored (on a screen), and the first two have the same selector, hence the same specificity. Therefore, it is the last one that is then selected:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="752a8d01c28f32b53caff5a763727354dc494671" translate="yes" xml:space="preserve">
          <source>The last rule selects all links within an element with the class &lt;code&gt;my-class-3&lt;/code&gt; and sets their color to &lt;code&gt;unset&lt;/code&gt; &amp;mdash; we unset the value. Because the color property is a naturally inherited property it acts exactly like setting the value to &lt;code&gt;inherit&lt;/code&gt;. As a consequence, this link is set to the same color as the body &amp;mdash; green.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdeec623770085f824bdcc7032a8b7cb7ac54818" translate="yes" xml:space="preserve">
          <source>The layout may change dynamically according to the usual rules of CSS, and the output device is not unusually constrained in speed, so regularly-updating things like &lt;a href=&quot;../css_animations&quot;&gt;CSS Animations&lt;/a&gt; can be used. Example: computer screens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fffaaad787d4e43161b84246f56122838d5299d" translate="yes" xml:space="preserve">
          <source>The layout may change dynamically according to the usual rules of CSS, but the output device is not able to render or display changes quickly enough for them to be perceived as a smooth animation. Examples: e-book readers or severely underpowered devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc290efcd14c197d091a9dab3d1edb80841e1746" translate="yes" xml:space="preserve">
          <source>The layout viewport and visual viewport described above are not the only viewport you will encounter. Any sub-viewport that is fully or partially displayed within the layout viewport is considered a visual viewport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6c60f9e79cd2040b2dc7cbc857bf11dfa6f289f" translate="yes" xml:space="preserve">
          <source>The left edge, specified as an &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;, of the sub-image within the specified image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="680dcd83ffcac495b72199b8fd3a4ae0b1b52d3e" translate="yes" xml:space="preserve">
          <source>The left margin receives a share of the unused horizontal space, as determined mainly by the layout mode that is used. If the values of &lt;code&gt;margin-left&lt;/code&gt; and &lt;code&gt;margin-right&lt;/code&gt; are both &lt;code&gt;auto&lt;/code&gt;, the calculated space is evenly distributed. This table summarizes the different cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54aba04b42d33d554e8fedf92fca833ea9f97823" translate="yes" xml:space="preserve">
          <source>The length or percentage before the keywords, if both are present. If several keywords are present, they appear in the same order as their appearance in the formal grammar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163851b1e5f0c73aeb38e6dacf470f263032f510" translate="yes" xml:space="preserve">
          <source>The line box size in the block direction (so the height when working in English) is defined by the tallest box inside it. In the next example I have made the strong element 300%, that content now defines the height of the line box on that line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b474cb823e224e31b779f7e7cbf896041b7191" translate="yes" xml:space="preserve">
          <source>The line style of the border. See &lt;a href=&quot;border-style&quot;&gt;&lt;code&gt;border-style&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36c7e7fde93d752839bd317be5a0c846fb0fb9b8" translate="yes" xml:space="preserve">
          <source>The list-style-type property may be defined as any one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a381defc665e8940a37a8f5db6df1e2001d3ef43" translate="yes" xml:space="preserve">
          <source>The live example below allows you to test out the different values of the flex shorthand; remember that the first value is &lt;code&gt;flex-grow&lt;/code&gt;. Giving this a positive value means the item can grow. The second is &lt;code&gt;flex-shrink&lt;/code&gt; &amp;mdash; with a positive value the items can shrink, but only if their total values overflow the main axis. The final value is &lt;code&gt;flex-basis&lt;/code&gt;; this is the value the items are using as their base value to grow and shrink from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f420ba7490353a15c5247cfea4eddfbdec21b245" translate="yes" xml:space="preserve">
          <source>The live example below demonstrates use of the &lt;a href=&quot;../vertical-align&quot;&gt;&lt;code&gt;vertical-align&lt;/code&gt;&lt;/a&gt; property along with &lt;code&gt;display: inline-block&lt;/code&gt;. Both &lt;code&gt;display: table-cell&lt;/code&gt; and &lt;code&gt;display: inline-block&lt;/code&gt; allow for the use of this property. Use of &lt;code&gt;vertical-align&lt;/code&gt; enables vertical alignment prior to flexbox. The property is ignored by flexbox and so you can use it in conjunction with &lt;code&gt;display: table-cell&lt;/code&gt; or &lt;code&gt;display: inline-block&lt;/code&gt; as a fallback and then safely use box alignment properties in flexbox instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fdc4d5713831739d8b193bcadd0acfea66b4c0f" translate="yes" xml:space="preserve">
          <source>The live example below has &lt;code&gt;flex-direction&lt;/code&gt; set to &lt;code&gt;row-reverse&lt;/code&gt;. Try the other values &amp;mdash; &lt;code&gt;row&lt;/code&gt;, &lt;code&gt;column&lt;/code&gt; and &lt;code&gt;column-reverse&lt;/code&gt; &amp;mdash; to see what happens to the content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbdff1ef1a03735c005b8687211355431bc59759" translate="yes" xml:space="preserve">
          <source>The live example below has the &lt;code&gt;direction&lt;/code&gt; property set to &lt;code&gt;rtl&lt;/code&gt; to force a right-to-left flow for our items. You can remove this, or change the values of &lt;code&gt;justify-content&lt;/code&gt; to see how flexbox behaves when the start of the inline direction is on the right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d102232097a24462f08aadaaed0d7833410a5f" translate="yes" xml:space="preserve">
          <source>The logical mappings for &lt;a href=&quot;../width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt; are &lt;a href=&quot;../inline-size&quot;&gt;&lt;code&gt;inline-size&lt;/code&gt;&lt;/a&gt;, which sets the length in the inline dimension and &lt;a href=&quot;../block-size&quot;&gt;&lt;code&gt;block-size&lt;/code&gt;&lt;/a&gt;, which sets the length in the block dimension. When working in English, replacing &lt;code&gt;width&lt;/code&gt; with &lt;code&gt;inline-size&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; with &lt;code&gt;block-size&lt;/code&gt; will give the same layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1484841c86363527eb7e42eec0619eb86e887877" translate="yes" xml:space="preserve">
          <source>The longhand properties &lt;a href=&quot;text-emphasis-style&quot;&gt;&lt;code&gt;text-emphasis-style&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;text-emphasis-color&quot;&gt;&lt;code&gt;text-emphasis-color&lt;/code&gt;&lt;/a&gt;, and the corresponding shorthand property &lt;a href=&quot;text-emphasis&quot;&gt;&lt;code&gt;text-emphasis&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e7db6cb477fa682836c5001490febaa11b075e" translate="yes" xml:space="preserve">
          <source>The longhand properties &lt;a href=&quot;text-emphasis-style&quot;&gt;&lt;code&gt;text-emphasis-style&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;text-emphasis-color&quot;&gt;&lt;code&gt;text-emphasis-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523427c0810cc9803931b667eee29eef631e12bc" translate="yes" xml:space="preserve">
          <source>The luminance values of the mask border image are used as the mask values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83aab8e7ba8d1545a5917ce4ed4ae9086164971" translate="yes" xml:space="preserve">
          <source>The magic happens in the CSS. There are two rules here. The first establishes the background color of the &quot;Toggle Full-screen Mode&quot; button when the element is not in a full-screen state. The key is the use of the &lt;code&gt;:not(:fullscreen)&lt;/code&gt;, which looks for the element to not have the &lt;code&gt;:fullscreen&lt;/code&gt; pseudo-class applied to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d704ae3573eb9dcf825f1bf6316c40348ab1964" translate="yes" xml:space="preserve">
          <source>The main axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1dd8f73e35dc79ed254dfe8b55c021da9227c6d" translate="yes" xml:space="preserve">
          <source>The main axis = direction set by &lt;code&gt;flex-direction&lt;/code&gt; = alignment via &lt;code&gt;justify-content&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8122f89b619ec82b604e6a06842c51632ab65272" translate="yes" xml:space="preserve">
          <source>The main axis is defined by &lt;code&gt;flex-direction&lt;/code&gt;, which has four possible values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0584d05fb10e58620ccebef604c959746d948690" translate="yes" xml:space="preserve">
          <source>The majority of issues with flexbox relate to the changes in the specification, as it has been developed, and the fact that many of us were attempting to use an experimental specification in production. If you are trying to ensure backwards compatibility with old versions of browsers, and in particular IE10 and 11, the &lt;a href=&quot;https://github.com/philipwalton/flexbugs&quot;&gt;Flexbugs&lt;/a&gt; site is a helpful resource. You will see that many of the listed bugs apply to old browser versions and are fixed in current browsers. Each of the bugs has a workaround listed &amp;mdash; which can save you many hours of puzzling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255c093fffab5fcfdbd14677f1d3ed3afcfe3021" translate="yes" xml:space="preserve">
          <source>The mapped margin properties of &lt;a href=&quot;../margin-inline-start&quot;&gt;&lt;code&gt;margin-inline-start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../margin-inline-end&quot;&gt;&lt;code&gt;margin-inline-end&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../margin-block-start&quot;&gt;&lt;code&gt;margin-block-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../margin-inline-end&quot;&gt;&lt;code&gt;margin-inline-end&lt;/code&gt;&lt;/a&gt; can be used instead of their physical counterparts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1033ec98e6ae042ad4387b848d5aa4df969a77" translate="yes" xml:space="preserve">
          <source>The mapped padding properties of &lt;a href=&quot;../padding-inline-start&quot;&gt;&lt;code&gt;padding-inline-start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../padding-inline-end&quot;&gt;&lt;code&gt;padding-inline-end&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../padding-block-start&quot;&gt;&lt;code&gt;padding-block-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../padding-inline-end&quot;&gt;&lt;code&gt;padding-inline-end&lt;/code&gt;&lt;/a&gt; can be used instead of their physical counterparts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef5ebb91ef55b5e1dc6a67589cc3e58a49981cc" translate="yes" xml:space="preserve">
          <source>The mapped physical properties: &lt;a href=&quot;border-top&quot;&gt;&lt;code&gt;border-top&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-right&quot;&gt;&lt;code&gt;border-right&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom&quot;&gt;&lt;code&gt;border-bottom&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-left&quot;&gt;&lt;code&gt;border-left&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7623d5881cff6b03c57081cd46cdf10fbbf7dc1f" translate="yes" xml:space="preserve">
          <source>The mapped physical properties: &lt;a href=&quot;margin-top&quot;&gt;&lt;code&gt;margin-top&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;margin-right&quot;&gt;&lt;code&gt;margin-right&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;margin-bottom&quot;&gt;&lt;code&gt;margin-bottom&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;margin-left&quot;&gt;&lt;code&gt;margin-left&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc9d802982be2e3284588abd322594919f2583d" translate="yes" xml:space="preserve">
          <source>The mapped physical properties: &lt;a href=&quot;max-width&quot;&gt;&lt;code&gt;max-width&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;max-height&quot;&gt;&lt;code&gt;max-height&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d54a5c4b09a2e622c9e4dba9ad42532e2225da9" translate="yes" xml:space="preserve">
          <source>The mapped physical properties: &lt;a href=&quot;min-width&quot;&gt;&lt;code&gt;min-width&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;min-height&quot;&gt;&lt;code&gt;min-height&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611d1453053e53cc11c6f271ee96fb3d445ffb48" translate="yes" xml:space="preserve">
          <source>The mapped physical properties: &lt;a href=&quot;padding-top&quot;&gt;&lt;code&gt;padding-top&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;padding-right&quot;&gt;&lt;code&gt;padding-right&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;padding-bottom&quot;&gt;&lt;code&gt;padding-bottom&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;padding-left&quot;&gt;&lt;code&gt;padding-left&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee68a630e0891333a774dc9bd44f3e9323642ba1" translate="yes" xml:space="preserve">
          <source>The mapped physical properties: &lt;a href=&quot;top&quot;&gt;&lt;code&gt;top&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;right&quot;&gt;&lt;code&gt;right&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;bottom&quot;&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;left&quot;&gt;&lt;code&gt;left&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10cd16c4fc8a72d885d21cec8a69b48f903dc805" translate="yes" xml:space="preserve">
          <source>The mapped physical properties: &lt;a href=&quot;width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef905d833722a75dacdd6fe615e63f0dab4d8fc5" translate="yes" xml:space="preserve">
          <source>The margin lets you adjust the distance between the edges of the shape (the &lt;strong&gt;float element&lt;/strong&gt;) and the surrounding content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821257f23112633d233a7952215e67ddd0ee96cb" translate="yes" xml:space="preserve">
          <source>The margin size, a non-negative value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8b4aecc5c48c48621060cf5c844f02ccd50782" translate="yes" xml:space="preserve">
          <source>The margins of adjacent siblings are collapsed (except when the latter sibling needs to be &lt;a href=&quot;../clear&quot;&gt;cleared&lt;/a&gt; past floats).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f83433a528b892dcedc96d4ff5390c453cbce7a" translate="yes" xml:space="preserve">
          <source>The margins of adjacent siblings are collapsed (except when the latter sibling needs to be &lt;a href=&quot;clear&quot;&gt;cleared&lt;/a&gt; past floats).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb56dd37415ddf436ee6fbc570910ce1a1349288" translate="yes" xml:space="preserve">
          <source>The markup for my listing is an unordered list of items. Each item contains a heading, some text of varying height, and a call to action link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7a2f40a4f894ba312bba757010eed4fd793f08" translate="yes" xml:space="preserve">
          <source>The mask image renders at the specified size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baf90eedaa6039329a23d77309e08ed3468d8206" translate="yes" xml:space="preserve">
          <source>The maximum height, expressed as a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49dcba0b509b102a9f2ab567a4a4667f438af34f" translate="yes" xml:space="preserve">
          <source>The maximum height, expressed as a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; of the containing block's height. If the height of the containing block is not specified explicitly, the percentage value is treated as zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d7ff8d7dd80dd9ce366a46fc37ceb8b1875e38" translate="yes" xml:space="preserve">
          <source>The maximum value for the &lt;code&gt;scrollLeft&lt;/code&gt; property is equal to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth&quot;&gt;&lt;code&gt;Element.scrollWidth&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c68aae7149fc12f7b96cac97ed7e0fb5efbd5ff" translate="yes" xml:space="preserve">
          <source>The maximum value for the &lt;code&gt;scrollLeft&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36eb34fa16e679eff6940fb61160fc660f887f8" translate="yes" xml:space="preserve">
          <source>The maximum value for the &lt;code&gt;scrollTop&lt;/code&gt; property is equal to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight&quot;&gt;&lt;code&gt;Element.scrollHeight&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17922445b229a6ae6e83427ce80d7a83c12bf136" translate="yes" xml:space="preserve">
          <source>The maximum value for the &lt;code&gt;scrollTop&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9de1ff85eff7999973995d36cf8e01a68eff0d" translate="yes" xml:space="preserve">
          <source>The maximum value is the largest (most positive) expression value to which the value of the property will be assigned is the preferred value is greater than this upper bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6be9332e9385d89d740a43251c38ca4738e394f" translate="yes" xml:space="preserve">
          <source>The maximum width, expressed as a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddb19fd73361105959380a74ffc954c65102442" translate="yes" xml:space="preserve">
          <source>The maximum width, expressed as a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; of the containing block's width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0dbebd4b74a994468296cabeb13222cfd548b01" translate="yes" xml:space="preserve">
          <source>The maximum zoom factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef05338604f9feec9164a44a1ef5548eb3800555" translate="yes" xml:space="preserve">
          <source>The media object is a common pattern in web design &amp;mdash; this pattern has an image or other element to one side and text to the right. Ideally a media object should be able to be flipped &amp;mdash; moving the image from left to right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfc1d14c417531fc44d058f92d52aa35e7272083" translate="yes" xml:space="preserve">
          <source>The minimum height, expressed as a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;. Negative values make the declaration invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bac660e3c99da22d98009ee26ac17506fab8568" translate="yes" xml:space="preserve">
          <source>The minimum height, expressed as a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; of the containing block's height. Negative values make the declaration invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9448eabebe76b165c86b3a68f7eed52dc7c6b2fb" translate="yes" xml:space="preserve">
          <source>The minimum number of lines that can stay by themselves at the bottom of a fragment before a fragmentation break. The value must be positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ee364e956cee9fcc8969f6230c6e452afbb913" translate="yes" xml:space="preserve">
          <source>The minimum number of lines that can stay by themselves at the top of a new fragment after a fragmentation break. The value must be positive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332775f9d63c1d9000306aa1f0c62f231b414c13" translate="yes" xml:space="preserve">
          <source>The minimum size of the item will be taken into account while working out the actual amount of shrinkage that will happen, which means that flex-shrink has the potential to appear less consistent than flex-grow in behavior. We&amp;rsquo;ll therefore take a more detailed look at how this algorithm works in the article Controlling Ratios of items along the main axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5cb84d36df45b005a7f0ed010ec1440d3d3e4e7" translate="yes" xml:space="preserve">
          <source>The minimum value for the &lt;code&gt;scrollLeft&lt;/code&gt; property. If the value is negative, then &lt;code&gt;0&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667d9be128bb61b20ce46491c2b29240643b016a" translate="yes" xml:space="preserve">
          <source>The minimum value for the &lt;code&gt;scrollTop&lt;/code&gt; property. If the value is negative, then &lt;code&gt;0&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c75d645c0b1603474c1ac2bcc90e8f7cef5225a2" translate="yes" xml:space="preserve">
          <source>The minimum value is the smallest (most negative) value. This is the lower bound in the range of allowed values: if the will be if the preferred value is less than this value, this value will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde4527ad779a3a5c43e7d77d7846a9d81edb006" translate="yes" xml:space="preserve">
          <source>The minimum width, expressed as a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;. Negative values make the declaration invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7b1b82e117c66a75b90424fba0f813457b36c7" translate="yes" xml:space="preserve">
          <source>The minimum width, expressed as a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; of the containing block's width. Negative values make the declaration invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970619a5e79801087ff02401e2ab7f935893e2bb" translate="yes" xml:space="preserve">
          <source>The minimum zoom factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e98d51ced6de1d550a082a0b28bb161d4c0211" translate="yes" xml:space="preserve">
          <source>The model renders a box, in relation to the edge of its &lt;em&gt;containing block&lt;/em&gt;. Usually, a box establishes the containing block for its descendants. However, a box is not constrained by its containing block; when a box's layout goes outside the containing block, it is said to &lt;em&gt;overflow&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="182104a054c2dde02751a41bbc624d705f6aea4b" translate="yes" xml:space="preserve">
          <source>The module also defines logical properties and values for properties previously defined in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b31cdd40e78200030d3ec67672e4940ae9dba64" translate="yes" xml:space="preserve">
          <source>The most basic supports condition is a simple declaration (a property name followed by a value, separated by a colon). The declaration must be surrounded by parentheses. The following example returns true if the browser's &lt;a href=&quot;transform-origin&quot;&gt;&lt;code&gt;transform-origin&lt;/code&gt;&lt;/a&gt; property considers &lt;code&gt;5% 5%&lt;/code&gt; valid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6299c0a953c66a86e5edcd71f934315e7639c350" translate="yes" xml:space="preserve">
          <source>The most common case where an anonymous inline box is created, is when some text is found as a direct child of a block box creating an inline formatting context. In that case, this text is included in the largest possible anonymous inline box. Also, space content, which would be removed by the behavior set in the &lt;a href=&quot;white-space&quot;&gt;&lt;code&gt;white-space&lt;/code&gt;&lt;/a&gt; CSS property, does not generate anonymous inline boxes because they would end empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d02d85d7dad1db03f107f7b734dffa06fba35e1" translate="yes" xml:space="preserve">
          <source>The most common movie format since the 1960s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f11125e4d23994b06f2683827defac7bff8cbe" translate="yes" xml:space="preserve">
          <source>The most common usage is to disable all gestures on an element (and its non-scrollable descendants) that provides its own dragging and zooming behavior &amp;ndash; such as a map or game surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5767aba6e65d27cbcf78391335c246c6bef35e4e" translate="yes" xml:space="preserve">
          <source>The most obvious use of this is to put a class name only on certain custom element instances, and then include the relevant class selector as the function argument. You can't use this with a descendant selector expression to select only instances of the custom element that are inside a particular ancestor. That's the job of &lt;a href=&quot;:host-context()&quot;&gt;&lt;code&gt;:host-context()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df975e9c6ad4654a607a67e8b2c344bd5890fbaa" translate="yes" xml:space="preserve">
          <source>The most straightforward answer to this question is defined in the specifications themselves. Flexbox is a one-dimensional layout method whereas Grid Layout is a two-dimensional layout method. The example below has a flex layout. As already described in the Basic concepts article, flex items can be allowed to wrap but, once they do so, each line becomes a flex container of its own. When space is distributed flexbox does not look at the placement of items in other rows and tries to line things up with each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb9de4e7e29288a1c511e457504d2547289ad9c" translate="yes" xml:space="preserve">
          <source>The name of a font family. For example, &quot;Times&quot; and &quot;Helvetica&quot; are font families. Font family names containing whitespace should be quoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0436425cc8d2c947cda7cf08bfe7b7c29a44d8" translate="yes" xml:space="preserve">
          <source>The name of another counter style, specified as a &lt;a href=&quot;../custom-ident&quot;&gt;&lt;code&gt;&amp;lt;custom-ident&amp;gt;&lt;/code&gt;&lt;/a&gt;. If included, the counter will be spoken out in the form specified in that counter style, kind of like specifying the &lt;a href=&quot;fallback&quot;&gt;&lt;code&gt;fallback&lt;/code&gt;&lt;/a&gt; descriptor. If the specified style does not exist, &lt;code&gt;speak-as&lt;/code&gt; defaults to &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88cb36c931b4e2fd69560a79824d52909634ace0" translate="yes" xml:space="preserve">
          <source>The name of the axis you want to rotate the affected element around (&lt;code&gt;&quot;x&quot;&lt;/code&gt;, &quot;&lt;code&gt;y&lt;/code&gt;&quot;, or &quot;&lt;code&gt;z&quot;&lt;/code&gt;), plus an &lt;a href=&quot;angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; specifying the angle to rotate the element through. Equivalent to a &lt;code&gt;rotateX()&lt;/code&gt;/&lt;code&gt;rotateY()&lt;/code&gt;/&lt;code&gt;rotateZ()&lt;/code&gt; (3D rotation) function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a719bb829ba50d4de96bc7ba19ebc10030bb2891" translate="yes" xml:space="preserve">
          <source>The name of the counter to increment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ecb2c6687ac3d91c0d892103935046f7f386c80" translate="yes" xml:space="preserve">
          <source>The name of the counter to reset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14fa3bcb5994fa8c61bac4aed887074cacb979bb" translate="yes" xml:space="preserve">
          <source>The name of the region container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbc809acd0d3c3e7a5deec662dbb07420cc2711" translate="yes" xml:space="preserve">
          <source>The nearest &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/SVG&quot;&gt;SVG&lt;/a&gt; viewport is used as the reference box. If a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox&quot;&gt;viewBox&lt;/a&gt;&lt;/code&gt; attribute is specified for the SVG viewport creating element, the reference box is positioned at the origin of the coordinate system established by the &lt;code&gt;viewBox&lt;/code&gt; attribute, and the dimension of the reference box is set to the width and height values of the &lt;code&gt;viewBox&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af07d9cfcfdbe76e4d54f4cfb1487843ec38af0" translate="yes" xml:space="preserve">
          <source>The nearest zoomable parent element begins zooming when the user hits a zoom limit during page manipulation. No bounce effect is shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb4ec5b0a46f823dbd9eaa86af83398369b89015" translate="yes" xml:space="preserve">
          <source>The negation pseudo-class &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/:not&quot;&gt;&lt;code&gt;:not()&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;not&lt;/em&gt; considered a pseudo-class in the specificity calculation. But selectors placed into the negation pseudo-class count as normal selectors when determining the count of &lt;a href=&quot;#Selector_Types&quot;&gt;selector types&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cdb03febf6a10b996819720e920ff7a63e47dde" translate="yes" xml:space="preserve">
          <source>The next task is to actually add the keyframes to the page's CSS. The first thing to do is look to see if there's already a style sheet on the document; if so, we simply insert the keyframe description into that stylesheet; this is done in lines 13-15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95ddf30bd0ec6cbd09bd12d1805ef4ba68dabd8" translate="yes" xml:space="preserve">
          <source>The non-overlapping regions of source and destination are combined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58a25a1e96803d4a1a50d76530f347090f773b3" translate="yes" xml:space="preserve">
          <source>The non-standard &lt;code&gt;-moz-float-edge&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; property specifies whether the height and width properties of the element include the margin, border, or padding thickness.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e07b248a6b1850d0307f201e88922dff2a7c620" translate="yes" xml:space="preserve">
          <source>The non-standard &lt;strong&gt;&lt;dfn&gt;&lt;code&gt;zoom&lt;/code&gt;&lt;/dfn&gt;&lt;/strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; property can be used to control the magnification level of an element. &lt;a href=&quot;transform-function/scale&quot;&gt;&lt;code&gt;transform: scale()&lt;/code&gt;&lt;/a&gt; should be used instead of this property, if possible. However, unlike CSS Transforms, &lt;code&gt;zoom&lt;/code&gt; affects the layout size of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42299a2c337b98f613ffbd2ca397b19cef056ba8" translate="yes" xml:space="preserve">
          <source>The normal inter-word spacing, as defined by the current font and/or the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04b77b34ae43f02b36e9b7a2f00ae4a6098e43b" translate="yes" xml:space="preserve">
          <source>The normal letter spacing for the current font. Unlike a value of &lt;code&gt;0&lt;/code&gt;, this keyword allows the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/user_agent&quot;&gt;user agent&lt;/a&gt; to alter the space between characters in order to justify text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04549292d4d3cdfcac612497e2b1ded62abd28e" translate="yes" xml:space="preserve">
          <source>The number of columns is determined by other CSS properties, such as &lt;a href=&quot;column-width&quot;&gt;&lt;code&gt;column-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aef236f0a4225cb33d5fcdd18dec3aef95a30c3" translate="yes" xml:space="preserve">
          <source>The number of device pixels per CSS pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb55264b143ae0a61af7b007ed04cd490807db1" translate="yes" xml:space="preserve">
          <source>The number of spaces in a tab. Must be nonnegative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26e4fc01d6284b16b1ca606a02a6d90ff1b2fca" translate="yes" xml:space="preserve">
          <source>The number of times the animation is played. The value must be one of those available in &lt;a href=&quot;animation-iteration-count&quot;&gt;&lt;code&gt;animation-iteration-count&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f61665786a761e6296526d835d0e130675dde1a" translate="yes" xml:space="preserve">
          <source>The number of times the animation will repeat; this is &lt;code&gt;1&lt;/code&gt; by default. You may specify non-integer values to play part of an animation cycle: for example, &lt;code&gt;0.5&lt;/code&gt; will play half of the animation cycle. Negative values are invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad9590b03c11b635e6b4b66f2fe9d6983962054" translate="yes" xml:space="preserve">
          <source>The number specified should generally be the aspect ratio (ratio of x-height to font size) of the first choice &lt;a href=&quot;font-family&quot;&gt;&lt;code&gt;font-family&lt;/code&gt;&lt;/a&gt;. This means that the first-choice font, when available, will appear the same size in browsers, whether or not they support &lt;code&gt;font-size-adjust&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0aae26d6a69d83f8d4267d1d0b9c2f145a2631" translate="yes" xml:space="preserve">
          <source>The numerical value of the counter will be read out in the document language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ae17f07dca1234a75e6e0e164d8e7b2d700ab3" translate="yes" xml:space="preserve">
          <source>The numerical values &lt;code&gt;100&lt;/code&gt; to &lt;code&gt;900&lt;/code&gt; roughly correspond to the following common weight names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc603a26715f997318a535ea03bf96f7b3f47a8" translate="yes" xml:space="preserve">
          <source>The object bounding box is used as the reference box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c9bc821cc5a6f8302ea20deb303841511b7f53" translate="yes" xml:space="preserve">
          <source>The object is a keyboard shortcut.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7ed5d1284723729277174525688f3e5798e2fc" translate="yes" xml:space="preserve">
          <source>The object is not a keyboard shortcut.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="688460b65798c27952d79a05f8ed82d9a2f66cd2" translate="yes" xml:space="preserve">
          <source>The offset is determind by the user agent. This will generally be 0px, but a user agent is able to detect and do something else if a non-zero value is more appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8557cae3eacf84eb5be2736fd94da6629230794b" translate="yes" xml:space="preserve">
          <source>The offset of the given background image's horizontal edge from the corresponding background position layer's horizontal edge relative to its width. If no edge is given, it refers to the left edge by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6f544adff39e3232681e22beca46180413b20c9" translate="yes" xml:space="preserve">
          <source>The offset of the given background image's horizontal edge from the corresponding background position layer's horizontal edge. If no edge is given, it refers to the left edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e915551e2fed11862dc236a4181de8d57879d6e" translate="yes" xml:space="preserve">
          <source>The offset of the given background image's vertical edge from the corresponding background position layer's vertical edge relative to its height. If no edge is given, it refers to the top edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8ea0c7f6cb6dcfecdd609bbb667b5895bf911ed" translate="yes" xml:space="preserve">
          <source>The offset of the given background image's vertical edge from the corresponding background position layer's vertical edge. If no edge is given, it refers to the top edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d564830f599814bad01b7f5dbc132701cb83651" translate="yes" xml:space="preserve">
          <source>The one-value syntax is a shorthand for the full two-value syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28fc7ee93cc7442d4dc16bd1bfbca6b24b5baa01" translate="yes" xml:space="preserve">
          <source>The only other impact CSS can have on a replaced element is that there are properties which support controlling the positioning of the element's content within its box. See &lt;a href=&quot;#Controlling_object_position_within_the_content_box&quot;&gt;Controlling object position within the content box&lt;/a&gt; for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5b8f92bb28734d01b1add3d37f1713eccf0c08" translate="yes" xml:space="preserve">
          <source>The operands in the expression may be any &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; syntax value. You can use different units for each value in your expression, if you wish. You may also use parentheses to establish computation order when needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fb653b697bfd9da3056fd895eef9ea156cd095" translate="yes" xml:space="preserve">
          <source>The opposite of &lt;code&gt;groove&lt;/code&gt;: the outline looks as though it were extruded from the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1f7da5dba7465a47e6214c21b53d4cf163c5a5" translate="yes" xml:space="preserve">
          <source>The opposite of &lt;code&gt;inset&lt;/code&gt;: the outline makes the box look as though it were coming out of the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386457234ba5d2e926ea35b60943450f38b16d8c" translate="yes" xml:space="preserve">
          <source>The optional &lt;a href=&quot;border-radius&quot;&gt;&lt;code&gt;&amp;lt;border-radius&amp;gt;&lt;/code&gt;&lt;/a&gt; argument(s) define rounded corners for the inset rectangle using the border-radius shorthand syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1902b09ae7590a6c1fb5ea037f357071c6f6a521" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;&amp;lt;fill-rule&amp;gt;&lt;/code&gt; represents the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule&quot;&gt;filling rule&lt;/a&gt; used to determine the interior of the path. Possible values are &lt;code&gt;nonzero&lt;/code&gt; and &lt;code&gt;evenodd&lt;/code&gt;. Default value when omitted is &lt;code&gt;nonzero&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f70cc675e1b03c0a57b860b9597602b51b17ab" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;fill&lt;/code&gt; value, if used, can be placed anywhere in the declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536d0bf72c5964048f3edaead4c76e90f497ebca" translate="yes" xml:space="preserve">
          <source>The options include clipping, showing scrollbars, or displaying the content flowing out of its container into the surrounding area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2327e082569a2a1e7bafbee9f4c1edaa642e0ff0" translate="yes" xml:space="preserve">
          <source>The order of &lt;code&gt;grid-area&lt;/code&gt; values is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1076c12ffa460cf3ea00cdddf35858b7b0be14fe" translate="yes" xml:space="preserve">
          <source>The order of auto placed items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6ba23fc9d30b835f065b8f20f0d2764eb79c033" translate="yes" xml:space="preserve">
          <source>The order of values within each animation definition is important: the first value that can be parsed as a &lt;a href=&quot;time&quot;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt; is assigned to the &lt;a href=&quot;animation-duration&quot;&gt;&lt;code&gt;animation-duration&lt;/code&gt;&lt;/a&gt;, and the second one is assigned to &lt;a href=&quot;animation-delay&quot;&gt;&lt;code&gt;animation-delay&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bf53608a1d95b4834f782bf2a2d2460b284c73" translate="yes" xml:space="preserve">
          <source>The order property and accessibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4537b37a0f114aeb6f8f886603ec7df2c870ff5" translate="yes" xml:space="preserve">
          <source>The order within each animation definition is also important for distinguishing &lt;a href=&quot;animation-name&quot;&gt;&lt;code&gt;animation-name&lt;/code&gt;&lt;/a&gt; values from other keywords. When parsed, keywords that are valid for properties other than &lt;a href=&quot;animation-name&quot;&gt;&lt;code&gt;animation-name&lt;/code&gt;&lt;/a&gt;, and whose values were not found earlier in the shorthand, must be accepted for those properties rather than for &lt;a href=&quot;animation-name&quot;&gt;&lt;code&gt;animation-name&lt;/code&gt;&lt;/a&gt;. Furthermore, when serialized, default values of other properties must be output in at least the cases necessary to distinguish an &lt;a href=&quot;animation-name&quot;&gt;&lt;code&gt;animation-name&lt;/code&gt;&lt;/a&gt; that could be a value of another property, and may be output in additional cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5000fe04f455ca798b2c0531cae241f1321497e" translate="yes" xml:space="preserve">
          <source>The other border-bottom-related CSS properties: &lt;a href=&quot;border&quot;&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom&quot;&gt;&lt;code&gt;border-bottom&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom-style&quot;&gt;&lt;code&gt;border-bottom-style&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-bottom-color&quot;&gt;&lt;code&gt;border-bottom-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3708c7a520c98fd1ec13c4b6681d08d3162c103a" translate="yes" xml:space="preserve">
          <source>The other border-left-related CSS properties: &lt;a href=&quot;border&quot;&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-left&quot;&gt;&lt;code&gt;border-left&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-left-style&quot;&gt;&lt;code&gt;border-left-style&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-left-color&quot;&gt;&lt;code&gt;border-left-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f88ecc3ee869ac857be0a0103f78fa748ad27a" translate="yes" xml:space="preserve">
          <source>The other border-related CSS properties applying to the same border: &lt;a href=&quot;border-bottom-style&quot;&gt;&lt;code&gt;border-bottom-style&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;border-bottom-width&quot;&gt;&lt;code&gt;border-bottom-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db698d94f614c4417128790abf07f26921b75f2a" translate="yes" xml:space="preserve">
          <source>The other border-related CSS properties applying to the same border: &lt;a href=&quot;border-left-style&quot;&gt;&lt;code&gt;border-left-style&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;border-left-width&quot;&gt;&lt;code&gt;border-left-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b7dd0462a8410d8b90e82f6fd14597ed6e2b27" translate="yes" xml:space="preserve">
          <source>The other border-related CSS properties applying to the same border: &lt;a href=&quot;border-right-style&quot;&gt;&lt;code&gt;border-right-style&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;border-right-width&quot;&gt;&lt;code&gt;border-right-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb47004b477cf9fa8026330c61e29cc006cf67c" translate="yes" xml:space="preserve">
          <source>The other border-related CSS properties applying to the same border: &lt;a href=&quot;border-top-style&quot;&gt;&lt;code&gt;border-top-style&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;border-top-width&quot;&gt;&lt;code&gt;border-top-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f8c70c7334eea3f33dcc4d3568bee44072d753" translate="yes" xml:space="preserve">
          <source>The other border-right-related CSS properties: &lt;a href=&quot;border&quot;&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-right&quot;&gt;&lt;code&gt;border-right&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-right-style&quot;&gt;&lt;code&gt;border-right-style&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-right-color&quot;&gt;&lt;code&gt;border-right-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c05c217d4467a233b281f3f9e53b1df00d8010" translate="yes" xml:space="preserve">
          <source>The other border-top-related CSS properties: &lt;a href=&quot;border&quot;&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-top&quot;&gt;&lt;code&gt;border-top&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-top-style&quot;&gt;&lt;code&gt;border-top-style&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-top-color&quot;&gt;&lt;code&gt;border-top-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b30f1917d87dfece0cbba8adea133c8f1a0f0494" translate="yes" xml:space="preserve">
          <source>The other border-width-related CSS properties: &lt;a href=&quot;border-bottom-width&quot;&gt;&lt;code&gt;border-bottom-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-left-width&quot;&gt;&lt;code&gt;border-left-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-top-width&quot;&gt;&lt;code&gt;border-top-width&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-width&quot;&gt;&lt;code&gt;border-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15108c1f09fb3e87fb84105350e7a73f2d95a58" translate="yes" xml:space="preserve">
          <source>The other border-width-related CSS properties: &lt;a href=&quot;border-left-width&quot;&gt;&lt;code&gt;border-left-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-right-width&quot;&gt;&lt;code&gt;border-right-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom-width&quot;&gt;&lt;code&gt;border-bottom-width&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-width&quot;&gt;&lt;code&gt;border-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2d01f2dc1f649d7feab49617193b91e8fb43f19" translate="yes" xml:space="preserve">
          <source>The other border-width-related CSS properties: &lt;a href=&quot;border-left-width&quot;&gt;&lt;code&gt;border-left-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-right-width&quot;&gt;&lt;code&gt;border-right-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-top-width&quot;&gt;&lt;code&gt;border-top-width&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-width&quot;&gt;&lt;code&gt;border-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84137576a1bf61a60debb5b3f5c575701f00f433" translate="yes" xml:space="preserve">
          <source>The other border-width-related CSS properties: &lt;a href=&quot;border-top-width&quot;&gt;&lt;code&gt;border-top-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-right-width&quot;&gt;&lt;code&gt;border-right-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom-width&quot;&gt;&lt;code&gt;border-bottom-width&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-width&quot;&gt;&lt;code&gt;border-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ac6cd44b66e4452c5268264dfca28b28a564b8" translate="yes" xml:space="preserve">
          <source>The other bottom-border-related properties: &lt;a href=&quot;border-bottom&quot;&gt;&lt;code&gt;border-bottom&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom-color&quot;&gt;&lt;code&gt;border-bottom-color&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-bottom-width&quot;&gt;&lt;code&gt;border-bottom-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="678b6201b97f258e066ac2cc54c4588f81630a7f" translate="yes" xml:space="preserve">
          <source>The other bottom-border-related properties: &lt;a href=&quot;border-right&quot;&gt;&lt;code&gt;border-right&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-right-color&quot;&gt;&lt;code&gt;border-right-color&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-right-width&quot;&gt;&lt;code&gt;border-right-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a2bb83be7aa2de5442f935a548b2ed7b99ed084" translate="yes" xml:space="preserve">
          <source>The other corners follow a similar pattern:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5ce3ed36ec299f0c43c30b954aeecd8e5451c8" translate="yes" xml:space="preserve">
          <source>The other dimension's maximum length is specified using the &lt;a href=&quot;max-inline-size&quot;&gt;&lt;code&gt;max-inline-size&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4151e6da357e4911546f5a30f9863d09d4ba33f0" translate="yes" xml:space="preserve">
          <source>The other elements in the tree: its children and neighbors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24ed1704a25c68fb3ae4c84a5cf413d549c6303f" translate="yes" xml:space="preserve">
          <source>The other emphasis mark related properties: &lt;a href=&quot;text-emphasis-style&quot;&gt;&lt;code&gt;text-emphasis-style&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;text-emphasis&quot;&gt;&lt;code&gt;text-emphasis&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;text-emphasis-position&quot;&gt;&lt;code&gt;text-emphasis-position&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8415f30ca90c3b886c586cba739c99e2df5a4d12" translate="yes" xml:space="preserve">
          <source>The other left-border-related properties: &lt;a href=&quot;border-left&quot;&gt;&lt;code&gt;border-left&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-left-color&quot;&gt;&lt;code&gt;border-left-color&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-left-width&quot;&gt;&lt;code&gt;border-left-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7764e38f68a26820f35b49552c407eee6bb081" translate="yes" xml:space="preserve">
          <source>The other style-related border properties: &lt;a href=&quot;border-bottom-style&quot;&gt;&lt;code&gt;border-bottom-style&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-left-style&quot;&gt;&lt;code&gt;border-left-style&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-top-style&quot;&gt;&lt;code&gt;border-top-style&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-style&quot;&gt;&lt;code&gt;border-style&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1abc05eea936f6926fcff1ed7c3377ceb20c2b" translate="yes" xml:space="preserve">
          <source>The other style-related border properties: &lt;a href=&quot;border-bottom-style&quot;&gt;&lt;code&gt;border-bottom-style&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-right-style&quot;&gt;&lt;code&gt;border-right-style&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-top-style&quot;&gt;&lt;code&gt;border-top-style&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-style&quot;&gt;&lt;code&gt;border-style&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7f91543ed4f4200671991f501be65dda404632" translate="yes" xml:space="preserve">
          <source>The other style-related border properties: &lt;a href=&quot;border-left-style&quot;&gt;&lt;code&gt;border-left-style&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-right-style&quot;&gt;&lt;code&gt;border-right-style&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-bottom-style&quot;&gt;&lt;code&gt;border-bottom-style&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-style&quot;&gt;&lt;code&gt;border-style&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b1aee2a752340220dfb291e561cc5d0cb18092" translate="yes" xml:space="preserve">
          <source>The other style-related border properties: &lt;a href=&quot;border-left-style&quot;&gt;&lt;code&gt;border-left-style&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-right-style&quot;&gt;&lt;code&gt;border-right-style&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-top-style&quot;&gt;&lt;code&gt;border-top-style&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-style&quot;&gt;&lt;code&gt;border-style&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43fe9c4c69e0c656d7bdad6f9fc1c69f62444bea" translate="yes" xml:space="preserve">
          <source>The other top-border-related properties: &lt;a href=&quot;border-top&quot;&gt;&lt;code&gt;border-top&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;border-top-color&quot;&gt;&lt;code&gt;border-top-color&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;border-top-width&quot;&gt;&lt;code&gt;border-top-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52aad613889709ca1c11f15efb2e5950a65e36af" translate="yes" xml:space="preserve">
          <source>The other value for &lt;code&gt;column-fill&lt;/code&gt; is &lt;code&gt;auto&lt;/code&gt;. In this case, rather than filling all the columns equally so their heights are balanced, the columns are filled sequentially. In the example below we have changed &lt;code&gt;column-fill&lt;/code&gt; to &lt;code&gt;auto&lt;/code&gt; and the columns are now filled, in order, to the height of the multicol container, leaving some columns empty at the end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9fa7d275a39d48172745b4a34bc6476de9b1e0" translate="yes" xml:space="preserve">
          <source>The other value must be a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;, or one of the keywords &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, and &lt;code&gt;bottom&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da0964f390a25a6bb48b70a7d46aaa555fddfced" translate="yes" xml:space="preserve">
          <source>The other vertical-script related CSS properties: &lt;a href=&quot;writing-mode&quot;&gt;&lt;code&gt;writing-mode&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;text-combine-upright&quot;&gt;&lt;code&gt;text-combine-upright&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;unicode-bidi&quot;&gt;&lt;code&gt;unicode-bidi&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66ce18c40bfd180d069bdc75c94603bfb69f1c97" translate="yes" xml:space="preserve">
          <source>The outline is a series of dots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff5aac7b2754f04c8c925c83abef731cd9ef0a7" translate="yes" xml:space="preserve">
          <source>The outline is a series of short line segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c3c88abd8d4a5fdc18218876198b5a4d28ce74" translate="yes" xml:space="preserve">
          <source>The outline is a single line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d317ed81127491cf49daddc28b0867e43650a850" translate="yes" xml:space="preserve">
          <source>The outline is two single lines. The &lt;a href=&quot;outline-width&quot;&gt;&lt;code&gt;outline-width&lt;/code&gt;&lt;/a&gt; is the sum of the two lines and the space between them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4878c78282ce59515d3c8575611a5b71e35d8f2" translate="yes" xml:space="preserve">
          <source>The outline looks as though it were carved into the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85476c8262f037e87cb4669b6af58b2cd597b506" translate="yes" xml:space="preserve">
          <source>The outline makes the box look as though it were embedded in the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d1aa01f8be01f9c9da9b460efc6ee96efdd8956" translate="yes" xml:space="preserve">
          <source>The output device can support approximately the &lt;a href=&quot;https://en.wikipedia.org/wiki/SRGB&quot;&gt;sRGB&lt;/a&gt; gamut or more. This includes the vast majority of color displays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a5284512d9f22e13a2d5397db39dae2d50e570" translate="yes" xml:space="preserve">
          <source>The output device can support approximately the gamut specified by the &lt;a href=&quot;https://en.wikipedia.org/wiki/DCI-P3&quot;&gt;DCI P3 Color Space&lt;/a&gt; or more. The p3 gamut is larger than and includes the srgb gamut.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f61d6444f4bd2e8cc5a3c96543e94b1c4b89a9" translate="yes" xml:space="preserve">
          <source>The output device can support approximately the gamut specified by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rec._2020&quot;&gt;ITU-R Recommendation BT.2020 Color Space&lt;/a&gt; or more. The rec2020 gamut is larger than and includes the p3 gamut.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3c7f5bf7a6649a552f58131d2c997485ba737d" translate="yes" xml:space="preserve">
          <source>The output, when all is said and done, looks something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34508272f6de57d463a90e8c6318955f5005420" translate="yes" xml:space="preserve">
          <source>The overflow property is in reality a shorthand for the &lt;code&gt;&lt;a href=&quot;../overflow-x&quot;&gt;overflow-x&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../overflow-y&quot;&gt;overflow-y&lt;/a&gt;&lt;/code&gt; properties. If you specify only one value for overflow, this value is used for both axes. However, you can specify both values in which case the first is used for &lt;code&gt;overflow-x&lt;/code&gt; and therefore the horizontal direction, and the second for &lt;code&gt;overflow-y&lt;/code&gt; and the vertical direction. In the below example, I have only specified &lt;code&gt;overflow-y: scroll&lt;/code&gt; so we do not get the unwanted horizontal scrollbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eac346bdd3e70e19f8f3f7c66811a893d13d3f8" translate="yes" xml:space="preserve">
          <source>The page's HTML looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a8d5a9b2207463e32996ed493a7410941820d2" translate="yes" xml:space="preserve">
          <source>The painted content is clipped to the border box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa9234fbacd6d1aeb6d70b6ac0e063d6aafd4bd" translate="yes" xml:space="preserve">
          <source>The painted content is clipped to the content box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4e87b3aac72a7aa7d1f1d346abc858d1e8e48b8" translate="yes" xml:space="preserve">
          <source>The painted content is clipped to the margin box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311498747c6f497e332ddcc864eefd266f594e5a" translate="yes" xml:space="preserve">
          <source>The painted content is clipped to the object bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8632be014472c1414d3077598c3f0622bb2d44e" translate="yes" xml:space="preserve">
          <source>The painted content is clipped to the padding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f5fbee6741ea3a3f9ebe9afed0bd9edfafbbac" translate="yes" xml:space="preserve">
          <source>The painted content is clipped to the stroke bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20016798bcaf05369defc2c5197713abda3a8d9" translate="yes" xml:space="preserve">
          <source>The painted content is not clipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137403c012dcc36e24c878ffdc8c41dc89b874d5" translate="yes" xml:space="preserve">
          <source>The paragraph color will not be blue because invalid substitution is replaced by the initial value, not by the fallback. If you had written &lt;code&gt;color: 16px&lt;/code&gt; without any variable substitutes, then it was a syntax error. The previous declaration will then be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7427efd528b71a89d9b4c40dc1323271e53d9240" translate="yes" xml:space="preserve">
          <source>The parts of source that overlap the destination, replace the destination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a1b5979b26a5f26986c32c28e346ab35dfca8e" translate="yes" xml:space="preserve">
          <source>The parts of the 3D elements that are behind the user &amp;mdash; i.e. their z-axis coordinates are greater than the value of the &lt;code&gt;perspective&lt;/code&gt; CSS property &amp;mdash; are not drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb8705dc5c701cbc52a6b7becead918cb57cde5" translate="yes" xml:space="preserve">
          <source>The password reveal button is usually displayed at the edge of the password field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="996ca3b91d9da7d86010c3fe6dd0cec484d85441" translate="yes" xml:space="preserve">
          <source>The percentage is calculated with respect to the height of the generated box's containing block. If the height of the containing block is not specified explicitly (i.e., it depends on content height), and this element is not absolutely positioned, the percentage value is treated as &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e5ad8123d70b5a74ecb16ad4728db517f5ea2ef" translate="yes" xml:space="preserve">
          <source>The percentage is calculated with respect to the height of the generated box's containing block. If the height of the containing block is not specified explicitly (i.e., it depends on content height), and this element is not absolutely positioned, the percentage value is treated as &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9d417e48f44224065ff2cdc7853c0a022ab6d4" translate="yes" xml:space="preserve">
          <source>The percentage is calculated with respect to the height of the generated box's containing block. If the height of the containing block is not specified explicitly (i.e., it depends on content height), and this element is not absolutely positioned, the value computes to &lt;code&gt;auto&lt;/code&gt;. A percentage height on the root element is relative to the initial containing block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf01fcaf604db8e6400201a46513d97443123f94" translate="yes" xml:space="preserve">
          <source>The perspective distance used by &lt;code&gt;perspective()&lt;/code&gt; is specified by a &lt;a href=&quot;../length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; value, which represents the distance between the user and the z=0 plane. A positive value makes the element appear closer to the user, a negative value farther.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3951522d4e98db40463531f566f9be3e70dc8397" translate="yes" xml:space="preserve">
          <source>The physical values used with the &lt;a href=&quot;../float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../clear&quot;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt; properties are &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt; and &lt;code&gt;both&lt;/code&gt;. The Logical Properties specification defines the values &lt;code&gt;inline-start&lt;/code&gt; and &lt;code&gt;inline-end&lt;/code&gt; as mappings for &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d70ba07c95247587c0142088fdfcef9ef058cc4" translate="yes" xml:space="preserve">
          <source>The platform-dependent default cursor. Typically an arrow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef68cb9844a5ddd9091b339a31383b0d157ff5d" translate="yes" xml:space="preserve">
          <source>The popular tool &lt;em&gt;&lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Autoprefixer&lt;/a&gt;&lt;/em&gt; has been updated to support the &lt;code&gt;-ms-&lt;/code&gt; grid version. By default, grid prefixes are disabled, but you can enable it with &lt;code&gt;grid: true&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fcc74bb10f793a1d6dcaba17a792875a72ef794" translate="yes" xml:space="preserve">
          <source>The position argument defines the center of the ellipse. This defaults to center if omitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f585a1f10b7d5fe111a56538504ca71e7cec10f" translate="yes" xml:space="preserve">
          <source>The position is relative to the border box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107f949417554e642ae2e682ab4b739158af0188" translate="yes" xml:space="preserve">
          <source>The position is relative to the content box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5b03d76e9d20fe04063587d89d715c893722fa" translate="yes" xml:space="preserve">
          <source>The position is relative to the margin box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53caa33ceb6faaa66a229d46e8ed0c9196f313c" translate="yes" xml:space="preserve">
          <source>The position is relative to the object bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d52ebebf95672ddebbf3bbd2d0d6d6c6d0fd0fbf" translate="yes" xml:space="preserve">
          <source>The position is relative to the padding box. For single boxes &lt;code&gt;0 0&lt;/code&gt; is the upper left corner of the padding edge, &lt;code&gt;100% 100%&lt;/code&gt; is the lower right corner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c959118e273f6c4ab229704172096e2921d5dd38" translate="yes" xml:space="preserve">
          <source>The position is relative to the stroke bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27703bb663f7583d49ab7c3a6083353843c0f712" translate="yes" xml:space="preserve">
          <source>The position of the gradient line's starting point. If specified, it consists of the word &lt;code&gt;to&lt;/code&gt; and up to two keywords: one indicates the horizontal side (&lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt;), and the other the vertical side (&lt;code&gt;top&lt;/code&gt; or &lt;code&gt;bottom&lt;/code&gt;). The order of the side keywords does not matter. If unspecified, it defaults to &lt;code&gt;to bottom&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e9d1d7c362e999c6f38297d55e78a3ecd4b0b0" translate="yes" xml:space="preserve">
          <source>The position of the gradient, interpreted in the same way as &lt;a href=&quot;background-position&quot;&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;transform-origin&quot;&gt;&lt;code&gt;transform-origin&lt;/code&gt;&lt;/a&gt;. If unspecified, it defaults to &lt;code&gt;center&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a21fcf1f691b02a259a6ac77a808a6d2b049734f" translate="yes" xml:space="preserve">
          <source>The preferred position of emphasis marks depends on the language. In Japanese for example, the preferred position is over right. In Chinese, on the other hand, the preferred position is under right. The informative table below summarizes the preferred emphasis mark positions for Chinese, Mongolian and Japanese:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d10349f7e1c5dca1faccf7bf78a7acc03ae9aa2" translate="yes" xml:space="preserve">
          <source>The preferred value is the expression whose value will be used as long as the result is between the minimum and maximum values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1768a68f6a4d0a9c5389bdd18291ad7aca66a963" translate="yes" xml:space="preserve">
          <source>The prefixed property can be used with SVG and HTML with a slightly different syntax, which allows setting the non-standard &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-attachment&quot;&gt;&lt;code&gt;-webkit-mask-attachment&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0546efde0bbb2e09e1db7ba489c331ceeb1bc5" translate="yes" xml:space="preserve">
          <source>The prefixed versions will be maintained as an alias of the unprefixed ones, however you can always double up in the way that you would with vendor prefixes, adding the &lt;code&gt;grid-gap&lt;/code&gt; property and then the &lt;code&gt;gap&lt;/code&gt; property with the same values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e3dff7a0c6b3014f1e7db8eaa6eef7a571539d" translate="yes" xml:space="preserve">
          <source>The presence of the &lt;code&gt;inset&lt;/code&gt; keyword changes the shadow to one inside the frame (as if the content was depressed inside the box). Inset shadows are drawn inside the border (even transparent ones), above the background, but below content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc399b5c6471f000c620b853532717f0ac1d42a2" translate="yes" xml:space="preserve">
          <source>The primary input mechanism can conveniently hover over elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e2e6bb26f0b680495b8d0af9178d98d079483b" translate="yes" xml:space="preserve">
          <source>The primary input mechanism cannot hover at all or cannot conveniently hover (e.g., many mobile devices emulate hovering when the user performs an inconvenient long tap), or there is no primary pointing input mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf19c2d2e35c5a4bb228f6d1c608849901e385e3" translate="yes" xml:space="preserve">
          <source>The primary input mechanism does not include a pointing device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db307a93873c6dc028372491e6b014f613ca1b25" translate="yes" xml:space="preserve">
          <source>The primary input mechanism includes a pointing device of limited accuracy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16a0f77aad46710fe6e1920b914a90336b5cb42" translate="yes" xml:space="preserve">
          <source>The primary input mechanism includes an accurate pointing device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55197d2c281b4c7cb5854b04d688597dd0110ee" translate="yes" xml:space="preserve">
          <source>The principal block-level box contains descendant-generated boxes and generated content. It is also the box involved in the &lt;a href=&quot;positioning_scheme&quot;&gt;positioning scheme&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d628d0b1320c0fece36e3c9a6e6635912ac938af" translate="yes" xml:space="preserve">
          <source>The problem with using &lt;code&gt;overflow&lt;/code&gt; to create a new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c596d310f58501dc0a00f3d880812e9ffe82221" translate="yes" xml:space="preserve">
          <source>The process for identifying the containing block depends entirely on the value of the element's &lt;a href=&quot;position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; property:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a490d09d0b713f33b461ece27b7c7c4a3eae7d" translate="yes" xml:space="preserve">
          <source>The program is busy in the background, but the user can still interact with the interface (in contrast to &lt;code&gt;wait&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad4aac2066c4d79b41f7d7c273d1ea905d682f18" translate="yes" xml:space="preserve">
          <source>The program is busy, and the user can't interact with the interface (in contrast to &lt;code&gt;progress&lt;/code&gt;). Sometimes an image of an hourglass or a watch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6f476c2bdc1edd48eeb04def5a56cdb4cc905b" translate="yes" xml:space="preserve">
          <source>The properties &lt;code&gt;align-content&lt;/code&gt;, &lt;code&gt;align-self&lt;/code&gt;, &lt;code&gt;align-items&lt;/code&gt; and &lt;code&gt;justify-content&lt;/code&gt; initially appeared in the Flexbox specification, but are now defined in Box Alignment and the Flexbox spec refers to the Box Alignment Specification for up to date definitions. Additional alignment properties are also defined in Box Alignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef972c0d1cb36403e0179be89e5fcf0b4eae43f" translate="yes" xml:space="preserve">
          <source>The properties are applied to the entire set of cues as if they were a single unit. The only exception is that &lt;code&gt;background&lt;/code&gt; and its shorthand properties apply to each cue individually, to avoid creating boxes and obscuring unexpectedly large areas of the media.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46b4bf147fbd6745c0752666ec15dfd02df31383" translate="yes" xml:space="preserve">
          <source>The properties are usually expressed as the shorthand &lt;a href=&quot;../flex&quot;&gt;&lt;code&gt;flex&lt;/code&gt;&lt;/a&gt; property. The following code would set the &lt;code&gt;flex-grow&lt;/code&gt; property to &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;flex-shrink&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;flex-basis&lt;/code&gt; to &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9101e9ba4a996c5238615d6b2650337bcf16c6" translate="yes" xml:space="preserve">
          <source>The properties defined by the specification are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292cf9d7d0bc77b74f76710e91c69dce71ff7796" translate="yes" xml:space="preserve">
          <source>The properties we will look at in this guide are as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fa76c7d657b9ca5c0b15f30d45b38448649818" translate="yes" xml:space="preserve">
          <source>The property also resets the &lt;a href=&quot;../grid-gap&quot;&gt;&lt;code&gt;grid-gap&lt;/code&gt;&lt;/a&gt; property to &lt;code&gt;0&lt;/code&gt;, however you &lt;em&gt;cannot&lt;/em&gt; specify the gaps in this shorthand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44d3bf2f8c3a093b44b9fd0f7b5d6b335f08eb8" translate="yes" xml:space="preserve">
          <source>The property doesn't apply to block-level boxes, and to table cells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76aba00fac17ce79b3d3b0b09b72fc7b220be01d" translate="yes" xml:space="preserve">
          <source>The property doesn't apply to block-level boxes, or to table cells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191e9ed0bdbde9b83de72b92fd19b30fc527f482" translate="yes" xml:space="preserve">
          <source>The property is a &lt;a href=&quot;shorthand_properties&quot;&gt;shorthand&lt;/a&gt; that sets the following properties in a single declaration: &lt;a href=&quot;background-clip&quot;&gt;&lt;code&gt;background-clip&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;background-color&quot;&gt;&lt;code&gt;background-color&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;background-image&quot;&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;background-origin&quot;&gt;&lt;code&gt;background-origin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;background-position&quot;&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;background-repeat&quot;&gt;&lt;code&gt;background-repeat&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;background-size&quot;&gt;&lt;code&gt;background-size&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;background-attachment&quot;&gt;&lt;code&gt;background-attachment&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e691d3a53b2aadf447b8ccbe27f0914a4731cfaf" translate="yes" xml:space="preserve">
          <source>The property is now a shorthand property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8c5151e6f45b83c2b1365c465570d826e2225f" translate="yes" xml:space="preserve">
          <source>The property is referred to as the Explicit Grid Shorthand because it is setting those things that you control when you define an explicit grid, and not those which impact any implicit row or column tracks that might be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05e475ab34f8828e43c2d6d871a7393653fc457" translate="yes" xml:space="preserve">
          <source>The property is useful since the legibility of fonts, especially at small sizes, is determined more by the size of lowercase letters than by the size of capital letters. Legibility can become an issue when the first-choice &lt;a href=&quot;font-family&quot;&gt;&lt;code&gt;font-family&lt;/code&gt;&lt;/a&gt; is unavailable and its replacement has a significantly different aspect ratio (the ratio of the size of lowercase letters to the size of the font).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f6d9273b9237787bbf08bd901dc204a678568c" translate="yes" xml:space="preserve">
          <source>The property sets the base text direction of block-level elements and the direction of embeddings created by the &lt;a href=&quot;unicode-bidi&quot;&gt;&lt;code&gt;unicode-bidi&lt;/code&gt;&lt;/a&gt; property. It also sets the default alignment of text, block-level elements, and the direction that cells flow within a table row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f879376f3a749e76e3e42e84c6d0fcbc1f9c15ef" translate="yes" xml:space="preserve">
          <source>The property was originally a nonstandard and unprefixed Microsoft extension called &lt;code&gt;word-wrap&lt;/code&gt;, and was implemented by most browsers with the same name. It has since been renamed to &lt;code&gt;overflow-wrap&lt;/code&gt;, with &lt;code&gt;word-wrap&lt;/code&gt; being an alias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f07653d6358153cb020221a429bf7119851a74" translate="yes" xml:space="preserve">
          <source>The proximity of an element to other elements that are referenced in a given selector has no impact on specificity. The following style declaration ...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b717cb3ba1173d8d54144259d7098a721b17186" translate="yes" xml:space="preserve">
          <source>The pseudo-element is not generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9dcfe2ff5ea91496cb57cecf6dd36030252056" translate="yes" xml:space="preserve">
          <source>The pseudo-elements used by Gecko to style other parts of a range input:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5bea06859c36e3628119ec02a29b06eb0a74479" translate="yes" xml:space="preserve">
          <source>The pseudo-elements used by WebKit/Blink to style other parts of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress&quot;&gt;&lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt;&lt;/a&gt; element:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f21cefec52993360df2272f355727ffbdd97c44" translate="yes" xml:space="preserve">
          <source>The purpose of this descriptor is to allow the font resources to be segmented so that a browser only needs to download the font resource needed for the text content of a particular page. For example, a site with many localizations could provide separate font resources for English, Greek and Japanese. For users viewing the English version of a page, the font resources for Greek and Japanese fonts wouldn't need to be downloaded, saving bandwidth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f10734988089303f218ff6ad5b1ac487830fdde" translate="yes" xml:space="preserve">
          <source>The radius applies to the whole &lt;a href=&quot;background&quot;&gt;&lt;code&gt;background&lt;/code&gt;&lt;/a&gt;, even if the element has no border; the exact position of the clipping is defined by the &lt;a href=&quot;background-clip&quot;&gt;&lt;code&gt;background-clip&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ffd4d4cd865ef5b9d832edc0c7b313aa00c325" translate="yes" xml:space="preserve">
          <source>The radius of the blur, specified as a &lt;a href=&quot;../length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;. It defines the value of the standard deviation to the Gaussian function, i.e., how many pixels on the screen blend into each other; thus, a larger value will create more blur. A value of &lt;code&gt;0&lt;/code&gt; leaves the input unchanged. The lacuna value for interpolation is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92a07b8876217494bde9aa59b7bc7041d9125308" translate="yes" xml:space="preserve">
          <source>The range depends on the counter system:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e691ac121b44caa4dfbd70cff4f49cc2c6c8eb0f" translate="yes" xml:space="preserve">
          <source>The range of Unicode code points to be used from the font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64dc8ae59ce88dc64d624845ab08d79101fccfb4" translate="yes" xml:space="preserve">
          <source>The reason that the Box alignment properties remain detailed in the flexbox specification as well as being in box alignment is to ensure that completion of the flexbox spec is not held up by box alignment, which has to detail these methods for all layout types. There is a note in the flexbox spec stating that in the future, once it is completed, the definitions in Box Alignment Level 3 will supersede those of flexbox:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f67a020d21278e1a951301c0e00e603b8b14f029" translate="yes" xml:space="preserve">
          <source>The reason the items become the same height is that the initial value of &lt;code&gt;align-items&lt;/code&gt;, the property that controls alignment on the cross axis, is set to &lt;code&gt;stretch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f1d1e8e9bc45823f48f155e4ccf661521779a8" translate="yes" xml:space="preserve">
          <source>The reference box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43055cda0b797e8a7d1e632a9e4c991e34043acd" translate="yes" xml:space="preserve">
          <source>The related properties &lt;a href=&quot;text-emphasis-color&quot;&gt;&lt;code&gt;text-emphasis-color&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;text-emphasis&quot;&gt;&lt;code&gt;text-emphasis&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f618e33e3af68bd4096c275b158df2c859bc597" translate="yes" xml:space="preserve">
          <source>The relative change in hue of the input sample, specified as an &lt;a href=&quot;../angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt;. A value of &lt;code&gt;0deg&lt;/code&gt; leaves the input unchanged. A positive hue rotation increases the hue value, while a negative rotation decreases the hue value. The lacuna value for interpolation is &lt;code&gt;0&lt;/code&gt;. There is no minimum or maximum value; &lt;code&gt;hue-rotate(Ndeg)&lt;/code&gt; evaluates to &lt;code&gt;N&lt;/code&gt; modulo 360.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8182e924826dc96693f6bb2e7f7c43f77d0fc693" translate="yes" xml:space="preserve">
          <source>The rendered output looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c82200db255b6d5407aea6b82175ccbfd6770d" translate="yes" xml:space="preserve">
          <source>The rendered output would look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f010d491d20780ba3124f705c5f821d1941d7db9" translate="yes" xml:space="preserve">
          <source>The rendered size of the mask image is then computed as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53078b49cdd933bf7dc6f21777f694bb72a946c8" translate="yes" xml:space="preserve">
          <source>The repeat syntax can also take a track list, it doesn&amp;rsquo;t just need to be a single track size that is being repeated. The code below would create an eight track grid, with a narrower &lt;code&gt;1fr&lt;/code&gt; width column named &lt;code&gt;col1-start&lt;/code&gt; followed by a wider &lt;code&gt;3fr&lt;/code&gt; column named &lt;code&gt;col2-start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7911a4af3a727a3c87fe69dc144de376cfebd6" translate="yes" xml:space="preserve">
          <source>The replaced content is not resized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1cacc46cb56318ff99d5fe99e31e21a97ef8d3" translate="yes" xml:space="preserve">
          <source>The replaced content is scaled to maintain its aspect ratio while fitting within the element&amp;rsquo;s content box. The entire object is made to fill the box, while preserving its aspect ratio, so the object will be &lt;a href=&quot;https://en.wikipedia.org/wiki/Letterboxing_(filming)&quot;&gt;&quot;letterboxed&quot;&lt;/a&gt; if its aspect ratio does not match the aspect ratio of the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddccb712c3d387d3fd951349ffd7824379913b65" translate="yes" xml:space="preserve">
          <source>The replaced content is sized to fill the element&amp;rsquo;s content box. The entire object will completely fill the box. If the object's aspect ratio does not match the aspect ratio of its box, then the object will be stretched to fit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4509c3ae74f9f9a2e2f366587c9e91d30ddb5d3e" translate="yes" xml:space="preserve">
          <source>The replaced content is sized to maintain its aspect ratio while filling the element&amp;rsquo;s entire content box. If the object's aspect ratio does not match the aspect ratio of its box, then the object will be clipped to fit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d123c7452cd9bee5902652226c9a6e17728dec1" translate="yes" xml:space="preserve">
          <source>The requested action will not be carried out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f4f150ebffde9cc7b89b73adea86b943bf80f1" translate="yes" xml:space="preserve">
          <source>The required &amp;lt;string&amp;gt; is an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/SVG/Attribute/d&quot;&gt;SVG Path&lt;/a&gt; string encompassed in quotes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163326ca75ef4e4877fd05e7489373dbafc7e29a" translate="yes" xml:space="preserve">
          <source>The result is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062bb62c6de9585a3b4cb88a382b37d6d12171e4" translate="yes" xml:space="preserve">
          <source>The result is that if the control was valid when the user started interacting with it, the validity styling is changed only when the user shifts focus to another control. However, if the user is trying to correct a previously-flagged value, the control shows immediately when the value becomes valid. Required items are flagged as invalid only if the user changes them or attempts to submit an unchanged invalid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea8b64422870e469a12a0ef17c248b6dc78e945" translate="yes" xml:space="preserve">
          <source>The result is that if the control was valid when the user started interacting with it, the validity styling is changed only when the user shifts focus to another control. However, if the user is trying to correct a previously-flagged value, the control shows immediately when the value becomes valid. Required items have the pseudo-class applied only if the user changes them or attempts to submit an unchanged valid value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d8170d98950c22e6026933d7548298a3e52f98" translate="yes" xml:space="preserve">
          <source>The result is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6faacd46ba2798dfe6d96de925d3e8fb01c4350a" translate="yes" xml:space="preserve">
          <source>The result looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9c78b177234e113c2995c496cdb97b6c884a9a" translate="yes" xml:space="preserve">
          <source>The result of this is that your items will all line up in a row, using the size of the content as their size in the main axis. If there are more items than can fit in the container, they will not wrap but will instead overflow. If some items are taller than others, all items will stretch along the cross axis to fill its full size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3c3da7d7fe56669f3659f1637d58ce17ac2c0ab" translate="yes" xml:space="preserve">
          <source>The result, if your browser supports the property, with different value of &lt;code&gt;mask-type&lt;/code&gt; applied to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mask&quot;&gt;&lt;code&gt;&amp;lt;mask&amp;gt;&lt;/code&gt;&lt;/a&gt; element are these two different squares:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326bae74e7ccc4cd0c99a4363f6b7e8ac5fe657d" translate="yes" xml:space="preserve">
          <source>The resulting screen looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f1bbc4c523815bbabc8838367a328a21a3bc85c" translate="yes" xml:space="preserve">
          <source>The right edge, specified as an &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt;, of the sub-image within the specified image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1c3dc7c2895874a678b1c4cdbba9c3eb9d0a45" translate="yes" xml:space="preserve">
          <source>The right margin receives a share of the unused horizontal space, as determined mainly by the layout mode that is used. If the values of &lt;code&gt;margin-left&lt;/code&gt; and &lt;code&gt;margin-right&lt;/code&gt; are both &lt;code&gt;auto&lt;/code&gt;, the calculated space is evenly distributed. This table summarizes the different cases:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396c0450a3080501ccd5ae07a1786e5f82b260cc" translate="yes" xml:space="preserve">
          <source>The rounding can be a circle or an ellipse, or if one of the value is &lt;code&gt;0,&lt;/code&gt;no rounding is done and the corner is square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab47ec5ebae86cb9e667ae9e897d5d3e0fe676a" translate="yes" xml:space="preserve">
          <source>The rounding can be a circle or an ellipse, or if one of the value is &lt;code&gt;0&lt;/code&gt; no rounding is done and the corner is square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051d0aa134a279c00aaf79b5e38f86b46a5c107e" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;left&lt;/code&gt; if direction is left-to-right and &lt;code&gt;right&lt;/code&gt; if direction is right-to-left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2108e6c7ae1eb8caf4136aae4171c0ce182537" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;max-content.&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75ee35b28cfcad22eee872efe87dedc0c8a61bf" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;right&lt;/code&gt; if direction is left-to-right and &lt;code&gt;left&lt;/code&gt; if direction is right-to-left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9e455057c3b71775303c03e7ab78f5aa5485da" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;spaces&lt;/code&gt;, except that only leading spaces are skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97b3e1d13865da789d47aa6d1a19ce78d1bcf61" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;spaces&lt;/code&gt;, except that only trailing spaces are skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e5dba56f2ed8c3a6e643ebffe5c008f81c8604" translate="yes" xml:space="preserve">
          <source>The same as the specified value after clipping the &lt;a href=&quot;number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; to the range [0.0, 1.0].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135c8372692b314f4a51d53342a49501cff1cf0d" translate="yes" xml:space="preserve">
          <source>The same layout with CSS grids</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7451d5530035b0d239fe1355ec3fa40c7ec6cd5" translate="yes" xml:space="preserve">
          <source>The scaling algorithm is UA dependent. Since version 1.9 (Firefox 3.0), Gecko uses&lt;em&gt; bilinear &lt;/em&gt;resampling (high quality).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e3f92a9b83501576cb36c7fee2bd1e727f483b" translate="yes" xml:space="preserve">
          <source>The scroll arrows, located at each end of a scroll bar, are the square buttons containing the arrows that move the content on the screen in small increments, either up and down or left and right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f405dced2893e48d6852a4ede43c52d1ee9cf7" translate="yes" xml:space="preserve">
          <source>The scroll box is the rectagular box within a scroll bar that can be moved either up and down or left and right on a track to change the position of the content on the screen. The scroll arrows, located at each end of a scroll bar, are the square buttons containing the arrows that move the content on the screen in small increments &amp;mdash; either up and down or left and right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="822ce99a214421fc9d74eb198047df47a065026c" translate="yes" xml:space="preserve">
          <source>The scroll box is the rectangular box within a scroll bar that can be moved either up and down or left and right on a track to change the position of the content on the screen. The scroll arrows, located at each end of a scroll bar, are the square buttons containing the arrows that move the content on the screen in small increments &amp;mdash; either up and down or left and right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0451e9a7e0aa506849dfa9a99b74fa764e9c5d" translate="yes" xml:space="preserve">
          <source>The scroll box is the rectangular box within a scroll bar that can be moved either up and down or left and right on a track to change the position of the content on the screen. The scroll arrows, located at each end of a scroll bar, are the square buttons containing the arrows that move the content on the screen in small increments, either up and down or left and right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380a6176ee60e177e0a0a593986bbf9546a480e1" translate="yes" xml:space="preserve">
          <source>The scroll box is the square box within a scroll bar that can be moved either up and down or left and right on a track to change the position of the content on the screen. The scroll arrows, located at each end of a scroll bar, are the square buttons containing the arrows that move the content on the screen in small increments, either up and down or left and right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfe7d08d85d660af698a890a56b30a55f01ebb63" translate="yes" xml:space="preserve">
          <source>The scroll container does not define any snap points. Elements within the scroll container may still define snap points on behalf of the scroll container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36fccd51529f18af1fdf9059359f9b5725e74419" translate="yes" xml:space="preserve">
          <source>The scroll container must not &quot;pass over&quot; a possible snap position; and must snap to the first of the elements' snap positions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8086ad677b374c3ef62e53aeeb1070aa3a562622" translate="yes" xml:space="preserve">
          <source>The scroll container snaps to snap positions in both of its axes independently (potentially snapping to different elements in each axis).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80aa8df6fbbc5ac541672997891ff862bcdcae6b" translate="yes" xml:space="preserve">
          <source>The scroll container snaps to snap positions in its block axis only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ede82dfac11aa517740bad05e4bd6fba11bffd" translate="yes" xml:space="preserve">
          <source>The scroll container snaps to snap positions in its horizontal axis only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f065a70c84dc0ae60f6baef496fa93a5cf288a33" translate="yes" xml:space="preserve">
          <source>The scroll container snaps to snap positions in its inline axis only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6588ccd5825ebcf4d5f737651d4a8cebedc26a9a" translate="yes" xml:space="preserve">
          <source>The scroll container snaps to snap positions in its vertical axis only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe3a317a7deec4a27ca5390aa4c62566fea6d8b" translate="yes" xml:space="preserve">
          <source>The scroll-margin values represent outsets defining the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container&amp;rsquo;s coordinate space), then adding the specified outsets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5e7b59f66374060fb11f15c563c2156a6b96c5" translate="yes" xml:space="preserve">
          <source>The scroll-padding properties define offsets for the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb9a47243d7586e052933ff3b7d3ea124b3087f" translate="yes" xml:space="preserve">
          <source>The scroll-padding property is a shorthand property which sets all of the scroll-padding longhands, assigning values much like the padding property does for the padding-* longhands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e698243ddbcc00edb9e5a175de10ba51df6163a" translate="yes" xml:space="preserve">
          <source>The scrolling box scrolls in a smooth fashion using a user-agent-defined timing function over a user-agent-defined period of time. User agents should follow platform conventions, if any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838bfcd065a7615b9c846a252c171bbfdb8ac72a" translate="yes" xml:space="preserve">
          <source>The scrolling box scrolls instantly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa301e30f9021b86585683e5365d267fa044d822" translate="yes" xml:space="preserve">
          <source>The second (and final) keyframe occurs at 100% (using the alias &lt;code&gt;to&lt;/code&gt;). The left margin is set to 0% and the width of the element is set to 100%. This causes the header to finish its animation flush against the left edge of the content area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87e50f7d249174a06a17075b86279b3ff80e061" translate="yes" xml:space="preserve">
          <source>The second argument is a &lt;code&gt;position&lt;/code&gt;. If omitted this will be set to &lt;code&gt;center&lt;/code&gt;. However you can use any valid position here to indicate the position of the centre of the circle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="065b93e92b9bfb13092cf652e6115bdeca6864d8" translate="yes" xml:space="preserve">
          <source>The second basic supports condition is a supports function, the syntax for these is supported by all browsers, but the functions themselves are still being standardized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c012fb87f01b4669c9e0c80570e8aaa9ea12829d" translate="yes" xml:space="preserve">
          <source>The second element to configure is the position of the viewer, with the &lt;a href=&quot;../perspective-origin&quot;&gt;&lt;code&gt;perspective-origin&lt;/code&gt;&lt;/a&gt; property. By default the perspective is centered on the viewer, which is not always adequate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584bc799b53169ff8599cf4e7370dbacef4606e8" translate="yes" xml:space="preserve">
          <source>The second item starts on grid column line 1, and spans one track. This is the default so I do not need to specify the end line. It also spans two row tracks from row line 3 to row line 5. The other items will place themselves into empty spaces on the grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3b00d11cfd66fa7383b44ca6f6dbaae0ea792d" translate="yes" xml:space="preserve">
          <source>The second paragraph has a value of &lt;code&gt;max-content&lt;/code&gt; and so it does the opposite. It gets as big as it possibly can be, taking no soft-wrapping opportunities. It would overflow the box it is in if that container was too narrow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7d1bbcf16ab90d195fd960a54e3581a1e899a07" translate="yes" xml:space="preserve">
          <source>The second percentage specifies the distance between subsequent snap-points, both zoomed in and zoomed out from the initial snap-point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e882a031fa82ac77dc8810871689b95913be616a" translate="yes" xml:space="preserve">
          <source>The second reason is that flexbox prevents small items from shrinking to zero size during this removal of negative free space. The items will be floored at their &lt;code&gt;min-content&lt;/code&gt; size &amp;mdash; the size that they become if they take advantage of any soft wrapping opportunities available to them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a83bce771bc8cdc4e63b02de6fe75394bc68e61" translate="yes" xml:space="preserve">
          <source>The second rule sets links within an element with the class &lt;code&gt;my-class-1&lt;/code&gt; to inherit its color from its parent. In this case, it means that the link inherits its color from its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li&quot;&gt;&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;&lt;/a&gt; parent, which, by default inherits its color from its own &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul&quot;&gt;&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;&lt;/a&gt; parent, which ultimately inherits its color from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/a&gt; element, which had its &lt;a href=&quot;color&quot;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;green&lt;/code&gt; by the first rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa6ae7390eb851debd9f3ace7a61f10b07e3f54" translate="yes" xml:space="preserve">
          <source>The second two values reverse the items by switching the start and end lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16a19e4797dfcb1c282d8ac75734a86df538205" translate="yes" xml:space="preserve">
          <source>The second value specifies the distance between subsequent snap-points both above and below the initial snap-point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a40927eee90034b46bb3cd16be63238290b261ec" translate="yes" xml:space="preserve">
          <source>The second value specifies the distance between subsequent snap-points both to the left and the right of the initial snap-point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4850cdc60efacd1881b1d6f862f54af24c16c1ef" translate="yes" xml:space="preserve">
          <source>The shadow filter can be applied to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; object by setting the filter on the image's parent container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c13b7207b517369d56884f3c8287a53409aeb80" translate="yes" xml:space="preserve">
          <source>The shadow's blur radius, specified as a &lt;a href=&quot;../length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;. The larger the value, the larger and more blurred the shadow becomes. If unspecified, it defaults to &lt;code&gt;0&lt;/code&gt;, resulting in a sharp, unblurred edge. Negative values are not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e63720f9319b44599a65bd84da056f3410fb7ba9" translate="yes" xml:space="preserve">
          <source>The shadow's spread radius, specified as a &lt;a href=&quot;../length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;. Positive values will cause the shadow to expand and grow bigger, while negative values will cause the shadow to shrink. If unspecified, it defaults to &lt;code&gt;0&lt;/code&gt;, and the shadow will be the same size as the input image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e848615f3b91f63b5d5f6ed5b24b060ae5ed5d65" translate="yes" xml:space="preserve">
          <source>The shape is established here using &lt;a href=&quot;background-image&quot;&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt; with a linear gradient rather than an image file. The same gradient is also used as the image from which the shape is derived for establishing the float area, using the &lt;a href=&quot;shape-outside&quot;&gt;&lt;code&gt;shape-outside&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f9147350daa50a9943c0a655130c9a6ad57a6e" translate="yes" xml:space="preserve">
          <source>The shape is filled with solid color. If neither &lt;code&gt;filled&lt;/code&gt; nor &lt;code&gt;open&lt;/code&gt; is present, this is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e04f2d83fff3c5afd339df682eb963ea263fd20" translate="yes" xml:space="preserve">
          <source>The shape is hollow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896b94e0a4bc33f459c996cf714936cca3ae7c0a" translate="yes" xml:space="preserve">
          <source>The shape will be clipped by the margin box</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf9b9aeb38caeab1633a6d3849fa48d78a073156" translate="yes" xml:space="preserve">
          <source>The shorthand CSS syntax is written as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f9dfc000411647b712e9b1bfcfe650fd5a3f35d" translate="yes" xml:space="preserve">
          <source>The shorthand for the other dimension is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline&quot;&gt;&lt;code&gt;inset-inline&lt;/code&gt;&lt;/a&gt;, which is a shorthand for &lt;a href=&quot;inset-inline-start&quot;&gt;&lt;code&gt;inset-inline-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;inset-inline-end&quot;&gt;&lt;code&gt;inset-inline-end&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2bfdbfcf16d293e26995121a06ac12e3239d93" translate="yes" xml:space="preserve">
          <source>The shorthand for the other dimension is &lt;a href=&quot;inset-block&quot;&gt;&lt;code&gt;inset-block&lt;/code&gt;&lt;/a&gt;, which is a shorthand for &lt;a href=&quot;inset-block-start&quot;&gt;&lt;code&gt;inset-block-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;inset-block-end&quot;&gt;&lt;code&gt;inset-block-end&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea844a776da2b2fccdc687361b2cf9c43304f084" translate="yes" xml:space="preserve">
          <source>The shorthand property has been extended to support multiple backgrounds and the &lt;code&gt;local&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aa1373718450ce4c6feb24446d79868c8847cba" translate="yes" xml:space="preserve">
          <source>The shorthand property has been extended to support multiple backgrounds and the new &lt;a href=&quot;background-size&quot;&gt;&lt;code&gt;background-size&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;background-origin&quot;&gt;&lt;code&gt;background-origin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;background-clip&quot;&gt;&lt;code&gt;background-clip&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d92d37e5f0620ac748b20003242b9bdab66b61" translate="yes" xml:space="preserve">
          <source>The shorthand you often see in tutorials is &lt;code&gt;flex: 1&lt;/code&gt; or &lt;code&gt;flex: 2&lt;/code&gt; and so on. This is as if you used &lt;code&gt;flex: 1 1 0&lt;/code&gt;. The items can grow and shrink from a &lt;code&gt;flex-basis&lt;/code&gt; of 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="621c9e2b8b5c2f5e4287f7d43ad45744207f4071" translate="yes" xml:space="preserve">
          <source>The size and position of an element are often impacted by its &lt;strong&gt;containing block&lt;/strong&gt;. Most often, the containing block is the &lt;a href=&quot;css_box_model/introduction_to_the_css_box_model#content-area&quot;&gt;content area&lt;/a&gt; of an element's nearest &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements&quot;&gt;block-level&lt;/a&gt; ancestor, but this is not always the case. In this article, we examine the factors that determine an element's containing block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdc1d5eaa3eb9ff4f47a63d41019a91e34cbcbb" translate="yes" xml:space="preserve">
          <source>The size and position of an element are often impacted by its containing block. Percentage values that are applied to the &lt;a href=&quot;width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;padding&quot;&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;margin&quot;&gt;&lt;code&gt;margin&lt;/code&gt;&lt;/a&gt;, and offset properties of an absolutely positioned element (i.e., which has its &lt;a href=&quot;position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; set to &lt;code&gt;absolute&lt;/code&gt; or &lt;code&gt;fixed&lt;/code&gt;) are computed from the element's containing block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badf7b5c5dd34bdc2be0d289238c4c67271f34fe" translate="yes" xml:space="preserve">
          <source>The size of a &lt;code&gt;1em&lt;/code&gt; character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386fd0ea42d71a361f0666c5a34ec8313fedcc6d" translate="yes" xml:space="preserve">
          <source>The size of the border outset as a dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8adabce3310c0ff3394bc8c2c2f8251f9e0b2281" translate="yes" xml:space="preserve">
          <source>The size of the border outset as a multiple of the corresponding &lt;a href=&quot;border-width&quot;&gt;&lt;code&gt;border-width&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e35cc9dfcfd78150e3d2f1a3cba327d8dde8395" translate="yes" xml:space="preserve">
          <source>The size of the element's background positioning area</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba8fe5ad2cdff68cc650c9cdbf5dd512ea0e924" translate="yes" xml:space="preserve">
          <source>The size of the element's border image area</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed81bedc5fe0f82361d51aa5dbdf64720c4fc7a" translate="yes" xml:space="preserve">
          <source>The size of the emphasis symbol, like ruby symbols, is about 50% of the size of the font, and &lt;code&gt;text-emphasis&lt;/code&gt; may affect line height when the current leading is not enough for the marks.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
