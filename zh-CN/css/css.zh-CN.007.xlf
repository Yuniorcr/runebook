<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="css">
    <body>
      <group id="css">
        <trans-unit id="51650b01006ec4cb00adcf67d2bf1c66587722f0" translate="yes" xml:space="preserve">
          <source>If you change the value of &lt;code&gt;direction&lt;/code&gt; to &lt;code&gt;rtl&lt;/code&gt; you will see that the alignment stays to the right for the first block, but goes to the logical end on the left in the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7950c4636ae3036ed8be96f167874e48186b9f36" translate="yes" xml:space="preserve">
          <source>If you choose to hide the grippers, you should ensure that users have a mechanism for selecting text via touch. To find out how to do this using JavaScript, see the HTML5 Selection APIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909c42079ee52086f6ffc5d9ce41b9d6c30c5ac8" translate="yes" xml:space="preserve">
          <source>If you create a media feature query without specifying a value, the nested styles will be used as long as the feature's value is not zero (or &lt;code&gt;none&lt;/code&gt;, in Level 4). For example, this CSS will apply to any device with a color screen:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c586ba627127e48ddb546dd656f6a6f004cdae" translate="yes" xml:space="preserve">
          <source>If you do not want space added to the items, remember that you can deal with free space between or around items using the alignment properties described in the guide to aligning items in a flex container. The &lt;a href=&quot;../justify-content&quot;&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/a&gt; property will enable the distribution of free space between or around items. You can also use auto margins on flex items to absorb space and create gaps between items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27635f1644f20277605a74d571d2e091f1cfbfe" translate="yes" xml:space="preserve">
          <source>If you give an item relative positioning with &lt;code&gt;position: relative&lt;/code&gt; it remains in flow, however you are then able to use the offset values to push it around. The space that it would have been placed in normal flow is reserved however, as you can see in the example below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d308654cc13ec81ffc648327ff4f42859ed0408a" translate="yes" xml:space="preserve">
          <source>If you have a situation where your grid tracks use an area that is smaller than the grid container, then you can align the grid tracks themselves, inside that container. Once again, this operates on the block and inline axes, with &lt;a href=&quot;../align-content&quot;&gt;&lt;code&gt;align-content&lt;/code&gt;&lt;/a&gt; aligning tracks on the block axis, and &lt;a href=&quot;../justify-content&quot;&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/a&gt; performing alignment on the inline axis. The values for &lt;a href=&quot;../align-content&quot;&gt;&lt;code&gt;align-content&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../justify-content&quot;&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/a&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7220bcba6dd0f08492e3de1db28f6348f3e5aa4" translate="yes" xml:space="preserve">
          <source>If you have been working with one of the many frameworks or grid systems you may be accustomed to laying out your site on a 12- or 16-column flexible grid. We can create this type of system using CSS Grid Layout. As a simple example, I am creating a 12-column flexible grid that has 12 &lt;code&gt;1fr&lt;/code&gt;-unit column tracks, they all have a start line named &lt;code&gt;col-start&lt;/code&gt;. This means that we will have twelve grid lines named &lt;code&gt;col-start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f90ffc6ac7a29af114fd34610df8e7d396d57e3" translate="yes" xml:space="preserve">
          <source>If you have looked at the main page for &lt;a href=&quot;../css_logical_properties&quot;&gt;CSS Logical Properties and Values&lt;/a&gt; you will see there are a huge number of properties listed. This is mostly due to the fact that there are four longhand values each for margin, border, and padding side, plus all the shorthand values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19deb1f58c35c83d5eb1a4f6d091acf93925fc2" translate="yes" xml:space="preserve">
          <source>If you have read the article &lt;a href=&quot;basic_concepts_of_flexbox&quot;&gt;Basic Concepts of Flexbox&lt;/a&gt;, then you will have already had an introduction to the properties. Here we will explore them in depth in order that you can fully understand what the browser is doing when you use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0167d63366405ea20e755c29d443d2fc52131452" translate="yes" xml:space="preserve">
          <source>If you have set values using &lt;code&gt;font-variation-settings&lt;/code&gt; and want to change one of those values, you must redeclare all of them (in the same way as when you set OpenType font features using &lt;a href=&quot;../font-feature-settings&quot;&gt;&lt;code&gt;font-feature-settings&lt;/code&gt;&lt;/a&gt;). You can work around this limitation by using &lt;a href=&quot;../using_css_variables&quot;&gt;CSS Custom Properties&lt;/a&gt; (CSS variables) for the individual values, and simply modifying the value of an individual custom property. Example code follows at the end of the guide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51428f716ebd6feb998b5bfa2474bcdc37aecaba" translate="yes" xml:space="preserve">
          <source>If you have small amounts of content and are trying to control breaks in a number of ways or on several elements, your content needs to break somewhere, so you may not always get the result you intended. To some extent your use of fragmentation is always a suggestion to the browser, to control breaks in this way if it is possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba056748fc09ded2f2b43ea778fcf5283e4346e" translate="yes" xml:space="preserve">
          <source>If you have used a track list then you can use the &lt;code&gt;span&lt;/code&gt; keyword not just to span a number of lines but also to span a number of lines of a certain name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4262891b5183e6f2940d6049ba65261e27de03" translate="yes" xml:space="preserve">
          <source>If you have worked through these initial guides you now should be in a position to create grid layouts using line-based placement or named areas. Take some time to build some common layout patterns using grid, while there are lots of new terms to learn, the syntax is relatively straightforward. As you develop examples, you are likely to come up with some questions and use cases for things we haven't covered yet. In the rest of these guides we will be looking at some more of the detail included in the specification &amp;ndash; in order that you can begin to create advanced layouts with it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620bfecf59c7c19a753b4741ad208017dbd677a8" translate="yes" xml:space="preserve">
          <source>If you include an SVG file in your HTML, the viewport of the SVG is the initial containing block, or the width and height of the SVG container. Using the &lt;a href=&quot;../@media&quot;&gt;&lt;code&gt;@media&lt;/code&gt;&lt;/a&gt; query in your SVG's CSS is relative to that container, not the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94aecafdb4bbe1397c906187a3ab44f1fbd5e29" translate="yes" xml:space="preserve">
          <source>If you include an SVG file in your HTML, the viewport of the SVG is the initial containing block, or the width and height of the SVG container. Using the &lt;a href=&quot;@media&quot;&gt;&lt;code&gt;@media&lt;/code&gt;&lt;/a&gt; query in your SVG's CSS is relative to that container, not the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fcccf030208a1a6b73ec85b32a0b25dc3c72d36" translate="yes" xml:space="preserve">
          <source>If you initially learned &lt;a href=&quot;css_flexible_box_layout&quot;&gt;Flexbox&lt;/a&gt; then you may consider these properties to be part of the Flexbox specification, and some of the properties are indeed listed in Level 1 of Flexbox. However the specification notes that the Box Alignment specification should be referred to as it may add additional capabilities over what is currently in Flexbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d919716886427a7cd37e29fbf36785a827716aa0" translate="yes" xml:space="preserve">
          <source>If you need flex items to line up in the cross axis, controlling the width in this way will achieve that. In most cases however, adding widths to flex items in this way demonstrates that you would probably be better served by switching to grid layout for that component.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f30df759710f138eb167e2be95e65e4b33d1464" translate="yes" xml:space="preserve">
          <source>If you need to be aware of changes to the evaluated result of the query on an ongoing basis, it's more efficient to register a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt;listener&lt;/a&gt; than to poll the query's result. To do this, call the &lt;code&gt;addListener()&lt;/code&gt; method on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList&quot;&gt;&lt;code&gt;MediaQueryList&lt;/code&gt;&lt;/a&gt; object, with a callback function to invoke when the media query status changes (e.g., the media query test goes from &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb44beed0587d0e40f444e684a52550d5d120cbc" translate="yes" xml:space="preserve">
          <source>If you place something outside of the defined grid&amp;mdash;or due to the amount of content, more grid tracks are needed&amp;mdash;then the grid creates rows and columns in the implicit grid. These tracks will be auto-sized by default, resulting in their size being based on the content that is inside them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4b242f0254355775fcf501494e63caa680aa3e" translate="yes" xml:space="preserve">
          <source>If you reference an SVG image in a webpage (such as with the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element or as a background image), the SVG image can coordinate with the embedding element (its context) to have the image adopt property values set on the embedding element. To do this the embedding element needs to list the properties that are to be made available to the image by listing them as values of the &lt;code&gt;-moz-context-properties&lt;/code&gt; property, and the image needs to opt in to using those properties by using values such as the &lt;code&gt;context-fill&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="362d7332b148281bb9464c2db1104e609de16213" translate="yes" xml:space="preserve">
          <source>If you reorder things visually using grid layout, this will not change how the items are ordered if the content is being read out by a screen reader, or other text to speech user agent. In addition, the reordering will not change tab order. This means that someone navigating using the keyboard could be tabbing through links on your site and suddenly find themselves jumping from the top to the bottom of the document due to a reordered item being next in line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f896e5f162f27d90102abc9efa6aed12272b3ca5" translate="yes" xml:space="preserve">
          <source>If you repeating syntax puts two lines next to each other then they will be merged, and create the same result as giving a line multiple names in a non-repeating track definition. The following definition, creates four &lt;code&gt;1fr&lt;/code&gt; tracks, which each have a start and end line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71ca494cb021593fedfe11ffb405e44981ca7e3" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;justify-content: space-between&lt;/code&gt; on the flex container, the available space is now shared out and placed between the items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ee022a8e6cf9e1883f5b82befe6f8870eb7841" translate="yes" xml:space="preserve">
          <source>If you set an alignment that cannot be fulfilled, then the &lt;strong&gt;fallback alignment&lt;/strong&gt; will come into play and deal with the available space. This fallback alignment is specified individually for each layout method and detailed on the page for that method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f18c27c755e3d523b6ee9b1a4ff90851869085a" translate="yes" xml:space="preserve">
          <source>If you set an item to &lt;code&gt;display:&lt;/code&gt;&lt;code&gt;contents&lt;/code&gt; the box it would normally create disappears, and the boxes of the child elements appear as if they have risen up a level. This means that children of a grid item can become grid items. Sound odd? Here is a simple example. In the following markup, I have a grid and the first item on the grid is set to span all three column tracks. It contains three nested items. As these items are not direct children, they don&amp;rsquo;t become part of the grid layout and so display using regular block layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1734b5e8a050a443e0f3f0f43ac05d49beddde96" translate="yes" xml:space="preserve">
          <source>If you specify &lt;code&gt;unsafe&lt;/code&gt; then the alignment will be honoured even if it would cause such data loss.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06c4e879473c075c28f9e3f0c9abf2f4bb9d6c24" translate="yes" xml:space="preserve">
          <source>If you specify a shorthand property (e.g., &lt;a href=&quot;background&quot;&gt;&lt;code&gt;background&lt;/code&gt;&lt;/a&gt;), all of its longhand sub-properties that can be animated will be.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4236420af2128c4d71525e5e8fdc74a9fad4d5e3" translate="yes" xml:space="preserve">
          <source>If you specify both properties on a multicol container then &lt;code&gt;column-count&lt;/code&gt; will act as a maximum number of columns. Therefore the behaviour as described for column-width will happen, until the number of columns in column-count is reached. After this point no more columns will be drawn, and the extra space is distributed evenly between the existing columns, even if there is enough room for more columns of the specified &lt;code&gt;column-width&lt;/code&gt; size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a62d4555def9eca3ea87e5c8d641ffc4f847f8f8" translate="yes" xml:space="preserve">
          <source>If you take a look at this layout in the Firefox Grid Highlighter you can see how the column lines are shown, and how our items are placed against these lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d184e563a2c3cce3eabdc9416c4b5e097c88a8" translate="yes" xml:space="preserve">
          <source>If you then declare &lt;code&gt;display: flex&lt;/code&gt; on the parent item, these anonymous boxes do not get created and so your item remains a direct child and can become a flex item &amp;mdash; losing any of the table display features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec75b051cb19be16731cb26f2cc68e5ec3e051d9" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;background-size&quot;&gt;&lt;code&gt;background-size&lt;/code&gt;&lt;/a&gt; to specify fixed lengths for both dimensions, those lengths are always used, per rule 1 above. In other words, the image will always get stretched to the dimensions you specify, regardless of whether or not the source image has specified its dimensions and/or aspect ratio.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="833edff02410a8e60f2407f5ef6e0fe17b70d39d" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;display: table-cell&lt;/code&gt; on an item in your HTML it takes on the styling of an HTML table cell. CSS creates anonymous boxes to represent these items so that you do not need to wrap each item in a wrapper to represent the HTML table row, and a second one to represent the table element itself, You can&amp;rsquo;t see or style these anonymous boxes; they are there purely to fix up the tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e1d49d3a41e361f367a7b296779779c66acdd1f" translate="yes" xml:space="preserve">
          <source>If you use a &lt;code&gt;&amp;lt;gradient&amp;gt;&lt;/code&gt; as the background and specify a &lt;code&gt;background-size&lt;/code&gt; to go with it, it's best not to specify a size that uses a single &lt;code&gt;auto&lt;/code&gt; component, or is specified using only a width value (for example, &lt;code&gt;background-size: 50%&lt;/code&gt;). Rendering of &lt;code&gt;&amp;lt;gradient&amp;gt;&lt;/code&gt;s in such cases changed in Firefox 8, and at present is generally inconsistent across browsers, which do not all implement rendering in full accordance with &lt;a href=&quot;http://www.w3.org/TR/css3-background/#the-background-size&quot;&gt;the CSS3 &lt;code&gt;background-size&lt;/code&gt; specification&lt;/a&gt; and with &lt;a href=&quot;http://dev.w3.org/csswg/css3-images/#gradients&quot;&gt;the CSS3 Image Values gradient specification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c1254e4953c455f2e22d20b89360cbf034a487" translate="yes" xml:space="preserve">
          <source>If you use a sibling selector such as &lt;code&gt;:visited + span&lt;/code&gt;, the adjacent element (&lt;code&gt;span&lt;/code&gt; in this example) will be styled as if the link were unvisited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7705e01007c712d0718fd5a5cfcfea0eff4f90b" translate="yes" xml:space="preserve">
          <source>If you use absolute positioning within a grid area, then you will again be using physical offsets to push the item around inside the grid area. The key thing is to be aware of, is the tension between physical and logical properties and values. For example, be aware that you may need to make changes to your CSS to cope with a switch from &lt;code&gt;ltr&lt;/code&gt; to &lt;code&gt;rtl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f79f36687b2619f2268a7bb7e4ca5067d3f0c32b" translate="yes" xml:space="preserve">
          <source>If you use viewport length units in your CSS within the iframe document, &lt;code&gt;1vh&lt;/code&gt; will be 1% of the height of the iFrame, and &lt;code&gt;1vw&lt;/code&gt; will be 1% of the width of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2eb112d8d8e9ef904f4b9fabffa765c8ce5e700" translate="yes" xml:space="preserve">
          <source>If you want an image to size down to fit the column box, the standard responsive images solution of setting &lt;code&gt;max-width: 100%&lt;/code&gt; will achieve that for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4f3d49fb49e187857d47d69bc92342e6e6f39f" translate="yes" xml:space="preserve">
          <source>If you want apply multiple transformations to an element, be careful about the order in which you specify your transformations. For example, if you rotate before translating, the translation will be along the new axis of rotation!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad66834034e18104eb99fc256b509db3cd9b5ea4" translate="yes" xml:space="preserve">
          <source>If you want flexbox to completely ignore the size of the item when doing space distribution then set &lt;code&gt;flex-basis&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;. This essentially tells flexbox that all the space is up for grabs, and to share it out in proportion. We will see examples of this as we move on to look at &lt;code&gt;flex-grow&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6dcae105cc33d09ef8fc37775d86c9e8565a133" translate="yes" xml:space="preserve">
          <source>If you want layout in two dimensions then you probably want Grid Layout. We can compare our wrapped row example above with the CSS Grid version of that layout to see the difference. The following live sample uses CSS Grid Layout to create a layout that has as many columns of at least 160 pixels as will fit, distributing the extra space between all columns. However, in this case the items stay in their grid and don&amp;rsquo;t stretch out when there are fewer of them on the final row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7374ec4c88074a8de190a53ec1d58a11bc2781db" translate="yes" xml:space="preserve">
          <source>If you want more control over its direction, you can give the gradient a specific angle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6bd252161ade18f42e25d63694adf5bd32475d8" translate="yes" xml:space="preserve">
          <source>If you want to give all of the lines in your grid a unique name then you will need to write out the track definition long-hand rather than using the repeat syntax, as you need to add the name in square brackets while defining the tracks. If you do use the repeat syntax you will end up with multiple lines that have the same name, however this can be very useful too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51bc525cb7cbc5e8f3db33e53feb1a46aa3eddff" translate="yes" xml:space="preserve">
          <source>If you want to include very old browsers with flexbox support then you can include the vendor prefixes in your CSS in addition to the unprefixed version. This is becoming less and less of a requirement today as support is widespread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e96137836133a9434e33d8f661ba80198ca1e0" translate="yes" xml:space="preserve">
          <source>If you want to see how these work, with a right to left as well as top to bottom writing mode, switch &lt;code&gt;vertical-lr&lt;/code&gt; to &lt;code&gt;vertical-rl&lt;/code&gt;, which is a vertical writing mode running from right to left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1d1f9916116afe23573c30ab224c380aea9784" translate="yes" xml:space="preserve">
          <source>If you want to visually hide the element, a more accessible alternative is to use &lt;a href=&quot;https://gomakethings.com/hidden-content-for-better-a11y/#hiding-the-link&quot;&gt;a combination of properties&lt;/a&gt; to remove it visually from the screen but keep it parseable by assistive technology such as screen readers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120217b5cf4376406ba0ba55da68f08faa8653bd" translate="yes" xml:space="preserve">
          <source>If you were in a vertical writing mode then &lt;a href=&quot;../inline-size&quot;&gt;&lt;code&gt;inline-size&lt;/code&gt;&lt;/a&gt; would be mapped to &lt;a href=&quot;../height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2036a2790f2a9920f40f7406dbb206e1338065" translate="yes" xml:space="preserve">
          <source>If you were using a &lt;code&gt;horizontal-tb&lt;/code&gt; writing mode with a right-to-left text direction then &lt;a href=&quot;../margin-inline-start&quot;&gt;&lt;code&gt;margin-inline-start&lt;/code&gt;&lt;/a&gt; would be the same as &lt;a href=&quot;../margin-right&quot;&gt;&lt;code&gt;margin-right&lt;/code&gt;&lt;/a&gt;, and in a vertical writing mode it would be the same as using &lt;a href=&quot;../margin-top&quot;&gt;&lt;code&gt;margin-top&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0ad67d0b1a0f6524d2d9f81b12f95657c5c8e6" translate="yes" xml:space="preserve">
          <source>If you wish to prevent the stack from resizing automatically to accommodate its children, you can set &lt;code&gt;-moz-stack-sizing&lt;/code&gt; to &lt;code&gt;ignore&lt;/code&gt; on the child element. The property is set not on the stack itself, but on the stack's children. This lets you ignore certain children, but not others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="430efb59163ede887d6e02788eb2fbf02c27dabe" translate="yes" xml:space="preserve">
          <source>If you're more interested in following the Internet Explorer/Opera model, then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1da3cff9db238fd4ea5e9eed38a256926a92f3b" translate="yes" xml:space="preserve">
          <source>If your JavaScript is listening for scroll wheel Document Object Model (DOM) events, the events that occur when the user scrolls vertically will always be vertical scroll events, not horizontal scroll events. Similarly, the events that occur when the user scrolls horizontally will always be horizontal scroll events. This property enables you to change this behavior for vertical scroll events. By setting the &lt;code&gt;-ms-scroll-translation&lt;/code&gt; property to &lt;code&gt;vertical-to-horizontal&lt;/code&gt;, you are specifying that vertical scroll events should be interpreted as their corresponding horizontal scroll events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b3ddb65024de0974b79332af6b8dabe73e8fc29" translate="yes" xml:space="preserve">
          <source>If your browser does not yet support these keywords both paragraphs will be rendered as normal paragraphs in block flow; the below screenshots show the expected rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e64d8f958370adcf6a47e827db1033dd119b17" translate="yes" xml:space="preserve">
          <source>If your browser supports it, the above example will render a list like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d83833c2c17204ee604e3f88956a109af17a270" translate="yes" xml:space="preserve">
          <source>If your item is instead auto-sized, then &lt;code&gt;auto&lt;/code&gt; resolves to the size of its content. At this point your knowledge of &lt;code&gt;min-&lt;/code&gt; and &lt;code&gt;max-content&lt;/code&gt; sizing becomes useful, as flexbox will take the &lt;code&gt;max-content&lt;/code&gt; size of the item as the &lt;code&gt;flex-basis&lt;/code&gt;. The following live example can help to demonstrate this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b26a4d706516ec3a369c510b80c8c6a2ca24150" translate="yes" xml:space="preserve">
          <source>If your items were links or some other element that the user could tab to, then the tabbing order would be the order that these items appear in the document source &amp;mdash; not your visual order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d681257b6bf1444bfc7cc882b415d5ef34b71c7e" translate="yes" xml:space="preserve">
          <source>If your main axis is &lt;code&gt;column&lt;/code&gt; or &lt;code&gt;column-reverse&lt;/code&gt; then the cross axis runs along the rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a658b405f5671c6c941cfbc9079ef323d90be54" translate="yes" xml:space="preserve">
          <source>Ignore &lt;code&gt;!important&lt;/code&gt; declarations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6146030e455e4f055e4c78cf998f145ddd4ce458" translate="yes" xml:space="preserve">
          <source>Illustrated description of the 1-to-4-value syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df33417ca4673ec00c912326634d1b5271f3e711" translate="yes" xml:space="preserve">
          <source>Illustration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f43afcaa6bb04be469a0fc09d4b90c270ca2f7" translate="yes" xml:space="preserve">
          <source>Image combined with text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6081c354449ae71a72ab350483b8c4630f71f2c" translate="yes" xml:space="preserve">
          <source>Image gallery</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337a7827990a4e72f47079b050a082c3a0599aec" translate="yes" xml:space="preserve">
          <source>Image reference to use for the border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3b3065a2df42e1f5c530cfcf7e7f4a68a90119" translate="yes" xml:space="preserve">
          <source>Image reference to use for the mask border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae89c7f31fe68afd0052be4204a1384141e4bde" translate="yes" xml:space="preserve">
          <source>Image types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fd660279df3199785c259f28542d3e12b02c341" translate="yes" xml:space="preserve">
          <source>Image-related data types: &lt;a href=&quot;image&quot;&gt;&lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;gradient&quot;&gt;&lt;code&gt;&amp;lt;gradient&amp;gt;&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c80169f2acd92562e3c959ee46303fbe32fc19" translate="yes" xml:space="preserve">
          <source>Image-related functions: &lt;a href=&quot;linear-gradient&quot;&gt;&lt;code&gt;linear-gradient()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;radial-gradient&quot;&gt;&lt;code&gt;radial-gradient()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;repeating-linear-gradient&quot;&gt;&lt;code&gt;repeating-linear-gradient()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;repeating-radial-gradient&quot;&gt;&lt;code&gt;repeating-radial-gradient()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;element()&quot;&gt;&lt;code&gt;element()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0642b3a749073fb598afe8da6e135e0022eb08f1" translate="yes" xml:space="preserve">
          <source>Images and element attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b389912ce30ed8eb43619c4a37fb692a39489fc" translate="yes" xml:space="preserve">
          <source>Images with &lt;em&gt;intrinsic dimensions&lt;/em&gt; (a natural size), like a JPEG, PNG, or other &lt;a href=&quot;https://en.wikipedia.org/wiki/Raster_graphics&quot;&gt;raster format&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3b40f82c43b451955388227907a1edcac57cc7" translate="yes" xml:space="preserve">
          <source>Images with &lt;em&gt;multiple intrinsic dimensions&lt;/em&gt;, existing in multiple versions inside a single file, like some .ico formats. (In this case, the intrinsic dimensions will be those of the image largest in area and the aspect ratio most similar to the containing box.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b628a0fc6a9e1d5f41120b2738a5653b7deb729" translate="yes" xml:space="preserve">
          <source>Images with &lt;em&gt;neither intrinsic dimensions, nor an intrinsic aspect ratio&lt;/em&gt;, like a CSS gradient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318d36ae9d6c6f3bdb09df6cf228159edecb4f33" translate="yes" xml:space="preserve">
          <source>Images with no intrinsic dimensions but with &lt;em&gt;an intrinsic aspect ratio&lt;/em&gt; between its width and height, like an SVG or other &lt;a href=&quot;https://en.wikipedia.org/wiki/Vector_graphics&quot;&gt;vector format&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc0d8927166935729f6df6dd954ee54f0823464" translate="yes" xml:space="preserve">
          <source>Impact on web developers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8781d615fd77be9578225c40ac67b9471394cced" translate="yes" xml:space="preserve">
          <source>Implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd452896133ede07f5d2b54fbbd4b9ddbf60e79" translate="yes" xml:space="preserve">
          <source>Implemented as an alias for for &lt;code&gt;-moz-device-pixel-ratio&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ce8a5e137482a85a63821cf4d7b571e107a6cf" translate="yes" xml:space="preserve">
          <source>Implemented as an alias for for &lt;code&gt;max--moz-device-pixel-ratio&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2485819e9ed84579ef93185e81188295006724" translate="yes" xml:space="preserve">
          <source>Implemented as an alias for for &lt;code&gt;min--moz-device-pixel-ratio&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fbc556882f0619a55468eaf42a495204f22c5ab" translate="yes" xml:space="preserve">
          <source>Implementing image sprites in CSS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f17a523b4dd09629200c63379446725b6055c380" translate="yes" xml:space="preserve">
          <source>Implicit Grid lines from named areas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b457abbb70d22bd366275d756b949a40abbaf05" translate="yes" xml:space="preserve">
          <source>Implicit definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a353686c0928b9da20ee92b711e6c7c094262668" translate="yes" xml:space="preserve">
          <source>Implicit definition; allows 4-digit Unicode escaped characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020a0c6286d1962f2d8dc812e47646bdd6953b21" translate="yes" xml:space="preserve">
          <source>Implicit grid areas from named lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0458df90581813377e1da5ffc07d541fc076bda" translate="yes" xml:space="preserve">
          <source>Importance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d17215dd64f3f9eb2f23ecdcae867aae8dd6e2" translate="yes" xml:space="preserve">
          <source>Important concepts when working on the main axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9e30a1df312f79a3ffc42ad747144f0d0d1a46" translate="yes" xml:space="preserve">
          <source>Important methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f3f86753c3eda01d7cab7c5988a1122724f0558" translate="yes" xml:space="preserve">
          <source>Importantly, certain characters which would otherwise be invalid can be escaped with a backslash. These include double quotes when used inside a double-quoted string, single quotes when used inside a single-quoted string, and the backslash itself. For example, &lt;code&gt;\\&lt;/code&gt; will create a single backslash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="601ff8a1e99540ac9f69386c607e351d4a820ed6" translate="yes" xml:space="preserve">
          <source>Improving compatibility with older browsers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb37490f4b4422ce977d65884e5b68ed897c4149" translate="yes" xml:space="preserve">
          <source>In 3D space, rotations have three degrees of liberty, which together describe a single axis of rotation. The axis of rotation is defined by an [x, y, z] vector and pass by the origin (as defined by the &lt;a href=&quot;../transform-origin&quot;&gt;&lt;code&gt;transform-origin&lt;/code&gt;&lt;/a&gt; property). If, as specified, the vector is not &lt;em&gt;normalized&lt;/em&gt; (i.e., if the sum of the square of its three coordinates is not 1), the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/user_agent&quot;&gt;user agent&lt;/a&gt; will normalize it internally. A non-normalizable vector, such as the null vector, [0, 0, 0], will cause the rotation to be ignored, but without invaliding the whole CSS property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877dffe68dcc6507b642b1fa95f86bb786ef2a0b" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/HTML5&quot;&gt;HTML5&lt;/a&gt;, known &lt;a href=&quot;https://html.spec.whatwg.org/#foreign-elements&quot;&gt;foreign elements&lt;/a&gt; will be automatically be assigned namespaces. This means that HTML elements will act as though they are in the XHTML namespace (&lt;code&gt;http://www.w3.org/1999/xhtml&lt;/code&gt;), even if there is no &lt;code&gt;xmlns&lt;/code&gt; attribute anywhere in the document, and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg&quot;&gt;&amp;lt;svg&amp;gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/MathML/Element/math&quot;&gt;&amp;lt;math&amp;gt;&lt;/a&gt; elements will be assigned their proper namespaces (&lt;code&gt;http://www.w3.org/2000/svg&lt;/code&gt; and &lt;code&gt;http://www.w3.org/1998/Math/MathML&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d354c41279b3de6edd6d07f8b2737b1c342403b4" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt;, a &lt;strong&gt;replaced element&lt;/strong&gt; is an element whose representation is outside the scope of CSS; they're external objects whose representation is independent of the CSS formatting model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e458a1ba637c9e2db7410d5056b350ac1f05fe" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt;, use the &lt;a href=&quot;@media&quot;&gt;&lt;code&gt;@media&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;at-rule&quot;&gt;at-rule&lt;/a&gt; to conditionally apply part of a style sheet based on the result of a media query. Use &lt;a href=&quot;@import&quot;&gt;&lt;code&gt;@import&lt;/code&gt;&lt;/a&gt; to conditionally apply an entire style sheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace2ab649cc86e828e2596313a3f73a6f2bb59b0" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML&quot;&gt;HTML&lt;/a&gt;, media queries can be applied to various elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33862ea9ca59e279f7b5c197f1ebab5545aefb3" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScript&lt;/a&gt;, you can use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia&quot;&gt;&lt;code&gt;Window.matchMedia()&lt;/code&gt;&lt;/a&gt; method to test the window against a media query. You can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener&quot;&gt;&lt;code&gt;MediaQueryList.addListener()&lt;/code&gt;&lt;/a&gt; to be notified whenever the state of a query changes. With this functionality, your site or app can respond to changes in the device configuration, orientation, or state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79dfb5b11044ebd5b2e61a6f525d822d084edb50" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;relative&lt;/em&gt;&lt;em&gt; positioning&lt;/em&gt;, triggered by the value &lt;code&gt;relative&lt;/code&gt; of the &lt;a href=&quot;position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; property, the boxes are drawn with an offset defined by the &lt;a href=&quot;top&quot;&gt;&lt;code&gt;top&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;bottom&quot;&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;left&quot;&gt;&lt;code&gt;left&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;right&quot;&gt;&lt;code&gt;right&lt;/code&gt;&lt;/a&gt; CSS properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a159af38771ca727aacf9a2b03d4e58148d6f332" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;static positioning&lt;/em&gt;, triggered by the value &lt;code&gt;static&lt;/code&gt; of the &lt;a href=&quot;position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; property, the boxes are drawn at the exact position defined by the normal flow layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed2f9ee98a29addc81c6dd7441b38e2d5ff6251" translate="yes" xml:space="preserve">
          <source>In CSS (and most computer graphics), the origin &lt;code&gt;(0, 0)&lt;/code&gt; represents the&lt;em&gt; top-left&lt;/em&gt; corner of any element. Positive coordinates are down and to the right of the origin, while negative ones are up and to the left. Thus, a point that's 2 units to the right and 5 units down would be &lt;code&gt;(2, 5)&lt;/code&gt;, while a point 3 units to the left and 12 units up would be &lt;code&gt;(-3, -12)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbfbaf9da20d5a865aa32662977ce2d948cb07e0" translate="yes" xml:space="preserve">
          <source>In CSS Level 1, the &lt;code&gt;url()&lt;/code&gt; functional notation described only true URLs. In CSS Level 2, the definition of &lt;code&gt;url()&lt;/code&gt; was extended to describe any URI, whether a URL or a URN. Confusingly, this meant that &lt;code&gt;url()&lt;/code&gt; could be used to create a &lt;code&gt;&amp;lt;uri&amp;gt;&lt;/code&gt; CSS data type. This change was not only awkward but, debatably, unnecessary, since URNs are almost never used in actual CSS. To alleviate the confusion, CSS Level 3 returned to the narrower, initial definition. Now, &lt;code&gt;url()&lt;/code&gt; denotes only true &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a607ebd720cd31c70488065832f556e502e0fc3b" translate="yes" xml:space="preserve">
          <source>In CSS, &lt;code&gt;::after&lt;/code&gt; creates a &lt;a href=&quot;pseudo-elements&quot;&gt;pseudo-element&lt;/a&gt; that is the last child of the selected element. It is often used to add cosmetic content to an element with the &lt;a href=&quot;content&quot;&gt;&lt;code&gt;content&lt;/code&gt;&lt;/a&gt; property. It is inline by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fcfc3b2e2fd2b79a1fa2bab5b9edda0ddeaa0e5" translate="yes" xml:space="preserve">
          <source>In CSS, &lt;code&gt;::before&lt;/code&gt; creates a &lt;a href=&quot;pseudo-elements&quot;&gt;pseudo-element&lt;/a&gt; that is the first child of the selected element. It is often used to add cosmetic content to an element with the &lt;a href=&quot;content&quot;&gt;&lt;code&gt;content&lt;/code&gt;&lt;/a&gt; property. It is inline by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae016ebad623cdbec22bff6c82a3be0856f26d16" translate="yes" xml:space="preserve">
          <source>In CSS, &lt;strong&gt;inheritance&lt;/strong&gt; controls what happens when no value is specified for a property on an element. Refer to &lt;a href=&quot;css_reference&quot;&gt;any CSS property&lt;/a&gt; definition to see whether a specific property inherits by default (&quot;Inherited: yes&quot;) or not (&quot;Inherited: no&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ed53b26132a6967b2fd714950219706ef064b19" translate="yes" xml:space="preserve">
          <source>In CSS, a few characters can appear on their own, like the slash ('&lt;code&gt;/&lt;/code&gt;') or the comma ('&lt;code&gt;,&lt;/code&gt;'), and are used in a property definition to separate its parts. The comma is often used to separate values in enumerations, or parameters in mathematical-like functions; the slash often separates parts of the value that are semantically different, but have a common syntax. Typically, the slash is used in shorthand properties; to separate component that are of the same type, but belong to different properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d7c377f282ca0a689ac7cc269be132249dde56" translate="yes" xml:space="preserve">
          <source>In CSS, both italic and oblique are applied to text using the &lt;a href=&quot;../font-style&quot;&gt;&lt;code&gt;font-style&lt;/code&gt;&lt;/a&gt; property. Also note the introduction of &lt;code&gt;font-synthesis: none;&lt;/code&gt;&amp;mdash;which will prevent browsers from accidentally applying the variation axis and a synthesized italic. This can be used to prevent faux-bolding as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b641c883f19c4d7adacdb79e5b565585622a0a" translate="yes" xml:space="preserve">
          <source>In CSS, gradients aren't colors but &lt;a href=&quot;css_images&quot;&gt;images&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="056cb3fc41f3fd2367ebd0ff2f83d24d3a80a2ab" translate="yes" xml:space="preserve">
          <source>In Chrome 18 to 19, the &lt;code&gt;saturate()&lt;/code&gt; function only takes integers instead of decimal or percentage values. From Chrome 20, this bug is fixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5402a15f1a5cd605fed8afa476d2d53327f32d" translate="yes" xml:space="preserve">
          <source>In Dutch (&lt;code&gt;nl&lt;/code&gt;), the &lt;code&gt;ij&lt;/code&gt; digraph becomes &lt;code&gt;IJ&lt;/code&gt;, even with &lt;code&gt;text-transform: capitalize&lt;/code&gt;, which only puts the first letter of a word in uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5724118fc705676ac5d111d32a483bdf983365" translate="yes" xml:space="preserve">
          <source>In Edge, hovering over an element and then scrolling up or down without moving the pointer will leave the element in the &lt;code&gt;:hover&lt;/code&gt; state until the pointer is moved. See &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5381673/&quot;&gt;bug 5381673&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ad32ef01e6d6b973fef9bea50d7ff1f5ea59ee" translate="yes" xml:space="preserve">
          <source>In Firefox 59, the property was limited to usage in chrome code only (See &lt;a href=&quot;https://bugzil.la/1417200&quot;&gt;bug 1417200&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a431314804a34d74792b5a64bb43ef6be5426e16" translate="yes" xml:space="preserve">
          <source>In Firefox 60, the property was removed completely (See &lt;a href=&quot;https://bugzil.la/1429723&quot;&gt;bug 1429723&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b43ed2ee148cd07e125a389b0668feac556930" translate="yes" xml:space="preserve">
          <source>In Flow and Out of Flow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05daa321394d596baa5b1be66f28f172f13612e1" translate="yes" xml:space="preserve">
          <source>In Gecko (Firefox) the limit of the cursor size is 128&amp;times;128px. Larger cursor images are ignored. However, you should limit yourself to the size 32&amp;times;32 for maximum compatibility with operating systems and platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4d953850927a160d788bf46abc404a819576bdc" translate="yes" xml:space="preserve">
          <source>In German (&lt;code&gt;de&lt;/code&gt;), the &lt;code&gt;&amp;szlig;&lt;/code&gt; becomes &lt;code&gt;SS&lt;/code&gt; in uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80781c40c3f8967b190b0d89539fd63e02763523" translate="yes" xml:space="preserve">
          <source>In German (de), the &lt;code&gt;&amp;szlig;&lt;/code&gt; becomes &lt;code&gt;SS&lt;/code&gt; in uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37391e5d15cc3b54765120217c0b5653aa4f07d" translate="yes" xml:space="preserve">
          <source>In Greek (&lt;code&gt;el&lt;/code&gt;), the lowercase sigma character has two forms: &lt;code&gt;&amp;sigma;&lt;/code&gt; and &lt;code&gt;&amp;sigmaf;&lt;/code&gt;. &lt;code&gt;&amp;sigmaf;&lt;/code&gt; is used only when sigma terminates a word. When applying &lt;code&gt;text-transform: lowercase&lt;/code&gt; to an uppercase sigma (&lt;code&gt;&amp;Sigma;&lt;/code&gt;), the browser needs to choose the right lowercase form based on context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25eeee60a49c8ca059739c2da1de51cfddbe7e6a" translate="yes" xml:space="preserve">
          <source>In Greek (&lt;code&gt;el&lt;/code&gt;), vowels lose their accent when the whole word is in uppercase (&lt;code&gt;ά&lt;/code&gt;/&lt;code&gt;&amp;Alpha;&lt;/code&gt;), except for the disjunctive eta (&lt;code&gt;ή&lt;/code&gt;/&lt;code&gt;Ή&lt;/code&gt;). Also, diphthongs with an accent on the first vowel lose the accent and gain a diaeresis on the second vowel (&lt;code&gt;ά&amp;iota;&lt;/code&gt;/&lt;code&gt;&amp;Alpha;Ϊ&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1161334729a96a24f422f6ffc8f969d8d7188dcc" translate="yes" xml:space="preserve">
          <source>In Greek (el), vowels lose their accent when the whole word is in uppercase (&lt;code&gt;ά&lt;/code&gt;/&lt;code&gt;&amp;Alpha;&lt;/code&gt;), except for the disjunctive eta (&lt;code&gt;ή&lt;/code&gt;/&lt;code&gt;Ή&lt;/code&gt;). Also, diphthongs with an accent on the first vowel lose the accent and gain a diacritic on the second vowel (&lt;code&gt;ά&amp;iota;&lt;/code&gt;/&lt;code&gt;&amp;Alpha;Ϊ&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f95d9cdcb8870525b34d88afcb6e8aba98ae1f" translate="yes" xml:space="preserve">
          <source>In IE 7 and IE 8 of Internet Explorer, this property always behaved like &lt;code&gt;background-clip: padding&lt;/code&gt; when &lt;code&gt;overflow&lt;/code&gt; was &lt;code&gt;hidden&lt;/code&gt;, &lt;code&gt;auto&lt;/code&gt;, or &lt;code&gt;scroll&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51a95a951b6c2f0353cd1e98ce4685df836b48f9" translate="yes" xml:space="preserve">
          <source>In IE 7 and IE 9 of Internet Explorer, it always behaved like &lt;code&gt;background-clip: padding&lt;/code&gt; if &lt;code&gt;overflow: hidden | auto | scroll&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67757997fb463ce21b9a08ccfe91630ab4e2b137" translate="yes" xml:space="preserve">
          <source>In IE 7 and IE 9 of Internet Explorer, it always behaved like &lt;code&gt;background-clip: padding&lt;/code&gt; if &lt;code&gt;overflow: hidden | auto | scroll&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40895f43f8daf804c7969752ab1482748b26b0b" translate="yes" xml:space="preserve">
          <source>In IE 7 and before, Internet explorer was behaving as if &lt;code&gt;background-origin: border-box&lt;/code&gt; was set. In Internet Explorer 8, as if &lt;code&gt;background-origin: padding-box&lt;/code&gt;, the regular default value, was set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cf37abe85810e9faef65ab4ebb25e5d6540427" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 10 and 11, a &lt;code&gt;min-height&lt;/code&gt; declaration on a column-direction flex container doesn't apply to the container's flex items. See &lt;a href=&quot;https://github.com/philipwalton/flexbugs#3-min-height-on-a-column-flex-container-wont-apply-to-its-flex-items&quot;&gt;Flexbug #3&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55daac39a2970b2c39578f77b898fef333b3280" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 10 and 11, if column flex items have &lt;code&gt;align-items: center;&lt;/code&gt; set on them and their content is too large, then they will overflow the bounds of their container. See &lt;a href=&quot;https://github.com/philipwalton/flexbugs#2-column-flex-items-set-to-align-itemscenter-overflow-their-container&quot;&gt;Flexbug #2&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ca2a0643faed0c66b2a02b33c7717c48cd3e1f9" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 11, when &lt;code&gt;cursor&lt;/code&gt; is applied to an element and this element is underneath an open &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTML/Element/select&quot;&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/a&gt; menu and the user hovers over a &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTML/Element/select&quot;&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/a&gt; menu item that's on top of said element, the cursor for said element will be displayed rather than the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTML/Element/select&quot;&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/a&gt;'s normal cursor. See &lt;a href=&quot;https://developer.microsoft.com/microsoft-edge/platform/issues/817822/&quot;&gt;bug 817822&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e4fe5e1b8fd396a4c6c71bd62711557d80446d" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 8 (IE8) the &lt;code&gt;-ms-accelerator&lt;/code&gt; attribute is an extension to CSS, and can be used as a synonym for &lt;code&gt;accelerator&lt;/code&gt;in IE8 Standards mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df433c8083862097360e82c796919d3d0ced1fe" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 8 and 9, there is a bug where a computed &lt;code&gt;background-color&lt;/code&gt; of &lt;code&gt;transparent&lt;/code&gt; causes &lt;code&gt;click&lt;/code&gt; events to not get fired on overlaid elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7f51c05a37e9d741c8d5578d57f985bea9d9e9" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 8 to Internet Explorer 11, hovering over an element and then scrolling up or down without moving the pointer will leave the element in the &lt;code&gt;:hover&lt;/code&gt; state until the pointer is moved. See &lt;a href=&quot;https://connect.microsoft.com/IE/feedbackdetail/view/926665&quot;&gt;bug 926665&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b213fccd0f4caed60146a9e4a6a51d90eb7ff8f" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 8, if an element is inserted dynamically by clicking on a link the first-child style isn't applied until the link loses focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0afbddb0da61299da8ea9fd752c5b7a754eaba44" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 8, if an element is inserted dynamically by clicking on a link, then the &lt;code&gt;:first-child&lt;/code&gt; style isn't applied until the link loses focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05967c6ec64c704a4b566b8a8f0cb566235add51" translate="yes" xml:space="preserve">
          <source>In Internet Explorer 9 (and possibly earlier), if a &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTML/Element/table&quot;&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;&lt;/a&gt; has a parent with a non-&lt;code&gt;auto&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/overflow-x&quot;&gt;&lt;code&gt;overflow-x&lt;/code&gt;&lt;/a&gt;&lt;code&gt;: auto;&lt;/code&gt;, the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTML/Element/table&quot;&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;&lt;/a&gt; has enough content to horizontally overflow its parent, and there are &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/:hover&quot;&gt;&lt;code&gt;:hover&lt;/code&gt;&lt;/a&gt; styles set on elements within the table, then hovering over said elements will cause the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTML/Element/table&quot;&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;&lt;/a&gt;'s height to increase. See &lt;a href=&quot;http://jsbin.com/diwiqe&quot;&gt;a live demo that triggers the bug&lt;/a&gt;. One workaround for the bug is to set &lt;code&gt;min-height: 0%;&lt;/code&gt; (the &lt;code&gt;%&lt;/code&gt; unit must be specified, since unitless and &lt;code&gt;px&lt;/code&gt; don't work) on the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;'s parent element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="484ff8b237fefbdf48168820dad70d4c17858d54" translate="yes" xml:space="preserve">
          <source>In Internet Explorer versions before 7, when both &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; are specified, the element position is overconstrained and the &lt;code&gt;top&lt;/code&gt; property has precedence; the computed value of &lt;code&gt;bottom&lt;/code&gt; is set to &lt;code&gt;-top&lt;/code&gt;, while its specified value is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5552baeb462251e401fa11da8815de9b5d7c96ce" translate="yes" xml:space="preserve">
          <source>In Internet Explorer, fixed positioning doesn't work if the document is in &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ie/ms531140(v=vs.85).aspx&quot;&gt;quirks mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b74c02473edf32df500c42443b75f6eb6fffd8" translate="yes" xml:space="preserve">
          <source>In JavaScript, &lt;code&gt;@media&lt;/code&gt; can be accessed via the CSS object model interface &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CSSMediaRule&quot;&gt;&lt;code&gt;CSSMediaRule&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b502521dacc3e640822ad4a5b89c14755b6204" translate="yes" xml:space="preserve">
          <source>In JavaScript, &lt;code&gt;@supports&lt;/code&gt; can be accessed via the CSS object model interface &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CSSSupportsRule&quot;&gt;&lt;code&gt;CSSSupportsRule&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20706841123976adeaa337e6f0cdd2d66bb686b0" translate="yes" xml:space="preserve">
          <source>In Media Queries Level 4 this can be written as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed0905507fbddc8ffca6b6b6c5df98f3ecd58fc" translate="yes" xml:space="preserve">
          <source>In Mozilla applications like Firefox, the &lt;code&gt;-moz-border-bottom-colors&lt;/code&gt; CSS property sets a list of colors for the bottom border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d646e6c522d83bd260b320e439da9b3cc06cc15a" translate="yes" xml:space="preserve">
          <source>In Mozilla applications like Firefox, the &lt;code&gt;-moz-border-left-colors&lt;/code&gt; CSS property sets a list of colors for the left border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb61c6d68200a673e9a68a5c66d151ac435518a" translate="yes" xml:space="preserve">
          <source>In Mozilla applications like Firefox, the &lt;code&gt;-moz-border-right-colors&lt;/code&gt; CSS property sets a list of colors for the right border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3f1daf690a70ea8e9b00ddf364285a9841bfae" translate="yes" xml:space="preserve">
          <source>In Mozilla applications like Firefox, the &lt;code&gt;-moz-border-top-colors&lt;/code&gt; CSS property sets a list of colors for the top border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15eb265a585a306161d6a278772e00ff0fedc96" translate="yes" xml:space="preserve">
          <source>In Mozilla applications like Firefox, the &lt;code&gt;-moz-outline-radius&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; property can be used to give an element's &lt;a href=&quot;outline&quot;&gt;&lt;code&gt;outline&lt;/code&gt;&lt;/a&gt; rounded corners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71425c57b965e2e6fb351245088392c523711399" translate="yes" xml:space="preserve">
          <source>In Mozilla applications, &lt;code&gt;-moz-user-input&lt;/code&gt; determines if an element will accept user input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2560592288d08ecaf1be3f739350eb1a6946d7" translate="yes" xml:space="preserve">
          <source>In Mozilla applications, the &lt;code&gt;-moz-outline-radius-bottomleft&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; property can be used to round the bottom-left corner of an element's &lt;a href=&quot;outline&quot;&gt;&lt;code&gt;outline&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63edcd216cb0f3a24e70a7f95e9f920333f2746" translate="yes" xml:space="preserve">
          <source>In Mozilla applications, the &lt;code&gt;-moz-outline-radius-bottomright&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; property can be used to round the bottom-right corner of an element's &lt;a href=&quot;outline&quot;&gt;&lt;code&gt;outline&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="060ba422b3cff44130f96db124630bf50ff56a5f" translate="yes" xml:space="preserve">
          <source>In Mozilla applications, the &lt;code&gt;-moz-outline-radius-topleft&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; property can be used to round the top-left corner of an element's &lt;a href=&quot;outline&quot;&gt;&lt;code&gt;outline&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb4218fd0048be14ea792e8eff51732da40d3f9" translate="yes" xml:space="preserve">
          <source>In Mozilla applications, the &lt;code&gt;-moz-outline-radius-topright&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;&gt;CSS&lt;/a&gt; property can be used to round the top-right corner of an element's &lt;a href=&quot;outline&quot;&gt;&lt;code&gt;outline&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e60be4b0bbd8eac8ed2a5dd87b95f9fa3d28a1f" translate="yes" xml:space="preserve">
          <source>In Opera prior to version 11.60, replaced elements with &lt;code&gt;border-radius&lt;/code&gt; will not have rounded corners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18ee7716836d9bd1ff739d118760a6d818ae662" translate="yes" xml:space="preserve">
          <source>In Opera, &lt;code&gt;visibility: collapse&lt;/code&gt; works on table elements, but doesn't hide a &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTML/Element/tfoot&quot;&gt;&lt;code&gt;&amp;lt;tfoot&amp;gt;&lt;/code&gt;&lt;/a&gt; if it is adjacent to a visible &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTML/Element/tbody&quot;&gt;&lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378aff0da81e4cfa2370e3961449bec3e145ab6b" translate="yes" xml:space="preserve">
          <source>In SVG, when text is scaled up or down, browsers calculate the final size of the text (which is determined by the specified font size and the applied scale) and request a font of that computed size from the platform's font system. But if you request a font size of, say, 9 with a scale of 140%, the resulting font size of 12.6 doesn't explicitly exist in the font system, so the browser rounds the font size to 12 instead. This results in stair-step scaling of text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a5b6c9c3ddb63355c6e6325240ec48bf56f8f9e" translate="yes" xml:space="preserve">
          <source>In Safari, &lt;code&gt;:in-range&lt;/code&gt; matched disabled and read-only inputs (see &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=156530&quot;&gt;bug 156530&lt;/a&gt;). It was later changed to only match enabled read-write inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5306832d0149aed08ed29106b74a9e0cb93186cf" translate="yes" xml:space="preserve">
          <source>In Safari, any shadows that do not explicitly specify a color are transparent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307666c8efda7abd1115a9021ac303c9eff997a8" translate="yes" xml:space="preserve">
          <source>In Spring of 2017, we saw for the first time a major specification like Grid being shipped into browsers almost simultaneously, and we now have CSS Grid Layout support in the public versions of Firefox, Chrome, Opera, Safari and Edge. However, while evergreen browsers mean that many of us are going to see the majority of users having Grid Layout support very quickly, there are also old or non-supporting browsers to contend with. In this guide we will walk through a variety of strategies for support.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eb88804a8039d51fa93d6df93f81c16c8f47c43" translate="yes" xml:space="preserve">
          <source>In Turkic languages, like Turkish (&lt;code&gt;tr&lt;/code&gt;), Azerbaijani (&lt;code&gt;az&lt;/code&gt;), Crimean Tatar (&lt;code&gt;crh&lt;/code&gt;), Volga Tatar (&lt;code&gt;tt&lt;/code&gt;), and Bashkir (&lt;code&gt;ba&lt;/code&gt;), there are two kinds of &lt;code&gt;i&lt;/code&gt;, with and without the dot, and two case pairings: &lt;code&gt;i&lt;/code&gt;/&lt;code&gt;İ&lt;/code&gt; and &lt;code&gt;ı&lt;/code&gt;/&lt;code&gt;I&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e07882c5b9ed633ee66c66f648bec121f5908e8" translate="yes" xml:space="preserve">
          <source>In Turkic languages, such as Turkish (tr), Azerbaijani (az), Crimean Tatar (crh), Volga Tatar (tt), and Bashkir (ba), there are two kinds of &lt;code&gt;i&lt;/code&gt; (one with the dot, one without) and two case pairings: &lt;code&gt;i&lt;/code&gt;/&lt;code&gt;İ&lt;/code&gt; and &lt;code&gt;ı&lt;/code&gt;/&lt;code&gt;I&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69958fd1c3b69f1c0f338798b33a3ff69719f5b3" translate="yes" xml:space="preserve">
          <source>In Windows Internet Explorer 8 the &lt;code&gt;-ms-scrollbar-track-color&lt;/code&gt; attribute is an extension to CSS, and can be used as a synonym for &lt;code&gt;scrollbar-track-color&lt;/code&gt; in IE8 Standards Mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f31170eaf9943a358b50719fa5092e663e634ca" translate="yes" xml:space="preserve">
          <source>In Windows Internet Explorer 8, the &lt;code&gt;-ms-filter&lt;/code&gt; attribute is an extension to CSS, and can be used as a synonym for &lt;a href=&quot;filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt; in IE8 Standards mode. When you use &lt;code&gt;-ms-filter&lt;/code&gt;, enclose the progid in single quotes (&lt;code&gt;'&lt;/code&gt;) or double quotes (&lt;code&gt;&quot;&lt;/code&gt;). Use commas (&lt;code&gt;,&lt;/code&gt;) to separate multiple values, as shown in the Examples section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b7c3f352b6397e4e90d142d673cabe1cf765c5" translate="yes" xml:space="preserve">
          <source>In Windows Internet Explorer 8, the &lt;code&gt;-ms-scrollbar-3dlight-color&lt;/code&gt; attribute is an extension to CSS, and can be used as a synonym for &lt;code&gt;scrollbar-3dlight-color&lt;/code&gt; in IE8 Standards Mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b66eda0c654d57de8d6aaa815a5f5b5a64cf189" translate="yes" xml:space="preserve">
          <source>In Windows Internet Explorer 8, the &lt;code&gt;-ms-scrollbar-arrow-color&lt;/code&gt; property is an extension to CSS, and can be used as a synonym for &lt;code&gt;scrollbar-arrow-color&lt;/code&gt; in IE8 Standards Mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6386ff2f9ec2596b5a346de5b0aa54743aaea73" translate="yes" xml:space="preserve">
          <source>In a block formatting context, each box's left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch).&amp;rdquo; - 9.4.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="822afc5b8b0beb496d526c9b4e63d71471696efe" translate="yes" xml:space="preserve">
          <source>In a future version of the specification it would be useful to be able to have overflow columns in continuous media display in the block direction, therefore allowing the reader to scroll down to view the next set of columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4197746f7227d316c0adaa8b80f93492394b7c1b" translate="yes" xml:space="preserve">
          <source>In a horizontal &lt;code&gt;writing-mode&lt;/code&gt; this CSS would apply &lt;code&gt;5px&lt;/code&gt; of padding to the top of the box and 10px of padding to the bottom:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="656b133dd8458a3650465de6b12b90286674723b" translate="yes" xml:space="preserve">
          <source>In a horizontal writing mode this CSS would apply a 5px margin to the top of the box and a 10px margin to the bottom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d607845f37f742a85401853979ab9393246a94fa" translate="yes" xml:space="preserve">
          <source>In a later article in this series &amp;mdash; Aligning items in a flex container &amp;mdash; we will take a thorough look at how the Box Alignment properties apply to flex items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf2e85693e8aec91204957ec72bc7f29ad8896a" translate="yes" xml:space="preserve">
          <source>In a later guide in this series, I&amp;rsquo;ll be taking a proper look at Box Alignment and how it works in Grid Layout. For now, here is a comparison between simple examples of flexbox and grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a7d45c10e0cdfb82016353c40883e972db80c3" translate="yes" xml:space="preserve">
          <source>In a multi-column block, content is automatically flowed from one column into the next as needed. All HTML, CSS and DOM functionality is supported within columns, as are editing and printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bef0e09d052fbac433a11734b9709be46aac90f" translate="yes" xml:space="preserve">
          <source>In a perfect world of browser support, the reason you'd choose to use flexbox is because you want to lay a collection of items out in one direction or another. As you lay out your items you want to control the dimensions of the items in that one dimension, or control the spacing between items. These are the uses that flexbox was designed for. You can read more about the difference between flexbox and CSS Grid Layout in &lt;a href=&quot;relationship_of_flexbox_to_other_layout_methods&quot;&gt;Relationship of Flexbox to other layout methods&lt;/a&gt;, where we discuss how flexbox fits into the overall picture of CSS Layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd88678f50419c35ed43f5fa7d02d34b1b9ff59b" translate="yes" xml:space="preserve">
          <source>In a vertical writing mode then would lay out horizontally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01d0995c06fd484c061943f9d14c2923ea966d8" translate="yes" xml:space="preserve">
          <source>In absolutely-positioned layouts, the keyword behaved like &lt;code&gt;start&lt;/code&gt; on &lt;em&gt;replaced&lt;/em&gt; absolutely-positioned boxes, and as &lt;code&gt;stretch&lt;/code&gt; on &lt;em&gt;all other&lt;/em&gt; absolutely-positioned boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a853b42f7047cd8efc1d9fd42ac9942a10ab3acb" translate="yes" xml:space="preserve">
          <source>In absolutely-positioned layouts, the keyword behaves like &lt;code&gt;start&lt;/code&gt; on &lt;em&gt;replaced&lt;/em&gt; absolutely-positioned boxes, and as &lt;code&gt;stretch&lt;/code&gt; on &lt;em&gt;all other&lt;/em&gt; absolutely-positioned boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2b3b85c2777074ed353d28ccaad585e03552d3" translate="yes" xml:space="preserve">
          <source>In addition to broad feature sets like ligatures or lining figures (numerals that line up evenly as opposed to 'oldstyle', which look more like lower-case letters), there are also very specific ones such as stylistic sets (which might include several specific variants of glyphs meant to be used together), alternates (which might be one or more variants of the letter 'a'), or even language-specific alterations for East Asian languages. In the latter case, these alterations are actually necessary to properly express the language, so they go beyond the more stylistic preference of most other OpenType features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c046329ebae0600c208c979e6a52c6d5c1ed816" translate="yes" xml:space="preserve">
          <source>In addition to displaying documents, using the correct writing mode for the language, writing modes can be used creatively within documents that are otherwise &lt;code&gt;ltr&lt;/code&gt;. In this next example I have a grid layout with a set of links down one side. I&amp;rsquo;ve used writing modes to turn these on their side in the column track:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eb52c7a147952d2ea4ebc5d701ded0862a99155" translate="yes" xml:space="preserve">
          <source>In addition to indicating that the element is not the target of mouse events, the value &lt;code&gt;none&lt;/code&gt; instructs the mouse event to go &quot;through&quot; the element and target whatever is &quot;underneath&quot; that element instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be630f48e3eded015a335adacc65ce23fb35aa71" translate="yes" xml:space="preserve">
          <source>In addition to reversing the order in which flex items are visually displayed, you can target individual items and change where they appear in the visual order with the &lt;a href=&quot;../order&quot;&gt;&lt;code&gt;order&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69bed036b9ed9fb8feb32cdffea98e085029dd61" translate="yes" xml:space="preserve">
          <source>In addition to specifying the start and end lines by number, you can specify a start line and then the number of tracks you would like the area to span.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e7bad3ceceb6ed4734a03860420f1dc2c38825" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;auto&lt;/code&gt; keyword, you can use the &lt;code&gt;content&lt;/code&gt; keyword as the &lt;code&gt;flex-basis&lt;/code&gt;. This will result in the &lt;code&gt;flex-basis&lt;/code&gt; being taken from the content size even if there is a width set on the item. This is a newer keyword and has less browser support, however you can always get the same effect by using &lt;code&gt;auto&lt;/code&gt; as the flex-basis and ensuring that your item does not have a width set, in order that it will be auto-sized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14f790608a5d177bdb1e57350f47d8ef2740d924" translate="yes" xml:space="preserve">
          <source>In addition to the CSS Display Specification Level 3, further specifications define the behavior of various values of display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1678978059f12992cde93376cd6a35525d7a413" translate="yes" xml:space="preserve">
          <source>In addition to the ability to place items accurately onto a created grid, the CSS Grid Layout specification contains rules that control what happens when you create a grid and do not place some or all of the child items. You can see auto-placement in action in the simplest of ways by creating a grid on a set of items. If you give the items no placement information they will position themselves on the grid, one in each grid cell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e875f9f2e7b58dd63cd2e253d8894f9aa514d85" translate="yes" xml:space="preserve">
          <source>In addition to the above, browser support for these properties is a little patchy. The compatibility data charts on the individual property pages here on MDN can help you see which browsers support which features. In most cases, the fallback to breaks not being controlled is something you can live with, with suboptimal breaking being untidy rather than a disaster to your layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744f18547c59c3767a5cac8545b868e079b2f366" translate="yes" xml:space="preserve">
          <source>In addition to the one-dimensional versus two-dimensional distinction, there is another way to decide if you should use flexbox or grid for a layout. Flexbox works from the content out. An ideal use case for flexbox is when you have a set of items and want to space them out evenly in a container. You let the size of the content decide how much individual space each item takes up. If the items wrap onto a new line, they will work out their spacing based on their size and the available space &lt;em&gt;on that line&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c80cf93c72b0c70f71a87d2de58cb2d976bd1b4" translate="yes" xml:space="preserve">
          <source>In addition to the root element of our document (the &lt;code&gt;html&lt;/code&gt; element) ,a new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31cb455cbd34c42c8df68471be1833da1a54f00d" translate="yes" xml:space="preserve">
          <source>In addition to the rules existing in CSS2.1, new levels of CSS further describes the behaviour of block and inline boxes. The &lt;code&gt;display&lt;/code&gt; property defines how a box, and any boxes inside it behaves. In the CSS Display Model Level 3 we can learn more about how the display property changes the behaviour of boxes and the boxes they generate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69996fa2865ae5903316b531297a942b8582f2db" translate="yes" xml:space="preserve">
          <source>In addition to these mapped properties there are some additional shorthand properties made possible by being able to address block and inline dimensions. These have no mapping to physical properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75653b185f655aab64be6a4a830f23d9efcd458" translate="yes" xml:space="preserve">
          <source>In addition, even for the above styles, you won't be able to change the transparency between unvisited and visited links, as you otherwise would be able to using &lt;code&gt;&lt;a href=&quot;color_value#rgba()&quot;&gt;rgba()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;color_value#hsla()&quot;&gt;hsla()&lt;/a&gt;&lt;/code&gt;, or the &lt;code&gt;&lt;a href=&quot;color_value#transparent&quot;&gt;transparent&lt;/a&gt;&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda9fab168d9befbbcff3cde33569c1f48305bf5" translate="yes" xml:space="preserve">
          <source>In addition, you can find detailed explanations of the layout models that certain values enable elsewhere on MDN:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf572b88ccf9e58e3f1aa49c2ed9cddb9bfb5743" translate="yes" xml:space="preserve">
          <source>In all of these examples I have been working in English, which is a left-to-right language. This means that our start lines are top and left of our grid when thinking in physical directions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd48b6671917bca188cc6c86712a56e6013913ac" translate="yes" xml:space="preserve">
          <source>In all other cases no interpolation occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20fb3fe23686db3ecb2d619e0eb6c6b242584382" translate="yes" xml:space="preserve">
          <source>In an &lt;code&gt;&amp;lt;input type='text'&amp;gt;&lt;/code&gt; element styled with &lt;code&gt;text-align: right&lt;/code&gt;, if the clear button is shown, it will clip off the right edge of the text value of the &lt;code&gt;&amp;lt;input type='text'&amp;gt;&lt;/code&gt; element. A workaround is to hide the clear button using &lt;code&gt;display: none&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439edbed9decacfd1bebe3f4494e1b45c015f9b6" translate="yes" xml:space="preserve">
          <source>In an HTML editor, if a double-click or context-click occurred in sub-elements, the highest ancestor with this value will be selected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a3bbce77163651d7ee09975ecbfeb0fd61000f" translate="yes" xml:space="preserve">
          <source>In an SVG, the viewport is the visible area of the SVG image. You can set any height and width on an SVG, but the whole image might not be visible. The area that is visible is called the viewport. The size of the viewport can be definited using the width and height attributes of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg&quot;&gt;&lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19ca877dcf62e20f81aa718ee7daae51ebbcac9" translate="yes" xml:space="preserve">
          <source>In animations and &lt;a href=&quot;css_images/using_css_gradients&quot;&gt;gradients&lt;/a&gt;, &lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt; values are interpolated on each of their red, green, and blue components. Each component is interpolated as a real, floating-point number. Note that interpolation of colors happens in the &lt;a href=&quot;https://www.gimp.org/docs/plug-in/appendix-alpha.html&quot;&gt;alpha-premultiplied sRGBA color space&lt;/a&gt; to prevent unexpected gray colors from appearing. In animations, the interpolation's speed is determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function&quot;&gt;timing function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701c53c6262571e81753c6dc58e9cba0f2ae07bf" translate="yes" xml:space="preserve">
          <source>In block-level layouts, it aligns an item inside its containing block on the inline axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35819adfbeeaea066010f86aff00ab304fcedad0" translate="yes" xml:space="preserve">
          <source>In block-level layouts, it aligns the items inside their containing block on the inline axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f16fe2511ee90dafd5a1e407fe24b0a692b9c3b" translate="yes" xml:space="preserve">
          <source>In block-level layouts, the keyword is a synonym of &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a299e382b8448c7a752f1a4bf54709bb82360d" translate="yes" xml:space="preserve">
          <source>In both cases the start edge of the cross axis is at the top of the flex container and the end edge at the bottom, as both languages have a horizontal writing mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a56fdac7dd1cebd3be24f995c230f163005d10f" translate="yes" xml:space="preserve">
          <source>In case of equality, the &lt;a href=&quot;specificity&quot;&gt;specificity&lt;/a&gt; of a value is considered to choose one or the other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ada1826d99f923bb087fefa93d349bfeaaeabad" translate="yes" xml:space="preserve">
          <source>In cases where a fragment identifier points to a portion of the document, readers may become confused about which part of the document they're supposed to be reading. By styling the target of a URI, reader confusion can be reduced or eliminated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8822ee8e3c2ebb232b8be0a9babe46236ee7a02d" translate="yes" xml:space="preserve">
          <source>In comparison, the grid version always has three column tracks. The tracks themselves will grow and shrink, but there are always three since we asked for three when defining our grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8bff5d41de2a92f7170015e9723fc1ecca75443" translate="yes" xml:space="preserve">
          <source>In each case, we show what the source image looks like rendered in a 150x150 box, and provide a link to the SVG source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f819a00a14e6b245d16ec2afdf72e73458d1e7" translate="yes" xml:space="preserve">
          <source>In earlier versions of the &lt;code&gt;font-stretch&lt;/code&gt; specification, the property accepts only the nine keyword values. CSS Fonts Level 4 extends the syntax to accept a &lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt; value as well. This enables variable fonts to offer something more like a continuum of character widths. For TrueType or OpenType variable fonts, the &quot;wdth&quot; variation is used to implement varying widths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f1521de2eb98f5349d7def135482bed50108914" translate="yes" xml:space="preserve">
          <source>In earlier versions of the &lt;code&gt;font-weight&lt;/code&gt; specification, the property accepts only keyword values and the numeric values 100, 200, 300, 400, 500, 600, 700, 800, and 900. CSS Fonts Level 4 extends the syntax to accept any number between 1 and 1000. This enables variable fonts to provide a much finer-grained range of font weights. Note that this is not yet supported by all browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ea47a51b0dbd995252884124bb680f309b40b1" translate="yes" xml:space="preserve">
          <source>In flexbox layouts, this keyword has no meaning as this property is &lt;em&gt;ignored.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ef9a793fa5b50c40d9e8a4b9cbd47e993ade96" translate="yes" xml:space="preserve">
          <source>In flexbox layouts, this property is &lt;em&gt;ignored&lt;/em&gt; (&lt;a href=&quot;css_box_alignment/box_alignment_in_flexbox&quot;&gt;more&lt;/a&gt; about alignment in Flexbox)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c78c0cb0eddf793f4122fccb9a00ad7cb16a7da" translate="yes" xml:space="preserve">
          <source>In formal syntax, data types are denoted by a keyword placed between the inequality signs &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="160e478f14b6d24175aca6998e2eb0bc9a4c24a7" translate="yes" xml:space="preserve">
          <source>In fragmented media, once a fragment (for example a page) is filled with columns, the columns will move to a new page and fill that up with columns. In continuous media, columns will overflow in the inline direction. On the web this means that you will get a horizontal scrollbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87e9056c2b206cd9248d3207f0bfebd454cea773" translate="yes" xml:space="preserve">
          <source>In full screen mode, the viewport is the device screen, the window is the browser window, which can be as big as viewport or smaller, and the document is the website, which can be much taller or wider than the viewport. The viewport is basically the part of the document that is currently visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a96d7b3a7aea1f5aee0bcb31ca5e0422c3c536f" translate="yes" xml:space="preserve">
          <source>In general, for a requested angle of 14 degrees or greater, larger angles are prefered; otherwise, smaller angles are preferred (see the spec's &lt;a href=&quot;https://drafts.csswg.org/css-fonts-4/#font-matching-algorithm&quot;&gt;font matching section&lt;/a&gt; for the precise algorithm).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faf305d8f4b75c9f3277e35e04297e3b66586611" translate="yes" xml:space="preserve">
          <source>In general:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="235862adf1c0905968addd047f638ceaeab13e2b" translate="yes" xml:space="preserve">
          <source>In grid layouts, it aligns an item inside its grid area on the inline axis (&lt;a href=&quot;css_box_alignment/box_alignment_in_grid_layout&quot;&gt;more&lt;/a&gt; about alignment in grid layouts)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1000a9a2d8ad7132a72dee322a658058d0134b7" translate="yes" xml:space="preserve">
          <source>In grid layouts, it aligns the items inside their grid areas on the inline axis (&lt;a href=&quot;css_box_alignment/box_alignment_in_grid_layout&quot;&gt;more&lt;/a&gt; about alignment in grid layouts)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5263e9f74458ab1eef81d089ebf289bae34bf06d" translate="yes" xml:space="preserve">
          <source>In grid layouts, this keyword leads to a behavior similar to the one of &lt;code&gt;stretch&lt;/code&gt;, except for boxes with an aspect ratio or an intrinsic sizes where it behaves like &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e2fafd974277555f26943911ad44c399f62353" translate="yes" xml:space="preserve">
          <source>In grid properties it is relative to the inline size of the grid container in column tracks and to the block size of the grid container for row tracks. Otherwise it is relative to the available inline size or block size of the laid out box depending on the writing mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3b6993ce2317ef8b30cedd90fab07e2ecfc02d" translate="yes" xml:space="preserve">
          <source>In including an iframe, the visual viewport is the size of the inner width and height of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; of the parent document. You can set any height and width on an iframe, but the whole document may not be visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821c5084ca337243035578194e03467f6c7e6caa" translate="yes" xml:space="preserve">
          <source>In many browsers, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea&quot;&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/a&gt; elements are resizable by default. You may override this behavior with the &lt;code&gt;resize&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2d288a9f39ff1b64356465fca53bdc8ba89156" translate="yes" xml:space="preserve">
          <source>In most cases, flow layout works as you would expect it to when changing the writing mode of the document or parts of the document. This can be used to properly typeset vertical languages or for creative reasons. CSS is making this easier by way of introducing logical properties and values so that when working in a vertical writing mode sizing can be based on element's inline and block size. This will be useful when creating components which can work in different writing-modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bef99e1a0b0a957ab5e44eda6dc1aff8ecb35c9" translate="yes" xml:space="preserve">
          <source>In moving to CSS we often spoke about CSS for layout enabling a separation of content and markup and presentation. The ultimate aim being that we could create a semantic and well structured document, then apply CSS to create the layout we desired. Sites such as the &lt;a href=&quot;http://www.csszengarden.com/&quot;&gt;CSS Zen Garden&lt;/a&gt; showcased this ability. The &lt;a href=&quot;http://www.csszengarden.com/&quot;&gt;CSS Zen Garden&lt;/a&gt; challenged us to take identical markup and create a unique design using CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815a54f3c3d216995b4a7fe9ee3323dfd4b8f1b9" translate="yes" xml:space="preserve">
          <source>In multi-column layout the alignment container is the content box of the multicol container. The alignment subject is the column box. The properties which apply to multi-column layouts are detailed below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba2bdeb13f441f19f7ad76edbbb040c277cb28d" translate="yes" xml:space="preserve">
          <source>In normal flow, &lt;strong&gt;inline&lt;/strong&gt; elements display in the inline direction, that is in the direction words are displayed in a sentence according to the &lt;a href=&quot;css_writing_modes&quot;&gt;Writing Mode&lt;/a&gt; of the document. &lt;strong&gt;Block&lt;/strong&gt; elements display one after the other, as paragraphs do in the Writing Mode of that document. In English therefore, inline elements display one after the other, starting on the left, and block elements start at the top and move down the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b241f9b47c32be3ad86e3dff16fe926bd8bba9" translate="yes" xml:space="preserve">
          <source>In order for &lt;code&gt;overflow&lt;/code&gt; to have an effect, the block-level container must have either a set height (&lt;code&gt;height&lt;/code&gt; or &lt;code&gt;max-height&lt;/code&gt;) or &lt;code&gt;white-space&lt;/code&gt; set to &lt;code&gt;nowrap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc67cd685a5647dbccf91218e3f47a5aaacaba1" translate="yes" xml:space="preserve">
          <source>In order to avoid this and get some indentation, there are really only three options available to browser implementors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e674677bd8087556acbbdc338b8d029b99e4a1a8" translate="yes" xml:space="preserve">
          <source>In order to calculate the em equivalent for any pixel value required, you can use this formula:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e796f07b739733e028929493890852e5ac039f94" translate="yes" xml:space="preserve">
          <source>In order to make the layout neater I can use multiple &lt;code&gt;.&lt;/code&gt; characters. As long as there is no white space between the full stops it will be counted as one cell. For a complex layout there is a benefit to having the rows and columns neatly aligned. It means that you can actually see, right there in the CSS, what this layout looks like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c2ee5e717806c3ca5da0a46bb0fe8b93ab388f" translate="yes" xml:space="preserve">
          <source>In order to understand why this is the case, and more importantly how to avoid the problem altogether, it's necessary to examine the details of list construction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78fc8b3d4273a107ef3febe9f1c1ad43a7ee28ec" translate="yes" xml:space="preserve">
          <source>In order to work out how much space there is available to lay out flex items, the browser needs to know how big the item is to start with. How is this worked out for items that don&amp;rsquo;t have a width or a height applied using an absolute length unit?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546eb5da7f7ca7309b47cfd26096baf5dddfefe9" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;basic_shapes&quot;&gt;Guide to Basic Shapes&lt;/a&gt; we explore each of the possible Basic Shapes and how to create them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655e44b1236ca04d2821a3d073a5362998897cb7" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/css-examples/overscroll-behavior/&quot;&gt;overscroll-behavior example&lt;/a&gt; (see the &lt;a href=&quot;https://github.com/mdn/css-examples/tree/master/overscroll-behavior&quot;&gt;source code&lt;/a&gt; also), we present a full-page list of fake contacts, and a dialog box containing a chat window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb7915d89dc5c0ac4667486f685f66c5fcbdabd" translate="yes" xml:space="preserve">
          <source>In our example each of the areas spans multiple grid cells and we achieve this by repeating the name of that grid area multiple times with white space between. You can add extra white space in order to keep your columns neatly lined up in the value of &lt;code&gt;grid-template-areas&lt;/code&gt;. You can see that I have done this in order that the &lt;code&gt;hd&lt;/code&gt; and &lt;code&gt;ft&lt;/code&gt; line up with &lt;code&gt;main&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ecd8d34c8b18fc87a5e2a65029b72e721fb2cac" translate="yes" xml:space="preserve">
          <source>In our initial example with &lt;code&gt;display: flex&lt;/code&gt; on the container, the items display as a row and all line up at the start of the container. This is due to the initial value of &lt;code&gt;justify-content&lt;/code&gt; being &lt;code&gt;flex-start&lt;/code&gt;. Any available space is placed at the end of the items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972b1f6fe5ad06ab71ac12e25b912fae3971103b" translate="yes" xml:space="preserve">
          <source>In our simple &lt;a href=&quot;https://mdn.github.io/css-examples/overscroll-behavior/overscroll-behavior-x&quot;&gt;overscroll-behavior-x example&lt;/a&gt; (see &lt;a href=&quot;https://github.com/mdn/css-examples/blob/master/overscroll-behavior/overscroll-behavior-x.html&quot;&gt;source code&lt;/a&gt; also), we have two block-level boxes, one inside the other. The outer box has a large &lt;a href=&quot;width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; set on it so the page will scroll horizontally. The inner box has a small width (and &lt;a href=&quot;height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt;) set on it so it sits comforably inside the viewport, but its content is given a large &lt;code&gt;width&lt;/code&gt; so it will scroll horizontally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17bafec10322c5b78938f961b98dc5cfb21b43d6" translate="yes" xml:space="preserve">
          <source>In particular, &lt;a href=&quot;background-image&quot;&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt; is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e964a6b4af21bcbe5652865a972979698bec26" translate="yes" xml:space="preserve">
          <source>In practice the shrinking behaviour does tend to give you reasonable results. You don&amp;rsquo;t usually want your content to disappear completely or for boxes to get smaller than their minimum content, so the above rules make sense in terms of sensible behaviour for content that needs to be shrunk in order to fit into a container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c11c06f78fe3f759320749e6b4a8043fd547a84" translate="yes" xml:space="preserve">
          <source>In previous guides we&amp;rsquo;ve looked at placing items by the lines created by defining grid tracks and also how to place items using named template areas. In this guide we are going to look at how these two things work together when we use named lines. Line naming is incredibly useful, but some of the more baffling looking grid syntax comes from this combination of names and track sizes. Once you work through some examples it should become clearer and easier to work with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d127d2697bfe9ab7be9c786bd85c4f24b4fdcd7" translate="yes" xml:space="preserve">
          <source>In rare scenarios, if you're using nested link elements and the element being matched is different from the link whose presence in history is being tested, the element will be rendered as if the link were unvisited, as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59c94a0ffaf543fef5726cc5849aebaa44a3aaf4" translate="yes" xml:space="preserve">
          <source>In reality we also often use Flexbox for jobs that might be better done by Grid Layout, as a fallback for Grid, and also in order to get alignment capabilities. This is something that may well change once Box Alignment is implemented in Block Layout. In this guide I look at some of the typical things you might use flexbox for today.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79d93d6ab63d3f0da43423583854d534e964565" translate="yes" xml:space="preserve">
          <source>In recent Windows versions (e.g., 10), if accent colors are enabled in window titlebars, this is 1. Otherwise it's 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0a4822a0f4f0e70ffefecb0d8b3b58f5b2862b" translate="yes" xml:space="preserve">
          <source>In some cases these behaviors are not desirable. you can use &lt;code&gt;overscroll-behavior&lt;/code&gt; to get rid of unwanted scroll chaining and the browser's Facebook/Twitter app-inspired &quot;pull to refresh&quot;-type behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ea5096d8162c98ffca057c4340c413e777fa12" translate="yes" xml:space="preserve">
          <source>In some cases you could happily use either layout method, but as you become confident with both you will find each one suiting different layout needs, and you will end up with both methods in your CSS. There is rarely a right or wrong answer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7141f6e5b6db63bb657ba0194ef796c35ebe297" translate="yes" xml:space="preserve">
          <source>In some cases, the visual formatting algorithm needs to add supplementary boxes. Because CSS selectors cannot style or name these boxes, they are called &lt;em&gt;anonymous boxes&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f67b6c533ef6e46bf5be2fd66df1ead1904ee7" translate="yes" xml:space="preserve">
          <source>In some environments, an equivalent bidirectional resize cursor is shown. For example, &lt;code&gt;n-resize&lt;/code&gt; and &lt;code&gt;s-resize&lt;/code&gt; are the same as &lt;code&gt;ns-resize&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184bacc96e77ecd25debbec8e986516a912a68e8" translate="yes" xml:space="preserve">
          <source>In static position of absolutely-positioned layouts, the keyword behaves as &lt;code&gt;stretch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd86dab69095a456e4783b222bc7eb24f8747ca0" translate="yes" xml:space="preserve">
          <source>In such a scenario, in order to use a typeface for typical use on a site for body copy you would need at least four files: regular, italic, bold, and bold italic. If you wanted to add more weights, like a lighter one for captions or a heavier one for extra emphasis, that would mean several more files. This results in more HTTP requests, and more data being downloaded (usually around 20k or more per file).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6a62285f67e2d7161b800ebd3c834d396ca9bd" translate="yes" xml:space="preserve">
          <source>In summary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58fe6afac4b0c54dd6862e02fb0bff767ab18a56" translate="yes" xml:space="preserve">
          <source>In table cell layouts, this keyword has no meaning as this property is &lt;em&gt;ignored&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eceaf9ffe4699da43dad29f2d4afb1b1137d02ad" translate="yes" xml:space="preserve">
          <source>In table cell layouts, this property is &lt;em&gt;ignored&lt;/em&gt; (&lt;a href=&quot;css_box_alignment/box_alignment_in_block_abspos_tables&quot;&gt;more&lt;/a&gt; about alignment in block, absolute positioned and table layout)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80acf15a586cb8009da2b8e956975625d370671b" translate="yes" xml:space="preserve">
          <source>In table layout, you have access to the &lt;a href=&quot;../vertical-align&quot;&gt;&lt;code&gt;vertical-align&lt;/code&gt;&lt;/a&gt; property to align the contents of a cell inside that cell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353e6bdc18ad24d6d8ae1d1fcaa926596ef45662" translate="yes" xml:space="preserve">
          <source>In terms of line-based positioning of items, the gap acts as if the line has gained extra width. Anything starting at that line starts after the gap and you cannot address the gap or place anything into it. If you want gutters that act more like regular tracks you can of course define a track for the purpose instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25fe61c56dcfe62ee9d8eea3a0e76c9ed83aa852" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;basic_concepts_of_flexbox&quot;&gt;Basic concepts of flexbox&lt;/a&gt; article, I explained that flexbox is &lt;strong&gt;writing mode aware&lt;/strong&gt;. Writing modes are fully detailed in the CSS &lt;a href=&quot;https://www.w3.org/TR/css-writing-modes-3/&quot;&gt;Writing Modes specification&lt;/a&gt;, which details how CSS supports the various different writing modes that exist internationally. We need to be aware of how this will impact our flex layouts as writing mode changes the direction that blocks are laid out in our document. Understanding &lt;strong&gt;block&lt;/strong&gt; and &lt;strong&gt;inline&lt;/strong&gt; directions is key to new layout methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07ebc4cbf7b7ec9c8371444b58a60156d63ff2bc" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;basic_concepts_of_grid_layout&quot;&gt;article covering the basic concepts of grid layout&lt;/a&gt;, we started to look at how to position items on a grid using line numbers. In this article we will fully explore how this fundamental feature of the specification works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead29de3cc6401e8b44858b9149cb3c2a76216c8" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;block_and_inline_layout_in_normal_flow&quot;&gt;previous guide&lt;/a&gt; I explained block and inline layout in normal flow. All elements that are in flow, will be laid out using this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8feb1cbe8814ec4e19f5d2a43e993e883f394163" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link&quot;&gt;&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;&lt;/a&gt; element's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-media&quot;&gt;media&lt;/a&gt;&lt;/code&gt; attribute, they define the media to which a linked resource (typically CSS) should be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2df3cd51a6783673dceb2b325c42a34c86a4aff7" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source&quot;&gt;&lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;&lt;/a&gt; element's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attr-media&quot;&gt;media&lt;/a&gt;&lt;/code&gt; attribute, they define the media to which that source should be applied. (This is only valid inside &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture&quot;&gt;&lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;&lt;/a&gt; elements.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f783bf7d1d6da6cb40f80b7969bef523dfc3acef" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style&quot;&gt;&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/a&gt; element's &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style#attr-media&quot;&gt;media&lt;/a&gt;&lt;/code&gt; attribute, they define the media to which the style should be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22059d3e23365089e9c88cbb1517209bc0592f31" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;line-based_placement_with_css_grid&quot;&gt;previous guide&lt;/a&gt; we looked at grid lines, and how to position items against those lines. When you use CSS Grid Layout you always have lines, and this can be a straightforward way to place items on your grid. However, there is an alternate method to use for positioning items on the grid which you can use alone or in combination with line-based placement. This method involves placing our items using named template areas, and we will find out exactly how this method works. You will see very quickly why we sometimes call this the ascii-art method of grid layout!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7e828fe38de6a16622e681e5e96b9544638c12" translate="yes" xml:space="preserve">
          <source>In the &lt;em&gt;absolute positioning scheme&lt;/em&gt;, boxes are entirely removed from the flow and don't interact with it at all. They are positioned relative to their &lt;a href=&quot;all_about_the_containing_block&quot;&gt;containing block&lt;/a&gt; using the &lt;a href=&quot;top&quot;&gt;&lt;code&gt;top&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;bottom&quot;&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;left&quot;&gt;&lt;code&gt;left&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;right&quot;&gt;&lt;code&gt;right&lt;/code&gt;&lt;/a&gt; CSS properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f929defd15fe16fa976a6d5265c381b553af0c1" translate="yes" xml:space="preserve">
          <source>In the &lt;em&gt;float positioning scheme&lt;/em&gt;, specific boxes (called &lt;em&gt;floating boxes&lt;/em&gt; or simply &lt;em&gt;floats)&lt;/em&gt; are positioned at the beginning, or end of the current line. This leads to the property that text (and more generally anything within the normal flow) flows along the edge of the floating boxes, except if told differently by the &lt;a href=&quot;clear&quot;&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/a&gt; CSS property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13d605f829339e72924971b0196722cd52fab2c7" translate="yes" xml:space="preserve">
          <source>In the &lt;em&gt;normal flow&lt;/em&gt;, boxes are laid out one after the other. In a block formatting context, they are laid out vertically; in an inline formatting context, they are laid out horizontally. The normal flow is triggered when the CSS &lt;a href=&quot;position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; is set to the value &lt;code&gt;static&lt;/code&gt; or &lt;code&gt;relative&lt;/code&gt;, and if the CSS &lt;a href=&quot;float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; is set to the value &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f47eca4f6e2b138703d034401c4db872c3704594" translate="yes" xml:space="preserve">
          <source>In the CSS, you can see that we are in effect defining a completely separate &lt;a href=&quot;../@font-face&quot;&gt;&lt;code&gt;@font-face&lt;/code&gt;&lt;/a&gt; that only includes a single character in it, meaning that only this character will be styled with this font. We could also have done this by wrapping the ampersand in a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; and applying a different font just to that, but that is an extra element and rule set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c40b54d1bf7c7ba6921106eb34a4779dee7f885" translate="yes" xml:space="preserve">
          <source>In the Cartesian coordinate system, a two-dimensional point is described using two values: an x coordinate (abscissa) and a y coordinate (ordinate). This is represented by the vector notation &lt;code&gt;(x, y)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6927a55d0a6eef87b327d1b5e63930cdde5247" translate="yes" xml:space="preserve">
          <source>In the Level 3 Overflow specification we have some properties which can help improve the way content looks in an overflow situation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8d747087d6fc352923bd1c008d49889e4f51644" translate="yes" xml:space="preserve">
          <source>In the above example I have both used the image as the value of &lt;a href=&quot;../shape-outside&quot;&gt;&lt;code&gt;shape-outside&lt;/code&gt;&lt;/a&gt; and also added it to the page. Many demos do this as it helps to show the shape we are following, however the &lt;code&gt;shape-outside&lt;/code&gt; property is not related to the image that is displayed on the page and so you do not need to display an image to use an image to create a shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eee9fe99eb3fc12b3d04b19eff164205da45811" translate="yes" xml:space="preserve">
          <source>In the above example the content is wrapped in paragraph &lt;code&gt;p&lt;/code&gt; tags with default styling. Therefore, there is a margin above each paragraph. You can see how this margin causes the first line of text to be pushed down. This is because a multicol container creates a new Block Formatting Context (BFC) which means margins on child elements do not collapse with any margin on the container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab0f488303b77542ba9f89ffeca8c719cf3a75ec" translate="yes" xml:space="preserve">
          <source>In the above example, the width will be at least 80px, but will be wider if the the viewport is more than 800px wide, or an em is more than 20px wide. In other words, the min-width is 80px. Think of the max() value as providing the minimum value a property can have, realizing this, at first, sounds conter-intuitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8daa85283de2bcfc4946f9b5c6a3798bcb780447" translate="yes" xml:space="preserve">
          <source>In the above example, the width will be at most 80px, at least 10px wide, but 4ems wide if an em is currently between 2.5p and 20px wide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="708d8b2a13f9876dea42c20b436f1e574e6890dc" translate="yes" xml:space="preserve">
          <source>In the above example, the width will be at most 80px, but will be narrower if the the viewport is less than 800px wide, or an em is less than 20px wide. In other words, the max-width is 80px. Think of the min() value as providing the maximum value a property can have.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba8660c7a86570dacef1d7ca60d1b58659be5641" translate="yes" xml:space="preserve">
          <source>In the above examples I specified every end row and column line, in order to demonstrate the properties, however in practice if an item only spans one track you can omit the &lt;code&gt;grid-column-end&lt;/code&gt; or &lt;code&gt;grid-row-end&lt;/code&gt; value. Grid defaults to spanning one track. This means that our initial, long-hand, example would look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300031c2ac05e904b0ba610f420c1635d71cff7b" translate="yes" xml:space="preserve">
          <source>In the article &lt;a href=&quot;aligning_items_in_a_flex_container&quot;&gt;Aligning Items in a Flex Container&lt;/a&gt; we will explore these properties in more depth, in order to have a better understanding of how they work. These simple examples however will be useful in the majority of use cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f0af30ecdfe3cc8c62efe61539b01aeeac14e26" translate="yes" xml:space="preserve">
          <source>In the below example I have a grid container of 500 pixels by 500 pixels. I have defined 3 row and column tracks each of 100 pixels with a 10 pixel gutter. This means that there is space inside the grid container both in the block and inline directions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7044c7ef3778a51b7dc01c78765c3857118ed1" translate="yes" xml:space="preserve">
          <source>In the below example I have a wrapper containing four child items. Item three is absolutely positioned and also placed on the grid using line-based placement. The grid container has &lt;code&gt;position: relative&lt;/code&gt; and so becomes the positioning context of this item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e03f2702d23ccdb42815e9313f02761bd7d8fa" translate="yes" xml:space="preserve">
          <source>In the below example I have created a circle on an item with a width of 100 pixels, plus a margin of 20 pixels. This gives a total width for the reference box of 140 pixels. I have given a value of 50% for the shape-radius value which means that our radius is 70px. I have then set the position value to 30%.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ca724dd91411e70b1027a699d2e8b9cf09caee" translate="yes" xml:space="preserve">
          <source>In the below example I have used the &lt;code&gt;inset-block-start&lt;/code&gt; and &lt;code&gt;inset-inline-end&lt;/code&gt; properties to position the blue box using absolute positioning inside the area with the grey dotted border, which has &lt;code&gt;position: relative&lt;/code&gt;. Change the &lt;code&gt;writing-mode&lt;/code&gt; property to &lt;code&gt;vertical-rl&lt;/code&gt;, or add &lt;code&gt;direction: rtl&lt;/code&gt;, and see how the flow relative box stays with the text direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ebcf646bd61d807f23cb421d19ccbe9495832d" translate="yes" xml:space="preserve">
          <source>In the below example we use &lt;code&gt;grid-auto-rows&lt;/code&gt; to ensure that tracks created in the implicit grid are 200 pixels tall.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd2059798ba7cd0f388334eab07e47933e0f631" translate="yes" xml:space="preserve">
          <source>In the below example we use the &lt;code&gt;column-count&lt;/code&gt; property to create three columns on the &lt;code&gt;.container&lt;/code&gt; element. The content, including the children of &lt;code&gt;.container&lt;/code&gt; is then split between the three columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5f7c3a1417adea9e046222ec98da196fe6392d" translate="yes" xml:space="preserve">
          <source>In the below example we use the &lt;code&gt;column-width&lt;/code&gt; property with a value of 200px. We get as many 200 pixel columns as will fit the container, with the extra space shared equally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da9cab1c335e8fdb1506e88e36409178b9e549db" translate="yes" xml:space="preserve">
          <source>In the below example, a grid layout uses the &lt;code&gt;gap&lt;/code&gt; shorthand to set a &lt;code&gt;10px&lt;/code&gt; gap between row tracks, and a &lt;code&gt;2em&lt;/code&gt; gap between column tracks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0be7ea63031833852c901096aac12d62812bbe0" translate="yes" xml:space="preserve">
          <source>In the below example, we are creating an inline flex container with the legacy keyword inline-flex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa3f8b4895ca4a4eb5c56f45a89d141f0d01dea" translate="yes" xml:space="preserve">
          <source>In the below image I have placed the grid with &lt;code&gt;align-content&lt;/code&gt;, with a value of &lt;code&gt;start&lt;/code&gt; alongside the grid when &lt;code&gt;align-content&lt;/code&gt; has a value of &lt;code&gt;space-between&lt;/code&gt;. You can see how items 1 and 2, which span two row tracks have taken on extra height as they gain the additional space added to the gap between those two tracks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06ad82f67263f4901d26cc9f326206253392e3e" translate="yes" xml:space="preserve">
          <source>In the below live example we display the items at their natural size and by using &lt;code&gt;justify-content: space-between&lt;/code&gt; make equal amounts of space between the items. You can change how the space is distributed using the &lt;code&gt;space-around&lt;/code&gt; value, or where supported, &lt;code&gt;space-evenly&lt;/code&gt;. You could also use &lt;code&gt;flex-start&lt;/code&gt; to place the space at the end of the items, &lt;code&gt;flex-end&lt;/code&gt; to place it before them, or &lt;code&gt;center&lt;/code&gt; to centre the navigation items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d672770297b3c90c770f6b0612c45bfb9607cc2c" translate="yes" xml:space="preserve">
          <source>In the case of &lt;code&gt;-ms-ime-align: after&lt;/code&gt;, an IME might adjust the candidate window and keyboard input behavior to provide a better user experience, such as using a horizontal candidate list and allowing some keys to be sent to the app for suggestion list navigation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9788e82a8144e96ac175026c66f94fc43948a3b" translate="yes" xml:space="preserve">
          <source>In the coordinate systems used by web technologies, convention dictates that the horizontal offset is called the &lt;em&gt;x-coordinate&lt;/em&gt;, where a negative value indicates a position to the left of the origin and a positive value is to the right of the origin. The &lt;em&gt;y-coordinate&lt;/em&gt; specifies the vertical offset, with a negative value being above the origin and a positive value being below the origin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64439c0ecd4c6520a6a910c34f4a727915cad4b9" translate="yes" xml:space="preserve">
          <source>In the current level 1 specification there are only two allowable values for &lt;code&gt;column-span&lt;/code&gt;. The value &lt;code&gt;none&lt;/code&gt; is the initial value and means the item does not span, remaining within a column. The value &lt;code&gt;all&lt;/code&gt; means the item spans all of the columns. You cannot cause an item to span two out of three columns for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc7d7873ee31e6e3c48d2dbbfecf398c5ca76c6c" translate="yes" xml:space="preserve">
          <source>In the current specification, we would edit the above nested grid example to change the track definition of &lt;code&gt;grid-template-columns: repeat(3, 1fr)&lt;/code&gt;, to &lt;code&gt;grid-template-columns: subgrid&lt;/code&gt;. The nested grid will then use the parent grid tracks to layout items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e398e18850820d83310e37ba64490fc07571a6b0" translate="yes" xml:space="preserve">
          <source>In the end, we can see that none of the browsers mentioned in this article is right or wrong about how they lay out lists. They use different default styles, and that's where the problems creep in. By making sure you style both the left padding and left margin of lists, you can find much greater cross-browser consistency in your list indentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f54639e3f551d90f8aebe2b1c7354da65a7106" translate="yes" xml:space="preserve">
          <source>In the example above, the text &lt;a href=&quot;color&quot;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;#411&lt;/code&gt;, is so dark that it's difficult to read given the &lt;code&gt;black&lt;/code&gt;&lt;a href=&quot;background-color&quot;&gt;&lt;code&gt;background-color&lt;/code&gt;&lt;/a&gt;. Depending on the browser, its configuration, and the device on which the example is being viewed, the browser may opt to remove the black background or change the text color in order to improve contrast and make the text more legible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ccbff938633706387f6ddd6912e37e3e0a608b" translate="yes" xml:space="preserve">
          <source>In the example already shown, you can see how writing mode changes the direction in which items place themselves onto the grid. Items will, by default, place themselves along the Inline axis then move onto a new row. However, that inline axis may not always run from left to right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1103502619976f299aa04868c6610ab1b397b87" translate="yes" xml:space="preserve">
          <source>In the example below I am using a similar image to the initial example, however in this image the background of the star is not fully transparent, it has a 20% opacity as created in my graphics programme. If I set &lt;code&gt;shape-image-threshold&lt;/code&gt; to &lt;code&gt;0.3&lt;/code&gt; then I see the shape, if I set it to something smaller than &lt;code&gt;0.2&lt;/code&gt; I do not get the shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="593e017b6b7c0eacc18ab5ceee5444a72111725d" translate="yes" xml:space="preserve">
          <source>In the example below I have created a shape for text to follow using the &lt;code&gt;polygon()&lt;/code&gt;, you can change any of the values to see how the shape is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34312e5f2e98fb8ae9a0e88cb776234d908dd79c" translate="yes" xml:space="preserve">
          <source>In the example below I have created two boxes and added different sized margins to each edge. I have added an extra container with a border in order to make the margin more obvious to see.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95654e184176d21fbdcf53511aad98ee4d47356e" translate="yes" xml:space="preserve">
          <source>In the example below I have two boxes &amp;mdash; the first has the box floated with &lt;code&gt;float: left&lt;/code&gt;, the second with &lt;code&gt;float: inline-start&lt;/code&gt;. If you change the &lt;code&gt;writing-mode&lt;/code&gt; to &lt;code&gt;vertical-rl&lt;/code&gt; or the &lt;code&gt;direction&lt;/code&gt; to &lt;code&gt;rtl&lt;/code&gt; you will see that the left-floated box always sticks to the left, whereas the &lt;code&gt;inline-start&lt;/code&gt;-floated item follows the &lt;code&gt;direction&lt;/code&gt; and &lt;code&gt;writing-mode&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75219be434d76ec0ca4936f20b880c25dc99dcd1" translate="yes" xml:space="preserve">
          <source>In the example below I have two boxes, one of which is using physical padding properties and the other logical padding properties. With a &lt;code&gt;writing-mode&lt;/code&gt; of &lt;code&gt;horizontal-tb&lt;/code&gt;, both boxes should appear the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ade9fac5d6ccfe3034657e770d8dc1cae4cf94ee" translate="yes" xml:space="preserve">
          <source>In the example below we have added a &lt;code&gt;shape-margin&lt;/code&gt; to a basic shape. Change the margin to push the text further away from the path the shape would take by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33026d8bab067e8d2a5636083180b4467ba52589" translate="yes" xml:space="preserve">
          <source>In the example below we have an &lt;code&gt;inset()&lt;/code&gt; shape used to pull content over the floated element. Change the offset values to see how the shape changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c652e79ee709d3906a520f2a7bda48f0d9c6a75d" translate="yes" xml:space="preserve">
          <source>In the example below we have used a &lt;code&gt;min-height&lt;/code&gt; query to check the height before applying the column properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c532f29b779d48711b45394f66f479a527ed48" translate="yes" xml:space="preserve">
          <source>In the example below you can change the value &lt;code&gt;border-box&lt;/code&gt; to any of the other allowed values to see how the shape moves closer or further away from the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc42da6b95fa8bff1abfb4e31da1ae484b04273" translate="yes" xml:space="preserve">
          <source>In the example below you can see how the text now follows the line created by the border. Change the border size and the content follows it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9369a1201d51d08289155303f00232cb5e10df6" translate="yes" xml:space="preserve">
          <source>In the example below, the h2 element is set to &lt;code&gt;column-span: all&lt;/code&gt; and spans all of the columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc7496e48926463801ef244134127e6702eb72ac" translate="yes" xml:space="preserve">
          <source>In the example below, the paragraphs have a top margin of &lt;code&gt;20px&lt;/code&gt; and a bottom margin of &lt;code&gt;40px&lt;/code&gt;. The size of the margin between the paragraphs is &lt;code&gt;40px&lt;/code&gt; as the smaller top margin on the second paragraph has collapsed with the larger bottom margin of the first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e1f578a2c273d75cfd46ae4d4d7c8137627bec" translate="yes" xml:space="preserve">
          <source>In the example below, the value of &lt;code&gt;justify-content&lt;/code&gt; is &lt;code&gt;space-between&lt;/code&gt;. The available space after displaying the items is distributed between the items. The left and right item line up flush with the start and end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="435c5dff50cefc4cef6c1d6bb199e83edf19dc62" translate="yes" xml:space="preserve">
          <source>In the example below, we are using the &lt;code&gt;orphans&lt;/code&gt; property to control the number of lines left at the bottom of a column. You can change that value to see the effect on the breaking of the content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389fa1e25801f00230a450147bc99ac26c878f12" translate="yes" xml:space="preserve">
          <source>In the example below, we have a circular purple item which is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; with a height, width, and background colour. The &lt;code&gt;border-radius&lt;/code&gt; property has been used to create a circle by setting &lt;code&gt;border-radius: 50%&lt;/code&gt;. As the element has a margin, you can see that the content is flowing around the circular shape and the margin applied to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f130bac936ac35235b254ca436983752f1b353" translate="yes" xml:space="preserve">
          <source>In the example below, we have a floated element inside a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with a border applied. The content of that &lt;code&gt;div&lt;/code&gt; has floated alongside the floated element. As the content of the float is taller than the content alongside it, the border of the div now runs through the float. As explained in the &lt;a href=&quot;in_flow_and_out_of_flow&quot;&gt;guide to in-flow and out of flow elements&lt;/a&gt;, the float has been taken out of flo so the background and border of the div only contain the content and not the float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c107768ba9702cccab007a82eaafb3f40dbffd21" translate="yes" xml:space="preserve">
          <source>In the example below, we have applied break-inside to the figure element to prevent the caption from becoming separated from the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb98a6cc0426954c7368bd442296f7bd84ff6a8" translate="yes" xml:space="preserve">
          <source>In the examples above we have used images or a visible element to define the shape, meaning that you can see the shape on the page. Instead, you might simply want to cause some text to flow along a non-rectangular invisible line. You can do this with Shapes, however you will still need a floated item, which you can then make invisible. That could be a redundant element inserted into the document, an empty &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; perhaps, but our preference is to use generated content. This means we can keep things used for styling inside the CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3445c5f72a7cf65ef57c9a6b03705d026a2e54" translate="yes" xml:space="preserve">
          <source>In the final guide in this series we will see &lt;a href=&quot;handling_content_breaks_in_multicol&quot;&gt;how Multicol works with the Fragmentation spec &lt;/a&gt;to give us control over how content breaks between columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3432b14b360205e5f7a1e98c561dd64dab2c97c" translate="yes" xml:space="preserve">
          <source>In the first example, which uses flexbox, I have a container with three items inside. The wrapper &lt;a href=&quot;../min-height&quot;&gt;&lt;code&gt;min-height&lt;/code&gt;&lt;/a&gt; is set, so it defines the height of the flex container. I have set &lt;a href=&quot;../align-items&quot;&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/a&gt; on the flex container to &lt;code&gt;flex-end&lt;/code&gt; so the items will line up at the end of the flex container. I have also set the &lt;a href=&quot;../align-self&quot;&gt;&lt;code&gt;align-self&lt;/code&gt;&lt;/a&gt; property on &lt;code&gt;box1&lt;/code&gt; so it will override the default and stretch to the height of the container and on &lt;code&gt;box2&lt;/code&gt; so it aligns to the start of the flex container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72b83154889f6d107a6bb5ca2398c3ca75257e1" translate="yes" xml:space="preserve">
          <source>In the following example I am placing the first two items on our three column track grid, using the &lt;a href=&quot;../grid-column-start&quot;&gt;&lt;code&gt;grid-column-start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../grid-column-end&quot;&gt;&lt;code&gt;grid-column-end&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../grid-row-start&quot;&gt;&lt;code&gt;grid-row-start&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../grid-row-end&quot;&gt;&lt;code&gt;grid-row-end&lt;/code&gt;&lt;/a&gt; properties. Working from left to right, the first item is placed against column line 1, and spans to column line 4, which in our case is the far-right line on the grid. It begins at row line 1 and ends at row line 3, therefore spanning two row tracks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c9c1c7215875666c55031180f0e7cccfa45b3e2" translate="yes" xml:space="preserve">
          <source>In the following example I have a heading, paragraph, a list and a final paragraph which contains a &lt;code&gt;strong&lt;/code&gt; element. The heading and paragraphs are block level, the &lt;code&gt;strong&lt;/code&gt; element inline. The list is displayed using flexbox to arrange the items into a row, however it too is participating in block and inline layout - the container has an outside &lt;code&gt;display&lt;/code&gt; type of &lt;code&gt;block&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb9166e9691dae65338c7eb1b6a7ad2a1a0012db" translate="yes" xml:space="preserve">
          <source>In the following example I have an image floated left. I have then applied the &lt;code&gt;shape-outside&lt;/code&gt; property to it with a value of &lt;code&gt;circle(50%)&lt;/code&gt;. The result is that the content now curves around the circular shape rather than following the rectangle created by the box of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98df973196e4e092d94f62000b05f45ff7fda7f3" translate="yes" xml:space="preserve">
          <source>In the following example a container has been set to &lt;code&gt;display: flex&lt;/code&gt;, which means that the three child items become flex items. The value of &lt;code&gt;justify-content&lt;/code&gt; has been set to &lt;code&gt;space-between&lt;/code&gt; in order to space the items out evenly on the main axis. An equal amount of space is placed between each item with the left and right items being flush with the edges of the flex container. You can also see that the items are stretching on the cross axis, due to the default value of &lt;code&gt;align-items&lt;/code&gt; being &lt;code&gt;stretch&lt;/code&gt;. The items stretch to the height of the flex container, making them each appear as tall as the tallest item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39f55d3e3d87c5387e101555b1001e0891585e6c" translate="yes" xml:space="preserve">
          <source>In the following example the &lt;a href=&quot;column-count&quot;&gt;&lt;code&gt;column-count&lt;/code&gt;&lt;/a&gt; property has been applied to the element with a class of container. As the value of &lt;code&gt;column-count&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt;, the content is arranged into 3 columns of equal size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2e8f28a0d905f5f451c02e03d191652af09d47" translate="yes" xml:space="preserve">
          <source>In the following example we have three inline boxes created by a paragraph with a strong element inside it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d95466508eec13093a8b4c24493dba0d277d47" translate="yes" xml:space="preserve">
          <source>In the following example, I have four grid areas within my grid. I can use the &lt;a href=&quot;../align-items&quot;&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/a&gt; property on the grid container, to align the items using one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7056de60841151d095062abbcd5bb07fc3f15382" translate="yes" xml:space="preserve">
          <source>In the following example, span elements (normally displayed as inline elements) are set to &lt;code&gt;display: block&lt;/code&gt; and so break onto new lines and expand to fill their container in the inline dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff40524fd9054adc2b3ee64a232968e9b95511d1" translate="yes" xml:space="preserve">
          <source>In the following example, there are five links that point to elements in the same document. Selecting the &quot;First&quot; link, for example, will cause &lt;code&gt;&amp;lt;h1 id=&quot;one&quot;&amp;gt;&lt;/code&gt; to become the target element. Note that the document may jump to a new scroll position, since target elements are placed on the top of the browser window if possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2255de9ff1b87394edc348b1f6bcfd93394b9cfe" translate="yes" xml:space="preserve">
          <source>In the following examples I am working with &lt;a href=&quot;../flex-direction&quot;&gt;&lt;code&gt;flex-direction&lt;/code&gt;&lt;/a&gt; set to row, therefore the size of items will always come from their width. We will be calculating the positive and negative free space created by comparing the total width of all the items with the container width. You could equally try out each example with &lt;code&gt;flex-direction: column&lt;/code&gt;. The main axis would then be the column, and you would then need to compare the height of the items and that of the container they are in to work out the positive and negative free space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092d50cb66ecb4c6d736fe2dabbfaa287ac3adcb" translate="yes" xml:space="preserve">
          <source>In the following live example I have a flex container with three child elements. One of these flex items has two elements nested inside it, which would not ordinarily participate in flex layout. Flex layout only applies to the direct children of a flex container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee3ec61f4f5be2ec4476ec4c7e342f6adaffb3e" translate="yes" xml:space="preserve">
          <source>In the following live example I have a non-wrapped flex container. The third item has more content than the others yet is set to &lt;code&gt;visibility: collapse&lt;/code&gt; and therefore the flex container is retaining a &lt;em&gt;strut&lt;/em&gt; of the height required to display this item. If you remove &lt;code&gt;visibility: collapse&lt;/code&gt; from the CSS or change the value to &lt;code&gt;visible&lt;/code&gt;, you will see the item disappear and the space redistribute between non-collapsed items; the height of the flex container should not change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25b116fc0289a523680d38e9f59aa7ccd4634b5" translate="yes" xml:space="preserve">
          <source>In the following live example the first item has a &lt;code&gt;flex-shrink&lt;/code&gt; factor of 1, the second &lt;code&gt;0&lt;/code&gt; (so it won&amp;rsquo;t shrink at all), and the third &lt;code&gt;4&lt;/code&gt;. The third item therefore shrinks more rapidly than the first. Play around with the different values &amp;mdash; as for &lt;code&gt;flex-grow&lt;/code&gt; you can use decimals or larger numbers here. Choose whatever makes most sense to you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3fc697cb9eee14b1453006fddbe4686ded4eb29" translate="yes" xml:space="preserve">
          <source>In the following live example, I have floated two blocks and then set &lt;code&gt;display: flex&lt;/code&gt; on the container. The items are now flex items, which means they stretch to equal height. Any float behaviour does not apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6954ad952493aa4e25639ea39362c8f364f453c4" translate="yes" xml:space="preserve">
          <source>In the future we may not need to make a container a flex container just to centre a single item, as the Box Alignment properties will ultimately be implemented in Block layout. For now however, if you need to properly centre one thing inside another, flexbox is the way to do it. As in the above example, make a container into a flex container, and then use either &lt;code&gt;align-items&lt;/code&gt; on the parent element or target the flex item itself with &lt;code&gt;align-self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f514b8a9143ecc2063c50c73ee3cbd0f423441" translate="yes" xml:space="preserve">
          <source>In the guide to &lt;a href=&quot;flow_layout_and_writing_modes&quot;&gt;Writing Modes and Flow Layout&lt;/a&gt;, we looked at the newer properties of &lt;code&gt;block-size&lt;/code&gt; and &lt;code&gt;inline-size&lt;/code&gt; which make more sense when working with different writing modes than tying our layout to the physical dimensions of the screen. The Level 3 Overflow Module also includes flow relative properties for overflow - &lt;code&gt;&lt;a href=&quot;../@media/overflow-block&quot;&gt;overflow-block&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../@media/overflow-inline&quot;&gt;overflow-inline&lt;/a&gt;&lt;/code&gt;. These correspond to &lt;code&gt;overflow-x&lt;/code&gt; and &lt;code&gt;overflow-y&lt;/code&gt; but the mapping depends on the writing mode of the document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d952a98f5dfb68a5fe3bee072f3f02100d1a3505" translate="yes" xml:space="preserve">
          <source>In the image, you can see that two items have wrapped onto a new line. These items are sharing the available space and not lining up underneath the items above. This is because when you wrap flex items, each new row (or column when working by column) becomes a new flex container. Space distribution happens across the row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab5642e4f51019fbb1e55bf540191f4c2e7e142" translate="yes" xml:space="preserve">
          <source>In the live code example below I have items laid out using Flexbox. By changing which item has the class &lt;code&gt;active&lt;/code&gt; assigned to it in the HTML, you can change which item displays first and therefore becomes full width at the top of the layout, with the other items displaying below it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05b9d199e6d3c3626af3c16ef2d036bcab9872f" translate="yes" xml:space="preserve">
          <source>In the live example below I have added a focus style in order that as you tab from link to link you can see which is highlighted. If you change the order using &lt;code&gt;flex-direction&lt;/code&gt; you can see how the tab order continues to follow the order that the items are listed in the source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4ab10a7f257be62661e031bff67ee293e3eb39a" translate="yes" xml:space="preserve">
          <source>In the live example below I have set the Writing Mode to &lt;code&gt;horizontal-tb&lt;/code&gt;. Change it to &lt;code&gt;vertical-rl&lt;/code&gt; and you will see that the first example &amp;mdash; which uses &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; &amp;mdash; remains the same size in each dimension, despite the text becoming vertical. The second example &amp;mdash; which uses &lt;code&gt;inline-size&lt;/code&gt; and &lt;code&gt;block-size&lt;/code&gt; &amp;mdash; will follow the text direction as if the entire block has rotated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9255335d6547c17fb53a42e099f9699e6f877b0e" translate="yes" xml:space="preserve">
          <source>In the live example below for instance I have two paragraph elements that contain a string of text. The first paragraph has a width of &lt;code&gt;min-content&lt;/code&gt;. In a browser that supports this keyword you should be able to see that the text has taken all of the soft wrapping opportunities available to it, becoming as small as it can be without overflowing. This then, is the &lt;code&gt;min-content&lt;/code&gt; size of that string. Essentially, the longest word in the string is dictating the size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe0578e868834de2803e27df1531ba8bfe603e4" translate="yes" xml:space="preserve">
          <source>In the live example below try changing &lt;code&gt;flex: auto&lt;/code&gt; to &lt;code&gt;flex: 1&lt;/code&gt;. This is the shorthand for &lt;code&gt;flex: 1 1 0&lt;/code&gt; and causes all of the items become the same width, as they are working from a flex-basis of 0 allowing all of the space to be distributed evenly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ad6e0c50bd71863f070d61d4bca7421736cb5e" translate="yes" xml:space="preserve">
          <source>In the live example below try changing the first value to one of the allowable values for &lt;code&gt;flex-direction&lt;/code&gt; - &lt;code&gt;row&lt;/code&gt;, &lt;code&gt;row-reverse&lt;/code&gt;, &lt;code&gt;column&lt;/code&gt; or &lt;code&gt;column-reverse&lt;/code&gt;, and also change the second to &lt;code&gt;wrap&lt;/code&gt; and &lt;code&gt;nowrap&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16dae158bffff224106262746f0d0fcc88c16edf" translate="yes" xml:space="preserve">
          <source>In the live example below you can see our media object. I have used the alignment properties to align the items on the cross axis to &lt;code&gt;flex-start&lt;/code&gt;, and then set the &lt;code&gt;.content&lt;/code&gt; flex item to &lt;code&gt;flex: 1&lt;/code&gt;. As with our column layout card pattern above, using &lt;code&gt;flex: 1&lt;/code&gt; means this part of the card can grow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c19460d1f4c7e4fdf22b0b177370d1fa36e897" translate="yes" xml:space="preserve">
          <source>In the live example below, the flex container has a height of 400 pixels, which is more than needed to display our items. The value of &lt;code&gt;align-content&lt;/code&gt; is &lt;code&gt;space-between&lt;/code&gt;, which means that the available space is shared out &lt;em&gt;between&lt;/em&gt; the flex lines, which are placed flush with the start and end of the container on the cross axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de72aa481a11341fa849fe0ad912a6a89ed01688" translate="yes" xml:space="preserve">
          <source>In the live example below, the value of &lt;code&gt;align-items&lt;/code&gt; is &lt;code&gt;stretch&lt;/code&gt;. Try the other values and see how all of the items align against each other in the flex container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7dbae096f6a48b717d996edc8b77c8a7dbcfcdd" translate="yes" xml:space="preserve">
          <source>In the live example you can play with increasing or decreasing the size of the circle by changing the size of the radius, moving the circle around with the position value, or setting a reference box as we did for &lt;code&gt;inset()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69f077a50a8b4ba0f18cffd5902642889439327" translate="yes" xml:space="preserve">
          <source>In the most basic cases, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML&quot;&gt;HTML&lt;/a&gt; pages can be considered two-dimensional, because text, images, and other elements are arranged on the page without overlapping. In this case, there is a single rendering flow, and all elements are aware of the space taken by others. The &lt;a href=&quot;../z-index&quot;&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/a&gt; attribute lets you adjust the order of the layering of objects when rendering content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a1553c6b29e44ba9e3cf40fa7f07f3ce15e2e81" translate="yes" xml:space="preserve">
          <source>In the new syntax the inline flex container would be created using two values, inline for the outer display type, and flex for the inner display type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad572e0bec9e210a733b8fc55518843969ffc3e" translate="yes" xml:space="preserve">
          <source>In the next guide you will learn &lt;a href=&quot;handling_overflow_in_multicol&quot;&gt;how multicol handles overflow&lt;/a&gt;, both within columns and where there are more columns than will fit the container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b040c34fb21d744af8e84794daee27ccbdd29f" translate="yes" xml:space="preserve">
          <source>In the next live example I have three items in a flex container; I&amp;rsquo;ve given each a width of 200 pixels, and the container is 500 pixels wide. With &lt;code&gt;flex-shrink&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt; the items are not allowed to shrink and so they overflow the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15de18ad2c56f01b034aef435ca8f054cf14763a" translate="yes" xml:space="preserve">
          <source>In the past, a typeface would be produced as a number of individual fonts, and each font would represent one specific width/weight/style combination. So you would have separate files for 'Roboto Regular', 'Roboto Bold', and 'Roboto Bold Italic' &amp;mdash; meaning that you could end up with 20 or 30 different font files to represent a complete typeface (it could be several times that for a large typeface that has different widths as well).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c5a70b8682135d7d500c528eb8bc2a783415e68" translate="yes" xml:space="preserve">
          <source>In the previous example, we've already seen the &lt;code&gt;and&lt;/code&gt; operator used to group a media &lt;em&gt;type&lt;/em&gt; with a media &lt;em&gt;feature&lt;/em&gt;. The &lt;code&gt;and&lt;/code&gt; operator can also combine multiple media features into a single media query. The &lt;code&gt;not&lt;/code&gt; operator, meanwhile, negates a media query, basically reversing its normal meaning. The &lt;code&gt;only&lt;/code&gt; operator prevents older browsers from applying the styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54aaf5c1f5791f450a5eda896d09a4d47e064ea" translate="yes" xml:space="preserve">
          <source>In the previous part of this article, &lt;a href=&quot;../../understanding_z-index/adding_z-index&quot;&gt;Using z-index&lt;/a&gt;, the rendering order of certain elements is influenced by their &lt;code&gt;z-index&lt;/code&gt; value. This occurs because these elements have special properties which cause them to form a &lt;em&gt;stacking context&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="298c1440011be7fcdc1903def8750068922231c6" translate="yes" xml:space="preserve">
          <source>In the rare cases where width is overconstrained (i.e., when all of &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;margin-left&lt;/code&gt;, &lt;code&gt;border&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;, the content area, and &lt;code&gt;margin-right&lt;/code&gt; are defined), &lt;code&gt;margin-left&lt;/code&gt; is ignored, and will have the same calculated value as if the &lt;code&gt;auto&lt;/code&gt; value was specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b10380a91b23a0766d57e3e9940d0195da5d1aea" translate="yes" xml:space="preserve">
          <source>In the same way as &lt;code&gt;flex-grow&lt;/code&gt;, you can give flex-items different &lt;code&gt;flex-shrink&lt;/code&gt; factors. This can help change the default behaviour if, for example, you want an item to shrink more or less rapidly than its siblings or not shrink at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ac930cc01816801e88080be55a76d1e969c343c" translate="yes" xml:space="preserve">
          <source>In the same way that changing the value of &lt;code&gt;flex-direction&lt;/code&gt; does not change the order in which items are navigated to, changing this value does not change paint order. It is a visual reversal of the items only.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fdaf157d4234540dcc73994953caa29f02576a8" translate="yes" xml:space="preserve">
          <source>In the second example, we specify the end row line we want the item to finish at and then set the start line as &lt;code&gt;span 3&lt;/code&gt;. This means the item will need to span upwards from the specified row line. The area will start at line 4 and span 3 lines to line 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429c132b5a240a1fe584534ef94a564c2b27a8a4" translate="yes" xml:space="preserve">
          <source>In the two-value syntax, the first value represents the horizontal repetition behavior and the second value represents the vertical behavior. Here is an explanation of how each option works for either direction:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c1e39988743448f81127c10aa85b64c828f85c" translate="yes" xml:space="preserve">
          <source>In the working draft of the Level 2 Grid specification there is a feature called &lt;em&gt;subgrid&lt;/em&gt;, which would let us create nested grids that use the track definition of the parent grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbf959c3b8c657ace3d915449997fdc997852eb" translate="yes" xml:space="preserve">
          <source>In these guides, I have already touched on an important feature of grid layout: the support for different writing modes that is built into the specification. For this guide, we will look at this feature of grid and other modern layout methods, learning a little about writing modes and logical vs. physical properties as we do so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5e24e0ccb459d232b453d7662e12bfd14a990d" translate="yes" xml:space="preserve">
          <source>In this article we have had a very quick look through the Grid Layout Specification. Have a play with the code examples, and then move onto &lt;a href=&quot;relationship_of_grid_layout&quot;&gt;the next part of this guide where we will really start to dig into the detail of CSS Grid Layout&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2d1755aa3e53a8c361a46090ad5787f2b79d53" translate="yes" xml:space="preserve">
          <source>In this article we will take a look at how Flexbox fits in with all the other CSS modules. We&amp;rsquo;ll find out which specifications you also need to take notice of if you want to learn flexbox, and find out why flexbox is different to some other modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806b82362c952195fc17b42b9a51cb9fa51e8eb0" translate="yes" xml:space="preserve">
          <source>In this beginner's learning article we go through all the basic fundamentals of text/font styling in detail, including setting font weight, family and style, font shorthand, text alignment and other effects, and line and letter spacing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de98041c867702f8e697ecf112eb1cd3d2b3fc58" translate="yes" xml:space="preserve">
          <source>In this case the &lt;code&gt;flex-basis&lt;/code&gt; value is &lt;code&gt;auto&lt;/code&gt; and the items don&amp;rsquo;t have a width set, and so are auto-sized. This means that flexbox is looking at the &lt;code&gt;max-content&lt;/code&gt; size of the items. After laying the items out we have some positive free space in the flex container, shown in this image as the hatched area:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736ae764cd69dc03945633b96e49c9764f9f0747" translate="yes" xml:space="preserve">
          <source>In this case the nested grid has no relationship to the parent. As you can see in the example it has not inherited the &lt;a href=&quot;../grid-gap&quot;&gt;&lt;code&gt;grid-gap&lt;/code&gt;&lt;/a&gt; of the parent and the lines in the nested grid do not align to the lines in the parent grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee3abeeefcb696e519075ddfb065ea8f0e21fa6a" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;@stylistic(alternates)&lt;/code&gt; will show all the alternate characters for either font). Applying this to just the word 'My' alters the way the 'M' renders, and applying &lt;code&gt;@styleset(alt-a)&lt;/code&gt; only changes the lower case 'a'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb3359b2f15de06b821981f5c5a1ef62c9ffe31" translate="yes" xml:space="preserve">
          <source>In this case, declarations inside &lt;code&gt;li&lt;/code&gt; and &lt;code&gt;.specific&lt;/code&gt; rules should apply. No declaration is marked as &lt;code&gt;!important&lt;/code&gt;, so the precedence order is author style sheets before user style sheets or user-agent stylesheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e37a1a816cc7f4288f6c617f4216a22cfc3b1d3" translate="yes" xml:space="preserve">
          <source>In this case, the results of &lt;code&gt;var(--test)&lt;/code&gt; are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77516e387c9dadcedb44d5dbc60bce55d4029d7" translate="yes" xml:space="preserve">
          <source>In this case, the width is specified as auto in the CSS, so the 100px width specified in the SVG is selected, per rule 3. The height is set at 125px in the CSS, so that is selected per rule 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5310054937895cf86546219af6d059cabad1f60" translate="yes" xml:space="preserve">
          <source>In this case, we've overridden the height of the image in the CSS to be 150px, so rule 1 is applied. The intrinsic 3:4 aspect ratio then determines the width for the &lt;code&gt;auto&lt;/code&gt; case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d781426217c2387e7f6e906360a0d586be31724" translate="yes" xml:space="preserve">
          <source>In this case, you could set certain styles in your global CSS file as important, thus overriding inline styles set directly on elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45397822e66207fd90cf6afff12f8c4039bd46eb" translate="yes" xml:space="preserve">
          <source>In this demo we use a simple template with three slots:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1fd37daa0b6455d12ca6ad918e18c56ad8dfb5" translate="yes" xml:space="preserve">
          <source>In this example I am using the &lt;a href=&quot;grid-gap&quot;&gt;&lt;code&gt;grid-gap&lt;/code&gt;&lt;/a&gt; property in addition to &lt;a href=&quot;gap&quot;&gt;&lt;code&gt;gap&lt;/code&gt;&lt;/a&gt;. The gap properties were originally prefixed with &lt;code&gt;grid-&lt;/code&gt; in the Grid Layout specification and some browsers only support these prefixed versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab33cc8f883f39b02630231ec713a1fb9f6b8af1" translate="yes" xml:space="preserve">
          <source>In this example I have a &lt;code&gt;div&lt;/code&gt;, and then two paragraphs. I&amp;rsquo;ve added a background colour to the paragraphs, and then floated the &lt;code&gt;div&lt;/code&gt; left. The &lt;code&gt;div&lt;/code&gt; is now out of flow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c388f1b57cc0300303f4815e29dcd514c60b82a0" translate="yes" xml:space="preserve">
          <source>In this example I have added an extra div with a class of &lt;code&gt;overlay&lt;/code&gt;. We have named areas created using the &lt;code&gt;grid-area&lt;/code&gt; property, then a layout created in &lt;code&gt;grid-template-areas&lt;/code&gt;. The area names are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d7a6e6cb9021c32a21d567ca50da277e34d653" translate="yes" xml:space="preserve">
          <source>In this example I have created a series of inflexible boxes, with both &lt;code&gt;flex-grow&lt;/code&gt; and &lt;code&gt;flex-shrink&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt;. Here we can see how the first item &amp;mdash; which has an explicit width of 150 pixels set as the main size &amp;mdash; takes a &lt;code&gt;flex-basis&lt;/code&gt; of &lt;code&gt;150px&lt;/code&gt;, whereas the other two items have no width and so are sized according to their content width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="412fe06e90ef07f3a8c45d67a7f9f474e02dd569" translate="yes" xml:space="preserve">
          <source>In this example I have used grid to lay out a set of boxes that contain links. I have used the line-based placement properties to position box 1 on the second row of the grid. Visually it now appears as the fourth item in the list. However, if I tab from link to link the tab order still begins with box 1, as it comes first in the source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1902a41f08bb720c50d57bb90ac200a6e48005de" translate="yes" xml:space="preserve">
          <source>In this example every positioned element creates its own stacking context, because of their positioning and z-index values. The hierarchy of stacking contexts is organized as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac6b6cac80147f85cb84a6e58baf6c9d7e8b6af4" translate="yes" xml:space="preserve">
          <source>In this example the &lt;code&gt;h2&lt;/code&gt; elements inside the sidebar might be different colors. For example, if one of them were the child of a div matched by the rule ...</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="063e13fd7e98a47847078727baf87949e460b45a" translate="yes" xml:space="preserve">
          <source>In this example the outer &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; has a 2-pixel red border and a width of 300px. However it also has &lt;code&gt;display: contents&lt;/code&gt; specified therefore this &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; will not be rendered, the border and width will no longer apply, and the child element will be displayed as if the parent had never existed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2339f722a93ad17b557f00f1cc9071be7fdc80b" translate="yes" xml:space="preserve">
          <source>In this example the parent box has been given &lt;code&gt;display: flow-root&lt;/code&gt; and so establishes a new BFC and contains the floated item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b67c1002c50aacac315139c57d95668d10d0e8" translate="yes" xml:space="preserve">
          <source>In this example the style for the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/a&gt; element specifies that the animation should take 3 seconds to execute from start to finish, using the &lt;a href=&quot;../animation-duration&quot;&gt;&lt;code&gt;animation-duration&lt;/code&gt;&lt;/a&gt; property, and that the name of the &lt;a href=&quot;../@keyframes&quot;&gt;&lt;code&gt;@keyframes&lt;/code&gt;&lt;/a&gt; at-rule defining the keyframes for the animation sequence is named &amp;ldquo;slidein&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53dd3f7786387eb3a60090e064e9ea13616b56e2" translate="yes" xml:space="preserve">
          <source>In this example using Grid Layout, there is extra space in the grid container after laying out the fixed width tracks on the inline (main) axis. This space is distributed using &lt;a href=&quot;justify-content&quot;&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/a&gt;. On the block (cross) axis the alignment of the items inside their grid areas is controlled with &lt;a href=&quot;align-items&quot;&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/a&gt;. The first item overrides the &lt;code&gt;align-items&lt;/code&gt; value set on the group by setting &lt;a href=&quot;align-self&quot;&gt;&lt;code&gt;align-self&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;center&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9c9ab9029359316172493ce4648e51684251bc" translate="yes" xml:space="preserve">
          <source>In this example using grid layout, there is extra space in the grid container after laying out the fixed width tracks on the inline (main) axis. This space is distributed using &lt;code&gt;justify-content&lt;/code&gt;. On the block (cross) axis the alignment of the items inside their grid areas is controlled with &lt;code&gt;align-items&lt;/code&gt;. The first item overrides the &lt;code&gt;align-items&lt;/code&gt; value set on the group by setting &lt;code&gt;align-self&lt;/code&gt; to &lt;code&gt;center&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0ef9572f60f8fad26e4a8d393795da021a1024" translate="yes" xml:space="preserve">
          <source>In this example we have a simple SVG embedded using an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1ecfba8dac936602cce226f0a525c452bce4e46" translate="yes" xml:space="preserve">
          <source>In this example we have a simple custom element &amp;mdash; &lt;code&gt;&amp;lt;context-span&amp;gt;&lt;/code&gt; &amp;mdash; that you can wrap around text:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab70300010aee53a1d4aeb5a285bbc1ed68e55d" translate="yes" xml:space="preserve">
          <source>In this example we have chosen to use a thin scrollbar, with a green track and purple thumb.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e6cea9552a55843d2bcb32da6155d171d79902" translate="yes" xml:space="preserve">
          <source>In this example we will create a simple to-do list using pseudo-elements. This method can often be used to add small touches to the UI and improve user experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="332d826deccc38ea19f8d394c578d1b426fdfca4" translate="yes" xml:space="preserve">
          <source>In this example, I have a containing div with a class of wrapper, inside are five child elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6d5a1d99a9ff05027bff2fcc91f4ce68340e5d6" translate="yes" xml:space="preserve">
          <source>In this example, a box is shown which uses a &lt;a href=&quot;background-image&quot;&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt; and a translucent &lt;a href=&quot;linear-gradient()&quot;&gt;&lt;code&gt;linear-gradient()&lt;/code&gt;&lt;/a&gt; function atop a black background color to have a dark blue gradient behind medium red text. For whatever reason, this is the desired appearance in any rendering environment, including on paper, so we also use &lt;code&gt;color-adjust: exact&lt;/code&gt; to tell the browser not to make color or style adjustments to the box when rendering it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0397d42b42957ec7a2420f0d3d40eef5111f16" translate="yes" xml:space="preserve">
          <source>In this example, at the &lt;code&gt;50%&lt;/code&gt; keyframe, the value used is &lt;code&gt;top: 10px&lt;/code&gt; and all other values at this keyframe are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ac654a9756e0a155ec887105861fff09614bc62" translate="yes" xml:space="preserve">
          <source>In this example, each list item is matched with a different value of &lt;code&gt;background-repeat&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02a88ffb4dc21f397cef8436db853f12a4977a8" translate="yes" xml:space="preserve">
          <source>In this example, the &quot;child&quot; will be either 150 pixels wide or the width of the &quot;parent,&quot; whichever is smaller:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd83de097f457aca4617d547609c0852083229a0" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;:focus-visible&lt;/code&gt; selector uses the UA's behavior to determine when to match. Compare what happens when you click on the different controls with a mouse, versus when you tab through them using a keyboard. Note the difference in behavior from elements styled with &lt;code&gt;:focus&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b44feeccda260a2ec4520fda513e2f8b9b1ccb11" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;:lang()&lt;/code&gt; pseudo-class is used to match the parents of quote elements (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q&quot;&gt;&lt;code&gt;&amp;lt;q&amp;gt;&lt;/code&gt;&lt;/a&gt;) using &lt;a href=&quot;child_selectors&quot;&gt;child combinators&lt;/a&gt;. Note that this doesn't illustrate the only way to do this, and that the best method to use depends on the type of document. Also note that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Unicode&quot;&gt;Unicode&lt;/a&gt; values are used to specify some of the special quote characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67b84670575007b19965bbed12d24ced7044daf6" translate="yes" xml:space="preserve">
          <source>In this example, the backdrop style used when a video is shifted to full-screen mode is configured to be a grey-blue color rather than the black it defaults to in most browsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2197961de2034ce3a0acd9c847a7df7743ee0d" translate="yes" xml:space="preserve">
          <source>In this example, the color of a button is changed depending on whether or not the document is in full-screen mode. This is done without needing to specifically apply style changes using JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8341c52ecddd124038b8604cfb60f51198b3a52" translate="yes" xml:space="preserve">
          <source>In this example, the form will receive special coloring styles when either text input receives focus.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52daa9f0b6c22fa9e5bbfda478480ec5f25ee560" translate="yes" xml:space="preserve">
          <source>In this example, the heading is made to span across all the columns of the article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e87d69d07c9c894c3034361bd808a593fb08c03" translate="yes" xml:space="preserve">
          <source>In this example, the logo will be 300px wide unless the viewport narrows below 600px, at which point it will shrink as the viewport shrinks, always being 50% of the width of the viewport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19067ce1f6eacc110bbdb0b34166b958fa154550" translate="yes" xml:space="preserve">
          <source>In this example, the logo will be at least 300px wide, but wider if the viewport grows above 600px, at which point it will grow as the viewport grows, always being 50% of the width of the viewport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0426cb39d665012728355062616ab1b2be607897" translate="yes" xml:space="preserve">
          <source>In this example, the logo will be at least &lt;code&gt;100px&lt;/code&gt; wide on any viewport narrower than &lt;code&gt;400px&lt;/code&gt;, &lt;code&gt;300px&lt;/code&gt; on all viewports wider than &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;200px&lt;/code&gt;, and &lt;code&gt;40%&lt;/code&gt; of the width of the viewport on any viewport in between</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb05e2a3b5e7b79857fbb8ccc5703c7095cabe0e" translate="yes" xml:space="preserve">
          <source>In this example, the paragraph is statically positioned, so its containing block is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section&quot;&gt;&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;&lt;/a&gt; because it's the nearest ancestor that is a block container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358e779fd1295cdbaaaa0e6445f5216451a0da40" translate="yes" xml:space="preserve">
          <source>In this example, the paragraph's &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;absolute&lt;/code&gt;, so its containing block is &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;, which is the nearest ancestor with a &lt;a href=&quot;transform&quot;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/a&gt; property that isn't &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda72dc80a09c48db182ec86df3ba5126b8b0dc2" translate="yes" xml:space="preserve">
          <source>In this example, the paragraph's &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;fixed&lt;/code&gt;, so its containing block is the initial containing block (on screens, the viewport). Thus, the paragraph's dimensions change based on the size of the browser window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0758459123b42520a114217ed622ed76c466616" translate="yes" xml:space="preserve">
          <source>In this example, the paragraph's containing block is &lt;code&gt;&amp;lt;section&lt;/code&gt;&amp;gt; because the latter's &lt;code&gt;position&lt;/code&gt; is &lt;code&gt;absolute&lt;/code&gt;. The paragraph's percentage values are affected by the padding of its containing block, though if the containing block's &lt;a href=&quot;box-sizing&quot;&gt;&lt;code&gt;box-sizing&lt;/code&gt;&lt;/a&gt; value were &lt;code&gt;border-box&lt;/code&gt; this would not be the case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6fee04ab283dff0d4d2d7022c28ed42a91cea7d" translate="yes" xml:space="preserve">
          <source>In this example, the paragraph's containing block is the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/a&gt;element, because &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; is not a block container (because of &lt;code&gt;display: inline&lt;/code&gt;) and doesn&amp;rsquo;t establish a formatting context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00395bb5a0aad2ed5d0d93720d17446961477403" translate="yes" xml:space="preserve">
          <source>In this example, the same text (the opening sentences from &lt;a href=&quot;https://en.wikipedia.org/wiki/Herman%20Melville&quot;&gt;Herman Melville's&lt;/a&gt; novel &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Moby-Dick&quot;&gt;Moby-Dick&lt;/a&gt;&lt;/em&gt;) is presented in both the &lt;code&gt;horizontal-tb&lt;/code&gt; and &lt;code&gt;vertical-rl&lt;/code&gt; writing modes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc257e33a740fd90225680b0dd9f6c9ce4df0661" translate="yes" xml:space="preserve">
          <source>In this example, the user's local copy of &quot;Helvetica Neue Bold&quot; is used; if the user does not have that font installed (two different names are tried), then the downloadable font named &quot;MgOpenModernaBold.ttf&quot; is used instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8ce626cc2282855c9a1b23f66e4e42cd674533" translate="yes" xml:space="preserve">
          <source>In this example, the words &amp;ldquo;outer inner outer&amp;rdquo; are all displayed at 16px (assuming that the browser's font-size has been left at the default value of 16px).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295218d390251d7633be0ef73d699cd7d3e84cde" translate="yes" xml:space="preserve">
          <source>In this example, there are three colored squares. Two are floated left, and one is floated right. Note that the second &quot;left&quot; square is placed to the right of the first. Additional squares would continue to stack to the right, until they filled the containing box, after which they would wrap to the next line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28d8af3c68a1c92be8dd4fbaee92947feb9a524" translate="yes" xml:space="preserve">
          <source>In this example, three backgrounds are stacked: the Firefox logo, an image of bubbles, and a &lt;a href=&quot;../linear-gradient&quot;&gt;linear gradient&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b612631dd720f9df9f69703fdb146edab4d97d6" translate="yes" xml:space="preserve">
          <source>In this example, three flex items are aligned on the main axis using &lt;a href=&quot;../justify-content&quot;&gt;&lt;code&gt;justify-content&lt;/code&gt;&lt;/a&gt; and on the cross axis using &lt;a href=&quot;../align-items&quot;&gt;&lt;code&gt;align-items&lt;/code&gt;&lt;/a&gt;. The first item overrides the &lt;code&gt;align-items&lt;/code&gt; values set on the group by setting &lt;a href=&quot;../align-self&quot;&gt;&lt;code&gt;align-self&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;center&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ede25712a221e9f3e81c4741468a909668b1354a" translate="yes" xml:space="preserve">
          <source>In this example, three flex items are aligned on the main axis using &lt;code&gt;justify-content&lt;/code&gt; and on the Cross Axis using &lt;code&gt;align-items&lt;/code&gt;. The first item overrides the &lt;code&gt;align-items&lt;/code&gt; set on the group by setting &lt;code&gt;align-self&lt;/code&gt; to &lt;code&gt;center&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cef6b867595ea0f2428f53018a77520d67621d" translate="yes" xml:space="preserve">
          <source>In this example, two boxes are created. One is positioned normally on the page, without being translated at all. The second is altered by applying perspective to create a 3D space, then moved towards the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea023ee7b8a6bcc414e564c11ef78be2503a625" translate="yes" xml:space="preserve">
          <source>In this example, we have columns containing an image and some text which are balanced. The image cannot break and so goes into the first column and the other columns fill with equal amounts of text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b247df6056180dabadfba97684c24ee8e83d0a" translate="yes" xml:space="preserve">
          <source>In this example, we use the &lt;a href=&quot;@keyframes&quot;&gt;@keyframes&lt;/a&gt; at-rule to animate a clip path between two polygons. Note that both polygons have the same number of vertices, which is necessary for this type of animation to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777f3175810329d16cd033d78fbd41134f7ba6c2" translate="yes" xml:space="preserve">
          <source>In this example, we will apply a diamond pattern to an element's borders. The source for the border image is a &quot;.png&quot; file of 81 by 81 pixels, with three diamonds going vertically and horizontally:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a04deca6ccf92f3977eaec49feb1e4bd24cc607" translate="yes" xml:space="preserve">
          <source>In this example, we will mask an element's border with a diamond pattern. The source for the mask is a &quot;.png&quot; file of 90 by 90 pixels, with three diamonds going vertically and horizontally:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19f409b642b700a7741d515aa25cefb2eeb6a7a7" translate="yes" xml:space="preserve">
          <source>In this examples, the viewport has an aspect ratio of 3::4, and is, but default, 400 by 300 units, with a unit generally being a CSS pixel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b124c77f342aef6fd7cc0b2dda62beaf76c60318" translate="yes" xml:space="preserve">
          <source>In this final example, we mix absolute sized tracks with fraction units. The first track is 500 pixels, so the fixed width is taken away from the available space. The remaining space is divided into three and assigned in proportion to the two flexible tracks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef7c49d17356103c7444c86fc675c00aa420cac" translate="yes" xml:space="preserve">
          <source>In this first example, I am using flexbox to lay out a set of boxes. I have five child items in my container, and I have given the flex properties values so that they can grow and shrink from a flex-basis of 200 pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49c9edcd7ca34953a32c078aa06a5189be93756" translate="yes" xml:space="preserve">
          <source>In this first example, the paragraph with a class of secret is set to &lt;code&gt;display: none&lt;/code&gt;; the box and any content is now not rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e642bc433d4b469dfd9c5fc854ff21ee02c332" translate="yes" xml:space="preserve">
          <source>In this first example, we have three animation names set, but only one duration and iteration count. In this case all three animations are given the same duration and iteration count:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b36ed6a0cf82c9b632e114b0b915e676377322" translate="yes" xml:space="preserve">
          <source>In this guide we have covered the ways to take an element out of flow in order to achieve some very specific types of positioning. In the next guide we will look at a related issue, that of creating a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context&quot;&gt;Block Formatting Context&lt;/a&gt;, in &lt;a href=&quot;formatting_contexts_explained&quot;&gt;Formatting Contexts Explained&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fe79173b650cf6b15eaec92005b75ac0e5f6a6e" translate="yes" xml:space="preserve">
          <source>In this guide we have looked at how elements display in normal flow, as block and inline elements. Due to the default behaviour of these elements, an HTML document with no CSS styling at all, will display in a readable way. By understanding how normal flow works you will find layout easier, as you understand the starting point for making changes to how elements are displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560c7a80ac2b41b30443dc7f5d74375643fdb99d" translate="yes" xml:space="preserve">
          <source>In this guide we look at how multicol deals with overflow, both inside the column boxes and in situations where there is more content than will fit into the container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa5834c0c36159dc4caa85e9c661a30c7034b10" translate="yes" xml:space="preserve">
          <source>In this guide we look at how to make elements span across columns inside the multicol container and how to control how the columns are filled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec81815788cdee36d0f63eb9f5a3de9611332cbf" translate="yes" xml:space="preserve">
          <source>In this guide we will be exploring the three properties that are applied to flex items, which enable us to control the size and flexibility of the items along the main axis &amp;mdash; &lt;a href=&quot;../flex-grow&quot;&gt;&lt;code&gt;flex-grow&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../flex-shrink&quot;&gt;&lt;code&gt;flex-shrink&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../flex-basis&quot;&gt;&lt;code&gt;flex-basis&lt;/code&gt;&lt;/a&gt;. Fully understanding how these properties work with growing and shrinking items is the real key to mastering flexbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12eb90f1f2c4331abba2086bc3189f09e2b6956d" translate="yes" xml:space="preserve">
          <source>In this guide we will be working in English and therefore a horizontal writing mode. However everything described should work in the same way if your document is in a vertical writing mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f190d19ff3b5dcb8edef3ce7639c3510d940c9a" translate="yes" xml:space="preserve">
          <source>In this guide we will explain the flow-relative mappings between physical dimension properties and logical properties used for sizing elements on our pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd5400f2805da7d3a64aaf3cb577389c4279dd5" translate="yes" xml:space="preserve">
          <source>In this guide we will explore the basics of how Block and Inline elements behave when they are part of the normal flow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71d4177d3df1f5adbf75061c043edf60ae73820" translate="yes" xml:space="preserve">
          <source>In this guide we will take a look at how we can create a shape from an image file with an alpha channel or even from a CSS Gradient. This is a very flexible way to create shapes. Rather than drawing a path with a complex polygon in CSS, you can create the shape in a graphics program and then use the path created by the pixels less opaque than a threshold value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf7243405852652880321cc5f32d9cd015253a87" translate="yes" xml:space="preserve">
          <source>In this guide we will take a look at some of the common use cases for flexbox &amp;mdash; those places where it makes more sense than another layout method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c369434f0cbb80c77f28d00e5adb6638a40866d4" translate="yes" xml:space="preserve">
          <source>In this guide we've learned the basic use of Multiple-column Layout. In the next guide, we will look at how much we can &lt;a href=&quot;styling_columns&quot;&gt;style the columns themselves&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b084a1661072a060b83c6fe748fbe80cb49e4e55" translate="yes" xml:space="preserve">
          <source>In this guide, we have looked in more detail at the Block and Inline formatting contexts and the important subject of creating a Block Formatting Context (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894ad065b880efb046399e4c581281e023d2cbfa" translate="yes" xml:space="preserve">
          <source>In this layout I am displaying the &lt;code&gt;nav&lt;/code&gt; in the left column, alongside the &lt;code&gt;content&lt;/code&gt;. In the right column we have the &lt;code&gt;sidebar&lt;/code&gt; and underneath it the advertisements (&lt;code&gt;ad&lt;/code&gt;). The &lt;code&gt;footer&lt;/code&gt; now spans right across the bottom of the layout. I then use a flexbox to display the navigation as a column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8046361e162f8162328099254c9f3f90b369b465" translate="yes" xml:space="preserve">
          <source>In this live example, I have flex items arranged simply into a row with the basic flex values, and the class &lt;code&gt;push&lt;/code&gt; has &lt;code&gt;margin-left: auto&lt;/code&gt;. You can try removing this, or adding the class to another item to see how it works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="addbdbfa597bf4397a880f55afc7ee17461debaa" translate="yes" xml:space="preserve">
          <source>In this next example I am creating a grid with twelve equal width columns. Before defining the 1fr size of the column track I am also defining a line name of &lt;code&gt;[col-start]&lt;/code&gt;. This means that we will end up with a grid that has 12 column lines all named &lt;code&gt;col-start&lt;/code&gt; before a &lt;code&gt;1fr&lt;/code&gt; width column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ca2180fd3ba56a4f137be4481eff630b8a4004" translate="yes" xml:space="preserve">
          <source>In this next example I am using a radial gradient with an ellipse, once again using a transparent part of the gradient to create the shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c428c107ed972dc1ac3c79b4dd54c29982843f" translate="yes" xml:space="preserve">
          <source>In this next example I have created a 5px dotted rule with a color of rebeccapurple, using the longhand values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f382cb59109f14176648fc3e38c1b8e7dcd683" translate="yes" xml:space="preserve">
          <source>In this next example I have created a grid with three row tracks of 200 pixels height. I am auto-placing by column and the columns created will be a column width of 300 pixels, then a column width of 100 pixels until there are enough column tracks to hold all of the items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d58b7d65ac546b399afad6d9a6369a39d2e05b3" translate="yes" xml:space="preserve">
          <source>In this next example I have flipped the layout we were working with by working from the right and bottom of our grid when placing the items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3c940264e268d6c31f9d0d0421f196b27ca1d4" translate="yes" xml:space="preserve">
          <source>In this next example I have items laid out with &lt;code&gt;flex-direction: row-reverse&lt;/code&gt; and &lt;code&gt;justify-content: flex-end&lt;/code&gt;. In a left to right language the items all line up on the left. Try changing &lt;code&gt;flex-direction: row-reverse&lt;/code&gt; to &lt;code&gt;flex-direction: row&lt;/code&gt;. You will see that the items now move to the right hand side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7176a19349b289924a8d561434823becf5e83be" translate="yes" xml:space="preserve">
          <source>In this next example I have used generated content and floated this content, giving it a background image of a linear gradient. I am using that same value as the value of &lt;a href=&quot;../shape-outside&quot;&gt;&lt;code&gt;shape-outside&lt;/code&gt;&lt;/a&gt;. The linear gradient goes from purple to transparent, so by changing the value of &lt;a href=&quot;../shape-image-threshold&quot;&gt;&lt;code&gt;shape-image-threshold&lt;/code&gt;&lt;/a&gt; I can decide how transparent the pixels need to be that create my shape. You can play with that value in the example below to see how the diagonal line will move across the shape depending on that value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef0b60b4ce51d12bccf1dd0dd58eaaeb0bf7a19" translate="yes" xml:space="preserve">
          <source>In this next example we have a very wide rule of 40px and a 10px gap. The rule displays under the content of the columns. In order to make space on both sides of the rule, the gap would need to be increased to be larger than 40px.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b59d890e7f4e3765ec4193e94861b8a5cff7e3" translate="yes" xml:space="preserve">
          <source>In this next example we use &lt;code&gt;column-width&lt;/code&gt; of 200px and &lt;code&gt;column-count&lt;/code&gt; of 2. Even if there is space for more than two columns, we get two. If there is not enough space for two columns of 200px, however, we get one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f42d4d64c1b28b794e56de37696221800d17844" translate="yes" xml:space="preserve">
          <source>In this next example, I am using alignment to align items inside a grid that is set to &lt;code&gt;writing-mode: vertical-lr&lt;/code&gt;. The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; properties work in exactly the same way that they do in the default writing mode, and remain logical in a way that using left and right, top and bottom to align items would not do. This occurs once we've flipped the grid onto the side, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6435f01bf3294973dceb380e2ad6fb153badcdd3" translate="yes" xml:space="preserve">
          <source>In this next example, I am using the &lt;code&gt;align-self&lt;/code&gt; property, to demonstrate the different alignment values. The first area, is showing the default behavior of &lt;code&gt;align-self&lt;/code&gt;, which is to stretch. The second item, has an &lt;code&gt;align-self&lt;/code&gt; value of &lt;code&gt;start&lt;/code&gt;, the third &lt;code&gt;end&lt;/code&gt; and the fourth &lt;code&gt;center&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450ec4b74d7ec30835341870892187b70349cf41" translate="yes" xml:space="preserve">
          <source>In this next example, I create the same layout using Grid. This time we have three &lt;code&gt;1fr&lt;/code&gt; column tracks. We do not need to set anything on the items themselves; they will lay themselves out one into each cell of the created grid. As you can see they stay in a strict grid, lining up in rows and columns. With five items, we get a gap on the end of row two.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d86041f429ab39cc1d54ca1412fb533b6c2c23b" translate="yes" xml:space="preserve">
          <source>In this next example, I have a grid which is in the default &lt;code&gt;ltr&lt;/code&gt; direction. I have positioned three items using line-based placement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76fe79de294799d84a377ed9f0bd87108d4e5530" translate="yes" xml:space="preserve">
          <source>In this next example, I have a set of floated cards. I have given the cards a &lt;a href=&quot;../width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt;, in order to &lt;a href=&quot;../float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; them. To create gaps between the cards, I use a &lt;a href=&quot;../margin&quot;&gt;&lt;code&gt;margin&lt;/code&gt;&lt;/a&gt; on the items, and then a negative margin on the container:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a41af96fa439594a9c9a2f227cd2e749f6b63f9" translate="yes" xml:space="preserve">
          <source>In this next example, I have given item 1 a left margin of &lt;code&gt;auto&lt;/code&gt;. You can see how the content is now pushed over to the right side of the area, as the auto margin takes up remaining space, after room for the content of that item has been assigned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f30ed07e3cd3c843396e46c62fbe2a02a25efb" translate="yes" xml:space="preserve">
          <source>In this next example, I have used the &lt;code&gt;auto-fill&lt;/code&gt; keyword in place of an integer in the repeat notation and set the track listing to 200 pixels. This means that grid will create as many 200 pixels column tracks as will fit in the container.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2982be72f345f765fed413ddc83804876ee1a78" translate="yes" xml:space="preserve">
          <source>In this next example, we are forcing a column break before an &lt;code&gt;h2&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652ad4cb93ddfd0600d6d3e03a2888739cf6e8c6" translate="yes" xml:space="preserve">
          <source>In this next example, we create a definition with a &lt;code&gt;2fr&lt;/code&gt; track then two &lt;code&gt;1fr&lt;/code&gt; tracks. The available space is split into four. Two parts are given to the first track and one part each to the next two tracks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024e9bf3836151e6e4ed4624c52d548406522b62" translate="yes" xml:space="preserve">
          <source>In this next example, we have an image with a fully transparent area, and we are using an image as the URL value for &lt;code&gt;shape-outside&lt;/code&gt;. The shape is created around the opaque area &amp;mdash; the image of the balloon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28e814ceebfac81c29dcbeb9d6fa5abc42215c4" translate="yes" xml:space="preserve">
          <source>In this next example, we use generated content to insert an element with height and width of 150px. We can then use Basic Shapes, Box Values or even the Alpha Channel of an image to create a shape for the text to wrap around.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1cc1033f6ec4105d2b88f1d9d6a23e1af2ba4a" translate="yes" xml:space="preserve">
          <source>In this next live example the child elements have been floated, and then their container has had &lt;code&gt;display: flex&lt;/code&gt; added. If you remove &lt;code&gt;display: flex&lt;/code&gt;, you should see that the &lt;code&gt;.box&lt;/code&gt; element collapses as we have no clearing applied. This demonstrates that the float is happening. Re-apply &lt;code&gt;display: flex&lt;/code&gt; and the collapsing does not happen. This is because the items no longer have a float applied, as they have been transformed into flex items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9917d9090b46b26b776cd3f47fb9058e7fbcf2" translate="yes" xml:space="preserve">
          <source>In this next live example, the flex container has &lt;code&gt;align-items: flex-start&lt;/code&gt;, which means the items are all aligned to the start of the cross axis. I have targeted the first item using a &lt;code&gt;first-child&lt;/code&gt; selector and set that item to &lt;code&gt;align-items: stretch&lt;/code&gt;; another item has been selected using its class of &lt;code&gt;selected&lt;/code&gt; and given &lt;code&gt;align-self: center&lt;/code&gt;. You can change the value of &lt;code&gt;align-items&lt;/code&gt; or change the values of &lt;code&gt;align-self&lt;/code&gt; on the individual items to see how this works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25e4cff8bc1de15a7b6a4d9f9db4052bf34ad22" translate="yes" xml:space="preserve">
          <source>In this second example, the heading is inside an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article&quot;&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/a&gt; element, yet still spans the content as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d95b80d739ad38b15e1a3fdeb90791ffa94270" translate="yes" xml:space="preserve">
          <source>In this second example, we have three values set on all three properties. In this case each animation is run with the corresponding values in the same position on each property, so for example &lt;code&gt;fadeInOut&lt;/code&gt; has a duration of 2.5s and an iteration count of 2, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6624c485007896db525d492a296809c5e3526552" translate="yes" xml:space="preserve">
          <source>In this section we'll demonstrate the five registered axes defined with examples and the corresponding CSS. Where possible, both the standard and lower-level syntax are included. The lower-level syntax (&lt;a href=&quot;../font-variation-settings&quot;&gt;&lt;code&gt;font-variation-settings&lt;/code&gt;&lt;/a&gt;) was the first mechanism implemented in order to test the early implementations of variable font support, and is necessary to utilize new or custom axes beyond the five registered ones. However, the W3C&amp;rsquo;s intent was for this syntax not to be used when other attributes are available. Therefore wherever possible, the appropriate property should be used, with the lower-level syntax of &lt;code&gt;font-variation-settings&lt;/code&gt; only being used to set values or axes not available otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7643a56f4d1bf32ce6e36a0cfa039989c44fb487" translate="yes" xml:space="preserve">
          <source>In this simple example, we demonstrate that using the &lt;code&gt;:scope&lt;/code&gt; pseudo-class from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/matches&quot;&gt;&lt;code&gt;Element.matches()&lt;/code&gt;&lt;/a&gt; method matches the element on which it's called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5270cde51b1b7c90a7293f0f1fae6909d66d23" translate="yes" xml:space="preserve">
          <source>In this situation, the content should visibly overflow into the next column, rather than be clipped by the column box. You can see an example of this below, with an image of the expected rendering as, at the time of writing, browsers deal with this differently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72973ef63e6a9ff00825c45420d00819b46d36c2" translate="yes" xml:space="preserve">
          <source>In this third case, there are three animations specified, but only two durations and interation counts. In such cases where there are not enough values to give a separate value to each animation, the values cycle from start to finish. So for example, fadeInOut gets a duration of 2.5s and moveLeft300px gets a duration of 5s. We&amp;rsquo;ve now got to the end of the available duration values, so we start from the beginning again &amp;mdash; bounce therefore gets a duration of 2.5s. The iteration counts (and any other property values you specify) will be assigned in the same way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2558fd823931a54dbf0a6e55ef3f9f9b05daeb01" translate="yes" xml:space="preserve">
          <source>In typography, a &lt;em&gt;widow&lt;/em&gt; is the last line of a paragraph that appears alone at the top of a page. (The paragraph is continued from a prior page.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57356f30745af0f8d99353ba3973ba7d71d35d87" translate="yes" xml:space="preserve">
          <source>In typography, an &lt;em&gt;orphan&lt;/em&gt; is the first line of a paragraph that appears alone at the bottom of a page. (The paragraph continues on a following page.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1295125878ef2e3696c6d7a9913982915a23505" translate="yes" xml:space="preserve">
          <source>In use, flex-grow is used alongside the other flex properties &lt;a href=&quot;flex-shrink&quot;&gt;&lt;code&gt;flex-shrink&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;flex-basis&quot;&gt;&lt;code&gt;flex-basis&lt;/code&gt;&lt;/a&gt;, and normally defined using the &lt;a href=&quot;flex&quot;&gt;&lt;code&gt;flex&lt;/code&gt;&lt;/a&gt; shorthand to ensure all values are set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a629f4456cd1b3f3422b572f5e8f5978be5bf6" translate="yes" xml:space="preserve">
          <source>In user stylesheets, &lt;code&gt;revert&lt;/code&gt; rolls back the cascade and resets the property to the default value established by the user-agent stylesheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68377b80ba8bfb68806ed369db4e328abe103006" translate="yes" xml:space="preserve">
          <source>In vertical layout, text lines are rotated 90&amp;deg; clockwise. Images are not rotated, but tables are. Box layout in vertical orientations is exactly analogous to layout in the horizontal orientation: width, height, top, bottom, right, and left do not rotate with the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f12aabf30c3d809090191dde68b2d0d96217924c" translate="yes" xml:space="preserve">
          <source>In vertical writing-modes, this keyword forces the line to be placed on the &lt;em&gt;left&lt;/em&gt; side of the text. In horizontal writing-modes, it is a synonym of &lt;code&gt;under&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df5480fc9a3cd8df5cf523f4865d4069f3e6da6" translate="yes" xml:space="preserve">
          <source>In vertical writing-modes, this keyword forces the line to be placed on the &lt;em&gt;right&lt;/em&gt; side of the text. In horizontal writing-modes, it is a synonym of &lt;code&gt;under&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d68d98e7c75afd61a627f9009b0121168ba678d" translate="yes" xml:space="preserve">
          <source>Inactive window border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5813b4444dc1ad919c3de626ebee7feed7784a9" translate="yes" xml:space="preserve">
          <source>Inactive window caption. Should be used with the &lt;code&gt;InactiveCaptionText&lt;/code&gt; foreground color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8089934e3733c88ac43f87dabb6ec967b17cd302" translate="yes" xml:space="preserve">
          <source>InactiveBorder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf6c7454a5d75134c833f285e60fd42cb8b53a2" translate="yes" xml:space="preserve">
          <source>InactiveCaption</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818983c6c3bd9ae531425923d7d5fd8b144880d4" translate="yes" xml:space="preserve">
          <source>InactiveCaptionText</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6aac808c0fe6cf21264c2eae13373e7440d5e53" translate="yes" xml:space="preserve">
          <source>Included in the CSS standard are several functions that achieve predefined effects. You can also reference an SVG filter with a URL to an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/filter&quot;&gt;SVG filter element&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3c3a5240fd9c1b5943662f3e39aaacd6293c66" translate="yes" xml:space="preserve">
          <source>Including a custom property as a fallback, as seen in the second example above, is the correct way to provide more than one fallback. The technique has been seen to cause performance issues as it takes more time to parse through the variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0c217bfb6ea4be2c8fd5ef4aa8bbe7717d5817" translate="yes" xml:space="preserve">
          <source>Increases or decreases the image's contrast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e888817533e00da62ae38d09764b77ce9f7434" translate="yes" xml:space="preserve">
          <source>Indentation affects the first line of the block container as well as each line after a &lt;em&gt;forced line break&lt;/em&gt;, but does not affect lines after a &lt;em&gt;soft wrap break&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093bf9ec6dd856df64bcfd74b77986603f15a122" translate="yes" xml:space="preserve">
          <source>Indentation is a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; of the containing block's width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b44b23c3d597c381e474b494b2972b81af9d59" translate="yes" xml:space="preserve">
          <source>Indentation is specified as an absolute &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt;. Negative values are allowed. See &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; values for possible units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd2f19eefd456f70d1414221221bcdeb9e87aca" translate="yes" xml:space="preserve">
          <source>Indenting It Twice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91ef53c4f9517bb3c703e7f413fb0ba43d954064" translate="yes" xml:space="preserve">
          <source>Index of standard pseudo-classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6204307052013e66ad5d83ee92b09aad581a70d" translate="yes" xml:space="preserve">
          <source>Index of standard pseudo-elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a0c33fd26b877b3c88e9990f4c17f8d1ab926b" translate="yes" xml:space="preserve">
          <source>Indicates automatic sizing, based on the flex item&amp;rsquo;s content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b7e02e457885aff182a02497b250067b0fce96" translate="yes" xml:space="preserve">
          <source>Indicates that all containment rules are applied to the element. This is equivalent to &lt;code&gt;contain: size layout style paint&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad4208a44b4fcf08762676713c51991bdb741f8" translate="yes" xml:space="preserve">
          <source>Indicates that all containment rules except size are applied to the element. This is equivalent to &lt;code&gt;contain: layout style paint&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76c967548165c52b6714b82006908a02a0eec5ce" translate="yes" xml:space="preserve">
          <source>Indicates that descendants of the element don't display outside its bounds. If an element is off-screen or otherwise not visible, its descendants are also guaranteed to not be visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9992dd4ebf40c2133057f97bed4903e88f20514" translate="yes" xml:space="preserve">
          <source>Indicates that hyphenation is not limited based on the number of consecutive hyphenated lines. In the flow above the consecutive hyphenated lines limit would be an infinitely large positive number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af515e5ff5e0048ca2802888ef41138e63bd912" translate="yes" xml:space="preserve">
          <source>Indicates that no perspective transform is to be applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ef9fb75a3714493eee24701fb447034362686f" translate="yes" xml:space="preserve">
          <source>Indicates that nothing outside the element may affect its internal layout and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d87d74e4af4b0f82017bad2520c93e6278d23bd" translate="yes" xml:space="preserve">
          <source>Indicates that the author expects to animate or change something about the element&amp;rsquo;s contents in the near future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d21f995e0e60859e2e4e5d259a4e2d08a471ac6" translate="yes" xml:space="preserve">
          <source>Indicates that the author expects to animate or change the property with the given name on the element in the near future. If the property given is a shorthand, it indicates the expectation for all the longhands the shorthand expands to. It cannot be one of the following values: &lt;code&gt;unset&lt;/code&gt;, &lt;code&gt;initial&lt;/code&gt;, &lt;code&gt;inherit&lt;/code&gt;, &lt;code&gt;will-change&lt;/code&gt;, &lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;scroll-position&lt;/code&gt;, or &lt;code&gt;contents&lt;/code&gt;. The spec doesn't define the behavior of particular value, but it is common for &lt;code&gt;transform&lt;/code&gt; to be a compositing layer hint. &lt;a href=&quot;https://github.com/operasoftware/devopera/pull/330&quot;&gt;Chrome currently takes two actions&lt;/a&gt;, given particular CSS property idents: establish a new compositing layer or a new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/stacking_context&quot;&gt;stacking context&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376a6b6761a1236cbc5ca78b950ad38728dc3262" translate="yes" xml:space="preserve">
          <source>Indicates that the author expects to animate or change the scroll position of the element in the near future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85757f4706dbef331f1e9ad56eef357581956ff" translate="yes" xml:space="preserve">
          <source>Indicates that the children of the element are lying in the plane of the element itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8657d0e7e94e8a29012df19a8b56b51588223ebf" translate="yes" xml:space="preserve">
          <source>Indicates that the children of the element should be positioned in the 3D-space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="900e692bdd75bdd19e0e08f1766c6b02f6a35ab7" translate="yes" xml:space="preserve">
          <source>Indicates that the element can be sized without the need to examine its descendants for size changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9afdaadca5f930e0afcb841e7c0b0e523049632" translate="yes" xml:space="preserve">
          <source>Indicates that the motion of the content after the contact is picked up &lt;em&gt;may&lt;/em&gt; be adjusted if the content would normally stop &quot;close enough&quot; to a snap-point. This implies that it is possible for the content zoom factor to end up between snap-points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7248b1f2ea440b2a27159e8f685d427450ccbae" translate="yes" xml:space="preserve">
          <source>Indicates that the motion of the content after the contact is picked up is &lt;em&gt;always&lt;/em&gt; adjusted so that it lands on a snap-point. The snap-point that is selected is the one that is closest to where the content zoom factor would normally stop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94ae74d78a0d8167beb4e4910395de4a20161b6" translate="yes" xml:space="preserve">
          <source>Indicates that the subsequent styling rules will be applied when the system is placed in high contrast mode with a black-on-white color variation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa0837a7b17822f6fc62fe841ad4c975a17baef" translate="yes" xml:space="preserve">
          <source>Indicates that the subsequent styling rules will be applied when the system is placed in high contrast mode with a white-on-black color variation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f33e7aedbb6a523ec537d9ae4879bcfc5f48fcf" translate="yes" xml:space="preserve">
          <source>Indicates that the subsequent styling rules will be applied when the system is placed in high contrast mode with any color variation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ff9899c62377575c0a87b3629798d0f3bf743a" translate="yes" xml:space="preserve">
          <source>Indicates that the user has made no preference known to the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e9c9dd712a6bc67161319559b764237e6c1df1f" translate="yes" xml:space="preserve">
          <source>Indicates that user has notified the system that they prefer an interface that minimizes the amount of movement or animation, preferably to the point where all non-essential movement is removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599b3405595517238644e81150c0148e6c603549" translate="yes" xml:space="preserve">
          <source>Indicates that, for properties that can have effects on more than just an element and its descendants, those effects don't escape the containing element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac8d93f17aa617efa9f7d24e607782a7a610b3a" translate="yes" xml:space="preserve">
          <source>Indicates the applicable CSS properties &lt;em&gt;will not&lt;/em&gt; be adjusted when the system is in high contrast mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="184dbe0e24e2a9d65b78e649559a50b605bcc0bf" translate="yes" xml:space="preserve">
          <source>Indicates the applicable CSS properties &lt;em&gt;will&lt;/em&gt; be adjusted as expected when the system is in high contrast mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14946a92dd72a9ab17ac591a0616c5060511fd0b" translate="yes" xml:space="preserve">
          <source>Indicates the element renders as normal, with no containment applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c936a53222ff1ddf11f85c45d07e632fcb291642" translate="yes" xml:space="preserve">
          <source>Indicates the maximum number of successive hyphenated lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fa6b5b51639cebe6128a3c2add3611ab1953e9c" translate="yes" xml:space="preserve">
          <source>Indicates the optimal column width. The actual column width may differ from the specified value: it may be wider when necessary to fill available space, and narrower when the available space is too small. The value must be strictly positive or the declaration is invalid. Percentage values are also invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05d5510b9160aed74036ac6bf28168bd54e9b7a6" translate="yes" xml:space="preserve">
          <source>Indicates the position of the abscissa of the &lt;em&gt;vanishing point&lt;/em&gt;. It can have one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c395f7eef46e27f01c39a344102bab6b2ff826ef" translate="yes" xml:space="preserve">
          <source>Indicates the position of the ordinate of the &lt;em&gt;vanishing point&lt;/em&gt;. It can have one of the following values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf58ded585db7cbb7a4bf94cf9e9c01a48849060" translate="yes" xml:space="preserve">
          <source>Indicates the size of the reflection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1003d6bea2a485076df105e8657082f84cb14697" translate="yes" xml:space="preserve">
          <source>Indicating Overflow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd460920298c8557b897209822f333dc6c296947" translate="yes" xml:space="preserve">
          <source>Indicating logical values for the 4-value shorthand syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bec20640c9694f178e5683ed6cd18a081ca056a" translate="yes" xml:space="preserve">
          <source>InfoBackground</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f27876abf2ea4ddad97e38037e93d99fafefba" translate="yes" xml:space="preserve">
          <source>InfoText</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923b241351b311e9b28837ac45a9093fd4ed8849" translate="yes" xml:space="preserve">
          <source>Informal definition of &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;ms&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0f6d0f76e29d8b06e53fd7c1b8d5dc359ab53ab" translate="yes" xml:space="preserve">
          <source>Inheritance is always from the parent element in the document tree, even when the parent element is not the containing block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a8f8f6cea5b4f9438b2acefee0a32946cb19bf" translate="yes" xml:space="preserve">
          <source>Inheritance of CSS Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58823af05ebe1ba3ff034e5ec492dcbd5b2f86cc" translate="yes" xml:space="preserve">
          <source>Inherited</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7951150c36a5b0078509be63ec158d0a10f3f90a" translate="yes" xml:space="preserve">
          <source>Inherited properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77cd3f14829b11dee5420e5b5e5777cc5a714a44" translate="yes" xml:space="preserve">
          <source>Inherited value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035932ce61bd03f6681a2dfbb742b6af7b651dcc" translate="yes" xml:space="preserve">
          <source>Initial Definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d26fae0aedb317af83d87ca1df3865ec1154118" translate="yes" xml:space="preserve">
          <source>Initial SVG definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e915d7086e42ba7ad8fb470ce6fd37be732353b" translate="yes" xml:space="preserve">
          <source>Initial definition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f9a77cf783f16036629e79a731b48c703cdd57" translate="yes" xml:space="preserve">
          <source>Initial definition (applies to SVG elements only).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40f14a9f5c25314a9bd140e8078d6763887c11a2" translate="yes" xml:space="preserve">
          <source>Initial definition, but without the associated semantics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be24ed67a94593fc3cd4c6e53624d888aa659ee2" translate="yes" xml:space="preserve">
          <source>Initial definition, using the one-colon syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74002d7e78de203b29aeda48d3f886aec4698673" translate="yes" xml:space="preserve">
          <source>Initial definition, using the one-colon syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1996078361460df53a1d2f9e9930c7c26d7f873c" translate="yes" xml:space="preserve">
          <source>Initial definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975bf7141a91d3278ea71022c906bc08dfca1acd" translate="yes" xml:space="preserve">
          <source>Initial definition. Also defines &lt;code&gt;-webkit-user-select&lt;/code&gt; as a deprecated alias of &lt;code&gt;user-select&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c881fe0a09349713c32f429bd8895f5e7a934a99" translate="yes" xml:space="preserve">
          <source>Initial definition. Basic values: &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;block&lt;/code&gt;, &lt;code&gt;inline&lt;/code&gt; and &lt;code&gt;list-item&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b00e221ec42d16a3691742b1d94b2f3055dc8fc" translate="yes" xml:space="preserve">
          <source>Initial definition. Basic values: &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;block&lt;/code&gt;, &lt;code&gt;inline&lt;/code&gt;, and &lt;code&gt;list-item&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="820f9617dae68b20d995506d46f6cd36ecf7165f" translate="yes" xml:space="preserve">
          <source>Initial definition. Before this, there was no explicitly defined &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt; data type. Images could only be defined using the &lt;code&gt;url()&lt;/code&gt; functional notation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5e02957a963cbf342e1ec02bd394976b39e866" translate="yes" xml:space="preserve">
          <source>Initial definition. Extends the CSS 2.1 &lt;a href=&quot;page-break-after&quot;&gt;&lt;code&gt;page-break-after&lt;/code&gt;&lt;/a&gt; property to handle both page and column breaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bfc68ae6c8c49814fdb235700ad53880c4f8e9" translate="yes" xml:space="preserve">
          <source>Initial definition. Extends the CSS 2.1 &lt;a href=&quot;page-break-before&quot;&gt;&lt;code&gt;page-break-before&lt;/code&gt;&lt;/a&gt; property to handle both page and column breaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8265e9e013bec7297a2f42d5d894e5dd3e263062" translate="yes" xml:space="preserve">
          <source>Initial definition. Implicit definition of the &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;pt&lt;/code&gt;, &lt;code&gt;pc&lt;/code&gt;, and &lt;code&gt;px&lt;/code&gt; units.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41db0dc231852b17d289f05356651e798841a6e" translate="yes" xml:space="preserve">
          <source>Initial definition. Includes 16 basic color keywords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53c9c50b1d1b45d614c8c72e019e636f3b7e42dc" translate="yes" xml:space="preserve">
          <source>Initial definition. Makes &lt;code&gt;ime-mode&lt;/code&gt; officially obsolete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0114813b18510cc9f46a860ff2206ec5c42488e5" translate="yes" xml:space="preserve">
          <source>Initial definition. The &lt;a href=&quot;text-decoration&quot;&gt;&lt;code&gt;text-decoration&lt;/code&gt;&lt;/a&gt; property is now a shorthand to define multiple related properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5fad50e663339eb69b33c7176d0d59f7ff329be" translate="yes" xml:space="preserve">
          <source>Initial definition. The value must be nonnegative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74dc34a4e35801a72521fe3dc94d638863f8374" translate="yes" xml:space="preserve">
          <source>Initial defintion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585ca2462f2ae0b7d0d57fb6f5fb89e35c466e8a" translate="yes" xml:space="preserve">
          <source>Initial documentation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b05c468492e894bf720cb26fc99830351a2cef87" translate="yes" xml:space="preserve">
          <source>Initial specification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b02ab27206424d25f0694d50b2db52af850703cc" translate="yes" xml:space="preserve">
          <source>Initial specification of longhand sub-properties of &lt;a href=&quot;background-position&quot;&gt;&lt;code&gt;background-position&lt;/code&gt;&lt;/a&gt; to match longstanding implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f03130f43d80f7b832367da10284552d03021e1" translate="yes" xml:space="preserve">
          <source>Initial specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d15320e0b2f39af3533c8f07c8726c865ff1a13" translate="yes" xml:space="preserve">
          <source>Initial standardization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb1ddc45496d5bd9bbb1d0e3e24a58c56f33281" translate="yes" xml:space="preserve">
          <source>Initial value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b179b79771c41d76bb6255c3a2fd0a5b15cbf225" translate="yes" xml:space="preserve">
          <source>Initial value. Automatic page breaks (neither forced nor forbidden).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b867e672228b2c0f472a9b14bf9670674172756" translate="yes" xml:space="preserve">
          <source>Initial value. Indicates that zooming is unaffected by any defined snap-points. After the contact is picked up, the content will continue to move with inertia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a3d43a8a94d8aeee1d2bde07e6371306d822f9" translate="yes" xml:space="preserve">
          <source>Initial value. Panning locks to the primary axis of motion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3179d2fa68826ec064ce85a0914dcc94f043ba28" translate="yes" xml:space="preserve">
          <source>Initial value. The IME may align the candidate window in any manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c698ce2899083b5c6d74d782ba14dc3a672b594e" translate="yes" xml:space="preserve">
          <source>Initial value. The nearest scrollable parent element begins scrolling when the user hits a scroll limit during any manipulation. No bounce effect is shown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7690a0dd7eb88a67c01543c6f75e8b40a394009" translate="yes" xml:space="preserve">
          <source>Initial versions had bugs on Windows and Linux that broke &lt;a href=&quot;http://crbug.com/114719&quot;&gt;font substitition&lt;/a&gt;, &lt;a href=&quot;http://crbug.com/51973&quot;&gt;small-caps&lt;/a&gt;, &lt;a href=&quot;http://crbug.com/55458&quot;&gt;letter-spacing&lt;/a&gt; or caused &lt;a href=&quot;http://crbug.com/149548&quot;&gt;text to overlap&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e4f0872386e0adfedf8727302cceaaec297e53" translate="yes" xml:space="preserve">
          <source>Initially a part of &lt;a href=&quot;css_columns&quot;&gt;Multi-column Layout&lt;/a&gt;, the definition of &lt;code&gt;column-gap&lt;/code&gt; has been broadened to include multiple layout methods. Now specified in &lt;a href=&quot;css_box_alignment&quot;&gt;Box Alignment&lt;/a&gt;, it may be used in Multi-column, Flexible Box, and Grid layouts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef4d6238de3ab9e8afea7755189c1b37ce62606" translate="yes" xml:space="preserve">
          <source>Initially, Android supported only &lt;code&gt;-webkit-&lt;/code&gt; prefixed values for gradients (such as &lt;code&gt;-webkit-linear-gradient()&lt;/code&gt;). Later, support for unprefixed values was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5afb06ad5cff85e7aab9df2741bbe1e500a4c851" translate="yes" xml:space="preserve">
          <source>Initially, Safari supported only &lt;code&gt;-webkit-&lt;/code&gt; prefixed values for gradients (such as &lt;code&gt;-webkit-linear-gradient()&lt;/code&gt;). Later, support for unprefixed values was added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f055d0330dcd4f8001e2f0f635457d549e9f013c" translate="yes" xml:space="preserve">
          <source>Inline box fragments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137e1b8d6c6f75683116fe1f1fea9b6f42354c9f" translate="yes" xml:space="preserve">
          <source>Inline dimension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a228b7147b9d8893c482dc6a5436ee38235915" translate="yes" xml:space="preserve">
          <source>Inline elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="189209b5b5c0f80ace73914d798e8e289f685f21" translate="yes" xml:space="preserve">
          <source>Inline elements display one after the other in the direction that sentences run in that particular writing mode. While we don&amp;rsquo;t tend to think of inline elements as having a box, as with everything in CSS they do. These inline boxes are arranged one after the other. If there is not enough space in the containing block for all of the boxes a box can break onto a new line. The lines created are known as line boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20843c01ad0d057ce0fe075fea74d61732633b79" translate="yes" xml:space="preserve">
          <source>Inline flow content can flow on all sides of the exclusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69eeba21eb1d72d396cbd8c1b775dc045bc6dc2c" translate="yes" xml:space="preserve">
          <source>Inline flow content can only wrap on top and bottom of the exclusion and must leave empty the areas to the start and end edges of the exclusion box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2128f1864e27a46db7ace35ab572513a1fb52d82" translate="yes" xml:space="preserve">
          <source>Inline flow content can wrap after the end edge of the exclusion area but must leave empty the area before the start edge of the exclusion area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b27e6e016c561d706617b44a135f54dcd6f487" translate="yes" xml:space="preserve">
          <source>Inline flow content can wrap on the side of the exclusion with the largest available space for the given line, and must leave empty the other side of the exclusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a509c4e2ce1661312286b0c6871e538f6dbe43" translate="yes" xml:space="preserve">
          <source>Inline flow content can wrap on the start edge of the exclusion area but must leave empty the area after the end edge of the exclusion area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da86e7e07ef125ab7771aae6787d426ed6424d34" translate="yes" xml:space="preserve">
          <source>Inline formatting contexts exist inside other formatting contexts and can be thought of as the context of a paragraph. The paragraph creates an inline formatting context inside which such things as &lt;code&gt;strong&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, or &lt;code&gt;span&lt;/code&gt; elements are used on text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f386eab51dee9de6029b4b6151fe84bed24ca95c" translate="yes" xml:space="preserve">
          <source>Inline layout mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5a70452dbadf33e1d51d91e88905850bf3fbbf" translate="yes" xml:space="preserve">
          <source>Inline styles added to an element (e.g., &lt;code&gt;style=&quot;font-weight: bold;&quot;&lt;/code&gt;) always overwrite any styles in external stylesheets, and thus can be thought of as having the highest specificity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd29783f5b6e9b0fddfced518bfe6f412b88e6db" translate="yes" xml:space="preserve">
          <source>Inline-Axis Overflow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7dbe78d2335a5d5bd4daf2aa3a1210c1150efce" translate="yes" xml:space="preserve">
          <source>Inline-level elements and inline boxes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992f014d4ba6df78f03b431f2889ec23bd37a7ef" translate="yes" xml:space="preserve">
          <source>Inline-level elements generate &lt;em&gt;inline-level boxes&lt;/em&gt; that are defined as boxes participating to an &lt;a href=&quot;inline_formatting_context&quot;&gt;inline formatting context&lt;/a&gt;. &lt;em&gt;Inline boxes&lt;/em&gt; are both inline-level boxes and boxes, whose contents participate in their container's inline formatting context. This is the case, for example, for all non-replaced boxes with &lt;code&gt;display:inline&lt;/code&gt;. Inline-level boxes, whose contents do not participate in an inline formatting context, are called &lt;em&gt;atomic inline-level boxes&lt;/em&gt;. These boxes, generated by replaced inline-level elements or by elements with a calculated &lt;a href=&quot;display&quot;&gt;&lt;code&gt;display&lt;/code&gt;&lt;/a&gt; value of &lt;code&gt;inline-block&lt;/code&gt; or &lt;code&gt;inline-table&lt;/code&gt;, are never split into several boxes, as is possible with inline boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6c75dc74d1bbc1afebd3b7c8e613f09e5bb437d" translate="yes" xml:space="preserve">
          <source>Inside our grid container I have four child elements. If we do not place these on to the grid in any way they will lay out according to the auto-placement rules, one item in each of the first four cells. If you use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_grid_layouts&quot;&gt;Firefox Grid Highlighter&lt;/a&gt; you can see how the grid has defined columns and rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf53f917bc6c943f97fe8c8417827d5c5892429" translate="yes" xml:space="preserve">
          <source>Inside the element's constructor, we create &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;span&lt;/code&gt; elements, fill the &lt;code&gt;span&lt;/code&gt; with the content of the custom element, and fill the &lt;code&gt;style&lt;/code&gt; element with some CSS rules:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea8c1b4ec60d1501f436e24ae27534df043d761b" translate="yes" xml:space="preserve">
          <source>Instead of ignoring the &lt;code&gt;-webkit-text-size-adjust&lt;/code&gt; property, a bug prevents desktop Chrome users from zooming in or out. The bug was fixed after Chrome 26.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ba06e50637ef05b0e949f2065fadc5ce7b9530" translate="yes" xml:space="preserve">
          <source>Instead of ignoring the &lt;code&gt;-webkit-text-size-adjust&lt;/code&gt; property, a bug prevents desktop Safari users from zooming in or out. The bug was fixed after Safari 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea8523d947c511ee5277a9ec99bfa7d7e03c921" translate="yes" xml:space="preserve">
          <source>Instead we can target item 4 and separate it from the first three items by giving it a &lt;code&gt;margin-left&lt;/code&gt; value of &lt;code&gt;auto&lt;/code&gt;. Auto margins will take up all of the space that they can in their axis &amp;mdash; it is how centering a block with margin auto left and right works. Each side tries to take as much space as it can, and so the block is pushed into the middle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c20b8f147e0e4af5f8712f07daf88693461e01fc" translate="yes" xml:space="preserve">
          <source>Intended for paged material and documents viewed on a screen in print preview mode. (Please see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Paged_Media&quot;&gt;paged media&lt;/a&gt; for information about formatting issues that are specific to these formats.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7947754bf7c28941dd485b71c6cbc0b62229193f" translate="yes" xml:space="preserve">
          <source>Intended for speech synthesizers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f6dfea05d7992a6a6b94442d68470a85a5139d" translate="yes" xml:space="preserve">
          <source>Intended mainly for internal use and by themes. Disables scrolling of XML root elements, &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, and &lt;code&gt; &amp;lt;body&amp;gt;&lt;/code&gt; with the keyboard's arrow keys and the mouse wheel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09310508c2262ec61d2c7e926f4eee93241e0f8b" translate="yes" xml:space="preserve">
          <source>Intended primarily for screens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a54cd2e7a39890cc97a46dfdef5f1c663b4f9138" translate="yes" xml:space="preserve">
          <source>Internal &lt;code&gt;table-*&lt;/code&gt; elements don't have margins, use &lt;a href=&quot;border-spacing&quot;&gt;&lt;code&gt;border-spacing&lt;/code&gt;&lt;/a&gt; instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d5733b82b9b85e7c7c9538c8b1cbf395dc743e" translate="yes" xml:space="preserve">
          <source>Internet Explorer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41136655b3f6611881379e8221c0db44ed5aff6" translate="yes" xml:space="preserve">
          <source>Internet Explorer 10 and 11 consider a unitless value in the &lt;code&gt;flex-basis&lt;/code&gt; part to be syntactically invalid (and will thus be ignored). A workaround is to always include a unit in the &lt;code&gt;flex-basis&lt;/code&gt; part of the &lt;code&gt;flex&lt;/code&gt; shorthand value. See &lt;a href=&quot;https://github.com/philipwalton/flexbugs#4-flex-shorthand-declarations-with-unitless-flex-basis-values-are-ignored&quot;&gt;Flexbug #4&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="095d998cf217ecc1c467b7e664bf1558a574b8dd" translate="yes" xml:space="preserve">
          <source>Internet Explorer 10 and 11 ignore uses of &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/calc&quot;&gt;&lt;code&gt;calc()&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;flex-basis&lt;/code&gt; part of the &lt;code&gt;flex&lt;/code&gt; syntax. This can be worked around by using the longhand properties instead of the shorthand. See &lt;a href=&quot;https://github.com/philipwalton/flexbugs#8-flex-basis-doesnt-support-calc&quot;&gt;Flexbug #8&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6621016b55329b0778a3d157c3ef97bf7d9a278f" translate="yes" xml:space="preserve">
          <source>Internet Explorer 10 uses &lt;code&gt;0&lt;/code&gt; instead of &lt;code&gt;1&lt;/code&gt; as the initial value for the &lt;code&gt;flex-shrink&lt;/code&gt; property. A workaround is to always set an explicit value for &lt;code&gt;flex-shrink&lt;/code&gt;. See &lt;a href=&quot;https://github.com/philipwalton/flexbugs#6-the-default-flex-value-has-changed&quot;&gt;Flexbug #6&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4882dffca9570cc206d6fe5b67e34d8f1c7db5a2" translate="yes" xml:space="preserve">
          <source>Internet Explorer 10, which implemented the &lt;code&gt;display: flexbox&lt;/code&gt; version of the specification with the &lt;code&gt;-ms-&lt;/code&gt; prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7816182258d900b70c821a021fa841c35c51e8e7" translate="yes" xml:space="preserve">
          <source>Internet Explorer 11 considers a unitless value in the &lt;code&gt;flex-basis&lt;/code&gt; part to be syntactically invalid (and will thus be ignored). A workaround is to always include a unit in the &lt;code&gt;flex-basis&lt;/code&gt; part of the &lt;code&gt;flex&lt;/code&gt; shorthand value. See &lt;a href=&quot;https://github.com/philipwalton/flexbugs#4-flex-shorthand-declarations-with-unitless-flex-basis-values-are-ignored&quot;&gt;Flexbug #4&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ffdc003c062aa1a1ecca859f0c511a4362a5f9a" translate="yes" xml:space="preserve">
          <source>Internet Explorer 11 ignores uses of &lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/calc&quot;&gt;&lt;code&gt;calc()&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;flex-basis&lt;/code&gt; part of the &lt;code&gt;flex&lt;/code&gt; syntax. This can be worked around by using the longhand properties instead of the shorthand. See &lt;a href=&quot;https://github.com/philipwalton/flexbugs#8-flex-basis-doesnt-support-calc&quot;&gt;Flexbug #8&lt;/a&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1932c946261fb9be93823c86cac93f1fb4ff01" translate="yes" xml:space="preserve">
          <source>Internet Explorer 4 to 9 implemented a non-standard &lt;code&gt;filter&lt;/code&gt; property. The syntax was completely different from this one and is not documented here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e566e6c77293e613e703bec89c33e0667e55df07" translate="yes" xml:space="preserve">
          <source>Internet Explorer 5.5 or later supports a proprietary &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms533014(VS.85,loband).aspx&quot;&gt;Matrix Filter&lt;/a&gt; which can be used to achieve a similar effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d291604cf86ab705de40a90d2c834d430f2850b1" translate="yes" xml:space="preserve">
          <source>Internet Explorer 5.5 through 9.0 supported gradients via a proprietary filter: &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/docs/Web/CSS/-ms-filter#Gradient&quot;&gt;-ms-filter: progid:DXImageTransform.Microsoft.Gradient()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d00d9dd5f66259287a276d783b6b26b2dd46aa7" translate="yes" xml:space="preserve">
          <source>Internet Explorer 7 doesn't update &lt;code&gt;:first-child&lt;/code&gt; styles when elements are added dynamically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a387d2282d34c7d1618fc0d7201321a7658de79d" translate="yes" xml:space="preserve">
          <source>Internet Explorer 7 doesn't update the style correctly when an element is dynamically placed before an element that matched the selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba237dc7b1b4815ec223b26e8609a284f986db07" translate="yes" xml:space="preserve">
          <source>Internet Explorer 8 and later support gray color keywords spelled with an &lt;em&gt;e&lt;/em&gt; (&lt;code&gt;grey&lt;/code&gt;, &lt;code&gt;darkgrey&lt;/code&gt;, &lt;code&gt;darkslategrey&lt;/code&gt;, &lt;code&gt;dimgrey&lt;/code&gt;, &lt;code&gt;lightgrey&lt;/code&gt;, and &lt;code&gt;lightslategrey&lt;/code&gt;). Internet Explorer 3 to Internet Explorer 7 only support the keywords spelled with &lt;em&gt;a&lt;/em&gt; (&lt;code&gt;gray&lt;/code&gt;, &lt;code&gt;darkgray&lt;/code&gt;, &lt;code&gt;darkslategray&lt;/code&gt;, &lt;code&gt;dimgray&lt;/code&gt;, &lt;code&gt;lightgray&lt;/code&gt;, and &lt;code&gt;lightslategray&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0061cc24b45fc654aa7d6a84aa52c571836d4213" translate="yes" xml:space="preserve">
          <source>Internet Explorer 9 and later support an old draft values: &lt;code&gt;inline&lt;/code&gt; (equivalent of having &lt;code&gt;display: inline&lt;/code&gt; on the ruby), and &lt;code&gt;above&lt;/code&gt; (synonym of the modern &lt;code&gt;over&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0616c092898dbe7ae78fec0871873ffdbca9ad51" translate="yes" xml:space="preserve">
          <source>Internet Explorer 9 and later supports an earlier draft of CSS Ruby with non-standard values for this property: &lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;distribute-letter&lt;/code&gt;, &lt;code&gt;distribute-space&lt;/code&gt;, and &lt;code&gt;line-edge&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab108ae28952ba3bef468b4fe2817252c91b795" translate="yes" xml:space="preserve">
          <source>Internet Explorer 9 supports 2D but not 3D transforms. In version 9, mixing 2D and 3D transform functions invalidates the entire property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487af5e8b667f554d2afffdd44f6ea38f29eccdc" translate="yes" xml:space="preserve">
          <source>Internet Explorer 9.0 or earlier has no support for 3D transforms. Mixing 3D and 2D transform functions, such as &lt;code&gt;-ms-transform:rotate(10deg) translateZ(0);&lt;/code&gt;, will prevent the entire property from being applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b956a017b2b83a815d64253bb17a30a44ce91ee9" translate="yes" xml:space="preserve">
          <source>Internet Explorer and Microsoft Edge use these pseudo-elements to style other parts of a range input:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d8b966e73b7a1cbfc5b7b79c04884aeb2c13d3" translate="yes" xml:space="preserve">
          <source>Internet Explorer does not recognize &lt;code&gt;:disabled&lt;/code&gt; on the &lt;a href=&quot;https://developer.mozilla.org/docs/Web/HTML/Element/fieldset&quot;&gt;&lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c96ce22bf9a21055bd4a969d43012686f848a6" translate="yes" xml:space="preserve">
          <source>Internet Explorer does not support the global values &lt;code&gt;initial&lt;/code&gt; and &lt;code&gt;unset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91f370ac229045927a7bdb72388a5c51bddbd31a" translate="yes" xml:space="preserve">
          <source>Internet Explorer doesn't support &lt;code&gt;visibility: initial&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5f8c7865e42f1f649bdfe3988d2d87f7ad11101" translate="yes" xml:space="preserve">
          <source>Internet Explorer implements an older version of the specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d31f010bc67031ad3d938f2ce6fc47d86d8b274" translate="yes" xml:space="preserve">
          <source>Internet Explorer only supports clip paths defined by &lt;code&gt;url()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9cac2de5d3a7e0d4d1f8cabb71b2fd16e05d16d" translate="yes" xml:space="preserve">
          <source>Internet Explorer supports an earlier draft of CSS Scroll Snap without axis values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae1a09f1a487e37bd7d948ff3009a1cd0fd031f" translate="yes" xml:space="preserve">
          <source>Internet Explorer's implementation differs from the specification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26cd1fe9380ea9565de1c2bd864a8690b0d56346" translate="yes" xml:space="preserve">
          <source>Interpolation Hints / Gradient Midpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3313fcf85704e25c9cf47d7f97eb4c1ae29fccfb" translate="yes" xml:space="preserve">
          <source>Interpolation of basic shapes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4a8d5d6c8fb0d81c46467beee99205c026b923" translate="yes" xml:space="preserve">
          <source>Interpolation of blend modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b21711488363d652f10dd903450b89ea21cb58f" translate="yes" xml:space="preserve">
          <source>Interprets the counter symbols as digits in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Positional_notation&quot;&gt;place-value numbering system&lt;/a&gt;. The numeric system is similar to the &lt;code&gt;alphabetic&lt;/code&gt; system, described above. The main difference is that in the &lt;code&gt;alphabetic&lt;/code&gt; system, the first counter symbol given in the &lt;code&gt;symbols&lt;/code&gt; descriptor is interpreted as &lt;code&gt;1&lt;/code&gt;, the next as &lt;code&gt;2&lt;/code&gt;, and so on. However, in the numeric system, the first counter symbol is interpreted as 0, the next as &lt;code&gt;1&lt;/code&gt;, then &lt;code&gt;2&lt;/code&gt;, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2646800f360d39d6c765db16777b558d99b6c535" translate="yes" xml:space="preserve">
          <source>Interprets the specified symbols as digits, to an alphabetic numbering system. If the characters &lt;code&gt;&quot;a&quot;&lt;/code&gt; to &lt;code&gt;&quot;z&quot;&lt;/code&gt; are specified as symbols in a counter style, with the &lt;code&gt;alphabetic&lt;/code&gt; system, then the first 26 counter representations will be &lt;code&gt;&quot;a&quot;&lt;/code&gt;, &lt;code&gt;&quot;b&quot;&lt;/code&gt; upto &lt;code&gt;&quot;z&quot;&lt;/code&gt;. Until this point, the behavior is the same as that of the &lt;code&gt;symbolic&lt;/code&gt; system, described above. However, after &lt;code&gt;&quot;z&quot;&lt;/code&gt;, it will continue as &lt;code&gt;&quot;aa&quot;&lt;/code&gt;, &lt;code&gt;&quot;ab&quot;&lt;/code&gt;, &lt;code&gt;&quot;ac&quot;&lt;/code&gt;&amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221ad5d9cf460323dd5acb798b113cea81f557b7" translate="yes" xml:space="preserve">
          <source>Intrinsic dimensions and proportions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fda894242cdc9c8cc6f32bd3d9329030a51f8b0" translate="yes" xml:space="preserve">
          <source>Intrinsic dimensions of contained images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3737cdc2139c258e86478caed3206a02bbcd9d" translate="yes" xml:space="preserve">
          <source>Intrinsic sizes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8808878638b7a85cab416e884165e84f5a9d3ada" translate="yes" xml:space="preserve">
          <source>Introduced in Media Queries Level 4 is a new range syntax that allows for less verbose media queries when testing for any feature accepting a range, as shown in the below examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e07fa10fad1b352d112ceac5798bf70e971804" translate="yes" xml:space="preserve">
          <source>Introduces media queries, their syntax, and the operators and media features which are used to construct media query expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f2446ddae1b7372b7e6dc2ad9b8e439bdcc880" translate="yes" xml:space="preserve">
          <source>Introduces no content, but increments (decrements) the level of nesting for quotes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4230f93f3f3f8dabe3a331312f68b7ad8096169" translate="yes" xml:space="preserve">
          <source>Introduces the two-colon syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f407486c3e584e24e0f52f16f83af2584f16358e" translate="yes" xml:space="preserve">
          <source>Introducing the 'variation axis'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5ea559188b8b08d3d440077d6463782eaf8450" translate="yes" xml:space="preserve">
          <source>Introducing the CSS Cascade</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54e0676abaa94b45eca1c4ec2ebbdf6403a5638" translate="yes" xml:space="preserve">
          <source>Introducing the CSS cascade</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d630fd64c3c5569d32d352d4ee24c220afcce4" translate="yes" xml:space="preserve">
          <source>Introduction of the two-colon syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdfb59c3fb4ec235a8d1c890364e3b5cf699a52e" translate="yes" xml:space="preserve">
          <source>Introduction of the two-colon syntax. Definition of edge-case behavior, such as in list items or with specific languages (e.g., the Dutch digraph &lt;code&gt;IJ&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cda1e821e0ff23cd78a3fbca95288d5467f19d" translate="yes" xml:space="preserve">
          <source>Introduction to the CSS box model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847c0b04f044aa4be68f460985c3a2ab786fa505" translate="yes" xml:space="preserve">
          <source>Introduction to the Fragmentation specification and how to control where column content breaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c1de3465e9abe2f8935a87ce3d15cc5b5e2538" translate="yes" xml:space="preserve">
          <source>Invalid frequency values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a907c978cf02025a436cb2ded88edec7baf34ca7" translate="yes" xml:space="preserve">
          <source>Invalid identifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd4a0c0f6df1a64ed4270d83aab58edf3120409" translate="yes" xml:space="preserve">
          <source>Invalid images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7224dbf7a2e4167347bd7696de923a9e215ea73" translate="yes" xml:space="preserve">
          <source>Invalid integers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c1cc16611704a59399549cb81acf508886e300" translate="yes" xml:space="preserve">
          <source>Invalid numbers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d56a40a15debda68b04c4906b9fa1bd9ec0dd14" translate="yes" xml:space="preserve">
          <source>Invalid positions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc485d1120ba3f1dad6f199c2266aaabe1ba7ef" translate="yes" xml:space="preserve">
          <source>Invalid resolutions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f30696d7c8aa573f7cfbe56486376cc3f8fa5f" translate="yes" xml:space="preserve">
          <source>Invalid times</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce475219883b98f3f6db1ffcb60e1e6df328af7" translate="yes" xml:space="preserve">
          <source>Inverting a query's meaning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e71f49714a3ca3f4fc6a48777a29bbf8a47b43" translate="yes" xml:space="preserve">
          <source>Inverts the colors of the image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80035022ac880d2b9619ebceb62f930d2d26a003" translate="yes" xml:space="preserve">
          <source>Inverts the samples in the input image. The value of &lt;code&gt;amount&lt;/code&gt; defines the proportion of the conversion. A value of &lt;code&gt;100%&lt;/code&gt; is completely inverted. A value of &lt;code&gt;0%&lt;/code&gt; leaves the input unchanged. Values between &lt;code&gt;0%&lt;/code&gt; and &lt;code&gt;100%&lt;/code&gt; are linear multipliers on the effect. The lacuna value for interpolation is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f076661ae0a0f3a9cd7cae05efeba4582fa7f592" translate="yes" xml:space="preserve">
          <source>Inverts which lines are indented. All lines &lt;em&gt;except&lt;/em&gt; the first line will be indented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8712aeb00ec4ca126d4e47d72f74dae20b861a" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;flex-basis&lt;/code&gt; a length unit, but not zero? If so this is the size of the item.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcab060a56967efd26a14507b91cc969bd9c6244" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;flex-basis&lt;/code&gt; set to &lt;code&gt;0&lt;/code&gt;? if so then the item size is not taken into consideration for the space-sharing calculation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b642d741ad1e21de6ef544672912461852d2994f" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;flex-basis&lt;/code&gt; set to &lt;code&gt;auto&lt;/code&gt; or &lt;code&gt;content&lt;/code&gt; (in a supporting browser)? If so, the size is based on the item size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c8f7a2f7c847101c6c5ab5d7a30c782bce0865" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;flex-basis&lt;/code&gt; set to &lt;code&gt;auto&lt;/code&gt;, and does the item have a width set? If so, the size will be based on that width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cb8e4d245eb8f5457b601b8a11ec4cdc65305d8" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the abscissa of the translating vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21774222895296de4b74f93599f65a6c50eed34f" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the ordinate of the translating vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59eac5f4a03a2c969ca3c2680c906b8d10eb77af" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the abscissa (x-coordinate) of the translating vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2dd62b7aef2e03706eae5582c9889226a62400" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the abscissa of the translating vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f428d29a9a7eecbce525027704bab292583f21" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the distance from the user to the z=0 plane. If it is 0 or a negative value, no perspective transform is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d52ed0aa02ff48bbc1aed892c169b98e5d83b5" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the ordinate of the translating vector (or y-coordinate). If unspecified, its default value is &lt;code&gt;0&lt;/code&gt;. For example, &lt;code&gt;translate(2)&lt;/code&gt; is equivalent to &lt;code&gt;translate(2, 0)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd82818df278e295dbbca9fc8c8b10fd7b79a22a" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the ordinate of the translating vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be02a459d2445cfed0b8ee048f629b8391d08ec" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the z component of the translating vector. It can't be a &lt;a href=&quot;../percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; value; in that case the property containing the transform is considered invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46518f1d49a382369d3f15e598b0a0618b3d7d2a" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; describing the x-coordinate of the vector denoting the axis of rotation which could between 0 and 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18504912f967a02ab14c3a122f1aa48ec1f1c1a" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; describing the y-coordinate of the vector denoting the axis of rotation which could between 0 and 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ebd9bc90b0aaabae3ec154bd1f98c27f4656b5" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; describing the z-coordinate of the vector denoting the axis of rotation which could between 0 and 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54db5aec3a6e38961ff92d78e8977de080b25a2d" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the abscissa of the scaling vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de14ba04e260117d61c0196ba2786b8bef443e0d" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the ordinate of the scaling vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc9f23d210bc09a77ad135d68fec748c094a488" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the scaling factor to apply on the abscissa of each point of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1078a18a1b404b133d38192af690f4341b37b9ff" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the scaling factor to apply on the ordinate of each point of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a143cc2b20a9c8fa4169889c2c02bf31a7ce0e0" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the scaling factor to apply on the z-coordinate of each point of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2051ad1ee05ca01d276270c9971acead9fed6b78" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;../number&quot;&gt;&lt;code&gt;&amp;lt;number&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the z-component of the scaling vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e3f834b735c5627e9e489598d5f9484a0e9a6e" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;color_value&quot;&gt;&lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt;&lt;/a&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a557dc64afa7db353a642704c58b54f918e279a" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; (and never a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; which would make the statement invalid) describing how far from the user eye the z=0 origin is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca95a0f939c5a48f1816aa4353300b944ee122a" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; denoting a radius to use for the border in each corner of the border. It is used only in the one-value syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21fa2049d363dbe5c3f11b5199abd17f0d69c822" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; denoting a radius to use for the border in the bottom-left corner of the element's box. It is used only in the four-value syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce5753cadf6ef379883d15a065ed091ca9121d4" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; denoting a radius to use for the border in the bottom-right corner of the element's box. It is used only in the three- and four-value syntaxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae396a5c6f05dd5fa8cab111ceb7f845f66b2fd" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; denoting a radius to use for the border in the top-left and bottom-right corners of the element's box. It is used only in the two-value syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4caa4048207f7740db5fedce950b593096add23" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; denoting a radius to use for the border in the top-left corner of the element's box. It is used only in the three- and four-value syntaxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59761a9c1fa2ec26169927e844b70c5a16769d3f" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; denoting a radius to use for the border in the top-right and bottom-left corners of the element's box. It is used only in the two- and three-value syntaxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc50f86b993c71c65cd68b2d481bd0c273637041" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; denoting a radius to use for the border in the top-right corner of the element's box. It is used only in the four-value syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1133edbcef4a857aa4a139220084022eab03de4" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; describing how far from the left edge of the box the origin of the transform is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d512df6ca36a365d56ff03a8fa067095ae86810" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; describing how far from the top edge of the box the origin of the transform is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e981a7061a156ce02ca031dce78a8bf771a1bd" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or one of the three keywords, &lt;code&gt;thin&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, or &lt;code&gt;thick&lt;/code&gt;. See &lt;a href=&quot;border-width&quot;&gt;&lt;code&gt;border-width&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffcdb1799798c25e09be34b57c6ad0a6a4404ee3" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the offset for the bottom of the rectangle relative to the top border of the element's box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7fc4d22b774e51f02966f9cceaf3aa61597b415" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the offset for the left of the rectangle relative to the left border of the element's box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4dc6942f2e06493aced1146f522f32a114184c" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the offset for the right of the rectangle relative to the left border of the element's box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22eea78c2bb7efb6df9349c177263609905e5771" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the offset for the top of the rectangle relative to the top border of the element's box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b3bd1a099c391acea57f4d2628fb2fea31fcec8" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt; denoting the character encoding to be used. It must be the name of a web-safe character encoding defined in the &lt;a href=&quot;http://www.iana.org/assignments/character-sets&quot;&gt;IANA-registry&lt;/a&gt;, and must be double-quoted, following exactly one space character (U+0020), and immediately terminated with a semicolon. If several names are associated with an encoding, only the one marked with &lt;em&gt;preferred&lt;/em&gt; must be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286495b2290d6e9e8c1644a6b0f8b35db8be50f7" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;url&quot;&gt;&lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the location of the resource to import. The URL may be absolute or relative. Note that the URL for a Mozilla package need not actually specify a file; it can just specify the package name and part, and the appropriate file is chosen automatically (e.g. &lt;strong&gt;chrome://communicator/skin/&lt;/strong&gt;). &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/The_Chrome_URL&quot;&gt;See here&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06546fba781a193a9184b5d09f68ce8cc3be3e7" translate="yes" xml:space="preserve">
          <source>Is a &lt;a href=&quot;time&quot;&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt; denoting the amount of time the transition from the old value of a property to the new value should take. A time of &lt;code&gt;0s&lt;/code&gt; indicates that no transition will happen, that is the switch between the two states will be instantaneous. A negative value for the time renders the declaration invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d111fe65724885c909f7b0a8f0ae92e5c12e68c" translate="yes" xml:space="preserve">
          <source>Is a comma-separated list of &lt;a href=&quot;media_queries/using_media_queries&quot;&gt;media queries&lt;/a&gt; conditioning the application of the CSS rules defined in the linked URL. If the browser does not support any these queries, it does not load the linked resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad57bbcf68cf5ec61e863fee9f67f7f040c5f4e7" translate="yes" xml:space="preserve">
          <source>Is a functional notation that defines a size range greater than or equal to &lt;em&gt;min&lt;/em&gt; and less than or equal to &lt;em&gt;max&lt;/em&gt;. If &lt;em&gt;max&lt;/em&gt; is smaller than &lt;em&gt;min&lt;/em&gt;, then &lt;em&gt;max&lt;/em&gt; is ignored and the function is treated as &lt;em&gt;min&lt;/em&gt;. As a maximum, a &lt;code&gt;&amp;lt;flex&amp;gt;&lt;/code&gt; value sets the track&amp;rsquo;s flex factor. As a minimum, it is treated as zero (or minimal content, if the grid container is sized under a minimal content constraint).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120fe4eaa575766461b10fa15bed9c507d9e8e09" translate="yes" xml:space="preserve">
          <source>Is a functional notation that defines a size range greater than or equal to &lt;em&gt;min&lt;/em&gt; and less than or equal to &lt;em&gt;max&lt;/em&gt;. If &lt;em&gt;max&lt;/em&gt; is smaller than &lt;em&gt;min&lt;/em&gt;, then &lt;em&gt;max&lt;/em&gt; is ignored and the function is treated as &lt;em&gt;min&lt;/em&gt;. As a maximum, a &lt;code&gt;&amp;lt;flex&amp;gt;&lt;/code&gt; value sets the track&amp;rsquo;s flex factor. It is invalid as a minimum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e789b4f30f6cb491da7145ca43ecab8095585058" translate="yes" xml:space="preserve">
          <source>Is a functional notation that defines a size range, greater than or equal to &lt;em&gt;min&lt;/em&gt;, and less than or equal to &lt;em&gt;max&lt;/em&gt;. If &lt;em&gt;max&lt;/em&gt; is smaller than &lt;em&gt;min&lt;/em&gt;, then &lt;em&gt;max&lt;/em&gt; is ignored and the function is treated as &lt;em&gt;min&lt;/em&gt;. As a maximum, a &lt;code&gt;&amp;lt;flex&amp;gt;&lt;/code&gt; value sets the track&amp;rsquo;s flex factor. It is invalid as a minimum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20a6526f9695b4d2cd33a95647961ea00fc20a60" translate="yes" xml:space="preserve">
          <source>Is a keyword defined by &lt;a href=&quot;border-style&quot;&gt;&lt;code&gt;border-style&lt;/code&gt;&lt;/a&gt; describing the style of the rule. The styling must be interpreted as in the collapsing border model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e1e202ac4d459c1cf6a41182bc3b4098c1f030" translate="yes" xml:space="preserve">
          <source>Is a keyword defined by &lt;a href=&quot;border-width&quot;&gt;&lt;code&gt;border-width&lt;/code&gt;&lt;/a&gt; describing the width of the rule. It may be either a &lt;a href=&quot;length&quot;&gt;&lt;code&gt;&amp;lt;length&amp;gt;&lt;/code&gt;&lt;/a&gt; or one of the &lt;code&gt;thin&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, or &lt;code&gt;thick&lt;/code&gt; keywords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e72b3f4cd7ee0738bf1123e15c4efcf90dfc8ac2" translate="yes" xml:space="preserve">
          <source>Is a keyword denoting the absence of images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34e88a3a947617a3f900d7976651df64c447855" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating if it the function is &lt;a href=&quot;https://en.wikipedia.org/wiki/Left-continuous#Directional_and_semi-continuity&quot;&gt;left- or right-continuous&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abf6c9e2e39a5e5fdc908ab6dae1b641b8c4ab3" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the associated mask image is a luminance mask, i.e., that its &lt;a href=&quot;https://en.wikipedia.org/wiki/Luminance_%28relative%29&quot;&gt;relative luminance&lt;/a&gt; values must be used when applying it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="460aaa8b49b03ce6ab6f604df48de1fa7335049d" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the associated mask image is an alpha mask, i.e., that its &lt;a href=&quot;https://en.wikipedia.org/wiki/Alpha_compositing&quot;&gt;alpha channel&lt;/a&gt; values must be used when applying it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3cc5ff706e3dc2b747ba85f0ceb2346c3c51b6d" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the element is &lt;em&gt;not&lt;/em&gt; moved down to clear past floating elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114951bc0d777052ff4853d68c78ade87b73a02d" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the element is moved down to clear floats on &lt;em&gt;end side of its containing block&lt;/em&gt;, that is the &lt;em&gt;right&lt;/em&gt; floats on ltr scripts and the &lt;em&gt;left&lt;/em&gt; floats on rtl scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407cc57f0482f7370e01363868c3fa8564b116b8" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the element is moved down to clear floats on &lt;em&gt;start side of its containing block&lt;/em&gt;, that is the &lt;em&gt;left&lt;/em&gt; floats on ltr scripts and the &lt;em&gt;right&lt;/em&gt; floats on rtl scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a22e5cc7afadf00816d9f79df2c1b4281c1262" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the element is moved down to clear past &lt;em&gt;both&lt;/em&gt; left and right floats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30e2e76c487e1c819dbf594c29b86a7310bc219" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the element is moved down to clear past &lt;em&gt;left&lt;/em&gt; floats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33563b848d7237ce8a6cc397dfd628bac6543c4" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the element is moved down to clear past &lt;em&gt;right&lt;/em&gt; floats.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07bd44de3e0e8f206276d2eb47056a01a83a93f" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the extra space will be distributed between the elements of the ruby, and around it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0610afe926af0312a716667dd8c4c8fec1f75b13" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the extra space will be distributed between the elements of the ruby.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6595710d37ffd930deb661e441de44d9d73d448" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the property contributes nothing to the grid item&amp;rsquo;s placement, indicating auto-placement or a default span of &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc67f67ee78b0a4ab3d5a073848868e7a1ce3db3" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the property contributes nothing to the grid item&amp;rsquo;s placement, indicating auto-placement, an automatic span, or a default span of &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0b8be4d7bd60b8d6c26ac2837b21fb32eb159f4" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the ruby has to be placed between the different characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d4f3851cc4152c830cde3e5587a8bd7d946e4c" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the ruby has to be placed over the main text for horizontal scripts and right to it for vertical scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c59da3a0f8d1b928a2ee02e9b1485c5af9d6a5" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the ruby has to be placed under the main text for horizontal scripts and left to it for vertical scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbb6216fd67bac1b8e6981f8ef95bda410d2627" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the ruby will be aligned at the middle of the base text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07f04e24f1e10d98164064d4e83d477607b13dc" translate="yes" xml:space="preserve">
          <source>Is a keyword indicating that the ruby will be aligned with the start of the base text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="561b4115d3680871d66d7c3d06bf0c929be56693" translate="yes" xml:space="preserve">
          <source>Is a keyword meaning that there is no explicit grid. Any columns will be implicitly generated and their size will be determined by the &lt;a href=&quot;grid-auto-columns&quot;&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bab374224af3353a4d8d3907335e894a22fae28c" translate="yes" xml:space="preserve">
          <source>Is a keyword meaning that there is no explicit grid. Any rows will be implicitly generated and their size will be determined by the &lt;a href=&quot;grid-auto-rows&quot;&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25ac411bcf3317eb776d1dc3a38bd3315f263db" translate="yes" xml:space="preserve">
          <source>Is a keyword representing either the type of the attribute's value, or its unit, as in HTML some attributes have implicit units. If the use of &lt;code&gt;&amp;lt;type-or-unit&amp;gt;&lt;/code&gt; as a value for the given attribute is invalid, the &lt;code&gt;attr()&lt;/code&gt; expression will be invalid too. If omitted, it defaults to &lt;code&gt;string&lt;/code&gt;. The list of valid values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa33a418965c088b85166e03324297d0ca1f518" translate="yes" xml:space="preserve">
          <source>Is a keyword representing the largest maximal content contribution of the grid items occupying the grid track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb26610cb210d230dd0c08b0ff8e3ea4bae4cf5d" translate="yes" xml:space="preserve">
          <source>Is a keyword representing the largest minimal content contribution of the grid items occupying the grid track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="797235e54af49dbd28484e8f696c1af3d43a27a3" translate="yes" xml:space="preserve">
          <source>Is a keyword specifying that the auto-placement algorithm places items, by filling each column in turn, adding new columns as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76408cc0571ff85e4248bca88af0688864ea31be" translate="yes" xml:space="preserve">
          <source>Is a keyword specifying that the auto-placement algorithm places items, by filling each row in turn, adding new rows as necessary. If neither &lt;code&gt;row&lt;/code&gt; nor &lt;code&gt;column&lt;/code&gt; is provided, &lt;code&gt;row&lt;/code&gt; is assumed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe7f56d1933b10fc64a91a2758f59c35acf3f15" translate="yes" xml:space="preserve">
          <source>Is a keyword specifying that the auto-placement algorithm uses a &amp;ldquo;dense&amp;rdquo; packing algorithm, which attempts to fill in holes earlier in the grid, if smaller items come up later. This may cause items to appear out-of-order, when doing so would fill in holes left by larger items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94726b509a187a96238a5b78ec249cc68fc7005" translate="yes" xml:space="preserve">
          <source>Is a keyword that converts all characters to lowercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5410fdaf8d9277fb2fab6eccc9747d5fe10a00" translate="yes" xml:space="preserve">
          <source>Is a keyword that converts all characters to uppercase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb25ba4e0cae1c491d0f55950d62a51f1c3cd8d" translate="yes" xml:space="preserve">
          <source>Is a keyword that converts the first &lt;em&gt;letter&lt;/em&gt; of each word to uppercase. Other characters remain unchanged (they retain their original case as written in the element's text). A letter is defined as a character that is part of Unicode's Letter or Number general categories ; thus, any punctuation marks or symbols at the beginning of a word are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e55746b5a95baeb0d8127ec283391f8e91be4e" translate="yes" xml:space="preserve">
          <source>Is a keyword that forces the writing of a character &amp;mdash; mainly ideograms and Latin scripts &amp;mdash; inside a square, allowing them to be aligned in the usual East Asian scripts (like Chinese or Japanese).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c855f87cfb38863b632809738cdf5d0b99f7c0" translate="yes" xml:space="preserve">
          <source>Is a keyword that is identical to maximal content if it's a maximum. As a minimum it represents the largest minimum size (as specified by &lt;a href=&quot;min-width&quot;&gt;&lt;code&gt;min-width&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;min-height&quot;&gt;&lt;code&gt;min-height&lt;/code&gt;&lt;/a&gt;) of the grid items occupying the grid track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ae719dda10bba3e085a0b20c5cafd50ef75fad" translate="yes" xml:space="preserve">
          <source>Is a keyword that prevents the case of all characters from being changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee98174de78d55f7de137a0ad5c49e70ed8fdb6a" translate="yes" xml:space="preserve">
          <source>Is a keyword that sets all three longhand properties to &lt;code&gt;none&lt;/code&gt;, meaning there is no explicit grid. There are no named grid areas. Rows and columns will be implicitly generated; their size will be determined by the &lt;a href=&quot;grid-auto-rows&quot;&gt;&lt;code&gt;grid-auto-rows&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;grid-auto-columns&quot;&gt;&lt;code&gt;grid-auto-columns&lt;/code&gt;&lt;/a&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dca3ae15cdebc0b3afb691bef8acff76451f2e8" translate="yes" xml:space="preserve">
          <source>Is a non-negative &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; value relative to the block size of the grid container. If the block size of the grid container is indefinite, the percentage value is treated like &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9028971555f7aa60f91a89128a2827e816a12d02" translate="yes" xml:space="preserve">
          <source>Is a non-negative &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; value relative to the inline size of the grid container. If the size of the grid container depends on the size of its tracks, then the percentage must be treated as &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc2c50fa749cf2f5d76f21abaedfde80a80acbc5" translate="yes" xml:space="preserve">
          <source>Is a non-negative &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; value, relative to the block size of the grid container. If the size of the grid container depends on the size of its tracks, then the percentage must be treated as &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd11e5207e57e89ba6492db66b6b4aded874f039" translate="yes" xml:space="preserve">
          <source>Is a non-negative dimension with the unit &lt;code&gt;fr&lt;/code&gt; specifying the track&amp;rsquo;s flex factor. Each &lt;code&gt;&amp;lt;flex&amp;gt;&lt;/code&gt;-sized track takes a share of the remaining space in proportion to its flex factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a97abbdd5f8b3e698764bf4db7f2db19198761d" translate="yes" xml:space="preserve">
          <source>Is a non-negative dimension with the unit &lt;code&gt;fr&lt;/code&gt; specifying the track&amp;rsquo;s flex factor. Each &lt;code&gt;&amp;lt;flex&amp;gt;&lt;/code&gt;-sized track takes a share of the remaining space in proportion to its flex factor. When appearing outside a &lt;code&gt;minmax()&lt;/code&gt; notation, it implies an automatic minimum (i.e. &lt;code&gt;minmax(auto, &amp;lt;flex&amp;gt;)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa03c2c089e69390574009bc29af693a329322f" translate="yes" xml:space="preserve">
          <source>Is a non-negative length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9230471c89460fbc268e8a93abe1379ab71dabed" translate="yes" xml:space="preserve">
          <source>Is a strictly positive &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt;&lt;/a&gt; describing the ideal number of columns into which the content of the element will be flowed. If the &lt;a href=&quot;column-width&quot;&gt;&lt;code&gt;column-width&lt;/code&gt;&lt;/a&gt; is also set to a non-&lt;code&gt;auto&lt;/code&gt; value, it merely indicates the maximum allowed number of columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a624bd11d22f881dcf34f8a22eb687692639ed" translate="yes" xml:space="preserve">
          <source>Is a strictly positive &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt;&lt;/a&gt;, representing the amount of equidistant intervals composing the stepping function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dff28b30f47bb1dbe2c5a253787a8faa9ae9b79" translate="yes" xml:space="preserve">
          <source>Is a strictly positive &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;&amp;lt;integer&amp;gt;&lt;/code&gt;&lt;/a&gt;, representing the amount of equidistant treads composing the stepping function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be8627c55f2448ca1c41fd8ba2d719b6dbfbd9d8" translate="yes" xml:space="preserve">
          <source>Is a synonym for &lt;code&gt;khmer&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2cf2da35dc3e2375b1a32c6c6ca2c5549e6665" translate="yes" xml:space="preserve">
          <source>Is an &lt;a href=&quot;../angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the angle of the rotation. A positive angle denotes a clockwise rotation, a negative angle a counter-clockwise one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f192728f7df26e7f34dbbebf6b07630139b32dd2" translate="yes" xml:space="preserve">
          <source>Is an &lt;a href=&quot;../angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the angle to use to distort the element along the abscissa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4a53a1d585e2bba3116c84390a7e8d6cf2bd15b" translate="yes" xml:space="preserve">
          <source>Is an &lt;a href=&quot;../angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the angle to use to distort the element along the ordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b7b161a573169f5e888cf6444ea1c67fec8a4d" translate="yes" xml:space="preserve">
          <source>Is an &lt;a href=&quot;../angle&quot;&gt;&lt;code&gt;&amp;lt;angle&amp;gt;&lt;/code&gt;&lt;/a&gt; representing the angle to use to distort the element along the ordinate. If not defined, its default value is &lt;code&gt;0&lt;/code&gt;, resulting in a purely horizontal skewing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8179d2327d68c1eb00a5f6029249135809fcf242" translate="yes" xml:space="preserve">
          <source>Is an &lt;a href=&quot;image&quot;&gt;&lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;&lt;/a&gt; denoting the image to display. There can be several of them, separated by commas, as &lt;a href=&quot;multiple_backgrounds&quot;&gt;multiple backgrounds&lt;/a&gt; are supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6588799b28ebce2484f0d8dfcd9458d120b61396" translate="yes" xml:space="preserve">
          <source>Is any available input mechanism a pointing device, and if so, how accurate is it?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="969954b7cccc1b71f17f4b5c0bcb8bc32f3c8eac" translate="yes" xml:space="preserve">
          <source>Is it a CORS issue?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a967a72b1fdaa992f4826524b96c3ea51db32699" translate="yes" xml:space="preserve">
          <source>Is it safe to use CSS grids for my layout?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ceaa92a802c58fbc9e995c53fe681fc43734b79" translate="yes" xml:space="preserve">
          <source>Is one of the &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, or &lt;code&gt;center&lt;/code&gt; keyword describing the corresponding offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb2f14fda905660cc1bcf7484ae8ccd4863fcf21" translate="yes" xml:space="preserve">
          <source>Is one of the &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, or &lt;code&gt;center&lt;/code&gt; keyword describing how far from the left edge of the box the origin of the transform is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94469d73ee5983305f97b12c18ea5e57ecca0b58" translate="yes" xml:space="preserve">
          <source>Is one of the &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, or &lt;code&gt;center&lt;/code&gt; keyword describing how far from the top edge of the box the origin of the transform is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe4bdafd5b1e10460b4d4ab525eab19d0eaf52f0" translate="yes" xml:space="preserve">
          <source>Is the name of an attribute on the HTML element referenced in the CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c0ff04de8fe38db9e59acf91b08b5aa8a40fbf" translate="yes" xml:space="preserve">
          <source>Is the primary input mechanism a pointing device, and if so, how accurate is it?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef6f203817e58c01d740706770af34f2b0429a0" translate="yes" xml:space="preserve">
          <source>Is the user agent or underlying OS inverting colors?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6adf2779058bb9c161faf2ec3b7f9bccfe5abeea" translate="yes" xml:space="preserve">
          <source>Is the width of the gutter separating the grid lines, relative to the dimension of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8f4bf6a50d484d4bc5ac290cb2d992a4460163" translate="yes" xml:space="preserve">
          <source>Is the width of the gutter separating the grid lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cebcee0bcfce45687e5ed59d49f9b1f51373f32" translate="yes" xml:space="preserve">
          <source>Is the width of the gutter separating the rows. &lt;a href=&quot;percentage&quot;&gt;&lt;code&gt;&amp;lt;percentage&amp;gt;&lt;/code&gt;&lt;/a&gt; values are relative to the dimension of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b412c4acc9d41416229834f90a70526e25431b" translate="yes" xml:space="preserve">
          <source>Is used when you need the marker representations to be of a minimum length. For example if you want the counters to start at 01 and go through 02, 03, 04 etc, then the pad descriptor is to be used. For representations larger than the specified pad value, the marker is constructed as normal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="515e555fa0f8d3876c8f1c3dd55a25589700cea7" translate="yes" xml:space="preserve">
          <source>It allows specifying the coordinates of the cursor's hotspot, which will be clamped to the boundaries of the cursor image. If none are specified, the coordinates of the hotspot are read from the file itself (for CUR and XBM files) or are set to the top left corner of the image. An example of the CSS3 syntax is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f67a5d51a5498cd40c9e6bf502b722b402573c" translate="yes" xml:space="preserve">
          <source>It also truncates any margins collapsed with such a margin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="813689606e35d77191acd7d293d36db47eb9b971" translate="yes" xml:space="preserve">
          <source>It can also be used as laid out box size for &lt;a href=&quot;width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;height&quot;&gt;&lt;code&gt;height&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;min-width&quot;&gt;&lt;code&gt;min-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;min-height&quot;&gt;&lt;code&gt;min-height&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;max-width&quot;&gt;&lt;code&gt;max-width&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;max-height&quot;&gt;&lt;code&gt;max-height&lt;/code&gt;&lt;/a&gt;, where the maximum size refers to the maximum content size and the minimum size to the minimum content size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3afb4575d2643064cd8dcd35052b348fc0e334a" translate="yes" xml:space="preserve">
          <source>It corresponds to the &lt;a href=&quot;margin-top&quot;&gt;&lt;code&gt;margin-top&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;margin-right&quot;&gt;&lt;code&gt;margin-right&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;margin-bottom&quot;&gt;&lt;code&gt;margin-bottom&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;margin-left&quot;&gt;&lt;code&gt;margin-left&lt;/code&gt;&lt;/a&gt; property depending on the values defined for &lt;a href=&quot;writing-mode&quot;&gt;&lt;code&gt;writing-mode&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;direction&quot;&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;text-orientation&quot;&gt;&lt;code&gt;text-orientation&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb03def436d2e0a47de2de8fe869726b2a9acc8" translate="yes" xml:space="preserve">
          <source>It does not apply</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c90f6829f2a89da52276ca3facd7cbf434c05d37" translate="yes" xml:space="preserve">
          <source>It first filters all the rules from the different sources to keep only the rules that apply to a given element. That means rules whose selector matches the given element and which are part of an appropriate media at-rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9ad82addee7771b6d793da7c0754b0309ece0c" translate="yes" xml:space="preserve">
          <source>It is a &lt;a href=&quot;shorthand_properties&quot;&gt;shorthand property&lt;/a&gt; that sets both the &lt;a href=&quot;column-width&quot;&gt;&lt;code&gt;column-width&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;column-count&quot;&gt;&lt;code&gt;column-count&lt;/code&gt;&lt;/a&gt; properties in a single, convenient declaration. As with all shorthand properties, any omitted sub-values will be set to their &lt;a href=&quot;initial_value&quot;&gt;initial value&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88420ab8e9964decb11e267dc0af69b7ac4bd84a" translate="yes" xml:space="preserve">
          <source>It is a &lt;a href=&quot;shorthand_properties&quot;&gt;shorthand property&lt;/a&gt; that sets the individual &lt;code&gt;column-rule-*&lt;/code&gt; properties in a single, convenient declaration: &lt;a href=&quot;column-rule-width&quot;&gt;&lt;code&gt;column-rule-width&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;column-rule-style&quot;&gt;&lt;code&gt;column-rule-style&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;column-rule-color&quot;&gt;&lt;code&gt;column-rule-color&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979ee4b431ed11ea7e60ab3a3add3233527e3597" translate="yes" xml:space="preserve">
          <source>It is equivalent to &lt;code&gt;inline flex&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1a9eebf213a43577303ae60bd236b23ec8745a" translate="yes" xml:space="preserve">
          <source>It is equivalent to &lt;code&gt;inline flow-root&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9603703a2c56cdcca2ca77adbf8a95cba324c520" translate="yes" xml:space="preserve">
          <source>It is equivalent to &lt;code&gt;inline grid&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabf88927d0d3f57df7767d8847463cf5c87033d" translate="yes" xml:space="preserve">
          <source>It is equivalent to &lt;code&gt;inline table&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5328ae63871ade250fc5fac23b73291d8ef267f9" translate="yes" xml:space="preserve">
          <source>It is even possible to apply several transformations in a row:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3d394f7e75d591aa7633fe6bbfae1bf7d9bb7d0" translate="yes" xml:space="preserve">
          <source>It is important to ensure that the contrast ratio between the background color and the color of the text placed over it is high enough that people experiencing low vision conditions will be able to read the content of the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86cef34adf890f4bf6f4008f58aedf6383ec8f05" translate="yes" xml:space="preserve">
          <source>It is important to ensure that the contrast ratio between the color of the placeholder text and the background of the input is high enough that people experiencing low vision conditions will be able to read it while also making sure there is enough of a difference between the placeholder text and input text color that users do not mistake the placeholder for inputed data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650392f280ed4de9eb9c61598437536d4f77b7df" translate="yes" xml:space="preserve">
          <source>It is important to ensure that the contrast ratio between the color of the text and the background the text is placed over is high enough that people experiencing low vision conditions will be able to read the content of the page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fea00c4be9cdeb4d0ee8cf33274bc501cec5059" translate="yes" xml:space="preserve">
          <source>It is important to note that DIV #4, DIV #5 and DIV #6 are children of DIV #3, so stacking of those elements is completely resolved within DIV#3. Once stacking and rendering within DIV #3 is completed, the whole DIV #3 element is passed for stacking in the root element with respect to its sibling's DIV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a029c6ce4c3def49c393c4a509a795eda1e16ada" translate="yes" xml:space="preserve">
          <source>It is important to note that even if a ruleset characterized by a group of selectors is a kind of shorthand replacing rulesets with a single selector each, this doesn't apply to the validity of the ruleset itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4279d20189c4063933508ed5277bf85239ca96f" translate="yes" xml:space="preserve">
          <source>It is important to note that the notions of a block-level box and block container box are disjointed. The first, describes how the box behaves with its parents and sibling. The second, how it interacts with its descendants. Some block-level boxes, like tables, aren't block container boxes. Reciprocally, some block container boxes, like non-replaced inline blocks and non-replaced table cells, aren't block-level boxes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6954b8a497a9f53801b1e408d1ab96b727b368" translate="yes" xml:space="preserve">
          <source>It is often convenient to use the shorthand property &lt;a href=&quot;animation&quot;&gt;&lt;code&gt;animation&lt;/code&gt;&lt;/a&gt; to set all animation properties at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c922f74a60a17b02799597847ce590ee381a62fd" translate="yes" xml:space="preserve">
          <source>It is often convenient to use the shorthand property &lt;a href=&quot;font&quot;&gt;&lt;code&gt;font&lt;/code&gt;&lt;/a&gt; to set &lt;code&gt;font-size&lt;/code&gt; and other font related properties all at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a3a4943431b94775af13df3ac83163287edfd4c" translate="yes" xml:space="preserve">
          <source>It is often more convenient to set &lt;code&gt;line-height&lt;/code&gt; by using the &lt;a href=&quot;font&quot;&gt;&lt;code&gt;font&lt;/code&gt;&lt;/a&gt; shorthand as shown above, but this requires the &lt;code&gt;font-family&lt;/code&gt; property to be specified as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca011518fc1843f80c57ad00cb5fcd9fa9a3e479" translate="yes" xml:space="preserve">
          <source>It is often more convenient to use the shorthand &lt;a href=&quot;list-style&quot;&gt;&lt;code&gt;list-style&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ba376f86926ef6792f5a49c460bf5bd28ceb59" translate="yes" xml:space="preserve">
          <source>It is often more convenient to use the shorthand property &lt;a href=&quot;outline&quot;&gt;&lt;code&gt;outline&lt;/code&gt;&lt;/a&gt; when defining the appearance of an outline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098889f15dbdc47268f027a89465498ea0c7fb8d" translate="yes" xml:space="preserve">
          <source>It is permitted to nest &lt;code&gt;calc()&lt;/code&gt; functions, in which case the inner ones are treated as simple parentheses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae2ab2f7ee3778a0fea94029dd3e4c4fd6f5687" translate="yes" xml:space="preserve">
          <source>It is permitted to nest &lt;code&gt;max()&lt;/code&gt; and &lt;code&gt;min()&lt;/code&gt; functions as expression values, in which case the inner ones are treated as simple parentheses. The expressions are full math expressions, so you can use direct addition, subtraction, multiplication and division without using the calc() function itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a54951cd863959f5ec24e18319b24423b27c7c" translate="yes" xml:space="preserve">
          <source>It is permitted to nest &lt;code&gt;max()&lt;/code&gt; and other &lt;code&gt;min()&lt;/code&gt; functions as expression values. The expressions are full math expressions, so you can use direct addition, subtraction, multiplication and division without using the calc() function itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f958df13442b091f882dc7dcb027474b5aadaf" translate="yes" xml:space="preserve">
          <source>It is permitted to nest &lt;code&gt;min()&lt;/code&gt; and other &lt;code&gt;max()&lt;/code&gt; functions as expression values. The expressions are full math expressions, so you can use direct addition, subtraction, multiplication and division without using the calc() function itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9cd5ca29335392f52ea633feacf6bcc4c2af340" translate="yes" xml:space="preserve">
          <source>It is possible to use the &lt;a href=&quot;::-ms-ticks-after&quot;&gt;&lt;code&gt;::-ms-ticks-after&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;::-ms-ticks-before&quot;&gt;&lt;code&gt;::-ms-ticks-before&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;::-ms-track&lt;/code&gt; pseudo-elements together. To do so would create three sets of tick marks, but the best user experience is one set. To remove tick marks altogether, set the &lt;a href=&quot;color&quot;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt; property to &lt;code&gt;transparent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7983bed093cd371cfa5e05d5a2a11defbd8b758a" translate="yes" xml:space="preserve">
          <source>It is possible to use the &lt;a href=&quot;::-ms-ticks-after&quot;&gt;&lt;code&gt;::-ms-ticks-after&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;::-ms-ticks-before&lt;/code&gt;, and &lt;a href=&quot;::-ms-track&quot;&gt;&lt;code&gt;::-ms-track&lt;/code&gt;&lt;/a&gt; pseudo-elements together. To do so would create three sets of tick marks, but the best user experience is one set. To remove tick marks altogether, set the &lt;a href=&quot;color&quot;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt; property to &lt;code&gt;transparent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef15ebfef8ce9d9be3f3000c372cf600e3f77dd" translate="yes" xml:space="preserve">
          <source>It is possible to use the &lt;code&gt;::-ms-ticks-after&lt;/code&gt;, &lt;a href=&quot;::-ms-ticks-before&quot;&gt;&lt;code&gt;::-ms-ticks-before&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;::-ms-track&quot;&gt;&lt;code&gt;::-ms-track&lt;/code&gt;&lt;/a&gt; pseudo-elements together. To do so would create three sets of tick marks, but the best user experience is one set. To remove tick marks altogether, set the &lt;a href=&quot;color&quot;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt; property to &lt;code&gt;transparent&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abead7b8c69283ba494a3a3a5a531f196c47a069" translate="yes" xml:space="preserve">
          <source>It is this distribution of positive free space and removal of negative free space that we need to understand in order to understand the flex properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4725ff1feb3be7d4f3a8aba8b6a42293fce09da4" translate="yes" xml:space="preserve">
          <source>It is this requirement that the gap properties, once implemented, will solve for us. Proper gaps only happen on the inside edges of items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f506744ff44025c710ab225271364589747c4ac" translate="yes" xml:space="preserve">
          <source>It is worth noting that we might want to change the writing mode of our document for reasons other than publishing content in a language that uses a different writing mode. See &lt;a href=&quot;https://24ways.org/2016/css-writing-modes/&quot;&gt;this article&lt;/a&gt; for a full description of writing modes and ways to use them, both for content in other languages and for creative reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e928076804ef99476aff9c7a4017c66753e3c5d0" translate="yes" xml:space="preserve">
          <source>It is worth noting that you do not have to use grid in an &lt;em&gt;all or nothing&lt;/em&gt; way. You could start by simply enhancing elements in your design with grid, that could otherwise display using an older method. Overwriting of legacy methods with grid layout works surprisingly well, due to the way grid interacts with these other methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3168d9914dd51d6f02471534c957a66be4d359a" translate="yes" xml:space="preserve">
          <source>It is worth noting, that using these space distribution values may cause items on your grid to become larger. If an item spans more than one grid track, as further space is added between the tracks, that item needs to become large to absorb the space. We&amp;rsquo;re always working in a strict grid. Therefore, if you decide to use these values, ensure that the content of your tracks can cope with the extra space, or that you have used alignment properties on the items, to cause them to move to the start rather than stretch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a666ce9ede14dedf34747b996e12352a3da6923c" translate="yes" xml:space="preserve">
          <source>It may be that you come up with your own use cases for auto-placement or any other part of grid layout. If you do, raise them as issues or add to an existing issue that could solve your use case. This will help to make future versions of the specification better.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ad06e5105e168e6d369b6647a7622bb674ab14" translate="yes" xml:space="preserve">
          <source>It may however be appropriate to include &lt;code&gt;will-change&lt;/code&gt; in your style sheet for an application that does page flips on key presses like an album or a slide deck presentation where the pages are large and complex. This will let browser prepare the transition ahead of time and allow for snappy transitions between the pages as soon as the key is pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51dc1fd54878d559ca2d0953b13ec41297fe32d" translate="yes" xml:space="preserve">
          <source>It modifies the abscissa of each element point by a constant factor, except when the scale factor is 1, in which case the function is the identity transform. The scaling is not isotropic, and the angles of the element are not conserved. &lt;code&gt;scaleX(-1)&lt;/code&gt; defines an &lt;a href=&quot;http://en.wikipedia.org/wiki/Axial_symmetry&quot;&gt;axial symmetry&lt;/a&gt;, with a vertical axis passing through the origin (as specified by the &lt;a href=&quot;../transform-origin&quot;&gt;&lt;code&gt;transform-origin&lt;/code&gt;&lt;/a&gt; property).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8279e45e6b4f02f7bd5d06a7bc3dae62ff5bd1" translate="yes" xml:space="preserve">
          <source>It modifies the ordinate of each element point by a constant factor, except when the scale factor is 1, in which case the function is the identity transform. The scaling is not isotropic, and the angles of the element are not conserved. &lt;code&gt;scaleY(-1)&lt;/code&gt; defines an &lt;a href=&quot;http://en.wikipedia.org/wiki/Axial_symmetry&quot;&gt;axial symmetry&lt;/a&gt;, with a horizontal axis passing through the origin (as specified by the &lt;a href=&quot;../transform-origin&quot;&gt;&lt;code&gt;transform-origin&lt;/code&gt;&lt;/a&gt; property).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ec26f20e3240e9d26a8b992ae6432bcebc20f1" translate="yes" xml:space="preserve">
          <source>It must not contain a &lt;code&gt;symbols&lt;/code&gt; or &lt;code&gt;additive-symbols&lt;/code&gt; descriptor, or else the counter style rule is invalid. If one more more counter styles defenitions form a cycle with their extends values, the browser will treat all the participating counter styles as extending from the decimal style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03476b0802d34f25440078ad06f1b3c9a498df1" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-border-after&quot;&gt;&lt;code&gt;-webkit-border-after&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-border-start&quot;&gt;&lt;code&gt;-webkit-border-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-border-end&quot;&gt;&lt;code&gt;-webkit-border-end&lt;/code&gt;&lt;/a&gt;, which define the other borders of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5ff530afff2759b1e915810c10c96b2ebf35b8" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;inset-block-end&quot;&gt;&lt;code&gt;inset-block-end&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;inset-inline-start&quot;&gt;&lt;code&gt;inset-inline-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;inset-inline-end&quot;&gt;&lt;code&gt;inset-inline-end&lt;/code&gt;&lt;/a&gt;, which define the other offsets of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9dfcf8749cf08633f6a559e50d8a169eebdbc09" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;inset-block-start&quot;&gt;&lt;code&gt;inset-block-start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;inset-block-end&quot;&gt;&lt;code&gt;inset-block-end&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;inset-inline-end&quot;&gt;&lt;code&gt;inset-inline-end&lt;/code&gt;&lt;/a&gt;, which define the other insets of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164b198c69d948b5527cfb9ff517fec35e85522f" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;inset-block-start&quot;&gt;&lt;code&gt;inset-block-start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;inset-block-end&quot;&gt;&lt;code&gt;inset-block-end&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;inset-inline-start&quot;&gt;&lt;code&gt;inset-inline-start&lt;/code&gt;&lt;/a&gt;, which define the other offsets of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e38d06cdb423745d6a84a4eae31e9328f12e2f0" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;inset-block-start&quot;&gt;&lt;code&gt;inset-block-start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;inset-inline-start&quot;&gt;&lt;code&gt;inset-inline-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;inset-inline-end&quot;&gt;&lt;code&gt;inset-inline-end&lt;/code&gt;&lt;/a&gt;, which define the other offsets of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be44e6f6fdd6d6b5bc11f36ca85e039287b30c6" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;margin-block-end&quot;&gt;&lt;code&gt;margin-block-end&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;margin-inline-start&quot;&gt;&lt;code&gt;margin-inline-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;margin-inline-end&quot;&gt;&lt;code&gt;margin-inline-end&lt;/code&gt;&lt;/a&gt;, which define the other margins of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d12f3496fdff02548f56e39c9a152bb71d6d2c9" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;margin-block-start&quot;&gt;&lt;code&gt;margin-block-start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;margin-block-end&quot;&gt;&lt;code&gt;margin-block-end&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;margin-inline-end&quot;&gt;&lt;code&gt;margin-inline-end&lt;/code&gt;&lt;/a&gt;, which define the other margins of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4547aadda72c3caf31b49ea7cd318c742cf36f5" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;margin-block-start&quot;&gt;&lt;code&gt;margin-block-start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;margin-block-end&quot;&gt;&lt;code&gt;margin-block-end&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;margin-inline-start&quot;&gt;&lt;code&gt;margin-inline-start&lt;/code&gt;&lt;/a&gt;, which define the other margins of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c80ecbfeebfc1fbe307467990c2907c4857d61" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;margin-block-start&quot;&gt;&lt;code&gt;margin-block-start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;margin-inline-start&quot;&gt;&lt;code&gt;margin-inline-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;margin-inline-end&quot;&gt;&lt;code&gt;margin-inline-end&lt;/code&gt;&lt;/a&gt;, which define the other margins of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9532d7526f31cd1ddf21abd9e36cd397b05f3f4" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;padding-block-end&quot;&gt;&lt;code&gt;padding-block-end&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;padding-inline-start&quot;&gt;&lt;code&gt;padding-inline-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;padding-inline-end&quot;&gt;&lt;code&gt;padding-inline-end&lt;/code&gt;&lt;/a&gt;, which define the other paddings of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f9e11f61b66854c37cb037683874ad659614532" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;padding-block-start&quot;&gt;&lt;code&gt;padding-block-start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;padding-block-end&quot;&gt;&lt;code&gt;padding-block-end&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;padding-inline-end&quot;&gt;&lt;code&gt;padding-inline-end&lt;/code&gt;&lt;/a&gt;, which define the other paddings of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e1a3456c5526118424a14cf8e98eedd5a7f3cf" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;padding-block-start&quot;&gt;&lt;code&gt;padding-block-start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;padding-block-end&quot;&gt;&lt;code&gt;padding-block-end&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;padding-inline-start&quot;&gt;&lt;code&gt;padding-inline-start&lt;/code&gt;&lt;/a&gt;, which define the other paddings of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c7100141d46ba2b98e182efe6b2e5f6c830118" translate="yes" xml:space="preserve">
          <source>It relates to &lt;a href=&quot;padding-block-start&quot;&gt;&lt;code&gt;padding-block-start&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;padding-inline-start&quot;&gt;&lt;code&gt;padding-inline-start&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;padding-inline-end&quot;&gt;&lt;code&gt;padding-inline-end&lt;/code&gt;&lt;/a&gt;, which define the other paddings of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a582436c2add46403634ec6c64ced1ea8aae869" translate="yes" xml:space="preserve">
          <source>It should be noted that at this point there is no way in the &lt;code&gt;@font-face&lt;/code&gt; declaration to 'map' a specific point on the variation axis of a variable font to the keyword &lt;code&gt;bold&lt;/code&gt; (or any other keyword). This can generally be resolved fairly easily, but does require an extra step in writing your CSS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb03b8fd1fd04f3e6579ec3ae8b1f0413c0653c" translate="yes" xml:space="preserve">
          <source>It should be noted that when we define a grid we define the grid tracks, not the lines. Grid then gives us numbered lines to use when positioning items. In our three column, two row grid we have four column lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9db0053a121b40302b61d189d087aae57a59a0a" translate="yes" xml:space="preserve">
          <source>It should be remembered that the original implementation of CSS Grid Layout happened in Internet Explorer 10. This early specification did not contain all of the properties and values that the up-to-date specification has. There are also substantial differences between what shipped in IE10 and the current specification, even where the properties and values appear the same. This early implementation is also the version of Grid Layout implemented in Edge up to version 15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74811481532fd6a13eba8c3e342bedb0e4a67f8a" translate="yes" xml:space="preserve">
          <source>It's actually possible to change the definitions and orientations of these coordinate systems using CSS properties such as &lt;a href=&quot;../transform&quot;&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/a&gt;. However, we'll only talk about the standard coordinate system for now.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d488b5000639fd7316a3a176955e54c5ce0f62bf" translate="yes" xml:space="preserve">
          <source>It's also possible to create styles that are specific to a particular fragment of the document. This is done using the same identifying value that is found in the URI. Thus, to add a border to the &lt;code&gt;#example&lt;/code&gt; fragment, we would write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="778ced7e100024e59bbff71b9951492c5d8a1a00" translate="yes" xml:space="preserve">
          <source>It's common to use both &lt;code&gt;url()&lt;/code&gt; and &lt;code&gt;local()&lt;/code&gt; together, so that the user's installed copy of the font is used if available, falling back to downloading a copy of the font if it's not found on the user's device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a5d13a17ba0bd17ee454c31c5eb0e356b0ffe00" translate="yes" xml:space="preserve">
          <source>It's worth noting that the sizing algorithm only cares about the image's dimensions and proportions, or lack thereof. An SVG image with fixed dimensions will be treated just like a raster image of the same size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1616e2e5405e69c4e3914c67c644a9bd3ac00956" translate="yes" xml:space="preserve">
          <source>Italic</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6193919fada173889258c366ee9f05b45a02b56f" translate="yes" xml:space="preserve">
          <source>Item 1 starts at column line 1, spanning one track.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c1379e29c5cf81e8d8dbebd55e973616ce9076" translate="yes" xml:space="preserve">
          <source>Item 2 starts at column line -1, spanning to -3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d64c95efec2b97500f63caf51793d107ed9c5d" translate="yes" xml:space="preserve">
          <source>Item 3 starts at column line 1, spanning to column line 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0baf7bf76071340662fc3a8ddf55cbb96ba432c" translate="yes" xml:space="preserve">
          <source>Item placement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1afe57172a69a9c9f58bf1ce5efb03968d44b339" translate="yes" xml:space="preserve">
          <source>Item(s) selected in a control. Should be used with the &lt;code&gt;HighlightText&lt;/code&gt; foreground color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f3463db439be16bcf35fbeb57cd5199a421a56" translate="yes" xml:space="preserve">
          <source>Items can span one or more cells both by row or by column, and this creates a &lt;em&gt;grid area&lt;/em&gt;. Grid areas must be rectangular &amp;ndash; it isn&amp;rsquo;t possible to create an L-shaped area for example. The highlighted grid area spans two row and two column tracks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94875c0c64e45033ad39f0e808bd4d5288c4e10" translate="yes" xml:space="preserve">
          <source>Items can&amp;rsquo;t grow with no positive free space, and they won&amp;rsquo;t shrink unless there is negative free space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4ba382b1b84432fa758356c7ec189086b67f379" translate="yes" xml:space="preserve">
          <source>Items display in a row (the &lt;code&gt;flex-direction&lt;/code&gt; property's default is &lt;code&gt;row&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad22e02a9ad915e33b7990867696e958fab3ae75" translate="yes" xml:space="preserve">
          <source>Items will then wrap in the container. In the next example I have ten items all with a &lt;code&gt;flex-basis&lt;/code&gt; of &lt;code&gt;160px&lt;/code&gt; and the ability to grow and shrink. Once the first row gets to a point where there is not enough space to place another 160 pixel item, a new flex line is created for the items and so on until all of the items are placed. As the items can grow, they will expand larger than 160 px in order to fill each row completely. If there is only one item on the final line it will stretch to fill the entire line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83cfbb3cc55fce7b610e022a8a189ee61487125c" translate="yes" xml:space="preserve">
          <source>Items with an intrinsic aspect ratio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf158c7c5120290558384c0232fedb46a29504f9" translate="yes" xml:space="preserve">
          <source>Items with placement properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d543537dea8ff3af10fea7f19650559597728f82" translate="yes" xml:space="preserve">
          <source>Its extension to HTML elements, though present in early drafts of CSS Basic User Interface Module Level 3, has been pushed to its &lt;a href=&quot;http://wiki.csswg.org/spec/css4-ui#pointer-events&quot;&gt;level 4&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a7b47ce384431ae1eb227b6ba4f9591177fbbb" translate="yes" xml:space="preserve">
          <source>Its value is a prioritized, comma-separated list of external references or locally-installed font face names. When a font is needed the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/user_agent&quot;&gt;user agent&lt;/a&gt; iterates over the set of references listed using the first one it can successfully activate. Fonts containing invalid data or local font faces that are not found are ignored and the user agent loads the next font in the list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58668e7669fd564d99db5d581fcdb6a5618440b5" translate="yes" xml:space="preserve">
          <source>J</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1c8382a5664e15c09760b19e31b37639ac40495" translate="yes" xml:space="preserve">
          <source>JIS X 0208:1978</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6b48d7b1f75208832a33a757f4ffcc9bfc959b" translate="yes" xml:space="preserve">
          <source>JIS X 0208:1983</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb1ea7e6913d3475331965d5020085a59262c58" translate="yes" xml:space="preserve">
          <source>JIS X 0208:1990</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349541f40c3238d7cfaba2197fe7584ab8cb21ca" translate="yes" xml:space="preserve">
          <source>JIS X 0213:2004</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf67b2dfa7452eeeba2d99ea18fbc82a08a6af72" translate="yes" xml:space="preserve">
          <source>JIS-B4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d5b1d7fd1ebf7056b5fe370c6d90fad94177661" translate="yes" xml:space="preserve">
          <source>JIS-B5</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9239c22d1d1c990ca8c206cb408b345a3ec8114c" translate="yes" xml:space="preserve">
          <source>Japanese</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabd6fe8d763c51a9fbf7324f044e6ffa1963889" translate="yes" xml:space="preserve">
          <source>Japanese formal numbering to be used in legal or financial document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703c69600e070ab1081de5959051c3beb1b0c2f4" translate="yes" xml:space="preserve">
          <source>Japanese informal numbering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33fc64beda12d84ba20564feed9804f42d9249da" translate="yes" xml:space="preserve">
          <source>JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent&quot;&gt;&lt;code&gt;AnimationEvent&lt;/code&gt;&lt;/a&gt; API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe94f498f1cdb99b4e5ebe4411c03d1682c1c24" translate="yes" xml:space="preserve">
          <source>JavaScript Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c15ca41ff2b0ccf6512cfe528d1cc181cf599b14" translate="yes" xml:space="preserve">
          <source>JavaScript can access the &lt;code&gt;@keyframes&lt;/code&gt; at-rule with the CSS object model interface &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CSSKeyframesRule&quot;&gt;&lt;code&gt;CSSKeyframesRule&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a62b40b41ce0d42df8ba4b0874263a7aa928401" translate="yes" xml:space="preserve">
          <source>JavaScript content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf021b49cd8e796288272017b01657d2e5cc8dc" translate="yes" xml:space="preserve">
          <source>JavaScript examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4815d242f65f22a5033f376d11aa19ade048914" translate="yes" xml:space="preserve">
          <source>Just for the sake of completeness, here&amp;rsquo;s the HTML that displays the page content, including the list into which the script inserts information about the received events:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c4942f73b35f684c1bc282f462d7decb78ec94" translate="yes" xml:space="preserve">
          <source>Just like linear gradients, you can also stack radial gradients. The first specified is on top, the last on the bottom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536d2746f7f2f88df35515a9cd5e44cb1582b9ca" translate="yes" xml:space="preserve">
          <source>Justify</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323bd53c811584ccea8cf8e9d3bcdc1ce9505648" translate="yes" xml:space="preserve">
          <source>Justifying Items on the Inline Axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9a1b50bc7b997f6d378c4e08fe8258618f306b" translate="yes" xml:space="preserve">
          <source>Justifying the grid tracks on the row axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3130a1430df90f7ad2b8cef85a5471d0e92f3969" translate="yes" xml:space="preserve">
          <source>Juxtaposition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a7628f58199c7079042a94c19241b733dd76ee0" translate="yes" xml:space="preserve">
          <source>Keep in mind that once you set &lt;code&gt;align-self:&amp;nbsp;start&lt;/code&gt;, the height of each child &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; will be determined by the contents of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. This is in contrast to omitting &lt;code&gt;&lt;a href=&quot;../align-self&quot;&gt;align-self&lt;/a&gt;&lt;/code&gt; completely, in which case the height of each &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; stretches to fill its grid area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8bea35eefc1e714b1a6555fcb100dafbc9b8ea" translate="yes" xml:space="preserve">
          <source>Keep in mind that these are custom properties, not actual variables like you might find in other programming languages. The value is computed where it is needed, not stored for use in other rules. For instance, you cannot set a property for an element and expect to retrieve it in a sibling's descendant's rule. The property is only set for the matching selector and its descendants, like any normal CSS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e094be9c115702e9e6bd6183639f6738aaf8f5dc" translate="yes" xml:space="preserve">
          <source>Kerning (&lt;a href=&quot;../font-kerning&quot;&gt;&lt;code&gt;font-kerning&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610e7d4afcb0ce4e34e1229014d83237eab3a05b" translate="yes" xml:space="preserve">
          <source>Key Concepts and Terminology</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99a5fad781343a4ebc41c9fd0646ca593604548" translate="yes" xml:space="preserve">
          <source>Key concepts and terminology</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3926e039fd753c472f6e172496fda0574369261" translate="yes" xml:space="preserve">
          <source>Keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8619cd742f973918239ca10ea6bb7210df3762b" translate="yes" xml:space="preserve">
          <source>Keyword color values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1225da0d096f8f15aea31032eb0e8694e4f7e4b" translate="yes" xml:space="preserve">
          <source>Keyword index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea1ad53d84b27e3538ec5125ef87cc6151130f5" translate="yes" xml:space="preserve">
          <source>Keyword to numeric mapping</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5c9ddeef7cae40b880e0855843e7fd270cd7f9" translate="yes" xml:space="preserve">
          <source>Keyword values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f530db58b3e5088dc7412c6d2298ba3f8456bdeb" translate="yes" xml:space="preserve">
          <source>Keywords</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eed9bd33567933d6441d0fb9f6700e5e0a88a0a" translate="yes" xml:space="preserve">
          <source>Keywords and percentages refer to the canvas instead of the object itself. See &lt;a href=&quot;https://bugzil.la/1209061&quot;&gt;bug 1209061&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc706a2ed131aeaa5a4e84d56a8c915c48b5dfac" translate="yes" xml:space="preserve">
          <source>Keywords are a good way to set the size of fonts on the web. By setting a keyword font size on the body element, you can set relative font-sizing everywhere else on the page, giving you the ability to easily scale the font up or down on the entire page accordingly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c0541d8c590206617df62e4998fbf5d32ef32b" translate="yes" xml:space="preserve">
          <source>Keywords for common timing functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927be3b222733d8a218abcdcfa4d821e9c926ce7" translate="yes" xml:space="preserve">
          <source>Kind of object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3b174ac92802ce629b23582265c3b78c98395e" translate="yes" xml:space="preserve">
          <source>Korean hangul numbering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c5f89537d03f6774bc3b0f5a13cdb0e81a3bdf6" translate="yes" xml:space="preserve">
          <source>Korean hanja numbering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2228985493d9e43e461c7be5525529248735ad9c" translate="yes" xml:space="preserve">
          <source>Labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2dee6a0be52e08e5abd1adc0e82a190d36a98f0" translate="yes" xml:space="preserve">
          <source>Language-related pseudo-classes: &lt;a href=&quot;:lang&quot;&gt;&lt;code&gt;:lang&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;:dir&quot;&gt;&lt;code&gt;:dir&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4a531c2a377cf48a5c1f4d4293cc20ac462d32" translate="yes" xml:space="preserve">
          <source>Language-specific rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db07be184479f34078cd4fc76d248dc0975720e9" translate="yes" xml:space="preserve">
          <source>Languages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca35216490bbff4772ec6412d7de9fc1fa6f8e5b" translate="yes" xml:space="preserve">
          <source>Large grids with many tracks can use the &lt;code&gt;repeat()&lt;/code&gt; notation, to repeat all or a section of the track listing. For example the grid definition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2c3057ceb222ec3ef89eae7c0393769f3aa45d" translate="yes" xml:space="preserve">
          <source>Large sections of text set with a &lt;code&gt;font-style&lt;/code&gt; value of &lt;code&gt;italic&lt;/code&gt; may be difficult for people with cognitive concerns such as Dyslexia to read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9689e23a844cc36d16318857b05ae7e39532c6f" translate="yes" xml:space="preserve">
          <source>Large sections of text set with a &lt;code&gt;font-variant&lt;/code&gt; value of &lt;code&gt;all-small-caps&lt;/code&gt; or &lt;code&gt;all-petite-caps&lt;/code&gt; may be difficult for people with cognitive concerns such as Dyslexia to read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c20422b04b2892ba0b0da6b6a07e09d328079f" translate="yes" xml:space="preserve">
          <source>Large sections of text set with a &lt;code&gt;text-transform&lt;/code&gt; value of &lt;code&gt;uppercase&lt;/code&gt; may be difficult for people with cognitive concerns such as Dyslexia to read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0b86a2d69031a786d1bc9f0e43c76dfef8600f" translate="yes" xml:space="preserve">
          <source>Last Updated Date: July 9, 2005</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d9667692519ddb9eea1c21a5666bfc23b72552" translate="yes" xml:space="preserve">
          <source>Last Updated Date: Published 30 Aug 2002</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c96659e7ae68683ad6a454a38fe3a83b67a4d25" translate="yes" xml:space="preserve">
          <source>Layering items with &lt;code&gt;z-index&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972ad8d8a50397ba8c02433ed8f048eeb4074b85" translate="yes" xml:space="preserve">
          <source>Layout</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6244ff239cc780ac7072110d33e417834249055b" translate="yes" xml:space="preserve">
          <source>Layout and the containing block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3bd184de8e98d40dad596370c6c22a00cfe87b6" translate="yes" xml:space="preserve">
          <source>Layout mode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3343e1bad41376eb659e4bd5d48296c954d51fe9" translate="yes" xml:space="preserve">
          <source>Layout using line-based placement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab65764160b69ecec126aafbfe3e82ed26cf224a" translate="yes" xml:space="preserve">
          <source>Layout using named grid lines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1d7913e695042635fdbe1ddb0ac8e63660e6f43" translate="yes" xml:space="preserve">
          <source>Lays out the characters of horizontal scripts naturally (upright), as well as the glyphs for vertical scripts. Note that this keyword causes all characters to be considered as left-to-right: the used value of &lt;a href=&quot;direction&quot;&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/a&gt; is forced to be &lt;code&gt;ltr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="203d6e25e30be7570c3e4d86d921cc83c47ceb48" translate="yes" xml:space="preserve">
          <source>Lea Verou's article on reflection using &lt;a href=&quot;http://lea.verou.me/2011/06/css-reflections-for-firefox-with-moz-element-and-svg-masks/&quot;&gt;CSS features on the standard track&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ef6bff52166f1183442b7370fead5ece360d999" translate="yes" xml:space="preserve">
          <source>Leading and trailing spaces are stripped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4c4a243c03536bb77923e3b07697a1a2df0af6c" translate="yes" xml:space="preserve">
          <source>Leading to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfc20d57a179c12d6ecc7eab2a34c44025c6334" translate="yes" xml:space="preserve">
          <source>League Mono Variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14cec16eb011461dd1698acb2dd092fd8698985d" translate="yes" xml:space="preserve">
          <source>Learn Layout: &lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning&quot;&gt;Positioning&lt;/a&gt;&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8103ebaa8c491a30e8ccfa2432589461ca67187" translate="yes" xml:space="preserve">
          <source>Learn how Media Queries can help users understand your website better.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1723c78fbc1f5c847a594e5a5ac19e560f0eefdc" translate="yes" xml:space="preserve">
          <source>Leaving a grid cell empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac113a1cc0892afdbbec48759bf7aebd06d51f2" translate="yes" xml:space="preserve">
          <source>Left alignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2429df49956781ba18744100a513895509a5016d" translate="yes" xml:space="preserve">
          <source>Left-to-right block flow. Layout is vertical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36832053790940c9f124b15d4ee799d8068a526d" translate="yes" xml:space="preserve">
          <source>Legacy alignment: the &lt;code&gt;legacy&lt;/code&gt; keyword, followed by one of &lt;code&gt;left&lt;/code&gt; or &lt;code&gt;right&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5846955db6bef539707c3590c701613c5f0cf50f" translate="yes" xml:space="preserve">
          <source>Legend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="786c62f9cf8856203d110036992d80f805b8ff51" translate="yes" xml:space="preserve">
          <source>Legible &lt;code&gt;word-spacing&lt;/code&gt; must be determined on a case-by-case basis, as different font families have different character widths. There is no one value that can ensure all font families automatically maintain their legibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9558e9b50cc81b5b3b73e1dc18205c1775dc849" translate="yes" xml:space="preserve">
          <source>Legible letter-spacing must be determined on a case-by-case basis, as different font families have different character widths. There is no one value that can ensure all font families automatically maintain their legibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48de85df924a2665a794e88cdc4b82f06ab2ec26" translate="yes" xml:space="preserve">
          <source>Lengths specified as percentages are calculated relative to the &lt;strong&gt;initial viewport&lt;/strong&gt;, which is the viewport before any user agent or authored styles have had an opportunity to adjust the viewport. This is typically based on the size of the window on desktop browsers that aren't in full screen mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50a873db19d92f05f7a15af0f9d1316fcd0bcb08" translate="yes" xml:space="preserve">
          <source>Less common data types, called &lt;em&gt;non-terminal data types&lt;/em&gt;, are also surrounded by '&lt;code&gt;&amp;lt;&lt;/code&gt;' and '&lt;code&gt;&amp;gt;&lt;/code&gt;'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1be8a03dd5f9ed18d1988bf51e079e5f54b2d3" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s add another keyframe to the previous example&amp;rsquo;s animation. Let&amp;rsquo;s say we want the header&amp;rsquo;s font size to increase as it moves from right to left for a while, then to decrease back to its original size. That&amp;rsquo;s as simple as adding this keyframe:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d13ad12eb812e5fff9eac2cc6d9c23794960115" translate="yes" xml:space="preserve">
          <source>Let's Talk About Speech CSS | CSS Tricks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f3aac4b0c4250709985ac989f5459fe4ea139ab" translate="yes" xml:space="preserve">
          <source>Let's apply the following rectangle as a mask:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3ad9561890132e7bda7f7e66875705044fe9f3" translate="yes" xml:space="preserve">
          <source>Let's assume an em in the above case is 16px wide:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ba24f3154af18ff7307f7695be99e4145f1a89" translate="yes" xml:space="preserve">
          <source>Let's consider a large image, a 2982x2808 Firefox logo image. We want (for some reason likely involving horrifyingly bad site design) to tile four copies of this image into a 300x300-pixel element. To do this, we can use a fixed &lt;code&gt;background-size&lt;/code&gt; value of 150 pixels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6b55f99374c37367a23080f73b478969e7d493" translate="yes" xml:space="preserve">
          <source>Let's create two classes: one for boring paragraphs and one for exciting ones. We can use these classes to add pseudo-elements to the end of paragraphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927db4b57c8e1149f775246e337f8bcdb40210e2" translate="yes" xml:space="preserve">
          <source>Let's explain what's going on here:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b81bd10cd3060ad43fce4348798a8dd5b3513fb5" translate="yes" xml:space="preserve">
          <source>Let's have a look at a couple of these in order to see the effect creating a new</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82387c48c52fdc199b9df7983724491b054bed17" translate="yes" xml:space="preserve">
          <source>Let's look at an example involving multiple sources of CSS across the various origins; here we have a user agent style sheet, two author style sheets, a user stylesheet, and inline styles within the HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6a572628d177e902fc6dc6b0adfbfdeb2ef90d" translate="yes" xml:space="preserve">
          <source>Let's look at some CSS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0a3aa7eef73ba9c6a090d63cafc787dd4438afd" translate="yes" xml:space="preserve">
          <source>Let's look at the script in two sections. First, the code that logs the coordinates to the screen. This code will be called by the event handler for the various mouse events we watch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f42abefed842c5c5033cc187ed2bba0fc846120" translate="yes" xml:space="preserve">
          <source>Let's look at the two approaches for a moment. In Internet Explorer and Opera, the lists are indented by setting a left margin of 40 pixels on the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element. If we apply a background color to the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; element and leave the list item and &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; borders in place, we get the result shown in Figure 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dfae6521e79457fcf78e8b78e0c3ec71723c718" translate="yes" xml:space="preserve">
          <source>Let's start with this simple CSS that applies the same color to elements of different classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20538de7ec954c30653752fe40c3be7d10e62c2f" translate="yes" xml:space="preserve">
          <source>Let's take a look at an example. First some HTML:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6753781dd7a9b30329381721210c464a43403a9" translate="yes" xml:space="preserve">
          <source>Let's take a look at an example. This simple example creates a set of nested boxes. Whenever the mouse enters, moves around inside, or exits the inner box, the corresponding event is handled by updating a set of informational messages within the box, listing out the current mouse coordinates in each of the four available &lt;a href=&quot;coordinate_systems&quot;&gt;coordinate systems&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2a03c2328213e4e10e56a10aba3515aafc8c48" translate="yes" xml:space="preserve">
          <source>Lets the author specify symbols to be appended or prepended to the counter representation if the value is negative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="091ba853f3cef2696cbb685f2ad95d37ece92e16" translate="yes" xml:space="preserve">
          <source>Lets you pause and resume the animation sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47984d503510d210c1bab7366b10c29c677941dc" translate="yes" xml:space="preserve">
          <source>Letting the browser control the animation sequence lets the browser optimize performance and efficiency by, for example, reducing the update frequency of animations running in tabs that aren't currently visible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d8e88746aed29c5732084d86f85c42f51868b5" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de0fb71572b9e4e053f85172ed7d869dfeda40a" translate="yes" xml:space="preserve">
          <source>Lift the restriction to only apply it for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90ce7c49cf079e2f1de87660ef0c0125118f9b7" translate="yes" xml:space="preserve">
          <source>Lifts the restriction to only apply &lt;code&gt;:visited&lt;/code&gt; to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; element. Lets browsers restrict its behavior for privacy reasons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e691c3190b85011ff81becb46ea220ff4242c631" translate="yes" xml:space="preserve">
          <source>Ligatures (&lt;a href=&quot;../font-variant-ligatures&quot;&gt;&lt;code&gt;font-variant-ligatures&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1e381d0f5aeea15bde13bcd657c121c3cd5375" translate="yes" xml:space="preserve">
          <source>Ligatures are glyphs that replace two or more separate glyphs in order to represent them more smoothly (from a spacing or aesthetic perspective). Some of the most common are letters like 'fi', 'fl', or 'ffl' &amp;mdash; but there are many other possibilities. There are the most frequent ones (referred to as common ligatures), and there are also more specialized categories like 'discretionary ligatures', 'historical ligatures', and 'contextual alternates'. While these last ones are not technically ligatures, they are generally similar in that they replace specific combinations of letters when they appear together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36ef8aba22905e2d2efbf1ac1d6230d5761859d" translate="yes" xml:space="preserve">
          <source>Light</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9b1015d6b9e4cb0e81a1f8cd1c9ca43a768c2b7" translate="yes" xml:space="preserve">
          <source>Light level of the environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45812c58f9490640017f335cfaa69bcccb6270d1" translate="yes" xml:space="preserve">
          <source>Lighter and darker greens</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6423f80097f72e0296a64ca9c34d2ad2993213bf" translate="yes" xml:space="preserve">
          <source>Like in CSS1, but removes its effect on inline elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5363f85347ec603724151c609dfc48bd210b26ac" translate="yes" xml:space="preserve">
          <source>Like regular classes, you can chain together as many pseudo-classes as you want in a selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74df946b28c7e1f19a91fdcea890f3ea839e491e" translate="yes" xml:space="preserve">
          <source>Like tables, grid layout enables an author to align elements into columns and rows. However, many more layouts are either possible or easier with CSS grid than they were with tables. For example, a grid container's child elements could position themselves so they actually overlap and layer, similar to CSS positioned elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a3031af0b0e247a4d225d7ab916c945777f9d7" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;hidden&lt;/code&gt; keyword, displays no border. Unless a &lt;a href=&quot;background-image&quot;&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt; is set, the calculated value of &lt;a href=&quot;border-top-width&quot;&gt;&lt;code&gt;border-top-width&lt;/code&gt;&lt;/a&gt; will be &lt;code&gt;0&lt;/code&gt;, even if the specified value is something else. In the case of table cell and border collapsing, the &lt;code&gt;none&lt;/code&gt; value has the &lt;em&gt;lowest&lt;/em&gt; priority: if any other conflicting border is set, it will be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb7daff9804a2d8ba2ba0db202e49f0ceabe2642" translate="yes" xml:space="preserve">
          <source>Like the &lt;code&gt;none&lt;/code&gt; keyword, displays no border. Unless a &lt;a href=&quot;background-image&quot;&gt;&lt;code&gt;background-image&lt;/code&gt;&lt;/a&gt; is set, the calculated value of &lt;a href=&quot;border-top-width&quot;&gt;&lt;code&gt;border-top-width&lt;/code&gt;&lt;/a&gt; will be &lt;code&gt;0&lt;/code&gt;, even if the specified value is something else. In the case of table cell and border collapsing, the &lt;code&gt;hidden&lt;/code&gt; value has the &lt;em&gt;highest&lt;/em&gt; priority: if any other conflicting border is set, it won't be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0440ed5025e05c7e67481c59993553757eff3afa" translate="yes" xml:space="preserve">
          <source>Limitations of column-span</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="545bf2883d9d02dff1fdc6075a7008c537c88915" translate="yes" xml:space="preserve">
          <source>Limited to the &lt;a href=&quot;content&quot;&gt;&lt;code&gt;content&lt;/code&gt;&lt;/a&gt; property; always return a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf167073e4afed85da6f724d5e6724ec36f44c5" translate="yes" xml:space="preserve">
          <source>Limits to visited link styles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13100646858027b627ad1d730f8c260e21aaf34f" translate="yes" xml:space="preserve">
          <source>Line boxes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f883800b565de1367f89fbe405b8303a24e555" translate="yes" xml:space="preserve">
          <source>Line breaks inside &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre&quot;&gt;&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;&lt;/a&gt; elements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e537c8dfff1137a16b64fbe498d7651054b606" translate="yes" xml:space="preserve">
          <source>Line-based placement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fedfbe82b85c92071925a605908cc3b232b426b2" translate="yes" xml:space="preserve">
          <source>Line-based placement and Writing Modes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43064943b3bbdb1a1c43c298c230b70562ba8d21" translate="yes" xml:space="preserve">
          <source>Line-relative values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6182eedbd35403b1b3c82436654bbdd226cb830d" translate="yes" xml:space="preserve">
          <source>Linear gradient</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c3a655a7baad2e33ef704871f598912f8d3d13" translate="yes" xml:space="preserve">
          <source>Lines are numbered according to the writing mode of the document. In a left-to-right language, line 1 is on the left-hand side of the grid. In a right-to-left language, it is on the right-hand side of the grid. Lines can also be named, and we will look at how to do this in a later guide in this series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c4b224e12548e8b95fe6334386ede9c680977f" translate="yes" xml:space="preserve">
          <source>Lines may only break at normal word break points (such as a space between two words).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d111138b33a0fcc709b7fa372e86328b07a66cb3" translate="yes" xml:space="preserve">
          <source>Lining and Oldstyle figures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d10bb0a2f928802138462cae8607e05fbb171c8" translate="yes" xml:space="preserve">
          <source>Link to Selectors Level 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b6e314e5a14a1ed7a8ec0352aefdd2c8da6f74" translate="yes" xml:space="preserve">
          <source>Link-related pseudo-classes: &lt;a href=&quot;:link&quot;&gt;&lt;code&gt;:link&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;:active&quot;&gt;&lt;code&gt;:active&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;:hover&quot;&gt;&lt;code&gt;:hover&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b4d5fd98f8522e4de8a880a3848965296a3c67" translate="yes" xml:space="preserve">
          <source>Link-related pseudo-classes: &lt;a href=&quot;:link&quot;&gt;&lt;code&gt;:link&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;:visited&quot;&gt;&lt;code&gt;:visited&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;:hover&quot;&gt;&lt;code&gt;:hover&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fee080c608e3e96b9b2a08161eda11a64d324cc" translate="yes" xml:space="preserve">
          <source>Link-related pseudo-classes: &lt;a href=&quot;:visited&quot;&gt;&lt;code&gt;:visited&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;:hover&quot;&gt;&lt;code&gt;:hover&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;:active&quot;&gt;&lt;code&gt;:active&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014bcd654c60d5250fad2123b073b9c0ac3340f6" translate="yes" xml:space="preserve">
          <source>Links</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e696599cd6356a62048c319b4436a31496f41148" translate="yes" xml:space="preserve">
          <source>Links &amp;amp; status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013341e76133765858c8bb47f3e77fd6e5ed188f" translate="yes" xml:space="preserve">
          <source>Links to Selectors Level 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3c49aaf1ce8f9f232ffc7b44391811f5a6afae" translate="yes" xml:space="preserve">
          <source>Lists &lt;code&gt;height&lt;/code&gt; as animatable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a14237b21a917ef158b94eee242c0fd98631bdf9" translate="yes" xml:space="preserve">
          <source>Lists &lt;code&gt;text-indent&lt;/code&gt; as animatable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13463e89d2eee726c9c8bfc150bc2c2bca624820" translate="yes" xml:space="preserve">
          <source>Lists &lt;code&gt;width&lt;/code&gt; as animatable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275e94ce13d431156c5042236e4f0adcc45a86a7" translate="yes" xml:space="preserve">
          <source>Little white lies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65c821a596ceec1c13b619a965d32175734a0c5f" translate="yes" xml:space="preserve">
          <source>Live</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a9797337c3ee31a3145f2060d0f20813adecfa" translate="yes" xml:space="preserve">
          <source>Live Result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07193fe45c4dfe70880268287df9801670810bc0" translate="yes" xml:space="preserve">
          <source>Live Samples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19646932df2821a76d070d391a81a56f5b95215" translate="yes" xml:space="preserve">
          <source>Live example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66c6803c67f60624e428beacade6cb10972157a" translate="yes" xml:space="preserve">
          <source>Live examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8f778670bbf82fa7e6d46dc6c3e86457cc1eb34" translate="yes" xml:space="preserve">
          <source>Live keyword</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f641e8e90d42931bf33f6a7a99170e709e885f8" translate="yes" xml:space="preserve">
          <source>Live result</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2b0a1084a3ea629fbf0148f08da2a6c9f8133e" translate="yes" xml:space="preserve">
          <source>Live sample</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc9cd8af766453e3f002c92aa7dcb59890ec48c" translate="yes" xml:space="preserve">
          <source>Live sample link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81b072a609cb829f45333cb83e086a659ba9738" translate="yes" xml:space="preserve">
          <source>Living Standard</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c768671f98a0e08288b7e5f49264e4e1782290" translate="yes" xml:space="preserve">
          <source>Locating DOM elements using selectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282e33be2cdf13bfecdf0bf8c2c5d1ced70868cf" translate="yes" xml:space="preserve">
          <source>Location of image to use as the marker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0de5b30de0a03480f7e65890de9508e7be98485" translate="yes" xml:space="preserve">
          <source>Logical Properties &amp;amp; Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2861d321a2c702d123bd9134bf01a21cab7b4017" translate="yes" xml:space="preserve">
          <source>Logical Properties and Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a331b183e20c8d991c6d8829f034fa8bf4130c" translate="yes" xml:space="preserve">
          <source>Logical Properties and Values can be thought of as a couple of groups in terms of current browser support. Some of the properties are essentially mappings from the physical versions, for example &lt;a href=&quot;../inline-size&quot;&gt;&lt;code&gt;inline-size&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;../width&quot;&gt;&lt;code&gt;width&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../margin-inline-start&quot;&gt;&lt;code&gt;margin-inline-start&lt;/code&gt;&lt;/a&gt; rather than &lt;a href=&quot;../margin-left&quot;&gt;&lt;code&gt;margin-left&lt;/code&gt;&lt;/a&gt;. These mapped properties are starting to see good browser support, and if you look at the individual pages for the properties in the &lt;a href=&quot;../css_logical_properties#Reference&quot;&gt;reference here on MDN&lt;/a&gt; you will see that Edge is the only modern browser currently missing these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd223cd9c4b162f991b5ecf54a041f80cc6cd9e8" translate="yes" xml:space="preserve">
          <source>Logical Properties for floating and positioning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929439cd985fd3c37876b48f2d6e581d8ed4600b" translate="yes" xml:space="preserve">
          <source>Logical Properties for margins, borders and padding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa63ff7da64da7aa04da3c434871441132eef59b" translate="yes" xml:space="preserve">
          <source>Logical Properties for sizing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad27a6e257d9647cb4ce5662506ed3725c7b2c0d" translate="yes" xml:space="preserve">
          <source>Logical Property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d2ff9bfef585c82e2e110fa904adda3f674b95" translate="yes" xml:space="preserve">
          <source>Logical and physical properties and values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72c96732e66ab9ff9a9ddd0c64bca474ed3c1060" translate="yes" xml:space="preserve">
          <source>Logical keywords for resize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5da835bb3de6e8855950138a28dea23921e5aaa" translate="yes" xml:space="preserve">
          <source>Logical operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce1981f02ba57f7187c58943189ef4e396ed3b7" translate="yes" xml:space="preserve">
          <source>Logical properties and values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8a95788a9d607f68a3eff0e8eb2f3dd0aeceb8" translate="yes" xml:space="preserve">
          <source>Logical properties and values do not make an assumption about text direction. Which is why in Grid Layout we use the keyword &lt;code&gt;start&lt;/code&gt; when aligning something to the start of the container. For me, working in English, &lt;code&gt;start&lt;/code&gt; may well be on the left, however it doesn&amp;rsquo;t have to be, and the word &lt;code&gt;start&lt;/code&gt; infers no physical location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33e6776f0ee6c1bf2e02ac6f497fd690642b4de8" translate="yes" xml:space="preserve">
          <source>Logical properties and values use the abstract terms &lt;em&gt;block&lt;/em&gt; and &lt;em&gt;inline&lt;/em&gt; to describe the direction in which they flow. The physical meaning of these terms depends on the &lt;a href=&quot;css_writing_modes&quot;&gt;writing mode&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e3ac7ccc9ccd54688dac9bc68301bc7e2da4a3" translate="yes" xml:space="preserve">
          <source>Logical properties for everything!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b12c315df4a8b311da4af5d04a370124b430f6ac" translate="yes" xml:space="preserve">
          <source>Logical property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e7d80d88d6afbab6c16703eb84ac018c6525f3" translate="yes" xml:space="preserve">
          <source>Logical property or value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db211070f601ef6f1c4f27a9a8c0fedf5dc7ad97" translate="yes" xml:space="preserve">
          <source>Logical values for alignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c51bae7964ca81c43b1269ff8892cdd5d699c53" translate="yes" xml:space="preserve">
          <source>Look for available weights between the target and &lt;code&gt;500&lt;/code&gt;, in ascending order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59c6077f6666cab68bcb11ef3cc1b57e3e87cc5" translate="yes" xml:space="preserve">
          <source>Lots of new values, not all clearly defined yet. Any differences in behavior, unrelated to new features, are expected to be unintentional; please report.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83810d85fe9fbec34579063af430b44a5f6a656e" translate="yes" xml:space="preserve">
          <source>Lowercase ASCII letters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc818967d4728d88e19768227d5f47c32f6f86bf" translate="yes" xml:space="preserve">
          <source>Lowercase classical Greek</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7965038d9279a1ba3d11f19c8811cfcd5ca070" translate="yes" xml:space="preserve">
          <source>Lowercase roman numerals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb802d67d1e72080709b758976ac96e5ab6cd6f5" translate="yes" xml:space="preserve">
          <source>Lowest Version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27cc99609f64b6908532495c619d67aa17c968e2" translate="yes" xml:space="preserve">
          <source>Lowest version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63ae6dd4fc9f9dda66970e827d13f7c73fe841c" translate="yes" xml:space="preserve">
          <source>M</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b659266b55e413c0c9be6997f1af70a3e76ee1" translate="yes" xml:space="preserve">
          <source>MDN Basic form hints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0385b2a4a867b7b37365707bd3de1b582a79ccbc" translate="yes" xml:space="preserve">
          <source>MDN Understanding WCAG, Guideline 1.1 explanations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e81fe994b3e49859a739e0dfd8755f48e2a4a72" translate="yes" xml:space="preserve">
          <source>MDN Understanding WCAG, Guideline 1.3 explanations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef7cfe99646b2e0c06e34ca8761bb38f8ac9432" translate="yes" xml:space="preserve">
          <source>MDN Understanding WCAG, Guideline 1.4 explanations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a29d717494d33e490ea688e8f7ae0a2d06fa41b8" translate="yes" xml:space="preserve">
          <source>MDN Understanding WCAG, Guideline 2.2 explanations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02fdc7d8bc1d942fae90460eadb61e955448ecf" translate="yes" xml:space="preserve">
          <source>MDN Understanding WCAG, Guideline 2.4 explanations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5e009a75c2540a694e0b15d62b8a55f74a7f530" translate="yes" xml:space="preserve">
          <source>MDN Understanding WCAG, Guideline 3.3 explanations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6307bfb3b795f533739b8404318fa008b26432" translate="yes" xml:space="preserve">
          <source>MIME type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e744d6d0de6223ead8562a18b04f1f4843b4d947" translate="yes" xml:space="preserve">
          <source>Made it a shorthand of the new &lt;code&gt;font-variant-*&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a48ef0a4ef1b048b472e64888af078b79d31842" translate="yes" xml:space="preserve">
          <source>Main Axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="800738c68f440aaf5b361b4fc9bb59a2b9eef02e" translate="yes" xml:space="preserve">
          <source>Main Axis Alignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815743bbeaef79967d784a9d4118878465e98fa7" translate="yes" xml:space="preserve">
          <source>Main axis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae8fa11fdeabc885ffa8691a22e9601eb966f66e" translate="yes" xml:space="preserve">
          <source>Major object types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbd8fe777f7ebbef8b84ad33eb8ea1d9d5a2dd4" translate="yes" xml:space="preserve">
          <source>Make sure the visual focus indicator can be seen by people with low vision. This will also benefit anyone use a screen in a brightly lit space (like outside in the sun). &lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html&quot;&gt;WCAG 2.1 SC 1.4.11 Non-Text Contrast&lt;/a&gt; requires that the visual focus indicator be at least 3 to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1d325576f69f679e9aeb46118eacbb076a627f8" translate="yes" xml:space="preserve">
          <source>Make the first letter of every paragraph red and big.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0ea75e90a15e1b3d7a648fc171ff630d4ed1f2" translate="yes" xml:space="preserve">
          <source>Make your animation as self-contained as possible. This means you should not rely on &lt;code&gt;animation-direction: alternate&lt;/code&gt;. Instead you should explicitly write a keyframe animation that goes through the full animation in one forward repetition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe25a246d8620a35f965b25655df4a890c3cba95" translate="yes" xml:space="preserve">
          <source>Makes the image brighter or darker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee7f22619625263aa3f1201fc95cf63d2515d405" translate="yes" xml:space="preserve">
          <source>Makes the image transparent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="877a74a28bceaabc9f4b2c9405ff2870227e8fe7" translate="yes" xml:space="preserve">
          <source>Makes the syntax more flexible by adding, among other things, the &lt;code&gt;or&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f5b32cf9fd8cf61a93107e633ff4e3cf6dbaa24" translate="yes" xml:space="preserve">
          <source>Makes the value inherited by the box descendants. Note that if a descendant has a &lt;code&gt;justify-self: auto&lt;/code&gt; value, the &lt;code&gt;legacy&lt;/code&gt; keyword is not considered by the descend, only the &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, or &lt;code&gt;center&lt;/code&gt; value associated to it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78035a36a71bf6dacff9acc410b7a7de817cbebd" translate="yes" xml:space="preserve">
          <source>Making a List</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dbf363affb4c68ba3052ba365a26ffcc1856648" translate="yes" xml:space="preserve">
          <source>Making better use of CSS cascading properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8004b5807f1c34932e12f7e68a6f04550a7d7f1" translate="yes" xml:space="preserve">
          <source>Making content editable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="900f1c3328bbe77c0027cc064b9277643ff0a4ed" translate="yes" xml:space="preserve">
          <source>Making images at least a minimum size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55929c6fc89b1f8d2d96a9725256bb2dd00ff8c3" translate="yes" xml:space="preserve">
          <source>Making it move back and forth</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
