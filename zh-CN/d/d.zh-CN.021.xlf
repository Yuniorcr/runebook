<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="d">
    <body>
      <group id="d">
        <trans-unit id="acbc7801b292b22fd84bb969c2c0f9ee879becf9" translate="yes" xml:space="preserve">
          <source>Interfacing to C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b1220db63301a90c567b7096023b21f5a7b981" translate="yes" xml:space="preserve">
          <source>Interfacing to C++</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f32265411f24516436989da79a8b9c2fd589ebb" translate="yes" xml:space="preserve">
          <source>Interfacing to Objective-C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e66a4ffa477a1f7eb282b4a707de158b622e6eab" translate="yes" xml:space="preserve">
          <source>Interfacing with C++</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d3004e718ad2e15676793a202fef50196ce165" translate="yes" xml:space="preserve">
          <source>Internal logic error in SQLite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5242b6068ce3aa3e94925e147e46c817b1e87d1" translate="yes" xml:space="preserve">
          <source>Internal use only</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfe56ee50b5246e8fc3d1efd71bcc80c9c2cbd3" translate="yes" xml:space="preserve">
          <source>International Domain Names support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9eb8fe39b663da62bd55d532bbc1d6dc4480d5" translate="yes" xml:space="preserve">
          <source>Internet Control Message Protocol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4f826bb57cdd671bbd6bb81ae23885f0d13165" translate="yes" xml:space="preserve">
          <source>Internet Control Message Protocol level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eadf3559d5760f57d825a20ef7a765cc6fff6a8" translate="yes" xml:space="preserve">
          <source>Internet Group Management Protocol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="486a00bfbd24a5012797e69fc29110b48c224e56" translate="yes" xml:space="preserve">
          <source>Internet Group Management Protocol level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccfc6a40d215b229ecf5eb8e225cff288aef8d60" translate="yes" xml:space="preserve">
          <source>Internet Protocol version 4</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f31285e4d3c0d1160715ca496686f163954b9a4" translate="yes" xml:space="preserve">
          <source>Internet Protocol version 4 level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b3f601b89a80177e18ecc46b747bb6d436f1059" translate="yes" xml:space="preserve">
          <source>Internet Protocol version 6</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1072e310be98411b8cd11656cb7bff695706b85" translate="yes" xml:space="preserve">
          <source>Internet Protocol version 6 level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93cc60f22833d45c27c517bcc4c0654c96515575" translate="yes" xml:space="preserve">
          <source>Interprets variadic argument list &lt;code&gt;args&lt;/code&gt;, formats them according to &lt;code&gt;fmt&lt;/code&gt;, and sends the resulting characters to &lt;code&gt;w&lt;/code&gt;. The encoding of the output is the same as &lt;code&gt;Char&lt;/code&gt;. The type &lt;code&gt;Writer&lt;/code&gt; must satisfy &lt;code&gt;&lt;a href=&quot;std_range_primitives#isOutputRange&quot;&gt;std.range.primitives.isOutputRange&lt;/a&gt;!(Writer, Char)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1215cbe2c98ef14d7aa50ec46f17432a95774205" translate="yes" xml:space="preserve">
          <source>Interrupt A Long-Running Query</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d60c3309aeba9fb9a2d2efeac2160bd862157e8" translate="yes" xml:space="preserve">
          <source>Interval &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fe01334021f703c84b5da0607e6be23e76dade" translate="yes" xml:space="preserve">
          <source>Interval &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5f0564cad1e60053ec849638012d9696df2ed9" translate="yes" xml:space="preserve">
          <source>Interval option specifier for &lt;code&gt;until&lt;/code&gt; (below) and others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52111c85baee81db8b2b3521d90bcf690e303a6e" translate="yes" xml:space="preserve">
          <source>Interval!TP &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37eedf146eb2ebd5bc1c25708b31f56d1fc371d" translate="yes" xml:space="preserve">
          <source>IntervalRange &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607b0ac46a2df5a924b307d562abd8e57ec9ce2f" translate="yes" xml:space="preserve">
          <source>Intervals and Ranges of Time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="1fb7463147331b617ca5303fd1b3438ad66cc4fc" translate="yes" xml:space="preserve">
          <source>Introduction to std.datetime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3b4d20d3dfe4ef78d0bf43a93aa7f57bae176c5" translate="yes" xml:space="preserve">
          <source>Introspection</source>
          <target state="translated">Introspection</target>
        </trans-unit>
        <trans-unit id="a20a3e7ab504a9565c6aedca53d4fdbe5513a566" translate="yes" xml:space="preserve">
          <source>Invalid State</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1bff97e3a0d9f8589413296b0f1e0569f71930c" translate="yes" xml:space="preserve">
          <source>Invalid file name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6eb263d63885ee3d552ee7aff55324ad0e9ead4" translate="yes" xml:space="preserve">
          <source>Invalidates when this Grapheme leaves the scope, attempts to use it then would lead to memory corruption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6f0311284e9216efb54d8e9865ea4fdb6fb5cc" translate="yes" xml:space="preserve">
          <source>Invariant blocks should contain &lt;code&gt;assert&lt;/code&gt; expressions, and should throw &lt;code&gt;AssertError&lt;/code&gt;s when they fail. Since DMD version 2.081.0, invariants can also be written as expression statements, with &lt;code&gt;assert&lt;/code&gt; implied:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1601557f501dcc1665159d7c25e7f800b4c4d376" translate="yes" xml:space="preserve">
          <source>Invariant checks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3390616cafac7ff314d6aadaf20e48034cbb3314" translate="yes" xml:space="preserve">
          <source>Invariants</source>
          <target state="translated">Invariants</target>
        </trans-unit>
        <trans-unit id="aaafc5af09fec54c46e5ca35204284fae32a4ed8" translate="yes" xml:space="preserve">
          <source>Invariants are implicitly &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552014b091503ffa5bb90ba68ad234e50e75c24c" translate="yes" xml:space="preserve">
          <source>Invariants are used to specify characteristics of a class or struct that must always be true (except while executing a member function). For example, a class representing a date might have an invariant that the day must be 1..31 and the hour must be 0..23:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d6016fe71d03226948598f177a7e24383a6ccfb" translate="yes" xml:space="preserve">
          <source>Inverse FFT that allows a user-supplied buffer to be provided. The buffer must be a random access range with slicing, and its elements must be some complex-like type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f589f4c2f971c6116b057e5c215d537ca7cb43e" translate="yes" xml:space="preserve">
          <source>Inverse of Normal distribution function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c03358c4f54ce52294e142183e933b46fcb8b9f4" translate="yes" xml:space="preserve">
          <source>Inverse of complemented incomplete gamma integral</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc72f0d8f316fcee653be902a9618f6a8a72f2c" translate="yes" xml:space="preserve">
          <source>Inverse of incomplete beta integral</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f54f70c78f3db6ca340241c50fe53fee043bc4b" translate="yes" xml:space="preserve">
          <source>Inverse of the Log Minus Digamma function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f85e13b0d42fd1b4a5a865686a2d49695460bb5" translate="yes" xml:space="preserve">
          <source>Invoking the program with &quot;--output=myfile.txt --output=yourfile.txt&quot; or &quot;--output myfile.txt --output yourfile.txt&quot; will set &lt;code&gt;outputFiles&lt;/code&gt; to &lt;code&gt;[ &quot;myfile.txt&quot;, &quot;yourfile.txt&quot; ]&lt;/code&gt;.  Alternatively you can set &lt;a href=&quot;#arraySep&quot;&gt;&lt;code&gt;arraySep&lt;/code&gt;&lt;/a&gt; as the element separator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1d20fac3714b4db9127e8efa778c74b54cd4e0b" translate="yes" xml:space="preserve">
          <source>Invoking the program with &quot;--output=myfile.txt&quot; or &quot;--output myfile.txt&quot; will set &lt;code&gt;outputFile&lt;/code&gt; to &quot;myfile.txt&quot;. If you want to pass a string containing spaces, you need to use the quoting that is appropriate to your shell, e.g. --output='my file.txt'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d64dcdad645b5a71f4e6d58798c14d358623b2" translate="yes" xml:space="preserve">
          <source>Invoking the program with &quot;--paranoid --paranoid --paranoid&quot; will set &lt;code&gt; paranoid&lt;/code&gt; to 3. Note that an incremental option never expects a parameter, e.g., in the command line &quot;--paranoid 42 --paranoid&quot;, the &quot;42&quot; does not set &lt;code&gt;paranoid&lt;/code&gt; to 42; instead, &lt;code&gt;paranoid&lt;/code&gt; is set to 2 and &quot;42&quot; is not considered as part of the normal program arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6eaac5b877b952f6bcf72430619aedf647b1a8" translate="yes" xml:space="preserve">
          <source>Invoking the program with e.g. &quot;--tune=alpha=0.5 --tune beta=0.6&quot; will set &lt;code&gt;tuningParms&lt;/code&gt; to [ &quot;alpha&quot; : 0.5, &quot;beta&quot; : 0.6 ].  Alternatively you can set &lt;a href=&quot;#arraySep&quot;&gt;&lt;code&gt;arraySep&lt;/code&gt;&lt;/a&gt; as the element separator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51b807dff53b59ce17fa8ba3b4efb7c37298356" translate="yes" xml:space="preserve">
          <source>Is 'this' a pointer to a static array holding two contexts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f04607ce8bc35a535f2eafaf232f2ae5e08636" translate="yes" xml:space="preserve">
          <source>Is 3DNow prefetch supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1091b8fd8404cafbdd2e1da298b3c08898531c9" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;From&lt;/code&gt; implicitly convertible to &lt;code&gt;To&lt;/code&gt;?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6527c515f699697a6d232a689619fd938ee60f0e" translate="yes" xml:space="preserve">
          <source>Is AES supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8cd9e904825556bf96828e0f6d502417a5ff971" translate="yes" xml:space="preserve">
          <source>Is AMD 3DNOW Ext supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cefb7da98db99e806ecf4f9d16aa97f479cb52ce" translate="yes" xml:space="preserve">
          <source>Is AMD 3DNOW supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3467fc8e189fda3cf33326fc0d09e8bdf079f9fb" translate="yes" xml:space="preserve">
          <source>Is AVX supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780bb1bc188e3b5539f81c0d650a1e7ddcd84502" translate="yes" xml:space="preserve">
          <source>Is AVX2 supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="930e8f6c9f8db481832b42bf5d22e519ab0e0ba7" translate="yes" xml:space="preserve">
          <source>Is Dsymbol a variable that contains pointers?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f393ec53178029468d90ccfedc6fdafe870ef6c6" translate="yes" xml:space="preserve">
          <source>Is FMA supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926d3c2bb40647642867740cf289a55c2684c607" translate="yes" xml:space="preserve">
          <source>Is FP16C supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75e00d20bd98c427350c031bd2576f677c9bc19" translate="yes" xml:space="preserve">
          <source>Is HLE (hardware lock elision) supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c63067c0b3183b5f4abc564381bb25d3d1231a7" translate="yes" xml:space="preserve">
          <source>Is LZCNT supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80343d68528e1f0d53f3a2e549cd71634470e6e5" translate="yes" xml:space="preserve">
          <source>Is MMX supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114c091c0c22495cd9a32fec40491702ce24f441" translate="yes" xml:space="preserve">
          <source>Is POPCNT supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="092c9f81639a5605a53fbcf69c7be6aa88dbd446" translate="yes" xml:space="preserve">
          <source>Is RTM (restricted transactional memory) supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24109cfc7f69bcaf97712b43c58ddf2b22ea3c9a" translate="yes" xml:space="preserve">
          <source>Is SHA supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3511bb1b8685cb3d3a378cd1f674c89a05416048" translate="yes" xml:space="preserve">
          <source>Is SSE supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33bcfafec9efc7ddbbfe4306ce2e227725bf3cf" translate="yes" xml:space="preserve">
          <source>Is SSE2 supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b949ad5258cac339f8f205f2bc83cc9e9a30c77" translate="yes" xml:space="preserve">
          <source>Is SSE3 supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ee911e8f809a3ad52a479f6bd11d4cb88c2a3b" translate="yes" xml:space="preserve">
          <source>Is SSE4.1 supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799b3ec53e6f94a6529a4281676d281ef3e42b2d" translate="yes" xml:space="preserve">
          <source>Is SSE4.2 supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2be34e3269af3486a23b7806de85c13596ee981" translate="yes" xml:space="preserve">
          <source>Is SSE4a supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529c14236ce5d57c81f18ee3d3a4955d0294b830" translate="yes" xml:space="preserve">
          <source>Is SSSE3 supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="404210ae982e5f7c6d767bb288604a99c837412d" translate="yes" xml:space="preserve">
          <source>Is SYSENTER/SYSEXIT supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450d6103658425cd9504ee4df7c88ea3022b9390" translate="yes" xml:space="preserve">
          <source>Is VEX-Encoded AES supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090d249f369062f8bff47b9ddec54f12692fd4a6" translate="yes" xml:space="preserve">
          <source>Is cmov supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4682b61ccc8c6c8dc42bb1758c22ede1faa7aa70" translate="yes" xml:space="preserve">
          <source>Is cmpxchg8b supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c79a0ed65f9de836b7df77c8ebe47ee651df5f2" translate="yes" xml:space="preserve">
          <source>Is fxsave/fxrstor supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10bf6a2965400ad25296374bbb8440c96335239a" translate="yes" xml:space="preserve">
          <source>Is hyperthreading supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f2a790fe86ca51a7f46c97943c8a348c7f5979" translate="yes" xml:space="preserve">
          <source>Is pclmulqdq supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6a47b81fa80057015751ef0056cd96c0603472" translate="yes" xml:space="preserve">
          <source>Is rdrand supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f50c3df0513611496a720e7e34cdb66b04a1e3a" translate="yes" xml:space="preserve">
          <source>Is rdseed supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5795edb49e0d328ee0397e5dce20a3f8b369c8" translate="yes" xml:space="preserve">
          <source>Is rdtsc supported?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd22e079be218467567ed6e211af022226073d8" translate="yes" xml:space="preserve">
          <source>Is the binary representation of x identical to y?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87a317711c3473ef594a6e7226a2007eeb63603" translate="yes" xml:space="preserve">
          <source>Is this Object an error?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56d42e2850dbb730db38fb3fb842af85b06b699" translate="yes" xml:space="preserve">
          <source>Is this an IA64 (Itanium) processor?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="590cbb39e0a9b8c9390941a2aa58bbc453391eef" translate="yes" xml:space="preserve">
          <source>Is this an Intel64 or AMD 64?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d49c2fad2d9f63ec74430d77ec2053e17a49b3" translate="yes" xml:space="preserve">
          <source>Is vpclmulqdq supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08035875f56e0a7aaa6e8c7ee6e9504e25d6cf00" translate="yes" xml:space="preserve">
          <source>IsExpression</source>
          <target state="translated">IsExpression</target>
        </trans-unit>
        <trans-unit id="eee32f816f5a7cde2bef5f55991e6f12cf112eeb" translate="yes" xml:space="preserve">
          <source>IsExpression can evaluate the specified type speculatively, and even if it instantiates any symbols, they are normally unnecessary for the final executable. However, if those symbols leak to the actual code, compiler should remark them as non-speculative to generate their code and link to the final executable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ab23d851863d880110f3e4fecbd30226e2ce4e" translate="yes" xml:space="preserve">
          <source>IsMarkedDg &lt;code&gt;isMarked&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1dcbf5199bd4639373c8360fb756c6fa15a754" translate="yes" xml:space="preserve">
          <source>Issue an error if an attempt to call a disabled method is made</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d017c10e9874a730f28063522651ca1ebea765b" translate="yes" xml:space="preserve">
          <source>Issuer certificate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe343344c692492a360f8a89fee5b22e51d1c7a" translate="yes" xml:space="preserve">
          <source>Issuing individual checked operations is flexible and efficient but often tedious. The &lt;a href=&quot;#Checked&quot;&gt;&lt;code&gt;Checked&lt;/code&gt;&lt;/a&gt; facility offers encapsulated integral wrappers that do all checking internally and have configurable behavior upon erroneous results. For example, &lt;code&gt;Checked!int&lt;/code&gt; is a type that behaves like &lt;code&gt;int&lt;/code&gt; but aborts execution immediately whenever involved in an operation that produces the arithmetically wrong result. The accompanying convenience function &lt;a href=&quot;#checked&quot;&gt;&lt;code&gt;checked&lt;/code&gt;&lt;/a&gt; uses type deduction to convert a value &lt;code&gt;x&lt;/code&gt; of integral type &lt;code&gt;T&lt;/code&gt; to &lt;code&gt;Checked!T&lt;/code&gt; by means of &lt;code&gt;checked(x)&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e2e0208dac0f7f4751f05b1125349dc8d7c5b3" translate="yes" xml:space="preserve">
          <source>It advances the input to the position following the conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46166dd58ab2730e4524ad59d57d2593327727bb" translate="yes" xml:space="preserve">
          <source>It also provides a faster, low level API working with data of size &lt;code&gt;Element.sizeof&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d3cceeb2328306e2f02f11a51f27695f47f4e9b" translate="yes" xml:space="preserve">
          <source>It also provides number of templates that test for various range capabilities:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bbf72a08a99011dd111dd6ad452e903cd2d15d9" translate="yes" xml:space="preserve">
          <source>It also works with &lt;code&gt;@property&lt;/code&gt; functions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="388df630c47cc2e867f2d3350d1778d5f83b482f" translate="yes" xml:space="preserve">
          <source>It can be used to conditionally compile declarations, not just statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a01fcab203354384dc4d73ca3e1bd07777c3122" translate="yes" xml:space="preserve">
          <source>It can only be used once in a method declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dae2f02f995eb1175253988c98f27cbe75176d3" translate="yes" xml:space="preserve">
          <source>It cannot be attached to a method or constructor that is a template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbe25588da1b447488b6253a7ca8c0b345decd4" translate="yes" xml:space="preserve">
          <source>It cannot be the argument to &lt;a href=&quot;https://dlang.org/phobos/object.html#destroy&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b94459fe2cd15aac6dbdf1ba866c322026a497f" translate="yes" xml:space="preserve">
          <source>It defines the bidirectional and forward range primitives for arrays: &lt;a href=&quot;#empty&quot;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#front&quot;&gt;&lt;code&gt;front&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#back&quot;&gt;&lt;code&gt;back&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#popFront&quot;&gt;&lt;code&gt;popFront&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#popBack&quot;&gt;&lt;code&gt;popBack&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#save&quot;&gt;&lt;code&gt;save&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ecf79245a02b6d2395f79fbb54723afe4759a9" translate="yes" xml:space="preserve">
          <source>It derives from the interface &lt;code&gt;core.stdc.windows.com.IUnknown&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a236332866cc1e66837407aa52f7caefef2e68" translate="yes" xml:space="preserve">
          <source>It does keep: live connections, the Session ID cache, the DNS cache and the cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4fef0b32a7281d59a31a40d6f87fe5bfa58814" translate="yes" xml:space="preserve">
          <source>It does not introduce a new scope even if &lt;code&gt;{ }&lt;/code&gt; are used for conditionally compiled statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f6a69aa258b6687ed9d04070e059ea5562bf0a" translate="yes" xml:space="preserve">
          <source>It does not repeat information that the compiler already knows from parsing the code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7398e9c5d59f69e46f788c84807092237aa5e4d5" translate="yes" xml:space="preserve">
          <source>It does not throw if it could not convert the entire input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2873a218fbe5af0054d62beddeb0e65fcfb61635" translate="yes" xml:space="preserve">
          <source>It doesn't rely on embedded HTML, as such will impede extraction and formatting for other purposes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1aba479bf876b78d7763f04b36ad2a837b806ed" translate="yes" xml:space="preserve">
          <source>It eliminates the need for IDL (interface description language) as a separate language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9be52d2dd0c55abff440ef5dc05f4f1413d2dc2c" translate="yes" xml:space="preserve">
          <source>It fits in EAX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c9e2828459632652d41e10b6eaced3e8290b5c9" translate="yes" xml:space="preserve">
          <source>It indicates if a statement does transfer control to another block. A block is a sequence of statements enclosed in { }</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f712b66715ddaa764c3d26a22ac83adf4c4dc7" translate="yes" xml:space="preserve">
          <source>It is acceptable for an implementation to store bit flags into pointer values and GC-managed memory blocks, so long as such a trick is not visible to the application. In practice, this means that only a stop-the-world collector can do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6213c9975eabd46633dd5a1abb7787690a6d9654" translate="yes" xml:space="preserve">
          <source>It is also possible to &lt;code&gt;override&lt;/code&gt; the three methods &lt;code&gt;beginLogMsg&lt;/code&gt;, &lt;code&gt;logMsgPart&lt;/code&gt; and &lt;code&gt;finishLogMsg&lt;/code&gt; together, this option gives more flexibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c19d777ce9c9b0fe6e64b8266c59dbe78a3247" translate="yes" xml:space="preserve">
          <source>It is also possible to indirectly interface with C++ code, either through a &lt;a href=&quot;interfacetoc&quot;&gt;C interface&lt;/a&gt; or a COM interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d898d765860a5d45edda7c7ed8509568c1f68566" translate="yes" xml:space="preserve">
          <source>It is an error if &lt;a href=&quot;expression#AssignExpression&quot;&gt;&lt;i&gt;AssignExpression&lt;/i&gt;&lt;/a&gt; cannot be implicitly converted to a boolean type or if it cannot be evaluated at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e5855ead30ccc2c8c56869cbcf6e5f74be6875" translate="yes" xml:space="preserve">
          <source>It is an error if any</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81c091005be4792f067f57e1989fc7c8d13b625" translate="yes" xml:space="preserve">
          <source>It is an error to compare objects if one is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50b2fd8434663e2c4ccea539ac2a01804fab3bbd" translate="yes" xml:space="preserve">
          <source>It is an error to declare a local variable that hides another local variable in the same function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deced31ce7ffb700a549b08afe6a6138a69db040" translate="yes" xml:space="preserve">
          <source>It is an error to have a local variable and a label with the same name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b508914e98b3adb1d20ab50fa10434c25d029458" translate="yes" xml:space="preserve">
          <source>It is an error to have one operand be signed and the other unsigned for a &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;=&lt;/code&gt; expression. Use casts to make both operands signed or both operands unsigned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0e09315dbb83014f54364159107933f95171232" translate="yes" xml:space="preserve">
          <source>It is an error to index an array with an index that is less than 0 or greater than or equal to the array length. If an index is out of bounds, a RangeError exception is raised if detected at runtime, and an error if detected at compile time. A program may not rely on array bounds checking happening, for example, the following program is incorrect:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64a85acc1469fbd56318c719228c9c1fe16bf9c" translate="yes" xml:space="preserve">
          <source>It is an error to return the address of or a reference to a local variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4576fb929afa6bbf00d340772ed152adcae3cb1" translate="yes" xml:space="preserve">
          <source>It is an error to use a local variable without first assigning it a value. The implementation may not always be able to detect these cases. Other language compilers sometimes issue a warning for this, but since it is always a bug, it should be an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1caf8aa0590016aadf8cff449e680fd2d8713321" translate="yes" xml:space="preserve">
          <source>It is defined to be exactly the reverse order that static construction was performed in. Static destructors for individual modules will only be run if the corresponding static constructor successfully completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2f3bba7f5994912f6b95d05cb1814084516245" translate="yes" xml:space="preserve">
          <source>It is easy to make the error handling source code look good.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ed05c87a248603343b54bb16aa1fab9bfe8f53" translate="yes" xml:space="preserve">
          <source>It is here to allow the deprecated behavior from the original algorithm until people have fixed their code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="401996678962e7e20129e6958a7d5a0d314109af" translate="yes" xml:space="preserve">
          <source>It is illegal for a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d2d71b2b05147b31590276dc23d6c43bb3d76c" translate="yes" xml:space="preserve">
          <source>It is illegal for constructors to mutually call each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7e7cafd673ed4d2e6ef523c1c9b32587567990" translate="yes" xml:space="preserve">
          <source>It is illegal to forward reference a debug specification:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f53c060570ada118f69ba3973c4ac1d18651ca16" translate="yes" xml:space="preserve">
          <source>It is illegal to refer to &lt;code&gt;this&lt;/code&gt; implicitly or explicitly prior to making a delegate constructor call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335e107a42af5a98628c149f6e1b4ca0b49e01e5" translate="yes" xml:space="preserve">
          <source>It is important to make sure that, if &lt;code&gt;opApply&lt;/code&gt; catches any exceptions, that those exceptions did not originate from the delegate passed to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79663ac4e329be90782f60edf1e6177dca459550" translate="yes" xml:space="preserve">
          <source>It is important to note that as the resultant range is evaluated lazily, in the case of the version of &lt;code&gt;tee&lt;/code&gt; that takes a function, the function will not actually be executed until the range is &quot;walked&quot; using functions that evaluate ranges, such as &lt;a href=&quot;std_array#array&quot;&gt;&lt;code&gt;std.array.array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;std_algorithm_iteration#fold&quot;&gt;&lt;code&gt;std.algorithm.iteration.fold&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd820e0e37cf31d63e1d31e908c7138e4dab72e2" translate="yes" xml:space="preserve">
          <source>It is important to use the right version identifier for the right purpose. For example, use the vendor identifier when using a vendor specific feature. Use the operating system identifier when using an operating system specific feature, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a8e8ef94cccc304c27c70467bf612cabf2c765" translate="yes" xml:space="preserve">
          <source>It is inevitable that the D language will evolve over time. Therefore, the version identifier namespace beginning with &quot;D_&quot; is reserved for identifiers indicating D language specification or new feature conformance. Further, all identifiers derived from the ones listed above by appending any character(s) are reserved. This means that e.g. &lt;code&gt;ARM_foo&lt;/code&gt; and &lt;code&gt;Windows_bar&lt;/code&gt; are reserved while &lt;code&gt;foo_ARM&lt;/code&gt; and &lt;code&gt;bar_Windows&lt;/code&gt; are not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b18dd6b84ff4211bbe466a6c57cc9ae711b259" translate="yes" xml:space="preserve">
          <source>It is lowered to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91d0be00faa70d257f22e2edf4d36bee26e53e0" translate="yes" xml:space="preserve">
          <source>It is not a 3 byte struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168bb789a8929c7fb4c3b7215efb1856903be685" translate="yes" xml:space="preserve">
          <source>It is not a floating point type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19fdb6fcd666a00fa90a8ed40bb00013c2391043" translate="yes" xml:space="preserve">
          <source>It is not always obvious when the GC allocates memory, which in turn can trigger a collection, so the program can pause unexpectedly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cac6b46e927506f607254cff1ed6929147fa588" translate="yes" xml:space="preserve">
          <source>It is not an error if the return type does not contain any indirections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="981cc7a3cecab94e0dd1f8ddc96a87527d95e530" translate="yes" xml:space="preserve">
          <source>It is not necessary to do this inside a code section, or if the special character is not immediately followed by a # or a letter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6319193259ecd329b1ff6f0a8e1c2a9fd8f24dd7" translate="yes" xml:space="preserve">
          <source>It is not possible to have both &lt;code&gt;return ref&lt;/code&gt; and &lt;code&gt;return scope&lt;/code&gt; semantics for the same parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="443f05c094b69d1507e35079eeb79f6782e9920f" translate="yes" xml:space="preserve">
          <source>It is often necessary to deprecate a feature in a library, yet retain it for backwards compatibility. Such declarations can be marked as &lt;code&gt;deprecated&lt;/code&gt;, which means that the compiler can be instructed to produce an error if any code refers to deprecated declarations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899360132ed9309c950103047c7e2c814b318ec0" translate="yes" xml:space="preserve">
          <source>It is similar to &lt;a href=&quot;#byLine&quot;&gt;&lt;code&gt;byLine&lt;/code&gt;&lt;/a&gt; and uses &lt;a href=&quot;std_format#formattedRead&quot;&gt;format&lt;/a&gt; under the hood.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="717aec823e7fb6c544e08d1714d73ef54e5ff0b7" translate="yes" xml:space="preserve">
          <source>It is sometimes useful to get or set the 16 bytes of a UUID directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9604c47d97361773acea3965fa6498d863d32be" translate="yes" xml:space="preserve">
          <source>It is standardized - consistent usage makes it more useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ea1205f3456f768018243f6d5512a314f402d18" translate="yes" xml:space="preserve">
          <source>It is straightforward to link C functions and libraries into D programs. But linking D functions and libraries into C programs is not straightforward.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700ae48bba8932b3ce97ed7ab816d7e993a4eec8" translate="yes" xml:space="preserve">
          <source>It is therefore recommended to always construct containers using &lt;a href=&quot;std_container_util#make&quot;&gt;&lt;code&gt;std.container.util.make&lt;/code&gt;&lt;/a&gt;.  This is in fact necessary to put containers into another container. For example, to construct an &lt;code&gt;Array&lt;/code&gt; of ten empty &lt;code&gt;Array&lt;/code&gt;s, use the following that calls &lt;code&gt;make&lt;/code&gt; ten times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f045f8d032f9691206ca37e7e3ca551f6091bd" translate="yes" xml:space="preserve">
          <source>It is used when representing a duration of time - such as how long to sleep with &lt;a href=&quot;core_thread#Thread.sleep&quot;&gt;&lt;code&gt;core.thread.Thread.sleep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d17dae53faa2b792c553146cb98e6c93618b8a4c" translate="yes" xml:space="preserve">
          <source>It looks good as embedded documentation, not just after it is extracted and processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3af10aa872e5f155c2078162ede3e60918478c" translate="yes" xml:space="preserve">
          <source>It may seem like too small of a difference in time for the attacker to notice, but security researchers have shown that differences as small as &lt;a href=&quot;http://www.cs.rice.edu/~dwallach/pub/crosby-timing2009.pdf&quot;&gt; 20&amp;micro;s can be reliably distinguished&lt;/a&gt; even with network inconsistencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6bd568b36725af76c85e86c49755d1465281c06" translate="yes" xml:space="preserve">
          <source>It must be evaluatable at compile time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ae13c3dc07d0583f5f9b4087b39b94ed079ad6" translate="yes" xml:space="preserve">
          <source>It must use the same tokens as the D language uses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849081081f66a4a05cbf4ef99fbb6b7ad19734c6" translate="yes" xml:space="preserve">
          <source>It only works with character ranges as input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c52ead977622939ef1b1062f122f932ed614a0" translate="yes" xml:space="preserve">
          <source>It provides access to various aspects of the module. It is not generated for betterC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f97c61fa3add53b120631d892e86b2c2046852a3" translate="yes" xml:space="preserve">
          <source>It provides basic range functionality by defining several templates for testing whether a given object is a range, and what kind of range it is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6aacf59fb942f6e1cdc563ab119d5d18d3e55f" translate="yes" xml:space="preserve">
          <source>It provides more information to the compiler, enabling more error checking and possibly better code generation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba24c42088804a0d4be1a3309025dbeb98b12af" translate="yes" xml:space="preserve">
          <source>It should be possible for the user to use Doxygen or other documentation extractor if desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093b315d1b92cd8c4da60adb8a7239b6a8739b1d" translate="yes" xml:space="preserve">
          <source>It should look and feel different from code, so it won't be visually confused with code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab78acfffc9bf5190ce6cb7b40dbee5c908a5208" translate="yes" xml:space="preserve">
          <source>It takes the input by reference. (This means that rvalues - such as string literals - are not accepted: use &lt;code&gt;to&lt;/code&gt; instead.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10cbd22ba1e750ba124936549407411b37b8cea" translate="yes" xml:space="preserve">
          <source>It takes three forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050370d910aa58f3109ec31e86d6b4499d187cdf" translate="yes" xml:space="preserve">
          <source>It uses well defined standard rules of property name lookup. This includes fuzzy matching of names, so that 'White_Space', 'white-SpAce' and 'whitespace' are all considered equal and yield the same set of white space &lt;a href=&quot;#Character&quot;&gt;characters&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a7b2f1dac61a8d7598e3760cd8188b02968b69" translate="yes" xml:space="preserve">
          <source>It will be a &lt;a href=&quot;std_range_primitives#isForwardRange&quot;&gt;forward range&lt;/a&gt; if the underlying data source is at least a forward range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ade996eab3bb94cd2a7d5f8def981c1ae053558" translate="yes" xml:space="preserve">
          <source>It's also possible to &lt;code&gt;put&lt;/code&gt; any width strings or characters into narrow strings -- put does the conversion for you.  Note that putting the same width character as the target buffer type is &lt;code&gt;nothrow&lt;/code&gt;, but transcoding can throw a &lt;a href=&quot;std_utf#UTFException&quot;&gt;&lt;code&gt;std.utf.UTFException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15967cde9e56b07a7f1c26d7a69e1a075aff9a00" translate="yes" xml:space="preserve">
          <source>It's based on existing D comment forms, so it is completely independent of parsers only interested in D code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df30e895e5cea990b692a026e7012b1b8ed9990f" translate="yes" xml:space="preserve">
          <source>It's easy and natural to write, i.e. minimal reliance on &amp;lt;tags&amp;gt; and other clumsy forms one would never see in a finished document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90363d2d1fd187921f9df756c4f8841ea45cbd8c" translate="yes" xml:space="preserve">
          <source>It's good software engineering practice to minimize gratuitous portability problems in the code. Techniques to minimize potential portability problems are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676010a0cf026e4e46adb9fc97725347e3cf4b56" translate="yes" xml:space="preserve">
          <source>It's illegal to move a class instance even if you are sure there are no pointers to it. As such, it is illegal to move a scoped object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d0ecd13133638bfea893649adf9f413f5146027" translate="yes" xml:space="preserve">
          <source>It's illegal to shift by the same or more bits than the size of the quantity being shifted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5899aa25cbeb84be446d7f611f383682e9adef5" translate="yes" xml:space="preserve">
          <source>It's impossible to know from CommaExp.semantic if the result will be used, hence when there is a result (type != void), a deprecation message is always emitted. However, some construct can produce a result but won't use it (ExpStatement and for loop increment). Those should call this function to prevent unwanted deprecations to be emitted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a902f7796c154f6adbb449196d8425bb687de6" translate="yes" xml:space="preserve">
          <source>It's not allowed to mark an overridden method with the attributes &lt;a href=&quot;attribute#disable&quot;&gt;&lt;code&gt;@disable&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;attribute#deprecated&quot;&gt;&lt;code&gt;deprecated&lt;/code&gt;&lt;/a&gt;. To stop the compilation or to output the deprecation message, the compiler must be able to determine the target of the call, which can't be guaranteed when it is virtual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06a4ac5a76e9f0b9bdc8fd8bfd509f3b58e40c69" translate="yes" xml:space="preserve">
          <source>It's not possible to create a Duration of months or years, because the variable number of days in a month or year makes it impossible to convert between months or years and smaller units without a specific date. So, nothing uses &lt;code&gt;Duration&lt;/code&gt;s when dealing with months or years. Rather, functions specific to months and years are defined. For instance, &lt;a href=&quot;std_datetime#Date&quot;&gt;&lt;code&gt;std.datetime.Date&lt;/code&gt;&lt;/a&gt; has &lt;code&gt;add!&quot;years&quot;&lt;/code&gt; and &lt;code&gt;add!&quot;months&quot;&lt;/code&gt; for adding years and months rather than creating a Duration of years or months and adding that to a &lt;a href=&quot;std_datetime#Date&quot;&gt;&lt;code&gt;std.datetime.Date&lt;/code&gt;&lt;/a&gt;. But Duration is used when dealing with weeks or smaller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f254fe5e637e0412db399e1267f254c7da7a7960" translate="yes" xml:space="preserve">
          <source>It's not recommended to rely on the template parameters or the exact type of a current &lt;a href=&quot;#Code%20point&quot;&gt;code point&lt;/a&gt; set in &lt;code&gt;std.uni&lt;/code&gt;. The type and parameters may change when the standard allocators design is finalized. Use &lt;a href=&quot;#isCodepointSet&quot;&gt;&lt;code&gt;isCodepointSet&lt;/code&gt;&lt;/a&gt; with templates or just stick with the default alias &lt;a href=&quot;#CodepointSet&quot;&gt;&lt;code&gt;CodepointSet&lt;/code&gt;&lt;/a&gt; throughout the whole code base.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42f2c0ae3ac2dbd97c749238e72a4938f4cb57d" translate="yes" xml:space="preserve">
          <source>It's possible that, due to greater use of temporaries and common subexpressions, optimized code may produce a more accurate answer than unoptimized code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26bfc917d4c2808b47a0c439b2041bcf1d3ffe79" translate="yes" xml:space="preserve">
          <source>It's primarily of use when &lt;code&gt;MonoTime.ticksPerSecond&lt;/code&gt; is greater than hecto-nanosecond resolution, and an application needs a higher precision than hecto-nanoceconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7493d4e3c56b61b05894f6661cfb0cba6fef7966" translate="yes" xml:space="preserve">
          <source>It's primarily used as the time zone in the result of &lt;a href=&quot;std_datetime_systime#SysTime&quot;&gt;&lt;code&gt;std.datetime.systime.SysTime&lt;/code&gt;&lt;/a&gt;'s &lt;code&gt;fromISOString&lt;/code&gt;, &lt;code&gt;fromISOExtString&lt;/code&gt;, and &lt;code&gt;fromSimpleString&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ddbad8c19d68bb5a701a60afd8d7c7541591bb5" translate="yes" xml:space="preserve">
          <source>It's recognized that an application may need further enhancements and extensions, such as less commonly known algorithms, or tailoring existing ones for region specific needs. To help users with building any extra functionality beyond the core primitives, the module provides:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d3d6d38586ab9e2cf36ecb94fa00a82cfe0680" translate="yes" xml:space="preserve">
          <source>It's the same as &lt;code&gt;TickDuration(0)&lt;/code&gt;, but it's provided to be consistent with &lt;code&gt;Duration&lt;/code&gt; and &lt;code&gt;FracSec&lt;/code&gt;, which provide &lt;code&gt;zero&lt;/code&gt; properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5fa71e6d58d5d0fca114db8f0a8c3a287da2aef" translate="yes" xml:space="preserve">
          <source>Itanium C++ ABI: Exception Handling ($Revision: 1.22 $)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b3710c74713ad73b6fee6faa68d7c7089a3d821" translate="yes" xml:space="preserve">
          <source>Item in list for member initializer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="967e0f2ba10fa14510c5c3967d8f30ed26175886" translate="yes" xml:space="preserve">
          <source>Item[] &lt;strong id=&quot;items&quot;&gt;items&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc6a863777ef0dc2df1c117cbf561a6833206f4" translate="yes" xml:space="preserve">
          <source>Items to be read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3250ae0a20fa67a451aa0b4b6775210b20451c3" translate="yes" xml:space="preserve">
          <source>Items to write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7547deafe5aeaac079d28f1f346ec148fba5a3b0" translate="yes" xml:space="preserve">
          <source>Iterate a range of char, wchar, or dchars by code unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1704652b324c3acc4164b27ffcc4b641b7725a9" translate="yes" xml:space="preserve">
          <source>Iterate a string by &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5051ba4123d61c812f79621e111e7a827233fe" translate="yes" xml:space="preserve">
          <source>Iterate an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of characters by char type &lt;code&gt;C&lt;/code&gt; by encoding the elements of the range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcec762ed6378cddf8fe09a083a3077c9a309f0" translate="yes" xml:space="preserve">
          <source>Iterate an &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input range&lt;/a&gt; of characters by char, wchar, or dchar. These aliases simply forward to &lt;a href=&quot;#byUTF&quot;&gt;&lt;code&gt;byUTF&lt;/code&gt;&lt;/a&gt; with the corresponding C argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3f29e0c66209fcd4d3a0e0f7bfe84443ed9bfc8" translate="yes" xml:space="preserve">
          <source>Iterate multiple ranges in lockstep using a &lt;code&gt;foreach&lt;/code&gt; loop. In contrast to &lt;a href=&quot;#zip&quot;&gt;&lt;code&gt;zip&lt;/code&gt;&lt;/a&gt; it allows reference access to its elements. If only a single range is passed in, the &lt;code&gt;Lockstep&lt;/code&gt; aliases itself away. If the ranges are of different lengths and &lt;code&gt;s&lt;/code&gt; == &lt;code&gt;StoppingPolicy.shortest&lt;/code&gt; stop after the shortest range is empty. If the ranges are of different lengths and &lt;code&gt;s&lt;/code&gt; == &lt;code&gt;StoppingPolicy.requireSameLength&lt;/code&gt;, throw an exception. &lt;code&gt;s&lt;/code&gt; may not be &lt;code&gt;StoppingPolicy.longest&lt;/code&gt;, and passing this will throw an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f6cb646c6843f945d7da582e76018151566d41" translate="yes" xml:space="preserve">
          <source>Iterate over &lt;code&gt;range&lt;/code&gt; with an attached index variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6544d2b6a21967203cbbbbf85d9c93956a308c9" translate="yes" xml:space="preserve">
          <source>Iterate over all module infos.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6f1ecb57816d0f8ab8895d96ff555e6c40017b4" translate="yes" xml:space="preserve">
          <source>Iterate over ranges with windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0923c68159586a48770eb5eb395cea146e0dc546" translate="yes" xml:space="preserve">
          <source>Iterate several ranges in lockstep. The element type is a proxy tuple that allows accessing the current element in the &lt;code&gt;n&lt;/code&gt;th range by using &lt;code&gt;e[n]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba848f6a93f568e8e0ff6bcad21ff094359be43" translate="yes" xml:space="preserve">
          <source>Iterate this dsymbol or members of this scoped dsymbol, then call &lt;code&gt;fp&lt;/code&gt; with the found symbol and &lt;code&gt;param&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396a4c4a83adbfe93e36ca56c3db62aa4de33668" translate="yes" xml:space="preserve">
          <source>Iterates</source>
          <target state="translated">Iterates</target>
        </trans-unit>
        <trans-unit id="4c7657311c0985cf818bd71ba4e38315b188c160" translate="yes" xml:space="preserve">
          <source>Iterates a bidirectional range backwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81014f52c564f4b2a0a23cd199c9b45c770f9142" translate="yes" xml:space="preserve">
          <source>Iterates a bidirectional range backwards. The original range can be accessed by using the &lt;code&gt;source&lt;/code&gt; property. Applying retro twice to the same range yields the original range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031fd6a3f37b8f60999d9b1f8c51e96e07a5e012" translate="yes" xml:space="preserve">
          <source>Iterates a random-access range starting from a given point and progressively extending left and right from that point. If no initial point is given, iteration starts from the middle of the range. Iteration spans the entire range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6155d3dc4b918ca7ad16f0811ad5e79c02bd03b2" translate="yes" xml:space="preserve">
          <source>Iterates a range with an attached index variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be520983ead745fdd9048145abd61e2d2031ef35" translate="yes" xml:space="preserve">
          <source>Iterates a range with stride</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e3057ecac253c49baed9d03893907ec2f577311" translate="yes" xml:space="preserve">
          <source>Iterates over the unique elements in a range, which is assumed sorted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d7e5b017841d823f90dd8b859e306591765919" translate="yes" xml:space="preserve">
          <source>Iterates range &lt;code&gt;r&lt;/code&gt; with stride &lt;code&gt;n&lt;/code&gt;. If the range is a random-access range, moves by indexing into the range; otherwise, moves by successive calls to &lt;code&gt;popFront&lt;/code&gt;. Applying stride twice to the same range results in a stride with a step that is the product of the two applications. It is an error for &lt;code&gt;n&lt;/code&gt; to be 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c0b28ede291ea7f7566d122e863aa0f535dcba" translate="yes" xml:space="preserve">
          <source>Iterates the passed arguments and return the maximum value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1e12925acc4cdc52d701ccd76ee602a77fe86f" translate="yes" xml:space="preserve">
          <source>Iterates the passed arguments and returns the minimum value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9bb1a3e40031f0788544f6e843a3b9b81f2f50" translate="yes" xml:space="preserve">
          <source>Iterates the passed range and returns the maximal element. A custom mapping function can be passed to &lt;code&gt;map&lt;/code&gt;. In other languages this is sometimes called &lt;code&gt;argmax&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4dd3d0ca41dc586c0601f5460e0bdf217d07ef" translate="yes" xml:space="preserve">
          <source>Iterates the passed range and returns the minimal element. A custom mapping function can be passed to &lt;code&gt;map&lt;/code&gt;. In other languages this is sometimes called &lt;code&gt;argmin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5030d77c55effd0702acc270731f6b899947c4" translate="yes" xml:space="preserve">
          <source>Iterates through a file a chunk at a time by using &lt;code&gt;foreach&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda215d2193432c1605c2f94eab1dd86c59fc050" translate="yes" xml:space="preserve">
          <source>Iterates through the lines of a file by using &lt;code&gt;foreach&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00eca5d46e200a01deae26dbfef918eb9a307e2e" translate="yes" xml:space="preserve">
          <source>Iterating over &lt;code&gt;Lockstep&lt;/code&gt; in reverse and with an index is only possible when &lt;code&gt;s&lt;/code&gt; == &lt;code&gt;StoppingPolicy.requireSameLength&lt;/code&gt;, in order to preserve indexes. If an attempt is made at iterating in reverse when &lt;code&gt;s&lt;/code&gt; == &lt;code&gt;StoppingPolicy.shortest&lt;/code&gt;, an exception will be thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18905aab409cadb5b72681a650ec99001cb221e0" translate="yes" xml:space="preserve">
          <source>Iteration</source>
          <target state="translated">Iteration</target>
        </trans-unit>
        <trans-unit id="7ab9c33240f90c018e5301ec386d9a17da67f57b" translate="yes" xml:space="preserve">
          <source>Iteratively joins all tracked threads. This function will block add, remove, and opApply until it completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5dbd0b8592025504a68619b35e97d48ae39f52" translate="yes" xml:space="preserve">
          <source>JSON type enumeration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37261b1315c409df97253a04fdcad2ac04e9f2e5" translate="yes" xml:space="preserve">
          <source>JSON value node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b9988b5b0ebaf897665e22703721b63cd55e3f" translate="yes" xml:space="preserve">
          <source>JSONOptions &lt;code&gt;options&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77047b2f2f7a1f46f4f773acebc94e1704d45d0a" translate="yes" xml:space="preserve">
          <source>JSONValue</source>
          <target state="translated">JSONValue</target>
        </trans-unit>
        <trans-unit id="6a908d3132e3f4771380420780f724bcb99aa35b" translate="yes" xml:space="preserve">
          <source>JSONValue &lt;strong id=&quot;parseJSON&quot;&gt;parseJSON&lt;/strong&gt;(T)(T json, JSONOptions options)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2cc87635827ce36358659faec53896c2ffd9d7" translate="yes" xml:space="preserve">
          <source>JSONValue &lt;strong id=&quot;parseJSON&quot;&gt;parseJSON&lt;/strong&gt;(T)(T json, int maxDepth = -1, JSONOptions options = JSONOptions.none)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75fe8ccb746c12e5fc2263d91bcd2e2c2a1c8f7e" translate="yes" xml:space="preserve">
          <source>Jacob Carlborg</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e25ce2240148f400ce62910a8b1efe74e2c9a0e" translate="yes" xml:space="preserve">
          <source>Janice Caron</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7596e768bfc7370245a658fe8f76d22204852664" translate="yes" xml:space="preserve">
          <source>Java's &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/index.html&quot;&gt;Javadoc&lt;/a&gt;, probably the most well-known</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e850a9fa9f98700106bfba6b5849640ea65567" translate="yes" xml:space="preserve">
          <source>JavaScript Object Notation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3bb51ea74dbb54d8ffaf04425ff843127f10a5" translate="yes" xml:space="preserve">
          <source>Javanese</source>
          <target state="translated">Javanese</target>
        </trans-unit>
        <trans-unit id="5094055d2217aa7321a9d7bed6ee4d5794505c17" translate="yes" xml:space="preserve">
          <source>Jeremie Pelletier, David Herberth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f434a971d725063d7a2953337c698c7bac2ba2" translate="yes" xml:space="preserve">
          <source>Jesse Phillips</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d398e7a2e7966fc969106c70e0482f689337c66" translate="yes" xml:space="preserve">
          <source>Johannes Pfau</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f46447d52bfcc376c589171fb6036cd3ae4a5810" translate="yes" xml:space="preserve">
          <source>Join a couple of functions into one that executes the original functions one after the other, using one function's result for the next function's argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0c43aa8867e08f397e43a619a1f600ed8f6361" translate="yes" xml:space="preserve">
          <source>Join_Control</source>
          <target state="translated">Join_Control</target>
        </trans-unit>
        <trans-unit id="dcb5bf332c4e4981c7768b8555ac3e4b7690dc4e" translate="yes" xml:space="preserve">
          <source>Joins a couple of functions into one that executes the original functions independently and returns a tuple with all the results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefc3c1587d67e993c50c46acea53d9b977ae451" translate="yes" xml:space="preserve">
          <source>Joins all non-daemon threads that are currently running. This is done by performing successive scans through the thread list until a scan consists of only daemon threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc86f684db60d70140fe1419b4325b73f7613a4" translate="yes" xml:space="preserve">
          <source>Jonas Drewsen. Some of the SMTP code contributed by Jimmy Cao.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2792f94184c6127be37b21bcdd8b46ecd91706c9" translate="yes" xml:space="preserve">
          <source>Jonathan M Davis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0729735c2be61b7d083c7452b2591194f6b9f3e4" translate="yes" xml:space="preserve">
          <source>Jonathan M. Davis &lt;a href=&quot;http://dconf.org/2015/talks/davis.html&quot;&gt;&lt;i&gt;Introduction to Ranges&lt;/i&gt;&lt;/a&gt; talk at DConf 2015 a vivid introduction from its core constructs to practical advice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97dbaf8e8c4490a101cf7e3f174555f70aa1c17b" translate="yes" xml:space="preserve">
          <source>JsonFieldFlags &lt;strong id=&quot;tryParseJsonField&quot;&gt;tryParseJsonField&lt;/strong&gt;(const(char)* fieldName);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8f6d6417b503e6fc00ddf97fea18ebdd19b03b" translate="yes" xml:space="preserve">
          <source>JsonFieldFlags.none on error, otherwise the JsonFieldFlags value corresponding to the given fieldName.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7426cf06bbe68f4942c2dee1dc1e5f14aacfb8fe" translate="yes" xml:space="preserve">
          <source>Julius C'ster</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a42ea8673555a38d9845c5a7215a17263890c6" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;Nullable!T&lt;/code&gt;, except that the null state is defined as a particular value. For example, &lt;code&gt;Nullable!(uint, uint.max)&lt;/code&gt; is an &lt;code&gt;uint&lt;/code&gt; that sets aside the value &lt;code&gt;uint.max&lt;/code&gt; to denote a null state. &lt;code&gt;Nullable!(T, nullValue)&lt;/code&gt; is more storage-efficient than &lt;code&gt;Nullable!T&lt;/code&gt; because it does not need to store an extra &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9772fef62cdea0720dce405193ab48cbc57ed2" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;Nullable!T&lt;/code&gt;, except that the object refers to a value sitting elsewhere in memory. This makes assignments overwrite the initially assigned value. Internally &lt;code&gt;NullableRef!T&lt;/code&gt; only stores a pointer to &lt;code&gt;T&lt;/code&gt; (i.e., &lt;code&gt;Nullable!T.sizeof == (T*).sizeof&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63ea9136dd991394515bab1b8623b9c1fd950655" translate="yes" xml:space="preserve">
          <source>Just one &lt;a href=&quot;lex#Identifier&quot;&gt;&lt;i&gt;Identifier&lt;/i&gt;&lt;/a&gt; is rewritten to &lt;a href=&quot;function#Parameters&quot;&gt;&lt;i&gt;Parameters&lt;/i&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f6b4c092b16dc6948f25e1798098f47a9883d5" translate="yes" xml:space="preserve">
          <source>Just the range to fold over; or the range and one seed per function; or the range, one seed per function, and the work unit size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95821b707963ae42f0cd8570a73c7a770a76a918" translate="yes" xml:space="preserve">
          <source>K &lt;code&gt;key&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f366da6fc6a861cbc87352b22ef074419fcb3a" translate="yes" xml:space="preserve">
          <source>Kai Nacke</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35515824c39939c254cd4490c2c2aadbc065186f" translate="yes" xml:space="preserve">
          <source>Kai Nacke, Johannes Pfau, Nick Sabalausky</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae170b17bf57b2dd3f07fcd95b9f2bb7e3b26355" translate="yes" xml:space="preserve">
          <source>Kaithi</source>
          <target state="translated">Kaithi</target>
        </trans-unit>
        <trans-unit id="557d6bd7caa0a06ffe47eadcbd352ca5b993f101" translate="yes" xml:space="preserve">
          <source>Kana Supplement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c52b04b182fe59c46dbb680a685e8fae4abc9e4" translate="yes" xml:space="preserve">
          <source>Kanbun</source>
          <target state="translated">Kanbun</target>
        </trans-unit>
        <trans-unit id="765d8f89f8bd937afa34d37a8dd5511726f71e6c" translate="yes" xml:space="preserve">
          <source>Kangxi Radicals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ed665577f91f82c451742a0c8875950d42b19f" translate="yes" xml:space="preserve">
          <source>Kannada</source>
          <target state="translated">Kannada</target>
        </trans-unit>
        <trans-unit id="26f11d685b82331f6a7c0ef049098224fd15a035" translate="yes" xml:space="preserve">
          <source>Karatsuba multiplication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6842e5a778887793f59acc2ef5454c8c1ea0e92d" translate="yes" xml:space="preserve">
          <source>Katakana</source>
          <target state="translated">Katakana</target>
        </trans-unit>
        <trans-unit id="d1397b6fcf2a880567c752fd0440900ff604ccd3" translate="yes" xml:space="preserve">
          <source>Katakana Phonetic Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dd63971d3f2b16b51633181c1aec91223d8af19" translate="yes" xml:space="preserve">
          <source>Kayah Li</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ee154fd513c399937f6b79a87ebbade8c7cadd" translate="yes" xml:space="preserve">
          <source>Kayah_Li</source>
          <target state="translated">Kayah_Li</target>
        </trans-unit>
        <trans-unit id="d74eee745944f149824eb2fa0740f7f9e756246b" translate="yes" xml:space="preserve">
          <source>Keep for backward binary compatibility. This function can be removed in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cefeb94879a4163ffc965d759c646922a56c39b1" translate="yes" xml:space="preserve">
          <source>Keep track of how often rt_init/rt_term were called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d88bb75bee3164971007d202183f35b6295316" translate="yes" xml:space="preserve">
          <source>KeepTerminator &lt;code&gt;keepTerminator&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4ac1ddd1c0236182fe28a432626c97133b74ac" translate="yes" xml:space="preserve">
          <source>Kenji Hara</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74687127fcc3dc7bb5e761b8900f3a700141e5bf" translate="yes" xml:space="preserve">
          <source>KeyType</source>
          <target state="translated">KeyType</target>
        </trans-unit>
        <trans-unit id="1d89254a2bc78c1ff41c2f6767a0e00ee126b3bf" translate="yes" xml:space="preserve">
          <source>KeyValuePairs</source>
          <target state="translated">KeyValuePairs</target>
        </trans-unit>
        <trans-unit id="729e53c8eb86a949f666878c598d23f93a3545d7" translate="yes" xml:space="preserve">
          <source>Keys &lt;code&gt;keys&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f0271fc4a5ffcc2bb5f4dbe3a1fa04013275ee" translate="yes" xml:space="preserve">
          <source>Keys are implementation defined, allowing relevant data for exotic targets. A reliable subset exists which are always available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f530db58b3e5088dc7412c6d2298ba3f8456bdeb" translate="yes" xml:space="preserve">
          <source>Keywords</source>
          <target state="translated">Keywords</target>
        </trans-unit>
        <trans-unit id="0abd7895cc895899e75b610526a33fbc51c32818" translate="yes" xml:space="preserve">
          <source>Keywords are reserved identifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6336831bbeb983ca82f9d4a77612af9bca7a91d" translate="yes" xml:space="preserve">
          <source>Kharoshthi</source>
          <target state="translated">Kharoshthi</target>
        </trans-unit>
        <trans-unit id="3db4bac2e32c1fd4c51c4ffc01f1ab523d35aa5f" translate="yes" xml:space="preserve">
          <source>Khmer</source>
          <target state="translated">Khmer</target>
        </trans-unit>
        <trans-unit id="8518bf9eb37b463a80281371ecf2cd1e0405096e" translate="yes" xml:space="preserve">
          <source>Khmer Symbols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f207bb143ebf53a96f07da496ea625fd1ed3952" translate="yes" xml:space="preserve">
          <source>Kinds</source>
          <target state="translated">Kinds</target>
        </trans-unit>
        <trans-unit id="e86af5625d0fba3382c4196e55640871e3d19f3f" translate="yes" xml:space="preserve">
          <source>Kinds of Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63244e6f2aedb0bb8ad7366c81f1da96cdb83a3b" translate="yes" xml:space="preserve">
          <source>Klass</source>
          <target state="translated">Klass</target>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="a10f36f142913e26ae0e6f93a728d8bb0b212cf5" translate="yes" xml:space="preserve">
          <source>L &lt;code&gt;lhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f01127b628fe96840398c36b4cd22d12c73d39f" translate="yes" xml:space="preserve">
          <source>LDC (LLVM D Compiler) is the compiler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59266bac956daa5032ba200109e96e1c5b1a2c0" translate="yes" xml:space="preserve">
          <source>LIBCURL_VERSION</source>
          <target state="translated">LIBCURL_VERSION</target>
        </trans-unit>
        <trans-unit id="ae21ee5993e6bb593834d6149c93b819f0663a8b" translate="yes" xml:space="preserve">
          <source>LIBCURL_VERSION_NUM</source>
          <target state="translated">LIBCURL_VERSION_NUM</target>
        </trans-unit>
        <trans-unit id="71ca01cf1a00a026c01e4f77e52bb217888eded6" translate="yes" xml:space="preserve">
          <source>LINK &lt;strong id=&quot;systemLinkage&quot;&gt;systemLinkage&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52700257cb800485676caed33f23e22b22745155" translate="yes" xml:space="preserve">
          <source>LLVM D Compiler (LDC)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447562b9012012a2aca5d204bad70095bfe8f420" translate="yes" xml:space="preserve">
          <source>LOOSE</source>
          <target state="translated">LOOSE</target>
        </trans-unit>
        <trans-unit id="a09b13dff976fe20f239fab7a59a35bde98835e6" translate="yes" xml:space="preserve">
          <source>LV</source>
          <target state="translated">LV</target>
        </trans-unit>
        <trans-unit id="33b636a601b7a02911b25e76cda4a549a1d9ebd1" translate="yes" xml:space="preserve">
          <source>LVT</source>
          <target state="translated">LVT</target>
        </trans-unit>
        <trans-unit id="15d9300627a09b46f74a6b87395d2a7f3411cc88" translate="yes" xml:space="preserve">
          <source>LVT_Syllable</source>
          <target state="translated">LVT_Syllable</target>
        </trans-unit>
        <trans-unit id="2cfbfa4fc186833e1d17b39a6ed4758a215c22ac" translate="yes" xml:space="preserve">
          <source>LV_Syllable</source>
          <target state="translated">LV_Syllable</target>
        </trans-unit>
        <trans-unit id="ba218d1261bfead2f97e926079c3ae7568071bf0" translate="yes" xml:space="preserve">
          <source>Label* &lt;code&gt;label&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b86e48b918e6b8af7eaccee49db2cecb08b3997" translate="yes" xml:space="preserve">
          <source>Label** &lt;strong id=&quot;lookupLabel&quot;&gt;lookupLabel&lt;/strong&gt;(Statement s);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fc1ef0d8a8c6fb5a183e6dd4055bf2e2a000b0f" translate="yes" xml:space="preserve">
          <source>LabelDsymbol &lt;strong id=&quot;returnLabel&quot;&gt;returnLabel&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a27a2a11471faebdb082dca955aba4bf532df9" translate="yes" xml:space="preserve">
          <source>Labeled Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2228985493d9e43e461c7be5525529248735ad9c" translate="yes" xml:space="preserve">
          <source>Labels</source>
          <target state="translated">Labels</target>
        </trans-unit>
        <trans-unit id="55e451de0e70b249932cac7139c9b15e9f160538" translate="yes" xml:space="preserve">
          <source>Labels are in a name space independent of declarations, variables, types, etc. Even so, labels cannot have the same name as local declarations. The label name space is the body of the function they appear in. Label name spaces do not nest, i.e. a label inside a block statement is accessible from outside that block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1475fce73eed0441ef9a6cf5dea0d92a68de5f" translate="yes" xml:space="preserve">
          <source>Labels are in a separate scope, one per function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab80f546ab7aedd542b6f7cf9ec336e3c5a2f337" translate="yes" xml:space="preserve">
          <source>Labels in one function cannot be referenced from another function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3a859b8543db93b9d21e22a679ffb2ca537eef" translate="yes" xml:space="preserve">
          <source>Laboriously construct a C wrapper around the C++ code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab09d9adb98c17169fd258e9b9f83a3876c4fd1" translate="yes" xml:space="preserve">
          <source>Lambda</source>
          <target state="translated">Lambda</target>
        </trans-unit>
        <trans-unit id="ba9dfe5041cd205445df5b843e8a9dc628256415" translate="yes" xml:space="preserve">
          <source>Lambdas</source>
          <target state="translated">Lambdas</target>
        </trans-unit>
        <trans-unit id="d0a6871f11875319701fa244442052fe3b8ba59b" translate="yes" xml:space="preserve">
          <source>Language changes listed by -revert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1086e1889ddc903c34fd68e5851b7ef08f6a0c1a" translate="yes" xml:space="preserve">
          <source>Language changes listed by -transition=id</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489e3618a7be2c6a60858c53fd8bf2fdf36a41ff" translate="yes" xml:space="preserve">
          <source>Language previews listed by -preview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1439807deac3e6c9290cfd97415a4b15f4ba6c8" translate="yes" xml:space="preserve">
          <source>Lao</source>
          <target state="translated">Lao</target>
        </trans-unit>
        <trans-unit id="4ff311dd115963220443dbbe7f3cdc78b24cc17c" translate="yes" xml:space="preserve">
          <source>Largest &lt;code&gt;Duration&lt;/code&gt; possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441940b44967219249673ac5a62264158b9767e7" translate="yes" xml:space="preserve">
          <source>Largest &lt;code&gt;MonoTime&lt;/code&gt; possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="775739b719ae1c33d45f0da7e4f74abc764e3ce2" translate="yes" xml:space="preserve">
          <source>Largest &lt;code&gt;TickDuration&lt;/code&gt; possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80bfda35a980fed60097a392642bb35e7679260" translate="yes" xml:space="preserve">
          <source>Largest DBCONFIG</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9729c92038f752df4b88f1ce2cbf7fb4e98a3ff" translate="yes" xml:space="preserve">
          <source>Largest defined DBSTATUS</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143fb511beaf582b174d9c4ff5835a52b94bef09" translate="yes" xml:space="preserve">
          <source>Largest generated value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031d120afc0f880f2e336a65b6264b1061756f53" translate="yes" xml:space="preserve">
          <source>Largest value of enum</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e59d0b67e13689490707955441acfa15678fa32" translate="yes" xml:space="preserve">
          <source>Lars Tandle Kyllingstad, &lt;a href=&quot;http://digitalmars.com&quot;&gt;Walter Bright&lt;/a&gt;, Grzegorz Adam Hankiewicz, Thomas K&amp;uuml;hne, &lt;a href=&quot;http://erdani.org&quot;&gt;Andrei Alexandrescu&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48d65b433854a00aa3b58538c5d44f7ce276d66" translate="yes" xml:space="preserve">
          <source>Lars Tandle Kyllingstad, Don Clugston</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07235ffa8a70d2e51e9570c942d05e5b5851a313" translate="yes" xml:space="preserve">
          <source>Last Insert Rowid</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0763072f970fe33cb40f56a506a18430c6e430bb" translate="yes" xml:space="preserve">
          <source>Last but not least, a desired string sorting order differs by culture and language and is usually nothing like code point for code point comparison. The natural order of strings is obtained by applying &lt;a href=&quot;http://www.unicode.org/reports/tr10/&quot;&gt;the Unicode collation algorithm&lt;/a&gt; that should be implemented in the standard library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6d1acb7397d0e5f9098c07f2c7d3aac9936d0e" translate="yes" xml:space="preserve">
          <source>LastExp</source>
          <target state="translated">LastExp</target>
        </trans-unit>
        <trans-unit id="e376b71fe7dd3dc385eba80f693a4c2924d5853c" translate="yes" xml:space="preserve">
          <source>Lastly, &lt;code&gt;x&lt;/code&gt; is set to &lt;code&gt;null&lt;/code&gt;. Any attempt to read or write the freed memory via other references will result in undefined behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bde795b72be44b343c829314d764282997de688" translate="yes" xml:space="preserve">
          <source>Latin</source>
          <target state="translated">Latin</target>
        </trans-unit>
        <trans-unit id="82571d399af24c495758fdf2aafee5df861943f9" translate="yes" xml:space="preserve">
          <source>Latin Extended Additional</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76afa1e916dcce2f445fbbe44abc694adfadc217" translate="yes" xml:space="preserve">
          <source>Latin Extended-A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bc78ee217699a4bb7436be239e087264930a51" translate="yes" xml:space="preserve">
          <source>Latin Extended-B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204b4ebb9b53ee3348fc9e967c0acfd748bea9b0" translate="yes" xml:space="preserve">
          <source>Latin Extended-C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd8786d3fb197f080f06774e92557923807eec5" translate="yes" xml:space="preserve">
          <source>Latin Extended-D</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f209e08d16789fe763be5b66fed5e229156bc03" translate="yes" xml:space="preserve">
          <source>Latin-1 (ISO-8859-1) Entities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76f4a63a6de1f8fde56d0d52b8de3cc7681c7c6" translate="yes" xml:space="preserve">
          <source>Latin-1 Supplement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee2650a3acdca161fdd647691bd5c1914bdc316d" translate="yes" xml:space="preserve">
          <source>Layered Structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfa939b4bde1628cdf49d14c2332ebb064d40ef2" translate="yes" xml:space="preserve">
          <source>Lazily computes all permutations of &lt;code&gt;r&lt;/code&gt; using &lt;a href=&quot;http://en.wikipedia.org/wiki/Heap%27s_algorithm&quot;&gt;Heap's algorithm&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2c1f0beaadd3254feecabea06e88d4b79b02dc" translate="yes" xml:space="preserve">
          <source>Lazily computes all permutations using Heap's algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107096b86eaeda16b3e3830aeea022c0ee83280a" translate="yes" xml:space="preserve">
          <source>Lazily computes the Cartesian product of two or more ranges. The product is a range of tuples of elements from each respective range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ccd41e6fdf7bb2cc2caeff24d6524d188618f62" translate="yes" xml:space="preserve">
          <source>Lazily computes the difference of &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt;. The two ranges are assumed to be sorted by &lt;code&gt;less&lt;/code&gt;. The element types of the two ranges must have a common type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11620253bf7b271db7d14cf8cdf8bc0f4e54e75c" translate="yes" xml:space="preserve">
          <source>Lazily computes the intersection of two or more &lt;a href=&quot;std_range_primitives#isInputRange&quot;&gt;input ranges&lt;/a&gt;&lt;code&gt;ranges&lt;/code&gt;. The ranges are assumed to be sorted by &lt;code&gt;less&lt;/code&gt;. The element types of the ranges must have a common type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcbe3c8fe89d00240758248fe29948f389fe9d2c" translate="yes" xml:space="preserve">
          <source>Lazily computes the intersection of two or more sorted ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e56317731f2e65960db359b60cd199fb81c6c36a" translate="yes" xml:space="preserve">
          <source>Lazily computes the set difference of two or more sorted ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7dc174d1b393408f652f2ee4cdbe7ec73d58a98" translate="yes" xml:space="preserve">
          <source>Lazily computes the symmetric difference of &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt;, i.e. the elements that are present in exactly one of &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt;. The two ranges are assumed to be sorted by &lt;code&gt;less&lt;/code&gt;, and the output is also sorted by &lt;code&gt;less&lt;/code&gt;. The element types of the two ranges must have a common type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a833e31b29c15d5d10ff03efb2b971994c72b99" translate="yes" xml:space="preserve">
          <source>Lazily computes the symmetric set difference of two or more sorted ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5e63bd3d07f55a5748e5c534c9595eca39053b0" translate="yes" xml:space="preserve">
          <source>Lazily generate identifier for template instance. This is because 75% of the ident's are never needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bb485042cec806e50ef44dfce159b1476065631" translate="yes" xml:space="preserve">
          <source>Lazily initializes the scope to forward to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a262d4d77393c41d08604edd8fd36f4b129d8a3e" translate="yes" xml:space="preserve">
          <source>Lazily iterates &lt;code&gt;range&lt;/code&gt; until the element &lt;code&gt;e&lt;/code&gt; for which &lt;code&gt;pred(e, sentinel)&lt;/code&gt; is true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37fa2575de04d25ca5f4a9acbfb7307d51258f3c" translate="yes" xml:space="preserve">
          <source>Lazily iterates a range until a specific value is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="855e8fb90512662d24bc8780e84a525e1cbb91c5" translate="yes" xml:space="preserve">
          <source>Lazily iterates unique consecutive elements of the given range (functionality akin to the &lt;a href=&quot;http://wikipedia.org/wiki/Uniq&quot;&gt;uniq&lt;/a&gt; system utility). Equivalence of elements is assessed by using the predicate &lt;code&gt;pred&lt;/code&gt;, by default &lt;code&gt;&quot;a == b&quot;&lt;/code&gt;. The predicate is passed to &lt;a href=&quot;std_functional#binaryFun&quot;&gt;&lt;code&gt;std.functional.binaryFun&lt;/code&gt;&lt;/a&gt;, and can either accept a string, or any callable that can be executed via &lt;code&gt;pred(element, element)&lt;/code&gt;. If the given range is bidirectional, &lt;code&gt;uniq&lt;/code&gt; also yields a &lt;a href=&quot;std_range_primitives#isBidirectionalRange&quot;&gt;bidirectional range&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd4c05189e44a024d61096cebf8a9000f337938" translate="yes" xml:space="preserve">
          <source>Lazily joins a range of ranges with a separator. The separator itself is a range. If a separator is not provided, then the ranges are joined directly without anything in between them (often called &lt;code&gt;flatten&lt;/code&gt; in other languages).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78adbed58b69c14bab88204b103552a98acd8b88" translate="yes" xml:space="preserve">
          <source>Lazily merges two or more sorted ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f0c45896cd5857d56956a33e01c9a444f7528d6" translate="yes" xml:space="preserve">
          <source>Lazily pads a range to a specified length by adding a given element to the back of the range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f494ee73f56475d2a1f3930ddb0e80428caf8a76" translate="yes" xml:space="preserve">
          <source>Lazily splits a range by a separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63f40da4727f29b6b1fb052d750dd95793056b6" translate="yes" xml:space="preserve">
          <source>Lazily splits a range using an element or range as a separator. Separator ranges can be any narrow string type or sliceable range type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ccf00e916575e9b3f08279417e858a27e23af9d" translate="yes" xml:space="preserve">
          <source>Lazily splits the character-based range &lt;code&gt;s&lt;/code&gt; into words, using whitespace as the delimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3389a918428772f39da31b4076e337a04baf8333" translate="yes" xml:space="preserve">
          <source>Lazily takes only up to &lt;code&gt;n&lt;/code&gt; elements of a range. This is particularly useful when using with infinite ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36687985b7156a39c23148c62ffcfbac01df34ce" translate="yes" xml:space="preserve">
          <source>Lazily transform a range of &lt;a href=&quot;#Grapheme&quot;&gt;&lt;code&gt;Grapheme&lt;/code&gt;&lt;/a&gt;s to a range of code points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd36508e59e756caeb78e5c935ff99c61bf50c57" translate="yes" xml:space="preserve">
          <source>Lazy Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e98a803d8a3de17d9dde40743f7d0b0ef000790" translate="yes" xml:space="preserve">
          <source>Lazy Variadic Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee0307b3a4c3fedfc4c2c80cb3303a1c9f1efd0" translate="yes" xml:space="preserve">
          <source>Lazy decode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7734c6545eb4a90529d63e3a31cfe3c2fc1ac09d" translate="yes" xml:space="preserve">
          <source>Lazy parameters are currently, too restrictively, inferred by DMD to always throw even though they don't need to be. This makes it impossible to currently mark &lt;code&gt;either&lt;/code&gt; as &lt;code&gt;nothrow&lt;/code&gt;. See issue at &lt;a href=&quot;https://issues.dlang.org/show_bug.cgi?id=12647&quot;&gt;Bugzilla 12647&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071289bb363736afa36a31dce99701fd42dd4a6b" translate="yes" xml:space="preserve">
          <source>Lazy range which is the concatenation of r1, r2 and ranges with path separators. The resulting element type is that of r1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de2d83046e13537c5df1729e5a3946298fa16c44" translate="yes" xml:space="preserve">
          <source>Leading separators, trailing separators, or no separators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38895ec4492ad75a4a86c9ace4229f7786f0b3e2" translate="yes" xml:space="preserve">
          <source>Leading_Jamo</source>
          <target state="translated">Leading_Jamo</target>
        </trans-unit>
        <trans-unit id="fd94160d0aa2ea752c72468cd1b2add9485192dc" translate="yes" xml:space="preserve">
          <source>Leaving a pointer to it in the static data segment, as the garbage collector will scan the static data segment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc4be551f2905e6978237e7d77f437233291957" translate="yes" xml:space="preserve">
          <source>Leaving a pointer to it on the stack (as a parameter or automatic variable), as the garbage collector will scan the stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378514d607275e8ee888d65cae8f24d7c6f45b02" translate="yes" xml:space="preserve">
          <source>Left bound of initial range of &lt;code&gt;f&lt;/code&gt; known to contain the root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfaa1709061a514729de6e5c8f858f0bf2d27571" translate="yes" xml:space="preserve">
          <source>Left bound of initial range of f known to contain the minimum.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a57a5cca8f620ef653afa4677312603d0eb35a4" translate="yes" xml:space="preserve">
          <source>Left justify &lt;code&gt;s&lt;/code&gt; in a field &lt;code&gt;width&lt;/code&gt; characters wide. &lt;code&gt;fillChar&lt;/code&gt; is the character that will be used to fill up the space in the field that &lt;code&gt;s&lt;/code&gt; doesn't fill.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e252b9f8988cde95614457fcc99883dd09f1324a" translate="yes" xml:space="preserve">
          <source>Left justify the result in the field. It overrides any 0 flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf867e91cd944e7c2c4d6696d9a4bdcaa30b2078" translate="yes" xml:space="preserve">
          <source>Legacy module unit test handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c39ee5d287555af96dcd575a5c855e58330dd8" translate="yes" xml:space="preserve">
          <source>Lego-like pieces that can be used to assemble application-specific allocators. The real allocation smarts are occurring at this level. This layer is of interest to advanced applications that want to configure their own allocators. A good illustration of typical uses of these building blocks is module &lt;a href=&quot;std_experimental_allocator_showcase&quot;&gt;&lt;code&gt;std.experimental.allocator.showcase&lt;/code&gt;&lt;/a&gt; which defines a collection of frequently- used preassembled allocator objects. The implementation and documentation entry point is &lt;a href=&quot;std_experimental_allocator_building_blocks&quot;&gt;&lt;code&gt;std.experimental.allocator.building_blocks&lt;/code&gt;&lt;/a&gt;. By design, the primitives of the static interface have the same signatures as the &lt;a href=&quot;#IAllocator&quot;&gt;&lt;code&gt;IAllocator&lt;/code&gt;&lt;/a&gt; primitives but are for the most part optional and driven by static introspection. The parameterized class &lt;a href=&quot;#CAllocatorImpl&quot;&gt;&lt;code&gt;CAllocatorImpl&lt;/code&gt;&lt;/a&gt; offers an immediate and useful means to package a static low-level allocator into an implementation of &lt;a href=&quot;#IAllocator&quot;&gt;&lt;code&gt;IAllocator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bade34ecbc5d996b2f301ebd4ba689e81c7c9ea" translate="yes" xml:space="preserve">
          <source>Length</source>
          <target state="translated">Length</target>
        </trans-unit>
        <trans-unit id="548a74b725f624c9fdb6b48fe948844ad4ba15cf" translate="yes" xml:space="preserve">
          <source>Length &amp;amp; Index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a261464d376ab7ec4d0aff6dd2a8ddccaf2ea4" translate="yes" xml:space="preserve">
          <source>Length of the source array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa58f0cd5f0d162bcdd0bb8e1a9f9fab638355f0" translate="yes" xml:space="preserve">
          <source>Length. Only if &lt;code&gt;hasLength!Source&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2932c65a2b38d62eb561a2ad9e13e95ab6d5d8aa" translate="yes" xml:space="preserve">
          <source>Lepcha</source>
          <target state="translated">Lepcha</target>
        </trans-unit>
        <trans-unit id="89c036bdcb0bbedc59d932a4fa7bc23acfe0d446" translate="yes" xml:space="preserve">
          <source>Let the application define a custom write method for RTP data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937ea74e8f69c6f2d7124bc18246f8a660b1dec7" translate="yes" xml:space="preserve">
          <source>Let the application define custom chunk data pointer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0bcf64b358e91eb969a7948fad248efcb9751a" translate="yes" xml:space="preserve">
          <source>Let the server initiate the shutdown</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a89a34ec4663e88cca1a7e3de00a3e3430d08014" translate="yes" xml:space="preserve">
          <source>Let's consider the file is ASCII encoded with LF EOL. In general case we should use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07a72b4d32963582b6eae7916f61a4b8e60a331" translate="yes" xml:space="preserve">
          <source>Let's first make some observations and assumptions about errors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee14050617b7b58e17aabccd61c241ccdafc6379" translate="yes" xml:space="preserve">
          <source>Letter</source>
          <target state="translated">Letter</target>
        </trans-unit>
        <trans-unit id="9396bf9200a37a33be1f189b9b3f63cbfdb0cb05" translate="yes" xml:space="preserve">
          <source>Letter case specifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec2ddae534f2e9f786626d1461f045b3ea7a132" translate="yes" xml:space="preserve">
          <source>Letter_Number</source>
          <target state="translated">Letter_Number</target>
        </trans-unit>
        <trans-unit id="cfcd1e23ef9e122ab3fba825014a84415f49edb0" translate="yes" xml:space="preserve">
          <source>Letterlike Symbols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed7dbd610162ec2a8bbd97befecda7912a54468" translate="yes" xml:space="preserve">
          <source>Level 1 is fastest and the most memory hungry (a bit array).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc694144a5b7ef693cb1ee99fd99fa168f951953" translate="yes" xml:space="preserve">
          <source>Level 4 is the slowest and has the smallest footprint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75bac2861cadd9b0f5864b4833944f933a0bf887" translate="yes" xml:space="preserve">
          <source>Level 4 stays very practical (being faster and more predictable) compared to using direct lookup on the &lt;code&gt;set&lt;/code&gt; itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad20abdb83c4a21d224a891c2b7c7c494f6fcf2" translate="yes" xml:space="preserve">
          <source>Lexical</source>
          <target state="translated">Lexical</target>
        </trans-unit>
        <trans-unit id="476ef6248b6dd64f9ad5670dee5d53dccca0f8e8" translate="yes" xml:space="preserve">
          <source>Lexical - documentation comments are identified and attached to tokens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b605249a5e48b6c693e6ec1b2b1e13428184994b" translate="yes" xml:space="preserve">
          <source>Lexical Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b297fc7c475ea0278237a59c66e5996eac30867" translate="yes" xml:space="preserve">
          <source>Lhs</source>
          <target state="translated">Lhs</target>
        </trans-unit>
        <trans-unit id="fc8137f8a9e13c5b635a4ba40e4e3901d90fcbaa" translate="yes" xml:space="preserve">
          <source>Lhs &lt;code&gt;lhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bdc1af0abe67308adf385d7cdcceabf9cb6ab55" translate="yes" xml:space="preserve">
          <source>Lhs &lt;strong id=&quot;hookOpCast&quot;&gt;hookOpCast&lt;/strong&gt;(Lhs, Rhs)(Rhs rhs);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40077902f44f1b09ccb2459863a81b02022efb2" translate="yes" xml:space="preserve">
          <source>Lhs &lt;strong id=&quot;onLowerBound&quot;&gt;onLowerBound&lt;/strong&gt;(Rhs, T)(Rhs rhs, T bound);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df063bf53c8e8cb3fd9aa4249d1fa6357775527c" translate="yes" xml:space="preserve">
          <source>Library used incorrectly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de13bf1ab0b419f34cb1b3b43e094c84009a42db" translate="yes" xml:space="preserve">
          <source>License:</source>
          <target state="translated">License:</target>
        </trans-unit>
        <trans-unit id="a50ab4cf4ccadacece6a685a96a8d2bf5b03f087" translate="yes" xml:space="preserve">
          <source>Licensed under the Boost License 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1ab8e4255c8f881c480d8d54bca4a8a2c24209" translate="yes" xml:space="preserve">
          <source>Lifetime Management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e353dd7cee6d59762b4ca39b60327e65283ae7b3" translate="yes" xml:space="preserve">
          <source>Lifetime of Temporaries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d7185d6c7e3e5b1495e2c640489530ecb9b7900" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#ReplaceType&quot;&gt;&lt;code&gt;ReplaceType&lt;/code&gt;&lt;/a&gt;, but does not perform replacement in types for which &lt;code&gt;pred&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd33998b0ace4c944f0efc3096535b923482d5ba" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#soundexer&quot;&gt;&lt;code&gt;soundexer&lt;/code&gt;&lt;/a&gt;, but with different parameters and return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2606b35e5c6c0f3c9d736f7c373c8b55857520eb" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;contains&lt;/code&gt;, but the value is specified before the range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b288cc6cc51f7928ab9ad8fe1740aac1c58fab0" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;isSorted&lt;/code&gt;, returns &lt;code&gt;true&lt;/code&gt; if the given &lt;code&gt;values&lt;/code&gt; are ordered according to the comparison operation &lt;code&gt;less&lt;/code&gt;. Unlike &lt;code&gt;isSorted&lt;/code&gt;, takes values directly instead of structured in a range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50325585f34ee66ce178dbad88dde192b85ee604" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;take&lt;/code&gt;, but assumes the given range actually has</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbdaeb1b36bc514e26a308358d8185b3a8585d1b" translate="yes" xml:space="preserve">
          <source>Like bodies of &lt;a href=&quot;#ConditionalDeclaration&quot;&gt;&lt;i&gt;ConditionalDeclaration&lt;/i&gt;&lt;/a&gt;s, a &lt;code&gt;static foreach&lt;/code&gt; body does not introduce a new scope. Therefore, it can be used to generate declarations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596f012fcab74c7f7a0fbb5751d3954bb4881d08" translate="yes" xml:space="preserve">
          <source>Like findBestMatch, iterate possible template candidates, but just looks only the necessity of type inference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d23b1454364b12f21ad47d5ebb3ea9cdcdf0bab" translate="yes" xml:space="preserve">
          <source>Like in &lt;a href=&quot;#replaceFirst&quot;&gt;&lt;code&gt;replaceFirst&lt;/code&gt;&lt;/a&gt; family of functions there is an overload for the substitution guided by the &lt;code&gt;format&lt;/code&gt; string and the one with the user defined callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc66fa44d8868ee404a0494db572ba397dd68bd7" translate="yes" xml:space="preserve">
          <source>Like most parsers, it consumes its argument. This means:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45079d6fbbbd7e92a8db7a1ac24f7a5f82b14899" translate="yes" xml:space="preserve">
          <source>Like xoff(), but returns handle with which to patch 'offset' value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e7f519163cff0e363c25131c1b51c316fcca76a" translate="yes" xml:space="preserve">
          <source>Likewise, declare a boolean &lt;code&gt;rt_envvars_enabled&lt;/code&gt; to enable configuration via the environment variable &lt;code&gt;DRT_GCOPT&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ceb7325c8a826b5f89f8751e8a978ab3c8670c" translate="yes" xml:space="preserve">
          <source>Likewise, declare a boolean rt_envvars_enabled to enable configuration via the environment variable &lt;code&gt;DRT_&lt;/code&gt; followed by the option name, e.g. &lt;code&gt;DRT_GCOPT&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be788e5cd03f159b54ca8ea573d4290d5478fb0" translate="yes" xml:space="preserve">
          <source>Limbu</source>
          <target state="translated">Limbu</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="f0b7d22c2b2095983184f3f1451012e2dda7ffbe" translate="yes" xml:space="preserve">
          <source>Limited function template instantiation for using fd.leastAsSpecialized()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575a8a2e7f326685ced3cd6e4c6b6e3bf22c896a" translate="yes" xml:space="preserve">
          <source>Limiting a program to this subset of runtime features is useful when targeting constrained environments where the use of such features is not practical or possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94b2ecf33206fff8253255f672c5f85e4a9fb00a" translate="yes" xml:space="preserve">
          <source>Limits &amp;amp; machine dependent stuff.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a87925d2fef04b39fdff35de5098824ce21fe8" translate="yes" xml:space="preserve">
          <source>Line comments terminate at the end of the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f39a27437a342a87766f7dbc95e14bd677b6b05" translate="yes" xml:space="preserve">
          <source>Line inside of &lt;code&gt;file&lt;/code&gt; that called &lt;code&gt;_d_HookTraceImpl&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f11a4e0ac04365ef99741245ab0220d1dcbe4cc" translate="yes" xml:space="preserve">
          <source>Line number at which parse failure occurred</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cafda09317daae42601c48fe90d8c9c7a0d5763e" translate="yes" xml:space="preserve">
          <source>Line separator (&lt;code&gt;'\n'&lt;/code&gt; by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9062ccfc4d55904c6dc14247f7eba3c693cbc576" translate="yes" xml:space="preserve">
          <source>Line separator (&lt;code&gt;'\n'&lt;/code&gt; by default). Use &lt;a href=&quot;std_ascii#newline&quot;&gt;&lt;code&gt;std.ascii.newline&lt;/code&gt;&lt;/a&gt; for portability (unless the file was opened in text mode).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562e54a009e2e7477315da16ad031e93fffe67de" translate="yes" xml:space="preserve">
          <source>Line terminator (by default, &lt;code&gt;'\n'&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94351b3bdac97b327954428ec91bd94c19cb0065" translate="yes" xml:space="preserve">
          <source>Line terminator (by default, &lt;code&gt;'\n'&lt;/code&gt;). Use &lt;a href=&quot;std_ascii#newline&quot;&gt;&lt;code&gt;std.ascii.newline&lt;/code&gt;&lt;/a&gt; for portability (unless the file was opened in text mode).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4bacbb1e223a3267919fd0799232ddbd34aa37" translate="yes" xml:space="preserve">
          <source>Line_Separator</source>
          <target state="translated">Line_Separator</target>
        </trans-unit>
        <trans-unit id="e7df5d5ce001a36983b9d9236abbf093184cc21e" translate="yes" xml:space="preserve">
          <source>Linear B Ideograms</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3725027407be653f4f6f73e1060fa298f81067d5" translate="yes" xml:space="preserve">
          <source>Linear B Syllabary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aec3d1c77926be5858da9de4639f131c32b6290" translate="yes" xml:space="preserve">
          <source>Linear Congruential Engines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0ea1ac864923255fd78db23ede4ab7573a54c1" translate="yes" xml:space="preserve">
          <source>Linear Congruential generator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3835d6a4986ea73e86742e9a7f3ef9b58c7dcb04" translate="yes" xml:space="preserve">
          <source>Linear_B</source>
          <target state="translated">Linear_B</target>
        </trans-unit>
        <trans-unit id="f9c093b4e3f67b0f50e7c549106bb82a8bb17374" translate="yes" xml:space="preserve">
          <source>Lines of text that directly follow a quoted line are considered part of the quote:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ffd5e6d3f1a75027023ae7e4429a6fa5fe0802" translate="yes" xml:space="preserve">
          <source>Linger information for use with SocketOption.LINGER.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6efcfa4383191737a4fd58b78fbbf6afc2429322" translate="yes" xml:space="preserve">
          <source>Linger on close if unsent data is present</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa29d5efd34035837a47ccdc40b4c4e6e767dff3" translate="yes" xml:space="preserve">
          <source>Linger time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c07936d974c4dc9cedda3fb3c4619d6d1e2130c2" translate="yes" xml:space="preserve">
          <source>Linkage Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5a19b223d7bf77f8ce49dd34f4ecf21571d14e" translate="yes" xml:space="preserve">
          <source>LinkageType</source>
          <target state="translated">LinkageType</target>
        </trans-unit>
        <trans-unit id="f89598da16ee5888741184d17b4b7e6268f1f50e" translate="yes" xml:space="preserve">
          <source>Linker directives are only supported for MS-COFF output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014bcd654c60d5250fad2123b073b9c0ac3340f6" translate="yes" xml:space="preserve">
          <source>Links</source>
          <target state="translated">Links</target>
        </trans-unit>
        <trans-unit id="f14f99e5af534b7ca9839de375475b98445e0f1b" translate="yes" xml:space="preserve">
          <source>Links to D documentation generators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ad8510bbd3f22363d068e1c96f82fd0fcccd31" translate="yes" xml:space="preserve">
          <source>Linux</source>
          <target state="translated">Linux</target>
        </trans-unit>
        <trans-unit id="609a0fb2d74c6bd2b8aaca86410e249f1dbed0f8" translate="yes" xml:space="preserve">
          <source>Linux also supports an abstract address namespace, in which addresses are independent of the file system. A socket address is abstract iff &lt;code&gt;path&lt;/code&gt; starts with a null byte (&lt;code&gt;'\0'&lt;/code&gt;). Null bytes in other positions of an abstract address are allowed and have no special meaning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f9578b547044b5676affbe3022bba5ca82f0a9" translate="yes" xml:space="preserve">
          <source>Linux, FreeBSD and OS X</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053354be10bdf27de5999e46f82f09929ff8e8ba" translate="yes" xml:space="preserve">
          <source>Linux,OpenBSD,Solaris-Only</source>
          <target state="translated">Linux,OpenBSD,Solaris-Only</target>
        </trans-unit>
        <trans-unit id="d5716bdcdebf98cda6d6ad1eefe71dfeb870afa8" translate="yes" xml:space="preserve">
          <source>Linux,OpenBSD-Only</source>
          <target state="translated">Linux,OpenBSD-Only</target>
        </trans-unit>
        <trans-unit id="5c60e74c7c3bd1691653556adba9eac9ee819b43" translate="yes" xml:space="preserve">
          <source>Linux-Only</source>
          <target state="translated">Linux-Only</target>
        </trans-unit>
        <trans-unit id="659c4d46f392b5779315d4148506c9ae066a3900" translate="yes" xml:space="preserve">
          <source>List is a complete package of functions to deal with singly linked lists of pointers or integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2169dc30c9f5d1a288648fed4339b09f7a36c11c" translate="yes" xml:space="preserve">
          <source>List items can include content like new paragraphs, headings, embedded code, or child list items. Simply indent the content to match the indent of the text after the list symbol:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b80c969520195f49a23d681c7e470ffeb2f8e58" translate="yes" xml:space="preserve">
          <source>List of Time Zones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f0d42b5eabb30594dcebf877a48158279b594c" translate="yes" xml:space="preserve">
          <source>List of non-inherited methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d70697d21566547884eb0d25632b01c5aa1e1d" translate="yes" xml:space="preserve">
          <source>List of other symbols and URLs to related items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c518fb067439705f3ff5fa5b4a62b9be3afa31ae" translate="yes" xml:space="preserve">
          <source>Listen</source>
          <target state="translated">Listen</target>
        </trans-unit>
        <trans-unit id="a6d4e1cf6d50aec9a81f8621becb65e0c7bff808" translate="yes" xml:space="preserve">
          <source>Listen for an incoming connection. &lt;code&gt;bind&lt;/code&gt; must be called before you can &lt;code&gt;listen&lt;/code&gt;. The &lt;code&gt;backlog&lt;/code&gt; is a request of how many pending incoming connections are queued until &lt;code&gt;accept&lt;/code&gt;ed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="b1c9beb2cd4d7b1946bcd4731626c18eb9ca18ed" translate="yes" xml:space="preserve">
          <source>Lists any known bugs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b60e4e3728775ac5fb1376234a7439665441c9c" translate="yes" xml:space="preserve">
          <source>Lists exceptions thrown and under what circumstances they are thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8d3829a5b09c1f096a8c468af41889c5c3afa6" translate="yes" xml:space="preserve">
          <source>Lists the author(s) of the declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b64a6325e7fd542159a3c84889b713d8f57a43" translate="yes" xml:space="preserve">
          <source>Lisu</source>
          <target state="translated">Lisu</target>
        </trans-unit>
        <trans-unit id="1eed1a889b6fdc57925d393d26612d90c4362fd7" translate="yes" xml:space="preserve">
          <source>Literal backslash: &lt;code&gt;\&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="379a53a04ce7502b5938fbcc362e60ac11c2521f" translate="yes" xml:space="preserve">
          <source>Literal double-quote: &lt;code&gt;&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62a779e4049ed74f81ccd9b4787d528847e87647" translate="yes" xml:space="preserve">
          <source>Literal question mark: &lt;code&gt;?&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7496c0677fb192ed8cf7df54298bd439105963f" translate="yes" xml:space="preserve">
          <source>Literal single-quote: &lt;code&gt;'&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ba7dcf662374aafe652b03d75cb8f6024519d9" translate="yes" xml:space="preserve">
          <source>Literals</source>
          <target state="translated">Literals</target>
        </trans-unit>
        <trans-unit id="4f2ba44c3be0c8a5d7a4cbc08264bfdf2061b1ea" translate="yes" xml:space="preserve">
          <source>Literals do not match &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;out&lt;/code&gt; parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="131c60cf3a2f25a830939a99e6f47031b880a38c" translate="yes" xml:space="preserve">
          <source>Little endian byte order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91575e88330ca0a393b09df24c2f9572b830580f" translate="yes" xml:space="preserve">
          <source>Ll</source>
          <target state="translated">Ll</target>
        </trans-unit>
        <trans-unit id="aea4161c704cbae70375999c4bfe2ae3b29ed465" translate="yes" xml:space="preserve">
          <source>Lm</source>
          <target state="translated">Lm</target>
        </trans-unit>
        <trans-unit id="bb5cf318ffa3931019af265b70dc5e1329293274" translate="yes" xml:space="preserve">
          <source>Lo</source>
          <target state="translated">Lo</target>
        </trans-unit>
        <trans-unit id="c1fd24450afa2a8ca3ccb54f712f70e15f33b7ed" translate="yes" xml:space="preserve">
          <source>Load An Extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd8edd214a1cae7f44b10e45c660af957f2b328" translate="yes" xml:space="preserve">
          <source>Load this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b5c5da98b56af5e41eefd69e7fa8b2a9b575bf" translate="yes" xml:space="preserve">
          <source>Load unaligned vector from address. This is a compiler intrinsic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494260ec047bea19460fac6ca8324736557ff1c6" translate="yes" xml:space="preserve">
          <source>Loadable Extension Thunk</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0a262d18ece63c9f981e3d7fa4031b25837d39" translate="yes" xml:space="preserve">
          <source>Loads 'val' from memory and returns it. The memory barrier specified by 'ms' is applied to the operation, which is fully sequenced by default. Valid memory orders are MemoryOrder.raw, MemoryOrder.acq, and MemoryOrder.seq.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d13b1375e4f7756b923fbdcc4876658d18b6a55" translate="yes" xml:space="preserve">
          <source>Loads the source buffer from the given read result into &lt;code&gt;this.srcBuffer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f476477ef22d4251d73a1d30ca07cf1a34cf5284" translate="yes" xml:space="preserve">
          <source>Loc &lt;code&gt;loc&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77785440d50120aa4076ce82e0ec9ab3821b96ba" translate="yes" xml:space="preserve">
          <source>Loc &lt;strong id=&quot;endloc&quot;&gt;endloc&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9aae3f07ee9e73ec7a53299b4ed9cc98dfe9890" translate="yes" xml:space="preserve">
          <source>Loc &lt;strong id=&quot;loc&quot;&gt;loc&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7bda6f355468bf77617112c233388cb6f50302" translate="yes" xml:space="preserve">
          <source>Local Static Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5148d6cff2251fbb44fa24ac71e87831f6949a" translate="yes" xml:space="preserve">
          <source>Local Variables</source>
          <target state="translated">本地变量</target>
        </trans-unit>
        <trans-unit id="5545f9d00ac24df06f6380d708b888c2531d70c7" translate="yes" xml:space="preserve">
          <source>Local communication</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3f517d85e8ae01e24937891c726f4900fea00c" translate="yes" xml:space="preserve">
          <source>Local data (i.e. CompileCtfeFunction*) for module dinterpret</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb1bb63dc564bca6c7a5e9e93d9c43b4a80c6ce" translate="yes" xml:space="preserve">
          <source>Local endpoint &lt;code&gt;Address&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f3aff2a7b7305a6652f831edf8db6d7016ee1e" translate="yes" xml:space="preserve">
          <source>Local names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be6a7350c875b8c9d9ccbb7b7de839744ca0d05e" translate="yes" xml:space="preserve">
          <source>Local port number to bind the socket to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b918332efc4d2c7cdd3b68e4cf1785c7f99f6d" translate="yes" xml:space="preserve">
          <source>Local sections on the stack</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27f49b6ed675d7b78f3cdf3fe5896202b1d4d8a" translate="yes" xml:space="preserve">
          <source>Local variables in functions can be declared as static or &lt;code&gt;__gshared&lt;/code&gt; in which case they are statically allocated rather than being allocated on the stack. As such, their value persists beyond the exit of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60a34babb78e25baf9b8dca57cc7a6a57f9a62c" translate="yes" xml:space="preserve">
          <source>Locates a dynamic library with the supplied library name and dynamically loads it into the caller's address space. If the library contains a D runtime it will be integrated with the current runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aacb69957ad5cddfad921cdf6c0106c5bee9a10" translate="yes" xml:space="preserve">
          <source>Location information of the call</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73ff6861f35f866aec7aeeb578457a4566a437cd" translate="yes" xml:space="preserve">
          <source>Location of deprecation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b91c66877cf6b374fbb1200642748e28d59b53" translate="yes" xml:space="preserve">
          <source>Location of error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fc6c901a903b2735a7904abeb7a095eb0c123e1" translate="yes" xml:space="preserve">
          <source>Location of the deprecation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6401740004452bbcf66d3042a6f5de680dddeba" translate="yes" xml:space="preserve">
          <source>Location of warning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b59a58b9ea59e25faf234bc5204489fb27642f9" translate="yes" xml:space="preserve">
          <source>Locks are not inherited by child processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a33487e1736bf9e6609b67ba3b4f3dff1091e2f" translate="yes" xml:space="preserve">
          <source>Locks created using &lt;code&gt;lock&lt;/code&gt; and &lt;code&gt;tryLock&lt;/code&gt; have the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1078bb655a08aae4699ba7fac16a102730785485" translate="yes" xml:space="preserve">
          <source>Locks the specified file segment. If the file segment is already locked by another process, waits until the existing lock is released. If both &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;length&lt;/code&gt; are zero, the entire file is locked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fdb3aa6c3fd683c9aaf2374307211453b556f8d" translate="yes" xml:space="preserve">
          <source>Lockstep!Ranges &lt;strong id=&quot;lockstep&quot;&gt;lockstep&lt;/strong&gt;(Ranges...)(Ranges ranges)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39496871de00ee058f37e6cbb0be193e3214e5e3" translate="yes" xml:space="preserve">
          <source>Lockstep!Ranges &lt;strong id=&quot;lockstep&quot;&gt;lockstep&lt;/strong&gt;(Ranges...)(Ranges ranges, StoppingPolicy s)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad1f4632354649775fa0e5d50b9164b567e59f6" translate="yes" xml:space="preserve">
          <source>Log Minus Digamma function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6fa3a2602f79946a73d76e4d612ad28acdfb88" translate="yes" xml:space="preserve">
          <source>Log messages that describe fatal errors should use this level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9945a7ae687a5abee282c11e943964628be93a09" translate="yes" xml:space="preserve">
          <source>Log the string to stderr, this will print something like this in the terminal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b7320cd2ebcb2d92d9355bfdee38ca004f34cb" translate="yes" xml:space="preserve">
          <source>LogEntry &lt;code&gt;payload&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c61f0216de15bd2af4a77e158df88206381def" translate="yes" xml:space="preserve">
          <source>LogEntry is a aggregation combining all information associated with a log message. This aggregation will be passed to the method writeLogMsg.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c012ac32756bbfd453a39643d2591c98930a80" translate="yes" xml:space="preserve">
          <source>LogLevel</source>
          <target state="translated">LogLevel</target>
        </trans-unit>
        <trans-unit id="46823fbe7f7dbcfd76f32da557302d10d151cb8a" translate="yes" xml:space="preserve">
          <source>LogLevel &lt;code&gt;ll&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c5d167afffbb7dbf4712fabfc250b90a1311bc" translate="yes" xml:space="preserve">
          <source>LogLevel &lt;code&gt;lv&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecc9d7efba9afc89574f5d3bf86e3d7baaac302b" translate="yes" xml:space="preserve">
          <source>LogLevel &lt;strong id=&quot;logLevel&quot;&gt;logLevel&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ed40fc6e5a5852438d7391404942ae2521d7f56" translate="yes" xml:space="preserve">
          <source>Logger &lt;code&gt;newLogger&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28189bc68fa5c89294fb2f918a4e83d73a420934" translate="yes" xml:space="preserve">
          <source>Logger &lt;strong id=&quot;logger&quot;&gt;logger&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c998ac72938ace2c01090c22dde31485e70020" translate="yes" xml:space="preserve">
          <source>Logging Fundamentals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff5d5c519f4c3bb77429911d9e4777ff8d9f0131" translate="yes" xml:space="preserve">
          <source>Logical negation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92491dfcf77a677e2579a8fdd5849bc43c91a9a3" translate="yes" xml:space="preserve">
          <source>Logical_Order_Exception</source>
          <target state="translated">Logical_Order_Exception</target>
        </trans-unit>
        <trans-unit id="70560736acb9ecf186c4fe18c6fbf72b37079b60" translate="yes" xml:space="preserve">
          <source>Logs a part of the log message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375bd085e65737a7ace18bd867e945918a24086b" translate="yes" xml:space="preserve">
          <source>Long form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff41efc01d76dc10a97a12c09a243b0ca354e0cf" translate="yes" xml:space="preserve">
          <source>Look 2 tokens ahead at value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc94f6c3a556315eed1cb174ad15bb185dcbc4f" translate="yes" xml:space="preserve">
          <source>Look ahead at next token's value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5622d20c099b662e6a0a373dd68292f6a0ba3406" translate="yes" xml:space="preserve">
          <source>Look at all the variables in this function that are referenced by nested functions, and determine if a closure needs to be created for them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654b5c9229aa50c7d6a646cb9a83a6131f5de84e" translate="yes" xml:space="preserve">
          <source>Look at the chain of inflight exceptions and pick the class type that'll be looked for in catch clauses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70c9a19c6fcf57b59739caeb1b4f8d412200e169" translate="yes" xml:space="preserve">
          <source>Look for GC-allocations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20561c6b5a8c54db867f0cd788574c6f1aaba303" translate="yes" xml:space="preserve">
          <source>Look for bugs in constructing types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a79a1301c397a748fd769d70432ac6b93cb4bc" translate="yes" xml:space="preserve">
          <source>Look for constructor declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55662975ec462a6b77f0e621733ca4e99a96109f" translate="yes" xml:space="preserve">
          <source>Look for member of the form: const(MemberInfo)[] getMembers(string); Returns NULL if not found</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ecbeff661b0c09d7052aed23032d114c945947" translate="yes" xml:space="preserve">
          <source>Look for references to variables in a scope enclosing the new function literal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca0eb22e1b34ba0a7ee58c95403fe1142a825cc" translate="yes" xml:space="preserve">
          <source>Look up classType in Action Table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf6f8e6a744477193839c88af310acdab947187c" translate="yes" xml:space="preserve">
          <source>Look up identifier in symbol table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b1faf6e7e2ade4943d73b78287350be64b06d22" translate="yes" xml:space="preserve">
          <source>Looks for correct spelling. Currently only looks a 'distance' of one from the seed[]. This does an exhaustive search, so can potentially be very slow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7ba5beab41b9fc718625eff0ab12ec104ab4ac0" translate="yes" xml:space="preserve">
          <source>Looks for undefined identifier s to see if it might be undefined because an import was not specified. Not meant to be a comprehensive list of names in each module, just the most common ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a0d0e70a93b9315eed33e543f65f34ea9905b6" translate="yes" xml:space="preserve">
          <source>Looks up &lt;code&gt;key&lt;/code&gt;; if it exists applies the &lt;code&gt;update&lt;/code&gt; delegate else evaluates the &lt;code&gt;create&lt;/code&gt; delegate and adds it to the associative array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f04ca992dc16f517e75024c08b7ac020854cbc1a" translate="yes" xml:space="preserve">
          <source>Looks up &lt;code&gt;key&lt;/code&gt;; if it exists returns corresponding value else evaluates &lt;code&gt;value&lt;/code&gt;, adds it to the associative array and returns it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a8bc0d3f8751a41d3178fa2ecd99ad6f8c6478" translate="yes" xml:space="preserve">
          <source>Looks up &lt;code&gt;key&lt;/code&gt;; if it exists returns corresponding value else evaluates and returns &lt;code&gt;defVal&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd483a2f65cbf5a83a8c5f6ad516313d73801935" translate="yes" xml:space="preserve">
          <source>Looks up key; if it exists applies the update callable else evaluates the create callable and adds it to the associative array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2ee07f892035b2ec1c706668252bc84555ddb4" translate="yes" xml:space="preserve">
          <source>Looks up key; if it exists returns corresponding value else evaluates and returns defaultValue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1875c1f85b6a7543e96c3d340bf104b96893e8d2" translate="yes" xml:space="preserve">
          <source>Looks up key; if it exists returns corresponding value else evaluates value, adds it to the associative array and returns it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc04a00b4346a66399ef51dd8da620552ded35a" translate="yes" xml:space="preserve">
          <source>Lookup *pkey in aa. Called only from implementation of (aa[key]) expressions when value is mutable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5acb595c30bd73abf9112d17b6787c68f70f18a1" translate="yes" xml:space="preserve">
          <source>Lookup *pkey in aa. Called only from implementation of (aa[key]) expressions when value is not mutable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="791d64d6dd1c9c7807ef99641d73b8a3fa427ce6" translate="yes" xml:space="preserve">
          <source>Lookup *pkey in aa. Called only from implementation of (key in aa) expressions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5714819469c13b59fdfd000487590810a7c91a" translate="yes" xml:space="preserve">
          <source>Lookup *pkey in aa. Called only from implementation of require</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488171ff26cd71419d21a0a9adfd632513f34bae" translate="yes" xml:space="preserve">
          <source>Lookup named submatch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b640962460641e4c30f8b4a0277ba5e6244fda9" translate="yes" xml:space="preserve">
          <source>Loop over the chain of Throwables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1cf7f9d7a7fa0e0c2b6385a443cec04154dd41" translate="yes" xml:space="preserve">
          <source>Low Surrogates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48523acb4bcd854d9aa1ea2802e3b41bb7296532" translate="yes" xml:space="preserve">
          <source>Low level</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40b74c86ad687d5579e947e3f92577b31a5eda2" translate="yes" xml:space="preserve">
          <source>Low level bit manipulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2e86eaa57ddf3a17dd614f833e423ebc213f8c4" translate="yes" xml:space="preserve">
          <source>Low level messaging API for threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbca8259d75e252eae0048dd86f40340f8d0cd8" translate="yes" xml:space="preserve">
          <source>Low-Level Control Of Database Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f7441b4ba65a8bf1a560585634d07db89e7fca" translate="yes" xml:space="preserve">
          <source>Low-level process creation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd438fab42ba2532b308f2c0479c2cede33e8d9" translate="yes" xml:space="preserve">
          <source>Lower case letters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3011ca9e161c4e7602061857963040cfcefd24e6" translate="yes" xml:space="preserve">
          <source>Lower level control over parsing CSV</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b563fa15108a7c5ade041259f86d89b7a18d8930" translate="yes" xml:space="preserve">
          <source>Lowercase</source>
          <target state="translated">Lowercase</target>
        </trans-unit>
        <trans-unit id="abf8ce4a5f4a2b06b346bb8ef9b168681a52fab2" translate="yes" xml:space="preserve">
          <source>Lowercase_Letter</source>
          <target state="translated">Lowercase_Letter</target>
        </trans-unit>
        <trans-unit id="b7c7ce791998816ed0e71e16db0d586762b3248a" translate="yes" xml:space="preserve">
          <source>Lowest generated value (&lt;code&gt;1&lt;/code&gt; if &lt;code&gt;c == 0&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; otherwise).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a7ee0f0dd9333831b9dc305ef620113ec1e149" translate="yes" xml:space="preserve">
          <source>Lowest possible assignable &lt;code&gt;LogLevel&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd31e29a8533fa78639eaa1635910fd1573da09" translate="yes" xml:space="preserve">
          <source>LsdaResult</source>
          <target state="translated">LsdaResult</target>
        </trans-unit>
        <trans-unit id="93a7e558e0aeedd54f6dee5a37efe3afb6f4c131" translate="yes" xml:space="preserve">
          <source>LsdaResult &lt;strong id=&quot;scanLSDA&quot;&gt;scanLSDA&lt;/strong&gt;(const(ubyte)* lsda, _Unwind_Ptr ip, _Unwind_Exception_Class exceptionClass, bool cleanupsOnly, bool preferHandler, _Unwind_Exception* exceptionObject, out _Unwind_Ptr landingPad, out int handler);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f41a055096fba2f5ebbddc8916d81727739dbdb3" translate="yes" xml:space="preserve">
          <source>Lt</source>
          <target state="translated">Lt</target>
        </trans-unit>
        <trans-unit id="eef6ef9869ba818327c7d9505b56279d719e493a" translate="yes" xml:space="preserve">
          <source>Lu</source>
          <target state="translated">Lu</target>
        </trans-unit>
        <trans-unit id="717f61ff64cc1d6b73a3c57e533103b3f6a567a9" translate="yes" xml:space="preserve">
          <source>LwrExpression</source>
          <target state="translated">LwrExpression</target>
        </trans-unit>
        <trans-unit id="f9156a05ab3755f6c7a6aab965a12bc73fd9cc2c" translate="yes" xml:space="preserve">
          <source>Lycian</source>
          <target state="translated">Lycian</target>
        </trans-unit>
        <trans-unit id="253fa34d4b816ad16ebad60a0945ef037709d0b8" translate="yes" xml:space="preserve">
          <source>Lydian</source>
          <target state="translated">Lydian</target>
        </trans-unit>
        <trans-unit id="c63ae6dd4fc9f9dda66970e827d13f7c73fe841c" translate="yes" xml:space="preserve">
          <source>M</source>
          <target state="translated">M</target>
        </trans-unit>
        <trans-unit id="b6d557e553638176bbc7442ef35ab7cffd41c1e4" translate="yes" xml:space="preserve">
          <source>MATCH &lt;strong id=&quot;callMatch&quot;&gt;callMatch&lt;/strong&gt;(Type tthis, Expression[] args, int flag = 0, const(char)** pMessage = null, Scope* sc = null);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c0d0982dd717fe106c7dfaf4dbef053e569f37" translate="yes" xml:space="preserve">
          <source>MATCH &lt;strong id=&quot;constConv&quot;&gt;constConv&lt;/strong&gt;(Type to);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7189716dd2570ff5122c43fe6e3e0126d15533a1" translate="yes" xml:space="preserve">
          <source>MATCH &lt;strong id=&quot;deduceFunctionTemplateMatch&quot;&gt;deduceFunctionTemplateMatch&lt;/strong&gt;(TemplateInstance ti, Scope* sc, ref FuncDeclaration fd, Type tthis, Expressions* fargs);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f902d50b36da53875defe35cdfd37c8db415308" translate="yes" xml:space="preserve">
          <source>MATCH &lt;strong id=&quot;implicitConvTo&quot;&gt;implicitConvTo&lt;/strong&gt;(Expression e, Type t);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f9b85399cd8eacf845a08f0ddd5c81dc4efaaf" translate="yes" xml:space="preserve">
          <source>MATCH &lt;strong id=&quot;implicitConvTo&quot;&gt;implicitConvTo&lt;/strong&gt;(Type to);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01016d25cb7f7307f5c30d54b28b7e62898ef0f4" translate="yes" xml:space="preserve">
          <source>MATCH &lt;strong id=&quot;leastAsSpecialized&quot;&gt;leastAsSpecialized&lt;/strong&gt;(Scope* sc, TemplateDeclaration td2, Expressions* fargs);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918dc11643797c59c58daf42cb0ca1d4a73b4d76" translate="yes" xml:space="preserve">
          <source>MATCH &lt;strong id=&quot;matchArg&quot;&gt;matchArg&lt;/strong&gt;(TemplateParameter tp, Loc instLoc, Scope* sc, Objects* tiargs, size_t i, TemplateParameters* parameters, Objects* dedtypes, Declaration* psparam);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9fa496f162d5b1d5225ec4710970983096606da" translate="yes" xml:space="preserve">
          <source>MATCH &lt;strong id=&quot;matchWithInstance&quot;&gt;matchWithInstance&lt;/strong&gt;(Scope* sc, TemplateInstance ti, Objects* dedtypes, Expressions* fargs, int flag);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5843e5e021e20b605f42acd4c88a16a007841d32" translate="yes" xml:space="preserve">
          <source>MATCH.exact 'this' == 'to' MATCH.constant 'to' is const MATCH.nomatch conversion to mutable or invariant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03d0a50e82b0494ec2b0ced95d0effb00b5a4de8" translate="yes" xml:space="preserve">
          <source>MATCH.nomatch, MATCH.convert, MATCH.constant, MATCH.exact</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eceb0459a5cb4578982ccd6ce7529eeed14e4cab" translate="yes" xml:space="preserve">
          <source>MATCHxxxx</source>
          <target state="translated">MATCHxxxx</target>
        </trans-unit>
        <trans-unit id="a5f71adafc8958cac2aa5aebe8cd541186115a14" translate="yes" xml:space="preserve">
          <source>MIME type of the data, for example, &quot;text/plain&quot; or &quot;application/octet-stream&quot;. See also: &lt;a href=&quot;http://en.wikipedia.org/wiki/Internet_media_type&quot;&gt; Internet media type&lt;/a&gt; on Wikipedia.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4631fbf4689affb8ff105bbf8ac5b78adddcd3" translate="yes" xml:space="preserve">
          <source>ML-style functional exception handling. Runs the supplied expression and returns its result. If the expression throws a &lt;code&gt;Throwable&lt;/code&gt;, runs the supplied error handler instead and return its result. The error handler's type must be the same as the expression's type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33379ede9c84ed9d3104a88adf47b86b54d3c4fa" translate="yes" xml:space="preserve">
          <source>MOD &lt;code&gt;mod&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701271424e18847db6f579468d2cd5078329cdaa" translate="yes" xml:space="preserve">
          <source>MOD &lt;strong id=&quot;deduceWild&quot;&gt;deduceWild&lt;/strong&gt;(Type t, bool isRef);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76b10e3dcb4a133c7bb6262af258f9831130f8e8" translate="yes" xml:space="preserve">
          <source>MOD bits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84cc32aac369a52d44f13e6b163b25f342633b78" translate="yes" xml:space="preserve">
          <source>MSVC allocates on default initialisation in debug, which can't be modelled by D &lt;code&gt;struct&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48af28979910507a72300805b16b39786c09205" translate="yes" xml:space="preserve">
          <source>Mac OS X</source>
          <target state="translated">Mac OS X</target>
        </trans-unit>
        <trans-unit id="bb5fc92b2d874256f372cac5c2a5b3a773e873c8" translate="yes" xml:space="preserve">
          <source>Macro Definitions Generated by Ddoc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f267b7710be73b007f894278ea6b282b0c3b62d8" translate="yes" xml:space="preserve">
          <source>Macro Definitions from .ddoc Files on the Command Line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b244d94b9e3687038ccb11df99431228edef706c" translate="yes" xml:space="preserve">
          <source>Macro Definitions from &lt;code&gt;sc.ini&lt;/code&gt;'s DDOCFILE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9287b4f065fa8285b646a8b8eb23fd987c1ed50" translate="yes" xml:space="preserve">
          <source>Macro and Escape text substitution is performed to produce the final result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0342437ac2c198171fe2e3235a577c880ee3a26d" translate="yes" xml:space="preserve">
          <source>Macro definitions come from the following sources, in the specified order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c2f043d46921aa3d0d7e83b419b8b713824341" translate="yes" xml:space="preserve">
          <source>Macro names beginning with &quot;D_&quot; and &quot;DDOC_&quot; are reserved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5300aeedfdbb4e7dc6ac9411b36bf223f7cb19b1" translate="yes" xml:space="preserve">
          <source>Macro redefinitions replace previous definitions of the same name. This means that the sequence of macro definitions from the various sources forms a hierarchy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899bd694d29ace1be956ab35177075021977560b" translate="yes" xml:space="preserve">
          <source>Macros</source>
          <target state="translated">Macros</target>
        </trans-unit>
        <trans-unit id="ab4342746df71224401959d238150c1f6538a7c1" translate="yes" xml:space="preserve">
          <source>Macros can have arguments. Any text from the end of the identifier to the closing &amp;lsquo;)&amp;rsquo; is the &amp;amp;dollar;0 argument. A &amp;amp;dollar;0 in the replacement text is replaced with the argument text. If there are commas in the argument text, &amp;amp;dollar;1 will represent the argument text up to the first comma, &amp;amp;dollar;2 from the first comma to the second comma, etc., up to &amp;amp;dollar;9. &amp;amp;dollar;+ represents the text from the first comma to the closing &amp;lsquo;)&amp;rsquo;. The argument text can contain nested parentheses, &quot;&quot; or '' strings, &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;!--&lt;/code&gt;&lt;code&gt;...&lt;/code&gt;&lt;code&gt;--&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; comments, or tags. If stray, unnested parentheses are used, they can be &lt;a href=&quot;#punctuation_escapes&quot;&gt;backslash-escaped&lt;/a&gt;: &lt;code&gt;\(&lt;/code&gt; or &lt;code&gt;\)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3c3c4c2ccfe8372f6cd2e069e3461d5720e2dc7" translate="yes" xml:space="preserve">
          <source>Macros to ease generating code modregrm: generate mod reg r/m field modregxrm: reg could be R8..R15 modregrmx: rm could be R8..R15 modregxrmx: reg or rm could be R8..R15</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b01d69d3c594ccd1f39b3609dda80d687b27a74" translate="yes" xml:space="preserve">
          <source>Mahjong Tiles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="415d5e06ca564fdf93a52865ce8d28f3a5acb8bf" translate="yes" xml:space="preserve">
          <source>Main date types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e415faddc4e0d878f47329f905001f0f264f9c" translate="yes" xml:space="preserve">
          <source>Main functionality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89997588a647b351fb1614fbf191614c691cf9dc" translate="yes" xml:space="preserve">
          <source>Main types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be35592b858c062b5b0300f1bbcabf23cb933bac" translate="yes" xml:space="preserve">
          <source>Mainly just a placeholder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c880a7e58cb5a48462791228162b04b3cb63f18" translate="yes" xml:space="preserve">
          <source>Mainly just a placeholder of Package, Module, Nspace, and TemplateInstance (including TemplateMixin)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6709119b1651a47a086b7f828dc2d3ff1312b000" translate="yes" xml:space="preserve">
          <source>Maintain another reference to that same data in another thread that the GC does know about.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4472e37b338e67a89fd1b5d36c98992fe68aa60" translate="yes" xml:space="preserve">
          <source>Major HTTP version ie. 1 in HTTP/1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94431ee22f05f141107f9355ed3127d0f0c4d5a" translate="yes" xml:space="preserve">
          <source>Make</source>
          <target state="translated">Make</target>
        </trans-unit>
        <trans-unit id="3ba97147877901fcf3ccf5fc1131336b182b7b33" translate="yes" xml:space="preserve">
          <source>Make a common block for s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bfea7cf8f1b26e91c42e125bf884c70d3ad164a" translate="yes" xml:space="preserve">
          <source>Make a dual-context container for use as a &lt;code&gt;this&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1abfcba754e1c0302a58d5e32f10b1091f1ebe7e" translate="yes" xml:space="preserve">
          <source>Make a new directory &lt;code&gt;pathname&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1a6e13f0addb5f5646c2abd0cb0b65b975d7ea4" translate="yes" xml:space="preserve">
          <source>Make a specific point in time in the New York timezone</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f8f13ef7892bd05bbf45497a5da917ae81e2c9" translate="yes" xml:space="preserve">
          <source>Make directory and all parent directories as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da7393f911740ab04336b2af60f186b865c60f5" translate="yes" xml:space="preserve">
          <source>Make sure that the runtime hook &lt;code&gt;id&lt;/code&gt; exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525e5a74e45c1668b80e6f1f69958698da6f4d6e" translate="yes" xml:space="preserve">
          <source>Make the next option a required option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a77836e1ee565bdbac321b50fccddb3229a3e1a6" translate="yes" xml:space="preserve">
          <source>Make type mutable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4605f2e5776569eac7f1701721da7c9b10116ccc" translate="yes" xml:space="preserve">
          <source>Make type unshared. 0 =&amp;gt; 0 const =&amp;gt; const immutable =&amp;gt; immutable shared =&amp;gt; 0 shared const =&amp;gt; const wild =&amp;gt; wild wild const =&amp;gt; wild const shared wild =&amp;gt; wild shared wild const =&amp;gt; wild const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6b91f833a3dc15ae3a2a05397995784c41e6ab" translate="yes" xml:space="preserve">
          <source>Makes a copy of the given array on newly allocated memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dcc70498836fb07f79353bc8ef2dfbc632b1248" translate="yes" xml:space="preserve">
          <source>Makes a null-terminated copy of the given string on newly allocated memory. The null-terminator won't be part of the returned string slice. It will be at position &lt;code&gt;n&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the length of the input string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56fa23eba2ab1fc971b9c8c2bace5681b9baed6" translate="yes" xml:space="preserve">
          <source>Makes sure the payload was properly initialized. Such a call is typically inserted before using the payload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf9329928a453eb7ea93527766dc15a786af057" translate="yes" xml:space="preserve">
          <source>Making a copy of the data using &lt;a href=&quot;https://dlang.org/phobos/std_experimental_allocator.html&quot;&gt;&lt;code&gt;std.experimental.allocator&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;core.stdc.stdlib.malloc&lt;/code&gt; and passing the copy instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4347a59dcc14e96dcb9203070618e3dae91bd4b" translate="yes" xml:space="preserve">
          <source>Making a copy of the data using core.stdc.stdlib.malloc() and passing the copy instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c730df3afaaac142f305e8f798eca241f12abf9f" translate="yes" xml:space="preserve">
          <source>Malayalam</source>
          <target state="translated">Malayalam</target>
        </trans-unit>
        <trans-unit id="ae60c0645f8b0ef8bf786de73f43479ecba0ff5d" translate="yes" xml:space="preserve">
          <source>Manage flow analysis for constructors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63617cfe427854e42387ca5fb2dd42a8d02042c4" translate="yes" xml:space="preserve">
          <source>Mandaic</source>
          <target state="translated">Mandaic</target>
        </trans-unit>
        <trans-unit id="dc3a58f069313e89dc8f96321457748a4819acb0" translate="yes" xml:space="preserve">
          <source>Mangle function signatures ('this' qualifier, and parameter types) to check conflicts in function overloads. It's different from fd.type.deco. For example, fd.type.deco would be null if fd is an auto function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced58ad2f9818afd78e1b67efec7988d477fb723" translate="yes" xml:space="preserve">
          <source>Mangle the given symbol for C++ ABI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f2b13060b64fd11b1052222629bef3facad8f88" translate="yes" xml:space="preserve">
          <source>Mangles a D function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34594bca42d9e54bcfa5ae318f82eb8738df791" translate="yes" xml:space="preserve">
          <source>Mangles a D symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148f8cf1414dcfee88fdea6836cf667aec741ed3" translate="yes" xml:space="preserve">
          <source>Mangling refers to how a symbol is represented in text form in the generated object file. &lt;code&gt;.mangleof&lt;/code&gt; returns a string literal of the representation of the type or symbol it is applied to. The mangling of types and symbols with D linkage is defined by &lt;a href=&quot;abi#name_mangling&quot;&gt;Name Mangling&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe7f3349feabe9c89e0c56bcd790f4f6db52a02" translate="yes" xml:space="preserve">
          <source>Manifest Constants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbbdf8dc2eb670e040ba223dcb25ad582879b9f4" translate="yes" xml:space="preserve">
          <source>Manifest constants are not lvalues, meaning their address cannot be taken. They exist only in the memory of the compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6bd23ae5d1ad3b51438e4d31cc4052a69e2527b" translate="yes" xml:space="preserve">
          <source>Manipulate builtin arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d27b0d4934910380362c1298dce9010e6bd996" translate="yes" xml:space="preserve">
          <source>Manipulate files and directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5b5a6b88c43d3a6c6daa4ed63f323e6a3048a07" translate="yes" xml:space="preserve">
          <source>Manipulate strings that represent filesystem paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4d28d389556bd825a440f859d3401675a6c5c2" translate="yes" xml:space="preserve">
          <source>Manipulates environment variables using an associative-array-like interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c12fb39a6a73583409d354fb81a52d9a2e0a56" translate="yes" xml:space="preserve">
          <source>Manu Evans</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a747304ebc9a5c399ecad10827e0d5fb3537bd7f" translate="yes" xml:space="preserve">
          <source>Manual D main (for druntime initialization), which forwards to &lt;code&gt;tryMain&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fbeb16d0215c18c2ad3b7f92b0e101cadbbba80" translate="yes" xml:space="preserve">
          <source>Manually initialize the client RTSP CSeq for this handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0297a4524810d6d4a3159e7c6f28143e0ac281d1" translate="yes" xml:space="preserve">
          <source>Manually initialize the server RTSP CSeq for this handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dcb8e75d7969bc3abd2e7c3effeca48107c2001" translate="yes" xml:space="preserve">
          <source>Many aggregate range operations turn out to be solved with &lt;code&gt;reduce&lt;/code&gt; quickly and easily. The example below illustrates &lt;code&gt;reduce&lt;/code&gt;'s remarkable power and flexibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2ca31ee175eeb6b7d2fc289d02204152e17221" translate="yes" xml:space="preserve">
          <source>Many array operations, also known as vector operations, can be expressed at a high level rather than as a loop. For example, the loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74103b79f7a383e8126d38c82beb9f82d879e84" translate="yes" xml:space="preserve">
          <source>Many functions in this package are parameterized with a &lt;a href=&quot;http://dlang.org/glossary.html#predicate&quot;&gt;predicate&lt;/a&gt;. The predicate may be any suitable callable type (a function, a delegate, a &lt;a href=&quot;http://dlang.org/glossary.html#functor&quot;&gt;functor&lt;/a&gt;, or a lambda), or a compile-time string. The string may consist of &lt;b&gt;any&lt;/b&gt; legal D expression that uses the symbol &lt;code&gt;a&lt;/code&gt; (for unary functions) or the symbols &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; (for binary functions). These names will NOT interfere with other homonym symbols in user code because they are evaluated in a different context. The default for all binary comparison predicates is &lt;code&gt;&quot;a == b&quot;&lt;/code&gt; for unordered operations and &lt;code&gt;&quot;a &amp;lt; b&quot;&lt;/code&gt; for ordered operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dca517d4d22249072adc31efed00eaae12a4434" translate="yes" xml:space="preserve">
          <source>Many languages overload the + operator to mean concatenation. This confusingly leads to, does:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9603791fcc610a28e818534a769f77b36897c4" translate="yes" xml:space="preserve">
          <source>Many more functions will be added to this module. The naming convention for the distribution functions (gammaIncomplete, etc) is not yet finalized and will probably change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3c0f640962fe45a5bb8aa72a2bf3ed127a738c" translate="yes" xml:space="preserve">
          <source>Map (higher-order function)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d023b2e06ae9ecd57655e63d888c6a38d365c1c2" translate="yes" xml:space="preserve">
          <source>Mapping of a byte sequence to &lt;b&gt;Byte Order Mark (BOM)&lt;/b&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e9697d43a1a66f2e45db652019fb9a6216df22" translate="yes" xml:space="preserve">
          <source>Mark</source>
          <target state="translated">Mark</target>
        </trans-unit>
        <trans-unit id="6ffcc0a259f655515f96cc8b2d001cfa106d6adf" translate="yes" xml:space="preserve">
          <source>Mark the operand as will never be dereferenced, which is useful info for @safe checks. Do before semantic() on operands rewrites them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1aaf9a9b88a6df8d74ea8b9437f9bf9b28ca98" translate="yes" xml:space="preserve">
          <source>Mark the operands as will never be dereferenced, which is useful info for @safe checks. Do before semantic() on operands rewrites them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6502c1ba20a549a34759225baf0e5d40999bf988" translate="yes" xml:space="preserve">
          <source>Mark this as a Rng</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf4fa7c0956cb1fdd3ecbee1e7ce54d5a6bb263" translate="yes" xml:space="preserve">
          <source>Mark variable v as modified if it is inside a constructor that var is a field in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43791f7af0838eabc46d0824572db10f91b02285" translate="yes" xml:space="preserve">
          <source>Martin Kinkelin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5637a4a34d1c67892335f2ad5244cdfa55d85c6d" translate="yes" xml:space="preserve">
          <source>Martin Nowak</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="634e2099c6e661c76d0ed1209ae09cbdd335ffa4" translate="yes" xml:space="preserve">
          <source>Martin Nowak, Walter Bright, &lt;a href=&quot;http://www.digitalmars.com&quot;&gt;http://www.digitalmars.com&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5bb36f0c221e6191a45e9c1239a0ef757bb11e" translate="yes" xml:space="preserve">
          <source>Masahiro Nakagawa, Daniel Murphy (Single value Encoder and Decoder)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b4d8cf3890734f4fadb4d37ea781cb0ac9e5158" translate="yes" xml:space="preserve">
          <source>Masks for register pairs. Note that index registers are always LSWs. This is for the convenience of implementing far pointers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40deae84f1abfc7e207419de3291a71df137054a" translate="yes" xml:space="preserve">
          <source>Master list of D compiler vendors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdbdc9dc0b30e98355e6da908f27cfdf0b692c8d" translate="yes" xml:space="preserve">
          <source>Match function arguments against a specific template function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3be1112e4fade99753f0a12ea4510c5118cf76f" translate="yes" xml:space="preserve">
          <source>Match position rather than character</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6689129157a0cd7e210456aa61647929d8c6a12" translate="yes" xml:space="preserve">
          <source>Match single characters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="148aa05679c67c07ca0b45d24720b741e8965e9e" translate="yes" xml:space="preserve">
          <source>Match to a particular TemplateParameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d67f60e052c647bc8e8157aba95edd1135747518" translate="yes" xml:space="preserve">
          <source>Match. If the codepoint is found in the set then range &lt;code&gt;inp&lt;/code&gt; is advanced by its size in &lt;a href=&quot;#Code%20unit&quot;&gt;code units&lt;/a&gt;, otherwise the range is not modifed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376518d2ef13168fcac562d64282005ad23bc928" translate="yes" xml:space="preserve">
          <source>MatchAccumulator &lt;code&gt;m&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb15661c397d61fb56d9df6a184e4fb0749edfcf" translate="yes" xml:space="preserve">
          <source>Matches 0 or more instances of any character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9ff915f17d527a366476bc5fa2efc5bd3344df" translate="yes" xml:space="preserve">
          <source>Matches \ character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d260610c825342c8a67d6079303a94f547805d4d" translate="yes" xml:space="preserve">
          <source>Matches a carriage return character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4ef72de0c62fe37341c3d09484f217488c5b53" translate="yes" xml:space="preserve">
          <source>Matches a character that belongs to the Unicode PropertyName set. Single letter abbreviations can be used without surrounding {,}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93f07d191bb83f6c2008b9d72fa87801f16649a3" translate="yes" xml:space="preserve">
          <source>Matches a character that does not belong to the Unicode PropertyName set. Single letter abbreviations can be used without surrounding {,}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566d7f7e38c4f32d92f952f44e41d0f5e20341c0" translate="yes" xml:space="preserve">
          <source>Matches a character with hexadecimal value of XX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e9580dd531ce650e18ada33bfae29a8575ead2" translate="yes" xml:space="preserve">
          <source>Matches a character with hexadecimal value of XXXX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38acb7b15bf078182213f163b848e68097571ebb" translate="yes" xml:space="preserve">
          <source>Matches a character with hexadecimal value of YYYYYY.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5eb461f7e32007ad36804786e028b3b6d3dc0b" translate="yes" xml:space="preserve">
          <source>Matches a formfeed character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e95872193cd47012e519a74ae3e1c87ca38f7d" translate="yes" xml:space="preserve">
          <source>Matches a linefeed character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e897b344e0757fd41067b191889c5addfadb41f" translate="yes" xml:space="preserve">
          <source>Matches a pattern against a path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d66a7d7700d7a95eb1d2874bde9effcf95c0d4ea" translate="yes" xml:space="preserve">
          <source>Matches a single character that belongs to this character class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83324b7e2c1bc20326ff487b5840c55c39dc6197" translate="yes" xml:space="preserve">
          <source>Matches a single character that does &lt;em&gt;not&lt;/em&gt; belong to this character class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab02f886f635ace9cbacc9188ee8abb79f5d542" translate="yes" xml:space="preserve">
          <source>Matches a tab character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e236db248100ae3fd28caffc37fe9c48f80f9bb6" translate="yes" xml:space="preserve">
          <source>Matches a vertical tab character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e6b2c792fd634e9622e84bef86fbd0a77a6417b" translate="yes" xml:space="preserve">
          <source>Matches any Unicode digit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa150f9ecc4530d1ba9af253009cc3456029976" translate="yes" xml:space="preserve">
          <source>Matches any character except Unicode digits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d5fafcbb22ed76de0bbd720f8c34d2e0299c44a" translate="yes" xml:space="preserve">
          <source>Matches any character except ones in Cyrillic &lt;em&gt;script&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924bc1a5b59a3dce4f3c80cc62dab13e152ebb85" translate="yes" xml:space="preserve">
          <source>Matches any character except ones in the BasicLatin Unicode &lt;em&gt;block&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6021ff274bc8c771ce0e596bb4aaa530db0a929a" translate="yes" xml:space="preserve">
          <source>Matches any character except those recognized as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45f9d47fbc3385960d4045204b8fa2e386214d5" translate="yes" xml:space="preserve">
          <source>Matches any character that is part of Cyrillic &lt;em&gt;script&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03c91729f38a9723ae90c15a2197e33622f23ef" translate="yes" xml:space="preserve">
          <source>Matches any character that is part of the BasicLatin Unicode &lt;em&gt;block&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb574dadab1447a560dffc656e147119382698b5" translate="yes" xml:space="preserve">
          <source>Matches any non-word character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3403b0fa145ced1d792923f6d49e5db2d7819435" translate="yes" xml:space="preserve">
          <source>Matches any word character (note: this includes numbers).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80da2f0135b2a31162fa38adfbd74f0e45d4aeea" translate="yes" xml:space="preserve">
          <source>Matches at the begining of input or line (in multiline mode).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22405e45d9f4b57fd785c56e62bdefc784bbacad" translate="yes" xml:space="preserve">
          <source>Matches at the end of input or line (in multiline mode).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e52d31b85e40923acff9955825d7752c6e3d5f3" translate="yes" xml:space="preserve">
          <source>Matches at word boundary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577bd19069cccb78c878150d0873c8b87bf7a56a" translate="yes" xml:space="preserve">
          <source>Matches either of the specified strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7032474b5acce6809313391bc66533e639b25d58" translate="yes" xml:space="preserve">
          <source>Matches exactly one instance of any character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a44fb433346fca4b9bc3c5d901586ff1246b65" translate="yes" xml:space="preserve">
          <source>Matches named subexpression regex labeling it with name 'name'. When referring to a matched portion of text, names work like aliases in addition to direct numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d1e608ef75a418f8d7948d0b6823e3bc89b904" translate="yes" xml:space="preserve">
          <source>Matches one instance of any character that appears between the brackets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1226391146d3924b763eb9ef0e5cf228cb4de36" translate="yes" xml:space="preserve">
          <source>Matches one instance of any character that does not appear between the brackets after the exclamation mark.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988aaf14193608b4daf8a5deb48eaea59a3dcec1" translate="yes" xml:space="preserve">
          <source>Matches previous character/subexpression 0 or more times. Greedy version - tries as many times as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5890e4e43176bad35bb66bd98239c5e9dce6e5" translate="yes" xml:space="preserve">
          <source>Matches previous character/subexpression 0 or more times. Lazy version - stops as early as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7057e108d200837d3f3e3900e17b1ad6f500a9ff" translate="yes" xml:space="preserve">
          <source>Matches previous character/subexpression 1 or more times. Greedy version - tries as many times as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3452a18b749bc5cf311ba5e68ced61439cf96c5b" translate="yes" xml:space="preserve">
          <source>Matches previous character/subexpression 1 or more times. Lazy version - stops as early as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffd12f9ff030816a3d8b080af1d2850b99b06d2" translate="yes" xml:space="preserve">
          <source>Matches previous character/subexpression exactly n times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30e49830de16035498306cf102e3cf0560e438f" translate="yes" xml:space="preserve">
          <source>Matches previous character/subexpression n times or more. Greedy version - tries as many times as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559dc120300f9b03ed2c4d11de66b47f805dff5b" translate="yes" xml:space="preserve">
          <source>Matches previous character/subexpression n times or more. Lazy version - stops as early as possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="718cd66ef291724dca1b1655e4689eb3f6e7962c" translate="yes" xml:space="preserve">
          <source>Matches previous character/subexpression n to m times. Greedy version - tries as many times as possible, but no more than m times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c46caef3efc96dcf2d80650ac81f7704565b52" translate="yes" xml:space="preserve">
          <source>Matches previous character/subexpression n to m times. Lazy version - stops as early as possible, but no less then n times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55fad56791bcac5e8467a93ff520f840617fad9a" translate="yes" xml:space="preserve">
          <source>Matches subexpression A, or failing that, matches B.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0152891decac3dd1755184ed1399dcc0dad87f92" translate="yes" xml:space="preserve">
          <source>Matches subexpression regex, &lt;em&gt;not&lt;/em&gt; saving matched portion of text. Useful to speed up matching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8c9711322ff24a78ef813a8c7d9cf871d789fe" translate="yes" xml:space="preserve">
          <source>Matches subexpression regex, saving matched portion of text for later retrieval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6601b3118fcc0e244e360384257b8e903b4ea7f8" translate="yes" xml:space="preserve">
          <source>Matches the character c itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3dc8c9444ac4e63e48c719abc51544ef470a8f" translate="yes" xml:space="preserve">
          <source>Matches the character itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cecc7435bfa871d524952f5bff148bdc2b51957" translate="yes" xml:space="preserve">
          <source>Matches the control character corresponding to letter C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd6e41a9323e0a9e48fa76b6daf09b0566eaa14" translate="yes" xml:space="preserve">
          <source>Matches when &lt;em&gt;not&lt;/em&gt; at word boundary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c97355716d3d517fe5e4d25c561b4a081f053fef" translate="yes" xml:space="preserve">
          <source>Matches whitespace, same as \p{White_Space}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5150558ec125a3f4852d898bf9fb73076c3ddf80" translate="yes" xml:space="preserve">
          <source>Matching</source>
          <target state="translated">Matching</target>
        </trans-unit>
        <trans-unit id="3edf0df49942da6d11a1a217e4d3af4a5a8e64f2" translate="yes" xml:space="preserve">
          <source>Math</source>
          <target state="translated">Math</target>
        </trans-unit>
        <trans-unit id="593ab8a4827c0f6a24bb66511456c27b983c3d36" translate="yes" xml:space="preserve">
          <source>Math notation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf36f25f0559cb79154e20b8ea575a6b21bd026f" translate="yes" xml:space="preserve">
          <source>Math_Symbol</source>
          <target state="translated">Math_Symbol</target>
        </trans-unit>
        <trans-unit id="6a2f1fef8d0b8728fe438f495de2e1ae827aab61" translate="yes" xml:space="preserve">
          <source>Mathematical Alphanumeric Symbols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a46c733f98e0b91d3ba8029a4593062b6eca0a2" translate="yes" xml:space="preserve">
          <source>Mathematical Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3f9c0127bce6fc83c843d0dd0b886857f901b2" translate="yes" xml:space="preserve">
          <source>Mathematical Special Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303c3bfeb0c566d68c9cf9bc9d6feb84cfa3e99a" translate="yes" xml:space="preserve">
          <source>Mathematically,</source>
          <target state="translated">Mathematically,</target>
        </trans-unit>
        <trans-unit id="e75225470130f13024b089d576a9938f9308ab12" translate="yes" xml:space="preserve">
          <source>Mathematically, acosh(x) = log(x + sqrt( x*x - 1))</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502c0bcf3d4b5cef68953c91b886223b99eb3579" translate="yes" xml:space="preserve">
          <source>Mathematically, atanh(x) = log( (1+x)/(1-x) ) / 2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354081ac0eaf5ecbff2a21240af5c85107f9d3b8" translate="yes" xml:space="preserve">
          <source>Mathematically, if z.re &amp;gt; 0 then &amp;Gamma;(z) = &lt;em&gt;&amp;int;&lt;sub&gt;&lt;small&gt;0&lt;/small&gt;&lt;/sub&gt;&lt;sup&gt;&amp;infin;&lt;/sup&gt;&lt;/em&gt; t&lt;sup&gt;z-1&lt;/sup&gt;e&lt;sup&gt;-t&lt;/sup&gt; dt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b76b554e18654fc7afe37a2d36ca2278c9a0bd" translate="yes" xml:space="preserve">
          <source>Max amount of cached alive connections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b26c0e81e6d1a04cf9525857321ed542c48ef8" translate="yes" xml:space="preserve">
          <source>MaxType!T &lt;strong id=&quot;max&quot;&gt;max&lt;/strong&gt;(T...)(T args)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd9def42e4e971e29f54b75773752e9cfc0c934" translate="yes" xml:space="preserve">
          <source>Maximum absolute difference. Defaults to &lt;code&gt;1e-5&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7b018d266ff7216df8a5bed74f6143c9da1187" translate="yes" xml:space="preserve">
          <source>Maximum allowable difference relative to &lt;code&gt;rhs&lt;/code&gt;. Defaults to &lt;code&gt;1e-2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173bf02e3e5d647f57619cdb3f8fe81ffcb9080f" translate="yes" xml:space="preserve">
          <source>Maximum number of http redirects to follow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549e94c2379df9e88c8b21145c9bed436b888bf9" translate="yes" xml:space="preserve">
          <source>Maximum size eligible for freelisting. Construction with this parameter is defined only if &lt;code&gt;maxSize == chooseAtRuntime&lt;/code&gt; or &lt;code&gt;maxSize == unbounded&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc432c657fe4144bd45d936698c166acecd18fa" translate="yes" xml:space="preserve">
          <source>Maximum xShmLock index</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a70fc4b531788cfa4bd3091286f5c9f6c8385cb7" translate="yes" xml:space="preserve">
          <source>May throw a &lt;code&gt;UTFException&lt;/code&gt; if &lt;code&gt;str[index]&lt;/code&gt; is not one past the end of a valid UTF sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5fa0097c5f6c3d6966b6fd938ee6ef58844d1cb" translate="yes" xml:space="preserve">
          <source>May throw a &lt;code&gt;UTFException&lt;/code&gt; if &lt;code&gt;str[index]&lt;/code&gt; is not the start of a valid UTF sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cf2cc5419330915ceb88f803da616df3e656fb1" translate="yes" xml:space="preserve">
          <source>Mc</source>
          <target state="translated">Mc</target>
        </trans-unit>
        <trans-unit id="94563ec383e29aa3743abd9b337b2e084fb199fb" translate="yes" xml:space="preserve">
          <source>Me</source>
          <target state="translated">Me</target>
        </trans-unit>
        <trans-unit id="236346d53333e28078765d761ee605b09c5c66e1" translate="yes" xml:space="preserve">
          <source>Meaning:</source>
          <target state="translated">Meaning:</target>
        </trans-unit>
        <trans-unit id="ae0a51f3f8c1bd633457792e73d95ebdfb47fabe" translate="yes" xml:space="preserve">
          <source>Measure a time in milliseconds, microseconds, or nanoseconds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8ad743c5f100acd20d0277cefb86b571133693" translate="yes" xml:space="preserve">
          <source>Measures the maximum bytes allocated over the time. This is useful for dimensioning allocators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebcd785babc414ca5f7b40b1e241144407a1963a" translate="yes" xml:space="preserve">
          <source>Measures the sum of extra bytes allocated beyond the bytes requested, i.e. the &lt;a href=&quot;http://goo.gl/YoKffF&quot;&gt;internal fragmentation&lt;/a&gt;. This is the current effective number of slack bytes, and it goes up and down with time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3428bf3e3bb069070bf76af2715fdc04ab1cc564" translate="yes" xml:space="preserve">
          <source>Meetei Mayek</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c29a4366fb08674ddc833d9c2d648bc22d81049a" translate="yes" xml:space="preserve">
          <source>Meetei Mayek Extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a66ec7d3e2375014d1ffe12adf1704c1f323a128" translate="yes" xml:space="preserve">
          <source>Meetei_Mayek</source>
          <target state="translated">Meetei_Mayek</target>
        </trans-unit>
        <trans-unit id="13754495aca84346deb594b0d23bc4d086989ee4" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="019a4c7b4ab7db0b7225cbe8eaee02aa570d3b44" translate="yes" xml:space="preserve">
          <source>Member fields of a synchronized class cannot be public:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04f0e51c5452147e13f2fc623076db7f9982260" translate="yes" xml:space="preserve">
          <source>Member functions declared as abstract can still have function bodies. This is so that even though they must be overridden, they can still provide &amp;lsquo;base class functionality&amp;rsquo;, e.g. through &lt;code&gt;super.foo()&lt;/code&gt; in a derived class. Note that the class is still abstract and cannot be instantiated directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94bc1832afe1d646c790e7dacf415889c81edee1" translate="yes" xml:space="preserve">
          <source>Member functions of non-synchronized classes can be individually marked as synchronized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4bd789ee2475a604bf6ff4993b3e6cecd51772" translate="yes" xml:space="preserve">
          <source>Member functions which are &lt;code&gt;private&lt;/code&gt; or &lt;code&gt;package&lt;/code&gt; are never virtual, and hence cannot be overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730bfd462ce7ea2565aafe9ffe8c9ce0ab84dc5f" translate="yes" xml:space="preserve">
          <source>Member functions with the Objective-C linkage has an additional hidden, anonymous, parameter which is the selector the function was called with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b4cee7f1b1fb6a636414a18e51281d77ef7373e" translate="yes" xml:space="preserve">
          <source>Member functions, constructors, destructors, operating overloading, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c82559a505947763aebe88eed8911e94db5f71" translate="yes" xml:space="preserve">
          <source>Member names not found in a class or struct can be forwarded to a template function named &lt;code&gt;opDispatch&lt;/code&gt; for resolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380b024ed26a6ddc44f49ea617bc4dc47f59b8b6" translate="yes" xml:space="preserve">
          <source>Member template functions cannot be virtual and hence cannot be overridden.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb449c1126609b4b41e1d87f65f0d7cd19b49b9" translate="yes" xml:space="preserve">
          <source>Members</source>
          <target state="translated">Members</target>
        </trans-unit>
        <trans-unit id="d8ffb4f7a80ae39a133b7a5a35dbf287204e2686" translate="yes" xml:space="preserve">
          <source>Members of a base class can be accessed by prepending the name of the base class followed by a dot:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38b88ba291aedc801f0cf1ace141ae388b9947cc" translate="yes" xml:space="preserve">
          <source>Memory Allocation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b0394c856fac60e784f92bcfff68951cf81266" translate="yes" xml:space="preserve">
          <source>Memory Allocation Routines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a30329db6460c4ed15bebe4d427af9052e6678f" translate="yes" xml:space="preserve">
          <source>Memory Allocation Subsystem</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5bd12480983914d8406751d31133ba86381302d" translate="yes" xml:space="preserve">
          <source>Memory Allocator Statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0efdce50032a40b3a3914e5fc8bfa6cd4288bb5" translate="yes" xml:space="preserve">
          <source>Memory Management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de1129facae4051e8fdee7abb0f38e9a1213e56" translate="yes" xml:space="preserve">
          <source>Memory Safety</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61b70edbe3a97caa2ecb5ac100b7aca209a1cba" translate="yes" xml:space="preserve">
          <source>Memory allocation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecdbc7f2417ef638487194e74177e17fd205af0b" translate="yes" xml:space="preserve">
          <source>Memory allocation function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac799873aaaeaed7f28a8dcd45e4b44ea97f1ebf" translate="yes" xml:space="preserve">
          <source>Memory safety does not imply that code is portable, uses only sound programming practices, is free of byte order dependencies, or other bugs. It is focussed only on eliminating memory corruption possibilities.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8745e9a708aba0d2943782621706fd0939c4d32e" translate="yes" xml:space="preserve">
          <source>Memory safety protections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c6afbb979807b3801d17fed1c71c2877b27c2e" translate="yes" xml:space="preserve">
          <source>Memory usage is 8 bytes per each contiguous interval in a set. The value semantics are achieved by using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Copy-on-write&quot;&gt;COW&lt;/a&gt; technique and thus it's not safe to cast this type to shared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b41ea4fb6a604fb88f6b0c86c204fa450c81da1" translate="yes" xml:space="preserve">
          <source>Memory-Safe-D-Spec</source>
          <target state="translated">Memory-Safe-D-Spec</target>
        </trans-unit>
        <trans-unit id="c247f5fb6586475135ee70daab74580914c6fb6b" translate="yes" xml:space="preserve">
          <source>Memory-safe code &lt;a href=&quot;function#function-safety&quot;&gt;cannot use certain language features&lt;/a&gt;, such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473d96fd623e27fc2d73e66bac82fb8aa418af0a" translate="yes" xml:space="preserve">
          <source>Merge &lt;code&gt;b&lt;/code&gt; flow analysis results into &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96ca7f2df1a2bb46a631ddf55db0107e8a0f6dcf" translate="yes" xml:space="preserve">
          <source>Merge function attributes pure, nothrow, @safe, @nogc, and @disable from f into s1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b4df384210c098ee9c1e6e0d3d8ee231c3a119" translate="yes" xml:space="preserve">
          <source>Merge into this function the 'in' contracts of all it overrides. 'in's are OR'd together, i.e. only one of them needs to pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39e3795a7731eaa4793023cc894fafa2b4ab3fe" translate="yes" xml:space="preserve">
          <source>Merge into this function the 'out' contracts of all it overrides. 'out's are AND'd together, i.e. all of them need to pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02db82771755ecdf0b22312c3b847d054cdfe1f4" translate="yes" xml:space="preserve">
          <source>Merge mod bits to form common mod.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c109861e51d1c86a02e432754a712c3fe0fa9fd9" translate="yes" xml:space="preserve">
          <source>Merge multiple sorted ranges &lt;code&gt;rs&lt;/code&gt; with less-than predicate function &lt;code&gt;pred&lt;/code&gt; into one single sorted output range containing the sorted union of the elements of inputs. Duplicates are not eliminated, meaning that the total number of elements in the output is the sum of all elements in the ranges passed to it; the &lt;code&gt;length&lt;/code&gt; member is offered if all inputs also have &lt;code&gt;length&lt;/code&gt;. The element types of all the inputs must have a common type &lt;code&gt;CommonType&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e1d499c82c414943f5481100c85ef8982e1adc8" translate="yes" xml:space="preserve">
          <source>Merge!(less, Rs) &lt;strong id=&quot;merge&quot;&gt;merge&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, Rs...)(Rs rs)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd689f30483b3176616a4f345aa11ac1af0123e" translate="yes" xml:space="preserve">
          <source>Merges a range of sorted ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ee86161e1a8c504c0b3ad79f0b486e252c299a5" translate="yes" xml:space="preserve">
          <source>Merges multiple sets. The input sets are passed as a range of ranges and each is assumed to be sorted by &lt;code&gt;less&lt;/code&gt;. Computation is done lazily, one union element at a time. The complexity of one &lt;code&gt;popFront&lt;/code&gt; operation is &amp;Omicron;(&lt;code&gt;log(ror.length)&lt;/code&gt;). However, the length of &lt;code&gt;ror&lt;/code&gt; decreases as ranges in it are exhausted, so the complexity of a full pass through &lt;code&gt;MultiwayMerge&lt;/code&gt; is dependent on the distribution of the lengths of ranges contained within &lt;code&gt;ror&lt;/code&gt;. If all ranges have the same length &lt;code&gt;n&lt;/code&gt; (worst case scenario), the complexity of a full pass through &lt;code&gt;MultiwayMerge&lt;/code&gt; is &amp;Omicron;(&lt;code&gt;n * ror.length * log(ror.length)&lt;/code&gt;), i.e., &lt;code&gt;log(ror.length)&lt;/code&gt; times worse than just spanning all ranges in turn. The output comes sorted (unstably) by &lt;code&gt;less&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45302b65966374aac57034c7b9f57e0b5ffd393" translate="yes" xml:space="preserve">
          <source>Meroitic Cursive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dfb86cb098d5f5d08325cb7f5549fffa8c54aa5" translate="yes" xml:space="preserve">
          <source>Meroitic Hieroglyphs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad43e700acf724fbc03a57e905d1e33999d5a95" translate="yes" xml:space="preserve">
          <source>Meroitic_Cursive</source>
          <target state="translated">Meroitic_Cursive</target>
        </trans-unit>
        <trans-unit id="16256e81ed15ae584494444b4607752969d09a87" translate="yes" xml:space="preserve">
          <source>Meroitic_Hieroglyphs</source>
          <target state="translated">Meroitic_Hieroglyphs</target>
        </trans-unit>
        <trans-unit id="441df2997a0bdfabc9155cb3f1b9eb0bfcd1b8d7" translate="yes" xml:space="preserve">
          <source>Mersenne Twister Engines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35d33912d5bd7fc92d12ad758d85ef83755b678" translate="yes" xml:space="preserve">
          <source>Message describing the error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f4b8e2eaa86c20a211c5730b176738e052b5df" translate="yes" xml:space="preserve">
          <source>Message logging is a common approach to expose runtime information of a program. Logging should be easy, but also flexible and powerful, therefore &lt;code&gt;D&lt;/code&gt; provides a standard interface for logging.  The easiest way to create a log message is to write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a14b3e6b388251b68ea9615ecf15beddb585962" translate="yes" xml:space="preserve">
          <source>Messages are logged if the &lt;code&gt;LogLevel&lt;/code&gt; of the log message is greater than or equal to the &lt;code&gt;LogLevel&lt;/code&gt; of the used &lt;code&gt;Logger&lt;/code&gt; and additionally if the &lt;code&gt;LogLevel&lt;/code&gt; of the log message is greater than or equal to the global &lt;code&gt;LogLevel&lt;/code&gt;. If a condition is passed into the log call, this condition must be true.  The global &lt;code&gt;LogLevel&lt;/code&gt; is accessible by using &lt;code&gt;globalLogLevel&lt;/code&gt;. To assign a &lt;code&gt;LogLevel&lt;/code&gt; of a &lt;code&gt;Logger&lt;/code&gt; use the &lt;code&gt;logLevel&lt;/code&gt; property of the logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674200f0791d0391b26e7ab0cb61f591c00e9006" translate="yes" xml:space="preserve">
          <source>Messages that inform about critical errors should be logged with this level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b1389e0e832a05337d6ccb31e50ea1425ca91a8" translate="yes" xml:space="preserve">
          <source>Method name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5432728a99110699123ab292c79d8929b4a93cff" translate="yes" xml:space="preserve">
          <source>Method name to call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c33db9381eac351f01f1ebcace4d045842265eb0" translate="yes" xml:space="preserve">
          <source>Methods of a final class are &lt;code&gt;final&lt;/code&gt; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536a2a35026e0b6a919478b3ed257a839d2e1750" translate="yes" xml:space="preserve">
          <source>Methods returning &lt;code&gt;Ternary&lt;/code&gt; return &lt;code&gt;Ternary.yes&lt;/code&gt; upon success, &lt;code&gt;Ternary.no&lt;/code&gt; upon failure, and &lt;code&gt;Ternary.unknown&lt;/code&gt; if the primitive is not implemented by the allocator instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7e0e02c16756d9acee15cd9d7a7473daeb068d" translate="yes" xml:space="preserve">
          <source>Miao</source>
          <target state="translated">Miao</target>
        </trans-unit>
        <trans-unit id="4014a3a1206afc2fb8f2e5f9f2071d7a3abf5198" translate="yes" xml:space="preserve">
          <source>Microsoft 32 bit Windows systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f7d07f6d0d4d6ca14a809acf6053a583de57a5" translate="yes" xml:space="preserve">
          <source>Microsoft 32-bit Windows systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7f8a6a3c059af73acb9cd574b05b2a9543c4ad" translate="yes" xml:space="preserve">
          <source>Microsoft 64 bit Windows systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac72b2ac11f991f699272cc1db01bb25e6d51711" translate="yes" xml:space="preserve">
          <source>Microsoft 64-bit Windows systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed82c6f8a58bc49b4d9060c4f66fdffc94ae06da" translate="yes" xml:space="preserve">
          <source>Microsoft C runtime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd6d05a731e12a86c8b4e80bc60f72f287734f6" translate="yes" xml:space="preserve">
          <source>Microsoft COFF object file format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c16c96e5cb2017286d8a64c25450e71226f0000b" translate="yes" xml:space="preserve">
          <source>Microsoft Corporation backward compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bde9e716692327663fd157039cda187ce1ee7df" translate="yes" xml:space="preserve">
          <source>Microsoft Windows systems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eecec507337963babdc80d1f001447bcfa1ad938" translate="yes" xml:space="preserve">
          <source>Mike Cote, John Micco and &lt;a href=&quot;http://www.digitalmars.com&quot;&gt;Walter Bright&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0263fbd5d81126a5accf38c2a8cfa720a38f5f" translate="yes" xml:space="preserve">
          <source>Mike Cote, John Micco, &lt;a href=&quot;http://www.digitalmars.com&quot;&gt;Walter Bright&lt;/a&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646bada43bacb04d883be0a800cf55c1bff27489" translate="yes" xml:space="preserve">
          <source>MinType!T &lt;strong id=&quot;min&quot;&gt;min&lt;/strong&gt;(T...)(T args)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96619c2744574ba83e062f07794a4bce5e184561" translate="yes" xml:space="preserve">
          <source>Minimum global level this condition needs to pass. Only used if &lt;code&gt;ident&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ac10aa985b72fc878006245095a438f4afd28d" translate="yes" xml:space="preserve">
          <source>Minimum number of input bytes to process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23735bdebe5dd753b2eecb3ee5464f912043405c" translate="yes" xml:space="preserve">
          <source>Minimum number of output bytes to process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7520451067e6f7c0bfa18e9bfe94463900128da6" translate="yes" xml:space="preserve">
          <source>Minimum size eligible for freelisting. Construction with this parameter is defined only if &lt;code&gt;minSize == chooseAtRuntime&lt;/code&gt;. If this condition is met and no &lt;code&gt;min&lt;/code&gt; parameter is present, &lt;code&gt;min&lt;/code&gt; is initialized with &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbfeb63cedecc26008c4032bda53482f765205a" translate="yes" xml:space="preserve">
          <source>Minimum width, default &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b86e7a6a020ac76991cd6c26e23328074d134a16" translate="yes" xml:space="preserve">
          <source>Minor HTTP version ie. 0 in HTTP/1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8cde8759f0faa5c37800217783e19162b32772" translate="yes" xml:space="preserve">
          <source>Minor differences can be handled by constant defined in a system specific import, and then using that constant in an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276eb814fa83eb8650d994da85c3e0fe04f261ce" translate="yes" xml:space="preserve">
          <source>Minute of the hour [0 - 60).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe63922288d3720f67a6b936f7e7d8469da7b2c" translate="yes" xml:space="preserve">
          <source>Minutes past the current hour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eb18cc6cb54a3c25688822c68aea8834585db05" translate="yes" xml:space="preserve">
          <source>Minutes past the hour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fcc2a870494a945127b62192effb291451b3f6c" translate="yes" xml:space="preserve">
          <source>Misaligned pointers may be used if the underlying hardware supports them &lt;b&gt;and&lt;/b&gt; the pointer is never used to point into the GC heap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a893ece8e469a3ca3d935c49f41d08d04b75ecc" translate="yes" xml:space="preserve">
          <source>Misc</source>
          <target state="translated">Misc</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="541cc60b15fef5f9a0d86353e83aac8f8978605b" translate="yes" xml:space="preserve">
          <source>Miscellaneous Mathematical Symbols-A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11779b66b9fb2d0a37251ee4317a6797b1ced04b" translate="yes" xml:space="preserve">
          <source>Miscellaneous Mathematical Symbols-B</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ae444d30ca53b5d78b290b90087547ee9d3bad" translate="yes" xml:space="preserve">
          <source>Miscellaneous Symbols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40df653d33c1970b2f4ff4a287cf2530bc9a141" translate="yes" xml:space="preserve">
          <source>Miscellaneous Symbols And Pictographs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7c226cc2dbc1d256d3a82995b8efaa4183a299" translate="yes" xml:space="preserve">
          <source>Miscellaneous Symbols and Arrows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4173dcb7119b89bcf0b405aae468ee1b3ada77b" translate="yes" xml:space="preserve">
          <source>Miscellaneous Technical</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91b6cb48d150ba0933d7fc6f4df7440a745c169f" translate="yes" xml:space="preserve">
          <source>Mismatched arguments and formats result in a &lt;code&gt; FormatException&lt;/code&gt; being thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4313428de55c91dd490c268154ae445becae4a" translate="yes" xml:space="preserve">
          <source>Mixin Declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970c2320d1bfe8e77dd4e7dd5bb34d2e4ac013f5" translate="yes" xml:space="preserve">
          <source>Mixin Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c3d721d13b6e356ee3eef96ba0569377ee567e" translate="yes" xml:space="preserve">
          <source>Mixin Scope</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ca673828825e6fb0a1c7aa7b3baac8a4415fa74" translate="yes" xml:space="preserve">
          <source>Mixin Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55840005f5cf42b3920857662d4a3179c53e14d" translate="yes" xml:space="preserve">
          <source>Mixin declarations, like: mixin(&quot;int x&quot;); &lt;a href=&quot;https://dlang.org/spec/module.html#mixin-declaration&quot;&gt;https://dlang.org/spec/module.html#mixin-declaration&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1246e35b912ba38445c7ecaa8bf8ad7a769360a5" translate="yes" xml:space="preserve">
          <source>Mixin to create a signal within a class object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47620c2433a5ab559d0c8a5a645ecf0ac1a65079" translate="yes" xml:space="preserve">
          <source>MixinTemplateName</source>
          <target state="translated">MixinTemplateName</target>
        </trans-unit>
        <trans-unit id="ef39b028b40565a8271f3d2ef7d30563984e8bc1" translate="yes" xml:space="preserve">
          <source>Mixing memory management strategies (GC + manual memory management) can be tricky, hence removing D's GC from the equation may be worthwhile sometimes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="602c1de155aef24628d7038834874c6fffc0b6fa" translate="yes" xml:space="preserve">
          <source>Mixing struct constructors and &lt;code&gt;static opCall&lt;/code&gt; is not allowed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4103da3e3d11e8682ca7214516c5066dddbce1b" translate="yes" xml:space="preserve">
          <source>Mixins are evaluated in the scope of where they appear, not the scope of the template declaration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e7f916aaa9cd501280e6c15b4f67cd1691d8dc" translate="yes" xml:space="preserve">
          <source>Mixins can add virtual functions to a class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55b2564a92bcf6859a24f6ce115142e96f27a3d" translate="yes" xml:space="preserve">
          <source>Mixins can be parameterized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0cc6d6a4019a943d3fb16059acca448a091f6c" translate="yes" xml:space="preserve">
          <source>Mixins can parameterize symbols using alias parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3456e398172f180f8497d1149d800d0157031d" translate="yes" xml:space="preserve">
          <source>MmFile objects control the memory mapped file resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35175076c72c31fd517a5a9c6d72204f71d15dc7" translate="yes" xml:space="preserve">
          <source>Mn</source>
          <target state="translated">Mn</target>
        </trans-unit>
        <trans-unit id="d92d632ad70c36fb1672c13251c63eac88e413a9" translate="yes" xml:space="preserve">
          <source>Mode &lt;code&gt;mode&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88822b475ea7dae25ac66418498e7b0921c4b86a" translate="yes" xml:space="preserve">
          <source>Mode &lt;strong id=&quot;mode&quot;&gt;mode&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c58c26e6b83749e7dad65a9fe45675deb95b104" translate="yes" xml:space="preserve">
          <source>Mode to use for decoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf450e500975a036b6274b77d63a23a31754d542" translate="yes" xml:space="preserve">
          <source>Modern Features?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bd2738f029c8a83162857e80150020a1b8efa00" translate="yes" xml:space="preserve">
          <source>Modifiable &lt;strong id=&quot;checkModifiable&quot;&gt;checkModifiable&lt;/strong&gt;(Scope* sc, int flag = 0);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b349ac1c097b91fcbd83115613e840381fbc40" translate="yes" xml:space="preserve">
          <source>Modifiable.yes or Modifiable.initialization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a38da29f4d24e5a1f0e3b0d0a11f0ec65a4ef0" translate="yes" xml:space="preserve">
          <source>Modification of pointer values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f260e757cec75096bc3eefbfb1c4a14720832017" translate="yes" xml:space="preserve">
          <source>Modifier</source>
          <target state="translated">Modifier</target>
        </trans-unit>
        <trans-unit id="c28e47f6044e41ff0471e331bc5947f7ad950346" translate="yes" xml:space="preserve">
          <source>Modifier Tone Letters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8346f1ccfc1c83e1327c9516f54835e7836ddef2" translate="yes" xml:space="preserve">
          <source>Modifier_Letter</source>
          <target state="translated">Modifier_Letter</target>
        </trans-unit>
        <trans-unit id="31a38c9c5af3c6a38d76df500b9d21534d32817b" translate="yes" xml:space="preserve">
          <source>Modifier_Symbol</source>
          <target state="translated">Modifier_Symbol</target>
        </trans-unit>
        <trans-unit id="3a7ea294bf33134dce4b142b8b7182de29b978b2" translate="yes" xml:space="preserve">
          <source>Modifiers</source>
          <target state="translated">Modifiers</target>
        </trans-unit>
        <trans-unit id="9fe408e12dc6ee8d44c87b38b82ff435c397a441" translate="yes" xml:space="preserve">
          <source>Modify</source>
          <target state="translated">Modify</target>
        </trans-unit>
        <trans-unit id="e7532a054e72ed2b2ee923a9b28bf5cd38743380" translate="yes" xml:space="preserve">
          <source>Modify all expression type of return statements to tret.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="6658e9ce5ba737387d02a8c5def43fd4cf55b431" translate="yes" xml:space="preserve">
          <source>Module &lt;code&gt;m&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937ba920fb486031428c2fad0ad46f6224397871" translate="yes" xml:space="preserve">
          <source>Module &lt;code&gt;mod&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53369c001691b815ca3a05eecd1682d09a8470cd" translate="yes" xml:space="preserve">
          <source>Module &lt;strong id=&quot;entrypoint&quot;&gt;entrypoint&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8bf8cd6d1bd90507075fdd4361174c0fa37286c" translate="yes" xml:space="preserve">
          <source>Module &lt;strong id=&quot;importedFrom&quot;&gt;importedFrom&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff53f93875f0242523e6c98ab579d326f23c343e" translate="yes" xml:space="preserve">
          <source>Module &lt;strong id=&quot;parse&quot;&gt;parse&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512a40abc1493f140d5c39a8e2d19f624b504462" translate="yes" xml:space="preserve">
          <source>Module &lt;strong id=&quot;parse&quot;&gt;parse&lt;/strong&gt;(AST)(DiagnosticReporter diagnosticReporter);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c79df9fc0acbd8cd2ea949b87e97fb853b994bf3" translate="yes" xml:space="preserve">
          <source>Module &lt;strong id=&quot;rootHasMain&quot;&gt;rootHasMain&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60388160a0e83135f7049a2a65562bf3b5b53e0" translate="yes" xml:space="preserve">
          <source>Module Declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd27d97553a2a8a4d766210d868e6015f60e1ae7" translate="yes" xml:space="preserve">
          <source>Module Initialization and Termination</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca4ce7b8e6017ea6f7141a9e94c2ffc705fd320b" translate="yes" xml:space="preserve">
          <source>Module Scope Operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6483f83ef8550752d7a2e299c6b850018ec74cd5" translate="yes" xml:space="preserve">
          <source>Module constructor and destructor routines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4c60ff894bd0aa405d27e42fcae8268f876f90" translate="yes" xml:space="preserve">
          <source>Module containing core time functionality, such as &lt;a href=&quot;#Duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt; (which represents a duration of time) or &lt;a href=&quot;#MonoTime&quot;&gt;&lt;code&gt;MonoTime&lt;/code&gt;&lt;/a&gt; (which represents a timestamp of the system's monotonic clock).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a81435755ae74b4d015fcd51a7cfdac0b3182d8" translate="yes" xml:space="preserve">
          <source>Module containing some basic benchmarking and timing functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0a8a168e341b16dc8158618161a129b9b407119" translate="yes" xml:space="preserve">
          <source>Module in which the D main is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58b8208bcfdac835bd589f0a0f394caee9130541" translate="yes" xml:space="preserve">
          <source>Module names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70899daeefb999b373eb42fec0ee19192cad4996" translate="yes" xml:space="preserve">
          <source>Module symbols can be imported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b694f1832151dfbd90f5a6a709070e10c8d5ee" translate="yes" xml:space="preserve">
          <source>Module this node belongs to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa098333373ac1a458273e0aff013b55525016b7" translate="yes" xml:space="preserve">
          <source>Module unit test handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e4dbc79efde2a2b6f620f3e85fc1dec81fe54f7" translate="yes" xml:space="preserve">
          <source>ModuleDeclaration</source>
          <target state="translated">ModuleDeclaration</target>
        </trans-unit>
        <trans-unit id="1d70436f71331e7691f5e4a6575b7798509f7215" translate="yes" xml:space="preserve">
          <source>ModuleFullyQualifiedName</source>
          <target state="translated">ModuleFullyQualifiedName</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="cb6c75d384ba2ee83daf2876f5a399b7c1f0f1fe" translate="yes" xml:space="preserve">
          <source>Modules &lt;strong id=&quot;createModules&quot;&gt;createModules&lt;/strong&gt;(ref Strings files, ref Strings libmodules);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da6e793084964d8a57e69c238db9dd58256809c" translate="yes" xml:space="preserve">
          <source>Modules are always compiled at global scope, and are unaffected by surrounding attributes or other modifiers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee05c4b1bd6be476eb53ca950de0eb4c248b18b7" translate="yes" xml:space="preserve">
          <source>Modules automatically provide a namespace scope for their contents. Modules superficially resemble classes, but differ in that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b416e3eb463a331e85667194c836c015f4d354e1" translate="yes" xml:space="preserve">
          <source>Modules can be grouped together in hierarchies called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e78263eed2a0541f7c20a04b773beb7d10b627d" translate="yes" xml:space="preserve">
          <source>Modules do not inherit, they have no super modules, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe99ae5c5906ceceb6d714060f49ed25dbefbd27" translate="yes" xml:space="preserve">
          <source>Modules have a one-to-one correspondence with source files. The module name is, by default, the file name with the path and extension stripped off, and can be set explicitly with the module declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077b9b7259692d5a93f09beb6ff63b63184c5793" translate="yes" xml:space="preserve">
          <source>Modules offer several guarantees:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a0f28806f53fd75308c3f2a793267cf1428ae8" translate="yes" xml:space="preserve">
          <source>Modulus</source>
          <target state="translated">Modulus</target>
        </trans-unit>
        <trans-unit id="c3bdbab40a4be4ac1b8eb1ccb2dbb2eaf8ed480f" translate="yes" xml:space="preserve">
          <source>Mongolian</source>
          <target state="translated">Mongolian</target>
        </trans-unit>
        <trans-unit id="1c76a58fbf51dcfb4f86986f8351b250a767af1c" translate="yes" xml:space="preserve">
          <source>MonoTimeImpl &lt;strong id=&quot;max&quot;&gt;max&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75204b25a4143c50617e7f536fd89fa5538edf26" translate="yes" xml:space="preserve">
          <source>MonoTimeImpl &lt;strong id=&quot;min&quot;&gt;min&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fee0ee10984bd3ac7bbdf08b79f3b112f28e5f09" translate="yes" xml:space="preserve">
          <source>MonoTimeImpl &lt;strong id=&quot;zero&quot;&gt;zero&lt;/strong&gt;();</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eede0f12587dd7beec0a1e43ee87fff438df01b9" translate="yes" xml:space="preserve">
          <source>Month &lt;code&gt;month&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="770498cc7209865e7142aee60b35cd4ef1a665ec" translate="yes" xml:space="preserve">
          <source>Month of a Gregorian Year.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a982879f5e351a31dc81a576cd9f499ed195b9ca" translate="yes" xml:space="preserve">
          <source>Month of the year (January is 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267248d9e2a350a08fb014509dd997369fd505b0" translate="yes" xml:space="preserve">
          <source>More precisely, an expression of the form &lt;code&gt;arr[&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51359e07cc3dafc35c2e930e5c6893f3b29a6a3e" translate="yes" xml:space="preserve">
          <source>More than one qualifier may apply to a type. The order of application is irrelevant, for example given an unqualified type &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;const shared T&lt;/code&gt; and &lt;code&gt;shared const T&lt;/code&gt; are the same type. For that reason, this document depicts qualifier combinations without parentheses unless necessary and in alphabetic order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b91b6e5e4417fbf29a4b247eba962d491f1a192" translate="yes" xml:space="preserve">
          <source>Most Objective-C code is bundled in something called a &quot;Framework&quot;. This is basically a regular directory, with the &lt;code&gt;.framework&lt;/code&gt; extension and a specific directory layout. A framework contains a dynamic library, all public header files and any resources (images, sounds and so on) required by the framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb12bc22804b44b167d93aec3f3c70407b2e35d" translate="yes" xml:space="preserve">
          <source>Most functions do not perform any memory allocations, and if a string is returned, it is usually a slice of an input string. If a function allocates, this is explicitly mentioned in the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="774795e055d4e2dccab7943b620741f1d26bed50" translate="yes" xml:space="preserve">
          <source>Most negative &lt;code&gt;Duration&lt;/code&gt; possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581c4c1b8a2332d611ce4416497bc282ce6dfdaa" translate="yes" xml:space="preserve">
          <source>Most negative &lt;code&gt;MonoTime&lt;/code&gt; possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddbd3dbc157ec8539b793dbad7b600adfc5f9e59" translate="yes" xml:space="preserve">
          <source>Most negative &lt;code&gt;TickDuration&lt;/code&gt; possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1009e1ed86d39d0ca096eb1687471230fd67e3f4" translate="yes" xml:space="preserve">
          <source>Most numbers are ordered naturally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4812af24b14425f80ec6fa5d4117b8b760e8ef9a" translate="yes" xml:space="preserve">
          <source>Most of the logic to implement scoped pointers and scoped references is here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c833ba71d68fc55966f6e1456e6db2fd0300c96d" translate="yes" xml:space="preserve">
          <source>Most programs should not use the coarse clock, exactly because it's less precise, and most programs don't need to get the time often enough to care, but for those rare programs that need to get the time extremely frequently (e.g. hundreds of thousands of times a second) but don't care about high precision, the coarse clock might be appropriate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1b6e1a33d26c83c47eddc206c5ac1e624e5155" translate="yes" xml:space="preserve">
          <source>Most programs should not use this directly, but it's exposed for those few programs that need it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e894652e8d984064189391f996d60397e2a48ec" translate="yes" xml:space="preserve">
          <source>Move a BLOB Handle to a New Row</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="add02f8fc89679f014286c95aa282291626003eb" translate="yes" xml:space="preserve">
          <source>Moves &lt;code&gt;source&lt;/code&gt; into &lt;code&gt;target&lt;/code&gt;, via a destructive copy when necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a236d46c92b4a5ca559f8a89c2b3c577b168e0" translate="yes" xml:space="preserve">
          <source>Moves all elements from one range to another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8479b9f61cb11354afd2e1600228140ad6b9d6dc" translate="yes" xml:space="preserve">
          <source>Moves as many elements as possible from one range to another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960405f6c4b3aa5de72b116119525712115be474" translate="yes" xml:space="preserve">
          <source>Moves element at index &lt;code&gt;i&lt;/code&gt; of &lt;code&gt;r&lt;/code&gt; out and returns it. Leaves &lt;code&gt; r[i]&lt;/code&gt; in a destroyable state that does not allocate any resources (usually equal to its &lt;code&gt;.init&lt;/code&gt; value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ea6259d5295d73b4c9b122251d954bd3288ccc" translate="yes" xml:space="preserve">
          <source>Moves out the back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8dbe19673ddfdfe7531306a22cbece7e08fa915" translate="yes" xml:space="preserve">
          <source>Moves out the front.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21464138e9b7b84f1e21b5677eb4772e282fc223" translate="yes" xml:space="preserve">
          <source>Moves the back of &lt;code&gt;r&lt;/code&gt; out and returns it. Leaves &lt;code&gt;r.back&lt;/code&gt; in a destroyable state that does not allocate any resources (usually equal to its &lt;code&gt;.init&lt;/code&gt; value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89199b203d67cc4472b5a42c11f218296b0fa959" translate="yes" xml:space="preserve">
          <source>Moves the front of &lt;code&gt;r&lt;/code&gt; out and returns it. Leaves &lt;code&gt;r.front&lt;/code&gt; in a destroyable state that does not allocate any resources (usually equal to its &lt;code&gt;.init&lt;/code&gt; value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22eb7096554b6e74868e7d16970a1dc126973c23" translate="yes" xml:space="preserve">
          <source>Much of the D documentation itself is generated this way, including this page. Such documentation is marked at the bottom as being generated by Ddoc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60ee27cc756708ec2d1a2d75f87ef3c6b16e014" translate="yes" xml:space="preserve">
          <source>Mul Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e13b5b1d94de82bc38c31c61776089164a0d74c" translate="yes" xml:space="preserve">
          <source>Mul expressions for floating point operands are not associative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf7dc9a1dd03ca0b5671d66051467ce10dce0721" translate="yes" xml:space="preserve">
          <source>Multi-disk zips not supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098b25f016e7cee3aeb46b0951ffba8ca7a4aba9" translate="yes" xml:space="preserve">
          <source>Multi-line mode, match ^, $ on start and end line separators as well as start and end of input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df91ee85cfe006da084d6eec2205103d82b62a7" translate="yes" xml:space="preserve">
          <source>MultiLogger logs to multiple &lt;code&gt;Logger&lt;/code&gt;. The &lt;code&gt;Logger&lt;/code&gt;s are stored in an &lt;code&gt;Logger[]&lt;/code&gt; in their order of insertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="740922ac20ba9136af0a0a62b3c2c734d9f20fc6" translate="yes" xml:space="preserve">
          <source>Multiple</source>
          <target state="translated">Multiple</target>
        </trans-unit>
        <trans-unit id="29e590b1115ee1a9a48191676c1dd3a4d12cb97a" translate="yes" xml:space="preserve">
          <source>Multiple functions can be passed to &lt;code&gt;map&lt;/code&gt;. In that case, the element type of &lt;code&gt;map&lt;/code&gt; is a tuple containing one element for each function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abca3b636846e1599131fb30115e7624fb04c581" translate="yes" xml:space="preserve">
          <source>Multiple identifiers in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d184893da2dc41280aed339b733b86a1d5d7d9" translate="yes" xml:space="preserve">
          <source>Multiple indices can be passed into &lt;code&gt;remove&lt;/code&gt;. In that case, elements at the respective indices are all removed. The indices must be passed in increasing order, otherwise an exception occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9e29f23e6c577c3330b7f72495b39a5263c9d7" translate="yes" xml:space="preserve">
          <source>Multiple instantiations of a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="440d1a8a232140baee2e245b3e53c432fe0e99fc" translate="yes" xml:space="preserve">
          <source>Multiple substitutes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d488fe5f5a2700bbcfa9a073ec3ff1f6ecfd5b57" translate="yes" xml:space="preserve">
          <source>Multiplies an integral value and a &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a0e7e79948bc24fcfd6b23d109776c18e4bdf1" translate="yes" xml:space="preserve">
          <source>Multiplies or divides the duration by an integer value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0954814fc4bb5f73545aacc2e2398a5d8549c662" translate="yes" xml:space="preserve">
          <source>Multiplies/Divides the duration by an integer value as well as assigning the result to this &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7cc0cb1ca5c98043347b03c80d00881ef4f41c9" translate="yes" xml:space="preserve">
          <source>Multiply two complex floating point numbers, x and y.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c62087494680c6ab390a67b385387fc2371ff36" translate="yes" xml:space="preserve">
          <source>Multiply two signed integers, checking for overflow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ace69a7d289fcbc18bab280e6a93de8a21ddc54" translate="yes" xml:space="preserve">
          <source>Multiply two unsigned integers, checking for overflow (aka carry).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5880acb922eaf637f5fe6ee51c64bbc5576e150e" translate="yes" xml:space="preserve">
          <source>MultiwayMerge!(less, RangeOfRanges) &lt;strong id=&quot;multiwayMerge&quot;&gt;multiwayMerge&lt;/strong&gt;(alias less = &quot;a &amp;lt; b&quot;, RangeOfRanges)(RangeOfRanges ror);</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa03890066c23a8b19ca12948a9e10fceae838f" translate="yes" xml:space="preserve">
          <source>MurmurHash3 comes in three flavors, listed in increasing order of throughput:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f19edd3144a2656247fe56232af4c5408c8b7ee" translate="yes" xml:space="preserve">
          <source>Musical Symbols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13bcc5c25bae00735d267b69807a37eb90d90472" translate="yes" xml:space="preserve">
          <source>Mutation</source>
          <target state="translated">Mutation</target>
        </trans-unit>
        <trans-unit id="c0b02d18cf57f54fa894db9640ab1fdf261c7702" translate="yes" xml:space="preserve">
          <source>Mutex &lt;code&gt;m&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc7eaf9d7996275cabd58454896268bb0c4057bf" translate="yes" xml:space="preserve">
          <source>Mutex &lt;code&gt;mutex&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee9066f4d731d8a141c6e684743ee9a9527de8b6" translate="yes" xml:space="preserve">
          <source>Mutex Handle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f117864c1709baa2c76d7b2cfa8d17c9f1bfe11" translate="yes" xml:space="preserve">
          <source>Mutex Methods Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca067080a430d66f997055e5f2d644e22736a96" translate="yes" xml:space="preserve">
          <source>Mutex Verification Routines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7703eaffd0654744dd25ed0b2c8483a972228de2" translate="yes" xml:space="preserve">
          <source>Mutex for mutually exclusive access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f2c9599c5c14be2ce92b9de958cb57db81b38f" translate="yes" xml:space="preserve">
          <source>Mutexes</source>
          <target state="translated">Mutexes</target>
        </trans-unit>
        <trans-unit id="928b7c48a60ad93b81bc3bee9d274c5f2aed9ad3" translate="yes" xml:space="preserve">
          <source>Myanmar</source>
          <target state="translated">Myanmar</target>
        </trans-unit>
        <trans-unit id="355376d91cd047a2d8fdca64b43c804618ed3101" translate="yes" xml:space="preserve">
          <source>Myanmar Extended-A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51a60734da64be0e618bacbea2865a8a7dcd669" translate="yes" xml:space="preserve">
          <source>N</source>
          <target state="translated">N</target>
        </trans-unit>
        <trans-unit id="de9d4243b85d288bbb9d4e29d9b8114613e21d53" translate="yes" xml:space="preserve">
          <source>N-ary predicate that reverses the order of arguments, e.g., given &lt;code&gt;pred(a, b, c)&lt;/code&gt;, returns &lt;code&gt;pred(c, b, a)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9d371451b6909ac85117130b9153a96499a362c" translate="yes" xml:space="preserve">
          <source>NAME</source>
          <target state="translated">NAME</target>
        </trans-unit>
        <trans-unit id="d82a19a46f2f7da0f84cb56740a41e0148eda5c1" translate="yes" xml:space="preserve">
          <source>NAN</source>
          <target state="translated">NAN</target>
        </trans-unit>
        <trans-unit id="e2f31d8d8e29c1c65e1a03cf1b1495f55b89828e" translate="yes" xml:space="preserve">
          <source>NANs of the same sign are ordered by the payload ('negative' ones - in reverse order).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d468ae642bb247a8e01e4ff6b3d5521a502f435" translate="yes" xml:space="preserve">
          <source>NANs of the same sign are ordered by the payload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4b99ee66548ff50c18139181185129923f01ff" translate="yes" xml:space="preserve">
          <source>NCS backward compatibility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32955bf4c7fd11cc57b3ad4ab0172c20d35e0aa" translate="yes" xml:space="preserve">
          <source>NDP[8] &lt;strong id=&quot;_8087elems&quot;&gt;_8087elems&lt;/strong&gt;;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc1bfb052f62695e8afc872dbacb4c070b0c10e5" translate="yes" xml:space="preserve">
          <source>NEWREG</source>
          <target state="translated">NEWREG</target>
        </trans-unit>
        <trans-unit id="8e64e5eebed2a307131d496e00360f4a910e75dc" translate="yes" xml:space="preserve">
          <source>NKo</source>
          <target state="translated">NKo</target>
        </trans-unit>
        <trans-unit id="965befa21e77d9af06a32a773577d2548bb3c644" translate="yes" xml:space="preserve">
          <source>NL line feed, new line</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac00a7e70abeeaf254830eb6d9428e78c8d7ef4" translate="yes" xml:space="preserve">
          <source>NN</source>
          <target state="translated">NN</target>
        </trans-unit>
        <trans-unit id="81baa761ece464984c4726ca74944a94c4dca7bc" translate="yes" xml:space="preserve">
          <source>NO LONGER USED</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0654a028e5aea48c8fbb09871b8f397a186c883b" translate="yes" xml:space="preserve">
          <source>NONE</source>
          <target state="translated">NONE</target>
        </trans-unit>
        <trans-unit id="556cfa38702a7b11d3a265b69b1a1f579954c6ad" translate="yes" xml:space="preserve">
          <source>NOT USED</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8ad860c15810cce0e7beac1c91da3ab2cb22c47" translate="yes" xml:space="preserve">
          <source>NOTE</source>
          <target state="translated">NOTE</target>
        </trans-unit>
        <trans-unit id="22f6c302a991a23878dc1d3fd193f165c6d7378d" translate="yes" xml:space="preserve">
          <source>NOTE 2:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92dfb30e422cabeb6b909c9930e19e573ebc5371" translate="yes" xml:space="preserve">
          <source>NOTE: &lt;code&gt;delete&lt;/code&gt; has been deprecated. Instead, please use &lt;a href=&quot;https://dlang.org/phobos/object.html#destroy&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt; if feasible, or &lt;a href=&quot;https://dlang.org/phobos/core_memory.html#__delete&quot;&gt;&lt;code&gt;core.memory.__delete&lt;/code&gt;&lt;/a&gt; as a last resort.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41627eab8a13abe6cd0a95719c7b5b2435940124" translate="yes" xml:space="preserve">
          <source>NOTE: Not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a142d11fd8e1893f7241ef23da3ac42b73c007c2" translate="yes" xml:space="preserve">
          <source>NP form feed, new page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="026eac853e081a2793439a30ef3a00433e26f261" translate="yes" xml:space="preserve">
          <source>NTLM</source>
          <target state="translated">NTLM</target>
        </trans-unit>
        <trans-unit id="b9b6768f79f1577e799b1efce766e4e8e86e2dd4" translate="yes" xml:space="preserve">
          <source>NTLM auth is supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9515fcc91e92808d85b39d93f92900ad927ccb8" translate="yes" xml:space="preserve">
          <source>NULL Function Name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe1cc67b4afd83bc08c13bcd7b64a2b5b268c52b" translate="yes" xml:space="preserve">
          <source>NULL NULL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87d41aff24ba6f4ec554d24dce699e7d1692a05" translate="yes" xml:space="preserve">
          <source>NULL file not found !=NULL mem.xmalloc'd file name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eaa2cbecdcbd2183d8b68e5b96e784ce915bf78" translate="yes" xml:space="preserve">
          <source>NaN value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="b86ccc3e7cba86e65ae5df758ab1c57554830621" translate="yes" xml:space="preserve">
          <source>Name Mangling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa5b774be0bfcbd2e2835e6bd0980fb6e06778a" translate="yes" xml:space="preserve">
          <source>Name Of A Host Parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb9e33f6b09bb7fe5d38a783b74c6905b2f43077" translate="yes" xml:space="preserve">
          <source>Name Of The Folder Holding Database Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7749c218b18b42cbe27f3f870da40b8d3d708ba1" translate="yes" xml:space="preserve">
          <source>Name Of The Folder Holding Temporary Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59df65314daa841d45f5a3e14ba76e2f9e9c8c1" translate="yes" xml:space="preserve">
          <source>Name of file for which the error occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d559607a1a6446ab7620756e13a0b5f234bf2473" translate="yes" xml:space="preserve">
          <source>Name of production rule which failed to parse, or specific error message</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31cbabb3f72b2a73875e1063140161450989ac1" translate="yes" xml:space="preserve">
          <source>Name of proxy to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4743065d5c24dea8c1049fa1ad276414cb966a5e" translate="yes" xml:space="preserve">
          <source>Name of symbol to test that resides in &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="926beea7a204b67e08849a9f0f8baf4eade0c1be" translate="yes" xml:space="preserve">
          <source>Name of this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd20c9269fc21e28a5ca023c75d67f561fd2907" translate="yes" xml:space="preserve">
          <source>Name string is a URL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9d951df5185dacb50ff8e872d8f60652b3003f" translate="yes" xml:space="preserve">
          <source>Name string is a fully-qualified domain name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec414128b6f1f85f67f2bea1a748a95de4410a8" translate="yes" xml:space="preserve">
          <source>Name string is an ISO OID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b19d50c25b3743eb4adeadeaa3e5a0ab484c83" translate="yes" xml:space="preserve">
          <source>Name string is an X.500 DN (in DER or a text output format)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d41d633c54bc35ed0b102d16a59c09042d7e6f8" translate="yes" xml:space="preserve">
          <source>Name to append to path</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e44b2dd9241e59e5da1fe5cf27cc5a6f2a79e1" translate="yes" xml:space="preserve">
          <source>Named Character Entities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a5eb217e7e482d8acfda053982ce228847a019" translate="yes" xml:space="preserve">
          <source>Named Enum Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9a079f7fd37c78ad2d46952b2843d67f7e8c61" translate="yes" xml:space="preserve">
          <source>Named Enums</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3880787f5865cac8472d36131fe148caae5fca26" translate="yes" xml:space="preserve">
          <source>Named character entity from the HTML5 specification. See &lt;a href=&quot;entity#NamedCharacterEntity&quot;&gt;&lt;i&gt;NamedCharacterEntity&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67bbc13122b700cc80fcad9791161657d846a9cd" translate="yes" xml:space="preserve">
          <source>Named enum members may not have individual</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="680bdf9cb66385985bc0370016c9c0b2510bfa40" translate="yes" xml:space="preserve">
          <source>Named enums are used to declare related constants and group them by giving them a unique type. The &lt;a href=&quot;#EnumMembers&quot;&gt;&lt;i&gt;EnumMembers&lt;/i&gt;&lt;/a&gt; are declared in the scope of the named enum. The named enum declares a new type, and all the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e6a3723926ccc64d8cb3caf791cfc7436d9eeb" translate="yes" xml:space="preserve">
          <source>Named sections follow the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7572bcf7df65774ff78b8059cf1d76bfd458d709" translate="yes" xml:space="preserve">
          <source>Named subexpressions, with Python syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b7c08c3ab75f37e2da656c1aab228f5f3a793b1" translate="yes" xml:space="preserve">
          <source>Names</source>
          <target state="translated">Names</target>
        </trans-unit>
        <trans-unit id="18279a42718c13f69852b27bda71bca286baf482" translate="yes" xml:space="preserve">
          <source>Namespace identifier resolved during semantic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16eb70d8d96eda3f848bd01fad9c8740968e54df" translate="yes" xml:space="preserve">
          <source>Namespaces create a new named scope that is imported into its enclosing scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ac1397736e022a1d1f2150f9efcc470a2f2b26" translate="yes" xml:space="preserve">
          <source>Narrow strings are handled as a special case in an overload.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1baa0f5a64eb81bc7adf3575d07ce443439b75e" translate="yes" xml:space="preserve">
          <source>Narrows down the search for sets of &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt; to all Unicode blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972986128033c9c5a0fa48b5cba6b81b431ea5b8" translate="yes" xml:space="preserve">
          <source>Narrows down the search for sets of &lt;a href=&quot;#Code%20point&quot;&gt;code points&lt;/a&gt; to all Unicode scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0d5df10c5743ed78b049b016736baea220da828" translate="yes" xml:space="preserve">
          <source>Natural logarithm of the gamma function, &amp;Gamma;(x)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9af04929dbb837f665a10a968e5ddf32830b2b68" translate="yes" xml:space="preserve">
          <source>Nd</source>
          <target state="translated">Nd</target>
        </trans-unit>
        <trans-unit id="5ff045772783a219420ce41451947dd63b0d24fc" translate="yes" xml:space="preserve">
          <source>Nearly the full language remains available. Highlights include:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d19f92de109ac46a4d1496b1a25770fce9bf58d9" translate="yes" xml:space="preserve">
          <source>NeedInterpret &lt;code&gt;needInterpret&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75fa110366f333fd5bab311830e3dde315a57f85" translate="yes" xml:space="preserve">
          <source>Needles &lt;code&gt;needles&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca161e3cc3002c027a2393428d0e306fbbaf695" translate="yes" xml:space="preserve">
          <source>Needles &lt;code&gt;withOneOfThese&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252cb1c005cf9e2d7b10d76452dacceef651591d" translate="yes" xml:space="preserve">
          <source>Needs to be run after all arguments parsing (command line, DFLAGS environment variable and config file) in order to add final flags (such as &lt;code&gt;X86_64&lt;/code&gt; or the &lt;code&gt;CRuntime&lt;/code&gt; used).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="773b47405b1ade5cb7def242c625aee9a0503c8c" translate="yes" xml:space="preserve">
          <source>NegExp, UAddExp, or ComExp which is revised per rules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86ed584de044b5671abdde74aefb4ce336bc1352" translate="yes" xml:space="preserve">
          <source>NegInfInterval &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d37436b24a16d602498d52710fab24c4c0728fb" translate="yes" xml:space="preserve">
          <source>NegInfInterval &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06abdfa680cc88d985771cbd0b3ca58828a2c451" translate="yes" xml:space="preserve">
          <source>NegInfInterval!TP &lt;code&gt;interval&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6035d6e362cc58462f47d6189969232e8adefdb5" translate="yes" xml:space="preserve">
          <source>NegInfIntervalRange &lt;code&gt;rhs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b509d53b6c53336b97c7a2d0d8fd0931d01cf01" translate="yes" xml:space="preserve">
          <source>Negate an integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65959b6815872890e463de3dd8c9f108e73ed07" translate="yes" xml:space="preserve">
          <source>Negates predicate &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2be9e5f14286a848786e1067cc531abff2e5a28" translate="yes" xml:space="preserve">
          <source>Negates the passed template predicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377568a17aa50c7d08c08a483a0eaa6ac8ab5550" translate="yes" xml:space="preserve">
          <source>Negative acknowledge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2daad810c80df74440602a7aceea31f882914c35" translate="yes" xml:space="preserve">
          <source>Negotiate auth support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a29c776e4dbfe3a513f9eff63083ad09174aeb63" translate="yes" xml:space="preserve">
          <source>Neither of the above postblits is defined for structs that don't define &lt;code&gt;this(this)&lt;/code&gt; and don't have fields that transitively define it. If a struct does not define a postblit (implicit or explicit) but defines functions that use the same name/signature as the internally generated postblits, the compiler is able to identify that the functions are not actual postblits and does not insert calls to them when the struct is copied. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbdc670d6c3fa0c3348a1095041949b891ee8b90" translate="yes" xml:space="preserve">
          <source>Neither part of the address may begin with a dot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adecc7ca86d9dceca1b8a8af2434d1f53d82528b" translate="yes" xml:space="preserve">
          <source>Neither part of the address may end with a dot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7aed298b0805dc753e9e811fcc17786fa078e4f" translate="yes" xml:space="preserve">
          <source>Neither the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54ff6b0bd3497e2fc52575cdc71b5c7d66565ca" translate="yes" xml:space="preserve">
          <source>Neither the type of the &lt;code&gt;return ref&lt;/code&gt; parameter(s) nor the type of the return value is considered when determining the lifetime of the return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b40ef9e87e1aa8159c98216ddccbf41a39cea4" translate="yes" xml:space="preserve">
          <source>Nested Classes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ceba4234e15aa5ab2bd2d8b94c4dcba7693959f" translate="yes" xml:space="preserve">
          <source>Nested Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc233cc472db43781bf227ced2be0151fbaa6765" translate="yes" xml:space="preserve">
          <source>Nested Structs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18abd9c388e5b52a8ab76caf29e0af466e0fc751" translate="yes" xml:space="preserve">
          <source>Nested Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7b8bd3fd9842e6b5f5443071f6160290a2688fd" translate="yes" xml:space="preserve">
          <source>Nested functions always have the D function linkage type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b742f5047d7f2f070cdc497bf94356170baca1" translate="yes" xml:space="preserve">
          <source>Nested functions can be accessed only if the name is in scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687841a342e2af7eaa9fb5771e49ff2ecd7c7c55" translate="yes" xml:space="preserve">
          <source>Nested functions cannot be overloaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de56879ae392c0f410b6a4803a848b74acc25efa" translate="yes" xml:space="preserve">
          <source>Nested functions have access to the variables and other symbols defined by the lexically enclosing function. This access includes both the ability to read and write them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d040d8cbecb1f3ea6ea11fdae7060537a65415" translate="yes" xml:space="preserve">
          <source>Nested functions, nested structs, delegates and lambdas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58fbc07285bd7225d930bd7dd9f892a522af9f6" translate="yes" xml:space="preserve">
          <source>Nested structs/classes cannot be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84758e8ed7fb7e044ecd7ee4b8be21ee953041d9" translate="yes" xml:space="preserve">
          <source>Nesting Delimiters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a8e9132760d41d72a6889c4990ba4d0970d98d7" translate="yes" xml:space="preserve">
          <source>Nesting block comments can span multiple lines and can nest.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9e1f6f189ff8e4d505c81b54a796d5e66a2542" translate="yes" xml:space="preserve">
          <source>NetBSD</source>
          <target state="translated">NetBSD</target>
        </trans-unit>
        <trans-unit id="f72e37a825c66ec1f9c150b1cff07ef3b471399e" translate="yes" xml:space="preserve">
          <source>Networking client functionality as provided by &lt;a href=&quot;http://curl.haxx.se/libcurl&quot;&gt;libcurl&lt;/a&gt;. The libcurl library must be installed on the system in order to use this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="581aefeada059f802da1d583ea93e3161c11eedd" translate="yes" xml:space="preserve">
          <source>Networking client functionality as provided by libcurl.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe07da3dd45bd0d24ce7337762bb47dbdca8703" translate="yes" xml:space="preserve">
          <source>Never defined; used to just disable a section of code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbdcd23a18b9ea161014043c83bf82b0c775856d" translate="yes" xml:space="preserve">
          <source>Never do checking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc947765f94c215d01465bd1d5f3c6b067a780d" translate="yes" xml:space="preserve">
          <source>New Expressions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="814ede89739aeda2dd2ef09f7a84f1a31b54f537" translate="yes" xml:space="preserve">
          <source>New Tai Lue</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ca8599d50ec8f4a491f84862a1372294230642" translate="yes" xml:space="preserve">
          <source>New thread with anonymous function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4730a25585b21bc83b2fb6fd8c21ccef35173c07" translate="yes" xml:space="preserve">
          <source>NewAnonClassExpression</source>
          <target state="translated">NewAnonClassExpression</target>
        </trans-unit>
        <trans-unit id="aeae939b51fa073aeb7c50b858bfbe0a984f939c" translate="yes" xml:space="preserve">
          <source>NewExpression</source>
          <target state="translated">NewExpression</target>
        </trans-unit>
        <trans-unit id="47cc38a5f6affc6fd9f8a8683e76dfafa574aed8" translate="yes" xml:space="preserve">
          <source>New_Tai_Lue</source>
          <target state="translated">New_Tai_Lue</target>
        </trans-unit>
        <trans-unit id="406e5a30366bef1c2bdc60eb13855fbae99b6877" translate="yes" xml:space="preserve">
          <source>Newline sequence for this system.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
