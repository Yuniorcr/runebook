<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="cypress">
    <body>
      <group id="cypress">
        <trans-unit id="31d89692f37495b7bb75f25ff0528e823c1631e0" translate="yes" xml:space="preserve">
          <source>When blacklisting a host, we use &lt;a href=&quot;../../api/utilities/minimatch&quot;&gt;&lt;code&gt;minimatch&lt;/code&gt;&lt;/a&gt; to check the host. When in doubt you can test whether something matches yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16003763e8573966735ce54517d077ae42ecffc2" translate="yes" xml:space="preserve">
          <source>When calling a command using &lt;code&gt;npm run&lt;/code&gt;, you need to pass the command&amp;rsquo;s arguments using the &lt;code&gt;--&lt;/code&gt; string. For example, if you have the following command defined in your &lt;code&gt;package.json&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14cdfd02eaca5bd1eb216d54967d879febd4b99" translate="yes" xml:space="preserve">
          <source>When chained to an existing series of commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5caffc35d4a1213097acb7a65cd30b5b15df4f" translate="yes" xml:space="preserve">
          <source>When changing properties on the real &lt;code&gt;window.location&lt;/code&gt; object, it forces the browser to navigate away. In Cypress, the object yielded is a plain object, so changing its properties will have no effect on navigation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05da3856ca90a1b95c1c56ea776b2085e4e8f627" translate="yes" xml:space="preserve">
          <source>When checking to see if the element is covered we always check its center coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ce36cd11ff3e3134435dacb44b6941da558e99" translate="yes" xml:space="preserve">
          <source>When clicking on &amp;ldquo;Next: &amp;lsquo;click&amp;rsquo;&amp;rdquo; at the top of the Command Log, the Command Log will run only the next command and pause again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ca250db1afeef232bbcf74c7e95c5a5271f553" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;.type()&lt;/code&gt; command, the Developer Tools console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fdc5a89d3daf875d648db6316b94abfe4b3824e" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;XHR Stub&lt;/code&gt; within the Command Log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fcb96045387c0717cfaf30802b0dcf629afd6f" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;assert&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af3d8dc628a93f649757d97f984d7629a555c54b" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;check&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65fc1aff44b69b35c7943eb3e070d86d8e764823" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;clear&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d975fab5bfd60f0cb5d191cebbedee82c1f738d0" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;clearCookie&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="477ab976c8f872311751fe01c8163b8af797f743" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;clearCookies&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef17a8986ea3ca81c9ff0d3f9c447dda8726ba47" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;clearLocalStorage&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b1674ede544386523bab31d8315e41af5f844f" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;click&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3c9d04e6fc32905d30fd36323dc0fe34efd44a" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;dblclick&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9eb5c687f5df5afeb9078af3ddf89143f38185a" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;document&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5dc4052cfe40dcc169f6aa87e8c604757d120b6" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;first&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c2d2f03882acdf432cf88f83c1a7cb2e9da502" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;getCookie&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39fcabb0bd3ab9832e6c2cd721a4598aaaa883c" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;getCookies&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81894ede58741c54197f76fe58e1605a0ce8f1ec" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;hash&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7517844ac99372d067cf7833fc1016703f550de7" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;invoke&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d7829d81816d8679c25fc224e08f906a66b8591" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;its&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00be97cd5b83b38a49205fa9267e8abc2b03257e" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;last&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c733f52b49724f3e9a0e73269d80646beb68d6" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;location&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173660185072281ca14e5d60ba3830556732e3aa" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;log&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee229a819f29501f539a21c49aebb9f8a4f82f54" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;next&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4522ea0b75e4161096f75b5691b08fb3be3aaa82" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;nextAll&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dc65816439910a1fdb2b544678610b8b611a153" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;nextUntil&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a79057304b82ba4ea1538d37169734c47e3001" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;not&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e19630036fd52fd63cb386a43337b6868899d309" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;parentsUntil&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="febe6acd04bfd13c751b366f88158bd45450fc46" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;prev&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb478172ddefec55ec2d7211517d7d8d8079d74" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;prevAll&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7264dcd612971034a9a210c151ad455cfee3e29" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;prevUntil&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741e529f1f694404122571965f2b927f30c9a8c4" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;reload&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6cbeac063d5e00af4dee2d19c08cce1d34847a" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;request&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71ff8ab7b6d2e9c21ca32ac2025017400577526" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;screenshot&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe0f144bdfdbf90cc670269a1ae55d648cc0383d" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;scrollTo&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1bd81bf7a1115b3e3612c46b970d7c3d2f83a5" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;select&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e102fc8a953479eee63c15c6c4d48f1f932b10c" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;setCookie&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c863507681bb34f190e170ac2c0cf476364750b1" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;siblings&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87ddfd4fb316f884ae8d8d9d2b57df1fa942f27" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;submit&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df747a134d126899c8c1d5ddda6a1a6899935e8" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;title&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288d23d0d2cc6b87ba17a97f78b69bdd953ecf50" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;trigger&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3429841644e4da9ed66a6f0da5444f3719c522f" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;type&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15cd47d6f420e7d9cc570221bd62f81bb002a239" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;uncheck&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffef035e6514f9b2280ddf1b6dbdfa26e9331e90" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;viewport&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38fd1f8970d2c3f84fd317ca8eae67dba1a34fe" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;visit&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea36c1557dfe1ae58d13267cd43a9626917e568" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;wait&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf8348ee033dbe4498942c48f7f8412baec8e40" translate="yes" xml:space="preserve">
          <source>When clicking on &lt;code&gt;window&lt;/code&gt; within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf07dceb8e1b6e00f3c75cbb9b711a9aca65043" translate="yes" xml:space="preserve">
          <source>When clicking on URL within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4a4dfbad88a3d6990360ad89544483a7c39c77" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;(stub-1)&lt;/code&gt; event within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d6f6d592fa6a7356ce0c01a253466e8c6f6dd9" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;blur&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4fbe6f5a5a78bc9fe898e9d7bef432b04df6f4" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;children&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7bee6f610904495d5455eb04161d0688a2d1ad1" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;clock&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d28e2f8013d659db25e1f60df37e25ea10e107e" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;closest&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c246b6c0a4a0c922f38210772e08eeb325115b" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;contains&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbefeb7b32cfb590d804bc6f5752d5b71a16f95" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;debug&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5cd6dcc477d625cf74998580f482bafbb372948" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;eq&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b364c643e0bbb6a0399ef8e57defe8f05377042b" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;exec&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="673f4d1bd2d53e8ae6336f20133eba9163d7907c" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;filter&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61270eff83cfb94f8b556e6741442758b206ba4e" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;find&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bb481096037d3f568f59cad02791c17ef643f2" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;focus&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41efc44478412337230a05bfa9d7ae9d3d512642" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;focused&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7fbb0d20d2a2ac9c76850992e9d7761212b919" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;get&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78cd843237a27cecfcf466a4867c87e5a22bae2c" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;go&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e0c28582f13289887793c6bbe1cb4855484828" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;parent&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab5af12c8ec63fdc02950296c7b746612ae3e13c" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;parents&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="143db253381df49f56fdb0f3a4c97828968afb54" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;readFile&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71f1a89ccb1c335a73cb5cfecd7a0ab3f234426" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;root&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b83ffcf2c1f88451cf5534bb86c60b0af8b66f4" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;scrollintoview&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37d9e724ee55697d253b9e977da19b7e571816a0" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;spy-1&lt;/code&gt; event within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77e4f4fa0f80a8b2146a99bcf6927103825c898" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;task&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2002ca671ef4f8ca6c72fecbe5fd86f04f5076" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;tick&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8631507315f979a7cb8a722fa3914bf2d807e122" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;within&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bf2ed81fb4efc3d6940e7189b162e8b86e74238" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;wrap&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3515b0d14efce8bf2b6eb7452ae40ee4180bd95" translate="yes" xml:space="preserve">
          <source>When clicking on the &lt;code&gt;writeFile&lt;/code&gt; command within the command log, the console outputs the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3f16093a85aa01f603fa3b93b50cc9d85a7f8c" translate="yes" xml:space="preserve">
          <source>When coming up with this value, we did a few experiments to find a speed that &amp;ldquo;feels&amp;rdquo; too fast for a user to interact with. You can always &lt;a href=&quot;../references/configuration#Animations&quot;&gt;increase or decrease this threshold&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc93394f74e45c570e0f6cf7122afd769779a5a4" translate="yes" xml:space="preserve">
          <source>When commands are clicked on and logged into the console from the Command Log, they now display their &amp;lsquo;yield&amp;rsquo; instead of &amp;lsquo;return&amp;rsquo;, since they really yield instead of return. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/612&quot;&gt;#612&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead4da1a68cc1ac4b3f759ecef5973e75218b224" translate="yes" xml:space="preserve">
          <source>When commands are retried and when they are not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ead84dbc327bbb7043faa556b02a6a77e3bb18" translate="yes" xml:space="preserve">
          <source>When conditional testing is a good choice for your tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb94349095c2d9171293adbf7de1100601aa47b7" translate="yes" xml:space="preserve">
          <source>When creating your own custom command, you can control how it appears and behaves in the Command Log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f09d527f376e934718253cdc7fa5cebe56724a" translate="yes" xml:space="preserve">
          <source>When debugging a failing test, follow these general principles to isolate the problem:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8510e936d7d1f0a73641c90e06497c0b210b42" translate="yes" xml:space="preserve">
          <source>When determining an unique selector it will automatically prefer elements with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641cb04088c3d30f1cc440812e3140d96171c317" translate="yes" xml:space="preserve">
          <source>When developing on Cypress, we now start the process through the CLI to bring it into parity with how it works when used in production. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/838&quot;&gt;#838&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21bb5dbf3de840505a35cd548dc431349b9f505" translate="yes" xml:space="preserve">
          <source>When doing so Cypress will automatically validate your subject to ensure it conforms to one of those types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801680050dc02a05a315eec0690be8feb234a36c" translate="yes" xml:space="preserve">
          <source>When downloading Cypress for the first time, the &lt;code&gt;cypress&lt;/code&gt; command line tool &lt;em&gt;does not&lt;/em&gt; read proxy settings from the Windows registry. If you need to configure a proxy for the installation to work, you must set the appropriate environment variables as described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e126e8a416a9c36acddae54ecb0124fbdc05b156" translate="yes" xml:space="preserve">
          <source>When editing &lt;code&gt;cypress.json&lt;/code&gt; file, the dead browser page no longer appears. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/492&quot;&gt;#492&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdea5321ed362d3b919e7df795d87cf6db6c3b9e" translate="yes" xml:space="preserve">
          <source>When editing the &lt;a href=&quot;../references/configuration&quot;&gt;&lt;code&gt;cypress.json&lt;/code&gt;&lt;/a&gt; file, you can use our &lt;a href=&quot;https://on.cypress.io/cypress.schema.json&quot;&gt;json schema file&lt;/a&gt; to get intelligent tooltips in your IDE for each configuration property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecef3f96a8711c3dd8f7845b2abb06ebe72886d5" translate="yes" xml:space="preserve">
          <source>When element is not in focus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4533044bf135309f6bd7635faca02f083ae309" translate="yes" xml:space="preserve">
          <source>When element&amp;rsquo;s are not visible due to being covered by another element, the error message now says what element is covering what element. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/611&quot;&gt;#611&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d0deba2fe6b732270972705e63dc68f49512ac" translate="yes" xml:space="preserve">
          <source>When finished, if necessary, remove the edited Test Runner version and reinstall the Cypress official version to get back to the official released code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff78527749f5d53a9a2734e0f089cdc64a2f0c0" translate="yes" xml:space="preserve">
          <source>When given a &lt;code&gt;key&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba04301b18d5a7543b8a72f4baa84955cc0fc2b" translate="yes" xml:space="preserve">
          <source>When given a &lt;code&gt;time&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b76aeab27bd0b5953443e7e4ffcf86cbfa37a551" translate="yes" xml:space="preserve">
          <source>When given an &lt;code&gt;alias&lt;/code&gt; argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04fb3a1f680374a1842ea92703f5640d06a5cdbe" translate="yes" xml:space="preserve">
          <source>When hover over commands element layers (2d transforms like rotation) are now taken into account and displayed correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9254e8941a93db40b432758c3c06c98b3d0b74" translate="yes" xml:space="preserve">
          <source>When hovering over each command, Cypress will automatically display the snapshot in the viewport dimensions that existed when that command ran.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b219fd10faccfdae13d954c8a005695a13fc37af" translate="yes" xml:space="preserve">
          <source>When in doubt, you can &lt;em&gt;always&lt;/em&gt; issue a regular &lt;a href=&quot;../../api/commands/get&quot;&gt;&lt;code&gt;cy.get()&lt;/code&gt;&lt;/a&gt; to query for the elements again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff038c2267dcdbfd92034fabc8cc6aa03106ae03" translate="yes" xml:space="preserve">
          <source>When it&amp;rsquo;s running in development you can easily:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f75182a4b2e33f5b3af6d70e1c4a4bf6c2a9622" translate="yes" xml:space="preserve">
          <source>When logging in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c35c94c099e7bdb8d1dc2ea1803a97ae2561b282" translate="yes" xml:space="preserve">
          <source>When main app window comes into focus, it will automatically focus other peripheral windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12cdc2db0d6d6d0a888f42e94b234d7912498371" translate="yes" xml:space="preserve">
          <source>When navigating directly to &lt;code&gt;localhost:2020&lt;/code&gt; outside of the new Cypress browser environment, a message now displays discouraging running tests outside of the new Cypress browser environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3456f2adb503f8fe1b4d811f67472a7bdae92b80" translate="yes" xml:space="preserve">
          <source>When no extension is passed to &lt;code&gt;cy.fixture()&lt;/code&gt;, Cypress will search for files with the specified name within the &lt;a href=&quot;../../guides/references/configuration#Folders-Files&quot;&gt;&lt;code&gt;fixturesFolder&lt;/code&gt;&lt;/a&gt; (which defaults to &lt;code&gt;cypress/fixtures&lt;/code&gt;) and resolve the first one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b941579fd8692f487bf033aa3ec4b7bc72d3ba81" translate="yes" xml:space="preserve">
          <source>When passed a &lt;code&gt;time&lt;/code&gt; argument &lt;code&gt;cy.wait()&lt;/code&gt; can be chained off of &lt;code&gt;cy&lt;/code&gt; or off another command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70249ff419463e8e1664c672068da9d4d6147bc5" translate="yes" xml:space="preserve">
          <source>When passed an &lt;code&gt;alias&lt;/code&gt; argument &lt;code&gt;cy.wait()&lt;/code&gt; requires being chained off of &lt;code&gt;cy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84079bf5c45276b13e190886766c3ba2daaffe7" translate="yes" xml:space="preserve">
          <source>When passing &lt;code&gt;fullPage&lt;/code&gt; to the &lt;code&gt;capture&lt;/code&gt; option, Cypress scrolls the application under test from top to bottom, takes screenshots at each point and stitches them together. Due to this, elements that are &lt;code&gt;position: fixed&lt;/code&gt; or &lt;code&gt;position: sticky&lt;/code&gt; will appear multiple times in the final screenshot. To prevent this, in most cases you can programmatically change the element to be &lt;code&gt;position: absolute&lt;/code&gt; before the screenshot and change it back afterwards like shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08180b990c137085f24a3a9de8eba84b01860ea" translate="yes" xml:space="preserve">
          <source>When passing a &lt;code&gt;string&lt;/code&gt; as the &lt;code&gt;url&lt;/code&gt;, the XHR&amp;rsquo;s URL must match &lt;em&gt;exactly&lt;/em&gt; what you&amp;rsquo;ve written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="378cc3abe7054d8b0c1a0186c3dcb3f9161c629e" translate="yes" xml:space="preserve">
          <source>When passing a RegExp as the &lt;code&gt;url&lt;/code&gt;, the XHR&amp;rsquo;s url will be tested against the regular expression and will apply if it passes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6407e014ea7a44a09a0c9ba587480846955944" translate="yes" xml:space="preserve">
          <source>When passing an array of aliases to &lt;a href=&quot;../../api/commands/wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt; there was an edge case where an incorrect error message was being thrown. The incorrect values were a combination of the wrong alias, the wrong timeout value, or the wrong request or response. Now Cypress correctly provides all 3 of these values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7632c625e18892d53bf74cdc79799fd95a0b90cb" translate="yes" xml:space="preserve">
          <source>When passing the option &lt;code&gt;{ force: true }&lt;/code&gt; to &lt;a href=&quot;../../api/commands/click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/type&quot;&gt;&lt;code&gt;.type()&lt;/code&gt;&lt;/a&gt;, we no longer attempt to scroll the element into view. We&amp;rsquo;ve also disabled the check that the element is in view before clicking or typing. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/553&quot;&gt;#553&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/537&quot;&gt;#537&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9fcb01986a3151c59909e120528b2e3aa69dbcf" translate="yes" xml:space="preserve">
          <source>When recording to the Dashboard Service, we now provide estimated durations per spec directly within the standard output, as long as the spec has had enough run history for this to be determined. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2276&quot;&gt;#2276&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d84d00ae20eafab83131fbe5add99c26271e45fe" translate="yes" xml:space="preserve">
          <source>When recording to the Dashboard we now more accurately collect commit details when it is missing from the local &lt;code&gt;git&lt;/code&gt; data. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2129&quot;&gt;#2129&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2073&quot;&gt;#2073&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cf0bf1ab55097c43398eb2086002aade6c83c2" translate="yes" xml:space="preserve">
          <source>When recording to the Dashboard, unrecognized warnings coming from the API server are now displayed in stdout. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/4489&quot;&gt;#4489&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6df0a5af4f1ba65f08a0e753f1281d60d3fe621" translate="yes" xml:space="preserve">
          <source>When requests are not stubbed, this guarantees that the &lt;em&gt;contract&lt;/em&gt; between your client and server is working correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ccdd8e32996fda17d33acbd519cc6d10ec0898e" translate="yes" xml:space="preserve">
          <source>When reverting the DOM, associated command elements are now automatically scrolled into view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19880ebae16cdb31a280fa67290cbf2a519b5837" translate="yes" xml:space="preserve">
          <source>When running &lt;code&gt;cypress run --record&lt;/code&gt; on forked PR&amp;rsquo;s, we now detect that the Record Key is missing and do not fail the build. We will display a warning, but continue running the tests. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1193&quot;&gt;#1193&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9ebdee5a017b52cb59397952ffa952eed4d038" translate="yes" xml:space="preserve">
          <source>When running &lt;code&gt;cypress run&lt;/code&gt; or in CI, Cypress will now automatically take a screenshot when a test fails. You can optionally turn this off by setting &lt;a href=&quot;configuration#Screenshots&quot;&gt;&lt;code&gt;screenshotOnHeadlessFailure&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;false&lt;/code&gt; in your configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82945ae5c789764007c9dad2d2fc05fe6ff0ee17" translate="yes" xml:space="preserve">
          <source>When running Cypress with &lt;code&gt;NODE_OPTIONS&lt;/code&gt; environment variables set, Cypress no longer issues an incorrect 0 exit code. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1676&quot;&gt;#1676&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be27f0732057e0f639c4b56ff8fb71a73aa8fe8c" translate="yes" xml:space="preserve">
          <source>When running a project in the new Cypress browser environment, if a new tab is opened, a message now displays discouraging the use of multiple tabs while testing. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/9&quot;&gt;#9&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be758852e49cb340d8318094804db4524fd946e6" translate="yes" xml:space="preserve">
          <source>When running in &lt;a href=&quot;https://circleci.com/&quot;&gt;Circle CI&lt;/a&gt;, we automatically export screenshots as artifacts which makes them available directly in their web UI. If you&amp;rsquo;re using Circle CI, you&amp;rsquo;ll be able to see screenshots without doing anything. If you&amp;rsquo;re using &lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;, you&amp;rsquo;ll need to upload artifacts to an &lt;code&gt;s3 bucket&lt;/code&gt;. This is a small slice of what is coming to help diagnose and understand errors in CI. Also in &lt;code&gt;0.17.0&lt;/code&gt; we will automatically scroll the tests and more intelligently and open / close test commands so you can visually see what happened. Currently you may not see the test command&amp;rsquo;s failure in the Command Log due to the view not scrolling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ad2aead278fa746de1240cef82e91260c50359" translate="yes" xml:space="preserve">
          <source>When running in interactive mode using &lt;a href=&quot;../guides/command-line#cypress-open&quot;&gt;&lt;code&gt;cypress open&lt;/code&gt;&lt;/a&gt; Cypress watches the filesystem for changes to your spec files. Soon after adding or updating a test Cypress will reload it and run all of the tests in that spec file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4736574368de6325a3b94619c7fddd98647909b" translate="yes" xml:space="preserve">
          <source>When running tests with non-string test titles, the screenshots now automatically stringify the test titles instead of throwing an error. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/4310&quot;&gt;#4310&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a1ab912b82a2b297a580d62c62b893e213fcda" translate="yes" xml:space="preserve">
          <source>When running through &lt;code&gt;cypress run&lt;/code&gt; or in &lt;a href=&quot;../../guides/guides/continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;, Cypress automatically takes a screenshot when a test fails. You can optionally turn this off by setting &lt;code&gt;screenshotOnRunFailure&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; within &lt;a href=&quot;../cypress-api/screenshot-api&quot;&gt;Cypress.Screenshot.defaults()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5043a6728d3566be3d99364b44c8c239413d4b" translate="yes" xml:space="preserve">
          <source>When running through the CLI, Cypress will now display an error if the server&amp;rsquo;s port is currently in use. Previously this would not output an error and the process would just hang.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8c2b829a087efc0dbfc17ea07ce36042054e28" translate="yes" xml:space="preserve">
          <source>When running with &lt;code&gt;cypress run&lt;/code&gt; we now run each spec file in isolation from others. We have rewritten our reporter to provide more details and provide a summary of the run at the bottom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96820865eba9c88ed15dc2755393b969247556d2" translate="yes" xml:space="preserve">
          <source>When starting a series of commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58c4133ebdb9ad0509c9bc0be623bebac5ed766" translate="yes" xml:space="preserve">
          <source>When starting up after being installed, Cypress will attempt to load the proxy configured in the Windows registry by default. &lt;a href=&quot;https://www.howtogeek.com/tips/how-to-set-your-proxy-settings-in-windows-8.1/&quot;&gt;Learn how to set your proxy settings system-wide in Windows.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b786af6d2599d9e10e26c483bd206961ee791ae5" translate="yes" xml:space="preserve">
          <source>When stubbing a response, you typically need to manage potentially large and complex JSON objects. Cypress allows you to integrate fixture syntax directly into responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="728d506383d7c4ff287770bd662f8a42e91fcc69" translate="yes" xml:space="preserve">
          <source>When stubs are created by calling the method &lt;code&gt;.withArgs(...)&lt;/code&gt; we also visually link these together.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b272d509460177374837244707495582159cb71a" translate="yes" xml:space="preserve">
          <source>When the cookie expires, specified in seconds since &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_time&quot;&gt;Unix Epoch&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4cad3e7ea25cfc9a592ff7d792a18579c8a1be5" translate="yes" xml:space="preserve">
          <source>When the current URL contains a hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495f5682d38540f1c3ffe3f9fe5aad571c564b92" translate="yes" xml:space="preserve">
          <source>When the current URL does not contain a hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7267b2ac003ba3aa0d3454f2c2a079586b70e1" translate="yes" xml:space="preserve">
          <source>When the error is fixed in your test file, your tests will automatically re-run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce3845ceaaae7533b66391da21acd439dc3b3316" translate="yes" xml:space="preserve">
          <source>When the running spec, the project, or the browser is closed while running tests, the &lt;code&gt;close&lt;/code&gt; event will be emitted. The preprocessor should do any necessary cleanup in this function, like closing the watcher when watching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac12d9dcf09bc198c3995ebf57459f800db84fa3" translate="yes" xml:space="preserve">
          <source>When the test calls &lt;code&gt;add(2, 3)&lt;/code&gt;, the counter increments inside the &amp;ldquo;add&amp;rdquo; function are executed, and the coverage object becomes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f2be8b24e4dd1d9d4a4bc0c9a89d6d42ac0720" translate="yes" xml:space="preserve">
          <source>When the url changes this is now logged as a page event, and its &lt;code&gt;onConsole&lt;/code&gt; logs what caused it to change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e537db1847b9f83392ca7284ce19c9e04c6fb0a" translate="yes" xml:space="preserve">
          <source>When the web application runs without the delay, it gets its items into the DOM before the Cypress command &lt;code&gt;cy.get('.todo-list li')&lt;/code&gt; runs. After the &lt;code&gt;cy.get()&lt;/code&gt; returns 2 items, the &lt;code&gt;.find()&lt;/code&gt; command just has to find the right label. Great.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17c460146884420ef0209a24a059dea7188fb1f" translate="yes" xml:space="preserve">
          <source>When they click the link labeled &lt;code&gt;type&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e14540fadbae9d8939f41e8be2235e4f3fa46a1" translate="yes" xml:space="preserve">
          <source>When true, automatically takes a screenshot when there is a failure in Run mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="953201de643f1b2feed9b255c60f710fd2d75e84" translate="yes" xml:space="preserve">
          <source>When true, prevents JavaScript timers (&lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;setInterval&lt;/code&gt;, etc) and CSS animations from running while the screenshot is taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a256ae1b12492a2827e095a3ef3123ac8c634c9f" translate="yes" xml:space="preserve">
          <source>When uncaught errors are thrown in hooks we now indicate Mocha&amp;rsquo;s behavior as part of the error - that it is skipping the remaining tests in the current suite. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/240&quot;&gt;#240&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63c9595d73e95be93d74ca3a8b5f4c7ce979b0fc" translate="yes" xml:space="preserve">
          <source>When used with an alias, &lt;code&gt;cy.wait()&lt;/code&gt; goes through two separate &amp;ldquo;waiting&amp;rdquo; periods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7b284874d2f7c9fe6ce1ff618a8d456e0592d2" translate="yes" xml:space="preserve">
          <source>When users navigate between pages with commands, like &lt;a href=&quot;../../api/commands/click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt;, Cypress now correctly waits until the age has finished loading before running more commands. Previously this waited for the &lt;code&gt;unload&lt;/code&gt; event, which did not fire synchronously, and ow we bind to &lt;code&gt;beforeunload&lt;/code&gt; which does. Additionally Cypress checks to ensure &lt;code&gt;beforeunload&lt;/code&gt; did not return a non-undefined value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d4c4ff71bd934c9fa52d70ba4611911d8491e7" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../../api/commands/select&quot;&gt;&lt;code&gt;.select()&lt;/code&gt;&lt;/a&gt; on a select with multiple options with the same value, we now properly set &lt;code&gt;selectedIndex&lt;/code&gt; and &lt;code&gt;selectedOptions&lt;/code&gt; on the &lt;code&gt;select&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/554&quot;&gt;#554&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7038282aee174018d5e684492933319a62ce4b8e" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;this.users&lt;/code&gt; we have access to it synchronously, whereas when using &lt;code&gt;cy.get('@users')&lt;/code&gt; it becomes an asynchronous command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d68d72d4181e1b4359ac07b37fc7ba41c74a6e7" translate="yes" xml:space="preserve">
          <source>When using a callback function with &lt;a href=&quot;../../api/commands/should&quot;&gt;&lt;code&gt;.should()&lt;/code&gt;&lt;/a&gt;, be sure that the entire function can be executed multiple times without side effects. Cypress applies its &lt;a href=&quot;retry-ability&quot;&gt;retry&lt;/a&gt; logic to these functions: if there&amp;rsquo;s a failure, it will repeatedly rerun the assertions until the timeout is reached. That means your code should be retry-safe. The technical term for this means your code must be &lt;strong&gt;idempotent&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd00944f31b6aa9b2e9bbd8de4f1e5cc50e4465" translate="yes" xml:space="preserve">
          <source>When using a callback function with &lt;code&gt;.should()&lt;/code&gt; or &lt;code&gt;.and()&lt;/code&gt;, on the other hand, there is special logic to rerun the callback function until no assertions throw within it. You should be careful of side affects in a &lt;code&gt;.should()&lt;/code&gt; or &lt;code&gt;.and()&lt;/code&gt; callback function that you would not want performed multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd8e99d7a1f0c4490a0d6a34076a8e3319a92c5" translate="yes" xml:space="preserve">
          <source>When using aliases with DOM elements, Cypress will query the DOM again if the previously aliased DOM element has gone stale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb50bc6152854cf462d82039f015fed762fab55" translate="yes" xml:space="preserve">
          <source>When using special character sequences, it&amp;rsquo;s possible to activate modifier keys and type key combinations, such as &lt;code&gt;CTRL + R&lt;/code&gt; or &lt;code&gt;SHIFT + ALT + Q&lt;/code&gt;. The modifier(s) remain activated for the duration of the &lt;code&gt;.type()&lt;/code&gt; command, and are released when all subsequent characters are typed, unless &lt;a href=&quot;type#Options&quot;&gt;&lt;code&gt;{release: false}&lt;/code&gt;&lt;/a&gt; is passed as an &lt;a href=&quot;type#Key-Combinations&quot;&gt;option&lt;/a&gt;. A &lt;code&gt;keydown&lt;/code&gt; event is fired when a modifier is activated and a &lt;code&gt;keyup&lt;/code&gt; event is fired when it is released.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5040ce5d72a5dad196e1af18f360ea344de26466" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--record&lt;/code&gt; flag while running your tests, videos are processed, compressed, and uploaded to the &lt;a href=&quot;../dashboard/introduction&quot;&gt;Dashboard Service&lt;/a&gt; after every spec file runs, successful or not. To change this behavior to only process videos in the case that tests fail, set the &lt;a href=&quot;../references/configuration#Videos&quot;&gt;&lt;code&gt;videoUploadOnPasses&lt;/code&gt;&lt;/a&gt; configuration option to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67dc8d993be9d9bb9a2023aec7b5e5a0390ddc8a" translate="yes" xml:space="preserve">
          <source>When using the new &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;&amp;ndash;parallel&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt;&lt;code&gt;&amp;ndash;group&lt;/code&gt;&lt;/a&gt; feature, we now visually indicate that to you in the standard output when recording. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2275&quot;&gt;#2275&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b296e6af02863fcec9a59a6c3bf61e48f19cecf0" translate="yes" xml:space="preserve">
          <source>When viewing the Test Runner&amp;rsquo;s main window at its smallest size, the header text no longer incorrectly wraps. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/86&quot;&gt;#86&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282f40905cefe5e210f76ad839710dd0879285ea" translate="yes" xml:space="preserve">
          <source>When we check &lt;code&gt;glob&lt;/code&gt; patterns with &lt;a href=&quot;https://github.com/isaacs/minimatch&quot;&gt;minimatch&lt;/a&gt;, by default Cypress uses sets &lt;code&gt;matchBase&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. You can override this option in &lt;a href=&quot;server&quot;&gt;&lt;code&gt;cy.server()&lt;/code&gt;&lt;/a&gt; options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82047af0b1f625497e25096bc0711853e858956" translate="yes" xml:space="preserve">
          <source>When we reference &lt;code&gt;@firstTodo&lt;/code&gt;, Cypress checks to see if all of the elements it is referencing are still in the DOM. If they are, it returns those existing elements. If they aren&amp;rsquo;t, Cypress replays the commands leading up to the alias definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6418e7950235a73f979a678a9ba731fe32dcb073" translate="yes" xml:space="preserve">
          <source>When we run Cypress with &lt;a href=&quot;https://github.com/istanbuljs/babel-plugin-istanbul&quot;&gt;&lt;code&gt;babel-plugin-istanbul&lt;/code&gt;&lt;/a&gt; included and inspect the &lt;code&gt;window.__coverage__&lt;/code&gt; object in the &lt;strong&gt;spec iframe&lt;/strong&gt;, we should see the coverage information for the application source files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5e1233e773a8a4ada9a0b18de680700472e8538" translate="yes" xml:space="preserve">
          <source>When we run the same tests with parallelization, Cypress uses its &lt;a href=&quot;#Balance-strategy&quot;&gt;balance strategy&lt;/a&gt; to order to specs to run based on the spec&amp;rsquo;s previous run history. During the same CI run as above, we ran &lt;em&gt;all&lt;/em&gt; tests again, but this time with parallelization across 2 machines. This job was named &lt;code&gt;2x-electron&lt;/code&gt; in the project&amp;rsquo;s &lt;a href=&quot;https://github.com/cypress-io/cypress-example-kitchensink/blob/master/circle.yml&quot;&gt;circle.yml&lt;/a&gt; file and it finished in &lt;strong&gt;59 seconds&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c11e3106191276cf8898a244f72b21c0172d43" translate="yes" xml:space="preserve">
          <source>When we say &lt;em&gt;JavaScript Redirects&lt;/em&gt; we are talking about any kind of code that does something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="452c392cc45f8e62d91228fbdd56acc9639d1a5a" translate="yes" xml:space="preserve">
          <source>When we say &lt;em&gt;guard&lt;/em&gt;, this usually means:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4a1223dc41882a28829dd9345d56dc6fd26868" translate="yes" xml:space="preserve">
          <source>When working with &lt;code&gt;stubs&lt;/code&gt; or &lt;code&gt;spies&lt;/code&gt; you&amp;rsquo;ll regularly want to use those when writing Chai assertions. Cypress bundles in Sinon-Chai which extends Chai allowing you to &lt;a href=&quot;https://github.com/cypress-io/sinon-chai&quot;&gt;write assertions&lt;/a&gt; about &lt;code&gt;stubs&lt;/code&gt; and &lt;code&gt;spies&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="173bce22d2286cf3cac66ffbfeec799b516ece0e" translate="yes" xml:space="preserve">
          <source>When working with local &lt;code&gt;https&lt;/code&gt; in webpack, set an environment variable to allow local certificate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146dd76001da477c4731e28b9699450829896b6d" translate="yes" xml:space="preserve">
          <source>When writing integration tests, you will likely work a lot with the DOM. Cypress brings in Chai-jQuery, which automatically extends Chai with specific jQuery chainer methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e672b327d99eae9fb8d2c06880494c99bcb1dfee" translate="yes" xml:space="preserve">
          <source>When writing unit tests, or even in integration-like tests, you often need to ability to stub and spy methods. Cypress includes two methods, &lt;a href=&quot;../../api/commands/stub&quot;&gt;&lt;code&gt;cy.stub()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/spy&quot;&gt;&lt;code&gt;cy.spy()&lt;/code&gt;&lt;/a&gt; that return Sinon stubs and spies, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8f0bdeacf845162ac6aedb4bd8a5d551852870" translate="yes" xml:space="preserve">
          <source>When you chain &lt;code&gt;.should()&lt;/code&gt; on a DOM-based command, the default &lt;code&gt;.should('exist')&lt;/code&gt; assertion is skipped. This may result in an unexpected behavior such as negative assertions passing even when the element doesn&amp;rsquo;t exist in the DOM. See &lt;a href=&quot;../../guides/core-concepts/introduction-to-cypress#Default-Assertions&quot;&gt;Default Assertions&lt;/a&gt; for more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57940cc82ad21e9a682ebeca6c60ea8fa463998" translate="yes" xml:space="preserve">
          <source>When you click on a stub or spy, we also output &lt;strong&gt;remarkably&lt;/strong&gt; helpful debugging information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="458d2770acaa2009139d707ae1bf3a38a96e8cd7" translate="yes" xml:space="preserve">
          <source>When you edit the selector, it will show you how many elements match and highlight those elements in your app.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4874c5aeb5a016ca7511b034fd2d7b5e3f176dd8" translate="yes" xml:space="preserve">
          <source>When you force an event to happen we will:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4892340cd1e056b060f23cb37e0a3f1c66ee08b3" translate="yes" xml:space="preserve">
          <source>When you invite users (from the Dashboard) we will &lt;strong&gt;automatically&lt;/strong&gt; whitelist them. This means you can invite all of your teammates (or anyone else). They can start using Cypress without talking to us.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07dfa7f252b3d76547221eff0ca8b668a8486ad9" translate="yes" xml:space="preserve">
          <source>When you open a Cypress project, clicking on the &lt;em&gt;Settings&lt;/em&gt; tab will display the resolved configuration to you. This makes it easy to understand and see where different values came from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1c501c166f2995371e56c8428949ccb0a7f2816" translate="yes" xml:space="preserve">
          <source>When you run tests in Cypress, we launch a browser for you. This enables us to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2030d32b8c1e80dba91fa5ab9c1c39763c8f9951" translate="yes" xml:space="preserve">
          <source>When you run the Cypress tests now, you should see a few commands after the tests finish. We have highlighted these commands using a green rectangle below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f828aa43ac83333a9828c9db9d6bcc014dc2a7" translate="yes" xml:space="preserve">
          <source>When you start a &lt;a href=&quot;../../api/commands/server&quot;&gt;&lt;code&gt;cy.server()&lt;/code&gt;&lt;/a&gt; and define &lt;a href=&quot;../../api/commands/route&quot;&gt;&lt;code&gt;cy.route()&lt;/code&gt;&lt;/a&gt; commands, Cypress displays this under &amp;ldquo;Routes&amp;rdquo; in the Command Log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16fa569b34118cb9b27d09b87df8ea3c60c5f3f" translate="yes" xml:space="preserve">
          <source>When you start running your tests, Cypress does not know the url of the app you plan to test. So, Cypress initially opens on &lt;code&gt;https://localhost&lt;/code&gt; + a random port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a9afbc1a5811ad6bdacb237d95f6ae8689be1e9" translate="yes" xml:space="preserve">
          <source>When you stub requests, you can automatically control their response &lt;code&gt;headers&lt;/code&gt;. This is useful when you want to send back meta data in the &lt;code&gt;headers&lt;/code&gt;, such as &lt;em&gt;pagination&lt;/em&gt; or &lt;em&gt;token&lt;/em&gt; information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449aafde66ca4c743e6ce897116811ed77f28832" translate="yes" xml:space="preserve">
          <source>When you submit a regular HTML form, the browser will follow this &lt;code&gt;HTTP(s) request&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e298e9358f1e8249224c2a944bc63ec1025ee4" translate="yes" xml:space="preserve">
          <source>When you use aliasing with the &lt;a href=&quot;../../api/commands/as&quot;&gt;&lt;code&gt;.as()&lt;/code&gt;&lt;/a&gt; command, we also correlate those aliases with the calls. This works identically to aliasing a &lt;a href=&quot;../../api/commands/route&quot;&gt;&lt;code&gt;cy.route()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f73347f2fcb67ec2aa85a6aecdb057caa6ace6" translate="yes" xml:space="preserve">
          <source>When you use the &lt;a href=&quot;test-runner#Command-Log&quot;&gt;Command Log&lt;/a&gt; to hover over a command, you&amp;rsquo;ll notice that we will always scroll the element the command was applied to into view. Please note that this is &lt;em&gt;NOT&lt;/em&gt; using the same algorithms that we described above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506aca18dacfbfb7310cd1d69cef3bdef0b7dcbe" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re writing tests for a very &lt;strong&gt;specific feature&lt;/strong&gt;, you &lt;em&gt;should&lt;/em&gt; use your UI to test it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a700b1aeb514624ce9adb2e8ff46ae0e947160b" translate="yes" xml:space="preserve">
          <source>When your application navigates to a superdomain outside of the current origin-policy, Cypress is unable to communicate with it, and thus fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277086799c1afca418091d7e2865e412f48c0f4d" translate="yes" xml:space="preserve">
          <source>When your tests are running, you can use the &lt;a href=&quot;../../api/cypress-api/env&quot;&gt;&lt;code&gt;Cypress.env&lt;/code&gt;&lt;/a&gt; function to access the values of your environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b0b44ffbfda0ae3f57b0f61e636c370df10139" translate="yes" xml:space="preserve">
          <source>Whenever Cypress cannot interact with an element, it could fail at any of the above steps. You will usually get an error explaining why the element was not found to be actionable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9743294032a19e222eaf512d5727e0389d1cd18b" translate="yes" xml:space="preserve">
          <source>Whenever commands have an assertion they will not resolve until their associated assertions pass. This enables you to describe the state of your application without having to worry about when it gets there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa43e30ebdda3842a6a65726041a1ccddfe86a6" translate="yes" xml:space="preserve">
          <source>Whenever you encounter errors in the CLI we&amp;rsquo;ll output helpful debugging information at the bottom of each error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e740625c858f61fda2fb28b6c3776f0853f5e22" translate="yes" xml:space="preserve">
          <source>Whenever you modify &lt;code&gt;cypress.json&lt;/code&gt;, Cypress will automatically reboot itself and kill any open browsers. This is normal. Just click on the spec file again to relaunch the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4393fb1a13539272944f9ed0f8f72b68bf967eeb" translate="yes" xml:space="preserve">
          <source>Whenever you return an object from your &lt;code&gt;pluginFile&lt;/code&gt;, Cypress will take this and &amp;ldquo;diff&amp;rdquo; it against the original configuration, and automatically set the resolved values to point to what you returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a373643eddcc8c36c49dd17d55ccd07d141072a" translate="yes" xml:space="preserve">
          <source>Whenever you start a server and add routes, Cypress will display a new Instrument Log called &lt;em&gt;Routes&lt;/em&gt;. It will list the routing table in the Instrument Log, including the &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;stubbed&lt;/code&gt;, &lt;code&gt;alias&lt;/code&gt; and number of matched requests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b4ef170f5b9e2fa99e22be1a39654479504895" translate="yes" xml:space="preserve">
          <source>Whenever you use a callback function, its return value is always ignored. Cypress always forces the command to yield the value from the previous cy command&amp;rsquo;s yield (which in the example below is &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8819e1ad4c465bb36863dc4c5672a014cacedb86" translate="yes" xml:space="preserve">
          <source>Whenever you&amp;rsquo;re using a child command you likely want to use &lt;code&gt;cy.wrap()&lt;/code&gt; on the subject. Wrapping it enables you to immediately use more Cypress commands on that subject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="672ad5ac7443e25239333ea7293ed6657db4b882" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;HH&lt;/code&gt; is 00-23, &lt;code&gt;mm&lt;/code&gt; is 00-59, &lt;code&gt;ss&lt;/code&gt; is 00-59, and &lt;code&gt;SSS&lt;/code&gt; is 000-999.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e2ae165d816036f6f6f6d3865025f475753c2f" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;W&lt;/code&gt; is the literal character &amp;lsquo;W&amp;rsquo; and &lt;code&gt;ww&lt;/code&gt; is the number of the week (01-53).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a86f970f8b16904d6a7c10e6bb23b12406f5a6" translate="yes" xml:space="preserve">
          <source>Where Cypress will automatically save the video of the test run when tests run with &lt;code&gt;cypress run&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f732ea59d82bc6caa095aa8e040d51307d477408" translate="yes" xml:space="preserve">
          <source>Where to put screenshot configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16135e9ac659c8d23dbeeab42fad1fa2c419cd91" translate="yes" xml:space="preserve">
          <source>Whether Chrome Web Security for &lt;code&gt;same-origin policy&lt;/code&gt; and &lt;code&gt;insecure mixed content&lt;/code&gt; is enabled. &lt;a href=&quot;../guides/web-security&quot;&gt;Read more about this here&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e90f9f4f04fed1459fadb1ceb107bf248263594" translate="yes" xml:space="preserve">
          <source>Whether Cypress should automatically retry status code errors under the hood. Cypress will retry a request up to 4 times if this is set to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdeb900e4e6b5be8de4445258768661404d3475d" translate="yes" xml:space="preserve">
          <source>Whether Cypress should automatically retry transient network errors under the hood. Cypress will retry a request up to 4 times if this is set to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41736d0931c53e387928e0ba4671acaefc71206a" translate="yes" xml:space="preserve">
          <source>Whether Cypress will capture a video of the tests run with &lt;code&gt;cypress run&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8115c0785217c5bf02d8a4bcb7a02c997793053b" translate="yes" xml:space="preserve">
          <source>Whether Cypress will process, compress, and upload videos to the &lt;a href=&quot;../dashboard/introduction&quot;&gt;Dashboard&lt;/a&gt; even when all tests in a spec file are passing. This only applies when recording your runs to the Dashboard. Turn this off if you&amp;rsquo;d like to only upload the spec file&amp;rsquo;s video when there are failing tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761b99b6c0a551c6ac694cbdf99a49fca065cd15" translate="yes" xml:space="preserve">
          <source>Whether Cypress will search for and replace obstructive JS code in &lt;code&gt;.js&lt;/code&gt; or &lt;code&gt;.html&lt;/code&gt; files. &lt;a href=&quot;#modifyObstructiveCode&quot;&gt;Please read the notes for more information on this setting.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44463933898448ac71fed945bf07b878b5a4c26" translate="yes" xml:space="preserve">
          <source>Whether Cypress will trash assets within the &lt;code&gt;screenshotsFolder&lt;/code&gt; and &lt;code&gt;videosFolder&lt;/code&gt; before tests run with &lt;code&gt;cypress run&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2cb21e895a5a745b6ec0fbc20abc4d8c70a44ca" translate="yes" xml:space="preserve">
          <source>Whether Cypress will watch and restart tests on test file changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e09d64c50c51e6cd0394f2dbb150c0701af681" translate="yes" xml:space="preserve">
          <source>Whether cookie debugging should be enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c321c1f09789d9f18547c7ac48c679d1660a47e7" translate="yes" xml:space="preserve">
          <source>Whether or not you choose to stub responses, Cypress enables you to declaratively &lt;a href=&quot;../../api/commands/wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt; for requests and their responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61bcc4fd11e49e5bad66f31fd5f7b69ad45f057" translate="yes" xml:space="preserve">
          <source>Whether the cookie is a secure cookie</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940a089ba1b31a0cf3683acd601865036a91262f" translate="yes" xml:space="preserve">
          <source>Whether the cookie is an HTTP only cookie</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7003e8472f9982a9668f5bfc7481ea0a542cfdd0" translate="yes" xml:space="preserve">
          <source>Whether the event bubbles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973a7ee6bcf819fdc50de3b3d5d8a48450efe210" translate="yes" xml:space="preserve">
          <source>Whether the event is cancelable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566e741e52efc26610171f25c2555c7813b1e764" translate="yes" xml:space="preserve">
          <source>Whether to accept the &lt;code&gt;gzip&lt;/code&gt; encoding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac1703f3587a706b72a5046adfde0e823f3e31f" translate="yes" xml:space="preserve">
          <source>Whether to automatically follow redirects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455fdc212a434e553b1eaee2316881f999d92170" translate="yes" xml:space="preserve">
          <source>Whether to automatically take screenshots when there are run failures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffe0a2d063bf3de6022c75671348b48dab72193" translate="yes" xml:space="preserve">
          <source>Whether to convert the &lt;code&gt;body&lt;/code&gt; values to url encoded content and set the &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; header</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5825390ed7f2a186453f401d8a3bf1d5a389956b" translate="yes" xml:space="preserve">
          <source>Whether to disable JavaScript timers and CSS animations when taking the screenshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a20434ef0f424cd34adbf62bc5a50efebd38d0" translate="yes" xml:space="preserve">
          <source>Whether to fail on response codes other than &lt;code&gt;2xx&lt;/code&gt; and &lt;code&gt;3xx&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbd265fb13acbb0a9279638ca3c848375fc68423" translate="yes" xml:space="preserve">
          <source>Whether to record the test run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867373d406c06b9c70a72c9eaacd5e8069b658eb" translate="yes" xml:space="preserve">
          <source>Whether to reload the current page without using the cache. &lt;code&gt;true&lt;/code&gt; forces the reload without cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29a023c33165226876793f689ff1210618eaeba6" translate="yes" xml:space="preserve">
          <source>Whether to scale the app to fit into the browser viewport. This is always coerced to &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;runner&lt;/code&gt; captures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f34456bcdc57b0dbe9e97c8f761264c1a6d1a2f" translate="yes" xml:space="preserve">
          <source>Whether to scale the app to fit into the browser viewport. This is always coerced to &lt;code&gt;true&lt;/code&gt; when &lt;code&gt;capture&lt;/code&gt; is &lt;code&gt;runner&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc45ac18df39651c64e978994345d4ac53a2b95f" translate="yes" xml:space="preserve">
          <source>Whether to scale your application under test in the screenshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c18664bd72425aeb26f645bf90139bf863fe4a1" translate="yes" xml:space="preserve">
          <source>Whether to wait for elements to finish animating before executing commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b95643d856efb96bcbd48fb228d61ee18c4da2" translate="yes" xml:space="preserve">
          <source>Whether to wait for the Command Log to synchronize before taking the screenshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423b4b1a2ceb78e00f2cc630388766057b470a4c" translate="yes" xml:space="preserve">
          <source>Whether you are testing a chat application or anything else - what you are really asking about is testing collaboration. But, &lt;strong&gt;you don&amp;rsquo;t need to recreate the entire environment in order to test collaboration with 100% coverage&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86306d968b9f21296d4fc02aaef110dd7cc0138b" translate="yes" xml:space="preserve">
          <source>Whether you install an npm module, or just want to write your own code - you should do all of that in this file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad017d00c4fda6d44729823c48bc44ed65111e95" translate="yes" xml:space="preserve">
          <source>Which libraries Cypress includes to provide typical testing functionality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a80de518cb64b399db0b9c36a3ea47734d4c5b" translate="yes" xml:space="preserve">
          <source>Which parts of the Test Runner to capture. This value is ignored for element screenshot captures. Valid values are &lt;code&gt;viewport&lt;/code&gt;, &lt;code&gt;fullPage&lt;/code&gt;, or &lt;code&gt;runner&lt;/code&gt;. When &lt;code&gt;viewport&lt;/code&gt;, the application under test is captured in the current viewport. When &lt;code&gt;fullPage&lt;/code&gt;, the application under test is captured in its entirety from top to bottom. When &lt;code&gt;runner&lt;/code&gt;, the entire browser viewport, including the Cypress Command Log, is captured. For screenshots automatically taken on test failure, capture is always coerced to &lt;code&gt;runner&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f650885846b4af47d67dada2754d97d36f026c2" translate="yes" xml:space="preserve">
          <source>Which parts of the Test Runner to capture. This value is ignored for element screenshot captures. Valid values are &lt;code&gt;viewport&lt;/code&gt;, &lt;code&gt;fullPage&lt;/code&gt;, or &lt;code&gt;runner&lt;/code&gt;. When &lt;code&gt;viewport&lt;/code&gt;, your application under test is captured in the current viewport. When &lt;code&gt;fullPage&lt;/code&gt;, your application under test is captured in its entirety from top to bottom. When &lt;code&gt;runner&lt;/code&gt;, the entire browser viewport, including the Cypress Command Log, is captured. For screenshots automatically taken on test failure, capture is always coerced to &lt;code&gt;runner&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd03555e1b8d55dc857d849d83c7454e88068532" translate="yes" xml:space="preserve">
          <source>Which parts of the screen to capture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7cb006b71ab32c9adaee73ac1284ff25c1f0d24" translate="yes" xml:space="preserve">
          <source>Which, if any, elements to black out when taking the screenshot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1729a8085c44b25fb561a990da61878f16ef97a" translate="yes" xml:space="preserve">
          <source>While Cypress allows to configure where your tests, fixtures, and support files are located, if you&amp;rsquo;re starting your first project, we recommend you use the above structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a93ce68c968dc7125affffacae501a5a4047874" translate="yes" xml:space="preserve">
          <source>While Mocha provides us a framework to structure our tests, Chai gives us the ability to easily write assertions. Chai gives us readable assertions with excellent error messages. Cypress extends this, fixes several common pitfalls, and wraps Chai&amp;rsquo;s DSL using &lt;a href=&quot;../core-concepts/introduction-to-cypress#Assertions&quot;&gt;subjects&lt;/a&gt; and the &lt;a href=&quot;../../api/commands/should&quot;&gt;&lt;code&gt;.should()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c8700511492854c68a0c9d89a62e7cd250dfeb" translate="yes" xml:space="preserve">
          <source>While at first it may seem like these are strict limitations in Cypress - we think you will soon realize that many of these boundaries are actually &lt;strong&gt;good&lt;/strong&gt; to have. In a sense they prevent you from writing bad, slow, or flaky tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da74082104c885de8ab0dcfddc44918a9c3ac8bc" translate="yes" xml:space="preserve">
          <source>While most commands time out after a few seconds, other specialized commands that expect particular things to take much longer like &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; will naturally wait longer before timing out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda4789187c7669b48726cb79d25043d3d3a6776" translate="yes" xml:space="preserve">
          <source>While outside the scope of this article, you could test a chat application using the following principles. Each one will incrementally introduce more collaboration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7183b07b498319babd23533a6ce57f2cffff0f" translate="yes" xml:space="preserve">
          <source>While stubbing is great, it means that you don&amp;rsquo;t have the guarantees that these response payloads actually match what the server will send. However, there are still many valid ways to get around this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7becc257e6e19366bd3a59650863a33e04432d8" translate="yes" xml:space="preserve">
          <source>While technically this runs fine - this is really excessive, and not performant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8025589e3477db14232e01f31d204322d647cedc" translate="yes" xml:space="preserve">
          <source>While the above checks are super helpful at finding situations that would prevent your users from interacting with elements - sometimes they can get in the way!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5eebab8c3c2d5c8ffd21b4c0c4165f87f0d345" translate="yes" xml:space="preserve">
          <source>While there are many new and powerful capabilities of Cypress - there are also important trade-offs that we&amp;rsquo;ve made in making this possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030af3b6b1a93102000e8ceb98520a6ecb539e94" translate="yes" xml:space="preserve">
          <source>While there&amp;rsquo;s nothing really &lt;em&gt;wrong&lt;/em&gt; with this approach, it does add a lot of complexity. You will be battling synchronizing the state between your server and your browser - and you&amp;rsquo;ll always need to set up / tear down this state before tests (which is slow).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c164f96b0645923ff8f534cf0d60d320e76ffe36" translate="yes" xml:space="preserve">
          <source>While there&amp;rsquo;s nothing wrong with writing out the full path to the Cypress executable each time, it&amp;rsquo;s much easier and clearer to add Cypress commands to the &lt;code&gt;scripts&lt;/code&gt; field in your &lt;code&gt;package.json&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38c60e0a1adf08ebf78c05479d58b5b5def173b" translate="yes" xml:space="preserve">
          <source>While this may take a bit more work than other options - it yields you the most amount of flexibility and the ability to manage configuration however you&amp;rsquo;d like.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318012b6b9386f9280c9fe773d40c9a281ab052f" translate="yes" xml:space="preserve">
          <source>While this new Chromium application passes our internal tests, it may crop up other regressions we aren&amp;rsquo;t aware of. If you&amp;rsquo;re experiencing different behavior in CI vs running locally in Chrome, this may be an indication of these.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e784b215a40267a4bf70b260acb26b69eda73d" translate="yes" xml:space="preserve">
          <source>While this works in practice, it&amp;rsquo;s often indicative of an anti-pattern. You almost never need to return both a promise and also invoke &lt;code&gt;cy&lt;/code&gt; commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31babd36f691189fb28c03c015383588f9c122f6" translate="yes" xml:space="preserve">
          <source>While working in the Cypress Test Runner you can always restart / refresh while in the middle of a test. When that happens, code in an &lt;code&gt;after&lt;/code&gt; won&amp;rsquo;t execute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f4bd02f81f747b5ee22bb7ac5b19bd3f551693f" translate="yes" xml:space="preserve">
          <source>While you certainly &lt;em&gt;can&lt;/em&gt; test an application that&amp;rsquo;s already deployed, that&amp;rsquo;s not really the &lt;strong&gt;sweet spot&lt;/strong&gt; of Cypress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b0a7459609b07974093e75a6727d3e1431dc35" translate="yes" xml:space="preserve">
          <source>While you&amp;rsquo;ll still receive all of the regular HTML / JS / CSS assets from your server and you&amp;rsquo;ll continue to &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; it in the same way - you can instead &lt;strong&gt;stub&lt;/strong&gt; the JSON responses coming from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9531a11970da0f9e11c5c55654095ad4e88d319d" translate="yes" xml:space="preserve">
          <source>Whitelist Array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd2035ad66f2e21de8e62528e9f8a4c52d2790a" translate="yes" xml:space="preserve">
          <source>Whitelist Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9dd85fbff2ef7f6674b6f8a8eb1c6dee6c03f0" translate="yes" xml:space="preserve">
          <source>Whitelist RegExp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f0b0527ee0ebc1a2ff9b229af041a4ed553e62" translate="yes" xml:space="preserve">
          <source>Whitelist String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc81ad963218eef675afa431ee14f7f4220cf38" translate="yes" xml:space="preserve">
          <source>Whitelist accepts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee022eabf15b7cb10facff1a865cf41857bfcf02" translate="yes" xml:space="preserve">
          <source>Whitelisted &lt;code&gt;.coffee&lt;/code&gt;, &lt;code&gt;.scss&lt;/code&gt;, &lt;code&gt;.less&lt;/code&gt; XHR&amp;rsquo;s from displaying in the Command Log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe879d21f706f263f7f4543c84ee96394c72498" translate="yes" xml:space="preserve">
          <source>Whitelisted &lt;code&gt;autoScrollingEnabled&lt;/code&gt; to be saved in &lt;code&gt;state.json&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2476&quot;&gt;#2476&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8257782e5b970997cb30b2e4555a9ed3b9ea92c1" translate="yes" xml:space="preserve">
          <source>Whitelisting assets which should never be stubbed has been improved. Now &lt;code&gt;.jsx&lt;/code&gt; templates pass-through correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55223cfadcd781467bde322006948a79cad1967" translate="yes" xml:space="preserve">
          <source>Who uses Cypress?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f97207534c18993571e797428ce3b613fc3f5e9" translate="yes" xml:space="preserve">
          <source>Why Cypress?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2df07a78268820f1ef2bccd097800f342fb3474" translate="yes" xml:space="preserve">
          <source>Why are some commands &lt;em&gt;NOT&lt;/em&gt; retried?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e964dd0c8407ffaad4f71f8eaaffe744fcd57473" translate="yes" xml:space="preserve">
          <source>Why did you change the default test folder to be &lt;code&gt;cypress/integration&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b59ddd63da244b2d99831c6b7dcc030b333865f" translate="yes" xml:space="preserve">
          <source>Why is it &lt;code&gt;Cypress.config&lt;/code&gt; and not &lt;code&gt;cy.config&lt;/code&gt;?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7293e54a3e598247b88fa56e517c94eb77af8a95" translate="yes" xml:space="preserve">
          <source>Why you did this pattern in unit tests:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="020b1ee0de3bdee33ecaaf21ee0c1fc055674cbb" translate="yes" xml:space="preserve">
          <source>Why you rarely need to use variables with Cypress</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec6320fd4ac1f18d69ab1372ae6b042eb0b157b" translate="yes" xml:space="preserve">
          <source>Why you shouldn&amp;rsquo;t do this in Cypress:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a20d1252b03398a7abebb2301afbd9533fad8c6" translate="yes" xml:space="preserve">
          <source>Why? Because if the DOM is not going to change after the &lt;code&gt;load&lt;/code&gt; event occurs, then it can accurately represent a stable state of truth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b6cf092e908b7236a5ab86844a3537cd596ca0" translate="yes" xml:space="preserve">
          <source>Why? Because if you refresh Cypress in the middle of the test - you will have built up partial state in the database, and your custom &lt;code&gt;cy.resetDb()&lt;/code&gt; function &lt;strong&gt;will never get called&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="740612bbe8a8ba2edee8f0784e16158aa4bc693c" translate="yes" xml:space="preserve">
          <source>Width of viewport in pixels (must be between 20 and 3000).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b6ce8c2a0e9b895c30787ad491bbca447646e6" translate="yes" xml:space="preserve">
          <source>Width, Height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad0c0b34826eda4fd9d451d9fa2a4bfded3e92e" translate="yes" xml:space="preserve">
          <source>Will scroll with the easing animation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41dfc0a6c92707948578891c51d98c6443be63cc" translate="yes" xml:space="preserve">
          <source>Window</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d4bf9243ba905bee32475e779fa3c24cc8bfc0" translate="yes" xml:space="preserve">
          <source>Window Alert</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e67225518a6bdc9b3c60f89fb71fb61b41bebec" translate="yes" xml:space="preserve">
          <source>Window Before Load</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e28dfada85ac4d23db1bd7f071223f7d31f4f44" translate="yes" xml:space="preserve">
          <source>Window Confirm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de9eae165f5a2d612a3006e5da76e592af596fa" translate="yes" xml:space="preserve">
          <source>Windows 32-bit (&lt;code&gt;?platform=win32&amp;amp;arch=ia32&lt;/code&gt;, available since &lt;a href=&quot;../references/changelog#3-3-0&quot;&gt;Cypress 3.3.0&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892eb30664e49b9647500f1dd3e791364d6b2aa2" translate="yes" xml:space="preserve">
          <source>Windows 64-bit (&lt;code&gt;?platform=win32&amp;amp;arch=x64&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61ef8f1263745681f34613413bc836ec71a45e9" translate="yes" xml:space="preserve">
          <source>Windows is now supported. We have been running it successfully on EC2 and all of our example projects are also running in CI with AppVeyor. It is still super beta (we&amp;rsquo;re aware of a couple issues already) and we&amp;rsquo;re still updating our own infrastructure to manage and test it as comprehensively as we do OSX and Linux. We are only building a 32bit version of Windows, but will soon be building a 64bit as well. As of today the Windows binary is about 2x the size of what it will be. Unzipping takes a long time, we are sorry. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/74&quot;&gt;#74&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/444&quot;&gt;#444&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f75fb666eb7369907ad5e76c78b077e8c896d6" translate="yes" xml:space="preserve">
          <source>Windows now forcibly displays colors correctly to the terminal. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1127&quot;&gt;#1127&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18dbec5b3d5c516886145bd094fb745eaa46277e" translate="yes" xml:space="preserve">
          <source>Windows users no longer exit with &lt;code&gt;EPIPE&lt;/code&gt; errors when running &lt;code&gt;cypress run&lt;/code&gt; in newer versions of Node. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1841&quot;&gt;#1841&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2044&quot;&gt;#2044&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10913b05ebaea696a82a5dbee33c2f5a954297c5" translate="yes" xml:space="preserve">
          <source>Windows: &lt;code&gt;%APPDATA%\Cypress\cy\production\browsers&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a04aa8c3ae5c49bbcf10fde083981080655183c" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;baseUrl&lt;/code&gt; set, Cypress loads main window in &lt;code&gt;baseUrl&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81fc1d3a1ce3fa8065b60f2f7ee20e1857adf53a" translate="yes" xml:space="preserve">
          <source>With Cypress, by adding a &lt;a href=&quot;../../api/commands/wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt;, you can more easily pinpoint your specific problem. If the response never came back, you&amp;rsquo;ll receive an error like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324f62d776b36302fae0f158bb48f689eac27ff1" translate="yes" xml:space="preserve">
          <source>With Cypress, we automatically watch your &lt;code&gt;pluginsFile&lt;/code&gt; and any changes made will take effect immediately. We will read the file in and execute the exported function again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d635167b9ab9bbc62bb901a9237c2a0a66c7b58" translate="yes" xml:space="preserve">
          <source>With Cypress, you don&amp;rsquo;t have to assert to have a useful test. Even without assertions, a few lines of Cypress can ensure thousands of lines of code are working properly across the client and server!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cd018500995ac99144a5d8f06785abea09916d9" translate="yes" xml:space="preserve">
          <source>With Cypress, you have the ability to record your project&amp;rsquo;s tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecd5b7f531f2034a00137ec958ca364816ffa35" translate="yes" xml:space="preserve">
          <source>With Stubbing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0bfa5a19660c9844839ce10a038ebb441cbdd86" translate="yes" xml:space="preserve">
          <source>With a custom selector strategy that favours classes, the selector value will be &lt;code&gt;'.number3'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c6a0a3be9b1c5a32e32c20d13cbc765264fee9c" translate="yes" xml:space="preserve">
          <source>With a duration estimation for each spec file of a test run, Cypress can distribute spec files to available CI resources in descending order of spec run duration. In this manner, the most time-consuming specs start first which minimizes the overall test run duration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2e0f705744da6de9b9acfbb52cfebd2919d3c3f" translate="yes" xml:space="preserve">
          <source>With parallelization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3659716464d76403703624f376f36f5100221ce5" translate="yes" xml:space="preserve">
          <source>With plugins, you can programmatically alter the resolved configuration and environment variables that come from &lt;code&gt;cypress.json&lt;/code&gt;, &lt;a href=&quot;../guides/environment-variables#Option-2-cypress-env-json&quot;&gt;&lt;code&gt;cypress.env.json&lt;/code&gt;&lt;/a&gt;, the CLI, or system environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbe6ccbd10d31aa0e0e3a7d35d78505d05e189c" translate="yes" xml:space="preserve">
          <source>With that said - you still have the option to have it &lt;strong&gt;both ways&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e92d93953a6c6776e1a2c3bf42eb28eaa6259b" translate="yes" xml:space="preserve">
          <source>With that said, as long as you are aware of the potential pitfalls with control flow, it is possible to do this in Cypress!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2d4bf98dcaae706370c1b4c5e896b548d8d92b" translate="yes" xml:space="preserve">
          <source>With that said, except in the most unusual and rare circumstances, you can still test most application behavior without opening multiple browsers at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7186fa0b6472e23066ddb57d7d36b1e0306931a9" translate="yes" xml:space="preserve">
          <source>With the default selector strategy, the selector value will be &lt;code&gt;'#bingo'&lt;/code&gt; because IDs have priority over classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5f9bd0a40917819f7a3803644b0e1fe5baf4cd" translate="yes" xml:space="preserve">
          <source>With this option enabled - Cypress will search through the response streams coming from your server on &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; files and replace code that &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/886#issuecomment-364779884&quot;&gt;matches the following patterns.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6205072bdbddad8d3ef5cfb3e195b5d2c6f3556" translate="yes" xml:space="preserve">
          <source>Within</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f70cb66d60ea6f53ef4cf2198b72d1af04ae68" translate="yes" xml:space="preserve">
          <source>Within &lt;a href=&quot;../guides/continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;, or from your local computer&amp;rsquo;s terminal, pass the displayed &lt;a href=&quot;#Identification&quot;&gt;Record Key&lt;/a&gt; while running the &lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b88411b1ac3655bb73b98154aea8100ca872d0a5" translate="yes" xml:space="preserve">
          <source>Within Cypress, you have the ability to choose whether to stub responses or allow them to actually hit your server. You can also mix and match within the same test by choosing to stub certain requests, while allowing others to hit your server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0016aaa34012562c39a3599899ce838be61180" translate="yes" xml:space="preserve">
          <source>Within a few milliseconds after the DOM updates, &lt;code&gt;cy.get()&lt;/code&gt; finds two elements and the &lt;code&gt;should('have.length', 2)&lt;/code&gt; assertion passes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70935eb04a39039416421f2fc50df146e2bb5f6" translate="yes" xml:space="preserve">
          <source>Within the context of the &lt;a href=&quot;../../api/commands/then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt; function, the &lt;code&gt;debugger&lt;/code&gt; is called, halting the browser and calling focus to the Developer Tools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d7483d7edd2af13bb6dc2b1f51a23f8500b884d" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;baseUrl&lt;/code&gt; set, Cypress loads main window in &lt;code&gt;localhost&lt;/code&gt; + random port</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906a6eb7d04be89d6d2b3daa4e326d26ddb2fac7" translate="yes" xml:space="preserve">
          <source>Without &lt;strong&gt;retry-ability&lt;/strong&gt;, assertions would randomly fail. This would lead to flaky, inconsistent results. This is also why we cannot use new JS features like &lt;code&gt;async / await&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb1dc80e7632f9b47496cf67df2c872ca70f178" translate="yes" xml:space="preserve">
          <source>Without Stubbing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4a1b0491c7a6e9d7a59d6132c3af9f757e57ca" translate="yes" xml:space="preserve">
          <source>Without a single explicit assertion, there are dozens of ways this test can fail! Here&amp;rsquo;s a few:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1219481711846711eed3cfae042f29750086a95" translate="yes" xml:space="preserve">
          <source>Without parallelization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44db76fdf7269cbcb7a11a9b09f77cbb96044bec" translate="yes" xml:space="preserve">
          <source>Without the explicit selector the subject would change to be the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;. Using the explicit selector ensures that chained commands will have the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; as the subject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973948319a04f7243a7ee0f7f79cf360c46cbdae" translate="yes" xml:space="preserve">
          <source>WordPress ReactJS Boilerplate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97de39ae118b23bf5c7480efba0263d4b3523884" translate="yes" xml:space="preserve">
          <source>Workarounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd0a2df375a60b44c976c8a4db7d194060d4461" translate="yes" xml:space="preserve">
          <source>Workarounds for the lack of a &lt;code&gt;cy.hover()&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a029ad208ecbaff772e93e32f766a12214b46a9a" translate="yes" xml:space="preserve">
          <source>Working with (or without!) your authentication mechanism</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58cf4400fc9e0f2d0922b7223946562b1482781" translate="yes" xml:space="preserve">
          <source>Worst - too generic, no context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b27d10698f477cb5d3abdca308a747ef002771" translate="yes" xml:space="preserve">
          <source>Worth noting is that this test transitioned across two different pages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="815e184ef7f08812dabb069624864d3ce9cad673" translate="yes" xml:space="preserve">
          <source>Wrap a method in a spy in order to record calls to and arguments of the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e74f074efa84f7e7f076c9a2ad80f855245635" translate="yes" xml:space="preserve">
          <source>Wrap a method with a spy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf5dcb3f0a5d5cc662149fa11623a73d286dea4" translate="yes" xml:space="preserve">
          <source>Wrap elements to continue executing commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aeeb5d1410040f2fa5f8d1c096cc6a1c8f97152" translate="yes" xml:space="preserve">
          <source>Write JSON to a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bfcf55a9ad2e92d1a46f472dec4bad34f51236c" translate="yes" xml:space="preserve">
          <source>Write a &lt;em&gt;real&lt;/em&gt; test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd9609ec0161b8d632b04b5aa5502b3d84bd8e4" translate="yes" xml:space="preserve">
          <source>Write a simple test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08f85691e5616827fd376baa49e87458bc7f09d" translate="yes" xml:space="preserve">
          <source>Write a single e2e test without stubs, and then stub the rest</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd6d5754e026150b391ab35cb939286835acd624" translate="yes" xml:space="preserve">
          <source>Write command log to the terminal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22f196c7cb125c4b03f179cb32f7c2aaf4cf6d69" translate="yes" xml:space="preserve">
          <source>Write our first failing test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e04273f82e5c422931875249934b749d7eac91c" translate="yes" xml:space="preserve">
          <source>Write our first passing test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f49208ca7d9f2aa45c31fa44dcd53e09c9d2ea8" translate="yes" xml:space="preserve">
          <source>Write response data to a fixture file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a44bf03a5e55df5413891c44c1fac78a52233070" translate="yes" xml:space="preserve">
          <source>Write some text to a &lt;code&gt;txt&lt;/code&gt; file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391b1a9608423cb9c4d16a7886b9e07fab1acb00" translate="yes" xml:space="preserve">
          <source>Write tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff899899ede8d6c533f3b1b8b0d7c3492723fc4" translate="yes" xml:space="preserve">
          <source>Write that JavaScript file to disk (example: &lt;code&gt;/Users/foo/tmp/spec.js&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5719aaf7992634642b1b7112e30c7134e764302f" translate="yes" xml:space="preserve">
          <source>Write to a file to create a fixture from response body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab3cbe1fed5623141fafd3b38cf9a06822dd75f" translate="yes" xml:space="preserve">
          <source>Write to a file with the specified contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a600dde27ac1cbb55dea0b6a4509220f889cf37a" translate="yes" xml:space="preserve">
          <source>Write your configuration in &lt;code&gt;yml&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3bbf365324121f0ac4816ebcc17d68fa60e28ae" translate="yes" xml:space="preserve">
          <source>Write your own &lt;code&gt;chai&lt;/code&gt; assertions as &lt;a href=&quot;http://chaijs.com/api/plugins/&quot;&gt;documented here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57e9c65100c0cc4da8b086c12796529e5b38c06c" translate="yes" xml:space="preserve">
          <source>Write your test code in ClojureScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab72b29ea2983720d1bfac24c6424cb6657e4dd" translate="yes" xml:space="preserve">
          <source>Writing Assertions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0e9312c8cb9cd6ef1a61e5d88575514a7ba12b" translate="yes" xml:space="preserve">
          <source>Writing Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d497ec47a0985dbe1ace5d6eae1d0ddbb898606" translate="yes" xml:space="preserve">
          <source>Writing Your First Test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510a261ec2843f68a4816e4735bf0f01c466c291" translate="yes" xml:space="preserve">
          <source>Writing a Plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05db46358fd92c5aad6d2c6528572f6a3a6fe318" translate="yes" xml:space="preserve">
          <source>Writing an assertion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faec91882204c852d12e33358973060973700fdf" translate="yes" xml:space="preserve">
          <source>Writing and Organizing Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c5c7c7f6dc652f5ade97c4e0d3f0a7cba0e2ec" translate="yes" xml:space="preserve">
          <source>Writing integration tests is not the same as unit tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2816d4bb9622be7220e5163963f6a9c487ee4d" translate="yes" xml:space="preserve">
          <source>Writing tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd291d7c8fc247b785a2fb2b82d1c2a79454331" translate="yes" xml:space="preserve">
          <source>XHR URL is now decoded to make assertions easier. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/75&quot;&gt;#75&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948e5c4f5e072cc35e1ae48bf50f57c093a6e15d" translate="yes" xml:space="preserve">
          <source>XHR handling has been rewritten to be much more flexible, extensible, and future-proof.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef873078fda8e8bc78ce2414cf867d501e93e50b" translate="yes" xml:space="preserve">
          <source>XHR requests for &lt;code&gt;.svg&lt;/code&gt; files are no longer shown in the Command Log by default. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/131&quot;&gt;#131&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663ae6f07edc2db763c485b93a365cc398937f83" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s from your application are no longer forcefully aborted between tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6b301701bcc969d7bd210e9e0c093363ad7666" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s now include an &lt;code&gt;Initiator&lt;/code&gt; stack regardless of whether they&amp;rsquo;re stubbed. The &lt;code&gt;Initiator&lt;/code&gt; stack includes the stack which caused the XHR to be created and sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0aefc34be6eecce54750d8cbc361aec46085c48" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s now snapshot twice - when the request is made and when the response is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133f6f4281ac57439b78e67d0cdc25582668ce19" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s that display &lt;code&gt;(XHR STUB)&lt;/code&gt; in the Command Log have been stubbed and their response, status, headers, and delay have been controlled by your matching &lt;code&gt;cy.route()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7ad4fc93d4ee54a5bb8a0c2dc774f349135f16" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s that display &lt;code&gt;(XHR)&lt;/code&gt; in the Command Log have &lt;em&gt;not&lt;/em&gt; been stubbed and were passed directly through to a server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ca621c7a5e5fc4d60e985951e1e2743133d289" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s which are aborted no longer cause an &lt;code&gt;INVALID_STATE_ERR&lt;/code&gt; to be thrown. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/62&quot;&gt;#62&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/34&quot;&gt;#34&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="896067df2d97b6f3a5ba58b06798fd7757f700ee" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s which have their &lt;code&gt;onload&lt;/code&gt; handler replaced after &lt;code&gt;XHR#send&lt;/code&gt; is called is now properly accounted for. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/143&quot;&gt;#143&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="743b51390e3cb9baef6667ca98b59b7d162859f4" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s will continue to work correctly even &lt;em&gt;after&lt;/em&gt; a test ends. In previous versions, due to replacing the entire XHR object, your application would not work correctly after a test ended. This prevented you from &amp;ldquo;navigating around&amp;rdquo; and working with your app after the tests end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4f89ce0456ef298d7e8ec18b48711ea69b3e457" translate="yes" xml:space="preserve">
          <source>XHR&amp;rsquo;s will no longer be ended early and display no status as if there was no response. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/63&quot;&gt;#63&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbcb202b09db426bae56cf2ffb88f18594f2258" translate="yes" xml:space="preserve">
          <source>YAML</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1d290fe051c54f76c2d9bc9b616a74a98d0f68" translate="yes" xml:space="preserve">
          <source>Yes. You can do that and much more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c7d6cec1a113eff5e749d252aff4bf832876c90" translate="yes" xml:space="preserve">
          <source>Yield the elements that do not have class &lt;code&gt;active&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69ae77c7512a652e2918cd1f0757f42b91b8dfda" translate="yes" xml:space="preserve">
          <source>Yield the object passed into &lt;code&gt;.wrap()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542815938eae61d84fdfe3b4fc49fd92c34beb56" translate="yes" xml:space="preserve">
          <source>Yield the remote window object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a12ea0e0de8f020b440dba245a0b3c4be9d09a5" translate="yes" xml:space="preserve">
          <source>Yielded (what was returned by this command)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="738a2b66281e5ca4973cbceebc923d1996e03dad" translate="yes" xml:space="preserve">
          <source>Yields</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462c5e6929436be950f4b6f269bbbb0bff05188a" translate="yes" xml:space="preserve">
          <source>You &lt;strong&gt;can&lt;/strong&gt;&lt;a href=&quot;../../api/commands/visit&quot;&gt;visit&lt;/a&gt; different subdomains in the same test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499c99de6a195378ff0c8dde918219add5664a04" translate="yes" xml:space="preserve">
          <source>You &lt;strong&gt;can&lt;/strong&gt;&lt;a href=&quot;../../api/commands/visit&quot;&gt;visit&lt;/a&gt; different superdomains in &lt;strong&gt;different&lt;/strong&gt; tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9850ddbfd7faa1d9b87b1e04ba053680f689e1d4" translate="yes" xml:space="preserve">
          <source>You &lt;strong&gt;cannot&lt;/strong&gt;&lt;a href=&quot;../../api/commands/visit&quot;&gt;visit&lt;/a&gt; two different superdomains in the same test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9e72e81a428fe6d349b8ef505e1ad5f33af85a" translate="yes" xml:space="preserve">
          <source>You almost &lt;strong&gt;never&lt;/strong&gt; need to wait for an arbitrary period of time. There are always better ways to express this in Cypress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fea4ef67601902621408e89ad55a3b3e9e8d0e" translate="yes" xml:space="preserve">
          <source>You are a developer that has forked our codebase and do not have access to run our API locally. Please read more about this in our &lt;a href=&quot;https://on.cypress.io/contributing&quot;&gt;contributing doc&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a07010ed6d0b79d84e123ef7cebbd3d1f5665e75" translate="yes" xml:space="preserve">
          <source>You are attempting to pass the &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag to a run that was completed over 24 hours ago.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5eaeeeaffb9cde25c1cea6692bd14c95df196d" translate="yes" xml:space="preserve">
          <source>You are testing a page that uses Single sign-on (SSO). In this case your web server is likely redirecting you between superdomains, so you receive this error message. You can likely get around this redirect problem by using &lt;a href=&quot;../../api/commands/request&quot;&gt;&lt;code&gt;cy.request()&lt;/code&gt;&lt;/a&gt; to manually handle the session yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e20b1e7029e04bd7c212b7346c26fecd36d0b70" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../../api/commands/stub&quot;&gt;stub&lt;/a&gt; everything and simulate every single scenario. Chat messages, offline messages, connections, reconnections, disconnections, group chat, etc. Everything that happens inside of the browser can be fully tested. Requests leaving the browser could also be stubbed and you could assert that the request bodies were correct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784d08745185a1519441b40f1c76d4c3dde4fc93" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../../api/plugins/writing-a-plugin&quot;&gt;check out the API docs here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d08e9900a859f4834cce50509040d4089e753b" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../../guides/guides/network-requests&quot;&gt;read more about XHR strategy here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2154ae12aa1c12609440ccc8342fe419b011a087" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../../guides/references/configuration#Viewport&quot;&gt;change these default dimensions&lt;/a&gt; by adding the following to your &lt;code&gt;cypress.json&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a436468e8d3700843fa05d00ce7f2786823d1b10" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../dashboard/projects#Setup&quot;&gt;read more about recording runs here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf85580f3b8841e21d30afc6192aea62ae439056" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../guides/command-line&quot;&gt;read more about the CLI here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495f3f50cfa9af97f811f5082ba77ee95a195970" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../guides/environment-variables&quot;&gt;read more about Environment Variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e9c3215e41aae529b1035ff69debfc86a8d6bb" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;../references/configuration&quot;&gt;read more about how environment variables can change configuration here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d491b6991d0e25f7938f96f1803e588382f664d" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;server#Options&quot;&gt;read more about this behavior here.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7429e037d4f10c8de0ca682f640e0d9eccf99b0" translate="yes" xml:space="preserve">
          <source>You can &lt;a href=&quot;server#Options&quot;&gt;read more about this here.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce5fd0d44b3fc46a01b53aa0560b7918ea740915" translate="yes" xml:space="preserve">
          <source>You can access functions to then drill into their own properties instead of invoking them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f4b77fc836d5a265c934a0f8270a262a73b1b14" translate="yes" xml:space="preserve">
          <source>You can add multiple groups to the same run by passing a different name. This can help distinguish groups of specs from each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf9fe4eef68136c89d109fccd0aa58e4cf8a4e4" translate="yes" xml:space="preserve">
          <source>You can add retry-ability to your own &lt;a href=&quot;../../api/cypress-api/custom-commands&quot;&gt;custom commands&lt;/a&gt;, see &lt;a href=&quot;https://github.com/cypress-io/cypress-xpath/pull/12/files&quot;&gt;this pull request to cypress-xpath&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb82d597ef3272f052afe18e0fad50752efcb6d" translate="yes" xml:space="preserve">
          <source>You can additionally pass a &lt;code&gt;--group&lt;/code&gt; flag so this shows up as a named &lt;a href=&quot;parallelization#Grouping-test-runs&quot;&gt;group&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43d327df1d2cbf3d00430666edcfd81a359f119c" translate="yes" xml:space="preserve">
          <source>You can additionally reference &lt;a href=&quot;../core-concepts/variables-and-aliases&quot;&gt;aliases&lt;/a&gt; within responses. These aliases do not have to point to fixtures, but that is a common use case. Separating out a fixture enables you to work and mutate that object prior to handing it off to a response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6215c846c9e2413af9d999de1041b1b887be989" translate="yes" xml:space="preserve">
          <source>You can almost read it like a little story! Cypress calls this &amp;ldquo;chaining&amp;rdquo; and we chain together commands to build tests that really express what the app does in a declarative way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abc7816b2d0675cc1ce58f7e2e18b2cd29f02c7" translate="yes" xml:space="preserve">
          <source>You can also &lt;code&gt;require&lt;/code&gt; local files relative to your project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f7a1c4e1c214de9bc8a43f6f54a14a7e3ed530" translate="yes" xml:space="preserve">
          <source>You can also access the &lt;code&gt;clock&lt;/code&gt; object via &lt;code&gt;this.clock&lt;/code&gt; in a &lt;a href=&quot;then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt; callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3981301b8c8c9baaf227f00e9c6f69073b413e" translate="yes" xml:space="preserve">
          <source>You can also choose a browser by supplying a path:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc776eb9b4214fea2ba7e9d6b140f013e1d31c9" translate="yes" xml:space="preserve">
          <source>You can also experiment with what &lt;a href=&quot;../../api/commands/contains&quot;&gt;&lt;code&gt;cy.contains()&lt;/code&gt;&lt;/a&gt; would yield given a string of text. Click on &lt;code&gt;cy.get&lt;/code&gt; and switch to &lt;code&gt;cy.contains&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a373a76aeb86a79de2ae0bb4ca8c8224407f553" translate="yes" xml:space="preserve">
          <source>You can also find your Record Key inside of the &lt;em&gt;Settings&lt;/em&gt; tab in the Test Runner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e910c91c4d3eb331aa40a99585e3fc2bd1fa9355" translate="yes" xml:space="preserve">
          <source>You can also force Cypress to skip the installation of the binary application by setting &lt;code&gt;CYPRESS_INSTALL_BINARY=0&lt;/code&gt;. This could be useful if you want to prevent Cypress from downloading the Cypress binary at the time of &lt;code&gt;npm install&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ca84eae6e1d1a4c235730f033d8eea601a161d" translate="yes" xml:space="preserve">
          <source>You can also force the action to be performed on the element regardless of whether the element is visible or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f730e6f4a04e24f99b0c716d8058dbb4dc54d9a6" translate="yes" xml:space="preserve">
          <source>You can also include arbitrary event properties (e.g. &lt;code&gt;clientX&lt;/code&gt;, &lt;code&gt;shiftKey&lt;/code&gt;) and they will be attached to the event. Passing in coordinate arguments (&lt;code&gt;clientX&lt;/code&gt;, &lt;code&gt;pageX&lt;/code&gt;, etc) will override the position coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb856b9724a4fa7f847157ca2d79ac226ce0eef" translate="yes" xml:space="preserve">
          <source>You can also launch Chromium:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1356698e80248e43b88730c4463de0933166c7d0" translate="yes" xml:space="preserve">
          <source>You can also launch Electron headed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80f64a0cf8b0a4e119997575d9d04d4a84f146c8" translate="yes" xml:space="preserve">
          <source>You can also mix optional commands &lt;strong&gt;with&lt;/strong&gt; validations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66db6cce48bf4cb810b588cb860314482e87f08b" translate="yes" xml:space="preserve">
          <source>You can also modify the behavior of existing Cypress commands. This is useful to always set some defaults to avoid creating another command that ends up just using the original.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b2828e90e5427e97e52a6d3ef90e2e398374448" translate="yes" xml:space="preserve">
          <source>You can also override configuration values within your test using &lt;a href=&quot;../../api/cypress-api/config&quot;&gt;&lt;code&gt;Cypress.config()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9669cc5529312653389cac780d96db9f8b09ddb8" translate="yes" xml:space="preserve">
          <source>You can also provide the username and password directly in the URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7378309e90d3f3e6b7105692f196c77a53112f" translate="yes" xml:space="preserve">
          <source>You can also reference fixtures as strings directly in the response by passing an aliased fixture with &lt;code&gt;@&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a258007e0713ab14f35b5bfe3308c438cbcbe78" translate="yes" xml:space="preserve">
          <source>You can also see all GitHub Integration enabled Cypress projects within your organizations &lt;strong&gt;Integrations&lt;/strong&gt; page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef34e4c0976f5f9d1128119e2293fcadfdd8c69" translate="yes" xml:space="preserve">
          <source>You can also see verbose Cypress logs when running the Test Runner binary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b61b0b140b27978c66084948f860f083e22cd45" translate="yes" xml:space="preserve">
          <source>You can also set &lt;code&gt;NO_PROXY&lt;/code&gt; to bypass the proxy for certain domains (by default, only &lt;code&gt;localhost&lt;/code&gt; will be bypassed):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1df080149da01d5047d265f6b4c4503ef3fd2f3" translate="yes" xml:space="preserve">
          <source>You can also set all &lt;code&gt;cy.visit()&lt;/code&gt; commands&amp;rsquo; &lt;code&gt;pageLoadTimeout&lt;/code&gt; and &lt;code&gt;baseUrl&lt;/code&gt; globally in &lt;a href=&quot;../../guides/references/configuration&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc41b9156c6f191e37a3148278eb23cb277f6a3" translate="yes" xml:space="preserve">
          <source>You can also set custom environment variables for use in your tests. These enable your code to reference dynamic values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1107e80041395e278d9bfec399d396819951db0" translate="yes" xml:space="preserve">
          <source>You can also set options for &lt;code&gt;cy.request()&lt;/code&gt;&amp;lsquo;s &lt;code&gt;baseUrl&lt;/code&gt; and &lt;code&gt;responseTimeout&lt;/code&gt; globally in &lt;a href=&quot;../../guides/references/configuration&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8168fc02c79572a79ba1ac091a0b3699434adf2" translate="yes" xml:space="preserve">
          <source>You can also set options for all &lt;a href=&quot;wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt;&amp;lsquo;s &lt;code&gt;requestTimeout&lt;/code&gt; and &lt;code&gt;responseTimeout&lt;/code&gt; globally in &lt;a href=&quot;../../guides/references/configuration&quot;&gt;configuration&lt;/a&gt; to control how long to wait for the request and response of a supplied route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc19a9813ee5d74ccec080f9e2871dfc2cf77339" translate="yes" xml:space="preserve">
          <source>You can also set proxy environment variables before running Cypress to override the Windows registry. This is also the only way to define a proxy for &lt;code&gt;cypress install&lt;/code&gt;. In Command Prompt, defining the required environment variables looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eba9eaea57ee86eda61d39c0cb20904fda8fa68" translate="yes" xml:space="preserve">
          <source>You can also set the timeout globally via the &lt;a href=&quot;../references/configuration#Timeouts&quot;&gt;configuration setting: &lt;code&gt;defaultCommandTimeout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87884bf39c14ad453d04ea15ab0971d7774f421" translate="yes" xml:space="preserve">
          <source>You can also supply the &lt;code&gt;--browser&lt;/code&gt; command line argument to launch a browser from a known filesystem path to bypass browser auto detection. &lt;a href=&quot;launching-browsers#Launching-by-a-path&quot;&gt;See &amp;lsquo;Launching Browsers&amp;rsquo; for more information&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc1b52c24e86b2b4be396650015de0959d5fcba4" translate="yes" xml:space="preserve">
          <source>You can also turn off our checks for animations with the configuration option &lt;a href=&quot;../references/configuration#Animations&quot;&gt;&lt;code&gt;waitForAnimations&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e92d91cd084ad1da7c15131810b4d1177ff17f71" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;../guides/environment-variables&quot;&gt;environment variables&lt;/a&gt; to override configuration values. This is especially useful in &lt;a href=&quot;../guides/continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt; or when working locally. This gives you the ability to change configuration options without modifying any code or build scripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b8f4d45319dee07869a91ac5b121bf6ea0e232" translate="yes" xml:space="preserve">
          <source>You can also use a function as a response which enables you to add logic surrounding the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c469c8dc57a8e8c5ed37eef09746b7a8446a73" translate="yes" xml:space="preserve">
          <source>You can alternatively require and run Cypress as a node module using our &lt;a href=&quot;module-api&quot;&gt;Module API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3175a2b4f4549de4e33942286466a2a4dc1e48b7" translate="yes" xml:space="preserve">
          <source>You can assert about the underlying XHR object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ffc92d6f9ac91733bcc1c82ea9f5a8866adcdb0" translate="yes" xml:space="preserve">
          <source>You can assert that a file does not exist like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ad54b282d0eb9740f3007c306d5f45c93589c8" translate="yes" xml:space="preserve">
          <source>You can avoid this check in the future by passing an ID to the &lt;a href=&quot;../guides/command-line#cypress-run-ci-build-id-lt-id-gt&quot;&gt;&lt;code&gt;--ci-build-id&lt;/code&gt;&lt;/a&gt; flag manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b31e2a27d983a97c552cc374237cd9d7941ccd4f" translate="yes" xml:space="preserve">
          <source>You can call &lt;code&gt;cy.clock()&lt;/code&gt; again for this purpose later in a chain if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e9a164d5e9c68e547303a1f613766d10ea1418" translate="yes" xml:space="preserve">
          <source>You can chain a &lt;code&gt;.log(bool)&lt;/code&gt; method to disable &lt;code&gt;cy.stub()&lt;/code&gt; calls from being shown in the Command Log. This may be useful when your stubs are called an excessive number of times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e76c197da2f401b90598e6d5b3657441656fa45" translate="yes" xml:space="preserve">
          <source>You can chain multiple assertions together using &lt;a href=&quot;../../api/commands/and&quot;&gt;&lt;code&gt;.and()&lt;/code&gt;&lt;/a&gt;, which is just another name for &lt;a href=&quot;../../api/commands/should&quot;&gt;&lt;code&gt;.should()&lt;/code&gt;&lt;/a&gt; that makes things more readable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="324978bd59726ff9b6daf19dbb7623b404a04f96" translate="yes" xml:space="preserve">
          <source>You can change anything in the JavaScript code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd9e8848201a5377bfae9ccff12e3e96d52b109" translate="yes" xml:space="preserve">
          <source>You can check the cookie existence without comparing any of its properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16913b3bed889723969c72a8d71314dec1332362" translate="yes" xml:space="preserve">
          <source>You can configure CI to use any reporter built into Mocha, and additionally we are adding JUnit XML output (for Jenkins) as a built in default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44522a700127f81cfa8d4cd7a580fcabb332d6fb" translate="yes" xml:space="preserve">
          <source>You can create an organization from within the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt; by going to the &lt;strong&gt;Organizations&lt;/strong&gt; tab and clicking &lt;strong&gt; Add Organization&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06ded0a0c44a1f5754f79079f79ec07319016cd" translate="yes" xml:space="preserve">
          <source>You can create multiple Record Keys for a project, or delete existing ones from our &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2ce4ef56a8ea5d69610b02eb11bc54412ee2fb" translate="yes" xml:space="preserve">
          <source>You can create your own &lt;code&gt;cypress.env.json&lt;/code&gt; file that Cypress will automatically check. Values in here will overwrite conflicting environment variables in &lt;code&gt;cypress.json&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6523f3351366b7ce61e38eeff804ad2055d0c5d9" translate="yes" xml:space="preserve">
          <source>You can define your behaviors in a &lt;code&gt;beforeEach&lt;/code&gt; within any of the &lt;code&gt;cypress/support&lt;/code&gt; files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b303eb868263da303c6fbda4bfbb73b3116eef" translate="yes" xml:space="preserve">
          <source>You can delete organizations that you own as long as they do not have any projects in the organization. You must first transfer ownership of your projects to another organization before you can delete the organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bba89ff9d30a5268594482d2fa9607fd9e3fe12" translate="yes" xml:space="preserve">
          <source>You can delete projects you own. This will also delete all of their recorded test runs. Deleting projects can only be done from the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79831bc7512a1e1c26a421f007ce979847bf0a7c" translate="yes" xml:space="preserve">
          <source>You can describe the method signature for your custom command, allowing IntelliSense to show helpful documentation. See the &lt;a href=&quot;https://github.com/cypress-io/cypress-example-todomvc#cypress-intellisense&quot;&gt;&lt;code&gt;cypress-example-todomvc&lt;/code&gt;&lt;/a&gt; repository for a working example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643f7e328ecedd1f5d98bbf5dff347818789df5e" translate="yes" xml:space="preserve">
          <source>You can disable all stubbing and its effects and restore it to the default behavior as a test is running. By setting &lt;code&gt;enable&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, this disables stubbing routes and XHR&amp;rsquo;s will no longer show up as (XHR Stub) in the Command Log. However, routing aliases can continue to be used and will continue to match requests, but will not affect responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d2cd188f36f701d8b251e7a7fbb2dcb2457a36" translate="yes" xml:space="preserve">
          <source>You can do this in many ways and here is a simple example of using an HTTP server to act as the client and exposing a REST interface that enables us to control it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b736df01753bd3372efae350c20a5c5dadcdfbb" translate="yes" xml:space="preserve">
          <source>You can drill into nested properties by using &lt;em&gt;dot notation&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1228304b4cc01b66a784eeb63078c8726421e77c" translate="yes" xml:space="preserve">
          <source>You can dynamically generate tests using JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a2e37cb8e37e96e3c4243fd4554f774483b5cf1" translate="yes" xml:space="preserve">
          <source>You can edit the number of seconds that a run will wait for new groups to join before transitioning to &amp;lsquo;completed&amp;rsquo;. See our &lt;a href=&quot;../guides/parallelization#Run-completion-delay&quot;&gt;parallelization guide&lt;/a&gt; to learn more.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dab3e9ab7530834286664395fc341ebb044a056" translate="yes" xml:space="preserve">
          <source>You can even throw your own errors from the callback function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41b32dfc16a036c0a0a54153f50cbd0df7ee3e80" translate="yes" xml:space="preserve">
          <source>You can explore the above combined full stack coverage report at the &lt;a href=&quot;https://coveralls.io/github/cypress-io/cypress-example-realworld&quot;&gt;coveralls.io/github/cypress-io/cypress-example-realworld&lt;/a&gt; dashboard.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0568ec7f2fe4ea42d6839ef295021cdeb33705" translate="yes" xml:space="preserve">
          <source>You can find a simple example with custom commands written in TypeScript in &lt;a href=&quot;https://github.com/omerose/cypress-support&quot;&gt;omerose/cypress-support&lt;/a&gt; repo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a7f4868071ee5c6983b82ebcc25855d5856aa0" translate="yes" xml:space="preserve">
          <source>You can find an example of Jest and Cypress installed in the same project using a separate &lt;code&gt;tsconfig.json&lt;/code&gt; file in the &lt;a href=&quot;https://github.com/cypress-io/cypress-and-jest-typescript-example&quot;&gt;cypress-io/cypress-and-jest-typescript-example&lt;/a&gt; repo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d61b24dcafb9772bac5e241c51bcc0893b73bb8" translate="yes" xml:space="preserve">
          <source>You can find full examples showing different code coverage setups in the following repositories:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0632d008fb07530217cff8f54fa087f4afc85cdd" translate="yes" xml:space="preserve">
          <source>You can find multiple examples at &lt;a href=&quot;https://github.com/cypress-io/circleci-orb/blob/master/docs/examples.md&quot;&gt;our orb examples page&lt;/a&gt; and in the &lt;a href=&quot;https://github.com/cypress-io/cypress-example-circleci-orb&quot;&gt;cypress-example-circleci-orb&lt;/a&gt; project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e457cbde83a98743dd9d4d6026fffc11caa2e5" translate="yes" xml:space="preserve">
          <source>You can find the current Node version we use &lt;a href=&quot;https://github.com/cypress-io/cypress/blob/master/.node-version&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce85bc1af7afb7a0ccc8d0454399d537be9ea00" translate="yes" xml:space="preserve">
          <source>You can force requests that do &lt;em&gt;not&lt;/em&gt; match a route to return a &lt;code&gt;404&lt;/code&gt; status and an empty body by passing an option to the &lt;code&gt;cy.server()&lt;/code&gt; like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4304e731086e33e0e57a31115a58826e9ee3f7" translate="yes" xml:space="preserve">
          <source>You can get details about any given screenshot and manipulate it after it has been written to disk with the &lt;a href=&quot;../plugins/after-screenshot-api&quot;&gt;&lt;code&gt;after:screenshot&lt;/code&gt; plugin event&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f81ceee5fe45ac0a04018259c3f786dd7757967a" translate="yes" xml:space="preserve">
          <source>You can get your project&amp;rsquo;s record key by locating it in your settings tab in the Test Runner or in the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac560b0641950b1b1186f9110e022b90f0ac5546" translate="yes" xml:space="preserve">
          <source>You can globally disable animation error checking, or increase the threshold by modifying the &lt;a href=&quot;configuration&quot;&gt;configuration&lt;/a&gt; in your &lt;a href=&quot;configuration&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e42e77e262790c44d05760ae6ba937b2ca2810ac" translate="yes" xml:space="preserve">
          <source>You can however send your own video file for testing by passing a Chrome command line switch pointing to a video file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="353e67490c1bb57c25a41de380f16f7d5d3e8bf0" translate="yes" xml:space="preserve">
          <source>You can ignore Cypress&amp;rsquo; default behavior of checking that the element is visible, clickable and not disabled by setting &lt;code&gt;force&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in the options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d243b7020b63c577424f535262ee8cfa58047b4" translate="yes" xml:space="preserve">
          <source>You can include the plugin &lt;a href=&quot;https://github.com/bahmutov/cypress-failed-log&quot;&gt;cypress-failed-log&lt;/a&gt; in your tests. This plugin writes the list of Cypress commands to the terminal as well as a JSON file if a test fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1d30e37722e1b89ae1d58cf72a5a09f71edab6" translate="yes" xml:space="preserve">
          <source>You can increase the time allowed to execute the command, although &lt;em&gt;we don&amp;rsquo;t recommend executing commands that take a long time to exit&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e453d00f6b5098c7e698201618716ea58d6a03" translate="yes" xml:space="preserve">
          <source>You can increase the time allowed to execute the task, although &lt;em&gt;we do not recommend executing tasks that take a long time to exit&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3d1f1d6559c8bf05d9a09a07ef4ad28cc7914f" translate="yes" xml:space="preserve">
          <source>You can install any published plugin using NPM:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95865b257586d6d508c100cd98a91fa2af8be80" translate="yes" xml:space="preserve">
          <source>You can install the Cypress binary from any URL or file path using the &lt;a href=&quot;../getting-started/installing-cypress#Advanced&quot;&gt;&lt;code&gt;CYPRESS_BINARY_VERSION&lt;/code&gt; environment variable&lt;/a&gt;. Closes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/701&quot;&gt;#701&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b275caa249f35789b5a6b52732b967117fffee73" translate="yes" xml:space="preserve">
          <source>You can integrate your project with GitHub and edit its settings from within the project settings page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86219c109eae21cebe8d7d1faa0d1a5a1b24b254" translate="yes" xml:space="preserve">
          <source>You can invite users to Cypress from the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt;. Invited users will see all projects and tests run for the organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c434326252254bff882591bbc39c757ede2834" translate="yes" xml:space="preserve">
          <source>You can launch Chrome browsers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74dfe23dfd1d16ee92fb1e884cf413a8c9dec34c" translate="yes" xml:space="preserve">
          <source>You can launch any supported browser by specifying a path to the binary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e2dc84ba3c1deb51d796174810752816157a0d" translate="yes" xml:space="preserve">
          <source>You can make use of aliasing, &lt;a href=&quot;as&quot;&gt;&lt;code&gt;.as()&lt;/code&gt;&lt;/a&gt;, instead of working directly with the yielded data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba9d241fe58b4fd51988a52e710fb3ab9759bbb6" translate="yes" xml:space="preserve">
          <source>You can modify a command&amp;rsquo;s timeout. This timeout affects both its default assertions (if any) and any specific assertions you&amp;rsquo;ve added.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e9ded55098e6a24261534757bba5462a9b2f089" translate="yes" xml:space="preserve">
          <source>You can modify fixture data directly before passing it along to a route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268849d6550ed973e88233729fd806557475af6f" translate="yes" xml:space="preserve">
          <source>You can modify the folder configuration in your &lt;code&gt;cypress.json&lt;/code&gt;. See &lt;a href=&quot;../references/configuration#Folders-Files&quot;&gt;configuration&lt;/a&gt; for more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38963574c45938411d77bb86650a9bb6c1772c18" translate="yes" xml:space="preserve">
          <source>You can modify the global defaults and whitelist a set of Cookies which will always be preserved across tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e314c1b8a88bd78d2167d2e1acfd3c1a1b764d" translate="yes" xml:space="preserve">
          <source>You can nest fixtures within folders and reference them by defining the path from the fixturesFolder:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5258c2451cd4a326e045ffa1956e6f735e66b388" translate="yes" xml:space="preserve">
          <source>You can no longer improperly use &lt;a href=&quot;../../api/commands/its&quot;&gt;&lt;code&gt;.its()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/invoke&quot;&gt;&lt;code&gt;.invoke()&lt;/code&gt;&lt;/a&gt;. Using &lt;a href=&quot;../../api/commands/invoke&quot;&gt;&lt;code&gt;.invoke()&lt;/code&gt;&lt;/a&gt; on a non function property will result in an error that tells you how to write it properly using &lt;a href=&quot;../../api/commands/its&quot;&gt;&lt;code&gt;.its()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece224cc6591037f5d9540aab7d82ff657aa2511" translate="yes" xml:space="preserve">
          <source>You can now &lt;a href=&quot;../../api/events/catalog-of-events&quot;&gt;disable Cypress global exception handlers&lt;/a&gt; for your application. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/254&quot;&gt;#254&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6c8741bc92d985041c76c28111a4e5bec73e60" translate="yes" xml:space="preserve">
          <source>You can now &lt;a href=&quot;../getting-started/installing-cypress&quot;&gt;install Cypress as a real &lt;code&gt;npm&lt;/code&gt; module&lt;/a&gt;, and even &lt;code&gt;require&lt;/code&gt; it in your node files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5680e07c33853ea5c9b4de59fbef6b160e725b11" translate="yes" xml:space="preserve">
          <source>You can now &lt;a href=&quot;../tooling/reporters&quot;&gt;add or write your own custom reporters&lt;/a&gt;. This means you can &lt;code&gt;npm install xyz-mocha-reporter&lt;/code&gt; and we&amp;rsquo;ll automatically correctly &lt;code&gt;require&lt;/code&gt; that package. Alternatively you can write your own &lt;code&gt;xyz-custom_reporter.js&lt;/code&gt; file. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/231&quot;&gt;#231&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0765f34270ac09c7d9ced98e0e75f5138ceb2326" translate="yes" xml:space="preserve">
          <source>You can now call &lt;a href=&quot;../../api/commands/focus&quot;&gt;&lt;code&gt;.focus()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/blur&quot;&gt;&lt;code&gt;.blur()&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;../../api/commands/window&quot;&gt;&lt;code&gt;cy.window()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8feefa9fed92a283287c1cb630012766eac5156c" translate="yes" xml:space="preserve">
          <source>You can now customize the default Babe; configuration options for the Browserify preprocessor. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/343&quot;&gt;#343&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/905&quot;&gt;#905&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6122353f44506f72a3680590c0f0b5087d6858af" translate="yes" xml:space="preserve">
          <source>You can now disable &lt;code&gt;videoCompression&lt;/code&gt; by passing &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;cypress.json&lt;/code&gt; or env variables. In very long runs and on CPU throttled instances compression can take a considerable amount of time, possibly as much as 50% of the time spent running actual tests. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/372&quot;&gt;#372&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="712559d3a93d9cdad79cd3343451ce05ecd5814a" translate="yes" xml:space="preserve">
          <source>You can now disable the force sending of &lt;code&gt;404&lt;/code&gt; to all XHR&amp;rsquo;s which are not stubbed. This allows you to mix and match, enabling some requests to be stubbed and others to hit your server and respond normally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d67d23501ad6a8707df3918f7feae7d0572c0b" translate="yes" xml:space="preserve">
          <source>You can now force other additional response headers to be sent on stubbed XHRs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899619b79724c677d1afafc90146b76d878a885c" translate="yes" xml:space="preserve">
          <source>You can now opt out of sending exceptions to &lt;code&gt;https://api.cypress.io&lt;/code&gt; by setting &lt;code&gt;CYPRESS_CRASH_REPORTS=0&lt;/code&gt; in your system environment variables. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/4386&quot;&gt;#4386&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9e11c211b7518d8b0d00cb81d803e6bc1ccdde" translate="yes" xml:space="preserve">
          <source>You can now overwrite existing commands with &lt;a href=&quot;../../api/cypress-api/custom-commands&quot;&gt;&lt;code&gt;Cypress.Commands.overwrite&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9559413240a3ca49f0aeb8a6bb2ed1190c0fa94a" translate="yes" xml:space="preserve">
          <source>You can now pass a &lt;code&gt;flag&lt;/code&gt; option to &lt;a href=&quot;../../api/commands/writefile&quot;&gt;&lt;code&gt;cy.writeFile()&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;https://nodejs.org/api/fs.html#fs_file_system_flags&quot;&gt;following flags&lt;/a&gt; are available. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1249&quot;&gt;#1249&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d2b0974800617df9ce9d53af5d17e80ee10d79" translate="yes" xml:space="preserve">
          <source>You can now pass a browser option to &lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run&lt;/code&gt;&lt;/a&gt; as &lt;code&gt;--browser &amp;lt;browser name&amp;gt;&lt;/code&gt;. This enables you to run the same set of browsers when running from the CLI as when you&amp;rsquo;re running from the GUI. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/462&quot;&gt;#462&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/531&quot;&gt;#531&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e480fde137a4b850caed59f517e6b52aed45fc" translate="yes" xml:space="preserve">
          <source>You can now pass a normal object to &lt;code&gt;cypress.open()&lt;/code&gt; or &lt;code&gt;cypress.run()&lt;/code&gt; through the &lt;a href=&quot;../guides/module-api&quot;&gt;Module API&lt;/a&gt;, just as you would from the command line. &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1442&quot;&gt;#1442&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0785a54f6c3288ada1c045b8687dacb180c62e42" translate="yes" xml:space="preserve">
          <source>You can now pass an object literal as &lt;code&gt;config&lt;/code&gt; when using Cypress as a node module. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/639&quot;&gt;#639&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b3b1753fed5f2d2b7b2d7c23e19df557bac55b1" translate="yes" xml:space="preserve">
          <source>You can now pass keyboard modifiers such as &lt;code&gt;ctrl&lt;/code&gt;, &lt;code&gt;cmd&lt;/code&gt;, &lt;code&gt;shift&lt;/code&gt;, and &lt;code&gt;alt&lt;/code&gt; to &lt;a href=&quot;../../api/commands/type&quot;&gt;&lt;code&gt;.type()&lt;/code&gt;&lt;/a&gt;. In addition we&amp;rsquo;ve added support for not &amp;ldquo;releasing&amp;rdquo; these keys so they can affect other actions such as &lt;a href=&quot;../../api/commands/click&quot;&gt;&lt;code&gt;.click()&lt;/code&gt;&lt;/a&gt;. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/196&quot;&gt;#196&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a81d9c165fdd3ac6701832c2f5e0182d43e7295d" translate="yes" xml:space="preserve">
          <source>You can now programmatically &lt;a href=&quot;../../api/events/catalog-of-events&quot;&gt;intercept and potentially turn off uncaught application errors&lt;/a&gt; from failing your tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138d7132a9353a5b49ed6b47667bd99c0281d4b2" translate="yes" xml:space="preserve">
          <source>You can now programmatically control whether you accept or cancel &lt;a href=&quot;../../api/events/catalog-of-events&quot;&gt;&lt;code&gt;window.confirm()&lt;/code&gt;&lt;/a&gt; calls from your application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7623fcd4d1628bae4e1b7ad1761dcbef8afc7a70" translate="yes" xml:space="preserve">
          <source>You can now run all of your tests inside of the GUI App.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64804a37af779bbe2592b2c3bf4afaaa3e219e2" translate="yes" xml:space="preserve">
          <source>You can now run and omit the &lt;code&gt;--key&lt;/code&gt; flag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf62b732cce7d08d2b31bcd631494149ab3518e" translate="yes" xml:space="preserve">
          <source>You can now run multiple specs by passing a glob to the &lt;code&gt;--spec&lt;/code&gt; argument of &lt;code&gt;cypress run&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/263&quot;&gt;#263&lt;/a&gt;, &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/416&quot;&gt;#416&lt;/a&gt; and &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/681&quot;&gt;#681&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45640b87476c3305f0b7e13caef65bb39c529a54" translate="yes" xml:space="preserve">
          <source>You can now run your tests in the &lt;a href=&quot;../guides/launching-browsers#Electron-Browser&quot;&gt;Electron browser&lt;/a&gt; that comes built with Cypress. You will see it as an option in the browser dropdown. This is the same browser that Cypress uses when running &lt;code&gt;cypress run&lt;/code&gt;. This is useful for debugging issues that only occur during headless runs. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/452&quot;&gt;#452&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec53cb8fd64f5f52a4282b6c5e9cd12983e338da" translate="yes" xml:space="preserve">
          <source>You can now set the default &lt;a href=&quot;configuration&quot;&gt;&lt;code&gt;reporter&lt;/code&gt;&lt;/a&gt; in &lt;code&gt;cypress.json&lt;/code&gt; for use during &lt;code&gt;cypress run&lt;/code&gt; or in CI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5379dfca4df4d3b27774dbb439c7dfe0adf4fe" translate="yes" xml:space="preserve">
          <source>You can now stop and restart tests from the UI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc14b634efcdaee12ffae4a5baf0f8512a6f38ef" translate="yes" xml:space="preserve">
          <source>You can now turn off &lt;code&gt;supportFolder&lt;/code&gt; and &lt;code&gt;fixturesFolder&lt;/code&gt; by passing &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;cypress.json&lt;/code&gt;. This will automatically remove the folders the next time you open your project in Cypress. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/102&quot;&gt;#102&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4721446938ebfeb10d08fe7b676b4f960b45827" translate="yes" xml:space="preserve">
          <source>You can now type into the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; or &lt;code&gt;document&lt;/code&gt; as opposed to previously &lt;em&gt;having&lt;/em&gt; to target a valid focusable element. This is useful in situations where you&amp;rsquo;re testing keyboard shortcuts and do not want to target a specific element. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/150&quot;&gt;#150&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ef09dd6a0cadfc84b178dfb9fb73fdbd41e818e" translate="yes" xml:space="preserve">
          <source>You can now use &lt;a href=&quot;../../api/commands/focus&quot;&gt;&lt;code&gt;.focus()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../api/commands/blur&quot;&gt;&lt;code&gt;.blur()&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;cy.get('body')&lt;/code&gt;. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/2235&quot;&gt;#2235&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942d3b9d1d9095e8dd2beb6c2f1c97aca0c68f0e" translate="yes" xml:space="preserve">
          <source>You can now use &lt;a href=&quot;../../api/commands/stub&quot;&gt;&lt;code&gt;cy.stub()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/spy&quot;&gt;&lt;code&gt;cy.spy()&lt;/code&gt;&lt;/a&gt; synchronously. These both match the Sinon API identically. We will display &lt;code&gt;stub/spy&lt;/code&gt; calls in the Command Log and provide the call count, arguments, context, and return values when you click on the log. Stubs are automatically reset between tests. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/377&quot;&gt;#377&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e8206517830b8225596c03133251ab6833111c" translate="yes" xml:space="preserve">
          <source>You can now use environment variables that have a &lt;code&gt;=&lt;/code&gt; character as values. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/620&quot;&gt;#620&lt;/a&gt;. Contributed by &lt;a href=&quot;https://github.com/HugoGiraudel&quot;&gt;@HugoGiraudel&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bbd0400cd893e20dc7cee46c1fa1932fe383f9" translate="yes" xml:space="preserve">
          <source>You can now use the Test Runner application without logging in. Some areas of the application still require logging in through GitHub, like the &amp;lsquo;Runs&amp;rsquo; tab and viewing the project&amp;rsquo;s &amp;lsquo;Record Key&amp;rsquo;. The only places where login is required is when it interacts with our external servers. Naturally these places are optional and will not affect the local test writing + running experience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8de4972db5eb3c931e400e2a110f6c96d78cd5b2" translate="yes" xml:space="preserve">
          <source>You can now use your regularly installed &lt;code&gt;node_modules&lt;/code&gt; in your project to do things like utilizing &lt;a href=&quot;https://lodash.com/&quot;&gt;&lt;code&gt;lodash&lt;/code&gt;&lt;/a&gt; for utility functions or extending &lt;a href=&quot;http://www.chaijs.com/&quot;&gt;&lt;code&gt;chai&lt;/code&gt;&lt;/a&gt; with assertion plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95297733ad8226fb0378093b3ac94e6ce247e579" translate="yes" xml:space="preserve">
          <source>You can now zoom in the main Test Runner window and also the Electron browser. Corresponding keyboard shortcuts for Zoom in, Zoom out and Actual Size are also available. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/1231&quot;&gt;#1231&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be6e5857a73b45348dde23e2452fc92891dee85" translate="yes" xml:space="preserve">
          <source>You can pass &lt;code&gt;--headed --no-exit&lt;/code&gt; in order to view the &lt;strong&gt;command log&lt;/strong&gt; or have access to &lt;strong&gt;developer tools&lt;/strong&gt; after a &lt;code&gt;spec&lt;/code&gt; has run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6cd293bdd6cb1e8bb1cbe322a68a49007a7c1b" translate="yes" xml:space="preserve">
          <source>You can pass &lt;code&gt;{ force: true }&lt;/code&gt; to most action commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e8f933c73a0a7fdcfc434c40860ed412dde843" translate="yes" xml:space="preserve">
          <source>You can pass a different value to link agents to the same run. For example, if you are using Jenkins and think the environment variable &lt;code&gt;BUILD_TAG&lt;/code&gt; is more unique than the environment variable &lt;code&gt;BUILD_NUMBER&lt;/code&gt;, pass the &lt;code&gt;BUILD_TAG&lt;/code&gt; value via CLI &lt;a href=&quot;command-line#cypress-run-ci-build-id-lt-id-gt&quot;&gt;&lt;code&gt;--ci-build-id&lt;/code&gt; flag&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09383e1d5f1fbad75c9300dd9efb4373486f2d9b" translate="yes" xml:space="preserve">
          <source>You can pass an array of aliases that will be waited on before resolving.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa5e9a56cb2b2c60dc571c37bff5374f786fef3" translate="yes" xml:space="preserve">
          <source>You can pass in a &lt;code&gt;delay&lt;/code&gt; option that causes a delay (in ms) to the &lt;code&gt;response&lt;/code&gt; for matched requests. The example below will cause the response to be delayed by 3 secs. This can be useful for testing loading states, like loading spinners, in the DOM before the request responds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95596200293024877f6efba1b6965118d0a1a1d2" translate="yes" xml:space="preserve">
          <source>You can preview all issues addressed from a pre-release version &lt;a href=&quot;https://github.com/cypress-io/cypress/issues?utf8=%E2%9C%93&amp;amp;q=label%3A%22stage%3A+pending+release%22+&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a25889c934de24f12625a4e517844ca663b8be" translate="yes" xml:space="preserve">
          <source>You can programmatically modify these values and Cypress will then respect these changes. This enables you to swap out configuration based on things like the environment you&amp;rsquo;re running in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c924b81f8b6a5f981ef5f631b0fc68ee89248d8" translate="yes" xml:space="preserve">
          <source>You can quickly get to a project&amp;rsquo;s GitHub Integrations settings, by clicking on the &lt;strong&gt;Configure&lt;/strong&gt; link of the desired project within an organization&amp;rsquo;s Integrations page:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d482e895eaa5b3578ddfb67a017dd106d821e27c" translate="yes" xml:space="preserve">
          <source>You can read all about how to do &lt;a href=&quot;conditional-testing&quot;&gt;conditional testing&lt;/a&gt; here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093d8c97f842f7cee5f704db68c73235cfd0a099" translate="yes" xml:space="preserve">
          <source>You can refer to each of these libraries&amp;rsquo; documentation for more examples and explanations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4220931c77cd1b78d9b949f7d01e10002cca5a7" translate="yes" xml:space="preserve">
          <source>You can require Cypress as a node module from your application under test. This can be useful when you want to access to the test results directly after the run. With this workflow, for example, you can:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9729098893650c87d3fe783fa897d1c93cb9e161" translate="yes" xml:space="preserve">
          <source>You can retry any function with attached assertions using this 3rd party plugin &lt;a href=&quot;https://github.com/NicholasBoll/cypress-pipe&quot;&gt;cypress-pipe&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b021998ab49659091a319a0899f8da252e029c4" translate="yes" xml:space="preserve">
          <source>You can return a synchronous function, or you can also return a Promise, and it will be awaited until it resolves. This enables you to perform asynchronous actions in your exported function such as reading files in from the filesystem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3b3c87f4945d647d11b09a1116a3b25970d659" translate="yes" xml:space="preserve">
          <source>You can return an object or a promise that resolves an object from the callback function. Any type of value other than an object will be ignored. The object can contain the following properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0972f826468d740f3213d9220231dfa30ce1b776" translate="yes" xml:space="preserve">
          <source>You can run the test command by command using the &lt;a href=&quot;../../api/commands/pause&quot;&gt;&lt;code&gt;.pause()&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e33a7c5024a9118c78fd8bb1e3b79de0e8a5bf" translate="yes" xml:space="preserve">
          <source>You can run your Node server and instrument it using nyc on the fly. Instead of the &amp;ldquo;normal&amp;rdquo; server start command, you can run the command &lt;code&gt;npm run start:coverage&lt;/code&gt; defined in the &lt;code&gt;package.json&lt;/code&gt; like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cfaeb1e1f89a0964091e9a595d48ec43b62b037" translate="yes" xml:space="preserve">
          <source>You can safely remove: &lt;code&gt;{stub: false}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f10e4d69193f7784523fb19f369fd1f495bca3" translate="yes" xml:space="preserve">
          <source>You can safely skip down to the bottom where we provide examples of conditional testing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4028c8615256dad9fb86aab718b3986f1cf37299" translate="yes" xml:space="preserve">
          <source>You can see a walk-through of debugging some application code from Cypress &lt;a href=&quot;https://vimeo.com/242961930#t=264s&quot;&gt;in this segment from our React tutorial series&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c564a93b8efa760ea99e7aaeaaca4a085f950583" translate="yes" xml:space="preserve">
          <source>You can see all of the default chrome command line switches we send &lt;a href=&quot;https://github.com/cypress-io/cypress/blob/develop/packages/server/lib/browsers/chrome.coffee#L18&quot;&gt;here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c359e34437ce9859dd9f80925e6c22da34fa740" translate="yes" xml:space="preserve">
          <source>You can see screenshots taken during a CI run in the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt; without any extra work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6c5eac75cd6906abb941afb985054a42e14b08" translate="yes" xml:space="preserve">
          <source>You can see the result of each spec file that ran within &lt;strong&gt;Specs&lt;/strong&gt;. There is also the option to switch between &lt;strong&gt;Timeline View&lt;/strong&gt; and &lt;strong&gt;Bar Chart View&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41f6257cca856552f249e6281ad4d60617a042db" translate="yes" xml:space="preserve">
          <source>You can see the result of each spec file that ran within the &lt;a href=&quot;../dashboard/introduction&quot;&gt;Dashboard Service&lt;/a&gt; in the run&amp;rsquo;s &lt;strong&gt;Specs&lt;/strong&gt; tab. Specs are visualized within a &lt;strong&gt;Timeline&lt;/strong&gt;, &lt;strong&gt;Bar Chart&lt;/strong&gt;, and &lt;strong&gt;Machines&lt;/strong&gt; view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6b763e3ac6f797b65d890fcd00e07b4ade0a86" translate="yes" xml:space="preserve">
          <source>You can set any configuration value as an environment variable. This overrides values in your &lt;code&gt;cypress.json&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda536015f20293e9b0642a848b69cc95bec4799" translate="yes" xml:space="preserve">
          <source>You can set the record key as the environment variable, &lt;code&gt;CYPRESS_RECORD_KEY&lt;/code&gt;, and we&amp;rsquo;ll automatically use that value. You can now omit the &lt;code&gt;--key&lt;/code&gt; flag when recording.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6224baca389961718809e590054e78945b5cfff" translate="yes" xml:space="preserve">
          <source>You can set the viewport&amp;rsquo;s width and height globally by defining &lt;code&gt;viewportWidth&lt;/code&gt; and &lt;code&gt;viewportHeight&lt;/code&gt; in the &lt;a href=&quot;../../guides/references/configuration&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cff7dd3fa7c5f93754a82bd39bf2f7aad1c06dd" translate="yes" xml:space="preserve">
          <source>You can set various environment variables to modify how Cypress runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ad40832dc09fa34ee7e9dc311cd9bad9d0989a3" translate="yes" xml:space="preserve">
          <source>You can specify reporter options using the &lt;code&gt;--reporter-options &amp;lt;reporter-options&amp;gt;&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d7fc61b5efd85c34d5a76e8baa7c036858d513a" translate="yes" xml:space="preserve">
          <source>You can stop the &lt;code&gt;.each()&lt;/code&gt; loop early by returning &lt;code&gt;false&lt;/code&gt; in the callback function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="723230f0b51a80b0ce7659307d00661884fda0fc" translate="yes" xml:space="preserve">
          <source>You can swap out or extend the default preprocessor to do exotic things like compile ClojureScript into JavaScript. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/533&quot;&gt;#533&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910364632dda2057719acd8eaf346fa0ff511e1b" translate="yes" xml:space="preserve">
          <source>You can take advantage of &lt;code&gt;Cypress.Cookies.preserveOnce()&lt;/code&gt; or even &lt;em&gt;whitelist&lt;/em&gt; cookies by their name to preserve values across multiple tests. This enables you to preserve sessions through several tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9e9d7a70afff61bf7e7c51a872422b1e56906d" translate="yes" xml:space="preserve">
          <source>You can test a route multiple times with unique response objects by using &lt;a href=&quot;../../guides/core-concepts/variables-and-aliases#Aliases&quot;&gt;aliases&lt;/a&gt; and &lt;a href=&quot;wait&quot;&gt;&lt;code&gt;cy.wait()&lt;/code&gt;&lt;/a&gt;. Each time we use &lt;code&gt;cy.wait()&lt;/code&gt; for an alias, Cypress waits for the next nth matching request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb0f582a4050b96bd8879a4624c30a616c80c95" translate="yes" xml:space="preserve">
          <source>You can test your application against different browsers and view the results under a single run within the Dashboard. Below, we simple name our groups the same name as the browser being tested:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f598c2ccf2c64fff3b267ea99d6f81ec096ae000" translate="yes" xml:space="preserve">
          <source>You can tests specifying a specific &lt;a href=&quot;../tooling/reporters&quot;&gt;Mocha reporter&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc0d43325e06aca5a0d873b3d4344134575dbf1" translate="yes" xml:space="preserve">
          <source>You can think of Cypress as &amp;ldquo;queueing&amp;rdquo; every command. Eventually they&amp;rsquo;ll get run and in the exact order they were used, 100% of the time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54603838932f21824ed30912e6fb2f69afb7d0ca" translate="yes" xml:space="preserve">
          <source>You can think of the &lt;code&gt;cy.get('@users')&lt;/code&gt; as doing the same thing as &lt;a href=&quot;../../api/commands/wrap&quot;&gt;&lt;code&gt;cy.wrap(this.users)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca47aeb19ed661c5051ca536eef4f865413b79de" translate="yes" xml:space="preserve">
          <source>You can transfer projects that you own to another &lt;a href=&quot;organizations&quot;&gt;organization&lt;/a&gt; you are a part of or to another user in the organization. Projects can only be transferred from the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard Service&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe7784508f1cad1a7d1e5aecbac9aff8099a369" translate="yes" xml:space="preserve">
          <source>You can turn this option off if the application or site you&amp;rsquo;re testing &lt;strong&gt;does not&lt;/strong&gt; implement these security measures. Additionally it&amp;rsquo;s possible that the patterns we search for may accidentally rewrite valid JS code. If that&amp;rsquo;s the case, please disable this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff1d7d303c6b75ddbf9d379a5b40ec67323d99c1" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;Cypress.Cookies.preserveOnce()&lt;/code&gt; to preserve cookies through multiple tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fbf0f35afe641f630c5e5a1c2bb8aa3d20bfc6" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;back&lt;/code&gt; or &lt;code&gt;forward&lt;/code&gt; to go one step back or forward. You could also navigate to a specific history position (&lt;code&gt;-1&lt;/code&gt; goes back one page, &lt;code&gt;1&lt;/code&gt; goes forward one page, etc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ea80f173471d85895c6e0bd8b66c66d1296bda" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;cy.get()&lt;/code&gt; for aliases of primitives, regular objects, or even DOM elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f8c171cf96b96e43f2bf2f4e7d4b2ef52f45317" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;--env&lt;/code&gt; argument for &lt;a href=&quot;command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="461eab789254757280fbe7008ba0fd099a02dc86" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;after:screenshot&lt;/code&gt; event to do things like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a22587d009d55d15f0dff907cab2634f8adcb22" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;before:browser:launch&lt;/code&gt; event to do things like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d063686ec5c268bcf7070a7e5b7a25e195f90a25" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;file:preprocessor&lt;/code&gt; event to do things like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd032a1b23aef5cfe1bad82782cb9e315a1835ee" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;task&lt;/code&gt; event to do things like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2888ec9200752a82767de747b9cba4649fa2059c" translate="yes" xml:space="preserve">
          <source>You can use the CLI tool to run Cypress in CI. The documentation for this needs to be written, but it will be very simple to do. You will robably only have to write 2 lines in your CI scripts to run Cypress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5547da28e894548399a5fa22b4b50847593cc98c" translate="yes" xml:space="preserve">
          <source>You can use the Developer Tools while your tests run, you can see every console message, every network request. You can inspect elements, and you can even use debugger statements in your spec code or your application code. There is no fidelity loss - you can use all the tools you&amp;rsquo;re already comfortable with. This enables you to test and develop all at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c184cef359b33488d0c085a316fc7e2907efea81" translate="yes" xml:space="preserve">
          <source>You can use the new environment variable &lt;a href=&quot;../guides/command-line#Debugging-commands&quot;&gt;&lt;code&gt;DEBUG=cypress:cli&lt;/code&gt;&lt;/a&gt; to see debugging output from the CLI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e28fa754123a8e59c649c7722e1de8b000fb3d" translate="yes" xml:space="preserve">
          <source>You can wrap promises returned by the application code. Cypress commands will automatically wait for the promise to resolve before continuing with the yielded value to the next command or assertion. See the &lt;a href=&quot;https://docs.cypress.io/examples/examples/recipes.html#Logging-In&quot;&gt;Logging in using application code&lt;/a&gt; recipe for the full example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1595dbd98eb985f69549e9fe4fc0d58d6c4474" translate="yes" xml:space="preserve">
          <source>You can write your own custom reporter which Cypress can use in CI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f43a3a230ce840c57b1d2e85fba58af6b4d7348" translate="yes" xml:space="preserve">
          <source>You cannot &amp;lsquo;accidentally&amp;rsquo; forget to return or chain a command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ad860ac0e8b6e451fbd07b0e592e3e2409c1b2f" translate="yes" xml:space="preserve">
          <source>You cannot &lt;a href=&quot;../../api/commands/visit&quot;&gt;&lt;code&gt;cy.visit()&lt;/code&gt;&lt;/a&gt; two different super domains within a single test. Example: &lt;code&gt;cy.visit('https://google.com').visit('https://apple.com')&lt;/code&gt;. There shouldn&amp;rsquo;t be any reason you ever need to do this in a single test, if you do, you should make these two separate tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edcbd74da8496cd823f72d660c829af32b64e41f" translate="yes" xml:space="preserve">
          <source>You cannot &lt;strong&gt;race&lt;/strong&gt; or run multiple commands at the same time (in parallel).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e175a922719286679bd036516770e57c9585aa4" translate="yes" xml:space="preserve">
          <source>You cannot accidentally forget to return or chain a command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4cbcf681c38f6f8994caa502d9bab3bcb147e3" translate="yes" xml:space="preserve">
          <source>You cannot add a &lt;code&gt;.catch&lt;/code&gt; error handler to a failed command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60932948e6aa35c099d499cc17a967d91a40855e" translate="yes" xml:space="preserve">
          <source>You cannot add a &lt;code&gt;.catch&lt;/code&gt; error handler to a failed command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06445bda2c15c330aebc4c0ec7ef389b2db8965" translate="yes" xml:space="preserve">
          <source>You cannot do conditional testing on the DOM unless you are either:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17fec2f5716bb410d015cec146346f2fa3bb8898" translate="yes" xml:space="preserve">
          <source>You cannot race or run multiple commands at the same time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41920e271f7f01a8967101548cb3191382c31125" translate="yes" xml:space="preserve">
          <source>You cannot run tests on a run that has been complete for that long.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3163e436a13ac260b88f565ac76aea617306ea74" translate="yes" xml:space="preserve">
          <source>You cannot use Cypress to drive &lt;a href=&quot;#Multiple-browsers-open-at-the-same-time&quot;&gt;two browsers at the same time&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8469dc23f44adc095a60b2e9c81980693ea63ea2" translate="yes" xml:space="preserve">
          <source>You cannot use a &lt;code&gt;this.*&lt;/code&gt; reference until the &lt;code&gt;.as()&lt;/code&gt; command runs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158d8ab9f0429c198eae4f5363176f454dcf7c17" translate="yes" xml:space="preserve">
          <source>You cannot use the &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag with this group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7529afa2e0c4975a51584b9f98767da8553313" translate="yes" xml:space="preserve">
          <source>You could &lt;code&gt;cy.request()&lt;/code&gt; an endpoint on your server that tells you what email has been queued or delivered. That would give you a programmatic way to know without involving the UI. Your server would have to expose this endpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1987762737a03f1eaa4c8d66fede66fbd050bff0" translate="yes" xml:space="preserve">
          <source>You could also use &lt;code&gt;cy.request()&lt;/code&gt; to a 3rd party server that exposes an API to read off emails. You will then need the proper authentication credentials, which your server could provide, or you could use environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104e8ae8791a932080c229fd93a30dd054794043" translate="yes" xml:space="preserve">
          <source>You could have the server generate all of the fixture stubs for you ahead of time. This means their data will reflect what the server will actually send.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7910ea53f7005e53f967ab1794dc027d679ae72d" translate="yes" xml:space="preserve">
          <source>You could now swap out configuration + environment variables like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb2e4df8c0656d511756a2c689acc6e3432980b" translate="yes" xml:space="preserve">
          <source>You could technically write a functional test asserting the CSS properties using the &lt;a href=&quot;../references/assertions#CSS&quot;&gt;&lt;code&gt;have.css&lt;/code&gt; assertion&lt;/a&gt;, but these may quickly become cumbersome to write and maintain, especially when visual styles rely on a lot of CSS styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56cfbee519983ca12118924a1e8d72929fe3a73" translate="yes" xml:space="preserve">
          <source>You did not pass the &lt;code&gt;--parallel&lt;/code&gt; flag, but this run&amp;rsquo;s group was originally created with the &lt;code&gt;--parallel&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0687c1cb29102e05fe935b827b4fb58b626daf3" translate="yes" xml:space="preserve">
          <source>You do not have internet. Please ensure you have connectivity then try again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ebb08807f8467c3baa92aab177136cfe19f916d" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t have access to its &lt;code&gt;stdout&lt;/code&gt; or logs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0126e92e25485f78c3532cec1498597ea32832b7" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t have to do any work on the server. Your application will have no idea its requests are being stubbed, so there are &lt;em&gt;no code changes&lt;/em&gt; needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fd52a384943e856094a196daec57ed33db33601" translate="yes" xml:space="preserve">
          <source>You don&amp;rsquo;t need to write &lt;a href=&quot;../../api/commands/should&quot;&gt;&lt;code&gt;.should('exist')&lt;/code&gt;&lt;/a&gt; after a DOM based command, unless you chain extra &lt;code&gt;.should()&lt;/code&gt; assertions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ae0f46cd5028c64357005b637da1e0b2ab2790" translate="yes" xml:space="preserve">
          <source>You generally stub a function when it has side effects you are trying to control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99f377b674c94b3286d6cb5e7ecaa062dc7d38e" translate="yes" xml:space="preserve">
          <source>You have &lt;strong&gt;throttled&lt;/strong&gt; or &lt;strong&gt;debounced&lt;/strong&gt; functions which you want to control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc64cd1b99c70deaf9cc3fe22b04c3013ad0e431" translate="yes" xml:space="preserve">
          <source>You have a function that accepts a callback, and want to invoke the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd3f4f0ebd0dca22a1dcd447a664a29c3b6980f0" translate="yes" xml:space="preserve">
          <source>You have a function that wraps &lt;code&gt;window.location&lt;/code&gt; and don&amp;rsquo;t want your application to be navigated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ed1d11298a43c9ce48b38e37047d88a82a48ce" translate="yes" xml:space="preserve">
          <source>You have to background the process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c8d15827b01794b5cc30ea2966ee50d741af27" translate="yes" xml:space="preserve">
          <source>You lose access to it via terminal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75c9d45f4847e30614a7f9015285087441860f6" translate="yes" xml:space="preserve">
          <source>You may ask about this functionality like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a678e4287be446ca7bd68c1b4ec4b567229969f" translate="yes" xml:space="preserve">
          <source>You may be wondering - why can&amp;rsquo;t I just visit my application that&amp;rsquo;s already in production?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe46960c9b571f01fb886747f9b86d67017597a7" translate="yes" xml:space="preserve">
          <source>You may find it easier to add the cypress command to the &lt;code&gt;scripts&lt;/code&gt; object in your &lt;code&gt;package.json&lt;/code&gt; file and call it from an &lt;a href=&quot;https://docs.npmjs.com/cli/run-script.html&quot;&gt;&lt;code&gt;npm run&lt;/code&gt; script&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c7097da7005bfcf247b0b587beb54947fc36c5e" translate="yes" xml:space="preserve">
          <source>You may find yourself struggling to write good selectors because:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d1781ba76280835315dcc743d2074be13d561f" translate="yes" xml:space="preserve">
          <source>You may receive this error when trying to run Cypress tests in &lt;a href=&quot;../guides/continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;. This means that you did not pass a specific record key to: &lt;a href=&quot;../guides/command-line#cypress-run&quot;&gt;&lt;code&gt;cypress run --record&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84cb86761cfe44218be0931dbb8e5d611e28b8d" translate="yes" xml:space="preserve">
          <source>You may see a variation of this message for 4 different reasons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf846455ac81f29a25c1ffcfc5b6fa7169829e5" translate="yes" xml:space="preserve">
          <source>You may think this works:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39fa45d8c9330205ec0eead9254882946c668316" translate="yes" xml:space="preserve">
          <source>You may think to yourself&amp;hellip; okay fine, but 4 seconds - man that&amp;rsquo;s not enough. Network requests could be slow, let&amp;rsquo;s bump it up to 1 minute!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f633f517449880b309666041e3d8b9f5dfc3d38" translate="yes" xml:space="preserve">
          <source>You may want to access 3rd party servers in several situations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9be79bbd4186950ab6781451ae03f3d8d688a42" translate="yes" xml:space="preserve">
          <source>You may want to define the &lt;code&gt;cy.route()&lt;/code&gt; after receiving the fixture and working with its data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3b6f354f217f7055bd9c0f277b95a4e8439bfd8" translate="yes" xml:space="preserve">
          <source>You might also see this phrased as &amp;ldquo;Given, When, Then&amp;rdquo;, or &amp;ldquo;Arrange, Act, Assert&amp;rdquo;. The idea is simple: first you put the application into a specific state, then you take some action in the application that causes it to change, and finally you check the resulting application state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4913f54f941c08d39e498032ec2a0d7b32d57c9" translate="yes" xml:space="preserve">
          <source>You might be wondering:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95121d813021385cf7a3ff4b615ae409e5088641" translate="yes" xml:space="preserve">
          <source>You might notice that if you already have the browser open you will see two of the same browser icons in your Dock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08fc24c39a1287937eb61acb657ec7fb3f6187a7" translate="yes" xml:space="preserve">
          <source>You must use the &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag with this group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9dbe38652921775eaa4cbd40019c5354abac710" translate="yes" xml:space="preserve">
          <source>You need to have your Developer Tools open for &lt;code&gt;.debug()&lt;/code&gt; to hit the breakpoint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0734072bd9e8d93ee9f801ed02f73ec0410a091a" translate="yes" xml:space="preserve">
          <source>You need to install any peer dependencies the reporter requires, even if they&amp;rsquo;re bundled with Cypress. For example, &lt;a href=&quot;https://github.com/adamgruber/mochawesome&quot;&gt;mochawesome&lt;/a&gt; requires &lt;code&gt;mocha&lt;/code&gt; as a peer dependency. You will need to install &lt;code&gt;mocha&lt;/code&gt; as a dev dependency of your own project for it to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cee7a456e0bad2ec1d061cd4635c894f4e610a9" translate="yes" xml:space="preserve">
          <source>You need to manually move your existing test files from &lt;code&gt;tests&lt;/code&gt; into &lt;code&gt;cypress/integration&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c28cd071e011226995eb9347d282026c3679bd0" translate="yes" xml:space="preserve">
          <source>You need to rewrite this as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e710bff1748ea4e2b242bf9fef1c09c2b3d83a5c" translate="yes" xml:space="preserve">
          <source>You no longer have to log in again after updating. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/305&quot;&gt;#305&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3a6cbca443450a553d9932da54cb2266af6112" translate="yes" xml:space="preserve">
          <source>You no longer have to use &lt;code&gt;cypress get:key&lt;/code&gt; to get your Record Key. We now display this in your &amp;ldquo;Settings&amp;rdquo; tab and also in the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48958730eb8bc8cabd82e9c07779575aeaf452ff" translate="yes" xml:space="preserve">
          <source>You now use &lt;code&gt;npm&lt;/code&gt; to manage Cypress versions like every other dev dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e396e64354d20cde2f86731e3f88a57f8b327afa" translate="yes" xml:space="preserve">
          <source>You only need to do one thing to know whether you&amp;rsquo;ve coupled your tests incorrectly, or if one test is relying on the state of a previous one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="589ef582e116899aae5e91f03f8ca34cad7e2a28" translate="yes" xml:space="preserve">
          <source>You passed the --record flag but did not provide us your Record Key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78239b4a65908f84da00e65e60e8b206d9e91939" translate="yes" xml:space="preserve">
          <source>You passed the &lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; flag, but this group name has already been used for this run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d33c8651c8ffd3598e84963bc965c189a42e47" translate="yes" xml:space="preserve">
          <source>You passed the &lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag but we could not automatically determine or generate a &lt;code&gt;ciBuildId&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d72d1bb7deee67e6e8859365b81b9519021bf15" translate="yes" xml:space="preserve">
          <source>You passed the &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag, but we do not parallelize tests across different environments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db5b7a17552c77c6c3eeb0704ccf24740830d32" translate="yes" xml:space="preserve">
          <source>You passed the &lt;code&gt;--ci-build-id&lt;/code&gt; flag but did not provide either a &lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30ac9616ad11c60c23cbcbe827fdb05052af1ca" translate="yes" xml:space="preserve">
          <source>You passed the &lt;code&gt;--ci-build-id&lt;/code&gt;, &lt;a href=&quot;../guides/command-line#cypress-run-group-lt-name-gt&quot;&gt;&lt;code&gt;--group&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../guides/command-line#cypress-run-parallel&quot;&gt;&lt;code&gt;--parallel&lt;/code&gt;&lt;/a&gt; flag without also passing the &lt;code&gt;--record&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65ab52a54959d7f8d0a3998f526abfba2e8c6e0" translate="yes" xml:space="preserve">
          <source>You passed the &lt;code&gt;--parallel&lt;/code&gt; flag, but this run group was originally created without the &lt;code&gt;--parallel&lt;/code&gt; flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24efcae6801e94ebb8d9e6b8fd0fea53a5457fac" translate="yes" xml:space="preserve">
          <source>You passed the &lt;code&gt;--record&lt;/code&gt; flag but did not provide us your Record Key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49267bcbfbe5992865cc05e384fc5972793a6cb5" translate="yes" xml:space="preserve">
          <source>You purposefully &lt;strong&gt;cannot&lt;/strong&gt; do anything useful with the return value from a command. Commands are enqueued and managed entirely behind the scenes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea79327fedbec3620adf1bb96fcb1a743bf9a73" translate="yes" xml:space="preserve">
          <source>You rarely have to ever use &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;var&lt;/code&gt; in Cypress. If you&amp;rsquo;re using them, it&amp;rsquo;s usually a sign you&amp;rsquo;re doing it wrong.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60ff395e16e5c981e5372977d32a1c364a7c4b9f" translate="yes" xml:space="preserve">
          <source>You should think of assertions as &lt;strong&gt;guards&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af7f403d48a3a31f5827244a6be423b803862eb" translate="yes" xml:space="preserve">
          <source>You should think of failed commands in Cypress as akin to uncaught exceptions in server side code. It is not possible to try to recover in those scenarios because the system has transitioned to an unreliable state. Instead you generally always opt to crash and log. When Cypress fails the test - that is exactly what it is doing. Bailing out, skipping any remaining commands in the test, and logging out the failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a94309d47a10e1bed607e8a950f8269cdba95c" translate="yes" xml:space="preserve">
          <source>You typically want to record when running tests in &lt;a href=&quot;../guides/continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;, but you can also record your tests when running locally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd8f04281ee1f5c53e1413afde7e650e5b4983c" translate="yes" xml:space="preserve">
          <source>You want to &amp;ldquo;trick&amp;rdquo; your application into thinking it&amp;rsquo;s logged in or logged out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86280316b3afab18be28e25706a839608e42a65a" translate="yes" xml:space="preserve">
          <source>You were told that adding multiple assertions was bad and accepted this as truth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d489ffbdc5741148a6b66f12538f582ce577dcb5" translate="yes" xml:space="preserve">
          <source>You will always know (and can visually see) which assertion failed in a large test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51c8f85d3b11834ad2939c007acb28167f940528" translate="yes" xml:space="preserve">
          <source>You will commonly use these chainers after using DOM commands like: &lt;a href=&quot;../../api/commands/get&quot;&gt;&lt;code&gt;cy.get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../api/commands/contains&quot;&gt;&lt;code&gt;cy.contains()&lt;/code&gt;&lt;/a&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3330e6fcf3b3976e3fd63dfd447334f21bd9c823" translate="yes" xml:space="preserve">
          <source>You will need to download a new &lt;a href=&quot;../guides/command-line&quot;&gt;cypress-cli&lt;/a&gt; - version &lt;code&gt;0.13.1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d9add928e123fd18e639db8e42c3550b3a3d9c" translate="yes" xml:space="preserve">
          <source>You will need to keep in mind it is &lt;strong&gt;Cypress who is requiring your file&lt;/strong&gt; - not your local project, not your local Node version, and not anything else under your control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d225114070fb7343bd3f5398ecf480625bd1fb25" translate="yes" xml:space="preserve">
          <source>You will need to log in to record your tests, so you will need to log in to the Cypress Dashboard here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34222e531ec9f273447da0cd8e6183116626cf75" translate="yes" xml:space="preserve">
          <source>You will now see a very specific error message when we detect that you&amp;rsquo;ve mixed up &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;sync&lt;/code&gt; code in a &lt;a href=&quot;../../api/commands/then&quot;&gt;&lt;code&gt;.then()&lt;/code&gt;&lt;/a&gt; callback function. An example would be queuing up a new cypress command but then synchronously returning a different value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7f0f2d19173146743594f430a21d28dc2726008" translate="yes" xml:space="preserve">
          <source>You will now see better stack traces and errors during &lt;code&gt;cypress run&lt;/code&gt; / in CI. No more &lt;code&gt;undefined is not a function&lt;/code&gt; errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9787473bd247d1640f294339a0f6ce72d0de147f" translate="yes" xml:space="preserve">
          <source>You will see requests named as &lt;code&gt;(XHR Stub)&lt;/code&gt; or &lt;code&gt;(XHR)&lt;/code&gt; in the Command Log.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2671e16e4a097b58544a7818605a54389459e0" translate="yes" xml:space="preserve">
          <source>You will see the following in the command log:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5807f6e3117effb36a88dca8e5e5057c1994a963" translate="yes" xml:space="preserve">
          <source>You will want to consider the development costs of implementing a visual testing tool yourself versus using an external 3rd party provider. Storing, reviewing and analyzing image differences are non-trivial tasks and they can quickly become a chore when going with a DIY solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f798ddb6580479bf1f070c690f886f37f619ed5" translate="yes" xml:space="preserve">
          <source>You will want to then &lt;a href=&quot;../guides/continuous-integration#Record-tests&quot;&gt;add the key to your config file or as an environment variable&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ed992567c1266be46b89368cfa8f547ecbc6f0" translate="yes" xml:space="preserve">
          <source>You would likely encounter constant port conflicts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a74997f000a8a6b0ead4d688bd65d3cbfdff36" translate="yes" xml:space="preserve">
          <source>You would typically use them with the &lt;a href=&quot;../../api/commands/fixture&quot;&gt;&lt;code&gt;cy.fixture()&lt;/code&gt;&lt;/a&gt; command and most often when you&amp;rsquo;re stubbing &lt;a href=&quot;../guides/network-requests&quot;&gt;Network Requests&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ab251a23d48b529300dc39c893c29d1d585f50" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;d typically set this environment variable when running in &lt;a href=&quot;continuous-integration&quot;&gt;Continuous Integration&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac4348441c2845f1972b2393cb8583aeabac266" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll likely also want to test your login UI for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86509920a4005c16463cdef6e235bc5cc46371d" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll receive an email confirming your request. The Cypress Team will review your request and, if approved, an OSS plan subscription will be applied to your organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7694508bf41bf37659646dd902f15567e64739" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll typically receive this message due to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a35f1ebb021d55307607e031b0bf309023c2e0d" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ll want to refer to your CI provider&amp;rsquo;s documentation on how to set up multiple machines to run in your CI environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff97cb7e003f0b0b856d0dcbab7911fc8549d610" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re about to embark on writing tests for your application, and only &lt;em&gt;you&lt;/em&gt; know your application, so we don&amp;rsquo;t have a lot of specific advice to give you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a5510df5de9d2a565d96620c6b6ec066fc5e45" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re in! Inspect the state of your application like you normally would if you&amp;rsquo;d dropped the &lt;code&gt;debugger&lt;/code&gt; into your application code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7e2faad9d8fe103868cba12c41bc7231ad6a60" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re polling something in your application with &lt;code&gt;setInterval&lt;/code&gt; and want to control that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28380e07650860efc738a338e59cff4f20dd8e7" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re trying to &lt;strong&gt;store and compare&lt;/strong&gt; values such as &lt;strong&gt;text&lt;/strong&gt;, &lt;strong&gt;classes&lt;/strong&gt;, &lt;strong&gt;attributes&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b474b587e8bc56c18b6b7c81f1112b5c90454bbf" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re trying to share &lt;strong&gt;values&lt;/strong&gt; between tests and hooks like &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;beforeEach&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc0b97ba22bc48dfd6c86d507f828612a87f44c" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re trying to test your application&amp;rsquo;s &amp;ldquo;failure path&amp;rdquo; by forcing things to fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c56a159de1f4368970ff5d1b826187ba622f73d" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re trying to test your application&amp;rsquo;s &amp;ldquo;happy path&amp;rdquo; by forcing things to pass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a550cc56e467725dfdae836c12ba5677ad5b1a6f" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;re using &lt;code&gt;oauth&lt;/code&gt; and want to stub login methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2883b1ae887b2e21321a80c0d6458773175a45b" translate="yes" xml:space="preserve">
          <source>You, the test writer must know ahead of time what your application is programmed to do - or have 100% confidence that the state of a mutable object (like the DOM) has stabilized in order to write accurate conditional tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b7db0faffc2d03b47db85feb8616e8d2a77972" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;pluginsFile&lt;/code&gt; is invoked when Cypress opens a project.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89883360548e8023f1a87f0baedbb6d0e59b33c" translate="yes" xml:space="preserve">
          <source>Your Cypress test code runs in the same run loop as your application. This means you have access to the code running on the page, as well as the things the browser makes available to you, like &lt;code&gt;document&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt;, and, of course, &lt;code&gt;debugger&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea0a664fdb2c4301c118c66fa9a16e415c552e5b" translate="yes" xml:space="preserve">
          <source>Your application code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50050e3042f7ec88b3d5292def1e628c3f408ed0" translate="yes" xml:space="preserve">
          <source>Your application may use dynamic classes or ID&amp;rsquo;s that change</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52911618a7175f28eaf93ca3327f130d3cf5c3f1" translate="yes" xml:space="preserve">
          <source>Your application uses dynamic ID&amp;rsquo;s and class names</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3045a8a5332629b580c98caeffc16c22781e836a" translate="yes" xml:space="preserve">
          <source>Your application&amp;rsquo;s viewport dimensions will now automatically scale to fit regardless of your screen&amp;rsquo;s size. This enables you to test resolutions larger than what your screen is capable of displaying. Additionally this fixes edge cases caused when there was a difference in viewports between users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b103172cb708a26a0cd83fd92359421ed3c884" translate="yes" xml:space="preserve">
          <source>Your current proxy settings can be viewed from within the Cypress Test Runner. Follow these steps:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c8db9da53773a8e97a7ccd27f75fd924623601" translate="yes" xml:space="preserve">
          <source>Your fixtures can be further organized within additional folders. For instance, you could create another folder called &lt;code&gt;images&lt;/code&gt; and add images:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7537ed89d991fc7bfe7d036a88a03bd1680a113" translate="yes" xml:space="preserve">
          <source>Your framework hasn&amp;rsquo;t finished bootstrapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="648142e95f1ffc0bc853cb92576a2c444c68b155" translate="yes" xml:space="preserve">
          <source>Your function returns a &lt;code&gt;Promise&lt;/code&gt;, and you want to automatically resolve or reject it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35cfdae0d284492ddc2a4bf6b8e4a4096c61a21e" translate="yes" xml:space="preserve">
          <source>Your function will receive 2 arguments: &lt;code&gt;on&lt;/code&gt; and &lt;code&gt;config&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8a2e404029a67272dc5bb64efe4acb0cc7d9c3" translate="yes" xml:space="preserve">
          <source>Your list of projects in the Test Runner now displays their last recorded run status - passing, failing, pending, running, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8def68f931fd1f4dad062f94e933a751d95aca5b" translate="yes" xml:space="preserve">
          <source>Your project is a non-commercial entity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b9817867cf70a0a67aa1226b00035b8103dc89" translate="yes" xml:space="preserve">
          <source>Your project&amp;rsquo;s current proxy settings now display in the &lt;a href=&quot;proxy-configuration#View-proxy-settings-in-Cypress&quot;&gt;Settings of the Test Runner&lt;/a&gt;. Addresses &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/3856&quot;&gt;#3856&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697a02b364e220515d12931f0448928a395cb9fb" translate="yes" xml:space="preserve">
          <source>Your selectors break from development changes to CSS styles or JS behavior</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a606d99e2be8b8406a6e0315b6e867d370f7379" translate="yes" xml:space="preserve">
          <source>Your tests break whenever there are CSS or content changes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933dc34d770ebe503010c38732e23f0535b972f3" translate="yes" xml:space="preserve">
          <source>Your visual styles may also rely on more than just CSS, perhaps you want to ensure an SVG or image has rendered correctly or shapes were correctly drawn to a canvas.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1c1e45e2bd8451861fad93c9ae896f208553c6a" translate="yes" xml:space="preserve">
          <source>^HTML &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b016a497c6941a3811814c68d66ff07bfb90df88" translate="yes" xml:space="preserve">
          <source>^HTML &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements with a defined &lt;code&gt;type&lt;/code&gt; attribute of one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a25c1fb7f888154f4cf3726019f43e09f969954" translate="yes" xml:space="preserve">
          <source>a(&lt;em&gt;type&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa8fcde98e48fddf1de5f3e266ee6570d890c12" translate="yes" xml:space="preserve">
          <source>access the actual XHR object for assertions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db7a32b53f1c50a82aa0fd9bda55aafa73d687ee" translate="yes" xml:space="preserve">
          <source>adds &lt;code&gt;chai&lt;/code&gt; assertions for stubs and spies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06965aa626d01e5cbfbd62bda1c1cd5902f94cc6" translate="yes" xml:space="preserve">
          <source>alternatively, use destructuring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="982131e9610e162804cb608af79e8ac0e8e57fbe" translate="yes" xml:space="preserve">
          <source>alwaysCalledOn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d2fb066db7f8d734b098fe130f7a680c398454" translate="yes" xml:space="preserve">
          <source>alwaysCalledWith</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d16b3ed8eac1c26dcea69d2a9d5c12ba0164b8" translate="yes" xml:space="preserve">
          <source>alwaysCalledWithExactly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aa44666c7418826ff49a92e15b733f529072b65" translate="yes" xml:space="preserve">
          <source>alwaysCalledWithMatch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab79788d5b1f9ef9abb530ef3fabb0fed3dbe64e" translate="yes" xml:space="preserve">
          <source>alwaysCalledWithNew</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88d8212f813009f624f89d810f23dfa5a5dcff5e" translate="yes" xml:space="preserve">
          <source>alwaysReturned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745fe6b5b1a5d16a47a11983c531166c14316225" translate="yes" xml:space="preserve">
          <source>alwaysThrew</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba58739169412252d41dea92182cef18f70b69b" translate="yes" xml:space="preserve">
          <source>and on and on&amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fe0200d1c7a5139bd18fd22268c4ca8bf45e90" translate="yes" xml:space="preserve">
          <source>any</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43b9d80d1f50472e56afb94a061257af5b53182b" translate="yes" xml:space="preserve">
          <source>appveyor.yml</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a36f117812e69f1a5ab7e32a43b6e3db24618b2" translate="yes" xml:space="preserve">
          <source>arch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="536f158f6dfd529865dcb865a97bb16804e34d70" translate="yes" xml:space="preserve">
          <source>arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df211ccdd94a63e0bcb9e6ae427a249484a49d60" translate="yes" xml:space="preserve">
          <source>as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1312c71367158fb268b1793b3473d23a81cf4d9d" translate="yes" xml:space="preserve">
          <source>attr(&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;[value]&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0a3d38277ad19039d901020e4fa5d40049f131" translate="yes" xml:space="preserve">
          <source>bitbucket-pipelines.yml</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1064c9ccfdac81fc1084c91222873c7c2a84f915" translate="yes" xml:space="preserve">
          <source>blacklistHosts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b74ac8513ee8b5afb229690237d3f48d34d22d" translate="yes" xml:space="preserve">
          <source>blur</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef98362b8a6b0c8cd804b0d227aa1ffeaba89786" translate="yes" xml:space="preserve">
          <source>browser</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1efef9b619111fa57666798ed72e46afd3612cf" translate="yes" xml:space="preserve">
          <source>callCount</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b31bbcba710459137e63c4396275b56d2807c82" translate="yes" xml:space="preserve">
          <source>callback function called when any XHR is aborted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e56b4df926facb28cc01af42d1b60c056f83927" translate="yes" xml:space="preserve">
          <source>callback function called when any request is sent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6472b303515a3f514846ef66e7163c392b91be75" translate="yes" xml:space="preserve">
          <source>callback function called when any response is returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f79e8e842fe1ca26f5eabc89d5bb12494380701" translate="yes" xml:space="preserve">
          <source>callback function when a request is sent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14b8a8c8338921ee080fb9670c3faf7b95cf1a2" translate="yes" xml:space="preserve">
          <source>callback function when a response is returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f08839b9869dd4d8b2b946570aa19d83794615" translate="yes" xml:space="preserve">
          <source>callback function which fires anytime an XHR is aborted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="970eeb47b2d091dc3fee38f7ecd0e8ec3352f34f" translate="yes" xml:space="preserve">
          <source>called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b8cdc4a82f01ec231870a7a4c1d802b782b7500" translate="yes" xml:space="preserve">
          <source>calledAfter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3712a77ddeadb37020c1e6f77f2896aa5ee9dbf" translate="yes" xml:space="preserve">
          <source>calledBefore</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428fec6c21e4ed4ea68ea2ae25c8eb77daa06d15" translate="yes" xml:space="preserve">
          <source>calledOn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02bff6172e7cdae55469e9c30966d1118b23b265" translate="yes" xml:space="preserve">
          <source>calledOnce</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c622e5f1a0255891f3893da95474bb20f1765b8f" translate="yes" xml:space="preserve">
          <source>calledThrice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21d20383a56e44c4673ee004b8035335beabd34" translate="yes" xml:space="preserve">
          <source>calledTwice</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b3489d9d49199e46d9af83624ffc44abb61fe0" translate="yes" xml:space="preserve">
          <source>calledWith</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79a026a2fb44e97501a320077b780e0d2b1f5922" translate="yes" xml:space="preserve">
          <source>calledWithExactly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee21509c8c1be9d566c6c2b4b8c0e1fd64739766" translate="yes" xml:space="preserve">
          <source>calledWithMatch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4258c5b4e2a485b26d92c559d1afa1375a8218" translate="yes" xml:space="preserve">
          <source>calledWithNew</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bffd54c04d5321f75d061c808047f033bed2aeb2" translate="yes" xml:space="preserve">
          <source>change the run-time behavior of Cypress before opening a pull request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698dc05e9772e7dccb755c0fcb1310b87815a3ea" translate="yes" xml:space="preserve">
          <source>change(&lt;em&gt;function&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56d985300d4b52eb6e189be006f44f8d23c5ec9" translate="yes" xml:space="preserve">
          <source>check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e4aedce48faf384f3535ffeb842e9a0718a25c" translate="yes" xml:space="preserve">
          <source>checked</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42685f11da91a55b1f5c5b782edb2f0fc1dd5148" translate="yes" xml:space="preserve">
          <source>children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6179cc1997fe0737bf6e0867f408f0e34f4ae83d" translate="yes" xml:space="preserve">
          <source>circle.yml</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbbd19ad1d7bedad4fdbac0f37d409fa91db14c1" translate="yes" xml:space="preserve">
          <source>class(&lt;em&gt;className&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168cbb2ea52b9e34d271accecfa7d7951e948a99" translate="yes" xml:space="preserve">
          <source>clear</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268d1428d8d8ba7d1c4a1b9f15753bee467cf52b" translate="yes" xml:space="preserve">
          <source>clearCookie</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380a624a5556dd6d3cfbda5f6fe39457e08a3c40" translate="yes" xml:space="preserve">
          <source>clearCookies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63e18e3324a093bc9d7284f3329e625362e42e89" translate="yes" xml:space="preserve">
          <source>clearLocalStorage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93ec56608fb302fea7a8019d7c0e8e7239fc033" translate="yes" xml:space="preserve">
          <source>click</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83655a5560ef1c438170f28acfecbe5013e8f34f" translate="yes" xml:space="preserve">
          <source>clock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a97c6ef99bcf77d165796e9d8f42e57c7308b5" translate="yes" xml:space="preserve">
          <source>clock behavior before &lt;code&gt;cy.visit()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2e4de9c9b4d1a6befeb7709ce03c4f81bc3324" translate="yes" xml:space="preserve">
          <source>closeTo(&lt;em&gt;expected&lt;/em&gt;, &lt;em&gt;delta&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c113bd75a926da05464727110810cccd9f23a03d" translate="yes" xml:space="preserve">
          <source>closest</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d9d4d13c9fca8770c92d0ba02b99d333e6ffdf0" translate="yes" xml:space="preserve">
          <source>cly</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c778992d3a1d8eb44bfc070fdf2fba36340bba" translate="yes" xml:space="preserve">
          <source>command instance &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f2660c56744bb635c0b82bbbda7338ef388e8e2" translate="yes" xml:space="preserve">
          <source>command properties and arguments &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfba7aade0868074c2861c98e2a9a92f3178a51b" translate="yes" xml:space="preserve">
          <source>config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0652e436f42d75f5672a8bd9ae2f398a55115d51" translate="yes" xml:space="preserve">
          <source>configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e8f9efc5ada5451ea10910bb6334378cd4fd0c" translate="yes" xml:space="preserve">
          <source>contain(&lt;em&gt;text&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caeb909ae4ff4ee25a0ff0d476946ed256f2aee1" translate="yes" xml:space="preserve">
          <source>contains</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f2b45e3fe0e25eef937527f97f3df42af01a10" translate="yes" xml:space="preserve">
          <source>css(&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;[value]&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31ace4ad1831aae866cd7951a842ca3e38f21981" translate="yes" xml:space="preserve">
          <source>cy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ccbbcad40ecbeb676506963807de7ddff1644ea" translate="yes" xml:space="preserve">
          <source>cy-view</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71224a852ab46001c8f775e8feedd63dad1e5955" translate="yes" xml:space="preserve">
          <source>cy...() failed because the element you are chaining off of has become detached or removed from the dom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b106cc8eb05e42314a69a3bbd986df53069eb41" translate="yes" xml:space="preserve">
          <source>cy....() failed because the element cannot be interacted with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b19e08efef5909c5c31f4c4649ec15c0fa5118" translate="yes" xml:space="preserve">
          <source>cy....() failed because the element is currently animating</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a4c7cd8e13bc0ea9dd8ae9d5715d70dbded6b6" translate="yes" xml:space="preserve">
          <source>cy.task</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad0cb315e4b5de4b02f426de3b8c666e949ba6da" translate="yes" xml:space="preserve">
          <source>cy.visit() failed because you are attempting to visit a second unique domain</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f7f97efdbc9f67889fc4a85aeefb6f4e424dd9" translate="yes" xml:space="preserve">
          <source>cyphell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685038f571bc09b075d1f91fa0e4b41c84312d61" translate="yes" xml:space="preserve">
          <source>cypress-angular-unit-test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c8324eca2a0d4d227ed69a8eeb5528333ad114" translate="yes" xml:space="preserve">
          <source>cypress-angularjs-unit-test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44325a88fcc01959ca670e1e4f40a87838e052d9" translate="yes" xml:space="preserve">
          <source>cypress-app-watcher-preprocessor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2500857e729166c03938069426e43a88b65d5759" translate="yes" xml:space="preserve">
          <source>cypress-autorecord</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06f43b4f26d8f5fcc21a7fb285aadfabf2f530cd" translate="yes" xml:space="preserve">
          <source>cypress-axe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb88a59967cedf449ce0ab27a50110fa60e1a1f" translate="yes" xml:space="preserve">
          <source>cypress-blink-test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df6dc2a442f9f514206b0b0aeb7cc3fcf94fa7c" translate="yes" xml:space="preserve">
          <source>cypress-capybara</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551c5878a91ca677f9841ab020b428774f5897a3" translate="yes" xml:space="preserve">
          <source>cypress-commands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a621b8071d5337a16db7d6a703abe30736c2a9f4" translate="yes" xml:space="preserve">
          <source>cypress-cycle-unit-test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81d4fd62a6f52423435bb152803ae42759e447b4" translate="yes" xml:space="preserve">
          <source>cypress-dark</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df2cd9a0df84826823b817a47ee868c9b4560c79" translate="yes" xml:space="preserve">
          <source>cypress-docker-images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca047dd10653ce69b1027da7de40af08ff356c0" translate="yes" xml:space="preserve">
          <source>cypress-downloadfile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e634bc830c4f40d606b39c07603e448cc9ba73aa" translate="yes" xml:space="preserve">
          <source>cypress-drag-drop</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4a7fe9d91829f1da63adc7c867efee5a595579" translate="yes" xml:space="preserve">
          <source>cypress-example-docker-codeship</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eabe4915617dc0421e9922bd3673807bd387b48d" translate="yes" xml:space="preserve">
          <source>cypress-example-kitchensink</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e6fb6d11f64e5562c166541616d67fd9cda907" translate="yes" xml:space="preserve">
          <source>cypress-example-kitchensink Assertions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f245f51f47b3e71d0d14978578b402687bd5183b" translate="yes" xml:space="preserve">
          <source>cypress-example-piechopper</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f9e522bd1e1acd66404287e8ccb46964c5cdf5" translate="yes" xml:space="preserve">
          <source>cypress-example-recipes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="942d3b6bae5169646558d78b0075af00743d43d0" translate="yes" xml:space="preserve">
          <source>cypress-example-todomvc</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24c405ecbe4e6276083eaa342dc48b082629b80" translate="yes" xml:space="preserve">
          <source>cypress-failed-log</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286b7fb5dae04edcbea5d015cc2d283b92b84690" translate="yes" xml:space="preserve">
          <source>cypress-file-upload</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3135f2741788f74fc4b1d9e4f1b1601b7cfbdc" translate="yes" xml:space="preserve">
          <source>cypress-firebase</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff47127972fba86546bb14c5e12fc4bb25a69677" translate="yes" xml:space="preserve">
          <source>cypress-graphql-mock</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1123afc16a596b1b22e8c49f9e1ebc0609ff294" translate="yes" xml:space="preserve">
          <source>cypress-hyperapp-unit-test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48237284522d9c08fd20bcba09f43a71484156a3" translate="yes" xml:space="preserve">
          <source>cypress-jest-adapter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6db2a44d901e293d206460656517a88ed14381" translate="yes" xml:space="preserve">
          <source>cypress-log-to-output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f6ac2fdc1af768468dc26bf28e8b38808ef3d09" translate="yes" xml:space="preserve">
          <source>cypress-ntlm-auth</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aff15d6ad0c0a52090f5a595c00c1d00ea39098" translate="yes" xml:space="preserve">
          <source>cypress-on-rails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2801d8cd4809df9c4aabc5afecad34c1d12698ed" translate="yes" xml:space="preserve">
          <source>cypress-otp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60dfca23b20e0c872fb75190628765251d6604cd" translate="yes" xml:space="preserve">
          <source>cypress-pipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6be65232fbe686224c5f461b099504eba19e4bcf" translate="yes" xml:space="preserve">
          <source>cypress-plugin-retries</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2942c80a28c48824af9be2df6abf13d886a963a2" translate="yes" xml:space="preserve">
          <source>cypress-plugin-snapshots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef7fd446506be8cb9d4eb9c7d915faba34ce55e" translate="yes" xml:space="preserve">
          <source>cypress-plugin-tab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62988526250aaf8d372e2192da6e5901c93757bc" translate="yes" xml:space="preserve">
          <source>cypress-protobuf</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="219201fc1f82166b9d033201fcba1f6e3b25b7c5" translate="yes" xml:space="preserve">
          <source>cypress-react-unit-test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb98693421105c91ff2530ef17be6e8242beeddd" translate="yes" xml:space="preserve">
          <source>cypress-select-tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3aa28b33d31b0939a240cae88ddd8fc8a3db87" translate="yes" xml:space="preserve">
          <source>cypress-shadow-dom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ef85ef962c8774fd691927abb4942ac7fa3baa2" translate="yes" xml:space="preserve">
          <source>cypress-slack-healthcheck</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e64b0bb155fa6ee1122e3dfe69ea5c5e8d8df0" translate="yes" xml:space="preserve">
          <source>cypress-slack-reporter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8243605425ff2e7641cbe1ab23bfb0b7518f90bd" translate="yes" xml:space="preserve">
          <source>cypress-social-logins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32454fd56b83766207d087504db57b001d648b9f" translate="yes" xml:space="preserve">
          <source>cypress-svelte-unit-test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4811371e72c2723be25e15ee551bffc631aa35b" translate="yes" xml:space="preserve">
          <source>cypress-testing-library</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1ad3b7d779b8e766c71399492c69d34263fe81" translate="yes" xml:space="preserve">
          <source>cypress-testrail-reporter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c4b51ccfe1feee0ff2968608b18e13b8842601" translate="yes" xml:space="preserve">
          <source>cypress-unfetch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2475cf6c595f4c255cf2e679d1ad091cbada646b" translate="yes" xml:space="preserve">
          <source>cypress-vue-unit-test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a3018ceb2d61c3aa5829bec18fda5861d2c1db" translate="yes" xml:space="preserve">
          <source>cypress-wait-until</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9030706d91f7c22858b4562086b1f45a2d756378" translate="yes" xml:space="preserve">
          <source>cypress-watch-and-reload</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c9b55bba28d709f4827ea28485b1e043826713b" translate="yes" xml:space="preserve">
          <source>cypress-xpath</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd7786282577f82e5e5d7703505815e6e9e412e" translate="yes" xml:space="preserve">
          <source>cypress.json</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04692159d7d9d295f56960cfce9f9a9babc252bd" translate="yes" xml:space="preserve">
          <source>cypressautomocker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f067441fe4a8b7a85b2239bab5670e77fda9fb14" translate="yes" xml:space="preserve">
          <source>data(&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;[value]&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da62890f7b6a88945dfd31de8e2bf3a9dc58d6f" translate="yes" xml:space="preserve">
          <source>dblclick</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32faaecac742100f7753f0c1d0aa0add01b4046b" translate="yes" xml:space="preserve">
          <source>debug</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947a6315975831909d82c87a0564425a0b9a9a50" translate="yes" xml:space="preserve">
          <source>debug Cypress not starting or hanging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab406449d6aa92ac418e55a018e5f8d05b9902cb" translate="yes" xml:space="preserve">
          <source>debug problems related to the way CLI arguments are parsed by the npm CLI module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="063fb16cacadfcb9c4dc809939cc50f59afc0c93" translate="yes" xml:space="preserve">
          <source>decrease(&lt;em&gt;function&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dde59ff3d79fc2322f4192f74c1d1af30d32cc6" translate="yes" xml:space="preserve">
          <source>deep</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb4920343ea1c66e4a9defdf4af28c1bcae50422" translate="yes" xml:space="preserve">
          <source>deep.equal(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675d0449a2b69d2d935a670fe489be70b3605d64" translate="yes" xml:space="preserve">
          <source>deep.property(&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;[value]&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f052d2961e279ecbb0d216ac35a1c81b27704a6" translate="yes" xml:space="preserve">
          <source>delay for stubbed responses (in ms)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68c5fd2a39efd39a72859fa78f1b239afb45dd1" translate="yes" xml:space="preserve">
          <source>descendants(&lt;em&gt;selector&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="347e87f4eb15f7a1cf67b173bbf89c510f1ec646" translate="yes" xml:space="preserve">
          <source>devicePixelRatio</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54801bd6cc72e42cd61e5b83dde57afc4779700f" translate="yes" xml:space="preserve">
          <source>disable security features which make automation difficult</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07596f183f5e91b1778d5e47b2752b8d42aa763d" translate="yes" xml:space="preserve">
          <source>disabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8278c89ad16da05fec4fdfc61fe44798b92720" translate="yes" xml:space="preserve">
          <source>document</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be65d27ae088a0e03fd8e1331d90b01649464cb6" translate="yes" xml:space="preserve">
          <source>dom</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32f279e548b6fceef4343170778273bfe60658c" translate="yes" xml:space="preserve">
          <source>each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad87109bfff0765f4dd8cf4943b04d16a4070fea" translate="yes" xml:space="preserve">
          <source>empty</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea3f9802accf8817bacd6f3df46a73b93ccddec" translate="yes" xml:space="preserve">
          <source>enabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a92f3d26362d6557d5701de77a63a01df61e57f" translate="yes" xml:space="preserve">
          <source>end</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3cc629e4d698b44bdcda8141ce2e359d32074d0" translate="yes" xml:space="preserve">
          <source>ensure your application makes the intended requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920f8f5815b381ea692e9e7c2f7119f2b1aa620a" translate="yes" xml:space="preserve">
          <source>env</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c619705e8fcaa770885cac1837ae950f5c8ba5" translate="yes" xml:space="preserve">
          <source>eq</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4bb11aba08fee403b5b6e8c70b0c676abe9fceb" translate="yes" xml:space="preserve">
          <source>eql(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55aca476c17f9ad4227acb37e58a18c60051e8a7" translate="yes" xml:space="preserve">
          <source>equal(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be62562725d30894d1641b11d5106adde66f0d79" translate="yes" xml:space="preserve">
          <source>exec</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e89f2472eea0797f15896f1658417395dcaae35" translate="yes" xml:space="preserve">
          <source>exist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574e201cacc05cf40293d931076f150895bb0f5b" translate="yes" xml:space="preserve">
          <source>expose test environment specific routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb6efb98ba5972a9b5090dc2e517fe14d12cb04" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ded8dae5786fb0e9e6ffb657401fd861ba2efe11" translate="yes" xml:space="preserve">
          <source>find</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0996a37c13d44c3b06074939d43fa3759bd32c1" translate="yes" xml:space="preserve">
          <source>first</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51cff3c1f0bc59f6187e7040cc12a4e9b1eca7aa" translate="yes" xml:space="preserve">
          <source>fixture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78918dcaf22c0486024b08caed8fe0c57e583a47" translate="yes" xml:space="preserve">
          <source>focus</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a08123ec4acc58198c375920cf32a5165558f0" translate="yes" xml:space="preserve">
          <source>focus[ed]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31b0b227337866ce82630c2d10406cfadf78bd2" translate="yes" xml:space="preserve">
          <source>focused</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fe9c75603ec13a2e5d8954b050b7221126502f7" translate="yes" xml:space="preserve">
          <source>forcibly send XHR&amp;rsquo;s a 404 status when the XHR&amp;rsquo;s do not match any existing route</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783923e57ba5e8f1044632c31fd806ee24814bb5" translate="yes" xml:space="preserve">
          <source>get</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25916f93770a9adca80f2a550d3a2506981beb73" translate="yes" xml:space="preserve">
          <source>getCookie</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f737990e01640a4bfaf7751e7e2e8502e1e44b6" translate="yes" xml:space="preserve">
          <source>getCookies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec558a60b5dda24597816c924776716018caf8b" translate="yes" xml:space="preserve">
          <source>go</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2512c87e86c8d2149c928014edbde56f2dbeddd4" translate="yes" xml:space="preserve">
          <source>greaterThan(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2346ad27d7568ba9896f1b7da6b5991251debdf2" translate="yes" xml:space="preserve">
          <source>hash</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f253d28517c39eeddcaddf0e859d5344e6ba1f6" translate="yes" xml:space="preserve">
          <source>have fun 🎉</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e7e545c519a38f0aec9e72df51f8ba169db34d" translate="yes" xml:space="preserve">
          <source>height</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d72c7fc3e2e145870beab37c0b70e343ea9c3b" translate="yes" xml:space="preserve">
          <source>hidden</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc5881426baf05f182f0473d6ccddce906092b3" translate="yes" xml:space="preserve">
          <source>hover</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed6eefc9117167b11ea3eef312ee00e95dbf0401" translate="yes" xml:space="preserve">
          <source>how to handle the previously yielded subject.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de05b2acf571749867adfc7859af04e0fe3a3832" translate="yes" xml:space="preserve">
          <source>html(&lt;em&gt;html&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ef5f356758d1da2a25fd6ecdea04e9729d7064" translate="yes" xml:space="preserve">
          <source>id(&lt;em&gt;id&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f48cf9040508b376a38fd4e1da36c2391fc15d85" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;force404&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; (the default) then the request will pass through to the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7024006187e928719cb37c7d130f1610c9d90ec4" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;force404&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; then the response &lt;a href=&quot;#Notes&quot;&gt;will be a 404&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9372562f5c6170252c10dae576fe6b3a730b465e" translate="yes" xml:space="preserve">
          <source>iframe support is somewhat limited, but does work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2cc60639e7f1f86a79ae2d680888a3c6165cf8" translate="yes" xml:space="preserve">
          <source>iframes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa24f8620a4ea4a9a706c3e2f71d472ad598deb2" translate="yes" xml:space="preserve">
          <source>iframes not supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b16d9529970c712c5689a714de1ff11d8864b06" translate="yes" xml:space="preserve">
          <source>include(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124a2dbe6af6ffcea9bc590ab2cb89a42e2887e6" translate="yes" xml:space="preserve">
          <source>increase(&lt;em&gt;function&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d07f9596b3412dd86da84c01076709c60b811a26" translate="yes" xml:space="preserve">
          <source>instanceOf(&lt;em&gt;constructor&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91dd3f61d88900e0d4734f29d0025d93acf6c9c" translate="yes" xml:space="preserve">
          <source>investigate a hard to recreate bug that happens on your machine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6aa1f3a789f3f3108666e0ac807ca5ca7dc5fa5" translate="yes" xml:space="preserve">
          <source>invoke</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b2414610a40b9710e94dc7f29ac7d1c49797dc" translate="yes" xml:space="preserve">
          <source>isCy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f803b26388365e33184d5cc145d868e1b8df74d5" translate="yes" xml:space="preserve">
          <source>its</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818533aa876aa97624377a7b0b2d3de3acc2813b" translate="yes" xml:space="preserve">
          <source>itself</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abae7f8db280b8aa28837a39d7381885293293c5" translate="yes" xml:space="preserve">
          <source>jQuery UI Sortable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29eaba1fd5cf1e3a3cac10143a85ed26eb263ae" translate="yes" xml:space="preserve">
          <source>key(&lt;em&gt;key1&lt;/em&gt;, &lt;em&gt;[key2]&lt;/em&gt;, &lt;em&gt;[&amp;hellip;]&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213ed3ea453bf610688ff8041e0a3b7b6abb5e6e" translate="yes" xml:space="preserve">
          <source>last</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="819b36585104117945379443c549fcfd726fa3db" translate="yes" xml:space="preserve">
          <source>least(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71348d2c5502d8feb739019a8da2ee87089701ec" translate="yes" xml:space="preserve">
          <source>lengthOf(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ee649ff826630507272f1e65795a0eea2bdfa5" translate="yes" xml:space="preserve">
          <source>lessThan(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6469ac84a89748bb67b923c833ed0c778a17aea3" translate="yes" xml:space="preserve">
          <source>location</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7babc233de26ab19ead1b9c278128d5c434910ee" translate="yes" xml:space="preserve">
          <source>log</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6210fdf0c430ea0b8190f4d612bd5f9b6572fd" translate="yes" xml:space="preserve">
          <source>log attributes &lt;strong&gt;(Object)&lt;/strong&gt;, whether Cypress is in interactive mode &lt;strong&gt;(Boolean)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2551489fd8863a1c560d5e3bcf12554ac6aedda1" translate="yes" xml:space="preserve">
          <source>macOS 64-bit (&lt;code&gt;?platform=darwin&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7512f40389e82af1175ece379ad5d9fb730cc5" translate="yes" xml:space="preserve">
          <source>match(&lt;em&gt;RegExp&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ffa4bbf81cf529ad22070fa1a3ef7446df2a98" translate="yes" xml:space="preserve">
          <source>match(&lt;em&gt;selector&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60391f39d630b5f6ba563ff38dff66a0856b9a96" translate="yes" xml:space="preserve">
          <source>members(&lt;em&gt;set&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c91d281601ae2c8ca6d690cc897da2f7e4b879" translate="yes" xml:space="preserve">
          <source>method to match against requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6910f776c1354a72fa6ebba0dae7dddf003ef15f" translate="yes" xml:space="preserve">
          <source>minimatch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29b9dbc5ec4ad55fee89bb88f5c93caa4ae6627" translate="yes" xml:space="preserve">
          <source>mochawesome-merge</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c38b283b487783c7e2f6ac75f2adad30ff119e" translate="yes" xml:space="preserve">
          <source>modifyObstructiveCode</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56def36afbfb8cd1bc7a898851fea4c97586530" translate="yes" xml:space="preserve">
          <source>moment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c92931615bb1c97ca104a95cc67ef2a19289d2" translate="yes" xml:space="preserve">
          <source>most(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b3e0a278988bc15f2913af3f4153ccef74e465" translate="yes" xml:space="preserve">
          <source>nested</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edee9402d198b04ac77dcf5dc9cc3dac44573782" translate="yes" xml:space="preserve">
          <source>next</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccefaadfdffe563d2631c2f2ffa3f15d87750642" translate="yes" xml:space="preserve">
          <source>nextAll</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858408d5395601b5789c0f3e439c636d1494f131" translate="yes" xml:space="preserve">
          <source>nextUntil</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557f255516719ea16f8f4a0aae1166054e2c9b43" translate="yes" xml:space="preserve">
          <source>not</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69703c6bdd2314a2d363a52ea9636026e9740ca" translate="yes" xml:space="preserve">
          <source>npm Reporters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88132417b2efe72cde53346062aab21879b2e4c" translate="yes" xml:space="preserve">
          <source>npm install any existing &lt;code&gt;chai&lt;/code&gt; library and import into your test file or support file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca1f4a98324d13add10f76a43a5f6e6da77ace6" translate="yes" xml:space="preserve">
          <source>npm modules</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5193910094354dc6348f9386b03957f20021a3" translate="yes" xml:space="preserve">
          <source>npm-cy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be88ca4242c76e8253ac62474851065032d6833" translate="yes" xml:space="preserve">
          <source>null</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a85f4764bbd6daf1c3545efbbf0f279a6dc0beb" translate="yes" xml:space="preserve">
          <source>ok</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3d405b10675998c030223177d42e71b4e7a312" translate="yes" xml:space="preserve">
          <source>on</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d347175df0ad682d14a19c9415db17583bd86ec" translate="yes" xml:space="preserve">
          <source>onElement Callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1863835675e3970e15e5c22411ef60824eb55591" translate="yes" xml:space="preserve">
          <source>once</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a9cf9df3ddd64236a68589104819c6fdc0a2a5" translate="yes" xml:space="preserve">
          <source>oneOf(&lt;em&gt;values&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6d3eca5a849f14e9764ff9a4a76e9f53e690a8" translate="yes" xml:space="preserve">
          <source>ordered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a0610f0ce006d52ca0dc8952a611d8567935b8" translate="yes" xml:space="preserve">
          <source>ownProperty(&lt;em&gt;name&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c3a24c2670e2ac9f412ee2f74f9864924ff1f5b" translate="yes" xml:space="preserve">
          <source>ownPropertyDescriptor(&lt;em&gt;name&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fd39d0bbdd2dcf322d8b11390a4c5825b11495" translate="yes" xml:space="preserve">
          <source>parent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a664f10b5e580cdde0ca6f4ae01ccf741592737a" translate="yes" xml:space="preserve">
          <source>parents</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60dda22734c279778cf61057ba7b044370b7d49e" translate="yes" xml:space="preserve">
          <source>parentsUntil</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de12302a32f350df35b22c9171d543c4f480e5d7" translate="yes" xml:space="preserve">
          <source>pass &lt;code&gt;false&lt;/code&gt; to disable existing route stubs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8d29955a725c39916a4626f3921a0104242439" translate="yes" xml:space="preserve">
          <source>pause</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c72abbe626f27d174d80fc434b851cce7bde6d3" translate="yes" xml:space="preserve">
          <source>platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d106d8420cfb95790cc8f657069bb679627be1a" translate="yes" xml:space="preserve">
          <source>pointer-events: none</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859d455b8ebd64a26ac0b5eb7278e93d30fb10ac" translate="yes" xml:space="preserve">
          <source>prev</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a63c34bb17fd9d2f073e1fd9bdb46b752f749ed" translate="yes" xml:space="preserve">
          <source>prevAll</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bcb944c7fd3ac61d0f8b9924a0f24f5bae349c8" translate="yes" xml:space="preserve">
          <source>prevUntil</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317c3d1c259ddcd847d3847428c39baca6ba4cee" translate="yes" xml:space="preserve">
          <source>prop(&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;[value]&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85bb3e80a17f26053a332bb011eb74a411cc0d72" translate="yes" xml:space="preserve">
          <source>property(&lt;em&gt;name&lt;/em&gt;, &lt;em&gt;[value]&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8587ad3e265d7e1d3a5afbfe8390621c10a7ca41" translate="yes" xml:space="preserve">
          <source>provides the &lt;a href=&quot;../../api/commands/clock&quot;&gt;&lt;code&gt;cy.clock()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/tick&quot;&gt;&lt;code&gt;cy.tick()&lt;/code&gt;&lt;/a&gt; APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33b1fe83ee7fe7f82a4005bbd20d4f1c3a71ac57" translate="yes" xml:space="preserve">
          <source>provides the &lt;a href=&quot;../../api/commands/stub&quot;&gt;&lt;code&gt;cy.stub()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../api/commands/spy&quot;&gt;&lt;code&gt;cy.spy()&lt;/code&gt;&lt;/a&gt; APIs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73f5092ce31a05a69ed5ae13a01b963808776923" translate="yes" xml:space="preserve">
          <source>readFile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e6e576541fa2152f6fc490b0e99e20c953988c" translate="yes" xml:space="preserve">
          <source>reload</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79483eca122d60e1838cf3ac2b022339d03c5730" translate="yes" xml:space="preserve">
          <source>removeAllListeners</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f416665d1452ee063f5059487b8216ddb9f19c18" translate="yes" xml:space="preserve">
          <source>removeListener</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d610a96184d5dabaf9c7d58ffffb009dec67ef6a" translate="yes" xml:space="preserve">
          <source>removed use &lt;code&gt;CYPRESS_INSTALL_BINARY&lt;/code&gt; instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee35826eaec59bd6a00cbd0a6deae8005ee4aa3a" translate="yes" xml:space="preserve">
          <source>removed use &lt;code&gt;CYPRESS_INSTALL_BINARY=0&lt;/code&gt; instead</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088e29b0ab0079560dea5d3e5aeb2f7868af661e" translate="yes" xml:space="preserve">
          <source>request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d53f87c2daa326af1f125b4e434eca12334ef51" translate="yes" xml:space="preserve">
          <source>reset state on the server / database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac22e8589d72998694fef2fef102afc3ca713a9d" translate="yes" xml:space="preserve">
          <source>respondTo(&lt;em&gt;method&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd868b3c6b50a1364e484d22796ee7ae0e745d79" translate="yes" xml:space="preserve">
          <source>response body when stubbing routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7028420ee695416651cbd050845ac15baa9709" translate="yes" xml:space="preserve">
          <source>response headers for stubbed routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3bf64c2a67016f72e3173b25cd7c014f035d20" translate="yes" xml:space="preserve">
          <source>response status code when stubbing routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c4aa1c82a8f2be6c16b6a4277d6b582af9f4155" translate="yes" xml:space="preserve">
          <source>retry options &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1302aeee7db4b8b7ffcf91019d299aeb21bf6f39" translate="yes" xml:space="preserve">
          <source>returned</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc76e9f0c0006e8f919e0c515c66dbba3982f785" translate="yes" xml:space="preserve">
          <source>root</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b77721db3865cbcd3c48d991841eaed614b7a8" translate="yes" xml:space="preserve">
          <source>root project folder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc166eb81361ff31179cd3c83da3bfe088b851d3" translate="yes" xml:space="preserve">
          <source>route</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b29037ce7b2128c0faf8d9f67991fb1bc046dc" translate="yes" xml:space="preserve">
          <source>satisfy(&lt;em&gt;method&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754d2e97bafe87cf79fea733afb2a09bab2db7e3" translate="yes" xml:space="preserve">
          <source>screenshot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cfdfea766b814d7c797c9ea0414d3c25f6588b1" translate="yes" xml:space="preserve">
          <source>scrollIntoView</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6700c5597be1171483c418c50fa4958c4319dd58" translate="yes" xml:space="preserve">
          <source>scrollTo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="812af7ed814ed75970f983084a5bcaa2229cb3cf" translate="yes" xml:space="preserve">
          <source>seed data by running executable scripts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81448fe273247b533b9f018e96c158cab7901247" translate="yes" xml:space="preserve">
          <source>select</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="835f3b50e33719422d6faca2d01d99417afea46b" translate="yes" xml:space="preserve">
          <source>selected</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de4f901fffb30ac720b0e7eb654b4faa2dd03fa" translate="yes" xml:space="preserve">
          <source>server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c968f343d5ebd7d780a39ed08758be8fb80798dc" translate="yes" xml:space="preserve">
          <source>setCookie</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3035979b0589f90c1bcf53e00ddf8b4fb00f9f" translate="yes" xml:space="preserve">
          <source>shippable.yml</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6dc9bc9f77b486a13b3f63ffb2ffd1cb3fef4db" translate="yes" xml:space="preserve">
          <source>should</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2910176a052e9880e3e654752f38352524c9172" translate="yes" xml:space="preserve">
          <source>siblings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="078772725d009dfa127dbc9e3ac5682a60a9b371" translate="yes" xml:space="preserve">
          <source>spec</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea118158db41224345b3de5e4f831e9c23fde1d2" translate="yes" xml:space="preserve">
          <source>spread</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e6a717447654c7d91d56e5c836522fff758fc0e" translate="yes" xml:space="preserve">
          <source>spy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac9c073603dd424cdf4f2933aa7f0515c6c7c8d9" translate="yes" xml:space="preserve">
          <source>string(&lt;em&gt;string&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58801e3391955d7ee7d51ba293351c3176f5b682" translate="yes" xml:space="preserve">
          <source>stub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa4054f214f0f8063d8fb4453be65d460e3e30c" translate="yes" xml:space="preserve">
          <source>submit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e062332b395fc3c39f207f55c3e03c27c702c13c" translate="yes" xml:space="preserve">
          <source>take shortcuts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fbb727db4b2b6715b092505673cb5922a0d63a8" translate="yes" xml:space="preserve">
          <source>task</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c04b64a010c79a03a3d71e82736a7f2a079318" translate="yes" xml:space="preserve">
          <source>test attributes &lt;strong&gt;(Object)&lt;/strong&gt;, runnable instance &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65aecd77ab21f9d36f76499f27b05e2a42c292c8" translate="yes" xml:space="preserve">
          <source>tests or suites which are manually re-run from the UI now hide all of the other tests / suites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba45004243732472a3c1f447f09a1371210cc2e5" translate="yes" xml:space="preserve">
          <source>tests with a duplicate &lt;code&gt;id&lt;/code&gt; to another test will now run (with a random temporarily assigned id).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d7794a85f3e70b095b50947ff32acf1d95a08e" translate="yes" xml:space="preserve">
          <source>tests without an &lt;code&gt;id&lt;/code&gt; now run (with a random temporarily assigned id).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e5c13c46f49f349eee20caa29070f5af3679df" translate="yes" xml:space="preserve">
          <source>text(&lt;em&gt;text&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f3d7cd3fe2cccb1919c854eddff567603bc29a" translate="yes" xml:space="preserve">
          <source>the &lt;code&gt;teamcity&lt;/code&gt; reporter is now also working again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fcfaa6c040cb3f04710098803a14361a5d1305c" translate="yes" xml:space="preserve">
          <source>the actual beforeunload event &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c14c3798c1f195fa348450d8dc66b11b93615f4" translate="yes" xml:space="preserve">
          <source>the actual unload event &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df06aca8629d063e91abfd4fda80085cda5956ea" translate="yes" xml:space="preserve">
          <source>the alert text &lt;strong&gt;(String)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c009ee2c35e36841541f1297007840190f6517cd" translate="yes" xml:space="preserve">
          <source>the confirmation text &lt;strong&gt;(String)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33fd156c298a8d542cc35c1d7d2c962990abce51" translate="yes" xml:space="preserve">
          <source>the element or window being scrolled &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ecda15e807e97eaac6a3f3c9137502b8f66747" translate="yes" xml:space="preserve">
          <source>the error &lt;strong&gt;(Object)&lt;/strong&gt;, Mocha runnable &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feebb5889291a79c58f11e8172e8df1b51a4edcb" translate="yes" xml:space="preserve">
          <source>the new url &lt;strong&gt;(String)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7db34c2235ed7db6df81e5a87011c989667db225" translate="yes" xml:space="preserve">
          <source>the new viewport &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0a84673bbe034f000d561d993c69d2ae85244db" translate="yes" xml:space="preserve">
          <source>the remote window &lt;strong&gt;(Object)&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8f8e9f767353d846d34ea5a451c83849c1b01b" translate="yes" xml:space="preserve">
          <source>then</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad1e986757a5e349b1acaddaf692f3affd4228a" translate="yes" xml:space="preserve">
          <source>then trigger the appropriate event to signal it has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc22f4261c00c311f267df8c4baf53a850273ab" translate="yes" xml:space="preserve">
          <source>threw</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1617bbfdd9da0c9e0b2f78c4dfcc3bc5284dd07" translate="yes" xml:space="preserve">
          <source>throw(&lt;em&gt;constructor&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383216819013117c744030a6a4663a3af9c4bcb8" translate="yes" xml:space="preserve">
          <source>tick</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c6de1b7dd91465d437ef415f94f36afc1fbc8a8" translate="yes" xml:space="preserve">
          <source>title</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d62d4aee9a5d4fe8539e53a9e3d05ffc210c9b" translate="yes" xml:space="preserve">
          <source>trigger</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffe533b830f08a0326348a9160afafc8ada44db" translate="yes" xml:space="preserve">
          <source>true</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0a3e7f81a9885e99049d1cae0336d269d5e47a9" translate="yes" xml:space="preserve">
          <source>type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd59fe1b9a1dba6076ad0f4b2bf3d98a4a3cc464" translate="yes" xml:space="preserve">
          <source>uncheck</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d4cd07616a542891b7ec2d0257b3a24b69856e" translate="yes" xml:space="preserve">
          <source>undefined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c612c805b76a23ff280fe0587e3ace2127eb58d" translate="yes" xml:space="preserve">
          <source>upgraded jsUri to &lt;code&gt;1.3.0&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81736358b1645103ae83247b10c5f82af641ddfc" translate="yes" xml:space="preserve">
          <source>url</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3d1d4fa2d8bb696a6ef4b97a6a5abca16750e4" translate="yes" xml:space="preserve">
          <source>value(&lt;em&gt;value&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c692273deb2772da307ffe37041fef77bf4baa97" translate="yes" xml:space="preserve">
          <source>version</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec07619123a17f76b53837e9ff686d288fdc4eb" translate="yes" xml:space="preserve">
          <source>viewport</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="223883960405d6589d6cd37f175c73b073c4180f" translate="yes" xml:space="preserve">
          <source>visible</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41f18cb110cde31eb13409541bef035df4b32bf" translate="yes" xml:space="preserve">
          <source>visit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe6a7072cb5962331d40dd871c3409754b941e5" translate="yes" xml:space="preserve">
          <source>vsts-ci.yml</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daaad336276d15594d0e765f96c17cd746bf4971" translate="yes" xml:space="preserve">
          <source>wait</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ac03724adb607131ddcd97eca8850794c51c9e" translate="yes" xml:space="preserve">
          <source>wait for your server to send the response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc8fab4c954a69e5b780a7fae309567199c86594" translate="yes" xml:space="preserve">
          <source>webpack Preprocessor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c12748c0e2734e9b02637c0aeefcf13bd78557f" translate="yes" xml:space="preserve">
          <source>whether to fail if the command exits with a non-zero code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70bec8a9bf5ecd2e6b37316e112b3f4c615ad4d3" translate="yes" xml:space="preserve">
          <source>width</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="320ad267d8d969f285eda5c184f5455bd29c8c95" translate="yes" xml:space="preserve">
          <source>window</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f42ef62128025c7fd38f4952b8a2dc53beb818e7" translate="yes" xml:space="preserve">
          <source>within</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e9059e9b3c481d3a977c8dc49a646dc2a8b3a81" translate="yes" xml:space="preserve">
          <source>within(&lt;em&gt;start&lt;/em&gt;, &lt;em&gt;finish&lt;/em&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9a9b59c13346fc14ab001ab72d3e9ec9fbc151" translate="yes" xml:space="preserve">
          <source>woff Fonts are now properly served from a local file system when using Cypress&amp;rsquo; web server. Fixes &lt;a href=&quot;https://github.com/cypress-io/cypress/issues/135&quot;&gt;#135&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0cad97953dfb126d32dc160dbb2bbc326d2ec8d" translate="yes" xml:space="preserve">
          <source>wrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b8257fc78666892f1dfe434d6373f1c5b7bdfaf" translate="yes" xml:space="preserve">
          <source>writeFile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910b2b1c53c9da275fe2380595b1d428e7925bc1" translate="yes" xml:space="preserve">
          <source>⚠️ Loading and mounting components from various frameworks is highly experimental and might change in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8e5a299be299f2063ed85a04a235f3d4369e4d" translate="yes" xml:space="preserve">
          <source>✅ &lt;strong&gt;Admin&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb53c2033aad92833d78e8c1b3a921a25c774fd" translate="yes" xml:space="preserve">
          <source>✅ &lt;strong&gt;Member&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3108e7ec587f648e454b05425fbb2288386f9068" translate="yes" xml:space="preserve">
          <source>✅ &lt;strong&gt;Owner&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9aec25528107740fc90af2cc2fdc03c04fb9be" translate="yes" xml:space="preserve">
          <source>✅ If the assertion that follows the &lt;code&gt;cy.get()&lt;/code&gt; command passes, then the command finishes successfully.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5af5cb3b33c74d1190c0a942b68a1cb52630c4a" translate="yes" xml:space="preserve">
          <source>✨ &lt;strong&gt;after we wait for the element to reach an &lt;a href=&quot;interacting-with-elements&quot;&gt;actionable state&lt;/a&gt;&lt;/strong&gt; ✨</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce8afdada023bc26c98466d32c02c5a0f66ebc8" translate="yes" xml:space="preserve">
          <source>✨ &lt;strong&gt;and &lt;a href=&quot;retry-ability&quot;&gt;retry&lt;/a&gt; until it is found in the DOM&lt;/strong&gt; ✨</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5208d20d9c62543f41551cb668bc664819a339c3" translate="yes" xml:space="preserve">
          <source>✨ &lt;strong&gt;and &lt;a href=&quot;retry-ability&quot;&gt;retry&lt;/a&gt; until the assertion passes&lt;/strong&gt; ✨</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e309e35a8e9d8d9cfce8e5e70fddf57e6fc46bd" translate="yes" xml:space="preserve">
          <source>✨ &lt;strong&gt;and wait for the page &lt;code&gt;load&lt;/code&gt; event to fire after all external resources have loaded&lt;/strong&gt;✨</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc90bef6debf58cf833eb78726225a921ef3df5" translate="yes" xml:space="preserve">
          <source>✨&lt;strong&gt;and waits up to 10 seconds for it to be visible&lt;/strong&gt;✨</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c786093f55045052c75efaa92a85c5236e68c4" translate="yes" xml:space="preserve">
          <source>✨&lt;strong&gt;and waits up to 10 seconds for it to contain the text: &amp;lsquo;Home&amp;rsquo;&lt;/strong&gt;✨</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e2b74d51ea7d1541cadce53b7886483ba2fc789" translate="yes" xml:space="preserve">
          <source>✨&lt;strong&gt;and waits up to 10 seconds for it to exist in the DOM&lt;/strong&gt;✨</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a483d38340f116b7097b01e6aebef931be6e991f" translate="yes" xml:space="preserve">
          <source>✨&lt;strong&gt;and waits up to 4 seconds for it to be visible&lt;/strong&gt;✨</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02e8f70093143f7d6c4da0d6e7a22d4b958b3d01" translate="yes" xml:space="preserve">
          <source>✨&lt;strong&gt;and waits up to 4 seconds for it to contain the text: &amp;lsquo;Home&amp;rsquo;&lt;/strong&gt;✨</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6abbfbd02bfd6f90e8abc0619cb6679f79d512c" translate="yes" xml:space="preserve">
          <source>✨&lt;strong&gt;and waits up to 4 seconds for it to exist in the DOM&lt;/strong&gt;✨</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4773a122b2c38be23ec9dd09469489df25c65ab1" translate="yes" xml:space="preserve">
          <source>🎉 Your tests are now recording! As soon as tests finish running, you will see them in the &lt;a href=&quot;https://on.cypress.io/dashboard&quot;&gt;Dashboard&lt;/a&gt; and in the Runs tab of the &lt;a href=&quot;../core-concepts/test-runner&quot;&gt;Test Runner&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ebf9d451002f2b4e95eec688c14e2a14d6b1871" translate="yes" xml:space="preserve">
          <source>🐅 Simple and complete custom Cypress commands and utilities that encourage good testing practices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f497f8219f4f92e9760ddc1558a4d2e73b8c560e" translate="yes" xml:space="preserve">
          <source>🚨 If the assertion that follows the &lt;code&gt;cy.get()&lt;/code&gt; command fails, then the &lt;code&gt;cy.get()&lt;/code&gt; command will requery the application&amp;rsquo;s DOM again. Then Cypress will try the assertion against the elements yielded from &lt;code&gt;cy.get()&lt;/code&gt;. If the assertion still fails, &lt;code&gt;cy.get()&lt;/code&gt; will try requery the DOM again, and so on until the &lt;code&gt;cy.get()&lt;/code&gt; command timeout is reached.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
