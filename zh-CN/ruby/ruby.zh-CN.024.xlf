<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="ruby">
    <body>
      <group id="ruby">
        <trans-unit id="281840faf978c55370407dcec21586c3d928ec5e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;break&lt;/code&gt; to leave a block early. This will stop iterating over the items in &lt;code&gt;values&lt;/code&gt; if one of them is even:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b5b70ee7dd4f824080e38e422f79eaac9d44a37" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;extend MonitorMixin&lt;/code&gt; or &lt;code&gt;include MonitorMixin&lt;/code&gt; instead of this constructor. Have look at the examples above to understand how to use this module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="613a2af1484931aa86d2ab5656c3a9258e9f31f7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;mtime&lt;/code&gt; if you want a parsed &lt;a href=&quot;../time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed270e6ccebaa44d442331e156e45998e4d584a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;next&lt;/code&gt; to skip the rest of the current iteration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2deb863e2f617acbdc533cc0b23691f0616cdd6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;redo&lt;/code&gt; to redo the current iteration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc249cd11b3525610a272bd5db152f625a20d66" translate="yes" xml:space="preserve">
          <source>Use MD5 digests (RFC2385, Linux 2.6.20, glibc 2.7)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35449329ccdd2a504e0177c650a48af611dadecf" translate="yes" xml:space="preserve">
          <source>Use __raise__ if your &lt;a href=&quot;delegator&quot;&gt;&lt;code&gt;Delegator&lt;/code&gt;&lt;/a&gt; does not have a object to delegate the raise method call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89701725c34d03d1a040f9683a6839d4bb4a9c9f" translate="yes" xml:space="preserve">
          <source>Use _dump and _load when you need to allocate the object you're restoring yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf5530ff8cb27e8185105818f1ed4f55c7594a2" translate="yes" xml:space="preserve">
          <source>Use a character class such as &lt;code&gt;[ ]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e62b45ddacd5d26af0254db6ff97031d7d09ce" translate="yes" xml:space="preserve">
          <source>Use a new &lt;a href=&quot;openssl/cipher&quot;&gt;&lt;code&gt;Cipher&lt;/code&gt;&lt;/a&gt; instance set up for decryption</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517a4772487d9251626020d145ed3c510ddf472c" translate="yes" xml:space="preserve">
          <source>Use a pattern such as &lt;code&gt;\s&lt;/code&gt; or &lt;code&gt;\p{Space}&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d62ea4f7b4c319a98abeca16301ed407050a64f" translate="yes" xml:space="preserve">
          <source>Use clock() defined by ISO C. The resolution is 1/CLOCKS_PER_SEC. CLOCKS_PER_SEC is the C-level macro defined by time.h. SUS defines CLOCKS_PER_SEC is 1000000. Non-Unix systems may define it a different value, though. If CLOCKS_PER_SEC is 1000000 as SUS, the resolution is 1 microsecond. If CLOCKS_PER_SEC is 1000000 and clock_t is 32 bits integer type, it cannot represent over 72 minutes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd62249d5194a79df9cc4dfbd26783b7dbd3416e" translate="yes" xml:space="preserve">
          <source>Use escaped whitespace such as &lt;code&gt;\ &lt;/code&gt;, i.e. a space preceded by a backslash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3996c73175f8d7591660c1bc4e982f130e4eda8a" translate="yes" xml:space="preserve">
          <source>Use full_mark: false to perform a minor &lt;a href=&quot;gc&quot;&gt;&lt;code&gt;GC&lt;/code&gt;&lt;/a&gt;. Use immediate_sweep: false to defer sweeping (use lazy sweep).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9ac1ef680e6a2695d0777d91e27e06d578ce9f" translate="yes" xml:space="preserve">
          <source>Use getrusage() defined by SUS. getrusage() is used with RUSAGE_SELF to obtain the time only for the calling process (excluding the time for child processes). The result is addition of user time (ru_utime) and system time (ru_stime). The resolution is 1 microsecond.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0801061ee890978709e2d6ba05b2f2629464797" translate="yes" xml:space="preserve">
          <source>Use gettimeofday() defined by SUS. (SUSv4 obsoleted it, though.) The resolution is 1 microsecond.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c86a0c153f720cb2928ea922853f3360accaf1aa" translate="yes" xml:space="preserve">
          <source>Use instead &lt;code&gt;time + 1&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0081e1d27eacce49da90d642e522c13802b857e" translate="yes" xml:space="preserve">
          <source>Use interface addresses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04a9e30cb852af5b6022ccc7d4bdc30c3eafbfe" translate="yes" xml:space="preserve">
          <source>Use mach_absolute_time(), available on Darwin. The resolution is CPU dependent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625c997877724f51899269035a14159ccc9eff08" translate="yes" xml:space="preserve">
          <source>Use map(&amp;amp;:to_f)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73636d3dd9004eefd74046bb0b4416f7f2ce3081" translate="yes" xml:space="preserve">
          <source>Use map(&amp;amp;:to_i)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68fac3b9c97dc8c26a94b0aa5b3b8d142f108182" translate="yes" xml:space="preserve">
          <source>Use map(&amp;amp;:to_r)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c3e1da932bdd94f452f195365cc057323d3510" translate="yes" xml:space="preserve">
          <source>Use of the inner parentheses only uses one of the sent arguments. If the argument is not an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; it will be assigned to the first argument in the decomposition and the remaining arguments in the decomposition will be &lt;code&gt;nil&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9b6b9ee1523312c23dc38586843cc17a49860a" translate="yes" xml:space="preserve">
          <source>Use of this form is discouraged. Use Kernel#enum_for or Kernel#to_enum instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bbc06d4f3a27fcf3598fac6236519fcf55c563" translate="yes" xml:space="preserve">
          <source>Use per-route hints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8cd0cb875b8252d598fb468f085c8bf781224c" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;kernel#method-i-proc&quot;&gt;&lt;code&gt;Kernel#proc&lt;/code&gt;&lt;/a&gt; method as a shorthand of &lt;a href=&quot;proc#method-c-new&quot;&gt;&lt;code&gt;Proc.new&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509587cf75d3629b5af9bf7f531309818886023b" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;monitor&quot;&gt;&lt;code&gt;Monitor&lt;/code&gt;&lt;/a&gt; class when you want to have a lock object for blocks with mutual exclusion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570e1fa5804e4e78adca33957031d50bddf38b0d" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;proc&quot;&gt;&lt;code&gt;Proc&lt;/code&gt;&lt;/a&gt; class constructor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b128572f6243a1c8c6651b26db1f0487f10d08c8" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;class&lt;/code&gt; keyword to create a class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f30da435e727dd2ae145d69475826190b416232" translate="yes" xml:space="preserve">
          <source>Use the API when installing less than X gems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e5eb25bc1fe66531fa943cde932f9036c5d2b28" translate="yes" xml:space="preserve">
          <source>Use the Lambda literal syntax (also constructs a proc with lambda semantics):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7621a5ef65846390936a81ea762d5defdaf4e32e" translate="yes" xml:space="preserve">
          <source>Use the minimum MTU size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2d15f15fd725795945645483d3cbdb6f5b4ed6" translate="yes" xml:space="preserve">
          <source>Use the result value of times() defined by POSIX. POSIX defines it as &amp;ldquo;times() shall return the elapsed real time, in clock ticks, since an arbitrary point in the past (for example, system start-up time)&amp;rdquo;. For example, GNU/Linux returns a value based on jiffies and it is monotonic. However, 4.4BSD uses gettimeofday() and it is not monotonic. (FreeBSD uses &lt;a href=&quot;process#method-c-clock_gettime&quot;&gt;&lt;code&gt;clock_gettime&lt;/code&gt;&lt;/a&gt;(CLOCK_MONOTONIC) instead, though.) The resolution is the clock tick. &amp;ldquo;getconf CLK_TCK&amp;rdquo; command shows the clock ticks per second. (The clock ticks per second is defined by HZ macro in older systems.) If it is 100 and clock_t is 32 bits integer type, the resolution is 10 millisecond and cannot represent over 497 days.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f777c0fbb5cf7c13db8741af12b9dc19ce8389a6" translate="yes" xml:space="preserve">
          <source>Use the same steps as before to derive the symmetric AES key, this time setting the &lt;a href=&quot;openssl/cipher&quot;&gt;&lt;code&gt;Cipher&lt;/code&gt;&lt;/a&gt; up for decryption.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d844cc91ba15814442a9e5a155cdaeb84fadd44" translate="yes" xml:space="preserve">
          <source>Use this method only as a last resort!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277a8b57fa9e72cdb48c448c1ed1d8b856037562" translate="yes" xml:space="preserve">
          <source>Use this method to detect the idle timeout of the host at &lt;code&gt;uri&lt;/code&gt;. The value returned can be used to configure &lt;a href=&quot;persistent#attribute-i-idle_timeout&quot;&gt;&lt;code&gt;idle_timeout&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;max&lt;/code&gt; controls the maximum idle timeout to detect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a4e1d793ab97c2ce15ca093ee021210755f060a" translate="yes" xml:space="preserve">
          <source>Use time() defined by ISO C. The resolution is 1 second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f1878dd3a1aa9b5ea1c74891c2f4f206b92dac" translate="yes" xml:space="preserve">
          <source>Use times() defined by POSIX. The result is addition of user time (tms_utime) and system time (tms_stime). tms_cutime and tms_cstime are ignored to exclude the time for child processes. The resolution is the clock tick. &amp;ldquo;getconf CLK_TCK&amp;rdquo; command shows the clock ticks per second. (The clock ticks per second is defined by HZ macro in older systems.) If it is 100, the resolution is 10 millisecond.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ee2febb9e924d70e1ff642d1593b38199d01a7" translate="yes" xml:space="preserve">
          <source>Use to slurp a &lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; file into an &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; of Arrays. Pass the &lt;code&gt;path&lt;/code&gt; to the file and any &lt;code&gt;options&lt;/code&gt;&lt;a href=&quot;csv#method-c-new&quot;&gt;&lt;code&gt;CSV::new()&lt;/code&gt;&lt;/a&gt; understands. This method also understands an additional &lt;code&gt;:encoding&lt;/code&gt; parameter that you can use to specify the &lt;a href=&quot;encoding&quot;&gt;&lt;code&gt;Encoding&lt;/code&gt;&lt;/a&gt; of the data in the file to be read. You must provide this unless your data is in &lt;a href=&quot;encoding#method-c-default_external&quot;&gt;&lt;code&gt;Encoding::default_external()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; will use this to determine how to parse the data. You may provide a second &lt;a href=&quot;encoding&quot;&gt;&lt;code&gt;Encoding&lt;/code&gt;&lt;/a&gt; to have the data transcoded as it is read. For example, &lt;code&gt;encoding: &quot;UTF-32BE:UTF-8&quot;&lt;/code&gt; would read UTF-32BE data from the file but transcode it to UTF-8 before &lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; parses it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98b33558dbd3fdc040ed3f324a7d470a07093d0" translate="yes" xml:space="preserve">
          <source>UseProxy</source>
          <target state="translated">UseProxy</target>
        </trans-unit>
        <trans-unit id="b859e4440e251a233f836044a1c91609ad5e7e4d" translate="yes" xml:space="preserve">
          <source>Used by &lt;a href=&quot;inflate#method-c-inflate&quot;&gt;&lt;code&gt;Zlib::Inflate.inflate&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;Zlib.inflate&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a8f891051b0f79bd593e64ac617f76eefe2e1a" translate="yes" xml:space="preserve">
          <source>Used by definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc10bdadcd717548f51b89c0e4ebc6735590171" translate="yes" xml:space="preserve">
          <source>Used for &lt;code&gt;if&lt;/code&gt; and modifier &lt;code&gt;if&lt;/code&gt; expressions. See &lt;a href=&quot;syntax/control_expressions_rdoc&quot;&gt;control expressions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b95081388f2e47f0ca8d81ef37f62a7f51d97902" translate="yes" xml:space="preserve">
          <source>Used for &lt;code&gt;unless&lt;/code&gt; and modifier &lt;code&gt;unless&lt;/code&gt; expressions. See &lt;a href=&quot;syntax/control_expressions_rdoc&quot;&gt;control expressions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8218cfd04fa9a6faac3ac0ceab793b9944a96d2e" translate="yes" xml:space="preserve">
          <source>Used in case statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a22f369499dbc2d3bd315fd53d2d2847a6a80d" translate="yes" xml:space="preserve">
          <source>Used internally by &lt;a href=&quot;importer&quot;&gt;&lt;code&gt;Fiddle::Importer&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e59f103ed013ebdddb56579f045c75be3e1eb92" translate="yes" xml:space="preserve">
          <source>Used internally by &lt;a href=&quot;importer#method-i-dlload&quot;&gt;&lt;code&gt;Fiddle::Importer.dlload&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80f5b34f519176182c0f2c47ebfedc6573d1dc6" translate="yes" xml:space="preserve">
          <source>Used to construct C classes (CUnion, &lt;a href=&quot;cstruct&quot;&gt;&lt;code&gt;CStruct&lt;/code&gt;&lt;/a&gt;, etc)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0e8e7b46628b7ad6495160e71f4884f85320814" translate="yes" xml:space="preserve">
          <source>Used to filter unwanted trace output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="002d6aade7adfa1fc8793711bf96243159c217b7" translate="yes" xml:space="preserve">
          <source>Used to make bin stubs that are not created by bundler work under bundler. The new Gem.bin_path only considers gems in &lt;code&gt;specs&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16860b1dd7f7a3eef533bd689cc3f90307910ed1" translate="yes" xml:space="preserve">
          <source>Used to remove a pair from the row by &lt;code&gt;header&lt;/code&gt; or &lt;code&gt;index&lt;/code&gt;. The pair is located as described in &lt;a href=&quot;row#method-i-field&quot;&gt;&lt;code&gt;CSV::Row.field()&lt;/code&gt;&lt;/a&gt;. The deleted pair is returned, or &lt;code&gt;nil&lt;/code&gt; if a pair could not be found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7f264dc67846152f4c2ba46792e6475bca0610c" translate="yes" xml:space="preserve">
          <source>Used to separate the iterable object and iterator variable in a &lt;code&gt;for&lt;/code&gt; loop. See &lt;a href=&quot;syntax/control_expressions_rdoc&quot;&gt;control expressions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce1e5c7e296155d2ddb0f4ca6fb1c80b6fe92e1c" translate="yes" xml:space="preserve">
          <source>Used:</source>
          <target state="translated">Used:</target>
        </trans-unit>
        <trans-unit id="fb593cc6edad0030ddc1f4df4c8a459452d32dc5" translate="yes" xml:space="preserve">
          <source>Usenet news system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acedd1d500e02fe18e016dc1cff5c5e1360ee669" translate="yes" xml:space="preserve">
          <source>User &lt;a href=&quot;class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7429885986f5c2d4afdf76068522328b70f1b3c2" translate="yes" xml:space="preserve">
          <source>User &lt;a href=&quot;marshal&quot;&gt;&lt;code&gt;Marshal&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5d304d23232f892e43f148ee02f64c01733d36" translate="yes" xml:space="preserve">
          <source>User CPU time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef50ee923f3e65cbc931270d94f8f0d5672f9897" translate="yes" xml:space="preserve">
          <source>User CPU time of children</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f90db9d2ed1cbb34fda5372a81ca295ef7bc5332" translate="yes" xml:space="preserve">
          <source>User Defined</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7267626f7b38fe6922f845ff2ee493188516a41" translate="yes" xml:space="preserve">
          <source>User credentials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b63c078b8a947012ac0b9e1d30a9f089f1469070" translate="yes" xml:space="preserve">
          <source>User name and password, i.e. 'sdmitry:bla'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2664a1fc480a6f38fb21f41bde2ca926c8c7639c" translate="yes" xml:space="preserve">
          <source>User name for accessing proxy. If &lt;a href=&quot;http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt; does not use a proxy, nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec102f7a6a28fb71f65bcfe7cef1ca7731417a2" translate="yes" xml:space="preserve">
          <source>User password for accessing proxy. If &lt;a href=&quot;http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt; does not use a proxy, nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="566a62c3fc85114187861d35c59f2874c045eaf9" translate="yes" xml:space="preserve">
          <source>Userinfo</source>
          <target state="translated">Userinfo</target>
        </trans-unit>
        <trans-unit id="0510a26ba3a17cdd277bf17dfbef56296a5fe035" translate="yes" xml:space="preserve">
          <source>Username for login. If options is the string &amp;ldquo;anonymous&amp;rdquo; and the options is &lt;code&gt;nil&lt;/code&gt;, &amp;ldquo;anonymous@&amp;rdquo; is used as a password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5afd6b45f6e12714e1698058a43fe26191d46fe8" translate="yes" xml:space="preserve">
          <source>Uses /etc/resolv.conf.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51102b35741015887b835e2ab95b7a91eb38ba23" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;/&lt;/code&gt; to perform division, then converts the result to an integer. &lt;a href=&quot;numeric&quot;&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/a&gt; does not define the &lt;code&gt;/&lt;/code&gt; operator; this is left to subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7138a2a86489e5e108c0340126daec029cced4" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;EratosthenesSieve&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4888061e706338ed90d0b61d2e8977d7ffc700c" translate="yes" xml:space="preserve">
          <source>Uses each &lt;em&gt;index&lt;/em&gt; to access the matching values, returning an array of the corresponding matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aed8715c54159bdefdcd25a2e1ad3fc596483d3" translate="yes" xml:space="preserve">
          <source>Uses eratosthenes' sieve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f82db3c8e1bf6e5193f370ca2e8d2bec96ec8fef" translate="yes" xml:space="preserve">
          <source>Uses the character &lt;code&gt;cmd&lt;/code&gt; to perform various tests on &lt;code&gt;file1&lt;/code&gt; (first table below) or on &lt;code&gt;file1&lt;/code&gt; and &lt;code&gt;file2&lt;/code&gt; (second table).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00e43aeeb392974ccd285ff5a0d7dce8df3b6a4" translate="yes" xml:space="preserve">
          <source>Uses the current thread by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21a514a5d6f842c557b7c93c2c6f950f8ba9926" translate="yes" xml:space="preserve">
          <source>Uses the default mDNS addresses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db85439c678b50a4ce2592c6a10f4094e57e8297" translate="yes" xml:space="preserve">
          <source>Uses the trial division method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff6bf3e9611fa208c58aa63cabf839207631a7f" translate="yes" xml:space="preserve">
          <source>Using &amp;ldquo;private_encrypt&amp;rdquo; to encrypt some data with the private key is equivalent to applying a digital signature to the data. A verifying party may validate the signature by comparing the result of decrypting the signature with &amp;ldquo;public_decrypt&amp;rdquo; to the original data. However, &lt;a href=&quot;openssl/pkey&quot;&gt;&lt;code&gt;OpenSSL::PKey&lt;/code&gt;&lt;/a&gt; already has methods &amp;ldquo;sign&amp;rdquo; and &amp;ldquo;verify&amp;rdquo; that handle digital signatures in a standardized way - &amp;ldquo;private_encrypt&amp;rdquo; and &amp;ldquo;public_decrypt&amp;rdquo; shouldn't be used in practice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8cf3eaba5292fb0a001a854a394687f7ed36d4" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;apop&quot;&gt;&lt;code&gt;APOP&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95eaabf8138cb70fff88893a400e8c47a0b9c796" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;cgi#method-i-header&quot;&gt;&lt;code&gt;header&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;HTML5&lt;/code&gt; tag maker will create a &amp;lt;header&amp;gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46db08378c56703535c0a024a2d649f6c10bc364" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;instructionsequence#method-c-compile_file&quot;&gt;&lt;code&gt;::compile_file&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde818be91a7c32eae5ca40d3f972355d5b8db15" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;=~&lt;/code&gt; operator with a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;regexp&quot;&gt;&lt;code&gt;Regexp&lt;/code&gt;&lt;/a&gt; the &lt;code&gt;$~&lt;/code&gt; global variable is set after a successful match. &lt;code&gt;$~&lt;/code&gt; holds a &lt;a href=&quot;matchdata&quot;&gt;&lt;code&gt;MatchData&lt;/code&gt;&lt;/a&gt; object. &lt;a href=&quot;regexp#method-c-last_match&quot;&gt;&lt;code&gt;Regexp.last_match&lt;/code&gt;&lt;/a&gt; is equivalent to &lt;code&gt;$~&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4becc18e9f95dadd7e875a8c37e5fd54d445952d" translate="yes" xml:space="preserve">
          <source>Using Built-in Conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb346e375a54533c533be202c3a4ce831b6f9d3" translate="yes" xml:space="preserve">
          <source>Using a case statement you can handle various types of responses properly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b940144584fe5f71b2c4e93c7a9f481327c1b2a" translate="yes" xml:space="preserve">
          <source>Using assignment methods allows your programs to look nicer. When assigning to an instance variable most people use &lt;a href=&quot;../module#method-i-attr_accessor&quot;&gt;&lt;code&gt;Module#attr_accessor&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b77b5de27ec230112eb1b12d09e4bfbddf8f2d6" translate="yes" xml:space="preserve">
          <source>Using our created key and certificate we can create an &lt;a href=&quot;openssl/ssl&quot;&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/a&gt; or TLS connection. An SSLContext is used to set up an &lt;a href=&quot;openssl/ssl&quot;&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/a&gt; session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2cd212f437aaeb875bf47cc1cdeef4e014be436" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;array#method-i-insert&quot;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt; method, you can also insert multiple values at once:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fd75938e2be89613cbcb24af4e827452f52534" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;:never&lt;/code&gt; TimingSymbol the &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; exception will always be ignored in the first block of the main thread. In the second &lt;a href=&quot;thread#method-c-handle_interrupt&quot;&gt;&lt;code&gt;::handle_interrupt&lt;/code&gt;&lt;/a&gt; block we can purposefully handle &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; exceptions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9673c023c211b553503302e9cba6e4bae6cf15" translate="yes" xml:space="preserve">
          <source>Using the specific reflection methods such as instance_variable_defined? for instance variables or const_defined? for constants is less error prone than using &lt;code&gt;defined?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e39c4f528a1ebf45c0cd46dd9198179feb91b7" translate="yes" xml:space="preserve">
          <source>Using the wrapper to compress strings with default parameters is quite simple:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4131a14c25f81d91ad919de2b926e9c59a90f21e" translate="yes" xml:space="preserve">
          <source>Usually consists of method, class, module, etc names with decoration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7949cdc888a82569fc43376f46180b3cb80ae760" translate="yes" xml:space="preserve">
          <source>Usually defaults to -1021.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb14f78e23b54cfaad42cef7a7095058d89c7da" translate="yes" xml:space="preserve">
          <source>Usually defaults to -307.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207025ebe05fbb7742fd7ea51a3f8ac79e48f8c5" translate="yes" xml:space="preserve">
          <source>Usually defaults to 1, rounding to the nearest number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6c4b3e054f9254f2c33ef50c500aa44fc80a78" translate="yes" xml:space="preserve">
          <source>Usually defaults to 1.7976931348623157e+308.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb81bb8954a2d3f7a85a71edf13650732acb479" translate="yes" xml:space="preserve">
          <source>Usually defaults to 1024.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d404c27dfcb2f42cc76c935bf7927182c0c3a00f" translate="yes" xml:space="preserve">
          <source>Usually defaults to 15.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1d79cdfd49b420a228ac9fb27d0f9ca61f6fa0" translate="yes" xml:space="preserve">
          <source>Usually defaults to 2 on most systems, which would represent a base-10 decimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f381b3ffb6b4fa893c11f124d5af5102b1fe54d" translate="yes" xml:space="preserve">
          <source>Usually defaults to 2.2204460492503131e-16.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="834db51f26a668f4b05e55a93f929402fa4c2746" translate="yes" xml:space="preserve">
          <source>Usually defaults to 2.2250738585072014e-308.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac6578f66ba2a609eb4b9b9fab5ff212a26147f" translate="yes" xml:space="preserve">
          <source>Usually defaults to 308.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66c38aabbdbaa697c33b3d7c74b4a756c5090eb" translate="yes" xml:space="preserve">
          <source>Usually defaults to 53.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41fd5e206b38708569a2cfe5f548ba2ab6d934a6" translate="yes" xml:space="preserve">
          <source>Usually if a stream was prematurely freed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e8c5fb98302630e29f2f5f7a1527ca24d4354c" translate="yes" xml:space="preserve">
          <source>Usually if no progress is possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6a1be6acf6fb41955f8d3f53aeef84f1b97719" translate="yes" xml:space="preserve">
          <source>Usually same as &lt;a href=&quot;location#method-i-label&quot;&gt;&lt;code&gt;label&lt;/code&gt;&lt;/a&gt;, without decoration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d4bdecbc9ebc55bf7f5f84721e25fd797629c99" translate="yes" xml:space="preserve">
          <source>Util#escape</source>
          <target state="translated">Util#escape</target>
        </trans-unit>
        <trans-unit id="9feea9d01ed0590854beadcdaa67e622d6e81aed" translate="yes" xml:space="preserve">
          <source>Util#escapeElement</source>
          <target state="translated">Util#escapeElement</target>
        </trans-unit>
        <trans-unit id="6ed4b96287a8aed928482790fd0aff9403f969d9" translate="yes" xml:space="preserve">
          <source>Util#escapeHTML</source>
          <target state="translated">Util#escapeHTML</target>
        </trans-unit>
        <trans-unit id="b80536f315297068353e9142d729315da16f6531" translate="yes" xml:space="preserve">
          <source>Util#escape_element</source>
          <target state="translated">Util#escape_element</target>
        </trans-unit>
        <trans-unit id="7d345542f43b874c99a96dbb25b881981bc12b66" translate="yes" xml:space="preserve">
          <source>Util#escape_html</source>
          <target state="translated">Util#escape_html</target>
        </trans-unit>
        <trans-unit id="313b6b12121c8b6aad7f74b41679e1b2d2547de3" translate="yes" xml:space="preserve">
          <source>Util#h</source>
          <target state="translated">Util#h</target>
        </trans-unit>
        <trans-unit id="09ee661bd97d9bb719ab8249179e01ede45b4a7a" translate="yes" xml:space="preserve">
          <source>Util#html_escape</source>
          <target state="translated">Util#html_escape</target>
        </trans-unit>
        <trans-unit id="80acf2a103ebc2830b5c43cc082697548db818ee" translate="yes" xml:space="preserve">
          <source>Util#pretty</source>
          <target state="translated">Util#pretty</target>
        </trans-unit>
        <trans-unit id="9d9876ca05e41802b409f5e6a0e1f68a50ccd014" translate="yes" xml:space="preserve">
          <source>Util#rfc1123_date</source>
          <target state="translated">Util#rfc1123_date</target>
        </trans-unit>
        <trans-unit id="203fb9da81b23f6afb2a363d37e73b5eee723aba" translate="yes" xml:space="preserve">
          <source>Util#u</source>
          <target state="translated">Util#u</target>
        </trans-unit>
        <trans-unit id="9c1f97960598937d4e8ffe75ed45a5a8e0063e4f" translate="yes" xml:space="preserve">
          <source>Util#unescape</source>
          <target state="translated">Util#unescape</target>
        </trans-unit>
        <trans-unit id="36a36bcbb9192eb75ce2714f5e59e6459507f1f7" translate="yes" xml:space="preserve">
          <source>Util#unescapeElement</source>
          <target state="translated">Util#unescapeElement</target>
        </trans-unit>
        <trans-unit id="ba5fd30dae625b4312276fdf0e6a9a8365acceb5" translate="yes" xml:space="preserve">
          <source>Util#unescapeHTML</source>
          <target state="translated">Util#unescapeHTML</target>
        </trans-unit>
        <trans-unit id="1106dc3a2c5248ff6db8bda12cb263d9866c916f" translate="yes" xml:space="preserve">
          <source>Util#unescape_element</source>
          <target state="translated">Util#unescape_element</target>
        </trans-unit>
        <trans-unit id="0c1cda34eb91fb9976c1da738e3f38660d624309" translate="yes" xml:space="preserve">
          <source>Util#unescape_html</source>
          <target state="translated">Util#unescape_html</target>
        </trans-unit>
        <trans-unit id="3a931dbc4c64e5094e9c260822f1e248a3485a9a" translate="yes" xml:space="preserve">
          <source>Util#url_encode</source>
          <target state="translated">Util#url_encode</target>
        </trans-unit>
        <trans-unit id="acb582f88e04130b94ebbdffa8786b76613ce258" translate="yes" xml:space="preserve">
          <source>Util::h</source>
          <target state="translated">Util::h</target>
        </trans-unit>
        <trans-unit id="66c8b0c5e8f978049160f5f96bcae23108de7879" translate="yes" xml:space="preserve">
          <source>Util::html_escape</source>
          <target state="translated">Util::html_escape</target>
        </trans-unit>
        <trans-unit id="d3659f9a264560dd1b59659e9d84e53da34456a3" translate="yes" xml:space="preserve">
          <source>Util::u</source>
          <target state="translated">Util::u</target>
        </trans-unit>
        <trans-unit id="d1aca87556b65b8079edb7fe6e5ee134d8136b29" translate="yes" xml:space="preserve">
          <source>Util::url_encode</source>
          <target state="translated">Util::url_encode</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="504bece03505faa0441f35c4e180ead426a0768f" translate="yes" xml:space="preserve">
          <source>Utility HTML escape and other methods like a function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6eeee6741183a5e4dad9838e4a8fed3043974d" translate="yes" xml:space="preserve">
          <source>Utility module to define eRuby script as instance method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf5f14ca95f3db73f85ca24a5d2563905c5350a3" translate="yes" xml:space="preserve">
          <source>VALID_KEYS</source>
          <target state="translated">VALID_KEYS</target>
        </trans-unit>
        <trans-unit id="bee6aae81f73ceb5c5b31517ba2e5000a64fa28a" translate="yes" xml:space="preserve">
          <source>VALID_PLATFORMS</source>
          <target state="translated">VALID_PLATFORMS</target>
        </trans-unit>
        <trans-unit id="a46a81d72d7708fe1b901923a08c2a73db4e004c" translate="yes" xml:space="preserve">
          <source>VARIANT_ALSO_VARIES</source>
          <target state="translated">VARIANT_ALSO_VARIES</target>
        </trans-unit>
        <trans-unit id="2674be7391f33ef3a1db1d92dadb1e581bef85ba" translate="yes" xml:space="preserve">
          <source>VERIFY_CLIENT_ONCE</source>
          <target state="translated">VERIFY_CLIENT_ONCE</target>
        </trans-unit>
        <trans-unit id="7b0e6906e94565286a1ae3a42002b12b8911a9a3" translate="yes" xml:space="preserve">
          <source>VERIFY_FAIL_IF_NO_PEER_CERT</source>
          <target state="translated">VERIFY_FAIL_IF_NO_PEER_CERT</target>
        </trans-unit>
        <trans-unit id="50f570cb8b44545aebc609a4e31b93a3f5348fba" translate="yes" xml:space="preserve">
          <source>VERIFY_NONE</source>
          <target state="translated">VERIFY_NONE</target>
        </trans-unit>
        <trans-unit id="1f4bf37e7740ce5bc35e1adaf38efa16aeb1a56c" translate="yes" xml:space="preserve">
          <source>VERIFY_PEER</source>
          <target state="translated">VERIFY_PEER</target>
        </trans-unit>
        <trans-unit id="b33892fbddeffc3368077b4904ad0b3d562a7312" translate="yes" xml:space="preserve">
          <source>VERSION</source>
          <target state="translated">VERSION</target>
        </trans-unit>
        <trans-unit id="72e20e319d3440f967975fd893997c917c3deacf" translate="yes" xml:space="preserve">
          <source>VMS date (%e-%b-%Y)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ff7832629266b2ec80c13217edf991204fe4f3" translate="yes" xml:space="preserve">
          <source>V_CERTSTATUS_GOOD</source>
          <target state="translated">V_CERTSTATUS_GOOD</target>
        </trans-unit>
        <trans-unit id="379b16172897f436ce19e9ca87f2dec4607857ee" translate="yes" xml:space="preserve">
          <source>V_CERTSTATUS_REVOKED</source>
          <target state="translated">V_CERTSTATUS_REVOKED</target>
        </trans-unit>
        <trans-unit id="2b0ba16b68a42d4c080f84cd5b65fa68512671f4" translate="yes" xml:space="preserve">
          <source>V_CERTSTATUS_UNKNOWN</source>
          <target state="translated">V_CERTSTATUS_UNKNOWN</target>
        </trans-unit>
        <trans-unit id="f35647e0a176d8c178fcb99975532bcd5d807579" translate="yes" xml:space="preserve">
          <source>V_RESPID_KEY</source>
          <target state="translated">V_RESPID_KEY</target>
        </trans-unit>
        <trans-unit id="40a90bf9cb92d1d28f6403cd50f2bd828de1cfd7" translate="yes" xml:space="preserve">
          <source>V_RESPID_NAME</source>
          <target state="translated">V_RESPID_NAME</target>
        </trans-unit>
        <trans-unit id="945dc4f83116a5ca98dc057b0ff0d4686f104905" translate="yes" xml:space="preserve">
          <source>Valid flag mask for getaddrinfo (not for application use)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1df00f5c80cb5be7bd6e135f3027b0aba5ade5e8" translate="yes" xml:space="preserve">
          <source>Valid modes are VERIFY_NONE, VERIFY_PEER, VERIFY_CLIENT_ONCE, VERIFY_FAIL_IF_NO_PEER_CERT and defined on &lt;a href=&quot;../ssl&quot;&gt;&lt;code&gt;OpenSSL::SSL&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82af3f3a9770799ea6803b1e003c925fcbd09e71" translate="yes" xml:space="preserve">
          <source>Valid values are &lt;code&gt;:top&lt;/code&gt;, &lt;code&gt;:method&lt;/code&gt;, &lt;code&gt;:block&lt;/code&gt;, &lt;code&gt;:class&lt;/code&gt;, &lt;code&gt;:rescue&lt;/code&gt;, &lt;code&gt;:ensure&lt;/code&gt;, &lt;code&gt;:eval&lt;/code&gt;, &lt;code&gt;:main&lt;/code&gt;, and &lt;code&gt;plain&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37ba6f251a966af313f2630e1875a021ccbec26" translate="yes" xml:space="preserve">
          <source>Validates the Diffie-Hellman parameters associated with this instance. It checks whether a safe prime and a suitable generator are used. If this is not the case, &lt;code&gt;false&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6eb30b50b04fe3a7ffe9a130f61151e799d877" translate="yes" xml:space="preserve">
          <source>Validates typecode &lt;code&gt;v&lt;/code&gt;, returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6750c09fcdcb1e8f869c1152ae33d42de10ae5" translate="yes" xml:space="preserve">
          <source>Value from exception raised on the &lt;code&gt;:raise&lt;/code&gt; event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2365f02f04aad7961276362096d470537baee33a" translate="yes" xml:space="preserve">
          <source>Values are URL encoded as necessary and the content-type is set to application/x-www-form-urlencoded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f091df42404392ebd51be3cdfbaf23ccd332884" translate="yes" xml:space="preserve">
          <source>Values from &lt;a href=&quot;env&quot;&gt;&lt;code&gt;ENV&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d096f3599c3268bff2f3192f31d9cc58238767" translate="yes" xml:space="preserve">
          <source>Values in ARGV including $PROGRAM_NAME</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d29f254a492b44d79560b9f3d937959cb73cdfd" translate="yes" xml:space="preserve">
          <source>Values may be coerced to perform the comparison (see ==, &lt;a href=&quot;bigdecimal#method-i-coerce&quot;&gt;&lt;code&gt;BigDecimal#coerce&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a78ad445296d0fe59f84cd61ffb98633898143" translate="yes" xml:space="preserve">
          <source>Values may be coerced to perform the comparison (see ==, &lt;a href=&quot;bigdecimal#method-i-coerce&quot;&gt;&lt;code&gt;BigDecimal#coerce&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3856561cc21b82bccb9fa7e5a6aefc26ab8b1e3" translate="yes" xml:space="preserve">
          <source>Values may be coerced to perform the comparison:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f818d89fd58e6d1f77e62e7b400b77a530e47379" translate="yes" xml:space="preserve">
          <source>Variables defined in an outer scope appear inner scope:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9f391e867d1e3b4847b9fce2177618906f9093" translate="yes" xml:space="preserve">
          <source>VariantAlsoNegotiates</source>
          <target state="translated">VariantAlsoNegotiates</target>
        </trans-unit>
        <trans-unit id="b402974963cd89409ca8d958cefb00d6e089f841" translate="yes" xml:space="preserve">
          <source>Various ISO 8601 formats:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a71f9d91ceac153ed7d0dc59f6c17268f1aaf3" translate="yes" xml:space="preserve">
          <source>Various constants for the methods in &lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; can be found in &lt;a href=&quot;file/file/constants&quot;&gt;&lt;code&gt;File::Constants&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a57e06f45491067f031284fb03d3a20a0abf04fd" translate="yes" xml:space="preserve">
          <source>Vector</source>
          <target state="translated">Vector</target>
        </trans-unit>
        <trans-unit id="d582c1e7c93ca72aa433eae578fa22bf6512d500" translate="yes" xml:space="preserve">
          <source>Vector#*</source>
          <target state="translated">Vector#*</target>
        </trans-unit>
        <trans-unit id="e22cb2033a89000e310764bacb06f3b0fd374d9a" translate="yes" xml:space="preserve">
          <source>Vector#+</source>
          <target state="translated">Vector#+</target>
        </trans-unit>
        <trans-unit id="b909c524c946a1dc239087315ef4574a2d824c12" translate="yes" xml:space="preserve">
          <source>Vector#+@</source>
          <target state="translated">Vector#+@</target>
        </trans-unit>
        <trans-unit id="adb67484a92bfcd49efe8d6c63b2324a297bbddd" translate="yes" xml:space="preserve">
          <source>Vector#-</source>
          <target state="translated">Vector#-</target>
        </trans-unit>
        <trans-unit id="c101615cb9347b846fc4f942c8b40caeae636622" translate="yes" xml:space="preserve">
          <source>Vector#-@</source>
          <target state="translated">Vector#-@</target>
        </trans-unit>
        <trans-unit id="eaf9145103745986a45293bbc32e5f7447ec231e" translate="yes" xml:space="preserve">
          <source>Vector#/</source>
          <target state="translated">Vector#/</target>
        </trans-unit>
        <trans-unit id="b09b0b38bc61b6b6de175855a932835e21dfecd0" translate="yes" xml:space="preserve">
          <source>Vector#==</source>
          <target state="translated">Vector#==</target>
        </trans-unit>
        <trans-unit id="cee96aa72ae7356972be7a0438668bbda2371ad4" translate="yes" xml:space="preserve">
          <source>Vector#[]</source>
          <target state="translated">Vector#[]</target>
        </trans-unit>
        <trans-unit id="c3ffdbe2f4e1e5c85be4410059379eff0840c052" translate="yes" xml:space="preserve">
          <source>Vector#[]=</source>
          <target state="translated">Vector#[]=</target>
        </trans-unit>
        <trans-unit id="7746e43e14fdb1061ca7b0a3877247faa3146fab" translate="yes" xml:space="preserve">
          <source>Vector#dot</source>
          <target state="translated">Vector#dot</target>
        </trans-unit>
        <trans-unit id="49bbb4d2ca1963a41f886de4386fd11da3260ac6" translate="yes" xml:space="preserve">
          <source>Vector#each</source>
          <target state="translated">Vector#each</target>
        </trans-unit>
        <trans-unit id="40c74711b1e1142d143df065c745372bbde292b1" translate="yes" xml:space="preserve">
          <source>Vector#eql?</source>
          <target state="translated">Vector#eql?</target>
        </trans-unit>
        <trans-unit id="50d3468cdd111c2e0b981d462db3e1cc8ce08bbb" translate="yes" xml:space="preserve">
          <source>Vector#hash</source>
          <target state="translated">Vector#hash</target>
        </trans-unit>
        <trans-unit id="263d524d92f4ec1c926bbd77929c6a00f591f0ac" translate="yes" xml:space="preserve">
          <source>Vector#map</source>
          <target state="translated">Vector#map</target>
        </trans-unit>
        <trans-unit id="4c37bb45f581607b8de41f19267caecd3feb67f1" translate="yes" xml:space="preserve">
          <source>Vector#map!</source>
          <target state="translated">Vector#map!</target>
        </trans-unit>
        <trans-unit id="647318eb596f3d816eb1c110ce17b544c95d64d4" translate="yes" xml:space="preserve">
          <source>Vector#map2</source>
          <target state="translated">Vector#map2</target>
        </trans-unit>
        <trans-unit id="61d4a5fcc7991df00b7793c07ab50df57cc5415f" translate="yes" xml:space="preserve">
          <source>Vector#norm</source>
          <target state="translated">Vector#norm</target>
        </trans-unit>
        <trans-unit id="7bf4a94a933e8ec55175ee69d0a0229191c494cd" translate="yes" xml:space="preserve">
          <source>Vector#r</source>
          <target state="translated">Vector#r</target>
        </trans-unit>
        <trans-unit id="17c8e84895901f06f03032a363bef6dcff10d115" translate="yes" xml:space="preserve">
          <source>Vector#size</source>
          <target state="translated">Vector#size</target>
        </trans-unit>
        <trans-unit id="af366e227c24e0a0be997becc18eb7343c0de4b6" translate="yes" xml:space="preserve">
          <source>Vector#to_a</source>
          <target state="translated">Vector#to_a</target>
        </trans-unit>
        <trans-unit id="cfac7f78dad2fa41136a43b0375c8f76ee535b33" translate="yes" xml:space="preserve">
          <source>Vector#to_s</source>
          <target state="translated">Vector#to_s</target>
        </trans-unit>
        <trans-unit id="92594df11011b8d4dbee70a23ad8a3d4107f13bc" translate="yes" xml:space="preserve">
          <source>Vector::[]</source>
          <target state="translated">Vector::[]</target>
        </trans-unit>
        <trans-unit id="475c174d580174b1c4084f8cf7d9f715f64d7814" translate="yes" xml:space="preserve">
          <source>Vector::basis</source>
          <target state="translated">Vector::basis</target>
        </trans-unit>
        <trans-unit id="fada39bdcf52c19de0d12541982c553efa4c16af" translate="yes" xml:space="preserve">
          <source>Vector::new</source>
          <target state="translated">Vector::new</target>
        </trans-unit>
        <trans-unit id="c05e3965a4150a630bc59969dbf441ba39ebaba0" translate="yes" xml:space="preserve">
          <source>Vector::zero</source>
          <target state="translated">Vector::zero</target>
        </trans-unit>
        <trans-unit id="090b72cddab5818af5764dad1f1a558d3f63ccc1" translate="yes" xml:space="preserve">
          <source>Verbose</source>
          <target state="translated">Verbose</target>
        </trans-unit>
        <trans-unit id="9c89537433ad61acfa842b5a999886aae3913cb1" translate="yes" xml:space="preserve">
          <source>Verifies &lt;em&gt;data&lt;/em&gt; using the Probabilistic Signature Scheme (RSA-PSS).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405d58191811fc13e6f69c0d104f3497ebc23df8" translate="yes" xml:space="preserve">
          <source>Verifies the signature of the certificate, with the public key &lt;em&gt;key&lt;/em&gt;. &lt;em&gt;key&lt;/em&gt; must be an instance of &lt;a href=&quot;../pkey&quot;&gt;&lt;code&gt;OpenSSL::PKey&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dff139fa3623137c6ee32a2b42a0a99d33e49c7" translate="yes" xml:space="preserve">
          <source>Verifies the signature of the response using the given &lt;em&gt;certificates&lt;/em&gt; and &lt;em&gt;store&lt;/em&gt;. This works in the similar way as &lt;a href=&quot;request#method-i-verify&quot;&gt;&lt;code&gt;OpenSSL::OCSP::Request#verify&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce5fee8a3379ac98832d76184370678ed4ea236" translate="yes" xml:space="preserve">
          <source>Verifies this request using the given &lt;em&gt;certificates&lt;/em&gt; and &lt;em&gt;store&lt;/em&gt;. &lt;em&gt;certificates&lt;/em&gt; is an array of &lt;a href=&quot;../x509/certificate&quot;&gt;&lt;code&gt;OpenSSL::X509::Certificate&lt;/code&gt;&lt;/a&gt;, &lt;em&gt;store&lt;/em&gt; is an &lt;a href=&quot;../x509/store&quot;&gt;&lt;code&gt;OpenSSL::X509::Store&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765a7b810d6c957f153fb8d6264a965e2d97a913" translate="yes" xml:space="preserve">
          <source>Verifies whether the signature is valid given the message digest input. It does so by validating &lt;em&gt;sig&lt;/em&gt; using the public key of this &lt;a href=&quot;dsa&quot;&gt;&lt;code&gt;DSA&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676b836c02fc9330123ed97acc5ee0526172b376" translate="yes" xml:space="preserve">
          <source>Verify internal consistency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6886b8d969116345327e0150917d5ed69eb94f" translate="yes" xml:space="preserve">
          <source>Verifying a Certificate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75213695663bdff57dbbe1a3be348973fe86de42" translate="yes" xml:space="preserve">
          <source>Verifying an &lt;a href=&quot;spki&quot;&gt;&lt;code&gt;SPKI&lt;/code&gt;&lt;/a&gt; request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="38c9f3bc3ed39a408461dcd6059424e703eaec18" translate="yes" xml:space="preserve">
          <source>Version number of &lt;a href=&quot;openssl&quot;&gt;&lt;code&gt;OpenSSL&lt;/code&gt;&lt;/a&gt; the ruby &lt;a href=&quot;openssl&quot;&gt;&lt;code&gt;OpenSSL&lt;/code&gt;&lt;/a&gt; extension was built with (base 16)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70745ff747ad3e4a82540567c43bfe40dbec058f" translate="yes" xml:space="preserve">
          <source>Version of &lt;a href=&quot;openssl&quot;&gt;&lt;code&gt;OpenSSL&lt;/code&gt;&lt;/a&gt; the ruby &lt;a href=&quot;openssl&quot;&gt;&lt;code&gt;OpenSSL&lt;/code&gt;&lt;/a&gt; extension was built with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b9948833e0621543af1d53031760a26a618e27" translate="yes" xml:space="preserve">
          <source>Version of &lt;code&gt;forwardable.rb&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f6df245464ebd5f782360adba116d5029994306" translate="yes" xml:space="preserve">
          <source>Version string of GNU &lt;a href=&quot;readline&quot;&gt;&lt;code&gt;Readline&lt;/code&gt;&lt;/a&gt; or libedit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb57cfab23cca8da9b0b3cfa64c5a0329f4a530" translate="yes" xml:space="preserve">
          <source>VersionConflict</source>
          <target state="translated">VersionConflict</target>
        </trans-unit>
        <trans-unit id="f4462a3d8aaec8656f0d271d279efb72a60c4ae7" translate="yes" xml:space="preserve">
          <source>VersionConflict#conflicts</source>
          <target state="translated">VersionConflict#conflicts</target>
        </trans-unit>
        <trans-unit id="a788abf18af2924322b21c45f013fc065697a00d" translate="yes" xml:space="preserve">
          <source>VersionConflict::new</source>
          <target state="translated">VersionConflict::new</target>
        </trans-unit>
        <trans-unit id="f8113eba9ee940577bf6c2bf98d8d74e8f86abf4" translate="yes" xml:space="preserve">
          <source>VersionError</source>
          <target state="translated">VersionError</target>
        </trans-unit>
        <trans-unit id="4305c636c8c201f578ebae6165e288fd11ba3274" translate="yes" xml:space="preserve">
          <source>VersionNotSupported</source>
          <target state="translated">VersionNotSupported</target>
        </trans-unit>
        <trans-unit id="5bc6d146f8e86f62815cc2dd68b026969370d6d3" translate="yes" xml:space="preserve">
          <source>VersionRanges</source>
          <target state="translated">VersionRanges</target>
        </trans-unit>
        <trans-unit id="56da1ee04811fc2d2317ff22b50115a2d24ace33" translate="yes" xml:space="preserve">
          <source>VersionRanges::ReqR</source>
          <target state="translated">VersionRanges::ReqR</target>
        </trans-unit>
        <trans-unit id="978029b2303817dd1b5f4c5e7f400cef00feec11" translate="yes" xml:space="preserve">
          <source>VersionRanges::ReqR#cover?</source>
          <target state="translated">VersionRanges::ReqR#cover?</target>
        </trans-unit>
        <trans-unit id="2d2c07b062d8fbf173890b644efeac14862b2a78" translate="yes" xml:space="preserve">
          <source>VersionRanges::ReqR#empty?</source>
          <target state="translated">VersionRanges::ReqR#empty?</target>
        </trans-unit>
        <trans-unit id="8e2e4135b2128c9f96a4a77a9b5a485954a640c6" translate="yes" xml:space="preserve">
          <source>VersionRanges::ReqR#single?</source>
          <target state="translated">VersionRanges::ReqR#single?</target>
        </trans-unit>
        <trans-unit id="9c03b3b15ec5736f348be92e55692691250926bd" translate="yes" xml:space="preserve">
          <source>VersionRanges::ReqR#to_s</source>
          <target state="translated">VersionRanges::ReqR#to_s</target>
        </trans-unit>
        <trans-unit id="415b314f4808c548ef7b58a3b9876419f74530ea" translate="yes" xml:space="preserve">
          <source>VersionRanges::empty?</source>
          <target state="translated">VersionRanges::empty?</target>
        </trans-unit>
        <trans-unit id="73f7759749f86937d24f39c112cdb3f65e93b17f" translate="yes" xml:space="preserve">
          <source>VersionRanges::for</source>
          <target state="translated">VersionRanges::for</target>
        </trans-unit>
        <trans-unit id="6f07cfd94976355138981939c8456369bc7c71f2" translate="yes" xml:space="preserve">
          <source>VersionRanges::for_many</source>
          <target state="translated">VersionRanges::for_many</target>
        </trans-unit>
        <trans-unit id="7d2ac0e824a34e3be4f1777a941b2ac5639ff755" translate="yes" xml:space="preserve">
          <source>VirtualProtocolError</source>
          <target state="translated">VirtualProtocolError</target>
        </trans-unit>
        <trans-unit id="858beb40f1a3ffaaffc7552d9ccac07e89bc9bfa" translate="yes" xml:space="preserve">
          <source>VirtualProtocolError#message</source>
          <target state="translated">VirtualProtocolError#message</target>
        </trans-unit>
        <trans-unit id="7d9ff4f0de398581c4640bcbb6e536c355a391be" translate="yes" xml:space="preserve">
          <source>Visibility</source>
          <target state="translated">Visibility</target>
        </trans-unit>
        <trans-unit id="29f482119d24e11bf27b7c22e7e92442c45ef9e1" translate="yes" xml:space="preserve">
          <source>WAN HDLC device</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fd77bf7ec4d57b9b86df65dd0ef8e987ec572d" translate="yes" xml:space="preserve">
          <source>WARN</source>
          <target state="translated">WARN</target>
        </trans-unit>
        <trans-unit id="82b5dac2699b8921898c5de93cd9cab5ab122b06" translate="yes" xml:space="preserve">
          <source>WARNING: Only the owner of the removing directory tree, or Unix super user (root) should invoke this method. Otherwise this method does not work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0975a9a939628bcf8e0de51fe847f0bce2e2aa6c" translate="yes" xml:space="preserve">
          <source>WARNING: This method causes local vulnerability if one of parent directories or removing directory tree are world writable (including /tmp, whose permission is 1777), and the current process has strong privilege such as Unix super user (root), and the system has symbolic link. For secure removing, read the documentation of &lt;a href=&quot;fileutils#method-i-remove_entry_secure&quot;&gt;&lt;code&gt;remove_entry_secure&lt;/code&gt;&lt;/a&gt; carefully, and set :secure option to true. Default is :secure=&amp;gt;false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f69679bfb445bdc9d2d064d7e36b50b13f594d" translate="yes" xml:space="preserve">
          <source>WARNING: This method causes local vulnerability. Read the documentation of &lt;a href=&quot;fileutils#method-i-rm_r&quot;&gt;&lt;code&gt;rm_r&lt;/code&gt;&lt;/a&gt; first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9726b501d80488211fab4c07f46a98909aaec69" translate="yes" xml:space="preserve">
          <source>WARNING: This method causes serious security holes. Use this method for only debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9eeb908a842f39539c116648a7806b5893a918f" translate="yes" xml:space="preserve">
          <source>WARNING: You must ensure that &lt;strong&gt;ALL&lt;/strong&gt; parent directories cannot be moved by other untrusted users. For example, parent directories should not be owned by untrusted users, and should not be world writable except when the sticky bit set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d23f3b3af90554dade75ca1449213a1776239f" translate="yes" xml:space="preserve">
          <source>WHITE</source>
          <target state="translated">WHITE</target>
        </trans-unit>
        <trans-unit id="2e31950e28a56c4fe6e7025b187b2fd4fefe4871" translate="yes" xml:space="preserve">
          <source>WINDOWS</source>
          <target state="translated">WINDOWS</target>
        </trans-unit>
        <trans-unit id="24c16f3291fd5a896a52fda5bcd7de9db4347df5" translate="yes" xml:space="preserve">
          <source>WNOHANG</source>
          <target state="translated">WNOHANG</target>
        </trans-unit>
        <trans-unit id="61c32168a2860bb691a0fd1af562140ca08a04fe" translate="yes" xml:space="preserve">
          <source>WORST_MATCH</source>
          <target state="translated">WORST_MATCH</target>
        </trans-unit>
        <trans-unit id="d5ee898976a4b158c211e068b0b48d4907ce67ce" translate="yes" xml:space="preserve">
          <source>WRCREAT</source>
          <target state="translated">WRCREAT</target>
        </trans-unit>
        <trans-unit id="f818188f163068df7506a01599b61d606ec9d09d" translate="yes" xml:space="preserve">
          <source>WRITER</source>
          <target state="translated">WRITER</target>
        </trans-unit>
        <trans-unit id="3f052ade03d80c48f48948a89d799982d003d881" translate="yes" xml:space="preserve">
          <source>WRONLY</source>
          <target state="translated">WRONLY</target>
        </trans-unit>
        <trans-unit id="ce511385a7cfd7990090d6554a659593c97dd99c" translate="yes" xml:space="preserve">
          <source>WR_ACCESS</source>
          <target state="translated">WR_ACCESS</target>
        </trans-unit>
        <trans-unit id="030716508efb8b454e7fc70f999cc9c2690237e9" translate="yes" xml:space="preserve">
          <source>WUNTRACED</source>
          <target state="translated">WUNTRACED</target>
        </trans-unit>
        <trans-unit id="198e2b64779d369e0e17ed982a45c5659d1a8b6e" translate="yes" xml:space="preserve">
          <source>Wait for full request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06421c1c9fb9891e13b5a5856e48b05f7cbf97c" translate="yes" xml:space="preserve">
          <source>Wait for full request or error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="642b72578cb7a0d7b3a1d1d608db8ff8804b59eb" translate="yes" xml:space="preserve">
          <source>WaitReadable</source>
          <target state="translated">WaitReadable</target>
        </trans-unit>
        <trans-unit id="016aeb17ea62c9aabd7ec8f5381d2027eababcfa" translate="yes" xml:space="preserve">
          <source>WaitWritable</source>
          <target state="translated">WaitWritable</target>
        </trans-unit>
        <trans-unit id="66edf6a3a274e8f1ac57fd7bc2b2578a033ba6be" translate="yes" xml:space="preserve">
          <source>Waits for &lt;code&gt;thr&lt;/code&gt; to complete, using &lt;a href=&quot;thread#method-i-join&quot;&gt;&lt;code&gt;join&lt;/code&gt;&lt;/a&gt;, and returns its value or raises the exception which terminated the thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60df60d7614d3f4d84cc27a7bab6e5f377429968" translate="yes" xml:space="preserve">
          <source>Waits for a SSL/TLS client to initiate a handshake. The handshake may be started after unencrypted data has been sent over the socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4d3bfde010752e43c3175cc83df1c901430898" translate="yes" xml:space="preserve">
          <source>Waits for a child process to exit (see &lt;a href=&quot;process#method-c-waitpid&quot;&gt;&lt;code&gt;Process::waitpid&lt;/code&gt;&lt;/a&gt; for exact semantics) and returns an array containing the process id and the exit status (a &lt;code&gt;Process::Status&lt;/code&gt; object) of that child. Raises a &lt;a href=&quot;systemcallerror&quot;&gt;&lt;code&gt;SystemCallError&lt;/code&gt;&lt;/a&gt; if there are no child processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e6dec91c3e8b38837365fe9ba266c58c554a970" translate="yes" xml:space="preserve">
          <source>Waits for a child process to exit, returns its process id, and sets &lt;code&gt;$?&lt;/code&gt; to a &lt;code&gt;Process::Status&lt;/code&gt; object containing information on that process. Which child it waits on depends on the value of &lt;em&gt;pid&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bad5c4e92267c934446684c39c0659a53e7c38" translate="yes" xml:space="preserve">
          <source>Waits for all children, returning an array of &lt;em&gt;pid&lt;/em&gt;/&lt;em&gt;status&lt;/em&gt; pairs (where &lt;em&gt;status&lt;/em&gt; is a &lt;code&gt;Process::Status&lt;/code&gt; object).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24e53bb449418184f11ea4a3d50857ebd09398d" translate="yes" xml:space="preserve">
          <source>Waits for any child process (the default if no &lt;em&gt;pid&lt;/em&gt; is given).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cd5cf0ce6bd232ae715ba695f1e8852c69f587b" translate="yes" xml:space="preserve">
          <source>Waits for any child whose process group ID equals that of the calling process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c3ba927489868409d6ec197dc1072124793933b" translate="yes" xml:space="preserve">
          <source>Waits for any child whose process group ID equals the absolute value of &lt;em&gt;pid&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f24672f8480e44ebe6383b81bd5bb656b2b8759" translate="yes" xml:space="preserve">
          <source>Waits for specified threads to terminate, and returns when one of the threads terminated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90248c6dcd173044a3fe1ebdc3b610c8f6aa5f52" translate="yes" xml:space="preserve">
          <source>Waits for the child whose process ID equals &lt;em&gt;pid&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b7a8b058d9b83b5b02213ace1909ed557697b3a" translate="yes" xml:space="preserve">
          <source>Waits until &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; is readable or writable without blocking and returns &lt;code&gt;self&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; when times out. Returns &lt;code&gt;true&lt;/code&gt; immediately when buffered data is available. Optional parameter &lt;code&gt;mode&lt;/code&gt; is one of &lt;code&gt;:read&lt;/code&gt;, &lt;code&gt;:write&lt;/code&gt;, or &lt;code&gt;:read_write&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f224fcb84483a1ea75e637d5d8557ef329ea6a" translate="yes" xml:space="preserve">
          <source>Waits until &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; is readable without blocking and returns &lt;code&gt;self&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt; when times out. Returns &lt;code&gt;true&lt;/code&gt; immediately when buffered data is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bba6a4cb3e77d2edfc7319cffc5ccf9d0040cdc" translate="yes" xml:space="preserve">
          <source>Waits until &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; is writable without blocking and returns &lt;code&gt;self&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; when times out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34f136008759031c61a547b59b47408f8563b29" translate="yes" xml:space="preserve">
          <source>Waits until all of the specified threads are terminated. If a block is supplied for the method, it is executed for each thread termination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6b10ea6b75c733adb2733fbb8e93711e321f42" translate="yes" xml:space="preserve">
          <source>Waits until all specified threads have terminated. If a block is provided, it is executed for each thread as they terminate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b96fd22a62ae7459bd0cfbebdb61fcb7f2cd514d" translate="yes" xml:space="preserve">
          <source>Waits until any of the specified threads has terminated, and returns the one that does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69acc679242172da39f30227dd605f869cc3668c" translate="yes" xml:space="preserve">
          <source>Waits up to the continue timeout for a response from the server provided we're speaking HTTP 1.1 and are expecting a 100-continue response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ebcf7a244b00a98a0c5296ab1733d977457b0f" translate="yes" xml:space="preserve">
          <source>Wakes up &lt;code&gt;thr&lt;/code&gt;, making it eligible for scheduling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f93ccf59093deb7a1816227b17426ee45ce75de" translate="yes" xml:space="preserve">
          <source>Wakes up all threads waiting for this lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec72dd2ba8bf13e9e78c560b8695bc80f28fa1bf" translate="yes" xml:space="preserve">
          <source>Wakes up the first thread in line waiting for this lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dea0e018b1a7458e5f40f5405750abe41a6a613" translate="yes" xml:space="preserve">
          <source>Wakou Aoyama</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="0c36fb37d4b1dd6a8670f99a301a979acad7f041" translate="yes" xml:space="preserve">
          <source>Warning#warn</source>
          <target state="translated">Warning#warn</target>
        </trans-unit>
        <trans-unit id="cd68816a61cf208e243c3f18d7b157cf467229b4" translate="yes" xml:space="preserve">
          <source>Warranty disclaimer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2741598cc8a266e72d3d838a4de9cbb29beb05e7" translate="yes" xml:space="preserve">
          <source>Was it daylight savings at the time?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fe6eeb33248b03f181619b5cfac6d6f921bf6db" translate="yes" xml:space="preserve">
          <source>Was that a monday?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c32313ee9a82deb46372c60f6c7f586ffc0f8e" translate="yes" xml:space="preserve">
          <source>We can also add our own coercions, which we will cover soon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2df50e447afda4a47aeb17532b10693d085b70" translate="yes" xml:space="preserve">
          <source>We can change the date used to infer our missing elements by passing a second object that responds to &lt;a href=&quot;time#method-i-mon&quot;&gt;&lt;code&gt;mon&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;time#method-i-day&quot;&gt;&lt;code&gt;day&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;time#method-i-year&quot;&gt;&lt;code&gt;year&lt;/code&gt;&lt;/a&gt;, such as &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt;. We can also use our own object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d187e7e7d64217201ded955787c85f5809876735" translate="yes" xml:space="preserve">
          <source>We can use &lt;a href=&quot;tracepoint&quot;&gt;&lt;code&gt;TracePoint&lt;/code&gt;&lt;/a&gt; to gather information specifically for exceptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f424937365bb1e2069244bf6e25eb65ed0a7a750" translate="yes" xml:space="preserve">
          <source>We can use the lookup method like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43055766bb42e951c80cb47cf3155a98afd50c44" translate="yes" xml:space="preserve">
          <source>We compare &lt;a href=&quot;unwinddetails&quot;&gt;&lt;code&gt;UnwindDetails&lt;/code&gt;&lt;/a&gt; when choosing which state to unwind to. If two options have the same state_index we prefer the one most removed from a requirement that caused the conflict. Both options would unwind to the same state, but a `grandparent` option will filter out fewer of its possibilities after doing so - where a state is both a `parent` and a `grandparent` to requirements that have caused a conflict this is the correct behaviour. @param [UnwindDetail] other UnwindDetail to be compared @return [Integer] integer specifying ordering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1e9524940c215bd834f88e060049340d895b6b8" translate="yes" xml:space="preserve">
          <source>We want to rely on what has come before obviously, but with delegation we can take just the methods we need and even rename them as appropriate. In many cases this is preferable to inheritance, which gives us the entire old interface, even if much of it isn't needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0092a8c065826358c2a0bef8648a93e73595088d" translate="yes" xml:space="preserve">
          <source>We're doing this because we might write tests that deal with other versions of bundler and we are unsure how to handle this better.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="307357fe6fc4f9470827602f901c41c3dce308b7" translate="yes" xml:space="preserve">
          <source>Weak Reference class that allows a referenced object to be garbage-collected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6279a80821249cab2332a0d932a3e191da10ddc9" translate="yes" xml:space="preserve">
          <source>WeakMap</source>
          <target state="translated">WeakMap</target>
        </trans-unit>
        <trans-unit id="be8acbc92b680b6da2d7136a25ff53acfd7c455f" translate="yes" xml:space="preserve">
          <source>WeakMap#[]</source>
          <target state="translated">WeakMap#[]</target>
        </trans-unit>
        <trans-unit id="a473dc6652b47ef57f7f966435e2e72713a719bd" translate="yes" xml:space="preserve">
          <source>WeakMap#[]=</source>
          <target state="translated">WeakMap#[]=</target>
        </trans-unit>
        <trans-unit id="a49ec507dc42979e8591d449408f0e46dc0831b9" translate="yes" xml:space="preserve">
          <source>WeakMap#each</source>
          <target state="translated">WeakMap#each</target>
        </trans-unit>
        <trans-unit id="9a6a31ededc440bf9494a14b297d9920ea6864aa" translate="yes" xml:space="preserve">
          <source>WeakMap#each_key</source>
          <target state="translated">WeakMap#each_key</target>
        </trans-unit>
        <trans-unit id="7f560f1739097fb1531357f1eca7d1441e5a9764" translate="yes" xml:space="preserve">
          <source>WeakMap#each_pair</source>
          <target state="translated">WeakMap#each_pair</target>
        </trans-unit>
        <trans-unit id="9dbcb02f9b9ffb0e0d8572ead5ca703c97ad0f31" translate="yes" xml:space="preserve">
          <source>WeakMap#each_value</source>
          <target state="translated">WeakMap#each_value</target>
        </trans-unit>
        <trans-unit id="5087ef7eb39fa26e84585a790b4172f73a3abadb" translate="yes" xml:space="preserve">
          <source>WeakMap#include?</source>
          <target state="translated">WeakMap#include?</target>
        </trans-unit>
        <trans-unit id="a5fc2bd0370eaf3a1edf0246790b377eb7c091c2" translate="yes" xml:space="preserve">
          <source>WeakMap#inspect</source>
          <target state="translated">WeakMap#inspect</target>
        </trans-unit>
        <trans-unit id="066e736c836798a2d57c98d197c2fb6ab8baea01" translate="yes" xml:space="preserve">
          <source>WeakMap#key?</source>
          <target state="translated">WeakMap#key?</target>
        </trans-unit>
        <trans-unit id="db3e2166b5741211e2b290500d000fb68c5e1adb" translate="yes" xml:space="preserve">
          <source>WeakMap#keys</source>
          <target state="translated">WeakMap#keys</target>
        </trans-unit>
        <trans-unit id="bb618813cffc056e02377fb82acf5ae1a053c61f" translate="yes" xml:space="preserve">
          <source>WeakMap#length</source>
          <target state="translated">WeakMap#length</target>
        </trans-unit>
        <trans-unit id="ef68b5e2b368d8d6a627d88c61f37d32fb43fbe8" translate="yes" xml:space="preserve">
          <source>WeakMap#member?</source>
          <target state="translated">WeakMap#member?</target>
        </trans-unit>
        <trans-unit id="52acc1919e8c6e7c0a7945ed35c39a49b8d18e30" translate="yes" xml:space="preserve">
          <source>WeakMap#size</source>
          <target state="translated">WeakMap#size</target>
        </trans-unit>
        <trans-unit id="4bfcd9624267596db21e9fe91043eeb7bf5256dc" translate="yes" xml:space="preserve">
          <source>WeakMap#values</source>
          <target state="translated">WeakMap#values</target>
        </trans-unit>
        <trans-unit id="a1335ba4027315f62ada8c5f58c30da36f666133" translate="yes" xml:space="preserve">
          <source>WeakRef</source>
          <target state="translated">WeakRef</target>
        </trans-unit>
        <trans-unit id="a061fdab4e502935fffb5fe3694b002eee69b6d1" translate="yes" xml:space="preserve">
          <source>WeakRef::RefError</source>
          <target state="translated">WeakRef::RefError</target>
        </trans-unit>
        <trans-unit id="48256c649a31bdd607f2472c746e41d9a1652538" translate="yes" xml:space="preserve">
          <source>WeakRef::new</source>
          <target state="translated">WeakRef::new</target>
        </trans-unit>
        <trans-unit id="6c02b001659cdaee3a2dd1ffdad515ff764a5002" translate="yes" xml:space="preserve">
          <source>Week &lt;a href=&quot;date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66baaced035d6c6fd6e9abd9762ef4d3dbecdfc" translate="yes" xml:space="preserve">
          <source>Week number of the current year, starting with the first Monday as the first day of the first week (00..53)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7739cfb02868d0d39cc07dfd95dc454e5ef9853" translate="yes" xml:space="preserve">
          <source>Week number of the current year, starting with the first Sunday as the first day of the first week (00..53)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62af0f8663b3a68700a18983501a04225d056ab2" translate="yes" xml:space="preserve">
          <source>Week number of year according to ISO 8601 (01..53)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61677833b982cb9ba53dcd3e8a68a379fa9087a1" translate="yes" xml:space="preserve">
          <source>Well Known Service resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a407e221a0f26f1326f239a1b9cecf8e0556ba1" translate="yes" xml:space="preserve">
          <source>What &lt;a href=&quot;pp&quot;&gt;&lt;code&gt;PP&lt;/code&gt;&lt;/a&gt; Does</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf6cca3818dcca302a3d20acb3e1f2093d1f0da" translate="yes" xml:space="preserve">
          <source>What is This Library NOT?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="384cc1359a52366c756fe044067b4d02df0ffb2a" translate="yes" xml:space="preserve">
          <source>What is This Library?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454ac7e74469e1170919352faef8d864eedc305a" translate="yes" xml:space="preserve">
          <source>What year was that again?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b35b28798636eaaa2a39826774810ca656602df3" translate="yes" xml:space="preserve">
          <source>What's a socket?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2ec83e29a8458cb603037052c83cc23e88c3e8" translate="yes" xml:space="preserve">
          <source>What's the day a year later?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166c1e42a85cc1c3f053c9eb35df79f6027dfafe" translate="yes" xml:space="preserve">
          <source>When 'mutex_m' is required, any object that extends or includes &lt;a href=&quot;mutex_m&quot;&gt;&lt;code&gt;Mutex_m&lt;/code&gt;&lt;/a&gt; will be treated like a &lt;a href=&quot;mutex&quot;&gt;&lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7ea61973a67574c86c60f8a46d6c6dc8c50ecf" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../objectspace#method-c-reachable_objects_from&quot;&gt;&lt;code&gt;ObjectSpace::reachable_objects_from&lt;/code&gt;&lt;/a&gt; returns an object with references to an internal object, an instance of this class is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c44f944ee53fab34e43de6f645456a51a3a59b" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; is given, it is treated as proxy &lt;a href=&quot;../uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="335296d79e0a15cf7349cb68cf7404a8229b1daf" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;gzipfile#method-i-close&quot;&gt;&lt;code&gt;Zlib::GzipFile#close&lt;/code&gt;&lt;/a&gt; method is called after the object reaches the end of file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2feba24dd69bb34580efd1240bdec6a192c5d20f" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;gzipreader#method-i-unused&quot;&gt;&lt;code&gt;Zlib::GzipReader#unused&lt;/code&gt;&lt;/a&gt; method is called after the object reaches the end of file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293e4cdad5c21f47d30748a7fe926620e4a9b37e" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;io#method-i-read_nonblock&quot;&gt;&lt;code&gt;read_nonblock&lt;/code&gt;&lt;/a&gt; raises an exception kind of &lt;a href=&quot;io/waitreadable&quot;&gt;&lt;code&gt;IO::WaitReadable&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#method-i-read_nonblock&quot;&gt;&lt;code&gt;read_nonblock&lt;/code&gt;&lt;/a&gt; should not be called until io is readable for avoiding busy loop. This can be done as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936b4b1a42963cb1e488f66708fc7606e4b830b9" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;io#method-i-write_nonblock&quot;&gt;&lt;code&gt;write_nonblock&lt;/code&gt;&lt;/a&gt; raises an exception kind of &lt;a href=&quot;io/waitwritable&quot;&gt;&lt;code&gt;IO::WaitWritable&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#method-i-write_nonblock&quot;&gt;&lt;code&gt;write_nonblock&lt;/code&gt;&lt;/a&gt; should not be called until io is writable for avoiding busy loop. This can be done as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff4e4420e65af2ff33b3542e2bc21084c47d206d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;Name.new&lt;/code&gt; is called to create a new object, the &lt;code&gt;new&lt;/code&gt; method in &lt;code&gt;Class&lt;/code&gt; is run by default. This can be demonstrated by overriding &lt;code&gt;new&lt;/code&gt; in &lt;code&gt;Class&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a8573ddceededf3930a1e7c8c3dda99bd0bba9e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;ext_enc&lt;/code&gt; and &lt;code&gt;int_enc&lt;/code&gt; are specified read strings will be converted from &lt;code&gt;ext_enc&lt;/code&gt; to &lt;code&gt;int_enc&lt;/code&gt; upon input, and written strings will be converted from &lt;code&gt;int_enc&lt;/code&gt; to &lt;code&gt;ext_enc&lt;/code&gt; upon output. See &lt;a href=&quot;encoding&quot;&gt;&lt;code&gt;Encoding&lt;/code&gt;&lt;/a&gt; for further details of transcoding on input and output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc5d1be3d4122d48eddc91ce5577f26fd59453e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;ext_enc&lt;/code&gt; is specified, strings read will be tagged by the encoding when reading, and strings output will be converted to the specified encoding when writing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0bbbad2c78f209b301daa2899a3b4e8dc905651" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;false&lt;/code&gt; is given as an argument, &lt;code&gt;self&lt;/code&gt; is yielded in blocking mode. The original mode is restored after the block is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f144c74295820cbdd7202858a9ba9fea6ac476d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;false&lt;/code&gt;, header rows are silently swallowed. If set to &lt;code&gt;true&lt;/code&gt;, header rows are returned in a &lt;a href=&quot;csv/row&quot;&gt;&lt;code&gt;CSV::Row&lt;/code&gt;&lt;/a&gt; object with identical headers and fields (save that the fields do not go through the converters).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99e9c91022a8321b9cd131b2335b6a0b95a4c644" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;instance_eval&lt;/code&gt; is given a &lt;code&gt;String&lt;/code&gt;, the optional second and third parameters supply a filename and starting line number that are used when reporting compilation errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adf26f365b6a4376f8e8a81973dde8e61da6defb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;instance_eval&lt;/code&gt; is given a block, &lt;em&gt;obj&lt;/em&gt; is also passed in as the block's only argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f69613073b613acd934570122ea3cd6e71eebb1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;max.abs&lt;/code&gt; is greater than or equal to 1, &lt;code&gt;rand&lt;/code&gt; returns a pseudo-random integer greater than or equal to 0 and less than &lt;code&gt;max.to_i.abs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1452d47939c14220acfb3c89c5c89cd34ce70c4a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;max&lt;/code&gt; is a &lt;a href=&quot;float&quot;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;rand&lt;/code&gt; returns a random floating point number between 0.0 and &lt;code&gt;max&lt;/code&gt;, including 0.0 and excluding &lt;code&gt;max&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71744a0660fd6b68b1f58416459c581a2fdcd4bf" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;max&lt;/code&gt; is a &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;rand&lt;/code&gt; returns a random number where range.member?(number) == true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2af3705287fb57912b290f559977bfecb6113cd6" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;max&lt;/code&gt; is an &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;rand&lt;/code&gt; returns a random integer greater than or equal to zero and less than &lt;code&gt;max&lt;/code&gt;. Unlike &lt;a href=&quot;kernel#method-i-rand&quot;&gt;&lt;code&gt;Kernel.rand&lt;/code&gt;&lt;/a&gt;, when &lt;code&gt;max&lt;/code&gt; is a negative integer or zero, &lt;code&gt;rand&lt;/code&gt; raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f224c5a732d9d8e930ad330c6d492df8e2726841" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;mode&lt;/code&gt; is a string it must be in one of the following forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbe4894f92d683d02fd0f490752a3ac0ebaf1af0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;mode&lt;/code&gt; is an integer it must be combination of the modes defined in &lt;a href=&quot;file/file/constants&quot;&gt;&lt;code&gt;File::Constants&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;File::RDONLY&lt;/code&gt;, &lt;code&gt;File::WRONLY|File::CREAT&lt;/code&gt;). See the open(2) man page for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ae686b80e472b0d9f75ade965c8a874ebe9fd5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;super&lt;/code&gt; is invoked method lookup checks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7387ed73b989fe6c6a93cd8c48d987c267ab4a48" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;tag&lt;/code&gt; is passed as the first argument, &lt;code&gt;catch&lt;/code&gt; yields it as the parameter of the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d72839cbb9cfdd8ec1f76e66c354a25e5029fc" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;:headers&lt;/code&gt; is set, a header row will be added to the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="099ec2d29b80ede99deeaf283cde66b23ad1e01b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, all traffic to and from the server is written to +$stdout+. Default: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e4979926f2b7357c843a36e4b64e93961d3c436" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, connections are in passive mode per default. Default: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20918ddbae2d60300d4e2e4112b256a4e479ba6c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, the connection is in passive mode. Default: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48cef40450d86d97baac1fc8d9ea0e75eb0e983" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, transfers are performed in binary mode. Default: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b33cc1b62d1280c62772efd1f5f1348af14e87" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;src_offset&lt;/em&gt; is specified and &lt;em&gt;src&lt;/em&gt; is an &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;io#method-c-copy_stream&quot;&gt;&lt;code&gt;IO.copy_stream&lt;/code&gt;&lt;/a&gt; doesn't move the current file offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="311172c275d7ffbb02adfb314104b7421891f0fc" translate="yes" xml:space="preserve">
          <source>When Ruby encounters the &lt;code&gt;def&lt;/code&gt; keyword, it doesn't consider it an error if the method already exists: it simply redefines it. This is called &lt;em&gt;overriding&lt;/em&gt;. Rather like extending core classes, this is a potentially dangerous ability, and should be used sparingly because it can cause unexpected results. For example, consider this irb session:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6144fb63774135a5db97291ccd18fc5eacb63606" translate="yes" xml:space="preserve">
          <source>When RubyGems is required, &lt;a href=&quot;kernel#method-i-require&quot;&gt;&lt;code&gt;Kernel#require&lt;/code&gt;&lt;/a&gt; is replaced with our own which is capable of loading gems on demand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff3b6d399cb50abf52c319b6cabd21294338bf53" translate="yes" xml:space="preserve">
          <source>When a &amp;ldquo;symbol&amp;rdquo; is referenced below it may be either a real symbol or a symbol link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3353987906b1f8f3fc7507a59b520efcc5435978" translate="yes" xml:space="preserve">
          <source>When a &lt;a href=&quot;tempfile&quot;&gt;&lt;code&gt;Tempfile&lt;/code&gt;&lt;/a&gt; object is garbage collected, or when the Ruby interpreter exits, its associated temporary file is automatically deleted. This means that's it's unnecessary to explicitly delete a &lt;a href=&quot;tempfile&quot;&gt;&lt;code&gt;Tempfile&lt;/code&gt;&lt;/a&gt; after use, though it's good practice to do so: not explicitly deleting unused Tempfiles can potentially leave behind large amounts of tempfiles on the filesystem until they're garbage collected. The existence of these temp files can make it harder to determine a new &lt;a href=&quot;tempfile&quot;&gt;&lt;code&gt;Tempfile&lt;/code&gt;&lt;/a&gt; filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869396fadbb067a7d2a0bd652a24e4a00cfdc8f7" translate="yes" xml:space="preserve">
          <source>When a class method references a constant, it uses the same rules as referencing it outside the method as the scope is the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a27181e9f42a0fb837a188bd51ae64e7d47460d" translate="yes" xml:space="preserve">
          <source>When a computation results in an undefined value, the special value &lt;code&gt;NaN&lt;/code&gt; (for 'not a number') is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aace1b7e56d66f554d545aa5c0333dd41575fa8a" translate="yes" xml:space="preserve">
          <source>When a fiber is created it will not run automatically. Rather it must be explicitly asked to run using the &lt;code&gt;Fiber#resume&lt;/code&gt; method. The code running inside the fiber can give up control by calling &lt;code&gt;Fiber.yield&lt;/code&gt; in which case it yields control back to caller (the caller of the &lt;code&gt;Fiber#resume&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f6baa02f803892099e2c9d85b73b8ee539390f" translate="yes" xml:space="preserve">
          <source>When a module X is included into a module Y, Y inherits refinements from X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295d585196c9717d56727fd15aa9902368edc3ed" translate="yes" xml:space="preserve">
          <source>When a new class is created, an object of type &lt;a href=&quot;class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt; is initialized and assigned to a global constant (&lt;code&gt;Name&lt;/code&gt; in this case).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b509f2841aec07e68dba2c89cf24a3125148afbb" translate="yes" xml:space="preserve">
          <source>When a string is to be stored, a frozen copy of the string is stored instead unless the original string is already frozen.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="379a01b51e41022d92ff9144ea0b7b3e5460ff77" translate="yes" xml:space="preserve">
          <source>When an exception has been raised but not yet handled (in &lt;code&gt;rescue&lt;/code&gt;, &lt;code&gt;ensure&lt;/code&gt;, &lt;code&gt;at_exit&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; blocks) the global variable &lt;code&gt;$!&lt;/code&gt; will contain the current exception and &lt;code&gt;$@&lt;/code&gt; contains the current exception's backtrace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4763b0037dd961ede8cfe4faa3abefff1d49b7c3" translate="yes" xml:space="preserve">
          <source>When an reading request is received beyond the end of file (the end of compressed data). That is, when &lt;a href=&quot;gzipreader#method-i-read&quot;&gt;&lt;code&gt;Zlib::GzipReader#read&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;gzipreader#method-i-gets&quot;&gt;&lt;code&gt;Zlib::GzipReader#gets&lt;/code&gt;&lt;/a&gt;, or some other methods for reading returns nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78f2fb2c9e9ba78df097bf1cec5055f1b3c8f1b7" translate="yes" xml:space="preserve">
          <source>When called at other times, it will always return nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f46b0c6cb9610373c666c9e9dcde8190ca37b39" translate="yes" xml:space="preserve">
          <source>When called during a completion (e.g. from within your &lt;a href=&quot;readline#method-c-completion_proc&quot;&gt;&lt;code&gt;completion_proc&lt;/code&gt;&lt;/a&gt;), it will return a string containing the character used to quote the argument being completed, or nil if the argument is unquoted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660f278f311d0db532a95c2d0d30fa6457ca7160" translate="yes" xml:space="preserve">
          <source>When called with &lt;code&gt;len&lt;/code&gt;, a string of &lt;code&gt;len&lt;/code&gt; bytes will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cb3402dfac6402611378b746c06c95e6370ee71" translate="yes" xml:space="preserve">
          <source>When called with a block, it returns the return value of the block; otherwise, it returns self.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ffbefd16befbfa9cd5133e461ad3e67150ac20d" translate="yes" xml:space="preserve">
          <source>When called with a block, passes an &lt;a href=&quot;httpresponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt; object to the block. The body of the response will not have been read yet; the block can process it using &lt;a href=&quot;httpresponse#method-i-read_body&quot;&gt;&lt;code&gt;HTTPResponse#read_body&lt;/code&gt;&lt;/a&gt;, if desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23d31de4a2ee61153a57de65f77baa6278fa1f04" translate="yes" xml:space="preserve">
          <source>When called with a block, scanf keeps scanning the input, cycling back to the beginning of the format string, and yields a new array of conversions to the block every time the format string is matched (including partial matches, but not including complete failures). The actual return value of scanf when called with a block is an array containing the results of all the executions of the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d806ca51d655d6508400d67892268a4bda3a2d" translate="yes" xml:space="preserve">
          <source>When called with a block, the block is passed an &lt;a href=&quot;httpresponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt; object. The body of that response will not have been read yet; the block can process it using &lt;a href=&quot;httpresponse#method-i-read_body&quot;&gt;&lt;code&gt;HTTPResponse#read_body&lt;/code&gt;&lt;/a&gt;, if desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bcfe6fbf2055a63403ace8b55d1fff3fd2f4d5d" translate="yes" xml:space="preserve">
          <source>When called with block, gives a &lt;a href=&quot;pop3&quot;&gt;&lt;code&gt;POP3&lt;/code&gt;&lt;/a&gt; object to the block and closes the session after block call finishes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0a41456c0f799f3f1ec8e92f0004a347767a47" translate="yes" xml:space="preserve">
          <source>When called with no arguments, this method will return the contents until the first NULL byte.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee07823c707f9a934f089539d3de92a6cf20c59" translate="yes" xml:space="preserve">
          <source>When called with no arguments, this method will return the contents with the length of this pointer's &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f36d3251fd083147fef4122d9ad636ee6fb7396" translate="yes" xml:space="preserve">
          <source>When called without a block, it waits until the input that matches the given &lt;code&gt;pattern&lt;/code&gt; is obtained from the &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; or the time specified as the timeout passes. An array is returned when the pattern is obtained from the &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt;. The first element of the array is the entire string obtained from the &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; until the pattern matches, followed by elements indicating which the pattern which matched to the anchor in the regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcedc2fa1a9c620cea06f5b3ad110ef773b2d180" translate="yes" xml:space="preserve">
          <source>When called without any argument, returns a copy of the receiver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a175d9f128249fe6be733c1574c9177baaaa2982" translate="yes" xml:space="preserve">
          <source>When called without block, the method returns &lt;code&gt;Enumerator&lt;/code&gt;, which can be used, for example, for conditional circuit-breaking:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb75fa0cbb6367740a95b683dff646d1dfb843cd" translate="yes" xml:space="preserve">
          <source>When called, the arguments must be provided in the exact order. In other words, the arguments are positional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039788f3921161b0edb4d4cbcaf56654a6899f90" translate="yes" xml:space="preserve">
          <source>When called, the user of the &lt;code&gt;add_one&lt;/code&gt; method must provide an argument. The argument is a local variable in the method body. The method will then add one to this argument and return the value. If given &lt;code&gt;1&lt;/code&gt; this method will return &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a0ac2f1d73c4fd371b9aaf9ad5d9bb0cf9a95d6" translate="yes" xml:space="preserve">
          <source>When calling a method with keyword arguments the arguments may appear in any order. If an unknown keyword argument is sent by the caller an &lt;a href=&quot;../argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a776515280d7c9cc83e344e3f4bdd2c1f44a1903" translate="yes" xml:space="preserve">
          <source>When class A invokes class B, all arguments used on A initialization are supplied to B. This allows lazy parse of options. Let's suppose you have some rspec commands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c50babc519ee23a4f62c732f44244f2264da000" translate="yes" xml:space="preserve">
          <source>When comparing passwords provided by the user with previously stored values, a common mistake made is comparing the two values using &amp;ldquo;==&amp;rdquo;. Typically, &amp;ldquo;==&amp;rdquo; short-circuits on evaluation, and is therefore vulnerable to timing attacks. The proper way is to use a method that always takes the same amount of time when comparing two values, thus not leaking any information to potential attackers. To compare two values, the following could be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66445123ee10290bfafb6d0866057f207faf792" translate="yes" xml:space="preserve">
          <source>When constructing an &lt;a href=&quot;asn1/asn1data&quot;&gt;&lt;code&gt;ASN1Data&lt;/code&gt;&lt;/a&gt; object the ASN.1 type definition may require certain elements to be either implicitly or explicitly tagged. This can be achieved by setting the &lt;em&gt;tagging&lt;/em&gt; attribute manually for sub-classes of &lt;a href=&quot;asn1/asn1data&quot;&gt;&lt;code&gt;ASN1Data&lt;/code&gt;&lt;/a&gt;. Use the symbol &lt;code&gt;:IMPLICIT&lt;/code&gt; for implicit tagging and &lt;code&gt;:EXPLICIT&lt;/code&gt; if the element requires explicit tagging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b38f3b4841bf9a90fe8468b866cf2d9f4b1828b" translate="yes" xml:space="preserve">
          <source>When control is transferred outside the scope, the refinement is deactivated. This means that if you require or load a file or call a method that is defined outside the current scope the refinement will be deactivated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb535176b73988e3de4989ae520d1622b3fe512" translate="yes" xml:space="preserve">
          <source>When creating a &lt;a href=&quot;../hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;, there is a special syntax for referencing a &lt;a href=&quot;../symbol&quot;&gt;&lt;code&gt;Symbol&lt;/code&gt;&lt;/a&gt; as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcb7f8ab3fffd9698f2dfcb7cf3ff45afc12ea72" translate="yes" xml:space="preserve">
          <source>When defining multiple refinements in the same module inside multiple &lt;code&gt;refine&lt;/code&gt; blocks, all refinements from the same module are active when a refined method (any of the &lt;code&gt;to_json&lt;/code&gt; methods from the example below) is called:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="871e530d9d026c36358382622c5f12200870d54f" translate="yes" xml:space="preserve">
          <source>When dispatching a method call based on user input, carefully verify that the method name. If possible, check it against a whitelist of safe method names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42e4fb708a4dc66bd2a429c6d68ba519314bdca" translate="yes" xml:space="preserve">
          <source>When dumping an object the instance method _dump is called with an &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt; which indicates the maximum depth of objects to dump (a value of -1 implies that you should disable depth checking). _dump must return a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; containing the information necessary to reconstitute the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a26c3774f41c9d36c742cf8992f7338a6b50ec" translate="yes" xml:space="preserve">
          <source>When dumping an object the method marshal_dump will be called. marshal_dump must return a result containing the information necessary for marshal_load to reconstitute the object. The result can be any object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccab4fe0d909cd43ea0cbc0a7149e8fd6710ab58" translate="yes" xml:space="preserve">
          <source>When encoding an ASN.1 type it is inherently clear what original type (e.g. INTEGER, OCTET STRING etc.) this value has, regardless of its tagging. But opposed to the time an ASN.1 type is to be encoded, when parsing them it is not possible to deduce the &amp;ldquo;real type&amp;rdquo; of tagged values. This is why tagged values are generally parsed into &lt;a href=&quot;asn1data&quot;&gt;&lt;code&gt;ASN1Data&lt;/code&gt;&lt;/a&gt; instances, but with a different outcome for implicit and explicit tagging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0567a99d80273cd4d39ca63be44cc57e31318fc0" translate="yes" xml:space="preserve">
          <source>When expected content length is unknown, the procedure is called with nil. This happens when the HTTP response has no Content-Length header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c0b9e670f1ec8e3c8f41b81d1b7cda463f9e72" translate="yes" xml:space="preserve">
          <source>When false or nil is given, the environment variables are ignored and connection will be made to a server directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e444e6cd67e6a00cb385097a842c91559d5d9f9a" translate="yes" xml:space="preserve">
          <source>When in doubt, consider anything not listed as safe below as being unsafe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0b8beccd9f9fa43d00ba445fa6c801caeedf79" translate="yes" xml:space="preserve">
          <source>When invoked as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8eb6070a07891238900c2963c7ad5b47a1467b6" translate="yes" xml:space="preserve">
          <source>When invoked with a block, yield all permutations of length &lt;code&gt;n&lt;/code&gt; of the elements of the array, then return the array itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fae22ddee931083d0a3495b5c8766a2b8edbf90" translate="yes" xml:space="preserve">
          <source>When invoked with a block, yield all repeated permutations of length &lt;code&gt;n&lt;/code&gt; of the elements of the array, then return the array itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d5f0e761d1b4ed2e1459d85e87b0448eb90e88" translate="yes" xml:space="preserve">
          <source>When invoked with a block, yields all combinations of length &lt;code&gt;n&lt;/code&gt; of elements from the array and then returns the array itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6126fae741382e75435ab42e60e10b1f4f4ec6" translate="yes" xml:space="preserve">
          <source>When invoked with a block, yields all repeated combinations of length &lt;code&gt;n&lt;/code&gt; of elements from the array and then returns the array itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be46f780d2663ae4528b2a174b71da9621f61f26" translate="yes" xml:space="preserve">
          <source>When it comes to thread-locals, they are accessible within the entire scope of the thread. Given the following example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa556348e1e7e4167e5989331b2bca5f5942bb4" translate="yes" xml:space="preserve">
          <source>When loading an object dumped using marshal_dump the object is first allocated then marshal_load is called with the result from marshal_dump. marshal_load must recreate the object from the information in the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3c851570c133a020293d4986b5b1b36a00db7b" translate="yes" xml:space="preserve">
          <source>When looking up a method for an instance of class &lt;code&gt;C&lt;/code&gt; Ruby checks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32089576002e735774c07c9e4717c7dd89a29a0" translate="yes" xml:space="preserve">
          <source>When mixing keyword arguments and positional arguments, all positional arguments must appear before any keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ff8cd1b71c84d8166531819326587696a29cfba" translate="yes" xml:space="preserve">
          <source>When named capture groups are used with a literal regexp on the left-hand side of an expression and the &lt;code&gt;=~&lt;/code&gt; operator, the captured text is also assigned to local variables with corresponding names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b30abad45baa2f002115d5844ff634d54d9eeb5" translate="yes" xml:space="preserve">
          <source>When neither a block nor a second argument is supplied, an &lt;code&gt;Enumerator&lt;/code&gt; is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="193c1c24c52a5b80cb4676534641cb45e2ec9c74" translate="yes" xml:space="preserve">
          <source>When no &lt;code&gt;tag&lt;/code&gt; is given, &lt;code&gt;catch&lt;/code&gt; yields a new unique object (as from &lt;code&gt;Object.new&lt;/code&gt;) as the block parameter. This object can then be used as the argument to &lt;code&gt;throw&lt;/code&gt;, and will match the correct &lt;code&gt;catch&lt;/code&gt; block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597b4d357e4f0aac9db6c7210869b7076258c360" translate="yes" xml:space="preserve">
          <source>When no data can be read without blocking it raises &lt;a href=&quot;ssl/sslerror&quot;&gt;&lt;code&gt;OpenSSL::SSL::SSLError&lt;/code&gt;&lt;/a&gt; extended by &lt;a href=&quot;../io/waitreadable&quot;&gt;&lt;code&gt;IO::WaitReadable&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../io/waitwritable&quot;&gt;&lt;code&gt;IO::WaitWritable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee46527213386eb2bace679dd6450b5ed292f101" translate="yes" xml:space="preserve">
          <source>When no data can be written without blocking it raises &lt;a href=&quot;ssl/sslerror&quot;&gt;&lt;code&gt;OpenSSL::SSL::SSLError&lt;/code&gt;&lt;/a&gt; extended by &lt;a href=&quot;../io/waitreadable&quot;&gt;&lt;code&gt;IO::WaitReadable&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../io/waitwritable&quot;&gt;&lt;code&gt;IO::WaitWritable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf24aed2036366e50bf2f33a7f6ce0da2e22908c" translate="yes" xml:space="preserve">
          <source>When no name is given, it will invoke the default command of the current class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa5b6d76d91af11ffeec3f942785ba5a7b78f71" translate="yes" xml:space="preserve">
          <source>When not evaluated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="082ff7498fa88f5b254946e4ad5ce38ad3a7f958" translate="yes" xml:space="preserve">
          <source>When overriding `eql?` please preserve the behaviour as mentioned in docstring for `==` method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1234f25b74cf4928685dbdb1dfe173a45420c6c" translate="yes" xml:space="preserve">
          <source>When overriding `hash` please preserve the behaviour as mentioned in docstring for `==` method, i.e. two methods equal by above comparison should have same hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51575f491f48c11d902a2494835a766e5c9eb98" translate="yes" xml:space="preserve">
          <source>When provided, &lt;code&gt;offset&lt;/code&gt; ensures that a header match occurs on or later than the &lt;code&gt;offset&lt;/code&gt; index. You can use this to find duplicate headers, without resorting to hard-coding exact indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99a98b2713288492295269f4ebe1cf64641d3c54" translate="yes" xml:space="preserve">
          <source>When readpartial blocks, it waits data or EOF on the stream. If some data is reached, readpartial returns with the data. If EOF is reached, readpartial raises &lt;a href=&quot;eoferror&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b7c2a2be298ebf9278e94eb0ee1edb9b2ddf11" translate="yes" xml:space="preserve">
          <source>When readpartial doesn't blocks, it returns or raises immediately. If the byte buffer is not empty, it returns the data in the buffer. Otherwise if the stream has some content, it returns the data in the stream. Otherwise if the stream is reached to EOF, it raises &lt;a href=&quot;eoferror&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3dcf0a572bcdb898978ac2d46a32c303106adb4" translate="yes" xml:space="preserve">
          <source>When recvfrom(2) returns 0, &lt;a href=&quot;basicsocket#method-i-recv_nonblock&quot;&gt;&lt;code&gt;Socket#recv_nonblock&lt;/code&gt;&lt;/a&gt; returns an empty string as data. The meaning depends on the socket: EOF on TCP, empty packet on UDP, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd3ce28d91fbccaf00adcfb739469b177a4e026" translate="yes" xml:space="preserve">
          <source>When recvfrom(2) returns 0, &lt;a href=&quot;socket#method-i-recvfrom_nonblock&quot;&gt;&lt;code&gt;Socket#recvfrom_nonblock&lt;/code&gt;&lt;/a&gt; returns an empty string as data. It means an empty packet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a332a12095d21f4a49419e4733d83e7328de0521" translate="yes" xml:space="preserve">
          <source>When recvfrom(2) returns 0, &lt;a href=&quot;socket#method-i-recvfrom_nonblock&quot;&gt;&lt;code&gt;Socket#recvfrom_nonblock&lt;/code&gt;&lt;/a&gt; returns an empty string as data. The meaning depends on the socket: EOF on TCP, empty packet on UDP, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d107bc676439cdf718c9e7d5e98065992f0b44" translate="yes" xml:space="preserve">
          <source>When referencing constants in classes inheriting from &lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; you do not need to use the full namespace. For example, referencing &lt;code&gt;File&lt;/code&gt; inside &lt;code&gt;YourClass&lt;/code&gt; will find the top-level &lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d294cbb2c35370010ee0e3178bc8cea3df7f5e05" translate="yes" xml:space="preserve">
          <source>When replacing with another hash, the initial order of our keys must come from the other hash -ordered or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2afe04af0041ae5a0dae63d746255159f466f644" translate="yes" xml:space="preserve">
          <source>When ruby parses this expression it first encounters &lt;code&gt;a&lt;/code&gt; as a method call in the &amp;ldquo;then&amp;rdquo; expression, then later it sees the assignment to &lt;code&gt;a&lt;/code&gt; in the &amp;ldquo;test&amp;rdquo; expression and marks &lt;code&gt;a&lt;/code&gt; as a local variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687962d2dcbe4935510e1a8fd61ff0356aaddd5e" translate="yes" xml:space="preserve">
          <source>When running a server, it is often desirable to disable client renegotiation entirely. You may use a callback as follows to implement this feature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73c3f1dbe76b72b395f8d40eaf113c489a2f84cd" translate="yes" xml:space="preserve">
          <source>When running this line it first executes the &amp;ldquo;test&amp;rdquo; expression, &lt;code&gt;a = 0.zero?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd9f8db78c980ef63d37f39aa370e10f6bc3672" translate="yes" xml:space="preserve">
          <source>When sending the second parameter, the same object will be used as the value for all the array elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="154f2fe15b39164ebf07094d90647cc0ffea9fa0" translate="yes" xml:space="preserve">
          <source>When session processing has been completed for a request, the session should be closed using the close() method. This will store the session's state to persistent storage. If you want to store the session's state to persistent storage without finishing session processing for this request, call the update() method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="425ed0be50678fb3423ec807abcd59a39528f074" translate="yes" xml:space="preserve">
          <source>When set an object, any values of a blank string field is replaced by the set object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5007c9745532841f18ce3ee62f080a14a35154" translate="yes" xml:space="preserve">
          <source>When set an object, any values of an empty field are replaced by the set object, not nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc121f8a09f78ecfe8119f3861ce5bddb0af6e91" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, a message is printed on $stderr if an exception kills this &lt;code&gt;thr&lt;/code&gt;. See &lt;a href=&quot;thread#method-c-report_on_exception&quot;&gt;&lt;code&gt;::report_on_exception&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e747720f5f65dbf7681eaff8ec589d6e3b24b035" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, if any thread is aborted by an exception, the raised exception will be re-raised in the main thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21f834ee3880300661d9249ac037f4869caa7f0a" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, if any thread is aborted by an exception, the raised exception will be re-raised in the main thread. Returns the new state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dea91cbd2722ba945de5b538b61458cf7ba58a9" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, if this &lt;code&gt;thr&lt;/code&gt; is aborted by an exception, the raised exception will be re-raised in the main thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b314cc019e1cd041351ad068f4f3c6e86b5b02d" translate="yes" xml:space="preserve">
          <source>When set to a &lt;code&gt;true&lt;/code&gt; value, &lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; will attempt to parse input not conformant with RFC 4180, such as double quotes in unquoted fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="659aca5a707d4f27adb694c47ba65eb17b24b351" translate="yes" xml:space="preserve">
          <source>When set to a &lt;code&gt;true&lt;/code&gt; value, &lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; will quote all &lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; fields it creates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9d12ab607613800182df3768956448d2d49119" translate="yes" xml:space="preserve">
          <source>When set to a &lt;code&gt;true&lt;/code&gt; value, &lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; will skip over any empty rows. Note that this setting will not skip rows that contain column separators, even if the rows contain no actual data. If you want to skip rows that contain separators but no content, consider using &lt;code&gt;:skip_lines&lt;/code&gt;, or inspecting fields.compact.empty? on each row.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caca45c7ad3bb85595f066c7e2d6d4198bd597c9" translate="yes" xml:space="preserve">
          <source>When set to an object responding to &lt;code&gt;match&lt;/code&gt;, every line matching it is considered a comment and ignored during parsing. When set to a &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, it is first converted to a &lt;a href=&quot;regexp&quot;&gt;&lt;code&gt;Regexp&lt;/code&gt;&lt;/a&gt;. When set to &lt;code&gt;nil&lt;/code&gt; no line is considered a comment. If the passed object does not respond to &lt;code&gt;match&lt;/code&gt;, &lt;code&gt;ArgumentError&lt;/code&gt; is thrown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a05774d0b11743708f71fe6a3193aa2d45dd181" translate="yes" xml:space="preserve">
          <source>When should you use &lt;a href=&quot;datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; and when should you use &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3022c11ecdf575f4ea5fed7c8a3f91d2ee64a31" translate="yes" xml:space="preserve">
          <source>When stress mode is enabled, the &lt;a href=&quot;gc&quot;&gt;&lt;code&gt;GC&lt;/code&gt;&lt;/a&gt; is invoked at every &lt;a href=&quot;gc&quot;&gt;&lt;code&gt;GC&lt;/code&gt;&lt;/a&gt; opportunity: all memory and object allocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1165026bd2be265f91a08f940ff329ca06cc5bb1" translate="yes" xml:space="preserve">
          <source>When subclassing the &lt;a href=&quot;thread&quot;&gt;&lt;code&gt;Thread&lt;/code&gt;&lt;/a&gt; class, the &lt;code&gt;initialize&lt;/code&gt; method of your subclass will be ignored by &lt;a href=&quot;thread#method-c-start&quot;&gt;&lt;code&gt;::start&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;thread#method-c-fork&quot;&gt;&lt;code&gt;::fork&lt;/code&gt;&lt;/a&gt;. Otherwise, be sure to call super in your &lt;code&gt;initialize&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685802247db6080f5d262803388e82921699e0ab" translate="yes" xml:space="preserve">
          <source>When such a change is attempted the error is raised in different locations according to the platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ed08988e23ce19b2524e6c4330a526b71f1cc7a" translate="yes" xml:space="preserve">
          <source>When the given severity is not high enough (for this particular logger), log no message, and return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a970a9c20c350de0e261c1c044abe556ba9ffc67" translate="yes" xml:space="preserve">
          <source>When the input &lt;code&gt;str&lt;/code&gt; is empty an empty &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; is returned as the string is considered to have no fields to split.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49035dacde72437679cf65e1efc17fe4c26f1096" translate="yes" xml:space="preserve">
          <source>When the instance is garbage collected, the C function &lt;code&gt;func&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a790a6a3f0631713d610d9dda46d77e83c86b9" translate="yes" xml:space="preserve">
          <source>When the method defines default arguments you do not need to supply all the arguments to the method. Ruby will fill in the missing arguments in-order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da95be4877e5242287757fd4a6747a66167b11c5" translate="yes" xml:space="preserve">
          <source>When the method name parameter is given as a string, the string is converted to a symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267fc12a5f8b3f45c10225998754fbc36d0eae9a" translate="yes" xml:space="preserve">
          <source>When the open mode of original &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; is read only, the mode cannot be changed to be writable. Similarly, the open mode cannot be changed from write only to readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8a2177277e00486427aa34fef23cf7d72f9de9" translate="yes" xml:space="preserve">
          <source>When the optional &lt;code&gt;chomp&lt;/code&gt; keyword argument has a true value, &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\r&lt;/code&gt;, and &lt;code&gt;\r\n&lt;/code&gt; will be removed from the end of each line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e15915dc2caa0e1fff2f8b3691769e5aa32d3a" translate="yes" xml:space="preserve">
          <source>When the optional &lt;code&gt;symbolize_names&lt;/code&gt; keyword argument is set to a true value, returns symbols for keys in &lt;a href=&quot;hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; objects (default: strings).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f07b4842d6b28ba39c076f7c3b0b5b130455ff5a" translate="yes" xml:space="preserve">
          <source>When the precision is negative, the returned value is an integer with at least &lt;code&gt;ndigits.abs&lt;/code&gt; trailing zeros.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a39f049506816ce584ac64c6ea924d90713d72d" translate="yes" xml:space="preserve">
          <source>When the same day does not exist for the corresponding month, the last day of the month is used instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab13de78c98e74d5376e0d764ae19f380e6bdfb" translate="yes" xml:space="preserve">
          <source>When the status is V_CERTSTATUS_REVOKED, the time at which the certificate was revoked can be retrieved by &lt;a href=&quot;singleresponse#method-i-revocation_time&quot;&gt;&lt;code&gt;revocation_time&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5858dc5555150f39d338769ce025ef260de792d" translate="yes" xml:space="preserve">
          <source>When the subprocess is Ruby (opened via &lt;code&gt;&quot;|-&quot;&lt;/code&gt;), the &lt;code&gt;open&lt;/code&gt; call returns &lt;code&gt;nil&lt;/code&gt;. If a block is associated with the open call, that block will run twice &amp;mdash; once in the parent and once in the child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83d25b2c9c6e86d84880c1e859a1d803cd355e84" translate="yes" xml:space="preserve">
          <source>When the thread is next woken up, it will attempt to reacquire the lock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301b75aa8a3a301bb845826a50552156cb45c7fd" translate="yes" xml:space="preserve">
          <source>When this is called, the source should try to fetch the specs and install from remote path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b735d3be5d495e45bb14a34d7b727cf7bd6cbd4e" translate="yes" xml:space="preserve">
          <source>When this is called, the source should try to fetch the specs and install from the path provided by `app_cache_path`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7df911a39ec9ba1d84d631cc1db2d3af874b2f4" translate="yes" xml:space="preserve">
          <source>When this method is called at end of file, it returns &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;&quot;&quot;&lt;/code&gt;, depending on &lt;em&gt;length&lt;/em&gt;: &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;read(nil)&lt;/code&gt;, and &lt;code&gt;read(0)&lt;/code&gt; return &lt;code&gt;&quot;&quot;&lt;/code&gt;, &lt;code&gt;read(&lt;em&gt;positive_integer&lt;/em&gt;)&lt;/code&gt; returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2331f9cd60f825f98c71b0815368d3609568435" translate="yes" xml:space="preserve">
          <source>When this method is called with a block, it passes the &lt;a href=&quot;http&quot;&gt;&lt;code&gt;Net::HTTP&lt;/code&gt;&lt;/a&gt; object to the block, and closes the TCP connection and &lt;a href=&quot;http&quot;&gt;&lt;code&gt;HTTP&lt;/code&gt;&lt;/a&gt; session after the block has been executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc25288736709b499881c528c97ab74774b4931" translate="yes" xml:space="preserve">
          <source>When this methods is called with a block, the newly-started &lt;a href=&quot;smtp&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; object is yielded to the block, and automatically closed after the block call finishes. Otherwise, it is the caller's responsibility to close the session when finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b855e9b7850de44ff3cdaec60ee0395a37291a" translate="yes" xml:space="preserve">
          <source>When this module is included in another, Ruby calls &lt;code&gt;append_features&lt;/code&gt; in this module, passing it the receiving module in &lt;em&gt;mod&lt;/em&gt;. Ruby's default implementation is to add the constants, methods, and module variables of this module to &lt;em&gt;mod&lt;/em&gt; if this module has not already been added to &lt;em&gt;mod&lt;/em&gt; or one of its ancestors. See also &lt;code&gt;Module#include&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1d7b26629fc02c7912ca0855f925c2ef1d41a94" translate="yes" xml:space="preserve">
          <source>When this module is prepended in another, Ruby calls &lt;code&gt;prepend_features&lt;/code&gt; in this module, passing it the receiving module in &lt;em&gt;mod&lt;/em&gt;. Ruby's default implementation is to overlay the constants, methods, and module variables of this module to &lt;em&gt;mod&lt;/em&gt; if this module has not already been added to &lt;em&gt;mod&lt;/em&gt; or one of its ancestors. See also &lt;code&gt;Module#prepend&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d29e5d761f069ea451c1efdef280f258d8cb0b4" translate="yes" xml:space="preserve">
          <source>When this thread is executing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b19babd50cd24c92752b8bd4e6e9f98f1d33ee" translate="yes" xml:space="preserve">
          <source>When this thread is terminated normally</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="799756127998598bf92cc32cfe51e06c9ba6a58a" translate="yes" xml:space="preserve">
          <source>When true is given or the option itself is not specified, environment variable `scheme_proxy' is examined. `scheme' is replaced by `http', `https' or `ftp'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb39fabd7cc833e91af4874cb6821a2de6f23552" translate="yes" xml:space="preserve">
          <source>When true then &lt;a href=&quot;sslserver#method-i-accept&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt; works exactly the same as &lt;a href=&quot;../../tcpserver#method-i-accept&quot;&gt;&lt;code&gt;TCPServer#accept&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a5c1460c0b95642ede48ac608144f9710d9600" translate="yes" xml:space="preserve">
          <source>When true, shows only usage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baac687eae25c661cfd890f68fa5fe90942a72f5" translate="yes" xml:space="preserve">
          <source>When used without any arguments &lt;code&gt;super&lt;/code&gt; uses the arguments given to the subclass method. To send no arguments to the superclass method use &lt;code&gt;super()&lt;/code&gt;. To send specific arguments to the superclass method provide them manually like &lt;code&gt;super(2)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3539b6058ffc72c7537de536ed925af26efcaf45" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;drb&quot;&gt;&lt;code&gt;DRb&lt;/code&gt;&lt;/a&gt;, try to avoid exposing it over the network if possible. If this isn't possible and you need to expose &lt;a href=&quot;drb&quot;&gt;&lt;code&gt;DRb&lt;/code&gt;&lt;/a&gt; to the world, you &lt;strong&gt;must&lt;/strong&gt; configure an appropriate security policy with &lt;code&gt;DRb::ACL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d1dbdd6b258471f8d64372c38e49b514d66a24" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;io#method-i-scanf&quot;&gt;&lt;code&gt;IO#scanf&lt;/code&gt;&lt;/a&gt; under Windows, make sure you open your files in binary mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559b2649615c3f178d71958d11c3e25dad09c57e" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;object#method-i-dup&quot;&gt;&lt;code&gt;dup&lt;/code&gt;&lt;/a&gt;, any modules that the object has been extended with will not be copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb1a59e9a75801763a2033ed96fc52bc2af3532" translate="yes" xml:space="preserve">
          <source>When using introspection methods such as Kernel#method or Kernel#methods refinements are not honored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46e59b48041fc19040192cc42d5f8a52bf6ef75c" translate="yes" xml:space="preserve">
          <source>When using method assignment you must always have a receiver. If you do not have a receiver, Ruby assumes you are assigning to a local variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9e84ace3b98730725bbf283a48e92f6b09ca6c" translate="yes" xml:space="preserve">
          <source>When we encounter :type attribute with a source block, we add a plugin by name bundler-source-&amp;lt;type&amp;gt; to list of plugins to be installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="867e4c0a1734287fba82c09d5dc03b8870e06811" translate="yes" xml:space="preserve">
          <source>When working with auto-complete there are some strategies that work well. To get some ideas you can take a look at the &lt;a href=&quot;https://svn.ruby-lang.org/repos/ruby/trunk/lib/irb/completion.rb&quot;&gt;completion.rb&lt;/a&gt; file for irb.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69162c1563db48d15ddb6114954a7a27ec1c0fdb" translate="yes" xml:space="preserve">
          <source>When you &lt;a href=&quot;stringscanner#method-i-scan&quot;&gt;&lt;code&gt;scan&lt;/code&gt;&lt;/a&gt; for a pattern (a regular expression), the match must occur at the character after the scan pointer. If you use &lt;a href=&quot;stringscanner#method-i-scan_until&quot;&gt;&lt;code&gt;scan_until&lt;/code&gt;&lt;/a&gt;, then the match can occur anywhere after the scan pointer. In both cases, the scan pointer moves &lt;em&gt;just beyond&lt;/em&gt; the last character of the match, ready to scan again from the next character onwards. This is demonstrated by the example above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f74667d22cd42749a4d7bf11f1078c7c8ae031a" translate="yes" xml:space="preserve">
          <source>When you call &lt;code&gt;require 'x'&lt;/code&gt;, this is what happens:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b236a3777cc0b563b6929bc02bf1fefaba772dc8" translate="yes" xml:space="preserve">
          <source>When you define &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;, you can include &lt;a href=&quot;comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt; to gain the methods &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;between?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06819a9dce45dbb7db0a16125e620982bcfbd61b" translate="yes" xml:space="preserve">
          <source>When you know that the actual encoding of the data of an &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; object is not the default external encoding, you can reset its external encoding with &lt;a href=&quot;io#method-i-set_encoding&quot;&gt;&lt;code&gt;IO#set_encoding&lt;/code&gt;&lt;/a&gt; or set it at &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; object creation (see &lt;a href=&quot;io#method-c-new&quot;&gt;&lt;code&gt;IO.new&lt;/code&gt;&lt;/a&gt; options).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c445f4c13d27f2238c0bcedeb518bb4c6354cea3" translate="yes" xml:space="preserve">
          <source>When you require &lt;code&gt;bigdecimal/util&lt;/code&gt;, the &lt;a href=&quot;bigdecimal#method-i-to_d&quot;&gt;&lt;code&gt;to_d&lt;/code&gt;&lt;/a&gt; method will be available on &lt;a href=&quot;bigdecimal&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/a&gt; and the native &lt;a href=&quot;integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;float&quot;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;rational&quot;&gt;&lt;code&gt;Rational&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ceebeb03b2e2ddfdae107013f337f81fed46a54" translate="yes" xml:space="preserve">
          <source>When you send a message, Ruby looks up the method that matches the name of the message for the receiver. Methods are stored in classes and modules so method lookup walks these, not the objects themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517389b69654d36b82bf68edc55f75eff49bf59d" translate="yes" xml:space="preserve">
          <source>When you use an exclusive range (&lt;code&gt;...&lt;/code&gt;), the off condition is evaluated on the following iteration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d1aec63af40013565932358958938e30fc55d1" translate="yes" xml:space="preserve">
          <source>When you use an inclusive range (&lt;code&gt;..&lt;/code&gt;), the off condition is evaluated when the on condition changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ad467af2389f4657a5b4e41049d57157ac2ab0" translate="yes" xml:space="preserve">
          <source>When you want to deactivate the trace, you must use &lt;a href=&quot;tracepoint#method-i-disable&quot;&gt;&lt;code&gt;TracePoint#disable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f5dccd2423ab652b294fde85d54f2c6922975b" translate="yes" xml:space="preserve">
          <source>When zlib returns a Z_MEM_ERROR, usually if there was not enough memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8aaeac2311be307c50611583697e3bac5768084" translate="yes" xml:space="preserve">
          <source>When zlib returns a Z_NEED_DICT if a preset dictionary is needed at this point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224c54d067a55d4f6ea9e10af9bfe90fb16dd24f" translate="yes" xml:space="preserve">
          <source>When zlib returns a Z_STREAM_END is return if the end of the compressed data has been reached and all uncompressed out put has been produced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71577ed2257ab496d5eed82beca3c2b3d5caea57" translate="yes" xml:space="preserve">
          <source>When zlib returns a Z_STREAM_ERROR, usually if the stream state was inconsistent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45d02ac8a337e35233999c2e8ea3e38561b265a" translate="yes" xml:space="preserve">
          <source>When zlib returns a Z_VERSION_ERROR, usually if the zlib library version is incompatible with the version assumed by the caller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed039419904dbcc23dfbb6ae0effe5d6cdc41b51" translate="yes" xml:space="preserve">
          <source>Where to look for Bundler::Thor files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ae55a0189fd08ec0f64cdd102e3e576db6b29b" translate="yes" xml:space="preserve">
          <source>Whereas in the following example 'and' has been anchored to a non-word boundary so instead of matching the first 'and' it matches from the fourth letter of 'demand' instead:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8da67ec92f19c07493952d84020e6b4e62bb9a" translate="yes" xml:space="preserve">
          <source>Whereas the following pattern matches a vowel followed by a word character, twice, i.e. &lt;code&gt;[aeiou]\w[aeiou]\w&lt;/code&gt;: 'enor'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a6dbc14aa5b9940279aac215f2af4a9d039bab6" translate="yes" xml:space="preserve">
          <source>Whether &lt;a href=&quot;pstore&quot;&gt;&lt;code&gt;PStore&lt;/code&gt;&lt;/a&gt; should do its best to prevent file corruptions, even when under unlikely-to-occur error conditions such as out-of-space conditions and other unusual OS filesystem errors. Setting this flag comes at the price in the form of a performance loss.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07cc92442f7fd245de5fcf82f4428afd37149d70" translate="yes" xml:space="preserve">
          <source>Whether all the specs in self are in other TODO: rename to &lt;a href=&quot;../enumerable#method-i-include-3F&quot;&gt;&lt;code&gt;include?&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a2cbe87c76dc15e038bb15390bdf0921df4da5" translate="yes" xml:space="preserve">
          <source>Whether an exception should be raised on invalid arguments. &lt;code&gt;true&lt;/code&gt; by default, if passed &lt;code&gt;false&lt;/code&gt;, just returns &lt;code&gt;nil&lt;/code&gt; for invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeca8f7f1a482f601488474d8471ab61b171cd0f" translate="yes" xml:space="preserve">
          <source>Whether or not debug messages should be printed. By default, whether or not the `MOLINILLO_DEBUG` environment variable is set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="055050b3c42a5dfefe6c016f2fc526d168dcecf3" translate="yes" xml:space="preserve">
          <source>Whether processing will be required in binary vs text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b2693caf77e2d35d624ebe459c26d1b81ec6a8" translate="yes" xml:space="preserve">
          <source>Whether this is an official release build of &lt;a href=&quot;../bundler&quot;&gt;&lt;code&gt;Bundler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3424af2ae870d266aa12fc8f24375939d71aa692" translate="yes" xml:space="preserve">
          <source>Whether to check the server certificate is valid for the hostname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47eb481e0b9951a6fc386e29e9264ce46fd5f2a9" translate="yes" xml:space="preserve">
          <source>Whether to close the underlying socket as well, when the SSL/TLS connection is shut down. This defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc5bdb0fb907eadac82100142988e9e3d1f2761" translate="yes" xml:space="preserve">
          <source>Which is equivalent to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a90edcdd952e51a23189bec4261048453c6495" translate="yes" xml:space="preserve">
          <source>Which specific SSL version to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64e55f9adeed9fe02e78f3c11e7c01d9fee1e2a7" translate="yes" xml:space="preserve">
          <source>Which will find the first occurrence of the desired symbol using the default library search order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2964622063e07c9000f8e31a1c61247ed754b470" translate="yes" xml:space="preserve">
          <source>Which will find the next occurrence of a function in the search order after the current library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d51272e994a0abb811de55dd5a106a4c6c31bd" translate="yes" xml:space="preserve">
          <source>While all directives are locale independent since Ruby 1.9, %Z is platform dependent. So, the result may differ even if the same format string is used in other systems such as C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba0d9f9b698ba7d8acd81df4ce5ac6dd9cb59d8f" translate="yes" xml:space="preserve">
          <source>While it might not be a good idea to call these with user inputs, methods that used to be vulnerable such as &lt;code&gt;to_sym&lt;/code&gt;, &lt;code&gt;respond_to?&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;instance_variable_get&lt;/code&gt;, &lt;code&gt;const_get&lt;/code&gt;, etc. are no longer a threat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d77e2e09ce9f5a8df68c6135a5b77cd551a78c" translate="yes" xml:space="preserve">
          <source>While strings created from these locations will have this encoding, the encoding may not be valid. Be sure to check &lt;a href=&quot;string#method-i-valid_encoding-3F&quot;&gt;&lt;code&gt;String#valid_encoding?&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3cf6c997ca9a215984ef3df2e9d92db73f083f" translate="yes" xml:space="preserve">
          <source>While the modifier and standard versions have both a &amp;ldquo;test&amp;rdquo; expression and a &amp;ldquo;then&amp;rdquo; expression, they are not exact transformations of each other due to parse order. Here is an example that shows the difference:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ab2ee81a612a1fa2d1a336dda17ee485558ef01" translate="yes" xml:space="preserve">
          <source>While the ternary if is much shorter to write than the more verbose form, for readability it is recommended that the ternary if is only used for simple conditionals. Also, avoid using multiple ternary conditions in the same expression as this can be confusing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ccc8e2ed1ad3fdb6b52cfd86d42420a3657d55" translate="yes" xml:space="preserve">
          <source>While this example will work, for best optimization review the flags for your specific time, memory usage and output space requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e79d5e20c0b5e362b8889a3dae32de3ba0ab5d0e" translate="yes" xml:space="preserve">
          <source>While we are ignoring the &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; exception, it's safe to write our resource allocation code. Then, the ensure block is where we can safely deallocate your resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89dae832e586f7f398ae1fec3b6c695b59d9e3bb" translate="yes" xml:space="preserve">
          <source>While writing the file, the internal encoding is not specified as it is only necessary for reading. While reading the file both the internal and external encoding must be specified to obtain the correct result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10be061e31ef356ec62f8b6a14f7ea32288f3e9" translate="yes" xml:space="preserve">
          <source>Whitespace is defined as any of the following characters: null, horizontal tab, line feed, vertical tab, form feed, carriage return, space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6ff992046bf45b29e0cd85cf4f9fbe2d1c296cd" translate="yes" xml:space="preserve">
          <source>Width for option list portion of summary. Must be &lt;a href=&quot;numeric&quot;&gt;&lt;code&gt;Numeric&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="985e079dbf02e0a2e87c9008565b063f49bd6603" translate="yes" xml:space="preserve">
          <source>Width of left side (option part). In other words, the right side (description part) starts after &lt;code&gt;width&lt;/code&gt; columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="376efdcea01e09b642955b02747a4f035b56e9a1" translate="yes" xml:space="preserve">
          <source>Width of left side, defaults to @summary_width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d254ac30717883c4522177f3cad4ed3b39b5b7" translate="yes" xml:space="preserve">
          <source>Wifi status (Linux 3.3)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d48379d5874887ea91cfb73d33f94d2689a688a" translate="yes" xml:space="preserve">
          <source>Wildcards in &lt;a href=&quot;../../file#method-c-fnmatch&quot;&gt;&lt;code&gt;File.fnmatch&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../dir#method-c-glob&quot;&gt;&lt;code&gt;Dir.glob&lt;/code&gt;&lt;/a&gt; patterns do not match directory separators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eff3a7ac1727420d41a9c5e056271461d65930c" translate="yes" xml:space="preserve">
          <source>Will invoke the list command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af1dddd6c2192a020edaa51d45191a8693034d0" translate="yes" xml:space="preserve">
          <source>Will produce:</source>
          <target state="translated">将产生。</target>
        </trans-unit>
        <trans-unit id="2cd8ef312ea28a21eb2974a59ce6f6cbe825a821" translate="yes" xml:space="preserve">
          <source>Will raise an &lt;a href=&quot;engine/engineerror&quot;&gt;&lt;code&gt;EngineError&lt;/code&gt;&lt;/a&gt; if the digest is unavailable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418e5714b13791a66db6a1d9d239c8d2fbcc6561" translate="yes" xml:space="preserve">
          <source>Will raise an error if no handlers are open.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b653c1a1342f29b6e1ca16ef44b1d14c98a11e3" translate="yes" xml:space="preserve">
          <source>Win32</source>
          <target state="translated">Win32</target>
        </trans-unit>
        <trans-unit id="67968380b39bd25eae60f0aeab80420991bd0a51" translate="yes" xml:space="preserve">
          <source>Windows Exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6683f042f017abd13fb3347a47a825e285cfeff" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;array#method-i-insert&quot;&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/a&gt; you can add a new element to an array at any position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7e2936a26238d4563121ccd48923fb58510cd6" translate="yes" xml:space="preserve">
          <source>With a block scanf returns a 'map'-like array of transformations from the block &amp;ndash; that is, an array reflecting what the block did with each yielded result from the iterative scanf operation. (See &amp;ldquo;Block usage&amp;rdquo;, above.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f11632b0b09433e98c249e0172b8a4f993a115" translate="yes" xml:space="preserve">
          <source>With it, you can get a handle to the instructions that make up a method or a proc, compile strings of Ruby code down to VM instructions, and disassemble instruction sequences to strings for easy inspection. It is mostly useful if you want to learn how the Ruby VM works, but it also lets you control various settings for the Ruby iseq compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aec4782f5c052410654d3de62ed415b91e7f385b" translate="yes" xml:space="preserve">
          <source>With no argument, or if the argument is the same as the receiver, return the receiver. Otherwise, create a new exception object of the same class as the receiver, but with a message equal to &lt;code&gt;string.to_str&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0207c22e74f6ff7908b356164154488cb22efdb8" translate="yes" xml:space="preserve">
          <source>With no arguments, raises the exception in &lt;code&gt;$!&lt;/code&gt; or raises a &lt;code&gt;RuntimeError&lt;/code&gt; if &lt;code&gt;$!&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;. With a single &lt;code&gt;String&lt;/code&gt; argument, raises a &lt;code&gt;RuntimeError&lt;/code&gt; with the string as a message. Otherwise, the first parameter should be the name of an &lt;code&gt;Exception&lt;/code&gt; class (or an object that returns an &lt;code&gt;Exception&lt;/code&gt; object when sent an &lt;code&gt;exception&lt;/code&gt; message). The optional second parameter sets the message associated with the exception, and the third parameter is an array of callback information. Exceptions are caught by the &lt;code&gt;rescue&lt;/code&gt; clause of &lt;code&gt;begin...end&lt;/code&gt; blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3800ff1e5eeaafb690d4d6d252e60fb1bd2c6681" translate="yes" xml:space="preserve">
          <source>With no arguments, sets the default visibility for subsequently defined methods to private. With arguments, sets the named methods to have private visibility. &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; arguments are converted to symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eadc8d9ac6a20a7ffb99c720806b8cfcb2de2eaf" translate="yes" xml:space="preserve">
          <source>With no arguments, sets the default visibility for subsequently defined methods to protected. With arguments, sets the named methods to have protected visibility. &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; arguments are converted to symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79768ab769f57c747897700ec63955406c96ed1e" translate="yes" xml:space="preserve">
          <source>With no arguments, sets the default visibility for subsequently defined methods to public. With arguments, sets the named methods to have public visibility. &lt;a href=&quot;string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; arguments are converted to symbols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e7c6a6b853ed49275b9fb84e74e7a5b5d6e64c" translate="yes" xml:space="preserve">
          <source>With no associated block, &lt;code&gt;File.open&lt;/code&gt; is a synonym for &lt;a href=&quot;file#method-c-new&quot;&gt;&lt;code&gt;File.new&lt;/code&gt;&lt;/a&gt;. If the optional code block is given, it will be passed the opened &lt;code&gt;file&lt;/code&gt; as an argument and the &lt;a href=&quot;file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; object will automatically be closed when the block terminates. The value of the block will be returned from &lt;code&gt;File.open&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639adbe4f68ac58c7ae410f29329bedaa75ba186" translate="yes" xml:space="preserve">
          <source>With no associated block, &lt;code&gt;IO.open&lt;/code&gt; is a synonym for &lt;a href=&quot;io#method-c-new&quot;&gt;&lt;code&gt;IO.new&lt;/code&gt;&lt;/a&gt;. If the optional code block is given, it will be passed &lt;code&gt;io&lt;/code&gt; as an argument, and the &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; object will automatically be closed when the block terminates. In this instance, &lt;a href=&quot;io#method-c-open&quot;&gt;&lt;code&gt;IO.open&lt;/code&gt;&lt;/a&gt; returns the value of the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d03a6831082c55424d499b230f1974c4805b1d" translate="yes" xml:space="preserve">
          <source>With no block, &lt;code&gt;open&lt;/code&gt; is a synonym for &lt;code&gt;Dir::new&lt;/code&gt;. If a block is present, it is passed &lt;em&gt;aDir&lt;/em&gt; as a parameter. The directory is closed at the end of the block, and &lt;code&gt;Dir::open&lt;/code&gt; returns the value of the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ff788f1d15c5b2ec4a2a25062aeea0e169f196" translate="yes" xml:space="preserve">
          <source>With progname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde30c97d760211268fce69bf5026121d049c127" translate="yes" xml:space="preserve">
          <source>With severity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5448dd74b3e50e938d841d1c4dbe1e3a381bd5b" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;../../exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; of OpenSSL::ASN1::EndOfContent, each &lt;a href=&quot;primitive&quot;&gt;&lt;code&gt;Primitive&lt;/code&gt;&lt;/a&gt; class constructor takes at least one parameter, the &lt;em&gt;value&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd11f892b16989cd33603661c13df35c617b82d2" translate="yes" xml:space="preserve">
          <source>With the addition of the class method &lt;a href=&quot;thread#method-c-handle_interrupt&quot;&gt;&lt;code&gt;::handle_interrupt&lt;/code&gt;&lt;/a&gt;, you can now handle exceptions asynchronously with threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="358f873431c873d3e64f22154f18f2b132f94089" translate="yes" xml:space="preserve">
          <source>With this method, you can find memory leaks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38cf8b4b88c49ab32d35eece87f07ef683e58d2" translate="yes" xml:space="preserve">
          <source>Within a character class the hyphen (&lt;code&gt;-&lt;/code&gt;) is a metacharacter denoting an inclusive range of characters. &lt;code&gt;[abcd]&lt;/code&gt; is equivalent to &lt;code&gt;[a-d]&lt;/code&gt;. A range can be followed by another range, so &lt;code&gt;[abcdwxyz]&lt;/code&gt; is equivalent to &lt;code&gt;[a-dw-z]&lt;/code&gt;. The order in which ranges or individual characters appear inside a character class is irrelevant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275b5f0e27ab494055a4691f86b5cb0bbfc56364" translate="yes" xml:space="preserve">
          <source>Within our &lt;code&gt;:string_literal&lt;/code&gt; you'll notice two &lt;code&gt;@tstring_content&lt;/code&gt;, this is the literal part for &lt;code&gt;Hello, &lt;/code&gt; and &lt;code&gt;!&lt;/code&gt;. Between the two &lt;code&gt;@tstring_content&lt;/code&gt; statements is a &lt;code&gt;:string_embexpr&lt;/code&gt;, where &lt;em&gt;embexpr&lt;/em&gt; is an embedded expression. Our expression consists of a local variable, or &lt;code&gt;var_ref&lt;/code&gt;, with the identifier (&lt;code&gt;@ident&lt;/code&gt;) of &lt;code&gt;world&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b3fdf0554f6096b1ad83ba212a52cc38ebf5968" translate="yes" xml:space="preserve">
          <source>Without a block, scanf returns an array containing all the conversions it has found. If none are found, scanf will return an empty array. An unsuccessful match is never ignored, but rather always signals the end of the scanning operation. If the first unsuccessful match takes place after one or more successful matches have already taken place, the returned array will contain the results of those successful matches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f323445dc6b6068ab3891f2729ca61ec8a02505" translate="yes" xml:space="preserve">
          <source>Workaround for missing &lt;a href=&quot;../../../../net/httpheader#method-i-connection_close-3F&quot;&gt;&lt;code&gt;Net::HTTPHeader#connection_close?&lt;/code&gt;&lt;/a&gt; on Ruby 1.8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c2928f9622713949a0e56af5650506ea8b2ffe" translate="yes" xml:space="preserve">
          <source>Workaround for missing &lt;a href=&quot;../../../../net/httpheader#method-i-connection_keep_alive-3F&quot;&gt;&lt;code&gt;Net::HTTPHeader#connection_keep_alive?&lt;/code&gt;&lt;/a&gt; on Ruby 1.8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99edd8c8e615e373739d2cdd38a8942b8a573113" translate="yes" xml:space="preserve">
          <source>Worker</source>
          <target state="translated">Worker</target>
        </trans-unit>
        <trans-unit id="8c6270ba633c09e45a006103460ae690d33e07da" translate="yes" xml:space="preserve">
          <source>Worker#abort_threads</source>
          <target state="translated">Worker#abort_threads</target>
        </trans-unit>
        <trans-unit id="48440bf8cd69816dce892a51e4c78c3c7328a7a7" translate="yes" xml:space="preserve">
          <source>Worker#apply_func</source>
          <target state="translated">Worker#apply_func</target>
        </trans-unit>
        <trans-unit id="37b6c528c813dbdc7a8ef4023e7ab75ae9b5fdf6" translate="yes" xml:space="preserve">
          <source>Worker#create_threads</source>
          <target state="translated">Worker#create_threads</target>
        </trans-unit>
        <trans-unit id="d9407cd2e8b08efa53f346483efa47f7f57359ec" translate="yes" xml:space="preserve">
          <source>Worker#deq</source>
          <target state="translated">Worker#deq</target>
        </trans-unit>
        <trans-unit id="8fc48f166416ff9781d5bed2dee6465f375c1571" translate="yes" xml:space="preserve">
          <source>Worker#enq</source>
          <target state="translated">Worker#enq</target>
        </trans-unit>
        <trans-unit id="550821e3e92d205a428ea2318380fc05d1262c7a" translate="yes" xml:space="preserve">
          <source>Worker#name</source>
          <target state="translated">Worker#name</target>
        </trans-unit>
        <trans-unit id="b81a2ae623db49bee3a7e5eebd180790b9935ec2" translate="yes" xml:space="preserve">
          <source>Worker#process_queue</source>
          <target state="translated">Worker#process_queue</target>
        </trans-unit>
        <trans-unit id="53655c2a68733622559b86bccc59f52ae75c9e41" translate="yes" xml:space="preserve">
          <source>Worker#stop</source>
          <target state="translated">Worker#stop</target>
        </trans-unit>
        <trans-unit id="3db0d4830196fcbca346fa4e08686366890cbb14" translate="yes" xml:space="preserve">
          <source>Worker#stop_threads</source>
          <target state="translated">Worker#stop_threads</target>
        </trans-unit>
        <trans-unit id="3270ac59674048c36bca7b11fc9db5e06d84da3f" translate="yes" xml:space="preserve">
          <source>Worker::WrappedException</source>
          <target state="translated">Worker::WrappedException</target>
        </trans-unit>
        <trans-unit id="1d8d56a7bdbc4b914d9c27f78db73a70137adff9" translate="yes" xml:space="preserve">
          <source>Worker::WrappedException#exception</source>
          <target state="translated">Worker::WrappedException#exception</target>
        </trans-unit>
        <trans-unit id="ecde9c875ba3cefb1f83374ac69df0de8d894087" translate="yes" xml:space="preserve">
          <source>Worker::WrappedException::new</source>
          <target state="translated">Worker::WrappedException::new</target>
        </trans-unit>
        <trans-unit id="fcb66d6911e847141ea4a6b93c3fe1e538a086a6" translate="yes" xml:space="preserve">
          <source>Worker::new</source>
          <target state="translated">Worker::new</target>
        </trans-unit>
        <trans-unit id="51582a2170572ee7500dbfd779ff8919b12b11c8" translate="yes" xml:space="preserve">
          <source>Working with an instance of &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f376c3577b2876d54a5931c8c9825f57f07a96" translate="yes" xml:space="preserve">
          <source>Works similar to &lt;a href=&quot;../../tcpserver#method-i-accept&quot;&gt;&lt;code&gt;TCPServer#accept&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="048657ade0d92a9eaf527ecba268b865d4ba413b" translate="yes" xml:space="preserve">
          <source>Works similar to &lt;code&gt;parse&lt;/code&gt; except that instead of using a heuristic to detect the format of the input string, you provide a second argument that describes the format of the string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06548901e2a688b365ddfb7d6e1019368c4298b2" translate="yes" xml:space="preserve">
          <source>Wrapper method for getopts.rb.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd9b054baa694c95bba32de9782f1e7bd156a7ab" translate="yes" xml:space="preserve">
          <source>Wraps the C pointer &lt;code&gt;addr&lt;/code&gt; as a C struct with the given &lt;code&gt;types&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83eacc73d4a986b94eef15e4f9f29dacda15031" translate="yes" xml:space="preserve">
          <source>Wraps the block in a single, VM-global &lt;a href=&quot;mutex#method-i-synchronize&quot;&gt;&lt;code&gt;Mutex.synchronize&lt;/code&gt;&lt;/a&gt;, returning the value of the block. A thread executing inside the exclusive section will only block other threads which also use the &lt;a href=&quot;thread#method-c-exclusive&quot;&gt;&lt;code&gt;Thread.exclusive&lt;/code&gt;&lt;/a&gt; mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df96bf1c35d58ab3a52579dc4c22836f3e00efb6" translate="yes" xml:space="preserve">
          <source>Write &amp;ldquo;canonical&amp;rdquo; YAML form (very verbose, yet strictly formal).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c950bbe27a1db12edceae0a8ce2fd156eae20eed" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;%YAML [version]&lt;/code&gt; at the beginning of document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df6fa5ad2e1244b19d307d56643b1d64383503dd" translate="yes" xml:space="preserve">
          <source>Write a &lt;a href=&quot;../digest&quot;&gt;&lt;code&gt;Digest&lt;/code&gt;&lt;/a&gt; subclass in C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ab80585087567093754d27e7525f508c909e3b" translate="yes" xml:space="preserve">
          <source>WriteAdapter</source>
          <target state="translated">WriteAdapter</target>
        </trans-unit>
        <trans-unit id="a13da82443ff880e048b6a2d5dfc6cfd4bc10fcf" translate="yes" xml:space="preserve">
          <source>WriteAdapter#&amp;lt;&amp;lt;</source>
          <target state="translated">WriteAdapter#&amp;lt;&amp;lt;</target>
        </trans-unit>
        <trans-unit id="7c07ddca26b4f5dab4bf8ed44cea41a862b70c34" translate="yes" xml:space="preserve">
          <source>WriteAdapter#inspect</source>
          <target state="translated">WriteAdapter#inspect</target>
        </trans-unit>
        <trans-unit id="25670c204fa24bdca0f1c7fc6f99d8de833bbc62" translate="yes" xml:space="preserve">
          <source>WriteAdapter#print</source>
          <target state="translated">WriteAdapter#print</target>
        </trans-unit>
        <trans-unit id="75b98586170ff26035677117f3baa9d1672c32e1" translate="yes" xml:space="preserve">
          <source>WriteAdapter#printf</source>
          <target state="translated">WriteAdapter#printf</target>
        </trans-unit>
        <trans-unit id="4c1263162fa4307e7c7b5243afe7ef4a25f422f4" translate="yes" xml:space="preserve">
          <source>WriteAdapter#puts</source>
          <target state="translated">WriteAdapter#puts</target>
        </trans-unit>
        <trans-unit id="394d7f058a9e0b0ff019736e2524d93275061377" translate="yes" xml:space="preserve">
          <source>WriteAdapter#write</source>
          <target state="translated">WriteAdapter#write</target>
        </trans-unit>
        <trans-unit id="cc0355a5f6e17a2c33fc6187e9e333d85a1b9f85" translate="yes" xml:space="preserve">
          <source>WriteAdapter::new</source>
          <target state="translated">WriteAdapter::new</target>
        </trans-unit>
        <trans-unit id="f64ea9475585d5c3764baf0bd87237e334c0db62" translate="yes" xml:space="preserve">
          <source>WriteTimeout</source>
          <target state="translated">WriteTimeout</target>
        </trans-unit>
        <trans-unit id="1f99694a0584072277ef61c4bc54e8b5559fe50c" translate="yes" xml:space="preserve">
          <source>WriteTimeout#io</source>
          <target state="translated">WriteTimeout#io</target>
        </trans-unit>
        <trans-unit id="f185385a6ffe4046c45035e6cf513c09a84f5275" translate="yes" xml:space="preserve">
          <source>WriteTimeout#message</source>
          <target state="translated">WriteTimeout#message</target>
        </trans-unit>
        <trans-unit id="6d066e50865d46fe54d509a8a2971919e68b29f1" translate="yes" xml:space="preserve">
          <source>WriteTimeout::new</source>
          <target state="translated">WriteTimeout::new</target>
        </trans-unit>
        <trans-unit id="5f435830a7c07f19c4072a88821b38028c3f69e6" translate="yes" xml:space="preserve">
          <source>Writer</source>
          <target state="translated">Writer</target>
        </trans-unit>
        <trans-unit id="a00e0dd0142088d7d85e90b4a3218c81ea49fe5a" translate="yes" xml:space="preserve">
          <source>Writer#&amp;lt;&amp;lt;</source>
          <target state="translated">Writer#&amp;lt;&amp;lt;</target>
        </trans-unit>
        <trans-unit id="249804588981acf5ac9d807f10f2c15999640f9c" translate="yes" xml:space="preserve">
          <source>Writer#headers</source>
          <target state="translated">Writer#headers</target>
        </trans-unit>
        <trans-unit id="4ebb5135491f036160a9782ebf5a71b19b130db3" translate="yes" xml:space="preserve">
          <source>Writer#lineno</source>
          <target state="translated">Writer#lineno</target>
        </trans-unit>
        <trans-unit id="0244c5479aab107493cd339ad2fd390ecc42c476" translate="yes" xml:space="preserve">
          <source>Writer#prepare</source>
          <target state="translated">Writer#prepare</target>
        </trans-unit>
        <trans-unit id="b65c634ea52b5e2ba20fea37ecb34f23d59fa14f" translate="yes" xml:space="preserve">
          <source>Writer#prepare_format</source>
          <target state="translated">Writer#prepare_format</target>
        </trans-unit>
        <trans-unit id="d6f2c17bf5eb1db81fae69e3c72e0d2b1bd3ec08" translate="yes" xml:space="preserve">
          <source>Writer#prepare_header</source>
          <target state="translated">Writer#prepare_header</target>
        </trans-unit>
        <trans-unit id="634ab050c1500a2cb6f84d0e2568a5339f998a62" translate="yes" xml:space="preserve">
          <source>Writer#prepare_output</source>
          <target state="translated">Writer#prepare_output</target>
        </trans-unit>
        <trans-unit id="1fd1264918228e3f62d7739aebe6dd6fd68592fb" translate="yes" xml:space="preserve">
          <source>Writer#quote</source>
          <target state="translated">Writer#quote</target>
        </trans-unit>
        <trans-unit id="9359bb6d4c02bd4da47f0e18903b31745ae5ab00" translate="yes" xml:space="preserve">
          <source>Writer#quote_field</source>
          <target state="translated">Writer#quote_field</target>
        </trans-unit>
        <trans-unit id="3dc41e5c9258facced55befbc76573ae1a096e32" translate="yes" xml:space="preserve">
          <source>Writer#rewind</source>
          <target state="translated">Writer#rewind</target>
        </trans-unit>
        <trans-unit id="a409a7f9a5af02cee16f27991b4bd6680cef7204" translate="yes" xml:space="preserve">
          <source>Writer::new</source>
          <target state="translated">Writer::new</target>
        </trans-unit>
        <trans-unit id="af297047f39bcaf4e674c39f7ffd1cec69d47db4" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;contents&lt;/code&gt; to the file, opening it in binary mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59dee01315a015e4e0dd03540f158d41b0ae8c96" translate="yes" xml:space="preserve">
          <source>Writes &lt;code&gt;contents&lt;/code&gt; to the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de109d103550a3179eac792ac4e33ca69a11a37" translate="yes" xml:space="preserve">
          <source>Writes &lt;em&gt;args&lt;/em&gt; to the stream along with a record separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159ae658cc3deb3dc3435de1c0dfbe57d69b0a21" translate="yes" xml:space="preserve">
          <source>Writes &lt;em&gt;args&lt;/em&gt; to the stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28835fb2c280432a3c615537a6201b3276da4149" translate="yes" xml:space="preserve">
          <source>Writes &lt;em&gt;s&lt;/em&gt; in the non-blocking manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2a6239766ced79b92bb4d95afe59cc3ddb6aa1" translate="yes" xml:space="preserve">
          <source>Writes &lt;em&gt;s&lt;/em&gt; to the buffer. When the buffer is full or &lt;a href=&quot;buffering#attribute-i-sync&quot;&gt;&lt;code&gt;sync&lt;/code&gt;&lt;/a&gt; is true the buffer is flushed to the underlying socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f04125d32d17f2a5d913b05e3121bb150af0a33" translate="yes" xml:space="preserve">
          <source>Writes &lt;em&gt;s&lt;/em&gt; to the stream. &lt;em&gt;s&lt;/em&gt; will be converted to a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; using &lt;code&gt;.to_s&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e6abdbed0806bb12638a6c910c538e01577918" translate="yes" xml:space="preserve">
          <source>Writes &lt;em&gt;s&lt;/em&gt; to the stream. If the argument is not a &lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; it will be converted using &lt;code&gt;.to_s&lt;/code&gt; method. Returns the number of bytes written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7992becf283eb4bfe1271ae55aa07c300f5b91e" translate="yes" xml:space="preserve">
          <source>Writes &lt;em&gt;string&lt;/em&gt; if inplace mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2e10aa425d3bfb7bdb6f50ddd661c065c746b41" translate="yes" xml:space="preserve">
          <source>Writes &lt;em&gt;string&lt;/em&gt; to the &lt;a href=&quot;../ssl&quot;&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/a&gt; connection in a non-blocking manner. Raises an &lt;a href=&quot;sslerror&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; if writing would block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56951c29f9eaf0e449aedbb5f85957e0152c7847" translate="yes" xml:space="preserve">
          <source>Writes &lt;em&gt;string&lt;/em&gt; to the &lt;a href=&quot;../ssl&quot;&gt;&lt;code&gt;SSL&lt;/code&gt;&lt;/a&gt; connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a874e07569ab0c375f474eda30e8364e6964d539" translate="yes" xml:space="preserve">
          <source>Writes a number of random generated bytes (currently 1024) to &lt;em&gt;filename&lt;/em&gt; which can be used to initialize the PRNG by calling &lt;a href=&quot;random#method-c-load_random_file&quot;&gt;&lt;code&gt;::load_random_file&lt;/code&gt;&lt;/a&gt; in a later session.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40db4e8d577a2d7b4b0430ada62d72c914f0b964" translate="yes" xml:space="preserve">
          <source>Writes the &lt;a href=&quot;profiler#method-c-result&quot;&gt;&lt;code&gt;GC::Profiler.result&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;$stdout&lt;/code&gt; or the given &lt;a href=&quot;../io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="262e146d689ef7faf9a954630ee820a603675091" translate="yes" xml:space="preserve">
          <source>Writes the given object(s) to &lt;em&gt;ios&lt;/em&gt;. Returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09bbc772c1461f7253c384ad624b71e031f8aef" translate="yes" xml:space="preserve">
          <source>Writes the given object(s) to &lt;em&gt;ios&lt;/em&gt;. Writes a newline after any that do not already end with a newline sequence. Returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e410932eba7a7a228a49d3b82ab2c4eb7aba8b" translate="yes" xml:space="preserve">
          <source>Writes the given string to &lt;em&gt;ios&lt;/em&gt; at &lt;em&gt;offset&lt;/em&gt; using pwrite() system call. This is advantageous to combining &lt;a href=&quot;io#method-i-seek&quot;&gt;&lt;code&gt;IO#seek&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#method-i-write&quot;&gt;&lt;code&gt;IO#write&lt;/code&gt;&lt;/a&gt; in that it is atomic, allowing multiple threads/process to share the same &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; object for reading the file at various locations. This bypasses any userspace buffering of the &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; layer. Returns the number of bytes written. Raises &lt;code&gt;SystemCallError&lt;/code&gt; on error and &lt;code&gt;NotImplementedError&lt;/code&gt; if platform does not implement the system call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87c81ec0278ee8ec50520fb98a8c3364ec19e4e" translate="yes" xml:space="preserve">
          <source>Writes the given string to &lt;em&gt;ios&lt;/em&gt; using a low-level write. Returns the number of bytes written. Do not mix with other methods that write to &lt;em&gt;ios&lt;/em&gt; or you may get unpredictable results. Raises &lt;code&gt;SystemCallError&lt;/code&gt; on error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a09d32babba1a2a313857b1a8f20e93e9a3c97e" translate="yes" xml:space="preserve">
          <source>Writes the given string to &lt;em&gt;ios&lt;/em&gt; using the write(2) system call after O_NONBLOCK is set for the underlying file descriptor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8014b148ced388da6cb076c85cb8e9e4774f3de" translate="yes" xml:space="preserve">
          <source>Writes the given strings to &lt;em&gt;ios&lt;/em&gt;. The stream must be opened for writing. Arguments that are not a string will be converted to a string using &lt;code&gt;to_s&lt;/code&gt;. Returns the number of bytes written in total.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4bf2635fc1dc32f7659fd8ad0736949b0e61fa8" translate="yes" xml:space="preserve">
          <source>Writes warning message &lt;code&gt;msg&lt;/code&gt; to $stderr. This method is called by Ruby for all emitted warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dabb8334b6cbbc19635a160f00032f11eeb9962" translate="yes" xml:space="preserve">
          <source>Writing</source>
          <target state="translated">Writing</target>
        </trans-unit>
        <trans-unit id="89a93540cc711d6d323766c89923356a310d7e79" translate="yes" xml:space="preserve">
          <source>Writing output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb3670f4c1374b3811d72ff394ddd1083cc7db3" translate="yes" xml:space="preserve">
          <source>Writing to a Ruby structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629262f0003a3aeccecc8e68bf6e55abe260b7fc" translate="yes" xml:space="preserve">
          <source>Writing to a file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab14ebc09d58a4107ad9c627d461cfac743b2fd" translate="yes" xml:space="preserve">
          <source>Writing to a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b28e8c8103d74031f62b482a26190e8fc1f0499a" translate="yes" xml:space="preserve">
          <source>X.509 certificates are associated with a private/public key pair, typically a RSA, DSA or ECC key (see also &lt;a href=&quot;../pkey/rsa&quot;&gt;&lt;code&gt;OpenSSL::PKey::RSA&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../pkey/dsa&quot;&gt;&lt;code&gt;OpenSSL::PKey::DSA&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../pkey/ec&quot;&gt;&lt;code&gt;OpenSSL::PKey::EC&lt;/code&gt;&lt;/a&gt;), the public key itself is stored within the certificate and can be accessed in form of an &lt;a href=&quot;../pkey&quot;&gt;&lt;code&gt;OpenSSL::PKey&lt;/code&gt;&lt;/a&gt;. Certificates are typically used to be able to associate some form of identity with a key pair, for example web servers serving pages over HTTPs use certificates to authenticate themselves to the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d9fc06da98904260ef2c7dd462eb0542059e5e" translate="yes" xml:space="preserve">
          <source>X509::Attribute</source>
          <target state="translated">X509::Attribute</target>
        </trans-unit>
        <trans-unit id="dc26e51fd5cc364a9188fcff049916e75b31ca23" translate="yes" xml:space="preserve">
          <source>X509::Attribute#==</source>
          <target state="translated">X509::Attribute#==</target>
        </trans-unit>
        <trans-unit id="5563c521a729d2ca2d1ab1d680696cb05cdd2d8c" translate="yes" xml:space="preserve">
          <source>X509::Attribute#initialize_copy</source>
          <target state="translated">X509::Attribute#initialize_copy</target>
        </trans-unit>
        <trans-unit id="c3f2dae5fdb74edf7f10f040825be3198f2f753f" translate="yes" xml:space="preserve">
          <source>X509::Attribute#oid</source>
          <target state="translated">X509::Attribute#oid</target>
        </trans-unit>
        <trans-unit id="7790f7e262d904b17022dbf769a4ffa5af69cf9f" translate="yes" xml:space="preserve">
          <source>X509::Attribute#oid=</source>
          <target state="translated">X509::Attribute#oid=</target>
        </trans-unit>
        <trans-unit id="335a21f80e1a7c329594a9077a23cd5627f4130e" translate="yes" xml:space="preserve">
          <source>X509::Attribute#to_der</source>
          <target state="translated">X509::Attribute#to_der</target>
        </trans-unit>
        <trans-unit id="9a45c5123303ffd5dc67c2ce83e30632676e39f3" translate="yes" xml:space="preserve">
          <source>X509::Attribute#value</source>
          <target state="translated">X509::Attribute#value</target>
        </trans-unit>
        <trans-unit id="0606240e4c9615125a2bb5d189e5bd8eecc1f08c" translate="yes" xml:space="preserve">
          <source>X509::Attribute#value=</source>
          <target state="translated">X509::Attribute#value=</target>
        </trans-unit>
        <trans-unit id="e3913dbb2d58b5cbc593adff2e3c2ba3fd0537f1" translate="yes" xml:space="preserve">
          <source>X509::Attribute::new</source>
          <target state="translated">X509::Attribute::new</target>
        </trans-unit>
        <trans-unit id="84cff1e52873cadd5fb2ebf21baef34e37fa4479" translate="yes" xml:space="preserve">
          <source>X509::CRL</source>
          <target state="translated">X509::CRL</target>
        </trans-unit>
        <trans-unit id="fd30aa8bed6790ecbcadc34169c6427768e0f69a" translate="yes" xml:space="preserve">
          <source>X509::CRL#==</source>
          <target state="translated">X509::CRL#==</target>
        </trans-unit>
        <trans-unit id="3cb60f5963819c7860d84edd8c90ee9042bd2de6" translate="yes" xml:space="preserve">
          <source>X509::CRL#add_extension</source>
          <target state="translated">X509::CRL#add_extension</target>
        </trans-unit>
        <trans-unit id="9aa1974cb18fe0e7ba7a209e4a531513ed1c68fe" translate="yes" xml:space="preserve">
          <source>X509::CRL#add_revoked</source>
          <target state="translated">X509::CRL#add_revoked</target>
        </trans-unit>
        <trans-unit id="a48867479e72e7a7de1993760e028fe6290e3853" translate="yes" xml:space="preserve">
          <source>X509::CRL#extensions</source>
          <target state="translated">X509::CRL#extensions</target>
        </trans-unit>
        <trans-unit id="06e402bd4b33f2b37c6c8d5be647224318380f00" translate="yes" xml:space="preserve">
          <source>X509::CRL#extensions=</source>
          <target state="translated">X509::CRL#extensions=</target>
        </trans-unit>
        <trans-unit id="c46158b241acbdd2051f453c171967d19f7fd36e" translate="yes" xml:space="preserve">
          <source>X509::CRL#initialize_copy</source>
          <target state="translated">X509::CRL#initialize_copy</target>
        </trans-unit>
        <trans-unit id="b641c1c8919b9ba984a717032cdd83b530f01047" translate="yes" xml:space="preserve">
          <source>X509::CRL#issuer</source>
          <target state="translated">X509::CRL#issuer</target>
        </trans-unit>
        <trans-unit id="f700c1821ecca83aad379e4238afea39816035f6" translate="yes" xml:space="preserve">
          <source>X509::CRL#issuer=</source>
          <target state="translated">X509::CRL#issuer=</target>
        </trans-unit>
        <trans-unit id="6fc24bb6cf15fd38415e3013a7e503b866ca6bf7" translate="yes" xml:space="preserve">
          <source>X509::CRL#last_update</source>
          <target state="translated">X509::CRL#last_update</target>
        </trans-unit>
        <trans-unit id="9c76a9d11aa9b512eb0335354f01067aeddcfdd3" translate="yes" xml:space="preserve">
          <source>X509::CRL#last_update=</source>
          <target state="translated">X509::CRL#last_update=</target>
        </trans-unit>
        <trans-unit id="f31c189737aa544fc504a5515d26dfdb5a003908" translate="yes" xml:space="preserve">
          <source>X509::CRL#next_update</source>
          <target state="translated">X509::CRL#next_update</target>
        </trans-unit>
        <trans-unit id="5ea07a41ca9cda72f56195449197fb9371de99b6" translate="yes" xml:space="preserve">
          <source>X509::CRL#next_update=</source>
          <target state="translated">X509::CRL#next_update=</target>
        </trans-unit>
        <trans-unit id="f7cbcdd14234bb5bbd051fb082557b6f5aa45fc5" translate="yes" xml:space="preserve">
          <source>X509::CRL#revoked</source>
          <target state="translated">X509::CRL#revoked</target>
        </trans-unit>
        <trans-unit id="56275dd754b6cd5f2e166cf029c96c8ed98069f5" translate="yes" xml:space="preserve">
          <source>X509::CRL#revoked=</source>
          <target state="translated">X509::CRL#revoked=</target>
        </trans-unit>
        <trans-unit id="a740fed48630034b5e49d276d80b9bef6f1ed787" translate="yes" xml:space="preserve">
          <source>X509::CRL#sign</source>
          <target state="translated">X509::CRL#sign</target>
        </trans-unit>
        <trans-unit id="47b80bbeca40d8befb8ba8a7d8f5149c0e4f6106" translate="yes" xml:space="preserve">
          <source>X509::CRL#signature_algorithm</source>
          <target state="translated">X509::CRL#signature_algorithm</target>
        </trans-unit>
        <trans-unit id="18429c647b2f5e228018f8ac01f5c7bee7e9302c" translate="yes" xml:space="preserve">
          <source>X509::CRL#to_der</source>
          <target state="translated">X509::CRL#to_der</target>
        </trans-unit>
        <trans-unit id="61a9cd81f0d0e4068508906609696ddc6d0043d5" translate="yes" xml:space="preserve">
          <source>X509::CRL#to_pem</source>
          <target state="translated">X509::CRL#to_pem</target>
        </trans-unit>
        <trans-unit id="bc4af30cecdebbb3ee097760e6d3d2bdc350ca82" translate="yes" xml:space="preserve">
          <source>X509::CRL#to_s</source>
          <target state="translated">X509::CRL#to_s</target>
        </trans-unit>
        <trans-unit id="58e8948ad704a5a57f8d33732d6b1b74117f274c" translate="yes" xml:space="preserve">
          <source>X509::CRL#to_text</source>
          <target state="translated">X509::CRL#to_text</target>
        </trans-unit>
        <trans-unit id="3496bbe59d9d58ea42847f955b4ab7249e28984d" translate="yes" xml:space="preserve">
          <source>X509::CRL#verify</source>
          <target state="translated">X509::CRL#verify</target>
        </trans-unit>
        <trans-unit id="ea35ae299043470f3563c20dce5982462f257e32" translate="yes" xml:space="preserve">
          <source>X509::CRL#version=</source>
          <target state="translated">X509::CRL#version=</target>
        </trans-unit>
        <trans-unit id="3f6f83dc0d35d6b2a31b503300d763d5b2041cfe" translate="yes" xml:space="preserve">
          <source>X509::CRL::new</source>
          <target state="translated">X509::CRL::new</target>
        </trans-unit>
        <trans-unit id="31077e3b42db5521a8466c85e7e7f58345a53c6d" translate="yes" xml:space="preserve">
          <source>X509::Certificate</source>
          <target state="translated">X509::Certificate</target>
        </trans-unit>
        <trans-unit id="995ee4b87eb3e73da86f64944f63d91e0fec9e9f" translate="yes" xml:space="preserve">
          <source>X509::Certificate#==</source>
          <target state="translated">X509::Certificate#==</target>
        </trans-unit>
        <trans-unit id="4649824d15aaf83b6029995da083f49472b03a8b" translate="yes" xml:space="preserve">
          <source>X509::Certificate#add_extension</source>
          <target state="translated">X509::Certificate#add_extension</target>
        </trans-unit>
        <trans-unit id="34aea6b58f3c2efe7f7f5683ad8510a30c81af89" translate="yes" xml:space="preserve">
          <source>X509::Certificate#check_private_key</source>
          <target state="translated">X509::Certificate#check_private_key</target>
        </trans-unit>
        <trans-unit id="7fff74528b2d17d96eb38fadbb8944d3dd87d9d3" translate="yes" xml:space="preserve">
          <source>X509::Certificate#extensions</source>
          <target state="translated">X509::Certificate#extensions</target>
        </trans-unit>
        <trans-unit id="091cf845d1ee4a1086c617de8b421d0358e6719d" translate="yes" xml:space="preserve">
          <source>X509::Certificate#extensions=</source>
          <target state="translated">X509::Certificate#extensions=</target>
        </trans-unit>
        <trans-unit id="10e70a9a84a5c63468f107bde7a818f5b951b5ff" translate="yes" xml:space="preserve">
          <source>X509::Certificate#initialize_copy</source>
          <target state="translated">X509::Certificate#initialize_copy</target>
        </trans-unit>
        <trans-unit id="442b5aa2a63408e8a38f7a4d5e443a539d02490c" translate="yes" xml:space="preserve">
          <source>X509::Certificate#inspect</source>
          <target state="translated">X509::Certificate#inspect</target>
        </trans-unit>
        <trans-unit id="52a00e93f4e0286682cdcd4fd2a3e595ee4c6ff0" translate="yes" xml:space="preserve">
          <source>X509::Certificate#issuer</source>
          <target state="translated">X509::Certificate#issuer</target>
        </trans-unit>
        <trans-unit id="e08e8f4bde11fa192ed4907cd40bbf12a3781b4e" translate="yes" xml:space="preserve">
          <source>X509::Certificate#issuer=</source>
          <target state="translated">X509::Certificate#issuer=</target>
        </trans-unit>
        <trans-unit id="01010c3e16c7d91a3c02d10ce21d06b397163665" translate="yes" xml:space="preserve">
          <source>X509::Certificate#not_after</source>
          <target state="translated">X509::Certificate#not_after</target>
        </trans-unit>
        <trans-unit id="efea9f7f65ee7852adb13e22a8fb5a574a56bb43" translate="yes" xml:space="preserve">
          <source>X509::Certificate#not_after=</source>
          <target state="translated">X509::Certificate#not_after=</target>
        </trans-unit>
        <trans-unit id="c81fad3ac5665d9a2506544d262affe49ee85aaa" translate="yes" xml:space="preserve">
          <source>X509::Certificate#not_before</source>
          <target state="translated">X509::Certificate#not_before</target>
        </trans-unit>
        <trans-unit id="9cb87f649f24b290bac4617ac024a773ed410c11" translate="yes" xml:space="preserve">
          <source>X509::Certificate#not_before=</source>
          <target state="translated">X509::Certificate#not_before=</target>
        </trans-unit>
        <trans-unit id="e54abb7e4255dff22eec384ee4a898b2be5f419e" translate="yes" xml:space="preserve">
          <source>X509::Certificate#pretty_print</source>
          <target state="translated">X509::Certificate#pretty_print</target>
        </trans-unit>
        <trans-unit id="fcf49fcb8c7137ed22a42c9d43691b7dedf92022" translate="yes" xml:space="preserve">
          <source>X509::Certificate#public_key</source>
          <target state="translated">X509::Certificate#public_key</target>
        </trans-unit>
        <trans-unit id="26e3e383dc4d9752a2b30129a34ac573806a4925" translate="yes" xml:space="preserve">
          <source>X509::Certificate#public_key=</source>
          <target state="translated">X509::Certificate#public_key=</target>
        </trans-unit>
        <trans-unit id="80b11a565e0beb863d3195057d045b30f5dd343e" translate="yes" xml:space="preserve">
          <source>X509::Certificate#serial</source>
          <target state="translated">X509::Certificate#serial</target>
        </trans-unit>
        <trans-unit id="2892f2d3eb2eaea6390bfeb06b3f6134d0f06e4a" translate="yes" xml:space="preserve">
          <source>X509::Certificate#serial=</source>
          <target state="translated">X509::Certificate#serial=</target>
        </trans-unit>
        <trans-unit id="522c46f9879bfcc08956c31a473b6b21ccb35efe" translate="yes" xml:space="preserve">
          <source>X509::Certificate#sign</source>
          <target state="translated">X509::Certificate#sign</target>
        </trans-unit>
        <trans-unit id="641efc5a691a6a0e9f1b6e4205bf3b5f2ec02546" translate="yes" xml:space="preserve">
          <source>X509::Certificate#signature_algorithm</source>
          <target state="translated">X509::Certificate#signature_algorithm</target>
        </trans-unit>
        <trans-unit id="198becd730c5974fc217f73f9ef972588915232d" translate="yes" xml:space="preserve">
          <source>X509::Certificate#subject</source>
          <target state="translated">X509::Certificate#subject</target>
        </trans-unit>
        <trans-unit id="71e5651505df7407086d6168e2d88855b1a19c2d" translate="yes" xml:space="preserve">
          <source>X509::Certificate#subject=</source>
          <target state="translated">X509::Certificate#subject=</target>
        </trans-unit>
        <trans-unit id="d4b4671ea0f23b657668114d295dc1325a2a1e89" translate="yes" xml:space="preserve">
          <source>X509::Certificate#to_der</source>
          <target state="translated">X509::Certificate#to_der</target>
        </trans-unit>
        <trans-unit id="5702b951b7b24890c7bdd66d51c9251dd617193c" translate="yes" xml:space="preserve">
          <source>X509::Certificate#to_pem</source>
          <target state="translated">X509::Certificate#to_pem</target>
        </trans-unit>
        <trans-unit id="343afaae4809eabbaf45fe507e6d879250b44403" translate="yes" xml:space="preserve">
          <source>X509::Certificate#to_s</source>
          <target state="translated">X509::Certificate#to_s</target>
        </trans-unit>
        <trans-unit id="e94c80e6cbaaa1ca567abfd7ad0119ce565cd3cf" translate="yes" xml:space="preserve">
          <source>X509::Certificate#to_text</source>
          <target state="translated">X509::Certificate#to_text</target>
        </trans-unit>
        <trans-unit id="50648ad6a16f2374b5653ce7f8ab98f0f162d985" translate="yes" xml:space="preserve">
          <source>X509::Certificate#verify</source>
          <target state="translated">X509::Certificate#verify</target>
        </trans-unit>
        <trans-unit id="e83af42149038525a400fd39e9fd7724b04e4351" translate="yes" xml:space="preserve">
          <source>X509::Certificate#version=</source>
          <target state="translated">X509::Certificate#version=</target>
        </trans-unit>
        <trans-unit id="745c3ab45da9505d610f60ddd9415cadd78da44e" translate="yes" xml:space="preserve">
          <source>X509::Certificate::new</source>
          <target state="translated">X509::Certificate::new</target>
        </trans-unit>
        <trans-unit id="c3b177924ef17eb7d8cdce8c69a4318380d865f8" translate="yes" xml:space="preserve">
          <source>X509::Extension</source>
          <target state="translated">X509::Extension</target>
        </trans-unit>
        <trans-unit id="f42473ec715d82f7509dc982c3ec04651432d63d" translate="yes" xml:space="preserve">
          <source>X509::Extension#==</source>
          <target state="translated">X509::Extension#==</target>
        </trans-unit>
        <trans-unit id="e40b6cce16c47caeb75b3b112cf3e9635a9c63b3" translate="yes" xml:space="preserve">
          <source>X509::Extension#critical=</source>
          <target state="translated">X509::Extension#critical=</target>
        </trans-unit>
        <trans-unit id="a966153658ab68dca7e42f5dbbe55f9655b6118a" translate="yes" xml:space="preserve">
          <source>X509::Extension#critical?</source>
          <target state="translated">X509::Extension#critical?</target>
        </trans-unit>
        <trans-unit id="09a26c4928cb07416586c7a7aad0d0ba76215853" translate="yes" xml:space="preserve">
          <source>X509::Extension#initialize_copy</source>
          <target state="translated">X509::Extension#initialize_copy</target>
        </trans-unit>
        <trans-unit id="2471ed1b72d82a0d7bb9e95b6c9c79d1427a37e4" translate="yes" xml:space="preserve">
          <source>X509::Extension#oid</source>
          <target state="translated">X509::Extension#oid</target>
        </trans-unit>
        <trans-unit id="b81407f4b49c6e08567ba785863f2ffe47bd1578" translate="yes" xml:space="preserve">
          <source>X509::Extension#oid=</source>
          <target state="translated">X509::Extension#oid=</target>
        </trans-unit>
        <trans-unit id="1c363d63eb6b416e2fa46a08673a21672d9b108e" translate="yes" xml:space="preserve">
          <source>X509::Extension#to_a</source>
          <target state="translated">X509::Extension#to_a</target>
        </trans-unit>
        <trans-unit id="87b336861b4f963aeb650f9eb7df1b2931cfc31e" translate="yes" xml:space="preserve">
          <source>X509::Extension#to_der</source>
          <target state="translated">X509::Extension#to_der</target>
        </trans-unit>
        <trans-unit id="6d3b9faf29069613dde9df8dd468fd84478cc72d" translate="yes" xml:space="preserve">
          <source>X509::Extension#to_h</source>
          <target state="translated">X509::Extension#to_h</target>
        </trans-unit>
        <trans-unit id="232b5d8a9c28adcc94f75e2a501be3439c0008a9" translate="yes" xml:space="preserve">
          <source>X509::Extension#to_s</source>
          <target state="translated">X509::Extension#to_s</target>
        </trans-unit>
        <trans-unit id="05627fc6b7cfbcbc19ffcd07360ca6f6499613db" translate="yes" xml:space="preserve">
          <source>X509::Extension#value</source>
          <target state="translated">X509::Extension#value</target>
        </trans-unit>
        <trans-unit id="5232eee1e8a8259928f3492b056198ae630c66ca" translate="yes" xml:space="preserve">
          <source>X509::Extension#value=</source>
          <target state="translated">X509::Extension#value=</target>
        </trans-unit>
        <trans-unit id="a0989169006b862600da5c2f60a29308b30ae23e" translate="yes" xml:space="preserve">
          <source>X509::Extension::new</source>
          <target state="translated">X509::Extension::new</target>
        </trans-unit>
        <trans-unit id="c3e0df876491c27982dda1a2f109c6dbc278c783" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory</source>
          <target state="translated">X509::ExtensionFactory</target>
        </trans-unit>
        <trans-unit id="eb69da4fda72d39f3f50f569622abc531911d6d5" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#config</source>
          <target state="translated">X509::ExtensionFactory#config</target>
        </trans-unit>
        <trans-unit id="c9f330a474f68acaca38ed6139387cdf9237672d" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#create_ext</source>
          <target state="translated">X509::ExtensionFactory#create_ext</target>
        </trans-unit>
        <trans-unit id="570a9e28b57a1981c4d7b88a54d660b3b766c59f" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#create_ext_from_array</source>
          <target state="translated">X509::ExtensionFactory#create_ext_from_array</target>
        </trans-unit>
        <trans-unit id="22eab188b63aad193333525afcb9c2b000093a55" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#create_ext_from_hash</source>
          <target state="translated">X509::ExtensionFactory#create_ext_from_hash</target>
        </trans-unit>
        <trans-unit id="744eda68da21816efbe38b3463e71c3a1daa0a5b" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#create_ext_from_string</source>
          <target state="translated">X509::ExtensionFactory#create_ext_from_string</target>
        </trans-unit>
        <trans-unit id="9b301ce7fdfcce9577a145d32c5077722ae001e6" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#create_extension</source>
          <target state="translated">X509::ExtensionFactory#create_extension</target>
        </trans-unit>
        <trans-unit id="0658f371d47f57f61b068cd60ea035290b351def" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#crl</source>
          <target state="translated">X509::ExtensionFactory#crl</target>
        </trans-unit>
        <trans-unit id="11cd0e95615b3c66d71ee692a3eec58751ef79af" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#crl=</source>
          <target state="translated">X509::ExtensionFactory#crl=</target>
        </trans-unit>
        <trans-unit id="a1095391dfe5f39b2fb16376c69d556fe31e6c3a" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#issuer_certificate</source>
          <target state="translated">X509::ExtensionFactory#issuer_certificate</target>
        </trans-unit>
        <trans-unit id="18e79037884044c445cc6d72032b040f1fd53ee3" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#issuer_certificate=</source>
          <target state="translated">X509::ExtensionFactory#issuer_certificate=</target>
        </trans-unit>
        <trans-unit id="4e06b3c7d6bb4f578c8020fd2b624cc5e1ec2321" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#subject_certificate</source>
          <target state="translated">X509::ExtensionFactory#subject_certificate</target>
        </trans-unit>
        <trans-unit id="13702e5df3882f56dc3427de9ecf6e412378146a" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#subject_certificate=</source>
          <target state="translated">X509::ExtensionFactory#subject_certificate=</target>
        </trans-unit>
        <trans-unit id="9d987f902329e248d0132f7032492c3065723825" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#subject_request</source>
          <target state="translated">X509::ExtensionFactory#subject_request</target>
        </trans-unit>
        <trans-unit id="4dc15fba970f1c859cc275215c2ba967c1c4b4e8" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory#subject_request=</source>
          <target state="translated">X509::ExtensionFactory#subject_request=</target>
        </trans-unit>
        <trans-unit id="15b00e3ce6d614b77a8423bb4e79f8cb0f35b207" translate="yes" xml:space="preserve">
          <source>X509::ExtensionFactory::new</source>
          <target state="translated">X509::ExtensionFactory::new</target>
        </trans-unit>
        <trans-unit id="391b39565b797a8632b86abc1aabeaee732c42ad" translate="yes" xml:space="preserve">
          <source>X509::Name</source>
          <target state="translated">X509::Name</target>
        </trans-unit>
        <trans-unit id="b36aac77960bb664571e4993d627d65fdac3bc88" translate="yes" xml:space="preserve">
          <source>X509::Name#&amp;lt;=&amp;gt;</source>
          <target state="translated">X509::Name#&amp;lt;=&amp;gt;</target>
        </trans-unit>
        <trans-unit id="eee60a19e00d39049a44b9a315b67e584cc67edb" translate="yes" xml:space="preserve">
          <source>X509::Name#add_entry</source>
          <target state="translated">X509::Name#add_entry</target>
        </trans-unit>
        <trans-unit id="24f4d68cee3c6d54b744cd98dcceb8d1d2156a80" translate="yes" xml:space="preserve">
          <source>X509::Name#cmp</source>
          <target state="translated">X509::Name#cmp</target>
        </trans-unit>
        <trans-unit id="322c333052fd1d18f429fa80cd50f49530ee536c" translate="yes" xml:space="preserve">
          <source>X509::Name#eql?</source>
          <target state="translated">X509::Name#eql?</target>
        </trans-unit>
        <trans-unit id="adf4fd5c3521a4199a0a4101185b3a34c99938e9" translate="yes" xml:space="preserve">
          <source>X509::Name#hash</source>
          <target state="translated">X509::Name#hash</target>
        </trans-unit>
        <trans-unit id="49431152956366efa495107a2ad863c7d39dd289" translate="yes" xml:space="preserve">
          <source>X509::Name#hash_old</source>
          <target state="translated">X509::Name#hash_old</target>
        </trans-unit>
        <trans-unit id="3ae07ef82af9a1c8e746a1ec1a2da803b9405591" translate="yes" xml:space="preserve">
          <source>X509::Name#initialize_copy</source>
          <target state="translated">X509::Name#initialize_copy</target>
        </trans-unit>
        <trans-unit id="fee1c16a26b9481bcc15fc8c87f67a5ae3c619be" translate="yes" xml:space="preserve">
          <source>X509::Name#pretty_print</source>
          <target state="translated">X509::Name#pretty_print</target>
        </trans-unit>
        <trans-unit id="9830482a0817c78f50896263edfdb5200841b590" translate="yes" xml:space="preserve">
          <source>X509::Name#to_a</source>
          <target state="translated">X509::Name#to_a</target>
        </trans-unit>
        <trans-unit id="26dc587044ad28d059605a80e95dc365e5d29fd0" translate="yes" xml:space="preserve">
          <source>X509::Name#to_der</source>
          <target state="translated">X509::Name#to_der</target>
        </trans-unit>
        <trans-unit id="e250d3b6ad28255fe2f1f62c17dc87c53795f839" translate="yes" xml:space="preserve">
          <source>X509::Name#to_s</source>
          <target state="translated">X509::Name#to_s</target>
        </trans-unit>
        <trans-unit id="eba0ac23bedbb0e2e7bdd14ceed1b42635dd700a" translate="yes" xml:space="preserve">
          <source>X509::Name#to_utf8</source>
          <target state="translated">X509::Name#to_utf8</target>
        </trans-unit>
        <trans-unit id="dd91bf9849c3fb68018024ca8275a7b23f29e619" translate="yes" xml:space="preserve">
          <source>X509::Name.new &amp;rarr; name &lt;a&gt;Show source&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dd70357660cdf252fad6b771d54f4a3844fb8ab" translate="yes" xml:space="preserve">
          <source>X509::Name.new(der) &amp;rarr; name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67558053a7c497a5c9b490191e77cf411c35a478" translate="yes" xml:space="preserve">
          <source>X509::Name.new(distinguished_name) &amp;rarr; name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c00a066f5023e3733274c472b1a2f96b27147a9f" translate="yes" xml:space="preserve">
          <source>X509::Name.new(distinguished_name, template) &amp;rarr; name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7dd240aaa34649449aa5f25d4ab71cd4caddb83" translate="yes" xml:space="preserve">
          <source>X509::Name::RFC2253DN</source>
          <target state="translated">X509::Name::RFC2253DN</target>
        </trans-unit>
        <trans-unit id="1b43ab6fb2ea9b174a783c4d0c3398fb8c8a7a99" translate="yes" xml:space="preserve">
          <source>X509::Name::RFC2253DN#expand_hexstring</source>
          <target state="translated">X509::Name::RFC2253DN#expand_hexstring</target>
        </trans-unit>
        <trans-unit id="6a96d6b1a0e07f152adef054b581b279c0718766" translate="yes" xml:space="preserve">
          <source>X509::Name::RFC2253DN#expand_pair</source>
          <target state="translated">X509::Name::RFC2253DN#expand_pair</target>
        </trans-unit>
        <trans-unit id="bb7d24c09b8407f752b20ba746edd60b22887db3" translate="yes" xml:space="preserve">
          <source>X509::Name::RFC2253DN#expand_value</source>
          <target state="translated">X509::Name::RFC2253DN#expand_value</target>
        </trans-unit>
        <trans-unit id="6c60d9fbce096028ff8d0e56d36ebb8a6b9314c9" translate="yes" xml:space="preserve">
          <source>X509::Name::RFC2253DN#scan</source>
          <target state="translated">X509::Name::RFC2253DN#scan</target>
        </trans-unit>
        <trans-unit id="d05747a86cf55d2de9b69b92adc19c433cc88cb3" translate="yes" xml:space="preserve">
          <source>X509::Name::new</source>
          <target state="translated">X509::Name::new</target>
        </trans-unit>
        <trans-unit id="543b5d93c239e28ab1441e39871f9ed03ff7acef" translate="yes" xml:space="preserve">
          <source>X509::Name::parse</source>
          <target state="translated">X509::Name::parse</target>
        </trans-unit>
        <trans-unit id="e42bc1d900c60c969754f3a36234cb83da7acb55" translate="yes" xml:space="preserve">
          <source>X509::Name::parse_openssl</source>
          <target state="translated">X509::Name::parse_openssl</target>
        </trans-unit>
        <trans-unit id="bfd0afa8a004e6560a63d6e10d1382dd6ee41274" translate="yes" xml:space="preserve">
          <source>X509::Name::parse_rfc2253</source>
          <target state="translated">X509::Name::parse_rfc2253</target>
        </trans-unit>
        <trans-unit id="9e3bc18d40a273d908d2bff3edaf16a10ae4a580" translate="yes" xml:space="preserve">
          <source>X509::PURPOSE_ANY</source>
          <target state="translated">X509::PURPOSE_ANY</target>
        </trans-unit>
        <trans-unit id="e4e2c21510b38d5246c17556c9b31d16653ccd7f" translate="yes" xml:space="preserve">
          <source>X509::PURPOSE_CRL_SIGN</source>
          <target state="translated">X509::PURPOSE_CRL_SIGN</target>
        </trans-unit>
        <trans-unit id="f7420702399d612d83590c342096fa271ed0d27c" translate="yes" xml:space="preserve">
          <source>X509::PURPOSE_NS_SSL_SERVER</source>
          <target state="translated">X509::PURPOSE_NS_SSL_SERVER</target>
        </trans-unit>
        <trans-unit id="54bb6bb2bd8e9c21b60794700e517ec44eb7993f" translate="yes" xml:space="preserve">
          <source>X509::PURPOSE_OCSP_HELPER</source>
          <target state="translated">X509::PURPOSE_OCSP_HELPER</target>
        </trans-unit>
        <trans-unit id="905da11e9968e35320a6cabf1d7a6f31f20ba198" translate="yes" xml:space="preserve">
          <source>X509::PURPOSE_SMIME_ENCRYPT</source>
          <target state="translated">X509::PURPOSE_SMIME_ENCRYPT</target>
        </trans-unit>
        <trans-unit id="02d0f23910c14cf8ed7c60280249ec18bcd85354" translate="yes" xml:space="preserve">
          <source>X509::PURPOSE_SMIME_SIGN</source>
          <target state="translated">X509::PURPOSE_SMIME_SIGN</target>
        </trans-unit>
        <trans-unit id="4b2eed3ad1d1e71277dd4082cae8bb3738c85ffe" translate="yes" xml:space="preserve">
          <source>X509::PURPOSE_SSL_CLIENT</source>
          <target state="translated">X509::PURPOSE_SSL_CLIENT</target>
        </trans-unit>
        <trans-unit id="403593dfa560e0ca2c73cd8e1d8c6d5496155315" translate="yes" xml:space="preserve">
          <source>X509::PURPOSE_SSL_SERVER</source>
          <target state="translated">X509::PURPOSE_SSL_SERVER</target>
        </trans-unit>
        <trans-unit id="4805e6e33c703d306ee5301fee454fe73230d731" translate="yes" xml:space="preserve">
          <source>X509::PURPOSE_TIMESTAMP_SIGN</source>
          <target state="translated">X509::PURPOSE_TIMESTAMP_SIGN</target>
        </trans-unit>
        <trans-unit id="3f94c5407717b0979aa70803737d2d1deec4f1c9" translate="yes" xml:space="preserve">
          <source>X509::Request</source>
          <target state="translated">X509::Request</target>
        </trans-unit>
        <trans-unit id="e58a9ec6cf97399a1e18aacb96faf78b88421db9" translate="yes" xml:space="preserve">
          <source>X509::Request#==</source>
          <target state="translated">X509::Request#==</target>
        </trans-unit>
        <trans-unit id="509d121aea790368d84663d221358c8766e2670a" translate="yes" xml:space="preserve">
          <source>X509::Request#add_attribute</source>
          <target state="translated">X509::Request#add_attribute</target>
        </trans-unit>
        <trans-unit id="94483a6b97dc1c79ea4fb4763b8c671189bb5e84" translate="yes" xml:space="preserve">
          <source>X509::Request#attributes</source>
          <target state="translated">X509::Request#attributes</target>
        </trans-unit>
        <trans-unit id="6af71e053a0527bd5c5596adcc526c2dbfaaf5c6" translate="yes" xml:space="preserve">
          <source>X509::Request#attributes=</source>
          <target state="translated">X509::Request#attributes=</target>
        </trans-unit>
        <trans-unit id="004e2abcabaf0d2b58c6903f893d4d116e360432" translate="yes" xml:space="preserve">
          <source>X509::Request#initialize_copy</source>
          <target state="translated">X509::Request#initialize_copy</target>
        </trans-unit>
        <trans-unit id="4a03b4bd50b77a18087b6840c71f2bc88f3a1b38" translate="yes" xml:space="preserve">
          <source>X509::Request#public_key</source>
          <target state="translated">X509::Request#public_key</target>
        </trans-unit>
        <trans-unit id="9716310991e0ee338e9de8e7085f1205f6318bad" translate="yes" xml:space="preserve">
          <source>X509::Request#public_key=</source>
          <target state="translated">X509::Request#public_key=</target>
        </trans-unit>
        <trans-unit id="da3f337e876db0155d6663a6fa9bd0b9f7f3bc4d" translate="yes" xml:space="preserve">
          <source>X509::Request#sign</source>
          <target state="translated">X509::Request#sign</target>
        </trans-unit>
        <trans-unit id="471b7a3f5f1864c6be6ab8a595819c49fd428149" translate="yes" xml:space="preserve">
          <source>X509::Request#signature_algorithm</source>
          <target state="translated">X509::Request#signature_algorithm</target>
        </trans-unit>
        <trans-unit id="15423e209090be0113e1548663f28879b8dda563" translate="yes" xml:space="preserve">
          <source>X509::Request#subject</source>
          <target state="translated">X509::Request#subject</target>
        </trans-unit>
        <trans-unit id="a91c5b0a51d760dce2186b3d328e13a002ce54f1" translate="yes" xml:space="preserve">
          <source>X509::Request#subject=</source>
          <target state="translated">X509::Request#subject=</target>
        </trans-unit>
        <trans-unit id="2594c8d62dff617ba64ad4232b6f83adf4137dab" translate="yes" xml:space="preserve">
          <source>X509::Request#to_der</source>
          <target state="translated">X509::Request#to_der</target>
        </trans-unit>
        <trans-unit id="e79bb49f8a8d9bf9551cdefd267894a3e174a61a" translate="yes" xml:space="preserve">
          <source>X509::Request#to_pem</source>
          <target state="translated">X509::Request#to_pem</target>
        </trans-unit>
        <trans-unit id="5a8005a1a5cf8c681473d717daa8dc0f3c62dff7" translate="yes" xml:space="preserve">
          <source>X509::Request#to_s</source>
          <target state="translated">X509::Request#to_s</target>
        </trans-unit>
        <trans-unit id="95f8e2926e484da84f9b485cfece70d5315bac68" translate="yes" xml:space="preserve">
          <source>X509::Request#to_text</source>
          <target state="translated">X509::Request#to_text</target>
        </trans-unit>
        <trans-unit id="c20c659b0d095f5a72faa00a223bd2f7d1a6a4a5" translate="yes" xml:space="preserve">
          <source>X509::Request#verify</source>
          <target state="translated">X509::Request#verify</target>
        </trans-unit>
        <trans-unit id="9d4636d891c4c1eca438afd81ae3a5f4c1dfc561" translate="yes" xml:space="preserve">
          <source>X509::Request#version=</source>
          <target state="translated">X509::Request#version=</target>
        </trans-unit>
        <trans-unit id="e04776fccf8f767ae513c8f1fb6dfb53e2caf2a9" translate="yes" xml:space="preserve">
          <source>X509::Request::new</source>
          <target state="translated">X509::Request::new</target>
        </trans-unit>
        <trans-unit id="87d642a4fec0c5eb3fb692f5722ce20c837471b6" translate="yes" xml:space="preserve">
          <source>X509::Revoked</source>
          <target state="translated">X509::Revoked</target>
        </trans-unit>
        <trans-unit id="41329453d3437587f47aa5f96f6c436d96f22d26" translate="yes" xml:space="preserve">
          <source>X509::Revoked#==</source>
          <target state="translated">X509::Revoked#==</target>
        </trans-unit>
        <trans-unit id="666172c5c94273e14ec7254f7df02b6c8b6ac62a" translate="yes" xml:space="preserve">
          <source>X509::Revoked#add_extension</source>
          <target state="translated">X509::Revoked#add_extension</target>
        </trans-unit>
        <trans-unit id="0578bb2bc943166c2665e81cb2bc0d17d4b0194e" translate="yes" xml:space="preserve">
          <source>X509::Revoked#extensions</source>
          <target state="translated">X509::Revoked#extensions</target>
        </trans-unit>
        <trans-unit id="09407e62f014cd7a1ebaeeaa659d9106323e0d1c" translate="yes" xml:space="preserve">
          <source>X509::Revoked#extensions=</source>
          <target state="translated">X509::Revoked#extensions=</target>
        </trans-unit>
        <trans-unit id="c680e1266e2205e3e12f8cbc81dcf7f616800484" translate="yes" xml:space="preserve">
          <source>X509::Revoked#initialize_copy</source>
          <target state="translated">X509::Revoked#initialize_copy</target>
        </trans-unit>
        <trans-unit id="fc1fe3e0af440fbb44cdc3248776d493ef0a7e73" translate="yes" xml:space="preserve">
          <source>X509::Revoked#serial</source>
          <target state="translated">X509::Revoked#serial</target>
        </trans-unit>
        <trans-unit id="9500ae8d137edd825bbbd4f032466759e217a7cf" translate="yes" xml:space="preserve">
          <source>X509::Revoked#serial=</source>
          <target state="translated">X509::Revoked#serial=</target>
        </trans-unit>
        <trans-unit id="c5393d56bde907616278eb4407ceb659e5713903" translate="yes" xml:space="preserve">
          <source>X509::Revoked#time</source>
          <target state="translated">X509::Revoked#time</target>
        </trans-unit>
        <trans-unit id="c147193cde3005c3f2b906d9224022e530f7f91e" translate="yes" xml:space="preserve">
          <source>X509::Revoked#time=</source>
          <target state="translated">X509::Revoked#time=</target>
        </trans-unit>
        <trans-unit id="fe3c6f3d78aba3ced7f375872a128d326dde174b" translate="yes" xml:space="preserve">
          <source>X509::Revoked#to_der</source>
          <target state="translated">X509::Revoked#to_der</target>
        </trans-unit>
        <trans-unit id="1440fe947997815f39ea8bcadbc2d2d3ec18f0a0" translate="yes" xml:space="preserve">
          <source>X509::Revoked::new</source>
          <target state="translated">X509::Revoked::new</target>
        </trans-unit>
        <trans-unit id="b5758017fe1639844423909962c70d22616a3a34" translate="yes" xml:space="preserve">
          <source>X509::Store</source>
          <target state="translated">X509::Store</target>
        </trans-unit>
        <trans-unit id="8d559c2c10c985b85fd6dfb736fc38ecb60591e3" translate="yes" xml:space="preserve">
          <source>X509::Store#add_cert</source>
          <target state="translated">X509::Store#add_cert</target>
        </trans-unit>
        <trans-unit id="995d2f6069a9188d889839c747a5569b8f1d9327" translate="yes" xml:space="preserve">
          <source>X509::Store#add_crl</source>
          <target state="translated">X509::Store#add_crl</target>
        </trans-unit>
        <trans-unit id="db277e4ad6287d301555e61e5992b9ea49c3dc23" translate="yes" xml:space="preserve">
          <source>X509::Store#add_file</source>
          <target state="translated">X509::Store#add_file</target>
        </trans-unit>
        <trans-unit id="c7ae463b7dae0ea28712bb1cbf8a62075bf4ae40" translate="yes" xml:space="preserve">
          <source>X509::Store#add_path</source>
          <target state="translated">X509::Store#add_path</target>
        </trans-unit>
        <trans-unit id="92177020e5fe308133c603be5283bf800fbc97a4" translate="yes" xml:space="preserve">
          <source>X509::Store#chain</source>
          <target state="translated">X509::Store#chain</target>
        </trans-unit>
        <trans-unit id="28ecde4fa833892cfda4a9e8f75a0d6538c755fe" translate="yes" xml:space="preserve">
          <source>X509::Store#error</source>
          <target state="translated">X509::Store#error</target>
        </trans-unit>
        <trans-unit id="f209c77291c3a98834266c577a981f792ae87bac" translate="yes" xml:space="preserve">
          <source>X509::Store#error_string</source>
          <target state="translated">X509::Store#error_string</target>
        </trans-unit>
        <trans-unit id="9bdc790969d5ee49d3d7495797d9fc6213802c46" translate="yes" xml:space="preserve">
          <source>X509::Store#flags=</source>
          <target state="translated">X509::Store#flags=</target>
        </trans-unit>
        <trans-unit id="84078362866ada26ec0f0b41f8155d0d3d38c120" translate="yes" xml:space="preserve">
          <source>X509::Store#purpose=</source>
          <target state="translated">X509::Store#purpose=</target>
        </trans-unit>
        <trans-unit id="d3974bfa9d754a910aa4efaff871b589a06745e2" translate="yes" xml:space="preserve">
          <source>X509::Store#set_default_paths</source>
          <target state="translated">X509::Store#set_default_paths</target>
        </trans-unit>
        <trans-unit id="41b07f9728eb201ceecf7b99f938ebe109cc3b4d" translate="yes" xml:space="preserve">
          <source>X509::Store#time=</source>
          <target state="translated">X509::Store#time=</target>
        </trans-unit>
        <trans-unit id="2cc1887b7ccf4f3484c91b5f72626e8d6161d7fe" translate="yes" xml:space="preserve">
          <source>X509::Store#trust=</source>
          <target state="translated">X509::Store#trust=</target>
        </trans-unit>
        <trans-unit id="22217466deec42d6598c1ab62ffcfcdf55be842b" translate="yes" xml:space="preserve">
          <source>X509::Store#verify</source>
          <target state="translated">X509::Store#verify</target>
        </trans-unit>
        <trans-unit id="903e5fbe26dfed9b01c97e2570037090225803b1" translate="yes" xml:space="preserve">
          <source>X509::Store#verify_callback</source>
          <target state="translated">X509::Store#verify_callback</target>
        </trans-unit>
        <trans-unit id="007adca3cdcef6f53c9b18ad909fe0a0fb6fcbcf" translate="yes" xml:space="preserve">
          <source>X509::Store#verify_callback=</source>
          <target state="translated">X509::Store#verify_callback=</target>
        </trans-unit>
        <trans-unit id="304a422afc36dfa8c838e20186b5b8761768f5fc" translate="yes" xml:space="preserve">
          <source>X509::Store.new &amp;rarr; store &lt;a&gt;Show source&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f9eaf0b82bd5c197d3dff1ae017c731e3bd4898" translate="yes" xml:space="preserve">
          <source>X509::Store::new</source>
          <target state="translated">X509::Store::new</target>
        </trans-unit>
        <trans-unit id="a1453e1d9d69efa0f0698a1d85ebc5f207e3dbea" translate="yes" xml:space="preserve">
          <source>X509::StoreContext</source>
          <target state="translated">X509::StoreContext</target>
        </trans-unit>
        <trans-unit id="9996a5d5f669363c6f076813c998f76fa49fc92e" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#chain</source>
          <target state="translated">X509::StoreContext#chain</target>
        </trans-unit>
        <trans-unit id="f4dcbc03c1ca77ed7e1ec2b06ab30385dcc63027" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#cleanup</source>
          <target state="translated">X509::StoreContext#cleanup</target>
        </trans-unit>
        <trans-unit id="f6e9fd3498e895aedc5fee1ebc7676b9bedce1c2" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#current_cert</source>
          <target state="translated">X509::StoreContext#current_cert</target>
        </trans-unit>
        <trans-unit id="0b58fdd7a0a1ed71a83bfec079075633bb09a0c6" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#current_crl</source>
          <target state="translated">X509::StoreContext#current_crl</target>
        </trans-unit>
        <trans-unit id="4dcb70be572f0b9e102ef783ae8eda9b5c2c7c48" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#error</source>
          <target state="translated">X509::StoreContext#error</target>
        </trans-unit>
        <trans-unit id="3cc09e363117ba7b8811f5912833b977d717c2fa" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#error=</source>
          <target state="translated">X509::StoreContext#error=</target>
        </trans-unit>
        <trans-unit id="9366c259813c550d8286d23ba9ab9c3f0f868e24" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#error_depth</source>
          <target state="translated">X509::StoreContext#error_depth</target>
        </trans-unit>
        <trans-unit id="981bf4fc2cc56c67559f86e3729fbc14ac0e63fd" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#error_string</source>
          <target state="translated">X509::StoreContext#error_string</target>
        </trans-unit>
        <trans-unit id="fa8b4ad6b2e42f218244ac374741034b91eaddb1" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#flags=</source>
          <target state="translated">X509::StoreContext#flags=</target>
        </trans-unit>
        <trans-unit id="fa89ddb14b67d2bcc80e68c7a87e386fbf6a4df7" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#purpose=</source>
          <target state="translated">X509::StoreContext#purpose=</target>
        </trans-unit>
        <trans-unit id="5724ac1f0dc5eeef5cf1c3a994cc2c5a1268c786" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#time=</source>
          <target state="translated">X509::StoreContext#time=</target>
        </trans-unit>
        <trans-unit id="8a0abb717c6e721cd0bb276a26ef99f095cea28f" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#trust=</source>
          <target state="translated">X509::StoreContext#trust=</target>
        </trans-unit>
        <trans-unit id="27c227b416f9d045d0c1f61fc69d44ee66b73a08" translate="yes" xml:space="preserve">
          <source>X509::StoreContext#verify</source>
          <target state="translated">X509::StoreContext#verify</target>
        </trans-unit>
        <trans-unit id="6298d6612eeaa71b8cadb9e476261fc3bc891986" translate="yes" xml:space="preserve">
          <source>X509::StoreContext::new</source>
          <target state="translated">X509::StoreContext::new</target>
        </trans-unit>
        <trans-unit id="1c03b9654b2453733eea2e92dc7bd163aff77fb5" translate="yes" xml:space="preserve">
          <source>XEROX NS protocols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08554941d83e46e328635e7c212bcf1077a2d622" translate="yes" xml:space="preserve">
          <source>XML_ATTR_CONTENT_DECORATOR</source>
          <target state="translated">XML_ATTR_CONTENT_DECORATOR</target>
        </trans-unit>
        <trans-unit id="17cc9310740d3b8ae5e0b4dba4192c28f5361e45" translate="yes" xml:space="preserve">
          <source>XML_ATTR_QUOTE_DECORATOR</source>
          <target state="translated">XML_ATTR_QUOTE_DECORATOR</target>
        </trans-unit>
        <trans-unit id="707546c4e3d448dc80c2c4e02742bde08af4331c" translate="yes" xml:space="preserve">
          <source>XML_TEXT_DECORATOR</source>
          <target state="translated">XML_TEXT_DECORATOR</target>
        </trans-unit>
        <trans-unit id="d66fc2dc6bb0474656735b57774af51c3357b3d1" translate="yes" xml:space="preserve">
          <source>XNS IDP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec273728c0190901988c2bdab1126f2ae2afec5" translate="yes" xml:space="preserve">
          <source>XOR (exclusive OR)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1a55aada492d11406db66d37552a1432c52381" translate="yes" xml:space="preserve">
          <source>Xpress Transport Protocol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffbcb202b09db426bae56cf2ffb88f18594f2258" translate="yes" xml:space="preserve">
          <source>YAML</source>
          <target state="translated">YAML</target>
        </trans-unit>
        <trans-unit id="0900acd09de83408ebadb5dd11179c013f740775" translate="yes" xml:space="preserve">
          <source>YAML + &lt;a href=&quot;dbm&quot;&gt;&lt;code&gt;DBM&lt;/code&gt;&lt;/a&gt; = YDBM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ad160850853c10aaf937bee36da78f13f52599" translate="yes" xml:space="preserve">
          <source>YAML Emitting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354dbdd4802c90bf3596670b90c8e76fffd2ac88" translate="yes" xml:space="preserve">
          <source>YAML Parsing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78638045dbc01959c557cb162b7038187c297d58" translate="yes" xml:space="preserve">
          <source>YAML is a popular human readable data serialization format used by many Ruby programs for configuration and database persistence of Ruby object trees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e173e38a6b33682d1bf5a258e728ffabbb52441" translate="yes" xml:space="preserve">
          <source>YAML::DBM</source>
          <target state="translated">YAML::DBM</target>
        </trans-unit>
        <trans-unit id="34f51936222092d1cd8a4ed201d69d15e092c33a" translate="yes" xml:space="preserve">
          <source>YAML::Store</source>
          <target state="translated">YAML::Store</target>
        </trans-unit>
        <trans-unit id="be9221a8bbdf639c1ebb95cdf253f53636d6f052" translate="yes" xml:space="preserve">
          <source>YAML::Syck</source>
          <target state="translated">YAML::Syck</target>
        </trans-unit>
        <trans-unit id="ac33410759996411038b41e7a9e13f56fc2f45d2" translate="yes" xml:space="preserve">
          <source>YAMLSerializer</source>
          <target state="translated">YAMLSerializer</target>
        </trans-unit>
        <trans-unit id="0d4e7137ffecfa70a87aba9bd4845898cf2c835e" translate="yes" xml:space="preserve">
          <source>YAMLSerializer#convert_to_backward_compatible_key</source>
          <target state="translated">YAMLSerializer#convert_to_backward_compatible_key</target>
        </trans-unit>
        <trans-unit id="8bceeadb6a36d52f3dd99bed16dce0b62d43a836" translate="yes" xml:space="preserve">
          <source>YAMLSerializer#dump</source>
          <target state="translated">YAMLSerializer#dump</target>
        </trans-unit>
        <trans-unit id="22e0ed06407d20b7db6c03e3dfac6f25cb9cec95" translate="yes" xml:space="preserve">
          <source>YAMLSerializer#dump_hash</source>
          <target state="translated">YAMLSerializer#dump_hash</target>
        </trans-unit>
        <trans-unit id="04d7f5eac93874bfae40173c39e4854c03d5c5f0" translate="yes" xml:space="preserve">
          <source>YAMLSerializer#load</source>
          <target state="translated">YAMLSerializer#load</target>
        </trans-unit>
        <trans-unit id="f83a0e54478505513704d0569e61871e8b8b37a7" translate="yes" xml:space="preserve">
          <source>YELLOW</source>
          <target state="translated">YELLOW</target>
        </trans-unit>
        <trans-unit id="b54582ee48130f45773e8a75315adcea5b591629" translate="yes" xml:space="preserve">
          <source>YamlLibrarySyntaxError</source>
          <target state="translated">YamlLibrarySyntaxError</target>
        </trans-unit>
        <trans-unit id="87d89050677c716dec9c6ff6623fd0720e84ba84" translate="yes" xml:space="preserve">
          <source>YamlSyntaxError</source>
          <target state="translated">YamlSyntaxError</target>
        </trans-unit>
        <trans-unit id="68f76a9015510f07ae70c330d593845f92b2e41b" translate="yes" xml:space="preserve">
          <source>YamlSyntaxError#orig_exception</source>
          <target state="translated">YamlSyntaxError#orig_exception</target>
        </trans-unit>
        <trans-unit id="1b20aefb95809e3b76cdac1cf29621388331d49c" translate="yes" xml:space="preserve">
          <source>YamlSyntaxError::new</source>
          <target state="translated">YamlSyntaxError::new</target>
        </trans-unit>
        <trans-unit id="cf8c2932be74cdab8e273d7fd75ac8a7c562e9ca" translate="yes" xml:space="preserve">
          <source>Year which may include century, if provided</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d3e8afe3cc66ccabb58db4ab6bef160ba97647" translate="yes" xml:space="preserve">
          <source>Year without a century (00..99)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="296c3f0bd2b1424980206fde998bc8c75bb14582" translate="yes" xml:space="preserve">
          <source>Yielder</source>
          <target state="translated">Yielder</target>
        </trans-unit>
        <trans-unit id="b4ebc669ef6ff0756070804352d10c59e3716a47" translate="yes" xml:space="preserve">
          <source>Yields &lt;code&gt;self&lt;/code&gt; in non-blocking mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5afdd7a45b1e6d3acc7c55150c865ed111b05dba" translate="yes" xml:space="preserve">
          <source>Yields &lt;code&gt;self&lt;/code&gt; with disabling echo back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc82b824b911fe1147b04cbd406f107d45a62d41" translate="yes" xml:space="preserve">
          <source>Yields &lt;code&gt;self&lt;/code&gt; within cooked mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7fd738f0731992e29ad76b05150de5901072f2d" translate="yes" xml:space="preserve">
          <source>Yields &lt;code&gt;self&lt;/code&gt; within raw mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd52d01eb6dff385ed2e678d91233c83821fb10" translate="yes" xml:space="preserve">
          <source>Yields all attributes (as symbols) along with the corresponding values or returns an enumerator if no block is given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e11f2007e17c54d9bc918de1f088c26e5278d9f" translate="yes" xml:space="preserve">
          <source>Yields all elements of the matrix, starting with those of the first row, or returns an &lt;a href=&quot;enumerator&quot;&gt;&lt;code&gt;Enumerator&lt;/code&gt;&lt;/a&gt; if no block given. Elements can be restricted by passing an argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9734999ba1fe687be2d2f3255e9cd108569e7903" translate="yes" xml:space="preserve">
          <source>Yields control back to the context that resumed the fiber, passing along any arguments that were passed to it. The fiber will resume processing at this point when &lt;code&gt;resume&lt;/code&gt; is called next. Any arguments passed to the next &lt;code&gt;resume&lt;/code&gt; will be the value that this &lt;code&gt;Fiber.yield&lt;/code&gt; expression evaluates to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0fd26c0e93acc1e80f5b60b2a124bd5c8aa80f" translate="yes" xml:space="preserve">
          <source>Yields each environment variable &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ac6ab5460da0242449528a547e44c1173f63043" translate="yes" xml:space="preserve">
          <source>Yields each environment variable &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0b5a21dff28b89318ea98475581bf7cc83d5e46" translate="yes" xml:space="preserve">
          <source>Yields each environment variable name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836c5f5a0a387b5d29089c67fd1a350120b06c49" translate="yes" xml:space="preserve">
          <source>Yields each member value from the struct to the block and returns an &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; containing the member values from the &lt;code&gt;struct&lt;/code&gt; for which the given block returns a true value (equivalent to &lt;a href=&quot;enumerable#method-i-select&quot;&gt;&lt;code&gt;Enumerable#select&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d9aee61a1af194c2d8e6630fcb74bfbc0bbdde" translate="yes" xml:space="preserve">
          <source>Yields each message to the passed-in block in turn. Equivalent to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116a5889432830e9fd0327b35e7b915581db77d6" translate="yes" xml:space="preserve">
          <source>Yields each pair of the row as header and field tuples (much like iterating over a &lt;a href=&quot;../hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;). This method returns the row for chaining.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b6fd615f1ab28a0e44d2786e40410ef47e94826" translate="yes" xml:space="preserve">
          <source>Yields each row of the data source in turn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b721f6117786acc4f76b42c3048e845d755dfae" translate="yes" xml:space="preserve">
          <source>Yields event/tuple pairs until this &lt;a href=&quot;notifytemplateentry&quot;&gt;&lt;code&gt;NotifyTemplateEntry&lt;/code&gt;&lt;/a&gt; expires.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964c79cb29c40881eb83db61d75397569a52a155" translate="yes" xml:space="preserve">
          <source>Yields self to the block and returns the result of the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5137d4512f1079622d0250ca7ea6e834a9bf8368" translate="yes" xml:space="preserve">
          <source>Yields self to the block, and then returns self. The primary purpose of this method is to &amp;ldquo;tap into&amp;rdquo; a method chain, in order to perform operations on intermediate results within the chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d6ced42397dedfc3fec8ca495d408e81f325bb4" translate="yes" xml:space="preserve">
          <source>Yields the created &lt;a href=&quot;dns&quot;&gt;&lt;code&gt;DNS&lt;/code&gt;&lt;/a&gt; resolver to the block, if given, otherwise returns it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c12d1a59b449b3f4c2baff77032eef7f79d1a292" translate="yes" xml:space="preserve">
          <source>Yields the given block with padding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d9442c2dd62a07663a121773caa8e5180d0d95" translate="yes" xml:space="preserve">
          <source>Yields the name and value of each struct member in order. If no block is given an enumerator is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fdbdc2fa102fac67731c6e2bcf23b5dd2ee8ffd" translate="yes" xml:space="preserve">
          <source>Yields the value of each struct member in order. If no block is given an enumerator is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0dc638799c4b2e119883457b510d92742be966e" translate="yes" xml:space="preserve">
          <source>Yields to a block and preserves the previous set of objects being printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20eb87e68c4682f5d0516ba95c95e6b1e91b46c0" translate="yes" xml:space="preserve">
          <source>You MUST close the &lt;a href=&quot;smtp&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; session after sending messages, by calling the &lt;a href=&quot;smtp#method-i-finish&quot;&gt;&lt;code&gt;finish&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="179c564ad4a035d9b367f93b28b136b8a33e8c6b" translate="yes" xml:space="preserve">
          <source>You can add extensions to the certificate with OpenSSL::SSL::ExtensionFactory to indicate the purpose of the certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a3f6af18047e8562cd1c2e873260beda5776f5" translate="yes" xml:space="preserve">
          <source>You can also add the method and remove it from the command list:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd43af37d80ff65c5ba157d1f6013b72bbc9649" translate="yes" xml:space="preserve">
          <source>You can also create a new time using &lt;a href=&quot;time#method-c-at&quot;&gt;&lt;code&gt;Time::at&lt;/code&gt;&lt;/a&gt; which takes the number of seconds (or fraction of seconds) since the &lt;a href=&quot;http://en.wikipedia.org/wiki/Unix_time&quot;&gt;Unix Epoch&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58401db6f8c075aaf0a5a5ef412152786ee62d42" translate="yes" xml:space="preserve">
          <source>You can also create complex object from floating-point numbers or strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75e49d139242379701550f48961e8d7b547e87af" translate="yes" xml:space="preserve">
          <source>You can also create rational objects from floating-point numbers or strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26fa29672f7a602999821f16638bdd0061f6b7ac" translate="yes" xml:space="preserve">
          <source>You can also create undefined values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cdee2d6d2533ecc03350d1d33ba49c24818b1fe" translate="yes" xml:space="preserve">
          <source>You can also do standard functions like compare two times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2753d774b655b81559b345adc37a5aab4e116112" translate="yes" xml:space="preserve">
          <source>You can also mix non-string objects in the elements as allowed in &lt;a href=&quot;array#method-i-join&quot;&gt;&lt;code&gt;Array#join&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="086bb3a846aa08f11d852216f7e1c384d1e5400a" translate="yes" xml:space="preserve">
          <source>You can also pass a &lt;code&gt;Hash&lt;/code&gt; of &lt;code&gt;options&lt;/code&gt; that you want to change, any options not present in the hash will be left unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194ebb191c25e9f8cef3c7c7c94e787f74807886" translate="yes" xml:space="preserve">
          <source>You can also pass a block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13f7e31beeeffca85752e9729f7846ece176839a" translate="yes" xml:space="preserve">
          <source>You can also pass an options hash. Under the hood, &lt;a href=&quot;tempfile&quot;&gt;&lt;code&gt;Tempfile&lt;/code&gt;&lt;/a&gt; creates the temporary file using &lt;code&gt;File.open&lt;/code&gt;. These options will be passed to &lt;code&gt;File.open&lt;/code&gt;. This is mostly useful for specifying encoding options, e.g.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de92ed6d95bd0e7e744c9754b49b07db6eed1e74" translate="yes" xml:space="preserve">
          <source>You can also supply a block to customize how the option is going to be invoked. The block receives two parameters, an instance of the current class and the klass to be invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556794128edaf73fe7a845ddafe7c49eb27da187" translate="yes" xml:space="preserve">
          <source>You can also supply the arguments, options and configuration values for the command to be invoked, if none is given, the same values used to initialize the invoker are used to initialize the invoked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc0ba09c204a3c1cd86f651e7099945068b4498" translate="yes" xml:space="preserve">
          <source>You can also terminate from a &lt;code&gt;while&lt;/code&gt; loop using &lt;code&gt;break&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8dfa5498541bf0f76cb294749014156ef28de6" translate="yes" xml:space="preserve">
          <source>You can also try &lt;a href=&quot;thread#method-c-pass&quot;&gt;&lt;code&gt;::pass&lt;/code&gt;&lt;/a&gt;, which attempts to pass execution to another thread but is dependent on the OS whether a running thread will switch or not. The same goes for &lt;a href=&quot;thread#method-i-priority&quot;&gt;&lt;code&gt;priority&lt;/code&gt;&lt;/a&gt;, which lets you hint to the thread scheduler which threads you want to take precedence when passing execution. This method is also dependent on the OS and may be ignored on some platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d1ec3a0fde41ddbd71b0af19095c70b7c54214e" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;thread#method-i-alive-3F&quot;&gt;&lt;code&gt;alive?&lt;/code&gt;&lt;/a&gt; to tell if the thread is running or sleeping, and &lt;a href=&quot;thread#method-i-stop-3F&quot;&gt;&lt;code&gt;stop?&lt;/code&gt;&lt;/a&gt; if the thread is dead or sleeping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de94648c0b8f9011001dc0e072cdb8154b67c2e7" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;time#method-c-gm&quot;&gt;&lt;code&gt;Time::gm&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;time#method-c-local&quot;&gt;&lt;code&gt;Time::local&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;time#method-c-utc&quot;&gt;&lt;code&gt;Time::utc&lt;/code&gt;&lt;/a&gt; to infer GMT, local and UTC timezones instead of using the current system setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac0dfedceec37d15ebaaabc495fa7e755280fdb" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;alias&lt;/code&gt; to alias global variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bbb29875a3c6c673a512e03227364c4dccffa62" translate="yes" xml:space="preserve">
          <source>You can also use the block form of &lt;a href=&quot;smtp#method-c-start&quot;&gt;&lt;code&gt;SMTP.start&lt;/code&gt;&lt;/a&gt;/SMTP#start. This closes the &lt;a href=&quot;smtp&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; session automatically:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268704975c41a9e3d3da2571cd1e36182062b491" translate="yes" xml:space="preserve">
          <source>You can assign multiple values on the right-hand side to multiple variables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983695c2606159acb46cca0195bd5d988084e600" translate="yes" xml:space="preserve">
          <source>You can assign the exception to a local variable by using &lt;code&gt;=&amp;gt; variable_name&lt;/code&gt; at the end of the &lt;code&gt;rescue&lt;/code&gt; line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1a641893e2cbd93a7c8dec23233d1863ff78a89" translate="yes" xml:space="preserve">
          <source>You can convert a proc or lambda to a block argument with the &lt;code&gt;&amp;amp;&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86841d056b690a86aa960824992fae7d464c8157" translate="yes" xml:space="preserve">
          <source>You can create a &lt;a href=&quot;name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; by parsing a distinguished name &lt;a href=&quot;../../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt; or by supplying the distinguished name as an &lt;a href=&quot;../../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72459fdb81806593668d227f4bc36b65b49bde0f" translate="yes" xml:space="preserve">
          <source>You can create a hash using symbol keys with the following syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba11dea81695756d88a5ae7f0d76cc33d991e789" translate="yes" xml:space="preserve">
          <source>You can create a new instance of &lt;a href=&quot;time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;time#method-c-new&quot;&gt;&lt;code&gt;Time::new&lt;/code&gt;&lt;/a&gt;. This will use the current system time. &lt;a href=&quot;time#method-c-now&quot;&gt;&lt;code&gt;Time::now&lt;/code&gt;&lt;/a&gt; is an alias for this. You can also pass parts of the time to &lt;a href=&quot;time#method-c-new&quot;&gt;&lt;code&gt;Time::new&lt;/code&gt;&lt;/a&gt; such as year, month, minute, etc. When you want to construct a time this way you must pass at least a year. If you pass the year with nothing else time will default to January 1 of that year at 00:00:00 with the current system timezone. Here are some examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5891c50b45aec85b7fb86b8eabdd3219b170b734" translate="yes" xml:space="preserve">
          <source>You can decompose (unpack or extract values from) an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; using extra parentheses in the arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8538271c7ec4ca518650f9933990928fce44f40" translate="yes" xml:space="preserve">
          <source>You can decompose an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; as part of a larger multiple assignment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf00d61b2ed92e9179ec47d7db78453398709ee4" translate="yes" xml:space="preserve">
          <source>You can define methods that will behave like assignment, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140f3ae2dde426b124ec92e56e62e5e88a15c227" translate="yes" xml:space="preserve">
          <source>You can end an expression with a &lt;code&gt;;&lt;/code&gt; (semicolon). Semicolons are most frequently used with &lt;code&gt;ruby -e&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a499bf743c58544d76b1362b1d93bccfdd538f" translate="yes" xml:space="preserve">
          <source>You can even extend regular objects with Forwardable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae096c812109d672f11ddba5af3ba3adf37ca92" translate="yes" xml:space="preserve">
          <source>You can exit the IRB session with the `exit` command. Note that exiting will resume execution where &lt;code&gt;binding.irb&lt;/code&gt; had paused it, as you can see from the output printed to standard output in this example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df604a96e91aae4b4a8b7fd5437168ad196d20ff" translate="yes" xml:space="preserve">
          <source>You can find the source for the VM instructions in &lt;code&gt;insns.def&lt;/code&gt; in the Ruby source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="560c034623d0b3e78a607e1b4a78eca2499c9ba2" translate="yes" xml:space="preserve">
          <source>You can force a method call by using empty argument parentheses as shown above or by using an explicit receiver like &lt;code&gt;self.&lt;/code&gt;. Using an explicit receiver may raise a &lt;a href=&quot;../nameerror&quot;&gt;&lt;code&gt;NameError&lt;/code&gt;&lt;/a&gt; if the method's visibility is not public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="620db623a26fb535e01e0af1860167b090e3b64a" translate="yes" xml:space="preserve">
          <source>You can force shell invocation by adding &amp;ldquo;;&amp;rdquo; to the string (because &amp;ldquo;;&amp;rdquo; is a meta character).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e01fb2b1ebbded2788d38552e2149fb125e13ebf" translate="yes" xml:space="preserve">
          <source>You can get a hash of the specific section like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4857b69fd315c698e6787cc23b9810376913e346" translate="yes" xml:space="preserve">
          <source>You can get a specific value from the config if you know the &lt;em&gt;section&lt;/em&gt; and &lt;em&gt;key&lt;/em&gt; like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bfd4e06417869986f2c827f41c23dcae9c3a87" translate="yes" xml:space="preserve">
          <source>You can get information from the parser with event-based style. Information such as abstract syntax trees or simple lexical analysis of the Ruby program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442acc0b754ae89c2afee5407be9d3f04973cd48" translate="yes" xml:space="preserve">
          <source>You can give :undefine =&amp;gt; true if you want commands the method to be undefined from the class as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe5e3fc80089bb1e9a442c2e12ac6fa8335838c" translate="yes" xml:space="preserve">
          <source>You can implicitly create an array by listing multiple values when assigning:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a085ac6664c00d9329ce3dd878e4ecf558e9510a" translate="yes" xml:space="preserve">
          <source>You can make sure to get a sorted unique &lt;a href=&quot;process/gid&quot;&gt;&lt;code&gt;GID&lt;/code&gt;&lt;/a&gt; list of the current process by this expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a3ae05122243a7954a8243adac460d40230034f" translate="yes" xml:space="preserve">
          <source>You can manipulate &lt;code&gt;ARGV&lt;/code&gt; yourself to control what &lt;code&gt;ARGF&lt;/code&gt; operates on. If you remove a file from &lt;code&gt;ARGV&lt;/code&gt;, it is ignored by &lt;code&gt;ARGF&lt;/code&gt;; if you add files to &lt;code&gt;ARGV&lt;/code&gt;, they are treated as if they were named on the command line. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f1f836219bd983fe259c6d1025b8753c257837e" translate="yes" xml:space="preserve">
          <source>You can mix several of the operators and assignment. To add 1 to an object you can write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb61c46102bfb8c7fe0b68d6f3c213370bfef332" translate="yes" xml:space="preserve">
          <source>You can nest decomposition arbitrarily:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8288d55fa472e7bbcb10ae594634c13495767f04" translate="yes" xml:space="preserve">
          <source>You can notice that the method &amp;ldquo;foo&amp;rdquo; above invokes two commands: &amp;ldquo;bar&amp;rdquo;, which belongs to the same class and &amp;ldquo;hello&amp;rdquo; which belongs to the class B.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0806ef6a902349cc1cf56f6dc54c1b6815d9341" translate="yes" xml:space="preserve">
          <source>You can now use &lt;code&gt;ARGF&lt;/code&gt; to work with a concatenation of each of these named files. For instance, &lt;code&gt;ARGF.read&lt;/code&gt; will return the contents of &lt;em&gt;file1&lt;/em&gt; followed by the contents of &lt;em&gt;file2&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407c34207a8dcccb7ee9c5c5d4a0111e3af20ba7" translate="yes" xml:space="preserve">
          <source>You can override the functionality of a superclass method by redefining the method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f31ee1166c9ef4b4ebae03dcd795e1dfc6753e" translate="yes" xml:space="preserve">
          <source>You can parse get the serialized configuration using &lt;a href=&quot;config#method-i-to_s&quot;&gt;&lt;code&gt;to_s&lt;/code&gt;&lt;/a&gt; and then parse it later:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b4c9d8ebf33ebc636d6262b31266b9ad89d417" translate="yes" xml:space="preserve">
          <source>You can pass a UTC offset:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b0a78fc6a450fb62ef2a1d88750b7f7e9534c7" translate="yes" xml:space="preserve">
          <source>You can pass several directories at a time in a list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a0d7ed2ab40b032618ca58b908ee4e31b3aab3c" translate="yes" xml:space="preserve">
          <source>You can prevent this by setting &lt;em&gt;pstore.ultra_safe = true&lt;/em&gt;. However, this results in a minor performance loss, and only works on platforms that support atomic file renames. Please consult the documentation for &lt;code&gt;ultra_safe&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce52889803bc33bdeecf31b0ff4ac5c4de2844" translate="yes" xml:space="preserve">
          <source>You can read more about the general principles on the Wikipedia page for &lt;a href=&quot;http://en.wikipedia.org/wiki/Monitor_%28synchronization%29&quot;&gt;Monitors&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cd2f70ae7059cea8277c037b2234adfcb1480c4" translate="yes" xml:space="preserve">
          <source>You can represent infinite numbers to &lt;a href=&quot;bigdecimal&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/a&gt; using the strings &lt;code&gt;'Infinity'&lt;/code&gt;, &lt;code&gt;'+Infinity'&lt;/code&gt; and &lt;code&gt;'-Infinity'&lt;/code&gt; (case-sensitive)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c233576f7692171988360ddb9b0d8dc832b6955" translate="yes" xml:space="preserve">
          <source>You can require arguments for the proc as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e2e42a78bfcf9596c3715583ba11042df25db3" translate="yes" xml:space="preserve">
          <source>You can see in the example above, the expression starts with &lt;code&gt;:program&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9631f8efea17f4ab5de87fe1ef7ccc70f57f38a4" translate="yes" xml:space="preserve">
          <source>You can see that the thread-local &lt;code&gt;:foo&lt;/code&gt; carried over into the fiber and was changed to &lt;code&gt;2&lt;/code&gt; by the end of the thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7709ebd3a60c2f23978cec7c5bf090eb76a3653a" translate="yes" xml:space="preserve">
          <source>You can set addresses as an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;. The first element of the &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; is a multicast address and the second is an inbound interface address. If the second is omitted then '0.0.0.0' is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b6f8ad586b2b22398b6cb463a4507300f0faf66" translate="yes" xml:space="preserve">
          <source>You can set the hop count (or TTL) for multicast searches using &lt;a href=&quot;ringfinger#attribute-i-multicast_hops&quot;&gt;&lt;code&gt;multicast_hops&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2242e8c3cac8a96fc47669a807de0f271917638c" translate="yes" xml:space="preserve">
          <source>You can set the value of &lt;em&gt;foo&lt;/em&gt; under the &lt;em&gt;default&lt;/em&gt; section to a new value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7875c7ec901ca861529f185967f91cb99ab67d1" translate="yes" xml:space="preserve">
          <source>You can shut down the HTTP connections when done by calling &lt;a href=&quot;persistent#method-i-shutdown&quot;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt;. You should name your &lt;a href=&quot;persistent&quot;&gt;&lt;code&gt;Bundler::Persistent::Net::HTTP::Persistent&lt;/code&gt;&lt;/a&gt; object if you intend to call this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1893ae4ae770f728a29a4c7dcd1eaba202706ac" translate="yes" xml:space="preserve">
          <source>You can splat anywhere in the right-hand side of the assignment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ebcafd99fad31201bd9fea7d8d06ef809d3f9d" translate="yes" xml:space="preserve">
          <source>You can tell a lambda from a regular proc by using the &lt;a href=&quot;proc#method-i-lambda-3F&quot;&gt;&lt;code&gt;lambda?&lt;/code&gt;&lt;/a&gt; instance method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28d15a5493d536946040cb4dbceb4e0f5b1e53d" translate="yes" xml:space="preserve">
          <source>You can turn a &lt;a href=&quot;../hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; into keyword arguments with the &lt;code&gt;**&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e710cfcdf68046a8039f17bbf855916332cfc9" translate="yes" xml:space="preserve">
          <source>You can turn an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; into an argument list with &lt;code&gt;*&lt;/code&gt; (or splat) operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdc93fbf7c337e7f8fcba72beaf85914a7ab5abe" translate="yes" xml:space="preserve">
          <source>You can type any valid Ruby code and it will be evaluated in the current context. This allows you to debug without having to run your code repeatedly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94199e09f28cec92d335295b3a8b9514502a9831" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;logger#attribute-i-formatter&quot;&gt;&lt;code&gt;formatter=&lt;/code&gt;&lt;/a&gt; for escaping all data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a9d82f6da0767a558a8d643fe799ba9665921c1" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;shellwords&quot;&gt;&lt;code&gt;Shellwords&lt;/code&gt;&lt;/a&gt; to parse a string into a Bourne shell friendly &lt;a href=&quot;array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb64c7f80164466ef2b0431213363d82a10b84e" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;*&lt;/code&gt; or the &amp;ldquo;splat&amp;rdquo; operator or unpack an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; when assigning. This is similar to multiple assignment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="692f9135476233938f8dd9acb3a88dd296499ac0" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;*&lt;/code&gt; to gather extra values on the right-hand side of the assignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1cdf2818b94375442e8a5c93e7806580fa1a4ef" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; to create a &lt;code&gt;while&lt;/code&gt; loop that runs the body once before the condition:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea429436a283f40dcb56726e48cbed7feb13067" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;verify_mode&lt;/code&gt; to override any default values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dddee96452f3b6678d1c673ffe00ceea1b57dce6" translate="yes" xml:space="preserve">
          <source>You can use a &lt;code&gt;*&lt;/code&gt; to collect the remaining arguments. This splits an &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; into a first element and the rest:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f1c34c84ac81c1fcc7536a0ecbadf9bea4f7b9" translate="yes" xml:space="preserve">
          <source>You can use a special prefix to write numbers in decimal, hexadecimal, octal or binary formats. For decimal numbers use a prefix of &lt;code&gt;0d&lt;/code&gt;, for hexadecimal numbers use a prefix of &lt;code&gt;0x&lt;/code&gt;, for octal numbers use a prefix of &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;0o&lt;/code&gt;, for binary numbers use a prefix of &lt;code&gt;0b&lt;/code&gt;. The alphabetic component of the number is not case-sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f88d75da564645feb566ccb97eb232f663bc717" translate="yes" xml:space="preserve">
          <source>You can use multiple assignment to swap two values in-place:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d69d62d2cca247dc6ebab7830c2a7ff7e6a49f3a" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;internalobjectwrapper#method-i-type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; method to check the type of the internal object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68f20e16f7e469439efd39ba44c145164efa19c8" translate="yes" xml:space="preserve">
          <source>You can use the following keys:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a17c3c67cf58e3f190a682e751f20d2b8ea4094" translate="yes" xml:space="preserve">
          <source>You can use the following operators this way: &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt;, &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddde82c4aade243e9850f08689119d50a434d8a5" translate="yes" xml:space="preserve">
          <source>You can use this library in your application by requiring it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28437b987c82e17e0d00fb5a4877153dc83ab18" translate="yes" xml:space="preserve">
          <source>You can use this method in two modes: a find-minimum mode and a find-any mode. In either case, the elements of the array must be monotone (or sorted) with respect to the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e26e3789376e56da9329bddb033a512617d24b7f" translate="yes" xml:space="preserve">
          <source>You can use this method in two use cases: a find-minimum mode and a find-any mode. In either case, the elements of the range must be monotone (or sorted) with respect to the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca00ac6428ed30e3c89e9aa143c5f5d78f23a1b8" translate="yes" xml:space="preserve">
          <source>You can use this method to create an escaped string out of an array of tokens separated by a space. In this example we used the literal shortcut for &lt;a href=&quot;array#method-c-new&quot;&gt;&lt;code&gt;Array.new&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89aadc4facbd2d2fef02acec6acaa841ca54757e" translate="yes" xml:space="preserve">
          <source>You can use this method to install a &lt;a href=&quot;csv#Converters&quot;&gt;&lt;code&gt;CSV::Converters&lt;/code&gt;&lt;/a&gt; built-in, or provide a block that handles a custom conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d459cff02f35a2be4a488aae459ba338dbbd746" translate="yes" xml:space="preserve">
          <source>You can use this to implement an internal iterator as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c150c892bb0f513e7bb6b2742f2b05d085edc2" translate="yes" xml:space="preserve">
          <source>You can write integers of any size as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5137b806807a8b3239442d9e94c3a09a509c7e16" translate="yes" xml:space="preserve">
          <source>You cannot mix column and row access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9505ac0c642bcb69fa161f5d25eacfa3f63e8b2c" translate="yes" xml:space="preserve">
          <source>You cannot resume a fiber that transferred control to another one. This will cause a double resume error. You need to transfer control back to this fiber before it can yield and resume.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33bd26b1fa0d96b3ce834a7eb878498fefe4608f" translate="yes" xml:space="preserve">
          <source>You change how your commands are invoked:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e85f91937f5ee2832f7832bf3a30df4045e7ae8b" translate="yes" xml:space="preserve">
          <source>You could also use the &lt;a href=&quot;tcpsocket&quot;&gt;&lt;code&gt;TCPSocket&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a1255b884121f8786cf3059d6269ba5bd957bc" translate="yes" xml:space="preserve">
          <source>You could write it as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9eead2816bcb9cc10f308fe19b06fd26576b9eef" translate="yes" xml:space="preserve">
          <source>You don't need to use parenthesis with &lt;code&gt;defined?&lt;/code&gt;, but they are recommended due to the &lt;a href=&quot;precedence_rdoc&quot;&gt;low precedence&lt;/a&gt; of &lt;code&gt;defined?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ab05c98279f798c79981d9c49de1e19d610779" translate="yes" xml:space="preserve">
          <source>You may activate refinements at top-level, and inside classes and modules. You may not activate refinements in method scope. Refinements are activated until the end of the current class or module definition, or until the end of the current file if used at the top-level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4a02956842bd45caacb6034627b07d2078a6cf" translate="yes" xml:space="preserve">
          <source>You may activate refinements in a string passed to &lt;a href=&quot;../kernel#method-i-eval&quot;&gt;&lt;code&gt;Kernel#eval&lt;/code&gt;&lt;/a&gt;. Refinements are active until the end of the eval string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc4217c5a95d2d493274b5a00b1cce0fcb4bf42" translate="yes" xml:space="preserve">
          <source>You may add an arbitrary number of extra tests to an if expression using &lt;code&gt;elsif&lt;/code&gt;. An &lt;code&gt;elsif&lt;/code&gt; executes when all tests above the &lt;code&gt;elsif&lt;/code&gt; are false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8322b6b28c46c6f41c470e1962c4299f6f267bf9" translate="yes" xml:space="preserve">
          <source>You may also add an &lt;code&gt;else&lt;/code&gt; expression. If the test does not evaluate to true the &lt;code&gt;else&lt;/code&gt; expression will be executed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bde9c3f3c70792572ee604f1edbac7eef6a9fb1" translate="yes" xml:space="preserve">
          <source>You may also alias or undefine methods, but these operations are not restricted to modules or classes. See the &lt;a href=&quot;miscellaneous_rdoc&quot;&gt;miscellaneous syntax section&lt;/a&gt; for documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82462b3f296f9b756f73052d1f44fc4d49738fe1" translate="yes" xml:space="preserve">
          <source>You may also create a custom proxy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64335d419fd18e4d6cd454c5d1a491f9c7450082" translate="yes" xml:space="preserve">
          <source>You may also create strings using &lt;code&gt;%&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5acdd54f96bdddea073228661c4d9f1de197f6" translate="yes" xml:space="preserve">
          <source>You may also create symbols by interpolation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624d51b3bc650a7e2840b95069404458ad7dd1ab" translate="yes" xml:space="preserve">
          <source>You may also declare block-local arguments to a block using &lt;code&gt;;&lt;/code&gt; in the block arguments list. Assigning to a block-local argument will not override local arguments outside the block in the caller's scope:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aef4846505a259eedded3bb138df8fabc2593596" translate="yes" xml:space="preserve">
          <source>You may also define inner modules using &lt;code&gt;::&lt;/code&gt; provided the outer modules (or classes) are already defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0380042bb359e0cfaa8568ca84c4663bc80f7d0c" translate="yes" xml:space="preserve">
          <source>You may also run some code when an exception is not raised:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20648999b25bc5048753fe8ac6be05e77a204694" translate="yes" xml:space="preserve">
          <source>You may also use &lt;code&gt;::&lt;/code&gt; to designate a receiver, but this is rarely used due to the potential for confusion with &lt;code&gt;::&lt;/code&gt; for namespaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7839d6f1f3b053824952d748b10fa045c350b478" translate="yes" xml:space="preserve">
          <source>You may also use the &lt;code&gt;**&lt;/code&gt; (described next) to convert a &lt;a href=&quot;../hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; into keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9f21de9f2fe40426f1f1038de16d737c9992f7" translate="yes" xml:space="preserve">
          <source>You may also write a if-then-else expression using &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt;. This ternary if:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651591c825c1ca1933f4a5ec3aac2ce4e487164b" translate="yes" xml:space="preserve">
          <source>You may change the date and time format via &lt;a href=&quot;logger#method-i-datetime_format-3D&quot;&gt;&lt;code&gt;datetime_format=&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360ea90afd489f46f69749f5a74391625b7559a6" translate="yes" xml:space="preserve">
          <source>You may create a range of any object. See the &lt;a href=&quot;../range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; documentation for details on the methods you need to implement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0731e169ff672eaffe7b582cb49ea5f6f2cc7eff" translate="yes" xml:space="preserve">
          <source>You may indent the ending identifier if you place a &amp;ldquo;-&amp;rdquo; after &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d3c9be0dd7e02782c624a0fb08ecd63d12e7f8" translate="yes" xml:space="preserve">
          <source>You may isolate variables in a block from the outer scope by listing them following a &lt;code&gt;;&lt;/code&gt; in the block's arguments. See the documentation for block local variables in the &lt;a href=&quot;calling_methods_rdoc&quot;&gt;calling methods&lt;/a&gt; documentation for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78b38ed883e0f1223661f0248020723369e1bd6" translate="yes" xml:space="preserve">
          <source>You may need to perform some syslog.conf setup first. For a BSD machine add the following lines to /etc/syslog.conf:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c98db851d4527f432fc98376934dca4631c0dd" translate="yes" xml:space="preserve">
          <source>You may not use &lt;code&gt;elsif&lt;/code&gt; with an &lt;code&gt;unless&lt;/code&gt; expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8223b36292837bda0323dcd637fbb61015da51be" translate="yes" xml:space="preserve">
          <source>You may obtain information about the operation of the &lt;a href=&quot;gc&quot;&gt;&lt;code&gt;GC&lt;/code&gt;&lt;/a&gt; through &lt;a href=&quot;gc/profiler&quot;&gt;&lt;code&gt;GC::Profiler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24baa59359297fa85638b505ea5f25f92163019" translate="yes" xml:space="preserve">
          <source>You may open multiple heredocs on the same line, but this can be difficult to read:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fe2e32e624d912dc76f8afdb0670e3161f2a1c" translate="yes" xml:space="preserve">
          <source>You may place expressions inside the array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7702702966615d9ac3038da489f5fc0882ae1f" translate="yes" xml:space="preserve">
          <source>You may place multiple conditions on the same &lt;code&gt;when&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd32e69ad8d93f6867346d2956841353c2072c4a" translate="yes" xml:space="preserve">
          <source>You may reference a symbol using a colon: &lt;code&gt;:my_symbol&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3898ac4044e8cf5d3f283d4e96b3ee13b285c38" translate="yes" xml:space="preserve">
          <source>You may rescue different types of exceptions in different ways:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073eb94c3ed148391dc2fdbe59e5a3ee65569a30" translate="yes" xml:space="preserve">
          <source>You may retry rescued exceptions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7647874078e7d4df3070f72ff2c2ecd5c79a3e" translate="yes" xml:space="preserve">
          <source>You may set any reading and/or writing preferences in the &lt;code&gt;options&lt;/code&gt;&lt;a href=&quot;hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;. Available options are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f566312de8c1da1da9a1cf685c09c2117a8bbc3a" translate="yes" xml:space="preserve">
          <source>You may undef multiple methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c9444be9b193bfa82054843dda7ea1fa0deaef" translate="yes" xml:space="preserve">
          <source>You may use &lt;code&gt;alias&lt;/code&gt; in any scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97545ea4e687b3d4cd20b55a900e824de649c012" translate="yes" xml:space="preserve">
          <source>You may use &lt;code&gt;then&lt;/code&gt; after the &lt;code&gt;when&lt;/code&gt; condition. This is most frequently used to place the body of the &lt;code&gt;when&lt;/code&gt; on a single line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0ed04264020642f511e9b0070428286521dea3" translate="yes" xml:space="preserve">
          <source>You may use &lt;code&gt;undef&lt;/code&gt; in any scope. See also &lt;a href=&quot;../module#method-i-undef_method&quot;&gt;&lt;code&gt;Module#undef_method&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f694f49a64923c58d9c041a60a59f1f150e2b7f" translate="yes" xml:space="preserve">
          <source>You may use an optional &lt;code&gt;then&lt;/code&gt; with &lt;code&gt;unless&lt;/code&gt; just like &lt;code&gt;if&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a046de63053360022357736216cf16884dff77dc" translate="yes" xml:space="preserve">
          <source>You may use any identifier with a heredoc, but all-uppercase identifiers are typically used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87add3f0214a54cde517d7027a008b34350e2481" translate="yes" xml:space="preserve">
          <source>You may use symbols instead of method names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1447db4a1679b70b77aa8af0c960cb249004e109" translate="yes" xml:space="preserve">
          <source>You may want to look at &lt;a href=&quot;openssl/digest&quot;&gt;&lt;code&gt;OpenSSL::Digest&lt;/code&gt;&lt;/a&gt; as it supports more algorithms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bc7f2cc2fcb8cc197c014c64d8efd5b45d4e238" translate="yes" xml:space="preserve">
          <source>You must call &lt;a href=&quot;cipher#method-i-encrypt&quot;&gt;&lt;code&gt;encrypt&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;cipher#method-i-decrypt&quot;&gt;&lt;code&gt;decrypt&lt;/code&gt;&lt;/a&gt; before calling this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc9723cac461aa0725190a3634254e9325b9155" translate="yes" xml:space="preserve">
          <source>You must not mix the two modes at a time; the block must always return either true/false, or always return a number. It is undefined which value is actually picked up at each iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="241b19ff396b81e22d71cbd48eef162e58c177bd" translate="yes" xml:space="preserve">
          <source>You must open a connection to an &lt;a href=&quot;smtp&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; server before sending messages. The first argument is the address of your &lt;a href=&quot;smtp&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; server, and the second argument is the port number. Using &lt;a href=&quot;smtp#method-c-start&quot;&gt;&lt;code&gt;SMTP.start&lt;/code&gt;&lt;/a&gt; with a block is the simplest way to do this. This way, the &lt;a href=&quot;smtp&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; connection is closed automatically after the block is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be59ffae6b51f87698b12e2234d0b10dd6d3446a" translate="yes" xml:space="preserve">
          <source>You must pass a &lt;code&gt;filename&lt;/code&gt; and may optionally add a &lt;code&gt;mode&lt;/code&gt; for Ruby's open(). You may also pass an optional &lt;a href=&quot;hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; containing any &lt;code&gt;options&lt;/code&gt;&lt;a href=&quot;csv#method-c-new&quot;&gt;&lt;code&gt;CSV::new()&lt;/code&gt;&lt;/a&gt; understands as the final argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276501db5b305e5ffa7d0b2a55ee1ff68b7cf3cc" translate="yes" xml:space="preserve">
          <source>You must provide a &lt;code&gt;mode&lt;/code&gt; with an embedded &lt;a href=&quot;encoding&quot;&gt;&lt;code&gt;Encoding&lt;/code&gt;&lt;/a&gt; designator unless your data is in &lt;a href=&quot;encoding#method-c-default_external&quot;&gt;&lt;code&gt;Encoding::default_external()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; will check the &lt;a href=&quot;encoding&quot;&gt;&lt;code&gt;Encoding&lt;/code&gt;&lt;/a&gt; of the underlying &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; object (set by the &lt;code&gt;mode&lt;/code&gt; you pass) to determine how to parse the data. You may provide a second &lt;a href=&quot;encoding&quot;&gt;&lt;code&gt;Encoding&lt;/code&gt;&lt;/a&gt; to have the data transcoded as it is read just as you can with a normal call to &lt;a href=&quot;io#method-c-open&quot;&gt;&lt;code&gt;IO::open()&lt;/code&gt;&lt;/a&gt;. For example, &lt;code&gt;&quot;rb:UTF-32BE:UTF-8&quot;&lt;/code&gt; would read UTF-32BE data from the file but transcode it to UTF-8 before &lt;a href=&quot;csv&quot;&gt;&lt;code&gt;CSV&lt;/code&gt;&lt;/a&gt; parses it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="535b022406ea415ca1a76bb4c82842771f5dc3c2" translate="yes" xml:space="preserve">
          <source>You must require 'io/console' to use this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95d648ab8aa37b1fce85d86114f5281325f010a" translate="yes" xml:space="preserve">
          <source>You must require 'time' to use this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8527ee4c2ca65d5a47b1fb8c201f76d778d0b29f" translate="yes" xml:space="preserve">
          <source>You must sign the request and resubmit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd266e4d5782a2c63defe387f102a9aba569491d" translate="yes" xml:space="preserve">
          <source>You must use &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; you may not use &lt;code&gt;do&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19dd5893c8812e8a79dea7e870c97a824fbe5be6" translate="yes" xml:space="preserve">
          <source>You need to &lt;code&gt;require 'objspace'&lt;/code&gt; to use this extension module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc98bf2b7cae44275a118a27dd1f2db397ed1027" translate="yes" xml:space="preserve">
          <source>You pass your &lt;code&gt;str&lt;/code&gt; to read from, and an optional &lt;code&gt;options&lt;/code&gt; containing anything &lt;a href=&quot;csv#method-c-new&quot;&gt;&lt;code&gt;CSV::new()&lt;/code&gt;&lt;/a&gt; understands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e865cb65b401123f98d19f2f5525d4844a1f09" translate="yes" xml:space="preserve">
          <source>You should be careful to avoid deadlocks. Since pipes are fixed length buffers, &lt;a href=&quot;open3#method-c-popen3&quot;&gt;&lt;code&gt;Open3.popen3&lt;/code&gt;&lt;/a&gt;(&amp;ldquo;prog&amp;rdquo;) {|i, o, e, t| o.read } deadlocks if the program generates too much output on stderr. You should read stdout and stderr simultaneously (using threads or &lt;a href=&quot;io#method-c-select&quot;&gt;&lt;code&gt;IO.select&lt;/code&gt;&lt;/a&gt;). However, if you don't need stderr output, you can use &lt;a href=&quot;open3#method-c-popen2&quot;&gt;&lt;code&gt;Open3.popen2&lt;/code&gt;&lt;/a&gt;. If merged stdout and stderr output is not a problem, you can use &lt;a href=&quot;open3#method-c-popen2e&quot;&gt;&lt;code&gt;Open3.popen2e&lt;/code&gt;&lt;/a&gt;. If you really need stdout and stderr output as separate strings, you can consider &lt;a href=&quot;open3#method-c-capture3&quot;&gt;&lt;code&gt;Open3.capture3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d74ede9c5f6808db97f4ded25d6170697c4def" translate="yes" xml:space="preserve">
          <source>You should never call &lt;code&gt;send&lt;/code&gt; with user supplied input as the first parameter. Doing so can introduce a denial of service vulnerability:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e434e0c925677c2c414f968db78e0528777f17d" translate="yes" xml:space="preserve">
          <source>You should not load binary data provided by others. You should use binary data translated by yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0e29614fd606e4ce9605c5847813c5bc0e77038" translate="yes" xml:space="preserve">
          <source>You should only untaint a tainted object if your code has inspected it and determined that it is safe. To do so use &lt;a href=&quot;object#method-i-untaint&quot;&gt;&lt;code&gt;untaint&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c0fe8d2c22d8124bff8b7f70168a8210d2f2daa" translate="yes" xml:space="preserve">
          <source>You should set Content-Type: header field for POST. If no Content-Type: field given, this method uses &amp;ldquo;application/x-www-form-urlencoded&amp;rdquo; by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26771292c7d8a4704cac126582eb9513f9d96e50" translate="yes" xml:space="preserve">
          <source>You typically won't use this module directly, you can see it implemented in &lt;a href=&quot;ssl/sslsocket&quot;&gt;&lt;code&gt;OpenSSL::SSL::SSLSocket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a25c2a3acf3f1a6e11fa5b26f033bea598a9954b" translate="yes" xml:space="preserve">
          <source>You will need to require 'scanf' to use &lt;a href=&quot;io#method-i-scanf&quot;&gt;&lt;code&gt;IO#scanf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bea489950dd592bc713230adefa6b513e6daeade" translate="yes" xml:space="preserve">
          <source>You will need to require 'scanf' to use &lt;a href=&quot;kernel#method-i-scanf&quot;&gt;&lt;code&gt;Kernel#scanf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139cb1c57648a3cfcb2f0fca8aeb53cd999ef725" translate="yes" xml:space="preserve">
          <source>You will need to require 'scanf' to use &lt;a href=&quot;string#method-i-block_scanf&quot;&gt;&lt;code&gt;String#block_scanf&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9cfc335d04c96f58c5c5f901da3799ba6e83133" translate="yes" xml:space="preserve">
          <source>You will need to require 'scanf' to use &lt;a href=&quot;string#method-i-scanf&quot;&gt;&lt;code&gt;String#scanf&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b980e182af124af9b6af4d78bec59bb7c95f14" translate="yes" xml:space="preserve">
          <source>You will see ruby print &lt;code&gt;[1, 2, 3, 4]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ce87524a23e1275a93fab4fe17eff1c061c6e75" translate="yes" xml:space="preserve">
          <source>You will see ruby print &lt;code&gt;[1, 2, 5, 4]&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aac5234622e1c7b2dbb84851294dd83784c9ad0" translate="yes" xml:space="preserve">
          <source>You will see ruby print &lt;code&gt;[1, 5, 3, 6]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96efeba0f2bb78cee72e8f76640a79a3caebf658" translate="yes" xml:space="preserve">
          <source>You'll probably stick to the second form above, unless you want to provide a program name (which you can do with &lt;a href=&quot;logger#attribute-i-progname&quot;&gt;&lt;code&gt;progname=&lt;/code&gt;&lt;/a&gt; as well).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="155d1ad20ac7095b7a72ccc6fd0f7c17d4acfda1" translate="yes" xml:space="preserve">
          <source>Your commands can be invoked with a shortcut. Instead of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28c43e1dd3fcbcca10bcc016de5c90ae3570d8d2" translate="yes" xml:space="preserve">
          <source>Your implementation of &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; should return one of the following values: -1, 0, 1 or nil. -1 means self is smaller than other. 0 means self is equal to other. 1 means self is bigger than other. Nil means the two values could not be compared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933d796997ef8ce2912f08320d272ecbb56b9b8d" translate="yes" xml:space="preserve">
          <source>Your platform documentations (e.g. man open(2)) may describe more detailed information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed68cc5e0e07f05d7f2db76c393e5fde36c6f1d" translate="yes" xml:space="preserve">
          <source>Your request is unauthorized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a272fd282089fe514817567377ca24b72d0625f" translate="yes" xml:space="preserve">
          <source>ZERO</source>
          <target state="translated">ZERO</target>
        </trans-unit>
        <trans-unit id="3ba11baddb4774ae99e023db559fddb30a799c50" translate="yes" xml:space="preserve">
          <source>ZLIB_VERSION</source>
          <target state="translated">ZLIB_VERSION</target>
        </trans-unit>
        <trans-unit id="88664ebe5db28608dd748ac9ef11f8effaa44f80" translate="yes" xml:space="preserve">
          <source>ZStream</source>
          <target state="translated">ZStream</target>
        </trans-unit>
        <trans-unit id="bc23495246d45c405197a09f7e802ab0932bdd53" translate="yes" xml:space="preserve">
          <source>ZStream#adler</source>
          <target state="translated">ZStream#adler</target>
        </trans-unit>
        <trans-unit id="efacb125eb3aecb7373dfce350113ff0e167d34c" translate="yes" xml:space="preserve">
          <source>ZStream#avail_in</source>
          <target state="translated">ZStream#avail_in</target>
        </trans-unit>
        <trans-unit id="ce0b4c0216d6ae68a256ae7ae5cd8cedc0817935" translate="yes" xml:space="preserve">
          <source>ZStream#avail_out</source>
          <target state="translated">ZStream#avail_out</target>
        </trans-unit>
        <trans-unit id="ec186f7ddec6f4c20d0e8b265588e0102e6ffe81" translate="yes" xml:space="preserve">
          <source>ZStream#avail_out=</source>
          <target state="translated">ZStream#avail_out=</target>
        </trans-unit>
        <trans-unit id="798d0d39e515e8d40307d3ace908398945df43db" translate="yes" xml:space="preserve">
          <source>ZStream#close</source>
          <target state="translated">ZStream#close</target>
        </trans-unit>
        <trans-unit id="a95f1c91c5af669ec058a2a9f283cbfdccc5d7ec" translate="yes" xml:space="preserve">
          <source>ZStream#closed?</source>
          <target state="translated">ZStream#closed?</target>
        </trans-unit>
        <trans-unit id="64a3ef8749b3dcad51c540d250d67cf705807c85" translate="yes" xml:space="preserve">
          <source>ZStream#data_type</source>
          <target state="translated">ZStream#data_type</target>
        </trans-unit>
        <trans-unit id="73df97d3094de73cf821c2cd8f6fe2748d824575" translate="yes" xml:space="preserve">
          <source>ZStream#end</source>
          <target state="translated">ZStream#end</target>
        </trans-unit>
        <trans-unit id="25e71886d7782293f5fd8b3df5d555f1667e2a3e" translate="yes" xml:space="preserve">
          <source>ZStream#ended?</source>
          <target state="translated">ZStream#ended?</target>
        </trans-unit>
        <trans-unit id="bf399d45a2e94daaf1cda37663065db7bb7fe9a0" translate="yes" xml:space="preserve">
          <source>ZStream#finish</source>
          <target state="translated">ZStream#finish</target>
        </trans-unit>
        <trans-unit id="9e7a8ea71a3f41868be3687da686241d525d7917" translate="yes" xml:space="preserve">
          <source>ZStream#finished?</source>
          <target state="translated">ZStream#finished?</target>
        </trans-unit>
        <trans-unit id="732996e6867657c86cc6d994f23746ddfb5b1168" translate="yes" xml:space="preserve">
          <source>ZStream#flush_next_in</source>
          <target state="translated">ZStream#flush_next_in</target>
        </trans-unit>
        <trans-unit id="61b57ea6c89b443802fb6bf6415858cfb9925ad6" translate="yes" xml:space="preserve">
          <source>ZStream#flush_next_out</source>
          <target state="translated">ZStream#flush_next_out</target>
        </trans-unit>
        <trans-unit id="9477c4becc117aa7ceb23af90bb535cea0d255d6" translate="yes" xml:space="preserve">
          <source>ZStream#reset</source>
          <target state="translated">ZStream#reset</target>
        </trans-unit>
        <trans-unit id="1d3e8352862a620352ecc0a7fe9185724bbcce3f" translate="yes" xml:space="preserve">
          <source>ZStream#stream_end?</source>
          <target state="translated">ZStream#stream_end?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
