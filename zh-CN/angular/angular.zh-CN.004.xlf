<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="zh-CN" datatype="htmlbody" original="angular">
    <body>
      <group id="angular">
        <trans-unit id="b4df6da97c99904265a96515d7f37a5422025257" translate="yes" xml:space="preserve">
          <source>Although the component delegates hero deletion to the &lt;code&gt;HeroService&lt;/code&gt;, it remains responsible for updating its own list of heroes. The component's &lt;code&gt;delete()&lt;/code&gt; method immediately removes the &lt;em&gt;hero-to-delete&lt;/em&gt; from that list, anticipating that the &lt;code&gt;HeroService&lt;/code&gt; will succeed on the server.</source>
          <target state="translated">尽管组件将英雄删除委托给 &lt;code&gt;HeroService&lt;/code&gt; ，但它仍然负责更新自己的英雄列表。组件的 &lt;code&gt;delete()&lt;/code&gt; 方法会立即从列表中&lt;em&gt;删除要&lt;/em&gt;删除的&lt;em&gt;英雄&lt;/em&gt;，并预计 &lt;code&gt;HeroService&lt;/code&gt; 将在服务器上成功。</target>
        </trans-unit>
        <trans-unit id="bea5a0e7aa0c7807f055d55ca7e78a9c93ccea40" translate="yes" xml:space="preserve">
          <source>Although the tests in this guide all run in the browser, some apps might run on a different platform at least some of the time.</source>
          <target state="translated">虽然本指南中的测试都是在浏览器中运行的,但有些应用程序至少在某些时候可能会在不同的平台上运行。</target>
        </trans-unit>
        <trans-unit id="f1308d7fdf10956a614e10b524f57beab992dc1b" translate="yes" xml:space="preserve">
          <source>Although this example uses variable assignment to initialize the components, you could instead declare and initialize the properties using a constructor:</source>
          <target state="translated">虽然这个例子使用变量赋值来初始化组件,但你可以使用构造函数来声明和初始化属性。</target>
        </trans-unit>
        <trans-unit id="a895ffd8578e7962e8e90dd15f55eb1a1de64833" translate="yes" xml:space="preserve">
          <source>Although this testing guide follows the traditional style and the default &lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;CLI schematics&lt;/a&gt; generate test files with &lt;code&gt;beforeEach()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt;, feel free to adopt &lt;em&gt;this alternative approach&lt;/em&gt; in your own projects.</source>
          <target state="translated">尽管此测试指南遵循传统风格，并且默认的&lt;a href=&quot;https://github.com/angular/angular-cli&quot;&gt;CLI示意图&lt;/a&gt;使用 &lt;code&gt;beforeEach()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 生成测试文件，但是请在您自己的项目中随意采用&lt;em&gt;这种替代方法&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7bc7decf04e5716adb169e2e1f89f0d3c435dadc" translate="yes" xml:space="preserve">
          <source>Although you can bootstrap an AngularJS app in code, many applications bootstrap declaratively with the &lt;code&gt;ng-app&lt;/code&gt; directive, giving it the name of the application's module (&lt;code&gt;movieHunter&lt;/code&gt;).</source>
          <target state="translated">尽管您可以在代码中引导AngularJS应用程序，但是许多应用程序都使用 &lt;code&gt;ng-app&lt;/code&gt; 指令以声明方式进行引导，并为其指定了应用程序模块的名称（ &lt;code&gt;movieHunter&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e02c0ab9f3b340b1e4977e3101e04e64e8d94dda" translate="yes" xml:space="preserve">
          <source>Although you're not getting the behavior you want, Angular isn't broken. It's just using a different change-detection algorithm that ignores changes to the list or any of its items.</source>
          <target state="translated">虽然你没有得到你想要的行为,但Angular并没有坏。它只是使用了一种不同的变化检测算法,忽略了对列表或其任何项目的变化。</target>
        </trans-unit>
        <trans-unit id="655bcd6a216624937d6672a34cb20e4a684201c0" translate="yes" xml:space="preserve">
          <source>Always &lt;code&gt;export&lt;/code&gt; the component class so you can &lt;code&gt;import&lt;/code&gt; it elsewhere ... like in the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">始终 &lt;code&gt;export&lt;/code&gt; 组件类，以便可以 &lt;code&gt;import&lt;/code&gt; 其导入其他地方（例如 &lt;code&gt;AppModule&lt;/code&gt; 中)。</target>
        </trans-unit>
        <trans-unit id="c021e093164e1f74b3f35d8e47a96ac3223c76a9" translate="yes" xml:space="preserve">
          <source>Always get the service from an injector</source>
          <target state="translated">一定要找注射器维修</target>
        </trans-unit>
        <trans-unit id="7c060c43d1d915450d5cd5013ceedc7d9a2b52c6" translate="yes" xml:space="preserve">
          <source>Amend the &lt;code&gt;@angular/core&lt;/code&gt; import statement to include the &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; symbol.</source>
          <target state="translated">修改 &lt;code&gt;@angular/core&lt;/code&gt; import语句以包含 &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 符号。</target>
        </trans-unit>
        <trans-unit id="a63ef4162e15e9f9a4264c4f633e746ec995f377" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../guide/observables&quot;&gt;Observable&lt;/a&gt; factory function: A function that returns an &lt;code&gt;Observable&lt;/code&gt;. The function will be used at runtime to obtain and subscribe to the &lt;code&gt;Observable&lt;/code&gt; and the ServiceWorker will be registered as soon as the first value is emitted.</source>
          <target state="translated">一个&lt;a href=&quot;../../guide/observables&quot;&gt;Observable&lt;/a&gt;工厂函数：一个返回 &lt;code&gt;Observable&lt;/code&gt; 的函数。该函数将在运行时用于获取和订阅 &lt;code&gt;Observable&lt;/code&gt; ,并在发出第一个值后立即注册ServiceWorker。</target>
        </trans-unit>
        <trans-unit id="7890dafd42800e1e635e68de3df438822747d36f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/activationstart&quot;&gt;event&lt;/a&gt; triggered when the Router begins activating a route.</source>
          <target state="translated">路由器开始激活路由时触发的&lt;a href=&quot;../api/router/activationstart&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c39d1e22c53c2af9b2d4c377c45f82b0b1e2bcef" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/activationstart&quot;&gt;event&lt;/a&gt; triggered when the Router finishes activating a route.</source>
          <target state="translated">路由器完成激活路由后触发的&lt;a href=&quot;../api/router/activationstart&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2c21e55545fc6566ca7c2bfeac477e90a12a69d4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/childactivationend&quot;&gt;event&lt;/a&gt; triggered when the Router finishes activating a route's children.</source>
          <target state="translated">路由器完成激活路由的子代时触发的&lt;a href=&quot;../api/router/childactivationend&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e3327c4a4dd53191f4e45bd3a9702873e5e1df07" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/childactivationstart&quot;&gt;event&lt;/a&gt; triggered when the Router begins activating a route's children.</source>
          <target state="translated">路由器开始激活路由的子代时触发的&lt;a href=&quot;../api/router/childactivationstart&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="72902f835d2457adbf3f424d7ed6aa5fbedee83b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/guardscheckend&quot;&gt;event&lt;/a&gt; triggered when the Router finishes the Guards phase of routing successfully.</source>
          <target state="translated">路由器成功完成路由的保护阶段时触发的&lt;a href=&quot;../api/router/guardscheckend&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7c9902eb347e259e539ce1420cfbf9fcb004d4a7" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/guardscheckstart&quot;&gt;event&lt;/a&gt; triggered when the Router begins the Guards phase of routing.</source>
          <target state="translated">路由器开始路由的保护阶段时触发的&lt;a href=&quot;../api/router/guardscheckstart&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="69e584daf4625901168aeeeb9d5204b8f03542cf" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationcancel&quot;&gt;event&lt;/a&gt; triggered when navigation is canceled. This can happen when a &lt;a href=&quot;router#guards&quot;&gt;Route Guard&lt;/a&gt; returns false during navigation, or redirects by returning a &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">取消导航时触发的&lt;a href=&quot;../api/router/navigationcancel&quot;&gt;事件&lt;/a&gt;。当&lt;a href=&quot;router#guards&quot;&gt;Route Guard&lt;/a&gt;在导航期间返回false或通过返回 &lt;code&gt;&lt;a href=&quot;../api/router/urltree&quot;&gt;UrlTree&lt;/a&gt;&lt;/code&gt; 进行重定向时，可能会发生这种情况。</target>
        </trans-unit>
        <trans-unit id="71250dfa39f645ca9272ff2924abdbb047e81e1c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationend&quot;&gt;event&lt;/a&gt; triggered when navigation ends successfully.</source>
          <target state="translated">导航成功结束时触发的&lt;a href=&quot;../api/router/navigationend&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5449cdb5f08ea0b83a8503bf2aa7e372f857eeb8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationerror&quot;&gt;event&lt;/a&gt; triggered when navigation fails due to an unexpected error.</source>
          <target state="translated">由于意外错误导致导航失败时触发的&lt;a href=&quot;../api/router/navigationerror&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a2ae571a3340d4a75539962ff60108d48d5c9537" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/navigationstart&quot;&gt;event&lt;/a&gt; triggered when navigation starts.</source>
          <target state="translated">导航开始时触发的&lt;a href=&quot;../api/router/navigationstart&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="426962608c573ea20e84f4af471ba7aecd0d4a37" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/resolveend&quot;&gt;event&lt;/a&gt; triggered when the Router finishes the Resolve phase of routing successfuly.</source>
          <target state="translated">路由器成功完成路由的解析阶段时触发的&lt;a href=&quot;../api/router/resolveend&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fd22e501f75afe5ba52de290c4ca9f9d39a2d35d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/resolvestart&quot;&gt;event&lt;/a&gt; triggered when the Router begins the Resolve phase of routing.</source>
          <target state="translated">路由器开始路由的解析阶段时触发的&lt;a href=&quot;../api/router/resolvestart&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ea85ce4a6e9ac1b58d76f15ffef657cbbddf2c3f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/routeconfigloadend&quot;&gt;event&lt;/a&gt; triggered after a route has been lazy loaded.</source>
          <target state="translated">延迟加载路由后触发的&lt;a href=&quot;../api/router/routeconfigloadend&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2c0e692d2c146b893b035f9f9829067876ae851d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/routeconfigloadstart&quot;&gt;event&lt;/a&gt; triggered before the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt;&lt;a href=&quot;router#asynchronous-routing&quot;&gt;lazy loads&lt;/a&gt; a route configuration.</source>
          <target state="translated">在 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;router#asynchronous-routing&quot;&gt;延迟加载&lt;/a&gt;路由配置之前触发的&lt;a href=&quot;../api/router/routeconfigloadstart&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="899c0961591582cac03b97b9fe13c8147d2c81ea" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/routesrecognized&quot;&gt;event&lt;/a&gt; triggered when the Router parses the URL and the routes are recognized.</source>
          <target state="translated">路由器解析URL并识别路由时触发的&lt;a href=&quot;../api/router/routesrecognized&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="69ea6deb0af3e15d693596cfbf4f88b319c82d8b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../api/router/scroll&quot;&gt;event&lt;/a&gt; that represents a scrolling event.</source>
          <target state="translated">一个&lt;a href=&quot;../api/router/scroll&quot;&gt;事件&lt;/a&gt;，表示滚动事件。</target>
        </trans-unit>
        <trans-unit id="c1d7ddd4c6221de6325bfd2f11d8ba52144db874" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;attribute&lt;/em&gt; directive&lt;/a&gt; changes the appearance or behavior of an element, component, or another directive. For example, the built-in &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;&lt;code&gt;NgStyle&lt;/code&gt;&lt;/a&gt; directive changes several element styles at the same time.</source>
          <target state="translated">一个&lt;a href=&quot;attribute-directives&quot;&gt;&lt;em&gt;属性&lt;/em&gt;指令&lt;/a&gt;改变的元件，部件，或另一个指令的外观或行为。例如，内置的&lt;a href=&quot;template-syntax#ngStyle&quot;&gt; &lt;code&gt;NgStyle&lt;/code&gt; &lt;/a&gt;指令可同时更改几种元素样式。</target>
        </trans-unit>
        <trans-unit id="381caa57d2775be37deef699cc2ad5d0b0696312" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://en.wikipedia.org/wiki/Idempotence&quot;&gt;idempotent&lt;/a&gt; expression is ideal because it is free of side effects and improves Angular's change detection performance. In Angular terms, an idempotent expression always returns &lt;em&gt;exactly the same thing&lt;/em&gt; until one of its dependent values changes.</source>
          <target state="translated">一个&lt;a href=&quot;https://en.wikipedia.org/wiki/Idempotence&quot;&gt;幂等&lt;/a&gt;表达是理想的，因为它是免费的副作用，并提高了角的变化检测性能。用Angular术语来说，幂等表达式始终返回&lt;em&gt;完全相同的事物，&lt;/em&gt;直到其依赖值之一改变为止。</target>
        </trans-unit>
        <trans-unit id="ca5e0929440033b5793e264cd56bccd1cc748753" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;npm-packages&quot;&gt;npm package&lt;/a&gt; that plugs gaps in a browser's JavaScript implementation. See &lt;a href=&quot;browser-support&quot;&gt;Browser Support&lt;/a&gt; for polyfills that support particular functionality for particular platforms.</source>
          <target state="translated">一个&lt;a href=&quot;npm-packages&quot;&gt;npm软件包&lt;/a&gt;，用于填补浏览器JavaScript实现中的空白。请参阅&lt;a href=&quot;browser-support&quot;&gt;浏览器支持，&lt;/a&gt;以获取支持特定平台的特定功能的polyfill。</target>
        </trans-unit>
        <trans-unit id="219f19f290eb214e9b46b6b243f29af829538794" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; root element is detected as an SVG element automatically, without the prefix.</source>
          <target state="translated">自动将 &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; 根元素检测为SVG元素，而不带前缀。</target>
        </trans-unit>
        <trans-unit id="8e73ae230a1248e9c7e2883b99036f3d5f240f5f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; presents the list of messages in repeated &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">一个 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 呈现在重复的消息的列表中 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="f2f90242a3b15020a7dda505cb0f3db9126f9d69" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">导入以提供AngularJS核心服务的 &lt;code&gt;&lt;a href=&quot;../../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; ，并具有用于引导混合升级应用程序的实例方法。</target>
        </trans-unit>
        <trans-unit id="e4b5b7b463e93a6c1bdc30c63b8e5d59fb4e799f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; method does not begin its HTTP request until you call &lt;code&gt;subscribe()&lt;/code&gt; on the observable returned by that method. This is true for &lt;em&gt;all&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;&lt;em&gt;methods&lt;/em&gt;.</source>
          <target state="translated">一个 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的，直到你调用方法不开始其HTTP请求 &lt;code&gt;subscribe()&lt;/code&gt; 上观察到的由该方法返回。&lt;em&gt;所有&lt;/em&gt; &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; &lt;em&gt;方法&lt;/em&gt;都是如此。</target>
        </trans-unit>
        <trans-unit id="3486e52a9ca74e105c9d47272170fbe086672a4e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional asynchronous validators used with &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">一个 &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; ,用于注册与 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 一起使用的其他异步验证器。</target>
        </trans-unit>
        <trans-unit id="a3fc1b81c07404d7fb201c7c09fb069d006db201" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional synchronous validators used with &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">一个 &lt;code&gt;&lt;a href=&quot;../core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; ,用于注册与 &lt;code&gt;&lt;a href=&quot;abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 一起使用的其他同步验证器。</target>
        </trans-unit>
        <trans-unit id="9acb76cd675cf3db071a0fd0b62776f333e09782" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, which you import to provide AngularJS core services, and has an instance method used to bootstrap the hybrid upgrade application.</source>
          <target state="translated">导入以提供AngularJS核心服务的 &lt;code&gt;&lt;a href=&quot;../core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; ，并具有用于引导混合升级应用程序的实例方法。</target>
        </trans-unit>
        <trans-unit id="a705ac5afb0c3c72cf40d0a78a176ebc767e55b7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional asynchronous validators used with &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">一个 &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; ,用于注册与 &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 一起使用的其他异步验证器。</target>
        </trans-unit>
        <trans-unit id="23717595533a9e7f86e6906ec79bd920cab4e792" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; for registering additional synchronous validators used with &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt;s.</source>
          <target state="translated">一个 &lt;code&gt;&lt;a href=&quot;core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; ,用于注册与 &lt;code&gt;&lt;a href=&quot;forms/abstractcontrol&quot;&gt;AbstractControl&lt;/a&gt;&lt;/code&gt; 一起使用的其他同步验证器。</target>
        </trans-unit>
        <trans-unit id="c48cdd99d250e9b5794feac11e209b12cc845dae" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; is backed by a render-specific element. In the browser, this is usually a DOM element.</source>
          <target state="translated">一个 &lt;code&gt;&lt;a href=&quot;elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 由渲染特定元素的支持。在浏览器中，这通常是DOM元素。</target>
        </trans-unit>
        <trans-unit id="0902cc5f82cdfcbcb355b954a52dc73cbbfff74b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; configuration object that controls how navigation is performed.</source>
          <target state="translated">一个 &lt;code&gt;&lt;a href=&quot;extraoptions&quot;&gt;ExtraOptions&lt;/a&gt;&lt;/code&gt; 配置对象，该对象控制如何执行导航。</target>
        </trans-unit>
        <trans-unit id="ec99dc581b15e270f8a008cf6fe23c15b13a4e6e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; is a replacement for a &lt;code&gt;new&lt;/code&gt; operator, which can automatically resolve the constructor dependencies.</source>
          <target state="translated">一个 &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 是一个更换 &lt;code&gt;new&lt;/code&gt; 运营商，它可以自动解决构造依赖。</target>
        </trans-unit>
        <trans-unit id="b1291a4011084cae6a49c7568f00d5c3f842045f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; property should normally be initialized to an Angular &lt;a href=&quot;../api/core/eventemitter&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt; with values flowing out of the component as &lt;a href=&quot;template-syntax#event-binding&quot;&gt;events&lt;/a&gt;.</source>
          <target state="translated">一个 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 属性通常应被初始化为角&lt;a href=&quot;../api/core/eventemitter&quot;&gt; &lt;code&gt;EventEmitter&lt;/code&gt; &lt;/a&gt;与部件作为值流出&lt;a href=&quot;template-syntax#event-binding&quot;&gt;事件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5c0efdf314434e0bdd77bc0f5a83a46140513339" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; instance begins publishing values only when someone subscribes to it. You subscribe by calling the &lt;code&gt;subscribe()&lt;/code&gt; method of the instance, passing an observer object to receive the notifications.</source>
          <target state="translated">一个 &lt;code&gt;Observable&lt;/code&gt; 实例仅在有人订阅时才开始发布值。您可以通过调用实例的 &lt;code&gt;subscribe()&lt;/code&gt; 方法进行订阅，并传递一个观察者对象以接收通知。</target>
        </trans-unit>
        <trans-unit id="496291c15f69bd4995a0ab9d8aaf7bfd7fe93e3b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; of the URL &lt;a href=&quot;router#fragment&quot;&gt;fragment&lt;/a&gt; available to all routes.</source>
          <target state="translated">可用于所有路由的URL &lt;a href=&quot;router#fragment&quot;&gt;片段&lt;/a&gt;的 &lt;code&gt;Observable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b4fa68903eb03e9a2e62a2a57a0c8d5942de1bfa" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; of the route path(s), represented as an array of strings for each part of the route path.</source>
          <target state="translated">路由路径的 &lt;code&gt;Observable&lt;/code&gt; ，表示为路由路径各部分的字符串数组。</target>
        </trans-unit>
        <trans-unit id="04f30cfd0bce06b1acdce10f416a6eb14bf52ffb" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains a &lt;a href=&quot;../api/router/parammap&quot;&gt;map&lt;/a&gt; of the &lt;a href=&quot;router#query-parameters&quot;&gt;query parameters&lt;/a&gt; available to all routes. The map supports retrieving single and multiple values from the query parameter.</source>
          <target state="translated">一个 &lt;code&gt;Observable&lt;/code&gt; ，其中包含可用于所有路由的&lt;a href=&quot;router#query-parameters&quot;&gt;查询参数&lt;/a&gt;的&lt;a href=&quot;../api/router/parammap&quot;&gt;映射&lt;/a&gt;。该映射支持从查询参数中检索单个和多个值。</target>
        </trans-unit>
        <trans-unit id="43be0a230743764c26dd920f3024d4f1250bc9f5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains a &lt;a href=&quot;../api/router/parammap&quot;&gt;map&lt;/a&gt; of the required and &lt;a href=&quot;router#optional-route-parameters&quot;&gt;optional parameters&lt;/a&gt; specific to the route. The map supports retrieving single and multiple values from the same parameter.</source>
          <target state="translated">一个 &lt;code&gt;Observable&lt;/code&gt; ，其中包含特定于路线的必需和&lt;a href=&quot;router#optional-route-parameters&quot;&gt;可选参数&lt;/a&gt;的&lt;a href=&quot;../api/router/parammap&quot;&gt;映射&lt;/a&gt;。该映射支持从同一参数检索单个和多个值。</target>
        </trans-unit>
        <trans-unit id="8f7e21dd9af9c63a178fb6539d2db368c3122537" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Observable&lt;/code&gt; that contains the &lt;code&gt;data&lt;/code&gt; object provided for the route. Also contains any resolved values from the &lt;a href=&quot;router#resolve-guard&quot;&gt;resolve guard&lt;/a&gt;.</source>
          <target state="translated">一个 &lt;code&gt;Observable&lt;/code&gt; ，其中包含为路由提供的 &lt;code&gt;data&lt;/code&gt; 对象。还包含来自任何解决价值观&lt;a href=&quot;router#resolve-guard&quot;&gt;的决心守卫&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="659371a63d96eaa9846b4e62b2ecd146eb8fb3a8" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;e2e/&lt;/code&gt; folder at the top level contains source files for a set of end-to-end tests that correspond to the root-level application, along with test-specific configuration files.</source>
          <target state="translated">最高级别的 &lt;code&gt;e2e/&lt;/code&gt; 文件夹包含一组与根级应用程序相对应的端到端测试的源文件，以及测试专用的配置文件。</target>
        </trans-unit>
        <trans-unit id="a393989fd86c0b1fb47b08868996156fe76ee83d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ngOnInit()&lt;/code&gt; is a good place for a component to fetch its initial data. The &lt;a href=&quot;../tutorial/toh-pt4#oninit&quot;&gt;Tour of Heroes Tutorial&lt;/a&gt; guide shows how.</source>
          <target state="translated">一个 &lt;code&gt;ngOnInit()&lt;/code&gt; 是一个好地方的组件来获取它的初始数据。《&lt;a href=&quot;../tutorial/toh-pt4#oninit&quot;&gt;英雄之旅》教程&lt;/a&gt;指南显示了操作方法。</target>
        </trans-unit>
        <trans-unit id="40bf5611d5635b162977a8f19c777ed4e7ce75d7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of body returns an observable of &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; with the same &lt;code&gt;T&lt;/code&gt; body type.</source>
          <target state="translated">身体的 &lt;code&gt;observe&lt;/code&gt; 值返回具有相同 &lt;code&gt;T&lt;/code&gt; 身体类型的可观察物 &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09173ee04df6635197986a7dcb62f7c7941d2cfe" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of events returns an observable of the raw &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; stream, including progress events by default.</source>
          <target state="translated">事件的 &lt;code&gt;observe&lt;/code&gt; 值返回原始 &lt;code&gt;&lt;a href=&quot;httpevent&quot;&gt;HttpEvent&lt;/a&gt;&lt;/code&gt; 流的可观察值，默认情况下包括进度事件。</target>
        </trans-unit>
        <trans-unit id="c6c6a2eb3f2af282b7e5e7ba7956f7e168813b54" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;observe&lt;/code&gt; value of response returns an observable of &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt;, where the &lt;code&gt;T&lt;/code&gt; parameter depends on the &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; and any optionally provided type parameter.</source>
          <target state="translated">响应的 &lt;code&gt;observe&lt;/code&gt; 值返回 &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&amp;lt;T&amp;gt;&lt;/a&gt;&lt;/code&gt; 的可观察值，其中 &lt;code&gt;T&lt;/code&gt; 参数取决于 &lt;code&gt;&lt;a href=&quot;httprequest#responseType&quot;&gt;responseType&lt;/a&gt;&lt;/code&gt; 和任何可选提供的类型参数。</target>
        </trans-unit>
        <trans-unit id="26ce9d0a751c4b4bca560fdfc4e8290382f4ff8b" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;Admin&lt;/em&gt; area to manage the list of crises and heroes.</source>
          <target state="translated">一个&lt;em&gt;管理&lt;/em&gt;区域，用于管理危机和英雄列表。</target>
        </trans-unit>
        <trans-unit id="b19e97dba2208f0862e676d34764de4f98f851d9" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;add schematic&lt;/em&gt; allows developers to install your library in an Angular workspace using &lt;code&gt;ng add&lt;/code&gt;.</source>
          <target state="translated">一个&lt;em&gt;附加原理&lt;/em&gt;使开发人员能够安装资料库中使用角工作区 &lt;code&gt;ng add&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ec44fe7f1a288919612b48c15847deaef368424" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;attribute directive&lt;/em&gt; modifies the behavior of an element, component or another directive. Its name reflects the way the directive is applied: as an attribute on a host element.</source>
          <target state="translated">一个&lt;em&gt;属性指令&lt;/em&gt;修改的元件，部件或另一个指令的行为。它的名称反映了指令的应用方式：作为宿主元素上的属性。</target>
        </trans-unit>
        <trans-unit id="0ec56b57e883f5387676814357ed484d6aaa7704" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;update schematic&lt;/em&gt; can tell the &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; command how to update your library's dependencies and adjust for breaking changes when you release a new version.</source>
          <target state="translated">一个&lt;em&gt;更新原理图&lt;/em&gt;可以告诉 &lt;code&gt;ng &lt;a href=&quot;../api/forms/ngmodel#update&quot;&gt;update&lt;/a&gt;&lt;/code&gt; 命令如何更新库的依赖关系，并调整为突破，当你发布一个新版本的变化。</target>
        </trans-unit>
        <trans-unit id="761f41f255dd677b107e4bd110cf2558311066df" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;Attribute&lt;/strong&gt; directive changes the appearance or behavior of a DOM element.</source>
          <target state="translated">一个&lt;strong&gt;属性&lt;/strong&gt;指令改变DOM元素的外观或行为。</target>
        </trans-unit>
        <trans-unit id="ac0f1891644c942a2466a1e07ed0df2da374772f" translate="yes" xml:space="preserve">
          <source>An Angular &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;event binding&lt;/a&gt; binds the button's click event to &lt;code&gt;MessageService.clear()&lt;/code&gt;.</source>
          <target state="translated">Angular &lt;a href=&quot;../guide/template-syntax#event-binding&quot;&gt;事件绑定&lt;/a&gt;将按钮的click事件绑定到 &lt;code&gt;MessageService.clear()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43775620687c736b758a71c493e7f6e17f5e85cc" translate="yes" xml:space="preserve">
          <source>An Angular &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; packaged as a &lt;a href=&quot;glossary#custom-element&quot;&gt;custom element&lt;/a&gt;.</source>
          <target state="translated">打包为&lt;a href=&quot;glossary#custom-element&quot;&gt;自定义元素&lt;/a&gt;的Angular &lt;a href=&quot;glossary#component&quot;&gt;组件&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f7d10a3ad012872f7ef8bb8e2bb8056b9624d030" translate="yes" xml:space="preserve">
          <source>An Angular &lt;a href=&quot;glossary#component&quot;&gt;component&lt;/a&gt; with a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; directive in its template that displays views based on router navigations.</source>
          <target state="translated">在其模板中带有 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 指令的Angular &lt;a href=&quot;glossary#component&quot;&gt;组件&lt;/a&gt;，该组件显示基于路由器导航的视图。</target>
        </trans-unit>
        <trans-unit id="ae5befb0e78f74df39d0a2413426de6480b4eff1" translate="yes" xml:space="preserve">
          <source>An Angular HTML form template.</source>
          <target state="translated">一个Angular HTML表单模板。</target>
        </trans-unit>
        <trans-unit id="c46699afa49393f6d4cbd5edc2fb078febaadc48" translate="yes" xml:space="preserve">
          <source>An Angular NgModule is a class with the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator&amp;mdash;JavaScript modules don't have to have the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. Angular's &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; has &lt;code&gt;imports&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; and they serve a similar purpose.</source>
          <target state="translated">Angular NgModule是具有 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器的类-JavaScript模块不必具有 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器。角的 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 具有 &lt;code&gt;imports&lt;/code&gt; 和 &lt;code&gt;exports&lt;/code&gt; ，它们服务于类似的目的。</target>
        </trans-unit>
        <trans-unit id="318d525298ccecf3917c9882251bdba1ace41170" translate="yes" xml:space="preserve">
          <source>An Angular app needs at least one module that serves as the root module. As you add features to your app, you can add them in modules. The following are frequently used Angular modules with examples of some of the things they contain:</source>
          <target state="translated">一个Angular应用至少需要一个模块作为根模块。当你在应用中添加功能时,你可以在模块中添加它们。以下是经常使用的Angular模块,并举例说明了它们所包含的一些内容。</target>
        </trans-unit>
        <trans-unit id="17e4e945b590d3025d8261eb8ed46e27c36c3781" translate="yes" xml:space="preserve">
          <source>An Angular app runs in a zone where it can respond to asynchronous events by checking for data changes and updating the information it displays by resolving &lt;a href=&quot;glossary#data-binding&quot;&gt;data bindings&lt;/a&gt;.</source>
          <target state="translated">Angular应用程序运行在一个区域中，在该区域中，它可以通过检查数据更改并通过解析&lt;a href=&quot;glossary#data-binding&quot;&gt;数据绑定来&lt;/a&gt;更新其显示的信息来响应异步事件。</target>
        </trans-unit>
        <trans-unit id="f5a58a2db54c37533d8743189ca00c22cff5f930" translate="yes" xml:space="preserve">
          <source>An Angular application comprises a tree of components, in which each Angular component has a specific purpose and responsibility.</source>
          <target state="translated">一个Angular应用由一棵组件树组成,其中每个Angular组件都有特定的目的和责任。</target>
        </trans-unit>
        <trans-unit id="224c83ccdc365f0fb95c344a9b94b58e6e776da8" translate="yes" xml:space="preserve">
          <source>An Angular application consists mainly of components and their HTML templates. Because the components and templates provided by Angular cannot be understood by the browser directly, Angular applications require a compilation process before they can run in a browser.</source>
          <target state="translated">一个Angular应用主要由组件及其HTML模板组成。由于Angular提供的组件和模板不能被浏览器直接理解,所以Angular应用在浏览器中运行前需要一个编译过程。</target>
        </trans-unit>
        <trans-unit id="abdf235f2e0f6378bc1eb3fb7b12653a48e94457" translate="yes" xml:space="preserve">
          <source>An Angular application has multiple injectors, arranged in a tree hierarchy that parallels the component tree. Each injector creates a singleton instance of a dependency. That same instance is injected wherever that injector provides that service. A particular service can be provided and created at any level of the injector hierarchy, which means that there can be multiple instances of a service if it is provided by multiple injectors.</source>
          <target state="translated">一个Angular应用有多个注入器,排列在一个与组件树平行的树形层次结构中。每个注入者都会创建一个依赖关系的单例。该实例被注入到该注入器提供该服务的任何地方。一个特定的服务可以在注入器层次结构的任何级别上提供和创建,这意味着如果一个服务由多个注入器提供,它可以有多个实例。</target>
        </trans-unit>
        <trans-unit id="901f5d47e5b42b0f1b83f5de4ab44ccaaf9f4393" translate="yes" xml:space="preserve">
          <source>An Angular class or other definition that provides a dependency using the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; mechanism. An injectable &lt;a href=&quot;glossary#service&quot;&gt;service&lt;/a&gt; class must be marked by the &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt;&lt;a href=&quot;glossary#decorator&quot;&gt;decorator&lt;/a&gt;. Other items, such as constant values, can also be injectable.</source>
          <target state="translated">使用&lt;a href=&quot;glossary#di&quot;&gt;依赖项注入&lt;/a&gt;机制提供依赖项的Angular类或其他定义。可注入&lt;a href=&quot;glossary#service&quot;&gt;服务&lt;/a&gt;类必须由 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;glossary#decorator&quot;&gt;装饰器&lt;/a&gt;标记。其他项目，例如恒定值，也可以注入。</target>
        </trans-unit>
        <trans-unit id="ca9a64e3c4625a8c6e8d002351029891fd08daa2" translate="yes" xml:space="preserve">
          <source>An Angular component can be &quot;downgraded&quot; to an AngularJS component. This is achieved by defining an AngularJS directive, which bootstraps the Angular component at its location in the DOM. See &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">可以将Angular组件&amp;ldquo;降级&amp;rdquo;为AngularJS组件。这是通过定义AngularJS指令来实现的，该指令将Angular组件引导到DOM中的位置。参见 &lt;code&gt;&lt;a href=&quot;downgradecomponent&quot;&gt;downgradeComponent&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="94ed2170f6f1643869b56898066095381b91d979" translate="yes" xml:space="preserve">
          <source>An Angular component can be downgraded to an AngularJS component directive. This creates an AngularJS directive, which bootstraps the Angular component in that location.</source>
          <target state="translated">一个Angular组件可以降级为一个AngularJS组件指令。这样就会创建一个AngularJS指令,在该位置引导Angular组件。</target>
        </trans-unit>
        <trans-unit id="84e3e11bc265bb72484f1b08eb8f80c960cc9617" translate="yes" xml:space="preserve">
          <source>An Angular component class is responsible for exposing data and handling most of the view's display and user-interaction logic through &lt;a href=&quot;glossary#data-binding&quot;&gt;data binding&lt;/a&gt;.</source>
          <target state="translated">Angular组件类负责通过&lt;a href=&quot;glossary#data-binding&quot;&gt;数据绑定&lt;/a&gt;公开数据并处理视图的大多数显示和用户交互逻辑。</target>
        </trans-unit>
        <trans-unit id="055dd8ce39f4854631f9678e6236d3d89f44ba38" translate="yes" xml:space="preserve">
          <source>An Angular component with a &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; that displays views based on router navigations.</source>
          <target state="translated">具有 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 的Angular组件，可基于路由器导航显示视图。</target>
        </trans-unit>
        <trans-unit id="0583a50b83c1574e7c5305e71080338ec56fc21b" translate="yes" xml:space="preserve">
          <source>An Angular form has two parts: an HTML-based &lt;em&gt;template&lt;/em&gt; and a component &lt;em&gt;class&lt;/em&gt; to handle data and user interactions programmatically. Begin with the class because it states, in brief, what the hero editor can do.</source>
          <target state="translated">Angular表单包含两个部分：基于HTML的&lt;em&gt;模板&lt;/em&gt;和用于以编程方式处理数据和用户交互的组件&lt;em&gt;类&lt;/em&gt;。从该类开始，因为它简要说明了英雄编辑器可以做什么。</target>
        </trans-unit>
        <trans-unit id="feb425f8a5e188113a133b8bf3ee82774575750d" translate="yes" xml:space="preserve">
          <source>An Angular library is an Angular &lt;a href=&quot;glossary#project&quot;&gt;project&lt;/a&gt; that differs from an app in that it cannot run on its own. A library must be imported and used in an app.</source>
          <target state="translated">Angular库是与应用程序不同的Angular &lt;a href=&quot;glossary#project&quot;&gt;项目&lt;/a&gt;，因为它不能单独运行。必须导入库并在应用程序中使用。</target>
        </trans-unit>
        <trans-unit id="39a17a3341ed73b84cf9c19e3784f7825b103d30" translate="yes" xml:space="preserve">
          <source>An AngularJS component can be &quot;upgraded&quot;&quot; to an Angular component. This is achieved by defining an Angular directive, which bootstraps the AngularJS component at its location in the DOM. See &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一个AngularJS组件可以被&amp;ldquo;升级&amp;rdquo;&amp;rdquo;到的角度成分。这是通过在其在DOM。见位置限定角指令，它引导了AngularJS部件实现 &lt;code&gt;&lt;a href=&quot;upgradecomponent&quot;&gt;UpgradeComponent&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d7fbbc51dcdac1c27708c03be77bb73e12702b44" translate="yes" xml:space="preserve">
          <source>An AngularJS component can be upgraded to an Angular component. This creates an Angular directive, which bootstraps the AngularJS component directive in that location.</source>
          <target state="translated">一个AngularJS组件可以升级为Angular组件。这将创建一个Angular指令,在该位置引导AngularJS组件指令。</target>
        </trans-unit>
        <trans-unit id="4a64cb5ebfd2cbf42d2f183810699373d7988f5d" translate="yes" xml:space="preserve">
          <source>An AngularJS component directive that is fully aligned with the Angular architecture may look something like this:</source>
          <target state="translated">一个与Angular架构完全一致的AngularJS组件指令可能看起来像这样。</target>
        </trans-unit>
        <trans-unit id="8a975ebf31d46d77cfdf5f77c89cee15a4b405cd" translate="yes" xml:space="preserve">
          <source>An HTML file for the component template.</source>
          <target state="translated">组件模板的HTML文件。</target>
        </trans-unit>
        <trans-unit id="a3f4bdfe7e7387bc48b45d52ab3ae4d5c67454c6" translate="yes" xml:space="preserve">
          <source>An HTTP request/response body that represents serialized parameters, per the MIME type &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;.</source>
          <target state="translated">一个HTTP请求/响应主体，代表MIME类型 &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; 的序列化参数。</target>
        </trans-unit>
        <trans-unit id="e3a02c74d3b66bdb47a53584bb85ba7824e6d06f" translate="yes" xml:space="preserve">
          <source>An InjectionToken that gets the current &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;createInjector()&lt;/code&gt;-style injectors.</source>
          <target state="translated">一个InjectionToken获取当前 &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 的 &lt;code&gt;createInjector()&lt;/code&gt; 式的注射器。</target>
        </trans-unit>
        <trans-unit id="148344ddb54e50e9920be9a68ce56bf37e875498" translate="yes" xml:space="preserve">
          <source>An NgModule bounds &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;declarable classes&lt;/a&gt; only. Declarables are the only classes that matter to the &lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angular compiler&lt;/a&gt;.</source>
          <target state="translated">NgModule 仅限制可声明的&lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;类&lt;/a&gt;。可声明的内容是&lt;a href=&quot;ngmodule-faq#q-angular-compiler&quot;&gt;Angular编译器&lt;/a&gt;唯一重要的类。</target>
        </trans-unit>
        <trans-unit id="4d727575727c196322384a842e972193fc9ad53b" translate="yes" xml:space="preserve">
          <source>An NgModule can export a combination of its own declarations, selected imported classes, and imported NgModules.</source>
          <target state="translated">一个NgModule可以导出自己的声明、选定的导入类和导入的NgModule的组合。</target>
        </trans-unit>
        <trans-unit id="4aa58c70086cf419b25738e1a24be53c81f07b1d" translate="yes" xml:space="preserve">
          <source>An NgModule can only export the &lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;declarable classes&lt;/a&gt; it owns or imports from other modules. It doesn't declare or export any other kind of class.</source>
          <target state="translated">NgModule只能导出其拥有的可声明&lt;a href=&quot;ngmodule-faq#q-declarable&quot;&gt;类&lt;/a&gt;或从其他模块导入。它不会声明或导出任何其他类型的类。</target>
        </trans-unit>
        <trans-unit id="fb24463a305716f436894ea4dafb6375e5e171c3" translate="yes" xml:space="preserve">
          <source>An NgModule can re-export entire NgModules, which effectively re-exports all of their exported classes. Angular's own &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; exports a couple of NgModules like this:</source>
          <target state="translated">NgModule可以重新导出整个NgModule，从而有效地重新导出其所有导出的类。Angular自己的 &lt;code&gt;&lt;a href=&quot;../api/platform-browser/browsermodule&quot;&gt;BrowserModule&lt;/a&gt;&lt;/code&gt; 导出了几个NgModule，如下所示：</target>
        </trans-unit>
        <trans-unit id="048f4d3b7b842d7e07d1105320c9847be1e9da43" translate="yes" xml:space="preserve">
          <source>An NgModule describes how the application parts fit together. Every application has at least one Angular module, the &lt;em&gt;root&lt;/em&gt; module that you bootstrap to launch the application. By convention, it is usually called &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">NgModule描述了应用程序部分如何组合在一起。每个应用程序都至少有一个Angular模块，即您引导启动该应用程序的&lt;em&gt;根&lt;/em&gt;模块。按照惯例，它通常称为 &lt;code&gt;AppModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c2a07c3d512aeae1808c13ce81a7518d850dce90" translate="yes" xml:space="preserve">
          <source>An NgModule is a class marked by the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; takes a metadata object that describes how to compile a component's template and how to create an injector at runtime. It identifies the module's own components, directives, and pipes, making some of them public, through the &lt;code&gt;exports&lt;/code&gt; property, so that external components can use them. &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; can also add service providers to the application dependency injectors.</source>
          <target state="translated">NgModule是由 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器标记的类。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 使用元数据对象，该元数据对象描述如何编译组件的模板以及如何在运行时创建注入器。它通过 &lt;code&gt;exports&lt;/code&gt; 属性标识模块自己的组件，指令和管道，并通过公开属性将其中一些公开，以便外部组件可以使用它们。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 还可以将服务提供者添加到应用程序依赖项注入器中。</target>
        </trans-unit>
        <trans-unit id="0755b300d2bc07deab147985dc0808edcf9b55fc" translate="yes" xml:space="preserve">
          <source>An NgModule is defined by a class decorated with &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt;. The &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; decorator is a function that takes a single metadata object, whose properties describe the module. The most important properties are as follows.</source>
          <target state="translated">NgModule由装饰有 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 的类定义。在 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;()&lt;/code&gt; 装饰是一个函数，它的单一元数据对象，其属性描述该模块。最重要的属性如下。</target>
        </trans-unit>
        <trans-unit id="eeae2a085063e0e52b29bf2aee06c172b48c61d8" translate="yes" xml:space="preserve">
          <source>An Observable that contains a map of the query parameters available to all routes. The map supports retrieving single and multiple values from the query parameter.</source>
          <target state="translated">一个Observable,它包含了所有路由的查询参数的映射。该地图支持从查询参数中获取单个或多个值。</target>
        </trans-unit>
        <trans-unit id="953a469034adc1d17c45b7ae97fc349098337f6a" translate="yes" xml:space="preserve">
          <source>An Observable that contains a map of the required and optional parameters specific to the route. The map supports retrieving single and multiple values from the same parameter.</source>
          <target state="translated">一个Observable,它包含路由所需参数和可选参数的映射。该图支持从同一参数中检索单个和多个值。</target>
        </trans-unit>
        <trans-unit id="b8ab961cde1a70f46035707afbe89037b6b39bfd" translate="yes" xml:space="preserve">
          <source>An SVG snippet template needs an &lt;code&gt;svg:&lt;/code&gt; prefix on its root element to disambiguate the SVG element from an HTML component.</source>
          <target state="translated">SVG代码片段模板的根元素上需要有一个 &lt;code&gt;svg:&lt;/code&gt; 前缀，以使SVG元素与HTML组件保持歧义。</target>
        </trans-unit>
        <trans-unit id="cd68f31ec23fc069bc97d065b7bda95baed68b56" translate="yes" xml:space="preserve">
          <source>An absolute URL. The function does not apply any delta to the current URL.</source>
          <target state="translated">一个绝对的URL。该函数不对当前的URL施加任何delta。</target>
        </trans-unit>
        <trans-unit id="000c69911cb6c7d1b91ec58dcd30afe1c065b726" translate="yes" xml:space="preserve">
          <source>An abstract class for inserting the root test component element in a platform independent way.</source>
          <target state="translated">一个抽象类,用于以独立于平台的方式插入根测试组件元素。</target>
        </trans-unit>
        <trans-unit id="b4296fe66f2a24f1df22fa35742a65ee2ddbb569" translate="yes" xml:space="preserve">
          <source>An abstract class is usually a base class that you can extend. In this app, however there is no class that inherits from &lt;code&gt;MinimalLogger&lt;/code&gt;. The &lt;code&gt;LoggerService&lt;/code&gt; and the &lt;code&gt;DateLoggerService&lt;/code&gt; could have inherited from &lt;code&gt;MinimalLogger&lt;/code&gt;, or they could have implemented it instead, in the manner of an interface. But they did neither. &lt;code&gt;MinimalLogger&lt;/code&gt; is used only as a dependency injection token.</source>
          <target state="translated">抽象类通常是可以扩展的基类。在此应用中，但是没有从 &lt;code&gt;MinimalLogger&lt;/code&gt; 继承的类。该 &lt;code&gt;LoggerService&lt;/code&gt; 和 &lt;code&gt;DateLoggerService&lt;/code&gt; 可能继承自 &lt;code&gt;MinimalLogger&lt;/code&gt; ，或者他们可能反而实现了它，在接口的方式。但是他们都没有。 &lt;code&gt;MinimalLogger&lt;/code&gt; 仅用作依赖项注入令牌。</target>
        </trans-unit>
        <trans-unit id="e9ea8fa94bedea0363391bb71430a1a20bedce5c" translate="yes" xml:space="preserve">
          <source>An add schematic can also update a project with configuration changes, add additional dependencies (such as polyfills), or scaffold package-specific initialization code. For example, the &lt;code&gt;@angular/pwa&lt;/code&gt; schematic turns your application into a PWA by adding an app manifest and service worker, and the &lt;code&gt;@angular/elements&lt;/code&gt; schematic adds the &lt;code&gt;document-register-element.js&lt;/code&gt; polyfill and dependencies for Angular Elements.</source>
          <target state="translated">添加原理图还可以通过更改配置来更新项目，添加其他依赖项（例如polyfill）或特定于脚手架软件包的初始化代码。例如， &lt;code&gt;@angular/pwa&lt;/code&gt; 原理图通过添加应用清单和服务工作者将您的应用程序转换为PWA，而 &lt;code&gt;@angular/elements&lt;/code&gt; 原理图为Angular Elements 添加了 &lt;code&gt;document-register-element.js&lt;/code&gt; polyfill和依赖项。</target>
        </trans-unit>
        <trans-unit id="d13680ec950010fd10b49de481b4c84b7ce6a765" translate="yes" xml:space="preserve">
          <source>An add schematic is typically supplied with a library, so that the library can be added to an existing project with &lt;code&gt;ng add&lt;/code&gt;. The &lt;code&gt;add&lt;/code&gt; command uses your package manager to download new dependencies, and invokes an installation script that is implemented as a schematic.</source>
          <target state="translated">一个库通常提供一个添加原理图，以便可以使用 &lt;code&gt;ng add&lt;/code&gt; 将库添加到现有项目中。该 &lt;code&gt;add&lt;/code&gt; 命令使用您的软件包管理器下载新的依赖，并调用作为示意图实现的安装脚本。</target>
        </trans-unit>
        <trans-unit id="24978e18969beb5970538c790506a8b202bafe4b" translate="yes" xml:space="preserve">
          <source>An address is a good example of information that can be grouped together. Form groups can accept both form control and form group instances as children. This makes composing complex form models easier to maintain and logically group together. To create a nested group in &lt;code&gt;profileForm&lt;/code&gt;, add a nested &lt;code&gt;address&lt;/code&gt; element to the form group instance.</source>
          <target state="translated">地址是可以分组在一起的信息的一个很好的例子。表单组可以接受表单控件和表单组实例作为子级。这使得组成复杂的表格模型更容易维护，并且在逻辑上组合在一起。要在 &lt;code&gt;profileForm&lt;/code&gt; 中创建嵌套组，请将嵌套的 &lt;code&gt;address&lt;/code&gt; 元素添加到表单组实例。</target>
        </trans-unit>
        <trans-unit id="fbe686fd3d18059b9a2de729a643f10662342143" translate="yes" xml:space="preserve">
          <source>An alert or callout &lt;em&gt;must not&lt;/em&gt; contain anything &lt;em&gt;essential&lt;/em&gt; to that understanding. Don't put a critical instruction or a tutorial step in a subsection.</source>
          <target state="translated">警报或标注中&lt;em&gt;不得&lt;/em&gt;包含对该理解&lt;em&gt;至关重要的&lt;/em&gt;任何内容。不要在小节中提出关键性的说明或教程步骤。</target>
        </trans-unit>
        <trans-unit id="00c713d285573373b81643d5061ba989b838ab82" translate="yes" xml:space="preserve">
          <source>An alternative way, that only requires defining each custom element's type once, is augmenting the &lt;code&gt;HTMLElementTagNameMap&lt;/code&gt;, which TypeScript uses to infer the type of a returned element based on its tag name (for DOM methods such as &lt;code&gt;document.createElement()&lt;/code&gt;, &lt;code&gt;document.querySelector()&lt;/code&gt;, etc.):</source>
          <target state="translated">另一种方法，只需定义每个自定义元素的类型一次，就是增加 &lt;code&gt;HTMLElementTagNameMap&lt;/code&gt; ，TypeScript会使用该元素来基于其标记名来推断返回元素的类型（对于DOM方法，例如 &lt;code&gt;document.createElement()&lt;/code&gt; ， &lt;code&gt;document.querySelector()&lt;/code&gt; 等）：</target>
        </trans-unit>
        <trans-unit id="74d83efe7c03fbe91b9f3bcaf5056860a5cc2f6b" translate="yes" xml:space="preserve">
          <source>An animation can influence an end user to &lt;em&gt;perceive&lt;/em&gt; the operation as faster, even when it isn't. Thus, a simple animation can be a cost-effective way to keep users happy, rather than seeking to improve the speed of a server call and having to compensate for circumstances beyond your control, such as an unreliable network connection.</source>
          <target state="translated">动画可以影响最终用户以更快的速度&lt;em&gt;感知&lt;/em&gt;操作，即使实际上并非如此。因此，简单的动画可能是使用户满意的一种经济有效的方式，而不是试图提高服务器调用的速度并不得不补偿超出您控制范围的情况，例如不可靠的网络连接。</target>
        </trans-unit>
        <trans-unit id="f1a2cf38a615729fb3f11d85b93701a4402341a7" translate="yes" xml:space="preserve">
          <source>An animation definition object, containing an array of &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; declarations.</source>
          <target state="translated">一个动画定义对象，其中包含 &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;transition&quot;&gt;transition&lt;/a&gt;()&lt;/code&gt; 声明的数组。</target>
        </trans-unit>
        <trans-unit id="853f9bcb68e4ea413401f09e0440f7461b8af150" translate="yes" xml:space="preserve">
          <source>An animation definition object, containing an array of state and transition declarations.</source>
          <target state="translated">一个动画定义对象,包含一个状态和过渡声明的数组。</target>
        </trans-unit>
        <trans-unit id="8a821ff6927c3292569d9090589163fc3c9aa6c9" translate="yes" xml:space="preserve">
          <source>An animation reference object.</source>
          <target state="translated">一个动画参考对象。</target>
        </trans-unit>
        <trans-unit id="2cf8c3e888172d6c728a4c7f3a60383d2c87ff99" translate="yes" xml:space="preserve">
          <source>An animation requires a &lt;em&gt;trigger&lt;/em&gt;, so that it knows when to start. The &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function collects the states and transitions, and gives the animation a name, so that you can attach it to the triggering element in the HTML template.</source>
          <target state="translated">动画需要使用&lt;em&gt;触发器&lt;/em&gt;，这样才能知道何时开始。该 &lt;code&gt;&lt;a href=&quot;../api/animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; 函数收集状态和转换，并给出了动画的名称，这样就可以将其连接到触发元件在HTML模板。</target>
        </trans-unit>
        <trans-unit id="f31a2cd8172701f8176647e6f4deca92daaccebe" translate="yes" xml:space="preserve">
          <source>An app will send a PUT request to completely replace a resource with updated data. The following &lt;code&gt;HeroesService&lt;/code&gt; example is just like the POST example.</source>
          <target state="translated">应用程序将发送一个PUT请求，以用更新的数据完全替换资源。以下 &lt;code&gt;HeroesService&lt;/code&gt; 示例与POST示例类似。</target>
        </trans-unit>
        <trans-unit id="08d1f63a5c6d8dd57d9894f60a7bfc80b1a4e371" translate="yes" xml:space="preserve">
          <source>An app's components typically define many views, arranged hierarchically. Angular provides the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service to help you define navigation paths among views. The router provides sophisticated in-browser navigational capabilities.</source>
          <target state="translated">应用程序的组件通常定义许多视图，这些视图是按层次排列的。Angular提供了 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 服务，可帮助您定义视图之间的导航路径。该路由器提供了完善的浏览器内导航功能。</target>
        </trans-unit>
        <trans-unit id="ab7bcd611c180d61f273bc0f9ef27d36dfdab3b1" translate="yes" xml:space="preserve">
          <source>An application can subscribe to &lt;code&gt;&lt;a href=&quot;swpush#notificationClicks&quot;&gt;SwPush.notificationClicks&lt;/a&gt;&lt;/code&gt; observable to be notified when a user clicks on a notification. For example:</source>
          <target state="translated">当用户单击通知时，应用程序可以订阅 &lt;code&gt;&lt;a href=&quot;swpush#notificationClicks&quot;&gt;SwPush.notificationClicks&lt;/a&gt;&lt;/code&gt; ,以观察通知。例如：</target>
        </trans-unit>
        <trans-unit id="c9718459a067afc4d9d2901e781c24a2a67e4039" translate="yes" xml:space="preserve">
          <source>An array entry for the &lt;code&gt;styles&lt;/code&gt; and &lt;code&gt;scripts&lt;/code&gt; options can be a simple path string, or an object that points to an extra entry-point file. The associated builder will load that file and its dependencies as a separate bundle during the build. With a configuration object, you have the option of naming the bundle for the entry point, using a &lt;code&gt;bundleName&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;styles&lt;/code&gt; 和 &lt;code&gt;scripts&lt;/code&gt; 选项的数组条目可以是简单的路径字符串，也可以是指向额外入口点文件的对象。关联的构建器将在构建过程中将该文件及其依赖项作为单独的捆绑包加载。对于配置对象，可以选择使用 &lt;code&gt;bundleName&lt;/code&gt; 字段为入口点命名捆绑包。</target>
        </trans-unit>
        <trans-unit id="f6e77b0b12875d380070bf15ea40936f15a6e856" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; objects that define the navigation paths for the application.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; 对象的数组，这些对象定义应用程序的导航路径。</target>
        </trans-unit>
        <trans-unit id="78fd4b888290426cb729569fbcc07df27c92b26d" translate="yes" xml:space="preserve">
          <source>An array of DI tokens used to look up &lt;code&gt;&lt;a href=&quot;canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to activate a child of the component. By default, any user can activate a child.</source>
          <target state="translated">DI令牌数组，用于查找 &lt;code&gt;&lt;a href=&quot;canactivatechild&quot;&gt;CanActivateChild&lt;/a&gt;()&lt;/code&gt; 处理程序，以确定是否允许当前用户激活组件的子级。默认情况下，任何用户都可以激活一个孩子。</target>
        </trans-unit>
        <trans-unit id="6ebf193ce1e81f1e29cdfa0592849a6727b6a98e" translate="yes" xml:space="preserve">
          <source>An array of DI tokens used to look up &lt;code&gt;&lt;a href=&quot;candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to deactivate the component. By default, any user can deactivate.</source>
          <target state="translated">DI令牌数组，用于查找 &lt;code&gt;&lt;a href=&quot;candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;()&lt;/code&gt; 处理程序，以确定是否允许当前用户停用该组件。默认情况下，任何用户都可以停用。</target>
        </trans-unit>
        <trans-unit id="e9ac0547b9e7d50ef7867b566a6ff6650ca3ea97" translate="yes" xml:space="preserve">
          <source>An array of DI tokens used to look up &lt;code&gt;&lt;a href=&quot;canload&quot;&gt;CanLoad&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to load the component. By default, any user can load.</source>
          <target state="translated">DI令牌数组，用于查找 &lt;code&gt;&lt;a href=&quot;canload&quot;&gt;CanLoad&lt;/a&gt;()&lt;/code&gt; 处理程序，以确定是否允许当前用户加载该组件。默认情况下，任何用户都可以加载。</target>
        </trans-unit>
        <trans-unit id="ae39554eae86a4d64a9fdb529096eb2b79364390" translate="yes" xml:space="preserve">
          <source>An array of animation step objects.</source>
          <target state="translated">一组动画步骤对象。</target>
        </trans-unit>
        <trans-unit id="f99aba27ddb3e9a1611aa598c8ceb36b851409de" translate="yes" xml:space="preserve">
          <source>An array of animation styles.</source>
          <target state="translated">一系列的动画风格。</target>
        </trans-unit>
        <trans-unit id="938fa39e1f51c4ab052524820d5860359507a2f0" translate="yes" xml:space="preserve">
          <source>An array of child &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; objects that specifies a nested route configuration.</source>
          <target state="translated">指定嵌套路由配置的子 &lt;code&gt;&lt;a href=&quot;route&quot;&gt;Route&lt;/a&gt;&lt;/code&gt; 对象的数组。</target>
        </trans-unit>
        <trans-unit id="0edd9ac18793ee073ea3aabdfbcfff60f42d2100" translate="yes" xml:space="preserve">
          <source>An array of child controls or control configs. Each child control is given an index when it is registered.</source>
          <target state="translated">一个子控件或控件配置的数组。每个子控件在注册时都有一个索引。</target>
        </trans-unit>
        <trans-unit id="b26827b9a483db95d70a5b32edec9f7eeb17162f" translate="yes" xml:space="preserve">
          <source>An array of child controls. Each child control is given an index where it is registered.</source>
          <target state="translated">一个子控件数组。每个子控件都有一个注册的索引。</target>
        </trans-unit>
        <trans-unit id="9b54d3fb3ef2c358aeb1752efb0ed3c0fabe3497" translate="yes" xml:space="preserve">
          <source>An array of commands to apply.</source>
          <target state="translated">要应用的命令数组。</target>
        </trans-unit>
        <trans-unit id="2152bc4eb46fc4163f9c3942dc1535de09a80686" translate="yes" xml:space="preserve">
          <source>An array of dependency-injection tokens used to look up &lt;code&gt;&lt;a href=&quot;canactivate&quot;&gt;CanActivate&lt;/a&gt;()&lt;/code&gt; handlers, in order to determine if the current user is allowed to activate the component. By default, any user can activate.</source>
          <target state="translated">一组依赖项注入令牌，用于查找 &lt;code&gt;&lt;a href=&quot;canactivate&quot;&gt;CanActivate&lt;/a&gt;()&lt;/code&gt; 处理程序，以确定是否允许当前用户激活该组件。默认情况下，任何用户都可以激活。</target>
        </trans-unit>
        <trans-unit id="5e3b57d965761f24eeb916e84feb687611633061" translate="yes" xml:space="preserve">
          <source>An array of directives imported from another module. For example, don't declare &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; from &lt;code&gt;@angular/forms&lt;/code&gt; because the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; already declares it.</source>
          <target state="translated">从另一个模块导入的指令数组。例如，不要从 &lt;code&gt;@angular/forms&lt;/code&gt; 声明 &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; ，因为 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 已经声明了它。</target>
        </trans-unit>
        <trans-unit id="2e01570e046471a7a45896ef34ac7217adb7671c" translate="yes" xml:space="preserve">
          <source>An array of directives imported from another package. For example, don't declare &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt; from &lt;code&gt;@angular/forms&lt;/code&gt;</source>
          <target state="translated">从另一个包导入的指令数组。例如，不要从 &lt;code&gt;@angular/forms&lt;/code&gt; 声明 &lt;code&gt;FORMS_DIRECTIVES&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9951be90f174b4103642b20c910d1924c5c6d73" translate="yes" xml:space="preserve">
          <source>An array of key-value style pairs.</source>
          <target state="translated">一个键值样式对的数组。</target>
        </trans-unit>
        <trans-unit id="66295ef82d2f1ab3bcf346f0fcb4e92b84d95dcc" translate="yes" xml:space="preserve">
          <source>An array of observed attribute names for the custom element, derived by transforming input property names from the source component.</source>
          <target state="translated">自定义元素的观察到的属性名数组,通过转换源组件的输入属性名得出。</target>
        </trans-unit>
        <trans-unit id="7afefdc87251682711b749d3eb9ba8e9cbe0656a" translate="yes" xml:space="preserve">
          <source>An array of string control names, e.g. &lt;code&gt;['address', 'street']&lt;/code&gt;</source>
          <target state="translated">字符串控件名称的数组，例如 &lt;code&gt;['address', 'street']&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b76cbac2f90bdb301d7a2818c80e539a3c7976c" translate="yes" xml:space="preserve">
          <source>An array of style files to add to the global context of the project. Angular CLI supports CSS imports and all major CSS preprocessors: &lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass/scss&lt;/a&gt;, &lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt;, and &lt;a href=&quot;http://stylus-lang.com/&quot;&gt;stylus&lt;/a&gt;. See more in &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;Styles and scripts configuration&lt;/a&gt; below.</source>
          <target state="translated">样式文件数组，可添加到项目的全局上下文中。Angular CLI支持CSS导入和所有主要的CSS预处理程序：&lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass / scss&lt;/a&gt;，&lt;a href=&quot;http://lesscss.org/&quot;&gt;less&lt;/a&gt;和&lt;a href=&quot;http://stylus-lang.com/&quot;&gt;stylus&lt;/a&gt;。在下面的&lt;a href=&quot;workspace-config#style-script-config&quot;&gt;样式和脚本配置&lt;/a&gt;中查看更多信息。</target>
        </trans-unit>
        <trans-unit id="e27d63f99fc67d312604ea9ee9c6b65762ab5602" translate="yes" xml:space="preserve">
          <source>An array that the router interprets as a routing instruction. You can bind that array to a &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; or pass the array as an argument to the &lt;code&gt;Router.navigate&lt;/code&gt; method.</source>
          <target state="translated">路由器将其解释为路由指令的数组。您可以将该数组绑定到 &lt;code&gt;&lt;a href=&quot;../api/router/routerlink&quot;&gt;RouterLink&lt;/a&gt;&lt;/code&gt; 或将该数组作为参数传递给 &lt;code&gt;Router.navigate&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="861576caffeca135d6970293ddc50aeae0da4952" translate="yes" xml:space="preserve">
          <source>An asterisk (*), to use auto-styling, where styles are derived from the element being animated and applied to the animation when it starts.</source>
          <target state="translated">星号(*),表示使用自动样式,其中的样式来自于被动画化的元素,并在动画开始时应用到动画中。</target>
        </trans-unit>
        <trans-unit id="85c093ac8ffcfa867935ecc8abfeb1ece5cb34f9" translate="yes" xml:space="preserve">
          <source>An asterisk &lt;code&gt;*&lt;/code&gt; or &lt;em&gt;wildcard&lt;/em&gt; matches any animation state. This is useful for defining transitions that apply regardless of the HTML element's start or end state.</source>
          <target state="translated">星号 &lt;code&gt;*&lt;/code&gt; 或&lt;em&gt;通配符可&lt;/em&gt;匹配任何动画状态。这对于定义无论HTML元素的开始或结束状态如何都适用的过渡非常有用。</target>
        </trans-unit>
        <trans-unit id="d2c79a074e3226945b2f718538f0cac88a9d5cd4" translate="yes" xml:space="preserve">
          <source>An async &lt;code&gt;beforeEach()&lt;/code&gt; that compiles the components</source>
          <target state="translated">一个异步的 &lt;code&gt;beforeEach()&lt;/code&gt; ，用于编译组件</target>
        </trans-unit>
        <trans-unit id="b30c39a90b9eb055d07e0fe54a86ab3c86a6eda9" translate="yes" xml:space="preserve">
          <source>An attribute directive minimally requires building a controller class annotated with &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt;, which specifies the selector that identifies the attribute. The controller class implements the desired directive behavior.</source>
          <target state="translated">属性指令至少需要构建一个带有 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 注释的控制器类，该类指定标识该属性的选择器。控制器类实现所需的指令行为。</target>
        </trans-unit>
        <trans-unit id="abe92ff3d2c0bf40f87b15fcf882a5d02f6a804f" translate="yes" xml:space="preserve">
          <source>An attribute directive that updates styles for the containing HTML element. Sets one or more style properties, specified as colon-separated key-value pairs. The key is a style name, with an optional &lt;code&gt;.&amp;lt;unit&amp;gt;&lt;/code&gt; suffix (such as 'top.px', 'font-style.em'). The value is an expression to be evaluated. The resulting non-null value, expressed in the given unit, is assigned to the given style property. If the result of evaluation is null, the corresponding style is removed.</source>
          <target state="translated">属性指令，用于更新包含的HTML元素的样式。设置一个或多个样式属性，指定为以冒号分隔的键/值对。关键是样式名称，带有可选的 &lt;code&gt;.&amp;lt;unit&amp;gt;&lt;/code&gt; 后缀（例如'top.px'，'font-style.em'）。该值是要评估的表达式。将以给定单位表示的结果非空值分配给给定的style属性。如果评估结果为null，则删除相应的样式。</target>
        </trans-unit>
        <trans-unit id="00708a626fb7b0f03fc253c32c37767743db5166" translate="yes" xml:space="preserve">
          <source>An element property between enclosing square brackets identifies the target property. The target property in the following code is the image element's &lt;code&gt;src&lt;/code&gt; property.</source>
          <target state="translated">括在方括号之间的element属性标识目标属性。以下代码中的target属性是图像元素的 &lt;code&gt;src&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="9b24495f5005b7c33475d93c0b8c85637f99d1d3" translate="yes" xml:space="preserve">
          <source>An element that would be a shadow DOM host in native encapsulation has a generated &lt;code&gt;_nghost&lt;/code&gt; attribute. This is typically the case for component host elements.</source>
          <target state="translated">在本机封装中可能是影子DOM主机的元素具有生成的 &lt;code&gt;_nghost&lt;/code&gt; 属性。组件宿主元素通常是这种情况。</target>
        </trans-unit>
        <trans-unit id="3f8c815124d91c2fc5997a18a121c1e43c5849b4" translate="yes" xml:space="preserve">
          <source>An element within a component's view has a &lt;code&gt;_ngcontent&lt;/code&gt; attribute that identifies to which host's emulated shadow DOM this element belongs.</source>
          <target state="translated">组件视图中的元素具有 &lt;code&gt;_ngcontent&lt;/code&gt; 属性，该属性标识此元素所属的主机的模拟影子DOM。</target>
        </trans-unit>
        <trans-unit id="50e94825f745e933e83821947b32eef815608bd5" translate="yes" xml:space="preserve">
          <source>An empty programmatic controller for reusable animations. Used internally when animations are disabled, to avoid checking for the null case when an animation player is expected.</source>
          <target state="translated">一个空的可重用动画的程序化控制器。当动画被禁用时,在内部使用,以避免在预期动画播放器时检查空的情况。</target>
        </trans-unit>
        <trans-unit id="ed30450a13cb9d35e8439583113edc0ba728506e" translate="yes" xml:space="preserve">
          <source>An encapsulation policy for the template and CSS styles. One of:</source>
          <target state="translated">对模板和CSS样式的封装策略。其中:</target>
        </trans-unit>
        <trans-unit id="c0d78d1758f0450a2a872695da025c9d5f74b2f8" translate="yes" xml:space="preserve">
          <source>An end-to-end (e2e) framework for Angular apps. Built on top of &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs&quot;&gt;WebDriverJS&lt;/a&gt;.</source>
          <target state="translated">Angular应用程序的端到端（e2e）框架。建立在&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs&quot;&gt;WebDriverJS&lt;/a&gt;之上。</target>
        </trans-unit>
        <trans-unit id="21691cd602a408abe7003eba565465e96100654c" translate="yes" xml:space="preserve">
          <source>An end-to-end test project (in the e2e subfolder).</source>
          <target state="translated">一个端到端测试项目(在e2e子文件夹中)。</target>
        </trans-unit>
        <trans-unit id="af60cca801f9270a2ac760cef8104b5168df0bab" translate="yes" xml:space="preserve">
          <source>An entry component is any component that Angular loads &lt;em&gt;imperatively&lt;/em&gt; by type.</source>
          <target state="translated">入口组件是Angular &lt;em&gt;强制&lt;/em&gt;按类型加载的任何组件。</target>
        </trans-unit>
        <trans-unit id="520ebcf19ed2e8582e1e23356f207f7c8557c18b" translate="yes" xml:space="preserve">
          <source>An entry component is any component that Angular loads imperatively, (which means you&amp;rsquo;re not referencing it in the template), by type. You specify an entry component by bootstrapping it in an NgModule, or including it in a routing definition.</source>
          <target state="translated">入口组件是Angular强制性按类型加载的任何组件（这意味着您没有在模板中引用它）。通过将入口组件引导到NgModule中或将其包含在路由定义中来指定入口组件。</target>
        </trans-unit>
        <trans-unit id="82270f943c0fc2fd25dd54fa68af7719850dddec" translate="yes" xml:space="preserve">
          <source>An event emitted when a new version of the app has been downloaded and activated.</source>
          <target state="translated">当应用程序的新版本被下载并激活时发出的事件。</target>
        </trans-unit>
        <trans-unit id="48d381a39eba1f1a2428a868079d462a7aeb50e8" translate="yes" xml:space="preserve">
          <source>An event emitted when a new version of the app is available.</source>
          <target state="translated">当应用程序的新版本可用时发出的事件。</target>
        </trans-unit>
        <trans-unit id="5f859b22e49aae9499ff79db84034121aa16f513" translate="yes" xml:space="preserve">
          <source>An event indicating that the request was sent to the server. Useful when a request may be retried multiple times, to distinguish between retries on the final event stream.</source>
          <target state="translated">表示请求被发送到服务器的事件。当一个请求可能被多次重试时,用于区分最终事件流的重试。</target>
        </trans-unit>
        <trans-unit id="9f03c6d306c2112882c6a9ff7babb869d7b460be" translate="yes" xml:space="preserve">
          <source>An event stream for routing events in this NgModule.</source>
          <target state="translated">该NgModule中用于路由事件的事件流。</target>
        </trans-unit>
        <trans-unit id="3d7eb391832c5ed9e7dbb68d3c82c8ad415923bf" translate="yes" xml:space="preserve">
          <source>An event triggered at the end of the Guard phase of routing.</source>
          <target state="translated">在路由的Guard阶段结束时触发的事件。</target>
        </trans-unit>
        <trans-unit id="b5a43600d43e0d7f206b35a9f776d6d2f3d76290" translate="yes" xml:space="preserve">
          <source>An event triggered at the end of the Resolve phase of routing.</source>
          <target state="translated">在路由的Resolve阶段结束时触发的事件。</target>
        </trans-unit>
        <trans-unit id="fe8df6a007856d3efe69109b534e4f1717bb8417" translate="yes" xml:space="preserve">
          <source>An event triggered at the end of the activation part of the Resolve phase of routing.</source>
          <target state="translated">在路由的Resolve阶段的激活部分结束时触发的事件。</target>
        </trans-unit>
        <trans-unit id="7c5dc3b5c6dd3914c069ea105811ad81563ab0a4" translate="yes" xml:space="preserve">
          <source>An event triggered at the end of the child-activation part of the Resolve phase of routing.</source>
          <target state="translated">在路由的Resolve阶段的子程序激活部分结束时触发的事件。</target>
        </trans-unit>
        <trans-unit id="15f0a189e2487ac88e2d4db8817074ffbe2aa465" translate="yes" xml:space="preserve">
          <source>An event triggered at the start of the Guard phase of routing.</source>
          <target state="translated">在路由的Guard阶段开始时触发的事件。</target>
        </trans-unit>
        <trans-unit id="c5e5ee18107806be14081a1525e3498a3843b09e" translate="yes" xml:space="preserve">
          <source>An event triggered at the start of the activation part of the Resolve phase of routing.</source>
          <target state="translated">在路由的Resolve阶段的激活部分开始时触发的事件。</target>
        </trans-unit>
        <trans-unit id="9ea7570ad5b425b7d9a9e4e2875bb8e236c63db8" translate="yes" xml:space="preserve">
          <source>An event triggered at the start of the child-activation part of the Resolve phase of routing.</source>
          <target state="translated">在路由的Resolve阶段的子程序激活部分开始时触发的事件。</target>
        </trans-unit>
        <trans-unit id="8df532e1a0fd9fd1688012d2fd01b43742a57d58" translate="yes" xml:space="preserve">
          <source>An event triggered at the the start of the Resolve phase of routing.</source>
          <target state="translated">在路由的Resolve阶段开始时触发的事件。</target>
        </trans-unit>
        <trans-unit id="253d4698f507f43fb4f138e171a5603c169e6b04" translate="yes" xml:space="preserve">
          <source>An event triggered before lazy loading a route configuration.</source>
          <target state="translated">在懒惰加载途径配置前触发的事件。</target>
        </trans-unit>
        <trans-unit id="76c49a5cb92ffd70c824965b9f42fd4ce45e7e75" translate="yes" xml:space="preserve">
          <source>An event triggered by scrolling.</source>
          <target state="translated">由滚动触发的事件。</target>
        </trans-unit>
        <trans-unit id="ce7314f14718cef6d4f51d25b4d25720245fbf87" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation ends successfully.</source>
          <target state="translated">导航成功结束时触发的事件。</target>
        </trans-unit>
        <trans-unit id="1ee0707fd824da0de403c96b737123ba95a464d8" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation fails due to an unexpected error.</source>
          <target state="translated">由于意外错误导致导航失败时触发的事件。</target>
        </trans-unit>
        <trans-unit id="4238fb65031dc9605ba87d9f0fff4bf6e9d4cbd3" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation is canceled, directly or indirectly.</source>
          <target state="translated">直接或间接取消导航时触发的事件。</target>
        </trans-unit>
        <trans-unit id="33bb43f2f8b4617aa8b509c9aa64c24d761d2224" translate="yes" xml:space="preserve">
          <source>An event triggered when a navigation starts.</source>
          <target state="translated">导航启动时触发的事件。</target>
        </trans-unit>
        <trans-unit id="22293e5381cfc4742bf52876ed6736a5a5826956" translate="yes" xml:space="preserve">
          <source>An event triggered when a route has been lazy loaded.</source>
          <target state="translated">途径被懒惰加载时触发的事件。</target>
        </trans-unit>
        <trans-unit id="55363e49b885f6858dfa81382ac98d5cf71873c4" translate="yes" xml:space="preserve">
          <source>An event triggered when routes are recognized.</source>
          <target state="translated">途径被识别时触发的事件。</target>
        </trans-unit>
        <trans-unit id="7e1901e8c0041a6d1ea4f1605828d40b98b1883e" translate="yes" xml:space="preserve">
          <source>An example of a &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;MyCustomComponent&lt;/code&gt; class, which in JavaScript is be represented by the &lt;code&gt;MyCustomComponent&lt;/code&gt; constructor function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; 一个示例是 &lt;code&gt;MyCustomComponent&lt;/code&gt; 类，该类在JavaScript中由 &lt;code&gt;MyCustomComponent&lt;/code&gt; 构造函数表示。</target>
        </trans-unit>
        <trans-unit id="1d5adc14822f75158d6c5cd26073d6f3aa532ea8" translate="yes" xml:space="preserve">
          <source>An example of what goes into a declarations array follows:</source>
          <target state="translated">下面以一个例子来说明声明数组中的内容。</target>
        </trans-unit>
        <trans-unit id="8f997a90370a05fd947363bc944f2091bb627c9b" translate="yes" xml:space="preserve">
          <source>An execution context for a set of asynchronous tasks. Useful for debugging, profiling, and testing apps that include asynchronous operations such as event processing, promises, and calls to remote servers.</source>
          <target state="translated">一组异步任务的执行上下文。对于调试、剖析和测试包含异步操作(如事件处理、承诺和对远程服务器的调用)的应用程序非常有用。</target>
        </trans-unit>
        <trans-unit id="13b6181d7b35ce64a903a0013d72e45b403c9e64" translate="yes" xml:space="preserve">
          <source>An expression may also refer to properties of the &lt;em&gt;template's&lt;/em&gt; context such as a template input variable,</source>
          <target state="translated">表达式也可以引用&lt;em&gt;模板&lt;/em&gt;上下文的属性，例如模板输入变量，</target>
        </trans-unit>
        <trans-unit id="abc3de7d68044167c106cb4666b4476c9f78e7e9" translate="yes" xml:space="preserve">
          <source>An expression that describes a state change.</source>
          <target state="translated">一种描述状态变化的表达方式。</target>
        </trans-unit>
        <trans-unit id="4e9dd8fe2f87c25f59015739842c4048179f4a27" translate="yes" xml:space="preserve">
          <source>An icon to use for this application in the bookmark bar.</source>
          <target state="translated">在书签栏中用于此应用程序的图标。</target>
        </trans-unit>
        <trans-unit id="010b45774596984624a0a539cd324f8a04170e87" translate="yes" xml:space="preserve">
          <source>An identifying name for the new element, unique within the namespace.</source>
          <target state="translated">新元素的识别名称,在命名空间内独一无二。</target>
        </trans-unit>
        <trans-unit id="2f2a84b30278a5736d58839d9cbed284d382fee8" translate="yes" xml:space="preserve">
          <source>An identifying string.</source>
          <target state="translated">一个识别字符串;</target>
        </trans-unit>
        <trans-unit id="f26b26e037d4dafb2598887c06f9e13ff1dada92" translate="yes" xml:space="preserve">
          <source>An implementation of &lt;code&gt;preload&lt;/code&gt; must return an &lt;code&gt;Observable&lt;/code&gt;. If the route should preload, it returns the observable returned by calling the loader function. If the route should &lt;em&gt;not&lt;/em&gt; preload, it returns an &lt;code&gt;Observable&lt;/code&gt; of &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;preload&lt;/code&gt; 的实现必须返回 &lt;code&gt;Observable&lt;/code&gt; 。如果路由应该预加载，则返回通过调用loader函数返回的observable。如果路由应该&lt;em&gt;不&lt;/em&gt;预加载，它返回一个 &lt;code&gt;Observable&lt;/code&gt; 的 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34f205e2b23ffe79df4ed0d6614e52beb270510e" translate="yes" xml:space="preserve">
          <source>An important alert.</source>
          <target state="translated">一个重要的警报。</target>
        </trans-unit>
        <trans-unit id="7a0aa966364fd27e3f5561134e767a3d22292508" translate="yes" xml:space="preserve">
          <source>An important part of inter-linking dependencies is linking the two main modules together. This is where &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; comes in. Use it to create an AngularJS module&amp;mdash;one that you can use as a dependency in your main AngularJS module&amp;mdash;that will bootstrap your main Angular module and kick off the Angular part of the hybrid app. In a sense, it &quot;downgrades&quot; an Angular module to an AngularJS module.</source>
          <target state="translated">相互依赖关系的重要部分是将两个主要模块链接在一起。这是 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 进入的地方。使用它来创建AngularJS模块（可以将其用作主要AngularJS模块中的依赖项），该模块将引导您的主要Angular模块并启动混合应用程序的Angular部分。从某种意义上讲，它会将Angular模块&amp;ldquo;降级&amp;rdquo;到AngularJS模块。</target>
        </trans-unit>
        <trans-unit id="ab48629b7689b97b24ca0b4882d2d3231b1a3b2b" translate="yes" xml:space="preserve">
          <source>An important point</source>
          <target state="translated">重要的一点</target>
        </trans-unit>
        <trans-unit id="ed53c740060de1f8ed241d39eeda4823a21a4860" translate="yes" xml:space="preserve">
          <source>An impure</source>
          <target state="translated">一个不纯的</target>
        </trans-unit>
        <trans-unit id="12aba83ea86ac796e838bb36582bc62046067932" translate="yes" xml:space="preserve">
          <source>An impure caching pipe</source>
          <target state="translated">不纯的缓存管</target>
        </trans-unit>
        <trans-unit id="1ea978cb2e1e36fb4a70cc831345c53ddda16051" translate="yes" xml:space="preserve">
          <source>An initial skeleton app project, also called &lt;code&gt;angular-tour-of-heroes&lt;/code&gt; (in the &lt;code&gt;src&lt;/code&gt; subfolder).</source>
          <target state="translated">最初的骨架应用程序项目，也称为 &lt;code&gt;angular-tour-of-heroes&lt;/code&gt; （在 &lt;code&gt;src&lt;/code&gt; 子文件夹中）。</target>
        </trans-unit>
        <trans-unit id="684d4fd3e575d1f3658b87fda7811795222f7d50" translate="yes" xml:space="preserve">
          <source>An injectable &lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJS Manager&lt;/a&gt; for gesture recognition. Configures specific event recognition.</source>
          <target state="translated">用于手势识别的可注射&lt;a href=&quot;http://hammerjs.github.io/api/#hammer.manager&quot;&gt;HammerJS Manager&lt;/a&gt;。配置特定的事件识别。</target>
        </trans-unit>
        <trans-unit id="e57404a3f8f2b06b4a9a8d4c525e78bb9596739f" translate="yes" xml:space="preserve">
          <source>An injectable service for executing work inside or outside of the Angular zone.</source>
          <target state="translated">一个可注入的服务,用于执行Angular区域内外的工作。</target>
        </trans-unit>
        <trans-unit id="14d3b55eeed336a9ad62e5019f3e2718f4231406" translate="yes" xml:space="preserve">
          <source>An injectable service that produces an animation sequence programmatically within an Angular component or directive. Provided by the &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一种可注入服务，可在Angular组件或指令中以编程方式生成动画序列。由 &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;../platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt; 提供。</target>
        </trans-unit>
        <trans-unit id="0cc6e94c0fa46ea1d4f9498c818950af4fca8285" translate="yes" xml:space="preserve">
          <source>An injectable service that produces an animation sequence programmatically within an Angular component or directive. Provided by the &lt;code&gt;&lt;a href=&quot;platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一种可注入服务，可在Angular组件或指令中以编程方式生成动画序列。由 &lt;code&gt;&lt;a href=&quot;platform-browser/animations/browseranimationsmodule&quot;&gt;BrowserAnimationsModule&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;platform-browser/animations/noopanimationsmodule&quot;&gt;NoopAnimationsModule&lt;/a&gt;&lt;/code&gt; 提供。</target>
        </trans-unit>
        <trans-unit id="36689b6e9bdc70cc4224cf76d38b74712cd514ab" translate="yes" xml:space="preserve">
          <source>An injectable service that provides event management for Angular through a browser plug-in.</source>
          <target state="translated">一个可注入的服务,通过浏览器插件为Angular提供事件管理。</target>
        </trans-unit>
        <trans-unit id="77754ebc786ee25c6412a201040016a7021c3eb2" translate="yes" xml:space="preserve">
          <source>An injectable service that provides factory methods for creating control instances.</source>
          <target state="translated">一个可注入的服务,为创建控制实例提供工厂方法。</target>
        </trans-unit>
        <trans-unit id="b6db0da0e2ea0ddb022d862a7cffe1db1b964118" translate="yes" xml:space="preserve">
          <source>An injection token. (Typically an instance of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt;, but can be &lt;code&gt;any&lt;/code&gt;).</source>
          <target state="translated">注入令牌。（通常是 &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 的实例，但可以是 &lt;code&gt;any&lt;/code&gt; 实例）。</target>
        </trans-unit>
        <trans-unit id="c26157bc44c92eb491ad786930dfb1f795c4cbb9" translate="yes" xml:space="preserve">
          <source>An injection token. Typically an instance of &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt;, but can be &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="translated">注入令牌。通常是 &lt;code&gt;&lt;a href=&quot;type&quot;&gt;Type&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 的实例，但可以是 &lt;code&gt;any&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="652138f88939ea014fbae7aa304e8948053f1891" translate="yes" xml:space="preserve">
          <source>An injector creates dependencies, and maintains a &lt;em&gt;container&lt;/em&gt; of dependency instances that it reuses if possible.</source>
          <target state="translated">注入程序创建依赖关系，并维护一个依赖关系实例的&lt;em&gt;容器&lt;/em&gt;，如果可能的话，可以重复使用该&lt;em&gt;容器&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9e27f51512e0a5635f6bf58fdb2c50c6038e307e" translate="yes" xml:space="preserve">
          <source>An injector provides a singleton instance of a dependency, and can inject this same instance in multiple components.</source>
          <target state="translated">注入器提供了一个依赖关系的单人实例,并且可以在多个组件中注入同一个实例。</target>
        </trans-unit>
        <trans-unit id="cb056887b035ea4cad1a0a3629cae07df2758572" translate="yes" xml:space="preserve">
          <source>An inline template for an Angular component. If provided, do not supply a template file using &lt;code&gt;templateUrl&lt;/code&gt;.</source>
          <target state="translated">Angular组件的内联模板。如果提供，请勿使用 &lt;code&gt;templateUrl&lt;/code&gt; 提供模板文件。</target>
        </trans-unit>
        <trans-unit id="12722bfa1da4de0ba2c43d261a9de445ffeefb87" translate="yes" xml:space="preserve">
          <source>An instance of this class is returned as an event parameter when an animation callback is captured for an animation either during the start or done phase.</source>
          <target state="translated">当一个动画回调在开始或完成阶段被捕获时,这个类的实例会作为事件参数返回。</target>
        </trans-unit>
        <trans-unit id="816e6be2b2fa74b464d5b2a881dae8af20cb83e3" translate="yes" xml:space="preserve">
          <source>An interceptor that alters headers can be used for a number of different operations, including:</source>
          <target state="translated">改变头部的拦截器可用于许多不同的操作,包括:</target>
        </trans-unit>
        <trans-unit id="9146ec3aa23e8cf25a3395bbb20839d604c7a736" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to check if the lazy loaded module should be loaded. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">用于定义一个类的接口,路由器应该首先调用该类来检查是否应该加载懒惰加载模块。应该返回一个布尔值|UrlTree或一个解析为布尔值|UrlTree的Observable/Promise。</target>
        </trans-unit>
        <trans-unit id="6a938b52cef6ce82227e8252bf81a0112ba711aa" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to determine if it should activate the child route. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">一个接口,用于定义一个路由器应该首先调用的类,以确定是否应该激活子路由。应该返回一个布尔值|UrlTree或一个解析为布尔值|UrlTree的Observable/Promise。</target>
        </trans-unit>
        <trans-unit id="000a11bfba255074626058505b1d21f8b78bbe21" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to determine if it should activate this component. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">一个接口,用于定义路由器应首先调用的类,以确定是否应激活该组件。应该返回一个布尔值|UrlTree或一个解析为布尔值|UrlTree的Observable/Promise。</target>
        </trans-unit>
        <trans-unit id="b4e8a5b77f471bb6811774face810e9cbf43b14d" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to determine if it should deactivate this component after a navigation. Should return a boolean|UrlTree or an Observable/Promise that resolves to a boolean|UrlTree.</source>
          <target state="translated">用于定义一个类的接口,路由器应首先调用该类来决定是否应在导航后停用该组件。应该返回一个布尔值|UrlTree或一个解析为布尔值|UrlTree的Observable/Promise。</target>
        </trans-unit>
        <trans-unit id="3e995f1eb4c099a6b16ff48012d56d513be3a14a" translate="yes" xml:space="preserve">
          <source>An interface for defining a class that the router should call first to resolve route data before rendering the route. Should return a value or an Observable/Promise that resolves to a value.</source>
          <target state="translated">一个接口,用于定义一个类,路由器应首先调用该类来解析路由数据,然后再渲染路由。应该返回一个值或一个解析到值的Observable/Promise。</target>
        </trans-unit>
        <trans-unit id="82597c22511f52de70969beecef4f3b3898eaa24" translate="yes" xml:space="preserve">
          <source>An interface implemented by &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">由 &lt;code&gt;&lt;a href=&quot;formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令实现的接口。</target>
        </trans-unit>
        <trans-unit id="1a14f9da95e6f6ff982b6626eb7c8628c5efdd37" translate="yes" xml:space="preserve">
          <source>An interface implemented by &lt;code&gt;&lt;a href=&quot;forms/formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directives.</source>
          <target state="translated">由 &lt;code&gt;&lt;a href=&quot;forms/formgroupdirective&quot;&gt;FormGroupDirective&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令实现的接口。</target>
        </trans-unit>
        <trans-unit id="8335c6297a5a6cba86cf2d3d45984a8f36d407fb" translate="yes" xml:space="preserve">
          <source>An interface implemented by all Angular type decorators, which allows them to be used as decorators as well as Angular syntax.</source>
          <target state="translated">一个由所有Angular类型装饰器实现的接口,它允许它们作为装饰器以及Angular语法使用。</target>
        </trans-unit>
        <trans-unit id="3251b8b344b69e19ad57135081e0c24c46b50288" translate="yes" xml:space="preserve">
          <source>An interface implemented by classes that perform asynchronous validation.</source>
          <target state="translated">由执行异步验证的类实现的接口。</target>
        </trans-unit>
        <trans-unit id="245737c8ad1fc4ff34dc1309e4af6d2a74cb1268" translate="yes" xml:space="preserve">
          <source>An interface implemented by classes that perform synchronous validation.</source>
          <target state="translated">由执行同步验证的类实现的接口。</target>
        </trans-unit>
        <trans-unit id="3553332395db0f3216b86aa5d6d3855e57638927" translate="yes" xml:space="preserve">
          <source>An interface that a function passed into &lt;a href=&quot;core/forwardref&quot;&gt;&lt;code&gt;forwardRef&lt;/code&gt;&lt;/a&gt; has to implement.</source>
          <target state="translated">传递给&lt;a href=&quot;core/forwardref&quot;&gt; &lt;code&gt;forwardRef&lt;/code&gt; &lt;/a&gt;的函数必须实现的接口。</target>
        </trans-unit>
        <trans-unit id="27ca29f9f070d1b99e4a907d433e49c3c9473f07" translate="yes" xml:space="preserve">
          <source>An interface that a function passed into &lt;a href=&quot;forwardref&quot;&gt;&lt;code&gt;forwardRef&lt;/code&gt;&lt;/a&gt; has to implement.</source>
          <target state="translated">传递给&lt;a href=&quot;forwardref&quot;&gt; &lt;code&gt;forwardRef&lt;/code&gt; &lt;/a&gt;的函数必须实现的接口。</target>
        </trans-unit>
        <trans-unit id="bbe82c81f390998fc2ac12e6a34f4c68ebf29846" translate="yes" xml:space="preserve">
          <source>An interface that allows you to tap into the lifecycle of &lt;a href=&quot;glossary#directive&quot;&gt;directives&lt;/a&gt; and &lt;a href=&quot;glossary#component&quot;&gt;components&lt;/a&gt; as they are created, updated, and destroyed.</source>
          <target state="translated">该界面允许您利用&lt;a href=&quot;glossary#directive&quot;&gt;指令&lt;/a&gt;和&lt;a href=&quot;glossary#component&quot;&gt;组件&lt;/a&gt;在创建，更新和销毁时的生命周期。</target>
        </trans-unit>
        <trans-unit id="d84af51a9faa209f199da3634be1aa93a907fb58" translate="yes" xml:space="preserve">
          <source>An interface that is implemented by pipes in order to perform a transformation. Angular invokes the &lt;code&gt;transform&lt;/code&gt; method with the value of a binding as the first argument, and any parameters as the second argument in list form.</source>
          <target state="translated">由管道实现以执行转换的接口。Angular 以列表形式将绑定值作为第一个参数，并将任何参数作为第二个参数来调用 &lt;code&gt;transform&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="c36481e852a7d993e92e4ce11d6b4beef0f3fdd1" translate="yes" xml:space="preserve">
          <source>An internal callback method triggered before the instance is destroyed. Removes the group from its parent group.</source>
          <target state="translated">在实例被销毁前触发的内部回调方法。将该组从其父组中删除。</target>
        </trans-unit>
        <trans-unit id="b7240884a65be7f42acffdd93220a4238efbb924" translate="yes" xml:space="preserve">
          <source>An internal callback method triggered on the instance after the inputs are set. Registers the group with its parent group.</source>
          <target state="translated">输入设置后,在实例上触发的内部回调方法。将组与父组注册在一起。</target>
        </trans-unit>
        <trans-unit id="459b33ae0fa271dad1c7cca97ee631d68755d38d" translate="yes" xml:space="preserve">
          <source>An internal resolved representation of a &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; used by the &lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;core/injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 使用的 &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 的内部解析表示形式。</target>
        </trans-unit>
        <trans-unit id="1d15a7d32fabd101f937535387a49e1f6c6b6998" translate="yes" xml:space="preserve">
          <source>An internal resolved representation of a &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; used by the &lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;injector&quot;&gt;Injector&lt;/a&gt;&lt;/code&gt; 使用的 &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 的内部解析表示形式。</target>
        </trans-unit>
        <trans-unit id="65e2c36a1d8f607a0d4bae22e070ff4a3a76b579" translate="yes" xml:space="preserve">
          <source>An internal resolved representation of a factory function created by resolving &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通过解析 &lt;code&gt;&lt;a href=&quot;core/provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 创建的工厂功能的内部解析表示形式。</target>
        </trans-unit>
        <trans-unit id="46810c6b6144599b1f85ccf176d9da78c21a7d6f" translate="yes" xml:space="preserve">
          <source>An internal resolved representation of a factory function created by resolving &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通过解析 &lt;code&gt;&lt;a href=&quot;provider&quot;&gt;Provider&lt;/a&gt;&lt;/code&gt; 创建的工厂功能的内部解析表示形式。</target>
        </trans-unit>
        <trans-unit id="fc05d68b0ca26dd2f9ba579fc3670a3efd223e13" translate="yes" xml:space="preserve">
          <source>An introduction to a few core router concepts will help orient you to the details that follow.</source>
          <target state="translated">对几个核心路由器概念的介绍将帮助你对接下来的细节进行定位。</target>
        </trans-unit>
        <trans-unit id="c5fc8580ca92e73035b10dc5866e8d34b5b6db8c" translate="yes" xml:space="preserve">
          <source>An object containing JavaScript script files to add to the global context of the project. The scripts are loaded exactly as if you had added them in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag inside &lt;code&gt;index.html&lt;/code&gt;. See more in &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;Styles and scripts configuration&lt;/a&gt; below.</source>
          <target state="translated">包含要添加到项目的全局上下文的JavaScript脚本文件的对象。加载脚本的方式与将它们添加到 &lt;code&gt;index.html&lt;/code&gt; 中的 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记中的方式完全相同。在下面的&lt;a href=&quot;workspace-config#style-script-config&quot;&gt;样式和脚本配置&lt;/a&gt;中查看更多信息。</target>
        </trans-unit>
        <trans-unit id="0798b0518cd85723d5bc73026ce32f7acc7ee37e" translate="yes" xml:space="preserve">
          <source>An object containing an identifier for the app to transition. The ID must match between the client and server versions of the app.</source>
          <target state="translated">一个对象,其中包含应用程序要转换的标识符。该ID必须在应用程序的客户端和服务器版本之间匹配。</target>
        </trans-unit>
        <trans-unit id="34a705cd2ace4927bf00eb0c703ea16e82b4ece4" translate="yes" xml:space="preserve">
          <source>An object containing any errors generated by failing validation, or null if there are no errors.</source>
          <target state="translated">一个包含验证失败所产生的任何错误的对象,如果没有错误则为空。</target>
        </trans-unit>
        <trans-unit id="c8e4c11b42659fb04de7da11d6fd9484b2d147cb" translate="yes" xml:space="preserve">
          <source>An object containing files and their compile-time replacements. See more in &lt;a href=&quot;build#configure-target-specific-file-replacements&quot;&gt;Configure target-specific file replacements&lt;/a&gt;.</source>
          <target state="translated">包含文件及其编译时替换的对象。请参阅&lt;a href=&quot;build#configure-target-specific-file-replacements&quot;&gt;配置特定&lt;/a&gt;于目标的文件替换中的更多内容。</target>
        </trans-unit>
        <trans-unit id="dc0d6006c1674c97b20fc570175b89cf3a3b1ef7" translate="yes" xml:space="preserve">
          <source>An object containing option-value pairs to pass to style preprocessors. See more in &lt;a href=&quot;workspace-config#style-script-config&quot;&gt;Styles and scripts configuration&lt;/a&gt; below.</source>
          <target state="translated">包含要传递给样式预处理器的选项-值对的对象。在下面的&lt;a href=&quot;workspace-config#style-script-config&quot;&gt;样式和脚本配置&lt;/a&gt;中查看更多信息。</target>
        </trans-unit>
        <trans-unit id="8b744df23ce437f3884fe3ab329fc10884f3b60c" translate="yes" xml:space="preserve">
          <source>An object containing paths to static assets to add to the global context of the project. The default paths point to the project's icon file and its &lt;code&gt;assets&lt;/code&gt; folder. See more in &lt;a href=&quot;workspace-config#asset-config&quot;&gt;Assets configuration&lt;/a&gt; below.</source>
          <target state="translated">包含要添加到项目的全局上下文的静态资产路径的对象。默认路径指向项目的图标文件及其 &lt;code&gt;assets&lt;/code&gt; 文件夹。在下面的&lt;a href=&quot;workspace-config#asset-config&quot;&gt;资产配置&lt;/a&gt;中查看更多信息。</target>
        </trans-unit>
        <trans-unit id="454bf511ebc9e0613519ea5b260dc6ce1bee629f" translate="yes" xml:space="preserve">
          <source>An object containing properties that modify the navigation strategy. The function ignores any properties in the &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; that would change the provided URL.</source>
          <target state="translated">一个对象，其中包含修改导航策略的属性。该函数将忽略 &lt;code&gt;&lt;a href=&quot;navigationextras&quot;&gt;NavigationExtras&lt;/a&gt;&lt;/code&gt; 中将更改提供的URL的任何属性。</target>
        </trans-unit>
        <trans-unit id="6f909378a9aeab923299b7bb339184fd3aef25aa" translate="yes" xml:space="preserve">
          <source>An object containing the &lt;code&gt;serverPublicKey&lt;/code&gt; string.</source>
          <target state="translated">包含 &lt;code&gt;serverPublicKey&lt;/code&gt; 字符串的对象。</target>
        </trans-unit>
        <trans-unit id="5f857b8189df6a05941e1ba626bb7cbf578f2264" translate="yes" xml:space="preserve">
          <source>An object describing the changes in the &lt;code&gt;Iterable&lt;/code&gt; collection since last time &lt;code&gt;&lt;a href=&quot;core/iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">描述自上次调用 &lt;code&gt;&lt;a href=&quot;core/iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; #diff（）以来 &lt;code&gt;Iterable&lt;/code&gt; 集合中的更改的对象。</target>
        </trans-unit>
        <trans-unit id="8c315ec84a38122ef7c3d9a113c4504cd2522faa" translate="yes" xml:space="preserve">
          <source>An object describing the changes in the &lt;code&gt;Iterable&lt;/code&gt; collection since last time &lt;code&gt;&lt;a href=&quot;iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">描述自上次调用 &lt;code&gt;&lt;a href=&quot;iterablediffer&quot;&gt;IterableDiffer&lt;/a&gt;#diff()&lt;/code&gt; #diff（）以来 &lt;code&gt;Iterable&lt;/code&gt; 集合中的更改的对象。</target>
        </trans-unit>
        <trans-unit id="5a1b257dd7d2442d3adda69d2fa3d7cdd2995179" translate="yes" xml:space="preserve">
          <source>An object describing the changes in the &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;{[k:string]: string}&lt;/code&gt; since last time &lt;code&gt;&lt;a href=&quot;core/keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">一个对象，描述自上次调用 &lt;code&gt;&lt;a href=&quot;core/keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; #diff（）以来 &lt;code&gt;Map&lt;/code&gt; 或 &lt;code&gt;{[k:string]: string}&lt;/code&gt; 更改。</target>
        </trans-unit>
        <trans-unit id="6ac36e997ec5fd21bda35b2901d01da4f1df4548" translate="yes" xml:space="preserve">
          <source>An object describing the changes in the &lt;code&gt;Map&lt;/code&gt; or &lt;code&gt;{[k:string]: string}&lt;/code&gt; since last time &lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; was invoked.</source>
          <target state="translated">一个对象，描述自上次调用 &lt;code&gt;&lt;a href=&quot;keyvaluediffer&quot;&gt;KeyValueDiffer&lt;/a&gt;#diff()&lt;/code&gt; #diff（）以来 &lt;code&gt;Map&lt;/code&gt; 或 &lt;code&gt;{[k:string]: string}&lt;/code&gt; 更改。</target>
        </trans-unit>
        <trans-unit id="0f356d25ccaadcbb052958e84e4c538216b2666e" translate="yes" xml:space="preserve">
          <source>An object in the Angular &lt;a href=&quot;glossary#dependency-injection&quot;&gt;dependency-injection&lt;/a&gt; system that can find a named dependency in its cache or create a dependency using a configured &lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;. Injectors are created for NgModules automatically as part of the bootstrap process and are inherited through the component hierarchy.</source>
          <target state="translated">Angular &lt;a href=&quot;glossary#dependency-injection&quot;&gt;依赖项注入&lt;/a&gt;系统中的对象，可以在其缓存中找到命名的依赖项，或使用配置的&lt;a href=&quot;glossary#provider&quot;&gt;provider&lt;/a&gt;创建依赖项。引导程序会在引导过程中自动为NgModules创建注入器，并通过组件层次结构继承这些注入器。</target>
        </trans-unit>
        <trans-unit id="cc3b15aff9557888b414af3f20c881c83fc21164" translate="yes" xml:space="preserve">
          <source>An object of configuration options</source>
          <target state="translated">配置选项的对象</target>
        </trans-unit>
        <trans-unit id="55a40c09435669e6d09baa4867c14de1eba936e3" translate="yes" xml:space="preserve">
          <source>An object passed to the &lt;code&gt;subscribe()&lt;/code&gt; method for an &lt;a href=&quot;glossary#observable&quot;&gt;observable&lt;/a&gt;. The object defines the callbacks for the &lt;a href=&quot;glossary#subscriber&quot;&gt;subscriber&lt;/a&gt;.</source>
          <target state="translated">传递给 &lt;code&gt;subscribe()&lt;/code&gt; 方法的对象，用于&lt;a href=&quot;glossary#observable&quot;&gt;可观察的对象&lt;/a&gt;。该对象定义&lt;a href=&quot;glossary#subscriber&quot;&gt;订户&lt;/a&gt;的回调。</target>
        </trans-unit>
        <trans-unit id="91849ac8b00c354cb7ee440dea61bd355a282235" translate="yes" xml:space="preserve">
          <source>An object that can specify either or both cookie name or header name.</source>
          <target state="translated">一个可以指定cookie名称或头名称的对象。</target>
        </trans-unit>
        <trans-unit id="e59674c185a2660e9ab9f2a6044d9674f4444c9e" translate="yes" xml:space="preserve">
          <source>An object that implements one of the &lt;a href=&quot;../api/core/provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt; interfaces. A provider object defines how to obtain an injectable dependency associated with a &lt;a href=&quot;glossary#token&quot;&gt;DI token&lt;/a&gt;. An &lt;a href=&quot;glossary#injector&quot;&gt;injector&lt;/a&gt; uses the provider to create a new instance of a dependency for a class that requires it.</source>
          <target state="translated">实现&lt;a href=&quot;../api/core/provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; &lt;/a&gt;接口之一的对象。提供者对象定义如何获取与&lt;a href=&quot;glossary#token&quot;&gt;DI令牌&lt;/a&gt;关联的可注入依赖项。一个&lt;a href=&quot;glossary#injector&quot;&gt;喷油器&lt;/a&gt;使用提供创建依赖的新实例为需要它的类。</target>
        </trans-unit>
        <trans-unit id="882038f9e81095e5a1e8b2e8ac4378d8a2d5727e" translate="yes" xml:space="preserve">
          <source>An object that provides parent context for this element. Often an ancestor component instance that governs this element.</source>
          <target state="translated">为该元素提供父级上下文的对象。通常是管理该元素的祖先组件实例。</target>
        </trans-unit>
        <trans-unit id="c4b1689270e4d44ba822baf6c09fa4f36f7e04ec" translate="yes" xml:space="preserve">
          <source>An observable can deliver multiple values of any type&amp;mdash;literals, messages, or events, depending on the context. The API for receiving values is the same whether the values are delivered synchronously or asynchronously. Because setup and teardown logic are both handled by the observable, your application code only needs to worry about subscribing to consume values, and when done, unsubscribing. Whether the stream was keystrokes, an HTTP response, or an interval timer, the interface for listening to values and stopping listening is the same.</source>
          <target state="translated">可观察对象可以根据上下文传递任何类型的多个值，包括文字，消息或事件。无论值是同步传递还是异步传递，用于接收值的API都是相同的。因为设置和拆卸逻辑都是由可观察对象处理的，所以您的应用程序代码只需要担心订阅消耗值，以及完成后就取消订阅。无论流是击键，HTTP响应还是间隔计时器，用于监听值和停止监听的接口都是相同的。</target>
        </trans-unit>
        <trans-unit id="8f7904892d5fae208a614b0e764892eb392d2990" translate="yes" xml:space="preserve">
          <source>An observable of the URL fragment shared by all the routes.</source>
          <target state="translated">所有路由共享的URL片段的观测值。</target>
        </trans-unit>
        <trans-unit id="9886415c12cd9cb121b3e54e248babdfc816c0c5" translate="yes" xml:space="preserve">
          <source>An observable of the URL segments matched by this route.</source>
          <target state="translated">该途径所匹配的URL段的观测值。</target>
        </trans-unit>
        <trans-unit id="78107a7f3c08dd96478ee59348f7bde390f4ab63" translate="yes" xml:space="preserve">
          <source>An observable of the matrix parameters scoped to this route.</source>
          <target state="translated">该途径的矩阵参数的观测值。</target>
        </trans-unit>
        <trans-unit id="1e605d70e4839e622078c536e593bcab71033051" translate="yes" xml:space="preserve">
          <source>An observable of the query parameters shared by all the routes.</source>
          <target state="translated">所有路由共享的查询参数的观测值。</target>
        </trans-unit>
        <trans-unit id="90ec32bf2447d30094892ebd1f740f9177296b34" translate="yes" xml:space="preserve">
          <source>An observable of the static and resolved data of this route.</source>
          <target state="translated">该途径的静态数据和解析数据的可观察性。</target>
        </trans-unit>
        <trans-unit id="85079a71024f29fac34fa9fff342e23ac05bb053" translate="yes" xml:space="preserve">
          <source>An observable produces values over time. An array is created as a static set of values. In a sense, observables are asynchronous where arrays are synchronous. In the following examples, ➞ implies asynchronous value delivery.</source>
          <target state="translated">观测值会随着时间的推移产生数值。数组是作为一组静态的值创建的。从某种意义上说,观测值是异步的,而数组是同步的。在下面的例子中,➞意味着异步的值传递。</target>
        </trans-unit>
        <trans-unit id="2b14b5c470af9577f634870ec12983a41761982f" translate="yes" xml:space="preserve">
          <source>An observer object can define any combination of these handlers. If you don't supply a handler for a notification type, the observer ignores notifications of that type.</source>
          <target state="translated">一个观察者对象可以定义这些处理程序的任意组合。如果您没有为某个通知类型提供处理程序,观察者会忽略该类型的通知。</target>
        </trans-unit>
        <trans-unit id="5588df976b6ceca9f5b806e0cfbd39a5b7ad5721" translate="yes" xml:space="preserve">
          <source>An opaque identifier used for efficient table lookup. In Angular, a &lt;a href=&quot;glossary#di-token&quot;&gt;DI token&lt;/a&gt; is used to find &lt;a href=&quot;glossary#provider&quot;&gt;providers&lt;/a&gt; of dependencies in the &lt;a href=&quot;glossary#di&quot;&gt;dependency injection&lt;/a&gt; system.</source>
          <target state="translated">用于有效查找表的不透明标识符。在Angular中，&lt;a href=&quot;glossary#di-token&quot;&gt;DI令牌&lt;/a&gt;用于在&lt;a href=&quot;glossary#di&quot;&gt;依赖项注入&lt;/a&gt;系统中查找依赖项&lt;a href=&quot;glossary#provider&quot;&gt;提供程序&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="893c9913a260d7efeab0a92c7090707b5d91605d" translate="yes" xml:space="preserve">
          <source>An optional class to instantiate for the &lt;code&gt;token&lt;/code&gt;. By default, the &lt;code&gt;provide&lt;/code&gt; class is instantiated.</source>
          <target state="translated">实例化 &lt;code&gt;token&lt;/code&gt; 的可选类。默认情况下， &lt;code&gt;provide&lt;/code&gt; 类被实例化。</target>
        </trans-unit>
        <trans-unit id="e55702fe0ed268cd72f9e80ab84594f0175eac3b" translate="yes" xml:space="preserve">
          <source>An optional custom strategy factory to use instead of the default. The strategy controls how the transformation is performed.</source>
          <target state="translated">一个可选的自定义策略工厂,用来代替默认的策略。该策略控制如何进行转换。</target>
        </trans-unit>
        <trans-unit id="745e4868ae2dec2541f06bf87f21451d7d0faeb0" translate="yes" xml:space="preserve">
          <source>An optional function passed into the &lt;code&gt;&lt;a href=&quot;../common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; directive that defines how to track changes for items in an iterable. The function takes the iteration index and item ID. When supplied, Angular tracks changes by the return value of the function.</source>
          <target state="translated">传入 &lt;code&gt;&lt;a href=&quot;../common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 指令的可选函数，该函数定义如何跟踪可迭代项的更改。该函数采用迭代索引和项目ID。提供后，角度跟踪会根据函数的返回值而变化。</target>
        </trans-unit>
        <trans-unit id="81174fe66b40fa07233e7e82f826582748cde349" translate="yes" xml:space="preserve">
          <source>An optional function passed into the &lt;code&gt;&lt;a href=&quot;common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; directive that defines how to track changes for items in an iterable. The function takes the iteration index and item ID. When supplied, Angular tracks changes by the return value of the function.</source>
          <target state="translated">传入 &lt;code&gt;&lt;a href=&quot;common/ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 指令的可选函数，该函数定义如何跟踪可迭代项的更改。该函数采用迭代索引和项目ID。提供后，角度跟踪会根据函数的返回值而变化。</target>
        </trans-unit>
        <trans-unit id="0799df23e9df2c8ad24df18164841277103dfbe6" translate="yes" xml:space="preserve">
          <source>An options object containing a delay and developer-defined parameters that provide styling defaults and can be overridden on invocation.</source>
          <target state="translated">一个包含延迟和开发者定义的参数的选项对象,这些参数提供了风格默认值,并可在调用时被重写。</target>
        </trans-unit>
        <trans-unit id="18af9da7a490397301ba60f7e43c0ea189752510" translate="yes" xml:space="preserve">
          <source>An options object containing a delay and developer-defined parameters that provide styling defaults and can be overridden on invocation. Default delay is 0.</source>
          <target state="translated">一个选项对象,包含一个延迟和开发者定义的参数,这些参数提供了样式的默认值,可以在调用时被覆盖。默认延迟为0。</target>
        </trans-unit>
        <trans-unit id="94b7d838e156ba687705d55bf53cfaea0e2c0706" translate="yes" xml:space="preserve">
          <source>An options object containing developer-defined parameters that provide styling defaults and can be overridden on invocation.</source>
          <target state="translated">一个包含开发者定义参数的选项对象,这些参数提供了风格默认值,并可在调用时被覆盖。</target>
        </trans-unit>
        <trans-unit id="003f413ea648a113813256191625bc45b897caef" translate="yes" xml:space="preserve">
          <source>An options object that can contain a delay value for the start of the animation, and additional developer-defined parameters. Provided values for additional parameters are used as defaults, and override values can be passed to the caller on invocation.</source>
          <target state="translated">一个选项对象,可以包含动画开始的延迟值,以及额外的开发者定义参数。附加参数的值被用作默认值,覆盖值可以在调用时传递给调用者。</target>
        </trans-unit>
        <trans-unit id="69da736740d2be7cce09038dd8384329068cb27f" translate="yes" xml:space="preserve">
          <source>An options object that can contain a delay value for the start of the animation, and additional override values for developer-defined parameters.</source>
          <target state="translated">一个选项对象,可以包含动画开始的延迟值,以及开发者定义参数的额外覆盖值。</target>
        </trans-unit>
        <trans-unit id="f2ba026d039587baf26944d77bd6fbe6191f4188" translate="yes" xml:space="preserve">
          <source>An options object. Use the 'limit' field to limit the total number of items to collect.</source>
          <target state="translated">一个选项对象。使用'limit'字段来限制要收集的物品总数。</target>
        </trans-unit>
        <trans-unit id="2b8661ad4d0353fe1ca3345139fe01a98c998165" translate="yes" xml:space="preserve">
          <source>An outgoing HTTP request with an optional typed body.</source>
          <target state="translated">一个外发的HTTP请求,带有一个可选的类型化的主体。</target>
        </trans-unit>
        <trans-unit id="2b3e6f58b8017320fb8ad2d620bfa5f840b529df" translate="yes" xml:space="preserve">
          <source>An unmodifiable list of items that Angular keeps up to date when the state of the application changes.</source>
          <target state="translated">一个不可修改的项目列表,当应用程序的状态发生变化时,Angular会保持更新。</target>
        </trans-unit>
        <trans-unit id="b0c610b5f38365ac89cc6b28fe1af7503fdd6a36" translate="yes" xml:space="preserve">
          <source>An unrelated error causes the service worker to enter safe mode; that is, temporary deactivation.</source>
          <target state="translated">一个不相关的错误会导致服务工作者进入安全模式;也就是临时停用。</target>
        </trans-unit>
        <trans-unit id="cc3c9eefabc7f0cea08522cde34fd4642d6273a0" translate="yes" xml:space="preserve">
          <source>An unsurprising observation for a demo. To be honest, jazzing it up won't teach you anything new about forms. But this is an opportunity to exercise some of your newly won binding skills. If you aren't interested, skip to this page's conclusion.</source>
          <target state="translated">对于一个演示来说,这是一个不足为奇的观察。老实说,把它弄得花枝招展并不能让你学到什么新的形式。但这是一个锻炼你新赢得的装订技能的机会。如果你不感兴趣,请跳到本页的结论。</target>
        </trans-unit>
        <trans-unit id="452cffe88932ae77fe68dbf055515d671319274e" translate="yes" xml:space="preserve">
          <source>An upgraded component may also have inputs and outputs, as defined by the scope/controller bindings of the original AngularJS component directive. When you use the component from an Angular template, provide the inputs and outputs using &lt;strong&gt;Angular template syntax&lt;/strong&gt;, observing the following rules:</source>
          <target state="translated">升级的组件也可能具有输入和输出，这由原始AngularJS组件指令的作用域/控制器绑定定义。使用Angular模板中的组件时，请使用&lt;strong&gt;Angular模板语法&lt;/strong&gt;提供输入和输出，请遵守以下规则：</target>
        </trans-unit>
        <trans-unit id="c32307f2c480f6053e5eabae11932dca1c5bd1fb" translate="yes" xml:space="preserve">
          <source>An upload progress event was received.</source>
          <target state="translated">收到一个上传进度事件。</target>
        </trans-unit>
        <trans-unit id="3ecd206c90170f8ae7938d7cd6bd36735ba58063" translate="yes" xml:space="preserve">
          <source>An upload progress event.</source>
          <target state="translated">一个上传进度事件。</target>
        </trans-unit>
        <trans-unit id="e2e2a215be86f3d1acdd9e0d7a47d98ae4b62c70" translate="yes" xml:space="preserve">
          <source>Anchor element that specifies the location of this container in the containing view. Each view container can have only one anchor element, and each anchor element can have only a single view container.</source>
          <target state="translated">锚元素,指定该容器在包含视图中的位置。每个视图容器只能有一个锚元素,而每个锚元素只能有一个视图容器。</target>
        </trans-unit>
        <trans-unit id="b5d76a3a5f5caf5269f66c1a65575cf3b3e26baf" translate="yes" xml:space="preserve">
          <source>Anchor scrolling does not happen on 'popstate'. Instead, we restore the position that we stored or scroll to the top.</source>
          <target state="translated">锚点滚动不会发生在'popstate'上。相反,我们会恢复我们存储的位置或滚动到顶部。</target>
        </trans-unit>
        <trans-unit id="a307a637b89fe16e9922778e99bea2ed2e8e496b" translate="yes" xml:space="preserve">
          <source>Anchors</source>
          <target state="translated">Anchors</target>
        </trans-unit>
        <trans-unit id="f51084cd80a34108fd5adb4fd8ede43309c33705" translate="yes" xml:space="preserve">
          <source>And because this component is being used from the AngularJS module, and is an entry point into the Angular application, you must add it to the &lt;code&gt;entryComponents&lt;/code&gt; for the NgModule.</source>
          <target state="translated">并且由于此组件正在AngularJS模块中使用，并且是Angular应用程序的入口点，因此必须将其添加到 &lt;code&gt;entryComponents&lt;/code&gt; 的entryComponents中。</target>
        </trans-unit>
        <trans-unit id="220dca1fbf38afa8fcb52d2808f50aad1904d032" translate="yes" xml:space="preserve">
          <source>And both together:</source>
          <target state="translated">而且两者一起。</target>
        </trans-unit>
        <trans-unit id="4cb748fd250adc2e2b24d881d384cd3f1ceeff26" translate="yes" xml:space="preserve">
          <source>And for the phone list component, a few adjustments to the router make the &lt;code&gt;RouteLink&lt;/code&gt; directives work.</source>
          <target state="translated">对于电话列表组件，对路由器的一些调整使 &lt;code&gt;RouteLink&lt;/code&gt; 指令起作用。</target>
        </trans-unit>
        <trans-unit id="029ba4666a2a6cfed9bf04394f2a405b66d1d323" translate="yes" xml:space="preserve">
          <source>And here are some tests:</source>
          <target state="translated">而这里有一些测试。</target>
        </trans-unit>
        <trans-unit id="fffb5f839ebabc375dc3442fb647c4f7c7a16fe5" translate="yes" xml:space="preserve">
          <source>And here's how you could use it with a different parent type.</source>
          <target state="translated">下面是你如何用不同的父类型来使用它。</target>
        </trans-unit>
        <trans-unit id="726041286efb6514f4d5c48dff50434ecdff60e6" translate="yes" xml:space="preserve">
          <source>And if the first segment begins with &lt;code&gt;../&lt;/code&gt;, the router will go up one level.</source>
          <target state="translated">如果第一段以 &lt;code&gt;../&lt;/code&gt; 开头，则路由器将上升一个级别。</target>
        </trans-unit>
        <trans-unit id="581486c9bdaa42d9745149011abbcef5b3d346e8" translate="yes" xml:space="preserve">
          <source>And in the earlier versions of &lt;code&gt;Angular&lt;/code&gt;, the following files were imported or added in your html file:</source>
          <target state="translated">在 &lt;code&gt;Angular&lt;/code&gt; 的早期版本中，以下文件已导入或添加到html文件中：</target>
        </trans-unit>
        <trans-unit id="b2274e10984bdcfe61fe3f96ba22a2a4c56b464e" translate="yes" xml:space="preserve">
          <source>And in the same file, add it to the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;&lt;code&gt;declarations&lt;/code&gt; array:</source>
          <target state="translated">并将其添加到 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; &lt;code&gt;declarations&lt;/code&gt; 数组中：</target>
        </trans-unit>
        <trans-unit id="514df4d7b03eb7b4bff57e5cc4c1f60e85c21481" translate="yes" xml:space="preserve">
          <source>And later the value can be read from the router through &lt;code&gt;router.getCurrentNavigation&lt;/code&gt;. For example, to capture the &lt;code&gt;tracingId&lt;/code&gt; above during the &lt;code&gt;&lt;a href=&quot;navigationstart&quot;&gt;NavigationStart&lt;/a&gt;&lt;/code&gt; event:</source>
          <target state="translated">然后，可以通过 &lt;code&gt;router.getCurrentNavigation&lt;/code&gt; 从路由器读取该值。例如，要在 &lt;code&gt;&lt;a href=&quot;navigationstart&quot;&gt;NavigationStart&lt;/a&gt;&lt;/code&gt; 事件中捕获上面的 &lt;code&gt;tracingId&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ba55a85734b9b1212d4da61228070f47cd0a644b" translate="yes" xml:space="preserve">
          <source>And since you are routing to &lt;code&gt;PhoneListComponent&lt;/code&gt; and &lt;code&gt;PhoneDetailComponent&lt;/code&gt; directly rather than using a route template with a &lt;code&gt;&amp;lt;phone-list&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;phone-detail&amp;gt;&lt;/code&gt; tag, you can do away with their Angular selectors as well.</source>
          <target state="translated">而且，由于直接路由到 &lt;code&gt;PhoneListComponent&lt;/code&gt; 和 &lt;code&gt;PhoneDetailComponent&lt;/code&gt; ，而不是使用带有 &lt;code&gt;&amp;lt;phone-list&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;phone-detail&amp;gt;&lt;/code&gt; 标签的路由模板，因此也可以取消其Angular选择器。</target>
        </trans-unit>
        <trans-unit id="661c680937dcc4b25a3517246569dc41b5dcad75" translate="yes" xml:space="preserve">
          <source>And that is all you need to do to get the full benefit of AOT for hybrid Angular apps.</source>
          <target state="translated">而这就是你需要做的所有事情,以获得混合型Angular应用的AOT的全部好处。</target>
        </trans-unit>
        <trans-unit id="fe495daae12d4210a639f103ea132191cdb68bc6" translate="yes" xml:space="preserve">
          <source>And that's all you need do to get the full benefit of AOT for Angular apps!</source>
          <target state="translated">而这就是你需要做的所有事情,以获得Angular应用程序的AOT的全部好处!</target>
        </trans-unit>
        <trans-unit id="4d279d81a0c6f6d0a1bd9ed9c92b0938afbbfc7a" translate="yes" xml:space="preserve">
          <source>And that's all you need to use AOT while upgrading your app!</source>
          <target state="translated">而这就是你在升级应用时使用AOT所需要的一切!</target>
        </trans-unit>
        <trans-unit id="f94852fb7b378d191158016d057691422128d0e7" translate="yes" xml:space="preserve">
          <source>And the second is the phone links spec:</source>
          <target state="translated">而第二个是手机链接规范。</target>
        </trans-unit>
        <trans-unit id="a104acccd6d3a8c8cdd1533ec92d99aac644c44f" translate="yes" xml:space="preserve">
          <source>And you can also &lt;a href=&quot;pipes#parameterizing-a-pipe&quot;&gt;apply parameters&lt;/a&gt; to a pipe:</source>
          <target state="translated">您还可以&lt;a href=&quot;pipes#parameterizing-a-pipe&quot;&gt;将参数&lt;/a&gt;应用于管道：</target>
        </trans-unit>
        <trans-unit id="1928f95c598b9e69462fcb512625cf8e28923044" translate="yes" xml:space="preserve">
          <source>Android</source>
          <target state="translated">Android</target>
        </trans-unit>
        <trans-unit id="8e09000e5c2a6bef346596ec2e0dec0fbf7495a6" translate="yes" xml:space="preserve">
          <source>Angular</source>
          <target state="translated">Angular</target>
        </trans-unit>
        <trans-unit id="9ce4e3444001628938f2114d22cede0cbf3a7345" translate="yes" xml:space="preserve">
          <source>Angular &lt;code&gt;NgModule&lt;/code&gt; names</source>
          <target state="translated">Angular &lt;code&gt;NgModule&lt;/code&gt; 名称</target>
        </trans-unit>
        <trans-unit id="006832a598bcc0cfd1bccafa8c1be8086583b93a" translate="yes" xml:space="preserve">
          <source>Angular &lt;em&gt;NgModules&lt;/em&gt; differ from and complement JavaScript (ES2015) modules. An NgModule declares a compilation context for a set of components that is dedicated to an application domain, a workflow, or a closely related set of capabilities. An NgModule can associate its components with related code, such as services, to form functional units.</source>
          <target state="translated">Angular &lt;em&gt;NgModules&lt;/em&gt;与JavaScript（ES2015）模块有所不同并互补。NgModule为专用于应用程序域，工作流或紧密相关功能集的一组组件声明一个编译上下文。NgModule可以将其组件与相关代码（例如服务）相关联以形成功能单元。</target>
        </trans-unit>
        <trans-unit id="3a90be85a404ed076f232eda66f6c97b3763ffdd" translate="yes" xml:space="preserve">
          <source>Angular &lt;em&gt;TestBed&lt;/em&gt;</source>
          <target state="translated">角度&lt;em&gt;测试床&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53cd3baaa80c39be7dbd5ce81eccbf14c1556192" translate="yes" xml:space="preserve">
          <source>Angular &lt;strong&gt;pipes&lt;/strong&gt; provide formatting and transformation for data in the template, similar to AngularJS &lt;strong&gt;filters&lt;/strong&gt;. Many of the built-in filters in AngularJS have corresponding pipes in Angular. For more information on pipes, see &lt;a href=&quot;pipes&quot;&gt;Pipes&lt;/a&gt;.</source>
          <target state="translated">Angular &lt;strong&gt;管道&lt;/strong&gt;提供了模板中数据的格式和转换，类似于AngularJS &lt;strong&gt;过滤器&lt;/strong&gt;。AngularJS中的许多内置过滤器在Angular中都有相应的管道。有关管道的更多信息，请参见&lt;a href=&quot;pipes&quot;&gt;管道&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1da97b715125a7200320cdfe21476ab138911186" translate="yes" xml:space="preserve">
          <source>Angular CLI Builders</source>
          <target state="translated">Angular CLI构建器</target>
        </trans-unit>
        <trans-unit id="0b62b52e382c94a5e31cfe2e45350c0ad57bfde2" translate="yes" xml:space="preserve">
          <source>Angular DI has a &lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;hierarchical injection system&lt;/a&gt;, which means that nested injectors can create their own service instances. Angular regularly creates nested injectors. Whenever Angular creates a new instance of a component that has &lt;code&gt;providers&lt;/code&gt; specified in &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt;, it also creates a new &lt;em&gt;child injector&lt;/em&gt; for that instance. Similarly, when a new NgModule is lazy-loaded at run time, Angular can create an injector for it with its own providers.</source>
          <target state="translated">Angular DI具有&lt;a href=&quot;hierarchical-dependency-injection&quot;&gt;分层的注入系统&lt;/a&gt;，这意味着嵌套的注入器可以创建自己的服务实例。Angular定期创建嵌套的注射器。每当Angular创建具有 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）中指定的 &lt;code&gt;providers&lt;/code&gt; 的组件的新实例时，它也会为该实例创建一个新的&lt;em&gt;子注入器&lt;/em&gt;。同样，当在运行时延迟加载新的NgModule时，Angular可以使用其自己的提供程序为其创建注入程序。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b6f10f0e075446afd6bd0316044e6433708768b2" translate="yes" xml:space="preserve">
          <source>Angular Documentation</source>
          <target state="translated">Angular文档</target>
        </trans-unit>
        <trans-unit id="f800173505ee0bcc1b11e1ddf36ce8a030dd7494" translate="yes" xml:space="preserve">
          <source>Angular Documentation Style Guide</source>
          <target state="translated">Angular文档风格指南</target>
        </trans-unit>
        <trans-unit id="4656edbf91cfa36158075026931a11032cead650" translate="yes" xml:space="preserve">
          <source>Angular Elements Overview</source>
          <target state="translated">Angular Elements概述</target>
        </trans-unit>
        <trans-unit id="e07038b6aad22461ee7bae9dc2b45c7a7c2e2daf" translate="yes" xml:space="preserve">
          <source>Angular JSONP requests return an &lt;code&gt;Observable&lt;/code&gt;. Follow the pattern for subscribing to observables and use the RxJS &lt;code&gt;map&lt;/code&gt; operator to transform the response before using the &lt;a href=&quot;../api/common/asyncpipe&quot;&gt;async pipe&lt;/a&gt; to manage the results.</source>
          <target state="translated">角度JSONP请求返回一个 &lt;code&gt;Observable&lt;/code&gt; 。遵循订阅可观察变量的模式，并在使用&lt;a href=&quot;../api/common/asyncpipe&quot;&gt;异步管道&lt;/a&gt;管理结果之前，使用RxJS &lt;code&gt;map&lt;/code&gt; 运算符转换响应。</target>
        </trans-unit>
        <trans-unit id="cc9d2d14b4723cc3db1775007d3a69846afb3014" translate="yes" xml:space="preserve">
          <source>Angular Labs</source>
          <target state="translated">Angular Labs</target>
        </trans-unit>
        <trans-unit id="9e7a56e64dea1098d28d55765096fc618a9b8502" translate="yes" xml:space="preserve">
          <source>Angular Labs is an initiative to cultivate new features and iterate on them quickly. Angular Labs provides a safe place for exploration and experimentation by the Angular team.</source>
          <target state="translated">Angular实验室是一个培养新功能并快速迭代的举措。Angular实验室为Angular团队提供了一个安全的探索和实验场所。</target>
        </trans-unit>
        <trans-unit id="b00d2c229068abc17cff954895b39cdc3bf5ff0d" translate="yes" xml:space="preserve">
          <source>Angular Labs projects are not ready for production use, and no commitment is made to bring them to production. The policies and practices that are described in this document do not apply to Angular Labs projects.</source>
          <target state="translated">Angular Labs项目还没有准备好投入生产使用,也没有承诺将其投入生产。本文档中描述的政策和实践不适用于Angular Labs项目。</target>
        </trans-unit>
        <trans-unit id="14af2b4bd0445fb663d36a7aa76d50d4caa6816b" translate="yes" xml:space="preserve">
          <source>Angular Language Service</source>
          <target state="translated">Angular语言服务</target>
        </trans-unit>
        <trans-unit id="72a9af2d40cd0cddac1ab7c8148463ece8b5ffc7" translate="yes" xml:space="preserve">
          <source>Angular Language Service in your editor</source>
          <target state="translated">编辑器中的Angular语言服务</target>
        </trans-unit>
        <trans-unit id="b73e3a2a2136a6a52f2f163943dedb823749ad44" translate="yes" xml:space="preserve">
          <source>Angular Language Service is currently available as an extension for &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;, &lt;a href=&quot;https://www.jetbrains.com/webstorm&quot;&gt;WebStorm&lt;/a&gt;, and &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;.</source>
          <target state="translated">当前，Angular Language Service是&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;，&lt;a href=&quot;https://www.jetbrains.com/webstorm&quot;&gt;WebStorm&lt;/a&gt;和&lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;的扩展。</target>
        </trans-unit>
        <trans-unit id="23326d8b3d91491eb282a0110a38cbdd0d630fcc" translate="yes" xml:space="preserve">
          <source>Angular Material, for example, supplies generation schematics for the UI components that it defines. The following command uses one of these schematics to render an Angular Material &lt;code&gt;&amp;lt;mat-table&amp;gt;&lt;/code&gt; that is pre-configured with a datasource for sorting and pagination.</source>
          <target state="translated">例如，Angular Material提供了其定义的UI组件的生成示意图。以下命令使用这些示意图之一来渲染Angular Material &lt;code&gt;&amp;lt;mat-table&amp;gt;&lt;/code&gt; ，该材质已预先配置了用于排序和分页的数据源。</target>
        </trans-unit>
        <trans-unit id="eb970b461e5095261dfad388a7452d357e39a442" translate="yes" xml:space="preserve">
          <source>Angular Push Notifications</source>
          <target state="translated">Angular推送通知</target>
        </trans-unit>
        <trans-unit id="cc237f83efa1a2b5e00294a0bdae42196f8db9d6" translate="yes" xml:space="preserve">
          <source>Angular UI components</source>
          <target state="translated">Angular UI组件</target>
        </trans-unit>
        <trans-unit id="ace4d235cf67a63f6410e00d7c53d4995b98a87e" translate="yes" xml:space="preserve">
          <source>Angular Universal can generate a static version of your app that is easily searchable, linkable, and navigable without JavaScript. Universal also makes a site preview available since each URL returns a fully rendered page.</source>
          <target state="translated">Angular Universal可以为您的应用程序生成一个静态版本,该版本无需JavaScript即可轻松搜索、链接和导航。Universal还可以提供网站预览,因为每个URL都会返回一个完全渲染的页面。</target>
        </trans-unit>
        <trans-unit id="03a5c1283a3b0775a44e17725d52243197c5b04f" translate="yes" xml:space="preserve">
          <source>Angular Versioning and Releases</source>
          <target state="translated">Angular版本管理和发布</target>
        </trans-unit>
        <trans-unit id="a8e46db497a411dfa77cebcd5f020de2e1dd9c9a" translate="yes" xml:space="preserve">
          <source>Angular Workspace Configuration</source>
          <target state="translated">Angular工作空间配置</target>
        </trans-unit>
        <trans-unit id="cec48440aa352f69975cc33a6148da27d5bd34ec" translate="yes" xml:space="preserve">
          <source>Angular adds &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; to the application root injector, unless the NgModule is lazy-loaded. For a lazy-loaded NgModule, Angular creates a &lt;em&gt;child injector&lt;/em&gt; and adds the module's providers to the child injector.</source>
          <target state="translated">除非将NgModule延迟加载，否则Angular会将 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#providers&quot;&gt;NgModule.providers&lt;/a&gt;&lt;/code&gt; 添加到应用程序根注入器。对于延迟加载的NgModule，Angular创建&lt;em&gt;子注入器&lt;/em&gt;，并将模块的提供程序添加到子注入器。</target>
        </trans-unit>
        <trans-unit id="8e142da275e31e83a34423dee09ae7d117ad91d6" translate="yes" xml:space="preserve">
          <source>Angular adds a decorator to the component class to provide any required metadata. The &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; decorator declares that the class is a component and provides metadata about that component such as its selector (or tag) and its template.</source>
          <target state="translated">Angular将装饰器添加到组件类以提供任何必需的元数据。在 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 装饰声明类是一个组件，并提供有关该组件的这样的元数据作为其选择器（或标签）和它的模板。</target>
        </trans-unit>
        <trans-unit id="aca3ec94d9d835e1ed7052f9071ac32c46856347" translate="yes" xml:space="preserve">
          <source>Angular adds a directive to the injector of the element to which it is applied. The test for the default color uses the injector of the second &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; to get its &lt;code&gt;HighlightDirective&lt;/code&gt; instance and its &lt;code&gt;defaultColor&lt;/code&gt;.</source>
          <target state="translated">Angular将指令添加到要应用它的元素的注入器。默认颜色的测试使用第二个 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; 的注入器获取其 &lt;code&gt;HighlightDirective&lt;/code&gt; 实例和 &lt;code&gt;defaultColor&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="da8913da0b293e00f59a47b8577bbaab64befa70" translate="yes" xml:space="preserve">
          <source>Angular adds certain components to &lt;em&gt;entry components&lt;/em&gt; automatically. Components listed in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; are added automatically. Components referenced in router configuration are added automatically. These two mechanisms account for almost all entry components.</source>
          <target state="translated">Angular将某些&lt;em&gt;组件&lt;/em&gt;自动添加到&lt;em&gt;输入组件&lt;/em&gt;。 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; 中列出的组件会自动添加。路由器配置中引用的组件会自动添加。这两种机制几乎涵盖了所有条目组件。</target>
        </trans-unit>
        <trans-unit id="1bfaa4d4afc1fe6d25c5ea40750798df1ebd8735" translate="yes" xml:space="preserve">
          <source>Angular also has &lt;strong&gt;class binding&lt;/strong&gt;, which is a good way to add or remove a single class, as shown in the third example.</source>
          <target state="translated">Angular还具有&lt;strong&gt;类绑定&lt;/strong&gt;，这是添加或删除单个类的好方法，如第三个示例所示。</target>
        </trans-unit>
        <trans-unit id="aab5930151c105e1c5d03b6b3f8697b3dc85e9e7" translate="yes" xml:space="preserve">
          <source>Angular also has &lt;strong&gt;style binding&lt;/strong&gt;, which is good way to set a single style. This is shown in the second example.</source>
          <target state="translated">Angular还具有&lt;strong&gt;样式绑定&lt;/strong&gt;，这是设置单个样式的好方法。这在第二个示例中显示。</target>
        </trans-unit>
        <trans-unit id="44d0b768fde4742dc1976b77eaf1b2e28afafb0a" translate="yes" xml:space="preserve">
          <source>Angular also has a &lt;code&gt;percent&lt;/code&gt; pipe, which formats a number as a local percentage as shown in the third example.</source>
          <target state="translated">Angular也有一个 &lt;code&gt;percent&lt;/code&gt; 管道，该管道将数字格式化为本地百分比，如第三个示例所示。</target>
        </trans-unit>
        <trans-unit id="e7acf3cac93b6dc1dff702f72a776e3bad75bb0b" translate="yes" xml:space="preserve">
          <source>Angular also has an extensive &lt;a href=&quot;https://angular.io/resources&quot;&gt;network of 3rd-party tools and libraries&lt;/a&gt;.</source>
          <target state="translated">Angular还拥有广泛&lt;a href=&quot;https://angular.io/resources&quot;&gt;的第三方工具和库网络&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c4f6f4c8cab83c598f5f92135c20c5a81d3804e3" translate="yes" xml:space="preserve">
          <source>Angular also supports workspaces with &lt;a href=&quot;file-structure#multiple-projects&quot;&gt;multiple projects&lt;/a&gt;. This type of development environment is suitable for advanced users who are developing &lt;a href=&quot;glossary#library&quot;&gt;shareable libraries&lt;/a&gt;, and for enterprises that use a &quot;monorepo&quot; development style, with a single repository and global configuration for all Angular projects.</source>
          <target state="translated">Angular还支持具有&lt;a href=&quot;file-structure#multiple-projects&quot;&gt;多个项目的&lt;/a&gt;工作区。这种类型的开发环境适用于正在开发&lt;a href=&quot;glossary#library&quot;&gt;共享库的&lt;/a&gt;高级用户，以及使用&amp;ldquo; monorepo&amp;rdquo;开发风格，对所有Angular项目具有单个存储库和全局配置的企业。</target>
        </trans-unit>
        <trans-unit id="18ccac82f42afc30dc13eb8f7f4a5b6af31380eb" translate="yes" xml:space="preserve">
          <source>Angular and i18n</source>
          <target state="translated">Angular和i18n</target>
        </trans-unit>
        <trans-unit id="6dd49b5a09165a329e3b3706c72d3ba95738b3ba" translate="yes" xml:space="preserve">
          <source>Angular animations are based on CSS web transition functionality, so anything that can be styled or transformed in CSS can be animated the same way in Angular. Angular animations allow you to:</source>
          <target state="translated">Angular动画基于CSS网页过渡功能,因此任何可以在CSS中进行样式设计或转换的东西都可以在Angular中以同样的方式进行动画。Angular动画允许你。</target>
        </trans-unit>
        <trans-unit id="fa2b46cf1fafda0f8f1b1015605c3b0e0c977cd6" translate="yes" xml:space="preserve">
          <source>Angular applications are styled with standard CSS. That means you can apply everything you know about CSS stylesheets, selectors, rules, and media queries directly to Angular applications.</source>
          <target state="translated">Angular应用程序使用标准CSS进行样式设计。这意味着你可以将你所知道的关于CSS样式表、选择器、规则和媒体查询的一切直接应用到Angular应用中。</target>
        </trans-unit>
        <trans-unit id="14d869c3fb5c7a4d91b5a670f800823baa6232f8" translate="yes" xml:space="preserve">
          <source>Angular applications must follow the same security principles as regular web applications, and must be audited as such. Angular-specific APIs that should be audited in a security review, such as the &lt;a href=&quot;security#bypass-security-apis&quot;&gt;&lt;em&gt;bypassSecurityTrust&lt;/em&gt;&lt;/a&gt; methods, are marked in the documentation as security sensitive.</source>
          <target state="translated">Angular应用程序必须遵循与常规Web应用程序相同的安全性原则，并且必须对其进行审核。在安全性审查中应审核的特定于角度的API（例如，&lt;a href=&quot;security#bypass-security-apis&quot;&gt;&lt;em&gt;bypassSecurityTrust&lt;/em&gt;&lt;/a&gt;方法）在文档中被标记为对安全敏感。</target>
        </trans-unit>
        <trans-unit id="a1bf3aeaee18f4e10d8c47a1a0151f85f3df9106" translate="yes" xml:space="preserve">
          <source>Angular applications, and specifically applications that relied on the JIT compiler, used to require a polyfill for the &lt;a href=&quot;https://github.com/rbuckton/reflect-metadata&quot;&gt;reflect-metadata&lt;/a&gt; APIs.</source>
          <target state="translated">Angular应用程序，特别是依赖于JIT编译器的应用程序，过去常常需要对polyfill &lt;a href=&quot;https://github.com/rbuckton/reflect-metadata&quot;&gt;-reflect-metadata&lt;/a&gt; API 进行填充。</target>
        </trans-unit>
        <trans-unit id="91733de9ca0b6019e9d774051ac122f55526d61d" translate="yes" xml:space="preserve">
          <source>Angular applications, as single-page applications, are in a prime position to benefit from the advantages of service workers. Starting with version 5.0.0, Angular ships with a service worker implementation. Angular developers can take advantage of this service worker and benefit from the increased reliability and performance it provides, without needing to code against low-level APIs.</source>
          <target state="translated">Angular应用作为单页应用,处于受益于服务工作者优势的首要位置。从5.0.0版本开始,Angular提供了一个服务工作者的实现。Angular开发人员可以利用这个服务工作者,并从它提供的更高可靠性和性能中获益,而不需要针对低级API进行编码。</target>
        </trans-unit>
        <trans-unit id="6a6de042c4c8b613bc14b1004499391dfb5f5947" translate="yes" xml:space="preserve">
          <source>Angular applies interceptors in the order that you provide them. If you provide interceptors &lt;em&gt;A&lt;/em&gt;, then &lt;em&gt;B&lt;/em&gt;, then &lt;em&gt;C&lt;/em&gt;, requests will flow in &lt;em&gt;A-&amp;gt;B-&amp;gt;C&lt;/em&gt; and responses will flow out &lt;em&gt;C-&amp;gt;B-&amp;gt;A&lt;/em&gt;.</source>
          <target state="translated">Angular按您提供拦截器的顺序进行应用。如果提供拦截器&lt;em&gt;A&lt;/em&gt;，然后提供&lt;em&gt;B&lt;/em&gt;，然后提供&lt;em&gt;C&lt;/em&gt;，则请求将在&lt;em&gt;A-&amp;gt; B-&amp;gt; C中&lt;/em&gt;流动，而响应将在&lt;em&gt;C-&amp;gt; B-&amp;gt; A中&lt;/em&gt;流出。</target>
        </trans-unit>
        <trans-unit id="926bf2f3242ed68256b3bd4a48a61bdbc87faa0e" translate="yes" xml:space="preserve">
          <source>Angular apps are modular and Angular has its own modularity system called &lt;em&gt;NgModules&lt;/em&gt;. NgModules are containers for a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities. They can contain components, service providers, and other code files whose scope is defined by the containing NgModule. They can import functionality that is exported from other NgModules, and export selected functionality for use by other NgModules.</source>
          <target state="translated">Angular应用程序是模块化的，Angular具有自己的模块化系统&lt;em&gt;NgModules&lt;/em&gt;。NgModule是用于专用于应用程序域，工作流或一组紧密相关功能的内聚代码块的容器。它们可以包含组件，服务提供者和其他代码文件，其范围由包含的NgModule定义。他们可以导入从其他NgModule导出的功能，并导出选定的功能以供其他NgModule使用。</target>
        </trans-unit>
        <trans-unit id="25fa7e10b2ea8373e96b925201550beca498120d" translate="yes" xml:space="preserve">
          <source>Angular apps are perfect candidates for serving with a simple static HTML server. You don't need a server-side engine to dynamically compose application pages because Angular does that on the client-side.</source>
          <target state="translated">Angular应用是使用简单的静态HTML服务器进行服务的最佳人选。你不需要服务器端的引擎来动态编译应用页面,因为Angular在客户端就能完成。</target>
        </trans-unit>
        <trans-unit id="89a4897f290e40a2133713a97fbe6e813fdda23d" translate="yes" xml:space="preserve">
          <source>Angular asks the injector for the service associated with &lt;code&gt;LoggerService&lt;/code&gt; and assigns the returned value to the &lt;code&gt;logger&lt;/code&gt; parameter.</source>
          <target state="translated">Angular向注入器询问与 &lt;code&gt;LoggerService&lt;/code&gt; 关联的服务，并将返回的值分配给 &lt;code&gt;logger&lt;/code&gt; 参数。</target>
        </trans-unit>
        <trans-unit id="34736d096c8d01abb937a1a803b97d49650c45e4" translate="yes" xml:space="preserve">
          <source>Angular automatically adds components in the module's &lt;code&gt;bootstrap&lt;/code&gt; and route definitions into the &lt;code&gt;entryComponents&lt;/code&gt; list.</source>
          <target state="translated">Angular会自动在模块的 &lt;code&gt;bootstrap&lt;/code&gt; 添加组件，并将路由定义添加到 &lt;code&gt;entryComponents&lt;/code&gt; 列表中。</target>
        </trans-unit>
        <trans-unit id="f64e43a20cf90e560e0797b938ab839d7501e2c4" translate="yes" xml:space="preserve">
          <source>Angular automatically adds components in the module's bootstrap and route definitions into the &lt;code&gt;entryComponents&lt;/code&gt; list. Use this option to add components that are bootstrapped using one of the imperative techniques, such as &lt;code&gt;ViewContainerRef.createComponent()&lt;/code&gt;.</source>
          <target state="translated">Angular会自动在模块的引导程序中添加组件，并将路由定义添加到 &lt;code&gt;entryComponents&lt;/code&gt; 列表中。使用此选项可添加使用命令式技术之一引导的组件，例如 &lt;code&gt;ViewContainerRef.createComponent()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0629ce337235f8f877e6fa641ca67b726d78f938" translate="yes" xml:space="preserve">
          <source>Angular automatically checks host property bindings during change detection. If a binding changes, Angular updates the directive's host element.</source>
          <target state="translated">Angular在变化检测过程中会自动检查主机属性绑定。如果绑定发生变化,Angular会更新指令的宿主元素。</target>
        </trans-unit>
        <trans-unit id="8b9a86a14f14da58711979c6e06ad0d7a208e6d2" translate="yes" xml:space="preserve">
          <source>Angular automatically expands the shorthand syntax as it compiles the template. The context for each embedded view is logically merged to the current component context according to its lexical position.</source>
          <target state="translated">Angular在编译模板时自动展开速记语法。每个嵌入式视图的上下文根据其词法位置逻辑地合并到当前组件上下文中。</target>
        </trans-unit>
        <trans-unit id="66b49eb10d70820437d8d869bc39bde44099684f" translate="yes" xml:space="preserve">
          <source>Angular automatically pulls the value of the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;myHero&lt;/code&gt; properties from the component and inserts those values into the browser. Angular updates the display when these properties change.</source>
          <target state="translated">Angular会自动从组件中获取 &lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;myHero&lt;/code&gt; 属性的值，并将这些值插入浏览器。这些属性更改时，Angular会更新显示。</target>
        </trans-unit>
        <trans-unit id="ff00d645a7fcd89b83ee39d6fc1b51274985e3e6" translate="yes" xml:space="preserve">
          <source>Angular automatically updates input properties during change detection. The &lt;code&gt;inputs&lt;/code&gt; property defines a set of &lt;code&gt;directiveProperty&lt;/code&gt; to &lt;code&gt;bindingProperty&lt;/code&gt; configuration:</source>
          <target state="translated">Angular在更改检测期间自动更新输入属性。所述 &lt;code&gt;inputs&lt;/code&gt; 属性定义了一组 &lt;code&gt;directiveProperty&lt;/code&gt; 到 &lt;code&gt;bindingProperty&lt;/code&gt; 配置：</target>
        </trans-unit>
        <trans-unit id="4fb8d9e96c7ac6343272dadc9bead965bdb5f2ef" translate="yes" xml:space="preserve">
          <source>Angular calls &lt;code&gt;ngOnInit()&lt;/code&gt; shortly after creating a component.</source>
          <target state="translated">创建组件后不久，Angular会调用 &lt;code&gt;ngOnInit()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0761730ce747644c7286543b08d9331ae7b0e5b5" translate="yes" xml:space="preserve">
          <source>Angular calls hook methods for &lt;em&gt;directives&lt;/em&gt; as well as components.</source>
          <target state="translated">Angular调用挂钩&lt;em&gt;指令&lt;/em&gt;和组件的方法。</target>
        </trans-unit>
        <trans-unit id="700fb4f4fabe764d32bfd76c4bdde2ed1a283939" translate="yes" xml:space="preserve">
          <source>Angular calls its &lt;code&gt;ngOnChanges()&lt;/code&gt; method whenever it detects changes to &lt;strong&gt;&lt;em&gt;input properties&lt;/em&gt;&lt;/strong&gt; of the component (or directive). This example monitors the &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; hook.</source>
          <target state="translated">每当Angular 检测到对Angular的更改时，都会调用其 &lt;code&gt;ngOnChanges()&lt;/code&gt; 方法。&lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt;组件（或指令）&lt;strong&gt;&lt;em&gt;输入属性&lt;/em&gt;&lt;/strong&gt;的。本示例监视 &lt;code&gt;&lt;a href=&quot;../api/core/onchanges&quot;&gt;OnChanges&lt;/a&gt;&lt;/code&gt; 挂钩。</target>
        </trans-unit>
        <trans-unit id="7fba1c4e305809dca3c5497ed6c4e8bdddcee9d5" translate="yes" xml:space="preserve">
          <source>Angular calls these hook methods in the following order:</source>
          <target state="translated">Angular按照以下顺序调用这些钩子方法。</target>
        </trans-unit>
        <trans-unit id="2eb6be30b85620d64c1287fc12627576cab0e3cb" translate="yes" xml:space="preserve">
          <source>Angular can launch with multiple bootstrap components, each with its own location in the host web page.</source>
          <target state="translated">Angular可以启动多个bootstrap组件,每个组件在主机网页中都有自己的位置。</target>
        </trans-unit>
        <trans-unit id="a8d9d853fd628beed82fbc871f08b75361246094" translate="yes" xml:space="preserve">
          <source>Angular can't know at compile time what kind of HTML element the &lt;code&gt;nativeElement&lt;/code&gt; is or if it even is an HTML element. The app might be running on a &lt;em&gt;non-browser platform&lt;/em&gt;, such as the server or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Web Worker&lt;/a&gt;, where the element may have a diminished API or not exist at all.</source>
          <target state="translated">Angular在编译时无法知道 &lt;code&gt;nativeElement&lt;/code&gt; 是哪种HTML元素，甚至是HTML元素。该应用程序可能正在&lt;em&gt;非浏览器平台&lt;/em&gt;（例如服务器或&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API&quot;&gt;Web Worker）上运行&lt;/a&gt;，其中该元素的API可能已减少或根本不存在。</target>
        </trans-unit>
        <trans-unit id="36d17ffea363e96f44fadf63bb3a1bdbe014532f" translate="yes" xml:space="preserve">
          <source>Angular comes with a stock of pipes such as &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/lowercasepipe&quot;&gt;LowerCasePipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;CurrencyPipe&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;PercentPipe&lt;/a&gt;&lt;/code&gt;. They are all available for use in any template.</source>
          <target state="translated">Angular附带了一些管道，例如 &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/common/lowercasepipe&quot;&gt;LowerCasePipe&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;CurrencyPipe&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;PercentPipe&lt;/a&gt;&lt;/code&gt; 。它们都可以在任何模板中使用。</target>
        </trans-unit>
        <trans-unit id="0a907878ebd06df52b7177c708b1d8e885c2837c" translate="yes" xml:space="preserve">
          <source>Angular comes with its own API for loading components dynamically.</source>
          <target state="translated">Angular自带了动态加载组件的API。</target>
        </trans-unit>
        <trans-unit id="d2363ce386377b1af5430cd7665d83300366b428" translate="yes" xml:space="preserve">
          <source>Angular compiler options</source>
          <target state="translated">Angular编译器选项</target>
        </trans-unit>
        <trans-unit id="15a73b4d8e7403ebf3810f68763eaa4ff736a997" translate="yes" xml:space="preserve">
          <source>Angular components</source>
          <target state="translated">角度组件</target>
        </trans-unit>
        <trans-unit id="ffb4bdd5d65587e2e6c9c3c9d1f3cb6da8838095" translate="yes" xml:space="preserve">
          <source>Angular components always execute inside Angular framework codebase regardless of where they are instantiated.</source>
          <target state="translated">Angular组件总是在Angular框架的代码库中执行,而不管它们被实例化在哪里。</target>
        </trans-unit>
        <trans-unit id="233d6374ce6c4c863b26cd0f6a1152e33095938e" translate="yes" xml:space="preserve">
          <source>Angular components always execute inside the Angular framework codebase regardless of where they are instantiated.</source>
          <target state="translated">Angular组件总是在Angular框架的代码库中执行,而不管它们被实例化在哪里。</target>
        </trans-unit>
        <trans-unit id="b4225f862d6288eb7075b556d3706e253ca5d1d9" translate="yes" xml:space="preserve">
          <source>Angular components are a subset of directives, always associated with a template. Unlike other directives, only one component can be instantiated per an element in a template.</source>
          <target state="translated">Angular组件是指令的一个子集,总是与模板相关联。与其他指令不同的是,模板中每个元素只能实例化一个组件。</target>
        </trans-unit>
        <trans-unit id="e4d73c4846ec246a55f1aa13c811b021c01194e2" translate="yes" xml:space="preserve">
          <source>Angular components that support content projection make use of an &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; tag within them. Here's an example of such a component:</source>
          <target state="translated">支持内容投影的Angular组件在其中使用 &lt;code&gt;&amp;lt;ng-content&amp;gt;&lt;/code&gt; 标记。这是此类组件的示例：</target>
        </trans-unit>
        <trans-unit id="1071c499d51beceec87025fac82a393ee1e49214" translate="yes" xml:space="preserve">
          <source>Angular consumed the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; content during its actual rendering and replaced the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; with a diagnostic comment.</source>
          <target state="translated">Angular 在其实际呈现期间消耗了 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 内容，并用诊断注释替换了 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8636812be488a9e06f44b489bdc2a9078adde645" translate="yes" xml:space="preserve">
          <source>Angular creates &lt;code&gt;ElementInjector&lt;/code&gt;s implicitly for each DOM element.</source>
          <target state="translated">Angular 为每个DOM元素隐式创建 &lt;code&gt;ElementInjector&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0741d3945dd49502e54a223724b94ed7a5fa8fc" translate="yes" xml:space="preserve">
          <source>Angular creates a lazy loaded module with its own injector, a child of the root injector. &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; causes Angular to look for a &lt;code&gt;GreetingModule&lt;/code&gt; in the parent injector, which this time is the root injector. Of course it finds the instance imported by the root &lt;code&gt;AppModule&lt;/code&gt;. Now &lt;code&gt;parentModule&lt;/code&gt; exists and the constructor throws the error.</source>
          <target state="translated">Angular使用自己的注入器（根注入器的子代）创建了一个延迟加载的模块。 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 使Angular 在父注入器中查找 &lt;code&gt;GreetingModule&lt;/code&gt; ，这一次是根注入器。当然，它会找到由根 &lt;code&gt;AppModule&lt;/code&gt; 导入的实例。现在 &lt;code&gt;parentModule&lt;/code&gt; 存在，构造函数将引发错误。</target>
        </trans-unit>
        <trans-unit id="977c8f330d7f7406517c33d255bec85d1010c0fb" translate="yes" xml:space="preserve">
          <source>Angular creates and renders components along with their children, checks when their data-bound properties change, and destroys them before removing them from the DOM.</source>
          <target state="translated">Angular创建并渲染组件及其子代,当它们的数据绑定属性发生变化时进行检查,并在从DOM中移除它们之前销毁它们。</target>
        </trans-unit>
        <trans-unit id="ba24eb58c283a7912305a525ff29bc67536b0f26" translate="yes" xml:space="preserve">
          <source>Angular creates the component with its &lt;em&gt;own&lt;/em&gt; injector, which is a &lt;em&gt;child&lt;/em&gt; of the fixture injector. It registers the component's providers (the &lt;code&gt;HeroDetailService&lt;/code&gt; in this case) with the child injector.</source>
          <target state="translated">Angular用其&lt;em&gt;自己的&lt;/em&gt;注入器创建组件，该注入器是夹具注入器的&lt;em&gt;子代&lt;/em&gt;。它向子注入器注册组件的提供程序（在这种情况下为 &lt;code&gt;HeroDetailService&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8cd6666fc9fd18813b4f61de2cc4a4167a9bcabc" translate="yes" xml:space="preserve">
          <source>Angular creates, updates, and destroys components as the user moves through the application. Your app can take action at each moment in this lifecycle through optional &lt;a href=&quot;lifecycle-hooks&quot;&gt;lifecycle hooks&lt;/a&gt;, like &lt;code&gt;ngOnInit()&lt;/code&gt;.</source>
          <target state="translated">当用户在应用程序中移动时，Angular会创建，更新和销毁组件。您的应用可以通过可选的&lt;a href=&quot;lifecycle-hooks&quot;&gt;生命周期挂钩&lt;/a&gt;（例如 &lt;code&gt;ngOnInit()&lt;/code&gt; )在此生命周期中的每个时刻采取措施。</target>
        </trans-unit>
        <trans-unit id="1491a873fca02f484086bb4c25c113973485dbc4" translate="yes" xml:space="preserve">
          <source>Angular defines an &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; class to wrap render-specific native UI elements. In most cases, this allows you to use Angular templates and data binding to access DOM elements without reference to the native element.</source>
          <target state="translated">Angular定义了一个 &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 类来包装特定于渲染的本机UI元素。在大多数情况下，这使您可以使用Angular模板和数据绑定来访问DOM元素，而无需引用本机元素。</target>
        </trans-unit>
        <trans-unit id="29b75e3aa5bf733082f6f2be9dc6166f8724c4b5" translate="yes" xml:space="preserve">
          <source>Angular defines decorators that attach metadata to classes or properties so that it knows what those classes or properties mean and how they should work.</source>
          <target state="translated">Angular定义了一些装饰器,这些装饰器将元数据附加到类或属性上,这样它就知道这些类或属性的含义以及它们应该如何工作。</target>
        </trans-unit>
        <trans-unit id="54a4705b9139dd29bd0480b9f3c8657f03607bed" translate="yes" xml:space="preserve">
          <source>Angular defines default builders for use with specific CLI commands, or with the general &lt;code&gt;ng run&lt;/code&gt; command. The JSON schemas that the define the options and defaults for each of these default builders are collected in the &lt;a href=&quot;https://github.com/angular/angular-cli/blob/8.0.x/packages/angular/cli/lib/config/schema.json&quot;&gt;&lt;code&gt;@angular-devkit/build-angular&lt;/code&gt;&lt;/a&gt; package. The schemas configure options for the following builders.</source>
          <target state="translated">Angular定义了用于特定CLI命令或常规 &lt;code&gt;ng run&lt;/code&gt; 命令的默认构建器。为每个默认构建器定义选项和默认值的JSON模式收集在&lt;a href=&quot;https://github.com/angular/angular-cli/blob/8.0.x/packages/angular/cli/lib/config/schema.json&quot;&gt; &lt;code&gt;@angular-devkit/build-angular&lt;/code&gt; &lt;/a&gt;包中。这些架构为以下构建器配置选项。</target>
        </trans-unit>
        <trans-unit id="dee1921a916c378e7946c3b9eeea976785c29693" translate="yes" xml:space="preserve">
          <source>Angular defines the following security contexts:</source>
          <target state="translated">Angular定义了以下安全上下文。</target>
        </trans-unit>
        <trans-unit id="6fb8bcc74fbecb42b212d7bf6efe735e1d1e63cd" translate="yes" xml:space="preserve">
          <source>Angular defines various pipes, such as the &lt;a href=&quot;../api/common/datepipe&quot;&gt;date&lt;/a&gt; pipe and &lt;a href=&quot;../api/common/currencypipe&quot;&gt;currency&lt;/a&gt; pipe; for a complete list, see the &lt;a href=&quot;../api?type=pipe&quot;&gt;Pipes API list&lt;/a&gt;. You can also define new pipes.</source>
          <target state="translated">Angular定义了各种管道，例如&lt;a href=&quot;../api/common/datepipe&quot;&gt;日期&lt;/a&gt;管道和&lt;a href=&quot;../api/common/currencypipe&quot;&gt;货币&lt;/a&gt;管道；有关完整列表，请参见&lt;a href=&quot;../api?type=pipe&quot;&gt;Pipes API列表&lt;/a&gt;。您还可以定义新管道。</target>
        </trans-unit>
        <trans-unit id="36fd385bfb0f2bc723f93bd55ac70bf1b8515f00" translate="yes" xml:space="preserve">
          <source>Angular dependency injection is easiest when the provider token is a class that is also the type of the returned dependency object, or service.</source>
          <target state="translated">当provider token是一个类,同时也是返回的依赖对象或服务的类型时,Angular依赖注入是最简单的。</target>
        </trans-unit>
        <trans-unit id="2fdc7ee4e969732e2733a769bd9625a839effc81" translate="yes" xml:space="preserve">
          <source>Angular developers may encounter a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt; &lt;i&gt;cross-origin resource sharing&lt;/i&gt;&lt;/a&gt; error when making a service request (typically a data service request) to a server other than the application's own host server. Browsers forbid such requests unless the server permits them explicitly.</source>
          <target state="translated">Angular开发人员可能会遇到 &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt; &lt;i&gt;&lt;/i&gt;&lt;/a&gt;当向除应用程序自己的主机服务器以外的服务器发出服务请求（通常是数据服务请求）时，&lt;i&gt;跨域资源共享&lt;/i&gt;错误。除非服务器明确允许，否则浏览器禁止此类请求。</target>
        </trans-unit>
        <trans-unit id="33ead61c5ae99389962924106e86b6fa486483dc" translate="yes" xml:space="preserve">
          <source>Angular did. Angular automatically creates and attaches an &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; directive to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">有角的。Angular自动创建 &lt;code&gt;&lt;a href=&quot;../api/forms/ngform&quot;&gt;NgForm&lt;/a&gt;&lt;/code&gt; 指令并将其附加到 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标记。</target>
        </trans-unit>
        <trans-unit id="0c8cd873ef07f78a6133e0a8205b20af3eb32885" translate="yes" xml:space="preserve">
          <source>Angular distinguishes components from services to increase modularity and reusability. By separating a component's view-related functionality from other kinds of processing, you can make your component classes lean and efficient.</source>
          <target state="translated">Angular将组件与服务区分开来,以提高模块化和可重用性。通过将组件的视图相关功能与其他类型的处理分离开来,可以让你的组件类变得精简高效。</target>
        </trans-unit>
        <trans-unit id="4ef98a05d3c9d89272386206620e0b855fdc66c0" translate="yes" xml:space="preserve">
          <source>Angular doc generation copies these image folders to the &lt;em&gt;runtime&lt;/em&gt; location, &lt;code&gt;generated/images&lt;/code&gt;. Set the image &lt;code&gt;src&lt;/code&gt; attribute to begin in &lt;em&gt;that&lt;/em&gt; directory.</source>
          <target state="translated">Angular doc生成将这些图像文件夹复制到&lt;em&gt;运行时&lt;/em&gt;位置， &lt;code&gt;generated/images&lt;/code&gt; 。设置图像 &lt;code&gt;src&lt;/code&gt; 属性在开始&lt;em&gt;那&lt;/em&gt;目录。</target>
        </trans-unit>
        <trans-unit id="05d4d08bb1ab2fe726e25cd17ea946e354b440dc" translate="yes" xml:space="preserve">
          <source>Angular does something similar with the &lt;code&gt;&lt;a href=&quot;../api/common/document&quot;&gt;DOCUMENT&lt;/a&gt;&lt;/code&gt; token so you can inject the browser's &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; object (or an abstraction of it, depending upon the platform in which the application runs).</source>
          <target state="translated">Angular与 &lt;code&gt;&lt;a href=&quot;../api/common/document&quot;&gt;DOCUMENT&lt;/a&gt;&lt;/code&gt; 令牌做了类似的事情，因此您可以注入浏览器的 &lt;code&gt;&lt;a href=&quot;../api/platform-server/platformconfig#document&quot;&gt;document&lt;/a&gt;&lt;/code&gt; 对象（或它的抽象，取决于应用程序运行的平台）。</target>
        </trans-unit>
        <trans-unit id="316fdcfddbfe253f5be7d7577a1028ffa824c548" translate="yes" xml:space="preserve">
          <source>Angular doesn't &lt;em&gt;enforce&lt;/em&gt; these principles. Angular does help you &lt;em&gt;follow&lt;/em&gt; these principles by making it easy to factor your application logic into services and make those services available to components through &lt;em&gt;dependency injection&lt;/em&gt;.</source>
          <target state="translated">Angular不&lt;em&gt;执行&lt;/em&gt;这些原则。Angular确实使您易于将应用程序逻辑分解为服务并通过&lt;em&gt;依赖注入&lt;/em&gt;使这些服务可用于组件，从而帮助您&lt;em&gt;遵循&lt;/em&gt;这些原则&lt;em&gt;&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="bec27d0e4374bf5d0fe0b39083d667524fda6667" translate="yes" xml:space="preserve">
          <source>Angular doesn't have a &lt;code&gt;FilterPipe&lt;/code&gt; or an &lt;code&gt;OrderByPipe&lt;/code&gt; for reasons explained in the &lt;a href=&quot;pipes#no-filter-pipe&quot;&gt;Appendix&lt;/a&gt; of this page.</source>
          <target state="translated">由于&lt;a href=&quot;pipes#no-filter-pipe&quot;&gt;附录中&lt;/a&gt;说明的原因，Angular没有 &lt;code&gt;FilterPipe&lt;/code&gt; 或 &lt;code&gt;OrderByPipe&lt;/code&gt; 本页。</target>
        </trans-unit>
        <trans-unit id="d7de62023255791a40ee52811b94f5c474b98e55" translate="yes" xml:space="preserve">
          <source>Angular doesn't have a bootstrap directive. To launch the app in code, explicitly bootstrap the application's root module (&lt;code&gt;AppModule&lt;/code&gt;) in &lt;code&gt;main.ts&lt;/code&gt; and the application's root component (&lt;code&gt;AppComponent&lt;/code&gt;) in &lt;code&gt;app.module.ts&lt;/code&gt;.</source>
          <target state="translated">Angular没有bootstrap指令。要启动的应用程序代码中，明确引导应用程序的根模块（ &lt;code&gt;AppModule&lt;/code&gt; 中） &lt;code&gt;main.ts&lt;/code&gt; 和应用程序的根组件（ &lt;code&gt;AppComponent&lt;/code&gt; 中） &lt;code&gt;app.module.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1db4be0ad95a78f2180c038b6339b94ffad67719" translate="yes" xml:space="preserve">
          <source>Angular doesn't know that you set the input element's &lt;code&gt;value&lt;/code&gt; property. It won't read that property until you raise the element's &lt;code&gt;input&lt;/code&gt; event by calling &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;dispatchEvent()&lt;/a&gt;&lt;/code&gt;. &lt;em&gt;Then&lt;/em&gt; you call &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angular不知道您设置了输入元素的 &lt;code&gt;value&lt;/code&gt; 属性。除非通过调用 &lt;code&gt;&lt;a href=&quot;testing&quot;&gt;dispatchEvent()&lt;/a&gt;&lt;/code&gt; 引发元素的 &lt;code&gt;input&lt;/code&gt; 事件，否则它将不会读取该属性。&lt;em&gt;然后，&lt;/em&gt;您调用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/componentfixture#detectChanges&quot;&gt;detectChanges()&lt;/a&gt;&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dd520f6af29e767755a3104595b3766e46582132" translate="yes" xml:space="preserve">
          <source>Angular doesn't like NgModules with circular references, so don't let Module 'A' import Module 'B', which imports Module 'A'.</source>
          <target state="translated">Angular不喜欢有循环引用的NgModules,所以不要让模块'A'导入模块'B',而模块'B'又导入模块'A'。</target>
        </trans-unit>
        <trans-unit id="0fe275456a97ff34d2bc7a9ec6f6a087e43077a0" translate="yes" xml:space="preserve">
          <source>Angular doesn't provide pipes for filtering or sorting lists. Developers familiar with AngularJS know these as &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;orderBy&lt;/code&gt;. There are no equivalents in Angular.</source>
          <target state="translated">Angular不提供用于过滤或排序列表的管道。熟悉AngularJS的开发人员将其称为 &lt;code&gt;filter&lt;/code&gt; 和 &lt;code&gt;orderBy&lt;/code&gt; 。Angular中没有等效项。</target>
        </trans-unit>
        <trans-unit id="d035376ad03249c3d06ea41a32cd0585ba3807fd" translate="yes" xml:space="preserve">
          <source>Angular duplicates the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; for each item in the list, setting the &lt;code&gt;hero&lt;/code&gt; variable to the item (the hero) in the current iteration. Angular uses that variable as the context for the interpolation in the double curly braces.</source>
          <target state="translated">Angular复制 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 中每个项目的&amp;lt;li&amp;gt;，在当前迭代中将 &lt;code&gt;hero&lt;/code&gt; 变量设置为该项目（hero）。Angular使用该变量作为双花括号中插值的上下文。</target>
        </trans-unit>
        <trans-unit id="85015daf970f460cc4cdb8249ea3dcc38c78f993" translate="yes" xml:space="preserve">
          <source>Angular element</source>
          <target state="translated">角度元素</target>
        </trans-unit>
        <trans-unit id="cc9d62dd0c487b775ce03f3a8c3d97cf94a169d1" translate="yes" xml:space="preserve">
          <source>Angular erases the middle &quot;Hip!&quot;, leaving the cheer a bit less enthusiastic.</source>
          <target state="translated">Angular抹去了中间的 &quot;Hip!&quot;,让欢呼声少了几分热情。</target>
        </trans-unit>
        <trans-unit id="9de65d4e4807d361a824604d00a11e49f70b5d15" translate="yes" xml:space="preserve">
          <source>Angular evaluates all expressions in double curly braces, converts the expression results to strings, and links them with neighboring literal strings. Finally, it assigns this composite interpolated result to an &lt;strong&gt;element or directive property&lt;/strong&gt;.</source>
          <target state="translated">Angular用双花括号计算所有表达式，将表达式结果转换为字符串，并将它们与相邻的文字字符串链接。最后，它将此复合插值结果分配给&lt;strong&gt;元素或指令属性&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="46b3eae0baafae45c7e6c0a56aa7f909f9c5b753" translate="yes" xml:space="preserve">
          <source>Angular event binding syntax consists of a &lt;strong&gt;target event&lt;/strong&gt; name within parentheses on the left of an equal sign, and a quoted template statement on the right. The following event binding listens for the button's click events, calling the component's &lt;code&gt;onSave()&lt;/code&gt; method whenever a click occurs:</source>
          <target state="translated">角度事件绑定语法由等号左侧括号内的&lt;strong&gt;目标事件&lt;/strong&gt;名称和右侧带引号的模板语句组成。以下事件绑定侦听按钮的click事件，并调用组件的 &lt;code&gt;onSave()&lt;/code&gt; 每当发生单击时方法：</target>
        </trans-unit>
        <trans-unit id="9a1e5ca49dc26e677715c17ed169b11bf4be97c1" translate="yes" xml:space="preserve">
          <source>Angular executes a &lt;em&gt;pure pipe&lt;/em&gt; only when it detects a &lt;em&gt;pure change&lt;/em&gt; to the input value. A pure change is either a change to a primitive input value (&lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;) or a changed object reference (&lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt;).</source>
          <target state="translated">Angular 仅在检测到输入值的&lt;em&gt;纯变化&lt;/em&gt;时才执行&lt;em&gt;纯管道&lt;/em&gt;。纯粹的更改是对原始输入值的更改（ &lt;code&gt;String&lt;/code&gt; ， &lt;code&gt;Number&lt;/code&gt; ， &lt;code&gt;Boolean&lt;/code&gt; ， &lt;code&gt;Symbol&lt;/code&gt; ）或更改的对象引用（ &lt;code&gt;Date&lt;/code&gt; ， &lt;code&gt;Array&lt;/code&gt; ， &lt;code&gt;Function&lt;/code&gt; ， &lt;code&gt;Object&lt;/code&gt; ）。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="10e61b854f3aa7e97f224d066c41aff35eeab1f5" translate="yes" xml:space="preserve">
          <source>Angular executes an &lt;em&gt;impure pipe&lt;/em&gt; during every component change detection cycle. An impure pipe is called often, as often as every keystroke or mouse-move.</source>
          <target state="translated">Angular执行&lt;em&gt;不纯管道&lt;/em&gt;在每个组件更改检测周期内。每次击键或移动鼠标时，都会经常调用不纯管道。</target>
        </trans-unit>
        <trans-unit id="f3f08b38aea522e78394f75ae5fb4ddda9056304" translate="yes" xml:space="preserve">
          <source>Angular executes template expressions after every change detection cycle. Change detection cycles are triggered by many asynchronous activities such as promise resolutions, HTTP results, timer events, key presses and mouse moves.</source>
          <target state="translated">Angular在每个变更检测周期后执行模板表达式。变更检测周期是由许多异步活动触发的,如承诺解析、HTTP结果、定时器事件、按键和鼠标移动。</target>
        </trans-unit>
        <trans-unit id="93fd7debae3edda32d9bdc394dafa95f04ee8ce9" translate="yes" xml:space="preserve">
          <source>Angular follows the Unicode LDML convention that uses stable identifiers (Unicode locale identifiers) based on the norm &lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47&lt;/a&gt;. It is very important that you follow this convention when you define your locale, because the Angular i18n tools use this locale id to find the correct corresponding locale data.</source>
          <target state="translated">Angular遵循Unicode LDML约定，该约定使用基于规范&lt;a href=&quot;http://www.rfc-editor.org/rfc/bcp/bcp47.txt&quot;&gt;BCP47的&lt;/a&gt;稳定标识符（Unicode语言环境标识符）。定义语言环境时，务必遵循此约定，因为Angular i18n工具使用此语言环境ID查找正确的相应语言环境数据，这一点非常重要。</target>
        </trans-unit>
        <trans-unit id="e5403b18984f04aca1cbbd4e8aad53057e69dc66" translate="yes" xml:space="preserve">
          <source>Angular forms allow you to:</source>
          <target state="translated">Angular表单允许你。</target>
        </trans-unit>
        <trans-unit id="e1a9dce4e9c4b6bdfc09512c4aaf5cc2e6bb0b2e" translate="yes" xml:space="preserve">
          <source>Angular forms don't require a style library</source>
          <target state="translated">Angular表单不需要样式库。</target>
        </trans-unit>
        <trans-unit id="a53bf8fe33eabf51e7d2da4584dccc79ed01e757" translate="yes" xml:space="preserve">
          <source>Angular functions for animating multiple elements start with &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; to find inner elements, for example gathering all images within a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. The remaining functions, &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt;, &lt;a href=&quot;../api/animations/group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt;, apply cascades or allow you to control how multiple animation steps are applied.</source>
          <target state="translated">动画多个元素的角函数以 &lt;code&gt;&lt;a href=&quot;../api/animations/query&quot;&gt;query&lt;/a&gt;()&lt;/code&gt; 开始以查找内部元素，例如收集 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 中的所有图像。其余函数 &lt;code&gt;&lt;a href=&quot;../api/animations/stagger&quot;&gt;stagger&lt;/a&gt;()&lt;/code&gt; ，&lt;a href=&quot;../api/animations/group&quot;&gt; &lt;code&gt;group()&lt;/code&gt; &lt;/a&gt;和 &lt;code&gt;&lt;a href=&quot;../api/animations/sequence&quot;&gt;sequence&lt;/a&gt;()&lt;/code&gt; 应用级联，也可以控制如何应用多个动画步骤。</target>
        </trans-unit>
        <trans-unit id="6bd9d0319f292ad5b74842fe2d764295ebf9d611" translate="yes" xml:space="preserve">
          <source>Angular generates a class factory in a separate module and that factory &lt;a href=&quot;aot-compiler#exported-symbols&quot;&gt;can only access exported classes&lt;/a&gt;. To correct this error, export the referenced class.</source>
          <target state="translated">Angular在单独的模块中生成类工厂，并且该工厂&lt;a href=&quot;aot-compiler#exported-symbols&quot;&gt;只能访问导出的类&lt;/a&gt;。要更正此错误，请导出引用的类。</target>
        </trans-unit>
        <trans-unit id="952768c15a2572a986f6ae3389d91e52e5d8c2ee" translate="yes" xml:space="preserve">
          <source>Angular generates a class factory in a separate module and that factory &lt;a href=&quot;aot-compiler#exported-symbols&quot;&gt;can only access exported functions&lt;/a&gt;. To correct this error, export the function.</source>
          <target state="translated">Angular在单独的模块中生成类工厂，并且该工厂&lt;a href=&quot;aot-compiler#exported-symbols&quot;&gt;只能访问导出的函数&lt;/a&gt;。要更正此错误，请导出函数。</target>
        </trans-unit>
        <trans-unit id="a776357d683de5262cf58f9728286d0531d34b15" translate="yes" xml:space="preserve">
          <source>Angular generation &lt;a href=&quot;glossary#schematic&quot;&gt;schematics&lt;/a&gt; are instructions for modifying a project by adding files or modifying existing files. Individual schematics for the default Angular CLI &lt;code&gt;ng generate&lt;/code&gt; sub-commands are collected in the package &lt;code&gt;@angular&lt;/code&gt;. Specify the schematic name for a subcommand in the format &lt;code&gt;schematic-package:schematic-name&lt;/code&gt;; for example, the schematic for generating a component is &lt;code&gt;@angular:component&lt;/code&gt;.</source>
          <target state="translated">角度生成&lt;a href=&quot;glossary#schematic&quot;&gt;示意图&lt;/a&gt;是用于通过添加文件或修改现有文件来修改项目的指令。默认的Angular CLI &lt;code&gt;ng generate&lt;/code&gt; 子命令的各个原理图收集在软件包 &lt;code&gt;@angular&lt;/code&gt; 中。以格式 &lt;code&gt;schematic-package:schematic-name&lt;/code&gt; 的形式指定子命令的逻辑示意图名称；例如，生成组件的示意图为 &lt;code&gt;@angular:component&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="089b7f9bea4b756f67f9eed4c52f2969b5e785ba" translate="yes" xml:space="preserve">
          <source>Angular has a hierarchical injection system. There can be injectors at multiple levels, from the root injector created by the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; down through the component tree.</source>
          <target state="translated">Angular具有分层注入系统。从 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 创建的根注射器到组件树，可以有多个级别的注射器。</target>
        </trans-unit>
        <trans-unit id="8203852c3d2c9dbdc69314b56a03f0403dac7220" translate="yes" xml:space="preserve">
          <source>Angular has an &lt;a href=&quot;router&quot;&gt;all-new router&lt;/a&gt;.</source>
          <target state="translated">Angular拥有&lt;a href=&quot;router&quot;&gt;全新的路由器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0aa5ff740e38d6d18edbfc10a1644f100e11e1f4" translate="yes" xml:space="preserve">
          <source>Angular has been creating new instances of the real &lt;code&gt;HeroDetailService&lt;/code&gt; all along!</source>
          <target state="translated">Angular一直在创建真正的 &lt;code&gt;HeroDetailService&lt;/code&gt; 的新实例！</target>
        </trans-unit>
        <trans-unit id="a5090fe3d42da3f7912eb530ce278090a19f01ff" translate="yes" xml:space="preserve">
          <source>Angular has built-in support to help prevent two common HTTP vulnerabilities, cross-site request forgery (CSRF or XSRF) and cross-site script inclusion (XSSI). Both of these must be mitigated primarily on the server side, but Angular provides helpers to make integration on the client side easier.</source>
          <target state="translated">Angular有内置的支持来帮助防止两个常见的HTTP漏洞,即跨站请求伪造(CSRF或XSRF)和跨站脚本包含(XSSI)。这两种情况都必须主要在服务器端进行缓解,但Angular提供了助手,使客户端的集成更加容易。</target>
        </trans-unit>
        <trans-unit id="75f9cada0487eab03f3583131e1b6541f4ca7704" translate="yes" xml:space="preserve">
          <source>Angular has its own vocabulary. Most Angular terms are common English words or computing terms that have a specific meaning within the Angular system.</source>
          <target state="translated">Angular有自己的词汇。大多数Angular术语都是常见的英语单词或计算术语,在Angular系统中具有特定的含义。</target>
        </trans-unit>
        <trans-unit id="020323b35fdea984dabd628de596cd425d7e51fa" translate="yes" xml:space="preserve">
          <source>Angular has more pre-defined directives that either alter the layout structure (for example, &lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;ngSwitch&lt;/a&gt;) or modify aspects of DOM elements and components (for example, &lt;a href=&quot;template-syntax#ngStyle&quot;&gt;ngStyle&lt;/a&gt; and &lt;a href=&quot;template-syntax#ngClass&quot;&gt;ngClass&lt;/a&gt;).</source>
          <target state="translated">Angular具有更多预定义的指令，它们可以更改布局结构（例如&lt;a href=&quot;template-syntax#ngSwitch&quot;&gt;ngSwitch&lt;/a&gt;）或修改DOM元素和组件的各个方面（例如&lt;a href=&quot;template-syntax#ngStyle&quot;&gt;ngStyle&lt;/a&gt;和&lt;a href=&quot;template-syntax#ngClass&quot;&gt;ngClass&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="1686cbfe82438a65326efb7fbfc9ed594c24a6e5" translate="yes" xml:space="preserve">
          <source>Angular has true template input variables that are explicitly defined using the &lt;code&gt;let&lt;/code&gt; keyword.</source>
          <target state="translated">Angular具有使用 &lt;code&gt;let&lt;/code&gt; 关键字明确定义的真实模板输入变量。</target>
        </trans-unit>
        <trans-unit id="9aa8ff3ec993f9613874918fdca308390a782abe" translate="yes" xml:space="preserve">
          <source>Angular ignores changes within (composite) objects. It won't call a pure pipe if you change an input month, add to an input array, or update an input object property.</source>
          <target state="translated">Angular会忽略(复合)对象内部的变化。如果你改变了一个输入月份,添加到一个输入数组,或者更新一个输入对象属性,它不会调用一个纯管道。</target>
        </trans-unit>
        <trans-unit id="b9ea659473cf06cf26e6026f2da7a0eb79db0ddc" translate="yes" xml:space="preserve">
          <source>Angular instead inspects directive and component classes and calls the hook methods &lt;em&gt;if they are defined&lt;/em&gt;. Angular finds and calls methods like &lt;code&gt;ngOnInit()&lt;/code&gt;, with or without the interfaces.</source>
          <target state="translated">Angular会检查指令和组件类，&lt;em&gt;如果已定义&lt;/em&gt;钩子方法，&lt;em&gt;则&lt;/em&gt;调用&lt;em&gt;它们&lt;/em&gt;。Angular查找并调用带有或不带有接口的方法 &lt;code&gt;ngOnInit()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b42b26f4e53b4e9e433f908be1ae23996faf473" translate="yes" xml:space="preserve">
          <source>Angular is a collection of many packages, sub-projects, and tools. To prevent accidental use of private APIs&amp;mdash;and so that you can clearly understand what is covered by the practices described here&amp;mdash;we document what is and is not considered our public API surface. For details, see &lt;a href=&quot;https://github.com/angular/angular/blob/master/docs/PUBLIC_API.md&quot;&gt;Supported Public API Surface of Angular&lt;/a&gt;.</source>
          <target state="translated">Angular是许多软件包，子项目和工具的集合。为了防止意外使用私有API，以便您可以清楚地了解此处描述的实践所涵盖的内容，我们记录了什么是公有API表面，以及哪些不是公共API表面。有关详细信息，请参见&lt;a href=&quot;https://github.com/angular/angular/blob/master/docs/PUBLIC_API.md&quot;&gt;Angular支持的Public API Surface&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cedb8ef1bd5824f0f32e164656ec8ed996c2415d" translate="yes" xml:space="preserve">
          <source>Angular is a platform and framework for building client applications in HTML and TypeScript. Angular is written in TypeScript. It implements core and optional functionality as a set of TypeScript libraries that you import into your apps.</source>
          <target state="translated">Angular是一个用HTML和TypeScript构建客户端应用的平台和框架。Angular是用TypeScript编写的。它以一组TypeScript库的形式实现核心和可选功能,你可以将其导入到你的应用程序中。</target>
        </trans-unit>
        <trans-unit id="944adaf5cf94f6c56a0403bf343031231a5680bd" translate="yes" xml:space="preserve">
          <source>Angular is a reimagined version of the best parts of AngularJS. In that sense, its goals are the same as the AngularJS Style Guide's: To preserve the good parts of AngularJS, and to avoid the bad parts. There's a lot more to Angular than just that of course, but this does mean that &lt;em&gt;following the style guide helps make your AngularJS app more closely aligned with Angular&lt;/em&gt;.</source>
          <target state="translated">Angular是AngularJS最佳部分的重新构想版本。从这个意义上讲，它的目标与AngularJS样式指南的目标相同：保留AngularJS的优点，并避免不良之处。当然，Angular还有很多功能，但这确实意味着&lt;em&gt;遵循样式指南有助于使AngularJS应用与Angular更加紧密地结合&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="cdbe94ed1821482a4bf72519359a4832dfb721ff" translate="yes" xml:space="preserve">
          <source>Angular is bootstrapped first; AngularJS is bootstrapped second. AngularJS always owns the root component of the application.</source>
          <target state="translated">Angular是先引导的,AngularJS是后引导的。AngularJS始终拥有应用程序的根组件。</target>
        </trans-unit>
        <trans-unit id="67c408d51f3d9541622ae37dc07fd998e2b6d4a6" translate="yes" xml:space="preserve">
          <source>Angular is built on the latest standards of the web platform. Targeting such a wide range of browsers is challenging because they do not support all features of modern browsers. You compensate by loading polyfill scripts (&quot;polyfills&quot;) for the browsers that you must support. The &lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;table below&lt;/a&gt; identifies most of the polyfills you might need.</source>
          <target state="translated">Angular建立在Web平台的最新标准之上。针对如此广泛的浏览器是一项挑战，因为它们不支持现代浏览器的所有功能。您可以通过加载必须支持的浏览器的polyfill脚本（&amp;ldquo; polyfills&amp;rdquo;）来进行补偿。下&lt;a href=&quot;browser-support#polyfill-libs&quot;&gt;表列出&lt;/a&gt;了您可能需要的大多数填充料。</target>
        </trans-unit>
        <trans-unit id="e7c5a8227c920abc2ab831e8b743010e5cec1f51" translate="yes" xml:space="preserve">
          <source>Angular isn't showing and hiding the message. It is adding and removing the paragraph element from the DOM. That improves performance, especially in larger projects when conditionally including or excluding big chunks of HTML with many data bindings.</source>
          <target state="translated">Angular并没有显示和隐藏消息,而是在DOM中添加和删除段落元素。它是在DOM中添加和删除段落元素。这提高了性能,特别是在大型项目中,当有条件地包含或排除具有许多数据绑定的大块HTML时。</target>
        </trans-unit>
        <trans-unit id="bfddc46758f816dd29441664cdec5b402661cdef" translate="yes" xml:space="preserve">
          <source>Angular knows that the &lt;code&gt;defaultColor&lt;/code&gt; binding belongs to the &lt;code&gt;HighlightDirective&lt;/code&gt; because you made it &lt;em&gt;public&lt;/em&gt; with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">Angular知道 &lt;code&gt;defaultColor&lt;/code&gt; 绑定属于 &lt;code&gt;HighlightDirective&lt;/code&gt; ,因为您已使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;装饰器将其&lt;em&gt;公开&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6520112c4953366a0de588a54b18493a41a7c8f8" translate="yes" xml:space="preserve">
          <source>Angular libraries</source>
          <target state="translated">Angular库</target>
        </trans-unit>
        <trans-unit id="3f426e8d596d5b3588e555663b8f3b96dfed3e9f" translate="yes" xml:space="preserve">
          <source>Angular libraries are NgModules, such as &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt;. Many third-party libraries are available as NgModules such as &lt;a href=&quot;https://material.angular.io/&quot;&gt;Material Design&lt;/a&gt;, &lt;a href=&quot;http://ionicframework.com/&quot;&gt;Ionic&lt;/a&gt;, and &lt;a href=&quot;https://github.com/angular/angularfire2&quot;&gt;AngularFire2&lt;/a&gt;.</source>
          <target state="translated">Angular库是NgModules，例如 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule&quot;&gt;RouterModule&lt;/a&gt;&lt;/code&gt; 。NgModules提供了许多第三方库，例如&lt;a href=&quot;https://material.angular.io/&quot;&gt;Material Design&lt;/a&gt;，&lt;a href=&quot;http://ionicframework.com/&quot;&gt;Ionic&lt;/a&gt;和&lt;a href=&quot;https://github.com/angular/angularfire2&quot;&gt;AngularFire2&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dad4b4472bc88f1f5698b422a998c38c20704e3c" translate="yes" xml:space="preserve">
          <source>Angular libraries have this option to ensure that all Angular &lt;code&gt;.metadata.json&lt;/code&gt; files are clean and it is a best practice to do the same when building your own libraries.</source>
          <target state="translated">Angular库具有此选项，以确保所有Angular &lt;code&gt;.metadata.json&lt;/code&gt; 文件都是干净的，并且最佳实践是在构建自己的库时执行相同操作。</target>
        </trans-unit>
        <trans-unit id="be3f78b53fc2c577daabc8bc52b4aa660d4e9dae" translate="yes" xml:space="preserve">
          <source>Angular libraries should list all &lt;code&gt;@angular/*&lt;/code&gt; dependencies as peer dependencies. This ensures that when modules ask for Angular, they all get the exact same module. If a library lists &lt;code&gt;@angular/core&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;peerDependencies&lt;/code&gt;, it might get a different Angular module instead, which would cause your application to break.</source>
          <target state="translated">Angular库应该将所有 &lt;code&gt;@angular/*&lt;/code&gt; 依赖关系列为对等依赖关系。这样可以确保当模块要求使用Angular时，它们都将获得完全相同的模块。如果一个库在 &lt;code&gt;&lt;a href=&quot;../api/core/resolvedreflectivefactory#dependencies&quot;&gt;dependencies&lt;/a&gt;&lt;/code&gt; 列出了 &lt;code&gt;@angular/core&lt;/code&gt; 而不是 &lt;code&gt;peerDependencies&lt;/code&gt; ，它可能会改用另一个Angular模块，这将导致您的应用程序中断。</target>
        </trans-unit>
        <trans-unit id="a25634352050885006a3b6152b0eb2a9010080c0" translate="yes" xml:space="preserve">
          <source>Angular loads a component declaratively when using the component's selector to locate the element in the template. Angular then creates the HTML representation of the component and inserts it into the DOM at the selected element. These aren't entry components.</source>
          <target state="translated">当使用组件的选择器来定位模板中的元素时,Angular以声明方式加载组件。然后Angular创建组件的HTML表示,并将其插入到所选元素的DOM中。这些不是入口组件。</target>
        </trans-unit>
        <trans-unit id="995f2b8032fa111ae2d621211fc7064ea0317af9" translate="yes" xml:space="preserve">
          <source>Angular loads a root &lt;code&gt;AppComponent&lt;/code&gt; dynamically because it's listed by type in &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Angular 动态加载根 &lt;code&gt;AppComponent&lt;/code&gt; ,因为它在 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule#bootstrap&quot;&gt;NgModule.bootstrap&lt;/a&gt;&lt;/code&gt; 按类型列出。</target>
        </trans-unit>
        <trans-unit id="08a4bd02cf20c2f65095b4e5963e1bb2afe416d9" translate="yes" xml:space="preserve">
          <source>Angular loads as a collection of JavaScript modules. You can think of them as library modules. Each Angular library name begins with the &lt;code&gt;@angular&lt;/code&gt; prefix. Install them with the node package manager &lt;code&gt;npm&lt;/code&gt; and import parts of them with JavaScript &lt;code&gt;import&lt;/code&gt; statements.</source>
          <target state="translated">Angular加载为JavaScript模块的集合。您可以将它们视为库模块。每个Angular库名称都以 &lt;code&gt;@angular&lt;/code&gt; 前缀开头。使用节点包管理器 &lt;code&gt;npm&lt;/code&gt; 安装它们，并使用JavaScript &lt;code&gt;import&lt;/code&gt; 语句导入它们的一部分。</target>
        </trans-unit>
        <trans-unit id="853e166961741611ece2f458d671b607ed487c72" translate="yes" xml:space="preserve">
          <source>Angular looks for changes to data-bound values through a &lt;em&gt;change detection&lt;/em&gt; process that runs after every DOM event: every keystroke, mouse move, timer tick, and server response. This could be expensive. Angular strives to lower the cost whenever possible and appropriate.</source>
          <target state="translated">Angular通过在每个DOM事件（每次击键，鼠标移动，计时器滴答和服务器响应）后运行的&lt;em&gt;更改检测&lt;/em&gt;过程来寻找对数据绑定值的&lt;em&gt;更改&lt;/em&gt;。这可能很昂贵。Angular努力在可能和适当的情况下降低成本。</target>
        </trans-unit>
        <trans-unit id="698612677c72d7d99a71306fe64680c45b867fa2" translate="yes" xml:space="preserve">
          <source>Angular makes no use of the &lt;code&gt;container&lt;/code&gt;, &lt;code&gt;form-group&lt;/code&gt;, &lt;code&gt;form-control&lt;/code&gt;, and &lt;code&gt;btn&lt;/code&gt; classes or the styles of any external library. Angular apps can use any CSS library or none at all.</source>
          <target state="translated">Angular不使用 &lt;code&gt;container&lt;/code&gt; ， &lt;code&gt;form-group&lt;/code&gt; ， &lt;code&gt;form-control&lt;/code&gt; 和 &lt;code&gt;btn&lt;/code&gt; 类或任何外部库的样式。Angular应用程序可以使用任何CSS库，也可以完全不使用。</target>
        </trans-unit>
        <trans-unit id="d8d1474460cc15db876a17834bf926386371bf34" translate="yes" xml:space="preserve">
          <source>Angular makes the process easy by handling many of the repetitive, boilerplate tasks you'd otherwise wrestle with yourself.</source>
          <target state="translated">Angular通过处理许多重复性的、模板化的任务,让这个过程变得简单,否则你就会自己摔跤。</target>
        </trans-unit>
        <trans-unit id="733393efef5ce43977efcba35cca922753ae83e7" translate="yes" xml:space="preserve">
          <source>Angular makes use of observables as an interface to handle a variety of common asynchronous operations. For example:</source>
          <target state="translated">Angular利用observables作为接口来处理各种常见的异步操作。比如说</target>
        </trans-unit>
        <trans-unit id="c952b87a2d4235b4fa18e60db17580ca8f99e1d9" translate="yes" xml:space="preserve">
          <source>Angular modularity</source>
          <target state="translated">角度模块化</target>
        </trans-unit>
        <trans-unit id="f60bec56de0d46a0d6f36063b2d445f9aa6ecf52" translate="yes" xml:space="preserve">
          <source>Angular modules</source>
          <target state="translated">Angular模块</target>
        </trans-unit>
        <trans-unit id="5d2b463cfcddb80a14ef8505352142925769b3e0" translate="yes" xml:space="preserve">
          <source>Angular needs to know how the pieces of your application fit together and what other files and libraries the app requires. This information is called &lt;em&gt;metadata&lt;/em&gt;.</source>
          <target state="translated">Angular需要知道应用程序的各个部分如何组合在一起，以及应用程序还需要其他哪些文件和库。此信息称为&lt;em&gt;元数据&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="c8907e4049cbb49a2de258115f28db0236a6b67a" translate="yes" xml:space="preserve">
          <source>Angular offers &lt;strong&gt;lifecycle hooks&lt;/strong&gt; that provide visibility into these key life moments and the ability to act when they occur.</source>
          <target state="translated">Angular提供了&lt;strong&gt;生命周期挂钩&lt;/strong&gt;，可让您查看这些关键生命时刻以及发生时的行动能力。</target>
        </trans-unit>
        <trans-unit id="d76e449c5b5a82a11aa58826c48ff9172d4b34e4" translate="yes" xml:space="preserve">
          <source>Angular offers a special &lt;em&gt;two-way data binding&lt;/em&gt; syntax for this purpose, &lt;code&gt;[()]&lt;/code&gt;. The &lt;code&gt;[()]&lt;/code&gt; syntax combines the brackets of property binding, &lt;code&gt;[]&lt;/code&gt;, with the parentheses of event binding, &lt;code&gt;()&lt;/code&gt;.</source>
          <target state="translated">Angular 为此提供了一种特殊&lt;em&gt;的双向数据绑定&lt;/em&gt;语法 &lt;code&gt;[()]&lt;/code&gt; 。的 &lt;code&gt;[()]&lt;/code&gt; 的语法结合的性质的括号结合， &lt;code&gt;[]&lt;/code&gt; ，与事件的括号结合， &lt;code&gt;()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b96c491c78ad4254c4a00563220ea3cb04a021b" translate="yes" xml:space="preserve">
          <source>Angular offers many more capabilities, and you now have a foundation that empowers you to build an application and explore those other capabilities:</source>
          <target state="translated">Angular提供了更多的功能,你现在有了一个基础,使你能够构建一个应用程序并探索这些其他功能。</target>
        </trans-unit>
        <trans-unit id="abc451db75214bb8f5bb03f627de0240f5b091b0" translate="yes" xml:space="preserve">
          <source>Angular offers two kinds of built-in directives: attribute directives and structural directives. This segment reviews some of the most common built-in directives, classified as either &lt;a href=&quot;template-syntax#attribute-directives&quot;&gt;&lt;em&gt;attribute&lt;/em&gt; directives&lt;/a&gt; or &lt;a href=&quot;template-syntax#structural-directives&quot;&gt;&lt;em&gt;structural&lt;/em&gt; directives&lt;/a&gt; and has its own &lt;span name=&quot;built-in-directives&quot;&gt;built-in directives example&lt;/span&gt;.</source>
          <target state="translated">Angular提供了两种内置指令：属性指令和结构指令。本部分回顾了一些最常见的内置指令，分为&lt;a href=&quot;template-syntax#attribute-directives&quot;&gt;&lt;em&gt;属性&lt;/em&gt;指令&lt;/a&gt;或&lt;a href=&quot;template-syntax#structural-directives&quot;&gt;&lt;em&gt;结构&lt;/em&gt;指令，&lt;/a&gt;并有自己的&lt;span name=&quot;built-in-directives&quot;&gt;内置指令示例&lt;/span&gt;。</target>
        </trans-unit>
        <trans-unit id="f6ecdff766f22fe112f392e3b5f72cdc4a54fa55" translate="yes" xml:space="preserve">
          <source>Angular offers two ways to compile your application:</source>
          <target state="translated">Angular提供了两种编译应用程序的方式。</target>
        </trans-unit>
        <trans-unit id="46473abcb3dc6366d18741a180865bfdefc2a988" translate="yes" xml:space="preserve">
          <source>Angular only allows directives to apply on CSS selectors that do not cross element boundaries.</source>
          <target state="translated">Angular只允许指令应用在不跨越元素边界的CSS选择器上。</target>
        </trans-unit>
        <trans-unit id="ab4a735a9f53cef22a8e09069eaf331c806e03b7" translate="yes" xml:space="preserve">
          <source>Angular only binds to &lt;em&gt;public&lt;/em&gt; component properties.</source>
          <target state="translated">Angular仅绑定到&lt;em&gt;公共&lt;/em&gt;组件属性。</target>
        </trans-unit>
        <trans-unit id="0796c5a0e37f43354cb8a990d1da6f63a399b35c" translate="yes" xml:space="preserve">
          <source>Angular only calls the hook when the value of the input property changes. The value of the &lt;code&gt;hero&lt;/code&gt; property is the &lt;em&gt;reference to the hero object&lt;/em&gt;. Angular doesn't care that the hero's own &lt;code&gt;name&lt;/code&gt; property changed. The hero object &lt;em&gt;reference&lt;/em&gt; didn't change so, from Angular's perspective, there is no change to report!</source>
          <target state="translated">Angular仅在输入属性的值更改时才调用该挂钩。 &lt;code&gt;hero&lt;/code&gt; 属性的值是&lt;em&gt;对hero对象&lt;/em&gt;的&lt;em&gt;引用&lt;/em&gt;。Angular不在乎英雄自己的 &lt;code&gt;name&lt;/code&gt; 属性是否已更改。英雄对象&lt;em&gt;引用&lt;/em&gt;没有更改，因此，从Angular的角度来看，没有要报告的更改！</target>
        </trans-unit>
        <trans-unit id="73365649ff96710832ccaf130004428d6aa4b134" translate="yes" xml:space="preserve">
          <source>Angular only matches selectors and pipe names for classes that are declared by this module or exported by a module that this module imports.</source>
          <target state="translated">Angular只匹配本模块声明的或本模块导入的模块导出的类的选择器和管道名。</target>
        </trans-unit>
        <trans-unit id="8f7a44453028015a36d7371b079e0572cb894294" translate="yes" xml:space="preserve">
          <source>Angular packages</source>
          <target state="translated">Angular包</target>
        </trans-unit>
        <trans-unit id="6b8abf66079d4d2aea96a3f990cecede4a31001d" translate="yes" xml:space="preserve">
          <source>Angular picks a simpler, faster change detection algorithm when you use a pipe.</source>
          <target state="translated">当你使用管道时,Angular会挑选一种更简单、更快速的变化检测算法。</target>
        </trans-unit>
        <trans-unit id="ef398c20fe5cffcede85fd0486274f77bc4fc926" translate="yes" xml:space="preserve">
          <source>Angular pipes can help you with internationalization: the &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;CurrencyPipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;PercentPipe&lt;/a&gt;&lt;/code&gt; use locale data to format data based on the &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">角管道可以帮助您进行国际化： &lt;code&gt;&lt;a href=&quot;../api/common/datepipe&quot;&gt;DatePipe&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/common/currencypipe&quot;&gt;CurrencyPipe&lt;/a&gt;&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/common/decimalpipe&quot;&gt;DecimalPipe&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/percentpipe&quot;&gt;PercentPipe&lt;/a&gt;&lt;/code&gt; 使用区域设置数据来基于 &lt;code&gt;&lt;a href=&quot;../api/core/locale_id&quot;&gt;LOCALE_ID&lt;/a&gt;&lt;/code&gt; 格式化数据。</target>
        </trans-unit>
        <trans-unit id="356e1f5698485995ec39cd81b77ba95feef0a58a" translate="yes" xml:space="preserve">
          <source>Angular pipes let you declare display-value transformations in your template HTML. A class with the &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; decorator defines a function that transforms input values to output values for display in a view.</source>
          <target state="translated">角管道使您可以在模板HTML中声明显示值转换。具有 &lt;code&gt;@&lt;a href=&quot;../api/core/pipe&quot;&gt;Pipe&lt;/a&gt;&lt;/code&gt; 装饰器的类定义了一个函数，该函数将输入值转换为输出值以在视图中显示。</target>
        </trans-unit>
        <trans-unit id="991be4c3543e8e594fad4f932af19f57bb79c179" translate="yes" xml:space="preserve">
          <source>Angular previously has supported an integration with the Web Tracing Framework (WTF) for performance testing of Angular applications. This integration has not been maintained and likely does not work for the majority of Angular applications today. As a result, we are deprecating the integration in Angular version 8.</source>
          <target state="translated">Angular之前已经支持与Web跟踪框架(WTF)的集成,用于Angular应用的性能测试。这个集成没有得到维护,而且很可能对目前大多数Angular应用不起作用。因此,我们将在Angular第8版中取消该集成。</target>
        </trans-unit>
        <trans-unit id="6ab7532910f8e47c865be64a0bfffac882f25041" translate="yes" xml:space="preserve">
          <source>Angular processes &lt;em&gt;all&lt;/em&gt; data bindings once for each JavaScript event cycle, from the root of the application component tree through all child components.</source>
          <target state="translated">从应用程序组件树的根目录到所有子组件，Angular会对每个JavaScript事件周期一次处理&lt;em&gt;所有&lt;/em&gt;数据绑定。</target>
        </trans-unit>
        <trans-unit id="4bfe0e1a65f34be08732e68dc2f47387fc26057f" translate="yes" xml:space="preserve">
          <source>Angular provides a built-in module loader that supports SystemJS to load modules asynchronously. If you were using another bundling tool, such as Webpack, you would use the Webpack mechanism for asynchronously loading modules.</source>
          <target state="translated">Angular提供了一个内置的模块加载器,支持SystemJS异步加载模块。如果你使用的是其他捆绑工具,比如Webpack,你会使用Webpack机制来异步加载模块。</target>
        </trans-unit>
        <trans-unit id="26ab5724f97b042d8e6c3e60e5d984f689e157a5" translate="yes" xml:space="preserve">
          <source>Angular provides a number of built-in injection-token constants that you can use to customize the behavior of various systems.</source>
          <target state="translated">Angular提供了许多内置的注入令牌常量,你可以用它们来定制各种系统的行为。</target>
        </trans-unit>
        <trans-unit id="b3c5e069bb7f86fbf8b8fc59544cf9cae9badc49" translate="yes" xml:space="preserve">
          <source>Angular provides a set of schematics for use with the CLI. See the &lt;a href=&quot;cli&quot;&gt;Angular CLI command reference&lt;/a&gt;. The &lt;a href=&quot;cli/add&quot;&gt;&lt;code&gt;ng add&lt;/code&gt;&lt;/a&gt; command runs schematics as part of adding a library to your project. The &lt;a href=&quot;cli/generate&quot;&gt;&lt;code&gt;ng generate&lt;/code&gt;&lt;/a&gt; command runs schematics to create apps, libraries, and Angular code constructs.</source>
          <target state="translated">Angular提供了一组用于CLI的示意图。请参阅&lt;a href=&quot;cli&quot;&gt;Angular CLI命令参考&lt;/a&gt;。该&lt;a href=&quot;cli/add&quot;&gt; &lt;code&gt;ng add&lt;/code&gt; &lt;/a&gt;命令运行原理添加一个库项目的一部分。的&lt;a href=&quot;cli/generate&quot;&gt; &lt;code&gt;ng generate&lt;/code&gt; &lt;/a&gt;命令运行原理图来创建应用程序，库和角的代码构造。</target>
        </trans-unit>
        <trans-unit id="542775cd7da8f6f4765aa0bb672705ccbe83ec20" translate="yes" xml:space="preserve">
          <source>Angular provides advanced capabilities for mobile apps, animation, internationalization, server-side rendering, and more.</source>
          <target state="translated">Angular为移动应用提供了动画、国际化、服务器端渲染等高级功能。</target>
        </trans-unit>
        <trans-unit id="dd1639fcd16106284432fd62af8a0553b09d8af2" translate="yes" xml:space="preserve">
          <source>Angular provides an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; class that is used when publishing values from a component through the &lt;a href=&quot;template-syntax#how-to-use-output&quot;&gt;&lt;code&gt;@Output()&lt;/code&gt; decorator&lt;/a&gt;. &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; extends &lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt;&lt;/a&gt;, adding an &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; method so it can send arbitrary values. When you call &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt;, it passes the emitted value to the &lt;code&gt;next()&lt;/code&gt; method of any subscribed observer.</source>
          <target state="translated">Angular提供了一个 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 类，该类在通过&lt;a href=&quot;template-syntax#how-to-use-output&quot;&gt; &lt;code&gt;@Output()&lt;/code&gt; 装饰器&lt;/a&gt;从组件发布值时使用。 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter&quot;&gt;EventEmitter&lt;/a&gt;&lt;/code&gt; 扩展了&lt;a href=&quot;https://rxjs.dev/api/index/class/Subject&quot;&gt;RxJS &lt;code&gt;Subject&lt;/code&gt; &lt;/a&gt;，添加了generate &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; 方法，以便它可以发送任意值。当调用 &lt;code&gt;&lt;a href=&quot;../api/core/eventemitter#emit&quot;&gt;emit()&lt;/a&gt;&lt;/code&gt; 时，它会将发出的值传递给任何已订阅观察者的 &lt;code&gt;next()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="3ee46a639825d9725e9da43cb62b0f60f904e60a" translate="yes" xml:space="preserve">
          <source>Angular provides many kinds of data-binding. Binding types can be grouped into three categories distinguished by the direction of data flow:</source>
          <target state="translated">Angular提供了多种数据绑定方式。绑定类型可以分为三类,按数据流向区分。</target>
        </trans-unit>
        <trans-unit id="eb6bbbf3a5e95ea73ec84dc48e2d08bd47f217b5" translate="yes" xml:space="preserve">
          <source>Angular provides some builders that are used by the CLI for commands such as &lt;code&gt;ng build&lt;/code&gt;, &lt;code&gt;ng test&lt;/code&gt;, and &lt;code&gt;ng lint&lt;/code&gt;. Default target configurations for these and other built-in CLI builders can be found (and customized) in the &quot;architect&quot; section of the &lt;a href=&quot;workspace-config&quot;&gt;workspace configuration file&lt;/a&gt;, &lt;code&gt;angular.json&lt;/code&gt;. You can also extend and customize Angular by creating your own builders, which you can run using the &lt;a href=&quot;cli/run&quot;&gt;&lt;code&gt;ng run&lt;/code&gt; CLI command&lt;/a&gt;.</source>
          <target state="translated">Angular提供了一些生成器，CLI使用这些生成器来执行诸如 &lt;code&gt;ng build&lt;/code&gt; ， &lt;code&gt;ng test&lt;/code&gt; 和 &lt;code&gt;ng lint&lt;/code&gt; 之类的命令。对于这些和其它默认目标配置内置CLI助洗剂可在的&amp;ldquo;建筑师&amp;rdquo;一节中找到（和定制）&lt;a href=&quot;workspace-config&quot;&gt;的工作区的配置文件&lt;/a&gt;， &lt;code&gt;angular.json&lt;/code&gt; 。您还可以通过创建自己的构建器来扩展和定制Angular，可以使用&lt;a href=&quot;cli/run&quot;&gt; &lt;code&gt;ng run&lt;/code&gt; CLI命令运行它们&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="54e1fe50f3cab60a422c1f61c16b90ad321a060b" translate="yes" xml:space="preserve">
          <source>Angular provides some injectable abstractions over these objects, such as &lt;a href=&quot;../api/common/location&quot;&gt;&lt;code&gt;Location&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../api/common/document&quot;&gt;&lt;code&gt;DOCUMENT&lt;/code&gt;&lt;/a&gt;; it may substitute adequately for these APIs. If Angular doesn't provide it, it's possible to write new abstractions that delegate to the browser APIs while in the browser and to an alternative implementation while on the server (aka shimming).</source>
          <target state="translated">Angular在这些对象上提供了一些可注入的抽象，例如&lt;a href=&quot;../api/common/location&quot;&gt; &lt;code&gt;Location&lt;/code&gt; &lt;/a&gt;或&lt;a href=&quot;../api/common/document&quot;&gt; &lt;code&gt;DOCUMENT&lt;/code&gt; &lt;/a&gt;；它可能足以替代这些API。如果Angular不提供它，则有可能编写新的抽象，以便在浏览器中委派给浏览器API，并在服务器上委派给替代实现（也称为匀场）。</target>
        </trans-unit>
        <trans-unit id="0d8f440b029f6084e216f022e4aad088e8ed5e77" translate="yes" xml:space="preserve">
          <source>Angular provides the &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; function for converting an Angular component, together with its dependencies, to a custom element. The function collects the component's observable properties, along with the Angular functionality the browser needs to create and destroy instances, and to detect and respond to changes.</source>
          <target state="translated">Angular提供了 &lt;code&gt;&lt;a href=&quot;../api/elements/createcustomelement&quot;&gt;createCustomElement&lt;/a&gt;()&lt;/code&gt; 函数，用于将Angular组件及其依赖项转换为自定义元素。该功能收集组件的可观察属性，以及浏览器创建和销毁实例以及检测和响应更改所需的Angular功能。</target>
        </trans-unit>
        <trans-unit id="30e1cd4051db96810a5d5e1dbab2055cb8d90a11" translate="yes" xml:space="preserve">
          <source>Angular provides two different approaches to handling user input through forms: reactive and template-driven. Both capture user input events from the view, validate the user input, create a form model and data model to update, and provide a way to track changes.</source>
          <target state="translated">Angular提供了两种不同的方法来通过表单处理用户输入:反应式和模板驱动。两者都从视图中捕获用户输入事件,验证用户输入,创建表单模型和数据模型进行更新,并提供跟踪变化的方法。</target>
        </trans-unit>
        <trans-unit id="4023aa2209d987433d511efd5c6272087b321931" translate="yes" xml:space="preserve">
          <source>Angular recognizes the directive's role in the validation process because the directive registers itself with the &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; provider, a provider with an extensible collection of validators.</source>
          <target state="translated">Angular会识别指令在验证过程中的作用，因为该指令将自己注册到 &lt;code&gt;&lt;a href=&quot;../api/forms/ng_validators&quot;&gt;NG_VALIDATORS&lt;/a&gt;&lt;/code&gt; 提供程序中，该提供程序具有可扩展的验证程序集合。</target>
        </trans-unit>
        <trans-unit id="378a56a09a2bc8c55214ba40b10672b984ed51c4" translate="yes" xml:space="preserve">
          <source>Angular recognizes the value as unsafe and automatically sanitizes it, which removes the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag but keeps safe content such as the &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">Angular将值识别为不安全并自动清除它，这会删除 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标记，但会保留安全内容，例如 &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; 元素。</target>
        </trans-unit>
        <trans-unit id="a124b894fc0aadcd5a3d3d6b85932c692b5117df" translate="yes" xml:space="preserve">
          <source>Angular registers all startup module providers with the application root injector. The services that root injector providers create have application scope, which means they are available to the entire application.</source>
          <target state="translated">Angular将所有的启动模块提供者注册到应用程序根注入器中。根注入器提供者创建的服务具有应用范围,这意味着它们可用于整个应用。</target>
        </trans-unit>
        <trans-unit id="925daa517f76b33161b91ea28daef5e4bea3e10e" translate="yes" xml:space="preserve">
          <source>Angular registers its own providers with every injector, for services that Angular defines. You can register your own providers for services that your app needs.</source>
          <target state="translated">Angular会在每个注入器中注册自己的提供者,用于Angular定义的服务。你可以为你的应用需要的服务注册自己的提供者。</target>
        </trans-unit>
        <trans-unit id="63df769c252c01cddc5b9fc4a5c36530656fab5b" translate="yes" xml:space="preserve">
          <source>Angular registers these providers with the NgModule's injector. If it is the NgModule used for bootstrapping then it is the root injector.</source>
          <target state="translated">Angular将这些提供者注册到NgModule的注入器中。如果是用于引导的NgModule,那么它就是根注入器。</target>
        </trans-unit>
        <trans-unit id="94f603c4b0f5b4c970534ab64ea69e7b16cf94f8" translate="yes" xml:space="preserve">
          <source>Angular relies on the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; abstraction to work safely across &lt;em&gt;all supported platforms&lt;/em&gt;. Instead of creating an HTML element tree, Angular creates a &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; tree that wraps the &lt;em&gt;native elements&lt;/em&gt; for the runtime platform. The &lt;code&gt;nativeElement&lt;/code&gt; property unwraps the &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; and returns the platform-specific element object.</source>
          <target state="translated">Angular依赖 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 抽象在&lt;em&gt;所有支持的平台上&lt;/em&gt;安全工作。Angular不会创建HTML元素树，而是创建一个 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 树来包装运行时平台的&lt;em&gt;本机元素&lt;/em&gt;。该 &lt;code&gt;nativeElement&lt;/code&gt; 财产解开的 &lt;code&gt;&lt;a href=&quot;../api/core/debugelement&quot;&gt;DebugElement&lt;/a&gt;&lt;/code&gt; 并返回特定于平台的元素对象。</target>
        </trans-unit>
        <trans-unit id="6599d35b316da91d120de3a4ffc0e370ef3d5559" translate="yes" xml:space="preserve">
          <source>Angular relies on zone.js to run Angular's change detection processes when native JavaScript operations raise events. Zone.js is an implementation of a &lt;a href=&quot;https://gist.github.com/mhevery/63fdcdf7c65886051d55&quot;&gt;specification&lt;/a&gt; currently before the &lt;a href=&quot;http://www.ecma-international.org/memento/TC39.htm&quot;&gt;TC39&lt;/a&gt; committee that determines standards for the JavaScript language.</source>
          <target state="translated">当本地JavaScript操作引发事件时，Angular依靠zone.js来运行Angular的更改检测过程。Zone.js是的实现&lt;a href=&quot;https://gist.github.com/mhevery/63fdcdf7c65886051d55&quot;&gt;规范&lt;/a&gt;目前前&lt;a href=&quot;http://www.ecma-international.org/memento/TC39.htm&quot;&gt;TC39&lt;/a&gt;委员会确定的标准JavaScript语言。</target>
        </trans-unit>
        <trans-unit id="400c95b463a974784a617426bfeda0f26de33b43" translate="yes" xml:space="preserve">
          <source>Angular requires &lt;code&gt;Node.js&lt;/code&gt; version 10.9.0 or later.</source>
          <target state="translated">Angular需要 &lt;code&gt;Node.js&lt;/code&gt; 版本10.9.0或更高版本。</target>
        </trans-unit>
        <trans-unit id="bef32477f038457ec76edcd6fb2cb0f29b6948d9" translate="yes" xml:space="preserve">
          <source>Angular sanitizes untrusted values for HTML, styles, and URLs; sanitizing resource URLs isn't possible because they contain arbitrary code. In development mode, Angular prints a console warning when it has to change a value during sanitization.</source>
          <target state="translated">Angular会对HTML、样式和URL的不信任值进行消毒,对资源URL的消毒是不可能的,因为它们包含任意代码。在开发模式下,当Angular在消毒过程中必须改变一个值时,会打印一个控制台警告。</target>
        </trans-unit>
        <trans-unit id="95d6c94f88761a819224e7f7ef31c0e016974ef3" translate="yes" xml:space="preserve">
          <source>Angular service worker introduction</source>
          <target state="translated">Angular服务人员介绍</target>
        </trans-unit>
        <trans-unit id="ece6de84f6157a2281fd204f372508b6e8936e9e" translate="yes" xml:space="preserve">
          <source>Angular sets the &lt;code&gt;appUnless&lt;/code&gt; property whenever the value of the condition changes. Because the &lt;code&gt;appUnless&lt;/code&gt; property does work, it needs a setter.</source>
          <target state="translated">每当条件值更改时，Angular都会设置 &lt;code&gt;appUnless&lt;/code&gt; 属性。因为 &lt;code&gt;appUnless&lt;/code&gt; 属性确实起作用，所以它需要一个setter。</target>
        </trans-unit>
        <trans-unit id="b48433aa9a27d0daa63f87a6c53ae76ff80c318e" translate="yes" xml:space="preserve">
          <source>Angular sets the constructor's &lt;code&gt;el&lt;/code&gt; parameter to the injected &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt;. (An &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; is a wrapper around a DOM element, whose &lt;code&gt;nativeElement&lt;/code&gt; property exposes the DOM element for the directive to manipulate.)</source>
          <target state="translated">Angular将构造函数的 &lt;code&gt;el&lt;/code&gt; 参数设置为注入的 &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 。（ &lt;code&gt;&lt;a href=&quot;../api/core/elementref&quot;&gt;ElementRef&lt;/a&gt;&lt;/code&gt; 是DOM元素的包装，其 &lt;code&gt;nativeElement&lt;/code&gt; 属性公开DOM元素供指令使用。）</target>
        </trans-unit>
        <trans-unit id="0897472d9acb678fe4ea07d3a7bc055bd1af6070" translate="yes" xml:space="preserve">
          <source>Angular ships as a collection of JavaScript modules (also called libraries). Each Angular library name begins with the &lt;code&gt;@angular&lt;/code&gt; prefix. Install Angular libraries with the &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm package manager&lt;/a&gt; and import parts of them with JavaScript &lt;code&gt;import&lt;/code&gt; declarations.</source>
          <target state="translated">Angular作为JavaScript模块（也称为库）的集合提供。每个Angular库名称都以 &lt;code&gt;@angular&lt;/code&gt; 前缀开头。使用&lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm软件包管理器&lt;/a&gt;安装Angular库，并使用JavaScript &lt;code&gt;import&lt;/code&gt; 声明导入部分库。</target>
        </trans-unit>
        <trans-unit id="c2ed54e54eda3c09a0744999f1f67eb581505b10" translate="yes" xml:space="preserve">
          <source>Angular simplifies the following aspects of internationalization:</source>
          <target state="translated">Angular简化了国际化的以下几个方面。</target>
        </trans-unit>
        <trans-unit id="0b4571fc697e46d0f07cb794315e2abe97a50faa" translate="yes" xml:space="preserve">
          <source>Angular strives to balance innovation and stability. Sometimes, APIs and features become obsolete and need to be removed or replaced so that Angular can stay current with new best practices, changing dependencies, or changes in the (web) platform itself.</source>
          <target state="translated">Angular努力平衡创新和稳定。有时,API和功能会变得过时,需要删除或替换,以便Angular能够适应新的最佳实践、不断变化的依赖性或(网络)平台本身的变化。</target>
        </trans-unit>
        <trans-unit id="5b3dd1bbaa7482ecb455dc8c4b78b8e67ed96278" translate="yes" xml:space="preserve">
          <source>Angular supplies a number of built-in directives that begin with the &lt;code&gt;ng&lt;/code&gt; prefix. You can also create new directives to implement your own functionality. You associate a &lt;em&gt;selector&lt;/em&gt; (an HTML tag such as &lt;code&gt;&amp;lt;my-directive&amp;gt;&lt;/code&gt;) with a custom directive, thereby extending the &lt;a href=&quot;template-syntax&quot;&gt;template syntax&lt;/a&gt; that you can use in your apps.</source>
          <target state="translated">Angular提供了许多以 &lt;code&gt;ng&lt;/code&gt; 前缀开头的内置指令。您还可以创建新指令来实现自己的功能。您将&lt;em&gt;选择器&lt;/em&gt;（如 &lt;code&gt;&amp;lt;my-directive&amp;gt;&lt;/code&gt; 之类的HTML标记）与自定义指令相关联，从而扩展了可在应用程序中使用的&lt;a href=&quot;template-syntax&quot;&gt;模板语法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2bd39507a08adc6ad5177ae79d86f8ce148fdf68" translate="yes" xml:space="preserve">
          <source>Angular supports &lt;em&gt;two-way data binding&lt;/em&gt;, a mechanism for coordinating the parts of a template with the parts of a component. Add binding markup to the template HTML to tell Angular how to connect both sides.</source>
          <target state="translated">Angular支持&lt;em&gt;双向数据绑定&lt;/em&gt;，这是一种用于将模板的各个部分与组件的各个部分进行协调的机制。在模板HTML中添加绑定标记，以告诉Angular如何连接双方。</target>
        </trans-unit>
        <trans-unit id="7ea371269e61139c2a9831641c5589131284de96" translate="yes" xml:space="preserve">
          <source>Angular supports most recent browsers. This includes the following specific versions:</source>
          <target state="translated">Angular支持最新的浏览器。这包括以下具体版本。</target>
        </trans-unit>
        <trans-unit id="e8e04243c1697b41d29fbfba8b823298c738e03c" translate="yes" xml:space="preserve">
          <source>Angular templates are &lt;em&gt;dynamic&lt;/em&gt;. When Angular renders them, it transforms the DOM according to the instructions given by &lt;em&gt;directives&lt;/em&gt;. A directive is a class with a &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">角度模板是&lt;em&gt;动态的&lt;/em&gt;。当Angular渲染它们时，它将根据&lt;em&gt;伪&lt;/em&gt;指令给出的&lt;em&gt;指令&lt;/em&gt;对DOM进行转换。指令是带有 &lt;code&gt;@&lt;a href=&quot;../api/core/directive&quot;&gt;Directive&lt;/a&gt;()&lt;/code&gt; 装饰器的类。</target>
        </trans-unit>
        <trans-unit id="75360540a862cda10bfe5d3cc9e4e3d8b9249e08" translate="yes" xml:space="preserve">
          <source>Angular throws a cyclic dependency error if you omit the &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; decorator.</source>
          <target state="translated">如果省略 &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;&lt;/code&gt; 装饰器，则Angular会引发循环依赖项错误。</target>
        </trans-unit>
        <trans-unit id="dffe45e60da8df6adcbb8bd717d7b920a8f70a40" translate="yes" xml:space="preserve">
          <source>Angular throws an error if the hook updates the component's data-bound &lt;code&gt;comment&lt;/code&gt; property immediately (try it!). The &lt;code&gt;LoggerService.tick_then()&lt;/code&gt; postpones the log update for one turn of the browser's JavaScript cycle and that's just long enough.</source>
          <target state="translated">如果挂钩立即更新了组件的数据绑定 &lt;code&gt;comment&lt;/code&gt; 属性（尝试一下！），Angular会引发错误。该 &lt;code&gt;LoggerService.tick_then()&lt;/code&gt; 推迟了浏览器的JavaScript循环一圈的日志更新，这只是足够长的时间。</target>
        </trans-unit>
        <trans-unit id="e332f37242cc9fcbbae5b381770424eb2cc4ab0e" translate="yes" xml:space="preserve">
          <source>Angular throws an error if you haven't also decorated the property with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;. When the property is marked as optional, Angular sets &lt;code&gt;loggerService&lt;/code&gt; to null and the rest of the component adapts.</source>
          <target state="translated">如果您还没有使用 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; 装饰属性，则Angular会引发错误。当将该属性标记为可选时，Angular &lt;code&gt;loggerService&lt;/code&gt; 设置为null，其余组件将进行调整。</target>
        </trans-unit>
        <trans-unit id="5e4db9368e884831e9e20c6790dc42c39f7b1964" translate="yes" xml:space="preserve">
          <source>Angular transforms the &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; in similar fashion from asterisk (*) syntax to &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt;&lt;em&gt;element&lt;/em&gt;.</source>
          <target state="translated">Angular 以类似的方式将 &lt;code&gt;*&lt;a href=&quot;../api/common/ngforof&quot;&gt;ngFor&lt;/a&gt;&lt;/code&gt; 从星号（*）语法转换为 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; &lt;em&gt;元素&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e67e3de40fe95a8c00d4dd1bff2697445d28684b" translate="yes" xml:space="preserve">
          <source>Angular translates this instruction into an &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; around the host element, then uses this template repeatedly to create a new set of elements and bindings for each &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; in the list. For more information about microsyntax, see the &lt;a href=&quot;structural-directives#microsyntax&quot;&gt;Structural Directives&lt;/a&gt; guide.</source>
          <target state="translated">Angular将该指令转换为围绕宿主元素的 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; ，然后反复使用此模板为列表中的每个 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 创建一组新的元素和绑定。有关微语法的更多信息，请参见《&lt;a href=&quot;structural-directives#microsyntax&quot;&gt;结构指令》&lt;/a&gt;指南。</target>
        </trans-unit>
        <trans-unit id="d6acd0291e45c98173358bf8fc914f274d361be6" translate="yes" xml:space="preserve">
          <source>Angular updates the bindings (and therefore the screen) only if the app does something in response to asynchronous events, such as keystrokes. This example code binds the &lt;code&gt;keyup&lt;/code&gt; event to the number 0, the shortest template statement possible. While the statement does nothing useful, it satisfies Angular's requirement so that Angular will update the screen.</source>
          <target state="translated">只有当应用程序响应异步事件（例如按键）时，Angular才会更新绑定（并因此更新屏幕）。此示例代码将 &lt;code&gt;keyup&lt;/code&gt; 事件绑定到数字0（可能的最短模板语句）。虽然该语句没有任何用处，但它满足了Angular的要求，以便Angular更新屏幕。</target>
        </trans-unit>
        <trans-unit id="550b4fe7f3f5d9e42a538e1d35676d32309e777c" translate="yes" xml:space="preserve">
          <source>Angular used to rely on the browser to provide number, date, and currency formatting using browser i18n APIs. This practice meant that most apps needed to use a polyfill, users were seeing inconsistent results across browsers, and common formats (such as the currency pipe) didn&amp;rsquo;t match developer expectations out of the box.</source>
          <target state="translated">Angular过去依靠浏览器使用浏览器i18n API提供数字，日期和货币格式。这种做法意味着大多数应用程序需要使用polyfill，用户在浏览器中看到不一致的结果，并且通用格式（例如货币管道）与开箱即用的开发人员的期望不符。</target>
        </trans-unit>
        <trans-unit id="d34417d3060d2e52591c5133c737a9fc73577780" translate="yes" xml:space="preserve">
          <source>Angular uses a third-party library called &lt;a href=&quot;http://reactivex.io/rxjs/&quot;&gt;Reactive Extensions (RxJS)&lt;/a&gt;.</source>
          <target state="translated">Angular使用名为&lt;a href=&quot;http://reactivex.io/rxjs/&quot;&gt;Reactive Extensions（RxJS）&lt;/a&gt;的第三方库。</target>
        </trans-unit>
        <trans-unit id="238cd9c643f7186f47327fa3f20d86506d261bf2" translate="yes" xml:space="preserve">
          <source>Angular uses capitalization conventions to distinguish the names of various types, as described in the &lt;a href=&quot;styleguide#02-01&quot;&gt;naming guidelines section&lt;/a&gt; of the Style Guide. Here's a summary of the case types:</source>
          <target state="translated">Angular使用大写约定来区分各种类型的名称，如《样式指南》的&lt;a href=&quot;styleguide#02-01&quot;&gt;命名指南部分&lt;/a&gt;所述。以下是案例类型的摘要：</target>
        </trans-unit>
        <trans-unit id="b23d17cee636d84970f89a7ad98f26ce7fdce1aa" translate="yes" xml:space="preserve">
          <source>Angular uses object identity to select option. It's possible for the identities of items to change while the data does not. This can happen, for example, if the items are produced from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the second response will produce objects with different identities.</source>
          <target state="translated">Angular使用对象身份来选择选项。有可能项目的身份会发生变化,而数据不会发生变化。例如,如果项目是从一个RPC到服务器产生的,并且该RPC被重新运行,就有可能发生这种情况。即使数据没有改变,第二个响应也会产生具有不同身份的对象。</target>
        </trans-unit>
        <trans-unit id="afa3e2aab5eb44abf792978d1175dab7157473c8" translate="yes" xml:space="preserve">
          <source>Angular uses object identity to track insertions and deletions within the iterator and reproduce those changes in the DOM. This has important implications for animations and any stateful controls that are present, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements that accept user input. Inserted rows can be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such as user input. For more on animations, see &lt;a href=&quot;../../guide/transition-and-triggers&quot;&gt;Transitions and Triggers&lt;/a&gt;.</source>
          <target state="translated">Angular使用对象标识来跟踪迭代器中的插入和删除，并在DOM中重现这些更改。这对动画和存在的任何状态控件（例如接受用户输入的 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 元素）都具有重要意义。可以对插入的行进行动画处理，可以对删除的行进行动画处理，而未更改的行则保留任何未保存的状态，例如用户输入。有关动画的更多信息，请参见&amp;ldquo; &lt;a href=&quot;../../guide/transition-and-triggers&quot;&gt;过渡和触发器&amp;rdquo;&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1cb885a8c762330f16faa7918e600c17bab6fcad" translate="yes" xml:space="preserve">
          <source>Angular uses property binding; there is no built-in &lt;em&gt;href&lt;/em&gt; directive. Place the element's &lt;code&gt;href&lt;/code&gt; property in square brackets and set it to a quoted template expression.</source>
          <target state="translated">Angular使用属性绑定；没有内置的&lt;em&gt;href&lt;/em&gt;指令。将元素的 &lt;code&gt;href&lt;/code&gt; 属性放在方括号中，并将其设置为带引号的模板表达式。</target>
        </trans-unit>
        <trans-unit id="72ad9c35cd585d33a4b440a583ddfd37683769b7" translate="yes" xml:space="preserve">
          <source>Angular uses property binding; there is no built-in &lt;em&gt;show&lt;/em&gt; directive. For hiding and showing elements, bind to the HTML &lt;code&gt;hidden&lt;/code&gt; property.</source>
          <target state="translated">Angular使用属性绑定；没有内置的&lt;em&gt;show&lt;/em&gt;指令。要隐藏和显示元素，请绑定到HTML &lt;code&gt;hidden&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="0b8039827d9181117e8916b7566b190665ccc87d" translate="yes" xml:space="preserve">
          <source>Angular uses property binding; there is no built-in &lt;em&gt;src&lt;/em&gt; directive. Place the &lt;code&gt;src&lt;/code&gt; property in square brackets and set it to a quoted template expression.</source>
          <target state="translated">Angular使用属性绑定；没有内置的&lt;em&gt;src&lt;/em&gt;指令。将 &lt;code&gt;src&lt;/code&gt; 属性放在方括号中，并将其设置为带引号的模板表达式。</target>
        </trans-unit>
        <trans-unit id="6bc76e6d5243f1e5063ab51dd2791ed0cb2ccde1" translate="yes" xml:space="preserve">
          <source>Angular version numbers have three parts: &lt;code&gt;major.minor.patch&lt;/code&gt;. For example, version 7.2.11 indicates major version 7, minor version 2, and patch level 11.</source>
          <target state="translated">角版本号包含三个部分： &lt;code&gt;major.minor.patch&lt;/code&gt; 。例如，版本7.2.11指示主要版本7，次要版本2和补丁程序级别11。</target>
        </trans-unit>
        <trans-unit id="e66d745516cc0cbdc5a199f2171badeb163e055a" translate="yes" xml:space="preserve">
          <source>Angular version numbers indicate the level of changes that are introduced by the release. This use of &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt; helps you understand the potential impact of updating to a new version.</source>
          <target state="translated">角版本号指示该版本引入的更改级别。&lt;a href=&quot;https://semver.org/&quot;&gt;语义版本控制的&lt;/a&gt;这种用法可帮助您了解更新到新版本的潜在影响。</target>
        </trans-unit>
        <trans-unit id="6667c0e19d01e9c6b4ce15412ca271371a87af6e" translate="yes" xml:space="preserve">
          <source>Angular versioning</source>
          <target state="translated">Angular版本管理</target>
        </trans-unit>
        <trans-unit id="ae599289dc507efb8c0a1716c60673504ba85f7d" translate="yes" xml:space="preserve">
          <source>Angular versions ^4.0.0 and ^5.0.0 are no longer under support.</source>
          <target state="translated">Angular版本^4.0.0和^5.0.0不再支持。</target>
        </trans-unit>
        <trans-unit id="50dcd5af91abd8b4ee5691549f133ec7e54a19b3" translate="yes" xml:space="preserve">
          <source>Angular&amp;rsquo;s &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; returns observables from HTTP method calls. For instance, &lt;code&gt;http.get(&amp;lsquo;/api&amp;rsquo;)&lt;/code&gt; returns an observable. This provides several advantages over promise-based HTTP APIs:</source>
          <target state="translated">Angular的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 从HTTP方法调用返回可观察值。例如， &lt;code&gt;http.get(&amp;lsquo;/api&amp;rsquo;)&lt;/code&gt; 返回一个可观察值。与基于promise的HTTP API相比，这提供了多个优点：</target>
        </trans-unit>
        <trans-unit id="39d9244a49d87a2a7a6aedec6ed8bfecbe27e003" translate="yes" xml:space="preserve">
          <source>Angular&amp;rsquo;s cross-site scripting security model</source>
          <target state="translated">Angular的跨站点脚本安全模型</target>
        </trans-unit>
        <trans-unit id="361440e87ccdb1fecd73d942a162a4cb298411a7" translate="yes" xml:space="preserve">
          <source>Angular's &lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/compiler-cli/src/metadata/schema.ts&quot;&gt;schema.ts&lt;/a&gt; describes the JSON format as a collection of TypeScript interfaces.</source>
          <target state="translated">Angular的&lt;a href=&quot;https://github.com/angular/angular/blob/master/packages/compiler-cli/src/metadata/schema.ts&quot;&gt;schema.ts&lt;/a&gt;将JSON格式描述为TypeScript接口的集合。</target>
        </trans-unit>
        <trans-unit id="8b0004daae3fceeb6dd522584dd3f1c3e15008d4" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; has built-in support for the client-side half of this technique. Read about it more in the &lt;a href=&quot;http&quot;&gt;HttpClient guide&lt;/a&gt;.</source>
          <target state="translated">Angular的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 对此技术的客户端一半提供了内置支持。在&lt;a href=&quot;http&quot;&gt;HttpClient指南中&lt;/a&gt;详细了解它。</target>
        </trans-unit>
        <trans-unit id="4fb50cce578f3a5a5a7abdb4dd6da589ba21a121" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; library recognizes this convention and automatically strips the string &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; from all responses before further parsing.</source>
          <target state="translated">Angular的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 库可以识别此约定，并在进一步解析之前自动从所有响应中剥离字符串 &lt;code&gt;&quot;)]}',\n&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="14617516211b35ab06a4b2a6b666a840eb5b82fd" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; registers the providers needed to use a single instance of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service throughout your app. The &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service is what you inject into your services to fetch data and interact with external APIs and resources.</source>
          <target state="translated">Angular的 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 注册了在整个应用程序中使用 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 服务的单个实例所需的提供程序。该 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的服务为你注入什么到你的服务与外部API和资源来获取数据和交互。</target>
        </trans-unit>
        <trans-unit id="ec334ceb63562c7ef49674b3cead9e9d4cba4020" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; service provides convenient methods for generating controls. As with the other services you've used, you need to import and inject the service before you can use it:</source>
          <target state="translated">Angular的 &lt;code&gt;&lt;a href=&quot;../api/forms/formbuilder&quot;&gt;FormBuilder&lt;/a&gt;&lt;/code&gt; 服务提供了用于生成控件的便捷方法。与您使用的其他服务一样，您需要先导入和注入服务，然后才能使用它：</target>
        </trans-unit>
        <trans-unit id="cf774047e36d0ca6ef5a720dc672fae05bb9fc52" translate="yes" xml:space="preserve">
          <source>Angular's &lt;code&gt;keyframe()&lt;/code&gt; function is similar to keyframes in CSS. Keyframes allow several style changes within a single timing segment. For example, our button, instead of fading, could change color several times over a single 2-second timespan.</source>
          <target state="translated">Angular的 &lt;code&gt;keyframe()&lt;/code&gt; 函数类似于CSS中的关键帧。关键帧允许在单个时间段内进行多种样式更改。例如，我们的按钮可以在一个2秒的时间范围内多次改变颜色，而不是褪色。</target>
        </trans-unit>
        <trans-unit id="35707b1741a5656cd81137fd131c1cecf9c96f83" translate="yes" xml:space="preserve">
          <source>Angular's HTTP testing library is designed for a pattern of testing in which the app executes code and makes requests first. The test then expects that certain requests have or have not been made, performs assertions against those requests, and finally provides responses by &quot;flushing&quot; each expected request.</source>
          <target state="translated">Angular的HTTP测试库是为应用程序执行代码并首先发出请求的测试模式而设计的。然后,测试预期某些请求已经或尚未被发出,针对这些请求执行断言,最后通过 &quot;刷新 &quot;每个预期请求来提供响应。</target>
        </trans-unit>
        <trans-unit id="44f361bf81db534631a0013ce3d42b1478068b98" translate="yes" xml:space="preserve">
          <source>Angular's animation support builds on top of web animations, so you can animate any property that the browser considers animatable. This includes positions, sizes, transforms, colors, borders, and more. The W3C maintains a list of animatable properties on its &lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSS Transitions&lt;/a&gt; page.</source>
          <target state="translated">Angular的动画支持建立在Web动画的基础上，因此您可以为浏览器认为可动画的任何属性设置动画。这包括位置，大小，变换，颜色，边框等。W3C在其&lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSS Transitions&lt;/a&gt;页面上维护可动画属性列表。</target>
        </trans-unit>
        <trans-unit id="f1bc2a1c230dc36047042d454f2cb3150e707c25" translate="yes" xml:space="preserve">
          <source>Angular's animation system is built on CSS functionality, which means you can animate any property that the browser considers animatable. This includes positions, sizes, transforms, colors, borders, and more. The W3C maintains a list of animatable properties on its &lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSS Transitions&lt;/a&gt; page.</source>
          <target state="translated">Angular的动画系统基于CSS功能构建，这意味着您可以为浏览器认为可动画的任何属性设置动画。这包括位置，大小，变换，颜色，边框等。W3C在其&lt;a href=&quot;https://www.w3.org/TR/css-transitions-1/&quot;&gt;CSS Transitions&lt;/a&gt;页面上维护可动画属性列表。</target>
        </trans-unit>
        <trans-unit id="c259b63cddb04acf22e950acc14653da9d32a74e" translate="yes" xml:space="preserve">
          <source>Angular's animations library makes it easy to define and apply animation effects such as page and list transitions. For more information, see the &lt;a href=&quot;animations&quot;&gt;Animations guide&lt;/a&gt;.</source>
          <target state="translated">Angular的动画库可轻松定义和应用动画效果，例如页面和列表过渡。有关更多信息，请参见&lt;a href=&quot;animations&quot;&gt;动画指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1ae8350364c17bca7b7f63ffe70ee1b69a60cc69" translate="yes" xml:space="preserve">
          <source>Angular's continuous integration process runs unit tests of the framework on all of these browsers for every pull request, using &lt;a href=&quot;https://saucelabs.com/&quot;&gt;SauceLabs&lt;/a&gt; and &lt;a href=&quot;https://www.browserstack.com&quot;&gt;Browserstack&lt;/a&gt;.</source>
          <target state="translated">Angular的持续集成过程使用&lt;a href=&quot;https://saucelabs.com/&quot;&gt;SauceLabs&lt;/a&gt;和&lt;a href=&quot;https://www.browserstack.com&quot;&gt;Browserstack&lt;/a&gt;在所有这些浏览器上针对每个拉取请求运行框架的单元测试。</target>
        </trans-unit>
        <trans-unit id="cf8707d44d9ba4cc582ed7d651d0ee4d537dd6ef" translate="yes" xml:space="preserve">
          <source>Angular's resolution behavior can be modified with &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt;, &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt;. Import each of them from &lt;code&gt;@angular/core&lt;/code&gt; and use each in the component class constructor when you inject your service.</source>
          <target state="translated">角的分辨率行为可以通过修改 &lt;code&gt;@&lt;a href=&quot;../api/core/optional&quot;&gt;Optional&lt;/a&gt;()&lt;/code&gt; ， &lt;code&gt;@&lt;a href=&quot;../api/core/self&quot;&gt;Self&lt;/a&gt;()&lt;/code&gt; ， &lt;code&gt;@&lt;a href=&quot;../api/core/skipself&quot;&gt;SkipSelf&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/host&quot;&gt;Host&lt;/a&gt;()&lt;/code&gt; 。从 &lt;code&gt;@angular/core&lt;/code&gt; 导入它们中的每一个，并在注入服务时在组件类构造函数中使用它们。</target>
        </trans-unit>
        <trans-unit id="1786feb384dc29da2b7d0b362b7546fe85676b4f" translate="yes" xml:space="preserve">
          <source>Angular's service worker is designed to optimize the end user experience of using an application over a slow or unreliable network connection, while also minimizing the risks of serving outdated content.</source>
          <target state="translated">Angular的service worker旨在优化最终用户在缓慢或不可靠的网络连接上使用应用的体验,同时也将服务过时内容的风险降到最低。</target>
        </trans-unit>
        <trans-unit id="504cd5fa4c7a2dccac0652568a0bf7e92fa161e4" translate="yes" xml:space="preserve">
          <source>Angular's template compiler. It understands templates and can convert them to code that makes the application run and render. Typically you don&amp;rsquo;t interact with the compiler directly; rather, you use it indirectly via &lt;code&gt;platform-browser-dynamic&lt;/code&gt; when JIT compiling in the browser. For more information, see the &lt;a href=&quot;aot-compiler&quot;&gt;Ahead-of-time Compilation guide&lt;/a&gt;.</source>
          <target state="translated">Angular的模板编译器。它了解模板并将其转换为使应用程序运行和呈现的代码。通常，您不直接与编译器交互；相反，当在浏览器中进行JIT编译时，可以通过 &lt;code&gt;platform-browser-dynamic&lt;/code&gt; 间接使用它。有关更多信息，请参见《&lt;a href=&quot;aot-compiler&quot;&gt;提前编译》指南&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff40c7b19b49d4d5e133e555bcb91882845c5f9c" translate="yes" xml:space="preserve">
          <source>Angular's template syntax extends HTML and JavaScript. This section introduces template syntax by enhancing the &quot;Products&quot; area.</source>
          <target state="translated">Angular的模板语法扩展了HTML和JavaScript。本节通过增强 &quot;产品 &quot;区域来介绍模板语法。</target>
        </trans-unit>
        <trans-unit id="3ddc03baf11e86bab9597295ea44e229f6cb702e" translate="yes" xml:space="preserve">
          <source>Angular's unidirectional data flow rule forbids updates to the view &lt;em&gt;after&lt;/em&gt; it has been composed. Both of these hooks fire &lt;em&gt;after&lt;/em&gt; the component's view has been composed.</source>
          <target state="translated">组成视图&lt;em&gt;后&lt;/em&gt;，Angular的单向数据流规则禁止对其进行更新。组成组件的视图&lt;em&gt;后&lt;/em&gt;，这两个钩子都会触发。</target>
        </trans-unit>
        <trans-unit id="d5adb3a8bc2d1144d715b4e241c8b97e75acec4c" translate="yes" xml:space="preserve">
          <source>Angular, the Angular CLI, and Angular apps depend on features and functionality provided by libraries that are available as &lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm packages&lt;/a&gt;. To download and install npm packages, you must have an npm package manager.</source>
          <target state="translated">Angular，Angular CLI和Angular应用程序取决于作为&lt;a href=&quot;https://docs.npmjs.com/getting-started/what-is-npm&quot;&gt;npm软件包&lt;/a&gt;提供的库提供的功能。要下载并安装npm软件包，您必须具有npm软件包管理器。</target>
        </trans-unit>
        <trans-unit id="2a3de4a9dc7c9f3bd23b0b53226033777b1c013b" translate="yes" xml:space="preserve">
          <source>AngularJS</source>
          <target state="translated">AngularJS</target>
        </trans-unit>
        <trans-unit id="6e35a378aa54bd494ebc719b125fbf5b36ab4fb7" translate="yes" xml:space="preserve">
          <source>AngularJS 1.5 introduces the &lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module#component&quot;&gt;component API&lt;/a&gt; that makes it easier to define component directives like these. It is a good idea to use this API for component directives for several reasons:</source>
          <target state="translated">AngularJS 1.5引入了&lt;a href=&quot;https://docs.angularjs.org/api/ng/type/angular.Module#component&quot;&gt;组件API&lt;/a&gt;，它使定义此类组件指令变得更加容易。出于以下几个原因，最好将此API用于组件指令：</target>
        </trans-unit>
        <trans-unit id="be95540cbaad0a5ea6f38f0fb89f4c1fe637785c" translate="yes" xml:space="preserve">
          <source>AngularJS apps are great. Always consider the business case before moving to Angular. An important part of that case is the time and effort to get there. This guide describes the built-in tools for efficiently migrating AngularJS projects over to the Angular platform, a piece at a time.</source>
          <target state="translated">AngularJS应用是伟大的。在转向Angular之前,一定要考虑商业案例。该案例的一个重要部分是到达那里的时间和精力。本指南介绍了高效地将AngularJS项目迁移到Angular平台的内置工具,一次一个。</target>
        </trans-unit>
        <trans-unit id="ad3374e34ac229a514bcb825e7c41831585eac3c" translate="yes" xml:space="preserve">
          <source>AngularJS developers know this technique as &lt;em&gt;transclusion&lt;/em&gt;.</source>
          <target state="translated">AngularJS开发人员将此技术称为&lt;em&gt;包含&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="2b756697e8af3cfff41be5b54a86bcc40435ed5a" translate="yes" xml:space="preserve">
          <source>AngularJS directives always execute inside AngularJS framework codebase regardless of where they are instantiated.</source>
          <target state="translated">AngularJS指令无论在哪里实例化,都会在AngularJS框架代码库中执行。</target>
        </trans-unit>
        <trans-unit id="5883a4552c1e380fb9e76fe1a405dd956e2e041a" translate="yes" xml:space="preserve">
          <source>AngularJS directives always execute inside the AngularJS framework codebase regardless of where they are instantiated.</source>
          <target state="translated">AngularJS指令总是在AngularJS框架代码库内执行,无论它们在哪里被实例化。</target>
        </trans-unit>
        <trans-unit id="a2361ecb57211e492282d07e7e196e2d57b74a2f" translate="yes" xml:space="preserve">
          <source>AngularJS event-based directives do not exist in Angular. Rather, define one-way binding from the template view to the component using &lt;strong&gt;event binding&lt;/strong&gt;.</source>
          <target state="translated">基于AngularJS事件的指令在Angular中不存在。而是使用&lt;strong&gt;event binding&lt;/strong&gt;定义从模板视图到组件的单向&lt;strong&gt;绑定&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="7ba2194b47c5f56823c853e12f0552deafc5b008" translate="yes" xml:space="preserve">
          <source>AngularJS expects controllers to be constructor functions. That's exactly what ES2015/TypeScript classes are under the hood, so that means you can just plug in a class as a component controller and AngularJS will happily use it.</source>
          <target state="translated">AngularJS期望控制器是构造函数。这正是ES2015/TypeScript类的本质,所以这意味着你可以直接插入一个类作为组件控制器,AngularJS会很乐意使用它。</target>
        </trans-unit>
        <trans-unit id="112a877bf72d4bfc8bf612a04c77986c603a5169" translate="yes" xml:space="preserve">
          <source>AngularJS has code in each controller that looks up an appropriate Angular module and registers the controller with that module.</source>
          <target state="translated">AngularJS在每个控制器中都有代码,可以查找相应的Angular模块,并将控制器注册到该模块中。</target>
        </trans-unit>
        <trans-unit id="e7245580254db776b68e6171f5b629c700d61b34" translate="yes" xml:space="preserve">
          <source>AngularJS is always bootstrapped first and owns the bottom most view.</source>
          <target state="translated">AngularJS总是先进行引导,拥有最底层的视图。</target>
        </trans-unit>
        <trans-unit id="2aef830187741c51c79d0fdd323c04bb9f1d5a18" translate="yes" xml:space="preserve">
          <source>AngularJS is currently loaded by a script tag in &lt;code&gt;index.html&lt;/code&gt;, which means that the whole app has access to it as a global and uses the same instance of the &lt;code&gt;angular&lt;/code&gt; variable. If you used &lt;code&gt;import * as angular from 'angular'&lt;/code&gt; instead, you'd also have to load every file in the AngularJS app to use ES2015 modules in order to ensure AngularJS was being loaded correctly.</source>
          <target state="translated">AngularJS当前由 &lt;code&gt;index.html&lt;/code&gt; 中的脚本标签加载，这意味着整个应用程序都可以全局访问它，并使用相同的 &lt;code&gt;angular&lt;/code&gt; 变量实例。如果改为使用 &lt;code&gt;import * as angular from 'angular'&lt;/code&gt; ，则还必须加载AngularJS应用中的每个文件才能使用ES2015模块，以确保正确加载AngularJS。</target>
        </trans-unit>
        <trans-unit id="398510dbda26c2a8fe4e08585f1a59953ba02faf" translate="yes" xml:space="preserve">
          <source>AngularJS provides more than seventy built-in directives for templates. Many of them aren't needed in Angular because of its more capable and expressive binding system. The following are some of the key AngularJS built-in directives and their equivalents in Angular.</source>
          <target state="translated">AngularJS为模板提供了七十多条内置指令。其中许多指令在Angular中是不需要的,因为Angular的绑定系统能力更强,表现力更强。以下是一些关键的AngularJS内置指令以及它们在Angular中的等价物。</target>
        </trans-unit>
        <trans-unit id="3adbc04c8f21c0c77451b7e8d0376cba32bd94e5" translate="yes" xml:space="preserve">
          <source>AngularJS to Angular Concepts: Quick Reference</source>
          <target state="translated">AngularJS到Angular概念。快速参考</target>
        </trans-unit>
        <trans-unit id="71e9e741df0a590eafd026f54096b7bc961874d9" translate="yes" xml:space="preserve">
          <source>AngularJS, uses a &lt;code&gt;link&lt;/code&gt; tag in the head section of the &lt;code&gt;index.html&lt;/code&gt; file to define the styles for the application.</source>
          <target state="translated">AngularJS 在 &lt;code&gt;index.html&lt;/code&gt; 文件的头部使用 &lt;code&gt;link&lt;/code&gt; 标记来定义应用程序的样式。</target>
        </trans-unit>
        <trans-unit id="4cee08c4b7c72405159cc26c7780b76851e3a3fd" translate="yes" xml:space="preserve">
          <source>AngularJSUrlCodec</source>
          <target state="translated">AngularJSUrlCodec</target>
        </trans-unit>
        <trans-unit id="beb2fb26a90715a16ad2b713f52643af07bc8e11" translate="yes" xml:space="preserve">
          <source>Animatable properties and units</source>
          <target state="translated">可移动的属性和单位</target>
        </trans-unit>
        <trans-unit id="0769c5775aae589f50623888b4c64c6191ca75c0" translate="yes" xml:space="preserve">
          <source>Animate HTML elements as they are inserted and removed from the DOM, including responsive real-time filtering.</source>
          <target state="translated">当HTML元素从DOM中插入和移除时,对它们进行动画处理,包括响应的实时过滤。</target>
        </trans-unit>
        <trans-unit id="618592a1a0b18cf010c11404c857093fca94afc4" translate="yes" xml:space="preserve">
          <source>Animate HTML elements in complex sequences and choreographies.</source>
          <target state="translated">在复杂的序列和编排中对HTML元素进行动画。</target>
        </trans-unit>
        <trans-unit id="22f5b7d24e1ffc8c67c552e6bdc267d15ad51cc1" translate="yes" xml:space="preserve">
          <source>Animate each element on screen for 0.5 seconds using a custom-defined easing curve, simultaneously fading it in and un-transforming it.</source>
          <target state="translated">使用自定义的缓和曲线在屏幕上为每个元素制作0.5秒的动画,同时对其进行淡化和解除变形。</target>
        </trans-unit>
        <trans-unit id="bbd45932cc4b4e9e342cbb31ef89450062658db7" translate="yes" xml:space="preserve">
          <source>Animate multiple elements using query() and stagger() functions</source>
          <target state="translated">使用query()和stagger()函数对多个元素进行动画处理。</target>
        </trans-unit>
        <trans-unit id="1df44453e1f5986603739440ade7f2955dce87e3" translate="yes" xml:space="preserve">
          <source>Animate parent and child elements.</source>
          <target state="translated">父元素和子元素的动画。</target>
        </trans-unit>
        <trans-unit id="1231f267f34e53a86804d9ed850d53253508e336" translate="yes" xml:space="preserve">
          <source>AnimateChildOptions</source>
          <target state="translated">AnimateChildOptions</target>
        </trans-unit>
        <trans-unit id="d7cf5bc56891490654005df5eefb910d609dce34" translate="yes" xml:space="preserve">
          <source>AnimateTimings</source>
          <target state="translated">AnimateTimings</target>
        </trans-unit>
        <trans-unit id="d913287670141916915aa8af33ee5f086ec77a65" translate="yes" xml:space="preserve">
          <source>Animates in the element over 300 milliseconds. During the animation, the element assumes its default width and opacity.</source>
          <target state="translated">在元素中动画超过300毫秒。在动画过程中,元素会保持默认的宽度和不透明度。</target>
        </trans-unit>
        <trans-unit id="820b9c7157225f0d4bfc03fe34474f3177ca57d5" translate="yes" xml:space="preserve">
          <source>Animating a simple transition</source>
          <target state="translated">动画一个简单的过渡</target>
        </trans-unit>
        <trans-unit id="1acb2e94dc3017b424ec642021dbc908a4c12566" translate="yes" xml:space="preserve">
          <source>Animating entering and leaving a view</source>
          <target state="translated">进入和离开视图的动画</target>
        </trans-unit>
        <trans-unit id="7886cadc604f670181386ae5ea9a46ff00865c33" translate="yes" xml:space="preserve">
          <source>Animating to the final state</source>
          <target state="translated">动画到最终状态</target>
        </trans-unit>
        <trans-unit id="aff1288fe6cdc9b27c1923584d50a269fdc280dc" translate="yes" xml:space="preserve">
          <source>Animation callbacks</source>
          <target state="translated">动画回调</target>
        </trans-unit>
        <trans-unit id="42515a4b18b3e75a9a05c13c308ead18b0c1cf76" translate="yes" xml:space="preserve">
          <source>Animation definition</source>
          <target state="translated">动画的定义</target>
        </trans-unit>
        <trans-unit id="dbcb7927796307d3da6f12d7006d5bd2f5657cd1" translate="yes" xml:space="preserve">
          <source>Animation definitions are linked to components through the &lt;code&gt;&lt;a href=&quot;core/component#animations&quot;&gt;animations&lt;/a&gt;&lt;/code&gt; property in the &lt;code&gt;@&lt;a href=&quot;core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; metadata, typically in the component file of the HTML element to be animated. The &lt;code&gt;&lt;a href=&quot;animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; function encapsulates a named animation, with all other function calls nested within. Use the trigger name to bind the named animation to a specific triggering element in the HTML template.</source>
          <target state="translated">动画定义通过 &lt;code&gt;@&lt;a href=&quot;core/component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;core/component&quot;&gt;Component&lt;/a&gt;元数据中的 &lt;code&gt;&lt;a href=&quot;core/component#animations&quot;&gt;animations&lt;/a&gt;&lt;/code&gt; 属性链接到组件，该属性通常在要进行动画处理的HTML元素的组件文件中。该 &lt;code&gt;&lt;a href=&quot;animations/trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt; （）函数封装了一个名为动画，与嵌套在其他所有的函数调用。使用触发名称将命名的动画绑定到HTML模板中的特定触发元素。</target>
        </trans-unit>
        <trans-unit id="310caf407085ad7f23432a3af12093d2c5b45918" translate="yes" xml:space="preserve">
          <source>Animation metadata: duration, delay, and easing</source>
          <target state="translated">动画元数据:持续时间、延迟和缓和。</target>
        </trans-unit>
        <trans-unit id="070dc1a18e384d7b8c26273653b21f0661b190a1" translate="yes" xml:space="preserve">
          <source>Animation provides the illusion of motion: HTML elements change styling over time. Well-designed animations can make your application more fun and easier to use, but they aren't just cosmetic. Animations can improve your app and user experience in a number of ways:</source>
          <target state="translated">动画提供了运动的假象。HTML元素会随着时间的推移而改变样式。精心设计的动画可以让您的应用程序更有趣,更容易使用,但它们不仅仅是外观。动画可以以多种方式改善您的应用程序和用户体验。</target>
        </trans-unit>
        <trans-unit id="c0c7db30f689dea02b345d4feb19f80be591a5b4" translate="yes" xml:space="preserve">
          <source>Animation sequence summary</source>
          <target state="translated">动画序列摘要</target>
        </trans-unit>
        <trans-unit id="a2f413b428d01e3d852c9e02cf22d9856f4c9161" translate="yes" xml:space="preserve">
          <source>Animation state and styles</source>
          <target state="translated">动画状态和风格</target>
        </trans-unit>
        <trans-unit id="4c76d2cc2e089a0e490b689a8cc8e9feb5728375" translate="yes" xml:space="preserve">
          <source>Animation trigger bindings convert all values to strings, and then match the previous and current values against any linked transitions. Booleans can be specified as &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">动画触发器绑定将所有值转换为字符串，然后将先前值和当前值与任何链接的过渡进行匹配。布尔值可以指定为 &lt;code&gt;1&lt;/code&gt; 或 &lt;code&gt;true&lt;/code&gt; 以及 &lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab4cf7592d8d437f90159cdf1869e12aa12d56dc" translate="yes" xml:space="preserve">
          <source>AnimationAnimateChildMetadata</source>
          <target state="translated">AnimationAnimateChildMetadata</target>
        </trans-unit>
        <trans-unit id="a8199a8fd1152906437f37e892432a0117740e62" translate="yes" xml:space="preserve">
          <source>AnimationAnimateMetadata</source>
          <target state="translated">AnimationAnimateMetadata</target>
        </trans-unit>
        <trans-unit id="7666f03f557808da2899925571c1dc35a2eac29b" translate="yes" xml:space="preserve">
          <source>AnimationAnimateRefMetadata</source>
          <target state="translated">AnimationAnimateRefMetadata</target>
        </trans-unit>
        <trans-unit id="a6c33451ee1ed3313b74b3e177d7107746a4a7b7" translate="yes" xml:space="preserve">
          <source>AnimationBuilder</source>
          <target state="translated">AnimationBuilder</target>
        </trans-unit>
        <trans-unit id="b6988ea2371fbf582630d88819c0e3f3c9bffeed" translate="yes" xml:space="preserve">
          <source>AnimationDriver</source>
          <target state="translated">AnimationDriver</target>
        </trans-unit>
        <trans-unit id="b68b862342361922d8aeebe8914e3813b3a82ea4" translate="yes" xml:space="preserve">
          <source>AnimationEvent</source>
          <target state="translated">AnimationEvent</target>
        </trans-unit>
        <trans-unit id="b8bfdf6ac4276ec091b33b31fa025b59d8ae6d7d" translate="yes" xml:space="preserve">
          <source>AnimationFactory</source>
          <target state="translated">AnimationFactory</target>
        </trans-unit>
        <trans-unit id="a3a7882964c227f42de2f45e1e825e6e7dbaf958" translate="yes" xml:space="preserve">
          <source>AnimationGroupMetadata</source>
          <target state="translated">AnimationGroupMetadata</target>
        </trans-unit>
        <trans-unit id="3e9f8514aa4837ac7a9591838d80d05da6ea30b5" translate="yes" xml:space="preserve">
          <source>AnimationKeyframesSequenceMetadata</source>
          <target state="translated">AnimationKeyframesSequenceMetadata</target>
        </trans-unit>
        <trans-unit id="6fb97195c310cce7c5f508b709bcb87dd08d499f" translate="yes" xml:space="preserve">
          <source>AnimationMetadata</source>
          <target state="translated">AnimationMetadata</target>
        </trans-unit>
        <trans-unit id="53f1eba48611407f4a1975724592be1e71afd91a" translate="yes" xml:space="preserve">
          <source>AnimationMetadataType</source>
          <target state="translated">AnimationMetadataType</target>
        </trans-unit>
        <trans-unit id="fb0b93cca54964c4444fc172d338b01d02dd2b94" translate="yes" xml:space="preserve">
          <source>AnimationOptions</source>
          <target state="translated">AnimationOptions</target>
        </trans-unit>
        <trans-unit id="209f8c7f66e9bd69a25c35a1868b922ae003930a" translate="yes" xml:space="preserve">
          <source>AnimationPlayer</source>
          <target state="translated">AnimationPlayer</target>
        </trans-unit>
        <trans-unit id="6fb8a7cdef7876dff2df1190c171576bf5a725ed" translate="yes" xml:space="preserve">
          <source>AnimationQueryMetadata</source>
          <target state="translated">AnimationQueryMetadata</target>
        </trans-unit>
        <trans-unit id="78889e2ae13c736ba48dc387ac4d3316766916b3" translate="yes" xml:space="preserve">
          <source>AnimationQueryOptions</source>
          <target state="translated">AnimationQueryOptions</target>
        </trans-unit>
        <trans-unit id="2c5530db9d40f1553b25c85091789d55b95b926e" translate="yes" xml:space="preserve">
          <source>AnimationReferenceMetadata</source>
          <target state="translated">AnimationReferenceMetadata</target>
        </trans-unit>
        <trans-unit id="c65c6a5a21639ea491959e7e81065101b6d31f48" translate="yes" xml:space="preserve">
          <source>AnimationSequenceMetadata</source>
          <target state="translated">AnimationSequenceMetadata</target>
        </trans-unit>
        <trans-unit id="f9a31525fd95249ef37b0b3be3b81f19770b6d77" translate="yes" xml:space="preserve">
          <source>AnimationStaggerMetadata</source>
          <target state="translated">AnimationStaggerMetadata</target>
        </trans-unit>
        <trans-unit id="d5c9e1c8b8703497373c017c5a25ac585f71dca2" translate="yes" xml:space="preserve">
          <source>AnimationStateMetadata</source>
          <target state="translated">AnimationStateMetadata</target>
        </trans-unit>
        <trans-unit id="9f838574e71a14ec4034fc9c668e17daeaa733e1" translate="yes" xml:space="preserve">
          <source>AnimationStyleMetadata</source>
          <target state="translated">AnimationStyleMetadata</target>
        </trans-unit>
        <trans-unit id="2bfef012b3c0bb7a9c8988f6ac24a5853564b567" translate="yes" xml:space="preserve">
          <source>AnimationTransitionMetadata</source>
          <target state="translated">AnimationTransitionMetadata</target>
        </trans-unit>
        <trans-unit id="c9a79289360f62c0f790d371279f9ed9ef6dffec" translate="yes" xml:space="preserve">
          <source>AnimationTriggerMetadata</source>
          <target state="translated">AnimationTriggerMetadata</target>
        </trans-unit>
        <trans-unit id="0f54eb841ec3b22a39fd482ff66e7904acc8641b" translate="yes" xml:space="preserve">
          <source>Animations API summary</source>
          <target state="translated">动画API摘要</target>
        </trans-unit>
        <trans-unit id="52512eb45e2b30a744e5257c969ca3111e25423f" translate="yes" xml:space="preserve">
          <source>Animations are defined in the metadata of the component that controls the HTML element to be animated. Put the code that defines your animations under the &lt;code&gt;animations:&lt;/code&gt; property within the &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; decorator.</source>
          <target state="translated">动画在控制HTML元素动画的组件的元数据中定义。将定义动画的代码放在 &lt;code&gt;@&lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;()&lt;/code&gt; &lt;a href=&quot;../api/core/component&quot;&gt;Component&lt;/a&gt;（）装饰器中的 &lt;code&gt;animations:&lt;/code&gt; 属性下。</target>
        </trans-unit>
        <trans-unit id="06c3f02ce6046751e8afb6c9448801d6483e310e" translate="yes" xml:space="preserve">
          <source>Animations can be defined directly inside your components. For this example we are defining the animations in a separate file, which allows us to re-use the animations.</source>
          <target state="translated">动画可以直接在您的组件中定义。在这个例子中,我们在一个单独的文件中定义了动画,这使得我们可以重复使用动画。</target>
        </trans-unit>
        <trans-unit id="2d23b44688014855fdd9501d6bbd3e413501debb" translate="yes" xml:space="preserve">
          <source>Animations transitions and triggers</source>
          <target state="translated">动画过渡和触发器</target>
        </trans-unit>
        <trans-unit id="c3caa79244ee020e6b1824a6e588366f508b747d" translate="yes" xml:space="preserve">
          <source>Anno Domini</source>
          <target state="translated">年年有余</target>
        </trans-unit>
        <trans-unit id="53096344fdb247ca5b187e37878713fdf03e1195" translate="yes" xml:space="preserve">
          <source>Another TypeScript feature you can make use of is &lt;em&gt;classes&lt;/em&gt;. In particular, you can turn component controllers into classes. That way they'll be a step closer to becoming Angular component classes, which will make life easier once you upgrade.</source>
          <target state="translated">您可以使用的另一个TypeScript功能是&lt;em&gt;classes&lt;/em&gt;。特别是，您可以将组件控制器转换为类。这样，它们将更接近成为Angular组件类，这将使您的生活在升级后更加轻松。</target>
        </trans-unit>
        <trans-unit id="56b080272940939ced695e0e8fccf51d1f089b8b" translate="yes" xml:space="preserve">
          <source>Another advantage of &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; is that you can use it to guard against null. Show/hide is best suited for very simple use cases, so when you need a guard, opt instead for &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt;. Angular will throw an error if a nested expression tries to access a property of &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 的另一个优点是您可以使用它来防止null。Show / hide最适合非常简单的用例，因此当您需要防护时，请选择 &lt;code&gt;&lt;a href=&quot;../api/common/ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 代替。如果嵌套表达式尝试访问 &lt;code&gt;null&lt;/code&gt; 属性，Angular将抛出错误。</target>
        </trans-unit>
        <trans-unit id="6fcce88157a90349b33951e206a2c653b84c62ec" translate="yes" xml:space="preserve">
          <source>Another class, &lt;code&gt;EvenBetterLogger&lt;/code&gt;, might display the user name in the log message. This logger gets the user from an injected &lt;code&gt;UserService&lt;/code&gt; instance.</source>
          <target state="translated">另一个类 &lt;code&gt;EvenBetterLogger&lt;/code&gt; 可能会在日志消息中显示用户名。该记录器从注入的 &lt;code&gt;UserService&lt;/code&gt; 实例获取用户。</target>
        </trans-unit>
        <trans-unit id="7e1638d3363efdfbe5466eef1db2d2342c31fe3e" translate="yes" xml:space="preserve">
          <source>Another example</source>
          <target state="translated">另一个例子</target>
        </trans-unit>
        <trans-unit id="0ed013f9e94cdc0d63ce5a44b4f989895c245c7d" translate="yes" xml:space="preserve">
          <source>Another example is disabling a button when the component says that it &lt;code&gt;isUnchanged&lt;/code&gt;:</source>
          <target state="translated">另一个示例是当组件说它为 &lt;code&gt;isUnchanged&lt;/code&gt; 时禁用按钮：</target>
        </trans-unit>
        <trans-unit id="3c964816bf2def0a4255f7c53c2ee3c595ece4c7" translate="yes" xml:space="preserve">
          <source>Another example shows the component class with a provider for &lt;code&gt;FlowerService&lt;/code&gt;. In this case, the injector looks no further than the current &lt;code&gt;ElementInjector&lt;/code&gt; because it finds the &lt;code&gt;FlowerService&lt;/code&gt; and returns the yellow flower 🌼.</source>
          <target state="translated">另一个示例显示了具有 &lt;code&gt;FlowerService&lt;/code&gt; 提供程序的组件类。在这种情况下，注入器的外观与当前 &lt;code&gt;ElementInjector&lt;/code&gt; 相同,因为它找到了 &lt;code&gt;FlowerService&lt;/code&gt; 并返回了黄色花朵🌼。</target>
        </trans-unit>
        <trans-unit id="f02c387e6e60b792589c26b7e606d305ef9df377" translate="yes" xml:space="preserve">
          <source>Another is setting a property of a directive:</source>
          <target state="translated">另一种是设置一个指令的属性。</target>
        </trans-unit>
        <trans-unit id="602cc167054f68080e0cc0803ee3cbf5add9046c" translate="yes" xml:space="preserve">
          <source>Another key difference between &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; is that the latter requires you to instantiate both the AngularJS and Angular modules up-front. This means that you have to pay the cost of instantiating the Angular part of the app, even if you don't use any Angular assets until later. &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; is again less aggressive. It will only instantiate the Angular part when it is required for the first time; that is, as soon as it needs to create a downgraded component.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 之间的另一个主要区别是后者需要您预先实例化AngularJS和Angular模块。这意味着即使您以后不使用任何Angular资产，也必须支付实例化应用程序Angular部分的费用。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 再次没有那么积极。仅在首次需要时才实例化Angular零件；也就是说，一旦需要创建降级的组件。</target>
        </trans-unit>
        <trans-unit id="81aea9981f12bfceefc57291e2e46e0a448fc33b" translate="yes" xml:space="preserve">
          <source>Another problem: some HTML elements require all immediate children to be of a specific type. For example, the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element requires &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; children. You can't wrap the &lt;em&gt;options&lt;/em&gt; in a conditional &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">另一个问题：某些HTML元素要求所有直接子代均为特定类型。例如， &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 元素需要 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 子代。您不能将&lt;em&gt;选项&lt;/em&gt;包装在条件 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 或 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="5500271b188473b9589122039f8e0d10390b1818" translate="yes" xml:space="preserve">
          <source>Another reason to re-provide a service at another level is to substitute a &lt;em&gt;more specialized&lt;/em&gt; implementation of that service, deeper in the component tree.</source>
          <target state="translated">在另一个级别重新提供服务的另一个原因是，在组件树的更深处替换了该服务的&lt;em&gt;更专业的&lt;/em&gt;实现。</target>
        </trans-unit>
        <trans-unit id="b4edcd9ca213bdd8b52b2310e46e71e39a3e13ee" translate="yes" xml:space="preserve">
          <source>Another simple way to deploy your Angular app is to use &lt;a href=&quot;https://help.github.com/articles/what-is-github-pages/&quot;&gt;GitHub Pages&lt;/a&gt;.</source>
          <target state="translated">部署Angular应用程序的另一种简单方法是使用&lt;a href=&quot;https://help.github.com/articles/what-is-github-pages/&quot;&gt;GitHub Pages&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1a0232ed081a1f2af117924de181bf23193259db" translate="yes" xml:space="preserve">
          <source>Another solution to choosing a provider token for non-class dependencies is to define and use an &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; object. The following example shows how to define such a token.</source>
          <target state="translated">为非类依赖性选择提供者令牌的另一种解决方案是定义和使用 &lt;code&gt;&lt;a href=&quot;../api/core/injectiontoken&quot;&gt;InjectionToken&lt;/a&gt;&lt;/code&gt; 对象。以下示例显示了如何定义这样的令牌。</target>
        </trans-unit>
        <trans-unit id="e18a7fa42b657d430a040fcb6744c6085d9b4ae0" translate="yes" xml:space="preserve">
          <source>Another thing you can do is start adding &lt;em&gt;type safety&lt;/em&gt; to your code. This has actually partially already happened because of the AngularJS typings you installed. TypeScript are checking that you are calling AngularJS APIs correctly when you do things like register components to Angular modules.</source>
          <target state="translated">您可以做的另一件事是开始在代码中添加&lt;em&gt;类型安全性&lt;/em&gt;。由于您安装的AngularJS类型，实际上部分已经发生了。在执行将组件注册到Angular模块之类的操作时，TypeScript正在检查您是否正确调用了AngularJS API。</target>
        </trans-unit>
        <trans-unit id="c3810aa894a3348cc470b2185cd6df4bf822a9c5" translate="yes" xml:space="preserve">
          <source>Another way to limit provider scope is by adding the service you want to limit to the component&amp;rsquo;s &lt;code&gt;providers&lt;/code&gt; array. Component providers and NgModule providers are independent of each other. This method is helpful for when you want to eagerly load a module that needs a service all to itself. Providing a service in the component limits the service only to that component (other components in the same module can&amp;rsquo;t access it.)</source>
          <target state="translated">限制提供者范围的另一种方法是通过将要限制的服务添加到组件的 &lt;code&gt;providers&lt;/code&gt; 数组中。组件提供程序和NgModule提供程序彼此独立。当您要热切地加载需要全部服务的模块时，此方法很有用。在组件中提供服务仅将服务限制为该组件（同一模块中的其他组件无法访问它）。</target>
        </trans-unit>
        <trans-unit id="da3ac8b45123b40210a3b3867ac927476f2704e1" translate="yes" xml:space="preserve">
          <source>Any app developer can use these and other libraries that have been published as npm packages by the Angular team or by third parties. See &lt;a href=&quot;using-libraries&quot;&gt;Using Published Libraries&lt;/a&gt;.</source>
          <target state="translated">任何应用程序开发人员都可以使用Angular团队或第三方以npm软件包形式发布的这些库和其他库。请参阅&lt;a href=&quot;using-libraries&quot;&gt;使用已发布的库&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d9e225c8709529016fb0fe3d9aaeca9255591cfb" translate="yes" xml:space="preserve">
          <source>Any changes to the public API surface will be done using the versioning, support, and depreciation policies describe above.</source>
          <target state="translated">对公共 API 表面的任何更改都将使用上面描述的版本、支持和折旧策略来完成。</target>
        </trans-unit>
        <trans-unit id="4252573f476e0bf8d0ee4fd8ca2af51dda805825" translate="yes" xml:space="preserve">
          <source>Any class with the &lt;code&gt;@&lt;a href=&quot;component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;@&lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; decorator</source>
          <target state="translated">任何带有 &lt;code&gt;@&lt;a href=&quot;component&quot;&gt;Component&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;@&lt;a href=&quot;directive&quot;&gt;Directive&lt;/a&gt;&lt;/code&gt; 装饰器的类</target>
        </trans-unit>
        <trans-unit id="faa5c260ff9b2e13ba3a7e065117c51a53243e3b" translate="yes" xml:space="preserve">
          <source>Any component created within a lazy loaded module&amp;rsquo;s context, such as by router navigation, gets the local instance of the service, not the instance in the root application injector. Components in external modules continue to receive the instance created for the application root.</source>
          <target state="translated">在延迟加载的模块上下文中创建的任何组件（例如通过路由器导航）都将获取服务的本地实例，而不是根应用程序注入器中的实例。外部模块中的组件继续接收为应用程序根目录创建的实例。</target>
        </trans-unit>
        <trans-unit id="06a75db5d4bcefd57aafb04659c4d9594738124e" translate="yes" xml:space="preserve">
          <source>Any error returned on the &lt;code&gt;Observable&lt;/code&gt; response stream will be wrapped in an &lt;code&gt;&lt;a href=&quot;httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; to provide additional context about the state of the HTTP layer when the error occurred. The error property will contain either a wrapped Error object or the error response returned from the server.</source>
          <target state="translated">在 &lt;code&gt;Observable&lt;/code&gt; 响应流上返回的任何错误都将包装在 &lt;code&gt;&lt;a href=&quot;httperrorresponse&quot;&gt;HttpErrorResponse&lt;/a&gt;&lt;/code&gt; 中,以提供有关发生错误时HTTP层状态的其他上下文。error属性将包含包装的Error对象或从服务器返回的错误响应。</target>
        </trans-unit>
        <trans-unit id="9b490d3957cd57eaa58b9061b9b93abf6f8fceda" translate="yes" xml:space="preserve">
          <source>Any future tasks or microtasks scheduled from within this function will continue executing from outside of the Angular zone.</source>
          <target state="translated">未来任何从该函数内安排的任务或微任务将从Angular区外继续执行。</target>
        </trans-unit>
        <trans-unit id="858f110f5dd01bf7e8dc4320e306d0feb61a7a50" translate="yes" xml:space="preserve">
          <source>Any future tasks or microtasks scheduled from within this function will continue executing from within the Angular zone.</source>
          <target state="translated">未来任何从该函数中安排的任务或微任务都将从Angular区域内继续执行。</target>
        </trans-unit>
        <trans-unit id="93532a30b014f85c589d7c068d4130fc1fccc7b1" translate="yes" xml:space="preserve">
          <source>Any observables that the components subscribe to internally should be cleaned up and disposed of during the lifecycle of those components.</source>
          <target state="translated">组件内部订阅的任何观测值都应该在这些组件的生命周期内进行清理和处理。</target>
        </trans-unit>
        <trans-unit id="1ac78989853c9b050e2eda23ff2928dfb610d9c3" translate="yes" xml:space="preserve">
          <source>Any provider defined in the child component tree of the current component (e.g. &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;(SomeService) someService: SomeService&lt;/code&gt;)</source>
          <target state="translated">当前组件的子组件树中定义的任何提供程序（例如 &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;(SomeService) someService: SomeService&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="df5462a835da0acf093fceb883fd8b853fd7d033" translate="yes" xml:space="preserve">
          <source>Any provider defined through a string token (e.g. &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;('someToken') someTokenVal: any&lt;/code&gt;)</source>
          <target state="translated">通过字符串令牌定义的任何提供程序（例如 &lt;code&gt;@&lt;a href=&quot;viewchild&quot;&gt;ViewChild&lt;/a&gt;('someToken') someTokenVal: any&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="9b53bf1c187ff8e5d85d8461d6cbd8075538730c" translate="yes" xml:space="preserve">
          <source>Any subscribers to the &lt;code&gt;valueChanges&lt;/code&gt; observable receive the new value.</source>
          <target state="translated">可观察到的 &lt;code&gt;valueChanges&lt;/code&gt; 的所有订阅者都将收到新值。</target>
        </trans-unit>
        <trans-unit id="63ef43a80069c779b3ee5167397831492df1e816" translate="yes" xml:space="preserve">
          <source>Anything that uses a regular expression is worth testing thoroughly. Use simple Jasmine to explore the expected cases and the edge cases.</source>
          <target state="translated">任何使用正则表达式的东西都值得彻底测试。使用简单的Jasmine来探索预期情况和边缘情况。</target>
        </trans-unit>
        <trans-unit id="88cda930404408fa5b6b5bb5ea64822d75f409c3" translate="yes" xml:space="preserve">
          <source>Anything under &lt;code&gt;assets&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;assets&lt;/code&gt; 下的任何东西。</target>
        </trans-unit>
        <trans-unit id="93cd385e58bd290f15ae342c6fdf3fea9806d612" translate="yes" xml:space="preserve">
          <source>AoT metadata errors</source>
          <target state="translated">AoT元数据错误</target>
        </trans-unit>
        <trans-unit id="0b5958b0f53cb499388dd9ee04a106a30b02c5d1" translate="yes" xml:space="preserve">
          <source>Apache</source>
          <target state="translated">Apache</target>
        </trans-unit>
        <trans-unit id="0d6c7d4967052bf08ff030cdd321d82fc75c2851" translate="yes" xml:space="preserve">
          <source>Apart from &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;, you can use the rest of the &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; helpers as usual to build a hybrid application. Note that the Angular pieces (e.g. downgraded services) will not be available until the downgraded module has been bootstrapped, i.e. by instantiating a downgraded component.</source>
          <target state="translated">除了 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 之外，您还可以照常使用其余的 &lt;code&gt;&lt;a href=&quot;../static&quot;&gt;upgrade/static&lt;/a&gt;&lt;/code&gt; 助手来构建混合应用程序。请注意，只有在引导降级的模块（即实例化降级的组件）后，Angular片段（例如降级的服务）才可用。</target>
        </trans-unit>
        <trans-unit id="57807d7e38eb807484ab254a0fac6301d23c9944" translate="yes" xml:space="preserve">
          <source>App &lt;code&gt;root module&lt;/code&gt;</source>
          <target state="translated">应用 &lt;code&gt;root module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5aa3cc756775d4afef149117b0695738c8d5e450" translate="yes" xml:space="preserve">
          <source>App Shell</source>
          <target state="translated">外壳应用</target>
        </trans-unit>
        <trans-unit id="7b4fd1b17b918b41d314d1e08cfa7e5547f2b386" translate="yes" xml:space="preserve">
          <source>App shell</source>
          <target state="translated">应用程序外壳</target>
        </trans-unit>
        <trans-unit id="f44820b851018adfc0c40223a29fecd82923e3f3" translate="yes" xml:space="preserve">
          <source>App shell is a way to render a portion of your application via a route at build time. It can improve the user experience by quickly launching a static rendered page (a skeleton common to all pages) while the browser downloads the full client version and switches to it automatically after the code loads.</source>
          <target state="translated">App shell是一种在构建时通过路由渲染部分应用的方式。它可以通过快速启动静态渲染页面(所有页面通用的骨架)来改善用户体验,同时浏览器下载完整的客户端版本,并在代码加载后自动切换到它。</target>
        </trans-unit>
        <trans-unit id="95c4786d84aa1c9b22007dc04178f6b25983cd88" translate="yes" xml:space="preserve">
          <source>App shell is a way to render a portion of your application via a route at build time. This gives users a meaningful first paint of your application that appears quickly because the browser can render static HTML and CSS without the need to initialize JavaScript.</source>
          <target state="translated">App shell是一种在构建时通过路由渲染部分应用程序的方式。这为用户提供了一个有意义的你的应用程序的第一笔画,它出现的速度很快,因为浏览器可以渲染静态HTML和CSS,而不需要初始化JavaScript。</target>
        </trans-unit>
        <trans-unit id="63d67384492343e219bf6928f05ecac25471ffd5" translate="yes" xml:space="preserve">
          <source>App tabs</source>
          <target state="translated">应用程序标签</target>
        </trans-unit>
        <trans-unit id="540143c662eb90de02a65e482599c49fa15df426" translate="yes" xml:space="preserve">
          <source>App versions</source>
          <target state="translated">应用程序版本</target>
        </trans-unit>
        <trans-unit id="75913f9fcc32232a451e534954939bf6b759d88c" translate="yes" xml:space="preserve">
          <source>AppModule</source>
          <target state="translated">AppModule</target>
        </trans-unit>
        <trans-unit id="3bc3e2080ed9e689cda76f06895f83510ab7fc40" translate="yes" xml:space="preserve">
          <source>Append &lt;code&gt;/heroes&lt;/code&gt; to the URL in the browser address bar. You should see the familiar heroes master/detail view.</source>
          <target state="translated">在浏览器地址栏中的URL上附加 &lt;code&gt;/heroes&lt;/code&gt; 。您应该看到熟悉的英雄主/详细视图。</target>
        </trans-unit>
        <trans-unit id="73973cfd168d40bb8277e2f6044ecdb605409c4e" translate="yes" xml:space="preserve">
          <source>Appendices</source>
          <target state="translated">Appendices</target>
        </trans-unit>
        <trans-unit id="f3f60044b06335eb6c4230e3c39f5e0218445878" translate="yes" xml:space="preserve">
          <source>Appendix</source>
          <target state="translated">Appendix</target>
        </trans-unit>
        <trans-unit id="261d623be7e2a959a5a15cb6df845be318cf00fe" translate="yes" xml:space="preserve">
          <source>Appendix: &lt;code&gt;LocationStrategy&lt;/code&gt; and browser URL styles</source>
          <target state="translated">附录： &lt;code&gt;LocationStrategy&lt;/code&gt; 和浏览器URL样式</target>
        </trans-unit>
        <trans-unit id="01e09299c9c5043bbe3cce453e5e966ce28cdece" translate="yes" xml:space="preserve">
          <source>Appendix: Develop locally with IE</source>
          <target state="translated">附录。用IE在当地发展</target>
        </trans-unit>
        <trans-unit id="2399a201033dbd00d9af405e9941b75deec4a79f" translate="yes" xml:space="preserve">
          <source>Appendix: No &lt;code&gt;FilterPipe&lt;/code&gt; or &lt;code&gt;OrderByPipe&lt;/code&gt;</source>
          <target state="translated">附录：无 &lt;code&gt;FilterPipe&lt;/code&gt; 或 &lt;code&gt;OrderByPipe&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="29b3b122df7e77e777ce5cfcd64d2161ed3b1c44" translate="yes" xml:space="preserve">
          <source>Appendix: Test using &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">附录：使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/fakeasync&quot;&gt;fakeAsync&lt;/a&gt;()/&lt;a href=&quot;../api/core/testing/async&quot;&gt;async&lt;/a&gt;()&lt;/code&gt; 进行测试</target>
        </trans-unit>
        <trans-unit id="42746499949a4a6af72f7d65e860d0f5ca0c6702" translate="yes" xml:space="preserve">
          <source>Appendix: Upgrading PhoneCat Tests</source>
          <target state="translated">附录。升级PhoneCat测试</target>
        </trans-unit>
        <trans-unit id="bf96aa3c3ab705a8143ebfc310d65c579728b4f9" translate="yes" xml:space="preserve">
          <source>Appendix: Why add &lt;code&gt;@Input&lt;/code&gt;?</source>
          <target state="translated">附录：为什么添加 &lt;code&gt;@Input&lt;/code&gt; ？</target>
        </trans-unit>
        <trans-unit id="15354e68bf45ee9bc58f7687ae8aefa5f4126715" translate="yes" xml:space="preserve">
          <source>Appendix: link parameters array</source>
          <target state="translated">附录:链接参数阵列</target>
        </trans-unit>
        <trans-unit id="a10d6a6e5b58825f456a1c60aceb9233acfe1a06" translate="yes" xml:space="preserve">
          <source>Appends a child to a given parent node in the host element DOM.</source>
          <target state="translated">将一个子节点添加到主机元素DOM中给定的父节点上。</target>
        </trans-unit>
        <trans-unit id="72435c978d47a75814bd8d62487eb4a1c5cb31ca" translate="yes" xml:space="preserve">
          <source>Appends a new value to existing values for a parameter.</source>
          <target state="translated">将一个新的值添加到一个参数的现有值中。</target>
        </trans-unit>
        <trans-unit id="c07e8121475f29caa6a36b6ae4d27742e3366d83" translate="yes" xml:space="preserve">
          <source>Appends a new value to the existing set of values for a header and returns them in a clone of the original instance.</source>
          <target state="translated">将一个新的值添加到头的现有值集中,并在原始实例的克隆中返回它们。</target>
        </trans-unit>
        <trans-unit id="8ea5b66a6bf60adea7d20d7175746bf7940fdf1c" translate="yes" xml:space="preserve">
          <source>Application components often need to share information. You can often use loosely coupled techniques for sharing information, such as data binding and service sharing, but sometimes it makes sense for one component to have a direct reference to another component. You need a direct reference, for instance, to access values or call methods on that component.</source>
          <target state="translated">应用组件经常需要共享信息。你经常可以使用松散耦合的技术来共享信息,如数据绑定和服务共享,但有时一个组件对另一个组件有直接引用是有意义的。例如,你需要一个直接引用来访问该组件上的值或调用方法。</target>
        </trans-unit>
        <trans-unit id="f12a2c662c36b27f3825a6d97ac01c1d7cd35295" translate="yes" xml:space="preserve">
          <source>Application configuration files</source>
          <target state="translated">应用配置文件</target>
        </trans-unit>
        <trans-unit id="cfc388605134e26efe5e73bd8340a05bc5c0fa1b" translate="yes" xml:space="preserve">
          <source>Application developers can use the &lt;a href=&quot;glossary#cli&quot;&gt;Angular CLI&lt;/a&gt; to &lt;code&gt;add&lt;/code&gt; a published library for use with an application in the same &lt;a href=&quot;glossary#workspace&quot;&gt;workspace&lt;/a&gt;.</source>
          <target state="translated">应用程序开发人员可以使用&lt;a href=&quot;glossary#cli&quot;&gt;角CLI&lt;/a&gt;来 &lt;code&gt;add&lt;/code&gt; 发布的库使用在相同的应用程序&lt;a href=&quot;glossary#workspace&quot;&gt;的工作区&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a33d5f89e5c84fccd922ef838522228abdaae944" translate="yes" xml:space="preserve">
          <source>Application integration specs can test the interactions of multiple parts spread across folders and modules. They don't really belong to any part in particular, so they don't have a natural home next to any one file.</source>
          <target state="translated">应用程序集成规范可以测试分布在文件夹和模块中的多个部件的交互。它们并不真正属于任何特定的部分,所以它们在任何一个文件旁边都没有一个天然的家。</target>
        </trans-unit>
        <trans-unit id="6703104cd9653acb1e2ab46ed23c7db66b5070c2" translate="yes" xml:space="preserve">
          <source>Application internationalization is a many-faceted area of development, focused on making applications available and user-friendly to a worldwide audience. This page describes Angular's internationalization (i18n) tools, which can help you make your app available in multiple languages.</source>
          <target state="translated">应用程序国际化是一个多方面的开发领域,专注于使应用程序对全球受众可用和用户友好。本页介绍了Angular的国际化(i18n)工具,这些工具可以帮助你使你的应用程序可用多种语言。</target>
        </trans-unit>
        <trans-unit id="e39567047450a98becc249aa176cdaef7b8b173f" translate="yes" xml:space="preserve">
          <source>Application project files</source>
          <target state="translated">应用项目文件</target>
        </trans-unit>
        <trans-unit id="8e4ad605d8891f443ed5a723fd540aecfca8c921" translate="yes" xml:space="preserve">
          <source>Application source files</source>
          <target state="translated">应用程序源文件</target>
        </trans-unit>
        <trans-unit id="c57c792b55f79d5a6454ef57144a28767e266988" translate="yes" xml:space="preserve">
          <source>Application structure and NgModules</source>
          <target state="translated">应用结构和NgModules</target>
        </trans-unit>
        <trans-unit id="0d128f2c09ef2323b0706b60301684346dd9280f" translate="yes" xml:space="preserve">
          <source>Application-specific &lt;a href=&quot;https://karma-runner.github.io/2.0/config/configuration-file.html&quot;&gt;Karma&lt;/a&gt; configuration.</source>
          <target state="translated">特定于应用程序的&lt;a href=&quot;https://karma-runner.github.io/2.0/config/configuration-file.html&quot;&gt;Karma&lt;/a&gt;配置。</target>
        </trans-unit>
        <trans-unit id="852183ace80b773b249836fdf431f837dea2630d" translate="yes" xml:space="preserve">
          <source>Application-specific &lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;TSLint&lt;/a&gt; configuration.</source>
          <target state="translated">特定&lt;a href=&quot;https://palantir.github.io/tslint/&quot;&gt;于&lt;/a&gt;应用程序的TSLint配置。</target>
        </trans-unit>
        <trans-unit id="4066e5ad49d67457e01b647961a4e8b547f7af40" translate="yes" xml:space="preserve">
          <source>Application-specific &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt; configuration, including TypeScript and Angular template compiler options. See &lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript Configuration&lt;/a&gt;.</source>
          <target state="translated">特定于应用程序的&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;配置，包括TypeScript和Angular模板编译器选项。请参阅&lt;a href=&quot;typescript-configuration&quot;&gt;TypeScript配置&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="99dc2d0240c5a1385595b3dd59d6c536156041c4" translate="yes" xml:space="preserve">
          <source>ApplicationInitStatus</source>
          <target state="translated">ApplicationInitStatus</target>
        </trans-unit>
        <trans-unit id="b39dbb54c7c825fcef1a44e2124b1bb2b58086c8" translate="yes" xml:space="preserve">
          <source>ApplicationModule</source>
          <target state="translated">ApplicationModule</target>
        </trans-unit>
        <trans-unit id="399fe43d84dcab4d8f86ce2f9647859550a7904b" translate="yes" xml:space="preserve">
          <source>ApplicationRef</source>
          <target state="translated">ApplicationRef</target>
        </trans-unit>
        <trans-unit id="a196327a18feb01ef9db58391bd17fb22de7eda2" translate="yes" xml:space="preserve">
          <source>Applications often request JSON data from the server. For example, the app might need a configuration file on the server, &lt;code&gt;config.json&lt;/code&gt;, that specifies resource URLs.</source>
          <target state="translated">应用程序经常从服务器请求JSON数据。例如，应用程序可能需要服务器上的配置文件 &lt;code&gt;config.json&lt;/code&gt; 来指定资源URL。</target>
        </trans-unit>
        <trans-unit id="f0629fc80e38645caefd8ff8a582d44f1f864f7a" translate="yes" xml:space="preserve">
          <source>Applications often restrict access to a feature area based on who the user is. You could permit access only to authenticated users or to users with a specific role. You might block or limit access until the user's account is activated.</source>
          <target state="translated">应用程序经常根据用户是谁来限制对功能区的访问。你可以只允许经过认证的用户或具有特定角色的用户访问。您可以阻止或限制访问,直到用户的帐户被激活。</target>
        </trans-unit>
        <trans-unit id="38ff861aa4a446344adef0afc1e488d02130c3f4" translate="yes" xml:space="preserve">
          <source>Applications should use the &lt;code&gt;&lt;a href=&quot;../router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; services to interact with application route state.</source>
          <target state="translated">应用程序应使用 &lt;code&gt;&lt;a href=&quot;../router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;a href=&quot;location&quot;&gt;Location&lt;/a&gt;&lt;/code&gt; 服务与应用程序路由状态进行交互。</target>
        </trans-unit>
        <trans-unit id="db68ba2d12235e40251d82b803326c61a95f231a" translate="yes" xml:space="preserve">
          <source>Applies an array of commands to the current URL tree and creates a new URL tree.</source>
          <target state="translated">将一系列命令应用于当前的URL树,并创建一个新的URL树。</target>
        </trans-unit>
        <trans-unit id="73e49fcb5b988ce38774338e29d9e9c9583cfff5" translate="yes" xml:space="preserve">
          <source>Applies the changes when needed.</source>
          <target state="translated">在需要时应用更改。</target>
        </trans-unit>
        <trans-unit id="8c8b40621714f724e48fb235040b7320d47f4c4a" translate="yes" xml:space="preserve">
          <source>Apply that logic to navigation within the crisis center for which the parent path is &lt;code&gt;/crisis-center&lt;/code&gt;.</source>
          <target state="translated">将该逻辑应用于父路径为 &lt;code&gt;/crisis-center&lt;/code&gt; 的危机中心内的导航。</target>
        </trans-unit>
        <trans-unit id="0d0e2a91303b222bcb13c0011660cfd943c66dc1" translate="yes" xml:space="preserve">
          <source>Apply the &lt;a href=&quot;https://wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;i&gt;single responsibility principle&lt;/i&gt; (SRP)&lt;/a&gt; to all components, services, and other symbols. This helps make the app cleaner, easier to read and maintain, and more testable.</source>
          <target state="translated">将&lt;a href=&quot;https://wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;&lt;i&gt;单一责任原则&lt;/i&gt;（SRP）&lt;/a&gt;应用于所有组件，服务和其他符号。这有助于使应用程序更清洁，更易于阅读和维护以及更具可测试性。</target>
        </trans-unit>
        <trans-unit id="70fadc1252a55edfa904aa436966e9eecc7d3821" translate="yes" xml:space="preserve">
          <source>Apply the attribute directive</source>
          <target state="translated">应用属性指令</target>
        </trans-unit>
        <trans-unit id="81d85d7da74461d1b53ba77a7b92cf43a5bb3128" translate="yes" xml:space="preserve">
          <source>Apply the decorator to the directive class.</source>
          <target state="translated">将装饰器应用到指令类中。</target>
        </trans-unit>
        <trans-unit id="45a85d2d0edb8623c0d82d2eb0a9a6cc99f9a2bb" translate="yes" xml:space="preserve">
          <source>Applying routable animations based on the page.</source>
          <target state="translated">根据页面应用可路由动画。</target>
        </trans-unit>
        <trans-unit id="c804b003ae54f7640d1e2bbcc163cd9e623fb3dc" translate="yes" xml:space="preserve">
          <source>Applying the &lt;code&gt;::ng-deep&lt;/code&gt; pseudo-class to any CSS rule completely disables view-encapsulation for that rule. Any style with &lt;code&gt;::ng-deep&lt;/code&gt; applied becomes a global style. In order to scope the specified style to the current component and all its descendants, be sure to include the &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; selector before &lt;code&gt;::ng-deep&lt;/code&gt;. If the &lt;code&gt;::ng-deep&lt;/code&gt; combinator is used without the &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; pseudo-class selector, the style can bleed into other components.</source>
          <target state="translated">将 &lt;code&gt;::ng-deep&lt;/code&gt; 伪类应用于任何CSS规则将完全禁用该规则的视图封装。任何应用 &lt;code&gt;::ng-deep&lt;/code&gt; 的样式都将成为全局样式。为了将指定的样式作用于当前组件及其所有后代，请确保在 &lt;code&gt;::ng-deep&lt;/code&gt; 之前包括 &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; 选择器。如果使用 &lt;code&gt;::ng-deep&lt;/code&gt; 组合器而不使用 &lt;code&gt;:&lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;&lt;/code&gt; &lt;a href=&quot;../api/core/directive#host&quot;&gt;host&lt;/a&gt;伪类选择器，则该样式可能会渗入其他组件。</target>
        </trans-unit>
        <trans-unit id="5626fa7bcd970831b49f0ca8814b78f9ec4931b4" translate="yes" xml:space="preserve">
          <source>Apps can use the the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; to make &lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; requests across domains when the server doesn't support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS protocol&lt;/a&gt;.</source>
          <target state="translated">当服务器不支持&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;&gt;CORS协议&lt;/a&gt;时，应用程序可以使用 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 跨域发出&lt;a href=&quot;https://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;请求。</target>
        </trans-unit>
        <trans-unit id="9e1bbeca79619dc168ee72be62c4c17e14e649d8" translate="yes" xml:space="preserve">
          <source>Apps do not typically need to create their own animation players, but if you do need to, follow these steps:</source>
          <target state="translated">应用程序通常不需要创建自己的动画播放器,但如果你确实需要,请按照以下步骤进行。</target>
        </trans-unit>
        <trans-unit id="8a2f874c6db468662ffb58a8875448a198ac499b" translate="yes" xml:space="preserve">
          <source>Apps often POST data to a server. They POST when submitting a form. In the following example, the &lt;code&gt;HeroesService&lt;/code&gt; posts when adding a hero to the database.</source>
          <target state="translated">应用程序通常将数据发布到服务器。他们在提交表单时发布。在以下示例中， &lt;code&gt;HeroesService&lt;/code&gt; 在将英雄添加到数据库时进行发布。</target>
        </trans-unit>
        <trans-unit id="30b7a831fd8ffb7da2ad0a9cf451a0c40ac3345a" translate="yes" xml:space="preserve">
          <source>Apps often define configuration objects with lots of small facts, like the title of the application or the address of a web API endpoint. These configuration objects aren't always instances of a class. They can be object literals, as shown in the following example.</source>
          <target state="translated">应用程序经常定义配置对象,里面有很多小事实,比如应用程序的标题或web API端点的地址。这些配置对象并不总是一个类的实例。它们可以是对象字面值,如下面的例子所示。</target>
        </trans-unit>
        <trans-unit id="382db7830add4fb204b6af3f246c22df74c9e4e7" translate="yes" xml:space="preserve">
          <source>Apps often use an interceptor to set default headers on outgoing requests.</source>
          <target state="translated">应用程序经常使用拦截器来设置传出请求的默认头。</target>
        </trans-unit>
        <trans-unit id="e361112818e4768cac11b5e923f0fa29d5292891" translate="yes" xml:space="preserve">
          <source>Apps pass a &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; object to &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; in order to configure the app-wide &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; service with routes. &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; returns a &lt;a href=&quot;../api/core/modulewithproviders&quot;&gt;ModuleWithProviders&lt;/a&gt;. You add that result to the &lt;code&gt;imports&lt;/code&gt; list of the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">应用程序将 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 对象传递给 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; ，以便为应用程序范围的 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 服务配置路由。 &lt;code&gt;&lt;a href=&quot;../api/router/routermodule#forRoot&quot;&gt;RouterModule.forRoot()&lt;/a&gt;&lt;/code&gt; 返回&lt;a href=&quot;../api/core/modulewithproviders&quot;&gt;ModuleWithProviders&lt;/a&gt;。您将该结果添加到根 &lt;code&gt;AppModule&lt;/code&gt; 的 &lt;code&gt;imports&lt;/code&gt; 列表中。</target>
        </trans-unit>
        <trans-unit id="cc390285ebab82a2a8d69e9aa75a08e70733597e" translate="yes" xml:space="preserve">
          <source>Apr 18, 2019</source>
          <target state="translated">2019年4月18日</target>
        </trans-unit>
        <trans-unit id="89df6f0f2f5be74f2452247a90bf7057dde93046" translate="yes" xml:space="preserve">
          <source>Apr 18, 2020</source>
          <target state="translated">2020年4月18日</target>
        </trans-unit>
        <trans-unit id="1571960f64dc1bbd85c8afae57c18c2fe87dc77c" translate="yes" xml:space="preserve">
          <source>April 15, 1988</source>
          <target state="translated">1988年4月15日</target>
        </trans-unit>
        <trans-unit id="16639cf778dca6a11a26844b092710e566557dbc" translate="yes" xml:space="preserve">
          <source>Architect</source>
          <target state="translated">Architect</target>
        </trans-unit>
        <trans-unit id="2e99cf09904565828c48434629a7dae4ca7ab60a" translate="yes" xml:space="preserve">
          <source>Architect expects builders to run once (by default) and return. This behavior is not entirely compatible with a builder that watches for changes (like Webpack, for example). Architect can support watch mode, but there are some things to look out for.</source>
          <target state="translated">Architect希望构建器运行一次(默认情况下)并返回。这种行为与监视变化的构建器(例如 Webpack)不完全兼容。建筑师可以支持监视模式,但也有一些需要注意的地方。</target>
        </trans-unit>
        <trans-unit id="cb12b45f1feccd3ae9df35525912508afafb94e0" translate="yes" xml:space="preserve">
          <source>Architect is the tool that the CLI uses to perform complex tasks such as compilation, according to provided configurations. The CLI commands run Architect targets such as &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;serve&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;, and &lt;code&gt;lint&lt;/code&gt;. Each named target has a default configuration, specified by an &quot;options&quot; object, and an optional set of named alternate configurations in the &quot;configurations&quot; object.</source>
          <target state="translated">根据提供的配置，架构师是CLI用来执行复杂任务（例如编译）的工具。 CLI命令运行Architect目标，例如 &lt;code&gt;build&lt;/code&gt; ， &lt;code&gt;serve&lt;/code&gt; ， &lt;code&gt;test&lt;/code&gt; 和 &lt;code&gt;lint&lt;/code&gt; 。每个命名目标都有一个默认配置，由&amp;ldquo;选项&amp;rdquo;对象指定，在&amp;ldquo;配置&amp;rdquo;对象中具有可选的一组命名备用配置。</target>
        </trans-unit>
        <trans-unit id="87e9ee57ab4d3251e3425b9e1edd8474dc28d887" translate="yes" xml:space="preserve">
          <source>Architect is the tool that the CLI uses to perform complex tasks, such as compilation and test running. Architect is a shell that runs a specified &lt;a href=&quot;glossary#builder&quot;&gt;builder&lt;/a&gt; to perform a given task, according to a &lt;a href=&quot;glossary#target&quot;&gt;target&lt;/a&gt; configuration. You can define and configure new builders and targets to extend the CLI. See &lt;a href=&quot;cli-builder&quot;&gt;Angular CLI Builders&lt;/a&gt;.</source>
          <target state="translated">CLI是CLI用来执行复杂任务（例如编译和测试运行）的工具。Architect是根据&lt;a href=&quot;glossary#target&quot;&gt;目标&lt;/a&gt;配置运行指定的&lt;a href=&quot;glossary#builder&quot;&gt;构建器&lt;/a&gt;以执行给定任务的外壳。您可以定义和配置新的构建器和目标以扩展CLI。请参阅&lt;a href=&quot;cli-builder&quot;&gt;Angular CLI构建器&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="68a0175db55fe6829a7c4fdd2c0b28db697a3b08" translate="yes" xml:space="preserve">
          <source>Architect resolves input options for a given target by taking the default options object, then overwriting values from the configuration used (if any), then further overwriting values from the overrides object passed to &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt;. For the Angular CLI, the overrides object is built from command line arguments.</source>
          <target state="translated">Architect通过采用默认的options对象来解析给定目标的输入选项，然后覆盖所使用的配置（如果有）中的值，然后进一步覆盖传递给 &lt;code&gt;BuilderContext.scheduleTarget()&lt;/code&gt; 的override对象中的值。对于Angular CLI，覆盖对象是从命令行参数构建的。</target>
        </trans-unit>
        <trans-unit id="650e1a2c31f381d1ef315d6ecb1f9821f346be20" translate="yes" xml:space="preserve">
          <source>Architect runs builders asynchronously. To invoke a builder, you schedule a task to be run when all configuration resolution is complete.</source>
          <target state="translated">Architect异步运行构建器。要调用一个构建器,你需要在所有配置解析完成后安排一个任务来运行。</target>
        </trans-unit>
        <trans-unit id="b8187a8b2aa9dac023d1b4014ab0ac3ced813c4c" translate="yes" xml:space="preserve">
          <source>Architect validates the resulting options values against the schema of the builder. If inputs are valid, Architect creates the context and executes the builder.</source>
          <target state="translated">建筑师根据构建器的模式验证结果的选项值。如果输入有效,Architect会创建上下文并执行构建器。</target>
        </trans-unit>
        <trans-unit id="a8051a2dd19694f0d3cd62e35d681d609ea33a34" translate="yes" xml:space="preserve">
          <source>Architectural reasons may lead you to restrict access to a service to the application domain where it belongs. For example, the guide sample includes a &lt;code&gt;VillainsListComponent&lt;/code&gt; that displays a list of villains. It gets those villains from a &lt;code&gt;VillainsService&lt;/code&gt;.</source>
          <target state="translated">出于架构原因，您可能将对服务的访问限制为它所属的应用程序域。例如，指南样本包括一个 &lt;code&gt;VillainsListComponent&lt;/code&gt; ，它显示一个反派列表。它从 &lt;code&gt;VillainsService&lt;/code&gt; 获取那些恶棍。</target>
        </trans-unit>
        <trans-unit id="77cbe978decf7e18ac53e8ff64911f09e83509bc" translate="yes" xml:space="preserve">
          <source>Architecture Overview</source>
          <target state="translated">架构概述</target>
        </trans-unit>
        <trans-unit id="f01976881a77559b65df5022645150a74a52ede0" translate="yes" xml:space="preserve">
          <source>Architecture overview</source>
          <target state="translated">架构概述</target>
        </trans-unit>
        <trans-unit id="2745debaa64a20eedb49d9f14a0b807c87aa2d2a" translate="yes" xml:space="preserve">
          <source>Area</source>
          <target state="translated">Area</target>
        </trans-unit>
        <trans-unit id="ce5e5792e97fe5c7861d6ae9b29cf5a25cc0e70a" translate="yes" xml:space="preserve">
          <source>Argument</source>
          <target state="translated">Argument</target>
        </trans-unit>
        <trans-unit id="6001476930bb93c3e465d55fc3340756fadc4aa9" translate="yes" xml:space="preserve">
          <source>Argument and option names can be given in either &lt;a href=&quot;guide/glossary#case-types&quot;&gt;camelCase or dash-case&lt;/a&gt;. &lt;code&gt;--myOptionName&lt;/code&gt; is equivalent to &lt;code&gt;--my-option-name&lt;/code&gt;.</source>
          <target state="translated">参数和选项名称可以使用&lt;a href=&quot;guide/glossary#case-types&quot;&gt;camelCase或破折号指定&lt;/a&gt;。 &lt;code&gt;--myOptionName&lt;/code&gt; 等效于 &lt;code&gt;--my-option-name&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="c2f3a054448adb7997b5c36e72f9be845a0b4d34" translate="yes" xml:space="preserve">
          <source>Arguments (dependencies) to the &lt;code&gt;factory&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;factory&lt;/code&gt; 功能的参数（依赖项）。</target>
        </trans-unit>
        <trans-unit id="6b9d43f8a1c9ac290af8a299e9d3af0066551611" translate="yes" xml:space="preserve">
          <source>Arrange to use product data from an external file.</source>
          <target state="translated">安排使用外部文件中的产品数据。</target>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="a2c4769fd815d0f8646a06e09c4545f8498d2d6d" translate="yes" xml:space="preserve">
          <source>Array index</source>
          <target state="translated">阵列索引</target>
        </trans-unit>
        <trans-unit id="6f34d9dcb007316860a77e1a43c21a988e0aec6d" translate="yes" xml:space="preserve">
          <source>Array of latest values for the controls</source>
          <target state="translated">控件的最新值阵列</target>
        </trans-unit>
        <trans-unit id="73e2cda4b11ea7d0351e69232f425f934d2b347b" translate="yes" xml:space="preserve">
          <source>Array of values for the controls</source>
          <target state="translated">控件的数值阵列</target>
        </trans-unit>
        <trans-unit id="b4549d1caf74aaf959dfe06fbea3422a27392589" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;toh-pt2&quot;&gt;before&lt;/a&gt;, whenever a user clicks on a hero name, the hero detail appears below the hero list. Now the &lt;code&gt;HeroDetailComponent&lt;/code&gt; is presenting those details instead of the &lt;code&gt;HeroesComponent&lt;/code&gt;.</source>
          <target state="translated">与&lt;a href=&quot;toh-pt2&quot;&gt;以前一样&lt;/a&gt;，每当用户单击英雄名称时，英雄详细信息就会出现在英雄列表下方。现在 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 会显示这些详细信息，而不是 &lt;code&gt;HeroesComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8320fed1ae9fa1073ff9c98aaa4a06e5e4044fa3" translate="yes" xml:space="preserve">
          <source>As a general rule, import modules with providers &lt;em&gt;exactly once&lt;/em&gt;, preferably in the application's &lt;em&gt;root module&lt;/em&gt;. That's also usually the best place to configure, wrap, and override them.</source>
          <target state="translated">通常，请使用提供者&lt;em&gt;完全一次&lt;/em&gt;导入模块，最好在应用程序的&lt;em&gt;根模块中&lt;/em&gt;。通常，这也是配置，包装和覆盖它们的最佳位置。</target>
        </trans-unit>
        <trans-unit id="deffe223d373efbae49c2b4d79dc103d2e7fb62c" translate="yes" xml:space="preserve">
          <source>As a host page for the &quot;Crisis Center&quot; feature, generate a &lt;code&gt;CrisisCenterHome&lt;/code&gt; component in the &lt;code&gt;crisis-center&lt;/code&gt; folder.</source>
          <target state="translated">作为&amp;ldquo;危机中心&amp;rdquo;功能的 &lt;code&gt;CrisisCenterHome&lt;/code&gt; ，在 &lt;code&gt;crisis-center&lt;/code&gt; 文件夹中生成一个CrisisCenterHome组件。</target>
        </trans-unit>
        <trans-unit id="0367e00c5bf2f26492dcf63c921938c118e9f471" translate="yes" xml:space="preserve">
          <source>As a library developer, you can create your own collections of custom schematics to integrate your library with the Angular CLI.</source>
          <target state="translated">作为一个库开发者,你可以创建自己的自定义示意图集合,以将你的库与Angular CLI集成。</target>
        </trans-unit>
        <trans-unit id="dae413a6ba6d2275c4b29345c399c39ff53553d6" translate="yes" xml:space="preserve">
          <source>As a plain number, in milliseconds: &lt;code&gt;100&lt;/code&gt;</source>
          <target state="translated">以毫秒为单位的纯数字： &lt;code&gt;100&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d6c917d0ac550880e60ac6263e147c30d2fadd4" translate="yes" xml:space="preserve">
          <source>As a publisher, you create an &lt;code&gt;Observable&lt;/code&gt; instance that defines a &lt;em&gt;subscriber&lt;/em&gt; function. This is the function that is executed when a consumer calls the &lt;code&gt;subscribe()&lt;/code&gt; method. The subscriber function defines how to obtain or generate values or messages to be published.</source>
          <target state="translated">作为发布者，您将创建一个 &lt;code&gt;Observable&lt;/code&gt; 实例，该实例定义了&lt;em&gt;订阅者&lt;/em&gt;功能。当使用者调用 &lt;code&gt;subscribe()&lt;/code&gt; 方法时，将执行此函数。订户功能定义了如何获取或生成要发布的值或消息。</target>
        </trans-unit>
        <trans-unit id="90863afd93efc1b713bee9807c95ef1c370a7606" translate="yes" xml:space="preserve">
          <source>As a service &lt;em&gt;tester&lt;/em&gt;, you must at least think about the first level of service dependencies but you &lt;em&gt;can&lt;/em&gt; let Angular DI do the service creation and deal with constructor argument order when you use the &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; testing utility to provide and create services.</source>
          <target state="translated">作为服务&lt;em&gt;测试人员&lt;/em&gt;，您至少必须考虑服务依赖关系的第一级，但是当您使用 &lt;code&gt;&lt;a href=&quot;../api/core/testing/testbed&quot;&gt;TestBed&lt;/a&gt;&lt;/code&gt; 测试实用程序提供和创建服务时，&lt;em&gt;可以&lt;/em&gt;让Angular DI进行服务创建并处理构造函数参数顺序。</target>
        </trans-unit>
        <trans-unit id="4b7ecaa28f2dff4ab449f30fd1ccc45445c8a41d" translate="yes" xml:space="preserve">
          <source>As a two-way binding: &lt;code&gt;&amp;lt;my-component [(myValue)]=&quot;anExpression&quot;&amp;gt;&lt;/code&gt;. Since most AngularJS two-way bindings actually only need a one-way binding in practice, &lt;code&gt;&amp;lt;my-component [myValue]=&quot;anExpression&quot;&amp;gt;&lt;/code&gt; is often enough.</source>
          <target state="translated">作为双向绑定： &lt;code&gt;&amp;lt;my-component [(myValue)]=&quot;anExpression&quot;&amp;gt;&lt;/code&gt; 。由于实际上大多数AngularJS双向绑定实际上只需要单向绑定，因此 &lt;code&gt;&amp;lt;my-component [myValue]=&quot;anExpression&quot;&amp;gt;&lt;/code&gt; 通常就足够了。</target>
        </trans-unit>
        <trans-unit id="70711c31150ebda36f5058c7ef67fc2dc552d337" translate="yes" xml:space="preserve">
          <source>As above, the target is the button's click event.</source>
          <target state="translated">如上,目标是按钮的点击事件。</target>
        </trans-unit>
        <trans-unit id="a2fa8220cfc617a4e487c2e9bd8726e63796dd6d" translate="yes" xml:space="preserve">
          <source>As an example, let&amp;rsquo;s create a builder that executes a shell command. To create a builder, use the &lt;code&gt;createBuilder()&lt;/code&gt; CLI Builder function, and return a &lt;code&gt;BuilderOutput&lt;/code&gt; object.</source>
          <target state="translated">作为示例，让我们创建一个执行shell命令的构建器。要创建构建器，请使用 &lt;code&gt;createBuilder()&lt;/code&gt; CLI构建器函数，并返回一个 &lt;code&gt;BuilderOutput&lt;/code&gt; 对象。</target>
        </trans-unit>
        <trans-unit id="a1693faa6c4defc1d4a4ffd82c7efdcbe67d91f3" translate="yes" xml:space="preserve">
          <source>As applications grow in functionality, they also grow in size. The CLI allows you to set size thresholds in your configuration to ensure that parts of your application stay within size boundaries that you define.</source>
          <target state="translated">随着应用程序功能的增长,它们的大小也在增长。CLI允许您在配置中设置大小阈值,以确保应用程序的部分保持在您定义的大小边界内。</target>
        </trans-unit>
        <trans-unit id="426d689742e365afbaea750636ace81f4c7d3a54" translate="yes" xml:space="preserve">
          <source>As described above, in reactive forms each form element in the view is directly linked to a form model (&lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; instance). Updates from the view to the model and from the model to the view are synchronous and aren't dependent on the UI rendered. The diagrams below use the same favorite color example to demonstrate how data flows when an input field's value is changed from the view and then from the model.</source>
          <target state="translated">如上所述，在反应形式中，视图中的每个表单元素都直接链接到表单模型（ &lt;code&gt;&lt;a href=&quot;../api/forms/formcontrol&quot;&gt;FormControl&lt;/a&gt;&lt;/code&gt; 实例）。从视图到模型以及从模型到视图的更新是同步的，并且不依赖于呈现的UI。下图使用相同的常用颜色示例演示了如何从视图然后从模型中更改输入字段的值时数据如何流动。</target>
        </trans-unit>
        <trans-unit id="880f9c880127736c203edc896434eeab319390fd" translate="yes" xml:space="preserve">
          <source>As discussed earlier, component CSS styles are encapsulated into the component's view and don't affect the rest of the application.</source>
          <target state="translated">正如前面所讨论的那样,组件的CSS样式被封装到组件的视图中,不会影响应用程序的其他部分。</target>
        </trans-unit>
        <trans-unit id="5b0f7dd7e0658c043afd1da5639cb6335884c9a5" translate="yes" xml:space="preserve">
          <source>As explained in &lt;a href=&quot;testing#compile-components&quot;&gt;&lt;em&gt;Calling compileComponents()&lt;/em&gt;&lt;/a&gt; above, these tests could be run in a non-CLI environment where Angular would have to compile them in the browser.</source>
          <target state="translated">如上面的&lt;a href=&quot;testing#compile-components&quot;&gt;&lt;em&gt;调用compileComponents（）&lt;/em&gt;&lt;/a&gt;所述，这些测试可以在非CLI环境中运行，而Angular必须在浏览器中对其进行编译。</target>
        </trans-unit>
        <trans-unit id="79d75fcadb38a027a00ab11f48886637114c88fe" translate="yes" xml:space="preserve">
          <source>As for any external dependency, you must mock the HTTP backend so your tests can simulate interaction with a remote server. The &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;/testing&lt;/code&gt; library makes it straightforward to set up such mocking.</source>
          <target state="translated">至于任何外部依赖性，您必须模拟HTTP后端，以便您的测试可以模拟与远程服务器的交互。 &lt;code&gt;@angular/common/&lt;a href=&quot;../api/common/http&quot;&gt;http&lt;/a&gt;/testing&lt;/code&gt; 库使设置此类模拟变得很简单。</target>
        </trans-unit>
        <trans-unit id="0535610d785a6f15d9d14a76e023b8b818afd751" translate="yes" xml:space="preserve">
          <source>As mentioned before, one of the key differences between &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; has to do with change detection and how it is propagated between the two frameworks.</source>
          <target state="translated">如前所述， &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 之间的主要区别之一与变更检测以及如何在两个框架之间传播有关。</target>
        </trans-unit>
        <trans-unit id="53b618af56c304e8ae9ebf8b1422dcc8b530788c" translate="yes" xml:space="preserve">
          <source>As mentioned earlier, &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; needs to know how to instantiate the Angular module. It needs a recipe. You define that recipe by providing a factory function that can create an instance of the Angular module. &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; accepts two types of factory functions:</source>
          <target state="translated">如前所述， &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 需要知道如何实例化Angular模块。它需要一个食谱。您可以通过提供可以创建Angular模块实例的工厂函数来定义该配方。 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 接受两种类型的工厂函数：</target>
        </trans-unit>
        <trans-unit id="6075532c0eead9c5665dc3a24b06aa65dfa58aa5" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;dependency-injection-providers#interface-not-valid-token&quot;&gt;DI Providers&lt;/a&gt;, an interface is not a valid DI token because it is a TypeScript artifact that doesn't exist at run time. Use this abstract class interface to get the strong typing of an interface, and also use it as a provider token in the way you would a normal class.</source>
          <target state="translated">如&lt;a href=&quot;dependency-injection-providers#interface-not-valid-token&quot;&gt;DI提供程序中所述&lt;/a&gt;，接口不是有效的DI令牌，因为它是TypeScript构件，在运行时不存在。使用此抽象类接口可获取接口的强类型，并以与普通类相同的方式将其用作提供者令牌。</target>
        </trans-unit>
        <trans-unit id="b355748c485647b9309423108913382295cddbcc" translate="yes" xml:space="preserve">
          <source>As of Angular version 8, all &lt;code&gt;platform-webworker&lt;/code&gt; APIs are deprecated. This includes both packages: &lt;code&gt;@angular/platform-webworker&lt;/code&gt; and &lt;code&gt;@angular/platform-webworker-dynamic&lt;/code&gt;.</source>
          <target state="translated">从Angular 8版开始，所有 &lt;code&gt;platform-webworker&lt;/code&gt; API均已弃用。这包括两个软件包： &lt;code&gt;@angular/platform-webworker&lt;/code&gt; 和 &lt;code&gt;@angular/platform-webworker-dynamic&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a5efb4af0cce4e2df85ce6e18e4d43895419baa" translate="yes" xml:space="preserve">
          <source>As of Angular version 8, lazy loading code can be accomplished simply by using the dynamic import syntax &lt;code&gt;import('...')&lt;/code&gt;. In your application, you create a new service that uses dynamic imports to lazy load AngularJS.</source>
          <target state="translated">从Angular版本8开始，可以通过使用动态导入语法 &lt;code&gt;import('...')&lt;/code&gt; 轻松完成延迟加载代码。在您的应用程序中，您创建一个新服务，该服务使用动态导入来延迟加载AngularJS。</target>
        </trans-unit>
        <trans-unit id="1a5d8ac3e628f548a6202a37c401e9210549cc5a" translate="yes" xml:space="preserve">
          <source>As of Typescript 2.0, you can enforce &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html&quot;&gt;strict null checking&lt;/a&gt; with the &lt;code&gt;--strictNullChecks&lt;/code&gt; flag. TypeScript then ensures that no variable is unintentionally null or undefined.</source>
          <target state="translated">从Typescript 2.0开始，您可以使用 &lt;code&gt;--strictNullChecks&lt;/code&gt; 标志强制执行&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html&quot;&gt;严格的null检查&lt;/a&gt;。然后，TypeScript确保没有变量会意外地为null或未定义。</target>
        </trans-unit>
        <trans-unit id="6c04205c526a4908855b8b9cd7699a33503a185d" translate="yes" xml:space="preserve">
          <source>As service &lt;em&gt;consumer&lt;/em&gt;, you don't worry about any of this. You don't worry about the order of constructor arguments or how they're created.</source>
          <target state="translated">作为服务&lt;em&gt;使用者&lt;/em&gt;，您无需担心任何这些。您不必担心构造函数参数的顺序或如何创建它们。</target>
        </trans-unit>
        <trans-unit id="d046d3787fe0555ffbe29692f926aa83f46f12d8" translate="yes" xml:space="preserve">
          <source>As soon as you import the &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt;, this directive becomes active by default on all &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tags. You don't need to add a special selector.</source>
          <target state="translated">导入 &lt;code&gt;&lt;a href=&quot;formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 后，默认情况下，此伪指令在所有 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 标记上都变为活动状态。您无需添加特殊的选择器。</target>
        </trans-unit>
        <trans-unit id="1c2a6c1dd7997586cb51494b2cd0194944234721" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;NgFor&lt;/code&gt; directive loops through the list, it sets and resets properties of its own &lt;em&gt;context&lt;/em&gt; object. These properties can include, but aren't limited to, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt;, and a special property named &lt;code&gt;$implicit&lt;/code&gt;.</source>
          <target state="translated">当 &lt;code&gt;NgFor&lt;/code&gt; 指令遍历列表时，它将设置和重置其自己的&lt;em&gt;上下文&lt;/em&gt;对象的属性。这些属性可以包括但不限于 &lt;code&gt;index&lt;/code&gt; ， &lt;code&gt;&lt;a href=&quot;../api/common/ngforofcontext#odd&quot;&gt;odd&lt;/a&gt;&lt;/code&gt; 和一个名为 &lt;code&gt;$implicit&lt;/code&gt; 的特殊属性。</target>
        </trans-unit>
        <trans-unit id="cb72e80f48988fd1b9af9fabfe152ff02575aa3d" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;isStable&lt;/code&gt; Observable runs outside the zone, the &lt;code&gt;value&lt;/code&gt; field will be updated properly, but the template will not be refreshed!</source>
          <target state="translated">由于 &lt;code&gt;isStable&lt;/code&gt; Observable在区域外运行，因此 &lt;code&gt;value&lt;/code&gt; 字段将被正确更新，但不会刷新模板！</target>
        </trans-unit>
        <trans-unit id="b2ba4060e4e4afd4ec60303640effc6e19da00de" translate="yes" xml:space="preserve">
          <source>As the app grows, this rule becomes even more important. &lt;a href=&quot;styleguide#toc&quot;&gt;Back to top&lt;/a&gt;</source>
          <target state="translated">随着应用程序的增长，此规则变得更加重要。&lt;a href=&quot;styleguide#toc&quot;&gt;回到顶部&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="83b41c56b3b8492075b0d6fee4f3faaeb4fc7ed3" translate="yes" xml:space="preserve">
          <source>As the diagram shows, use inputs and outputs together in the same manner as using them separately. Here, the child selector is &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;deleteRequest&lt;/code&gt; being &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; properties in the child component class. The property &lt;code&gt;currentItem&lt;/code&gt; and the method &lt;code&gt;crossOffItem()&lt;/code&gt; are both in the parent component class.</source>
          <target state="translated">如图所示，以与分别使用它们相同的方式一起使用输入和输出。在此，子选择是 &lt;code&gt;&amp;lt;app-input-output&amp;gt;&lt;/code&gt; 与 &lt;code&gt;&lt;a href=&quot;../api/core/iterablechangerecord#item&quot;&gt;item&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;deleteRequest&lt;/code&gt; 感 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;@&lt;a href=&quot;../api/core/output&quot;&gt;Output&lt;/a&gt;()&lt;/code&gt; 在子组件类的属性。属性 &lt;code&gt;currentItem&lt;/code&gt; 和方法 &lt;code&gt;crossOffItem()&lt;/code&gt; 都在父组件类中。</target>
        </trans-unit>
        <trans-unit id="576de19f7cd986ea910a0781414027d767fdf59f" translate="yes" xml:space="preserve">
          <source>As the message says, the &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; element does not have a &lt;code&gt;colspan&lt;/code&gt; property. This is true because &lt;code&gt;colspan&lt;/code&gt; is an attribute&amp;mdash;&lt;code&gt;colSpan&lt;/code&gt;, with a capital &lt;code&gt;S&lt;/code&gt;, is the corresponding property. Interpolation and property binding can set only &lt;em&gt;properties&lt;/em&gt;, not attributes.</source>
          <target state="translated">如消息所示， &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 元素没有 &lt;code&gt;colspan&lt;/code&gt; 属性。这是正确的，因为 &lt;code&gt;colspan&lt;/code&gt; 是一个属性&amp;mdash; &lt;code&gt;colSpan&lt;/code&gt; （带有大写字母 &lt;code&gt;S&lt;/code&gt; ）是相应的属性。插值和属性绑定只能设置&lt;em&gt;属性&lt;/em&gt;，不能设置属性。</target>
        </trans-unit>
        <trans-unit id="44bacbc3e7fdb0b748fcb62abf55c43e15ce9165" translate="yes" xml:space="preserve">
          <source>As the user types in the search box, an input event binding calls the component's &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; method with the new search box value.</source>
          <target state="translated">当用户在搜索框中键入内容时，输入事件绑定将使用新的搜索框值调用组件的 &lt;code&gt;&lt;a href=&quot;../api/common/upgrade/%24locationshim#search&quot;&gt;search()&lt;/a&gt;&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="9055245f3b1e80adc8f94fdba52f5ad34bb44d2d" translate="yes" xml:space="preserve">
          <source>As the validation begins, the &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; delegates to the &lt;code&gt;HeroesService&lt;/code&gt;&lt;code&gt;isAlterEgoTaken()&lt;/code&gt; method with the current control value. At this point the control is marked as &lt;code&gt;pending&lt;/code&gt; and remains in this state until the observable chain returned from the &lt;code&gt;validate()&lt;/code&gt; method completes.</source>
          <target state="translated">验证开始时， &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; 会使用当前控件值将其委托给 &lt;code&gt;HeroesService&lt;/code&gt; &lt;code&gt;isAlterEgoTaken()&lt;/code&gt; 方法。此时，控件被标记为 &lt;code&gt;pending&lt;/code&gt; 并保持此状态，直到 &lt;code&gt;validate()&lt;/code&gt; 方法返回的可观察链完成。</target>
        </trans-unit>
        <trans-unit id="012a24a970804ecbbe43bf6ba131c69195b1c31f" translate="yes" xml:space="preserve">
          <source>As these validators are all sync validators, you pass them in as the second argument.</source>
          <target state="translated">由于这些验证器都是同步验证器,你把它们作为第二个参数传入。</target>
        </trans-unit>
        <trans-unit id="0f45027f55358700d46117f934776e60e6b2ad7a" translate="yes" xml:space="preserve">
          <source>As users enter form data, you'll capture their changes and update an instance of a model. You can't lay out the form until you know what the model looks like.</source>
          <target state="translated">当用户输入表单数据时,您将捕获他们的更改并更新一个模型的实例。在知道模型的样子之前,你不能布置表单。</target>
        </trans-unit>
        <trans-unit id="1b00d72f3724db2eb2f17c415c8acad26e63056a" translate="yes" xml:space="preserve">
          <source>As usual, you write a constructor that asks Angular to inject services that the component requires and reference them as private variables.</source>
          <target state="translated">像往常一样,你写一个构造函数,要求Angular注入组件需要的服务,并将它们作为私有变量引用。</target>
        </trans-unit>
        <trans-unit id="2a5fa238e4e05c9102523cdc407b74b4b0c63df8" translate="yes" xml:space="preserve">
          <source>As with components, you can add as many directive property bindings as you need by stringing them along in the template. The developer should be able to write the following template HTML to both bind to the &lt;code&gt;AppComponent.color&lt;/code&gt; and fall back to &quot;violet&quot; as the default color.</source>
          <target state="translated">与组件一样，您可以通过在模板中添加它们来添加所需数量的指令属性绑定。开发人员应该能够编写以下模板HTML，以绑定到 &lt;code&gt;AppComponent.color&lt;/code&gt; 并回退为默认颜色&amp;ldquo;紫罗兰&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="30b5e960013eb063b20be7ecc6ff05c14a6c57f8" translate="yes" xml:space="preserve">
          <source>As with expressions, avoid writing complex template statements. A method call or simple property assignment should be the norm.</source>
          <target state="translated">与表达式一样,避免编写复杂的模板语句。方法调用或简单的属性赋值应该是常态。</target>
        </trans-unit>
        <trans-unit id="07c4c64d5513511be2cb127c82fcb01ee8b7e55a" translate="yes" xml:space="preserve">
          <source>As with expressions, statements can refer only to what's in the statement context such as an event handling method of the component instance.</source>
          <target state="translated">与表达式一样,语句只能引用语句上下文中的内容,如组件实例的事件处理方法。</target>
        </trans-unit>
        <trans-unit id="bb901be354860557451c002789bc0c1663e2f0b6" translate="yes" xml:space="preserve">
          <source>As with other directives, you apply a structural directive to a &lt;em&gt;host element&lt;/em&gt;. The directive then does whatever it's supposed to do with that host element and its descendants.</source>
          <target state="translated">与其他指令一样，您将结构指令应用于&lt;em&gt;host元素&lt;/em&gt;。然后，该指令执行与该主机元素及其后代有关的所有操作。</target>
        </trans-unit>
        <trans-unit id="1d5b6417cba4ef881daf50c6a534671a6568bcbd" translate="yes" xml:space="preserve">
          <source>As with other structural directives, the &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;NgSwitchDefault&lt;/a&gt;&lt;/code&gt; can be desugared into the &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; element form.</source>
          <target state="translated">与其他结构指令一样，可以将 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchcase&quot;&gt;NgSwitchCase&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/ngswitchdefault&quot;&gt;NgSwitchDefault&lt;/a&gt;&lt;/code&gt; 还原为 &lt;code&gt;&amp;lt;ng-template&amp;gt;&lt;/code&gt; 元素形式。</target>
        </trans-unit>
        <trans-unit id="bf9ee189724da5d4f748ccae4de0e3edcce56bb7" translate="yes" xml:space="preserve">
          <source>As with the &lt;code&gt;HeroesModule&lt;/code&gt;, you must add the &lt;code&gt;CrisisCenterModule&lt;/code&gt; to the &lt;code&gt;imports&lt;/code&gt; array of the &lt;code&gt;AppModule&lt;/code&gt;&lt;em&gt;before&lt;/em&gt; the &lt;code&gt;AppRoutingModule&lt;/code&gt;:</source>
          <target state="translated">与 &lt;code&gt;HeroesModule&lt;/code&gt; 一样，您必须在 &lt;code&gt;AppModule&lt;/code&gt; &lt;em&gt;之前&lt;/em&gt;将 &lt;code&gt;AppRoutingModule&lt;/code&gt; 添加到 &lt;code&gt;CrisisCenterModule&lt;/code&gt; 的 &lt;code&gt;imports&lt;/code&gt; 数组中：&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7ce201841a7ab6826908ab4e2e8a1bf231d9b18c" translate="yes" xml:space="preserve">
          <source>As with the previous &lt;code&gt;expectOne()&lt;/code&gt;, the test will fail if 0 or 2+ requests satisfy this predicate.</source>
          <target state="translated">与之前的 &lt;code&gt;expectOne()&lt;/code&gt; ，如果0或2+个请求满足此谓词，则测试将失败。</target>
        </trans-unit>
        <trans-unit id="ec0a709258428a25296d9a2a6bba7576693ff220" translate="yes" xml:space="preserve">
          <source>As you can see here, the &lt;code&gt;parentItem&lt;/code&gt; in &lt;code&gt;AppComponent&lt;/code&gt; is a string, which the &lt;code&gt;ItemDetailComponent&lt;/code&gt; expects:</source>
          <target state="translated">如您所见， &lt;code&gt;parentItem&lt;/code&gt; 中的 &lt;code&gt;AppComponent&lt;/code&gt; 是一个字符串， &lt;code&gt;ItemDetailComponent&lt;/code&gt; 期望：</target>
        </trans-unit>
        <trans-unit id="b8ce8f85bb4b5482efa912931cf27e2ce382563a" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; class implements the &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; interface. In the constructor, we inject the &lt;code&gt;HeroesService&lt;/code&gt; that has the following interface:</source>
          <target state="translated">如您所见， &lt;code&gt;UniqueAlterEgoValidator&lt;/code&gt; 类实现了 &lt;code&gt;&lt;a href=&quot;../api/forms/asyncvalidator&quot;&gt;AsyncValidator&lt;/a&gt;&lt;/code&gt; 接口。在构造函数中，我们注入具有以下接口的 &lt;code&gt;HeroesService&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="f958b9634ee0ca82f703565029116255553f7d8f" translate="yes" xml:space="preserve">
          <source>As you can see, the response object has a &lt;code&gt;body&lt;/code&gt; property of the correct type.</source>
          <target state="translated">如您所见，响应对象具有正确类型的 &lt;code&gt;body&lt;/code&gt; 属性。</target>
        </trans-unit>
        <trans-unit id="30b1da4a374a4b82201be5944135fd88e7c2eeb0" translate="yes" xml:space="preserve">
          <source>As you click the button, the displayed date alternates between &quot;&lt;strong&gt;&lt;samp&gt;04/15/1988&lt;/samp&gt;&lt;/strong&gt;&quot; and &quot;&lt;strong&gt;&lt;samp&gt;Friday, April 15, 1988&lt;/samp&gt;&lt;/strong&gt;&quot;.</source>
          <target state="translated">单击按钮时，显示的日期在&amp;ldquo;&lt;strong&gt;&lt;samp&gt;1988/04/15&lt;/samp&gt;&lt;/strong&gt;&amp;ldquo;和&amp;rdquo;&lt;strong&gt;&lt;samp&gt;1988年4月15日，星期五&lt;/samp&gt;&lt;/strong&gt;&amp;rdquo;。</target>
        </trans-unit>
        <trans-unit id="ab33e4cc94b129cb31d7c97d8407c2606a472c70" translate="yes" xml:space="preserve">
          <source>As you create new interceptors, add them to the &lt;code&gt;httpInterceptorProviders&lt;/code&gt; array and you won't have to revisit the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">创建新的拦截器时，将它们添加到 &lt;code&gt;httpInterceptorProviders&lt;/code&gt; 数组中，而无需重新访问 &lt;code&gt;AppModule&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b35cd950e3abf3c41b9d1fee6bfbba54cf41fa95" translate="yes" xml:space="preserve">
          <source>As you may recall, &lt;code&gt;AdDirective&lt;/code&gt; injects &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; into its constructor. This is how the directive accesses the element that you want to use to host the dynamic component.</source>
          <target state="translated">您可能还记得， &lt;code&gt;AdDirective&lt;/code&gt; 将 &lt;code&gt;&lt;a href=&quot;../api/core/viewcontainerref&quot;&gt;ViewContainerRef&lt;/a&gt;&lt;/code&gt; 注入其构造函数。这是伪指令如何访问要用于承载动态组件的元素。</target>
        </trans-unit>
        <trans-unit id="66db9819ffe3ed53a6e4700b9705018402a68de2" translate="yes" xml:space="preserve">
          <source>As you might have guessed, you don't need to change anything in the way you bootstrap your existing AngularJS app. Unlike &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt;&amp;mdash;which requires some extra steps&amp;mdash; &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; is able to take care of bootstrapping the Angular module, as long as you provide the recipe.</source>
          <target state="translated">正如您可能已经猜到的那样，您不需要以现有的AngularJS应用程序引导方式进行任何更改。与 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; (需要一些额外的步骤 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 不同，只要您提供了配方，&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;（）便可以引导Angular模块。</target>
        </trans-unit>
        <trans-unit id="b0d2196193897c3d628ff542df1f728e1990a4fd" translate="yes" xml:space="preserve">
          <source>As you near the end of the development process, serving the contents of your output folder from a local web server can give you a better idea of how your application will behave when it is deployed to a remote server. You will need two terminals to get the live-reload experience.</source>
          <target state="translated">当你接近开发过程的尾声时,从本地Web服务器上服务输出文件夹的内容可以让你更好地了解你的应用程序在部署到远程服务器时的表现。你需要两个终端来获得实时重新加载的体验。</target>
        </trans-unit>
        <trans-unit id="5cf5b93ed1e9a45e9ec8c8bf0566005ffc514ad0" translate="yes" xml:space="preserve">
          <source>As you'll be navigating to the &lt;em&gt;Admin Dashboard&lt;/em&gt; route after logging in, you'll update it to handle the query parameters and fragment.</source>
          <target state="translated">登录后将导航至&amp;ldquo; &lt;em&gt;管理仪表板&amp;rdquo;&lt;/em&gt;路由，因此您将对其进行更新以处理查询参数和片段。</target>
        </trans-unit>
        <trans-unit id="f0b43016a337094572c49d0ebcd7d6f06663336c" translate="yes" xml:space="preserve">
          <source>As you've learned, a component in an outlet persists until you navigate away to a new component. Secondary outlets are no different in this regard.</source>
          <target state="translated">正如您所了解的那样,一个插座中的组件会一直存在,直到您导航到一个新的组件。二级插座在这方面也不例外。</target>
        </trans-unit>
        <trans-unit id="e1b726055d199d23cbbaf0bbb7c90f5393684b71" translate="yes" xml:space="preserve">
          <source>As you've seen, multiple components can leverage the same service. Later in this tutorial, the shipping component will use the cart service to retrieve shipping data via HTTP from the &lt;code&gt;shipping.json&lt;/code&gt; file. Here you'll define the &lt;code&gt;get()&lt;/code&gt; method that will be used.</source>
          <target state="translated">如您所见，多个组件可以利用同一服务。在本教程的稍后部分，运输组件将使用购物车服务通过HTTP从 &lt;code&gt;shipping.json&lt;/code&gt; 文件中检索运输数据。在这里，您将定义将要使用的 &lt;code&gt;get()&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="c81caf6ffe3d326f41b1efc1332f0197102bbbe8" translate="yes" xml:space="preserve">
          <source>As you've worked through the milestones, the application has naturally gotten larger. As you continue to build out feature areas, the overall application size will continue to grow. At some point you'll reach a tipping point where the application takes a long time to load.</source>
          <target state="translated">随着你在里程碑上的努力,应用程序自然而然地变大了。随着你继续构建出功能区,整体应用程序的大小将继续增长。在某些时候,你会达到一个临界点,即应用程序需要很长的时间来加载。</target>
        </trans-unit>
        <trans-unit id="f3171c48f50cadb18be953d56f6aadf2c1470f7e" translate="yes" xml:space="preserve">
          <source>As your app grows, you can organize code relevant for a specific feature. This helps apply clear boundaries for features. With feature modules, you can keep code related to a specific functionality or feature separate from other code. Delineating areas of your app helps with collaboration between developers and teams, separating directives, and managing the size of the root module.</source>
          <target state="translated">随着你的应用程序的发展,你可以组织与特定功能相关的代码。这有助于为功能申请明确的边界。通过功能模块,您可以将与特定功能或特性相关的代码与其他代码分开。划分应用程序的区域有助于开发人员和团队之间的协作,分离指令,并管理根模块的大小。</target>
        </trans-unit>
        <trans-unit id="ff3222db2ced161973e02584ac4049af0ec6632b" translate="yes" xml:space="preserve">
          <source>Asking the service worker to activate the latest version of the app for the current tab.</source>
          <target state="translated">要求服务人员为当前标签激活最新版本的应用。</target>
        </trans-unit>
        <trans-unit id="fbc52ac881315f0b01fcb3898c6bbefb4ca717ed" translate="yes" xml:space="preserve">
          <source>Asking the service worker to check the server for new updates.</source>
          <target state="translated">要求服务人员检查服务器是否有新的更新。</target>
        </trans-unit>
        <trans-unit id="269d80f2e6ae0d9c46cde478b4e5500f9c28b64f" translate="yes" xml:space="preserve">
          <source>Assert that the component &lt;code&gt;favoriteColor&lt;/code&gt; property value matches the value from the input.</source>
          <target state="translated">断言组件 &lt;code&gt;favoriteColor&lt;/code&gt; 属性值与输入中的值匹配。</target>
        </trans-unit>
        <trans-unit id="3add2d771e4f408357de38d3cf1e4671e71d6e99" translate="yes" xml:space="preserve">
          <source>Assert that the component's &lt;code&gt;favoriteColorControl&lt;/code&gt; value matches the value from the input.</source>
          <target state="translated">断言组件的 &lt;code&gt;favoriteColorControl&lt;/code&gt; 值与输入中的值匹配。</target>
        </trans-unit>
        <trans-unit id="60d381f9c278556bf5f707455aa4e181db801691" translate="yes" xml:space="preserve">
          <source>Assert that the input value matches the value of the &lt;code&gt;favoriteColor&lt;/code&gt; property in the component instance.</source>
          <target state="translated">断言输入值与组件实例中的 &lt;code&gt;favoriteColor&lt;/code&gt; 属性的值匹配。</target>
        </trans-unit>
        <trans-unit id="2cac1bd12dceb2fce01f7d2c39980b6f3eb123f1" translate="yes" xml:space="preserve">
          <source>Assert that the new value set on the control matches the value in the input.</source>
          <target state="translated">断言在控件上设置的新值与输入的值相匹配。</target>
        </trans-unit>
        <trans-unit id="102dbd8a0d9de9bd9ed34eaa50b57bc20f17597a" translate="yes" xml:space="preserve">
          <source>Assert the correct type of the expression bound to the &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; input within the template.</source>
          <target state="translated">声明绑定到模板中 &lt;code&gt;&lt;a href=&quot;ngif&quot;&gt;ngIf&lt;/a&gt;&lt;/code&gt; 输入的表达式的正确类型。</target>
        </trans-unit>
        <trans-unit id="34ae054cee78e0c6e83c3e3cd694a67e5d64d9d1" translate="yes" xml:space="preserve">
          <source>Asserts the correct type of the context for the template that &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; will render.</source>
          <target state="translated">为 &lt;code&gt;&lt;a href=&quot;ngforof&quot;&gt;NgForOf&lt;/a&gt;&lt;/code&gt; 将呈现的模板声明正确的上下文类型。</target>
        </trans-unit>
        <trans-unit id="64db28c14c3f75eaf3fe6ba74774a54e6cbb89bd" translate="yes" xml:space="preserve">
          <source>Asset groups follow the Typescript interface shown here:</source>
          <target state="translated">资产组遵循这里所示的Typescript界面。</target>
        </trans-unit>
        <trans-unit id="d6c9dfdc694085b6f0d02ea7e1e4fd3d4df7e99c" translate="yes" xml:space="preserve">
          <source>Assets configuration</source>
          <target state="translated">资产配置</target>
        </trans-unit>
        <trans-unit id="e6a6bbc5e96926eeccb08d147396e13b4a2aa489" translate="yes" xml:space="preserve">
          <source>Assignments (&lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;...&lt;/code&gt;)</source>
          <target state="translated">分配（ &lt;code&gt;=&lt;/code&gt; ， &lt;code&gt;+=&lt;/code&gt; ， &lt;code&gt;-=&lt;/code&gt; ， &lt;code&gt;...&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="7a1a70a899ae4731ff189ca13512ffc94c946adb" translate="yes" xml:space="preserve">
          <source>Assigns this bus to the given zone. Any callbacks attached to channels where runInZone was set to true on initialization will be executed in the given zone.</source>
          <target state="translated">将此总线分配给指定的区域。任何附加在初始化时 runInZone 设置为 true 的通道上的回调都将在给定的区域内执行。</target>
        </trans-unit>
        <trans-unit id="d242cadc4aa1e98583aee808bc5bd94b0df50df6" translate="yes" xml:space="preserve">
          <source>Assigns this sink to the given zone. Any channels which are initialized with runInZone set to true will wait for the given zone to exit before sending messages.</source>
          <target state="translated">将此水槽分配给指定的zone。任何初始化时将 runInZone 设置为 true 的通道都会在发送消息前等待给定区域退出。</target>
        </trans-unit>
        <trans-unit id="8f94f199baf1d5d8266597ec2112eb1be1c1fb69" translate="yes" xml:space="preserve">
          <source>Assigns this source to the given zone. Any channels which are initialized with runInZone set to true will emit events that will be executed within the given zone.</source>
          <target state="translated">将此源分配给指定的区域。任何初始化时将runInZone设置为true的通道都会发出将在指定区域内执行的事件。</target>
        </trans-unit>
        <trans-unit id="274e2293c4a3f531e996553089413c2aeb58f8c2" translate="yes" xml:space="preserve">
          <source>Associates a named animation state with a set of CSS styles. See &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">将命名的动画状态与一组CSS样式相关联。参见 &lt;code&gt;&lt;a href=&quot;../common/upgrade/%24locationshim#state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4ae49ef1cd7752015463f129314f634187b62c7a" translate="yes" xml:space="preserve">
          <source>Associates an animation with an entry trigger that can be attached to an element. See &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">将动画与可以附加到元素的输入触发器关联。请参阅 &lt;code&gt;&lt;a href=&quot;trigger&quot;&gt;trigger&lt;/a&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4784eaa8aeb7a762e1180e053368ca4e65b375b2" translate="yes" xml:space="preserve">
          <source>Assume the user is logged into the application at &lt;code&gt;example-bank.com&lt;/code&gt;. The user opens an email and clicks a link to &lt;code&gt;evil.com&lt;/code&gt;, which opens in a new tab.</source>
          <target state="translated">假设用户登录到 &lt;code&gt;example-bank.com&lt;/code&gt; 上的应用程序。用户打开一封电子邮件，然后单击指向 &lt;code&gt;evil.com&lt;/code&gt; 的链接，该链接在新选项卡中打开。</target>
        </trans-unit>
        <trans-unit id="e46bf719d36c903e3f4ff538c57fdd22e7050c74" translate="yes" xml:space="preserve">
          <source>Assume you have a library project &lt;code&gt;my-lib&lt;/code&gt; in your Angular workspace. To tell the library how to build the schematics, add a &lt;code&gt;tsconfig.schematics.json&lt;/code&gt; file next to the generated &lt;code&gt;tsconfig.lib.json&lt;/code&gt; file that configures the library build.</source>
          <target state="translated">假设您的Angular工作空间中有一个库项目 &lt;code&gt;my-lib&lt;/code&gt; 。告诉库如何建立图表，添加 &lt;code&gt;tsconfig.schematics.json&lt;/code&gt; 文件旁边生成 &lt;code&gt;tsconfig.lib.json&lt;/code&gt; 文件配置库的构建。</target>
        </trans-unit>
        <trans-unit id="75818174243243561c9a25a5467849a1c2d2c022" translate="yes" xml:space="preserve">
          <source>Assuming &lt;code&gt;dateObj&lt;/code&gt; is (year: 2010, month: 9, day: 3, hour: 12 PM, minute: 05, second: 08) in the &lt;em&gt;local&lt;/em&gt; time and locale is 'en-US':</source>
          <target state="translated">假设 &lt;code&gt;dateObj&lt;/code&gt; 是（年份：2010，月：9日：3，时间：12日下午，分：05秒：08）在&lt;em&gt;本地&lt;/em&gt;的时间和区域设置'EN-US'：</target>
        </trans-unit>
        <trans-unit id="5873ba4b7149a08e105140ef51ae2d0ffcc5d42b" translate="yes" xml:space="preserve">
          <source>Assuming that the CLI &lt;code&gt;ng serve&lt;/code&gt; command is still running, the browser should refresh and display both the application title and the hero name.</source>
          <target state="translated">假设CLI &lt;code&gt;ng serve&lt;/code&gt; 命令仍在运行，浏览器应刷新并显示应用程序标题和英雄名称。</target>
        </trans-unit>
        <trans-unit id="94f5418a94f3eedc92108d6697fb720a530c5a6c" translate="yes" xml:space="preserve">
          <source>Assuming you already have an app that you created with the &lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;, create a feature module using the CLI by entering the following command in the root project directory. Replace &lt;code&gt;CustomerDashboard&lt;/code&gt; with the name of your module. You can omit the &quot;Module&quot; suffix from the name because the CLI appends it:</source>
          <target state="translated">假设您已经具有使用&lt;a href=&quot;cli&quot;&gt;Angular CLI&lt;/a&gt;创建的应用程序，请在根项目目录中输入以下命令，使用CLI创建功能模块。用模块名称替换 &lt;code&gt;CustomerDashboard&lt;/code&gt; 。您可以从名称中省略&amp;ldquo; Module&amp;rdquo;后缀，因为CLI会在其后添加：</target>
        </trans-unit>
        <trans-unit id="8b593995c88f61a609044a01e37e8e4ccc22e065" translate="yes" xml:space="preserve">
          <source>Assumptions</source>
          <target state="translated">Assumptions</target>
        </trans-unit>
        <trans-unit id="850c312e6795e144c4801560d1a8a36931550927" translate="yes" xml:space="preserve">
          <source>Async Validation</source>
          <target state="translated">异步验证</target>
        </trans-unit>
        <trans-unit id="3d8523026285ca381ac26c6046011d703dc76210" translate="yes" xml:space="preserve">
          <source>Async observable helpers</source>
          <target state="translated">异步可观察助手</target>
        </trans-unit>
        <trans-unit id="a2115adcf8a7abd68847a06a2ca483273231f7b5" translate="yes" xml:space="preserve">
          <source>Async observables</source>
          <target state="translated">异步观测数据</target>
        </trans-unit>
        <trans-unit id="66faa9aa7a8da44bac968eb4f9651b0395d1e769" translate="yes" xml:space="preserve">
          <source>Async pipe</source>
          <target state="translated">异步管</target>
        </trans-unit>
        <trans-unit id="465bdb8533ebb255eef127b77064a4450ccdad5a" translate="yes" xml:space="preserve">
          <source>Async test with &lt;em&gt;async()&lt;/em&gt;</source>
          <target state="translated">使用&lt;em&gt;async（）进行&lt;/em&gt;异步测试&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d3dfebbe72d4e3d6b50b5f6205bf253eb9e510d1" translate="yes" xml:space="preserve">
          <source>Async test with &lt;em&gt;fakeAsync()&lt;/em&gt;</source>
          <target state="translated">使用&lt;em&gt;fakeAsync（）进行&lt;/em&gt;异步测试&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a3a2a031d9a78f06359a7d5ceed4a4220e47722c" translate="yes" xml:space="preserve">
          <source>Async validator function composed of all the async validators registered with this directive.</source>
          <target state="translated">由该指令注册的所有异步验证器组成的异步验证器函数。</target>
        </trans-unit>
        <trans-unit id="08889716a00afbaa4f75748cfc88dc19b867511d" translate="yes" xml:space="preserve">
          <source>AsyncPipe</source>
          <target state="translated">AsyncPipe</target>
        </trans-unit>
        <trans-unit id="d3db89bff8169aadf0002b749871c33ae8202bab" translate="yes" xml:space="preserve">
          <source>AsyncValidator</source>
          <target state="translated">AsyncValidator</target>
        </trans-unit>
        <trans-unit id="ffde100172e9b0262a458c11ee4575fc6b847d60" translate="yes" xml:space="preserve">
          <source>AsyncValidatorFn</source>
          <target state="translated">AsyncValidatorFn</target>
        </trans-unit>
        <trans-unit id="3d7fac7964f752248f02c5aa61c85fd417dcfbcf" translate="yes" xml:space="preserve">
          <source>Asynchronous</source>
          <target state="translated">Asynchronous</target>
        </trans-unit>
        <trans-unit id="b3eeded95df5b44a415fcb5e4ef49bdffbb7e6a1" translate="yes" xml:space="preserve">
          <source>At a high level, NgModules are a way to organize Angular apps and they accomplish this through the metadata in the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; decorator. The metadata falls into three categories:</source>
          <target state="translated">在较高的层次上，NgModules是组织Angular应用程序的一种方式，它们通过 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 装饰器中的元数据来实现。元数据分为三类：</target>
        </trans-unit>
        <trans-unit id="242134a4310d9dba08222aef54e2257cacc08268" translate="yes" xml:space="preserve">
          <source>At its simplest, a service worker is a script that runs in the web browser and manages caching for an application.</source>
          <target state="translated">最简单的说,服务工作者是一个在Web浏览器中运行的脚本,为应用程序管理缓存。</target>
        </trans-unit>
        <trans-unit id="8e510f3f50eecae75e2f194727aa6e0658b6fbe6" translate="yes" xml:space="preserve">
          <source>At its simplest, a service worker is a script that runs in the web browser and manages caching for an application. Service workers function as a network proxy. They intercept all outgoing HTTP requests made by the application and can choose how to respond to them.</source>
          <target state="translated">最简单的说,服务工作者是一个在网络浏览器中运行的脚本,为应用程序管理缓存。服务工作者的功能是网络代理。它们拦截应用程序发出的所有HTTP请求,并可以选择如何响应这些请求。</target>
        </trans-unit>
        <trans-unit id="0a86dc5ece1ac9e833952415de9250d745d527c3" translate="yes" xml:space="preserve">
          <source>At the bottom of the template, add an empty HTML form to capture user information.</source>
          <target state="translated">在模板的底部,添加一个空的HTML表单来采集用户信息。</target>
        </trans-unit>
        <trans-unit id="0a72f978f7bf5ae9b84f741e034c4300f3de1323" translate="yes" xml:space="preserve">
          <source>At the end of &lt;a href=&quot;https://angular.io/start/start&quot;&gt;Your First App&lt;/a&gt;, the online store application has a basic product catalog. The app doesn't have any variable states or navigation. There is one URL, and that URL always displays the &quot;My Store&quot; page with a list of products and their descriptions.</source>
          <target state="translated">在&lt;a href=&quot;https://angular.io/start/start&quot;&gt;Your First App&lt;/a&gt;的最后，在线商店应用程序具有基本的产品目录。该应用程序没有任何变量状态或导航。有一个URL，该URL始终显示&amp;ldquo;我的商店&amp;rdquo;页面，其中包含产品及其说明的列表。</target>
        </trans-unit>
        <trans-unit id="f3a019d3473bd7c74189945ba7fdf2d2de78293b" translate="yes" xml:space="preserve">
          <source>At the end of &lt;a href=&quot;https://angular.io/start/start/data&quot;&gt;Managing Data&lt;/a&gt;, the online store application has a product catalog and a shopping cart.</source>
          <target state="translated">在&lt;a href=&quot;https://angular.io/start/start/data&quot;&gt;管理数据&lt;/a&gt;末尾，在线商店应用程序具有产品目录和购物车。</target>
        </trans-unit>
        <trans-unit id="d55658fc25831b063983ee22a2f5946a2c03370f" translate="yes" xml:space="preserve">
          <source>At the end of &lt;a href=&quot;https://angular.io/start/start/routing&quot;&gt;Routing&lt;/a&gt;, the online store application has a product catalog with two views: a product list and product details. Users can click on a product name from the list to see details in a new view, with a distinct URL (route).</source>
          <target state="translated">在&lt;a href=&quot;https://angular.io/start/start/routing&quot;&gt;Routing&lt;/a&gt;的末尾，在线商店应用程序具有一个带有两个视图的产品目录：产品列表和产品详细信息。用户可以从列表中单击产品名称，以新视图查看具有不同URL（路由）的详细信息。</target>
        </trans-unit>
        <trans-unit id="aa2383077a65ab0c0336fa3575224c0a072cec68" translate="yes" xml:space="preserve">
          <source>At the end of the hero detail template, add a save button with a &lt;code&gt;click&lt;/code&gt; event binding that invokes a new component method named &lt;code&gt;save()&lt;/code&gt;.</source>
          <target state="translated">在英雄详细信息模板的末尾，添加带有 &lt;code&gt;click&lt;/code&gt; 事件绑定的保存按钮，该事件将调用名为 &lt;code&gt;save()&lt;/code&gt; 的新组件方法。</target>
        </trans-unit>
        <trans-unit id="04e2e3448d97cf88b4c8cf92be8647a5d5df0f65" translate="yes" xml:space="preserve">
          <source>At the end, tests may verify that the app has made no unexpected requests.</source>
          <target state="translated">最后,测试可能会验证应用程序没有提出意外请求。</target>
        </trans-unit>
        <trans-unit id="0cb6df513db3bf3228849da6550d8a1fbd416ea9" translate="yes" xml:space="preserve">
          <source>At the moment you're interested in seeing how guards work so the first version does nothing useful. It simply logs to console and &lt;code&gt;returns&lt;/code&gt; true immediately, allowing navigation to proceed:</source>
          <target state="translated">目前，您有兴趣了解警卫的工作方式，因此第一个版本没有任何用处。它只是登录到控制台并立即 &lt;code&gt;returns&lt;/code&gt; true，从而允许进行导航：</target>
        </trans-unit>
        <trans-unit id="9ab7474646e972990366803a61deec9eef2838ea" translate="yes" xml:space="preserve">
          <source>At the moment, &lt;em&gt;any&lt;/em&gt; user can navigate &lt;em&gt;anywhere&lt;/em&gt; in the application &lt;em&gt;anytime&lt;/em&gt;. That's not always the right thing to do.</source>
          <target state="translated">目前，&lt;em&gt;任何&lt;/em&gt;用户都可以&lt;em&gt;随时&lt;/em&gt;在应用程序中的&lt;em&gt;任何&lt;/em&gt;&lt;em&gt;位置&lt;/em&gt;进行导航。并非总是正确的做法。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6a90472fb52fd14133af6b5ed45a846d07c7f8d7" translate="yes" xml:space="preserve">
          <source>At the moment, the &lt;code&gt;CrisisDetailComponent&lt;/code&gt; retrieves the selected crisis. If the crisis is not found, it navigates back to the crisis list view.</source>
          <target state="translated">目前， &lt;code&gt;CrisisDetailComponent&lt;/code&gt; 检索选定的危机。如果未找到危机，则导航​​回到危机列表视图。</target>
        </trans-unit>
        <trans-unit id="060de0fabf75a3678ad4f86fea6ae7d325cd7a4c" translate="yes" xml:space="preserve">
          <source>At the moment, the &lt;code&gt;HeroesComponent&lt;/code&gt; displays both the list of heroes and the selected hero's details.</source>
          <target state="translated">目前， &lt;code&gt;HeroesComponent&lt;/code&gt; 同时显示英雄列表和所选英雄的详细信息。</target>
        </trans-unit>
        <trans-unit id="82fe33a58877ad32663a5e6978a18d91edefa44b" translate="yes" xml:space="preserve">
          <source>At the moment, the binding is to an array of strings. In real applications, most bindings are to more specialized objects.</source>
          <target state="translated">目前,绑定的是一个字符串数组。在实际应用中,大多数绑定都是对更专业的对象。</target>
        </trans-unit>
        <trans-unit id="bbc8860a6469db18738b3c14f8fcb5e7a919ea3c" translate="yes" xml:space="preserve">
          <source>At the moment, the default color&amp;mdash;the color that prevails until the user picks a highlight color&amp;mdash;is hard-coded as &quot;red&quot;. Let the template developer set the default color.</source>
          <target state="translated">目前，默认颜色（在用户选择突出显示颜色之前一直流行的颜色）被硬编码为&amp;ldquo;红色&amp;rdquo;。让模板开发人员设置默认颜色。</target>
        </trans-unit>
        <trans-unit id="3b5f7eb081d98212ad7a07dd8a9a528a0bc15a1a" translate="yes" xml:space="preserve">
          <source>At the root level of the &lt;code&gt;schematics/&lt;/code&gt; folder, create a &lt;code&gt;collection.json&lt;/code&gt; file.</source>
          <target state="translated">在 &lt;code&gt;schematics/&lt;/code&gt; 文件夹的根目录下，创建一个 &lt;code&gt;collection.json&lt;/code&gt; 文件。</target>
        </trans-unit>
        <trans-unit id="6dde421309dba3de54f0b4271bbd276260c091cc" translate="yes" xml:space="preserve">
          <source>At the top are the import statements. The next section is where you configure the &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; by stating what components and directives belong to it (&lt;code&gt;declarations&lt;/code&gt;) as well as which other modules it uses (&lt;code&gt;imports&lt;/code&gt;). For more information on the structure of an &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;, be sure to read &lt;a href=&quot;bootstrapping&quot;&gt;Bootstrapping&lt;/a&gt;.</source>
          <target state="translated">顶部是导入语句。下一部分是在 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 上配置的方式，方法是声明@ NgModule属于哪个组件和指令（ &lt;code&gt;declarations&lt;/code&gt; ），以及它使用的其他模块（ &lt;code&gt;imports&lt;/code&gt; ）。有关的结构的更多信息 &lt;code&gt;@&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; ，请务必阅读&lt;a href=&quot;bootstrapping&quot;&gt;自举&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="883786d3cc76dbd1ed79ce5408eeff3078f7cc41" translate="yes" xml:space="preserve">
          <source>At the top level of &lt;code&gt;angular.json&lt;/code&gt;, a few properties configure the workspace, and a &lt;code&gt;projects&lt;/code&gt; section contains the remaining per-project configuration options. CLI defaults set at the workspace level can be overridden by defaults set at the project level, and defaults set at the project level can be overridden on the command line.</source>
          <target state="translated">在 &lt;code&gt;angular.json&lt;/code&gt; 的顶层，一些属性配置工作空间，而&amp;ldquo; &lt;code&gt;projects&lt;/code&gt; 部分包含其余的每个项目配置选项。在工作区级别设置的CLI默认值可以被在项目级别设置的默认值覆盖，而在项目级别设置的默认值可以在命令行上覆盖。</target>
        </trans-unit>
        <trans-unit id="0434ec7f407a6a347e8b9b391b94f54a3a508b6b" translate="yes" xml:space="preserve">
          <source>At the top level, paths that begin with &lt;code&gt;/&lt;/code&gt; refer to the root of the application. But child routes &lt;em&gt;extend&lt;/em&gt; the path of the parent route. With each step down the route tree, you add a slash followed by the route path, unless the path is &lt;em&gt;empty&lt;/em&gt;.</source>
          <target state="translated">在顶层，以 &lt;code&gt;/&lt;/code&gt; 开头的路径引用应用程序的根目录。但是子路由&lt;em&gt;扩展&lt;/em&gt;了父路由的路径。在路径树的每一步中，除非路径为&lt;em&gt;空&lt;/em&gt;，否则在路径路径后添加一个斜线。</target>
        </trans-unit>
        <trans-unit id="a3945a27c64e5bd8255624f2566551f7cf697583" translate="yes" xml:space="preserve">
          <source>At this point, Visual Studio is ready. It&amp;rsquo;s a good idea to close Visual Studio and restart it to make sure everything is clean.</source>
          <target state="translated">至此，Visual Studio准备就绪。最好关闭Visual Studio并重新启动它，以确保一切都干净。</target>
        </trans-unit>
        <trans-unit id="57bf3ff8bf6006519207c4fc0ce314056ecd80b1" translate="yes" xml:space="preserve">
          <source>At this point, all application routes are in place.</source>
          <target state="translated">此时,所有的应用路线都已到位。</target>
        </trans-unit>
        <trans-unit id="d94328cb8894f9ca14552461df3b4d75737edab8" translate="yes" xml:space="preserve">
          <source>At this point, users can put items in the cart by clicking &quot;Buy&quot;, but they can't yet see their cart.</source>
          <target state="translated">此时,用户可以通过点击 &quot;购买 &quot;将商品放入购物车,但还不能看到自己的购物车。</target>
        </trans-unit>
        <trans-unit id="8bd123a0eac56e2896e3fe55bff44567829141a2" translate="yes" xml:space="preserve">
          <source>At this point, you can switch the two components to use the new service instead of the old one. While you &lt;code&gt;$inject&lt;/code&gt; it as the downgraded &lt;code&gt;phone&lt;/code&gt; factory, it's really an instance of the &lt;code&gt;Phone&lt;/code&gt; class and you annotate its type accordingly:</source>
          <target state="translated">此时，您可以将这两个组件切换为使用新服务而不是旧服务。当您 &lt;code&gt;$inject&lt;/code&gt; 其作为降级的 &lt;code&gt;phone&lt;/code&gt; 工厂注入时，它实际上是 &lt;code&gt;Phone&lt;/code&gt; 类的一个实例，您需要相应地注释其类型：</target>
        </trans-unit>
        <trans-unit id="86a28f831b9d378b2f9f53fe3f306868566a3b98" translate="yes" xml:space="preserve">
          <source>At this point, you've replaced all AngularJS application components with their Angular counterparts, even though you're still serving them from the AngularJS router.</source>
          <target state="translated">在这一点上,你已经将所有的AngularJS应用组件替换成了它们的Angular对应物,尽管你仍然从AngularJS路由器中为它们服务。</target>
        </trans-unit>
        <trans-unit id="881d0e72fd3eb18bc7f9bce749c2a557083835f3" translate="yes" xml:space="preserve">
          <source>Attaches a view so that it will be dirty checked. The view will be automatically detached when it is destroyed. This will throw if the view is already attached to a ViewContainer.</source>
          <target state="translated">附加一个视图,以便对其进行脏污检查。当视图被销毁时,它将被自动分离。如果视图已经连接到ViewContainer上,则会抛出。</target>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes" xml:space="preserve">
          <source>Attribute</source>
          <target state="translated">Attribute</target>
        </trans-unit>
        <trans-unit id="b2a054d9997fa913c6ff1d1261a85f354b37c1d2" translate="yes" xml:space="preserve">
          <source>Attribute (the exception)</source>
          <target state="translated">属性</target>
        </trans-unit>
        <trans-unit id="7706e49eec94755bbb4164b09d500329ccb21352" translate="yes" xml:space="preserve">
          <source>Attribute Directive Testing</source>
          <target state="translated">属性指令测试</target>
        </trans-unit>
        <trans-unit id="55c1659b17ee19bef5fd528a73b2941e917a57a8" translate="yes" xml:space="preserve">
          <source>Attribute Directives</source>
          <target state="translated">属性指令</target>
        </trans-unit>
        <trans-unit id="c334bb508016d6901c14a951eec64345dab38157" translate="yes" xml:space="preserve">
          <source>Attribute binding</source>
          <target state="translated">属性绑定</target>
        </trans-unit>
        <trans-unit id="d9b950dd914b91e0fb66d15ece878e4a67694934" translate="yes" xml:space="preserve">
          <source>Attribute binding syntax resembles property binding, but instead of an element property between brackets, start with the prefix &lt;code&gt;attr&lt;/code&gt;, followed by a dot (&lt;code&gt;.&lt;/code&gt;), and the name of the attribute. You then set the attribute value, using an expression that resolves to a string, or remove the attribute when the expression resolves to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">属性绑定语法类似于属性绑定，但是不是括号之间的元素属性，而是以前缀 &lt;code&gt;attr&lt;/code&gt; ，后跟点（ &lt;code&gt;.&lt;/code&gt; ）和属性名称开头。然后，您可以使用解析为字符串的表达式来设置属性值，或者在表达式解析为 &lt;code&gt;null&lt;/code&gt; 时删除属性。</target>
        </trans-unit>
        <trans-unit id="279ab89039ba64c6b0da183f3b7147bf2cea8ccf" translate="yes" xml:space="preserve">
          <source>Attribute directives</source>
          <target state="translated">属性指令</target>
        </trans-unit>
        <trans-unit id="5d12ef2a9da048d322efb7149e52d65f30b28dfa" translate="yes" xml:space="preserve">
          <source>Attribute directives listen to and modify the behavior of other HTML elements, attributes, properties, and components. You usually apply them to elements as if they were HTML attributes, hence the name.</source>
          <target state="translated">属性指令可以监听和修改其他 HTML 元素、属性、属性和组件的行为。您通常将它们应用于元素,就像它们是HTML属性一样,因此被称为属性指令。</target>
        </trans-unit>
        <trans-unit id="20513020a514d725b1470eb9d9c5e82080471bcc" translate="yes" xml:space="preserve">
          <source>Attribute directives&amp;mdash;change the appearance or behavior of an element, component, or another directive.</source>
          <target state="translated">属性指令-更改元素，组件或其他指令的外观或行为。</target>
        </trans-unit>
        <trans-unit id="8ea298a1d48c262be17e654c22323e471414de8a" translate="yes" xml:space="preserve">
          <source>Attribute, class, and style bindings</source>
          <target state="translated">属性、类和样式绑定。</target>
        </trans-unit>
        <trans-unit id="1b88cfba520774bf5bca05743d6b49bf17294180" translate="yes" xml:space="preserve">
          <source>Attribute: &lt;code&gt;&amp;lt;comp name=&quot;World&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">属性： &lt;code&gt;&amp;lt;comp name=&quot;World&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba9f41e65786ab28a5cc7739fa9524275b749e4a" translate="yes" xml:space="preserve">
          <source>Auditing Angular applications</source>
          <target state="translated">审核Angular应用</target>
        </trans-unit>
        <trans-unit id="ddf0bb467a9afb82ce8505717567f73467a792d6" translate="yes" xml:space="preserve">
          <source>Augmenting native elements</source>
          <target state="translated">增加本地元素</target>
        </trans-unit>
        <trans-unit id="66e15602646e8c5a159e78f8d9953cf08b4cdadb" translate="yes" xml:space="preserve">
          <source>Authentication/authorization</source>
          <target state="translated">Authentication/authorization</target>
        </trans-unit>
        <trans-unit id="0efd1e55177485c760611f1570d33e1b5e47d03a" translate="yes" xml:space="preserve">
          <source>Authoring Schematics</source>
          <target state="translated">编写原理图</target>
        </trans-unit>
        <trans-unit id="92b94f5df6479e29b25d986076b0ee811c9a3f18" translate="yes" xml:space="preserve">
          <source>Auto-styling can be used to define a state that depends on layout or other environmental factors.</source>
          <target state="translated">自动样式可以用来定义一个取决于布局或其他环境因素的状态。</target>
        </trans-unit>
        <trans-unit id="a4696360f61ce7b39a54fa976acbcf3c37e4dd61" translate="yes" xml:space="preserve">
          <source>Autocompletion</source>
          <target state="translated">Autocompletion</target>
        </trans-unit>
        <trans-unit id="a8576cba49fa626f39a56bc18330709f71819814" translate="yes" xml:space="preserve">
          <source>Autocompletion can speed up your development time by providing you with contextual possibilities and hints as you type. This example shows autocomplete in an interpolation. As you type it out, you can hit tab to complete.</source>
          <target state="translated">自动完成可以在你输入时为你提供上下文的可能性和提示,从而加快你的开发时间。这个例子显示了插值中的自动完成。当你键入时,你可以点击tab来完成。</target>
        </trans-unit>
        <trans-unit id="2cc042e9fe579c82af6f851ae39215cc25b9ea23" translate="yes" xml:space="preserve">
          <source>Automatic change detection</source>
          <target state="translated">自动检测变化</target>
        </trans-unit>
        <trans-unit id="6eba8d49fe5d13d1fca5b019f42b110fe985ad30" translate="yes" xml:space="preserve">
          <source>Automatic deployment with the CLI</source>
          <target state="translated">使用CLI自动部署</target>
        </trans-unit>
        <trans-unit id="8645d08355f818059391b51cb42d575086fb447b" translate="yes" xml:space="preserve">
          <source>Automatic property calculation with wildcards</source>
          <target state="translated">使用通配符自动计算属性</target>
        </trans-unit>
        <trans-unit id="ba24e92f551ffc6d70286e830ff60471df994992" translate="yes" xml:space="preserve">
          <source>Available and activated updates</source>
          <target state="translated">现有和已启动的更新</target>
        </trans-unit>
        <trans-unit id="6b9113ae3a57f7a0dceaa44494d0a520cabe3576" translate="yes" xml:space="preserve">
          <source>Avoid aliasing &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt;</source>
          <target state="translated">避免混淆 &lt;code&gt;inputs&lt;/code&gt; 和 &lt;code&gt;outputs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35d10846ee5de515ce9531aa71d75239dda439f0" translate="yes" xml:space="preserve">
          <source>Avoid referring to enums with complicated initializers or computed properties.</source>
          <target state="translated">避免引用具有复杂初始化器或计算属性的枚举。</target>
        </trans-unit>
        <trans-unit id="a4763469397ba3b0cc9e116ced71e140704d303a" translate="yes" xml:space="preserve">
          <source>Avoid side effects</source>
          <target state="translated">避免副作用</target>
        </trans-unit>
        <trans-unit id="8d9ef20f693ba88acc4b2ad8c040f990e01cea96" translate="yes" xml:space="preserve">
          <source>Avoid this error by sticking to the compiler's &lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;restricted expression syntax&lt;/a&gt; when writing Angular metadata and be wary of new or unusual TypeScript features.</source>
          <target state="translated">通过在编写Angular元数据时坚持编译器的&lt;a href=&quot;aot-compiler#expression-syntax&quot;&gt;受限表达式语法&lt;/a&gt;来避免此错误，并警惕新的或异常的TypeScript功能。</target>
        </trans-unit>
        <trans-unit id="6f85b2bfcbb0fa2f75065b9806f3edc8026fee56" translate="yes" xml:space="preserve">
          <source>Azure</source>
          <target state="translated">Azure</target>
        </trans-unit>
        <trans-unit id="5f5f6d9b2535d125e7ae46352acf0bb3d116f1ee" translate="yes" xml:space="preserve">
          <source>B, BB &amp;amp; BBB</source>
          <target state="translated">B，BB和BBB</target>
        </trans-unit>
        <trans-unit id="4c55e5e5fc2235cc8c201e69a345f7fab3fb46fa" translate="yes" xml:space="preserve">
          <source>BBBB</source>
          <target state="translated">BBBB</target>
        </trans-unit>
        <trans-unit id="4601044687c40f1a23385d338d02f9fc7f5d512d" translate="yes" xml:space="preserve">
          <source>BBBBB</source>
          <target state="translated">BBBBB</target>
        </trans-unit>
        <trans-unit id="ebdcf0a202669a291a7d498007aa30cf730e825d" translate="yes" xml:space="preserve">
          <source>BEFORE_APP_SERIALIZED</source>
          <target state="translated">BEFORE_APP_SERIALIZED</target>
        </trans-unit>
        <trans-unit id="2cb09bf3a8782ed3fdbd196ecf0ac3ab8e92b47b" translate="yes" xml:space="preserve">
          <source>Back in the &quot;Heroes&quot; workflow, the app accepts every change to a hero immediately without hesitation or validation.</source>
          <target state="translated">回到 &quot;英雄 &quot;工作流程中,应用程序立即接受对英雄的每一次更改,而不需要犹豫或验证。</target>
        </trans-unit>
        <trans-unit id="5e754f85ea186e7a88cea5b09eb25dfdcf33a1ed" translate="yes" xml:space="preserve">
          <source>Back in the &lt;code&gt;AppComponent&lt;/code&gt;, import the &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; token from the &lt;code&gt;@angular/router&lt;/code&gt; package and the &lt;code&gt;slideInAnimation&lt;/code&gt; from &lt;code&gt;'./animations.ts&lt;/code&gt;.</source>
          <target state="translated">早在 &lt;code&gt;AppComponent&lt;/code&gt; ，导入 &lt;code&gt;&lt;a href=&quot;../api/router/routeroutlet&quot;&gt;RouterOutlet&lt;/a&gt;&lt;/code&gt; 从令牌 &lt;code&gt;@angular/router&lt;/code&gt; 包和 &lt;code&gt;slideInAnimation&lt;/code&gt; 从 &lt;code&gt;'./animations.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d9c883a905731bc3ab1e5b1797dcc17a576c4565" translate="yes" xml:space="preserve">
          <source>Back to top</source>
          <target state="translated">返回顶部</target>
        </trans-unit>
        <trans-unit id="f4290a336cc02b12946c3c89719cd2e7d3a69574" translate="yes" xml:space="preserve">
          <source>Backward compatibility with CSS grid</source>
          <target state="translated">向后兼容CSS网格</target>
        </trans-unit>
        <trans-unit id="f080bd1737639dbd750a023ba99fa346cf943a9f" translate="yes" xml:space="preserve">
          <source>Backward compatibility with Lighthouse</source>
          <target state="translated">向后兼容Lighthouse</target>
        </trans-unit>
        <trans-unit id="3578397cf875eb735f9e4ec895bfefcd6ea0e18c" translate="yes" xml:space="preserve">
          <source>Base URL for protractor to connect to.</source>
          <target state="translated">量角器连接的基本URL。</target>
        </trans-unit>
        <trans-unit id="69488c399a2c06d8cc98c0a654ba1be00ce481f8" translate="yes" xml:space="preserve">
          <source>Base class for Angular Views, provides change detection functionality. A change-detection tree collects all views that are to be checked for changes. Use the methods to add and remove views from the tree, initiate change-detection, and explicitly mark views as &lt;em&gt;dirty&lt;/em&gt;, meaning that they have changed and need to be rerendered.</source>
          <target state="translated">Angular Views的基类，提供更改检测功能。更改检测树收集所有要检查更改的视图。使用这些方法可以在树中添加和删除视图，启动更改检测以及将视图明确标记为&lt;em&gt;脏&lt;/em&gt;，这意味着它们已经更改并且需要重新呈现。</target>
        </trans-unit>
        <trans-unit id="dc5f559c4c1d7d90f2ea8b32a7e1b1c62788bfb3" translate="yes" xml:space="preserve">
          <source>Base class for a factory that can create a component dynamically. Instantiate a factory for a given type of component with &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;resolveComponentFactory()&lt;/a&gt;&lt;/code&gt;. Use the resulting &lt;code&gt;ComponentFactory.create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">可以动态创建组件的工厂的基类。使用 &lt;code&gt;&lt;a href=&quot;componentfactory&quot;&gt;resolveComponentFactory()&lt;/a&gt;&lt;/code&gt; 实例化给定类型的组件的工厂。使用生成的 &lt;code&gt;ComponentFactory.create()&lt;/code&gt; 方法创建该类型的组件。</target>
        </trans-unit>
        <trans-unit id="873cd738027a52aee557333ae0d35f162d826794" translate="yes" xml:space="preserve">
          <source>Base class for a factory that can create a component dynamically. Instantiate a factory for a given type of component with &lt;code&gt;&lt;a href=&quot;core&quot;&gt;resolveComponentFactory()&lt;/a&gt;&lt;/code&gt;. Use the resulting &lt;code&gt;ComponentFactory.create()&lt;/code&gt; method to create a component of that type.</source>
          <target state="translated">可以动态创建组件的工厂的基类。使用 &lt;code&gt;&lt;a href=&quot;core&quot;&gt;resolveComponentFactory()&lt;/a&gt;&lt;/code&gt; 实例化给定类型的组件的工厂。使用生成的 &lt;code&gt;ComponentFactory.create()&lt;/code&gt; 方法创建该类型的组件。</target>
        </trans-unit>
        <trans-unit id="06b6cf30fccd592a4f7ad01aa440cf8322efc7d5" translate="yes" xml:space="preserve">
          <source>Base class for both &lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http/httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http/httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;http/httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; 的基类。</target>
        </trans-unit>
        <trans-unit id="b72bab4ba60f36cf05e4cf503864db197ec58d1a" translate="yes" xml:space="preserve">
          <source>Base class for both &lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;httpresponse&quot;&gt;HttpResponse&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;httpheaderresponse&quot;&gt;HttpHeaderResponse&lt;/a&gt;&lt;/code&gt; 的基类。</target>
        </trans-unit>
        <trans-unit id="d87cd5ed68b6935afddd679162562d7c105b48bf" translate="yes" xml:space="preserve">
          <source>Base class for control directives.</source>
          <target state="translated">控制指令的基类。</target>
        </trans-unit>
        <trans-unit id="7c8bf5beced837666a3fcfff47faf58811883c9f" translate="yes" xml:space="preserve">
          <source>Base class for query metadata.</source>
          <target state="translated">查询元数据的基类。</target>
        </trans-unit>
        <trans-unit id="ae3542392d51807f46bde8565dbb42d8fcc3c899" translate="yes" xml:space="preserve">
          <source>Base for animation data structures.</source>
          <target state="translated">动画数据结构的基础。</target>
        </trans-unit>
        <trans-unit id="332796bde2e92bb79ea8d8b003db847231db277a" translate="yes" xml:space="preserve">
          <source>Base for events the router goes through, as opposed to events tied to a specific route. Fired one time for any given navigation.</source>
          <target state="translated">路由器所经历的事件的基础,而不是与特定路线相关的事件。对于任何给定的导航,只发射一次。</target>
        </trans-unit>
        <trans-unit id="dc0e3cb0c30a7fd999cfb13abd9ca5e0359899bd" translate="yes" xml:space="preserve">
          <source>Base interface for progress events.</source>
          <target state="translated">进度事件的基本接口。</target>
        </trans-unit>
        <trans-unit id="19c642b2c76cffbbba7c48b8234e3965239d1723" translate="yes" xml:space="preserve">
          <source>Base url for the application being built.</source>
          <target state="translated">正在构建的应用程序的基本网址。</target>
        </trans-unit>
        <trans-unit id="c15b8155598bbd0eb4ddda108efeed6d3faaa586" translate="yes" xml:space="preserve">
          <source>Base your decision on your comfort level. Use a flatter structure until there is an obvious value to creating a new folder.</source>
          <target state="translated">根据你的舒适度来决定。使用较扁平的结构,直到有一个明显的价值来创建一个新的文件夹。</target>
        </trans-unit>
        <trans-unit id="457c8d9bebfca77b21842bdcc7ca17bb844fb9ac" translate="yes" xml:space="preserve">
          <source>Based on the &lt;code&gt;--target&lt;/code&gt;, TypeScript adds &lt;em&gt;additional&lt;/em&gt; ambient declarations like &lt;code&gt;Promise&lt;/code&gt; if the target is &lt;code&gt;es6&lt;/code&gt;.</source>
          <target state="translated">如果目标是 &lt;code&gt;es6&lt;/code&gt; ，TypeScript 基于 &lt;code&gt;--target&lt;/code&gt; 添加&lt;em&gt;其他&lt;/em&gt;环境声明，例如 &lt;code&gt;Promise&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes" xml:space="preserve">
          <source>Basic Example</source>
          <target state="translated">基本示例</target>
        </trans-unit>
        <trans-unit id="04e8ea10d9114654af829cd500f25ab6581dd803" translate="yes" xml:space="preserve">
          <source>Basic deployment to a remote server</source>
          <target state="translated">基本部署到远程服务器</target>
        </trans-unit>
        <trans-unit id="653ae9d4bc08db3838f9c6c61951682ba7657958" translate="yes" xml:space="preserve">
          <source>Basic usage and terms</source>
          <target state="translated">基本用法和术语</target>
        </trans-unit>
        <trans-unit id="189ceeabec801d69e58e27b3296832fd339cfd5c" translate="yes" xml:space="preserve">
          <source>Basic workflow</source>
          <target state="translated">基本工作流程</target>
        </trans-unit>
        <trans-unit id="21db9140fd5c55af9b7daf2fcc86cdbecd519ae0" translate="yes" xml:space="preserve">
          <source>Basics of two-way binding</source>
          <target state="translated">双向绑定的基础知识</target>
        </trans-unit>
        <trans-unit id="1276e18d03ecc54657c7ab3b6a5e107e8237506b" translate="yes" xml:space="preserve">
          <source>Basics wrap up</source>
          <target state="translated">基础知识总结</target>
        </trans-unit>
        <trans-unit id="381c08b859c05a623a77795b6faef27c11b8be2b" translate="yes" xml:space="preserve">
          <source>Be explicit. Implement the &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; interface with a type of &lt;code&gt;Crisis&lt;/code&gt;.</source>
          <target state="translated">要明确。用 &lt;code&gt;Crisis&lt;/code&gt; 类型实现 &lt;code&gt;&lt;a href=&quot;../api/router/resolve&quot;&gt;Resolve&lt;/a&gt;&lt;/code&gt; 接口。</target>
        </trans-unit>
        <trans-unit id="1bf79b7186da202dc35b6c9fdce5e4c57c7d1a68" translate="yes" xml:space="preserve">
          <source>Be sure to check that the context exists and throw the appropriate error.</source>
          <target state="translated">一定要检查上下文是否存在,并抛出相应的错误。</target>
        </trans-unit>
        <trans-unit id="795a90d1a8ee5cbdff797b42bb7461a0906585d9" translate="yes" xml:space="preserve">
          <source>Be sure to create module components as children of this module's top component.</source>
          <target state="translated">请务必将模块组件创建为本模块顶部组件的子组件。</target>
        </trans-unit>
        <trans-unit id="7d5bf806d7d027af1dddb36dc70adddb33b479b7" translate="yes" xml:space="preserve">
          <source>Be sure to define custom ids that are unique. If you use the same id for two different text messages, only the first one is extracted, and its translation is used in place of both original text messages.</source>
          <target state="translated">确保定义的自定义id是唯一的。如果你对两条不同的短信使用同一个id,只有第一条被提取出来,它的翻译会被用来代替两条原始短信。</target>
        </trans-unit>
        <trans-unit id="3cb44eeb12ea39170bc603c6fb44cf6110a2d9a2" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;HeroDetailComponent&lt;/code&gt; is an Angular component, you must also add it to the &lt;code&gt;declarations&lt;/code&gt; in the &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">因为 &lt;code&gt;HeroDetailComponent&lt;/code&gt; 是Angular组件，所以您还必须将其添加到 &lt;code&gt;AppModule&lt;/code&gt; 的 &lt;code&gt;declarations&lt;/code&gt; 中。</target>
        </trans-unit>
        <trans-unit id="71459b0877ea037c4247f79f200b0627331cfde5" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;ng serve&lt;/code&gt; does not work with service workers, you must use a separate HTTP server to test your project locally. You can use any HTTP server. The example below uses the &lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;http-server&lt;/a&gt; package from npm. To reduce the possibility of conflicts and avoid serving stale content, test on a dedicated port and disable caching.</source>
          <target state="translated">由于 &lt;code&gt;ng serve&lt;/code&gt; 不适用于服务人员，因此您必须使用单独的HTTP服务器在本地测试您的项目。您可以使用任何HTTP服务器。下面的示例使用npm中的&lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;http-server&lt;/a&gt;软件包。为了减少冲突的可能性并避免提供过时的内容，请在专用端口上进行测试并禁用缓存。</target>
        </trans-unit>
        <trans-unit id="342f36e72319b97e67057da06eb0202d32290ccf" translate="yes" xml:space="preserve">
          <source>Because Angular applications are mostly written in TypeScript, you will typically know when a variable is an observable. Although the Angular framework does not enforce a naming convention for observables, you will often see observables named with a trailing &amp;ldquo;$&amp;rdquo; sign.</source>
          <target state="translated">由于Angular应用程序大多数是用TypeScript编写的，因此通常您会知道变量何时是可观察的。尽管Angular框架没有对可观察对象强制执行命名约定，但是您经常会看到可观察对象以尾随&amp;ldquo; $&amp;rdquo;符号命名。</target>
        </trans-unit>
        <trans-unit id="80706cd8d34e9df3aebbbfc71eb5c40862507ed2" translate="yes" xml:space="preserve">
          <source>Because Bazel constructs a graph out of your targets, you can find lots of useful information.</source>
          <target state="translated">因为Bazel从你的目标中构建了一个图形,你可以找到很多有用的信息。</target>
        </trans-unit>
        <trans-unit id="3244368a86d6561aba583792cc03eff7eff140ec" translate="yes" xml:space="preserve">
          <source>Because a Universal app doesn't execute in the browser, some of the browser APIs and capabilities may be missing on the server.</source>
          <target state="translated">因为通用应用程序不在浏览器中执行,所以服务器上可能缺少一些浏览器的API和功能。</target>
        </trans-unit>
        <trans-unit id="1f4be1daa693b107a5635c119a5bcab95b440545" translate="yes" xml:space="preserve">
          <source>Because directives and pipes appear in component templates, the Angular compiler incorporates them into compiled component code too.</source>
          <target state="translated">因为指令和管道出现在组件模板中,所以Angular编译器将它们也纳入到编译后的组件代码中。</target>
        </trans-unit>
        <trans-unit id="f73de75658f57ce63ea356bf33e3b7801f62fafb" translate="yes" xml:space="preserve">
          <source>Because each service method returns a different kind of &lt;code&gt;Observable&lt;/code&gt; result, &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; takes a type parameter so it can return the safe value as the type that the app expects.</source>
          <target state="translated">因为每种服务方法都返回不同类型的 &lt;code&gt;Observable&lt;/code&gt; 结果， &lt;code&gt;&lt;a href=&quot;../api/core/errorhandler#handleError&quot;&gt;handleError()&lt;/a&gt;&lt;/code&gt; 采用类型参数，因此它可以返回安全值作为应用程序期望的类型。</target>
        </trans-unit>
        <trans-unit id="46939d4d0ba537e542bde8f87ab09af4cea60a09" translate="yes" xml:space="preserve">
          <source>Because interceptors are (optional) dependencies of the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; service, you must provide them in the same injector (or a parent of the injector) that provides &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;. Interceptors provided &lt;em&gt;after&lt;/em&gt; DI creates the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; are ignored.</source>
          <target state="translated">因为拦截器是（可选）的依赖 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 的服务，你必须在同一注射器（或注射器的父母），提供为他们提供 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 。DI创建 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; &lt;em&gt;之后&lt;/em&gt;提供的拦截器将被忽略。</target>
        </trans-unit>
        <trans-unit id="ebedc3d0a5c7a3fec99ebbc8e460b97a0d2a4cf2" translate="yes" xml:space="preserve">
          <source>Because interceptors can process the request and response &lt;em&gt;together&lt;/em&gt;, they can do things like time and log an entire HTTP operation.</source>
          <target state="translated">因为拦截器可以处理该请求和响应&lt;em&gt;一起&lt;/em&gt;，它们可以做的事情，如时间和记录一个完整的HTTP操作。</target>
        </trans-unit>
        <trans-unit id="5d9990b0c02c63922de8ac7eb597a4dbd80a3bf1" translate="yes" xml:space="preserve">
          <source>Because many app components need the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt;, the developer created a &lt;code&gt;SharedModule&lt;/code&gt; to combine these and other frequently requested parts.</source>
          <target state="translated">因为许多应用程序组件都需要 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/common/titlecasepipe&quot;&gt;TitleCasePipe&lt;/a&gt;&lt;/code&gt; ，所以开发人员创建了一个 &lt;code&gt;SharedModule&lt;/code&gt; 来组合这些组件和其他经常需要的组件。</target>
        </trans-unit>
        <trans-unit id="7309f02327abcb02906eb27e1961d1e11ff57034" translate="yes" xml:space="preserve">
          <source>Because much AngularJS code is in JavaScript, JavaScript code is shown in the AngularJS column. The Angular code is shown using TypeScript.</source>
          <target state="translated">因为AngularJS的很多代码都是用JavaScript编写的,所以JavaScript代码显示在AngularJS一栏。Angular代码使用TypeScript显示。</target>
        </trans-unit>
        <trans-unit id="f63ecad480eaacde83f906bac0c6143c6ea2184e" translate="yes" xml:space="preserve">
          <source>Because observables produce values asynchronously, try/catch will not effectively catch errors. Instead, you handle errors by specifying an &lt;code&gt;error&lt;/code&gt; callback on the observer. Producing an error also causes the observable to clean up subscriptions and stop producing values. An observable can either produce values (calling the &lt;code&gt;next&lt;/code&gt; callback), or it can complete, calling either the &lt;code&gt;complete&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt; callback.</source>
          <target state="translated">由于可观察变量异步生成值，因此try / catch不会有效地捕获错误。相反，您可以通过在观察者上指定 &lt;code&gt;error&lt;/code&gt; 回调来处理错误。产生错误还导致可观察对象清除订阅并停止产生值。可观察对象可以产生值（调用 &lt;code&gt;next&lt;/code&gt; 回调），也可以完成，调用 &lt;code&gt;complete&lt;/code&gt; 或 &lt;code&gt;error&lt;/code&gt; 回调。</target>
        </trans-unit>
        <trans-unit id="7b1058fd96afe9d690d0969b15ba453bf7c67528" translate="yes" xml:space="preserve">
          <source>Because of these advantages, observables are used extensively within Angular, and are recommended for app development as well.</source>
          <target state="translated">正因为这些优点,observables在Angular内被广泛使用,也推荐用于app开发。</target>
        </trans-unit>
        <trans-unit id="a3b6660bf41bb567678e15b0038461e5765da5cb" translate="yes" xml:space="preserve">
          <source>Because of these many obstacles, you should test DOM interaction with unit testing techniques as much as possible.</source>
          <target state="translated">因为有这么多的障碍,你应该尽可能的用单元测试技术来测试DOM交互。</target>
        </trans-unit>
        <trans-unit id="772276ca842c13128ca4d0e6c6d501e1f891a5e6" translate="yes" xml:space="preserve">
          <source>Because template-driven forms are in their own module, you need to add the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; to the array of &lt;code&gt;imports&lt;/code&gt; for the application module before you can use forms.</source>
          <target state="translated">由于模板驱动的表单位于它们自己的模块中，因此您需要 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 添加到应用程序模块的 &lt;code&gt;imports&lt;/code&gt; 数组中，然后才能使用表单。</target>
        </trans-unit>
        <trans-unit id="f75c667b11d2d8cfaed8c93263c0b980c8478dec" translate="yes" xml:space="preserve">
          <source>Because the &lt;a href=&quot;testing#dashboard-hero-component&quot;&gt;template&lt;/a&gt; passes the hero name through the Angular &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt;, the test must match the element value with the upper-cased name.</source>
          <target state="translated">因为&lt;a href=&quot;testing#dashboard-hero-component&quot;&gt;模板&lt;/a&gt;通过Angular &lt;code&gt;&lt;a href=&quot;../api/common/uppercasepipe&quot;&gt;UpperCasePipe&lt;/a&gt;&lt;/code&gt; 传递英雄名称，所以测试必须将元素值与大写名称匹配。</target>
        </trans-unit>
        <trans-unit id="bb19305312e2b1bf07f79171f6856a936e20b002" translate="yes" xml:space="preserve">
          <source>Because the component template uses two-way data binding for the &lt;code&gt;favoriteColor&lt;/code&gt; property, the &lt;code&gt;favoriteColor&lt;/code&gt; property in the component is updated to the value emitted by the &lt;code&gt;ngModelChange&lt;/code&gt; event (&lt;em&gt;Blue&lt;/em&gt;).</source>
          <target state="translated">因为组件模板使用双向数据绑定来设置 &lt;code&gt;favoriteColor&lt;/code&gt; 属性，所以组件中的 &lt;code&gt;favoriteColor&lt;/code&gt; 属性将更新为 &lt;code&gt;ngModelChange&lt;/code&gt; 事件（&lt;em&gt;Blue&lt;/em&gt;）发出的值。</target>
        </trans-unit>
        <trans-unit id="3559bd87675d83ca7d84212b131b57dd2128c250" translate="yes" xml:space="preserve">
          <source>Because the custom id is the same, both of the elements in the resulting translation contain the same text, &lt;code&gt;Bonjour&lt;/code&gt;:</source>
          <target state="translated">由于自定义ID相同，因此结果翻译中的两个元素都包含相同的文本 &lt;code&gt;Bonjour&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ac60673f94b3d3376ab5d403b236e2c865d35a46" translate="yes" xml:space="preserve">
          <source>Because the new module is meant to be lazy-loaded, the command does NOT add a reference for the new feature module to the root application's module file, &lt;code&gt;app.module.ts&lt;/code&gt;. Instead, it adds the declared route, &lt;code&gt;customer-list&lt;/code&gt; to the &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; array declared in the module provided as the &lt;code&gt;--module&lt;/code&gt; option.</source>
          <target state="translated">因为新模块打算被延迟加载，所以该命令不会将新功能模块的引用添加到根应用程序的模块文件 &lt;code&gt;app.module.ts&lt;/code&gt; 中。而是将声明的路由， &lt;code&gt;customer-list&lt;/code&gt; 到以 &lt;code&gt;--module&lt;/code&gt; 选项提供的模块中声明的 &lt;code&gt;&lt;a href=&quot;../api/router/routes&quot;&gt;Routes&lt;/a&gt;&lt;/code&gt; 数组中。</target>
        </trans-unit>
        <trans-unit id="8f72bc222c5187cbceca225395ab2edb41eb5670" translate="yes" xml:space="preserve">
          <source>Because the sample tests for this guide are designed to run only in a browser, a &lt;code&gt;nativeElement&lt;/code&gt; in these tests is always an &lt;code&gt;HTMLElement&lt;/code&gt; whose familiar methods and properties you can explore within a test.</source>
          <target state="translated">由于本指南的样本测试旨在仅在浏览器中运行， &lt;code&gt;nativeElement&lt;/code&gt; 这些测试中的nativeElement始终是 &lt;code&gt;HTMLElement&lt;/code&gt; ，您可以在测试中探索其熟悉的方法和属性。</target>
        </trans-unit>
        <trans-unit id="5ba2132d051625545e383f4b78d7ded919141bef" translate="yes" xml:space="preserve">
          <source>Because the service method returns an &lt;code&gt;Observable&lt;/code&gt; of configuration data, the component &lt;strong&gt;subscribes&lt;/strong&gt; to the method's return value. The subscription callback copies the data fields into the component's &lt;code&gt;&lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; object, which is data-bound in the component template for display.</source>
          <target state="translated">由于服务方法返回配置数据的 &lt;code&gt;Observable&lt;/code&gt; ，因此组件&lt;strong&gt;预订&lt;/strong&gt;该方法的返回值。订阅回调将数据字段复制到组件的 &lt;code&gt;&lt;a href=&quot;../api/router/router#config&quot;&gt;config&lt;/a&gt;&lt;/code&gt; 对象中，该对象在组件模板中是数据绑定的以便显示。</target>
        </trans-unit>
        <trans-unit id="8460f3c5a0030447eadc8c95b36ae1865a187e73" translate="yes" xml:space="preserve">
          <source>Because the spy result returns synchronously, the &lt;code&gt;getQuote()&lt;/code&gt; method updates the message on screen immediately &lt;em&gt;after&lt;/em&gt; the first change detection cycle during which Angular calls &lt;code&gt;ngOnInit&lt;/code&gt;.</source>
          <target state="translated">由于间谍结果是同步返回的，因此在Angular调用 &lt;code&gt;ngOnInit&lt;/code&gt; 的第一个更改检测周期&lt;em&gt;之后&lt;/em&gt;， &lt;code&gt;getQuote()&lt;/code&gt; 方法立即更新屏幕上的消息。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ae3ebebb2c33ca11b4aadf44642620433d674fef" translate="yes" xml:space="preserve">
          <source>Because we use routing, we can easily recognize the three types of requests and handle them differently.</source>
          <target state="translated">因为我们使用了路由,所以我们可以很容易地识别三种类型的请求,并进行不同的处理。</target>
        </trans-unit>
        <trans-unit id="7c1e35fdf2c95e740d747fb6e8d2cb1e5ce349b8" translate="yes" xml:space="preserve">
          <source>Before a view is displayed, Angular evaluates the directives and resolves the binding syntax in the template to modify the HTML elements and the DOM, according to your program data and logic. Angular supports &lt;em&gt;two-way data binding&lt;/em&gt;, meaning that changes in the DOM, such as user choices, are also reflected in your program data.</source>
          <target state="translated">在显示视图之前，Angular根据您的程序数据和逻辑评估指令并解析模板中的绑定语法，以修改HTML元素和DOM。Angular支持&lt;em&gt;双向数据绑定&lt;/em&gt;，这意味着DOM中的更改（例如用户选择）也将反映在程序数据中。</target>
        </trans-unit>
        <trans-unit id="56a2690d6d4ee87e844d5b45b79d0937210c67e9" translate="yes" xml:space="preserve">
          <source>Before discussing how you can use &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; to create hybrid apps, there are things that you can do to ease the upgrade process even before you begin upgrading. Because the steps are the same regardless of how you upgrade, refer to the &lt;a href=&quot;upgrade#preparation&quot;&gt;Preparation&lt;/a&gt; section of &lt;a href=&quot;upgrade&quot;&gt;Upgrading from AngularJS&lt;/a&gt;.</source>
          <target state="translated">在讨论如何使用 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 创建混合应用程序之前，您可以做一些事情来简化升级过程，甚至可以在开始升级之前进行。因为无论升级方式如何，步骤都是相同的，请参阅&lt;a href=&quot;upgrade&quot;&gt;从AngularJS升级&lt;/a&gt;的&lt;a href=&quot;upgrade#preparation&quot;&gt;准备&lt;/a&gt;部分。</target>
        </trans-unit>
        <trans-unit id="2bd6921a15a4cc4213b02c123a7b7fdf88397ce4" translate="yes" xml:space="preserve">
          <source>Before doing that, understand the difference between pure and impure, starting with a pure pipe.</source>
          <target state="translated">在做这些之前,先了解一下纯与不纯的区别,从纯管开始。</target>
        </trans-unit>
        <trans-unit id="938bfb0cc4fb4eee22c10427c31d0ba174568291" translate="yes" xml:space="preserve">
          <source>Before fully deploying your application, you can test the process, build configuration, and deployed behavior by using one of these interim techniques.</source>
          <target state="translated">在完全部署您的应用程序之前,您可以通过使用这些临时技术之一来测试流程、构建配置和部署行为。</target>
        </trans-unit>
        <trans-unit id="31ade65586fac3f6c67ae72205b4dfe90fd2d49b" translate="yes" xml:space="preserve">
          <source>Before updating the &lt;code&gt;app-routing.module.ts&lt;/code&gt;, you'll need to consider an important rule. Currently, our empty path route redirects to &lt;code&gt;/heroes&lt;/code&gt;, which redirects to &lt;code&gt;/superheroes&lt;/code&gt;. This &lt;em&gt;won't&lt;/em&gt; work and is by design as the &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; handles redirects once at each level of routing configuration. This prevents chaining of redirects, which can lead to endless redirect loops.</source>
          <target state="translated">在更新 &lt;code&gt;app-routing.module.ts&lt;/code&gt; 之前，您需要考虑一个重要规则。当前，我们的空路径路由重定向到 &lt;code&gt;/heroes&lt;/code&gt; ，后者又重定向到 &lt;code&gt;/superheroes&lt;/code&gt; 。这&lt;em&gt;将不&lt;/em&gt;工作，是由设计的 &lt;code&gt;&lt;a href=&quot;../api/router/router&quot;&gt;Router&lt;/a&gt;&lt;/code&gt; 处理重定向在一次路由配置的每个级别。这样可以防止重定向链接，从而可能导致无限的重定向循环。</target>
        </trans-unit>
        <trans-unit id="2adebd0eb41e8f1c544074f8aa1193608616af7e" translate="yes" xml:space="preserve">
          <source>Before using the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; directive in a two-way data binding, you must import the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; and add it to the NgModule's &lt;code&gt;imports&lt;/code&gt; list. Learn more about the &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; in &lt;a href=&quot;forms#ngModel&quot;&gt;Forms&lt;/a&gt;.</source>
          <target state="translated">在双向数据绑定中使用 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 指令之前，必须导入 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 并将其添加到NgModule的 &lt;code&gt;imports&lt;/code&gt; 列表中。了解更多关于 &lt;code&gt;&lt;a href=&quot;../api/forms/formsmodule&quot;&gt;FormsModule&lt;/a&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 的&lt;a href=&quot;forms#ngModel&quot;&gt;形式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="974b03fe0fa1d7a6ed31bea40eba5437fd1ccda1" translate="yes" xml:space="preserve">
          <source>Before you begin, make sure your development environment includes &lt;code&gt;Node.js&amp;reg;&lt;/code&gt; and an npm package manager.</source>
          <target state="translated">在开始之前，请确保您的开发环境包括 &lt;code&gt;Node.js&amp;reg;&lt;/code&gt; 和npm软件包管理器。</target>
        </trans-unit>
        <trans-unit id="919d29e47188004264e245ab74f85d9fecbc4581" translate="yes" xml:space="preserve">
          <source>Before you can add components you have to define an anchor point to tell Angular where to insert components.</source>
          <target state="translated">在你添加组件之前,你必须定义一个锚点来告诉Angular在哪里插入组件。</target>
        </trans-unit>
        <trans-unit id="b7480739e4d2bfb1b2c1291af6d204a69a044469" translate="yes" xml:space="preserve">
          <source>Before you can use Angular's HTTP client, you must set up your app to use &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">在使用Angular的HTTP客户端之前，您必须将应用设置为使用 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="72fa1b5683e2296972d6d0e97ba335789c635353" translate="yes" xml:space="preserve">
          <source>Before you can use the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt;, you need to import the Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt;. Most apps do so in the root &lt;code&gt;AppModule&lt;/code&gt;.</source>
          <target state="translated">在使用 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;&lt;/code&gt; 之前，您需要导入Angular &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclientmodule&quot;&gt;HttpClientModule&lt;/a&gt;&lt;/code&gt; 。大多数应用程序都在根 &lt;code&gt;AppModule&lt;/code&gt; 中执行此操作。</target>
        </trans-unit>
        <trans-unit id="842beb51ca9c5417a27f472386d0e0d52dcc074f" translate="yes" xml:space="preserve">
          <source>Before:</source>
          <target state="translated">Before:</target>
        </trans-unit>
        <trans-unit id="ce372ed4595d7ee7562947bc03d901bf1fa43b3a" translate="yes" xml:space="preserve">
          <source>Begin a main section heading with the markdown &lt;code&gt;##&lt;/code&gt; characters. Alternatively, you can write the equivalent &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; HTML tag.</source>
          <target state="translated">以降价 &lt;code&gt;##&lt;/code&gt; 字符开头的主要部分标题。或者，您可以编写等效的 &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; HTML标签。</target>
        </trans-unit>
        <trans-unit id="77b54c71ffe46696eb1cabec8c578b7430387d98" translate="yes" xml:space="preserve">
          <source>Begin a secondary heading with the markdown &lt;code&gt;###&lt;/code&gt; characters. Alternatively, you can write the equivalent &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; HTML tag.</source>
          <target state="translated">以降价 &lt;code&gt;###&lt;/code&gt; 字符开始辅助标题。或者，您可以编写等效的 &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; HTML标签。</target>
        </trans-unit>
        <trans-unit id="68ffa95f663f190607f3c471b59d100f255b0429" translate="yes" xml:space="preserve">
          <source>Begin by adding &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; to the list of imported symbols.</source>
          <target state="translated">首先将 &lt;code&gt;&lt;a href=&quot;../api/core/hostlistener&quot;&gt;HostListener&lt;/a&gt;&lt;/code&gt; 添加到导入符号的列表中。</target>
        </trans-unit>
        <trans-unit id="8d5d9a6ea323fdd57d9e1215bac5a83bb80d88b5" translate="yes" xml:space="preserve">
          <source>Begin by adding &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; to the list of symbols imported from &lt;code&gt;@angular/core&lt;/code&gt;.</source>
          <target state="translated">首先将 &lt;code&gt;&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 添加到从 &lt;code&gt;@angular/core&lt;/code&gt; 导入的符号列表中。</target>
        </trans-unit>
        <trans-unit id="c07371f1cc4e4d389c0f8860f26b0137449c4516" translate="yes" xml:space="preserve">
          <source>Begin by imitating the heroes feature:</source>
          <target state="translated">首先要模仿英雄的特点。</target>
        </trans-unit>
        <trans-unit id="eee54c68da088a30ccd7f437a9e53e1b0bb1026c" translate="yes" xml:space="preserve">
          <source>Begin by installing TypeScript to the project.</source>
          <target state="translated">首先将TypeScript安装到项目中。</target>
        </trans-unit>
        <trans-unit id="c985c7dda4282902d2451041dfd2a01b559349f8" translate="yes" xml:space="preserve">
          <source>Begin by putting re-usable, preparatory code in a &lt;em&gt;setup&lt;/em&gt; function instead of &lt;code&gt;beforeEach()&lt;/code&gt;.</source>
          <target state="translated">首先将可重用的预备代码而不是 &lt;code&gt;beforeEach()&lt;/code&gt; 放入&lt;em&gt;设置&lt;/em&gt;函数中。</target>
        </trans-unit>
        <trans-unit id="9dc6969f62da20a6afb1f322ebadb8b41abaac3c" translate="yes" xml:space="preserve">
          <source>Begin with a simple version of the app that navigates between two empty views.</source>
          <target state="translated">从一个简单版本的应用程序开始,在两个空视图之间导航。</target>
        </trans-unit>
        <trans-unit id="d6548854aa27000232e1d1aba5f49a3acb40b7ae" translate="yes" xml:space="preserve">
          <source>Begin with the first form of data binding&amp;mdash;interpolation&amp;mdash;to see how much richer template HTML can be.</source>
          <target state="translated">首先从数据绑定的第一种形式（插值）开始，以了解HTML可以具有多少更丰富的模板。</target>
        </trans-unit>
        <trans-unit id="592d6d7c575706de86d4d071fdf75790be29837c" translate="yes" xml:space="preserve">
          <source>Beginning with Angular 6.0, the preferred way to create a singleton service is to set &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;root&lt;/code&gt; on the service's &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; decorator. This tells Angular to provide the service in the application root.</source>
          <target state="translated">与角6.0开始，创建单独服务的首选方法是设置 &lt;code&gt;&lt;a href=&quot;../api/core/injectable#providedIn&quot;&gt;providedIn&lt;/a&gt;&lt;/code&gt; 到 &lt;code&gt;root&lt;/code&gt; 上的服务是 &lt;code&gt;@&lt;a href=&quot;../api/core/injectable&quot;&gt;Injectable&lt;/a&gt;()&lt;/code&gt; 装饰。这告诉Angular在应用程序根目录中提供服务。</target>
        </trans-unit>
        <trans-unit id="3b66259b5d10f5e4dfd17260980e9448c27c8990" translate="yes" xml:space="preserve">
          <source>Behind the scenes, Angular creates a new control for each input element, provided you have set up a &lt;code&gt;name&lt;/code&gt; attribute and two-way binding for each input.</source>
          <target state="translated">在幕后，只要为每个输入设置了 &lt;code&gt;name&lt;/code&gt; 属性和双向绑定，Angular就会为每个输入元素创建一个新控件。</target>
        </trans-unit>
        <trans-unit id="f1577aef7d5c90af9c045dcc7b86cbeeacf9fc65" translate="yes" xml:space="preserve">
          <source>Behind the scenes, Angular sets the &lt;code&gt;logger&lt;/code&gt; parameter to the full service registered under the &lt;code&gt;LoggingService&lt;/code&gt; token, which happens to be the &lt;code&gt;DateLoggerService&lt;/code&gt; instance that was &lt;a href=&quot;dependency-injection-in-action#useclass&quot;&gt;provided above&lt;/a&gt;.</source>
          <target state="translated">在幕后，Angular将 &lt;code&gt;logger&lt;/code&gt; 参数设置为在 &lt;code&gt;LoggingService&lt;/code&gt; 令牌下注册的完整服务，该服务恰好是&lt;a href=&quot;dependency-injection-in-action#useclass&quot;&gt;上面提供&lt;/a&gt;的 &lt;code&gt;DateLoggerService&lt;/code&gt; 实例。</target>
        </trans-unit>
        <trans-unit id="e82af82e7e882e82e6f17fc0109858d570cb6fa5" translate="yes" xml:space="preserve">
          <source>Behind the scenes, each component sets up its own injector with zero, one, or more providers defined for that component itself.</source>
          <target state="translated">在幕后,每个组件都设置了自己的注入器,并为该组件本身定义了零、一个或多个提供者。</target>
        </trans-unit>
        <trans-unit id="f1b2830245d3e2ff98c8e67a5f1a960600c64153" translate="yes" xml:space="preserve">
          <source>Behind this behavior is the router's &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; guard. The guard gives you a chance to clean-up or ask the user's permission before navigating away from the current view.</source>
          <target state="translated">此行为的背后是路由器的 &lt;code&gt;&lt;a href=&quot;../api/router/candeactivate&quot;&gt;CanDeactivate&lt;/a&gt;&lt;/code&gt; 保护。防护罩使您有机会在离开当前视图之前进行清理或征求用户的许可。</target>
        </trans-unit>
        <trans-unit id="3a5f33c6e631fd4b9b6828f4a98022745cdde1db" translate="yes" xml:space="preserve">
          <source>Below is the &quot;Little Tour of Heroes&quot; component.</source>
          <target state="translated">下面是 &quot;英雄小游 &quot;组件。</target>
        </trans-unit>
        <trans-unit id="a6d54f04eb5f64dea38939b332ee485453c0ed14" translate="yes" xml:space="preserve">
          <source>Below is the content of our example &lt;code&gt;select&lt;/code&gt; ICU expression in the component template:</source>
          <target state="translated">下面是我们的榜样的内容 &lt;code&gt;select&lt;/code&gt; 分量模板ICU表达：</target>
        </trans-unit>
        <trans-unit id="4e0f6ab73f39d0ec2a1809d528963c447a13f3b6" translate="yes" xml:space="preserve">
          <source>Below it add an HTML unordered list (&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;)</source>
          <target state="translated">在它下面添加一个HTML无序列表（ &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b84a1be2c29811cc7905b853f73dea56408133ea" translate="yes" xml:space="preserve">
          <source>Below the &lt;code&gt;clearCart()&lt;/code&gt; method, define a new &lt;code&gt;getShippingPrices()&lt;/code&gt; method that uses the &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;#get()&lt;/code&gt; method to retrieve the shipping data (types and prices).</source>
          <target state="translated">在 &lt;code&gt;clearCart()&lt;/code&gt; 方法下面，定义一个新的 &lt;code&gt;getShippingPrices()&lt;/code&gt; 方法，该方法使用 &lt;code&gt;&lt;a href=&quot;../api/common/http/httpclient&quot;&gt;HttpClient&lt;/a&gt;#get()&lt;/code&gt; 方法检索运输数据（类型和价格）。</target>
        </trans-unit>
        <trans-unit id="8cc0379f41ff0ba0e46288baf9de039b96b071ca" translate="yes" xml:space="preserve">
          <source>Besides their different API, there are two important internal differences between &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; that affect the behavior of hybrid applications:</source>
          <target state="translated">除了它们不同的API外， &lt;code&gt;&lt;a href=&quot;downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 和 &lt;code&gt;&lt;a href=&quot;upgrademodule&quot;&gt;UpgradeModule&lt;/a&gt;&lt;/code&gt; 它们会影响混合应用程序的行为：</target>
        </trans-unit>
        <trans-unit id="9faf878af4c349c49c9509b240e538390447757b" translate="yes" xml:space="preserve">
          <source>Besides using the CLI on the command line, you can also use an interactive development environment like &lt;a href=&quot;https://angularconsole.com/&quot;&gt;Angular Console&lt;/a&gt;, or manipulate files directly in the app's source folder and configuration files.</source>
          <target state="translated">除了在命令行上使用CLI之外，您还可以使用交互式开发环境（例如&lt;a href=&quot;https://angularconsole.com/&quot;&gt;Angular Console）&lt;/a&gt;，或直接在应用程序的源文件夹和配置文件中操作文件。</target>
        </trans-unit>
        <trans-unit id="eb8de9ce8757ee3c542141ac80ff3b33dc04edff" translate="yes" xml:space="preserve">
          <source>Best practices</source>
          <target state="translated">最佳做法</target>
        </trans-unit>
        <trans-unit id="82ef826d9fb859d576a0907d18d1a66926bd8669" translate="yes" xml:space="preserve">
          <source>Beyond that, you may interleave the two frameworks. You always cross the boundary between the two frameworks by one of two ways:</source>
          <target state="translated">除此之外,你可以将这两个框架交错使用。你总是通过两种方式之一跨越两个框架之间的边界。</target>
        </trans-unit>
        <trans-unit id="16d85a9f9536bdb143337018c722df8b0f3c81b3" translate="yes" xml:space="preserve">
          <source>Bind component methods to user events, like keystrokes and clicks.</source>
          <target state="translated">将组件方法绑定到用户事件上,如击键和点击。</target>
        </trans-unit>
        <trans-unit id="5e9e55d218847019581b70053a614ddd2a5a9018" translate="yes" xml:space="preserve">
          <source>Bind data properties to each form control using the &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; two-way data-binding syntax.</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/forms/ngmodel&quot;&gt;ngModel&lt;/a&gt;&lt;/code&gt; 将数据属性绑定到每个表单控件双向数据绑定语法。</target>
        </trans-unit>
        <trans-unit id="5f1cd87627492a075b5e1b02e1f2c3ff5fdc07ba" translate="yes" xml:space="preserve">
          <source>Bind the &lt;code&gt;HeroesComponent.selectedHero&lt;/code&gt; to the element's &lt;code&gt;hero&lt;/code&gt; property like this.</source>
          <target state="translated">将 &lt;code&gt;HeroesComponent.selectedHero&lt;/code&gt; 绑定到元素的 &lt;code&gt;hero&lt;/code&gt; 像这样属性。</target>
        </trans-unit>
        <trans-unit id="b2792d4ffa16115ba7c001505491305b2d5c88f6" translate="yes" xml:space="preserve">
          <source>Bind to a second property</source>
          <target state="translated">绑定到第二个属性</target>
        </trans-unit>
        <trans-unit id="697a78adb0268f346f175f0419a81cb28cea06a1" translate="yes" xml:space="preserve">
          <source>Bind to an &lt;code&gt;@Input&lt;/code&gt; alias</source>
          <target state="translated">绑定到 &lt;code&gt;@Input&lt;/code&gt; 别名</target>
        </trans-unit>
        <trans-unit id="5662c554f6ba4f36018195821022c704fa19317c" translate="yes" xml:space="preserve">
          <source>Bind to the &lt;code&gt;MessageService&lt;/code&gt;</source>
          <target state="translated">绑定到 &lt;code&gt;MessageService&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9af2bb479915615a2ff7e67d9debd7fe3d47d969" translate="yes" xml:space="preserve">
          <source>Bind to the &lt;code&gt;click&lt;/code&gt; event</source>
          <target state="translated">绑定到 &lt;code&gt;click&lt;/code&gt; 事件</target>
        </trans-unit>
        <trans-unit id="21c9dd5766d21c48bc079c417359f429b538c0e9" translate="yes" xml:space="preserve">
          <source>Bind to the &lt;code&gt;hidden&lt;/code&gt; property</source>
          <target state="translated">绑定到 &lt;code&gt;hidden&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="f2a12bb43f4f20a3308c6e7f43110abc164b3cbe" translate="yes" xml:space="preserve">
          <source>Bind to the &lt;code&gt;href&lt;/code&gt; property</source>
          <target state="translated">绑定到 &lt;code&gt;href&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="c50c22644a97886a75576f3ad55786f5139b6a3f" translate="yes" xml:space="preserve">
          <source>Bind to the &lt;code&gt;src&lt;/code&gt; property</source>
          <target state="translated">绑定到 &lt;code&gt;src&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="0c74318c4ebf86394efdd83afd59fbdcebcf11b6" translate="yes" xml:space="preserve">
          <source>Binding definition</source>
          <target state="translated">装订定义</target>
        </trans-unit>
        <trans-unit id="5839396aa9317f9099934df61297930a2f609f5a" translate="yes" xml:space="preserve">
          <source>Binding expressions in the template that refer to properties of &lt;code&gt;selectedHero&lt;/code&gt;&amp;mdash;expressions like &lt;code&gt;{{selectedHero.name}}&lt;/code&gt;&amp;mdash;&lt;em&gt;must fail&lt;/em&gt; because there is no selected hero.</source>
          <target state="translated">结合在模板中引用的性能表现 &lt;code&gt;selectedHero&lt;/code&gt; 像-expressions &lt;code&gt;{{selectedHero.name}}&lt;/code&gt; - &lt;em&gt;一定会失败&lt;/em&gt;，因为没有选择英雄。</target>
        </trans-unit>
        <trans-unit id="1893c99928000b73c034f5d13d20f170b63a568e" translate="yes" xml:space="preserve">
          <source>Binding happens when Angular performs &lt;strong&gt;change detection&lt;/strong&gt;.</source>
          <target state="translated">绑定发生在Angular执行&lt;strong&gt;更改检测时&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9f17435a7231c370dd9b277051fa279efb03be5c" translate="yes" xml:space="preserve">
          <source>Binding syntax: an overview</source>
          <target state="translated">约束语法:概述</target>
        </trans-unit>
        <trans-unit id="d5647a339d9f5d3f491fea7dce9161e510086700" translate="yes" xml:space="preserve">
          <source>Binding targets</source>
          <target state="translated">约束目标</target>
        </trans-unit>
        <trans-unit id="f1cd0d1adc0c5198881b5fa4d0d0d93ed50065f6" translate="yes" xml:space="preserve">
          <source>Binding to &lt;code&gt;innerText&lt;/code&gt; in &lt;code&gt;platform-server&lt;/code&gt;</source>
          <target state="translated">绑定到 &lt;code&gt;innerText&lt;/code&gt; 在 &lt;code&gt;platform-server&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41bde9dd651e82f521b541fdc41775c9aa970888" translate="yes" xml:space="preserve">
          <source>Binding to an &lt;code&gt;@Input&lt;/code&gt; property</source>
          <target state="translated">绑定到 &lt;code&gt;@Input&lt;/code&gt; 属性</target>
        </trans-unit>
        <trans-unit id="1008f5e8313e01e8a35aaef1612e93ffb2fdf201" translate="yes" xml:space="preserve">
          <source>Binding to user input events</source>
          <target state="translated">绑定用户输入事件</target>
        </trans-unit>
        <trans-unit id="a0900669bf69957ea18b3c6bc31b0c068974fb65" translate="yes" xml:space="preserve">
          <source>Binding types and targets</source>
          <target state="translated">约束类型和目标</target>
        </trans-unit>
        <trans-unit id="3d8a515e1c9d4c4474858b033088bbcd501cde60" translate="yes" xml:space="preserve">
          <source>Binding types other than interpolation have a &lt;strong&gt;target name&lt;/strong&gt; to the left of the equal sign, either surrounded by punctuation, &lt;code&gt;[]&lt;/code&gt; or &lt;code&gt;()&lt;/code&gt;, or preceded by a prefix: &lt;code&gt;bind-&lt;/code&gt;, &lt;code&gt;on-&lt;/code&gt;, &lt;code&gt;bindon-&lt;/code&gt;.</source>
          <target state="translated">结合其它类型的比内插有一个&lt;strong&gt;目标名称&lt;/strong&gt;向左等号，无论是通过标点包围， &lt;code&gt;[]&lt;/code&gt; 或 &lt;code&gt;()&lt;/code&gt; ，或由一个前缀之后： &lt;code&gt;bind-&lt;/code&gt; ， &lt;code&gt;on-&lt;/code&gt; ， &lt;code&gt;bindon-&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9489430053bbe362e29d4adc605c0ee490984678" translate="yes" xml:space="preserve">
          <source>Bindings/interpolation</source>
          <target state="translated">Bindings/interpolation</target>
        </trans-unit>
        <trans-unit id="c5508d22bc8524cbfc21537e7df0e0da3d89023d" translate="yes" xml:space="preserve">
          <source>Bindings:</source>
          <target state="translated">Bindings:</target>
        </trans-unit>
        <trans-unit id="6fdec0a2d226423ce21951dc8d539e2b83505cca" translate="yes" xml:space="preserve">
          <source>Binds a host element property (here, the CSS class &lt;code&gt;valid&lt;/code&gt;) to a directive/component property (&lt;code&gt;isValid&lt;/code&gt;).</source>
          <target state="translated">将主机元素属性（此处为CSS类 &lt;code&gt;valid&lt;/code&gt; ）绑定到指令/组件属性（ &lt;code&gt;isValid&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2a03f296a2db9a927b9dbda94190effddfbe9a35" translate="yes" xml:space="preserve">
          <source>Binds a property to an interpolated string, for example, &quot;Hello Seabiscuit&quot;. Equivalent to: &lt;code&gt;&amp;lt;div [title]=&quot;'Hello ' + ponyName&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">将属性绑定到插值字符串，例如&amp;ldquo; Hello Seabiscuit&amp;rdquo;。等效于： &lt;code&gt;&amp;lt;div [title]=&quot;'Hello ' + ponyName&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d7ccc5ce4a07981d8fbbdb0cd830cbe571385e3" translate="yes" xml:space="preserve">
          <source>Binds an existing &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">将现有的 &lt;code&gt;&lt;a href=&quot;formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 绑定到DOM元素。</target>
        </trans-unit>
        <trans-unit id="9ccd1d736a8432535c2d3c15a12d59d85c60d529" translate="yes" xml:space="preserve">
          <source>Binds an existing &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; to a DOM element.</source>
          <target state="translated">将现有的 &lt;code&gt;&lt;a href=&quot;forms/formgroup&quot;&gt;FormGroup&lt;/a&gt;&lt;/code&gt; 绑定到DOM元素。</target>
        </trans-unit>
        <trans-unit id="16fe924da3cac78aab1564f33684600fc3e54d31" translate="yes" xml:space="preserve">
          <source>Binds attribute &lt;code&gt;role&lt;/code&gt; to the result of expression &lt;code&gt;myAriaRole&lt;/code&gt;.</source>
          <target state="translated">将属性 &lt;code&gt;role&lt;/code&gt; 绑定到表达式 &lt;code&gt;myAriaRole&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="f54affac6186ad384ce54918e8587b01c740b31d" translate="yes" xml:space="preserve">
          <source>Binds property &lt;code&gt;value&lt;/code&gt; to the result of expression &lt;code&gt;firstName&lt;/code&gt;.</source>
          <target state="translated">将属性 &lt;code&gt;value&lt;/code&gt; 绑定到表达式 &lt;code&gt;firstName&lt;/code&gt; 的结果。</target>
        </trans-unit>
        <trans-unit id="f28cdf8e45d544332ba50c27586202007f4d2bd8" translate="yes" xml:space="preserve">
          <source>Binds style property &lt;code&gt;width&lt;/code&gt; to the result of expression &lt;code&gt;mySize&lt;/code&gt; in pixels. Units are optional.</source>
          <target state="translated">将样式属性 &lt;code&gt;width&lt;/code&gt; 绑定到表达式 &lt;code&gt;mySize&lt;/code&gt; 的结果（以像素为单位）。单位是可选的。</target>
        </trans-unit>
        <trans-unit id="17a444202922e95677dbac286aa416c23efd0983" translate="yes" xml:space="preserve">
          <source>Binds text content to an interpolated string, for example, &quot;Hello Seabiscuit&quot;.</source>
          <target state="translated">将文本内容与插值字符串绑定,例如 &quot;Hello Seabiscuit&quot;。</target>
        </trans-unit>
        <trans-unit id="8a53a7d5df799e913a7ec437d4dd501a26095ee7" translate="yes" xml:space="preserve">
          <source>Binds the first result of the component content query (&lt;code&gt;myPredicate&lt;/code&gt;) to a property (&lt;code&gt;myChildComponent&lt;/code&gt;) of the class.</source>
          <target state="translated">将组件内容查询的第一个结果（ &lt;code&gt;myPredicate&lt;/code&gt; ）绑定到该类的属性（ &lt;code&gt;myChildComponent&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d462ed51c89027f3d448e6304b58618b5f4dc0bb" translate="yes" xml:space="preserve">
          <source>Binds the first result of the component view query (&lt;code&gt;myPredicate&lt;/code&gt;) to a property (&lt;code&gt;myChildComponent&lt;/code&gt;) of the class. Not available for directives.</source>
          <target state="translated">将组件视图查询的第一个结果（ &lt;code&gt;myPredicate&lt;/code&gt; ）绑定到该类的属性（ &lt;code&gt;myChildComponent&lt;/code&gt; ）。不适用于指令。</target>
        </trans-unit>
        <trans-unit id="0e092be7e1c05ee4dd0e489bb77875249aed43ca" translate="yes" xml:space="preserve">
          <source>Binds the presence of CSS classes on the element to the truthiness of the associated map values. The right-hand expression should return {class-name: true/false} map.</source>
          <target state="translated">将元素上CSS类的存在与相关地图值的真实性绑定。右边的表达式应该返回{class-name:true/false}地图。</target>
        </trans-unit>
        <trans-unit id="671bb5d878441fb7fa959c57f931fb9e81582167" translate="yes" xml:space="preserve">
          <source>Binds the presence of the CSS class &lt;code&gt;extra-sparkle&lt;/code&gt; on the element to the truthiness of the expression &lt;code&gt;isDelightful&lt;/code&gt;.</source>
          <target state="translated">结合的CSS类的存在下 &lt;code&gt;extra-sparkle&lt;/code&gt; 的元件到表达的感实性上 &lt;code&gt;isDelightful&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a75de65e1c312de631f318f4e7d379f7e3b0db7e" translate="yes" xml:space="preserve">
          <source>Binds the results of the component content query (&lt;code&gt;myPredicate&lt;/code&gt;) to a property (&lt;code&gt;myChildComponents&lt;/code&gt;) of the class.</source>
          <target state="translated">将组件内容查询（ &lt;code&gt;myPredicate&lt;/code&gt; ）的结果绑定到属性（ &lt;code&gt;myChildComponents&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2153c3e38b198c59245e2713a80794aac2809840" translate="yes" xml:space="preserve">
          <source>Binds the results of the component view query (&lt;code&gt;myPredicate&lt;/code&gt;) to a property (&lt;code&gt;myChildComponents&lt;/code&gt;) of the class. Not available for directives.</source>
          <target state="translated">将组件视图查询（ &lt;code&gt;myPredicate&lt;/code&gt; ）的结果绑定到该类的属性（ &lt;code&gt;myChildComponents&lt;/code&gt; ）。不适用于指令。</target>
        </trans-unit>
        <trans-unit id="c24315eb20cc1f5a565ec08f29abab31c0925f1a" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="translated">Blob</target>
        </trans-unit>
        <trans-unit id="226ebb87480ef673fc8c86d3504690e25d113738" translate="yes" xml:space="preserve">
          <source>Bodies are not enforced to be immutable, as they can include a reference to any user-defined data type. However, interceptors should take care to preserve idempotence by treating them as such.</source>
          <target state="translated">不强制要求机构是不可变的,因为它们可以包括对任何用户定义的数据类型的引用。然而,拦截者应注意通过将其作为数据类型来维护幂等性。</target>
        </trans-unit>
        <trans-unit id="4a7fdd8c17425252332ea0e89a35722b72d83135" translate="yes" xml:space="preserve">
          <source>Books</source>
          <target state="translated">Books</target>
        </trans-unit>
        <trans-unit id="af107074fdc94049367385cfa9e21226f2eb6a09" translate="yes" xml:space="preserve">
          <source>Boolean (marked deprecated in v5): &lt;code&gt;true&lt;/code&gt; for symbol and false for &lt;code&gt;code&lt;/code&gt;.</source>
          <target state="translated">布尔值（在v5中标记为不推荐使用）： &lt;code&gt;true&lt;/code&gt; 表示symbol，false表示 &lt;code&gt;code&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b4ee3c164f30fd674db7923067c5585c6016a895" translate="yes" xml:space="preserve">
          <source>Boolean and enumerated options</source>
          <target state="translated">布尔型和枚举型选项</target>
        </trans-unit>
        <trans-unit id="ee3701cfb07b487ff0074c548b7c853abc094675" translate="yes" xml:space="preserve">
          <source>Boolean options have two forms: &lt;code&gt;--thisOption&lt;/code&gt; sets the flag, &lt;code&gt;--noThisOption&lt;/code&gt; clears it. If neither option is supplied, the flag remains in its default state, as listed in the reference documentation.</source>
          <target state="translated">布尔选项有两种形式：-- &lt;code&gt;--thisOption&lt;/code&gt; 设置标志，-- &lt;code&gt;--noThisOption&lt;/code&gt; 清除标志。如果两个选项均未提供，则该标志将保持其默认状态，如参考文档中所列。</target>
        </trans-unit>
        <trans-unit id="43aac281118e73bd2de105009d38e4c096ce545e" translate="yes" xml:space="preserve">
          <source>Boolean value matching</source>
          <target state="translated">布尔值匹配</target>
        </trans-unit>
        <trans-unit id="22cb4db816b227d666bef5f940023e6d431b8292" translate="yes" xml:space="preserve">
          <source>Boolean values in transitions</source>
          <target state="translated">过渡中的布尔值</target>
        </trans-unit>
        <trans-unit id="89ec4ec2bf400e823f3ca49d0cb938b0fedd7bab" translate="yes" xml:space="preserve">
          <source>Bootstrap</source>
          <target state="translated">Bootstrap</target>
        </trans-unit>
        <trans-unit id="984a1c95ee8f803062739b46151930f8fcc64cc3" translate="yes" xml:space="preserve">
          <source>Bootstrap The runtime instance of this class contains a &lt;a href=&quot;upgrademodule#bootstrap&quot;&gt;`bootstrap()`&lt;/a&gt; method, which you use to bootstrap the top level AngularJS module onto an element in the DOM for the hybrid upgrade app.</source>
          <target state="translated">Bootstrap此类的运行时实例包含一个&lt;a href=&quot;upgrademodule#bootstrap&quot;&gt;bootstrap（）。&lt;/a&gt;方法，您可以使用该方法将顶级AngularJS模块引导到混合升级应用程序的DOM元素中。</target>
        </trans-unit>
        <trans-unit id="b2bfe58675219a1dbbfc6b3475d2142be8257202" translate="yes" xml:space="preserve">
          <source>Bootstrap a hybrid AngularJS / Angular application.</source>
          <target state="translated">Bootstrap一个混合的AngularJS/Angular应用程序。</target>
        </trans-unit>
        <trans-unit id="51ee9ae036bd74ef9a86c64b16240b06c2a27ba8" translate="yes" xml:space="preserve">
          <source>Bootstrap a new component at the root level of the application.</source>
          <target state="translated">在应用程序的根级引导一个新的组件。</target>
        </trans-unit>
        <trans-unit id="e4a6b7f980306983d4418b9e062151bb02f12137" translate="yes" xml:space="preserve">
          <source>Bootstrap an AngularJS application from this NgModule</source>
          <target state="translated">从这个NgModule中引导一个AngularJS应用程序。</target>
        </trans-unit>
        <trans-unit id="c43ac6907ee5f49cf786f03c5183c92913a7be9f" translate="yes" xml:space="preserve">
          <source>Bootstrap process</source>
          <target state="translated">Bootstrap进程</target>
        </trans-unit>
        <trans-unit id="f816445d2cdd3ec11a7f0bc29a3553b746ba7f58" translate="yes" xml:space="preserve">
          <source>Bootstrap the &lt;code&gt;AppModule&lt;/code&gt; in &lt;code&gt;main.ts&lt;/code&gt;.</source>
          <target state="translated">在 &lt;code&gt;AppModule&lt;/code&gt; 中引导 &lt;code&gt;main.ts&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a8e9582bb8e53711c79f2e9de1050077a16c41c3" translate="yes" xml:space="preserve">
          <source>Bootstrap the app with those providers.</source>
          <target state="translated">用这些供应商来引导应用。</target>
        </trans-unit>
        <trans-unit id="09273e0b3502cd35874b01a3ba91c106f87a667f" translate="yes" xml:space="preserve">
          <source>Bootstrapping</source>
          <target state="translated">Bootstrapping</target>
        </trans-unit>
        <trans-unit id="5a7db5fc491694b2f101ec433ecf1bf5688abf3d" translate="yes" xml:space="preserve">
          <source>Bootstrapping a hybrid PhoneCat</source>
          <target state="translated">混合型PhoneCat的Bootstrapping</target>
        </trans-unit>
        <trans-unit id="9aa9a98e544eb5606246801d9bd2a8d5e0833195" translate="yes" xml:space="preserve">
          <source>Bootstrapping hybrid applications</source>
          <target state="translated">混合应用程序的引导</target>
        </trans-unit>
        <trans-unit id="09c0fece45f5112a211482199d5921f05490b2bf" translate="yes" xml:space="preserve">
          <source>Bootstrapping of a hybrid Angular application which contains both of the frameworks coexisting in a single application.</source>
          <target state="translated">混合型Angular应用的Bootstrapping,它包含两个框架共存于一个应用中。</target>
        </trans-unit>
        <trans-unit id="0ca02e3c0ffaf3a6883168e9851d5db6a98acc44" translate="yes" xml:space="preserve">
          <source>Bootstrapping with &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;&lt;a href=&quot;../api/upgrade/static/downgrademodule&quot;&gt;downgradeModule&lt;/a&gt;()&lt;/code&gt; 引导（）</target>
        </trans-unit>
        <trans-unit id="be52c694b99b80c209e0ec9f6005df403bbc8030" translate="yes" xml:space="preserve">
          <source>Bootstraps the app, using the root component from the specified &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">使用来自指定 &lt;code&gt;&lt;a href=&quot;../api/core/ngmodule&quot;&gt;NgModule&lt;/a&gt;&lt;/code&gt; 的根组件来引导应用程序。</target>
        </trans-unit>
        <trans-unit id="bc574769bfd4b0921435e1d96eebd017fb7655ce" translate="yes" xml:space="preserve">
          <source>Bootstraps the worker ui.</source>
          <target state="translated">Bootstraps的Worker ui。</target>
        </trans-unit>
        <trans-unit id="843c4cada239f4bc2cc6160b3122b53d22b9e4aa" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;ng build&lt;/code&gt; and &lt;code&gt;ng serve&lt;/code&gt; clear the output folder before they build the project, but only the &lt;code&gt;ng build&lt;/code&gt; command writes the generated build artifacts to the output folder.</source>
          <target state="translated">无论 &lt;code&gt;ng build&lt;/code&gt; 和 &lt;code&gt;ng serve&lt;/code&gt; 清除输出文件夹，他们建立项目之前，但只有 &lt;code&gt;ng build&lt;/code&gt; 命令将生成的生成工件到输出文件夹。</target>
        </trans-unit>
        <trans-unit id="9ea4794ef24c179c732e4dbb95359c533623f529" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt; install the packages that are identified in a &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt; file.</source>
          <target state="translated">无论 &lt;code&gt;npm&lt;/code&gt; 和 &lt;code&gt;yarn&lt;/code&gt; 安装在一个确定的包&lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt; &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt;文件。</target>
        </trans-unit>
        <trans-unit id="efd9072be34ddd4cd3ac6531f4cdfce31589a567" translate="yes" xml:space="preserve">
          <source>Both AngularJS and Angular have their own concept of modules to help organize an app into cohesive blocks of functionality.</source>
          <target state="translated">AngularJS和Angular都有自己的模块概念,帮助将一个应用组织成有凝聚力的功能块。</target>
        </trans-unit>
        <trans-unit id="f8b1d87ddf1e625974551a1a9492af7f227f733c" translate="yes" xml:space="preserve">
          <source>Both AngularJS and Angular have their own concept of modules to help organize an application into cohesive blocks of functionality.</source>
          <target state="translated">AngularJS和Angular都有自己的模块概念,以帮助将一个应用程序组织成有凝聚力的功能块。</target>
        </trans-unit>
        <trans-unit id="d564c53c4c40f094481604ce9c087637f753034c" translate="yes" xml:space="preserve">
          <source>Both buttons navigate back to the crisis list after save or cancel.</source>
          <target state="translated">保存或取消后,这两个按钮都可以导航回危机列表。</target>
        </trans-unit>
        <trans-unit id="64ed4a76603ad54f5413c0e8debcdd97dd1aa9b1" translate="yes" xml:space="preserve">
          <source>Both components and services are simply classes, with &lt;em&gt;decorators&lt;/em&gt; that mark their type and provide metadata that tells Angular how to use them.</source>
          <target state="translated">组件和服务都只是简单的类，带有&lt;em&gt;修饰符的装饰器&lt;/em&gt;可以标记其类型并提供告诉Angular如何使用它们的元数据。</target>
        </trans-unit>
        <trans-unit id="f690c03e061a7fd137c00dd8ab89db4c52afd0e5" translate="yes" xml:space="preserve">
          <source>Both reactive and template-driven forms share underlying building blocks.</source>
          <target state="translated">反应式和模板驱动的形式都共享底层构件。</target>
        </trans-unit>
        <trans-unit id="c547c7a0a78e9d790dbe284eb7240f0e366c99c3" translate="yes" xml:space="preserve">
          <source>Both states are temporary; they are saved only for the lifetime of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope&quot;&gt;ServiceWorker instance&lt;/a&gt;. The browser sometimes terminates an idle service worker to conserve memory and processor power, and creates a new service worker instance in response to network events. The new instance starts in the &lt;code&gt;NORMAL&lt;/code&gt; mode, regardless of the state of the previous instance.</source>
          <target state="translated">两种状态都是暂时的；它们仅在&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope&quot;&gt;ServiceWorker实例&lt;/a&gt;的生存期内保存。浏览器有时会终止空闲的服务程序，以节省内存和处理器电量，并响应于网络事件创建新的服务程序实例。不管先前实例的状态如何，新实例均以 &lt;code&gt;NORMAL&lt;/code&gt; 模式启动。</target>
        </trans-unit>
        <trans-unit id="2d33f13edcd4c6f3ed84da53d2a75dfa7b13538d" translate="yes" xml:space="preserve">
          <source>Both successful and unsuccessful responses can be delivered via &lt;code&gt;&lt;a href=&quot;../../../core/testing/flush&quot;&gt;flush&lt;/a&gt;()&lt;/code&gt;.</source>
          <target state="translated">可以通过 &lt;code&gt;&lt;a href=&quot;../../../core/testing/flush&quot;&gt;flush&lt;/a&gt;()&lt;/code&gt; 传递成功和失败的响应。</target>
        </trans-unit>
        <trans-unit id="14a724638caaef22868a74a59cb2138ec4f02873" translate="yes" xml:space="preserve">
          <source>Break circularities with a forward class reference (&lt;code&gt;forwardRef&lt;/code&gt;)</source>
          <target state="translated">使用前向类引用（ &lt;code&gt;forwardRef&lt;/code&gt; ）中断圆度</target>
        </trans-unit>
        <trans-unit id="19e2cd28b09ef3682ded6d1478601de1d625cc30" translate="yes" xml:space="preserve">
          <source>Break the circularity with &lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">用 &lt;code&gt;&lt;a href=&quot;../api/core/forwardref&quot;&gt;forwardRef&lt;/a&gt;&lt;/code&gt; 打破圆度。</target>
        </trans-unit>
        <trans-unit id="54a2cf5e634dbba0be2bf8a55f79252f5c790bdb" translate="yes" xml:space="preserve">
          <source>Browser</source>
          <target state="translated">Browser</target>
        </trans-unit>
        <trans-unit id="caa7ae8131b0e358dca91885f3b90f7468dff074" translate="yes" xml:space="preserve">
          <source>Browser support</source>
          <target state="translated">浏览器支持</target>
        </trans-unit>
        <trans-unit id="2d988f6baee731e13c5ed58b15e6403c0f5d437c" translate="yes" xml:space="preserve">
          <source>Browser support for custom elements</source>
          <target state="translated">浏览器对自定义元素的支持</target>
        </trans-unit>
        <trans-unit id="3e5c46f54fdcf3e89274890de50e1bbd5f0cdb1b" translate="yes" xml:space="preserve">
          <source>BrowserAnimationsModule</source>
          <target state="translated">BrowserAnimationsModule</target>
        </trans-unit>
        <trans-unit id="1b19571f37782c3b7a2529d132b7eeafffb9c8b7" translate="yes" xml:space="preserve">
          <source>BrowserDynamicTestingModule</source>
          <target state="translated">BrowserDynamicTestingModule</target>
        </trans-unit>
        <trans-unit id="489e469aaed844504ea81ebeeb21f713325a5454" translate="yes" xml:space="preserve">
          <source>BrowserModule</source>
          <target state="translated">BrowserModule</target>
        </trans-unit>
        <trans-unit id="39e941a302cc8d62cbd7fd0aa04f1f300f6db868" translate="yes" xml:space="preserve">
          <source>BrowserTestingModule</source>
          <target state="translated">BrowserTestingModule</target>
        </trans-unit>
        <trans-unit id="1170851384c0cf693a98b5cd9a90dfd12e351c34" translate="yes" xml:space="preserve">
          <source>BrowserTransferStateModule</source>
          <target state="translated">BrowserTransferStateModule</target>
        </trans-unit>
        <trans-unit id="b53e7dea10c2c28052bb71dd93c9ae381907b043" translate="yes" xml:space="preserve">
          <source>Browsers (Desktop &amp;amp; Mobile)</source>
          <target state="translated">浏览器（桌面和移动）</target>
        </trans-unit>
        <trans-unit id="7472f880b5ebe7a2522b3da766321267d335a017" translate="yes" xml:space="preserve">
          <source>Browsers can't execute TypeScript directly. Typescript must be &quot;transpiled&quot; into JavaScript using the &lt;em&gt;tsc&lt;/em&gt; compiler, which requires some configuration.</source>
          <target state="translated">浏览器无法直接执行TypeScript。必须使用&lt;em&gt;tsc&lt;/em&gt;编译器将Typescript&amp;ldquo; 编译&amp;rdquo;为JavaScript ，这需要进行一些配置。</target>
        </trans-unit>
        <trans-unit id="7331906d686c4ec9c7fb5e96c8a75a52e6649767" translate="yes" xml:space="preserve">
          <source>Browsers list The &lt;code&gt;browserslist&lt;/code&gt; configuration file is included in your application &lt;a href=&quot;file-structure#application-configuration-files&quot;&gt;project structure&lt;/a&gt; and provides the minimum browsers your application supports. See the &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist spec&lt;/a&gt; for complete configuration options.</source>
          <target state="translated">浏览器列表 &lt;code&gt;browserslist&lt;/code&gt; 器列表配置文件包含在您的应用程序&lt;a href=&quot;file-structure#application-configuration-files&quot;&gt;项目结构中，&lt;/a&gt;并提供您的应用程序支持的最低浏览器。有关完整的配置选项，请参见&lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;Browserslist规范&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5fd48f06506544e724e31bc1d27319aa4940aeb2" translate="yes" xml:space="preserve">
          <source>Browsers such as Chrome provide developer tools for interacting with service workers. Such tools can be powerful when used properly, but there are a few things to keep in mind.</source>
          <target state="translated">浏览器(如Chrome)提供了用于与服务人员交互的开发者工具。如果使用得当,这类工具可以很强大,但有几件事需要注意。</target>
        </trans-unit>
        <trans-unit id="5f4763bbd263cd5434b3654e03112db678b6b161" translate="yes" xml:space="preserve">
          <source>Build Result</source>
          <target state="translated">构建结果</target>
        </trans-unit>
        <trans-unit id="c674564300cade5252a5db51fce3d3eeff1e91ac" translate="yes" xml:space="preserve">
          <source>Build a simple attribute directive</source>
          <target state="translated">构建一个简单的属性指令</target>
        </trans-unit>
        <trans-unit id="a1ab8e1d24bf4b36f9398025bfb1689b7314ddb9" translate="yes" xml:space="preserve">
          <source>Build an Angular form with a component and template.</source>
          <target state="translated">用组件和模板构建一个Angular表单。</target>
        </trans-unit>
        <trans-unit id="0b16ed964ca1d0b9633697442124487216e8c15a" translate="yes" xml:space="preserve">
          <source>Build and launch the app with debugger by clicking the &lt;strong&gt;Run&lt;/strong&gt; button or by pressing &lt;code&gt;F5&lt;/code&gt;.</source>
          <target state="translated">通过单击&amp;ldquo; &lt;strong&gt;运行&amp;rdquo;&lt;/strong&gt;按钮或按 &lt;code&gt;F5&lt;/code&gt; 来构建并使用调试器启动应用程序。</target>
        </trans-unit>
        <trans-unit id="a841e5989fc4a3f8e040bebb8d4e89ce53e2ea2d" translate="yes" xml:space="preserve">
          <source>Build and run the server again:</source>
          <target state="translated">再次构建并运行服务器。</target>
        </trans-unit>
        <trans-unit id="d6e1e6845b1c24e4e46ae9e1811d147c1fd4b03b" translate="yes" xml:space="preserve">
          <source>Build artifacts (JS and CSS bundles).</source>
          <target state="translated">构建工件(JS和CSS捆绑)。</target>
        </trans-unit>
        <trans-unit id="fe668d7b9bd1bdd039e15e4e4878232c9f14cf75" translate="yes" xml:space="preserve">
          <source>Build for multiple locales</source>
          <target state="translated">为多个地区建立</target>
        </trans-unit>
        <trans-unit id="55d71d005605b731983e1212cab3067f5e36bf4a" translate="yes" xml:space="preserve">
          <source>Build target</source>
          <target state="translated">建立目标</target>
        </trans-unit>
        <trans-unit id="0e3634fbe639279233d0d5ba2b0a7a9a5c30747b" translate="yes" xml:space="preserve">
          <source>Build the library. You cannot use a library before it is built.</source>
          <target state="translated">构建库。在建库之前,你不能使用它。</target>
        </trans-unit>
        <trans-unit id="10f95352487e622a50d6a09f351680b2e04970de" translate="yes" xml:space="preserve">
          <source>Build using Ahead of Time compilation.</source>
          <target state="translated">使用Ahead of Time编译构建。</target>
        </trans-unit>
        <trans-unit id="12147b38fd3c8e49fbaaf0d27106cec8cf6bf7a1" translate="yes" xml:space="preserve">
          <source>Build your app for production &lt;em&gt;including the source maps&lt;/em&gt;</source>
          <target state="translated">构建用于生产的应用程序，&lt;em&gt;包括源地图&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4e1f7908a8fa15b11aa7a8fec3020d998a1cb595" translate="yes" xml:space="preserve">
          <source>Build your library and schematics</source>
          <target state="translated">建立您的资料库和原理图</target>
        </trans-unit>
        <trans-unit id="3a8f2b080985e84ff16f5bd0acaede8ad59a5039" translate="yes" xml:space="preserve">
          <source>Build your project using Github project name, with the Angular CLI command &lt;a href=&quot;cli/build&quot;&gt;&lt;code&gt;ng build&lt;/code&gt;&lt;/a&gt; and the options shown here:</source>
          <target state="translated">使用Github项目名称以及Angular CLI命令&lt;a href=&quot;cli/build&quot;&gt; &lt;code&gt;ng build&lt;/code&gt; &lt;/a&gt;和此处显示的选项来构建项目：</target>
        </trans-unit>
        <trans-unit id="338940014efbeb76bf00b87e6fd1a0b5d3d0dc9f" translate="yes" xml:space="preserve">
          <source>Builder input</source>
          <target state="translated">建设者输入</target>
        </trans-unit>
        <trans-unit id="7ef7408461360b6d8e74a044b183f8de6fc8be2e" translate="yes" xml:space="preserve">
          <source>Builder project structure</source>
          <target state="translated">建设者项目结构</target>
        </trans-unit>
        <trans-unit id="7cec90732540af8e27f18d76711bdd709e2926f7" translate="yes" xml:space="preserve">
          <source>Builders can be synchronous or asynchronous, execute once or watch for external events, and can schedule other builders or targets.</source>
          <target state="translated">建设者可以同步或异步,执行一次或监视外部事件,可以调度其他建设者或目标。</target>
        </trans-unit>
        <trans-unit id="3fc44ef66b534b8d05ed7f18b305da65952fa0a1" translate="yes" xml:space="preserve">
          <source>Builders have option defaults specified in the &lt;code&gt;angular.json&lt;/code&gt; configuration file, which can be overwritten by an alternate configuration for the target, and further overwritten by command line flags.</source>
          <target state="translated">生成器具有在 &lt;code&gt;angular.json&lt;/code&gt; 配置文件中指定的选项默认值，该默认值可以由目标的备用配置覆盖，并进一步由命令行标志覆盖。</target>
        </trans-unit>
        <trans-unit id="58423fd7c3d8a2b3b0288c434ca19a63c03fddd4" translate="yes" xml:space="preserve">
          <source>Building accessible web experience often involves setting &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/semantics-aria&quot;&gt;ARIA attributes&lt;/a&gt; to provide semantic meaning where it might otherwise be missing. Use &lt;a href=&quot;template-syntax#attribute-binding&quot;&gt;attribute binding&lt;/a&gt; template syntax to control the values of accessibility-related attributes.</source>
          <target state="translated">建立可访问的Web体验通常涉及设置&lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/semantics-aria&quot;&gt;ARIA属性，&lt;/a&gt;以提供可能会丢失的语义。使用&lt;a href=&quot;template-syntax#attribute-binding&quot;&gt;属性绑定&lt;/a&gt;模板语法来控制与可访问性相关的属性的值。</target>
        </trans-unit>
        <trans-unit id="ffb0d65cff95173c9727f4ed3f1046730b30b49a" translate="yes" xml:space="preserve">
          <source>Building and rebuilding your library</source>
          <target state="translated">建立和重建你的图书馆</target>
        </trans-unit>
        <trans-unit id="f7125bd3b210a7172b096873cf19164849e1f6b3" translate="yes" xml:space="preserve">
          <source>Building and serving Angular apps</source>
          <target state="translated">构建和服务Angular应用</target>
        </trans-unit>
        <trans-unit id="38044acdb5b1bf0f8b98c5b7c6e09d68e6dbf057" translate="yes" xml:space="preserve">
          <source>Building and serving from disk</source>
          <target state="translated">从磁盘建立和服务</target>
        </trans-unit>
        <trans-unit id="5f44ed433a18b75e46be9d13f403d1b209869c46" translate="yes" xml:space="preserve">
          <source>Building and serving the app for a given locale, using the translated text.</source>
          <target state="translated">使用翻译后的文本,为给定的本地环境构建和服务应用程序。</target>
        </trans-unit>
        <trans-unit id="14d7cef5094185320d88e754c57130b67a38a3c8" translate="yes" xml:space="preserve">
          <source>Building handcrafted forms can be costly and time-consuming, especially if you need a great number of them, they're similar to each other, and they change frequently to meet rapidly changing business and regulatory requirements.</source>
          <target state="translated">构建手工制作的表格可能会耗费大量的成本和时间,特别是当你需要大量的表格时,它们彼此相似,而且它们经常变化以满足快速变化的业务和监管要求。</target>
        </trans-unit>
        <trans-unit id="99b633b8b55f4a4a0e4b874bf81f4324ac607609" translate="yes" xml:space="preserve">
          <source>Building locally</source>
          <target state="translated">当地建设</target>
        </trans-unit>
        <trans-unit id="ea19476edd9c5bc2591da244c58924cd2d0448a0" translate="yes" xml:space="preserve">
          <source>Building with Bazel</source>
          <target state="translated">与巴泽尔一起建设</target>
        </trans-unit>
        <trans-unit id="592a2f2da2ad52e24a8c5d5555474faed5b11d88" translate="yes" xml:space="preserve">
          <source>Building your schematics</source>
          <target state="translated">构建您的原理图</target>
        </trans-unit>
        <trans-unit id="74dbfc5fed244390666be30faae5de6b93204f0d" translate="yes" xml:space="preserve">
          <source>Builds a class that encapsulates the functionality of the provided component and uses the configuration information to provide more context to the class. Takes the component factory's inputs and outputs to convert them to the proper custom element API and add hooks to input changes.</source>
          <target state="translated">构建一个封装所提供组件功能的类,并使用配置信息为该类提供更多的上下文。将组件工厂的输入和输出转换为适当的自定义元素API,并为输入变化添加钩子。</target>
        </trans-unit>
        <trans-unit id="232819cbe5519dee306aa0895ba18910a5ec7859" translate="yes" xml:space="preserve">
          <source>Builds a factory for producing a defined animation.</source>
          <target state="translated">建立一个工厂来制作一个定义的动画。</target>
        </trans-unit>
        <trans-unit id="29a6ebd47094fe74b2826b82789b68332b6c3967" translate="yes" xml:space="preserve">
          <source>Builds and serves an Angular app, then runs end-to-end tests using Protractor.</source>
          <target state="translated">构建并服务于一个Angular应用,然后使用Protractor运行端到端测试。</target>
        </trans-unit>
        <trans-unit id="e2a7d33be0b02d6a586a825825ca723c6f2b203a" translate="yes" xml:space="preserve">
          <source>Builds and serves your app, rebuilding on file changes.</source>
          <target state="translated">构建并服务于你的应用程序,根据文件变化进行重建。</target>
        </trans-unit>
        <trans-unit id="3699f6d3ab9939f61e3dfd80b624361cc8f93a32" translate="yes" xml:space="preserve">
          <source>Built-in &lt;code&gt;structural&lt;/code&gt; directives</source>
          <target state="translated">内置 &lt;code&gt;structural&lt;/code&gt; 指令</target>
        </trans-unit>
        <trans-unit id="788c41440c17fec4a3ceedf2627edc4891b3e70f" translate="yes" xml:space="preserve">
          <source>Built-in attribute directives</source>
          <target state="translated">内置属性指令</target>
        </trans-unit>
        <trans-unit id="34fc1e1b84850bf75a3a8ab79f67893426bb2dbb" translate="yes" xml:space="preserve">
          <source>Built-in directives</source>
          <target state="translated">内置指令</target>
        </trans-unit>
        <trans-unit id="f1881fdacac2d002db723126c9b7e1fc54324ce1" translate="yes" xml:space="preserve">
          <source>Built-in directives use only public APIs; that is, they do not have special access to any private APIs that other directives can't access.</source>
          <target state="translated">内建指令只使用公共API;也就是说,它们对其他指令无法访问的任何私有API没有特殊的访问权限。</target>
        </trans-unit>
        <trans-unit id="14c8e0c882b739a0956ce99a903aa60c7db8e7b0" translate="yes" xml:space="preserve">
          <source>Built-in pipes</source>
          <target state="translated">内置管道</target>
        </trans-unit>
        <trans-unit id="f846a8ef31181b4f0e27e3db37268decf8f99a23" translate="yes" xml:space="preserve">
          <source>Built-in template functions</source>
          <target state="translated">内置模板功能</target>
        </trans-unit>
        <trans-unit id="853adbe6a9c9185cf38b20fec800da9b6c47bf4a" translate="yes" xml:space="preserve">
          <source>Built-in validators</source>
          <target state="translated">内置验证器</target>
        </trans-unit>
        <trans-unit id="23270ff48782c619fd08871d4873b8a228d6bad4" translate="yes" xml:space="preserve">
          <source>Bundling: concatenates your many application and library files into a few bundles.</source>
          <target state="translated">捆绑:将您的许多应用程序和库文件连接成几个捆绑文件。</target>
        </trans-unit>
        <trans-unit id="b77c50fe85e215a333530a2770df5fc00971a9a0" translate="yes" xml:space="preserve">
          <source>But a component is more than just its class. A component interacts with the DOM and with other components. The &lt;em&gt;class-only&lt;/em&gt; tests can tell you about class behavior. They cannot tell you if the component is going to render properly, respond to user input and gestures, or integrate with its parent and child components.</source>
          <target state="translated">但是，组件不仅仅是其类。组件与DOM和其他组件进行交互。该&lt;em&gt;只类&lt;/em&gt;的测试可以告诉你类的行为。他们无法告诉您组件是否要正确渲染，响应用户输入和手势或与其父子组件集成。</target>
        </trans-unit>
        <trans-unit id="dd16c28b37bfac9fd975ec035f73fbe88687604a" translate="yes" xml:space="preserve">
          <source>But a component or directive shouldn't blindly trust &lt;em&gt;other&lt;/em&gt; components and directives. The properties of a component or directive are hidden from binding by default. They are &lt;em&gt;private&lt;/em&gt; from an Angular binding perspective. When adorned with the &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; decorator, the property becomes &lt;em&gt;public&lt;/em&gt; from an Angular binding perspective. Only then can it be bound by some other component or directive.</source>
          <target state="translated">但是，组件或指令不应盲目地信任&lt;em&gt;其他&lt;/em&gt;组件和指令。默认情况下，组件或指令的属性从绑定中隐藏。从Angular绑定角度来看，它们是&lt;em&gt;私有&lt;/em&gt;的。当使用 &lt;code&gt;@&lt;a href=&quot;../api/core/input&quot;&gt;Input&lt;/a&gt;&lt;/code&gt; 装饰器进行装饰时，该属性将从Angular绑定角度变为&lt;em&gt;公共&lt;/em&gt;。只有这样，它才能被其他组件或指令绑定。</target>
        </trans-unit>
        <trans-unit id="4c3ff50267ef1b91995b1701f72f05cd08be99af" translate="yes" xml:space="preserve">
          <source>But always implement a &lt;em&gt;pure pipe&lt;/em&gt; with a &lt;em&gt;pure function&lt;/em&gt;. Otherwise, you'll see many console errors regarding expressions that changed after they were checked.</source>
          <target state="translated">但是，请始终实现具有&lt;em&gt;纯函数&lt;/em&gt;的&lt;em&gt;纯管道&lt;/em&gt;。否则，您将看到许多关于在检查表达式后更改的控制台错误。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
